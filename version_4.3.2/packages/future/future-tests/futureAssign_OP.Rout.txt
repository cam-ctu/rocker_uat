
R version 4.3.2 (2023-10-31) -- "Eye Holes"
Copyright (C) 2023 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> source("incl/start.R")
[16:04:31.456] plan(): Setting new future strategy stack:
[16:04:31.457] List of future strategies:
[16:04:31.457] 1. sequential:
[16:04:31.457]    - args: function (..., envir = parent.frame())
[16:04:31.457]    - tweaked: FALSE
[16:04:31.457]    - call: future::plan("sequential")
[16:04:31.470] plan(): nbrOfWorkers() = 1
> 
> message("*** %<-% ...")
*** %<-% ...
> 
> for (cores in 1:availCores) {
+   ## Speed up CRAN checks: Skip on CRAN Windows 32-bit
+   if (!fullTest && isWin32) next
+   
+   message(sprintf("Testing with %d cores ...", cores))
+   options(mc.cores = cores)
+ 
+   for (strategy in supportedStrategies(cores)) {
+     message(sprintf("*** %%<-%% with %s futures ...", sQuote(strategy)))
+     plan(strategy)
+ 
+     rm(list = intersect(c("x", "y"), ls()))
+ 
+     message("** Future evaluation without globals")
+     v1 %<-% { x <- 1 }
+     stopifnot(!exists("x", inherits = FALSE), identical(v1, 1))
+ 
+     message("** Future evaluation with globals")
+     a <- 2
+     v2 %<-% { x <- a }
+     stopifnot(!exists("x", inherits = FALSE), identical(v2, a))
+ 
+     message("** Future evaluation with errors")
+     v3 %<-% {
+       x <- 3
+       stop("Woops!")
+       x
+     }
+     stopifnot(!exists("x", inherits = FALSE))
+     res <- tryCatch(identical(v3, 3), error = identity)
+     stopifnot(inherits(res, "error"))
+ 
+ 
+     y <- listenv::listenv()
+     for (ii in 1:3) {
+       y[[ii]] %<-% {
+         if (ii %% 2 == 0) stop("Woops!")
+         ii
+       }
+     }
+     res <- tryCatch(as.list(y), error = identity)
+     stopifnot(inherits(res, "error"))
+     z <- y[c(1, 3)]
+     z <- unlist(z)
+     stopifnot(all(z == c(1, 3)))
+     res <- tryCatch(y[[2]], error = identity)
+     stopifnot(inherits(res, "error"))
+     res <- tryCatch(y[1:2], error = identity)
+     stopifnot(inherits(res, "error"))
+ 
+ 
+     message("** Future evaluation with a poor-man's \"progress bar\"")
+     v4 %<-% {
+       cat("Processing: ")
+       for (ii in 1:10) { cat(".") }
+       cat(" [100%]\n")
+       4
+     }
+ 
+ 
+     message("** Collecting results")
+     printf("v1 = %s\n", v1)
+     stopifnot(v1 == 1)
+ 
+     printf("v2 = %s\n", v2)
+     stopifnot(v2 == a)
+ 
+     stopifnot(tryCatch({
+       printf("v3 = %s\n", v3)
+     }, error = function(ex) {
+       printf("v3: <%s> (as expect)\n", class(ex)[1])
+       TRUE
+     }))
+ 
+     printf("v4 = %s\n", v4)
+     #stopifnot(v4 == 4)
+ 
+ 
+     message("** Left-to-right and right-to-left future assignments")
+     c %<-% 1
+     printf("c = %s\n", c)
+     1 %->% d
+     printf("d = %s\n", d)
+     stopifnot(d == c)
+ 
+ 
+ 
+     message("** Nested future assignments")
+     a %<-% {
+       b <- 1
+       c %<-% 2
+       3 -> d
+       4 %->% e
+       b + c + d + e
+     }
+     printf("a = %s\n", a)
+     stopifnot(a == 10)
+ 
+     { a + 1 } %->% b
+     printf("b = %s\n", b)
+     stopifnot(b == a + 1)
+ 
+     message(sprintf("*** %%<-%% with %s futures ... DONE", sQuote(strategy)))
+   } # for (strategy in ...)
+ 
+   message(sprintf("Testing with %d cores ... DONE", cores))
+ } ## for (cores ...)
Testing with 1 cores ...
*** %<-% with ‘sequential’ futures ...
[16:04:31.523] plan(): Setting new future strategy stack:
[16:04:31.523] List of future strategies:
[16:04:31.523] 1. sequential:
[16:04:31.523]    - args: function (..., envir = parent.frame())
[16:04:31.523]    - tweaked: FALSE
[16:04:31.523]    - call: plan(strategy)
[16:04:31.534] plan(): nbrOfWorkers() = 1
** Future evaluation without globals
[16:04:31.535] getGlobalsAndPackages() ...
[16:04:31.536] Searching for globals...
[16:04:31.540] - globals found: [2] ‘{’, ‘<-’
[16:04:31.540] Searching for globals ... DONE
[16:04:31.540] Resolving globals: FALSE
[16:04:31.541] 
[16:04:31.541] 
[16:04:31.541] getGlobalsAndPackages() ... DONE
[16:04:31.542] run() for ‘Future’ ...
[16:04:31.542] - state: ‘created’
[16:04:31.542] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[16:04:31.542] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[16:04:31.542] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[16:04:31.542]   - Field: ‘label’
[16:04:31.543]   - Field: ‘local’
[16:04:31.543]   - Field: ‘owner’
[16:04:31.543]   - Field: ‘envir’
[16:04:31.543]   - Field: ‘packages’
[16:04:31.543]   - Field: ‘gc’
[16:04:31.543]   - Field: ‘conditions’
[16:04:31.543]   - Field: ‘expr’
[16:04:31.543]   - Field: ‘uuid’
[16:04:31.543]   - Field: ‘seed’
[16:04:31.543]   - Field: ‘version’
[16:04:31.543]   - Field: ‘result’
[16:04:31.544]   - Field: ‘asynchronous’
[16:04:31.544]   - Field: ‘calls’
[16:04:31.544]   - Field: ‘globals’
[16:04:31.544]   - Field: ‘stdout’
[16:04:31.544]   - Field: ‘earlySignal’
[16:04:31.544]   - Field: ‘lazy’
[16:04:31.544]   - Field: ‘state’
[16:04:31.544] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[16:04:31.544] - Launch lazy future ...
[16:04:31.545] Packages needed by the future expression (n = 0): <none>
[16:04:31.545] Packages needed by future strategies (n = 0): <none>
[16:04:31.546] {
[16:04:31.546]     {
[16:04:31.546]         {
[16:04:31.546]             ...future.startTime <- base::Sys.time()
[16:04:31.546]             {
[16:04:31.546]                 {
[16:04:31.546]                   {
[16:04:31.546]                     base::local({
[16:04:31.546]                       has_future <- base::requireNamespace("future", 
[16:04:31.546]                         quietly = TRUE)
[16:04:31.546]                       if (has_future) {
[16:04:31.546]                         ns <- base::getNamespace("future")
[16:04:31.546]                         version <- ns[[".package"]][["version"]]
[16:04:31.546]                         if (is.null(version)) 
[16:04:31.546]                           version <- utils::packageVersion("future")
[16:04:31.546]                       }
[16:04:31.546]                       else {
[16:04:31.546]                         version <- NULL
[16:04:31.546]                       }
[16:04:31.546]                       if (!has_future || version < "1.8.0") {
[16:04:31.546]                         info <- base::c(r_version = base::gsub("R version ", 
[16:04:31.546]                           "", base::R.version$version.string), 
[16:04:31.546]                           platform = base::sprintf("%s (%s-bit)", 
[16:04:31.546]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:04:31.546]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[16:04:31.546]                             "release", "version")], collapse = " "), 
[16:04:31.546]                           hostname = base::Sys.info()[["nodename"]])
[16:04:31.546]                         info <- base::sprintf("%s: %s", base::names(info), 
[16:04:31.546]                           info)
[16:04:31.546]                         info <- base::paste(info, collapse = "; ")
[16:04:31.546]                         if (!has_future) {
[16:04:31.546]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:04:31.546]                             info)
[16:04:31.546]                         }
[16:04:31.546]                         else {
[16:04:31.546]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:04:31.546]                             info, version)
[16:04:31.546]                         }
[16:04:31.546]                         base::stop(msg)
[16:04:31.546]                       }
[16:04:31.546]                     })
[16:04:31.546]                   }
[16:04:31.546]                   options(future.plan = NULL)
[16:04:31.546]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:04:31.546]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:04:31.546]                 }
[16:04:31.546]                 ...future.workdir <- getwd()
[16:04:31.546]             }
[16:04:31.546]             ...future.oldOptions <- base::as.list(base::.Options)
[16:04:31.546]             ...future.oldEnvVars <- base::Sys.getenv()
[16:04:31.546]         }
[16:04:31.546]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:04:31.546]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:04:31.546]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:04:31.546]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:04:31.546]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:04:31.546]             future.stdout.windows.reencode = NULL, width = 80L)
[16:04:31.546]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:04:31.546]             base::names(...future.oldOptions))
[16:04:31.546]     }
[16:04:31.546]     if (FALSE) {
[16:04:31.546]     }
[16:04:31.546]     else {
[16:04:31.546]         if (TRUE) {
[16:04:31.546]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:04:31.546]                 open = "w")
[16:04:31.546]         }
[16:04:31.546]         else {
[16:04:31.546]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:04:31.546]                 windows = "NUL", "/dev/null"), open = "w")
[16:04:31.546]         }
[16:04:31.546]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:04:31.546]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:04:31.546]             base::sink(type = "output", split = FALSE)
[16:04:31.546]             base::close(...future.stdout)
[16:04:31.546]         }, add = TRUE)
[16:04:31.546]     }
[16:04:31.546]     ...future.frame <- base::sys.nframe()
[16:04:31.546]     ...future.conditions <- base::list()
[16:04:31.546]     ...future.rng <- base::globalenv()$.Random.seed
[16:04:31.546]     if (FALSE) {
[16:04:31.546]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:04:31.546]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:04:31.546]     }
[16:04:31.546]     ...future.result <- base::tryCatch({
[16:04:31.546]         base::withCallingHandlers({
[16:04:31.546]             ...future.value <- base::withVisible(base::local({
[16:04:31.546]                 x <- 1
[16:04:31.546]             }))
[16:04:31.546]             future::FutureResult(value = ...future.value$value, 
[16:04:31.546]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:04:31.546]                   ...future.rng), globalenv = if (FALSE) 
[16:04:31.546]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:04:31.546]                     ...future.globalenv.names))
[16:04:31.546]                 else NULL, started = ...future.startTime, version = "1.8")
[16:04:31.546]         }, condition = base::local({
[16:04:31.546]             c <- base::c
[16:04:31.546]             inherits <- base::inherits
[16:04:31.546]             invokeRestart <- base::invokeRestart
[16:04:31.546]             length <- base::length
[16:04:31.546]             list <- base::list
[16:04:31.546]             seq.int <- base::seq.int
[16:04:31.546]             signalCondition <- base::signalCondition
[16:04:31.546]             sys.calls <- base::sys.calls
[16:04:31.546]             `[[` <- base::`[[`
[16:04:31.546]             `+` <- base::`+`
[16:04:31.546]             `<<-` <- base::`<<-`
[16:04:31.546]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:04:31.546]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:04:31.546]                   3L)]
[16:04:31.546]             }
[16:04:31.546]             function(cond) {
[16:04:31.546]                 is_error <- inherits(cond, "error")
[16:04:31.546]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:04:31.546]                   NULL)
[16:04:31.546]                 if (is_error) {
[16:04:31.546]                   sessionInformation <- function() {
[16:04:31.546]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:04:31.546]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:04:31.546]                       search = base::search(), system = base::Sys.info())
[16:04:31.546]                   }
[16:04:31.546]                   ...future.conditions[[length(...future.conditions) + 
[16:04:31.546]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:04:31.546]                     cond$call), session = sessionInformation(), 
[16:04:31.546]                     timestamp = base::Sys.time(), signaled = 0L)
[16:04:31.546]                   signalCondition(cond)
[16:04:31.546]                 }
[16:04:31.546]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:04:31.546]                 "immediateCondition"))) {
[16:04:31.546]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:04:31.546]                   ...future.conditions[[length(...future.conditions) + 
[16:04:31.546]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:04:31.546]                   if (TRUE && !signal) {
[16:04:31.546]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:04:31.546]                     {
[16:04:31.546]                       inherits <- base::inherits
[16:04:31.546]                       invokeRestart <- base::invokeRestart
[16:04:31.546]                       is.null <- base::is.null
[16:04:31.546]                       muffled <- FALSE
[16:04:31.546]                       if (inherits(cond, "message")) {
[16:04:31.546]                         muffled <- grepl(pattern, "muffleMessage")
[16:04:31.546]                         if (muffled) 
[16:04:31.546]                           invokeRestart("muffleMessage")
[16:04:31.546]                       }
[16:04:31.546]                       else if (inherits(cond, "warning")) {
[16:04:31.546]                         muffled <- grepl(pattern, "muffleWarning")
[16:04:31.546]                         if (muffled) 
[16:04:31.546]                           invokeRestart("muffleWarning")
[16:04:31.546]                       }
[16:04:31.546]                       else if (inherits(cond, "condition")) {
[16:04:31.546]                         if (!is.null(pattern)) {
[16:04:31.546]                           computeRestarts <- base::computeRestarts
[16:04:31.546]                           grepl <- base::grepl
[16:04:31.546]                           restarts <- computeRestarts(cond)
[16:04:31.546]                           for (restart in restarts) {
[16:04:31.546]                             name <- restart$name
[16:04:31.546]                             if (is.null(name)) 
[16:04:31.546]                               next
[16:04:31.546]                             if (!grepl(pattern, name)) 
[16:04:31.546]                               next
[16:04:31.546]                             invokeRestart(restart)
[16:04:31.546]                             muffled <- TRUE
[16:04:31.546]                             break
[16:04:31.546]                           }
[16:04:31.546]                         }
[16:04:31.546]                       }
[16:04:31.546]                       invisible(muffled)
[16:04:31.546]                     }
[16:04:31.546]                     muffleCondition(cond, pattern = "^muffle")
[16:04:31.546]                   }
[16:04:31.546]                 }
[16:04:31.546]                 else {
[16:04:31.546]                   if (TRUE) {
[16:04:31.546]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:04:31.546]                     {
[16:04:31.546]                       inherits <- base::inherits
[16:04:31.546]                       invokeRestart <- base::invokeRestart
[16:04:31.546]                       is.null <- base::is.null
[16:04:31.546]                       muffled <- FALSE
[16:04:31.546]                       if (inherits(cond, "message")) {
[16:04:31.546]                         muffled <- grepl(pattern, "muffleMessage")
[16:04:31.546]                         if (muffled) 
[16:04:31.546]                           invokeRestart("muffleMessage")
[16:04:31.546]                       }
[16:04:31.546]                       else if (inherits(cond, "warning")) {
[16:04:31.546]                         muffled <- grepl(pattern, "muffleWarning")
[16:04:31.546]                         if (muffled) 
[16:04:31.546]                           invokeRestart("muffleWarning")
[16:04:31.546]                       }
[16:04:31.546]                       else if (inherits(cond, "condition")) {
[16:04:31.546]                         if (!is.null(pattern)) {
[16:04:31.546]                           computeRestarts <- base::computeRestarts
[16:04:31.546]                           grepl <- base::grepl
[16:04:31.546]                           restarts <- computeRestarts(cond)
[16:04:31.546]                           for (restart in restarts) {
[16:04:31.546]                             name <- restart$name
[16:04:31.546]                             if (is.null(name)) 
[16:04:31.546]                               next
[16:04:31.546]                             if (!grepl(pattern, name)) 
[16:04:31.546]                               next
[16:04:31.546]                             invokeRestart(restart)
[16:04:31.546]                             muffled <- TRUE
[16:04:31.546]                             break
[16:04:31.546]                           }
[16:04:31.546]                         }
[16:04:31.546]                       }
[16:04:31.546]                       invisible(muffled)
[16:04:31.546]                     }
[16:04:31.546]                     muffleCondition(cond, pattern = "^muffle")
[16:04:31.546]                   }
[16:04:31.546]                 }
[16:04:31.546]             }
[16:04:31.546]         }))
[16:04:31.546]     }, error = function(ex) {
[16:04:31.546]         base::structure(base::list(value = NULL, visible = NULL, 
[16:04:31.546]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:04:31.546]                 ...future.rng), started = ...future.startTime, 
[16:04:31.546]             finished = Sys.time(), session_uuid = NA_character_, 
[16:04:31.546]             version = "1.8"), class = "FutureResult")
[16:04:31.546]     }, finally = {
[16:04:31.546]         if (!identical(...future.workdir, getwd())) 
[16:04:31.546]             setwd(...future.workdir)
[16:04:31.546]         {
[16:04:31.546]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:04:31.546]                 ...future.oldOptions$nwarnings <- NULL
[16:04:31.546]             }
[16:04:31.546]             base::options(...future.oldOptions)
[16:04:31.546]             if (.Platform$OS.type == "windows") {
[16:04:31.546]                 old_names <- names(...future.oldEnvVars)
[16:04:31.546]                 envs <- base::Sys.getenv()
[16:04:31.546]                 names <- names(envs)
[16:04:31.546]                 common <- intersect(names, old_names)
[16:04:31.546]                 added <- setdiff(names, old_names)
[16:04:31.546]                 removed <- setdiff(old_names, names)
[16:04:31.546]                 changed <- common[...future.oldEnvVars[common] != 
[16:04:31.546]                   envs[common]]
[16:04:31.546]                 NAMES <- toupper(changed)
[16:04:31.546]                 args <- list()
[16:04:31.546]                 for (kk in seq_along(NAMES)) {
[16:04:31.546]                   name <- changed[[kk]]
[16:04:31.546]                   NAME <- NAMES[[kk]]
[16:04:31.546]                   if (name != NAME && is.element(NAME, old_names)) 
[16:04:31.546]                     next
[16:04:31.546]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:04:31.546]                 }
[16:04:31.546]                 NAMES <- toupper(added)
[16:04:31.546]                 for (kk in seq_along(NAMES)) {
[16:04:31.546]                   name <- added[[kk]]
[16:04:31.546]                   NAME <- NAMES[[kk]]
[16:04:31.546]                   if (name != NAME && is.element(NAME, old_names)) 
[16:04:31.546]                     next
[16:04:31.546]                   args[[name]] <- ""
[16:04:31.546]                 }
[16:04:31.546]                 NAMES <- toupper(removed)
[16:04:31.546]                 for (kk in seq_along(NAMES)) {
[16:04:31.546]                   name <- removed[[kk]]
[16:04:31.546]                   NAME <- NAMES[[kk]]
[16:04:31.546]                   if (name != NAME && is.element(NAME, old_names)) 
[16:04:31.546]                     next
[16:04:31.546]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:04:31.546]                 }
[16:04:31.546]                 if (length(args) > 0) 
[16:04:31.546]                   base::do.call(base::Sys.setenv, args = args)
[16:04:31.546]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:04:31.546]             }
[16:04:31.546]             else {
[16:04:31.546]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:04:31.546]             }
[16:04:31.546]             {
[16:04:31.546]                 if (base::length(...future.futureOptionsAdded) > 
[16:04:31.546]                   0L) {
[16:04:31.546]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:04:31.546]                   base::names(opts) <- ...future.futureOptionsAdded
[16:04:31.546]                   base::options(opts)
[16:04:31.546]                 }
[16:04:31.546]                 {
[16:04:31.546]                   {
[16:04:31.546]                     NULL
[16:04:31.546]                     RNGkind("Mersenne-Twister")
[16:04:31.546]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[16:04:31.546]                       inherits = FALSE)
[16:04:31.546]                   }
[16:04:31.546]                   options(future.plan = NULL)
[16:04:31.546]                   if (is.na(NA_character_)) 
[16:04:31.546]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:04:31.546]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:04:31.546]                   future::plan(list(function (..., envir = parent.frame()) 
[16:04:31.546]                   {
[16:04:31.546]                     future <- SequentialFuture(..., envir = envir)
[16:04:31.546]                     if (!future$lazy) 
[16:04:31.546]                       future <- run(future)
[16:04:31.546]                     invisible(future)
[16:04:31.546]                   }), .cleanup = FALSE, .init = FALSE)
[16:04:31.546]                 }
[16:04:31.546]             }
[16:04:31.546]         }
[16:04:31.546]     })
[16:04:31.546]     if (TRUE) {
[16:04:31.546]         base::sink(type = "output", split = FALSE)
[16:04:31.546]         if (TRUE) {
[16:04:31.546]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:04:31.546]         }
[16:04:31.546]         else {
[16:04:31.546]             ...future.result["stdout"] <- base::list(NULL)
[16:04:31.546]         }
[16:04:31.546]         base::close(...future.stdout)
[16:04:31.546]         ...future.stdout <- NULL
[16:04:31.546]     }
[16:04:31.546]     ...future.result$conditions <- ...future.conditions
[16:04:31.546]     ...future.result$finished <- base::Sys.time()
[16:04:31.546]     ...future.result
[16:04:31.546] }
[16:04:31.548] plan(): Setting new future strategy stack:
[16:04:31.548] List of future strategies:
[16:04:31.548] 1. sequential:
[16:04:31.548]    - args: function (..., envir = parent.frame())
[16:04:31.548]    - tweaked: FALSE
[16:04:31.548]    - call: NULL
[16:04:31.548] plan(): nbrOfWorkers() = 1
[16:04:31.549] plan(): Setting new future strategy stack:
[16:04:31.549] List of future strategies:
[16:04:31.549] 1. sequential:
[16:04:31.549]    - args: function (..., envir = parent.frame())
[16:04:31.549]    - tweaked: FALSE
[16:04:31.549]    - call: plan(strategy)
[16:04:31.550] plan(): nbrOfWorkers() = 1
[16:04:31.550] SequentialFuture started (and completed)
[16:04:31.550] - Launch lazy future ... done
[16:04:31.550] run() for ‘SequentialFuture’ ... done
** Future evaluation with globals
[16:04:31.551] getGlobalsAndPackages() ...
[16:04:31.551] Searching for globals...
[16:04:31.552] - globals found: [3] ‘{’, ‘<-’, ‘a’
[16:04:31.552] Searching for globals ... DONE
[16:04:31.552] Resolving globals: FALSE
[16:04:31.553] The total size of the 1 globals is 56 bytes (56 bytes)
[16:04:31.553] The total size of the 1 globals exported for future expression (‘{; x <- a; }’) is 56 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘a’ (56 bytes of class ‘numeric’)
[16:04:31.553] - globals: [1] ‘a’
[16:04:31.554] 
[16:04:31.554] getGlobalsAndPackages() ... DONE
[16:04:31.554] run() for ‘Future’ ...
[16:04:31.554] - state: ‘created’
[16:04:31.554] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[16:04:31.554] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[16:04:31.554] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[16:04:31.555]   - Field: ‘label’
[16:04:31.555]   - Field: ‘local’
[16:04:31.555]   - Field: ‘owner’
[16:04:31.555]   - Field: ‘envir’
[16:04:31.555]   - Field: ‘packages’
[16:04:31.555]   - Field: ‘gc’
[16:04:31.555]   - Field: ‘conditions’
[16:04:31.555]   - Field: ‘expr’
[16:04:31.555]   - Field: ‘uuid’
[16:04:31.555]   - Field: ‘seed’
[16:04:31.556]   - Field: ‘version’
[16:04:31.556]   - Field: ‘result’
[16:04:31.556]   - Field: ‘asynchronous’
[16:04:31.556]   - Field: ‘calls’
[16:04:31.556]   - Field: ‘globals’
[16:04:31.556]   - Field: ‘stdout’
[16:04:31.556]   - Field: ‘earlySignal’
[16:04:31.556]   - Field: ‘lazy’
[16:04:31.556]   - Field: ‘state’
[16:04:31.556] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[16:04:31.556] - Launch lazy future ...
[16:04:31.557] Packages needed by the future expression (n = 0): <none>
[16:04:31.557] Packages needed by future strategies (n = 0): <none>
[16:04:31.557] {
[16:04:31.557]     {
[16:04:31.557]         {
[16:04:31.557]             ...future.startTime <- base::Sys.time()
[16:04:31.557]             {
[16:04:31.557]                 {
[16:04:31.557]                   {
[16:04:31.557]                     base::local({
[16:04:31.557]                       has_future <- base::requireNamespace("future", 
[16:04:31.557]                         quietly = TRUE)
[16:04:31.557]                       if (has_future) {
[16:04:31.557]                         ns <- base::getNamespace("future")
[16:04:31.557]                         version <- ns[[".package"]][["version"]]
[16:04:31.557]                         if (is.null(version)) 
[16:04:31.557]                           version <- utils::packageVersion("future")
[16:04:31.557]                       }
[16:04:31.557]                       else {
[16:04:31.557]                         version <- NULL
[16:04:31.557]                       }
[16:04:31.557]                       if (!has_future || version < "1.8.0") {
[16:04:31.557]                         info <- base::c(r_version = base::gsub("R version ", 
[16:04:31.557]                           "", base::R.version$version.string), 
[16:04:31.557]                           platform = base::sprintf("%s (%s-bit)", 
[16:04:31.557]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:04:31.557]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[16:04:31.557]                             "release", "version")], collapse = " "), 
[16:04:31.557]                           hostname = base::Sys.info()[["nodename"]])
[16:04:31.557]                         info <- base::sprintf("%s: %s", base::names(info), 
[16:04:31.557]                           info)
[16:04:31.557]                         info <- base::paste(info, collapse = "; ")
[16:04:31.557]                         if (!has_future) {
[16:04:31.557]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:04:31.557]                             info)
[16:04:31.557]                         }
[16:04:31.557]                         else {
[16:04:31.557]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:04:31.557]                             info, version)
[16:04:31.557]                         }
[16:04:31.557]                         base::stop(msg)
[16:04:31.557]                       }
[16:04:31.557]                     })
[16:04:31.557]                   }
[16:04:31.557]                   options(future.plan = NULL)
[16:04:31.557]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:04:31.557]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:04:31.557]                 }
[16:04:31.557]                 ...future.workdir <- getwd()
[16:04:31.557]             }
[16:04:31.557]             ...future.oldOptions <- base::as.list(base::.Options)
[16:04:31.557]             ...future.oldEnvVars <- base::Sys.getenv()
[16:04:31.557]         }
[16:04:31.557]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:04:31.557]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:04:31.557]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:04:31.557]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:04:31.557]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:04:31.557]             future.stdout.windows.reencode = NULL, width = 80L)
[16:04:31.557]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:04:31.557]             base::names(...future.oldOptions))
[16:04:31.557]     }
[16:04:31.557]     if (FALSE) {
[16:04:31.557]     }
[16:04:31.557]     else {
[16:04:31.557]         if (TRUE) {
[16:04:31.557]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:04:31.557]                 open = "w")
[16:04:31.557]         }
[16:04:31.557]         else {
[16:04:31.557]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:04:31.557]                 windows = "NUL", "/dev/null"), open = "w")
[16:04:31.557]         }
[16:04:31.557]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:04:31.557]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:04:31.557]             base::sink(type = "output", split = FALSE)
[16:04:31.557]             base::close(...future.stdout)
[16:04:31.557]         }, add = TRUE)
[16:04:31.557]     }
[16:04:31.557]     ...future.frame <- base::sys.nframe()
[16:04:31.557]     ...future.conditions <- base::list()
[16:04:31.557]     ...future.rng <- base::globalenv()$.Random.seed
[16:04:31.557]     if (FALSE) {
[16:04:31.557]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:04:31.557]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:04:31.557]     }
[16:04:31.557]     ...future.result <- base::tryCatch({
[16:04:31.557]         base::withCallingHandlers({
[16:04:31.557]             ...future.value <- base::withVisible(base::local({
[16:04:31.557]                 x <- a
[16:04:31.557]             }))
[16:04:31.557]             future::FutureResult(value = ...future.value$value, 
[16:04:31.557]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:04:31.557]                   ...future.rng), globalenv = if (FALSE) 
[16:04:31.557]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:04:31.557]                     ...future.globalenv.names))
[16:04:31.557]                 else NULL, started = ...future.startTime, version = "1.8")
[16:04:31.557]         }, condition = base::local({
[16:04:31.557]             c <- base::c
[16:04:31.557]             inherits <- base::inherits
[16:04:31.557]             invokeRestart <- base::invokeRestart
[16:04:31.557]             length <- base::length
[16:04:31.557]             list <- base::list
[16:04:31.557]             seq.int <- base::seq.int
[16:04:31.557]             signalCondition <- base::signalCondition
[16:04:31.557]             sys.calls <- base::sys.calls
[16:04:31.557]             `[[` <- base::`[[`
[16:04:31.557]             `+` <- base::`+`
[16:04:31.557]             `<<-` <- base::`<<-`
[16:04:31.557]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:04:31.557]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:04:31.557]                   3L)]
[16:04:31.557]             }
[16:04:31.557]             function(cond) {
[16:04:31.557]                 is_error <- inherits(cond, "error")
[16:04:31.557]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:04:31.557]                   NULL)
[16:04:31.557]                 if (is_error) {
[16:04:31.557]                   sessionInformation <- function() {
[16:04:31.557]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:04:31.557]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:04:31.557]                       search = base::search(), system = base::Sys.info())
[16:04:31.557]                   }
[16:04:31.557]                   ...future.conditions[[length(...future.conditions) + 
[16:04:31.557]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:04:31.557]                     cond$call), session = sessionInformation(), 
[16:04:31.557]                     timestamp = base::Sys.time(), signaled = 0L)
[16:04:31.557]                   signalCondition(cond)
[16:04:31.557]                 }
[16:04:31.557]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:04:31.557]                 "immediateCondition"))) {
[16:04:31.557]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:04:31.557]                   ...future.conditions[[length(...future.conditions) + 
[16:04:31.557]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:04:31.557]                   if (TRUE && !signal) {
[16:04:31.557]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:04:31.557]                     {
[16:04:31.557]                       inherits <- base::inherits
[16:04:31.557]                       invokeRestart <- base::invokeRestart
[16:04:31.557]                       is.null <- base::is.null
[16:04:31.557]                       muffled <- FALSE
[16:04:31.557]                       if (inherits(cond, "message")) {
[16:04:31.557]                         muffled <- grepl(pattern, "muffleMessage")
[16:04:31.557]                         if (muffled) 
[16:04:31.557]                           invokeRestart("muffleMessage")
[16:04:31.557]                       }
[16:04:31.557]                       else if (inherits(cond, "warning")) {
[16:04:31.557]                         muffled <- grepl(pattern, "muffleWarning")
[16:04:31.557]                         if (muffled) 
[16:04:31.557]                           invokeRestart("muffleWarning")
[16:04:31.557]                       }
[16:04:31.557]                       else if (inherits(cond, "condition")) {
[16:04:31.557]                         if (!is.null(pattern)) {
[16:04:31.557]                           computeRestarts <- base::computeRestarts
[16:04:31.557]                           grepl <- base::grepl
[16:04:31.557]                           restarts <- computeRestarts(cond)
[16:04:31.557]                           for (restart in restarts) {
[16:04:31.557]                             name <- restart$name
[16:04:31.557]                             if (is.null(name)) 
[16:04:31.557]                               next
[16:04:31.557]                             if (!grepl(pattern, name)) 
[16:04:31.557]                               next
[16:04:31.557]                             invokeRestart(restart)
[16:04:31.557]                             muffled <- TRUE
[16:04:31.557]                             break
[16:04:31.557]                           }
[16:04:31.557]                         }
[16:04:31.557]                       }
[16:04:31.557]                       invisible(muffled)
[16:04:31.557]                     }
[16:04:31.557]                     muffleCondition(cond, pattern = "^muffle")
[16:04:31.557]                   }
[16:04:31.557]                 }
[16:04:31.557]                 else {
[16:04:31.557]                   if (TRUE) {
[16:04:31.557]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:04:31.557]                     {
[16:04:31.557]                       inherits <- base::inherits
[16:04:31.557]                       invokeRestart <- base::invokeRestart
[16:04:31.557]                       is.null <- base::is.null
[16:04:31.557]                       muffled <- FALSE
[16:04:31.557]                       if (inherits(cond, "message")) {
[16:04:31.557]                         muffled <- grepl(pattern, "muffleMessage")
[16:04:31.557]                         if (muffled) 
[16:04:31.557]                           invokeRestart("muffleMessage")
[16:04:31.557]                       }
[16:04:31.557]                       else if (inherits(cond, "warning")) {
[16:04:31.557]                         muffled <- grepl(pattern, "muffleWarning")
[16:04:31.557]                         if (muffled) 
[16:04:31.557]                           invokeRestart("muffleWarning")
[16:04:31.557]                       }
[16:04:31.557]                       else if (inherits(cond, "condition")) {
[16:04:31.557]                         if (!is.null(pattern)) {
[16:04:31.557]                           computeRestarts <- base::computeRestarts
[16:04:31.557]                           grepl <- base::grepl
[16:04:31.557]                           restarts <- computeRestarts(cond)
[16:04:31.557]                           for (restart in restarts) {
[16:04:31.557]                             name <- restart$name
[16:04:31.557]                             if (is.null(name)) 
[16:04:31.557]                               next
[16:04:31.557]                             if (!grepl(pattern, name)) 
[16:04:31.557]                               next
[16:04:31.557]                             invokeRestart(restart)
[16:04:31.557]                             muffled <- TRUE
[16:04:31.557]                             break
[16:04:31.557]                           }
[16:04:31.557]                         }
[16:04:31.557]                       }
[16:04:31.557]                       invisible(muffled)
[16:04:31.557]                     }
[16:04:31.557]                     muffleCondition(cond, pattern = "^muffle")
[16:04:31.557]                   }
[16:04:31.557]                 }
[16:04:31.557]             }
[16:04:31.557]         }))
[16:04:31.557]     }, error = function(ex) {
[16:04:31.557]         base::structure(base::list(value = NULL, visible = NULL, 
[16:04:31.557]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:04:31.557]                 ...future.rng), started = ...future.startTime, 
[16:04:31.557]             finished = Sys.time(), session_uuid = NA_character_, 
[16:04:31.557]             version = "1.8"), class = "FutureResult")
[16:04:31.557]     }, finally = {
[16:04:31.557]         if (!identical(...future.workdir, getwd())) 
[16:04:31.557]             setwd(...future.workdir)
[16:04:31.557]         {
[16:04:31.557]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:04:31.557]                 ...future.oldOptions$nwarnings <- NULL
[16:04:31.557]             }
[16:04:31.557]             base::options(...future.oldOptions)
[16:04:31.557]             if (.Platform$OS.type == "windows") {
[16:04:31.557]                 old_names <- names(...future.oldEnvVars)
[16:04:31.557]                 envs <- base::Sys.getenv()
[16:04:31.557]                 names <- names(envs)
[16:04:31.557]                 common <- intersect(names, old_names)
[16:04:31.557]                 added <- setdiff(names, old_names)
[16:04:31.557]                 removed <- setdiff(old_names, names)
[16:04:31.557]                 changed <- common[...future.oldEnvVars[common] != 
[16:04:31.557]                   envs[common]]
[16:04:31.557]                 NAMES <- toupper(changed)
[16:04:31.557]                 args <- list()
[16:04:31.557]                 for (kk in seq_along(NAMES)) {
[16:04:31.557]                   name <- changed[[kk]]
[16:04:31.557]                   NAME <- NAMES[[kk]]
[16:04:31.557]                   if (name != NAME && is.element(NAME, old_names)) 
[16:04:31.557]                     next
[16:04:31.557]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:04:31.557]                 }
[16:04:31.557]                 NAMES <- toupper(added)
[16:04:31.557]                 for (kk in seq_along(NAMES)) {
[16:04:31.557]                   name <- added[[kk]]
[16:04:31.557]                   NAME <- NAMES[[kk]]
[16:04:31.557]                   if (name != NAME && is.element(NAME, old_names)) 
[16:04:31.557]                     next
[16:04:31.557]                   args[[name]] <- ""
[16:04:31.557]                 }
[16:04:31.557]                 NAMES <- toupper(removed)
[16:04:31.557]                 for (kk in seq_along(NAMES)) {
[16:04:31.557]                   name <- removed[[kk]]
[16:04:31.557]                   NAME <- NAMES[[kk]]
[16:04:31.557]                   if (name != NAME && is.element(NAME, old_names)) 
[16:04:31.557]                     next
[16:04:31.557]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:04:31.557]                 }
[16:04:31.557]                 if (length(args) > 0) 
[16:04:31.557]                   base::do.call(base::Sys.setenv, args = args)
[16:04:31.557]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:04:31.557]             }
[16:04:31.557]             else {
[16:04:31.557]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:04:31.557]             }
[16:04:31.557]             {
[16:04:31.557]                 if (base::length(...future.futureOptionsAdded) > 
[16:04:31.557]                   0L) {
[16:04:31.557]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:04:31.557]                   base::names(opts) <- ...future.futureOptionsAdded
[16:04:31.557]                   base::options(opts)
[16:04:31.557]                 }
[16:04:31.557]                 {
[16:04:31.557]                   {
[16:04:31.557]                     NULL
[16:04:31.557]                     RNGkind("Mersenne-Twister")
[16:04:31.557]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[16:04:31.557]                       inherits = FALSE)
[16:04:31.557]                   }
[16:04:31.557]                   options(future.plan = NULL)
[16:04:31.557]                   if (is.na(NA_character_)) 
[16:04:31.557]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:04:31.557]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:04:31.557]                   future::plan(list(function (..., envir = parent.frame()) 
[16:04:31.557]                   {
[16:04:31.557]                     future <- SequentialFuture(..., envir = envir)
[16:04:31.557]                     if (!future$lazy) 
[16:04:31.557]                       future <- run(future)
[16:04:31.557]                     invisible(future)
[16:04:31.557]                   }), .cleanup = FALSE, .init = FALSE)
[16:04:31.557]                 }
[16:04:31.557]             }
[16:04:31.557]         }
[16:04:31.557]     })
[16:04:31.557]     if (TRUE) {
[16:04:31.557]         base::sink(type = "output", split = FALSE)
[16:04:31.557]         if (TRUE) {
[16:04:31.557]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:04:31.557]         }
[16:04:31.557]         else {
[16:04:31.557]             ...future.result["stdout"] <- base::list(NULL)
[16:04:31.557]         }
[16:04:31.557]         base::close(...future.stdout)
[16:04:31.557]         ...future.stdout <- NULL
[16:04:31.557]     }
[16:04:31.557]     ...future.result$conditions <- ...future.conditions
[16:04:31.557]     ...future.result$finished <- base::Sys.time()
[16:04:31.557]     ...future.result
[16:04:31.557] }
[16:04:31.559] assign_globals() ...
[16:04:31.559] List of 1
[16:04:31.559]  $ a: num 2
[16:04:31.559]  - attr(*, "where")=List of 1
[16:04:31.559]   ..$ a:<environment: R_EmptyEnv> 
[16:04:31.559]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[16:04:31.559]  - attr(*, "resolved")= logi FALSE
[16:04:31.559]  - attr(*, "total_size")= num 56
[16:04:31.559]  - attr(*, "already-done")= logi TRUE
[16:04:31.566] - copied ‘a’ to environment
[16:04:31.566] assign_globals() ... done
[16:04:31.566] plan(): Setting new future strategy stack:
[16:04:31.566] List of future strategies:
[16:04:31.566] 1. sequential:
[16:04:31.566]    - args: function (..., envir = parent.frame())
[16:04:31.566]    - tweaked: FALSE
[16:04:31.566]    - call: NULL
[16:04:31.566] plan(): nbrOfWorkers() = 1
[16:04:31.567] plan(): Setting new future strategy stack:
[16:04:31.567] List of future strategies:
[16:04:31.567] 1. sequential:
[16:04:31.567]    - args: function (..., envir = parent.frame())
[16:04:31.567]    - tweaked: FALSE
[16:04:31.567]    - call: plan(strategy)
[16:04:31.567] plan(): nbrOfWorkers() = 1
[16:04:31.568] SequentialFuture started (and completed)
[16:04:31.568] - Launch lazy future ... done
[16:04:31.568] run() for ‘SequentialFuture’ ... done
** Future evaluation with errors
[16:04:31.568] getGlobalsAndPackages() ...
[16:04:31.568] Searching for globals...
[16:04:31.571] - globals found: [3] ‘{’, ‘<-’, ‘stop’
[16:04:31.571] Searching for globals ... DONE
[16:04:31.571] Resolving globals: FALSE
[16:04:31.572] 
[16:04:31.572] 
[16:04:31.572] getGlobalsAndPackages() ... DONE
[16:04:31.572] run() for ‘Future’ ...
[16:04:31.572] - state: ‘created’
[16:04:31.572] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[16:04:31.573] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[16:04:31.573] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[16:04:31.573]   - Field: ‘label’
[16:04:31.573]   - Field: ‘local’
[16:04:31.573]   - Field: ‘owner’
[16:04:31.573]   - Field: ‘envir’
[16:04:31.573]   - Field: ‘packages’
[16:04:31.573]   - Field: ‘gc’
[16:04:31.573]   - Field: ‘conditions’
[16:04:31.573]   - Field: ‘expr’
[16:04:31.574]   - Field: ‘uuid’
[16:04:31.574]   - Field: ‘seed’
[16:04:31.574]   - Field: ‘version’
[16:04:31.574]   - Field: ‘result’
[16:04:31.574]   - Field: ‘asynchronous’
[16:04:31.574]   - Field: ‘calls’
[16:04:31.574]   - Field: ‘globals’
[16:04:31.574]   - Field: ‘stdout’
[16:04:31.574]   - Field: ‘earlySignal’
[16:04:31.574]   - Field: ‘lazy’
[16:04:31.574]   - Field: ‘state’
[16:04:31.574] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[16:04:31.575] - Launch lazy future ...
[16:04:31.575] Packages needed by the future expression (n = 0): <none>
[16:04:31.575] Packages needed by future strategies (n = 0): <none>
[16:04:31.575] {
[16:04:31.575]     {
[16:04:31.575]         {
[16:04:31.575]             ...future.startTime <- base::Sys.time()
[16:04:31.575]             {
[16:04:31.575]                 {
[16:04:31.575]                   {
[16:04:31.575]                     base::local({
[16:04:31.575]                       has_future <- base::requireNamespace("future", 
[16:04:31.575]                         quietly = TRUE)
[16:04:31.575]                       if (has_future) {
[16:04:31.575]                         ns <- base::getNamespace("future")
[16:04:31.575]                         version <- ns[[".package"]][["version"]]
[16:04:31.575]                         if (is.null(version)) 
[16:04:31.575]                           version <- utils::packageVersion("future")
[16:04:31.575]                       }
[16:04:31.575]                       else {
[16:04:31.575]                         version <- NULL
[16:04:31.575]                       }
[16:04:31.575]                       if (!has_future || version < "1.8.0") {
[16:04:31.575]                         info <- base::c(r_version = base::gsub("R version ", 
[16:04:31.575]                           "", base::R.version$version.string), 
[16:04:31.575]                           platform = base::sprintf("%s (%s-bit)", 
[16:04:31.575]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:04:31.575]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[16:04:31.575]                             "release", "version")], collapse = " "), 
[16:04:31.575]                           hostname = base::Sys.info()[["nodename"]])
[16:04:31.575]                         info <- base::sprintf("%s: %s", base::names(info), 
[16:04:31.575]                           info)
[16:04:31.575]                         info <- base::paste(info, collapse = "; ")
[16:04:31.575]                         if (!has_future) {
[16:04:31.575]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:04:31.575]                             info)
[16:04:31.575]                         }
[16:04:31.575]                         else {
[16:04:31.575]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:04:31.575]                             info, version)
[16:04:31.575]                         }
[16:04:31.575]                         base::stop(msg)
[16:04:31.575]                       }
[16:04:31.575]                     })
[16:04:31.575]                   }
[16:04:31.575]                   options(future.plan = NULL)
[16:04:31.575]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:04:31.575]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:04:31.575]                 }
[16:04:31.575]                 ...future.workdir <- getwd()
[16:04:31.575]             }
[16:04:31.575]             ...future.oldOptions <- base::as.list(base::.Options)
[16:04:31.575]             ...future.oldEnvVars <- base::Sys.getenv()
[16:04:31.575]         }
[16:04:31.575]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:04:31.575]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:04:31.575]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:04:31.575]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:04:31.575]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:04:31.575]             future.stdout.windows.reencode = NULL, width = 80L)
[16:04:31.575]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:04:31.575]             base::names(...future.oldOptions))
[16:04:31.575]     }
[16:04:31.575]     if (FALSE) {
[16:04:31.575]     }
[16:04:31.575]     else {
[16:04:31.575]         if (TRUE) {
[16:04:31.575]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:04:31.575]                 open = "w")
[16:04:31.575]         }
[16:04:31.575]         else {
[16:04:31.575]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:04:31.575]                 windows = "NUL", "/dev/null"), open = "w")
[16:04:31.575]         }
[16:04:31.575]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:04:31.575]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:04:31.575]             base::sink(type = "output", split = FALSE)
[16:04:31.575]             base::close(...future.stdout)
[16:04:31.575]         }, add = TRUE)
[16:04:31.575]     }
[16:04:31.575]     ...future.frame <- base::sys.nframe()
[16:04:31.575]     ...future.conditions <- base::list()
[16:04:31.575]     ...future.rng <- base::globalenv()$.Random.seed
[16:04:31.575]     if (FALSE) {
[16:04:31.575]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:04:31.575]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:04:31.575]     }
[16:04:31.575]     ...future.result <- base::tryCatch({
[16:04:31.575]         base::withCallingHandlers({
[16:04:31.575]             ...future.value <- base::withVisible(base::local({
[16:04:31.575]                 x <- 3
[16:04:31.575]                 stop("Woops!")
[16:04:31.575]                 x
[16:04:31.575]             }))
[16:04:31.575]             future::FutureResult(value = ...future.value$value, 
[16:04:31.575]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:04:31.575]                   ...future.rng), globalenv = if (FALSE) 
[16:04:31.575]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:04:31.575]                     ...future.globalenv.names))
[16:04:31.575]                 else NULL, started = ...future.startTime, version = "1.8")
[16:04:31.575]         }, condition = base::local({
[16:04:31.575]             c <- base::c
[16:04:31.575]             inherits <- base::inherits
[16:04:31.575]             invokeRestart <- base::invokeRestart
[16:04:31.575]             length <- base::length
[16:04:31.575]             list <- base::list
[16:04:31.575]             seq.int <- base::seq.int
[16:04:31.575]             signalCondition <- base::signalCondition
[16:04:31.575]             sys.calls <- base::sys.calls
[16:04:31.575]             `[[` <- base::`[[`
[16:04:31.575]             `+` <- base::`+`
[16:04:31.575]             `<<-` <- base::`<<-`
[16:04:31.575]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:04:31.575]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:04:31.575]                   3L)]
[16:04:31.575]             }
[16:04:31.575]             function(cond) {
[16:04:31.575]                 is_error <- inherits(cond, "error")
[16:04:31.575]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:04:31.575]                   NULL)
[16:04:31.575]                 if (is_error) {
[16:04:31.575]                   sessionInformation <- function() {
[16:04:31.575]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:04:31.575]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:04:31.575]                       search = base::search(), system = base::Sys.info())
[16:04:31.575]                   }
[16:04:31.575]                   ...future.conditions[[length(...future.conditions) + 
[16:04:31.575]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:04:31.575]                     cond$call), session = sessionInformation(), 
[16:04:31.575]                     timestamp = base::Sys.time(), signaled = 0L)
[16:04:31.575]                   signalCondition(cond)
[16:04:31.575]                 }
[16:04:31.575]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:04:31.575]                 "immediateCondition"))) {
[16:04:31.575]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:04:31.575]                   ...future.conditions[[length(...future.conditions) + 
[16:04:31.575]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:04:31.575]                   if (TRUE && !signal) {
[16:04:31.575]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:04:31.575]                     {
[16:04:31.575]                       inherits <- base::inherits
[16:04:31.575]                       invokeRestart <- base::invokeRestart
[16:04:31.575]                       is.null <- base::is.null
[16:04:31.575]                       muffled <- FALSE
[16:04:31.575]                       if (inherits(cond, "message")) {
[16:04:31.575]                         muffled <- grepl(pattern, "muffleMessage")
[16:04:31.575]                         if (muffled) 
[16:04:31.575]                           invokeRestart("muffleMessage")
[16:04:31.575]                       }
[16:04:31.575]                       else if (inherits(cond, "warning")) {
[16:04:31.575]                         muffled <- grepl(pattern, "muffleWarning")
[16:04:31.575]                         if (muffled) 
[16:04:31.575]                           invokeRestart("muffleWarning")
[16:04:31.575]                       }
[16:04:31.575]                       else if (inherits(cond, "condition")) {
[16:04:31.575]                         if (!is.null(pattern)) {
[16:04:31.575]                           computeRestarts <- base::computeRestarts
[16:04:31.575]                           grepl <- base::grepl
[16:04:31.575]                           restarts <- computeRestarts(cond)
[16:04:31.575]                           for (restart in restarts) {
[16:04:31.575]                             name <- restart$name
[16:04:31.575]                             if (is.null(name)) 
[16:04:31.575]                               next
[16:04:31.575]                             if (!grepl(pattern, name)) 
[16:04:31.575]                               next
[16:04:31.575]                             invokeRestart(restart)
[16:04:31.575]                             muffled <- TRUE
[16:04:31.575]                             break
[16:04:31.575]                           }
[16:04:31.575]                         }
[16:04:31.575]                       }
[16:04:31.575]                       invisible(muffled)
[16:04:31.575]                     }
[16:04:31.575]                     muffleCondition(cond, pattern = "^muffle")
[16:04:31.575]                   }
[16:04:31.575]                 }
[16:04:31.575]                 else {
[16:04:31.575]                   if (TRUE) {
[16:04:31.575]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:04:31.575]                     {
[16:04:31.575]                       inherits <- base::inherits
[16:04:31.575]                       invokeRestart <- base::invokeRestart
[16:04:31.575]                       is.null <- base::is.null
[16:04:31.575]                       muffled <- FALSE
[16:04:31.575]                       if (inherits(cond, "message")) {
[16:04:31.575]                         muffled <- grepl(pattern, "muffleMessage")
[16:04:31.575]                         if (muffled) 
[16:04:31.575]                           invokeRestart("muffleMessage")
[16:04:31.575]                       }
[16:04:31.575]                       else if (inherits(cond, "warning")) {
[16:04:31.575]                         muffled <- grepl(pattern, "muffleWarning")
[16:04:31.575]                         if (muffled) 
[16:04:31.575]                           invokeRestart("muffleWarning")
[16:04:31.575]                       }
[16:04:31.575]                       else if (inherits(cond, "condition")) {
[16:04:31.575]                         if (!is.null(pattern)) {
[16:04:31.575]                           computeRestarts <- base::computeRestarts
[16:04:31.575]                           grepl <- base::grepl
[16:04:31.575]                           restarts <- computeRestarts(cond)
[16:04:31.575]                           for (restart in restarts) {
[16:04:31.575]                             name <- restart$name
[16:04:31.575]                             if (is.null(name)) 
[16:04:31.575]                               next
[16:04:31.575]                             if (!grepl(pattern, name)) 
[16:04:31.575]                               next
[16:04:31.575]                             invokeRestart(restart)
[16:04:31.575]                             muffled <- TRUE
[16:04:31.575]                             break
[16:04:31.575]                           }
[16:04:31.575]                         }
[16:04:31.575]                       }
[16:04:31.575]                       invisible(muffled)
[16:04:31.575]                     }
[16:04:31.575]                     muffleCondition(cond, pattern = "^muffle")
[16:04:31.575]                   }
[16:04:31.575]                 }
[16:04:31.575]             }
[16:04:31.575]         }))
[16:04:31.575]     }, error = function(ex) {
[16:04:31.575]         base::structure(base::list(value = NULL, visible = NULL, 
[16:04:31.575]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:04:31.575]                 ...future.rng), started = ...future.startTime, 
[16:04:31.575]             finished = Sys.time(), session_uuid = NA_character_, 
[16:04:31.575]             version = "1.8"), class = "FutureResult")
[16:04:31.575]     }, finally = {
[16:04:31.575]         if (!identical(...future.workdir, getwd())) 
[16:04:31.575]             setwd(...future.workdir)
[16:04:31.575]         {
[16:04:31.575]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:04:31.575]                 ...future.oldOptions$nwarnings <- NULL
[16:04:31.575]             }
[16:04:31.575]             base::options(...future.oldOptions)
[16:04:31.575]             if (.Platform$OS.type == "windows") {
[16:04:31.575]                 old_names <- names(...future.oldEnvVars)
[16:04:31.575]                 envs <- base::Sys.getenv()
[16:04:31.575]                 names <- names(envs)
[16:04:31.575]                 common <- intersect(names, old_names)
[16:04:31.575]                 added <- setdiff(names, old_names)
[16:04:31.575]                 removed <- setdiff(old_names, names)
[16:04:31.575]                 changed <- common[...future.oldEnvVars[common] != 
[16:04:31.575]                   envs[common]]
[16:04:31.575]                 NAMES <- toupper(changed)
[16:04:31.575]                 args <- list()
[16:04:31.575]                 for (kk in seq_along(NAMES)) {
[16:04:31.575]                   name <- changed[[kk]]
[16:04:31.575]                   NAME <- NAMES[[kk]]
[16:04:31.575]                   if (name != NAME && is.element(NAME, old_names)) 
[16:04:31.575]                     next
[16:04:31.575]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:04:31.575]                 }
[16:04:31.575]                 NAMES <- toupper(added)
[16:04:31.575]                 for (kk in seq_along(NAMES)) {
[16:04:31.575]                   name <- added[[kk]]
[16:04:31.575]                   NAME <- NAMES[[kk]]
[16:04:31.575]                   if (name != NAME && is.element(NAME, old_names)) 
[16:04:31.575]                     next
[16:04:31.575]                   args[[name]] <- ""
[16:04:31.575]                 }
[16:04:31.575]                 NAMES <- toupper(removed)
[16:04:31.575]                 for (kk in seq_along(NAMES)) {
[16:04:31.575]                   name <- removed[[kk]]
[16:04:31.575]                   NAME <- NAMES[[kk]]
[16:04:31.575]                   if (name != NAME && is.element(NAME, old_names)) 
[16:04:31.575]                     next
[16:04:31.575]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:04:31.575]                 }
[16:04:31.575]                 if (length(args) > 0) 
[16:04:31.575]                   base::do.call(base::Sys.setenv, args = args)
[16:04:31.575]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:04:31.575]             }
[16:04:31.575]             else {
[16:04:31.575]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:04:31.575]             }
[16:04:31.575]             {
[16:04:31.575]                 if (base::length(...future.futureOptionsAdded) > 
[16:04:31.575]                   0L) {
[16:04:31.575]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:04:31.575]                   base::names(opts) <- ...future.futureOptionsAdded
[16:04:31.575]                   base::options(opts)
[16:04:31.575]                 }
[16:04:31.575]                 {
[16:04:31.575]                   {
[16:04:31.575]                     NULL
[16:04:31.575]                     RNGkind("Mersenne-Twister")
[16:04:31.575]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[16:04:31.575]                       inherits = FALSE)
[16:04:31.575]                   }
[16:04:31.575]                   options(future.plan = NULL)
[16:04:31.575]                   if (is.na(NA_character_)) 
[16:04:31.575]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:04:31.575]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:04:31.575]                   future::plan(list(function (..., envir = parent.frame()) 
[16:04:31.575]                   {
[16:04:31.575]                     future <- SequentialFuture(..., envir = envir)
[16:04:31.575]                     if (!future$lazy) 
[16:04:31.575]                       future <- run(future)
[16:04:31.575]                     invisible(future)
[16:04:31.575]                   }), .cleanup = FALSE, .init = FALSE)
[16:04:31.575]                 }
[16:04:31.575]             }
[16:04:31.575]         }
[16:04:31.575]     })
[16:04:31.575]     if (TRUE) {
[16:04:31.575]         base::sink(type = "output", split = FALSE)
[16:04:31.575]         if (TRUE) {
[16:04:31.575]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:04:31.575]         }
[16:04:31.575]         else {
[16:04:31.575]             ...future.result["stdout"] <- base::list(NULL)
[16:04:31.575]         }
[16:04:31.575]         base::close(...future.stdout)
[16:04:31.575]         ...future.stdout <- NULL
[16:04:31.575]     }
[16:04:31.575]     ...future.result$conditions <- ...future.conditions
[16:04:31.575]     ...future.result$finished <- base::Sys.time()
[16:04:31.575]     ...future.result
[16:04:31.575] }
[16:04:31.577] plan(): Setting new future strategy stack:
[16:04:31.577] List of future strategies:
[16:04:31.577] 1. sequential:
[16:04:31.577]    - args: function (..., envir = parent.frame())
[16:04:31.577]    - tweaked: FALSE
[16:04:31.577]    - call: NULL
[16:04:31.577] plan(): nbrOfWorkers() = 1
[16:04:31.578] plan(): Setting new future strategy stack:
[16:04:31.578] List of future strategies:
[16:04:31.578] 1. sequential:
[16:04:31.578]    - args: function (..., envir = parent.frame())
[16:04:31.578]    - tweaked: FALSE
[16:04:31.578]    - call: plan(strategy)
[16:04:31.579] plan(): nbrOfWorkers() = 1
[16:04:31.579] SequentialFuture started (and completed)
[16:04:31.579] signalConditions() ...
[16:04:31.579]  - include = ‘immediateCondition’
[16:04:31.579]  - exclude = 
[16:04:31.579]  - resignal = FALSE
[16:04:31.579]  - Number of conditions: 1
[16:04:31.579] signalConditions() ... done
[16:04:31.579] - Launch lazy future ... done
[16:04:31.580] run() for ‘SequentialFuture’ ... done
[16:04:31.580] signalConditions() ...
[16:04:31.580]  - include = ‘immediateCondition’
[16:04:31.580]  - exclude = 
[16:04:31.580]  - resignal = FALSE
[16:04:31.580]  - Number of conditions: 1
[16:04:31.580] signalConditions() ... done
[16:04:31.580] Future state: ‘finished’
[16:04:31.580] signalConditions() ...
[16:04:31.580]  - include = ‘condition’
[16:04:31.580]  - exclude = ‘immediateCondition’
[16:04:31.581]  - resignal = TRUE
[16:04:31.581]  - Number of conditions: 1
[16:04:31.581]  - Condition #1: ‘simpleError’, ‘error’, ‘condition’
[16:04:31.581] signalConditions() ... done
[16:04:31.582] getGlobalsAndPackages() ...
[16:04:31.582] Searching for globals...
[16:04:31.583] - globals found: [6] ‘{’, ‘if’, ‘==’, ‘%%’, ‘ii’, ‘stop’
[16:04:31.583] Searching for globals ... DONE
[16:04:31.584] Resolving globals: FALSE
[16:04:31.584] The total size of the 1 globals is 56 bytes (56 bytes)
[16:04:31.584] The total size of the 1 globals exported for future expression (‘{; if (ii%%2 == 0); stop("Woops!"); ii; }’) is 56 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘ii’ (56 bytes of class ‘numeric’)
[16:04:31.584] - globals: [1] ‘ii’
[16:04:31.584] 
[16:04:31.585] getGlobalsAndPackages() ... DONE
[16:04:31.585] run() for ‘Future’ ...
[16:04:31.585] - state: ‘created’
[16:04:31.585] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[16:04:31.585] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[16:04:31.585] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[16:04:31.585]   - Field: ‘label’
[16:04:31.586]   - Field: ‘local’
[16:04:31.586]   - Field: ‘owner’
[16:04:31.586]   - Field: ‘envir’
[16:04:31.586]   - Field: ‘packages’
[16:04:31.586]   - Field: ‘gc’
[16:04:31.586]   - Field: ‘conditions’
[16:04:31.586]   - Field: ‘expr’
[16:04:31.586]   - Field: ‘uuid’
[16:04:31.586]   - Field: ‘seed’
[16:04:31.586]   - Field: ‘version’
[16:04:31.586]   - Field: ‘result’
[16:04:31.586]   - Field: ‘asynchronous’
[16:04:31.587]   - Field: ‘calls’
[16:04:31.587]   - Field: ‘globals’
[16:04:31.587]   - Field: ‘stdout’
[16:04:31.587]   - Field: ‘earlySignal’
[16:04:31.587]   - Field: ‘lazy’
[16:04:31.587]   - Field: ‘state’
[16:04:31.587] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[16:04:31.587] - Launch lazy future ...
[16:04:31.587] Packages needed by the future expression (n = 0): <none>
[16:04:31.587] Packages needed by future strategies (n = 0): <none>
[16:04:31.588] {
[16:04:31.588]     {
[16:04:31.588]         {
[16:04:31.588]             ...future.startTime <- base::Sys.time()
[16:04:31.588]             {
[16:04:31.588]                 {
[16:04:31.588]                   {
[16:04:31.588]                     base::local({
[16:04:31.588]                       has_future <- base::requireNamespace("future", 
[16:04:31.588]                         quietly = TRUE)
[16:04:31.588]                       if (has_future) {
[16:04:31.588]                         ns <- base::getNamespace("future")
[16:04:31.588]                         version <- ns[[".package"]][["version"]]
[16:04:31.588]                         if (is.null(version)) 
[16:04:31.588]                           version <- utils::packageVersion("future")
[16:04:31.588]                       }
[16:04:31.588]                       else {
[16:04:31.588]                         version <- NULL
[16:04:31.588]                       }
[16:04:31.588]                       if (!has_future || version < "1.8.0") {
[16:04:31.588]                         info <- base::c(r_version = base::gsub("R version ", 
[16:04:31.588]                           "", base::R.version$version.string), 
[16:04:31.588]                           platform = base::sprintf("%s (%s-bit)", 
[16:04:31.588]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:04:31.588]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[16:04:31.588]                             "release", "version")], collapse = " "), 
[16:04:31.588]                           hostname = base::Sys.info()[["nodename"]])
[16:04:31.588]                         info <- base::sprintf("%s: %s", base::names(info), 
[16:04:31.588]                           info)
[16:04:31.588]                         info <- base::paste(info, collapse = "; ")
[16:04:31.588]                         if (!has_future) {
[16:04:31.588]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:04:31.588]                             info)
[16:04:31.588]                         }
[16:04:31.588]                         else {
[16:04:31.588]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:04:31.588]                             info, version)
[16:04:31.588]                         }
[16:04:31.588]                         base::stop(msg)
[16:04:31.588]                       }
[16:04:31.588]                     })
[16:04:31.588]                   }
[16:04:31.588]                   options(future.plan = NULL)
[16:04:31.588]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:04:31.588]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:04:31.588]                 }
[16:04:31.588]                 ...future.workdir <- getwd()
[16:04:31.588]             }
[16:04:31.588]             ...future.oldOptions <- base::as.list(base::.Options)
[16:04:31.588]             ...future.oldEnvVars <- base::Sys.getenv()
[16:04:31.588]         }
[16:04:31.588]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:04:31.588]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:04:31.588]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:04:31.588]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:04:31.588]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:04:31.588]             future.stdout.windows.reencode = NULL, width = 80L)
[16:04:31.588]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:04:31.588]             base::names(...future.oldOptions))
[16:04:31.588]     }
[16:04:31.588]     if (FALSE) {
[16:04:31.588]     }
[16:04:31.588]     else {
[16:04:31.588]         if (TRUE) {
[16:04:31.588]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:04:31.588]                 open = "w")
[16:04:31.588]         }
[16:04:31.588]         else {
[16:04:31.588]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:04:31.588]                 windows = "NUL", "/dev/null"), open = "w")
[16:04:31.588]         }
[16:04:31.588]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:04:31.588]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:04:31.588]             base::sink(type = "output", split = FALSE)
[16:04:31.588]             base::close(...future.stdout)
[16:04:31.588]         }, add = TRUE)
[16:04:31.588]     }
[16:04:31.588]     ...future.frame <- base::sys.nframe()
[16:04:31.588]     ...future.conditions <- base::list()
[16:04:31.588]     ...future.rng <- base::globalenv()$.Random.seed
[16:04:31.588]     if (FALSE) {
[16:04:31.588]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:04:31.588]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:04:31.588]     }
[16:04:31.588]     ...future.result <- base::tryCatch({
[16:04:31.588]         base::withCallingHandlers({
[16:04:31.588]             ...future.value <- base::withVisible(base::local({
[16:04:31.588]                 if (ii%%2 == 0) 
[16:04:31.588]                   stop("Woops!")
[16:04:31.588]                 ii
[16:04:31.588]             }))
[16:04:31.588]             future::FutureResult(value = ...future.value$value, 
[16:04:31.588]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:04:31.588]                   ...future.rng), globalenv = if (FALSE) 
[16:04:31.588]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:04:31.588]                     ...future.globalenv.names))
[16:04:31.588]                 else NULL, started = ...future.startTime, version = "1.8")
[16:04:31.588]         }, condition = base::local({
[16:04:31.588]             c <- base::c
[16:04:31.588]             inherits <- base::inherits
[16:04:31.588]             invokeRestart <- base::invokeRestart
[16:04:31.588]             length <- base::length
[16:04:31.588]             list <- base::list
[16:04:31.588]             seq.int <- base::seq.int
[16:04:31.588]             signalCondition <- base::signalCondition
[16:04:31.588]             sys.calls <- base::sys.calls
[16:04:31.588]             `[[` <- base::`[[`
[16:04:31.588]             `+` <- base::`+`
[16:04:31.588]             `<<-` <- base::`<<-`
[16:04:31.588]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:04:31.588]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:04:31.588]                   3L)]
[16:04:31.588]             }
[16:04:31.588]             function(cond) {
[16:04:31.588]                 is_error <- inherits(cond, "error")
[16:04:31.588]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:04:31.588]                   NULL)
[16:04:31.588]                 if (is_error) {
[16:04:31.588]                   sessionInformation <- function() {
[16:04:31.588]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:04:31.588]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:04:31.588]                       search = base::search(), system = base::Sys.info())
[16:04:31.588]                   }
[16:04:31.588]                   ...future.conditions[[length(...future.conditions) + 
[16:04:31.588]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:04:31.588]                     cond$call), session = sessionInformation(), 
[16:04:31.588]                     timestamp = base::Sys.time(), signaled = 0L)
[16:04:31.588]                   signalCondition(cond)
[16:04:31.588]                 }
[16:04:31.588]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:04:31.588]                 "immediateCondition"))) {
[16:04:31.588]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:04:31.588]                   ...future.conditions[[length(...future.conditions) + 
[16:04:31.588]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:04:31.588]                   if (TRUE && !signal) {
[16:04:31.588]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:04:31.588]                     {
[16:04:31.588]                       inherits <- base::inherits
[16:04:31.588]                       invokeRestart <- base::invokeRestart
[16:04:31.588]                       is.null <- base::is.null
[16:04:31.588]                       muffled <- FALSE
[16:04:31.588]                       if (inherits(cond, "message")) {
[16:04:31.588]                         muffled <- grepl(pattern, "muffleMessage")
[16:04:31.588]                         if (muffled) 
[16:04:31.588]                           invokeRestart("muffleMessage")
[16:04:31.588]                       }
[16:04:31.588]                       else if (inherits(cond, "warning")) {
[16:04:31.588]                         muffled <- grepl(pattern, "muffleWarning")
[16:04:31.588]                         if (muffled) 
[16:04:31.588]                           invokeRestart("muffleWarning")
[16:04:31.588]                       }
[16:04:31.588]                       else if (inherits(cond, "condition")) {
[16:04:31.588]                         if (!is.null(pattern)) {
[16:04:31.588]                           computeRestarts <- base::computeRestarts
[16:04:31.588]                           grepl <- base::grepl
[16:04:31.588]                           restarts <- computeRestarts(cond)
[16:04:31.588]                           for (restart in restarts) {
[16:04:31.588]                             name <- restart$name
[16:04:31.588]                             if (is.null(name)) 
[16:04:31.588]                               next
[16:04:31.588]                             if (!grepl(pattern, name)) 
[16:04:31.588]                               next
[16:04:31.588]                             invokeRestart(restart)
[16:04:31.588]                             muffled <- TRUE
[16:04:31.588]                             break
[16:04:31.588]                           }
[16:04:31.588]                         }
[16:04:31.588]                       }
[16:04:31.588]                       invisible(muffled)
[16:04:31.588]                     }
[16:04:31.588]                     muffleCondition(cond, pattern = "^muffle")
[16:04:31.588]                   }
[16:04:31.588]                 }
[16:04:31.588]                 else {
[16:04:31.588]                   if (TRUE) {
[16:04:31.588]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:04:31.588]                     {
[16:04:31.588]                       inherits <- base::inherits
[16:04:31.588]                       invokeRestart <- base::invokeRestart
[16:04:31.588]                       is.null <- base::is.null
[16:04:31.588]                       muffled <- FALSE
[16:04:31.588]                       if (inherits(cond, "message")) {
[16:04:31.588]                         muffled <- grepl(pattern, "muffleMessage")
[16:04:31.588]                         if (muffled) 
[16:04:31.588]                           invokeRestart("muffleMessage")
[16:04:31.588]                       }
[16:04:31.588]                       else if (inherits(cond, "warning")) {
[16:04:31.588]                         muffled <- grepl(pattern, "muffleWarning")
[16:04:31.588]                         if (muffled) 
[16:04:31.588]                           invokeRestart("muffleWarning")
[16:04:31.588]                       }
[16:04:31.588]                       else if (inherits(cond, "condition")) {
[16:04:31.588]                         if (!is.null(pattern)) {
[16:04:31.588]                           computeRestarts <- base::computeRestarts
[16:04:31.588]                           grepl <- base::grepl
[16:04:31.588]                           restarts <- computeRestarts(cond)
[16:04:31.588]                           for (restart in restarts) {
[16:04:31.588]                             name <- restart$name
[16:04:31.588]                             if (is.null(name)) 
[16:04:31.588]                               next
[16:04:31.588]                             if (!grepl(pattern, name)) 
[16:04:31.588]                               next
[16:04:31.588]                             invokeRestart(restart)
[16:04:31.588]                             muffled <- TRUE
[16:04:31.588]                             break
[16:04:31.588]                           }
[16:04:31.588]                         }
[16:04:31.588]                       }
[16:04:31.588]                       invisible(muffled)
[16:04:31.588]                     }
[16:04:31.588]                     muffleCondition(cond, pattern = "^muffle")
[16:04:31.588]                   }
[16:04:31.588]                 }
[16:04:31.588]             }
[16:04:31.588]         }))
[16:04:31.588]     }, error = function(ex) {
[16:04:31.588]         base::structure(base::list(value = NULL, visible = NULL, 
[16:04:31.588]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:04:31.588]                 ...future.rng), started = ...future.startTime, 
[16:04:31.588]             finished = Sys.time(), session_uuid = NA_character_, 
[16:04:31.588]             version = "1.8"), class = "FutureResult")
[16:04:31.588]     }, finally = {
[16:04:31.588]         if (!identical(...future.workdir, getwd())) 
[16:04:31.588]             setwd(...future.workdir)
[16:04:31.588]         {
[16:04:31.588]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:04:31.588]                 ...future.oldOptions$nwarnings <- NULL
[16:04:31.588]             }
[16:04:31.588]             base::options(...future.oldOptions)
[16:04:31.588]             if (.Platform$OS.type == "windows") {
[16:04:31.588]                 old_names <- names(...future.oldEnvVars)
[16:04:31.588]                 envs <- base::Sys.getenv()
[16:04:31.588]                 names <- names(envs)
[16:04:31.588]                 common <- intersect(names, old_names)
[16:04:31.588]                 added <- setdiff(names, old_names)
[16:04:31.588]                 removed <- setdiff(old_names, names)
[16:04:31.588]                 changed <- common[...future.oldEnvVars[common] != 
[16:04:31.588]                   envs[common]]
[16:04:31.588]                 NAMES <- toupper(changed)
[16:04:31.588]                 args <- list()
[16:04:31.588]                 for (kk in seq_along(NAMES)) {
[16:04:31.588]                   name <- changed[[kk]]
[16:04:31.588]                   NAME <- NAMES[[kk]]
[16:04:31.588]                   if (name != NAME && is.element(NAME, old_names)) 
[16:04:31.588]                     next
[16:04:31.588]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:04:31.588]                 }
[16:04:31.588]                 NAMES <- toupper(added)
[16:04:31.588]                 for (kk in seq_along(NAMES)) {
[16:04:31.588]                   name <- added[[kk]]
[16:04:31.588]                   NAME <- NAMES[[kk]]
[16:04:31.588]                   if (name != NAME && is.element(NAME, old_names)) 
[16:04:31.588]                     next
[16:04:31.588]                   args[[name]] <- ""
[16:04:31.588]                 }
[16:04:31.588]                 NAMES <- toupper(removed)
[16:04:31.588]                 for (kk in seq_along(NAMES)) {
[16:04:31.588]                   name <- removed[[kk]]
[16:04:31.588]                   NAME <- NAMES[[kk]]
[16:04:31.588]                   if (name != NAME && is.element(NAME, old_names)) 
[16:04:31.588]                     next
[16:04:31.588]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:04:31.588]                 }
[16:04:31.588]                 if (length(args) > 0) 
[16:04:31.588]                   base::do.call(base::Sys.setenv, args = args)
[16:04:31.588]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:04:31.588]             }
[16:04:31.588]             else {
[16:04:31.588]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:04:31.588]             }
[16:04:31.588]             {
[16:04:31.588]                 if (base::length(...future.futureOptionsAdded) > 
[16:04:31.588]                   0L) {
[16:04:31.588]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:04:31.588]                   base::names(opts) <- ...future.futureOptionsAdded
[16:04:31.588]                   base::options(opts)
[16:04:31.588]                 }
[16:04:31.588]                 {
[16:04:31.588]                   {
[16:04:31.588]                     NULL
[16:04:31.588]                     RNGkind("Mersenne-Twister")
[16:04:31.588]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[16:04:31.588]                       inherits = FALSE)
[16:04:31.588]                   }
[16:04:31.588]                   options(future.plan = NULL)
[16:04:31.588]                   if (is.na(NA_character_)) 
[16:04:31.588]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:04:31.588]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:04:31.588]                   future::plan(list(function (..., envir = parent.frame()) 
[16:04:31.588]                   {
[16:04:31.588]                     future <- SequentialFuture(..., envir = envir)
[16:04:31.588]                     if (!future$lazy) 
[16:04:31.588]                       future <- run(future)
[16:04:31.588]                     invisible(future)
[16:04:31.588]                   }), .cleanup = FALSE, .init = FALSE)
[16:04:31.588]                 }
[16:04:31.588]             }
[16:04:31.588]         }
[16:04:31.588]     })
[16:04:31.588]     if (TRUE) {
[16:04:31.588]         base::sink(type = "output", split = FALSE)
[16:04:31.588]         if (TRUE) {
[16:04:31.588]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:04:31.588]         }
[16:04:31.588]         else {
[16:04:31.588]             ...future.result["stdout"] <- base::list(NULL)
[16:04:31.588]         }
[16:04:31.588]         base::close(...future.stdout)
[16:04:31.588]         ...future.stdout <- NULL
[16:04:31.588]     }
[16:04:31.588]     ...future.result$conditions <- ...future.conditions
[16:04:31.588]     ...future.result$finished <- base::Sys.time()
[16:04:31.588]     ...future.result
[16:04:31.588] }
[16:04:31.589] assign_globals() ...
[16:04:31.589] List of 1
[16:04:31.589]  $ ii: int 1
[16:04:31.589]  - attr(*, "where")=List of 1
[16:04:31.589]   ..$ ii:<environment: R_EmptyEnv> 
[16:04:31.589]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[16:04:31.589]  - attr(*, "resolved")= logi FALSE
[16:04:31.589]  - attr(*, "total_size")= num 56
[16:04:31.589]  - attr(*, "already-done")= logi TRUE
[16:04:31.593] - copied ‘ii’ to environment
[16:04:31.593] assign_globals() ... done
[16:04:31.593] plan(): Setting new future strategy stack:
[16:04:31.593] List of future strategies:
[16:04:31.593] 1. sequential:
[16:04:31.593]    - args: function (..., envir = parent.frame())
[16:04:31.593]    - tweaked: FALSE
[16:04:31.593]    - call: NULL
[16:04:31.593] plan(): nbrOfWorkers() = 1
[16:04:31.594] plan(): Setting new future strategy stack:
[16:04:31.594] List of future strategies:
[16:04:31.594] 1. sequential:
[16:04:31.594]    - args: function (..., envir = parent.frame())
[16:04:31.594]    - tweaked: FALSE
[16:04:31.594]    - call: plan(strategy)
[16:04:31.595] plan(): nbrOfWorkers() = 1
[16:04:31.595] SequentialFuture started (and completed)
[16:04:31.595] - Launch lazy future ... done
[16:04:31.595] run() for ‘SequentialFuture’ ... done
[16:04:31.595] getGlobalsAndPackages() ...
[16:04:31.595] Searching for globals...
[16:04:31.597] - globals found: [6] ‘{’, ‘if’, ‘==’, ‘%%’, ‘ii’, ‘stop’
[16:04:31.597] Searching for globals ... DONE
[16:04:31.597] Resolving globals: FALSE
[16:04:31.597] The total size of the 1 globals is 56 bytes (56 bytes)
[16:04:31.598] The total size of the 1 globals exported for future expression (‘{; if (ii%%2 == 0); stop("Woops!"); ii; }’) is 56 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘ii’ (56 bytes of class ‘numeric’)
[16:04:31.598] - globals: [1] ‘ii’
[16:04:31.598] 
[16:04:31.598] getGlobalsAndPackages() ... DONE
[16:04:31.598] run() for ‘Future’ ...
[16:04:31.598] - state: ‘created’
[16:04:31.598] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[16:04:31.599] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[16:04:31.599] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[16:04:31.599]   - Field: ‘label’
[16:04:31.599]   - Field: ‘local’
[16:04:31.599]   - Field: ‘owner’
[16:04:31.599]   - Field: ‘envir’
[16:04:31.599]   - Field: ‘packages’
[16:04:31.599]   - Field: ‘gc’
[16:04:31.599]   - Field: ‘conditions’
[16:04:31.599]   - Field: ‘expr’
[16:04:31.600]   - Field: ‘uuid’
[16:04:31.600]   - Field: ‘seed’
[16:04:31.600]   - Field: ‘version’
[16:04:31.600]   - Field: ‘result’
[16:04:31.600]   - Field: ‘asynchronous’
[16:04:31.600]   - Field: ‘calls’
[16:04:31.600]   - Field: ‘globals’
[16:04:31.600]   - Field: ‘stdout’
[16:04:31.600]   - Field: ‘earlySignal’
[16:04:31.600]   - Field: ‘lazy’
[16:04:31.600]   - Field: ‘state’
[16:04:31.601] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[16:04:31.601] - Launch lazy future ...
[16:04:31.601] Packages needed by the future expression (n = 0): <none>
[16:04:31.601] Packages needed by future strategies (n = 0): <none>
[16:04:31.601] {
[16:04:31.601]     {
[16:04:31.601]         {
[16:04:31.601]             ...future.startTime <- base::Sys.time()
[16:04:31.601]             {
[16:04:31.601]                 {
[16:04:31.601]                   {
[16:04:31.601]                     base::local({
[16:04:31.601]                       has_future <- base::requireNamespace("future", 
[16:04:31.601]                         quietly = TRUE)
[16:04:31.601]                       if (has_future) {
[16:04:31.601]                         ns <- base::getNamespace("future")
[16:04:31.601]                         version <- ns[[".package"]][["version"]]
[16:04:31.601]                         if (is.null(version)) 
[16:04:31.601]                           version <- utils::packageVersion("future")
[16:04:31.601]                       }
[16:04:31.601]                       else {
[16:04:31.601]                         version <- NULL
[16:04:31.601]                       }
[16:04:31.601]                       if (!has_future || version < "1.8.0") {
[16:04:31.601]                         info <- base::c(r_version = base::gsub("R version ", 
[16:04:31.601]                           "", base::R.version$version.string), 
[16:04:31.601]                           platform = base::sprintf("%s (%s-bit)", 
[16:04:31.601]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:04:31.601]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[16:04:31.601]                             "release", "version")], collapse = " "), 
[16:04:31.601]                           hostname = base::Sys.info()[["nodename"]])
[16:04:31.601]                         info <- base::sprintf("%s: %s", base::names(info), 
[16:04:31.601]                           info)
[16:04:31.601]                         info <- base::paste(info, collapse = "; ")
[16:04:31.601]                         if (!has_future) {
[16:04:31.601]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:04:31.601]                             info)
[16:04:31.601]                         }
[16:04:31.601]                         else {
[16:04:31.601]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:04:31.601]                             info, version)
[16:04:31.601]                         }
[16:04:31.601]                         base::stop(msg)
[16:04:31.601]                       }
[16:04:31.601]                     })
[16:04:31.601]                   }
[16:04:31.601]                   options(future.plan = NULL)
[16:04:31.601]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:04:31.601]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:04:31.601]                 }
[16:04:31.601]                 ...future.workdir <- getwd()
[16:04:31.601]             }
[16:04:31.601]             ...future.oldOptions <- base::as.list(base::.Options)
[16:04:31.601]             ...future.oldEnvVars <- base::Sys.getenv()
[16:04:31.601]         }
[16:04:31.601]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:04:31.601]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:04:31.601]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:04:31.601]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:04:31.601]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:04:31.601]             future.stdout.windows.reencode = NULL, width = 80L)
[16:04:31.601]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:04:31.601]             base::names(...future.oldOptions))
[16:04:31.601]     }
[16:04:31.601]     if (FALSE) {
[16:04:31.601]     }
[16:04:31.601]     else {
[16:04:31.601]         if (TRUE) {
[16:04:31.601]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:04:31.601]                 open = "w")
[16:04:31.601]         }
[16:04:31.601]         else {
[16:04:31.601]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:04:31.601]                 windows = "NUL", "/dev/null"), open = "w")
[16:04:31.601]         }
[16:04:31.601]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:04:31.601]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:04:31.601]             base::sink(type = "output", split = FALSE)
[16:04:31.601]             base::close(...future.stdout)
[16:04:31.601]         }, add = TRUE)
[16:04:31.601]     }
[16:04:31.601]     ...future.frame <- base::sys.nframe()
[16:04:31.601]     ...future.conditions <- base::list()
[16:04:31.601]     ...future.rng <- base::globalenv()$.Random.seed
[16:04:31.601]     if (FALSE) {
[16:04:31.601]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:04:31.601]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:04:31.601]     }
[16:04:31.601]     ...future.result <- base::tryCatch({
[16:04:31.601]         base::withCallingHandlers({
[16:04:31.601]             ...future.value <- base::withVisible(base::local({
[16:04:31.601]                 if (ii%%2 == 0) 
[16:04:31.601]                   stop("Woops!")
[16:04:31.601]                 ii
[16:04:31.601]             }))
[16:04:31.601]             future::FutureResult(value = ...future.value$value, 
[16:04:31.601]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:04:31.601]                   ...future.rng), globalenv = if (FALSE) 
[16:04:31.601]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:04:31.601]                     ...future.globalenv.names))
[16:04:31.601]                 else NULL, started = ...future.startTime, version = "1.8")
[16:04:31.601]         }, condition = base::local({
[16:04:31.601]             c <- base::c
[16:04:31.601]             inherits <- base::inherits
[16:04:31.601]             invokeRestart <- base::invokeRestart
[16:04:31.601]             length <- base::length
[16:04:31.601]             list <- base::list
[16:04:31.601]             seq.int <- base::seq.int
[16:04:31.601]             signalCondition <- base::signalCondition
[16:04:31.601]             sys.calls <- base::sys.calls
[16:04:31.601]             `[[` <- base::`[[`
[16:04:31.601]             `+` <- base::`+`
[16:04:31.601]             `<<-` <- base::`<<-`
[16:04:31.601]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:04:31.601]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:04:31.601]                   3L)]
[16:04:31.601]             }
[16:04:31.601]             function(cond) {
[16:04:31.601]                 is_error <- inherits(cond, "error")
[16:04:31.601]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:04:31.601]                   NULL)
[16:04:31.601]                 if (is_error) {
[16:04:31.601]                   sessionInformation <- function() {
[16:04:31.601]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:04:31.601]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:04:31.601]                       search = base::search(), system = base::Sys.info())
[16:04:31.601]                   }
[16:04:31.601]                   ...future.conditions[[length(...future.conditions) + 
[16:04:31.601]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:04:31.601]                     cond$call), session = sessionInformation(), 
[16:04:31.601]                     timestamp = base::Sys.time(), signaled = 0L)
[16:04:31.601]                   signalCondition(cond)
[16:04:31.601]                 }
[16:04:31.601]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:04:31.601]                 "immediateCondition"))) {
[16:04:31.601]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:04:31.601]                   ...future.conditions[[length(...future.conditions) + 
[16:04:31.601]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:04:31.601]                   if (TRUE && !signal) {
[16:04:31.601]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:04:31.601]                     {
[16:04:31.601]                       inherits <- base::inherits
[16:04:31.601]                       invokeRestart <- base::invokeRestart
[16:04:31.601]                       is.null <- base::is.null
[16:04:31.601]                       muffled <- FALSE
[16:04:31.601]                       if (inherits(cond, "message")) {
[16:04:31.601]                         muffled <- grepl(pattern, "muffleMessage")
[16:04:31.601]                         if (muffled) 
[16:04:31.601]                           invokeRestart("muffleMessage")
[16:04:31.601]                       }
[16:04:31.601]                       else if (inherits(cond, "warning")) {
[16:04:31.601]                         muffled <- grepl(pattern, "muffleWarning")
[16:04:31.601]                         if (muffled) 
[16:04:31.601]                           invokeRestart("muffleWarning")
[16:04:31.601]                       }
[16:04:31.601]                       else if (inherits(cond, "condition")) {
[16:04:31.601]                         if (!is.null(pattern)) {
[16:04:31.601]                           computeRestarts <- base::computeRestarts
[16:04:31.601]                           grepl <- base::grepl
[16:04:31.601]                           restarts <- computeRestarts(cond)
[16:04:31.601]                           for (restart in restarts) {
[16:04:31.601]                             name <- restart$name
[16:04:31.601]                             if (is.null(name)) 
[16:04:31.601]                               next
[16:04:31.601]                             if (!grepl(pattern, name)) 
[16:04:31.601]                               next
[16:04:31.601]                             invokeRestart(restart)
[16:04:31.601]                             muffled <- TRUE
[16:04:31.601]                             break
[16:04:31.601]                           }
[16:04:31.601]                         }
[16:04:31.601]                       }
[16:04:31.601]                       invisible(muffled)
[16:04:31.601]                     }
[16:04:31.601]                     muffleCondition(cond, pattern = "^muffle")
[16:04:31.601]                   }
[16:04:31.601]                 }
[16:04:31.601]                 else {
[16:04:31.601]                   if (TRUE) {
[16:04:31.601]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:04:31.601]                     {
[16:04:31.601]                       inherits <- base::inherits
[16:04:31.601]                       invokeRestart <- base::invokeRestart
[16:04:31.601]                       is.null <- base::is.null
[16:04:31.601]                       muffled <- FALSE
[16:04:31.601]                       if (inherits(cond, "message")) {
[16:04:31.601]                         muffled <- grepl(pattern, "muffleMessage")
[16:04:31.601]                         if (muffled) 
[16:04:31.601]                           invokeRestart("muffleMessage")
[16:04:31.601]                       }
[16:04:31.601]                       else if (inherits(cond, "warning")) {
[16:04:31.601]                         muffled <- grepl(pattern, "muffleWarning")
[16:04:31.601]                         if (muffled) 
[16:04:31.601]                           invokeRestart("muffleWarning")
[16:04:31.601]                       }
[16:04:31.601]                       else if (inherits(cond, "condition")) {
[16:04:31.601]                         if (!is.null(pattern)) {
[16:04:31.601]                           computeRestarts <- base::computeRestarts
[16:04:31.601]                           grepl <- base::grepl
[16:04:31.601]                           restarts <- computeRestarts(cond)
[16:04:31.601]                           for (restart in restarts) {
[16:04:31.601]                             name <- restart$name
[16:04:31.601]                             if (is.null(name)) 
[16:04:31.601]                               next
[16:04:31.601]                             if (!grepl(pattern, name)) 
[16:04:31.601]                               next
[16:04:31.601]                             invokeRestart(restart)
[16:04:31.601]                             muffled <- TRUE
[16:04:31.601]                             break
[16:04:31.601]                           }
[16:04:31.601]                         }
[16:04:31.601]                       }
[16:04:31.601]                       invisible(muffled)
[16:04:31.601]                     }
[16:04:31.601]                     muffleCondition(cond, pattern = "^muffle")
[16:04:31.601]                   }
[16:04:31.601]                 }
[16:04:31.601]             }
[16:04:31.601]         }))
[16:04:31.601]     }, error = function(ex) {
[16:04:31.601]         base::structure(base::list(value = NULL, visible = NULL, 
[16:04:31.601]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:04:31.601]                 ...future.rng), started = ...future.startTime, 
[16:04:31.601]             finished = Sys.time(), session_uuid = NA_character_, 
[16:04:31.601]             version = "1.8"), class = "FutureResult")
[16:04:31.601]     }, finally = {
[16:04:31.601]         if (!identical(...future.workdir, getwd())) 
[16:04:31.601]             setwd(...future.workdir)
[16:04:31.601]         {
[16:04:31.601]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:04:31.601]                 ...future.oldOptions$nwarnings <- NULL
[16:04:31.601]             }
[16:04:31.601]             base::options(...future.oldOptions)
[16:04:31.601]             if (.Platform$OS.type == "windows") {
[16:04:31.601]                 old_names <- names(...future.oldEnvVars)
[16:04:31.601]                 envs <- base::Sys.getenv()
[16:04:31.601]                 names <- names(envs)
[16:04:31.601]                 common <- intersect(names, old_names)
[16:04:31.601]                 added <- setdiff(names, old_names)
[16:04:31.601]                 removed <- setdiff(old_names, names)
[16:04:31.601]                 changed <- common[...future.oldEnvVars[common] != 
[16:04:31.601]                   envs[common]]
[16:04:31.601]                 NAMES <- toupper(changed)
[16:04:31.601]                 args <- list()
[16:04:31.601]                 for (kk in seq_along(NAMES)) {
[16:04:31.601]                   name <- changed[[kk]]
[16:04:31.601]                   NAME <- NAMES[[kk]]
[16:04:31.601]                   if (name != NAME && is.element(NAME, old_names)) 
[16:04:31.601]                     next
[16:04:31.601]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:04:31.601]                 }
[16:04:31.601]                 NAMES <- toupper(added)
[16:04:31.601]                 for (kk in seq_along(NAMES)) {
[16:04:31.601]                   name <- added[[kk]]
[16:04:31.601]                   NAME <- NAMES[[kk]]
[16:04:31.601]                   if (name != NAME && is.element(NAME, old_names)) 
[16:04:31.601]                     next
[16:04:31.601]                   args[[name]] <- ""
[16:04:31.601]                 }
[16:04:31.601]                 NAMES <- toupper(removed)
[16:04:31.601]                 for (kk in seq_along(NAMES)) {
[16:04:31.601]                   name <- removed[[kk]]
[16:04:31.601]                   NAME <- NAMES[[kk]]
[16:04:31.601]                   if (name != NAME && is.element(NAME, old_names)) 
[16:04:31.601]                     next
[16:04:31.601]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:04:31.601]                 }
[16:04:31.601]                 if (length(args) > 0) 
[16:04:31.601]                   base::do.call(base::Sys.setenv, args = args)
[16:04:31.601]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:04:31.601]             }
[16:04:31.601]             else {
[16:04:31.601]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:04:31.601]             }
[16:04:31.601]             {
[16:04:31.601]                 if (base::length(...future.futureOptionsAdded) > 
[16:04:31.601]                   0L) {
[16:04:31.601]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:04:31.601]                   base::names(opts) <- ...future.futureOptionsAdded
[16:04:31.601]                   base::options(opts)
[16:04:31.601]                 }
[16:04:31.601]                 {
[16:04:31.601]                   {
[16:04:31.601]                     NULL
[16:04:31.601]                     RNGkind("Mersenne-Twister")
[16:04:31.601]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[16:04:31.601]                       inherits = FALSE)
[16:04:31.601]                   }
[16:04:31.601]                   options(future.plan = NULL)
[16:04:31.601]                   if (is.na(NA_character_)) 
[16:04:31.601]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:04:31.601]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:04:31.601]                   future::plan(list(function (..., envir = parent.frame()) 
[16:04:31.601]                   {
[16:04:31.601]                     future <- SequentialFuture(..., envir = envir)
[16:04:31.601]                     if (!future$lazy) 
[16:04:31.601]                       future <- run(future)
[16:04:31.601]                     invisible(future)
[16:04:31.601]                   }), .cleanup = FALSE, .init = FALSE)
[16:04:31.601]                 }
[16:04:31.601]             }
[16:04:31.601]         }
[16:04:31.601]     })
[16:04:31.601]     if (TRUE) {
[16:04:31.601]         base::sink(type = "output", split = FALSE)
[16:04:31.601]         if (TRUE) {
[16:04:31.601]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:04:31.601]         }
[16:04:31.601]         else {
[16:04:31.601]             ...future.result["stdout"] <- base::list(NULL)
[16:04:31.601]         }
[16:04:31.601]         base::close(...future.stdout)
[16:04:31.601]         ...future.stdout <- NULL
[16:04:31.601]     }
[16:04:31.601]     ...future.result$conditions <- ...future.conditions
[16:04:31.601]     ...future.result$finished <- base::Sys.time()
[16:04:31.601]     ...future.result
[16:04:31.601] }
[16:04:31.603] assign_globals() ...
[16:04:31.603] List of 1
[16:04:31.603]  $ ii: int 2
[16:04:31.603]  - attr(*, "where")=List of 1
[16:04:31.603]   ..$ ii:<environment: R_EmptyEnv> 
[16:04:31.603]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[16:04:31.603]  - attr(*, "resolved")= logi FALSE
[16:04:31.603]  - attr(*, "total_size")= num 56
[16:04:31.603]  - attr(*, "already-done")= logi TRUE
[16:04:31.605] - copied ‘ii’ to environment
[16:04:31.605] assign_globals() ... done
[16:04:31.605] plan(): Setting new future strategy stack:
[16:04:31.606] List of future strategies:
[16:04:31.606] 1. sequential:
[16:04:31.606]    - args: function (..., envir = parent.frame())
[16:04:31.606]    - tweaked: FALSE
[16:04:31.606]    - call: NULL
[16:04:31.606] plan(): nbrOfWorkers() = 1
[16:04:31.607] plan(): Setting new future strategy stack:
[16:04:31.607] List of future strategies:
[16:04:31.607] 1. sequential:
[16:04:31.607]    - args: function (..., envir = parent.frame())
[16:04:31.607]    - tweaked: FALSE
[16:04:31.607]    - call: plan(strategy)
[16:04:31.607] plan(): nbrOfWorkers() = 1
[16:04:31.607] SequentialFuture started (and completed)
[16:04:31.607] signalConditions() ...
[16:04:31.607]  - include = ‘immediateCondition’
[16:04:31.608]  - exclude = 
[16:04:31.608]  - resignal = FALSE
[16:04:31.608]  - Number of conditions: 1
[16:04:31.608] signalConditions() ... done
[16:04:31.608] - Launch lazy future ... done
[16:04:31.608] run() for ‘SequentialFuture’ ... done
[16:04:31.608] getGlobalsAndPackages() ...
[16:04:31.608] Searching for globals...
[16:04:31.610] - globals found: [6] ‘{’, ‘if’, ‘==’, ‘%%’, ‘ii’, ‘stop’
[16:04:31.610] Searching for globals ... DONE
[16:04:31.610] Resolving globals: FALSE
[16:04:31.610] The total size of the 1 globals is 56 bytes (56 bytes)
[16:04:31.611] The total size of the 1 globals exported for future expression (‘{; if (ii%%2 == 0); stop("Woops!"); ii; }’) is 56 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘ii’ (56 bytes of class ‘numeric’)
[16:04:31.611] - globals: [1] ‘ii’
[16:04:31.611] 
[16:04:31.611] getGlobalsAndPackages() ... DONE
[16:04:31.611] run() for ‘Future’ ...
[16:04:31.611] - state: ‘created’
[16:04:31.611] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[16:04:31.612] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[16:04:31.612] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[16:04:31.612]   - Field: ‘label’
[16:04:31.612]   - Field: ‘local’
[16:04:31.612]   - Field: ‘owner’
[16:04:31.612]   - Field: ‘envir’
[16:04:31.612]   - Field: ‘packages’
[16:04:31.612]   - Field: ‘gc’
[16:04:31.612]   - Field: ‘conditions’
[16:04:31.612]   - Field: ‘expr’
[16:04:31.613]   - Field: ‘uuid’
[16:04:31.613]   - Field: ‘seed’
[16:04:31.613]   - Field: ‘version’
[16:04:31.613]   - Field: ‘result’
[16:04:31.613]   - Field: ‘asynchronous’
[16:04:31.613]   - Field: ‘calls’
[16:04:31.613]   - Field: ‘globals’
[16:04:31.613]   - Field: ‘stdout’
[16:04:31.613]   - Field: ‘earlySignal’
[16:04:31.613]   - Field: ‘lazy’
[16:04:31.613]   - Field: ‘state’
[16:04:31.613] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[16:04:31.614] - Launch lazy future ...
[16:04:31.614] Packages needed by the future expression (n = 0): <none>
[16:04:31.614] Packages needed by future strategies (n = 0): <none>
[16:04:31.614] {
[16:04:31.614]     {
[16:04:31.614]         {
[16:04:31.614]             ...future.startTime <- base::Sys.time()
[16:04:31.614]             {
[16:04:31.614]                 {
[16:04:31.614]                   {
[16:04:31.614]                     base::local({
[16:04:31.614]                       has_future <- base::requireNamespace("future", 
[16:04:31.614]                         quietly = TRUE)
[16:04:31.614]                       if (has_future) {
[16:04:31.614]                         ns <- base::getNamespace("future")
[16:04:31.614]                         version <- ns[[".package"]][["version"]]
[16:04:31.614]                         if (is.null(version)) 
[16:04:31.614]                           version <- utils::packageVersion("future")
[16:04:31.614]                       }
[16:04:31.614]                       else {
[16:04:31.614]                         version <- NULL
[16:04:31.614]                       }
[16:04:31.614]                       if (!has_future || version < "1.8.0") {
[16:04:31.614]                         info <- base::c(r_version = base::gsub("R version ", 
[16:04:31.614]                           "", base::R.version$version.string), 
[16:04:31.614]                           platform = base::sprintf("%s (%s-bit)", 
[16:04:31.614]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:04:31.614]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[16:04:31.614]                             "release", "version")], collapse = " "), 
[16:04:31.614]                           hostname = base::Sys.info()[["nodename"]])
[16:04:31.614]                         info <- base::sprintf("%s: %s", base::names(info), 
[16:04:31.614]                           info)
[16:04:31.614]                         info <- base::paste(info, collapse = "; ")
[16:04:31.614]                         if (!has_future) {
[16:04:31.614]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:04:31.614]                             info)
[16:04:31.614]                         }
[16:04:31.614]                         else {
[16:04:31.614]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:04:31.614]                             info, version)
[16:04:31.614]                         }
[16:04:31.614]                         base::stop(msg)
[16:04:31.614]                       }
[16:04:31.614]                     })
[16:04:31.614]                   }
[16:04:31.614]                   options(future.plan = NULL)
[16:04:31.614]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:04:31.614]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:04:31.614]                 }
[16:04:31.614]                 ...future.workdir <- getwd()
[16:04:31.614]             }
[16:04:31.614]             ...future.oldOptions <- base::as.list(base::.Options)
[16:04:31.614]             ...future.oldEnvVars <- base::Sys.getenv()
[16:04:31.614]         }
[16:04:31.614]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:04:31.614]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:04:31.614]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:04:31.614]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:04:31.614]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:04:31.614]             future.stdout.windows.reencode = NULL, width = 80L)
[16:04:31.614]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:04:31.614]             base::names(...future.oldOptions))
[16:04:31.614]     }
[16:04:31.614]     if (FALSE) {
[16:04:31.614]     }
[16:04:31.614]     else {
[16:04:31.614]         if (TRUE) {
[16:04:31.614]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:04:31.614]                 open = "w")
[16:04:31.614]         }
[16:04:31.614]         else {
[16:04:31.614]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:04:31.614]                 windows = "NUL", "/dev/null"), open = "w")
[16:04:31.614]         }
[16:04:31.614]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:04:31.614]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:04:31.614]             base::sink(type = "output", split = FALSE)
[16:04:31.614]             base::close(...future.stdout)
[16:04:31.614]         }, add = TRUE)
[16:04:31.614]     }
[16:04:31.614]     ...future.frame <- base::sys.nframe()
[16:04:31.614]     ...future.conditions <- base::list()
[16:04:31.614]     ...future.rng <- base::globalenv()$.Random.seed
[16:04:31.614]     if (FALSE) {
[16:04:31.614]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:04:31.614]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:04:31.614]     }
[16:04:31.614]     ...future.result <- base::tryCatch({
[16:04:31.614]         base::withCallingHandlers({
[16:04:31.614]             ...future.value <- base::withVisible(base::local({
[16:04:31.614]                 if (ii%%2 == 0) 
[16:04:31.614]                   stop("Woops!")
[16:04:31.614]                 ii
[16:04:31.614]             }))
[16:04:31.614]             future::FutureResult(value = ...future.value$value, 
[16:04:31.614]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:04:31.614]                   ...future.rng), globalenv = if (FALSE) 
[16:04:31.614]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:04:31.614]                     ...future.globalenv.names))
[16:04:31.614]                 else NULL, started = ...future.startTime, version = "1.8")
[16:04:31.614]         }, condition = base::local({
[16:04:31.614]             c <- base::c
[16:04:31.614]             inherits <- base::inherits
[16:04:31.614]             invokeRestart <- base::invokeRestart
[16:04:31.614]             length <- base::length
[16:04:31.614]             list <- base::list
[16:04:31.614]             seq.int <- base::seq.int
[16:04:31.614]             signalCondition <- base::signalCondition
[16:04:31.614]             sys.calls <- base::sys.calls
[16:04:31.614]             `[[` <- base::`[[`
[16:04:31.614]             `+` <- base::`+`
[16:04:31.614]             `<<-` <- base::`<<-`
[16:04:31.614]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:04:31.614]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:04:31.614]                   3L)]
[16:04:31.614]             }
[16:04:31.614]             function(cond) {
[16:04:31.614]                 is_error <- inherits(cond, "error")
[16:04:31.614]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:04:31.614]                   NULL)
[16:04:31.614]                 if (is_error) {
[16:04:31.614]                   sessionInformation <- function() {
[16:04:31.614]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:04:31.614]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:04:31.614]                       search = base::search(), system = base::Sys.info())
[16:04:31.614]                   }
[16:04:31.614]                   ...future.conditions[[length(...future.conditions) + 
[16:04:31.614]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:04:31.614]                     cond$call), session = sessionInformation(), 
[16:04:31.614]                     timestamp = base::Sys.time(), signaled = 0L)
[16:04:31.614]                   signalCondition(cond)
[16:04:31.614]                 }
[16:04:31.614]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:04:31.614]                 "immediateCondition"))) {
[16:04:31.614]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:04:31.614]                   ...future.conditions[[length(...future.conditions) + 
[16:04:31.614]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:04:31.614]                   if (TRUE && !signal) {
[16:04:31.614]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:04:31.614]                     {
[16:04:31.614]                       inherits <- base::inherits
[16:04:31.614]                       invokeRestart <- base::invokeRestart
[16:04:31.614]                       is.null <- base::is.null
[16:04:31.614]                       muffled <- FALSE
[16:04:31.614]                       if (inherits(cond, "message")) {
[16:04:31.614]                         muffled <- grepl(pattern, "muffleMessage")
[16:04:31.614]                         if (muffled) 
[16:04:31.614]                           invokeRestart("muffleMessage")
[16:04:31.614]                       }
[16:04:31.614]                       else if (inherits(cond, "warning")) {
[16:04:31.614]                         muffled <- grepl(pattern, "muffleWarning")
[16:04:31.614]                         if (muffled) 
[16:04:31.614]                           invokeRestart("muffleWarning")
[16:04:31.614]                       }
[16:04:31.614]                       else if (inherits(cond, "condition")) {
[16:04:31.614]                         if (!is.null(pattern)) {
[16:04:31.614]                           computeRestarts <- base::computeRestarts
[16:04:31.614]                           grepl <- base::grepl
[16:04:31.614]                           restarts <- computeRestarts(cond)
[16:04:31.614]                           for (restart in restarts) {
[16:04:31.614]                             name <- restart$name
[16:04:31.614]                             if (is.null(name)) 
[16:04:31.614]                               next
[16:04:31.614]                             if (!grepl(pattern, name)) 
[16:04:31.614]                               next
[16:04:31.614]                             invokeRestart(restart)
[16:04:31.614]                             muffled <- TRUE
[16:04:31.614]                             break
[16:04:31.614]                           }
[16:04:31.614]                         }
[16:04:31.614]                       }
[16:04:31.614]                       invisible(muffled)
[16:04:31.614]                     }
[16:04:31.614]                     muffleCondition(cond, pattern = "^muffle")
[16:04:31.614]                   }
[16:04:31.614]                 }
[16:04:31.614]                 else {
[16:04:31.614]                   if (TRUE) {
[16:04:31.614]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:04:31.614]                     {
[16:04:31.614]                       inherits <- base::inherits
[16:04:31.614]                       invokeRestart <- base::invokeRestart
[16:04:31.614]                       is.null <- base::is.null
[16:04:31.614]                       muffled <- FALSE
[16:04:31.614]                       if (inherits(cond, "message")) {
[16:04:31.614]                         muffled <- grepl(pattern, "muffleMessage")
[16:04:31.614]                         if (muffled) 
[16:04:31.614]                           invokeRestart("muffleMessage")
[16:04:31.614]                       }
[16:04:31.614]                       else if (inherits(cond, "warning")) {
[16:04:31.614]                         muffled <- grepl(pattern, "muffleWarning")
[16:04:31.614]                         if (muffled) 
[16:04:31.614]                           invokeRestart("muffleWarning")
[16:04:31.614]                       }
[16:04:31.614]                       else if (inherits(cond, "condition")) {
[16:04:31.614]                         if (!is.null(pattern)) {
[16:04:31.614]                           computeRestarts <- base::computeRestarts
[16:04:31.614]                           grepl <- base::grepl
[16:04:31.614]                           restarts <- computeRestarts(cond)
[16:04:31.614]                           for (restart in restarts) {
[16:04:31.614]                             name <- restart$name
[16:04:31.614]                             if (is.null(name)) 
[16:04:31.614]                               next
[16:04:31.614]                             if (!grepl(pattern, name)) 
[16:04:31.614]                               next
[16:04:31.614]                             invokeRestart(restart)
[16:04:31.614]                             muffled <- TRUE
[16:04:31.614]                             break
[16:04:31.614]                           }
[16:04:31.614]                         }
[16:04:31.614]                       }
[16:04:31.614]                       invisible(muffled)
[16:04:31.614]                     }
[16:04:31.614]                     muffleCondition(cond, pattern = "^muffle")
[16:04:31.614]                   }
[16:04:31.614]                 }
[16:04:31.614]             }
[16:04:31.614]         }))
[16:04:31.614]     }, error = function(ex) {
[16:04:31.614]         base::structure(base::list(value = NULL, visible = NULL, 
[16:04:31.614]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:04:31.614]                 ...future.rng), started = ...future.startTime, 
[16:04:31.614]             finished = Sys.time(), session_uuid = NA_character_, 
[16:04:31.614]             version = "1.8"), class = "FutureResult")
[16:04:31.614]     }, finally = {
[16:04:31.614]         if (!identical(...future.workdir, getwd())) 
[16:04:31.614]             setwd(...future.workdir)
[16:04:31.614]         {
[16:04:31.614]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:04:31.614]                 ...future.oldOptions$nwarnings <- NULL
[16:04:31.614]             }
[16:04:31.614]             base::options(...future.oldOptions)
[16:04:31.614]             if (.Platform$OS.type == "windows") {
[16:04:31.614]                 old_names <- names(...future.oldEnvVars)
[16:04:31.614]                 envs <- base::Sys.getenv()
[16:04:31.614]                 names <- names(envs)
[16:04:31.614]                 common <- intersect(names, old_names)
[16:04:31.614]                 added <- setdiff(names, old_names)
[16:04:31.614]                 removed <- setdiff(old_names, names)
[16:04:31.614]                 changed <- common[...future.oldEnvVars[common] != 
[16:04:31.614]                   envs[common]]
[16:04:31.614]                 NAMES <- toupper(changed)
[16:04:31.614]                 args <- list()
[16:04:31.614]                 for (kk in seq_along(NAMES)) {
[16:04:31.614]                   name <- changed[[kk]]
[16:04:31.614]                   NAME <- NAMES[[kk]]
[16:04:31.614]                   if (name != NAME && is.element(NAME, old_names)) 
[16:04:31.614]                     next
[16:04:31.614]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:04:31.614]                 }
[16:04:31.614]                 NAMES <- toupper(added)
[16:04:31.614]                 for (kk in seq_along(NAMES)) {
[16:04:31.614]                   name <- added[[kk]]
[16:04:31.614]                   NAME <- NAMES[[kk]]
[16:04:31.614]                   if (name != NAME && is.element(NAME, old_names)) 
[16:04:31.614]                     next
[16:04:31.614]                   args[[name]] <- ""
[16:04:31.614]                 }
[16:04:31.614]                 NAMES <- toupper(removed)
[16:04:31.614]                 for (kk in seq_along(NAMES)) {
[16:04:31.614]                   name <- removed[[kk]]
[16:04:31.614]                   NAME <- NAMES[[kk]]
[16:04:31.614]                   if (name != NAME && is.element(NAME, old_names)) 
[16:04:31.614]                     next
[16:04:31.614]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:04:31.614]                 }
[16:04:31.614]                 if (length(args) > 0) 
[16:04:31.614]                   base::do.call(base::Sys.setenv, args = args)
[16:04:31.614]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:04:31.614]             }
[16:04:31.614]             else {
[16:04:31.614]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:04:31.614]             }
[16:04:31.614]             {
[16:04:31.614]                 if (base::length(...future.futureOptionsAdded) > 
[16:04:31.614]                   0L) {
[16:04:31.614]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:04:31.614]                   base::names(opts) <- ...future.futureOptionsAdded
[16:04:31.614]                   base::options(opts)
[16:04:31.614]                 }
[16:04:31.614]                 {
[16:04:31.614]                   {
[16:04:31.614]                     NULL
[16:04:31.614]                     RNGkind("Mersenne-Twister")
[16:04:31.614]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[16:04:31.614]                       inherits = FALSE)
[16:04:31.614]                   }
[16:04:31.614]                   options(future.plan = NULL)
[16:04:31.614]                   if (is.na(NA_character_)) 
[16:04:31.614]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:04:31.614]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:04:31.614]                   future::plan(list(function (..., envir = parent.frame()) 
[16:04:31.614]                   {
[16:04:31.614]                     future <- SequentialFuture(..., envir = envir)
[16:04:31.614]                     if (!future$lazy) 
[16:04:31.614]                       future <- run(future)
[16:04:31.614]                     invisible(future)
[16:04:31.614]                   }), .cleanup = FALSE, .init = FALSE)
[16:04:31.614]                 }
[16:04:31.614]             }
[16:04:31.614]         }
[16:04:31.614]     })
[16:04:31.614]     if (TRUE) {
[16:04:31.614]         base::sink(type = "output", split = FALSE)
[16:04:31.614]         if (TRUE) {
[16:04:31.614]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:04:31.614]         }
[16:04:31.614]         else {
[16:04:31.614]             ...future.result["stdout"] <- base::list(NULL)
[16:04:31.614]         }
[16:04:31.614]         base::close(...future.stdout)
[16:04:31.614]         ...future.stdout <- NULL
[16:04:31.614]     }
[16:04:31.614]     ...future.result$conditions <- ...future.conditions
[16:04:31.614]     ...future.result$finished <- base::Sys.time()
[16:04:31.614]     ...future.result
[16:04:31.614] }
[16:04:31.616] assign_globals() ...
[16:04:31.616] List of 1
[16:04:31.616]  $ ii: int 3
[16:04:31.616]  - attr(*, "where")=List of 1
[16:04:31.616]   ..$ ii:<environment: R_EmptyEnv> 
[16:04:31.616]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[16:04:31.616]  - attr(*, "resolved")= logi FALSE
[16:04:31.616]  - attr(*, "total_size")= num 56
[16:04:31.616]  - attr(*, "already-done")= logi TRUE
[16:04:31.619] - copied ‘ii’ to environment
[16:04:31.619] assign_globals() ... done
[16:04:31.619] plan(): Setting new future strategy stack:
[16:04:31.620] List of future strategies:
[16:04:31.620] 1. sequential:
[16:04:31.620]    - args: function (..., envir = parent.frame())
[16:04:31.620]    - tweaked: FALSE
[16:04:31.620]    - call: NULL
[16:04:31.620] plan(): nbrOfWorkers() = 1
[16:04:31.621] plan(): Setting new future strategy stack:
[16:04:31.621] List of future strategies:
[16:04:31.621] 1. sequential:
[16:04:31.621]    - args: function (..., envir = parent.frame())
[16:04:31.621]    - tweaked: FALSE
[16:04:31.621]    - call: plan(strategy)
[16:04:31.621] plan(): nbrOfWorkers() = 1
[16:04:31.621] SequentialFuture started (and completed)
[16:04:31.621] - Launch lazy future ... done
[16:04:31.621] run() for ‘SequentialFuture’ ... done
[16:04:31.622] signalConditions() ...
[16:04:31.622]  - include = ‘immediateCondition’
[16:04:31.622]  - exclude = 
[16:04:31.622]  - resignal = FALSE
[16:04:31.622]  - Number of conditions: 1
[16:04:31.622] signalConditions() ... done
[16:04:31.622] Future state: ‘finished’
[16:04:31.622] signalConditions() ...
[16:04:31.622]  - include = ‘condition’
[16:04:31.622]  - exclude = ‘immediateCondition’
[16:04:31.623]  - resignal = TRUE
[16:04:31.623]  - Number of conditions: 1
[16:04:31.623]  - Condition #1: ‘simpleError’, ‘error’, ‘condition’
[16:04:31.623] signalConditions() ... done
Warning in get(var, envir = x, inherits = FALSE) :
  restarting interrupted promise evaluation
[16:04:31.624] signalConditions() ...
[16:04:31.624]  - include = ‘immediateCondition’
[16:04:31.624]  - exclude = 
[16:04:31.624]  - resignal = FALSE
[16:04:31.624]  - Number of conditions: 1
[16:04:31.624] signalConditions() ... done
[16:04:31.625] Future state: ‘finished’
[16:04:31.625] signalConditions() ...
[16:04:31.625]  - include = ‘condition’
[16:04:31.625]  - exclude = ‘immediateCondition’
[16:04:31.625]  - resignal = TRUE
[16:04:31.625]  - Number of conditions: 1
[16:04:31.625]  - Condition #1: ‘simpleError’, ‘error’, ‘condition’
[16:04:31.625] signalConditions() ... done
Warning in get(var, envir = x, inherits = FALSE) :
  restarting interrupted promise evaluation
[16:04:31.626] signalConditions() ...
[16:04:31.626]  - include = ‘immediateCondition’
[16:04:31.626]  - exclude = 
[16:04:31.626]  - resignal = FALSE
[16:04:31.626]  - Number of conditions: 1
[16:04:31.626] signalConditions() ... done
[16:04:31.626] Future state: ‘finished’
[16:04:31.626] signalConditions() ...
[16:04:31.626]  - include = ‘condition’
[16:04:31.626]  - exclude = ‘immediateCondition’
[16:04:31.626]  - resignal = TRUE
[16:04:31.626]  - Number of conditions: 1
[16:04:31.627]  - Condition #1: ‘simpleError’, ‘error’, ‘condition’
[16:04:31.627] signalConditions() ... done
** Future evaluation with a poor-man's "progress bar"
[16:04:31.627] getGlobalsAndPackages() ...
[16:04:31.627] Searching for globals...
[16:04:31.629] - globals found: [4] ‘{’, ‘cat’, ‘for’, ‘:’
[16:04:31.629] Searching for globals ... DONE
[16:04:31.629] Resolving globals: FALSE
[16:04:31.629] 
[16:04:31.629] 
[16:04:31.630] getGlobalsAndPackages() ... DONE
[16:04:31.630] run() for ‘Future’ ...
[16:04:31.630] - state: ‘created’
[16:04:31.630] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[16:04:31.630] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[16:04:31.630] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[16:04:31.630]   - Field: ‘label’
[16:04:31.631]   - Field: ‘local’
[16:04:31.631]   - Field: ‘owner’
[16:04:31.631]   - Field: ‘envir’
[16:04:31.631]   - Field: ‘packages’
[16:04:31.631]   - Field: ‘gc’
[16:04:31.631]   - Field: ‘conditions’
[16:04:31.631]   - Field: ‘expr’
[16:04:31.631]   - Field: ‘uuid’
[16:04:31.631]   - Field: ‘seed’
[16:04:31.631]   - Field: ‘version’
[16:04:31.631]   - Field: ‘result’
[16:04:31.632]   - Field: ‘asynchronous’
[16:04:31.632]   - Field: ‘calls’
[16:04:31.632]   - Field: ‘globals’
[16:04:31.632]   - Field: ‘stdout’
[16:04:31.632]   - Field: ‘earlySignal’
[16:04:31.632]   - Field: ‘lazy’
[16:04:31.632]   - Field: ‘state’
[16:04:31.632] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[16:04:31.632] - Launch lazy future ...
[16:04:31.632] Packages needed by the future expression (n = 0): <none>
[16:04:31.632] Packages needed by future strategies (n = 0): <none>
[16:04:31.633] {
[16:04:31.633]     {
[16:04:31.633]         {
[16:04:31.633]             ...future.startTime <- base::Sys.time()
[16:04:31.633]             {
[16:04:31.633]                 {
[16:04:31.633]                   {
[16:04:31.633]                     base::local({
[16:04:31.633]                       has_future <- base::requireNamespace("future", 
[16:04:31.633]                         quietly = TRUE)
[16:04:31.633]                       if (has_future) {
[16:04:31.633]                         ns <- base::getNamespace("future")
[16:04:31.633]                         version <- ns[[".package"]][["version"]]
[16:04:31.633]                         if (is.null(version)) 
[16:04:31.633]                           version <- utils::packageVersion("future")
[16:04:31.633]                       }
[16:04:31.633]                       else {
[16:04:31.633]                         version <- NULL
[16:04:31.633]                       }
[16:04:31.633]                       if (!has_future || version < "1.8.0") {
[16:04:31.633]                         info <- base::c(r_version = base::gsub("R version ", 
[16:04:31.633]                           "", base::R.version$version.string), 
[16:04:31.633]                           platform = base::sprintf("%s (%s-bit)", 
[16:04:31.633]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:04:31.633]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[16:04:31.633]                             "release", "version")], collapse = " "), 
[16:04:31.633]                           hostname = base::Sys.info()[["nodename"]])
[16:04:31.633]                         info <- base::sprintf("%s: %s", base::names(info), 
[16:04:31.633]                           info)
[16:04:31.633]                         info <- base::paste(info, collapse = "; ")
[16:04:31.633]                         if (!has_future) {
[16:04:31.633]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:04:31.633]                             info)
[16:04:31.633]                         }
[16:04:31.633]                         else {
[16:04:31.633]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:04:31.633]                             info, version)
[16:04:31.633]                         }
[16:04:31.633]                         base::stop(msg)
[16:04:31.633]                       }
[16:04:31.633]                     })
[16:04:31.633]                   }
[16:04:31.633]                   options(future.plan = NULL)
[16:04:31.633]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:04:31.633]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:04:31.633]                 }
[16:04:31.633]                 ...future.workdir <- getwd()
[16:04:31.633]             }
[16:04:31.633]             ...future.oldOptions <- base::as.list(base::.Options)
[16:04:31.633]             ...future.oldEnvVars <- base::Sys.getenv()
[16:04:31.633]         }
[16:04:31.633]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:04:31.633]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:04:31.633]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:04:31.633]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:04:31.633]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:04:31.633]             future.stdout.windows.reencode = NULL, width = 80L)
[16:04:31.633]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:04:31.633]             base::names(...future.oldOptions))
[16:04:31.633]     }
[16:04:31.633]     if (FALSE) {
[16:04:31.633]     }
[16:04:31.633]     else {
[16:04:31.633]         if (TRUE) {
[16:04:31.633]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:04:31.633]                 open = "w")
[16:04:31.633]         }
[16:04:31.633]         else {
[16:04:31.633]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:04:31.633]                 windows = "NUL", "/dev/null"), open = "w")
[16:04:31.633]         }
[16:04:31.633]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:04:31.633]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:04:31.633]             base::sink(type = "output", split = FALSE)
[16:04:31.633]             base::close(...future.stdout)
[16:04:31.633]         }, add = TRUE)
[16:04:31.633]     }
[16:04:31.633]     ...future.frame <- base::sys.nframe()
[16:04:31.633]     ...future.conditions <- base::list()
[16:04:31.633]     ...future.rng <- base::globalenv()$.Random.seed
[16:04:31.633]     if (FALSE) {
[16:04:31.633]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:04:31.633]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:04:31.633]     }
[16:04:31.633]     ...future.result <- base::tryCatch({
[16:04:31.633]         base::withCallingHandlers({
[16:04:31.633]             ...future.value <- base::withVisible(base::local({
[16:04:31.633]                 cat("Processing: ")
[16:04:31.633]                 for (ii in 1:10) {
[16:04:31.633]                   cat(".")
[16:04:31.633]                 }
[16:04:31.633]                 cat(" [100%]\n")
[16:04:31.633]                 4
[16:04:31.633]             }))
[16:04:31.633]             future::FutureResult(value = ...future.value$value, 
[16:04:31.633]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:04:31.633]                   ...future.rng), globalenv = if (FALSE) 
[16:04:31.633]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:04:31.633]                     ...future.globalenv.names))
[16:04:31.633]                 else NULL, started = ...future.startTime, version = "1.8")
[16:04:31.633]         }, condition = base::local({
[16:04:31.633]             c <- base::c
[16:04:31.633]             inherits <- base::inherits
[16:04:31.633]             invokeRestart <- base::invokeRestart
[16:04:31.633]             length <- base::length
[16:04:31.633]             list <- base::list
[16:04:31.633]             seq.int <- base::seq.int
[16:04:31.633]             signalCondition <- base::signalCondition
[16:04:31.633]             sys.calls <- base::sys.calls
[16:04:31.633]             `[[` <- base::`[[`
[16:04:31.633]             `+` <- base::`+`
[16:04:31.633]             `<<-` <- base::`<<-`
[16:04:31.633]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:04:31.633]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:04:31.633]                   3L)]
[16:04:31.633]             }
[16:04:31.633]             function(cond) {
[16:04:31.633]                 is_error <- inherits(cond, "error")
[16:04:31.633]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:04:31.633]                   NULL)
[16:04:31.633]                 if (is_error) {
[16:04:31.633]                   sessionInformation <- function() {
[16:04:31.633]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:04:31.633]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:04:31.633]                       search = base::search(), system = base::Sys.info())
[16:04:31.633]                   }
[16:04:31.633]                   ...future.conditions[[length(...future.conditions) + 
[16:04:31.633]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:04:31.633]                     cond$call), session = sessionInformation(), 
[16:04:31.633]                     timestamp = base::Sys.time(), signaled = 0L)
[16:04:31.633]                   signalCondition(cond)
[16:04:31.633]                 }
[16:04:31.633]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:04:31.633]                 "immediateCondition"))) {
[16:04:31.633]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:04:31.633]                   ...future.conditions[[length(...future.conditions) + 
[16:04:31.633]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:04:31.633]                   if (TRUE && !signal) {
[16:04:31.633]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:04:31.633]                     {
[16:04:31.633]                       inherits <- base::inherits
[16:04:31.633]                       invokeRestart <- base::invokeRestart
[16:04:31.633]                       is.null <- base::is.null
[16:04:31.633]                       muffled <- FALSE
[16:04:31.633]                       if (inherits(cond, "message")) {
[16:04:31.633]                         muffled <- grepl(pattern, "muffleMessage")
[16:04:31.633]                         if (muffled) 
[16:04:31.633]                           invokeRestart("muffleMessage")
[16:04:31.633]                       }
[16:04:31.633]                       else if (inherits(cond, "warning")) {
[16:04:31.633]                         muffled <- grepl(pattern, "muffleWarning")
[16:04:31.633]                         if (muffled) 
[16:04:31.633]                           invokeRestart("muffleWarning")
[16:04:31.633]                       }
[16:04:31.633]                       else if (inherits(cond, "condition")) {
[16:04:31.633]                         if (!is.null(pattern)) {
[16:04:31.633]                           computeRestarts <- base::computeRestarts
[16:04:31.633]                           grepl <- base::grepl
[16:04:31.633]                           restarts <- computeRestarts(cond)
[16:04:31.633]                           for (restart in restarts) {
[16:04:31.633]                             name <- restart$name
[16:04:31.633]                             if (is.null(name)) 
[16:04:31.633]                               next
[16:04:31.633]                             if (!grepl(pattern, name)) 
[16:04:31.633]                               next
[16:04:31.633]                             invokeRestart(restart)
[16:04:31.633]                             muffled <- TRUE
[16:04:31.633]                             break
[16:04:31.633]                           }
[16:04:31.633]                         }
[16:04:31.633]                       }
[16:04:31.633]                       invisible(muffled)
[16:04:31.633]                     }
[16:04:31.633]                     muffleCondition(cond, pattern = "^muffle")
[16:04:31.633]                   }
[16:04:31.633]                 }
[16:04:31.633]                 else {
[16:04:31.633]                   if (TRUE) {
[16:04:31.633]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:04:31.633]                     {
[16:04:31.633]                       inherits <- base::inherits
[16:04:31.633]                       invokeRestart <- base::invokeRestart
[16:04:31.633]                       is.null <- base::is.null
[16:04:31.633]                       muffled <- FALSE
[16:04:31.633]                       if (inherits(cond, "message")) {
[16:04:31.633]                         muffled <- grepl(pattern, "muffleMessage")
[16:04:31.633]                         if (muffled) 
[16:04:31.633]                           invokeRestart("muffleMessage")
[16:04:31.633]                       }
[16:04:31.633]                       else if (inherits(cond, "warning")) {
[16:04:31.633]                         muffled <- grepl(pattern, "muffleWarning")
[16:04:31.633]                         if (muffled) 
[16:04:31.633]                           invokeRestart("muffleWarning")
[16:04:31.633]                       }
[16:04:31.633]                       else if (inherits(cond, "condition")) {
[16:04:31.633]                         if (!is.null(pattern)) {
[16:04:31.633]                           computeRestarts <- base::computeRestarts
[16:04:31.633]                           grepl <- base::grepl
[16:04:31.633]                           restarts <- computeRestarts(cond)
[16:04:31.633]                           for (restart in restarts) {
[16:04:31.633]                             name <- restart$name
[16:04:31.633]                             if (is.null(name)) 
[16:04:31.633]                               next
[16:04:31.633]                             if (!grepl(pattern, name)) 
[16:04:31.633]                               next
[16:04:31.633]                             invokeRestart(restart)
[16:04:31.633]                             muffled <- TRUE
[16:04:31.633]                             break
[16:04:31.633]                           }
[16:04:31.633]                         }
[16:04:31.633]                       }
[16:04:31.633]                       invisible(muffled)
[16:04:31.633]                     }
[16:04:31.633]                     muffleCondition(cond, pattern = "^muffle")
[16:04:31.633]                   }
[16:04:31.633]                 }
[16:04:31.633]             }
[16:04:31.633]         }))
[16:04:31.633]     }, error = function(ex) {
[16:04:31.633]         base::structure(base::list(value = NULL, visible = NULL, 
[16:04:31.633]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:04:31.633]                 ...future.rng), started = ...future.startTime, 
[16:04:31.633]             finished = Sys.time(), session_uuid = NA_character_, 
[16:04:31.633]             version = "1.8"), class = "FutureResult")
[16:04:31.633]     }, finally = {
[16:04:31.633]         if (!identical(...future.workdir, getwd())) 
[16:04:31.633]             setwd(...future.workdir)
[16:04:31.633]         {
[16:04:31.633]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:04:31.633]                 ...future.oldOptions$nwarnings <- NULL
[16:04:31.633]             }
[16:04:31.633]             base::options(...future.oldOptions)
[16:04:31.633]             if (.Platform$OS.type == "windows") {
[16:04:31.633]                 old_names <- names(...future.oldEnvVars)
[16:04:31.633]                 envs <- base::Sys.getenv()
[16:04:31.633]                 names <- names(envs)
[16:04:31.633]                 common <- intersect(names, old_names)
[16:04:31.633]                 added <- setdiff(names, old_names)
[16:04:31.633]                 removed <- setdiff(old_names, names)
[16:04:31.633]                 changed <- common[...future.oldEnvVars[common] != 
[16:04:31.633]                   envs[common]]
[16:04:31.633]                 NAMES <- toupper(changed)
[16:04:31.633]                 args <- list()
[16:04:31.633]                 for (kk in seq_along(NAMES)) {
[16:04:31.633]                   name <- changed[[kk]]
[16:04:31.633]                   NAME <- NAMES[[kk]]
[16:04:31.633]                   if (name != NAME && is.element(NAME, old_names)) 
[16:04:31.633]                     next
[16:04:31.633]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:04:31.633]                 }
[16:04:31.633]                 NAMES <- toupper(added)
[16:04:31.633]                 for (kk in seq_along(NAMES)) {
[16:04:31.633]                   name <- added[[kk]]
[16:04:31.633]                   NAME <- NAMES[[kk]]
[16:04:31.633]                   if (name != NAME && is.element(NAME, old_names)) 
[16:04:31.633]                     next
[16:04:31.633]                   args[[name]] <- ""
[16:04:31.633]                 }
[16:04:31.633]                 NAMES <- toupper(removed)
[16:04:31.633]                 for (kk in seq_along(NAMES)) {
[16:04:31.633]                   name <- removed[[kk]]
[16:04:31.633]                   NAME <- NAMES[[kk]]
[16:04:31.633]                   if (name != NAME && is.element(NAME, old_names)) 
[16:04:31.633]                     next
[16:04:31.633]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:04:31.633]                 }
[16:04:31.633]                 if (length(args) > 0) 
[16:04:31.633]                   base::do.call(base::Sys.setenv, args = args)
[16:04:31.633]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:04:31.633]             }
[16:04:31.633]             else {
[16:04:31.633]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:04:31.633]             }
[16:04:31.633]             {
[16:04:31.633]                 if (base::length(...future.futureOptionsAdded) > 
[16:04:31.633]                   0L) {
[16:04:31.633]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:04:31.633]                   base::names(opts) <- ...future.futureOptionsAdded
[16:04:31.633]                   base::options(opts)
[16:04:31.633]                 }
[16:04:31.633]                 {
[16:04:31.633]                   {
[16:04:31.633]                     NULL
[16:04:31.633]                     RNGkind("Mersenne-Twister")
[16:04:31.633]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[16:04:31.633]                       inherits = FALSE)
[16:04:31.633]                   }
[16:04:31.633]                   options(future.plan = NULL)
[16:04:31.633]                   if (is.na(NA_character_)) 
[16:04:31.633]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:04:31.633]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:04:31.633]                   future::plan(list(function (..., envir = parent.frame()) 
[16:04:31.633]                   {
[16:04:31.633]                     future <- SequentialFuture(..., envir = envir)
[16:04:31.633]                     if (!future$lazy) 
[16:04:31.633]                       future <- run(future)
[16:04:31.633]                     invisible(future)
[16:04:31.633]                   }), .cleanup = FALSE, .init = FALSE)
[16:04:31.633]                 }
[16:04:31.633]             }
[16:04:31.633]         }
[16:04:31.633]     })
[16:04:31.633]     if (TRUE) {
[16:04:31.633]         base::sink(type = "output", split = FALSE)
[16:04:31.633]         if (TRUE) {
[16:04:31.633]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:04:31.633]         }
[16:04:31.633]         else {
[16:04:31.633]             ...future.result["stdout"] <- base::list(NULL)
[16:04:31.633]         }
[16:04:31.633]         base::close(...future.stdout)
[16:04:31.633]         ...future.stdout <- NULL
[16:04:31.633]     }
[16:04:31.633]     ...future.result$conditions <- ...future.conditions
[16:04:31.633]     ...future.result$finished <- base::Sys.time()
[16:04:31.633]     ...future.result
[16:04:31.633] }
[16:04:31.635] plan(): Setting new future strategy stack:
[16:04:31.635] List of future strategies:
[16:04:31.635] 1. sequential:
[16:04:31.635]    - args: function (..., envir = parent.frame())
[16:04:31.635]    - tweaked: FALSE
[16:04:31.635]    - call: NULL
[16:04:31.635] plan(): nbrOfWorkers() = 1
[16:04:31.636] plan(): Setting new future strategy stack:
[16:04:31.636] List of future strategies:
[16:04:31.636] 1. sequential:
[16:04:31.636]    - args: function (..., envir = parent.frame())
[16:04:31.636]    - tweaked: FALSE
[16:04:31.636]    - call: plan(strategy)
[16:04:31.636] plan(): nbrOfWorkers() = 1
[16:04:31.636] SequentialFuture started (and completed)
[16:04:31.636] - Launch lazy future ... done
[16:04:31.636] run() for ‘SequentialFuture’ ... done
** Collecting results
v1 = 1
v2 = 2
Warning in sprintf(...) : restarting interrupted promise evaluation
[16:04:31.638] signalConditions() ...
[16:04:31.638]  - include = ‘immediateCondition’
[16:04:31.638]  - exclude = 
[16:04:31.638]  - resignal = FALSE
[16:04:31.638]  - Number of conditions: 1
[16:04:31.638] signalConditions() ... done
[16:04:31.638] Future state: ‘finished’
[16:04:31.638] signalConditions() ...
[16:04:31.638]  - include = ‘condition’
[16:04:31.638]  - exclude = ‘immediateCondition’
[16:04:31.639]  - resignal = TRUE
[16:04:31.639]  - Number of conditions: 1
[16:04:31.639]  - Condition #1: ‘simpleError’, ‘error’, ‘condition’
[16:04:31.639] signalConditions() ... done
v3: <simpleError> (as expect)
Processing: .......... [100%]
v4 = 4
** Left-to-right and right-to-left future assignments
[16:04:31.639] getGlobalsAndPackages() ...
[16:04:31.639] Searching for globals...
[16:04:31.640] 
[16:04:31.640] Searching for globals ... DONE
[16:04:31.640] - globals: [0] <none>
[16:04:31.640] getGlobalsAndPackages() ... DONE
[16:04:31.640] run() for ‘Future’ ...
[16:04:31.640] - state: ‘created’
[16:04:31.640] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[16:04:31.641] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[16:04:31.641] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[16:04:31.641]   - Field: ‘label’
[16:04:31.641]   - Field: ‘local’
[16:04:31.641]   - Field: ‘owner’
[16:04:31.641]   - Field: ‘envir’
[16:04:31.641]   - Field: ‘packages’
[16:04:31.641]   - Field: ‘gc’
[16:04:31.642]   - Field: ‘conditions’
[16:04:31.642]   - Field: ‘expr’
[16:04:31.642]   - Field: ‘uuid’
[16:04:31.642]   - Field: ‘seed’
[16:04:31.642]   - Field: ‘version’
[16:04:31.643]   - Field: ‘result’
[16:04:31.643]   - Field: ‘asynchronous’
[16:04:31.643]   - Field: ‘calls’
[16:04:31.643]   - Field: ‘globals’
[16:04:31.643]   - Field: ‘stdout’
[16:04:31.643]   - Field: ‘earlySignal’
[16:04:31.643]   - Field: ‘lazy’
[16:04:31.643]   - Field: ‘state’
[16:04:31.643] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[16:04:31.643] - Launch lazy future ...
[16:04:31.644] Packages needed by the future expression (n = 0): <none>
[16:04:31.644] Packages needed by future strategies (n = 0): <none>
[16:04:31.644] {
[16:04:31.644]     {
[16:04:31.644]         {
[16:04:31.644]             ...future.startTime <- base::Sys.time()
[16:04:31.644]             {
[16:04:31.644]                 {
[16:04:31.644]                   {
[16:04:31.644]                     base::local({
[16:04:31.644]                       has_future <- base::requireNamespace("future", 
[16:04:31.644]                         quietly = TRUE)
[16:04:31.644]                       if (has_future) {
[16:04:31.644]                         ns <- base::getNamespace("future")
[16:04:31.644]                         version <- ns[[".package"]][["version"]]
[16:04:31.644]                         if (is.null(version)) 
[16:04:31.644]                           version <- utils::packageVersion("future")
[16:04:31.644]                       }
[16:04:31.644]                       else {
[16:04:31.644]                         version <- NULL
[16:04:31.644]                       }
[16:04:31.644]                       if (!has_future || version < "1.8.0") {
[16:04:31.644]                         info <- base::c(r_version = base::gsub("R version ", 
[16:04:31.644]                           "", base::R.version$version.string), 
[16:04:31.644]                           platform = base::sprintf("%s (%s-bit)", 
[16:04:31.644]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:04:31.644]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[16:04:31.644]                             "release", "version")], collapse = " "), 
[16:04:31.644]                           hostname = base::Sys.info()[["nodename"]])
[16:04:31.644]                         info <- base::sprintf("%s: %s", base::names(info), 
[16:04:31.644]                           info)
[16:04:31.644]                         info <- base::paste(info, collapse = "; ")
[16:04:31.644]                         if (!has_future) {
[16:04:31.644]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:04:31.644]                             info)
[16:04:31.644]                         }
[16:04:31.644]                         else {
[16:04:31.644]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:04:31.644]                             info, version)
[16:04:31.644]                         }
[16:04:31.644]                         base::stop(msg)
[16:04:31.644]                       }
[16:04:31.644]                     })
[16:04:31.644]                   }
[16:04:31.644]                   options(future.plan = NULL)
[16:04:31.644]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:04:31.644]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:04:31.644]                 }
[16:04:31.644]                 ...future.workdir <- getwd()
[16:04:31.644]             }
[16:04:31.644]             ...future.oldOptions <- base::as.list(base::.Options)
[16:04:31.644]             ...future.oldEnvVars <- base::Sys.getenv()
[16:04:31.644]         }
[16:04:31.644]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:04:31.644]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:04:31.644]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:04:31.644]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:04:31.644]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:04:31.644]             future.stdout.windows.reencode = NULL, width = 80L)
[16:04:31.644]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:04:31.644]             base::names(...future.oldOptions))
[16:04:31.644]     }
[16:04:31.644]     if (FALSE) {
[16:04:31.644]     }
[16:04:31.644]     else {
[16:04:31.644]         if (TRUE) {
[16:04:31.644]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:04:31.644]                 open = "w")
[16:04:31.644]         }
[16:04:31.644]         else {
[16:04:31.644]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:04:31.644]                 windows = "NUL", "/dev/null"), open = "w")
[16:04:31.644]         }
[16:04:31.644]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:04:31.644]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:04:31.644]             base::sink(type = "output", split = FALSE)
[16:04:31.644]             base::close(...future.stdout)
[16:04:31.644]         }, add = TRUE)
[16:04:31.644]     }
[16:04:31.644]     ...future.frame <- base::sys.nframe()
[16:04:31.644]     ...future.conditions <- base::list()
[16:04:31.644]     ...future.rng <- base::globalenv()$.Random.seed
[16:04:31.644]     if (FALSE) {
[16:04:31.644]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:04:31.644]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:04:31.644]     }
[16:04:31.644]     ...future.result <- base::tryCatch({
[16:04:31.644]         base::withCallingHandlers({
[16:04:31.644]             ...future.value <- base::withVisible(base::local(1))
[16:04:31.644]             future::FutureResult(value = ...future.value$value, 
[16:04:31.644]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:04:31.644]                   ...future.rng), globalenv = if (FALSE) 
[16:04:31.644]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:04:31.644]                     ...future.globalenv.names))
[16:04:31.644]                 else NULL, started = ...future.startTime, version = "1.8")
[16:04:31.644]         }, condition = base::local({
[16:04:31.644]             c <- base::c
[16:04:31.644]             inherits <- base::inherits
[16:04:31.644]             invokeRestart <- base::invokeRestart
[16:04:31.644]             length <- base::length
[16:04:31.644]             list <- base::list
[16:04:31.644]             seq.int <- base::seq.int
[16:04:31.644]             signalCondition <- base::signalCondition
[16:04:31.644]             sys.calls <- base::sys.calls
[16:04:31.644]             `[[` <- base::`[[`
[16:04:31.644]             `+` <- base::`+`
[16:04:31.644]             `<<-` <- base::`<<-`
[16:04:31.644]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:04:31.644]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:04:31.644]                   3L)]
[16:04:31.644]             }
[16:04:31.644]             function(cond) {
[16:04:31.644]                 is_error <- inherits(cond, "error")
[16:04:31.644]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:04:31.644]                   NULL)
[16:04:31.644]                 if (is_error) {
[16:04:31.644]                   sessionInformation <- function() {
[16:04:31.644]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:04:31.644]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:04:31.644]                       search = base::search(), system = base::Sys.info())
[16:04:31.644]                   }
[16:04:31.644]                   ...future.conditions[[length(...future.conditions) + 
[16:04:31.644]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:04:31.644]                     cond$call), session = sessionInformation(), 
[16:04:31.644]                     timestamp = base::Sys.time(), signaled = 0L)
[16:04:31.644]                   signalCondition(cond)
[16:04:31.644]                 }
[16:04:31.644]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:04:31.644]                 "immediateCondition"))) {
[16:04:31.644]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:04:31.644]                   ...future.conditions[[length(...future.conditions) + 
[16:04:31.644]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:04:31.644]                   if (TRUE && !signal) {
[16:04:31.644]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:04:31.644]                     {
[16:04:31.644]                       inherits <- base::inherits
[16:04:31.644]                       invokeRestart <- base::invokeRestart
[16:04:31.644]                       is.null <- base::is.null
[16:04:31.644]                       muffled <- FALSE
[16:04:31.644]                       if (inherits(cond, "message")) {
[16:04:31.644]                         muffled <- grepl(pattern, "muffleMessage")
[16:04:31.644]                         if (muffled) 
[16:04:31.644]                           invokeRestart("muffleMessage")
[16:04:31.644]                       }
[16:04:31.644]                       else if (inherits(cond, "warning")) {
[16:04:31.644]                         muffled <- grepl(pattern, "muffleWarning")
[16:04:31.644]                         if (muffled) 
[16:04:31.644]                           invokeRestart("muffleWarning")
[16:04:31.644]                       }
[16:04:31.644]                       else if (inherits(cond, "condition")) {
[16:04:31.644]                         if (!is.null(pattern)) {
[16:04:31.644]                           computeRestarts <- base::computeRestarts
[16:04:31.644]                           grepl <- base::grepl
[16:04:31.644]                           restarts <- computeRestarts(cond)
[16:04:31.644]                           for (restart in restarts) {
[16:04:31.644]                             name <- restart$name
[16:04:31.644]                             if (is.null(name)) 
[16:04:31.644]                               next
[16:04:31.644]                             if (!grepl(pattern, name)) 
[16:04:31.644]                               next
[16:04:31.644]                             invokeRestart(restart)
[16:04:31.644]                             muffled <- TRUE
[16:04:31.644]                             break
[16:04:31.644]                           }
[16:04:31.644]                         }
[16:04:31.644]                       }
[16:04:31.644]                       invisible(muffled)
[16:04:31.644]                     }
[16:04:31.644]                     muffleCondition(cond, pattern = "^muffle")
[16:04:31.644]                   }
[16:04:31.644]                 }
[16:04:31.644]                 else {
[16:04:31.644]                   if (TRUE) {
[16:04:31.644]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:04:31.644]                     {
[16:04:31.644]                       inherits <- base::inherits
[16:04:31.644]                       invokeRestart <- base::invokeRestart
[16:04:31.644]                       is.null <- base::is.null
[16:04:31.644]                       muffled <- FALSE
[16:04:31.644]                       if (inherits(cond, "message")) {
[16:04:31.644]                         muffled <- grepl(pattern, "muffleMessage")
[16:04:31.644]                         if (muffled) 
[16:04:31.644]                           invokeRestart("muffleMessage")
[16:04:31.644]                       }
[16:04:31.644]                       else if (inherits(cond, "warning")) {
[16:04:31.644]                         muffled <- grepl(pattern, "muffleWarning")
[16:04:31.644]                         if (muffled) 
[16:04:31.644]                           invokeRestart("muffleWarning")
[16:04:31.644]                       }
[16:04:31.644]                       else if (inherits(cond, "condition")) {
[16:04:31.644]                         if (!is.null(pattern)) {
[16:04:31.644]                           computeRestarts <- base::computeRestarts
[16:04:31.644]                           grepl <- base::grepl
[16:04:31.644]                           restarts <- computeRestarts(cond)
[16:04:31.644]                           for (restart in restarts) {
[16:04:31.644]                             name <- restart$name
[16:04:31.644]                             if (is.null(name)) 
[16:04:31.644]                               next
[16:04:31.644]                             if (!grepl(pattern, name)) 
[16:04:31.644]                               next
[16:04:31.644]                             invokeRestart(restart)
[16:04:31.644]                             muffled <- TRUE
[16:04:31.644]                             break
[16:04:31.644]                           }
[16:04:31.644]                         }
[16:04:31.644]                       }
[16:04:31.644]                       invisible(muffled)
[16:04:31.644]                     }
[16:04:31.644]                     muffleCondition(cond, pattern = "^muffle")
[16:04:31.644]                   }
[16:04:31.644]                 }
[16:04:31.644]             }
[16:04:31.644]         }))
[16:04:31.644]     }, error = function(ex) {
[16:04:31.644]         base::structure(base::list(value = NULL, visible = NULL, 
[16:04:31.644]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:04:31.644]                 ...future.rng), started = ...future.startTime, 
[16:04:31.644]             finished = Sys.time(), session_uuid = NA_character_, 
[16:04:31.644]             version = "1.8"), class = "FutureResult")
[16:04:31.644]     }, finally = {
[16:04:31.644]         if (!identical(...future.workdir, getwd())) 
[16:04:31.644]             setwd(...future.workdir)
[16:04:31.644]         {
[16:04:31.644]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:04:31.644]                 ...future.oldOptions$nwarnings <- NULL
[16:04:31.644]             }
[16:04:31.644]             base::options(...future.oldOptions)
[16:04:31.644]             if (.Platform$OS.type == "windows") {
[16:04:31.644]                 old_names <- names(...future.oldEnvVars)
[16:04:31.644]                 envs <- base::Sys.getenv()
[16:04:31.644]                 names <- names(envs)
[16:04:31.644]                 common <- intersect(names, old_names)
[16:04:31.644]                 added <- setdiff(names, old_names)
[16:04:31.644]                 removed <- setdiff(old_names, names)
[16:04:31.644]                 changed <- common[...future.oldEnvVars[common] != 
[16:04:31.644]                   envs[common]]
[16:04:31.644]                 NAMES <- toupper(changed)
[16:04:31.644]                 args <- list()
[16:04:31.644]                 for (kk in seq_along(NAMES)) {
[16:04:31.644]                   name <- changed[[kk]]
[16:04:31.644]                   NAME <- NAMES[[kk]]
[16:04:31.644]                   if (name != NAME && is.element(NAME, old_names)) 
[16:04:31.644]                     next
[16:04:31.644]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:04:31.644]                 }
[16:04:31.644]                 NAMES <- toupper(added)
[16:04:31.644]                 for (kk in seq_along(NAMES)) {
[16:04:31.644]                   name <- added[[kk]]
[16:04:31.644]                   NAME <- NAMES[[kk]]
[16:04:31.644]                   if (name != NAME && is.element(NAME, old_names)) 
[16:04:31.644]                     next
[16:04:31.644]                   args[[name]] <- ""
[16:04:31.644]                 }
[16:04:31.644]                 NAMES <- toupper(removed)
[16:04:31.644]                 for (kk in seq_along(NAMES)) {
[16:04:31.644]                   name <- removed[[kk]]
[16:04:31.644]                   NAME <- NAMES[[kk]]
[16:04:31.644]                   if (name != NAME && is.element(NAME, old_names)) 
[16:04:31.644]                     next
[16:04:31.644]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:04:31.644]                 }
[16:04:31.644]                 if (length(args) > 0) 
[16:04:31.644]                   base::do.call(base::Sys.setenv, args = args)
[16:04:31.644]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:04:31.644]             }
[16:04:31.644]             else {
[16:04:31.644]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:04:31.644]             }
[16:04:31.644]             {
[16:04:31.644]                 if (base::length(...future.futureOptionsAdded) > 
[16:04:31.644]                   0L) {
[16:04:31.644]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:04:31.644]                   base::names(opts) <- ...future.futureOptionsAdded
[16:04:31.644]                   base::options(opts)
[16:04:31.644]                 }
[16:04:31.644]                 {
[16:04:31.644]                   {
[16:04:31.644]                     NULL
[16:04:31.644]                     RNGkind("Mersenne-Twister")
[16:04:31.644]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[16:04:31.644]                       inherits = FALSE)
[16:04:31.644]                   }
[16:04:31.644]                   options(future.plan = NULL)
[16:04:31.644]                   if (is.na(NA_character_)) 
[16:04:31.644]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:04:31.644]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:04:31.644]                   future::plan(list(function (..., envir = parent.frame()) 
[16:04:31.644]                   {
[16:04:31.644]                     future <- SequentialFuture(..., envir = envir)
[16:04:31.644]                     if (!future$lazy) 
[16:04:31.644]                       future <- run(future)
[16:04:31.644]                     invisible(future)
[16:04:31.644]                   }), .cleanup = FALSE, .init = FALSE)
[16:04:31.644]                 }
[16:04:31.644]             }
[16:04:31.644]         }
[16:04:31.644]     })
[16:04:31.644]     if (TRUE) {
[16:04:31.644]         base::sink(type = "output", split = FALSE)
[16:04:31.644]         if (TRUE) {
[16:04:31.644]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:04:31.644]         }
[16:04:31.644]         else {
[16:04:31.644]             ...future.result["stdout"] <- base::list(NULL)
[16:04:31.644]         }
[16:04:31.644]         base::close(...future.stdout)
[16:04:31.644]         ...future.stdout <- NULL
[16:04:31.644]     }
[16:04:31.644]     ...future.result$conditions <- ...future.conditions
[16:04:31.644]     ...future.result$finished <- base::Sys.time()
[16:04:31.644]     ...future.result
[16:04:31.644] }
[16:04:31.646] plan(): Setting new future strategy stack:
[16:04:31.646] List of future strategies:
[16:04:31.646] 1. sequential:
[16:04:31.646]    - args: function (..., envir = parent.frame())
[16:04:31.646]    - tweaked: FALSE
[16:04:31.646]    - call: NULL
[16:04:31.646] plan(): nbrOfWorkers() = 1
[16:04:31.647] plan(): Setting new future strategy stack:
[16:04:31.647] List of future strategies:
[16:04:31.647] 1. sequential:
[16:04:31.647]    - args: function (..., envir = parent.frame())
[16:04:31.647]    - tweaked: FALSE
[16:04:31.647]    - call: plan(strategy)
[16:04:31.647] plan(): nbrOfWorkers() = 1
[16:04:31.647] SequentialFuture started (and completed)
[16:04:31.647] - Launch lazy future ... done
[16:04:31.648] run() for ‘SequentialFuture’ ... done
c = 1
[16:04:31.648] getGlobalsAndPackages() ...
[16:04:31.648] Searching for globals...
[16:04:31.648] 
[16:04:31.648] Searching for globals ... DONE
[16:04:31.648] - globals: [0] <none>
[16:04:31.648] getGlobalsAndPackages() ... DONE
[16:04:31.649] run() for ‘Future’ ...
[16:04:31.649] - state: ‘created’
[16:04:31.649] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[16:04:31.649] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[16:04:31.649] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[16:04:31.649]   - Field: ‘label’
[16:04:31.649]   - Field: ‘local’
[16:04:31.650]   - Field: ‘owner’
[16:04:31.650]   - Field: ‘envir’
[16:04:31.650]   - Field: ‘packages’
[16:04:31.650]   - Field: ‘gc’
[16:04:31.650]   - Field: ‘conditions’
[16:04:31.650]   - Field: ‘expr’
[16:04:31.650]   - Field: ‘uuid’
[16:04:31.650]   - Field: ‘seed’
[16:04:31.650]   - Field: ‘version’
[16:04:31.650]   - Field: ‘result’
[16:04:31.650]   - Field: ‘asynchronous’
[16:04:31.650]   - Field: ‘calls’
[16:04:31.651]   - Field: ‘globals’
[16:04:31.651]   - Field: ‘stdout’
[16:04:31.651]   - Field: ‘earlySignal’
[16:04:31.651]   - Field: ‘lazy’
[16:04:31.651]   - Field: ‘state’
[16:04:31.651] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[16:04:31.651] - Launch lazy future ...
[16:04:31.651] Packages needed by the future expression (n = 0): <none>
[16:04:31.651] Packages needed by future strategies (n = 0): <none>
[16:04:31.652] {
[16:04:31.652]     {
[16:04:31.652]         {
[16:04:31.652]             ...future.startTime <- base::Sys.time()
[16:04:31.652]             {
[16:04:31.652]                 {
[16:04:31.652]                   {
[16:04:31.652]                     base::local({
[16:04:31.652]                       has_future <- base::requireNamespace("future", 
[16:04:31.652]                         quietly = TRUE)
[16:04:31.652]                       if (has_future) {
[16:04:31.652]                         ns <- base::getNamespace("future")
[16:04:31.652]                         version <- ns[[".package"]][["version"]]
[16:04:31.652]                         if (is.null(version)) 
[16:04:31.652]                           version <- utils::packageVersion("future")
[16:04:31.652]                       }
[16:04:31.652]                       else {
[16:04:31.652]                         version <- NULL
[16:04:31.652]                       }
[16:04:31.652]                       if (!has_future || version < "1.8.0") {
[16:04:31.652]                         info <- base::c(r_version = base::gsub("R version ", 
[16:04:31.652]                           "", base::R.version$version.string), 
[16:04:31.652]                           platform = base::sprintf("%s (%s-bit)", 
[16:04:31.652]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:04:31.652]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[16:04:31.652]                             "release", "version")], collapse = " "), 
[16:04:31.652]                           hostname = base::Sys.info()[["nodename"]])
[16:04:31.652]                         info <- base::sprintf("%s: %s", base::names(info), 
[16:04:31.652]                           info)
[16:04:31.652]                         info <- base::paste(info, collapse = "; ")
[16:04:31.652]                         if (!has_future) {
[16:04:31.652]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:04:31.652]                             info)
[16:04:31.652]                         }
[16:04:31.652]                         else {
[16:04:31.652]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:04:31.652]                             info, version)
[16:04:31.652]                         }
[16:04:31.652]                         base::stop(msg)
[16:04:31.652]                       }
[16:04:31.652]                     })
[16:04:31.652]                   }
[16:04:31.652]                   options(future.plan = NULL)
[16:04:31.652]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:04:31.652]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:04:31.652]                 }
[16:04:31.652]                 ...future.workdir <- getwd()
[16:04:31.652]             }
[16:04:31.652]             ...future.oldOptions <- base::as.list(base::.Options)
[16:04:31.652]             ...future.oldEnvVars <- base::Sys.getenv()
[16:04:31.652]         }
[16:04:31.652]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:04:31.652]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:04:31.652]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:04:31.652]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:04:31.652]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:04:31.652]             future.stdout.windows.reencode = NULL, width = 80L)
[16:04:31.652]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:04:31.652]             base::names(...future.oldOptions))
[16:04:31.652]     }
[16:04:31.652]     if (FALSE) {
[16:04:31.652]     }
[16:04:31.652]     else {
[16:04:31.652]         if (TRUE) {
[16:04:31.652]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:04:31.652]                 open = "w")
[16:04:31.652]         }
[16:04:31.652]         else {
[16:04:31.652]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:04:31.652]                 windows = "NUL", "/dev/null"), open = "w")
[16:04:31.652]         }
[16:04:31.652]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:04:31.652]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:04:31.652]             base::sink(type = "output", split = FALSE)
[16:04:31.652]             base::close(...future.stdout)
[16:04:31.652]         }, add = TRUE)
[16:04:31.652]     }
[16:04:31.652]     ...future.frame <- base::sys.nframe()
[16:04:31.652]     ...future.conditions <- base::list()
[16:04:31.652]     ...future.rng <- base::globalenv()$.Random.seed
[16:04:31.652]     if (FALSE) {
[16:04:31.652]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:04:31.652]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:04:31.652]     }
[16:04:31.652]     ...future.result <- base::tryCatch({
[16:04:31.652]         base::withCallingHandlers({
[16:04:31.652]             ...future.value <- base::withVisible(base::local(1))
[16:04:31.652]             future::FutureResult(value = ...future.value$value, 
[16:04:31.652]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:04:31.652]                   ...future.rng), globalenv = if (FALSE) 
[16:04:31.652]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:04:31.652]                     ...future.globalenv.names))
[16:04:31.652]                 else NULL, started = ...future.startTime, version = "1.8")
[16:04:31.652]         }, condition = base::local({
[16:04:31.652]             c <- base::c
[16:04:31.652]             inherits <- base::inherits
[16:04:31.652]             invokeRestart <- base::invokeRestart
[16:04:31.652]             length <- base::length
[16:04:31.652]             list <- base::list
[16:04:31.652]             seq.int <- base::seq.int
[16:04:31.652]             signalCondition <- base::signalCondition
[16:04:31.652]             sys.calls <- base::sys.calls
[16:04:31.652]             `[[` <- base::`[[`
[16:04:31.652]             `+` <- base::`+`
[16:04:31.652]             `<<-` <- base::`<<-`
[16:04:31.652]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:04:31.652]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:04:31.652]                   3L)]
[16:04:31.652]             }
[16:04:31.652]             function(cond) {
[16:04:31.652]                 is_error <- inherits(cond, "error")
[16:04:31.652]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:04:31.652]                   NULL)
[16:04:31.652]                 if (is_error) {
[16:04:31.652]                   sessionInformation <- function() {
[16:04:31.652]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:04:31.652]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:04:31.652]                       search = base::search(), system = base::Sys.info())
[16:04:31.652]                   }
[16:04:31.652]                   ...future.conditions[[length(...future.conditions) + 
[16:04:31.652]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:04:31.652]                     cond$call), session = sessionInformation(), 
[16:04:31.652]                     timestamp = base::Sys.time(), signaled = 0L)
[16:04:31.652]                   signalCondition(cond)
[16:04:31.652]                 }
[16:04:31.652]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:04:31.652]                 "immediateCondition"))) {
[16:04:31.652]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:04:31.652]                   ...future.conditions[[length(...future.conditions) + 
[16:04:31.652]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:04:31.652]                   if (TRUE && !signal) {
[16:04:31.652]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:04:31.652]                     {
[16:04:31.652]                       inherits <- base::inherits
[16:04:31.652]                       invokeRestart <- base::invokeRestart
[16:04:31.652]                       is.null <- base::is.null
[16:04:31.652]                       muffled <- FALSE
[16:04:31.652]                       if (inherits(cond, "message")) {
[16:04:31.652]                         muffled <- grepl(pattern, "muffleMessage")
[16:04:31.652]                         if (muffled) 
[16:04:31.652]                           invokeRestart("muffleMessage")
[16:04:31.652]                       }
[16:04:31.652]                       else if (inherits(cond, "warning")) {
[16:04:31.652]                         muffled <- grepl(pattern, "muffleWarning")
[16:04:31.652]                         if (muffled) 
[16:04:31.652]                           invokeRestart("muffleWarning")
[16:04:31.652]                       }
[16:04:31.652]                       else if (inherits(cond, "condition")) {
[16:04:31.652]                         if (!is.null(pattern)) {
[16:04:31.652]                           computeRestarts <- base::computeRestarts
[16:04:31.652]                           grepl <- base::grepl
[16:04:31.652]                           restarts <- computeRestarts(cond)
[16:04:31.652]                           for (restart in restarts) {
[16:04:31.652]                             name <- restart$name
[16:04:31.652]                             if (is.null(name)) 
[16:04:31.652]                               next
[16:04:31.652]                             if (!grepl(pattern, name)) 
[16:04:31.652]                               next
[16:04:31.652]                             invokeRestart(restart)
[16:04:31.652]                             muffled <- TRUE
[16:04:31.652]                             break
[16:04:31.652]                           }
[16:04:31.652]                         }
[16:04:31.652]                       }
[16:04:31.652]                       invisible(muffled)
[16:04:31.652]                     }
[16:04:31.652]                     muffleCondition(cond, pattern = "^muffle")
[16:04:31.652]                   }
[16:04:31.652]                 }
[16:04:31.652]                 else {
[16:04:31.652]                   if (TRUE) {
[16:04:31.652]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:04:31.652]                     {
[16:04:31.652]                       inherits <- base::inherits
[16:04:31.652]                       invokeRestart <- base::invokeRestart
[16:04:31.652]                       is.null <- base::is.null
[16:04:31.652]                       muffled <- FALSE
[16:04:31.652]                       if (inherits(cond, "message")) {
[16:04:31.652]                         muffled <- grepl(pattern, "muffleMessage")
[16:04:31.652]                         if (muffled) 
[16:04:31.652]                           invokeRestart("muffleMessage")
[16:04:31.652]                       }
[16:04:31.652]                       else if (inherits(cond, "warning")) {
[16:04:31.652]                         muffled <- grepl(pattern, "muffleWarning")
[16:04:31.652]                         if (muffled) 
[16:04:31.652]                           invokeRestart("muffleWarning")
[16:04:31.652]                       }
[16:04:31.652]                       else if (inherits(cond, "condition")) {
[16:04:31.652]                         if (!is.null(pattern)) {
[16:04:31.652]                           computeRestarts <- base::computeRestarts
[16:04:31.652]                           grepl <- base::grepl
[16:04:31.652]                           restarts <- computeRestarts(cond)
[16:04:31.652]                           for (restart in restarts) {
[16:04:31.652]                             name <- restart$name
[16:04:31.652]                             if (is.null(name)) 
[16:04:31.652]                               next
[16:04:31.652]                             if (!grepl(pattern, name)) 
[16:04:31.652]                               next
[16:04:31.652]                             invokeRestart(restart)
[16:04:31.652]                             muffled <- TRUE
[16:04:31.652]                             break
[16:04:31.652]                           }
[16:04:31.652]                         }
[16:04:31.652]                       }
[16:04:31.652]                       invisible(muffled)
[16:04:31.652]                     }
[16:04:31.652]                     muffleCondition(cond, pattern = "^muffle")
[16:04:31.652]                   }
[16:04:31.652]                 }
[16:04:31.652]             }
[16:04:31.652]         }))
[16:04:31.652]     }, error = function(ex) {
[16:04:31.652]         base::structure(base::list(value = NULL, visible = NULL, 
[16:04:31.652]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:04:31.652]                 ...future.rng), started = ...future.startTime, 
[16:04:31.652]             finished = Sys.time(), session_uuid = NA_character_, 
[16:04:31.652]             version = "1.8"), class = "FutureResult")
[16:04:31.652]     }, finally = {
[16:04:31.652]         if (!identical(...future.workdir, getwd())) 
[16:04:31.652]             setwd(...future.workdir)
[16:04:31.652]         {
[16:04:31.652]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:04:31.652]                 ...future.oldOptions$nwarnings <- NULL
[16:04:31.652]             }
[16:04:31.652]             base::options(...future.oldOptions)
[16:04:31.652]             if (.Platform$OS.type == "windows") {
[16:04:31.652]                 old_names <- names(...future.oldEnvVars)
[16:04:31.652]                 envs <- base::Sys.getenv()
[16:04:31.652]                 names <- names(envs)
[16:04:31.652]                 common <- intersect(names, old_names)
[16:04:31.652]                 added <- setdiff(names, old_names)
[16:04:31.652]                 removed <- setdiff(old_names, names)
[16:04:31.652]                 changed <- common[...future.oldEnvVars[common] != 
[16:04:31.652]                   envs[common]]
[16:04:31.652]                 NAMES <- toupper(changed)
[16:04:31.652]                 args <- list()
[16:04:31.652]                 for (kk in seq_along(NAMES)) {
[16:04:31.652]                   name <- changed[[kk]]
[16:04:31.652]                   NAME <- NAMES[[kk]]
[16:04:31.652]                   if (name != NAME && is.element(NAME, old_names)) 
[16:04:31.652]                     next
[16:04:31.652]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:04:31.652]                 }
[16:04:31.652]                 NAMES <- toupper(added)
[16:04:31.652]                 for (kk in seq_along(NAMES)) {
[16:04:31.652]                   name <- added[[kk]]
[16:04:31.652]                   NAME <- NAMES[[kk]]
[16:04:31.652]                   if (name != NAME && is.element(NAME, old_names)) 
[16:04:31.652]                     next
[16:04:31.652]                   args[[name]] <- ""
[16:04:31.652]                 }
[16:04:31.652]                 NAMES <- toupper(removed)
[16:04:31.652]                 for (kk in seq_along(NAMES)) {
[16:04:31.652]                   name <- removed[[kk]]
[16:04:31.652]                   NAME <- NAMES[[kk]]
[16:04:31.652]                   if (name != NAME && is.element(NAME, old_names)) 
[16:04:31.652]                     next
[16:04:31.652]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:04:31.652]                 }
[16:04:31.652]                 if (length(args) > 0) 
[16:04:31.652]                   base::do.call(base::Sys.setenv, args = args)
[16:04:31.652]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:04:31.652]             }
[16:04:31.652]             else {
[16:04:31.652]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:04:31.652]             }
[16:04:31.652]             {
[16:04:31.652]                 if (base::length(...future.futureOptionsAdded) > 
[16:04:31.652]                   0L) {
[16:04:31.652]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:04:31.652]                   base::names(opts) <- ...future.futureOptionsAdded
[16:04:31.652]                   base::options(opts)
[16:04:31.652]                 }
[16:04:31.652]                 {
[16:04:31.652]                   {
[16:04:31.652]                     NULL
[16:04:31.652]                     RNGkind("Mersenne-Twister")
[16:04:31.652]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[16:04:31.652]                       inherits = FALSE)
[16:04:31.652]                   }
[16:04:31.652]                   options(future.plan = NULL)
[16:04:31.652]                   if (is.na(NA_character_)) 
[16:04:31.652]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:04:31.652]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:04:31.652]                   future::plan(list(function (..., envir = parent.frame()) 
[16:04:31.652]                   {
[16:04:31.652]                     future <- SequentialFuture(..., envir = envir)
[16:04:31.652]                     if (!future$lazy) 
[16:04:31.652]                       future <- run(future)
[16:04:31.652]                     invisible(future)
[16:04:31.652]                   }), .cleanup = FALSE, .init = FALSE)
[16:04:31.652]                 }
[16:04:31.652]             }
[16:04:31.652]         }
[16:04:31.652]     })
[16:04:31.652]     if (TRUE) {
[16:04:31.652]         base::sink(type = "output", split = FALSE)
[16:04:31.652]         if (TRUE) {
[16:04:31.652]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:04:31.652]         }
[16:04:31.652]         else {
[16:04:31.652]             ...future.result["stdout"] <- base::list(NULL)
[16:04:31.652]         }
[16:04:31.652]         base::close(...future.stdout)
[16:04:31.652]         ...future.stdout <- NULL
[16:04:31.652]     }
[16:04:31.652]     ...future.result$conditions <- ...future.conditions
[16:04:31.652]     ...future.result$finished <- base::Sys.time()
[16:04:31.652]     ...future.result
[16:04:31.652] }
[16:04:31.653] plan(): Setting new future strategy stack:
[16:04:31.653] List of future strategies:
[16:04:31.653] 1. sequential:
[16:04:31.653]    - args: function (..., envir = parent.frame())
[16:04:31.653]    - tweaked: FALSE
[16:04:31.653]    - call: NULL
[16:04:31.654] plan(): nbrOfWorkers() = 1
[16:04:31.654] plan(): Setting new future strategy stack:
[16:04:31.655] List of future strategies:
[16:04:31.655] 1. sequential:
[16:04:31.655]    - args: function (..., envir = parent.frame())
[16:04:31.655]    - tweaked: FALSE
[16:04:31.655]    - call: plan(strategy)
[16:04:31.655] plan(): nbrOfWorkers() = 1
[16:04:31.655] SequentialFuture started (and completed)
[16:04:31.655] - Launch lazy future ... done
[16:04:31.655] run() for ‘SequentialFuture’ ... done
d = 1
** Nested future assignments
[16:04:31.656] getGlobalsAndPackages() ...
[16:04:31.656] Searching for globals...
[16:04:31.659] - globals found: [5] ‘{’, ‘<-’, ‘%<-%’, ‘%->%’, ‘+’
[16:04:31.659] Searching for globals ... DONE
[16:04:31.659] Resolving globals: FALSE
[16:04:31.659] 
[16:04:31.660] - packages: [1] ‘future’
[16:04:31.660] getGlobalsAndPackages() ... DONE
[16:04:31.660] run() for ‘Future’ ...
[16:04:31.660] - state: ‘created’
[16:04:31.660] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[16:04:31.660] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[16:04:31.660] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[16:04:31.661]   - Field: ‘label’
[16:04:31.661]   - Field: ‘local’
[16:04:31.661]   - Field: ‘owner’
[16:04:31.661]   - Field: ‘envir’
[16:04:31.661]   - Field: ‘packages’
[16:04:31.661]   - Field: ‘gc’
[16:04:31.661]   - Field: ‘conditions’
[16:04:31.661]   - Field: ‘expr’
[16:04:31.661]   - Field: ‘uuid’
[16:04:31.661]   - Field: ‘seed’
[16:04:31.661]   - Field: ‘version’
[16:04:31.662]   - Field: ‘result’
[16:04:31.662]   - Field: ‘asynchronous’
[16:04:31.662]   - Field: ‘calls’
[16:04:31.662]   - Field: ‘globals’
[16:04:31.662]   - Field: ‘stdout’
[16:04:31.662]   - Field: ‘earlySignal’
[16:04:31.662]   - Field: ‘lazy’
[16:04:31.662]   - Field: ‘state’
[16:04:31.662] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[16:04:31.662] - Launch lazy future ...
[16:04:31.662] Packages needed by the future expression (n = 1): ‘future’
[16:04:31.663] Packages needed by future strategies (n = 0): <none>
[16:04:31.663] {
[16:04:31.663]     {
[16:04:31.663]         {
[16:04:31.663]             ...future.startTime <- base::Sys.time()
[16:04:31.663]             {
[16:04:31.663]                 {
[16:04:31.663]                   {
[16:04:31.663]                     {
[16:04:31.663]                       base::local({
[16:04:31.663]                         has_future <- base::requireNamespace("future", 
[16:04:31.663]                           quietly = TRUE)
[16:04:31.663]                         if (has_future) {
[16:04:31.663]                           ns <- base::getNamespace("future")
[16:04:31.663]                           version <- ns[[".package"]][["version"]]
[16:04:31.663]                           if (is.null(version)) 
[16:04:31.663]                             version <- utils::packageVersion("future")
[16:04:31.663]                         }
[16:04:31.663]                         else {
[16:04:31.663]                           version <- NULL
[16:04:31.663]                         }
[16:04:31.663]                         if (!has_future || version < "1.8.0") {
[16:04:31.663]                           info <- base::c(r_version = base::gsub("R version ", 
[16:04:31.663]                             "", base::R.version$version.string), 
[16:04:31.663]                             platform = base::sprintf("%s (%s-bit)", 
[16:04:31.663]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:04:31.663]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[16:04:31.663]                               "release", "version")], collapse = " "), 
[16:04:31.663]                             hostname = base::Sys.info()[["nodename"]])
[16:04:31.663]                           info <- base::sprintf("%s: %s", base::names(info), 
[16:04:31.663]                             info)
[16:04:31.663]                           info <- base::paste(info, collapse = "; ")
[16:04:31.663]                           if (!has_future) {
[16:04:31.663]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:04:31.663]                               info)
[16:04:31.663]                           }
[16:04:31.663]                           else {
[16:04:31.663]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:04:31.663]                               info, version)
[16:04:31.663]                           }
[16:04:31.663]                           base::stop(msg)
[16:04:31.663]                         }
[16:04:31.663]                       })
[16:04:31.663]                     }
[16:04:31.663]                     base::local({
[16:04:31.663]                       for (pkg in "future") {
[16:04:31.663]                         base::loadNamespace(pkg)
[16:04:31.663]                         base::library(pkg, character.only = TRUE)
[16:04:31.663]                       }
[16:04:31.663]                     })
[16:04:31.663]                   }
[16:04:31.663]                   options(future.plan = NULL)
[16:04:31.663]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:04:31.663]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:04:31.663]                 }
[16:04:31.663]                 ...future.workdir <- getwd()
[16:04:31.663]             }
[16:04:31.663]             ...future.oldOptions <- base::as.list(base::.Options)
[16:04:31.663]             ...future.oldEnvVars <- base::Sys.getenv()
[16:04:31.663]         }
[16:04:31.663]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:04:31.663]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:04:31.663]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:04:31.663]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:04:31.663]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:04:31.663]             future.stdout.windows.reencode = NULL, width = 80L)
[16:04:31.663]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:04:31.663]             base::names(...future.oldOptions))
[16:04:31.663]     }
[16:04:31.663]     if (FALSE) {
[16:04:31.663]     }
[16:04:31.663]     else {
[16:04:31.663]         if (TRUE) {
[16:04:31.663]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:04:31.663]                 open = "w")
[16:04:31.663]         }
[16:04:31.663]         else {
[16:04:31.663]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:04:31.663]                 windows = "NUL", "/dev/null"), open = "w")
[16:04:31.663]         }
[16:04:31.663]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:04:31.663]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:04:31.663]             base::sink(type = "output", split = FALSE)
[16:04:31.663]             base::close(...future.stdout)
[16:04:31.663]         }, add = TRUE)
[16:04:31.663]     }
[16:04:31.663]     ...future.frame <- base::sys.nframe()
[16:04:31.663]     ...future.conditions <- base::list()
[16:04:31.663]     ...future.rng <- base::globalenv()$.Random.seed
[16:04:31.663]     if (FALSE) {
[16:04:31.663]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:04:31.663]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:04:31.663]     }
[16:04:31.663]     ...future.result <- base::tryCatch({
[16:04:31.663]         base::withCallingHandlers({
[16:04:31.663]             ...future.value <- base::withVisible(base::local({
[16:04:31.663]                 b <- 1
[16:04:31.663]                 c %<-% 2
[16:04:31.663]                 d <- 3
[16:04:31.663]                 4 %->% e
[16:04:31.663]                 b + c + d + e
[16:04:31.663]             }))
[16:04:31.663]             future::FutureResult(value = ...future.value$value, 
[16:04:31.663]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:04:31.663]                   ...future.rng), globalenv = if (FALSE) 
[16:04:31.663]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:04:31.663]                     ...future.globalenv.names))
[16:04:31.663]                 else NULL, started = ...future.startTime, version = "1.8")
[16:04:31.663]         }, condition = base::local({
[16:04:31.663]             c <- base::c
[16:04:31.663]             inherits <- base::inherits
[16:04:31.663]             invokeRestart <- base::invokeRestart
[16:04:31.663]             length <- base::length
[16:04:31.663]             list <- base::list
[16:04:31.663]             seq.int <- base::seq.int
[16:04:31.663]             signalCondition <- base::signalCondition
[16:04:31.663]             sys.calls <- base::sys.calls
[16:04:31.663]             `[[` <- base::`[[`
[16:04:31.663]             `+` <- base::`+`
[16:04:31.663]             `<<-` <- base::`<<-`
[16:04:31.663]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:04:31.663]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:04:31.663]                   3L)]
[16:04:31.663]             }
[16:04:31.663]             function(cond) {
[16:04:31.663]                 is_error <- inherits(cond, "error")
[16:04:31.663]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:04:31.663]                   NULL)
[16:04:31.663]                 if (is_error) {
[16:04:31.663]                   sessionInformation <- function() {
[16:04:31.663]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:04:31.663]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:04:31.663]                       search = base::search(), system = base::Sys.info())
[16:04:31.663]                   }
[16:04:31.663]                   ...future.conditions[[length(...future.conditions) + 
[16:04:31.663]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:04:31.663]                     cond$call), session = sessionInformation(), 
[16:04:31.663]                     timestamp = base::Sys.time(), signaled = 0L)
[16:04:31.663]                   signalCondition(cond)
[16:04:31.663]                 }
[16:04:31.663]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:04:31.663]                 "immediateCondition"))) {
[16:04:31.663]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:04:31.663]                   ...future.conditions[[length(...future.conditions) + 
[16:04:31.663]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:04:31.663]                   if (TRUE && !signal) {
[16:04:31.663]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:04:31.663]                     {
[16:04:31.663]                       inherits <- base::inherits
[16:04:31.663]                       invokeRestart <- base::invokeRestart
[16:04:31.663]                       is.null <- base::is.null
[16:04:31.663]                       muffled <- FALSE
[16:04:31.663]                       if (inherits(cond, "message")) {
[16:04:31.663]                         muffled <- grepl(pattern, "muffleMessage")
[16:04:31.663]                         if (muffled) 
[16:04:31.663]                           invokeRestart("muffleMessage")
[16:04:31.663]                       }
[16:04:31.663]                       else if (inherits(cond, "warning")) {
[16:04:31.663]                         muffled <- grepl(pattern, "muffleWarning")
[16:04:31.663]                         if (muffled) 
[16:04:31.663]                           invokeRestart("muffleWarning")
[16:04:31.663]                       }
[16:04:31.663]                       else if (inherits(cond, "condition")) {
[16:04:31.663]                         if (!is.null(pattern)) {
[16:04:31.663]                           computeRestarts <- base::computeRestarts
[16:04:31.663]                           grepl <- base::grepl
[16:04:31.663]                           restarts <- computeRestarts(cond)
[16:04:31.663]                           for (restart in restarts) {
[16:04:31.663]                             name <- restart$name
[16:04:31.663]                             if (is.null(name)) 
[16:04:31.663]                               next
[16:04:31.663]                             if (!grepl(pattern, name)) 
[16:04:31.663]                               next
[16:04:31.663]                             invokeRestart(restart)
[16:04:31.663]                             muffled <- TRUE
[16:04:31.663]                             break
[16:04:31.663]                           }
[16:04:31.663]                         }
[16:04:31.663]                       }
[16:04:31.663]                       invisible(muffled)
[16:04:31.663]                     }
[16:04:31.663]                     muffleCondition(cond, pattern = "^muffle")
[16:04:31.663]                   }
[16:04:31.663]                 }
[16:04:31.663]                 else {
[16:04:31.663]                   if (TRUE) {
[16:04:31.663]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:04:31.663]                     {
[16:04:31.663]                       inherits <- base::inherits
[16:04:31.663]                       invokeRestart <- base::invokeRestart
[16:04:31.663]                       is.null <- base::is.null
[16:04:31.663]                       muffled <- FALSE
[16:04:31.663]                       if (inherits(cond, "message")) {
[16:04:31.663]                         muffled <- grepl(pattern, "muffleMessage")
[16:04:31.663]                         if (muffled) 
[16:04:31.663]                           invokeRestart("muffleMessage")
[16:04:31.663]                       }
[16:04:31.663]                       else if (inherits(cond, "warning")) {
[16:04:31.663]                         muffled <- grepl(pattern, "muffleWarning")
[16:04:31.663]                         if (muffled) 
[16:04:31.663]                           invokeRestart("muffleWarning")
[16:04:31.663]                       }
[16:04:31.663]                       else if (inherits(cond, "condition")) {
[16:04:31.663]                         if (!is.null(pattern)) {
[16:04:31.663]                           computeRestarts <- base::computeRestarts
[16:04:31.663]                           grepl <- base::grepl
[16:04:31.663]                           restarts <- computeRestarts(cond)
[16:04:31.663]                           for (restart in restarts) {
[16:04:31.663]                             name <- restart$name
[16:04:31.663]                             if (is.null(name)) 
[16:04:31.663]                               next
[16:04:31.663]                             if (!grepl(pattern, name)) 
[16:04:31.663]                               next
[16:04:31.663]                             invokeRestart(restart)
[16:04:31.663]                             muffled <- TRUE
[16:04:31.663]                             break
[16:04:31.663]                           }
[16:04:31.663]                         }
[16:04:31.663]                       }
[16:04:31.663]                       invisible(muffled)
[16:04:31.663]                     }
[16:04:31.663]                     muffleCondition(cond, pattern = "^muffle")
[16:04:31.663]                   }
[16:04:31.663]                 }
[16:04:31.663]             }
[16:04:31.663]         }))
[16:04:31.663]     }, error = function(ex) {
[16:04:31.663]         base::structure(base::list(value = NULL, visible = NULL, 
[16:04:31.663]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:04:31.663]                 ...future.rng), started = ...future.startTime, 
[16:04:31.663]             finished = Sys.time(), session_uuid = NA_character_, 
[16:04:31.663]             version = "1.8"), class = "FutureResult")
[16:04:31.663]     }, finally = {
[16:04:31.663]         if (!identical(...future.workdir, getwd())) 
[16:04:31.663]             setwd(...future.workdir)
[16:04:31.663]         {
[16:04:31.663]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:04:31.663]                 ...future.oldOptions$nwarnings <- NULL
[16:04:31.663]             }
[16:04:31.663]             base::options(...future.oldOptions)
[16:04:31.663]             if (.Platform$OS.type == "windows") {
[16:04:31.663]                 old_names <- names(...future.oldEnvVars)
[16:04:31.663]                 envs <- base::Sys.getenv()
[16:04:31.663]                 names <- names(envs)
[16:04:31.663]                 common <- intersect(names, old_names)
[16:04:31.663]                 added <- setdiff(names, old_names)
[16:04:31.663]                 removed <- setdiff(old_names, names)
[16:04:31.663]                 changed <- common[...future.oldEnvVars[common] != 
[16:04:31.663]                   envs[common]]
[16:04:31.663]                 NAMES <- toupper(changed)
[16:04:31.663]                 args <- list()
[16:04:31.663]                 for (kk in seq_along(NAMES)) {
[16:04:31.663]                   name <- changed[[kk]]
[16:04:31.663]                   NAME <- NAMES[[kk]]
[16:04:31.663]                   if (name != NAME && is.element(NAME, old_names)) 
[16:04:31.663]                     next
[16:04:31.663]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:04:31.663]                 }
[16:04:31.663]                 NAMES <- toupper(added)
[16:04:31.663]                 for (kk in seq_along(NAMES)) {
[16:04:31.663]                   name <- added[[kk]]
[16:04:31.663]                   NAME <- NAMES[[kk]]
[16:04:31.663]                   if (name != NAME && is.element(NAME, old_names)) 
[16:04:31.663]                     next
[16:04:31.663]                   args[[name]] <- ""
[16:04:31.663]                 }
[16:04:31.663]                 NAMES <- toupper(removed)
[16:04:31.663]                 for (kk in seq_along(NAMES)) {
[16:04:31.663]                   name <- removed[[kk]]
[16:04:31.663]                   NAME <- NAMES[[kk]]
[16:04:31.663]                   if (name != NAME && is.element(NAME, old_names)) 
[16:04:31.663]                     next
[16:04:31.663]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:04:31.663]                 }
[16:04:31.663]                 if (length(args) > 0) 
[16:04:31.663]                   base::do.call(base::Sys.setenv, args = args)
[16:04:31.663]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:04:31.663]             }
[16:04:31.663]             else {
[16:04:31.663]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:04:31.663]             }
[16:04:31.663]             {
[16:04:31.663]                 if (base::length(...future.futureOptionsAdded) > 
[16:04:31.663]                   0L) {
[16:04:31.663]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:04:31.663]                   base::names(opts) <- ...future.futureOptionsAdded
[16:04:31.663]                   base::options(opts)
[16:04:31.663]                 }
[16:04:31.663]                 {
[16:04:31.663]                   {
[16:04:31.663]                     NULL
[16:04:31.663]                     RNGkind("Mersenne-Twister")
[16:04:31.663]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[16:04:31.663]                       inherits = FALSE)
[16:04:31.663]                   }
[16:04:31.663]                   options(future.plan = NULL)
[16:04:31.663]                   if (is.na(NA_character_)) 
[16:04:31.663]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:04:31.663]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:04:31.663]                   future::plan(list(function (..., envir = parent.frame()) 
[16:04:31.663]                   {
[16:04:31.663]                     future <- SequentialFuture(..., envir = envir)
[16:04:31.663]                     if (!future$lazy) 
[16:04:31.663]                       future <- run(future)
[16:04:31.663]                     invisible(future)
[16:04:31.663]                   }), .cleanup = FALSE, .init = FALSE)
[16:04:31.663]                 }
[16:04:31.663]             }
[16:04:31.663]         }
[16:04:31.663]     })
[16:04:31.663]     if (TRUE) {
[16:04:31.663]         base::sink(type = "output", split = FALSE)
[16:04:31.663]         if (TRUE) {
[16:04:31.663]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:04:31.663]         }
[16:04:31.663]         else {
[16:04:31.663]             ...future.result["stdout"] <- base::list(NULL)
[16:04:31.663]         }
[16:04:31.663]         base::close(...future.stdout)
[16:04:31.663]         ...future.stdout <- NULL
[16:04:31.663]     }
[16:04:31.663]     ...future.result$conditions <- ...future.conditions
[16:04:31.663]     ...future.result$finished <- base::Sys.time()
[16:04:31.663]     ...future.result
[16:04:31.663] }
[16:04:31.665] plan(): Setting new future strategy stack:
[16:04:31.665] List of future strategies:
[16:04:31.665] 1. sequential:
[16:04:31.665]    - args: function (..., envir = parent.frame())
[16:04:31.665]    - tweaked: FALSE
[16:04:31.665]    - call: NULL
[16:04:31.665] plan(): nbrOfWorkers() = 1
[16:04:31.697] plan(): Setting new future strategy stack:
[16:04:31.697] List of future strategies:
[16:04:31.697] 1. sequential:
[16:04:31.697]    - args: function (..., envir = parent.frame())
[16:04:31.697]    - tweaked: FALSE
[16:04:31.697]    - call: plan(strategy)
[16:04:31.697] plan(): nbrOfWorkers() = 1
[16:04:31.697] SequentialFuture started (and completed)
[16:04:31.697] signalConditions() ...
[16:04:31.697]  - include = ‘immediateCondition’
[16:04:31.697]  - exclude = 
[16:04:31.697]  - resignal = FALSE
[16:04:31.698]  - Number of conditions: 88
[16:04:31.698] signalConditions() ... done
[16:04:31.698] - Launch lazy future ... done
[16:04:31.698] run() for ‘SequentialFuture’ ... done
[16:04:31.698] signalConditions() ...
[16:04:31.698]  - include = ‘immediateCondition’
[16:04:31.698]  - exclude = 
[16:04:31.698]  - resignal = FALSE
[16:04:31.698]  - Number of conditions: 88
[16:04:31.699] signalConditions() ... done
[16:04:31.699] Future state: ‘finished’
[16:04:31.699] signalConditions() ...
[16:04:31.699]  - include = ‘condition’
[16:04:31.699]  - exclude = ‘immediateCondition’
[16:04:31.699]  - resignal = TRUE
[16:04:31.699]  - Number of conditions: 88
[16:04:31.699]  - Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[16:04:31.666] getGlobalsAndPackages() ...
[16:04:31.699]  - Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
[16:04:31.666] Searching for globals...
[16:04:31.699]  - Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[16:04:31.679] 
[16:04:31.700]  - Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[16:04:31.679] Searching for globals ... DONE
[16:04:31.700]  - Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[16:04:31.680] - globals: [0] <none>
[16:04:31.700]  - Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[16:04:31.680] getGlobalsAndPackages() ... DONE
[16:04:31.700]  - Condition #7: ‘simpleMessage’, ‘message’, ‘condition’
[16:04:31.680] run() for ‘Future’ ...
[16:04:31.700]  - Condition #8: ‘simpleMessage’, ‘message’, ‘condition’
[16:04:31.680] - state: ‘created’
[16:04:31.700]  - Condition #9: ‘simpleMessage’, ‘message’, ‘condition’
[16:04:31.680] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[16:04:31.700]  - Condition #10: ‘simpleMessage’, ‘message’, ‘condition’
[16:04:31.680] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[16:04:31.700]  - Condition #11: ‘simpleMessage’, ‘message’, ‘condition’
[16:04:31.681] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[16:04:31.701]  - Condition #12: ‘simpleMessage’, ‘message’, ‘condition’
[16:04:31.681]   - Field: ‘label’
[16:04:31.701]  - Condition #13: ‘simpleMessage’, ‘message’, ‘condition’
[16:04:31.681]   - Field: ‘local’
[16:04:31.701]  - Condition #14: ‘simpleMessage’, ‘message’, ‘condition’
[16:04:31.681]   - Field: ‘owner’
[16:04:31.701]  - Condition #15: ‘simpleMessage’, ‘message’, ‘condition’
[16:04:31.681]   - Field: ‘envir’
[16:04:31.701]  - Condition #16: ‘simpleMessage’, ‘message’, ‘condition’
[16:04:31.681]   - Field: ‘packages’
[16:04:31.701]  - Condition #17: ‘simpleMessage’, ‘message’, ‘condition’
[16:04:31.681]   - Field: ‘gc’
[16:04:31.701]  - Condition #18: ‘simpleMessage’, ‘message’, ‘condition’
[16:04:31.681]   - Field: ‘conditions’
[16:04:31.701]  - Condition #19: ‘simpleMessage’, ‘message’, ‘condition’
[16:04:31.681]   - Field: ‘expr’
[16:04:31.702]  - Condition #20: ‘simpleMessage’, ‘message’, ‘condition’
[16:04:31.681]   - Field: ‘uuid’
[16:04:31.702]  - Condition #21: ‘simpleMessage’, ‘message’, ‘condition’
[16:04:31.682]   - Field: ‘seed’
[16:04:31.702]  - Condition #22: ‘simpleMessage’, ‘message’, ‘condition’
[16:04:31.682]   - Field: ‘version’
[16:04:31.702]  - Condition #23: ‘simpleMessage’, ‘message’, ‘condition’
[16:04:31.682]   - Field: ‘result’
[16:04:31.702]  - Condition #24: ‘simpleMessage’, ‘message’, ‘condition’
[16:04:31.682]   - Field: ‘asynchronous’
[16:04:31.702]  - Condition #25: ‘simpleMessage’, ‘message’, ‘condition’
[16:04:31.682]   - Field: ‘calls’
[16:04:31.702]  - Condition #26: ‘simpleMessage’, ‘message’, ‘condition’
[16:04:31.682]   - Field: ‘globals’
[16:04:31.702]  - Condition #27: ‘simpleMessage’, ‘message’, ‘condition’
[16:04:31.682]   - Field: ‘stdout’
[16:04:31.703]  - Condition #28: ‘simpleMessage’, ‘message’, ‘condition’
[16:04:31.682]   - Field: ‘earlySignal’
[16:04:31.703]  - Condition #29: ‘simpleMessage’, ‘message’, ‘condition’
[16:04:31.682]   - Field: ‘lazy’
[16:04:31.703]  - Condition #30: ‘simpleMessage’, ‘message’, ‘condition’
[16:04:31.682]   - Field: ‘state’
[16:04:31.703]  - Condition #31: ‘simpleMessage’, ‘message’, ‘condition’
[16:04:31.683] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[16:04:31.703]  - Condition #32: ‘simpleMessage’, ‘message’, ‘condition’
[16:04:31.683] - Launch lazy future ...
[16:04:31.703]  - Condition #33: ‘simpleMessage’, ‘message’, ‘condition’
[16:04:31.683] Packages needed by the future expression (n = 0): <none>
[16:04:31.703]  - Condition #34: ‘simpleMessage’, ‘message’, ‘condition’
[16:04:31.683] Packages needed by future strategies (n = 0): <none>
[16:04:31.703]  - Condition #35: ‘simpleMessage’, ‘message’, ‘condition’
[16:04:31.683] {
[16:04:31.683]     {
[16:04:31.683]         {
[16:04:31.683]             ...future.startTime <- base::Sys.time()
[16:04:31.683]             {
[16:04:31.683]                 {
[16:04:31.683]                   {
[16:04:31.683]                     base::local({
[16:04:31.683]                       has_future <- base::requireNamespace("future", 
[16:04:31.683]                         quietly = TRUE)
[16:04:31.683]                       if (has_future) {
[16:04:31.683]                         ns <- base::getNamespace("future")
[16:04:31.683]                         version <- ns[[".package"]][["version"]]
[16:04:31.683]                         if (is.null(version)) 
[16:04:31.683]                           version <- utils::packageVersion("future")
[16:04:31.683]                       }
[16:04:31.683]                       else {
[16:04:31.683]                         version <- NULL
[16:04:31.683]                       }
[16:04:31.683]                       if (!has_future || version < "1.8.0") {
[16:04:31.683]                         info <- base::c(r_version = base::gsub("R version ", 
[16:04:31.683]                           "", base::R.version$version.string), 
[16:04:31.683]                           platform = base::sprintf("%s (%s-bit)", 
[16:04:31.683]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:04:31.683]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[16:04:31.683]                             "release", "version")], collapse = " "), 
[16:04:31.683]                           hostname = base::Sys.info()[["nodename"]])
[16:04:31.683]                         info <- base::sprintf("%s: %s", base::names(info), 
[16:04:31.683]                           info)
[16:04:31.683]                         info <- base::paste(info, collapse = "; ")
[16:04:31.683]                         if (!has_future) {
[16:04:31.683]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:04:31.683]                             info)
[16:04:31.683]                         }
[16:04:31.683]                         else {
[16:04:31.683]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:04:31.683]                             info, version)
[16:04:31.683]                         }
[16:04:31.683]                         base::stop(msg)
[16:04:31.683]                       }
[16:04:31.683]                     })
[16:04:31.683]                   }
[16:04:31.683]                   options(future.plan = NULL)
[16:04:31.683]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:04:31.683]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:04:31.683]                 }
[16:04:31.683]                 ...future.workdir <- getwd()
[16:04:31.683]             }
[16:04:31.683]             ...future.oldOptions <- base::as.list(base::.Options)
[16:04:31.683]             ...future.oldEnvVars <- base::Sys.getenv()
[16:04:31.683]         }
[16:04:31.683]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:04:31.683]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:04:31.683]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:04:31.683]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:04:31.683]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:04:31.683]             future.stdout.windows.reencode = NULL, width = 80L)
[16:04:31.683]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:04:31.683]             base::names(...future.oldOptions))
[16:04:31.683]     }
[16:04:31.683]     if (FALSE) {
[16:04:31.683]     }
[16:04:31.683]     else {
[16:04:31.683]         if (TRUE) {
[16:04:31.683]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:04:31.683]                 open = "w")
[16:04:31.683]         }
[16:04:31.683]         else {
[16:04:31.683]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:04:31.683]                 windows = "NUL", "/dev/null"), open = "w")
[16:04:31.683]         }
[16:04:31.683]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:04:31.683]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:04:31.683]             base::sink(type = "output", split = FALSE)
[16:04:31.683]             base::close(...future.stdout)
[16:04:31.683]         }, add = TRUE)
[16:04:31.683]     }
[16:04:31.683]     ...future.frame <- base::sys.nframe()
[16:04:31.683]     ...future.conditions <- base::list()
[16:04:31.683]     ...future.rng <- base::globalenv()$.Random.seed
[16:04:31.683]     if (FALSE) {
[16:04:31.683]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:04:31.683]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:04:31.683]     }
[16:04:31.683]     ...future.result <- base::tryCatch({
[16:04:31.683]         base::withCallingHandlers({
[16:04:31.683]             ...future.value <- base::withVisible(base::local(2))
[16:04:31.683]             future::FutureResult(value = ...future.value$value, 
[16:04:31.683]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:04:31.683]                   ...future.rng), globalenv = if (FALSE) 
[16:04:31.683]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:04:31.683]                     ...future.globalenv.names))
[16:04:31.683]                 else NULL, started = ...future.startTime, version = "1.8")
[16:04:31.683]         }, condition = base::local({
[16:04:31.683]             c <- base::c
[16:04:31.683]             inherits <- base::inherits
[16:04:31.683]             invokeRestart <- base::invokeRestart
[16:04:31.683]             length <- base::length
[16:04:31.683]             list <- base::list
[16:04:31.683]             seq.int <- base::seq.int
[16:04:31.683]             signalCondition <- base::signalCondition
[16:04:31.683]             sys.calls <- base::sys.calls
[16:04:31.683]             `[[` <- base::`[[`
[16:04:31.683]             `+` <- base::`+`
[16:04:31.683]             `<<-` <- base::`<<-`
[16:04:31.683]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:04:31.683]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:04:31.683]                   3L)]
[16:04:31.683]             }
[16:04:31.683]             function(cond) {
[16:04:31.683]                 is_error <- inherits(cond, "error")
[16:04:31.683]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:04:31.683]                   NULL)
[16:04:31.683]                 if (is_error) {
[16:04:31.683]                   sessionInformation <- function() {
[16:04:31.683]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:04:31.683]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:04:31.683]                       search = base::search(), system = base::Sys.info())
[16:04:31.683]                   }
[16:04:31.683]                   ...future.conditions[[length(...future.conditions) + 
[16:04:31.683]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:04:31.683]                     cond$call), session = sessionInformation(), 
[16:04:31.683]                     timestamp = base::Sys.time(), signaled = 0L)
[16:04:31.683]                   signalCondition(cond)
[16:04:31.683]                 }
[16:04:31.683]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:04:31.683]                 "immediateCondition"))) {
[16:04:31.683]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:04:31.683]                   ...future.conditions[[length(...future.conditions) + 
[16:04:31.683]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:04:31.683]                   if (TRUE && !signal) {
[16:04:31.683]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:04:31.683]                     {
[16:04:31.683]                       inherits <- base::inherits
[16:04:31.683]                       invokeRestart <- base::invokeRestart
[16:04:31.683]                       is.null <- base::is.null
[16:04:31.683]                       muffled <- FALSE
[16:04:31.683]                       if (inherits(cond, "message")) {
[16:04:31.683]                         muffled <- grepl(pattern, "muffleMessage")
[16:04:31.683]                         if (muffled) 
[16:04:31.683]                           invokeRestart("muffleMessage")
[16:04:31.683]                       }
[16:04:31.683]                       else if (inherits(cond, "warning")) {
[16:04:31.683]                         muffled <- grepl(pattern, "muffleWarning")
[16:04:31.683]                         if (muffled) 
[16:04:31.683]                           invokeRestart("muffleWarning")
[16:04:31.683]                       }
[16:04:31.683]                       else if (inherits(cond, "condition")) {
[16:04:31.683]                         if (!is.null(pattern)) {
[16:04:31.683]                           computeRestarts <- base::computeRestarts
[16:04:31.683]                           grepl <- base::grepl
[16:04:31.683]                           restarts <- computeRestarts(cond)
[16:04:31.683]                           for (restart in restarts) {
[16:04:31.683]                             name <- restart$name
[16:04:31.683]                             if (is.null(name)) 
[16:04:31.683]                               next
[16:04:31.683]                             if (!grepl(pattern, name)) 
[16:04:31.683]                               next
[16:04:31.683]                             invokeRestart(restart)
[16:04:31.683]                             muffled <- TRUE
[16:04:31.683]                             break
[16:04:31.683]                           }
[16:04:31.683]                         }
[16:04:31.683]                       }
[16:04:31.683]                       invisible(muffled)
[16:04:31.683]                     }
[16:04:31.683]                     muffleCondition(cond, pattern = "^muffle")
[16:04:31.683]                   }
[16:04:31.683]                 }
[16:04:31.683]                 else {
[16:04:31.683]                   if (TRUE) {
[16:04:31.683]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:04:31.683]                     {
[16:04:31.683]                       inherits <- base::inherits
[16:04:31.683]                       invokeRestart <- base::invokeRestart
[16:04:31.683]                       is.null <- base::is.null
[16:04:31.683]                       muffled <- FALSE
[16:04:31.683]                       if (inherits(cond, "message")) {
[16:04:31.683]                         muffled <- grepl(pattern, "muffleMessage")
[16:04:31.683]                         if (muffled) 
[16:04:31.683]                           invokeRestart("muffleMessage")
[16:04:31.683]                       }
[16:04:31.683]                       else if (inherits(cond, "warning")) {
[16:04:31.683]                         muffled <- grepl(pattern, "muffleWarning")
[16:04:31.683]                         if (muffled) 
[16:04:31.683]                           invokeRestart("muffleWarning")
[16:04:31.683]                       }
[16:04:31.683]                       else if (inherits(cond, "condition")) {
[16:04:31.683]                         if (!is.null(pattern)) {
[16:04:31.683]                           computeRestarts <- base::computeRestarts
[16:04:31.683]                           grepl <- base::grepl
[16:04:31.683]                           restarts <- computeRestarts(cond)
[16:04:31.683]                           for (restart in restarts) {
[16:04:31.683]                             name <- restart$name
[16:04:31.683]                             if (is.null(name)) 
[16:04:31.683]                               next
[16:04:31.683]                             if (!grepl(pattern, name)) 
[16:04:31.683]                               next
[16:04:31.683]                             invokeRestart(restart)
[16:04:31.683]                             muffled <- TRUE
[16:04:31.683]                             break
[16:04:31.683]                           }
[16:04:31.683]                         }
[16:04:31.683]                       }
[16:04:31.683]                       invisible(muffled)
[16:04:31.683]                     }
[16:04:31.683]                     muffleCondition(cond, pattern = "^muffle")
[16:04:31.683]                   }
[16:04:31.683]                 }
[16:04:31.683]             }
[16:04:31.683]         }))
[16:04:31.683]     }, error = function(ex) {
[16:04:31.683]         base::structure(base::list(value = NULL, visible = NULL, 
[16:04:31.683]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:04:31.683]                 ...future.rng), started = ...future.startTime, 
[16:04:31.683]             finished = Sys.time(), session_uuid = NA_character_, 
[16:04:31.683]             version = "1.8"), class = "FutureResult")
[16:04:31.683]     }, finally = {
[16:04:31.683]         if (!identical(...future.workdir, getwd())) 
[16:04:31.683]             setwd(...future.workdir)
[16:04:31.683]         {
[16:04:31.683]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:04:31.683]                 ...future.oldOptions$nwarnings <- NULL
[16:04:31.683]             }
[16:04:31.683]             base::options(...future.oldOptions)
[16:04:31.683]             if (.Platform$OS.type == "windows") {
[16:04:31.683]                 old_names <- names(...future.oldEnvVars)
[16:04:31.683]                 envs <- base::Sys.getenv()
[16:04:31.683]                 names <- names(envs)
[16:04:31.683]                 common <- intersect(names, old_names)
[16:04:31.683]                 added <- setdiff(names, old_names)
[16:04:31.683]                 removed <- setdiff(old_names, names)
[16:04:31.683]                 changed <- common[...future.oldEnvVars[common] != 
[16:04:31.683]                   envs[common]]
[16:04:31.683]                 NAMES <- toupper(changed)
[16:04:31.683]                 args <- list()
[16:04:31.683]                 for (kk in seq_along(NAMES)) {
[16:04:31.683]                   name <- changed[[kk]]
[16:04:31.683]                   NAME <- NAMES[[kk]]
[16:04:31.683]                   if (name != NAME && is.element(NAME, old_names)) 
[16:04:31.683]                     next
[16:04:31.683]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:04:31.683]                 }
[16:04:31.683]                 NAMES <- toupper(added)
[16:04:31.683]                 for (kk in seq_along(NAMES)) {
[16:04:31.683]                   name <- added[[kk]]
[16:04:31.683]                   NAME <- NAMES[[kk]]
[16:04:31.683]                   if (name != NAME && is.element(NAME, old_names)) 
[16:04:31.683]                     next
[16:04:31.683]                   args[[name]] <- ""
[16:04:31.683]                 }
[16:04:31.683]                 NAMES <- toupper(removed)
[16:04:31.683]                 for (kk in seq_along(NAMES)) {
[16:04:31.683]                   name <- removed[[kk]]
[16:04:31.683]                   NAME <- NAMES[[kk]]
[16:04:31.683]                   if (name != NAME && is.element(NAME, old_names)) 
[16:04:31.683]                     next
[16:04:31.683]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:04:31.683]                 }
[16:04:31.683]                 if (length(args) > 0) 
[16:04:31.683]                   base::do.call(base::Sys.setenv, args = args)
[16:04:31.683]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:04:31.683]             }
[16:04:31.683]             else {
[16:04:31.683]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:04:31.683]             }
[16:04:31.683]             {
[16:04:31.683]                 if (base::length(...future.futureOptionsAdded) > 
[16:04:31.683]                   0L) {
[16:04:31.683]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:04:31.683]                   base::names(opts) <- ...future.futureOptionsAdded
[16:04:31.683]                   base::options(opts)
[16:04:31.683]                 }
[16:04:31.683]                 {
[16:04:31.683]                   {
[16:04:31.683]                     NULL
[16:04:31.683]                     RNGkind("Mersenne-Twister")
[16:04:31.683]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[16:04:31.683]                       inherits = FALSE)
[16:04:31.683]                   }
[16:04:31.683]                   options(future.plan = NULL)
[16:04:31.683]                   if (is.na(NA_character_)) 
[16:04:31.683]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:04:31.683]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:04:31.683]                   future::plan(list(function (..., envir = parent.frame()) 
[16:04:31.683]                   {
[16:04:31.683]                     future <- SequentialFuture(..., envir = envir)
[16:04:31.683]                     if (!future$lazy) 
[16:04:31.683]                       future <- run(future)
[16:04:31.683]                     invisible(future)
[16:04:31.683]                   }), .cleanup = FALSE, .init = FALSE)
[16:04:31.683]                 }
[16:04:31.683]             }
[16:04:31.683]         }
[16:04:31.683]     })
[16:04:31.683]     if (TRUE) {
[16:04:31.683]         base::sink(type = "output", split = FALSE)
[16:04:31.683]         if (TRUE) {
[16:04:31.683]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:04:31.683]         }
[16:04:31.683]         else {
[16:04:31.683]             ...future.result["stdout"] <- base::list(NULL)
[16:04:31.683]         }
[16:04:31.683]         base::close(...future.stdout)
[16:04:31.683]         ...future.stdout <- NULL
[16:04:31.683]     }
[16:04:31.683]     ...future.result$conditions <- ...future.conditions
[16:04:31.683]     ...future.result$finished <- base::Sys.time()
[16:04:31.683]     ...future.result
[16:04:31.683] }
[16:04:31.704]  - Condition #36: ‘simpleMessage’, ‘message’, ‘condition’
[16:04:31.685] plan(): Setting new future strategy stack:
[16:04:31.704]  - Condition #37: ‘simpleMessage’, ‘message’, ‘condition’
[16:04:31.685] List of future strategies:
[16:04:31.685] 1. sequential:
[16:04:31.685]    - args: function (..., envir = parent.frame())
[16:04:31.685]    - tweaked: FALSE
[16:04:31.685]    - call: NULL
[16:04:31.704]  - Condition #38: ‘simpleMessage’, ‘message’, ‘condition’
[16:04:31.685] plan(): nbrOfWorkers() = 1
[16:04:31.704]  - Condition #39: ‘simpleMessage’, ‘message’, ‘condition’
[16:04:31.687] plan(): Setting new future strategy stack:
[16:04:31.704]  - Condition #40: ‘simpleMessage’, ‘message’, ‘condition’
[16:04:31.687] List of future strategies:
[16:04:31.687] 1. sequential:
[16:04:31.687]    - args: function (..., envir = parent.frame())
[16:04:31.687]    - tweaked: FALSE
[16:04:31.687]    - call: NULL
[16:04:31.704]  - Condition #41: ‘simpleMessage’, ‘message’, ‘condition’
[16:04:31.687] plan(): nbrOfWorkers() = 1
[16:04:31.704]  - Condition #42: ‘simpleMessage’, ‘message’, ‘condition’
[16:04:31.688] SequentialFuture started (and completed)
[16:04:31.704]  - Condition #43: ‘simpleMessage’, ‘message’, ‘condition’
[16:04:31.688] - Launch lazy future ... done
[16:04:31.705]  - Condition #44: ‘simpleMessage’, ‘message’, ‘condition’
[16:04:31.688] run() for ‘SequentialFuture’ ... done
[16:04:31.705]  - Condition #45: ‘simpleMessage’, ‘message’, ‘condition’
[16:04:31.688] getGlobalsAndPackages() ...
[16:04:31.705]  - Condition #46: ‘simpleMessage’, ‘message’, ‘condition’
[16:04:31.688] Searching for globals...
[16:04:31.705]  - Condition #47: ‘simpleMessage’, ‘message’, ‘condition’
[16:04:31.688] 
[16:04:31.705]  - Condition #48: ‘simpleMessage’, ‘message’, ‘condition’
[16:04:31.689] Searching for globals ... DONE
[16:04:31.705]  - Condition #49: ‘simpleMessage’, ‘message’, ‘condition’
[16:04:31.689] - globals: [0] <none>
[16:04:31.705]  - Condition #50: ‘simpleMessage’, ‘message’, ‘condition’
[16:04:31.689] getGlobalsAndPackages() ... DONE
[16:04:31.705]  - Condition #51: ‘simpleMessage’, ‘message’, ‘condition’
[16:04:31.689] run() for ‘Future’ ...
[16:04:31.706]  - Condition #52: ‘simpleMessage’, ‘message’, ‘condition’
[16:04:31.689] - state: ‘created’
[16:04:31.706]  - Condition #53: ‘simpleMessage’, ‘message’, ‘condition’
[16:04:31.689] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[16:04:31.706]  - Condition #54: ‘simpleMessage’, ‘message’, ‘condition’
[16:04:31.690] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[16:04:31.706]  - Condition #55: ‘simpleMessage’, ‘message’, ‘condition’
[16:04:31.690] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[16:04:31.706]  - Condition #56: ‘simpleMessage’, ‘message’, ‘condition’
[16:04:31.690]   - Field: ‘label’
[16:04:31.706]  - Condition #57: ‘simpleMessage’, ‘message’, ‘condition’
[16:04:31.690]   - Field: ‘local’
[16:04:31.706]  - Condition #58: ‘simpleMessage’, ‘message’, ‘condition’
[16:04:31.690]   - Field: ‘owner’
[16:04:31.706]  - Condition #59: ‘simpleMessage’, ‘message’, ‘condition’
[16:04:31.690]   - Field: ‘envir’
[16:04:31.707]  - Condition #60: ‘simpleMessage’, ‘message’, ‘condition’
[16:04:31.690]   - Field: ‘packages’
[16:04:31.707]  - Condition #61: ‘simpleMessage’, ‘message’, ‘condition’
[16:04:31.690]   - Field: ‘gc’
[16:04:31.707]  - Condition #62: ‘simpleMessage’, ‘message’, ‘condition’
[16:04:31.690]   - Field: ‘conditions’
[16:04:31.707]  - Condition #63: ‘simpleMessage’, ‘message’, ‘condition’
[16:04:31.690]   - Field: ‘expr’
[16:04:31.707]  - Condition #64: ‘simpleMessage’, ‘message’, ‘condition’
[16:04:31.691]   - Field: ‘uuid’
[16:04:31.707]  - Condition #65: ‘simpleMessage’, ‘message’, ‘condition’
[16:04:31.691]   - Field: ‘seed’
[16:04:31.707]  - Condition #66: ‘simpleMessage’, ‘message’, ‘condition’
[16:04:31.691]   - Field: ‘version’
[16:04:31.707]  - Condition #67: ‘simpleMessage’, ‘message’, ‘condition’
[16:04:31.691]   - Field: ‘result’
[16:04:31.708]  - Condition #68: ‘simpleMessage’, ‘message’, ‘condition’
[16:04:31.691]   - Field: ‘asynchronous’
[16:04:31.708]  - Condition #69: ‘simpleMessage’, ‘message’, ‘condition’
[16:04:31.691]   - Field: ‘calls’
[16:04:31.708]  - Condition #70: ‘simpleMessage’, ‘message’, ‘condition’
[16:04:31.691]   - Field: ‘globals’
[16:04:31.708]  - Condition #71: ‘simpleMessage’, ‘message’, ‘condition’
[16:04:31.691]   - Field: ‘stdout’
[16:04:31.708]  - Condition #72: ‘simpleMessage’, ‘message’, ‘condition’
[16:04:31.691]   - Field: ‘earlySignal’
[16:04:31.708]  - Condition #73: ‘simpleMessage’, ‘message’, ‘condition’
[16:04:31.691]   - Field: ‘lazy’
[16:04:31.709]  - Condition #74: ‘simpleMessage’, ‘message’, ‘condition’
[16:04:31.692]   - Field: ‘state’
[16:04:31.709]  - Condition #75: ‘simpleMessage’, ‘message’, ‘condition’
[16:04:31.692] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[16:04:31.709]  - Condition #76: ‘simpleMessage’, ‘message’, ‘condition’
[16:04:31.692] - Launch lazy future ...
[16:04:31.710]  - Condition #77: ‘simpleMessage’, ‘message’, ‘condition’
[16:04:31.692] Packages needed by the future expression (n = 0): <none>
[16:04:31.710]  - Condition #78: ‘simpleMessage’, ‘message’, ‘condition’
[16:04:31.692] Packages needed by future strategies (n = 0): <none>
[16:04:31.710]  - Condition #79: ‘simpleMessage’, ‘message’, ‘condition’
[16:04:31.692] {
[16:04:31.692]     {
[16:04:31.692]         {
[16:04:31.692]             ...future.startTime <- base::Sys.time()
[16:04:31.692]             {
[16:04:31.692]                 {
[16:04:31.692]                   {
[16:04:31.692]                     base::local({
[16:04:31.692]                       has_future <- base::requireNamespace("future", 
[16:04:31.692]                         quietly = TRUE)
[16:04:31.692]                       if (has_future) {
[16:04:31.692]                         ns <- base::getNamespace("future")
[16:04:31.692]                         version <- ns[[".package"]][["version"]]
[16:04:31.692]                         if (is.null(version)) 
[16:04:31.692]                           version <- utils::packageVersion("future")
[16:04:31.692]                       }
[16:04:31.692]                       else {
[16:04:31.692]                         version <- NULL
[16:04:31.692]                       }
[16:04:31.692]                       if (!has_future || version < "1.8.0") {
[16:04:31.692]                         info <- base::c(r_version = base::gsub("R version ", 
[16:04:31.692]                           "", base::R.version$version.string), 
[16:04:31.692]                           platform = base::sprintf("%s (%s-bit)", 
[16:04:31.692]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:04:31.692]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[16:04:31.692]                             "release", "version")], collapse = " "), 
[16:04:31.692]                           hostname = base::Sys.info()[["nodename"]])
[16:04:31.692]                         info <- base::sprintf("%s: %s", base::names(info), 
[16:04:31.692]                           info)
[16:04:31.692]                         info <- base::paste(info, collapse = "; ")
[16:04:31.692]                         if (!has_future) {
[16:04:31.692]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:04:31.692]                             info)
[16:04:31.692]                         }
[16:04:31.692]                         else {
[16:04:31.692]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:04:31.692]                             info, version)
[16:04:31.692]                         }
[16:04:31.692]                         base::stop(msg)
[16:04:31.692]                       }
[16:04:31.692]                     })
[16:04:31.692]                   }
[16:04:31.692]                   options(future.plan = NULL)
[16:04:31.692]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:04:31.692]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:04:31.692]                 }
[16:04:31.692]                 ...future.workdir <- getwd()
[16:04:31.692]             }
[16:04:31.692]             ...future.oldOptions <- base::as.list(base::.Options)
[16:04:31.692]             ...future.oldEnvVars <- base::Sys.getenv()
[16:04:31.692]         }
[16:04:31.692]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:04:31.692]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:04:31.692]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:04:31.692]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:04:31.692]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:04:31.692]             future.stdout.windows.reencode = NULL, width = 80L)
[16:04:31.692]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:04:31.692]             base::names(...future.oldOptions))
[16:04:31.692]     }
[16:04:31.692]     if (FALSE) {
[16:04:31.692]     }
[16:04:31.692]     else {
[16:04:31.692]         if (TRUE) {
[16:04:31.692]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:04:31.692]                 open = "w")
[16:04:31.692]         }
[16:04:31.692]         else {
[16:04:31.692]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:04:31.692]                 windows = "NUL", "/dev/null"), open = "w")
[16:04:31.692]         }
[16:04:31.692]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:04:31.692]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:04:31.692]             base::sink(type = "output", split = FALSE)
[16:04:31.692]             base::close(...future.stdout)
[16:04:31.692]         }, add = TRUE)
[16:04:31.692]     }
[16:04:31.692]     ...future.frame <- base::sys.nframe()
[16:04:31.692]     ...future.conditions <- base::list()
[16:04:31.692]     ...future.rng <- base::globalenv()$.Random.seed
[16:04:31.692]     if (FALSE) {
[16:04:31.692]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:04:31.692]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:04:31.692]     }
[16:04:31.692]     ...future.result <- base::tryCatch({
[16:04:31.692]         base::withCallingHandlers({
[16:04:31.692]             ...future.value <- base::withVisible(base::local(4))
[16:04:31.692]             future::FutureResult(value = ...future.value$value, 
[16:04:31.692]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:04:31.692]                   ...future.rng), globalenv = if (FALSE) 
[16:04:31.692]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:04:31.692]                     ...future.globalenv.names))
[16:04:31.692]                 else NULL, started = ...future.startTime, version = "1.8")
[16:04:31.692]         }, condition = base::local({
[16:04:31.692]             c <- base::c
[16:04:31.692]             inherits <- base::inherits
[16:04:31.692]             invokeRestart <- base::invokeRestart
[16:04:31.692]             length <- base::length
[16:04:31.692]             list <- base::list
[16:04:31.692]             seq.int <- base::seq.int
[16:04:31.692]             signalCondition <- base::signalCondition
[16:04:31.692]             sys.calls <- base::sys.calls
[16:04:31.692]             `[[` <- base::`[[`
[16:04:31.692]             `+` <- base::`+`
[16:04:31.692]             `<<-` <- base::`<<-`
[16:04:31.692]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:04:31.692]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:04:31.692]                   3L)]
[16:04:31.692]             }
[16:04:31.692]             function(cond) {
[16:04:31.692]                 is_error <- inherits(cond, "error")
[16:04:31.692]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:04:31.692]                   NULL)
[16:04:31.692]                 if (is_error) {
[16:04:31.692]                   sessionInformation <- function() {
[16:04:31.692]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:04:31.692]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:04:31.692]                       search = base::search(), system = base::Sys.info())
[16:04:31.692]                   }
[16:04:31.692]                   ...future.conditions[[length(...future.conditions) + 
[16:04:31.692]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:04:31.692]                     cond$call), session = sessionInformation(), 
[16:04:31.692]                     timestamp = base::Sys.time(), signaled = 0L)
[16:04:31.692]                   signalCondition(cond)
[16:04:31.692]                 }
[16:04:31.692]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:04:31.692]                 "immediateCondition"))) {
[16:04:31.692]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:04:31.692]                   ...future.conditions[[length(...future.conditions) + 
[16:04:31.692]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:04:31.692]                   if (TRUE && !signal) {
[16:04:31.692]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:04:31.692]                     {
[16:04:31.692]                       inherits <- base::inherits
[16:04:31.692]                       invokeRestart <- base::invokeRestart
[16:04:31.692]                       is.null <- base::is.null
[16:04:31.692]                       muffled <- FALSE
[16:04:31.692]                       if (inherits(cond, "message")) {
[16:04:31.692]                         muffled <- grepl(pattern, "muffleMessage")
[16:04:31.692]                         if (muffled) 
[16:04:31.692]                           invokeRestart("muffleMessage")
[16:04:31.692]                       }
[16:04:31.692]                       else if (inherits(cond, "warning")) {
[16:04:31.692]                         muffled <- grepl(pattern, "muffleWarning")
[16:04:31.692]                         if (muffled) 
[16:04:31.692]                           invokeRestart("muffleWarning")
[16:04:31.692]                       }
[16:04:31.692]                       else if (inherits(cond, "condition")) {
[16:04:31.692]                         if (!is.null(pattern)) {
[16:04:31.692]                           computeRestarts <- base::computeRestarts
[16:04:31.692]                           grepl <- base::grepl
[16:04:31.692]                           restarts <- computeRestarts(cond)
[16:04:31.692]                           for (restart in restarts) {
[16:04:31.692]                             name <- restart$name
[16:04:31.692]                             if (is.null(name)) 
[16:04:31.692]                               next
[16:04:31.692]                             if (!grepl(pattern, name)) 
[16:04:31.692]                               next
[16:04:31.692]                             invokeRestart(restart)
[16:04:31.692]                             muffled <- TRUE
[16:04:31.692]                             break
[16:04:31.692]                           }
[16:04:31.692]                         }
[16:04:31.692]                       }
[16:04:31.692]                       invisible(muffled)
[16:04:31.692]                     }
[16:04:31.692]                     muffleCondition(cond, pattern = "^muffle")
[16:04:31.692]                   }
[16:04:31.692]                 }
[16:04:31.692]                 else {
[16:04:31.692]                   if (TRUE) {
[16:04:31.692]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:04:31.692]                     {
[16:04:31.692]                       inherits <- base::inherits
[16:04:31.692]                       invokeRestart <- base::invokeRestart
[16:04:31.692]                       is.null <- base::is.null
[16:04:31.692]                       muffled <- FALSE
[16:04:31.692]                       if (inherits(cond, "message")) {
[16:04:31.692]                         muffled <- grepl(pattern, "muffleMessage")
[16:04:31.692]                         if (muffled) 
[16:04:31.692]                           invokeRestart("muffleMessage")
[16:04:31.692]                       }
[16:04:31.692]                       else if (inherits(cond, "warning")) {
[16:04:31.692]                         muffled <- grepl(pattern, "muffleWarning")
[16:04:31.692]                         if (muffled) 
[16:04:31.692]                           invokeRestart("muffleWarning")
[16:04:31.692]                       }
[16:04:31.692]                       else if (inherits(cond, "condition")) {
[16:04:31.692]                         if (!is.null(pattern)) {
[16:04:31.692]                           computeRestarts <- base::computeRestarts
[16:04:31.692]                           grepl <- base::grepl
[16:04:31.692]                           restarts <- computeRestarts(cond)
[16:04:31.692]                           for (restart in restarts) {
[16:04:31.692]                             name <- restart$name
[16:04:31.692]                             if (is.null(name)) 
[16:04:31.692]                               next
[16:04:31.692]                             if (!grepl(pattern, name)) 
[16:04:31.692]                               next
[16:04:31.692]                             invokeRestart(restart)
[16:04:31.692]                             muffled <- TRUE
[16:04:31.692]                             break
[16:04:31.692]                           }
[16:04:31.692]                         }
[16:04:31.692]                       }
[16:04:31.692]                       invisible(muffled)
[16:04:31.692]                     }
[16:04:31.692]                     muffleCondition(cond, pattern = "^muffle")
[16:04:31.692]                   }
[16:04:31.692]                 }
[16:04:31.692]             }
[16:04:31.692]         }))
[16:04:31.692]     }, error = function(ex) {
[16:04:31.692]         base::structure(base::list(value = NULL, visible = NULL, 
[16:04:31.692]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:04:31.692]                 ...future.rng), started = ...future.startTime, 
[16:04:31.692]             finished = Sys.time(), session_uuid = NA_character_, 
[16:04:31.692]             version = "1.8"), class = "FutureResult")
[16:04:31.692]     }, finally = {
[16:04:31.692]         if (!identical(...future.workdir, getwd())) 
[16:04:31.692]             setwd(...future.workdir)
[16:04:31.692]         {
[16:04:31.692]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:04:31.692]                 ...future.oldOptions$nwarnings <- NULL
[16:04:31.692]             }
[16:04:31.692]             base::options(...future.oldOptions)
[16:04:31.692]             if (.Platform$OS.type == "windows") {
[16:04:31.692]                 old_names <- names(...future.oldEnvVars)
[16:04:31.692]                 envs <- base::Sys.getenv()
[16:04:31.692]                 names <- names(envs)
[16:04:31.692]                 common <- intersect(names, old_names)
[16:04:31.692]                 added <- setdiff(names, old_names)
[16:04:31.692]                 removed <- setdiff(old_names, names)
[16:04:31.692]                 changed <- common[...future.oldEnvVars[common] != 
[16:04:31.692]                   envs[common]]
[16:04:31.692]                 NAMES <- toupper(changed)
[16:04:31.692]                 args <- list()
[16:04:31.692]                 for (kk in seq_along(NAMES)) {
[16:04:31.692]                   name <- changed[[kk]]
[16:04:31.692]                   NAME <- NAMES[[kk]]
[16:04:31.692]                   if (name != NAME && is.element(NAME, old_names)) 
[16:04:31.692]                     next
[16:04:31.692]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:04:31.692]                 }
[16:04:31.692]                 NAMES <- toupper(added)
[16:04:31.692]                 for (kk in seq_along(NAMES)) {
[16:04:31.692]                   name <- added[[kk]]
[16:04:31.692]                   NAME <- NAMES[[kk]]
[16:04:31.692]                   if (name != NAME && is.element(NAME, old_names)) 
[16:04:31.692]                     next
[16:04:31.692]                   args[[name]] <- ""
[16:04:31.692]                 }
[16:04:31.692]                 NAMES <- toupper(removed)
[16:04:31.692]                 for (kk in seq_along(NAMES)) {
[16:04:31.692]                   name <- removed[[kk]]
[16:04:31.692]                   NAME <- NAMES[[kk]]
[16:04:31.692]                   if (name != NAME && is.element(NAME, old_names)) 
[16:04:31.692]                     next
[16:04:31.692]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:04:31.692]                 }
[16:04:31.692]                 if (length(args) > 0) 
[16:04:31.692]                   base::do.call(base::Sys.setenv, args = args)
[16:04:31.692]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:04:31.692]             }
[16:04:31.692]             else {
[16:04:31.692]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:04:31.692]             }
[16:04:31.692]             {
[16:04:31.692]                 if (base::length(...future.futureOptionsAdded) > 
[16:04:31.692]                   0L) {
[16:04:31.692]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:04:31.692]                   base::names(opts) <- ...future.futureOptionsAdded
[16:04:31.692]                   base::options(opts)
[16:04:31.692]                 }
[16:04:31.692]                 {
[16:04:31.692]                   {
[16:04:31.692]                     NULL
[16:04:31.692]                     RNGkind("Mersenne-Twister")
[16:04:31.692]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[16:04:31.692]                       inherits = FALSE)
[16:04:31.692]                   }
[16:04:31.692]                   options(future.plan = NULL)
[16:04:31.692]                   if (is.na(NA_character_)) 
[16:04:31.692]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:04:31.692]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:04:31.692]                   future::plan(list(function (..., envir = parent.frame()) 
[16:04:31.692]                   {
[16:04:31.692]                     future <- SequentialFuture(..., envir = envir)
[16:04:31.692]                     if (!future$lazy) 
[16:04:31.692]                       future <- run(future)
[16:04:31.692]                     invisible(future)
[16:04:31.692]                   }), .cleanup = FALSE, .init = FALSE)
[16:04:31.692]                 }
[16:04:31.692]             }
[16:04:31.692]         }
[16:04:31.692]     })
[16:04:31.692]     if (TRUE) {
[16:04:31.692]         base::sink(type = "output", split = FALSE)
[16:04:31.692]         if (TRUE) {
[16:04:31.692]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:04:31.692]         }
[16:04:31.692]         else {
[16:04:31.692]             ...future.result["stdout"] <- base::list(NULL)
[16:04:31.692]         }
[16:04:31.692]         base::close(...future.stdout)
[16:04:31.692]         ...future.stdout <- NULL
[16:04:31.692]     }
[16:04:31.692]     ...future.result$conditions <- ...future.conditions
[16:04:31.692]     ...future.result$finished <- base::Sys.time()
[16:04:31.692]     ...future.result
[16:04:31.692] }
[16:04:31.710]  - Condition #80: ‘simpleMessage’, ‘message’, ‘condition’
[16:04:31.694] plan(): Setting new future strategy stack:
[16:04:31.710]  - Condition #81: ‘simpleMessage’, ‘message’, ‘condition’
[16:04:31.694] List of future strategies:
[16:04:31.694] 1. sequential:
[16:04:31.694]    - args: function (..., envir = parent.frame())
[16:04:31.694]    - tweaked: FALSE
[16:04:31.694]    - call: NULL
[16:04:31.710]  - Condition #82: ‘simpleMessage’, ‘message’, ‘condition’
[16:04:31.694] plan(): nbrOfWorkers() = 1
[16:04:31.710]  - Condition #83: ‘simpleMessage’, ‘message’, ‘condition’
[16:04:31.695] plan(): Setting new future strategy stack:
[16:04:31.710]  - Condition #84: ‘simpleMessage’, ‘message’, ‘condition’
[16:04:31.695] List of future strategies:
[16:04:31.695] 1. sequential:
[16:04:31.695]    - args: function (..., envir = parent.frame())
[16:04:31.695]    - tweaked: FALSE
[16:04:31.695]    - call: NULL
[16:04:31.711]  - Condition #85: ‘simpleMessage’, ‘message’, ‘condition’
[16:04:31.696] plan(): nbrOfWorkers() = 1
[16:04:31.711]  - Condition #86: ‘simpleMessage’, ‘message’, ‘condition’
[16:04:31.696] SequentialFuture started (and completed)
[16:04:31.711]  - Condition #87: ‘simpleMessage’, ‘message’, ‘condition’
[16:04:31.696] - Launch lazy future ... done
[16:04:31.711]  - Condition #88: ‘simpleMessage’, ‘message’, ‘condition’
[16:04:31.696] run() for ‘SequentialFuture’ ... done
[16:04:31.711] signalConditions() ... done
a = 10
[16:04:31.711] getGlobalsAndPackages() ...
[16:04:31.711] Searching for globals...
[16:04:31.712] - globals found: [3] ‘{’, ‘+’, ‘a’
[16:04:31.712] Searching for globals ... DONE
[16:04:31.712] Resolving globals: FALSE
[16:04:31.713] The total size of the 1 globals is 56 bytes (56 bytes)
[16:04:31.713] The total size of the 1 globals exported for future expression (‘{; a + 1; }’) is 56 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘a’ (56 bytes of class ‘numeric’)
[16:04:31.713] - globals: [1] ‘a’
[16:04:31.713] 
[16:04:31.713] getGlobalsAndPackages() ... DONE
[16:04:31.714] run() for ‘Future’ ...
[16:04:31.714] - state: ‘created’
[16:04:31.714] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[16:04:31.714] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[16:04:31.714] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[16:04:31.714]   - Field: ‘label’
[16:04:31.714]   - Field: ‘local’
[16:04:31.714]   - Field: ‘owner’
[16:04:31.714]   - Field: ‘envir’
[16:04:31.715]   - Field: ‘packages’
[16:04:31.715]   - Field: ‘gc’
[16:04:31.715]   - Field: ‘conditions’
[16:04:31.715]   - Field: ‘expr’
[16:04:31.715]   - Field: ‘uuid’
[16:04:31.715]   - Field: ‘seed’
[16:04:31.715]   - Field: ‘version’
[16:04:31.715]   - Field: ‘result’
[16:04:31.715]   - Field: ‘asynchronous’
[16:04:31.715]   - Field: ‘calls’
[16:04:31.715]   - Field: ‘globals’
[16:04:31.716]   - Field: ‘stdout’
[16:04:31.716]   - Field: ‘earlySignal’
[16:04:31.716]   - Field: ‘lazy’
[16:04:31.716]   - Field: ‘state’
[16:04:31.716] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[16:04:31.716] - Launch lazy future ...
[16:04:31.716] Packages needed by the future expression (n = 0): <none>
[16:04:31.716] Packages needed by future strategies (n = 0): <none>
[16:04:31.717] {
[16:04:31.717]     {
[16:04:31.717]         {
[16:04:31.717]             ...future.startTime <- base::Sys.time()
[16:04:31.717]             {
[16:04:31.717]                 {
[16:04:31.717]                   {
[16:04:31.717]                     base::local({
[16:04:31.717]                       has_future <- base::requireNamespace("future", 
[16:04:31.717]                         quietly = TRUE)
[16:04:31.717]                       if (has_future) {
[16:04:31.717]                         ns <- base::getNamespace("future")
[16:04:31.717]                         version <- ns[[".package"]][["version"]]
[16:04:31.717]                         if (is.null(version)) 
[16:04:31.717]                           version <- utils::packageVersion("future")
[16:04:31.717]                       }
[16:04:31.717]                       else {
[16:04:31.717]                         version <- NULL
[16:04:31.717]                       }
[16:04:31.717]                       if (!has_future || version < "1.8.0") {
[16:04:31.717]                         info <- base::c(r_version = base::gsub("R version ", 
[16:04:31.717]                           "", base::R.version$version.string), 
[16:04:31.717]                           platform = base::sprintf("%s (%s-bit)", 
[16:04:31.717]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:04:31.717]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[16:04:31.717]                             "release", "version")], collapse = " "), 
[16:04:31.717]                           hostname = base::Sys.info()[["nodename"]])
[16:04:31.717]                         info <- base::sprintf("%s: %s", base::names(info), 
[16:04:31.717]                           info)
[16:04:31.717]                         info <- base::paste(info, collapse = "; ")
[16:04:31.717]                         if (!has_future) {
[16:04:31.717]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:04:31.717]                             info)
[16:04:31.717]                         }
[16:04:31.717]                         else {
[16:04:31.717]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:04:31.717]                             info, version)
[16:04:31.717]                         }
[16:04:31.717]                         base::stop(msg)
[16:04:31.717]                       }
[16:04:31.717]                     })
[16:04:31.717]                   }
[16:04:31.717]                   options(future.plan = NULL)
[16:04:31.717]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:04:31.717]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:04:31.717]                 }
[16:04:31.717]                 ...future.workdir <- getwd()
[16:04:31.717]             }
[16:04:31.717]             ...future.oldOptions <- base::as.list(base::.Options)
[16:04:31.717]             ...future.oldEnvVars <- base::Sys.getenv()
[16:04:31.717]         }
[16:04:31.717]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:04:31.717]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:04:31.717]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:04:31.717]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:04:31.717]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:04:31.717]             future.stdout.windows.reencode = NULL, width = 80L)
[16:04:31.717]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:04:31.717]             base::names(...future.oldOptions))
[16:04:31.717]     }
[16:04:31.717]     if (FALSE) {
[16:04:31.717]     }
[16:04:31.717]     else {
[16:04:31.717]         if (TRUE) {
[16:04:31.717]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:04:31.717]                 open = "w")
[16:04:31.717]         }
[16:04:31.717]         else {
[16:04:31.717]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:04:31.717]                 windows = "NUL", "/dev/null"), open = "w")
[16:04:31.717]         }
[16:04:31.717]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:04:31.717]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:04:31.717]             base::sink(type = "output", split = FALSE)
[16:04:31.717]             base::close(...future.stdout)
[16:04:31.717]         }, add = TRUE)
[16:04:31.717]     }
[16:04:31.717]     ...future.frame <- base::sys.nframe()
[16:04:31.717]     ...future.conditions <- base::list()
[16:04:31.717]     ...future.rng <- base::globalenv()$.Random.seed
[16:04:31.717]     if (FALSE) {
[16:04:31.717]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:04:31.717]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:04:31.717]     }
[16:04:31.717]     ...future.result <- base::tryCatch({
[16:04:31.717]         base::withCallingHandlers({
[16:04:31.717]             ...future.value <- base::withVisible(base::local({
[16:04:31.717]                 a + 1
[16:04:31.717]             }))
[16:04:31.717]             future::FutureResult(value = ...future.value$value, 
[16:04:31.717]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:04:31.717]                   ...future.rng), globalenv = if (FALSE) 
[16:04:31.717]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:04:31.717]                     ...future.globalenv.names))
[16:04:31.717]                 else NULL, started = ...future.startTime, version = "1.8")
[16:04:31.717]         }, condition = base::local({
[16:04:31.717]             c <- base::c
[16:04:31.717]             inherits <- base::inherits
[16:04:31.717]             invokeRestart <- base::invokeRestart
[16:04:31.717]             length <- base::length
[16:04:31.717]             list <- base::list
[16:04:31.717]             seq.int <- base::seq.int
[16:04:31.717]             signalCondition <- base::signalCondition
[16:04:31.717]             sys.calls <- base::sys.calls
[16:04:31.717]             `[[` <- base::`[[`
[16:04:31.717]             `+` <- base::`+`
[16:04:31.717]             `<<-` <- base::`<<-`
[16:04:31.717]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:04:31.717]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:04:31.717]                   3L)]
[16:04:31.717]             }
[16:04:31.717]             function(cond) {
[16:04:31.717]                 is_error <- inherits(cond, "error")
[16:04:31.717]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:04:31.717]                   NULL)
[16:04:31.717]                 if (is_error) {
[16:04:31.717]                   sessionInformation <- function() {
[16:04:31.717]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:04:31.717]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:04:31.717]                       search = base::search(), system = base::Sys.info())
[16:04:31.717]                   }
[16:04:31.717]                   ...future.conditions[[length(...future.conditions) + 
[16:04:31.717]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:04:31.717]                     cond$call), session = sessionInformation(), 
[16:04:31.717]                     timestamp = base::Sys.time(), signaled = 0L)
[16:04:31.717]                   signalCondition(cond)
[16:04:31.717]                 }
[16:04:31.717]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:04:31.717]                 "immediateCondition"))) {
[16:04:31.717]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:04:31.717]                   ...future.conditions[[length(...future.conditions) + 
[16:04:31.717]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:04:31.717]                   if (TRUE && !signal) {
[16:04:31.717]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:04:31.717]                     {
[16:04:31.717]                       inherits <- base::inherits
[16:04:31.717]                       invokeRestart <- base::invokeRestart
[16:04:31.717]                       is.null <- base::is.null
[16:04:31.717]                       muffled <- FALSE
[16:04:31.717]                       if (inherits(cond, "message")) {
[16:04:31.717]                         muffled <- grepl(pattern, "muffleMessage")
[16:04:31.717]                         if (muffled) 
[16:04:31.717]                           invokeRestart("muffleMessage")
[16:04:31.717]                       }
[16:04:31.717]                       else if (inherits(cond, "warning")) {
[16:04:31.717]                         muffled <- grepl(pattern, "muffleWarning")
[16:04:31.717]                         if (muffled) 
[16:04:31.717]                           invokeRestart("muffleWarning")
[16:04:31.717]                       }
[16:04:31.717]                       else if (inherits(cond, "condition")) {
[16:04:31.717]                         if (!is.null(pattern)) {
[16:04:31.717]                           computeRestarts <- base::computeRestarts
[16:04:31.717]                           grepl <- base::grepl
[16:04:31.717]                           restarts <- computeRestarts(cond)
[16:04:31.717]                           for (restart in restarts) {
[16:04:31.717]                             name <- restart$name
[16:04:31.717]                             if (is.null(name)) 
[16:04:31.717]                               next
[16:04:31.717]                             if (!grepl(pattern, name)) 
[16:04:31.717]                               next
[16:04:31.717]                             invokeRestart(restart)
[16:04:31.717]                             muffled <- TRUE
[16:04:31.717]                             break
[16:04:31.717]                           }
[16:04:31.717]                         }
[16:04:31.717]                       }
[16:04:31.717]                       invisible(muffled)
[16:04:31.717]                     }
[16:04:31.717]                     muffleCondition(cond, pattern = "^muffle")
[16:04:31.717]                   }
[16:04:31.717]                 }
[16:04:31.717]                 else {
[16:04:31.717]                   if (TRUE) {
[16:04:31.717]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:04:31.717]                     {
[16:04:31.717]                       inherits <- base::inherits
[16:04:31.717]                       invokeRestart <- base::invokeRestart
[16:04:31.717]                       is.null <- base::is.null
[16:04:31.717]                       muffled <- FALSE
[16:04:31.717]                       if (inherits(cond, "message")) {
[16:04:31.717]                         muffled <- grepl(pattern, "muffleMessage")
[16:04:31.717]                         if (muffled) 
[16:04:31.717]                           invokeRestart("muffleMessage")
[16:04:31.717]                       }
[16:04:31.717]                       else if (inherits(cond, "warning")) {
[16:04:31.717]                         muffled <- grepl(pattern, "muffleWarning")
[16:04:31.717]                         if (muffled) 
[16:04:31.717]                           invokeRestart("muffleWarning")
[16:04:31.717]                       }
[16:04:31.717]                       else if (inherits(cond, "condition")) {
[16:04:31.717]                         if (!is.null(pattern)) {
[16:04:31.717]                           computeRestarts <- base::computeRestarts
[16:04:31.717]                           grepl <- base::grepl
[16:04:31.717]                           restarts <- computeRestarts(cond)
[16:04:31.717]                           for (restart in restarts) {
[16:04:31.717]                             name <- restart$name
[16:04:31.717]                             if (is.null(name)) 
[16:04:31.717]                               next
[16:04:31.717]                             if (!grepl(pattern, name)) 
[16:04:31.717]                               next
[16:04:31.717]                             invokeRestart(restart)
[16:04:31.717]                             muffled <- TRUE
[16:04:31.717]                             break
[16:04:31.717]                           }
[16:04:31.717]                         }
[16:04:31.717]                       }
[16:04:31.717]                       invisible(muffled)
[16:04:31.717]                     }
[16:04:31.717]                     muffleCondition(cond, pattern = "^muffle")
[16:04:31.717]                   }
[16:04:31.717]                 }
[16:04:31.717]             }
[16:04:31.717]         }))
[16:04:31.717]     }, error = function(ex) {
[16:04:31.717]         base::structure(base::list(value = NULL, visible = NULL, 
[16:04:31.717]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:04:31.717]                 ...future.rng), started = ...future.startTime, 
[16:04:31.717]             finished = Sys.time(), session_uuid = NA_character_, 
[16:04:31.717]             version = "1.8"), class = "FutureResult")
[16:04:31.717]     }, finally = {
[16:04:31.717]         if (!identical(...future.workdir, getwd())) 
[16:04:31.717]             setwd(...future.workdir)
[16:04:31.717]         {
[16:04:31.717]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:04:31.717]                 ...future.oldOptions$nwarnings <- NULL
[16:04:31.717]             }
[16:04:31.717]             base::options(...future.oldOptions)
[16:04:31.717]             if (.Platform$OS.type == "windows") {
[16:04:31.717]                 old_names <- names(...future.oldEnvVars)
[16:04:31.717]                 envs <- base::Sys.getenv()
[16:04:31.717]                 names <- names(envs)
[16:04:31.717]                 common <- intersect(names, old_names)
[16:04:31.717]                 added <- setdiff(names, old_names)
[16:04:31.717]                 removed <- setdiff(old_names, names)
[16:04:31.717]                 changed <- common[...future.oldEnvVars[common] != 
[16:04:31.717]                   envs[common]]
[16:04:31.717]                 NAMES <- toupper(changed)
[16:04:31.717]                 args <- list()
[16:04:31.717]                 for (kk in seq_along(NAMES)) {
[16:04:31.717]                   name <- changed[[kk]]
[16:04:31.717]                   NAME <- NAMES[[kk]]
[16:04:31.717]                   if (name != NAME && is.element(NAME, old_names)) 
[16:04:31.717]                     next
[16:04:31.717]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:04:31.717]                 }
[16:04:31.717]                 NAMES <- toupper(added)
[16:04:31.717]                 for (kk in seq_along(NAMES)) {
[16:04:31.717]                   name <- added[[kk]]
[16:04:31.717]                   NAME <- NAMES[[kk]]
[16:04:31.717]                   if (name != NAME && is.element(NAME, old_names)) 
[16:04:31.717]                     next
[16:04:31.717]                   args[[name]] <- ""
[16:04:31.717]                 }
[16:04:31.717]                 NAMES <- toupper(removed)
[16:04:31.717]                 for (kk in seq_along(NAMES)) {
[16:04:31.717]                   name <- removed[[kk]]
[16:04:31.717]                   NAME <- NAMES[[kk]]
[16:04:31.717]                   if (name != NAME && is.element(NAME, old_names)) 
[16:04:31.717]                     next
[16:04:31.717]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:04:31.717]                 }
[16:04:31.717]                 if (length(args) > 0) 
[16:04:31.717]                   base::do.call(base::Sys.setenv, args = args)
[16:04:31.717]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:04:31.717]             }
[16:04:31.717]             else {
[16:04:31.717]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:04:31.717]             }
[16:04:31.717]             {
[16:04:31.717]                 if (base::length(...future.futureOptionsAdded) > 
[16:04:31.717]                   0L) {
[16:04:31.717]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:04:31.717]                   base::names(opts) <- ...future.futureOptionsAdded
[16:04:31.717]                   base::options(opts)
[16:04:31.717]                 }
[16:04:31.717]                 {
[16:04:31.717]                   {
[16:04:31.717]                     NULL
[16:04:31.717]                     RNGkind("Mersenne-Twister")
[16:04:31.717]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[16:04:31.717]                       inherits = FALSE)
[16:04:31.717]                   }
[16:04:31.717]                   options(future.plan = NULL)
[16:04:31.717]                   if (is.na(NA_character_)) 
[16:04:31.717]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:04:31.717]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:04:31.717]                   future::plan(list(function (..., envir = parent.frame()) 
[16:04:31.717]                   {
[16:04:31.717]                     future <- SequentialFuture(..., envir = envir)
[16:04:31.717]                     if (!future$lazy) 
[16:04:31.717]                       future <- run(future)
[16:04:31.717]                     invisible(future)
[16:04:31.717]                   }), .cleanup = FALSE, .init = FALSE)
[16:04:31.717]                 }
[16:04:31.717]             }
[16:04:31.717]         }
[16:04:31.717]     })
[16:04:31.717]     if (TRUE) {
[16:04:31.717]         base::sink(type = "output", split = FALSE)
[16:04:31.717]         if (TRUE) {
[16:04:31.717]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:04:31.717]         }
[16:04:31.717]         else {
[16:04:31.717]             ...future.result["stdout"] <- base::list(NULL)
[16:04:31.717]         }
[16:04:31.717]         base::close(...future.stdout)
[16:04:31.717]         ...future.stdout <- NULL
[16:04:31.717]     }
[16:04:31.717]     ...future.result$conditions <- ...future.conditions
[16:04:31.717]     ...future.result$finished <- base::Sys.time()
[16:04:31.717]     ...future.result
[16:04:31.717] }
[16:04:31.718] assign_globals() ...
[16:04:31.718] List of 1
[16:04:31.718]  $ a: num 10
[16:04:31.718]  - attr(*, "where")=List of 1
[16:04:31.718]   ..$ a:<environment: R_EmptyEnv> 
[16:04:31.718]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[16:04:31.718]  - attr(*, "resolved")= logi FALSE
[16:04:31.718]  - attr(*, "total_size")= num 56
[16:04:31.718]  - attr(*, "already-done")= logi TRUE
[16:04:31.721] - copied ‘a’ to environment
[16:04:31.721] assign_globals() ... done
[16:04:31.721] plan(): Setting new future strategy stack:
[16:04:31.721] List of future strategies:
[16:04:31.721] 1. sequential:
[16:04:31.721]    - args: function (..., envir = parent.frame())
[16:04:31.721]    - tweaked: FALSE
[16:04:31.721]    - call: NULL
[16:04:31.721] plan(): nbrOfWorkers() = 1
[16:04:31.722] plan(): Setting new future strategy stack:
[16:04:31.722] List of future strategies:
[16:04:31.722] 1. sequential:
[16:04:31.722]    - args: function (..., envir = parent.frame())
[16:04:31.722]    - tweaked: FALSE
[16:04:31.722]    - call: plan(strategy)
[16:04:31.722] plan(): nbrOfWorkers() = 1
[16:04:31.723] SequentialFuture started (and completed)
[16:04:31.723] - Launch lazy future ... done
[16:04:31.723] run() for ‘SequentialFuture’ ... done
b = 11
*** %<-% with ‘sequential’ futures ... DONE
Testing with 1 cores ... DONE
Testing with 2 cores ...
*** %<-% with ‘multicore’ futures ...
[16:04:31.728] plan(): Setting new future strategy stack:
[16:04:31.728] List of future strategies:
[16:04:31.728] 1. multicore:
[16:04:31.728]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[16:04:31.728]    - tweaked: FALSE
[16:04:31.728]    - call: plan(strategy)
[16:04:31.732] plan(): nbrOfWorkers() = 2
** Future evaluation without globals
[16:04:31.732] getGlobalsAndPackages() ...
[16:04:31.732] Searching for globals...
[16:04:31.734] - globals found: [2] ‘{’, ‘<-’
[16:04:31.734] Searching for globals ... DONE
[16:04:31.734] Resolving globals: FALSE
[16:04:31.734] 
[16:04:31.734] 
[16:04:31.735] getGlobalsAndPackages() ... DONE
[16:04:31.735] run() for ‘Future’ ...
[16:04:31.735] - state: ‘created’
[16:04:31.735] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[16:04:31.738] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[16:04:31.739] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[16:04:31.739]   - Field: ‘label’
[16:04:31.739]   - Field: ‘local’
[16:04:31.739]   - Field: ‘owner’
[16:04:31.739]   - Field: ‘envir’
[16:04:31.739]   - Field: ‘workers’
[16:04:31.739]   - Field: ‘packages’
[16:04:31.739]   - Field: ‘gc’
[16:04:31.739]   - Field: ‘job’
[16:04:31.739]   - Field: ‘conditions’
[16:04:31.739]   - Field: ‘expr’
[16:04:31.740]   - Field: ‘uuid’
[16:04:31.740]   - Field: ‘seed’
[16:04:31.740]   - Field: ‘version’
[16:04:31.740]   - Field: ‘result’
[16:04:31.740]   - Field: ‘asynchronous’
[16:04:31.740]   - Field: ‘calls’
[16:04:31.740]   - Field: ‘globals’
[16:04:31.740]   - Field: ‘stdout’
[16:04:31.740]   - Field: ‘earlySignal’
[16:04:31.740]   - Field: ‘lazy’
[16:04:31.740]   - Field: ‘state’
[16:04:31.741] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[16:04:31.741] - Launch lazy future ...
[16:04:31.742] Packages needed by the future expression (n = 0): <none>
[16:04:31.742] Packages needed by future strategies (n = 0): <none>
[16:04:31.742] {
[16:04:31.742]     {
[16:04:31.742]         {
[16:04:31.742]             ...future.startTime <- base::Sys.time()
[16:04:31.742]             {
[16:04:31.742]                 {
[16:04:31.742]                   {
[16:04:31.742]                     {
[16:04:31.742]                       base::local({
[16:04:31.742]                         has_future <- base::requireNamespace("future", 
[16:04:31.742]                           quietly = TRUE)
[16:04:31.742]                         if (has_future) {
[16:04:31.742]                           ns <- base::getNamespace("future")
[16:04:31.742]                           version <- ns[[".package"]][["version"]]
[16:04:31.742]                           if (is.null(version)) 
[16:04:31.742]                             version <- utils::packageVersion("future")
[16:04:31.742]                         }
[16:04:31.742]                         else {
[16:04:31.742]                           version <- NULL
[16:04:31.742]                         }
[16:04:31.742]                         if (!has_future || version < "1.8.0") {
[16:04:31.742]                           info <- base::c(r_version = base::gsub("R version ", 
[16:04:31.742]                             "", base::R.version$version.string), 
[16:04:31.742]                             platform = base::sprintf("%s (%s-bit)", 
[16:04:31.742]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:04:31.742]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[16:04:31.742]                               "release", "version")], collapse = " "), 
[16:04:31.742]                             hostname = base::Sys.info()[["nodename"]])
[16:04:31.742]                           info <- base::sprintf("%s: %s", base::names(info), 
[16:04:31.742]                             info)
[16:04:31.742]                           info <- base::paste(info, collapse = "; ")
[16:04:31.742]                           if (!has_future) {
[16:04:31.742]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:04:31.742]                               info)
[16:04:31.742]                           }
[16:04:31.742]                           else {
[16:04:31.742]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:04:31.742]                               info, version)
[16:04:31.742]                           }
[16:04:31.742]                           base::stop(msg)
[16:04:31.742]                         }
[16:04:31.742]                       })
[16:04:31.742]                     }
[16:04:31.742]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[16:04:31.742]                     base::options(mc.cores = 1L)
[16:04:31.742]                   }
[16:04:31.742]                   options(future.plan = NULL)
[16:04:31.742]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:04:31.742]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:04:31.742]                 }
[16:04:31.742]                 ...future.workdir <- getwd()
[16:04:31.742]             }
[16:04:31.742]             ...future.oldOptions <- base::as.list(base::.Options)
[16:04:31.742]             ...future.oldEnvVars <- base::Sys.getenv()
[16:04:31.742]         }
[16:04:31.742]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:04:31.742]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:04:31.742]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:04:31.742]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:04:31.742]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:04:31.742]             future.stdout.windows.reencode = NULL, width = 80L)
[16:04:31.742]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:04:31.742]             base::names(...future.oldOptions))
[16:04:31.742]     }
[16:04:31.742]     if (FALSE) {
[16:04:31.742]     }
[16:04:31.742]     else {
[16:04:31.742]         if (TRUE) {
[16:04:31.742]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:04:31.742]                 open = "w")
[16:04:31.742]         }
[16:04:31.742]         else {
[16:04:31.742]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:04:31.742]                 windows = "NUL", "/dev/null"), open = "w")
[16:04:31.742]         }
[16:04:31.742]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:04:31.742]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:04:31.742]             base::sink(type = "output", split = FALSE)
[16:04:31.742]             base::close(...future.stdout)
[16:04:31.742]         }, add = TRUE)
[16:04:31.742]     }
[16:04:31.742]     ...future.frame <- base::sys.nframe()
[16:04:31.742]     ...future.conditions <- base::list()
[16:04:31.742]     ...future.rng <- base::globalenv()$.Random.seed
[16:04:31.742]     if (FALSE) {
[16:04:31.742]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:04:31.742]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:04:31.742]     }
[16:04:31.742]     ...future.result <- base::tryCatch({
[16:04:31.742]         base::withCallingHandlers({
[16:04:31.742]             ...future.value <- base::withVisible(base::local({
[16:04:31.742]                 withCallingHandlers({
[16:04:31.742]                   {
[16:04:31.742]                     x <- 1
[16:04:31.742]                   }
[16:04:31.742]                 }, immediateCondition = function(cond) {
[16:04:31.742]                   save_rds <- function (object, pathname, ...) 
[16:04:31.742]                   {
[16:04:31.742]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[16:04:31.742]                     if (file_test("-f", pathname_tmp)) {
[16:04:31.742]                       fi_tmp <- file.info(pathname_tmp)
[16:04:31.742]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[16:04:31.742]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:04:31.742]                         fi_tmp[["mtime"]])
[16:04:31.742]                     }
[16:04:31.742]                     tryCatch({
[16:04:31.742]                       saveRDS(object, file = pathname_tmp, ...)
[16:04:31.742]                     }, error = function(ex) {
[16:04:31.742]                       msg <- conditionMessage(ex)
[16:04:31.742]                       fi_tmp <- file.info(pathname_tmp)
[16:04:31.742]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[16:04:31.742]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:04:31.742]                         fi_tmp[["mtime"]], msg)
[16:04:31.742]                       ex$message <- msg
[16:04:31.742]                       stop(ex)
[16:04:31.742]                     })
[16:04:31.742]                     stopifnot(file_test("-f", pathname_tmp))
[16:04:31.742]                     res <- file.rename(from = pathname_tmp, to = pathname)
[16:04:31.742]                     if (!res || file_test("-f", pathname_tmp)) {
[16:04:31.742]                       fi_tmp <- file.info(pathname_tmp)
[16:04:31.742]                       fi <- file.info(pathname)
[16:04:31.742]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[16:04:31.742]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:04:31.742]                         fi_tmp[["mtime"]], sQuote(pathname), 
[16:04:31.742]                         fi[["size"]], fi[["mtime"]])
[16:04:31.742]                       stop(msg)
[16:04:31.742]                     }
[16:04:31.742]                     invisible(pathname)
[16:04:31.742]                   }
[16:04:31.742]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[16:04:31.742]                     rootPath = tempdir()) 
[16:04:31.742]                   {
[16:04:31.742]                     obj <- list(time = Sys.time(), condition = cond)
[16:04:31.742]                     file <- tempfile(pattern = class(cond)[1], 
[16:04:31.742]                       tmpdir = path, fileext = ".rds")
[16:04:31.742]                     save_rds(obj, file)
[16:04:31.742]                   }
[16:04:31.742]                   saveImmediateCondition(cond, path = "/tmp/Rtmpe612Wd/.future/immediateConditions")
[16:04:31.742]                   muffleCondition <- function (cond, pattern = "^muffle") 
[16:04:31.742]                   {
[16:04:31.742]                     inherits <- base::inherits
[16:04:31.742]                     invokeRestart <- base::invokeRestart
[16:04:31.742]                     is.null <- base::is.null
[16:04:31.742]                     muffled <- FALSE
[16:04:31.742]                     if (inherits(cond, "message")) {
[16:04:31.742]                       muffled <- grepl(pattern, "muffleMessage")
[16:04:31.742]                       if (muffled) 
[16:04:31.742]                         invokeRestart("muffleMessage")
[16:04:31.742]                     }
[16:04:31.742]                     else if (inherits(cond, "warning")) {
[16:04:31.742]                       muffled <- grepl(pattern, "muffleWarning")
[16:04:31.742]                       if (muffled) 
[16:04:31.742]                         invokeRestart("muffleWarning")
[16:04:31.742]                     }
[16:04:31.742]                     else if (inherits(cond, "condition")) {
[16:04:31.742]                       if (!is.null(pattern)) {
[16:04:31.742]                         computeRestarts <- base::computeRestarts
[16:04:31.742]                         grepl <- base::grepl
[16:04:31.742]                         restarts <- computeRestarts(cond)
[16:04:31.742]                         for (restart in restarts) {
[16:04:31.742]                           name <- restart$name
[16:04:31.742]                           if (is.null(name)) 
[16:04:31.742]                             next
[16:04:31.742]                           if (!grepl(pattern, name)) 
[16:04:31.742]                             next
[16:04:31.742]                           invokeRestart(restart)
[16:04:31.742]                           muffled <- TRUE
[16:04:31.742]                           break
[16:04:31.742]                         }
[16:04:31.742]                       }
[16:04:31.742]                     }
[16:04:31.742]                     invisible(muffled)
[16:04:31.742]                   }
[16:04:31.742]                   muffleCondition(cond)
[16:04:31.742]                 })
[16:04:31.742]             }))
[16:04:31.742]             future::FutureResult(value = ...future.value$value, 
[16:04:31.742]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:04:31.742]                   ...future.rng), globalenv = if (FALSE) 
[16:04:31.742]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:04:31.742]                     ...future.globalenv.names))
[16:04:31.742]                 else NULL, started = ...future.startTime, version = "1.8")
[16:04:31.742]         }, condition = base::local({
[16:04:31.742]             c <- base::c
[16:04:31.742]             inherits <- base::inherits
[16:04:31.742]             invokeRestart <- base::invokeRestart
[16:04:31.742]             length <- base::length
[16:04:31.742]             list <- base::list
[16:04:31.742]             seq.int <- base::seq.int
[16:04:31.742]             signalCondition <- base::signalCondition
[16:04:31.742]             sys.calls <- base::sys.calls
[16:04:31.742]             `[[` <- base::`[[`
[16:04:31.742]             `+` <- base::`+`
[16:04:31.742]             `<<-` <- base::`<<-`
[16:04:31.742]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:04:31.742]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:04:31.742]                   3L)]
[16:04:31.742]             }
[16:04:31.742]             function(cond) {
[16:04:31.742]                 is_error <- inherits(cond, "error")
[16:04:31.742]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:04:31.742]                   NULL)
[16:04:31.742]                 if (is_error) {
[16:04:31.742]                   sessionInformation <- function() {
[16:04:31.742]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:04:31.742]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:04:31.742]                       search = base::search(), system = base::Sys.info())
[16:04:31.742]                   }
[16:04:31.742]                   ...future.conditions[[length(...future.conditions) + 
[16:04:31.742]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:04:31.742]                     cond$call), session = sessionInformation(), 
[16:04:31.742]                     timestamp = base::Sys.time(), signaled = 0L)
[16:04:31.742]                   signalCondition(cond)
[16:04:31.742]                 }
[16:04:31.742]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:04:31.742]                 "immediateCondition"))) {
[16:04:31.742]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:04:31.742]                   ...future.conditions[[length(...future.conditions) + 
[16:04:31.742]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:04:31.742]                   if (TRUE && !signal) {
[16:04:31.742]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:04:31.742]                     {
[16:04:31.742]                       inherits <- base::inherits
[16:04:31.742]                       invokeRestart <- base::invokeRestart
[16:04:31.742]                       is.null <- base::is.null
[16:04:31.742]                       muffled <- FALSE
[16:04:31.742]                       if (inherits(cond, "message")) {
[16:04:31.742]                         muffled <- grepl(pattern, "muffleMessage")
[16:04:31.742]                         if (muffled) 
[16:04:31.742]                           invokeRestart("muffleMessage")
[16:04:31.742]                       }
[16:04:31.742]                       else if (inherits(cond, "warning")) {
[16:04:31.742]                         muffled <- grepl(pattern, "muffleWarning")
[16:04:31.742]                         if (muffled) 
[16:04:31.742]                           invokeRestart("muffleWarning")
[16:04:31.742]                       }
[16:04:31.742]                       else if (inherits(cond, "condition")) {
[16:04:31.742]                         if (!is.null(pattern)) {
[16:04:31.742]                           computeRestarts <- base::computeRestarts
[16:04:31.742]                           grepl <- base::grepl
[16:04:31.742]                           restarts <- computeRestarts(cond)
[16:04:31.742]                           for (restart in restarts) {
[16:04:31.742]                             name <- restart$name
[16:04:31.742]                             if (is.null(name)) 
[16:04:31.742]                               next
[16:04:31.742]                             if (!grepl(pattern, name)) 
[16:04:31.742]                               next
[16:04:31.742]                             invokeRestart(restart)
[16:04:31.742]                             muffled <- TRUE
[16:04:31.742]                             break
[16:04:31.742]                           }
[16:04:31.742]                         }
[16:04:31.742]                       }
[16:04:31.742]                       invisible(muffled)
[16:04:31.742]                     }
[16:04:31.742]                     muffleCondition(cond, pattern = "^muffle")
[16:04:31.742]                   }
[16:04:31.742]                 }
[16:04:31.742]                 else {
[16:04:31.742]                   if (TRUE) {
[16:04:31.742]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:04:31.742]                     {
[16:04:31.742]                       inherits <- base::inherits
[16:04:31.742]                       invokeRestart <- base::invokeRestart
[16:04:31.742]                       is.null <- base::is.null
[16:04:31.742]                       muffled <- FALSE
[16:04:31.742]                       if (inherits(cond, "message")) {
[16:04:31.742]                         muffled <- grepl(pattern, "muffleMessage")
[16:04:31.742]                         if (muffled) 
[16:04:31.742]                           invokeRestart("muffleMessage")
[16:04:31.742]                       }
[16:04:31.742]                       else if (inherits(cond, "warning")) {
[16:04:31.742]                         muffled <- grepl(pattern, "muffleWarning")
[16:04:31.742]                         if (muffled) 
[16:04:31.742]                           invokeRestart("muffleWarning")
[16:04:31.742]                       }
[16:04:31.742]                       else if (inherits(cond, "condition")) {
[16:04:31.742]                         if (!is.null(pattern)) {
[16:04:31.742]                           computeRestarts <- base::computeRestarts
[16:04:31.742]                           grepl <- base::grepl
[16:04:31.742]                           restarts <- computeRestarts(cond)
[16:04:31.742]                           for (restart in restarts) {
[16:04:31.742]                             name <- restart$name
[16:04:31.742]                             if (is.null(name)) 
[16:04:31.742]                               next
[16:04:31.742]                             if (!grepl(pattern, name)) 
[16:04:31.742]                               next
[16:04:31.742]                             invokeRestart(restart)
[16:04:31.742]                             muffled <- TRUE
[16:04:31.742]                             break
[16:04:31.742]                           }
[16:04:31.742]                         }
[16:04:31.742]                       }
[16:04:31.742]                       invisible(muffled)
[16:04:31.742]                     }
[16:04:31.742]                     muffleCondition(cond, pattern = "^muffle")
[16:04:31.742]                   }
[16:04:31.742]                 }
[16:04:31.742]             }
[16:04:31.742]         }))
[16:04:31.742]     }, error = function(ex) {
[16:04:31.742]         base::structure(base::list(value = NULL, visible = NULL, 
[16:04:31.742]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:04:31.742]                 ...future.rng), started = ...future.startTime, 
[16:04:31.742]             finished = Sys.time(), session_uuid = NA_character_, 
[16:04:31.742]             version = "1.8"), class = "FutureResult")
[16:04:31.742]     }, finally = {
[16:04:31.742]         if (!identical(...future.workdir, getwd())) 
[16:04:31.742]             setwd(...future.workdir)
[16:04:31.742]         {
[16:04:31.742]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:04:31.742]                 ...future.oldOptions$nwarnings <- NULL
[16:04:31.742]             }
[16:04:31.742]             base::options(...future.oldOptions)
[16:04:31.742]             if (.Platform$OS.type == "windows") {
[16:04:31.742]                 old_names <- names(...future.oldEnvVars)
[16:04:31.742]                 envs <- base::Sys.getenv()
[16:04:31.742]                 names <- names(envs)
[16:04:31.742]                 common <- intersect(names, old_names)
[16:04:31.742]                 added <- setdiff(names, old_names)
[16:04:31.742]                 removed <- setdiff(old_names, names)
[16:04:31.742]                 changed <- common[...future.oldEnvVars[common] != 
[16:04:31.742]                   envs[common]]
[16:04:31.742]                 NAMES <- toupper(changed)
[16:04:31.742]                 args <- list()
[16:04:31.742]                 for (kk in seq_along(NAMES)) {
[16:04:31.742]                   name <- changed[[kk]]
[16:04:31.742]                   NAME <- NAMES[[kk]]
[16:04:31.742]                   if (name != NAME && is.element(NAME, old_names)) 
[16:04:31.742]                     next
[16:04:31.742]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:04:31.742]                 }
[16:04:31.742]                 NAMES <- toupper(added)
[16:04:31.742]                 for (kk in seq_along(NAMES)) {
[16:04:31.742]                   name <- added[[kk]]
[16:04:31.742]                   NAME <- NAMES[[kk]]
[16:04:31.742]                   if (name != NAME && is.element(NAME, old_names)) 
[16:04:31.742]                     next
[16:04:31.742]                   args[[name]] <- ""
[16:04:31.742]                 }
[16:04:31.742]                 NAMES <- toupper(removed)
[16:04:31.742]                 for (kk in seq_along(NAMES)) {
[16:04:31.742]                   name <- removed[[kk]]
[16:04:31.742]                   NAME <- NAMES[[kk]]
[16:04:31.742]                   if (name != NAME && is.element(NAME, old_names)) 
[16:04:31.742]                     next
[16:04:31.742]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:04:31.742]                 }
[16:04:31.742]                 if (length(args) > 0) 
[16:04:31.742]                   base::do.call(base::Sys.setenv, args = args)
[16:04:31.742]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:04:31.742]             }
[16:04:31.742]             else {
[16:04:31.742]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:04:31.742]             }
[16:04:31.742]             {
[16:04:31.742]                 if (base::length(...future.futureOptionsAdded) > 
[16:04:31.742]                   0L) {
[16:04:31.742]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:04:31.742]                   base::names(opts) <- ...future.futureOptionsAdded
[16:04:31.742]                   base::options(opts)
[16:04:31.742]                 }
[16:04:31.742]                 {
[16:04:31.742]                   {
[16:04:31.742]                     base::options(mc.cores = ...future.mc.cores.old)
[16:04:31.742]                     NULL
[16:04:31.742]                   }
[16:04:31.742]                   options(future.plan = NULL)
[16:04:31.742]                   if (is.na(NA_character_)) 
[16:04:31.742]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:04:31.742]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:04:31.742]                   future::plan(list(function (..., workers = availableCores(constraints = "multicore"), 
[16:04:31.742]                     envir = parent.frame()) 
[16:04:31.742]                   {
[16:04:31.742]                     default_workers <- missing(workers)
[16:04:31.742]                     if (is.function(workers)) 
[16:04:31.742]                       workers <- workers()
[16:04:31.742]                     workers <- structure(as.integer(workers), 
[16:04:31.742]                       class = class(workers))
[16:04:31.742]                     stop_if_not(is.finite(workers), workers >= 
[16:04:31.742]                       1L)
[16:04:31.742]                     if ((workers == 1L && !inherits(workers, 
[16:04:31.742]                       "AsIs")) || !supportsMulticore(warn = TRUE)) {
[16:04:31.742]                       if (default_workers) 
[16:04:31.742]                         supportsMulticore(warn = TRUE)
[16:04:31.742]                       return(sequential(..., envir = envir))
[16:04:31.742]                     }
[16:04:31.742]                     oopts <- options(mc.cores = workers)
[16:04:31.742]                     on.exit(options(oopts))
[16:04:31.742]                     future <- MulticoreFuture(..., workers = workers, 
[16:04:31.742]                       envir = envir)
[16:04:31.742]                     if (!future$lazy) 
[16:04:31.742]                       future <- run(future)
[16:04:31.742]                     invisible(future)
[16:04:31.742]                   }), .cleanup = FALSE, .init = FALSE)
[16:04:31.742]                 }
[16:04:31.742]             }
[16:04:31.742]         }
[16:04:31.742]     })
[16:04:31.742]     if (TRUE) {
[16:04:31.742]         base::sink(type = "output", split = FALSE)
[16:04:31.742]         if (TRUE) {
[16:04:31.742]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:04:31.742]         }
[16:04:31.742]         else {
[16:04:31.742]             ...future.result["stdout"] <- base::list(NULL)
[16:04:31.742]         }
[16:04:31.742]         base::close(...future.stdout)
[16:04:31.742]         ...future.stdout <- NULL
[16:04:31.742]     }
[16:04:31.742]     ...future.result$conditions <- ...future.conditions
[16:04:31.742]     ...future.result$finished <- base::Sys.time()
[16:04:31.742]     ...future.result
[16:04:31.742] }
[16:04:31.744] requestCore(): workers = 2
[16:04:31.747] MulticoreFuture started
[16:04:31.748] - Launch lazy future ... done
[16:04:31.748] run() for ‘MulticoreFuture’ ... done
[16:04:31.748] plan(): Setting new future strategy stack:
[16:04:31.748] List of future strategies:
[16:04:31.748] 1. sequential:
[16:04:31.748]    - args: function (..., envir = parent.frame())
[16:04:31.748]    - tweaked: FALSE
[16:04:31.748]    - call: NULL
[16:04:31.749] plan(): nbrOfWorkers() = 1
[16:04:31.749] result() for MulticoreFuture ...
[16:04:31.751] plan(): Setting new future strategy stack:
[16:04:31.751] List of future strategies:
[16:04:31.751] 1. multicore:
[16:04:31.751]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[16:04:31.751]    - tweaked: FALSE
[16:04:31.751]    - call: plan(strategy)
[16:04:31.756] plan(): nbrOfWorkers() = 2
[16:04:31.760] result() for MulticoreFuture ...
[16:04:31.760] result() for MulticoreFuture ... done
[16:04:31.761] result() for MulticoreFuture ... done
[16:04:31.761] result() for MulticoreFuture ...
[16:04:31.761] result() for MulticoreFuture ... done
** Future evaluation with globals
[16:04:31.761] getGlobalsAndPackages() ...
[16:04:31.761] Searching for globals...
[16:04:31.763] - globals found: [3] ‘{’, ‘<-’, ‘a’
[16:04:31.763] Searching for globals ... DONE
[16:04:31.763] Resolving globals: FALSE
[16:04:31.763] The total size of the 1 globals is 56 bytes (56 bytes)
[16:04:31.764] The total size of the 1 globals exported for future expression (‘{; x <- a; }’) is 56 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘a’ (56 bytes of class ‘numeric’)
[16:04:31.764] - globals: [1] ‘a’
[16:04:31.764] 
[16:04:31.764] getGlobalsAndPackages() ... DONE
[16:04:31.764] run() for ‘Future’ ...
[16:04:31.765] - state: ‘created’
[16:04:31.765] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[16:04:31.769] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[16:04:31.769] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[16:04:31.769]   - Field: ‘label’
[16:04:31.769]   - Field: ‘local’
[16:04:31.769]   - Field: ‘owner’
[16:04:31.769]   - Field: ‘envir’
[16:04:31.769]   - Field: ‘workers’
[16:04:31.769]   - Field: ‘packages’
[16:04:31.770]   - Field: ‘gc’
[16:04:31.770]   - Field: ‘job’
[16:04:31.770]   - Field: ‘conditions’
[16:04:31.770]   - Field: ‘expr’
[16:04:31.770]   - Field: ‘uuid’
[16:04:31.770]   - Field: ‘seed’
[16:04:31.770]   - Field: ‘version’
[16:04:31.770]   - Field: ‘result’
[16:04:31.770]   - Field: ‘asynchronous’
[16:04:31.771]   - Field: ‘calls’
[16:04:31.771]   - Field: ‘globals’
[16:04:31.771]   - Field: ‘stdout’
[16:04:31.771]   - Field: ‘earlySignal’
[16:04:31.771]   - Field: ‘lazy’
[16:04:31.771]   - Field: ‘state’
[16:04:31.771] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[16:04:31.771] - Launch lazy future ...
[16:04:31.772] Packages needed by the future expression (n = 0): <none>
[16:04:31.772] Packages needed by future strategies (n = 0): <none>
[16:04:31.772] {
[16:04:31.772]     {
[16:04:31.772]         {
[16:04:31.772]             ...future.startTime <- base::Sys.time()
[16:04:31.772]             {
[16:04:31.772]                 {
[16:04:31.772]                   {
[16:04:31.772]                     {
[16:04:31.772]                       base::local({
[16:04:31.772]                         has_future <- base::requireNamespace("future", 
[16:04:31.772]                           quietly = TRUE)
[16:04:31.772]                         if (has_future) {
[16:04:31.772]                           ns <- base::getNamespace("future")
[16:04:31.772]                           version <- ns[[".package"]][["version"]]
[16:04:31.772]                           if (is.null(version)) 
[16:04:31.772]                             version <- utils::packageVersion("future")
[16:04:31.772]                         }
[16:04:31.772]                         else {
[16:04:31.772]                           version <- NULL
[16:04:31.772]                         }
[16:04:31.772]                         if (!has_future || version < "1.8.0") {
[16:04:31.772]                           info <- base::c(r_version = base::gsub("R version ", 
[16:04:31.772]                             "", base::R.version$version.string), 
[16:04:31.772]                             platform = base::sprintf("%s (%s-bit)", 
[16:04:31.772]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:04:31.772]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[16:04:31.772]                               "release", "version")], collapse = " "), 
[16:04:31.772]                             hostname = base::Sys.info()[["nodename"]])
[16:04:31.772]                           info <- base::sprintf("%s: %s", base::names(info), 
[16:04:31.772]                             info)
[16:04:31.772]                           info <- base::paste(info, collapse = "; ")
[16:04:31.772]                           if (!has_future) {
[16:04:31.772]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:04:31.772]                               info)
[16:04:31.772]                           }
[16:04:31.772]                           else {
[16:04:31.772]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:04:31.772]                               info, version)
[16:04:31.772]                           }
[16:04:31.772]                           base::stop(msg)
[16:04:31.772]                         }
[16:04:31.772]                       })
[16:04:31.772]                     }
[16:04:31.772]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[16:04:31.772]                     base::options(mc.cores = 1L)
[16:04:31.772]                   }
[16:04:31.772]                   options(future.plan = NULL)
[16:04:31.772]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:04:31.772]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:04:31.772]                 }
[16:04:31.772]                 ...future.workdir <- getwd()
[16:04:31.772]             }
[16:04:31.772]             ...future.oldOptions <- base::as.list(base::.Options)
[16:04:31.772]             ...future.oldEnvVars <- base::Sys.getenv()
[16:04:31.772]         }
[16:04:31.772]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:04:31.772]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:04:31.772]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:04:31.772]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:04:31.772]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:04:31.772]             future.stdout.windows.reencode = NULL, width = 80L)
[16:04:31.772]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:04:31.772]             base::names(...future.oldOptions))
[16:04:31.772]     }
[16:04:31.772]     if (FALSE) {
[16:04:31.772]     }
[16:04:31.772]     else {
[16:04:31.772]         if (TRUE) {
[16:04:31.772]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:04:31.772]                 open = "w")
[16:04:31.772]         }
[16:04:31.772]         else {
[16:04:31.772]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:04:31.772]                 windows = "NUL", "/dev/null"), open = "w")
[16:04:31.772]         }
[16:04:31.772]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:04:31.772]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:04:31.772]             base::sink(type = "output", split = FALSE)
[16:04:31.772]             base::close(...future.stdout)
[16:04:31.772]         }, add = TRUE)
[16:04:31.772]     }
[16:04:31.772]     ...future.frame <- base::sys.nframe()
[16:04:31.772]     ...future.conditions <- base::list()
[16:04:31.772]     ...future.rng <- base::globalenv()$.Random.seed
[16:04:31.772]     if (FALSE) {
[16:04:31.772]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:04:31.772]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:04:31.772]     }
[16:04:31.772]     ...future.result <- base::tryCatch({
[16:04:31.772]         base::withCallingHandlers({
[16:04:31.772]             ...future.value <- base::withVisible(base::local({
[16:04:31.772]                 withCallingHandlers({
[16:04:31.772]                   {
[16:04:31.772]                     x <- a
[16:04:31.772]                   }
[16:04:31.772]                 }, immediateCondition = function(cond) {
[16:04:31.772]                   save_rds <- function (object, pathname, ...) 
[16:04:31.772]                   {
[16:04:31.772]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[16:04:31.772]                     if (file_test("-f", pathname_tmp)) {
[16:04:31.772]                       fi_tmp <- file.info(pathname_tmp)
[16:04:31.772]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[16:04:31.772]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:04:31.772]                         fi_tmp[["mtime"]])
[16:04:31.772]                     }
[16:04:31.772]                     tryCatch({
[16:04:31.772]                       saveRDS(object, file = pathname_tmp, ...)
[16:04:31.772]                     }, error = function(ex) {
[16:04:31.772]                       msg <- conditionMessage(ex)
[16:04:31.772]                       fi_tmp <- file.info(pathname_tmp)
[16:04:31.772]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[16:04:31.772]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:04:31.772]                         fi_tmp[["mtime"]], msg)
[16:04:31.772]                       ex$message <- msg
[16:04:31.772]                       stop(ex)
[16:04:31.772]                     })
[16:04:31.772]                     stopifnot(file_test("-f", pathname_tmp))
[16:04:31.772]                     res <- file.rename(from = pathname_tmp, to = pathname)
[16:04:31.772]                     if (!res || file_test("-f", pathname_tmp)) {
[16:04:31.772]                       fi_tmp <- file.info(pathname_tmp)
[16:04:31.772]                       fi <- file.info(pathname)
[16:04:31.772]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[16:04:31.772]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:04:31.772]                         fi_tmp[["mtime"]], sQuote(pathname), 
[16:04:31.772]                         fi[["size"]], fi[["mtime"]])
[16:04:31.772]                       stop(msg)
[16:04:31.772]                     }
[16:04:31.772]                     invisible(pathname)
[16:04:31.772]                   }
[16:04:31.772]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[16:04:31.772]                     rootPath = tempdir()) 
[16:04:31.772]                   {
[16:04:31.772]                     obj <- list(time = Sys.time(), condition = cond)
[16:04:31.772]                     file <- tempfile(pattern = class(cond)[1], 
[16:04:31.772]                       tmpdir = path, fileext = ".rds")
[16:04:31.772]                     save_rds(obj, file)
[16:04:31.772]                   }
[16:04:31.772]                   saveImmediateCondition(cond, path = "/tmp/Rtmpe612Wd/.future/immediateConditions")
[16:04:31.772]                   muffleCondition <- function (cond, pattern = "^muffle") 
[16:04:31.772]                   {
[16:04:31.772]                     inherits <- base::inherits
[16:04:31.772]                     invokeRestart <- base::invokeRestart
[16:04:31.772]                     is.null <- base::is.null
[16:04:31.772]                     muffled <- FALSE
[16:04:31.772]                     if (inherits(cond, "message")) {
[16:04:31.772]                       muffled <- grepl(pattern, "muffleMessage")
[16:04:31.772]                       if (muffled) 
[16:04:31.772]                         invokeRestart("muffleMessage")
[16:04:31.772]                     }
[16:04:31.772]                     else if (inherits(cond, "warning")) {
[16:04:31.772]                       muffled <- grepl(pattern, "muffleWarning")
[16:04:31.772]                       if (muffled) 
[16:04:31.772]                         invokeRestart("muffleWarning")
[16:04:31.772]                     }
[16:04:31.772]                     else if (inherits(cond, "condition")) {
[16:04:31.772]                       if (!is.null(pattern)) {
[16:04:31.772]                         computeRestarts <- base::computeRestarts
[16:04:31.772]                         grepl <- base::grepl
[16:04:31.772]                         restarts <- computeRestarts(cond)
[16:04:31.772]                         for (restart in restarts) {
[16:04:31.772]                           name <- restart$name
[16:04:31.772]                           if (is.null(name)) 
[16:04:31.772]                             next
[16:04:31.772]                           if (!grepl(pattern, name)) 
[16:04:31.772]                             next
[16:04:31.772]                           invokeRestart(restart)
[16:04:31.772]                           muffled <- TRUE
[16:04:31.772]                           break
[16:04:31.772]                         }
[16:04:31.772]                       }
[16:04:31.772]                     }
[16:04:31.772]                     invisible(muffled)
[16:04:31.772]                   }
[16:04:31.772]                   muffleCondition(cond)
[16:04:31.772]                 })
[16:04:31.772]             }))
[16:04:31.772]             future::FutureResult(value = ...future.value$value, 
[16:04:31.772]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:04:31.772]                   ...future.rng), globalenv = if (FALSE) 
[16:04:31.772]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:04:31.772]                     ...future.globalenv.names))
[16:04:31.772]                 else NULL, started = ...future.startTime, version = "1.8")
[16:04:31.772]         }, condition = base::local({
[16:04:31.772]             c <- base::c
[16:04:31.772]             inherits <- base::inherits
[16:04:31.772]             invokeRestart <- base::invokeRestart
[16:04:31.772]             length <- base::length
[16:04:31.772]             list <- base::list
[16:04:31.772]             seq.int <- base::seq.int
[16:04:31.772]             signalCondition <- base::signalCondition
[16:04:31.772]             sys.calls <- base::sys.calls
[16:04:31.772]             `[[` <- base::`[[`
[16:04:31.772]             `+` <- base::`+`
[16:04:31.772]             `<<-` <- base::`<<-`
[16:04:31.772]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:04:31.772]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:04:31.772]                   3L)]
[16:04:31.772]             }
[16:04:31.772]             function(cond) {
[16:04:31.772]                 is_error <- inherits(cond, "error")
[16:04:31.772]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:04:31.772]                   NULL)
[16:04:31.772]                 if (is_error) {
[16:04:31.772]                   sessionInformation <- function() {
[16:04:31.772]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:04:31.772]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:04:31.772]                       search = base::search(), system = base::Sys.info())
[16:04:31.772]                   }
[16:04:31.772]                   ...future.conditions[[length(...future.conditions) + 
[16:04:31.772]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:04:31.772]                     cond$call), session = sessionInformation(), 
[16:04:31.772]                     timestamp = base::Sys.time(), signaled = 0L)
[16:04:31.772]                   signalCondition(cond)
[16:04:31.772]                 }
[16:04:31.772]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:04:31.772]                 "immediateCondition"))) {
[16:04:31.772]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:04:31.772]                   ...future.conditions[[length(...future.conditions) + 
[16:04:31.772]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:04:31.772]                   if (TRUE && !signal) {
[16:04:31.772]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:04:31.772]                     {
[16:04:31.772]                       inherits <- base::inherits
[16:04:31.772]                       invokeRestart <- base::invokeRestart
[16:04:31.772]                       is.null <- base::is.null
[16:04:31.772]                       muffled <- FALSE
[16:04:31.772]                       if (inherits(cond, "message")) {
[16:04:31.772]                         muffled <- grepl(pattern, "muffleMessage")
[16:04:31.772]                         if (muffled) 
[16:04:31.772]                           invokeRestart("muffleMessage")
[16:04:31.772]                       }
[16:04:31.772]                       else if (inherits(cond, "warning")) {
[16:04:31.772]                         muffled <- grepl(pattern, "muffleWarning")
[16:04:31.772]                         if (muffled) 
[16:04:31.772]                           invokeRestart("muffleWarning")
[16:04:31.772]                       }
[16:04:31.772]                       else if (inherits(cond, "condition")) {
[16:04:31.772]                         if (!is.null(pattern)) {
[16:04:31.772]                           computeRestarts <- base::computeRestarts
[16:04:31.772]                           grepl <- base::grepl
[16:04:31.772]                           restarts <- computeRestarts(cond)
[16:04:31.772]                           for (restart in restarts) {
[16:04:31.772]                             name <- restart$name
[16:04:31.772]                             if (is.null(name)) 
[16:04:31.772]                               next
[16:04:31.772]                             if (!grepl(pattern, name)) 
[16:04:31.772]                               next
[16:04:31.772]                             invokeRestart(restart)
[16:04:31.772]                             muffled <- TRUE
[16:04:31.772]                             break
[16:04:31.772]                           }
[16:04:31.772]                         }
[16:04:31.772]                       }
[16:04:31.772]                       invisible(muffled)
[16:04:31.772]                     }
[16:04:31.772]                     muffleCondition(cond, pattern = "^muffle")
[16:04:31.772]                   }
[16:04:31.772]                 }
[16:04:31.772]                 else {
[16:04:31.772]                   if (TRUE) {
[16:04:31.772]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:04:31.772]                     {
[16:04:31.772]                       inherits <- base::inherits
[16:04:31.772]                       invokeRestart <- base::invokeRestart
[16:04:31.772]                       is.null <- base::is.null
[16:04:31.772]                       muffled <- FALSE
[16:04:31.772]                       if (inherits(cond, "message")) {
[16:04:31.772]                         muffled <- grepl(pattern, "muffleMessage")
[16:04:31.772]                         if (muffled) 
[16:04:31.772]                           invokeRestart("muffleMessage")
[16:04:31.772]                       }
[16:04:31.772]                       else if (inherits(cond, "warning")) {
[16:04:31.772]                         muffled <- grepl(pattern, "muffleWarning")
[16:04:31.772]                         if (muffled) 
[16:04:31.772]                           invokeRestart("muffleWarning")
[16:04:31.772]                       }
[16:04:31.772]                       else if (inherits(cond, "condition")) {
[16:04:31.772]                         if (!is.null(pattern)) {
[16:04:31.772]                           computeRestarts <- base::computeRestarts
[16:04:31.772]                           grepl <- base::grepl
[16:04:31.772]                           restarts <- computeRestarts(cond)
[16:04:31.772]                           for (restart in restarts) {
[16:04:31.772]                             name <- restart$name
[16:04:31.772]                             if (is.null(name)) 
[16:04:31.772]                               next
[16:04:31.772]                             if (!grepl(pattern, name)) 
[16:04:31.772]                               next
[16:04:31.772]                             invokeRestart(restart)
[16:04:31.772]                             muffled <- TRUE
[16:04:31.772]                             break
[16:04:31.772]                           }
[16:04:31.772]                         }
[16:04:31.772]                       }
[16:04:31.772]                       invisible(muffled)
[16:04:31.772]                     }
[16:04:31.772]                     muffleCondition(cond, pattern = "^muffle")
[16:04:31.772]                   }
[16:04:31.772]                 }
[16:04:31.772]             }
[16:04:31.772]         }))
[16:04:31.772]     }, error = function(ex) {
[16:04:31.772]         base::structure(base::list(value = NULL, visible = NULL, 
[16:04:31.772]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:04:31.772]                 ...future.rng), started = ...future.startTime, 
[16:04:31.772]             finished = Sys.time(), session_uuid = NA_character_, 
[16:04:31.772]             version = "1.8"), class = "FutureResult")
[16:04:31.772]     }, finally = {
[16:04:31.772]         if (!identical(...future.workdir, getwd())) 
[16:04:31.772]             setwd(...future.workdir)
[16:04:31.772]         {
[16:04:31.772]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:04:31.772]                 ...future.oldOptions$nwarnings <- NULL
[16:04:31.772]             }
[16:04:31.772]             base::options(...future.oldOptions)
[16:04:31.772]             if (.Platform$OS.type == "windows") {
[16:04:31.772]                 old_names <- names(...future.oldEnvVars)
[16:04:31.772]                 envs <- base::Sys.getenv()
[16:04:31.772]                 names <- names(envs)
[16:04:31.772]                 common <- intersect(names, old_names)
[16:04:31.772]                 added <- setdiff(names, old_names)
[16:04:31.772]                 removed <- setdiff(old_names, names)
[16:04:31.772]                 changed <- common[...future.oldEnvVars[common] != 
[16:04:31.772]                   envs[common]]
[16:04:31.772]                 NAMES <- toupper(changed)
[16:04:31.772]                 args <- list()
[16:04:31.772]                 for (kk in seq_along(NAMES)) {
[16:04:31.772]                   name <- changed[[kk]]
[16:04:31.772]                   NAME <- NAMES[[kk]]
[16:04:31.772]                   if (name != NAME && is.element(NAME, old_names)) 
[16:04:31.772]                     next
[16:04:31.772]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:04:31.772]                 }
[16:04:31.772]                 NAMES <- toupper(added)
[16:04:31.772]                 for (kk in seq_along(NAMES)) {
[16:04:31.772]                   name <- added[[kk]]
[16:04:31.772]                   NAME <- NAMES[[kk]]
[16:04:31.772]                   if (name != NAME && is.element(NAME, old_names)) 
[16:04:31.772]                     next
[16:04:31.772]                   args[[name]] <- ""
[16:04:31.772]                 }
[16:04:31.772]                 NAMES <- toupper(removed)
[16:04:31.772]                 for (kk in seq_along(NAMES)) {
[16:04:31.772]                   name <- removed[[kk]]
[16:04:31.772]                   NAME <- NAMES[[kk]]
[16:04:31.772]                   if (name != NAME && is.element(NAME, old_names)) 
[16:04:31.772]                     next
[16:04:31.772]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:04:31.772]                 }
[16:04:31.772]                 if (length(args) > 0) 
[16:04:31.772]                   base::do.call(base::Sys.setenv, args = args)
[16:04:31.772]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:04:31.772]             }
[16:04:31.772]             else {
[16:04:31.772]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:04:31.772]             }
[16:04:31.772]             {
[16:04:31.772]                 if (base::length(...future.futureOptionsAdded) > 
[16:04:31.772]                   0L) {
[16:04:31.772]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:04:31.772]                   base::names(opts) <- ...future.futureOptionsAdded
[16:04:31.772]                   base::options(opts)
[16:04:31.772]                 }
[16:04:31.772]                 {
[16:04:31.772]                   {
[16:04:31.772]                     base::options(mc.cores = ...future.mc.cores.old)
[16:04:31.772]                     NULL
[16:04:31.772]                   }
[16:04:31.772]                   options(future.plan = NULL)
[16:04:31.772]                   if (is.na(NA_character_)) 
[16:04:31.772]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:04:31.772]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:04:31.772]                   future::plan(list(function (..., workers = availableCores(constraints = "multicore"), 
[16:04:31.772]                     envir = parent.frame()) 
[16:04:31.772]                   {
[16:04:31.772]                     default_workers <- missing(workers)
[16:04:31.772]                     if (is.function(workers)) 
[16:04:31.772]                       workers <- workers()
[16:04:31.772]                     workers <- structure(as.integer(workers), 
[16:04:31.772]                       class = class(workers))
[16:04:31.772]                     stop_if_not(is.finite(workers), workers >= 
[16:04:31.772]                       1L)
[16:04:31.772]                     if ((workers == 1L && !inherits(workers, 
[16:04:31.772]                       "AsIs")) || !supportsMulticore(warn = TRUE)) {
[16:04:31.772]                       if (default_workers) 
[16:04:31.772]                         supportsMulticore(warn = TRUE)
[16:04:31.772]                       return(sequential(..., envir = envir))
[16:04:31.772]                     }
[16:04:31.772]                     oopts <- options(mc.cores = workers)
[16:04:31.772]                     on.exit(options(oopts))
[16:04:31.772]                     future <- MulticoreFuture(..., workers = workers, 
[16:04:31.772]                       envir = envir)
[16:04:31.772]                     if (!future$lazy) 
[16:04:31.772]                       future <- run(future)
[16:04:31.772]                     invisible(future)
[16:04:31.772]                   }), .cleanup = FALSE, .init = FALSE)
[16:04:31.772]                 }
[16:04:31.772]             }
[16:04:31.772]         }
[16:04:31.772]     })
[16:04:31.772]     if (TRUE) {
[16:04:31.772]         base::sink(type = "output", split = FALSE)
[16:04:31.772]         if (TRUE) {
[16:04:31.772]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:04:31.772]         }
[16:04:31.772]         else {
[16:04:31.772]             ...future.result["stdout"] <- base::list(NULL)
[16:04:31.772]         }
[16:04:31.772]         base::close(...future.stdout)
[16:04:31.772]         ...future.stdout <- NULL
[16:04:31.772]     }
[16:04:31.772]     ...future.result$conditions <- ...future.conditions
[16:04:31.772]     ...future.result$finished <- base::Sys.time()
[16:04:31.772]     ...future.result
[16:04:31.772] }
[16:04:31.775] assign_globals() ...
[16:04:31.775] List of 1
[16:04:31.775]  $ a: num 2
[16:04:31.775]  - attr(*, "where")=List of 1
[16:04:31.775]   ..$ a:<environment: R_EmptyEnv> 
[16:04:31.775]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[16:04:31.775]  - attr(*, "resolved")= logi FALSE
[16:04:31.775]  - attr(*, "total_size")= num 56
[16:04:31.775]  - attr(*, "already-done")= logi TRUE
[16:04:31.778] - copied ‘a’ to environment
[16:04:31.778] assign_globals() ... done
[16:04:31.778] requestCore(): workers = 2
[16:04:31.780] MulticoreFuture started
[16:04:31.780] - Launch lazy future ... done
[16:04:31.781] run() for ‘MulticoreFuture’ ... done
[16:04:31.781] result() for MulticoreFuture ...
[16:04:31.781] plan(): Setting new future strategy stack:
[16:04:31.781] List of future strategies:
[16:04:31.781] 1. sequential:
[16:04:31.781]    - args: function (..., envir = parent.frame())
[16:04:31.781]    - tweaked: FALSE
[16:04:31.781]    - call: NULL
[16:04:31.782] plan(): nbrOfWorkers() = 1
[16:04:31.788] plan(): Setting new future strategy stack:
[16:04:31.788] List of future strategies:
[16:04:31.788] 1. multicore:
[16:04:31.788]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[16:04:31.788]    - tweaked: FALSE
[16:04:31.788]    - call: plan(strategy)
[16:04:31.794] plan(): nbrOfWorkers() = 2
[16:04:31.795] result() for MulticoreFuture ...
[16:04:31.795] result() for MulticoreFuture ... done
[16:04:31.795] result() for MulticoreFuture ... done
[16:04:31.795] result() for MulticoreFuture ...
[16:04:31.795] result() for MulticoreFuture ... done
** Future evaluation with errors
[16:04:31.796] getGlobalsAndPackages() ...
[16:04:31.796] Searching for globals...
[16:04:31.798] - globals found: [3] ‘{’, ‘<-’, ‘stop’
[16:04:31.799] Searching for globals ... DONE
[16:04:31.799] Resolving globals: FALSE
[16:04:31.799] 
[16:04:31.799] 
[16:04:31.799] getGlobalsAndPackages() ... DONE
[16:04:31.800] run() for ‘Future’ ...
[16:04:31.800] - state: ‘created’
[16:04:31.800] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[16:04:31.804] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[16:04:31.804] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[16:04:31.804]   - Field: ‘label’
[16:04:31.804]   - Field: ‘local’
[16:04:31.804]   - Field: ‘owner’
[16:04:31.805]   - Field: ‘envir’
[16:04:31.805]   - Field: ‘workers’
[16:04:31.805]   - Field: ‘packages’
[16:04:31.805]   - Field: ‘gc’
[16:04:31.805]   - Field: ‘job’
[16:04:31.805]   - Field: ‘conditions’
[16:04:31.805]   - Field: ‘expr’
[16:04:31.805]   - Field: ‘uuid’
[16:04:31.806]   - Field: ‘seed’
[16:04:31.806]   - Field: ‘version’
[16:04:31.806]   - Field: ‘result’
[16:04:31.806]   - Field: ‘asynchronous’
[16:04:31.806]   - Field: ‘calls’
[16:04:31.806]   - Field: ‘globals’
[16:04:31.806]   - Field: ‘stdout’
[16:04:31.806]   - Field: ‘earlySignal’
[16:04:31.806]   - Field: ‘lazy’
[16:04:31.806]   - Field: ‘state’
[16:04:31.807] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[16:04:31.807] - Launch lazy future ...
[16:04:31.807] Packages needed by the future expression (n = 0): <none>
[16:04:31.807] Packages needed by future strategies (n = 0): <none>
[16:04:31.808] {
[16:04:31.808]     {
[16:04:31.808]         {
[16:04:31.808]             ...future.startTime <- base::Sys.time()
[16:04:31.808]             {
[16:04:31.808]                 {
[16:04:31.808]                   {
[16:04:31.808]                     {
[16:04:31.808]                       base::local({
[16:04:31.808]                         has_future <- base::requireNamespace("future", 
[16:04:31.808]                           quietly = TRUE)
[16:04:31.808]                         if (has_future) {
[16:04:31.808]                           ns <- base::getNamespace("future")
[16:04:31.808]                           version <- ns[[".package"]][["version"]]
[16:04:31.808]                           if (is.null(version)) 
[16:04:31.808]                             version <- utils::packageVersion("future")
[16:04:31.808]                         }
[16:04:31.808]                         else {
[16:04:31.808]                           version <- NULL
[16:04:31.808]                         }
[16:04:31.808]                         if (!has_future || version < "1.8.0") {
[16:04:31.808]                           info <- base::c(r_version = base::gsub("R version ", 
[16:04:31.808]                             "", base::R.version$version.string), 
[16:04:31.808]                             platform = base::sprintf("%s (%s-bit)", 
[16:04:31.808]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:04:31.808]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[16:04:31.808]                               "release", "version")], collapse = " "), 
[16:04:31.808]                             hostname = base::Sys.info()[["nodename"]])
[16:04:31.808]                           info <- base::sprintf("%s: %s", base::names(info), 
[16:04:31.808]                             info)
[16:04:31.808]                           info <- base::paste(info, collapse = "; ")
[16:04:31.808]                           if (!has_future) {
[16:04:31.808]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:04:31.808]                               info)
[16:04:31.808]                           }
[16:04:31.808]                           else {
[16:04:31.808]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:04:31.808]                               info, version)
[16:04:31.808]                           }
[16:04:31.808]                           base::stop(msg)
[16:04:31.808]                         }
[16:04:31.808]                       })
[16:04:31.808]                     }
[16:04:31.808]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[16:04:31.808]                     base::options(mc.cores = 1L)
[16:04:31.808]                   }
[16:04:31.808]                   options(future.plan = NULL)
[16:04:31.808]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:04:31.808]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:04:31.808]                 }
[16:04:31.808]                 ...future.workdir <- getwd()
[16:04:31.808]             }
[16:04:31.808]             ...future.oldOptions <- base::as.list(base::.Options)
[16:04:31.808]             ...future.oldEnvVars <- base::Sys.getenv()
[16:04:31.808]         }
[16:04:31.808]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:04:31.808]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:04:31.808]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:04:31.808]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:04:31.808]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:04:31.808]             future.stdout.windows.reencode = NULL, width = 80L)
[16:04:31.808]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:04:31.808]             base::names(...future.oldOptions))
[16:04:31.808]     }
[16:04:31.808]     if (FALSE) {
[16:04:31.808]     }
[16:04:31.808]     else {
[16:04:31.808]         if (TRUE) {
[16:04:31.808]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:04:31.808]                 open = "w")
[16:04:31.808]         }
[16:04:31.808]         else {
[16:04:31.808]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:04:31.808]                 windows = "NUL", "/dev/null"), open = "w")
[16:04:31.808]         }
[16:04:31.808]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:04:31.808]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:04:31.808]             base::sink(type = "output", split = FALSE)
[16:04:31.808]             base::close(...future.stdout)
[16:04:31.808]         }, add = TRUE)
[16:04:31.808]     }
[16:04:31.808]     ...future.frame <- base::sys.nframe()
[16:04:31.808]     ...future.conditions <- base::list()
[16:04:31.808]     ...future.rng <- base::globalenv()$.Random.seed
[16:04:31.808]     if (FALSE) {
[16:04:31.808]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:04:31.808]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:04:31.808]     }
[16:04:31.808]     ...future.result <- base::tryCatch({
[16:04:31.808]         base::withCallingHandlers({
[16:04:31.808]             ...future.value <- base::withVisible(base::local({
[16:04:31.808]                 withCallingHandlers({
[16:04:31.808]                   {
[16:04:31.808]                     x <- 3
[16:04:31.808]                     stop("Woops!")
[16:04:31.808]                     x
[16:04:31.808]                   }
[16:04:31.808]                 }, immediateCondition = function(cond) {
[16:04:31.808]                   save_rds <- function (object, pathname, ...) 
[16:04:31.808]                   {
[16:04:31.808]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[16:04:31.808]                     if (file_test("-f", pathname_tmp)) {
[16:04:31.808]                       fi_tmp <- file.info(pathname_tmp)
[16:04:31.808]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[16:04:31.808]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:04:31.808]                         fi_tmp[["mtime"]])
[16:04:31.808]                     }
[16:04:31.808]                     tryCatch({
[16:04:31.808]                       saveRDS(object, file = pathname_tmp, ...)
[16:04:31.808]                     }, error = function(ex) {
[16:04:31.808]                       msg <- conditionMessage(ex)
[16:04:31.808]                       fi_tmp <- file.info(pathname_tmp)
[16:04:31.808]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[16:04:31.808]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:04:31.808]                         fi_tmp[["mtime"]], msg)
[16:04:31.808]                       ex$message <- msg
[16:04:31.808]                       stop(ex)
[16:04:31.808]                     })
[16:04:31.808]                     stopifnot(file_test("-f", pathname_tmp))
[16:04:31.808]                     res <- file.rename(from = pathname_tmp, to = pathname)
[16:04:31.808]                     if (!res || file_test("-f", pathname_tmp)) {
[16:04:31.808]                       fi_tmp <- file.info(pathname_tmp)
[16:04:31.808]                       fi <- file.info(pathname)
[16:04:31.808]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[16:04:31.808]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:04:31.808]                         fi_tmp[["mtime"]], sQuote(pathname), 
[16:04:31.808]                         fi[["size"]], fi[["mtime"]])
[16:04:31.808]                       stop(msg)
[16:04:31.808]                     }
[16:04:31.808]                     invisible(pathname)
[16:04:31.808]                   }
[16:04:31.808]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[16:04:31.808]                     rootPath = tempdir()) 
[16:04:31.808]                   {
[16:04:31.808]                     obj <- list(time = Sys.time(), condition = cond)
[16:04:31.808]                     file <- tempfile(pattern = class(cond)[1], 
[16:04:31.808]                       tmpdir = path, fileext = ".rds")
[16:04:31.808]                     save_rds(obj, file)
[16:04:31.808]                   }
[16:04:31.808]                   saveImmediateCondition(cond, path = "/tmp/Rtmpe612Wd/.future/immediateConditions")
[16:04:31.808]                   muffleCondition <- function (cond, pattern = "^muffle") 
[16:04:31.808]                   {
[16:04:31.808]                     inherits <- base::inherits
[16:04:31.808]                     invokeRestart <- base::invokeRestart
[16:04:31.808]                     is.null <- base::is.null
[16:04:31.808]                     muffled <- FALSE
[16:04:31.808]                     if (inherits(cond, "message")) {
[16:04:31.808]                       muffled <- grepl(pattern, "muffleMessage")
[16:04:31.808]                       if (muffled) 
[16:04:31.808]                         invokeRestart("muffleMessage")
[16:04:31.808]                     }
[16:04:31.808]                     else if (inherits(cond, "warning")) {
[16:04:31.808]                       muffled <- grepl(pattern, "muffleWarning")
[16:04:31.808]                       if (muffled) 
[16:04:31.808]                         invokeRestart("muffleWarning")
[16:04:31.808]                     }
[16:04:31.808]                     else if (inherits(cond, "condition")) {
[16:04:31.808]                       if (!is.null(pattern)) {
[16:04:31.808]                         computeRestarts <- base::computeRestarts
[16:04:31.808]                         grepl <- base::grepl
[16:04:31.808]                         restarts <- computeRestarts(cond)
[16:04:31.808]                         for (restart in restarts) {
[16:04:31.808]                           name <- restart$name
[16:04:31.808]                           if (is.null(name)) 
[16:04:31.808]                             next
[16:04:31.808]                           if (!grepl(pattern, name)) 
[16:04:31.808]                             next
[16:04:31.808]                           invokeRestart(restart)
[16:04:31.808]                           muffled <- TRUE
[16:04:31.808]                           break
[16:04:31.808]                         }
[16:04:31.808]                       }
[16:04:31.808]                     }
[16:04:31.808]                     invisible(muffled)
[16:04:31.808]                   }
[16:04:31.808]                   muffleCondition(cond)
[16:04:31.808]                 })
[16:04:31.808]             }))
[16:04:31.808]             future::FutureResult(value = ...future.value$value, 
[16:04:31.808]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:04:31.808]                   ...future.rng), globalenv = if (FALSE) 
[16:04:31.808]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:04:31.808]                     ...future.globalenv.names))
[16:04:31.808]                 else NULL, started = ...future.startTime, version = "1.8")
[16:04:31.808]         }, condition = base::local({
[16:04:31.808]             c <- base::c
[16:04:31.808]             inherits <- base::inherits
[16:04:31.808]             invokeRestart <- base::invokeRestart
[16:04:31.808]             length <- base::length
[16:04:31.808]             list <- base::list
[16:04:31.808]             seq.int <- base::seq.int
[16:04:31.808]             signalCondition <- base::signalCondition
[16:04:31.808]             sys.calls <- base::sys.calls
[16:04:31.808]             `[[` <- base::`[[`
[16:04:31.808]             `+` <- base::`+`
[16:04:31.808]             `<<-` <- base::`<<-`
[16:04:31.808]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:04:31.808]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:04:31.808]                   3L)]
[16:04:31.808]             }
[16:04:31.808]             function(cond) {
[16:04:31.808]                 is_error <- inherits(cond, "error")
[16:04:31.808]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:04:31.808]                   NULL)
[16:04:31.808]                 if (is_error) {
[16:04:31.808]                   sessionInformation <- function() {
[16:04:31.808]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:04:31.808]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:04:31.808]                       search = base::search(), system = base::Sys.info())
[16:04:31.808]                   }
[16:04:31.808]                   ...future.conditions[[length(...future.conditions) + 
[16:04:31.808]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:04:31.808]                     cond$call), session = sessionInformation(), 
[16:04:31.808]                     timestamp = base::Sys.time(), signaled = 0L)
[16:04:31.808]                   signalCondition(cond)
[16:04:31.808]                 }
[16:04:31.808]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:04:31.808]                 "immediateCondition"))) {
[16:04:31.808]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:04:31.808]                   ...future.conditions[[length(...future.conditions) + 
[16:04:31.808]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:04:31.808]                   if (TRUE && !signal) {
[16:04:31.808]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:04:31.808]                     {
[16:04:31.808]                       inherits <- base::inherits
[16:04:31.808]                       invokeRestart <- base::invokeRestart
[16:04:31.808]                       is.null <- base::is.null
[16:04:31.808]                       muffled <- FALSE
[16:04:31.808]                       if (inherits(cond, "message")) {
[16:04:31.808]                         muffled <- grepl(pattern, "muffleMessage")
[16:04:31.808]                         if (muffled) 
[16:04:31.808]                           invokeRestart("muffleMessage")
[16:04:31.808]                       }
[16:04:31.808]                       else if (inherits(cond, "warning")) {
[16:04:31.808]                         muffled <- grepl(pattern, "muffleWarning")
[16:04:31.808]                         if (muffled) 
[16:04:31.808]                           invokeRestart("muffleWarning")
[16:04:31.808]                       }
[16:04:31.808]                       else if (inherits(cond, "condition")) {
[16:04:31.808]                         if (!is.null(pattern)) {
[16:04:31.808]                           computeRestarts <- base::computeRestarts
[16:04:31.808]                           grepl <- base::grepl
[16:04:31.808]                           restarts <- computeRestarts(cond)
[16:04:31.808]                           for (restart in restarts) {
[16:04:31.808]                             name <- restart$name
[16:04:31.808]                             if (is.null(name)) 
[16:04:31.808]                               next
[16:04:31.808]                             if (!grepl(pattern, name)) 
[16:04:31.808]                               next
[16:04:31.808]                             invokeRestart(restart)
[16:04:31.808]                             muffled <- TRUE
[16:04:31.808]                             break
[16:04:31.808]                           }
[16:04:31.808]                         }
[16:04:31.808]                       }
[16:04:31.808]                       invisible(muffled)
[16:04:31.808]                     }
[16:04:31.808]                     muffleCondition(cond, pattern = "^muffle")
[16:04:31.808]                   }
[16:04:31.808]                 }
[16:04:31.808]                 else {
[16:04:31.808]                   if (TRUE) {
[16:04:31.808]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:04:31.808]                     {
[16:04:31.808]                       inherits <- base::inherits
[16:04:31.808]                       invokeRestart <- base::invokeRestart
[16:04:31.808]                       is.null <- base::is.null
[16:04:31.808]                       muffled <- FALSE
[16:04:31.808]                       if (inherits(cond, "message")) {
[16:04:31.808]                         muffled <- grepl(pattern, "muffleMessage")
[16:04:31.808]                         if (muffled) 
[16:04:31.808]                           invokeRestart("muffleMessage")
[16:04:31.808]                       }
[16:04:31.808]                       else if (inherits(cond, "warning")) {
[16:04:31.808]                         muffled <- grepl(pattern, "muffleWarning")
[16:04:31.808]                         if (muffled) 
[16:04:31.808]                           invokeRestart("muffleWarning")
[16:04:31.808]                       }
[16:04:31.808]                       else if (inherits(cond, "condition")) {
[16:04:31.808]                         if (!is.null(pattern)) {
[16:04:31.808]                           computeRestarts <- base::computeRestarts
[16:04:31.808]                           grepl <- base::grepl
[16:04:31.808]                           restarts <- computeRestarts(cond)
[16:04:31.808]                           for (restart in restarts) {
[16:04:31.808]                             name <- restart$name
[16:04:31.808]                             if (is.null(name)) 
[16:04:31.808]                               next
[16:04:31.808]                             if (!grepl(pattern, name)) 
[16:04:31.808]                               next
[16:04:31.808]                             invokeRestart(restart)
[16:04:31.808]                             muffled <- TRUE
[16:04:31.808]                             break
[16:04:31.808]                           }
[16:04:31.808]                         }
[16:04:31.808]                       }
[16:04:31.808]                       invisible(muffled)
[16:04:31.808]                     }
[16:04:31.808]                     muffleCondition(cond, pattern = "^muffle")
[16:04:31.808]                   }
[16:04:31.808]                 }
[16:04:31.808]             }
[16:04:31.808]         }))
[16:04:31.808]     }, error = function(ex) {
[16:04:31.808]         base::structure(base::list(value = NULL, visible = NULL, 
[16:04:31.808]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:04:31.808]                 ...future.rng), started = ...future.startTime, 
[16:04:31.808]             finished = Sys.time(), session_uuid = NA_character_, 
[16:04:31.808]             version = "1.8"), class = "FutureResult")
[16:04:31.808]     }, finally = {
[16:04:31.808]         if (!identical(...future.workdir, getwd())) 
[16:04:31.808]             setwd(...future.workdir)
[16:04:31.808]         {
[16:04:31.808]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:04:31.808]                 ...future.oldOptions$nwarnings <- NULL
[16:04:31.808]             }
[16:04:31.808]             base::options(...future.oldOptions)
[16:04:31.808]             if (.Platform$OS.type == "windows") {
[16:04:31.808]                 old_names <- names(...future.oldEnvVars)
[16:04:31.808]                 envs <- base::Sys.getenv()
[16:04:31.808]                 names <- names(envs)
[16:04:31.808]                 common <- intersect(names, old_names)
[16:04:31.808]                 added <- setdiff(names, old_names)
[16:04:31.808]                 removed <- setdiff(old_names, names)
[16:04:31.808]                 changed <- common[...future.oldEnvVars[common] != 
[16:04:31.808]                   envs[common]]
[16:04:31.808]                 NAMES <- toupper(changed)
[16:04:31.808]                 args <- list()
[16:04:31.808]                 for (kk in seq_along(NAMES)) {
[16:04:31.808]                   name <- changed[[kk]]
[16:04:31.808]                   NAME <- NAMES[[kk]]
[16:04:31.808]                   if (name != NAME && is.element(NAME, old_names)) 
[16:04:31.808]                     next
[16:04:31.808]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:04:31.808]                 }
[16:04:31.808]                 NAMES <- toupper(added)
[16:04:31.808]                 for (kk in seq_along(NAMES)) {
[16:04:31.808]                   name <- added[[kk]]
[16:04:31.808]                   NAME <- NAMES[[kk]]
[16:04:31.808]                   if (name != NAME && is.element(NAME, old_names)) 
[16:04:31.808]                     next
[16:04:31.808]                   args[[name]] <- ""
[16:04:31.808]                 }
[16:04:31.808]                 NAMES <- toupper(removed)
[16:04:31.808]                 for (kk in seq_along(NAMES)) {
[16:04:31.808]                   name <- removed[[kk]]
[16:04:31.808]                   NAME <- NAMES[[kk]]
[16:04:31.808]                   if (name != NAME && is.element(NAME, old_names)) 
[16:04:31.808]                     next
[16:04:31.808]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:04:31.808]                 }
[16:04:31.808]                 if (length(args) > 0) 
[16:04:31.808]                   base::do.call(base::Sys.setenv, args = args)
[16:04:31.808]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:04:31.808]             }
[16:04:31.808]             else {
[16:04:31.808]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:04:31.808]             }
[16:04:31.808]             {
[16:04:31.808]                 if (base::length(...future.futureOptionsAdded) > 
[16:04:31.808]                   0L) {
[16:04:31.808]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:04:31.808]                   base::names(opts) <- ...future.futureOptionsAdded
[16:04:31.808]                   base::options(opts)
[16:04:31.808]                 }
[16:04:31.808]                 {
[16:04:31.808]                   {
[16:04:31.808]                     base::options(mc.cores = ...future.mc.cores.old)
[16:04:31.808]                     NULL
[16:04:31.808]                   }
[16:04:31.808]                   options(future.plan = NULL)
[16:04:31.808]                   if (is.na(NA_character_)) 
[16:04:31.808]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:04:31.808]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:04:31.808]                   future::plan(list(function (..., workers = availableCores(constraints = "multicore"), 
[16:04:31.808]                     envir = parent.frame()) 
[16:04:31.808]                   {
[16:04:31.808]                     default_workers <- missing(workers)
[16:04:31.808]                     if (is.function(workers)) 
[16:04:31.808]                       workers <- workers()
[16:04:31.808]                     workers <- structure(as.integer(workers), 
[16:04:31.808]                       class = class(workers))
[16:04:31.808]                     stop_if_not(is.finite(workers), workers >= 
[16:04:31.808]                       1L)
[16:04:31.808]                     if ((workers == 1L && !inherits(workers, 
[16:04:31.808]                       "AsIs")) || !supportsMulticore(warn = TRUE)) {
[16:04:31.808]                       if (default_workers) 
[16:04:31.808]                         supportsMulticore(warn = TRUE)
[16:04:31.808]                       return(sequential(..., envir = envir))
[16:04:31.808]                     }
[16:04:31.808]                     oopts <- options(mc.cores = workers)
[16:04:31.808]                     on.exit(options(oopts))
[16:04:31.808]                     future <- MulticoreFuture(..., workers = workers, 
[16:04:31.808]                       envir = envir)
[16:04:31.808]                     if (!future$lazy) 
[16:04:31.808]                       future <- run(future)
[16:04:31.808]                     invisible(future)
[16:04:31.808]                   }), .cleanup = FALSE, .init = FALSE)
[16:04:31.808]                 }
[16:04:31.808]             }
[16:04:31.808]         }
[16:04:31.808]     })
[16:04:31.808]     if (TRUE) {
[16:04:31.808]         base::sink(type = "output", split = FALSE)
[16:04:31.808]         if (TRUE) {
[16:04:31.808]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:04:31.808]         }
[16:04:31.808]         else {
[16:04:31.808]             ...future.result["stdout"] <- base::list(NULL)
[16:04:31.808]         }
[16:04:31.808]         base::close(...future.stdout)
[16:04:31.808]         ...future.stdout <- NULL
[16:04:31.808]     }
[16:04:31.808]     ...future.result$conditions <- ...future.conditions
[16:04:31.808]     ...future.result$finished <- base::Sys.time()
[16:04:31.808]     ...future.result
[16:04:31.808] }
[16:04:31.810] requestCore(): workers = 2
[16:04:31.812] MulticoreFuture started
[16:04:31.812] - Launch lazy future ... done
[16:04:31.812] run() for ‘MulticoreFuture’ ... done
[16:04:31.813] result() for MulticoreFuture ...
[16:04:31.813] plan(): Setting new future strategy stack:
[16:04:31.813] List of future strategies:
[16:04:31.813] 1. sequential:
[16:04:31.813]    - args: function (..., envir = parent.frame())
[16:04:31.813]    - tweaked: FALSE
[16:04:31.813]    - call: NULL
[16:04:31.814] plan(): nbrOfWorkers() = 1
[16:04:31.816] plan(): Setting new future strategy stack:
[16:04:31.816] List of future strategies:
[16:04:31.816] 1. multicore:
[16:04:31.816]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[16:04:31.816]    - tweaked: FALSE
[16:04:31.816]    - call: plan(strategy)
[16:04:31.822] plan(): nbrOfWorkers() = 2
[16:04:31.828] result() for MulticoreFuture ...
[16:04:31.828] result() for MulticoreFuture ... done
[16:04:31.828] signalConditions() ...
[16:04:31.828]  - include = ‘immediateCondition’
[16:04:31.828]  - exclude = 
[16:04:31.828]  - resignal = FALSE
[16:04:31.828]  - Number of conditions: 1
[16:04:31.829] signalConditions() ... done
[16:04:31.829] result() for MulticoreFuture ... done
[16:04:31.829] result() for MulticoreFuture ...
[16:04:31.829] result() for MulticoreFuture ... done
[16:04:31.829] signalConditions() ...
[16:04:31.829]  - include = ‘immediateCondition’
[16:04:31.829]  - exclude = 
[16:04:31.829]  - resignal = FALSE
[16:04:31.829]  - Number of conditions: 1
[16:04:31.830] signalConditions() ... done
[16:04:31.830] Future state: ‘finished’
[16:04:31.830] result() for MulticoreFuture ...
[16:04:31.830] result() for MulticoreFuture ... done
[16:04:31.830] signalConditions() ...
[16:04:31.830]  - include = ‘condition’
[16:04:31.830]  - exclude = ‘immediateCondition’
[16:04:31.830]  - resignal = TRUE
[16:04:31.831]  - Number of conditions: 1
[16:04:31.831]  - Condition #1: ‘simpleError’, ‘error’, ‘condition’
[16:04:31.831] signalConditions() ... done
[16:04:31.831] getGlobalsAndPackages() ...
[16:04:31.832] Searching for globals...
[16:04:31.834] - globals found: [6] ‘{’, ‘if’, ‘==’, ‘%%’, ‘ii’, ‘stop’
[16:04:31.834] Searching for globals ... DONE
[16:04:31.834] Resolving globals: FALSE
[16:04:31.834] The total size of the 1 globals is 56 bytes (56 bytes)
[16:04:31.835] The total size of the 1 globals exported for future expression (‘{; if (ii%%2 == 0); stop("Woops!"); ii; }’) is 56 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘ii’ (56 bytes of class ‘numeric’)
[16:04:31.835] - globals: [1] ‘ii’
[16:04:31.835] 
[16:04:31.835] getGlobalsAndPackages() ... DONE
[16:04:31.836] run() for ‘Future’ ...
[16:04:31.836] - state: ‘created’
[16:04:31.836] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[16:04:31.840] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[16:04:31.840] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[16:04:31.840]   - Field: ‘label’
[16:04:31.840]   - Field: ‘local’
[16:04:31.840]   - Field: ‘owner’
[16:04:31.841]   - Field: ‘envir’
[16:04:31.841]   - Field: ‘workers’
[16:04:31.841]   - Field: ‘packages’
[16:04:31.841]   - Field: ‘gc’
[16:04:31.841]   - Field: ‘job’
[16:04:31.841]   - Field: ‘conditions’
[16:04:31.841]   - Field: ‘expr’
[16:04:31.841]   - Field: ‘uuid’
[16:04:31.841]   - Field: ‘seed’
[16:04:31.842]   - Field: ‘version’
[16:04:31.842]   - Field: ‘result’
[16:04:31.842]   - Field: ‘asynchronous’
[16:04:31.842]   - Field: ‘calls’
[16:04:31.842]   - Field: ‘globals’
[16:04:31.842]   - Field: ‘stdout’
[16:04:31.842]   - Field: ‘earlySignal’
[16:04:31.842]   - Field: ‘lazy’
[16:04:31.842]   - Field: ‘state’
[16:04:31.842] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[16:04:31.843] - Launch lazy future ...
[16:04:31.843] Packages needed by the future expression (n = 0): <none>
[16:04:31.843] Packages needed by future strategies (n = 0): <none>
[16:04:31.846] {
[16:04:31.846]     {
[16:04:31.846]         {
[16:04:31.846]             ...future.startTime <- base::Sys.time()
[16:04:31.846]             {
[16:04:31.846]                 {
[16:04:31.846]                   {
[16:04:31.846]                     {
[16:04:31.846]                       base::local({
[16:04:31.846]                         has_future <- base::requireNamespace("future", 
[16:04:31.846]                           quietly = TRUE)
[16:04:31.846]                         if (has_future) {
[16:04:31.846]                           ns <- base::getNamespace("future")
[16:04:31.846]                           version <- ns[[".package"]][["version"]]
[16:04:31.846]                           if (is.null(version)) 
[16:04:31.846]                             version <- utils::packageVersion("future")
[16:04:31.846]                         }
[16:04:31.846]                         else {
[16:04:31.846]                           version <- NULL
[16:04:31.846]                         }
[16:04:31.846]                         if (!has_future || version < "1.8.0") {
[16:04:31.846]                           info <- base::c(r_version = base::gsub("R version ", 
[16:04:31.846]                             "", base::R.version$version.string), 
[16:04:31.846]                             platform = base::sprintf("%s (%s-bit)", 
[16:04:31.846]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:04:31.846]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[16:04:31.846]                               "release", "version")], collapse = " "), 
[16:04:31.846]                             hostname = base::Sys.info()[["nodename"]])
[16:04:31.846]                           info <- base::sprintf("%s: %s", base::names(info), 
[16:04:31.846]                             info)
[16:04:31.846]                           info <- base::paste(info, collapse = "; ")
[16:04:31.846]                           if (!has_future) {
[16:04:31.846]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:04:31.846]                               info)
[16:04:31.846]                           }
[16:04:31.846]                           else {
[16:04:31.846]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:04:31.846]                               info, version)
[16:04:31.846]                           }
[16:04:31.846]                           base::stop(msg)
[16:04:31.846]                         }
[16:04:31.846]                       })
[16:04:31.846]                     }
[16:04:31.846]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[16:04:31.846]                     base::options(mc.cores = 1L)
[16:04:31.846]                   }
[16:04:31.846]                   options(future.plan = NULL)
[16:04:31.846]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:04:31.846]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:04:31.846]                 }
[16:04:31.846]                 ...future.workdir <- getwd()
[16:04:31.846]             }
[16:04:31.846]             ...future.oldOptions <- base::as.list(base::.Options)
[16:04:31.846]             ...future.oldEnvVars <- base::Sys.getenv()
[16:04:31.846]         }
[16:04:31.846]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:04:31.846]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:04:31.846]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:04:31.846]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:04:31.846]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:04:31.846]             future.stdout.windows.reencode = NULL, width = 80L)
[16:04:31.846]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:04:31.846]             base::names(...future.oldOptions))
[16:04:31.846]     }
[16:04:31.846]     if (FALSE) {
[16:04:31.846]     }
[16:04:31.846]     else {
[16:04:31.846]         if (TRUE) {
[16:04:31.846]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:04:31.846]                 open = "w")
[16:04:31.846]         }
[16:04:31.846]         else {
[16:04:31.846]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:04:31.846]                 windows = "NUL", "/dev/null"), open = "w")
[16:04:31.846]         }
[16:04:31.846]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:04:31.846]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:04:31.846]             base::sink(type = "output", split = FALSE)
[16:04:31.846]             base::close(...future.stdout)
[16:04:31.846]         }, add = TRUE)
[16:04:31.846]     }
[16:04:31.846]     ...future.frame <- base::sys.nframe()
[16:04:31.846]     ...future.conditions <- base::list()
[16:04:31.846]     ...future.rng <- base::globalenv()$.Random.seed
[16:04:31.846]     if (FALSE) {
[16:04:31.846]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:04:31.846]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:04:31.846]     }
[16:04:31.846]     ...future.result <- base::tryCatch({
[16:04:31.846]         base::withCallingHandlers({
[16:04:31.846]             ...future.value <- base::withVisible(base::local({
[16:04:31.846]                 withCallingHandlers({
[16:04:31.846]                   {
[16:04:31.846]                     if (ii%%2 == 0) 
[16:04:31.846]                       stop("Woops!")
[16:04:31.846]                     ii
[16:04:31.846]                   }
[16:04:31.846]                 }, immediateCondition = function(cond) {
[16:04:31.846]                   save_rds <- function (object, pathname, ...) 
[16:04:31.846]                   {
[16:04:31.846]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[16:04:31.846]                     if (file_test("-f", pathname_tmp)) {
[16:04:31.846]                       fi_tmp <- file.info(pathname_tmp)
[16:04:31.846]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[16:04:31.846]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:04:31.846]                         fi_tmp[["mtime"]])
[16:04:31.846]                     }
[16:04:31.846]                     tryCatch({
[16:04:31.846]                       saveRDS(object, file = pathname_tmp, ...)
[16:04:31.846]                     }, error = function(ex) {
[16:04:31.846]                       msg <- conditionMessage(ex)
[16:04:31.846]                       fi_tmp <- file.info(pathname_tmp)
[16:04:31.846]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[16:04:31.846]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:04:31.846]                         fi_tmp[["mtime"]], msg)
[16:04:31.846]                       ex$message <- msg
[16:04:31.846]                       stop(ex)
[16:04:31.846]                     })
[16:04:31.846]                     stopifnot(file_test("-f", pathname_tmp))
[16:04:31.846]                     res <- file.rename(from = pathname_tmp, to = pathname)
[16:04:31.846]                     if (!res || file_test("-f", pathname_tmp)) {
[16:04:31.846]                       fi_tmp <- file.info(pathname_tmp)
[16:04:31.846]                       fi <- file.info(pathname)
[16:04:31.846]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[16:04:31.846]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:04:31.846]                         fi_tmp[["mtime"]], sQuote(pathname), 
[16:04:31.846]                         fi[["size"]], fi[["mtime"]])
[16:04:31.846]                       stop(msg)
[16:04:31.846]                     }
[16:04:31.846]                     invisible(pathname)
[16:04:31.846]                   }
[16:04:31.846]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[16:04:31.846]                     rootPath = tempdir()) 
[16:04:31.846]                   {
[16:04:31.846]                     obj <- list(time = Sys.time(), condition = cond)
[16:04:31.846]                     file <- tempfile(pattern = class(cond)[1], 
[16:04:31.846]                       tmpdir = path, fileext = ".rds")
[16:04:31.846]                     save_rds(obj, file)
[16:04:31.846]                   }
[16:04:31.846]                   saveImmediateCondition(cond, path = "/tmp/Rtmpe612Wd/.future/immediateConditions")
[16:04:31.846]                   muffleCondition <- function (cond, pattern = "^muffle") 
[16:04:31.846]                   {
[16:04:31.846]                     inherits <- base::inherits
[16:04:31.846]                     invokeRestart <- base::invokeRestart
[16:04:31.846]                     is.null <- base::is.null
[16:04:31.846]                     muffled <- FALSE
[16:04:31.846]                     if (inherits(cond, "message")) {
[16:04:31.846]                       muffled <- grepl(pattern, "muffleMessage")
[16:04:31.846]                       if (muffled) 
[16:04:31.846]                         invokeRestart("muffleMessage")
[16:04:31.846]                     }
[16:04:31.846]                     else if (inherits(cond, "warning")) {
[16:04:31.846]                       muffled <- grepl(pattern, "muffleWarning")
[16:04:31.846]                       if (muffled) 
[16:04:31.846]                         invokeRestart("muffleWarning")
[16:04:31.846]                     }
[16:04:31.846]                     else if (inherits(cond, "condition")) {
[16:04:31.846]                       if (!is.null(pattern)) {
[16:04:31.846]                         computeRestarts <- base::computeRestarts
[16:04:31.846]                         grepl <- base::grepl
[16:04:31.846]                         restarts <- computeRestarts(cond)
[16:04:31.846]                         for (restart in restarts) {
[16:04:31.846]                           name <- restart$name
[16:04:31.846]                           if (is.null(name)) 
[16:04:31.846]                             next
[16:04:31.846]                           if (!grepl(pattern, name)) 
[16:04:31.846]                             next
[16:04:31.846]                           invokeRestart(restart)
[16:04:31.846]                           muffled <- TRUE
[16:04:31.846]                           break
[16:04:31.846]                         }
[16:04:31.846]                       }
[16:04:31.846]                     }
[16:04:31.846]                     invisible(muffled)
[16:04:31.846]                   }
[16:04:31.846]                   muffleCondition(cond)
[16:04:31.846]                 })
[16:04:31.846]             }))
[16:04:31.846]             future::FutureResult(value = ...future.value$value, 
[16:04:31.846]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:04:31.846]                   ...future.rng), globalenv = if (FALSE) 
[16:04:31.846]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:04:31.846]                     ...future.globalenv.names))
[16:04:31.846]                 else NULL, started = ...future.startTime, version = "1.8")
[16:04:31.846]         }, condition = base::local({
[16:04:31.846]             c <- base::c
[16:04:31.846]             inherits <- base::inherits
[16:04:31.846]             invokeRestart <- base::invokeRestart
[16:04:31.846]             length <- base::length
[16:04:31.846]             list <- base::list
[16:04:31.846]             seq.int <- base::seq.int
[16:04:31.846]             signalCondition <- base::signalCondition
[16:04:31.846]             sys.calls <- base::sys.calls
[16:04:31.846]             `[[` <- base::`[[`
[16:04:31.846]             `+` <- base::`+`
[16:04:31.846]             `<<-` <- base::`<<-`
[16:04:31.846]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:04:31.846]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:04:31.846]                   3L)]
[16:04:31.846]             }
[16:04:31.846]             function(cond) {
[16:04:31.846]                 is_error <- inherits(cond, "error")
[16:04:31.846]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:04:31.846]                   NULL)
[16:04:31.846]                 if (is_error) {
[16:04:31.846]                   sessionInformation <- function() {
[16:04:31.846]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:04:31.846]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:04:31.846]                       search = base::search(), system = base::Sys.info())
[16:04:31.846]                   }
[16:04:31.846]                   ...future.conditions[[length(...future.conditions) + 
[16:04:31.846]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:04:31.846]                     cond$call), session = sessionInformation(), 
[16:04:31.846]                     timestamp = base::Sys.time(), signaled = 0L)
[16:04:31.846]                   signalCondition(cond)
[16:04:31.846]                 }
[16:04:31.846]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:04:31.846]                 "immediateCondition"))) {
[16:04:31.846]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:04:31.846]                   ...future.conditions[[length(...future.conditions) + 
[16:04:31.846]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:04:31.846]                   if (TRUE && !signal) {
[16:04:31.846]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:04:31.846]                     {
[16:04:31.846]                       inherits <- base::inherits
[16:04:31.846]                       invokeRestart <- base::invokeRestart
[16:04:31.846]                       is.null <- base::is.null
[16:04:31.846]                       muffled <- FALSE
[16:04:31.846]                       if (inherits(cond, "message")) {
[16:04:31.846]                         muffled <- grepl(pattern, "muffleMessage")
[16:04:31.846]                         if (muffled) 
[16:04:31.846]                           invokeRestart("muffleMessage")
[16:04:31.846]                       }
[16:04:31.846]                       else if (inherits(cond, "warning")) {
[16:04:31.846]                         muffled <- grepl(pattern, "muffleWarning")
[16:04:31.846]                         if (muffled) 
[16:04:31.846]                           invokeRestart("muffleWarning")
[16:04:31.846]                       }
[16:04:31.846]                       else if (inherits(cond, "condition")) {
[16:04:31.846]                         if (!is.null(pattern)) {
[16:04:31.846]                           computeRestarts <- base::computeRestarts
[16:04:31.846]                           grepl <- base::grepl
[16:04:31.846]                           restarts <- computeRestarts(cond)
[16:04:31.846]                           for (restart in restarts) {
[16:04:31.846]                             name <- restart$name
[16:04:31.846]                             if (is.null(name)) 
[16:04:31.846]                               next
[16:04:31.846]                             if (!grepl(pattern, name)) 
[16:04:31.846]                               next
[16:04:31.846]                             invokeRestart(restart)
[16:04:31.846]                             muffled <- TRUE
[16:04:31.846]                             break
[16:04:31.846]                           }
[16:04:31.846]                         }
[16:04:31.846]                       }
[16:04:31.846]                       invisible(muffled)
[16:04:31.846]                     }
[16:04:31.846]                     muffleCondition(cond, pattern = "^muffle")
[16:04:31.846]                   }
[16:04:31.846]                 }
[16:04:31.846]                 else {
[16:04:31.846]                   if (TRUE) {
[16:04:31.846]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:04:31.846]                     {
[16:04:31.846]                       inherits <- base::inherits
[16:04:31.846]                       invokeRestart <- base::invokeRestart
[16:04:31.846]                       is.null <- base::is.null
[16:04:31.846]                       muffled <- FALSE
[16:04:31.846]                       if (inherits(cond, "message")) {
[16:04:31.846]                         muffled <- grepl(pattern, "muffleMessage")
[16:04:31.846]                         if (muffled) 
[16:04:31.846]                           invokeRestart("muffleMessage")
[16:04:31.846]                       }
[16:04:31.846]                       else if (inherits(cond, "warning")) {
[16:04:31.846]                         muffled <- grepl(pattern, "muffleWarning")
[16:04:31.846]                         if (muffled) 
[16:04:31.846]                           invokeRestart("muffleWarning")
[16:04:31.846]                       }
[16:04:31.846]                       else if (inherits(cond, "condition")) {
[16:04:31.846]                         if (!is.null(pattern)) {
[16:04:31.846]                           computeRestarts <- base::computeRestarts
[16:04:31.846]                           grepl <- base::grepl
[16:04:31.846]                           restarts <- computeRestarts(cond)
[16:04:31.846]                           for (restart in restarts) {
[16:04:31.846]                             name <- restart$name
[16:04:31.846]                             if (is.null(name)) 
[16:04:31.846]                               next
[16:04:31.846]                             if (!grepl(pattern, name)) 
[16:04:31.846]                               next
[16:04:31.846]                             invokeRestart(restart)
[16:04:31.846]                             muffled <- TRUE
[16:04:31.846]                             break
[16:04:31.846]                           }
[16:04:31.846]                         }
[16:04:31.846]                       }
[16:04:31.846]                       invisible(muffled)
[16:04:31.846]                     }
[16:04:31.846]                     muffleCondition(cond, pattern = "^muffle")
[16:04:31.846]                   }
[16:04:31.846]                 }
[16:04:31.846]             }
[16:04:31.846]         }))
[16:04:31.846]     }, error = function(ex) {
[16:04:31.846]         base::structure(base::list(value = NULL, visible = NULL, 
[16:04:31.846]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:04:31.846]                 ...future.rng), started = ...future.startTime, 
[16:04:31.846]             finished = Sys.time(), session_uuid = NA_character_, 
[16:04:31.846]             version = "1.8"), class = "FutureResult")
[16:04:31.846]     }, finally = {
[16:04:31.846]         if (!identical(...future.workdir, getwd())) 
[16:04:31.846]             setwd(...future.workdir)
[16:04:31.846]         {
[16:04:31.846]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:04:31.846]                 ...future.oldOptions$nwarnings <- NULL
[16:04:31.846]             }
[16:04:31.846]             base::options(...future.oldOptions)
[16:04:31.846]             if (.Platform$OS.type == "windows") {
[16:04:31.846]                 old_names <- names(...future.oldEnvVars)
[16:04:31.846]                 envs <- base::Sys.getenv()
[16:04:31.846]                 names <- names(envs)
[16:04:31.846]                 common <- intersect(names, old_names)
[16:04:31.846]                 added <- setdiff(names, old_names)
[16:04:31.846]                 removed <- setdiff(old_names, names)
[16:04:31.846]                 changed <- common[...future.oldEnvVars[common] != 
[16:04:31.846]                   envs[common]]
[16:04:31.846]                 NAMES <- toupper(changed)
[16:04:31.846]                 args <- list()
[16:04:31.846]                 for (kk in seq_along(NAMES)) {
[16:04:31.846]                   name <- changed[[kk]]
[16:04:31.846]                   NAME <- NAMES[[kk]]
[16:04:31.846]                   if (name != NAME && is.element(NAME, old_names)) 
[16:04:31.846]                     next
[16:04:31.846]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:04:31.846]                 }
[16:04:31.846]                 NAMES <- toupper(added)
[16:04:31.846]                 for (kk in seq_along(NAMES)) {
[16:04:31.846]                   name <- added[[kk]]
[16:04:31.846]                   NAME <- NAMES[[kk]]
[16:04:31.846]                   if (name != NAME && is.element(NAME, old_names)) 
[16:04:31.846]                     next
[16:04:31.846]                   args[[name]] <- ""
[16:04:31.846]                 }
[16:04:31.846]                 NAMES <- toupper(removed)
[16:04:31.846]                 for (kk in seq_along(NAMES)) {
[16:04:31.846]                   name <- removed[[kk]]
[16:04:31.846]                   NAME <- NAMES[[kk]]
[16:04:31.846]                   if (name != NAME && is.element(NAME, old_names)) 
[16:04:31.846]                     next
[16:04:31.846]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:04:31.846]                 }
[16:04:31.846]                 if (length(args) > 0) 
[16:04:31.846]                   base::do.call(base::Sys.setenv, args = args)
[16:04:31.846]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:04:31.846]             }
[16:04:31.846]             else {
[16:04:31.846]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:04:31.846]             }
[16:04:31.846]             {
[16:04:31.846]                 if (base::length(...future.futureOptionsAdded) > 
[16:04:31.846]                   0L) {
[16:04:31.846]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:04:31.846]                   base::names(opts) <- ...future.futureOptionsAdded
[16:04:31.846]                   base::options(opts)
[16:04:31.846]                 }
[16:04:31.846]                 {
[16:04:31.846]                   {
[16:04:31.846]                     base::options(mc.cores = ...future.mc.cores.old)
[16:04:31.846]                     NULL
[16:04:31.846]                   }
[16:04:31.846]                   options(future.plan = NULL)
[16:04:31.846]                   if (is.na(NA_character_)) 
[16:04:31.846]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:04:31.846]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:04:31.846]                   future::plan(list(function (..., workers = availableCores(constraints = "multicore"), 
[16:04:31.846]                     envir = parent.frame()) 
[16:04:31.846]                   {
[16:04:31.846]                     default_workers <- missing(workers)
[16:04:31.846]                     if (is.function(workers)) 
[16:04:31.846]                       workers <- workers()
[16:04:31.846]                     workers <- structure(as.integer(workers), 
[16:04:31.846]                       class = class(workers))
[16:04:31.846]                     stop_if_not(is.finite(workers), workers >= 
[16:04:31.846]                       1L)
[16:04:31.846]                     if ((workers == 1L && !inherits(workers, 
[16:04:31.846]                       "AsIs")) || !supportsMulticore(warn = TRUE)) {
[16:04:31.846]                       if (default_workers) 
[16:04:31.846]                         supportsMulticore(warn = TRUE)
[16:04:31.846]                       return(sequential(..., envir = envir))
[16:04:31.846]                     }
[16:04:31.846]                     oopts <- options(mc.cores = workers)
[16:04:31.846]                     on.exit(options(oopts))
[16:04:31.846]                     future <- MulticoreFuture(..., workers = workers, 
[16:04:31.846]                       envir = envir)
[16:04:31.846]                     if (!future$lazy) 
[16:04:31.846]                       future <- run(future)
[16:04:31.846]                     invisible(future)
[16:04:31.846]                   }), .cleanup = FALSE, .init = FALSE)
[16:04:31.846]                 }
[16:04:31.846]             }
[16:04:31.846]         }
[16:04:31.846]     })
[16:04:31.846]     if (TRUE) {
[16:04:31.846]         base::sink(type = "output", split = FALSE)
[16:04:31.846]         if (TRUE) {
[16:04:31.846]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:04:31.846]         }
[16:04:31.846]         else {
[16:04:31.846]             ...future.result["stdout"] <- base::list(NULL)
[16:04:31.846]         }
[16:04:31.846]         base::close(...future.stdout)
[16:04:31.846]         ...future.stdout <- NULL
[16:04:31.846]     }
[16:04:31.846]     ...future.result$conditions <- ...future.conditions
[16:04:31.846]     ...future.result$finished <- base::Sys.time()
[16:04:31.846]     ...future.result
[16:04:31.846] }
[16:04:31.848] assign_globals() ...
[16:04:31.849] List of 1
[16:04:31.849]  $ ii: int 1
[16:04:31.849]  - attr(*, "where")=List of 1
[16:04:31.849]   ..$ ii:<environment: R_EmptyEnv> 
[16:04:31.849]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[16:04:31.849]  - attr(*, "resolved")= logi FALSE
[16:04:31.849]  - attr(*, "total_size")= num 56
[16:04:31.849]  - attr(*, "already-done")= logi TRUE
[16:04:31.852] - copied ‘ii’ to environment
[16:04:31.852] assign_globals() ... done
[16:04:31.852] requestCore(): workers = 2
[16:04:31.854] MulticoreFuture started
[16:04:31.854] - Launch lazy future ... done
[16:04:31.854] run() for ‘MulticoreFuture’ ... done
[16:04:31.855] plan(): Setting new future strategy stack:
[16:04:31.856] getGlobalsAndPackages() ...
[16:04:31.856] Searching for globals...
[16:04:31.856] List of future strategies:
[16:04:31.856] 1. sequential:
[16:04:31.856]    - args: function (..., envir = parent.frame())
[16:04:31.856]    - tweaked: FALSE
[16:04:31.856]    - call: NULL
[16:04:31.856] plan(): nbrOfWorkers() = 1
[16:04:31.858] plan(): Setting new future strategy stack:
[16:04:31.858] List of future strategies:
[16:04:31.858] 1. multicore:
[16:04:31.858]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[16:04:31.858]    - tweaked: FALSE
[16:04:31.858]    - call: plan(strategy)
[16:04:31.859] - globals found: [6] ‘{’, ‘if’, ‘==’, ‘%%’, ‘ii’, ‘stop’
[16:04:31.859] Searching for globals ... DONE
[16:04:31.860] Resolving globals: FALSE
[16:04:31.860] The total size of the 1 globals is 56 bytes (56 bytes)
[16:04:31.861] The total size of the 1 globals exported for future expression (‘{; if (ii%%2 == 0); stop("Woops!"); ii; }’) is 56 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘ii’ (56 bytes of class ‘numeric’)
[16:04:31.861] - globals: [1] ‘ii’
[16:04:31.862] 
[16:04:31.862] getGlobalsAndPackages() ... DONE
[16:04:31.862] run() for ‘Future’ ...
[16:04:31.863] - state: ‘created’
[16:04:31.863] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[16:04:31.864] plan(): nbrOfWorkers() = 2
[16:04:31.868] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[16:04:31.868] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[16:04:31.868]   - Field: ‘label’
[16:04:31.868]   - Field: ‘local’
[16:04:31.868]   - Field: ‘owner’
[16:04:31.868]   - Field: ‘envir’
[16:04:31.869]   - Field: ‘workers’
[16:04:31.869]   - Field: ‘packages’
[16:04:31.869]   - Field: ‘gc’
[16:04:31.869]   - Field: ‘job’
[16:04:31.869]   - Field: ‘conditions’
[16:04:31.869]   - Field: ‘expr’
[16:04:31.869]   - Field: ‘uuid’
[16:04:31.870]   - Field: ‘seed’
[16:04:31.870]   - Field: ‘version’
[16:04:31.870]   - Field: ‘result’
[16:04:31.870]   - Field: ‘asynchronous’
[16:04:31.870]   - Field: ‘calls’
[16:04:31.870]   - Field: ‘globals’
[16:04:31.870]   - Field: ‘stdout’
[16:04:31.870]   - Field: ‘earlySignal’
[16:04:31.871]   - Field: ‘lazy’
[16:04:31.871]   - Field: ‘state’
[16:04:31.871] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[16:04:31.871] - Launch lazy future ...
[16:04:31.871] Packages needed by the future expression (n = 0): <none>
[16:04:31.872] Packages needed by future strategies (n = 0): <none>
[16:04:31.872] {
[16:04:31.872]     {
[16:04:31.872]         {
[16:04:31.872]             ...future.startTime <- base::Sys.time()
[16:04:31.872]             {
[16:04:31.872]                 {
[16:04:31.872]                   {
[16:04:31.872]                     {
[16:04:31.872]                       base::local({
[16:04:31.872]                         has_future <- base::requireNamespace("future", 
[16:04:31.872]                           quietly = TRUE)
[16:04:31.872]                         if (has_future) {
[16:04:31.872]                           ns <- base::getNamespace("future")
[16:04:31.872]                           version <- ns[[".package"]][["version"]]
[16:04:31.872]                           if (is.null(version)) 
[16:04:31.872]                             version <- utils::packageVersion("future")
[16:04:31.872]                         }
[16:04:31.872]                         else {
[16:04:31.872]                           version <- NULL
[16:04:31.872]                         }
[16:04:31.872]                         if (!has_future || version < "1.8.0") {
[16:04:31.872]                           info <- base::c(r_version = base::gsub("R version ", 
[16:04:31.872]                             "", base::R.version$version.string), 
[16:04:31.872]                             platform = base::sprintf("%s (%s-bit)", 
[16:04:31.872]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:04:31.872]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[16:04:31.872]                               "release", "version")], collapse = " "), 
[16:04:31.872]                             hostname = base::Sys.info()[["nodename"]])
[16:04:31.872]                           info <- base::sprintf("%s: %s", base::names(info), 
[16:04:31.872]                             info)
[16:04:31.872]                           info <- base::paste(info, collapse = "; ")
[16:04:31.872]                           if (!has_future) {
[16:04:31.872]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:04:31.872]                               info)
[16:04:31.872]                           }
[16:04:31.872]                           else {
[16:04:31.872]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:04:31.872]                               info, version)
[16:04:31.872]                           }
[16:04:31.872]                           base::stop(msg)
[16:04:31.872]                         }
[16:04:31.872]                       })
[16:04:31.872]                     }
[16:04:31.872]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[16:04:31.872]                     base::options(mc.cores = 1L)
[16:04:31.872]                   }
[16:04:31.872]                   options(future.plan = NULL)
[16:04:31.872]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:04:31.872]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:04:31.872]                 }
[16:04:31.872]                 ...future.workdir <- getwd()
[16:04:31.872]             }
[16:04:31.872]             ...future.oldOptions <- base::as.list(base::.Options)
[16:04:31.872]             ...future.oldEnvVars <- base::Sys.getenv()
[16:04:31.872]         }
[16:04:31.872]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:04:31.872]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:04:31.872]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:04:31.872]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:04:31.872]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:04:31.872]             future.stdout.windows.reencode = NULL, width = 80L)
[16:04:31.872]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:04:31.872]             base::names(...future.oldOptions))
[16:04:31.872]     }
[16:04:31.872]     if (FALSE) {
[16:04:31.872]     }
[16:04:31.872]     else {
[16:04:31.872]         if (TRUE) {
[16:04:31.872]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:04:31.872]                 open = "w")
[16:04:31.872]         }
[16:04:31.872]         else {
[16:04:31.872]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:04:31.872]                 windows = "NUL", "/dev/null"), open = "w")
[16:04:31.872]         }
[16:04:31.872]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:04:31.872]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:04:31.872]             base::sink(type = "output", split = FALSE)
[16:04:31.872]             base::close(...future.stdout)
[16:04:31.872]         }, add = TRUE)
[16:04:31.872]     }
[16:04:31.872]     ...future.frame <- base::sys.nframe()
[16:04:31.872]     ...future.conditions <- base::list()
[16:04:31.872]     ...future.rng <- base::globalenv()$.Random.seed
[16:04:31.872]     if (FALSE) {
[16:04:31.872]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:04:31.872]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:04:31.872]     }
[16:04:31.872]     ...future.result <- base::tryCatch({
[16:04:31.872]         base::withCallingHandlers({
[16:04:31.872]             ...future.value <- base::withVisible(base::local({
[16:04:31.872]                 withCallingHandlers({
[16:04:31.872]                   {
[16:04:31.872]                     if (ii%%2 == 0) 
[16:04:31.872]                       stop("Woops!")
[16:04:31.872]                     ii
[16:04:31.872]                   }
[16:04:31.872]                 }, immediateCondition = function(cond) {
[16:04:31.872]                   save_rds <- function (object, pathname, ...) 
[16:04:31.872]                   {
[16:04:31.872]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[16:04:31.872]                     if (file_test("-f", pathname_tmp)) {
[16:04:31.872]                       fi_tmp <- file.info(pathname_tmp)
[16:04:31.872]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[16:04:31.872]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:04:31.872]                         fi_tmp[["mtime"]])
[16:04:31.872]                     }
[16:04:31.872]                     tryCatch({
[16:04:31.872]                       saveRDS(object, file = pathname_tmp, ...)
[16:04:31.872]                     }, error = function(ex) {
[16:04:31.872]                       msg <- conditionMessage(ex)
[16:04:31.872]                       fi_tmp <- file.info(pathname_tmp)
[16:04:31.872]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[16:04:31.872]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:04:31.872]                         fi_tmp[["mtime"]], msg)
[16:04:31.872]                       ex$message <- msg
[16:04:31.872]                       stop(ex)
[16:04:31.872]                     })
[16:04:31.872]                     stopifnot(file_test("-f", pathname_tmp))
[16:04:31.872]                     res <- file.rename(from = pathname_tmp, to = pathname)
[16:04:31.872]                     if (!res || file_test("-f", pathname_tmp)) {
[16:04:31.872]                       fi_tmp <- file.info(pathname_tmp)
[16:04:31.872]                       fi <- file.info(pathname)
[16:04:31.872]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[16:04:31.872]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:04:31.872]                         fi_tmp[["mtime"]], sQuote(pathname), 
[16:04:31.872]                         fi[["size"]], fi[["mtime"]])
[16:04:31.872]                       stop(msg)
[16:04:31.872]                     }
[16:04:31.872]                     invisible(pathname)
[16:04:31.872]                   }
[16:04:31.872]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[16:04:31.872]                     rootPath = tempdir()) 
[16:04:31.872]                   {
[16:04:31.872]                     obj <- list(time = Sys.time(), condition = cond)
[16:04:31.872]                     file <- tempfile(pattern = class(cond)[1], 
[16:04:31.872]                       tmpdir = path, fileext = ".rds")
[16:04:31.872]                     save_rds(obj, file)
[16:04:31.872]                   }
[16:04:31.872]                   saveImmediateCondition(cond, path = "/tmp/Rtmpe612Wd/.future/immediateConditions")
[16:04:31.872]                   muffleCondition <- function (cond, pattern = "^muffle") 
[16:04:31.872]                   {
[16:04:31.872]                     inherits <- base::inherits
[16:04:31.872]                     invokeRestart <- base::invokeRestart
[16:04:31.872]                     is.null <- base::is.null
[16:04:31.872]                     muffled <- FALSE
[16:04:31.872]                     if (inherits(cond, "message")) {
[16:04:31.872]                       muffled <- grepl(pattern, "muffleMessage")
[16:04:31.872]                       if (muffled) 
[16:04:31.872]                         invokeRestart("muffleMessage")
[16:04:31.872]                     }
[16:04:31.872]                     else if (inherits(cond, "warning")) {
[16:04:31.872]                       muffled <- grepl(pattern, "muffleWarning")
[16:04:31.872]                       if (muffled) 
[16:04:31.872]                         invokeRestart("muffleWarning")
[16:04:31.872]                     }
[16:04:31.872]                     else if (inherits(cond, "condition")) {
[16:04:31.872]                       if (!is.null(pattern)) {
[16:04:31.872]                         computeRestarts <- base::computeRestarts
[16:04:31.872]                         grepl <- base::grepl
[16:04:31.872]                         restarts <- computeRestarts(cond)
[16:04:31.872]                         for (restart in restarts) {
[16:04:31.872]                           name <- restart$name
[16:04:31.872]                           if (is.null(name)) 
[16:04:31.872]                             next
[16:04:31.872]                           if (!grepl(pattern, name)) 
[16:04:31.872]                             next
[16:04:31.872]                           invokeRestart(restart)
[16:04:31.872]                           muffled <- TRUE
[16:04:31.872]                           break
[16:04:31.872]                         }
[16:04:31.872]                       }
[16:04:31.872]                     }
[16:04:31.872]                     invisible(muffled)
[16:04:31.872]                   }
[16:04:31.872]                   muffleCondition(cond)
[16:04:31.872]                 })
[16:04:31.872]             }))
[16:04:31.872]             future::FutureResult(value = ...future.value$value, 
[16:04:31.872]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:04:31.872]                   ...future.rng), globalenv = if (FALSE) 
[16:04:31.872]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:04:31.872]                     ...future.globalenv.names))
[16:04:31.872]                 else NULL, started = ...future.startTime, version = "1.8")
[16:04:31.872]         }, condition = base::local({
[16:04:31.872]             c <- base::c
[16:04:31.872]             inherits <- base::inherits
[16:04:31.872]             invokeRestart <- base::invokeRestart
[16:04:31.872]             length <- base::length
[16:04:31.872]             list <- base::list
[16:04:31.872]             seq.int <- base::seq.int
[16:04:31.872]             signalCondition <- base::signalCondition
[16:04:31.872]             sys.calls <- base::sys.calls
[16:04:31.872]             `[[` <- base::`[[`
[16:04:31.872]             `+` <- base::`+`
[16:04:31.872]             `<<-` <- base::`<<-`
[16:04:31.872]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:04:31.872]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:04:31.872]                   3L)]
[16:04:31.872]             }
[16:04:31.872]             function(cond) {
[16:04:31.872]                 is_error <- inherits(cond, "error")
[16:04:31.872]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:04:31.872]                   NULL)
[16:04:31.872]                 if (is_error) {
[16:04:31.872]                   sessionInformation <- function() {
[16:04:31.872]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:04:31.872]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:04:31.872]                       search = base::search(), system = base::Sys.info())
[16:04:31.872]                   }
[16:04:31.872]                   ...future.conditions[[length(...future.conditions) + 
[16:04:31.872]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:04:31.872]                     cond$call), session = sessionInformation(), 
[16:04:31.872]                     timestamp = base::Sys.time(), signaled = 0L)
[16:04:31.872]                   signalCondition(cond)
[16:04:31.872]                 }
[16:04:31.872]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:04:31.872]                 "immediateCondition"))) {
[16:04:31.872]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:04:31.872]                   ...future.conditions[[length(...future.conditions) + 
[16:04:31.872]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:04:31.872]                   if (TRUE && !signal) {
[16:04:31.872]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:04:31.872]                     {
[16:04:31.872]                       inherits <- base::inherits
[16:04:31.872]                       invokeRestart <- base::invokeRestart
[16:04:31.872]                       is.null <- base::is.null
[16:04:31.872]                       muffled <- FALSE
[16:04:31.872]                       if (inherits(cond, "message")) {
[16:04:31.872]                         muffled <- grepl(pattern, "muffleMessage")
[16:04:31.872]                         if (muffled) 
[16:04:31.872]                           invokeRestart("muffleMessage")
[16:04:31.872]                       }
[16:04:31.872]                       else if (inherits(cond, "warning")) {
[16:04:31.872]                         muffled <- grepl(pattern, "muffleWarning")
[16:04:31.872]                         if (muffled) 
[16:04:31.872]                           invokeRestart("muffleWarning")
[16:04:31.872]                       }
[16:04:31.872]                       else if (inherits(cond, "condition")) {
[16:04:31.872]                         if (!is.null(pattern)) {
[16:04:31.872]                           computeRestarts <- base::computeRestarts
[16:04:31.872]                           grepl <- base::grepl
[16:04:31.872]                           restarts <- computeRestarts(cond)
[16:04:31.872]                           for (restart in restarts) {
[16:04:31.872]                             name <- restart$name
[16:04:31.872]                             if (is.null(name)) 
[16:04:31.872]                               next
[16:04:31.872]                             if (!grepl(pattern, name)) 
[16:04:31.872]                               next
[16:04:31.872]                             invokeRestart(restart)
[16:04:31.872]                             muffled <- TRUE
[16:04:31.872]                             break
[16:04:31.872]                           }
[16:04:31.872]                         }
[16:04:31.872]                       }
[16:04:31.872]                       invisible(muffled)
[16:04:31.872]                     }
[16:04:31.872]                     muffleCondition(cond, pattern = "^muffle")
[16:04:31.872]                   }
[16:04:31.872]                 }
[16:04:31.872]                 else {
[16:04:31.872]                   if (TRUE) {
[16:04:31.872]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:04:31.872]                     {
[16:04:31.872]                       inherits <- base::inherits
[16:04:31.872]                       invokeRestart <- base::invokeRestart
[16:04:31.872]                       is.null <- base::is.null
[16:04:31.872]                       muffled <- FALSE
[16:04:31.872]                       if (inherits(cond, "message")) {
[16:04:31.872]                         muffled <- grepl(pattern, "muffleMessage")
[16:04:31.872]                         if (muffled) 
[16:04:31.872]                           invokeRestart("muffleMessage")
[16:04:31.872]                       }
[16:04:31.872]                       else if (inherits(cond, "warning")) {
[16:04:31.872]                         muffled <- grepl(pattern, "muffleWarning")
[16:04:31.872]                         if (muffled) 
[16:04:31.872]                           invokeRestart("muffleWarning")
[16:04:31.872]                       }
[16:04:31.872]                       else if (inherits(cond, "condition")) {
[16:04:31.872]                         if (!is.null(pattern)) {
[16:04:31.872]                           computeRestarts <- base::computeRestarts
[16:04:31.872]                           grepl <- base::grepl
[16:04:31.872]                           restarts <- computeRestarts(cond)
[16:04:31.872]                           for (restart in restarts) {
[16:04:31.872]                             name <- restart$name
[16:04:31.872]                             if (is.null(name)) 
[16:04:31.872]                               next
[16:04:31.872]                             if (!grepl(pattern, name)) 
[16:04:31.872]                               next
[16:04:31.872]                             invokeRestart(restart)
[16:04:31.872]                             muffled <- TRUE
[16:04:31.872]                             break
[16:04:31.872]                           }
[16:04:31.872]                         }
[16:04:31.872]                       }
[16:04:31.872]                       invisible(muffled)
[16:04:31.872]                     }
[16:04:31.872]                     muffleCondition(cond, pattern = "^muffle")
[16:04:31.872]                   }
[16:04:31.872]                 }
[16:04:31.872]             }
[16:04:31.872]         }))
[16:04:31.872]     }, error = function(ex) {
[16:04:31.872]         base::structure(base::list(value = NULL, visible = NULL, 
[16:04:31.872]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:04:31.872]                 ...future.rng), started = ...future.startTime, 
[16:04:31.872]             finished = Sys.time(), session_uuid = NA_character_, 
[16:04:31.872]             version = "1.8"), class = "FutureResult")
[16:04:31.872]     }, finally = {
[16:04:31.872]         if (!identical(...future.workdir, getwd())) 
[16:04:31.872]             setwd(...future.workdir)
[16:04:31.872]         {
[16:04:31.872]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:04:31.872]                 ...future.oldOptions$nwarnings <- NULL
[16:04:31.872]             }
[16:04:31.872]             base::options(...future.oldOptions)
[16:04:31.872]             if (.Platform$OS.type == "windows") {
[16:04:31.872]                 old_names <- names(...future.oldEnvVars)
[16:04:31.872]                 envs <- base::Sys.getenv()
[16:04:31.872]                 names <- names(envs)
[16:04:31.872]                 common <- intersect(names, old_names)
[16:04:31.872]                 added <- setdiff(names, old_names)
[16:04:31.872]                 removed <- setdiff(old_names, names)
[16:04:31.872]                 changed <- common[...future.oldEnvVars[common] != 
[16:04:31.872]                   envs[common]]
[16:04:31.872]                 NAMES <- toupper(changed)
[16:04:31.872]                 args <- list()
[16:04:31.872]                 for (kk in seq_along(NAMES)) {
[16:04:31.872]                   name <- changed[[kk]]
[16:04:31.872]                   NAME <- NAMES[[kk]]
[16:04:31.872]                   if (name != NAME && is.element(NAME, old_names)) 
[16:04:31.872]                     next
[16:04:31.872]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:04:31.872]                 }
[16:04:31.872]                 NAMES <- toupper(added)
[16:04:31.872]                 for (kk in seq_along(NAMES)) {
[16:04:31.872]                   name <- added[[kk]]
[16:04:31.872]                   NAME <- NAMES[[kk]]
[16:04:31.872]                   if (name != NAME && is.element(NAME, old_names)) 
[16:04:31.872]                     next
[16:04:31.872]                   args[[name]] <- ""
[16:04:31.872]                 }
[16:04:31.872]                 NAMES <- toupper(removed)
[16:04:31.872]                 for (kk in seq_along(NAMES)) {
[16:04:31.872]                   name <- removed[[kk]]
[16:04:31.872]                   NAME <- NAMES[[kk]]
[16:04:31.872]                   if (name != NAME && is.element(NAME, old_names)) 
[16:04:31.872]                     next
[16:04:31.872]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:04:31.872]                 }
[16:04:31.872]                 if (length(args) > 0) 
[16:04:31.872]                   base::do.call(base::Sys.setenv, args = args)
[16:04:31.872]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:04:31.872]             }
[16:04:31.872]             else {
[16:04:31.872]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:04:31.872]             }
[16:04:31.872]             {
[16:04:31.872]                 if (base::length(...future.futureOptionsAdded) > 
[16:04:31.872]                   0L) {
[16:04:31.872]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:04:31.872]                   base::names(opts) <- ...future.futureOptionsAdded
[16:04:31.872]                   base::options(opts)
[16:04:31.872]                 }
[16:04:31.872]                 {
[16:04:31.872]                   {
[16:04:31.872]                     base::options(mc.cores = ...future.mc.cores.old)
[16:04:31.872]                     NULL
[16:04:31.872]                   }
[16:04:31.872]                   options(future.plan = NULL)
[16:04:31.872]                   if (is.na(NA_character_)) 
[16:04:31.872]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:04:31.872]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:04:31.872]                   future::plan(list(function (..., workers = availableCores(constraints = "multicore"), 
[16:04:31.872]                     envir = parent.frame()) 
[16:04:31.872]                   {
[16:04:31.872]                     default_workers <- missing(workers)
[16:04:31.872]                     if (is.function(workers)) 
[16:04:31.872]                       workers <- workers()
[16:04:31.872]                     workers <- structure(as.integer(workers), 
[16:04:31.872]                       class = class(workers))
[16:04:31.872]                     stop_if_not(is.finite(workers), workers >= 
[16:04:31.872]                       1L)
[16:04:31.872]                     if ((workers == 1L && !inherits(workers, 
[16:04:31.872]                       "AsIs")) || !supportsMulticore(warn = TRUE)) {
[16:04:31.872]                       if (default_workers) 
[16:04:31.872]                         supportsMulticore(warn = TRUE)
[16:04:31.872]                       return(sequential(..., envir = envir))
[16:04:31.872]                     }
[16:04:31.872]                     oopts <- options(mc.cores = workers)
[16:04:31.872]                     on.exit(options(oopts))
[16:04:31.872]                     future <- MulticoreFuture(..., workers = workers, 
[16:04:31.872]                       envir = envir)
[16:04:31.872]                     if (!future$lazy) 
[16:04:31.872]                       future <- run(future)
[16:04:31.872]                     invisible(future)
[16:04:31.872]                   }), .cleanup = FALSE, .init = FALSE)
[16:04:31.872]                 }
[16:04:31.872]             }
[16:04:31.872]         }
[16:04:31.872]     })
[16:04:31.872]     if (TRUE) {
[16:04:31.872]         base::sink(type = "output", split = FALSE)
[16:04:31.872]         if (TRUE) {
[16:04:31.872]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:04:31.872]         }
[16:04:31.872]         else {
[16:04:31.872]             ...future.result["stdout"] <- base::list(NULL)
[16:04:31.872]         }
[16:04:31.872]         base::close(...future.stdout)
[16:04:31.872]         ...future.stdout <- NULL
[16:04:31.872]     }
[16:04:31.872]     ...future.result$conditions <- ...future.conditions
[16:04:31.872]     ...future.result$finished <- base::Sys.time()
[16:04:31.872]     ...future.result
[16:04:31.872] }
[16:04:31.876] assign_globals() ...
[16:04:31.876] List of 1
[16:04:31.876]  $ ii: int 2
[16:04:31.876]  - attr(*, "where")=List of 1
[16:04:31.876]   ..$ ii:<environment: R_EmptyEnv> 
[16:04:31.876]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[16:04:31.876]  - attr(*, "resolved")= logi FALSE
[16:04:31.876]  - attr(*, "total_size")= num 56
[16:04:31.876]  - attr(*, "already-done")= logi TRUE
[16:04:31.879] - copied ‘ii’ to environment
[16:04:31.880] assign_globals() ... done
[16:04:31.880] requestCore(): workers = 2
[16:04:31.882] MulticoreFuture started
[16:04:31.882] - Launch lazy future ... done
[16:04:31.882] run() for ‘MulticoreFuture’ ... done
[16:04:31.883] plan(): Setting new future strategy stack:
[16:04:31.883] getGlobalsAndPackages() ...
[16:04:31.883] Searching for globals...
[16:04:31.883] List of future strategies:
[16:04:31.883] 1. sequential:
[16:04:31.883]    - args: function (..., envir = parent.frame())
[16:04:31.883]    - tweaked: FALSE
[16:04:31.883]    - call: NULL
[16:04:31.884] plan(): nbrOfWorkers() = 1
[16:04:31.886] plan(): Setting new future strategy stack:
[16:04:31.886] List of future strategies:
[16:04:31.886] 1. multicore:
[16:04:31.886]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[16:04:31.886]    - tweaked: FALSE
[16:04:31.886]    - call: plan(strategy)
[16:04:31.886] - globals found: [6] ‘{’, ‘if’, ‘==’, ‘%%’, ‘ii’, ‘stop’
[16:04:31.886] Searching for globals ... DONE
[16:04:31.887] Resolving globals: FALSE
[16:04:31.888] The total size of the 1 globals is 56 bytes (56 bytes)
[16:04:31.888] The total size of the 1 globals exported for future expression (‘{; if (ii%%2 == 0); stop("Woops!"); ii; }’) is 56 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘ii’ (56 bytes of class ‘numeric’)
[16:04:31.888] - globals: [1] ‘ii’
[16:04:31.889] 
[16:04:31.889] getGlobalsAndPackages() ... DONE
[16:04:31.889] run() for ‘Future’ ...
[16:04:31.889] - state: ‘created’
[16:04:31.891] plan(): nbrOfWorkers() = 2
[16:04:31.890] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[16:04:31.898] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[16:04:31.898] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[16:04:31.899]   - Field: ‘label’
[16:04:31.899]   - Field: ‘local’
[16:04:31.899]   - Field: ‘owner’
[16:04:31.899]   - Field: ‘envir’
[16:04:31.900]   - Field: ‘workers’
[16:04:31.900]   - Field: ‘packages’
[16:04:31.900]   - Field: ‘gc’
[16:04:31.900]   - Field: ‘job’
[16:04:31.900]   - Field: ‘conditions’
[16:04:31.900]   - Field: ‘expr’
[16:04:31.900]   - Field: ‘uuid’
[16:04:31.901]   - Field: ‘seed’
[16:04:31.901]   - Field: ‘version’
[16:04:31.901]   - Field: ‘result’
[16:04:31.901]   - Field: ‘asynchronous’
[16:04:31.901]   - Field: ‘calls’
[16:04:31.901]   - Field: ‘globals’
[16:04:31.902]   - Field: ‘stdout’
[16:04:31.902]   - Field: ‘earlySignal’
[16:04:31.902]   - Field: ‘lazy’
[16:04:31.902]   - Field: ‘state’
[16:04:31.902] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[16:04:31.902] - Launch lazy future ...
[16:04:31.903] Packages needed by the future expression (n = 0): <none>
[16:04:31.903] Packages needed by future strategies (n = 0): <none>
[16:04:31.904] {
[16:04:31.904]     {
[16:04:31.904]         {
[16:04:31.904]             ...future.startTime <- base::Sys.time()
[16:04:31.904]             {
[16:04:31.904]                 {
[16:04:31.904]                   {
[16:04:31.904]                     {
[16:04:31.904]                       base::local({
[16:04:31.904]                         has_future <- base::requireNamespace("future", 
[16:04:31.904]                           quietly = TRUE)
[16:04:31.904]                         if (has_future) {
[16:04:31.904]                           ns <- base::getNamespace("future")
[16:04:31.904]                           version <- ns[[".package"]][["version"]]
[16:04:31.904]                           if (is.null(version)) 
[16:04:31.904]                             version <- utils::packageVersion("future")
[16:04:31.904]                         }
[16:04:31.904]                         else {
[16:04:31.904]                           version <- NULL
[16:04:31.904]                         }
[16:04:31.904]                         if (!has_future || version < "1.8.0") {
[16:04:31.904]                           info <- base::c(r_version = base::gsub("R version ", 
[16:04:31.904]                             "", base::R.version$version.string), 
[16:04:31.904]                             platform = base::sprintf("%s (%s-bit)", 
[16:04:31.904]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:04:31.904]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[16:04:31.904]                               "release", "version")], collapse = " "), 
[16:04:31.904]                             hostname = base::Sys.info()[["nodename"]])
[16:04:31.904]                           info <- base::sprintf("%s: %s", base::names(info), 
[16:04:31.904]                             info)
[16:04:31.904]                           info <- base::paste(info, collapse = "; ")
[16:04:31.904]                           if (!has_future) {
[16:04:31.904]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:04:31.904]                               info)
[16:04:31.904]                           }
[16:04:31.904]                           else {
[16:04:31.904]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:04:31.904]                               info, version)
[16:04:31.904]                           }
[16:04:31.904]                           base::stop(msg)
[16:04:31.904]                         }
[16:04:31.904]                       })
[16:04:31.904]                     }
[16:04:31.904]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[16:04:31.904]                     base::options(mc.cores = 1L)
[16:04:31.904]                   }
[16:04:31.904]                   options(future.plan = NULL)
[16:04:31.904]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:04:31.904]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:04:31.904]                 }
[16:04:31.904]                 ...future.workdir <- getwd()
[16:04:31.904]             }
[16:04:31.904]             ...future.oldOptions <- base::as.list(base::.Options)
[16:04:31.904]             ...future.oldEnvVars <- base::Sys.getenv()
[16:04:31.904]         }
[16:04:31.904]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:04:31.904]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:04:31.904]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:04:31.904]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:04:31.904]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:04:31.904]             future.stdout.windows.reencode = NULL, width = 80L)
[16:04:31.904]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:04:31.904]             base::names(...future.oldOptions))
[16:04:31.904]     }
[16:04:31.904]     if (FALSE) {
[16:04:31.904]     }
[16:04:31.904]     else {
[16:04:31.904]         if (TRUE) {
[16:04:31.904]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:04:31.904]                 open = "w")
[16:04:31.904]         }
[16:04:31.904]         else {
[16:04:31.904]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:04:31.904]                 windows = "NUL", "/dev/null"), open = "w")
[16:04:31.904]         }
[16:04:31.904]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:04:31.904]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:04:31.904]             base::sink(type = "output", split = FALSE)
[16:04:31.904]             base::close(...future.stdout)
[16:04:31.904]         }, add = TRUE)
[16:04:31.904]     }
[16:04:31.904]     ...future.frame <- base::sys.nframe()
[16:04:31.904]     ...future.conditions <- base::list()
[16:04:31.904]     ...future.rng <- base::globalenv()$.Random.seed
[16:04:31.904]     if (FALSE) {
[16:04:31.904]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:04:31.904]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:04:31.904]     }
[16:04:31.904]     ...future.result <- base::tryCatch({
[16:04:31.904]         base::withCallingHandlers({
[16:04:31.904]             ...future.value <- base::withVisible(base::local({
[16:04:31.904]                 withCallingHandlers({
[16:04:31.904]                   {
[16:04:31.904]                     if (ii%%2 == 0) 
[16:04:31.904]                       stop("Woops!")
[16:04:31.904]                     ii
[16:04:31.904]                   }
[16:04:31.904]                 }, immediateCondition = function(cond) {
[16:04:31.904]                   save_rds <- function (object, pathname, ...) 
[16:04:31.904]                   {
[16:04:31.904]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[16:04:31.904]                     if (file_test("-f", pathname_tmp)) {
[16:04:31.904]                       fi_tmp <- file.info(pathname_tmp)
[16:04:31.904]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[16:04:31.904]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:04:31.904]                         fi_tmp[["mtime"]])
[16:04:31.904]                     }
[16:04:31.904]                     tryCatch({
[16:04:31.904]                       saveRDS(object, file = pathname_tmp, ...)
[16:04:31.904]                     }, error = function(ex) {
[16:04:31.904]                       msg <- conditionMessage(ex)
[16:04:31.904]                       fi_tmp <- file.info(pathname_tmp)
[16:04:31.904]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[16:04:31.904]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:04:31.904]                         fi_tmp[["mtime"]], msg)
[16:04:31.904]                       ex$message <- msg
[16:04:31.904]                       stop(ex)
[16:04:31.904]                     })
[16:04:31.904]                     stopifnot(file_test("-f", pathname_tmp))
[16:04:31.904]                     res <- file.rename(from = pathname_tmp, to = pathname)
[16:04:31.904]                     if (!res || file_test("-f", pathname_tmp)) {
[16:04:31.904]                       fi_tmp <- file.info(pathname_tmp)
[16:04:31.904]                       fi <- file.info(pathname)
[16:04:31.904]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[16:04:31.904]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:04:31.904]                         fi_tmp[["mtime"]], sQuote(pathname), 
[16:04:31.904]                         fi[["size"]], fi[["mtime"]])
[16:04:31.904]                       stop(msg)
[16:04:31.904]                     }
[16:04:31.904]                     invisible(pathname)
[16:04:31.904]                   }
[16:04:31.904]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[16:04:31.904]                     rootPath = tempdir()) 
[16:04:31.904]                   {
[16:04:31.904]                     obj <- list(time = Sys.time(), condition = cond)
[16:04:31.904]                     file <- tempfile(pattern = class(cond)[1], 
[16:04:31.904]                       tmpdir = path, fileext = ".rds")
[16:04:31.904]                     save_rds(obj, file)
[16:04:31.904]                   }
[16:04:31.904]                   saveImmediateCondition(cond, path = "/tmp/Rtmpe612Wd/.future/immediateConditions")
[16:04:31.904]                   muffleCondition <- function (cond, pattern = "^muffle") 
[16:04:31.904]                   {
[16:04:31.904]                     inherits <- base::inherits
[16:04:31.904]                     invokeRestart <- base::invokeRestart
[16:04:31.904]                     is.null <- base::is.null
[16:04:31.904]                     muffled <- FALSE
[16:04:31.904]                     if (inherits(cond, "message")) {
[16:04:31.904]                       muffled <- grepl(pattern, "muffleMessage")
[16:04:31.904]                       if (muffled) 
[16:04:31.904]                         invokeRestart("muffleMessage")
[16:04:31.904]                     }
[16:04:31.904]                     else if (inherits(cond, "warning")) {
[16:04:31.904]                       muffled <- grepl(pattern, "muffleWarning")
[16:04:31.904]                       if (muffled) 
[16:04:31.904]                         invokeRestart("muffleWarning")
[16:04:31.904]                     }
[16:04:31.904]                     else if (inherits(cond, "condition")) {
[16:04:31.904]                       if (!is.null(pattern)) {
[16:04:31.904]                         computeRestarts <- base::computeRestarts
[16:04:31.904]                         grepl <- base::grepl
[16:04:31.904]                         restarts <- computeRestarts(cond)
[16:04:31.904]                         for (restart in restarts) {
[16:04:31.904]                           name <- restart$name
[16:04:31.904]                           if (is.null(name)) 
[16:04:31.904]                             next
[16:04:31.904]                           if (!grepl(pattern, name)) 
[16:04:31.904]                             next
[16:04:31.904]                           invokeRestart(restart)
[16:04:31.904]                           muffled <- TRUE
[16:04:31.904]                           break
[16:04:31.904]                         }
[16:04:31.904]                       }
[16:04:31.904]                     }
[16:04:31.904]                     invisible(muffled)
[16:04:31.904]                   }
[16:04:31.904]                   muffleCondition(cond)
[16:04:31.904]                 })
[16:04:31.904]             }))
[16:04:31.904]             future::FutureResult(value = ...future.value$value, 
[16:04:31.904]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:04:31.904]                   ...future.rng), globalenv = if (FALSE) 
[16:04:31.904]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:04:31.904]                     ...future.globalenv.names))
[16:04:31.904]                 else NULL, started = ...future.startTime, version = "1.8")
[16:04:31.904]         }, condition = base::local({
[16:04:31.904]             c <- base::c
[16:04:31.904]             inherits <- base::inherits
[16:04:31.904]             invokeRestart <- base::invokeRestart
[16:04:31.904]             length <- base::length
[16:04:31.904]             list <- base::list
[16:04:31.904]             seq.int <- base::seq.int
[16:04:31.904]             signalCondition <- base::signalCondition
[16:04:31.904]             sys.calls <- base::sys.calls
[16:04:31.904]             `[[` <- base::`[[`
[16:04:31.904]             `+` <- base::`+`
[16:04:31.904]             `<<-` <- base::`<<-`
[16:04:31.904]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:04:31.904]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:04:31.904]                   3L)]
[16:04:31.904]             }
[16:04:31.904]             function(cond) {
[16:04:31.904]                 is_error <- inherits(cond, "error")
[16:04:31.904]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:04:31.904]                   NULL)
[16:04:31.904]                 if (is_error) {
[16:04:31.904]                   sessionInformation <- function() {
[16:04:31.904]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:04:31.904]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:04:31.904]                       search = base::search(), system = base::Sys.info())
[16:04:31.904]                   }
[16:04:31.904]                   ...future.conditions[[length(...future.conditions) + 
[16:04:31.904]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:04:31.904]                     cond$call), session = sessionInformation(), 
[16:04:31.904]                     timestamp = base::Sys.time(), signaled = 0L)
[16:04:31.904]                   signalCondition(cond)
[16:04:31.904]                 }
[16:04:31.904]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:04:31.904]                 "immediateCondition"))) {
[16:04:31.904]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:04:31.904]                   ...future.conditions[[length(...future.conditions) + 
[16:04:31.904]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:04:31.904]                   if (TRUE && !signal) {
[16:04:31.904]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:04:31.904]                     {
[16:04:31.904]                       inherits <- base::inherits
[16:04:31.904]                       invokeRestart <- base::invokeRestart
[16:04:31.904]                       is.null <- base::is.null
[16:04:31.904]                       muffled <- FALSE
[16:04:31.904]                       if (inherits(cond, "message")) {
[16:04:31.904]                         muffled <- grepl(pattern, "muffleMessage")
[16:04:31.904]                         if (muffled) 
[16:04:31.904]                           invokeRestart("muffleMessage")
[16:04:31.904]                       }
[16:04:31.904]                       else if (inherits(cond, "warning")) {
[16:04:31.904]                         muffled <- grepl(pattern, "muffleWarning")
[16:04:31.904]                         if (muffled) 
[16:04:31.904]                           invokeRestart("muffleWarning")
[16:04:31.904]                       }
[16:04:31.904]                       else if (inherits(cond, "condition")) {
[16:04:31.904]                         if (!is.null(pattern)) {
[16:04:31.904]                           computeRestarts <- base::computeRestarts
[16:04:31.904]                           grepl <- base::grepl
[16:04:31.904]                           restarts <- computeRestarts(cond)
[16:04:31.904]                           for (restart in restarts) {
[16:04:31.904]                             name <- restart$name
[16:04:31.904]                             if (is.null(name)) 
[16:04:31.904]                               next
[16:04:31.904]                             if (!grepl(pattern, name)) 
[16:04:31.904]                               next
[16:04:31.904]                             invokeRestart(restart)
[16:04:31.904]                             muffled <- TRUE
[16:04:31.904]                             break
[16:04:31.904]                           }
[16:04:31.904]                         }
[16:04:31.904]                       }
[16:04:31.904]                       invisible(muffled)
[16:04:31.904]                     }
[16:04:31.904]                     muffleCondition(cond, pattern = "^muffle")
[16:04:31.904]                   }
[16:04:31.904]                 }
[16:04:31.904]                 else {
[16:04:31.904]                   if (TRUE) {
[16:04:31.904]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:04:31.904]                     {
[16:04:31.904]                       inherits <- base::inherits
[16:04:31.904]                       invokeRestart <- base::invokeRestart
[16:04:31.904]                       is.null <- base::is.null
[16:04:31.904]                       muffled <- FALSE
[16:04:31.904]                       if (inherits(cond, "message")) {
[16:04:31.904]                         muffled <- grepl(pattern, "muffleMessage")
[16:04:31.904]                         if (muffled) 
[16:04:31.904]                           invokeRestart("muffleMessage")
[16:04:31.904]                       }
[16:04:31.904]                       else if (inherits(cond, "warning")) {
[16:04:31.904]                         muffled <- grepl(pattern, "muffleWarning")
[16:04:31.904]                         if (muffled) 
[16:04:31.904]                           invokeRestart("muffleWarning")
[16:04:31.904]                       }
[16:04:31.904]                       else if (inherits(cond, "condition")) {
[16:04:31.904]                         if (!is.null(pattern)) {
[16:04:31.904]                           computeRestarts <- base::computeRestarts
[16:04:31.904]                           grepl <- base::grepl
[16:04:31.904]                           restarts <- computeRestarts(cond)
[16:04:31.904]                           for (restart in restarts) {
[16:04:31.904]                             name <- restart$name
[16:04:31.904]                             if (is.null(name)) 
[16:04:31.904]                               next
[16:04:31.904]                             if (!grepl(pattern, name)) 
[16:04:31.904]                               next
[16:04:31.904]                             invokeRestart(restart)
[16:04:31.904]                             muffled <- TRUE
[16:04:31.904]                             break
[16:04:31.904]                           }
[16:04:31.904]                         }
[16:04:31.904]                       }
[16:04:31.904]                       invisible(muffled)
[16:04:31.904]                     }
[16:04:31.904]                     muffleCondition(cond, pattern = "^muffle")
[16:04:31.904]                   }
[16:04:31.904]                 }
[16:04:31.904]             }
[16:04:31.904]         }))
[16:04:31.904]     }, error = function(ex) {
[16:04:31.904]         base::structure(base::list(value = NULL, visible = NULL, 
[16:04:31.904]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:04:31.904]                 ...future.rng), started = ...future.startTime, 
[16:04:31.904]             finished = Sys.time(), session_uuid = NA_character_, 
[16:04:31.904]             version = "1.8"), class = "FutureResult")
[16:04:31.904]     }, finally = {
[16:04:31.904]         if (!identical(...future.workdir, getwd())) 
[16:04:31.904]             setwd(...future.workdir)
[16:04:31.904]         {
[16:04:31.904]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:04:31.904]                 ...future.oldOptions$nwarnings <- NULL
[16:04:31.904]             }
[16:04:31.904]             base::options(...future.oldOptions)
[16:04:31.904]             if (.Platform$OS.type == "windows") {
[16:04:31.904]                 old_names <- names(...future.oldEnvVars)
[16:04:31.904]                 envs <- base::Sys.getenv()
[16:04:31.904]                 names <- names(envs)
[16:04:31.904]                 common <- intersect(names, old_names)
[16:04:31.904]                 added <- setdiff(names, old_names)
[16:04:31.904]                 removed <- setdiff(old_names, names)
[16:04:31.904]                 changed <- common[...future.oldEnvVars[common] != 
[16:04:31.904]                   envs[common]]
[16:04:31.904]                 NAMES <- toupper(changed)
[16:04:31.904]                 args <- list()
[16:04:31.904]                 for (kk in seq_along(NAMES)) {
[16:04:31.904]                   name <- changed[[kk]]
[16:04:31.904]                   NAME <- NAMES[[kk]]
[16:04:31.904]                   if (name != NAME && is.element(NAME, old_names)) 
[16:04:31.904]                     next
[16:04:31.904]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:04:31.904]                 }
[16:04:31.904]                 NAMES <- toupper(added)
[16:04:31.904]                 for (kk in seq_along(NAMES)) {
[16:04:31.904]                   name <- added[[kk]]
[16:04:31.904]                   NAME <- NAMES[[kk]]
[16:04:31.904]                   if (name != NAME && is.element(NAME, old_names)) 
[16:04:31.904]                     next
[16:04:31.904]                   args[[name]] <- ""
[16:04:31.904]                 }
[16:04:31.904]                 NAMES <- toupper(removed)
[16:04:31.904]                 for (kk in seq_along(NAMES)) {
[16:04:31.904]                   name <- removed[[kk]]
[16:04:31.904]                   NAME <- NAMES[[kk]]
[16:04:31.904]                   if (name != NAME && is.element(NAME, old_names)) 
[16:04:31.904]                     next
[16:04:31.904]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:04:31.904]                 }
[16:04:31.904]                 if (length(args) > 0) 
[16:04:31.904]                   base::do.call(base::Sys.setenv, args = args)
[16:04:31.904]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:04:31.904]             }
[16:04:31.904]             else {
[16:04:31.904]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:04:31.904]             }
[16:04:31.904]             {
[16:04:31.904]                 if (base::length(...future.futureOptionsAdded) > 
[16:04:31.904]                   0L) {
[16:04:31.904]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:04:31.904]                   base::names(opts) <- ...future.futureOptionsAdded
[16:04:31.904]                   base::options(opts)
[16:04:31.904]                 }
[16:04:31.904]                 {
[16:04:31.904]                   {
[16:04:31.904]                     base::options(mc.cores = ...future.mc.cores.old)
[16:04:31.904]                     NULL
[16:04:31.904]                   }
[16:04:31.904]                   options(future.plan = NULL)
[16:04:31.904]                   if (is.na(NA_character_)) 
[16:04:31.904]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:04:31.904]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:04:31.904]                   future::plan(list(function (..., workers = availableCores(constraints = "multicore"), 
[16:04:31.904]                     envir = parent.frame()) 
[16:04:31.904]                   {
[16:04:31.904]                     default_workers <- missing(workers)
[16:04:31.904]                     if (is.function(workers)) 
[16:04:31.904]                       workers <- workers()
[16:04:31.904]                     workers <- structure(as.integer(workers), 
[16:04:31.904]                       class = class(workers))
[16:04:31.904]                     stop_if_not(is.finite(workers), workers >= 
[16:04:31.904]                       1L)
[16:04:31.904]                     if ((workers == 1L && !inherits(workers, 
[16:04:31.904]                       "AsIs")) || !supportsMulticore(warn = TRUE)) {
[16:04:31.904]                       if (default_workers) 
[16:04:31.904]                         supportsMulticore(warn = TRUE)
[16:04:31.904]                       return(sequential(..., envir = envir))
[16:04:31.904]                     }
[16:04:31.904]                     oopts <- options(mc.cores = workers)
[16:04:31.904]                     on.exit(options(oopts))
[16:04:31.904]                     future <- MulticoreFuture(..., workers = workers, 
[16:04:31.904]                       envir = envir)
[16:04:31.904]                     if (!future$lazy) 
[16:04:31.904]                       future <- run(future)
[16:04:31.904]                     invisible(future)
[16:04:31.904]                   }), .cleanup = FALSE, .init = FALSE)
[16:04:31.904]                 }
[16:04:31.904]             }
[16:04:31.904]         }
[16:04:31.904]     })
[16:04:31.904]     if (TRUE) {
[16:04:31.904]         base::sink(type = "output", split = FALSE)
[16:04:31.904]         if (TRUE) {
[16:04:31.904]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:04:31.904]         }
[16:04:31.904]         else {
[16:04:31.904]             ...future.result["stdout"] <- base::list(NULL)
[16:04:31.904]         }
[16:04:31.904]         base::close(...future.stdout)
[16:04:31.904]         ...future.stdout <- NULL
[16:04:31.904]     }
[16:04:31.904]     ...future.result$conditions <- ...future.conditions
[16:04:31.904]     ...future.result$finished <- base::Sys.time()
[16:04:31.904]     ...future.result
[16:04:31.904] }
[16:04:31.906] assign_globals() ...
[16:04:31.907] List of 1
[16:04:31.907]  $ ii: int 3
[16:04:31.907]  - attr(*, "where")=List of 1
[16:04:31.907]   ..$ ii:<environment: R_EmptyEnv> 
[16:04:31.907]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[16:04:31.907]  - attr(*, "resolved")= logi FALSE
[16:04:31.907]  - attr(*, "total_size")= num 56
[16:04:31.907]  - attr(*, "already-done")= logi TRUE
[16:04:31.910] - copied ‘ii’ to environment
[16:04:31.911] assign_globals() ... done
[16:04:31.911] requestCore(): workers = 2
[16:04:31.911] Poll #1 (0): usedCores() = 2, workers = 2
[16:04:31.922] result() for MulticoreFuture ...
[16:04:31.923] result() for MulticoreFuture ...
[16:04:31.923] result() for MulticoreFuture ... done
[16:04:31.924] result() for MulticoreFuture ... done
[16:04:31.924] result() for MulticoreFuture ...
[16:04:31.924] result() for MulticoreFuture ... done
[16:04:31.927] MulticoreFuture started
[16:04:31.927] - Launch lazy future ... done
[16:04:31.927] run() for ‘MulticoreFuture’ ... done
[16:04:31.928] result() for MulticoreFuture ...
[16:04:31.928] result() for MulticoreFuture ... done
[16:04:31.928] plan(): Setting new future strategy stack:
[16:04:31.928] result() for MulticoreFuture ...
[16:04:31.929] result() for MulticoreFuture ... done
[16:04:31.929] result() for MulticoreFuture ...
[16:04:31.928] List of future strategies:
[16:04:31.928] 1. sequential:
[16:04:31.928]    - args: function (..., envir = parent.frame())
[16:04:31.928]    - tweaked: FALSE
[16:04:31.928]    - call: NULL
[16:04:31.929] plan(): nbrOfWorkers() = 1
[16:04:31.931] plan(): Setting new future strategy stack:
[16:04:31.931] List of future strategies:
[16:04:31.931] 1. multicore:
[16:04:31.931]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[16:04:31.931]    - tweaked: FALSE
[16:04:31.931]    - call: plan(strategy)
[16:04:31.932] result() for MulticoreFuture ...
[16:04:31.933] result() for MulticoreFuture ... done
[16:04:31.933] signalConditions() ...
[16:04:31.933]  - include = ‘immediateCondition’
[16:04:31.933]  - exclude = 
[16:04:31.933]  - resignal = FALSE
[16:04:31.934]  - Number of conditions: 1
[16:04:31.934] signalConditions() ... done
[16:04:31.934] result() for MulticoreFuture ... done
[16:04:31.934] result() for MulticoreFuture ...
[16:04:31.934] result() for MulticoreFuture ... done
[16:04:31.935] signalConditions() ...
[16:04:31.935]  - include = ‘immediateCondition’
[16:04:31.935]  - exclude = 
[16:04:31.935]  - resignal = FALSE
[16:04:31.935]  - Number of conditions: 1
[16:04:31.935] signalConditions() ... done
[16:04:31.936] Future state: ‘finished’
[16:04:31.936] result() for MulticoreFuture ...
[16:04:31.936] result() for MulticoreFuture ... done
[16:04:31.936] plan(): nbrOfWorkers() = 2
[16:04:31.936] signalConditions() ...
[16:04:31.936]  - include = ‘condition’
[16:04:31.936]  - exclude = ‘immediateCondition’
[16:04:31.937]  - resignal = TRUE
[16:04:31.937]  - Number of conditions: 1
[16:04:31.937]  - Condition #1: ‘simpleError’, ‘error’, ‘condition’
[16:04:31.937] signalConditions() ... done
[16:04:31.938] result() for MulticoreFuture ...
[16:04:31.938] result() for MulticoreFuture ...
[16:04:31.938] result() for MulticoreFuture ... done
[16:04:31.939] result() for MulticoreFuture ... done
[16:04:31.939] result() for MulticoreFuture ...
[16:04:31.939] result() for MulticoreFuture ... done
Warning in get(var, envir = x, inherits = FALSE) :
  restarting interrupted promise evaluation
[16:04:31.939] result() for MulticoreFuture ...
[16:04:31.939] result() for MulticoreFuture ... done
[16:04:31.940] result() for MulticoreFuture ...
[16:04:31.940] result() for MulticoreFuture ... done
[16:04:31.940] signalConditions() ...
[16:04:31.940]  - include = ‘immediateCondition’
[16:04:31.940]  - exclude = 
[16:04:31.940]  - resignal = FALSE
[16:04:31.940]  - Number of conditions: 1
[16:04:31.940] signalConditions() ... done
[16:04:31.941] Future state: ‘finished’
[16:04:31.941] result() for MulticoreFuture ...
[16:04:31.941] result() for MulticoreFuture ... done
[16:04:31.941] signalConditions() ...
[16:04:31.941]  - include = ‘condition’
[16:04:31.941]  - exclude = ‘immediateCondition’
[16:04:31.941]  - resignal = TRUE
[16:04:31.941]  - Number of conditions: 1
[16:04:31.941]  - Condition #1: ‘simpleError’, ‘error’, ‘condition’
[16:04:31.942] signalConditions() ... done
Warning in get(var, envir = x, inherits = FALSE) :
  restarting interrupted promise evaluation
[16:04:31.942] result() for MulticoreFuture ...
[16:04:31.942] result() for MulticoreFuture ... done
[16:04:31.942] result() for MulticoreFuture ...
[16:04:31.942] result() for MulticoreFuture ... done
[16:04:31.942] signalConditions() ...
[16:04:31.942]  - include = ‘immediateCondition’
[16:04:31.943]  - exclude = 
[16:04:31.943]  - resignal = FALSE
[16:04:31.943]  - Number of conditions: 1
[16:04:31.943] signalConditions() ... done
[16:04:31.943] Future state: ‘finished’
[16:04:31.943] result() for MulticoreFuture ...
[16:04:31.943] result() for MulticoreFuture ... done
[16:04:31.943] signalConditions() ...
[16:04:31.944]  - include = ‘condition’
[16:04:31.944]  - exclude = ‘immediateCondition’
[16:04:31.944]  - resignal = TRUE
[16:04:31.944]  - Number of conditions: 1
[16:04:31.944]  - Condition #1: ‘simpleError’, ‘error’, ‘condition’
[16:04:31.944] signalConditions() ... done
** Future evaluation with a poor-man's "progress bar"
[16:04:31.947] getGlobalsAndPackages() ...
[16:04:31.947] Searching for globals...
[16:04:31.950] - globals found: [4] ‘{’, ‘cat’, ‘for’, ‘:’
[16:04:31.950] Searching for globals ... DONE
[16:04:31.950] Resolving globals: FALSE
[16:04:31.951] 
[16:04:31.951] 
[16:04:31.951] getGlobalsAndPackages() ... DONE
[16:04:31.952] run() for ‘Future’ ...
[16:04:31.952] - state: ‘created’
[16:04:31.952] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[16:04:31.956] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[16:04:31.956] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[16:04:31.956]   - Field: ‘label’
[16:04:31.956]   - Field: ‘local’
[16:04:31.956]   - Field: ‘owner’
[16:04:31.956]   - Field: ‘envir’
[16:04:31.957]   - Field: ‘workers’
[16:04:31.957]   - Field: ‘packages’
[16:04:31.957]   - Field: ‘gc’
[16:04:31.957]   - Field: ‘job’
[16:04:31.957]   - Field: ‘conditions’
[16:04:31.957]   - Field: ‘expr’
[16:04:31.957]   - Field: ‘uuid’
[16:04:31.957]   - Field: ‘seed’
[16:04:31.957]   - Field: ‘version’
[16:04:31.958]   - Field: ‘result’
[16:04:31.958]   - Field: ‘asynchronous’
[16:04:31.958]   - Field: ‘calls’
[16:04:31.958]   - Field: ‘globals’
[16:04:31.958]   - Field: ‘stdout’
[16:04:31.958]   - Field: ‘earlySignal’
[16:04:31.958]   - Field: ‘lazy’
[16:04:31.958]   - Field: ‘state’
[16:04:31.958] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[16:04:31.959] - Launch lazy future ...
[16:04:31.959] Packages needed by the future expression (n = 0): <none>
[16:04:31.959] Packages needed by future strategies (n = 0): <none>
[16:04:31.960] {
[16:04:31.960]     {
[16:04:31.960]         {
[16:04:31.960]             ...future.startTime <- base::Sys.time()
[16:04:31.960]             {
[16:04:31.960]                 {
[16:04:31.960]                   {
[16:04:31.960]                     {
[16:04:31.960]                       base::local({
[16:04:31.960]                         has_future <- base::requireNamespace("future", 
[16:04:31.960]                           quietly = TRUE)
[16:04:31.960]                         if (has_future) {
[16:04:31.960]                           ns <- base::getNamespace("future")
[16:04:31.960]                           version <- ns[[".package"]][["version"]]
[16:04:31.960]                           if (is.null(version)) 
[16:04:31.960]                             version <- utils::packageVersion("future")
[16:04:31.960]                         }
[16:04:31.960]                         else {
[16:04:31.960]                           version <- NULL
[16:04:31.960]                         }
[16:04:31.960]                         if (!has_future || version < "1.8.0") {
[16:04:31.960]                           info <- base::c(r_version = base::gsub("R version ", 
[16:04:31.960]                             "", base::R.version$version.string), 
[16:04:31.960]                             platform = base::sprintf("%s (%s-bit)", 
[16:04:31.960]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:04:31.960]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[16:04:31.960]                               "release", "version")], collapse = " "), 
[16:04:31.960]                             hostname = base::Sys.info()[["nodename"]])
[16:04:31.960]                           info <- base::sprintf("%s: %s", base::names(info), 
[16:04:31.960]                             info)
[16:04:31.960]                           info <- base::paste(info, collapse = "; ")
[16:04:31.960]                           if (!has_future) {
[16:04:31.960]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:04:31.960]                               info)
[16:04:31.960]                           }
[16:04:31.960]                           else {
[16:04:31.960]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:04:31.960]                               info, version)
[16:04:31.960]                           }
[16:04:31.960]                           base::stop(msg)
[16:04:31.960]                         }
[16:04:31.960]                       })
[16:04:31.960]                     }
[16:04:31.960]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[16:04:31.960]                     base::options(mc.cores = 1L)
[16:04:31.960]                   }
[16:04:31.960]                   options(future.plan = NULL)
[16:04:31.960]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:04:31.960]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:04:31.960]                 }
[16:04:31.960]                 ...future.workdir <- getwd()
[16:04:31.960]             }
[16:04:31.960]             ...future.oldOptions <- base::as.list(base::.Options)
[16:04:31.960]             ...future.oldEnvVars <- base::Sys.getenv()
[16:04:31.960]         }
[16:04:31.960]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:04:31.960]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:04:31.960]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:04:31.960]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:04:31.960]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:04:31.960]             future.stdout.windows.reencode = NULL, width = 80L)
[16:04:31.960]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:04:31.960]             base::names(...future.oldOptions))
[16:04:31.960]     }
[16:04:31.960]     if (FALSE) {
[16:04:31.960]     }
[16:04:31.960]     else {
[16:04:31.960]         if (TRUE) {
[16:04:31.960]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:04:31.960]                 open = "w")
[16:04:31.960]         }
[16:04:31.960]         else {
[16:04:31.960]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:04:31.960]                 windows = "NUL", "/dev/null"), open = "w")
[16:04:31.960]         }
[16:04:31.960]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:04:31.960]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:04:31.960]             base::sink(type = "output", split = FALSE)
[16:04:31.960]             base::close(...future.stdout)
[16:04:31.960]         }, add = TRUE)
[16:04:31.960]     }
[16:04:31.960]     ...future.frame <- base::sys.nframe()
[16:04:31.960]     ...future.conditions <- base::list()
[16:04:31.960]     ...future.rng <- base::globalenv()$.Random.seed
[16:04:31.960]     if (FALSE) {
[16:04:31.960]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:04:31.960]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:04:31.960]     }
[16:04:31.960]     ...future.result <- base::tryCatch({
[16:04:31.960]         base::withCallingHandlers({
[16:04:31.960]             ...future.value <- base::withVisible(base::local({
[16:04:31.960]                 withCallingHandlers({
[16:04:31.960]                   {
[16:04:31.960]                     cat("Processing: ")
[16:04:31.960]                     for (ii in 1:10) {
[16:04:31.960]                       cat(".")
[16:04:31.960]                     }
[16:04:31.960]                     cat(" [100%]\n")
[16:04:31.960]                     4
[16:04:31.960]                   }
[16:04:31.960]                 }, immediateCondition = function(cond) {
[16:04:31.960]                   save_rds <- function (object, pathname, ...) 
[16:04:31.960]                   {
[16:04:31.960]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[16:04:31.960]                     if (file_test("-f", pathname_tmp)) {
[16:04:31.960]                       fi_tmp <- file.info(pathname_tmp)
[16:04:31.960]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[16:04:31.960]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:04:31.960]                         fi_tmp[["mtime"]])
[16:04:31.960]                     }
[16:04:31.960]                     tryCatch({
[16:04:31.960]                       saveRDS(object, file = pathname_tmp, ...)
[16:04:31.960]                     }, error = function(ex) {
[16:04:31.960]                       msg <- conditionMessage(ex)
[16:04:31.960]                       fi_tmp <- file.info(pathname_tmp)
[16:04:31.960]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[16:04:31.960]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:04:31.960]                         fi_tmp[["mtime"]], msg)
[16:04:31.960]                       ex$message <- msg
[16:04:31.960]                       stop(ex)
[16:04:31.960]                     })
[16:04:31.960]                     stopifnot(file_test("-f", pathname_tmp))
[16:04:31.960]                     res <- file.rename(from = pathname_tmp, to = pathname)
[16:04:31.960]                     if (!res || file_test("-f", pathname_tmp)) {
[16:04:31.960]                       fi_tmp <- file.info(pathname_tmp)
[16:04:31.960]                       fi <- file.info(pathname)
[16:04:31.960]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[16:04:31.960]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:04:31.960]                         fi_tmp[["mtime"]], sQuote(pathname), 
[16:04:31.960]                         fi[["size"]], fi[["mtime"]])
[16:04:31.960]                       stop(msg)
[16:04:31.960]                     }
[16:04:31.960]                     invisible(pathname)
[16:04:31.960]                   }
[16:04:31.960]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[16:04:31.960]                     rootPath = tempdir()) 
[16:04:31.960]                   {
[16:04:31.960]                     obj <- list(time = Sys.time(), condition = cond)
[16:04:31.960]                     file <- tempfile(pattern = class(cond)[1], 
[16:04:31.960]                       tmpdir = path, fileext = ".rds")
[16:04:31.960]                     save_rds(obj, file)
[16:04:31.960]                   }
[16:04:31.960]                   saveImmediateCondition(cond, path = "/tmp/Rtmpe612Wd/.future/immediateConditions")
[16:04:31.960]                   muffleCondition <- function (cond, pattern = "^muffle") 
[16:04:31.960]                   {
[16:04:31.960]                     inherits <- base::inherits
[16:04:31.960]                     invokeRestart <- base::invokeRestart
[16:04:31.960]                     is.null <- base::is.null
[16:04:31.960]                     muffled <- FALSE
[16:04:31.960]                     if (inherits(cond, "message")) {
[16:04:31.960]                       muffled <- grepl(pattern, "muffleMessage")
[16:04:31.960]                       if (muffled) 
[16:04:31.960]                         invokeRestart("muffleMessage")
[16:04:31.960]                     }
[16:04:31.960]                     else if (inherits(cond, "warning")) {
[16:04:31.960]                       muffled <- grepl(pattern, "muffleWarning")
[16:04:31.960]                       if (muffled) 
[16:04:31.960]                         invokeRestart("muffleWarning")
[16:04:31.960]                     }
[16:04:31.960]                     else if (inherits(cond, "condition")) {
[16:04:31.960]                       if (!is.null(pattern)) {
[16:04:31.960]                         computeRestarts <- base::computeRestarts
[16:04:31.960]                         grepl <- base::grepl
[16:04:31.960]                         restarts <- computeRestarts(cond)
[16:04:31.960]                         for (restart in restarts) {
[16:04:31.960]                           name <- restart$name
[16:04:31.960]                           if (is.null(name)) 
[16:04:31.960]                             next
[16:04:31.960]                           if (!grepl(pattern, name)) 
[16:04:31.960]                             next
[16:04:31.960]                           invokeRestart(restart)
[16:04:31.960]                           muffled <- TRUE
[16:04:31.960]                           break
[16:04:31.960]                         }
[16:04:31.960]                       }
[16:04:31.960]                     }
[16:04:31.960]                     invisible(muffled)
[16:04:31.960]                   }
[16:04:31.960]                   muffleCondition(cond)
[16:04:31.960]                 })
[16:04:31.960]             }))
[16:04:31.960]             future::FutureResult(value = ...future.value$value, 
[16:04:31.960]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:04:31.960]                   ...future.rng), globalenv = if (FALSE) 
[16:04:31.960]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:04:31.960]                     ...future.globalenv.names))
[16:04:31.960]                 else NULL, started = ...future.startTime, version = "1.8")
[16:04:31.960]         }, condition = base::local({
[16:04:31.960]             c <- base::c
[16:04:31.960]             inherits <- base::inherits
[16:04:31.960]             invokeRestart <- base::invokeRestart
[16:04:31.960]             length <- base::length
[16:04:31.960]             list <- base::list
[16:04:31.960]             seq.int <- base::seq.int
[16:04:31.960]             signalCondition <- base::signalCondition
[16:04:31.960]             sys.calls <- base::sys.calls
[16:04:31.960]             `[[` <- base::`[[`
[16:04:31.960]             `+` <- base::`+`
[16:04:31.960]             `<<-` <- base::`<<-`
[16:04:31.960]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:04:31.960]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:04:31.960]                   3L)]
[16:04:31.960]             }
[16:04:31.960]             function(cond) {
[16:04:31.960]                 is_error <- inherits(cond, "error")
[16:04:31.960]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:04:31.960]                   NULL)
[16:04:31.960]                 if (is_error) {
[16:04:31.960]                   sessionInformation <- function() {
[16:04:31.960]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:04:31.960]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:04:31.960]                       search = base::search(), system = base::Sys.info())
[16:04:31.960]                   }
[16:04:31.960]                   ...future.conditions[[length(...future.conditions) + 
[16:04:31.960]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:04:31.960]                     cond$call), session = sessionInformation(), 
[16:04:31.960]                     timestamp = base::Sys.time(), signaled = 0L)
[16:04:31.960]                   signalCondition(cond)
[16:04:31.960]                 }
[16:04:31.960]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:04:31.960]                 "immediateCondition"))) {
[16:04:31.960]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:04:31.960]                   ...future.conditions[[length(...future.conditions) + 
[16:04:31.960]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:04:31.960]                   if (TRUE && !signal) {
[16:04:31.960]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:04:31.960]                     {
[16:04:31.960]                       inherits <- base::inherits
[16:04:31.960]                       invokeRestart <- base::invokeRestart
[16:04:31.960]                       is.null <- base::is.null
[16:04:31.960]                       muffled <- FALSE
[16:04:31.960]                       if (inherits(cond, "message")) {
[16:04:31.960]                         muffled <- grepl(pattern, "muffleMessage")
[16:04:31.960]                         if (muffled) 
[16:04:31.960]                           invokeRestart("muffleMessage")
[16:04:31.960]                       }
[16:04:31.960]                       else if (inherits(cond, "warning")) {
[16:04:31.960]                         muffled <- grepl(pattern, "muffleWarning")
[16:04:31.960]                         if (muffled) 
[16:04:31.960]                           invokeRestart("muffleWarning")
[16:04:31.960]                       }
[16:04:31.960]                       else if (inherits(cond, "condition")) {
[16:04:31.960]                         if (!is.null(pattern)) {
[16:04:31.960]                           computeRestarts <- base::computeRestarts
[16:04:31.960]                           grepl <- base::grepl
[16:04:31.960]                           restarts <- computeRestarts(cond)
[16:04:31.960]                           for (restart in restarts) {
[16:04:31.960]                             name <- restart$name
[16:04:31.960]                             if (is.null(name)) 
[16:04:31.960]                               next
[16:04:31.960]                             if (!grepl(pattern, name)) 
[16:04:31.960]                               next
[16:04:31.960]                             invokeRestart(restart)
[16:04:31.960]                             muffled <- TRUE
[16:04:31.960]                             break
[16:04:31.960]                           }
[16:04:31.960]                         }
[16:04:31.960]                       }
[16:04:31.960]                       invisible(muffled)
[16:04:31.960]                     }
[16:04:31.960]                     muffleCondition(cond, pattern = "^muffle")
[16:04:31.960]                   }
[16:04:31.960]                 }
[16:04:31.960]                 else {
[16:04:31.960]                   if (TRUE) {
[16:04:31.960]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:04:31.960]                     {
[16:04:31.960]                       inherits <- base::inherits
[16:04:31.960]                       invokeRestart <- base::invokeRestart
[16:04:31.960]                       is.null <- base::is.null
[16:04:31.960]                       muffled <- FALSE
[16:04:31.960]                       if (inherits(cond, "message")) {
[16:04:31.960]                         muffled <- grepl(pattern, "muffleMessage")
[16:04:31.960]                         if (muffled) 
[16:04:31.960]                           invokeRestart("muffleMessage")
[16:04:31.960]                       }
[16:04:31.960]                       else if (inherits(cond, "warning")) {
[16:04:31.960]                         muffled <- grepl(pattern, "muffleWarning")
[16:04:31.960]                         if (muffled) 
[16:04:31.960]                           invokeRestart("muffleWarning")
[16:04:31.960]                       }
[16:04:31.960]                       else if (inherits(cond, "condition")) {
[16:04:31.960]                         if (!is.null(pattern)) {
[16:04:31.960]                           computeRestarts <- base::computeRestarts
[16:04:31.960]                           grepl <- base::grepl
[16:04:31.960]                           restarts <- computeRestarts(cond)
[16:04:31.960]                           for (restart in restarts) {
[16:04:31.960]                             name <- restart$name
[16:04:31.960]                             if (is.null(name)) 
[16:04:31.960]                               next
[16:04:31.960]                             if (!grepl(pattern, name)) 
[16:04:31.960]                               next
[16:04:31.960]                             invokeRestart(restart)
[16:04:31.960]                             muffled <- TRUE
[16:04:31.960]                             break
[16:04:31.960]                           }
[16:04:31.960]                         }
[16:04:31.960]                       }
[16:04:31.960]                       invisible(muffled)
[16:04:31.960]                     }
[16:04:31.960]                     muffleCondition(cond, pattern = "^muffle")
[16:04:31.960]                   }
[16:04:31.960]                 }
[16:04:31.960]             }
[16:04:31.960]         }))
[16:04:31.960]     }, error = function(ex) {
[16:04:31.960]         base::structure(base::list(value = NULL, visible = NULL, 
[16:04:31.960]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:04:31.960]                 ...future.rng), started = ...future.startTime, 
[16:04:31.960]             finished = Sys.time(), session_uuid = NA_character_, 
[16:04:31.960]             version = "1.8"), class = "FutureResult")
[16:04:31.960]     }, finally = {
[16:04:31.960]         if (!identical(...future.workdir, getwd())) 
[16:04:31.960]             setwd(...future.workdir)
[16:04:31.960]         {
[16:04:31.960]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:04:31.960]                 ...future.oldOptions$nwarnings <- NULL
[16:04:31.960]             }
[16:04:31.960]             base::options(...future.oldOptions)
[16:04:31.960]             if (.Platform$OS.type == "windows") {
[16:04:31.960]                 old_names <- names(...future.oldEnvVars)
[16:04:31.960]                 envs <- base::Sys.getenv()
[16:04:31.960]                 names <- names(envs)
[16:04:31.960]                 common <- intersect(names, old_names)
[16:04:31.960]                 added <- setdiff(names, old_names)
[16:04:31.960]                 removed <- setdiff(old_names, names)
[16:04:31.960]                 changed <- common[...future.oldEnvVars[common] != 
[16:04:31.960]                   envs[common]]
[16:04:31.960]                 NAMES <- toupper(changed)
[16:04:31.960]                 args <- list()
[16:04:31.960]                 for (kk in seq_along(NAMES)) {
[16:04:31.960]                   name <- changed[[kk]]
[16:04:31.960]                   NAME <- NAMES[[kk]]
[16:04:31.960]                   if (name != NAME && is.element(NAME, old_names)) 
[16:04:31.960]                     next
[16:04:31.960]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:04:31.960]                 }
[16:04:31.960]                 NAMES <- toupper(added)
[16:04:31.960]                 for (kk in seq_along(NAMES)) {
[16:04:31.960]                   name <- added[[kk]]
[16:04:31.960]                   NAME <- NAMES[[kk]]
[16:04:31.960]                   if (name != NAME && is.element(NAME, old_names)) 
[16:04:31.960]                     next
[16:04:31.960]                   args[[name]] <- ""
[16:04:31.960]                 }
[16:04:31.960]                 NAMES <- toupper(removed)
[16:04:31.960]                 for (kk in seq_along(NAMES)) {
[16:04:31.960]                   name <- removed[[kk]]
[16:04:31.960]                   NAME <- NAMES[[kk]]
[16:04:31.960]                   if (name != NAME && is.element(NAME, old_names)) 
[16:04:31.960]                     next
[16:04:31.960]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:04:31.960]                 }
[16:04:31.960]                 if (length(args) > 0) 
[16:04:31.960]                   base::do.call(base::Sys.setenv, args = args)
[16:04:31.960]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:04:31.960]             }
[16:04:31.960]             else {
[16:04:31.960]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:04:31.960]             }
[16:04:31.960]             {
[16:04:31.960]                 if (base::length(...future.futureOptionsAdded) > 
[16:04:31.960]                   0L) {
[16:04:31.960]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:04:31.960]                   base::names(opts) <- ...future.futureOptionsAdded
[16:04:31.960]                   base::options(opts)
[16:04:31.960]                 }
[16:04:31.960]                 {
[16:04:31.960]                   {
[16:04:31.960]                     base::options(mc.cores = ...future.mc.cores.old)
[16:04:31.960]                     NULL
[16:04:31.960]                   }
[16:04:31.960]                   options(future.plan = NULL)
[16:04:31.960]                   if (is.na(NA_character_)) 
[16:04:31.960]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:04:31.960]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:04:31.960]                   future::plan(list(function (..., workers = availableCores(constraints = "multicore"), 
[16:04:31.960]                     envir = parent.frame()) 
[16:04:31.960]                   {
[16:04:31.960]                     default_workers <- missing(workers)
[16:04:31.960]                     if (is.function(workers)) 
[16:04:31.960]                       workers <- workers()
[16:04:31.960]                     workers <- structure(as.integer(workers), 
[16:04:31.960]                       class = class(workers))
[16:04:31.960]                     stop_if_not(is.finite(workers), workers >= 
[16:04:31.960]                       1L)
[16:04:31.960]                     if ((workers == 1L && !inherits(workers, 
[16:04:31.960]                       "AsIs")) || !supportsMulticore(warn = TRUE)) {
[16:04:31.960]                       if (default_workers) 
[16:04:31.960]                         supportsMulticore(warn = TRUE)
[16:04:31.960]                       return(sequential(..., envir = envir))
[16:04:31.960]                     }
[16:04:31.960]                     oopts <- options(mc.cores = workers)
[16:04:31.960]                     on.exit(options(oopts))
[16:04:31.960]                     future <- MulticoreFuture(..., workers = workers, 
[16:04:31.960]                       envir = envir)
[16:04:31.960]                     if (!future$lazy) 
[16:04:31.960]                       future <- run(future)
[16:04:31.960]                     invisible(future)
[16:04:31.960]                   }), .cleanup = FALSE, .init = FALSE)
[16:04:31.960]                 }
[16:04:31.960]             }
[16:04:31.960]         }
[16:04:31.960]     })
[16:04:31.960]     if (TRUE) {
[16:04:31.960]         base::sink(type = "output", split = FALSE)
[16:04:31.960]         if (TRUE) {
[16:04:31.960]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:04:31.960]         }
[16:04:31.960]         else {
[16:04:31.960]             ...future.result["stdout"] <- base::list(NULL)
[16:04:31.960]         }
[16:04:31.960]         base::close(...future.stdout)
[16:04:31.960]         ...future.stdout <- NULL
[16:04:31.960]     }
[16:04:31.960]     ...future.result$conditions <- ...future.conditions
[16:04:31.960]     ...future.result$finished <- base::Sys.time()
[16:04:31.960]     ...future.result
[16:04:31.960] }
[16:04:31.962] requestCore(): workers = 2
[16:04:31.964] MulticoreFuture started
[16:04:31.964] - Launch lazy future ... done
[16:04:31.964] run() for ‘MulticoreFuture’ ... done
** Collecting results
v1 = 1
v2 = 2
[16:04:31.965] plan(): Setting new future strategy stack:
Warning in sprintf(...) : restarting interrupted promise evaluation
[16:04:31.965] result() for MulticoreFuture ...
[16:04:31.965] result() for MulticoreFuture ... done
[16:04:31.966] result() for MulticoreFuture ...
[16:04:31.965] List of future strategies:
[16:04:31.965] 1. sequential:
[16:04:31.965]    - args: function (..., envir = parent.frame())
[16:04:31.965]    - tweaked: FALSE
[16:04:31.965]    - call: NULL
[16:04:31.966] result() for MulticoreFuture ... done
[16:04:31.966] plan(): nbrOfWorkers() = 1
[16:04:31.966] signalConditions() ...
[16:04:31.966]  - include = ‘immediateCondition’
[16:04:31.966]  - exclude = 
[16:04:31.966]  - resignal = FALSE
[16:04:31.966]  - Number of conditions: 1
[16:04:31.967] signalConditions() ... done
[16:04:31.967] Future state: ‘finished’
[16:04:31.967] result() for MulticoreFuture ...
[16:04:31.967] result() for MulticoreFuture ... done
[16:04:31.967] signalConditions() ...
[16:04:31.967]  - include = ‘condition’
[16:04:31.968]  - exclude = ‘immediateCondition’
[16:04:31.968] plan(): Setting new future strategy stack:
[16:04:31.968]  - resignal = TRUE
[16:04:31.968]  - Number of conditions: 1
[16:04:31.968]  - Condition #1: ‘simpleError’, ‘error’, ‘condition’
[16:04:31.968] List of future strategies:
[16:04:31.968] 1. multicore:
[16:04:31.968]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[16:04:31.968]    - tweaked: FALSE
[16:04:31.968]    - call: plan(strategy)
[16:04:31.968] signalConditions() ... done
v3: <simpleError> (as expect)
[16:04:31.968] result() for MulticoreFuture ...
[16:04:31.972] plan(): nbrOfWorkers() = 2
[16:04:31.973] result() for MulticoreFuture ...
[16:04:31.973] result() for MulticoreFuture ... done
[16:04:31.974] result() for MulticoreFuture ... done
[16:04:31.974] result() for MulticoreFuture ...
[16:04:31.974] result() for MulticoreFuture ... done
Processing: .......... [100%]
v4 = 4
** Left-to-right and right-to-left future assignments
[16:04:31.974] getGlobalsAndPackages() ...
[16:04:31.975] Searching for globals...
[16:04:31.975] 
[16:04:31.975] Searching for globals ... DONE
[16:04:31.975] - globals: [0] <none>
[16:04:31.975] getGlobalsAndPackages() ... DONE
[16:04:31.976] run() for ‘Future’ ...
[16:04:31.976] - state: ‘created’
[16:04:31.976] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[16:04:31.980] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[16:04:31.980] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[16:04:31.980]   - Field: ‘label’
[16:04:31.981]   - Field: ‘local’
[16:04:31.981]   - Field: ‘owner’
[16:04:31.981]   - Field: ‘envir’
[16:04:31.981]   - Field: ‘workers’
[16:04:31.981]   - Field: ‘packages’
[16:04:31.981]   - Field: ‘gc’
[16:04:31.981]   - Field: ‘job’
[16:04:31.981]   - Field: ‘conditions’
[16:04:31.981]   - Field: ‘expr’
[16:04:31.982]   - Field: ‘uuid’
[16:04:31.982]   - Field: ‘seed’
[16:04:31.982]   - Field: ‘version’
[16:04:31.982]   - Field: ‘result’
[16:04:31.982]   - Field: ‘asynchronous’
[16:04:31.982]   - Field: ‘calls’
[16:04:31.982]   - Field: ‘globals’
[16:04:31.982]   - Field: ‘stdout’
[16:04:31.982]   - Field: ‘earlySignal’
[16:04:31.983]   - Field: ‘lazy’
[16:04:31.983]   - Field: ‘state’
[16:04:31.983] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[16:04:31.983] - Launch lazy future ...
[16:04:31.983] Packages needed by the future expression (n = 0): <none>
[16:04:31.983] Packages needed by future strategies (n = 0): <none>
[16:04:31.984] {
[16:04:31.984]     {
[16:04:31.984]         {
[16:04:31.984]             ...future.startTime <- base::Sys.time()
[16:04:31.984]             {
[16:04:31.984]                 {
[16:04:31.984]                   {
[16:04:31.984]                     {
[16:04:31.984]                       base::local({
[16:04:31.984]                         has_future <- base::requireNamespace("future", 
[16:04:31.984]                           quietly = TRUE)
[16:04:31.984]                         if (has_future) {
[16:04:31.984]                           ns <- base::getNamespace("future")
[16:04:31.984]                           version <- ns[[".package"]][["version"]]
[16:04:31.984]                           if (is.null(version)) 
[16:04:31.984]                             version <- utils::packageVersion("future")
[16:04:31.984]                         }
[16:04:31.984]                         else {
[16:04:31.984]                           version <- NULL
[16:04:31.984]                         }
[16:04:31.984]                         if (!has_future || version < "1.8.0") {
[16:04:31.984]                           info <- base::c(r_version = base::gsub("R version ", 
[16:04:31.984]                             "", base::R.version$version.string), 
[16:04:31.984]                             platform = base::sprintf("%s (%s-bit)", 
[16:04:31.984]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:04:31.984]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[16:04:31.984]                               "release", "version")], collapse = " "), 
[16:04:31.984]                             hostname = base::Sys.info()[["nodename"]])
[16:04:31.984]                           info <- base::sprintf("%s: %s", base::names(info), 
[16:04:31.984]                             info)
[16:04:31.984]                           info <- base::paste(info, collapse = "; ")
[16:04:31.984]                           if (!has_future) {
[16:04:31.984]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:04:31.984]                               info)
[16:04:31.984]                           }
[16:04:31.984]                           else {
[16:04:31.984]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:04:31.984]                               info, version)
[16:04:31.984]                           }
[16:04:31.984]                           base::stop(msg)
[16:04:31.984]                         }
[16:04:31.984]                       })
[16:04:31.984]                     }
[16:04:31.984]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[16:04:31.984]                     base::options(mc.cores = 1L)
[16:04:31.984]                   }
[16:04:31.984]                   options(future.plan = NULL)
[16:04:31.984]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:04:31.984]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:04:31.984]                 }
[16:04:31.984]                 ...future.workdir <- getwd()
[16:04:31.984]             }
[16:04:31.984]             ...future.oldOptions <- base::as.list(base::.Options)
[16:04:31.984]             ...future.oldEnvVars <- base::Sys.getenv()
[16:04:31.984]         }
[16:04:31.984]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:04:31.984]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:04:31.984]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:04:31.984]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:04:31.984]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:04:31.984]             future.stdout.windows.reencode = NULL, width = 80L)
[16:04:31.984]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:04:31.984]             base::names(...future.oldOptions))
[16:04:31.984]     }
[16:04:31.984]     if (FALSE) {
[16:04:31.984]     }
[16:04:31.984]     else {
[16:04:31.984]         if (TRUE) {
[16:04:31.984]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:04:31.984]                 open = "w")
[16:04:31.984]         }
[16:04:31.984]         else {
[16:04:31.984]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:04:31.984]                 windows = "NUL", "/dev/null"), open = "w")
[16:04:31.984]         }
[16:04:31.984]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:04:31.984]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:04:31.984]             base::sink(type = "output", split = FALSE)
[16:04:31.984]             base::close(...future.stdout)
[16:04:31.984]         }, add = TRUE)
[16:04:31.984]     }
[16:04:31.984]     ...future.frame <- base::sys.nframe()
[16:04:31.984]     ...future.conditions <- base::list()
[16:04:31.984]     ...future.rng <- base::globalenv()$.Random.seed
[16:04:31.984]     if (FALSE) {
[16:04:31.984]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:04:31.984]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:04:31.984]     }
[16:04:31.984]     ...future.result <- base::tryCatch({
[16:04:31.984]         base::withCallingHandlers({
[16:04:31.984]             ...future.value <- base::withVisible(base::local({
[16:04:31.984]                 withCallingHandlers({
[16:04:31.984]                   1
[16:04:31.984]                 }, immediateCondition = function(cond) {
[16:04:31.984]                   save_rds <- function (object, pathname, ...) 
[16:04:31.984]                   {
[16:04:31.984]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[16:04:31.984]                     if (file_test("-f", pathname_tmp)) {
[16:04:31.984]                       fi_tmp <- file.info(pathname_tmp)
[16:04:31.984]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[16:04:31.984]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:04:31.984]                         fi_tmp[["mtime"]])
[16:04:31.984]                     }
[16:04:31.984]                     tryCatch({
[16:04:31.984]                       saveRDS(object, file = pathname_tmp, ...)
[16:04:31.984]                     }, error = function(ex) {
[16:04:31.984]                       msg <- conditionMessage(ex)
[16:04:31.984]                       fi_tmp <- file.info(pathname_tmp)
[16:04:31.984]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[16:04:31.984]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:04:31.984]                         fi_tmp[["mtime"]], msg)
[16:04:31.984]                       ex$message <- msg
[16:04:31.984]                       stop(ex)
[16:04:31.984]                     })
[16:04:31.984]                     stopifnot(file_test("-f", pathname_tmp))
[16:04:31.984]                     res <- file.rename(from = pathname_tmp, to = pathname)
[16:04:31.984]                     if (!res || file_test("-f", pathname_tmp)) {
[16:04:31.984]                       fi_tmp <- file.info(pathname_tmp)
[16:04:31.984]                       fi <- file.info(pathname)
[16:04:31.984]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[16:04:31.984]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:04:31.984]                         fi_tmp[["mtime"]], sQuote(pathname), 
[16:04:31.984]                         fi[["size"]], fi[["mtime"]])
[16:04:31.984]                       stop(msg)
[16:04:31.984]                     }
[16:04:31.984]                     invisible(pathname)
[16:04:31.984]                   }
[16:04:31.984]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[16:04:31.984]                     rootPath = tempdir()) 
[16:04:31.984]                   {
[16:04:31.984]                     obj <- list(time = Sys.time(), condition = cond)
[16:04:31.984]                     file <- tempfile(pattern = class(cond)[1], 
[16:04:31.984]                       tmpdir = path, fileext = ".rds")
[16:04:31.984]                     save_rds(obj, file)
[16:04:31.984]                   }
[16:04:31.984]                   saveImmediateCondition(cond, path = "/tmp/Rtmpe612Wd/.future/immediateConditions")
[16:04:31.984]                   muffleCondition <- function (cond, pattern = "^muffle") 
[16:04:31.984]                   {
[16:04:31.984]                     inherits <- base::inherits
[16:04:31.984]                     invokeRestart <- base::invokeRestart
[16:04:31.984]                     is.null <- base::is.null
[16:04:31.984]                     muffled <- FALSE
[16:04:31.984]                     if (inherits(cond, "message")) {
[16:04:31.984]                       muffled <- grepl(pattern, "muffleMessage")
[16:04:31.984]                       if (muffled) 
[16:04:31.984]                         invokeRestart("muffleMessage")
[16:04:31.984]                     }
[16:04:31.984]                     else if (inherits(cond, "warning")) {
[16:04:31.984]                       muffled <- grepl(pattern, "muffleWarning")
[16:04:31.984]                       if (muffled) 
[16:04:31.984]                         invokeRestart("muffleWarning")
[16:04:31.984]                     }
[16:04:31.984]                     else if (inherits(cond, "condition")) {
[16:04:31.984]                       if (!is.null(pattern)) {
[16:04:31.984]                         computeRestarts <- base::computeRestarts
[16:04:31.984]                         grepl <- base::grepl
[16:04:31.984]                         restarts <- computeRestarts(cond)
[16:04:31.984]                         for (restart in restarts) {
[16:04:31.984]                           name <- restart$name
[16:04:31.984]                           if (is.null(name)) 
[16:04:31.984]                             next
[16:04:31.984]                           if (!grepl(pattern, name)) 
[16:04:31.984]                             next
[16:04:31.984]                           invokeRestart(restart)
[16:04:31.984]                           muffled <- TRUE
[16:04:31.984]                           break
[16:04:31.984]                         }
[16:04:31.984]                       }
[16:04:31.984]                     }
[16:04:31.984]                     invisible(muffled)
[16:04:31.984]                   }
[16:04:31.984]                   muffleCondition(cond)
[16:04:31.984]                 })
[16:04:31.984]             }))
[16:04:31.984]             future::FutureResult(value = ...future.value$value, 
[16:04:31.984]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:04:31.984]                   ...future.rng), globalenv = if (FALSE) 
[16:04:31.984]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:04:31.984]                     ...future.globalenv.names))
[16:04:31.984]                 else NULL, started = ...future.startTime, version = "1.8")
[16:04:31.984]         }, condition = base::local({
[16:04:31.984]             c <- base::c
[16:04:31.984]             inherits <- base::inherits
[16:04:31.984]             invokeRestart <- base::invokeRestart
[16:04:31.984]             length <- base::length
[16:04:31.984]             list <- base::list
[16:04:31.984]             seq.int <- base::seq.int
[16:04:31.984]             signalCondition <- base::signalCondition
[16:04:31.984]             sys.calls <- base::sys.calls
[16:04:31.984]             `[[` <- base::`[[`
[16:04:31.984]             `+` <- base::`+`
[16:04:31.984]             `<<-` <- base::`<<-`
[16:04:31.984]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:04:31.984]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:04:31.984]                   3L)]
[16:04:31.984]             }
[16:04:31.984]             function(cond) {
[16:04:31.984]                 is_error <- inherits(cond, "error")
[16:04:31.984]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:04:31.984]                   NULL)
[16:04:31.984]                 if (is_error) {
[16:04:31.984]                   sessionInformation <- function() {
[16:04:31.984]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:04:31.984]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:04:31.984]                       search = base::search(), system = base::Sys.info())
[16:04:31.984]                   }
[16:04:31.984]                   ...future.conditions[[length(...future.conditions) + 
[16:04:31.984]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:04:31.984]                     cond$call), session = sessionInformation(), 
[16:04:31.984]                     timestamp = base::Sys.time(), signaled = 0L)
[16:04:31.984]                   signalCondition(cond)
[16:04:31.984]                 }
[16:04:31.984]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:04:31.984]                 "immediateCondition"))) {
[16:04:31.984]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:04:31.984]                   ...future.conditions[[length(...future.conditions) + 
[16:04:31.984]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:04:31.984]                   if (TRUE && !signal) {
[16:04:31.984]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:04:31.984]                     {
[16:04:31.984]                       inherits <- base::inherits
[16:04:31.984]                       invokeRestart <- base::invokeRestart
[16:04:31.984]                       is.null <- base::is.null
[16:04:31.984]                       muffled <- FALSE
[16:04:31.984]                       if (inherits(cond, "message")) {
[16:04:31.984]                         muffled <- grepl(pattern, "muffleMessage")
[16:04:31.984]                         if (muffled) 
[16:04:31.984]                           invokeRestart("muffleMessage")
[16:04:31.984]                       }
[16:04:31.984]                       else if (inherits(cond, "warning")) {
[16:04:31.984]                         muffled <- grepl(pattern, "muffleWarning")
[16:04:31.984]                         if (muffled) 
[16:04:31.984]                           invokeRestart("muffleWarning")
[16:04:31.984]                       }
[16:04:31.984]                       else if (inherits(cond, "condition")) {
[16:04:31.984]                         if (!is.null(pattern)) {
[16:04:31.984]                           computeRestarts <- base::computeRestarts
[16:04:31.984]                           grepl <- base::grepl
[16:04:31.984]                           restarts <- computeRestarts(cond)
[16:04:31.984]                           for (restart in restarts) {
[16:04:31.984]                             name <- restart$name
[16:04:31.984]                             if (is.null(name)) 
[16:04:31.984]                               next
[16:04:31.984]                             if (!grepl(pattern, name)) 
[16:04:31.984]                               next
[16:04:31.984]                             invokeRestart(restart)
[16:04:31.984]                             muffled <- TRUE
[16:04:31.984]                             break
[16:04:31.984]                           }
[16:04:31.984]                         }
[16:04:31.984]                       }
[16:04:31.984]                       invisible(muffled)
[16:04:31.984]                     }
[16:04:31.984]                     muffleCondition(cond, pattern = "^muffle")
[16:04:31.984]                   }
[16:04:31.984]                 }
[16:04:31.984]                 else {
[16:04:31.984]                   if (TRUE) {
[16:04:31.984]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:04:31.984]                     {
[16:04:31.984]                       inherits <- base::inherits
[16:04:31.984]                       invokeRestart <- base::invokeRestart
[16:04:31.984]                       is.null <- base::is.null
[16:04:31.984]                       muffled <- FALSE
[16:04:31.984]                       if (inherits(cond, "message")) {
[16:04:31.984]                         muffled <- grepl(pattern, "muffleMessage")
[16:04:31.984]                         if (muffled) 
[16:04:31.984]                           invokeRestart("muffleMessage")
[16:04:31.984]                       }
[16:04:31.984]                       else if (inherits(cond, "warning")) {
[16:04:31.984]                         muffled <- grepl(pattern, "muffleWarning")
[16:04:31.984]                         if (muffled) 
[16:04:31.984]                           invokeRestart("muffleWarning")
[16:04:31.984]                       }
[16:04:31.984]                       else if (inherits(cond, "condition")) {
[16:04:31.984]                         if (!is.null(pattern)) {
[16:04:31.984]                           computeRestarts <- base::computeRestarts
[16:04:31.984]                           grepl <- base::grepl
[16:04:31.984]                           restarts <- computeRestarts(cond)
[16:04:31.984]                           for (restart in restarts) {
[16:04:31.984]                             name <- restart$name
[16:04:31.984]                             if (is.null(name)) 
[16:04:31.984]                               next
[16:04:31.984]                             if (!grepl(pattern, name)) 
[16:04:31.984]                               next
[16:04:31.984]                             invokeRestart(restart)
[16:04:31.984]                             muffled <- TRUE
[16:04:31.984]                             break
[16:04:31.984]                           }
[16:04:31.984]                         }
[16:04:31.984]                       }
[16:04:31.984]                       invisible(muffled)
[16:04:31.984]                     }
[16:04:31.984]                     muffleCondition(cond, pattern = "^muffle")
[16:04:31.984]                   }
[16:04:31.984]                 }
[16:04:31.984]             }
[16:04:31.984]         }))
[16:04:31.984]     }, error = function(ex) {
[16:04:31.984]         base::structure(base::list(value = NULL, visible = NULL, 
[16:04:31.984]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:04:31.984]                 ...future.rng), started = ...future.startTime, 
[16:04:31.984]             finished = Sys.time(), session_uuid = NA_character_, 
[16:04:31.984]             version = "1.8"), class = "FutureResult")
[16:04:31.984]     }, finally = {
[16:04:31.984]         if (!identical(...future.workdir, getwd())) 
[16:04:31.984]             setwd(...future.workdir)
[16:04:31.984]         {
[16:04:31.984]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:04:31.984]                 ...future.oldOptions$nwarnings <- NULL
[16:04:31.984]             }
[16:04:31.984]             base::options(...future.oldOptions)
[16:04:31.984]             if (.Platform$OS.type == "windows") {
[16:04:31.984]                 old_names <- names(...future.oldEnvVars)
[16:04:31.984]                 envs <- base::Sys.getenv()
[16:04:31.984]                 names <- names(envs)
[16:04:31.984]                 common <- intersect(names, old_names)
[16:04:31.984]                 added <- setdiff(names, old_names)
[16:04:31.984]                 removed <- setdiff(old_names, names)
[16:04:31.984]                 changed <- common[...future.oldEnvVars[common] != 
[16:04:31.984]                   envs[common]]
[16:04:31.984]                 NAMES <- toupper(changed)
[16:04:31.984]                 args <- list()
[16:04:31.984]                 for (kk in seq_along(NAMES)) {
[16:04:31.984]                   name <- changed[[kk]]
[16:04:31.984]                   NAME <- NAMES[[kk]]
[16:04:31.984]                   if (name != NAME && is.element(NAME, old_names)) 
[16:04:31.984]                     next
[16:04:31.984]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:04:31.984]                 }
[16:04:31.984]                 NAMES <- toupper(added)
[16:04:31.984]                 for (kk in seq_along(NAMES)) {
[16:04:31.984]                   name <- added[[kk]]
[16:04:31.984]                   NAME <- NAMES[[kk]]
[16:04:31.984]                   if (name != NAME && is.element(NAME, old_names)) 
[16:04:31.984]                     next
[16:04:31.984]                   args[[name]] <- ""
[16:04:31.984]                 }
[16:04:31.984]                 NAMES <- toupper(removed)
[16:04:31.984]                 for (kk in seq_along(NAMES)) {
[16:04:31.984]                   name <- removed[[kk]]
[16:04:31.984]                   NAME <- NAMES[[kk]]
[16:04:31.984]                   if (name != NAME && is.element(NAME, old_names)) 
[16:04:31.984]                     next
[16:04:31.984]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:04:31.984]                 }
[16:04:31.984]                 if (length(args) > 0) 
[16:04:31.984]                   base::do.call(base::Sys.setenv, args = args)
[16:04:31.984]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:04:31.984]             }
[16:04:31.984]             else {
[16:04:31.984]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:04:31.984]             }
[16:04:31.984]             {
[16:04:31.984]                 if (base::length(...future.futureOptionsAdded) > 
[16:04:31.984]                   0L) {
[16:04:31.984]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:04:31.984]                   base::names(opts) <- ...future.futureOptionsAdded
[16:04:31.984]                   base::options(opts)
[16:04:31.984]                 }
[16:04:31.984]                 {
[16:04:31.984]                   {
[16:04:31.984]                     base::options(mc.cores = ...future.mc.cores.old)
[16:04:31.984]                     NULL
[16:04:31.984]                   }
[16:04:31.984]                   options(future.plan = NULL)
[16:04:31.984]                   if (is.na(NA_character_)) 
[16:04:31.984]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:04:31.984]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:04:31.984]                   future::plan(list(function (..., workers = availableCores(constraints = "multicore"), 
[16:04:31.984]                     envir = parent.frame()) 
[16:04:31.984]                   {
[16:04:31.984]                     default_workers <- missing(workers)
[16:04:31.984]                     if (is.function(workers)) 
[16:04:31.984]                       workers <- workers()
[16:04:31.984]                     workers <- structure(as.integer(workers), 
[16:04:31.984]                       class = class(workers))
[16:04:31.984]                     stop_if_not(is.finite(workers), workers >= 
[16:04:31.984]                       1L)
[16:04:31.984]                     if ((workers == 1L && !inherits(workers, 
[16:04:31.984]                       "AsIs")) || !supportsMulticore(warn = TRUE)) {
[16:04:31.984]                       if (default_workers) 
[16:04:31.984]                         supportsMulticore(warn = TRUE)
[16:04:31.984]                       return(sequential(..., envir = envir))
[16:04:31.984]                     }
[16:04:31.984]                     oopts <- options(mc.cores = workers)
[16:04:31.984]                     on.exit(options(oopts))
[16:04:31.984]                     future <- MulticoreFuture(..., workers = workers, 
[16:04:31.984]                       envir = envir)
[16:04:31.984]                     if (!future$lazy) 
[16:04:31.984]                       future <- run(future)
[16:04:31.984]                     invisible(future)
[16:04:31.984]                   }), .cleanup = FALSE, .init = FALSE)
[16:04:31.984]                 }
[16:04:31.984]             }
[16:04:31.984]         }
[16:04:31.984]     })
[16:04:31.984]     if (TRUE) {
[16:04:31.984]         base::sink(type = "output", split = FALSE)
[16:04:31.984]         if (TRUE) {
[16:04:31.984]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:04:31.984]         }
[16:04:31.984]         else {
[16:04:31.984]             ...future.result["stdout"] <- base::list(NULL)
[16:04:31.984]         }
[16:04:31.984]         base::close(...future.stdout)
[16:04:31.984]         ...future.stdout <- NULL
[16:04:31.984]     }
[16:04:31.984]     ...future.result$conditions <- ...future.conditions
[16:04:31.984]     ...future.result$finished <- base::Sys.time()
[16:04:31.984]     ...future.result
[16:04:31.984] }
[16:04:31.987] requestCore(): workers = 2
[16:04:31.990] MulticoreFuture started
[16:04:31.991] - Launch lazy future ... done
[16:04:31.991] run() for ‘MulticoreFuture’ ... done
[16:04:31.992] result() for MulticoreFuture ...
[16:04:31.992] plan(): Setting new future strategy stack:
[16:04:31.993] List of future strategies:
[16:04:31.993] 1. sequential:
[16:04:31.993]    - args: function (..., envir = parent.frame())
[16:04:31.993]    - tweaked: FALSE
[16:04:31.993]    - call: NULL
[16:04:31.993] plan(): nbrOfWorkers() = 1
[16:04:31.996] plan(): Setting new future strategy stack:
[16:04:31.996] List of future strategies:
[16:04:31.996] 1. multicore:
[16:04:31.996]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[16:04:31.996]    - tweaked: FALSE
[16:04:31.996]    - call: plan(strategy)
[16:04:32.001] plan(): nbrOfWorkers() = 2
[16:04:32.002] result() for MulticoreFuture ...
[16:04:32.002] result() for MulticoreFuture ... done
[16:04:32.002] result() for MulticoreFuture ... done
[16:04:32.003] result() for MulticoreFuture ...
[16:04:32.003] result() for MulticoreFuture ... done
c = 1
[16:04:32.003] getGlobalsAndPackages() ...
[16:04:32.004] Searching for globals...
[16:04:32.004] 
[16:04:32.004] Searching for globals ... DONE
[16:04:32.004] - globals: [0] <none>
[16:04:32.005] getGlobalsAndPackages() ... DONE
[16:04:32.005] run() for ‘Future’ ...
[16:04:32.005] - state: ‘created’
[16:04:32.005] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[16:04:32.009] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[16:04:32.010] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[16:04:32.010]   - Field: ‘label’
[16:04:32.010]   - Field: ‘local’
[16:04:32.010]   - Field: ‘owner’
[16:04:32.010]   - Field: ‘envir’
[16:04:32.010]   - Field: ‘workers’
[16:04:32.010]   - Field: ‘packages’
[16:04:32.010]   - Field: ‘gc’
[16:04:32.011]   - Field: ‘job’
[16:04:32.011]   - Field: ‘conditions’
[16:04:32.011]   - Field: ‘expr’
[16:04:32.011]   - Field: ‘uuid’
[16:04:32.011]   - Field: ‘seed’
[16:04:32.011]   - Field: ‘version’
[16:04:32.011]   - Field: ‘result’
[16:04:32.011]   - Field: ‘asynchronous’
[16:04:32.012]   - Field: ‘calls’
[16:04:32.012]   - Field: ‘globals’
[16:04:32.012]   - Field: ‘stdout’
[16:04:32.012]   - Field: ‘earlySignal’
[16:04:32.012]   - Field: ‘lazy’
[16:04:32.012]   - Field: ‘state’
[16:04:32.012] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[16:04:32.012] - Launch lazy future ...
[16:04:32.013] Packages needed by the future expression (n = 0): <none>
[16:04:32.013] Packages needed by future strategies (n = 0): <none>
[16:04:32.013] {
[16:04:32.013]     {
[16:04:32.013]         {
[16:04:32.013]             ...future.startTime <- base::Sys.time()
[16:04:32.013]             {
[16:04:32.013]                 {
[16:04:32.013]                   {
[16:04:32.013]                     {
[16:04:32.013]                       base::local({
[16:04:32.013]                         has_future <- base::requireNamespace("future", 
[16:04:32.013]                           quietly = TRUE)
[16:04:32.013]                         if (has_future) {
[16:04:32.013]                           ns <- base::getNamespace("future")
[16:04:32.013]                           version <- ns[[".package"]][["version"]]
[16:04:32.013]                           if (is.null(version)) 
[16:04:32.013]                             version <- utils::packageVersion("future")
[16:04:32.013]                         }
[16:04:32.013]                         else {
[16:04:32.013]                           version <- NULL
[16:04:32.013]                         }
[16:04:32.013]                         if (!has_future || version < "1.8.0") {
[16:04:32.013]                           info <- base::c(r_version = base::gsub("R version ", 
[16:04:32.013]                             "", base::R.version$version.string), 
[16:04:32.013]                             platform = base::sprintf("%s (%s-bit)", 
[16:04:32.013]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:04:32.013]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[16:04:32.013]                               "release", "version")], collapse = " "), 
[16:04:32.013]                             hostname = base::Sys.info()[["nodename"]])
[16:04:32.013]                           info <- base::sprintf("%s: %s", base::names(info), 
[16:04:32.013]                             info)
[16:04:32.013]                           info <- base::paste(info, collapse = "; ")
[16:04:32.013]                           if (!has_future) {
[16:04:32.013]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:04:32.013]                               info)
[16:04:32.013]                           }
[16:04:32.013]                           else {
[16:04:32.013]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:04:32.013]                               info, version)
[16:04:32.013]                           }
[16:04:32.013]                           base::stop(msg)
[16:04:32.013]                         }
[16:04:32.013]                       })
[16:04:32.013]                     }
[16:04:32.013]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[16:04:32.013]                     base::options(mc.cores = 1L)
[16:04:32.013]                   }
[16:04:32.013]                   options(future.plan = NULL)
[16:04:32.013]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:04:32.013]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:04:32.013]                 }
[16:04:32.013]                 ...future.workdir <- getwd()
[16:04:32.013]             }
[16:04:32.013]             ...future.oldOptions <- base::as.list(base::.Options)
[16:04:32.013]             ...future.oldEnvVars <- base::Sys.getenv()
[16:04:32.013]         }
[16:04:32.013]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:04:32.013]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:04:32.013]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:04:32.013]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:04:32.013]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:04:32.013]             future.stdout.windows.reencode = NULL, width = 80L)
[16:04:32.013]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:04:32.013]             base::names(...future.oldOptions))
[16:04:32.013]     }
[16:04:32.013]     if (FALSE) {
[16:04:32.013]     }
[16:04:32.013]     else {
[16:04:32.013]         if (TRUE) {
[16:04:32.013]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:04:32.013]                 open = "w")
[16:04:32.013]         }
[16:04:32.013]         else {
[16:04:32.013]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:04:32.013]                 windows = "NUL", "/dev/null"), open = "w")
[16:04:32.013]         }
[16:04:32.013]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:04:32.013]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:04:32.013]             base::sink(type = "output", split = FALSE)
[16:04:32.013]             base::close(...future.stdout)
[16:04:32.013]         }, add = TRUE)
[16:04:32.013]     }
[16:04:32.013]     ...future.frame <- base::sys.nframe()
[16:04:32.013]     ...future.conditions <- base::list()
[16:04:32.013]     ...future.rng <- base::globalenv()$.Random.seed
[16:04:32.013]     if (FALSE) {
[16:04:32.013]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:04:32.013]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:04:32.013]     }
[16:04:32.013]     ...future.result <- base::tryCatch({
[16:04:32.013]         base::withCallingHandlers({
[16:04:32.013]             ...future.value <- base::withVisible(base::local({
[16:04:32.013]                 withCallingHandlers({
[16:04:32.013]                   1
[16:04:32.013]                 }, immediateCondition = function(cond) {
[16:04:32.013]                   save_rds <- function (object, pathname, ...) 
[16:04:32.013]                   {
[16:04:32.013]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[16:04:32.013]                     if (file_test("-f", pathname_tmp)) {
[16:04:32.013]                       fi_tmp <- file.info(pathname_tmp)
[16:04:32.013]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[16:04:32.013]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:04:32.013]                         fi_tmp[["mtime"]])
[16:04:32.013]                     }
[16:04:32.013]                     tryCatch({
[16:04:32.013]                       saveRDS(object, file = pathname_tmp, ...)
[16:04:32.013]                     }, error = function(ex) {
[16:04:32.013]                       msg <- conditionMessage(ex)
[16:04:32.013]                       fi_tmp <- file.info(pathname_tmp)
[16:04:32.013]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[16:04:32.013]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:04:32.013]                         fi_tmp[["mtime"]], msg)
[16:04:32.013]                       ex$message <- msg
[16:04:32.013]                       stop(ex)
[16:04:32.013]                     })
[16:04:32.013]                     stopifnot(file_test("-f", pathname_tmp))
[16:04:32.013]                     res <- file.rename(from = pathname_tmp, to = pathname)
[16:04:32.013]                     if (!res || file_test("-f", pathname_tmp)) {
[16:04:32.013]                       fi_tmp <- file.info(pathname_tmp)
[16:04:32.013]                       fi <- file.info(pathname)
[16:04:32.013]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[16:04:32.013]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:04:32.013]                         fi_tmp[["mtime"]], sQuote(pathname), 
[16:04:32.013]                         fi[["size"]], fi[["mtime"]])
[16:04:32.013]                       stop(msg)
[16:04:32.013]                     }
[16:04:32.013]                     invisible(pathname)
[16:04:32.013]                   }
[16:04:32.013]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[16:04:32.013]                     rootPath = tempdir()) 
[16:04:32.013]                   {
[16:04:32.013]                     obj <- list(time = Sys.time(), condition = cond)
[16:04:32.013]                     file <- tempfile(pattern = class(cond)[1], 
[16:04:32.013]                       tmpdir = path, fileext = ".rds")
[16:04:32.013]                     save_rds(obj, file)
[16:04:32.013]                   }
[16:04:32.013]                   saveImmediateCondition(cond, path = "/tmp/Rtmpe612Wd/.future/immediateConditions")
[16:04:32.013]                   muffleCondition <- function (cond, pattern = "^muffle") 
[16:04:32.013]                   {
[16:04:32.013]                     inherits <- base::inherits
[16:04:32.013]                     invokeRestart <- base::invokeRestart
[16:04:32.013]                     is.null <- base::is.null
[16:04:32.013]                     muffled <- FALSE
[16:04:32.013]                     if (inherits(cond, "message")) {
[16:04:32.013]                       muffled <- grepl(pattern, "muffleMessage")
[16:04:32.013]                       if (muffled) 
[16:04:32.013]                         invokeRestart("muffleMessage")
[16:04:32.013]                     }
[16:04:32.013]                     else if (inherits(cond, "warning")) {
[16:04:32.013]                       muffled <- grepl(pattern, "muffleWarning")
[16:04:32.013]                       if (muffled) 
[16:04:32.013]                         invokeRestart("muffleWarning")
[16:04:32.013]                     }
[16:04:32.013]                     else if (inherits(cond, "condition")) {
[16:04:32.013]                       if (!is.null(pattern)) {
[16:04:32.013]                         computeRestarts <- base::computeRestarts
[16:04:32.013]                         grepl <- base::grepl
[16:04:32.013]                         restarts <- computeRestarts(cond)
[16:04:32.013]                         for (restart in restarts) {
[16:04:32.013]                           name <- restart$name
[16:04:32.013]                           if (is.null(name)) 
[16:04:32.013]                             next
[16:04:32.013]                           if (!grepl(pattern, name)) 
[16:04:32.013]                             next
[16:04:32.013]                           invokeRestart(restart)
[16:04:32.013]                           muffled <- TRUE
[16:04:32.013]                           break
[16:04:32.013]                         }
[16:04:32.013]                       }
[16:04:32.013]                     }
[16:04:32.013]                     invisible(muffled)
[16:04:32.013]                   }
[16:04:32.013]                   muffleCondition(cond)
[16:04:32.013]                 })
[16:04:32.013]             }))
[16:04:32.013]             future::FutureResult(value = ...future.value$value, 
[16:04:32.013]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:04:32.013]                   ...future.rng), globalenv = if (FALSE) 
[16:04:32.013]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:04:32.013]                     ...future.globalenv.names))
[16:04:32.013]                 else NULL, started = ...future.startTime, version = "1.8")
[16:04:32.013]         }, condition = base::local({
[16:04:32.013]             c <- base::c
[16:04:32.013]             inherits <- base::inherits
[16:04:32.013]             invokeRestart <- base::invokeRestart
[16:04:32.013]             length <- base::length
[16:04:32.013]             list <- base::list
[16:04:32.013]             seq.int <- base::seq.int
[16:04:32.013]             signalCondition <- base::signalCondition
[16:04:32.013]             sys.calls <- base::sys.calls
[16:04:32.013]             `[[` <- base::`[[`
[16:04:32.013]             `+` <- base::`+`
[16:04:32.013]             `<<-` <- base::`<<-`
[16:04:32.013]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:04:32.013]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:04:32.013]                   3L)]
[16:04:32.013]             }
[16:04:32.013]             function(cond) {
[16:04:32.013]                 is_error <- inherits(cond, "error")
[16:04:32.013]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:04:32.013]                   NULL)
[16:04:32.013]                 if (is_error) {
[16:04:32.013]                   sessionInformation <- function() {
[16:04:32.013]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:04:32.013]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:04:32.013]                       search = base::search(), system = base::Sys.info())
[16:04:32.013]                   }
[16:04:32.013]                   ...future.conditions[[length(...future.conditions) + 
[16:04:32.013]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:04:32.013]                     cond$call), session = sessionInformation(), 
[16:04:32.013]                     timestamp = base::Sys.time(), signaled = 0L)
[16:04:32.013]                   signalCondition(cond)
[16:04:32.013]                 }
[16:04:32.013]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:04:32.013]                 "immediateCondition"))) {
[16:04:32.013]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:04:32.013]                   ...future.conditions[[length(...future.conditions) + 
[16:04:32.013]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:04:32.013]                   if (TRUE && !signal) {
[16:04:32.013]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:04:32.013]                     {
[16:04:32.013]                       inherits <- base::inherits
[16:04:32.013]                       invokeRestart <- base::invokeRestart
[16:04:32.013]                       is.null <- base::is.null
[16:04:32.013]                       muffled <- FALSE
[16:04:32.013]                       if (inherits(cond, "message")) {
[16:04:32.013]                         muffled <- grepl(pattern, "muffleMessage")
[16:04:32.013]                         if (muffled) 
[16:04:32.013]                           invokeRestart("muffleMessage")
[16:04:32.013]                       }
[16:04:32.013]                       else if (inherits(cond, "warning")) {
[16:04:32.013]                         muffled <- grepl(pattern, "muffleWarning")
[16:04:32.013]                         if (muffled) 
[16:04:32.013]                           invokeRestart("muffleWarning")
[16:04:32.013]                       }
[16:04:32.013]                       else if (inherits(cond, "condition")) {
[16:04:32.013]                         if (!is.null(pattern)) {
[16:04:32.013]                           computeRestarts <- base::computeRestarts
[16:04:32.013]                           grepl <- base::grepl
[16:04:32.013]                           restarts <- computeRestarts(cond)
[16:04:32.013]                           for (restart in restarts) {
[16:04:32.013]                             name <- restart$name
[16:04:32.013]                             if (is.null(name)) 
[16:04:32.013]                               next
[16:04:32.013]                             if (!grepl(pattern, name)) 
[16:04:32.013]                               next
[16:04:32.013]                             invokeRestart(restart)
[16:04:32.013]                             muffled <- TRUE
[16:04:32.013]                             break
[16:04:32.013]                           }
[16:04:32.013]                         }
[16:04:32.013]                       }
[16:04:32.013]                       invisible(muffled)
[16:04:32.013]                     }
[16:04:32.013]                     muffleCondition(cond, pattern = "^muffle")
[16:04:32.013]                   }
[16:04:32.013]                 }
[16:04:32.013]                 else {
[16:04:32.013]                   if (TRUE) {
[16:04:32.013]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:04:32.013]                     {
[16:04:32.013]                       inherits <- base::inherits
[16:04:32.013]                       invokeRestart <- base::invokeRestart
[16:04:32.013]                       is.null <- base::is.null
[16:04:32.013]                       muffled <- FALSE
[16:04:32.013]                       if (inherits(cond, "message")) {
[16:04:32.013]                         muffled <- grepl(pattern, "muffleMessage")
[16:04:32.013]                         if (muffled) 
[16:04:32.013]                           invokeRestart("muffleMessage")
[16:04:32.013]                       }
[16:04:32.013]                       else if (inherits(cond, "warning")) {
[16:04:32.013]                         muffled <- grepl(pattern, "muffleWarning")
[16:04:32.013]                         if (muffled) 
[16:04:32.013]                           invokeRestart("muffleWarning")
[16:04:32.013]                       }
[16:04:32.013]                       else if (inherits(cond, "condition")) {
[16:04:32.013]                         if (!is.null(pattern)) {
[16:04:32.013]                           computeRestarts <- base::computeRestarts
[16:04:32.013]                           grepl <- base::grepl
[16:04:32.013]                           restarts <- computeRestarts(cond)
[16:04:32.013]                           for (restart in restarts) {
[16:04:32.013]                             name <- restart$name
[16:04:32.013]                             if (is.null(name)) 
[16:04:32.013]                               next
[16:04:32.013]                             if (!grepl(pattern, name)) 
[16:04:32.013]                               next
[16:04:32.013]                             invokeRestart(restart)
[16:04:32.013]                             muffled <- TRUE
[16:04:32.013]                             break
[16:04:32.013]                           }
[16:04:32.013]                         }
[16:04:32.013]                       }
[16:04:32.013]                       invisible(muffled)
[16:04:32.013]                     }
[16:04:32.013]                     muffleCondition(cond, pattern = "^muffle")
[16:04:32.013]                   }
[16:04:32.013]                 }
[16:04:32.013]             }
[16:04:32.013]         }))
[16:04:32.013]     }, error = function(ex) {
[16:04:32.013]         base::structure(base::list(value = NULL, visible = NULL, 
[16:04:32.013]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:04:32.013]                 ...future.rng), started = ...future.startTime, 
[16:04:32.013]             finished = Sys.time(), session_uuid = NA_character_, 
[16:04:32.013]             version = "1.8"), class = "FutureResult")
[16:04:32.013]     }, finally = {
[16:04:32.013]         if (!identical(...future.workdir, getwd())) 
[16:04:32.013]             setwd(...future.workdir)
[16:04:32.013]         {
[16:04:32.013]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:04:32.013]                 ...future.oldOptions$nwarnings <- NULL
[16:04:32.013]             }
[16:04:32.013]             base::options(...future.oldOptions)
[16:04:32.013]             if (.Platform$OS.type == "windows") {
[16:04:32.013]                 old_names <- names(...future.oldEnvVars)
[16:04:32.013]                 envs <- base::Sys.getenv()
[16:04:32.013]                 names <- names(envs)
[16:04:32.013]                 common <- intersect(names, old_names)
[16:04:32.013]                 added <- setdiff(names, old_names)
[16:04:32.013]                 removed <- setdiff(old_names, names)
[16:04:32.013]                 changed <- common[...future.oldEnvVars[common] != 
[16:04:32.013]                   envs[common]]
[16:04:32.013]                 NAMES <- toupper(changed)
[16:04:32.013]                 args <- list()
[16:04:32.013]                 for (kk in seq_along(NAMES)) {
[16:04:32.013]                   name <- changed[[kk]]
[16:04:32.013]                   NAME <- NAMES[[kk]]
[16:04:32.013]                   if (name != NAME && is.element(NAME, old_names)) 
[16:04:32.013]                     next
[16:04:32.013]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:04:32.013]                 }
[16:04:32.013]                 NAMES <- toupper(added)
[16:04:32.013]                 for (kk in seq_along(NAMES)) {
[16:04:32.013]                   name <- added[[kk]]
[16:04:32.013]                   NAME <- NAMES[[kk]]
[16:04:32.013]                   if (name != NAME && is.element(NAME, old_names)) 
[16:04:32.013]                     next
[16:04:32.013]                   args[[name]] <- ""
[16:04:32.013]                 }
[16:04:32.013]                 NAMES <- toupper(removed)
[16:04:32.013]                 for (kk in seq_along(NAMES)) {
[16:04:32.013]                   name <- removed[[kk]]
[16:04:32.013]                   NAME <- NAMES[[kk]]
[16:04:32.013]                   if (name != NAME && is.element(NAME, old_names)) 
[16:04:32.013]                     next
[16:04:32.013]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:04:32.013]                 }
[16:04:32.013]                 if (length(args) > 0) 
[16:04:32.013]                   base::do.call(base::Sys.setenv, args = args)
[16:04:32.013]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:04:32.013]             }
[16:04:32.013]             else {
[16:04:32.013]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:04:32.013]             }
[16:04:32.013]             {
[16:04:32.013]                 if (base::length(...future.futureOptionsAdded) > 
[16:04:32.013]                   0L) {
[16:04:32.013]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:04:32.013]                   base::names(opts) <- ...future.futureOptionsAdded
[16:04:32.013]                   base::options(opts)
[16:04:32.013]                 }
[16:04:32.013]                 {
[16:04:32.013]                   {
[16:04:32.013]                     base::options(mc.cores = ...future.mc.cores.old)
[16:04:32.013]                     NULL
[16:04:32.013]                   }
[16:04:32.013]                   options(future.plan = NULL)
[16:04:32.013]                   if (is.na(NA_character_)) 
[16:04:32.013]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:04:32.013]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:04:32.013]                   future::plan(list(function (..., workers = availableCores(constraints = "multicore"), 
[16:04:32.013]                     envir = parent.frame()) 
[16:04:32.013]                   {
[16:04:32.013]                     default_workers <- missing(workers)
[16:04:32.013]                     if (is.function(workers)) 
[16:04:32.013]                       workers <- workers()
[16:04:32.013]                     workers <- structure(as.integer(workers), 
[16:04:32.013]                       class = class(workers))
[16:04:32.013]                     stop_if_not(is.finite(workers), workers >= 
[16:04:32.013]                       1L)
[16:04:32.013]                     if ((workers == 1L && !inherits(workers, 
[16:04:32.013]                       "AsIs")) || !supportsMulticore(warn = TRUE)) {
[16:04:32.013]                       if (default_workers) 
[16:04:32.013]                         supportsMulticore(warn = TRUE)
[16:04:32.013]                       return(sequential(..., envir = envir))
[16:04:32.013]                     }
[16:04:32.013]                     oopts <- options(mc.cores = workers)
[16:04:32.013]                     on.exit(options(oopts))
[16:04:32.013]                     future <- MulticoreFuture(..., workers = workers, 
[16:04:32.013]                       envir = envir)
[16:04:32.013]                     if (!future$lazy) 
[16:04:32.013]                       future <- run(future)
[16:04:32.013]                     invisible(future)
[16:04:32.013]                   }), .cleanup = FALSE, .init = FALSE)
[16:04:32.013]                 }
[16:04:32.013]             }
[16:04:32.013]         }
[16:04:32.013]     })
[16:04:32.013]     if (TRUE) {
[16:04:32.013]         base::sink(type = "output", split = FALSE)
[16:04:32.013]         if (TRUE) {
[16:04:32.013]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:04:32.013]         }
[16:04:32.013]         else {
[16:04:32.013]             ...future.result["stdout"] <- base::list(NULL)
[16:04:32.013]         }
[16:04:32.013]         base::close(...future.stdout)
[16:04:32.013]         ...future.stdout <- NULL
[16:04:32.013]     }
[16:04:32.013]     ...future.result$conditions <- ...future.conditions
[16:04:32.013]     ...future.result$finished <- base::Sys.time()
[16:04:32.013]     ...future.result
[16:04:32.013] }
[16:04:32.016] requestCore(): workers = 2
[16:04:32.018] MulticoreFuture started
[16:04:32.018] - Launch lazy future ... done
[16:04:32.018] run() for ‘MulticoreFuture’ ... done
[16:04:32.019] result() for MulticoreFuture ...
[16:04:32.019] plan(): Setting new future strategy stack:
[16:04:32.019] List of future strategies:
[16:04:32.019] 1. sequential:
[16:04:32.019]    - args: function (..., envir = parent.frame())
[16:04:32.019]    - tweaked: FALSE
[16:04:32.019]    - call: NULL
[16:04:32.020] plan(): nbrOfWorkers() = 1
[16:04:32.022] plan(): Setting new future strategy stack:
[16:04:32.022] List of future strategies:
[16:04:32.022] 1. multicore:
[16:04:32.022]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[16:04:32.022]    - tweaked: FALSE
[16:04:32.022]    - call: plan(strategy)
[16:04:32.027] plan(): nbrOfWorkers() = 2
[16:04:32.028] result() for MulticoreFuture ...
[16:04:32.028] result() for MulticoreFuture ... done
[16:04:32.028] result() for MulticoreFuture ... done
[16:04:32.028] result() for MulticoreFuture ...
[16:04:32.029] result() for MulticoreFuture ... done
d = 1
** Nested future assignments
[16:04:32.029] getGlobalsAndPackages() ...
[16:04:32.029] Searching for globals...
[16:04:32.034] - globals found: [5] ‘{’, ‘<-’, ‘%<-%’, ‘%->%’, ‘+’
[16:04:32.034] Searching for globals ... DONE
[16:04:32.034] Resolving globals: FALSE
[16:04:32.035] 
[16:04:32.035] - packages: [1] ‘future’
[16:04:32.035] getGlobalsAndPackages() ... DONE
[16:04:32.035] run() for ‘Future’ ...
[16:04:32.036] - state: ‘created’
[16:04:32.036] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[16:04:32.040] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[16:04:32.040] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[16:04:32.040]   - Field: ‘label’
[16:04:32.040]   - Field: ‘local’
[16:04:32.040]   - Field: ‘owner’
[16:04:32.040]   - Field: ‘envir’
[16:04:32.040]   - Field: ‘workers’
[16:04:32.040]   - Field: ‘packages’
[16:04:32.041]   - Field: ‘gc’
[16:04:32.041]   - Field: ‘job’
[16:04:32.041]   - Field: ‘conditions’
[16:04:32.041]   - Field: ‘expr’
[16:04:32.041]   - Field: ‘uuid’
[16:04:32.041]   - Field: ‘seed’
[16:04:32.041]   - Field: ‘version’
[16:04:32.041]   - Field: ‘result’
[16:04:32.041]   - Field: ‘asynchronous’
[16:04:32.044]   - Field: ‘calls’
[16:04:32.044]   - Field: ‘globals’
[16:04:32.044]   - Field: ‘stdout’
[16:04:32.044]   - Field: ‘earlySignal’
[16:04:32.044]   - Field: ‘lazy’
[16:04:32.044]   - Field: ‘state’
[16:04:32.044] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[16:04:32.045] - Launch lazy future ...
[16:04:32.045] Packages needed by the future expression (n = 1): ‘future’
[16:04:32.045] Packages needed by future strategies (n = 0): <none>
[16:04:32.046] {
[16:04:32.046]     {
[16:04:32.046]         {
[16:04:32.046]             ...future.startTime <- base::Sys.time()
[16:04:32.046]             {
[16:04:32.046]                 {
[16:04:32.046]                   {
[16:04:32.046]                     {
[16:04:32.046]                       {
[16:04:32.046]                         base::local({
[16:04:32.046]                           has_future <- base::requireNamespace("future", 
[16:04:32.046]                             quietly = TRUE)
[16:04:32.046]                           if (has_future) {
[16:04:32.046]                             ns <- base::getNamespace("future")
[16:04:32.046]                             version <- ns[[".package"]][["version"]]
[16:04:32.046]                             if (is.null(version)) 
[16:04:32.046]                               version <- utils::packageVersion("future")
[16:04:32.046]                           }
[16:04:32.046]                           else {
[16:04:32.046]                             version <- NULL
[16:04:32.046]                           }
[16:04:32.046]                           if (!has_future || version < "1.8.0") {
[16:04:32.046]                             info <- base::c(r_version = base::gsub("R version ", 
[16:04:32.046]                               "", base::R.version$version.string), 
[16:04:32.046]                               platform = base::sprintf("%s (%s-bit)", 
[16:04:32.046]                                 base::R.version$platform, 8 * 
[16:04:32.046]                                   base::.Machine$sizeof.pointer), 
[16:04:32.046]                               os = base::paste(base::Sys.info()[base::c("sysname", 
[16:04:32.046]                                 "release", "version")], collapse = " "), 
[16:04:32.046]                               hostname = base::Sys.info()[["nodename"]])
[16:04:32.046]                             info <- base::sprintf("%s: %s", base::names(info), 
[16:04:32.046]                               info)
[16:04:32.046]                             info <- base::paste(info, collapse = "; ")
[16:04:32.046]                             if (!has_future) {
[16:04:32.046]                               msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:04:32.046]                                 info)
[16:04:32.046]                             }
[16:04:32.046]                             else {
[16:04:32.046]                               msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:04:32.046]                                 info, version)
[16:04:32.046]                             }
[16:04:32.046]                             base::stop(msg)
[16:04:32.046]                           }
[16:04:32.046]                         })
[16:04:32.046]                       }
[16:04:32.046]                       ...future.mc.cores.old <- base::getOption("mc.cores")
[16:04:32.046]                       base::options(mc.cores = 1L)
[16:04:32.046]                     }
[16:04:32.046]                     base::local({
[16:04:32.046]                       for (pkg in "future") {
[16:04:32.046]                         base::loadNamespace(pkg)
[16:04:32.046]                         base::library(pkg, character.only = TRUE)
[16:04:32.046]                       }
[16:04:32.046]                     })
[16:04:32.046]                   }
[16:04:32.046]                   options(future.plan = NULL)
[16:04:32.046]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:04:32.046]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:04:32.046]                 }
[16:04:32.046]                 ...future.workdir <- getwd()
[16:04:32.046]             }
[16:04:32.046]             ...future.oldOptions <- base::as.list(base::.Options)
[16:04:32.046]             ...future.oldEnvVars <- base::Sys.getenv()
[16:04:32.046]         }
[16:04:32.046]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:04:32.046]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:04:32.046]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:04:32.046]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:04:32.046]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:04:32.046]             future.stdout.windows.reencode = NULL, width = 80L)
[16:04:32.046]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:04:32.046]             base::names(...future.oldOptions))
[16:04:32.046]     }
[16:04:32.046]     if (FALSE) {
[16:04:32.046]     }
[16:04:32.046]     else {
[16:04:32.046]         if (TRUE) {
[16:04:32.046]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:04:32.046]                 open = "w")
[16:04:32.046]         }
[16:04:32.046]         else {
[16:04:32.046]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:04:32.046]                 windows = "NUL", "/dev/null"), open = "w")
[16:04:32.046]         }
[16:04:32.046]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:04:32.046]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:04:32.046]             base::sink(type = "output", split = FALSE)
[16:04:32.046]             base::close(...future.stdout)
[16:04:32.046]         }, add = TRUE)
[16:04:32.046]     }
[16:04:32.046]     ...future.frame <- base::sys.nframe()
[16:04:32.046]     ...future.conditions <- base::list()
[16:04:32.046]     ...future.rng <- base::globalenv()$.Random.seed
[16:04:32.046]     if (FALSE) {
[16:04:32.046]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:04:32.046]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:04:32.046]     }
[16:04:32.046]     ...future.result <- base::tryCatch({
[16:04:32.046]         base::withCallingHandlers({
[16:04:32.046]             ...future.value <- base::withVisible(base::local({
[16:04:32.046]                 withCallingHandlers({
[16:04:32.046]                   {
[16:04:32.046]                     b <- 1
[16:04:32.046]                     c %<-% 2
[16:04:32.046]                     d <- 3
[16:04:32.046]                     4 %->% e
[16:04:32.046]                     b + c + d + e
[16:04:32.046]                   }
[16:04:32.046]                 }, immediateCondition = function(cond) {
[16:04:32.046]                   save_rds <- function (object, pathname, ...) 
[16:04:32.046]                   {
[16:04:32.046]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[16:04:32.046]                     if (file_test("-f", pathname_tmp)) {
[16:04:32.046]                       fi_tmp <- file.info(pathname_tmp)
[16:04:32.046]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[16:04:32.046]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:04:32.046]                         fi_tmp[["mtime"]])
[16:04:32.046]                     }
[16:04:32.046]                     tryCatch({
[16:04:32.046]                       saveRDS(object, file = pathname_tmp, ...)
[16:04:32.046]                     }, error = function(ex) {
[16:04:32.046]                       msg <- conditionMessage(ex)
[16:04:32.046]                       fi_tmp <- file.info(pathname_tmp)
[16:04:32.046]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[16:04:32.046]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:04:32.046]                         fi_tmp[["mtime"]], msg)
[16:04:32.046]                       ex$message <- msg
[16:04:32.046]                       stop(ex)
[16:04:32.046]                     })
[16:04:32.046]                     stopifnot(file_test("-f", pathname_tmp))
[16:04:32.046]                     res <- file.rename(from = pathname_tmp, to = pathname)
[16:04:32.046]                     if (!res || file_test("-f", pathname_tmp)) {
[16:04:32.046]                       fi_tmp <- file.info(pathname_tmp)
[16:04:32.046]                       fi <- file.info(pathname)
[16:04:32.046]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[16:04:32.046]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:04:32.046]                         fi_tmp[["mtime"]], sQuote(pathname), 
[16:04:32.046]                         fi[["size"]], fi[["mtime"]])
[16:04:32.046]                       stop(msg)
[16:04:32.046]                     }
[16:04:32.046]                     invisible(pathname)
[16:04:32.046]                   }
[16:04:32.046]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[16:04:32.046]                     rootPath = tempdir()) 
[16:04:32.046]                   {
[16:04:32.046]                     obj <- list(time = Sys.time(), condition = cond)
[16:04:32.046]                     file <- tempfile(pattern = class(cond)[1], 
[16:04:32.046]                       tmpdir = path, fileext = ".rds")
[16:04:32.046]                     save_rds(obj, file)
[16:04:32.046]                   }
[16:04:32.046]                   saveImmediateCondition(cond, path = "/tmp/Rtmpe612Wd/.future/immediateConditions")
[16:04:32.046]                   muffleCondition <- function (cond, pattern = "^muffle") 
[16:04:32.046]                   {
[16:04:32.046]                     inherits <- base::inherits
[16:04:32.046]                     invokeRestart <- base::invokeRestart
[16:04:32.046]                     is.null <- base::is.null
[16:04:32.046]                     muffled <- FALSE
[16:04:32.046]                     if (inherits(cond, "message")) {
[16:04:32.046]                       muffled <- grepl(pattern, "muffleMessage")
[16:04:32.046]                       if (muffled) 
[16:04:32.046]                         invokeRestart("muffleMessage")
[16:04:32.046]                     }
[16:04:32.046]                     else if (inherits(cond, "warning")) {
[16:04:32.046]                       muffled <- grepl(pattern, "muffleWarning")
[16:04:32.046]                       if (muffled) 
[16:04:32.046]                         invokeRestart("muffleWarning")
[16:04:32.046]                     }
[16:04:32.046]                     else if (inherits(cond, "condition")) {
[16:04:32.046]                       if (!is.null(pattern)) {
[16:04:32.046]                         computeRestarts <- base::computeRestarts
[16:04:32.046]                         grepl <- base::grepl
[16:04:32.046]                         restarts <- computeRestarts(cond)
[16:04:32.046]                         for (restart in restarts) {
[16:04:32.046]                           name <- restart$name
[16:04:32.046]                           if (is.null(name)) 
[16:04:32.046]                             next
[16:04:32.046]                           if (!grepl(pattern, name)) 
[16:04:32.046]                             next
[16:04:32.046]                           invokeRestart(restart)
[16:04:32.046]                           muffled <- TRUE
[16:04:32.046]                           break
[16:04:32.046]                         }
[16:04:32.046]                       }
[16:04:32.046]                     }
[16:04:32.046]                     invisible(muffled)
[16:04:32.046]                   }
[16:04:32.046]                   muffleCondition(cond)
[16:04:32.046]                 })
[16:04:32.046]             }))
[16:04:32.046]             future::FutureResult(value = ...future.value$value, 
[16:04:32.046]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:04:32.046]                   ...future.rng), globalenv = if (FALSE) 
[16:04:32.046]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:04:32.046]                     ...future.globalenv.names))
[16:04:32.046]                 else NULL, started = ...future.startTime, version = "1.8")
[16:04:32.046]         }, condition = base::local({
[16:04:32.046]             c <- base::c
[16:04:32.046]             inherits <- base::inherits
[16:04:32.046]             invokeRestart <- base::invokeRestart
[16:04:32.046]             length <- base::length
[16:04:32.046]             list <- base::list
[16:04:32.046]             seq.int <- base::seq.int
[16:04:32.046]             signalCondition <- base::signalCondition
[16:04:32.046]             sys.calls <- base::sys.calls
[16:04:32.046]             `[[` <- base::`[[`
[16:04:32.046]             `+` <- base::`+`
[16:04:32.046]             `<<-` <- base::`<<-`
[16:04:32.046]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:04:32.046]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:04:32.046]                   3L)]
[16:04:32.046]             }
[16:04:32.046]             function(cond) {
[16:04:32.046]                 is_error <- inherits(cond, "error")
[16:04:32.046]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:04:32.046]                   NULL)
[16:04:32.046]                 if (is_error) {
[16:04:32.046]                   sessionInformation <- function() {
[16:04:32.046]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:04:32.046]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:04:32.046]                       search = base::search(), system = base::Sys.info())
[16:04:32.046]                   }
[16:04:32.046]                   ...future.conditions[[length(...future.conditions) + 
[16:04:32.046]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:04:32.046]                     cond$call), session = sessionInformation(), 
[16:04:32.046]                     timestamp = base::Sys.time(), signaled = 0L)
[16:04:32.046]                   signalCondition(cond)
[16:04:32.046]                 }
[16:04:32.046]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:04:32.046]                 "immediateCondition"))) {
[16:04:32.046]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:04:32.046]                   ...future.conditions[[length(...future.conditions) + 
[16:04:32.046]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:04:32.046]                   if (TRUE && !signal) {
[16:04:32.046]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:04:32.046]                     {
[16:04:32.046]                       inherits <- base::inherits
[16:04:32.046]                       invokeRestart <- base::invokeRestart
[16:04:32.046]                       is.null <- base::is.null
[16:04:32.046]                       muffled <- FALSE
[16:04:32.046]                       if (inherits(cond, "message")) {
[16:04:32.046]                         muffled <- grepl(pattern, "muffleMessage")
[16:04:32.046]                         if (muffled) 
[16:04:32.046]                           invokeRestart("muffleMessage")
[16:04:32.046]                       }
[16:04:32.046]                       else if (inherits(cond, "warning")) {
[16:04:32.046]                         muffled <- grepl(pattern, "muffleWarning")
[16:04:32.046]                         if (muffled) 
[16:04:32.046]                           invokeRestart("muffleWarning")
[16:04:32.046]                       }
[16:04:32.046]                       else if (inherits(cond, "condition")) {
[16:04:32.046]                         if (!is.null(pattern)) {
[16:04:32.046]                           computeRestarts <- base::computeRestarts
[16:04:32.046]                           grepl <- base::grepl
[16:04:32.046]                           restarts <- computeRestarts(cond)
[16:04:32.046]                           for (restart in restarts) {
[16:04:32.046]                             name <- restart$name
[16:04:32.046]                             if (is.null(name)) 
[16:04:32.046]                               next
[16:04:32.046]                             if (!grepl(pattern, name)) 
[16:04:32.046]                               next
[16:04:32.046]                             invokeRestart(restart)
[16:04:32.046]                             muffled <- TRUE
[16:04:32.046]                             break
[16:04:32.046]                           }
[16:04:32.046]                         }
[16:04:32.046]                       }
[16:04:32.046]                       invisible(muffled)
[16:04:32.046]                     }
[16:04:32.046]                     muffleCondition(cond, pattern = "^muffle")
[16:04:32.046]                   }
[16:04:32.046]                 }
[16:04:32.046]                 else {
[16:04:32.046]                   if (TRUE) {
[16:04:32.046]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:04:32.046]                     {
[16:04:32.046]                       inherits <- base::inherits
[16:04:32.046]                       invokeRestart <- base::invokeRestart
[16:04:32.046]                       is.null <- base::is.null
[16:04:32.046]                       muffled <- FALSE
[16:04:32.046]                       if (inherits(cond, "message")) {
[16:04:32.046]                         muffled <- grepl(pattern, "muffleMessage")
[16:04:32.046]                         if (muffled) 
[16:04:32.046]                           invokeRestart("muffleMessage")
[16:04:32.046]                       }
[16:04:32.046]                       else if (inherits(cond, "warning")) {
[16:04:32.046]                         muffled <- grepl(pattern, "muffleWarning")
[16:04:32.046]                         if (muffled) 
[16:04:32.046]                           invokeRestart("muffleWarning")
[16:04:32.046]                       }
[16:04:32.046]                       else if (inherits(cond, "condition")) {
[16:04:32.046]                         if (!is.null(pattern)) {
[16:04:32.046]                           computeRestarts <- base::computeRestarts
[16:04:32.046]                           grepl <- base::grepl
[16:04:32.046]                           restarts <- computeRestarts(cond)
[16:04:32.046]                           for (restart in restarts) {
[16:04:32.046]                             name <- restart$name
[16:04:32.046]                             if (is.null(name)) 
[16:04:32.046]                               next
[16:04:32.046]                             if (!grepl(pattern, name)) 
[16:04:32.046]                               next
[16:04:32.046]                             invokeRestart(restart)
[16:04:32.046]                             muffled <- TRUE
[16:04:32.046]                             break
[16:04:32.046]                           }
[16:04:32.046]                         }
[16:04:32.046]                       }
[16:04:32.046]                       invisible(muffled)
[16:04:32.046]                     }
[16:04:32.046]                     muffleCondition(cond, pattern = "^muffle")
[16:04:32.046]                   }
[16:04:32.046]                 }
[16:04:32.046]             }
[16:04:32.046]         }))
[16:04:32.046]     }, error = function(ex) {
[16:04:32.046]         base::structure(base::list(value = NULL, visible = NULL, 
[16:04:32.046]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:04:32.046]                 ...future.rng), started = ...future.startTime, 
[16:04:32.046]             finished = Sys.time(), session_uuid = NA_character_, 
[16:04:32.046]             version = "1.8"), class = "FutureResult")
[16:04:32.046]     }, finally = {
[16:04:32.046]         if (!identical(...future.workdir, getwd())) 
[16:04:32.046]             setwd(...future.workdir)
[16:04:32.046]         {
[16:04:32.046]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:04:32.046]                 ...future.oldOptions$nwarnings <- NULL
[16:04:32.046]             }
[16:04:32.046]             base::options(...future.oldOptions)
[16:04:32.046]             if (.Platform$OS.type == "windows") {
[16:04:32.046]                 old_names <- names(...future.oldEnvVars)
[16:04:32.046]                 envs <- base::Sys.getenv()
[16:04:32.046]                 names <- names(envs)
[16:04:32.046]                 common <- intersect(names, old_names)
[16:04:32.046]                 added <- setdiff(names, old_names)
[16:04:32.046]                 removed <- setdiff(old_names, names)
[16:04:32.046]                 changed <- common[...future.oldEnvVars[common] != 
[16:04:32.046]                   envs[common]]
[16:04:32.046]                 NAMES <- toupper(changed)
[16:04:32.046]                 args <- list()
[16:04:32.046]                 for (kk in seq_along(NAMES)) {
[16:04:32.046]                   name <- changed[[kk]]
[16:04:32.046]                   NAME <- NAMES[[kk]]
[16:04:32.046]                   if (name != NAME && is.element(NAME, old_names)) 
[16:04:32.046]                     next
[16:04:32.046]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:04:32.046]                 }
[16:04:32.046]                 NAMES <- toupper(added)
[16:04:32.046]                 for (kk in seq_along(NAMES)) {
[16:04:32.046]                   name <- added[[kk]]
[16:04:32.046]                   NAME <- NAMES[[kk]]
[16:04:32.046]                   if (name != NAME && is.element(NAME, old_names)) 
[16:04:32.046]                     next
[16:04:32.046]                   args[[name]] <- ""
[16:04:32.046]                 }
[16:04:32.046]                 NAMES <- toupper(removed)
[16:04:32.046]                 for (kk in seq_along(NAMES)) {
[16:04:32.046]                   name <- removed[[kk]]
[16:04:32.046]                   NAME <- NAMES[[kk]]
[16:04:32.046]                   if (name != NAME && is.element(NAME, old_names)) 
[16:04:32.046]                     next
[16:04:32.046]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:04:32.046]                 }
[16:04:32.046]                 if (length(args) > 0) 
[16:04:32.046]                   base::do.call(base::Sys.setenv, args = args)
[16:04:32.046]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:04:32.046]             }
[16:04:32.046]             else {
[16:04:32.046]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:04:32.046]             }
[16:04:32.046]             {
[16:04:32.046]                 if (base::length(...future.futureOptionsAdded) > 
[16:04:32.046]                   0L) {
[16:04:32.046]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:04:32.046]                   base::names(opts) <- ...future.futureOptionsAdded
[16:04:32.046]                   base::options(opts)
[16:04:32.046]                 }
[16:04:32.046]                 {
[16:04:32.046]                   {
[16:04:32.046]                     base::options(mc.cores = ...future.mc.cores.old)
[16:04:32.046]                     NULL
[16:04:32.046]                   }
[16:04:32.046]                   options(future.plan = NULL)
[16:04:32.046]                   if (is.na(NA_character_)) 
[16:04:32.046]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:04:32.046]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:04:32.046]                   future::plan(list(function (..., workers = availableCores(constraints = "multicore"), 
[16:04:32.046]                     envir = parent.frame()) 
[16:04:32.046]                   {
[16:04:32.046]                     default_workers <- missing(workers)
[16:04:32.046]                     if (is.function(workers)) 
[16:04:32.046]                       workers <- workers()
[16:04:32.046]                     workers <- structure(as.integer(workers), 
[16:04:32.046]                       class = class(workers))
[16:04:32.046]                     stop_if_not(is.finite(workers), workers >= 
[16:04:32.046]                       1L)
[16:04:32.046]                     if ((workers == 1L && !inherits(workers, 
[16:04:32.046]                       "AsIs")) || !supportsMulticore(warn = TRUE)) {
[16:04:32.046]                       if (default_workers) 
[16:04:32.046]                         supportsMulticore(warn = TRUE)
[16:04:32.046]                       return(sequential(..., envir = envir))
[16:04:32.046]                     }
[16:04:32.046]                     oopts <- options(mc.cores = workers)
[16:04:32.046]                     on.exit(options(oopts))
[16:04:32.046]                     future <- MulticoreFuture(..., workers = workers, 
[16:04:32.046]                       envir = envir)
[16:04:32.046]                     if (!future$lazy) 
[16:04:32.046]                       future <- run(future)
[16:04:32.046]                     invisible(future)
[16:04:32.046]                   }), .cleanup = FALSE, .init = FALSE)
[16:04:32.046]                 }
[16:04:32.046]             }
[16:04:32.046]         }
[16:04:32.046]     })
[16:04:32.046]     if (TRUE) {
[16:04:32.046]         base::sink(type = "output", split = FALSE)
[16:04:32.046]         if (TRUE) {
[16:04:32.046]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:04:32.046]         }
[16:04:32.046]         else {
[16:04:32.046]             ...future.result["stdout"] <- base::list(NULL)
[16:04:32.046]         }
[16:04:32.046]         base::close(...future.stdout)
[16:04:32.046]         ...future.stdout <- NULL
[16:04:32.046]     }
[16:04:32.046]     ...future.result$conditions <- ...future.conditions
[16:04:32.046]     ...future.result$finished <- base::Sys.time()
[16:04:32.046]     ...future.result
[16:04:32.046] }
[16:04:32.049] requestCore(): workers = 2
[16:04:32.050] MulticoreFuture started
[16:04:32.051] - Launch lazy future ... done
[16:04:32.051] run() for ‘MulticoreFuture’ ... done
[16:04:32.051] result() for MulticoreFuture ...
[16:04:32.052] plan(): Setting new future strategy stack:
[16:04:32.052] List of future strategies:
[16:04:32.052] 1. sequential:
[16:04:32.052]    - args: function (..., envir = parent.frame())
[16:04:32.052]    - tweaked: FALSE
[16:04:32.052]    - call: NULL
[16:04:32.053] plan(): nbrOfWorkers() = 1
[16:04:32.086] plan(): Setting new future strategy stack:
[16:04:32.086] List of future strategies:
[16:04:32.086] 1. multicore:
[16:04:32.086]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[16:04:32.086]    - tweaked: FALSE
[16:04:32.086]    - call: plan(strategy)
[16:04:32.091] plan(): nbrOfWorkers() = 2
[16:04:32.092] result() for MulticoreFuture ...
[16:04:32.092] result() for MulticoreFuture ... done
[16:04:32.093] signalConditions() ...
[16:04:32.093]  - include = ‘immediateCondition’
[16:04:32.093]  - exclude = 
[16:04:32.093]  - resignal = FALSE
[16:04:32.093]  - Number of conditions: 88
[16:04:32.093] signalConditions() ... done
[16:04:32.093] result() for MulticoreFuture ... done
[16:04:32.094] result() for MulticoreFuture ...
[16:04:32.094] result() for MulticoreFuture ... done
[16:04:32.094] signalConditions() ...
[16:04:32.094]  - include = ‘immediateCondition’
[16:04:32.094]  - exclude = 
[16:04:32.094]  - resignal = FALSE
[16:04:32.094]  - Number of conditions: 88
[16:04:32.094] signalConditions() ... done
[16:04:32.095] Future state: ‘finished’
[16:04:32.095] result() for MulticoreFuture ...
[16:04:32.095] result() for MulticoreFuture ... done
[16:04:32.095] signalConditions() ...
[16:04:32.095]  - include = ‘condition’
[16:04:32.095]  - exclude = ‘immediateCondition’
[16:04:32.095]  - resignal = TRUE
[16:04:32.096]  - Number of conditions: 88
[16:04:32.096]  - Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[16:04:32.054] getGlobalsAndPackages() ...
[16:04:32.096]  - Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
[16:04:32.055] Searching for globals...
[16:04:32.096]  - Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[16:04:32.055] 
[16:04:32.096]  - Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[16:04:32.056] Searching for globals ... DONE
[16:04:32.096]  - Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[16:04:32.056] - globals: [0] <none>
[16:04:32.097]  - Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[16:04:32.056] getGlobalsAndPackages() ... DONE
[16:04:32.097]  - Condition #7: ‘simpleMessage’, ‘message’, ‘condition’
[16:04:32.057] run() for ‘Future’ ...
[16:04:32.097]  - Condition #8: ‘simpleMessage’, ‘message’, ‘condition’
[16:04:32.057] - state: ‘created’
[16:04:32.097]  - Condition #9: ‘simpleMessage’, ‘message’, ‘condition’
[16:04:32.057] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[16:04:32.097]  - Condition #10: ‘simpleMessage’, ‘message’, ‘condition’
[16:04:32.058] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[16:04:32.097]  - Condition #11: ‘simpleMessage’, ‘message’, ‘condition’
[16:04:32.058] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[16:04:32.098]  - Condition #12: ‘simpleMessage’, ‘message’, ‘condition’
[16:04:32.058]   - Field: ‘label’
[16:04:32.098]  - Condition #13: ‘simpleMessage’, ‘message’, ‘condition’
[16:04:32.059]   - Field: ‘local’
[16:04:32.098]  - Condition #14: ‘simpleMessage’, ‘message’, ‘condition’
[16:04:32.059]   - Field: ‘owner’
[16:04:32.098]  - Condition #15: ‘simpleMessage’, ‘message’, ‘condition’
[16:04:32.059]   - Field: ‘envir’
[16:04:32.098]  - Condition #16: ‘simpleMessage’, ‘message’, ‘condition’
[16:04:32.059]   - Field: ‘packages’
[16:04:32.099]  - Condition #17: ‘simpleMessage’, ‘message’, ‘condition’
[16:04:32.059]   - Field: ‘gc’
[16:04:32.099]  - Condition #18: ‘simpleMessage’, ‘message’, ‘condition’
[16:04:32.060]   - Field: ‘conditions’
[16:04:32.099]  - Condition #19: ‘simpleMessage’, ‘message’, ‘condition’
[16:04:32.060]   - Field: ‘expr’
[16:04:32.099]  - Condition #20: ‘simpleMessage’, ‘message’, ‘condition’
[16:04:32.060]   - Field: ‘uuid’
[16:04:32.099]  - Condition #21: ‘simpleMessage’, ‘message’, ‘condition’
[16:04:32.060]   - Field: ‘seed’
[16:04:32.099]  - Condition #22: ‘simpleMessage’, ‘message’, ‘condition’
[16:04:32.060]   - Field: ‘version’
[16:04:32.100]  - Condition #23: ‘simpleMessage’, ‘message’, ‘condition’
[16:04:32.061]   - Field: ‘result’
[16:04:32.100]  - Condition #24: ‘simpleMessage’, ‘message’, ‘condition’
[16:04:32.061]   - Field: ‘asynchronous’
[16:04:32.100]  - Condition #25: ‘simpleMessage’, ‘message’, ‘condition’
[16:04:32.061]   - Field: ‘calls’
[16:04:32.100]  - Condition #26: ‘simpleMessage’, ‘message’, ‘condition’
[16:04:32.061]   - Field: ‘globals’
[16:04:32.100]  - Condition #27: ‘simpleMessage’, ‘message’, ‘condition’
[16:04:32.061]   - Field: ‘stdout’
[16:04:32.100]  - Condition #28: ‘simpleMessage’, ‘message’, ‘condition’
[16:04:32.061]   - Field: ‘earlySignal’
[16:04:32.101]  - Condition #29: ‘simpleMessage’, ‘message’, ‘condition’
[16:04:32.062]   - Field: ‘lazy’
[16:04:32.101]  - Condition #30: ‘simpleMessage’, ‘message’, ‘condition’
[16:04:32.062]   - Field: ‘state’
[16:04:32.101]  - Condition #31: ‘simpleMessage’, ‘message’, ‘condition’
[16:04:32.062] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[16:04:32.101]  - Condition #32: ‘simpleMessage’, ‘message’, ‘condition’
[16:04:32.062] - Launch lazy future ...
[16:04:32.101]  - Condition #33: ‘simpleMessage’, ‘message’, ‘condition’
[16:04:32.063] Packages needed by the future expression (n = 0): <none>
[16:04:32.101]  - Condition #34: ‘simpleMessage’, ‘message’, ‘condition’
[16:04:32.063] Packages needed by future strategies (n = 0): <none>
[16:04:32.101]  - Condition #35: ‘simpleMessage’, ‘message’, ‘condition’
[16:04:32.064] {
[16:04:32.064]     {
[16:04:32.064]         {
[16:04:32.064]             ...future.startTime <- base::Sys.time()
[16:04:32.064]             {
[16:04:32.064]                 {
[16:04:32.064]                   {
[16:04:32.064]                     base::local({
[16:04:32.064]                       has_future <- base::requireNamespace("future", 
[16:04:32.064]                         quietly = TRUE)
[16:04:32.064]                       if (has_future) {
[16:04:32.064]                         ns <- base::getNamespace("future")
[16:04:32.064]                         version <- ns[[".package"]][["version"]]
[16:04:32.064]                         if (is.null(version)) 
[16:04:32.064]                           version <- utils::packageVersion("future")
[16:04:32.064]                       }
[16:04:32.064]                       else {
[16:04:32.064]                         version <- NULL
[16:04:32.064]                       }
[16:04:32.064]                       if (!has_future || version < "1.8.0") {
[16:04:32.064]                         info <- base::c(r_version = base::gsub("R version ", 
[16:04:32.064]                           "", base::R.version$version.string), 
[16:04:32.064]                           platform = base::sprintf("%s (%s-bit)", 
[16:04:32.064]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:04:32.064]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[16:04:32.064]                             "release", "version")], collapse = " "), 
[16:04:32.064]                           hostname = base::Sys.info()[["nodename"]])
[16:04:32.064]                         info <- base::sprintf("%s: %s", base::names(info), 
[16:04:32.064]                           info)
[16:04:32.064]                         info <- base::paste(info, collapse = "; ")
[16:04:32.064]                         if (!has_future) {
[16:04:32.064]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:04:32.064]                             info)
[16:04:32.064]                         }
[16:04:32.064]                         else {
[16:04:32.064]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:04:32.064]                             info, version)
[16:04:32.064]                         }
[16:04:32.064]                         base::stop(msg)
[16:04:32.064]                       }
[16:04:32.064]                     })
[16:04:32.064]                   }
[16:04:32.064]                   options(future.plan = NULL)
[16:04:32.064]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:04:32.064]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:04:32.064]                 }
[16:04:32.064]                 ...future.workdir <- getwd()
[16:04:32.064]             }
[16:04:32.064]             ...future.oldOptions <- base::as.list(base::.Options)
[16:04:32.064]             ...future.oldEnvVars <- base::Sys.getenv()
[16:04:32.064]         }
[16:04:32.064]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:04:32.064]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:04:32.064]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:04:32.064]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:04:32.064]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:04:32.064]             future.stdout.windows.reencode = NULL, width = 80L)
[16:04:32.064]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:04:32.064]             base::names(...future.oldOptions))
[16:04:32.064]     }
[16:04:32.064]     if (FALSE) {
[16:04:32.064]     }
[16:04:32.064]     else {
[16:04:32.064]         if (TRUE) {
[16:04:32.064]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:04:32.064]                 open = "w")
[16:04:32.064]         }
[16:04:32.064]         else {
[16:04:32.064]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:04:32.064]                 windows = "NUL", "/dev/null"), open = "w")
[16:04:32.064]         }
[16:04:32.064]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:04:32.064]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:04:32.064]             base::sink(type = "output", split = FALSE)
[16:04:32.064]             base::close(...future.stdout)
[16:04:32.064]         }, add = TRUE)
[16:04:32.064]     }
[16:04:32.064]     ...future.frame <- base::sys.nframe()
[16:04:32.064]     ...future.conditions <- base::list()
[16:04:32.064]     ...future.rng <- base::globalenv()$.Random.seed
[16:04:32.064]     if (FALSE) {
[16:04:32.064]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:04:32.064]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:04:32.064]     }
[16:04:32.064]     ...future.result <- base::tryCatch({
[16:04:32.064]         base::withCallingHandlers({
[16:04:32.064]             ...future.value <- base::withVisible(base::local(2))
[16:04:32.064]             future::FutureResult(value = ...future.value$value, 
[16:04:32.064]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:04:32.064]                   ...future.rng), globalenv = if (FALSE) 
[16:04:32.064]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:04:32.064]                     ...future.globalenv.names))
[16:04:32.064]                 else NULL, started = ...future.startTime, version = "1.8")
[16:04:32.064]         }, condition = base::local({
[16:04:32.064]             c <- base::c
[16:04:32.064]             inherits <- base::inherits
[16:04:32.064]             invokeRestart <- base::invokeRestart
[16:04:32.064]             length <- base::length
[16:04:32.064]             list <- base::list
[16:04:32.064]             seq.int <- base::seq.int
[16:04:32.064]             signalCondition <- base::signalCondition
[16:04:32.064]             sys.calls <- base::sys.calls
[16:04:32.064]             `[[` <- base::`[[`
[16:04:32.064]             `+` <- base::`+`
[16:04:32.064]             `<<-` <- base::`<<-`
[16:04:32.064]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:04:32.064]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:04:32.064]                   3L)]
[16:04:32.064]             }
[16:04:32.064]             function(cond) {
[16:04:32.064]                 is_error <- inherits(cond, "error")
[16:04:32.064]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:04:32.064]                   NULL)
[16:04:32.064]                 if (is_error) {
[16:04:32.064]                   sessionInformation <- function() {
[16:04:32.064]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:04:32.064]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:04:32.064]                       search = base::search(), system = base::Sys.info())
[16:04:32.064]                   }
[16:04:32.064]                   ...future.conditions[[length(...future.conditions) + 
[16:04:32.064]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:04:32.064]                     cond$call), session = sessionInformation(), 
[16:04:32.064]                     timestamp = base::Sys.time(), signaled = 0L)
[16:04:32.064]                   signalCondition(cond)
[16:04:32.064]                 }
[16:04:32.064]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:04:32.064]                 "immediateCondition"))) {
[16:04:32.064]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:04:32.064]                   ...future.conditions[[length(...future.conditions) + 
[16:04:32.064]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:04:32.064]                   if (TRUE && !signal) {
[16:04:32.064]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:04:32.064]                     {
[16:04:32.064]                       inherits <- base::inherits
[16:04:32.064]                       invokeRestart <- base::invokeRestart
[16:04:32.064]                       is.null <- base::is.null
[16:04:32.064]                       muffled <- FALSE
[16:04:32.064]                       if (inherits(cond, "message")) {
[16:04:32.064]                         muffled <- grepl(pattern, "muffleMessage")
[16:04:32.064]                         if (muffled) 
[16:04:32.064]                           invokeRestart("muffleMessage")
[16:04:32.064]                       }
[16:04:32.064]                       else if (inherits(cond, "warning")) {
[16:04:32.064]                         muffled <- grepl(pattern, "muffleWarning")
[16:04:32.064]                         if (muffled) 
[16:04:32.064]                           invokeRestart("muffleWarning")
[16:04:32.064]                       }
[16:04:32.064]                       else if (inherits(cond, "condition")) {
[16:04:32.064]                         if (!is.null(pattern)) {
[16:04:32.064]                           computeRestarts <- base::computeRestarts
[16:04:32.064]                           grepl <- base::grepl
[16:04:32.064]                           restarts <- computeRestarts(cond)
[16:04:32.064]                           for (restart in restarts) {
[16:04:32.064]                             name <- restart$name
[16:04:32.064]                             if (is.null(name)) 
[16:04:32.064]                               next
[16:04:32.064]                             if (!grepl(pattern, name)) 
[16:04:32.064]                               next
[16:04:32.064]                             invokeRestart(restart)
[16:04:32.064]                             muffled <- TRUE
[16:04:32.064]                             break
[16:04:32.064]                           }
[16:04:32.064]                         }
[16:04:32.064]                       }
[16:04:32.064]                       invisible(muffled)
[16:04:32.064]                     }
[16:04:32.064]                     muffleCondition(cond, pattern = "^muffle")
[16:04:32.064]                   }
[16:04:32.064]                 }
[16:04:32.064]                 else {
[16:04:32.064]                   if (TRUE) {
[16:04:32.064]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:04:32.064]                     {
[16:04:32.064]                       inherits <- base::inherits
[16:04:32.064]                       invokeRestart <- base::invokeRestart
[16:04:32.064]                       is.null <- base::is.null
[16:04:32.064]                       muffled <- FALSE
[16:04:32.064]                       if (inherits(cond, "message")) {
[16:04:32.064]                         muffled <- grepl(pattern, "muffleMessage")
[16:04:32.064]                         if (muffled) 
[16:04:32.064]                           invokeRestart("muffleMessage")
[16:04:32.064]                       }
[16:04:32.064]                       else if (inherits(cond, "warning")) {
[16:04:32.064]                         muffled <- grepl(pattern, "muffleWarning")
[16:04:32.064]                         if (muffled) 
[16:04:32.064]                           invokeRestart("muffleWarning")
[16:04:32.064]                       }
[16:04:32.064]                       else if (inherits(cond, "condition")) {
[16:04:32.064]                         if (!is.null(pattern)) {
[16:04:32.064]                           computeRestarts <- base::computeRestarts
[16:04:32.064]                           grepl <- base::grepl
[16:04:32.064]                           restarts <- computeRestarts(cond)
[16:04:32.064]                           for (restart in restarts) {
[16:04:32.064]                             name <- restart$name
[16:04:32.064]                             if (is.null(name)) 
[16:04:32.064]                               next
[16:04:32.064]                             if (!grepl(pattern, name)) 
[16:04:32.064]                               next
[16:04:32.064]                             invokeRestart(restart)
[16:04:32.064]                             muffled <- TRUE
[16:04:32.064]                             break
[16:04:32.064]                           }
[16:04:32.064]                         }
[16:04:32.064]                       }
[16:04:32.064]                       invisible(muffled)
[16:04:32.064]                     }
[16:04:32.064]                     muffleCondition(cond, pattern = "^muffle")
[16:04:32.064]                   }
[16:04:32.064]                 }
[16:04:32.064]             }
[16:04:32.064]         }))
[16:04:32.064]     }, error = function(ex) {
[16:04:32.064]         base::structure(base::list(value = NULL, visible = NULL, 
[16:04:32.064]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:04:32.064]                 ...future.rng), started = ...future.startTime, 
[16:04:32.064]             finished = Sys.time(), session_uuid = NA_character_, 
[16:04:32.064]             version = "1.8"), class = "FutureResult")
[16:04:32.064]     }, finally = {
[16:04:32.064]         if (!identical(...future.workdir, getwd())) 
[16:04:32.064]             setwd(...future.workdir)
[16:04:32.064]         {
[16:04:32.064]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:04:32.064]                 ...future.oldOptions$nwarnings <- NULL
[16:04:32.064]             }
[16:04:32.064]             base::options(...future.oldOptions)
[16:04:32.064]             if (.Platform$OS.type == "windows") {
[16:04:32.064]                 old_names <- names(...future.oldEnvVars)
[16:04:32.064]                 envs <- base::Sys.getenv()
[16:04:32.064]                 names <- names(envs)
[16:04:32.064]                 common <- intersect(names, old_names)
[16:04:32.064]                 added <- setdiff(names, old_names)
[16:04:32.064]                 removed <- setdiff(old_names, names)
[16:04:32.064]                 changed <- common[...future.oldEnvVars[common] != 
[16:04:32.064]                   envs[common]]
[16:04:32.064]                 NAMES <- toupper(changed)
[16:04:32.064]                 args <- list()
[16:04:32.064]                 for (kk in seq_along(NAMES)) {
[16:04:32.064]                   name <- changed[[kk]]
[16:04:32.064]                   NAME <- NAMES[[kk]]
[16:04:32.064]                   if (name != NAME && is.element(NAME, old_names)) 
[16:04:32.064]                     next
[16:04:32.064]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:04:32.064]                 }
[16:04:32.064]                 NAMES <- toupper(added)
[16:04:32.064]                 for (kk in seq_along(NAMES)) {
[16:04:32.064]                   name <- added[[kk]]
[16:04:32.064]                   NAME <- NAMES[[kk]]
[16:04:32.064]                   if (name != NAME && is.element(NAME, old_names)) 
[16:04:32.064]                     next
[16:04:32.064]                   args[[name]] <- ""
[16:04:32.064]                 }
[16:04:32.064]                 NAMES <- toupper(removed)
[16:04:32.064]                 for (kk in seq_along(NAMES)) {
[16:04:32.064]                   name <- removed[[kk]]
[16:04:32.064]                   NAME <- NAMES[[kk]]
[16:04:32.064]                   if (name != NAME && is.element(NAME, old_names)) 
[16:04:32.064]                     next
[16:04:32.064]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:04:32.064]                 }
[16:04:32.064]                 if (length(args) > 0) 
[16:04:32.064]                   base::do.call(base::Sys.setenv, args = args)
[16:04:32.064]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:04:32.064]             }
[16:04:32.064]             else {
[16:04:32.064]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:04:32.064]             }
[16:04:32.064]             {
[16:04:32.064]                 if (base::length(...future.futureOptionsAdded) > 
[16:04:32.064]                   0L) {
[16:04:32.064]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:04:32.064]                   base::names(opts) <- ...future.futureOptionsAdded
[16:04:32.064]                   base::options(opts)
[16:04:32.064]                 }
[16:04:32.064]                 {
[16:04:32.064]                   {
[16:04:32.064]                     NULL
[16:04:32.064]                     RNGkind("Mersenne-Twister")
[16:04:32.064]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[16:04:32.064]                       inherits = FALSE)
[16:04:32.064]                   }
[16:04:32.064]                   options(future.plan = NULL)
[16:04:32.064]                   if (is.na(NA_character_)) 
[16:04:32.064]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:04:32.064]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:04:32.064]                   future::plan(list(function (..., envir = parent.frame()) 
[16:04:32.064]                   {
[16:04:32.064]                     future <- SequentialFuture(..., envir = envir)
[16:04:32.064]                     if (!future$lazy) 
[16:04:32.064]                       future <- run(future)
[16:04:32.064]                     invisible(future)
[16:04:32.064]                   }), .cleanup = FALSE, .init = FALSE)
[16:04:32.064]                 }
[16:04:32.064]             }
[16:04:32.064]         }
[16:04:32.064]     })
[16:04:32.064]     if (TRUE) {
[16:04:32.064]         base::sink(type = "output", split = FALSE)
[16:04:32.064]         if (TRUE) {
[16:04:32.064]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:04:32.064]         }
[16:04:32.064]         else {
[16:04:32.064]             ...future.result["stdout"] <- base::list(NULL)
[16:04:32.064]         }
[16:04:32.064]         base::close(...future.stdout)
[16:04:32.064]         ...future.stdout <- NULL
[16:04:32.064]     }
[16:04:32.064]     ...future.result$conditions <- ...future.conditions
[16:04:32.064]     ...future.result$finished <- base::Sys.time()
[16:04:32.064]     ...future.result
[16:04:32.064] }
[16:04:32.102]  - Condition #36: ‘simpleMessage’, ‘message’, ‘condition’
[16:04:32.066] plan(): Setting new future strategy stack:
[16:04:32.102]  - Condition #37: ‘simpleMessage’, ‘message’, ‘condition’
[16:04:32.066] List of future strategies:
[16:04:32.066] 1. sequential:
[16:04:32.066]    - args: function (..., envir = parent.frame())
[16:04:32.066]    - tweaked: FALSE
[16:04:32.066]    - call: NULL
[16:04:32.102]  - Condition #38: ‘simpleMessage’, ‘message’, ‘condition’
[16:04:32.067] plan(): nbrOfWorkers() = 1
[16:04:32.102]  - Condition #39: ‘simpleMessage’, ‘message’, ‘condition’
[16:04:32.068] plan(): Setting new future strategy stack:
[16:04:32.102]  - Condition #40: ‘simpleMessage’, ‘message’, ‘condition’
[16:04:32.068] List of future strategies:
[16:04:32.068] 1. sequential:
[16:04:32.068]    - args: function (..., envir = parent.frame())
[16:04:32.068]    - tweaked: FALSE
[16:04:32.068]    - call: NULL
[16:04:32.102]  - Condition #41: ‘simpleMessage’, ‘message’, ‘condition’
[16:04:32.069] plan(): nbrOfWorkers() = 1
[16:04:32.103]  - Condition #42: ‘simpleMessage’, ‘message’, ‘condition’
[16:04:32.069] SequentialFuture started (and completed)
[16:04:32.103]  - Condition #43: ‘simpleMessage’, ‘message’, ‘condition’
[16:04:32.069] - Launch lazy future ... done
[16:04:32.103]  - Condition #44: ‘simpleMessage’, ‘message’, ‘condition’
[16:04:32.070] run() for ‘SequentialFuture’ ... done
[16:04:32.103]  - Condition #45: ‘simpleMessage’, ‘message’, ‘condition’
[16:04:32.070] getGlobalsAndPackages() ...
[16:04:32.103]  - Condition #46: ‘simpleMessage’, ‘message’, ‘condition’
[16:04:32.070] Searching for globals...
[16:04:32.104]  - Condition #47: ‘simpleMessage’, ‘message’, ‘condition’
[16:04:32.071] 
[16:04:32.104]  - Condition #48: ‘simpleMessage’, ‘message’, ‘condition’
[16:04:32.071] Searching for globals ... DONE
[16:04:32.104]  - Condition #49: ‘simpleMessage’, ‘message’, ‘condition’
[16:04:32.071] - globals: [0] <none>
[16:04:32.104]  - Condition #50: ‘simpleMessage’, ‘message’, ‘condition’
[16:04:32.071] getGlobalsAndPackages() ... DONE
[16:04:32.104]  - Condition #51: ‘simpleMessage’, ‘message’, ‘condition’
[16:04:32.071] run() for ‘Future’ ...
[16:04:32.104]  - Condition #52: ‘simpleMessage’, ‘message’, ‘condition’
[16:04:32.072] - state: ‘created’
[16:04:32.104]  - Condition #53: ‘simpleMessage’, ‘message’, ‘condition’
[16:04:32.072] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[16:04:32.105]  - Condition #54: ‘simpleMessage’, ‘message’, ‘condition’
[16:04:32.072] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[16:04:32.105]  - Condition #55: ‘simpleMessage’, ‘message’, ‘condition’
[16:04:32.072] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[16:04:32.105]  - Condition #56: ‘simpleMessage’, ‘message’, ‘condition’
[16:04:32.073]   - Field: ‘label’
[16:04:32.105]  - Condition #57: ‘simpleMessage’, ‘message’, ‘condition’
[16:04:32.073]   - Field: ‘local’
[16:04:32.105]  - Condition #58: ‘simpleMessage’, ‘message’, ‘condition’
[16:04:32.073]   - Field: ‘owner’
[16:04:32.105]  - Condition #59: ‘simpleMessage’, ‘message’, ‘condition’
[16:04:32.073]   - Field: ‘envir’
[16:04:32.105]  - Condition #60: ‘simpleMessage’, ‘message’, ‘condition’
[16:04:32.073]   - Field: ‘packages’
[16:04:32.106]  - Condition #61: ‘simpleMessage’, ‘message’, ‘condition’
[16:04:32.073]   - Field: ‘gc’
[16:04:32.106]  - Condition #62: ‘simpleMessage’, ‘message’, ‘condition’
[16:04:32.073]   - Field: ‘conditions’
[16:04:32.106]  - Condition #63: ‘simpleMessage’, ‘message’, ‘condition’
[16:04:32.074]   - Field: ‘expr’
[16:04:32.106]  - Condition #64: ‘simpleMessage’, ‘message’, ‘condition’
[16:04:32.074]   - Field: ‘uuid’
[16:04:32.106]  - Condition #65: ‘simpleMessage’, ‘message’, ‘condition’
[16:04:32.074]   - Field: ‘seed’
[16:04:32.106]  - Condition #66: ‘simpleMessage’, ‘message’, ‘condition’
[16:04:32.074]   - Field: ‘version’
[16:04:32.107]  - Condition #67: ‘simpleMessage’, ‘message’, ‘condition’
[16:04:32.074]   - Field: ‘result’
[16:04:32.107]  - Condition #68: ‘simpleMessage’, ‘message’, ‘condition’
[16:04:32.074]   - Field: ‘asynchronous’
[16:04:32.107]  - Condition #69: ‘simpleMessage’, ‘message’, ‘condition’
[16:04:32.075]   - Field: ‘calls’
[16:04:32.107]  - Condition #70: ‘simpleMessage’, ‘message’, ‘condition’
[16:04:32.075]   - Field: ‘globals’
[16:04:32.107]  - Condition #71: ‘simpleMessage’, ‘message’, ‘condition’
[16:04:32.075]   - Field: ‘stdout’
[16:04:32.107]  - Condition #72: ‘simpleMessage’, ‘message’, ‘condition’
[16:04:32.075]   - Field: ‘earlySignal’
[16:04:32.108]  - Condition #73: ‘simpleMessage’, ‘message’, ‘condition’
[16:04:32.075]   - Field: ‘lazy’
[16:04:32.108]  - Condition #74: ‘simpleMessage’, ‘message’, ‘condition’
[16:04:32.075]   - Field: ‘state’
[16:04:32.108]  - Condition #75: ‘simpleMessage’, ‘message’, ‘condition’
[16:04:32.075] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[16:04:32.108]  - Condition #76: ‘simpleMessage’, ‘message’, ‘condition’
[16:04:32.076] - Launch lazy future ...
[16:04:32.108]  - Condition #77: ‘simpleMessage’, ‘message’, ‘condition’
[16:04:32.076] Packages needed by the future expression (n = 0): <none>
[16:04:32.108]  - Condition #78: ‘simpleMessage’, ‘message’, ‘condition’
[16:04:32.076] Packages needed by future strategies (n = 0): <none>
[16:04:32.108]  - Condition #79: ‘simpleMessage’, ‘message’, ‘condition’
[16:04:32.077] {
[16:04:32.077]     {
[16:04:32.077]         {
[16:04:32.077]             ...future.startTime <- base::Sys.time()
[16:04:32.077]             {
[16:04:32.077]                 {
[16:04:32.077]                   {
[16:04:32.077]                     base::local({
[16:04:32.077]                       has_future <- base::requireNamespace("future", 
[16:04:32.077]                         quietly = TRUE)
[16:04:32.077]                       if (has_future) {
[16:04:32.077]                         ns <- base::getNamespace("future")
[16:04:32.077]                         version <- ns[[".package"]][["version"]]
[16:04:32.077]                         if (is.null(version)) 
[16:04:32.077]                           version <- utils::packageVersion("future")
[16:04:32.077]                       }
[16:04:32.077]                       else {
[16:04:32.077]                         version <- NULL
[16:04:32.077]                       }
[16:04:32.077]                       if (!has_future || version < "1.8.0") {
[16:04:32.077]                         info <- base::c(r_version = base::gsub("R version ", 
[16:04:32.077]                           "", base::R.version$version.string), 
[16:04:32.077]                           platform = base::sprintf("%s (%s-bit)", 
[16:04:32.077]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:04:32.077]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[16:04:32.077]                             "release", "version")], collapse = " "), 
[16:04:32.077]                           hostname = base::Sys.info()[["nodename"]])
[16:04:32.077]                         info <- base::sprintf("%s: %s", base::names(info), 
[16:04:32.077]                           info)
[16:04:32.077]                         info <- base::paste(info, collapse = "; ")
[16:04:32.077]                         if (!has_future) {
[16:04:32.077]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:04:32.077]                             info)
[16:04:32.077]                         }
[16:04:32.077]                         else {
[16:04:32.077]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:04:32.077]                             info, version)
[16:04:32.077]                         }
[16:04:32.077]                         base::stop(msg)
[16:04:32.077]                       }
[16:04:32.077]                     })
[16:04:32.077]                   }
[16:04:32.077]                   options(future.plan = NULL)
[16:04:32.077]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:04:32.077]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:04:32.077]                 }
[16:04:32.077]                 ...future.workdir <- getwd()
[16:04:32.077]             }
[16:04:32.077]             ...future.oldOptions <- base::as.list(base::.Options)
[16:04:32.077]             ...future.oldEnvVars <- base::Sys.getenv()
[16:04:32.077]         }
[16:04:32.077]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:04:32.077]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:04:32.077]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:04:32.077]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:04:32.077]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:04:32.077]             future.stdout.windows.reencode = NULL, width = 80L)
[16:04:32.077]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:04:32.077]             base::names(...future.oldOptions))
[16:04:32.077]     }
[16:04:32.077]     if (FALSE) {
[16:04:32.077]     }
[16:04:32.077]     else {
[16:04:32.077]         if (TRUE) {
[16:04:32.077]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:04:32.077]                 open = "w")
[16:04:32.077]         }
[16:04:32.077]         else {
[16:04:32.077]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:04:32.077]                 windows = "NUL", "/dev/null"), open = "w")
[16:04:32.077]         }
[16:04:32.077]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:04:32.077]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:04:32.077]             base::sink(type = "output", split = FALSE)
[16:04:32.077]             base::close(...future.stdout)
[16:04:32.077]         }, add = TRUE)
[16:04:32.077]     }
[16:04:32.077]     ...future.frame <- base::sys.nframe()
[16:04:32.077]     ...future.conditions <- base::list()
[16:04:32.077]     ...future.rng <- base::globalenv()$.Random.seed
[16:04:32.077]     if (FALSE) {
[16:04:32.077]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:04:32.077]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:04:32.077]     }
[16:04:32.077]     ...future.result <- base::tryCatch({
[16:04:32.077]         base::withCallingHandlers({
[16:04:32.077]             ...future.value <- base::withVisible(base::local(4))
[16:04:32.077]             future::FutureResult(value = ...future.value$value, 
[16:04:32.077]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:04:32.077]                   ...future.rng), globalenv = if (FALSE) 
[16:04:32.077]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:04:32.077]                     ...future.globalenv.names))
[16:04:32.077]                 else NULL, started = ...future.startTime, version = "1.8")
[16:04:32.077]         }, condition = base::local({
[16:04:32.077]             c <- base::c
[16:04:32.077]             inherits <- base::inherits
[16:04:32.077]             invokeRestart <- base::invokeRestart
[16:04:32.077]             length <- base::length
[16:04:32.077]             list <- base::list
[16:04:32.077]             seq.int <- base::seq.int
[16:04:32.077]             signalCondition <- base::signalCondition
[16:04:32.077]             sys.calls <- base::sys.calls
[16:04:32.077]             `[[` <- base::`[[`
[16:04:32.077]             `+` <- base::`+`
[16:04:32.077]             `<<-` <- base::`<<-`
[16:04:32.077]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:04:32.077]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:04:32.077]                   3L)]
[16:04:32.077]             }
[16:04:32.077]             function(cond) {
[16:04:32.077]                 is_error <- inherits(cond, "error")
[16:04:32.077]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:04:32.077]                   NULL)
[16:04:32.077]                 if (is_error) {
[16:04:32.077]                   sessionInformation <- function() {
[16:04:32.077]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:04:32.077]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:04:32.077]                       search = base::search(), system = base::Sys.info())
[16:04:32.077]                   }
[16:04:32.077]                   ...future.conditions[[length(...future.conditions) + 
[16:04:32.077]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:04:32.077]                     cond$call), session = sessionInformation(), 
[16:04:32.077]                     timestamp = base::Sys.time(), signaled = 0L)
[16:04:32.077]                   signalCondition(cond)
[16:04:32.077]                 }
[16:04:32.077]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:04:32.077]                 "immediateCondition"))) {
[16:04:32.077]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:04:32.077]                   ...future.conditions[[length(...future.conditions) + 
[16:04:32.077]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:04:32.077]                   if (TRUE && !signal) {
[16:04:32.077]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:04:32.077]                     {
[16:04:32.077]                       inherits <- base::inherits
[16:04:32.077]                       invokeRestart <- base::invokeRestart
[16:04:32.077]                       is.null <- base::is.null
[16:04:32.077]                       muffled <- FALSE
[16:04:32.077]                       if (inherits(cond, "message")) {
[16:04:32.077]                         muffled <- grepl(pattern, "muffleMessage")
[16:04:32.077]                         if (muffled) 
[16:04:32.077]                           invokeRestart("muffleMessage")
[16:04:32.077]                       }
[16:04:32.077]                       else if (inherits(cond, "warning")) {
[16:04:32.077]                         muffled <- grepl(pattern, "muffleWarning")
[16:04:32.077]                         if (muffled) 
[16:04:32.077]                           invokeRestart("muffleWarning")
[16:04:32.077]                       }
[16:04:32.077]                       else if (inherits(cond, "condition")) {
[16:04:32.077]                         if (!is.null(pattern)) {
[16:04:32.077]                           computeRestarts <- base::computeRestarts
[16:04:32.077]                           grepl <- base::grepl
[16:04:32.077]                           restarts <- computeRestarts(cond)
[16:04:32.077]                           for (restart in restarts) {
[16:04:32.077]                             name <- restart$name
[16:04:32.077]                             if (is.null(name)) 
[16:04:32.077]                               next
[16:04:32.077]                             if (!grepl(pattern, name)) 
[16:04:32.077]                               next
[16:04:32.077]                             invokeRestart(restart)
[16:04:32.077]                             muffled <- TRUE
[16:04:32.077]                             break
[16:04:32.077]                           }
[16:04:32.077]                         }
[16:04:32.077]                       }
[16:04:32.077]                       invisible(muffled)
[16:04:32.077]                     }
[16:04:32.077]                     muffleCondition(cond, pattern = "^muffle")
[16:04:32.077]                   }
[16:04:32.077]                 }
[16:04:32.077]                 else {
[16:04:32.077]                   if (TRUE) {
[16:04:32.077]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:04:32.077]                     {
[16:04:32.077]                       inherits <- base::inherits
[16:04:32.077]                       invokeRestart <- base::invokeRestart
[16:04:32.077]                       is.null <- base::is.null
[16:04:32.077]                       muffled <- FALSE
[16:04:32.077]                       if (inherits(cond, "message")) {
[16:04:32.077]                         muffled <- grepl(pattern, "muffleMessage")
[16:04:32.077]                         if (muffled) 
[16:04:32.077]                           invokeRestart("muffleMessage")
[16:04:32.077]                       }
[16:04:32.077]                       else if (inherits(cond, "warning")) {
[16:04:32.077]                         muffled <- grepl(pattern, "muffleWarning")
[16:04:32.077]                         if (muffled) 
[16:04:32.077]                           invokeRestart("muffleWarning")
[16:04:32.077]                       }
[16:04:32.077]                       else if (inherits(cond, "condition")) {
[16:04:32.077]                         if (!is.null(pattern)) {
[16:04:32.077]                           computeRestarts <- base::computeRestarts
[16:04:32.077]                           grepl <- base::grepl
[16:04:32.077]                           restarts <- computeRestarts(cond)
[16:04:32.077]                           for (restart in restarts) {
[16:04:32.077]                             name <- restart$name
[16:04:32.077]                             if (is.null(name)) 
[16:04:32.077]                               next
[16:04:32.077]                             if (!grepl(pattern, name)) 
[16:04:32.077]                               next
[16:04:32.077]                             invokeRestart(restart)
[16:04:32.077]                             muffled <- TRUE
[16:04:32.077]                             break
[16:04:32.077]                           }
[16:04:32.077]                         }
[16:04:32.077]                       }
[16:04:32.077]                       invisible(muffled)
[16:04:32.077]                     }
[16:04:32.077]                     muffleCondition(cond, pattern = "^muffle")
[16:04:32.077]                   }
[16:04:32.077]                 }
[16:04:32.077]             }
[16:04:32.077]         }))
[16:04:32.077]     }, error = function(ex) {
[16:04:32.077]         base::structure(base::list(value = NULL, visible = NULL, 
[16:04:32.077]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:04:32.077]                 ...future.rng), started = ...future.startTime, 
[16:04:32.077]             finished = Sys.time(), session_uuid = NA_character_, 
[16:04:32.077]             version = "1.8"), class = "FutureResult")
[16:04:32.077]     }, finally = {
[16:04:32.077]         if (!identical(...future.workdir, getwd())) 
[16:04:32.077]             setwd(...future.workdir)
[16:04:32.077]         {
[16:04:32.077]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:04:32.077]                 ...future.oldOptions$nwarnings <- NULL
[16:04:32.077]             }
[16:04:32.077]             base::options(...future.oldOptions)
[16:04:32.077]             if (.Platform$OS.type == "windows") {
[16:04:32.077]                 old_names <- names(...future.oldEnvVars)
[16:04:32.077]                 envs <- base::Sys.getenv()
[16:04:32.077]                 names <- names(envs)
[16:04:32.077]                 common <- intersect(names, old_names)
[16:04:32.077]                 added <- setdiff(names, old_names)
[16:04:32.077]                 removed <- setdiff(old_names, names)
[16:04:32.077]                 changed <- common[...future.oldEnvVars[common] != 
[16:04:32.077]                   envs[common]]
[16:04:32.077]                 NAMES <- toupper(changed)
[16:04:32.077]                 args <- list()
[16:04:32.077]                 for (kk in seq_along(NAMES)) {
[16:04:32.077]                   name <- changed[[kk]]
[16:04:32.077]                   NAME <- NAMES[[kk]]
[16:04:32.077]                   if (name != NAME && is.element(NAME, old_names)) 
[16:04:32.077]                     next
[16:04:32.077]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:04:32.077]                 }
[16:04:32.077]                 NAMES <- toupper(added)
[16:04:32.077]                 for (kk in seq_along(NAMES)) {
[16:04:32.077]                   name <- added[[kk]]
[16:04:32.077]                   NAME <- NAMES[[kk]]
[16:04:32.077]                   if (name != NAME && is.element(NAME, old_names)) 
[16:04:32.077]                     next
[16:04:32.077]                   args[[name]] <- ""
[16:04:32.077]                 }
[16:04:32.077]                 NAMES <- toupper(removed)
[16:04:32.077]                 for (kk in seq_along(NAMES)) {
[16:04:32.077]                   name <- removed[[kk]]
[16:04:32.077]                   NAME <- NAMES[[kk]]
[16:04:32.077]                   if (name != NAME && is.element(NAME, old_names)) 
[16:04:32.077]                     next
[16:04:32.077]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:04:32.077]                 }
[16:04:32.077]                 if (length(args) > 0) 
[16:04:32.077]                   base::do.call(base::Sys.setenv, args = args)
[16:04:32.077]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:04:32.077]             }
[16:04:32.077]             else {
[16:04:32.077]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:04:32.077]             }
[16:04:32.077]             {
[16:04:32.077]                 if (base::length(...future.futureOptionsAdded) > 
[16:04:32.077]                   0L) {
[16:04:32.077]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:04:32.077]                   base::names(opts) <- ...future.futureOptionsAdded
[16:04:32.077]                   base::options(opts)
[16:04:32.077]                 }
[16:04:32.077]                 {
[16:04:32.077]                   {
[16:04:32.077]                     NULL
[16:04:32.077]                     RNGkind("Mersenne-Twister")
[16:04:32.077]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[16:04:32.077]                       inherits = FALSE)
[16:04:32.077]                   }
[16:04:32.077]                   options(future.plan = NULL)
[16:04:32.077]                   if (is.na(NA_character_)) 
[16:04:32.077]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:04:32.077]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:04:32.077]                   future::plan(list(function (..., envir = parent.frame()) 
[16:04:32.077]                   {
[16:04:32.077]                     future <- SequentialFuture(..., envir = envir)
[16:04:32.077]                     if (!future$lazy) 
[16:04:32.077]                       future <- run(future)
[16:04:32.077]                     invisible(future)
[16:04:32.077]                   }), .cleanup = FALSE, .init = FALSE)
[16:04:32.077]                 }
[16:04:32.077]             }
[16:04:32.077]         }
[16:04:32.077]     })
[16:04:32.077]     if (TRUE) {
[16:04:32.077]         base::sink(type = "output", split = FALSE)
[16:04:32.077]         if (TRUE) {
[16:04:32.077]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:04:32.077]         }
[16:04:32.077]         else {
[16:04:32.077]             ...future.result["stdout"] <- base::list(NULL)
[16:04:32.077]         }
[16:04:32.077]         base::close(...future.stdout)
[16:04:32.077]         ...future.stdout <- NULL
[16:04:32.077]     }
[16:04:32.077]     ...future.result$conditions <- ...future.conditions
[16:04:32.077]     ...future.result$finished <- base::Sys.time()
[16:04:32.077]     ...future.result
[16:04:32.077] }
[16:04:32.109]  - Condition #80: ‘simpleMessage’, ‘message’, ‘condition’
[16:04:32.079] plan(): Setting new future strategy stack:
[16:04:32.109]  - Condition #81: ‘simpleMessage’, ‘message’, ‘condition’
[16:04:32.079] List of future strategies:
[16:04:32.079] 1. sequential:
[16:04:32.079]    - args: function (..., envir = parent.frame())
[16:04:32.079]    - tweaked: FALSE
[16:04:32.079]    - call: NULL
[16:04:32.109]  - Condition #82: ‘simpleMessage’, ‘message’, ‘condition’
[16:04:32.079] plan(): nbrOfWorkers() = 1
[16:04:32.109]  - Condition #83: ‘simpleMessage’, ‘message’, ‘condition’
[16:04:32.080] plan(): Setting new future strategy stack:
[16:04:32.109]  - Condition #84: ‘simpleMessage’, ‘message’, ‘condition’
[16:04:32.081] List of future strategies:
[16:04:32.081] 1. sequential:
[16:04:32.081]    - args: function (..., envir = parent.frame())
[16:04:32.081]    - tweaked: FALSE
[16:04:32.081]    - call: NULL
[16:04:32.112]  - Condition #85: ‘simpleMessage’, ‘message’, ‘condition’
[16:04:32.081] plan(): nbrOfWorkers() = 1
[16:04:32.112]  - Condition #86: ‘simpleMessage’, ‘message’, ‘condition’
[16:04:32.081] SequentialFuture started (and completed)
[16:04:32.112]  - Condition #87: ‘simpleMessage’, ‘message’, ‘condition’
[16:04:32.085] - Launch lazy future ... done
[16:04:32.112]  - Condition #88: ‘simpleMessage’, ‘message’, ‘condition’
[16:04:32.085] run() for ‘SequentialFuture’ ... done
[16:04:32.112] signalConditions() ... done
a = 10
[16:04:32.113] getGlobalsAndPackages() ...
[16:04:32.113] Searching for globals...
[16:04:32.114] - globals found: [3] ‘{’, ‘+’, ‘a’
[16:04:32.115] Searching for globals ... DONE
[16:04:32.115] Resolving globals: FALSE
[16:04:32.115] The total size of the 1 globals is 56 bytes (56 bytes)
[16:04:32.116] The total size of the 1 globals exported for future expression (‘{; a + 1; }’) is 56 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘a’ (56 bytes of class ‘numeric’)
[16:04:32.116] - globals: [1] ‘a’
[16:04:32.116] 
[16:04:32.116] getGlobalsAndPackages() ... DONE
[16:04:32.116] run() for ‘Future’ ...
[16:04:32.116] - state: ‘created’
[16:04:32.116] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[16:04:32.120] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[16:04:32.121] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[16:04:32.121]   - Field: ‘label’
[16:04:32.121]   - Field: ‘local’
[16:04:32.121]   - Field: ‘owner’
[16:04:32.121]   - Field: ‘envir’
[16:04:32.121]   - Field: ‘workers’
[16:04:32.121]   - Field: ‘packages’
[16:04:32.121]   - Field: ‘gc’
[16:04:32.121]   - Field: ‘job’
[16:04:32.121]   - Field: ‘conditions’
[16:04:32.121]   - Field: ‘expr’
[16:04:32.122]   - Field: ‘uuid’
[16:04:32.122]   - Field: ‘seed’
[16:04:32.122]   - Field: ‘version’
[16:04:32.122]   - Field: ‘result’
[16:04:32.122]   - Field: ‘asynchronous’
[16:04:32.122]   - Field: ‘calls’
[16:04:32.122]   - Field: ‘globals’
[16:04:32.122]   - Field: ‘stdout’
[16:04:32.122]   - Field: ‘earlySignal’
[16:04:32.122]   - Field: ‘lazy’
[16:04:32.123]   - Field: ‘state’
[16:04:32.123] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[16:04:32.123] - Launch lazy future ...
[16:04:32.123] Packages needed by the future expression (n = 0): <none>
[16:04:32.123] Packages needed by future strategies (n = 0): <none>
[16:04:32.124] {
[16:04:32.124]     {
[16:04:32.124]         {
[16:04:32.124]             ...future.startTime <- base::Sys.time()
[16:04:32.124]             {
[16:04:32.124]                 {
[16:04:32.124]                   {
[16:04:32.124]                     {
[16:04:32.124]                       base::local({
[16:04:32.124]                         has_future <- base::requireNamespace("future", 
[16:04:32.124]                           quietly = TRUE)
[16:04:32.124]                         if (has_future) {
[16:04:32.124]                           ns <- base::getNamespace("future")
[16:04:32.124]                           version <- ns[[".package"]][["version"]]
[16:04:32.124]                           if (is.null(version)) 
[16:04:32.124]                             version <- utils::packageVersion("future")
[16:04:32.124]                         }
[16:04:32.124]                         else {
[16:04:32.124]                           version <- NULL
[16:04:32.124]                         }
[16:04:32.124]                         if (!has_future || version < "1.8.0") {
[16:04:32.124]                           info <- base::c(r_version = base::gsub("R version ", 
[16:04:32.124]                             "", base::R.version$version.string), 
[16:04:32.124]                             platform = base::sprintf("%s (%s-bit)", 
[16:04:32.124]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:04:32.124]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[16:04:32.124]                               "release", "version")], collapse = " "), 
[16:04:32.124]                             hostname = base::Sys.info()[["nodename"]])
[16:04:32.124]                           info <- base::sprintf("%s: %s", base::names(info), 
[16:04:32.124]                             info)
[16:04:32.124]                           info <- base::paste(info, collapse = "; ")
[16:04:32.124]                           if (!has_future) {
[16:04:32.124]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:04:32.124]                               info)
[16:04:32.124]                           }
[16:04:32.124]                           else {
[16:04:32.124]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:04:32.124]                               info, version)
[16:04:32.124]                           }
[16:04:32.124]                           base::stop(msg)
[16:04:32.124]                         }
[16:04:32.124]                       })
[16:04:32.124]                     }
[16:04:32.124]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[16:04:32.124]                     base::options(mc.cores = 1L)
[16:04:32.124]                   }
[16:04:32.124]                   options(future.plan = NULL)
[16:04:32.124]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:04:32.124]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:04:32.124]                 }
[16:04:32.124]                 ...future.workdir <- getwd()
[16:04:32.124]             }
[16:04:32.124]             ...future.oldOptions <- base::as.list(base::.Options)
[16:04:32.124]             ...future.oldEnvVars <- base::Sys.getenv()
[16:04:32.124]         }
[16:04:32.124]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:04:32.124]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:04:32.124]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:04:32.124]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:04:32.124]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:04:32.124]             future.stdout.windows.reencode = NULL, width = 80L)
[16:04:32.124]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:04:32.124]             base::names(...future.oldOptions))
[16:04:32.124]     }
[16:04:32.124]     if (FALSE) {
[16:04:32.124]     }
[16:04:32.124]     else {
[16:04:32.124]         if (TRUE) {
[16:04:32.124]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:04:32.124]                 open = "w")
[16:04:32.124]         }
[16:04:32.124]         else {
[16:04:32.124]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:04:32.124]                 windows = "NUL", "/dev/null"), open = "w")
[16:04:32.124]         }
[16:04:32.124]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:04:32.124]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:04:32.124]             base::sink(type = "output", split = FALSE)
[16:04:32.124]             base::close(...future.stdout)
[16:04:32.124]         }, add = TRUE)
[16:04:32.124]     }
[16:04:32.124]     ...future.frame <- base::sys.nframe()
[16:04:32.124]     ...future.conditions <- base::list()
[16:04:32.124]     ...future.rng <- base::globalenv()$.Random.seed
[16:04:32.124]     if (FALSE) {
[16:04:32.124]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:04:32.124]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:04:32.124]     }
[16:04:32.124]     ...future.result <- base::tryCatch({
[16:04:32.124]         base::withCallingHandlers({
[16:04:32.124]             ...future.value <- base::withVisible(base::local({
[16:04:32.124]                 withCallingHandlers({
[16:04:32.124]                   {
[16:04:32.124]                     a + 1
[16:04:32.124]                   }
[16:04:32.124]                 }, immediateCondition = function(cond) {
[16:04:32.124]                   save_rds <- function (object, pathname, ...) 
[16:04:32.124]                   {
[16:04:32.124]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[16:04:32.124]                     if (file_test("-f", pathname_tmp)) {
[16:04:32.124]                       fi_tmp <- file.info(pathname_tmp)
[16:04:32.124]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[16:04:32.124]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:04:32.124]                         fi_tmp[["mtime"]])
[16:04:32.124]                     }
[16:04:32.124]                     tryCatch({
[16:04:32.124]                       saveRDS(object, file = pathname_tmp, ...)
[16:04:32.124]                     }, error = function(ex) {
[16:04:32.124]                       msg <- conditionMessage(ex)
[16:04:32.124]                       fi_tmp <- file.info(pathname_tmp)
[16:04:32.124]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[16:04:32.124]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:04:32.124]                         fi_tmp[["mtime"]], msg)
[16:04:32.124]                       ex$message <- msg
[16:04:32.124]                       stop(ex)
[16:04:32.124]                     })
[16:04:32.124]                     stopifnot(file_test("-f", pathname_tmp))
[16:04:32.124]                     res <- file.rename(from = pathname_tmp, to = pathname)
[16:04:32.124]                     if (!res || file_test("-f", pathname_tmp)) {
[16:04:32.124]                       fi_tmp <- file.info(pathname_tmp)
[16:04:32.124]                       fi <- file.info(pathname)
[16:04:32.124]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[16:04:32.124]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:04:32.124]                         fi_tmp[["mtime"]], sQuote(pathname), 
[16:04:32.124]                         fi[["size"]], fi[["mtime"]])
[16:04:32.124]                       stop(msg)
[16:04:32.124]                     }
[16:04:32.124]                     invisible(pathname)
[16:04:32.124]                   }
[16:04:32.124]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[16:04:32.124]                     rootPath = tempdir()) 
[16:04:32.124]                   {
[16:04:32.124]                     obj <- list(time = Sys.time(), condition = cond)
[16:04:32.124]                     file <- tempfile(pattern = class(cond)[1], 
[16:04:32.124]                       tmpdir = path, fileext = ".rds")
[16:04:32.124]                     save_rds(obj, file)
[16:04:32.124]                   }
[16:04:32.124]                   saveImmediateCondition(cond, path = "/tmp/Rtmpe612Wd/.future/immediateConditions")
[16:04:32.124]                   muffleCondition <- function (cond, pattern = "^muffle") 
[16:04:32.124]                   {
[16:04:32.124]                     inherits <- base::inherits
[16:04:32.124]                     invokeRestart <- base::invokeRestart
[16:04:32.124]                     is.null <- base::is.null
[16:04:32.124]                     muffled <- FALSE
[16:04:32.124]                     if (inherits(cond, "message")) {
[16:04:32.124]                       muffled <- grepl(pattern, "muffleMessage")
[16:04:32.124]                       if (muffled) 
[16:04:32.124]                         invokeRestart("muffleMessage")
[16:04:32.124]                     }
[16:04:32.124]                     else if (inherits(cond, "warning")) {
[16:04:32.124]                       muffled <- grepl(pattern, "muffleWarning")
[16:04:32.124]                       if (muffled) 
[16:04:32.124]                         invokeRestart("muffleWarning")
[16:04:32.124]                     }
[16:04:32.124]                     else if (inherits(cond, "condition")) {
[16:04:32.124]                       if (!is.null(pattern)) {
[16:04:32.124]                         computeRestarts <- base::computeRestarts
[16:04:32.124]                         grepl <- base::grepl
[16:04:32.124]                         restarts <- computeRestarts(cond)
[16:04:32.124]                         for (restart in restarts) {
[16:04:32.124]                           name <- restart$name
[16:04:32.124]                           if (is.null(name)) 
[16:04:32.124]                             next
[16:04:32.124]                           if (!grepl(pattern, name)) 
[16:04:32.124]                             next
[16:04:32.124]                           invokeRestart(restart)
[16:04:32.124]                           muffled <- TRUE
[16:04:32.124]                           break
[16:04:32.124]                         }
[16:04:32.124]                       }
[16:04:32.124]                     }
[16:04:32.124]                     invisible(muffled)
[16:04:32.124]                   }
[16:04:32.124]                   muffleCondition(cond)
[16:04:32.124]                 })
[16:04:32.124]             }))
[16:04:32.124]             future::FutureResult(value = ...future.value$value, 
[16:04:32.124]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:04:32.124]                   ...future.rng), globalenv = if (FALSE) 
[16:04:32.124]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:04:32.124]                     ...future.globalenv.names))
[16:04:32.124]                 else NULL, started = ...future.startTime, version = "1.8")
[16:04:32.124]         }, condition = base::local({
[16:04:32.124]             c <- base::c
[16:04:32.124]             inherits <- base::inherits
[16:04:32.124]             invokeRestart <- base::invokeRestart
[16:04:32.124]             length <- base::length
[16:04:32.124]             list <- base::list
[16:04:32.124]             seq.int <- base::seq.int
[16:04:32.124]             signalCondition <- base::signalCondition
[16:04:32.124]             sys.calls <- base::sys.calls
[16:04:32.124]             `[[` <- base::`[[`
[16:04:32.124]             `+` <- base::`+`
[16:04:32.124]             `<<-` <- base::`<<-`
[16:04:32.124]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:04:32.124]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:04:32.124]                   3L)]
[16:04:32.124]             }
[16:04:32.124]             function(cond) {
[16:04:32.124]                 is_error <- inherits(cond, "error")
[16:04:32.124]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:04:32.124]                   NULL)
[16:04:32.124]                 if (is_error) {
[16:04:32.124]                   sessionInformation <- function() {
[16:04:32.124]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:04:32.124]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:04:32.124]                       search = base::search(), system = base::Sys.info())
[16:04:32.124]                   }
[16:04:32.124]                   ...future.conditions[[length(...future.conditions) + 
[16:04:32.124]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:04:32.124]                     cond$call), session = sessionInformation(), 
[16:04:32.124]                     timestamp = base::Sys.time(), signaled = 0L)
[16:04:32.124]                   signalCondition(cond)
[16:04:32.124]                 }
[16:04:32.124]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:04:32.124]                 "immediateCondition"))) {
[16:04:32.124]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:04:32.124]                   ...future.conditions[[length(...future.conditions) + 
[16:04:32.124]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:04:32.124]                   if (TRUE && !signal) {
[16:04:32.124]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:04:32.124]                     {
[16:04:32.124]                       inherits <- base::inherits
[16:04:32.124]                       invokeRestart <- base::invokeRestart
[16:04:32.124]                       is.null <- base::is.null
[16:04:32.124]                       muffled <- FALSE
[16:04:32.124]                       if (inherits(cond, "message")) {
[16:04:32.124]                         muffled <- grepl(pattern, "muffleMessage")
[16:04:32.124]                         if (muffled) 
[16:04:32.124]                           invokeRestart("muffleMessage")
[16:04:32.124]                       }
[16:04:32.124]                       else if (inherits(cond, "warning")) {
[16:04:32.124]                         muffled <- grepl(pattern, "muffleWarning")
[16:04:32.124]                         if (muffled) 
[16:04:32.124]                           invokeRestart("muffleWarning")
[16:04:32.124]                       }
[16:04:32.124]                       else if (inherits(cond, "condition")) {
[16:04:32.124]                         if (!is.null(pattern)) {
[16:04:32.124]                           computeRestarts <- base::computeRestarts
[16:04:32.124]                           grepl <- base::grepl
[16:04:32.124]                           restarts <- computeRestarts(cond)
[16:04:32.124]                           for (restart in restarts) {
[16:04:32.124]                             name <- restart$name
[16:04:32.124]                             if (is.null(name)) 
[16:04:32.124]                               next
[16:04:32.124]                             if (!grepl(pattern, name)) 
[16:04:32.124]                               next
[16:04:32.124]                             invokeRestart(restart)
[16:04:32.124]                             muffled <- TRUE
[16:04:32.124]                             break
[16:04:32.124]                           }
[16:04:32.124]                         }
[16:04:32.124]                       }
[16:04:32.124]                       invisible(muffled)
[16:04:32.124]                     }
[16:04:32.124]                     muffleCondition(cond, pattern = "^muffle")
[16:04:32.124]                   }
[16:04:32.124]                 }
[16:04:32.124]                 else {
[16:04:32.124]                   if (TRUE) {
[16:04:32.124]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:04:32.124]                     {
[16:04:32.124]                       inherits <- base::inherits
[16:04:32.124]                       invokeRestart <- base::invokeRestart
[16:04:32.124]                       is.null <- base::is.null
[16:04:32.124]                       muffled <- FALSE
[16:04:32.124]                       if (inherits(cond, "message")) {
[16:04:32.124]                         muffled <- grepl(pattern, "muffleMessage")
[16:04:32.124]                         if (muffled) 
[16:04:32.124]                           invokeRestart("muffleMessage")
[16:04:32.124]                       }
[16:04:32.124]                       else if (inherits(cond, "warning")) {
[16:04:32.124]                         muffled <- grepl(pattern, "muffleWarning")
[16:04:32.124]                         if (muffled) 
[16:04:32.124]                           invokeRestart("muffleWarning")
[16:04:32.124]                       }
[16:04:32.124]                       else if (inherits(cond, "condition")) {
[16:04:32.124]                         if (!is.null(pattern)) {
[16:04:32.124]                           computeRestarts <- base::computeRestarts
[16:04:32.124]                           grepl <- base::grepl
[16:04:32.124]                           restarts <- computeRestarts(cond)
[16:04:32.124]                           for (restart in restarts) {
[16:04:32.124]                             name <- restart$name
[16:04:32.124]                             if (is.null(name)) 
[16:04:32.124]                               next
[16:04:32.124]                             if (!grepl(pattern, name)) 
[16:04:32.124]                               next
[16:04:32.124]                             invokeRestart(restart)
[16:04:32.124]                             muffled <- TRUE
[16:04:32.124]                             break
[16:04:32.124]                           }
[16:04:32.124]                         }
[16:04:32.124]                       }
[16:04:32.124]                       invisible(muffled)
[16:04:32.124]                     }
[16:04:32.124]                     muffleCondition(cond, pattern = "^muffle")
[16:04:32.124]                   }
[16:04:32.124]                 }
[16:04:32.124]             }
[16:04:32.124]         }))
[16:04:32.124]     }, error = function(ex) {
[16:04:32.124]         base::structure(base::list(value = NULL, visible = NULL, 
[16:04:32.124]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:04:32.124]                 ...future.rng), started = ...future.startTime, 
[16:04:32.124]             finished = Sys.time(), session_uuid = NA_character_, 
[16:04:32.124]             version = "1.8"), class = "FutureResult")
[16:04:32.124]     }, finally = {
[16:04:32.124]         if (!identical(...future.workdir, getwd())) 
[16:04:32.124]             setwd(...future.workdir)
[16:04:32.124]         {
[16:04:32.124]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:04:32.124]                 ...future.oldOptions$nwarnings <- NULL
[16:04:32.124]             }
[16:04:32.124]             base::options(...future.oldOptions)
[16:04:32.124]             if (.Platform$OS.type == "windows") {
[16:04:32.124]                 old_names <- names(...future.oldEnvVars)
[16:04:32.124]                 envs <- base::Sys.getenv()
[16:04:32.124]                 names <- names(envs)
[16:04:32.124]                 common <- intersect(names, old_names)
[16:04:32.124]                 added <- setdiff(names, old_names)
[16:04:32.124]                 removed <- setdiff(old_names, names)
[16:04:32.124]                 changed <- common[...future.oldEnvVars[common] != 
[16:04:32.124]                   envs[common]]
[16:04:32.124]                 NAMES <- toupper(changed)
[16:04:32.124]                 args <- list()
[16:04:32.124]                 for (kk in seq_along(NAMES)) {
[16:04:32.124]                   name <- changed[[kk]]
[16:04:32.124]                   NAME <- NAMES[[kk]]
[16:04:32.124]                   if (name != NAME && is.element(NAME, old_names)) 
[16:04:32.124]                     next
[16:04:32.124]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:04:32.124]                 }
[16:04:32.124]                 NAMES <- toupper(added)
[16:04:32.124]                 for (kk in seq_along(NAMES)) {
[16:04:32.124]                   name <- added[[kk]]
[16:04:32.124]                   NAME <- NAMES[[kk]]
[16:04:32.124]                   if (name != NAME && is.element(NAME, old_names)) 
[16:04:32.124]                     next
[16:04:32.124]                   args[[name]] <- ""
[16:04:32.124]                 }
[16:04:32.124]                 NAMES <- toupper(removed)
[16:04:32.124]                 for (kk in seq_along(NAMES)) {
[16:04:32.124]                   name <- removed[[kk]]
[16:04:32.124]                   NAME <- NAMES[[kk]]
[16:04:32.124]                   if (name != NAME && is.element(NAME, old_names)) 
[16:04:32.124]                     next
[16:04:32.124]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:04:32.124]                 }
[16:04:32.124]                 if (length(args) > 0) 
[16:04:32.124]                   base::do.call(base::Sys.setenv, args = args)
[16:04:32.124]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:04:32.124]             }
[16:04:32.124]             else {
[16:04:32.124]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:04:32.124]             }
[16:04:32.124]             {
[16:04:32.124]                 if (base::length(...future.futureOptionsAdded) > 
[16:04:32.124]                   0L) {
[16:04:32.124]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:04:32.124]                   base::names(opts) <- ...future.futureOptionsAdded
[16:04:32.124]                   base::options(opts)
[16:04:32.124]                 }
[16:04:32.124]                 {
[16:04:32.124]                   {
[16:04:32.124]                     base::options(mc.cores = ...future.mc.cores.old)
[16:04:32.124]                     NULL
[16:04:32.124]                   }
[16:04:32.124]                   options(future.plan = NULL)
[16:04:32.124]                   if (is.na(NA_character_)) 
[16:04:32.124]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:04:32.124]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:04:32.124]                   future::plan(list(function (..., workers = availableCores(constraints = "multicore"), 
[16:04:32.124]                     envir = parent.frame()) 
[16:04:32.124]                   {
[16:04:32.124]                     default_workers <- missing(workers)
[16:04:32.124]                     if (is.function(workers)) 
[16:04:32.124]                       workers <- workers()
[16:04:32.124]                     workers <- structure(as.integer(workers), 
[16:04:32.124]                       class = class(workers))
[16:04:32.124]                     stop_if_not(is.finite(workers), workers >= 
[16:04:32.124]                       1L)
[16:04:32.124]                     if ((workers == 1L && !inherits(workers, 
[16:04:32.124]                       "AsIs")) || !supportsMulticore(warn = TRUE)) {
[16:04:32.124]                       if (default_workers) 
[16:04:32.124]                         supportsMulticore(warn = TRUE)
[16:04:32.124]                       return(sequential(..., envir = envir))
[16:04:32.124]                     }
[16:04:32.124]                     oopts <- options(mc.cores = workers)
[16:04:32.124]                     on.exit(options(oopts))
[16:04:32.124]                     future <- MulticoreFuture(..., workers = workers, 
[16:04:32.124]                       envir = envir)
[16:04:32.124]                     if (!future$lazy) 
[16:04:32.124]                       future <- run(future)
[16:04:32.124]                     invisible(future)
[16:04:32.124]                   }), .cleanup = FALSE, .init = FALSE)
[16:04:32.124]                 }
[16:04:32.124]             }
[16:04:32.124]         }
[16:04:32.124]     })
[16:04:32.124]     if (TRUE) {
[16:04:32.124]         base::sink(type = "output", split = FALSE)
[16:04:32.124]         if (TRUE) {
[16:04:32.124]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:04:32.124]         }
[16:04:32.124]         else {
[16:04:32.124]             ...future.result["stdout"] <- base::list(NULL)
[16:04:32.124]         }
[16:04:32.124]         base::close(...future.stdout)
[16:04:32.124]         ...future.stdout <- NULL
[16:04:32.124]     }
[16:04:32.124]     ...future.result$conditions <- ...future.conditions
[16:04:32.124]     ...future.result$finished <- base::Sys.time()
[16:04:32.124]     ...future.result
[16:04:32.124] }
[16:04:32.126] assign_globals() ...
[16:04:32.126] List of 1
[16:04:32.126]  $ a: num 10
[16:04:32.126]  - attr(*, "where")=List of 1
[16:04:32.126]   ..$ a:<environment: R_EmptyEnv> 
[16:04:32.126]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[16:04:32.126]  - attr(*, "resolved")= logi FALSE
[16:04:32.126]  - attr(*, "total_size")= num 56
[16:04:32.126]  - attr(*, "already-done")= logi TRUE
[16:04:32.129] - copied ‘a’ to environment
[16:04:32.129] assign_globals() ... done
[16:04:32.129] requestCore(): workers = 2
[16:04:32.132] MulticoreFuture started
[16:04:32.132] - Launch lazy future ... done
[16:04:32.132] run() for ‘MulticoreFuture’ ... done
[16:04:32.133] result() for MulticoreFuture ...
[16:04:32.133] plan(): Setting new future strategy stack:
[16:04:32.134] List of future strategies:
[16:04:32.134] 1. sequential:
[16:04:32.134]    - args: function (..., envir = parent.frame())
[16:04:32.134]    - tweaked: FALSE
[16:04:32.134]    - call: NULL
[16:04:32.135] plan(): nbrOfWorkers() = 1
[16:04:32.138] plan(): Setting new future strategy stack:
[16:04:32.138] List of future strategies:
[16:04:32.138] 1. multicore:
[16:04:32.138]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[16:04:32.138]    - tweaked: FALSE
[16:04:32.138]    - call: plan(strategy)
[16:04:32.145] plan(): nbrOfWorkers() = 2
[16:04:32.146] result() for MulticoreFuture ...
[16:04:32.146] result() for MulticoreFuture ... done
[16:04:32.147] result() for MulticoreFuture ... done
[16:04:32.147] result() for MulticoreFuture ...
[16:04:32.147] result() for MulticoreFuture ... done
b = 11
*** %<-% with ‘multicore’ futures ... DONE
*** %<-% with ‘multisession’ futures ...
[16:04:32.148] plan(): Setting new future strategy stack:
[16:04:32.148] List of future strategies:
[16:04:32.148] 1. multisession:
[16:04:32.148]    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[16:04:32.148]    - tweaked: FALSE
[16:04:32.148]    - call: plan(strategy)
[16:04:32.149] plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ...
[16:04:32.149] multisession:
[16:04:32.149] - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[16:04:32.149] - tweaked: FALSE
[16:04:32.149] - call: plan(strategy)
[16:04:32.156] getGlobalsAndPackages() ...
[16:04:32.156] Not searching for globals
[16:04:32.157] - globals: [0] <none>
[16:04:32.157] getGlobalsAndPackages() ... DONE
[16:04:32.157] [local output] makeClusterPSOCK() ...
[16:04:32.208] [local output] Workers: [n = 2] ‘localhost’, ‘localhost’
[16:04:32.209] [local output] Base port: 11283
[16:04:32.209] [local output] Getting setup options for 2 cluster nodes ...
[16:04:32.209] [local output]  - Node 1 of 2 ...
[16:04:32.209] [local output] localMachine=TRUE => revtunnel=FALSE

[16:04:32.210] Testing if worker's PID can be inferred: ‘'/usr/local/lib/R/bin/Rscript' -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/Rtmpe612Wd/worker.rank=1.parallelly.parent=82280.14168661cd5ab.pid")), silent = TRUE)' -e 'file.exists("/tmp/Rtmpe612Wd/worker.rank=1.parallelly.parent=82280.14168661cd5ab.pid")'’
[16:04:32.396] - Possible to infer worker's PID: TRUE
[16:04:32.397] [local output] Rscript port: 11283

[16:04:32.397] [local output]  - Node 2 of 2 ...
[16:04:32.397] [local output] localMachine=TRUE => revtunnel=FALSE

[16:04:32.398] [local output] Rscript port: 11283

[16:04:32.398] [local output] Getting setup options for 2 cluster nodes ... done
[16:04:32.398] [local output]  - Parallel setup requested for some PSOCK nodes
[16:04:32.399] [local output] Setting up PSOCK nodes in parallel
[16:04:32.399] List of 36
[16:04:32.399]  $ worker          : chr "localhost"
[16:04:32.399]   ..- attr(*, "localhost")= logi TRUE
[16:04:32.399]  $ master          : chr "localhost"
[16:04:32.399]  $ port            : int 11283
[16:04:32.399]  $ connectTimeout  : num 120
[16:04:32.399]  $ timeout         : num 2592000
[16:04:32.399]  $ rscript         : chr "'/usr/local/lib/R/bin/Rscript'"
[16:04:32.399]  $ homogeneous     : logi TRUE
[16:04:32.399]  $ rscript_args    : chr "--default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),fi"| __truncated__
[16:04:32.399]  $ rscript_envs    : NULL
[16:04:32.399]  $ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[16:04:32.399]  $ rscript_startup : NULL
[16:04:32.399]  $ rscript_sh      : chr "sh"
[16:04:32.399]  $ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[16:04:32.399]  $ methods         : logi TRUE
[16:04:32.399]  $ socketOptions   : chr "no-delay"
[16:04:32.399]  $ useXDR          : logi FALSE
[16:04:32.399]  $ outfile         : chr "/dev/null"
[16:04:32.399]  $ renice          : int NA
[16:04:32.399]  $ rshcmd          : NULL
[16:04:32.399]  $ user            : chr(0) 
[16:04:32.399]  $ revtunnel       : logi FALSE
[16:04:32.399]  $ rshlogfile      : NULL
[16:04:32.399]  $ rshopts         : chr(0) 
[16:04:32.399]  $ rank            : int 1
[16:04:32.399]  $ manual          : logi FALSE
[16:04:32.399]  $ dryrun          : logi FALSE
[16:04:32.399]  $ quiet           : logi FALSE
[16:04:32.399]  $ setup_strategy  : chr "parallel"
[16:04:32.399]  $ local_cmd       : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[16:04:32.399]  $ pidfile         : chr "/tmp/Rtmpe612Wd/worker.rank=1.parallelly.parent=82280.14168661cd5ab.pid"
[16:04:32.399]  $ rshcmd_label    : NULL
[16:04:32.399]  $ rsh_call        : NULL
[16:04:32.399]  $ cmd             : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[16:04:32.399]  $ localMachine    : logi TRUE
[16:04:32.399]  $ make_fcn        :function (worker = getOption2("parallelly.localhost.hostname", "localhost"), 
[16:04:32.399]     master = NULL, port, connectTimeout = getOption2("parallelly.makeNodePSOCK.connectTimeout", 
[16:04:32.399]         2 * 60), timeout = getOption2("parallelly.makeNodePSOCK.timeout", 
[16:04:32.399]         30 * 24 * 60 * 60), rscript = NULL, homogeneous = NULL, rscript_args = NULL, 
[16:04:32.399]     rscript_envs = NULL, rscript_libs = NULL, rscript_startup = NULL, rscript_sh = c("auto", 
[16:04:32.399]         "cmd", "sh"), default_packages = c("datasets", "utils", "grDevices", 
[16:04:32.399]         "graphics", "stats", if (methods) "methods"), methods = TRUE, socketOptions = getOption2("parallelly.makeNodePSOCK.socketOptions", 
[16:04:32.399]         "no-delay"), useXDR = getOption2("parallelly.makeNodePSOCK.useXDR", 
[16:04:32.399]         FALSE), outfile = "/dev/null", renice = NA_integer_, rshcmd = getOption2("parallelly.makeNodePSOCK.rshcmd", 
[16:04:32.399]         NULL), user = NULL, revtunnel = NA, rshlogfile = NULL, rshopts = getOption2("parallelly.makeNodePSOCK.rshopts", 
[16:04:32.399]         NULL), rank = 1L, manual = FALSE, dryrun = FALSE, quiet = FALSE, 
[16:04:32.399]     setup_strategy = getOption2("parallelly.makeNodePSOCK.setup_strategy", 
[16:04:32.399]         "parallel"), action = c("launch", "options"), verbose = FALSE)  
[16:04:32.399]  $ arguments       :List of 28
[16:04:32.399]   ..$ worker          : chr "localhost"
[16:04:32.399]   ..$ master          : NULL
[16:04:32.399]   ..$ port            : int 11283
[16:04:32.399]   ..$ connectTimeout  : num 120
[16:04:32.399]   ..$ timeout         : num 2592000
[16:04:32.399]   ..$ rscript         : NULL
[16:04:32.399]   ..$ homogeneous     : NULL
[16:04:32.399]   ..$ rscript_args    : NULL
[16:04:32.399]   ..$ rscript_envs    : NULL
[16:04:32.399]   ..$ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[16:04:32.399]   ..$ rscript_startup : NULL
[16:04:32.399]   ..$ rscript_sh      : chr [1:3] "auto" "cmd" "sh"
[16:04:32.399]   ..$ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[16:04:32.399]   ..$ methods         : logi TRUE
[16:04:32.399]   ..$ socketOptions   : chr "no-delay"
[16:04:32.399]   ..$ useXDR          : logi FALSE
[16:04:32.399]   ..$ outfile         : chr "/dev/null"
[16:04:32.399]   ..$ renice          : int NA
[16:04:32.399]   ..$ rshcmd          : NULL
[16:04:32.399]   ..$ user            : NULL
[16:04:32.399]   ..$ revtunnel       : logi NA
[16:04:32.399]   ..$ rshlogfile      : NULL
[16:04:32.399]   ..$ rshopts         : NULL
[16:04:32.399]   ..$ rank            : int 1
[16:04:32.399]   ..$ manual          : logi FALSE
[16:04:32.399]   ..$ dryrun          : logi FALSE
[16:04:32.399]   ..$ quiet           : logi FALSE
[16:04:32.399]   ..$ setup_strategy  : chr "parallel"
[16:04:32.399]  - attr(*, "class")= chr [1:2] "makeNodePSOCKOptions" "makeNodeOptions"
[16:04:32.416] [local output] System call to launch all workers:
[16:04:32.416] [local output] '/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/Rtmpe612Wd/worker.rank=1.parallelly.parent=82280.14168661cd5ab.pid")), silent = TRUE)' -e 'options(socketOptions = "no-delay")' -e '.libPaths(c("/usr/local/lib/R/site-library","/usr/local/lib/R/library"))' -e 'workRSOCK <- tryCatch(parallel:::.workRSOCK, error=function(e) parallel:::.slaveRSOCK); workRSOCK()' MASTER=localhost PORT=11283 OUT=/dev/null TIMEOUT=2592000 XDR=FALSE SETUPTIMEOUT=120 SETUPSTRATEGY=parallel
[16:04:32.416] [local output] Starting PSOCK main server
[16:04:32.421] [local output] Workers launched
[16:04:32.422] [local output] Waiting for workers to connect back
[16:04:32.422]  - [local output] 0 workers out of 2 ready
[16:04:32.686]  - [local output] 0 workers out of 2 ready
[16:04:32.686]  - [local output] 1 workers out of 2 ready
[16:04:32.686]  - [local output] 2 workers out of 2 ready
[16:04:32.687] [local output] Launching of workers completed
[16:04:32.687] [local output] Collecting session information from workers
[16:04:32.688] [local output]  - Worker #1 of 2
[16:04:32.688] [local output]  - Worker #2 of 2
[16:04:32.688] [local output] makeClusterPSOCK() ... done
[16:04:32.700] Packages needed by the future expression (n = 0): <none>
[16:04:32.700] Packages needed by future strategies (n = 0): <none>
[16:04:32.701] {
[16:04:32.701]     {
[16:04:32.701]         {
[16:04:32.701]             ...future.startTime <- base::Sys.time()
[16:04:32.701]             {
[16:04:32.701]                 {
[16:04:32.701]                   {
[16:04:32.701]                     {
[16:04:32.701]                       base::local({
[16:04:32.701]                         has_future <- base::requireNamespace("future", 
[16:04:32.701]                           quietly = TRUE)
[16:04:32.701]                         if (has_future) {
[16:04:32.701]                           ns <- base::getNamespace("future")
[16:04:32.701]                           version <- ns[[".package"]][["version"]]
[16:04:32.701]                           if (is.null(version)) 
[16:04:32.701]                             version <- utils::packageVersion("future")
[16:04:32.701]                         }
[16:04:32.701]                         else {
[16:04:32.701]                           version <- NULL
[16:04:32.701]                         }
[16:04:32.701]                         if (!has_future || version < "1.8.0") {
[16:04:32.701]                           info <- base::c(r_version = base::gsub("R version ", 
[16:04:32.701]                             "", base::R.version$version.string), 
[16:04:32.701]                             platform = base::sprintf("%s (%s-bit)", 
[16:04:32.701]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:04:32.701]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[16:04:32.701]                               "release", "version")], collapse = " "), 
[16:04:32.701]                             hostname = base::Sys.info()[["nodename"]])
[16:04:32.701]                           info <- base::sprintf("%s: %s", base::names(info), 
[16:04:32.701]                             info)
[16:04:32.701]                           info <- base::paste(info, collapse = "; ")
[16:04:32.701]                           if (!has_future) {
[16:04:32.701]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:04:32.701]                               info)
[16:04:32.701]                           }
[16:04:32.701]                           else {
[16:04:32.701]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:04:32.701]                               info, version)
[16:04:32.701]                           }
[16:04:32.701]                           base::stop(msg)
[16:04:32.701]                         }
[16:04:32.701]                       })
[16:04:32.701]                     }
[16:04:32.701]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[16:04:32.701]                     base::options(mc.cores = 1L)
[16:04:32.701]                   }
[16:04:32.701]                   options(future.plan = NULL)
[16:04:32.701]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:04:32.701]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:04:32.701]                 }
[16:04:32.701]                 ...future.workdir <- getwd()
[16:04:32.701]             }
[16:04:32.701]             ...future.oldOptions <- base::as.list(base::.Options)
[16:04:32.701]             ...future.oldEnvVars <- base::Sys.getenv()
[16:04:32.701]         }
[16:04:32.701]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:04:32.701]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:04:32.701]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:04:32.701]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:04:32.701]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:04:32.701]             future.stdout.windows.reencode = NULL, width = 80L)
[16:04:32.701]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:04:32.701]             base::names(...future.oldOptions))
[16:04:32.701]     }
[16:04:32.701]     if (FALSE) {
[16:04:32.701]     }
[16:04:32.701]     else {
[16:04:32.701]         if (TRUE) {
[16:04:32.701]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:04:32.701]                 open = "w")
[16:04:32.701]         }
[16:04:32.701]         else {
[16:04:32.701]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:04:32.701]                 windows = "NUL", "/dev/null"), open = "w")
[16:04:32.701]         }
[16:04:32.701]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:04:32.701]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:04:32.701]             base::sink(type = "output", split = FALSE)
[16:04:32.701]             base::close(...future.stdout)
[16:04:32.701]         }, add = TRUE)
[16:04:32.701]     }
[16:04:32.701]     ...future.frame <- base::sys.nframe()
[16:04:32.701]     ...future.conditions <- base::list()
[16:04:32.701]     ...future.rng <- base::globalenv()$.Random.seed
[16:04:32.701]     if (FALSE) {
[16:04:32.701]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:04:32.701]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:04:32.701]     }
[16:04:32.701]     ...future.result <- base::tryCatch({
[16:04:32.701]         base::withCallingHandlers({
[16:04:32.701]             ...future.value <- base::withVisible(base::local({
[16:04:32.701]                 ...future.makeSendCondition <- base::local({
[16:04:32.701]                   sendCondition <- NULL
[16:04:32.701]                   function(frame = 1L) {
[16:04:32.701]                     if (is.function(sendCondition)) 
[16:04:32.701]                       return(sendCondition)
[16:04:32.701]                     ns <- getNamespace("parallel")
[16:04:32.701]                     if (exists("sendData", mode = "function", 
[16:04:32.701]                       envir = ns)) {
[16:04:32.701]                       parallel_sendData <- get("sendData", mode = "function", 
[16:04:32.701]                         envir = ns)
[16:04:32.701]                       envir <- sys.frame(frame)
[16:04:32.701]                       master <- NULL
[16:04:32.701]                       while (!identical(envir, .GlobalEnv) && 
[16:04:32.701]                         !identical(envir, emptyenv())) {
[16:04:32.701]                         if (exists("master", mode = "list", envir = envir, 
[16:04:32.701]                           inherits = FALSE)) {
[16:04:32.701]                           master <- get("master", mode = "list", 
[16:04:32.701]                             envir = envir, inherits = FALSE)
[16:04:32.701]                           if (inherits(master, c("SOCKnode", 
[16:04:32.701]                             "SOCK0node"))) {
[16:04:32.701]                             sendCondition <<- function(cond) {
[16:04:32.701]                               data <- list(type = "VALUE", value = cond, 
[16:04:32.701]                                 success = TRUE)
[16:04:32.701]                               parallel_sendData(master, data)
[16:04:32.701]                             }
[16:04:32.701]                             return(sendCondition)
[16:04:32.701]                           }
[16:04:32.701]                         }
[16:04:32.701]                         frame <- frame + 1L
[16:04:32.701]                         envir <- sys.frame(frame)
[16:04:32.701]                       }
[16:04:32.701]                     }
[16:04:32.701]                     sendCondition <<- function(cond) NULL
[16:04:32.701]                   }
[16:04:32.701]                 })
[16:04:32.701]                 withCallingHandlers({
[16:04:32.701]                   NA
[16:04:32.701]                 }, immediateCondition = function(cond) {
[16:04:32.701]                   sendCondition <- ...future.makeSendCondition()
[16:04:32.701]                   sendCondition(cond)
[16:04:32.701]                   muffleCondition <- function (cond, pattern = "^muffle") 
[16:04:32.701]                   {
[16:04:32.701]                     inherits <- base::inherits
[16:04:32.701]                     invokeRestart <- base::invokeRestart
[16:04:32.701]                     is.null <- base::is.null
[16:04:32.701]                     muffled <- FALSE
[16:04:32.701]                     if (inherits(cond, "message")) {
[16:04:32.701]                       muffled <- grepl(pattern, "muffleMessage")
[16:04:32.701]                       if (muffled) 
[16:04:32.701]                         invokeRestart("muffleMessage")
[16:04:32.701]                     }
[16:04:32.701]                     else if (inherits(cond, "warning")) {
[16:04:32.701]                       muffled <- grepl(pattern, "muffleWarning")
[16:04:32.701]                       if (muffled) 
[16:04:32.701]                         invokeRestart("muffleWarning")
[16:04:32.701]                     }
[16:04:32.701]                     else if (inherits(cond, "condition")) {
[16:04:32.701]                       if (!is.null(pattern)) {
[16:04:32.701]                         computeRestarts <- base::computeRestarts
[16:04:32.701]                         grepl <- base::grepl
[16:04:32.701]                         restarts <- computeRestarts(cond)
[16:04:32.701]                         for (restart in restarts) {
[16:04:32.701]                           name <- restart$name
[16:04:32.701]                           if (is.null(name)) 
[16:04:32.701]                             next
[16:04:32.701]                           if (!grepl(pattern, name)) 
[16:04:32.701]                             next
[16:04:32.701]                           invokeRestart(restart)
[16:04:32.701]                           muffled <- TRUE
[16:04:32.701]                           break
[16:04:32.701]                         }
[16:04:32.701]                       }
[16:04:32.701]                     }
[16:04:32.701]                     invisible(muffled)
[16:04:32.701]                   }
[16:04:32.701]                   muffleCondition(cond)
[16:04:32.701]                 })
[16:04:32.701]             }))
[16:04:32.701]             future::FutureResult(value = ...future.value$value, 
[16:04:32.701]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:04:32.701]                   ...future.rng), globalenv = if (FALSE) 
[16:04:32.701]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:04:32.701]                     ...future.globalenv.names))
[16:04:32.701]                 else NULL, started = ...future.startTime, version = "1.8")
[16:04:32.701]         }, condition = base::local({
[16:04:32.701]             c <- base::c
[16:04:32.701]             inherits <- base::inherits
[16:04:32.701]             invokeRestart <- base::invokeRestart
[16:04:32.701]             length <- base::length
[16:04:32.701]             list <- base::list
[16:04:32.701]             seq.int <- base::seq.int
[16:04:32.701]             signalCondition <- base::signalCondition
[16:04:32.701]             sys.calls <- base::sys.calls
[16:04:32.701]             `[[` <- base::`[[`
[16:04:32.701]             `+` <- base::`+`
[16:04:32.701]             `<<-` <- base::`<<-`
[16:04:32.701]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:04:32.701]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:04:32.701]                   3L)]
[16:04:32.701]             }
[16:04:32.701]             function(cond) {
[16:04:32.701]                 is_error <- inherits(cond, "error")
[16:04:32.701]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:04:32.701]                   NULL)
[16:04:32.701]                 if (is_error) {
[16:04:32.701]                   sessionInformation <- function() {
[16:04:32.701]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:04:32.701]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:04:32.701]                       search = base::search(), system = base::Sys.info())
[16:04:32.701]                   }
[16:04:32.701]                   ...future.conditions[[length(...future.conditions) + 
[16:04:32.701]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:04:32.701]                     cond$call), session = sessionInformation(), 
[16:04:32.701]                     timestamp = base::Sys.time(), signaled = 0L)
[16:04:32.701]                   signalCondition(cond)
[16:04:32.701]                 }
[16:04:32.701]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:04:32.701]                 "immediateCondition"))) {
[16:04:32.701]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:04:32.701]                   ...future.conditions[[length(...future.conditions) + 
[16:04:32.701]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:04:32.701]                   if (TRUE && !signal) {
[16:04:32.701]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:04:32.701]                     {
[16:04:32.701]                       inherits <- base::inherits
[16:04:32.701]                       invokeRestart <- base::invokeRestart
[16:04:32.701]                       is.null <- base::is.null
[16:04:32.701]                       muffled <- FALSE
[16:04:32.701]                       if (inherits(cond, "message")) {
[16:04:32.701]                         muffled <- grepl(pattern, "muffleMessage")
[16:04:32.701]                         if (muffled) 
[16:04:32.701]                           invokeRestart("muffleMessage")
[16:04:32.701]                       }
[16:04:32.701]                       else if (inherits(cond, "warning")) {
[16:04:32.701]                         muffled <- grepl(pattern, "muffleWarning")
[16:04:32.701]                         if (muffled) 
[16:04:32.701]                           invokeRestart("muffleWarning")
[16:04:32.701]                       }
[16:04:32.701]                       else if (inherits(cond, "condition")) {
[16:04:32.701]                         if (!is.null(pattern)) {
[16:04:32.701]                           computeRestarts <- base::computeRestarts
[16:04:32.701]                           grepl <- base::grepl
[16:04:32.701]                           restarts <- computeRestarts(cond)
[16:04:32.701]                           for (restart in restarts) {
[16:04:32.701]                             name <- restart$name
[16:04:32.701]                             if (is.null(name)) 
[16:04:32.701]                               next
[16:04:32.701]                             if (!grepl(pattern, name)) 
[16:04:32.701]                               next
[16:04:32.701]                             invokeRestart(restart)
[16:04:32.701]                             muffled <- TRUE
[16:04:32.701]                             break
[16:04:32.701]                           }
[16:04:32.701]                         }
[16:04:32.701]                       }
[16:04:32.701]                       invisible(muffled)
[16:04:32.701]                     }
[16:04:32.701]                     muffleCondition(cond, pattern = "^muffle")
[16:04:32.701]                   }
[16:04:32.701]                 }
[16:04:32.701]                 else {
[16:04:32.701]                   if (TRUE) {
[16:04:32.701]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:04:32.701]                     {
[16:04:32.701]                       inherits <- base::inherits
[16:04:32.701]                       invokeRestart <- base::invokeRestart
[16:04:32.701]                       is.null <- base::is.null
[16:04:32.701]                       muffled <- FALSE
[16:04:32.701]                       if (inherits(cond, "message")) {
[16:04:32.701]                         muffled <- grepl(pattern, "muffleMessage")
[16:04:32.701]                         if (muffled) 
[16:04:32.701]                           invokeRestart("muffleMessage")
[16:04:32.701]                       }
[16:04:32.701]                       else if (inherits(cond, "warning")) {
[16:04:32.701]                         muffled <- grepl(pattern, "muffleWarning")
[16:04:32.701]                         if (muffled) 
[16:04:32.701]                           invokeRestart("muffleWarning")
[16:04:32.701]                       }
[16:04:32.701]                       else if (inherits(cond, "condition")) {
[16:04:32.701]                         if (!is.null(pattern)) {
[16:04:32.701]                           computeRestarts <- base::computeRestarts
[16:04:32.701]                           grepl <- base::grepl
[16:04:32.701]                           restarts <- computeRestarts(cond)
[16:04:32.701]                           for (restart in restarts) {
[16:04:32.701]                             name <- restart$name
[16:04:32.701]                             if (is.null(name)) 
[16:04:32.701]                               next
[16:04:32.701]                             if (!grepl(pattern, name)) 
[16:04:32.701]                               next
[16:04:32.701]                             invokeRestart(restart)
[16:04:32.701]                             muffled <- TRUE
[16:04:32.701]                             break
[16:04:32.701]                           }
[16:04:32.701]                         }
[16:04:32.701]                       }
[16:04:32.701]                       invisible(muffled)
[16:04:32.701]                     }
[16:04:32.701]                     muffleCondition(cond, pattern = "^muffle")
[16:04:32.701]                   }
[16:04:32.701]                 }
[16:04:32.701]             }
[16:04:32.701]         }))
[16:04:32.701]     }, error = function(ex) {
[16:04:32.701]         base::structure(base::list(value = NULL, visible = NULL, 
[16:04:32.701]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:04:32.701]                 ...future.rng), started = ...future.startTime, 
[16:04:32.701]             finished = Sys.time(), session_uuid = NA_character_, 
[16:04:32.701]             version = "1.8"), class = "FutureResult")
[16:04:32.701]     }, finally = {
[16:04:32.701]         if (!identical(...future.workdir, getwd())) 
[16:04:32.701]             setwd(...future.workdir)
[16:04:32.701]         {
[16:04:32.701]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:04:32.701]                 ...future.oldOptions$nwarnings <- NULL
[16:04:32.701]             }
[16:04:32.701]             base::options(...future.oldOptions)
[16:04:32.701]             if (.Platform$OS.type == "windows") {
[16:04:32.701]                 old_names <- names(...future.oldEnvVars)
[16:04:32.701]                 envs <- base::Sys.getenv()
[16:04:32.701]                 names <- names(envs)
[16:04:32.701]                 common <- intersect(names, old_names)
[16:04:32.701]                 added <- setdiff(names, old_names)
[16:04:32.701]                 removed <- setdiff(old_names, names)
[16:04:32.701]                 changed <- common[...future.oldEnvVars[common] != 
[16:04:32.701]                   envs[common]]
[16:04:32.701]                 NAMES <- toupper(changed)
[16:04:32.701]                 args <- list()
[16:04:32.701]                 for (kk in seq_along(NAMES)) {
[16:04:32.701]                   name <- changed[[kk]]
[16:04:32.701]                   NAME <- NAMES[[kk]]
[16:04:32.701]                   if (name != NAME && is.element(NAME, old_names)) 
[16:04:32.701]                     next
[16:04:32.701]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:04:32.701]                 }
[16:04:32.701]                 NAMES <- toupper(added)
[16:04:32.701]                 for (kk in seq_along(NAMES)) {
[16:04:32.701]                   name <- added[[kk]]
[16:04:32.701]                   NAME <- NAMES[[kk]]
[16:04:32.701]                   if (name != NAME && is.element(NAME, old_names)) 
[16:04:32.701]                     next
[16:04:32.701]                   args[[name]] <- ""
[16:04:32.701]                 }
[16:04:32.701]                 NAMES <- toupper(removed)
[16:04:32.701]                 for (kk in seq_along(NAMES)) {
[16:04:32.701]                   name <- removed[[kk]]
[16:04:32.701]                   NAME <- NAMES[[kk]]
[16:04:32.701]                   if (name != NAME && is.element(NAME, old_names)) 
[16:04:32.701]                     next
[16:04:32.701]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:04:32.701]                 }
[16:04:32.701]                 if (length(args) > 0) 
[16:04:32.701]                   base::do.call(base::Sys.setenv, args = args)
[16:04:32.701]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:04:32.701]             }
[16:04:32.701]             else {
[16:04:32.701]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:04:32.701]             }
[16:04:32.701]             {
[16:04:32.701]                 if (base::length(...future.futureOptionsAdded) > 
[16:04:32.701]                   0L) {
[16:04:32.701]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:04:32.701]                   base::names(opts) <- ...future.futureOptionsAdded
[16:04:32.701]                   base::options(opts)
[16:04:32.701]                 }
[16:04:32.701]                 {
[16:04:32.701]                   {
[16:04:32.701]                     base::options(mc.cores = ...future.mc.cores.old)
[16:04:32.701]                     NULL
[16:04:32.701]                   }
[16:04:32.701]                   options(future.plan = NULL)
[16:04:32.701]                   if (is.na(NA_character_)) 
[16:04:32.701]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:04:32.701]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:04:32.701]                   future::plan(list(function (..., workers = availableCores(), 
[16:04:32.701]                     lazy = FALSE, rscript_libs = .libPaths(), 
[16:04:32.701]                     envir = parent.frame()) 
[16:04:32.701]                   {
[16:04:32.701]                     if (is.function(workers)) 
[16:04:32.701]                       workers <- workers()
[16:04:32.701]                     workers <- structure(as.integer(workers), 
[16:04:32.701]                       class = class(workers))
[16:04:32.701]                     stop_if_not(length(workers) == 1, is.finite(workers), 
[16:04:32.701]                       workers >= 1)
[16:04:32.701]                     if (workers == 1L && !inherits(workers, "AsIs")) {
[16:04:32.701]                       return(sequential(..., lazy = TRUE, envir = envir))
[16:04:32.701]                     }
[16:04:32.701]                     future <- MultisessionFuture(..., workers = workers, 
[16:04:32.701]                       lazy = lazy, rscript_libs = rscript_libs, 
[16:04:32.701]                       envir = envir)
[16:04:32.701]                     if (!future$lazy) 
[16:04:32.701]                       future <- run(future)
[16:04:32.701]                     invisible(future)
[16:04:32.701]                   }), .cleanup = FALSE, .init = FALSE)
[16:04:32.701]                 }
[16:04:32.701]             }
[16:04:32.701]         }
[16:04:32.701]     })
[16:04:32.701]     if (TRUE) {
[16:04:32.701]         base::sink(type = "output", split = FALSE)
[16:04:32.701]         if (TRUE) {
[16:04:32.701]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:04:32.701]         }
[16:04:32.701]         else {
[16:04:32.701]             ...future.result["stdout"] <- base::list(NULL)
[16:04:32.701]         }
[16:04:32.701]         base::close(...future.stdout)
[16:04:32.701]         ...future.stdout <- NULL
[16:04:32.701]     }
[16:04:32.701]     ...future.result$conditions <- ...future.conditions
[16:04:32.701]     ...future.result$finished <- base::Sys.time()
[16:04:32.701]     ...future.result
[16:04:32.701] }
[16:04:32.753] MultisessionFuture started
[16:04:32.753] result() for ClusterFuture ...
[16:04:32.754] receiveMessageFromWorker() for ClusterFuture ...
[16:04:32.754] - Validating connection of MultisessionFuture
[16:04:32.795] - received message: FutureResult
[16:04:32.796] - Received FutureResult
[16:04:32.796] - Erased future from FutureRegistry
[16:04:32.796] result() for ClusterFuture ...
[16:04:32.796] - result already collected: FutureResult
[16:04:32.796] result() for ClusterFuture ... done
[16:04:32.796] receiveMessageFromWorker() for ClusterFuture ... done
[16:04:32.796] result() for ClusterFuture ... done
[16:04:32.797] result() for ClusterFuture ...
[16:04:32.797] - result already collected: FutureResult
[16:04:32.797] result() for ClusterFuture ... done
[16:04:32.797] plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ... DONE
[16:04:32.801] plan(): nbrOfWorkers() = 2
** Future evaluation without globals
[16:04:32.801] getGlobalsAndPackages() ...
[16:04:32.801] Searching for globals...
[16:04:32.803] - globals found: [2] ‘{’, ‘<-’
[16:04:32.803] Searching for globals ... DONE
[16:04:32.803] Resolving globals: FALSE
[16:04:32.803] 
[16:04:32.803] 
[16:04:32.804] getGlobalsAndPackages() ... DONE
[16:04:32.804] run() for ‘Future’ ...
[16:04:32.804] - state: ‘created’
[16:04:32.804] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[16:04:32.819] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[16:04:32.819] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[16:04:32.819]   - Field: ‘node’
[16:04:32.819]   - Field: ‘label’
[16:04:32.819]   - Field: ‘local’
[16:04:32.819]   - Field: ‘owner’
[16:04:32.819]   - Field: ‘envir’
[16:04:32.819]   - Field: ‘workers’
[16:04:32.819]   - Field: ‘packages’
[16:04:32.820]   - Field: ‘gc’
[16:04:32.820]   - Field: ‘conditions’
[16:04:32.820]   - Field: ‘persistent’
[16:04:32.820]   - Field: ‘expr’
[16:04:32.820]   - Field: ‘uuid’
[16:04:32.820]   - Field: ‘seed’
[16:04:32.820]   - Field: ‘version’
[16:04:32.820]   - Field: ‘result’
[16:04:32.820]   - Field: ‘asynchronous’
[16:04:32.821]   - Field: ‘calls’
[16:04:32.821]   - Field: ‘globals’
[16:04:32.821]   - Field: ‘stdout’
[16:04:32.821]   - Field: ‘earlySignal’
[16:04:32.821]   - Field: ‘lazy’
[16:04:32.821]   - Field: ‘state’
[16:04:32.821] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[16:04:32.821] - Launch lazy future ...
[16:04:32.822] Packages needed by the future expression (n = 0): <none>
[16:04:32.822] Packages needed by future strategies (n = 0): <none>
[16:04:32.822] {
[16:04:32.822]     {
[16:04:32.822]         {
[16:04:32.822]             ...future.startTime <- base::Sys.time()
[16:04:32.822]             {
[16:04:32.822]                 {
[16:04:32.822]                   {
[16:04:32.822]                     {
[16:04:32.822]                       base::local({
[16:04:32.822]                         has_future <- base::requireNamespace("future", 
[16:04:32.822]                           quietly = TRUE)
[16:04:32.822]                         if (has_future) {
[16:04:32.822]                           ns <- base::getNamespace("future")
[16:04:32.822]                           version <- ns[[".package"]][["version"]]
[16:04:32.822]                           if (is.null(version)) 
[16:04:32.822]                             version <- utils::packageVersion("future")
[16:04:32.822]                         }
[16:04:32.822]                         else {
[16:04:32.822]                           version <- NULL
[16:04:32.822]                         }
[16:04:32.822]                         if (!has_future || version < "1.8.0") {
[16:04:32.822]                           info <- base::c(r_version = base::gsub("R version ", 
[16:04:32.822]                             "", base::R.version$version.string), 
[16:04:32.822]                             platform = base::sprintf("%s (%s-bit)", 
[16:04:32.822]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:04:32.822]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[16:04:32.822]                               "release", "version")], collapse = " "), 
[16:04:32.822]                             hostname = base::Sys.info()[["nodename"]])
[16:04:32.822]                           info <- base::sprintf("%s: %s", base::names(info), 
[16:04:32.822]                             info)
[16:04:32.822]                           info <- base::paste(info, collapse = "; ")
[16:04:32.822]                           if (!has_future) {
[16:04:32.822]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:04:32.822]                               info)
[16:04:32.822]                           }
[16:04:32.822]                           else {
[16:04:32.822]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:04:32.822]                               info, version)
[16:04:32.822]                           }
[16:04:32.822]                           base::stop(msg)
[16:04:32.822]                         }
[16:04:32.822]                       })
[16:04:32.822]                     }
[16:04:32.822]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[16:04:32.822]                     base::options(mc.cores = 1L)
[16:04:32.822]                   }
[16:04:32.822]                   options(future.plan = NULL)
[16:04:32.822]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:04:32.822]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:04:32.822]                 }
[16:04:32.822]                 ...future.workdir <- getwd()
[16:04:32.822]             }
[16:04:32.822]             ...future.oldOptions <- base::as.list(base::.Options)
[16:04:32.822]             ...future.oldEnvVars <- base::Sys.getenv()
[16:04:32.822]         }
[16:04:32.822]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:04:32.822]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:04:32.822]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:04:32.822]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:04:32.822]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:04:32.822]             future.stdout.windows.reencode = NULL, width = 80L)
[16:04:32.822]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:04:32.822]             base::names(...future.oldOptions))
[16:04:32.822]     }
[16:04:32.822]     if (FALSE) {
[16:04:32.822]     }
[16:04:32.822]     else {
[16:04:32.822]         if (TRUE) {
[16:04:32.822]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:04:32.822]                 open = "w")
[16:04:32.822]         }
[16:04:32.822]         else {
[16:04:32.822]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:04:32.822]                 windows = "NUL", "/dev/null"), open = "w")
[16:04:32.822]         }
[16:04:32.822]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:04:32.822]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:04:32.822]             base::sink(type = "output", split = FALSE)
[16:04:32.822]             base::close(...future.stdout)
[16:04:32.822]         }, add = TRUE)
[16:04:32.822]     }
[16:04:32.822]     ...future.frame <- base::sys.nframe()
[16:04:32.822]     ...future.conditions <- base::list()
[16:04:32.822]     ...future.rng <- base::globalenv()$.Random.seed
[16:04:32.822]     if (FALSE) {
[16:04:32.822]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:04:32.822]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:04:32.822]     }
[16:04:32.822]     ...future.result <- base::tryCatch({
[16:04:32.822]         base::withCallingHandlers({
[16:04:32.822]             ...future.value <- base::withVisible(base::local({
[16:04:32.822]                 ...future.makeSendCondition <- base::local({
[16:04:32.822]                   sendCondition <- NULL
[16:04:32.822]                   function(frame = 1L) {
[16:04:32.822]                     if (is.function(sendCondition)) 
[16:04:32.822]                       return(sendCondition)
[16:04:32.822]                     ns <- getNamespace("parallel")
[16:04:32.822]                     if (exists("sendData", mode = "function", 
[16:04:32.822]                       envir = ns)) {
[16:04:32.822]                       parallel_sendData <- get("sendData", mode = "function", 
[16:04:32.822]                         envir = ns)
[16:04:32.822]                       envir <- sys.frame(frame)
[16:04:32.822]                       master <- NULL
[16:04:32.822]                       while (!identical(envir, .GlobalEnv) && 
[16:04:32.822]                         !identical(envir, emptyenv())) {
[16:04:32.822]                         if (exists("master", mode = "list", envir = envir, 
[16:04:32.822]                           inherits = FALSE)) {
[16:04:32.822]                           master <- get("master", mode = "list", 
[16:04:32.822]                             envir = envir, inherits = FALSE)
[16:04:32.822]                           if (inherits(master, c("SOCKnode", 
[16:04:32.822]                             "SOCK0node"))) {
[16:04:32.822]                             sendCondition <<- function(cond) {
[16:04:32.822]                               data <- list(type = "VALUE", value = cond, 
[16:04:32.822]                                 success = TRUE)
[16:04:32.822]                               parallel_sendData(master, data)
[16:04:32.822]                             }
[16:04:32.822]                             return(sendCondition)
[16:04:32.822]                           }
[16:04:32.822]                         }
[16:04:32.822]                         frame <- frame + 1L
[16:04:32.822]                         envir <- sys.frame(frame)
[16:04:32.822]                       }
[16:04:32.822]                     }
[16:04:32.822]                     sendCondition <<- function(cond) NULL
[16:04:32.822]                   }
[16:04:32.822]                 })
[16:04:32.822]                 withCallingHandlers({
[16:04:32.822]                   {
[16:04:32.822]                     x <- 1
[16:04:32.822]                   }
[16:04:32.822]                 }, immediateCondition = function(cond) {
[16:04:32.822]                   sendCondition <- ...future.makeSendCondition()
[16:04:32.822]                   sendCondition(cond)
[16:04:32.822]                   muffleCondition <- function (cond, pattern = "^muffle") 
[16:04:32.822]                   {
[16:04:32.822]                     inherits <- base::inherits
[16:04:32.822]                     invokeRestart <- base::invokeRestart
[16:04:32.822]                     is.null <- base::is.null
[16:04:32.822]                     muffled <- FALSE
[16:04:32.822]                     if (inherits(cond, "message")) {
[16:04:32.822]                       muffled <- grepl(pattern, "muffleMessage")
[16:04:32.822]                       if (muffled) 
[16:04:32.822]                         invokeRestart("muffleMessage")
[16:04:32.822]                     }
[16:04:32.822]                     else if (inherits(cond, "warning")) {
[16:04:32.822]                       muffled <- grepl(pattern, "muffleWarning")
[16:04:32.822]                       if (muffled) 
[16:04:32.822]                         invokeRestart("muffleWarning")
[16:04:32.822]                     }
[16:04:32.822]                     else if (inherits(cond, "condition")) {
[16:04:32.822]                       if (!is.null(pattern)) {
[16:04:32.822]                         computeRestarts <- base::computeRestarts
[16:04:32.822]                         grepl <- base::grepl
[16:04:32.822]                         restarts <- computeRestarts(cond)
[16:04:32.822]                         for (restart in restarts) {
[16:04:32.822]                           name <- restart$name
[16:04:32.822]                           if (is.null(name)) 
[16:04:32.822]                             next
[16:04:32.822]                           if (!grepl(pattern, name)) 
[16:04:32.822]                             next
[16:04:32.822]                           invokeRestart(restart)
[16:04:32.822]                           muffled <- TRUE
[16:04:32.822]                           break
[16:04:32.822]                         }
[16:04:32.822]                       }
[16:04:32.822]                     }
[16:04:32.822]                     invisible(muffled)
[16:04:32.822]                   }
[16:04:32.822]                   muffleCondition(cond)
[16:04:32.822]                 })
[16:04:32.822]             }))
[16:04:32.822]             future::FutureResult(value = ...future.value$value, 
[16:04:32.822]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:04:32.822]                   ...future.rng), globalenv = if (FALSE) 
[16:04:32.822]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:04:32.822]                     ...future.globalenv.names))
[16:04:32.822]                 else NULL, started = ...future.startTime, version = "1.8")
[16:04:32.822]         }, condition = base::local({
[16:04:32.822]             c <- base::c
[16:04:32.822]             inherits <- base::inherits
[16:04:32.822]             invokeRestart <- base::invokeRestart
[16:04:32.822]             length <- base::length
[16:04:32.822]             list <- base::list
[16:04:32.822]             seq.int <- base::seq.int
[16:04:32.822]             signalCondition <- base::signalCondition
[16:04:32.822]             sys.calls <- base::sys.calls
[16:04:32.822]             `[[` <- base::`[[`
[16:04:32.822]             `+` <- base::`+`
[16:04:32.822]             `<<-` <- base::`<<-`
[16:04:32.822]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:04:32.822]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:04:32.822]                   3L)]
[16:04:32.822]             }
[16:04:32.822]             function(cond) {
[16:04:32.822]                 is_error <- inherits(cond, "error")
[16:04:32.822]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:04:32.822]                   NULL)
[16:04:32.822]                 if (is_error) {
[16:04:32.822]                   sessionInformation <- function() {
[16:04:32.822]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:04:32.822]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:04:32.822]                       search = base::search(), system = base::Sys.info())
[16:04:32.822]                   }
[16:04:32.822]                   ...future.conditions[[length(...future.conditions) + 
[16:04:32.822]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:04:32.822]                     cond$call), session = sessionInformation(), 
[16:04:32.822]                     timestamp = base::Sys.time(), signaled = 0L)
[16:04:32.822]                   signalCondition(cond)
[16:04:32.822]                 }
[16:04:32.822]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:04:32.822]                 "immediateCondition"))) {
[16:04:32.822]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:04:32.822]                   ...future.conditions[[length(...future.conditions) + 
[16:04:32.822]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:04:32.822]                   if (TRUE && !signal) {
[16:04:32.822]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:04:32.822]                     {
[16:04:32.822]                       inherits <- base::inherits
[16:04:32.822]                       invokeRestart <- base::invokeRestart
[16:04:32.822]                       is.null <- base::is.null
[16:04:32.822]                       muffled <- FALSE
[16:04:32.822]                       if (inherits(cond, "message")) {
[16:04:32.822]                         muffled <- grepl(pattern, "muffleMessage")
[16:04:32.822]                         if (muffled) 
[16:04:32.822]                           invokeRestart("muffleMessage")
[16:04:32.822]                       }
[16:04:32.822]                       else if (inherits(cond, "warning")) {
[16:04:32.822]                         muffled <- grepl(pattern, "muffleWarning")
[16:04:32.822]                         if (muffled) 
[16:04:32.822]                           invokeRestart("muffleWarning")
[16:04:32.822]                       }
[16:04:32.822]                       else if (inherits(cond, "condition")) {
[16:04:32.822]                         if (!is.null(pattern)) {
[16:04:32.822]                           computeRestarts <- base::computeRestarts
[16:04:32.822]                           grepl <- base::grepl
[16:04:32.822]                           restarts <- computeRestarts(cond)
[16:04:32.822]                           for (restart in restarts) {
[16:04:32.822]                             name <- restart$name
[16:04:32.822]                             if (is.null(name)) 
[16:04:32.822]                               next
[16:04:32.822]                             if (!grepl(pattern, name)) 
[16:04:32.822]                               next
[16:04:32.822]                             invokeRestart(restart)
[16:04:32.822]                             muffled <- TRUE
[16:04:32.822]                             break
[16:04:32.822]                           }
[16:04:32.822]                         }
[16:04:32.822]                       }
[16:04:32.822]                       invisible(muffled)
[16:04:32.822]                     }
[16:04:32.822]                     muffleCondition(cond, pattern = "^muffle")
[16:04:32.822]                   }
[16:04:32.822]                 }
[16:04:32.822]                 else {
[16:04:32.822]                   if (TRUE) {
[16:04:32.822]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:04:32.822]                     {
[16:04:32.822]                       inherits <- base::inherits
[16:04:32.822]                       invokeRestart <- base::invokeRestart
[16:04:32.822]                       is.null <- base::is.null
[16:04:32.822]                       muffled <- FALSE
[16:04:32.822]                       if (inherits(cond, "message")) {
[16:04:32.822]                         muffled <- grepl(pattern, "muffleMessage")
[16:04:32.822]                         if (muffled) 
[16:04:32.822]                           invokeRestart("muffleMessage")
[16:04:32.822]                       }
[16:04:32.822]                       else if (inherits(cond, "warning")) {
[16:04:32.822]                         muffled <- grepl(pattern, "muffleWarning")
[16:04:32.822]                         if (muffled) 
[16:04:32.822]                           invokeRestart("muffleWarning")
[16:04:32.822]                       }
[16:04:32.822]                       else if (inherits(cond, "condition")) {
[16:04:32.822]                         if (!is.null(pattern)) {
[16:04:32.822]                           computeRestarts <- base::computeRestarts
[16:04:32.822]                           grepl <- base::grepl
[16:04:32.822]                           restarts <- computeRestarts(cond)
[16:04:32.822]                           for (restart in restarts) {
[16:04:32.822]                             name <- restart$name
[16:04:32.822]                             if (is.null(name)) 
[16:04:32.822]                               next
[16:04:32.822]                             if (!grepl(pattern, name)) 
[16:04:32.822]                               next
[16:04:32.822]                             invokeRestart(restart)
[16:04:32.822]                             muffled <- TRUE
[16:04:32.822]                             break
[16:04:32.822]                           }
[16:04:32.822]                         }
[16:04:32.822]                       }
[16:04:32.822]                       invisible(muffled)
[16:04:32.822]                     }
[16:04:32.822]                     muffleCondition(cond, pattern = "^muffle")
[16:04:32.822]                   }
[16:04:32.822]                 }
[16:04:32.822]             }
[16:04:32.822]         }))
[16:04:32.822]     }, error = function(ex) {
[16:04:32.822]         base::structure(base::list(value = NULL, visible = NULL, 
[16:04:32.822]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:04:32.822]                 ...future.rng), started = ...future.startTime, 
[16:04:32.822]             finished = Sys.time(), session_uuid = NA_character_, 
[16:04:32.822]             version = "1.8"), class = "FutureResult")
[16:04:32.822]     }, finally = {
[16:04:32.822]         if (!identical(...future.workdir, getwd())) 
[16:04:32.822]             setwd(...future.workdir)
[16:04:32.822]         {
[16:04:32.822]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:04:32.822]                 ...future.oldOptions$nwarnings <- NULL
[16:04:32.822]             }
[16:04:32.822]             base::options(...future.oldOptions)
[16:04:32.822]             if (.Platform$OS.type == "windows") {
[16:04:32.822]                 old_names <- names(...future.oldEnvVars)
[16:04:32.822]                 envs <- base::Sys.getenv()
[16:04:32.822]                 names <- names(envs)
[16:04:32.822]                 common <- intersect(names, old_names)
[16:04:32.822]                 added <- setdiff(names, old_names)
[16:04:32.822]                 removed <- setdiff(old_names, names)
[16:04:32.822]                 changed <- common[...future.oldEnvVars[common] != 
[16:04:32.822]                   envs[common]]
[16:04:32.822]                 NAMES <- toupper(changed)
[16:04:32.822]                 args <- list()
[16:04:32.822]                 for (kk in seq_along(NAMES)) {
[16:04:32.822]                   name <- changed[[kk]]
[16:04:32.822]                   NAME <- NAMES[[kk]]
[16:04:32.822]                   if (name != NAME && is.element(NAME, old_names)) 
[16:04:32.822]                     next
[16:04:32.822]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:04:32.822]                 }
[16:04:32.822]                 NAMES <- toupper(added)
[16:04:32.822]                 for (kk in seq_along(NAMES)) {
[16:04:32.822]                   name <- added[[kk]]
[16:04:32.822]                   NAME <- NAMES[[kk]]
[16:04:32.822]                   if (name != NAME && is.element(NAME, old_names)) 
[16:04:32.822]                     next
[16:04:32.822]                   args[[name]] <- ""
[16:04:32.822]                 }
[16:04:32.822]                 NAMES <- toupper(removed)
[16:04:32.822]                 for (kk in seq_along(NAMES)) {
[16:04:32.822]                   name <- removed[[kk]]
[16:04:32.822]                   NAME <- NAMES[[kk]]
[16:04:32.822]                   if (name != NAME && is.element(NAME, old_names)) 
[16:04:32.822]                     next
[16:04:32.822]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:04:32.822]                 }
[16:04:32.822]                 if (length(args) > 0) 
[16:04:32.822]                   base::do.call(base::Sys.setenv, args = args)
[16:04:32.822]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:04:32.822]             }
[16:04:32.822]             else {
[16:04:32.822]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:04:32.822]             }
[16:04:32.822]             {
[16:04:32.822]                 if (base::length(...future.futureOptionsAdded) > 
[16:04:32.822]                   0L) {
[16:04:32.822]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:04:32.822]                   base::names(opts) <- ...future.futureOptionsAdded
[16:04:32.822]                   base::options(opts)
[16:04:32.822]                 }
[16:04:32.822]                 {
[16:04:32.822]                   {
[16:04:32.822]                     base::options(mc.cores = ...future.mc.cores.old)
[16:04:32.822]                     NULL
[16:04:32.822]                   }
[16:04:32.822]                   options(future.plan = NULL)
[16:04:32.822]                   if (is.na(NA_character_)) 
[16:04:32.822]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:04:32.822]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:04:32.822]                   future::plan(list(function (..., workers = availableCores(), 
[16:04:32.822]                     lazy = FALSE, rscript_libs = .libPaths(), 
[16:04:32.822]                     envir = parent.frame()) 
[16:04:32.822]                   {
[16:04:32.822]                     if (is.function(workers)) 
[16:04:32.822]                       workers <- workers()
[16:04:32.822]                     workers <- structure(as.integer(workers), 
[16:04:32.822]                       class = class(workers))
[16:04:32.822]                     stop_if_not(length(workers) == 1, is.finite(workers), 
[16:04:32.822]                       workers >= 1)
[16:04:32.822]                     if (workers == 1L && !inherits(workers, "AsIs")) {
[16:04:32.822]                       return(sequential(..., lazy = TRUE, envir = envir))
[16:04:32.822]                     }
[16:04:32.822]                     future <- MultisessionFuture(..., workers = workers, 
[16:04:32.822]                       lazy = lazy, rscript_libs = rscript_libs, 
[16:04:32.822]                       envir = envir)
[16:04:32.822]                     if (!future$lazy) 
[16:04:32.822]                       future <- run(future)
[16:04:32.822]                     invisible(future)
[16:04:32.822]                   }), .cleanup = FALSE, .init = FALSE)
[16:04:32.822]                 }
[16:04:32.822]             }
[16:04:32.822]         }
[16:04:32.822]     })
[16:04:32.822]     if (TRUE) {
[16:04:32.822]         base::sink(type = "output", split = FALSE)
[16:04:32.822]         if (TRUE) {
[16:04:32.822]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:04:32.822]         }
[16:04:32.822]         else {
[16:04:32.822]             ...future.result["stdout"] <- base::list(NULL)
[16:04:32.822]         }
[16:04:32.822]         base::close(...future.stdout)
[16:04:32.822]         ...future.stdout <- NULL
[16:04:32.822]     }
[16:04:32.822]     ...future.result$conditions <- ...future.conditions
[16:04:32.822]     ...future.result$finished <- base::Sys.time()
[16:04:32.822]     ...future.result
[16:04:32.822] }
[16:04:32.827] MultisessionFuture started
[16:04:32.827] - Launch lazy future ... done
[16:04:32.827] run() for ‘MultisessionFuture’ ... done
[16:04:32.828] result() for ClusterFuture ...
[16:04:32.828] receiveMessageFromWorker() for ClusterFuture ...
[16:04:32.828] - Validating connection of MultisessionFuture
[16:04:32.871] - received message: FutureResult
[16:04:32.872] - Received FutureResult
[16:04:32.872] - Erased future from FutureRegistry
[16:04:32.872] result() for ClusterFuture ...
[16:04:32.872] - result already collected: FutureResult
[16:04:32.872] result() for ClusterFuture ... done
[16:04:32.872] receiveMessageFromWorker() for ClusterFuture ... done
[16:04:32.872] result() for ClusterFuture ... done
[16:04:32.873] result() for ClusterFuture ...
[16:04:32.873] - result already collected: FutureResult
[16:04:32.873] result() for ClusterFuture ... done
** Future evaluation with globals
[16:04:32.873] getGlobalsAndPackages() ...
[16:04:32.873] Searching for globals...
[16:04:32.874] - globals found: [3] ‘{’, ‘<-’, ‘a’
[16:04:32.875] Searching for globals ... DONE
[16:04:32.875] Resolving globals: FALSE
[16:04:32.875] The total size of the 1 globals is 56 bytes (56 bytes)
[16:04:32.876] The total size of the 1 globals exported for future expression (‘{; x <- a; }’) is 56 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘a’ (56 bytes of class ‘numeric’)
[16:04:32.876] - globals: [1] ‘a’
[16:04:32.876] 
[16:04:32.876] getGlobalsAndPackages() ... DONE
[16:04:32.876] run() for ‘Future’ ...
[16:04:32.876] - state: ‘created’
[16:04:32.877] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[16:04:32.891] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[16:04:32.891] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[16:04:32.891]   - Field: ‘node’
[16:04:32.891]   - Field: ‘label’
[16:04:32.891]   - Field: ‘local’
[16:04:32.891]   - Field: ‘owner’
[16:04:32.891]   - Field: ‘envir’
[16:04:32.891]   - Field: ‘workers’
[16:04:32.892]   - Field: ‘packages’
[16:04:32.892]   - Field: ‘gc’
[16:04:32.892]   - Field: ‘conditions’
[16:04:32.892]   - Field: ‘persistent’
[16:04:32.892]   - Field: ‘expr’
[16:04:32.892]   - Field: ‘uuid’
[16:04:32.892]   - Field: ‘seed’
[16:04:32.892]   - Field: ‘version’
[16:04:32.892]   - Field: ‘result’
[16:04:32.893]   - Field: ‘asynchronous’
[16:04:32.893]   - Field: ‘calls’
[16:04:32.893]   - Field: ‘globals’
[16:04:32.893]   - Field: ‘stdout’
[16:04:32.893]   - Field: ‘earlySignal’
[16:04:32.893]   - Field: ‘lazy’
[16:04:32.893]   - Field: ‘state’
[16:04:32.893] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[16:04:32.894] - Launch lazy future ...
[16:04:32.894] Packages needed by the future expression (n = 0): <none>
[16:04:32.894] Packages needed by future strategies (n = 0): <none>
[16:04:32.894] {
[16:04:32.894]     {
[16:04:32.894]         {
[16:04:32.894]             ...future.startTime <- base::Sys.time()
[16:04:32.894]             {
[16:04:32.894]                 {
[16:04:32.894]                   {
[16:04:32.894]                     {
[16:04:32.894]                       base::local({
[16:04:32.894]                         has_future <- base::requireNamespace("future", 
[16:04:32.894]                           quietly = TRUE)
[16:04:32.894]                         if (has_future) {
[16:04:32.894]                           ns <- base::getNamespace("future")
[16:04:32.894]                           version <- ns[[".package"]][["version"]]
[16:04:32.894]                           if (is.null(version)) 
[16:04:32.894]                             version <- utils::packageVersion("future")
[16:04:32.894]                         }
[16:04:32.894]                         else {
[16:04:32.894]                           version <- NULL
[16:04:32.894]                         }
[16:04:32.894]                         if (!has_future || version < "1.8.0") {
[16:04:32.894]                           info <- base::c(r_version = base::gsub("R version ", 
[16:04:32.894]                             "", base::R.version$version.string), 
[16:04:32.894]                             platform = base::sprintf("%s (%s-bit)", 
[16:04:32.894]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:04:32.894]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[16:04:32.894]                               "release", "version")], collapse = " "), 
[16:04:32.894]                             hostname = base::Sys.info()[["nodename"]])
[16:04:32.894]                           info <- base::sprintf("%s: %s", base::names(info), 
[16:04:32.894]                             info)
[16:04:32.894]                           info <- base::paste(info, collapse = "; ")
[16:04:32.894]                           if (!has_future) {
[16:04:32.894]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:04:32.894]                               info)
[16:04:32.894]                           }
[16:04:32.894]                           else {
[16:04:32.894]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:04:32.894]                               info, version)
[16:04:32.894]                           }
[16:04:32.894]                           base::stop(msg)
[16:04:32.894]                         }
[16:04:32.894]                       })
[16:04:32.894]                     }
[16:04:32.894]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[16:04:32.894]                     base::options(mc.cores = 1L)
[16:04:32.894]                   }
[16:04:32.894]                   options(future.plan = NULL)
[16:04:32.894]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:04:32.894]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:04:32.894]                 }
[16:04:32.894]                 ...future.workdir <- getwd()
[16:04:32.894]             }
[16:04:32.894]             ...future.oldOptions <- base::as.list(base::.Options)
[16:04:32.894]             ...future.oldEnvVars <- base::Sys.getenv()
[16:04:32.894]         }
[16:04:32.894]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:04:32.894]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:04:32.894]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:04:32.894]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:04:32.894]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:04:32.894]             future.stdout.windows.reencode = NULL, width = 80L)
[16:04:32.894]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:04:32.894]             base::names(...future.oldOptions))
[16:04:32.894]     }
[16:04:32.894]     if (FALSE) {
[16:04:32.894]     }
[16:04:32.894]     else {
[16:04:32.894]         if (TRUE) {
[16:04:32.894]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:04:32.894]                 open = "w")
[16:04:32.894]         }
[16:04:32.894]         else {
[16:04:32.894]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:04:32.894]                 windows = "NUL", "/dev/null"), open = "w")
[16:04:32.894]         }
[16:04:32.894]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:04:32.894]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:04:32.894]             base::sink(type = "output", split = FALSE)
[16:04:32.894]             base::close(...future.stdout)
[16:04:32.894]         }, add = TRUE)
[16:04:32.894]     }
[16:04:32.894]     ...future.frame <- base::sys.nframe()
[16:04:32.894]     ...future.conditions <- base::list()
[16:04:32.894]     ...future.rng <- base::globalenv()$.Random.seed
[16:04:32.894]     if (FALSE) {
[16:04:32.894]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:04:32.894]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:04:32.894]     }
[16:04:32.894]     ...future.result <- base::tryCatch({
[16:04:32.894]         base::withCallingHandlers({
[16:04:32.894]             ...future.value <- base::withVisible(base::local({
[16:04:32.894]                 ...future.makeSendCondition <- base::local({
[16:04:32.894]                   sendCondition <- NULL
[16:04:32.894]                   function(frame = 1L) {
[16:04:32.894]                     if (is.function(sendCondition)) 
[16:04:32.894]                       return(sendCondition)
[16:04:32.894]                     ns <- getNamespace("parallel")
[16:04:32.894]                     if (exists("sendData", mode = "function", 
[16:04:32.894]                       envir = ns)) {
[16:04:32.894]                       parallel_sendData <- get("sendData", mode = "function", 
[16:04:32.894]                         envir = ns)
[16:04:32.894]                       envir <- sys.frame(frame)
[16:04:32.894]                       master <- NULL
[16:04:32.894]                       while (!identical(envir, .GlobalEnv) && 
[16:04:32.894]                         !identical(envir, emptyenv())) {
[16:04:32.894]                         if (exists("master", mode = "list", envir = envir, 
[16:04:32.894]                           inherits = FALSE)) {
[16:04:32.894]                           master <- get("master", mode = "list", 
[16:04:32.894]                             envir = envir, inherits = FALSE)
[16:04:32.894]                           if (inherits(master, c("SOCKnode", 
[16:04:32.894]                             "SOCK0node"))) {
[16:04:32.894]                             sendCondition <<- function(cond) {
[16:04:32.894]                               data <- list(type = "VALUE", value = cond, 
[16:04:32.894]                                 success = TRUE)
[16:04:32.894]                               parallel_sendData(master, data)
[16:04:32.894]                             }
[16:04:32.894]                             return(sendCondition)
[16:04:32.894]                           }
[16:04:32.894]                         }
[16:04:32.894]                         frame <- frame + 1L
[16:04:32.894]                         envir <- sys.frame(frame)
[16:04:32.894]                       }
[16:04:32.894]                     }
[16:04:32.894]                     sendCondition <<- function(cond) NULL
[16:04:32.894]                   }
[16:04:32.894]                 })
[16:04:32.894]                 withCallingHandlers({
[16:04:32.894]                   {
[16:04:32.894]                     x <- a
[16:04:32.894]                   }
[16:04:32.894]                 }, immediateCondition = function(cond) {
[16:04:32.894]                   sendCondition <- ...future.makeSendCondition()
[16:04:32.894]                   sendCondition(cond)
[16:04:32.894]                   muffleCondition <- function (cond, pattern = "^muffle") 
[16:04:32.894]                   {
[16:04:32.894]                     inherits <- base::inherits
[16:04:32.894]                     invokeRestart <- base::invokeRestart
[16:04:32.894]                     is.null <- base::is.null
[16:04:32.894]                     muffled <- FALSE
[16:04:32.894]                     if (inherits(cond, "message")) {
[16:04:32.894]                       muffled <- grepl(pattern, "muffleMessage")
[16:04:32.894]                       if (muffled) 
[16:04:32.894]                         invokeRestart("muffleMessage")
[16:04:32.894]                     }
[16:04:32.894]                     else if (inherits(cond, "warning")) {
[16:04:32.894]                       muffled <- grepl(pattern, "muffleWarning")
[16:04:32.894]                       if (muffled) 
[16:04:32.894]                         invokeRestart("muffleWarning")
[16:04:32.894]                     }
[16:04:32.894]                     else if (inherits(cond, "condition")) {
[16:04:32.894]                       if (!is.null(pattern)) {
[16:04:32.894]                         computeRestarts <- base::computeRestarts
[16:04:32.894]                         grepl <- base::grepl
[16:04:32.894]                         restarts <- computeRestarts(cond)
[16:04:32.894]                         for (restart in restarts) {
[16:04:32.894]                           name <- restart$name
[16:04:32.894]                           if (is.null(name)) 
[16:04:32.894]                             next
[16:04:32.894]                           if (!grepl(pattern, name)) 
[16:04:32.894]                             next
[16:04:32.894]                           invokeRestart(restart)
[16:04:32.894]                           muffled <- TRUE
[16:04:32.894]                           break
[16:04:32.894]                         }
[16:04:32.894]                       }
[16:04:32.894]                     }
[16:04:32.894]                     invisible(muffled)
[16:04:32.894]                   }
[16:04:32.894]                   muffleCondition(cond)
[16:04:32.894]                 })
[16:04:32.894]             }))
[16:04:32.894]             future::FutureResult(value = ...future.value$value, 
[16:04:32.894]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:04:32.894]                   ...future.rng), globalenv = if (FALSE) 
[16:04:32.894]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:04:32.894]                     ...future.globalenv.names))
[16:04:32.894]                 else NULL, started = ...future.startTime, version = "1.8")
[16:04:32.894]         }, condition = base::local({
[16:04:32.894]             c <- base::c
[16:04:32.894]             inherits <- base::inherits
[16:04:32.894]             invokeRestart <- base::invokeRestart
[16:04:32.894]             length <- base::length
[16:04:32.894]             list <- base::list
[16:04:32.894]             seq.int <- base::seq.int
[16:04:32.894]             signalCondition <- base::signalCondition
[16:04:32.894]             sys.calls <- base::sys.calls
[16:04:32.894]             `[[` <- base::`[[`
[16:04:32.894]             `+` <- base::`+`
[16:04:32.894]             `<<-` <- base::`<<-`
[16:04:32.894]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:04:32.894]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:04:32.894]                   3L)]
[16:04:32.894]             }
[16:04:32.894]             function(cond) {
[16:04:32.894]                 is_error <- inherits(cond, "error")
[16:04:32.894]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:04:32.894]                   NULL)
[16:04:32.894]                 if (is_error) {
[16:04:32.894]                   sessionInformation <- function() {
[16:04:32.894]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:04:32.894]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:04:32.894]                       search = base::search(), system = base::Sys.info())
[16:04:32.894]                   }
[16:04:32.894]                   ...future.conditions[[length(...future.conditions) + 
[16:04:32.894]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:04:32.894]                     cond$call), session = sessionInformation(), 
[16:04:32.894]                     timestamp = base::Sys.time(), signaled = 0L)
[16:04:32.894]                   signalCondition(cond)
[16:04:32.894]                 }
[16:04:32.894]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:04:32.894]                 "immediateCondition"))) {
[16:04:32.894]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:04:32.894]                   ...future.conditions[[length(...future.conditions) + 
[16:04:32.894]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:04:32.894]                   if (TRUE && !signal) {
[16:04:32.894]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:04:32.894]                     {
[16:04:32.894]                       inherits <- base::inherits
[16:04:32.894]                       invokeRestart <- base::invokeRestart
[16:04:32.894]                       is.null <- base::is.null
[16:04:32.894]                       muffled <- FALSE
[16:04:32.894]                       if (inherits(cond, "message")) {
[16:04:32.894]                         muffled <- grepl(pattern, "muffleMessage")
[16:04:32.894]                         if (muffled) 
[16:04:32.894]                           invokeRestart("muffleMessage")
[16:04:32.894]                       }
[16:04:32.894]                       else if (inherits(cond, "warning")) {
[16:04:32.894]                         muffled <- grepl(pattern, "muffleWarning")
[16:04:32.894]                         if (muffled) 
[16:04:32.894]                           invokeRestart("muffleWarning")
[16:04:32.894]                       }
[16:04:32.894]                       else if (inherits(cond, "condition")) {
[16:04:32.894]                         if (!is.null(pattern)) {
[16:04:32.894]                           computeRestarts <- base::computeRestarts
[16:04:32.894]                           grepl <- base::grepl
[16:04:32.894]                           restarts <- computeRestarts(cond)
[16:04:32.894]                           for (restart in restarts) {
[16:04:32.894]                             name <- restart$name
[16:04:32.894]                             if (is.null(name)) 
[16:04:32.894]                               next
[16:04:32.894]                             if (!grepl(pattern, name)) 
[16:04:32.894]                               next
[16:04:32.894]                             invokeRestart(restart)
[16:04:32.894]                             muffled <- TRUE
[16:04:32.894]                             break
[16:04:32.894]                           }
[16:04:32.894]                         }
[16:04:32.894]                       }
[16:04:32.894]                       invisible(muffled)
[16:04:32.894]                     }
[16:04:32.894]                     muffleCondition(cond, pattern = "^muffle")
[16:04:32.894]                   }
[16:04:32.894]                 }
[16:04:32.894]                 else {
[16:04:32.894]                   if (TRUE) {
[16:04:32.894]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:04:32.894]                     {
[16:04:32.894]                       inherits <- base::inherits
[16:04:32.894]                       invokeRestart <- base::invokeRestart
[16:04:32.894]                       is.null <- base::is.null
[16:04:32.894]                       muffled <- FALSE
[16:04:32.894]                       if (inherits(cond, "message")) {
[16:04:32.894]                         muffled <- grepl(pattern, "muffleMessage")
[16:04:32.894]                         if (muffled) 
[16:04:32.894]                           invokeRestart("muffleMessage")
[16:04:32.894]                       }
[16:04:32.894]                       else if (inherits(cond, "warning")) {
[16:04:32.894]                         muffled <- grepl(pattern, "muffleWarning")
[16:04:32.894]                         if (muffled) 
[16:04:32.894]                           invokeRestart("muffleWarning")
[16:04:32.894]                       }
[16:04:32.894]                       else if (inherits(cond, "condition")) {
[16:04:32.894]                         if (!is.null(pattern)) {
[16:04:32.894]                           computeRestarts <- base::computeRestarts
[16:04:32.894]                           grepl <- base::grepl
[16:04:32.894]                           restarts <- computeRestarts(cond)
[16:04:32.894]                           for (restart in restarts) {
[16:04:32.894]                             name <- restart$name
[16:04:32.894]                             if (is.null(name)) 
[16:04:32.894]                               next
[16:04:32.894]                             if (!grepl(pattern, name)) 
[16:04:32.894]                               next
[16:04:32.894]                             invokeRestart(restart)
[16:04:32.894]                             muffled <- TRUE
[16:04:32.894]                             break
[16:04:32.894]                           }
[16:04:32.894]                         }
[16:04:32.894]                       }
[16:04:32.894]                       invisible(muffled)
[16:04:32.894]                     }
[16:04:32.894]                     muffleCondition(cond, pattern = "^muffle")
[16:04:32.894]                   }
[16:04:32.894]                 }
[16:04:32.894]             }
[16:04:32.894]         }))
[16:04:32.894]     }, error = function(ex) {
[16:04:32.894]         base::structure(base::list(value = NULL, visible = NULL, 
[16:04:32.894]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:04:32.894]                 ...future.rng), started = ...future.startTime, 
[16:04:32.894]             finished = Sys.time(), session_uuid = NA_character_, 
[16:04:32.894]             version = "1.8"), class = "FutureResult")
[16:04:32.894]     }, finally = {
[16:04:32.894]         if (!identical(...future.workdir, getwd())) 
[16:04:32.894]             setwd(...future.workdir)
[16:04:32.894]         {
[16:04:32.894]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:04:32.894]                 ...future.oldOptions$nwarnings <- NULL
[16:04:32.894]             }
[16:04:32.894]             base::options(...future.oldOptions)
[16:04:32.894]             if (.Platform$OS.type == "windows") {
[16:04:32.894]                 old_names <- names(...future.oldEnvVars)
[16:04:32.894]                 envs <- base::Sys.getenv()
[16:04:32.894]                 names <- names(envs)
[16:04:32.894]                 common <- intersect(names, old_names)
[16:04:32.894]                 added <- setdiff(names, old_names)
[16:04:32.894]                 removed <- setdiff(old_names, names)
[16:04:32.894]                 changed <- common[...future.oldEnvVars[common] != 
[16:04:32.894]                   envs[common]]
[16:04:32.894]                 NAMES <- toupper(changed)
[16:04:32.894]                 args <- list()
[16:04:32.894]                 for (kk in seq_along(NAMES)) {
[16:04:32.894]                   name <- changed[[kk]]
[16:04:32.894]                   NAME <- NAMES[[kk]]
[16:04:32.894]                   if (name != NAME && is.element(NAME, old_names)) 
[16:04:32.894]                     next
[16:04:32.894]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:04:32.894]                 }
[16:04:32.894]                 NAMES <- toupper(added)
[16:04:32.894]                 for (kk in seq_along(NAMES)) {
[16:04:32.894]                   name <- added[[kk]]
[16:04:32.894]                   NAME <- NAMES[[kk]]
[16:04:32.894]                   if (name != NAME && is.element(NAME, old_names)) 
[16:04:32.894]                     next
[16:04:32.894]                   args[[name]] <- ""
[16:04:32.894]                 }
[16:04:32.894]                 NAMES <- toupper(removed)
[16:04:32.894]                 for (kk in seq_along(NAMES)) {
[16:04:32.894]                   name <- removed[[kk]]
[16:04:32.894]                   NAME <- NAMES[[kk]]
[16:04:32.894]                   if (name != NAME && is.element(NAME, old_names)) 
[16:04:32.894]                     next
[16:04:32.894]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:04:32.894]                 }
[16:04:32.894]                 if (length(args) > 0) 
[16:04:32.894]                   base::do.call(base::Sys.setenv, args = args)
[16:04:32.894]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:04:32.894]             }
[16:04:32.894]             else {
[16:04:32.894]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:04:32.894]             }
[16:04:32.894]             {
[16:04:32.894]                 if (base::length(...future.futureOptionsAdded) > 
[16:04:32.894]                   0L) {
[16:04:32.894]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:04:32.894]                   base::names(opts) <- ...future.futureOptionsAdded
[16:04:32.894]                   base::options(opts)
[16:04:32.894]                 }
[16:04:32.894]                 {
[16:04:32.894]                   {
[16:04:32.894]                     base::options(mc.cores = ...future.mc.cores.old)
[16:04:32.894]                     NULL
[16:04:32.894]                   }
[16:04:32.894]                   options(future.plan = NULL)
[16:04:32.894]                   if (is.na(NA_character_)) 
[16:04:32.894]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:04:32.894]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:04:32.894]                   future::plan(list(function (..., workers = availableCores(), 
[16:04:32.894]                     lazy = FALSE, rscript_libs = .libPaths(), 
[16:04:32.894]                     envir = parent.frame()) 
[16:04:32.894]                   {
[16:04:32.894]                     if (is.function(workers)) 
[16:04:32.894]                       workers <- workers()
[16:04:32.894]                     workers <- structure(as.integer(workers), 
[16:04:32.894]                       class = class(workers))
[16:04:32.894]                     stop_if_not(length(workers) == 1, is.finite(workers), 
[16:04:32.894]                       workers >= 1)
[16:04:32.894]                     if (workers == 1L && !inherits(workers, "AsIs")) {
[16:04:32.894]                       return(sequential(..., lazy = TRUE, envir = envir))
[16:04:32.894]                     }
[16:04:32.894]                     future <- MultisessionFuture(..., workers = workers, 
[16:04:32.894]                       lazy = lazy, rscript_libs = rscript_libs, 
[16:04:32.894]                       envir = envir)
[16:04:32.894]                     if (!future$lazy) 
[16:04:32.894]                       future <- run(future)
[16:04:32.894]                     invisible(future)
[16:04:32.894]                   }), .cleanup = FALSE, .init = FALSE)
[16:04:32.894]                 }
[16:04:32.894]             }
[16:04:32.894]         }
[16:04:32.894]     })
[16:04:32.894]     if (TRUE) {
[16:04:32.894]         base::sink(type = "output", split = FALSE)
[16:04:32.894]         if (TRUE) {
[16:04:32.894]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:04:32.894]         }
[16:04:32.894]         else {
[16:04:32.894]             ...future.result["stdout"] <- base::list(NULL)
[16:04:32.894]         }
[16:04:32.894]         base::close(...future.stdout)
[16:04:32.894]         ...future.stdout <- NULL
[16:04:32.894]     }
[16:04:32.894]     ...future.result$conditions <- ...future.conditions
[16:04:32.894]     ...future.result$finished <- base::Sys.time()
[16:04:32.894]     ...future.result
[16:04:32.894] }
[16:04:32.897] Exporting 1 global objects (56 bytes) to cluster node #1 ...
[16:04:32.898] Exporting ‘a’ (56 bytes) to cluster node #1 ...
[16:04:32.898] Exporting ‘a’ (56 bytes) to cluster node #1 ... DONE
[16:04:32.898] Exporting 1 global objects (56 bytes) to cluster node #1 ... DONE
[16:04:32.899] MultisessionFuture started
[16:04:32.899] - Launch lazy future ... done
[16:04:32.899] run() for ‘MultisessionFuture’ ... done
[16:04:32.899] result() for ClusterFuture ...
[16:04:32.900] receiveMessageFromWorker() for ClusterFuture ...
[16:04:32.900] - Validating connection of MultisessionFuture
[16:04:32.943] - received message: FutureResult
[16:04:32.944] - Received FutureResult
[16:04:32.944] - Erased future from FutureRegistry
[16:04:32.944] result() for ClusterFuture ...
[16:04:32.944] - result already collected: FutureResult
[16:04:32.944] result() for ClusterFuture ... done
[16:04:32.944] receiveMessageFromWorker() for ClusterFuture ... done
[16:04:32.944] result() for ClusterFuture ... done
[16:04:32.944] result() for ClusterFuture ...
[16:04:32.944] - result already collected: FutureResult
[16:04:32.945] result() for ClusterFuture ... done
** Future evaluation with errors
[16:04:32.945] getGlobalsAndPackages() ...
[16:04:32.945] Searching for globals...
[16:04:32.947] - globals found: [3] ‘{’, ‘<-’, ‘stop’
[16:04:32.947] Searching for globals ... DONE
[16:04:32.947] Resolving globals: FALSE
[16:04:32.948] 
[16:04:32.948] 
[16:04:32.948] getGlobalsAndPackages() ... DONE
[16:04:32.948] run() for ‘Future’ ...
[16:04:32.948] - state: ‘created’
[16:04:32.948] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[16:04:32.963] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[16:04:32.963] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[16:04:32.963]   - Field: ‘node’
[16:04:32.963]   - Field: ‘label’
[16:04:32.963]   - Field: ‘local’
[16:04:32.963]   - Field: ‘owner’
[16:04:32.963]   - Field: ‘envir’
[16:04:32.963]   - Field: ‘workers’
[16:04:32.963]   - Field: ‘packages’
[16:04:32.964]   - Field: ‘gc’
[16:04:32.964]   - Field: ‘conditions’
[16:04:32.964]   - Field: ‘persistent’
[16:04:32.964]   - Field: ‘expr’
[16:04:32.964]   - Field: ‘uuid’
[16:04:32.964]   - Field: ‘seed’
[16:04:32.964]   - Field: ‘version’
[16:04:32.964]   - Field: ‘result’
[16:04:32.964]   - Field: ‘asynchronous’
[16:04:32.965]   - Field: ‘calls’
[16:04:32.965]   - Field: ‘globals’
[16:04:32.965]   - Field: ‘stdout’
[16:04:32.965]   - Field: ‘earlySignal’
[16:04:32.965]   - Field: ‘lazy’
[16:04:32.965]   - Field: ‘state’
[16:04:32.965] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[16:04:32.965] - Launch lazy future ...
[16:04:32.966] Packages needed by the future expression (n = 0): <none>
[16:04:32.966] Packages needed by future strategies (n = 0): <none>
[16:04:32.966] {
[16:04:32.966]     {
[16:04:32.966]         {
[16:04:32.966]             ...future.startTime <- base::Sys.time()
[16:04:32.966]             {
[16:04:32.966]                 {
[16:04:32.966]                   {
[16:04:32.966]                     {
[16:04:32.966]                       base::local({
[16:04:32.966]                         has_future <- base::requireNamespace("future", 
[16:04:32.966]                           quietly = TRUE)
[16:04:32.966]                         if (has_future) {
[16:04:32.966]                           ns <- base::getNamespace("future")
[16:04:32.966]                           version <- ns[[".package"]][["version"]]
[16:04:32.966]                           if (is.null(version)) 
[16:04:32.966]                             version <- utils::packageVersion("future")
[16:04:32.966]                         }
[16:04:32.966]                         else {
[16:04:32.966]                           version <- NULL
[16:04:32.966]                         }
[16:04:32.966]                         if (!has_future || version < "1.8.0") {
[16:04:32.966]                           info <- base::c(r_version = base::gsub("R version ", 
[16:04:32.966]                             "", base::R.version$version.string), 
[16:04:32.966]                             platform = base::sprintf("%s (%s-bit)", 
[16:04:32.966]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:04:32.966]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[16:04:32.966]                               "release", "version")], collapse = " "), 
[16:04:32.966]                             hostname = base::Sys.info()[["nodename"]])
[16:04:32.966]                           info <- base::sprintf("%s: %s", base::names(info), 
[16:04:32.966]                             info)
[16:04:32.966]                           info <- base::paste(info, collapse = "; ")
[16:04:32.966]                           if (!has_future) {
[16:04:32.966]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:04:32.966]                               info)
[16:04:32.966]                           }
[16:04:32.966]                           else {
[16:04:32.966]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:04:32.966]                               info, version)
[16:04:32.966]                           }
[16:04:32.966]                           base::stop(msg)
[16:04:32.966]                         }
[16:04:32.966]                       })
[16:04:32.966]                     }
[16:04:32.966]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[16:04:32.966]                     base::options(mc.cores = 1L)
[16:04:32.966]                   }
[16:04:32.966]                   options(future.plan = NULL)
[16:04:32.966]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:04:32.966]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:04:32.966]                 }
[16:04:32.966]                 ...future.workdir <- getwd()
[16:04:32.966]             }
[16:04:32.966]             ...future.oldOptions <- base::as.list(base::.Options)
[16:04:32.966]             ...future.oldEnvVars <- base::Sys.getenv()
[16:04:32.966]         }
[16:04:32.966]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:04:32.966]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:04:32.966]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:04:32.966]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:04:32.966]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:04:32.966]             future.stdout.windows.reencode = NULL, width = 80L)
[16:04:32.966]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:04:32.966]             base::names(...future.oldOptions))
[16:04:32.966]     }
[16:04:32.966]     if (FALSE) {
[16:04:32.966]     }
[16:04:32.966]     else {
[16:04:32.966]         if (TRUE) {
[16:04:32.966]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:04:32.966]                 open = "w")
[16:04:32.966]         }
[16:04:32.966]         else {
[16:04:32.966]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:04:32.966]                 windows = "NUL", "/dev/null"), open = "w")
[16:04:32.966]         }
[16:04:32.966]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:04:32.966]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:04:32.966]             base::sink(type = "output", split = FALSE)
[16:04:32.966]             base::close(...future.stdout)
[16:04:32.966]         }, add = TRUE)
[16:04:32.966]     }
[16:04:32.966]     ...future.frame <- base::sys.nframe()
[16:04:32.966]     ...future.conditions <- base::list()
[16:04:32.966]     ...future.rng <- base::globalenv()$.Random.seed
[16:04:32.966]     if (FALSE) {
[16:04:32.966]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:04:32.966]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:04:32.966]     }
[16:04:32.966]     ...future.result <- base::tryCatch({
[16:04:32.966]         base::withCallingHandlers({
[16:04:32.966]             ...future.value <- base::withVisible(base::local({
[16:04:32.966]                 ...future.makeSendCondition <- base::local({
[16:04:32.966]                   sendCondition <- NULL
[16:04:32.966]                   function(frame = 1L) {
[16:04:32.966]                     if (is.function(sendCondition)) 
[16:04:32.966]                       return(sendCondition)
[16:04:32.966]                     ns <- getNamespace("parallel")
[16:04:32.966]                     if (exists("sendData", mode = "function", 
[16:04:32.966]                       envir = ns)) {
[16:04:32.966]                       parallel_sendData <- get("sendData", mode = "function", 
[16:04:32.966]                         envir = ns)
[16:04:32.966]                       envir <- sys.frame(frame)
[16:04:32.966]                       master <- NULL
[16:04:32.966]                       while (!identical(envir, .GlobalEnv) && 
[16:04:32.966]                         !identical(envir, emptyenv())) {
[16:04:32.966]                         if (exists("master", mode = "list", envir = envir, 
[16:04:32.966]                           inherits = FALSE)) {
[16:04:32.966]                           master <- get("master", mode = "list", 
[16:04:32.966]                             envir = envir, inherits = FALSE)
[16:04:32.966]                           if (inherits(master, c("SOCKnode", 
[16:04:32.966]                             "SOCK0node"))) {
[16:04:32.966]                             sendCondition <<- function(cond) {
[16:04:32.966]                               data <- list(type = "VALUE", value = cond, 
[16:04:32.966]                                 success = TRUE)
[16:04:32.966]                               parallel_sendData(master, data)
[16:04:32.966]                             }
[16:04:32.966]                             return(sendCondition)
[16:04:32.966]                           }
[16:04:32.966]                         }
[16:04:32.966]                         frame <- frame + 1L
[16:04:32.966]                         envir <- sys.frame(frame)
[16:04:32.966]                       }
[16:04:32.966]                     }
[16:04:32.966]                     sendCondition <<- function(cond) NULL
[16:04:32.966]                   }
[16:04:32.966]                 })
[16:04:32.966]                 withCallingHandlers({
[16:04:32.966]                   {
[16:04:32.966]                     x <- 3
[16:04:32.966]                     stop("Woops!")
[16:04:32.966]                     x
[16:04:32.966]                   }
[16:04:32.966]                 }, immediateCondition = function(cond) {
[16:04:32.966]                   sendCondition <- ...future.makeSendCondition()
[16:04:32.966]                   sendCondition(cond)
[16:04:32.966]                   muffleCondition <- function (cond, pattern = "^muffle") 
[16:04:32.966]                   {
[16:04:32.966]                     inherits <- base::inherits
[16:04:32.966]                     invokeRestart <- base::invokeRestart
[16:04:32.966]                     is.null <- base::is.null
[16:04:32.966]                     muffled <- FALSE
[16:04:32.966]                     if (inherits(cond, "message")) {
[16:04:32.966]                       muffled <- grepl(pattern, "muffleMessage")
[16:04:32.966]                       if (muffled) 
[16:04:32.966]                         invokeRestart("muffleMessage")
[16:04:32.966]                     }
[16:04:32.966]                     else if (inherits(cond, "warning")) {
[16:04:32.966]                       muffled <- grepl(pattern, "muffleWarning")
[16:04:32.966]                       if (muffled) 
[16:04:32.966]                         invokeRestart("muffleWarning")
[16:04:32.966]                     }
[16:04:32.966]                     else if (inherits(cond, "condition")) {
[16:04:32.966]                       if (!is.null(pattern)) {
[16:04:32.966]                         computeRestarts <- base::computeRestarts
[16:04:32.966]                         grepl <- base::grepl
[16:04:32.966]                         restarts <- computeRestarts(cond)
[16:04:32.966]                         for (restart in restarts) {
[16:04:32.966]                           name <- restart$name
[16:04:32.966]                           if (is.null(name)) 
[16:04:32.966]                             next
[16:04:32.966]                           if (!grepl(pattern, name)) 
[16:04:32.966]                             next
[16:04:32.966]                           invokeRestart(restart)
[16:04:32.966]                           muffled <- TRUE
[16:04:32.966]                           break
[16:04:32.966]                         }
[16:04:32.966]                       }
[16:04:32.966]                     }
[16:04:32.966]                     invisible(muffled)
[16:04:32.966]                   }
[16:04:32.966]                   muffleCondition(cond)
[16:04:32.966]                 })
[16:04:32.966]             }))
[16:04:32.966]             future::FutureResult(value = ...future.value$value, 
[16:04:32.966]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:04:32.966]                   ...future.rng), globalenv = if (FALSE) 
[16:04:32.966]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:04:32.966]                     ...future.globalenv.names))
[16:04:32.966]                 else NULL, started = ...future.startTime, version = "1.8")
[16:04:32.966]         }, condition = base::local({
[16:04:32.966]             c <- base::c
[16:04:32.966]             inherits <- base::inherits
[16:04:32.966]             invokeRestart <- base::invokeRestart
[16:04:32.966]             length <- base::length
[16:04:32.966]             list <- base::list
[16:04:32.966]             seq.int <- base::seq.int
[16:04:32.966]             signalCondition <- base::signalCondition
[16:04:32.966]             sys.calls <- base::sys.calls
[16:04:32.966]             `[[` <- base::`[[`
[16:04:32.966]             `+` <- base::`+`
[16:04:32.966]             `<<-` <- base::`<<-`
[16:04:32.966]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:04:32.966]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:04:32.966]                   3L)]
[16:04:32.966]             }
[16:04:32.966]             function(cond) {
[16:04:32.966]                 is_error <- inherits(cond, "error")
[16:04:32.966]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:04:32.966]                   NULL)
[16:04:32.966]                 if (is_error) {
[16:04:32.966]                   sessionInformation <- function() {
[16:04:32.966]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:04:32.966]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:04:32.966]                       search = base::search(), system = base::Sys.info())
[16:04:32.966]                   }
[16:04:32.966]                   ...future.conditions[[length(...future.conditions) + 
[16:04:32.966]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:04:32.966]                     cond$call), session = sessionInformation(), 
[16:04:32.966]                     timestamp = base::Sys.time(), signaled = 0L)
[16:04:32.966]                   signalCondition(cond)
[16:04:32.966]                 }
[16:04:32.966]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:04:32.966]                 "immediateCondition"))) {
[16:04:32.966]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:04:32.966]                   ...future.conditions[[length(...future.conditions) + 
[16:04:32.966]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:04:32.966]                   if (TRUE && !signal) {
[16:04:32.966]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:04:32.966]                     {
[16:04:32.966]                       inherits <- base::inherits
[16:04:32.966]                       invokeRestart <- base::invokeRestart
[16:04:32.966]                       is.null <- base::is.null
[16:04:32.966]                       muffled <- FALSE
[16:04:32.966]                       if (inherits(cond, "message")) {
[16:04:32.966]                         muffled <- grepl(pattern, "muffleMessage")
[16:04:32.966]                         if (muffled) 
[16:04:32.966]                           invokeRestart("muffleMessage")
[16:04:32.966]                       }
[16:04:32.966]                       else if (inherits(cond, "warning")) {
[16:04:32.966]                         muffled <- grepl(pattern, "muffleWarning")
[16:04:32.966]                         if (muffled) 
[16:04:32.966]                           invokeRestart("muffleWarning")
[16:04:32.966]                       }
[16:04:32.966]                       else if (inherits(cond, "condition")) {
[16:04:32.966]                         if (!is.null(pattern)) {
[16:04:32.966]                           computeRestarts <- base::computeRestarts
[16:04:32.966]                           grepl <- base::grepl
[16:04:32.966]                           restarts <- computeRestarts(cond)
[16:04:32.966]                           for (restart in restarts) {
[16:04:32.966]                             name <- restart$name
[16:04:32.966]                             if (is.null(name)) 
[16:04:32.966]                               next
[16:04:32.966]                             if (!grepl(pattern, name)) 
[16:04:32.966]                               next
[16:04:32.966]                             invokeRestart(restart)
[16:04:32.966]                             muffled <- TRUE
[16:04:32.966]                             break
[16:04:32.966]                           }
[16:04:32.966]                         }
[16:04:32.966]                       }
[16:04:32.966]                       invisible(muffled)
[16:04:32.966]                     }
[16:04:32.966]                     muffleCondition(cond, pattern = "^muffle")
[16:04:32.966]                   }
[16:04:32.966]                 }
[16:04:32.966]                 else {
[16:04:32.966]                   if (TRUE) {
[16:04:32.966]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:04:32.966]                     {
[16:04:32.966]                       inherits <- base::inherits
[16:04:32.966]                       invokeRestart <- base::invokeRestart
[16:04:32.966]                       is.null <- base::is.null
[16:04:32.966]                       muffled <- FALSE
[16:04:32.966]                       if (inherits(cond, "message")) {
[16:04:32.966]                         muffled <- grepl(pattern, "muffleMessage")
[16:04:32.966]                         if (muffled) 
[16:04:32.966]                           invokeRestart("muffleMessage")
[16:04:32.966]                       }
[16:04:32.966]                       else if (inherits(cond, "warning")) {
[16:04:32.966]                         muffled <- grepl(pattern, "muffleWarning")
[16:04:32.966]                         if (muffled) 
[16:04:32.966]                           invokeRestart("muffleWarning")
[16:04:32.966]                       }
[16:04:32.966]                       else if (inherits(cond, "condition")) {
[16:04:32.966]                         if (!is.null(pattern)) {
[16:04:32.966]                           computeRestarts <- base::computeRestarts
[16:04:32.966]                           grepl <- base::grepl
[16:04:32.966]                           restarts <- computeRestarts(cond)
[16:04:32.966]                           for (restart in restarts) {
[16:04:32.966]                             name <- restart$name
[16:04:32.966]                             if (is.null(name)) 
[16:04:32.966]                               next
[16:04:32.966]                             if (!grepl(pattern, name)) 
[16:04:32.966]                               next
[16:04:32.966]                             invokeRestart(restart)
[16:04:32.966]                             muffled <- TRUE
[16:04:32.966]                             break
[16:04:32.966]                           }
[16:04:32.966]                         }
[16:04:32.966]                       }
[16:04:32.966]                       invisible(muffled)
[16:04:32.966]                     }
[16:04:32.966]                     muffleCondition(cond, pattern = "^muffle")
[16:04:32.966]                   }
[16:04:32.966]                 }
[16:04:32.966]             }
[16:04:32.966]         }))
[16:04:32.966]     }, error = function(ex) {
[16:04:32.966]         base::structure(base::list(value = NULL, visible = NULL, 
[16:04:32.966]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:04:32.966]                 ...future.rng), started = ...future.startTime, 
[16:04:32.966]             finished = Sys.time(), session_uuid = NA_character_, 
[16:04:32.966]             version = "1.8"), class = "FutureResult")
[16:04:32.966]     }, finally = {
[16:04:32.966]         if (!identical(...future.workdir, getwd())) 
[16:04:32.966]             setwd(...future.workdir)
[16:04:32.966]         {
[16:04:32.966]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:04:32.966]                 ...future.oldOptions$nwarnings <- NULL
[16:04:32.966]             }
[16:04:32.966]             base::options(...future.oldOptions)
[16:04:32.966]             if (.Platform$OS.type == "windows") {
[16:04:32.966]                 old_names <- names(...future.oldEnvVars)
[16:04:32.966]                 envs <- base::Sys.getenv()
[16:04:32.966]                 names <- names(envs)
[16:04:32.966]                 common <- intersect(names, old_names)
[16:04:32.966]                 added <- setdiff(names, old_names)
[16:04:32.966]                 removed <- setdiff(old_names, names)
[16:04:32.966]                 changed <- common[...future.oldEnvVars[common] != 
[16:04:32.966]                   envs[common]]
[16:04:32.966]                 NAMES <- toupper(changed)
[16:04:32.966]                 args <- list()
[16:04:32.966]                 for (kk in seq_along(NAMES)) {
[16:04:32.966]                   name <- changed[[kk]]
[16:04:32.966]                   NAME <- NAMES[[kk]]
[16:04:32.966]                   if (name != NAME && is.element(NAME, old_names)) 
[16:04:32.966]                     next
[16:04:32.966]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:04:32.966]                 }
[16:04:32.966]                 NAMES <- toupper(added)
[16:04:32.966]                 for (kk in seq_along(NAMES)) {
[16:04:32.966]                   name <- added[[kk]]
[16:04:32.966]                   NAME <- NAMES[[kk]]
[16:04:32.966]                   if (name != NAME && is.element(NAME, old_names)) 
[16:04:32.966]                     next
[16:04:32.966]                   args[[name]] <- ""
[16:04:32.966]                 }
[16:04:32.966]                 NAMES <- toupper(removed)
[16:04:32.966]                 for (kk in seq_along(NAMES)) {
[16:04:32.966]                   name <- removed[[kk]]
[16:04:32.966]                   NAME <- NAMES[[kk]]
[16:04:32.966]                   if (name != NAME && is.element(NAME, old_names)) 
[16:04:32.966]                     next
[16:04:32.966]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:04:32.966]                 }
[16:04:32.966]                 if (length(args) > 0) 
[16:04:32.966]                   base::do.call(base::Sys.setenv, args = args)
[16:04:32.966]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:04:32.966]             }
[16:04:32.966]             else {
[16:04:32.966]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:04:32.966]             }
[16:04:32.966]             {
[16:04:32.966]                 if (base::length(...future.futureOptionsAdded) > 
[16:04:32.966]                   0L) {
[16:04:32.966]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:04:32.966]                   base::names(opts) <- ...future.futureOptionsAdded
[16:04:32.966]                   base::options(opts)
[16:04:32.966]                 }
[16:04:32.966]                 {
[16:04:32.966]                   {
[16:04:32.966]                     base::options(mc.cores = ...future.mc.cores.old)
[16:04:32.966]                     NULL
[16:04:32.966]                   }
[16:04:32.966]                   options(future.plan = NULL)
[16:04:32.966]                   if (is.na(NA_character_)) 
[16:04:32.966]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:04:32.966]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:04:32.966]                   future::plan(list(function (..., workers = availableCores(), 
[16:04:32.966]                     lazy = FALSE, rscript_libs = .libPaths(), 
[16:04:32.966]                     envir = parent.frame()) 
[16:04:32.966]                   {
[16:04:32.966]                     if (is.function(workers)) 
[16:04:32.966]                       workers <- workers()
[16:04:32.966]                     workers <- structure(as.integer(workers), 
[16:04:32.966]                       class = class(workers))
[16:04:32.966]                     stop_if_not(length(workers) == 1, is.finite(workers), 
[16:04:32.966]                       workers >= 1)
[16:04:32.966]                     if (workers == 1L && !inherits(workers, "AsIs")) {
[16:04:32.966]                       return(sequential(..., lazy = TRUE, envir = envir))
[16:04:32.966]                     }
[16:04:32.966]                     future <- MultisessionFuture(..., workers = workers, 
[16:04:32.966]                       lazy = lazy, rscript_libs = rscript_libs, 
[16:04:32.966]                       envir = envir)
[16:04:32.966]                     if (!future$lazy) 
[16:04:32.966]                       future <- run(future)
[16:04:32.966]                     invisible(future)
[16:04:32.966]                   }), .cleanup = FALSE, .init = FALSE)
[16:04:32.966]                 }
[16:04:32.966]             }
[16:04:32.966]         }
[16:04:32.966]     })
[16:04:32.966]     if (TRUE) {
[16:04:32.966]         base::sink(type = "output", split = FALSE)
[16:04:32.966]         if (TRUE) {
[16:04:32.966]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:04:32.966]         }
[16:04:32.966]         else {
[16:04:32.966]             ...future.result["stdout"] <- base::list(NULL)
[16:04:32.966]         }
[16:04:32.966]         base::close(...future.stdout)
[16:04:32.966]         ...future.stdout <- NULL
[16:04:32.966]     }
[16:04:32.966]     ...future.result$conditions <- ...future.conditions
[16:04:32.966]     ...future.result$finished <- base::Sys.time()
[16:04:32.966]     ...future.result
[16:04:32.966] }
[16:04:32.970] MultisessionFuture started
[16:04:32.970] - Launch lazy future ... done
[16:04:32.970] run() for ‘MultisessionFuture’ ... done
[16:04:32.970] result() for ClusterFuture ...
[16:04:32.970] receiveMessageFromWorker() for ClusterFuture ...
[16:04:32.971] - Validating connection of MultisessionFuture
[16:04:33.016] - received message: FutureResult
[16:04:33.016] - Received FutureResult
[16:04:33.016] - Erased future from FutureRegistry
[16:04:33.017] result() for ClusterFuture ...
[16:04:33.017] - result already collected: FutureResult
[16:04:33.017] result() for ClusterFuture ... done
[16:04:33.017] signalConditions() ...
[16:04:33.017]  - include = ‘immediateCondition’
[16:04:33.017]  - exclude = 
[16:04:33.017]  - resignal = FALSE
[16:04:33.017]  - Number of conditions: 1
[16:04:33.017] signalConditions() ... done
[16:04:33.018] receiveMessageFromWorker() for ClusterFuture ... done
[16:04:33.018] result() for ClusterFuture ... done
[16:04:33.018] result() for ClusterFuture ...
[16:04:33.018] - result already collected: FutureResult
[16:04:33.018] result() for ClusterFuture ... done
[16:04:33.018] signalConditions() ...
[16:04:33.018]  - include = ‘immediateCondition’
[16:04:33.018]  - exclude = 
[16:04:33.018]  - resignal = FALSE
[16:04:33.019]  - Number of conditions: 1
[16:04:33.019] signalConditions() ... done
[16:04:33.019] Future state: ‘finished’
[16:04:33.019] result() for ClusterFuture ...
[16:04:33.019] - result already collected: FutureResult
[16:04:33.019] result() for ClusterFuture ... done
[16:04:33.019] signalConditions() ...
[16:04:33.019]  - include = ‘condition’
[16:04:33.019]  - exclude = ‘immediateCondition’
[16:04:33.020]  - resignal = TRUE
[16:04:33.020]  - Number of conditions: 1
[16:04:33.020]  - Condition #1: ‘simpleError’, ‘error’, ‘condition’
[16:04:33.020] signalConditions() ... done
[16:04:33.020] getGlobalsAndPackages() ...
[16:04:33.021] Searching for globals...
[16:04:33.022] - globals found: [6] ‘{’, ‘if’, ‘==’, ‘%%’, ‘ii’, ‘stop’
[16:04:33.023] Searching for globals ... DONE
[16:04:33.023] Resolving globals: FALSE
[16:04:33.023] The total size of the 1 globals is 56 bytes (56 bytes)
[16:04:33.024] The total size of the 1 globals exported for future expression (‘{; if (ii%%2 == 0); stop("Woops!"); ii; }’) is 56 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘ii’ (56 bytes of class ‘numeric’)
[16:04:33.024] - globals: [1] ‘ii’
[16:04:33.024] 
[16:04:33.024] getGlobalsAndPackages() ... DONE
[16:04:33.024] run() for ‘Future’ ...
[16:04:33.024] - state: ‘created’
[16:04:33.025] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[16:04:33.042] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[16:04:33.042] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[16:04:33.042]   - Field: ‘node’
[16:04:33.042]   - Field: ‘label’
[16:04:33.042]   - Field: ‘local’
[16:04:33.043]   - Field: ‘owner’
[16:04:33.043]   - Field: ‘envir’
[16:04:33.043]   - Field: ‘workers’
[16:04:33.043]   - Field: ‘packages’
[16:04:33.043]   - Field: ‘gc’
[16:04:33.043]   - Field: ‘conditions’
[16:04:33.043]   - Field: ‘persistent’
[16:04:33.043]   - Field: ‘expr’
[16:04:33.043]   - Field: ‘uuid’
[16:04:33.043]   - Field: ‘seed’
[16:04:33.043]   - Field: ‘version’
[16:04:33.044]   - Field: ‘result’
[16:04:33.044]   - Field: ‘asynchronous’
[16:04:33.044]   - Field: ‘calls’
[16:04:33.044]   - Field: ‘globals’
[16:04:33.044]   - Field: ‘stdout’
[16:04:33.044]   - Field: ‘earlySignal’
[16:04:33.044]   - Field: ‘lazy’
[16:04:33.044]   - Field: ‘state’
[16:04:33.044] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[16:04:33.044] - Launch lazy future ...
[16:04:33.045] Packages needed by the future expression (n = 0): <none>
[16:04:33.045] Packages needed by future strategies (n = 0): <none>
[16:04:33.045] {
[16:04:33.045]     {
[16:04:33.045]         {
[16:04:33.045]             ...future.startTime <- base::Sys.time()
[16:04:33.045]             {
[16:04:33.045]                 {
[16:04:33.045]                   {
[16:04:33.045]                     {
[16:04:33.045]                       base::local({
[16:04:33.045]                         has_future <- base::requireNamespace("future", 
[16:04:33.045]                           quietly = TRUE)
[16:04:33.045]                         if (has_future) {
[16:04:33.045]                           ns <- base::getNamespace("future")
[16:04:33.045]                           version <- ns[[".package"]][["version"]]
[16:04:33.045]                           if (is.null(version)) 
[16:04:33.045]                             version <- utils::packageVersion("future")
[16:04:33.045]                         }
[16:04:33.045]                         else {
[16:04:33.045]                           version <- NULL
[16:04:33.045]                         }
[16:04:33.045]                         if (!has_future || version < "1.8.0") {
[16:04:33.045]                           info <- base::c(r_version = base::gsub("R version ", 
[16:04:33.045]                             "", base::R.version$version.string), 
[16:04:33.045]                             platform = base::sprintf("%s (%s-bit)", 
[16:04:33.045]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:04:33.045]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[16:04:33.045]                               "release", "version")], collapse = " "), 
[16:04:33.045]                             hostname = base::Sys.info()[["nodename"]])
[16:04:33.045]                           info <- base::sprintf("%s: %s", base::names(info), 
[16:04:33.045]                             info)
[16:04:33.045]                           info <- base::paste(info, collapse = "; ")
[16:04:33.045]                           if (!has_future) {
[16:04:33.045]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:04:33.045]                               info)
[16:04:33.045]                           }
[16:04:33.045]                           else {
[16:04:33.045]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:04:33.045]                               info, version)
[16:04:33.045]                           }
[16:04:33.045]                           base::stop(msg)
[16:04:33.045]                         }
[16:04:33.045]                       })
[16:04:33.045]                     }
[16:04:33.045]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[16:04:33.045]                     base::options(mc.cores = 1L)
[16:04:33.045]                   }
[16:04:33.045]                   options(future.plan = NULL)
[16:04:33.045]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:04:33.045]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:04:33.045]                 }
[16:04:33.045]                 ...future.workdir <- getwd()
[16:04:33.045]             }
[16:04:33.045]             ...future.oldOptions <- base::as.list(base::.Options)
[16:04:33.045]             ...future.oldEnvVars <- base::Sys.getenv()
[16:04:33.045]         }
[16:04:33.045]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:04:33.045]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:04:33.045]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:04:33.045]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:04:33.045]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:04:33.045]             future.stdout.windows.reencode = NULL, width = 80L)
[16:04:33.045]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:04:33.045]             base::names(...future.oldOptions))
[16:04:33.045]     }
[16:04:33.045]     if (FALSE) {
[16:04:33.045]     }
[16:04:33.045]     else {
[16:04:33.045]         if (TRUE) {
[16:04:33.045]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:04:33.045]                 open = "w")
[16:04:33.045]         }
[16:04:33.045]         else {
[16:04:33.045]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:04:33.045]                 windows = "NUL", "/dev/null"), open = "w")
[16:04:33.045]         }
[16:04:33.045]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:04:33.045]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:04:33.045]             base::sink(type = "output", split = FALSE)
[16:04:33.045]             base::close(...future.stdout)
[16:04:33.045]         }, add = TRUE)
[16:04:33.045]     }
[16:04:33.045]     ...future.frame <- base::sys.nframe()
[16:04:33.045]     ...future.conditions <- base::list()
[16:04:33.045]     ...future.rng <- base::globalenv()$.Random.seed
[16:04:33.045]     if (FALSE) {
[16:04:33.045]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:04:33.045]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:04:33.045]     }
[16:04:33.045]     ...future.result <- base::tryCatch({
[16:04:33.045]         base::withCallingHandlers({
[16:04:33.045]             ...future.value <- base::withVisible(base::local({
[16:04:33.045]                 ...future.makeSendCondition <- base::local({
[16:04:33.045]                   sendCondition <- NULL
[16:04:33.045]                   function(frame = 1L) {
[16:04:33.045]                     if (is.function(sendCondition)) 
[16:04:33.045]                       return(sendCondition)
[16:04:33.045]                     ns <- getNamespace("parallel")
[16:04:33.045]                     if (exists("sendData", mode = "function", 
[16:04:33.045]                       envir = ns)) {
[16:04:33.045]                       parallel_sendData <- get("sendData", mode = "function", 
[16:04:33.045]                         envir = ns)
[16:04:33.045]                       envir <- sys.frame(frame)
[16:04:33.045]                       master <- NULL
[16:04:33.045]                       while (!identical(envir, .GlobalEnv) && 
[16:04:33.045]                         !identical(envir, emptyenv())) {
[16:04:33.045]                         if (exists("master", mode = "list", envir = envir, 
[16:04:33.045]                           inherits = FALSE)) {
[16:04:33.045]                           master <- get("master", mode = "list", 
[16:04:33.045]                             envir = envir, inherits = FALSE)
[16:04:33.045]                           if (inherits(master, c("SOCKnode", 
[16:04:33.045]                             "SOCK0node"))) {
[16:04:33.045]                             sendCondition <<- function(cond) {
[16:04:33.045]                               data <- list(type = "VALUE", value = cond, 
[16:04:33.045]                                 success = TRUE)
[16:04:33.045]                               parallel_sendData(master, data)
[16:04:33.045]                             }
[16:04:33.045]                             return(sendCondition)
[16:04:33.045]                           }
[16:04:33.045]                         }
[16:04:33.045]                         frame <- frame + 1L
[16:04:33.045]                         envir <- sys.frame(frame)
[16:04:33.045]                       }
[16:04:33.045]                     }
[16:04:33.045]                     sendCondition <<- function(cond) NULL
[16:04:33.045]                   }
[16:04:33.045]                 })
[16:04:33.045]                 withCallingHandlers({
[16:04:33.045]                   {
[16:04:33.045]                     if (ii%%2 == 0) 
[16:04:33.045]                       stop("Woops!")
[16:04:33.045]                     ii
[16:04:33.045]                   }
[16:04:33.045]                 }, immediateCondition = function(cond) {
[16:04:33.045]                   sendCondition <- ...future.makeSendCondition()
[16:04:33.045]                   sendCondition(cond)
[16:04:33.045]                   muffleCondition <- function (cond, pattern = "^muffle") 
[16:04:33.045]                   {
[16:04:33.045]                     inherits <- base::inherits
[16:04:33.045]                     invokeRestart <- base::invokeRestart
[16:04:33.045]                     is.null <- base::is.null
[16:04:33.045]                     muffled <- FALSE
[16:04:33.045]                     if (inherits(cond, "message")) {
[16:04:33.045]                       muffled <- grepl(pattern, "muffleMessage")
[16:04:33.045]                       if (muffled) 
[16:04:33.045]                         invokeRestart("muffleMessage")
[16:04:33.045]                     }
[16:04:33.045]                     else if (inherits(cond, "warning")) {
[16:04:33.045]                       muffled <- grepl(pattern, "muffleWarning")
[16:04:33.045]                       if (muffled) 
[16:04:33.045]                         invokeRestart("muffleWarning")
[16:04:33.045]                     }
[16:04:33.045]                     else if (inherits(cond, "condition")) {
[16:04:33.045]                       if (!is.null(pattern)) {
[16:04:33.045]                         computeRestarts <- base::computeRestarts
[16:04:33.045]                         grepl <- base::grepl
[16:04:33.045]                         restarts <- computeRestarts(cond)
[16:04:33.045]                         for (restart in restarts) {
[16:04:33.045]                           name <- restart$name
[16:04:33.045]                           if (is.null(name)) 
[16:04:33.045]                             next
[16:04:33.045]                           if (!grepl(pattern, name)) 
[16:04:33.045]                             next
[16:04:33.045]                           invokeRestart(restart)
[16:04:33.045]                           muffled <- TRUE
[16:04:33.045]                           break
[16:04:33.045]                         }
[16:04:33.045]                       }
[16:04:33.045]                     }
[16:04:33.045]                     invisible(muffled)
[16:04:33.045]                   }
[16:04:33.045]                   muffleCondition(cond)
[16:04:33.045]                 })
[16:04:33.045]             }))
[16:04:33.045]             future::FutureResult(value = ...future.value$value, 
[16:04:33.045]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:04:33.045]                   ...future.rng), globalenv = if (FALSE) 
[16:04:33.045]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:04:33.045]                     ...future.globalenv.names))
[16:04:33.045]                 else NULL, started = ...future.startTime, version = "1.8")
[16:04:33.045]         }, condition = base::local({
[16:04:33.045]             c <- base::c
[16:04:33.045]             inherits <- base::inherits
[16:04:33.045]             invokeRestart <- base::invokeRestart
[16:04:33.045]             length <- base::length
[16:04:33.045]             list <- base::list
[16:04:33.045]             seq.int <- base::seq.int
[16:04:33.045]             signalCondition <- base::signalCondition
[16:04:33.045]             sys.calls <- base::sys.calls
[16:04:33.045]             `[[` <- base::`[[`
[16:04:33.045]             `+` <- base::`+`
[16:04:33.045]             `<<-` <- base::`<<-`
[16:04:33.045]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:04:33.045]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:04:33.045]                   3L)]
[16:04:33.045]             }
[16:04:33.045]             function(cond) {
[16:04:33.045]                 is_error <- inherits(cond, "error")
[16:04:33.045]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:04:33.045]                   NULL)
[16:04:33.045]                 if (is_error) {
[16:04:33.045]                   sessionInformation <- function() {
[16:04:33.045]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:04:33.045]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:04:33.045]                       search = base::search(), system = base::Sys.info())
[16:04:33.045]                   }
[16:04:33.045]                   ...future.conditions[[length(...future.conditions) + 
[16:04:33.045]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:04:33.045]                     cond$call), session = sessionInformation(), 
[16:04:33.045]                     timestamp = base::Sys.time(), signaled = 0L)
[16:04:33.045]                   signalCondition(cond)
[16:04:33.045]                 }
[16:04:33.045]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:04:33.045]                 "immediateCondition"))) {
[16:04:33.045]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:04:33.045]                   ...future.conditions[[length(...future.conditions) + 
[16:04:33.045]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:04:33.045]                   if (TRUE && !signal) {
[16:04:33.045]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:04:33.045]                     {
[16:04:33.045]                       inherits <- base::inherits
[16:04:33.045]                       invokeRestart <- base::invokeRestart
[16:04:33.045]                       is.null <- base::is.null
[16:04:33.045]                       muffled <- FALSE
[16:04:33.045]                       if (inherits(cond, "message")) {
[16:04:33.045]                         muffled <- grepl(pattern, "muffleMessage")
[16:04:33.045]                         if (muffled) 
[16:04:33.045]                           invokeRestart("muffleMessage")
[16:04:33.045]                       }
[16:04:33.045]                       else if (inherits(cond, "warning")) {
[16:04:33.045]                         muffled <- grepl(pattern, "muffleWarning")
[16:04:33.045]                         if (muffled) 
[16:04:33.045]                           invokeRestart("muffleWarning")
[16:04:33.045]                       }
[16:04:33.045]                       else if (inherits(cond, "condition")) {
[16:04:33.045]                         if (!is.null(pattern)) {
[16:04:33.045]                           computeRestarts <- base::computeRestarts
[16:04:33.045]                           grepl <- base::grepl
[16:04:33.045]                           restarts <- computeRestarts(cond)
[16:04:33.045]                           for (restart in restarts) {
[16:04:33.045]                             name <- restart$name
[16:04:33.045]                             if (is.null(name)) 
[16:04:33.045]                               next
[16:04:33.045]                             if (!grepl(pattern, name)) 
[16:04:33.045]                               next
[16:04:33.045]                             invokeRestart(restart)
[16:04:33.045]                             muffled <- TRUE
[16:04:33.045]                             break
[16:04:33.045]                           }
[16:04:33.045]                         }
[16:04:33.045]                       }
[16:04:33.045]                       invisible(muffled)
[16:04:33.045]                     }
[16:04:33.045]                     muffleCondition(cond, pattern = "^muffle")
[16:04:33.045]                   }
[16:04:33.045]                 }
[16:04:33.045]                 else {
[16:04:33.045]                   if (TRUE) {
[16:04:33.045]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:04:33.045]                     {
[16:04:33.045]                       inherits <- base::inherits
[16:04:33.045]                       invokeRestart <- base::invokeRestart
[16:04:33.045]                       is.null <- base::is.null
[16:04:33.045]                       muffled <- FALSE
[16:04:33.045]                       if (inherits(cond, "message")) {
[16:04:33.045]                         muffled <- grepl(pattern, "muffleMessage")
[16:04:33.045]                         if (muffled) 
[16:04:33.045]                           invokeRestart("muffleMessage")
[16:04:33.045]                       }
[16:04:33.045]                       else if (inherits(cond, "warning")) {
[16:04:33.045]                         muffled <- grepl(pattern, "muffleWarning")
[16:04:33.045]                         if (muffled) 
[16:04:33.045]                           invokeRestart("muffleWarning")
[16:04:33.045]                       }
[16:04:33.045]                       else if (inherits(cond, "condition")) {
[16:04:33.045]                         if (!is.null(pattern)) {
[16:04:33.045]                           computeRestarts <- base::computeRestarts
[16:04:33.045]                           grepl <- base::grepl
[16:04:33.045]                           restarts <- computeRestarts(cond)
[16:04:33.045]                           for (restart in restarts) {
[16:04:33.045]                             name <- restart$name
[16:04:33.045]                             if (is.null(name)) 
[16:04:33.045]                               next
[16:04:33.045]                             if (!grepl(pattern, name)) 
[16:04:33.045]                               next
[16:04:33.045]                             invokeRestart(restart)
[16:04:33.045]                             muffled <- TRUE
[16:04:33.045]                             break
[16:04:33.045]                           }
[16:04:33.045]                         }
[16:04:33.045]                       }
[16:04:33.045]                       invisible(muffled)
[16:04:33.045]                     }
[16:04:33.045]                     muffleCondition(cond, pattern = "^muffle")
[16:04:33.045]                   }
[16:04:33.045]                 }
[16:04:33.045]             }
[16:04:33.045]         }))
[16:04:33.045]     }, error = function(ex) {
[16:04:33.045]         base::structure(base::list(value = NULL, visible = NULL, 
[16:04:33.045]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:04:33.045]                 ...future.rng), started = ...future.startTime, 
[16:04:33.045]             finished = Sys.time(), session_uuid = NA_character_, 
[16:04:33.045]             version = "1.8"), class = "FutureResult")
[16:04:33.045]     }, finally = {
[16:04:33.045]         if (!identical(...future.workdir, getwd())) 
[16:04:33.045]             setwd(...future.workdir)
[16:04:33.045]         {
[16:04:33.045]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:04:33.045]                 ...future.oldOptions$nwarnings <- NULL
[16:04:33.045]             }
[16:04:33.045]             base::options(...future.oldOptions)
[16:04:33.045]             if (.Platform$OS.type == "windows") {
[16:04:33.045]                 old_names <- names(...future.oldEnvVars)
[16:04:33.045]                 envs <- base::Sys.getenv()
[16:04:33.045]                 names <- names(envs)
[16:04:33.045]                 common <- intersect(names, old_names)
[16:04:33.045]                 added <- setdiff(names, old_names)
[16:04:33.045]                 removed <- setdiff(old_names, names)
[16:04:33.045]                 changed <- common[...future.oldEnvVars[common] != 
[16:04:33.045]                   envs[common]]
[16:04:33.045]                 NAMES <- toupper(changed)
[16:04:33.045]                 args <- list()
[16:04:33.045]                 for (kk in seq_along(NAMES)) {
[16:04:33.045]                   name <- changed[[kk]]
[16:04:33.045]                   NAME <- NAMES[[kk]]
[16:04:33.045]                   if (name != NAME && is.element(NAME, old_names)) 
[16:04:33.045]                     next
[16:04:33.045]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:04:33.045]                 }
[16:04:33.045]                 NAMES <- toupper(added)
[16:04:33.045]                 for (kk in seq_along(NAMES)) {
[16:04:33.045]                   name <- added[[kk]]
[16:04:33.045]                   NAME <- NAMES[[kk]]
[16:04:33.045]                   if (name != NAME && is.element(NAME, old_names)) 
[16:04:33.045]                     next
[16:04:33.045]                   args[[name]] <- ""
[16:04:33.045]                 }
[16:04:33.045]                 NAMES <- toupper(removed)
[16:04:33.045]                 for (kk in seq_along(NAMES)) {
[16:04:33.045]                   name <- removed[[kk]]
[16:04:33.045]                   NAME <- NAMES[[kk]]
[16:04:33.045]                   if (name != NAME && is.element(NAME, old_names)) 
[16:04:33.045]                     next
[16:04:33.045]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:04:33.045]                 }
[16:04:33.045]                 if (length(args) > 0) 
[16:04:33.045]                   base::do.call(base::Sys.setenv, args = args)
[16:04:33.045]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:04:33.045]             }
[16:04:33.045]             else {
[16:04:33.045]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:04:33.045]             }
[16:04:33.045]             {
[16:04:33.045]                 if (base::length(...future.futureOptionsAdded) > 
[16:04:33.045]                   0L) {
[16:04:33.045]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:04:33.045]                   base::names(opts) <- ...future.futureOptionsAdded
[16:04:33.045]                   base::options(opts)
[16:04:33.045]                 }
[16:04:33.045]                 {
[16:04:33.045]                   {
[16:04:33.045]                     base::options(mc.cores = ...future.mc.cores.old)
[16:04:33.045]                     NULL
[16:04:33.045]                   }
[16:04:33.045]                   options(future.plan = NULL)
[16:04:33.045]                   if (is.na(NA_character_)) 
[16:04:33.045]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:04:33.045]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:04:33.045]                   future::plan(list(function (..., workers = availableCores(), 
[16:04:33.045]                     lazy = FALSE, rscript_libs = .libPaths(), 
[16:04:33.045]                     envir = parent.frame()) 
[16:04:33.045]                   {
[16:04:33.045]                     if (is.function(workers)) 
[16:04:33.045]                       workers <- workers()
[16:04:33.045]                     workers <- structure(as.integer(workers), 
[16:04:33.045]                       class = class(workers))
[16:04:33.045]                     stop_if_not(length(workers) == 1, is.finite(workers), 
[16:04:33.045]                       workers >= 1)
[16:04:33.045]                     if (workers == 1L && !inherits(workers, "AsIs")) {
[16:04:33.045]                       return(sequential(..., lazy = TRUE, envir = envir))
[16:04:33.045]                     }
[16:04:33.045]                     future <- MultisessionFuture(..., workers = workers, 
[16:04:33.045]                       lazy = lazy, rscript_libs = rscript_libs, 
[16:04:33.045]                       envir = envir)
[16:04:33.045]                     if (!future$lazy) 
[16:04:33.045]                       future <- run(future)
[16:04:33.045]                     invisible(future)
[16:04:33.045]                   }), .cleanup = FALSE, .init = FALSE)
[16:04:33.045]                 }
[16:04:33.045]             }
[16:04:33.045]         }
[16:04:33.045]     })
[16:04:33.045]     if (TRUE) {
[16:04:33.045]         base::sink(type = "output", split = FALSE)
[16:04:33.045]         if (TRUE) {
[16:04:33.045]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:04:33.045]         }
[16:04:33.045]         else {
[16:04:33.045]             ...future.result["stdout"] <- base::list(NULL)
[16:04:33.045]         }
[16:04:33.045]         base::close(...future.stdout)
[16:04:33.045]         ...future.stdout <- NULL
[16:04:33.045]     }
[16:04:33.045]     ...future.result$conditions <- ...future.conditions
[16:04:33.045]     ...future.result$finished <- base::Sys.time()
[16:04:33.045]     ...future.result
[16:04:33.045] }
[16:04:33.048] Exporting 1 global objects (56 bytes) to cluster node #1 ...
[16:04:33.048] Exporting ‘ii’ (56 bytes) to cluster node #1 ...
[16:04:33.048] Exporting ‘ii’ (56 bytes) to cluster node #1 ... DONE
[16:04:33.048] Exporting 1 global objects (56 bytes) to cluster node #1 ... DONE
[16:04:33.049] MultisessionFuture started
[16:04:33.049] - Launch lazy future ... done
[16:04:33.049] run() for ‘MultisessionFuture’ ... done
[16:04:33.050] getGlobalsAndPackages() ...
[16:04:33.050] Searching for globals...
[16:04:33.051] - globals found: [6] ‘{’, ‘if’, ‘==’, ‘%%’, ‘ii’, ‘stop’
[16:04:33.051] Searching for globals ... DONE
[16:04:33.052] Resolving globals: FALSE
[16:04:33.052] The total size of the 1 globals is 56 bytes (56 bytes)
[16:04:33.052] The total size of the 1 globals exported for future expression (‘{; if (ii%%2 == 0); stop("Woops!"); ii; }’) is 56 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘ii’ (56 bytes of class ‘numeric’)
[16:04:33.052] - globals: [1] ‘ii’
[16:04:33.052] 
[16:04:33.053] getGlobalsAndPackages() ... DONE
[16:04:33.053] run() for ‘Future’ ...
[16:04:33.053] - state: ‘created’
[16:04:33.053] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[16:04:33.067] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[16:04:33.067] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[16:04:33.067]   - Field: ‘node’
[16:04:33.067]   - Field: ‘label’
[16:04:33.067]   - Field: ‘local’
[16:04:33.067]   - Field: ‘owner’
[16:04:33.067]   - Field: ‘envir’
[16:04:33.067]   - Field: ‘workers’
[16:04:33.067]   - Field: ‘packages’
[16:04:33.068]   - Field: ‘gc’
[16:04:33.068]   - Field: ‘conditions’
[16:04:33.068]   - Field: ‘persistent’
[16:04:33.068]   - Field: ‘expr’
[16:04:33.068]   - Field: ‘uuid’
[16:04:33.068]   - Field: ‘seed’
[16:04:33.068]   - Field: ‘version’
[16:04:33.068]   - Field: ‘result’
[16:04:33.068]   - Field: ‘asynchronous’
[16:04:33.068]   - Field: ‘calls’
[16:04:33.068]   - Field: ‘globals’
[16:04:33.069]   - Field: ‘stdout’
[16:04:33.069]   - Field: ‘earlySignal’
[16:04:33.069]   - Field: ‘lazy’
[16:04:33.069]   - Field: ‘state’
[16:04:33.069] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[16:04:33.069] - Launch lazy future ...
[16:04:33.069] Packages needed by the future expression (n = 0): <none>
[16:04:33.069] Packages needed by future strategies (n = 0): <none>
[16:04:33.070] {
[16:04:33.070]     {
[16:04:33.070]         {
[16:04:33.070]             ...future.startTime <- base::Sys.time()
[16:04:33.070]             {
[16:04:33.070]                 {
[16:04:33.070]                   {
[16:04:33.070]                     {
[16:04:33.070]                       base::local({
[16:04:33.070]                         has_future <- base::requireNamespace("future", 
[16:04:33.070]                           quietly = TRUE)
[16:04:33.070]                         if (has_future) {
[16:04:33.070]                           ns <- base::getNamespace("future")
[16:04:33.070]                           version <- ns[[".package"]][["version"]]
[16:04:33.070]                           if (is.null(version)) 
[16:04:33.070]                             version <- utils::packageVersion("future")
[16:04:33.070]                         }
[16:04:33.070]                         else {
[16:04:33.070]                           version <- NULL
[16:04:33.070]                         }
[16:04:33.070]                         if (!has_future || version < "1.8.0") {
[16:04:33.070]                           info <- base::c(r_version = base::gsub("R version ", 
[16:04:33.070]                             "", base::R.version$version.string), 
[16:04:33.070]                             platform = base::sprintf("%s (%s-bit)", 
[16:04:33.070]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:04:33.070]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[16:04:33.070]                               "release", "version")], collapse = " "), 
[16:04:33.070]                             hostname = base::Sys.info()[["nodename"]])
[16:04:33.070]                           info <- base::sprintf("%s: %s", base::names(info), 
[16:04:33.070]                             info)
[16:04:33.070]                           info <- base::paste(info, collapse = "; ")
[16:04:33.070]                           if (!has_future) {
[16:04:33.070]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:04:33.070]                               info)
[16:04:33.070]                           }
[16:04:33.070]                           else {
[16:04:33.070]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:04:33.070]                               info, version)
[16:04:33.070]                           }
[16:04:33.070]                           base::stop(msg)
[16:04:33.070]                         }
[16:04:33.070]                       })
[16:04:33.070]                     }
[16:04:33.070]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[16:04:33.070]                     base::options(mc.cores = 1L)
[16:04:33.070]                   }
[16:04:33.070]                   options(future.plan = NULL)
[16:04:33.070]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:04:33.070]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:04:33.070]                 }
[16:04:33.070]                 ...future.workdir <- getwd()
[16:04:33.070]             }
[16:04:33.070]             ...future.oldOptions <- base::as.list(base::.Options)
[16:04:33.070]             ...future.oldEnvVars <- base::Sys.getenv()
[16:04:33.070]         }
[16:04:33.070]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:04:33.070]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:04:33.070]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:04:33.070]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:04:33.070]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:04:33.070]             future.stdout.windows.reencode = NULL, width = 80L)
[16:04:33.070]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:04:33.070]             base::names(...future.oldOptions))
[16:04:33.070]     }
[16:04:33.070]     if (FALSE) {
[16:04:33.070]     }
[16:04:33.070]     else {
[16:04:33.070]         if (TRUE) {
[16:04:33.070]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:04:33.070]                 open = "w")
[16:04:33.070]         }
[16:04:33.070]         else {
[16:04:33.070]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:04:33.070]                 windows = "NUL", "/dev/null"), open = "w")
[16:04:33.070]         }
[16:04:33.070]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:04:33.070]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:04:33.070]             base::sink(type = "output", split = FALSE)
[16:04:33.070]             base::close(...future.stdout)
[16:04:33.070]         }, add = TRUE)
[16:04:33.070]     }
[16:04:33.070]     ...future.frame <- base::sys.nframe()
[16:04:33.070]     ...future.conditions <- base::list()
[16:04:33.070]     ...future.rng <- base::globalenv()$.Random.seed
[16:04:33.070]     if (FALSE) {
[16:04:33.070]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:04:33.070]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:04:33.070]     }
[16:04:33.070]     ...future.result <- base::tryCatch({
[16:04:33.070]         base::withCallingHandlers({
[16:04:33.070]             ...future.value <- base::withVisible(base::local({
[16:04:33.070]                 ...future.makeSendCondition <- base::local({
[16:04:33.070]                   sendCondition <- NULL
[16:04:33.070]                   function(frame = 1L) {
[16:04:33.070]                     if (is.function(sendCondition)) 
[16:04:33.070]                       return(sendCondition)
[16:04:33.070]                     ns <- getNamespace("parallel")
[16:04:33.070]                     if (exists("sendData", mode = "function", 
[16:04:33.070]                       envir = ns)) {
[16:04:33.070]                       parallel_sendData <- get("sendData", mode = "function", 
[16:04:33.070]                         envir = ns)
[16:04:33.070]                       envir <- sys.frame(frame)
[16:04:33.070]                       master <- NULL
[16:04:33.070]                       while (!identical(envir, .GlobalEnv) && 
[16:04:33.070]                         !identical(envir, emptyenv())) {
[16:04:33.070]                         if (exists("master", mode = "list", envir = envir, 
[16:04:33.070]                           inherits = FALSE)) {
[16:04:33.070]                           master <- get("master", mode = "list", 
[16:04:33.070]                             envir = envir, inherits = FALSE)
[16:04:33.070]                           if (inherits(master, c("SOCKnode", 
[16:04:33.070]                             "SOCK0node"))) {
[16:04:33.070]                             sendCondition <<- function(cond) {
[16:04:33.070]                               data <- list(type = "VALUE", value = cond, 
[16:04:33.070]                                 success = TRUE)
[16:04:33.070]                               parallel_sendData(master, data)
[16:04:33.070]                             }
[16:04:33.070]                             return(sendCondition)
[16:04:33.070]                           }
[16:04:33.070]                         }
[16:04:33.070]                         frame <- frame + 1L
[16:04:33.070]                         envir <- sys.frame(frame)
[16:04:33.070]                       }
[16:04:33.070]                     }
[16:04:33.070]                     sendCondition <<- function(cond) NULL
[16:04:33.070]                   }
[16:04:33.070]                 })
[16:04:33.070]                 withCallingHandlers({
[16:04:33.070]                   {
[16:04:33.070]                     if (ii%%2 == 0) 
[16:04:33.070]                       stop("Woops!")
[16:04:33.070]                     ii
[16:04:33.070]                   }
[16:04:33.070]                 }, immediateCondition = function(cond) {
[16:04:33.070]                   sendCondition <- ...future.makeSendCondition()
[16:04:33.070]                   sendCondition(cond)
[16:04:33.070]                   muffleCondition <- function (cond, pattern = "^muffle") 
[16:04:33.070]                   {
[16:04:33.070]                     inherits <- base::inherits
[16:04:33.070]                     invokeRestart <- base::invokeRestart
[16:04:33.070]                     is.null <- base::is.null
[16:04:33.070]                     muffled <- FALSE
[16:04:33.070]                     if (inherits(cond, "message")) {
[16:04:33.070]                       muffled <- grepl(pattern, "muffleMessage")
[16:04:33.070]                       if (muffled) 
[16:04:33.070]                         invokeRestart("muffleMessage")
[16:04:33.070]                     }
[16:04:33.070]                     else if (inherits(cond, "warning")) {
[16:04:33.070]                       muffled <- grepl(pattern, "muffleWarning")
[16:04:33.070]                       if (muffled) 
[16:04:33.070]                         invokeRestart("muffleWarning")
[16:04:33.070]                     }
[16:04:33.070]                     else if (inherits(cond, "condition")) {
[16:04:33.070]                       if (!is.null(pattern)) {
[16:04:33.070]                         computeRestarts <- base::computeRestarts
[16:04:33.070]                         grepl <- base::grepl
[16:04:33.070]                         restarts <- computeRestarts(cond)
[16:04:33.070]                         for (restart in restarts) {
[16:04:33.070]                           name <- restart$name
[16:04:33.070]                           if (is.null(name)) 
[16:04:33.070]                             next
[16:04:33.070]                           if (!grepl(pattern, name)) 
[16:04:33.070]                             next
[16:04:33.070]                           invokeRestart(restart)
[16:04:33.070]                           muffled <- TRUE
[16:04:33.070]                           break
[16:04:33.070]                         }
[16:04:33.070]                       }
[16:04:33.070]                     }
[16:04:33.070]                     invisible(muffled)
[16:04:33.070]                   }
[16:04:33.070]                   muffleCondition(cond)
[16:04:33.070]                 })
[16:04:33.070]             }))
[16:04:33.070]             future::FutureResult(value = ...future.value$value, 
[16:04:33.070]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:04:33.070]                   ...future.rng), globalenv = if (FALSE) 
[16:04:33.070]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:04:33.070]                     ...future.globalenv.names))
[16:04:33.070]                 else NULL, started = ...future.startTime, version = "1.8")
[16:04:33.070]         }, condition = base::local({
[16:04:33.070]             c <- base::c
[16:04:33.070]             inherits <- base::inherits
[16:04:33.070]             invokeRestart <- base::invokeRestart
[16:04:33.070]             length <- base::length
[16:04:33.070]             list <- base::list
[16:04:33.070]             seq.int <- base::seq.int
[16:04:33.070]             signalCondition <- base::signalCondition
[16:04:33.070]             sys.calls <- base::sys.calls
[16:04:33.070]             `[[` <- base::`[[`
[16:04:33.070]             `+` <- base::`+`
[16:04:33.070]             `<<-` <- base::`<<-`
[16:04:33.070]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:04:33.070]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:04:33.070]                   3L)]
[16:04:33.070]             }
[16:04:33.070]             function(cond) {
[16:04:33.070]                 is_error <- inherits(cond, "error")
[16:04:33.070]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:04:33.070]                   NULL)
[16:04:33.070]                 if (is_error) {
[16:04:33.070]                   sessionInformation <- function() {
[16:04:33.070]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:04:33.070]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:04:33.070]                       search = base::search(), system = base::Sys.info())
[16:04:33.070]                   }
[16:04:33.070]                   ...future.conditions[[length(...future.conditions) + 
[16:04:33.070]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:04:33.070]                     cond$call), session = sessionInformation(), 
[16:04:33.070]                     timestamp = base::Sys.time(), signaled = 0L)
[16:04:33.070]                   signalCondition(cond)
[16:04:33.070]                 }
[16:04:33.070]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:04:33.070]                 "immediateCondition"))) {
[16:04:33.070]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:04:33.070]                   ...future.conditions[[length(...future.conditions) + 
[16:04:33.070]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:04:33.070]                   if (TRUE && !signal) {
[16:04:33.070]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:04:33.070]                     {
[16:04:33.070]                       inherits <- base::inherits
[16:04:33.070]                       invokeRestart <- base::invokeRestart
[16:04:33.070]                       is.null <- base::is.null
[16:04:33.070]                       muffled <- FALSE
[16:04:33.070]                       if (inherits(cond, "message")) {
[16:04:33.070]                         muffled <- grepl(pattern, "muffleMessage")
[16:04:33.070]                         if (muffled) 
[16:04:33.070]                           invokeRestart("muffleMessage")
[16:04:33.070]                       }
[16:04:33.070]                       else if (inherits(cond, "warning")) {
[16:04:33.070]                         muffled <- grepl(pattern, "muffleWarning")
[16:04:33.070]                         if (muffled) 
[16:04:33.070]                           invokeRestart("muffleWarning")
[16:04:33.070]                       }
[16:04:33.070]                       else if (inherits(cond, "condition")) {
[16:04:33.070]                         if (!is.null(pattern)) {
[16:04:33.070]                           computeRestarts <- base::computeRestarts
[16:04:33.070]                           grepl <- base::grepl
[16:04:33.070]                           restarts <- computeRestarts(cond)
[16:04:33.070]                           for (restart in restarts) {
[16:04:33.070]                             name <- restart$name
[16:04:33.070]                             if (is.null(name)) 
[16:04:33.070]                               next
[16:04:33.070]                             if (!grepl(pattern, name)) 
[16:04:33.070]                               next
[16:04:33.070]                             invokeRestart(restart)
[16:04:33.070]                             muffled <- TRUE
[16:04:33.070]                             break
[16:04:33.070]                           }
[16:04:33.070]                         }
[16:04:33.070]                       }
[16:04:33.070]                       invisible(muffled)
[16:04:33.070]                     }
[16:04:33.070]                     muffleCondition(cond, pattern = "^muffle")
[16:04:33.070]                   }
[16:04:33.070]                 }
[16:04:33.070]                 else {
[16:04:33.070]                   if (TRUE) {
[16:04:33.070]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:04:33.070]                     {
[16:04:33.070]                       inherits <- base::inherits
[16:04:33.070]                       invokeRestart <- base::invokeRestart
[16:04:33.070]                       is.null <- base::is.null
[16:04:33.070]                       muffled <- FALSE
[16:04:33.070]                       if (inherits(cond, "message")) {
[16:04:33.070]                         muffled <- grepl(pattern, "muffleMessage")
[16:04:33.070]                         if (muffled) 
[16:04:33.070]                           invokeRestart("muffleMessage")
[16:04:33.070]                       }
[16:04:33.070]                       else if (inherits(cond, "warning")) {
[16:04:33.070]                         muffled <- grepl(pattern, "muffleWarning")
[16:04:33.070]                         if (muffled) 
[16:04:33.070]                           invokeRestart("muffleWarning")
[16:04:33.070]                       }
[16:04:33.070]                       else if (inherits(cond, "condition")) {
[16:04:33.070]                         if (!is.null(pattern)) {
[16:04:33.070]                           computeRestarts <- base::computeRestarts
[16:04:33.070]                           grepl <- base::grepl
[16:04:33.070]                           restarts <- computeRestarts(cond)
[16:04:33.070]                           for (restart in restarts) {
[16:04:33.070]                             name <- restart$name
[16:04:33.070]                             if (is.null(name)) 
[16:04:33.070]                               next
[16:04:33.070]                             if (!grepl(pattern, name)) 
[16:04:33.070]                               next
[16:04:33.070]                             invokeRestart(restart)
[16:04:33.070]                             muffled <- TRUE
[16:04:33.070]                             break
[16:04:33.070]                           }
[16:04:33.070]                         }
[16:04:33.070]                       }
[16:04:33.070]                       invisible(muffled)
[16:04:33.070]                     }
[16:04:33.070]                     muffleCondition(cond, pattern = "^muffle")
[16:04:33.070]                   }
[16:04:33.070]                 }
[16:04:33.070]             }
[16:04:33.070]         }))
[16:04:33.070]     }, error = function(ex) {
[16:04:33.070]         base::structure(base::list(value = NULL, visible = NULL, 
[16:04:33.070]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:04:33.070]                 ...future.rng), started = ...future.startTime, 
[16:04:33.070]             finished = Sys.time(), session_uuid = NA_character_, 
[16:04:33.070]             version = "1.8"), class = "FutureResult")
[16:04:33.070]     }, finally = {
[16:04:33.070]         if (!identical(...future.workdir, getwd())) 
[16:04:33.070]             setwd(...future.workdir)
[16:04:33.070]         {
[16:04:33.070]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:04:33.070]                 ...future.oldOptions$nwarnings <- NULL
[16:04:33.070]             }
[16:04:33.070]             base::options(...future.oldOptions)
[16:04:33.070]             if (.Platform$OS.type == "windows") {
[16:04:33.070]                 old_names <- names(...future.oldEnvVars)
[16:04:33.070]                 envs <- base::Sys.getenv()
[16:04:33.070]                 names <- names(envs)
[16:04:33.070]                 common <- intersect(names, old_names)
[16:04:33.070]                 added <- setdiff(names, old_names)
[16:04:33.070]                 removed <- setdiff(old_names, names)
[16:04:33.070]                 changed <- common[...future.oldEnvVars[common] != 
[16:04:33.070]                   envs[common]]
[16:04:33.070]                 NAMES <- toupper(changed)
[16:04:33.070]                 args <- list()
[16:04:33.070]                 for (kk in seq_along(NAMES)) {
[16:04:33.070]                   name <- changed[[kk]]
[16:04:33.070]                   NAME <- NAMES[[kk]]
[16:04:33.070]                   if (name != NAME && is.element(NAME, old_names)) 
[16:04:33.070]                     next
[16:04:33.070]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:04:33.070]                 }
[16:04:33.070]                 NAMES <- toupper(added)
[16:04:33.070]                 for (kk in seq_along(NAMES)) {
[16:04:33.070]                   name <- added[[kk]]
[16:04:33.070]                   NAME <- NAMES[[kk]]
[16:04:33.070]                   if (name != NAME && is.element(NAME, old_names)) 
[16:04:33.070]                     next
[16:04:33.070]                   args[[name]] <- ""
[16:04:33.070]                 }
[16:04:33.070]                 NAMES <- toupper(removed)
[16:04:33.070]                 for (kk in seq_along(NAMES)) {
[16:04:33.070]                   name <- removed[[kk]]
[16:04:33.070]                   NAME <- NAMES[[kk]]
[16:04:33.070]                   if (name != NAME && is.element(NAME, old_names)) 
[16:04:33.070]                     next
[16:04:33.070]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:04:33.070]                 }
[16:04:33.070]                 if (length(args) > 0) 
[16:04:33.070]                   base::do.call(base::Sys.setenv, args = args)
[16:04:33.070]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:04:33.070]             }
[16:04:33.070]             else {
[16:04:33.070]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:04:33.070]             }
[16:04:33.070]             {
[16:04:33.070]                 if (base::length(...future.futureOptionsAdded) > 
[16:04:33.070]                   0L) {
[16:04:33.070]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:04:33.070]                   base::names(opts) <- ...future.futureOptionsAdded
[16:04:33.070]                   base::options(opts)
[16:04:33.070]                 }
[16:04:33.070]                 {
[16:04:33.070]                   {
[16:04:33.070]                     base::options(mc.cores = ...future.mc.cores.old)
[16:04:33.070]                     NULL
[16:04:33.070]                   }
[16:04:33.070]                   options(future.plan = NULL)
[16:04:33.070]                   if (is.na(NA_character_)) 
[16:04:33.070]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:04:33.070]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:04:33.070]                   future::plan(list(function (..., workers = availableCores(), 
[16:04:33.070]                     lazy = FALSE, rscript_libs = .libPaths(), 
[16:04:33.070]                     envir = parent.frame()) 
[16:04:33.070]                   {
[16:04:33.070]                     if (is.function(workers)) 
[16:04:33.070]                       workers <- workers()
[16:04:33.070]                     workers <- structure(as.integer(workers), 
[16:04:33.070]                       class = class(workers))
[16:04:33.070]                     stop_if_not(length(workers) == 1, is.finite(workers), 
[16:04:33.070]                       workers >= 1)
[16:04:33.070]                     if (workers == 1L && !inherits(workers, "AsIs")) {
[16:04:33.070]                       return(sequential(..., lazy = TRUE, envir = envir))
[16:04:33.070]                     }
[16:04:33.070]                     future <- MultisessionFuture(..., workers = workers, 
[16:04:33.070]                       lazy = lazy, rscript_libs = rscript_libs, 
[16:04:33.070]                       envir = envir)
[16:04:33.070]                     if (!future$lazy) 
[16:04:33.070]                       future <- run(future)
[16:04:33.070]                     invisible(future)
[16:04:33.070]                   }), .cleanup = FALSE, .init = FALSE)
[16:04:33.070]                 }
[16:04:33.070]             }
[16:04:33.070]         }
[16:04:33.070]     })
[16:04:33.070]     if (TRUE) {
[16:04:33.070]         base::sink(type = "output", split = FALSE)
[16:04:33.070]         if (TRUE) {
[16:04:33.070]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:04:33.070]         }
[16:04:33.070]         else {
[16:04:33.070]             ...future.result["stdout"] <- base::list(NULL)
[16:04:33.070]         }
[16:04:33.070]         base::close(...future.stdout)
[16:04:33.070]         ...future.stdout <- NULL
[16:04:33.070]     }
[16:04:33.070]     ...future.result$conditions <- ...future.conditions
[16:04:33.070]     ...future.result$finished <- base::Sys.time()
[16:04:33.070]     ...future.result
[16:04:33.070] }
[16:04:33.122] Exporting 1 global objects (56 bytes) to cluster node #2 ...
[16:04:33.122] Exporting ‘ii’ (56 bytes) to cluster node #2 ...
[16:04:33.122] Exporting ‘ii’ (56 bytes) to cluster node #2 ... DONE
[16:04:33.122] Exporting 1 global objects (56 bytes) to cluster node #2 ... DONE
[16:04:33.123] MultisessionFuture started
[16:04:33.123] - Launch lazy future ... done
[16:04:33.123] run() for ‘MultisessionFuture’ ... done
[16:04:33.124] getGlobalsAndPackages() ...
[16:04:33.124] Searching for globals...
[16:04:33.125] - globals found: [6] ‘{’, ‘if’, ‘==’, ‘%%’, ‘ii’, ‘stop’
[16:04:33.126] Searching for globals ... DONE
[16:04:33.126] Resolving globals: FALSE
[16:04:33.126] The total size of the 1 globals is 56 bytes (56 bytes)
[16:04:33.126] The total size of the 1 globals exported for future expression (‘{; if (ii%%2 == 0); stop("Woops!"); ii; }’) is 56 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘ii’ (56 bytes of class ‘numeric’)
[16:04:33.127] - globals: [1] ‘ii’
[16:04:33.127] 
[16:04:33.127] getGlobalsAndPackages() ... DONE
[16:04:33.127] run() for ‘Future’ ...
[16:04:33.127] - state: ‘created’
[16:04:33.127] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[16:04:33.143] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[16:04:33.143] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[16:04:33.143]   - Field: ‘node’
[16:04:33.143]   - Field: ‘label’
[16:04:33.144]   - Field: ‘local’
[16:04:33.144]   - Field: ‘owner’
[16:04:33.144]   - Field: ‘envir’
[16:04:33.144]   - Field: ‘workers’
[16:04:33.144]   - Field: ‘packages’
[16:04:33.144]   - Field: ‘gc’
[16:04:33.144]   - Field: ‘conditions’
[16:04:33.144]   - Field: ‘persistent’
[16:04:33.144]   - Field: ‘expr’
[16:04:33.144]   - Field: ‘uuid’
[16:04:33.145]   - Field: ‘seed’
[16:04:33.145]   - Field: ‘version’
[16:04:33.145]   - Field: ‘result’
[16:04:33.145]   - Field: ‘asynchronous’
[16:04:33.145]   - Field: ‘calls’
[16:04:33.145]   - Field: ‘globals’
[16:04:33.145]   - Field: ‘stdout’
[16:04:33.145]   - Field: ‘earlySignal’
[16:04:33.145]   - Field: ‘lazy’
[16:04:33.145]   - Field: ‘state’
[16:04:33.145] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[16:04:33.146] - Launch lazy future ...
[16:04:33.146] Packages needed by the future expression (n = 0): <none>
[16:04:33.146] Packages needed by future strategies (n = 0): <none>
[16:04:33.146] {
[16:04:33.146]     {
[16:04:33.146]         {
[16:04:33.146]             ...future.startTime <- base::Sys.time()
[16:04:33.146]             {
[16:04:33.146]                 {
[16:04:33.146]                   {
[16:04:33.146]                     {
[16:04:33.146]                       base::local({
[16:04:33.146]                         has_future <- base::requireNamespace("future", 
[16:04:33.146]                           quietly = TRUE)
[16:04:33.146]                         if (has_future) {
[16:04:33.146]                           ns <- base::getNamespace("future")
[16:04:33.146]                           version <- ns[[".package"]][["version"]]
[16:04:33.146]                           if (is.null(version)) 
[16:04:33.146]                             version <- utils::packageVersion("future")
[16:04:33.146]                         }
[16:04:33.146]                         else {
[16:04:33.146]                           version <- NULL
[16:04:33.146]                         }
[16:04:33.146]                         if (!has_future || version < "1.8.0") {
[16:04:33.146]                           info <- base::c(r_version = base::gsub("R version ", 
[16:04:33.146]                             "", base::R.version$version.string), 
[16:04:33.146]                             platform = base::sprintf("%s (%s-bit)", 
[16:04:33.146]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:04:33.146]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[16:04:33.146]                               "release", "version")], collapse = " "), 
[16:04:33.146]                             hostname = base::Sys.info()[["nodename"]])
[16:04:33.146]                           info <- base::sprintf("%s: %s", base::names(info), 
[16:04:33.146]                             info)
[16:04:33.146]                           info <- base::paste(info, collapse = "; ")
[16:04:33.146]                           if (!has_future) {
[16:04:33.146]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:04:33.146]                               info)
[16:04:33.146]                           }
[16:04:33.146]                           else {
[16:04:33.146]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:04:33.146]                               info, version)
[16:04:33.146]                           }
[16:04:33.146]                           base::stop(msg)
[16:04:33.146]                         }
[16:04:33.146]                       })
[16:04:33.146]                     }
[16:04:33.146]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[16:04:33.146]                     base::options(mc.cores = 1L)
[16:04:33.146]                   }
[16:04:33.146]                   options(future.plan = NULL)
[16:04:33.146]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:04:33.146]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:04:33.146]                 }
[16:04:33.146]                 ...future.workdir <- getwd()
[16:04:33.146]             }
[16:04:33.146]             ...future.oldOptions <- base::as.list(base::.Options)
[16:04:33.146]             ...future.oldEnvVars <- base::Sys.getenv()
[16:04:33.146]         }
[16:04:33.146]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:04:33.146]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:04:33.146]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:04:33.146]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:04:33.146]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:04:33.146]             future.stdout.windows.reencode = NULL, width = 80L)
[16:04:33.146]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:04:33.146]             base::names(...future.oldOptions))
[16:04:33.146]     }
[16:04:33.146]     if (FALSE) {
[16:04:33.146]     }
[16:04:33.146]     else {
[16:04:33.146]         if (TRUE) {
[16:04:33.146]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:04:33.146]                 open = "w")
[16:04:33.146]         }
[16:04:33.146]         else {
[16:04:33.146]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:04:33.146]                 windows = "NUL", "/dev/null"), open = "w")
[16:04:33.146]         }
[16:04:33.146]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:04:33.146]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:04:33.146]             base::sink(type = "output", split = FALSE)
[16:04:33.146]             base::close(...future.stdout)
[16:04:33.146]         }, add = TRUE)
[16:04:33.146]     }
[16:04:33.146]     ...future.frame <- base::sys.nframe()
[16:04:33.146]     ...future.conditions <- base::list()
[16:04:33.146]     ...future.rng <- base::globalenv()$.Random.seed
[16:04:33.146]     if (FALSE) {
[16:04:33.146]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:04:33.146]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:04:33.146]     }
[16:04:33.146]     ...future.result <- base::tryCatch({
[16:04:33.146]         base::withCallingHandlers({
[16:04:33.146]             ...future.value <- base::withVisible(base::local({
[16:04:33.146]                 ...future.makeSendCondition <- base::local({
[16:04:33.146]                   sendCondition <- NULL
[16:04:33.146]                   function(frame = 1L) {
[16:04:33.146]                     if (is.function(sendCondition)) 
[16:04:33.146]                       return(sendCondition)
[16:04:33.146]                     ns <- getNamespace("parallel")
[16:04:33.146]                     if (exists("sendData", mode = "function", 
[16:04:33.146]                       envir = ns)) {
[16:04:33.146]                       parallel_sendData <- get("sendData", mode = "function", 
[16:04:33.146]                         envir = ns)
[16:04:33.146]                       envir <- sys.frame(frame)
[16:04:33.146]                       master <- NULL
[16:04:33.146]                       while (!identical(envir, .GlobalEnv) && 
[16:04:33.146]                         !identical(envir, emptyenv())) {
[16:04:33.146]                         if (exists("master", mode = "list", envir = envir, 
[16:04:33.146]                           inherits = FALSE)) {
[16:04:33.146]                           master <- get("master", mode = "list", 
[16:04:33.146]                             envir = envir, inherits = FALSE)
[16:04:33.146]                           if (inherits(master, c("SOCKnode", 
[16:04:33.146]                             "SOCK0node"))) {
[16:04:33.146]                             sendCondition <<- function(cond) {
[16:04:33.146]                               data <- list(type = "VALUE", value = cond, 
[16:04:33.146]                                 success = TRUE)
[16:04:33.146]                               parallel_sendData(master, data)
[16:04:33.146]                             }
[16:04:33.146]                             return(sendCondition)
[16:04:33.146]                           }
[16:04:33.146]                         }
[16:04:33.146]                         frame <- frame + 1L
[16:04:33.146]                         envir <- sys.frame(frame)
[16:04:33.146]                       }
[16:04:33.146]                     }
[16:04:33.146]                     sendCondition <<- function(cond) NULL
[16:04:33.146]                   }
[16:04:33.146]                 })
[16:04:33.146]                 withCallingHandlers({
[16:04:33.146]                   {
[16:04:33.146]                     if (ii%%2 == 0) 
[16:04:33.146]                       stop("Woops!")
[16:04:33.146]                     ii
[16:04:33.146]                   }
[16:04:33.146]                 }, immediateCondition = function(cond) {
[16:04:33.146]                   sendCondition <- ...future.makeSendCondition()
[16:04:33.146]                   sendCondition(cond)
[16:04:33.146]                   muffleCondition <- function (cond, pattern = "^muffle") 
[16:04:33.146]                   {
[16:04:33.146]                     inherits <- base::inherits
[16:04:33.146]                     invokeRestart <- base::invokeRestart
[16:04:33.146]                     is.null <- base::is.null
[16:04:33.146]                     muffled <- FALSE
[16:04:33.146]                     if (inherits(cond, "message")) {
[16:04:33.146]                       muffled <- grepl(pattern, "muffleMessage")
[16:04:33.146]                       if (muffled) 
[16:04:33.146]                         invokeRestart("muffleMessage")
[16:04:33.146]                     }
[16:04:33.146]                     else if (inherits(cond, "warning")) {
[16:04:33.146]                       muffled <- grepl(pattern, "muffleWarning")
[16:04:33.146]                       if (muffled) 
[16:04:33.146]                         invokeRestart("muffleWarning")
[16:04:33.146]                     }
[16:04:33.146]                     else if (inherits(cond, "condition")) {
[16:04:33.146]                       if (!is.null(pattern)) {
[16:04:33.146]                         computeRestarts <- base::computeRestarts
[16:04:33.146]                         grepl <- base::grepl
[16:04:33.146]                         restarts <- computeRestarts(cond)
[16:04:33.146]                         for (restart in restarts) {
[16:04:33.146]                           name <- restart$name
[16:04:33.146]                           if (is.null(name)) 
[16:04:33.146]                             next
[16:04:33.146]                           if (!grepl(pattern, name)) 
[16:04:33.146]                             next
[16:04:33.146]                           invokeRestart(restart)
[16:04:33.146]                           muffled <- TRUE
[16:04:33.146]                           break
[16:04:33.146]                         }
[16:04:33.146]                       }
[16:04:33.146]                     }
[16:04:33.146]                     invisible(muffled)
[16:04:33.146]                   }
[16:04:33.146]                   muffleCondition(cond)
[16:04:33.146]                 })
[16:04:33.146]             }))
[16:04:33.146]             future::FutureResult(value = ...future.value$value, 
[16:04:33.146]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:04:33.146]                   ...future.rng), globalenv = if (FALSE) 
[16:04:33.146]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:04:33.146]                     ...future.globalenv.names))
[16:04:33.146]                 else NULL, started = ...future.startTime, version = "1.8")
[16:04:33.146]         }, condition = base::local({
[16:04:33.146]             c <- base::c
[16:04:33.146]             inherits <- base::inherits
[16:04:33.146]             invokeRestart <- base::invokeRestart
[16:04:33.146]             length <- base::length
[16:04:33.146]             list <- base::list
[16:04:33.146]             seq.int <- base::seq.int
[16:04:33.146]             signalCondition <- base::signalCondition
[16:04:33.146]             sys.calls <- base::sys.calls
[16:04:33.146]             `[[` <- base::`[[`
[16:04:33.146]             `+` <- base::`+`
[16:04:33.146]             `<<-` <- base::`<<-`
[16:04:33.146]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:04:33.146]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:04:33.146]                   3L)]
[16:04:33.146]             }
[16:04:33.146]             function(cond) {
[16:04:33.146]                 is_error <- inherits(cond, "error")
[16:04:33.146]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:04:33.146]                   NULL)
[16:04:33.146]                 if (is_error) {
[16:04:33.146]                   sessionInformation <- function() {
[16:04:33.146]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:04:33.146]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:04:33.146]                       search = base::search(), system = base::Sys.info())
[16:04:33.146]                   }
[16:04:33.146]                   ...future.conditions[[length(...future.conditions) + 
[16:04:33.146]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:04:33.146]                     cond$call), session = sessionInformation(), 
[16:04:33.146]                     timestamp = base::Sys.time(), signaled = 0L)
[16:04:33.146]                   signalCondition(cond)
[16:04:33.146]                 }
[16:04:33.146]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:04:33.146]                 "immediateCondition"))) {
[16:04:33.146]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:04:33.146]                   ...future.conditions[[length(...future.conditions) + 
[16:04:33.146]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:04:33.146]                   if (TRUE && !signal) {
[16:04:33.146]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:04:33.146]                     {
[16:04:33.146]                       inherits <- base::inherits
[16:04:33.146]                       invokeRestart <- base::invokeRestart
[16:04:33.146]                       is.null <- base::is.null
[16:04:33.146]                       muffled <- FALSE
[16:04:33.146]                       if (inherits(cond, "message")) {
[16:04:33.146]                         muffled <- grepl(pattern, "muffleMessage")
[16:04:33.146]                         if (muffled) 
[16:04:33.146]                           invokeRestart("muffleMessage")
[16:04:33.146]                       }
[16:04:33.146]                       else if (inherits(cond, "warning")) {
[16:04:33.146]                         muffled <- grepl(pattern, "muffleWarning")
[16:04:33.146]                         if (muffled) 
[16:04:33.146]                           invokeRestart("muffleWarning")
[16:04:33.146]                       }
[16:04:33.146]                       else if (inherits(cond, "condition")) {
[16:04:33.146]                         if (!is.null(pattern)) {
[16:04:33.146]                           computeRestarts <- base::computeRestarts
[16:04:33.146]                           grepl <- base::grepl
[16:04:33.146]                           restarts <- computeRestarts(cond)
[16:04:33.146]                           for (restart in restarts) {
[16:04:33.146]                             name <- restart$name
[16:04:33.146]                             if (is.null(name)) 
[16:04:33.146]                               next
[16:04:33.146]                             if (!grepl(pattern, name)) 
[16:04:33.146]                               next
[16:04:33.146]                             invokeRestart(restart)
[16:04:33.146]                             muffled <- TRUE
[16:04:33.146]                             break
[16:04:33.146]                           }
[16:04:33.146]                         }
[16:04:33.146]                       }
[16:04:33.146]                       invisible(muffled)
[16:04:33.146]                     }
[16:04:33.146]                     muffleCondition(cond, pattern = "^muffle")
[16:04:33.146]                   }
[16:04:33.146]                 }
[16:04:33.146]                 else {
[16:04:33.146]                   if (TRUE) {
[16:04:33.146]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:04:33.146]                     {
[16:04:33.146]                       inherits <- base::inherits
[16:04:33.146]                       invokeRestart <- base::invokeRestart
[16:04:33.146]                       is.null <- base::is.null
[16:04:33.146]                       muffled <- FALSE
[16:04:33.146]                       if (inherits(cond, "message")) {
[16:04:33.146]                         muffled <- grepl(pattern, "muffleMessage")
[16:04:33.146]                         if (muffled) 
[16:04:33.146]                           invokeRestart("muffleMessage")
[16:04:33.146]                       }
[16:04:33.146]                       else if (inherits(cond, "warning")) {
[16:04:33.146]                         muffled <- grepl(pattern, "muffleWarning")
[16:04:33.146]                         if (muffled) 
[16:04:33.146]                           invokeRestart("muffleWarning")
[16:04:33.146]                       }
[16:04:33.146]                       else if (inherits(cond, "condition")) {
[16:04:33.146]                         if (!is.null(pattern)) {
[16:04:33.146]                           computeRestarts <- base::computeRestarts
[16:04:33.146]                           grepl <- base::grepl
[16:04:33.146]                           restarts <- computeRestarts(cond)
[16:04:33.146]                           for (restart in restarts) {
[16:04:33.146]                             name <- restart$name
[16:04:33.146]                             if (is.null(name)) 
[16:04:33.146]                               next
[16:04:33.146]                             if (!grepl(pattern, name)) 
[16:04:33.146]                               next
[16:04:33.146]                             invokeRestart(restart)
[16:04:33.146]                             muffled <- TRUE
[16:04:33.146]                             break
[16:04:33.146]                           }
[16:04:33.146]                         }
[16:04:33.146]                       }
[16:04:33.146]                       invisible(muffled)
[16:04:33.146]                     }
[16:04:33.146]                     muffleCondition(cond, pattern = "^muffle")
[16:04:33.146]                   }
[16:04:33.146]                 }
[16:04:33.146]             }
[16:04:33.146]         }))
[16:04:33.146]     }, error = function(ex) {
[16:04:33.146]         base::structure(base::list(value = NULL, visible = NULL, 
[16:04:33.146]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:04:33.146]                 ...future.rng), started = ...future.startTime, 
[16:04:33.146]             finished = Sys.time(), session_uuid = NA_character_, 
[16:04:33.146]             version = "1.8"), class = "FutureResult")
[16:04:33.146]     }, finally = {
[16:04:33.146]         if (!identical(...future.workdir, getwd())) 
[16:04:33.146]             setwd(...future.workdir)
[16:04:33.146]         {
[16:04:33.146]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:04:33.146]                 ...future.oldOptions$nwarnings <- NULL
[16:04:33.146]             }
[16:04:33.146]             base::options(...future.oldOptions)
[16:04:33.146]             if (.Platform$OS.type == "windows") {
[16:04:33.146]                 old_names <- names(...future.oldEnvVars)
[16:04:33.146]                 envs <- base::Sys.getenv()
[16:04:33.146]                 names <- names(envs)
[16:04:33.146]                 common <- intersect(names, old_names)
[16:04:33.146]                 added <- setdiff(names, old_names)
[16:04:33.146]                 removed <- setdiff(old_names, names)
[16:04:33.146]                 changed <- common[...future.oldEnvVars[common] != 
[16:04:33.146]                   envs[common]]
[16:04:33.146]                 NAMES <- toupper(changed)
[16:04:33.146]                 args <- list()
[16:04:33.146]                 for (kk in seq_along(NAMES)) {
[16:04:33.146]                   name <- changed[[kk]]
[16:04:33.146]                   NAME <- NAMES[[kk]]
[16:04:33.146]                   if (name != NAME && is.element(NAME, old_names)) 
[16:04:33.146]                     next
[16:04:33.146]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:04:33.146]                 }
[16:04:33.146]                 NAMES <- toupper(added)
[16:04:33.146]                 for (kk in seq_along(NAMES)) {
[16:04:33.146]                   name <- added[[kk]]
[16:04:33.146]                   NAME <- NAMES[[kk]]
[16:04:33.146]                   if (name != NAME && is.element(NAME, old_names)) 
[16:04:33.146]                     next
[16:04:33.146]                   args[[name]] <- ""
[16:04:33.146]                 }
[16:04:33.146]                 NAMES <- toupper(removed)
[16:04:33.146]                 for (kk in seq_along(NAMES)) {
[16:04:33.146]                   name <- removed[[kk]]
[16:04:33.146]                   NAME <- NAMES[[kk]]
[16:04:33.146]                   if (name != NAME && is.element(NAME, old_names)) 
[16:04:33.146]                     next
[16:04:33.146]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:04:33.146]                 }
[16:04:33.146]                 if (length(args) > 0) 
[16:04:33.146]                   base::do.call(base::Sys.setenv, args = args)
[16:04:33.146]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:04:33.146]             }
[16:04:33.146]             else {
[16:04:33.146]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:04:33.146]             }
[16:04:33.146]             {
[16:04:33.146]                 if (base::length(...future.futureOptionsAdded) > 
[16:04:33.146]                   0L) {
[16:04:33.146]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:04:33.146]                   base::names(opts) <- ...future.futureOptionsAdded
[16:04:33.146]                   base::options(opts)
[16:04:33.146]                 }
[16:04:33.146]                 {
[16:04:33.146]                   {
[16:04:33.146]                     base::options(mc.cores = ...future.mc.cores.old)
[16:04:33.146]                     NULL
[16:04:33.146]                   }
[16:04:33.146]                   options(future.plan = NULL)
[16:04:33.146]                   if (is.na(NA_character_)) 
[16:04:33.146]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:04:33.146]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:04:33.146]                   future::plan(list(function (..., workers = availableCores(), 
[16:04:33.146]                     lazy = FALSE, rscript_libs = .libPaths(), 
[16:04:33.146]                     envir = parent.frame()) 
[16:04:33.146]                   {
[16:04:33.146]                     if (is.function(workers)) 
[16:04:33.146]                       workers <- workers()
[16:04:33.146]                     workers <- structure(as.integer(workers), 
[16:04:33.146]                       class = class(workers))
[16:04:33.146]                     stop_if_not(length(workers) == 1, is.finite(workers), 
[16:04:33.146]                       workers >= 1)
[16:04:33.146]                     if (workers == 1L && !inherits(workers, "AsIs")) {
[16:04:33.146]                       return(sequential(..., lazy = TRUE, envir = envir))
[16:04:33.146]                     }
[16:04:33.146]                     future <- MultisessionFuture(..., workers = workers, 
[16:04:33.146]                       lazy = lazy, rscript_libs = rscript_libs, 
[16:04:33.146]                       envir = envir)
[16:04:33.146]                     if (!future$lazy) 
[16:04:33.146]                       future <- run(future)
[16:04:33.146]                     invisible(future)
[16:04:33.146]                   }), .cleanup = FALSE, .init = FALSE)
[16:04:33.146]                 }
[16:04:33.146]             }
[16:04:33.146]         }
[16:04:33.146]     })
[16:04:33.146]     if (TRUE) {
[16:04:33.146]         base::sink(type = "output", split = FALSE)
[16:04:33.146]         if (TRUE) {
[16:04:33.146]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:04:33.146]         }
[16:04:33.146]         else {
[16:04:33.146]             ...future.result["stdout"] <- base::list(NULL)
[16:04:33.146]         }
[16:04:33.146]         base::close(...future.stdout)
[16:04:33.146]         ...future.stdout <- NULL
[16:04:33.146]     }
[16:04:33.146]     ...future.result$conditions <- ...future.conditions
[16:04:33.146]     ...future.result$finished <- base::Sys.time()
[16:04:33.146]     ...future.result
[16:04:33.146] }
[16:04:33.149] Poll #1 (0): usedNodes() = 2, workers = 2
[16:04:33.168] receiveMessageFromWorker() for ClusterFuture ...
[16:04:33.168] - Validating connection of MultisessionFuture
[16:04:33.168] - received message: FutureResult
[16:04:33.168] - Received FutureResult
[16:04:33.168] - Erased future from FutureRegistry
[16:04:33.168] result() for ClusterFuture ...
[16:04:33.168] - result already collected: FutureResult
[16:04:33.168] result() for ClusterFuture ... done
[16:04:33.169] receiveMessageFromWorker() for ClusterFuture ... done
[16:04:33.169] result() for ClusterFuture ...
[16:04:33.169] - result already collected: FutureResult
[16:04:33.169] result() for ClusterFuture ... done
[16:04:33.169] result() for ClusterFuture ...
[16:04:33.169] - result already collected: FutureResult
[16:04:33.169] result() for ClusterFuture ... done
[16:04:33.170] Exporting 1 global objects (56 bytes) to cluster node #1 ...
[16:04:33.170] Exporting ‘ii’ (56 bytes) to cluster node #1 ...
[16:04:33.170] Exporting ‘ii’ (56 bytes) to cluster node #1 ... DONE
[16:04:33.170] Exporting 1 global objects (56 bytes) to cluster node #1 ... DONE
[16:04:33.171] MultisessionFuture started
[16:04:33.171] - Launch lazy future ... done
[16:04:33.171] run() for ‘MultisessionFuture’ ... done
[16:04:33.172] result() for ClusterFuture ...
[16:04:33.172] - result already collected: FutureResult
[16:04:33.172] result() for ClusterFuture ... done
[16:04:33.172] result() for ClusterFuture ...
[16:04:33.172] - result already collected: FutureResult
[16:04:33.172] result() for ClusterFuture ... done
[16:04:33.172] result() for ClusterFuture ...
[16:04:33.172] receiveMessageFromWorker() for ClusterFuture ...
[16:04:33.172] - Validating connection of MultisessionFuture
[16:04:33.211] - received message: FutureResult
[16:04:33.212] - Received FutureResult
[16:04:33.212] - Erased future from FutureRegistry
[16:04:33.212] result() for ClusterFuture ...
[16:04:33.212] - result already collected: FutureResult
[16:04:33.212] result() for ClusterFuture ... done
[16:04:33.212] signalConditions() ...
[16:04:33.212]  - include = ‘immediateCondition’
[16:04:33.212]  - exclude = 
[16:04:33.212]  - resignal = FALSE
[16:04:33.212]  - Number of conditions: 1
[16:04:33.213] signalConditions() ... done
[16:04:33.213] receiveMessageFromWorker() for ClusterFuture ... done
[16:04:33.213] result() for ClusterFuture ... done
[16:04:33.213] result() for ClusterFuture ...
[16:04:33.213] - result already collected: FutureResult
[16:04:33.213] result() for ClusterFuture ... done
[16:04:33.213] signalConditions() ...
[16:04:33.213]  - include = ‘immediateCondition’
[16:04:33.213]  - exclude = 
[16:04:33.213]  - resignal = FALSE
[16:04:33.213]  - Number of conditions: 1
[16:04:33.213] signalConditions() ... done
[16:04:33.214] Future state: ‘finished’
[16:04:33.214] result() for ClusterFuture ...
[16:04:33.214] - result already collected: FutureResult
[16:04:33.214] result() for ClusterFuture ... done
[16:04:33.214] signalConditions() ...
[16:04:33.214]  - include = ‘condition’
[16:04:33.214]  - exclude = ‘immediateCondition’
[16:04:33.214]  - resignal = TRUE
[16:04:33.214]  - Number of conditions: 1
[16:04:33.214]  - Condition #1: ‘simpleError’, ‘error’, ‘condition’
[16:04:33.215] signalConditions() ... done
[16:04:33.215] result() for ClusterFuture ...
[16:04:33.215] receiveMessageFromWorker() for ClusterFuture ...
[16:04:33.215] - Validating connection of MultisessionFuture
[16:04:33.224] - received message: FutureResult
[16:04:33.224] - Received FutureResult
[16:04:33.224] - Erased future from FutureRegistry
[16:04:33.224] result() for ClusterFuture ...
[16:04:33.224] - result already collected: FutureResult
[16:04:33.224] result() for ClusterFuture ... done
[16:04:33.224] receiveMessageFromWorker() for ClusterFuture ... done
[16:04:33.224] result() for ClusterFuture ... done
[16:04:33.224] result() for ClusterFuture ...
[16:04:33.224] - result already collected: FutureResult
[16:04:33.225] result() for ClusterFuture ... done
Warning in get(var, envir = x, inherits = FALSE) :
  restarting interrupted promise evaluation
[16:04:33.225] result() for ClusterFuture ...
[16:04:33.225] - result already collected: FutureResult
[16:04:33.225] result() for ClusterFuture ... done
[16:04:33.225] result() for ClusterFuture ...
[16:04:33.225] - result already collected: FutureResult
[16:04:33.225] result() for ClusterFuture ... done
[16:04:33.225] signalConditions() ...
[16:04:33.225]  - include = ‘immediateCondition’
[16:04:33.226]  - exclude = 
[16:04:33.226]  - resignal = FALSE
[16:04:33.226]  - Number of conditions: 1
[16:04:33.226] signalConditions() ... done
[16:04:33.226] Future state: ‘finished’
[16:04:33.226] result() for ClusterFuture ...
[16:04:33.226] - result already collected: FutureResult
[16:04:33.226] result() for ClusterFuture ... done
[16:04:33.226] signalConditions() ...
[16:04:33.226]  - include = ‘condition’
[16:04:33.226]  - exclude = ‘immediateCondition’
[16:04:33.227]  - resignal = TRUE
[16:04:33.227]  - Number of conditions: 1
[16:04:33.227]  - Condition #1: ‘simpleError’, ‘error’, ‘condition’
[16:04:33.227] signalConditions() ... done
Warning in get(var, envir = x, inherits = FALSE) :
  restarting interrupted promise evaluation
[16:04:33.227] result() for ClusterFuture ...
[16:04:33.227] - result already collected: FutureResult
[16:04:33.227] result() for ClusterFuture ... done
[16:04:33.227] result() for ClusterFuture ...
[16:04:33.228] - result already collected: FutureResult
[16:04:33.228] result() for ClusterFuture ... done
[16:04:33.228] signalConditions() ...
[16:04:33.228]  - include = ‘immediateCondition’
[16:04:33.228]  - exclude = 
[16:04:33.228]  - resignal = FALSE
[16:04:33.228]  - Number of conditions: 1
[16:04:33.228] signalConditions() ... done
[16:04:33.228] Future state: ‘finished’
[16:04:33.228] result() for ClusterFuture ...
[16:04:33.228] - result already collected: FutureResult
[16:04:33.229] result() for ClusterFuture ... done
[16:04:33.229] signalConditions() ...
[16:04:33.229]  - include = ‘condition’
[16:04:33.229]  - exclude = ‘immediateCondition’
[16:04:33.229]  - resignal = TRUE
[16:04:33.229]  - Number of conditions: 1
[16:04:33.229]  - Condition #1: ‘simpleError’, ‘error’, ‘condition’
[16:04:33.229] signalConditions() ... done
** Future evaluation with a poor-man's "progress bar"
[16:04:33.229] getGlobalsAndPackages() ...
[16:04:33.230] Searching for globals...
[16:04:33.232] - globals found: [4] ‘{’, ‘cat’, ‘for’, ‘:’
[16:04:33.232] Searching for globals ... DONE
[16:04:33.232] Resolving globals: FALSE
[16:04:33.232] 
[16:04:33.232] 
[16:04:33.232] getGlobalsAndPackages() ... DONE
[16:04:33.233] run() for ‘Future’ ...
[16:04:33.233] - state: ‘created’
[16:04:33.233] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[16:04:33.246] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[16:04:33.246] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[16:04:33.247]   - Field: ‘node’
[16:04:33.247]   - Field: ‘label’
[16:04:33.247]   - Field: ‘local’
[16:04:33.247]   - Field: ‘owner’
[16:04:33.247]   - Field: ‘envir’
[16:04:33.247]   - Field: ‘workers’
[16:04:33.247]   - Field: ‘packages’
[16:04:33.247]   - Field: ‘gc’
[16:04:33.247]   - Field: ‘conditions’
[16:04:33.247]   - Field: ‘persistent’
[16:04:33.248]   - Field: ‘expr’
[16:04:33.248]   - Field: ‘uuid’
[16:04:33.248]   - Field: ‘seed’
[16:04:33.248]   - Field: ‘version’
[16:04:33.248]   - Field: ‘result’
[16:04:33.248]   - Field: ‘asynchronous’
[16:04:33.248]   - Field: ‘calls’
[16:04:33.248]   - Field: ‘globals’
[16:04:33.248]   - Field: ‘stdout’
[16:04:33.248]   - Field: ‘earlySignal’
[16:04:33.248]   - Field: ‘lazy’
[16:04:33.249]   - Field: ‘state’
[16:04:33.249] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[16:04:33.249] - Launch lazy future ...
[16:04:33.249] Packages needed by the future expression (n = 0): <none>
[16:04:33.249] Packages needed by future strategies (n = 0): <none>
[16:04:33.250] {
[16:04:33.250]     {
[16:04:33.250]         {
[16:04:33.250]             ...future.startTime <- base::Sys.time()
[16:04:33.250]             {
[16:04:33.250]                 {
[16:04:33.250]                   {
[16:04:33.250]                     {
[16:04:33.250]                       base::local({
[16:04:33.250]                         has_future <- base::requireNamespace("future", 
[16:04:33.250]                           quietly = TRUE)
[16:04:33.250]                         if (has_future) {
[16:04:33.250]                           ns <- base::getNamespace("future")
[16:04:33.250]                           version <- ns[[".package"]][["version"]]
[16:04:33.250]                           if (is.null(version)) 
[16:04:33.250]                             version <- utils::packageVersion("future")
[16:04:33.250]                         }
[16:04:33.250]                         else {
[16:04:33.250]                           version <- NULL
[16:04:33.250]                         }
[16:04:33.250]                         if (!has_future || version < "1.8.0") {
[16:04:33.250]                           info <- base::c(r_version = base::gsub("R version ", 
[16:04:33.250]                             "", base::R.version$version.string), 
[16:04:33.250]                             platform = base::sprintf("%s (%s-bit)", 
[16:04:33.250]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:04:33.250]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[16:04:33.250]                               "release", "version")], collapse = " "), 
[16:04:33.250]                             hostname = base::Sys.info()[["nodename"]])
[16:04:33.250]                           info <- base::sprintf("%s: %s", base::names(info), 
[16:04:33.250]                             info)
[16:04:33.250]                           info <- base::paste(info, collapse = "; ")
[16:04:33.250]                           if (!has_future) {
[16:04:33.250]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:04:33.250]                               info)
[16:04:33.250]                           }
[16:04:33.250]                           else {
[16:04:33.250]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:04:33.250]                               info, version)
[16:04:33.250]                           }
[16:04:33.250]                           base::stop(msg)
[16:04:33.250]                         }
[16:04:33.250]                       })
[16:04:33.250]                     }
[16:04:33.250]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[16:04:33.250]                     base::options(mc.cores = 1L)
[16:04:33.250]                   }
[16:04:33.250]                   options(future.plan = NULL)
[16:04:33.250]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:04:33.250]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:04:33.250]                 }
[16:04:33.250]                 ...future.workdir <- getwd()
[16:04:33.250]             }
[16:04:33.250]             ...future.oldOptions <- base::as.list(base::.Options)
[16:04:33.250]             ...future.oldEnvVars <- base::Sys.getenv()
[16:04:33.250]         }
[16:04:33.250]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:04:33.250]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:04:33.250]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:04:33.250]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:04:33.250]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:04:33.250]             future.stdout.windows.reencode = NULL, width = 80L)
[16:04:33.250]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:04:33.250]             base::names(...future.oldOptions))
[16:04:33.250]     }
[16:04:33.250]     if (FALSE) {
[16:04:33.250]     }
[16:04:33.250]     else {
[16:04:33.250]         if (TRUE) {
[16:04:33.250]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:04:33.250]                 open = "w")
[16:04:33.250]         }
[16:04:33.250]         else {
[16:04:33.250]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:04:33.250]                 windows = "NUL", "/dev/null"), open = "w")
[16:04:33.250]         }
[16:04:33.250]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:04:33.250]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:04:33.250]             base::sink(type = "output", split = FALSE)
[16:04:33.250]             base::close(...future.stdout)
[16:04:33.250]         }, add = TRUE)
[16:04:33.250]     }
[16:04:33.250]     ...future.frame <- base::sys.nframe()
[16:04:33.250]     ...future.conditions <- base::list()
[16:04:33.250]     ...future.rng <- base::globalenv()$.Random.seed
[16:04:33.250]     if (FALSE) {
[16:04:33.250]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:04:33.250]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:04:33.250]     }
[16:04:33.250]     ...future.result <- base::tryCatch({
[16:04:33.250]         base::withCallingHandlers({
[16:04:33.250]             ...future.value <- base::withVisible(base::local({
[16:04:33.250]                 ...future.makeSendCondition <- base::local({
[16:04:33.250]                   sendCondition <- NULL
[16:04:33.250]                   function(frame = 1L) {
[16:04:33.250]                     if (is.function(sendCondition)) 
[16:04:33.250]                       return(sendCondition)
[16:04:33.250]                     ns <- getNamespace("parallel")
[16:04:33.250]                     if (exists("sendData", mode = "function", 
[16:04:33.250]                       envir = ns)) {
[16:04:33.250]                       parallel_sendData <- get("sendData", mode = "function", 
[16:04:33.250]                         envir = ns)
[16:04:33.250]                       envir <- sys.frame(frame)
[16:04:33.250]                       master <- NULL
[16:04:33.250]                       while (!identical(envir, .GlobalEnv) && 
[16:04:33.250]                         !identical(envir, emptyenv())) {
[16:04:33.250]                         if (exists("master", mode = "list", envir = envir, 
[16:04:33.250]                           inherits = FALSE)) {
[16:04:33.250]                           master <- get("master", mode = "list", 
[16:04:33.250]                             envir = envir, inherits = FALSE)
[16:04:33.250]                           if (inherits(master, c("SOCKnode", 
[16:04:33.250]                             "SOCK0node"))) {
[16:04:33.250]                             sendCondition <<- function(cond) {
[16:04:33.250]                               data <- list(type = "VALUE", value = cond, 
[16:04:33.250]                                 success = TRUE)
[16:04:33.250]                               parallel_sendData(master, data)
[16:04:33.250]                             }
[16:04:33.250]                             return(sendCondition)
[16:04:33.250]                           }
[16:04:33.250]                         }
[16:04:33.250]                         frame <- frame + 1L
[16:04:33.250]                         envir <- sys.frame(frame)
[16:04:33.250]                       }
[16:04:33.250]                     }
[16:04:33.250]                     sendCondition <<- function(cond) NULL
[16:04:33.250]                   }
[16:04:33.250]                 })
[16:04:33.250]                 withCallingHandlers({
[16:04:33.250]                   {
[16:04:33.250]                     cat("Processing: ")
[16:04:33.250]                     for (ii in 1:10) {
[16:04:33.250]                       cat(".")
[16:04:33.250]                     }
[16:04:33.250]                     cat(" [100%]\n")
[16:04:33.250]                     4
[16:04:33.250]                   }
[16:04:33.250]                 }, immediateCondition = function(cond) {
[16:04:33.250]                   sendCondition <- ...future.makeSendCondition()
[16:04:33.250]                   sendCondition(cond)
[16:04:33.250]                   muffleCondition <- function (cond, pattern = "^muffle") 
[16:04:33.250]                   {
[16:04:33.250]                     inherits <- base::inherits
[16:04:33.250]                     invokeRestart <- base::invokeRestart
[16:04:33.250]                     is.null <- base::is.null
[16:04:33.250]                     muffled <- FALSE
[16:04:33.250]                     if (inherits(cond, "message")) {
[16:04:33.250]                       muffled <- grepl(pattern, "muffleMessage")
[16:04:33.250]                       if (muffled) 
[16:04:33.250]                         invokeRestart("muffleMessage")
[16:04:33.250]                     }
[16:04:33.250]                     else if (inherits(cond, "warning")) {
[16:04:33.250]                       muffled <- grepl(pattern, "muffleWarning")
[16:04:33.250]                       if (muffled) 
[16:04:33.250]                         invokeRestart("muffleWarning")
[16:04:33.250]                     }
[16:04:33.250]                     else if (inherits(cond, "condition")) {
[16:04:33.250]                       if (!is.null(pattern)) {
[16:04:33.250]                         computeRestarts <- base::computeRestarts
[16:04:33.250]                         grepl <- base::grepl
[16:04:33.250]                         restarts <- computeRestarts(cond)
[16:04:33.250]                         for (restart in restarts) {
[16:04:33.250]                           name <- restart$name
[16:04:33.250]                           if (is.null(name)) 
[16:04:33.250]                             next
[16:04:33.250]                           if (!grepl(pattern, name)) 
[16:04:33.250]                             next
[16:04:33.250]                           invokeRestart(restart)
[16:04:33.250]                           muffled <- TRUE
[16:04:33.250]                           break
[16:04:33.250]                         }
[16:04:33.250]                       }
[16:04:33.250]                     }
[16:04:33.250]                     invisible(muffled)
[16:04:33.250]                   }
[16:04:33.250]                   muffleCondition(cond)
[16:04:33.250]                 })
[16:04:33.250]             }))
[16:04:33.250]             future::FutureResult(value = ...future.value$value, 
[16:04:33.250]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:04:33.250]                   ...future.rng), globalenv = if (FALSE) 
[16:04:33.250]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:04:33.250]                     ...future.globalenv.names))
[16:04:33.250]                 else NULL, started = ...future.startTime, version = "1.8")
[16:04:33.250]         }, condition = base::local({
[16:04:33.250]             c <- base::c
[16:04:33.250]             inherits <- base::inherits
[16:04:33.250]             invokeRestart <- base::invokeRestart
[16:04:33.250]             length <- base::length
[16:04:33.250]             list <- base::list
[16:04:33.250]             seq.int <- base::seq.int
[16:04:33.250]             signalCondition <- base::signalCondition
[16:04:33.250]             sys.calls <- base::sys.calls
[16:04:33.250]             `[[` <- base::`[[`
[16:04:33.250]             `+` <- base::`+`
[16:04:33.250]             `<<-` <- base::`<<-`
[16:04:33.250]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:04:33.250]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:04:33.250]                   3L)]
[16:04:33.250]             }
[16:04:33.250]             function(cond) {
[16:04:33.250]                 is_error <- inherits(cond, "error")
[16:04:33.250]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:04:33.250]                   NULL)
[16:04:33.250]                 if (is_error) {
[16:04:33.250]                   sessionInformation <- function() {
[16:04:33.250]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:04:33.250]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:04:33.250]                       search = base::search(), system = base::Sys.info())
[16:04:33.250]                   }
[16:04:33.250]                   ...future.conditions[[length(...future.conditions) + 
[16:04:33.250]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:04:33.250]                     cond$call), session = sessionInformation(), 
[16:04:33.250]                     timestamp = base::Sys.time(), signaled = 0L)
[16:04:33.250]                   signalCondition(cond)
[16:04:33.250]                 }
[16:04:33.250]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:04:33.250]                 "immediateCondition"))) {
[16:04:33.250]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:04:33.250]                   ...future.conditions[[length(...future.conditions) + 
[16:04:33.250]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:04:33.250]                   if (TRUE && !signal) {
[16:04:33.250]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:04:33.250]                     {
[16:04:33.250]                       inherits <- base::inherits
[16:04:33.250]                       invokeRestart <- base::invokeRestart
[16:04:33.250]                       is.null <- base::is.null
[16:04:33.250]                       muffled <- FALSE
[16:04:33.250]                       if (inherits(cond, "message")) {
[16:04:33.250]                         muffled <- grepl(pattern, "muffleMessage")
[16:04:33.250]                         if (muffled) 
[16:04:33.250]                           invokeRestart("muffleMessage")
[16:04:33.250]                       }
[16:04:33.250]                       else if (inherits(cond, "warning")) {
[16:04:33.250]                         muffled <- grepl(pattern, "muffleWarning")
[16:04:33.250]                         if (muffled) 
[16:04:33.250]                           invokeRestart("muffleWarning")
[16:04:33.250]                       }
[16:04:33.250]                       else if (inherits(cond, "condition")) {
[16:04:33.250]                         if (!is.null(pattern)) {
[16:04:33.250]                           computeRestarts <- base::computeRestarts
[16:04:33.250]                           grepl <- base::grepl
[16:04:33.250]                           restarts <- computeRestarts(cond)
[16:04:33.250]                           for (restart in restarts) {
[16:04:33.250]                             name <- restart$name
[16:04:33.250]                             if (is.null(name)) 
[16:04:33.250]                               next
[16:04:33.250]                             if (!grepl(pattern, name)) 
[16:04:33.250]                               next
[16:04:33.250]                             invokeRestart(restart)
[16:04:33.250]                             muffled <- TRUE
[16:04:33.250]                             break
[16:04:33.250]                           }
[16:04:33.250]                         }
[16:04:33.250]                       }
[16:04:33.250]                       invisible(muffled)
[16:04:33.250]                     }
[16:04:33.250]                     muffleCondition(cond, pattern = "^muffle")
[16:04:33.250]                   }
[16:04:33.250]                 }
[16:04:33.250]                 else {
[16:04:33.250]                   if (TRUE) {
[16:04:33.250]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:04:33.250]                     {
[16:04:33.250]                       inherits <- base::inherits
[16:04:33.250]                       invokeRestart <- base::invokeRestart
[16:04:33.250]                       is.null <- base::is.null
[16:04:33.250]                       muffled <- FALSE
[16:04:33.250]                       if (inherits(cond, "message")) {
[16:04:33.250]                         muffled <- grepl(pattern, "muffleMessage")
[16:04:33.250]                         if (muffled) 
[16:04:33.250]                           invokeRestart("muffleMessage")
[16:04:33.250]                       }
[16:04:33.250]                       else if (inherits(cond, "warning")) {
[16:04:33.250]                         muffled <- grepl(pattern, "muffleWarning")
[16:04:33.250]                         if (muffled) 
[16:04:33.250]                           invokeRestart("muffleWarning")
[16:04:33.250]                       }
[16:04:33.250]                       else if (inherits(cond, "condition")) {
[16:04:33.250]                         if (!is.null(pattern)) {
[16:04:33.250]                           computeRestarts <- base::computeRestarts
[16:04:33.250]                           grepl <- base::grepl
[16:04:33.250]                           restarts <- computeRestarts(cond)
[16:04:33.250]                           for (restart in restarts) {
[16:04:33.250]                             name <- restart$name
[16:04:33.250]                             if (is.null(name)) 
[16:04:33.250]                               next
[16:04:33.250]                             if (!grepl(pattern, name)) 
[16:04:33.250]                               next
[16:04:33.250]                             invokeRestart(restart)
[16:04:33.250]                             muffled <- TRUE
[16:04:33.250]                             break
[16:04:33.250]                           }
[16:04:33.250]                         }
[16:04:33.250]                       }
[16:04:33.250]                       invisible(muffled)
[16:04:33.250]                     }
[16:04:33.250]                     muffleCondition(cond, pattern = "^muffle")
[16:04:33.250]                   }
[16:04:33.250]                 }
[16:04:33.250]             }
[16:04:33.250]         }))
[16:04:33.250]     }, error = function(ex) {
[16:04:33.250]         base::structure(base::list(value = NULL, visible = NULL, 
[16:04:33.250]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:04:33.250]                 ...future.rng), started = ...future.startTime, 
[16:04:33.250]             finished = Sys.time(), session_uuid = NA_character_, 
[16:04:33.250]             version = "1.8"), class = "FutureResult")
[16:04:33.250]     }, finally = {
[16:04:33.250]         if (!identical(...future.workdir, getwd())) 
[16:04:33.250]             setwd(...future.workdir)
[16:04:33.250]         {
[16:04:33.250]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:04:33.250]                 ...future.oldOptions$nwarnings <- NULL
[16:04:33.250]             }
[16:04:33.250]             base::options(...future.oldOptions)
[16:04:33.250]             if (.Platform$OS.type == "windows") {
[16:04:33.250]                 old_names <- names(...future.oldEnvVars)
[16:04:33.250]                 envs <- base::Sys.getenv()
[16:04:33.250]                 names <- names(envs)
[16:04:33.250]                 common <- intersect(names, old_names)
[16:04:33.250]                 added <- setdiff(names, old_names)
[16:04:33.250]                 removed <- setdiff(old_names, names)
[16:04:33.250]                 changed <- common[...future.oldEnvVars[common] != 
[16:04:33.250]                   envs[common]]
[16:04:33.250]                 NAMES <- toupper(changed)
[16:04:33.250]                 args <- list()
[16:04:33.250]                 for (kk in seq_along(NAMES)) {
[16:04:33.250]                   name <- changed[[kk]]
[16:04:33.250]                   NAME <- NAMES[[kk]]
[16:04:33.250]                   if (name != NAME && is.element(NAME, old_names)) 
[16:04:33.250]                     next
[16:04:33.250]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:04:33.250]                 }
[16:04:33.250]                 NAMES <- toupper(added)
[16:04:33.250]                 for (kk in seq_along(NAMES)) {
[16:04:33.250]                   name <- added[[kk]]
[16:04:33.250]                   NAME <- NAMES[[kk]]
[16:04:33.250]                   if (name != NAME && is.element(NAME, old_names)) 
[16:04:33.250]                     next
[16:04:33.250]                   args[[name]] <- ""
[16:04:33.250]                 }
[16:04:33.250]                 NAMES <- toupper(removed)
[16:04:33.250]                 for (kk in seq_along(NAMES)) {
[16:04:33.250]                   name <- removed[[kk]]
[16:04:33.250]                   NAME <- NAMES[[kk]]
[16:04:33.250]                   if (name != NAME && is.element(NAME, old_names)) 
[16:04:33.250]                     next
[16:04:33.250]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:04:33.250]                 }
[16:04:33.250]                 if (length(args) > 0) 
[16:04:33.250]                   base::do.call(base::Sys.setenv, args = args)
[16:04:33.250]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:04:33.250]             }
[16:04:33.250]             else {
[16:04:33.250]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:04:33.250]             }
[16:04:33.250]             {
[16:04:33.250]                 if (base::length(...future.futureOptionsAdded) > 
[16:04:33.250]                   0L) {
[16:04:33.250]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:04:33.250]                   base::names(opts) <- ...future.futureOptionsAdded
[16:04:33.250]                   base::options(opts)
[16:04:33.250]                 }
[16:04:33.250]                 {
[16:04:33.250]                   {
[16:04:33.250]                     base::options(mc.cores = ...future.mc.cores.old)
[16:04:33.250]                     NULL
[16:04:33.250]                   }
[16:04:33.250]                   options(future.plan = NULL)
[16:04:33.250]                   if (is.na(NA_character_)) 
[16:04:33.250]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:04:33.250]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:04:33.250]                   future::plan(list(function (..., workers = availableCores(), 
[16:04:33.250]                     lazy = FALSE, rscript_libs = .libPaths(), 
[16:04:33.250]                     envir = parent.frame()) 
[16:04:33.250]                   {
[16:04:33.250]                     if (is.function(workers)) 
[16:04:33.250]                       workers <- workers()
[16:04:33.250]                     workers <- structure(as.integer(workers), 
[16:04:33.250]                       class = class(workers))
[16:04:33.250]                     stop_if_not(length(workers) == 1, is.finite(workers), 
[16:04:33.250]                       workers >= 1)
[16:04:33.250]                     if (workers == 1L && !inherits(workers, "AsIs")) {
[16:04:33.250]                       return(sequential(..., lazy = TRUE, envir = envir))
[16:04:33.250]                     }
[16:04:33.250]                     future <- MultisessionFuture(..., workers = workers, 
[16:04:33.250]                       lazy = lazy, rscript_libs = rscript_libs, 
[16:04:33.250]                       envir = envir)
[16:04:33.250]                     if (!future$lazy) 
[16:04:33.250]                       future <- run(future)
[16:04:33.250]                     invisible(future)
[16:04:33.250]                   }), .cleanup = FALSE, .init = FALSE)
[16:04:33.250]                 }
[16:04:33.250]             }
[16:04:33.250]         }
[16:04:33.250]     })
[16:04:33.250]     if (TRUE) {
[16:04:33.250]         base::sink(type = "output", split = FALSE)
[16:04:33.250]         if (TRUE) {
[16:04:33.250]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:04:33.250]         }
[16:04:33.250]         else {
[16:04:33.250]             ...future.result["stdout"] <- base::list(NULL)
[16:04:33.250]         }
[16:04:33.250]         base::close(...future.stdout)
[16:04:33.250]         ...future.stdout <- NULL
[16:04:33.250]     }
[16:04:33.250]     ...future.result$conditions <- ...future.conditions
[16:04:33.250]     ...future.result$finished <- base::Sys.time()
[16:04:33.250]     ...future.result
[16:04:33.250] }
[16:04:33.253] MultisessionFuture started
[16:04:33.253] - Launch lazy future ... done
[16:04:33.253] run() for ‘MultisessionFuture’ ... done
** Collecting results
v1 = 1
v2 = 2
Warning in sprintf(...) : restarting interrupted promise evaluation
[16:04:33.253] result() for ClusterFuture ...
[16:04:33.253] - result already collected: FutureResult
[16:04:33.253] result() for ClusterFuture ... done
[16:04:33.254] result() for ClusterFuture ...
[16:04:33.254] - result already collected: FutureResult
[16:04:33.254] result() for ClusterFuture ... done
[16:04:33.254] signalConditions() ...
[16:04:33.254]  - include = ‘immediateCondition’
[16:04:33.254]  - exclude = 
[16:04:33.254]  - resignal = FALSE
[16:04:33.254]  - Number of conditions: 1
[16:04:33.254] signalConditions() ... done
[16:04:33.254] Future state: ‘finished’
[16:04:33.255] result() for ClusterFuture ...
[16:04:33.255] - result already collected: FutureResult
[16:04:33.255] result() for ClusterFuture ... done
[16:04:33.255] signalConditions() ...
[16:04:33.255]  - include = ‘condition’
[16:04:33.255]  - exclude = ‘immediateCondition’
[16:04:33.255]  - resignal = TRUE
[16:04:33.255]  - Number of conditions: 1
[16:04:33.255]  - Condition #1: ‘simpleError’, ‘error’, ‘condition’
[16:04:33.255] signalConditions() ... done
v3: <simpleError> (as expect)
[16:04:33.255] result() for ClusterFuture ...
[16:04:33.256] receiveMessageFromWorker() for ClusterFuture ...
[16:04:33.256] - Validating connection of MultisessionFuture
[16:04:33.299] - received message: FutureResult
[16:04:33.299] - Received FutureResult
[16:04:33.300] - Erased future from FutureRegistry
[16:04:33.300] result() for ClusterFuture ...
[16:04:33.300] - result already collected: FutureResult
[16:04:33.300] result() for ClusterFuture ... done
[16:04:33.300] receiveMessageFromWorker() for ClusterFuture ... done
[16:04:33.300] result() for ClusterFuture ... done
[16:04:33.300] result() for ClusterFuture ...
[16:04:33.300] - result already collected: FutureResult
[16:04:33.300] result() for ClusterFuture ... done
Processing: .......... [100%]
v4 = 4
** Left-to-right and right-to-left future assignments
[16:04:33.301] getGlobalsAndPackages() ...
[16:04:33.301] Searching for globals...
[16:04:33.301] 
[16:04:33.301] Searching for globals ... DONE
[16:04:33.301] - globals: [0] <none>
[16:04:33.301] getGlobalsAndPackages() ... DONE
[16:04:33.302] run() for ‘Future’ ...
[16:04:33.302] - state: ‘created’
[16:04:33.302] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[16:04:33.316] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[16:04:33.316] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[16:04:33.316]   - Field: ‘node’
[16:04:33.316]   - Field: ‘label’
[16:04:33.316]   - Field: ‘local’
[16:04:33.316]   - Field: ‘owner’
[16:04:33.317]   - Field: ‘envir’
[16:04:33.317]   - Field: ‘workers’
[16:04:33.317]   - Field: ‘packages’
[16:04:33.317]   - Field: ‘gc’
[16:04:33.317]   - Field: ‘conditions’
[16:04:33.317]   - Field: ‘persistent’
[16:04:33.317]   - Field: ‘expr’
[16:04:33.317]   - Field: ‘uuid’
[16:04:33.317]   - Field: ‘seed’
[16:04:33.317]   - Field: ‘version’
[16:04:33.317]   - Field: ‘result’
[16:04:33.318]   - Field: ‘asynchronous’
[16:04:33.318]   - Field: ‘calls’
[16:04:33.318]   - Field: ‘globals’
[16:04:33.318]   - Field: ‘stdout’
[16:04:33.318]   - Field: ‘earlySignal’
[16:04:33.318]   - Field: ‘lazy’
[16:04:33.318]   - Field: ‘state’
[16:04:33.318] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[16:04:33.318] - Launch lazy future ...
[16:04:33.319] Packages needed by the future expression (n = 0): <none>
[16:04:33.319] Packages needed by future strategies (n = 0): <none>
[16:04:33.321] {
[16:04:33.321]     {
[16:04:33.321]         {
[16:04:33.321]             ...future.startTime <- base::Sys.time()
[16:04:33.321]             {
[16:04:33.321]                 {
[16:04:33.321]                   {
[16:04:33.321]                     {
[16:04:33.321]                       base::local({
[16:04:33.321]                         has_future <- base::requireNamespace("future", 
[16:04:33.321]                           quietly = TRUE)
[16:04:33.321]                         if (has_future) {
[16:04:33.321]                           ns <- base::getNamespace("future")
[16:04:33.321]                           version <- ns[[".package"]][["version"]]
[16:04:33.321]                           if (is.null(version)) 
[16:04:33.321]                             version <- utils::packageVersion("future")
[16:04:33.321]                         }
[16:04:33.321]                         else {
[16:04:33.321]                           version <- NULL
[16:04:33.321]                         }
[16:04:33.321]                         if (!has_future || version < "1.8.0") {
[16:04:33.321]                           info <- base::c(r_version = base::gsub("R version ", 
[16:04:33.321]                             "", base::R.version$version.string), 
[16:04:33.321]                             platform = base::sprintf("%s (%s-bit)", 
[16:04:33.321]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:04:33.321]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[16:04:33.321]                               "release", "version")], collapse = " "), 
[16:04:33.321]                             hostname = base::Sys.info()[["nodename"]])
[16:04:33.321]                           info <- base::sprintf("%s: %s", base::names(info), 
[16:04:33.321]                             info)
[16:04:33.321]                           info <- base::paste(info, collapse = "; ")
[16:04:33.321]                           if (!has_future) {
[16:04:33.321]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:04:33.321]                               info)
[16:04:33.321]                           }
[16:04:33.321]                           else {
[16:04:33.321]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:04:33.321]                               info, version)
[16:04:33.321]                           }
[16:04:33.321]                           base::stop(msg)
[16:04:33.321]                         }
[16:04:33.321]                       })
[16:04:33.321]                     }
[16:04:33.321]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[16:04:33.321]                     base::options(mc.cores = 1L)
[16:04:33.321]                   }
[16:04:33.321]                   options(future.plan = NULL)
[16:04:33.321]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:04:33.321]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:04:33.321]                 }
[16:04:33.321]                 ...future.workdir <- getwd()
[16:04:33.321]             }
[16:04:33.321]             ...future.oldOptions <- base::as.list(base::.Options)
[16:04:33.321]             ...future.oldEnvVars <- base::Sys.getenv()
[16:04:33.321]         }
[16:04:33.321]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:04:33.321]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:04:33.321]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:04:33.321]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:04:33.321]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:04:33.321]             future.stdout.windows.reencode = NULL, width = 80L)
[16:04:33.321]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:04:33.321]             base::names(...future.oldOptions))
[16:04:33.321]     }
[16:04:33.321]     if (FALSE) {
[16:04:33.321]     }
[16:04:33.321]     else {
[16:04:33.321]         if (TRUE) {
[16:04:33.321]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:04:33.321]                 open = "w")
[16:04:33.321]         }
[16:04:33.321]         else {
[16:04:33.321]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:04:33.321]                 windows = "NUL", "/dev/null"), open = "w")
[16:04:33.321]         }
[16:04:33.321]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:04:33.321]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:04:33.321]             base::sink(type = "output", split = FALSE)
[16:04:33.321]             base::close(...future.stdout)
[16:04:33.321]         }, add = TRUE)
[16:04:33.321]     }
[16:04:33.321]     ...future.frame <- base::sys.nframe()
[16:04:33.321]     ...future.conditions <- base::list()
[16:04:33.321]     ...future.rng <- base::globalenv()$.Random.seed
[16:04:33.321]     if (FALSE) {
[16:04:33.321]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:04:33.321]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:04:33.321]     }
[16:04:33.321]     ...future.result <- base::tryCatch({
[16:04:33.321]         base::withCallingHandlers({
[16:04:33.321]             ...future.value <- base::withVisible(base::local({
[16:04:33.321]                 ...future.makeSendCondition <- base::local({
[16:04:33.321]                   sendCondition <- NULL
[16:04:33.321]                   function(frame = 1L) {
[16:04:33.321]                     if (is.function(sendCondition)) 
[16:04:33.321]                       return(sendCondition)
[16:04:33.321]                     ns <- getNamespace("parallel")
[16:04:33.321]                     if (exists("sendData", mode = "function", 
[16:04:33.321]                       envir = ns)) {
[16:04:33.321]                       parallel_sendData <- get("sendData", mode = "function", 
[16:04:33.321]                         envir = ns)
[16:04:33.321]                       envir <- sys.frame(frame)
[16:04:33.321]                       master <- NULL
[16:04:33.321]                       while (!identical(envir, .GlobalEnv) && 
[16:04:33.321]                         !identical(envir, emptyenv())) {
[16:04:33.321]                         if (exists("master", mode = "list", envir = envir, 
[16:04:33.321]                           inherits = FALSE)) {
[16:04:33.321]                           master <- get("master", mode = "list", 
[16:04:33.321]                             envir = envir, inherits = FALSE)
[16:04:33.321]                           if (inherits(master, c("SOCKnode", 
[16:04:33.321]                             "SOCK0node"))) {
[16:04:33.321]                             sendCondition <<- function(cond) {
[16:04:33.321]                               data <- list(type = "VALUE", value = cond, 
[16:04:33.321]                                 success = TRUE)
[16:04:33.321]                               parallel_sendData(master, data)
[16:04:33.321]                             }
[16:04:33.321]                             return(sendCondition)
[16:04:33.321]                           }
[16:04:33.321]                         }
[16:04:33.321]                         frame <- frame + 1L
[16:04:33.321]                         envir <- sys.frame(frame)
[16:04:33.321]                       }
[16:04:33.321]                     }
[16:04:33.321]                     sendCondition <<- function(cond) NULL
[16:04:33.321]                   }
[16:04:33.321]                 })
[16:04:33.321]                 withCallingHandlers({
[16:04:33.321]                   1
[16:04:33.321]                 }, immediateCondition = function(cond) {
[16:04:33.321]                   sendCondition <- ...future.makeSendCondition()
[16:04:33.321]                   sendCondition(cond)
[16:04:33.321]                   muffleCondition <- function (cond, pattern = "^muffle") 
[16:04:33.321]                   {
[16:04:33.321]                     inherits <- base::inherits
[16:04:33.321]                     invokeRestart <- base::invokeRestart
[16:04:33.321]                     is.null <- base::is.null
[16:04:33.321]                     muffled <- FALSE
[16:04:33.321]                     if (inherits(cond, "message")) {
[16:04:33.321]                       muffled <- grepl(pattern, "muffleMessage")
[16:04:33.321]                       if (muffled) 
[16:04:33.321]                         invokeRestart("muffleMessage")
[16:04:33.321]                     }
[16:04:33.321]                     else if (inherits(cond, "warning")) {
[16:04:33.321]                       muffled <- grepl(pattern, "muffleWarning")
[16:04:33.321]                       if (muffled) 
[16:04:33.321]                         invokeRestart("muffleWarning")
[16:04:33.321]                     }
[16:04:33.321]                     else if (inherits(cond, "condition")) {
[16:04:33.321]                       if (!is.null(pattern)) {
[16:04:33.321]                         computeRestarts <- base::computeRestarts
[16:04:33.321]                         grepl <- base::grepl
[16:04:33.321]                         restarts <- computeRestarts(cond)
[16:04:33.321]                         for (restart in restarts) {
[16:04:33.321]                           name <- restart$name
[16:04:33.321]                           if (is.null(name)) 
[16:04:33.321]                             next
[16:04:33.321]                           if (!grepl(pattern, name)) 
[16:04:33.321]                             next
[16:04:33.321]                           invokeRestart(restart)
[16:04:33.321]                           muffled <- TRUE
[16:04:33.321]                           break
[16:04:33.321]                         }
[16:04:33.321]                       }
[16:04:33.321]                     }
[16:04:33.321]                     invisible(muffled)
[16:04:33.321]                   }
[16:04:33.321]                   muffleCondition(cond)
[16:04:33.321]                 })
[16:04:33.321]             }))
[16:04:33.321]             future::FutureResult(value = ...future.value$value, 
[16:04:33.321]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:04:33.321]                   ...future.rng), globalenv = if (FALSE) 
[16:04:33.321]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:04:33.321]                     ...future.globalenv.names))
[16:04:33.321]                 else NULL, started = ...future.startTime, version = "1.8")
[16:04:33.321]         }, condition = base::local({
[16:04:33.321]             c <- base::c
[16:04:33.321]             inherits <- base::inherits
[16:04:33.321]             invokeRestart <- base::invokeRestart
[16:04:33.321]             length <- base::length
[16:04:33.321]             list <- base::list
[16:04:33.321]             seq.int <- base::seq.int
[16:04:33.321]             signalCondition <- base::signalCondition
[16:04:33.321]             sys.calls <- base::sys.calls
[16:04:33.321]             `[[` <- base::`[[`
[16:04:33.321]             `+` <- base::`+`
[16:04:33.321]             `<<-` <- base::`<<-`
[16:04:33.321]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:04:33.321]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:04:33.321]                   3L)]
[16:04:33.321]             }
[16:04:33.321]             function(cond) {
[16:04:33.321]                 is_error <- inherits(cond, "error")
[16:04:33.321]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:04:33.321]                   NULL)
[16:04:33.321]                 if (is_error) {
[16:04:33.321]                   sessionInformation <- function() {
[16:04:33.321]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:04:33.321]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:04:33.321]                       search = base::search(), system = base::Sys.info())
[16:04:33.321]                   }
[16:04:33.321]                   ...future.conditions[[length(...future.conditions) + 
[16:04:33.321]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:04:33.321]                     cond$call), session = sessionInformation(), 
[16:04:33.321]                     timestamp = base::Sys.time(), signaled = 0L)
[16:04:33.321]                   signalCondition(cond)
[16:04:33.321]                 }
[16:04:33.321]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:04:33.321]                 "immediateCondition"))) {
[16:04:33.321]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:04:33.321]                   ...future.conditions[[length(...future.conditions) + 
[16:04:33.321]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:04:33.321]                   if (TRUE && !signal) {
[16:04:33.321]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:04:33.321]                     {
[16:04:33.321]                       inherits <- base::inherits
[16:04:33.321]                       invokeRestart <- base::invokeRestart
[16:04:33.321]                       is.null <- base::is.null
[16:04:33.321]                       muffled <- FALSE
[16:04:33.321]                       if (inherits(cond, "message")) {
[16:04:33.321]                         muffled <- grepl(pattern, "muffleMessage")
[16:04:33.321]                         if (muffled) 
[16:04:33.321]                           invokeRestart("muffleMessage")
[16:04:33.321]                       }
[16:04:33.321]                       else if (inherits(cond, "warning")) {
[16:04:33.321]                         muffled <- grepl(pattern, "muffleWarning")
[16:04:33.321]                         if (muffled) 
[16:04:33.321]                           invokeRestart("muffleWarning")
[16:04:33.321]                       }
[16:04:33.321]                       else if (inherits(cond, "condition")) {
[16:04:33.321]                         if (!is.null(pattern)) {
[16:04:33.321]                           computeRestarts <- base::computeRestarts
[16:04:33.321]                           grepl <- base::grepl
[16:04:33.321]                           restarts <- computeRestarts(cond)
[16:04:33.321]                           for (restart in restarts) {
[16:04:33.321]                             name <- restart$name
[16:04:33.321]                             if (is.null(name)) 
[16:04:33.321]                               next
[16:04:33.321]                             if (!grepl(pattern, name)) 
[16:04:33.321]                               next
[16:04:33.321]                             invokeRestart(restart)
[16:04:33.321]                             muffled <- TRUE
[16:04:33.321]                             break
[16:04:33.321]                           }
[16:04:33.321]                         }
[16:04:33.321]                       }
[16:04:33.321]                       invisible(muffled)
[16:04:33.321]                     }
[16:04:33.321]                     muffleCondition(cond, pattern = "^muffle")
[16:04:33.321]                   }
[16:04:33.321]                 }
[16:04:33.321]                 else {
[16:04:33.321]                   if (TRUE) {
[16:04:33.321]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:04:33.321]                     {
[16:04:33.321]                       inherits <- base::inherits
[16:04:33.321]                       invokeRestart <- base::invokeRestart
[16:04:33.321]                       is.null <- base::is.null
[16:04:33.321]                       muffled <- FALSE
[16:04:33.321]                       if (inherits(cond, "message")) {
[16:04:33.321]                         muffled <- grepl(pattern, "muffleMessage")
[16:04:33.321]                         if (muffled) 
[16:04:33.321]                           invokeRestart("muffleMessage")
[16:04:33.321]                       }
[16:04:33.321]                       else if (inherits(cond, "warning")) {
[16:04:33.321]                         muffled <- grepl(pattern, "muffleWarning")
[16:04:33.321]                         if (muffled) 
[16:04:33.321]                           invokeRestart("muffleWarning")
[16:04:33.321]                       }
[16:04:33.321]                       else if (inherits(cond, "condition")) {
[16:04:33.321]                         if (!is.null(pattern)) {
[16:04:33.321]                           computeRestarts <- base::computeRestarts
[16:04:33.321]                           grepl <- base::grepl
[16:04:33.321]                           restarts <- computeRestarts(cond)
[16:04:33.321]                           for (restart in restarts) {
[16:04:33.321]                             name <- restart$name
[16:04:33.321]                             if (is.null(name)) 
[16:04:33.321]                               next
[16:04:33.321]                             if (!grepl(pattern, name)) 
[16:04:33.321]                               next
[16:04:33.321]                             invokeRestart(restart)
[16:04:33.321]                             muffled <- TRUE
[16:04:33.321]                             break
[16:04:33.321]                           }
[16:04:33.321]                         }
[16:04:33.321]                       }
[16:04:33.321]                       invisible(muffled)
[16:04:33.321]                     }
[16:04:33.321]                     muffleCondition(cond, pattern = "^muffle")
[16:04:33.321]                   }
[16:04:33.321]                 }
[16:04:33.321]             }
[16:04:33.321]         }))
[16:04:33.321]     }, error = function(ex) {
[16:04:33.321]         base::structure(base::list(value = NULL, visible = NULL, 
[16:04:33.321]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:04:33.321]                 ...future.rng), started = ...future.startTime, 
[16:04:33.321]             finished = Sys.time(), session_uuid = NA_character_, 
[16:04:33.321]             version = "1.8"), class = "FutureResult")
[16:04:33.321]     }, finally = {
[16:04:33.321]         if (!identical(...future.workdir, getwd())) 
[16:04:33.321]             setwd(...future.workdir)
[16:04:33.321]         {
[16:04:33.321]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:04:33.321]                 ...future.oldOptions$nwarnings <- NULL
[16:04:33.321]             }
[16:04:33.321]             base::options(...future.oldOptions)
[16:04:33.321]             if (.Platform$OS.type == "windows") {
[16:04:33.321]                 old_names <- names(...future.oldEnvVars)
[16:04:33.321]                 envs <- base::Sys.getenv()
[16:04:33.321]                 names <- names(envs)
[16:04:33.321]                 common <- intersect(names, old_names)
[16:04:33.321]                 added <- setdiff(names, old_names)
[16:04:33.321]                 removed <- setdiff(old_names, names)
[16:04:33.321]                 changed <- common[...future.oldEnvVars[common] != 
[16:04:33.321]                   envs[common]]
[16:04:33.321]                 NAMES <- toupper(changed)
[16:04:33.321]                 args <- list()
[16:04:33.321]                 for (kk in seq_along(NAMES)) {
[16:04:33.321]                   name <- changed[[kk]]
[16:04:33.321]                   NAME <- NAMES[[kk]]
[16:04:33.321]                   if (name != NAME && is.element(NAME, old_names)) 
[16:04:33.321]                     next
[16:04:33.321]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:04:33.321]                 }
[16:04:33.321]                 NAMES <- toupper(added)
[16:04:33.321]                 for (kk in seq_along(NAMES)) {
[16:04:33.321]                   name <- added[[kk]]
[16:04:33.321]                   NAME <- NAMES[[kk]]
[16:04:33.321]                   if (name != NAME && is.element(NAME, old_names)) 
[16:04:33.321]                     next
[16:04:33.321]                   args[[name]] <- ""
[16:04:33.321]                 }
[16:04:33.321]                 NAMES <- toupper(removed)
[16:04:33.321]                 for (kk in seq_along(NAMES)) {
[16:04:33.321]                   name <- removed[[kk]]
[16:04:33.321]                   NAME <- NAMES[[kk]]
[16:04:33.321]                   if (name != NAME && is.element(NAME, old_names)) 
[16:04:33.321]                     next
[16:04:33.321]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:04:33.321]                 }
[16:04:33.321]                 if (length(args) > 0) 
[16:04:33.321]                   base::do.call(base::Sys.setenv, args = args)
[16:04:33.321]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:04:33.321]             }
[16:04:33.321]             else {
[16:04:33.321]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:04:33.321]             }
[16:04:33.321]             {
[16:04:33.321]                 if (base::length(...future.futureOptionsAdded) > 
[16:04:33.321]                   0L) {
[16:04:33.321]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:04:33.321]                   base::names(opts) <- ...future.futureOptionsAdded
[16:04:33.321]                   base::options(opts)
[16:04:33.321]                 }
[16:04:33.321]                 {
[16:04:33.321]                   {
[16:04:33.321]                     base::options(mc.cores = ...future.mc.cores.old)
[16:04:33.321]                     NULL
[16:04:33.321]                   }
[16:04:33.321]                   options(future.plan = NULL)
[16:04:33.321]                   if (is.na(NA_character_)) 
[16:04:33.321]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:04:33.321]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:04:33.321]                   future::plan(list(function (..., workers = availableCores(), 
[16:04:33.321]                     lazy = FALSE, rscript_libs = .libPaths(), 
[16:04:33.321]                     envir = parent.frame()) 
[16:04:33.321]                   {
[16:04:33.321]                     if (is.function(workers)) 
[16:04:33.321]                       workers <- workers()
[16:04:33.321]                     workers <- structure(as.integer(workers), 
[16:04:33.321]                       class = class(workers))
[16:04:33.321]                     stop_if_not(length(workers) == 1, is.finite(workers), 
[16:04:33.321]                       workers >= 1)
[16:04:33.321]                     if (workers == 1L && !inherits(workers, "AsIs")) {
[16:04:33.321]                       return(sequential(..., lazy = TRUE, envir = envir))
[16:04:33.321]                     }
[16:04:33.321]                     future <- MultisessionFuture(..., workers = workers, 
[16:04:33.321]                       lazy = lazy, rscript_libs = rscript_libs, 
[16:04:33.321]                       envir = envir)
[16:04:33.321]                     if (!future$lazy) 
[16:04:33.321]                       future <- run(future)
[16:04:33.321]                     invisible(future)
[16:04:33.321]                   }), .cleanup = FALSE, .init = FALSE)
[16:04:33.321]                 }
[16:04:33.321]             }
[16:04:33.321]         }
[16:04:33.321]     })
[16:04:33.321]     if (TRUE) {
[16:04:33.321]         base::sink(type = "output", split = FALSE)
[16:04:33.321]         if (TRUE) {
[16:04:33.321]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:04:33.321]         }
[16:04:33.321]         else {
[16:04:33.321]             ...future.result["stdout"] <- base::list(NULL)
[16:04:33.321]         }
[16:04:33.321]         base::close(...future.stdout)
[16:04:33.321]         ...future.stdout <- NULL
[16:04:33.321]     }
[16:04:33.321]     ...future.result$conditions <- ...future.conditions
[16:04:33.321]     ...future.result$finished <- base::Sys.time()
[16:04:33.321]     ...future.result
[16:04:33.321] }
[16:04:33.324] MultisessionFuture started
[16:04:33.324] - Launch lazy future ... done
[16:04:33.324] run() for ‘MultisessionFuture’ ... done
[16:04:33.324] result() for ClusterFuture ...
[16:04:33.324] receiveMessageFromWorker() for ClusterFuture ...
[16:04:33.324] - Validating connection of MultisessionFuture
[16:04:33.371] - received message: FutureResult
[16:04:33.372] - Received FutureResult
[16:04:33.372] - Erased future from FutureRegistry
[16:04:33.372] result() for ClusterFuture ...
[16:04:33.372] - result already collected: FutureResult
[16:04:33.372] result() for ClusterFuture ... done
[16:04:33.372] receiveMessageFromWorker() for ClusterFuture ... done
[16:04:33.372] result() for ClusterFuture ... done
[16:04:33.372] result() for ClusterFuture ...
[16:04:33.372] - result already collected: FutureResult
[16:04:33.372] result() for ClusterFuture ... done
c = 1
[16:04:33.373] getGlobalsAndPackages() ...
[16:04:33.373] Searching for globals...
[16:04:33.373] 
[16:04:33.373] Searching for globals ... DONE
[16:04:33.373] - globals: [0] <none>
[16:04:33.373] getGlobalsAndPackages() ... DONE
[16:04:33.374] run() for ‘Future’ ...
[16:04:33.374] - state: ‘created’
[16:04:33.374] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[16:04:33.387] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[16:04:33.388] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[16:04:33.388]   - Field: ‘node’
[16:04:33.388]   - Field: ‘label’
[16:04:33.388]   - Field: ‘local’
[16:04:33.388]   - Field: ‘owner’
[16:04:33.388]   - Field: ‘envir’
[16:04:33.388]   - Field: ‘workers’
[16:04:33.388]   - Field: ‘packages’
[16:04:33.388]   - Field: ‘gc’
[16:04:33.388]   - Field: ‘conditions’
[16:04:33.389]   - Field: ‘persistent’
[16:04:33.389]   - Field: ‘expr’
[16:04:33.389]   - Field: ‘uuid’
[16:04:33.389]   - Field: ‘seed’
[16:04:33.389]   - Field: ‘version’
[16:04:33.389]   - Field: ‘result’
[16:04:33.389]   - Field: ‘asynchronous’
[16:04:33.389]   - Field: ‘calls’
[16:04:33.389]   - Field: ‘globals’
[16:04:33.389]   - Field: ‘stdout’
[16:04:33.389]   - Field: ‘earlySignal’
[16:04:33.390]   - Field: ‘lazy’
[16:04:33.390]   - Field: ‘state’
[16:04:33.390] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[16:04:33.390] - Launch lazy future ...
[16:04:33.390] Packages needed by the future expression (n = 0): <none>
[16:04:33.390] Packages needed by future strategies (n = 0): <none>
[16:04:33.391] {
[16:04:33.391]     {
[16:04:33.391]         {
[16:04:33.391]             ...future.startTime <- base::Sys.time()
[16:04:33.391]             {
[16:04:33.391]                 {
[16:04:33.391]                   {
[16:04:33.391]                     {
[16:04:33.391]                       base::local({
[16:04:33.391]                         has_future <- base::requireNamespace("future", 
[16:04:33.391]                           quietly = TRUE)
[16:04:33.391]                         if (has_future) {
[16:04:33.391]                           ns <- base::getNamespace("future")
[16:04:33.391]                           version <- ns[[".package"]][["version"]]
[16:04:33.391]                           if (is.null(version)) 
[16:04:33.391]                             version <- utils::packageVersion("future")
[16:04:33.391]                         }
[16:04:33.391]                         else {
[16:04:33.391]                           version <- NULL
[16:04:33.391]                         }
[16:04:33.391]                         if (!has_future || version < "1.8.0") {
[16:04:33.391]                           info <- base::c(r_version = base::gsub("R version ", 
[16:04:33.391]                             "", base::R.version$version.string), 
[16:04:33.391]                             platform = base::sprintf("%s (%s-bit)", 
[16:04:33.391]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:04:33.391]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[16:04:33.391]                               "release", "version")], collapse = " "), 
[16:04:33.391]                             hostname = base::Sys.info()[["nodename"]])
[16:04:33.391]                           info <- base::sprintf("%s: %s", base::names(info), 
[16:04:33.391]                             info)
[16:04:33.391]                           info <- base::paste(info, collapse = "; ")
[16:04:33.391]                           if (!has_future) {
[16:04:33.391]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:04:33.391]                               info)
[16:04:33.391]                           }
[16:04:33.391]                           else {
[16:04:33.391]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:04:33.391]                               info, version)
[16:04:33.391]                           }
[16:04:33.391]                           base::stop(msg)
[16:04:33.391]                         }
[16:04:33.391]                       })
[16:04:33.391]                     }
[16:04:33.391]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[16:04:33.391]                     base::options(mc.cores = 1L)
[16:04:33.391]                   }
[16:04:33.391]                   options(future.plan = NULL)
[16:04:33.391]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:04:33.391]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:04:33.391]                 }
[16:04:33.391]                 ...future.workdir <- getwd()
[16:04:33.391]             }
[16:04:33.391]             ...future.oldOptions <- base::as.list(base::.Options)
[16:04:33.391]             ...future.oldEnvVars <- base::Sys.getenv()
[16:04:33.391]         }
[16:04:33.391]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:04:33.391]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:04:33.391]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:04:33.391]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:04:33.391]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:04:33.391]             future.stdout.windows.reencode = NULL, width = 80L)
[16:04:33.391]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:04:33.391]             base::names(...future.oldOptions))
[16:04:33.391]     }
[16:04:33.391]     if (FALSE) {
[16:04:33.391]     }
[16:04:33.391]     else {
[16:04:33.391]         if (TRUE) {
[16:04:33.391]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:04:33.391]                 open = "w")
[16:04:33.391]         }
[16:04:33.391]         else {
[16:04:33.391]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:04:33.391]                 windows = "NUL", "/dev/null"), open = "w")
[16:04:33.391]         }
[16:04:33.391]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:04:33.391]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:04:33.391]             base::sink(type = "output", split = FALSE)
[16:04:33.391]             base::close(...future.stdout)
[16:04:33.391]         }, add = TRUE)
[16:04:33.391]     }
[16:04:33.391]     ...future.frame <- base::sys.nframe()
[16:04:33.391]     ...future.conditions <- base::list()
[16:04:33.391]     ...future.rng <- base::globalenv()$.Random.seed
[16:04:33.391]     if (FALSE) {
[16:04:33.391]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:04:33.391]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:04:33.391]     }
[16:04:33.391]     ...future.result <- base::tryCatch({
[16:04:33.391]         base::withCallingHandlers({
[16:04:33.391]             ...future.value <- base::withVisible(base::local({
[16:04:33.391]                 ...future.makeSendCondition <- base::local({
[16:04:33.391]                   sendCondition <- NULL
[16:04:33.391]                   function(frame = 1L) {
[16:04:33.391]                     if (is.function(sendCondition)) 
[16:04:33.391]                       return(sendCondition)
[16:04:33.391]                     ns <- getNamespace("parallel")
[16:04:33.391]                     if (exists("sendData", mode = "function", 
[16:04:33.391]                       envir = ns)) {
[16:04:33.391]                       parallel_sendData <- get("sendData", mode = "function", 
[16:04:33.391]                         envir = ns)
[16:04:33.391]                       envir <- sys.frame(frame)
[16:04:33.391]                       master <- NULL
[16:04:33.391]                       while (!identical(envir, .GlobalEnv) && 
[16:04:33.391]                         !identical(envir, emptyenv())) {
[16:04:33.391]                         if (exists("master", mode = "list", envir = envir, 
[16:04:33.391]                           inherits = FALSE)) {
[16:04:33.391]                           master <- get("master", mode = "list", 
[16:04:33.391]                             envir = envir, inherits = FALSE)
[16:04:33.391]                           if (inherits(master, c("SOCKnode", 
[16:04:33.391]                             "SOCK0node"))) {
[16:04:33.391]                             sendCondition <<- function(cond) {
[16:04:33.391]                               data <- list(type = "VALUE", value = cond, 
[16:04:33.391]                                 success = TRUE)
[16:04:33.391]                               parallel_sendData(master, data)
[16:04:33.391]                             }
[16:04:33.391]                             return(sendCondition)
[16:04:33.391]                           }
[16:04:33.391]                         }
[16:04:33.391]                         frame <- frame + 1L
[16:04:33.391]                         envir <- sys.frame(frame)
[16:04:33.391]                       }
[16:04:33.391]                     }
[16:04:33.391]                     sendCondition <<- function(cond) NULL
[16:04:33.391]                   }
[16:04:33.391]                 })
[16:04:33.391]                 withCallingHandlers({
[16:04:33.391]                   1
[16:04:33.391]                 }, immediateCondition = function(cond) {
[16:04:33.391]                   sendCondition <- ...future.makeSendCondition()
[16:04:33.391]                   sendCondition(cond)
[16:04:33.391]                   muffleCondition <- function (cond, pattern = "^muffle") 
[16:04:33.391]                   {
[16:04:33.391]                     inherits <- base::inherits
[16:04:33.391]                     invokeRestart <- base::invokeRestart
[16:04:33.391]                     is.null <- base::is.null
[16:04:33.391]                     muffled <- FALSE
[16:04:33.391]                     if (inherits(cond, "message")) {
[16:04:33.391]                       muffled <- grepl(pattern, "muffleMessage")
[16:04:33.391]                       if (muffled) 
[16:04:33.391]                         invokeRestart("muffleMessage")
[16:04:33.391]                     }
[16:04:33.391]                     else if (inherits(cond, "warning")) {
[16:04:33.391]                       muffled <- grepl(pattern, "muffleWarning")
[16:04:33.391]                       if (muffled) 
[16:04:33.391]                         invokeRestart("muffleWarning")
[16:04:33.391]                     }
[16:04:33.391]                     else if (inherits(cond, "condition")) {
[16:04:33.391]                       if (!is.null(pattern)) {
[16:04:33.391]                         computeRestarts <- base::computeRestarts
[16:04:33.391]                         grepl <- base::grepl
[16:04:33.391]                         restarts <- computeRestarts(cond)
[16:04:33.391]                         for (restart in restarts) {
[16:04:33.391]                           name <- restart$name
[16:04:33.391]                           if (is.null(name)) 
[16:04:33.391]                             next
[16:04:33.391]                           if (!grepl(pattern, name)) 
[16:04:33.391]                             next
[16:04:33.391]                           invokeRestart(restart)
[16:04:33.391]                           muffled <- TRUE
[16:04:33.391]                           break
[16:04:33.391]                         }
[16:04:33.391]                       }
[16:04:33.391]                     }
[16:04:33.391]                     invisible(muffled)
[16:04:33.391]                   }
[16:04:33.391]                   muffleCondition(cond)
[16:04:33.391]                 })
[16:04:33.391]             }))
[16:04:33.391]             future::FutureResult(value = ...future.value$value, 
[16:04:33.391]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:04:33.391]                   ...future.rng), globalenv = if (FALSE) 
[16:04:33.391]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:04:33.391]                     ...future.globalenv.names))
[16:04:33.391]                 else NULL, started = ...future.startTime, version = "1.8")
[16:04:33.391]         }, condition = base::local({
[16:04:33.391]             c <- base::c
[16:04:33.391]             inherits <- base::inherits
[16:04:33.391]             invokeRestart <- base::invokeRestart
[16:04:33.391]             length <- base::length
[16:04:33.391]             list <- base::list
[16:04:33.391]             seq.int <- base::seq.int
[16:04:33.391]             signalCondition <- base::signalCondition
[16:04:33.391]             sys.calls <- base::sys.calls
[16:04:33.391]             `[[` <- base::`[[`
[16:04:33.391]             `+` <- base::`+`
[16:04:33.391]             `<<-` <- base::`<<-`
[16:04:33.391]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:04:33.391]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:04:33.391]                   3L)]
[16:04:33.391]             }
[16:04:33.391]             function(cond) {
[16:04:33.391]                 is_error <- inherits(cond, "error")
[16:04:33.391]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:04:33.391]                   NULL)
[16:04:33.391]                 if (is_error) {
[16:04:33.391]                   sessionInformation <- function() {
[16:04:33.391]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:04:33.391]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:04:33.391]                       search = base::search(), system = base::Sys.info())
[16:04:33.391]                   }
[16:04:33.391]                   ...future.conditions[[length(...future.conditions) + 
[16:04:33.391]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:04:33.391]                     cond$call), session = sessionInformation(), 
[16:04:33.391]                     timestamp = base::Sys.time(), signaled = 0L)
[16:04:33.391]                   signalCondition(cond)
[16:04:33.391]                 }
[16:04:33.391]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:04:33.391]                 "immediateCondition"))) {
[16:04:33.391]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:04:33.391]                   ...future.conditions[[length(...future.conditions) + 
[16:04:33.391]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:04:33.391]                   if (TRUE && !signal) {
[16:04:33.391]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:04:33.391]                     {
[16:04:33.391]                       inherits <- base::inherits
[16:04:33.391]                       invokeRestart <- base::invokeRestart
[16:04:33.391]                       is.null <- base::is.null
[16:04:33.391]                       muffled <- FALSE
[16:04:33.391]                       if (inherits(cond, "message")) {
[16:04:33.391]                         muffled <- grepl(pattern, "muffleMessage")
[16:04:33.391]                         if (muffled) 
[16:04:33.391]                           invokeRestart("muffleMessage")
[16:04:33.391]                       }
[16:04:33.391]                       else if (inherits(cond, "warning")) {
[16:04:33.391]                         muffled <- grepl(pattern, "muffleWarning")
[16:04:33.391]                         if (muffled) 
[16:04:33.391]                           invokeRestart("muffleWarning")
[16:04:33.391]                       }
[16:04:33.391]                       else if (inherits(cond, "condition")) {
[16:04:33.391]                         if (!is.null(pattern)) {
[16:04:33.391]                           computeRestarts <- base::computeRestarts
[16:04:33.391]                           grepl <- base::grepl
[16:04:33.391]                           restarts <- computeRestarts(cond)
[16:04:33.391]                           for (restart in restarts) {
[16:04:33.391]                             name <- restart$name
[16:04:33.391]                             if (is.null(name)) 
[16:04:33.391]                               next
[16:04:33.391]                             if (!grepl(pattern, name)) 
[16:04:33.391]                               next
[16:04:33.391]                             invokeRestart(restart)
[16:04:33.391]                             muffled <- TRUE
[16:04:33.391]                             break
[16:04:33.391]                           }
[16:04:33.391]                         }
[16:04:33.391]                       }
[16:04:33.391]                       invisible(muffled)
[16:04:33.391]                     }
[16:04:33.391]                     muffleCondition(cond, pattern = "^muffle")
[16:04:33.391]                   }
[16:04:33.391]                 }
[16:04:33.391]                 else {
[16:04:33.391]                   if (TRUE) {
[16:04:33.391]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:04:33.391]                     {
[16:04:33.391]                       inherits <- base::inherits
[16:04:33.391]                       invokeRestart <- base::invokeRestart
[16:04:33.391]                       is.null <- base::is.null
[16:04:33.391]                       muffled <- FALSE
[16:04:33.391]                       if (inherits(cond, "message")) {
[16:04:33.391]                         muffled <- grepl(pattern, "muffleMessage")
[16:04:33.391]                         if (muffled) 
[16:04:33.391]                           invokeRestart("muffleMessage")
[16:04:33.391]                       }
[16:04:33.391]                       else if (inherits(cond, "warning")) {
[16:04:33.391]                         muffled <- grepl(pattern, "muffleWarning")
[16:04:33.391]                         if (muffled) 
[16:04:33.391]                           invokeRestart("muffleWarning")
[16:04:33.391]                       }
[16:04:33.391]                       else if (inherits(cond, "condition")) {
[16:04:33.391]                         if (!is.null(pattern)) {
[16:04:33.391]                           computeRestarts <- base::computeRestarts
[16:04:33.391]                           grepl <- base::grepl
[16:04:33.391]                           restarts <- computeRestarts(cond)
[16:04:33.391]                           for (restart in restarts) {
[16:04:33.391]                             name <- restart$name
[16:04:33.391]                             if (is.null(name)) 
[16:04:33.391]                               next
[16:04:33.391]                             if (!grepl(pattern, name)) 
[16:04:33.391]                               next
[16:04:33.391]                             invokeRestart(restart)
[16:04:33.391]                             muffled <- TRUE
[16:04:33.391]                             break
[16:04:33.391]                           }
[16:04:33.391]                         }
[16:04:33.391]                       }
[16:04:33.391]                       invisible(muffled)
[16:04:33.391]                     }
[16:04:33.391]                     muffleCondition(cond, pattern = "^muffle")
[16:04:33.391]                   }
[16:04:33.391]                 }
[16:04:33.391]             }
[16:04:33.391]         }))
[16:04:33.391]     }, error = function(ex) {
[16:04:33.391]         base::structure(base::list(value = NULL, visible = NULL, 
[16:04:33.391]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:04:33.391]                 ...future.rng), started = ...future.startTime, 
[16:04:33.391]             finished = Sys.time(), session_uuid = NA_character_, 
[16:04:33.391]             version = "1.8"), class = "FutureResult")
[16:04:33.391]     }, finally = {
[16:04:33.391]         if (!identical(...future.workdir, getwd())) 
[16:04:33.391]             setwd(...future.workdir)
[16:04:33.391]         {
[16:04:33.391]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:04:33.391]                 ...future.oldOptions$nwarnings <- NULL
[16:04:33.391]             }
[16:04:33.391]             base::options(...future.oldOptions)
[16:04:33.391]             if (.Platform$OS.type == "windows") {
[16:04:33.391]                 old_names <- names(...future.oldEnvVars)
[16:04:33.391]                 envs <- base::Sys.getenv()
[16:04:33.391]                 names <- names(envs)
[16:04:33.391]                 common <- intersect(names, old_names)
[16:04:33.391]                 added <- setdiff(names, old_names)
[16:04:33.391]                 removed <- setdiff(old_names, names)
[16:04:33.391]                 changed <- common[...future.oldEnvVars[common] != 
[16:04:33.391]                   envs[common]]
[16:04:33.391]                 NAMES <- toupper(changed)
[16:04:33.391]                 args <- list()
[16:04:33.391]                 for (kk in seq_along(NAMES)) {
[16:04:33.391]                   name <- changed[[kk]]
[16:04:33.391]                   NAME <- NAMES[[kk]]
[16:04:33.391]                   if (name != NAME && is.element(NAME, old_names)) 
[16:04:33.391]                     next
[16:04:33.391]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:04:33.391]                 }
[16:04:33.391]                 NAMES <- toupper(added)
[16:04:33.391]                 for (kk in seq_along(NAMES)) {
[16:04:33.391]                   name <- added[[kk]]
[16:04:33.391]                   NAME <- NAMES[[kk]]
[16:04:33.391]                   if (name != NAME && is.element(NAME, old_names)) 
[16:04:33.391]                     next
[16:04:33.391]                   args[[name]] <- ""
[16:04:33.391]                 }
[16:04:33.391]                 NAMES <- toupper(removed)
[16:04:33.391]                 for (kk in seq_along(NAMES)) {
[16:04:33.391]                   name <- removed[[kk]]
[16:04:33.391]                   NAME <- NAMES[[kk]]
[16:04:33.391]                   if (name != NAME && is.element(NAME, old_names)) 
[16:04:33.391]                     next
[16:04:33.391]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:04:33.391]                 }
[16:04:33.391]                 if (length(args) > 0) 
[16:04:33.391]                   base::do.call(base::Sys.setenv, args = args)
[16:04:33.391]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:04:33.391]             }
[16:04:33.391]             else {
[16:04:33.391]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:04:33.391]             }
[16:04:33.391]             {
[16:04:33.391]                 if (base::length(...future.futureOptionsAdded) > 
[16:04:33.391]                   0L) {
[16:04:33.391]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:04:33.391]                   base::names(opts) <- ...future.futureOptionsAdded
[16:04:33.391]                   base::options(opts)
[16:04:33.391]                 }
[16:04:33.391]                 {
[16:04:33.391]                   {
[16:04:33.391]                     base::options(mc.cores = ...future.mc.cores.old)
[16:04:33.391]                     NULL
[16:04:33.391]                   }
[16:04:33.391]                   options(future.plan = NULL)
[16:04:33.391]                   if (is.na(NA_character_)) 
[16:04:33.391]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:04:33.391]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:04:33.391]                   future::plan(list(function (..., workers = availableCores(), 
[16:04:33.391]                     lazy = FALSE, rscript_libs = .libPaths(), 
[16:04:33.391]                     envir = parent.frame()) 
[16:04:33.391]                   {
[16:04:33.391]                     if (is.function(workers)) 
[16:04:33.391]                       workers <- workers()
[16:04:33.391]                     workers <- structure(as.integer(workers), 
[16:04:33.391]                       class = class(workers))
[16:04:33.391]                     stop_if_not(length(workers) == 1, is.finite(workers), 
[16:04:33.391]                       workers >= 1)
[16:04:33.391]                     if (workers == 1L && !inherits(workers, "AsIs")) {
[16:04:33.391]                       return(sequential(..., lazy = TRUE, envir = envir))
[16:04:33.391]                     }
[16:04:33.391]                     future <- MultisessionFuture(..., workers = workers, 
[16:04:33.391]                       lazy = lazy, rscript_libs = rscript_libs, 
[16:04:33.391]                       envir = envir)
[16:04:33.391]                     if (!future$lazy) 
[16:04:33.391]                       future <- run(future)
[16:04:33.391]                     invisible(future)
[16:04:33.391]                   }), .cleanup = FALSE, .init = FALSE)
[16:04:33.391]                 }
[16:04:33.391]             }
[16:04:33.391]         }
[16:04:33.391]     })
[16:04:33.391]     if (TRUE) {
[16:04:33.391]         base::sink(type = "output", split = FALSE)
[16:04:33.391]         if (TRUE) {
[16:04:33.391]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:04:33.391]         }
[16:04:33.391]         else {
[16:04:33.391]             ...future.result["stdout"] <- base::list(NULL)
[16:04:33.391]         }
[16:04:33.391]         base::close(...future.stdout)
[16:04:33.391]         ...future.stdout <- NULL
[16:04:33.391]     }
[16:04:33.391]     ...future.result$conditions <- ...future.conditions
[16:04:33.391]     ...future.result$finished <- base::Sys.time()
[16:04:33.391]     ...future.result
[16:04:33.391] }
[16:04:33.394] MultisessionFuture started
[16:04:33.394] - Launch lazy future ... done
[16:04:33.394] run() for ‘MultisessionFuture’ ... done
[16:04:33.394] result() for ClusterFuture ...
[16:04:33.394] receiveMessageFromWorker() for ClusterFuture ...
[16:04:33.394] - Validating connection of MultisessionFuture
[16:04:33.439] - received message: FutureResult
[16:04:33.439] - Received FutureResult
[16:04:33.440] - Erased future from FutureRegistry
[16:04:33.440] result() for ClusterFuture ...
[16:04:33.440] - result already collected: FutureResult
[16:04:33.440] result() for ClusterFuture ... done
[16:04:33.440] receiveMessageFromWorker() for ClusterFuture ... done
[16:04:33.440] result() for ClusterFuture ... done
[16:04:33.440] result() for ClusterFuture ...
[16:04:33.440] - result already collected: FutureResult
[16:04:33.440] result() for ClusterFuture ... done
d = 1
** Nested future assignments
[16:04:33.441] getGlobalsAndPackages() ...
[16:04:33.441] Searching for globals...
[16:04:33.444] - globals found: [5] ‘{’, ‘<-’, ‘%<-%’, ‘%->%’, ‘+’
[16:04:33.444] Searching for globals ... DONE
[16:04:33.445] Resolving globals: FALSE
[16:04:33.445] 
[16:04:33.445] - packages: [1] ‘future’
[16:04:33.445] getGlobalsAndPackages() ... DONE
[16:04:33.445] run() for ‘Future’ ...
[16:04:33.446] - state: ‘created’
[16:04:33.446] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[16:04:33.461] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[16:04:33.461] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[16:04:33.461]   - Field: ‘node’
[16:04:33.461]   - Field: ‘label’
[16:04:33.461]   - Field: ‘local’
[16:04:33.461]   - Field: ‘owner’
[16:04:33.461]   - Field: ‘envir’
[16:04:33.461]   - Field: ‘workers’
[16:04:33.461]   - Field: ‘packages’
[16:04:33.462]   - Field: ‘gc’
[16:04:33.462]   - Field: ‘conditions’
[16:04:33.462]   - Field: ‘persistent’
[16:04:33.462]   - Field: ‘expr’
[16:04:33.462]   - Field: ‘uuid’
[16:04:33.462]   - Field: ‘seed’
[16:04:33.462]   - Field: ‘version’
[16:04:33.462]   - Field: ‘result’
[16:04:33.462]   - Field: ‘asynchronous’
[16:04:33.462]   - Field: ‘calls’
[16:04:33.463]   - Field: ‘globals’
[16:04:33.463]   - Field: ‘stdout’
[16:04:33.463]   - Field: ‘earlySignal’
[16:04:33.463]   - Field: ‘lazy’
[16:04:33.463]   - Field: ‘state’
[16:04:33.463] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[16:04:33.463] - Launch lazy future ...
[16:04:33.463] Packages needed by the future expression (n = 1): ‘future’
[16:04:33.463] Packages needed by future strategies (n = 0): <none>
[16:04:33.464] {
[16:04:33.464]     {
[16:04:33.464]         {
[16:04:33.464]             ...future.startTime <- base::Sys.time()
[16:04:33.464]             {
[16:04:33.464]                 {
[16:04:33.464]                   {
[16:04:33.464]                     {
[16:04:33.464]                       {
[16:04:33.464]                         base::local({
[16:04:33.464]                           has_future <- base::requireNamespace("future", 
[16:04:33.464]                             quietly = TRUE)
[16:04:33.464]                           if (has_future) {
[16:04:33.464]                             ns <- base::getNamespace("future")
[16:04:33.464]                             version <- ns[[".package"]][["version"]]
[16:04:33.464]                             if (is.null(version)) 
[16:04:33.464]                               version <- utils::packageVersion("future")
[16:04:33.464]                           }
[16:04:33.464]                           else {
[16:04:33.464]                             version <- NULL
[16:04:33.464]                           }
[16:04:33.464]                           if (!has_future || version < "1.8.0") {
[16:04:33.464]                             info <- base::c(r_version = base::gsub("R version ", 
[16:04:33.464]                               "", base::R.version$version.string), 
[16:04:33.464]                               platform = base::sprintf("%s (%s-bit)", 
[16:04:33.464]                                 base::R.version$platform, 8 * 
[16:04:33.464]                                   base::.Machine$sizeof.pointer), 
[16:04:33.464]                               os = base::paste(base::Sys.info()[base::c("sysname", 
[16:04:33.464]                                 "release", "version")], collapse = " "), 
[16:04:33.464]                               hostname = base::Sys.info()[["nodename"]])
[16:04:33.464]                             info <- base::sprintf("%s: %s", base::names(info), 
[16:04:33.464]                               info)
[16:04:33.464]                             info <- base::paste(info, collapse = "; ")
[16:04:33.464]                             if (!has_future) {
[16:04:33.464]                               msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:04:33.464]                                 info)
[16:04:33.464]                             }
[16:04:33.464]                             else {
[16:04:33.464]                               msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:04:33.464]                                 info, version)
[16:04:33.464]                             }
[16:04:33.464]                             base::stop(msg)
[16:04:33.464]                           }
[16:04:33.464]                         })
[16:04:33.464]                       }
[16:04:33.464]                       ...future.mc.cores.old <- base::getOption("mc.cores")
[16:04:33.464]                       base::options(mc.cores = 1L)
[16:04:33.464]                     }
[16:04:33.464]                     base::local({
[16:04:33.464]                       for (pkg in "future") {
[16:04:33.464]                         base::loadNamespace(pkg)
[16:04:33.464]                         base::library(pkg, character.only = TRUE)
[16:04:33.464]                       }
[16:04:33.464]                     })
[16:04:33.464]                   }
[16:04:33.464]                   options(future.plan = NULL)
[16:04:33.464]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:04:33.464]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:04:33.464]                 }
[16:04:33.464]                 ...future.workdir <- getwd()
[16:04:33.464]             }
[16:04:33.464]             ...future.oldOptions <- base::as.list(base::.Options)
[16:04:33.464]             ...future.oldEnvVars <- base::Sys.getenv()
[16:04:33.464]         }
[16:04:33.464]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:04:33.464]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:04:33.464]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:04:33.464]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:04:33.464]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:04:33.464]             future.stdout.windows.reencode = NULL, width = 80L)
[16:04:33.464]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:04:33.464]             base::names(...future.oldOptions))
[16:04:33.464]     }
[16:04:33.464]     if (FALSE) {
[16:04:33.464]     }
[16:04:33.464]     else {
[16:04:33.464]         if (TRUE) {
[16:04:33.464]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:04:33.464]                 open = "w")
[16:04:33.464]         }
[16:04:33.464]         else {
[16:04:33.464]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:04:33.464]                 windows = "NUL", "/dev/null"), open = "w")
[16:04:33.464]         }
[16:04:33.464]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:04:33.464]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:04:33.464]             base::sink(type = "output", split = FALSE)
[16:04:33.464]             base::close(...future.stdout)
[16:04:33.464]         }, add = TRUE)
[16:04:33.464]     }
[16:04:33.464]     ...future.frame <- base::sys.nframe()
[16:04:33.464]     ...future.conditions <- base::list()
[16:04:33.464]     ...future.rng <- base::globalenv()$.Random.seed
[16:04:33.464]     if (FALSE) {
[16:04:33.464]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:04:33.464]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:04:33.464]     }
[16:04:33.464]     ...future.result <- base::tryCatch({
[16:04:33.464]         base::withCallingHandlers({
[16:04:33.464]             ...future.value <- base::withVisible(base::local({
[16:04:33.464]                 ...future.makeSendCondition <- base::local({
[16:04:33.464]                   sendCondition <- NULL
[16:04:33.464]                   function(frame = 1L) {
[16:04:33.464]                     if (is.function(sendCondition)) 
[16:04:33.464]                       return(sendCondition)
[16:04:33.464]                     ns <- getNamespace("parallel")
[16:04:33.464]                     if (exists("sendData", mode = "function", 
[16:04:33.464]                       envir = ns)) {
[16:04:33.464]                       parallel_sendData <- get("sendData", mode = "function", 
[16:04:33.464]                         envir = ns)
[16:04:33.464]                       envir <- sys.frame(frame)
[16:04:33.464]                       master <- NULL
[16:04:33.464]                       while (!identical(envir, .GlobalEnv) && 
[16:04:33.464]                         !identical(envir, emptyenv())) {
[16:04:33.464]                         if (exists("master", mode = "list", envir = envir, 
[16:04:33.464]                           inherits = FALSE)) {
[16:04:33.464]                           master <- get("master", mode = "list", 
[16:04:33.464]                             envir = envir, inherits = FALSE)
[16:04:33.464]                           if (inherits(master, c("SOCKnode", 
[16:04:33.464]                             "SOCK0node"))) {
[16:04:33.464]                             sendCondition <<- function(cond) {
[16:04:33.464]                               data <- list(type = "VALUE", value = cond, 
[16:04:33.464]                                 success = TRUE)
[16:04:33.464]                               parallel_sendData(master, data)
[16:04:33.464]                             }
[16:04:33.464]                             return(sendCondition)
[16:04:33.464]                           }
[16:04:33.464]                         }
[16:04:33.464]                         frame <- frame + 1L
[16:04:33.464]                         envir <- sys.frame(frame)
[16:04:33.464]                       }
[16:04:33.464]                     }
[16:04:33.464]                     sendCondition <<- function(cond) NULL
[16:04:33.464]                   }
[16:04:33.464]                 })
[16:04:33.464]                 withCallingHandlers({
[16:04:33.464]                   {
[16:04:33.464]                     b <- 1
[16:04:33.464]                     c %<-% 2
[16:04:33.464]                     d <- 3
[16:04:33.464]                     4 %->% e
[16:04:33.464]                     b + c + d + e
[16:04:33.464]                   }
[16:04:33.464]                 }, immediateCondition = function(cond) {
[16:04:33.464]                   sendCondition <- ...future.makeSendCondition()
[16:04:33.464]                   sendCondition(cond)
[16:04:33.464]                   muffleCondition <- function (cond, pattern = "^muffle") 
[16:04:33.464]                   {
[16:04:33.464]                     inherits <- base::inherits
[16:04:33.464]                     invokeRestart <- base::invokeRestart
[16:04:33.464]                     is.null <- base::is.null
[16:04:33.464]                     muffled <- FALSE
[16:04:33.464]                     if (inherits(cond, "message")) {
[16:04:33.464]                       muffled <- grepl(pattern, "muffleMessage")
[16:04:33.464]                       if (muffled) 
[16:04:33.464]                         invokeRestart("muffleMessage")
[16:04:33.464]                     }
[16:04:33.464]                     else if (inherits(cond, "warning")) {
[16:04:33.464]                       muffled <- grepl(pattern, "muffleWarning")
[16:04:33.464]                       if (muffled) 
[16:04:33.464]                         invokeRestart("muffleWarning")
[16:04:33.464]                     }
[16:04:33.464]                     else if (inherits(cond, "condition")) {
[16:04:33.464]                       if (!is.null(pattern)) {
[16:04:33.464]                         computeRestarts <- base::computeRestarts
[16:04:33.464]                         grepl <- base::grepl
[16:04:33.464]                         restarts <- computeRestarts(cond)
[16:04:33.464]                         for (restart in restarts) {
[16:04:33.464]                           name <- restart$name
[16:04:33.464]                           if (is.null(name)) 
[16:04:33.464]                             next
[16:04:33.464]                           if (!grepl(pattern, name)) 
[16:04:33.464]                             next
[16:04:33.464]                           invokeRestart(restart)
[16:04:33.464]                           muffled <- TRUE
[16:04:33.464]                           break
[16:04:33.464]                         }
[16:04:33.464]                       }
[16:04:33.464]                     }
[16:04:33.464]                     invisible(muffled)
[16:04:33.464]                   }
[16:04:33.464]                   muffleCondition(cond)
[16:04:33.464]                 })
[16:04:33.464]             }))
[16:04:33.464]             future::FutureResult(value = ...future.value$value, 
[16:04:33.464]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:04:33.464]                   ...future.rng), globalenv = if (FALSE) 
[16:04:33.464]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:04:33.464]                     ...future.globalenv.names))
[16:04:33.464]                 else NULL, started = ...future.startTime, version = "1.8")
[16:04:33.464]         }, condition = base::local({
[16:04:33.464]             c <- base::c
[16:04:33.464]             inherits <- base::inherits
[16:04:33.464]             invokeRestart <- base::invokeRestart
[16:04:33.464]             length <- base::length
[16:04:33.464]             list <- base::list
[16:04:33.464]             seq.int <- base::seq.int
[16:04:33.464]             signalCondition <- base::signalCondition
[16:04:33.464]             sys.calls <- base::sys.calls
[16:04:33.464]             `[[` <- base::`[[`
[16:04:33.464]             `+` <- base::`+`
[16:04:33.464]             `<<-` <- base::`<<-`
[16:04:33.464]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:04:33.464]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:04:33.464]                   3L)]
[16:04:33.464]             }
[16:04:33.464]             function(cond) {
[16:04:33.464]                 is_error <- inherits(cond, "error")
[16:04:33.464]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:04:33.464]                   NULL)
[16:04:33.464]                 if (is_error) {
[16:04:33.464]                   sessionInformation <- function() {
[16:04:33.464]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:04:33.464]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:04:33.464]                       search = base::search(), system = base::Sys.info())
[16:04:33.464]                   }
[16:04:33.464]                   ...future.conditions[[length(...future.conditions) + 
[16:04:33.464]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:04:33.464]                     cond$call), session = sessionInformation(), 
[16:04:33.464]                     timestamp = base::Sys.time(), signaled = 0L)
[16:04:33.464]                   signalCondition(cond)
[16:04:33.464]                 }
[16:04:33.464]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:04:33.464]                 "immediateCondition"))) {
[16:04:33.464]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:04:33.464]                   ...future.conditions[[length(...future.conditions) + 
[16:04:33.464]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:04:33.464]                   if (TRUE && !signal) {
[16:04:33.464]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:04:33.464]                     {
[16:04:33.464]                       inherits <- base::inherits
[16:04:33.464]                       invokeRestart <- base::invokeRestart
[16:04:33.464]                       is.null <- base::is.null
[16:04:33.464]                       muffled <- FALSE
[16:04:33.464]                       if (inherits(cond, "message")) {
[16:04:33.464]                         muffled <- grepl(pattern, "muffleMessage")
[16:04:33.464]                         if (muffled) 
[16:04:33.464]                           invokeRestart("muffleMessage")
[16:04:33.464]                       }
[16:04:33.464]                       else if (inherits(cond, "warning")) {
[16:04:33.464]                         muffled <- grepl(pattern, "muffleWarning")
[16:04:33.464]                         if (muffled) 
[16:04:33.464]                           invokeRestart("muffleWarning")
[16:04:33.464]                       }
[16:04:33.464]                       else if (inherits(cond, "condition")) {
[16:04:33.464]                         if (!is.null(pattern)) {
[16:04:33.464]                           computeRestarts <- base::computeRestarts
[16:04:33.464]                           grepl <- base::grepl
[16:04:33.464]                           restarts <- computeRestarts(cond)
[16:04:33.464]                           for (restart in restarts) {
[16:04:33.464]                             name <- restart$name
[16:04:33.464]                             if (is.null(name)) 
[16:04:33.464]                               next
[16:04:33.464]                             if (!grepl(pattern, name)) 
[16:04:33.464]                               next
[16:04:33.464]                             invokeRestart(restart)
[16:04:33.464]                             muffled <- TRUE
[16:04:33.464]                             break
[16:04:33.464]                           }
[16:04:33.464]                         }
[16:04:33.464]                       }
[16:04:33.464]                       invisible(muffled)
[16:04:33.464]                     }
[16:04:33.464]                     muffleCondition(cond, pattern = "^muffle")
[16:04:33.464]                   }
[16:04:33.464]                 }
[16:04:33.464]                 else {
[16:04:33.464]                   if (TRUE) {
[16:04:33.464]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:04:33.464]                     {
[16:04:33.464]                       inherits <- base::inherits
[16:04:33.464]                       invokeRestart <- base::invokeRestart
[16:04:33.464]                       is.null <- base::is.null
[16:04:33.464]                       muffled <- FALSE
[16:04:33.464]                       if (inherits(cond, "message")) {
[16:04:33.464]                         muffled <- grepl(pattern, "muffleMessage")
[16:04:33.464]                         if (muffled) 
[16:04:33.464]                           invokeRestart("muffleMessage")
[16:04:33.464]                       }
[16:04:33.464]                       else if (inherits(cond, "warning")) {
[16:04:33.464]                         muffled <- grepl(pattern, "muffleWarning")
[16:04:33.464]                         if (muffled) 
[16:04:33.464]                           invokeRestart("muffleWarning")
[16:04:33.464]                       }
[16:04:33.464]                       else if (inherits(cond, "condition")) {
[16:04:33.464]                         if (!is.null(pattern)) {
[16:04:33.464]                           computeRestarts <- base::computeRestarts
[16:04:33.464]                           grepl <- base::grepl
[16:04:33.464]                           restarts <- computeRestarts(cond)
[16:04:33.464]                           for (restart in restarts) {
[16:04:33.464]                             name <- restart$name
[16:04:33.464]                             if (is.null(name)) 
[16:04:33.464]                               next
[16:04:33.464]                             if (!grepl(pattern, name)) 
[16:04:33.464]                               next
[16:04:33.464]                             invokeRestart(restart)
[16:04:33.464]                             muffled <- TRUE
[16:04:33.464]                             break
[16:04:33.464]                           }
[16:04:33.464]                         }
[16:04:33.464]                       }
[16:04:33.464]                       invisible(muffled)
[16:04:33.464]                     }
[16:04:33.464]                     muffleCondition(cond, pattern = "^muffle")
[16:04:33.464]                   }
[16:04:33.464]                 }
[16:04:33.464]             }
[16:04:33.464]         }))
[16:04:33.464]     }, error = function(ex) {
[16:04:33.464]         base::structure(base::list(value = NULL, visible = NULL, 
[16:04:33.464]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:04:33.464]                 ...future.rng), started = ...future.startTime, 
[16:04:33.464]             finished = Sys.time(), session_uuid = NA_character_, 
[16:04:33.464]             version = "1.8"), class = "FutureResult")
[16:04:33.464]     }, finally = {
[16:04:33.464]         if (!identical(...future.workdir, getwd())) 
[16:04:33.464]             setwd(...future.workdir)
[16:04:33.464]         {
[16:04:33.464]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:04:33.464]                 ...future.oldOptions$nwarnings <- NULL
[16:04:33.464]             }
[16:04:33.464]             base::options(...future.oldOptions)
[16:04:33.464]             if (.Platform$OS.type == "windows") {
[16:04:33.464]                 old_names <- names(...future.oldEnvVars)
[16:04:33.464]                 envs <- base::Sys.getenv()
[16:04:33.464]                 names <- names(envs)
[16:04:33.464]                 common <- intersect(names, old_names)
[16:04:33.464]                 added <- setdiff(names, old_names)
[16:04:33.464]                 removed <- setdiff(old_names, names)
[16:04:33.464]                 changed <- common[...future.oldEnvVars[common] != 
[16:04:33.464]                   envs[common]]
[16:04:33.464]                 NAMES <- toupper(changed)
[16:04:33.464]                 args <- list()
[16:04:33.464]                 for (kk in seq_along(NAMES)) {
[16:04:33.464]                   name <- changed[[kk]]
[16:04:33.464]                   NAME <- NAMES[[kk]]
[16:04:33.464]                   if (name != NAME && is.element(NAME, old_names)) 
[16:04:33.464]                     next
[16:04:33.464]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:04:33.464]                 }
[16:04:33.464]                 NAMES <- toupper(added)
[16:04:33.464]                 for (kk in seq_along(NAMES)) {
[16:04:33.464]                   name <- added[[kk]]
[16:04:33.464]                   NAME <- NAMES[[kk]]
[16:04:33.464]                   if (name != NAME && is.element(NAME, old_names)) 
[16:04:33.464]                     next
[16:04:33.464]                   args[[name]] <- ""
[16:04:33.464]                 }
[16:04:33.464]                 NAMES <- toupper(removed)
[16:04:33.464]                 for (kk in seq_along(NAMES)) {
[16:04:33.464]                   name <- removed[[kk]]
[16:04:33.464]                   NAME <- NAMES[[kk]]
[16:04:33.464]                   if (name != NAME && is.element(NAME, old_names)) 
[16:04:33.464]                     next
[16:04:33.464]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:04:33.464]                 }
[16:04:33.464]                 if (length(args) > 0) 
[16:04:33.464]                   base::do.call(base::Sys.setenv, args = args)
[16:04:33.464]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:04:33.464]             }
[16:04:33.464]             else {
[16:04:33.464]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:04:33.464]             }
[16:04:33.464]             {
[16:04:33.464]                 if (base::length(...future.futureOptionsAdded) > 
[16:04:33.464]                   0L) {
[16:04:33.464]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:04:33.464]                   base::names(opts) <- ...future.futureOptionsAdded
[16:04:33.464]                   base::options(opts)
[16:04:33.464]                 }
[16:04:33.464]                 {
[16:04:33.464]                   {
[16:04:33.464]                     base::options(mc.cores = ...future.mc.cores.old)
[16:04:33.464]                     NULL
[16:04:33.464]                   }
[16:04:33.464]                   options(future.plan = NULL)
[16:04:33.464]                   if (is.na(NA_character_)) 
[16:04:33.464]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:04:33.464]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:04:33.464]                   future::plan(list(function (..., workers = availableCores(), 
[16:04:33.464]                     lazy = FALSE, rscript_libs = .libPaths(), 
[16:04:33.464]                     envir = parent.frame()) 
[16:04:33.464]                   {
[16:04:33.464]                     if (is.function(workers)) 
[16:04:33.464]                       workers <- workers()
[16:04:33.464]                     workers <- structure(as.integer(workers), 
[16:04:33.464]                       class = class(workers))
[16:04:33.464]                     stop_if_not(length(workers) == 1, is.finite(workers), 
[16:04:33.464]                       workers >= 1)
[16:04:33.464]                     if (workers == 1L && !inherits(workers, "AsIs")) {
[16:04:33.464]                       return(sequential(..., lazy = TRUE, envir = envir))
[16:04:33.464]                     }
[16:04:33.464]                     future <- MultisessionFuture(..., workers = workers, 
[16:04:33.464]                       lazy = lazy, rscript_libs = rscript_libs, 
[16:04:33.464]                       envir = envir)
[16:04:33.464]                     if (!future$lazy) 
[16:04:33.464]                       future <- run(future)
[16:04:33.464]                     invisible(future)
[16:04:33.464]                   }), .cleanup = FALSE, .init = FALSE)
[16:04:33.464]                 }
[16:04:33.464]             }
[16:04:33.464]         }
[16:04:33.464]     })
[16:04:33.464]     if (TRUE) {
[16:04:33.464]         base::sink(type = "output", split = FALSE)
[16:04:33.464]         if (TRUE) {
[16:04:33.464]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:04:33.464]         }
[16:04:33.464]         else {
[16:04:33.464]             ...future.result["stdout"] <- base::list(NULL)
[16:04:33.464]         }
[16:04:33.464]         base::close(...future.stdout)
[16:04:33.464]         ...future.stdout <- NULL
[16:04:33.464]     }
[16:04:33.464]     ...future.result$conditions <- ...future.conditions
[16:04:33.464]     ...future.result$finished <- base::Sys.time()
[16:04:33.464]     ...future.result
[16:04:33.464] }
[16:04:33.467] MultisessionFuture started
[16:04:33.467] - Launch lazy future ... done
[16:04:33.467] run() for ‘MultisessionFuture’ ... done
[16:04:33.467] result() for ClusterFuture ...
[16:04:33.467] receiveMessageFromWorker() for ClusterFuture ...
[16:04:33.468] - Validating connection of MultisessionFuture
[16:04:33.528] - received message: FutureResult
[16:04:33.528] - Received FutureResult
[16:04:33.529] - Erased future from FutureRegistry
[16:04:33.529] result() for ClusterFuture ...
[16:04:33.529] - result already collected: FutureResult
[16:04:33.529] result() for ClusterFuture ... done
[16:04:33.529] receiveMessageFromWorker() for ClusterFuture ... done
[16:04:33.529] result() for ClusterFuture ... done
[16:04:33.529] result() for ClusterFuture ...
[16:04:33.529] - result already collected: FutureResult
[16:04:33.529] result() for ClusterFuture ... done
a = 10
[16:04:33.530] getGlobalsAndPackages() ...
[16:04:33.530] Searching for globals...
[16:04:33.530] - globals found: [3] ‘{’, ‘+’, ‘a’
[16:04:33.531] Searching for globals ... DONE
[16:04:33.531] Resolving globals: FALSE
[16:04:33.531] The total size of the 1 globals is 56 bytes (56 bytes)
[16:04:33.531] The total size of the 1 globals exported for future expression (‘{; a + 1; }’) is 56 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘a’ (56 bytes of class ‘numeric’)
[16:04:33.532] - globals: [1] ‘a’
[16:04:33.532] 
[16:04:33.532] getGlobalsAndPackages() ... DONE
[16:04:33.532] run() for ‘Future’ ...
[16:04:33.532] - state: ‘created’
[16:04:33.532] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[16:04:33.546] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[16:04:33.546] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[16:04:33.546]   - Field: ‘node’
[16:04:33.547]   - Field: ‘label’
[16:04:33.547]   - Field: ‘local’
[16:04:33.547]   - Field: ‘owner’
[16:04:33.547]   - Field: ‘envir’
[16:04:33.547]   - Field: ‘workers’
[16:04:33.547]   - Field: ‘packages’
[16:04:33.547]   - Field: ‘gc’
[16:04:33.547]   - Field: ‘conditions’
[16:04:33.547]   - Field: ‘persistent’
[16:04:33.547]   - Field: ‘expr’
[16:04:33.548]   - Field: ‘uuid’
[16:04:33.548]   - Field: ‘seed’
[16:04:33.548]   - Field: ‘version’
[16:04:33.548]   - Field: ‘result’
[16:04:33.548]   - Field: ‘asynchronous’
[16:04:33.548]   - Field: ‘calls’
[16:04:33.548]   - Field: ‘globals’
[16:04:33.548]   - Field: ‘stdout’
[16:04:33.548]   - Field: ‘earlySignal’
[16:04:33.548]   - Field: ‘lazy’
[16:04:33.548]   - Field: ‘state’
[16:04:33.549] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[16:04:33.549] - Launch lazy future ...
[16:04:33.549] Packages needed by the future expression (n = 0): <none>
[16:04:33.549] Packages needed by future strategies (n = 0): <none>
[16:04:33.549] {
[16:04:33.549]     {
[16:04:33.549]         {
[16:04:33.549]             ...future.startTime <- base::Sys.time()
[16:04:33.549]             {
[16:04:33.549]                 {
[16:04:33.549]                   {
[16:04:33.549]                     {
[16:04:33.549]                       base::local({
[16:04:33.549]                         has_future <- base::requireNamespace("future", 
[16:04:33.549]                           quietly = TRUE)
[16:04:33.549]                         if (has_future) {
[16:04:33.549]                           ns <- base::getNamespace("future")
[16:04:33.549]                           version <- ns[[".package"]][["version"]]
[16:04:33.549]                           if (is.null(version)) 
[16:04:33.549]                             version <- utils::packageVersion("future")
[16:04:33.549]                         }
[16:04:33.549]                         else {
[16:04:33.549]                           version <- NULL
[16:04:33.549]                         }
[16:04:33.549]                         if (!has_future || version < "1.8.0") {
[16:04:33.549]                           info <- base::c(r_version = base::gsub("R version ", 
[16:04:33.549]                             "", base::R.version$version.string), 
[16:04:33.549]                             platform = base::sprintf("%s (%s-bit)", 
[16:04:33.549]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:04:33.549]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[16:04:33.549]                               "release", "version")], collapse = " "), 
[16:04:33.549]                             hostname = base::Sys.info()[["nodename"]])
[16:04:33.549]                           info <- base::sprintf("%s: %s", base::names(info), 
[16:04:33.549]                             info)
[16:04:33.549]                           info <- base::paste(info, collapse = "; ")
[16:04:33.549]                           if (!has_future) {
[16:04:33.549]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:04:33.549]                               info)
[16:04:33.549]                           }
[16:04:33.549]                           else {
[16:04:33.549]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:04:33.549]                               info, version)
[16:04:33.549]                           }
[16:04:33.549]                           base::stop(msg)
[16:04:33.549]                         }
[16:04:33.549]                       })
[16:04:33.549]                     }
[16:04:33.549]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[16:04:33.549]                     base::options(mc.cores = 1L)
[16:04:33.549]                   }
[16:04:33.549]                   options(future.plan = NULL)
[16:04:33.549]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:04:33.549]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:04:33.549]                 }
[16:04:33.549]                 ...future.workdir <- getwd()
[16:04:33.549]             }
[16:04:33.549]             ...future.oldOptions <- base::as.list(base::.Options)
[16:04:33.549]             ...future.oldEnvVars <- base::Sys.getenv()
[16:04:33.549]         }
[16:04:33.549]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:04:33.549]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:04:33.549]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:04:33.549]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:04:33.549]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:04:33.549]             future.stdout.windows.reencode = NULL, width = 80L)
[16:04:33.549]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:04:33.549]             base::names(...future.oldOptions))
[16:04:33.549]     }
[16:04:33.549]     if (FALSE) {
[16:04:33.549]     }
[16:04:33.549]     else {
[16:04:33.549]         if (TRUE) {
[16:04:33.549]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:04:33.549]                 open = "w")
[16:04:33.549]         }
[16:04:33.549]         else {
[16:04:33.549]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:04:33.549]                 windows = "NUL", "/dev/null"), open = "w")
[16:04:33.549]         }
[16:04:33.549]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:04:33.549]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:04:33.549]             base::sink(type = "output", split = FALSE)
[16:04:33.549]             base::close(...future.stdout)
[16:04:33.549]         }, add = TRUE)
[16:04:33.549]     }
[16:04:33.549]     ...future.frame <- base::sys.nframe()
[16:04:33.549]     ...future.conditions <- base::list()
[16:04:33.549]     ...future.rng <- base::globalenv()$.Random.seed
[16:04:33.549]     if (FALSE) {
[16:04:33.549]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:04:33.549]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:04:33.549]     }
[16:04:33.549]     ...future.result <- base::tryCatch({
[16:04:33.549]         base::withCallingHandlers({
[16:04:33.549]             ...future.value <- base::withVisible(base::local({
[16:04:33.549]                 ...future.makeSendCondition <- base::local({
[16:04:33.549]                   sendCondition <- NULL
[16:04:33.549]                   function(frame = 1L) {
[16:04:33.549]                     if (is.function(sendCondition)) 
[16:04:33.549]                       return(sendCondition)
[16:04:33.549]                     ns <- getNamespace("parallel")
[16:04:33.549]                     if (exists("sendData", mode = "function", 
[16:04:33.549]                       envir = ns)) {
[16:04:33.549]                       parallel_sendData <- get("sendData", mode = "function", 
[16:04:33.549]                         envir = ns)
[16:04:33.549]                       envir <- sys.frame(frame)
[16:04:33.549]                       master <- NULL
[16:04:33.549]                       while (!identical(envir, .GlobalEnv) && 
[16:04:33.549]                         !identical(envir, emptyenv())) {
[16:04:33.549]                         if (exists("master", mode = "list", envir = envir, 
[16:04:33.549]                           inherits = FALSE)) {
[16:04:33.549]                           master <- get("master", mode = "list", 
[16:04:33.549]                             envir = envir, inherits = FALSE)
[16:04:33.549]                           if (inherits(master, c("SOCKnode", 
[16:04:33.549]                             "SOCK0node"))) {
[16:04:33.549]                             sendCondition <<- function(cond) {
[16:04:33.549]                               data <- list(type = "VALUE", value = cond, 
[16:04:33.549]                                 success = TRUE)
[16:04:33.549]                               parallel_sendData(master, data)
[16:04:33.549]                             }
[16:04:33.549]                             return(sendCondition)
[16:04:33.549]                           }
[16:04:33.549]                         }
[16:04:33.549]                         frame <- frame + 1L
[16:04:33.549]                         envir <- sys.frame(frame)
[16:04:33.549]                       }
[16:04:33.549]                     }
[16:04:33.549]                     sendCondition <<- function(cond) NULL
[16:04:33.549]                   }
[16:04:33.549]                 })
[16:04:33.549]                 withCallingHandlers({
[16:04:33.549]                   {
[16:04:33.549]                     a + 1
[16:04:33.549]                   }
[16:04:33.549]                 }, immediateCondition = function(cond) {
[16:04:33.549]                   sendCondition <- ...future.makeSendCondition()
[16:04:33.549]                   sendCondition(cond)
[16:04:33.549]                   muffleCondition <- function (cond, pattern = "^muffle") 
[16:04:33.549]                   {
[16:04:33.549]                     inherits <- base::inherits
[16:04:33.549]                     invokeRestart <- base::invokeRestart
[16:04:33.549]                     is.null <- base::is.null
[16:04:33.549]                     muffled <- FALSE
[16:04:33.549]                     if (inherits(cond, "message")) {
[16:04:33.549]                       muffled <- grepl(pattern, "muffleMessage")
[16:04:33.549]                       if (muffled) 
[16:04:33.549]                         invokeRestart("muffleMessage")
[16:04:33.549]                     }
[16:04:33.549]                     else if (inherits(cond, "warning")) {
[16:04:33.549]                       muffled <- grepl(pattern, "muffleWarning")
[16:04:33.549]                       if (muffled) 
[16:04:33.549]                         invokeRestart("muffleWarning")
[16:04:33.549]                     }
[16:04:33.549]                     else if (inherits(cond, "condition")) {
[16:04:33.549]                       if (!is.null(pattern)) {
[16:04:33.549]                         computeRestarts <- base::computeRestarts
[16:04:33.549]                         grepl <- base::grepl
[16:04:33.549]                         restarts <- computeRestarts(cond)
[16:04:33.549]                         for (restart in restarts) {
[16:04:33.549]                           name <- restart$name
[16:04:33.549]                           if (is.null(name)) 
[16:04:33.549]                             next
[16:04:33.549]                           if (!grepl(pattern, name)) 
[16:04:33.549]                             next
[16:04:33.549]                           invokeRestart(restart)
[16:04:33.549]                           muffled <- TRUE
[16:04:33.549]                           break
[16:04:33.549]                         }
[16:04:33.549]                       }
[16:04:33.549]                     }
[16:04:33.549]                     invisible(muffled)
[16:04:33.549]                   }
[16:04:33.549]                   muffleCondition(cond)
[16:04:33.549]                 })
[16:04:33.549]             }))
[16:04:33.549]             future::FutureResult(value = ...future.value$value, 
[16:04:33.549]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:04:33.549]                   ...future.rng), globalenv = if (FALSE) 
[16:04:33.549]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:04:33.549]                     ...future.globalenv.names))
[16:04:33.549]                 else NULL, started = ...future.startTime, version = "1.8")
[16:04:33.549]         }, condition = base::local({
[16:04:33.549]             c <- base::c
[16:04:33.549]             inherits <- base::inherits
[16:04:33.549]             invokeRestart <- base::invokeRestart
[16:04:33.549]             length <- base::length
[16:04:33.549]             list <- base::list
[16:04:33.549]             seq.int <- base::seq.int
[16:04:33.549]             signalCondition <- base::signalCondition
[16:04:33.549]             sys.calls <- base::sys.calls
[16:04:33.549]             `[[` <- base::`[[`
[16:04:33.549]             `+` <- base::`+`
[16:04:33.549]             `<<-` <- base::`<<-`
[16:04:33.549]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:04:33.549]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:04:33.549]                   3L)]
[16:04:33.549]             }
[16:04:33.549]             function(cond) {
[16:04:33.549]                 is_error <- inherits(cond, "error")
[16:04:33.549]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:04:33.549]                   NULL)
[16:04:33.549]                 if (is_error) {
[16:04:33.549]                   sessionInformation <- function() {
[16:04:33.549]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:04:33.549]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:04:33.549]                       search = base::search(), system = base::Sys.info())
[16:04:33.549]                   }
[16:04:33.549]                   ...future.conditions[[length(...future.conditions) + 
[16:04:33.549]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:04:33.549]                     cond$call), session = sessionInformation(), 
[16:04:33.549]                     timestamp = base::Sys.time(), signaled = 0L)
[16:04:33.549]                   signalCondition(cond)
[16:04:33.549]                 }
[16:04:33.549]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:04:33.549]                 "immediateCondition"))) {
[16:04:33.549]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:04:33.549]                   ...future.conditions[[length(...future.conditions) + 
[16:04:33.549]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:04:33.549]                   if (TRUE && !signal) {
[16:04:33.549]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:04:33.549]                     {
[16:04:33.549]                       inherits <- base::inherits
[16:04:33.549]                       invokeRestart <- base::invokeRestart
[16:04:33.549]                       is.null <- base::is.null
[16:04:33.549]                       muffled <- FALSE
[16:04:33.549]                       if (inherits(cond, "message")) {
[16:04:33.549]                         muffled <- grepl(pattern, "muffleMessage")
[16:04:33.549]                         if (muffled) 
[16:04:33.549]                           invokeRestart("muffleMessage")
[16:04:33.549]                       }
[16:04:33.549]                       else if (inherits(cond, "warning")) {
[16:04:33.549]                         muffled <- grepl(pattern, "muffleWarning")
[16:04:33.549]                         if (muffled) 
[16:04:33.549]                           invokeRestart("muffleWarning")
[16:04:33.549]                       }
[16:04:33.549]                       else if (inherits(cond, "condition")) {
[16:04:33.549]                         if (!is.null(pattern)) {
[16:04:33.549]                           computeRestarts <- base::computeRestarts
[16:04:33.549]                           grepl <- base::grepl
[16:04:33.549]                           restarts <- computeRestarts(cond)
[16:04:33.549]                           for (restart in restarts) {
[16:04:33.549]                             name <- restart$name
[16:04:33.549]                             if (is.null(name)) 
[16:04:33.549]                               next
[16:04:33.549]                             if (!grepl(pattern, name)) 
[16:04:33.549]                               next
[16:04:33.549]                             invokeRestart(restart)
[16:04:33.549]                             muffled <- TRUE
[16:04:33.549]                             break
[16:04:33.549]                           }
[16:04:33.549]                         }
[16:04:33.549]                       }
[16:04:33.549]                       invisible(muffled)
[16:04:33.549]                     }
[16:04:33.549]                     muffleCondition(cond, pattern = "^muffle")
[16:04:33.549]                   }
[16:04:33.549]                 }
[16:04:33.549]                 else {
[16:04:33.549]                   if (TRUE) {
[16:04:33.549]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:04:33.549]                     {
[16:04:33.549]                       inherits <- base::inherits
[16:04:33.549]                       invokeRestart <- base::invokeRestart
[16:04:33.549]                       is.null <- base::is.null
[16:04:33.549]                       muffled <- FALSE
[16:04:33.549]                       if (inherits(cond, "message")) {
[16:04:33.549]                         muffled <- grepl(pattern, "muffleMessage")
[16:04:33.549]                         if (muffled) 
[16:04:33.549]                           invokeRestart("muffleMessage")
[16:04:33.549]                       }
[16:04:33.549]                       else if (inherits(cond, "warning")) {
[16:04:33.549]                         muffled <- grepl(pattern, "muffleWarning")
[16:04:33.549]                         if (muffled) 
[16:04:33.549]                           invokeRestart("muffleWarning")
[16:04:33.549]                       }
[16:04:33.549]                       else if (inherits(cond, "condition")) {
[16:04:33.549]                         if (!is.null(pattern)) {
[16:04:33.549]                           computeRestarts <- base::computeRestarts
[16:04:33.549]                           grepl <- base::grepl
[16:04:33.549]                           restarts <- computeRestarts(cond)
[16:04:33.549]                           for (restart in restarts) {
[16:04:33.549]                             name <- restart$name
[16:04:33.549]                             if (is.null(name)) 
[16:04:33.549]                               next
[16:04:33.549]                             if (!grepl(pattern, name)) 
[16:04:33.549]                               next
[16:04:33.549]                             invokeRestart(restart)
[16:04:33.549]                             muffled <- TRUE
[16:04:33.549]                             break
[16:04:33.549]                           }
[16:04:33.549]                         }
[16:04:33.549]                       }
[16:04:33.549]                       invisible(muffled)
[16:04:33.549]                     }
[16:04:33.549]                     muffleCondition(cond, pattern = "^muffle")
[16:04:33.549]                   }
[16:04:33.549]                 }
[16:04:33.549]             }
[16:04:33.549]         }))
[16:04:33.549]     }, error = function(ex) {
[16:04:33.549]         base::structure(base::list(value = NULL, visible = NULL, 
[16:04:33.549]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:04:33.549]                 ...future.rng), started = ...future.startTime, 
[16:04:33.549]             finished = Sys.time(), session_uuid = NA_character_, 
[16:04:33.549]             version = "1.8"), class = "FutureResult")
[16:04:33.549]     }, finally = {
[16:04:33.549]         if (!identical(...future.workdir, getwd())) 
[16:04:33.549]             setwd(...future.workdir)
[16:04:33.549]         {
[16:04:33.549]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:04:33.549]                 ...future.oldOptions$nwarnings <- NULL
[16:04:33.549]             }
[16:04:33.549]             base::options(...future.oldOptions)
[16:04:33.549]             if (.Platform$OS.type == "windows") {
[16:04:33.549]                 old_names <- names(...future.oldEnvVars)
[16:04:33.549]                 envs <- base::Sys.getenv()
[16:04:33.549]                 names <- names(envs)
[16:04:33.549]                 common <- intersect(names, old_names)
[16:04:33.549]                 added <- setdiff(names, old_names)
[16:04:33.549]                 removed <- setdiff(old_names, names)
[16:04:33.549]                 changed <- common[...future.oldEnvVars[common] != 
[16:04:33.549]                   envs[common]]
[16:04:33.549]                 NAMES <- toupper(changed)
[16:04:33.549]                 args <- list()
[16:04:33.549]                 for (kk in seq_along(NAMES)) {
[16:04:33.549]                   name <- changed[[kk]]
[16:04:33.549]                   NAME <- NAMES[[kk]]
[16:04:33.549]                   if (name != NAME && is.element(NAME, old_names)) 
[16:04:33.549]                     next
[16:04:33.549]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:04:33.549]                 }
[16:04:33.549]                 NAMES <- toupper(added)
[16:04:33.549]                 for (kk in seq_along(NAMES)) {
[16:04:33.549]                   name <- added[[kk]]
[16:04:33.549]                   NAME <- NAMES[[kk]]
[16:04:33.549]                   if (name != NAME && is.element(NAME, old_names)) 
[16:04:33.549]                     next
[16:04:33.549]                   args[[name]] <- ""
[16:04:33.549]                 }
[16:04:33.549]                 NAMES <- toupper(removed)
[16:04:33.549]                 for (kk in seq_along(NAMES)) {
[16:04:33.549]                   name <- removed[[kk]]
[16:04:33.549]                   NAME <- NAMES[[kk]]
[16:04:33.549]                   if (name != NAME && is.element(NAME, old_names)) 
[16:04:33.549]                     next
[16:04:33.549]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:04:33.549]                 }
[16:04:33.549]                 if (length(args) > 0) 
[16:04:33.549]                   base::do.call(base::Sys.setenv, args = args)
[16:04:33.549]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:04:33.549]             }
[16:04:33.549]             else {
[16:04:33.549]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:04:33.549]             }
[16:04:33.549]             {
[16:04:33.549]                 if (base::length(...future.futureOptionsAdded) > 
[16:04:33.549]                   0L) {
[16:04:33.549]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:04:33.549]                   base::names(opts) <- ...future.futureOptionsAdded
[16:04:33.549]                   base::options(opts)
[16:04:33.549]                 }
[16:04:33.549]                 {
[16:04:33.549]                   {
[16:04:33.549]                     base::options(mc.cores = ...future.mc.cores.old)
[16:04:33.549]                     NULL
[16:04:33.549]                   }
[16:04:33.549]                   options(future.plan = NULL)
[16:04:33.549]                   if (is.na(NA_character_)) 
[16:04:33.549]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:04:33.549]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:04:33.549]                   future::plan(list(function (..., workers = availableCores(), 
[16:04:33.549]                     lazy = FALSE, rscript_libs = .libPaths(), 
[16:04:33.549]                     envir = parent.frame()) 
[16:04:33.549]                   {
[16:04:33.549]                     if (is.function(workers)) 
[16:04:33.549]                       workers <- workers()
[16:04:33.549]                     workers <- structure(as.integer(workers), 
[16:04:33.549]                       class = class(workers))
[16:04:33.549]                     stop_if_not(length(workers) == 1, is.finite(workers), 
[16:04:33.549]                       workers >= 1)
[16:04:33.549]                     if (workers == 1L && !inherits(workers, "AsIs")) {
[16:04:33.549]                       return(sequential(..., lazy = TRUE, envir = envir))
[16:04:33.549]                     }
[16:04:33.549]                     future <- MultisessionFuture(..., workers = workers, 
[16:04:33.549]                       lazy = lazy, rscript_libs = rscript_libs, 
[16:04:33.549]                       envir = envir)
[16:04:33.549]                     if (!future$lazy) 
[16:04:33.549]                       future <- run(future)
[16:04:33.549]                     invisible(future)
[16:04:33.549]                   }), .cleanup = FALSE, .init = FALSE)
[16:04:33.549]                 }
[16:04:33.549]             }
[16:04:33.549]         }
[16:04:33.549]     })
[16:04:33.549]     if (TRUE) {
[16:04:33.549]         base::sink(type = "output", split = FALSE)
[16:04:33.549]         if (TRUE) {
[16:04:33.549]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:04:33.549]         }
[16:04:33.549]         else {
[16:04:33.549]             ...future.result["stdout"] <- base::list(NULL)
[16:04:33.549]         }
[16:04:33.549]         base::close(...future.stdout)
[16:04:33.549]         ...future.stdout <- NULL
[16:04:33.549]     }
[16:04:33.549]     ...future.result$conditions <- ...future.conditions
[16:04:33.549]     ...future.result$finished <- base::Sys.time()
[16:04:33.549]     ...future.result
[16:04:33.549] }
[16:04:33.552] Exporting 1 global objects (56 bytes) to cluster node #1 ...
[16:04:33.552] Exporting ‘a’ (56 bytes) to cluster node #1 ...
[16:04:33.552] Exporting ‘a’ (56 bytes) to cluster node #1 ... DONE
[16:04:33.553] Exporting 1 global objects (56 bytes) to cluster node #1 ... DONE
[16:04:33.553] MultisessionFuture started
[16:04:33.553] - Launch lazy future ... done
[16:04:33.553] run() for ‘MultisessionFuture’ ... done
[16:04:33.554] result() for ClusterFuture ...
[16:04:33.554] receiveMessageFromWorker() for ClusterFuture ...
[16:04:33.554] - Validating connection of MultisessionFuture
[16:04:33.599] - received message: FutureResult
[16:04:33.599] - Received FutureResult
[16:04:33.599] - Erased future from FutureRegistry
[16:04:33.600] result() for ClusterFuture ...
[16:04:33.600] - result already collected: FutureResult
[16:04:33.600] result() for ClusterFuture ... done
[16:04:33.600] receiveMessageFromWorker() for ClusterFuture ... done
[16:04:33.600] result() for ClusterFuture ... done
[16:04:33.600] result() for ClusterFuture ...
[16:04:33.600] - result already collected: FutureResult
[16:04:33.600] result() for ClusterFuture ... done
b = 11
*** %<-% with ‘multisession’ futures ... DONE
Testing with 2 cores ... DONE
> 
> message("*** %<-% ... DONE")
*** %<-% ... DONE
> 
> source("incl/end.R")
[16:04:33.601] plan(): Setting new future strategy stack:
[16:04:33.601] List of future strategies:
[16:04:33.601] 1. FutureStrategy:
[16:04:33.601]    - args: function (..., envir = parent.frame())
[16:04:33.601]    - tweaked: FALSE
[16:04:33.601]    - call: future::plan(oplan)
[16:04:33.602] plan(): nbrOfWorkers() = 1
> 
