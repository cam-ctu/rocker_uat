
R version 4.3.2 (2023-10-31) -- "Eye Holes"
Copyright (C) 2023 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> source("incl/start.R")
[10:25:36.397] plan(): Setting new future strategy stack:
[10:25:36.398] List of future strategies:
[10:25:36.398] 1. sequential:
[10:25:36.398]    - args: function (..., envir = parent.frame())
[10:25:36.398]    - tweaked: FALSE
[10:25:36.398]    - call: future::plan("sequential")
[10:25:36.411] plan(): nbrOfWorkers() = 1
> 
> message("*** %<-% ...")
*** %<-% ...
> 
> for (cores in 1:availCores) {
+   ## Speed up CRAN checks: Skip on CRAN Windows 32-bit
+   if (!fullTest && isWin32) next
+   
+   message(sprintf("Testing with %d cores ...", cores))
+   options(mc.cores = cores)
+ 
+   for (strategy in supportedStrategies(cores)) {
+     message(sprintf("*** %%<-%% with %s futures ...", sQuote(strategy)))
+     plan(strategy)
+ 
+     rm(list = intersect(c("x", "y"), ls()))
+ 
+     message("** Future evaluation without globals")
+     v1 %<-% { x <- 1 }
+     stopifnot(!exists("x", inherits = FALSE), identical(v1, 1))
+ 
+     message("** Future evaluation with globals")
+     a <- 2
+     v2 %<-% { x <- a }
+     stopifnot(!exists("x", inherits = FALSE), identical(v2, a))
+ 
+     message("** Future evaluation with errors")
+     v3 %<-% {
+       x <- 3
+       stop("Woops!")
+       x
+     }
+     stopifnot(!exists("x", inherits = FALSE))
+     res <- tryCatch(identical(v3, 3), error = identity)
+     stopifnot(inherits(res, "error"))
+ 
+ 
+     y <- listenv::listenv()
+     for (ii in 1:3) {
+       y[[ii]] %<-% {
+         if (ii %% 2 == 0) stop("Woops!")
+         ii
+       }
+     }
+     res <- tryCatch(as.list(y), error = identity)
+     stopifnot(inherits(res, "error"))
+     z <- y[c(1, 3)]
+     z <- unlist(z)
+     stopifnot(all(z == c(1, 3)))
+     res <- tryCatch(y[[2]], error = identity)
+     stopifnot(inherits(res, "error"))
+     res <- tryCatch(y[1:2], error = identity)
+     stopifnot(inherits(res, "error"))
+ 
+ 
+     message("** Future evaluation with a poor-man's \"progress bar\"")
+     v4 %<-% {
+       cat("Processing: ")
+       for (ii in 1:10) { cat(".") }
+       cat(" [100%]\n")
+       4
+     }
+ 
+ 
+     message("** Collecting results")
+     printf("v1 = %s\n", v1)
+     stopifnot(v1 == 1)
+ 
+     printf("v2 = %s\n", v2)
+     stopifnot(v2 == a)
+ 
+     stopifnot(tryCatch({
+       printf("v3 = %s\n", v3)
+     }, error = function(ex) {
+       printf("v3: <%s> (as expect)\n", class(ex)[1])
+       TRUE
+     }))
+ 
+     printf("v4 = %s\n", v4)
+     #stopifnot(v4 == 4)
+ 
+ 
+     message("** Left-to-right and right-to-left future assignments")
+     c %<-% 1
+     printf("c = %s\n", c)
+     1 %->% d
+     printf("d = %s\n", d)
+     stopifnot(d == c)
+ 
+ 
+ 
+     message("** Nested future assignments")
+     a %<-% {
+       b <- 1
+       c %<-% 2
+       3 -> d
+       4 %->% e
+       b + c + d + e
+     }
+     printf("a = %s\n", a)
+     stopifnot(a == 10)
+ 
+     { a + 1 } %->% b
+     printf("b = %s\n", b)
+     stopifnot(b == a + 1)
+ 
+     message(sprintf("*** %%<-%% with %s futures ... DONE", sQuote(strategy)))
+   } # for (strategy in ...)
+ 
+   message(sprintf("Testing with %d cores ... DONE", cores))
+ } ## for (cores ...)
Testing with 1 cores ...
*** %<-% with ‘sequential’ futures ...
[10:25:36.464] plan(): Setting new future strategy stack:
[10:25:36.464] List of future strategies:
[10:25:36.464] 1. sequential:
[10:25:36.464]    - args: function (..., envir = parent.frame())
[10:25:36.464]    - tweaked: FALSE
[10:25:36.464]    - call: plan(strategy)
[10:25:36.475] plan(): nbrOfWorkers() = 1
** Future evaluation without globals
[10:25:36.477] getGlobalsAndPackages() ...
[10:25:36.477] Searching for globals...
[10:25:36.482] - globals found: [2] ‘{’, ‘<-’
[10:25:36.482] Searching for globals ... DONE
[10:25:36.482] Resolving globals: FALSE
[10:25:36.483] 
[10:25:36.483] 
[10:25:36.483] getGlobalsAndPackages() ... DONE
[10:25:36.484] run() for ‘Future’ ...
[10:25:36.484] - state: ‘created’
[10:25:36.484] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:25:36.484] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[10:25:36.484] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[10:25:36.484]   - Field: ‘label’
[10:25:36.485]   - Field: ‘local’
[10:25:36.485]   - Field: ‘owner’
[10:25:36.485]   - Field: ‘envir’
[10:25:36.485]   - Field: ‘packages’
[10:25:36.485]   - Field: ‘gc’
[10:25:36.485]   - Field: ‘conditions’
[10:25:36.485]   - Field: ‘expr’
[10:25:36.485]   - Field: ‘uuid’
[10:25:36.485]   - Field: ‘seed’
[10:25:36.485]   - Field: ‘version’
[10:25:36.485]   - Field: ‘result’
[10:25:36.486]   - Field: ‘asynchronous’
[10:25:36.486]   - Field: ‘calls’
[10:25:36.486]   - Field: ‘globals’
[10:25:36.486]   - Field: ‘stdout’
[10:25:36.486]   - Field: ‘earlySignal’
[10:25:36.486]   - Field: ‘lazy’
[10:25:36.486]   - Field: ‘state’
[10:25:36.486] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[10:25:36.486] - Launch lazy future ...
[10:25:36.487] Packages needed by the future expression (n = 0): <none>
[10:25:36.487] Packages needed by future strategies (n = 0): <none>
[10:25:36.488] {
[10:25:36.488]     {
[10:25:36.488]         {
[10:25:36.488]             ...future.startTime <- base::Sys.time()
[10:25:36.488]             {
[10:25:36.488]                 {
[10:25:36.488]                   {
[10:25:36.488]                     base::local({
[10:25:36.488]                       has_future <- base::requireNamespace("future", 
[10:25:36.488]                         quietly = TRUE)
[10:25:36.488]                       if (has_future) {
[10:25:36.488]                         ns <- base::getNamespace("future")
[10:25:36.488]                         version <- ns[[".package"]][["version"]]
[10:25:36.488]                         if (is.null(version)) 
[10:25:36.488]                           version <- utils::packageVersion("future")
[10:25:36.488]                       }
[10:25:36.488]                       else {
[10:25:36.488]                         version <- NULL
[10:25:36.488]                       }
[10:25:36.488]                       if (!has_future || version < "1.8.0") {
[10:25:36.488]                         info <- base::c(r_version = base::gsub("R version ", 
[10:25:36.488]                           "", base::R.version$version.string), 
[10:25:36.488]                           platform = base::sprintf("%s (%s-bit)", 
[10:25:36.488]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:25:36.488]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[10:25:36.488]                             "release", "version")], collapse = " "), 
[10:25:36.488]                           hostname = base::Sys.info()[["nodename"]])
[10:25:36.488]                         info <- base::sprintf("%s: %s", base::names(info), 
[10:25:36.488]                           info)
[10:25:36.488]                         info <- base::paste(info, collapse = "; ")
[10:25:36.488]                         if (!has_future) {
[10:25:36.488]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:25:36.488]                             info)
[10:25:36.488]                         }
[10:25:36.488]                         else {
[10:25:36.488]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:25:36.488]                             info, version)
[10:25:36.488]                         }
[10:25:36.488]                         base::stop(msg)
[10:25:36.488]                       }
[10:25:36.488]                     })
[10:25:36.488]                   }
[10:25:36.488]                   options(future.plan = NULL)
[10:25:36.488]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:25:36.488]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:25:36.488]                 }
[10:25:36.488]                 ...future.workdir <- getwd()
[10:25:36.488]             }
[10:25:36.488]             ...future.oldOptions <- base::as.list(base::.Options)
[10:25:36.488]             ...future.oldEnvVars <- base::Sys.getenv()
[10:25:36.488]         }
[10:25:36.488]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:25:36.488]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[10:25:36.488]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:25:36.488]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:25:36.488]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:25:36.488]             future.stdout.windows.reencode = NULL, width = 80L)
[10:25:36.488]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:25:36.488]             base::names(...future.oldOptions))
[10:25:36.488]     }
[10:25:36.488]     if (FALSE) {
[10:25:36.488]     }
[10:25:36.488]     else {
[10:25:36.488]         if (TRUE) {
[10:25:36.488]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:25:36.488]                 open = "w")
[10:25:36.488]         }
[10:25:36.488]         else {
[10:25:36.488]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:25:36.488]                 windows = "NUL", "/dev/null"), open = "w")
[10:25:36.488]         }
[10:25:36.488]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:25:36.488]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:25:36.488]             base::sink(type = "output", split = FALSE)
[10:25:36.488]             base::close(...future.stdout)
[10:25:36.488]         }, add = TRUE)
[10:25:36.488]     }
[10:25:36.488]     ...future.frame <- base::sys.nframe()
[10:25:36.488]     ...future.conditions <- base::list()
[10:25:36.488]     ...future.rng <- base::globalenv()$.Random.seed
[10:25:36.488]     if (FALSE) {
[10:25:36.488]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:25:36.488]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:25:36.488]     }
[10:25:36.488]     ...future.result <- base::tryCatch({
[10:25:36.488]         base::withCallingHandlers({
[10:25:36.488]             ...future.value <- base::withVisible(base::local({
[10:25:36.488]                 x <- 1
[10:25:36.488]             }))
[10:25:36.488]             future::FutureResult(value = ...future.value$value, 
[10:25:36.488]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:25:36.488]                   ...future.rng), globalenv = if (FALSE) 
[10:25:36.488]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:25:36.488]                     ...future.globalenv.names))
[10:25:36.488]                 else NULL, started = ...future.startTime, version = "1.8")
[10:25:36.488]         }, condition = base::local({
[10:25:36.488]             c <- base::c
[10:25:36.488]             inherits <- base::inherits
[10:25:36.488]             invokeRestart <- base::invokeRestart
[10:25:36.488]             length <- base::length
[10:25:36.488]             list <- base::list
[10:25:36.488]             seq.int <- base::seq.int
[10:25:36.488]             signalCondition <- base::signalCondition
[10:25:36.488]             sys.calls <- base::sys.calls
[10:25:36.488]             `[[` <- base::`[[`
[10:25:36.488]             `+` <- base::`+`
[10:25:36.488]             `<<-` <- base::`<<-`
[10:25:36.488]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:25:36.488]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:25:36.488]                   3L)]
[10:25:36.488]             }
[10:25:36.488]             function(cond) {
[10:25:36.488]                 is_error <- inherits(cond, "error")
[10:25:36.488]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:25:36.488]                   NULL)
[10:25:36.488]                 if (is_error) {
[10:25:36.488]                   sessionInformation <- function() {
[10:25:36.488]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:25:36.488]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:25:36.488]                       search = base::search(), system = base::Sys.info())
[10:25:36.488]                   }
[10:25:36.488]                   ...future.conditions[[length(...future.conditions) + 
[10:25:36.488]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:25:36.488]                     cond$call), session = sessionInformation(), 
[10:25:36.488]                     timestamp = base::Sys.time(), signaled = 0L)
[10:25:36.488]                   signalCondition(cond)
[10:25:36.488]                 }
[10:25:36.488]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:25:36.488]                 "immediateCondition"))) {
[10:25:36.488]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:25:36.488]                   ...future.conditions[[length(...future.conditions) + 
[10:25:36.488]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:25:36.488]                   if (TRUE && !signal) {
[10:25:36.488]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:25:36.488]                     {
[10:25:36.488]                       inherits <- base::inherits
[10:25:36.488]                       invokeRestart <- base::invokeRestart
[10:25:36.488]                       is.null <- base::is.null
[10:25:36.488]                       muffled <- FALSE
[10:25:36.488]                       if (inherits(cond, "message")) {
[10:25:36.488]                         muffled <- grepl(pattern, "muffleMessage")
[10:25:36.488]                         if (muffled) 
[10:25:36.488]                           invokeRestart("muffleMessage")
[10:25:36.488]                       }
[10:25:36.488]                       else if (inherits(cond, "warning")) {
[10:25:36.488]                         muffled <- grepl(pattern, "muffleWarning")
[10:25:36.488]                         if (muffled) 
[10:25:36.488]                           invokeRestart("muffleWarning")
[10:25:36.488]                       }
[10:25:36.488]                       else if (inherits(cond, "condition")) {
[10:25:36.488]                         if (!is.null(pattern)) {
[10:25:36.488]                           computeRestarts <- base::computeRestarts
[10:25:36.488]                           grepl <- base::grepl
[10:25:36.488]                           restarts <- computeRestarts(cond)
[10:25:36.488]                           for (restart in restarts) {
[10:25:36.488]                             name <- restart$name
[10:25:36.488]                             if (is.null(name)) 
[10:25:36.488]                               next
[10:25:36.488]                             if (!grepl(pattern, name)) 
[10:25:36.488]                               next
[10:25:36.488]                             invokeRestart(restart)
[10:25:36.488]                             muffled <- TRUE
[10:25:36.488]                             break
[10:25:36.488]                           }
[10:25:36.488]                         }
[10:25:36.488]                       }
[10:25:36.488]                       invisible(muffled)
[10:25:36.488]                     }
[10:25:36.488]                     muffleCondition(cond, pattern = "^muffle")
[10:25:36.488]                   }
[10:25:36.488]                 }
[10:25:36.488]                 else {
[10:25:36.488]                   if (TRUE) {
[10:25:36.488]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:25:36.488]                     {
[10:25:36.488]                       inherits <- base::inherits
[10:25:36.488]                       invokeRestart <- base::invokeRestart
[10:25:36.488]                       is.null <- base::is.null
[10:25:36.488]                       muffled <- FALSE
[10:25:36.488]                       if (inherits(cond, "message")) {
[10:25:36.488]                         muffled <- grepl(pattern, "muffleMessage")
[10:25:36.488]                         if (muffled) 
[10:25:36.488]                           invokeRestart("muffleMessage")
[10:25:36.488]                       }
[10:25:36.488]                       else if (inherits(cond, "warning")) {
[10:25:36.488]                         muffled <- grepl(pattern, "muffleWarning")
[10:25:36.488]                         if (muffled) 
[10:25:36.488]                           invokeRestart("muffleWarning")
[10:25:36.488]                       }
[10:25:36.488]                       else if (inherits(cond, "condition")) {
[10:25:36.488]                         if (!is.null(pattern)) {
[10:25:36.488]                           computeRestarts <- base::computeRestarts
[10:25:36.488]                           grepl <- base::grepl
[10:25:36.488]                           restarts <- computeRestarts(cond)
[10:25:36.488]                           for (restart in restarts) {
[10:25:36.488]                             name <- restart$name
[10:25:36.488]                             if (is.null(name)) 
[10:25:36.488]                               next
[10:25:36.488]                             if (!grepl(pattern, name)) 
[10:25:36.488]                               next
[10:25:36.488]                             invokeRestart(restart)
[10:25:36.488]                             muffled <- TRUE
[10:25:36.488]                             break
[10:25:36.488]                           }
[10:25:36.488]                         }
[10:25:36.488]                       }
[10:25:36.488]                       invisible(muffled)
[10:25:36.488]                     }
[10:25:36.488]                     muffleCondition(cond, pattern = "^muffle")
[10:25:36.488]                   }
[10:25:36.488]                 }
[10:25:36.488]             }
[10:25:36.488]         }))
[10:25:36.488]     }, error = function(ex) {
[10:25:36.488]         base::structure(base::list(value = NULL, visible = NULL, 
[10:25:36.488]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:25:36.488]                 ...future.rng), started = ...future.startTime, 
[10:25:36.488]             finished = Sys.time(), session_uuid = NA_character_, 
[10:25:36.488]             version = "1.8"), class = "FutureResult")
[10:25:36.488]     }, finally = {
[10:25:36.488]         if (!identical(...future.workdir, getwd())) 
[10:25:36.488]             setwd(...future.workdir)
[10:25:36.488]         {
[10:25:36.488]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:25:36.488]                 ...future.oldOptions$nwarnings <- NULL
[10:25:36.488]             }
[10:25:36.488]             base::options(...future.oldOptions)
[10:25:36.488]             if (.Platform$OS.type == "windows") {
[10:25:36.488]                 old_names <- names(...future.oldEnvVars)
[10:25:36.488]                 envs <- base::Sys.getenv()
[10:25:36.488]                 names <- names(envs)
[10:25:36.488]                 common <- intersect(names, old_names)
[10:25:36.488]                 added <- setdiff(names, old_names)
[10:25:36.488]                 removed <- setdiff(old_names, names)
[10:25:36.488]                 changed <- common[...future.oldEnvVars[common] != 
[10:25:36.488]                   envs[common]]
[10:25:36.488]                 NAMES <- toupper(changed)
[10:25:36.488]                 args <- list()
[10:25:36.488]                 for (kk in seq_along(NAMES)) {
[10:25:36.488]                   name <- changed[[kk]]
[10:25:36.488]                   NAME <- NAMES[[kk]]
[10:25:36.488]                   if (name != NAME && is.element(NAME, old_names)) 
[10:25:36.488]                     next
[10:25:36.488]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:25:36.488]                 }
[10:25:36.488]                 NAMES <- toupper(added)
[10:25:36.488]                 for (kk in seq_along(NAMES)) {
[10:25:36.488]                   name <- added[[kk]]
[10:25:36.488]                   NAME <- NAMES[[kk]]
[10:25:36.488]                   if (name != NAME && is.element(NAME, old_names)) 
[10:25:36.488]                     next
[10:25:36.488]                   args[[name]] <- ""
[10:25:36.488]                 }
[10:25:36.488]                 NAMES <- toupper(removed)
[10:25:36.488]                 for (kk in seq_along(NAMES)) {
[10:25:36.488]                   name <- removed[[kk]]
[10:25:36.488]                   NAME <- NAMES[[kk]]
[10:25:36.488]                   if (name != NAME && is.element(NAME, old_names)) 
[10:25:36.488]                     next
[10:25:36.488]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:25:36.488]                 }
[10:25:36.488]                 if (length(args) > 0) 
[10:25:36.488]                   base::do.call(base::Sys.setenv, args = args)
[10:25:36.488]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:25:36.488]             }
[10:25:36.488]             else {
[10:25:36.488]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:25:36.488]             }
[10:25:36.488]             {
[10:25:36.488]                 if (base::length(...future.futureOptionsAdded) > 
[10:25:36.488]                   0L) {
[10:25:36.488]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:25:36.488]                   base::names(opts) <- ...future.futureOptionsAdded
[10:25:36.488]                   base::options(opts)
[10:25:36.488]                 }
[10:25:36.488]                 {
[10:25:36.488]                   {
[10:25:36.488]                     NULL
[10:25:36.488]                     RNGkind("Mersenne-Twister")
[10:25:36.488]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[10:25:36.488]                       inherits = FALSE)
[10:25:36.488]                   }
[10:25:36.488]                   options(future.plan = NULL)
[10:25:36.488]                   if (is.na(NA_character_)) 
[10:25:36.488]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:25:36.488]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:25:36.488]                   future::plan(list(function (..., envir = parent.frame()) 
[10:25:36.488]                   {
[10:25:36.488]                     future <- SequentialFuture(..., envir = envir)
[10:25:36.488]                     if (!future$lazy) 
[10:25:36.488]                       future <- run(future)
[10:25:36.488]                     invisible(future)
[10:25:36.488]                   }), .cleanup = FALSE, .init = FALSE)
[10:25:36.488]                 }
[10:25:36.488]             }
[10:25:36.488]         }
[10:25:36.488]     })
[10:25:36.488]     if (TRUE) {
[10:25:36.488]         base::sink(type = "output", split = FALSE)
[10:25:36.488]         if (TRUE) {
[10:25:36.488]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:25:36.488]         }
[10:25:36.488]         else {
[10:25:36.488]             ...future.result["stdout"] <- base::list(NULL)
[10:25:36.488]         }
[10:25:36.488]         base::close(...future.stdout)
[10:25:36.488]         ...future.stdout <- NULL
[10:25:36.488]     }
[10:25:36.488]     ...future.result$conditions <- ...future.conditions
[10:25:36.488]     ...future.result$finished <- base::Sys.time()
[10:25:36.488]     ...future.result
[10:25:36.488] }
[10:25:36.490] plan(): Setting new future strategy stack:
[10:25:36.490] List of future strategies:
[10:25:36.490] 1. sequential:
[10:25:36.490]    - args: function (..., envir = parent.frame())
[10:25:36.490]    - tweaked: FALSE
[10:25:36.490]    - call: NULL
[10:25:36.490] plan(): nbrOfWorkers() = 1
[10:25:36.491] plan(): Setting new future strategy stack:
[10:25:36.492] List of future strategies:
[10:25:36.492] 1. sequential:
[10:25:36.492]    - args: function (..., envir = parent.frame())
[10:25:36.492]    - tweaked: FALSE
[10:25:36.492]    - call: plan(strategy)
[10:25:36.492] plan(): nbrOfWorkers() = 1
[10:25:36.492] SequentialFuture started (and completed)
[10:25:36.493] - Launch lazy future ... done
[10:25:36.493] run() for ‘SequentialFuture’ ... done
** Future evaluation with globals
[10:25:36.493] getGlobalsAndPackages() ...
[10:25:36.493] Searching for globals...
[10:25:36.494] - globals found: [3] ‘{’, ‘<-’, ‘a’
[10:25:36.494] Searching for globals ... DONE
[10:25:36.494] Resolving globals: FALSE
[10:25:36.495] The total size of the 1 globals is 56 bytes (56 bytes)
[10:25:36.496] The total size of the 1 globals exported for future expression (‘{; x <- a; }’) is 56 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘a’ (56 bytes of class ‘numeric’)
[10:25:36.496] - globals: [1] ‘a’
[10:25:36.496] 
[10:25:36.496] getGlobalsAndPackages() ... DONE
[10:25:36.496] run() for ‘Future’ ...
[10:25:36.496] - state: ‘created’
[10:25:36.496] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:25:36.497] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[10:25:36.497] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[10:25:36.497]   - Field: ‘label’
[10:25:36.497]   - Field: ‘local’
[10:25:36.497]   - Field: ‘owner’
[10:25:36.497]   - Field: ‘envir’
[10:25:36.497]   - Field: ‘packages’
[10:25:36.497]   - Field: ‘gc’
[10:25:36.497]   - Field: ‘conditions’
[10:25:36.498]   - Field: ‘expr’
[10:25:36.498]   - Field: ‘uuid’
[10:25:36.498]   - Field: ‘seed’
[10:25:36.498]   - Field: ‘version’
[10:25:36.498]   - Field: ‘result’
[10:25:36.498]   - Field: ‘asynchronous’
[10:25:36.498]   - Field: ‘calls’
[10:25:36.498]   - Field: ‘globals’
[10:25:36.498]   - Field: ‘stdout’
[10:25:36.498]   - Field: ‘earlySignal’
[10:25:36.498]   - Field: ‘lazy’
[10:25:36.499]   - Field: ‘state’
[10:25:36.499] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[10:25:36.499] - Launch lazy future ...
[10:25:36.499] Packages needed by the future expression (n = 0): <none>
[10:25:36.499] Packages needed by future strategies (n = 0): <none>
[10:25:36.499] {
[10:25:36.499]     {
[10:25:36.499]         {
[10:25:36.499]             ...future.startTime <- base::Sys.time()
[10:25:36.499]             {
[10:25:36.499]                 {
[10:25:36.499]                   {
[10:25:36.499]                     base::local({
[10:25:36.499]                       has_future <- base::requireNamespace("future", 
[10:25:36.499]                         quietly = TRUE)
[10:25:36.499]                       if (has_future) {
[10:25:36.499]                         ns <- base::getNamespace("future")
[10:25:36.499]                         version <- ns[[".package"]][["version"]]
[10:25:36.499]                         if (is.null(version)) 
[10:25:36.499]                           version <- utils::packageVersion("future")
[10:25:36.499]                       }
[10:25:36.499]                       else {
[10:25:36.499]                         version <- NULL
[10:25:36.499]                       }
[10:25:36.499]                       if (!has_future || version < "1.8.0") {
[10:25:36.499]                         info <- base::c(r_version = base::gsub("R version ", 
[10:25:36.499]                           "", base::R.version$version.string), 
[10:25:36.499]                           platform = base::sprintf("%s (%s-bit)", 
[10:25:36.499]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:25:36.499]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[10:25:36.499]                             "release", "version")], collapse = " "), 
[10:25:36.499]                           hostname = base::Sys.info()[["nodename"]])
[10:25:36.499]                         info <- base::sprintf("%s: %s", base::names(info), 
[10:25:36.499]                           info)
[10:25:36.499]                         info <- base::paste(info, collapse = "; ")
[10:25:36.499]                         if (!has_future) {
[10:25:36.499]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:25:36.499]                             info)
[10:25:36.499]                         }
[10:25:36.499]                         else {
[10:25:36.499]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:25:36.499]                             info, version)
[10:25:36.499]                         }
[10:25:36.499]                         base::stop(msg)
[10:25:36.499]                       }
[10:25:36.499]                     })
[10:25:36.499]                   }
[10:25:36.499]                   options(future.plan = NULL)
[10:25:36.499]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:25:36.499]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:25:36.499]                 }
[10:25:36.499]                 ...future.workdir <- getwd()
[10:25:36.499]             }
[10:25:36.499]             ...future.oldOptions <- base::as.list(base::.Options)
[10:25:36.499]             ...future.oldEnvVars <- base::Sys.getenv()
[10:25:36.499]         }
[10:25:36.499]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:25:36.499]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[10:25:36.499]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:25:36.499]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:25:36.499]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:25:36.499]             future.stdout.windows.reencode = NULL, width = 80L)
[10:25:36.499]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:25:36.499]             base::names(...future.oldOptions))
[10:25:36.499]     }
[10:25:36.499]     if (FALSE) {
[10:25:36.499]     }
[10:25:36.499]     else {
[10:25:36.499]         if (TRUE) {
[10:25:36.499]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:25:36.499]                 open = "w")
[10:25:36.499]         }
[10:25:36.499]         else {
[10:25:36.499]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:25:36.499]                 windows = "NUL", "/dev/null"), open = "w")
[10:25:36.499]         }
[10:25:36.499]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:25:36.499]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:25:36.499]             base::sink(type = "output", split = FALSE)
[10:25:36.499]             base::close(...future.stdout)
[10:25:36.499]         }, add = TRUE)
[10:25:36.499]     }
[10:25:36.499]     ...future.frame <- base::sys.nframe()
[10:25:36.499]     ...future.conditions <- base::list()
[10:25:36.499]     ...future.rng <- base::globalenv()$.Random.seed
[10:25:36.499]     if (FALSE) {
[10:25:36.499]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:25:36.499]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:25:36.499]     }
[10:25:36.499]     ...future.result <- base::tryCatch({
[10:25:36.499]         base::withCallingHandlers({
[10:25:36.499]             ...future.value <- base::withVisible(base::local({
[10:25:36.499]                 x <- a
[10:25:36.499]             }))
[10:25:36.499]             future::FutureResult(value = ...future.value$value, 
[10:25:36.499]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:25:36.499]                   ...future.rng), globalenv = if (FALSE) 
[10:25:36.499]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:25:36.499]                     ...future.globalenv.names))
[10:25:36.499]                 else NULL, started = ...future.startTime, version = "1.8")
[10:25:36.499]         }, condition = base::local({
[10:25:36.499]             c <- base::c
[10:25:36.499]             inherits <- base::inherits
[10:25:36.499]             invokeRestart <- base::invokeRestart
[10:25:36.499]             length <- base::length
[10:25:36.499]             list <- base::list
[10:25:36.499]             seq.int <- base::seq.int
[10:25:36.499]             signalCondition <- base::signalCondition
[10:25:36.499]             sys.calls <- base::sys.calls
[10:25:36.499]             `[[` <- base::`[[`
[10:25:36.499]             `+` <- base::`+`
[10:25:36.499]             `<<-` <- base::`<<-`
[10:25:36.499]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:25:36.499]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:25:36.499]                   3L)]
[10:25:36.499]             }
[10:25:36.499]             function(cond) {
[10:25:36.499]                 is_error <- inherits(cond, "error")
[10:25:36.499]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:25:36.499]                   NULL)
[10:25:36.499]                 if (is_error) {
[10:25:36.499]                   sessionInformation <- function() {
[10:25:36.499]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:25:36.499]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:25:36.499]                       search = base::search(), system = base::Sys.info())
[10:25:36.499]                   }
[10:25:36.499]                   ...future.conditions[[length(...future.conditions) + 
[10:25:36.499]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:25:36.499]                     cond$call), session = sessionInformation(), 
[10:25:36.499]                     timestamp = base::Sys.time(), signaled = 0L)
[10:25:36.499]                   signalCondition(cond)
[10:25:36.499]                 }
[10:25:36.499]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:25:36.499]                 "immediateCondition"))) {
[10:25:36.499]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:25:36.499]                   ...future.conditions[[length(...future.conditions) + 
[10:25:36.499]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:25:36.499]                   if (TRUE && !signal) {
[10:25:36.499]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:25:36.499]                     {
[10:25:36.499]                       inherits <- base::inherits
[10:25:36.499]                       invokeRestart <- base::invokeRestart
[10:25:36.499]                       is.null <- base::is.null
[10:25:36.499]                       muffled <- FALSE
[10:25:36.499]                       if (inherits(cond, "message")) {
[10:25:36.499]                         muffled <- grepl(pattern, "muffleMessage")
[10:25:36.499]                         if (muffled) 
[10:25:36.499]                           invokeRestart("muffleMessage")
[10:25:36.499]                       }
[10:25:36.499]                       else if (inherits(cond, "warning")) {
[10:25:36.499]                         muffled <- grepl(pattern, "muffleWarning")
[10:25:36.499]                         if (muffled) 
[10:25:36.499]                           invokeRestart("muffleWarning")
[10:25:36.499]                       }
[10:25:36.499]                       else if (inherits(cond, "condition")) {
[10:25:36.499]                         if (!is.null(pattern)) {
[10:25:36.499]                           computeRestarts <- base::computeRestarts
[10:25:36.499]                           grepl <- base::grepl
[10:25:36.499]                           restarts <- computeRestarts(cond)
[10:25:36.499]                           for (restart in restarts) {
[10:25:36.499]                             name <- restart$name
[10:25:36.499]                             if (is.null(name)) 
[10:25:36.499]                               next
[10:25:36.499]                             if (!grepl(pattern, name)) 
[10:25:36.499]                               next
[10:25:36.499]                             invokeRestart(restart)
[10:25:36.499]                             muffled <- TRUE
[10:25:36.499]                             break
[10:25:36.499]                           }
[10:25:36.499]                         }
[10:25:36.499]                       }
[10:25:36.499]                       invisible(muffled)
[10:25:36.499]                     }
[10:25:36.499]                     muffleCondition(cond, pattern = "^muffle")
[10:25:36.499]                   }
[10:25:36.499]                 }
[10:25:36.499]                 else {
[10:25:36.499]                   if (TRUE) {
[10:25:36.499]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:25:36.499]                     {
[10:25:36.499]                       inherits <- base::inherits
[10:25:36.499]                       invokeRestart <- base::invokeRestart
[10:25:36.499]                       is.null <- base::is.null
[10:25:36.499]                       muffled <- FALSE
[10:25:36.499]                       if (inherits(cond, "message")) {
[10:25:36.499]                         muffled <- grepl(pattern, "muffleMessage")
[10:25:36.499]                         if (muffled) 
[10:25:36.499]                           invokeRestart("muffleMessage")
[10:25:36.499]                       }
[10:25:36.499]                       else if (inherits(cond, "warning")) {
[10:25:36.499]                         muffled <- grepl(pattern, "muffleWarning")
[10:25:36.499]                         if (muffled) 
[10:25:36.499]                           invokeRestart("muffleWarning")
[10:25:36.499]                       }
[10:25:36.499]                       else if (inherits(cond, "condition")) {
[10:25:36.499]                         if (!is.null(pattern)) {
[10:25:36.499]                           computeRestarts <- base::computeRestarts
[10:25:36.499]                           grepl <- base::grepl
[10:25:36.499]                           restarts <- computeRestarts(cond)
[10:25:36.499]                           for (restart in restarts) {
[10:25:36.499]                             name <- restart$name
[10:25:36.499]                             if (is.null(name)) 
[10:25:36.499]                               next
[10:25:36.499]                             if (!grepl(pattern, name)) 
[10:25:36.499]                               next
[10:25:36.499]                             invokeRestart(restart)
[10:25:36.499]                             muffled <- TRUE
[10:25:36.499]                             break
[10:25:36.499]                           }
[10:25:36.499]                         }
[10:25:36.499]                       }
[10:25:36.499]                       invisible(muffled)
[10:25:36.499]                     }
[10:25:36.499]                     muffleCondition(cond, pattern = "^muffle")
[10:25:36.499]                   }
[10:25:36.499]                 }
[10:25:36.499]             }
[10:25:36.499]         }))
[10:25:36.499]     }, error = function(ex) {
[10:25:36.499]         base::structure(base::list(value = NULL, visible = NULL, 
[10:25:36.499]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:25:36.499]                 ...future.rng), started = ...future.startTime, 
[10:25:36.499]             finished = Sys.time(), session_uuid = NA_character_, 
[10:25:36.499]             version = "1.8"), class = "FutureResult")
[10:25:36.499]     }, finally = {
[10:25:36.499]         if (!identical(...future.workdir, getwd())) 
[10:25:36.499]             setwd(...future.workdir)
[10:25:36.499]         {
[10:25:36.499]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:25:36.499]                 ...future.oldOptions$nwarnings <- NULL
[10:25:36.499]             }
[10:25:36.499]             base::options(...future.oldOptions)
[10:25:36.499]             if (.Platform$OS.type == "windows") {
[10:25:36.499]                 old_names <- names(...future.oldEnvVars)
[10:25:36.499]                 envs <- base::Sys.getenv()
[10:25:36.499]                 names <- names(envs)
[10:25:36.499]                 common <- intersect(names, old_names)
[10:25:36.499]                 added <- setdiff(names, old_names)
[10:25:36.499]                 removed <- setdiff(old_names, names)
[10:25:36.499]                 changed <- common[...future.oldEnvVars[common] != 
[10:25:36.499]                   envs[common]]
[10:25:36.499]                 NAMES <- toupper(changed)
[10:25:36.499]                 args <- list()
[10:25:36.499]                 for (kk in seq_along(NAMES)) {
[10:25:36.499]                   name <- changed[[kk]]
[10:25:36.499]                   NAME <- NAMES[[kk]]
[10:25:36.499]                   if (name != NAME && is.element(NAME, old_names)) 
[10:25:36.499]                     next
[10:25:36.499]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:25:36.499]                 }
[10:25:36.499]                 NAMES <- toupper(added)
[10:25:36.499]                 for (kk in seq_along(NAMES)) {
[10:25:36.499]                   name <- added[[kk]]
[10:25:36.499]                   NAME <- NAMES[[kk]]
[10:25:36.499]                   if (name != NAME && is.element(NAME, old_names)) 
[10:25:36.499]                     next
[10:25:36.499]                   args[[name]] <- ""
[10:25:36.499]                 }
[10:25:36.499]                 NAMES <- toupper(removed)
[10:25:36.499]                 for (kk in seq_along(NAMES)) {
[10:25:36.499]                   name <- removed[[kk]]
[10:25:36.499]                   NAME <- NAMES[[kk]]
[10:25:36.499]                   if (name != NAME && is.element(NAME, old_names)) 
[10:25:36.499]                     next
[10:25:36.499]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:25:36.499]                 }
[10:25:36.499]                 if (length(args) > 0) 
[10:25:36.499]                   base::do.call(base::Sys.setenv, args = args)
[10:25:36.499]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:25:36.499]             }
[10:25:36.499]             else {
[10:25:36.499]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:25:36.499]             }
[10:25:36.499]             {
[10:25:36.499]                 if (base::length(...future.futureOptionsAdded) > 
[10:25:36.499]                   0L) {
[10:25:36.499]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:25:36.499]                   base::names(opts) <- ...future.futureOptionsAdded
[10:25:36.499]                   base::options(opts)
[10:25:36.499]                 }
[10:25:36.499]                 {
[10:25:36.499]                   {
[10:25:36.499]                     NULL
[10:25:36.499]                     RNGkind("Mersenne-Twister")
[10:25:36.499]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[10:25:36.499]                       inherits = FALSE)
[10:25:36.499]                   }
[10:25:36.499]                   options(future.plan = NULL)
[10:25:36.499]                   if (is.na(NA_character_)) 
[10:25:36.499]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:25:36.499]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:25:36.499]                   future::plan(list(function (..., envir = parent.frame()) 
[10:25:36.499]                   {
[10:25:36.499]                     future <- SequentialFuture(..., envir = envir)
[10:25:36.499]                     if (!future$lazy) 
[10:25:36.499]                       future <- run(future)
[10:25:36.499]                     invisible(future)
[10:25:36.499]                   }), .cleanup = FALSE, .init = FALSE)
[10:25:36.499]                 }
[10:25:36.499]             }
[10:25:36.499]         }
[10:25:36.499]     })
[10:25:36.499]     if (TRUE) {
[10:25:36.499]         base::sink(type = "output", split = FALSE)
[10:25:36.499]         if (TRUE) {
[10:25:36.499]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:25:36.499]         }
[10:25:36.499]         else {
[10:25:36.499]             ...future.result["stdout"] <- base::list(NULL)
[10:25:36.499]         }
[10:25:36.499]         base::close(...future.stdout)
[10:25:36.499]         ...future.stdout <- NULL
[10:25:36.499]     }
[10:25:36.499]     ...future.result$conditions <- ...future.conditions
[10:25:36.499]     ...future.result$finished <- base::Sys.time()
[10:25:36.499]     ...future.result
[10:25:36.499] }
[10:25:36.501] assign_globals() ...
[10:25:36.501] List of 1
[10:25:36.501]  $ a: num 2
[10:25:36.501]  - attr(*, "where")=List of 1
[10:25:36.501]   ..$ a:<environment: R_EmptyEnv> 
[10:25:36.501]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:25:36.501]  - attr(*, "resolved")= logi FALSE
[10:25:36.501]  - attr(*, "total_size")= num 56
[10:25:36.501]  - attr(*, "already-done")= logi TRUE
[10:25:36.508] - copied ‘a’ to environment
[10:25:36.508] assign_globals() ... done
[10:25:36.509] plan(): Setting new future strategy stack:
[10:25:36.509] List of future strategies:
[10:25:36.509] 1. sequential:
[10:25:36.509]    - args: function (..., envir = parent.frame())
[10:25:36.509]    - tweaked: FALSE
[10:25:36.509]    - call: NULL
[10:25:36.509] plan(): nbrOfWorkers() = 1
[10:25:36.510] plan(): Setting new future strategy stack:
[10:25:36.510] List of future strategies:
[10:25:36.510] 1. sequential:
[10:25:36.510]    - args: function (..., envir = parent.frame())
[10:25:36.510]    - tweaked: FALSE
[10:25:36.510]    - call: plan(strategy)
[10:25:36.510] plan(): nbrOfWorkers() = 1
[10:25:36.510] SequentialFuture started (and completed)
[10:25:36.511] - Launch lazy future ... done
[10:25:36.511] run() for ‘SequentialFuture’ ... done
** Future evaluation with errors
[10:25:36.511] getGlobalsAndPackages() ...
[10:25:36.511] Searching for globals...
[10:25:36.514] - globals found: [3] ‘{’, ‘<-’, ‘stop’
[10:25:36.514] Searching for globals ... DONE
[10:25:36.515] Resolving globals: FALSE
[10:25:36.515] 
[10:25:36.515] 
[10:25:36.515] getGlobalsAndPackages() ... DONE
[10:25:36.515] run() for ‘Future’ ...
[10:25:36.515] - state: ‘created’
[10:25:36.515] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:25:36.516] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[10:25:36.516] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[10:25:36.516]   - Field: ‘label’
[10:25:36.516]   - Field: ‘local’
[10:25:36.516]   - Field: ‘owner’
[10:25:36.516]   - Field: ‘envir’
[10:25:36.516]   - Field: ‘packages’
[10:25:36.516]   - Field: ‘gc’
[10:25:36.517]   - Field: ‘conditions’
[10:25:36.517]   - Field: ‘expr’
[10:25:36.517]   - Field: ‘uuid’
[10:25:36.517]   - Field: ‘seed’
[10:25:36.517]   - Field: ‘version’
[10:25:36.517]   - Field: ‘result’
[10:25:36.517]   - Field: ‘asynchronous’
[10:25:36.517]   - Field: ‘calls’
[10:25:36.517]   - Field: ‘globals’
[10:25:36.517]   - Field: ‘stdout’
[10:25:36.517]   - Field: ‘earlySignal’
[10:25:36.518]   - Field: ‘lazy’
[10:25:36.518]   - Field: ‘state’
[10:25:36.518] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[10:25:36.518] - Launch lazy future ...
[10:25:36.518] Packages needed by the future expression (n = 0): <none>
[10:25:36.518] Packages needed by future strategies (n = 0): <none>
[10:25:36.519] {
[10:25:36.519]     {
[10:25:36.519]         {
[10:25:36.519]             ...future.startTime <- base::Sys.time()
[10:25:36.519]             {
[10:25:36.519]                 {
[10:25:36.519]                   {
[10:25:36.519]                     base::local({
[10:25:36.519]                       has_future <- base::requireNamespace("future", 
[10:25:36.519]                         quietly = TRUE)
[10:25:36.519]                       if (has_future) {
[10:25:36.519]                         ns <- base::getNamespace("future")
[10:25:36.519]                         version <- ns[[".package"]][["version"]]
[10:25:36.519]                         if (is.null(version)) 
[10:25:36.519]                           version <- utils::packageVersion("future")
[10:25:36.519]                       }
[10:25:36.519]                       else {
[10:25:36.519]                         version <- NULL
[10:25:36.519]                       }
[10:25:36.519]                       if (!has_future || version < "1.8.0") {
[10:25:36.519]                         info <- base::c(r_version = base::gsub("R version ", 
[10:25:36.519]                           "", base::R.version$version.string), 
[10:25:36.519]                           platform = base::sprintf("%s (%s-bit)", 
[10:25:36.519]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:25:36.519]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[10:25:36.519]                             "release", "version")], collapse = " "), 
[10:25:36.519]                           hostname = base::Sys.info()[["nodename"]])
[10:25:36.519]                         info <- base::sprintf("%s: %s", base::names(info), 
[10:25:36.519]                           info)
[10:25:36.519]                         info <- base::paste(info, collapse = "; ")
[10:25:36.519]                         if (!has_future) {
[10:25:36.519]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:25:36.519]                             info)
[10:25:36.519]                         }
[10:25:36.519]                         else {
[10:25:36.519]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:25:36.519]                             info, version)
[10:25:36.519]                         }
[10:25:36.519]                         base::stop(msg)
[10:25:36.519]                       }
[10:25:36.519]                     })
[10:25:36.519]                   }
[10:25:36.519]                   options(future.plan = NULL)
[10:25:36.519]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:25:36.519]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:25:36.519]                 }
[10:25:36.519]                 ...future.workdir <- getwd()
[10:25:36.519]             }
[10:25:36.519]             ...future.oldOptions <- base::as.list(base::.Options)
[10:25:36.519]             ...future.oldEnvVars <- base::Sys.getenv()
[10:25:36.519]         }
[10:25:36.519]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:25:36.519]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[10:25:36.519]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:25:36.519]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:25:36.519]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:25:36.519]             future.stdout.windows.reencode = NULL, width = 80L)
[10:25:36.519]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:25:36.519]             base::names(...future.oldOptions))
[10:25:36.519]     }
[10:25:36.519]     if (FALSE) {
[10:25:36.519]     }
[10:25:36.519]     else {
[10:25:36.519]         if (TRUE) {
[10:25:36.519]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:25:36.519]                 open = "w")
[10:25:36.519]         }
[10:25:36.519]         else {
[10:25:36.519]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:25:36.519]                 windows = "NUL", "/dev/null"), open = "w")
[10:25:36.519]         }
[10:25:36.519]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:25:36.519]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:25:36.519]             base::sink(type = "output", split = FALSE)
[10:25:36.519]             base::close(...future.stdout)
[10:25:36.519]         }, add = TRUE)
[10:25:36.519]     }
[10:25:36.519]     ...future.frame <- base::sys.nframe()
[10:25:36.519]     ...future.conditions <- base::list()
[10:25:36.519]     ...future.rng <- base::globalenv()$.Random.seed
[10:25:36.519]     if (FALSE) {
[10:25:36.519]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:25:36.519]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:25:36.519]     }
[10:25:36.519]     ...future.result <- base::tryCatch({
[10:25:36.519]         base::withCallingHandlers({
[10:25:36.519]             ...future.value <- base::withVisible(base::local({
[10:25:36.519]                 x <- 3
[10:25:36.519]                 stop("Woops!")
[10:25:36.519]                 x
[10:25:36.519]             }))
[10:25:36.519]             future::FutureResult(value = ...future.value$value, 
[10:25:36.519]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:25:36.519]                   ...future.rng), globalenv = if (FALSE) 
[10:25:36.519]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:25:36.519]                     ...future.globalenv.names))
[10:25:36.519]                 else NULL, started = ...future.startTime, version = "1.8")
[10:25:36.519]         }, condition = base::local({
[10:25:36.519]             c <- base::c
[10:25:36.519]             inherits <- base::inherits
[10:25:36.519]             invokeRestart <- base::invokeRestart
[10:25:36.519]             length <- base::length
[10:25:36.519]             list <- base::list
[10:25:36.519]             seq.int <- base::seq.int
[10:25:36.519]             signalCondition <- base::signalCondition
[10:25:36.519]             sys.calls <- base::sys.calls
[10:25:36.519]             `[[` <- base::`[[`
[10:25:36.519]             `+` <- base::`+`
[10:25:36.519]             `<<-` <- base::`<<-`
[10:25:36.519]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:25:36.519]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:25:36.519]                   3L)]
[10:25:36.519]             }
[10:25:36.519]             function(cond) {
[10:25:36.519]                 is_error <- inherits(cond, "error")
[10:25:36.519]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:25:36.519]                   NULL)
[10:25:36.519]                 if (is_error) {
[10:25:36.519]                   sessionInformation <- function() {
[10:25:36.519]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:25:36.519]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:25:36.519]                       search = base::search(), system = base::Sys.info())
[10:25:36.519]                   }
[10:25:36.519]                   ...future.conditions[[length(...future.conditions) + 
[10:25:36.519]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:25:36.519]                     cond$call), session = sessionInformation(), 
[10:25:36.519]                     timestamp = base::Sys.time(), signaled = 0L)
[10:25:36.519]                   signalCondition(cond)
[10:25:36.519]                 }
[10:25:36.519]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:25:36.519]                 "immediateCondition"))) {
[10:25:36.519]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:25:36.519]                   ...future.conditions[[length(...future.conditions) + 
[10:25:36.519]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:25:36.519]                   if (TRUE && !signal) {
[10:25:36.519]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:25:36.519]                     {
[10:25:36.519]                       inherits <- base::inherits
[10:25:36.519]                       invokeRestart <- base::invokeRestart
[10:25:36.519]                       is.null <- base::is.null
[10:25:36.519]                       muffled <- FALSE
[10:25:36.519]                       if (inherits(cond, "message")) {
[10:25:36.519]                         muffled <- grepl(pattern, "muffleMessage")
[10:25:36.519]                         if (muffled) 
[10:25:36.519]                           invokeRestart("muffleMessage")
[10:25:36.519]                       }
[10:25:36.519]                       else if (inherits(cond, "warning")) {
[10:25:36.519]                         muffled <- grepl(pattern, "muffleWarning")
[10:25:36.519]                         if (muffled) 
[10:25:36.519]                           invokeRestart("muffleWarning")
[10:25:36.519]                       }
[10:25:36.519]                       else if (inherits(cond, "condition")) {
[10:25:36.519]                         if (!is.null(pattern)) {
[10:25:36.519]                           computeRestarts <- base::computeRestarts
[10:25:36.519]                           grepl <- base::grepl
[10:25:36.519]                           restarts <- computeRestarts(cond)
[10:25:36.519]                           for (restart in restarts) {
[10:25:36.519]                             name <- restart$name
[10:25:36.519]                             if (is.null(name)) 
[10:25:36.519]                               next
[10:25:36.519]                             if (!grepl(pattern, name)) 
[10:25:36.519]                               next
[10:25:36.519]                             invokeRestart(restart)
[10:25:36.519]                             muffled <- TRUE
[10:25:36.519]                             break
[10:25:36.519]                           }
[10:25:36.519]                         }
[10:25:36.519]                       }
[10:25:36.519]                       invisible(muffled)
[10:25:36.519]                     }
[10:25:36.519]                     muffleCondition(cond, pattern = "^muffle")
[10:25:36.519]                   }
[10:25:36.519]                 }
[10:25:36.519]                 else {
[10:25:36.519]                   if (TRUE) {
[10:25:36.519]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:25:36.519]                     {
[10:25:36.519]                       inherits <- base::inherits
[10:25:36.519]                       invokeRestart <- base::invokeRestart
[10:25:36.519]                       is.null <- base::is.null
[10:25:36.519]                       muffled <- FALSE
[10:25:36.519]                       if (inherits(cond, "message")) {
[10:25:36.519]                         muffled <- grepl(pattern, "muffleMessage")
[10:25:36.519]                         if (muffled) 
[10:25:36.519]                           invokeRestart("muffleMessage")
[10:25:36.519]                       }
[10:25:36.519]                       else if (inherits(cond, "warning")) {
[10:25:36.519]                         muffled <- grepl(pattern, "muffleWarning")
[10:25:36.519]                         if (muffled) 
[10:25:36.519]                           invokeRestart("muffleWarning")
[10:25:36.519]                       }
[10:25:36.519]                       else if (inherits(cond, "condition")) {
[10:25:36.519]                         if (!is.null(pattern)) {
[10:25:36.519]                           computeRestarts <- base::computeRestarts
[10:25:36.519]                           grepl <- base::grepl
[10:25:36.519]                           restarts <- computeRestarts(cond)
[10:25:36.519]                           for (restart in restarts) {
[10:25:36.519]                             name <- restart$name
[10:25:36.519]                             if (is.null(name)) 
[10:25:36.519]                               next
[10:25:36.519]                             if (!grepl(pattern, name)) 
[10:25:36.519]                               next
[10:25:36.519]                             invokeRestart(restart)
[10:25:36.519]                             muffled <- TRUE
[10:25:36.519]                             break
[10:25:36.519]                           }
[10:25:36.519]                         }
[10:25:36.519]                       }
[10:25:36.519]                       invisible(muffled)
[10:25:36.519]                     }
[10:25:36.519]                     muffleCondition(cond, pattern = "^muffle")
[10:25:36.519]                   }
[10:25:36.519]                 }
[10:25:36.519]             }
[10:25:36.519]         }))
[10:25:36.519]     }, error = function(ex) {
[10:25:36.519]         base::structure(base::list(value = NULL, visible = NULL, 
[10:25:36.519]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:25:36.519]                 ...future.rng), started = ...future.startTime, 
[10:25:36.519]             finished = Sys.time(), session_uuid = NA_character_, 
[10:25:36.519]             version = "1.8"), class = "FutureResult")
[10:25:36.519]     }, finally = {
[10:25:36.519]         if (!identical(...future.workdir, getwd())) 
[10:25:36.519]             setwd(...future.workdir)
[10:25:36.519]         {
[10:25:36.519]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:25:36.519]                 ...future.oldOptions$nwarnings <- NULL
[10:25:36.519]             }
[10:25:36.519]             base::options(...future.oldOptions)
[10:25:36.519]             if (.Platform$OS.type == "windows") {
[10:25:36.519]                 old_names <- names(...future.oldEnvVars)
[10:25:36.519]                 envs <- base::Sys.getenv()
[10:25:36.519]                 names <- names(envs)
[10:25:36.519]                 common <- intersect(names, old_names)
[10:25:36.519]                 added <- setdiff(names, old_names)
[10:25:36.519]                 removed <- setdiff(old_names, names)
[10:25:36.519]                 changed <- common[...future.oldEnvVars[common] != 
[10:25:36.519]                   envs[common]]
[10:25:36.519]                 NAMES <- toupper(changed)
[10:25:36.519]                 args <- list()
[10:25:36.519]                 for (kk in seq_along(NAMES)) {
[10:25:36.519]                   name <- changed[[kk]]
[10:25:36.519]                   NAME <- NAMES[[kk]]
[10:25:36.519]                   if (name != NAME && is.element(NAME, old_names)) 
[10:25:36.519]                     next
[10:25:36.519]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:25:36.519]                 }
[10:25:36.519]                 NAMES <- toupper(added)
[10:25:36.519]                 for (kk in seq_along(NAMES)) {
[10:25:36.519]                   name <- added[[kk]]
[10:25:36.519]                   NAME <- NAMES[[kk]]
[10:25:36.519]                   if (name != NAME && is.element(NAME, old_names)) 
[10:25:36.519]                     next
[10:25:36.519]                   args[[name]] <- ""
[10:25:36.519]                 }
[10:25:36.519]                 NAMES <- toupper(removed)
[10:25:36.519]                 for (kk in seq_along(NAMES)) {
[10:25:36.519]                   name <- removed[[kk]]
[10:25:36.519]                   NAME <- NAMES[[kk]]
[10:25:36.519]                   if (name != NAME && is.element(NAME, old_names)) 
[10:25:36.519]                     next
[10:25:36.519]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:25:36.519]                 }
[10:25:36.519]                 if (length(args) > 0) 
[10:25:36.519]                   base::do.call(base::Sys.setenv, args = args)
[10:25:36.519]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:25:36.519]             }
[10:25:36.519]             else {
[10:25:36.519]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:25:36.519]             }
[10:25:36.519]             {
[10:25:36.519]                 if (base::length(...future.futureOptionsAdded) > 
[10:25:36.519]                   0L) {
[10:25:36.519]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:25:36.519]                   base::names(opts) <- ...future.futureOptionsAdded
[10:25:36.519]                   base::options(opts)
[10:25:36.519]                 }
[10:25:36.519]                 {
[10:25:36.519]                   {
[10:25:36.519]                     NULL
[10:25:36.519]                     RNGkind("Mersenne-Twister")
[10:25:36.519]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[10:25:36.519]                       inherits = FALSE)
[10:25:36.519]                   }
[10:25:36.519]                   options(future.plan = NULL)
[10:25:36.519]                   if (is.na(NA_character_)) 
[10:25:36.519]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:25:36.519]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:25:36.519]                   future::plan(list(function (..., envir = parent.frame()) 
[10:25:36.519]                   {
[10:25:36.519]                     future <- SequentialFuture(..., envir = envir)
[10:25:36.519]                     if (!future$lazy) 
[10:25:36.519]                       future <- run(future)
[10:25:36.519]                     invisible(future)
[10:25:36.519]                   }), .cleanup = FALSE, .init = FALSE)
[10:25:36.519]                 }
[10:25:36.519]             }
[10:25:36.519]         }
[10:25:36.519]     })
[10:25:36.519]     if (TRUE) {
[10:25:36.519]         base::sink(type = "output", split = FALSE)
[10:25:36.519]         if (TRUE) {
[10:25:36.519]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:25:36.519]         }
[10:25:36.519]         else {
[10:25:36.519]             ...future.result["stdout"] <- base::list(NULL)
[10:25:36.519]         }
[10:25:36.519]         base::close(...future.stdout)
[10:25:36.519]         ...future.stdout <- NULL
[10:25:36.519]     }
[10:25:36.519]     ...future.result$conditions <- ...future.conditions
[10:25:36.519]     ...future.result$finished <- base::Sys.time()
[10:25:36.519]     ...future.result
[10:25:36.519] }
[10:25:36.520] plan(): Setting new future strategy stack:
[10:25:36.520] List of future strategies:
[10:25:36.520] 1. sequential:
[10:25:36.520]    - args: function (..., envir = parent.frame())
[10:25:36.520]    - tweaked: FALSE
[10:25:36.520]    - call: NULL
[10:25:36.521] plan(): nbrOfWorkers() = 1
[10:25:36.522] plan(): Setting new future strategy stack:
[10:25:36.522] List of future strategies:
[10:25:36.522] 1. sequential:
[10:25:36.522]    - args: function (..., envir = parent.frame())
[10:25:36.522]    - tweaked: FALSE
[10:25:36.522]    - call: plan(strategy)
[10:25:36.522] plan(): nbrOfWorkers() = 1
[10:25:36.522] SequentialFuture started (and completed)
[10:25:36.522] signalConditions() ...
[10:25:36.523]  - include = ‘immediateCondition’
[10:25:36.523]  - exclude = 
[10:25:36.523]  - resignal = FALSE
[10:25:36.523]  - Number of conditions: 1
[10:25:36.523] signalConditions() ... done
[10:25:36.523] - Launch lazy future ... done
[10:25:36.523] run() for ‘SequentialFuture’ ... done
[10:25:36.523] signalConditions() ...
[10:25:36.523]  - include = ‘immediateCondition’
[10:25:36.523]  - exclude = 
[10:25:36.524]  - resignal = FALSE
[10:25:36.524]  - Number of conditions: 1
[10:25:36.524] signalConditions() ... done
[10:25:36.524] Future state: ‘finished’
[10:25:36.524] signalConditions() ...
[10:25:36.524]  - include = ‘condition’
[10:25:36.524]  - exclude = ‘immediateCondition’
[10:25:36.524]  - resignal = TRUE
[10:25:36.524]  - Number of conditions: 1
[10:25:36.524]  - Condition #1: ‘simpleError’, ‘error’, ‘condition’
[10:25:36.525] signalConditions() ... done
[10:25:36.525] getGlobalsAndPackages() ...
[10:25:36.525] Searching for globals...
[10:25:36.527] - globals found: [6] ‘{’, ‘if’, ‘==’, ‘%%’, ‘ii’, ‘stop’
[10:25:36.527] Searching for globals ... DONE
[10:25:36.528] Resolving globals: FALSE
[10:25:36.528] The total size of the 1 globals is 56 bytes (56 bytes)
[10:25:36.528] The total size of the 1 globals exported for future expression (‘{; if (ii%%2 == 0); stop("Woops!"); ii; }’) is 56 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘ii’ (56 bytes of class ‘numeric’)
[10:25:36.528] - globals: [1] ‘ii’
[10:25:36.529] 
[10:25:36.529] getGlobalsAndPackages() ... DONE
[10:25:36.529] run() for ‘Future’ ...
[10:25:36.529] - state: ‘created’
[10:25:36.529] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:25:36.529] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[10:25:36.529] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[10:25:36.530]   - Field: ‘label’
[10:25:36.530]   - Field: ‘local’
[10:25:36.530]   - Field: ‘owner’
[10:25:36.530]   - Field: ‘envir’
[10:25:36.530]   - Field: ‘packages’
[10:25:36.530]   - Field: ‘gc’
[10:25:36.530]   - Field: ‘conditions’
[10:25:36.530]   - Field: ‘expr’
[10:25:36.530]   - Field: ‘uuid’
[10:25:36.530]   - Field: ‘seed’
[10:25:36.531]   - Field: ‘version’
[10:25:36.531]   - Field: ‘result’
[10:25:36.531]   - Field: ‘asynchronous’
[10:25:36.531]   - Field: ‘calls’
[10:25:36.531]   - Field: ‘globals’
[10:25:36.531]   - Field: ‘stdout’
[10:25:36.531]   - Field: ‘earlySignal’
[10:25:36.531]   - Field: ‘lazy’
[10:25:36.531]   - Field: ‘state’
[10:25:36.531] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[10:25:36.531] - Launch lazy future ...
[10:25:36.532] Packages needed by the future expression (n = 0): <none>
[10:25:36.532] Packages needed by future strategies (n = 0): <none>
[10:25:36.532] {
[10:25:36.532]     {
[10:25:36.532]         {
[10:25:36.532]             ...future.startTime <- base::Sys.time()
[10:25:36.532]             {
[10:25:36.532]                 {
[10:25:36.532]                   {
[10:25:36.532]                     base::local({
[10:25:36.532]                       has_future <- base::requireNamespace("future", 
[10:25:36.532]                         quietly = TRUE)
[10:25:36.532]                       if (has_future) {
[10:25:36.532]                         ns <- base::getNamespace("future")
[10:25:36.532]                         version <- ns[[".package"]][["version"]]
[10:25:36.532]                         if (is.null(version)) 
[10:25:36.532]                           version <- utils::packageVersion("future")
[10:25:36.532]                       }
[10:25:36.532]                       else {
[10:25:36.532]                         version <- NULL
[10:25:36.532]                       }
[10:25:36.532]                       if (!has_future || version < "1.8.0") {
[10:25:36.532]                         info <- base::c(r_version = base::gsub("R version ", 
[10:25:36.532]                           "", base::R.version$version.string), 
[10:25:36.532]                           platform = base::sprintf("%s (%s-bit)", 
[10:25:36.532]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:25:36.532]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[10:25:36.532]                             "release", "version")], collapse = " "), 
[10:25:36.532]                           hostname = base::Sys.info()[["nodename"]])
[10:25:36.532]                         info <- base::sprintf("%s: %s", base::names(info), 
[10:25:36.532]                           info)
[10:25:36.532]                         info <- base::paste(info, collapse = "; ")
[10:25:36.532]                         if (!has_future) {
[10:25:36.532]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:25:36.532]                             info)
[10:25:36.532]                         }
[10:25:36.532]                         else {
[10:25:36.532]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:25:36.532]                             info, version)
[10:25:36.532]                         }
[10:25:36.532]                         base::stop(msg)
[10:25:36.532]                       }
[10:25:36.532]                     })
[10:25:36.532]                   }
[10:25:36.532]                   options(future.plan = NULL)
[10:25:36.532]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:25:36.532]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:25:36.532]                 }
[10:25:36.532]                 ...future.workdir <- getwd()
[10:25:36.532]             }
[10:25:36.532]             ...future.oldOptions <- base::as.list(base::.Options)
[10:25:36.532]             ...future.oldEnvVars <- base::Sys.getenv()
[10:25:36.532]         }
[10:25:36.532]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:25:36.532]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[10:25:36.532]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:25:36.532]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:25:36.532]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:25:36.532]             future.stdout.windows.reencode = NULL, width = 80L)
[10:25:36.532]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:25:36.532]             base::names(...future.oldOptions))
[10:25:36.532]     }
[10:25:36.532]     if (FALSE) {
[10:25:36.532]     }
[10:25:36.532]     else {
[10:25:36.532]         if (TRUE) {
[10:25:36.532]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:25:36.532]                 open = "w")
[10:25:36.532]         }
[10:25:36.532]         else {
[10:25:36.532]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:25:36.532]                 windows = "NUL", "/dev/null"), open = "w")
[10:25:36.532]         }
[10:25:36.532]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:25:36.532]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:25:36.532]             base::sink(type = "output", split = FALSE)
[10:25:36.532]             base::close(...future.stdout)
[10:25:36.532]         }, add = TRUE)
[10:25:36.532]     }
[10:25:36.532]     ...future.frame <- base::sys.nframe()
[10:25:36.532]     ...future.conditions <- base::list()
[10:25:36.532]     ...future.rng <- base::globalenv()$.Random.seed
[10:25:36.532]     if (FALSE) {
[10:25:36.532]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:25:36.532]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:25:36.532]     }
[10:25:36.532]     ...future.result <- base::tryCatch({
[10:25:36.532]         base::withCallingHandlers({
[10:25:36.532]             ...future.value <- base::withVisible(base::local({
[10:25:36.532]                 if (ii%%2 == 0) 
[10:25:36.532]                   stop("Woops!")
[10:25:36.532]                 ii
[10:25:36.532]             }))
[10:25:36.532]             future::FutureResult(value = ...future.value$value, 
[10:25:36.532]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:25:36.532]                   ...future.rng), globalenv = if (FALSE) 
[10:25:36.532]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:25:36.532]                     ...future.globalenv.names))
[10:25:36.532]                 else NULL, started = ...future.startTime, version = "1.8")
[10:25:36.532]         }, condition = base::local({
[10:25:36.532]             c <- base::c
[10:25:36.532]             inherits <- base::inherits
[10:25:36.532]             invokeRestart <- base::invokeRestart
[10:25:36.532]             length <- base::length
[10:25:36.532]             list <- base::list
[10:25:36.532]             seq.int <- base::seq.int
[10:25:36.532]             signalCondition <- base::signalCondition
[10:25:36.532]             sys.calls <- base::sys.calls
[10:25:36.532]             `[[` <- base::`[[`
[10:25:36.532]             `+` <- base::`+`
[10:25:36.532]             `<<-` <- base::`<<-`
[10:25:36.532]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:25:36.532]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:25:36.532]                   3L)]
[10:25:36.532]             }
[10:25:36.532]             function(cond) {
[10:25:36.532]                 is_error <- inherits(cond, "error")
[10:25:36.532]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:25:36.532]                   NULL)
[10:25:36.532]                 if (is_error) {
[10:25:36.532]                   sessionInformation <- function() {
[10:25:36.532]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:25:36.532]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:25:36.532]                       search = base::search(), system = base::Sys.info())
[10:25:36.532]                   }
[10:25:36.532]                   ...future.conditions[[length(...future.conditions) + 
[10:25:36.532]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:25:36.532]                     cond$call), session = sessionInformation(), 
[10:25:36.532]                     timestamp = base::Sys.time(), signaled = 0L)
[10:25:36.532]                   signalCondition(cond)
[10:25:36.532]                 }
[10:25:36.532]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:25:36.532]                 "immediateCondition"))) {
[10:25:36.532]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:25:36.532]                   ...future.conditions[[length(...future.conditions) + 
[10:25:36.532]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:25:36.532]                   if (TRUE && !signal) {
[10:25:36.532]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:25:36.532]                     {
[10:25:36.532]                       inherits <- base::inherits
[10:25:36.532]                       invokeRestart <- base::invokeRestart
[10:25:36.532]                       is.null <- base::is.null
[10:25:36.532]                       muffled <- FALSE
[10:25:36.532]                       if (inherits(cond, "message")) {
[10:25:36.532]                         muffled <- grepl(pattern, "muffleMessage")
[10:25:36.532]                         if (muffled) 
[10:25:36.532]                           invokeRestart("muffleMessage")
[10:25:36.532]                       }
[10:25:36.532]                       else if (inherits(cond, "warning")) {
[10:25:36.532]                         muffled <- grepl(pattern, "muffleWarning")
[10:25:36.532]                         if (muffled) 
[10:25:36.532]                           invokeRestart("muffleWarning")
[10:25:36.532]                       }
[10:25:36.532]                       else if (inherits(cond, "condition")) {
[10:25:36.532]                         if (!is.null(pattern)) {
[10:25:36.532]                           computeRestarts <- base::computeRestarts
[10:25:36.532]                           grepl <- base::grepl
[10:25:36.532]                           restarts <- computeRestarts(cond)
[10:25:36.532]                           for (restart in restarts) {
[10:25:36.532]                             name <- restart$name
[10:25:36.532]                             if (is.null(name)) 
[10:25:36.532]                               next
[10:25:36.532]                             if (!grepl(pattern, name)) 
[10:25:36.532]                               next
[10:25:36.532]                             invokeRestart(restart)
[10:25:36.532]                             muffled <- TRUE
[10:25:36.532]                             break
[10:25:36.532]                           }
[10:25:36.532]                         }
[10:25:36.532]                       }
[10:25:36.532]                       invisible(muffled)
[10:25:36.532]                     }
[10:25:36.532]                     muffleCondition(cond, pattern = "^muffle")
[10:25:36.532]                   }
[10:25:36.532]                 }
[10:25:36.532]                 else {
[10:25:36.532]                   if (TRUE) {
[10:25:36.532]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:25:36.532]                     {
[10:25:36.532]                       inherits <- base::inherits
[10:25:36.532]                       invokeRestart <- base::invokeRestart
[10:25:36.532]                       is.null <- base::is.null
[10:25:36.532]                       muffled <- FALSE
[10:25:36.532]                       if (inherits(cond, "message")) {
[10:25:36.532]                         muffled <- grepl(pattern, "muffleMessage")
[10:25:36.532]                         if (muffled) 
[10:25:36.532]                           invokeRestart("muffleMessage")
[10:25:36.532]                       }
[10:25:36.532]                       else if (inherits(cond, "warning")) {
[10:25:36.532]                         muffled <- grepl(pattern, "muffleWarning")
[10:25:36.532]                         if (muffled) 
[10:25:36.532]                           invokeRestart("muffleWarning")
[10:25:36.532]                       }
[10:25:36.532]                       else if (inherits(cond, "condition")) {
[10:25:36.532]                         if (!is.null(pattern)) {
[10:25:36.532]                           computeRestarts <- base::computeRestarts
[10:25:36.532]                           grepl <- base::grepl
[10:25:36.532]                           restarts <- computeRestarts(cond)
[10:25:36.532]                           for (restart in restarts) {
[10:25:36.532]                             name <- restart$name
[10:25:36.532]                             if (is.null(name)) 
[10:25:36.532]                               next
[10:25:36.532]                             if (!grepl(pattern, name)) 
[10:25:36.532]                               next
[10:25:36.532]                             invokeRestart(restart)
[10:25:36.532]                             muffled <- TRUE
[10:25:36.532]                             break
[10:25:36.532]                           }
[10:25:36.532]                         }
[10:25:36.532]                       }
[10:25:36.532]                       invisible(muffled)
[10:25:36.532]                     }
[10:25:36.532]                     muffleCondition(cond, pattern = "^muffle")
[10:25:36.532]                   }
[10:25:36.532]                 }
[10:25:36.532]             }
[10:25:36.532]         }))
[10:25:36.532]     }, error = function(ex) {
[10:25:36.532]         base::structure(base::list(value = NULL, visible = NULL, 
[10:25:36.532]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:25:36.532]                 ...future.rng), started = ...future.startTime, 
[10:25:36.532]             finished = Sys.time(), session_uuid = NA_character_, 
[10:25:36.532]             version = "1.8"), class = "FutureResult")
[10:25:36.532]     }, finally = {
[10:25:36.532]         if (!identical(...future.workdir, getwd())) 
[10:25:36.532]             setwd(...future.workdir)
[10:25:36.532]         {
[10:25:36.532]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:25:36.532]                 ...future.oldOptions$nwarnings <- NULL
[10:25:36.532]             }
[10:25:36.532]             base::options(...future.oldOptions)
[10:25:36.532]             if (.Platform$OS.type == "windows") {
[10:25:36.532]                 old_names <- names(...future.oldEnvVars)
[10:25:36.532]                 envs <- base::Sys.getenv()
[10:25:36.532]                 names <- names(envs)
[10:25:36.532]                 common <- intersect(names, old_names)
[10:25:36.532]                 added <- setdiff(names, old_names)
[10:25:36.532]                 removed <- setdiff(old_names, names)
[10:25:36.532]                 changed <- common[...future.oldEnvVars[common] != 
[10:25:36.532]                   envs[common]]
[10:25:36.532]                 NAMES <- toupper(changed)
[10:25:36.532]                 args <- list()
[10:25:36.532]                 for (kk in seq_along(NAMES)) {
[10:25:36.532]                   name <- changed[[kk]]
[10:25:36.532]                   NAME <- NAMES[[kk]]
[10:25:36.532]                   if (name != NAME && is.element(NAME, old_names)) 
[10:25:36.532]                     next
[10:25:36.532]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:25:36.532]                 }
[10:25:36.532]                 NAMES <- toupper(added)
[10:25:36.532]                 for (kk in seq_along(NAMES)) {
[10:25:36.532]                   name <- added[[kk]]
[10:25:36.532]                   NAME <- NAMES[[kk]]
[10:25:36.532]                   if (name != NAME && is.element(NAME, old_names)) 
[10:25:36.532]                     next
[10:25:36.532]                   args[[name]] <- ""
[10:25:36.532]                 }
[10:25:36.532]                 NAMES <- toupper(removed)
[10:25:36.532]                 for (kk in seq_along(NAMES)) {
[10:25:36.532]                   name <- removed[[kk]]
[10:25:36.532]                   NAME <- NAMES[[kk]]
[10:25:36.532]                   if (name != NAME && is.element(NAME, old_names)) 
[10:25:36.532]                     next
[10:25:36.532]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:25:36.532]                 }
[10:25:36.532]                 if (length(args) > 0) 
[10:25:36.532]                   base::do.call(base::Sys.setenv, args = args)
[10:25:36.532]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:25:36.532]             }
[10:25:36.532]             else {
[10:25:36.532]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:25:36.532]             }
[10:25:36.532]             {
[10:25:36.532]                 if (base::length(...future.futureOptionsAdded) > 
[10:25:36.532]                   0L) {
[10:25:36.532]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:25:36.532]                   base::names(opts) <- ...future.futureOptionsAdded
[10:25:36.532]                   base::options(opts)
[10:25:36.532]                 }
[10:25:36.532]                 {
[10:25:36.532]                   {
[10:25:36.532]                     NULL
[10:25:36.532]                     RNGkind("Mersenne-Twister")
[10:25:36.532]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[10:25:36.532]                       inherits = FALSE)
[10:25:36.532]                   }
[10:25:36.532]                   options(future.plan = NULL)
[10:25:36.532]                   if (is.na(NA_character_)) 
[10:25:36.532]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:25:36.532]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:25:36.532]                   future::plan(list(function (..., envir = parent.frame()) 
[10:25:36.532]                   {
[10:25:36.532]                     future <- SequentialFuture(..., envir = envir)
[10:25:36.532]                     if (!future$lazy) 
[10:25:36.532]                       future <- run(future)
[10:25:36.532]                     invisible(future)
[10:25:36.532]                   }), .cleanup = FALSE, .init = FALSE)
[10:25:36.532]                 }
[10:25:36.532]             }
[10:25:36.532]         }
[10:25:36.532]     })
[10:25:36.532]     if (TRUE) {
[10:25:36.532]         base::sink(type = "output", split = FALSE)
[10:25:36.532]         if (TRUE) {
[10:25:36.532]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:25:36.532]         }
[10:25:36.532]         else {
[10:25:36.532]             ...future.result["stdout"] <- base::list(NULL)
[10:25:36.532]         }
[10:25:36.532]         base::close(...future.stdout)
[10:25:36.532]         ...future.stdout <- NULL
[10:25:36.532]     }
[10:25:36.532]     ...future.result$conditions <- ...future.conditions
[10:25:36.532]     ...future.result$finished <- base::Sys.time()
[10:25:36.532]     ...future.result
[10:25:36.532] }
[10:25:36.534] assign_globals() ...
[10:25:36.534] List of 1
[10:25:36.534]  $ ii: int 1
[10:25:36.534]  - attr(*, "where")=List of 1
[10:25:36.534]   ..$ ii:<environment: R_EmptyEnv> 
[10:25:36.534]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:25:36.534]  - attr(*, "resolved")= logi FALSE
[10:25:36.534]  - attr(*, "total_size")= num 56
[10:25:36.534]  - attr(*, "already-done")= logi TRUE
[10:25:36.538] - copied ‘ii’ to environment
[10:25:36.538] assign_globals() ... done
[10:25:36.538] plan(): Setting new future strategy stack:
[10:25:36.538] List of future strategies:
[10:25:36.538] 1. sequential:
[10:25:36.538]    - args: function (..., envir = parent.frame())
[10:25:36.538]    - tweaked: FALSE
[10:25:36.538]    - call: NULL
[10:25:36.539] plan(): nbrOfWorkers() = 1
[10:25:36.539] plan(): Setting new future strategy stack:
[10:25:36.540] List of future strategies:
[10:25:36.540] 1. sequential:
[10:25:36.540]    - args: function (..., envir = parent.frame())
[10:25:36.540]    - tweaked: FALSE
[10:25:36.540]    - call: plan(strategy)
[10:25:36.540] plan(): nbrOfWorkers() = 1
[10:25:36.540] SequentialFuture started (and completed)
[10:25:36.540] - Launch lazy future ... done
[10:25:36.540] run() for ‘SequentialFuture’ ... done
[10:25:36.541] getGlobalsAndPackages() ...
[10:25:36.541] Searching for globals...
[10:25:36.542] - globals found: [6] ‘{’, ‘if’, ‘==’, ‘%%’, ‘ii’, ‘stop’
[10:25:36.542] Searching for globals ... DONE
[10:25:36.542] Resolving globals: FALSE
[10:25:36.543] The total size of the 1 globals is 56 bytes (56 bytes)
[10:25:36.543] The total size of the 1 globals exported for future expression (‘{; if (ii%%2 == 0); stop("Woops!"); ii; }’) is 56 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘ii’ (56 bytes of class ‘numeric’)
[10:25:36.543] - globals: [1] ‘ii’
[10:25:36.543] 
[10:25:36.543] getGlobalsAndPackages() ... DONE
[10:25:36.544] run() for ‘Future’ ...
[10:25:36.544] - state: ‘created’
[10:25:36.544] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:25:36.544] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[10:25:36.544] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[10:25:36.544]   - Field: ‘label’
[10:25:36.544]   - Field: ‘local’
[10:25:36.545]   - Field: ‘owner’
[10:25:36.545]   - Field: ‘envir’
[10:25:36.545]   - Field: ‘packages’
[10:25:36.545]   - Field: ‘gc’
[10:25:36.545]   - Field: ‘conditions’
[10:25:36.545]   - Field: ‘expr’
[10:25:36.545]   - Field: ‘uuid’
[10:25:36.545]   - Field: ‘seed’
[10:25:36.545]   - Field: ‘version’
[10:25:36.545]   - Field: ‘result’
[10:25:36.546]   - Field: ‘asynchronous’
[10:25:36.546]   - Field: ‘calls’
[10:25:36.546]   - Field: ‘globals’
[10:25:36.546]   - Field: ‘stdout’
[10:25:36.546]   - Field: ‘earlySignal’
[10:25:36.546]   - Field: ‘lazy’
[10:25:36.546]   - Field: ‘state’
[10:25:36.546] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[10:25:36.546] - Launch lazy future ...
[10:25:36.546] Packages needed by the future expression (n = 0): <none>
[10:25:36.547] Packages needed by future strategies (n = 0): <none>
[10:25:36.547] {
[10:25:36.547]     {
[10:25:36.547]         {
[10:25:36.547]             ...future.startTime <- base::Sys.time()
[10:25:36.547]             {
[10:25:36.547]                 {
[10:25:36.547]                   {
[10:25:36.547]                     base::local({
[10:25:36.547]                       has_future <- base::requireNamespace("future", 
[10:25:36.547]                         quietly = TRUE)
[10:25:36.547]                       if (has_future) {
[10:25:36.547]                         ns <- base::getNamespace("future")
[10:25:36.547]                         version <- ns[[".package"]][["version"]]
[10:25:36.547]                         if (is.null(version)) 
[10:25:36.547]                           version <- utils::packageVersion("future")
[10:25:36.547]                       }
[10:25:36.547]                       else {
[10:25:36.547]                         version <- NULL
[10:25:36.547]                       }
[10:25:36.547]                       if (!has_future || version < "1.8.0") {
[10:25:36.547]                         info <- base::c(r_version = base::gsub("R version ", 
[10:25:36.547]                           "", base::R.version$version.string), 
[10:25:36.547]                           platform = base::sprintf("%s (%s-bit)", 
[10:25:36.547]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:25:36.547]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[10:25:36.547]                             "release", "version")], collapse = " "), 
[10:25:36.547]                           hostname = base::Sys.info()[["nodename"]])
[10:25:36.547]                         info <- base::sprintf("%s: %s", base::names(info), 
[10:25:36.547]                           info)
[10:25:36.547]                         info <- base::paste(info, collapse = "; ")
[10:25:36.547]                         if (!has_future) {
[10:25:36.547]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:25:36.547]                             info)
[10:25:36.547]                         }
[10:25:36.547]                         else {
[10:25:36.547]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:25:36.547]                             info, version)
[10:25:36.547]                         }
[10:25:36.547]                         base::stop(msg)
[10:25:36.547]                       }
[10:25:36.547]                     })
[10:25:36.547]                   }
[10:25:36.547]                   options(future.plan = NULL)
[10:25:36.547]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:25:36.547]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:25:36.547]                 }
[10:25:36.547]                 ...future.workdir <- getwd()
[10:25:36.547]             }
[10:25:36.547]             ...future.oldOptions <- base::as.list(base::.Options)
[10:25:36.547]             ...future.oldEnvVars <- base::Sys.getenv()
[10:25:36.547]         }
[10:25:36.547]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:25:36.547]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[10:25:36.547]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:25:36.547]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:25:36.547]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:25:36.547]             future.stdout.windows.reencode = NULL, width = 80L)
[10:25:36.547]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:25:36.547]             base::names(...future.oldOptions))
[10:25:36.547]     }
[10:25:36.547]     if (FALSE) {
[10:25:36.547]     }
[10:25:36.547]     else {
[10:25:36.547]         if (TRUE) {
[10:25:36.547]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:25:36.547]                 open = "w")
[10:25:36.547]         }
[10:25:36.547]         else {
[10:25:36.547]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:25:36.547]                 windows = "NUL", "/dev/null"), open = "w")
[10:25:36.547]         }
[10:25:36.547]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:25:36.547]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:25:36.547]             base::sink(type = "output", split = FALSE)
[10:25:36.547]             base::close(...future.stdout)
[10:25:36.547]         }, add = TRUE)
[10:25:36.547]     }
[10:25:36.547]     ...future.frame <- base::sys.nframe()
[10:25:36.547]     ...future.conditions <- base::list()
[10:25:36.547]     ...future.rng <- base::globalenv()$.Random.seed
[10:25:36.547]     if (FALSE) {
[10:25:36.547]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:25:36.547]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:25:36.547]     }
[10:25:36.547]     ...future.result <- base::tryCatch({
[10:25:36.547]         base::withCallingHandlers({
[10:25:36.547]             ...future.value <- base::withVisible(base::local({
[10:25:36.547]                 if (ii%%2 == 0) 
[10:25:36.547]                   stop("Woops!")
[10:25:36.547]                 ii
[10:25:36.547]             }))
[10:25:36.547]             future::FutureResult(value = ...future.value$value, 
[10:25:36.547]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:25:36.547]                   ...future.rng), globalenv = if (FALSE) 
[10:25:36.547]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:25:36.547]                     ...future.globalenv.names))
[10:25:36.547]                 else NULL, started = ...future.startTime, version = "1.8")
[10:25:36.547]         }, condition = base::local({
[10:25:36.547]             c <- base::c
[10:25:36.547]             inherits <- base::inherits
[10:25:36.547]             invokeRestart <- base::invokeRestart
[10:25:36.547]             length <- base::length
[10:25:36.547]             list <- base::list
[10:25:36.547]             seq.int <- base::seq.int
[10:25:36.547]             signalCondition <- base::signalCondition
[10:25:36.547]             sys.calls <- base::sys.calls
[10:25:36.547]             `[[` <- base::`[[`
[10:25:36.547]             `+` <- base::`+`
[10:25:36.547]             `<<-` <- base::`<<-`
[10:25:36.547]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:25:36.547]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:25:36.547]                   3L)]
[10:25:36.547]             }
[10:25:36.547]             function(cond) {
[10:25:36.547]                 is_error <- inherits(cond, "error")
[10:25:36.547]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:25:36.547]                   NULL)
[10:25:36.547]                 if (is_error) {
[10:25:36.547]                   sessionInformation <- function() {
[10:25:36.547]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:25:36.547]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:25:36.547]                       search = base::search(), system = base::Sys.info())
[10:25:36.547]                   }
[10:25:36.547]                   ...future.conditions[[length(...future.conditions) + 
[10:25:36.547]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:25:36.547]                     cond$call), session = sessionInformation(), 
[10:25:36.547]                     timestamp = base::Sys.time(), signaled = 0L)
[10:25:36.547]                   signalCondition(cond)
[10:25:36.547]                 }
[10:25:36.547]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:25:36.547]                 "immediateCondition"))) {
[10:25:36.547]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:25:36.547]                   ...future.conditions[[length(...future.conditions) + 
[10:25:36.547]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:25:36.547]                   if (TRUE && !signal) {
[10:25:36.547]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:25:36.547]                     {
[10:25:36.547]                       inherits <- base::inherits
[10:25:36.547]                       invokeRestart <- base::invokeRestart
[10:25:36.547]                       is.null <- base::is.null
[10:25:36.547]                       muffled <- FALSE
[10:25:36.547]                       if (inherits(cond, "message")) {
[10:25:36.547]                         muffled <- grepl(pattern, "muffleMessage")
[10:25:36.547]                         if (muffled) 
[10:25:36.547]                           invokeRestart("muffleMessage")
[10:25:36.547]                       }
[10:25:36.547]                       else if (inherits(cond, "warning")) {
[10:25:36.547]                         muffled <- grepl(pattern, "muffleWarning")
[10:25:36.547]                         if (muffled) 
[10:25:36.547]                           invokeRestart("muffleWarning")
[10:25:36.547]                       }
[10:25:36.547]                       else if (inherits(cond, "condition")) {
[10:25:36.547]                         if (!is.null(pattern)) {
[10:25:36.547]                           computeRestarts <- base::computeRestarts
[10:25:36.547]                           grepl <- base::grepl
[10:25:36.547]                           restarts <- computeRestarts(cond)
[10:25:36.547]                           for (restart in restarts) {
[10:25:36.547]                             name <- restart$name
[10:25:36.547]                             if (is.null(name)) 
[10:25:36.547]                               next
[10:25:36.547]                             if (!grepl(pattern, name)) 
[10:25:36.547]                               next
[10:25:36.547]                             invokeRestart(restart)
[10:25:36.547]                             muffled <- TRUE
[10:25:36.547]                             break
[10:25:36.547]                           }
[10:25:36.547]                         }
[10:25:36.547]                       }
[10:25:36.547]                       invisible(muffled)
[10:25:36.547]                     }
[10:25:36.547]                     muffleCondition(cond, pattern = "^muffle")
[10:25:36.547]                   }
[10:25:36.547]                 }
[10:25:36.547]                 else {
[10:25:36.547]                   if (TRUE) {
[10:25:36.547]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:25:36.547]                     {
[10:25:36.547]                       inherits <- base::inherits
[10:25:36.547]                       invokeRestart <- base::invokeRestart
[10:25:36.547]                       is.null <- base::is.null
[10:25:36.547]                       muffled <- FALSE
[10:25:36.547]                       if (inherits(cond, "message")) {
[10:25:36.547]                         muffled <- grepl(pattern, "muffleMessage")
[10:25:36.547]                         if (muffled) 
[10:25:36.547]                           invokeRestart("muffleMessage")
[10:25:36.547]                       }
[10:25:36.547]                       else if (inherits(cond, "warning")) {
[10:25:36.547]                         muffled <- grepl(pattern, "muffleWarning")
[10:25:36.547]                         if (muffled) 
[10:25:36.547]                           invokeRestart("muffleWarning")
[10:25:36.547]                       }
[10:25:36.547]                       else if (inherits(cond, "condition")) {
[10:25:36.547]                         if (!is.null(pattern)) {
[10:25:36.547]                           computeRestarts <- base::computeRestarts
[10:25:36.547]                           grepl <- base::grepl
[10:25:36.547]                           restarts <- computeRestarts(cond)
[10:25:36.547]                           for (restart in restarts) {
[10:25:36.547]                             name <- restart$name
[10:25:36.547]                             if (is.null(name)) 
[10:25:36.547]                               next
[10:25:36.547]                             if (!grepl(pattern, name)) 
[10:25:36.547]                               next
[10:25:36.547]                             invokeRestart(restart)
[10:25:36.547]                             muffled <- TRUE
[10:25:36.547]                             break
[10:25:36.547]                           }
[10:25:36.547]                         }
[10:25:36.547]                       }
[10:25:36.547]                       invisible(muffled)
[10:25:36.547]                     }
[10:25:36.547]                     muffleCondition(cond, pattern = "^muffle")
[10:25:36.547]                   }
[10:25:36.547]                 }
[10:25:36.547]             }
[10:25:36.547]         }))
[10:25:36.547]     }, error = function(ex) {
[10:25:36.547]         base::structure(base::list(value = NULL, visible = NULL, 
[10:25:36.547]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:25:36.547]                 ...future.rng), started = ...future.startTime, 
[10:25:36.547]             finished = Sys.time(), session_uuid = NA_character_, 
[10:25:36.547]             version = "1.8"), class = "FutureResult")
[10:25:36.547]     }, finally = {
[10:25:36.547]         if (!identical(...future.workdir, getwd())) 
[10:25:36.547]             setwd(...future.workdir)
[10:25:36.547]         {
[10:25:36.547]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:25:36.547]                 ...future.oldOptions$nwarnings <- NULL
[10:25:36.547]             }
[10:25:36.547]             base::options(...future.oldOptions)
[10:25:36.547]             if (.Platform$OS.type == "windows") {
[10:25:36.547]                 old_names <- names(...future.oldEnvVars)
[10:25:36.547]                 envs <- base::Sys.getenv()
[10:25:36.547]                 names <- names(envs)
[10:25:36.547]                 common <- intersect(names, old_names)
[10:25:36.547]                 added <- setdiff(names, old_names)
[10:25:36.547]                 removed <- setdiff(old_names, names)
[10:25:36.547]                 changed <- common[...future.oldEnvVars[common] != 
[10:25:36.547]                   envs[common]]
[10:25:36.547]                 NAMES <- toupper(changed)
[10:25:36.547]                 args <- list()
[10:25:36.547]                 for (kk in seq_along(NAMES)) {
[10:25:36.547]                   name <- changed[[kk]]
[10:25:36.547]                   NAME <- NAMES[[kk]]
[10:25:36.547]                   if (name != NAME && is.element(NAME, old_names)) 
[10:25:36.547]                     next
[10:25:36.547]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:25:36.547]                 }
[10:25:36.547]                 NAMES <- toupper(added)
[10:25:36.547]                 for (kk in seq_along(NAMES)) {
[10:25:36.547]                   name <- added[[kk]]
[10:25:36.547]                   NAME <- NAMES[[kk]]
[10:25:36.547]                   if (name != NAME && is.element(NAME, old_names)) 
[10:25:36.547]                     next
[10:25:36.547]                   args[[name]] <- ""
[10:25:36.547]                 }
[10:25:36.547]                 NAMES <- toupper(removed)
[10:25:36.547]                 for (kk in seq_along(NAMES)) {
[10:25:36.547]                   name <- removed[[kk]]
[10:25:36.547]                   NAME <- NAMES[[kk]]
[10:25:36.547]                   if (name != NAME && is.element(NAME, old_names)) 
[10:25:36.547]                     next
[10:25:36.547]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:25:36.547]                 }
[10:25:36.547]                 if (length(args) > 0) 
[10:25:36.547]                   base::do.call(base::Sys.setenv, args = args)
[10:25:36.547]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:25:36.547]             }
[10:25:36.547]             else {
[10:25:36.547]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:25:36.547]             }
[10:25:36.547]             {
[10:25:36.547]                 if (base::length(...future.futureOptionsAdded) > 
[10:25:36.547]                   0L) {
[10:25:36.547]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:25:36.547]                   base::names(opts) <- ...future.futureOptionsAdded
[10:25:36.547]                   base::options(opts)
[10:25:36.547]                 }
[10:25:36.547]                 {
[10:25:36.547]                   {
[10:25:36.547]                     NULL
[10:25:36.547]                     RNGkind("Mersenne-Twister")
[10:25:36.547]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[10:25:36.547]                       inherits = FALSE)
[10:25:36.547]                   }
[10:25:36.547]                   options(future.plan = NULL)
[10:25:36.547]                   if (is.na(NA_character_)) 
[10:25:36.547]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:25:36.547]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:25:36.547]                   future::plan(list(function (..., envir = parent.frame()) 
[10:25:36.547]                   {
[10:25:36.547]                     future <- SequentialFuture(..., envir = envir)
[10:25:36.547]                     if (!future$lazy) 
[10:25:36.547]                       future <- run(future)
[10:25:36.547]                     invisible(future)
[10:25:36.547]                   }), .cleanup = FALSE, .init = FALSE)
[10:25:36.547]                 }
[10:25:36.547]             }
[10:25:36.547]         }
[10:25:36.547]     })
[10:25:36.547]     if (TRUE) {
[10:25:36.547]         base::sink(type = "output", split = FALSE)
[10:25:36.547]         if (TRUE) {
[10:25:36.547]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:25:36.547]         }
[10:25:36.547]         else {
[10:25:36.547]             ...future.result["stdout"] <- base::list(NULL)
[10:25:36.547]         }
[10:25:36.547]         base::close(...future.stdout)
[10:25:36.547]         ...future.stdout <- NULL
[10:25:36.547]     }
[10:25:36.547]     ...future.result$conditions <- ...future.conditions
[10:25:36.547]     ...future.result$finished <- base::Sys.time()
[10:25:36.547]     ...future.result
[10:25:36.547] }
[10:25:36.549] assign_globals() ...
[10:25:36.549] List of 1
[10:25:36.549]  $ ii: int 2
[10:25:36.549]  - attr(*, "where")=List of 1
[10:25:36.549]   ..$ ii:<environment: R_EmptyEnv> 
[10:25:36.549]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:25:36.549]  - attr(*, "resolved")= logi FALSE
[10:25:36.549]  - attr(*, "total_size")= num 56
[10:25:36.549]  - attr(*, "already-done")= logi TRUE
[10:25:36.551] - copied ‘ii’ to environment
[10:25:36.551] assign_globals() ... done
[10:25:36.551] plan(): Setting new future strategy stack:
[10:25:36.551] List of future strategies:
[10:25:36.551] 1. sequential:
[10:25:36.551]    - args: function (..., envir = parent.frame())
[10:25:36.551]    - tweaked: FALSE
[10:25:36.551]    - call: NULL
[10:25:36.552] plan(): nbrOfWorkers() = 1
[10:25:36.553] plan(): Setting new future strategy stack:
[10:25:36.553] List of future strategies:
[10:25:36.553] 1. sequential:
[10:25:36.553]    - args: function (..., envir = parent.frame())
[10:25:36.553]    - tweaked: FALSE
[10:25:36.553]    - call: plan(strategy)
[10:25:36.553] plan(): nbrOfWorkers() = 1
[10:25:36.553] SequentialFuture started (and completed)
[10:25:36.553] signalConditions() ...
[10:25:36.553]  - include = ‘immediateCondition’
[10:25:36.554]  - exclude = 
[10:25:36.554]  - resignal = FALSE
[10:25:36.554]  - Number of conditions: 1
[10:25:36.554] signalConditions() ... done
[10:25:36.554] - Launch lazy future ... done
[10:25:36.554] run() for ‘SequentialFuture’ ... done
[10:25:36.554] getGlobalsAndPackages() ...
[10:25:36.554] Searching for globals...
[10:25:36.556] - globals found: [6] ‘{’, ‘if’, ‘==’, ‘%%’, ‘ii’, ‘stop’
[10:25:36.556] Searching for globals ... DONE
[10:25:36.556] Resolving globals: FALSE
[10:25:36.556] The total size of the 1 globals is 56 bytes (56 bytes)
[10:25:36.557] The total size of the 1 globals exported for future expression (‘{; if (ii%%2 == 0); stop("Woops!"); ii; }’) is 56 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘ii’ (56 bytes of class ‘numeric’)
[10:25:36.557] - globals: [1] ‘ii’
[10:25:36.557] 
[10:25:36.557] getGlobalsAndPackages() ... DONE
[10:25:36.557] run() for ‘Future’ ...
[10:25:36.557] - state: ‘created’
[10:25:36.558] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:25:36.558] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[10:25:36.558] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[10:25:36.558]   - Field: ‘label’
[10:25:36.558]   - Field: ‘local’
[10:25:36.558]   - Field: ‘owner’
[10:25:36.558]   - Field: ‘envir’
[10:25:36.558]   - Field: ‘packages’
[10:25:36.558]   - Field: ‘gc’
[10:25:36.559]   - Field: ‘conditions’
[10:25:36.559]   - Field: ‘expr’
[10:25:36.559]   - Field: ‘uuid’
[10:25:36.559]   - Field: ‘seed’
[10:25:36.559]   - Field: ‘version’
[10:25:36.559]   - Field: ‘result’
[10:25:36.559]   - Field: ‘asynchronous’
[10:25:36.559]   - Field: ‘calls’
[10:25:36.559]   - Field: ‘globals’
[10:25:36.559]   - Field: ‘stdout’
[10:25:36.559]   - Field: ‘earlySignal’
[10:25:36.560]   - Field: ‘lazy’
[10:25:36.560]   - Field: ‘state’
[10:25:36.560] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[10:25:36.560] - Launch lazy future ...
[10:25:36.560] Packages needed by the future expression (n = 0): <none>
[10:25:36.560] Packages needed by future strategies (n = 0): <none>
[10:25:36.560] {
[10:25:36.560]     {
[10:25:36.560]         {
[10:25:36.560]             ...future.startTime <- base::Sys.time()
[10:25:36.560]             {
[10:25:36.560]                 {
[10:25:36.560]                   {
[10:25:36.560]                     base::local({
[10:25:36.560]                       has_future <- base::requireNamespace("future", 
[10:25:36.560]                         quietly = TRUE)
[10:25:36.560]                       if (has_future) {
[10:25:36.560]                         ns <- base::getNamespace("future")
[10:25:36.560]                         version <- ns[[".package"]][["version"]]
[10:25:36.560]                         if (is.null(version)) 
[10:25:36.560]                           version <- utils::packageVersion("future")
[10:25:36.560]                       }
[10:25:36.560]                       else {
[10:25:36.560]                         version <- NULL
[10:25:36.560]                       }
[10:25:36.560]                       if (!has_future || version < "1.8.0") {
[10:25:36.560]                         info <- base::c(r_version = base::gsub("R version ", 
[10:25:36.560]                           "", base::R.version$version.string), 
[10:25:36.560]                           platform = base::sprintf("%s (%s-bit)", 
[10:25:36.560]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:25:36.560]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[10:25:36.560]                             "release", "version")], collapse = " "), 
[10:25:36.560]                           hostname = base::Sys.info()[["nodename"]])
[10:25:36.560]                         info <- base::sprintf("%s: %s", base::names(info), 
[10:25:36.560]                           info)
[10:25:36.560]                         info <- base::paste(info, collapse = "; ")
[10:25:36.560]                         if (!has_future) {
[10:25:36.560]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:25:36.560]                             info)
[10:25:36.560]                         }
[10:25:36.560]                         else {
[10:25:36.560]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:25:36.560]                             info, version)
[10:25:36.560]                         }
[10:25:36.560]                         base::stop(msg)
[10:25:36.560]                       }
[10:25:36.560]                     })
[10:25:36.560]                   }
[10:25:36.560]                   options(future.plan = NULL)
[10:25:36.560]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:25:36.560]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:25:36.560]                 }
[10:25:36.560]                 ...future.workdir <- getwd()
[10:25:36.560]             }
[10:25:36.560]             ...future.oldOptions <- base::as.list(base::.Options)
[10:25:36.560]             ...future.oldEnvVars <- base::Sys.getenv()
[10:25:36.560]         }
[10:25:36.560]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:25:36.560]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[10:25:36.560]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:25:36.560]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:25:36.560]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:25:36.560]             future.stdout.windows.reencode = NULL, width = 80L)
[10:25:36.560]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:25:36.560]             base::names(...future.oldOptions))
[10:25:36.560]     }
[10:25:36.560]     if (FALSE) {
[10:25:36.560]     }
[10:25:36.560]     else {
[10:25:36.560]         if (TRUE) {
[10:25:36.560]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:25:36.560]                 open = "w")
[10:25:36.560]         }
[10:25:36.560]         else {
[10:25:36.560]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:25:36.560]                 windows = "NUL", "/dev/null"), open = "w")
[10:25:36.560]         }
[10:25:36.560]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:25:36.560]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:25:36.560]             base::sink(type = "output", split = FALSE)
[10:25:36.560]             base::close(...future.stdout)
[10:25:36.560]         }, add = TRUE)
[10:25:36.560]     }
[10:25:36.560]     ...future.frame <- base::sys.nframe()
[10:25:36.560]     ...future.conditions <- base::list()
[10:25:36.560]     ...future.rng <- base::globalenv()$.Random.seed
[10:25:36.560]     if (FALSE) {
[10:25:36.560]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:25:36.560]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:25:36.560]     }
[10:25:36.560]     ...future.result <- base::tryCatch({
[10:25:36.560]         base::withCallingHandlers({
[10:25:36.560]             ...future.value <- base::withVisible(base::local({
[10:25:36.560]                 if (ii%%2 == 0) 
[10:25:36.560]                   stop("Woops!")
[10:25:36.560]                 ii
[10:25:36.560]             }))
[10:25:36.560]             future::FutureResult(value = ...future.value$value, 
[10:25:36.560]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:25:36.560]                   ...future.rng), globalenv = if (FALSE) 
[10:25:36.560]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:25:36.560]                     ...future.globalenv.names))
[10:25:36.560]                 else NULL, started = ...future.startTime, version = "1.8")
[10:25:36.560]         }, condition = base::local({
[10:25:36.560]             c <- base::c
[10:25:36.560]             inherits <- base::inherits
[10:25:36.560]             invokeRestart <- base::invokeRestart
[10:25:36.560]             length <- base::length
[10:25:36.560]             list <- base::list
[10:25:36.560]             seq.int <- base::seq.int
[10:25:36.560]             signalCondition <- base::signalCondition
[10:25:36.560]             sys.calls <- base::sys.calls
[10:25:36.560]             `[[` <- base::`[[`
[10:25:36.560]             `+` <- base::`+`
[10:25:36.560]             `<<-` <- base::`<<-`
[10:25:36.560]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:25:36.560]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:25:36.560]                   3L)]
[10:25:36.560]             }
[10:25:36.560]             function(cond) {
[10:25:36.560]                 is_error <- inherits(cond, "error")
[10:25:36.560]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:25:36.560]                   NULL)
[10:25:36.560]                 if (is_error) {
[10:25:36.560]                   sessionInformation <- function() {
[10:25:36.560]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:25:36.560]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:25:36.560]                       search = base::search(), system = base::Sys.info())
[10:25:36.560]                   }
[10:25:36.560]                   ...future.conditions[[length(...future.conditions) + 
[10:25:36.560]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:25:36.560]                     cond$call), session = sessionInformation(), 
[10:25:36.560]                     timestamp = base::Sys.time(), signaled = 0L)
[10:25:36.560]                   signalCondition(cond)
[10:25:36.560]                 }
[10:25:36.560]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:25:36.560]                 "immediateCondition"))) {
[10:25:36.560]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:25:36.560]                   ...future.conditions[[length(...future.conditions) + 
[10:25:36.560]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:25:36.560]                   if (TRUE && !signal) {
[10:25:36.560]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:25:36.560]                     {
[10:25:36.560]                       inherits <- base::inherits
[10:25:36.560]                       invokeRestart <- base::invokeRestart
[10:25:36.560]                       is.null <- base::is.null
[10:25:36.560]                       muffled <- FALSE
[10:25:36.560]                       if (inherits(cond, "message")) {
[10:25:36.560]                         muffled <- grepl(pattern, "muffleMessage")
[10:25:36.560]                         if (muffled) 
[10:25:36.560]                           invokeRestart("muffleMessage")
[10:25:36.560]                       }
[10:25:36.560]                       else if (inherits(cond, "warning")) {
[10:25:36.560]                         muffled <- grepl(pattern, "muffleWarning")
[10:25:36.560]                         if (muffled) 
[10:25:36.560]                           invokeRestart("muffleWarning")
[10:25:36.560]                       }
[10:25:36.560]                       else if (inherits(cond, "condition")) {
[10:25:36.560]                         if (!is.null(pattern)) {
[10:25:36.560]                           computeRestarts <- base::computeRestarts
[10:25:36.560]                           grepl <- base::grepl
[10:25:36.560]                           restarts <- computeRestarts(cond)
[10:25:36.560]                           for (restart in restarts) {
[10:25:36.560]                             name <- restart$name
[10:25:36.560]                             if (is.null(name)) 
[10:25:36.560]                               next
[10:25:36.560]                             if (!grepl(pattern, name)) 
[10:25:36.560]                               next
[10:25:36.560]                             invokeRestart(restart)
[10:25:36.560]                             muffled <- TRUE
[10:25:36.560]                             break
[10:25:36.560]                           }
[10:25:36.560]                         }
[10:25:36.560]                       }
[10:25:36.560]                       invisible(muffled)
[10:25:36.560]                     }
[10:25:36.560]                     muffleCondition(cond, pattern = "^muffle")
[10:25:36.560]                   }
[10:25:36.560]                 }
[10:25:36.560]                 else {
[10:25:36.560]                   if (TRUE) {
[10:25:36.560]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:25:36.560]                     {
[10:25:36.560]                       inherits <- base::inherits
[10:25:36.560]                       invokeRestart <- base::invokeRestart
[10:25:36.560]                       is.null <- base::is.null
[10:25:36.560]                       muffled <- FALSE
[10:25:36.560]                       if (inherits(cond, "message")) {
[10:25:36.560]                         muffled <- grepl(pattern, "muffleMessage")
[10:25:36.560]                         if (muffled) 
[10:25:36.560]                           invokeRestart("muffleMessage")
[10:25:36.560]                       }
[10:25:36.560]                       else if (inherits(cond, "warning")) {
[10:25:36.560]                         muffled <- grepl(pattern, "muffleWarning")
[10:25:36.560]                         if (muffled) 
[10:25:36.560]                           invokeRestart("muffleWarning")
[10:25:36.560]                       }
[10:25:36.560]                       else if (inherits(cond, "condition")) {
[10:25:36.560]                         if (!is.null(pattern)) {
[10:25:36.560]                           computeRestarts <- base::computeRestarts
[10:25:36.560]                           grepl <- base::grepl
[10:25:36.560]                           restarts <- computeRestarts(cond)
[10:25:36.560]                           for (restart in restarts) {
[10:25:36.560]                             name <- restart$name
[10:25:36.560]                             if (is.null(name)) 
[10:25:36.560]                               next
[10:25:36.560]                             if (!grepl(pattern, name)) 
[10:25:36.560]                               next
[10:25:36.560]                             invokeRestart(restart)
[10:25:36.560]                             muffled <- TRUE
[10:25:36.560]                             break
[10:25:36.560]                           }
[10:25:36.560]                         }
[10:25:36.560]                       }
[10:25:36.560]                       invisible(muffled)
[10:25:36.560]                     }
[10:25:36.560]                     muffleCondition(cond, pattern = "^muffle")
[10:25:36.560]                   }
[10:25:36.560]                 }
[10:25:36.560]             }
[10:25:36.560]         }))
[10:25:36.560]     }, error = function(ex) {
[10:25:36.560]         base::structure(base::list(value = NULL, visible = NULL, 
[10:25:36.560]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:25:36.560]                 ...future.rng), started = ...future.startTime, 
[10:25:36.560]             finished = Sys.time(), session_uuid = NA_character_, 
[10:25:36.560]             version = "1.8"), class = "FutureResult")
[10:25:36.560]     }, finally = {
[10:25:36.560]         if (!identical(...future.workdir, getwd())) 
[10:25:36.560]             setwd(...future.workdir)
[10:25:36.560]         {
[10:25:36.560]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:25:36.560]                 ...future.oldOptions$nwarnings <- NULL
[10:25:36.560]             }
[10:25:36.560]             base::options(...future.oldOptions)
[10:25:36.560]             if (.Platform$OS.type == "windows") {
[10:25:36.560]                 old_names <- names(...future.oldEnvVars)
[10:25:36.560]                 envs <- base::Sys.getenv()
[10:25:36.560]                 names <- names(envs)
[10:25:36.560]                 common <- intersect(names, old_names)
[10:25:36.560]                 added <- setdiff(names, old_names)
[10:25:36.560]                 removed <- setdiff(old_names, names)
[10:25:36.560]                 changed <- common[...future.oldEnvVars[common] != 
[10:25:36.560]                   envs[common]]
[10:25:36.560]                 NAMES <- toupper(changed)
[10:25:36.560]                 args <- list()
[10:25:36.560]                 for (kk in seq_along(NAMES)) {
[10:25:36.560]                   name <- changed[[kk]]
[10:25:36.560]                   NAME <- NAMES[[kk]]
[10:25:36.560]                   if (name != NAME && is.element(NAME, old_names)) 
[10:25:36.560]                     next
[10:25:36.560]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:25:36.560]                 }
[10:25:36.560]                 NAMES <- toupper(added)
[10:25:36.560]                 for (kk in seq_along(NAMES)) {
[10:25:36.560]                   name <- added[[kk]]
[10:25:36.560]                   NAME <- NAMES[[kk]]
[10:25:36.560]                   if (name != NAME && is.element(NAME, old_names)) 
[10:25:36.560]                     next
[10:25:36.560]                   args[[name]] <- ""
[10:25:36.560]                 }
[10:25:36.560]                 NAMES <- toupper(removed)
[10:25:36.560]                 for (kk in seq_along(NAMES)) {
[10:25:36.560]                   name <- removed[[kk]]
[10:25:36.560]                   NAME <- NAMES[[kk]]
[10:25:36.560]                   if (name != NAME && is.element(NAME, old_names)) 
[10:25:36.560]                     next
[10:25:36.560]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:25:36.560]                 }
[10:25:36.560]                 if (length(args) > 0) 
[10:25:36.560]                   base::do.call(base::Sys.setenv, args = args)
[10:25:36.560]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:25:36.560]             }
[10:25:36.560]             else {
[10:25:36.560]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:25:36.560]             }
[10:25:36.560]             {
[10:25:36.560]                 if (base::length(...future.futureOptionsAdded) > 
[10:25:36.560]                   0L) {
[10:25:36.560]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:25:36.560]                   base::names(opts) <- ...future.futureOptionsAdded
[10:25:36.560]                   base::options(opts)
[10:25:36.560]                 }
[10:25:36.560]                 {
[10:25:36.560]                   {
[10:25:36.560]                     NULL
[10:25:36.560]                     RNGkind("Mersenne-Twister")
[10:25:36.560]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[10:25:36.560]                       inherits = FALSE)
[10:25:36.560]                   }
[10:25:36.560]                   options(future.plan = NULL)
[10:25:36.560]                   if (is.na(NA_character_)) 
[10:25:36.560]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:25:36.560]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:25:36.560]                   future::plan(list(function (..., envir = parent.frame()) 
[10:25:36.560]                   {
[10:25:36.560]                     future <- SequentialFuture(..., envir = envir)
[10:25:36.560]                     if (!future$lazy) 
[10:25:36.560]                       future <- run(future)
[10:25:36.560]                     invisible(future)
[10:25:36.560]                   }), .cleanup = FALSE, .init = FALSE)
[10:25:36.560]                 }
[10:25:36.560]             }
[10:25:36.560]         }
[10:25:36.560]     })
[10:25:36.560]     if (TRUE) {
[10:25:36.560]         base::sink(type = "output", split = FALSE)
[10:25:36.560]         if (TRUE) {
[10:25:36.560]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:25:36.560]         }
[10:25:36.560]         else {
[10:25:36.560]             ...future.result["stdout"] <- base::list(NULL)
[10:25:36.560]         }
[10:25:36.560]         base::close(...future.stdout)
[10:25:36.560]         ...future.stdout <- NULL
[10:25:36.560]     }
[10:25:36.560]     ...future.result$conditions <- ...future.conditions
[10:25:36.560]     ...future.result$finished <- base::Sys.time()
[10:25:36.560]     ...future.result
[10:25:36.560] }
[10:25:36.562] assign_globals() ...
[10:25:36.562] List of 1
[10:25:36.562]  $ ii: int 3
[10:25:36.562]  - attr(*, "where")=List of 1
[10:25:36.562]   ..$ ii:<environment: R_EmptyEnv> 
[10:25:36.562]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:25:36.562]  - attr(*, "resolved")= logi FALSE
[10:25:36.562]  - attr(*, "total_size")= num 56
[10:25:36.562]  - attr(*, "already-done")= logi TRUE
[10:25:36.566] - copied ‘ii’ to environment
[10:25:36.566] assign_globals() ... done
[10:25:36.566] plan(): Setting new future strategy stack:
[10:25:36.566] List of future strategies:
[10:25:36.566] 1. sequential:
[10:25:36.566]    - args: function (..., envir = parent.frame())
[10:25:36.566]    - tweaked: FALSE
[10:25:36.566]    - call: NULL
[10:25:36.567] plan(): nbrOfWorkers() = 1
[10:25:36.567] plan(): Setting new future strategy stack:
[10:25:36.567] List of future strategies:
[10:25:36.567] 1. sequential:
[10:25:36.567]    - args: function (..., envir = parent.frame())
[10:25:36.567]    - tweaked: FALSE
[10:25:36.567]    - call: plan(strategy)
[10:25:36.568] plan(): nbrOfWorkers() = 1
[10:25:36.568] SequentialFuture started (and completed)
[10:25:36.568] - Launch lazy future ... done
[10:25:36.568] run() for ‘SequentialFuture’ ... done
[10:25:36.568] signalConditions() ...
[10:25:36.569]  - include = ‘immediateCondition’
[10:25:36.569]  - exclude = 
[10:25:36.569]  - resignal = FALSE
[10:25:36.569]  - Number of conditions: 1
[10:25:36.569] signalConditions() ... done
[10:25:36.569] Future state: ‘finished’
[10:25:36.569] signalConditions() ...
[10:25:36.569]  - include = ‘condition’
[10:25:36.569]  - exclude = ‘immediateCondition’
[10:25:36.569]  - resignal = TRUE
[10:25:36.570]  - Number of conditions: 1
[10:25:36.570]  - Condition #1: ‘simpleError’, ‘error’, ‘condition’
[10:25:36.570] signalConditions() ... done
Warning in get(var, envir = x, inherits = FALSE) :
  restarting interrupted promise evaluation
[10:25:36.571] signalConditions() ...
[10:25:36.571]  - include = ‘immediateCondition’
[10:25:36.571]  - exclude = 
[10:25:36.571]  - resignal = FALSE
[10:25:36.571]  - Number of conditions: 1
[10:25:36.571] signalConditions() ... done
[10:25:36.571] Future state: ‘finished’
[10:25:36.572] signalConditions() ...
[10:25:36.572]  - include = ‘condition’
[10:25:36.572]  - exclude = ‘immediateCondition’
[10:25:36.572]  - resignal = TRUE
[10:25:36.572]  - Number of conditions: 1
[10:25:36.572]  - Condition #1: ‘simpleError’, ‘error’, ‘condition’
[10:25:36.572] signalConditions() ... done
Warning in get(var, envir = x, inherits = FALSE) :
  restarting interrupted promise evaluation
[10:25:36.572] signalConditions() ...
[10:25:36.572]  - include = ‘immediateCondition’
[10:25:36.573]  - exclude = 
[10:25:36.573]  - resignal = FALSE
[10:25:36.573]  - Number of conditions: 1
[10:25:36.573] signalConditions() ... done
[10:25:36.573] Future state: ‘finished’
[10:25:36.573] signalConditions() ...
[10:25:36.573]  - include = ‘condition’
[10:25:36.573]  - exclude = ‘immediateCondition’
[10:25:36.573]  - resignal = TRUE
[10:25:36.573]  - Number of conditions: 1
[10:25:36.573]  - Condition #1: ‘simpleError’, ‘error’, ‘condition’
[10:25:36.574] signalConditions() ... done
** Future evaluation with a poor-man's "progress bar"
[10:25:36.574] getGlobalsAndPackages() ...
[10:25:36.574] Searching for globals...
[10:25:36.576] - globals found: [4] ‘{’, ‘cat’, ‘for’, ‘:’
[10:25:36.576] Searching for globals ... DONE
[10:25:36.576] Resolving globals: FALSE
[10:25:36.576] 
[10:25:36.576] 
[10:25:36.576] getGlobalsAndPackages() ... DONE
[10:25:36.577] run() for ‘Future’ ...
[10:25:36.577] - state: ‘created’
[10:25:36.577] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:25:36.577] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[10:25:36.577] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[10:25:36.577]   - Field: ‘label’
[10:25:36.577]   - Field: ‘local’
[10:25:36.578]   - Field: ‘owner’
[10:25:36.578]   - Field: ‘envir’
[10:25:36.578]   - Field: ‘packages’
[10:25:36.578]   - Field: ‘gc’
[10:25:36.578]   - Field: ‘conditions’
[10:25:36.578]   - Field: ‘expr’
[10:25:36.578]   - Field: ‘uuid’
[10:25:36.578]   - Field: ‘seed’
[10:25:36.578]   - Field: ‘version’
[10:25:36.578]   - Field: ‘result’
[10:25:36.578]   - Field: ‘asynchronous’
[10:25:36.579]   - Field: ‘calls’
[10:25:36.579]   - Field: ‘globals’
[10:25:36.579]   - Field: ‘stdout’
[10:25:36.579]   - Field: ‘earlySignal’
[10:25:36.579]   - Field: ‘lazy’
[10:25:36.579]   - Field: ‘state’
[10:25:36.579] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[10:25:36.579] - Launch lazy future ...
[10:25:36.579] Packages needed by the future expression (n = 0): <none>
[10:25:36.579] Packages needed by future strategies (n = 0): <none>
[10:25:36.580] {
[10:25:36.580]     {
[10:25:36.580]         {
[10:25:36.580]             ...future.startTime <- base::Sys.time()
[10:25:36.580]             {
[10:25:36.580]                 {
[10:25:36.580]                   {
[10:25:36.580]                     base::local({
[10:25:36.580]                       has_future <- base::requireNamespace("future", 
[10:25:36.580]                         quietly = TRUE)
[10:25:36.580]                       if (has_future) {
[10:25:36.580]                         ns <- base::getNamespace("future")
[10:25:36.580]                         version <- ns[[".package"]][["version"]]
[10:25:36.580]                         if (is.null(version)) 
[10:25:36.580]                           version <- utils::packageVersion("future")
[10:25:36.580]                       }
[10:25:36.580]                       else {
[10:25:36.580]                         version <- NULL
[10:25:36.580]                       }
[10:25:36.580]                       if (!has_future || version < "1.8.0") {
[10:25:36.580]                         info <- base::c(r_version = base::gsub("R version ", 
[10:25:36.580]                           "", base::R.version$version.string), 
[10:25:36.580]                           platform = base::sprintf("%s (%s-bit)", 
[10:25:36.580]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:25:36.580]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[10:25:36.580]                             "release", "version")], collapse = " "), 
[10:25:36.580]                           hostname = base::Sys.info()[["nodename"]])
[10:25:36.580]                         info <- base::sprintf("%s: %s", base::names(info), 
[10:25:36.580]                           info)
[10:25:36.580]                         info <- base::paste(info, collapse = "; ")
[10:25:36.580]                         if (!has_future) {
[10:25:36.580]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:25:36.580]                             info)
[10:25:36.580]                         }
[10:25:36.580]                         else {
[10:25:36.580]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:25:36.580]                             info, version)
[10:25:36.580]                         }
[10:25:36.580]                         base::stop(msg)
[10:25:36.580]                       }
[10:25:36.580]                     })
[10:25:36.580]                   }
[10:25:36.580]                   options(future.plan = NULL)
[10:25:36.580]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:25:36.580]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:25:36.580]                 }
[10:25:36.580]                 ...future.workdir <- getwd()
[10:25:36.580]             }
[10:25:36.580]             ...future.oldOptions <- base::as.list(base::.Options)
[10:25:36.580]             ...future.oldEnvVars <- base::Sys.getenv()
[10:25:36.580]         }
[10:25:36.580]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:25:36.580]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[10:25:36.580]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:25:36.580]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:25:36.580]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:25:36.580]             future.stdout.windows.reencode = NULL, width = 80L)
[10:25:36.580]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:25:36.580]             base::names(...future.oldOptions))
[10:25:36.580]     }
[10:25:36.580]     if (FALSE) {
[10:25:36.580]     }
[10:25:36.580]     else {
[10:25:36.580]         if (TRUE) {
[10:25:36.580]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:25:36.580]                 open = "w")
[10:25:36.580]         }
[10:25:36.580]         else {
[10:25:36.580]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:25:36.580]                 windows = "NUL", "/dev/null"), open = "w")
[10:25:36.580]         }
[10:25:36.580]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:25:36.580]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:25:36.580]             base::sink(type = "output", split = FALSE)
[10:25:36.580]             base::close(...future.stdout)
[10:25:36.580]         }, add = TRUE)
[10:25:36.580]     }
[10:25:36.580]     ...future.frame <- base::sys.nframe()
[10:25:36.580]     ...future.conditions <- base::list()
[10:25:36.580]     ...future.rng <- base::globalenv()$.Random.seed
[10:25:36.580]     if (FALSE) {
[10:25:36.580]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:25:36.580]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:25:36.580]     }
[10:25:36.580]     ...future.result <- base::tryCatch({
[10:25:36.580]         base::withCallingHandlers({
[10:25:36.580]             ...future.value <- base::withVisible(base::local({
[10:25:36.580]                 cat("Processing: ")
[10:25:36.580]                 for (ii in 1:10) {
[10:25:36.580]                   cat(".")
[10:25:36.580]                 }
[10:25:36.580]                 cat(" [100%]\n")
[10:25:36.580]                 4
[10:25:36.580]             }))
[10:25:36.580]             future::FutureResult(value = ...future.value$value, 
[10:25:36.580]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:25:36.580]                   ...future.rng), globalenv = if (FALSE) 
[10:25:36.580]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:25:36.580]                     ...future.globalenv.names))
[10:25:36.580]                 else NULL, started = ...future.startTime, version = "1.8")
[10:25:36.580]         }, condition = base::local({
[10:25:36.580]             c <- base::c
[10:25:36.580]             inherits <- base::inherits
[10:25:36.580]             invokeRestart <- base::invokeRestart
[10:25:36.580]             length <- base::length
[10:25:36.580]             list <- base::list
[10:25:36.580]             seq.int <- base::seq.int
[10:25:36.580]             signalCondition <- base::signalCondition
[10:25:36.580]             sys.calls <- base::sys.calls
[10:25:36.580]             `[[` <- base::`[[`
[10:25:36.580]             `+` <- base::`+`
[10:25:36.580]             `<<-` <- base::`<<-`
[10:25:36.580]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:25:36.580]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:25:36.580]                   3L)]
[10:25:36.580]             }
[10:25:36.580]             function(cond) {
[10:25:36.580]                 is_error <- inherits(cond, "error")
[10:25:36.580]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:25:36.580]                   NULL)
[10:25:36.580]                 if (is_error) {
[10:25:36.580]                   sessionInformation <- function() {
[10:25:36.580]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:25:36.580]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:25:36.580]                       search = base::search(), system = base::Sys.info())
[10:25:36.580]                   }
[10:25:36.580]                   ...future.conditions[[length(...future.conditions) + 
[10:25:36.580]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:25:36.580]                     cond$call), session = sessionInformation(), 
[10:25:36.580]                     timestamp = base::Sys.time(), signaled = 0L)
[10:25:36.580]                   signalCondition(cond)
[10:25:36.580]                 }
[10:25:36.580]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:25:36.580]                 "immediateCondition"))) {
[10:25:36.580]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:25:36.580]                   ...future.conditions[[length(...future.conditions) + 
[10:25:36.580]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:25:36.580]                   if (TRUE && !signal) {
[10:25:36.580]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:25:36.580]                     {
[10:25:36.580]                       inherits <- base::inherits
[10:25:36.580]                       invokeRestart <- base::invokeRestart
[10:25:36.580]                       is.null <- base::is.null
[10:25:36.580]                       muffled <- FALSE
[10:25:36.580]                       if (inherits(cond, "message")) {
[10:25:36.580]                         muffled <- grepl(pattern, "muffleMessage")
[10:25:36.580]                         if (muffled) 
[10:25:36.580]                           invokeRestart("muffleMessage")
[10:25:36.580]                       }
[10:25:36.580]                       else if (inherits(cond, "warning")) {
[10:25:36.580]                         muffled <- grepl(pattern, "muffleWarning")
[10:25:36.580]                         if (muffled) 
[10:25:36.580]                           invokeRestart("muffleWarning")
[10:25:36.580]                       }
[10:25:36.580]                       else if (inherits(cond, "condition")) {
[10:25:36.580]                         if (!is.null(pattern)) {
[10:25:36.580]                           computeRestarts <- base::computeRestarts
[10:25:36.580]                           grepl <- base::grepl
[10:25:36.580]                           restarts <- computeRestarts(cond)
[10:25:36.580]                           for (restart in restarts) {
[10:25:36.580]                             name <- restart$name
[10:25:36.580]                             if (is.null(name)) 
[10:25:36.580]                               next
[10:25:36.580]                             if (!grepl(pattern, name)) 
[10:25:36.580]                               next
[10:25:36.580]                             invokeRestart(restart)
[10:25:36.580]                             muffled <- TRUE
[10:25:36.580]                             break
[10:25:36.580]                           }
[10:25:36.580]                         }
[10:25:36.580]                       }
[10:25:36.580]                       invisible(muffled)
[10:25:36.580]                     }
[10:25:36.580]                     muffleCondition(cond, pattern = "^muffle")
[10:25:36.580]                   }
[10:25:36.580]                 }
[10:25:36.580]                 else {
[10:25:36.580]                   if (TRUE) {
[10:25:36.580]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:25:36.580]                     {
[10:25:36.580]                       inherits <- base::inherits
[10:25:36.580]                       invokeRestart <- base::invokeRestart
[10:25:36.580]                       is.null <- base::is.null
[10:25:36.580]                       muffled <- FALSE
[10:25:36.580]                       if (inherits(cond, "message")) {
[10:25:36.580]                         muffled <- grepl(pattern, "muffleMessage")
[10:25:36.580]                         if (muffled) 
[10:25:36.580]                           invokeRestart("muffleMessage")
[10:25:36.580]                       }
[10:25:36.580]                       else if (inherits(cond, "warning")) {
[10:25:36.580]                         muffled <- grepl(pattern, "muffleWarning")
[10:25:36.580]                         if (muffled) 
[10:25:36.580]                           invokeRestart("muffleWarning")
[10:25:36.580]                       }
[10:25:36.580]                       else if (inherits(cond, "condition")) {
[10:25:36.580]                         if (!is.null(pattern)) {
[10:25:36.580]                           computeRestarts <- base::computeRestarts
[10:25:36.580]                           grepl <- base::grepl
[10:25:36.580]                           restarts <- computeRestarts(cond)
[10:25:36.580]                           for (restart in restarts) {
[10:25:36.580]                             name <- restart$name
[10:25:36.580]                             if (is.null(name)) 
[10:25:36.580]                               next
[10:25:36.580]                             if (!grepl(pattern, name)) 
[10:25:36.580]                               next
[10:25:36.580]                             invokeRestart(restart)
[10:25:36.580]                             muffled <- TRUE
[10:25:36.580]                             break
[10:25:36.580]                           }
[10:25:36.580]                         }
[10:25:36.580]                       }
[10:25:36.580]                       invisible(muffled)
[10:25:36.580]                     }
[10:25:36.580]                     muffleCondition(cond, pattern = "^muffle")
[10:25:36.580]                   }
[10:25:36.580]                 }
[10:25:36.580]             }
[10:25:36.580]         }))
[10:25:36.580]     }, error = function(ex) {
[10:25:36.580]         base::structure(base::list(value = NULL, visible = NULL, 
[10:25:36.580]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:25:36.580]                 ...future.rng), started = ...future.startTime, 
[10:25:36.580]             finished = Sys.time(), session_uuid = NA_character_, 
[10:25:36.580]             version = "1.8"), class = "FutureResult")
[10:25:36.580]     }, finally = {
[10:25:36.580]         if (!identical(...future.workdir, getwd())) 
[10:25:36.580]             setwd(...future.workdir)
[10:25:36.580]         {
[10:25:36.580]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:25:36.580]                 ...future.oldOptions$nwarnings <- NULL
[10:25:36.580]             }
[10:25:36.580]             base::options(...future.oldOptions)
[10:25:36.580]             if (.Platform$OS.type == "windows") {
[10:25:36.580]                 old_names <- names(...future.oldEnvVars)
[10:25:36.580]                 envs <- base::Sys.getenv()
[10:25:36.580]                 names <- names(envs)
[10:25:36.580]                 common <- intersect(names, old_names)
[10:25:36.580]                 added <- setdiff(names, old_names)
[10:25:36.580]                 removed <- setdiff(old_names, names)
[10:25:36.580]                 changed <- common[...future.oldEnvVars[common] != 
[10:25:36.580]                   envs[common]]
[10:25:36.580]                 NAMES <- toupper(changed)
[10:25:36.580]                 args <- list()
[10:25:36.580]                 for (kk in seq_along(NAMES)) {
[10:25:36.580]                   name <- changed[[kk]]
[10:25:36.580]                   NAME <- NAMES[[kk]]
[10:25:36.580]                   if (name != NAME && is.element(NAME, old_names)) 
[10:25:36.580]                     next
[10:25:36.580]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:25:36.580]                 }
[10:25:36.580]                 NAMES <- toupper(added)
[10:25:36.580]                 for (kk in seq_along(NAMES)) {
[10:25:36.580]                   name <- added[[kk]]
[10:25:36.580]                   NAME <- NAMES[[kk]]
[10:25:36.580]                   if (name != NAME && is.element(NAME, old_names)) 
[10:25:36.580]                     next
[10:25:36.580]                   args[[name]] <- ""
[10:25:36.580]                 }
[10:25:36.580]                 NAMES <- toupper(removed)
[10:25:36.580]                 for (kk in seq_along(NAMES)) {
[10:25:36.580]                   name <- removed[[kk]]
[10:25:36.580]                   NAME <- NAMES[[kk]]
[10:25:36.580]                   if (name != NAME && is.element(NAME, old_names)) 
[10:25:36.580]                     next
[10:25:36.580]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:25:36.580]                 }
[10:25:36.580]                 if (length(args) > 0) 
[10:25:36.580]                   base::do.call(base::Sys.setenv, args = args)
[10:25:36.580]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:25:36.580]             }
[10:25:36.580]             else {
[10:25:36.580]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:25:36.580]             }
[10:25:36.580]             {
[10:25:36.580]                 if (base::length(...future.futureOptionsAdded) > 
[10:25:36.580]                   0L) {
[10:25:36.580]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:25:36.580]                   base::names(opts) <- ...future.futureOptionsAdded
[10:25:36.580]                   base::options(opts)
[10:25:36.580]                 }
[10:25:36.580]                 {
[10:25:36.580]                   {
[10:25:36.580]                     NULL
[10:25:36.580]                     RNGkind("Mersenne-Twister")
[10:25:36.580]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[10:25:36.580]                       inherits = FALSE)
[10:25:36.580]                   }
[10:25:36.580]                   options(future.plan = NULL)
[10:25:36.580]                   if (is.na(NA_character_)) 
[10:25:36.580]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:25:36.580]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:25:36.580]                   future::plan(list(function (..., envir = parent.frame()) 
[10:25:36.580]                   {
[10:25:36.580]                     future <- SequentialFuture(..., envir = envir)
[10:25:36.580]                     if (!future$lazy) 
[10:25:36.580]                       future <- run(future)
[10:25:36.580]                     invisible(future)
[10:25:36.580]                   }), .cleanup = FALSE, .init = FALSE)
[10:25:36.580]                 }
[10:25:36.580]             }
[10:25:36.580]         }
[10:25:36.580]     })
[10:25:36.580]     if (TRUE) {
[10:25:36.580]         base::sink(type = "output", split = FALSE)
[10:25:36.580]         if (TRUE) {
[10:25:36.580]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:25:36.580]         }
[10:25:36.580]         else {
[10:25:36.580]             ...future.result["stdout"] <- base::list(NULL)
[10:25:36.580]         }
[10:25:36.580]         base::close(...future.stdout)
[10:25:36.580]         ...future.stdout <- NULL
[10:25:36.580]     }
[10:25:36.580]     ...future.result$conditions <- ...future.conditions
[10:25:36.580]     ...future.result$finished <- base::Sys.time()
[10:25:36.580]     ...future.result
[10:25:36.580] }
[10:25:36.582] plan(): Setting new future strategy stack:
[10:25:36.582] List of future strategies:
[10:25:36.582] 1. sequential:
[10:25:36.582]    - args: function (..., envir = parent.frame())
[10:25:36.582]    - tweaked: FALSE
[10:25:36.582]    - call: NULL
[10:25:36.582] plan(): nbrOfWorkers() = 1
[10:25:36.583] plan(): Setting new future strategy stack:
[10:25:36.583] List of future strategies:
[10:25:36.583] 1. sequential:
[10:25:36.583]    - args: function (..., envir = parent.frame())
[10:25:36.583]    - tweaked: FALSE
[10:25:36.583]    - call: plan(strategy)
[10:25:36.583] plan(): nbrOfWorkers() = 1
[10:25:36.583] SequentialFuture started (and completed)
[10:25:36.583] - Launch lazy future ... done
[10:25:36.583] run() for ‘SequentialFuture’ ... done
** Collecting results
v1 = 1
v2 = 2
Warning in sprintf(...) : restarting interrupted promise evaluation
[10:25:36.585] signalConditions() ...
[10:25:36.585]  - include = ‘immediateCondition’
[10:25:36.585]  - exclude = 
[10:25:36.585]  - resignal = FALSE
[10:25:36.585]  - Number of conditions: 1
[10:25:36.585] signalConditions() ... done
[10:25:36.585] Future state: ‘finished’
[10:25:36.585] signalConditions() ...
[10:25:36.585]  - include = ‘condition’
[10:25:36.586]  - exclude = ‘immediateCondition’
[10:25:36.586]  - resignal = TRUE
[10:25:36.586]  - Number of conditions: 1
[10:25:36.586]  - Condition #1: ‘simpleError’, ‘error’, ‘condition’
[10:25:36.586] signalConditions() ... done
v3: <simpleError> (as expect)
Processing: .......... [100%]
v4 = 4
** Left-to-right and right-to-left future assignments
[10:25:36.586] getGlobalsAndPackages() ...
[10:25:36.586] Searching for globals...
[10:25:36.587] 
[10:25:36.587] Searching for globals ... DONE
[10:25:36.587] - globals: [0] <none>
[10:25:36.587] getGlobalsAndPackages() ... DONE
[10:25:36.587] run() for ‘Future’ ...
[10:25:36.587] - state: ‘created’
[10:25:36.587] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:25:36.588] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[10:25:36.588] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[10:25:36.588]   - Field: ‘label’
[10:25:36.588]   - Field: ‘local’
[10:25:36.588]   - Field: ‘owner’
[10:25:36.588]   - Field: ‘envir’
[10:25:36.588]   - Field: ‘packages’
[10:25:36.588]   - Field: ‘gc’
[10:25:36.590]   - Field: ‘conditions’
[10:25:36.590]   - Field: ‘expr’
[10:25:36.590]   - Field: ‘uuid’
[10:25:36.590]   - Field: ‘seed’
[10:25:36.590]   - Field: ‘version’
[10:25:36.590]   - Field: ‘result’
[10:25:36.590]   - Field: ‘asynchronous’
[10:25:36.590]   - Field: ‘calls’
[10:25:36.590]   - Field: ‘globals’
[10:25:36.590]   - Field: ‘stdout’
[10:25:36.591]   - Field: ‘earlySignal’
[10:25:36.591]   - Field: ‘lazy’
[10:25:36.591]   - Field: ‘state’
[10:25:36.591] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[10:25:36.591] - Launch lazy future ...
[10:25:36.591] Packages needed by the future expression (n = 0): <none>
[10:25:36.591] Packages needed by future strategies (n = 0): <none>
[10:25:36.592] {
[10:25:36.592]     {
[10:25:36.592]         {
[10:25:36.592]             ...future.startTime <- base::Sys.time()
[10:25:36.592]             {
[10:25:36.592]                 {
[10:25:36.592]                   {
[10:25:36.592]                     base::local({
[10:25:36.592]                       has_future <- base::requireNamespace("future", 
[10:25:36.592]                         quietly = TRUE)
[10:25:36.592]                       if (has_future) {
[10:25:36.592]                         ns <- base::getNamespace("future")
[10:25:36.592]                         version <- ns[[".package"]][["version"]]
[10:25:36.592]                         if (is.null(version)) 
[10:25:36.592]                           version <- utils::packageVersion("future")
[10:25:36.592]                       }
[10:25:36.592]                       else {
[10:25:36.592]                         version <- NULL
[10:25:36.592]                       }
[10:25:36.592]                       if (!has_future || version < "1.8.0") {
[10:25:36.592]                         info <- base::c(r_version = base::gsub("R version ", 
[10:25:36.592]                           "", base::R.version$version.string), 
[10:25:36.592]                           platform = base::sprintf("%s (%s-bit)", 
[10:25:36.592]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:25:36.592]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[10:25:36.592]                             "release", "version")], collapse = " "), 
[10:25:36.592]                           hostname = base::Sys.info()[["nodename"]])
[10:25:36.592]                         info <- base::sprintf("%s: %s", base::names(info), 
[10:25:36.592]                           info)
[10:25:36.592]                         info <- base::paste(info, collapse = "; ")
[10:25:36.592]                         if (!has_future) {
[10:25:36.592]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:25:36.592]                             info)
[10:25:36.592]                         }
[10:25:36.592]                         else {
[10:25:36.592]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:25:36.592]                             info, version)
[10:25:36.592]                         }
[10:25:36.592]                         base::stop(msg)
[10:25:36.592]                       }
[10:25:36.592]                     })
[10:25:36.592]                   }
[10:25:36.592]                   options(future.plan = NULL)
[10:25:36.592]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:25:36.592]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:25:36.592]                 }
[10:25:36.592]                 ...future.workdir <- getwd()
[10:25:36.592]             }
[10:25:36.592]             ...future.oldOptions <- base::as.list(base::.Options)
[10:25:36.592]             ...future.oldEnvVars <- base::Sys.getenv()
[10:25:36.592]         }
[10:25:36.592]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:25:36.592]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[10:25:36.592]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:25:36.592]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:25:36.592]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:25:36.592]             future.stdout.windows.reencode = NULL, width = 80L)
[10:25:36.592]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:25:36.592]             base::names(...future.oldOptions))
[10:25:36.592]     }
[10:25:36.592]     if (FALSE) {
[10:25:36.592]     }
[10:25:36.592]     else {
[10:25:36.592]         if (TRUE) {
[10:25:36.592]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:25:36.592]                 open = "w")
[10:25:36.592]         }
[10:25:36.592]         else {
[10:25:36.592]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:25:36.592]                 windows = "NUL", "/dev/null"), open = "w")
[10:25:36.592]         }
[10:25:36.592]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:25:36.592]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:25:36.592]             base::sink(type = "output", split = FALSE)
[10:25:36.592]             base::close(...future.stdout)
[10:25:36.592]         }, add = TRUE)
[10:25:36.592]     }
[10:25:36.592]     ...future.frame <- base::sys.nframe()
[10:25:36.592]     ...future.conditions <- base::list()
[10:25:36.592]     ...future.rng <- base::globalenv()$.Random.seed
[10:25:36.592]     if (FALSE) {
[10:25:36.592]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:25:36.592]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:25:36.592]     }
[10:25:36.592]     ...future.result <- base::tryCatch({
[10:25:36.592]         base::withCallingHandlers({
[10:25:36.592]             ...future.value <- base::withVisible(base::local(1))
[10:25:36.592]             future::FutureResult(value = ...future.value$value, 
[10:25:36.592]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:25:36.592]                   ...future.rng), globalenv = if (FALSE) 
[10:25:36.592]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:25:36.592]                     ...future.globalenv.names))
[10:25:36.592]                 else NULL, started = ...future.startTime, version = "1.8")
[10:25:36.592]         }, condition = base::local({
[10:25:36.592]             c <- base::c
[10:25:36.592]             inherits <- base::inherits
[10:25:36.592]             invokeRestart <- base::invokeRestart
[10:25:36.592]             length <- base::length
[10:25:36.592]             list <- base::list
[10:25:36.592]             seq.int <- base::seq.int
[10:25:36.592]             signalCondition <- base::signalCondition
[10:25:36.592]             sys.calls <- base::sys.calls
[10:25:36.592]             `[[` <- base::`[[`
[10:25:36.592]             `+` <- base::`+`
[10:25:36.592]             `<<-` <- base::`<<-`
[10:25:36.592]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:25:36.592]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:25:36.592]                   3L)]
[10:25:36.592]             }
[10:25:36.592]             function(cond) {
[10:25:36.592]                 is_error <- inherits(cond, "error")
[10:25:36.592]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:25:36.592]                   NULL)
[10:25:36.592]                 if (is_error) {
[10:25:36.592]                   sessionInformation <- function() {
[10:25:36.592]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:25:36.592]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:25:36.592]                       search = base::search(), system = base::Sys.info())
[10:25:36.592]                   }
[10:25:36.592]                   ...future.conditions[[length(...future.conditions) + 
[10:25:36.592]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:25:36.592]                     cond$call), session = sessionInformation(), 
[10:25:36.592]                     timestamp = base::Sys.time(), signaled = 0L)
[10:25:36.592]                   signalCondition(cond)
[10:25:36.592]                 }
[10:25:36.592]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:25:36.592]                 "immediateCondition"))) {
[10:25:36.592]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:25:36.592]                   ...future.conditions[[length(...future.conditions) + 
[10:25:36.592]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:25:36.592]                   if (TRUE && !signal) {
[10:25:36.592]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:25:36.592]                     {
[10:25:36.592]                       inherits <- base::inherits
[10:25:36.592]                       invokeRestart <- base::invokeRestart
[10:25:36.592]                       is.null <- base::is.null
[10:25:36.592]                       muffled <- FALSE
[10:25:36.592]                       if (inherits(cond, "message")) {
[10:25:36.592]                         muffled <- grepl(pattern, "muffleMessage")
[10:25:36.592]                         if (muffled) 
[10:25:36.592]                           invokeRestart("muffleMessage")
[10:25:36.592]                       }
[10:25:36.592]                       else if (inherits(cond, "warning")) {
[10:25:36.592]                         muffled <- grepl(pattern, "muffleWarning")
[10:25:36.592]                         if (muffled) 
[10:25:36.592]                           invokeRestart("muffleWarning")
[10:25:36.592]                       }
[10:25:36.592]                       else if (inherits(cond, "condition")) {
[10:25:36.592]                         if (!is.null(pattern)) {
[10:25:36.592]                           computeRestarts <- base::computeRestarts
[10:25:36.592]                           grepl <- base::grepl
[10:25:36.592]                           restarts <- computeRestarts(cond)
[10:25:36.592]                           for (restart in restarts) {
[10:25:36.592]                             name <- restart$name
[10:25:36.592]                             if (is.null(name)) 
[10:25:36.592]                               next
[10:25:36.592]                             if (!grepl(pattern, name)) 
[10:25:36.592]                               next
[10:25:36.592]                             invokeRestart(restart)
[10:25:36.592]                             muffled <- TRUE
[10:25:36.592]                             break
[10:25:36.592]                           }
[10:25:36.592]                         }
[10:25:36.592]                       }
[10:25:36.592]                       invisible(muffled)
[10:25:36.592]                     }
[10:25:36.592]                     muffleCondition(cond, pattern = "^muffle")
[10:25:36.592]                   }
[10:25:36.592]                 }
[10:25:36.592]                 else {
[10:25:36.592]                   if (TRUE) {
[10:25:36.592]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:25:36.592]                     {
[10:25:36.592]                       inherits <- base::inherits
[10:25:36.592]                       invokeRestart <- base::invokeRestart
[10:25:36.592]                       is.null <- base::is.null
[10:25:36.592]                       muffled <- FALSE
[10:25:36.592]                       if (inherits(cond, "message")) {
[10:25:36.592]                         muffled <- grepl(pattern, "muffleMessage")
[10:25:36.592]                         if (muffled) 
[10:25:36.592]                           invokeRestart("muffleMessage")
[10:25:36.592]                       }
[10:25:36.592]                       else if (inherits(cond, "warning")) {
[10:25:36.592]                         muffled <- grepl(pattern, "muffleWarning")
[10:25:36.592]                         if (muffled) 
[10:25:36.592]                           invokeRestart("muffleWarning")
[10:25:36.592]                       }
[10:25:36.592]                       else if (inherits(cond, "condition")) {
[10:25:36.592]                         if (!is.null(pattern)) {
[10:25:36.592]                           computeRestarts <- base::computeRestarts
[10:25:36.592]                           grepl <- base::grepl
[10:25:36.592]                           restarts <- computeRestarts(cond)
[10:25:36.592]                           for (restart in restarts) {
[10:25:36.592]                             name <- restart$name
[10:25:36.592]                             if (is.null(name)) 
[10:25:36.592]                               next
[10:25:36.592]                             if (!grepl(pattern, name)) 
[10:25:36.592]                               next
[10:25:36.592]                             invokeRestart(restart)
[10:25:36.592]                             muffled <- TRUE
[10:25:36.592]                             break
[10:25:36.592]                           }
[10:25:36.592]                         }
[10:25:36.592]                       }
[10:25:36.592]                       invisible(muffled)
[10:25:36.592]                     }
[10:25:36.592]                     muffleCondition(cond, pattern = "^muffle")
[10:25:36.592]                   }
[10:25:36.592]                 }
[10:25:36.592]             }
[10:25:36.592]         }))
[10:25:36.592]     }, error = function(ex) {
[10:25:36.592]         base::structure(base::list(value = NULL, visible = NULL, 
[10:25:36.592]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:25:36.592]                 ...future.rng), started = ...future.startTime, 
[10:25:36.592]             finished = Sys.time(), session_uuid = NA_character_, 
[10:25:36.592]             version = "1.8"), class = "FutureResult")
[10:25:36.592]     }, finally = {
[10:25:36.592]         if (!identical(...future.workdir, getwd())) 
[10:25:36.592]             setwd(...future.workdir)
[10:25:36.592]         {
[10:25:36.592]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:25:36.592]                 ...future.oldOptions$nwarnings <- NULL
[10:25:36.592]             }
[10:25:36.592]             base::options(...future.oldOptions)
[10:25:36.592]             if (.Platform$OS.type == "windows") {
[10:25:36.592]                 old_names <- names(...future.oldEnvVars)
[10:25:36.592]                 envs <- base::Sys.getenv()
[10:25:36.592]                 names <- names(envs)
[10:25:36.592]                 common <- intersect(names, old_names)
[10:25:36.592]                 added <- setdiff(names, old_names)
[10:25:36.592]                 removed <- setdiff(old_names, names)
[10:25:36.592]                 changed <- common[...future.oldEnvVars[common] != 
[10:25:36.592]                   envs[common]]
[10:25:36.592]                 NAMES <- toupper(changed)
[10:25:36.592]                 args <- list()
[10:25:36.592]                 for (kk in seq_along(NAMES)) {
[10:25:36.592]                   name <- changed[[kk]]
[10:25:36.592]                   NAME <- NAMES[[kk]]
[10:25:36.592]                   if (name != NAME && is.element(NAME, old_names)) 
[10:25:36.592]                     next
[10:25:36.592]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:25:36.592]                 }
[10:25:36.592]                 NAMES <- toupper(added)
[10:25:36.592]                 for (kk in seq_along(NAMES)) {
[10:25:36.592]                   name <- added[[kk]]
[10:25:36.592]                   NAME <- NAMES[[kk]]
[10:25:36.592]                   if (name != NAME && is.element(NAME, old_names)) 
[10:25:36.592]                     next
[10:25:36.592]                   args[[name]] <- ""
[10:25:36.592]                 }
[10:25:36.592]                 NAMES <- toupper(removed)
[10:25:36.592]                 for (kk in seq_along(NAMES)) {
[10:25:36.592]                   name <- removed[[kk]]
[10:25:36.592]                   NAME <- NAMES[[kk]]
[10:25:36.592]                   if (name != NAME && is.element(NAME, old_names)) 
[10:25:36.592]                     next
[10:25:36.592]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:25:36.592]                 }
[10:25:36.592]                 if (length(args) > 0) 
[10:25:36.592]                   base::do.call(base::Sys.setenv, args = args)
[10:25:36.592]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:25:36.592]             }
[10:25:36.592]             else {
[10:25:36.592]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:25:36.592]             }
[10:25:36.592]             {
[10:25:36.592]                 if (base::length(...future.futureOptionsAdded) > 
[10:25:36.592]                   0L) {
[10:25:36.592]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:25:36.592]                   base::names(opts) <- ...future.futureOptionsAdded
[10:25:36.592]                   base::options(opts)
[10:25:36.592]                 }
[10:25:36.592]                 {
[10:25:36.592]                   {
[10:25:36.592]                     NULL
[10:25:36.592]                     RNGkind("Mersenne-Twister")
[10:25:36.592]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[10:25:36.592]                       inherits = FALSE)
[10:25:36.592]                   }
[10:25:36.592]                   options(future.plan = NULL)
[10:25:36.592]                   if (is.na(NA_character_)) 
[10:25:36.592]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:25:36.592]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:25:36.592]                   future::plan(list(function (..., envir = parent.frame()) 
[10:25:36.592]                   {
[10:25:36.592]                     future <- SequentialFuture(..., envir = envir)
[10:25:36.592]                     if (!future$lazy) 
[10:25:36.592]                       future <- run(future)
[10:25:36.592]                     invisible(future)
[10:25:36.592]                   }), .cleanup = FALSE, .init = FALSE)
[10:25:36.592]                 }
[10:25:36.592]             }
[10:25:36.592]         }
[10:25:36.592]     })
[10:25:36.592]     if (TRUE) {
[10:25:36.592]         base::sink(type = "output", split = FALSE)
[10:25:36.592]         if (TRUE) {
[10:25:36.592]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:25:36.592]         }
[10:25:36.592]         else {
[10:25:36.592]             ...future.result["stdout"] <- base::list(NULL)
[10:25:36.592]         }
[10:25:36.592]         base::close(...future.stdout)
[10:25:36.592]         ...future.stdout <- NULL
[10:25:36.592]     }
[10:25:36.592]     ...future.result$conditions <- ...future.conditions
[10:25:36.592]     ...future.result$finished <- base::Sys.time()
[10:25:36.592]     ...future.result
[10:25:36.592] }
[10:25:36.593] plan(): Setting new future strategy stack:
[10:25:36.593] List of future strategies:
[10:25:36.593] 1. sequential:
[10:25:36.593]    - args: function (..., envir = parent.frame())
[10:25:36.593]    - tweaked: FALSE
[10:25:36.593]    - call: NULL
[10:25:36.594] plan(): nbrOfWorkers() = 1
[10:25:36.594] plan(): Setting new future strategy stack:
[10:25:36.594] List of future strategies:
[10:25:36.594] 1. sequential:
[10:25:36.594]    - args: function (..., envir = parent.frame())
[10:25:36.594]    - tweaked: FALSE
[10:25:36.594]    - call: plan(strategy)
[10:25:36.595] plan(): nbrOfWorkers() = 1
[10:25:36.595] SequentialFuture started (and completed)
[10:25:36.595] - Launch lazy future ... done
[10:25:36.595] run() for ‘SequentialFuture’ ... done
c = 1
[10:25:36.596] getGlobalsAndPackages() ...
[10:25:36.596] Searching for globals...
[10:25:36.596] 
[10:25:36.596] Searching for globals ... DONE
[10:25:36.596] - globals: [0] <none>
[10:25:36.596] getGlobalsAndPackages() ... DONE
[10:25:36.596] run() for ‘Future’ ...
[10:25:36.596] - state: ‘created’
[10:25:36.597] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:25:36.597] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[10:25:36.597] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[10:25:36.597]   - Field: ‘label’
[10:25:36.597]   - Field: ‘local’
[10:25:36.597]   - Field: ‘owner’
[10:25:36.597]   - Field: ‘envir’
[10:25:36.597]   - Field: ‘packages’
[10:25:36.598]   - Field: ‘gc’
[10:25:36.598]   - Field: ‘conditions’
[10:25:36.598]   - Field: ‘expr’
[10:25:36.598]   - Field: ‘uuid’
[10:25:36.598]   - Field: ‘seed’
[10:25:36.598]   - Field: ‘version’
[10:25:36.598]   - Field: ‘result’
[10:25:36.598]   - Field: ‘asynchronous’
[10:25:36.598]   - Field: ‘calls’
[10:25:36.598]   - Field: ‘globals’
[10:25:36.598]   - Field: ‘stdout’
[10:25:36.598]   - Field: ‘earlySignal’
[10:25:36.599]   - Field: ‘lazy’
[10:25:36.599]   - Field: ‘state’
[10:25:36.599] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[10:25:36.599] - Launch lazy future ...
[10:25:36.599] Packages needed by the future expression (n = 0): <none>
[10:25:36.599] Packages needed by future strategies (n = 0): <none>
[10:25:36.599] {
[10:25:36.599]     {
[10:25:36.599]         {
[10:25:36.599]             ...future.startTime <- base::Sys.time()
[10:25:36.599]             {
[10:25:36.599]                 {
[10:25:36.599]                   {
[10:25:36.599]                     base::local({
[10:25:36.599]                       has_future <- base::requireNamespace("future", 
[10:25:36.599]                         quietly = TRUE)
[10:25:36.599]                       if (has_future) {
[10:25:36.599]                         ns <- base::getNamespace("future")
[10:25:36.599]                         version <- ns[[".package"]][["version"]]
[10:25:36.599]                         if (is.null(version)) 
[10:25:36.599]                           version <- utils::packageVersion("future")
[10:25:36.599]                       }
[10:25:36.599]                       else {
[10:25:36.599]                         version <- NULL
[10:25:36.599]                       }
[10:25:36.599]                       if (!has_future || version < "1.8.0") {
[10:25:36.599]                         info <- base::c(r_version = base::gsub("R version ", 
[10:25:36.599]                           "", base::R.version$version.string), 
[10:25:36.599]                           platform = base::sprintf("%s (%s-bit)", 
[10:25:36.599]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:25:36.599]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[10:25:36.599]                             "release", "version")], collapse = " "), 
[10:25:36.599]                           hostname = base::Sys.info()[["nodename"]])
[10:25:36.599]                         info <- base::sprintf("%s: %s", base::names(info), 
[10:25:36.599]                           info)
[10:25:36.599]                         info <- base::paste(info, collapse = "; ")
[10:25:36.599]                         if (!has_future) {
[10:25:36.599]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:25:36.599]                             info)
[10:25:36.599]                         }
[10:25:36.599]                         else {
[10:25:36.599]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:25:36.599]                             info, version)
[10:25:36.599]                         }
[10:25:36.599]                         base::stop(msg)
[10:25:36.599]                       }
[10:25:36.599]                     })
[10:25:36.599]                   }
[10:25:36.599]                   options(future.plan = NULL)
[10:25:36.599]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:25:36.599]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:25:36.599]                 }
[10:25:36.599]                 ...future.workdir <- getwd()
[10:25:36.599]             }
[10:25:36.599]             ...future.oldOptions <- base::as.list(base::.Options)
[10:25:36.599]             ...future.oldEnvVars <- base::Sys.getenv()
[10:25:36.599]         }
[10:25:36.599]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:25:36.599]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[10:25:36.599]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:25:36.599]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:25:36.599]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:25:36.599]             future.stdout.windows.reencode = NULL, width = 80L)
[10:25:36.599]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:25:36.599]             base::names(...future.oldOptions))
[10:25:36.599]     }
[10:25:36.599]     if (FALSE) {
[10:25:36.599]     }
[10:25:36.599]     else {
[10:25:36.599]         if (TRUE) {
[10:25:36.599]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:25:36.599]                 open = "w")
[10:25:36.599]         }
[10:25:36.599]         else {
[10:25:36.599]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:25:36.599]                 windows = "NUL", "/dev/null"), open = "w")
[10:25:36.599]         }
[10:25:36.599]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:25:36.599]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:25:36.599]             base::sink(type = "output", split = FALSE)
[10:25:36.599]             base::close(...future.stdout)
[10:25:36.599]         }, add = TRUE)
[10:25:36.599]     }
[10:25:36.599]     ...future.frame <- base::sys.nframe()
[10:25:36.599]     ...future.conditions <- base::list()
[10:25:36.599]     ...future.rng <- base::globalenv()$.Random.seed
[10:25:36.599]     if (FALSE) {
[10:25:36.599]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:25:36.599]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:25:36.599]     }
[10:25:36.599]     ...future.result <- base::tryCatch({
[10:25:36.599]         base::withCallingHandlers({
[10:25:36.599]             ...future.value <- base::withVisible(base::local(1))
[10:25:36.599]             future::FutureResult(value = ...future.value$value, 
[10:25:36.599]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:25:36.599]                   ...future.rng), globalenv = if (FALSE) 
[10:25:36.599]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:25:36.599]                     ...future.globalenv.names))
[10:25:36.599]                 else NULL, started = ...future.startTime, version = "1.8")
[10:25:36.599]         }, condition = base::local({
[10:25:36.599]             c <- base::c
[10:25:36.599]             inherits <- base::inherits
[10:25:36.599]             invokeRestart <- base::invokeRestart
[10:25:36.599]             length <- base::length
[10:25:36.599]             list <- base::list
[10:25:36.599]             seq.int <- base::seq.int
[10:25:36.599]             signalCondition <- base::signalCondition
[10:25:36.599]             sys.calls <- base::sys.calls
[10:25:36.599]             `[[` <- base::`[[`
[10:25:36.599]             `+` <- base::`+`
[10:25:36.599]             `<<-` <- base::`<<-`
[10:25:36.599]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:25:36.599]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:25:36.599]                   3L)]
[10:25:36.599]             }
[10:25:36.599]             function(cond) {
[10:25:36.599]                 is_error <- inherits(cond, "error")
[10:25:36.599]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:25:36.599]                   NULL)
[10:25:36.599]                 if (is_error) {
[10:25:36.599]                   sessionInformation <- function() {
[10:25:36.599]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:25:36.599]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:25:36.599]                       search = base::search(), system = base::Sys.info())
[10:25:36.599]                   }
[10:25:36.599]                   ...future.conditions[[length(...future.conditions) + 
[10:25:36.599]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:25:36.599]                     cond$call), session = sessionInformation(), 
[10:25:36.599]                     timestamp = base::Sys.time(), signaled = 0L)
[10:25:36.599]                   signalCondition(cond)
[10:25:36.599]                 }
[10:25:36.599]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:25:36.599]                 "immediateCondition"))) {
[10:25:36.599]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:25:36.599]                   ...future.conditions[[length(...future.conditions) + 
[10:25:36.599]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:25:36.599]                   if (TRUE && !signal) {
[10:25:36.599]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:25:36.599]                     {
[10:25:36.599]                       inherits <- base::inherits
[10:25:36.599]                       invokeRestart <- base::invokeRestart
[10:25:36.599]                       is.null <- base::is.null
[10:25:36.599]                       muffled <- FALSE
[10:25:36.599]                       if (inherits(cond, "message")) {
[10:25:36.599]                         muffled <- grepl(pattern, "muffleMessage")
[10:25:36.599]                         if (muffled) 
[10:25:36.599]                           invokeRestart("muffleMessage")
[10:25:36.599]                       }
[10:25:36.599]                       else if (inherits(cond, "warning")) {
[10:25:36.599]                         muffled <- grepl(pattern, "muffleWarning")
[10:25:36.599]                         if (muffled) 
[10:25:36.599]                           invokeRestart("muffleWarning")
[10:25:36.599]                       }
[10:25:36.599]                       else if (inherits(cond, "condition")) {
[10:25:36.599]                         if (!is.null(pattern)) {
[10:25:36.599]                           computeRestarts <- base::computeRestarts
[10:25:36.599]                           grepl <- base::grepl
[10:25:36.599]                           restarts <- computeRestarts(cond)
[10:25:36.599]                           for (restart in restarts) {
[10:25:36.599]                             name <- restart$name
[10:25:36.599]                             if (is.null(name)) 
[10:25:36.599]                               next
[10:25:36.599]                             if (!grepl(pattern, name)) 
[10:25:36.599]                               next
[10:25:36.599]                             invokeRestart(restart)
[10:25:36.599]                             muffled <- TRUE
[10:25:36.599]                             break
[10:25:36.599]                           }
[10:25:36.599]                         }
[10:25:36.599]                       }
[10:25:36.599]                       invisible(muffled)
[10:25:36.599]                     }
[10:25:36.599]                     muffleCondition(cond, pattern = "^muffle")
[10:25:36.599]                   }
[10:25:36.599]                 }
[10:25:36.599]                 else {
[10:25:36.599]                   if (TRUE) {
[10:25:36.599]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:25:36.599]                     {
[10:25:36.599]                       inherits <- base::inherits
[10:25:36.599]                       invokeRestart <- base::invokeRestart
[10:25:36.599]                       is.null <- base::is.null
[10:25:36.599]                       muffled <- FALSE
[10:25:36.599]                       if (inherits(cond, "message")) {
[10:25:36.599]                         muffled <- grepl(pattern, "muffleMessage")
[10:25:36.599]                         if (muffled) 
[10:25:36.599]                           invokeRestart("muffleMessage")
[10:25:36.599]                       }
[10:25:36.599]                       else if (inherits(cond, "warning")) {
[10:25:36.599]                         muffled <- grepl(pattern, "muffleWarning")
[10:25:36.599]                         if (muffled) 
[10:25:36.599]                           invokeRestart("muffleWarning")
[10:25:36.599]                       }
[10:25:36.599]                       else if (inherits(cond, "condition")) {
[10:25:36.599]                         if (!is.null(pattern)) {
[10:25:36.599]                           computeRestarts <- base::computeRestarts
[10:25:36.599]                           grepl <- base::grepl
[10:25:36.599]                           restarts <- computeRestarts(cond)
[10:25:36.599]                           for (restart in restarts) {
[10:25:36.599]                             name <- restart$name
[10:25:36.599]                             if (is.null(name)) 
[10:25:36.599]                               next
[10:25:36.599]                             if (!grepl(pattern, name)) 
[10:25:36.599]                               next
[10:25:36.599]                             invokeRestart(restart)
[10:25:36.599]                             muffled <- TRUE
[10:25:36.599]                             break
[10:25:36.599]                           }
[10:25:36.599]                         }
[10:25:36.599]                       }
[10:25:36.599]                       invisible(muffled)
[10:25:36.599]                     }
[10:25:36.599]                     muffleCondition(cond, pattern = "^muffle")
[10:25:36.599]                   }
[10:25:36.599]                 }
[10:25:36.599]             }
[10:25:36.599]         }))
[10:25:36.599]     }, error = function(ex) {
[10:25:36.599]         base::structure(base::list(value = NULL, visible = NULL, 
[10:25:36.599]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:25:36.599]                 ...future.rng), started = ...future.startTime, 
[10:25:36.599]             finished = Sys.time(), session_uuid = NA_character_, 
[10:25:36.599]             version = "1.8"), class = "FutureResult")
[10:25:36.599]     }, finally = {
[10:25:36.599]         if (!identical(...future.workdir, getwd())) 
[10:25:36.599]             setwd(...future.workdir)
[10:25:36.599]         {
[10:25:36.599]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:25:36.599]                 ...future.oldOptions$nwarnings <- NULL
[10:25:36.599]             }
[10:25:36.599]             base::options(...future.oldOptions)
[10:25:36.599]             if (.Platform$OS.type == "windows") {
[10:25:36.599]                 old_names <- names(...future.oldEnvVars)
[10:25:36.599]                 envs <- base::Sys.getenv()
[10:25:36.599]                 names <- names(envs)
[10:25:36.599]                 common <- intersect(names, old_names)
[10:25:36.599]                 added <- setdiff(names, old_names)
[10:25:36.599]                 removed <- setdiff(old_names, names)
[10:25:36.599]                 changed <- common[...future.oldEnvVars[common] != 
[10:25:36.599]                   envs[common]]
[10:25:36.599]                 NAMES <- toupper(changed)
[10:25:36.599]                 args <- list()
[10:25:36.599]                 for (kk in seq_along(NAMES)) {
[10:25:36.599]                   name <- changed[[kk]]
[10:25:36.599]                   NAME <- NAMES[[kk]]
[10:25:36.599]                   if (name != NAME && is.element(NAME, old_names)) 
[10:25:36.599]                     next
[10:25:36.599]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:25:36.599]                 }
[10:25:36.599]                 NAMES <- toupper(added)
[10:25:36.599]                 for (kk in seq_along(NAMES)) {
[10:25:36.599]                   name <- added[[kk]]
[10:25:36.599]                   NAME <- NAMES[[kk]]
[10:25:36.599]                   if (name != NAME && is.element(NAME, old_names)) 
[10:25:36.599]                     next
[10:25:36.599]                   args[[name]] <- ""
[10:25:36.599]                 }
[10:25:36.599]                 NAMES <- toupper(removed)
[10:25:36.599]                 for (kk in seq_along(NAMES)) {
[10:25:36.599]                   name <- removed[[kk]]
[10:25:36.599]                   NAME <- NAMES[[kk]]
[10:25:36.599]                   if (name != NAME && is.element(NAME, old_names)) 
[10:25:36.599]                     next
[10:25:36.599]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:25:36.599]                 }
[10:25:36.599]                 if (length(args) > 0) 
[10:25:36.599]                   base::do.call(base::Sys.setenv, args = args)
[10:25:36.599]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:25:36.599]             }
[10:25:36.599]             else {
[10:25:36.599]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:25:36.599]             }
[10:25:36.599]             {
[10:25:36.599]                 if (base::length(...future.futureOptionsAdded) > 
[10:25:36.599]                   0L) {
[10:25:36.599]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:25:36.599]                   base::names(opts) <- ...future.futureOptionsAdded
[10:25:36.599]                   base::options(opts)
[10:25:36.599]                 }
[10:25:36.599]                 {
[10:25:36.599]                   {
[10:25:36.599]                     NULL
[10:25:36.599]                     RNGkind("Mersenne-Twister")
[10:25:36.599]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[10:25:36.599]                       inherits = FALSE)
[10:25:36.599]                   }
[10:25:36.599]                   options(future.plan = NULL)
[10:25:36.599]                   if (is.na(NA_character_)) 
[10:25:36.599]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:25:36.599]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:25:36.599]                   future::plan(list(function (..., envir = parent.frame()) 
[10:25:36.599]                   {
[10:25:36.599]                     future <- SequentialFuture(..., envir = envir)
[10:25:36.599]                     if (!future$lazy) 
[10:25:36.599]                       future <- run(future)
[10:25:36.599]                     invisible(future)
[10:25:36.599]                   }), .cleanup = FALSE, .init = FALSE)
[10:25:36.599]                 }
[10:25:36.599]             }
[10:25:36.599]         }
[10:25:36.599]     })
[10:25:36.599]     if (TRUE) {
[10:25:36.599]         base::sink(type = "output", split = FALSE)
[10:25:36.599]         if (TRUE) {
[10:25:36.599]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:25:36.599]         }
[10:25:36.599]         else {
[10:25:36.599]             ...future.result["stdout"] <- base::list(NULL)
[10:25:36.599]         }
[10:25:36.599]         base::close(...future.stdout)
[10:25:36.599]         ...future.stdout <- NULL
[10:25:36.599]     }
[10:25:36.599]     ...future.result$conditions <- ...future.conditions
[10:25:36.599]     ...future.result$finished <- base::Sys.time()
[10:25:36.599]     ...future.result
[10:25:36.599] }
[10:25:36.601] plan(): Setting new future strategy stack:
[10:25:36.601] List of future strategies:
[10:25:36.601] 1. sequential:
[10:25:36.601]    - args: function (..., envir = parent.frame())
[10:25:36.601]    - tweaked: FALSE
[10:25:36.601]    - call: NULL
[10:25:36.602] plan(): nbrOfWorkers() = 1
[10:25:36.602] plan(): Setting new future strategy stack:
[10:25:36.602] List of future strategies:
[10:25:36.602] 1. sequential:
[10:25:36.602]    - args: function (..., envir = parent.frame())
[10:25:36.602]    - tweaked: FALSE
[10:25:36.602]    - call: plan(strategy)
[10:25:36.603] plan(): nbrOfWorkers() = 1
[10:25:36.603] SequentialFuture started (and completed)
[10:25:36.603] - Launch lazy future ... done
[10:25:36.603] run() for ‘SequentialFuture’ ... done
d = 1
** Nested future assignments
[10:25:36.603] getGlobalsAndPackages() ...
[10:25:36.604] Searching for globals...
[10:25:36.609] - globals found: [5] ‘{’, ‘<-’, ‘%<-%’, ‘%->%’, ‘+’
[10:25:36.609] Searching for globals ... DONE
[10:25:36.609] Resolving globals: FALSE
[10:25:36.609] 
[10:25:36.609] - packages: [1] ‘future’
[10:25:36.609] getGlobalsAndPackages() ... DONE
[10:25:36.610] run() for ‘Future’ ...
[10:25:36.610] - state: ‘created’
[10:25:36.610] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:25:36.610] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[10:25:36.610] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[10:25:36.610]   - Field: ‘label’
[10:25:36.610]   - Field: ‘local’
[10:25:36.610]   - Field: ‘owner’
[10:25:36.611]   - Field: ‘envir’
[10:25:36.611]   - Field: ‘packages’
[10:25:36.611]   - Field: ‘gc’
[10:25:36.611]   - Field: ‘conditions’
[10:25:36.611]   - Field: ‘expr’
[10:25:36.611]   - Field: ‘uuid’
[10:25:36.611]   - Field: ‘seed’
[10:25:36.611]   - Field: ‘version’
[10:25:36.611]   - Field: ‘result’
[10:25:36.611]   - Field: ‘asynchronous’
[10:25:36.611]   - Field: ‘calls’
[10:25:36.611]   - Field: ‘globals’
[10:25:36.612]   - Field: ‘stdout’
[10:25:36.612]   - Field: ‘earlySignal’
[10:25:36.612]   - Field: ‘lazy’
[10:25:36.612]   - Field: ‘state’
[10:25:36.612] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[10:25:36.612] - Launch lazy future ...
[10:25:36.612] Packages needed by the future expression (n = 1): ‘future’
[10:25:36.612] Packages needed by future strategies (n = 0): <none>
[10:25:36.613] {
[10:25:36.613]     {
[10:25:36.613]         {
[10:25:36.613]             ...future.startTime <- base::Sys.time()
[10:25:36.613]             {
[10:25:36.613]                 {
[10:25:36.613]                   {
[10:25:36.613]                     {
[10:25:36.613]                       base::local({
[10:25:36.613]                         has_future <- base::requireNamespace("future", 
[10:25:36.613]                           quietly = TRUE)
[10:25:36.613]                         if (has_future) {
[10:25:36.613]                           ns <- base::getNamespace("future")
[10:25:36.613]                           version <- ns[[".package"]][["version"]]
[10:25:36.613]                           if (is.null(version)) 
[10:25:36.613]                             version <- utils::packageVersion("future")
[10:25:36.613]                         }
[10:25:36.613]                         else {
[10:25:36.613]                           version <- NULL
[10:25:36.613]                         }
[10:25:36.613]                         if (!has_future || version < "1.8.0") {
[10:25:36.613]                           info <- base::c(r_version = base::gsub("R version ", 
[10:25:36.613]                             "", base::R.version$version.string), 
[10:25:36.613]                             platform = base::sprintf("%s (%s-bit)", 
[10:25:36.613]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:25:36.613]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[10:25:36.613]                               "release", "version")], collapse = " "), 
[10:25:36.613]                             hostname = base::Sys.info()[["nodename"]])
[10:25:36.613]                           info <- base::sprintf("%s: %s", base::names(info), 
[10:25:36.613]                             info)
[10:25:36.613]                           info <- base::paste(info, collapse = "; ")
[10:25:36.613]                           if (!has_future) {
[10:25:36.613]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:25:36.613]                               info)
[10:25:36.613]                           }
[10:25:36.613]                           else {
[10:25:36.613]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:25:36.613]                               info, version)
[10:25:36.613]                           }
[10:25:36.613]                           base::stop(msg)
[10:25:36.613]                         }
[10:25:36.613]                       })
[10:25:36.613]                     }
[10:25:36.613]                     base::local({
[10:25:36.613]                       for (pkg in "future") {
[10:25:36.613]                         base::loadNamespace(pkg)
[10:25:36.613]                         base::library(pkg, character.only = TRUE)
[10:25:36.613]                       }
[10:25:36.613]                     })
[10:25:36.613]                   }
[10:25:36.613]                   options(future.plan = NULL)
[10:25:36.613]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:25:36.613]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:25:36.613]                 }
[10:25:36.613]                 ...future.workdir <- getwd()
[10:25:36.613]             }
[10:25:36.613]             ...future.oldOptions <- base::as.list(base::.Options)
[10:25:36.613]             ...future.oldEnvVars <- base::Sys.getenv()
[10:25:36.613]         }
[10:25:36.613]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:25:36.613]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[10:25:36.613]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:25:36.613]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:25:36.613]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:25:36.613]             future.stdout.windows.reencode = NULL, width = 80L)
[10:25:36.613]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:25:36.613]             base::names(...future.oldOptions))
[10:25:36.613]     }
[10:25:36.613]     if (FALSE) {
[10:25:36.613]     }
[10:25:36.613]     else {
[10:25:36.613]         if (TRUE) {
[10:25:36.613]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:25:36.613]                 open = "w")
[10:25:36.613]         }
[10:25:36.613]         else {
[10:25:36.613]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:25:36.613]                 windows = "NUL", "/dev/null"), open = "w")
[10:25:36.613]         }
[10:25:36.613]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:25:36.613]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:25:36.613]             base::sink(type = "output", split = FALSE)
[10:25:36.613]             base::close(...future.stdout)
[10:25:36.613]         }, add = TRUE)
[10:25:36.613]     }
[10:25:36.613]     ...future.frame <- base::sys.nframe()
[10:25:36.613]     ...future.conditions <- base::list()
[10:25:36.613]     ...future.rng <- base::globalenv()$.Random.seed
[10:25:36.613]     if (FALSE) {
[10:25:36.613]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:25:36.613]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:25:36.613]     }
[10:25:36.613]     ...future.result <- base::tryCatch({
[10:25:36.613]         base::withCallingHandlers({
[10:25:36.613]             ...future.value <- base::withVisible(base::local({
[10:25:36.613]                 b <- 1
[10:25:36.613]                 c %<-% 2
[10:25:36.613]                 d <- 3
[10:25:36.613]                 4 %->% e
[10:25:36.613]                 b + c + d + e
[10:25:36.613]             }))
[10:25:36.613]             future::FutureResult(value = ...future.value$value, 
[10:25:36.613]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:25:36.613]                   ...future.rng), globalenv = if (FALSE) 
[10:25:36.613]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:25:36.613]                     ...future.globalenv.names))
[10:25:36.613]                 else NULL, started = ...future.startTime, version = "1.8")
[10:25:36.613]         }, condition = base::local({
[10:25:36.613]             c <- base::c
[10:25:36.613]             inherits <- base::inherits
[10:25:36.613]             invokeRestart <- base::invokeRestart
[10:25:36.613]             length <- base::length
[10:25:36.613]             list <- base::list
[10:25:36.613]             seq.int <- base::seq.int
[10:25:36.613]             signalCondition <- base::signalCondition
[10:25:36.613]             sys.calls <- base::sys.calls
[10:25:36.613]             `[[` <- base::`[[`
[10:25:36.613]             `+` <- base::`+`
[10:25:36.613]             `<<-` <- base::`<<-`
[10:25:36.613]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:25:36.613]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:25:36.613]                   3L)]
[10:25:36.613]             }
[10:25:36.613]             function(cond) {
[10:25:36.613]                 is_error <- inherits(cond, "error")
[10:25:36.613]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:25:36.613]                   NULL)
[10:25:36.613]                 if (is_error) {
[10:25:36.613]                   sessionInformation <- function() {
[10:25:36.613]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:25:36.613]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:25:36.613]                       search = base::search(), system = base::Sys.info())
[10:25:36.613]                   }
[10:25:36.613]                   ...future.conditions[[length(...future.conditions) + 
[10:25:36.613]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:25:36.613]                     cond$call), session = sessionInformation(), 
[10:25:36.613]                     timestamp = base::Sys.time(), signaled = 0L)
[10:25:36.613]                   signalCondition(cond)
[10:25:36.613]                 }
[10:25:36.613]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:25:36.613]                 "immediateCondition"))) {
[10:25:36.613]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:25:36.613]                   ...future.conditions[[length(...future.conditions) + 
[10:25:36.613]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:25:36.613]                   if (TRUE && !signal) {
[10:25:36.613]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:25:36.613]                     {
[10:25:36.613]                       inherits <- base::inherits
[10:25:36.613]                       invokeRestart <- base::invokeRestart
[10:25:36.613]                       is.null <- base::is.null
[10:25:36.613]                       muffled <- FALSE
[10:25:36.613]                       if (inherits(cond, "message")) {
[10:25:36.613]                         muffled <- grepl(pattern, "muffleMessage")
[10:25:36.613]                         if (muffled) 
[10:25:36.613]                           invokeRestart("muffleMessage")
[10:25:36.613]                       }
[10:25:36.613]                       else if (inherits(cond, "warning")) {
[10:25:36.613]                         muffled <- grepl(pattern, "muffleWarning")
[10:25:36.613]                         if (muffled) 
[10:25:36.613]                           invokeRestart("muffleWarning")
[10:25:36.613]                       }
[10:25:36.613]                       else if (inherits(cond, "condition")) {
[10:25:36.613]                         if (!is.null(pattern)) {
[10:25:36.613]                           computeRestarts <- base::computeRestarts
[10:25:36.613]                           grepl <- base::grepl
[10:25:36.613]                           restarts <- computeRestarts(cond)
[10:25:36.613]                           for (restart in restarts) {
[10:25:36.613]                             name <- restart$name
[10:25:36.613]                             if (is.null(name)) 
[10:25:36.613]                               next
[10:25:36.613]                             if (!grepl(pattern, name)) 
[10:25:36.613]                               next
[10:25:36.613]                             invokeRestart(restart)
[10:25:36.613]                             muffled <- TRUE
[10:25:36.613]                             break
[10:25:36.613]                           }
[10:25:36.613]                         }
[10:25:36.613]                       }
[10:25:36.613]                       invisible(muffled)
[10:25:36.613]                     }
[10:25:36.613]                     muffleCondition(cond, pattern = "^muffle")
[10:25:36.613]                   }
[10:25:36.613]                 }
[10:25:36.613]                 else {
[10:25:36.613]                   if (TRUE) {
[10:25:36.613]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:25:36.613]                     {
[10:25:36.613]                       inherits <- base::inherits
[10:25:36.613]                       invokeRestart <- base::invokeRestart
[10:25:36.613]                       is.null <- base::is.null
[10:25:36.613]                       muffled <- FALSE
[10:25:36.613]                       if (inherits(cond, "message")) {
[10:25:36.613]                         muffled <- grepl(pattern, "muffleMessage")
[10:25:36.613]                         if (muffled) 
[10:25:36.613]                           invokeRestart("muffleMessage")
[10:25:36.613]                       }
[10:25:36.613]                       else if (inherits(cond, "warning")) {
[10:25:36.613]                         muffled <- grepl(pattern, "muffleWarning")
[10:25:36.613]                         if (muffled) 
[10:25:36.613]                           invokeRestart("muffleWarning")
[10:25:36.613]                       }
[10:25:36.613]                       else if (inherits(cond, "condition")) {
[10:25:36.613]                         if (!is.null(pattern)) {
[10:25:36.613]                           computeRestarts <- base::computeRestarts
[10:25:36.613]                           grepl <- base::grepl
[10:25:36.613]                           restarts <- computeRestarts(cond)
[10:25:36.613]                           for (restart in restarts) {
[10:25:36.613]                             name <- restart$name
[10:25:36.613]                             if (is.null(name)) 
[10:25:36.613]                               next
[10:25:36.613]                             if (!grepl(pattern, name)) 
[10:25:36.613]                               next
[10:25:36.613]                             invokeRestart(restart)
[10:25:36.613]                             muffled <- TRUE
[10:25:36.613]                             break
[10:25:36.613]                           }
[10:25:36.613]                         }
[10:25:36.613]                       }
[10:25:36.613]                       invisible(muffled)
[10:25:36.613]                     }
[10:25:36.613]                     muffleCondition(cond, pattern = "^muffle")
[10:25:36.613]                   }
[10:25:36.613]                 }
[10:25:36.613]             }
[10:25:36.613]         }))
[10:25:36.613]     }, error = function(ex) {
[10:25:36.613]         base::structure(base::list(value = NULL, visible = NULL, 
[10:25:36.613]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:25:36.613]                 ...future.rng), started = ...future.startTime, 
[10:25:36.613]             finished = Sys.time(), session_uuid = NA_character_, 
[10:25:36.613]             version = "1.8"), class = "FutureResult")
[10:25:36.613]     }, finally = {
[10:25:36.613]         if (!identical(...future.workdir, getwd())) 
[10:25:36.613]             setwd(...future.workdir)
[10:25:36.613]         {
[10:25:36.613]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:25:36.613]                 ...future.oldOptions$nwarnings <- NULL
[10:25:36.613]             }
[10:25:36.613]             base::options(...future.oldOptions)
[10:25:36.613]             if (.Platform$OS.type == "windows") {
[10:25:36.613]                 old_names <- names(...future.oldEnvVars)
[10:25:36.613]                 envs <- base::Sys.getenv()
[10:25:36.613]                 names <- names(envs)
[10:25:36.613]                 common <- intersect(names, old_names)
[10:25:36.613]                 added <- setdiff(names, old_names)
[10:25:36.613]                 removed <- setdiff(old_names, names)
[10:25:36.613]                 changed <- common[...future.oldEnvVars[common] != 
[10:25:36.613]                   envs[common]]
[10:25:36.613]                 NAMES <- toupper(changed)
[10:25:36.613]                 args <- list()
[10:25:36.613]                 for (kk in seq_along(NAMES)) {
[10:25:36.613]                   name <- changed[[kk]]
[10:25:36.613]                   NAME <- NAMES[[kk]]
[10:25:36.613]                   if (name != NAME && is.element(NAME, old_names)) 
[10:25:36.613]                     next
[10:25:36.613]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:25:36.613]                 }
[10:25:36.613]                 NAMES <- toupper(added)
[10:25:36.613]                 for (kk in seq_along(NAMES)) {
[10:25:36.613]                   name <- added[[kk]]
[10:25:36.613]                   NAME <- NAMES[[kk]]
[10:25:36.613]                   if (name != NAME && is.element(NAME, old_names)) 
[10:25:36.613]                     next
[10:25:36.613]                   args[[name]] <- ""
[10:25:36.613]                 }
[10:25:36.613]                 NAMES <- toupper(removed)
[10:25:36.613]                 for (kk in seq_along(NAMES)) {
[10:25:36.613]                   name <- removed[[kk]]
[10:25:36.613]                   NAME <- NAMES[[kk]]
[10:25:36.613]                   if (name != NAME && is.element(NAME, old_names)) 
[10:25:36.613]                     next
[10:25:36.613]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:25:36.613]                 }
[10:25:36.613]                 if (length(args) > 0) 
[10:25:36.613]                   base::do.call(base::Sys.setenv, args = args)
[10:25:36.613]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:25:36.613]             }
[10:25:36.613]             else {
[10:25:36.613]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:25:36.613]             }
[10:25:36.613]             {
[10:25:36.613]                 if (base::length(...future.futureOptionsAdded) > 
[10:25:36.613]                   0L) {
[10:25:36.613]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:25:36.613]                   base::names(opts) <- ...future.futureOptionsAdded
[10:25:36.613]                   base::options(opts)
[10:25:36.613]                 }
[10:25:36.613]                 {
[10:25:36.613]                   {
[10:25:36.613]                     NULL
[10:25:36.613]                     RNGkind("Mersenne-Twister")
[10:25:36.613]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[10:25:36.613]                       inherits = FALSE)
[10:25:36.613]                   }
[10:25:36.613]                   options(future.plan = NULL)
[10:25:36.613]                   if (is.na(NA_character_)) 
[10:25:36.613]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:25:36.613]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:25:36.613]                   future::plan(list(function (..., envir = parent.frame()) 
[10:25:36.613]                   {
[10:25:36.613]                     future <- SequentialFuture(..., envir = envir)
[10:25:36.613]                     if (!future$lazy) 
[10:25:36.613]                       future <- run(future)
[10:25:36.613]                     invisible(future)
[10:25:36.613]                   }), .cleanup = FALSE, .init = FALSE)
[10:25:36.613]                 }
[10:25:36.613]             }
[10:25:36.613]         }
[10:25:36.613]     })
[10:25:36.613]     if (TRUE) {
[10:25:36.613]         base::sink(type = "output", split = FALSE)
[10:25:36.613]         if (TRUE) {
[10:25:36.613]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:25:36.613]         }
[10:25:36.613]         else {
[10:25:36.613]             ...future.result["stdout"] <- base::list(NULL)
[10:25:36.613]         }
[10:25:36.613]         base::close(...future.stdout)
[10:25:36.613]         ...future.stdout <- NULL
[10:25:36.613]     }
[10:25:36.613]     ...future.result$conditions <- ...future.conditions
[10:25:36.613]     ...future.result$finished <- base::Sys.time()
[10:25:36.613]     ...future.result
[10:25:36.613] }
[10:25:36.616] plan(): Setting new future strategy stack:
[10:25:36.616] List of future strategies:
[10:25:36.616] 1. sequential:
[10:25:36.616]    - args: function (..., envir = parent.frame())
[10:25:36.616]    - tweaked: FALSE
[10:25:36.616]    - call: NULL
[10:25:36.616] plan(): nbrOfWorkers() = 1
[10:25:36.647] plan(): Setting new future strategy stack:
[10:25:36.647] List of future strategies:
[10:25:36.647] 1. sequential:
[10:25:36.647]    - args: function (..., envir = parent.frame())
[10:25:36.647]    - tweaked: FALSE
[10:25:36.647]    - call: plan(strategy)
[10:25:36.648] plan(): nbrOfWorkers() = 1
[10:25:36.648] SequentialFuture started (and completed)
[10:25:36.648] signalConditions() ...
[10:25:36.648]  - include = ‘immediateCondition’
[10:25:36.648]  - exclude = 
[10:25:36.648]  - resignal = FALSE
[10:25:36.648]  - Number of conditions: 88
[10:25:36.648] signalConditions() ... done
[10:25:36.648] - Launch lazy future ... done
[10:25:36.648] run() for ‘SequentialFuture’ ... done
[10:25:36.649] signalConditions() ...
[10:25:36.649]  - include = ‘immediateCondition’
[10:25:36.649]  - exclude = 
[10:25:36.649]  - resignal = FALSE
[10:25:36.649]  - Number of conditions: 88
[10:25:36.649] signalConditions() ... done
[10:25:36.649] Future state: ‘finished’
[10:25:36.649] signalConditions() ...
[10:25:36.649]  - include = ‘condition’
[10:25:36.649]  - exclude = ‘immediateCondition’
[10:25:36.650]  - resignal = TRUE
[10:25:36.650]  - Number of conditions: 88
[10:25:36.650]  - Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[10:25:36.617] getGlobalsAndPackages() ...
[10:25:36.650]  - Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
[10:25:36.617] Searching for globals...
[10:25:36.650]  - Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[10:25:36.629] 
[10:25:36.650]  - Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[10:25:36.630] Searching for globals ... DONE
[10:25:36.650]  - Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[10:25:36.630] - globals: [0] <none>
[10:25:36.650]  - Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[10:25:36.630] getGlobalsAndPackages() ... DONE
[10:25:36.651]  - Condition #7: ‘simpleMessage’, ‘message’, ‘condition’
[10:25:36.630] run() for ‘Future’ ...
[10:25:36.651]  - Condition #8: ‘simpleMessage’, ‘message’, ‘condition’
[10:25:36.630] - state: ‘created’
[10:25:36.651]  - Condition #9: ‘simpleMessage’, ‘message’, ‘condition’
[10:25:36.630] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:25:36.651]  - Condition #10: ‘simpleMessage’, ‘message’, ‘condition’
[10:25:36.631] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[10:25:36.651]  - Condition #11: ‘simpleMessage’, ‘message’, ‘condition’
[10:25:36.631] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[10:25:36.651]  - Condition #12: ‘simpleMessage’, ‘message’, ‘condition’
[10:25:36.631]   - Field: ‘label’
[10:25:36.651]  - Condition #13: ‘simpleMessage’, ‘message’, ‘condition’
[10:25:36.631]   - Field: ‘local’
[10:25:36.651]  - Condition #14: ‘simpleMessage’, ‘message’, ‘condition’
[10:25:36.631]   - Field: ‘owner’
[10:25:36.652]  - Condition #15: ‘simpleMessage’, ‘message’, ‘condition’
[10:25:36.631]   - Field: ‘envir’
[10:25:36.652]  - Condition #16: ‘simpleMessage’, ‘message’, ‘condition’
[10:25:36.631]   - Field: ‘packages’
[10:25:36.652]  - Condition #17: ‘simpleMessage’, ‘message’, ‘condition’
[10:25:36.631]   - Field: ‘gc’
[10:25:36.652]  - Condition #18: ‘simpleMessage’, ‘message’, ‘condition’
[10:25:36.631]   - Field: ‘conditions’
[10:25:36.652]  - Condition #19: ‘simpleMessage’, ‘message’, ‘condition’
[10:25:36.631]   - Field: ‘expr’
[10:25:36.652]  - Condition #20: ‘simpleMessage’, ‘message’, ‘condition’
[10:25:36.632]   - Field: ‘uuid’
[10:25:36.652]  - Condition #21: ‘simpleMessage’, ‘message’, ‘condition’
[10:25:36.632]   - Field: ‘seed’
[10:25:36.652]  - Condition #22: ‘simpleMessage’, ‘message’, ‘condition’
[10:25:36.632]   - Field: ‘version’
[10:25:36.653]  - Condition #23: ‘simpleMessage’, ‘message’, ‘condition’
[10:25:36.632]   - Field: ‘result’
[10:25:36.653]  - Condition #24: ‘simpleMessage’, ‘message’, ‘condition’
[10:25:36.632]   - Field: ‘asynchronous’
[10:25:36.653]  - Condition #25: ‘simpleMessage’, ‘message’, ‘condition’
[10:25:36.632]   - Field: ‘calls’
[10:25:36.653]  - Condition #26: ‘simpleMessage’, ‘message’, ‘condition’
[10:25:36.632]   - Field: ‘globals’
[10:25:36.653]  - Condition #27: ‘simpleMessage’, ‘message’, ‘condition’
[10:25:36.632]   - Field: ‘stdout’
[10:25:36.653]  - Condition #28: ‘simpleMessage’, ‘message’, ‘condition’
[10:25:36.632]   - Field: ‘earlySignal’
[10:25:36.653]  - Condition #29: ‘simpleMessage’, ‘message’, ‘condition’
[10:25:36.632]   - Field: ‘lazy’
[10:25:36.653]  - Condition #30: ‘simpleMessage’, ‘message’, ‘condition’
[10:25:36.633]   - Field: ‘state’
[10:25:36.654]  - Condition #31: ‘simpleMessage’, ‘message’, ‘condition’
[10:25:36.633] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[10:25:36.654]  - Condition #32: ‘simpleMessage’, ‘message’, ‘condition’
[10:25:36.634] - Launch lazy future ...
[10:25:36.654]  - Condition #33: ‘simpleMessage’, ‘message’, ‘condition’
[10:25:36.634] Packages needed by the future expression (n = 0): <none>
[10:25:36.654]  - Condition #34: ‘simpleMessage’, ‘message’, ‘condition’
[10:25:36.634] Packages needed by future strategies (n = 0): <none>
[10:25:36.654]  - Condition #35: ‘simpleMessage’, ‘message’, ‘condition’
[10:25:36.635] {
[10:25:36.635]     {
[10:25:36.635]         {
[10:25:36.635]             ...future.startTime <- base::Sys.time()
[10:25:36.635]             {
[10:25:36.635]                 {
[10:25:36.635]                   {
[10:25:36.635]                     base::local({
[10:25:36.635]                       has_future <- base::requireNamespace("future", 
[10:25:36.635]                         quietly = TRUE)
[10:25:36.635]                       if (has_future) {
[10:25:36.635]                         ns <- base::getNamespace("future")
[10:25:36.635]                         version <- ns[[".package"]][["version"]]
[10:25:36.635]                         if (is.null(version)) 
[10:25:36.635]                           version <- utils::packageVersion("future")
[10:25:36.635]                       }
[10:25:36.635]                       else {
[10:25:36.635]                         version <- NULL
[10:25:36.635]                       }
[10:25:36.635]                       if (!has_future || version < "1.8.0") {
[10:25:36.635]                         info <- base::c(r_version = base::gsub("R version ", 
[10:25:36.635]                           "", base::R.version$version.string), 
[10:25:36.635]                           platform = base::sprintf("%s (%s-bit)", 
[10:25:36.635]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:25:36.635]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[10:25:36.635]                             "release", "version")], collapse = " "), 
[10:25:36.635]                           hostname = base::Sys.info()[["nodename"]])
[10:25:36.635]                         info <- base::sprintf("%s: %s", base::names(info), 
[10:25:36.635]                           info)
[10:25:36.635]                         info <- base::paste(info, collapse = "; ")
[10:25:36.635]                         if (!has_future) {
[10:25:36.635]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:25:36.635]                             info)
[10:25:36.635]                         }
[10:25:36.635]                         else {
[10:25:36.635]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:25:36.635]                             info, version)
[10:25:36.635]                         }
[10:25:36.635]                         base::stop(msg)
[10:25:36.635]                       }
[10:25:36.635]                     })
[10:25:36.635]                   }
[10:25:36.635]                   options(future.plan = NULL)
[10:25:36.635]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:25:36.635]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:25:36.635]                 }
[10:25:36.635]                 ...future.workdir <- getwd()
[10:25:36.635]             }
[10:25:36.635]             ...future.oldOptions <- base::as.list(base::.Options)
[10:25:36.635]             ...future.oldEnvVars <- base::Sys.getenv()
[10:25:36.635]         }
[10:25:36.635]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:25:36.635]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[10:25:36.635]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:25:36.635]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:25:36.635]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:25:36.635]             future.stdout.windows.reencode = NULL, width = 80L)
[10:25:36.635]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:25:36.635]             base::names(...future.oldOptions))
[10:25:36.635]     }
[10:25:36.635]     if (FALSE) {
[10:25:36.635]     }
[10:25:36.635]     else {
[10:25:36.635]         if (TRUE) {
[10:25:36.635]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:25:36.635]                 open = "w")
[10:25:36.635]         }
[10:25:36.635]         else {
[10:25:36.635]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:25:36.635]                 windows = "NUL", "/dev/null"), open = "w")
[10:25:36.635]         }
[10:25:36.635]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:25:36.635]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:25:36.635]             base::sink(type = "output", split = FALSE)
[10:25:36.635]             base::close(...future.stdout)
[10:25:36.635]         }, add = TRUE)
[10:25:36.635]     }
[10:25:36.635]     ...future.frame <- base::sys.nframe()
[10:25:36.635]     ...future.conditions <- base::list()
[10:25:36.635]     ...future.rng <- base::globalenv()$.Random.seed
[10:25:36.635]     if (FALSE) {
[10:25:36.635]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:25:36.635]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:25:36.635]     }
[10:25:36.635]     ...future.result <- base::tryCatch({
[10:25:36.635]         base::withCallingHandlers({
[10:25:36.635]             ...future.value <- base::withVisible(base::local(2))
[10:25:36.635]             future::FutureResult(value = ...future.value$value, 
[10:25:36.635]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:25:36.635]                   ...future.rng), globalenv = if (FALSE) 
[10:25:36.635]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:25:36.635]                     ...future.globalenv.names))
[10:25:36.635]                 else NULL, started = ...future.startTime, version = "1.8")
[10:25:36.635]         }, condition = base::local({
[10:25:36.635]             c <- base::c
[10:25:36.635]             inherits <- base::inherits
[10:25:36.635]             invokeRestart <- base::invokeRestart
[10:25:36.635]             length <- base::length
[10:25:36.635]             list <- base::list
[10:25:36.635]             seq.int <- base::seq.int
[10:25:36.635]             signalCondition <- base::signalCondition
[10:25:36.635]             sys.calls <- base::sys.calls
[10:25:36.635]             `[[` <- base::`[[`
[10:25:36.635]             `+` <- base::`+`
[10:25:36.635]             `<<-` <- base::`<<-`
[10:25:36.635]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:25:36.635]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:25:36.635]                   3L)]
[10:25:36.635]             }
[10:25:36.635]             function(cond) {
[10:25:36.635]                 is_error <- inherits(cond, "error")
[10:25:36.635]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:25:36.635]                   NULL)
[10:25:36.635]                 if (is_error) {
[10:25:36.635]                   sessionInformation <- function() {
[10:25:36.635]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:25:36.635]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:25:36.635]                       search = base::search(), system = base::Sys.info())
[10:25:36.635]                   }
[10:25:36.635]                   ...future.conditions[[length(...future.conditions) + 
[10:25:36.635]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:25:36.635]                     cond$call), session = sessionInformation(), 
[10:25:36.635]                     timestamp = base::Sys.time(), signaled = 0L)
[10:25:36.635]                   signalCondition(cond)
[10:25:36.635]                 }
[10:25:36.635]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:25:36.635]                 "immediateCondition"))) {
[10:25:36.635]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:25:36.635]                   ...future.conditions[[length(...future.conditions) + 
[10:25:36.635]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:25:36.635]                   if (TRUE && !signal) {
[10:25:36.635]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:25:36.635]                     {
[10:25:36.635]                       inherits <- base::inherits
[10:25:36.635]                       invokeRestart <- base::invokeRestart
[10:25:36.635]                       is.null <- base::is.null
[10:25:36.635]                       muffled <- FALSE
[10:25:36.635]                       if (inherits(cond, "message")) {
[10:25:36.635]                         muffled <- grepl(pattern, "muffleMessage")
[10:25:36.635]                         if (muffled) 
[10:25:36.635]                           invokeRestart("muffleMessage")
[10:25:36.635]                       }
[10:25:36.635]                       else if (inherits(cond, "warning")) {
[10:25:36.635]                         muffled <- grepl(pattern, "muffleWarning")
[10:25:36.635]                         if (muffled) 
[10:25:36.635]                           invokeRestart("muffleWarning")
[10:25:36.635]                       }
[10:25:36.635]                       else if (inherits(cond, "condition")) {
[10:25:36.635]                         if (!is.null(pattern)) {
[10:25:36.635]                           computeRestarts <- base::computeRestarts
[10:25:36.635]                           grepl <- base::grepl
[10:25:36.635]                           restarts <- computeRestarts(cond)
[10:25:36.635]                           for (restart in restarts) {
[10:25:36.635]                             name <- restart$name
[10:25:36.635]                             if (is.null(name)) 
[10:25:36.635]                               next
[10:25:36.635]                             if (!grepl(pattern, name)) 
[10:25:36.635]                               next
[10:25:36.635]                             invokeRestart(restart)
[10:25:36.635]                             muffled <- TRUE
[10:25:36.635]                             break
[10:25:36.635]                           }
[10:25:36.635]                         }
[10:25:36.635]                       }
[10:25:36.635]                       invisible(muffled)
[10:25:36.635]                     }
[10:25:36.635]                     muffleCondition(cond, pattern = "^muffle")
[10:25:36.635]                   }
[10:25:36.635]                 }
[10:25:36.635]                 else {
[10:25:36.635]                   if (TRUE) {
[10:25:36.635]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:25:36.635]                     {
[10:25:36.635]                       inherits <- base::inherits
[10:25:36.635]                       invokeRestart <- base::invokeRestart
[10:25:36.635]                       is.null <- base::is.null
[10:25:36.635]                       muffled <- FALSE
[10:25:36.635]                       if (inherits(cond, "message")) {
[10:25:36.635]                         muffled <- grepl(pattern, "muffleMessage")
[10:25:36.635]                         if (muffled) 
[10:25:36.635]                           invokeRestart("muffleMessage")
[10:25:36.635]                       }
[10:25:36.635]                       else if (inherits(cond, "warning")) {
[10:25:36.635]                         muffled <- grepl(pattern, "muffleWarning")
[10:25:36.635]                         if (muffled) 
[10:25:36.635]                           invokeRestart("muffleWarning")
[10:25:36.635]                       }
[10:25:36.635]                       else if (inherits(cond, "condition")) {
[10:25:36.635]                         if (!is.null(pattern)) {
[10:25:36.635]                           computeRestarts <- base::computeRestarts
[10:25:36.635]                           grepl <- base::grepl
[10:25:36.635]                           restarts <- computeRestarts(cond)
[10:25:36.635]                           for (restart in restarts) {
[10:25:36.635]                             name <- restart$name
[10:25:36.635]                             if (is.null(name)) 
[10:25:36.635]                               next
[10:25:36.635]                             if (!grepl(pattern, name)) 
[10:25:36.635]                               next
[10:25:36.635]                             invokeRestart(restart)
[10:25:36.635]                             muffled <- TRUE
[10:25:36.635]                             break
[10:25:36.635]                           }
[10:25:36.635]                         }
[10:25:36.635]                       }
[10:25:36.635]                       invisible(muffled)
[10:25:36.635]                     }
[10:25:36.635]                     muffleCondition(cond, pattern = "^muffle")
[10:25:36.635]                   }
[10:25:36.635]                 }
[10:25:36.635]             }
[10:25:36.635]         }))
[10:25:36.635]     }, error = function(ex) {
[10:25:36.635]         base::structure(base::list(value = NULL, visible = NULL, 
[10:25:36.635]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:25:36.635]                 ...future.rng), started = ...future.startTime, 
[10:25:36.635]             finished = Sys.time(), session_uuid = NA_character_, 
[10:25:36.635]             version = "1.8"), class = "FutureResult")
[10:25:36.635]     }, finally = {
[10:25:36.635]         if (!identical(...future.workdir, getwd())) 
[10:25:36.635]             setwd(...future.workdir)
[10:25:36.635]         {
[10:25:36.635]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:25:36.635]                 ...future.oldOptions$nwarnings <- NULL
[10:25:36.635]             }
[10:25:36.635]             base::options(...future.oldOptions)
[10:25:36.635]             if (.Platform$OS.type == "windows") {
[10:25:36.635]                 old_names <- names(...future.oldEnvVars)
[10:25:36.635]                 envs <- base::Sys.getenv()
[10:25:36.635]                 names <- names(envs)
[10:25:36.635]                 common <- intersect(names, old_names)
[10:25:36.635]                 added <- setdiff(names, old_names)
[10:25:36.635]                 removed <- setdiff(old_names, names)
[10:25:36.635]                 changed <- common[...future.oldEnvVars[common] != 
[10:25:36.635]                   envs[common]]
[10:25:36.635]                 NAMES <- toupper(changed)
[10:25:36.635]                 args <- list()
[10:25:36.635]                 for (kk in seq_along(NAMES)) {
[10:25:36.635]                   name <- changed[[kk]]
[10:25:36.635]                   NAME <- NAMES[[kk]]
[10:25:36.635]                   if (name != NAME && is.element(NAME, old_names)) 
[10:25:36.635]                     next
[10:25:36.635]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:25:36.635]                 }
[10:25:36.635]                 NAMES <- toupper(added)
[10:25:36.635]                 for (kk in seq_along(NAMES)) {
[10:25:36.635]                   name <- added[[kk]]
[10:25:36.635]                   NAME <- NAMES[[kk]]
[10:25:36.635]                   if (name != NAME && is.element(NAME, old_names)) 
[10:25:36.635]                     next
[10:25:36.635]                   args[[name]] <- ""
[10:25:36.635]                 }
[10:25:36.635]                 NAMES <- toupper(removed)
[10:25:36.635]                 for (kk in seq_along(NAMES)) {
[10:25:36.635]                   name <- removed[[kk]]
[10:25:36.635]                   NAME <- NAMES[[kk]]
[10:25:36.635]                   if (name != NAME && is.element(NAME, old_names)) 
[10:25:36.635]                     next
[10:25:36.635]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:25:36.635]                 }
[10:25:36.635]                 if (length(args) > 0) 
[10:25:36.635]                   base::do.call(base::Sys.setenv, args = args)
[10:25:36.635]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:25:36.635]             }
[10:25:36.635]             else {
[10:25:36.635]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:25:36.635]             }
[10:25:36.635]             {
[10:25:36.635]                 if (base::length(...future.futureOptionsAdded) > 
[10:25:36.635]                   0L) {
[10:25:36.635]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:25:36.635]                   base::names(opts) <- ...future.futureOptionsAdded
[10:25:36.635]                   base::options(opts)
[10:25:36.635]                 }
[10:25:36.635]                 {
[10:25:36.635]                   {
[10:25:36.635]                     NULL
[10:25:36.635]                     RNGkind("Mersenne-Twister")
[10:25:36.635]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[10:25:36.635]                       inherits = FALSE)
[10:25:36.635]                   }
[10:25:36.635]                   options(future.plan = NULL)
[10:25:36.635]                   if (is.na(NA_character_)) 
[10:25:36.635]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:25:36.635]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:25:36.635]                   future::plan(list(function (..., envir = parent.frame()) 
[10:25:36.635]                   {
[10:25:36.635]                     future <- SequentialFuture(..., envir = envir)
[10:25:36.635]                     if (!future$lazy) 
[10:25:36.635]                       future <- run(future)
[10:25:36.635]                     invisible(future)
[10:25:36.635]                   }), .cleanup = FALSE, .init = FALSE)
[10:25:36.635]                 }
[10:25:36.635]             }
[10:25:36.635]         }
[10:25:36.635]     })
[10:25:36.635]     if (TRUE) {
[10:25:36.635]         base::sink(type = "output", split = FALSE)
[10:25:36.635]         if (TRUE) {
[10:25:36.635]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:25:36.635]         }
[10:25:36.635]         else {
[10:25:36.635]             ...future.result["stdout"] <- base::list(NULL)
[10:25:36.635]         }
[10:25:36.635]         base::close(...future.stdout)
[10:25:36.635]         ...future.stdout <- NULL
[10:25:36.635]     }
[10:25:36.635]     ...future.result$conditions <- ...future.conditions
[10:25:36.635]     ...future.result$finished <- base::Sys.time()
[10:25:36.635]     ...future.result
[10:25:36.635] }
[10:25:36.654]  - Condition #36: ‘simpleMessage’, ‘message’, ‘condition’
[10:25:36.636] plan(): Setting new future strategy stack:
[10:25:36.654]  - Condition #37: ‘simpleMessage’, ‘message’, ‘condition’
[10:25:36.636] List of future strategies:
[10:25:36.636] 1. sequential:
[10:25:36.636]    - args: function (..., envir = parent.frame())
[10:25:36.636]    - tweaked: FALSE
[10:25:36.636]    - call: NULL
[10:25:36.655]  - Condition #38: ‘simpleMessage’, ‘message’, ‘condition’
[10:25:36.637] plan(): nbrOfWorkers() = 1
[10:25:36.655]  - Condition #39: ‘simpleMessage’, ‘message’, ‘condition’
[10:25:36.637] plan(): Setting new future strategy stack:
[10:25:36.655]  - Condition #40: ‘simpleMessage’, ‘message’, ‘condition’
[10:25:36.637] List of future strategies:
[10:25:36.637] 1. sequential:
[10:25:36.637]    - args: function (..., envir = parent.frame())
[10:25:36.637]    - tweaked: FALSE
[10:25:36.637]    - call: NULL
[10:25:36.655]  - Condition #41: ‘simpleMessage’, ‘message’, ‘condition’
[10:25:36.638] plan(): nbrOfWorkers() = 1
[10:25:36.655]  - Condition #42: ‘simpleMessage’, ‘message’, ‘condition’
[10:25:36.638] SequentialFuture started (and completed)
[10:25:36.655]  - Condition #43: ‘simpleMessage’, ‘message’, ‘condition’
[10:25:36.638] - Launch lazy future ... done
[10:25:36.655]  - Condition #44: ‘simpleMessage’, ‘message’, ‘condition’
[10:25:36.638] run() for ‘SequentialFuture’ ... done
[10:25:36.655]  - Condition #45: ‘simpleMessage’, ‘message’, ‘condition’
[10:25:36.638] getGlobalsAndPackages() ...
[10:25:36.656]  - Condition #46: ‘simpleMessage’, ‘message’, ‘condition’
[10:25:36.639] Searching for globals...
[10:25:36.656]  - Condition #47: ‘simpleMessage’, ‘message’, ‘condition’
[10:25:36.639] 
[10:25:36.656]  - Condition #48: ‘simpleMessage’, ‘message’, ‘condition’
[10:25:36.639] Searching for globals ... DONE
[10:25:36.656]  - Condition #49: ‘simpleMessage’, ‘message’, ‘condition’
[10:25:36.639] - globals: [0] <none>
[10:25:36.656]  - Condition #50: ‘simpleMessage’, ‘message’, ‘condition’
[10:25:36.639] getGlobalsAndPackages() ... DONE
[10:25:36.656]  - Condition #51: ‘simpleMessage’, ‘message’, ‘condition’
[10:25:36.639] run() for ‘Future’ ...
[10:25:36.656]  - Condition #52: ‘simpleMessage’, ‘message’, ‘condition’
[10:25:36.639] - state: ‘created’
[10:25:36.656]  - Condition #53: ‘simpleMessage’, ‘message’, ‘condition’
[10:25:36.640] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:25:36.657]  - Condition #54: ‘simpleMessage’, ‘message’, ‘condition’
[10:25:36.640] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[10:25:36.657]  - Condition #55: ‘simpleMessage’, ‘message’, ‘condition’
[10:25:36.640] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[10:25:36.657]  - Condition #56: ‘simpleMessage’, ‘message’, ‘condition’
[10:25:36.640]   - Field: ‘label’
[10:25:36.657]  - Condition #57: ‘simpleMessage’, ‘message’, ‘condition’
[10:25:36.640]   - Field: ‘local’
[10:25:36.657]  - Condition #58: ‘simpleMessage’, ‘message’, ‘condition’
[10:25:36.640]   - Field: ‘owner’
[10:25:36.657]  - Condition #59: ‘simpleMessage’, ‘message’, ‘condition’
[10:25:36.640]   - Field: ‘envir’
[10:25:36.657]  - Condition #60: ‘simpleMessage’, ‘message’, ‘condition’
[10:25:36.641]   - Field: ‘packages’
[10:25:36.658]  - Condition #61: ‘simpleMessage’, ‘message’, ‘condition’
[10:25:36.641]   - Field: ‘gc’
[10:25:36.659]  - Condition #62: ‘simpleMessage’, ‘message’, ‘condition’
[10:25:36.641]   - Field: ‘conditions’
[10:25:36.659]  - Condition #63: ‘simpleMessage’, ‘message’, ‘condition’
[10:25:36.641]   - Field: ‘expr’
[10:25:36.659]  - Condition #64: ‘simpleMessage’, ‘message’, ‘condition’
[10:25:36.641]   - Field: ‘uuid’
[10:25:36.659]  - Condition #65: ‘simpleMessage’, ‘message’, ‘condition’
[10:25:36.641]   - Field: ‘seed’
[10:25:36.659]  - Condition #66: ‘simpleMessage’, ‘message’, ‘condition’
[10:25:36.641]   - Field: ‘version’
[10:25:36.659]  - Condition #67: ‘simpleMessage’, ‘message’, ‘condition’
[10:25:36.641]   - Field: ‘result’
[10:25:36.659]  - Condition #68: ‘simpleMessage’, ‘message’, ‘condition’
[10:25:36.641]   - Field: ‘asynchronous’
[10:25:36.659]  - Condition #69: ‘simpleMessage’, ‘message’, ‘condition’
[10:25:36.641]   - Field: ‘calls’
[10:25:36.660]  - Condition #70: ‘simpleMessage’, ‘message’, ‘condition’
[10:25:36.642]   - Field: ‘globals’
[10:25:36.660]  - Condition #71: ‘simpleMessage’, ‘message’, ‘condition’
[10:25:36.642]   - Field: ‘stdout’
[10:25:36.660]  - Condition #72: ‘simpleMessage’, ‘message’, ‘condition’
[10:25:36.642]   - Field: ‘earlySignal’
[10:25:36.660]  - Condition #73: ‘simpleMessage’, ‘message’, ‘condition’
[10:25:36.642]   - Field: ‘lazy’
[10:25:36.660]  - Condition #74: ‘simpleMessage’, ‘message’, ‘condition’
[10:25:36.642]   - Field: ‘state’
[10:25:36.660]  - Condition #75: ‘simpleMessage’, ‘message’, ‘condition’
[10:25:36.642] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[10:25:36.660]  - Condition #76: ‘simpleMessage’, ‘message’, ‘condition’
[10:25:36.642] - Launch lazy future ...
[10:25:36.660]  - Condition #77: ‘simpleMessage’, ‘message’, ‘condition’
[10:25:36.642] Packages needed by the future expression (n = 0): <none>
[10:25:36.661]  - Condition #78: ‘simpleMessage’, ‘message’, ‘condition’
[10:25:36.642] Packages needed by future strategies (n = 0): <none>
[10:25:36.661]  - Condition #79: ‘simpleMessage’, ‘message’, ‘condition’
[10:25:36.643] {
[10:25:36.643]     {
[10:25:36.643]         {
[10:25:36.643]             ...future.startTime <- base::Sys.time()
[10:25:36.643]             {
[10:25:36.643]                 {
[10:25:36.643]                   {
[10:25:36.643]                     base::local({
[10:25:36.643]                       has_future <- base::requireNamespace("future", 
[10:25:36.643]                         quietly = TRUE)
[10:25:36.643]                       if (has_future) {
[10:25:36.643]                         ns <- base::getNamespace("future")
[10:25:36.643]                         version <- ns[[".package"]][["version"]]
[10:25:36.643]                         if (is.null(version)) 
[10:25:36.643]                           version <- utils::packageVersion("future")
[10:25:36.643]                       }
[10:25:36.643]                       else {
[10:25:36.643]                         version <- NULL
[10:25:36.643]                       }
[10:25:36.643]                       if (!has_future || version < "1.8.0") {
[10:25:36.643]                         info <- base::c(r_version = base::gsub("R version ", 
[10:25:36.643]                           "", base::R.version$version.string), 
[10:25:36.643]                           platform = base::sprintf("%s (%s-bit)", 
[10:25:36.643]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:25:36.643]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[10:25:36.643]                             "release", "version")], collapse = " "), 
[10:25:36.643]                           hostname = base::Sys.info()[["nodename"]])
[10:25:36.643]                         info <- base::sprintf("%s: %s", base::names(info), 
[10:25:36.643]                           info)
[10:25:36.643]                         info <- base::paste(info, collapse = "; ")
[10:25:36.643]                         if (!has_future) {
[10:25:36.643]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:25:36.643]                             info)
[10:25:36.643]                         }
[10:25:36.643]                         else {
[10:25:36.643]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:25:36.643]                             info, version)
[10:25:36.643]                         }
[10:25:36.643]                         base::stop(msg)
[10:25:36.643]                       }
[10:25:36.643]                     })
[10:25:36.643]                   }
[10:25:36.643]                   options(future.plan = NULL)
[10:25:36.643]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:25:36.643]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:25:36.643]                 }
[10:25:36.643]                 ...future.workdir <- getwd()
[10:25:36.643]             }
[10:25:36.643]             ...future.oldOptions <- base::as.list(base::.Options)
[10:25:36.643]             ...future.oldEnvVars <- base::Sys.getenv()
[10:25:36.643]         }
[10:25:36.643]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:25:36.643]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[10:25:36.643]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:25:36.643]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:25:36.643]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:25:36.643]             future.stdout.windows.reencode = NULL, width = 80L)
[10:25:36.643]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:25:36.643]             base::names(...future.oldOptions))
[10:25:36.643]     }
[10:25:36.643]     if (FALSE) {
[10:25:36.643]     }
[10:25:36.643]     else {
[10:25:36.643]         if (TRUE) {
[10:25:36.643]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:25:36.643]                 open = "w")
[10:25:36.643]         }
[10:25:36.643]         else {
[10:25:36.643]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:25:36.643]                 windows = "NUL", "/dev/null"), open = "w")
[10:25:36.643]         }
[10:25:36.643]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:25:36.643]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:25:36.643]             base::sink(type = "output", split = FALSE)
[10:25:36.643]             base::close(...future.stdout)
[10:25:36.643]         }, add = TRUE)
[10:25:36.643]     }
[10:25:36.643]     ...future.frame <- base::sys.nframe()
[10:25:36.643]     ...future.conditions <- base::list()
[10:25:36.643]     ...future.rng <- base::globalenv()$.Random.seed
[10:25:36.643]     if (FALSE) {
[10:25:36.643]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:25:36.643]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:25:36.643]     }
[10:25:36.643]     ...future.result <- base::tryCatch({
[10:25:36.643]         base::withCallingHandlers({
[10:25:36.643]             ...future.value <- base::withVisible(base::local(4))
[10:25:36.643]             future::FutureResult(value = ...future.value$value, 
[10:25:36.643]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:25:36.643]                   ...future.rng), globalenv = if (FALSE) 
[10:25:36.643]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:25:36.643]                     ...future.globalenv.names))
[10:25:36.643]                 else NULL, started = ...future.startTime, version = "1.8")
[10:25:36.643]         }, condition = base::local({
[10:25:36.643]             c <- base::c
[10:25:36.643]             inherits <- base::inherits
[10:25:36.643]             invokeRestart <- base::invokeRestart
[10:25:36.643]             length <- base::length
[10:25:36.643]             list <- base::list
[10:25:36.643]             seq.int <- base::seq.int
[10:25:36.643]             signalCondition <- base::signalCondition
[10:25:36.643]             sys.calls <- base::sys.calls
[10:25:36.643]             `[[` <- base::`[[`
[10:25:36.643]             `+` <- base::`+`
[10:25:36.643]             `<<-` <- base::`<<-`
[10:25:36.643]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:25:36.643]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:25:36.643]                   3L)]
[10:25:36.643]             }
[10:25:36.643]             function(cond) {
[10:25:36.643]                 is_error <- inherits(cond, "error")
[10:25:36.643]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:25:36.643]                   NULL)
[10:25:36.643]                 if (is_error) {
[10:25:36.643]                   sessionInformation <- function() {
[10:25:36.643]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:25:36.643]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:25:36.643]                       search = base::search(), system = base::Sys.info())
[10:25:36.643]                   }
[10:25:36.643]                   ...future.conditions[[length(...future.conditions) + 
[10:25:36.643]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:25:36.643]                     cond$call), session = sessionInformation(), 
[10:25:36.643]                     timestamp = base::Sys.time(), signaled = 0L)
[10:25:36.643]                   signalCondition(cond)
[10:25:36.643]                 }
[10:25:36.643]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:25:36.643]                 "immediateCondition"))) {
[10:25:36.643]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:25:36.643]                   ...future.conditions[[length(...future.conditions) + 
[10:25:36.643]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:25:36.643]                   if (TRUE && !signal) {
[10:25:36.643]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:25:36.643]                     {
[10:25:36.643]                       inherits <- base::inherits
[10:25:36.643]                       invokeRestart <- base::invokeRestart
[10:25:36.643]                       is.null <- base::is.null
[10:25:36.643]                       muffled <- FALSE
[10:25:36.643]                       if (inherits(cond, "message")) {
[10:25:36.643]                         muffled <- grepl(pattern, "muffleMessage")
[10:25:36.643]                         if (muffled) 
[10:25:36.643]                           invokeRestart("muffleMessage")
[10:25:36.643]                       }
[10:25:36.643]                       else if (inherits(cond, "warning")) {
[10:25:36.643]                         muffled <- grepl(pattern, "muffleWarning")
[10:25:36.643]                         if (muffled) 
[10:25:36.643]                           invokeRestart("muffleWarning")
[10:25:36.643]                       }
[10:25:36.643]                       else if (inherits(cond, "condition")) {
[10:25:36.643]                         if (!is.null(pattern)) {
[10:25:36.643]                           computeRestarts <- base::computeRestarts
[10:25:36.643]                           grepl <- base::grepl
[10:25:36.643]                           restarts <- computeRestarts(cond)
[10:25:36.643]                           for (restart in restarts) {
[10:25:36.643]                             name <- restart$name
[10:25:36.643]                             if (is.null(name)) 
[10:25:36.643]                               next
[10:25:36.643]                             if (!grepl(pattern, name)) 
[10:25:36.643]                               next
[10:25:36.643]                             invokeRestart(restart)
[10:25:36.643]                             muffled <- TRUE
[10:25:36.643]                             break
[10:25:36.643]                           }
[10:25:36.643]                         }
[10:25:36.643]                       }
[10:25:36.643]                       invisible(muffled)
[10:25:36.643]                     }
[10:25:36.643]                     muffleCondition(cond, pattern = "^muffle")
[10:25:36.643]                   }
[10:25:36.643]                 }
[10:25:36.643]                 else {
[10:25:36.643]                   if (TRUE) {
[10:25:36.643]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:25:36.643]                     {
[10:25:36.643]                       inherits <- base::inherits
[10:25:36.643]                       invokeRestart <- base::invokeRestart
[10:25:36.643]                       is.null <- base::is.null
[10:25:36.643]                       muffled <- FALSE
[10:25:36.643]                       if (inherits(cond, "message")) {
[10:25:36.643]                         muffled <- grepl(pattern, "muffleMessage")
[10:25:36.643]                         if (muffled) 
[10:25:36.643]                           invokeRestart("muffleMessage")
[10:25:36.643]                       }
[10:25:36.643]                       else if (inherits(cond, "warning")) {
[10:25:36.643]                         muffled <- grepl(pattern, "muffleWarning")
[10:25:36.643]                         if (muffled) 
[10:25:36.643]                           invokeRestart("muffleWarning")
[10:25:36.643]                       }
[10:25:36.643]                       else if (inherits(cond, "condition")) {
[10:25:36.643]                         if (!is.null(pattern)) {
[10:25:36.643]                           computeRestarts <- base::computeRestarts
[10:25:36.643]                           grepl <- base::grepl
[10:25:36.643]                           restarts <- computeRestarts(cond)
[10:25:36.643]                           for (restart in restarts) {
[10:25:36.643]                             name <- restart$name
[10:25:36.643]                             if (is.null(name)) 
[10:25:36.643]                               next
[10:25:36.643]                             if (!grepl(pattern, name)) 
[10:25:36.643]                               next
[10:25:36.643]                             invokeRestart(restart)
[10:25:36.643]                             muffled <- TRUE
[10:25:36.643]                             break
[10:25:36.643]                           }
[10:25:36.643]                         }
[10:25:36.643]                       }
[10:25:36.643]                       invisible(muffled)
[10:25:36.643]                     }
[10:25:36.643]                     muffleCondition(cond, pattern = "^muffle")
[10:25:36.643]                   }
[10:25:36.643]                 }
[10:25:36.643]             }
[10:25:36.643]         }))
[10:25:36.643]     }, error = function(ex) {
[10:25:36.643]         base::structure(base::list(value = NULL, visible = NULL, 
[10:25:36.643]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:25:36.643]                 ...future.rng), started = ...future.startTime, 
[10:25:36.643]             finished = Sys.time(), session_uuid = NA_character_, 
[10:25:36.643]             version = "1.8"), class = "FutureResult")
[10:25:36.643]     }, finally = {
[10:25:36.643]         if (!identical(...future.workdir, getwd())) 
[10:25:36.643]             setwd(...future.workdir)
[10:25:36.643]         {
[10:25:36.643]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:25:36.643]                 ...future.oldOptions$nwarnings <- NULL
[10:25:36.643]             }
[10:25:36.643]             base::options(...future.oldOptions)
[10:25:36.643]             if (.Platform$OS.type == "windows") {
[10:25:36.643]                 old_names <- names(...future.oldEnvVars)
[10:25:36.643]                 envs <- base::Sys.getenv()
[10:25:36.643]                 names <- names(envs)
[10:25:36.643]                 common <- intersect(names, old_names)
[10:25:36.643]                 added <- setdiff(names, old_names)
[10:25:36.643]                 removed <- setdiff(old_names, names)
[10:25:36.643]                 changed <- common[...future.oldEnvVars[common] != 
[10:25:36.643]                   envs[common]]
[10:25:36.643]                 NAMES <- toupper(changed)
[10:25:36.643]                 args <- list()
[10:25:36.643]                 for (kk in seq_along(NAMES)) {
[10:25:36.643]                   name <- changed[[kk]]
[10:25:36.643]                   NAME <- NAMES[[kk]]
[10:25:36.643]                   if (name != NAME && is.element(NAME, old_names)) 
[10:25:36.643]                     next
[10:25:36.643]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:25:36.643]                 }
[10:25:36.643]                 NAMES <- toupper(added)
[10:25:36.643]                 for (kk in seq_along(NAMES)) {
[10:25:36.643]                   name <- added[[kk]]
[10:25:36.643]                   NAME <- NAMES[[kk]]
[10:25:36.643]                   if (name != NAME && is.element(NAME, old_names)) 
[10:25:36.643]                     next
[10:25:36.643]                   args[[name]] <- ""
[10:25:36.643]                 }
[10:25:36.643]                 NAMES <- toupper(removed)
[10:25:36.643]                 for (kk in seq_along(NAMES)) {
[10:25:36.643]                   name <- removed[[kk]]
[10:25:36.643]                   NAME <- NAMES[[kk]]
[10:25:36.643]                   if (name != NAME && is.element(NAME, old_names)) 
[10:25:36.643]                     next
[10:25:36.643]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:25:36.643]                 }
[10:25:36.643]                 if (length(args) > 0) 
[10:25:36.643]                   base::do.call(base::Sys.setenv, args = args)
[10:25:36.643]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:25:36.643]             }
[10:25:36.643]             else {
[10:25:36.643]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:25:36.643]             }
[10:25:36.643]             {
[10:25:36.643]                 if (base::length(...future.futureOptionsAdded) > 
[10:25:36.643]                   0L) {
[10:25:36.643]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:25:36.643]                   base::names(opts) <- ...future.futureOptionsAdded
[10:25:36.643]                   base::options(opts)
[10:25:36.643]                 }
[10:25:36.643]                 {
[10:25:36.643]                   {
[10:25:36.643]                     NULL
[10:25:36.643]                     RNGkind("Mersenne-Twister")
[10:25:36.643]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[10:25:36.643]                       inherits = FALSE)
[10:25:36.643]                   }
[10:25:36.643]                   options(future.plan = NULL)
[10:25:36.643]                   if (is.na(NA_character_)) 
[10:25:36.643]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:25:36.643]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:25:36.643]                   future::plan(list(function (..., envir = parent.frame()) 
[10:25:36.643]                   {
[10:25:36.643]                     future <- SequentialFuture(..., envir = envir)
[10:25:36.643]                     if (!future$lazy) 
[10:25:36.643]                       future <- run(future)
[10:25:36.643]                     invisible(future)
[10:25:36.643]                   }), .cleanup = FALSE, .init = FALSE)
[10:25:36.643]                 }
[10:25:36.643]             }
[10:25:36.643]         }
[10:25:36.643]     })
[10:25:36.643]     if (TRUE) {
[10:25:36.643]         base::sink(type = "output", split = FALSE)
[10:25:36.643]         if (TRUE) {
[10:25:36.643]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:25:36.643]         }
[10:25:36.643]         else {
[10:25:36.643]             ...future.result["stdout"] <- base::list(NULL)
[10:25:36.643]         }
[10:25:36.643]         base::close(...future.stdout)
[10:25:36.643]         ...future.stdout <- NULL
[10:25:36.643]     }
[10:25:36.643]     ...future.result$conditions <- ...future.conditions
[10:25:36.643]     ...future.result$finished <- base::Sys.time()
[10:25:36.643]     ...future.result
[10:25:36.643] }
[10:25:36.661]  - Condition #80: ‘simpleMessage’, ‘message’, ‘condition’
[10:25:36.645] plan(): Setting new future strategy stack:
[10:25:36.661]  - Condition #81: ‘simpleMessage’, ‘message’, ‘condition’
[10:25:36.645] List of future strategies:
[10:25:36.645] 1. sequential:
[10:25:36.645]    - args: function (..., envir = parent.frame())
[10:25:36.645]    - tweaked: FALSE
[10:25:36.645]    - call: NULL
[10:25:36.661]  - Condition #82: ‘simpleMessage’, ‘message’, ‘condition’
[10:25:36.645] plan(): nbrOfWorkers() = 1
[10:25:36.661]  - Condition #83: ‘simpleMessage’, ‘message’, ‘condition’
[10:25:36.646] plan(): Setting new future strategy stack:
[10:25:36.661]  - Condition #84: ‘simpleMessage’, ‘message’, ‘condition’
[10:25:36.646] List of future strategies:
[10:25:36.646] 1. sequential:
[10:25:36.646]    - args: function (..., envir = parent.frame())
[10:25:36.646]    - tweaked: FALSE
[10:25:36.646]    - call: NULL
[10:25:36.662]  - Condition #85: ‘simpleMessage’, ‘message’, ‘condition’
[10:25:36.646] plan(): nbrOfWorkers() = 1
[10:25:36.662]  - Condition #86: ‘simpleMessage’, ‘message’, ‘condition’
[10:25:36.646] SequentialFuture started (and completed)
[10:25:36.662]  - Condition #87: ‘simpleMessage’, ‘message’, ‘condition’
[10:25:36.646] - Launch lazy future ... done
[10:25:36.662]  - Condition #88: ‘simpleMessage’, ‘message’, ‘condition’
[10:25:36.647] run() for ‘SequentialFuture’ ... done
[10:25:36.662] signalConditions() ... done
a = 10
[10:25:36.662] getGlobalsAndPackages() ...
[10:25:36.662] Searching for globals...
[10:25:36.663] - globals found: [3] ‘{’, ‘+’, ‘a’
[10:25:36.663] Searching for globals ... DONE
[10:25:36.663] Resolving globals: FALSE
[10:25:36.664] The total size of the 1 globals is 56 bytes (56 bytes)
[10:25:36.664] The total size of the 1 globals exported for future expression (‘{; a + 1; }’) is 56 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘a’ (56 bytes of class ‘numeric’)
[10:25:36.664] - globals: [1] ‘a’
[10:25:36.664] 
[10:25:36.664] getGlobalsAndPackages() ... DONE
[10:25:36.665] run() for ‘Future’ ...
[10:25:36.665] - state: ‘created’
[10:25:36.665] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:25:36.665] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[10:25:36.665] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[10:25:36.665]   - Field: ‘label’
[10:25:36.665]   - Field: ‘local’
[10:25:36.665]   - Field: ‘owner’
[10:25:36.666]   - Field: ‘envir’
[10:25:36.666]   - Field: ‘packages’
[10:25:36.666]   - Field: ‘gc’
[10:25:36.666]   - Field: ‘conditions’
[10:25:36.666]   - Field: ‘expr’
[10:25:36.666]   - Field: ‘uuid’
[10:25:36.666]   - Field: ‘seed’
[10:25:36.666]   - Field: ‘version’
[10:25:36.666]   - Field: ‘result’
[10:25:36.666]   - Field: ‘asynchronous’
[10:25:36.666]   - Field: ‘calls’
[10:25:36.666]   - Field: ‘globals’
[10:25:36.667]   - Field: ‘stdout’
[10:25:36.667]   - Field: ‘earlySignal’
[10:25:36.667]   - Field: ‘lazy’
[10:25:36.667]   - Field: ‘state’
[10:25:36.667] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[10:25:36.667] - Launch lazy future ...
[10:25:36.667] Packages needed by the future expression (n = 0): <none>
[10:25:36.667] Packages needed by future strategies (n = 0): <none>
[10:25:36.668] {
[10:25:36.668]     {
[10:25:36.668]         {
[10:25:36.668]             ...future.startTime <- base::Sys.time()
[10:25:36.668]             {
[10:25:36.668]                 {
[10:25:36.668]                   {
[10:25:36.668]                     base::local({
[10:25:36.668]                       has_future <- base::requireNamespace("future", 
[10:25:36.668]                         quietly = TRUE)
[10:25:36.668]                       if (has_future) {
[10:25:36.668]                         ns <- base::getNamespace("future")
[10:25:36.668]                         version <- ns[[".package"]][["version"]]
[10:25:36.668]                         if (is.null(version)) 
[10:25:36.668]                           version <- utils::packageVersion("future")
[10:25:36.668]                       }
[10:25:36.668]                       else {
[10:25:36.668]                         version <- NULL
[10:25:36.668]                       }
[10:25:36.668]                       if (!has_future || version < "1.8.0") {
[10:25:36.668]                         info <- base::c(r_version = base::gsub("R version ", 
[10:25:36.668]                           "", base::R.version$version.string), 
[10:25:36.668]                           platform = base::sprintf("%s (%s-bit)", 
[10:25:36.668]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:25:36.668]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[10:25:36.668]                             "release", "version")], collapse = " "), 
[10:25:36.668]                           hostname = base::Sys.info()[["nodename"]])
[10:25:36.668]                         info <- base::sprintf("%s: %s", base::names(info), 
[10:25:36.668]                           info)
[10:25:36.668]                         info <- base::paste(info, collapse = "; ")
[10:25:36.668]                         if (!has_future) {
[10:25:36.668]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:25:36.668]                             info)
[10:25:36.668]                         }
[10:25:36.668]                         else {
[10:25:36.668]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:25:36.668]                             info, version)
[10:25:36.668]                         }
[10:25:36.668]                         base::stop(msg)
[10:25:36.668]                       }
[10:25:36.668]                     })
[10:25:36.668]                   }
[10:25:36.668]                   options(future.plan = NULL)
[10:25:36.668]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:25:36.668]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:25:36.668]                 }
[10:25:36.668]                 ...future.workdir <- getwd()
[10:25:36.668]             }
[10:25:36.668]             ...future.oldOptions <- base::as.list(base::.Options)
[10:25:36.668]             ...future.oldEnvVars <- base::Sys.getenv()
[10:25:36.668]         }
[10:25:36.668]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:25:36.668]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[10:25:36.668]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:25:36.668]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:25:36.668]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:25:36.668]             future.stdout.windows.reencode = NULL, width = 80L)
[10:25:36.668]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:25:36.668]             base::names(...future.oldOptions))
[10:25:36.668]     }
[10:25:36.668]     if (FALSE) {
[10:25:36.668]     }
[10:25:36.668]     else {
[10:25:36.668]         if (TRUE) {
[10:25:36.668]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:25:36.668]                 open = "w")
[10:25:36.668]         }
[10:25:36.668]         else {
[10:25:36.668]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:25:36.668]                 windows = "NUL", "/dev/null"), open = "w")
[10:25:36.668]         }
[10:25:36.668]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:25:36.668]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:25:36.668]             base::sink(type = "output", split = FALSE)
[10:25:36.668]             base::close(...future.stdout)
[10:25:36.668]         }, add = TRUE)
[10:25:36.668]     }
[10:25:36.668]     ...future.frame <- base::sys.nframe()
[10:25:36.668]     ...future.conditions <- base::list()
[10:25:36.668]     ...future.rng <- base::globalenv()$.Random.seed
[10:25:36.668]     if (FALSE) {
[10:25:36.668]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:25:36.668]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:25:36.668]     }
[10:25:36.668]     ...future.result <- base::tryCatch({
[10:25:36.668]         base::withCallingHandlers({
[10:25:36.668]             ...future.value <- base::withVisible(base::local({
[10:25:36.668]                 a + 1
[10:25:36.668]             }))
[10:25:36.668]             future::FutureResult(value = ...future.value$value, 
[10:25:36.668]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:25:36.668]                   ...future.rng), globalenv = if (FALSE) 
[10:25:36.668]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:25:36.668]                     ...future.globalenv.names))
[10:25:36.668]                 else NULL, started = ...future.startTime, version = "1.8")
[10:25:36.668]         }, condition = base::local({
[10:25:36.668]             c <- base::c
[10:25:36.668]             inherits <- base::inherits
[10:25:36.668]             invokeRestart <- base::invokeRestart
[10:25:36.668]             length <- base::length
[10:25:36.668]             list <- base::list
[10:25:36.668]             seq.int <- base::seq.int
[10:25:36.668]             signalCondition <- base::signalCondition
[10:25:36.668]             sys.calls <- base::sys.calls
[10:25:36.668]             `[[` <- base::`[[`
[10:25:36.668]             `+` <- base::`+`
[10:25:36.668]             `<<-` <- base::`<<-`
[10:25:36.668]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:25:36.668]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:25:36.668]                   3L)]
[10:25:36.668]             }
[10:25:36.668]             function(cond) {
[10:25:36.668]                 is_error <- inherits(cond, "error")
[10:25:36.668]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:25:36.668]                   NULL)
[10:25:36.668]                 if (is_error) {
[10:25:36.668]                   sessionInformation <- function() {
[10:25:36.668]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:25:36.668]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:25:36.668]                       search = base::search(), system = base::Sys.info())
[10:25:36.668]                   }
[10:25:36.668]                   ...future.conditions[[length(...future.conditions) + 
[10:25:36.668]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:25:36.668]                     cond$call), session = sessionInformation(), 
[10:25:36.668]                     timestamp = base::Sys.time(), signaled = 0L)
[10:25:36.668]                   signalCondition(cond)
[10:25:36.668]                 }
[10:25:36.668]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:25:36.668]                 "immediateCondition"))) {
[10:25:36.668]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:25:36.668]                   ...future.conditions[[length(...future.conditions) + 
[10:25:36.668]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:25:36.668]                   if (TRUE && !signal) {
[10:25:36.668]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:25:36.668]                     {
[10:25:36.668]                       inherits <- base::inherits
[10:25:36.668]                       invokeRestart <- base::invokeRestart
[10:25:36.668]                       is.null <- base::is.null
[10:25:36.668]                       muffled <- FALSE
[10:25:36.668]                       if (inherits(cond, "message")) {
[10:25:36.668]                         muffled <- grepl(pattern, "muffleMessage")
[10:25:36.668]                         if (muffled) 
[10:25:36.668]                           invokeRestart("muffleMessage")
[10:25:36.668]                       }
[10:25:36.668]                       else if (inherits(cond, "warning")) {
[10:25:36.668]                         muffled <- grepl(pattern, "muffleWarning")
[10:25:36.668]                         if (muffled) 
[10:25:36.668]                           invokeRestart("muffleWarning")
[10:25:36.668]                       }
[10:25:36.668]                       else if (inherits(cond, "condition")) {
[10:25:36.668]                         if (!is.null(pattern)) {
[10:25:36.668]                           computeRestarts <- base::computeRestarts
[10:25:36.668]                           grepl <- base::grepl
[10:25:36.668]                           restarts <- computeRestarts(cond)
[10:25:36.668]                           for (restart in restarts) {
[10:25:36.668]                             name <- restart$name
[10:25:36.668]                             if (is.null(name)) 
[10:25:36.668]                               next
[10:25:36.668]                             if (!grepl(pattern, name)) 
[10:25:36.668]                               next
[10:25:36.668]                             invokeRestart(restart)
[10:25:36.668]                             muffled <- TRUE
[10:25:36.668]                             break
[10:25:36.668]                           }
[10:25:36.668]                         }
[10:25:36.668]                       }
[10:25:36.668]                       invisible(muffled)
[10:25:36.668]                     }
[10:25:36.668]                     muffleCondition(cond, pattern = "^muffle")
[10:25:36.668]                   }
[10:25:36.668]                 }
[10:25:36.668]                 else {
[10:25:36.668]                   if (TRUE) {
[10:25:36.668]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:25:36.668]                     {
[10:25:36.668]                       inherits <- base::inherits
[10:25:36.668]                       invokeRestart <- base::invokeRestart
[10:25:36.668]                       is.null <- base::is.null
[10:25:36.668]                       muffled <- FALSE
[10:25:36.668]                       if (inherits(cond, "message")) {
[10:25:36.668]                         muffled <- grepl(pattern, "muffleMessage")
[10:25:36.668]                         if (muffled) 
[10:25:36.668]                           invokeRestart("muffleMessage")
[10:25:36.668]                       }
[10:25:36.668]                       else if (inherits(cond, "warning")) {
[10:25:36.668]                         muffled <- grepl(pattern, "muffleWarning")
[10:25:36.668]                         if (muffled) 
[10:25:36.668]                           invokeRestart("muffleWarning")
[10:25:36.668]                       }
[10:25:36.668]                       else if (inherits(cond, "condition")) {
[10:25:36.668]                         if (!is.null(pattern)) {
[10:25:36.668]                           computeRestarts <- base::computeRestarts
[10:25:36.668]                           grepl <- base::grepl
[10:25:36.668]                           restarts <- computeRestarts(cond)
[10:25:36.668]                           for (restart in restarts) {
[10:25:36.668]                             name <- restart$name
[10:25:36.668]                             if (is.null(name)) 
[10:25:36.668]                               next
[10:25:36.668]                             if (!grepl(pattern, name)) 
[10:25:36.668]                               next
[10:25:36.668]                             invokeRestart(restart)
[10:25:36.668]                             muffled <- TRUE
[10:25:36.668]                             break
[10:25:36.668]                           }
[10:25:36.668]                         }
[10:25:36.668]                       }
[10:25:36.668]                       invisible(muffled)
[10:25:36.668]                     }
[10:25:36.668]                     muffleCondition(cond, pattern = "^muffle")
[10:25:36.668]                   }
[10:25:36.668]                 }
[10:25:36.668]             }
[10:25:36.668]         }))
[10:25:36.668]     }, error = function(ex) {
[10:25:36.668]         base::structure(base::list(value = NULL, visible = NULL, 
[10:25:36.668]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:25:36.668]                 ...future.rng), started = ...future.startTime, 
[10:25:36.668]             finished = Sys.time(), session_uuid = NA_character_, 
[10:25:36.668]             version = "1.8"), class = "FutureResult")
[10:25:36.668]     }, finally = {
[10:25:36.668]         if (!identical(...future.workdir, getwd())) 
[10:25:36.668]             setwd(...future.workdir)
[10:25:36.668]         {
[10:25:36.668]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:25:36.668]                 ...future.oldOptions$nwarnings <- NULL
[10:25:36.668]             }
[10:25:36.668]             base::options(...future.oldOptions)
[10:25:36.668]             if (.Platform$OS.type == "windows") {
[10:25:36.668]                 old_names <- names(...future.oldEnvVars)
[10:25:36.668]                 envs <- base::Sys.getenv()
[10:25:36.668]                 names <- names(envs)
[10:25:36.668]                 common <- intersect(names, old_names)
[10:25:36.668]                 added <- setdiff(names, old_names)
[10:25:36.668]                 removed <- setdiff(old_names, names)
[10:25:36.668]                 changed <- common[...future.oldEnvVars[common] != 
[10:25:36.668]                   envs[common]]
[10:25:36.668]                 NAMES <- toupper(changed)
[10:25:36.668]                 args <- list()
[10:25:36.668]                 for (kk in seq_along(NAMES)) {
[10:25:36.668]                   name <- changed[[kk]]
[10:25:36.668]                   NAME <- NAMES[[kk]]
[10:25:36.668]                   if (name != NAME && is.element(NAME, old_names)) 
[10:25:36.668]                     next
[10:25:36.668]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:25:36.668]                 }
[10:25:36.668]                 NAMES <- toupper(added)
[10:25:36.668]                 for (kk in seq_along(NAMES)) {
[10:25:36.668]                   name <- added[[kk]]
[10:25:36.668]                   NAME <- NAMES[[kk]]
[10:25:36.668]                   if (name != NAME && is.element(NAME, old_names)) 
[10:25:36.668]                     next
[10:25:36.668]                   args[[name]] <- ""
[10:25:36.668]                 }
[10:25:36.668]                 NAMES <- toupper(removed)
[10:25:36.668]                 for (kk in seq_along(NAMES)) {
[10:25:36.668]                   name <- removed[[kk]]
[10:25:36.668]                   NAME <- NAMES[[kk]]
[10:25:36.668]                   if (name != NAME && is.element(NAME, old_names)) 
[10:25:36.668]                     next
[10:25:36.668]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:25:36.668]                 }
[10:25:36.668]                 if (length(args) > 0) 
[10:25:36.668]                   base::do.call(base::Sys.setenv, args = args)
[10:25:36.668]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:25:36.668]             }
[10:25:36.668]             else {
[10:25:36.668]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:25:36.668]             }
[10:25:36.668]             {
[10:25:36.668]                 if (base::length(...future.futureOptionsAdded) > 
[10:25:36.668]                   0L) {
[10:25:36.668]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:25:36.668]                   base::names(opts) <- ...future.futureOptionsAdded
[10:25:36.668]                   base::options(opts)
[10:25:36.668]                 }
[10:25:36.668]                 {
[10:25:36.668]                   {
[10:25:36.668]                     NULL
[10:25:36.668]                     RNGkind("Mersenne-Twister")
[10:25:36.668]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[10:25:36.668]                       inherits = FALSE)
[10:25:36.668]                   }
[10:25:36.668]                   options(future.plan = NULL)
[10:25:36.668]                   if (is.na(NA_character_)) 
[10:25:36.668]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:25:36.668]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:25:36.668]                   future::plan(list(function (..., envir = parent.frame()) 
[10:25:36.668]                   {
[10:25:36.668]                     future <- SequentialFuture(..., envir = envir)
[10:25:36.668]                     if (!future$lazy) 
[10:25:36.668]                       future <- run(future)
[10:25:36.668]                     invisible(future)
[10:25:36.668]                   }), .cleanup = FALSE, .init = FALSE)
[10:25:36.668]                 }
[10:25:36.668]             }
[10:25:36.668]         }
[10:25:36.668]     })
[10:25:36.668]     if (TRUE) {
[10:25:36.668]         base::sink(type = "output", split = FALSE)
[10:25:36.668]         if (TRUE) {
[10:25:36.668]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:25:36.668]         }
[10:25:36.668]         else {
[10:25:36.668]             ...future.result["stdout"] <- base::list(NULL)
[10:25:36.668]         }
[10:25:36.668]         base::close(...future.stdout)
[10:25:36.668]         ...future.stdout <- NULL
[10:25:36.668]     }
[10:25:36.668]     ...future.result$conditions <- ...future.conditions
[10:25:36.668]     ...future.result$finished <- base::Sys.time()
[10:25:36.668]     ...future.result
[10:25:36.668] }
[10:25:36.669] assign_globals() ...
[10:25:36.669] List of 1
[10:25:36.669]  $ a: num 10
[10:25:36.669]  - attr(*, "where")=List of 1
[10:25:36.669]   ..$ a:<environment: R_EmptyEnv> 
[10:25:36.669]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:25:36.669]  - attr(*, "resolved")= logi FALSE
[10:25:36.669]  - attr(*, "total_size")= num 56
[10:25:36.669]  - attr(*, "already-done")= logi TRUE
[10:25:36.672] - copied ‘a’ to environment
[10:25:36.672] assign_globals() ... done
[10:25:36.672] plan(): Setting new future strategy stack:
[10:25:36.672] List of future strategies:
[10:25:36.672] 1. sequential:
[10:25:36.672]    - args: function (..., envir = parent.frame())
[10:25:36.672]    - tweaked: FALSE
[10:25:36.672]    - call: NULL
[10:25:36.672] plan(): nbrOfWorkers() = 1
[10:25:36.673] plan(): Setting new future strategy stack:
[10:25:36.673] List of future strategies:
[10:25:36.673] 1. sequential:
[10:25:36.673]    - args: function (..., envir = parent.frame())
[10:25:36.673]    - tweaked: FALSE
[10:25:36.673]    - call: plan(strategy)
[10:25:36.673] plan(): nbrOfWorkers() = 1
[10:25:36.674] SequentialFuture started (and completed)
[10:25:36.674] - Launch lazy future ... done
[10:25:36.674] run() for ‘SequentialFuture’ ... done
b = 11
*** %<-% with ‘sequential’ futures ... DONE
Testing with 1 cores ... DONE
Testing with 2 cores ...
*** %<-% with ‘multicore’ futures ...
[10:25:36.679] plan(): Setting new future strategy stack:
[10:25:36.679] List of future strategies:
[10:25:36.679] 1. multicore:
[10:25:36.679]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[10:25:36.679]    - tweaked: FALSE
[10:25:36.679]    - call: plan(strategy)
[10:25:36.684] plan(): nbrOfWorkers() = 2
** Future evaluation without globals
[10:25:36.684] getGlobalsAndPackages() ...
[10:25:36.684] Searching for globals...
[10:25:36.685] - globals found: [2] ‘{’, ‘<-’
[10:25:36.685] Searching for globals ... DONE
[10:25:36.685] Resolving globals: FALSE
[10:25:36.686] 
[10:25:36.686] 
[10:25:36.686] getGlobalsAndPackages() ... DONE
[10:25:36.686] run() for ‘Future’ ...
[10:25:36.686] - state: ‘created’
[10:25:36.686] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:25:36.690] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[10:25:36.690] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[10:25:36.690]   - Field: ‘label’
[10:25:36.691]   - Field: ‘local’
[10:25:36.691]   - Field: ‘owner’
[10:25:36.691]   - Field: ‘envir’
[10:25:36.691]   - Field: ‘workers’
[10:25:36.691]   - Field: ‘packages’
[10:25:36.691]   - Field: ‘gc’
[10:25:36.691]   - Field: ‘job’
[10:25:36.691]   - Field: ‘conditions’
[10:25:36.692]   - Field: ‘expr’
[10:25:36.692]   - Field: ‘uuid’
[10:25:36.692]   - Field: ‘seed’
[10:25:36.692]   - Field: ‘version’
[10:25:36.692]   - Field: ‘result’
[10:25:36.692]   - Field: ‘asynchronous’
[10:25:36.692]   - Field: ‘calls’
[10:25:36.692]   - Field: ‘globals’
[10:25:36.692]   - Field: ‘stdout’
[10:25:36.693]   - Field: ‘earlySignal’
[10:25:36.693]   - Field: ‘lazy’
[10:25:36.693]   - Field: ‘state’
[10:25:36.693] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[10:25:36.693] - Launch lazy future ...
[10:25:36.694] Packages needed by the future expression (n = 0): <none>
[10:25:36.694] Packages needed by future strategies (n = 0): <none>
[10:25:36.695] {
[10:25:36.695]     {
[10:25:36.695]         {
[10:25:36.695]             ...future.startTime <- base::Sys.time()
[10:25:36.695]             {
[10:25:36.695]                 {
[10:25:36.695]                   {
[10:25:36.695]                     {
[10:25:36.695]                       base::local({
[10:25:36.695]                         has_future <- base::requireNamespace("future", 
[10:25:36.695]                           quietly = TRUE)
[10:25:36.695]                         if (has_future) {
[10:25:36.695]                           ns <- base::getNamespace("future")
[10:25:36.695]                           version <- ns[[".package"]][["version"]]
[10:25:36.695]                           if (is.null(version)) 
[10:25:36.695]                             version <- utils::packageVersion("future")
[10:25:36.695]                         }
[10:25:36.695]                         else {
[10:25:36.695]                           version <- NULL
[10:25:36.695]                         }
[10:25:36.695]                         if (!has_future || version < "1.8.0") {
[10:25:36.695]                           info <- base::c(r_version = base::gsub("R version ", 
[10:25:36.695]                             "", base::R.version$version.string), 
[10:25:36.695]                             platform = base::sprintf("%s (%s-bit)", 
[10:25:36.695]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:25:36.695]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[10:25:36.695]                               "release", "version")], collapse = " "), 
[10:25:36.695]                             hostname = base::Sys.info()[["nodename"]])
[10:25:36.695]                           info <- base::sprintf("%s: %s", base::names(info), 
[10:25:36.695]                             info)
[10:25:36.695]                           info <- base::paste(info, collapse = "; ")
[10:25:36.695]                           if (!has_future) {
[10:25:36.695]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:25:36.695]                               info)
[10:25:36.695]                           }
[10:25:36.695]                           else {
[10:25:36.695]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:25:36.695]                               info, version)
[10:25:36.695]                           }
[10:25:36.695]                           base::stop(msg)
[10:25:36.695]                         }
[10:25:36.695]                       })
[10:25:36.695]                     }
[10:25:36.695]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[10:25:36.695]                     base::options(mc.cores = 1L)
[10:25:36.695]                   }
[10:25:36.695]                   options(future.plan = NULL)
[10:25:36.695]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:25:36.695]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:25:36.695]                 }
[10:25:36.695]                 ...future.workdir <- getwd()
[10:25:36.695]             }
[10:25:36.695]             ...future.oldOptions <- base::as.list(base::.Options)
[10:25:36.695]             ...future.oldEnvVars <- base::Sys.getenv()
[10:25:36.695]         }
[10:25:36.695]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:25:36.695]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[10:25:36.695]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:25:36.695]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:25:36.695]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:25:36.695]             future.stdout.windows.reencode = NULL, width = 80L)
[10:25:36.695]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:25:36.695]             base::names(...future.oldOptions))
[10:25:36.695]     }
[10:25:36.695]     if (FALSE) {
[10:25:36.695]     }
[10:25:36.695]     else {
[10:25:36.695]         if (TRUE) {
[10:25:36.695]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:25:36.695]                 open = "w")
[10:25:36.695]         }
[10:25:36.695]         else {
[10:25:36.695]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:25:36.695]                 windows = "NUL", "/dev/null"), open = "w")
[10:25:36.695]         }
[10:25:36.695]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:25:36.695]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:25:36.695]             base::sink(type = "output", split = FALSE)
[10:25:36.695]             base::close(...future.stdout)
[10:25:36.695]         }, add = TRUE)
[10:25:36.695]     }
[10:25:36.695]     ...future.frame <- base::sys.nframe()
[10:25:36.695]     ...future.conditions <- base::list()
[10:25:36.695]     ...future.rng <- base::globalenv()$.Random.seed
[10:25:36.695]     if (FALSE) {
[10:25:36.695]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:25:36.695]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:25:36.695]     }
[10:25:36.695]     ...future.result <- base::tryCatch({
[10:25:36.695]         base::withCallingHandlers({
[10:25:36.695]             ...future.value <- base::withVisible(base::local({
[10:25:36.695]                 withCallingHandlers({
[10:25:36.695]                   {
[10:25:36.695]                     x <- 1
[10:25:36.695]                   }
[10:25:36.695]                 }, immediateCondition = function(cond) {
[10:25:36.695]                   save_rds <- function (object, pathname, ...) 
[10:25:36.695]                   {
[10:25:36.695]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[10:25:36.695]                     if (file_test("-f", pathname_tmp)) {
[10:25:36.695]                       fi_tmp <- file.info(pathname_tmp)
[10:25:36.695]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[10:25:36.695]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[10:25:36.695]                         fi_tmp[["mtime"]])
[10:25:36.695]                     }
[10:25:36.695]                     tryCatch({
[10:25:36.695]                       saveRDS(object, file = pathname_tmp, ...)
[10:25:36.695]                     }, error = function(ex) {
[10:25:36.695]                       msg <- conditionMessage(ex)
[10:25:36.695]                       fi_tmp <- file.info(pathname_tmp)
[10:25:36.695]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[10:25:36.695]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[10:25:36.695]                         fi_tmp[["mtime"]], msg)
[10:25:36.695]                       ex$message <- msg
[10:25:36.695]                       stop(ex)
[10:25:36.695]                     })
[10:25:36.695]                     stopifnot(file_test("-f", pathname_tmp))
[10:25:36.695]                     res <- file.rename(from = pathname_tmp, to = pathname)
[10:25:36.695]                     if (!res || file_test("-f", pathname_tmp)) {
[10:25:36.695]                       fi_tmp <- file.info(pathname_tmp)
[10:25:36.695]                       fi <- file.info(pathname)
[10:25:36.695]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[10:25:36.695]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[10:25:36.695]                         fi_tmp[["mtime"]], sQuote(pathname), 
[10:25:36.695]                         fi[["size"]], fi[["mtime"]])
[10:25:36.695]                       stop(msg)
[10:25:36.695]                     }
[10:25:36.695]                     invisible(pathname)
[10:25:36.695]                   }
[10:25:36.695]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[10:25:36.695]                     rootPath = tempdir()) 
[10:25:36.695]                   {
[10:25:36.695]                     obj <- list(time = Sys.time(), condition = cond)
[10:25:36.695]                     file <- tempfile(pattern = class(cond)[1], 
[10:25:36.695]                       tmpdir = path, fileext = ".rds")
[10:25:36.695]                     save_rds(obj, file)
[10:25:36.695]                   }
[10:25:36.695]                   saveImmediateCondition(cond, path = "/tmp/RtmpEdG1rj/.future/immediateConditions")
[10:25:36.695]                   muffleCondition <- function (cond, pattern = "^muffle") 
[10:25:36.695]                   {
[10:25:36.695]                     inherits <- base::inherits
[10:25:36.695]                     invokeRestart <- base::invokeRestart
[10:25:36.695]                     is.null <- base::is.null
[10:25:36.695]                     muffled <- FALSE
[10:25:36.695]                     if (inherits(cond, "message")) {
[10:25:36.695]                       muffled <- grepl(pattern, "muffleMessage")
[10:25:36.695]                       if (muffled) 
[10:25:36.695]                         invokeRestart("muffleMessage")
[10:25:36.695]                     }
[10:25:36.695]                     else if (inherits(cond, "warning")) {
[10:25:36.695]                       muffled <- grepl(pattern, "muffleWarning")
[10:25:36.695]                       if (muffled) 
[10:25:36.695]                         invokeRestart("muffleWarning")
[10:25:36.695]                     }
[10:25:36.695]                     else if (inherits(cond, "condition")) {
[10:25:36.695]                       if (!is.null(pattern)) {
[10:25:36.695]                         computeRestarts <- base::computeRestarts
[10:25:36.695]                         grepl <- base::grepl
[10:25:36.695]                         restarts <- computeRestarts(cond)
[10:25:36.695]                         for (restart in restarts) {
[10:25:36.695]                           name <- restart$name
[10:25:36.695]                           if (is.null(name)) 
[10:25:36.695]                             next
[10:25:36.695]                           if (!grepl(pattern, name)) 
[10:25:36.695]                             next
[10:25:36.695]                           invokeRestart(restart)
[10:25:36.695]                           muffled <- TRUE
[10:25:36.695]                           break
[10:25:36.695]                         }
[10:25:36.695]                       }
[10:25:36.695]                     }
[10:25:36.695]                     invisible(muffled)
[10:25:36.695]                   }
[10:25:36.695]                   muffleCondition(cond)
[10:25:36.695]                 })
[10:25:36.695]             }))
[10:25:36.695]             future::FutureResult(value = ...future.value$value, 
[10:25:36.695]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:25:36.695]                   ...future.rng), globalenv = if (FALSE) 
[10:25:36.695]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:25:36.695]                     ...future.globalenv.names))
[10:25:36.695]                 else NULL, started = ...future.startTime, version = "1.8")
[10:25:36.695]         }, condition = base::local({
[10:25:36.695]             c <- base::c
[10:25:36.695]             inherits <- base::inherits
[10:25:36.695]             invokeRestart <- base::invokeRestart
[10:25:36.695]             length <- base::length
[10:25:36.695]             list <- base::list
[10:25:36.695]             seq.int <- base::seq.int
[10:25:36.695]             signalCondition <- base::signalCondition
[10:25:36.695]             sys.calls <- base::sys.calls
[10:25:36.695]             `[[` <- base::`[[`
[10:25:36.695]             `+` <- base::`+`
[10:25:36.695]             `<<-` <- base::`<<-`
[10:25:36.695]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:25:36.695]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:25:36.695]                   3L)]
[10:25:36.695]             }
[10:25:36.695]             function(cond) {
[10:25:36.695]                 is_error <- inherits(cond, "error")
[10:25:36.695]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:25:36.695]                   NULL)
[10:25:36.695]                 if (is_error) {
[10:25:36.695]                   sessionInformation <- function() {
[10:25:36.695]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:25:36.695]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:25:36.695]                       search = base::search(), system = base::Sys.info())
[10:25:36.695]                   }
[10:25:36.695]                   ...future.conditions[[length(...future.conditions) + 
[10:25:36.695]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:25:36.695]                     cond$call), session = sessionInformation(), 
[10:25:36.695]                     timestamp = base::Sys.time(), signaled = 0L)
[10:25:36.695]                   signalCondition(cond)
[10:25:36.695]                 }
[10:25:36.695]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:25:36.695]                 "immediateCondition"))) {
[10:25:36.695]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:25:36.695]                   ...future.conditions[[length(...future.conditions) + 
[10:25:36.695]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:25:36.695]                   if (TRUE && !signal) {
[10:25:36.695]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:25:36.695]                     {
[10:25:36.695]                       inherits <- base::inherits
[10:25:36.695]                       invokeRestart <- base::invokeRestart
[10:25:36.695]                       is.null <- base::is.null
[10:25:36.695]                       muffled <- FALSE
[10:25:36.695]                       if (inherits(cond, "message")) {
[10:25:36.695]                         muffled <- grepl(pattern, "muffleMessage")
[10:25:36.695]                         if (muffled) 
[10:25:36.695]                           invokeRestart("muffleMessage")
[10:25:36.695]                       }
[10:25:36.695]                       else if (inherits(cond, "warning")) {
[10:25:36.695]                         muffled <- grepl(pattern, "muffleWarning")
[10:25:36.695]                         if (muffled) 
[10:25:36.695]                           invokeRestart("muffleWarning")
[10:25:36.695]                       }
[10:25:36.695]                       else if (inherits(cond, "condition")) {
[10:25:36.695]                         if (!is.null(pattern)) {
[10:25:36.695]                           computeRestarts <- base::computeRestarts
[10:25:36.695]                           grepl <- base::grepl
[10:25:36.695]                           restarts <- computeRestarts(cond)
[10:25:36.695]                           for (restart in restarts) {
[10:25:36.695]                             name <- restart$name
[10:25:36.695]                             if (is.null(name)) 
[10:25:36.695]                               next
[10:25:36.695]                             if (!grepl(pattern, name)) 
[10:25:36.695]                               next
[10:25:36.695]                             invokeRestart(restart)
[10:25:36.695]                             muffled <- TRUE
[10:25:36.695]                             break
[10:25:36.695]                           }
[10:25:36.695]                         }
[10:25:36.695]                       }
[10:25:36.695]                       invisible(muffled)
[10:25:36.695]                     }
[10:25:36.695]                     muffleCondition(cond, pattern = "^muffle")
[10:25:36.695]                   }
[10:25:36.695]                 }
[10:25:36.695]                 else {
[10:25:36.695]                   if (TRUE) {
[10:25:36.695]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:25:36.695]                     {
[10:25:36.695]                       inherits <- base::inherits
[10:25:36.695]                       invokeRestart <- base::invokeRestart
[10:25:36.695]                       is.null <- base::is.null
[10:25:36.695]                       muffled <- FALSE
[10:25:36.695]                       if (inherits(cond, "message")) {
[10:25:36.695]                         muffled <- grepl(pattern, "muffleMessage")
[10:25:36.695]                         if (muffled) 
[10:25:36.695]                           invokeRestart("muffleMessage")
[10:25:36.695]                       }
[10:25:36.695]                       else if (inherits(cond, "warning")) {
[10:25:36.695]                         muffled <- grepl(pattern, "muffleWarning")
[10:25:36.695]                         if (muffled) 
[10:25:36.695]                           invokeRestart("muffleWarning")
[10:25:36.695]                       }
[10:25:36.695]                       else if (inherits(cond, "condition")) {
[10:25:36.695]                         if (!is.null(pattern)) {
[10:25:36.695]                           computeRestarts <- base::computeRestarts
[10:25:36.695]                           grepl <- base::grepl
[10:25:36.695]                           restarts <- computeRestarts(cond)
[10:25:36.695]                           for (restart in restarts) {
[10:25:36.695]                             name <- restart$name
[10:25:36.695]                             if (is.null(name)) 
[10:25:36.695]                               next
[10:25:36.695]                             if (!grepl(pattern, name)) 
[10:25:36.695]                               next
[10:25:36.695]                             invokeRestart(restart)
[10:25:36.695]                             muffled <- TRUE
[10:25:36.695]                             break
[10:25:36.695]                           }
[10:25:36.695]                         }
[10:25:36.695]                       }
[10:25:36.695]                       invisible(muffled)
[10:25:36.695]                     }
[10:25:36.695]                     muffleCondition(cond, pattern = "^muffle")
[10:25:36.695]                   }
[10:25:36.695]                 }
[10:25:36.695]             }
[10:25:36.695]         }))
[10:25:36.695]     }, error = function(ex) {
[10:25:36.695]         base::structure(base::list(value = NULL, visible = NULL, 
[10:25:36.695]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:25:36.695]                 ...future.rng), started = ...future.startTime, 
[10:25:36.695]             finished = Sys.time(), session_uuid = NA_character_, 
[10:25:36.695]             version = "1.8"), class = "FutureResult")
[10:25:36.695]     }, finally = {
[10:25:36.695]         if (!identical(...future.workdir, getwd())) 
[10:25:36.695]             setwd(...future.workdir)
[10:25:36.695]         {
[10:25:36.695]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:25:36.695]                 ...future.oldOptions$nwarnings <- NULL
[10:25:36.695]             }
[10:25:36.695]             base::options(...future.oldOptions)
[10:25:36.695]             if (.Platform$OS.type == "windows") {
[10:25:36.695]                 old_names <- names(...future.oldEnvVars)
[10:25:36.695]                 envs <- base::Sys.getenv()
[10:25:36.695]                 names <- names(envs)
[10:25:36.695]                 common <- intersect(names, old_names)
[10:25:36.695]                 added <- setdiff(names, old_names)
[10:25:36.695]                 removed <- setdiff(old_names, names)
[10:25:36.695]                 changed <- common[...future.oldEnvVars[common] != 
[10:25:36.695]                   envs[common]]
[10:25:36.695]                 NAMES <- toupper(changed)
[10:25:36.695]                 args <- list()
[10:25:36.695]                 for (kk in seq_along(NAMES)) {
[10:25:36.695]                   name <- changed[[kk]]
[10:25:36.695]                   NAME <- NAMES[[kk]]
[10:25:36.695]                   if (name != NAME && is.element(NAME, old_names)) 
[10:25:36.695]                     next
[10:25:36.695]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:25:36.695]                 }
[10:25:36.695]                 NAMES <- toupper(added)
[10:25:36.695]                 for (kk in seq_along(NAMES)) {
[10:25:36.695]                   name <- added[[kk]]
[10:25:36.695]                   NAME <- NAMES[[kk]]
[10:25:36.695]                   if (name != NAME && is.element(NAME, old_names)) 
[10:25:36.695]                     next
[10:25:36.695]                   args[[name]] <- ""
[10:25:36.695]                 }
[10:25:36.695]                 NAMES <- toupper(removed)
[10:25:36.695]                 for (kk in seq_along(NAMES)) {
[10:25:36.695]                   name <- removed[[kk]]
[10:25:36.695]                   NAME <- NAMES[[kk]]
[10:25:36.695]                   if (name != NAME && is.element(NAME, old_names)) 
[10:25:36.695]                     next
[10:25:36.695]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:25:36.695]                 }
[10:25:36.695]                 if (length(args) > 0) 
[10:25:36.695]                   base::do.call(base::Sys.setenv, args = args)
[10:25:36.695]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:25:36.695]             }
[10:25:36.695]             else {
[10:25:36.695]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:25:36.695]             }
[10:25:36.695]             {
[10:25:36.695]                 if (base::length(...future.futureOptionsAdded) > 
[10:25:36.695]                   0L) {
[10:25:36.695]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:25:36.695]                   base::names(opts) <- ...future.futureOptionsAdded
[10:25:36.695]                   base::options(opts)
[10:25:36.695]                 }
[10:25:36.695]                 {
[10:25:36.695]                   {
[10:25:36.695]                     base::options(mc.cores = ...future.mc.cores.old)
[10:25:36.695]                     NULL
[10:25:36.695]                   }
[10:25:36.695]                   options(future.plan = NULL)
[10:25:36.695]                   if (is.na(NA_character_)) 
[10:25:36.695]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:25:36.695]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:25:36.695]                   future::plan(list(function (..., workers = availableCores(constraints = "multicore"), 
[10:25:36.695]                     envir = parent.frame()) 
[10:25:36.695]                   {
[10:25:36.695]                     default_workers <- missing(workers)
[10:25:36.695]                     if (is.function(workers)) 
[10:25:36.695]                       workers <- workers()
[10:25:36.695]                     workers <- structure(as.integer(workers), 
[10:25:36.695]                       class = class(workers))
[10:25:36.695]                     stop_if_not(is.finite(workers), workers >= 
[10:25:36.695]                       1L)
[10:25:36.695]                     if ((workers == 1L && !inherits(workers, 
[10:25:36.695]                       "AsIs")) || !supportsMulticore(warn = TRUE)) {
[10:25:36.695]                       if (default_workers) 
[10:25:36.695]                         supportsMulticore(warn = TRUE)
[10:25:36.695]                       return(sequential(..., envir = envir))
[10:25:36.695]                     }
[10:25:36.695]                     oopts <- options(mc.cores = workers)
[10:25:36.695]                     on.exit(options(oopts))
[10:25:36.695]                     future <- MulticoreFuture(..., workers = workers, 
[10:25:36.695]                       envir = envir)
[10:25:36.695]                     if (!future$lazy) 
[10:25:36.695]                       future <- run(future)
[10:25:36.695]                     invisible(future)
[10:25:36.695]                   }), .cleanup = FALSE, .init = FALSE)
[10:25:36.695]                 }
[10:25:36.695]             }
[10:25:36.695]         }
[10:25:36.695]     })
[10:25:36.695]     if (TRUE) {
[10:25:36.695]         base::sink(type = "output", split = FALSE)
[10:25:36.695]         if (TRUE) {
[10:25:36.695]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:25:36.695]         }
[10:25:36.695]         else {
[10:25:36.695]             ...future.result["stdout"] <- base::list(NULL)
[10:25:36.695]         }
[10:25:36.695]         base::close(...future.stdout)
[10:25:36.695]         ...future.stdout <- NULL
[10:25:36.695]     }
[10:25:36.695]     ...future.result$conditions <- ...future.conditions
[10:25:36.695]     ...future.result$finished <- base::Sys.time()
[10:25:36.695]     ...future.result
[10:25:36.695] }
[10:25:36.697] requestCore(): workers = 2
[10:25:36.700] MulticoreFuture started
[10:25:36.700] - Launch lazy future ... done
[10:25:36.701] run() for ‘MulticoreFuture’ ... done
[10:25:36.701] plan(): Setting new future strategy stack:
[10:25:36.701] List of future strategies:
[10:25:36.701] 1. sequential:
[10:25:36.701]    - args: function (..., envir = parent.frame())
[10:25:36.701]    - tweaked: FALSE
[10:25:36.701]    - call: NULL
[10:25:36.702] plan(): nbrOfWorkers() = 1
[10:25:36.702] result() for MulticoreFuture ...
[10:25:36.704] plan(): Setting new future strategy stack:
[10:25:36.704] List of future strategies:
[10:25:36.704] 1. multicore:
[10:25:36.704]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[10:25:36.704]    - tweaked: FALSE
[10:25:36.704]    - call: plan(strategy)
[10:25:36.709] plan(): nbrOfWorkers() = 2
[10:25:36.713] result() for MulticoreFuture ...
[10:25:36.713] result() for MulticoreFuture ... done
[10:25:36.714] result() for MulticoreFuture ... done
[10:25:36.714] result() for MulticoreFuture ...
[10:25:36.714] result() for MulticoreFuture ... done
** Future evaluation with globals
[10:25:36.714] getGlobalsAndPackages() ...
[10:25:36.714] Searching for globals...
[10:25:36.716] - globals found: [3] ‘{’, ‘<-’, ‘a’
[10:25:36.716] Searching for globals ... DONE
[10:25:36.716] Resolving globals: FALSE
[10:25:36.716] The total size of the 1 globals is 56 bytes (56 bytes)
[10:25:36.717] The total size of the 1 globals exported for future expression (‘{; x <- a; }’) is 56 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘a’ (56 bytes of class ‘numeric’)
[10:25:36.717] - globals: [1] ‘a’
[10:25:36.717] 
[10:25:36.717] getGlobalsAndPackages() ... DONE
[10:25:36.718] run() for ‘Future’ ...
[10:25:36.718] - state: ‘created’
[10:25:36.718] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:25:36.722] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[10:25:36.722] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[10:25:36.723]   - Field: ‘label’
[10:25:36.723]   - Field: ‘local’
[10:25:36.723]   - Field: ‘owner’
[10:25:36.723]   - Field: ‘envir’
[10:25:36.723]   - Field: ‘workers’
[10:25:36.723]   - Field: ‘packages’
[10:25:36.723]   - Field: ‘gc’
[10:25:36.723]   - Field: ‘job’
[10:25:36.724]   - Field: ‘conditions’
[10:25:36.724]   - Field: ‘expr’
[10:25:36.724]   - Field: ‘uuid’
[10:25:36.724]   - Field: ‘seed’
[10:25:36.724]   - Field: ‘version’
[10:25:36.724]   - Field: ‘result’
[10:25:36.724]   - Field: ‘asynchronous’
[10:25:36.724]   - Field: ‘calls’
[10:25:36.724]   - Field: ‘globals’
[10:25:36.725]   - Field: ‘stdout’
[10:25:36.725]   - Field: ‘earlySignal’
[10:25:36.725]   - Field: ‘lazy’
[10:25:36.725]   - Field: ‘state’
[10:25:36.725] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[10:25:36.725] - Launch lazy future ...
[10:25:36.726] Packages needed by the future expression (n = 0): <none>
[10:25:36.726] Packages needed by future strategies (n = 0): <none>
[10:25:36.726] {
[10:25:36.726]     {
[10:25:36.726]         {
[10:25:36.726]             ...future.startTime <- base::Sys.time()
[10:25:36.726]             {
[10:25:36.726]                 {
[10:25:36.726]                   {
[10:25:36.726]                     {
[10:25:36.726]                       base::local({
[10:25:36.726]                         has_future <- base::requireNamespace("future", 
[10:25:36.726]                           quietly = TRUE)
[10:25:36.726]                         if (has_future) {
[10:25:36.726]                           ns <- base::getNamespace("future")
[10:25:36.726]                           version <- ns[[".package"]][["version"]]
[10:25:36.726]                           if (is.null(version)) 
[10:25:36.726]                             version <- utils::packageVersion("future")
[10:25:36.726]                         }
[10:25:36.726]                         else {
[10:25:36.726]                           version <- NULL
[10:25:36.726]                         }
[10:25:36.726]                         if (!has_future || version < "1.8.0") {
[10:25:36.726]                           info <- base::c(r_version = base::gsub("R version ", 
[10:25:36.726]                             "", base::R.version$version.string), 
[10:25:36.726]                             platform = base::sprintf("%s (%s-bit)", 
[10:25:36.726]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:25:36.726]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[10:25:36.726]                               "release", "version")], collapse = " "), 
[10:25:36.726]                             hostname = base::Sys.info()[["nodename"]])
[10:25:36.726]                           info <- base::sprintf("%s: %s", base::names(info), 
[10:25:36.726]                             info)
[10:25:36.726]                           info <- base::paste(info, collapse = "; ")
[10:25:36.726]                           if (!has_future) {
[10:25:36.726]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:25:36.726]                               info)
[10:25:36.726]                           }
[10:25:36.726]                           else {
[10:25:36.726]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:25:36.726]                               info, version)
[10:25:36.726]                           }
[10:25:36.726]                           base::stop(msg)
[10:25:36.726]                         }
[10:25:36.726]                       })
[10:25:36.726]                     }
[10:25:36.726]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[10:25:36.726]                     base::options(mc.cores = 1L)
[10:25:36.726]                   }
[10:25:36.726]                   options(future.plan = NULL)
[10:25:36.726]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:25:36.726]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:25:36.726]                 }
[10:25:36.726]                 ...future.workdir <- getwd()
[10:25:36.726]             }
[10:25:36.726]             ...future.oldOptions <- base::as.list(base::.Options)
[10:25:36.726]             ...future.oldEnvVars <- base::Sys.getenv()
[10:25:36.726]         }
[10:25:36.726]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:25:36.726]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[10:25:36.726]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:25:36.726]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:25:36.726]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:25:36.726]             future.stdout.windows.reencode = NULL, width = 80L)
[10:25:36.726]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:25:36.726]             base::names(...future.oldOptions))
[10:25:36.726]     }
[10:25:36.726]     if (FALSE) {
[10:25:36.726]     }
[10:25:36.726]     else {
[10:25:36.726]         if (TRUE) {
[10:25:36.726]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:25:36.726]                 open = "w")
[10:25:36.726]         }
[10:25:36.726]         else {
[10:25:36.726]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:25:36.726]                 windows = "NUL", "/dev/null"), open = "w")
[10:25:36.726]         }
[10:25:36.726]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:25:36.726]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:25:36.726]             base::sink(type = "output", split = FALSE)
[10:25:36.726]             base::close(...future.stdout)
[10:25:36.726]         }, add = TRUE)
[10:25:36.726]     }
[10:25:36.726]     ...future.frame <- base::sys.nframe()
[10:25:36.726]     ...future.conditions <- base::list()
[10:25:36.726]     ...future.rng <- base::globalenv()$.Random.seed
[10:25:36.726]     if (FALSE) {
[10:25:36.726]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:25:36.726]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:25:36.726]     }
[10:25:36.726]     ...future.result <- base::tryCatch({
[10:25:36.726]         base::withCallingHandlers({
[10:25:36.726]             ...future.value <- base::withVisible(base::local({
[10:25:36.726]                 withCallingHandlers({
[10:25:36.726]                   {
[10:25:36.726]                     x <- a
[10:25:36.726]                   }
[10:25:36.726]                 }, immediateCondition = function(cond) {
[10:25:36.726]                   save_rds <- function (object, pathname, ...) 
[10:25:36.726]                   {
[10:25:36.726]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[10:25:36.726]                     if (file_test("-f", pathname_tmp)) {
[10:25:36.726]                       fi_tmp <- file.info(pathname_tmp)
[10:25:36.726]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[10:25:36.726]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[10:25:36.726]                         fi_tmp[["mtime"]])
[10:25:36.726]                     }
[10:25:36.726]                     tryCatch({
[10:25:36.726]                       saveRDS(object, file = pathname_tmp, ...)
[10:25:36.726]                     }, error = function(ex) {
[10:25:36.726]                       msg <- conditionMessage(ex)
[10:25:36.726]                       fi_tmp <- file.info(pathname_tmp)
[10:25:36.726]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[10:25:36.726]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[10:25:36.726]                         fi_tmp[["mtime"]], msg)
[10:25:36.726]                       ex$message <- msg
[10:25:36.726]                       stop(ex)
[10:25:36.726]                     })
[10:25:36.726]                     stopifnot(file_test("-f", pathname_tmp))
[10:25:36.726]                     res <- file.rename(from = pathname_tmp, to = pathname)
[10:25:36.726]                     if (!res || file_test("-f", pathname_tmp)) {
[10:25:36.726]                       fi_tmp <- file.info(pathname_tmp)
[10:25:36.726]                       fi <- file.info(pathname)
[10:25:36.726]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[10:25:36.726]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[10:25:36.726]                         fi_tmp[["mtime"]], sQuote(pathname), 
[10:25:36.726]                         fi[["size"]], fi[["mtime"]])
[10:25:36.726]                       stop(msg)
[10:25:36.726]                     }
[10:25:36.726]                     invisible(pathname)
[10:25:36.726]                   }
[10:25:36.726]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[10:25:36.726]                     rootPath = tempdir()) 
[10:25:36.726]                   {
[10:25:36.726]                     obj <- list(time = Sys.time(), condition = cond)
[10:25:36.726]                     file <- tempfile(pattern = class(cond)[1], 
[10:25:36.726]                       tmpdir = path, fileext = ".rds")
[10:25:36.726]                     save_rds(obj, file)
[10:25:36.726]                   }
[10:25:36.726]                   saveImmediateCondition(cond, path = "/tmp/RtmpEdG1rj/.future/immediateConditions")
[10:25:36.726]                   muffleCondition <- function (cond, pattern = "^muffle") 
[10:25:36.726]                   {
[10:25:36.726]                     inherits <- base::inherits
[10:25:36.726]                     invokeRestart <- base::invokeRestart
[10:25:36.726]                     is.null <- base::is.null
[10:25:36.726]                     muffled <- FALSE
[10:25:36.726]                     if (inherits(cond, "message")) {
[10:25:36.726]                       muffled <- grepl(pattern, "muffleMessage")
[10:25:36.726]                       if (muffled) 
[10:25:36.726]                         invokeRestart("muffleMessage")
[10:25:36.726]                     }
[10:25:36.726]                     else if (inherits(cond, "warning")) {
[10:25:36.726]                       muffled <- grepl(pattern, "muffleWarning")
[10:25:36.726]                       if (muffled) 
[10:25:36.726]                         invokeRestart("muffleWarning")
[10:25:36.726]                     }
[10:25:36.726]                     else if (inherits(cond, "condition")) {
[10:25:36.726]                       if (!is.null(pattern)) {
[10:25:36.726]                         computeRestarts <- base::computeRestarts
[10:25:36.726]                         grepl <- base::grepl
[10:25:36.726]                         restarts <- computeRestarts(cond)
[10:25:36.726]                         for (restart in restarts) {
[10:25:36.726]                           name <- restart$name
[10:25:36.726]                           if (is.null(name)) 
[10:25:36.726]                             next
[10:25:36.726]                           if (!grepl(pattern, name)) 
[10:25:36.726]                             next
[10:25:36.726]                           invokeRestart(restart)
[10:25:36.726]                           muffled <- TRUE
[10:25:36.726]                           break
[10:25:36.726]                         }
[10:25:36.726]                       }
[10:25:36.726]                     }
[10:25:36.726]                     invisible(muffled)
[10:25:36.726]                   }
[10:25:36.726]                   muffleCondition(cond)
[10:25:36.726]                 })
[10:25:36.726]             }))
[10:25:36.726]             future::FutureResult(value = ...future.value$value, 
[10:25:36.726]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:25:36.726]                   ...future.rng), globalenv = if (FALSE) 
[10:25:36.726]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:25:36.726]                     ...future.globalenv.names))
[10:25:36.726]                 else NULL, started = ...future.startTime, version = "1.8")
[10:25:36.726]         }, condition = base::local({
[10:25:36.726]             c <- base::c
[10:25:36.726]             inherits <- base::inherits
[10:25:36.726]             invokeRestart <- base::invokeRestart
[10:25:36.726]             length <- base::length
[10:25:36.726]             list <- base::list
[10:25:36.726]             seq.int <- base::seq.int
[10:25:36.726]             signalCondition <- base::signalCondition
[10:25:36.726]             sys.calls <- base::sys.calls
[10:25:36.726]             `[[` <- base::`[[`
[10:25:36.726]             `+` <- base::`+`
[10:25:36.726]             `<<-` <- base::`<<-`
[10:25:36.726]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:25:36.726]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:25:36.726]                   3L)]
[10:25:36.726]             }
[10:25:36.726]             function(cond) {
[10:25:36.726]                 is_error <- inherits(cond, "error")
[10:25:36.726]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:25:36.726]                   NULL)
[10:25:36.726]                 if (is_error) {
[10:25:36.726]                   sessionInformation <- function() {
[10:25:36.726]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:25:36.726]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:25:36.726]                       search = base::search(), system = base::Sys.info())
[10:25:36.726]                   }
[10:25:36.726]                   ...future.conditions[[length(...future.conditions) + 
[10:25:36.726]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:25:36.726]                     cond$call), session = sessionInformation(), 
[10:25:36.726]                     timestamp = base::Sys.time(), signaled = 0L)
[10:25:36.726]                   signalCondition(cond)
[10:25:36.726]                 }
[10:25:36.726]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:25:36.726]                 "immediateCondition"))) {
[10:25:36.726]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:25:36.726]                   ...future.conditions[[length(...future.conditions) + 
[10:25:36.726]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:25:36.726]                   if (TRUE && !signal) {
[10:25:36.726]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:25:36.726]                     {
[10:25:36.726]                       inherits <- base::inherits
[10:25:36.726]                       invokeRestart <- base::invokeRestart
[10:25:36.726]                       is.null <- base::is.null
[10:25:36.726]                       muffled <- FALSE
[10:25:36.726]                       if (inherits(cond, "message")) {
[10:25:36.726]                         muffled <- grepl(pattern, "muffleMessage")
[10:25:36.726]                         if (muffled) 
[10:25:36.726]                           invokeRestart("muffleMessage")
[10:25:36.726]                       }
[10:25:36.726]                       else if (inherits(cond, "warning")) {
[10:25:36.726]                         muffled <- grepl(pattern, "muffleWarning")
[10:25:36.726]                         if (muffled) 
[10:25:36.726]                           invokeRestart("muffleWarning")
[10:25:36.726]                       }
[10:25:36.726]                       else if (inherits(cond, "condition")) {
[10:25:36.726]                         if (!is.null(pattern)) {
[10:25:36.726]                           computeRestarts <- base::computeRestarts
[10:25:36.726]                           grepl <- base::grepl
[10:25:36.726]                           restarts <- computeRestarts(cond)
[10:25:36.726]                           for (restart in restarts) {
[10:25:36.726]                             name <- restart$name
[10:25:36.726]                             if (is.null(name)) 
[10:25:36.726]                               next
[10:25:36.726]                             if (!grepl(pattern, name)) 
[10:25:36.726]                               next
[10:25:36.726]                             invokeRestart(restart)
[10:25:36.726]                             muffled <- TRUE
[10:25:36.726]                             break
[10:25:36.726]                           }
[10:25:36.726]                         }
[10:25:36.726]                       }
[10:25:36.726]                       invisible(muffled)
[10:25:36.726]                     }
[10:25:36.726]                     muffleCondition(cond, pattern = "^muffle")
[10:25:36.726]                   }
[10:25:36.726]                 }
[10:25:36.726]                 else {
[10:25:36.726]                   if (TRUE) {
[10:25:36.726]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:25:36.726]                     {
[10:25:36.726]                       inherits <- base::inherits
[10:25:36.726]                       invokeRestart <- base::invokeRestart
[10:25:36.726]                       is.null <- base::is.null
[10:25:36.726]                       muffled <- FALSE
[10:25:36.726]                       if (inherits(cond, "message")) {
[10:25:36.726]                         muffled <- grepl(pattern, "muffleMessage")
[10:25:36.726]                         if (muffled) 
[10:25:36.726]                           invokeRestart("muffleMessage")
[10:25:36.726]                       }
[10:25:36.726]                       else if (inherits(cond, "warning")) {
[10:25:36.726]                         muffled <- grepl(pattern, "muffleWarning")
[10:25:36.726]                         if (muffled) 
[10:25:36.726]                           invokeRestart("muffleWarning")
[10:25:36.726]                       }
[10:25:36.726]                       else if (inherits(cond, "condition")) {
[10:25:36.726]                         if (!is.null(pattern)) {
[10:25:36.726]                           computeRestarts <- base::computeRestarts
[10:25:36.726]                           grepl <- base::grepl
[10:25:36.726]                           restarts <- computeRestarts(cond)
[10:25:36.726]                           for (restart in restarts) {
[10:25:36.726]                             name <- restart$name
[10:25:36.726]                             if (is.null(name)) 
[10:25:36.726]                               next
[10:25:36.726]                             if (!grepl(pattern, name)) 
[10:25:36.726]                               next
[10:25:36.726]                             invokeRestart(restart)
[10:25:36.726]                             muffled <- TRUE
[10:25:36.726]                             break
[10:25:36.726]                           }
[10:25:36.726]                         }
[10:25:36.726]                       }
[10:25:36.726]                       invisible(muffled)
[10:25:36.726]                     }
[10:25:36.726]                     muffleCondition(cond, pattern = "^muffle")
[10:25:36.726]                   }
[10:25:36.726]                 }
[10:25:36.726]             }
[10:25:36.726]         }))
[10:25:36.726]     }, error = function(ex) {
[10:25:36.726]         base::structure(base::list(value = NULL, visible = NULL, 
[10:25:36.726]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:25:36.726]                 ...future.rng), started = ...future.startTime, 
[10:25:36.726]             finished = Sys.time(), session_uuid = NA_character_, 
[10:25:36.726]             version = "1.8"), class = "FutureResult")
[10:25:36.726]     }, finally = {
[10:25:36.726]         if (!identical(...future.workdir, getwd())) 
[10:25:36.726]             setwd(...future.workdir)
[10:25:36.726]         {
[10:25:36.726]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:25:36.726]                 ...future.oldOptions$nwarnings <- NULL
[10:25:36.726]             }
[10:25:36.726]             base::options(...future.oldOptions)
[10:25:36.726]             if (.Platform$OS.type == "windows") {
[10:25:36.726]                 old_names <- names(...future.oldEnvVars)
[10:25:36.726]                 envs <- base::Sys.getenv()
[10:25:36.726]                 names <- names(envs)
[10:25:36.726]                 common <- intersect(names, old_names)
[10:25:36.726]                 added <- setdiff(names, old_names)
[10:25:36.726]                 removed <- setdiff(old_names, names)
[10:25:36.726]                 changed <- common[...future.oldEnvVars[common] != 
[10:25:36.726]                   envs[common]]
[10:25:36.726]                 NAMES <- toupper(changed)
[10:25:36.726]                 args <- list()
[10:25:36.726]                 for (kk in seq_along(NAMES)) {
[10:25:36.726]                   name <- changed[[kk]]
[10:25:36.726]                   NAME <- NAMES[[kk]]
[10:25:36.726]                   if (name != NAME && is.element(NAME, old_names)) 
[10:25:36.726]                     next
[10:25:36.726]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:25:36.726]                 }
[10:25:36.726]                 NAMES <- toupper(added)
[10:25:36.726]                 for (kk in seq_along(NAMES)) {
[10:25:36.726]                   name <- added[[kk]]
[10:25:36.726]                   NAME <- NAMES[[kk]]
[10:25:36.726]                   if (name != NAME && is.element(NAME, old_names)) 
[10:25:36.726]                     next
[10:25:36.726]                   args[[name]] <- ""
[10:25:36.726]                 }
[10:25:36.726]                 NAMES <- toupper(removed)
[10:25:36.726]                 for (kk in seq_along(NAMES)) {
[10:25:36.726]                   name <- removed[[kk]]
[10:25:36.726]                   NAME <- NAMES[[kk]]
[10:25:36.726]                   if (name != NAME && is.element(NAME, old_names)) 
[10:25:36.726]                     next
[10:25:36.726]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:25:36.726]                 }
[10:25:36.726]                 if (length(args) > 0) 
[10:25:36.726]                   base::do.call(base::Sys.setenv, args = args)
[10:25:36.726]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:25:36.726]             }
[10:25:36.726]             else {
[10:25:36.726]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:25:36.726]             }
[10:25:36.726]             {
[10:25:36.726]                 if (base::length(...future.futureOptionsAdded) > 
[10:25:36.726]                   0L) {
[10:25:36.726]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:25:36.726]                   base::names(opts) <- ...future.futureOptionsAdded
[10:25:36.726]                   base::options(opts)
[10:25:36.726]                 }
[10:25:36.726]                 {
[10:25:36.726]                   {
[10:25:36.726]                     base::options(mc.cores = ...future.mc.cores.old)
[10:25:36.726]                     NULL
[10:25:36.726]                   }
[10:25:36.726]                   options(future.plan = NULL)
[10:25:36.726]                   if (is.na(NA_character_)) 
[10:25:36.726]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:25:36.726]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:25:36.726]                   future::plan(list(function (..., workers = availableCores(constraints = "multicore"), 
[10:25:36.726]                     envir = parent.frame()) 
[10:25:36.726]                   {
[10:25:36.726]                     default_workers <- missing(workers)
[10:25:36.726]                     if (is.function(workers)) 
[10:25:36.726]                       workers <- workers()
[10:25:36.726]                     workers <- structure(as.integer(workers), 
[10:25:36.726]                       class = class(workers))
[10:25:36.726]                     stop_if_not(is.finite(workers), workers >= 
[10:25:36.726]                       1L)
[10:25:36.726]                     if ((workers == 1L && !inherits(workers, 
[10:25:36.726]                       "AsIs")) || !supportsMulticore(warn = TRUE)) {
[10:25:36.726]                       if (default_workers) 
[10:25:36.726]                         supportsMulticore(warn = TRUE)
[10:25:36.726]                       return(sequential(..., envir = envir))
[10:25:36.726]                     }
[10:25:36.726]                     oopts <- options(mc.cores = workers)
[10:25:36.726]                     on.exit(options(oopts))
[10:25:36.726]                     future <- MulticoreFuture(..., workers = workers, 
[10:25:36.726]                       envir = envir)
[10:25:36.726]                     if (!future$lazy) 
[10:25:36.726]                       future <- run(future)
[10:25:36.726]                     invisible(future)
[10:25:36.726]                   }), .cleanup = FALSE, .init = FALSE)
[10:25:36.726]                 }
[10:25:36.726]             }
[10:25:36.726]         }
[10:25:36.726]     })
[10:25:36.726]     if (TRUE) {
[10:25:36.726]         base::sink(type = "output", split = FALSE)
[10:25:36.726]         if (TRUE) {
[10:25:36.726]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:25:36.726]         }
[10:25:36.726]         else {
[10:25:36.726]             ...future.result["stdout"] <- base::list(NULL)
[10:25:36.726]         }
[10:25:36.726]         base::close(...future.stdout)
[10:25:36.726]         ...future.stdout <- NULL
[10:25:36.726]     }
[10:25:36.726]     ...future.result$conditions <- ...future.conditions
[10:25:36.726]     ...future.result$finished <- base::Sys.time()
[10:25:36.726]     ...future.result
[10:25:36.726] }
[10:25:36.729] assign_globals() ...
[10:25:36.729] List of 1
[10:25:36.729]  $ a: num 2
[10:25:36.729]  - attr(*, "where")=List of 1
[10:25:36.729]   ..$ a:<environment: R_EmptyEnv> 
[10:25:36.729]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:25:36.729]  - attr(*, "resolved")= logi FALSE
[10:25:36.729]  - attr(*, "total_size")= num 56
[10:25:36.729]  - attr(*, "already-done")= logi TRUE
[10:25:36.734] - copied ‘a’ to environment
[10:25:36.734] assign_globals() ... done
[10:25:36.735] requestCore(): workers = 2
[10:25:36.737] MulticoreFuture started
[10:25:36.738] - Launch lazy future ... done
[10:25:36.738] plan(): Setting new future strategy stack:
[10:25:36.738] run() for ‘MulticoreFuture’ ... done
[10:25:36.739] result() for MulticoreFuture ...
[10:25:36.738] List of future strategies:
[10:25:36.738] 1. sequential:
[10:25:36.738]    - args: function (..., envir = parent.frame())
[10:25:36.738]    - tweaked: FALSE
[10:25:36.738]    - call: NULL
[10:25:36.739] plan(): nbrOfWorkers() = 1
[10:25:36.741] plan(): Setting new future strategy stack:
[10:25:36.742] List of future strategies:
[10:25:36.742] 1. multicore:
[10:25:36.742]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[10:25:36.742]    - tweaked: FALSE
[10:25:36.742]    - call: plan(strategy)
[10:25:36.747] plan(): nbrOfWorkers() = 2
[10:25:36.748] result() for MulticoreFuture ...
[10:25:36.748] result() for MulticoreFuture ... done
[10:25:36.748] result() for MulticoreFuture ... done
[10:25:36.748] result() for MulticoreFuture ...
[10:25:36.748] result() for MulticoreFuture ... done
** Future evaluation with errors
[10:25:36.749] getGlobalsAndPackages() ...
[10:25:36.749] Searching for globals...
[10:25:36.751] - globals found: [3] ‘{’, ‘<-’, ‘stop’
[10:25:36.752] Searching for globals ... DONE
[10:25:36.752] Resolving globals: FALSE
[10:25:36.752] 
[10:25:36.752] 
[10:25:36.752] getGlobalsAndPackages() ... DONE
[10:25:36.753] run() for ‘Future’ ...
[10:25:36.753] - state: ‘created’
[10:25:36.753] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:25:36.757] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[10:25:36.758] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[10:25:36.758]   - Field: ‘label’
[10:25:36.758]   - Field: ‘local’
[10:25:36.758]   - Field: ‘owner’
[10:25:36.758]   - Field: ‘envir’
[10:25:36.758]   - Field: ‘workers’
[10:25:36.758]   - Field: ‘packages’
[10:25:36.759]   - Field: ‘gc’
[10:25:36.759]   - Field: ‘job’
[10:25:36.759]   - Field: ‘conditions’
[10:25:36.759]   - Field: ‘expr’
[10:25:36.759]   - Field: ‘uuid’
[10:25:36.759]   - Field: ‘seed’
[10:25:36.759]   - Field: ‘version’
[10:25:36.760]   - Field: ‘result’
[10:25:36.760]   - Field: ‘asynchronous’
[10:25:36.760]   - Field: ‘calls’
[10:25:36.760]   - Field: ‘globals’
[10:25:36.760]   - Field: ‘stdout’
[10:25:36.760]   - Field: ‘earlySignal’
[10:25:36.760]   - Field: ‘lazy’
[10:25:36.760]   - Field: ‘state’
[10:25:36.760] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[10:25:36.761] - Launch lazy future ...
[10:25:36.761] Packages needed by the future expression (n = 0): <none>
[10:25:36.761] Packages needed by future strategies (n = 0): <none>
[10:25:36.762] {
[10:25:36.762]     {
[10:25:36.762]         {
[10:25:36.762]             ...future.startTime <- base::Sys.time()
[10:25:36.762]             {
[10:25:36.762]                 {
[10:25:36.762]                   {
[10:25:36.762]                     {
[10:25:36.762]                       base::local({
[10:25:36.762]                         has_future <- base::requireNamespace("future", 
[10:25:36.762]                           quietly = TRUE)
[10:25:36.762]                         if (has_future) {
[10:25:36.762]                           ns <- base::getNamespace("future")
[10:25:36.762]                           version <- ns[[".package"]][["version"]]
[10:25:36.762]                           if (is.null(version)) 
[10:25:36.762]                             version <- utils::packageVersion("future")
[10:25:36.762]                         }
[10:25:36.762]                         else {
[10:25:36.762]                           version <- NULL
[10:25:36.762]                         }
[10:25:36.762]                         if (!has_future || version < "1.8.0") {
[10:25:36.762]                           info <- base::c(r_version = base::gsub("R version ", 
[10:25:36.762]                             "", base::R.version$version.string), 
[10:25:36.762]                             platform = base::sprintf("%s (%s-bit)", 
[10:25:36.762]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:25:36.762]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[10:25:36.762]                               "release", "version")], collapse = " "), 
[10:25:36.762]                             hostname = base::Sys.info()[["nodename"]])
[10:25:36.762]                           info <- base::sprintf("%s: %s", base::names(info), 
[10:25:36.762]                             info)
[10:25:36.762]                           info <- base::paste(info, collapse = "; ")
[10:25:36.762]                           if (!has_future) {
[10:25:36.762]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:25:36.762]                               info)
[10:25:36.762]                           }
[10:25:36.762]                           else {
[10:25:36.762]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:25:36.762]                               info, version)
[10:25:36.762]                           }
[10:25:36.762]                           base::stop(msg)
[10:25:36.762]                         }
[10:25:36.762]                       })
[10:25:36.762]                     }
[10:25:36.762]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[10:25:36.762]                     base::options(mc.cores = 1L)
[10:25:36.762]                   }
[10:25:36.762]                   options(future.plan = NULL)
[10:25:36.762]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:25:36.762]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:25:36.762]                 }
[10:25:36.762]                 ...future.workdir <- getwd()
[10:25:36.762]             }
[10:25:36.762]             ...future.oldOptions <- base::as.list(base::.Options)
[10:25:36.762]             ...future.oldEnvVars <- base::Sys.getenv()
[10:25:36.762]         }
[10:25:36.762]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:25:36.762]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[10:25:36.762]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:25:36.762]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:25:36.762]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:25:36.762]             future.stdout.windows.reencode = NULL, width = 80L)
[10:25:36.762]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:25:36.762]             base::names(...future.oldOptions))
[10:25:36.762]     }
[10:25:36.762]     if (FALSE) {
[10:25:36.762]     }
[10:25:36.762]     else {
[10:25:36.762]         if (TRUE) {
[10:25:36.762]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:25:36.762]                 open = "w")
[10:25:36.762]         }
[10:25:36.762]         else {
[10:25:36.762]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:25:36.762]                 windows = "NUL", "/dev/null"), open = "w")
[10:25:36.762]         }
[10:25:36.762]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:25:36.762]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:25:36.762]             base::sink(type = "output", split = FALSE)
[10:25:36.762]             base::close(...future.stdout)
[10:25:36.762]         }, add = TRUE)
[10:25:36.762]     }
[10:25:36.762]     ...future.frame <- base::sys.nframe()
[10:25:36.762]     ...future.conditions <- base::list()
[10:25:36.762]     ...future.rng <- base::globalenv()$.Random.seed
[10:25:36.762]     if (FALSE) {
[10:25:36.762]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:25:36.762]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:25:36.762]     }
[10:25:36.762]     ...future.result <- base::tryCatch({
[10:25:36.762]         base::withCallingHandlers({
[10:25:36.762]             ...future.value <- base::withVisible(base::local({
[10:25:36.762]                 withCallingHandlers({
[10:25:36.762]                   {
[10:25:36.762]                     x <- 3
[10:25:36.762]                     stop("Woops!")
[10:25:36.762]                     x
[10:25:36.762]                   }
[10:25:36.762]                 }, immediateCondition = function(cond) {
[10:25:36.762]                   save_rds <- function (object, pathname, ...) 
[10:25:36.762]                   {
[10:25:36.762]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[10:25:36.762]                     if (file_test("-f", pathname_tmp)) {
[10:25:36.762]                       fi_tmp <- file.info(pathname_tmp)
[10:25:36.762]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[10:25:36.762]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[10:25:36.762]                         fi_tmp[["mtime"]])
[10:25:36.762]                     }
[10:25:36.762]                     tryCatch({
[10:25:36.762]                       saveRDS(object, file = pathname_tmp, ...)
[10:25:36.762]                     }, error = function(ex) {
[10:25:36.762]                       msg <- conditionMessage(ex)
[10:25:36.762]                       fi_tmp <- file.info(pathname_tmp)
[10:25:36.762]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[10:25:36.762]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[10:25:36.762]                         fi_tmp[["mtime"]], msg)
[10:25:36.762]                       ex$message <- msg
[10:25:36.762]                       stop(ex)
[10:25:36.762]                     })
[10:25:36.762]                     stopifnot(file_test("-f", pathname_tmp))
[10:25:36.762]                     res <- file.rename(from = pathname_tmp, to = pathname)
[10:25:36.762]                     if (!res || file_test("-f", pathname_tmp)) {
[10:25:36.762]                       fi_tmp <- file.info(pathname_tmp)
[10:25:36.762]                       fi <- file.info(pathname)
[10:25:36.762]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[10:25:36.762]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[10:25:36.762]                         fi_tmp[["mtime"]], sQuote(pathname), 
[10:25:36.762]                         fi[["size"]], fi[["mtime"]])
[10:25:36.762]                       stop(msg)
[10:25:36.762]                     }
[10:25:36.762]                     invisible(pathname)
[10:25:36.762]                   }
[10:25:36.762]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[10:25:36.762]                     rootPath = tempdir()) 
[10:25:36.762]                   {
[10:25:36.762]                     obj <- list(time = Sys.time(), condition = cond)
[10:25:36.762]                     file <- tempfile(pattern = class(cond)[1], 
[10:25:36.762]                       tmpdir = path, fileext = ".rds")
[10:25:36.762]                     save_rds(obj, file)
[10:25:36.762]                   }
[10:25:36.762]                   saveImmediateCondition(cond, path = "/tmp/RtmpEdG1rj/.future/immediateConditions")
[10:25:36.762]                   muffleCondition <- function (cond, pattern = "^muffle") 
[10:25:36.762]                   {
[10:25:36.762]                     inherits <- base::inherits
[10:25:36.762]                     invokeRestart <- base::invokeRestart
[10:25:36.762]                     is.null <- base::is.null
[10:25:36.762]                     muffled <- FALSE
[10:25:36.762]                     if (inherits(cond, "message")) {
[10:25:36.762]                       muffled <- grepl(pattern, "muffleMessage")
[10:25:36.762]                       if (muffled) 
[10:25:36.762]                         invokeRestart("muffleMessage")
[10:25:36.762]                     }
[10:25:36.762]                     else if (inherits(cond, "warning")) {
[10:25:36.762]                       muffled <- grepl(pattern, "muffleWarning")
[10:25:36.762]                       if (muffled) 
[10:25:36.762]                         invokeRestart("muffleWarning")
[10:25:36.762]                     }
[10:25:36.762]                     else if (inherits(cond, "condition")) {
[10:25:36.762]                       if (!is.null(pattern)) {
[10:25:36.762]                         computeRestarts <- base::computeRestarts
[10:25:36.762]                         grepl <- base::grepl
[10:25:36.762]                         restarts <- computeRestarts(cond)
[10:25:36.762]                         for (restart in restarts) {
[10:25:36.762]                           name <- restart$name
[10:25:36.762]                           if (is.null(name)) 
[10:25:36.762]                             next
[10:25:36.762]                           if (!grepl(pattern, name)) 
[10:25:36.762]                             next
[10:25:36.762]                           invokeRestart(restart)
[10:25:36.762]                           muffled <- TRUE
[10:25:36.762]                           break
[10:25:36.762]                         }
[10:25:36.762]                       }
[10:25:36.762]                     }
[10:25:36.762]                     invisible(muffled)
[10:25:36.762]                   }
[10:25:36.762]                   muffleCondition(cond)
[10:25:36.762]                 })
[10:25:36.762]             }))
[10:25:36.762]             future::FutureResult(value = ...future.value$value, 
[10:25:36.762]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:25:36.762]                   ...future.rng), globalenv = if (FALSE) 
[10:25:36.762]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:25:36.762]                     ...future.globalenv.names))
[10:25:36.762]                 else NULL, started = ...future.startTime, version = "1.8")
[10:25:36.762]         }, condition = base::local({
[10:25:36.762]             c <- base::c
[10:25:36.762]             inherits <- base::inherits
[10:25:36.762]             invokeRestart <- base::invokeRestart
[10:25:36.762]             length <- base::length
[10:25:36.762]             list <- base::list
[10:25:36.762]             seq.int <- base::seq.int
[10:25:36.762]             signalCondition <- base::signalCondition
[10:25:36.762]             sys.calls <- base::sys.calls
[10:25:36.762]             `[[` <- base::`[[`
[10:25:36.762]             `+` <- base::`+`
[10:25:36.762]             `<<-` <- base::`<<-`
[10:25:36.762]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:25:36.762]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:25:36.762]                   3L)]
[10:25:36.762]             }
[10:25:36.762]             function(cond) {
[10:25:36.762]                 is_error <- inherits(cond, "error")
[10:25:36.762]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:25:36.762]                   NULL)
[10:25:36.762]                 if (is_error) {
[10:25:36.762]                   sessionInformation <- function() {
[10:25:36.762]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:25:36.762]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:25:36.762]                       search = base::search(), system = base::Sys.info())
[10:25:36.762]                   }
[10:25:36.762]                   ...future.conditions[[length(...future.conditions) + 
[10:25:36.762]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:25:36.762]                     cond$call), session = sessionInformation(), 
[10:25:36.762]                     timestamp = base::Sys.time(), signaled = 0L)
[10:25:36.762]                   signalCondition(cond)
[10:25:36.762]                 }
[10:25:36.762]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:25:36.762]                 "immediateCondition"))) {
[10:25:36.762]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:25:36.762]                   ...future.conditions[[length(...future.conditions) + 
[10:25:36.762]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:25:36.762]                   if (TRUE && !signal) {
[10:25:36.762]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:25:36.762]                     {
[10:25:36.762]                       inherits <- base::inherits
[10:25:36.762]                       invokeRestart <- base::invokeRestart
[10:25:36.762]                       is.null <- base::is.null
[10:25:36.762]                       muffled <- FALSE
[10:25:36.762]                       if (inherits(cond, "message")) {
[10:25:36.762]                         muffled <- grepl(pattern, "muffleMessage")
[10:25:36.762]                         if (muffled) 
[10:25:36.762]                           invokeRestart("muffleMessage")
[10:25:36.762]                       }
[10:25:36.762]                       else if (inherits(cond, "warning")) {
[10:25:36.762]                         muffled <- grepl(pattern, "muffleWarning")
[10:25:36.762]                         if (muffled) 
[10:25:36.762]                           invokeRestart("muffleWarning")
[10:25:36.762]                       }
[10:25:36.762]                       else if (inherits(cond, "condition")) {
[10:25:36.762]                         if (!is.null(pattern)) {
[10:25:36.762]                           computeRestarts <- base::computeRestarts
[10:25:36.762]                           grepl <- base::grepl
[10:25:36.762]                           restarts <- computeRestarts(cond)
[10:25:36.762]                           for (restart in restarts) {
[10:25:36.762]                             name <- restart$name
[10:25:36.762]                             if (is.null(name)) 
[10:25:36.762]                               next
[10:25:36.762]                             if (!grepl(pattern, name)) 
[10:25:36.762]                               next
[10:25:36.762]                             invokeRestart(restart)
[10:25:36.762]                             muffled <- TRUE
[10:25:36.762]                             break
[10:25:36.762]                           }
[10:25:36.762]                         }
[10:25:36.762]                       }
[10:25:36.762]                       invisible(muffled)
[10:25:36.762]                     }
[10:25:36.762]                     muffleCondition(cond, pattern = "^muffle")
[10:25:36.762]                   }
[10:25:36.762]                 }
[10:25:36.762]                 else {
[10:25:36.762]                   if (TRUE) {
[10:25:36.762]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:25:36.762]                     {
[10:25:36.762]                       inherits <- base::inherits
[10:25:36.762]                       invokeRestart <- base::invokeRestart
[10:25:36.762]                       is.null <- base::is.null
[10:25:36.762]                       muffled <- FALSE
[10:25:36.762]                       if (inherits(cond, "message")) {
[10:25:36.762]                         muffled <- grepl(pattern, "muffleMessage")
[10:25:36.762]                         if (muffled) 
[10:25:36.762]                           invokeRestart("muffleMessage")
[10:25:36.762]                       }
[10:25:36.762]                       else if (inherits(cond, "warning")) {
[10:25:36.762]                         muffled <- grepl(pattern, "muffleWarning")
[10:25:36.762]                         if (muffled) 
[10:25:36.762]                           invokeRestart("muffleWarning")
[10:25:36.762]                       }
[10:25:36.762]                       else if (inherits(cond, "condition")) {
[10:25:36.762]                         if (!is.null(pattern)) {
[10:25:36.762]                           computeRestarts <- base::computeRestarts
[10:25:36.762]                           grepl <- base::grepl
[10:25:36.762]                           restarts <- computeRestarts(cond)
[10:25:36.762]                           for (restart in restarts) {
[10:25:36.762]                             name <- restart$name
[10:25:36.762]                             if (is.null(name)) 
[10:25:36.762]                               next
[10:25:36.762]                             if (!grepl(pattern, name)) 
[10:25:36.762]                               next
[10:25:36.762]                             invokeRestart(restart)
[10:25:36.762]                             muffled <- TRUE
[10:25:36.762]                             break
[10:25:36.762]                           }
[10:25:36.762]                         }
[10:25:36.762]                       }
[10:25:36.762]                       invisible(muffled)
[10:25:36.762]                     }
[10:25:36.762]                     muffleCondition(cond, pattern = "^muffle")
[10:25:36.762]                   }
[10:25:36.762]                 }
[10:25:36.762]             }
[10:25:36.762]         }))
[10:25:36.762]     }, error = function(ex) {
[10:25:36.762]         base::structure(base::list(value = NULL, visible = NULL, 
[10:25:36.762]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:25:36.762]                 ...future.rng), started = ...future.startTime, 
[10:25:36.762]             finished = Sys.time(), session_uuid = NA_character_, 
[10:25:36.762]             version = "1.8"), class = "FutureResult")
[10:25:36.762]     }, finally = {
[10:25:36.762]         if (!identical(...future.workdir, getwd())) 
[10:25:36.762]             setwd(...future.workdir)
[10:25:36.762]         {
[10:25:36.762]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:25:36.762]                 ...future.oldOptions$nwarnings <- NULL
[10:25:36.762]             }
[10:25:36.762]             base::options(...future.oldOptions)
[10:25:36.762]             if (.Platform$OS.type == "windows") {
[10:25:36.762]                 old_names <- names(...future.oldEnvVars)
[10:25:36.762]                 envs <- base::Sys.getenv()
[10:25:36.762]                 names <- names(envs)
[10:25:36.762]                 common <- intersect(names, old_names)
[10:25:36.762]                 added <- setdiff(names, old_names)
[10:25:36.762]                 removed <- setdiff(old_names, names)
[10:25:36.762]                 changed <- common[...future.oldEnvVars[common] != 
[10:25:36.762]                   envs[common]]
[10:25:36.762]                 NAMES <- toupper(changed)
[10:25:36.762]                 args <- list()
[10:25:36.762]                 for (kk in seq_along(NAMES)) {
[10:25:36.762]                   name <- changed[[kk]]
[10:25:36.762]                   NAME <- NAMES[[kk]]
[10:25:36.762]                   if (name != NAME && is.element(NAME, old_names)) 
[10:25:36.762]                     next
[10:25:36.762]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:25:36.762]                 }
[10:25:36.762]                 NAMES <- toupper(added)
[10:25:36.762]                 for (kk in seq_along(NAMES)) {
[10:25:36.762]                   name <- added[[kk]]
[10:25:36.762]                   NAME <- NAMES[[kk]]
[10:25:36.762]                   if (name != NAME && is.element(NAME, old_names)) 
[10:25:36.762]                     next
[10:25:36.762]                   args[[name]] <- ""
[10:25:36.762]                 }
[10:25:36.762]                 NAMES <- toupper(removed)
[10:25:36.762]                 for (kk in seq_along(NAMES)) {
[10:25:36.762]                   name <- removed[[kk]]
[10:25:36.762]                   NAME <- NAMES[[kk]]
[10:25:36.762]                   if (name != NAME && is.element(NAME, old_names)) 
[10:25:36.762]                     next
[10:25:36.762]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:25:36.762]                 }
[10:25:36.762]                 if (length(args) > 0) 
[10:25:36.762]                   base::do.call(base::Sys.setenv, args = args)
[10:25:36.762]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:25:36.762]             }
[10:25:36.762]             else {
[10:25:36.762]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:25:36.762]             }
[10:25:36.762]             {
[10:25:36.762]                 if (base::length(...future.futureOptionsAdded) > 
[10:25:36.762]                   0L) {
[10:25:36.762]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:25:36.762]                   base::names(opts) <- ...future.futureOptionsAdded
[10:25:36.762]                   base::options(opts)
[10:25:36.762]                 }
[10:25:36.762]                 {
[10:25:36.762]                   {
[10:25:36.762]                     base::options(mc.cores = ...future.mc.cores.old)
[10:25:36.762]                     NULL
[10:25:36.762]                   }
[10:25:36.762]                   options(future.plan = NULL)
[10:25:36.762]                   if (is.na(NA_character_)) 
[10:25:36.762]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:25:36.762]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:25:36.762]                   future::plan(list(function (..., workers = availableCores(constraints = "multicore"), 
[10:25:36.762]                     envir = parent.frame()) 
[10:25:36.762]                   {
[10:25:36.762]                     default_workers <- missing(workers)
[10:25:36.762]                     if (is.function(workers)) 
[10:25:36.762]                       workers <- workers()
[10:25:36.762]                     workers <- structure(as.integer(workers), 
[10:25:36.762]                       class = class(workers))
[10:25:36.762]                     stop_if_not(is.finite(workers), workers >= 
[10:25:36.762]                       1L)
[10:25:36.762]                     if ((workers == 1L && !inherits(workers, 
[10:25:36.762]                       "AsIs")) || !supportsMulticore(warn = TRUE)) {
[10:25:36.762]                       if (default_workers) 
[10:25:36.762]                         supportsMulticore(warn = TRUE)
[10:25:36.762]                       return(sequential(..., envir = envir))
[10:25:36.762]                     }
[10:25:36.762]                     oopts <- options(mc.cores = workers)
[10:25:36.762]                     on.exit(options(oopts))
[10:25:36.762]                     future <- MulticoreFuture(..., workers = workers, 
[10:25:36.762]                       envir = envir)
[10:25:36.762]                     if (!future$lazy) 
[10:25:36.762]                       future <- run(future)
[10:25:36.762]                     invisible(future)
[10:25:36.762]                   }), .cleanup = FALSE, .init = FALSE)
[10:25:36.762]                 }
[10:25:36.762]             }
[10:25:36.762]         }
[10:25:36.762]     })
[10:25:36.762]     if (TRUE) {
[10:25:36.762]         base::sink(type = "output", split = FALSE)
[10:25:36.762]         if (TRUE) {
[10:25:36.762]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:25:36.762]         }
[10:25:36.762]         else {
[10:25:36.762]             ...future.result["stdout"] <- base::list(NULL)
[10:25:36.762]         }
[10:25:36.762]         base::close(...future.stdout)
[10:25:36.762]         ...future.stdout <- NULL
[10:25:36.762]     }
[10:25:36.762]     ...future.result$conditions <- ...future.conditions
[10:25:36.762]     ...future.result$finished <- base::Sys.time()
[10:25:36.762]     ...future.result
[10:25:36.762] }
[10:25:36.764] requestCore(): workers = 2
[10:25:36.766] MulticoreFuture started
[10:25:36.766] - Launch lazy future ... done
[10:25:36.767] run() for ‘MulticoreFuture’ ... done
[10:25:36.767] result() for MulticoreFuture ...
[10:25:36.767] plan(): Setting new future strategy stack:
[10:25:36.767] List of future strategies:
[10:25:36.767] 1. sequential:
[10:25:36.767]    - args: function (..., envir = parent.frame())
[10:25:36.767]    - tweaked: FALSE
[10:25:36.767]    - call: NULL
[10:25:36.768] plan(): nbrOfWorkers() = 1
[10:25:36.770] plan(): Setting new future strategy stack:
[10:25:36.770] List of future strategies:
[10:25:36.770] 1. multicore:
[10:25:36.770]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[10:25:36.770]    - tweaked: FALSE
[10:25:36.770]    - call: plan(strategy)
[10:25:36.775] plan(): nbrOfWorkers() = 2
[10:25:36.780] result() for MulticoreFuture ...
[10:25:36.780] result() for MulticoreFuture ... done
[10:25:36.780] signalConditions() ...
[10:25:36.780]  - include = ‘immediateCondition’
[10:25:36.780]  - exclude = 
[10:25:36.781]  - resignal = FALSE
[10:25:36.781]  - Number of conditions: 1
[10:25:36.781] signalConditions() ... done
[10:25:36.781] result() for MulticoreFuture ... done
[10:25:36.781] result() for MulticoreFuture ...
[10:25:36.781] result() for MulticoreFuture ... done
[10:25:36.781] signalConditions() ...
[10:25:36.781]  - include = ‘immediateCondition’
[10:25:36.782]  - exclude = 
[10:25:36.782]  - resignal = FALSE
[10:25:36.782]  - Number of conditions: 1
[10:25:36.782] signalConditions() ... done
[10:25:36.782] Future state: ‘finished’
[10:25:36.782] result() for MulticoreFuture ...
[10:25:36.782] result() for MulticoreFuture ... done
[10:25:36.782] signalConditions() ...
[10:25:36.782]  - include = ‘condition’
[10:25:36.783]  - exclude = ‘immediateCondition’
[10:25:36.783]  - resignal = TRUE
[10:25:36.783]  - Number of conditions: 1
[10:25:36.783]  - Condition #1: ‘simpleError’, ‘error’, ‘condition’
[10:25:36.783] signalConditions() ... done
[10:25:36.784] getGlobalsAndPackages() ...
[10:25:36.784] Searching for globals...
[10:25:36.786] - globals found: [6] ‘{’, ‘if’, ‘==’, ‘%%’, ‘ii’, ‘stop’
[10:25:36.786] Searching for globals ... DONE
[10:25:36.786] Resolving globals: FALSE
[10:25:36.787] The total size of the 1 globals is 56 bytes (56 bytes)
[10:25:36.787] The total size of the 1 globals exported for future expression (‘{; if (ii%%2 == 0); stop("Woops!"); ii; }’) is 56 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘ii’ (56 bytes of class ‘numeric’)
[10:25:36.787] - globals: [1] ‘ii’
[10:25:36.787] 
[10:25:36.788] getGlobalsAndPackages() ... DONE
[10:25:36.788] run() for ‘Future’ ...
[10:25:36.788] - state: ‘created’
[10:25:36.788] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:25:36.792] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[10:25:36.792] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[10:25:36.792]   - Field: ‘label’
[10:25:36.792]   - Field: ‘local’
[10:25:36.793]   - Field: ‘owner’
[10:25:36.793]   - Field: ‘envir’
[10:25:36.793]   - Field: ‘workers’
[10:25:36.793]   - Field: ‘packages’
[10:25:36.793]   - Field: ‘gc’
[10:25:36.793]   - Field: ‘job’
[10:25:36.793]   - Field: ‘conditions’
[10:25:36.793]   - Field: ‘expr’
[10:25:36.794]   - Field: ‘uuid’
[10:25:36.794]   - Field: ‘seed’
[10:25:36.796]   - Field: ‘version’
[10:25:36.796]   - Field: ‘result’
[10:25:36.796]   - Field: ‘asynchronous’
[10:25:36.797]   - Field: ‘calls’
[10:25:36.797]   - Field: ‘globals’
[10:25:36.797]   - Field: ‘stdout’
[10:25:36.797]   - Field: ‘earlySignal’
[10:25:36.797]   - Field: ‘lazy’
[10:25:36.797]   - Field: ‘state’
[10:25:36.797] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[10:25:36.798] - Launch lazy future ...
[10:25:36.798] Packages needed by the future expression (n = 0): <none>
[10:25:36.798] Packages needed by future strategies (n = 0): <none>
[10:25:36.799] {
[10:25:36.799]     {
[10:25:36.799]         {
[10:25:36.799]             ...future.startTime <- base::Sys.time()
[10:25:36.799]             {
[10:25:36.799]                 {
[10:25:36.799]                   {
[10:25:36.799]                     {
[10:25:36.799]                       base::local({
[10:25:36.799]                         has_future <- base::requireNamespace("future", 
[10:25:36.799]                           quietly = TRUE)
[10:25:36.799]                         if (has_future) {
[10:25:36.799]                           ns <- base::getNamespace("future")
[10:25:36.799]                           version <- ns[[".package"]][["version"]]
[10:25:36.799]                           if (is.null(version)) 
[10:25:36.799]                             version <- utils::packageVersion("future")
[10:25:36.799]                         }
[10:25:36.799]                         else {
[10:25:36.799]                           version <- NULL
[10:25:36.799]                         }
[10:25:36.799]                         if (!has_future || version < "1.8.0") {
[10:25:36.799]                           info <- base::c(r_version = base::gsub("R version ", 
[10:25:36.799]                             "", base::R.version$version.string), 
[10:25:36.799]                             platform = base::sprintf("%s (%s-bit)", 
[10:25:36.799]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:25:36.799]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[10:25:36.799]                               "release", "version")], collapse = " "), 
[10:25:36.799]                             hostname = base::Sys.info()[["nodename"]])
[10:25:36.799]                           info <- base::sprintf("%s: %s", base::names(info), 
[10:25:36.799]                             info)
[10:25:36.799]                           info <- base::paste(info, collapse = "; ")
[10:25:36.799]                           if (!has_future) {
[10:25:36.799]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:25:36.799]                               info)
[10:25:36.799]                           }
[10:25:36.799]                           else {
[10:25:36.799]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:25:36.799]                               info, version)
[10:25:36.799]                           }
[10:25:36.799]                           base::stop(msg)
[10:25:36.799]                         }
[10:25:36.799]                       })
[10:25:36.799]                     }
[10:25:36.799]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[10:25:36.799]                     base::options(mc.cores = 1L)
[10:25:36.799]                   }
[10:25:36.799]                   options(future.plan = NULL)
[10:25:36.799]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:25:36.799]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:25:36.799]                 }
[10:25:36.799]                 ...future.workdir <- getwd()
[10:25:36.799]             }
[10:25:36.799]             ...future.oldOptions <- base::as.list(base::.Options)
[10:25:36.799]             ...future.oldEnvVars <- base::Sys.getenv()
[10:25:36.799]         }
[10:25:36.799]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:25:36.799]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[10:25:36.799]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:25:36.799]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:25:36.799]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:25:36.799]             future.stdout.windows.reencode = NULL, width = 80L)
[10:25:36.799]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:25:36.799]             base::names(...future.oldOptions))
[10:25:36.799]     }
[10:25:36.799]     if (FALSE) {
[10:25:36.799]     }
[10:25:36.799]     else {
[10:25:36.799]         if (TRUE) {
[10:25:36.799]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:25:36.799]                 open = "w")
[10:25:36.799]         }
[10:25:36.799]         else {
[10:25:36.799]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:25:36.799]                 windows = "NUL", "/dev/null"), open = "w")
[10:25:36.799]         }
[10:25:36.799]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:25:36.799]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:25:36.799]             base::sink(type = "output", split = FALSE)
[10:25:36.799]             base::close(...future.stdout)
[10:25:36.799]         }, add = TRUE)
[10:25:36.799]     }
[10:25:36.799]     ...future.frame <- base::sys.nframe()
[10:25:36.799]     ...future.conditions <- base::list()
[10:25:36.799]     ...future.rng <- base::globalenv()$.Random.seed
[10:25:36.799]     if (FALSE) {
[10:25:36.799]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:25:36.799]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:25:36.799]     }
[10:25:36.799]     ...future.result <- base::tryCatch({
[10:25:36.799]         base::withCallingHandlers({
[10:25:36.799]             ...future.value <- base::withVisible(base::local({
[10:25:36.799]                 withCallingHandlers({
[10:25:36.799]                   {
[10:25:36.799]                     if (ii%%2 == 0) 
[10:25:36.799]                       stop("Woops!")
[10:25:36.799]                     ii
[10:25:36.799]                   }
[10:25:36.799]                 }, immediateCondition = function(cond) {
[10:25:36.799]                   save_rds <- function (object, pathname, ...) 
[10:25:36.799]                   {
[10:25:36.799]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[10:25:36.799]                     if (file_test("-f", pathname_tmp)) {
[10:25:36.799]                       fi_tmp <- file.info(pathname_tmp)
[10:25:36.799]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[10:25:36.799]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[10:25:36.799]                         fi_tmp[["mtime"]])
[10:25:36.799]                     }
[10:25:36.799]                     tryCatch({
[10:25:36.799]                       saveRDS(object, file = pathname_tmp, ...)
[10:25:36.799]                     }, error = function(ex) {
[10:25:36.799]                       msg <- conditionMessage(ex)
[10:25:36.799]                       fi_tmp <- file.info(pathname_tmp)
[10:25:36.799]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[10:25:36.799]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[10:25:36.799]                         fi_tmp[["mtime"]], msg)
[10:25:36.799]                       ex$message <- msg
[10:25:36.799]                       stop(ex)
[10:25:36.799]                     })
[10:25:36.799]                     stopifnot(file_test("-f", pathname_tmp))
[10:25:36.799]                     res <- file.rename(from = pathname_tmp, to = pathname)
[10:25:36.799]                     if (!res || file_test("-f", pathname_tmp)) {
[10:25:36.799]                       fi_tmp <- file.info(pathname_tmp)
[10:25:36.799]                       fi <- file.info(pathname)
[10:25:36.799]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[10:25:36.799]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[10:25:36.799]                         fi_tmp[["mtime"]], sQuote(pathname), 
[10:25:36.799]                         fi[["size"]], fi[["mtime"]])
[10:25:36.799]                       stop(msg)
[10:25:36.799]                     }
[10:25:36.799]                     invisible(pathname)
[10:25:36.799]                   }
[10:25:36.799]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[10:25:36.799]                     rootPath = tempdir()) 
[10:25:36.799]                   {
[10:25:36.799]                     obj <- list(time = Sys.time(), condition = cond)
[10:25:36.799]                     file <- tempfile(pattern = class(cond)[1], 
[10:25:36.799]                       tmpdir = path, fileext = ".rds")
[10:25:36.799]                     save_rds(obj, file)
[10:25:36.799]                   }
[10:25:36.799]                   saveImmediateCondition(cond, path = "/tmp/RtmpEdG1rj/.future/immediateConditions")
[10:25:36.799]                   muffleCondition <- function (cond, pattern = "^muffle") 
[10:25:36.799]                   {
[10:25:36.799]                     inherits <- base::inherits
[10:25:36.799]                     invokeRestart <- base::invokeRestart
[10:25:36.799]                     is.null <- base::is.null
[10:25:36.799]                     muffled <- FALSE
[10:25:36.799]                     if (inherits(cond, "message")) {
[10:25:36.799]                       muffled <- grepl(pattern, "muffleMessage")
[10:25:36.799]                       if (muffled) 
[10:25:36.799]                         invokeRestart("muffleMessage")
[10:25:36.799]                     }
[10:25:36.799]                     else if (inherits(cond, "warning")) {
[10:25:36.799]                       muffled <- grepl(pattern, "muffleWarning")
[10:25:36.799]                       if (muffled) 
[10:25:36.799]                         invokeRestart("muffleWarning")
[10:25:36.799]                     }
[10:25:36.799]                     else if (inherits(cond, "condition")) {
[10:25:36.799]                       if (!is.null(pattern)) {
[10:25:36.799]                         computeRestarts <- base::computeRestarts
[10:25:36.799]                         grepl <- base::grepl
[10:25:36.799]                         restarts <- computeRestarts(cond)
[10:25:36.799]                         for (restart in restarts) {
[10:25:36.799]                           name <- restart$name
[10:25:36.799]                           if (is.null(name)) 
[10:25:36.799]                             next
[10:25:36.799]                           if (!grepl(pattern, name)) 
[10:25:36.799]                             next
[10:25:36.799]                           invokeRestart(restart)
[10:25:36.799]                           muffled <- TRUE
[10:25:36.799]                           break
[10:25:36.799]                         }
[10:25:36.799]                       }
[10:25:36.799]                     }
[10:25:36.799]                     invisible(muffled)
[10:25:36.799]                   }
[10:25:36.799]                   muffleCondition(cond)
[10:25:36.799]                 })
[10:25:36.799]             }))
[10:25:36.799]             future::FutureResult(value = ...future.value$value, 
[10:25:36.799]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:25:36.799]                   ...future.rng), globalenv = if (FALSE) 
[10:25:36.799]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:25:36.799]                     ...future.globalenv.names))
[10:25:36.799]                 else NULL, started = ...future.startTime, version = "1.8")
[10:25:36.799]         }, condition = base::local({
[10:25:36.799]             c <- base::c
[10:25:36.799]             inherits <- base::inherits
[10:25:36.799]             invokeRestart <- base::invokeRestart
[10:25:36.799]             length <- base::length
[10:25:36.799]             list <- base::list
[10:25:36.799]             seq.int <- base::seq.int
[10:25:36.799]             signalCondition <- base::signalCondition
[10:25:36.799]             sys.calls <- base::sys.calls
[10:25:36.799]             `[[` <- base::`[[`
[10:25:36.799]             `+` <- base::`+`
[10:25:36.799]             `<<-` <- base::`<<-`
[10:25:36.799]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:25:36.799]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:25:36.799]                   3L)]
[10:25:36.799]             }
[10:25:36.799]             function(cond) {
[10:25:36.799]                 is_error <- inherits(cond, "error")
[10:25:36.799]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:25:36.799]                   NULL)
[10:25:36.799]                 if (is_error) {
[10:25:36.799]                   sessionInformation <- function() {
[10:25:36.799]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:25:36.799]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:25:36.799]                       search = base::search(), system = base::Sys.info())
[10:25:36.799]                   }
[10:25:36.799]                   ...future.conditions[[length(...future.conditions) + 
[10:25:36.799]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:25:36.799]                     cond$call), session = sessionInformation(), 
[10:25:36.799]                     timestamp = base::Sys.time(), signaled = 0L)
[10:25:36.799]                   signalCondition(cond)
[10:25:36.799]                 }
[10:25:36.799]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:25:36.799]                 "immediateCondition"))) {
[10:25:36.799]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:25:36.799]                   ...future.conditions[[length(...future.conditions) + 
[10:25:36.799]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:25:36.799]                   if (TRUE && !signal) {
[10:25:36.799]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:25:36.799]                     {
[10:25:36.799]                       inherits <- base::inherits
[10:25:36.799]                       invokeRestart <- base::invokeRestart
[10:25:36.799]                       is.null <- base::is.null
[10:25:36.799]                       muffled <- FALSE
[10:25:36.799]                       if (inherits(cond, "message")) {
[10:25:36.799]                         muffled <- grepl(pattern, "muffleMessage")
[10:25:36.799]                         if (muffled) 
[10:25:36.799]                           invokeRestart("muffleMessage")
[10:25:36.799]                       }
[10:25:36.799]                       else if (inherits(cond, "warning")) {
[10:25:36.799]                         muffled <- grepl(pattern, "muffleWarning")
[10:25:36.799]                         if (muffled) 
[10:25:36.799]                           invokeRestart("muffleWarning")
[10:25:36.799]                       }
[10:25:36.799]                       else if (inherits(cond, "condition")) {
[10:25:36.799]                         if (!is.null(pattern)) {
[10:25:36.799]                           computeRestarts <- base::computeRestarts
[10:25:36.799]                           grepl <- base::grepl
[10:25:36.799]                           restarts <- computeRestarts(cond)
[10:25:36.799]                           for (restart in restarts) {
[10:25:36.799]                             name <- restart$name
[10:25:36.799]                             if (is.null(name)) 
[10:25:36.799]                               next
[10:25:36.799]                             if (!grepl(pattern, name)) 
[10:25:36.799]                               next
[10:25:36.799]                             invokeRestart(restart)
[10:25:36.799]                             muffled <- TRUE
[10:25:36.799]                             break
[10:25:36.799]                           }
[10:25:36.799]                         }
[10:25:36.799]                       }
[10:25:36.799]                       invisible(muffled)
[10:25:36.799]                     }
[10:25:36.799]                     muffleCondition(cond, pattern = "^muffle")
[10:25:36.799]                   }
[10:25:36.799]                 }
[10:25:36.799]                 else {
[10:25:36.799]                   if (TRUE) {
[10:25:36.799]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:25:36.799]                     {
[10:25:36.799]                       inherits <- base::inherits
[10:25:36.799]                       invokeRestart <- base::invokeRestart
[10:25:36.799]                       is.null <- base::is.null
[10:25:36.799]                       muffled <- FALSE
[10:25:36.799]                       if (inherits(cond, "message")) {
[10:25:36.799]                         muffled <- grepl(pattern, "muffleMessage")
[10:25:36.799]                         if (muffled) 
[10:25:36.799]                           invokeRestart("muffleMessage")
[10:25:36.799]                       }
[10:25:36.799]                       else if (inherits(cond, "warning")) {
[10:25:36.799]                         muffled <- grepl(pattern, "muffleWarning")
[10:25:36.799]                         if (muffled) 
[10:25:36.799]                           invokeRestart("muffleWarning")
[10:25:36.799]                       }
[10:25:36.799]                       else if (inherits(cond, "condition")) {
[10:25:36.799]                         if (!is.null(pattern)) {
[10:25:36.799]                           computeRestarts <- base::computeRestarts
[10:25:36.799]                           grepl <- base::grepl
[10:25:36.799]                           restarts <- computeRestarts(cond)
[10:25:36.799]                           for (restart in restarts) {
[10:25:36.799]                             name <- restart$name
[10:25:36.799]                             if (is.null(name)) 
[10:25:36.799]                               next
[10:25:36.799]                             if (!grepl(pattern, name)) 
[10:25:36.799]                               next
[10:25:36.799]                             invokeRestart(restart)
[10:25:36.799]                             muffled <- TRUE
[10:25:36.799]                             break
[10:25:36.799]                           }
[10:25:36.799]                         }
[10:25:36.799]                       }
[10:25:36.799]                       invisible(muffled)
[10:25:36.799]                     }
[10:25:36.799]                     muffleCondition(cond, pattern = "^muffle")
[10:25:36.799]                   }
[10:25:36.799]                 }
[10:25:36.799]             }
[10:25:36.799]         }))
[10:25:36.799]     }, error = function(ex) {
[10:25:36.799]         base::structure(base::list(value = NULL, visible = NULL, 
[10:25:36.799]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:25:36.799]                 ...future.rng), started = ...future.startTime, 
[10:25:36.799]             finished = Sys.time(), session_uuid = NA_character_, 
[10:25:36.799]             version = "1.8"), class = "FutureResult")
[10:25:36.799]     }, finally = {
[10:25:36.799]         if (!identical(...future.workdir, getwd())) 
[10:25:36.799]             setwd(...future.workdir)
[10:25:36.799]         {
[10:25:36.799]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:25:36.799]                 ...future.oldOptions$nwarnings <- NULL
[10:25:36.799]             }
[10:25:36.799]             base::options(...future.oldOptions)
[10:25:36.799]             if (.Platform$OS.type == "windows") {
[10:25:36.799]                 old_names <- names(...future.oldEnvVars)
[10:25:36.799]                 envs <- base::Sys.getenv()
[10:25:36.799]                 names <- names(envs)
[10:25:36.799]                 common <- intersect(names, old_names)
[10:25:36.799]                 added <- setdiff(names, old_names)
[10:25:36.799]                 removed <- setdiff(old_names, names)
[10:25:36.799]                 changed <- common[...future.oldEnvVars[common] != 
[10:25:36.799]                   envs[common]]
[10:25:36.799]                 NAMES <- toupper(changed)
[10:25:36.799]                 args <- list()
[10:25:36.799]                 for (kk in seq_along(NAMES)) {
[10:25:36.799]                   name <- changed[[kk]]
[10:25:36.799]                   NAME <- NAMES[[kk]]
[10:25:36.799]                   if (name != NAME && is.element(NAME, old_names)) 
[10:25:36.799]                     next
[10:25:36.799]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:25:36.799]                 }
[10:25:36.799]                 NAMES <- toupper(added)
[10:25:36.799]                 for (kk in seq_along(NAMES)) {
[10:25:36.799]                   name <- added[[kk]]
[10:25:36.799]                   NAME <- NAMES[[kk]]
[10:25:36.799]                   if (name != NAME && is.element(NAME, old_names)) 
[10:25:36.799]                     next
[10:25:36.799]                   args[[name]] <- ""
[10:25:36.799]                 }
[10:25:36.799]                 NAMES <- toupper(removed)
[10:25:36.799]                 for (kk in seq_along(NAMES)) {
[10:25:36.799]                   name <- removed[[kk]]
[10:25:36.799]                   NAME <- NAMES[[kk]]
[10:25:36.799]                   if (name != NAME && is.element(NAME, old_names)) 
[10:25:36.799]                     next
[10:25:36.799]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:25:36.799]                 }
[10:25:36.799]                 if (length(args) > 0) 
[10:25:36.799]                   base::do.call(base::Sys.setenv, args = args)
[10:25:36.799]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:25:36.799]             }
[10:25:36.799]             else {
[10:25:36.799]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:25:36.799]             }
[10:25:36.799]             {
[10:25:36.799]                 if (base::length(...future.futureOptionsAdded) > 
[10:25:36.799]                   0L) {
[10:25:36.799]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:25:36.799]                   base::names(opts) <- ...future.futureOptionsAdded
[10:25:36.799]                   base::options(opts)
[10:25:36.799]                 }
[10:25:36.799]                 {
[10:25:36.799]                   {
[10:25:36.799]                     base::options(mc.cores = ...future.mc.cores.old)
[10:25:36.799]                     NULL
[10:25:36.799]                   }
[10:25:36.799]                   options(future.plan = NULL)
[10:25:36.799]                   if (is.na(NA_character_)) 
[10:25:36.799]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:25:36.799]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:25:36.799]                   future::plan(list(function (..., workers = availableCores(constraints = "multicore"), 
[10:25:36.799]                     envir = parent.frame()) 
[10:25:36.799]                   {
[10:25:36.799]                     default_workers <- missing(workers)
[10:25:36.799]                     if (is.function(workers)) 
[10:25:36.799]                       workers <- workers()
[10:25:36.799]                     workers <- structure(as.integer(workers), 
[10:25:36.799]                       class = class(workers))
[10:25:36.799]                     stop_if_not(is.finite(workers), workers >= 
[10:25:36.799]                       1L)
[10:25:36.799]                     if ((workers == 1L && !inherits(workers, 
[10:25:36.799]                       "AsIs")) || !supportsMulticore(warn = TRUE)) {
[10:25:36.799]                       if (default_workers) 
[10:25:36.799]                         supportsMulticore(warn = TRUE)
[10:25:36.799]                       return(sequential(..., envir = envir))
[10:25:36.799]                     }
[10:25:36.799]                     oopts <- options(mc.cores = workers)
[10:25:36.799]                     on.exit(options(oopts))
[10:25:36.799]                     future <- MulticoreFuture(..., workers = workers, 
[10:25:36.799]                       envir = envir)
[10:25:36.799]                     if (!future$lazy) 
[10:25:36.799]                       future <- run(future)
[10:25:36.799]                     invisible(future)
[10:25:36.799]                   }), .cleanup = FALSE, .init = FALSE)
[10:25:36.799]                 }
[10:25:36.799]             }
[10:25:36.799]         }
[10:25:36.799]     })
[10:25:36.799]     if (TRUE) {
[10:25:36.799]         base::sink(type = "output", split = FALSE)
[10:25:36.799]         if (TRUE) {
[10:25:36.799]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:25:36.799]         }
[10:25:36.799]         else {
[10:25:36.799]             ...future.result["stdout"] <- base::list(NULL)
[10:25:36.799]         }
[10:25:36.799]         base::close(...future.stdout)
[10:25:36.799]         ...future.stdout <- NULL
[10:25:36.799]     }
[10:25:36.799]     ...future.result$conditions <- ...future.conditions
[10:25:36.799]     ...future.result$finished <- base::Sys.time()
[10:25:36.799]     ...future.result
[10:25:36.799] }
[10:25:36.801] assign_globals() ...
[10:25:36.801] List of 1
[10:25:36.801]  $ ii: int 1
[10:25:36.801]  - attr(*, "where")=List of 1
[10:25:36.801]   ..$ ii:<environment: R_EmptyEnv> 
[10:25:36.801]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:25:36.801]  - attr(*, "resolved")= logi FALSE
[10:25:36.801]  - attr(*, "total_size")= num 56
[10:25:36.801]  - attr(*, "already-done")= logi TRUE
[10:25:36.804] - copied ‘ii’ to environment
[10:25:36.805] assign_globals() ... done
[10:25:36.805] requestCore(): workers = 2
[10:25:36.806] MulticoreFuture started
[10:25:36.807] - Launch lazy future ... done
[10:25:36.807] run() for ‘MulticoreFuture’ ... done
[10:25:36.807] plan(): Setting new future strategy stack:
[10:25:36.808] getGlobalsAndPackages() ...
[10:25:36.808] Searching for globals...
[10:25:36.808] List of future strategies:
[10:25:36.808] 1. sequential:
[10:25:36.808]    - args: function (..., envir = parent.frame())
[10:25:36.808]    - tweaked: FALSE
[10:25:36.808]    - call: NULL
[10:25:36.809] plan(): nbrOfWorkers() = 1
[10:25:36.810] plan(): Setting new future strategy stack:
[10:25:36.810] List of future strategies:
[10:25:36.810] 1. multicore:
[10:25:36.810]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[10:25:36.810]    - tweaked: FALSE
[10:25:36.810]    - call: plan(strategy)
[10:25:36.812] - globals found: [6] ‘{’, ‘if’, ‘==’, ‘%%’, ‘ii’, ‘stop’
[10:25:36.812] Searching for globals ... DONE
[10:25:36.812] Resolving globals: FALSE
[10:25:36.813] The total size of the 1 globals is 56 bytes (56 bytes)
[10:25:36.814] The total size of the 1 globals exported for future expression (‘{; if (ii%%2 == 0); stop("Woops!"); ii; }’) is 56 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘ii’ (56 bytes of class ‘numeric’)
[10:25:36.814] - globals: [1] ‘ii’
[10:25:36.814] 
[10:25:36.814] getGlobalsAndPackages() ... DONE
[10:25:36.815] run() for ‘Future’ ...
[10:25:36.815] - state: ‘created’
[10:25:36.815] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:25:36.815] plan(): nbrOfWorkers() = 2
[10:25:36.819] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[10:25:36.820] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[10:25:36.820]   - Field: ‘label’
[10:25:36.820]   - Field: ‘local’
[10:25:36.820]   - Field: ‘owner’
[10:25:36.820]   - Field: ‘envir’
[10:25:36.820]   - Field: ‘workers’
[10:25:36.820]   - Field: ‘packages’
[10:25:36.821]   - Field: ‘gc’
[10:25:36.821]   - Field: ‘job’
[10:25:36.821]   - Field: ‘conditions’
[10:25:36.821]   - Field: ‘expr’
[10:25:36.821]   - Field: ‘uuid’
[10:25:36.821]   - Field: ‘seed’
[10:25:36.821]   - Field: ‘version’
[10:25:36.822]   - Field: ‘result’
[10:25:36.822]   - Field: ‘asynchronous’
[10:25:36.822]   - Field: ‘calls’
[10:25:36.822]   - Field: ‘globals’
[10:25:36.822]   - Field: ‘stdout’
[10:25:36.822]   - Field: ‘earlySignal’
[10:25:36.822]   - Field: ‘lazy’
[10:25:36.823]   - Field: ‘state’
[10:25:36.823] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[10:25:36.823] - Launch lazy future ...
[10:25:36.823] Packages needed by the future expression (n = 0): <none>
[10:25:36.823] Packages needed by future strategies (n = 0): <none>
[10:25:36.824] {
[10:25:36.824]     {
[10:25:36.824]         {
[10:25:36.824]             ...future.startTime <- base::Sys.time()
[10:25:36.824]             {
[10:25:36.824]                 {
[10:25:36.824]                   {
[10:25:36.824]                     {
[10:25:36.824]                       base::local({
[10:25:36.824]                         has_future <- base::requireNamespace("future", 
[10:25:36.824]                           quietly = TRUE)
[10:25:36.824]                         if (has_future) {
[10:25:36.824]                           ns <- base::getNamespace("future")
[10:25:36.824]                           version <- ns[[".package"]][["version"]]
[10:25:36.824]                           if (is.null(version)) 
[10:25:36.824]                             version <- utils::packageVersion("future")
[10:25:36.824]                         }
[10:25:36.824]                         else {
[10:25:36.824]                           version <- NULL
[10:25:36.824]                         }
[10:25:36.824]                         if (!has_future || version < "1.8.0") {
[10:25:36.824]                           info <- base::c(r_version = base::gsub("R version ", 
[10:25:36.824]                             "", base::R.version$version.string), 
[10:25:36.824]                             platform = base::sprintf("%s (%s-bit)", 
[10:25:36.824]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:25:36.824]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[10:25:36.824]                               "release", "version")], collapse = " "), 
[10:25:36.824]                             hostname = base::Sys.info()[["nodename"]])
[10:25:36.824]                           info <- base::sprintf("%s: %s", base::names(info), 
[10:25:36.824]                             info)
[10:25:36.824]                           info <- base::paste(info, collapse = "; ")
[10:25:36.824]                           if (!has_future) {
[10:25:36.824]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:25:36.824]                               info)
[10:25:36.824]                           }
[10:25:36.824]                           else {
[10:25:36.824]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:25:36.824]                               info, version)
[10:25:36.824]                           }
[10:25:36.824]                           base::stop(msg)
[10:25:36.824]                         }
[10:25:36.824]                       })
[10:25:36.824]                     }
[10:25:36.824]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[10:25:36.824]                     base::options(mc.cores = 1L)
[10:25:36.824]                   }
[10:25:36.824]                   options(future.plan = NULL)
[10:25:36.824]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:25:36.824]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:25:36.824]                 }
[10:25:36.824]                 ...future.workdir <- getwd()
[10:25:36.824]             }
[10:25:36.824]             ...future.oldOptions <- base::as.list(base::.Options)
[10:25:36.824]             ...future.oldEnvVars <- base::Sys.getenv()
[10:25:36.824]         }
[10:25:36.824]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:25:36.824]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[10:25:36.824]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:25:36.824]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:25:36.824]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:25:36.824]             future.stdout.windows.reencode = NULL, width = 80L)
[10:25:36.824]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:25:36.824]             base::names(...future.oldOptions))
[10:25:36.824]     }
[10:25:36.824]     if (FALSE) {
[10:25:36.824]     }
[10:25:36.824]     else {
[10:25:36.824]         if (TRUE) {
[10:25:36.824]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:25:36.824]                 open = "w")
[10:25:36.824]         }
[10:25:36.824]         else {
[10:25:36.824]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:25:36.824]                 windows = "NUL", "/dev/null"), open = "w")
[10:25:36.824]         }
[10:25:36.824]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:25:36.824]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:25:36.824]             base::sink(type = "output", split = FALSE)
[10:25:36.824]             base::close(...future.stdout)
[10:25:36.824]         }, add = TRUE)
[10:25:36.824]     }
[10:25:36.824]     ...future.frame <- base::sys.nframe()
[10:25:36.824]     ...future.conditions <- base::list()
[10:25:36.824]     ...future.rng <- base::globalenv()$.Random.seed
[10:25:36.824]     if (FALSE) {
[10:25:36.824]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:25:36.824]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:25:36.824]     }
[10:25:36.824]     ...future.result <- base::tryCatch({
[10:25:36.824]         base::withCallingHandlers({
[10:25:36.824]             ...future.value <- base::withVisible(base::local({
[10:25:36.824]                 withCallingHandlers({
[10:25:36.824]                   {
[10:25:36.824]                     if (ii%%2 == 0) 
[10:25:36.824]                       stop("Woops!")
[10:25:36.824]                     ii
[10:25:36.824]                   }
[10:25:36.824]                 }, immediateCondition = function(cond) {
[10:25:36.824]                   save_rds <- function (object, pathname, ...) 
[10:25:36.824]                   {
[10:25:36.824]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[10:25:36.824]                     if (file_test("-f", pathname_tmp)) {
[10:25:36.824]                       fi_tmp <- file.info(pathname_tmp)
[10:25:36.824]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[10:25:36.824]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[10:25:36.824]                         fi_tmp[["mtime"]])
[10:25:36.824]                     }
[10:25:36.824]                     tryCatch({
[10:25:36.824]                       saveRDS(object, file = pathname_tmp, ...)
[10:25:36.824]                     }, error = function(ex) {
[10:25:36.824]                       msg <- conditionMessage(ex)
[10:25:36.824]                       fi_tmp <- file.info(pathname_tmp)
[10:25:36.824]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[10:25:36.824]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[10:25:36.824]                         fi_tmp[["mtime"]], msg)
[10:25:36.824]                       ex$message <- msg
[10:25:36.824]                       stop(ex)
[10:25:36.824]                     })
[10:25:36.824]                     stopifnot(file_test("-f", pathname_tmp))
[10:25:36.824]                     res <- file.rename(from = pathname_tmp, to = pathname)
[10:25:36.824]                     if (!res || file_test("-f", pathname_tmp)) {
[10:25:36.824]                       fi_tmp <- file.info(pathname_tmp)
[10:25:36.824]                       fi <- file.info(pathname)
[10:25:36.824]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[10:25:36.824]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[10:25:36.824]                         fi_tmp[["mtime"]], sQuote(pathname), 
[10:25:36.824]                         fi[["size"]], fi[["mtime"]])
[10:25:36.824]                       stop(msg)
[10:25:36.824]                     }
[10:25:36.824]                     invisible(pathname)
[10:25:36.824]                   }
[10:25:36.824]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[10:25:36.824]                     rootPath = tempdir()) 
[10:25:36.824]                   {
[10:25:36.824]                     obj <- list(time = Sys.time(), condition = cond)
[10:25:36.824]                     file <- tempfile(pattern = class(cond)[1], 
[10:25:36.824]                       tmpdir = path, fileext = ".rds")
[10:25:36.824]                     save_rds(obj, file)
[10:25:36.824]                   }
[10:25:36.824]                   saveImmediateCondition(cond, path = "/tmp/RtmpEdG1rj/.future/immediateConditions")
[10:25:36.824]                   muffleCondition <- function (cond, pattern = "^muffle") 
[10:25:36.824]                   {
[10:25:36.824]                     inherits <- base::inherits
[10:25:36.824]                     invokeRestart <- base::invokeRestart
[10:25:36.824]                     is.null <- base::is.null
[10:25:36.824]                     muffled <- FALSE
[10:25:36.824]                     if (inherits(cond, "message")) {
[10:25:36.824]                       muffled <- grepl(pattern, "muffleMessage")
[10:25:36.824]                       if (muffled) 
[10:25:36.824]                         invokeRestart("muffleMessage")
[10:25:36.824]                     }
[10:25:36.824]                     else if (inherits(cond, "warning")) {
[10:25:36.824]                       muffled <- grepl(pattern, "muffleWarning")
[10:25:36.824]                       if (muffled) 
[10:25:36.824]                         invokeRestart("muffleWarning")
[10:25:36.824]                     }
[10:25:36.824]                     else if (inherits(cond, "condition")) {
[10:25:36.824]                       if (!is.null(pattern)) {
[10:25:36.824]                         computeRestarts <- base::computeRestarts
[10:25:36.824]                         grepl <- base::grepl
[10:25:36.824]                         restarts <- computeRestarts(cond)
[10:25:36.824]                         for (restart in restarts) {
[10:25:36.824]                           name <- restart$name
[10:25:36.824]                           if (is.null(name)) 
[10:25:36.824]                             next
[10:25:36.824]                           if (!grepl(pattern, name)) 
[10:25:36.824]                             next
[10:25:36.824]                           invokeRestart(restart)
[10:25:36.824]                           muffled <- TRUE
[10:25:36.824]                           break
[10:25:36.824]                         }
[10:25:36.824]                       }
[10:25:36.824]                     }
[10:25:36.824]                     invisible(muffled)
[10:25:36.824]                   }
[10:25:36.824]                   muffleCondition(cond)
[10:25:36.824]                 })
[10:25:36.824]             }))
[10:25:36.824]             future::FutureResult(value = ...future.value$value, 
[10:25:36.824]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:25:36.824]                   ...future.rng), globalenv = if (FALSE) 
[10:25:36.824]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:25:36.824]                     ...future.globalenv.names))
[10:25:36.824]                 else NULL, started = ...future.startTime, version = "1.8")
[10:25:36.824]         }, condition = base::local({
[10:25:36.824]             c <- base::c
[10:25:36.824]             inherits <- base::inherits
[10:25:36.824]             invokeRestart <- base::invokeRestart
[10:25:36.824]             length <- base::length
[10:25:36.824]             list <- base::list
[10:25:36.824]             seq.int <- base::seq.int
[10:25:36.824]             signalCondition <- base::signalCondition
[10:25:36.824]             sys.calls <- base::sys.calls
[10:25:36.824]             `[[` <- base::`[[`
[10:25:36.824]             `+` <- base::`+`
[10:25:36.824]             `<<-` <- base::`<<-`
[10:25:36.824]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:25:36.824]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:25:36.824]                   3L)]
[10:25:36.824]             }
[10:25:36.824]             function(cond) {
[10:25:36.824]                 is_error <- inherits(cond, "error")
[10:25:36.824]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:25:36.824]                   NULL)
[10:25:36.824]                 if (is_error) {
[10:25:36.824]                   sessionInformation <- function() {
[10:25:36.824]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:25:36.824]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:25:36.824]                       search = base::search(), system = base::Sys.info())
[10:25:36.824]                   }
[10:25:36.824]                   ...future.conditions[[length(...future.conditions) + 
[10:25:36.824]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:25:36.824]                     cond$call), session = sessionInformation(), 
[10:25:36.824]                     timestamp = base::Sys.time(), signaled = 0L)
[10:25:36.824]                   signalCondition(cond)
[10:25:36.824]                 }
[10:25:36.824]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:25:36.824]                 "immediateCondition"))) {
[10:25:36.824]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:25:36.824]                   ...future.conditions[[length(...future.conditions) + 
[10:25:36.824]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:25:36.824]                   if (TRUE && !signal) {
[10:25:36.824]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:25:36.824]                     {
[10:25:36.824]                       inherits <- base::inherits
[10:25:36.824]                       invokeRestart <- base::invokeRestart
[10:25:36.824]                       is.null <- base::is.null
[10:25:36.824]                       muffled <- FALSE
[10:25:36.824]                       if (inherits(cond, "message")) {
[10:25:36.824]                         muffled <- grepl(pattern, "muffleMessage")
[10:25:36.824]                         if (muffled) 
[10:25:36.824]                           invokeRestart("muffleMessage")
[10:25:36.824]                       }
[10:25:36.824]                       else if (inherits(cond, "warning")) {
[10:25:36.824]                         muffled <- grepl(pattern, "muffleWarning")
[10:25:36.824]                         if (muffled) 
[10:25:36.824]                           invokeRestart("muffleWarning")
[10:25:36.824]                       }
[10:25:36.824]                       else if (inherits(cond, "condition")) {
[10:25:36.824]                         if (!is.null(pattern)) {
[10:25:36.824]                           computeRestarts <- base::computeRestarts
[10:25:36.824]                           grepl <- base::grepl
[10:25:36.824]                           restarts <- computeRestarts(cond)
[10:25:36.824]                           for (restart in restarts) {
[10:25:36.824]                             name <- restart$name
[10:25:36.824]                             if (is.null(name)) 
[10:25:36.824]                               next
[10:25:36.824]                             if (!grepl(pattern, name)) 
[10:25:36.824]                               next
[10:25:36.824]                             invokeRestart(restart)
[10:25:36.824]                             muffled <- TRUE
[10:25:36.824]                             break
[10:25:36.824]                           }
[10:25:36.824]                         }
[10:25:36.824]                       }
[10:25:36.824]                       invisible(muffled)
[10:25:36.824]                     }
[10:25:36.824]                     muffleCondition(cond, pattern = "^muffle")
[10:25:36.824]                   }
[10:25:36.824]                 }
[10:25:36.824]                 else {
[10:25:36.824]                   if (TRUE) {
[10:25:36.824]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:25:36.824]                     {
[10:25:36.824]                       inherits <- base::inherits
[10:25:36.824]                       invokeRestart <- base::invokeRestart
[10:25:36.824]                       is.null <- base::is.null
[10:25:36.824]                       muffled <- FALSE
[10:25:36.824]                       if (inherits(cond, "message")) {
[10:25:36.824]                         muffled <- grepl(pattern, "muffleMessage")
[10:25:36.824]                         if (muffled) 
[10:25:36.824]                           invokeRestart("muffleMessage")
[10:25:36.824]                       }
[10:25:36.824]                       else if (inherits(cond, "warning")) {
[10:25:36.824]                         muffled <- grepl(pattern, "muffleWarning")
[10:25:36.824]                         if (muffled) 
[10:25:36.824]                           invokeRestart("muffleWarning")
[10:25:36.824]                       }
[10:25:36.824]                       else if (inherits(cond, "condition")) {
[10:25:36.824]                         if (!is.null(pattern)) {
[10:25:36.824]                           computeRestarts <- base::computeRestarts
[10:25:36.824]                           grepl <- base::grepl
[10:25:36.824]                           restarts <- computeRestarts(cond)
[10:25:36.824]                           for (restart in restarts) {
[10:25:36.824]                             name <- restart$name
[10:25:36.824]                             if (is.null(name)) 
[10:25:36.824]                               next
[10:25:36.824]                             if (!grepl(pattern, name)) 
[10:25:36.824]                               next
[10:25:36.824]                             invokeRestart(restart)
[10:25:36.824]                             muffled <- TRUE
[10:25:36.824]                             break
[10:25:36.824]                           }
[10:25:36.824]                         }
[10:25:36.824]                       }
[10:25:36.824]                       invisible(muffled)
[10:25:36.824]                     }
[10:25:36.824]                     muffleCondition(cond, pattern = "^muffle")
[10:25:36.824]                   }
[10:25:36.824]                 }
[10:25:36.824]             }
[10:25:36.824]         }))
[10:25:36.824]     }, error = function(ex) {
[10:25:36.824]         base::structure(base::list(value = NULL, visible = NULL, 
[10:25:36.824]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:25:36.824]                 ...future.rng), started = ...future.startTime, 
[10:25:36.824]             finished = Sys.time(), session_uuid = NA_character_, 
[10:25:36.824]             version = "1.8"), class = "FutureResult")
[10:25:36.824]     }, finally = {
[10:25:36.824]         if (!identical(...future.workdir, getwd())) 
[10:25:36.824]             setwd(...future.workdir)
[10:25:36.824]         {
[10:25:36.824]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:25:36.824]                 ...future.oldOptions$nwarnings <- NULL
[10:25:36.824]             }
[10:25:36.824]             base::options(...future.oldOptions)
[10:25:36.824]             if (.Platform$OS.type == "windows") {
[10:25:36.824]                 old_names <- names(...future.oldEnvVars)
[10:25:36.824]                 envs <- base::Sys.getenv()
[10:25:36.824]                 names <- names(envs)
[10:25:36.824]                 common <- intersect(names, old_names)
[10:25:36.824]                 added <- setdiff(names, old_names)
[10:25:36.824]                 removed <- setdiff(old_names, names)
[10:25:36.824]                 changed <- common[...future.oldEnvVars[common] != 
[10:25:36.824]                   envs[common]]
[10:25:36.824]                 NAMES <- toupper(changed)
[10:25:36.824]                 args <- list()
[10:25:36.824]                 for (kk in seq_along(NAMES)) {
[10:25:36.824]                   name <- changed[[kk]]
[10:25:36.824]                   NAME <- NAMES[[kk]]
[10:25:36.824]                   if (name != NAME && is.element(NAME, old_names)) 
[10:25:36.824]                     next
[10:25:36.824]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:25:36.824]                 }
[10:25:36.824]                 NAMES <- toupper(added)
[10:25:36.824]                 for (kk in seq_along(NAMES)) {
[10:25:36.824]                   name <- added[[kk]]
[10:25:36.824]                   NAME <- NAMES[[kk]]
[10:25:36.824]                   if (name != NAME && is.element(NAME, old_names)) 
[10:25:36.824]                     next
[10:25:36.824]                   args[[name]] <- ""
[10:25:36.824]                 }
[10:25:36.824]                 NAMES <- toupper(removed)
[10:25:36.824]                 for (kk in seq_along(NAMES)) {
[10:25:36.824]                   name <- removed[[kk]]
[10:25:36.824]                   NAME <- NAMES[[kk]]
[10:25:36.824]                   if (name != NAME && is.element(NAME, old_names)) 
[10:25:36.824]                     next
[10:25:36.824]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:25:36.824]                 }
[10:25:36.824]                 if (length(args) > 0) 
[10:25:36.824]                   base::do.call(base::Sys.setenv, args = args)
[10:25:36.824]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:25:36.824]             }
[10:25:36.824]             else {
[10:25:36.824]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:25:36.824]             }
[10:25:36.824]             {
[10:25:36.824]                 if (base::length(...future.futureOptionsAdded) > 
[10:25:36.824]                   0L) {
[10:25:36.824]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:25:36.824]                   base::names(opts) <- ...future.futureOptionsAdded
[10:25:36.824]                   base::options(opts)
[10:25:36.824]                 }
[10:25:36.824]                 {
[10:25:36.824]                   {
[10:25:36.824]                     base::options(mc.cores = ...future.mc.cores.old)
[10:25:36.824]                     NULL
[10:25:36.824]                   }
[10:25:36.824]                   options(future.plan = NULL)
[10:25:36.824]                   if (is.na(NA_character_)) 
[10:25:36.824]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:25:36.824]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:25:36.824]                   future::plan(list(function (..., workers = availableCores(constraints = "multicore"), 
[10:25:36.824]                     envir = parent.frame()) 
[10:25:36.824]                   {
[10:25:36.824]                     default_workers <- missing(workers)
[10:25:36.824]                     if (is.function(workers)) 
[10:25:36.824]                       workers <- workers()
[10:25:36.824]                     workers <- structure(as.integer(workers), 
[10:25:36.824]                       class = class(workers))
[10:25:36.824]                     stop_if_not(is.finite(workers), workers >= 
[10:25:36.824]                       1L)
[10:25:36.824]                     if ((workers == 1L && !inherits(workers, 
[10:25:36.824]                       "AsIs")) || !supportsMulticore(warn = TRUE)) {
[10:25:36.824]                       if (default_workers) 
[10:25:36.824]                         supportsMulticore(warn = TRUE)
[10:25:36.824]                       return(sequential(..., envir = envir))
[10:25:36.824]                     }
[10:25:36.824]                     oopts <- options(mc.cores = workers)
[10:25:36.824]                     on.exit(options(oopts))
[10:25:36.824]                     future <- MulticoreFuture(..., workers = workers, 
[10:25:36.824]                       envir = envir)
[10:25:36.824]                     if (!future$lazy) 
[10:25:36.824]                       future <- run(future)
[10:25:36.824]                     invisible(future)
[10:25:36.824]                   }), .cleanup = FALSE, .init = FALSE)
[10:25:36.824]                 }
[10:25:36.824]             }
[10:25:36.824]         }
[10:25:36.824]     })
[10:25:36.824]     if (TRUE) {
[10:25:36.824]         base::sink(type = "output", split = FALSE)
[10:25:36.824]         if (TRUE) {
[10:25:36.824]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:25:36.824]         }
[10:25:36.824]         else {
[10:25:36.824]             ...future.result["stdout"] <- base::list(NULL)
[10:25:36.824]         }
[10:25:36.824]         base::close(...future.stdout)
[10:25:36.824]         ...future.stdout <- NULL
[10:25:36.824]     }
[10:25:36.824]     ...future.result$conditions <- ...future.conditions
[10:25:36.824]     ...future.result$finished <- base::Sys.time()
[10:25:36.824]     ...future.result
[10:25:36.824] }
[10:25:36.827] assign_globals() ...
[10:25:36.827] List of 1
[10:25:36.827]  $ ii: int 2
[10:25:36.827]  - attr(*, "where")=List of 1
[10:25:36.827]   ..$ ii:<environment: R_EmptyEnv> 
[10:25:36.827]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:25:36.827]  - attr(*, "resolved")= logi FALSE
[10:25:36.827]  - attr(*, "total_size")= num 56
[10:25:36.827]  - attr(*, "already-done")= logi TRUE
[10:25:36.831] - copied ‘ii’ to environment
[10:25:36.831] assign_globals() ... done
[10:25:36.832] requestCore(): workers = 2
[10:25:36.834] MulticoreFuture started
[10:25:36.834] - Launch lazy future ... done
[10:25:36.834] run() for ‘MulticoreFuture’ ... done
[10:25:36.835] plan(): Setting new future strategy stack:
[10:25:36.835] getGlobalsAndPackages() ...
[10:25:36.835] Searching for globals...
[10:25:36.835] List of future strategies:
[10:25:36.835] 1. sequential:
[10:25:36.835]    - args: function (..., envir = parent.frame())
[10:25:36.835]    - tweaked: FALSE
[10:25:36.835]    - call: NULL
[10:25:36.836] plan(): nbrOfWorkers() = 1
[10:25:36.838] plan(): Setting new future strategy stack:
[10:25:36.838] List of future strategies:
[10:25:36.838] 1. multicore:
[10:25:36.838]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[10:25:36.838]    - tweaked: FALSE
[10:25:36.838]    - call: plan(strategy)
[10:25:36.838] - globals found: [6] ‘{’, ‘if’, ‘==’, ‘%%’, ‘ii’, ‘stop’
[10:25:36.839] Searching for globals ... DONE
[10:25:36.843] plan(): nbrOfWorkers() = 2
[10:25:36.843] Resolving globals: FALSE
[10:25:36.844] The total size of the 1 globals is 56 bytes (56 bytes)
[10:25:36.845] The total size of the 1 globals exported for future expression (‘{; if (ii%%2 == 0); stop("Woops!"); ii; }’) is 56 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘ii’ (56 bytes of class ‘numeric’)
[10:25:36.845] - globals: [1] ‘ii’
[10:25:36.845] 
[10:25:36.845] getGlobalsAndPackages() ... DONE
[10:25:36.846] run() for ‘Future’ ...
[10:25:36.846] - state: ‘created’
[10:25:36.847] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:25:36.851] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[10:25:36.852] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[10:25:36.852]   - Field: ‘label’
[10:25:36.852]   - Field: ‘local’
[10:25:36.852]   - Field: ‘owner’
[10:25:36.852]   - Field: ‘envir’
[10:25:36.852]   - Field: ‘workers’
[10:25:36.853]   - Field: ‘packages’
[10:25:36.853]   - Field: ‘gc’
[10:25:36.853]   - Field: ‘job’
[10:25:36.853]   - Field: ‘conditions’
[10:25:36.853]   - Field: ‘expr’
[10:25:36.853]   - Field: ‘uuid’
[10:25:36.854]   - Field: ‘seed’
[10:25:36.854]   - Field: ‘version’
[10:25:36.854]   - Field: ‘result’
[10:25:36.854]   - Field: ‘asynchronous’
[10:25:36.854]   - Field: ‘calls’
[10:25:36.854]   - Field: ‘globals’
[10:25:36.855]   - Field: ‘stdout’
[10:25:36.855]   - Field: ‘earlySignal’
[10:25:36.855]   - Field: ‘lazy’
[10:25:36.855]   - Field: ‘state’
[10:25:36.855] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[10:25:36.855] - Launch lazy future ...
[10:25:36.856] Packages needed by the future expression (n = 0): <none>
[10:25:36.856] Packages needed by future strategies (n = 0): <none>
[10:25:36.857] {
[10:25:36.857]     {
[10:25:36.857]         {
[10:25:36.857]             ...future.startTime <- base::Sys.time()
[10:25:36.857]             {
[10:25:36.857]                 {
[10:25:36.857]                   {
[10:25:36.857]                     {
[10:25:36.857]                       base::local({
[10:25:36.857]                         has_future <- base::requireNamespace("future", 
[10:25:36.857]                           quietly = TRUE)
[10:25:36.857]                         if (has_future) {
[10:25:36.857]                           ns <- base::getNamespace("future")
[10:25:36.857]                           version <- ns[[".package"]][["version"]]
[10:25:36.857]                           if (is.null(version)) 
[10:25:36.857]                             version <- utils::packageVersion("future")
[10:25:36.857]                         }
[10:25:36.857]                         else {
[10:25:36.857]                           version <- NULL
[10:25:36.857]                         }
[10:25:36.857]                         if (!has_future || version < "1.8.0") {
[10:25:36.857]                           info <- base::c(r_version = base::gsub("R version ", 
[10:25:36.857]                             "", base::R.version$version.string), 
[10:25:36.857]                             platform = base::sprintf("%s (%s-bit)", 
[10:25:36.857]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:25:36.857]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[10:25:36.857]                               "release", "version")], collapse = " "), 
[10:25:36.857]                             hostname = base::Sys.info()[["nodename"]])
[10:25:36.857]                           info <- base::sprintf("%s: %s", base::names(info), 
[10:25:36.857]                             info)
[10:25:36.857]                           info <- base::paste(info, collapse = "; ")
[10:25:36.857]                           if (!has_future) {
[10:25:36.857]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:25:36.857]                               info)
[10:25:36.857]                           }
[10:25:36.857]                           else {
[10:25:36.857]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:25:36.857]                               info, version)
[10:25:36.857]                           }
[10:25:36.857]                           base::stop(msg)
[10:25:36.857]                         }
[10:25:36.857]                       })
[10:25:36.857]                     }
[10:25:36.857]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[10:25:36.857]                     base::options(mc.cores = 1L)
[10:25:36.857]                   }
[10:25:36.857]                   options(future.plan = NULL)
[10:25:36.857]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:25:36.857]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:25:36.857]                 }
[10:25:36.857]                 ...future.workdir <- getwd()
[10:25:36.857]             }
[10:25:36.857]             ...future.oldOptions <- base::as.list(base::.Options)
[10:25:36.857]             ...future.oldEnvVars <- base::Sys.getenv()
[10:25:36.857]         }
[10:25:36.857]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:25:36.857]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[10:25:36.857]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:25:36.857]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:25:36.857]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:25:36.857]             future.stdout.windows.reencode = NULL, width = 80L)
[10:25:36.857]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:25:36.857]             base::names(...future.oldOptions))
[10:25:36.857]     }
[10:25:36.857]     if (FALSE) {
[10:25:36.857]     }
[10:25:36.857]     else {
[10:25:36.857]         if (TRUE) {
[10:25:36.857]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:25:36.857]                 open = "w")
[10:25:36.857]         }
[10:25:36.857]         else {
[10:25:36.857]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:25:36.857]                 windows = "NUL", "/dev/null"), open = "w")
[10:25:36.857]         }
[10:25:36.857]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:25:36.857]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:25:36.857]             base::sink(type = "output", split = FALSE)
[10:25:36.857]             base::close(...future.stdout)
[10:25:36.857]         }, add = TRUE)
[10:25:36.857]     }
[10:25:36.857]     ...future.frame <- base::sys.nframe()
[10:25:36.857]     ...future.conditions <- base::list()
[10:25:36.857]     ...future.rng <- base::globalenv()$.Random.seed
[10:25:36.857]     if (FALSE) {
[10:25:36.857]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:25:36.857]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:25:36.857]     }
[10:25:36.857]     ...future.result <- base::tryCatch({
[10:25:36.857]         base::withCallingHandlers({
[10:25:36.857]             ...future.value <- base::withVisible(base::local({
[10:25:36.857]                 withCallingHandlers({
[10:25:36.857]                   {
[10:25:36.857]                     if (ii%%2 == 0) 
[10:25:36.857]                       stop("Woops!")
[10:25:36.857]                     ii
[10:25:36.857]                   }
[10:25:36.857]                 }, immediateCondition = function(cond) {
[10:25:36.857]                   save_rds <- function (object, pathname, ...) 
[10:25:36.857]                   {
[10:25:36.857]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[10:25:36.857]                     if (file_test("-f", pathname_tmp)) {
[10:25:36.857]                       fi_tmp <- file.info(pathname_tmp)
[10:25:36.857]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[10:25:36.857]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[10:25:36.857]                         fi_tmp[["mtime"]])
[10:25:36.857]                     }
[10:25:36.857]                     tryCatch({
[10:25:36.857]                       saveRDS(object, file = pathname_tmp, ...)
[10:25:36.857]                     }, error = function(ex) {
[10:25:36.857]                       msg <- conditionMessage(ex)
[10:25:36.857]                       fi_tmp <- file.info(pathname_tmp)
[10:25:36.857]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[10:25:36.857]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[10:25:36.857]                         fi_tmp[["mtime"]], msg)
[10:25:36.857]                       ex$message <- msg
[10:25:36.857]                       stop(ex)
[10:25:36.857]                     })
[10:25:36.857]                     stopifnot(file_test("-f", pathname_tmp))
[10:25:36.857]                     res <- file.rename(from = pathname_tmp, to = pathname)
[10:25:36.857]                     if (!res || file_test("-f", pathname_tmp)) {
[10:25:36.857]                       fi_tmp <- file.info(pathname_tmp)
[10:25:36.857]                       fi <- file.info(pathname)
[10:25:36.857]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[10:25:36.857]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[10:25:36.857]                         fi_tmp[["mtime"]], sQuote(pathname), 
[10:25:36.857]                         fi[["size"]], fi[["mtime"]])
[10:25:36.857]                       stop(msg)
[10:25:36.857]                     }
[10:25:36.857]                     invisible(pathname)
[10:25:36.857]                   }
[10:25:36.857]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[10:25:36.857]                     rootPath = tempdir()) 
[10:25:36.857]                   {
[10:25:36.857]                     obj <- list(time = Sys.time(), condition = cond)
[10:25:36.857]                     file <- tempfile(pattern = class(cond)[1], 
[10:25:36.857]                       tmpdir = path, fileext = ".rds")
[10:25:36.857]                     save_rds(obj, file)
[10:25:36.857]                   }
[10:25:36.857]                   saveImmediateCondition(cond, path = "/tmp/RtmpEdG1rj/.future/immediateConditions")
[10:25:36.857]                   muffleCondition <- function (cond, pattern = "^muffle") 
[10:25:36.857]                   {
[10:25:36.857]                     inherits <- base::inherits
[10:25:36.857]                     invokeRestart <- base::invokeRestart
[10:25:36.857]                     is.null <- base::is.null
[10:25:36.857]                     muffled <- FALSE
[10:25:36.857]                     if (inherits(cond, "message")) {
[10:25:36.857]                       muffled <- grepl(pattern, "muffleMessage")
[10:25:36.857]                       if (muffled) 
[10:25:36.857]                         invokeRestart("muffleMessage")
[10:25:36.857]                     }
[10:25:36.857]                     else if (inherits(cond, "warning")) {
[10:25:36.857]                       muffled <- grepl(pattern, "muffleWarning")
[10:25:36.857]                       if (muffled) 
[10:25:36.857]                         invokeRestart("muffleWarning")
[10:25:36.857]                     }
[10:25:36.857]                     else if (inherits(cond, "condition")) {
[10:25:36.857]                       if (!is.null(pattern)) {
[10:25:36.857]                         computeRestarts <- base::computeRestarts
[10:25:36.857]                         grepl <- base::grepl
[10:25:36.857]                         restarts <- computeRestarts(cond)
[10:25:36.857]                         for (restart in restarts) {
[10:25:36.857]                           name <- restart$name
[10:25:36.857]                           if (is.null(name)) 
[10:25:36.857]                             next
[10:25:36.857]                           if (!grepl(pattern, name)) 
[10:25:36.857]                             next
[10:25:36.857]                           invokeRestart(restart)
[10:25:36.857]                           muffled <- TRUE
[10:25:36.857]                           break
[10:25:36.857]                         }
[10:25:36.857]                       }
[10:25:36.857]                     }
[10:25:36.857]                     invisible(muffled)
[10:25:36.857]                   }
[10:25:36.857]                   muffleCondition(cond)
[10:25:36.857]                 })
[10:25:36.857]             }))
[10:25:36.857]             future::FutureResult(value = ...future.value$value, 
[10:25:36.857]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:25:36.857]                   ...future.rng), globalenv = if (FALSE) 
[10:25:36.857]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:25:36.857]                     ...future.globalenv.names))
[10:25:36.857]                 else NULL, started = ...future.startTime, version = "1.8")
[10:25:36.857]         }, condition = base::local({
[10:25:36.857]             c <- base::c
[10:25:36.857]             inherits <- base::inherits
[10:25:36.857]             invokeRestart <- base::invokeRestart
[10:25:36.857]             length <- base::length
[10:25:36.857]             list <- base::list
[10:25:36.857]             seq.int <- base::seq.int
[10:25:36.857]             signalCondition <- base::signalCondition
[10:25:36.857]             sys.calls <- base::sys.calls
[10:25:36.857]             `[[` <- base::`[[`
[10:25:36.857]             `+` <- base::`+`
[10:25:36.857]             `<<-` <- base::`<<-`
[10:25:36.857]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:25:36.857]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:25:36.857]                   3L)]
[10:25:36.857]             }
[10:25:36.857]             function(cond) {
[10:25:36.857]                 is_error <- inherits(cond, "error")
[10:25:36.857]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:25:36.857]                   NULL)
[10:25:36.857]                 if (is_error) {
[10:25:36.857]                   sessionInformation <- function() {
[10:25:36.857]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:25:36.857]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:25:36.857]                       search = base::search(), system = base::Sys.info())
[10:25:36.857]                   }
[10:25:36.857]                   ...future.conditions[[length(...future.conditions) + 
[10:25:36.857]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:25:36.857]                     cond$call), session = sessionInformation(), 
[10:25:36.857]                     timestamp = base::Sys.time(), signaled = 0L)
[10:25:36.857]                   signalCondition(cond)
[10:25:36.857]                 }
[10:25:36.857]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:25:36.857]                 "immediateCondition"))) {
[10:25:36.857]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:25:36.857]                   ...future.conditions[[length(...future.conditions) + 
[10:25:36.857]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:25:36.857]                   if (TRUE && !signal) {
[10:25:36.857]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:25:36.857]                     {
[10:25:36.857]                       inherits <- base::inherits
[10:25:36.857]                       invokeRestart <- base::invokeRestart
[10:25:36.857]                       is.null <- base::is.null
[10:25:36.857]                       muffled <- FALSE
[10:25:36.857]                       if (inherits(cond, "message")) {
[10:25:36.857]                         muffled <- grepl(pattern, "muffleMessage")
[10:25:36.857]                         if (muffled) 
[10:25:36.857]                           invokeRestart("muffleMessage")
[10:25:36.857]                       }
[10:25:36.857]                       else if (inherits(cond, "warning")) {
[10:25:36.857]                         muffled <- grepl(pattern, "muffleWarning")
[10:25:36.857]                         if (muffled) 
[10:25:36.857]                           invokeRestart("muffleWarning")
[10:25:36.857]                       }
[10:25:36.857]                       else if (inherits(cond, "condition")) {
[10:25:36.857]                         if (!is.null(pattern)) {
[10:25:36.857]                           computeRestarts <- base::computeRestarts
[10:25:36.857]                           grepl <- base::grepl
[10:25:36.857]                           restarts <- computeRestarts(cond)
[10:25:36.857]                           for (restart in restarts) {
[10:25:36.857]                             name <- restart$name
[10:25:36.857]                             if (is.null(name)) 
[10:25:36.857]                               next
[10:25:36.857]                             if (!grepl(pattern, name)) 
[10:25:36.857]                               next
[10:25:36.857]                             invokeRestart(restart)
[10:25:36.857]                             muffled <- TRUE
[10:25:36.857]                             break
[10:25:36.857]                           }
[10:25:36.857]                         }
[10:25:36.857]                       }
[10:25:36.857]                       invisible(muffled)
[10:25:36.857]                     }
[10:25:36.857]                     muffleCondition(cond, pattern = "^muffle")
[10:25:36.857]                   }
[10:25:36.857]                 }
[10:25:36.857]                 else {
[10:25:36.857]                   if (TRUE) {
[10:25:36.857]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:25:36.857]                     {
[10:25:36.857]                       inherits <- base::inherits
[10:25:36.857]                       invokeRestart <- base::invokeRestart
[10:25:36.857]                       is.null <- base::is.null
[10:25:36.857]                       muffled <- FALSE
[10:25:36.857]                       if (inherits(cond, "message")) {
[10:25:36.857]                         muffled <- grepl(pattern, "muffleMessage")
[10:25:36.857]                         if (muffled) 
[10:25:36.857]                           invokeRestart("muffleMessage")
[10:25:36.857]                       }
[10:25:36.857]                       else if (inherits(cond, "warning")) {
[10:25:36.857]                         muffled <- grepl(pattern, "muffleWarning")
[10:25:36.857]                         if (muffled) 
[10:25:36.857]                           invokeRestart("muffleWarning")
[10:25:36.857]                       }
[10:25:36.857]                       else if (inherits(cond, "condition")) {
[10:25:36.857]                         if (!is.null(pattern)) {
[10:25:36.857]                           computeRestarts <- base::computeRestarts
[10:25:36.857]                           grepl <- base::grepl
[10:25:36.857]                           restarts <- computeRestarts(cond)
[10:25:36.857]                           for (restart in restarts) {
[10:25:36.857]                             name <- restart$name
[10:25:36.857]                             if (is.null(name)) 
[10:25:36.857]                               next
[10:25:36.857]                             if (!grepl(pattern, name)) 
[10:25:36.857]                               next
[10:25:36.857]                             invokeRestart(restart)
[10:25:36.857]                             muffled <- TRUE
[10:25:36.857]                             break
[10:25:36.857]                           }
[10:25:36.857]                         }
[10:25:36.857]                       }
[10:25:36.857]                       invisible(muffled)
[10:25:36.857]                     }
[10:25:36.857]                     muffleCondition(cond, pattern = "^muffle")
[10:25:36.857]                   }
[10:25:36.857]                 }
[10:25:36.857]             }
[10:25:36.857]         }))
[10:25:36.857]     }, error = function(ex) {
[10:25:36.857]         base::structure(base::list(value = NULL, visible = NULL, 
[10:25:36.857]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:25:36.857]                 ...future.rng), started = ...future.startTime, 
[10:25:36.857]             finished = Sys.time(), session_uuid = NA_character_, 
[10:25:36.857]             version = "1.8"), class = "FutureResult")
[10:25:36.857]     }, finally = {
[10:25:36.857]         if (!identical(...future.workdir, getwd())) 
[10:25:36.857]             setwd(...future.workdir)
[10:25:36.857]         {
[10:25:36.857]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:25:36.857]                 ...future.oldOptions$nwarnings <- NULL
[10:25:36.857]             }
[10:25:36.857]             base::options(...future.oldOptions)
[10:25:36.857]             if (.Platform$OS.type == "windows") {
[10:25:36.857]                 old_names <- names(...future.oldEnvVars)
[10:25:36.857]                 envs <- base::Sys.getenv()
[10:25:36.857]                 names <- names(envs)
[10:25:36.857]                 common <- intersect(names, old_names)
[10:25:36.857]                 added <- setdiff(names, old_names)
[10:25:36.857]                 removed <- setdiff(old_names, names)
[10:25:36.857]                 changed <- common[...future.oldEnvVars[common] != 
[10:25:36.857]                   envs[common]]
[10:25:36.857]                 NAMES <- toupper(changed)
[10:25:36.857]                 args <- list()
[10:25:36.857]                 for (kk in seq_along(NAMES)) {
[10:25:36.857]                   name <- changed[[kk]]
[10:25:36.857]                   NAME <- NAMES[[kk]]
[10:25:36.857]                   if (name != NAME && is.element(NAME, old_names)) 
[10:25:36.857]                     next
[10:25:36.857]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:25:36.857]                 }
[10:25:36.857]                 NAMES <- toupper(added)
[10:25:36.857]                 for (kk in seq_along(NAMES)) {
[10:25:36.857]                   name <- added[[kk]]
[10:25:36.857]                   NAME <- NAMES[[kk]]
[10:25:36.857]                   if (name != NAME && is.element(NAME, old_names)) 
[10:25:36.857]                     next
[10:25:36.857]                   args[[name]] <- ""
[10:25:36.857]                 }
[10:25:36.857]                 NAMES <- toupper(removed)
[10:25:36.857]                 for (kk in seq_along(NAMES)) {
[10:25:36.857]                   name <- removed[[kk]]
[10:25:36.857]                   NAME <- NAMES[[kk]]
[10:25:36.857]                   if (name != NAME && is.element(NAME, old_names)) 
[10:25:36.857]                     next
[10:25:36.857]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:25:36.857]                 }
[10:25:36.857]                 if (length(args) > 0) 
[10:25:36.857]                   base::do.call(base::Sys.setenv, args = args)
[10:25:36.857]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:25:36.857]             }
[10:25:36.857]             else {
[10:25:36.857]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:25:36.857]             }
[10:25:36.857]             {
[10:25:36.857]                 if (base::length(...future.futureOptionsAdded) > 
[10:25:36.857]                   0L) {
[10:25:36.857]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:25:36.857]                   base::names(opts) <- ...future.futureOptionsAdded
[10:25:36.857]                   base::options(opts)
[10:25:36.857]                 }
[10:25:36.857]                 {
[10:25:36.857]                   {
[10:25:36.857]                     base::options(mc.cores = ...future.mc.cores.old)
[10:25:36.857]                     NULL
[10:25:36.857]                   }
[10:25:36.857]                   options(future.plan = NULL)
[10:25:36.857]                   if (is.na(NA_character_)) 
[10:25:36.857]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:25:36.857]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:25:36.857]                   future::plan(list(function (..., workers = availableCores(constraints = "multicore"), 
[10:25:36.857]                     envir = parent.frame()) 
[10:25:36.857]                   {
[10:25:36.857]                     default_workers <- missing(workers)
[10:25:36.857]                     if (is.function(workers)) 
[10:25:36.857]                       workers <- workers()
[10:25:36.857]                     workers <- structure(as.integer(workers), 
[10:25:36.857]                       class = class(workers))
[10:25:36.857]                     stop_if_not(is.finite(workers), workers >= 
[10:25:36.857]                       1L)
[10:25:36.857]                     if ((workers == 1L && !inherits(workers, 
[10:25:36.857]                       "AsIs")) || !supportsMulticore(warn = TRUE)) {
[10:25:36.857]                       if (default_workers) 
[10:25:36.857]                         supportsMulticore(warn = TRUE)
[10:25:36.857]                       return(sequential(..., envir = envir))
[10:25:36.857]                     }
[10:25:36.857]                     oopts <- options(mc.cores = workers)
[10:25:36.857]                     on.exit(options(oopts))
[10:25:36.857]                     future <- MulticoreFuture(..., workers = workers, 
[10:25:36.857]                       envir = envir)
[10:25:36.857]                     if (!future$lazy) 
[10:25:36.857]                       future <- run(future)
[10:25:36.857]                     invisible(future)
[10:25:36.857]                   }), .cleanup = FALSE, .init = FALSE)
[10:25:36.857]                 }
[10:25:36.857]             }
[10:25:36.857]         }
[10:25:36.857]     })
[10:25:36.857]     if (TRUE) {
[10:25:36.857]         base::sink(type = "output", split = FALSE)
[10:25:36.857]         if (TRUE) {
[10:25:36.857]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:25:36.857]         }
[10:25:36.857]         else {
[10:25:36.857]             ...future.result["stdout"] <- base::list(NULL)
[10:25:36.857]         }
[10:25:36.857]         base::close(...future.stdout)
[10:25:36.857]         ...future.stdout <- NULL
[10:25:36.857]     }
[10:25:36.857]     ...future.result$conditions <- ...future.conditions
[10:25:36.857]     ...future.result$finished <- base::Sys.time()
[10:25:36.857]     ...future.result
[10:25:36.857] }
[10:25:36.859] assign_globals() ...
[10:25:36.860] List of 1
[10:25:36.860]  $ ii: int 3
[10:25:36.860]  - attr(*, "where")=List of 1
[10:25:36.860]   ..$ ii:<environment: R_EmptyEnv> 
[10:25:36.860]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:25:36.860]  - attr(*, "resolved")= logi FALSE
[10:25:36.860]  - attr(*, "total_size")= num 56
[10:25:36.860]  - attr(*, "already-done")= logi TRUE
[10:25:36.864] - copied ‘ii’ to environment
[10:25:36.864] assign_globals() ... done
[10:25:36.864] requestCore(): workers = 2
[10:25:36.864] Poll #1 (0): usedCores() = 2, workers = 2
[10:25:36.875] result() for MulticoreFuture ...
[10:25:36.876] result() for MulticoreFuture ...
[10:25:36.876] result() for MulticoreFuture ... done
[10:25:36.876] result() for MulticoreFuture ... done
[10:25:36.876] result() for MulticoreFuture ...
[10:25:36.877] result() for MulticoreFuture ... done
[10:25:36.879] MulticoreFuture started
[10:25:36.880] - Launch lazy future ... done
[10:25:36.880] run() for ‘MulticoreFuture’ ... done
[10:25:36.881] plan(): Setting new future strategy stack:
[10:25:36.881] result() for MulticoreFuture ...
[10:25:36.881] result() for MulticoreFuture ... done
[10:25:36.882] result() for MulticoreFuture ...
[10:25:36.882] result() for MulticoreFuture ... done
[10:25:36.881] List of future strategies:
[10:25:36.881] 1. sequential:
[10:25:36.881]    - args: function (..., envir = parent.frame())
[10:25:36.881]    - tweaked: FALSE
[10:25:36.881]    - call: NULL
[10:25:36.882] result() for MulticoreFuture ...
[10:25:36.882] plan(): nbrOfWorkers() = 1
[10:25:36.885] plan(): Setting new future strategy stack:
[10:25:36.885] List of future strategies:
[10:25:36.885] 1. multicore:
[10:25:36.885]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[10:25:36.885]    - tweaked: FALSE
[10:25:36.885]    - call: plan(strategy)
[10:25:36.887] result() for MulticoreFuture ...
[10:25:36.887] result() for MulticoreFuture ... done
[10:25:36.887] signalConditions() ...
[10:25:36.888]  - include = ‘immediateCondition’
[10:25:36.888]  - exclude = 
[10:25:36.888]  - resignal = FALSE
[10:25:36.888]  - Number of conditions: 1
[10:25:36.888] signalConditions() ... done
[10:25:36.888] result() for MulticoreFuture ... done
[10:25:36.889] result() for MulticoreFuture ...
[10:25:36.889] result() for MulticoreFuture ... done
[10:25:36.889] signalConditions() ...
[10:25:36.889]  - include = ‘immediateCondition’
[10:25:36.890]  - exclude = 
[10:25:36.890]  - resignal = FALSE
[10:25:36.890]  - Number of conditions: 1
[10:25:36.890] signalConditions() ... done
[10:25:36.890] Future state: ‘finished’
[10:25:36.891] result() for MulticoreFuture ...
[10:25:36.891] result() for MulticoreFuture ... done
[10:25:36.891] signalConditions() ...
[10:25:36.891]  - include = ‘condition’
[10:25:36.892]  - exclude = ‘immediateCondition’
[10:25:36.892] plan(): nbrOfWorkers() = 2
[10:25:36.892]  - resignal = TRUE
[10:25:36.892]  - Number of conditions: 1
[10:25:36.892]  - Condition #1: ‘simpleError’, ‘error’, ‘condition’
[10:25:36.892] signalConditions() ... done
[10:25:36.893] result() for MulticoreFuture ...
[10:25:36.894] result() for MulticoreFuture ...
[10:25:36.894] result() for MulticoreFuture ... done
[10:25:36.894] result() for MulticoreFuture ... done
[10:25:36.894] result() for MulticoreFuture ...
[10:25:36.894] result() for MulticoreFuture ... done
Warning in get(var, envir = x, inherits = FALSE) :
  restarting interrupted promise evaluation
[10:25:36.895] result() for MulticoreFuture ...
[10:25:36.895] result() for MulticoreFuture ... done
[10:25:36.895] result() for MulticoreFuture ...
[10:25:36.896] result() for MulticoreFuture ... done
[10:25:36.896] signalConditions() ...
[10:25:36.896]  - include = ‘immediateCondition’
[10:25:36.896]  - exclude = 
[10:25:36.896]  - resignal = FALSE
[10:25:36.896]  - Number of conditions: 1
[10:25:36.896] signalConditions() ... done
[10:25:36.897] Future state: ‘finished’
[10:25:36.897] result() for MulticoreFuture ...
[10:25:36.897] result() for MulticoreFuture ... done
[10:25:36.897] signalConditions() ...
[10:25:36.897]  - include = ‘condition’
[10:25:36.897]  - exclude = ‘immediateCondition’
[10:25:36.897]  - resignal = TRUE
[10:25:36.897]  - Number of conditions: 1
[10:25:36.897]  - Condition #1: ‘simpleError’, ‘error’, ‘condition’
[10:25:36.898] signalConditions() ... done
Warning in get(var, envir = x, inherits = FALSE) :
  restarting interrupted promise evaluation
[10:25:36.898] result() for MulticoreFuture ...
[10:25:36.898] result() for MulticoreFuture ... done
[10:25:36.898] result() for MulticoreFuture ...
[10:25:36.898] result() for MulticoreFuture ... done
[10:25:36.899] signalConditions() ...
[10:25:36.899]  - include = ‘immediateCondition’
[10:25:36.899]  - exclude = 
[10:25:36.899]  - resignal = FALSE
[10:25:36.899]  - Number of conditions: 1
[10:25:36.902] signalConditions() ... done
[10:25:36.902] Future state: ‘finished’
[10:25:36.902] result() for MulticoreFuture ...
[10:25:36.902] result() for MulticoreFuture ... done
[10:25:36.902] signalConditions() ...
[10:25:36.902]  - include = ‘condition’
[10:25:36.903]  - exclude = ‘immediateCondition’
[10:25:36.903]  - resignal = TRUE
[10:25:36.903]  - Number of conditions: 1
[10:25:36.903]  - Condition #1: ‘simpleError’, ‘error’, ‘condition’
[10:25:36.903] signalConditions() ... done
** Future evaluation with a poor-man's "progress bar"
[10:25:36.904] getGlobalsAndPackages() ...
[10:25:36.904] Searching for globals...
[10:25:36.907] - globals found: [4] ‘{’, ‘cat’, ‘for’, ‘:’
[10:25:36.907] Searching for globals ... DONE
[10:25:36.907] Resolving globals: FALSE
[10:25:36.907] 
[10:25:36.907] 
[10:25:36.908] getGlobalsAndPackages() ... DONE
[10:25:36.908] run() for ‘Future’ ...
[10:25:36.908] - state: ‘created’
[10:25:36.908] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:25:36.912] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[10:25:36.912] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[10:25:36.912]   - Field: ‘label’
[10:25:36.913]   - Field: ‘local’
[10:25:36.913]   - Field: ‘owner’
[10:25:36.913]   - Field: ‘envir’
[10:25:36.913]   - Field: ‘workers’
[10:25:36.913]   - Field: ‘packages’
[10:25:36.913]   - Field: ‘gc’
[10:25:36.913]   - Field: ‘job’
[10:25:36.913]   - Field: ‘conditions’
[10:25:36.913]   - Field: ‘expr’
[10:25:36.914]   - Field: ‘uuid’
[10:25:36.914]   - Field: ‘seed’
[10:25:36.914]   - Field: ‘version’
[10:25:36.914]   - Field: ‘result’
[10:25:36.914]   - Field: ‘asynchronous’
[10:25:36.914]   - Field: ‘calls’
[10:25:36.914]   - Field: ‘globals’
[10:25:36.914]   - Field: ‘stdout’
[10:25:36.914]   - Field: ‘earlySignal’
[10:25:36.915]   - Field: ‘lazy’
[10:25:36.915]   - Field: ‘state’
[10:25:36.915] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[10:25:36.915] - Launch lazy future ...
[10:25:36.915] Packages needed by the future expression (n = 0): <none>
[10:25:36.915] Packages needed by future strategies (n = 0): <none>
[10:25:36.916] {
[10:25:36.916]     {
[10:25:36.916]         {
[10:25:36.916]             ...future.startTime <- base::Sys.time()
[10:25:36.916]             {
[10:25:36.916]                 {
[10:25:36.916]                   {
[10:25:36.916]                     {
[10:25:36.916]                       base::local({
[10:25:36.916]                         has_future <- base::requireNamespace("future", 
[10:25:36.916]                           quietly = TRUE)
[10:25:36.916]                         if (has_future) {
[10:25:36.916]                           ns <- base::getNamespace("future")
[10:25:36.916]                           version <- ns[[".package"]][["version"]]
[10:25:36.916]                           if (is.null(version)) 
[10:25:36.916]                             version <- utils::packageVersion("future")
[10:25:36.916]                         }
[10:25:36.916]                         else {
[10:25:36.916]                           version <- NULL
[10:25:36.916]                         }
[10:25:36.916]                         if (!has_future || version < "1.8.0") {
[10:25:36.916]                           info <- base::c(r_version = base::gsub("R version ", 
[10:25:36.916]                             "", base::R.version$version.string), 
[10:25:36.916]                             platform = base::sprintf("%s (%s-bit)", 
[10:25:36.916]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:25:36.916]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[10:25:36.916]                               "release", "version")], collapse = " "), 
[10:25:36.916]                             hostname = base::Sys.info()[["nodename"]])
[10:25:36.916]                           info <- base::sprintf("%s: %s", base::names(info), 
[10:25:36.916]                             info)
[10:25:36.916]                           info <- base::paste(info, collapse = "; ")
[10:25:36.916]                           if (!has_future) {
[10:25:36.916]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:25:36.916]                               info)
[10:25:36.916]                           }
[10:25:36.916]                           else {
[10:25:36.916]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:25:36.916]                               info, version)
[10:25:36.916]                           }
[10:25:36.916]                           base::stop(msg)
[10:25:36.916]                         }
[10:25:36.916]                       })
[10:25:36.916]                     }
[10:25:36.916]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[10:25:36.916]                     base::options(mc.cores = 1L)
[10:25:36.916]                   }
[10:25:36.916]                   options(future.plan = NULL)
[10:25:36.916]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:25:36.916]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:25:36.916]                 }
[10:25:36.916]                 ...future.workdir <- getwd()
[10:25:36.916]             }
[10:25:36.916]             ...future.oldOptions <- base::as.list(base::.Options)
[10:25:36.916]             ...future.oldEnvVars <- base::Sys.getenv()
[10:25:36.916]         }
[10:25:36.916]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:25:36.916]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[10:25:36.916]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:25:36.916]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:25:36.916]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:25:36.916]             future.stdout.windows.reencode = NULL, width = 80L)
[10:25:36.916]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:25:36.916]             base::names(...future.oldOptions))
[10:25:36.916]     }
[10:25:36.916]     if (FALSE) {
[10:25:36.916]     }
[10:25:36.916]     else {
[10:25:36.916]         if (TRUE) {
[10:25:36.916]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:25:36.916]                 open = "w")
[10:25:36.916]         }
[10:25:36.916]         else {
[10:25:36.916]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:25:36.916]                 windows = "NUL", "/dev/null"), open = "w")
[10:25:36.916]         }
[10:25:36.916]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:25:36.916]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:25:36.916]             base::sink(type = "output", split = FALSE)
[10:25:36.916]             base::close(...future.stdout)
[10:25:36.916]         }, add = TRUE)
[10:25:36.916]     }
[10:25:36.916]     ...future.frame <- base::sys.nframe()
[10:25:36.916]     ...future.conditions <- base::list()
[10:25:36.916]     ...future.rng <- base::globalenv()$.Random.seed
[10:25:36.916]     if (FALSE) {
[10:25:36.916]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:25:36.916]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:25:36.916]     }
[10:25:36.916]     ...future.result <- base::tryCatch({
[10:25:36.916]         base::withCallingHandlers({
[10:25:36.916]             ...future.value <- base::withVisible(base::local({
[10:25:36.916]                 withCallingHandlers({
[10:25:36.916]                   {
[10:25:36.916]                     cat("Processing: ")
[10:25:36.916]                     for (ii in 1:10) {
[10:25:36.916]                       cat(".")
[10:25:36.916]                     }
[10:25:36.916]                     cat(" [100%]\n")
[10:25:36.916]                     4
[10:25:36.916]                   }
[10:25:36.916]                 }, immediateCondition = function(cond) {
[10:25:36.916]                   save_rds <- function (object, pathname, ...) 
[10:25:36.916]                   {
[10:25:36.916]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[10:25:36.916]                     if (file_test("-f", pathname_tmp)) {
[10:25:36.916]                       fi_tmp <- file.info(pathname_tmp)
[10:25:36.916]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[10:25:36.916]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[10:25:36.916]                         fi_tmp[["mtime"]])
[10:25:36.916]                     }
[10:25:36.916]                     tryCatch({
[10:25:36.916]                       saveRDS(object, file = pathname_tmp, ...)
[10:25:36.916]                     }, error = function(ex) {
[10:25:36.916]                       msg <- conditionMessage(ex)
[10:25:36.916]                       fi_tmp <- file.info(pathname_tmp)
[10:25:36.916]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[10:25:36.916]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[10:25:36.916]                         fi_tmp[["mtime"]], msg)
[10:25:36.916]                       ex$message <- msg
[10:25:36.916]                       stop(ex)
[10:25:36.916]                     })
[10:25:36.916]                     stopifnot(file_test("-f", pathname_tmp))
[10:25:36.916]                     res <- file.rename(from = pathname_tmp, to = pathname)
[10:25:36.916]                     if (!res || file_test("-f", pathname_tmp)) {
[10:25:36.916]                       fi_tmp <- file.info(pathname_tmp)
[10:25:36.916]                       fi <- file.info(pathname)
[10:25:36.916]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[10:25:36.916]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[10:25:36.916]                         fi_tmp[["mtime"]], sQuote(pathname), 
[10:25:36.916]                         fi[["size"]], fi[["mtime"]])
[10:25:36.916]                       stop(msg)
[10:25:36.916]                     }
[10:25:36.916]                     invisible(pathname)
[10:25:36.916]                   }
[10:25:36.916]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[10:25:36.916]                     rootPath = tempdir()) 
[10:25:36.916]                   {
[10:25:36.916]                     obj <- list(time = Sys.time(), condition = cond)
[10:25:36.916]                     file <- tempfile(pattern = class(cond)[1], 
[10:25:36.916]                       tmpdir = path, fileext = ".rds")
[10:25:36.916]                     save_rds(obj, file)
[10:25:36.916]                   }
[10:25:36.916]                   saveImmediateCondition(cond, path = "/tmp/RtmpEdG1rj/.future/immediateConditions")
[10:25:36.916]                   muffleCondition <- function (cond, pattern = "^muffle") 
[10:25:36.916]                   {
[10:25:36.916]                     inherits <- base::inherits
[10:25:36.916]                     invokeRestart <- base::invokeRestart
[10:25:36.916]                     is.null <- base::is.null
[10:25:36.916]                     muffled <- FALSE
[10:25:36.916]                     if (inherits(cond, "message")) {
[10:25:36.916]                       muffled <- grepl(pattern, "muffleMessage")
[10:25:36.916]                       if (muffled) 
[10:25:36.916]                         invokeRestart("muffleMessage")
[10:25:36.916]                     }
[10:25:36.916]                     else if (inherits(cond, "warning")) {
[10:25:36.916]                       muffled <- grepl(pattern, "muffleWarning")
[10:25:36.916]                       if (muffled) 
[10:25:36.916]                         invokeRestart("muffleWarning")
[10:25:36.916]                     }
[10:25:36.916]                     else if (inherits(cond, "condition")) {
[10:25:36.916]                       if (!is.null(pattern)) {
[10:25:36.916]                         computeRestarts <- base::computeRestarts
[10:25:36.916]                         grepl <- base::grepl
[10:25:36.916]                         restarts <- computeRestarts(cond)
[10:25:36.916]                         for (restart in restarts) {
[10:25:36.916]                           name <- restart$name
[10:25:36.916]                           if (is.null(name)) 
[10:25:36.916]                             next
[10:25:36.916]                           if (!grepl(pattern, name)) 
[10:25:36.916]                             next
[10:25:36.916]                           invokeRestart(restart)
[10:25:36.916]                           muffled <- TRUE
[10:25:36.916]                           break
[10:25:36.916]                         }
[10:25:36.916]                       }
[10:25:36.916]                     }
[10:25:36.916]                     invisible(muffled)
[10:25:36.916]                   }
[10:25:36.916]                   muffleCondition(cond)
[10:25:36.916]                 })
[10:25:36.916]             }))
[10:25:36.916]             future::FutureResult(value = ...future.value$value, 
[10:25:36.916]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:25:36.916]                   ...future.rng), globalenv = if (FALSE) 
[10:25:36.916]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:25:36.916]                     ...future.globalenv.names))
[10:25:36.916]                 else NULL, started = ...future.startTime, version = "1.8")
[10:25:36.916]         }, condition = base::local({
[10:25:36.916]             c <- base::c
[10:25:36.916]             inherits <- base::inherits
[10:25:36.916]             invokeRestart <- base::invokeRestart
[10:25:36.916]             length <- base::length
[10:25:36.916]             list <- base::list
[10:25:36.916]             seq.int <- base::seq.int
[10:25:36.916]             signalCondition <- base::signalCondition
[10:25:36.916]             sys.calls <- base::sys.calls
[10:25:36.916]             `[[` <- base::`[[`
[10:25:36.916]             `+` <- base::`+`
[10:25:36.916]             `<<-` <- base::`<<-`
[10:25:36.916]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:25:36.916]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:25:36.916]                   3L)]
[10:25:36.916]             }
[10:25:36.916]             function(cond) {
[10:25:36.916]                 is_error <- inherits(cond, "error")
[10:25:36.916]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:25:36.916]                   NULL)
[10:25:36.916]                 if (is_error) {
[10:25:36.916]                   sessionInformation <- function() {
[10:25:36.916]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:25:36.916]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:25:36.916]                       search = base::search(), system = base::Sys.info())
[10:25:36.916]                   }
[10:25:36.916]                   ...future.conditions[[length(...future.conditions) + 
[10:25:36.916]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:25:36.916]                     cond$call), session = sessionInformation(), 
[10:25:36.916]                     timestamp = base::Sys.time(), signaled = 0L)
[10:25:36.916]                   signalCondition(cond)
[10:25:36.916]                 }
[10:25:36.916]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:25:36.916]                 "immediateCondition"))) {
[10:25:36.916]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:25:36.916]                   ...future.conditions[[length(...future.conditions) + 
[10:25:36.916]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:25:36.916]                   if (TRUE && !signal) {
[10:25:36.916]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:25:36.916]                     {
[10:25:36.916]                       inherits <- base::inherits
[10:25:36.916]                       invokeRestart <- base::invokeRestart
[10:25:36.916]                       is.null <- base::is.null
[10:25:36.916]                       muffled <- FALSE
[10:25:36.916]                       if (inherits(cond, "message")) {
[10:25:36.916]                         muffled <- grepl(pattern, "muffleMessage")
[10:25:36.916]                         if (muffled) 
[10:25:36.916]                           invokeRestart("muffleMessage")
[10:25:36.916]                       }
[10:25:36.916]                       else if (inherits(cond, "warning")) {
[10:25:36.916]                         muffled <- grepl(pattern, "muffleWarning")
[10:25:36.916]                         if (muffled) 
[10:25:36.916]                           invokeRestart("muffleWarning")
[10:25:36.916]                       }
[10:25:36.916]                       else if (inherits(cond, "condition")) {
[10:25:36.916]                         if (!is.null(pattern)) {
[10:25:36.916]                           computeRestarts <- base::computeRestarts
[10:25:36.916]                           grepl <- base::grepl
[10:25:36.916]                           restarts <- computeRestarts(cond)
[10:25:36.916]                           for (restart in restarts) {
[10:25:36.916]                             name <- restart$name
[10:25:36.916]                             if (is.null(name)) 
[10:25:36.916]                               next
[10:25:36.916]                             if (!grepl(pattern, name)) 
[10:25:36.916]                               next
[10:25:36.916]                             invokeRestart(restart)
[10:25:36.916]                             muffled <- TRUE
[10:25:36.916]                             break
[10:25:36.916]                           }
[10:25:36.916]                         }
[10:25:36.916]                       }
[10:25:36.916]                       invisible(muffled)
[10:25:36.916]                     }
[10:25:36.916]                     muffleCondition(cond, pattern = "^muffle")
[10:25:36.916]                   }
[10:25:36.916]                 }
[10:25:36.916]                 else {
[10:25:36.916]                   if (TRUE) {
[10:25:36.916]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:25:36.916]                     {
[10:25:36.916]                       inherits <- base::inherits
[10:25:36.916]                       invokeRestart <- base::invokeRestart
[10:25:36.916]                       is.null <- base::is.null
[10:25:36.916]                       muffled <- FALSE
[10:25:36.916]                       if (inherits(cond, "message")) {
[10:25:36.916]                         muffled <- grepl(pattern, "muffleMessage")
[10:25:36.916]                         if (muffled) 
[10:25:36.916]                           invokeRestart("muffleMessage")
[10:25:36.916]                       }
[10:25:36.916]                       else if (inherits(cond, "warning")) {
[10:25:36.916]                         muffled <- grepl(pattern, "muffleWarning")
[10:25:36.916]                         if (muffled) 
[10:25:36.916]                           invokeRestart("muffleWarning")
[10:25:36.916]                       }
[10:25:36.916]                       else if (inherits(cond, "condition")) {
[10:25:36.916]                         if (!is.null(pattern)) {
[10:25:36.916]                           computeRestarts <- base::computeRestarts
[10:25:36.916]                           grepl <- base::grepl
[10:25:36.916]                           restarts <- computeRestarts(cond)
[10:25:36.916]                           for (restart in restarts) {
[10:25:36.916]                             name <- restart$name
[10:25:36.916]                             if (is.null(name)) 
[10:25:36.916]                               next
[10:25:36.916]                             if (!grepl(pattern, name)) 
[10:25:36.916]                               next
[10:25:36.916]                             invokeRestart(restart)
[10:25:36.916]                             muffled <- TRUE
[10:25:36.916]                             break
[10:25:36.916]                           }
[10:25:36.916]                         }
[10:25:36.916]                       }
[10:25:36.916]                       invisible(muffled)
[10:25:36.916]                     }
[10:25:36.916]                     muffleCondition(cond, pattern = "^muffle")
[10:25:36.916]                   }
[10:25:36.916]                 }
[10:25:36.916]             }
[10:25:36.916]         }))
[10:25:36.916]     }, error = function(ex) {
[10:25:36.916]         base::structure(base::list(value = NULL, visible = NULL, 
[10:25:36.916]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:25:36.916]                 ...future.rng), started = ...future.startTime, 
[10:25:36.916]             finished = Sys.time(), session_uuid = NA_character_, 
[10:25:36.916]             version = "1.8"), class = "FutureResult")
[10:25:36.916]     }, finally = {
[10:25:36.916]         if (!identical(...future.workdir, getwd())) 
[10:25:36.916]             setwd(...future.workdir)
[10:25:36.916]         {
[10:25:36.916]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:25:36.916]                 ...future.oldOptions$nwarnings <- NULL
[10:25:36.916]             }
[10:25:36.916]             base::options(...future.oldOptions)
[10:25:36.916]             if (.Platform$OS.type == "windows") {
[10:25:36.916]                 old_names <- names(...future.oldEnvVars)
[10:25:36.916]                 envs <- base::Sys.getenv()
[10:25:36.916]                 names <- names(envs)
[10:25:36.916]                 common <- intersect(names, old_names)
[10:25:36.916]                 added <- setdiff(names, old_names)
[10:25:36.916]                 removed <- setdiff(old_names, names)
[10:25:36.916]                 changed <- common[...future.oldEnvVars[common] != 
[10:25:36.916]                   envs[common]]
[10:25:36.916]                 NAMES <- toupper(changed)
[10:25:36.916]                 args <- list()
[10:25:36.916]                 for (kk in seq_along(NAMES)) {
[10:25:36.916]                   name <- changed[[kk]]
[10:25:36.916]                   NAME <- NAMES[[kk]]
[10:25:36.916]                   if (name != NAME && is.element(NAME, old_names)) 
[10:25:36.916]                     next
[10:25:36.916]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:25:36.916]                 }
[10:25:36.916]                 NAMES <- toupper(added)
[10:25:36.916]                 for (kk in seq_along(NAMES)) {
[10:25:36.916]                   name <- added[[kk]]
[10:25:36.916]                   NAME <- NAMES[[kk]]
[10:25:36.916]                   if (name != NAME && is.element(NAME, old_names)) 
[10:25:36.916]                     next
[10:25:36.916]                   args[[name]] <- ""
[10:25:36.916]                 }
[10:25:36.916]                 NAMES <- toupper(removed)
[10:25:36.916]                 for (kk in seq_along(NAMES)) {
[10:25:36.916]                   name <- removed[[kk]]
[10:25:36.916]                   NAME <- NAMES[[kk]]
[10:25:36.916]                   if (name != NAME && is.element(NAME, old_names)) 
[10:25:36.916]                     next
[10:25:36.916]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:25:36.916]                 }
[10:25:36.916]                 if (length(args) > 0) 
[10:25:36.916]                   base::do.call(base::Sys.setenv, args = args)
[10:25:36.916]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:25:36.916]             }
[10:25:36.916]             else {
[10:25:36.916]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:25:36.916]             }
[10:25:36.916]             {
[10:25:36.916]                 if (base::length(...future.futureOptionsAdded) > 
[10:25:36.916]                   0L) {
[10:25:36.916]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:25:36.916]                   base::names(opts) <- ...future.futureOptionsAdded
[10:25:36.916]                   base::options(opts)
[10:25:36.916]                 }
[10:25:36.916]                 {
[10:25:36.916]                   {
[10:25:36.916]                     base::options(mc.cores = ...future.mc.cores.old)
[10:25:36.916]                     NULL
[10:25:36.916]                   }
[10:25:36.916]                   options(future.plan = NULL)
[10:25:36.916]                   if (is.na(NA_character_)) 
[10:25:36.916]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:25:36.916]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:25:36.916]                   future::plan(list(function (..., workers = availableCores(constraints = "multicore"), 
[10:25:36.916]                     envir = parent.frame()) 
[10:25:36.916]                   {
[10:25:36.916]                     default_workers <- missing(workers)
[10:25:36.916]                     if (is.function(workers)) 
[10:25:36.916]                       workers <- workers()
[10:25:36.916]                     workers <- structure(as.integer(workers), 
[10:25:36.916]                       class = class(workers))
[10:25:36.916]                     stop_if_not(is.finite(workers), workers >= 
[10:25:36.916]                       1L)
[10:25:36.916]                     if ((workers == 1L && !inherits(workers, 
[10:25:36.916]                       "AsIs")) || !supportsMulticore(warn = TRUE)) {
[10:25:36.916]                       if (default_workers) 
[10:25:36.916]                         supportsMulticore(warn = TRUE)
[10:25:36.916]                       return(sequential(..., envir = envir))
[10:25:36.916]                     }
[10:25:36.916]                     oopts <- options(mc.cores = workers)
[10:25:36.916]                     on.exit(options(oopts))
[10:25:36.916]                     future <- MulticoreFuture(..., workers = workers, 
[10:25:36.916]                       envir = envir)
[10:25:36.916]                     if (!future$lazy) 
[10:25:36.916]                       future <- run(future)
[10:25:36.916]                     invisible(future)
[10:25:36.916]                   }), .cleanup = FALSE, .init = FALSE)
[10:25:36.916]                 }
[10:25:36.916]             }
[10:25:36.916]         }
[10:25:36.916]     })
[10:25:36.916]     if (TRUE) {
[10:25:36.916]         base::sink(type = "output", split = FALSE)
[10:25:36.916]         if (TRUE) {
[10:25:36.916]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:25:36.916]         }
[10:25:36.916]         else {
[10:25:36.916]             ...future.result["stdout"] <- base::list(NULL)
[10:25:36.916]         }
[10:25:36.916]         base::close(...future.stdout)
[10:25:36.916]         ...future.stdout <- NULL
[10:25:36.916]     }
[10:25:36.916]     ...future.result$conditions <- ...future.conditions
[10:25:36.916]     ...future.result$finished <- base::Sys.time()
[10:25:36.916]     ...future.result
[10:25:36.916] }
[10:25:36.918] requestCore(): workers = 2
[10:25:36.920] MulticoreFuture started
[10:25:36.920] - Launch lazy future ... done
[10:25:36.921] run() for ‘MulticoreFuture’ ... done
** Collecting results
v1 = 1
v2 = 2
[10:25:36.921] plan(): Setting new future strategy stack:
Warning in sprintf(...) : restarting interrupted promise evaluation
[10:25:36.922] result() for MulticoreFuture ...
[10:25:36.922] result() for MulticoreFuture ... done
[10:25:36.922] result() for MulticoreFuture ...
[10:25:36.921] List of future strategies:
[10:25:36.921] 1. sequential:
[10:25:36.921]    - args: function (..., envir = parent.frame())
[10:25:36.921]    - tweaked: FALSE
[10:25:36.921]    - call: NULL
[10:25:36.922] result() for MulticoreFuture ... done
[10:25:36.922] plan(): nbrOfWorkers() = 1
[10:25:36.922] signalConditions() ...
[10:25:36.922]  - include = ‘immediateCondition’
[10:25:36.923]  - exclude = 
[10:25:36.923]  - resignal = FALSE
[10:25:36.923]  - Number of conditions: 1
[10:25:36.923] signalConditions() ... done
[10:25:36.923] Future state: ‘finished’
[10:25:36.923] result() for MulticoreFuture ...
[10:25:36.924] result() for MulticoreFuture ... done
[10:25:36.924] signalConditions() ...
[10:25:36.924]  - include = ‘condition’
[10:25:36.924]  - exclude = ‘immediateCondition’
[10:25:36.924]  - resignal = TRUE
[10:25:36.924] plan(): Setting new future strategy stack:
[10:25:36.924]  - Number of conditions: 1
[10:25:36.924]  - Condition #1: ‘simpleError’, ‘error’, ‘condition’
[10:25:36.924] List of future strategies:
[10:25:36.924] 1. multicore:
[10:25:36.924]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[10:25:36.924]    - tweaked: FALSE
[10:25:36.924]    - call: plan(strategy)
[10:25:36.925] signalConditions() ... done
v3: <simpleError> (as expect)
[10:25:36.925] result() for MulticoreFuture ...
[10:25:36.929] plan(): nbrOfWorkers() = 2
[10:25:36.930] result() for MulticoreFuture ...
[10:25:36.930] result() for MulticoreFuture ... done
[10:25:36.930] result() for MulticoreFuture ... done
[10:25:36.930] result() for MulticoreFuture ...
[10:25:36.930] result() for MulticoreFuture ... done
Processing: .......... [100%]
v4 = 4
** Left-to-right and right-to-left future assignments
[10:25:36.931] getGlobalsAndPackages() ...
[10:25:36.931] Searching for globals...
[10:25:36.932] 
[10:25:36.932] Searching for globals ... DONE
[10:25:36.932] - globals: [0] <none>
[10:25:36.932] getGlobalsAndPackages() ... DONE
[10:25:36.932] run() for ‘Future’ ...
[10:25:36.932] - state: ‘created’
[10:25:36.932] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:25:36.937] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[10:25:36.937] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[10:25:36.937]   - Field: ‘label’
[10:25:36.937]   - Field: ‘local’
[10:25:36.937]   - Field: ‘owner’
[10:25:36.937]   - Field: ‘envir’
[10:25:36.937]   - Field: ‘workers’
[10:25:36.938]   - Field: ‘packages’
[10:25:36.938]   - Field: ‘gc’
[10:25:36.938]   - Field: ‘job’
[10:25:36.938]   - Field: ‘conditions’
[10:25:36.938]   - Field: ‘expr’
[10:25:36.938]   - Field: ‘uuid’
[10:25:36.938]   - Field: ‘seed’
[10:25:36.938]   - Field: ‘version’
[10:25:36.938]   - Field: ‘result’
[10:25:36.939]   - Field: ‘asynchronous’
[10:25:36.939]   - Field: ‘calls’
[10:25:36.939]   - Field: ‘globals’
[10:25:36.939]   - Field: ‘stdout’
[10:25:36.939]   - Field: ‘earlySignal’
[10:25:36.939]   - Field: ‘lazy’
[10:25:36.939]   - Field: ‘state’
[10:25:36.939] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[10:25:36.940] - Launch lazy future ...
[10:25:36.942] Packages needed by the future expression (n = 0): <none>
[10:25:36.942] Packages needed by future strategies (n = 0): <none>
[10:25:36.943] {
[10:25:36.943]     {
[10:25:36.943]         {
[10:25:36.943]             ...future.startTime <- base::Sys.time()
[10:25:36.943]             {
[10:25:36.943]                 {
[10:25:36.943]                   {
[10:25:36.943]                     {
[10:25:36.943]                       base::local({
[10:25:36.943]                         has_future <- base::requireNamespace("future", 
[10:25:36.943]                           quietly = TRUE)
[10:25:36.943]                         if (has_future) {
[10:25:36.943]                           ns <- base::getNamespace("future")
[10:25:36.943]                           version <- ns[[".package"]][["version"]]
[10:25:36.943]                           if (is.null(version)) 
[10:25:36.943]                             version <- utils::packageVersion("future")
[10:25:36.943]                         }
[10:25:36.943]                         else {
[10:25:36.943]                           version <- NULL
[10:25:36.943]                         }
[10:25:36.943]                         if (!has_future || version < "1.8.0") {
[10:25:36.943]                           info <- base::c(r_version = base::gsub("R version ", 
[10:25:36.943]                             "", base::R.version$version.string), 
[10:25:36.943]                             platform = base::sprintf("%s (%s-bit)", 
[10:25:36.943]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:25:36.943]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[10:25:36.943]                               "release", "version")], collapse = " "), 
[10:25:36.943]                             hostname = base::Sys.info()[["nodename"]])
[10:25:36.943]                           info <- base::sprintf("%s: %s", base::names(info), 
[10:25:36.943]                             info)
[10:25:36.943]                           info <- base::paste(info, collapse = "; ")
[10:25:36.943]                           if (!has_future) {
[10:25:36.943]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:25:36.943]                               info)
[10:25:36.943]                           }
[10:25:36.943]                           else {
[10:25:36.943]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:25:36.943]                               info, version)
[10:25:36.943]                           }
[10:25:36.943]                           base::stop(msg)
[10:25:36.943]                         }
[10:25:36.943]                       })
[10:25:36.943]                     }
[10:25:36.943]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[10:25:36.943]                     base::options(mc.cores = 1L)
[10:25:36.943]                   }
[10:25:36.943]                   options(future.plan = NULL)
[10:25:36.943]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:25:36.943]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:25:36.943]                 }
[10:25:36.943]                 ...future.workdir <- getwd()
[10:25:36.943]             }
[10:25:36.943]             ...future.oldOptions <- base::as.list(base::.Options)
[10:25:36.943]             ...future.oldEnvVars <- base::Sys.getenv()
[10:25:36.943]         }
[10:25:36.943]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:25:36.943]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[10:25:36.943]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:25:36.943]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:25:36.943]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:25:36.943]             future.stdout.windows.reencode = NULL, width = 80L)
[10:25:36.943]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:25:36.943]             base::names(...future.oldOptions))
[10:25:36.943]     }
[10:25:36.943]     if (FALSE) {
[10:25:36.943]     }
[10:25:36.943]     else {
[10:25:36.943]         if (TRUE) {
[10:25:36.943]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:25:36.943]                 open = "w")
[10:25:36.943]         }
[10:25:36.943]         else {
[10:25:36.943]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:25:36.943]                 windows = "NUL", "/dev/null"), open = "w")
[10:25:36.943]         }
[10:25:36.943]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:25:36.943]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:25:36.943]             base::sink(type = "output", split = FALSE)
[10:25:36.943]             base::close(...future.stdout)
[10:25:36.943]         }, add = TRUE)
[10:25:36.943]     }
[10:25:36.943]     ...future.frame <- base::sys.nframe()
[10:25:36.943]     ...future.conditions <- base::list()
[10:25:36.943]     ...future.rng <- base::globalenv()$.Random.seed
[10:25:36.943]     if (FALSE) {
[10:25:36.943]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:25:36.943]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:25:36.943]     }
[10:25:36.943]     ...future.result <- base::tryCatch({
[10:25:36.943]         base::withCallingHandlers({
[10:25:36.943]             ...future.value <- base::withVisible(base::local({
[10:25:36.943]                 withCallingHandlers({
[10:25:36.943]                   1
[10:25:36.943]                 }, immediateCondition = function(cond) {
[10:25:36.943]                   save_rds <- function (object, pathname, ...) 
[10:25:36.943]                   {
[10:25:36.943]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[10:25:36.943]                     if (file_test("-f", pathname_tmp)) {
[10:25:36.943]                       fi_tmp <- file.info(pathname_tmp)
[10:25:36.943]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[10:25:36.943]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[10:25:36.943]                         fi_tmp[["mtime"]])
[10:25:36.943]                     }
[10:25:36.943]                     tryCatch({
[10:25:36.943]                       saveRDS(object, file = pathname_tmp, ...)
[10:25:36.943]                     }, error = function(ex) {
[10:25:36.943]                       msg <- conditionMessage(ex)
[10:25:36.943]                       fi_tmp <- file.info(pathname_tmp)
[10:25:36.943]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[10:25:36.943]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[10:25:36.943]                         fi_tmp[["mtime"]], msg)
[10:25:36.943]                       ex$message <- msg
[10:25:36.943]                       stop(ex)
[10:25:36.943]                     })
[10:25:36.943]                     stopifnot(file_test("-f", pathname_tmp))
[10:25:36.943]                     res <- file.rename(from = pathname_tmp, to = pathname)
[10:25:36.943]                     if (!res || file_test("-f", pathname_tmp)) {
[10:25:36.943]                       fi_tmp <- file.info(pathname_tmp)
[10:25:36.943]                       fi <- file.info(pathname)
[10:25:36.943]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[10:25:36.943]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[10:25:36.943]                         fi_tmp[["mtime"]], sQuote(pathname), 
[10:25:36.943]                         fi[["size"]], fi[["mtime"]])
[10:25:36.943]                       stop(msg)
[10:25:36.943]                     }
[10:25:36.943]                     invisible(pathname)
[10:25:36.943]                   }
[10:25:36.943]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[10:25:36.943]                     rootPath = tempdir()) 
[10:25:36.943]                   {
[10:25:36.943]                     obj <- list(time = Sys.time(), condition = cond)
[10:25:36.943]                     file <- tempfile(pattern = class(cond)[1], 
[10:25:36.943]                       tmpdir = path, fileext = ".rds")
[10:25:36.943]                     save_rds(obj, file)
[10:25:36.943]                   }
[10:25:36.943]                   saveImmediateCondition(cond, path = "/tmp/RtmpEdG1rj/.future/immediateConditions")
[10:25:36.943]                   muffleCondition <- function (cond, pattern = "^muffle") 
[10:25:36.943]                   {
[10:25:36.943]                     inherits <- base::inherits
[10:25:36.943]                     invokeRestart <- base::invokeRestart
[10:25:36.943]                     is.null <- base::is.null
[10:25:36.943]                     muffled <- FALSE
[10:25:36.943]                     if (inherits(cond, "message")) {
[10:25:36.943]                       muffled <- grepl(pattern, "muffleMessage")
[10:25:36.943]                       if (muffled) 
[10:25:36.943]                         invokeRestart("muffleMessage")
[10:25:36.943]                     }
[10:25:36.943]                     else if (inherits(cond, "warning")) {
[10:25:36.943]                       muffled <- grepl(pattern, "muffleWarning")
[10:25:36.943]                       if (muffled) 
[10:25:36.943]                         invokeRestart("muffleWarning")
[10:25:36.943]                     }
[10:25:36.943]                     else if (inherits(cond, "condition")) {
[10:25:36.943]                       if (!is.null(pattern)) {
[10:25:36.943]                         computeRestarts <- base::computeRestarts
[10:25:36.943]                         grepl <- base::grepl
[10:25:36.943]                         restarts <- computeRestarts(cond)
[10:25:36.943]                         for (restart in restarts) {
[10:25:36.943]                           name <- restart$name
[10:25:36.943]                           if (is.null(name)) 
[10:25:36.943]                             next
[10:25:36.943]                           if (!grepl(pattern, name)) 
[10:25:36.943]                             next
[10:25:36.943]                           invokeRestart(restart)
[10:25:36.943]                           muffled <- TRUE
[10:25:36.943]                           break
[10:25:36.943]                         }
[10:25:36.943]                       }
[10:25:36.943]                     }
[10:25:36.943]                     invisible(muffled)
[10:25:36.943]                   }
[10:25:36.943]                   muffleCondition(cond)
[10:25:36.943]                 })
[10:25:36.943]             }))
[10:25:36.943]             future::FutureResult(value = ...future.value$value, 
[10:25:36.943]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:25:36.943]                   ...future.rng), globalenv = if (FALSE) 
[10:25:36.943]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:25:36.943]                     ...future.globalenv.names))
[10:25:36.943]                 else NULL, started = ...future.startTime, version = "1.8")
[10:25:36.943]         }, condition = base::local({
[10:25:36.943]             c <- base::c
[10:25:36.943]             inherits <- base::inherits
[10:25:36.943]             invokeRestart <- base::invokeRestart
[10:25:36.943]             length <- base::length
[10:25:36.943]             list <- base::list
[10:25:36.943]             seq.int <- base::seq.int
[10:25:36.943]             signalCondition <- base::signalCondition
[10:25:36.943]             sys.calls <- base::sys.calls
[10:25:36.943]             `[[` <- base::`[[`
[10:25:36.943]             `+` <- base::`+`
[10:25:36.943]             `<<-` <- base::`<<-`
[10:25:36.943]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:25:36.943]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:25:36.943]                   3L)]
[10:25:36.943]             }
[10:25:36.943]             function(cond) {
[10:25:36.943]                 is_error <- inherits(cond, "error")
[10:25:36.943]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:25:36.943]                   NULL)
[10:25:36.943]                 if (is_error) {
[10:25:36.943]                   sessionInformation <- function() {
[10:25:36.943]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:25:36.943]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:25:36.943]                       search = base::search(), system = base::Sys.info())
[10:25:36.943]                   }
[10:25:36.943]                   ...future.conditions[[length(...future.conditions) + 
[10:25:36.943]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:25:36.943]                     cond$call), session = sessionInformation(), 
[10:25:36.943]                     timestamp = base::Sys.time(), signaled = 0L)
[10:25:36.943]                   signalCondition(cond)
[10:25:36.943]                 }
[10:25:36.943]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:25:36.943]                 "immediateCondition"))) {
[10:25:36.943]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:25:36.943]                   ...future.conditions[[length(...future.conditions) + 
[10:25:36.943]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:25:36.943]                   if (TRUE && !signal) {
[10:25:36.943]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:25:36.943]                     {
[10:25:36.943]                       inherits <- base::inherits
[10:25:36.943]                       invokeRestart <- base::invokeRestart
[10:25:36.943]                       is.null <- base::is.null
[10:25:36.943]                       muffled <- FALSE
[10:25:36.943]                       if (inherits(cond, "message")) {
[10:25:36.943]                         muffled <- grepl(pattern, "muffleMessage")
[10:25:36.943]                         if (muffled) 
[10:25:36.943]                           invokeRestart("muffleMessage")
[10:25:36.943]                       }
[10:25:36.943]                       else if (inherits(cond, "warning")) {
[10:25:36.943]                         muffled <- grepl(pattern, "muffleWarning")
[10:25:36.943]                         if (muffled) 
[10:25:36.943]                           invokeRestart("muffleWarning")
[10:25:36.943]                       }
[10:25:36.943]                       else if (inherits(cond, "condition")) {
[10:25:36.943]                         if (!is.null(pattern)) {
[10:25:36.943]                           computeRestarts <- base::computeRestarts
[10:25:36.943]                           grepl <- base::grepl
[10:25:36.943]                           restarts <- computeRestarts(cond)
[10:25:36.943]                           for (restart in restarts) {
[10:25:36.943]                             name <- restart$name
[10:25:36.943]                             if (is.null(name)) 
[10:25:36.943]                               next
[10:25:36.943]                             if (!grepl(pattern, name)) 
[10:25:36.943]                               next
[10:25:36.943]                             invokeRestart(restart)
[10:25:36.943]                             muffled <- TRUE
[10:25:36.943]                             break
[10:25:36.943]                           }
[10:25:36.943]                         }
[10:25:36.943]                       }
[10:25:36.943]                       invisible(muffled)
[10:25:36.943]                     }
[10:25:36.943]                     muffleCondition(cond, pattern = "^muffle")
[10:25:36.943]                   }
[10:25:36.943]                 }
[10:25:36.943]                 else {
[10:25:36.943]                   if (TRUE) {
[10:25:36.943]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:25:36.943]                     {
[10:25:36.943]                       inherits <- base::inherits
[10:25:36.943]                       invokeRestart <- base::invokeRestart
[10:25:36.943]                       is.null <- base::is.null
[10:25:36.943]                       muffled <- FALSE
[10:25:36.943]                       if (inherits(cond, "message")) {
[10:25:36.943]                         muffled <- grepl(pattern, "muffleMessage")
[10:25:36.943]                         if (muffled) 
[10:25:36.943]                           invokeRestart("muffleMessage")
[10:25:36.943]                       }
[10:25:36.943]                       else if (inherits(cond, "warning")) {
[10:25:36.943]                         muffled <- grepl(pattern, "muffleWarning")
[10:25:36.943]                         if (muffled) 
[10:25:36.943]                           invokeRestart("muffleWarning")
[10:25:36.943]                       }
[10:25:36.943]                       else if (inherits(cond, "condition")) {
[10:25:36.943]                         if (!is.null(pattern)) {
[10:25:36.943]                           computeRestarts <- base::computeRestarts
[10:25:36.943]                           grepl <- base::grepl
[10:25:36.943]                           restarts <- computeRestarts(cond)
[10:25:36.943]                           for (restart in restarts) {
[10:25:36.943]                             name <- restart$name
[10:25:36.943]                             if (is.null(name)) 
[10:25:36.943]                               next
[10:25:36.943]                             if (!grepl(pattern, name)) 
[10:25:36.943]                               next
[10:25:36.943]                             invokeRestart(restart)
[10:25:36.943]                             muffled <- TRUE
[10:25:36.943]                             break
[10:25:36.943]                           }
[10:25:36.943]                         }
[10:25:36.943]                       }
[10:25:36.943]                       invisible(muffled)
[10:25:36.943]                     }
[10:25:36.943]                     muffleCondition(cond, pattern = "^muffle")
[10:25:36.943]                   }
[10:25:36.943]                 }
[10:25:36.943]             }
[10:25:36.943]         }))
[10:25:36.943]     }, error = function(ex) {
[10:25:36.943]         base::structure(base::list(value = NULL, visible = NULL, 
[10:25:36.943]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:25:36.943]                 ...future.rng), started = ...future.startTime, 
[10:25:36.943]             finished = Sys.time(), session_uuid = NA_character_, 
[10:25:36.943]             version = "1.8"), class = "FutureResult")
[10:25:36.943]     }, finally = {
[10:25:36.943]         if (!identical(...future.workdir, getwd())) 
[10:25:36.943]             setwd(...future.workdir)
[10:25:36.943]         {
[10:25:36.943]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:25:36.943]                 ...future.oldOptions$nwarnings <- NULL
[10:25:36.943]             }
[10:25:36.943]             base::options(...future.oldOptions)
[10:25:36.943]             if (.Platform$OS.type == "windows") {
[10:25:36.943]                 old_names <- names(...future.oldEnvVars)
[10:25:36.943]                 envs <- base::Sys.getenv()
[10:25:36.943]                 names <- names(envs)
[10:25:36.943]                 common <- intersect(names, old_names)
[10:25:36.943]                 added <- setdiff(names, old_names)
[10:25:36.943]                 removed <- setdiff(old_names, names)
[10:25:36.943]                 changed <- common[...future.oldEnvVars[common] != 
[10:25:36.943]                   envs[common]]
[10:25:36.943]                 NAMES <- toupper(changed)
[10:25:36.943]                 args <- list()
[10:25:36.943]                 for (kk in seq_along(NAMES)) {
[10:25:36.943]                   name <- changed[[kk]]
[10:25:36.943]                   NAME <- NAMES[[kk]]
[10:25:36.943]                   if (name != NAME && is.element(NAME, old_names)) 
[10:25:36.943]                     next
[10:25:36.943]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:25:36.943]                 }
[10:25:36.943]                 NAMES <- toupper(added)
[10:25:36.943]                 for (kk in seq_along(NAMES)) {
[10:25:36.943]                   name <- added[[kk]]
[10:25:36.943]                   NAME <- NAMES[[kk]]
[10:25:36.943]                   if (name != NAME && is.element(NAME, old_names)) 
[10:25:36.943]                     next
[10:25:36.943]                   args[[name]] <- ""
[10:25:36.943]                 }
[10:25:36.943]                 NAMES <- toupper(removed)
[10:25:36.943]                 for (kk in seq_along(NAMES)) {
[10:25:36.943]                   name <- removed[[kk]]
[10:25:36.943]                   NAME <- NAMES[[kk]]
[10:25:36.943]                   if (name != NAME && is.element(NAME, old_names)) 
[10:25:36.943]                     next
[10:25:36.943]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:25:36.943]                 }
[10:25:36.943]                 if (length(args) > 0) 
[10:25:36.943]                   base::do.call(base::Sys.setenv, args = args)
[10:25:36.943]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:25:36.943]             }
[10:25:36.943]             else {
[10:25:36.943]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:25:36.943]             }
[10:25:36.943]             {
[10:25:36.943]                 if (base::length(...future.futureOptionsAdded) > 
[10:25:36.943]                   0L) {
[10:25:36.943]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:25:36.943]                   base::names(opts) <- ...future.futureOptionsAdded
[10:25:36.943]                   base::options(opts)
[10:25:36.943]                 }
[10:25:36.943]                 {
[10:25:36.943]                   {
[10:25:36.943]                     base::options(mc.cores = ...future.mc.cores.old)
[10:25:36.943]                     NULL
[10:25:36.943]                   }
[10:25:36.943]                   options(future.plan = NULL)
[10:25:36.943]                   if (is.na(NA_character_)) 
[10:25:36.943]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:25:36.943]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:25:36.943]                   future::plan(list(function (..., workers = availableCores(constraints = "multicore"), 
[10:25:36.943]                     envir = parent.frame()) 
[10:25:36.943]                   {
[10:25:36.943]                     default_workers <- missing(workers)
[10:25:36.943]                     if (is.function(workers)) 
[10:25:36.943]                       workers <- workers()
[10:25:36.943]                     workers <- structure(as.integer(workers), 
[10:25:36.943]                       class = class(workers))
[10:25:36.943]                     stop_if_not(is.finite(workers), workers >= 
[10:25:36.943]                       1L)
[10:25:36.943]                     if ((workers == 1L && !inherits(workers, 
[10:25:36.943]                       "AsIs")) || !supportsMulticore(warn = TRUE)) {
[10:25:36.943]                       if (default_workers) 
[10:25:36.943]                         supportsMulticore(warn = TRUE)
[10:25:36.943]                       return(sequential(..., envir = envir))
[10:25:36.943]                     }
[10:25:36.943]                     oopts <- options(mc.cores = workers)
[10:25:36.943]                     on.exit(options(oopts))
[10:25:36.943]                     future <- MulticoreFuture(..., workers = workers, 
[10:25:36.943]                       envir = envir)
[10:25:36.943]                     if (!future$lazy) 
[10:25:36.943]                       future <- run(future)
[10:25:36.943]                     invisible(future)
[10:25:36.943]                   }), .cleanup = FALSE, .init = FALSE)
[10:25:36.943]                 }
[10:25:36.943]             }
[10:25:36.943]         }
[10:25:36.943]     })
[10:25:36.943]     if (TRUE) {
[10:25:36.943]         base::sink(type = "output", split = FALSE)
[10:25:36.943]         if (TRUE) {
[10:25:36.943]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:25:36.943]         }
[10:25:36.943]         else {
[10:25:36.943]             ...future.result["stdout"] <- base::list(NULL)
[10:25:36.943]         }
[10:25:36.943]         base::close(...future.stdout)
[10:25:36.943]         ...future.stdout <- NULL
[10:25:36.943]     }
[10:25:36.943]     ...future.result$conditions <- ...future.conditions
[10:25:36.943]     ...future.result$finished <- base::Sys.time()
[10:25:36.943]     ...future.result
[10:25:36.943] }
[10:25:36.945] requestCore(): workers = 2
[10:25:36.947] MulticoreFuture started
[10:25:36.947] - Launch lazy future ... done
[10:25:36.948] run() for ‘MulticoreFuture’ ... done
[10:25:36.948] plan(): Setting new future strategy stack:
[10:25:36.948] result() for MulticoreFuture ...
[10:25:36.948] List of future strategies:
[10:25:36.948] 1. sequential:
[10:25:36.948]    - args: function (..., envir = parent.frame())
[10:25:36.948]    - tweaked: FALSE
[10:25:36.948]    - call: NULL
[10:25:36.949] plan(): nbrOfWorkers() = 1
[10:25:36.951] plan(): Setting new future strategy stack:
[10:25:36.952] List of future strategies:
[10:25:36.952] 1. multicore:
[10:25:36.952]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[10:25:36.952]    - tweaked: FALSE
[10:25:36.952]    - call: plan(strategy)
[10:25:36.957] plan(): nbrOfWorkers() = 2
[10:25:36.958] result() for MulticoreFuture ...
[10:25:36.958] result() for MulticoreFuture ... done
[10:25:36.958] result() for MulticoreFuture ... done
[10:25:36.958] result() for MulticoreFuture ...
[10:25:36.958] result() for MulticoreFuture ... done
c = 1
[10:25:36.959] getGlobalsAndPackages() ...
[10:25:36.959] Searching for globals...
[10:25:36.960] 
[10:25:36.960] Searching for globals ... DONE
[10:25:36.960] - globals: [0] <none>
[10:25:36.960] getGlobalsAndPackages() ... DONE
[10:25:36.960] run() for ‘Future’ ...
[10:25:36.961] - state: ‘created’
[10:25:36.961] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:25:36.965] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[10:25:36.965] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[10:25:36.966]   - Field: ‘label’
[10:25:36.966]   - Field: ‘local’
[10:25:36.966]   - Field: ‘owner’
[10:25:36.966]   - Field: ‘envir’
[10:25:36.966]   - Field: ‘workers’
[10:25:36.966]   - Field: ‘packages’
[10:25:36.966]   - Field: ‘gc’
[10:25:36.967]   - Field: ‘job’
[10:25:36.967]   - Field: ‘conditions’
[10:25:36.967]   - Field: ‘expr’
[10:25:36.967]   - Field: ‘uuid’
[10:25:36.967]   - Field: ‘seed’
[10:25:36.967]   - Field: ‘version’
[10:25:36.967]   - Field: ‘result’
[10:25:36.968]   - Field: ‘asynchronous’
[10:25:36.968]   - Field: ‘calls’
[10:25:36.968]   - Field: ‘globals’
[10:25:36.968]   - Field: ‘stdout’
[10:25:36.968]   - Field: ‘earlySignal’
[10:25:36.968]   - Field: ‘lazy’
[10:25:36.968]   - Field: ‘state’
[10:25:36.968] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[10:25:36.969] - Launch lazy future ...
[10:25:36.969] Packages needed by the future expression (n = 0): <none>
[10:25:36.969] Packages needed by future strategies (n = 0): <none>
[10:25:36.970] {
[10:25:36.970]     {
[10:25:36.970]         {
[10:25:36.970]             ...future.startTime <- base::Sys.time()
[10:25:36.970]             {
[10:25:36.970]                 {
[10:25:36.970]                   {
[10:25:36.970]                     {
[10:25:36.970]                       base::local({
[10:25:36.970]                         has_future <- base::requireNamespace("future", 
[10:25:36.970]                           quietly = TRUE)
[10:25:36.970]                         if (has_future) {
[10:25:36.970]                           ns <- base::getNamespace("future")
[10:25:36.970]                           version <- ns[[".package"]][["version"]]
[10:25:36.970]                           if (is.null(version)) 
[10:25:36.970]                             version <- utils::packageVersion("future")
[10:25:36.970]                         }
[10:25:36.970]                         else {
[10:25:36.970]                           version <- NULL
[10:25:36.970]                         }
[10:25:36.970]                         if (!has_future || version < "1.8.0") {
[10:25:36.970]                           info <- base::c(r_version = base::gsub("R version ", 
[10:25:36.970]                             "", base::R.version$version.string), 
[10:25:36.970]                             platform = base::sprintf("%s (%s-bit)", 
[10:25:36.970]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:25:36.970]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[10:25:36.970]                               "release", "version")], collapse = " "), 
[10:25:36.970]                             hostname = base::Sys.info()[["nodename"]])
[10:25:36.970]                           info <- base::sprintf("%s: %s", base::names(info), 
[10:25:36.970]                             info)
[10:25:36.970]                           info <- base::paste(info, collapse = "; ")
[10:25:36.970]                           if (!has_future) {
[10:25:36.970]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:25:36.970]                               info)
[10:25:36.970]                           }
[10:25:36.970]                           else {
[10:25:36.970]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:25:36.970]                               info, version)
[10:25:36.970]                           }
[10:25:36.970]                           base::stop(msg)
[10:25:36.970]                         }
[10:25:36.970]                       })
[10:25:36.970]                     }
[10:25:36.970]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[10:25:36.970]                     base::options(mc.cores = 1L)
[10:25:36.970]                   }
[10:25:36.970]                   options(future.plan = NULL)
[10:25:36.970]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:25:36.970]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:25:36.970]                 }
[10:25:36.970]                 ...future.workdir <- getwd()
[10:25:36.970]             }
[10:25:36.970]             ...future.oldOptions <- base::as.list(base::.Options)
[10:25:36.970]             ...future.oldEnvVars <- base::Sys.getenv()
[10:25:36.970]         }
[10:25:36.970]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:25:36.970]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[10:25:36.970]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:25:36.970]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:25:36.970]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:25:36.970]             future.stdout.windows.reencode = NULL, width = 80L)
[10:25:36.970]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:25:36.970]             base::names(...future.oldOptions))
[10:25:36.970]     }
[10:25:36.970]     if (FALSE) {
[10:25:36.970]     }
[10:25:36.970]     else {
[10:25:36.970]         if (TRUE) {
[10:25:36.970]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:25:36.970]                 open = "w")
[10:25:36.970]         }
[10:25:36.970]         else {
[10:25:36.970]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:25:36.970]                 windows = "NUL", "/dev/null"), open = "w")
[10:25:36.970]         }
[10:25:36.970]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:25:36.970]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:25:36.970]             base::sink(type = "output", split = FALSE)
[10:25:36.970]             base::close(...future.stdout)
[10:25:36.970]         }, add = TRUE)
[10:25:36.970]     }
[10:25:36.970]     ...future.frame <- base::sys.nframe()
[10:25:36.970]     ...future.conditions <- base::list()
[10:25:36.970]     ...future.rng <- base::globalenv()$.Random.seed
[10:25:36.970]     if (FALSE) {
[10:25:36.970]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:25:36.970]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:25:36.970]     }
[10:25:36.970]     ...future.result <- base::tryCatch({
[10:25:36.970]         base::withCallingHandlers({
[10:25:36.970]             ...future.value <- base::withVisible(base::local({
[10:25:36.970]                 withCallingHandlers({
[10:25:36.970]                   1
[10:25:36.970]                 }, immediateCondition = function(cond) {
[10:25:36.970]                   save_rds <- function (object, pathname, ...) 
[10:25:36.970]                   {
[10:25:36.970]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[10:25:36.970]                     if (file_test("-f", pathname_tmp)) {
[10:25:36.970]                       fi_tmp <- file.info(pathname_tmp)
[10:25:36.970]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[10:25:36.970]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[10:25:36.970]                         fi_tmp[["mtime"]])
[10:25:36.970]                     }
[10:25:36.970]                     tryCatch({
[10:25:36.970]                       saveRDS(object, file = pathname_tmp, ...)
[10:25:36.970]                     }, error = function(ex) {
[10:25:36.970]                       msg <- conditionMessage(ex)
[10:25:36.970]                       fi_tmp <- file.info(pathname_tmp)
[10:25:36.970]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[10:25:36.970]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[10:25:36.970]                         fi_tmp[["mtime"]], msg)
[10:25:36.970]                       ex$message <- msg
[10:25:36.970]                       stop(ex)
[10:25:36.970]                     })
[10:25:36.970]                     stopifnot(file_test("-f", pathname_tmp))
[10:25:36.970]                     res <- file.rename(from = pathname_tmp, to = pathname)
[10:25:36.970]                     if (!res || file_test("-f", pathname_tmp)) {
[10:25:36.970]                       fi_tmp <- file.info(pathname_tmp)
[10:25:36.970]                       fi <- file.info(pathname)
[10:25:36.970]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[10:25:36.970]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[10:25:36.970]                         fi_tmp[["mtime"]], sQuote(pathname), 
[10:25:36.970]                         fi[["size"]], fi[["mtime"]])
[10:25:36.970]                       stop(msg)
[10:25:36.970]                     }
[10:25:36.970]                     invisible(pathname)
[10:25:36.970]                   }
[10:25:36.970]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[10:25:36.970]                     rootPath = tempdir()) 
[10:25:36.970]                   {
[10:25:36.970]                     obj <- list(time = Sys.time(), condition = cond)
[10:25:36.970]                     file <- tempfile(pattern = class(cond)[1], 
[10:25:36.970]                       tmpdir = path, fileext = ".rds")
[10:25:36.970]                     save_rds(obj, file)
[10:25:36.970]                   }
[10:25:36.970]                   saveImmediateCondition(cond, path = "/tmp/RtmpEdG1rj/.future/immediateConditions")
[10:25:36.970]                   muffleCondition <- function (cond, pattern = "^muffle") 
[10:25:36.970]                   {
[10:25:36.970]                     inherits <- base::inherits
[10:25:36.970]                     invokeRestart <- base::invokeRestart
[10:25:36.970]                     is.null <- base::is.null
[10:25:36.970]                     muffled <- FALSE
[10:25:36.970]                     if (inherits(cond, "message")) {
[10:25:36.970]                       muffled <- grepl(pattern, "muffleMessage")
[10:25:36.970]                       if (muffled) 
[10:25:36.970]                         invokeRestart("muffleMessage")
[10:25:36.970]                     }
[10:25:36.970]                     else if (inherits(cond, "warning")) {
[10:25:36.970]                       muffled <- grepl(pattern, "muffleWarning")
[10:25:36.970]                       if (muffled) 
[10:25:36.970]                         invokeRestart("muffleWarning")
[10:25:36.970]                     }
[10:25:36.970]                     else if (inherits(cond, "condition")) {
[10:25:36.970]                       if (!is.null(pattern)) {
[10:25:36.970]                         computeRestarts <- base::computeRestarts
[10:25:36.970]                         grepl <- base::grepl
[10:25:36.970]                         restarts <- computeRestarts(cond)
[10:25:36.970]                         for (restart in restarts) {
[10:25:36.970]                           name <- restart$name
[10:25:36.970]                           if (is.null(name)) 
[10:25:36.970]                             next
[10:25:36.970]                           if (!grepl(pattern, name)) 
[10:25:36.970]                             next
[10:25:36.970]                           invokeRestart(restart)
[10:25:36.970]                           muffled <- TRUE
[10:25:36.970]                           break
[10:25:36.970]                         }
[10:25:36.970]                       }
[10:25:36.970]                     }
[10:25:36.970]                     invisible(muffled)
[10:25:36.970]                   }
[10:25:36.970]                   muffleCondition(cond)
[10:25:36.970]                 })
[10:25:36.970]             }))
[10:25:36.970]             future::FutureResult(value = ...future.value$value, 
[10:25:36.970]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:25:36.970]                   ...future.rng), globalenv = if (FALSE) 
[10:25:36.970]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:25:36.970]                     ...future.globalenv.names))
[10:25:36.970]                 else NULL, started = ...future.startTime, version = "1.8")
[10:25:36.970]         }, condition = base::local({
[10:25:36.970]             c <- base::c
[10:25:36.970]             inherits <- base::inherits
[10:25:36.970]             invokeRestart <- base::invokeRestart
[10:25:36.970]             length <- base::length
[10:25:36.970]             list <- base::list
[10:25:36.970]             seq.int <- base::seq.int
[10:25:36.970]             signalCondition <- base::signalCondition
[10:25:36.970]             sys.calls <- base::sys.calls
[10:25:36.970]             `[[` <- base::`[[`
[10:25:36.970]             `+` <- base::`+`
[10:25:36.970]             `<<-` <- base::`<<-`
[10:25:36.970]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:25:36.970]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:25:36.970]                   3L)]
[10:25:36.970]             }
[10:25:36.970]             function(cond) {
[10:25:36.970]                 is_error <- inherits(cond, "error")
[10:25:36.970]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:25:36.970]                   NULL)
[10:25:36.970]                 if (is_error) {
[10:25:36.970]                   sessionInformation <- function() {
[10:25:36.970]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:25:36.970]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:25:36.970]                       search = base::search(), system = base::Sys.info())
[10:25:36.970]                   }
[10:25:36.970]                   ...future.conditions[[length(...future.conditions) + 
[10:25:36.970]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:25:36.970]                     cond$call), session = sessionInformation(), 
[10:25:36.970]                     timestamp = base::Sys.time(), signaled = 0L)
[10:25:36.970]                   signalCondition(cond)
[10:25:36.970]                 }
[10:25:36.970]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:25:36.970]                 "immediateCondition"))) {
[10:25:36.970]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:25:36.970]                   ...future.conditions[[length(...future.conditions) + 
[10:25:36.970]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:25:36.970]                   if (TRUE && !signal) {
[10:25:36.970]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:25:36.970]                     {
[10:25:36.970]                       inherits <- base::inherits
[10:25:36.970]                       invokeRestart <- base::invokeRestart
[10:25:36.970]                       is.null <- base::is.null
[10:25:36.970]                       muffled <- FALSE
[10:25:36.970]                       if (inherits(cond, "message")) {
[10:25:36.970]                         muffled <- grepl(pattern, "muffleMessage")
[10:25:36.970]                         if (muffled) 
[10:25:36.970]                           invokeRestart("muffleMessage")
[10:25:36.970]                       }
[10:25:36.970]                       else if (inherits(cond, "warning")) {
[10:25:36.970]                         muffled <- grepl(pattern, "muffleWarning")
[10:25:36.970]                         if (muffled) 
[10:25:36.970]                           invokeRestart("muffleWarning")
[10:25:36.970]                       }
[10:25:36.970]                       else if (inherits(cond, "condition")) {
[10:25:36.970]                         if (!is.null(pattern)) {
[10:25:36.970]                           computeRestarts <- base::computeRestarts
[10:25:36.970]                           grepl <- base::grepl
[10:25:36.970]                           restarts <- computeRestarts(cond)
[10:25:36.970]                           for (restart in restarts) {
[10:25:36.970]                             name <- restart$name
[10:25:36.970]                             if (is.null(name)) 
[10:25:36.970]                               next
[10:25:36.970]                             if (!grepl(pattern, name)) 
[10:25:36.970]                               next
[10:25:36.970]                             invokeRestart(restart)
[10:25:36.970]                             muffled <- TRUE
[10:25:36.970]                             break
[10:25:36.970]                           }
[10:25:36.970]                         }
[10:25:36.970]                       }
[10:25:36.970]                       invisible(muffled)
[10:25:36.970]                     }
[10:25:36.970]                     muffleCondition(cond, pattern = "^muffle")
[10:25:36.970]                   }
[10:25:36.970]                 }
[10:25:36.970]                 else {
[10:25:36.970]                   if (TRUE) {
[10:25:36.970]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:25:36.970]                     {
[10:25:36.970]                       inherits <- base::inherits
[10:25:36.970]                       invokeRestart <- base::invokeRestart
[10:25:36.970]                       is.null <- base::is.null
[10:25:36.970]                       muffled <- FALSE
[10:25:36.970]                       if (inherits(cond, "message")) {
[10:25:36.970]                         muffled <- grepl(pattern, "muffleMessage")
[10:25:36.970]                         if (muffled) 
[10:25:36.970]                           invokeRestart("muffleMessage")
[10:25:36.970]                       }
[10:25:36.970]                       else if (inherits(cond, "warning")) {
[10:25:36.970]                         muffled <- grepl(pattern, "muffleWarning")
[10:25:36.970]                         if (muffled) 
[10:25:36.970]                           invokeRestart("muffleWarning")
[10:25:36.970]                       }
[10:25:36.970]                       else if (inherits(cond, "condition")) {
[10:25:36.970]                         if (!is.null(pattern)) {
[10:25:36.970]                           computeRestarts <- base::computeRestarts
[10:25:36.970]                           grepl <- base::grepl
[10:25:36.970]                           restarts <- computeRestarts(cond)
[10:25:36.970]                           for (restart in restarts) {
[10:25:36.970]                             name <- restart$name
[10:25:36.970]                             if (is.null(name)) 
[10:25:36.970]                               next
[10:25:36.970]                             if (!grepl(pattern, name)) 
[10:25:36.970]                               next
[10:25:36.970]                             invokeRestart(restart)
[10:25:36.970]                             muffled <- TRUE
[10:25:36.970]                             break
[10:25:36.970]                           }
[10:25:36.970]                         }
[10:25:36.970]                       }
[10:25:36.970]                       invisible(muffled)
[10:25:36.970]                     }
[10:25:36.970]                     muffleCondition(cond, pattern = "^muffle")
[10:25:36.970]                   }
[10:25:36.970]                 }
[10:25:36.970]             }
[10:25:36.970]         }))
[10:25:36.970]     }, error = function(ex) {
[10:25:36.970]         base::structure(base::list(value = NULL, visible = NULL, 
[10:25:36.970]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:25:36.970]                 ...future.rng), started = ...future.startTime, 
[10:25:36.970]             finished = Sys.time(), session_uuid = NA_character_, 
[10:25:36.970]             version = "1.8"), class = "FutureResult")
[10:25:36.970]     }, finally = {
[10:25:36.970]         if (!identical(...future.workdir, getwd())) 
[10:25:36.970]             setwd(...future.workdir)
[10:25:36.970]         {
[10:25:36.970]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:25:36.970]                 ...future.oldOptions$nwarnings <- NULL
[10:25:36.970]             }
[10:25:36.970]             base::options(...future.oldOptions)
[10:25:36.970]             if (.Platform$OS.type == "windows") {
[10:25:36.970]                 old_names <- names(...future.oldEnvVars)
[10:25:36.970]                 envs <- base::Sys.getenv()
[10:25:36.970]                 names <- names(envs)
[10:25:36.970]                 common <- intersect(names, old_names)
[10:25:36.970]                 added <- setdiff(names, old_names)
[10:25:36.970]                 removed <- setdiff(old_names, names)
[10:25:36.970]                 changed <- common[...future.oldEnvVars[common] != 
[10:25:36.970]                   envs[common]]
[10:25:36.970]                 NAMES <- toupper(changed)
[10:25:36.970]                 args <- list()
[10:25:36.970]                 for (kk in seq_along(NAMES)) {
[10:25:36.970]                   name <- changed[[kk]]
[10:25:36.970]                   NAME <- NAMES[[kk]]
[10:25:36.970]                   if (name != NAME && is.element(NAME, old_names)) 
[10:25:36.970]                     next
[10:25:36.970]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:25:36.970]                 }
[10:25:36.970]                 NAMES <- toupper(added)
[10:25:36.970]                 for (kk in seq_along(NAMES)) {
[10:25:36.970]                   name <- added[[kk]]
[10:25:36.970]                   NAME <- NAMES[[kk]]
[10:25:36.970]                   if (name != NAME && is.element(NAME, old_names)) 
[10:25:36.970]                     next
[10:25:36.970]                   args[[name]] <- ""
[10:25:36.970]                 }
[10:25:36.970]                 NAMES <- toupper(removed)
[10:25:36.970]                 for (kk in seq_along(NAMES)) {
[10:25:36.970]                   name <- removed[[kk]]
[10:25:36.970]                   NAME <- NAMES[[kk]]
[10:25:36.970]                   if (name != NAME && is.element(NAME, old_names)) 
[10:25:36.970]                     next
[10:25:36.970]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:25:36.970]                 }
[10:25:36.970]                 if (length(args) > 0) 
[10:25:36.970]                   base::do.call(base::Sys.setenv, args = args)
[10:25:36.970]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:25:36.970]             }
[10:25:36.970]             else {
[10:25:36.970]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:25:36.970]             }
[10:25:36.970]             {
[10:25:36.970]                 if (base::length(...future.futureOptionsAdded) > 
[10:25:36.970]                   0L) {
[10:25:36.970]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:25:36.970]                   base::names(opts) <- ...future.futureOptionsAdded
[10:25:36.970]                   base::options(opts)
[10:25:36.970]                 }
[10:25:36.970]                 {
[10:25:36.970]                   {
[10:25:36.970]                     base::options(mc.cores = ...future.mc.cores.old)
[10:25:36.970]                     NULL
[10:25:36.970]                   }
[10:25:36.970]                   options(future.plan = NULL)
[10:25:36.970]                   if (is.na(NA_character_)) 
[10:25:36.970]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:25:36.970]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:25:36.970]                   future::plan(list(function (..., workers = availableCores(constraints = "multicore"), 
[10:25:36.970]                     envir = parent.frame()) 
[10:25:36.970]                   {
[10:25:36.970]                     default_workers <- missing(workers)
[10:25:36.970]                     if (is.function(workers)) 
[10:25:36.970]                       workers <- workers()
[10:25:36.970]                     workers <- structure(as.integer(workers), 
[10:25:36.970]                       class = class(workers))
[10:25:36.970]                     stop_if_not(is.finite(workers), workers >= 
[10:25:36.970]                       1L)
[10:25:36.970]                     if ((workers == 1L && !inherits(workers, 
[10:25:36.970]                       "AsIs")) || !supportsMulticore(warn = TRUE)) {
[10:25:36.970]                       if (default_workers) 
[10:25:36.970]                         supportsMulticore(warn = TRUE)
[10:25:36.970]                       return(sequential(..., envir = envir))
[10:25:36.970]                     }
[10:25:36.970]                     oopts <- options(mc.cores = workers)
[10:25:36.970]                     on.exit(options(oopts))
[10:25:36.970]                     future <- MulticoreFuture(..., workers = workers, 
[10:25:36.970]                       envir = envir)
[10:25:36.970]                     if (!future$lazy) 
[10:25:36.970]                       future <- run(future)
[10:25:36.970]                     invisible(future)
[10:25:36.970]                   }), .cleanup = FALSE, .init = FALSE)
[10:25:36.970]                 }
[10:25:36.970]             }
[10:25:36.970]         }
[10:25:36.970]     })
[10:25:36.970]     if (TRUE) {
[10:25:36.970]         base::sink(type = "output", split = FALSE)
[10:25:36.970]         if (TRUE) {
[10:25:36.970]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:25:36.970]         }
[10:25:36.970]         else {
[10:25:36.970]             ...future.result["stdout"] <- base::list(NULL)
[10:25:36.970]         }
[10:25:36.970]         base::close(...future.stdout)
[10:25:36.970]         ...future.stdout <- NULL
[10:25:36.970]     }
[10:25:36.970]     ...future.result$conditions <- ...future.conditions
[10:25:36.970]     ...future.result$finished <- base::Sys.time()
[10:25:36.970]     ...future.result
[10:25:36.970] }
[10:25:36.972] requestCore(): workers = 2
[10:25:36.974] MulticoreFuture started
[10:25:36.974] - Launch lazy future ... done
[10:25:36.975] run() for ‘MulticoreFuture’ ... done
[10:25:36.975] result() for MulticoreFuture ...
[10:25:36.975] plan(): Setting new future strategy stack:
[10:25:36.975] List of future strategies:
[10:25:36.975] 1. sequential:
[10:25:36.975]    - args: function (..., envir = parent.frame())
[10:25:36.975]    - tweaked: FALSE
[10:25:36.975]    - call: NULL
[10:25:36.976] plan(): nbrOfWorkers() = 1
[10:25:36.978] plan(): Setting new future strategy stack:
[10:25:36.978] List of future strategies:
[10:25:36.978] 1. multicore:
[10:25:36.978]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[10:25:36.978]    - tweaked: FALSE
[10:25:36.978]    - call: plan(strategy)
[10:25:36.983] plan(): nbrOfWorkers() = 2
[10:25:36.984] result() for MulticoreFuture ...
[10:25:36.984] result() for MulticoreFuture ... done
[10:25:36.984] result() for MulticoreFuture ... done
[10:25:36.984] result() for MulticoreFuture ...
[10:25:36.985] result() for MulticoreFuture ... done
d = 1
** Nested future assignments
[10:25:36.985] getGlobalsAndPackages() ...
[10:25:36.985] Searching for globals...
[10:25:36.990] - globals found: [5] ‘{’, ‘<-’, ‘%<-%’, ‘%->%’, ‘+’
[10:25:36.990] Searching for globals ... DONE
[10:25:36.990] Resolving globals: FALSE
[10:25:36.991] 
[10:25:36.991] - packages: [1] ‘future’
[10:25:36.991] getGlobalsAndPackages() ... DONE
[10:25:36.992] run() for ‘Future’ ...
[10:25:36.992] - state: ‘created’
[10:25:36.992] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:25:36.996] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[10:25:36.996] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[10:25:36.996]   - Field: ‘label’
[10:25:36.996]   - Field: ‘local’
[10:25:36.996]   - Field: ‘owner’
[10:25:36.996]   - Field: ‘envir’
[10:25:36.997]   - Field: ‘workers’
[10:25:36.999]   - Field: ‘packages’
[10:25:36.999]   - Field: ‘gc’
[10:25:36.999]   - Field: ‘job’
[10:25:37.000]   - Field: ‘conditions’
[10:25:37.000]   - Field: ‘expr’
[10:25:37.000]   - Field: ‘uuid’
[10:25:37.000]   - Field: ‘seed’
[10:25:37.000]   - Field: ‘version’
[10:25:37.000]   - Field: ‘result’
[10:25:37.000]   - Field: ‘asynchronous’
[10:25:37.001]   - Field: ‘calls’
[10:25:37.001]   - Field: ‘globals’
[10:25:37.001]   - Field: ‘stdout’
[10:25:37.001]   - Field: ‘earlySignal’
[10:25:37.001]   - Field: ‘lazy’
[10:25:37.001]   - Field: ‘state’
[10:25:37.001] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[10:25:37.002] - Launch lazy future ...
[10:25:37.002] Packages needed by the future expression (n = 1): ‘future’
[10:25:37.002] Packages needed by future strategies (n = 0): <none>
[10:25:37.003] {
[10:25:37.003]     {
[10:25:37.003]         {
[10:25:37.003]             ...future.startTime <- base::Sys.time()
[10:25:37.003]             {
[10:25:37.003]                 {
[10:25:37.003]                   {
[10:25:37.003]                     {
[10:25:37.003]                       {
[10:25:37.003]                         base::local({
[10:25:37.003]                           has_future <- base::requireNamespace("future", 
[10:25:37.003]                             quietly = TRUE)
[10:25:37.003]                           if (has_future) {
[10:25:37.003]                             ns <- base::getNamespace("future")
[10:25:37.003]                             version <- ns[[".package"]][["version"]]
[10:25:37.003]                             if (is.null(version)) 
[10:25:37.003]                               version <- utils::packageVersion("future")
[10:25:37.003]                           }
[10:25:37.003]                           else {
[10:25:37.003]                             version <- NULL
[10:25:37.003]                           }
[10:25:37.003]                           if (!has_future || version < "1.8.0") {
[10:25:37.003]                             info <- base::c(r_version = base::gsub("R version ", 
[10:25:37.003]                               "", base::R.version$version.string), 
[10:25:37.003]                               platform = base::sprintf("%s (%s-bit)", 
[10:25:37.003]                                 base::R.version$platform, 8 * 
[10:25:37.003]                                   base::.Machine$sizeof.pointer), 
[10:25:37.003]                               os = base::paste(base::Sys.info()[base::c("sysname", 
[10:25:37.003]                                 "release", "version")], collapse = " "), 
[10:25:37.003]                               hostname = base::Sys.info()[["nodename"]])
[10:25:37.003]                             info <- base::sprintf("%s: %s", base::names(info), 
[10:25:37.003]                               info)
[10:25:37.003]                             info <- base::paste(info, collapse = "; ")
[10:25:37.003]                             if (!has_future) {
[10:25:37.003]                               msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:25:37.003]                                 info)
[10:25:37.003]                             }
[10:25:37.003]                             else {
[10:25:37.003]                               msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:25:37.003]                                 info, version)
[10:25:37.003]                             }
[10:25:37.003]                             base::stop(msg)
[10:25:37.003]                           }
[10:25:37.003]                         })
[10:25:37.003]                       }
[10:25:37.003]                       ...future.mc.cores.old <- base::getOption("mc.cores")
[10:25:37.003]                       base::options(mc.cores = 1L)
[10:25:37.003]                     }
[10:25:37.003]                     base::local({
[10:25:37.003]                       for (pkg in "future") {
[10:25:37.003]                         base::loadNamespace(pkg)
[10:25:37.003]                         base::library(pkg, character.only = TRUE)
[10:25:37.003]                       }
[10:25:37.003]                     })
[10:25:37.003]                   }
[10:25:37.003]                   options(future.plan = NULL)
[10:25:37.003]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:25:37.003]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:25:37.003]                 }
[10:25:37.003]                 ...future.workdir <- getwd()
[10:25:37.003]             }
[10:25:37.003]             ...future.oldOptions <- base::as.list(base::.Options)
[10:25:37.003]             ...future.oldEnvVars <- base::Sys.getenv()
[10:25:37.003]         }
[10:25:37.003]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:25:37.003]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[10:25:37.003]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:25:37.003]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:25:37.003]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:25:37.003]             future.stdout.windows.reencode = NULL, width = 80L)
[10:25:37.003]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:25:37.003]             base::names(...future.oldOptions))
[10:25:37.003]     }
[10:25:37.003]     if (FALSE) {
[10:25:37.003]     }
[10:25:37.003]     else {
[10:25:37.003]         if (TRUE) {
[10:25:37.003]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:25:37.003]                 open = "w")
[10:25:37.003]         }
[10:25:37.003]         else {
[10:25:37.003]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:25:37.003]                 windows = "NUL", "/dev/null"), open = "w")
[10:25:37.003]         }
[10:25:37.003]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:25:37.003]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:25:37.003]             base::sink(type = "output", split = FALSE)
[10:25:37.003]             base::close(...future.stdout)
[10:25:37.003]         }, add = TRUE)
[10:25:37.003]     }
[10:25:37.003]     ...future.frame <- base::sys.nframe()
[10:25:37.003]     ...future.conditions <- base::list()
[10:25:37.003]     ...future.rng <- base::globalenv()$.Random.seed
[10:25:37.003]     if (FALSE) {
[10:25:37.003]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:25:37.003]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:25:37.003]     }
[10:25:37.003]     ...future.result <- base::tryCatch({
[10:25:37.003]         base::withCallingHandlers({
[10:25:37.003]             ...future.value <- base::withVisible(base::local({
[10:25:37.003]                 withCallingHandlers({
[10:25:37.003]                   {
[10:25:37.003]                     b <- 1
[10:25:37.003]                     c %<-% 2
[10:25:37.003]                     d <- 3
[10:25:37.003]                     4 %->% e
[10:25:37.003]                     b + c + d + e
[10:25:37.003]                   }
[10:25:37.003]                 }, immediateCondition = function(cond) {
[10:25:37.003]                   save_rds <- function (object, pathname, ...) 
[10:25:37.003]                   {
[10:25:37.003]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[10:25:37.003]                     if (file_test("-f", pathname_tmp)) {
[10:25:37.003]                       fi_tmp <- file.info(pathname_tmp)
[10:25:37.003]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[10:25:37.003]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[10:25:37.003]                         fi_tmp[["mtime"]])
[10:25:37.003]                     }
[10:25:37.003]                     tryCatch({
[10:25:37.003]                       saveRDS(object, file = pathname_tmp, ...)
[10:25:37.003]                     }, error = function(ex) {
[10:25:37.003]                       msg <- conditionMessage(ex)
[10:25:37.003]                       fi_tmp <- file.info(pathname_tmp)
[10:25:37.003]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[10:25:37.003]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[10:25:37.003]                         fi_tmp[["mtime"]], msg)
[10:25:37.003]                       ex$message <- msg
[10:25:37.003]                       stop(ex)
[10:25:37.003]                     })
[10:25:37.003]                     stopifnot(file_test("-f", pathname_tmp))
[10:25:37.003]                     res <- file.rename(from = pathname_tmp, to = pathname)
[10:25:37.003]                     if (!res || file_test("-f", pathname_tmp)) {
[10:25:37.003]                       fi_tmp <- file.info(pathname_tmp)
[10:25:37.003]                       fi <- file.info(pathname)
[10:25:37.003]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[10:25:37.003]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[10:25:37.003]                         fi_tmp[["mtime"]], sQuote(pathname), 
[10:25:37.003]                         fi[["size"]], fi[["mtime"]])
[10:25:37.003]                       stop(msg)
[10:25:37.003]                     }
[10:25:37.003]                     invisible(pathname)
[10:25:37.003]                   }
[10:25:37.003]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[10:25:37.003]                     rootPath = tempdir()) 
[10:25:37.003]                   {
[10:25:37.003]                     obj <- list(time = Sys.time(), condition = cond)
[10:25:37.003]                     file <- tempfile(pattern = class(cond)[1], 
[10:25:37.003]                       tmpdir = path, fileext = ".rds")
[10:25:37.003]                     save_rds(obj, file)
[10:25:37.003]                   }
[10:25:37.003]                   saveImmediateCondition(cond, path = "/tmp/RtmpEdG1rj/.future/immediateConditions")
[10:25:37.003]                   muffleCondition <- function (cond, pattern = "^muffle") 
[10:25:37.003]                   {
[10:25:37.003]                     inherits <- base::inherits
[10:25:37.003]                     invokeRestart <- base::invokeRestart
[10:25:37.003]                     is.null <- base::is.null
[10:25:37.003]                     muffled <- FALSE
[10:25:37.003]                     if (inherits(cond, "message")) {
[10:25:37.003]                       muffled <- grepl(pattern, "muffleMessage")
[10:25:37.003]                       if (muffled) 
[10:25:37.003]                         invokeRestart("muffleMessage")
[10:25:37.003]                     }
[10:25:37.003]                     else if (inherits(cond, "warning")) {
[10:25:37.003]                       muffled <- grepl(pattern, "muffleWarning")
[10:25:37.003]                       if (muffled) 
[10:25:37.003]                         invokeRestart("muffleWarning")
[10:25:37.003]                     }
[10:25:37.003]                     else if (inherits(cond, "condition")) {
[10:25:37.003]                       if (!is.null(pattern)) {
[10:25:37.003]                         computeRestarts <- base::computeRestarts
[10:25:37.003]                         grepl <- base::grepl
[10:25:37.003]                         restarts <- computeRestarts(cond)
[10:25:37.003]                         for (restart in restarts) {
[10:25:37.003]                           name <- restart$name
[10:25:37.003]                           if (is.null(name)) 
[10:25:37.003]                             next
[10:25:37.003]                           if (!grepl(pattern, name)) 
[10:25:37.003]                             next
[10:25:37.003]                           invokeRestart(restart)
[10:25:37.003]                           muffled <- TRUE
[10:25:37.003]                           break
[10:25:37.003]                         }
[10:25:37.003]                       }
[10:25:37.003]                     }
[10:25:37.003]                     invisible(muffled)
[10:25:37.003]                   }
[10:25:37.003]                   muffleCondition(cond)
[10:25:37.003]                 })
[10:25:37.003]             }))
[10:25:37.003]             future::FutureResult(value = ...future.value$value, 
[10:25:37.003]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:25:37.003]                   ...future.rng), globalenv = if (FALSE) 
[10:25:37.003]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:25:37.003]                     ...future.globalenv.names))
[10:25:37.003]                 else NULL, started = ...future.startTime, version = "1.8")
[10:25:37.003]         }, condition = base::local({
[10:25:37.003]             c <- base::c
[10:25:37.003]             inherits <- base::inherits
[10:25:37.003]             invokeRestart <- base::invokeRestart
[10:25:37.003]             length <- base::length
[10:25:37.003]             list <- base::list
[10:25:37.003]             seq.int <- base::seq.int
[10:25:37.003]             signalCondition <- base::signalCondition
[10:25:37.003]             sys.calls <- base::sys.calls
[10:25:37.003]             `[[` <- base::`[[`
[10:25:37.003]             `+` <- base::`+`
[10:25:37.003]             `<<-` <- base::`<<-`
[10:25:37.003]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:25:37.003]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:25:37.003]                   3L)]
[10:25:37.003]             }
[10:25:37.003]             function(cond) {
[10:25:37.003]                 is_error <- inherits(cond, "error")
[10:25:37.003]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:25:37.003]                   NULL)
[10:25:37.003]                 if (is_error) {
[10:25:37.003]                   sessionInformation <- function() {
[10:25:37.003]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:25:37.003]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:25:37.003]                       search = base::search(), system = base::Sys.info())
[10:25:37.003]                   }
[10:25:37.003]                   ...future.conditions[[length(...future.conditions) + 
[10:25:37.003]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:25:37.003]                     cond$call), session = sessionInformation(), 
[10:25:37.003]                     timestamp = base::Sys.time(), signaled = 0L)
[10:25:37.003]                   signalCondition(cond)
[10:25:37.003]                 }
[10:25:37.003]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:25:37.003]                 "immediateCondition"))) {
[10:25:37.003]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:25:37.003]                   ...future.conditions[[length(...future.conditions) + 
[10:25:37.003]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:25:37.003]                   if (TRUE && !signal) {
[10:25:37.003]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:25:37.003]                     {
[10:25:37.003]                       inherits <- base::inherits
[10:25:37.003]                       invokeRestart <- base::invokeRestart
[10:25:37.003]                       is.null <- base::is.null
[10:25:37.003]                       muffled <- FALSE
[10:25:37.003]                       if (inherits(cond, "message")) {
[10:25:37.003]                         muffled <- grepl(pattern, "muffleMessage")
[10:25:37.003]                         if (muffled) 
[10:25:37.003]                           invokeRestart("muffleMessage")
[10:25:37.003]                       }
[10:25:37.003]                       else if (inherits(cond, "warning")) {
[10:25:37.003]                         muffled <- grepl(pattern, "muffleWarning")
[10:25:37.003]                         if (muffled) 
[10:25:37.003]                           invokeRestart("muffleWarning")
[10:25:37.003]                       }
[10:25:37.003]                       else if (inherits(cond, "condition")) {
[10:25:37.003]                         if (!is.null(pattern)) {
[10:25:37.003]                           computeRestarts <- base::computeRestarts
[10:25:37.003]                           grepl <- base::grepl
[10:25:37.003]                           restarts <- computeRestarts(cond)
[10:25:37.003]                           for (restart in restarts) {
[10:25:37.003]                             name <- restart$name
[10:25:37.003]                             if (is.null(name)) 
[10:25:37.003]                               next
[10:25:37.003]                             if (!grepl(pattern, name)) 
[10:25:37.003]                               next
[10:25:37.003]                             invokeRestart(restart)
[10:25:37.003]                             muffled <- TRUE
[10:25:37.003]                             break
[10:25:37.003]                           }
[10:25:37.003]                         }
[10:25:37.003]                       }
[10:25:37.003]                       invisible(muffled)
[10:25:37.003]                     }
[10:25:37.003]                     muffleCondition(cond, pattern = "^muffle")
[10:25:37.003]                   }
[10:25:37.003]                 }
[10:25:37.003]                 else {
[10:25:37.003]                   if (TRUE) {
[10:25:37.003]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:25:37.003]                     {
[10:25:37.003]                       inherits <- base::inherits
[10:25:37.003]                       invokeRestart <- base::invokeRestart
[10:25:37.003]                       is.null <- base::is.null
[10:25:37.003]                       muffled <- FALSE
[10:25:37.003]                       if (inherits(cond, "message")) {
[10:25:37.003]                         muffled <- grepl(pattern, "muffleMessage")
[10:25:37.003]                         if (muffled) 
[10:25:37.003]                           invokeRestart("muffleMessage")
[10:25:37.003]                       }
[10:25:37.003]                       else if (inherits(cond, "warning")) {
[10:25:37.003]                         muffled <- grepl(pattern, "muffleWarning")
[10:25:37.003]                         if (muffled) 
[10:25:37.003]                           invokeRestart("muffleWarning")
[10:25:37.003]                       }
[10:25:37.003]                       else if (inherits(cond, "condition")) {
[10:25:37.003]                         if (!is.null(pattern)) {
[10:25:37.003]                           computeRestarts <- base::computeRestarts
[10:25:37.003]                           grepl <- base::grepl
[10:25:37.003]                           restarts <- computeRestarts(cond)
[10:25:37.003]                           for (restart in restarts) {
[10:25:37.003]                             name <- restart$name
[10:25:37.003]                             if (is.null(name)) 
[10:25:37.003]                               next
[10:25:37.003]                             if (!grepl(pattern, name)) 
[10:25:37.003]                               next
[10:25:37.003]                             invokeRestart(restart)
[10:25:37.003]                             muffled <- TRUE
[10:25:37.003]                             break
[10:25:37.003]                           }
[10:25:37.003]                         }
[10:25:37.003]                       }
[10:25:37.003]                       invisible(muffled)
[10:25:37.003]                     }
[10:25:37.003]                     muffleCondition(cond, pattern = "^muffle")
[10:25:37.003]                   }
[10:25:37.003]                 }
[10:25:37.003]             }
[10:25:37.003]         }))
[10:25:37.003]     }, error = function(ex) {
[10:25:37.003]         base::structure(base::list(value = NULL, visible = NULL, 
[10:25:37.003]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:25:37.003]                 ...future.rng), started = ...future.startTime, 
[10:25:37.003]             finished = Sys.time(), session_uuid = NA_character_, 
[10:25:37.003]             version = "1.8"), class = "FutureResult")
[10:25:37.003]     }, finally = {
[10:25:37.003]         if (!identical(...future.workdir, getwd())) 
[10:25:37.003]             setwd(...future.workdir)
[10:25:37.003]         {
[10:25:37.003]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:25:37.003]                 ...future.oldOptions$nwarnings <- NULL
[10:25:37.003]             }
[10:25:37.003]             base::options(...future.oldOptions)
[10:25:37.003]             if (.Platform$OS.type == "windows") {
[10:25:37.003]                 old_names <- names(...future.oldEnvVars)
[10:25:37.003]                 envs <- base::Sys.getenv()
[10:25:37.003]                 names <- names(envs)
[10:25:37.003]                 common <- intersect(names, old_names)
[10:25:37.003]                 added <- setdiff(names, old_names)
[10:25:37.003]                 removed <- setdiff(old_names, names)
[10:25:37.003]                 changed <- common[...future.oldEnvVars[common] != 
[10:25:37.003]                   envs[common]]
[10:25:37.003]                 NAMES <- toupper(changed)
[10:25:37.003]                 args <- list()
[10:25:37.003]                 for (kk in seq_along(NAMES)) {
[10:25:37.003]                   name <- changed[[kk]]
[10:25:37.003]                   NAME <- NAMES[[kk]]
[10:25:37.003]                   if (name != NAME && is.element(NAME, old_names)) 
[10:25:37.003]                     next
[10:25:37.003]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:25:37.003]                 }
[10:25:37.003]                 NAMES <- toupper(added)
[10:25:37.003]                 for (kk in seq_along(NAMES)) {
[10:25:37.003]                   name <- added[[kk]]
[10:25:37.003]                   NAME <- NAMES[[kk]]
[10:25:37.003]                   if (name != NAME && is.element(NAME, old_names)) 
[10:25:37.003]                     next
[10:25:37.003]                   args[[name]] <- ""
[10:25:37.003]                 }
[10:25:37.003]                 NAMES <- toupper(removed)
[10:25:37.003]                 for (kk in seq_along(NAMES)) {
[10:25:37.003]                   name <- removed[[kk]]
[10:25:37.003]                   NAME <- NAMES[[kk]]
[10:25:37.003]                   if (name != NAME && is.element(NAME, old_names)) 
[10:25:37.003]                     next
[10:25:37.003]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:25:37.003]                 }
[10:25:37.003]                 if (length(args) > 0) 
[10:25:37.003]                   base::do.call(base::Sys.setenv, args = args)
[10:25:37.003]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:25:37.003]             }
[10:25:37.003]             else {
[10:25:37.003]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:25:37.003]             }
[10:25:37.003]             {
[10:25:37.003]                 if (base::length(...future.futureOptionsAdded) > 
[10:25:37.003]                   0L) {
[10:25:37.003]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:25:37.003]                   base::names(opts) <- ...future.futureOptionsAdded
[10:25:37.003]                   base::options(opts)
[10:25:37.003]                 }
[10:25:37.003]                 {
[10:25:37.003]                   {
[10:25:37.003]                     base::options(mc.cores = ...future.mc.cores.old)
[10:25:37.003]                     NULL
[10:25:37.003]                   }
[10:25:37.003]                   options(future.plan = NULL)
[10:25:37.003]                   if (is.na(NA_character_)) 
[10:25:37.003]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:25:37.003]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:25:37.003]                   future::plan(list(function (..., workers = availableCores(constraints = "multicore"), 
[10:25:37.003]                     envir = parent.frame()) 
[10:25:37.003]                   {
[10:25:37.003]                     default_workers <- missing(workers)
[10:25:37.003]                     if (is.function(workers)) 
[10:25:37.003]                       workers <- workers()
[10:25:37.003]                     workers <- structure(as.integer(workers), 
[10:25:37.003]                       class = class(workers))
[10:25:37.003]                     stop_if_not(is.finite(workers), workers >= 
[10:25:37.003]                       1L)
[10:25:37.003]                     if ((workers == 1L && !inherits(workers, 
[10:25:37.003]                       "AsIs")) || !supportsMulticore(warn = TRUE)) {
[10:25:37.003]                       if (default_workers) 
[10:25:37.003]                         supportsMulticore(warn = TRUE)
[10:25:37.003]                       return(sequential(..., envir = envir))
[10:25:37.003]                     }
[10:25:37.003]                     oopts <- options(mc.cores = workers)
[10:25:37.003]                     on.exit(options(oopts))
[10:25:37.003]                     future <- MulticoreFuture(..., workers = workers, 
[10:25:37.003]                       envir = envir)
[10:25:37.003]                     if (!future$lazy) 
[10:25:37.003]                       future <- run(future)
[10:25:37.003]                     invisible(future)
[10:25:37.003]                   }), .cleanup = FALSE, .init = FALSE)
[10:25:37.003]                 }
[10:25:37.003]             }
[10:25:37.003]         }
[10:25:37.003]     })
[10:25:37.003]     if (TRUE) {
[10:25:37.003]         base::sink(type = "output", split = FALSE)
[10:25:37.003]         if (TRUE) {
[10:25:37.003]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:25:37.003]         }
[10:25:37.003]         else {
[10:25:37.003]             ...future.result["stdout"] <- base::list(NULL)
[10:25:37.003]         }
[10:25:37.003]         base::close(...future.stdout)
[10:25:37.003]         ...future.stdout <- NULL
[10:25:37.003]     }
[10:25:37.003]     ...future.result$conditions <- ...future.conditions
[10:25:37.003]     ...future.result$finished <- base::Sys.time()
[10:25:37.003]     ...future.result
[10:25:37.003] }
[10:25:37.005] requestCore(): workers = 2
[10:25:37.007] MulticoreFuture started
[10:25:37.007] - Launch lazy future ... done
[10:25:37.008] run() for ‘MulticoreFuture’ ... done
[10:25:37.008] result() for MulticoreFuture ...
[10:25:37.008] plan(): Setting new future strategy stack:
[10:25:37.009] List of future strategies:
[10:25:37.009] 1. sequential:
[10:25:37.009]    - args: function (..., envir = parent.frame())
[10:25:37.009]    - tweaked: FALSE
[10:25:37.009]    - call: NULL
[10:25:37.010] plan(): nbrOfWorkers() = 1
[10:25:37.042] plan(): Setting new future strategy stack:
[10:25:37.043] List of future strategies:
[10:25:37.043] 1. multicore:
[10:25:37.043]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[10:25:37.043]    - tweaked: FALSE
[10:25:37.043]    - call: plan(strategy)
[10:25:37.047] plan(): nbrOfWorkers() = 2
[10:25:37.049] result() for MulticoreFuture ...
[10:25:37.049] result() for MulticoreFuture ... done
[10:25:37.049] signalConditions() ...
[10:25:37.049]  - include = ‘immediateCondition’
[10:25:37.049]  - exclude = 
[10:25:37.050]  - resignal = FALSE
[10:25:37.050]  - Number of conditions: 88
[10:25:37.050] signalConditions() ... done
[10:25:37.050] result() for MulticoreFuture ... done
[10:25:37.050] result() for MulticoreFuture ...
[10:25:37.051] result() for MulticoreFuture ... done
[10:25:37.051] signalConditions() ...
[10:25:37.051]  - include = ‘immediateCondition’
[10:25:37.051]  - exclude = 
[10:25:37.051]  - resignal = FALSE
[10:25:37.051]  - Number of conditions: 88
[10:25:37.052] signalConditions() ... done
[10:25:37.052] Future state: ‘finished’
[10:25:37.052] result() for MulticoreFuture ...
[10:25:37.052] result() for MulticoreFuture ... done
[10:25:37.052] signalConditions() ...
[10:25:37.053]  - include = ‘condition’
[10:25:37.053]  - exclude = ‘immediateCondition’
[10:25:37.053]  - resignal = TRUE
[10:25:37.053]  - Number of conditions: 88
[10:25:37.053]  - Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[10:25:37.011] getGlobalsAndPackages() ...
[10:25:37.053]  - Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
[10:25:37.011] Searching for globals...
[10:25:37.053]  - Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[10:25:37.012] 
[10:25:37.054]  - Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[10:25:37.012] Searching for globals ... DONE
[10:25:37.054]  - Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[10:25:37.013] - globals: [0] <none>
[10:25:37.054]  - Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[10:25:37.013] getGlobalsAndPackages() ... DONE
[10:25:37.054]  - Condition #7: ‘simpleMessage’, ‘message’, ‘condition’
[10:25:37.014] run() for ‘Future’ ...
[10:25:37.054]  - Condition #8: ‘simpleMessage’, ‘message’, ‘condition’
[10:25:37.014] - state: ‘created’
[10:25:37.054]  - Condition #9: ‘simpleMessage’, ‘message’, ‘condition’
[10:25:37.014] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:25:37.055]  - Condition #10: ‘simpleMessage’, ‘message’, ‘condition’
[10:25:37.015] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[10:25:37.055]  - Condition #11: ‘simpleMessage’, ‘message’, ‘condition’
[10:25:37.015] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[10:25:37.055]  - Condition #12: ‘simpleMessage’, ‘message’, ‘condition’
[10:25:37.015]   - Field: ‘label’
[10:25:37.055]  - Condition #13: ‘simpleMessage’, ‘message’, ‘condition’
[10:25:37.015]   - Field: ‘local’
[10:25:37.055]  - Condition #14: ‘simpleMessage’, ‘message’, ‘condition’
[10:25:37.015]   - Field: ‘owner’
[10:25:37.056]  - Condition #15: ‘simpleMessage’, ‘message’, ‘condition’
[10:25:37.016]   - Field: ‘envir’
[10:25:37.056]  - Condition #16: ‘simpleMessage’, ‘message’, ‘condition’
[10:25:37.016]   - Field: ‘packages’
[10:25:37.056]  - Condition #17: ‘simpleMessage’, ‘message’, ‘condition’
[10:25:37.016]   - Field: ‘gc’
[10:25:37.056]  - Condition #18: ‘simpleMessage’, ‘message’, ‘condition’
[10:25:37.016]   - Field: ‘conditions’
[10:25:37.056]  - Condition #19: ‘simpleMessage’, ‘message’, ‘condition’
[10:25:37.016]   - Field: ‘expr’
[10:25:37.056]  - Condition #20: ‘simpleMessage’, ‘message’, ‘condition’
[10:25:37.017]   - Field: ‘uuid’
[10:25:37.057]  - Condition #21: ‘simpleMessage’, ‘message’, ‘condition’
[10:25:37.017]   - Field: ‘seed’
[10:25:37.057]  - Condition #22: ‘simpleMessage’, ‘message’, ‘condition’
[10:25:37.017]   - Field: ‘version’
[10:25:37.057]  - Condition #23: ‘simpleMessage’, ‘message’, ‘condition’
[10:25:37.017]   - Field: ‘result’
[10:25:37.057]  - Condition #24: ‘simpleMessage’, ‘message’, ‘condition’
[10:25:37.017]   - Field: ‘asynchronous’
[10:25:37.057]  - Condition #25: ‘simpleMessage’, ‘message’, ‘condition’
[10:25:37.018]   - Field: ‘calls’
[10:25:37.057]  - Condition #26: ‘simpleMessage’, ‘message’, ‘condition’
[10:25:37.018]   - Field: ‘globals’
[10:25:37.058]  - Condition #27: ‘simpleMessage’, ‘message’, ‘condition’
[10:25:37.018]   - Field: ‘stdout’
[10:25:37.058]  - Condition #28: ‘simpleMessage’, ‘message’, ‘condition’
[10:25:37.018]   - Field: ‘earlySignal’
[10:25:37.058]  - Condition #29: ‘simpleMessage’, ‘message’, ‘condition’
[10:25:37.018]   - Field: ‘lazy’
[10:25:37.058]  - Condition #30: ‘simpleMessage’, ‘message’, ‘condition’
[10:25:37.018]   - Field: ‘state’
[10:25:37.058]  - Condition #31: ‘simpleMessage’, ‘message’, ‘condition’
[10:25:37.019] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[10:25:37.058]  - Condition #32: ‘simpleMessage’, ‘message’, ‘condition’
[10:25:37.019] - Launch lazy future ...
[10:25:37.059]  - Condition #33: ‘simpleMessage’, ‘message’, ‘condition’
[10:25:37.019] Packages needed by the future expression (n = 0): <none>
[10:25:37.059]  - Condition #34: ‘simpleMessage’, ‘message’, ‘condition’
[10:25:37.019] Packages needed by future strategies (n = 0): <none>
[10:25:37.059]  - Condition #35: ‘simpleMessage’, ‘message’, ‘condition’
[10:25:37.020] {
[10:25:37.020]     {
[10:25:37.020]         {
[10:25:37.020]             ...future.startTime <- base::Sys.time()
[10:25:37.020]             {
[10:25:37.020]                 {
[10:25:37.020]                   {
[10:25:37.020]                     base::local({
[10:25:37.020]                       has_future <- base::requireNamespace("future", 
[10:25:37.020]                         quietly = TRUE)
[10:25:37.020]                       if (has_future) {
[10:25:37.020]                         ns <- base::getNamespace("future")
[10:25:37.020]                         version <- ns[[".package"]][["version"]]
[10:25:37.020]                         if (is.null(version)) 
[10:25:37.020]                           version <- utils::packageVersion("future")
[10:25:37.020]                       }
[10:25:37.020]                       else {
[10:25:37.020]                         version <- NULL
[10:25:37.020]                       }
[10:25:37.020]                       if (!has_future || version < "1.8.0") {
[10:25:37.020]                         info <- base::c(r_version = base::gsub("R version ", 
[10:25:37.020]                           "", base::R.version$version.string), 
[10:25:37.020]                           platform = base::sprintf("%s (%s-bit)", 
[10:25:37.020]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:25:37.020]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[10:25:37.020]                             "release", "version")], collapse = " "), 
[10:25:37.020]                           hostname = base::Sys.info()[["nodename"]])
[10:25:37.020]                         info <- base::sprintf("%s: %s", base::names(info), 
[10:25:37.020]                           info)
[10:25:37.020]                         info <- base::paste(info, collapse = "; ")
[10:25:37.020]                         if (!has_future) {
[10:25:37.020]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:25:37.020]                             info)
[10:25:37.020]                         }
[10:25:37.020]                         else {
[10:25:37.020]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:25:37.020]                             info, version)
[10:25:37.020]                         }
[10:25:37.020]                         base::stop(msg)
[10:25:37.020]                       }
[10:25:37.020]                     })
[10:25:37.020]                   }
[10:25:37.020]                   options(future.plan = NULL)
[10:25:37.020]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:25:37.020]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:25:37.020]                 }
[10:25:37.020]                 ...future.workdir <- getwd()
[10:25:37.020]             }
[10:25:37.020]             ...future.oldOptions <- base::as.list(base::.Options)
[10:25:37.020]             ...future.oldEnvVars <- base::Sys.getenv()
[10:25:37.020]         }
[10:25:37.020]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:25:37.020]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[10:25:37.020]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:25:37.020]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:25:37.020]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:25:37.020]             future.stdout.windows.reencode = NULL, width = 80L)
[10:25:37.020]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:25:37.020]             base::names(...future.oldOptions))
[10:25:37.020]     }
[10:25:37.020]     if (FALSE) {
[10:25:37.020]     }
[10:25:37.020]     else {
[10:25:37.020]         if (TRUE) {
[10:25:37.020]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:25:37.020]                 open = "w")
[10:25:37.020]         }
[10:25:37.020]         else {
[10:25:37.020]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:25:37.020]                 windows = "NUL", "/dev/null"), open = "w")
[10:25:37.020]         }
[10:25:37.020]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:25:37.020]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:25:37.020]             base::sink(type = "output", split = FALSE)
[10:25:37.020]             base::close(...future.stdout)
[10:25:37.020]         }, add = TRUE)
[10:25:37.020]     }
[10:25:37.020]     ...future.frame <- base::sys.nframe()
[10:25:37.020]     ...future.conditions <- base::list()
[10:25:37.020]     ...future.rng <- base::globalenv()$.Random.seed
[10:25:37.020]     if (FALSE) {
[10:25:37.020]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:25:37.020]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:25:37.020]     }
[10:25:37.020]     ...future.result <- base::tryCatch({
[10:25:37.020]         base::withCallingHandlers({
[10:25:37.020]             ...future.value <- base::withVisible(base::local(2))
[10:25:37.020]             future::FutureResult(value = ...future.value$value, 
[10:25:37.020]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:25:37.020]                   ...future.rng), globalenv = if (FALSE) 
[10:25:37.020]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:25:37.020]                     ...future.globalenv.names))
[10:25:37.020]                 else NULL, started = ...future.startTime, version = "1.8")
[10:25:37.020]         }, condition = base::local({
[10:25:37.020]             c <- base::c
[10:25:37.020]             inherits <- base::inherits
[10:25:37.020]             invokeRestart <- base::invokeRestart
[10:25:37.020]             length <- base::length
[10:25:37.020]             list <- base::list
[10:25:37.020]             seq.int <- base::seq.int
[10:25:37.020]             signalCondition <- base::signalCondition
[10:25:37.020]             sys.calls <- base::sys.calls
[10:25:37.020]             `[[` <- base::`[[`
[10:25:37.020]             `+` <- base::`+`
[10:25:37.020]             `<<-` <- base::`<<-`
[10:25:37.020]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:25:37.020]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:25:37.020]                   3L)]
[10:25:37.020]             }
[10:25:37.020]             function(cond) {
[10:25:37.020]                 is_error <- inherits(cond, "error")
[10:25:37.020]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:25:37.020]                   NULL)
[10:25:37.020]                 if (is_error) {
[10:25:37.020]                   sessionInformation <- function() {
[10:25:37.020]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:25:37.020]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:25:37.020]                       search = base::search(), system = base::Sys.info())
[10:25:37.020]                   }
[10:25:37.020]                   ...future.conditions[[length(...future.conditions) + 
[10:25:37.020]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:25:37.020]                     cond$call), session = sessionInformation(), 
[10:25:37.020]                     timestamp = base::Sys.time(), signaled = 0L)
[10:25:37.020]                   signalCondition(cond)
[10:25:37.020]                 }
[10:25:37.020]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:25:37.020]                 "immediateCondition"))) {
[10:25:37.020]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:25:37.020]                   ...future.conditions[[length(...future.conditions) + 
[10:25:37.020]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:25:37.020]                   if (TRUE && !signal) {
[10:25:37.020]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:25:37.020]                     {
[10:25:37.020]                       inherits <- base::inherits
[10:25:37.020]                       invokeRestart <- base::invokeRestart
[10:25:37.020]                       is.null <- base::is.null
[10:25:37.020]                       muffled <- FALSE
[10:25:37.020]                       if (inherits(cond, "message")) {
[10:25:37.020]                         muffled <- grepl(pattern, "muffleMessage")
[10:25:37.020]                         if (muffled) 
[10:25:37.020]                           invokeRestart("muffleMessage")
[10:25:37.020]                       }
[10:25:37.020]                       else if (inherits(cond, "warning")) {
[10:25:37.020]                         muffled <- grepl(pattern, "muffleWarning")
[10:25:37.020]                         if (muffled) 
[10:25:37.020]                           invokeRestart("muffleWarning")
[10:25:37.020]                       }
[10:25:37.020]                       else if (inherits(cond, "condition")) {
[10:25:37.020]                         if (!is.null(pattern)) {
[10:25:37.020]                           computeRestarts <- base::computeRestarts
[10:25:37.020]                           grepl <- base::grepl
[10:25:37.020]                           restarts <- computeRestarts(cond)
[10:25:37.020]                           for (restart in restarts) {
[10:25:37.020]                             name <- restart$name
[10:25:37.020]                             if (is.null(name)) 
[10:25:37.020]                               next
[10:25:37.020]                             if (!grepl(pattern, name)) 
[10:25:37.020]                               next
[10:25:37.020]                             invokeRestart(restart)
[10:25:37.020]                             muffled <- TRUE
[10:25:37.020]                             break
[10:25:37.020]                           }
[10:25:37.020]                         }
[10:25:37.020]                       }
[10:25:37.020]                       invisible(muffled)
[10:25:37.020]                     }
[10:25:37.020]                     muffleCondition(cond, pattern = "^muffle")
[10:25:37.020]                   }
[10:25:37.020]                 }
[10:25:37.020]                 else {
[10:25:37.020]                   if (TRUE) {
[10:25:37.020]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:25:37.020]                     {
[10:25:37.020]                       inherits <- base::inherits
[10:25:37.020]                       invokeRestart <- base::invokeRestart
[10:25:37.020]                       is.null <- base::is.null
[10:25:37.020]                       muffled <- FALSE
[10:25:37.020]                       if (inherits(cond, "message")) {
[10:25:37.020]                         muffled <- grepl(pattern, "muffleMessage")
[10:25:37.020]                         if (muffled) 
[10:25:37.020]                           invokeRestart("muffleMessage")
[10:25:37.020]                       }
[10:25:37.020]                       else if (inherits(cond, "warning")) {
[10:25:37.020]                         muffled <- grepl(pattern, "muffleWarning")
[10:25:37.020]                         if (muffled) 
[10:25:37.020]                           invokeRestart("muffleWarning")
[10:25:37.020]                       }
[10:25:37.020]                       else if (inherits(cond, "condition")) {
[10:25:37.020]                         if (!is.null(pattern)) {
[10:25:37.020]                           computeRestarts <- base::computeRestarts
[10:25:37.020]                           grepl <- base::grepl
[10:25:37.020]                           restarts <- computeRestarts(cond)
[10:25:37.020]                           for (restart in restarts) {
[10:25:37.020]                             name <- restart$name
[10:25:37.020]                             if (is.null(name)) 
[10:25:37.020]                               next
[10:25:37.020]                             if (!grepl(pattern, name)) 
[10:25:37.020]                               next
[10:25:37.020]                             invokeRestart(restart)
[10:25:37.020]                             muffled <- TRUE
[10:25:37.020]                             break
[10:25:37.020]                           }
[10:25:37.020]                         }
[10:25:37.020]                       }
[10:25:37.020]                       invisible(muffled)
[10:25:37.020]                     }
[10:25:37.020]                     muffleCondition(cond, pattern = "^muffle")
[10:25:37.020]                   }
[10:25:37.020]                 }
[10:25:37.020]             }
[10:25:37.020]         }))
[10:25:37.020]     }, error = function(ex) {
[10:25:37.020]         base::structure(base::list(value = NULL, visible = NULL, 
[10:25:37.020]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:25:37.020]                 ...future.rng), started = ...future.startTime, 
[10:25:37.020]             finished = Sys.time(), session_uuid = NA_character_, 
[10:25:37.020]             version = "1.8"), class = "FutureResult")
[10:25:37.020]     }, finally = {
[10:25:37.020]         if (!identical(...future.workdir, getwd())) 
[10:25:37.020]             setwd(...future.workdir)
[10:25:37.020]         {
[10:25:37.020]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:25:37.020]                 ...future.oldOptions$nwarnings <- NULL
[10:25:37.020]             }
[10:25:37.020]             base::options(...future.oldOptions)
[10:25:37.020]             if (.Platform$OS.type == "windows") {
[10:25:37.020]                 old_names <- names(...future.oldEnvVars)
[10:25:37.020]                 envs <- base::Sys.getenv()
[10:25:37.020]                 names <- names(envs)
[10:25:37.020]                 common <- intersect(names, old_names)
[10:25:37.020]                 added <- setdiff(names, old_names)
[10:25:37.020]                 removed <- setdiff(old_names, names)
[10:25:37.020]                 changed <- common[...future.oldEnvVars[common] != 
[10:25:37.020]                   envs[common]]
[10:25:37.020]                 NAMES <- toupper(changed)
[10:25:37.020]                 args <- list()
[10:25:37.020]                 for (kk in seq_along(NAMES)) {
[10:25:37.020]                   name <- changed[[kk]]
[10:25:37.020]                   NAME <- NAMES[[kk]]
[10:25:37.020]                   if (name != NAME && is.element(NAME, old_names)) 
[10:25:37.020]                     next
[10:25:37.020]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:25:37.020]                 }
[10:25:37.020]                 NAMES <- toupper(added)
[10:25:37.020]                 for (kk in seq_along(NAMES)) {
[10:25:37.020]                   name <- added[[kk]]
[10:25:37.020]                   NAME <- NAMES[[kk]]
[10:25:37.020]                   if (name != NAME && is.element(NAME, old_names)) 
[10:25:37.020]                     next
[10:25:37.020]                   args[[name]] <- ""
[10:25:37.020]                 }
[10:25:37.020]                 NAMES <- toupper(removed)
[10:25:37.020]                 for (kk in seq_along(NAMES)) {
[10:25:37.020]                   name <- removed[[kk]]
[10:25:37.020]                   NAME <- NAMES[[kk]]
[10:25:37.020]                   if (name != NAME && is.element(NAME, old_names)) 
[10:25:37.020]                     next
[10:25:37.020]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:25:37.020]                 }
[10:25:37.020]                 if (length(args) > 0) 
[10:25:37.020]                   base::do.call(base::Sys.setenv, args = args)
[10:25:37.020]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:25:37.020]             }
[10:25:37.020]             else {
[10:25:37.020]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:25:37.020]             }
[10:25:37.020]             {
[10:25:37.020]                 if (base::length(...future.futureOptionsAdded) > 
[10:25:37.020]                   0L) {
[10:25:37.020]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:25:37.020]                   base::names(opts) <- ...future.futureOptionsAdded
[10:25:37.020]                   base::options(opts)
[10:25:37.020]                 }
[10:25:37.020]                 {
[10:25:37.020]                   {
[10:25:37.020]                     NULL
[10:25:37.020]                     RNGkind("Mersenne-Twister")
[10:25:37.020]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[10:25:37.020]                       inherits = FALSE)
[10:25:37.020]                   }
[10:25:37.020]                   options(future.plan = NULL)
[10:25:37.020]                   if (is.na(NA_character_)) 
[10:25:37.020]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:25:37.020]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:25:37.020]                   future::plan(list(function (..., envir = parent.frame()) 
[10:25:37.020]                   {
[10:25:37.020]                     future <- SequentialFuture(..., envir = envir)
[10:25:37.020]                     if (!future$lazy) 
[10:25:37.020]                       future <- run(future)
[10:25:37.020]                     invisible(future)
[10:25:37.020]                   }), .cleanup = FALSE, .init = FALSE)
[10:25:37.020]                 }
[10:25:37.020]             }
[10:25:37.020]         }
[10:25:37.020]     })
[10:25:37.020]     if (TRUE) {
[10:25:37.020]         base::sink(type = "output", split = FALSE)
[10:25:37.020]         if (TRUE) {
[10:25:37.020]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:25:37.020]         }
[10:25:37.020]         else {
[10:25:37.020]             ...future.result["stdout"] <- base::list(NULL)
[10:25:37.020]         }
[10:25:37.020]         base::close(...future.stdout)
[10:25:37.020]         ...future.stdout <- NULL
[10:25:37.020]     }
[10:25:37.020]     ...future.result$conditions <- ...future.conditions
[10:25:37.020]     ...future.result$finished <- base::Sys.time()
[10:25:37.020]     ...future.result
[10:25:37.020] }
[10:25:37.059]  - Condition #36: ‘simpleMessage’, ‘message’, ‘condition’
[10:25:37.023] plan(): Setting new future strategy stack:
[10:25:37.059]  - Condition #37: ‘simpleMessage’, ‘message’, ‘condition’
[10:25:37.023] List of future strategies:
[10:25:37.023] 1. sequential:
[10:25:37.023]    - args: function (..., envir = parent.frame())
[10:25:37.023]    - tweaked: FALSE
[10:25:37.023]    - call: NULL
[10:25:37.059]  - Condition #38: ‘simpleMessage’, ‘message’, ‘condition’
[10:25:37.024] plan(): nbrOfWorkers() = 1
[10:25:37.060]  - Condition #39: ‘simpleMessage’, ‘message’, ‘condition’
[10:25:37.025] plan(): Setting new future strategy stack:
[10:25:37.060]  - Condition #40: ‘simpleMessage’, ‘message’, ‘condition’
[10:25:37.025] List of future strategies:
[10:25:37.025] 1. sequential:
[10:25:37.025]    - args: function (..., envir = parent.frame())
[10:25:37.025]    - tweaked: FALSE
[10:25:37.025]    - call: NULL
[10:25:37.060]  - Condition #41: ‘simpleMessage’, ‘message’, ‘condition’
[10:25:37.025] plan(): nbrOfWorkers() = 1
[10:25:37.060]  - Condition #42: ‘simpleMessage’, ‘message’, ‘condition’
[10:25:37.026] SequentialFuture started (and completed)
[10:25:37.060]  - Condition #43: ‘simpleMessage’, ‘message’, ‘condition’
[10:25:37.026] - Launch lazy future ... done
[10:25:37.060]  - Condition #44: ‘simpleMessage’, ‘message’, ‘condition’
[10:25:37.026] run() for ‘SequentialFuture’ ... done
[10:25:37.060]  - Condition #45: ‘simpleMessage’, ‘message’, ‘condition’
[10:25:37.026] getGlobalsAndPackages() ...
[10:25:37.061]  - Condition #46: ‘simpleMessage’, ‘message’, ‘condition’
[10:25:37.027] Searching for globals...
[10:25:37.061]  - Condition #47: ‘simpleMessage’, ‘message’, ‘condition’
[10:25:37.027] 
[10:25:37.061]  - Condition #48: ‘simpleMessage’, ‘message’, ‘condition’
[10:25:37.027] Searching for globals ... DONE
[10:25:37.061]  - Condition #49: ‘simpleMessage’, ‘message’, ‘condition’
[10:25:37.027] - globals: [0] <none>
[10:25:37.061]  - Condition #50: ‘simpleMessage’, ‘message’, ‘condition’
[10:25:37.027] getGlobalsAndPackages() ... DONE
[10:25:37.061]  - Condition #51: ‘simpleMessage’, ‘message’, ‘condition’
[10:25:37.028] run() for ‘Future’ ...
[10:25:37.062]  - Condition #52: ‘simpleMessage’, ‘message’, ‘condition’
[10:25:37.028] - state: ‘created’
[10:25:37.062]  - Condition #53: ‘simpleMessage’, ‘message’, ‘condition’
[10:25:37.028] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:25:37.062]  - Condition #54: ‘simpleMessage’, ‘message’, ‘condition’
[10:25:37.029] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[10:25:37.062]  - Condition #55: ‘simpleMessage’, ‘message’, ‘condition’
[10:25:37.029] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[10:25:37.062]  - Condition #56: ‘simpleMessage’, ‘message’, ‘condition’
[10:25:37.029]   - Field: ‘label’
[10:25:37.062]  - Condition #57: ‘simpleMessage’, ‘message’, ‘condition’
[10:25:37.029]   - Field: ‘local’
[10:25:37.062]  - Condition #58: ‘simpleMessage’, ‘message’, ‘condition’
[10:25:37.029]   - Field: ‘owner’
[10:25:37.063]  - Condition #59: ‘simpleMessage’, ‘message’, ‘condition’
[10:25:37.029]   - Field: ‘envir’
[10:25:37.063]  - Condition #60: ‘simpleMessage’, ‘message’, ‘condition’
[10:25:37.030]   - Field: ‘packages’
[10:25:37.063]  - Condition #61: ‘simpleMessage’, ‘message’, ‘condition’
[10:25:37.030]   - Field: ‘gc’
[10:25:37.063]  - Condition #62: ‘simpleMessage’, ‘message’, ‘condition’
[10:25:37.030]   - Field: ‘conditions’
[10:25:37.063]  - Condition #63: ‘simpleMessage’, ‘message’, ‘condition’
[10:25:37.030]   - Field: ‘expr’
[10:25:37.063]  - Condition #64: ‘simpleMessage’, ‘message’, ‘condition’
[10:25:37.030]   - Field: ‘uuid’
[10:25:37.064]  - Condition #65: ‘simpleMessage’, ‘message’, ‘condition’
[10:25:37.030]   - Field: ‘seed’
[10:25:37.064]  - Condition #66: ‘simpleMessage’, ‘message’, ‘condition’
[10:25:37.030]   - Field: ‘version’
[10:25:37.064]  - Condition #67: ‘simpleMessage’, ‘message’, ‘condition’
[10:25:37.031]   - Field: ‘result’
[10:25:37.064]  - Condition #68: ‘simpleMessage’, ‘message’, ‘condition’
[10:25:37.031]   - Field: ‘asynchronous’
[10:25:37.064]  - Condition #69: ‘simpleMessage’, ‘message’, ‘condition’
[10:25:37.031]   - Field: ‘calls’
[10:25:37.064]  - Condition #70: ‘simpleMessage’, ‘message’, ‘condition’
[10:25:37.031]   - Field: ‘globals’
[10:25:37.065]  - Condition #71: ‘simpleMessage’, ‘message’, ‘condition’
[10:25:37.031]   - Field: ‘stdout’
[10:25:37.065]  - Condition #72: ‘simpleMessage’, ‘message’, ‘condition’
[10:25:37.031]   - Field: ‘earlySignal’
[10:25:37.065]  - Condition #73: ‘simpleMessage’, ‘message’, ‘condition’
[10:25:37.031]   - Field: ‘lazy’
[10:25:37.065]  - Condition #74: ‘simpleMessage’, ‘message’, ‘condition’
[10:25:37.032]   - Field: ‘state’
[10:25:37.065]  - Condition #75: ‘simpleMessage’, ‘message’, ‘condition’
[10:25:37.032] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[10:25:37.065]  - Condition #76: ‘simpleMessage’, ‘message’, ‘condition’
[10:25:37.032] - Launch lazy future ...
[10:25:37.066]  - Condition #77: ‘simpleMessage’, ‘message’, ‘condition’
[10:25:37.032] Packages needed by the future expression (n = 0): <none>
[10:25:37.066]  - Condition #78: ‘simpleMessage’, ‘message’, ‘condition’
[10:25:37.032] Packages needed by future strategies (n = 0): <none>
[10:25:37.068]  - Condition #79: ‘simpleMessage’, ‘message’, ‘condition’
[10:25:37.033] {
[10:25:37.033]     {
[10:25:37.033]         {
[10:25:37.033]             ...future.startTime <- base::Sys.time()
[10:25:37.033]             {
[10:25:37.033]                 {
[10:25:37.033]                   {
[10:25:37.033]                     base::local({
[10:25:37.033]                       has_future <- base::requireNamespace("future", 
[10:25:37.033]                         quietly = TRUE)
[10:25:37.033]                       if (has_future) {
[10:25:37.033]                         ns <- base::getNamespace("future")
[10:25:37.033]                         version <- ns[[".package"]][["version"]]
[10:25:37.033]                         if (is.null(version)) 
[10:25:37.033]                           version <- utils::packageVersion("future")
[10:25:37.033]                       }
[10:25:37.033]                       else {
[10:25:37.033]                         version <- NULL
[10:25:37.033]                       }
[10:25:37.033]                       if (!has_future || version < "1.8.0") {
[10:25:37.033]                         info <- base::c(r_version = base::gsub("R version ", 
[10:25:37.033]                           "", base::R.version$version.string), 
[10:25:37.033]                           platform = base::sprintf("%s (%s-bit)", 
[10:25:37.033]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:25:37.033]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[10:25:37.033]                             "release", "version")], collapse = " "), 
[10:25:37.033]                           hostname = base::Sys.info()[["nodename"]])
[10:25:37.033]                         info <- base::sprintf("%s: %s", base::names(info), 
[10:25:37.033]                           info)
[10:25:37.033]                         info <- base::paste(info, collapse = "; ")
[10:25:37.033]                         if (!has_future) {
[10:25:37.033]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:25:37.033]                             info)
[10:25:37.033]                         }
[10:25:37.033]                         else {
[10:25:37.033]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:25:37.033]                             info, version)
[10:25:37.033]                         }
[10:25:37.033]                         base::stop(msg)
[10:25:37.033]                       }
[10:25:37.033]                     })
[10:25:37.033]                   }
[10:25:37.033]                   options(future.plan = NULL)
[10:25:37.033]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:25:37.033]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:25:37.033]                 }
[10:25:37.033]                 ...future.workdir <- getwd()
[10:25:37.033]             }
[10:25:37.033]             ...future.oldOptions <- base::as.list(base::.Options)
[10:25:37.033]             ...future.oldEnvVars <- base::Sys.getenv()
[10:25:37.033]         }
[10:25:37.033]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:25:37.033]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[10:25:37.033]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:25:37.033]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:25:37.033]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:25:37.033]             future.stdout.windows.reencode = NULL, width = 80L)
[10:25:37.033]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:25:37.033]             base::names(...future.oldOptions))
[10:25:37.033]     }
[10:25:37.033]     if (FALSE) {
[10:25:37.033]     }
[10:25:37.033]     else {
[10:25:37.033]         if (TRUE) {
[10:25:37.033]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:25:37.033]                 open = "w")
[10:25:37.033]         }
[10:25:37.033]         else {
[10:25:37.033]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:25:37.033]                 windows = "NUL", "/dev/null"), open = "w")
[10:25:37.033]         }
[10:25:37.033]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:25:37.033]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:25:37.033]             base::sink(type = "output", split = FALSE)
[10:25:37.033]             base::close(...future.stdout)
[10:25:37.033]         }, add = TRUE)
[10:25:37.033]     }
[10:25:37.033]     ...future.frame <- base::sys.nframe()
[10:25:37.033]     ...future.conditions <- base::list()
[10:25:37.033]     ...future.rng <- base::globalenv()$.Random.seed
[10:25:37.033]     if (FALSE) {
[10:25:37.033]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:25:37.033]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:25:37.033]     }
[10:25:37.033]     ...future.result <- base::tryCatch({
[10:25:37.033]         base::withCallingHandlers({
[10:25:37.033]             ...future.value <- base::withVisible(base::local(4))
[10:25:37.033]             future::FutureResult(value = ...future.value$value, 
[10:25:37.033]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:25:37.033]                   ...future.rng), globalenv = if (FALSE) 
[10:25:37.033]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:25:37.033]                     ...future.globalenv.names))
[10:25:37.033]                 else NULL, started = ...future.startTime, version = "1.8")
[10:25:37.033]         }, condition = base::local({
[10:25:37.033]             c <- base::c
[10:25:37.033]             inherits <- base::inherits
[10:25:37.033]             invokeRestart <- base::invokeRestart
[10:25:37.033]             length <- base::length
[10:25:37.033]             list <- base::list
[10:25:37.033]             seq.int <- base::seq.int
[10:25:37.033]             signalCondition <- base::signalCondition
[10:25:37.033]             sys.calls <- base::sys.calls
[10:25:37.033]             `[[` <- base::`[[`
[10:25:37.033]             `+` <- base::`+`
[10:25:37.033]             `<<-` <- base::`<<-`
[10:25:37.033]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:25:37.033]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:25:37.033]                   3L)]
[10:25:37.033]             }
[10:25:37.033]             function(cond) {
[10:25:37.033]                 is_error <- inherits(cond, "error")
[10:25:37.033]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:25:37.033]                   NULL)
[10:25:37.033]                 if (is_error) {
[10:25:37.033]                   sessionInformation <- function() {
[10:25:37.033]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:25:37.033]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:25:37.033]                       search = base::search(), system = base::Sys.info())
[10:25:37.033]                   }
[10:25:37.033]                   ...future.conditions[[length(...future.conditions) + 
[10:25:37.033]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:25:37.033]                     cond$call), session = sessionInformation(), 
[10:25:37.033]                     timestamp = base::Sys.time(), signaled = 0L)
[10:25:37.033]                   signalCondition(cond)
[10:25:37.033]                 }
[10:25:37.033]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:25:37.033]                 "immediateCondition"))) {
[10:25:37.033]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:25:37.033]                   ...future.conditions[[length(...future.conditions) + 
[10:25:37.033]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:25:37.033]                   if (TRUE && !signal) {
[10:25:37.033]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:25:37.033]                     {
[10:25:37.033]                       inherits <- base::inherits
[10:25:37.033]                       invokeRestart <- base::invokeRestart
[10:25:37.033]                       is.null <- base::is.null
[10:25:37.033]                       muffled <- FALSE
[10:25:37.033]                       if (inherits(cond, "message")) {
[10:25:37.033]                         muffled <- grepl(pattern, "muffleMessage")
[10:25:37.033]                         if (muffled) 
[10:25:37.033]                           invokeRestart("muffleMessage")
[10:25:37.033]                       }
[10:25:37.033]                       else if (inherits(cond, "warning")) {
[10:25:37.033]                         muffled <- grepl(pattern, "muffleWarning")
[10:25:37.033]                         if (muffled) 
[10:25:37.033]                           invokeRestart("muffleWarning")
[10:25:37.033]                       }
[10:25:37.033]                       else if (inherits(cond, "condition")) {
[10:25:37.033]                         if (!is.null(pattern)) {
[10:25:37.033]                           computeRestarts <- base::computeRestarts
[10:25:37.033]                           grepl <- base::grepl
[10:25:37.033]                           restarts <- computeRestarts(cond)
[10:25:37.033]                           for (restart in restarts) {
[10:25:37.033]                             name <- restart$name
[10:25:37.033]                             if (is.null(name)) 
[10:25:37.033]                               next
[10:25:37.033]                             if (!grepl(pattern, name)) 
[10:25:37.033]                               next
[10:25:37.033]                             invokeRestart(restart)
[10:25:37.033]                             muffled <- TRUE
[10:25:37.033]                             break
[10:25:37.033]                           }
[10:25:37.033]                         }
[10:25:37.033]                       }
[10:25:37.033]                       invisible(muffled)
[10:25:37.033]                     }
[10:25:37.033]                     muffleCondition(cond, pattern = "^muffle")
[10:25:37.033]                   }
[10:25:37.033]                 }
[10:25:37.033]                 else {
[10:25:37.033]                   if (TRUE) {
[10:25:37.033]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:25:37.033]                     {
[10:25:37.033]                       inherits <- base::inherits
[10:25:37.033]                       invokeRestart <- base::invokeRestart
[10:25:37.033]                       is.null <- base::is.null
[10:25:37.033]                       muffled <- FALSE
[10:25:37.033]                       if (inherits(cond, "message")) {
[10:25:37.033]                         muffled <- grepl(pattern, "muffleMessage")
[10:25:37.033]                         if (muffled) 
[10:25:37.033]                           invokeRestart("muffleMessage")
[10:25:37.033]                       }
[10:25:37.033]                       else if (inherits(cond, "warning")) {
[10:25:37.033]                         muffled <- grepl(pattern, "muffleWarning")
[10:25:37.033]                         if (muffled) 
[10:25:37.033]                           invokeRestart("muffleWarning")
[10:25:37.033]                       }
[10:25:37.033]                       else if (inherits(cond, "condition")) {
[10:25:37.033]                         if (!is.null(pattern)) {
[10:25:37.033]                           computeRestarts <- base::computeRestarts
[10:25:37.033]                           grepl <- base::grepl
[10:25:37.033]                           restarts <- computeRestarts(cond)
[10:25:37.033]                           for (restart in restarts) {
[10:25:37.033]                             name <- restart$name
[10:25:37.033]                             if (is.null(name)) 
[10:25:37.033]                               next
[10:25:37.033]                             if (!grepl(pattern, name)) 
[10:25:37.033]                               next
[10:25:37.033]                             invokeRestart(restart)
[10:25:37.033]                             muffled <- TRUE
[10:25:37.033]                             break
[10:25:37.033]                           }
[10:25:37.033]                         }
[10:25:37.033]                       }
[10:25:37.033]                       invisible(muffled)
[10:25:37.033]                     }
[10:25:37.033]                     muffleCondition(cond, pattern = "^muffle")
[10:25:37.033]                   }
[10:25:37.033]                 }
[10:25:37.033]             }
[10:25:37.033]         }))
[10:25:37.033]     }, error = function(ex) {
[10:25:37.033]         base::structure(base::list(value = NULL, visible = NULL, 
[10:25:37.033]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:25:37.033]                 ...future.rng), started = ...future.startTime, 
[10:25:37.033]             finished = Sys.time(), session_uuid = NA_character_, 
[10:25:37.033]             version = "1.8"), class = "FutureResult")
[10:25:37.033]     }, finally = {
[10:25:37.033]         if (!identical(...future.workdir, getwd())) 
[10:25:37.033]             setwd(...future.workdir)
[10:25:37.033]         {
[10:25:37.033]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:25:37.033]                 ...future.oldOptions$nwarnings <- NULL
[10:25:37.033]             }
[10:25:37.033]             base::options(...future.oldOptions)
[10:25:37.033]             if (.Platform$OS.type == "windows") {
[10:25:37.033]                 old_names <- names(...future.oldEnvVars)
[10:25:37.033]                 envs <- base::Sys.getenv()
[10:25:37.033]                 names <- names(envs)
[10:25:37.033]                 common <- intersect(names, old_names)
[10:25:37.033]                 added <- setdiff(names, old_names)
[10:25:37.033]                 removed <- setdiff(old_names, names)
[10:25:37.033]                 changed <- common[...future.oldEnvVars[common] != 
[10:25:37.033]                   envs[common]]
[10:25:37.033]                 NAMES <- toupper(changed)
[10:25:37.033]                 args <- list()
[10:25:37.033]                 for (kk in seq_along(NAMES)) {
[10:25:37.033]                   name <- changed[[kk]]
[10:25:37.033]                   NAME <- NAMES[[kk]]
[10:25:37.033]                   if (name != NAME && is.element(NAME, old_names)) 
[10:25:37.033]                     next
[10:25:37.033]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:25:37.033]                 }
[10:25:37.033]                 NAMES <- toupper(added)
[10:25:37.033]                 for (kk in seq_along(NAMES)) {
[10:25:37.033]                   name <- added[[kk]]
[10:25:37.033]                   NAME <- NAMES[[kk]]
[10:25:37.033]                   if (name != NAME && is.element(NAME, old_names)) 
[10:25:37.033]                     next
[10:25:37.033]                   args[[name]] <- ""
[10:25:37.033]                 }
[10:25:37.033]                 NAMES <- toupper(removed)
[10:25:37.033]                 for (kk in seq_along(NAMES)) {
[10:25:37.033]                   name <- removed[[kk]]
[10:25:37.033]                   NAME <- NAMES[[kk]]
[10:25:37.033]                   if (name != NAME && is.element(NAME, old_names)) 
[10:25:37.033]                     next
[10:25:37.033]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:25:37.033]                 }
[10:25:37.033]                 if (length(args) > 0) 
[10:25:37.033]                   base::do.call(base::Sys.setenv, args = args)
[10:25:37.033]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:25:37.033]             }
[10:25:37.033]             else {
[10:25:37.033]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:25:37.033]             }
[10:25:37.033]             {
[10:25:37.033]                 if (base::length(...future.futureOptionsAdded) > 
[10:25:37.033]                   0L) {
[10:25:37.033]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:25:37.033]                   base::names(opts) <- ...future.futureOptionsAdded
[10:25:37.033]                   base::options(opts)
[10:25:37.033]                 }
[10:25:37.033]                 {
[10:25:37.033]                   {
[10:25:37.033]                     NULL
[10:25:37.033]                     RNGkind("Mersenne-Twister")
[10:25:37.033]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[10:25:37.033]                       inherits = FALSE)
[10:25:37.033]                   }
[10:25:37.033]                   options(future.plan = NULL)
[10:25:37.033]                   if (is.na(NA_character_)) 
[10:25:37.033]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:25:37.033]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:25:37.033]                   future::plan(list(function (..., envir = parent.frame()) 
[10:25:37.033]                   {
[10:25:37.033]                     future <- SequentialFuture(..., envir = envir)
[10:25:37.033]                     if (!future$lazy) 
[10:25:37.033]                       future <- run(future)
[10:25:37.033]                     invisible(future)
[10:25:37.033]                   }), .cleanup = FALSE, .init = FALSE)
[10:25:37.033]                 }
[10:25:37.033]             }
[10:25:37.033]         }
[10:25:37.033]     })
[10:25:37.033]     if (TRUE) {
[10:25:37.033]         base::sink(type = "output", split = FALSE)
[10:25:37.033]         if (TRUE) {
[10:25:37.033]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:25:37.033]         }
[10:25:37.033]         else {
[10:25:37.033]             ...future.result["stdout"] <- base::list(NULL)
[10:25:37.033]         }
[10:25:37.033]         base::close(...future.stdout)
[10:25:37.033]         ...future.stdout <- NULL
[10:25:37.033]     }
[10:25:37.033]     ...future.result$conditions <- ...future.conditions
[10:25:37.033]     ...future.result$finished <- base::Sys.time()
[10:25:37.033]     ...future.result
[10:25:37.033] }
[10:25:37.068]  - Condition #80: ‘simpleMessage’, ‘message’, ‘condition’
[10:25:37.035] plan(): Setting new future strategy stack:
[10:25:37.068]  - Condition #81: ‘simpleMessage’, ‘message’, ‘condition’
[10:25:37.035] List of future strategies:
[10:25:37.035] 1. sequential:
[10:25:37.035]    - args: function (..., envir = parent.frame())
[10:25:37.035]    - tweaked: FALSE
[10:25:37.035]    - call: NULL
[10:25:37.069]  - Condition #82: ‘simpleMessage’, ‘message’, ‘condition’
[10:25:37.036] plan(): nbrOfWorkers() = 1
[10:25:37.069]  - Condition #83: ‘simpleMessage’, ‘message’, ‘condition’
[10:25:37.040] plan(): Setting new future strategy stack:
[10:25:37.069]  - Condition #84: ‘simpleMessage’, ‘message’, ‘condition’
[10:25:37.040] List of future strategies:
[10:25:37.040] 1. sequential:
[10:25:37.040]    - args: function (..., envir = parent.frame())
[10:25:37.040]    - tweaked: FALSE
[10:25:37.040]    - call: NULL
[10:25:37.069]  - Condition #85: ‘simpleMessage’, ‘message’, ‘condition’
[10:25:37.040] plan(): nbrOfWorkers() = 1
[10:25:37.069]  - Condition #86: ‘simpleMessage’, ‘message’, ‘condition’
[10:25:37.041] SequentialFuture started (and completed)
[10:25:37.070]  - Condition #87: ‘simpleMessage’, ‘message’, ‘condition’
[10:25:37.041] - Launch lazy future ... done
[10:25:37.070]  - Condition #88: ‘simpleMessage’, ‘message’, ‘condition’
[10:25:37.041] run() for ‘SequentialFuture’ ... done
[10:25:37.070] signalConditions() ... done
a = 10
[10:25:37.071] getGlobalsAndPackages() ...
[10:25:37.071] Searching for globals...
[10:25:37.072] - globals found: [3] ‘{’, ‘+’, ‘a’
[10:25:37.072] Searching for globals ... DONE
[10:25:37.072] Resolving globals: FALSE
[10:25:37.073] The total size of the 1 globals is 56 bytes (56 bytes)
[10:25:37.073] The total size of the 1 globals exported for future expression (‘{; a + 1; }’) is 56 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘a’ (56 bytes of class ‘numeric’)
[10:25:37.073] - globals: [1] ‘a’
[10:25:37.073] 
[10:25:37.073] getGlobalsAndPackages() ... DONE
[10:25:37.074] run() for ‘Future’ ...
[10:25:37.074] - state: ‘created’
[10:25:37.074] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:25:37.078] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[10:25:37.078] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[10:25:37.078]   - Field: ‘label’
[10:25:37.078]   - Field: ‘local’
[10:25:37.078]   - Field: ‘owner’
[10:25:37.078]   - Field: ‘envir’
[10:25:37.078]   - Field: ‘workers’
[10:25:37.078]   - Field: ‘packages’
[10:25:37.079]   - Field: ‘gc’
[10:25:37.079]   - Field: ‘job’
[10:25:37.079]   - Field: ‘conditions’
[10:25:37.079]   - Field: ‘expr’
[10:25:37.079]   - Field: ‘uuid’
[10:25:37.079]   - Field: ‘seed’
[10:25:37.079]   - Field: ‘version’
[10:25:37.079]   - Field: ‘result’
[10:25:37.079]   - Field: ‘asynchronous’
[10:25:37.079]   - Field: ‘calls’
[10:25:37.079]   - Field: ‘globals’
[10:25:37.080]   - Field: ‘stdout’
[10:25:37.080]   - Field: ‘earlySignal’
[10:25:37.080]   - Field: ‘lazy’
[10:25:37.080]   - Field: ‘state’
[10:25:37.080] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[10:25:37.080] - Launch lazy future ...
[10:25:37.080] Packages needed by the future expression (n = 0): <none>
[10:25:37.080] Packages needed by future strategies (n = 0): <none>
[10:25:37.081] {
[10:25:37.081]     {
[10:25:37.081]         {
[10:25:37.081]             ...future.startTime <- base::Sys.time()
[10:25:37.081]             {
[10:25:37.081]                 {
[10:25:37.081]                   {
[10:25:37.081]                     {
[10:25:37.081]                       base::local({
[10:25:37.081]                         has_future <- base::requireNamespace("future", 
[10:25:37.081]                           quietly = TRUE)
[10:25:37.081]                         if (has_future) {
[10:25:37.081]                           ns <- base::getNamespace("future")
[10:25:37.081]                           version <- ns[[".package"]][["version"]]
[10:25:37.081]                           if (is.null(version)) 
[10:25:37.081]                             version <- utils::packageVersion("future")
[10:25:37.081]                         }
[10:25:37.081]                         else {
[10:25:37.081]                           version <- NULL
[10:25:37.081]                         }
[10:25:37.081]                         if (!has_future || version < "1.8.0") {
[10:25:37.081]                           info <- base::c(r_version = base::gsub("R version ", 
[10:25:37.081]                             "", base::R.version$version.string), 
[10:25:37.081]                             platform = base::sprintf("%s (%s-bit)", 
[10:25:37.081]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:25:37.081]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[10:25:37.081]                               "release", "version")], collapse = " "), 
[10:25:37.081]                             hostname = base::Sys.info()[["nodename"]])
[10:25:37.081]                           info <- base::sprintf("%s: %s", base::names(info), 
[10:25:37.081]                             info)
[10:25:37.081]                           info <- base::paste(info, collapse = "; ")
[10:25:37.081]                           if (!has_future) {
[10:25:37.081]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:25:37.081]                               info)
[10:25:37.081]                           }
[10:25:37.081]                           else {
[10:25:37.081]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:25:37.081]                               info, version)
[10:25:37.081]                           }
[10:25:37.081]                           base::stop(msg)
[10:25:37.081]                         }
[10:25:37.081]                       })
[10:25:37.081]                     }
[10:25:37.081]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[10:25:37.081]                     base::options(mc.cores = 1L)
[10:25:37.081]                   }
[10:25:37.081]                   options(future.plan = NULL)
[10:25:37.081]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:25:37.081]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:25:37.081]                 }
[10:25:37.081]                 ...future.workdir <- getwd()
[10:25:37.081]             }
[10:25:37.081]             ...future.oldOptions <- base::as.list(base::.Options)
[10:25:37.081]             ...future.oldEnvVars <- base::Sys.getenv()
[10:25:37.081]         }
[10:25:37.081]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:25:37.081]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[10:25:37.081]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:25:37.081]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:25:37.081]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:25:37.081]             future.stdout.windows.reencode = NULL, width = 80L)
[10:25:37.081]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:25:37.081]             base::names(...future.oldOptions))
[10:25:37.081]     }
[10:25:37.081]     if (FALSE) {
[10:25:37.081]     }
[10:25:37.081]     else {
[10:25:37.081]         if (TRUE) {
[10:25:37.081]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:25:37.081]                 open = "w")
[10:25:37.081]         }
[10:25:37.081]         else {
[10:25:37.081]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:25:37.081]                 windows = "NUL", "/dev/null"), open = "w")
[10:25:37.081]         }
[10:25:37.081]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:25:37.081]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:25:37.081]             base::sink(type = "output", split = FALSE)
[10:25:37.081]             base::close(...future.stdout)
[10:25:37.081]         }, add = TRUE)
[10:25:37.081]     }
[10:25:37.081]     ...future.frame <- base::sys.nframe()
[10:25:37.081]     ...future.conditions <- base::list()
[10:25:37.081]     ...future.rng <- base::globalenv()$.Random.seed
[10:25:37.081]     if (FALSE) {
[10:25:37.081]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:25:37.081]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:25:37.081]     }
[10:25:37.081]     ...future.result <- base::tryCatch({
[10:25:37.081]         base::withCallingHandlers({
[10:25:37.081]             ...future.value <- base::withVisible(base::local({
[10:25:37.081]                 withCallingHandlers({
[10:25:37.081]                   {
[10:25:37.081]                     a + 1
[10:25:37.081]                   }
[10:25:37.081]                 }, immediateCondition = function(cond) {
[10:25:37.081]                   save_rds <- function (object, pathname, ...) 
[10:25:37.081]                   {
[10:25:37.081]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[10:25:37.081]                     if (file_test("-f", pathname_tmp)) {
[10:25:37.081]                       fi_tmp <- file.info(pathname_tmp)
[10:25:37.081]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[10:25:37.081]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[10:25:37.081]                         fi_tmp[["mtime"]])
[10:25:37.081]                     }
[10:25:37.081]                     tryCatch({
[10:25:37.081]                       saveRDS(object, file = pathname_tmp, ...)
[10:25:37.081]                     }, error = function(ex) {
[10:25:37.081]                       msg <- conditionMessage(ex)
[10:25:37.081]                       fi_tmp <- file.info(pathname_tmp)
[10:25:37.081]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[10:25:37.081]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[10:25:37.081]                         fi_tmp[["mtime"]], msg)
[10:25:37.081]                       ex$message <- msg
[10:25:37.081]                       stop(ex)
[10:25:37.081]                     })
[10:25:37.081]                     stopifnot(file_test("-f", pathname_tmp))
[10:25:37.081]                     res <- file.rename(from = pathname_tmp, to = pathname)
[10:25:37.081]                     if (!res || file_test("-f", pathname_tmp)) {
[10:25:37.081]                       fi_tmp <- file.info(pathname_tmp)
[10:25:37.081]                       fi <- file.info(pathname)
[10:25:37.081]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[10:25:37.081]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[10:25:37.081]                         fi_tmp[["mtime"]], sQuote(pathname), 
[10:25:37.081]                         fi[["size"]], fi[["mtime"]])
[10:25:37.081]                       stop(msg)
[10:25:37.081]                     }
[10:25:37.081]                     invisible(pathname)
[10:25:37.081]                   }
[10:25:37.081]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[10:25:37.081]                     rootPath = tempdir()) 
[10:25:37.081]                   {
[10:25:37.081]                     obj <- list(time = Sys.time(), condition = cond)
[10:25:37.081]                     file <- tempfile(pattern = class(cond)[1], 
[10:25:37.081]                       tmpdir = path, fileext = ".rds")
[10:25:37.081]                     save_rds(obj, file)
[10:25:37.081]                   }
[10:25:37.081]                   saveImmediateCondition(cond, path = "/tmp/RtmpEdG1rj/.future/immediateConditions")
[10:25:37.081]                   muffleCondition <- function (cond, pattern = "^muffle") 
[10:25:37.081]                   {
[10:25:37.081]                     inherits <- base::inherits
[10:25:37.081]                     invokeRestart <- base::invokeRestart
[10:25:37.081]                     is.null <- base::is.null
[10:25:37.081]                     muffled <- FALSE
[10:25:37.081]                     if (inherits(cond, "message")) {
[10:25:37.081]                       muffled <- grepl(pattern, "muffleMessage")
[10:25:37.081]                       if (muffled) 
[10:25:37.081]                         invokeRestart("muffleMessage")
[10:25:37.081]                     }
[10:25:37.081]                     else if (inherits(cond, "warning")) {
[10:25:37.081]                       muffled <- grepl(pattern, "muffleWarning")
[10:25:37.081]                       if (muffled) 
[10:25:37.081]                         invokeRestart("muffleWarning")
[10:25:37.081]                     }
[10:25:37.081]                     else if (inherits(cond, "condition")) {
[10:25:37.081]                       if (!is.null(pattern)) {
[10:25:37.081]                         computeRestarts <- base::computeRestarts
[10:25:37.081]                         grepl <- base::grepl
[10:25:37.081]                         restarts <- computeRestarts(cond)
[10:25:37.081]                         for (restart in restarts) {
[10:25:37.081]                           name <- restart$name
[10:25:37.081]                           if (is.null(name)) 
[10:25:37.081]                             next
[10:25:37.081]                           if (!grepl(pattern, name)) 
[10:25:37.081]                             next
[10:25:37.081]                           invokeRestart(restart)
[10:25:37.081]                           muffled <- TRUE
[10:25:37.081]                           break
[10:25:37.081]                         }
[10:25:37.081]                       }
[10:25:37.081]                     }
[10:25:37.081]                     invisible(muffled)
[10:25:37.081]                   }
[10:25:37.081]                   muffleCondition(cond)
[10:25:37.081]                 })
[10:25:37.081]             }))
[10:25:37.081]             future::FutureResult(value = ...future.value$value, 
[10:25:37.081]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:25:37.081]                   ...future.rng), globalenv = if (FALSE) 
[10:25:37.081]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:25:37.081]                     ...future.globalenv.names))
[10:25:37.081]                 else NULL, started = ...future.startTime, version = "1.8")
[10:25:37.081]         }, condition = base::local({
[10:25:37.081]             c <- base::c
[10:25:37.081]             inherits <- base::inherits
[10:25:37.081]             invokeRestart <- base::invokeRestart
[10:25:37.081]             length <- base::length
[10:25:37.081]             list <- base::list
[10:25:37.081]             seq.int <- base::seq.int
[10:25:37.081]             signalCondition <- base::signalCondition
[10:25:37.081]             sys.calls <- base::sys.calls
[10:25:37.081]             `[[` <- base::`[[`
[10:25:37.081]             `+` <- base::`+`
[10:25:37.081]             `<<-` <- base::`<<-`
[10:25:37.081]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:25:37.081]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:25:37.081]                   3L)]
[10:25:37.081]             }
[10:25:37.081]             function(cond) {
[10:25:37.081]                 is_error <- inherits(cond, "error")
[10:25:37.081]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:25:37.081]                   NULL)
[10:25:37.081]                 if (is_error) {
[10:25:37.081]                   sessionInformation <- function() {
[10:25:37.081]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:25:37.081]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:25:37.081]                       search = base::search(), system = base::Sys.info())
[10:25:37.081]                   }
[10:25:37.081]                   ...future.conditions[[length(...future.conditions) + 
[10:25:37.081]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:25:37.081]                     cond$call), session = sessionInformation(), 
[10:25:37.081]                     timestamp = base::Sys.time(), signaled = 0L)
[10:25:37.081]                   signalCondition(cond)
[10:25:37.081]                 }
[10:25:37.081]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:25:37.081]                 "immediateCondition"))) {
[10:25:37.081]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:25:37.081]                   ...future.conditions[[length(...future.conditions) + 
[10:25:37.081]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:25:37.081]                   if (TRUE && !signal) {
[10:25:37.081]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:25:37.081]                     {
[10:25:37.081]                       inherits <- base::inherits
[10:25:37.081]                       invokeRestart <- base::invokeRestart
[10:25:37.081]                       is.null <- base::is.null
[10:25:37.081]                       muffled <- FALSE
[10:25:37.081]                       if (inherits(cond, "message")) {
[10:25:37.081]                         muffled <- grepl(pattern, "muffleMessage")
[10:25:37.081]                         if (muffled) 
[10:25:37.081]                           invokeRestart("muffleMessage")
[10:25:37.081]                       }
[10:25:37.081]                       else if (inherits(cond, "warning")) {
[10:25:37.081]                         muffled <- grepl(pattern, "muffleWarning")
[10:25:37.081]                         if (muffled) 
[10:25:37.081]                           invokeRestart("muffleWarning")
[10:25:37.081]                       }
[10:25:37.081]                       else if (inherits(cond, "condition")) {
[10:25:37.081]                         if (!is.null(pattern)) {
[10:25:37.081]                           computeRestarts <- base::computeRestarts
[10:25:37.081]                           grepl <- base::grepl
[10:25:37.081]                           restarts <- computeRestarts(cond)
[10:25:37.081]                           for (restart in restarts) {
[10:25:37.081]                             name <- restart$name
[10:25:37.081]                             if (is.null(name)) 
[10:25:37.081]                               next
[10:25:37.081]                             if (!grepl(pattern, name)) 
[10:25:37.081]                               next
[10:25:37.081]                             invokeRestart(restart)
[10:25:37.081]                             muffled <- TRUE
[10:25:37.081]                             break
[10:25:37.081]                           }
[10:25:37.081]                         }
[10:25:37.081]                       }
[10:25:37.081]                       invisible(muffled)
[10:25:37.081]                     }
[10:25:37.081]                     muffleCondition(cond, pattern = "^muffle")
[10:25:37.081]                   }
[10:25:37.081]                 }
[10:25:37.081]                 else {
[10:25:37.081]                   if (TRUE) {
[10:25:37.081]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:25:37.081]                     {
[10:25:37.081]                       inherits <- base::inherits
[10:25:37.081]                       invokeRestart <- base::invokeRestart
[10:25:37.081]                       is.null <- base::is.null
[10:25:37.081]                       muffled <- FALSE
[10:25:37.081]                       if (inherits(cond, "message")) {
[10:25:37.081]                         muffled <- grepl(pattern, "muffleMessage")
[10:25:37.081]                         if (muffled) 
[10:25:37.081]                           invokeRestart("muffleMessage")
[10:25:37.081]                       }
[10:25:37.081]                       else if (inherits(cond, "warning")) {
[10:25:37.081]                         muffled <- grepl(pattern, "muffleWarning")
[10:25:37.081]                         if (muffled) 
[10:25:37.081]                           invokeRestart("muffleWarning")
[10:25:37.081]                       }
[10:25:37.081]                       else if (inherits(cond, "condition")) {
[10:25:37.081]                         if (!is.null(pattern)) {
[10:25:37.081]                           computeRestarts <- base::computeRestarts
[10:25:37.081]                           grepl <- base::grepl
[10:25:37.081]                           restarts <- computeRestarts(cond)
[10:25:37.081]                           for (restart in restarts) {
[10:25:37.081]                             name <- restart$name
[10:25:37.081]                             if (is.null(name)) 
[10:25:37.081]                               next
[10:25:37.081]                             if (!grepl(pattern, name)) 
[10:25:37.081]                               next
[10:25:37.081]                             invokeRestart(restart)
[10:25:37.081]                             muffled <- TRUE
[10:25:37.081]                             break
[10:25:37.081]                           }
[10:25:37.081]                         }
[10:25:37.081]                       }
[10:25:37.081]                       invisible(muffled)
[10:25:37.081]                     }
[10:25:37.081]                     muffleCondition(cond, pattern = "^muffle")
[10:25:37.081]                   }
[10:25:37.081]                 }
[10:25:37.081]             }
[10:25:37.081]         }))
[10:25:37.081]     }, error = function(ex) {
[10:25:37.081]         base::structure(base::list(value = NULL, visible = NULL, 
[10:25:37.081]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:25:37.081]                 ...future.rng), started = ...future.startTime, 
[10:25:37.081]             finished = Sys.time(), session_uuid = NA_character_, 
[10:25:37.081]             version = "1.8"), class = "FutureResult")
[10:25:37.081]     }, finally = {
[10:25:37.081]         if (!identical(...future.workdir, getwd())) 
[10:25:37.081]             setwd(...future.workdir)
[10:25:37.081]         {
[10:25:37.081]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:25:37.081]                 ...future.oldOptions$nwarnings <- NULL
[10:25:37.081]             }
[10:25:37.081]             base::options(...future.oldOptions)
[10:25:37.081]             if (.Platform$OS.type == "windows") {
[10:25:37.081]                 old_names <- names(...future.oldEnvVars)
[10:25:37.081]                 envs <- base::Sys.getenv()
[10:25:37.081]                 names <- names(envs)
[10:25:37.081]                 common <- intersect(names, old_names)
[10:25:37.081]                 added <- setdiff(names, old_names)
[10:25:37.081]                 removed <- setdiff(old_names, names)
[10:25:37.081]                 changed <- common[...future.oldEnvVars[common] != 
[10:25:37.081]                   envs[common]]
[10:25:37.081]                 NAMES <- toupper(changed)
[10:25:37.081]                 args <- list()
[10:25:37.081]                 for (kk in seq_along(NAMES)) {
[10:25:37.081]                   name <- changed[[kk]]
[10:25:37.081]                   NAME <- NAMES[[kk]]
[10:25:37.081]                   if (name != NAME && is.element(NAME, old_names)) 
[10:25:37.081]                     next
[10:25:37.081]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:25:37.081]                 }
[10:25:37.081]                 NAMES <- toupper(added)
[10:25:37.081]                 for (kk in seq_along(NAMES)) {
[10:25:37.081]                   name <- added[[kk]]
[10:25:37.081]                   NAME <- NAMES[[kk]]
[10:25:37.081]                   if (name != NAME && is.element(NAME, old_names)) 
[10:25:37.081]                     next
[10:25:37.081]                   args[[name]] <- ""
[10:25:37.081]                 }
[10:25:37.081]                 NAMES <- toupper(removed)
[10:25:37.081]                 for (kk in seq_along(NAMES)) {
[10:25:37.081]                   name <- removed[[kk]]
[10:25:37.081]                   NAME <- NAMES[[kk]]
[10:25:37.081]                   if (name != NAME && is.element(NAME, old_names)) 
[10:25:37.081]                     next
[10:25:37.081]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:25:37.081]                 }
[10:25:37.081]                 if (length(args) > 0) 
[10:25:37.081]                   base::do.call(base::Sys.setenv, args = args)
[10:25:37.081]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:25:37.081]             }
[10:25:37.081]             else {
[10:25:37.081]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:25:37.081]             }
[10:25:37.081]             {
[10:25:37.081]                 if (base::length(...future.futureOptionsAdded) > 
[10:25:37.081]                   0L) {
[10:25:37.081]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:25:37.081]                   base::names(opts) <- ...future.futureOptionsAdded
[10:25:37.081]                   base::options(opts)
[10:25:37.081]                 }
[10:25:37.081]                 {
[10:25:37.081]                   {
[10:25:37.081]                     base::options(mc.cores = ...future.mc.cores.old)
[10:25:37.081]                     NULL
[10:25:37.081]                   }
[10:25:37.081]                   options(future.plan = NULL)
[10:25:37.081]                   if (is.na(NA_character_)) 
[10:25:37.081]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:25:37.081]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:25:37.081]                   future::plan(list(function (..., workers = availableCores(constraints = "multicore"), 
[10:25:37.081]                     envir = parent.frame()) 
[10:25:37.081]                   {
[10:25:37.081]                     default_workers <- missing(workers)
[10:25:37.081]                     if (is.function(workers)) 
[10:25:37.081]                       workers <- workers()
[10:25:37.081]                     workers <- structure(as.integer(workers), 
[10:25:37.081]                       class = class(workers))
[10:25:37.081]                     stop_if_not(is.finite(workers), workers >= 
[10:25:37.081]                       1L)
[10:25:37.081]                     if ((workers == 1L && !inherits(workers, 
[10:25:37.081]                       "AsIs")) || !supportsMulticore(warn = TRUE)) {
[10:25:37.081]                       if (default_workers) 
[10:25:37.081]                         supportsMulticore(warn = TRUE)
[10:25:37.081]                       return(sequential(..., envir = envir))
[10:25:37.081]                     }
[10:25:37.081]                     oopts <- options(mc.cores = workers)
[10:25:37.081]                     on.exit(options(oopts))
[10:25:37.081]                     future <- MulticoreFuture(..., workers = workers, 
[10:25:37.081]                       envir = envir)
[10:25:37.081]                     if (!future$lazy) 
[10:25:37.081]                       future <- run(future)
[10:25:37.081]                     invisible(future)
[10:25:37.081]                   }), .cleanup = FALSE, .init = FALSE)
[10:25:37.081]                 }
[10:25:37.081]             }
[10:25:37.081]         }
[10:25:37.081]     })
[10:25:37.081]     if (TRUE) {
[10:25:37.081]         base::sink(type = "output", split = FALSE)
[10:25:37.081]         if (TRUE) {
[10:25:37.081]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:25:37.081]         }
[10:25:37.081]         else {
[10:25:37.081]             ...future.result["stdout"] <- base::list(NULL)
[10:25:37.081]         }
[10:25:37.081]         base::close(...future.stdout)
[10:25:37.081]         ...future.stdout <- NULL
[10:25:37.081]     }
[10:25:37.081]     ...future.result$conditions <- ...future.conditions
[10:25:37.081]     ...future.result$finished <- base::Sys.time()
[10:25:37.081]     ...future.result
[10:25:37.081] }
[10:25:37.083] assign_globals() ...
[10:25:37.083] List of 1
[10:25:37.083]  $ a: num 10
[10:25:37.083]  - attr(*, "where")=List of 1
[10:25:37.083]   ..$ a:<environment: R_EmptyEnv> 
[10:25:37.083]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:25:37.083]  - attr(*, "resolved")= logi FALSE
[10:25:37.083]  - attr(*, "total_size")= num 56
[10:25:37.083]  - attr(*, "already-done")= logi TRUE
[10:25:37.086] - copied ‘a’ to environment
[10:25:37.086] assign_globals() ... done
[10:25:37.086] requestCore(): workers = 2
[10:25:37.088] MulticoreFuture started
[10:25:37.089] - Launch lazy future ... done
[10:25:37.089] run() for ‘MulticoreFuture’ ... done
[10:25:37.089] result() for MulticoreFuture ...
[10:25:37.089] plan(): Setting new future strategy stack:
[10:25:37.090] List of future strategies:
[10:25:37.090] 1. sequential:
[10:25:37.090]    - args: function (..., envir = parent.frame())
[10:25:37.090]    - tweaked: FALSE
[10:25:37.090]    - call: NULL
[10:25:37.091] plan(): nbrOfWorkers() = 1
[10:25:37.092] plan(): Setting new future strategy stack:
[10:25:37.093] List of future strategies:
[10:25:37.093] 1. multicore:
[10:25:37.093]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[10:25:37.093]    - tweaked: FALSE
[10:25:37.093]    - call: plan(strategy)
[10:25:37.098] plan(): nbrOfWorkers() = 2
[10:25:37.098] result() for MulticoreFuture ...
[10:25:37.099] result() for MulticoreFuture ... done
[10:25:37.099] result() for MulticoreFuture ... done
[10:25:37.099] result() for MulticoreFuture ...
[10:25:37.099] result() for MulticoreFuture ... done
b = 11
*** %<-% with ‘multicore’ futures ... DONE
*** %<-% with ‘multisession’ futures ...
[10:25:37.100] plan(): Setting new future strategy stack:
[10:25:37.100] List of future strategies:
[10:25:37.100] 1. multisession:
[10:25:37.100]    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[10:25:37.100]    - tweaked: FALSE
[10:25:37.100]    - call: plan(strategy)
[10:25:37.100] plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ...
[10:25:37.101] multisession:
[10:25:37.101] - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[10:25:37.101] - tweaked: FALSE
[10:25:37.101] - call: plan(strategy)
[10:25:37.107] getGlobalsAndPackages() ...
[10:25:37.108] Not searching for globals
[10:25:37.108] - globals: [0] <none>
[10:25:37.108] getGlobalsAndPackages() ... DONE
[10:25:37.108] [local output] makeClusterPSOCK() ...
[10:25:37.156] [local output] Workers: [n = 2] ‘localhost’, ‘localhost’
[10:25:37.157] [local output] Base port: 11169
[10:25:37.157] [local output] Getting setup options for 2 cluster nodes ...
[10:25:37.158] [local output]  - Node 1 of 2 ...
[10:25:37.158] [local output] localMachine=TRUE => revtunnel=FALSE

[10:25:37.159] Testing if worker's PID can be inferred: ‘'/usr/local/lib/R/bin/Rscript' -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/RtmpEdG1rj/worker.rank=1.parallelly.parent=82543.1426f1ab56eec.pid")), silent = TRUE)' -e 'file.exists("/tmp/RtmpEdG1rj/worker.rank=1.parallelly.parent=82543.1426f1ab56eec.pid")'’
[10:25:37.347] - Possible to infer worker's PID: TRUE
[10:25:37.347] [local output] Rscript port: 11169

[10:25:37.348] [local output]  - Node 2 of 2 ...
[10:25:37.348] [local output] localMachine=TRUE => revtunnel=FALSE

[10:25:37.349] [local output] Rscript port: 11169

[10:25:37.349] [local output] Getting setup options for 2 cluster nodes ... done
[10:25:37.349] [local output]  - Parallel setup requested for some PSOCK nodes
[10:25:37.350] [local output] Setting up PSOCK nodes in parallel
[10:25:37.350] List of 36
[10:25:37.350]  $ worker          : chr "localhost"
[10:25:37.350]   ..- attr(*, "localhost")= logi TRUE
[10:25:37.350]  $ master          : chr "localhost"
[10:25:37.350]  $ port            : int 11169
[10:25:37.350]  $ connectTimeout  : num 120
[10:25:37.350]  $ timeout         : num 2592000
[10:25:37.350]  $ rscript         : chr "'/usr/local/lib/R/bin/Rscript'"
[10:25:37.350]  $ homogeneous     : logi TRUE
[10:25:37.350]  $ rscript_args    : chr "--default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),fi"| __truncated__
[10:25:37.350]  $ rscript_envs    : NULL
[10:25:37.350]  $ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[10:25:37.350]  $ rscript_startup : NULL
[10:25:37.350]  $ rscript_sh      : chr "sh"
[10:25:37.350]  $ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[10:25:37.350]  $ methods         : logi TRUE
[10:25:37.350]  $ socketOptions   : chr "no-delay"
[10:25:37.350]  $ useXDR          : logi FALSE
[10:25:37.350]  $ outfile         : chr "/dev/null"
[10:25:37.350]  $ renice          : int NA
[10:25:37.350]  $ rshcmd          : NULL
[10:25:37.350]  $ user            : chr(0) 
[10:25:37.350]  $ revtunnel       : logi FALSE
[10:25:37.350]  $ rshlogfile      : NULL
[10:25:37.350]  $ rshopts         : chr(0) 
[10:25:37.350]  $ rank            : int 1
[10:25:37.350]  $ manual          : logi FALSE
[10:25:37.350]  $ dryrun          : logi FALSE
[10:25:37.350]  $ quiet           : logi FALSE
[10:25:37.350]  $ setup_strategy  : chr "parallel"
[10:25:37.350]  $ local_cmd       : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[10:25:37.350]  $ pidfile         : chr "/tmp/RtmpEdG1rj/worker.rank=1.parallelly.parent=82543.1426f1ab56eec.pid"
[10:25:37.350]  $ rshcmd_label    : NULL
[10:25:37.350]  $ rsh_call        : NULL
[10:25:37.350]  $ cmd             : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[10:25:37.350]  $ localMachine    : logi TRUE
[10:25:37.350]  $ make_fcn        :function (worker = getOption2("parallelly.localhost.hostname", "localhost"), 
[10:25:37.350]     master = NULL, port, connectTimeout = getOption2("parallelly.makeNodePSOCK.connectTimeout", 
[10:25:37.350]         2 * 60), timeout = getOption2("parallelly.makeNodePSOCK.timeout", 
[10:25:37.350]         30 * 24 * 60 * 60), rscript = NULL, homogeneous = NULL, rscript_args = NULL, 
[10:25:37.350]     rscript_envs = NULL, rscript_libs = NULL, rscript_startup = NULL, rscript_sh = c("auto", 
[10:25:37.350]         "cmd", "sh"), default_packages = c("datasets", "utils", "grDevices", 
[10:25:37.350]         "graphics", "stats", if (methods) "methods"), methods = TRUE, socketOptions = getOption2("parallelly.makeNodePSOCK.socketOptions", 
[10:25:37.350]         "no-delay"), useXDR = getOption2("parallelly.makeNodePSOCK.useXDR", 
[10:25:37.350]         FALSE), outfile = "/dev/null", renice = NA_integer_, rshcmd = getOption2("parallelly.makeNodePSOCK.rshcmd", 
[10:25:37.350]         NULL), user = NULL, revtunnel = NA, rshlogfile = NULL, rshopts = getOption2("parallelly.makeNodePSOCK.rshopts", 
[10:25:37.350]         NULL), rank = 1L, manual = FALSE, dryrun = FALSE, quiet = FALSE, 
[10:25:37.350]     setup_strategy = getOption2("parallelly.makeNodePSOCK.setup_strategy", 
[10:25:37.350]         "parallel"), action = c("launch", "options"), verbose = FALSE)  
[10:25:37.350]  $ arguments       :List of 28
[10:25:37.350]   ..$ worker          : chr "localhost"
[10:25:37.350]   ..$ master          : NULL
[10:25:37.350]   ..$ port            : int 11169
[10:25:37.350]   ..$ connectTimeout  : num 120
[10:25:37.350]   ..$ timeout         : num 2592000
[10:25:37.350]   ..$ rscript         : NULL
[10:25:37.350]   ..$ homogeneous     : NULL
[10:25:37.350]   ..$ rscript_args    : NULL
[10:25:37.350]   ..$ rscript_envs    : NULL
[10:25:37.350]   ..$ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[10:25:37.350]   ..$ rscript_startup : NULL
[10:25:37.350]   ..$ rscript_sh      : chr [1:3] "auto" "cmd" "sh"
[10:25:37.350]   ..$ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[10:25:37.350]   ..$ methods         : logi TRUE
[10:25:37.350]   ..$ socketOptions   : chr "no-delay"
[10:25:37.350]   ..$ useXDR          : logi FALSE
[10:25:37.350]   ..$ outfile         : chr "/dev/null"
[10:25:37.350]   ..$ renice          : int NA
[10:25:37.350]   ..$ rshcmd          : NULL
[10:25:37.350]   ..$ user            : NULL
[10:25:37.350]   ..$ revtunnel       : logi NA
[10:25:37.350]   ..$ rshlogfile      : NULL
[10:25:37.350]   ..$ rshopts         : NULL
[10:25:37.350]   ..$ rank            : int 1
[10:25:37.350]   ..$ manual          : logi FALSE
[10:25:37.350]   ..$ dryrun          : logi FALSE
[10:25:37.350]   ..$ quiet           : logi FALSE
[10:25:37.350]   ..$ setup_strategy  : chr "parallel"
[10:25:37.350]  - attr(*, "class")= chr [1:2] "makeNodePSOCKOptions" "makeNodeOptions"
[10:25:37.367] [local output] System call to launch all workers:
[10:25:37.367] [local output] '/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/RtmpEdG1rj/worker.rank=1.parallelly.parent=82543.1426f1ab56eec.pid")), silent = TRUE)' -e 'options(socketOptions = "no-delay")' -e '.libPaths(c("/usr/local/lib/R/site-library","/usr/local/lib/R/library"))' -e 'workRSOCK <- tryCatch(parallel:::.workRSOCK, error=function(e) parallel:::.slaveRSOCK); workRSOCK()' MASTER=localhost PORT=11169 OUT=/dev/null TIMEOUT=2592000 XDR=FALSE SETUPTIMEOUT=120 SETUPSTRATEGY=parallel
[10:25:37.367] [local output] Starting PSOCK main server
[10:25:37.372] [local output] Workers launched
[10:25:37.373] [local output] Waiting for workers to connect back
[10:25:37.373]  - [local output] 0 workers out of 2 ready
[10:25:37.619]  - [local output] 0 workers out of 2 ready
[10:25:37.619]  - [local output] 1 workers out of 2 ready
[10:25:37.620]  - [local output] 2 workers out of 2 ready
[10:25:37.620] [local output] Launching of workers completed
[10:25:37.620] [local output] Collecting session information from workers
[10:25:37.621] [local output]  - Worker #1 of 2
[10:25:37.621] [local output]  - Worker #2 of 2
[10:25:37.622] [local output] makeClusterPSOCK() ... done
[10:25:37.633] Packages needed by the future expression (n = 0): <none>
[10:25:37.633] Packages needed by future strategies (n = 0): <none>
[10:25:37.634] {
[10:25:37.634]     {
[10:25:37.634]         {
[10:25:37.634]             ...future.startTime <- base::Sys.time()
[10:25:37.634]             {
[10:25:37.634]                 {
[10:25:37.634]                   {
[10:25:37.634]                     {
[10:25:37.634]                       base::local({
[10:25:37.634]                         has_future <- base::requireNamespace("future", 
[10:25:37.634]                           quietly = TRUE)
[10:25:37.634]                         if (has_future) {
[10:25:37.634]                           ns <- base::getNamespace("future")
[10:25:37.634]                           version <- ns[[".package"]][["version"]]
[10:25:37.634]                           if (is.null(version)) 
[10:25:37.634]                             version <- utils::packageVersion("future")
[10:25:37.634]                         }
[10:25:37.634]                         else {
[10:25:37.634]                           version <- NULL
[10:25:37.634]                         }
[10:25:37.634]                         if (!has_future || version < "1.8.0") {
[10:25:37.634]                           info <- base::c(r_version = base::gsub("R version ", 
[10:25:37.634]                             "", base::R.version$version.string), 
[10:25:37.634]                             platform = base::sprintf("%s (%s-bit)", 
[10:25:37.634]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:25:37.634]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[10:25:37.634]                               "release", "version")], collapse = " "), 
[10:25:37.634]                             hostname = base::Sys.info()[["nodename"]])
[10:25:37.634]                           info <- base::sprintf("%s: %s", base::names(info), 
[10:25:37.634]                             info)
[10:25:37.634]                           info <- base::paste(info, collapse = "; ")
[10:25:37.634]                           if (!has_future) {
[10:25:37.634]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:25:37.634]                               info)
[10:25:37.634]                           }
[10:25:37.634]                           else {
[10:25:37.634]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:25:37.634]                               info, version)
[10:25:37.634]                           }
[10:25:37.634]                           base::stop(msg)
[10:25:37.634]                         }
[10:25:37.634]                       })
[10:25:37.634]                     }
[10:25:37.634]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[10:25:37.634]                     base::options(mc.cores = 1L)
[10:25:37.634]                   }
[10:25:37.634]                   options(future.plan = NULL)
[10:25:37.634]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:25:37.634]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:25:37.634]                 }
[10:25:37.634]                 ...future.workdir <- getwd()
[10:25:37.634]             }
[10:25:37.634]             ...future.oldOptions <- base::as.list(base::.Options)
[10:25:37.634]             ...future.oldEnvVars <- base::Sys.getenv()
[10:25:37.634]         }
[10:25:37.634]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:25:37.634]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[10:25:37.634]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:25:37.634]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:25:37.634]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:25:37.634]             future.stdout.windows.reencode = NULL, width = 80L)
[10:25:37.634]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:25:37.634]             base::names(...future.oldOptions))
[10:25:37.634]     }
[10:25:37.634]     if (FALSE) {
[10:25:37.634]     }
[10:25:37.634]     else {
[10:25:37.634]         if (TRUE) {
[10:25:37.634]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:25:37.634]                 open = "w")
[10:25:37.634]         }
[10:25:37.634]         else {
[10:25:37.634]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:25:37.634]                 windows = "NUL", "/dev/null"), open = "w")
[10:25:37.634]         }
[10:25:37.634]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:25:37.634]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:25:37.634]             base::sink(type = "output", split = FALSE)
[10:25:37.634]             base::close(...future.stdout)
[10:25:37.634]         }, add = TRUE)
[10:25:37.634]     }
[10:25:37.634]     ...future.frame <- base::sys.nframe()
[10:25:37.634]     ...future.conditions <- base::list()
[10:25:37.634]     ...future.rng <- base::globalenv()$.Random.seed
[10:25:37.634]     if (FALSE) {
[10:25:37.634]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:25:37.634]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:25:37.634]     }
[10:25:37.634]     ...future.result <- base::tryCatch({
[10:25:37.634]         base::withCallingHandlers({
[10:25:37.634]             ...future.value <- base::withVisible(base::local({
[10:25:37.634]                 ...future.makeSendCondition <- base::local({
[10:25:37.634]                   sendCondition <- NULL
[10:25:37.634]                   function(frame = 1L) {
[10:25:37.634]                     if (is.function(sendCondition)) 
[10:25:37.634]                       return(sendCondition)
[10:25:37.634]                     ns <- getNamespace("parallel")
[10:25:37.634]                     if (exists("sendData", mode = "function", 
[10:25:37.634]                       envir = ns)) {
[10:25:37.634]                       parallel_sendData <- get("sendData", mode = "function", 
[10:25:37.634]                         envir = ns)
[10:25:37.634]                       envir <- sys.frame(frame)
[10:25:37.634]                       master <- NULL
[10:25:37.634]                       while (!identical(envir, .GlobalEnv) && 
[10:25:37.634]                         !identical(envir, emptyenv())) {
[10:25:37.634]                         if (exists("master", mode = "list", envir = envir, 
[10:25:37.634]                           inherits = FALSE)) {
[10:25:37.634]                           master <- get("master", mode = "list", 
[10:25:37.634]                             envir = envir, inherits = FALSE)
[10:25:37.634]                           if (inherits(master, c("SOCKnode", 
[10:25:37.634]                             "SOCK0node"))) {
[10:25:37.634]                             sendCondition <<- function(cond) {
[10:25:37.634]                               data <- list(type = "VALUE", value = cond, 
[10:25:37.634]                                 success = TRUE)
[10:25:37.634]                               parallel_sendData(master, data)
[10:25:37.634]                             }
[10:25:37.634]                             return(sendCondition)
[10:25:37.634]                           }
[10:25:37.634]                         }
[10:25:37.634]                         frame <- frame + 1L
[10:25:37.634]                         envir <- sys.frame(frame)
[10:25:37.634]                       }
[10:25:37.634]                     }
[10:25:37.634]                     sendCondition <<- function(cond) NULL
[10:25:37.634]                   }
[10:25:37.634]                 })
[10:25:37.634]                 withCallingHandlers({
[10:25:37.634]                   NA
[10:25:37.634]                 }, immediateCondition = function(cond) {
[10:25:37.634]                   sendCondition <- ...future.makeSendCondition()
[10:25:37.634]                   sendCondition(cond)
[10:25:37.634]                   muffleCondition <- function (cond, pattern = "^muffle") 
[10:25:37.634]                   {
[10:25:37.634]                     inherits <- base::inherits
[10:25:37.634]                     invokeRestart <- base::invokeRestart
[10:25:37.634]                     is.null <- base::is.null
[10:25:37.634]                     muffled <- FALSE
[10:25:37.634]                     if (inherits(cond, "message")) {
[10:25:37.634]                       muffled <- grepl(pattern, "muffleMessage")
[10:25:37.634]                       if (muffled) 
[10:25:37.634]                         invokeRestart("muffleMessage")
[10:25:37.634]                     }
[10:25:37.634]                     else if (inherits(cond, "warning")) {
[10:25:37.634]                       muffled <- grepl(pattern, "muffleWarning")
[10:25:37.634]                       if (muffled) 
[10:25:37.634]                         invokeRestart("muffleWarning")
[10:25:37.634]                     }
[10:25:37.634]                     else if (inherits(cond, "condition")) {
[10:25:37.634]                       if (!is.null(pattern)) {
[10:25:37.634]                         computeRestarts <- base::computeRestarts
[10:25:37.634]                         grepl <- base::grepl
[10:25:37.634]                         restarts <- computeRestarts(cond)
[10:25:37.634]                         for (restart in restarts) {
[10:25:37.634]                           name <- restart$name
[10:25:37.634]                           if (is.null(name)) 
[10:25:37.634]                             next
[10:25:37.634]                           if (!grepl(pattern, name)) 
[10:25:37.634]                             next
[10:25:37.634]                           invokeRestart(restart)
[10:25:37.634]                           muffled <- TRUE
[10:25:37.634]                           break
[10:25:37.634]                         }
[10:25:37.634]                       }
[10:25:37.634]                     }
[10:25:37.634]                     invisible(muffled)
[10:25:37.634]                   }
[10:25:37.634]                   muffleCondition(cond)
[10:25:37.634]                 })
[10:25:37.634]             }))
[10:25:37.634]             future::FutureResult(value = ...future.value$value, 
[10:25:37.634]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:25:37.634]                   ...future.rng), globalenv = if (FALSE) 
[10:25:37.634]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:25:37.634]                     ...future.globalenv.names))
[10:25:37.634]                 else NULL, started = ...future.startTime, version = "1.8")
[10:25:37.634]         }, condition = base::local({
[10:25:37.634]             c <- base::c
[10:25:37.634]             inherits <- base::inherits
[10:25:37.634]             invokeRestart <- base::invokeRestart
[10:25:37.634]             length <- base::length
[10:25:37.634]             list <- base::list
[10:25:37.634]             seq.int <- base::seq.int
[10:25:37.634]             signalCondition <- base::signalCondition
[10:25:37.634]             sys.calls <- base::sys.calls
[10:25:37.634]             `[[` <- base::`[[`
[10:25:37.634]             `+` <- base::`+`
[10:25:37.634]             `<<-` <- base::`<<-`
[10:25:37.634]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:25:37.634]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:25:37.634]                   3L)]
[10:25:37.634]             }
[10:25:37.634]             function(cond) {
[10:25:37.634]                 is_error <- inherits(cond, "error")
[10:25:37.634]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:25:37.634]                   NULL)
[10:25:37.634]                 if (is_error) {
[10:25:37.634]                   sessionInformation <- function() {
[10:25:37.634]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:25:37.634]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:25:37.634]                       search = base::search(), system = base::Sys.info())
[10:25:37.634]                   }
[10:25:37.634]                   ...future.conditions[[length(...future.conditions) + 
[10:25:37.634]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:25:37.634]                     cond$call), session = sessionInformation(), 
[10:25:37.634]                     timestamp = base::Sys.time(), signaled = 0L)
[10:25:37.634]                   signalCondition(cond)
[10:25:37.634]                 }
[10:25:37.634]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:25:37.634]                 "immediateCondition"))) {
[10:25:37.634]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:25:37.634]                   ...future.conditions[[length(...future.conditions) + 
[10:25:37.634]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:25:37.634]                   if (TRUE && !signal) {
[10:25:37.634]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:25:37.634]                     {
[10:25:37.634]                       inherits <- base::inherits
[10:25:37.634]                       invokeRestart <- base::invokeRestart
[10:25:37.634]                       is.null <- base::is.null
[10:25:37.634]                       muffled <- FALSE
[10:25:37.634]                       if (inherits(cond, "message")) {
[10:25:37.634]                         muffled <- grepl(pattern, "muffleMessage")
[10:25:37.634]                         if (muffled) 
[10:25:37.634]                           invokeRestart("muffleMessage")
[10:25:37.634]                       }
[10:25:37.634]                       else if (inherits(cond, "warning")) {
[10:25:37.634]                         muffled <- grepl(pattern, "muffleWarning")
[10:25:37.634]                         if (muffled) 
[10:25:37.634]                           invokeRestart("muffleWarning")
[10:25:37.634]                       }
[10:25:37.634]                       else if (inherits(cond, "condition")) {
[10:25:37.634]                         if (!is.null(pattern)) {
[10:25:37.634]                           computeRestarts <- base::computeRestarts
[10:25:37.634]                           grepl <- base::grepl
[10:25:37.634]                           restarts <- computeRestarts(cond)
[10:25:37.634]                           for (restart in restarts) {
[10:25:37.634]                             name <- restart$name
[10:25:37.634]                             if (is.null(name)) 
[10:25:37.634]                               next
[10:25:37.634]                             if (!grepl(pattern, name)) 
[10:25:37.634]                               next
[10:25:37.634]                             invokeRestart(restart)
[10:25:37.634]                             muffled <- TRUE
[10:25:37.634]                             break
[10:25:37.634]                           }
[10:25:37.634]                         }
[10:25:37.634]                       }
[10:25:37.634]                       invisible(muffled)
[10:25:37.634]                     }
[10:25:37.634]                     muffleCondition(cond, pattern = "^muffle")
[10:25:37.634]                   }
[10:25:37.634]                 }
[10:25:37.634]                 else {
[10:25:37.634]                   if (TRUE) {
[10:25:37.634]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:25:37.634]                     {
[10:25:37.634]                       inherits <- base::inherits
[10:25:37.634]                       invokeRestart <- base::invokeRestart
[10:25:37.634]                       is.null <- base::is.null
[10:25:37.634]                       muffled <- FALSE
[10:25:37.634]                       if (inherits(cond, "message")) {
[10:25:37.634]                         muffled <- grepl(pattern, "muffleMessage")
[10:25:37.634]                         if (muffled) 
[10:25:37.634]                           invokeRestart("muffleMessage")
[10:25:37.634]                       }
[10:25:37.634]                       else if (inherits(cond, "warning")) {
[10:25:37.634]                         muffled <- grepl(pattern, "muffleWarning")
[10:25:37.634]                         if (muffled) 
[10:25:37.634]                           invokeRestart("muffleWarning")
[10:25:37.634]                       }
[10:25:37.634]                       else if (inherits(cond, "condition")) {
[10:25:37.634]                         if (!is.null(pattern)) {
[10:25:37.634]                           computeRestarts <- base::computeRestarts
[10:25:37.634]                           grepl <- base::grepl
[10:25:37.634]                           restarts <- computeRestarts(cond)
[10:25:37.634]                           for (restart in restarts) {
[10:25:37.634]                             name <- restart$name
[10:25:37.634]                             if (is.null(name)) 
[10:25:37.634]                               next
[10:25:37.634]                             if (!grepl(pattern, name)) 
[10:25:37.634]                               next
[10:25:37.634]                             invokeRestart(restart)
[10:25:37.634]                             muffled <- TRUE
[10:25:37.634]                             break
[10:25:37.634]                           }
[10:25:37.634]                         }
[10:25:37.634]                       }
[10:25:37.634]                       invisible(muffled)
[10:25:37.634]                     }
[10:25:37.634]                     muffleCondition(cond, pattern = "^muffle")
[10:25:37.634]                   }
[10:25:37.634]                 }
[10:25:37.634]             }
[10:25:37.634]         }))
[10:25:37.634]     }, error = function(ex) {
[10:25:37.634]         base::structure(base::list(value = NULL, visible = NULL, 
[10:25:37.634]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:25:37.634]                 ...future.rng), started = ...future.startTime, 
[10:25:37.634]             finished = Sys.time(), session_uuid = NA_character_, 
[10:25:37.634]             version = "1.8"), class = "FutureResult")
[10:25:37.634]     }, finally = {
[10:25:37.634]         if (!identical(...future.workdir, getwd())) 
[10:25:37.634]             setwd(...future.workdir)
[10:25:37.634]         {
[10:25:37.634]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:25:37.634]                 ...future.oldOptions$nwarnings <- NULL
[10:25:37.634]             }
[10:25:37.634]             base::options(...future.oldOptions)
[10:25:37.634]             if (.Platform$OS.type == "windows") {
[10:25:37.634]                 old_names <- names(...future.oldEnvVars)
[10:25:37.634]                 envs <- base::Sys.getenv()
[10:25:37.634]                 names <- names(envs)
[10:25:37.634]                 common <- intersect(names, old_names)
[10:25:37.634]                 added <- setdiff(names, old_names)
[10:25:37.634]                 removed <- setdiff(old_names, names)
[10:25:37.634]                 changed <- common[...future.oldEnvVars[common] != 
[10:25:37.634]                   envs[common]]
[10:25:37.634]                 NAMES <- toupper(changed)
[10:25:37.634]                 args <- list()
[10:25:37.634]                 for (kk in seq_along(NAMES)) {
[10:25:37.634]                   name <- changed[[kk]]
[10:25:37.634]                   NAME <- NAMES[[kk]]
[10:25:37.634]                   if (name != NAME && is.element(NAME, old_names)) 
[10:25:37.634]                     next
[10:25:37.634]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:25:37.634]                 }
[10:25:37.634]                 NAMES <- toupper(added)
[10:25:37.634]                 for (kk in seq_along(NAMES)) {
[10:25:37.634]                   name <- added[[kk]]
[10:25:37.634]                   NAME <- NAMES[[kk]]
[10:25:37.634]                   if (name != NAME && is.element(NAME, old_names)) 
[10:25:37.634]                     next
[10:25:37.634]                   args[[name]] <- ""
[10:25:37.634]                 }
[10:25:37.634]                 NAMES <- toupper(removed)
[10:25:37.634]                 for (kk in seq_along(NAMES)) {
[10:25:37.634]                   name <- removed[[kk]]
[10:25:37.634]                   NAME <- NAMES[[kk]]
[10:25:37.634]                   if (name != NAME && is.element(NAME, old_names)) 
[10:25:37.634]                     next
[10:25:37.634]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:25:37.634]                 }
[10:25:37.634]                 if (length(args) > 0) 
[10:25:37.634]                   base::do.call(base::Sys.setenv, args = args)
[10:25:37.634]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:25:37.634]             }
[10:25:37.634]             else {
[10:25:37.634]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:25:37.634]             }
[10:25:37.634]             {
[10:25:37.634]                 if (base::length(...future.futureOptionsAdded) > 
[10:25:37.634]                   0L) {
[10:25:37.634]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:25:37.634]                   base::names(opts) <- ...future.futureOptionsAdded
[10:25:37.634]                   base::options(opts)
[10:25:37.634]                 }
[10:25:37.634]                 {
[10:25:37.634]                   {
[10:25:37.634]                     base::options(mc.cores = ...future.mc.cores.old)
[10:25:37.634]                     NULL
[10:25:37.634]                   }
[10:25:37.634]                   options(future.plan = NULL)
[10:25:37.634]                   if (is.na(NA_character_)) 
[10:25:37.634]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:25:37.634]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:25:37.634]                   future::plan(list(function (..., workers = availableCores(), 
[10:25:37.634]                     lazy = FALSE, rscript_libs = .libPaths(), 
[10:25:37.634]                     envir = parent.frame()) 
[10:25:37.634]                   {
[10:25:37.634]                     if (is.function(workers)) 
[10:25:37.634]                       workers <- workers()
[10:25:37.634]                     workers <- structure(as.integer(workers), 
[10:25:37.634]                       class = class(workers))
[10:25:37.634]                     stop_if_not(length(workers) == 1, is.finite(workers), 
[10:25:37.634]                       workers >= 1)
[10:25:37.634]                     if (workers == 1L && !inherits(workers, "AsIs")) {
[10:25:37.634]                       return(sequential(..., lazy = TRUE, envir = envir))
[10:25:37.634]                     }
[10:25:37.634]                     future <- MultisessionFuture(..., workers = workers, 
[10:25:37.634]                       lazy = lazy, rscript_libs = rscript_libs, 
[10:25:37.634]                       envir = envir)
[10:25:37.634]                     if (!future$lazy) 
[10:25:37.634]                       future <- run(future)
[10:25:37.634]                     invisible(future)
[10:25:37.634]                   }), .cleanup = FALSE, .init = FALSE)
[10:25:37.634]                 }
[10:25:37.634]             }
[10:25:37.634]         }
[10:25:37.634]     })
[10:25:37.634]     if (TRUE) {
[10:25:37.634]         base::sink(type = "output", split = FALSE)
[10:25:37.634]         if (TRUE) {
[10:25:37.634]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:25:37.634]         }
[10:25:37.634]         else {
[10:25:37.634]             ...future.result["stdout"] <- base::list(NULL)
[10:25:37.634]         }
[10:25:37.634]         base::close(...future.stdout)
[10:25:37.634]         ...future.stdout <- NULL
[10:25:37.634]     }
[10:25:37.634]     ...future.result$conditions <- ...future.conditions
[10:25:37.634]     ...future.result$finished <- base::Sys.time()
[10:25:37.634]     ...future.result
[10:25:37.634] }
[10:25:37.687] MultisessionFuture started
[10:25:37.687] result() for ClusterFuture ...
[10:25:37.688] receiveMessageFromWorker() for ClusterFuture ...
[10:25:37.688] - Validating connection of MultisessionFuture
[10:25:37.731] - received message: FutureResult
[10:25:37.731] - Received FutureResult
[10:25:37.731] - Erased future from FutureRegistry
[10:25:37.732] result() for ClusterFuture ...
[10:25:37.732] - result already collected: FutureResult
[10:25:37.732] result() for ClusterFuture ... done
[10:25:37.732] receiveMessageFromWorker() for ClusterFuture ... done
[10:25:37.732] result() for ClusterFuture ... done
[10:25:37.732] result() for ClusterFuture ...
[10:25:37.732] - result already collected: FutureResult
[10:25:37.732] result() for ClusterFuture ... done
[10:25:37.733] plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ... DONE
[10:25:37.736] plan(): nbrOfWorkers() = 2
** Future evaluation without globals
[10:25:37.737] getGlobalsAndPackages() ...
[10:25:37.737] Searching for globals...
[10:25:37.738] - globals found: [2] ‘{’, ‘<-’
[10:25:37.738] Searching for globals ... DONE
[10:25:37.739] Resolving globals: FALSE
[10:25:37.739] 
[10:25:37.739] 
[10:25:37.739] getGlobalsAndPackages() ... DONE
[10:25:37.739] run() for ‘Future’ ...
[10:25:37.740] - state: ‘created’
[10:25:37.740] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[10:25:37.754] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[10:25:37.754] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[10:25:37.755]   - Field: ‘node’
[10:25:37.755]   - Field: ‘label’
[10:25:37.755]   - Field: ‘local’
[10:25:37.755]   - Field: ‘owner’
[10:25:37.755]   - Field: ‘envir’
[10:25:37.755]   - Field: ‘workers’
[10:25:37.755]   - Field: ‘packages’
[10:25:37.755]   - Field: ‘gc’
[10:25:37.755]   - Field: ‘conditions’
[10:25:37.756]   - Field: ‘persistent’
[10:25:37.756]   - Field: ‘expr’
[10:25:37.756]   - Field: ‘uuid’
[10:25:37.756]   - Field: ‘seed’
[10:25:37.756]   - Field: ‘version’
[10:25:37.756]   - Field: ‘result’
[10:25:37.756]   - Field: ‘asynchronous’
[10:25:37.756]   - Field: ‘calls’
[10:25:37.756]   - Field: ‘globals’
[10:25:37.757]   - Field: ‘stdout’
[10:25:37.757]   - Field: ‘earlySignal’
[10:25:37.757]   - Field: ‘lazy’
[10:25:37.757]   - Field: ‘state’
[10:25:37.757] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[10:25:37.757] - Launch lazy future ...
[10:25:37.757] Packages needed by the future expression (n = 0): <none>
[10:25:37.758] Packages needed by future strategies (n = 0): <none>
[10:25:37.758] {
[10:25:37.758]     {
[10:25:37.758]         {
[10:25:37.758]             ...future.startTime <- base::Sys.time()
[10:25:37.758]             {
[10:25:37.758]                 {
[10:25:37.758]                   {
[10:25:37.758]                     {
[10:25:37.758]                       base::local({
[10:25:37.758]                         has_future <- base::requireNamespace("future", 
[10:25:37.758]                           quietly = TRUE)
[10:25:37.758]                         if (has_future) {
[10:25:37.758]                           ns <- base::getNamespace("future")
[10:25:37.758]                           version <- ns[[".package"]][["version"]]
[10:25:37.758]                           if (is.null(version)) 
[10:25:37.758]                             version <- utils::packageVersion("future")
[10:25:37.758]                         }
[10:25:37.758]                         else {
[10:25:37.758]                           version <- NULL
[10:25:37.758]                         }
[10:25:37.758]                         if (!has_future || version < "1.8.0") {
[10:25:37.758]                           info <- base::c(r_version = base::gsub("R version ", 
[10:25:37.758]                             "", base::R.version$version.string), 
[10:25:37.758]                             platform = base::sprintf("%s (%s-bit)", 
[10:25:37.758]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:25:37.758]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[10:25:37.758]                               "release", "version")], collapse = " "), 
[10:25:37.758]                             hostname = base::Sys.info()[["nodename"]])
[10:25:37.758]                           info <- base::sprintf("%s: %s", base::names(info), 
[10:25:37.758]                             info)
[10:25:37.758]                           info <- base::paste(info, collapse = "; ")
[10:25:37.758]                           if (!has_future) {
[10:25:37.758]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:25:37.758]                               info)
[10:25:37.758]                           }
[10:25:37.758]                           else {
[10:25:37.758]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:25:37.758]                               info, version)
[10:25:37.758]                           }
[10:25:37.758]                           base::stop(msg)
[10:25:37.758]                         }
[10:25:37.758]                       })
[10:25:37.758]                     }
[10:25:37.758]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[10:25:37.758]                     base::options(mc.cores = 1L)
[10:25:37.758]                   }
[10:25:37.758]                   options(future.plan = NULL)
[10:25:37.758]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:25:37.758]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:25:37.758]                 }
[10:25:37.758]                 ...future.workdir <- getwd()
[10:25:37.758]             }
[10:25:37.758]             ...future.oldOptions <- base::as.list(base::.Options)
[10:25:37.758]             ...future.oldEnvVars <- base::Sys.getenv()
[10:25:37.758]         }
[10:25:37.758]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:25:37.758]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[10:25:37.758]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:25:37.758]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:25:37.758]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:25:37.758]             future.stdout.windows.reencode = NULL, width = 80L)
[10:25:37.758]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:25:37.758]             base::names(...future.oldOptions))
[10:25:37.758]     }
[10:25:37.758]     if (FALSE) {
[10:25:37.758]     }
[10:25:37.758]     else {
[10:25:37.758]         if (TRUE) {
[10:25:37.758]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:25:37.758]                 open = "w")
[10:25:37.758]         }
[10:25:37.758]         else {
[10:25:37.758]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:25:37.758]                 windows = "NUL", "/dev/null"), open = "w")
[10:25:37.758]         }
[10:25:37.758]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:25:37.758]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:25:37.758]             base::sink(type = "output", split = FALSE)
[10:25:37.758]             base::close(...future.stdout)
[10:25:37.758]         }, add = TRUE)
[10:25:37.758]     }
[10:25:37.758]     ...future.frame <- base::sys.nframe()
[10:25:37.758]     ...future.conditions <- base::list()
[10:25:37.758]     ...future.rng <- base::globalenv()$.Random.seed
[10:25:37.758]     if (FALSE) {
[10:25:37.758]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:25:37.758]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:25:37.758]     }
[10:25:37.758]     ...future.result <- base::tryCatch({
[10:25:37.758]         base::withCallingHandlers({
[10:25:37.758]             ...future.value <- base::withVisible(base::local({
[10:25:37.758]                 ...future.makeSendCondition <- base::local({
[10:25:37.758]                   sendCondition <- NULL
[10:25:37.758]                   function(frame = 1L) {
[10:25:37.758]                     if (is.function(sendCondition)) 
[10:25:37.758]                       return(sendCondition)
[10:25:37.758]                     ns <- getNamespace("parallel")
[10:25:37.758]                     if (exists("sendData", mode = "function", 
[10:25:37.758]                       envir = ns)) {
[10:25:37.758]                       parallel_sendData <- get("sendData", mode = "function", 
[10:25:37.758]                         envir = ns)
[10:25:37.758]                       envir <- sys.frame(frame)
[10:25:37.758]                       master <- NULL
[10:25:37.758]                       while (!identical(envir, .GlobalEnv) && 
[10:25:37.758]                         !identical(envir, emptyenv())) {
[10:25:37.758]                         if (exists("master", mode = "list", envir = envir, 
[10:25:37.758]                           inherits = FALSE)) {
[10:25:37.758]                           master <- get("master", mode = "list", 
[10:25:37.758]                             envir = envir, inherits = FALSE)
[10:25:37.758]                           if (inherits(master, c("SOCKnode", 
[10:25:37.758]                             "SOCK0node"))) {
[10:25:37.758]                             sendCondition <<- function(cond) {
[10:25:37.758]                               data <- list(type = "VALUE", value = cond, 
[10:25:37.758]                                 success = TRUE)
[10:25:37.758]                               parallel_sendData(master, data)
[10:25:37.758]                             }
[10:25:37.758]                             return(sendCondition)
[10:25:37.758]                           }
[10:25:37.758]                         }
[10:25:37.758]                         frame <- frame + 1L
[10:25:37.758]                         envir <- sys.frame(frame)
[10:25:37.758]                       }
[10:25:37.758]                     }
[10:25:37.758]                     sendCondition <<- function(cond) NULL
[10:25:37.758]                   }
[10:25:37.758]                 })
[10:25:37.758]                 withCallingHandlers({
[10:25:37.758]                   {
[10:25:37.758]                     x <- 1
[10:25:37.758]                   }
[10:25:37.758]                 }, immediateCondition = function(cond) {
[10:25:37.758]                   sendCondition <- ...future.makeSendCondition()
[10:25:37.758]                   sendCondition(cond)
[10:25:37.758]                   muffleCondition <- function (cond, pattern = "^muffle") 
[10:25:37.758]                   {
[10:25:37.758]                     inherits <- base::inherits
[10:25:37.758]                     invokeRestart <- base::invokeRestart
[10:25:37.758]                     is.null <- base::is.null
[10:25:37.758]                     muffled <- FALSE
[10:25:37.758]                     if (inherits(cond, "message")) {
[10:25:37.758]                       muffled <- grepl(pattern, "muffleMessage")
[10:25:37.758]                       if (muffled) 
[10:25:37.758]                         invokeRestart("muffleMessage")
[10:25:37.758]                     }
[10:25:37.758]                     else if (inherits(cond, "warning")) {
[10:25:37.758]                       muffled <- grepl(pattern, "muffleWarning")
[10:25:37.758]                       if (muffled) 
[10:25:37.758]                         invokeRestart("muffleWarning")
[10:25:37.758]                     }
[10:25:37.758]                     else if (inherits(cond, "condition")) {
[10:25:37.758]                       if (!is.null(pattern)) {
[10:25:37.758]                         computeRestarts <- base::computeRestarts
[10:25:37.758]                         grepl <- base::grepl
[10:25:37.758]                         restarts <- computeRestarts(cond)
[10:25:37.758]                         for (restart in restarts) {
[10:25:37.758]                           name <- restart$name
[10:25:37.758]                           if (is.null(name)) 
[10:25:37.758]                             next
[10:25:37.758]                           if (!grepl(pattern, name)) 
[10:25:37.758]                             next
[10:25:37.758]                           invokeRestart(restart)
[10:25:37.758]                           muffled <- TRUE
[10:25:37.758]                           break
[10:25:37.758]                         }
[10:25:37.758]                       }
[10:25:37.758]                     }
[10:25:37.758]                     invisible(muffled)
[10:25:37.758]                   }
[10:25:37.758]                   muffleCondition(cond)
[10:25:37.758]                 })
[10:25:37.758]             }))
[10:25:37.758]             future::FutureResult(value = ...future.value$value, 
[10:25:37.758]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:25:37.758]                   ...future.rng), globalenv = if (FALSE) 
[10:25:37.758]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:25:37.758]                     ...future.globalenv.names))
[10:25:37.758]                 else NULL, started = ...future.startTime, version = "1.8")
[10:25:37.758]         }, condition = base::local({
[10:25:37.758]             c <- base::c
[10:25:37.758]             inherits <- base::inherits
[10:25:37.758]             invokeRestart <- base::invokeRestart
[10:25:37.758]             length <- base::length
[10:25:37.758]             list <- base::list
[10:25:37.758]             seq.int <- base::seq.int
[10:25:37.758]             signalCondition <- base::signalCondition
[10:25:37.758]             sys.calls <- base::sys.calls
[10:25:37.758]             `[[` <- base::`[[`
[10:25:37.758]             `+` <- base::`+`
[10:25:37.758]             `<<-` <- base::`<<-`
[10:25:37.758]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:25:37.758]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:25:37.758]                   3L)]
[10:25:37.758]             }
[10:25:37.758]             function(cond) {
[10:25:37.758]                 is_error <- inherits(cond, "error")
[10:25:37.758]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:25:37.758]                   NULL)
[10:25:37.758]                 if (is_error) {
[10:25:37.758]                   sessionInformation <- function() {
[10:25:37.758]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:25:37.758]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:25:37.758]                       search = base::search(), system = base::Sys.info())
[10:25:37.758]                   }
[10:25:37.758]                   ...future.conditions[[length(...future.conditions) + 
[10:25:37.758]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:25:37.758]                     cond$call), session = sessionInformation(), 
[10:25:37.758]                     timestamp = base::Sys.time(), signaled = 0L)
[10:25:37.758]                   signalCondition(cond)
[10:25:37.758]                 }
[10:25:37.758]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:25:37.758]                 "immediateCondition"))) {
[10:25:37.758]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:25:37.758]                   ...future.conditions[[length(...future.conditions) + 
[10:25:37.758]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:25:37.758]                   if (TRUE && !signal) {
[10:25:37.758]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:25:37.758]                     {
[10:25:37.758]                       inherits <- base::inherits
[10:25:37.758]                       invokeRestart <- base::invokeRestart
[10:25:37.758]                       is.null <- base::is.null
[10:25:37.758]                       muffled <- FALSE
[10:25:37.758]                       if (inherits(cond, "message")) {
[10:25:37.758]                         muffled <- grepl(pattern, "muffleMessage")
[10:25:37.758]                         if (muffled) 
[10:25:37.758]                           invokeRestart("muffleMessage")
[10:25:37.758]                       }
[10:25:37.758]                       else if (inherits(cond, "warning")) {
[10:25:37.758]                         muffled <- grepl(pattern, "muffleWarning")
[10:25:37.758]                         if (muffled) 
[10:25:37.758]                           invokeRestart("muffleWarning")
[10:25:37.758]                       }
[10:25:37.758]                       else if (inherits(cond, "condition")) {
[10:25:37.758]                         if (!is.null(pattern)) {
[10:25:37.758]                           computeRestarts <- base::computeRestarts
[10:25:37.758]                           grepl <- base::grepl
[10:25:37.758]                           restarts <- computeRestarts(cond)
[10:25:37.758]                           for (restart in restarts) {
[10:25:37.758]                             name <- restart$name
[10:25:37.758]                             if (is.null(name)) 
[10:25:37.758]                               next
[10:25:37.758]                             if (!grepl(pattern, name)) 
[10:25:37.758]                               next
[10:25:37.758]                             invokeRestart(restart)
[10:25:37.758]                             muffled <- TRUE
[10:25:37.758]                             break
[10:25:37.758]                           }
[10:25:37.758]                         }
[10:25:37.758]                       }
[10:25:37.758]                       invisible(muffled)
[10:25:37.758]                     }
[10:25:37.758]                     muffleCondition(cond, pattern = "^muffle")
[10:25:37.758]                   }
[10:25:37.758]                 }
[10:25:37.758]                 else {
[10:25:37.758]                   if (TRUE) {
[10:25:37.758]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:25:37.758]                     {
[10:25:37.758]                       inherits <- base::inherits
[10:25:37.758]                       invokeRestart <- base::invokeRestart
[10:25:37.758]                       is.null <- base::is.null
[10:25:37.758]                       muffled <- FALSE
[10:25:37.758]                       if (inherits(cond, "message")) {
[10:25:37.758]                         muffled <- grepl(pattern, "muffleMessage")
[10:25:37.758]                         if (muffled) 
[10:25:37.758]                           invokeRestart("muffleMessage")
[10:25:37.758]                       }
[10:25:37.758]                       else if (inherits(cond, "warning")) {
[10:25:37.758]                         muffled <- grepl(pattern, "muffleWarning")
[10:25:37.758]                         if (muffled) 
[10:25:37.758]                           invokeRestart("muffleWarning")
[10:25:37.758]                       }
[10:25:37.758]                       else if (inherits(cond, "condition")) {
[10:25:37.758]                         if (!is.null(pattern)) {
[10:25:37.758]                           computeRestarts <- base::computeRestarts
[10:25:37.758]                           grepl <- base::grepl
[10:25:37.758]                           restarts <- computeRestarts(cond)
[10:25:37.758]                           for (restart in restarts) {
[10:25:37.758]                             name <- restart$name
[10:25:37.758]                             if (is.null(name)) 
[10:25:37.758]                               next
[10:25:37.758]                             if (!grepl(pattern, name)) 
[10:25:37.758]                               next
[10:25:37.758]                             invokeRestart(restart)
[10:25:37.758]                             muffled <- TRUE
[10:25:37.758]                             break
[10:25:37.758]                           }
[10:25:37.758]                         }
[10:25:37.758]                       }
[10:25:37.758]                       invisible(muffled)
[10:25:37.758]                     }
[10:25:37.758]                     muffleCondition(cond, pattern = "^muffle")
[10:25:37.758]                   }
[10:25:37.758]                 }
[10:25:37.758]             }
[10:25:37.758]         }))
[10:25:37.758]     }, error = function(ex) {
[10:25:37.758]         base::structure(base::list(value = NULL, visible = NULL, 
[10:25:37.758]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:25:37.758]                 ...future.rng), started = ...future.startTime, 
[10:25:37.758]             finished = Sys.time(), session_uuid = NA_character_, 
[10:25:37.758]             version = "1.8"), class = "FutureResult")
[10:25:37.758]     }, finally = {
[10:25:37.758]         if (!identical(...future.workdir, getwd())) 
[10:25:37.758]             setwd(...future.workdir)
[10:25:37.758]         {
[10:25:37.758]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:25:37.758]                 ...future.oldOptions$nwarnings <- NULL
[10:25:37.758]             }
[10:25:37.758]             base::options(...future.oldOptions)
[10:25:37.758]             if (.Platform$OS.type == "windows") {
[10:25:37.758]                 old_names <- names(...future.oldEnvVars)
[10:25:37.758]                 envs <- base::Sys.getenv()
[10:25:37.758]                 names <- names(envs)
[10:25:37.758]                 common <- intersect(names, old_names)
[10:25:37.758]                 added <- setdiff(names, old_names)
[10:25:37.758]                 removed <- setdiff(old_names, names)
[10:25:37.758]                 changed <- common[...future.oldEnvVars[common] != 
[10:25:37.758]                   envs[common]]
[10:25:37.758]                 NAMES <- toupper(changed)
[10:25:37.758]                 args <- list()
[10:25:37.758]                 for (kk in seq_along(NAMES)) {
[10:25:37.758]                   name <- changed[[kk]]
[10:25:37.758]                   NAME <- NAMES[[kk]]
[10:25:37.758]                   if (name != NAME && is.element(NAME, old_names)) 
[10:25:37.758]                     next
[10:25:37.758]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:25:37.758]                 }
[10:25:37.758]                 NAMES <- toupper(added)
[10:25:37.758]                 for (kk in seq_along(NAMES)) {
[10:25:37.758]                   name <- added[[kk]]
[10:25:37.758]                   NAME <- NAMES[[kk]]
[10:25:37.758]                   if (name != NAME && is.element(NAME, old_names)) 
[10:25:37.758]                     next
[10:25:37.758]                   args[[name]] <- ""
[10:25:37.758]                 }
[10:25:37.758]                 NAMES <- toupper(removed)
[10:25:37.758]                 for (kk in seq_along(NAMES)) {
[10:25:37.758]                   name <- removed[[kk]]
[10:25:37.758]                   NAME <- NAMES[[kk]]
[10:25:37.758]                   if (name != NAME && is.element(NAME, old_names)) 
[10:25:37.758]                     next
[10:25:37.758]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:25:37.758]                 }
[10:25:37.758]                 if (length(args) > 0) 
[10:25:37.758]                   base::do.call(base::Sys.setenv, args = args)
[10:25:37.758]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:25:37.758]             }
[10:25:37.758]             else {
[10:25:37.758]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:25:37.758]             }
[10:25:37.758]             {
[10:25:37.758]                 if (base::length(...future.futureOptionsAdded) > 
[10:25:37.758]                   0L) {
[10:25:37.758]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:25:37.758]                   base::names(opts) <- ...future.futureOptionsAdded
[10:25:37.758]                   base::options(opts)
[10:25:37.758]                 }
[10:25:37.758]                 {
[10:25:37.758]                   {
[10:25:37.758]                     base::options(mc.cores = ...future.mc.cores.old)
[10:25:37.758]                     NULL
[10:25:37.758]                   }
[10:25:37.758]                   options(future.plan = NULL)
[10:25:37.758]                   if (is.na(NA_character_)) 
[10:25:37.758]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:25:37.758]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:25:37.758]                   future::plan(list(function (..., workers = availableCores(), 
[10:25:37.758]                     lazy = FALSE, rscript_libs = .libPaths(), 
[10:25:37.758]                     envir = parent.frame()) 
[10:25:37.758]                   {
[10:25:37.758]                     if (is.function(workers)) 
[10:25:37.758]                       workers <- workers()
[10:25:37.758]                     workers <- structure(as.integer(workers), 
[10:25:37.758]                       class = class(workers))
[10:25:37.758]                     stop_if_not(length(workers) == 1, is.finite(workers), 
[10:25:37.758]                       workers >= 1)
[10:25:37.758]                     if (workers == 1L && !inherits(workers, "AsIs")) {
[10:25:37.758]                       return(sequential(..., lazy = TRUE, envir = envir))
[10:25:37.758]                     }
[10:25:37.758]                     future <- MultisessionFuture(..., workers = workers, 
[10:25:37.758]                       lazy = lazy, rscript_libs = rscript_libs, 
[10:25:37.758]                       envir = envir)
[10:25:37.758]                     if (!future$lazy) 
[10:25:37.758]                       future <- run(future)
[10:25:37.758]                     invisible(future)
[10:25:37.758]                   }), .cleanup = FALSE, .init = FALSE)
[10:25:37.758]                 }
[10:25:37.758]             }
[10:25:37.758]         }
[10:25:37.758]     })
[10:25:37.758]     if (TRUE) {
[10:25:37.758]         base::sink(type = "output", split = FALSE)
[10:25:37.758]         if (TRUE) {
[10:25:37.758]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:25:37.758]         }
[10:25:37.758]         else {
[10:25:37.758]             ...future.result["stdout"] <- base::list(NULL)
[10:25:37.758]         }
[10:25:37.758]         base::close(...future.stdout)
[10:25:37.758]         ...future.stdout <- NULL
[10:25:37.758]     }
[10:25:37.758]     ...future.result$conditions <- ...future.conditions
[10:25:37.758]     ...future.result$finished <- base::Sys.time()
[10:25:37.758]     ...future.result
[10:25:37.758] }
[10:25:37.762] MultisessionFuture started
[10:25:37.762] - Launch lazy future ... done
[10:25:37.762] run() for ‘MultisessionFuture’ ... done
[10:25:37.762] result() for ClusterFuture ...
[10:25:37.762] receiveMessageFromWorker() for ClusterFuture ...
[10:25:37.762] - Validating connection of MultisessionFuture
[10:25:37.810] - received message: FutureResult
[10:25:37.810] - Received FutureResult
[10:25:37.810] - Erased future from FutureRegistry
[10:25:37.810] result() for ClusterFuture ...
[10:25:37.810] - result already collected: FutureResult
[10:25:37.811] result() for ClusterFuture ... done
[10:25:37.811] receiveMessageFromWorker() for ClusterFuture ... done
[10:25:37.811] result() for ClusterFuture ... done
[10:25:37.811] result() for ClusterFuture ...
[10:25:37.811] - result already collected: FutureResult
[10:25:37.811] result() for ClusterFuture ... done
** Future evaluation with globals
[10:25:37.812] getGlobalsAndPackages() ...
[10:25:37.812] Searching for globals...
[10:25:37.813] - globals found: [3] ‘{’, ‘<-’, ‘a’
[10:25:37.813] Searching for globals ... DONE
[10:25:37.813] Resolving globals: FALSE
[10:25:37.814] The total size of the 1 globals is 56 bytes (56 bytes)
[10:25:37.814] The total size of the 1 globals exported for future expression (‘{; x <- a; }’) is 56 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘a’ (56 bytes of class ‘numeric’)
[10:25:37.814] - globals: [1] ‘a’
[10:25:37.814] 
[10:25:37.814] getGlobalsAndPackages() ... DONE
[10:25:37.815] run() for ‘Future’ ...
[10:25:37.815] - state: ‘created’
[10:25:37.815] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[10:25:37.829] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[10:25:37.829] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[10:25:37.830]   - Field: ‘node’
[10:25:37.830]   - Field: ‘label’
[10:25:37.830]   - Field: ‘local’
[10:25:37.830]   - Field: ‘owner’
[10:25:37.830]   - Field: ‘envir’
[10:25:37.830]   - Field: ‘workers’
[10:25:37.830]   - Field: ‘packages’
[10:25:37.830]   - Field: ‘gc’
[10:25:37.830]   - Field: ‘conditions’
[10:25:37.830]   - Field: ‘persistent’
[10:25:37.831]   - Field: ‘expr’
[10:25:37.831]   - Field: ‘uuid’
[10:25:37.831]   - Field: ‘seed’
[10:25:37.831]   - Field: ‘version’
[10:25:37.831]   - Field: ‘result’
[10:25:37.831]   - Field: ‘asynchronous’
[10:25:37.831]   - Field: ‘calls’
[10:25:37.831]   - Field: ‘globals’
[10:25:37.832]   - Field: ‘stdout’
[10:25:37.832]   - Field: ‘earlySignal’
[10:25:37.832]   - Field: ‘lazy’
[10:25:37.832]   - Field: ‘state’
[10:25:37.832] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[10:25:37.832] - Launch lazy future ...
[10:25:37.832] Packages needed by the future expression (n = 0): <none>
[10:25:37.833] Packages needed by future strategies (n = 0): <none>
[10:25:37.833] {
[10:25:37.833]     {
[10:25:37.833]         {
[10:25:37.833]             ...future.startTime <- base::Sys.time()
[10:25:37.833]             {
[10:25:37.833]                 {
[10:25:37.833]                   {
[10:25:37.833]                     {
[10:25:37.833]                       base::local({
[10:25:37.833]                         has_future <- base::requireNamespace("future", 
[10:25:37.833]                           quietly = TRUE)
[10:25:37.833]                         if (has_future) {
[10:25:37.833]                           ns <- base::getNamespace("future")
[10:25:37.833]                           version <- ns[[".package"]][["version"]]
[10:25:37.833]                           if (is.null(version)) 
[10:25:37.833]                             version <- utils::packageVersion("future")
[10:25:37.833]                         }
[10:25:37.833]                         else {
[10:25:37.833]                           version <- NULL
[10:25:37.833]                         }
[10:25:37.833]                         if (!has_future || version < "1.8.0") {
[10:25:37.833]                           info <- base::c(r_version = base::gsub("R version ", 
[10:25:37.833]                             "", base::R.version$version.string), 
[10:25:37.833]                             platform = base::sprintf("%s (%s-bit)", 
[10:25:37.833]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:25:37.833]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[10:25:37.833]                               "release", "version")], collapse = " "), 
[10:25:37.833]                             hostname = base::Sys.info()[["nodename"]])
[10:25:37.833]                           info <- base::sprintf("%s: %s", base::names(info), 
[10:25:37.833]                             info)
[10:25:37.833]                           info <- base::paste(info, collapse = "; ")
[10:25:37.833]                           if (!has_future) {
[10:25:37.833]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:25:37.833]                               info)
[10:25:37.833]                           }
[10:25:37.833]                           else {
[10:25:37.833]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:25:37.833]                               info, version)
[10:25:37.833]                           }
[10:25:37.833]                           base::stop(msg)
[10:25:37.833]                         }
[10:25:37.833]                       })
[10:25:37.833]                     }
[10:25:37.833]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[10:25:37.833]                     base::options(mc.cores = 1L)
[10:25:37.833]                   }
[10:25:37.833]                   options(future.plan = NULL)
[10:25:37.833]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:25:37.833]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:25:37.833]                 }
[10:25:37.833]                 ...future.workdir <- getwd()
[10:25:37.833]             }
[10:25:37.833]             ...future.oldOptions <- base::as.list(base::.Options)
[10:25:37.833]             ...future.oldEnvVars <- base::Sys.getenv()
[10:25:37.833]         }
[10:25:37.833]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:25:37.833]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[10:25:37.833]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:25:37.833]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:25:37.833]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:25:37.833]             future.stdout.windows.reencode = NULL, width = 80L)
[10:25:37.833]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:25:37.833]             base::names(...future.oldOptions))
[10:25:37.833]     }
[10:25:37.833]     if (FALSE) {
[10:25:37.833]     }
[10:25:37.833]     else {
[10:25:37.833]         if (TRUE) {
[10:25:37.833]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:25:37.833]                 open = "w")
[10:25:37.833]         }
[10:25:37.833]         else {
[10:25:37.833]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:25:37.833]                 windows = "NUL", "/dev/null"), open = "w")
[10:25:37.833]         }
[10:25:37.833]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:25:37.833]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:25:37.833]             base::sink(type = "output", split = FALSE)
[10:25:37.833]             base::close(...future.stdout)
[10:25:37.833]         }, add = TRUE)
[10:25:37.833]     }
[10:25:37.833]     ...future.frame <- base::sys.nframe()
[10:25:37.833]     ...future.conditions <- base::list()
[10:25:37.833]     ...future.rng <- base::globalenv()$.Random.seed
[10:25:37.833]     if (FALSE) {
[10:25:37.833]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:25:37.833]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:25:37.833]     }
[10:25:37.833]     ...future.result <- base::tryCatch({
[10:25:37.833]         base::withCallingHandlers({
[10:25:37.833]             ...future.value <- base::withVisible(base::local({
[10:25:37.833]                 ...future.makeSendCondition <- base::local({
[10:25:37.833]                   sendCondition <- NULL
[10:25:37.833]                   function(frame = 1L) {
[10:25:37.833]                     if (is.function(sendCondition)) 
[10:25:37.833]                       return(sendCondition)
[10:25:37.833]                     ns <- getNamespace("parallel")
[10:25:37.833]                     if (exists("sendData", mode = "function", 
[10:25:37.833]                       envir = ns)) {
[10:25:37.833]                       parallel_sendData <- get("sendData", mode = "function", 
[10:25:37.833]                         envir = ns)
[10:25:37.833]                       envir <- sys.frame(frame)
[10:25:37.833]                       master <- NULL
[10:25:37.833]                       while (!identical(envir, .GlobalEnv) && 
[10:25:37.833]                         !identical(envir, emptyenv())) {
[10:25:37.833]                         if (exists("master", mode = "list", envir = envir, 
[10:25:37.833]                           inherits = FALSE)) {
[10:25:37.833]                           master <- get("master", mode = "list", 
[10:25:37.833]                             envir = envir, inherits = FALSE)
[10:25:37.833]                           if (inherits(master, c("SOCKnode", 
[10:25:37.833]                             "SOCK0node"))) {
[10:25:37.833]                             sendCondition <<- function(cond) {
[10:25:37.833]                               data <- list(type = "VALUE", value = cond, 
[10:25:37.833]                                 success = TRUE)
[10:25:37.833]                               parallel_sendData(master, data)
[10:25:37.833]                             }
[10:25:37.833]                             return(sendCondition)
[10:25:37.833]                           }
[10:25:37.833]                         }
[10:25:37.833]                         frame <- frame + 1L
[10:25:37.833]                         envir <- sys.frame(frame)
[10:25:37.833]                       }
[10:25:37.833]                     }
[10:25:37.833]                     sendCondition <<- function(cond) NULL
[10:25:37.833]                   }
[10:25:37.833]                 })
[10:25:37.833]                 withCallingHandlers({
[10:25:37.833]                   {
[10:25:37.833]                     x <- a
[10:25:37.833]                   }
[10:25:37.833]                 }, immediateCondition = function(cond) {
[10:25:37.833]                   sendCondition <- ...future.makeSendCondition()
[10:25:37.833]                   sendCondition(cond)
[10:25:37.833]                   muffleCondition <- function (cond, pattern = "^muffle") 
[10:25:37.833]                   {
[10:25:37.833]                     inherits <- base::inherits
[10:25:37.833]                     invokeRestart <- base::invokeRestart
[10:25:37.833]                     is.null <- base::is.null
[10:25:37.833]                     muffled <- FALSE
[10:25:37.833]                     if (inherits(cond, "message")) {
[10:25:37.833]                       muffled <- grepl(pattern, "muffleMessage")
[10:25:37.833]                       if (muffled) 
[10:25:37.833]                         invokeRestart("muffleMessage")
[10:25:37.833]                     }
[10:25:37.833]                     else if (inherits(cond, "warning")) {
[10:25:37.833]                       muffled <- grepl(pattern, "muffleWarning")
[10:25:37.833]                       if (muffled) 
[10:25:37.833]                         invokeRestart("muffleWarning")
[10:25:37.833]                     }
[10:25:37.833]                     else if (inherits(cond, "condition")) {
[10:25:37.833]                       if (!is.null(pattern)) {
[10:25:37.833]                         computeRestarts <- base::computeRestarts
[10:25:37.833]                         grepl <- base::grepl
[10:25:37.833]                         restarts <- computeRestarts(cond)
[10:25:37.833]                         for (restart in restarts) {
[10:25:37.833]                           name <- restart$name
[10:25:37.833]                           if (is.null(name)) 
[10:25:37.833]                             next
[10:25:37.833]                           if (!grepl(pattern, name)) 
[10:25:37.833]                             next
[10:25:37.833]                           invokeRestart(restart)
[10:25:37.833]                           muffled <- TRUE
[10:25:37.833]                           break
[10:25:37.833]                         }
[10:25:37.833]                       }
[10:25:37.833]                     }
[10:25:37.833]                     invisible(muffled)
[10:25:37.833]                   }
[10:25:37.833]                   muffleCondition(cond)
[10:25:37.833]                 })
[10:25:37.833]             }))
[10:25:37.833]             future::FutureResult(value = ...future.value$value, 
[10:25:37.833]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:25:37.833]                   ...future.rng), globalenv = if (FALSE) 
[10:25:37.833]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:25:37.833]                     ...future.globalenv.names))
[10:25:37.833]                 else NULL, started = ...future.startTime, version = "1.8")
[10:25:37.833]         }, condition = base::local({
[10:25:37.833]             c <- base::c
[10:25:37.833]             inherits <- base::inherits
[10:25:37.833]             invokeRestart <- base::invokeRestart
[10:25:37.833]             length <- base::length
[10:25:37.833]             list <- base::list
[10:25:37.833]             seq.int <- base::seq.int
[10:25:37.833]             signalCondition <- base::signalCondition
[10:25:37.833]             sys.calls <- base::sys.calls
[10:25:37.833]             `[[` <- base::`[[`
[10:25:37.833]             `+` <- base::`+`
[10:25:37.833]             `<<-` <- base::`<<-`
[10:25:37.833]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:25:37.833]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:25:37.833]                   3L)]
[10:25:37.833]             }
[10:25:37.833]             function(cond) {
[10:25:37.833]                 is_error <- inherits(cond, "error")
[10:25:37.833]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:25:37.833]                   NULL)
[10:25:37.833]                 if (is_error) {
[10:25:37.833]                   sessionInformation <- function() {
[10:25:37.833]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:25:37.833]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:25:37.833]                       search = base::search(), system = base::Sys.info())
[10:25:37.833]                   }
[10:25:37.833]                   ...future.conditions[[length(...future.conditions) + 
[10:25:37.833]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:25:37.833]                     cond$call), session = sessionInformation(), 
[10:25:37.833]                     timestamp = base::Sys.time(), signaled = 0L)
[10:25:37.833]                   signalCondition(cond)
[10:25:37.833]                 }
[10:25:37.833]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:25:37.833]                 "immediateCondition"))) {
[10:25:37.833]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:25:37.833]                   ...future.conditions[[length(...future.conditions) + 
[10:25:37.833]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:25:37.833]                   if (TRUE && !signal) {
[10:25:37.833]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:25:37.833]                     {
[10:25:37.833]                       inherits <- base::inherits
[10:25:37.833]                       invokeRestart <- base::invokeRestart
[10:25:37.833]                       is.null <- base::is.null
[10:25:37.833]                       muffled <- FALSE
[10:25:37.833]                       if (inherits(cond, "message")) {
[10:25:37.833]                         muffled <- grepl(pattern, "muffleMessage")
[10:25:37.833]                         if (muffled) 
[10:25:37.833]                           invokeRestart("muffleMessage")
[10:25:37.833]                       }
[10:25:37.833]                       else if (inherits(cond, "warning")) {
[10:25:37.833]                         muffled <- grepl(pattern, "muffleWarning")
[10:25:37.833]                         if (muffled) 
[10:25:37.833]                           invokeRestart("muffleWarning")
[10:25:37.833]                       }
[10:25:37.833]                       else if (inherits(cond, "condition")) {
[10:25:37.833]                         if (!is.null(pattern)) {
[10:25:37.833]                           computeRestarts <- base::computeRestarts
[10:25:37.833]                           grepl <- base::grepl
[10:25:37.833]                           restarts <- computeRestarts(cond)
[10:25:37.833]                           for (restart in restarts) {
[10:25:37.833]                             name <- restart$name
[10:25:37.833]                             if (is.null(name)) 
[10:25:37.833]                               next
[10:25:37.833]                             if (!grepl(pattern, name)) 
[10:25:37.833]                               next
[10:25:37.833]                             invokeRestart(restart)
[10:25:37.833]                             muffled <- TRUE
[10:25:37.833]                             break
[10:25:37.833]                           }
[10:25:37.833]                         }
[10:25:37.833]                       }
[10:25:37.833]                       invisible(muffled)
[10:25:37.833]                     }
[10:25:37.833]                     muffleCondition(cond, pattern = "^muffle")
[10:25:37.833]                   }
[10:25:37.833]                 }
[10:25:37.833]                 else {
[10:25:37.833]                   if (TRUE) {
[10:25:37.833]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:25:37.833]                     {
[10:25:37.833]                       inherits <- base::inherits
[10:25:37.833]                       invokeRestart <- base::invokeRestart
[10:25:37.833]                       is.null <- base::is.null
[10:25:37.833]                       muffled <- FALSE
[10:25:37.833]                       if (inherits(cond, "message")) {
[10:25:37.833]                         muffled <- grepl(pattern, "muffleMessage")
[10:25:37.833]                         if (muffled) 
[10:25:37.833]                           invokeRestart("muffleMessage")
[10:25:37.833]                       }
[10:25:37.833]                       else if (inherits(cond, "warning")) {
[10:25:37.833]                         muffled <- grepl(pattern, "muffleWarning")
[10:25:37.833]                         if (muffled) 
[10:25:37.833]                           invokeRestart("muffleWarning")
[10:25:37.833]                       }
[10:25:37.833]                       else if (inherits(cond, "condition")) {
[10:25:37.833]                         if (!is.null(pattern)) {
[10:25:37.833]                           computeRestarts <- base::computeRestarts
[10:25:37.833]                           grepl <- base::grepl
[10:25:37.833]                           restarts <- computeRestarts(cond)
[10:25:37.833]                           for (restart in restarts) {
[10:25:37.833]                             name <- restart$name
[10:25:37.833]                             if (is.null(name)) 
[10:25:37.833]                               next
[10:25:37.833]                             if (!grepl(pattern, name)) 
[10:25:37.833]                               next
[10:25:37.833]                             invokeRestart(restart)
[10:25:37.833]                             muffled <- TRUE
[10:25:37.833]                             break
[10:25:37.833]                           }
[10:25:37.833]                         }
[10:25:37.833]                       }
[10:25:37.833]                       invisible(muffled)
[10:25:37.833]                     }
[10:25:37.833]                     muffleCondition(cond, pattern = "^muffle")
[10:25:37.833]                   }
[10:25:37.833]                 }
[10:25:37.833]             }
[10:25:37.833]         }))
[10:25:37.833]     }, error = function(ex) {
[10:25:37.833]         base::structure(base::list(value = NULL, visible = NULL, 
[10:25:37.833]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:25:37.833]                 ...future.rng), started = ...future.startTime, 
[10:25:37.833]             finished = Sys.time(), session_uuid = NA_character_, 
[10:25:37.833]             version = "1.8"), class = "FutureResult")
[10:25:37.833]     }, finally = {
[10:25:37.833]         if (!identical(...future.workdir, getwd())) 
[10:25:37.833]             setwd(...future.workdir)
[10:25:37.833]         {
[10:25:37.833]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:25:37.833]                 ...future.oldOptions$nwarnings <- NULL
[10:25:37.833]             }
[10:25:37.833]             base::options(...future.oldOptions)
[10:25:37.833]             if (.Platform$OS.type == "windows") {
[10:25:37.833]                 old_names <- names(...future.oldEnvVars)
[10:25:37.833]                 envs <- base::Sys.getenv()
[10:25:37.833]                 names <- names(envs)
[10:25:37.833]                 common <- intersect(names, old_names)
[10:25:37.833]                 added <- setdiff(names, old_names)
[10:25:37.833]                 removed <- setdiff(old_names, names)
[10:25:37.833]                 changed <- common[...future.oldEnvVars[common] != 
[10:25:37.833]                   envs[common]]
[10:25:37.833]                 NAMES <- toupper(changed)
[10:25:37.833]                 args <- list()
[10:25:37.833]                 for (kk in seq_along(NAMES)) {
[10:25:37.833]                   name <- changed[[kk]]
[10:25:37.833]                   NAME <- NAMES[[kk]]
[10:25:37.833]                   if (name != NAME && is.element(NAME, old_names)) 
[10:25:37.833]                     next
[10:25:37.833]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:25:37.833]                 }
[10:25:37.833]                 NAMES <- toupper(added)
[10:25:37.833]                 for (kk in seq_along(NAMES)) {
[10:25:37.833]                   name <- added[[kk]]
[10:25:37.833]                   NAME <- NAMES[[kk]]
[10:25:37.833]                   if (name != NAME && is.element(NAME, old_names)) 
[10:25:37.833]                     next
[10:25:37.833]                   args[[name]] <- ""
[10:25:37.833]                 }
[10:25:37.833]                 NAMES <- toupper(removed)
[10:25:37.833]                 for (kk in seq_along(NAMES)) {
[10:25:37.833]                   name <- removed[[kk]]
[10:25:37.833]                   NAME <- NAMES[[kk]]
[10:25:37.833]                   if (name != NAME && is.element(NAME, old_names)) 
[10:25:37.833]                     next
[10:25:37.833]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:25:37.833]                 }
[10:25:37.833]                 if (length(args) > 0) 
[10:25:37.833]                   base::do.call(base::Sys.setenv, args = args)
[10:25:37.833]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:25:37.833]             }
[10:25:37.833]             else {
[10:25:37.833]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:25:37.833]             }
[10:25:37.833]             {
[10:25:37.833]                 if (base::length(...future.futureOptionsAdded) > 
[10:25:37.833]                   0L) {
[10:25:37.833]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:25:37.833]                   base::names(opts) <- ...future.futureOptionsAdded
[10:25:37.833]                   base::options(opts)
[10:25:37.833]                 }
[10:25:37.833]                 {
[10:25:37.833]                   {
[10:25:37.833]                     base::options(mc.cores = ...future.mc.cores.old)
[10:25:37.833]                     NULL
[10:25:37.833]                   }
[10:25:37.833]                   options(future.plan = NULL)
[10:25:37.833]                   if (is.na(NA_character_)) 
[10:25:37.833]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:25:37.833]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:25:37.833]                   future::plan(list(function (..., workers = availableCores(), 
[10:25:37.833]                     lazy = FALSE, rscript_libs = .libPaths(), 
[10:25:37.833]                     envir = parent.frame()) 
[10:25:37.833]                   {
[10:25:37.833]                     if (is.function(workers)) 
[10:25:37.833]                       workers <- workers()
[10:25:37.833]                     workers <- structure(as.integer(workers), 
[10:25:37.833]                       class = class(workers))
[10:25:37.833]                     stop_if_not(length(workers) == 1, is.finite(workers), 
[10:25:37.833]                       workers >= 1)
[10:25:37.833]                     if (workers == 1L && !inherits(workers, "AsIs")) {
[10:25:37.833]                       return(sequential(..., lazy = TRUE, envir = envir))
[10:25:37.833]                     }
[10:25:37.833]                     future <- MultisessionFuture(..., workers = workers, 
[10:25:37.833]                       lazy = lazy, rscript_libs = rscript_libs, 
[10:25:37.833]                       envir = envir)
[10:25:37.833]                     if (!future$lazy) 
[10:25:37.833]                       future <- run(future)
[10:25:37.833]                     invisible(future)
[10:25:37.833]                   }), .cleanup = FALSE, .init = FALSE)
[10:25:37.833]                 }
[10:25:37.833]             }
[10:25:37.833]         }
[10:25:37.833]     })
[10:25:37.833]     if (TRUE) {
[10:25:37.833]         base::sink(type = "output", split = FALSE)
[10:25:37.833]         if (TRUE) {
[10:25:37.833]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:25:37.833]         }
[10:25:37.833]         else {
[10:25:37.833]             ...future.result["stdout"] <- base::list(NULL)
[10:25:37.833]         }
[10:25:37.833]         base::close(...future.stdout)
[10:25:37.833]         ...future.stdout <- NULL
[10:25:37.833]     }
[10:25:37.833]     ...future.result$conditions <- ...future.conditions
[10:25:37.833]     ...future.result$finished <- base::Sys.time()
[10:25:37.833]     ...future.result
[10:25:37.833] }
[10:25:37.836] Exporting 1 global objects (56 bytes) to cluster node #1 ...
[10:25:37.836] Exporting ‘a’ (56 bytes) to cluster node #1 ...
[10:25:37.837] Exporting ‘a’ (56 bytes) to cluster node #1 ... DONE
[10:25:37.837] Exporting 1 global objects (56 bytes) to cluster node #1 ... DONE
[10:25:37.837] MultisessionFuture started
[10:25:37.838] - Launch lazy future ... done
[10:25:37.838] run() for ‘MultisessionFuture’ ... done
[10:25:37.838] result() for ClusterFuture ...
[10:25:37.838] receiveMessageFromWorker() for ClusterFuture ...
[10:25:37.838] - Validating connection of MultisessionFuture
[10:25:37.882] - received message: FutureResult
[10:25:37.882] - Received FutureResult
[10:25:37.882] - Erased future from FutureRegistry
[10:25:37.882] result() for ClusterFuture ...
[10:25:37.883] - result already collected: FutureResult
[10:25:37.883] result() for ClusterFuture ... done
[10:25:37.883] receiveMessageFromWorker() for ClusterFuture ... done
[10:25:37.883] result() for ClusterFuture ... done
[10:25:37.883] result() for ClusterFuture ...
[10:25:37.883] - result already collected: FutureResult
[10:25:37.883] result() for ClusterFuture ... done
** Future evaluation with errors
[10:25:37.884] getGlobalsAndPackages() ...
[10:25:37.884] Searching for globals...
[10:25:37.886] - globals found: [3] ‘{’, ‘<-’, ‘stop’
[10:25:37.886] Searching for globals ... DONE
[10:25:37.886] Resolving globals: FALSE
[10:25:37.886] 
[10:25:37.886] 
[10:25:37.887] getGlobalsAndPackages() ... DONE
[10:25:37.887] run() for ‘Future’ ...
[10:25:37.887] - state: ‘created’
[10:25:37.887] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[10:25:37.901] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[10:25:37.902] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[10:25:37.902]   - Field: ‘node’
[10:25:37.902]   - Field: ‘label’
[10:25:37.902]   - Field: ‘local’
[10:25:37.902]   - Field: ‘owner’
[10:25:37.902]   - Field: ‘envir’
[10:25:37.902]   - Field: ‘workers’
[10:25:37.902]   - Field: ‘packages’
[10:25:37.902]   - Field: ‘gc’
[10:25:37.903]   - Field: ‘conditions’
[10:25:37.903]   - Field: ‘persistent’
[10:25:37.903]   - Field: ‘expr’
[10:25:37.903]   - Field: ‘uuid’
[10:25:37.903]   - Field: ‘seed’
[10:25:37.903]   - Field: ‘version’
[10:25:37.903]   - Field: ‘result’
[10:25:37.903]   - Field: ‘asynchronous’
[10:25:37.903]   - Field: ‘calls’
[10:25:37.904]   - Field: ‘globals’
[10:25:37.904]   - Field: ‘stdout’
[10:25:37.904]   - Field: ‘earlySignal’
[10:25:37.904]   - Field: ‘lazy’
[10:25:37.904]   - Field: ‘state’
[10:25:37.904] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[10:25:37.904] - Launch lazy future ...
[10:25:37.905] Packages needed by the future expression (n = 0): <none>
[10:25:37.905] Packages needed by future strategies (n = 0): <none>
[10:25:37.905] {
[10:25:37.905]     {
[10:25:37.905]         {
[10:25:37.905]             ...future.startTime <- base::Sys.time()
[10:25:37.905]             {
[10:25:37.905]                 {
[10:25:37.905]                   {
[10:25:37.905]                     {
[10:25:37.905]                       base::local({
[10:25:37.905]                         has_future <- base::requireNamespace("future", 
[10:25:37.905]                           quietly = TRUE)
[10:25:37.905]                         if (has_future) {
[10:25:37.905]                           ns <- base::getNamespace("future")
[10:25:37.905]                           version <- ns[[".package"]][["version"]]
[10:25:37.905]                           if (is.null(version)) 
[10:25:37.905]                             version <- utils::packageVersion("future")
[10:25:37.905]                         }
[10:25:37.905]                         else {
[10:25:37.905]                           version <- NULL
[10:25:37.905]                         }
[10:25:37.905]                         if (!has_future || version < "1.8.0") {
[10:25:37.905]                           info <- base::c(r_version = base::gsub("R version ", 
[10:25:37.905]                             "", base::R.version$version.string), 
[10:25:37.905]                             platform = base::sprintf("%s (%s-bit)", 
[10:25:37.905]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:25:37.905]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[10:25:37.905]                               "release", "version")], collapse = " "), 
[10:25:37.905]                             hostname = base::Sys.info()[["nodename"]])
[10:25:37.905]                           info <- base::sprintf("%s: %s", base::names(info), 
[10:25:37.905]                             info)
[10:25:37.905]                           info <- base::paste(info, collapse = "; ")
[10:25:37.905]                           if (!has_future) {
[10:25:37.905]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:25:37.905]                               info)
[10:25:37.905]                           }
[10:25:37.905]                           else {
[10:25:37.905]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:25:37.905]                               info, version)
[10:25:37.905]                           }
[10:25:37.905]                           base::stop(msg)
[10:25:37.905]                         }
[10:25:37.905]                       })
[10:25:37.905]                     }
[10:25:37.905]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[10:25:37.905]                     base::options(mc.cores = 1L)
[10:25:37.905]                   }
[10:25:37.905]                   options(future.plan = NULL)
[10:25:37.905]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:25:37.905]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:25:37.905]                 }
[10:25:37.905]                 ...future.workdir <- getwd()
[10:25:37.905]             }
[10:25:37.905]             ...future.oldOptions <- base::as.list(base::.Options)
[10:25:37.905]             ...future.oldEnvVars <- base::Sys.getenv()
[10:25:37.905]         }
[10:25:37.905]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:25:37.905]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[10:25:37.905]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:25:37.905]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:25:37.905]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:25:37.905]             future.stdout.windows.reencode = NULL, width = 80L)
[10:25:37.905]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:25:37.905]             base::names(...future.oldOptions))
[10:25:37.905]     }
[10:25:37.905]     if (FALSE) {
[10:25:37.905]     }
[10:25:37.905]     else {
[10:25:37.905]         if (TRUE) {
[10:25:37.905]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:25:37.905]                 open = "w")
[10:25:37.905]         }
[10:25:37.905]         else {
[10:25:37.905]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:25:37.905]                 windows = "NUL", "/dev/null"), open = "w")
[10:25:37.905]         }
[10:25:37.905]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:25:37.905]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:25:37.905]             base::sink(type = "output", split = FALSE)
[10:25:37.905]             base::close(...future.stdout)
[10:25:37.905]         }, add = TRUE)
[10:25:37.905]     }
[10:25:37.905]     ...future.frame <- base::sys.nframe()
[10:25:37.905]     ...future.conditions <- base::list()
[10:25:37.905]     ...future.rng <- base::globalenv()$.Random.seed
[10:25:37.905]     if (FALSE) {
[10:25:37.905]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:25:37.905]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:25:37.905]     }
[10:25:37.905]     ...future.result <- base::tryCatch({
[10:25:37.905]         base::withCallingHandlers({
[10:25:37.905]             ...future.value <- base::withVisible(base::local({
[10:25:37.905]                 ...future.makeSendCondition <- base::local({
[10:25:37.905]                   sendCondition <- NULL
[10:25:37.905]                   function(frame = 1L) {
[10:25:37.905]                     if (is.function(sendCondition)) 
[10:25:37.905]                       return(sendCondition)
[10:25:37.905]                     ns <- getNamespace("parallel")
[10:25:37.905]                     if (exists("sendData", mode = "function", 
[10:25:37.905]                       envir = ns)) {
[10:25:37.905]                       parallel_sendData <- get("sendData", mode = "function", 
[10:25:37.905]                         envir = ns)
[10:25:37.905]                       envir <- sys.frame(frame)
[10:25:37.905]                       master <- NULL
[10:25:37.905]                       while (!identical(envir, .GlobalEnv) && 
[10:25:37.905]                         !identical(envir, emptyenv())) {
[10:25:37.905]                         if (exists("master", mode = "list", envir = envir, 
[10:25:37.905]                           inherits = FALSE)) {
[10:25:37.905]                           master <- get("master", mode = "list", 
[10:25:37.905]                             envir = envir, inherits = FALSE)
[10:25:37.905]                           if (inherits(master, c("SOCKnode", 
[10:25:37.905]                             "SOCK0node"))) {
[10:25:37.905]                             sendCondition <<- function(cond) {
[10:25:37.905]                               data <- list(type = "VALUE", value = cond, 
[10:25:37.905]                                 success = TRUE)
[10:25:37.905]                               parallel_sendData(master, data)
[10:25:37.905]                             }
[10:25:37.905]                             return(sendCondition)
[10:25:37.905]                           }
[10:25:37.905]                         }
[10:25:37.905]                         frame <- frame + 1L
[10:25:37.905]                         envir <- sys.frame(frame)
[10:25:37.905]                       }
[10:25:37.905]                     }
[10:25:37.905]                     sendCondition <<- function(cond) NULL
[10:25:37.905]                   }
[10:25:37.905]                 })
[10:25:37.905]                 withCallingHandlers({
[10:25:37.905]                   {
[10:25:37.905]                     x <- 3
[10:25:37.905]                     stop("Woops!")
[10:25:37.905]                     x
[10:25:37.905]                   }
[10:25:37.905]                 }, immediateCondition = function(cond) {
[10:25:37.905]                   sendCondition <- ...future.makeSendCondition()
[10:25:37.905]                   sendCondition(cond)
[10:25:37.905]                   muffleCondition <- function (cond, pattern = "^muffle") 
[10:25:37.905]                   {
[10:25:37.905]                     inherits <- base::inherits
[10:25:37.905]                     invokeRestart <- base::invokeRestart
[10:25:37.905]                     is.null <- base::is.null
[10:25:37.905]                     muffled <- FALSE
[10:25:37.905]                     if (inherits(cond, "message")) {
[10:25:37.905]                       muffled <- grepl(pattern, "muffleMessage")
[10:25:37.905]                       if (muffled) 
[10:25:37.905]                         invokeRestart("muffleMessage")
[10:25:37.905]                     }
[10:25:37.905]                     else if (inherits(cond, "warning")) {
[10:25:37.905]                       muffled <- grepl(pattern, "muffleWarning")
[10:25:37.905]                       if (muffled) 
[10:25:37.905]                         invokeRestart("muffleWarning")
[10:25:37.905]                     }
[10:25:37.905]                     else if (inherits(cond, "condition")) {
[10:25:37.905]                       if (!is.null(pattern)) {
[10:25:37.905]                         computeRestarts <- base::computeRestarts
[10:25:37.905]                         grepl <- base::grepl
[10:25:37.905]                         restarts <- computeRestarts(cond)
[10:25:37.905]                         for (restart in restarts) {
[10:25:37.905]                           name <- restart$name
[10:25:37.905]                           if (is.null(name)) 
[10:25:37.905]                             next
[10:25:37.905]                           if (!grepl(pattern, name)) 
[10:25:37.905]                             next
[10:25:37.905]                           invokeRestart(restart)
[10:25:37.905]                           muffled <- TRUE
[10:25:37.905]                           break
[10:25:37.905]                         }
[10:25:37.905]                       }
[10:25:37.905]                     }
[10:25:37.905]                     invisible(muffled)
[10:25:37.905]                   }
[10:25:37.905]                   muffleCondition(cond)
[10:25:37.905]                 })
[10:25:37.905]             }))
[10:25:37.905]             future::FutureResult(value = ...future.value$value, 
[10:25:37.905]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:25:37.905]                   ...future.rng), globalenv = if (FALSE) 
[10:25:37.905]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:25:37.905]                     ...future.globalenv.names))
[10:25:37.905]                 else NULL, started = ...future.startTime, version = "1.8")
[10:25:37.905]         }, condition = base::local({
[10:25:37.905]             c <- base::c
[10:25:37.905]             inherits <- base::inherits
[10:25:37.905]             invokeRestart <- base::invokeRestart
[10:25:37.905]             length <- base::length
[10:25:37.905]             list <- base::list
[10:25:37.905]             seq.int <- base::seq.int
[10:25:37.905]             signalCondition <- base::signalCondition
[10:25:37.905]             sys.calls <- base::sys.calls
[10:25:37.905]             `[[` <- base::`[[`
[10:25:37.905]             `+` <- base::`+`
[10:25:37.905]             `<<-` <- base::`<<-`
[10:25:37.905]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:25:37.905]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:25:37.905]                   3L)]
[10:25:37.905]             }
[10:25:37.905]             function(cond) {
[10:25:37.905]                 is_error <- inherits(cond, "error")
[10:25:37.905]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:25:37.905]                   NULL)
[10:25:37.905]                 if (is_error) {
[10:25:37.905]                   sessionInformation <- function() {
[10:25:37.905]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:25:37.905]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:25:37.905]                       search = base::search(), system = base::Sys.info())
[10:25:37.905]                   }
[10:25:37.905]                   ...future.conditions[[length(...future.conditions) + 
[10:25:37.905]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:25:37.905]                     cond$call), session = sessionInformation(), 
[10:25:37.905]                     timestamp = base::Sys.time(), signaled = 0L)
[10:25:37.905]                   signalCondition(cond)
[10:25:37.905]                 }
[10:25:37.905]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:25:37.905]                 "immediateCondition"))) {
[10:25:37.905]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:25:37.905]                   ...future.conditions[[length(...future.conditions) + 
[10:25:37.905]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:25:37.905]                   if (TRUE && !signal) {
[10:25:37.905]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:25:37.905]                     {
[10:25:37.905]                       inherits <- base::inherits
[10:25:37.905]                       invokeRestart <- base::invokeRestart
[10:25:37.905]                       is.null <- base::is.null
[10:25:37.905]                       muffled <- FALSE
[10:25:37.905]                       if (inherits(cond, "message")) {
[10:25:37.905]                         muffled <- grepl(pattern, "muffleMessage")
[10:25:37.905]                         if (muffled) 
[10:25:37.905]                           invokeRestart("muffleMessage")
[10:25:37.905]                       }
[10:25:37.905]                       else if (inherits(cond, "warning")) {
[10:25:37.905]                         muffled <- grepl(pattern, "muffleWarning")
[10:25:37.905]                         if (muffled) 
[10:25:37.905]                           invokeRestart("muffleWarning")
[10:25:37.905]                       }
[10:25:37.905]                       else if (inherits(cond, "condition")) {
[10:25:37.905]                         if (!is.null(pattern)) {
[10:25:37.905]                           computeRestarts <- base::computeRestarts
[10:25:37.905]                           grepl <- base::grepl
[10:25:37.905]                           restarts <- computeRestarts(cond)
[10:25:37.905]                           for (restart in restarts) {
[10:25:37.905]                             name <- restart$name
[10:25:37.905]                             if (is.null(name)) 
[10:25:37.905]                               next
[10:25:37.905]                             if (!grepl(pattern, name)) 
[10:25:37.905]                               next
[10:25:37.905]                             invokeRestart(restart)
[10:25:37.905]                             muffled <- TRUE
[10:25:37.905]                             break
[10:25:37.905]                           }
[10:25:37.905]                         }
[10:25:37.905]                       }
[10:25:37.905]                       invisible(muffled)
[10:25:37.905]                     }
[10:25:37.905]                     muffleCondition(cond, pattern = "^muffle")
[10:25:37.905]                   }
[10:25:37.905]                 }
[10:25:37.905]                 else {
[10:25:37.905]                   if (TRUE) {
[10:25:37.905]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:25:37.905]                     {
[10:25:37.905]                       inherits <- base::inherits
[10:25:37.905]                       invokeRestart <- base::invokeRestart
[10:25:37.905]                       is.null <- base::is.null
[10:25:37.905]                       muffled <- FALSE
[10:25:37.905]                       if (inherits(cond, "message")) {
[10:25:37.905]                         muffled <- grepl(pattern, "muffleMessage")
[10:25:37.905]                         if (muffled) 
[10:25:37.905]                           invokeRestart("muffleMessage")
[10:25:37.905]                       }
[10:25:37.905]                       else if (inherits(cond, "warning")) {
[10:25:37.905]                         muffled <- grepl(pattern, "muffleWarning")
[10:25:37.905]                         if (muffled) 
[10:25:37.905]                           invokeRestart("muffleWarning")
[10:25:37.905]                       }
[10:25:37.905]                       else if (inherits(cond, "condition")) {
[10:25:37.905]                         if (!is.null(pattern)) {
[10:25:37.905]                           computeRestarts <- base::computeRestarts
[10:25:37.905]                           grepl <- base::grepl
[10:25:37.905]                           restarts <- computeRestarts(cond)
[10:25:37.905]                           for (restart in restarts) {
[10:25:37.905]                             name <- restart$name
[10:25:37.905]                             if (is.null(name)) 
[10:25:37.905]                               next
[10:25:37.905]                             if (!grepl(pattern, name)) 
[10:25:37.905]                               next
[10:25:37.905]                             invokeRestart(restart)
[10:25:37.905]                             muffled <- TRUE
[10:25:37.905]                             break
[10:25:37.905]                           }
[10:25:37.905]                         }
[10:25:37.905]                       }
[10:25:37.905]                       invisible(muffled)
[10:25:37.905]                     }
[10:25:37.905]                     muffleCondition(cond, pattern = "^muffle")
[10:25:37.905]                   }
[10:25:37.905]                 }
[10:25:37.905]             }
[10:25:37.905]         }))
[10:25:37.905]     }, error = function(ex) {
[10:25:37.905]         base::structure(base::list(value = NULL, visible = NULL, 
[10:25:37.905]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:25:37.905]                 ...future.rng), started = ...future.startTime, 
[10:25:37.905]             finished = Sys.time(), session_uuid = NA_character_, 
[10:25:37.905]             version = "1.8"), class = "FutureResult")
[10:25:37.905]     }, finally = {
[10:25:37.905]         if (!identical(...future.workdir, getwd())) 
[10:25:37.905]             setwd(...future.workdir)
[10:25:37.905]         {
[10:25:37.905]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:25:37.905]                 ...future.oldOptions$nwarnings <- NULL
[10:25:37.905]             }
[10:25:37.905]             base::options(...future.oldOptions)
[10:25:37.905]             if (.Platform$OS.type == "windows") {
[10:25:37.905]                 old_names <- names(...future.oldEnvVars)
[10:25:37.905]                 envs <- base::Sys.getenv()
[10:25:37.905]                 names <- names(envs)
[10:25:37.905]                 common <- intersect(names, old_names)
[10:25:37.905]                 added <- setdiff(names, old_names)
[10:25:37.905]                 removed <- setdiff(old_names, names)
[10:25:37.905]                 changed <- common[...future.oldEnvVars[common] != 
[10:25:37.905]                   envs[common]]
[10:25:37.905]                 NAMES <- toupper(changed)
[10:25:37.905]                 args <- list()
[10:25:37.905]                 for (kk in seq_along(NAMES)) {
[10:25:37.905]                   name <- changed[[kk]]
[10:25:37.905]                   NAME <- NAMES[[kk]]
[10:25:37.905]                   if (name != NAME && is.element(NAME, old_names)) 
[10:25:37.905]                     next
[10:25:37.905]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:25:37.905]                 }
[10:25:37.905]                 NAMES <- toupper(added)
[10:25:37.905]                 for (kk in seq_along(NAMES)) {
[10:25:37.905]                   name <- added[[kk]]
[10:25:37.905]                   NAME <- NAMES[[kk]]
[10:25:37.905]                   if (name != NAME && is.element(NAME, old_names)) 
[10:25:37.905]                     next
[10:25:37.905]                   args[[name]] <- ""
[10:25:37.905]                 }
[10:25:37.905]                 NAMES <- toupper(removed)
[10:25:37.905]                 for (kk in seq_along(NAMES)) {
[10:25:37.905]                   name <- removed[[kk]]
[10:25:37.905]                   NAME <- NAMES[[kk]]
[10:25:37.905]                   if (name != NAME && is.element(NAME, old_names)) 
[10:25:37.905]                     next
[10:25:37.905]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:25:37.905]                 }
[10:25:37.905]                 if (length(args) > 0) 
[10:25:37.905]                   base::do.call(base::Sys.setenv, args = args)
[10:25:37.905]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:25:37.905]             }
[10:25:37.905]             else {
[10:25:37.905]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:25:37.905]             }
[10:25:37.905]             {
[10:25:37.905]                 if (base::length(...future.futureOptionsAdded) > 
[10:25:37.905]                   0L) {
[10:25:37.905]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:25:37.905]                   base::names(opts) <- ...future.futureOptionsAdded
[10:25:37.905]                   base::options(opts)
[10:25:37.905]                 }
[10:25:37.905]                 {
[10:25:37.905]                   {
[10:25:37.905]                     base::options(mc.cores = ...future.mc.cores.old)
[10:25:37.905]                     NULL
[10:25:37.905]                   }
[10:25:37.905]                   options(future.plan = NULL)
[10:25:37.905]                   if (is.na(NA_character_)) 
[10:25:37.905]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:25:37.905]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:25:37.905]                   future::plan(list(function (..., workers = availableCores(), 
[10:25:37.905]                     lazy = FALSE, rscript_libs = .libPaths(), 
[10:25:37.905]                     envir = parent.frame()) 
[10:25:37.905]                   {
[10:25:37.905]                     if (is.function(workers)) 
[10:25:37.905]                       workers <- workers()
[10:25:37.905]                     workers <- structure(as.integer(workers), 
[10:25:37.905]                       class = class(workers))
[10:25:37.905]                     stop_if_not(length(workers) == 1, is.finite(workers), 
[10:25:37.905]                       workers >= 1)
[10:25:37.905]                     if (workers == 1L && !inherits(workers, "AsIs")) {
[10:25:37.905]                       return(sequential(..., lazy = TRUE, envir = envir))
[10:25:37.905]                     }
[10:25:37.905]                     future <- MultisessionFuture(..., workers = workers, 
[10:25:37.905]                       lazy = lazy, rscript_libs = rscript_libs, 
[10:25:37.905]                       envir = envir)
[10:25:37.905]                     if (!future$lazy) 
[10:25:37.905]                       future <- run(future)
[10:25:37.905]                     invisible(future)
[10:25:37.905]                   }), .cleanup = FALSE, .init = FALSE)
[10:25:37.905]                 }
[10:25:37.905]             }
[10:25:37.905]         }
[10:25:37.905]     })
[10:25:37.905]     if (TRUE) {
[10:25:37.905]         base::sink(type = "output", split = FALSE)
[10:25:37.905]         if (TRUE) {
[10:25:37.905]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:25:37.905]         }
[10:25:37.905]         else {
[10:25:37.905]             ...future.result["stdout"] <- base::list(NULL)
[10:25:37.905]         }
[10:25:37.905]         base::close(...future.stdout)
[10:25:37.905]         ...future.stdout <- NULL
[10:25:37.905]     }
[10:25:37.905]     ...future.result$conditions <- ...future.conditions
[10:25:37.905]     ...future.result$finished <- base::Sys.time()
[10:25:37.905]     ...future.result
[10:25:37.905] }
[10:25:37.909] MultisessionFuture started
[10:25:37.909] - Launch lazy future ... done
[10:25:37.909] run() for ‘MultisessionFuture’ ... done
[10:25:37.909] result() for ClusterFuture ...
[10:25:37.909] receiveMessageFromWorker() for ClusterFuture ...
[10:25:37.909] - Validating connection of MultisessionFuture
[10:25:37.955] - received message: FutureResult
[10:25:37.955] - Received FutureResult
[10:25:37.955] - Erased future from FutureRegistry
[10:25:37.955] result() for ClusterFuture ...
[10:25:37.955] - result already collected: FutureResult
[10:25:37.955] result() for ClusterFuture ... done
[10:25:37.955] signalConditions() ...
[10:25:37.955]  - include = ‘immediateCondition’
[10:25:37.956]  - exclude = 
[10:25:37.956]  - resignal = FALSE
[10:25:37.956]  - Number of conditions: 1
[10:25:37.956] signalConditions() ... done
[10:25:37.956] receiveMessageFromWorker() for ClusterFuture ... done
[10:25:37.956] result() for ClusterFuture ... done
[10:25:37.956] result() for ClusterFuture ...
[10:25:37.956] - result already collected: FutureResult
[10:25:37.956] result() for ClusterFuture ... done
[10:25:37.957] signalConditions() ...
[10:25:37.957]  - include = ‘immediateCondition’
[10:25:37.957]  - exclude = 
[10:25:37.957]  - resignal = FALSE
[10:25:37.957]  - Number of conditions: 1
[10:25:37.957] signalConditions() ... done
[10:25:37.957] Future state: ‘finished’
[10:25:37.957] result() for ClusterFuture ...
[10:25:37.958] - result already collected: FutureResult
[10:25:37.958] result() for ClusterFuture ... done
[10:25:37.958] signalConditions() ...
[10:25:37.958]  - include = ‘condition’
[10:25:37.958]  - exclude = ‘immediateCondition’
[10:25:37.958]  - resignal = TRUE
[10:25:37.958]  - Number of conditions: 1
[10:25:37.958]  - Condition #1: ‘simpleError’, ‘error’, ‘condition’
[10:25:37.958] signalConditions() ... done
[10:25:37.959] getGlobalsAndPackages() ...
[10:25:37.959] Searching for globals...
[10:25:37.961] - globals found: [6] ‘{’, ‘if’, ‘==’, ‘%%’, ‘ii’, ‘stop’
[10:25:37.961] Searching for globals ... DONE
[10:25:37.961] Resolving globals: FALSE
[10:25:37.962] The total size of the 1 globals is 56 bytes (56 bytes)
[10:25:37.962] The total size of the 1 globals exported for future expression (‘{; if (ii%%2 == 0); stop("Woops!"); ii; }’) is 56 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘ii’ (56 bytes of class ‘numeric’)
[10:25:37.962] - globals: [1] ‘ii’
[10:25:37.963] 
[10:25:37.963] getGlobalsAndPackages() ... DONE
[10:25:37.963] run() for ‘Future’ ...
[10:25:37.963] - state: ‘created’
[10:25:37.963] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[10:25:37.981] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[10:25:37.981] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[10:25:37.981]   - Field: ‘node’
[10:25:37.982]   - Field: ‘label’
[10:25:37.982]   - Field: ‘local’
[10:25:37.982]   - Field: ‘owner’
[10:25:37.982]   - Field: ‘envir’
[10:25:37.982]   - Field: ‘workers’
[10:25:37.982]   - Field: ‘packages’
[10:25:37.982]   - Field: ‘gc’
[10:25:37.982]   - Field: ‘conditions’
[10:25:37.982]   - Field: ‘persistent’
[10:25:37.982]   - Field: ‘expr’
[10:25:37.982]   - Field: ‘uuid’
[10:25:37.983]   - Field: ‘seed’
[10:25:37.983]   - Field: ‘version’
[10:25:37.983]   - Field: ‘result’
[10:25:37.983]   - Field: ‘asynchronous’
[10:25:37.983]   - Field: ‘calls’
[10:25:37.983]   - Field: ‘globals’
[10:25:37.983]   - Field: ‘stdout’
[10:25:37.983]   - Field: ‘earlySignal’
[10:25:37.983]   - Field: ‘lazy’
[10:25:37.983]   - Field: ‘state’
[10:25:37.983] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[10:25:37.984] - Launch lazy future ...
[10:25:37.984] Packages needed by the future expression (n = 0): <none>
[10:25:37.984] Packages needed by future strategies (n = 0): <none>
[10:25:37.984] {
[10:25:37.984]     {
[10:25:37.984]         {
[10:25:37.984]             ...future.startTime <- base::Sys.time()
[10:25:37.984]             {
[10:25:37.984]                 {
[10:25:37.984]                   {
[10:25:37.984]                     {
[10:25:37.984]                       base::local({
[10:25:37.984]                         has_future <- base::requireNamespace("future", 
[10:25:37.984]                           quietly = TRUE)
[10:25:37.984]                         if (has_future) {
[10:25:37.984]                           ns <- base::getNamespace("future")
[10:25:37.984]                           version <- ns[[".package"]][["version"]]
[10:25:37.984]                           if (is.null(version)) 
[10:25:37.984]                             version <- utils::packageVersion("future")
[10:25:37.984]                         }
[10:25:37.984]                         else {
[10:25:37.984]                           version <- NULL
[10:25:37.984]                         }
[10:25:37.984]                         if (!has_future || version < "1.8.0") {
[10:25:37.984]                           info <- base::c(r_version = base::gsub("R version ", 
[10:25:37.984]                             "", base::R.version$version.string), 
[10:25:37.984]                             platform = base::sprintf("%s (%s-bit)", 
[10:25:37.984]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:25:37.984]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[10:25:37.984]                               "release", "version")], collapse = " "), 
[10:25:37.984]                             hostname = base::Sys.info()[["nodename"]])
[10:25:37.984]                           info <- base::sprintf("%s: %s", base::names(info), 
[10:25:37.984]                             info)
[10:25:37.984]                           info <- base::paste(info, collapse = "; ")
[10:25:37.984]                           if (!has_future) {
[10:25:37.984]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:25:37.984]                               info)
[10:25:37.984]                           }
[10:25:37.984]                           else {
[10:25:37.984]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:25:37.984]                               info, version)
[10:25:37.984]                           }
[10:25:37.984]                           base::stop(msg)
[10:25:37.984]                         }
[10:25:37.984]                       })
[10:25:37.984]                     }
[10:25:37.984]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[10:25:37.984]                     base::options(mc.cores = 1L)
[10:25:37.984]                   }
[10:25:37.984]                   options(future.plan = NULL)
[10:25:37.984]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:25:37.984]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:25:37.984]                 }
[10:25:37.984]                 ...future.workdir <- getwd()
[10:25:37.984]             }
[10:25:37.984]             ...future.oldOptions <- base::as.list(base::.Options)
[10:25:37.984]             ...future.oldEnvVars <- base::Sys.getenv()
[10:25:37.984]         }
[10:25:37.984]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:25:37.984]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[10:25:37.984]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:25:37.984]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:25:37.984]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:25:37.984]             future.stdout.windows.reencode = NULL, width = 80L)
[10:25:37.984]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:25:37.984]             base::names(...future.oldOptions))
[10:25:37.984]     }
[10:25:37.984]     if (FALSE) {
[10:25:37.984]     }
[10:25:37.984]     else {
[10:25:37.984]         if (TRUE) {
[10:25:37.984]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:25:37.984]                 open = "w")
[10:25:37.984]         }
[10:25:37.984]         else {
[10:25:37.984]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:25:37.984]                 windows = "NUL", "/dev/null"), open = "w")
[10:25:37.984]         }
[10:25:37.984]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:25:37.984]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:25:37.984]             base::sink(type = "output", split = FALSE)
[10:25:37.984]             base::close(...future.stdout)
[10:25:37.984]         }, add = TRUE)
[10:25:37.984]     }
[10:25:37.984]     ...future.frame <- base::sys.nframe()
[10:25:37.984]     ...future.conditions <- base::list()
[10:25:37.984]     ...future.rng <- base::globalenv()$.Random.seed
[10:25:37.984]     if (FALSE) {
[10:25:37.984]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:25:37.984]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:25:37.984]     }
[10:25:37.984]     ...future.result <- base::tryCatch({
[10:25:37.984]         base::withCallingHandlers({
[10:25:37.984]             ...future.value <- base::withVisible(base::local({
[10:25:37.984]                 ...future.makeSendCondition <- base::local({
[10:25:37.984]                   sendCondition <- NULL
[10:25:37.984]                   function(frame = 1L) {
[10:25:37.984]                     if (is.function(sendCondition)) 
[10:25:37.984]                       return(sendCondition)
[10:25:37.984]                     ns <- getNamespace("parallel")
[10:25:37.984]                     if (exists("sendData", mode = "function", 
[10:25:37.984]                       envir = ns)) {
[10:25:37.984]                       parallel_sendData <- get("sendData", mode = "function", 
[10:25:37.984]                         envir = ns)
[10:25:37.984]                       envir <- sys.frame(frame)
[10:25:37.984]                       master <- NULL
[10:25:37.984]                       while (!identical(envir, .GlobalEnv) && 
[10:25:37.984]                         !identical(envir, emptyenv())) {
[10:25:37.984]                         if (exists("master", mode = "list", envir = envir, 
[10:25:37.984]                           inherits = FALSE)) {
[10:25:37.984]                           master <- get("master", mode = "list", 
[10:25:37.984]                             envir = envir, inherits = FALSE)
[10:25:37.984]                           if (inherits(master, c("SOCKnode", 
[10:25:37.984]                             "SOCK0node"))) {
[10:25:37.984]                             sendCondition <<- function(cond) {
[10:25:37.984]                               data <- list(type = "VALUE", value = cond, 
[10:25:37.984]                                 success = TRUE)
[10:25:37.984]                               parallel_sendData(master, data)
[10:25:37.984]                             }
[10:25:37.984]                             return(sendCondition)
[10:25:37.984]                           }
[10:25:37.984]                         }
[10:25:37.984]                         frame <- frame + 1L
[10:25:37.984]                         envir <- sys.frame(frame)
[10:25:37.984]                       }
[10:25:37.984]                     }
[10:25:37.984]                     sendCondition <<- function(cond) NULL
[10:25:37.984]                   }
[10:25:37.984]                 })
[10:25:37.984]                 withCallingHandlers({
[10:25:37.984]                   {
[10:25:37.984]                     if (ii%%2 == 0) 
[10:25:37.984]                       stop("Woops!")
[10:25:37.984]                     ii
[10:25:37.984]                   }
[10:25:37.984]                 }, immediateCondition = function(cond) {
[10:25:37.984]                   sendCondition <- ...future.makeSendCondition()
[10:25:37.984]                   sendCondition(cond)
[10:25:37.984]                   muffleCondition <- function (cond, pattern = "^muffle") 
[10:25:37.984]                   {
[10:25:37.984]                     inherits <- base::inherits
[10:25:37.984]                     invokeRestart <- base::invokeRestart
[10:25:37.984]                     is.null <- base::is.null
[10:25:37.984]                     muffled <- FALSE
[10:25:37.984]                     if (inherits(cond, "message")) {
[10:25:37.984]                       muffled <- grepl(pattern, "muffleMessage")
[10:25:37.984]                       if (muffled) 
[10:25:37.984]                         invokeRestart("muffleMessage")
[10:25:37.984]                     }
[10:25:37.984]                     else if (inherits(cond, "warning")) {
[10:25:37.984]                       muffled <- grepl(pattern, "muffleWarning")
[10:25:37.984]                       if (muffled) 
[10:25:37.984]                         invokeRestart("muffleWarning")
[10:25:37.984]                     }
[10:25:37.984]                     else if (inherits(cond, "condition")) {
[10:25:37.984]                       if (!is.null(pattern)) {
[10:25:37.984]                         computeRestarts <- base::computeRestarts
[10:25:37.984]                         grepl <- base::grepl
[10:25:37.984]                         restarts <- computeRestarts(cond)
[10:25:37.984]                         for (restart in restarts) {
[10:25:37.984]                           name <- restart$name
[10:25:37.984]                           if (is.null(name)) 
[10:25:37.984]                             next
[10:25:37.984]                           if (!grepl(pattern, name)) 
[10:25:37.984]                             next
[10:25:37.984]                           invokeRestart(restart)
[10:25:37.984]                           muffled <- TRUE
[10:25:37.984]                           break
[10:25:37.984]                         }
[10:25:37.984]                       }
[10:25:37.984]                     }
[10:25:37.984]                     invisible(muffled)
[10:25:37.984]                   }
[10:25:37.984]                   muffleCondition(cond)
[10:25:37.984]                 })
[10:25:37.984]             }))
[10:25:37.984]             future::FutureResult(value = ...future.value$value, 
[10:25:37.984]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:25:37.984]                   ...future.rng), globalenv = if (FALSE) 
[10:25:37.984]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:25:37.984]                     ...future.globalenv.names))
[10:25:37.984]                 else NULL, started = ...future.startTime, version = "1.8")
[10:25:37.984]         }, condition = base::local({
[10:25:37.984]             c <- base::c
[10:25:37.984]             inherits <- base::inherits
[10:25:37.984]             invokeRestart <- base::invokeRestart
[10:25:37.984]             length <- base::length
[10:25:37.984]             list <- base::list
[10:25:37.984]             seq.int <- base::seq.int
[10:25:37.984]             signalCondition <- base::signalCondition
[10:25:37.984]             sys.calls <- base::sys.calls
[10:25:37.984]             `[[` <- base::`[[`
[10:25:37.984]             `+` <- base::`+`
[10:25:37.984]             `<<-` <- base::`<<-`
[10:25:37.984]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:25:37.984]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:25:37.984]                   3L)]
[10:25:37.984]             }
[10:25:37.984]             function(cond) {
[10:25:37.984]                 is_error <- inherits(cond, "error")
[10:25:37.984]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:25:37.984]                   NULL)
[10:25:37.984]                 if (is_error) {
[10:25:37.984]                   sessionInformation <- function() {
[10:25:37.984]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:25:37.984]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:25:37.984]                       search = base::search(), system = base::Sys.info())
[10:25:37.984]                   }
[10:25:37.984]                   ...future.conditions[[length(...future.conditions) + 
[10:25:37.984]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:25:37.984]                     cond$call), session = sessionInformation(), 
[10:25:37.984]                     timestamp = base::Sys.time(), signaled = 0L)
[10:25:37.984]                   signalCondition(cond)
[10:25:37.984]                 }
[10:25:37.984]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:25:37.984]                 "immediateCondition"))) {
[10:25:37.984]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:25:37.984]                   ...future.conditions[[length(...future.conditions) + 
[10:25:37.984]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:25:37.984]                   if (TRUE && !signal) {
[10:25:37.984]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:25:37.984]                     {
[10:25:37.984]                       inherits <- base::inherits
[10:25:37.984]                       invokeRestart <- base::invokeRestart
[10:25:37.984]                       is.null <- base::is.null
[10:25:37.984]                       muffled <- FALSE
[10:25:37.984]                       if (inherits(cond, "message")) {
[10:25:37.984]                         muffled <- grepl(pattern, "muffleMessage")
[10:25:37.984]                         if (muffled) 
[10:25:37.984]                           invokeRestart("muffleMessage")
[10:25:37.984]                       }
[10:25:37.984]                       else if (inherits(cond, "warning")) {
[10:25:37.984]                         muffled <- grepl(pattern, "muffleWarning")
[10:25:37.984]                         if (muffled) 
[10:25:37.984]                           invokeRestart("muffleWarning")
[10:25:37.984]                       }
[10:25:37.984]                       else if (inherits(cond, "condition")) {
[10:25:37.984]                         if (!is.null(pattern)) {
[10:25:37.984]                           computeRestarts <- base::computeRestarts
[10:25:37.984]                           grepl <- base::grepl
[10:25:37.984]                           restarts <- computeRestarts(cond)
[10:25:37.984]                           for (restart in restarts) {
[10:25:37.984]                             name <- restart$name
[10:25:37.984]                             if (is.null(name)) 
[10:25:37.984]                               next
[10:25:37.984]                             if (!grepl(pattern, name)) 
[10:25:37.984]                               next
[10:25:37.984]                             invokeRestart(restart)
[10:25:37.984]                             muffled <- TRUE
[10:25:37.984]                             break
[10:25:37.984]                           }
[10:25:37.984]                         }
[10:25:37.984]                       }
[10:25:37.984]                       invisible(muffled)
[10:25:37.984]                     }
[10:25:37.984]                     muffleCondition(cond, pattern = "^muffle")
[10:25:37.984]                   }
[10:25:37.984]                 }
[10:25:37.984]                 else {
[10:25:37.984]                   if (TRUE) {
[10:25:37.984]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:25:37.984]                     {
[10:25:37.984]                       inherits <- base::inherits
[10:25:37.984]                       invokeRestart <- base::invokeRestart
[10:25:37.984]                       is.null <- base::is.null
[10:25:37.984]                       muffled <- FALSE
[10:25:37.984]                       if (inherits(cond, "message")) {
[10:25:37.984]                         muffled <- grepl(pattern, "muffleMessage")
[10:25:37.984]                         if (muffled) 
[10:25:37.984]                           invokeRestart("muffleMessage")
[10:25:37.984]                       }
[10:25:37.984]                       else if (inherits(cond, "warning")) {
[10:25:37.984]                         muffled <- grepl(pattern, "muffleWarning")
[10:25:37.984]                         if (muffled) 
[10:25:37.984]                           invokeRestart("muffleWarning")
[10:25:37.984]                       }
[10:25:37.984]                       else if (inherits(cond, "condition")) {
[10:25:37.984]                         if (!is.null(pattern)) {
[10:25:37.984]                           computeRestarts <- base::computeRestarts
[10:25:37.984]                           grepl <- base::grepl
[10:25:37.984]                           restarts <- computeRestarts(cond)
[10:25:37.984]                           for (restart in restarts) {
[10:25:37.984]                             name <- restart$name
[10:25:37.984]                             if (is.null(name)) 
[10:25:37.984]                               next
[10:25:37.984]                             if (!grepl(pattern, name)) 
[10:25:37.984]                               next
[10:25:37.984]                             invokeRestart(restart)
[10:25:37.984]                             muffled <- TRUE
[10:25:37.984]                             break
[10:25:37.984]                           }
[10:25:37.984]                         }
[10:25:37.984]                       }
[10:25:37.984]                       invisible(muffled)
[10:25:37.984]                     }
[10:25:37.984]                     muffleCondition(cond, pattern = "^muffle")
[10:25:37.984]                   }
[10:25:37.984]                 }
[10:25:37.984]             }
[10:25:37.984]         }))
[10:25:37.984]     }, error = function(ex) {
[10:25:37.984]         base::structure(base::list(value = NULL, visible = NULL, 
[10:25:37.984]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:25:37.984]                 ...future.rng), started = ...future.startTime, 
[10:25:37.984]             finished = Sys.time(), session_uuid = NA_character_, 
[10:25:37.984]             version = "1.8"), class = "FutureResult")
[10:25:37.984]     }, finally = {
[10:25:37.984]         if (!identical(...future.workdir, getwd())) 
[10:25:37.984]             setwd(...future.workdir)
[10:25:37.984]         {
[10:25:37.984]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:25:37.984]                 ...future.oldOptions$nwarnings <- NULL
[10:25:37.984]             }
[10:25:37.984]             base::options(...future.oldOptions)
[10:25:37.984]             if (.Platform$OS.type == "windows") {
[10:25:37.984]                 old_names <- names(...future.oldEnvVars)
[10:25:37.984]                 envs <- base::Sys.getenv()
[10:25:37.984]                 names <- names(envs)
[10:25:37.984]                 common <- intersect(names, old_names)
[10:25:37.984]                 added <- setdiff(names, old_names)
[10:25:37.984]                 removed <- setdiff(old_names, names)
[10:25:37.984]                 changed <- common[...future.oldEnvVars[common] != 
[10:25:37.984]                   envs[common]]
[10:25:37.984]                 NAMES <- toupper(changed)
[10:25:37.984]                 args <- list()
[10:25:37.984]                 for (kk in seq_along(NAMES)) {
[10:25:37.984]                   name <- changed[[kk]]
[10:25:37.984]                   NAME <- NAMES[[kk]]
[10:25:37.984]                   if (name != NAME && is.element(NAME, old_names)) 
[10:25:37.984]                     next
[10:25:37.984]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:25:37.984]                 }
[10:25:37.984]                 NAMES <- toupper(added)
[10:25:37.984]                 for (kk in seq_along(NAMES)) {
[10:25:37.984]                   name <- added[[kk]]
[10:25:37.984]                   NAME <- NAMES[[kk]]
[10:25:37.984]                   if (name != NAME && is.element(NAME, old_names)) 
[10:25:37.984]                     next
[10:25:37.984]                   args[[name]] <- ""
[10:25:37.984]                 }
[10:25:37.984]                 NAMES <- toupper(removed)
[10:25:37.984]                 for (kk in seq_along(NAMES)) {
[10:25:37.984]                   name <- removed[[kk]]
[10:25:37.984]                   NAME <- NAMES[[kk]]
[10:25:37.984]                   if (name != NAME && is.element(NAME, old_names)) 
[10:25:37.984]                     next
[10:25:37.984]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:25:37.984]                 }
[10:25:37.984]                 if (length(args) > 0) 
[10:25:37.984]                   base::do.call(base::Sys.setenv, args = args)
[10:25:37.984]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:25:37.984]             }
[10:25:37.984]             else {
[10:25:37.984]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:25:37.984]             }
[10:25:37.984]             {
[10:25:37.984]                 if (base::length(...future.futureOptionsAdded) > 
[10:25:37.984]                   0L) {
[10:25:37.984]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:25:37.984]                   base::names(opts) <- ...future.futureOptionsAdded
[10:25:37.984]                   base::options(opts)
[10:25:37.984]                 }
[10:25:37.984]                 {
[10:25:37.984]                   {
[10:25:37.984]                     base::options(mc.cores = ...future.mc.cores.old)
[10:25:37.984]                     NULL
[10:25:37.984]                   }
[10:25:37.984]                   options(future.plan = NULL)
[10:25:37.984]                   if (is.na(NA_character_)) 
[10:25:37.984]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:25:37.984]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:25:37.984]                   future::plan(list(function (..., workers = availableCores(), 
[10:25:37.984]                     lazy = FALSE, rscript_libs = .libPaths(), 
[10:25:37.984]                     envir = parent.frame()) 
[10:25:37.984]                   {
[10:25:37.984]                     if (is.function(workers)) 
[10:25:37.984]                       workers <- workers()
[10:25:37.984]                     workers <- structure(as.integer(workers), 
[10:25:37.984]                       class = class(workers))
[10:25:37.984]                     stop_if_not(length(workers) == 1, is.finite(workers), 
[10:25:37.984]                       workers >= 1)
[10:25:37.984]                     if (workers == 1L && !inherits(workers, "AsIs")) {
[10:25:37.984]                       return(sequential(..., lazy = TRUE, envir = envir))
[10:25:37.984]                     }
[10:25:37.984]                     future <- MultisessionFuture(..., workers = workers, 
[10:25:37.984]                       lazy = lazy, rscript_libs = rscript_libs, 
[10:25:37.984]                       envir = envir)
[10:25:37.984]                     if (!future$lazy) 
[10:25:37.984]                       future <- run(future)
[10:25:37.984]                     invisible(future)
[10:25:37.984]                   }), .cleanup = FALSE, .init = FALSE)
[10:25:37.984]                 }
[10:25:37.984]             }
[10:25:37.984]         }
[10:25:37.984]     })
[10:25:37.984]     if (TRUE) {
[10:25:37.984]         base::sink(type = "output", split = FALSE)
[10:25:37.984]         if (TRUE) {
[10:25:37.984]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:25:37.984]         }
[10:25:37.984]         else {
[10:25:37.984]             ...future.result["stdout"] <- base::list(NULL)
[10:25:37.984]         }
[10:25:37.984]         base::close(...future.stdout)
[10:25:37.984]         ...future.stdout <- NULL
[10:25:37.984]     }
[10:25:37.984]     ...future.result$conditions <- ...future.conditions
[10:25:37.984]     ...future.result$finished <- base::Sys.time()
[10:25:37.984]     ...future.result
[10:25:37.984] }
[10:25:37.987] Exporting 1 global objects (56 bytes) to cluster node #1 ...
[10:25:37.987] Exporting ‘ii’ (56 bytes) to cluster node #1 ...
[10:25:37.987] Exporting ‘ii’ (56 bytes) to cluster node #1 ... DONE
[10:25:37.988] Exporting 1 global objects (56 bytes) to cluster node #1 ... DONE
[10:25:37.988] MultisessionFuture started
[10:25:37.988] - Launch lazy future ... done
[10:25:37.988] run() for ‘MultisessionFuture’ ... done
[10:25:37.989] getGlobalsAndPackages() ...
[10:25:37.989] Searching for globals...
[10:25:37.990] - globals found: [6] ‘{’, ‘if’, ‘==’, ‘%%’, ‘ii’, ‘stop’
[10:25:37.991] Searching for globals ... DONE
[10:25:37.991] Resolving globals: FALSE
[10:25:37.991] The total size of the 1 globals is 56 bytes (56 bytes)
[10:25:37.991] The total size of the 1 globals exported for future expression (‘{; if (ii%%2 == 0); stop("Woops!"); ii; }’) is 56 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘ii’ (56 bytes of class ‘numeric’)
[10:25:37.992] - globals: [1] ‘ii’
[10:25:37.992] 
[10:25:37.992] getGlobalsAndPackages() ... DONE
[10:25:37.992] run() for ‘Future’ ...
[10:25:37.992] - state: ‘created’
[10:25:37.992] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[10:25:38.005] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[10:25:38.006] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[10:25:38.006]   - Field: ‘node’
[10:25:38.006]   - Field: ‘label’
[10:25:38.006]   - Field: ‘local’
[10:25:38.006]   - Field: ‘owner’
[10:25:38.006]   - Field: ‘envir’
[10:25:38.006]   - Field: ‘workers’
[10:25:38.006]   - Field: ‘packages’
[10:25:38.006]   - Field: ‘gc’
[10:25:38.006]   - Field: ‘conditions’
[10:25:38.007]   - Field: ‘persistent’
[10:25:38.007]   - Field: ‘expr’
[10:25:38.007]   - Field: ‘uuid’
[10:25:38.007]   - Field: ‘seed’
[10:25:38.007]   - Field: ‘version’
[10:25:38.007]   - Field: ‘result’
[10:25:38.007]   - Field: ‘asynchronous’
[10:25:38.007]   - Field: ‘calls’
[10:25:38.007]   - Field: ‘globals’
[10:25:38.007]   - Field: ‘stdout’
[10:25:38.007]   - Field: ‘earlySignal’
[10:25:38.007]   - Field: ‘lazy’
[10:25:38.008]   - Field: ‘state’
[10:25:38.008] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[10:25:38.008] - Launch lazy future ...
[10:25:38.008] Packages needed by the future expression (n = 0): <none>
[10:25:38.008] Packages needed by future strategies (n = 0): <none>
[10:25:38.009] {
[10:25:38.009]     {
[10:25:38.009]         {
[10:25:38.009]             ...future.startTime <- base::Sys.time()
[10:25:38.009]             {
[10:25:38.009]                 {
[10:25:38.009]                   {
[10:25:38.009]                     {
[10:25:38.009]                       base::local({
[10:25:38.009]                         has_future <- base::requireNamespace("future", 
[10:25:38.009]                           quietly = TRUE)
[10:25:38.009]                         if (has_future) {
[10:25:38.009]                           ns <- base::getNamespace("future")
[10:25:38.009]                           version <- ns[[".package"]][["version"]]
[10:25:38.009]                           if (is.null(version)) 
[10:25:38.009]                             version <- utils::packageVersion("future")
[10:25:38.009]                         }
[10:25:38.009]                         else {
[10:25:38.009]                           version <- NULL
[10:25:38.009]                         }
[10:25:38.009]                         if (!has_future || version < "1.8.0") {
[10:25:38.009]                           info <- base::c(r_version = base::gsub("R version ", 
[10:25:38.009]                             "", base::R.version$version.string), 
[10:25:38.009]                             platform = base::sprintf("%s (%s-bit)", 
[10:25:38.009]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:25:38.009]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[10:25:38.009]                               "release", "version")], collapse = " "), 
[10:25:38.009]                             hostname = base::Sys.info()[["nodename"]])
[10:25:38.009]                           info <- base::sprintf("%s: %s", base::names(info), 
[10:25:38.009]                             info)
[10:25:38.009]                           info <- base::paste(info, collapse = "; ")
[10:25:38.009]                           if (!has_future) {
[10:25:38.009]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:25:38.009]                               info)
[10:25:38.009]                           }
[10:25:38.009]                           else {
[10:25:38.009]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:25:38.009]                               info, version)
[10:25:38.009]                           }
[10:25:38.009]                           base::stop(msg)
[10:25:38.009]                         }
[10:25:38.009]                       })
[10:25:38.009]                     }
[10:25:38.009]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[10:25:38.009]                     base::options(mc.cores = 1L)
[10:25:38.009]                   }
[10:25:38.009]                   options(future.plan = NULL)
[10:25:38.009]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:25:38.009]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:25:38.009]                 }
[10:25:38.009]                 ...future.workdir <- getwd()
[10:25:38.009]             }
[10:25:38.009]             ...future.oldOptions <- base::as.list(base::.Options)
[10:25:38.009]             ...future.oldEnvVars <- base::Sys.getenv()
[10:25:38.009]         }
[10:25:38.009]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:25:38.009]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[10:25:38.009]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:25:38.009]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:25:38.009]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:25:38.009]             future.stdout.windows.reencode = NULL, width = 80L)
[10:25:38.009]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:25:38.009]             base::names(...future.oldOptions))
[10:25:38.009]     }
[10:25:38.009]     if (FALSE) {
[10:25:38.009]     }
[10:25:38.009]     else {
[10:25:38.009]         if (TRUE) {
[10:25:38.009]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:25:38.009]                 open = "w")
[10:25:38.009]         }
[10:25:38.009]         else {
[10:25:38.009]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:25:38.009]                 windows = "NUL", "/dev/null"), open = "w")
[10:25:38.009]         }
[10:25:38.009]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:25:38.009]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:25:38.009]             base::sink(type = "output", split = FALSE)
[10:25:38.009]             base::close(...future.stdout)
[10:25:38.009]         }, add = TRUE)
[10:25:38.009]     }
[10:25:38.009]     ...future.frame <- base::sys.nframe()
[10:25:38.009]     ...future.conditions <- base::list()
[10:25:38.009]     ...future.rng <- base::globalenv()$.Random.seed
[10:25:38.009]     if (FALSE) {
[10:25:38.009]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:25:38.009]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:25:38.009]     }
[10:25:38.009]     ...future.result <- base::tryCatch({
[10:25:38.009]         base::withCallingHandlers({
[10:25:38.009]             ...future.value <- base::withVisible(base::local({
[10:25:38.009]                 ...future.makeSendCondition <- base::local({
[10:25:38.009]                   sendCondition <- NULL
[10:25:38.009]                   function(frame = 1L) {
[10:25:38.009]                     if (is.function(sendCondition)) 
[10:25:38.009]                       return(sendCondition)
[10:25:38.009]                     ns <- getNamespace("parallel")
[10:25:38.009]                     if (exists("sendData", mode = "function", 
[10:25:38.009]                       envir = ns)) {
[10:25:38.009]                       parallel_sendData <- get("sendData", mode = "function", 
[10:25:38.009]                         envir = ns)
[10:25:38.009]                       envir <- sys.frame(frame)
[10:25:38.009]                       master <- NULL
[10:25:38.009]                       while (!identical(envir, .GlobalEnv) && 
[10:25:38.009]                         !identical(envir, emptyenv())) {
[10:25:38.009]                         if (exists("master", mode = "list", envir = envir, 
[10:25:38.009]                           inherits = FALSE)) {
[10:25:38.009]                           master <- get("master", mode = "list", 
[10:25:38.009]                             envir = envir, inherits = FALSE)
[10:25:38.009]                           if (inherits(master, c("SOCKnode", 
[10:25:38.009]                             "SOCK0node"))) {
[10:25:38.009]                             sendCondition <<- function(cond) {
[10:25:38.009]                               data <- list(type = "VALUE", value = cond, 
[10:25:38.009]                                 success = TRUE)
[10:25:38.009]                               parallel_sendData(master, data)
[10:25:38.009]                             }
[10:25:38.009]                             return(sendCondition)
[10:25:38.009]                           }
[10:25:38.009]                         }
[10:25:38.009]                         frame <- frame + 1L
[10:25:38.009]                         envir <- sys.frame(frame)
[10:25:38.009]                       }
[10:25:38.009]                     }
[10:25:38.009]                     sendCondition <<- function(cond) NULL
[10:25:38.009]                   }
[10:25:38.009]                 })
[10:25:38.009]                 withCallingHandlers({
[10:25:38.009]                   {
[10:25:38.009]                     if (ii%%2 == 0) 
[10:25:38.009]                       stop("Woops!")
[10:25:38.009]                     ii
[10:25:38.009]                   }
[10:25:38.009]                 }, immediateCondition = function(cond) {
[10:25:38.009]                   sendCondition <- ...future.makeSendCondition()
[10:25:38.009]                   sendCondition(cond)
[10:25:38.009]                   muffleCondition <- function (cond, pattern = "^muffle") 
[10:25:38.009]                   {
[10:25:38.009]                     inherits <- base::inherits
[10:25:38.009]                     invokeRestart <- base::invokeRestart
[10:25:38.009]                     is.null <- base::is.null
[10:25:38.009]                     muffled <- FALSE
[10:25:38.009]                     if (inherits(cond, "message")) {
[10:25:38.009]                       muffled <- grepl(pattern, "muffleMessage")
[10:25:38.009]                       if (muffled) 
[10:25:38.009]                         invokeRestart("muffleMessage")
[10:25:38.009]                     }
[10:25:38.009]                     else if (inherits(cond, "warning")) {
[10:25:38.009]                       muffled <- grepl(pattern, "muffleWarning")
[10:25:38.009]                       if (muffled) 
[10:25:38.009]                         invokeRestart("muffleWarning")
[10:25:38.009]                     }
[10:25:38.009]                     else if (inherits(cond, "condition")) {
[10:25:38.009]                       if (!is.null(pattern)) {
[10:25:38.009]                         computeRestarts <- base::computeRestarts
[10:25:38.009]                         grepl <- base::grepl
[10:25:38.009]                         restarts <- computeRestarts(cond)
[10:25:38.009]                         for (restart in restarts) {
[10:25:38.009]                           name <- restart$name
[10:25:38.009]                           if (is.null(name)) 
[10:25:38.009]                             next
[10:25:38.009]                           if (!grepl(pattern, name)) 
[10:25:38.009]                             next
[10:25:38.009]                           invokeRestart(restart)
[10:25:38.009]                           muffled <- TRUE
[10:25:38.009]                           break
[10:25:38.009]                         }
[10:25:38.009]                       }
[10:25:38.009]                     }
[10:25:38.009]                     invisible(muffled)
[10:25:38.009]                   }
[10:25:38.009]                   muffleCondition(cond)
[10:25:38.009]                 })
[10:25:38.009]             }))
[10:25:38.009]             future::FutureResult(value = ...future.value$value, 
[10:25:38.009]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:25:38.009]                   ...future.rng), globalenv = if (FALSE) 
[10:25:38.009]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:25:38.009]                     ...future.globalenv.names))
[10:25:38.009]                 else NULL, started = ...future.startTime, version = "1.8")
[10:25:38.009]         }, condition = base::local({
[10:25:38.009]             c <- base::c
[10:25:38.009]             inherits <- base::inherits
[10:25:38.009]             invokeRestart <- base::invokeRestart
[10:25:38.009]             length <- base::length
[10:25:38.009]             list <- base::list
[10:25:38.009]             seq.int <- base::seq.int
[10:25:38.009]             signalCondition <- base::signalCondition
[10:25:38.009]             sys.calls <- base::sys.calls
[10:25:38.009]             `[[` <- base::`[[`
[10:25:38.009]             `+` <- base::`+`
[10:25:38.009]             `<<-` <- base::`<<-`
[10:25:38.009]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:25:38.009]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:25:38.009]                   3L)]
[10:25:38.009]             }
[10:25:38.009]             function(cond) {
[10:25:38.009]                 is_error <- inherits(cond, "error")
[10:25:38.009]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:25:38.009]                   NULL)
[10:25:38.009]                 if (is_error) {
[10:25:38.009]                   sessionInformation <- function() {
[10:25:38.009]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:25:38.009]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:25:38.009]                       search = base::search(), system = base::Sys.info())
[10:25:38.009]                   }
[10:25:38.009]                   ...future.conditions[[length(...future.conditions) + 
[10:25:38.009]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:25:38.009]                     cond$call), session = sessionInformation(), 
[10:25:38.009]                     timestamp = base::Sys.time(), signaled = 0L)
[10:25:38.009]                   signalCondition(cond)
[10:25:38.009]                 }
[10:25:38.009]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:25:38.009]                 "immediateCondition"))) {
[10:25:38.009]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:25:38.009]                   ...future.conditions[[length(...future.conditions) + 
[10:25:38.009]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:25:38.009]                   if (TRUE && !signal) {
[10:25:38.009]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:25:38.009]                     {
[10:25:38.009]                       inherits <- base::inherits
[10:25:38.009]                       invokeRestart <- base::invokeRestart
[10:25:38.009]                       is.null <- base::is.null
[10:25:38.009]                       muffled <- FALSE
[10:25:38.009]                       if (inherits(cond, "message")) {
[10:25:38.009]                         muffled <- grepl(pattern, "muffleMessage")
[10:25:38.009]                         if (muffled) 
[10:25:38.009]                           invokeRestart("muffleMessage")
[10:25:38.009]                       }
[10:25:38.009]                       else if (inherits(cond, "warning")) {
[10:25:38.009]                         muffled <- grepl(pattern, "muffleWarning")
[10:25:38.009]                         if (muffled) 
[10:25:38.009]                           invokeRestart("muffleWarning")
[10:25:38.009]                       }
[10:25:38.009]                       else if (inherits(cond, "condition")) {
[10:25:38.009]                         if (!is.null(pattern)) {
[10:25:38.009]                           computeRestarts <- base::computeRestarts
[10:25:38.009]                           grepl <- base::grepl
[10:25:38.009]                           restarts <- computeRestarts(cond)
[10:25:38.009]                           for (restart in restarts) {
[10:25:38.009]                             name <- restart$name
[10:25:38.009]                             if (is.null(name)) 
[10:25:38.009]                               next
[10:25:38.009]                             if (!grepl(pattern, name)) 
[10:25:38.009]                               next
[10:25:38.009]                             invokeRestart(restart)
[10:25:38.009]                             muffled <- TRUE
[10:25:38.009]                             break
[10:25:38.009]                           }
[10:25:38.009]                         }
[10:25:38.009]                       }
[10:25:38.009]                       invisible(muffled)
[10:25:38.009]                     }
[10:25:38.009]                     muffleCondition(cond, pattern = "^muffle")
[10:25:38.009]                   }
[10:25:38.009]                 }
[10:25:38.009]                 else {
[10:25:38.009]                   if (TRUE) {
[10:25:38.009]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:25:38.009]                     {
[10:25:38.009]                       inherits <- base::inherits
[10:25:38.009]                       invokeRestart <- base::invokeRestart
[10:25:38.009]                       is.null <- base::is.null
[10:25:38.009]                       muffled <- FALSE
[10:25:38.009]                       if (inherits(cond, "message")) {
[10:25:38.009]                         muffled <- grepl(pattern, "muffleMessage")
[10:25:38.009]                         if (muffled) 
[10:25:38.009]                           invokeRestart("muffleMessage")
[10:25:38.009]                       }
[10:25:38.009]                       else if (inherits(cond, "warning")) {
[10:25:38.009]                         muffled <- grepl(pattern, "muffleWarning")
[10:25:38.009]                         if (muffled) 
[10:25:38.009]                           invokeRestart("muffleWarning")
[10:25:38.009]                       }
[10:25:38.009]                       else if (inherits(cond, "condition")) {
[10:25:38.009]                         if (!is.null(pattern)) {
[10:25:38.009]                           computeRestarts <- base::computeRestarts
[10:25:38.009]                           grepl <- base::grepl
[10:25:38.009]                           restarts <- computeRestarts(cond)
[10:25:38.009]                           for (restart in restarts) {
[10:25:38.009]                             name <- restart$name
[10:25:38.009]                             if (is.null(name)) 
[10:25:38.009]                               next
[10:25:38.009]                             if (!grepl(pattern, name)) 
[10:25:38.009]                               next
[10:25:38.009]                             invokeRestart(restart)
[10:25:38.009]                             muffled <- TRUE
[10:25:38.009]                             break
[10:25:38.009]                           }
[10:25:38.009]                         }
[10:25:38.009]                       }
[10:25:38.009]                       invisible(muffled)
[10:25:38.009]                     }
[10:25:38.009]                     muffleCondition(cond, pattern = "^muffle")
[10:25:38.009]                   }
[10:25:38.009]                 }
[10:25:38.009]             }
[10:25:38.009]         }))
[10:25:38.009]     }, error = function(ex) {
[10:25:38.009]         base::structure(base::list(value = NULL, visible = NULL, 
[10:25:38.009]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:25:38.009]                 ...future.rng), started = ...future.startTime, 
[10:25:38.009]             finished = Sys.time(), session_uuid = NA_character_, 
[10:25:38.009]             version = "1.8"), class = "FutureResult")
[10:25:38.009]     }, finally = {
[10:25:38.009]         if (!identical(...future.workdir, getwd())) 
[10:25:38.009]             setwd(...future.workdir)
[10:25:38.009]         {
[10:25:38.009]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:25:38.009]                 ...future.oldOptions$nwarnings <- NULL
[10:25:38.009]             }
[10:25:38.009]             base::options(...future.oldOptions)
[10:25:38.009]             if (.Platform$OS.type == "windows") {
[10:25:38.009]                 old_names <- names(...future.oldEnvVars)
[10:25:38.009]                 envs <- base::Sys.getenv()
[10:25:38.009]                 names <- names(envs)
[10:25:38.009]                 common <- intersect(names, old_names)
[10:25:38.009]                 added <- setdiff(names, old_names)
[10:25:38.009]                 removed <- setdiff(old_names, names)
[10:25:38.009]                 changed <- common[...future.oldEnvVars[common] != 
[10:25:38.009]                   envs[common]]
[10:25:38.009]                 NAMES <- toupper(changed)
[10:25:38.009]                 args <- list()
[10:25:38.009]                 for (kk in seq_along(NAMES)) {
[10:25:38.009]                   name <- changed[[kk]]
[10:25:38.009]                   NAME <- NAMES[[kk]]
[10:25:38.009]                   if (name != NAME && is.element(NAME, old_names)) 
[10:25:38.009]                     next
[10:25:38.009]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:25:38.009]                 }
[10:25:38.009]                 NAMES <- toupper(added)
[10:25:38.009]                 for (kk in seq_along(NAMES)) {
[10:25:38.009]                   name <- added[[kk]]
[10:25:38.009]                   NAME <- NAMES[[kk]]
[10:25:38.009]                   if (name != NAME && is.element(NAME, old_names)) 
[10:25:38.009]                     next
[10:25:38.009]                   args[[name]] <- ""
[10:25:38.009]                 }
[10:25:38.009]                 NAMES <- toupper(removed)
[10:25:38.009]                 for (kk in seq_along(NAMES)) {
[10:25:38.009]                   name <- removed[[kk]]
[10:25:38.009]                   NAME <- NAMES[[kk]]
[10:25:38.009]                   if (name != NAME && is.element(NAME, old_names)) 
[10:25:38.009]                     next
[10:25:38.009]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:25:38.009]                 }
[10:25:38.009]                 if (length(args) > 0) 
[10:25:38.009]                   base::do.call(base::Sys.setenv, args = args)
[10:25:38.009]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:25:38.009]             }
[10:25:38.009]             else {
[10:25:38.009]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:25:38.009]             }
[10:25:38.009]             {
[10:25:38.009]                 if (base::length(...future.futureOptionsAdded) > 
[10:25:38.009]                   0L) {
[10:25:38.009]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:25:38.009]                   base::names(opts) <- ...future.futureOptionsAdded
[10:25:38.009]                   base::options(opts)
[10:25:38.009]                 }
[10:25:38.009]                 {
[10:25:38.009]                   {
[10:25:38.009]                     base::options(mc.cores = ...future.mc.cores.old)
[10:25:38.009]                     NULL
[10:25:38.009]                   }
[10:25:38.009]                   options(future.plan = NULL)
[10:25:38.009]                   if (is.na(NA_character_)) 
[10:25:38.009]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:25:38.009]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:25:38.009]                   future::plan(list(function (..., workers = availableCores(), 
[10:25:38.009]                     lazy = FALSE, rscript_libs = .libPaths(), 
[10:25:38.009]                     envir = parent.frame()) 
[10:25:38.009]                   {
[10:25:38.009]                     if (is.function(workers)) 
[10:25:38.009]                       workers <- workers()
[10:25:38.009]                     workers <- structure(as.integer(workers), 
[10:25:38.009]                       class = class(workers))
[10:25:38.009]                     stop_if_not(length(workers) == 1, is.finite(workers), 
[10:25:38.009]                       workers >= 1)
[10:25:38.009]                     if (workers == 1L && !inherits(workers, "AsIs")) {
[10:25:38.009]                       return(sequential(..., lazy = TRUE, envir = envir))
[10:25:38.009]                     }
[10:25:38.009]                     future <- MultisessionFuture(..., workers = workers, 
[10:25:38.009]                       lazy = lazy, rscript_libs = rscript_libs, 
[10:25:38.009]                       envir = envir)
[10:25:38.009]                     if (!future$lazy) 
[10:25:38.009]                       future <- run(future)
[10:25:38.009]                     invisible(future)
[10:25:38.009]                   }), .cleanup = FALSE, .init = FALSE)
[10:25:38.009]                 }
[10:25:38.009]             }
[10:25:38.009]         }
[10:25:38.009]     })
[10:25:38.009]     if (TRUE) {
[10:25:38.009]         base::sink(type = "output", split = FALSE)
[10:25:38.009]         if (TRUE) {
[10:25:38.009]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:25:38.009]         }
[10:25:38.009]         else {
[10:25:38.009]             ...future.result["stdout"] <- base::list(NULL)
[10:25:38.009]         }
[10:25:38.009]         base::close(...future.stdout)
[10:25:38.009]         ...future.stdout <- NULL
[10:25:38.009]     }
[10:25:38.009]     ...future.result$conditions <- ...future.conditions
[10:25:38.009]     ...future.result$finished <- base::Sys.time()
[10:25:38.009]     ...future.result
[10:25:38.009] }
[10:25:38.063] Exporting 1 global objects (56 bytes) to cluster node #2 ...
[10:25:38.063] Exporting ‘ii’ (56 bytes) to cluster node #2 ...
[10:25:38.063] Exporting ‘ii’ (56 bytes) to cluster node #2 ... DONE
[10:25:38.064] Exporting 1 global objects (56 bytes) to cluster node #2 ... DONE
[10:25:38.064] MultisessionFuture started
[10:25:38.064] - Launch lazy future ... done
[10:25:38.065] run() for ‘MultisessionFuture’ ... done
[10:25:38.065] getGlobalsAndPackages() ...
[10:25:38.065] Searching for globals...
[10:25:38.067] - globals found: [6] ‘{’, ‘if’, ‘==’, ‘%%’, ‘ii’, ‘stop’
[10:25:38.067] Searching for globals ... DONE
[10:25:38.067] Resolving globals: FALSE
[10:25:38.068] The total size of the 1 globals is 56 bytes (56 bytes)
[10:25:38.068] The total size of the 1 globals exported for future expression (‘{; if (ii%%2 == 0); stop("Woops!"); ii; }’) is 56 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘ii’ (56 bytes of class ‘numeric’)
[10:25:38.068] - globals: [1] ‘ii’
[10:25:38.068] 
[10:25:38.068] getGlobalsAndPackages() ... DONE
[10:25:38.069] run() for ‘Future’ ...
[10:25:38.069] - state: ‘created’
[10:25:38.069] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[10:25:38.085] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[10:25:38.085] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[10:25:38.085]   - Field: ‘node’
[10:25:38.085]   - Field: ‘label’
[10:25:38.085]   - Field: ‘local’
[10:25:38.085]   - Field: ‘owner’
[10:25:38.085]   - Field: ‘envir’
[10:25:38.085]   - Field: ‘workers’
[10:25:38.085]   - Field: ‘packages’
[10:25:38.086]   - Field: ‘gc’
[10:25:38.086]   - Field: ‘conditions’
[10:25:38.086]   - Field: ‘persistent’
[10:25:38.086]   - Field: ‘expr’
[10:25:38.086]   - Field: ‘uuid’
[10:25:38.086]   - Field: ‘seed’
[10:25:38.086]   - Field: ‘version’
[10:25:38.086]   - Field: ‘result’
[10:25:38.086]   - Field: ‘asynchronous’
[10:25:38.086]   - Field: ‘calls’
[10:25:38.086]   - Field: ‘globals’
[10:25:38.087]   - Field: ‘stdout’
[10:25:38.087]   - Field: ‘earlySignal’
[10:25:38.087]   - Field: ‘lazy’
[10:25:38.087]   - Field: ‘state’
[10:25:38.087] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[10:25:38.087] - Launch lazy future ...
[10:25:38.087] Packages needed by the future expression (n = 0): <none>
[10:25:38.087] Packages needed by future strategies (n = 0): <none>
[10:25:38.088] {
[10:25:38.088]     {
[10:25:38.088]         {
[10:25:38.088]             ...future.startTime <- base::Sys.time()
[10:25:38.088]             {
[10:25:38.088]                 {
[10:25:38.088]                   {
[10:25:38.088]                     {
[10:25:38.088]                       base::local({
[10:25:38.088]                         has_future <- base::requireNamespace("future", 
[10:25:38.088]                           quietly = TRUE)
[10:25:38.088]                         if (has_future) {
[10:25:38.088]                           ns <- base::getNamespace("future")
[10:25:38.088]                           version <- ns[[".package"]][["version"]]
[10:25:38.088]                           if (is.null(version)) 
[10:25:38.088]                             version <- utils::packageVersion("future")
[10:25:38.088]                         }
[10:25:38.088]                         else {
[10:25:38.088]                           version <- NULL
[10:25:38.088]                         }
[10:25:38.088]                         if (!has_future || version < "1.8.0") {
[10:25:38.088]                           info <- base::c(r_version = base::gsub("R version ", 
[10:25:38.088]                             "", base::R.version$version.string), 
[10:25:38.088]                             platform = base::sprintf("%s (%s-bit)", 
[10:25:38.088]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:25:38.088]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[10:25:38.088]                               "release", "version")], collapse = " "), 
[10:25:38.088]                             hostname = base::Sys.info()[["nodename"]])
[10:25:38.088]                           info <- base::sprintf("%s: %s", base::names(info), 
[10:25:38.088]                             info)
[10:25:38.088]                           info <- base::paste(info, collapse = "; ")
[10:25:38.088]                           if (!has_future) {
[10:25:38.088]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:25:38.088]                               info)
[10:25:38.088]                           }
[10:25:38.088]                           else {
[10:25:38.088]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:25:38.088]                               info, version)
[10:25:38.088]                           }
[10:25:38.088]                           base::stop(msg)
[10:25:38.088]                         }
[10:25:38.088]                       })
[10:25:38.088]                     }
[10:25:38.088]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[10:25:38.088]                     base::options(mc.cores = 1L)
[10:25:38.088]                   }
[10:25:38.088]                   options(future.plan = NULL)
[10:25:38.088]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:25:38.088]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:25:38.088]                 }
[10:25:38.088]                 ...future.workdir <- getwd()
[10:25:38.088]             }
[10:25:38.088]             ...future.oldOptions <- base::as.list(base::.Options)
[10:25:38.088]             ...future.oldEnvVars <- base::Sys.getenv()
[10:25:38.088]         }
[10:25:38.088]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:25:38.088]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[10:25:38.088]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:25:38.088]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:25:38.088]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:25:38.088]             future.stdout.windows.reencode = NULL, width = 80L)
[10:25:38.088]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:25:38.088]             base::names(...future.oldOptions))
[10:25:38.088]     }
[10:25:38.088]     if (FALSE) {
[10:25:38.088]     }
[10:25:38.088]     else {
[10:25:38.088]         if (TRUE) {
[10:25:38.088]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:25:38.088]                 open = "w")
[10:25:38.088]         }
[10:25:38.088]         else {
[10:25:38.088]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:25:38.088]                 windows = "NUL", "/dev/null"), open = "w")
[10:25:38.088]         }
[10:25:38.088]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:25:38.088]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:25:38.088]             base::sink(type = "output", split = FALSE)
[10:25:38.088]             base::close(...future.stdout)
[10:25:38.088]         }, add = TRUE)
[10:25:38.088]     }
[10:25:38.088]     ...future.frame <- base::sys.nframe()
[10:25:38.088]     ...future.conditions <- base::list()
[10:25:38.088]     ...future.rng <- base::globalenv()$.Random.seed
[10:25:38.088]     if (FALSE) {
[10:25:38.088]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:25:38.088]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:25:38.088]     }
[10:25:38.088]     ...future.result <- base::tryCatch({
[10:25:38.088]         base::withCallingHandlers({
[10:25:38.088]             ...future.value <- base::withVisible(base::local({
[10:25:38.088]                 ...future.makeSendCondition <- base::local({
[10:25:38.088]                   sendCondition <- NULL
[10:25:38.088]                   function(frame = 1L) {
[10:25:38.088]                     if (is.function(sendCondition)) 
[10:25:38.088]                       return(sendCondition)
[10:25:38.088]                     ns <- getNamespace("parallel")
[10:25:38.088]                     if (exists("sendData", mode = "function", 
[10:25:38.088]                       envir = ns)) {
[10:25:38.088]                       parallel_sendData <- get("sendData", mode = "function", 
[10:25:38.088]                         envir = ns)
[10:25:38.088]                       envir <- sys.frame(frame)
[10:25:38.088]                       master <- NULL
[10:25:38.088]                       while (!identical(envir, .GlobalEnv) && 
[10:25:38.088]                         !identical(envir, emptyenv())) {
[10:25:38.088]                         if (exists("master", mode = "list", envir = envir, 
[10:25:38.088]                           inherits = FALSE)) {
[10:25:38.088]                           master <- get("master", mode = "list", 
[10:25:38.088]                             envir = envir, inherits = FALSE)
[10:25:38.088]                           if (inherits(master, c("SOCKnode", 
[10:25:38.088]                             "SOCK0node"))) {
[10:25:38.088]                             sendCondition <<- function(cond) {
[10:25:38.088]                               data <- list(type = "VALUE", value = cond, 
[10:25:38.088]                                 success = TRUE)
[10:25:38.088]                               parallel_sendData(master, data)
[10:25:38.088]                             }
[10:25:38.088]                             return(sendCondition)
[10:25:38.088]                           }
[10:25:38.088]                         }
[10:25:38.088]                         frame <- frame + 1L
[10:25:38.088]                         envir <- sys.frame(frame)
[10:25:38.088]                       }
[10:25:38.088]                     }
[10:25:38.088]                     sendCondition <<- function(cond) NULL
[10:25:38.088]                   }
[10:25:38.088]                 })
[10:25:38.088]                 withCallingHandlers({
[10:25:38.088]                   {
[10:25:38.088]                     if (ii%%2 == 0) 
[10:25:38.088]                       stop("Woops!")
[10:25:38.088]                     ii
[10:25:38.088]                   }
[10:25:38.088]                 }, immediateCondition = function(cond) {
[10:25:38.088]                   sendCondition <- ...future.makeSendCondition()
[10:25:38.088]                   sendCondition(cond)
[10:25:38.088]                   muffleCondition <- function (cond, pattern = "^muffle") 
[10:25:38.088]                   {
[10:25:38.088]                     inherits <- base::inherits
[10:25:38.088]                     invokeRestart <- base::invokeRestart
[10:25:38.088]                     is.null <- base::is.null
[10:25:38.088]                     muffled <- FALSE
[10:25:38.088]                     if (inherits(cond, "message")) {
[10:25:38.088]                       muffled <- grepl(pattern, "muffleMessage")
[10:25:38.088]                       if (muffled) 
[10:25:38.088]                         invokeRestart("muffleMessage")
[10:25:38.088]                     }
[10:25:38.088]                     else if (inherits(cond, "warning")) {
[10:25:38.088]                       muffled <- grepl(pattern, "muffleWarning")
[10:25:38.088]                       if (muffled) 
[10:25:38.088]                         invokeRestart("muffleWarning")
[10:25:38.088]                     }
[10:25:38.088]                     else if (inherits(cond, "condition")) {
[10:25:38.088]                       if (!is.null(pattern)) {
[10:25:38.088]                         computeRestarts <- base::computeRestarts
[10:25:38.088]                         grepl <- base::grepl
[10:25:38.088]                         restarts <- computeRestarts(cond)
[10:25:38.088]                         for (restart in restarts) {
[10:25:38.088]                           name <- restart$name
[10:25:38.088]                           if (is.null(name)) 
[10:25:38.088]                             next
[10:25:38.088]                           if (!grepl(pattern, name)) 
[10:25:38.088]                             next
[10:25:38.088]                           invokeRestart(restart)
[10:25:38.088]                           muffled <- TRUE
[10:25:38.088]                           break
[10:25:38.088]                         }
[10:25:38.088]                       }
[10:25:38.088]                     }
[10:25:38.088]                     invisible(muffled)
[10:25:38.088]                   }
[10:25:38.088]                   muffleCondition(cond)
[10:25:38.088]                 })
[10:25:38.088]             }))
[10:25:38.088]             future::FutureResult(value = ...future.value$value, 
[10:25:38.088]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:25:38.088]                   ...future.rng), globalenv = if (FALSE) 
[10:25:38.088]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:25:38.088]                     ...future.globalenv.names))
[10:25:38.088]                 else NULL, started = ...future.startTime, version = "1.8")
[10:25:38.088]         }, condition = base::local({
[10:25:38.088]             c <- base::c
[10:25:38.088]             inherits <- base::inherits
[10:25:38.088]             invokeRestart <- base::invokeRestart
[10:25:38.088]             length <- base::length
[10:25:38.088]             list <- base::list
[10:25:38.088]             seq.int <- base::seq.int
[10:25:38.088]             signalCondition <- base::signalCondition
[10:25:38.088]             sys.calls <- base::sys.calls
[10:25:38.088]             `[[` <- base::`[[`
[10:25:38.088]             `+` <- base::`+`
[10:25:38.088]             `<<-` <- base::`<<-`
[10:25:38.088]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:25:38.088]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:25:38.088]                   3L)]
[10:25:38.088]             }
[10:25:38.088]             function(cond) {
[10:25:38.088]                 is_error <- inherits(cond, "error")
[10:25:38.088]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:25:38.088]                   NULL)
[10:25:38.088]                 if (is_error) {
[10:25:38.088]                   sessionInformation <- function() {
[10:25:38.088]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:25:38.088]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:25:38.088]                       search = base::search(), system = base::Sys.info())
[10:25:38.088]                   }
[10:25:38.088]                   ...future.conditions[[length(...future.conditions) + 
[10:25:38.088]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:25:38.088]                     cond$call), session = sessionInformation(), 
[10:25:38.088]                     timestamp = base::Sys.time(), signaled = 0L)
[10:25:38.088]                   signalCondition(cond)
[10:25:38.088]                 }
[10:25:38.088]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:25:38.088]                 "immediateCondition"))) {
[10:25:38.088]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:25:38.088]                   ...future.conditions[[length(...future.conditions) + 
[10:25:38.088]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:25:38.088]                   if (TRUE && !signal) {
[10:25:38.088]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:25:38.088]                     {
[10:25:38.088]                       inherits <- base::inherits
[10:25:38.088]                       invokeRestart <- base::invokeRestart
[10:25:38.088]                       is.null <- base::is.null
[10:25:38.088]                       muffled <- FALSE
[10:25:38.088]                       if (inherits(cond, "message")) {
[10:25:38.088]                         muffled <- grepl(pattern, "muffleMessage")
[10:25:38.088]                         if (muffled) 
[10:25:38.088]                           invokeRestart("muffleMessage")
[10:25:38.088]                       }
[10:25:38.088]                       else if (inherits(cond, "warning")) {
[10:25:38.088]                         muffled <- grepl(pattern, "muffleWarning")
[10:25:38.088]                         if (muffled) 
[10:25:38.088]                           invokeRestart("muffleWarning")
[10:25:38.088]                       }
[10:25:38.088]                       else if (inherits(cond, "condition")) {
[10:25:38.088]                         if (!is.null(pattern)) {
[10:25:38.088]                           computeRestarts <- base::computeRestarts
[10:25:38.088]                           grepl <- base::grepl
[10:25:38.088]                           restarts <- computeRestarts(cond)
[10:25:38.088]                           for (restart in restarts) {
[10:25:38.088]                             name <- restart$name
[10:25:38.088]                             if (is.null(name)) 
[10:25:38.088]                               next
[10:25:38.088]                             if (!grepl(pattern, name)) 
[10:25:38.088]                               next
[10:25:38.088]                             invokeRestart(restart)
[10:25:38.088]                             muffled <- TRUE
[10:25:38.088]                             break
[10:25:38.088]                           }
[10:25:38.088]                         }
[10:25:38.088]                       }
[10:25:38.088]                       invisible(muffled)
[10:25:38.088]                     }
[10:25:38.088]                     muffleCondition(cond, pattern = "^muffle")
[10:25:38.088]                   }
[10:25:38.088]                 }
[10:25:38.088]                 else {
[10:25:38.088]                   if (TRUE) {
[10:25:38.088]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:25:38.088]                     {
[10:25:38.088]                       inherits <- base::inherits
[10:25:38.088]                       invokeRestart <- base::invokeRestart
[10:25:38.088]                       is.null <- base::is.null
[10:25:38.088]                       muffled <- FALSE
[10:25:38.088]                       if (inherits(cond, "message")) {
[10:25:38.088]                         muffled <- grepl(pattern, "muffleMessage")
[10:25:38.088]                         if (muffled) 
[10:25:38.088]                           invokeRestart("muffleMessage")
[10:25:38.088]                       }
[10:25:38.088]                       else if (inherits(cond, "warning")) {
[10:25:38.088]                         muffled <- grepl(pattern, "muffleWarning")
[10:25:38.088]                         if (muffled) 
[10:25:38.088]                           invokeRestart("muffleWarning")
[10:25:38.088]                       }
[10:25:38.088]                       else if (inherits(cond, "condition")) {
[10:25:38.088]                         if (!is.null(pattern)) {
[10:25:38.088]                           computeRestarts <- base::computeRestarts
[10:25:38.088]                           grepl <- base::grepl
[10:25:38.088]                           restarts <- computeRestarts(cond)
[10:25:38.088]                           for (restart in restarts) {
[10:25:38.088]                             name <- restart$name
[10:25:38.088]                             if (is.null(name)) 
[10:25:38.088]                               next
[10:25:38.088]                             if (!grepl(pattern, name)) 
[10:25:38.088]                               next
[10:25:38.088]                             invokeRestart(restart)
[10:25:38.088]                             muffled <- TRUE
[10:25:38.088]                             break
[10:25:38.088]                           }
[10:25:38.088]                         }
[10:25:38.088]                       }
[10:25:38.088]                       invisible(muffled)
[10:25:38.088]                     }
[10:25:38.088]                     muffleCondition(cond, pattern = "^muffle")
[10:25:38.088]                   }
[10:25:38.088]                 }
[10:25:38.088]             }
[10:25:38.088]         }))
[10:25:38.088]     }, error = function(ex) {
[10:25:38.088]         base::structure(base::list(value = NULL, visible = NULL, 
[10:25:38.088]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:25:38.088]                 ...future.rng), started = ...future.startTime, 
[10:25:38.088]             finished = Sys.time(), session_uuid = NA_character_, 
[10:25:38.088]             version = "1.8"), class = "FutureResult")
[10:25:38.088]     }, finally = {
[10:25:38.088]         if (!identical(...future.workdir, getwd())) 
[10:25:38.088]             setwd(...future.workdir)
[10:25:38.088]         {
[10:25:38.088]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:25:38.088]                 ...future.oldOptions$nwarnings <- NULL
[10:25:38.088]             }
[10:25:38.088]             base::options(...future.oldOptions)
[10:25:38.088]             if (.Platform$OS.type == "windows") {
[10:25:38.088]                 old_names <- names(...future.oldEnvVars)
[10:25:38.088]                 envs <- base::Sys.getenv()
[10:25:38.088]                 names <- names(envs)
[10:25:38.088]                 common <- intersect(names, old_names)
[10:25:38.088]                 added <- setdiff(names, old_names)
[10:25:38.088]                 removed <- setdiff(old_names, names)
[10:25:38.088]                 changed <- common[...future.oldEnvVars[common] != 
[10:25:38.088]                   envs[common]]
[10:25:38.088]                 NAMES <- toupper(changed)
[10:25:38.088]                 args <- list()
[10:25:38.088]                 for (kk in seq_along(NAMES)) {
[10:25:38.088]                   name <- changed[[kk]]
[10:25:38.088]                   NAME <- NAMES[[kk]]
[10:25:38.088]                   if (name != NAME && is.element(NAME, old_names)) 
[10:25:38.088]                     next
[10:25:38.088]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:25:38.088]                 }
[10:25:38.088]                 NAMES <- toupper(added)
[10:25:38.088]                 for (kk in seq_along(NAMES)) {
[10:25:38.088]                   name <- added[[kk]]
[10:25:38.088]                   NAME <- NAMES[[kk]]
[10:25:38.088]                   if (name != NAME && is.element(NAME, old_names)) 
[10:25:38.088]                     next
[10:25:38.088]                   args[[name]] <- ""
[10:25:38.088]                 }
[10:25:38.088]                 NAMES <- toupper(removed)
[10:25:38.088]                 for (kk in seq_along(NAMES)) {
[10:25:38.088]                   name <- removed[[kk]]
[10:25:38.088]                   NAME <- NAMES[[kk]]
[10:25:38.088]                   if (name != NAME && is.element(NAME, old_names)) 
[10:25:38.088]                     next
[10:25:38.088]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:25:38.088]                 }
[10:25:38.088]                 if (length(args) > 0) 
[10:25:38.088]                   base::do.call(base::Sys.setenv, args = args)
[10:25:38.088]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:25:38.088]             }
[10:25:38.088]             else {
[10:25:38.088]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:25:38.088]             }
[10:25:38.088]             {
[10:25:38.088]                 if (base::length(...future.futureOptionsAdded) > 
[10:25:38.088]                   0L) {
[10:25:38.088]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:25:38.088]                   base::names(opts) <- ...future.futureOptionsAdded
[10:25:38.088]                   base::options(opts)
[10:25:38.088]                 }
[10:25:38.088]                 {
[10:25:38.088]                   {
[10:25:38.088]                     base::options(mc.cores = ...future.mc.cores.old)
[10:25:38.088]                     NULL
[10:25:38.088]                   }
[10:25:38.088]                   options(future.plan = NULL)
[10:25:38.088]                   if (is.na(NA_character_)) 
[10:25:38.088]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:25:38.088]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:25:38.088]                   future::plan(list(function (..., workers = availableCores(), 
[10:25:38.088]                     lazy = FALSE, rscript_libs = .libPaths(), 
[10:25:38.088]                     envir = parent.frame()) 
[10:25:38.088]                   {
[10:25:38.088]                     if (is.function(workers)) 
[10:25:38.088]                       workers <- workers()
[10:25:38.088]                     workers <- structure(as.integer(workers), 
[10:25:38.088]                       class = class(workers))
[10:25:38.088]                     stop_if_not(length(workers) == 1, is.finite(workers), 
[10:25:38.088]                       workers >= 1)
[10:25:38.088]                     if (workers == 1L && !inherits(workers, "AsIs")) {
[10:25:38.088]                       return(sequential(..., lazy = TRUE, envir = envir))
[10:25:38.088]                     }
[10:25:38.088]                     future <- MultisessionFuture(..., workers = workers, 
[10:25:38.088]                       lazy = lazy, rscript_libs = rscript_libs, 
[10:25:38.088]                       envir = envir)
[10:25:38.088]                     if (!future$lazy) 
[10:25:38.088]                       future <- run(future)
[10:25:38.088]                     invisible(future)
[10:25:38.088]                   }), .cleanup = FALSE, .init = FALSE)
[10:25:38.088]                 }
[10:25:38.088]             }
[10:25:38.088]         }
[10:25:38.088]     })
[10:25:38.088]     if (TRUE) {
[10:25:38.088]         base::sink(type = "output", split = FALSE)
[10:25:38.088]         if (TRUE) {
[10:25:38.088]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:25:38.088]         }
[10:25:38.088]         else {
[10:25:38.088]             ...future.result["stdout"] <- base::list(NULL)
[10:25:38.088]         }
[10:25:38.088]         base::close(...future.stdout)
[10:25:38.088]         ...future.stdout <- NULL
[10:25:38.088]     }
[10:25:38.088]     ...future.result$conditions <- ...future.conditions
[10:25:38.088]     ...future.result$finished <- base::Sys.time()
[10:25:38.088]     ...future.result
[10:25:38.088] }
[10:25:38.090] Poll #1 (0): usedNodes() = 2, workers = 2
[10:25:38.110] receiveMessageFromWorker() for ClusterFuture ...
[10:25:38.110] - Validating connection of MultisessionFuture
[10:25:38.110] - received message: FutureResult
[10:25:38.110] - Received FutureResult
[10:25:38.110] - Erased future from FutureRegistry
[10:25:38.110] result() for ClusterFuture ...
[10:25:38.110] - result already collected: FutureResult
[10:25:38.110] result() for ClusterFuture ... done
[10:25:38.111] receiveMessageFromWorker() for ClusterFuture ... done
[10:25:38.111] result() for ClusterFuture ...
[10:25:38.111] - result already collected: FutureResult
[10:25:38.111] result() for ClusterFuture ... done
[10:25:38.111] result() for ClusterFuture ...
[10:25:38.111] - result already collected: FutureResult
[10:25:38.111] result() for ClusterFuture ... done
[10:25:38.112] Exporting 1 global objects (56 bytes) to cluster node #1 ...
[10:25:38.112] Exporting ‘ii’ (56 bytes) to cluster node #1 ...
[10:25:38.112] Exporting ‘ii’ (56 bytes) to cluster node #1 ... DONE
[10:25:38.113] Exporting 1 global objects (56 bytes) to cluster node #1 ... DONE
[10:25:38.113] MultisessionFuture started
[10:25:38.113] - Launch lazy future ... done
[10:25:38.113] run() for ‘MultisessionFuture’ ... done
[10:25:38.114] result() for ClusterFuture ...
[10:25:38.114] - result already collected: FutureResult
[10:25:38.114] result() for ClusterFuture ... done
[10:25:38.114] result() for ClusterFuture ...
[10:25:38.114] - result already collected: FutureResult
[10:25:38.114] result() for ClusterFuture ... done
[10:25:38.114] result() for ClusterFuture ...
[10:25:38.114] receiveMessageFromWorker() for ClusterFuture ...
[10:25:38.115] - Validating connection of MultisessionFuture
[10:25:38.152] - received message: FutureResult
[10:25:38.152] - Received FutureResult
[10:25:38.153] - Erased future from FutureRegistry
[10:25:38.153] result() for ClusterFuture ...
[10:25:38.153] - result already collected: FutureResult
[10:25:38.153] result() for ClusterFuture ... done
[10:25:38.153] signalConditions() ...
[10:25:38.153]  - include = ‘immediateCondition’
[10:25:38.153]  - exclude = 
[10:25:38.153]  - resignal = FALSE
[10:25:38.153]  - Number of conditions: 1
[10:25:38.153] signalConditions() ... done
[10:25:38.154] receiveMessageFromWorker() for ClusterFuture ... done
[10:25:38.154] result() for ClusterFuture ... done
[10:25:38.154] result() for ClusterFuture ...
[10:25:38.154] - result already collected: FutureResult
[10:25:38.154] result() for ClusterFuture ... done
[10:25:38.154] signalConditions() ...
[10:25:38.154]  - include = ‘immediateCondition’
[10:25:38.154]  - exclude = 
[10:25:38.154]  - resignal = FALSE
[10:25:38.154]  - Number of conditions: 1
[10:25:38.155] signalConditions() ... done
[10:25:38.155] Future state: ‘finished’
[10:25:38.155] result() for ClusterFuture ...
[10:25:38.155] - result already collected: FutureResult
[10:25:38.155] result() for ClusterFuture ... done
[10:25:38.155] signalConditions() ...
[10:25:38.155]  - include = ‘condition’
[10:25:38.155]  - exclude = ‘immediateCondition’
[10:25:38.155]  - resignal = TRUE
[10:25:38.155]  - Number of conditions: 1
[10:25:38.156]  - Condition #1: ‘simpleError’, ‘error’, ‘condition’
[10:25:38.156] signalConditions() ... done
[10:25:38.156] result() for ClusterFuture ...
[10:25:38.156] receiveMessageFromWorker() for ClusterFuture ...
[10:25:38.156] - Validating connection of MultisessionFuture
[10:25:38.162] - received message: FutureResult
[10:25:38.162] - Received FutureResult
[10:25:38.162] - Erased future from FutureRegistry
[10:25:38.162] result() for ClusterFuture ...
[10:25:38.163] - result already collected: FutureResult
[10:25:38.163] result() for ClusterFuture ... done
[10:25:38.163] receiveMessageFromWorker() for ClusterFuture ... done
[10:25:38.163] result() for ClusterFuture ... done
[10:25:38.163] result() for ClusterFuture ...
[10:25:38.163] - result already collected: FutureResult
[10:25:38.163] result() for ClusterFuture ... done
Warning in get(var, envir = x, inherits = FALSE) :
  restarting interrupted promise evaluation
[10:25:38.163] result() for ClusterFuture ...
[10:25:38.164] - result already collected: FutureResult
[10:25:38.164] result() for ClusterFuture ... done
[10:25:38.164] result() for ClusterFuture ...
[10:25:38.164] - result already collected: FutureResult
[10:25:38.164] result() for ClusterFuture ... done
[10:25:38.164] signalConditions() ...
[10:25:38.164]  - include = ‘immediateCondition’
[10:25:38.164]  - exclude = 
[10:25:38.164]  - resignal = FALSE
[10:25:38.164]  - Number of conditions: 1
[10:25:38.164] signalConditions() ... done
[10:25:38.165] Future state: ‘finished’
[10:25:38.165] result() for ClusterFuture ...
[10:25:38.165] - result already collected: FutureResult
[10:25:38.165] result() for ClusterFuture ... done
[10:25:38.165] signalConditions() ...
[10:25:38.165]  - include = ‘condition’
[10:25:38.165]  - exclude = ‘immediateCondition’
[10:25:38.165]  - resignal = TRUE
[10:25:38.165]  - Number of conditions: 1
[10:25:38.165]  - Condition #1: ‘simpleError’, ‘error’, ‘condition’
[10:25:38.166] signalConditions() ... done
Warning in get(var, envir = x, inherits = FALSE) :
  restarting interrupted promise evaluation
[10:25:38.166] result() for ClusterFuture ...
[10:25:38.166] - result already collected: FutureResult
[10:25:38.166] result() for ClusterFuture ... done
[10:25:38.166] result() for ClusterFuture ...
[10:25:38.166] - result already collected: FutureResult
[10:25:38.166] result() for ClusterFuture ... done
[10:25:38.167] signalConditions() ...
[10:25:38.167]  - include = ‘immediateCondition’
[10:25:38.167]  - exclude = 
[10:25:38.167]  - resignal = FALSE
[10:25:38.167]  - Number of conditions: 1
[10:25:38.167] signalConditions() ... done
[10:25:38.167] Future state: ‘finished’
[10:25:38.167] result() for ClusterFuture ...
[10:25:38.167] - result already collected: FutureResult
[10:25:38.167] result() for ClusterFuture ... done
[10:25:38.167] signalConditions() ...
[10:25:38.168]  - include = ‘condition’
[10:25:38.168]  - exclude = ‘immediateCondition’
[10:25:38.168]  - resignal = TRUE
[10:25:38.168]  - Number of conditions: 1
[10:25:38.168]  - Condition #1: ‘simpleError’, ‘error’, ‘condition’
[10:25:38.168] signalConditions() ... done
** Future evaluation with a poor-man's "progress bar"
[10:25:38.168] getGlobalsAndPackages() ...
[10:25:38.168] Searching for globals...
[10:25:38.170] - globals found: [4] ‘{’, ‘cat’, ‘for’, ‘:’
[10:25:38.171] Searching for globals ... DONE
[10:25:38.171] Resolving globals: FALSE
[10:25:38.171] 
[10:25:38.171] 
[10:25:38.171] getGlobalsAndPackages() ... DONE
[10:25:38.171] run() for ‘Future’ ...
[10:25:38.172] - state: ‘created’
[10:25:38.172] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[10:25:38.185] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[10:25:38.186] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[10:25:38.186]   - Field: ‘node’
[10:25:38.186]   - Field: ‘label’
[10:25:38.186]   - Field: ‘local’
[10:25:38.186]   - Field: ‘owner’
[10:25:38.186]   - Field: ‘envir’
[10:25:38.186]   - Field: ‘workers’
[10:25:38.186]   - Field: ‘packages’
[10:25:38.186]   - Field: ‘gc’
[10:25:38.187]   - Field: ‘conditions’
[10:25:38.187]   - Field: ‘persistent’
[10:25:38.187]   - Field: ‘expr’
[10:25:38.187]   - Field: ‘uuid’
[10:25:38.187]   - Field: ‘seed’
[10:25:38.187]   - Field: ‘version’
[10:25:38.187]   - Field: ‘result’
[10:25:38.187]   - Field: ‘asynchronous’
[10:25:38.187]   - Field: ‘calls’
[10:25:38.187]   - Field: ‘globals’
[10:25:38.187]   - Field: ‘stdout’
[10:25:38.188]   - Field: ‘earlySignal’
[10:25:38.188]   - Field: ‘lazy’
[10:25:38.188]   - Field: ‘state’
[10:25:38.188] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[10:25:38.188] - Launch lazy future ...
[10:25:38.188] Packages needed by the future expression (n = 0): <none>
[10:25:38.188] Packages needed by future strategies (n = 0): <none>
[10:25:38.189] {
[10:25:38.189]     {
[10:25:38.189]         {
[10:25:38.189]             ...future.startTime <- base::Sys.time()
[10:25:38.189]             {
[10:25:38.189]                 {
[10:25:38.189]                   {
[10:25:38.189]                     {
[10:25:38.189]                       base::local({
[10:25:38.189]                         has_future <- base::requireNamespace("future", 
[10:25:38.189]                           quietly = TRUE)
[10:25:38.189]                         if (has_future) {
[10:25:38.189]                           ns <- base::getNamespace("future")
[10:25:38.189]                           version <- ns[[".package"]][["version"]]
[10:25:38.189]                           if (is.null(version)) 
[10:25:38.189]                             version <- utils::packageVersion("future")
[10:25:38.189]                         }
[10:25:38.189]                         else {
[10:25:38.189]                           version <- NULL
[10:25:38.189]                         }
[10:25:38.189]                         if (!has_future || version < "1.8.0") {
[10:25:38.189]                           info <- base::c(r_version = base::gsub("R version ", 
[10:25:38.189]                             "", base::R.version$version.string), 
[10:25:38.189]                             platform = base::sprintf("%s (%s-bit)", 
[10:25:38.189]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:25:38.189]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[10:25:38.189]                               "release", "version")], collapse = " "), 
[10:25:38.189]                             hostname = base::Sys.info()[["nodename"]])
[10:25:38.189]                           info <- base::sprintf("%s: %s", base::names(info), 
[10:25:38.189]                             info)
[10:25:38.189]                           info <- base::paste(info, collapse = "; ")
[10:25:38.189]                           if (!has_future) {
[10:25:38.189]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:25:38.189]                               info)
[10:25:38.189]                           }
[10:25:38.189]                           else {
[10:25:38.189]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:25:38.189]                               info, version)
[10:25:38.189]                           }
[10:25:38.189]                           base::stop(msg)
[10:25:38.189]                         }
[10:25:38.189]                       })
[10:25:38.189]                     }
[10:25:38.189]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[10:25:38.189]                     base::options(mc.cores = 1L)
[10:25:38.189]                   }
[10:25:38.189]                   options(future.plan = NULL)
[10:25:38.189]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:25:38.189]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:25:38.189]                 }
[10:25:38.189]                 ...future.workdir <- getwd()
[10:25:38.189]             }
[10:25:38.189]             ...future.oldOptions <- base::as.list(base::.Options)
[10:25:38.189]             ...future.oldEnvVars <- base::Sys.getenv()
[10:25:38.189]         }
[10:25:38.189]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:25:38.189]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[10:25:38.189]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:25:38.189]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:25:38.189]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:25:38.189]             future.stdout.windows.reencode = NULL, width = 80L)
[10:25:38.189]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:25:38.189]             base::names(...future.oldOptions))
[10:25:38.189]     }
[10:25:38.189]     if (FALSE) {
[10:25:38.189]     }
[10:25:38.189]     else {
[10:25:38.189]         if (TRUE) {
[10:25:38.189]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:25:38.189]                 open = "w")
[10:25:38.189]         }
[10:25:38.189]         else {
[10:25:38.189]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:25:38.189]                 windows = "NUL", "/dev/null"), open = "w")
[10:25:38.189]         }
[10:25:38.189]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:25:38.189]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:25:38.189]             base::sink(type = "output", split = FALSE)
[10:25:38.189]             base::close(...future.stdout)
[10:25:38.189]         }, add = TRUE)
[10:25:38.189]     }
[10:25:38.189]     ...future.frame <- base::sys.nframe()
[10:25:38.189]     ...future.conditions <- base::list()
[10:25:38.189]     ...future.rng <- base::globalenv()$.Random.seed
[10:25:38.189]     if (FALSE) {
[10:25:38.189]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:25:38.189]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:25:38.189]     }
[10:25:38.189]     ...future.result <- base::tryCatch({
[10:25:38.189]         base::withCallingHandlers({
[10:25:38.189]             ...future.value <- base::withVisible(base::local({
[10:25:38.189]                 ...future.makeSendCondition <- base::local({
[10:25:38.189]                   sendCondition <- NULL
[10:25:38.189]                   function(frame = 1L) {
[10:25:38.189]                     if (is.function(sendCondition)) 
[10:25:38.189]                       return(sendCondition)
[10:25:38.189]                     ns <- getNamespace("parallel")
[10:25:38.189]                     if (exists("sendData", mode = "function", 
[10:25:38.189]                       envir = ns)) {
[10:25:38.189]                       parallel_sendData <- get("sendData", mode = "function", 
[10:25:38.189]                         envir = ns)
[10:25:38.189]                       envir <- sys.frame(frame)
[10:25:38.189]                       master <- NULL
[10:25:38.189]                       while (!identical(envir, .GlobalEnv) && 
[10:25:38.189]                         !identical(envir, emptyenv())) {
[10:25:38.189]                         if (exists("master", mode = "list", envir = envir, 
[10:25:38.189]                           inherits = FALSE)) {
[10:25:38.189]                           master <- get("master", mode = "list", 
[10:25:38.189]                             envir = envir, inherits = FALSE)
[10:25:38.189]                           if (inherits(master, c("SOCKnode", 
[10:25:38.189]                             "SOCK0node"))) {
[10:25:38.189]                             sendCondition <<- function(cond) {
[10:25:38.189]                               data <- list(type = "VALUE", value = cond, 
[10:25:38.189]                                 success = TRUE)
[10:25:38.189]                               parallel_sendData(master, data)
[10:25:38.189]                             }
[10:25:38.189]                             return(sendCondition)
[10:25:38.189]                           }
[10:25:38.189]                         }
[10:25:38.189]                         frame <- frame + 1L
[10:25:38.189]                         envir <- sys.frame(frame)
[10:25:38.189]                       }
[10:25:38.189]                     }
[10:25:38.189]                     sendCondition <<- function(cond) NULL
[10:25:38.189]                   }
[10:25:38.189]                 })
[10:25:38.189]                 withCallingHandlers({
[10:25:38.189]                   {
[10:25:38.189]                     cat("Processing: ")
[10:25:38.189]                     for (ii in 1:10) {
[10:25:38.189]                       cat(".")
[10:25:38.189]                     }
[10:25:38.189]                     cat(" [100%]\n")
[10:25:38.189]                     4
[10:25:38.189]                   }
[10:25:38.189]                 }, immediateCondition = function(cond) {
[10:25:38.189]                   sendCondition <- ...future.makeSendCondition()
[10:25:38.189]                   sendCondition(cond)
[10:25:38.189]                   muffleCondition <- function (cond, pattern = "^muffle") 
[10:25:38.189]                   {
[10:25:38.189]                     inherits <- base::inherits
[10:25:38.189]                     invokeRestart <- base::invokeRestart
[10:25:38.189]                     is.null <- base::is.null
[10:25:38.189]                     muffled <- FALSE
[10:25:38.189]                     if (inherits(cond, "message")) {
[10:25:38.189]                       muffled <- grepl(pattern, "muffleMessage")
[10:25:38.189]                       if (muffled) 
[10:25:38.189]                         invokeRestart("muffleMessage")
[10:25:38.189]                     }
[10:25:38.189]                     else if (inherits(cond, "warning")) {
[10:25:38.189]                       muffled <- grepl(pattern, "muffleWarning")
[10:25:38.189]                       if (muffled) 
[10:25:38.189]                         invokeRestart("muffleWarning")
[10:25:38.189]                     }
[10:25:38.189]                     else if (inherits(cond, "condition")) {
[10:25:38.189]                       if (!is.null(pattern)) {
[10:25:38.189]                         computeRestarts <- base::computeRestarts
[10:25:38.189]                         grepl <- base::grepl
[10:25:38.189]                         restarts <- computeRestarts(cond)
[10:25:38.189]                         for (restart in restarts) {
[10:25:38.189]                           name <- restart$name
[10:25:38.189]                           if (is.null(name)) 
[10:25:38.189]                             next
[10:25:38.189]                           if (!grepl(pattern, name)) 
[10:25:38.189]                             next
[10:25:38.189]                           invokeRestart(restart)
[10:25:38.189]                           muffled <- TRUE
[10:25:38.189]                           break
[10:25:38.189]                         }
[10:25:38.189]                       }
[10:25:38.189]                     }
[10:25:38.189]                     invisible(muffled)
[10:25:38.189]                   }
[10:25:38.189]                   muffleCondition(cond)
[10:25:38.189]                 })
[10:25:38.189]             }))
[10:25:38.189]             future::FutureResult(value = ...future.value$value, 
[10:25:38.189]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:25:38.189]                   ...future.rng), globalenv = if (FALSE) 
[10:25:38.189]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:25:38.189]                     ...future.globalenv.names))
[10:25:38.189]                 else NULL, started = ...future.startTime, version = "1.8")
[10:25:38.189]         }, condition = base::local({
[10:25:38.189]             c <- base::c
[10:25:38.189]             inherits <- base::inherits
[10:25:38.189]             invokeRestart <- base::invokeRestart
[10:25:38.189]             length <- base::length
[10:25:38.189]             list <- base::list
[10:25:38.189]             seq.int <- base::seq.int
[10:25:38.189]             signalCondition <- base::signalCondition
[10:25:38.189]             sys.calls <- base::sys.calls
[10:25:38.189]             `[[` <- base::`[[`
[10:25:38.189]             `+` <- base::`+`
[10:25:38.189]             `<<-` <- base::`<<-`
[10:25:38.189]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:25:38.189]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:25:38.189]                   3L)]
[10:25:38.189]             }
[10:25:38.189]             function(cond) {
[10:25:38.189]                 is_error <- inherits(cond, "error")
[10:25:38.189]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:25:38.189]                   NULL)
[10:25:38.189]                 if (is_error) {
[10:25:38.189]                   sessionInformation <- function() {
[10:25:38.189]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:25:38.189]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:25:38.189]                       search = base::search(), system = base::Sys.info())
[10:25:38.189]                   }
[10:25:38.189]                   ...future.conditions[[length(...future.conditions) + 
[10:25:38.189]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:25:38.189]                     cond$call), session = sessionInformation(), 
[10:25:38.189]                     timestamp = base::Sys.time(), signaled = 0L)
[10:25:38.189]                   signalCondition(cond)
[10:25:38.189]                 }
[10:25:38.189]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:25:38.189]                 "immediateCondition"))) {
[10:25:38.189]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:25:38.189]                   ...future.conditions[[length(...future.conditions) + 
[10:25:38.189]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:25:38.189]                   if (TRUE && !signal) {
[10:25:38.189]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:25:38.189]                     {
[10:25:38.189]                       inherits <- base::inherits
[10:25:38.189]                       invokeRestart <- base::invokeRestart
[10:25:38.189]                       is.null <- base::is.null
[10:25:38.189]                       muffled <- FALSE
[10:25:38.189]                       if (inherits(cond, "message")) {
[10:25:38.189]                         muffled <- grepl(pattern, "muffleMessage")
[10:25:38.189]                         if (muffled) 
[10:25:38.189]                           invokeRestart("muffleMessage")
[10:25:38.189]                       }
[10:25:38.189]                       else if (inherits(cond, "warning")) {
[10:25:38.189]                         muffled <- grepl(pattern, "muffleWarning")
[10:25:38.189]                         if (muffled) 
[10:25:38.189]                           invokeRestart("muffleWarning")
[10:25:38.189]                       }
[10:25:38.189]                       else if (inherits(cond, "condition")) {
[10:25:38.189]                         if (!is.null(pattern)) {
[10:25:38.189]                           computeRestarts <- base::computeRestarts
[10:25:38.189]                           grepl <- base::grepl
[10:25:38.189]                           restarts <- computeRestarts(cond)
[10:25:38.189]                           for (restart in restarts) {
[10:25:38.189]                             name <- restart$name
[10:25:38.189]                             if (is.null(name)) 
[10:25:38.189]                               next
[10:25:38.189]                             if (!grepl(pattern, name)) 
[10:25:38.189]                               next
[10:25:38.189]                             invokeRestart(restart)
[10:25:38.189]                             muffled <- TRUE
[10:25:38.189]                             break
[10:25:38.189]                           }
[10:25:38.189]                         }
[10:25:38.189]                       }
[10:25:38.189]                       invisible(muffled)
[10:25:38.189]                     }
[10:25:38.189]                     muffleCondition(cond, pattern = "^muffle")
[10:25:38.189]                   }
[10:25:38.189]                 }
[10:25:38.189]                 else {
[10:25:38.189]                   if (TRUE) {
[10:25:38.189]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:25:38.189]                     {
[10:25:38.189]                       inherits <- base::inherits
[10:25:38.189]                       invokeRestart <- base::invokeRestart
[10:25:38.189]                       is.null <- base::is.null
[10:25:38.189]                       muffled <- FALSE
[10:25:38.189]                       if (inherits(cond, "message")) {
[10:25:38.189]                         muffled <- grepl(pattern, "muffleMessage")
[10:25:38.189]                         if (muffled) 
[10:25:38.189]                           invokeRestart("muffleMessage")
[10:25:38.189]                       }
[10:25:38.189]                       else if (inherits(cond, "warning")) {
[10:25:38.189]                         muffled <- grepl(pattern, "muffleWarning")
[10:25:38.189]                         if (muffled) 
[10:25:38.189]                           invokeRestart("muffleWarning")
[10:25:38.189]                       }
[10:25:38.189]                       else if (inherits(cond, "condition")) {
[10:25:38.189]                         if (!is.null(pattern)) {
[10:25:38.189]                           computeRestarts <- base::computeRestarts
[10:25:38.189]                           grepl <- base::grepl
[10:25:38.189]                           restarts <- computeRestarts(cond)
[10:25:38.189]                           for (restart in restarts) {
[10:25:38.189]                             name <- restart$name
[10:25:38.189]                             if (is.null(name)) 
[10:25:38.189]                               next
[10:25:38.189]                             if (!grepl(pattern, name)) 
[10:25:38.189]                               next
[10:25:38.189]                             invokeRestart(restart)
[10:25:38.189]                             muffled <- TRUE
[10:25:38.189]                             break
[10:25:38.189]                           }
[10:25:38.189]                         }
[10:25:38.189]                       }
[10:25:38.189]                       invisible(muffled)
[10:25:38.189]                     }
[10:25:38.189]                     muffleCondition(cond, pattern = "^muffle")
[10:25:38.189]                   }
[10:25:38.189]                 }
[10:25:38.189]             }
[10:25:38.189]         }))
[10:25:38.189]     }, error = function(ex) {
[10:25:38.189]         base::structure(base::list(value = NULL, visible = NULL, 
[10:25:38.189]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:25:38.189]                 ...future.rng), started = ...future.startTime, 
[10:25:38.189]             finished = Sys.time(), session_uuid = NA_character_, 
[10:25:38.189]             version = "1.8"), class = "FutureResult")
[10:25:38.189]     }, finally = {
[10:25:38.189]         if (!identical(...future.workdir, getwd())) 
[10:25:38.189]             setwd(...future.workdir)
[10:25:38.189]         {
[10:25:38.189]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:25:38.189]                 ...future.oldOptions$nwarnings <- NULL
[10:25:38.189]             }
[10:25:38.189]             base::options(...future.oldOptions)
[10:25:38.189]             if (.Platform$OS.type == "windows") {
[10:25:38.189]                 old_names <- names(...future.oldEnvVars)
[10:25:38.189]                 envs <- base::Sys.getenv()
[10:25:38.189]                 names <- names(envs)
[10:25:38.189]                 common <- intersect(names, old_names)
[10:25:38.189]                 added <- setdiff(names, old_names)
[10:25:38.189]                 removed <- setdiff(old_names, names)
[10:25:38.189]                 changed <- common[...future.oldEnvVars[common] != 
[10:25:38.189]                   envs[common]]
[10:25:38.189]                 NAMES <- toupper(changed)
[10:25:38.189]                 args <- list()
[10:25:38.189]                 for (kk in seq_along(NAMES)) {
[10:25:38.189]                   name <- changed[[kk]]
[10:25:38.189]                   NAME <- NAMES[[kk]]
[10:25:38.189]                   if (name != NAME && is.element(NAME, old_names)) 
[10:25:38.189]                     next
[10:25:38.189]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:25:38.189]                 }
[10:25:38.189]                 NAMES <- toupper(added)
[10:25:38.189]                 for (kk in seq_along(NAMES)) {
[10:25:38.189]                   name <- added[[kk]]
[10:25:38.189]                   NAME <- NAMES[[kk]]
[10:25:38.189]                   if (name != NAME && is.element(NAME, old_names)) 
[10:25:38.189]                     next
[10:25:38.189]                   args[[name]] <- ""
[10:25:38.189]                 }
[10:25:38.189]                 NAMES <- toupper(removed)
[10:25:38.189]                 for (kk in seq_along(NAMES)) {
[10:25:38.189]                   name <- removed[[kk]]
[10:25:38.189]                   NAME <- NAMES[[kk]]
[10:25:38.189]                   if (name != NAME && is.element(NAME, old_names)) 
[10:25:38.189]                     next
[10:25:38.189]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:25:38.189]                 }
[10:25:38.189]                 if (length(args) > 0) 
[10:25:38.189]                   base::do.call(base::Sys.setenv, args = args)
[10:25:38.189]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:25:38.189]             }
[10:25:38.189]             else {
[10:25:38.189]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:25:38.189]             }
[10:25:38.189]             {
[10:25:38.189]                 if (base::length(...future.futureOptionsAdded) > 
[10:25:38.189]                   0L) {
[10:25:38.189]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:25:38.189]                   base::names(opts) <- ...future.futureOptionsAdded
[10:25:38.189]                   base::options(opts)
[10:25:38.189]                 }
[10:25:38.189]                 {
[10:25:38.189]                   {
[10:25:38.189]                     base::options(mc.cores = ...future.mc.cores.old)
[10:25:38.189]                     NULL
[10:25:38.189]                   }
[10:25:38.189]                   options(future.plan = NULL)
[10:25:38.189]                   if (is.na(NA_character_)) 
[10:25:38.189]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:25:38.189]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:25:38.189]                   future::plan(list(function (..., workers = availableCores(), 
[10:25:38.189]                     lazy = FALSE, rscript_libs = .libPaths(), 
[10:25:38.189]                     envir = parent.frame()) 
[10:25:38.189]                   {
[10:25:38.189]                     if (is.function(workers)) 
[10:25:38.189]                       workers <- workers()
[10:25:38.189]                     workers <- structure(as.integer(workers), 
[10:25:38.189]                       class = class(workers))
[10:25:38.189]                     stop_if_not(length(workers) == 1, is.finite(workers), 
[10:25:38.189]                       workers >= 1)
[10:25:38.189]                     if (workers == 1L && !inherits(workers, "AsIs")) {
[10:25:38.189]                       return(sequential(..., lazy = TRUE, envir = envir))
[10:25:38.189]                     }
[10:25:38.189]                     future <- MultisessionFuture(..., workers = workers, 
[10:25:38.189]                       lazy = lazy, rscript_libs = rscript_libs, 
[10:25:38.189]                       envir = envir)
[10:25:38.189]                     if (!future$lazy) 
[10:25:38.189]                       future <- run(future)
[10:25:38.189]                     invisible(future)
[10:25:38.189]                   }), .cleanup = FALSE, .init = FALSE)
[10:25:38.189]                 }
[10:25:38.189]             }
[10:25:38.189]         }
[10:25:38.189]     })
[10:25:38.189]     if (TRUE) {
[10:25:38.189]         base::sink(type = "output", split = FALSE)
[10:25:38.189]         if (TRUE) {
[10:25:38.189]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:25:38.189]         }
[10:25:38.189]         else {
[10:25:38.189]             ...future.result["stdout"] <- base::list(NULL)
[10:25:38.189]         }
[10:25:38.189]         base::close(...future.stdout)
[10:25:38.189]         ...future.stdout <- NULL
[10:25:38.189]     }
[10:25:38.189]     ...future.result$conditions <- ...future.conditions
[10:25:38.189]     ...future.result$finished <- base::Sys.time()
[10:25:38.189]     ...future.result
[10:25:38.189] }
[10:25:38.192] MultisessionFuture started
[10:25:38.192] - Launch lazy future ... done
[10:25:38.192] run() for ‘MultisessionFuture’ ... done
** Collecting results
v1 = 1
v2 = 2
Warning in sprintf(...) : restarting interrupted promise evaluation
[10:25:38.192] result() for ClusterFuture ...
[10:25:38.193] - result already collected: FutureResult
[10:25:38.193] result() for ClusterFuture ... done
[10:25:38.193] result() for ClusterFuture ...
[10:25:38.193] - result already collected: FutureResult
[10:25:38.193] result() for ClusterFuture ... done
[10:25:38.193] signalConditions() ...
[10:25:38.193]  - include = ‘immediateCondition’
[10:25:38.193]  - exclude = 
[10:25:38.193]  - resignal = FALSE
[10:25:38.193]  - Number of conditions: 1
[10:25:38.194] signalConditions() ... done
[10:25:38.194] Future state: ‘finished’
[10:25:38.194] result() for ClusterFuture ...
[10:25:38.194] - result already collected: FutureResult
[10:25:38.194] result() for ClusterFuture ... done
[10:25:38.194] signalConditions() ...
[10:25:38.194]  - include = ‘condition’
[10:25:38.194]  - exclude = ‘immediateCondition’
[10:25:38.194]  - resignal = TRUE
[10:25:38.194]  - Number of conditions: 1
[10:25:38.194]  - Condition #1: ‘simpleError’, ‘error’, ‘condition’
[10:25:38.195] signalConditions() ... done
v3: <simpleError> (as expect)
[10:25:38.195] result() for ClusterFuture ...
[10:25:38.195] receiveMessageFromWorker() for ClusterFuture ...
[10:25:38.195] - Validating connection of MultisessionFuture
[10:25:38.238] - received message: FutureResult
[10:25:38.238] - Received FutureResult
[10:25:38.239] - Erased future from FutureRegistry
[10:25:38.239] result() for ClusterFuture ...
[10:25:38.239] - result already collected: FutureResult
[10:25:38.239] result() for ClusterFuture ... done
[10:25:38.239] receiveMessageFromWorker() for ClusterFuture ... done
[10:25:38.239] result() for ClusterFuture ... done
[10:25:38.239] result() for ClusterFuture ...
[10:25:38.239] - result already collected: FutureResult
[10:25:38.239] result() for ClusterFuture ... done
Processing: .......... [100%]
v4 = 4
** Left-to-right and right-to-left future assignments
[10:25:38.240] getGlobalsAndPackages() ...
[10:25:38.240] Searching for globals...
[10:25:38.240] 
[10:25:38.240] Searching for globals ... DONE
[10:25:38.240] - globals: [0] <none>
[10:25:38.240] getGlobalsAndPackages() ... DONE
[10:25:38.241] run() for ‘Future’ ...
[10:25:38.241] - state: ‘created’
[10:25:38.241] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[10:25:38.254] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[10:25:38.254] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[10:25:38.255]   - Field: ‘node’
[10:25:38.255]   - Field: ‘label’
[10:25:38.255]   - Field: ‘local’
[10:25:38.255]   - Field: ‘owner’
[10:25:38.255]   - Field: ‘envir’
[10:25:38.255]   - Field: ‘workers’
[10:25:38.255]   - Field: ‘packages’
[10:25:38.255]   - Field: ‘gc’
[10:25:38.255]   - Field: ‘conditions’
[10:25:38.255]   - Field: ‘persistent’
[10:25:38.256]   - Field: ‘expr’
[10:25:38.256]   - Field: ‘uuid’
[10:25:38.256]   - Field: ‘seed’
[10:25:38.256]   - Field: ‘version’
[10:25:38.256]   - Field: ‘result’
[10:25:38.256]   - Field: ‘asynchronous’
[10:25:38.256]   - Field: ‘calls’
[10:25:38.256]   - Field: ‘globals’
[10:25:38.256]   - Field: ‘stdout’
[10:25:38.256]   - Field: ‘earlySignal’
[10:25:38.256]   - Field: ‘lazy’
[10:25:38.257]   - Field: ‘state’
[10:25:38.257] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[10:25:38.257] - Launch lazy future ...
[10:25:38.257] Packages needed by the future expression (n = 0): <none>
[10:25:38.257] Packages needed by future strategies (n = 0): <none>
[10:25:38.260] {
[10:25:38.260]     {
[10:25:38.260]         {
[10:25:38.260]             ...future.startTime <- base::Sys.time()
[10:25:38.260]             {
[10:25:38.260]                 {
[10:25:38.260]                   {
[10:25:38.260]                     {
[10:25:38.260]                       base::local({
[10:25:38.260]                         has_future <- base::requireNamespace("future", 
[10:25:38.260]                           quietly = TRUE)
[10:25:38.260]                         if (has_future) {
[10:25:38.260]                           ns <- base::getNamespace("future")
[10:25:38.260]                           version <- ns[[".package"]][["version"]]
[10:25:38.260]                           if (is.null(version)) 
[10:25:38.260]                             version <- utils::packageVersion("future")
[10:25:38.260]                         }
[10:25:38.260]                         else {
[10:25:38.260]                           version <- NULL
[10:25:38.260]                         }
[10:25:38.260]                         if (!has_future || version < "1.8.0") {
[10:25:38.260]                           info <- base::c(r_version = base::gsub("R version ", 
[10:25:38.260]                             "", base::R.version$version.string), 
[10:25:38.260]                             platform = base::sprintf("%s (%s-bit)", 
[10:25:38.260]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:25:38.260]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[10:25:38.260]                               "release", "version")], collapse = " "), 
[10:25:38.260]                             hostname = base::Sys.info()[["nodename"]])
[10:25:38.260]                           info <- base::sprintf("%s: %s", base::names(info), 
[10:25:38.260]                             info)
[10:25:38.260]                           info <- base::paste(info, collapse = "; ")
[10:25:38.260]                           if (!has_future) {
[10:25:38.260]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:25:38.260]                               info)
[10:25:38.260]                           }
[10:25:38.260]                           else {
[10:25:38.260]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:25:38.260]                               info, version)
[10:25:38.260]                           }
[10:25:38.260]                           base::stop(msg)
[10:25:38.260]                         }
[10:25:38.260]                       })
[10:25:38.260]                     }
[10:25:38.260]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[10:25:38.260]                     base::options(mc.cores = 1L)
[10:25:38.260]                   }
[10:25:38.260]                   options(future.plan = NULL)
[10:25:38.260]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:25:38.260]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:25:38.260]                 }
[10:25:38.260]                 ...future.workdir <- getwd()
[10:25:38.260]             }
[10:25:38.260]             ...future.oldOptions <- base::as.list(base::.Options)
[10:25:38.260]             ...future.oldEnvVars <- base::Sys.getenv()
[10:25:38.260]         }
[10:25:38.260]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:25:38.260]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[10:25:38.260]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:25:38.260]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:25:38.260]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:25:38.260]             future.stdout.windows.reencode = NULL, width = 80L)
[10:25:38.260]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:25:38.260]             base::names(...future.oldOptions))
[10:25:38.260]     }
[10:25:38.260]     if (FALSE) {
[10:25:38.260]     }
[10:25:38.260]     else {
[10:25:38.260]         if (TRUE) {
[10:25:38.260]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:25:38.260]                 open = "w")
[10:25:38.260]         }
[10:25:38.260]         else {
[10:25:38.260]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:25:38.260]                 windows = "NUL", "/dev/null"), open = "w")
[10:25:38.260]         }
[10:25:38.260]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:25:38.260]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:25:38.260]             base::sink(type = "output", split = FALSE)
[10:25:38.260]             base::close(...future.stdout)
[10:25:38.260]         }, add = TRUE)
[10:25:38.260]     }
[10:25:38.260]     ...future.frame <- base::sys.nframe()
[10:25:38.260]     ...future.conditions <- base::list()
[10:25:38.260]     ...future.rng <- base::globalenv()$.Random.seed
[10:25:38.260]     if (FALSE) {
[10:25:38.260]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:25:38.260]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:25:38.260]     }
[10:25:38.260]     ...future.result <- base::tryCatch({
[10:25:38.260]         base::withCallingHandlers({
[10:25:38.260]             ...future.value <- base::withVisible(base::local({
[10:25:38.260]                 ...future.makeSendCondition <- base::local({
[10:25:38.260]                   sendCondition <- NULL
[10:25:38.260]                   function(frame = 1L) {
[10:25:38.260]                     if (is.function(sendCondition)) 
[10:25:38.260]                       return(sendCondition)
[10:25:38.260]                     ns <- getNamespace("parallel")
[10:25:38.260]                     if (exists("sendData", mode = "function", 
[10:25:38.260]                       envir = ns)) {
[10:25:38.260]                       parallel_sendData <- get("sendData", mode = "function", 
[10:25:38.260]                         envir = ns)
[10:25:38.260]                       envir <- sys.frame(frame)
[10:25:38.260]                       master <- NULL
[10:25:38.260]                       while (!identical(envir, .GlobalEnv) && 
[10:25:38.260]                         !identical(envir, emptyenv())) {
[10:25:38.260]                         if (exists("master", mode = "list", envir = envir, 
[10:25:38.260]                           inherits = FALSE)) {
[10:25:38.260]                           master <- get("master", mode = "list", 
[10:25:38.260]                             envir = envir, inherits = FALSE)
[10:25:38.260]                           if (inherits(master, c("SOCKnode", 
[10:25:38.260]                             "SOCK0node"))) {
[10:25:38.260]                             sendCondition <<- function(cond) {
[10:25:38.260]                               data <- list(type = "VALUE", value = cond, 
[10:25:38.260]                                 success = TRUE)
[10:25:38.260]                               parallel_sendData(master, data)
[10:25:38.260]                             }
[10:25:38.260]                             return(sendCondition)
[10:25:38.260]                           }
[10:25:38.260]                         }
[10:25:38.260]                         frame <- frame + 1L
[10:25:38.260]                         envir <- sys.frame(frame)
[10:25:38.260]                       }
[10:25:38.260]                     }
[10:25:38.260]                     sendCondition <<- function(cond) NULL
[10:25:38.260]                   }
[10:25:38.260]                 })
[10:25:38.260]                 withCallingHandlers({
[10:25:38.260]                   1
[10:25:38.260]                 }, immediateCondition = function(cond) {
[10:25:38.260]                   sendCondition <- ...future.makeSendCondition()
[10:25:38.260]                   sendCondition(cond)
[10:25:38.260]                   muffleCondition <- function (cond, pattern = "^muffle") 
[10:25:38.260]                   {
[10:25:38.260]                     inherits <- base::inherits
[10:25:38.260]                     invokeRestart <- base::invokeRestart
[10:25:38.260]                     is.null <- base::is.null
[10:25:38.260]                     muffled <- FALSE
[10:25:38.260]                     if (inherits(cond, "message")) {
[10:25:38.260]                       muffled <- grepl(pattern, "muffleMessage")
[10:25:38.260]                       if (muffled) 
[10:25:38.260]                         invokeRestart("muffleMessage")
[10:25:38.260]                     }
[10:25:38.260]                     else if (inherits(cond, "warning")) {
[10:25:38.260]                       muffled <- grepl(pattern, "muffleWarning")
[10:25:38.260]                       if (muffled) 
[10:25:38.260]                         invokeRestart("muffleWarning")
[10:25:38.260]                     }
[10:25:38.260]                     else if (inherits(cond, "condition")) {
[10:25:38.260]                       if (!is.null(pattern)) {
[10:25:38.260]                         computeRestarts <- base::computeRestarts
[10:25:38.260]                         grepl <- base::grepl
[10:25:38.260]                         restarts <- computeRestarts(cond)
[10:25:38.260]                         for (restart in restarts) {
[10:25:38.260]                           name <- restart$name
[10:25:38.260]                           if (is.null(name)) 
[10:25:38.260]                             next
[10:25:38.260]                           if (!grepl(pattern, name)) 
[10:25:38.260]                             next
[10:25:38.260]                           invokeRestart(restart)
[10:25:38.260]                           muffled <- TRUE
[10:25:38.260]                           break
[10:25:38.260]                         }
[10:25:38.260]                       }
[10:25:38.260]                     }
[10:25:38.260]                     invisible(muffled)
[10:25:38.260]                   }
[10:25:38.260]                   muffleCondition(cond)
[10:25:38.260]                 })
[10:25:38.260]             }))
[10:25:38.260]             future::FutureResult(value = ...future.value$value, 
[10:25:38.260]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:25:38.260]                   ...future.rng), globalenv = if (FALSE) 
[10:25:38.260]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:25:38.260]                     ...future.globalenv.names))
[10:25:38.260]                 else NULL, started = ...future.startTime, version = "1.8")
[10:25:38.260]         }, condition = base::local({
[10:25:38.260]             c <- base::c
[10:25:38.260]             inherits <- base::inherits
[10:25:38.260]             invokeRestart <- base::invokeRestart
[10:25:38.260]             length <- base::length
[10:25:38.260]             list <- base::list
[10:25:38.260]             seq.int <- base::seq.int
[10:25:38.260]             signalCondition <- base::signalCondition
[10:25:38.260]             sys.calls <- base::sys.calls
[10:25:38.260]             `[[` <- base::`[[`
[10:25:38.260]             `+` <- base::`+`
[10:25:38.260]             `<<-` <- base::`<<-`
[10:25:38.260]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:25:38.260]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:25:38.260]                   3L)]
[10:25:38.260]             }
[10:25:38.260]             function(cond) {
[10:25:38.260]                 is_error <- inherits(cond, "error")
[10:25:38.260]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:25:38.260]                   NULL)
[10:25:38.260]                 if (is_error) {
[10:25:38.260]                   sessionInformation <- function() {
[10:25:38.260]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:25:38.260]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:25:38.260]                       search = base::search(), system = base::Sys.info())
[10:25:38.260]                   }
[10:25:38.260]                   ...future.conditions[[length(...future.conditions) + 
[10:25:38.260]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:25:38.260]                     cond$call), session = sessionInformation(), 
[10:25:38.260]                     timestamp = base::Sys.time(), signaled = 0L)
[10:25:38.260]                   signalCondition(cond)
[10:25:38.260]                 }
[10:25:38.260]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:25:38.260]                 "immediateCondition"))) {
[10:25:38.260]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:25:38.260]                   ...future.conditions[[length(...future.conditions) + 
[10:25:38.260]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:25:38.260]                   if (TRUE && !signal) {
[10:25:38.260]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:25:38.260]                     {
[10:25:38.260]                       inherits <- base::inherits
[10:25:38.260]                       invokeRestart <- base::invokeRestart
[10:25:38.260]                       is.null <- base::is.null
[10:25:38.260]                       muffled <- FALSE
[10:25:38.260]                       if (inherits(cond, "message")) {
[10:25:38.260]                         muffled <- grepl(pattern, "muffleMessage")
[10:25:38.260]                         if (muffled) 
[10:25:38.260]                           invokeRestart("muffleMessage")
[10:25:38.260]                       }
[10:25:38.260]                       else if (inherits(cond, "warning")) {
[10:25:38.260]                         muffled <- grepl(pattern, "muffleWarning")
[10:25:38.260]                         if (muffled) 
[10:25:38.260]                           invokeRestart("muffleWarning")
[10:25:38.260]                       }
[10:25:38.260]                       else if (inherits(cond, "condition")) {
[10:25:38.260]                         if (!is.null(pattern)) {
[10:25:38.260]                           computeRestarts <- base::computeRestarts
[10:25:38.260]                           grepl <- base::grepl
[10:25:38.260]                           restarts <- computeRestarts(cond)
[10:25:38.260]                           for (restart in restarts) {
[10:25:38.260]                             name <- restart$name
[10:25:38.260]                             if (is.null(name)) 
[10:25:38.260]                               next
[10:25:38.260]                             if (!grepl(pattern, name)) 
[10:25:38.260]                               next
[10:25:38.260]                             invokeRestart(restart)
[10:25:38.260]                             muffled <- TRUE
[10:25:38.260]                             break
[10:25:38.260]                           }
[10:25:38.260]                         }
[10:25:38.260]                       }
[10:25:38.260]                       invisible(muffled)
[10:25:38.260]                     }
[10:25:38.260]                     muffleCondition(cond, pattern = "^muffle")
[10:25:38.260]                   }
[10:25:38.260]                 }
[10:25:38.260]                 else {
[10:25:38.260]                   if (TRUE) {
[10:25:38.260]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:25:38.260]                     {
[10:25:38.260]                       inherits <- base::inherits
[10:25:38.260]                       invokeRestart <- base::invokeRestart
[10:25:38.260]                       is.null <- base::is.null
[10:25:38.260]                       muffled <- FALSE
[10:25:38.260]                       if (inherits(cond, "message")) {
[10:25:38.260]                         muffled <- grepl(pattern, "muffleMessage")
[10:25:38.260]                         if (muffled) 
[10:25:38.260]                           invokeRestart("muffleMessage")
[10:25:38.260]                       }
[10:25:38.260]                       else if (inherits(cond, "warning")) {
[10:25:38.260]                         muffled <- grepl(pattern, "muffleWarning")
[10:25:38.260]                         if (muffled) 
[10:25:38.260]                           invokeRestart("muffleWarning")
[10:25:38.260]                       }
[10:25:38.260]                       else if (inherits(cond, "condition")) {
[10:25:38.260]                         if (!is.null(pattern)) {
[10:25:38.260]                           computeRestarts <- base::computeRestarts
[10:25:38.260]                           grepl <- base::grepl
[10:25:38.260]                           restarts <- computeRestarts(cond)
[10:25:38.260]                           for (restart in restarts) {
[10:25:38.260]                             name <- restart$name
[10:25:38.260]                             if (is.null(name)) 
[10:25:38.260]                               next
[10:25:38.260]                             if (!grepl(pattern, name)) 
[10:25:38.260]                               next
[10:25:38.260]                             invokeRestart(restart)
[10:25:38.260]                             muffled <- TRUE
[10:25:38.260]                             break
[10:25:38.260]                           }
[10:25:38.260]                         }
[10:25:38.260]                       }
[10:25:38.260]                       invisible(muffled)
[10:25:38.260]                     }
[10:25:38.260]                     muffleCondition(cond, pattern = "^muffle")
[10:25:38.260]                   }
[10:25:38.260]                 }
[10:25:38.260]             }
[10:25:38.260]         }))
[10:25:38.260]     }, error = function(ex) {
[10:25:38.260]         base::structure(base::list(value = NULL, visible = NULL, 
[10:25:38.260]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:25:38.260]                 ...future.rng), started = ...future.startTime, 
[10:25:38.260]             finished = Sys.time(), session_uuid = NA_character_, 
[10:25:38.260]             version = "1.8"), class = "FutureResult")
[10:25:38.260]     }, finally = {
[10:25:38.260]         if (!identical(...future.workdir, getwd())) 
[10:25:38.260]             setwd(...future.workdir)
[10:25:38.260]         {
[10:25:38.260]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:25:38.260]                 ...future.oldOptions$nwarnings <- NULL
[10:25:38.260]             }
[10:25:38.260]             base::options(...future.oldOptions)
[10:25:38.260]             if (.Platform$OS.type == "windows") {
[10:25:38.260]                 old_names <- names(...future.oldEnvVars)
[10:25:38.260]                 envs <- base::Sys.getenv()
[10:25:38.260]                 names <- names(envs)
[10:25:38.260]                 common <- intersect(names, old_names)
[10:25:38.260]                 added <- setdiff(names, old_names)
[10:25:38.260]                 removed <- setdiff(old_names, names)
[10:25:38.260]                 changed <- common[...future.oldEnvVars[common] != 
[10:25:38.260]                   envs[common]]
[10:25:38.260]                 NAMES <- toupper(changed)
[10:25:38.260]                 args <- list()
[10:25:38.260]                 for (kk in seq_along(NAMES)) {
[10:25:38.260]                   name <- changed[[kk]]
[10:25:38.260]                   NAME <- NAMES[[kk]]
[10:25:38.260]                   if (name != NAME && is.element(NAME, old_names)) 
[10:25:38.260]                     next
[10:25:38.260]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:25:38.260]                 }
[10:25:38.260]                 NAMES <- toupper(added)
[10:25:38.260]                 for (kk in seq_along(NAMES)) {
[10:25:38.260]                   name <- added[[kk]]
[10:25:38.260]                   NAME <- NAMES[[kk]]
[10:25:38.260]                   if (name != NAME && is.element(NAME, old_names)) 
[10:25:38.260]                     next
[10:25:38.260]                   args[[name]] <- ""
[10:25:38.260]                 }
[10:25:38.260]                 NAMES <- toupper(removed)
[10:25:38.260]                 for (kk in seq_along(NAMES)) {
[10:25:38.260]                   name <- removed[[kk]]
[10:25:38.260]                   NAME <- NAMES[[kk]]
[10:25:38.260]                   if (name != NAME && is.element(NAME, old_names)) 
[10:25:38.260]                     next
[10:25:38.260]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:25:38.260]                 }
[10:25:38.260]                 if (length(args) > 0) 
[10:25:38.260]                   base::do.call(base::Sys.setenv, args = args)
[10:25:38.260]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:25:38.260]             }
[10:25:38.260]             else {
[10:25:38.260]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:25:38.260]             }
[10:25:38.260]             {
[10:25:38.260]                 if (base::length(...future.futureOptionsAdded) > 
[10:25:38.260]                   0L) {
[10:25:38.260]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:25:38.260]                   base::names(opts) <- ...future.futureOptionsAdded
[10:25:38.260]                   base::options(opts)
[10:25:38.260]                 }
[10:25:38.260]                 {
[10:25:38.260]                   {
[10:25:38.260]                     base::options(mc.cores = ...future.mc.cores.old)
[10:25:38.260]                     NULL
[10:25:38.260]                   }
[10:25:38.260]                   options(future.plan = NULL)
[10:25:38.260]                   if (is.na(NA_character_)) 
[10:25:38.260]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:25:38.260]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:25:38.260]                   future::plan(list(function (..., workers = availableCores(), 
[10:25:38.260]                     lazy = FALSE, rscript_libs = .libPaths(), 
[10:25:38.260]                     envir = parent.frame()) 
[10:25:38.260]                   {
[10:25:38.260]                     if (is.function(workers)) 
[10:25:38.260]                       workers <- workers()
[10:25:38.260]                     workers <- structure(as.integer(workers), 
[10:25:38.260]                       class = class(workers))
[10:25:38.260]                     stop_if_not(length(workers) == 1, is.finite(workers), 
[10:25:38.260]                       workers >= 1)
[10:25:38.260]                     if (workers == 1L && !inherits(workers, "AsIs")) {
[10:25:38.260]                       return(sequential(..., lazy = TRUE, envir = envir))
[10:25:38.260]                     }
[10:25:38.260]                     future <- MultisessionFuture(..., workers = workers, 
[10:25:38.260]                       lazy = lazy, rscript_libs = rscript_libs, 
[10:25:38.260]                       envir = envir)
[10:25:38.260]                     if (!future$lazy) 
[10:25:38.260]                       future <- run(future)
[10:25:38.260]                     invisible(future)
[10:25:38.260]                   }), .cleanup = FALSE, .init = FALSE)
[10:25:38.260]                 }
[10:25:38.260]             }
[10:25:38.260]         }
[10:25:38.260]     })
[10:25:38.260]     if (TRUE) {
[10:25:38.260]         base::sink(type = "output", split = FALSE)
[10:25:38.260]         if (TRUE) {
[10:25:38.260]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:25:38.260]         }
[10:25:38.260]         else {
[10:25:38.260]             ...future.result["stdout"] <- base::list(NULL)
[10:25:38.260]         }
[10:25:38.260]         base::close(...future.stdout)
[10:25:38.260]         ...future.stdout <- NULL
[10:25:38.260]     }
[10:25:38.260]     ...future.result$conditions <- ...future.conditions
[10:25:38.260]     ...future.result$finished <- base::Sys.time()
[10:25:38.260]     ...future.result
[10:25:38.260] }
[10:25:38.263] MultisessionFuture started
[10:25:38.263] - Launch lazy future ... done
[10:25:38.263] run() for ‘MultisessionFuture’ ... done
[10:25:38.263] result() for ClusterFuture ...
[10:25:38.263] receiveMessageFromWorker() for ClusterFuture ...
[10:25:38.264] - Validating connection of MultisessionFuture
[10:25:38.310] - received message: FutureResult
[10:25:38.310] - Received FutureResult
[10:25:38.310] - Erased future from FutureRegistry
[10:25:38.310] result() for ClusterFuture ...
[10:25:38.310] - result already collected: FutureResult
[10:25:38.310] result() for ClusterFuture ... done
[10:25:38.310] receiveMessageFromWorker() for ClusterFuture ... done
[10:25:38.311] result() for ClusterFuture ... done
[10:25:38.311] result() for ClusterFuture ...
[10:25:38.311] - result already collected: FutureResult
[10:25:38.311] result() for ClusterFuture ... done
c = 1
[10:25:38.311] getGlobalsAndPackages() ...
[10:25:38.311] Searching for globals...
[10:25:38.312] 
[10:25:38.312] Searching for globals ... DONE
[10:25:38.312] - globals: [0] <none>
[10:25:38.312] getGlobalsAndPackages() ... DONE
[10:25:38.312] run() for ‘Future’ ...
[10:25:38.312] - state: ‘created’
[10:25:38.312] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[10:25:38.326] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[10:25:38.326] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[10:25:38.326]   - Field: ‘node’
[10:25:38.326]   - Field: ‘label’
[10:25:38.326]   - Field: ‘local’
[10:25:38.327]   - Field: ‘owner’
[10:25:38.327]   - Field: ‘envir’
[10:25:38.327]   - Field: ‘workers’
[10:25:38.327]   - Field: ‘packages’
[10:25:38.327]   - Field: ‘gc’
[10:25:38.327]   - Field: ‘conditions’
[10:25:38.327]   - Field: ‘persistent’
[10:25:38.327]   - Field: ‘expr’
[10:25:38.327]   - Field: ‘uuid’
[10:25:38.327]   - Field: ‘seed’
[10:25:38.327]   - Field: ‘version’
[10:25:38.328]   - Field: ‘result’
[10:25:38.328]   - Field: ‘asynchronous’
[10:25:38.328]   - Field: ‘calls’
[10:25:38.328]   - Field: ‘globals’
[10:25:38.328]   - Field: ‘stdout’
[10:25:38.328]   - Field: ‘earlySignal’
[10:25:38.328]   - Field: ‘lazy’
[10:25:38.328]   - Field: ‘state’
[10:25:38.328] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[10:25:38.328] - Launch lazy future ...
[10:25:38.329] Packages needed by the future expression (n = 0): <none>
[10:25:38.329] Packages needed by future strategies (n = 0): <none>
[10:25:38.329] {
[10:25:38.329]     {
[10:25:38.329]         {
[10:25:38.329]             ...future.startTime <- base::Sys.time()
[10:25:38.329]             {
[10:25:38.329]                 {
[10:25:38.329]                   {
[10:25:38.329]                     {
[10:25:38.329]                       base::local({
[10:25:38.329]                         has_future <- base::requireNamespace("future", 
[10:25:38.329]                           quietly = TRUE)
[10:25:38.329]                         if (has_future) {
[10:25:38.329]                           ns <- base::getNamespace("future")
[10:25:38.329]                           version <- ns[[".package"]][["version"]]
[10:25:38.329]                           if (is.null(version)) 
[10:25:38.329]                             version <- utils::packageVersion("future")
[10:25:38.329]                         }
[10:25:38.329]                         else {
[10:25:38.329]                           version <- NULL
[10:25:38.329]                         }
[10:25:38.329]                         if (!has_future || version < "1.8.0") {
[10:25:38.329]                           info <- base::c(r_version = base::gsub("R version ", 
[10:25:38.329]                             "", base::R.version$version.string), 
[10:25:38.329]                             platform = base::sprintf("%s (%s-bit)", 
[10:25:38.329]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:25:38.329]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[10:25:38.329]                               "release", "version")], collapse = " "), 
[10:25:38.329]                             hostname = base::Sys.info()[["nodename"]])
[10:25:38.329]                           info <- base::sprintf("%s: %s", base::names(info), 
[10:25:38.329]                             info)
[10:25:38.329]                           info <- base::paste(info, collapse = "; ")
[10:25:38.329]                           if (!has_future) {
[10:25:38.329]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:25:38.329]                               info)
[10:25:38.329]                           }
[10:25:38.329]                           else {
[10:25:38.329]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:25:38.329]                               info, version)
[10:25:38.329]                           }
[10:25:38.329]                           base::stop(msg)
[10:25:38.329]                         }
[10:25:38.329]                       })
[10:25:38.329]                     }
[10:25:38.329]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[10:25:38.329]                     base::options(mc.cores = 1L)
[10:25:38.329]                   }
[10:25:38.329]                   options(future.plan = NULL)
[10:25:38.329]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:25:38.329]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:25:38.329]                 }
[10:25:38.329]                 ...future.workdir <- getwd()
[10:25:38.329]             }
[10:25:38.329]             ...future.oldOptions <- base::as.list(base::.Options)
[10:25:38.329]             ...future.oldEnvVars <- base::Sys.getenv()
[10:25:38.329]         }
[10:25:38.329]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:25:38.329]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[10:25:38.329]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:25:38.329]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:25:38.329]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:25:38.329]             future.stdout.windows.reencode = NULL, width = 80L)
[10:25:38.329]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:25:38.329]             base::names(...future.oldOptions))
[10:25:38.329]     }
[10:25:38.329]     if (FALSE) {
[10:25:38.329]     }
[10:25:38.329]     else {
[10:25:38.329]         if (TRUE) {
[10:25:38.329]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:25:38.329]                 open = "w")
[10:25:38.329]         }
[10:25:38.329]         else {
[10:25:38.329]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:25:38.329]                 windows = "NUL", "/dev/null"), open = "w")
[10:25:38.329]         }
[10:25:38.329]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:25:38.329]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:25:38.329]             base::sink(type = "output", split = FALSE)
[10:25:38.329]             base::close(...future.stdout)
[10:25:38.329]         }, add = TRUE)
[10:25:38.329]     }
[10:25:38.329]     ...future.frame <- base::sys.nframe()
[10:25:38.329]     ...future.conditions <- base::list()
[10:25:38.329]     ...future.rng <- base::globalenv()$.Random.seed
[10:25:38.329]     if (FALSE) {
[10:25:38.329]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:25:38.329]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:25:38.329]     }
[10:25:38.329]     ...future.result <- base::tryCatch({
[10:25:38.329]         base::withCallingHandlers({
[10:25:38.329]             ...future.value <- base::withVisible(base::local({
[10:25:38.329]                 ...future.makeSendCondition <- base::local({
[10:25:38.329]                   sendCondition <- NULL
[10:25:38.329]                   function(frame = 1L) {
[10:25:38.329]                     if (is.function(sendCondition)) 
[10:25:38.329]                       return(sendCondition)
[10:25:38.329]                     ns <- getNamespace("parallel")
[10:25:38.329]                     if (exists("sendData", mode = "function", 
[10:25:38.329]                       envir = ns)) {
[10:25:38.329]                       parallel_sendData <- get("sendData", mode = "function", 
[10:25:38.329]                         envir = ns)
[10:25:38.329]                       envir <- sys.frame(frame)
[10:25:38.329]                       master <- NULL
[10:25:38.329]                       while (!identical(envir, .GlobalEnv) && 
[10:25:38.329]                         !identical(envir, emptyenv())) {
[10:25:38.329]                         if (exists("master", mode = "list", envir = envir, 
[10:25:38.329]                           inherits = FALSE)) {
[10:25:38.329]                           master <- get("master", mode = "list", 
[10:25:38.329]                             envir = envir, inherits = FALSE)
[10:25:38.329]                           if (inherits(master, c("SOCKnode", 
[10:25:38.329]                             "SOCK0node"))) {
[10:25:38.329]                             sendCondition <<- function(cond) {
[10:25:38.329]                               data <- list(type = "VALUE", value = cond, 
[10:25:38.329]                                 success = TRUE)
[10:25:38.329]                               parallel_sendData(master, data)
[10:25:38.329]                             }
[10:25:38.329]                             return(sendCondition)
[10:25:38.329]                           }
[10:25:38.329]                         }
[10:25:38.329]                         frame <- frame + 1L
[10:25:38.329]                         envir <- sys.frame(frame)
[10:25:38.329]                       }
[10:25:38.329]                     }
[10:25:38.329]                     sendCondition <<- function(cond) NULL
[10:25:38.329]                   }
[10:25:38.329]                 })
[10:25:38.329]                 withCallingHandlers({
[10:25:38.329]                   1
[10:25:38.329]                 }, immediateCondition = function(cond) {
[10:25:38.329]                   sendCondition <- ...future.makeSendCondition()
[10:25:38.329]                   sendCondition(cond)
[10:25:38.329]                   muffleCondition <- function (cond, pattern = "^muffle") 
[10:25:38.329]                   {
[10:25:38.329]                     inherits <- base::inherits
[10:25:38.329]                     invokeRestart <- base::invokeRestart
[10:25:38.329]                     is.null <- base::is.null
[10:25:38.329]                     muffled <- FALSE
[10:25:38.329]                     if (inherits(cond, "message")) {
[10:25:38.329]                       muffled <- grepl(pattern, "muffleMessage")
[10:25:38.329]                       if (muffled) 
[10:25:38.329]                         invokeRestart("muffleMessage")
[10:25:38.329]                     }
[10:25:38.329]                     else if (inherits(cond, "warning")) {
[10:25:38.329]                       muffled <- grepl(pattern, "muffleWarning")
[10:25:38.329]                       if (muffled) 
[10:25:38.329]                         invokeRestart("muffleWarning")
[10:25:38.329]                     }
[10:25:38.329]                     else if (inherits(cond, "condition")) {
[10:25:38.329]                       if (!is.null(pattern)) {
[10:25:38.329]                         computeRestarts <- base::computeRestarts
[10:25:38.329]                         grepl <- base::grepl
[10:25:38.329]                         restarts <- computeRestarts(cond)
[10:25:38.329]                         for (restart in restarts) {
[10:25:38.329]                           name <- restart$name
[10:25:38.329]                           if (is.null(name)) 
[10:25:38.329]                             next
[10:25:38.329]                           if (!grepl(pattern, name)) 
[10:25:38.329]                             next
[10:25:38.329]                           invokeRestart(restart)
[10:25:38.329]                           muffled <- TRUE
[10:25:38.329]                           break
[10:25:38.329]                         }
[10:25:38.329]                       }
[10:25:38.329]                     }
[10:25:38.329]                     invisible(muffled)
[10:25:38.329]                   }
[10:25:38.329]                   muffleCondition(cond)
[10:25:38.329]                 })
[10:25:38.329]             }))
[10:25:38.329]             future::FutureResult(value = ...future.value$value, 
[10:25:38.329]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:25:38.329]                   ...future.rng), globalenv = if (FALSE) 
[10:25:38.329]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:25:38.329]                     ...future.globalenv.names))
[10:25:38.329]                 else NULL, started = ...future.startTime, version = "1.8")
[10:25:38.329]         }, condition = base::local({
[10:25:38.329]             c <- base::c
[10:25:38.329]             inherits <- base::inherits
[10:25:38.329]             invokeRestart <- base::invokeRestart
[10:25:38.329]             length <- base::length
[10:25:38.329]             list <- base::list
[10:25:38.329]             seq.int <- base::seq.int
[10:25:38.329]             signalCondition <- base::signalCondition
[10:25:38.329]             sys.calls <- base::sys.calls
[10:25:38.329]             `[[` <- base::`[[`
[10:25:38.329]             `+` <- base::`+`
[10:25:38.329]             `<<-` <- base::`<<-`
[10:25:38.329]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:25:38.329]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:25:38.329]                   3L)]
[10:25:38.329]             }
[10:25:38.329]             function(cond) {
[10:25:38.329]                 is_error <- inherits(cond, "error")
[10:25:38.329]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:25:38.329]                   NULL)
[10:25:38.329]                 if (is_error) {
[10:25:38.329]                   sessionInformation <- function() {
[10:25:38.329]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:25:38.329]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:25:38.329]                       search = base::search(), system = base::Sys.info())
[10:25:38.329]                   }
[10:25:38.329]                   ...future.conditions[[length(...future.conditions) + 
[10:25:38.329]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:25:38.329]                     cond$call), session = sessionInformation(), 
[10:25:38.329]                     timestamp = base::Sys.time(), signaled = 0L)
[10:25:38.329]                   signalCondition(cond)
[10:25:38.329]                 }
[10:25:38.329]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:25:38.329]                 "immediateCondition"))) {
[10:25:38.329]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:25:38.329]                   ...future.conditions[[length(...future.conditions) + 
[10:25:38.329]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:25:38.329]                   if (TRUE && !signal) {
[10:25:38.329]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:25:38.329]                     {
[10:25:38.329]                       inherits <- base::inherits
[10:25:38.329]                       invokeRestart <- base::invokeRestart
[10:25:38.329]                       is.null <- base::is.null
[10:25:38.329]                       muffled <- FALSE
[10:25:38.329]                       if (inherits(cond, "message")) {
[10:25:38.329]                         muffled <- grepl(pattern, "muffleMessage")
[10:25:38.329]                         if (muffled) 
[10:25:38.329]                           invokeRestart("muffleMessage")
[10:25:38.329]                       }
[10:25:38.329]                       else if (inherits(cond, "warning")) {
[10:25:38.329]                         muffled <- grepl(pattern, "muffleWarning")
[10:25:38.329]                         if (muffled) 
[10:25:38.329]                           invokeRestart("muffleWarning")
[10:25:38.329]                       }
[10:25:38.329]                       else if (inherits(cond, "condition")) {
[10:25:38.329]                         if (!is.null(pattern)) {
[10:25:38.329]                           computeRestarts <- base::computeRestarts
[10:25:38.329]                           grepl <- base::grepl
[10:25:38.329]                           restarts <- computeRestarts(cond)
[10:25:38.329]                           for (restart in restarts) {
[10:25:38.329]                             name <- restart$name
[10:25:38.329]                             if (is.null(name)) 
[10:25:38.329]                               next
[10:25:38.329]                             if (!grepl(pattern, name)) 
[10:25:38.329]                               next
[10:25:38.329]                             invokeRestart(restart)
[10:25:38.329]                             muffled <- TRUE
[10:25:38.329]                             break
[10:25:38.329]                           }
[10:25:38.329]                         }
[10:25:38.329]                       }
[10:25:38.329]                       invisible(muffled)
[10:25:38.329]                     }
[10:25:38.329]                     muffleCondition(cond, pattern = "^muffle")
[10:25:38.329]                   }
[10:25:38.329]                 }
[10:25:38.329]                 else {
[10:25:38.329]                   if (TRUE) {
[10:25:38.329]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:25:38.329]                     {
[10:25:38.329]                       inherits <- base::inherits
[10:25:38.329]                       invokeRestart <- base::invokeRestart
[10:25:38.329]                       is.null <- base::is.null
[10:25:38.329]                       muffled <- FALSE
[10:25:38.329]                       if (inherits(cond, "message")) {
[10:25:38.329]                         muffled <- grepl(pattern, "muffleMessage")
[10:25:38.329]                         if (muffled) 
[10:25:38.329]                           invokeRestart("muffleMessage")
[10:25:38.329]                       }
[10:25:38.329]                       else if (inherits(cond, "warning")) {
[10:25:38.329]                         muffled <- grepl(pattern, "muffleWarning")
[10:25:38.329]                         if (muffled) 
[10:25:38.329]                           invokeRestart("muffleWarning")
[10:25:38.329]                       }
[10:25:38.329]                       else if (inherits(cond, "condition")) {
[10:25:38.329]                         if (!is.null(pattern)) {
[10:25:38.329]                           computeRestarts <- base::computeRestarts
[10:25:38.329]                           grepl <- base::grepl
[10:25:38.329]                           restarts <- computeRestarts(cond)
[10:25:38.329]                           for (restart in restarts) {
[10:25:38.329]                             name <- restart$name
[10:25:38.329]                             if (is.null(name)) 
[10:25:38.329]                               next
[10:25:38.329]                             if (!grepl(pattern, name)) 
[10:25:38.329]                               next
[10:25:38.329]                             invokeRestart(restart)
[10:25:38.329]                             muffled <- TRUE
[10:25:38.329]                             break
[10:25:38.329]                           }
[10:25:38.329]                         }
[10:25:38.329]                       }
[10:25:38.329]                       invisible(muffled)
[10:25:38.329]                     }
[10:25:38.329]                     muffleCondition(cond, pattern = "^muffle")
[10:25:38.329]                   }
[10:25:38.329]                 }
[10:25:38.329]             }
[10:25:38.329]         }))
[10:25:38.329]     }, error = function(ex) {
[10:25:38.329]         base::structure(base::list(value = NULL, visible = NULL, 
[10:25:38.329]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:25:38.329]                 ...future.rng), started = ...future.startTime, 
[10:25:38.329]             finished = Sys.time(), session_uuid = NA_character_, 
[10:25:38.329]             version = "1.8"), class = "FutureResult")
[10:25:38.329]     }, finally = {
[10:25:38.329]         if (!identical(...future.workdir, getwd())) 
[10:25:38.329]             setwd(...future.workdir)
[10:25:38.329]         {
[10:25:38.329]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:25:38.329]                 ...future.oldOptions$nwarnings <- NULL
[10:25:38.329]             }
[10:25:38.329]             base::options(...future.oldOptions)
[10:25:38.329]             if (.Platform$OS.type == "windows") {
[10:25:38.329]                 old_names <- names(...future.oldEnvVars)
[10:25:38.329]                 envs <- base::Sys.getenv()
[10:25:38.329]                 names <- names(envs)
[10:25:38.329]                 common <- intersect(names, old_names)
[10:25:38.329]                 added <- setdiff(names, old_names)
[10:25:38.329]                 removed <- setdiff(old_names, names)
[10:25:38.329]                 changed <- common[...future.oldEnvVars[common] != 
[10:25:38.329]                   envs[common]]
[10:25:38.329]                 NAMES <- toupper(changed)
[10:25:38.329]                 args <- list()
[10:25:38.329]                 for (kk in seq_along(NAMES)) {
[10:25:38.329]                   name <- changed[[kk]]
[10:25:38.329]                   NAME <- NAMES[[kk]]
[10:25:38.329]                   if (name != NAME && is.element(NAME, old_names)) 
[10:25:38.329]                     next
[10:25:38.329]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:25:38.329]                 }
[10:25:38.329]                 NAMES <- toupper(added)
[10:25:38.329]                 for (kk in seq_along(NAMES)) {
[10:25:38.329]                   name <- added[[kk]]
[10:25:38.329]                   NAME <- NAMES[[kk]]
[10:25:38.329]                   if (name != NAME && is.element(NAME, old_names)) 
[10:25:38.329]                     next
[10:25:38.329]                   args[[name]] <- ""
[10:25:38.329]                 }
[10:25:38.329]                 NAMES <- toupper(removed)
[10:25:38.329]                 for (kk in seq_along(NAMES)) {
[10:25:38.329]                   name <- removed[[kk]]
[10:25:38.329]                   NAME <- NAMES[[kk]]
[10:25:38.329]                   if (name != NAME && is.element(NAME, old_names)) 
[10:25:38.329]                     next
[10:25:38.329]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:25:38.329]                 }
[10:25:38.329]                 if (length(args) > 0) 
[10:25:38.329]                   base::do.call(base::Sys.setenv, args = args)
[10:25:38.329]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:25:38.329]             }
[10:25:38.329]             else {
[10:25:38.329]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:25:38.329]             }
[10:25:38.329]             {
[10:25:38.329]                 if (base::length(...future.futureOptionsAdded) > 
[10:25:38.329]                   0L) {
[10:25:38.329]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:25:38.329]                   base::names(opts) <- ...future.futureOptionsAdded
[10:25:38.329]                   base::options(opts)
[10:25:38.329]                 }
[10:25:38.329]                 {
[10:25:38.329]                   {
[10:25:38.329]                     base::options(mc.cores = ...future.mc.cores.old)
[10:25:38.329]                     NULL
[10:25:38.329]                   }
[10:25:38.329]                   options(future.plan = NULL)
[10:25:38.329]                   if (is.na(NA_character_)) 
[10:25:38.329]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:25:38.329]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:25:38.329]                   future::plan(list(function (..., workers = availableCores(), 
[10:25:38.329]                     lazy = FALSE, rscript_libs = .libPaths(), 
[10:25:38.329]                     envir = parent.frame()) 
[10:25:38.329]                   {
[10:25:38.329]                     if (is.function(workers)) 
[10:25:38.329]                       workers <- workers()
[10:25:38.329]                     workers <- structure(as.integer(workers), 
[10:25:38.329]                       class = class(workers))
[10:25:38.329]                     stop_if_not(length(workers) == 1, is.finite(workers), 
[10:25:38.329]                       workers >= 1)
[10:25:38.329]                     if (workers == 1L && !inherits(workers, "AsIs")) {
[10:25:38.329]                       return(sequential(..., lazy = TRUE, envir = envir))
[10:25:38.329]                     }
[10:25:38.329]                     future <- MultisessionFuture(..., workers = workers, 
[10:25:38.329]                       lazy = lazy, rscript_libs = rscript_libs, 
[10:25:38.329]                       envir = envir)
[10:25:38.329]                     if (!future$lazy) 
[10:25:38.329]                       future <- run(future)
[10:25:38.329]                     invisible(future)
[10:25:38.329]                   }), .cleanup = FALSE, .init = FALSE)
[10:25:38.329]                 }
[10:25:38.329]             }
[10:25:38.329]         }
[10:25:38.329]     })
[10:25:38.329]     if (TRUE) {
[10:25:38.329]         base::sink(type = "output", split = FALSE)
[10:25:38.329]         if (TRUE) {
[10:25:38.329]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:25:38.329]         }
[10:25:38.329]         else {
[10:25:38.329]             ...future.result["stdout"] <- base::list(NULL)
[10:25:38.329]         }
[10:25:38.329]         base::close(...future.stdout)
[10:25:38.329]         ...future.stdout <- NULL
[10:25:38.329]     }
[10:25:38.329]     ...future.result$conditions <- ...future.conditions
[10:25:38.329]     ...future.result$finished <- base::Sys.time()
[10:25:38.329]     ...future.result
[10:25:38.329] }
[10:25:38.332] MultisessionFuture started
[10:25:38.332] - Launch lazy future ... done
[10:25:38.332] run() for ‘MultisessionFuture’ ... done
[10:25:38.333] result() for ClusterFuture ...
[10:25:38.333] receiveMessageFromWorker() for ClusterFuture ...
[10:25:38.333] - Validating connection of MultisessionFuture
[10:25:38.378] - received message: FutureResult
[10:25:38.378] - Received FutureResult
[10:25:38.379] - Erased future from FutureRegistry
[10:25:38.379] result() for ClusterFuture ...
[10:25:38.379] - result already collected: FutureResult
[10:25:38.379] result() for ClusterFuture ... done
[10:25:38.379] receiveMessageFromWorker() for ClusterFuture ... done
[10:25:38.379] result() for ClusterFuture ... done
[10:25:38.379] result() for ClusterFuture ...
[10:25:38.379] - result already collected: FutureResult
[10:25:38.379] result() for ClusterFuture ... done
d = 1
** Nested future assignments
[10:25:38.380] getGlobalsAndPackages() ...
[10:25:38.380] Searching for globals...
[10:25:38.384] - globals found: [5] ‘{’, ‘<-’, ‘%<-%’, ‘%->%’, ‘+’
[10:25:38.384] Searching for globals ... DONE
[10:25:38.384] Resolving globals: FALSE
[10:25:38.384] 
[10:25:38.384] - packages: [1] ‘future’
[10:25:38.384] getGlobalsAndPackages() ... DONE
[10:25:38.385] run() for ‘Future’ ...
[10:25:38.385] - state: ‘created’
[10:25:38.385] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[10:25:38.401] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[10:25:38.401] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[10:25:38.401]   - Field: ‘node’
[10:25:38.401]   - Field: ‘label’
[10:25:38.401]   - Field: ‘local’
[10:25:38.402]   - Field: ‘owner’
[10:25:38.402]   - Field: ‘envir’
[10:25:38.402]   - Field: ‘workers’
[10:25:38.402]   - Field: ‘packages’
[10:25:38.402]   - Field: ‘gc’
[10:25:38.402]   - Field: ‘conditions’
[10:25:38.402]   - Field: ‘persistent’
[10:25:38.402]   - Field: ‘expr’
[10:25:38.402]   - Field: ‘uuid’
[10:25:38.402]   - Field: ‘seed’
[10:25:38.403]   - Field: ‘version’
[10:25:38.403]   - Field: ‘result’
[10:25:38.403]   - Field: ‘asynchronous’
[10:25:38.403]   - Field: ‘calls’
[10:25:38.403]   - Field: ‘globals’
[10:25:38.403]   - Field: ‘stdout’
[10:25:38.403]   - Field: ‘earlySignal’
[10:25:38.403]   - Field: ‘lazy’
[10:25:38.403]   - Field: ‘state’
[10:25:38.403] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[10:25:38.403] - Launch lazy future ...
[10:25:38.404] Packages needed by the future expression (n = 1): ‘future’
[10:25:38.404] Packages needed by future strategies (n = 0): <none>
[10:25:38.404] {
[10:25:38.404]     {
[10:25:38.404]         {
[10:25:38.404]             ...future.startTime <- base::Sys.time()
[10:25:38.404]             {
[10:25:38.404]                 {
[10:25:38.404]                   {
[10:25:38.404]                     {
[10:25:38.404]                       {
[10:25:38.404]                         base::local({
[10:25:38.404]                           has_future <- base::requireNamespace("future", 
[10:25:38.404]                             quietly = TRUE)
[10:25:38.404]                           if (has_future) {
[10:25:38.404]                             ns <- base::getNamespace("future")
[10:25:38.404]                             version <- ns[[".package"]][["version"]]
[10:25:38.404]                             if (is.null(version)) 
[10:25:38.404]                               version <- utils::packageVersion("future")
[10:25:38.404]                           }
[10:25:38.404]                           else {
[10:25:38.404]                             version <- NULL
[10:25:38.404]                           }
[10:25:38.404]                           if (!has_future || version < "1.8.0") {
[10:25:38.404]                             info <- base::c(r_version = base::gsub("R version ", 
[10:25:38.404]                               "", base::R.version$version.string), 
[10:25:38.404]                               platform = base::sprintf("%s (%s-bit)", 
[10:25:38.404]                                 base::R.version$platform, 8 * 
[10:25:38.404]                                   base::.Machine$sizeof.pointer), 
[10:25:38.404]                               os = base::paste(base::Sys.info()[base::c("sysname", 
[10:25:38.404]                                 "release", "version")], collapse = " "), 
[10:25:38.404]                               hostname = base::Sys.info()[["nodename"]])
[10:25:38.404]                             info <- base::sprintf("%s: %s", base::names(info), 
[10:25:38.404]                               info)
[10:25:38.404]                             info <- base::paste(info, collapse = "; ")
[10:25:38.404]                             if (!has_future) {
[10:25:38.404]                               msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:25:38.404]                                 info)
[10:25:38.404]                             }
[10:25:38.404]                             else {
[10:25:38.404]                               msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:25:38.404]                                 info, version)
[10:25:38.404]                             }
[10:25:38.404]                             base::stop(msg)
[10:25:38.404]                           }
[10:25:38.404]                         })
[10:25:38.404]                       }
[10:25:38.404]                       ...future.mc.cores.old <- base::getOption("mc.cores")
[10:25:38.404]                       base::options(mc.cores = 1L)
[10:25:38.404]                     }
[10:25:38.404]                     base::local({
[10:25:38.404]                       for (pkg in "future") {
[10:25:38.404]                         base::loadNamespace(pkg)
[10:25:38.404]                         base::library(pkg, character.only = TRUE)
[10:25:38.404]                       }
[10:25:38.404]                     })
[10:25:38.404]                   }
[10:25:38.404]                   options(future.plan = NULL)
[10:25:38.404]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:25:38.404]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:25:38.404]                 }
[10:25:38.404]                 ...future.workdir <- getwd()
[10:25:38.404]             }
[10:25:38.404]             ...future.oldOptions <- base::as.list(base::.Options)
[10:25:38.404]             ...future.oldEnvVars <- base::Sys.getenv()
[10:25:38.404]         }
[10:25:38.404]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:25:38.404]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[10:25:38.404]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:25:38.404]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:25:38.404]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:25:38.404]             future.stdout.windows.reencode = NULL, width = 80L)
[10:25:38.404]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:25:38.404]             base::names(...future.oldOptions))
[10:25:38.404]     }
[10:25:38.404]     if (FALSE) {
[10:25:38.404]     }
[10:25:38.404]     else {
[10:25:38.404]         if (TRUE) {
[10:25:38.404]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:25:38.404]                 open = "w")
[10:25:38.404]         }
[10:25:38.404]         else {
[10:25:38.404]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:25:38.404]                 windows = "NUL", "/dev/null"), open = "w")
[10:25:38.404]         }
[10:25:38.404]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:25:38.404]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:25:38.404]             base::sink(type = "output", split = FALSE)
[10:25:38.404]             base::close(...future.stdout)
[10:25:38.404]         }, add = TRUE)
[10:25:38.404]     }
[10:25:38.404]     ...future.frame <- base::sys.nframe()
[10:25:38.404]     ...future.conditions <- base::list()
[10:25:38.404]     ...future.rng <- base::globalenv()$.Random.seed
[10:25:38.404]     if (FALSE) {
[10:25:38.404]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:25:38.404]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:25:38.404]     }
[10:25:38.404]     ...future.result <- base::tryCatch({
[10:25:38.404]         base::withCallingHandlers({
[10:25:38.404]             ...future.value <- base::withVisible(base::local({
[10:25:38.404]                 ...future.makeSendCondition <- base::local({
[10:25:38.404]                   sendCondition <- NULL
[10:25:38.404]                   function(frame = 1L) {
[10:25:38.404]                     if (is.function(sendCondition)) 
[10:25:38.404]                       return(sendCondition)
[10:25:38.404]                     ns <- getNamespace("parallel")
[10:25:38.404]                     if (exists("sendData", mode = "function", 
[10:25:38.404]                       envir = ns)) {
[10:25:38.404]                       parallel_sendData <- get("sendData", mode = "function", 
[10:25:38.404]                         envir = ns)
[10:25:38.404]                       envir <- sys.frame(frame)
[10:25:38.404]                       master <- NULL
[10:25:38.404]                       while (!identical(envir, .GlobalEnv) && 
[10:25:38.404]                         !identical(envir, emptyenv())) {
[10:25:38.404]                         if (exists("master", mode = "list", envir = envir, 
[10:25:38.404]                           inherits = FALSE)) {
[10:25:38.404]                           master <- get("master", mode = "list", 
[10:25:38.404]                             envir = envir, inherits = FALSE)
[10:25:38.404]                           if (inherits(master, c("SOCKnode", 
[10:25:38.404]                             "SOCK0node"))) {
[10:25:38.404]                             sendCondition <<- function(cond) {
[10:25:38.404]                               data <- list(type = "VALUE", value = cond, 
[10:25:38.404]                                 success = TRUE)
[10:25:38.404]                               parallel_sendData(master, data)
[10:25:38.404]                             }
[10:25:38.404]                             return(sendCondition)
[10:25:38.404]                           }
[10:25:38.404]                         }
[10:25:38.404]                         frame <- frame + 1L
[10:25:38.404]                         envir <- sys.frame(frame)
[10:25:38.404]                       }
[10:25:38.404]                     }
[10:25:38.404]                     sendCondition <<- function(cond) NULL
[10:25:38.404]                   }
[10:25:38.404]                 })
[10:25:38.404]                 withCallingHandlers({
[10:25:38.404]                   {
[10:25:38.404]                     b <- 1
[10:25:38.404]                     c %<-% 2
[10:25:38.404]                     d <- 3
[10:25:38.404]                     4 %->% e
[10:25:38.404]                     b + c + d + e
[10:25:38.404]                   }
[10:25:38.404]                 }, immediateCondition = function(cond) {
[10:25:38.404]                   sendCondition <- ...future.makeSendCondition()
[10:25:38.404]                   sendCondition(cond)
[10:25:38.404]                   muffleCondition <- function (cond, pattern = "^muffle") 
[10:25:38.404]                   {
[10:25:38.404]                     inherits <- base::inherits
[10:25:38.404]                     invokeRestart <- base::invokeRestart
[10:25:38.404]                     is.null <- base::is.null
[10:25:38.404]                     muffled <- FALSE
[10:25:38.404]                     if (inherits(cond, "message")) {
[10:25:38.404]                       muffled <- grepl(pattern, "muffleMessage")
[10:25:38.404]                       if (muffled) 
[10:25:38.404]                         invokeRestart("muffleMessage")
[10:25:38.404]                     }
[10:25:38.404]                     else if (inherits(cond, "warning")) {
[10:25:38.404]                       muffled <- grepl(pattern, "muffleWarning")
[10:25:38.404]                       if (muffled) 
[10:25:38.404]                         invokeRestart("muffleWarning")
[10:25:38.404]                     }
[10:25:38.404]                     else if (inherits(cond, "condition")) {
[10:25:38.404]                       if (!is.null(pattern)) {
[10:25:38.404]                         computeRestarts <- base::computeRestarts
[10:25:38.404]                         grepl <- base::grepl
[10:25:38.404]                         restarts <- computeRestarts(cond)
[10:25:38.404]                         for (restart in restarts) {
[10:25:38.404]                           name <- restart$name
[10:25:38.404]                           if (is.null(name)) 
[10:25:38.404]                             next
[10:25:38.404]                           if (!grepl(pattern, name)) 
[10:25:38.404]                             next
[10:25:38.404]                           invokeRestart(restart)
[10:25:38.404]                           muffled <- TRUE
[10:25:38.404]                           break
[10:25:38.404]                         }
[10:25:38.404]                       }
[10:25:38.404]                     }
[10:25:38.404]                     invisible(muffled)
[10:25:38.404]                   }
[10:25:38.404]                   muffleCondition(cond)
[10:25:38.404]                 })
[10:25:38.404]             }))
[10:25:38.404]             future::FutureResult(value = ...future.value$value, 
[10:25:38.404]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:25:38.404]                   ...future.rng), globalenv = if (FALSE) 
[10:25:38.404]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:25:38.404]                     ...future.globalenv.names))
[10:25:38.404]                 else NULL, started = ...future.startTime, version = "1.8")
[10:25:38.404]         }, condition = base::local({
[10:25:38.404]             c <- base::c
[10:25:38.404]             inherits <- base::inherits
[10:25:38.404]             invokeRestart <- base::invokeRestart
[10:25:38.404]             length <- base::length
[10:25:38.404]             list <- base::list
[10:25:38.404]             seq.int <- base::seq.int
[10:25:38.404]             signalCondition <- base::signalCondition
[10:25:38.404]             sys.calls <- base::sys.calls
[10:25:38.404]             `[[` <- base::`[[`
[10:25:38.404]             `+` <- base::`+`
[10:25:38.404]             `<<-` <- base::`<<-`
[10:25:38.404]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:25:38.404]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:25:38.404]                   3L)]
[10:25:38.404]             }
[10:25:38.404]             function(cond) {
[10:25:38.404]                 is_error <- inherits(cond, "error")
[10:25:38.404]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:25:38.404]                   NULL)
[10:25:38.404]                 if (is_error) {
[10:25:38.404]                   sessionInformation <- function() {
[10:25:38.404]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:25:38.404]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:25:38.404]                       search = base::search(), system = base::Sys.info())
[10:25:38.404]                   }
[10:25:38.404]                   ...future.conditions[[length(...future.conditions) + 
[10:25:38.404]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:25:38.404]                     cond$call), session = sessionInformation(), 
[10:25:38.404]                     timestamp = base::Sys.time(), signaled = 0L)
[10:25:38.404]                   signalCondition(cond)
[10:25:38.404]                 }
[10:25:38.404]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:25:38.404]                 "immediateCondition"))) {
[10:25:38.404]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:25:38.404]                   ...future.conditions[[length(...future.conditions) + 
[10:25:38.404]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:25:38.404]                   if (TRUE && !signal) {
[10:25:38.404]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:25:38.404]                     {
[10:25:38.404]                       inherits <- base::inherits
[10:25:38.404]                       invokeRestart <- base::invokeRestart
[10:25:38.404]                       is.null <- base::is.null
[10:25:38.404]                       muffled <- FALSE
[10:25:38.404]                       if (inherits(cond, "message")) {
[10:25:38.404]                         muffled <- grepl(pattern, "muffleMessage")
[10:25:38.404]                         if (muffled) 
[10:25:38.404]                           invokeRestart("muffleMessage")
[10:25:38.404]                       }
[10:25:38.404]                       else if (inherits(cond, "warning")) {
[10:25:38.404]                         muffled <- grepl(pattern, "muffleWarning")
[10:25:38.404]                         if (muffled) 
[10:25:38.404]                           invokeRestart("muffleWarning")
[10:25:38.404]                       }
[10:25:38.404]                       else if (inherits(cond, "condition")) {
[10:25:38.404]                         if (!is.null(pattern)) {
[10:25:38.404]                           computeRestarts <- base::computeRestarts
[10:25:38.404]                           grepl <- base::grepl
[10:25:38.404]                           restarts <- computeRestarts(cond)
[10:25:38.404]                           for (restart in restarts) {
[10:25:38.404]                             name <- restart$name
[10:25:38.404]                             if (is.null(name)) 
[10:25:38.404]                               next
[10:25:38.404]                             if (!grepl(pattern, name)) 
[10:25:38.404]                               next
[10:25:38.404]                             invokeRestart(restart)
[10:25:38.404]                             muffled <- TRUE
[10:25:38.404]                             break
[10:25:38.404]                           }
[10:25:38.404]                         }
[10:25:38.404]                       }
[10:25:38.404]                       invisible(muffled)
[10:25:38.404]                     }
[10:25:38.404]                     muffleCondition(cond, pattern = "^muffle")
[10:25:38.404]                   }
[10:25:38.404]                 }
[10:25:38.404]                 else {
[10:25:38.404]                   if (TRUE) {
[10:25:38.404]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:25:38.404]                     {
[10:25:38.404]                       inherits <- base::inherits
[10:25:38.404]                       invokeRestart <- base::invokeRestart
[10:25:38.404]                       is.null <- base::is.null
[10:25:38.404]                       muffled <- FALSE
[10:25:38.404]                       if (inherits(cond, "message")) {
[10:25:38.404]                         muffled <- grepl(pattern, "muffleMessage")
[10:25:38.404]                         if (muffled) 
[10:25:38.404]                           invokeRestart("muffleMessage")
[10:25:38.404]                       }
[10:25:38.404]                       else if (inherits(cond, "warning")) {
[10:25:38.404]                         muffled <- grepl(pattern, "muffleWarning")
[10:25:38.404]                         if (muffled) 
[10:25:38.404]                           invokeRestart("muffleWarning")
[10:25:38.404]                       }
[10:25:38.404]                       else if (inherits(cond, "condition")) {
[10:25:38.404]                         if (!is.null(pattern)) {
[10:25:38.404]                           computeRestarts <- base::computeRestarts
[10:25:38.404]                           grepl <- base::grepl
[10:25:38.404]                           restarts <- computeRestarts(cond)
[10:25:38.404]                           for (restart in restarts) {
[10:25:38.404]                             name <- restart$name
[10:25:38.404]                             if (is.null(name)) 
[10:25:38.404]                               next
[10:25:38.404]                             if (!grepl(pattern, name)) 
[10:25:38.404]                               next
[10:25:38.404]                             invokeRestart(restart)
[10:25:38.404]                             muffled <- TRUE
[10:25:38.404]                             break
[10:25:38.404]                           }
[10:25:38.404]                         }
[10:25:38.404]                       }
[10:25:38.404]                       invisible(muffled)
[10:25:38.404]                     }
[10:25:38.404]                     muffleCondition(cond, pattern = "^muffle")
[10:25:38.404]                   }
[10:25:38.404]                 }
[10:25:38.404]             }
[10:25:38.404]         }))
[10:25:38.404]     }, error = function(ex) {
[10:25:38.404]         base::structure(base::list(value = NULL, visible = NULL, 
[10:25:38.404]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:25:38.404]                 ...future.rng), started = ...future.startTime, 
[10:25:38.404]             finished = Sys.time(), session_uuid = NA_character_, 
[10:25:38.404]             version = "1.8"), class = "FutureResult")
[10:25:38.404]     }, finally = {
[10:25:38.404]         if (!identical(...future.workdir, getwd())) 
[10:25:38.404]             setwd(...future.workdir)
[10:25:38.404]         {
[10:25:38.404]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:25:38.404]                 ...future.oldOptions$nwarnings <- NULL
[10:25:38.404]             }
[10:25:38.404]             base::options(...future.oldOptions)
[10:25:38.404]             if (.Platform$OS.type == "windows") {
[10:25:38.404]                 old_names <- names(...future.oldEnvVars)
[10:25:38.404]                 envs <- base::Sys.getenv()
[10:25:38.404]                 names <- names(envs)
[10:25:38.404]                 common <- intersect(names, old_names)
[10:25:38.404]                 added <- setdiff(names, old_names)
[10:25:38.404]                 removed <- setdiff(old_names, names)
[10:25:38.404]                 changed <- common[...future.oldEnvVars[common] != 
[10:25:38.404]                   envs[common]]
[10:25:38.404]                 NAMES <- toupper(changed)
[10:25:38.404]                 args <- list()
[10:25:38.404]                 for (kk in seq_along(NAMES)) {
[10:25:38.404]                   name <- changed[[kk]]
[10:25:38.404]                   NAME <- NAMES[[kk]]
[10:25:38.404]                   if (name != NAME && is.element(NAME, old_names)) 
[10:25:38.404]                     next
[10:25:38.404]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:25:38.404]                 }
[10:25:38.404]                 NAMES <- toupper(added)
[10:25:38.404]                 for (kk in seq_along(NAMES)) {
[10:25:38.404]                   name <- added[[kk]]
[10:25:38.404]                   NAME <- NAMES[[kk]]
[10:25:38.404]                   if (name != NAME && is.element(NAME, old_names)) 
[10:25:38.404]                     next
[10:25:38.404]                   args[[name]] <- ""
[10:25:38.404]                 }
[10:25:38.404]                 NAMES <- toupper(removed)
[10:25:38.404]                 for (kk in seq_along(NAMES)) {
[10:25:38.404]                   name <- removed[[kk]]
[10:25:38.404]                   NAME <- NAMES[[kk]]
[10:25:38.404]                   if (name != NAME && is.element(NAME, old_names)) 
[10:25:38.404]                     next
[10:25:38.404]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:25:38.404]                 }
[10:25:38.404]                 if (length(args) > 0) 
[10:25:38.404]                   base::do.call(base::Sys.setenv, args = args)
[10:25:38.404]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:25:38.404]             }
[10:25:38.404]             else {
[10:25:38.404]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:25:38.404]             }
[10:25:38.404]             {
[10:25:38.404]                 if (base::length(...future.futureOptionsAdded) > 
[10:25:38.404]                   0L) {
[10:25:38.404]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:25:38.404]                   base::names(opts) <- ...future.futureOptionsAdded
[10:25:38.404]                   base::options(opts)
[10:25:38.404]                 }
[10:25:38.404]                 {
[10:25:38.404]                   {
[10:25:38.404]                     base::options(mc.cores = ...future.mc.cores.old)
[10:25:38.404]                     NULL
[10:25:38.404]                   }
[10:25:38.404]                   options(future.plan = NULL)
[10:25:38.404]                   if (is.na(NA_character_)) 
[10:25:38.404]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:25:38.404]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:25:38.404]                   future::plan(list(function (..., workers = availableCores(), 
[10:25:38.404]                     lazy = FALSE, rscript_libs = .libPaths(), 
[10:25:38.404]                     envir = parent.frame()) 
[10:25:38.404]                   {
[10:25:38.404]                     if (is.function(workers)) 
[10:25:38.404]                       workers <- workers()
[10:25:38.404]                     workers <- structure(as.integer(workers), 
[10:25:38.404]                       class = class(workers))
[10:25:38.404]                     stop_if_not(length(workers) == 1, is.finite(workers), 
[10:25:38.404]                       workers >= 1)
[10:25:38.404]                     if (workers == 1L && !inherits(workers, "AsIs")) {
[10:25:38.404]                       return(sequential(..., lazy = TRUE, envir = envir))
[10:25:38.404]                     }
[10:25:38.404]                     future <- MultisessionFuture(..., workers = workers, 
[10:25:38.404]                       lazy = lazy, rscript_libs = rscript_libs, 
[10:25:38.404]                       envir = envir)
[10:25:38.404]                     if (!future$lazy) 
[10:25:38.404]                       future <- run(future)
[10:25:38.404]                     invisible(future)
[10:25:38.404]                   }), .cleanup = FALSE, .init = FALSE)
[10:25:38.404]                 }
[10:25:38.404]             }
[10:25:38.404]         }
[10:25:38.404]     })
[10:25:38.404]     if (TRUE) {
[10:25:38.404]         base::sink(type = "output", split = FALSE)
[10:25:38.404]         if (TRUE) {
[10:25:38.404]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:25:38.404]         }
[10:25:38.404]         else {
[10:25:38.404]             ...future.result["stdout"] <- base::list(NULL)
[10:25:38.404]         }
[10:25:38.404]         base::close(...future.stdout)
[10:25:38.404]         ...future.stdout <- NULL
[10:25:38.404]     }
[10:25:38.404]     ...future.result$conditions <- ...future.conditions
[10:25:38.404]     ...future.result$finished <- base::Sys.time()
[10:25:38.404]     ...future.result
[10:25:38.404] }
[10:25:38.408] MultisessionFuture started
[10:25:38.408] - Launch lazy future ... done
[10:25:38.408] run() for ‘MultisessionFuture’ ... done
[10:25:38.408] result() for ClusterFuture ...
[10:25:38.408] receiveMessageFromWorker() for ClusterFuture ...
[10:25:38.408] - Validating connection of MultisessionFuture
[10:25:38.468] - received message: FutureResult
[10:25:38.469] - Received FutureResult
[10:25:38.469] - Erased future from FutureRegistry
[10:25:38.469] result() for ClusterFuture ...
[10:25:38.469] - result already collected: FutureResult
[10:25:38.469] result() for ClusterFuture ... done
[10:25:38.469] receiveMessageFromWorker() for ClusterFuture ... done
[10:25:38.469] result() for ClusterFuture ... done
[10:25:38.469] result() for ClusterFuture ...
[10:25:38.470] - result already collected: FutureResult
[10:25:38.470] result() for ClusterFuture ... done
a = 10
[10:25:38.470] getGlobalsAndPackages() ...
[10:25:38.470] Searching for globals...
[10:25:38.471] - globals found: [3] ‘{’, ‘+’, ‘a’
[10:25:38.471] Searching for globals ... DONE
[10:25:38.471] Resolving globals: FALSE
[10:25:38.472] The total size of the 1 globals is 56 bytes (56 bytes)
[10:25:38.472] The total size of the 1 globals exported for future expression (‘{; a + 1; }’) is 56 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘a’ (56 bytes of class ‘numeric’)
[10:25:38.472] - globals: [1] ‘a’
[10:25:38.472] 
[10:25:38.472] getGlobalsAndPackages() ... DONE
[10:25:38.473] run() for ‘Future’ ...
[10:25:38.473] - state: ‘created’
[10:25:38.473] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[10:25:38.486] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[10:25:38.487] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[10:25:38.487]   - Field: ‘node’
[10:25:38.487]   - Field: ‘label’
[10:25:38.487]   - Field: ‘local’
[10:25:38.487]   - Field: ‘owner’
[10:25:38.487]   - Field: ‘envir’
[10:25:38.487]   - Field: ‘workers’
[10:25:38.487]   - Field: ‘packages’
[10:25:38.487]   - Field: ‘gc’
[10:25:38.488]   - Field: ‘conditions’
[10:25:38.488]   - Field: ‘persistent’
[10:25:38.488]   - Field: ‘expr’
[10:25:38.488]   - Field: ‘uuid’
[10:25:38.488]   - Field: ‘seed’
[10:25:38.488]   - Field: ‘version’
[10:25:38.488]   - Field: ‘result’
[10:25:38.488]   - Field: ‘asynchronous’
[10:25:38.488]   - Field: ‘calls’
[10:25:38.488]   - Field: ‘globals’
[10:25:38.488]   - Field: ‘stdout’
[10:25:38.489]   - Field: ‘earlySignal’
[10:25:38.489]   - Field: ‘lazy’
[10:25:38.489]   - Field: ‘state’
[10:25:38.489] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[10:25:38.489] - Launch lazy future ...
[10:25:38.489] Packages needed by the future expression (n = 0): <none>
[10:25:38.489] Packages needed by future strategies (n = 0): <none>
[10:25:38.490] {
[10:25:38.490]     {
[10:25:38.490]         {
[10:25:38.490]             ...future.startTime <- base::Sys.time()
[10:25:38.490]             {
[10:25:38.490]                 {
[10:25:38.490]                   {
[10:25:38.490]                     {
[10:25:38.490]                       base::local({
[10:25:38.490]                         has_future <- base::requireNamespace("future", 
[10:25:38.490]                           quietly = TRUE)
[10:25:38.490]                         if (has_future) {
[10:25:38.490]                           ns <- base::getNamespace("future")
[10:25:38.490]                           version <- ns[[".package"]][["version"]]
[10:25:38.490]                           if (is.null(version)) 
[10:25:38.490]                             version <- utils::packageVersion("future")
[10:25:38.490]                         }
[10:25:38.490]                         else {
[10:25:38.490]                           version <- NULL
[10:25:38.490]                         }
[10:25:38.490]                         if (!has_future || version < "1.8.0") {
[10:25:38.490]                           info <- base::c(r_version = base::gsub("R version ", 
[10:25:38.490]                             "", base::R.version$version.string), 
[10:25:38.490]                             platform = base::sprintf("%s (%s-bit)", 
[10:25:38.490]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:25:38.490]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[10:25:38.490]                               "release", "version")], collapse = " "), 
[10:25:38.490]                             hostname = base::Sys.info()[["nodename"]])
[10:25:38.490]                           info <- base::sprintf("%s: %s", base::names(info), 
[10:25:38.490]                             info)
[10:25:38.490]                           info <- base::paste(info, collapse = "; ")
[10:25:38.490]                           if (!has_future) {
[10:25:38.490]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:25:38.490]                               info)
[10:25:38.490]                           }
[10:25:38.490]                           else {
[10:25:38.490]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:25:38.490]                               info, version)
[10:25:38.490]                           }
[10:25:38.490]                           base::stop(msg)
[10:25:38.490]                         }
[10:25:38.490]                       })
[10:25:38.490]                     }
[10:25:38.490]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[10:25:38.490]                     base::options(mc.cores = 1L)
[10:25:38.490]                   }
[10:25:38.490]                   options(future.plan = NULL)
[10:25:38.490]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:25:38.490]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:25:38.490]                 }
[10:25:38.490]                 ...future.workdir <- getwd()
[10:25:38.490]             }
[10:25:38.490]             ...future.oldOptions <- base::as.list(base::.Options)
[10:25:38.490]             ...future.oldEnvVars <- base::Sys.getenv()
[10:25:38.490]         }
[10:25:38.490]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:25:38.490]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[10:25:38.490]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:25:38.490]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:25:38.490]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:25:38.490]             future.stdout.windows.reencode = NULL, width = 80L)
[10:25:38.490]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:25:38.490]             base::names(...future.oldOptions))
[10:25:38.490]     }
[10:25:38.490]     if (FALSE) {
[10:25:38.490]     }
[10:25:38.490]     else {
[10:25:38.490]         if (TRUE) {
[10:25:38.490]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:25:38.490]                 open = "w")
[10:25:38.490]         }
[10:25:38.490]         else {
[10:25:38.490]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:25:38.490]                 windows = "NUL", "/dev/null"), open = "w")
[10:25:38.490]         }
[10:25:38.490]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:25:38.490]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:25:38.490]             base::sink(type = "output", split = FALSE)
[10:25:38.490]             base::close(...future.stdout)
[10:25:38.490]         }, add = TRUE)
[10:25:38.490]     }
[10:25:38.490]     ...future.frame <- base::sys.nframe()
[10:25:38.490]     ...future.conditions <- base::list()
[10:25:38.490]     ...future.rng <- base::globalenv()$.Random.seed
[10:25:38.490]     if (FALSE) {
[10:25:38.490]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:25:38.490]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:25:38.490]     }
[10:25:38.490]     ...future.result <- base::tryCatch({
[10:25:38.490]         base::withCallingHandlers({
[10:25:38.490]             ...future.value <- base::withVisible(base::local({
[10:25:38.490]                 ...future.makeSendCondition <- base::local({
[10:25:38.490]                   sendCondition <- NULL
[10:25:38.490]                   function(frame = 1L) {
[10:25:38.490]                     if (is.function(sendCondition)) 
[10:25:38.490]                       return(sendCondition)
[10:25:38.490]                     ns <- getNamespace("parallel")
[10:25:38.490]                     if (exists("sendData", mode = "function", 
[10:25:38.490]                       envir = ns)) {
[10:25:38.490]                       parallel_sendData <- get("sendData", mode = "function", 
[10:25:38.490]                         envir = ns)
[10:25:38.490]                       envir <- sys.frame(frame)
[10:25:38.490]                       master <- NULL
[10:25:38.490]                       while (!identical(envir, .GlobalEnv) && 
[10:25:38.490]                         !identical(envir, emptyenv())) {
[10:25:38.490]                         if (exists("master", mode = "list", envir = envir, 
[10:25:38.490]                           inherits = FALSE)) {
[10:25:38.490]                           master <- get("master", mode = "list", 
[10:25:38.490]                             envir = envir, inherits = FALSE)
[10:25:38.490]                           if (inherits(master, c("SOCKnode", 
[10:25:38.490]                             "SOCK0node"))) {
[10:25:38.490]                             sendCondition <<- function(cond) {
[10:25:38.490]                               data <- list(type = "VALUE", value = cond, 
[10:25:38.490]                                 success = TRUE)
[10:25:38.490]                               parallel_sendData(master, data)
[10:25:38.490]                             }
[10:25:38.490]                             return(sendCondition)
[10:25:38.490]                           }
[10:25:38.490]                         }
[10:25:38.490]                         frame <- frame + 1L
[10:25:38.490]                         envir <- sys.frame(frame)
[10:25:38.490]                       }
[10:25:38.490]                     }
[10:25:38.490]                     sendCondition <<- function(cond) NULL
[10:25:38.490]                   }
[10:25:38.490]                 })
[10:25:38.490]                 withCallingHandlers({
[10:25:38.490]                   {
[10:25:38.490]                     a + 1
[10:25:38.490]                   }
[10:25:38.490]                 }, immediateCondition = function(cond) {
[10:25:38.490]                   sendCondition <- ...future.makeSendCondition()
[10:25:38.490]                   sendCondition(cond)
[10:25:38.490]                   muffleCondition <- function (cond, pattern = "^muffle") 
[10:25:38.490]                   {
[10:25:38.490]                     inherits <- base::inherits
[10:25:38.490]                     invokeRestart <- base::invokeRestart
[10:25:38.490]                     is.null <- base::is.null
[10:25:38.490]                     muffled <- FALSE
[10:25:38.490]                     if (inherits(cond, "message")) {
[10:25:38.490]                       muffled <- grepl(pattern, "muffleMessage")
[10:25:38.490]                       if (muffled) 
[10:25:38.490]                         invokeRestart("muffleMessage")
[10:25:38.490]                     }
[10:25:38.490]                     else if (inherits(cond, "warning")) {
[10:25:38.490]                       muffled <- grepl(pattern, "muffleWarning")
[10:25:38.490]                       if (muffled) 
[10:25:38.490]                         invokeRestart("muffleWarning")
[10:25:38.490]                     }
[10:25:38.490]                     else if (inherits(cond, "condition")) {
[10:25:38.490]                       if (!is.null(pattern)) {
[10:25:38.490]                         computeRestarts <- base::computeRestarts
[10:25:38.490]                         grepl <- base::grepl
[10:25:38.490]                         restarts <- computeRestarts(cond)
[10:25:38.490]                         for (restart in restarts) {
[10:25:38.490]                           name <- restart$name
[10:25:38.490]                           if (is.null(name)) 
[10:25:38.490]                             next
[10:25:38.490]                           if (!grepl(pattern, name)) 
[10:25:38.490]                             next
[10:25:38.490]                           invokeRestart(restart)
[10:25:38.490]                           muffled <- TRUE
[10:25:38.490]                           break
[10:25:38.490]                         }
[10:25:38.490]                       }
[10:25:38.490]                     }
[10:25:38.490]                     invisible(muffled)
[10:25:38.490]                   }
[10:25:38.490]                   muffleCondition(cond)
[10:25:38.490]                 })
[10:25:38.490]             }))
[10:25:38.490]             future::FutureResult(value = ...future.value$value, 
[10:25:38.490]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:25:38.490]                   ...future.rng), globalenv = if (FALSE) 
[10:25:38.490]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:25:38.490]                     ...future.globalenv.names))
[10:25:38.490]                 else NULL, started = ...future.startTime, version = "1.8")
[10:25:38.490]         }, condition = base::local({
[10:25:38.490]             c <- base::c
[10:25:38.490]             inherits <- base::inherits
[10:25:38.490]             invokeRestart <- base::invokeRestart
[10:25:38.490]             length <- base::length
[10:25:38.490]             list <- base::list
[10:25:38.490]             seq.int <- base::seq.int
[10:25:38.490]             signalCondition <- base::signalCondition
[10:25:38.490]             sys.calls <- base::sys.calls
[10:25:38.490]             `[[` <- base::`[[`
[10:25:38.490]             `+` <- base::`+`
[10:25:38.490]             `<<-` <- base::`<<-`
[10:25:38.490]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:25:38.490]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:25:38.490]                   3L)]
[10:25:38.490]             }
[10:25:38.490]             function(cond) {
[10:25:38.490]                 is_error <- inherits(cond, "error")
[10:25:38.490]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:25:38.490]                   NULL)
[10:25:38.490]                 if (is_error) {
[10:25:38.490]                   sessionInformation <- function() {
[10:25:38.490]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:25:38.490]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:25:38.490]                       search = base::search(), system = base::Sys.info())
[10:25:38.490]                   }
[10:25:38.490]                   ...future.conditions[[length(...future.conditions) + 
[10:25:38.490]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:25:38.490]                     cond$call), session = sessionInformation(), 
[10:25:38.490]                     timestamp = base::Sys.time(), signaled = 0L)
[10:25:38.490]                   signalCondition(cond)
[10:25:38.490]                 }
[10:25:38.490]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:25:38.490]                 "immediateCondition"))) {
[10:25:38.490]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:25:38.490]                   ...future.conditions[[length(...future.conditions) + 
[10:25:38.490]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:25:38.490]                   if (TRUE && !signal) {
[10:25:38.490]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:25:38.490]                     {
[10:25:38.490]                       inherits <- base::inherits
[10:25:38.490]                       invokeRestart <- base::invokeRestart
[10:25:38.490]                       is.null <- base::is.null
[10:25:38.490]                       muffled <- FALSE
[10:25:38.490]                       if (inherits(cond, "message")) {
[10:25:38.490]                         muffled <- grepl(pattern, "muffleMessage")
[10:25:38.490]                         if (muffled) 
[10:25:38.490]                           invokeRestart("muffleMessage")
[10:25:38.490]                       }
[10:25:38.490]                       else if (inherits(cond, "warning")) {
[10:25:38.490]                         muffled <- grepl(pattern, "muffleWarning")
[10:25:38.490]                         if (muffled) 
[10:25:38.490]                           invokeRestart("muffleWarning")
[10:25:38.490]                       }
[10:25:38.490]                       else if (inherits(cond, "condition")) {
[10:25:38.490]                         if (!is.null(pattern)) {
[10:25:38.490]                           computeRestarts <- base::computeRestarts
[10:25:38.490]                           grepl <- base::grepl
[10:25:38.490]                           restarts <- computeRestarts(cond)
[10:25:38.490]                           for (restart in restarts) {
[10:25:38.490]                             name <- restart$name
[10:25:38.490]                             if (is.null(name)) 
[10:25:38.490]                               next
[10:25:38.490]                             if (!grepl(pattern, name)) 
[10:25:38.490]                               next
[10:25:38.490]                             invokeRestart(restart)
[10:25:38.490]                             muffled <- TRUE
[10:25:38.490]                             break
[10:25:38.490]                           }
[10:25:38.490]                         }
[10:25:38.490]                       }
[10:25:38.490]                       invisible(muffled)
[10:25:38.490]                     }
[10:25:38.490]                     muffleCondition(cond, pattern = "^muffle")
[10:25:38.490]                   }
[10:25:38.490]                 }
[10:25:38.490]                 else {
[10:25:38.490]                   if (TRUE) {
[10:25:38.490]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:25:38.490]                     {
[10:25:38.490]                       inherits <- base::inherits
[10:25:38.490]                       invokeRestart <- base::invokeRestart
[10:25:38.490]                       is.null <- base::is.null
[10:25:38.490]                       muffled <- FALSE
[10:25:38.490]                       if (inherits(cond, "message")) {
[10:25:38.490]                         muffled <- grepl(pattern, "muffleMessage")
[10:25:38.490]                         if (muffled) 
[10:25:38.490]                           invokeRestart("muffleMessage")
[10:25:38.490]                       }
[10:25:38.490]                       else if (inherits(cond, "warning")) {
[10:25:38.490]                         muffled <- grepl(pattern, "muffleWarning")
[10:25:38.490]                         if (muffled) 
[10:25:38.490]                           invokeRestart("muffleWarning")
[10:25:38.490]                       }
[10:25:38.490]                       else if (inherits(cond, "condition")) {
[10:25:38.490]                         if (!is.null(pattern)) {
[10:25:38.490]                           computeRestarts <- base::computeRestarts
[10:25:38.490]                           grepl <- base::grepl
[10:25:38.490]                           restarts <- computeRestarts(cond)
[10:25:38.490]                           for (restart in restarts) {
[10:25:38.490]                             name <- restart$name
[10:25:38.490]                             if (is.null(name)) 
[10:25:38.490]                               next
[10:25:38.490]                             if (!grepl(pattern, name)) 
[10:25:38.490]                               next
[10:25:38.490]                             invokeRestart(restart)
[10:25:38.490]                             muffled <- TRUE
[10:25:38.490]                             break
[10:25:38.490]                           }
[10:25:38.490]                         }
[10:25:38.490]                       }
[10:25:38.490]                       invisible(muffled)
[10:25:38.490]                     }
[10:25:38.490]                     muffleCondition(cond, pattern = "^muffle")
[10:25:38.490]                   }
[10:25:38.490]                 }
[10:25:38.490]             }
[10:25:38.490]         }))
[10:25:38.490]     }, error = function(ex) {
[10:25:38.490]         base::structure(base::list(value = NULL, visible = NULL, 
[10:25:38.490]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:25:38.490]                 ...future.rng), started = ...future.startTime, 
[10:25:38.490]             finished = Sys.time(), session_uuid = NA_character_, 
[10:25:38.490]             version = "1.8"), class = "FutureResult")
[10:25:38.490]     }, finally = {
[10:25:38.490]         if (!identical(...future.workdir, getwd())) 
[10:25:38.490]             setwd(...future.workdir)
[10:25:38.490]         {
[10:25:38.490]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:25:38.490]                 ...future.oldOptions$nwarnings <- NULL
[10:25:38.490]             }
[10:25:38.490]             base::options(...future.oldOptions)
[10:25:38.490]             if (.Platform$OS.type == "windows") {
[10:25:38.490]                 old_names <- names(...future.oldEnvVars)
[10:25:38.490]                 envs <- base::Sys.getenv()
[10:25:38.490]                 names <- names(envs)
[10:25:38.490]                 common <- intersect(names, old_names)
[10:25:38.490]                 added <- setdiff(names, old_names)
[10:25:38.490]                 removed <- setdiff(old_names, names)
[10:25:38.490]                 changed <- common[...future.oldEnvVars[common] != 
[10:25:38.490]                   envs[common]]
[10:25:38.490]                 NAMES <- toupper(changed)
[10:25:38.490]                 args <- list()
[10:25:38.490]                 for (kk in seq_along(NAMES)) {
[10:25:38.490]                   name <- changed[[kk]]
[10:25:38.490]                   NAME <- NAMES[[kk]]
[10:25:38.490]                   if (name != NAME && is.element(NAME, old_names)) 
[10:25:38.490]                     next
[10:25:38.490]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:25:38.490]                 }
[10:25:38.490]                 NAMES <- toupper(added)
[10:25:38.490]                 for (kk in seq_along(NAMES)) {
[10:25:38.490]                   name <- added[[kk]]
[10:25:38.490]                   NAME <- NAMES[[kk]]
[10:25:38.490]                   if (name != NAME && is.element(NAME, old_names)) 
[10:25:38.490]                     next
[10:25:38.490]                   args[[name]] <- ""
[10:25:38.490]                 }
[10:25:38.490]                 NAMES <- toupper(removed)
[10:25:38.490]                 for (kk in seq_along(NAMES)) {
[10:25:38.490]                   name <- removed[[kk]]
[10:25:38.490]                   NAME <- NAMES[[kk]]
[10:25:38.490]                   if (name != NAME && is.element(NAME, old_names)) 
[10:25:38.490]                     next
[10:25:38.490]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:25:38.490]                 }
[10:25:38.490]                 if (length(args) > 0) 
[10:25:38.490]                   base::do.call(base::Sys.setenv, args = args)
[10:25:38.490]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:25:38.490]             }
[10:25:38.490]             else {
[10:25:38.490]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:25:38.490]             }
[10:25:38.490]             {
[10:25:38.490]                 if (base::length(...future.futureOptionsAdded) > 
[10:25:38.490]                   0L) {
[10:25:38.490]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:25:38.490]                   base::names(opts) <- ...future.futureOptionsAdded
[10:25:38.490]                   base::options(opts)
[10:25:38.490]                 }
[10:25:38.490]                 {
[10:25:38.490]                   {
[10:25:38.490]                     base::options(mc.cores = ...future.mc.cores.old)
[10:25:38.490]                     NULL
[10:25:38.490]                   }
[10:25:38.490]                   options(future.plan = NULL)
[10:25:38.490]                   if (is.na(NA_character_)) 
[10:25:38.490]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:25:38.490]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:25:38.490]                   future::plan(list(function (..., workers = availableCores(), 
[10:25:38.490]                     lazy = FALSE, rscript_libs = .libPaths(), 
[10:25:38.490]                     envir = parent.frame()) 
[10:25:38.490]                   {
[10:25:38.490]                     if (is.function(workers)) 
[10:25:38.490]                       workers <- workers()
[10:25:38.490]                     workers <- structure(as.integer(workers), 
[10:25:38.490]                       class = class(workers))
[10:25:38.490]                     stop_if_not(length(workers) == 1, is.finite(workers), 
[10:25:38.490]                       workers >= 1)
[10:25:38.490]                     if (workers == 1L && !inherits(workers, "AsIs")) {
[10:25:38.490]                       return(sequential(..., lazy = TRUE, envir = envir))
[10:25:38.490]                     }
[10:25:38.490]                     future <- MultisessionFuture(..., workers = workers, 
[10:25:38.490]                       lazy = lazy, rscript_libs = rscript_libs, 
[10:25:38.490]                       envir = envir)
[10:25:38.490]                     if (!future$lazy) 
[10:25:38.490]                       future <- run(future)
[10:25:38.490]                     invisible(future)
[10:25:38.490]                   }), .cleanup = FALSE, .init = FALSE)
[10:25:38.490]                 }
[10:25:38.490]             }
[10:25:38.490]         }
[10:25:38.490]     })
[10:25:38.490]     if (TRUE) {
[10:25:38.490]         base::sink(type = "output", split = FALSE)
[10:25:38.490]         if (TRUE) {
[10:25:38.490]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:25:38.490]         }
[10:25:38.490]         else {
[10:25:38.490]             ...future.result["stdout"] <- base::list(NULL)
[10:25:38.490]         }
[10:25:38.490]         base::close(...future.stdout)
[10:25:38.490]         ...future.stdout <- NULL
[10:25:38.490]     }
[10:25:38.490]     ...future.result$conditions <- ...future.conditions
[10:25:38.490]     ...future.result$finished <- base::Sys.time()
[10:25:38.490]     ...future.result
[10:25:38.490] }
[10:25:38.492] Exporting 1 global objects (56 bytes) to cluster node #1 ...
[10:25:38.493] Exporting ‘a’ (56 bytes) to cluster node #1 ...
[10:25:38.493] Exporting ‘a’ (56 bytes) to cluster node #1 ... DONE
[10:25:38.493] Exporting 1 global objects (56 bytes) to cluster node #1 ... DONE
[10:25:38.494] MultisessionFuture started
[10:25:38.494] - Launch lazy future ... done
[10:25:38.494] run() for ‘MultisessionFuture’ ... done
[10:25:38.494] result() for ClusterFuture ...
[10:25:38.494] receiveMessageFromWorker() for ClusterFuture ...
[10:25:38.494] - Validating connection of MultisessionFuture
[10:25:38.542] - received message: FutureResult
[10:25:38.542] - Received FutureResult
[10:25:38.542] - Erased future from FutureRegistry
[10:25:38.542] result() for ClusterFuture ...
[10:25:38.543] - result already collected: FutureResult
[10:25:38.543] result() for ClusterFuture ... done
[10:25:38.543] receiveMessageFromWorker() for ClusterFuture ... done
[10:25:38.543] result() for ClusterFuture ... done
[10:25:38.543] result() for ClusterFuture ...
[10:25:38.543] - result already collected: FutureResult
[10:25:38.543] result() for ClusterFuture ... done
b = 11
*** %<-% with ‘multisession’ futures ... DONE
Testing with 2 cores ... DONE
> 
> message("*** %<-% ... DONE")
*** %<-% ... DONE
> 
> source("incl/end.R")
[10:25:38.544] plan(): Setting new future strategy stack:
[10:25:38.544] List of future strategies:
[10:25:38.544] 1. FutureStrategy:
[10:25:38.544]    - args: function (..., envir = parent.frame())
[10:25:38.544]    - tweaked: FALSE
[10:25:38.544]    - call: future::plan(oplan)
[10:25:38.545] plan(): nbrOfWorkers() = 1
> 
