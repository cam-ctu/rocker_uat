
R version 4.3.2 (2023-10-31) -- "Eye Holes"
Copyright (C) 2023 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> source("incl/start.R")
[13:22:54.077] plan(): Setting new future strategy stack:
[13:22:54.077] List of future strategies:
[13:22:54.077] 1. sequential:
[13:22:54.077]    - args: function (..., envir = parent.frame())
[13:22:54.077]    - tweaked: FALSE
[13:22:54.077]    - call: future::plan("sequential")
[13:22:54.093] plan(): nbrOfWorkers() = 1
> 
> ## BACKWARD COMPATIBILITY
> if (getRversion() < "3.2.0") {
+   names <- function(x) if (is.environment(x)) ls(envir = x) else base::names(x)
+ }
> 
> message("*** %<-% to environment ...")
*** %<-% to environment ...
> 
> ## - - - - - - - - - - - - - - - - - - - - - - - - - - - -
> ## Async delayed assignment (infix operator)
> ## - - - - - - - - - - - - - - - - - - - - - - - - - - - -
> z <- new.env()
> stopifnot(length(names(z)) == 0L)
> 
> message("*** %<-% to environment: Assign by index (not allowed)")
*** %<-% to environment: Assign by index (not allowed)
> res <- try(z[[1]] %<-% { 2 } %lazy% TRUE, silent = TRUE)
> stopifnot(inherits(res, "try-error"))
> 
> message("*** %<-% to environment: Assign by name (new)")
*** %<-% to environment: Assign by name (new)
> z$B %<-% { TRUE }  %lazy% TRUE
[13:22:54.106] getGlobalsAndPackages() ...
[13:22:54.106] Searching for globals...
[13:22:54.109] - globals found: [1] ‘{’
[13:22:54.109] Searching for globals ... DONE
[13:22:54.110] Resolving globals: FALSE
[13:22:54.110] 
[13:22:54.110] 
[13:22:54.110] getGlobalsAndPackages() ... DONE
> stopifnot(length(z) == 2) # sic!
> stopifnot("B" %in% ls(z))
> 
> y <- as.list(z)
[13:22:54.111] run() for ‘Future’ ...
[13:22:54.112] - state: ‘created’
[13:22:54.112] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[13:22:54.112] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[13:22:54.112] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[13:22:54.112]   - Field: ‘label’
[13:22:54.113]   - Field: ‘local’
[13:22:54.113]   - Field: ‘owner’
[13:22:54.113]   - Field: ‘envir’
[13:22:54.113]   - Field: ‘packages’
[13:22:54.113]   - Field: ‘gc’
[13:22:54.113]   - Field: ‘conditions’
[13:22:54.113]   - Field: ‘expr’
[13:22:54.113]   - Field: ‘uuid’
[13:22:54.113]   - Field: ‘seed’
[13:22:54.113]   - Field: ‘version’
[13:22:54.114]   - Field: ‘result’
[13:22:54.114]   - Field: ‘asynchronous’
[13:22:54.114]   - Field: ‘calls’
[13:22:54.114]   - Field: ‘globals’
[13:22:54.114]   - Field: ‘stdout’
[13:22:54.114]   - Field: ‘earlySignal’
[13:22:54.114]   - Field: ‘lazy’
[13:22:54.114]   - Field: ‘state’
[13:22:54.114] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[13:22:54.114] - Launch lazy future ...
[13:22:54.115] Packages needed by the future expression (n = 0): <none>
[13:22:54.115] Packages needed by future strategies (n = 0): <none>
[13:22:54.116] {
[13:22:54.116]     {
[13:22:54.116]         {
[13:22:54.116]             ...future.startTime <- base::Sys.time()
[13:22:54.116]             {
[13:22:54.116]                 {
[13:22:54.116]                   {
[13:22:54.116]                     base::local({
[13:22:54.116]                       has_future <- base::requireNamespace("future", 
[13:22:54.116]                         quietly = TRUE)
[13:22:54.116]                       if (has_future) {
[13:22:54.116]                         ns <- base::getNamespace("future")
[13:22:54.116]                         version <- ns[[".package"]][["version"]]
[13:22:54.116]                         if (is.null(version)) 
[13:22:54.116]                           version <- utils::packageVersion("future")
[13:22:54.116]                       }
[13:22:54.116]                       else {
[13:22:54.116]                         version <- NULL
[13:22:54.116]                       }
[13:22:54.116]                       if (!has_future || version < "1.8.0") {
[13:22:54.116]                         info <- base::c(r_version = base::gsub("R version ", 
[13:22:54.116]                           "", base::R.version$version.string), 
[13:22:54.116]                           platform = base::sprintf("%s (%s-bit)", 
[13:22:54.116]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:22:54.116]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[13:22:54.116]                             "release", "version")], collapse = " "), 
[13:22:54.116]                           hostname = base::Sys.info()[["nodename"]])
[13:22:54.116]                         info <- base::sprintf("%s: %s", base::names(info), 
[13:22:54.116]                           info)
[13:22:54.116]                         info <- base::paste(info, collapse = "; ")
[13:22:54.116]                         if (!has_future) {
[13:22:54.116]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:22:54.116]                             info)
[13:22:54.116]                         }
[13:22:54.116]                         else {
[13:22:54.116]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:22:54.116]                             info, version)
[13:22:54.116]                         }
[13:22:54.116]                         base::stop(msg)
[13:22:54.116]                       }
[13:22:54.116]                     })
[13:22:54.116]                   }
[13:22:54.116]                   options(future.plan = NULL)
[13:22:54.116]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:22:54.116]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:22:54.116]                 }
[13:22:54.116]                 ...future.workdir <- getwd()
[13:22:54.116]             }
[13:22:54.116]             ...future.oldOptions <- base::as.list(base::.Options)
[13:22:54.116]             ...future.oldEnvVars <- base::Sys.getenv()
[13:22:54.116]         }
[13:22:54.116]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:22:54.116]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:22:54.116]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:22:54.116]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:22:54.116]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:22:54.116]             future.stdout.windows.reencode = NULL, width = 80L)
[13:22:54.116]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:22:54.116]             base::names(...future.oldOptions))
[13:22:54.116]     }
[13:22:54.116]     if (FALSE) {
[13:22:54.116]     }
[13:22:54.116]     else {
[13:22:54.116]         if (TRUE) {
[13:22:54.116]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:22:54.116]                 open = "w")
[13:22:54.116]         }
[13:22:54.116]         else {
[13:22:54.116]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:22:54.116]                 windows = "NUL", "/dev/null"), open = "w")
[13:22:54.116]         }
[13:22:54.116]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:22:54.116]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:22:54.116]             base::sink(type = "output", split = FALSE)
[13:22:54.116]             base::close(...future.stdout)
[13:22:54.116]         }, add = TRUE)
[13:22:54.116]     }
[13:22:54.116]     ...future.frame <- base::sys.nframe()
[13:22:54.116]     ...future.conditions <- base::list()
[13:22:54.116]     ...future.rng <- base::globalenv()$.Random.seed
[13:22:54.116]     if (FALSE) {
[13:22:54.116]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:22:54.116]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:22:54.116]     }
[13:22:54.116]     ...future.result <- base::tryCatch({
[13:22:54.116]         base::withCallingHandlers({
[13:22:54.116]             ...future.value <- base::withVisible(base::local({
[13:22:54.116]                 TRUE
[13:22:54.116]             }))
[13:22:54.116]             future::FutureResult(value = ...future.value$value, 
[13:22:54.116]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:22:54.116]                   ...future.rng), globalenv = if (FALSE) 
[13:22:54.116]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:22:54.116]                     ...future.globalenv.names))
[13:22:54.116]                 else NULL, started = ...future.startTime, version = "1.8")
[13:22:54.116]         }, condition = base::local({
[13:22:54.116]             c <- base::c
[13:22:54.116]             inherits <- base::inherits
[13:22:54.116]             invokeRestart <- base::invokeRestart
[13:22:54.116]             length <- base::length
[13:22:54.116]             list <- base::list
[13:22:54.116]             seq.int <- base::seq.int
[13:22:54.116]             signalCondition <- base::signalCondition
[13:22:54.116]             sys.calls <- base::sys.calls
[13:22:54.116]             `[[` <- base::`[[`
[13:22:54.116]             `+` <- base::`+`
[13:22:54.116]             `<<-` <- base::`<<-`
[13:22:54.116]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:22:54.116]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:22:54.116]                   3L)]
[13:22:54.116]             }
[13:22:54.116]             function(cond) {
[13:22:54.116]                 is_error <- inherits(cond, "error")
[13:22:54.116]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:22:54.116]                   NULL)
[13:22:54.116]                 if (is_error) {
[13:22:54.116]                   sessionInformation <- function() {
[13:22:54.116]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:22:54.116]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:22:54.116]                       search = base::search(), system = base::Sys.info())
[13:22:54.116]                   }
[13:22:54.116]                   ...future.conditions[[length(...future.conditions) + 
[13:22:54.116]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:22:54.116]                     cond$call), session = sessionInformation(), 
[13:22:54.116]                     timestamp = base::Sys.time(), signaled = 0L)
[13:22:54.116]                   signalCondition(cond)
[13:22:54.116]                 }
[13:22:54.116]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:22:54.116]                 "immediateCondition"))) {
[13:22:54.116]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:22:54.116]                   ...future.conditions[[length(...future.conditions) + 
[13:22:54.116]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:22:54.116]                   if (TRUE && !signal) {
[13:22:54.116]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:22:54.116]                     {
[13:22:54.116]                       inherits <- base::inherits
[13:22:54.116]                       invokeRestart <- base::invokeRestart
[13:22:54.116]                       is.null <- base::is.null
[13:22:54.116]                       muffled <- FALSE
[13:22:54.116]                       if (inherits(cond, "message")) {
[13:22:54.116]                         muffled <- grepl(pattern, "muffleMessage")
[13:22:54.116]                         if (muffled) 
[13:22:54.116]                           invokeRestart("muffleMessage")
[13:22:54.116]                       }
[13:22:54.116]                       else if (inherits(cond, "warning")) {
[13:22:54.116]                         muffled <- grepl(pattern, "muffleWarning")
[13:22:54.116]                         if (muffled) 
[13:22:54.116]                           invokeRestart("muffleWarning")
[13:22:54.116]                       }
[13:22:54.116]                       else if (inherits(cond, "condition")) {
[13:22:54.116]                         if (!is.null(pattern)) {
[13:22:54.116]                           computeRestarts <- base::computeRestarts
[13:22:54.116]                           grepl <- base::grepl
[13:22:54.116]                           restarts <- computeRestarts(cond)
[13:22:54.116]                           for (restart in restarts) {
[13:22:54.116]                             name <- restart$name
[13:22:54.116]                             if (is.null(name)) 
[13:22:54.116]                               next
[13:22:54.116]                             if (!grepl(pattern, name)) 
[13:22:54.116]                               next
[13:22:54.116]                             invokeRestart(restart)
[13:22:54.116]                             muffled <- TRUE
[13:22:54.116]                             break
[13:22:54.116]                           }
[13:22:54.116]                         }
[13:22:54.116]                       }
[13:22:54.116]                       invisible(muffled)
[13:22:54.116]                     }
[13:22:54.116]                     muffleCondition(cond, pattern = "^muffle")
[13:22:54.116]                   }
[13:22:54.116]                 }
[13:22:54.116]                 else {
[13:22:54.116]                   if (TRUE) {
[13:22:54.116]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:22:54.116]                     {
[13:22:54.116]                       inherits <- base::inherits
[13:22:54.116]                       invokeRestart <- base::invokeRestart
[13:22:54.116]                       is.null <- base::is.null
[13:22:54.116]                       muffled <- FALSE
[13:22:54.116]                       if (inherits(cond, "message")) {
[13:22:54.116]                         muffled <- grepl(pattern, "muffleMessage")
[13:22:54.116]                         if (muffled) 
[13:22:54.116]                           invokeRestart("muffleMessage")
[13:22:54.116]                       }
[13:22:54.116]                       else if (inherits(cond, "warning")) {
[13:22:54.116]                         muffled <- grepl(pattern, "muffleWarning")
[13:22:54.116]                         if (muffled) 
[13:22:54.116]                           invokeRestart("muffleWarning")
[13:22:54.116]                       }
[13:22:54.116]                       else if (inherits(cond, "condition")) {
[13:22:54.116]                         if (!is.null(pattern)) {
[13:22:54.116]                           computeRestarts <- base::computeRestarts
[13:22:54.116]                           grepl <- base::grepl
[13:22:54.116]                           restarts <- computeRestarts(cond)
[13:22:54.116]                           for (restart in restarts) {
[13:22:54.116]                             name <- restart$name
[13:22:54.116]                             if (is.null(name)) 
[13:22:54.116]                               next
[13:22:54.116]                             if (!grepl(pattern, name)) 
[13:22:54.116]                               next
[13:22:54.116]                             invokeRestart(restart)
[13:22:54.116]                             muffled <- TRUE
[13:22:54.116]                             break
[13:22:54.116]                           }
[13:22:54.116]                         }
[13:22:54.116]                       }
[13:22:54.116]                       invisible(muffled)
[13:22:54.116]                     }
[13:22:54.116]                     muffleCondition(cond, pattern = "^muffle")
[13:22:54.116]                   }
[13:22:54.116]                 }
[13:22:54.116]             }
[13:22:54.116]         }))
[13:22:54.116]     }, error = function(ex) {
[13:22:54.116]         base::structure(base::list(value = NULL, visible = NULL, 
[13:22:54.116]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:22:54.116]                 ...future.rng), started = ...future.startTime, 
[13:22:54.116]             finished = Sys.time(), session_uuid = NA_character_, 
[13:22:54.116]             version = "1.8"), class = "FutureResult")
[13:22:54.116]     }, finally = {
[13:22:54.116]         if (!identical(...future.workdir, getwd())) 
[13:22:54.116]             setwd(...future.workdir)
[13:22:54.116]         {
[13:22:54.116]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:22:54.116]                 ...future.oldOptions$nwarnings <- NULL
[13:22:54.116]             }
[13:22:54.116]             base::options(...future.oldOptions)
[13:22:54.116]             if (.Platform$OS.type == "windows") {
[13:22:54.116]                 old_names <- names(...future.oldEnvVars)
[13:22:54.116]                 envs <- base::Sys.getenv()
[13:22:54.116]                 names <- names(envs)
[13:22:54.116]                 common <- intersect(names, old_names)
[13:22:54.116]                 added <- setdiff(names, old_names)
[13:22:54.116]                 removed <- setdiff(old_names, names)
[13:22:54.116]                 changed <- common[...future.oldEnvVars[common] != 
[13:22:54.116]                   envs[common]]
[13:22:54.116]                 NAMES <- toupper(changed)
[13:22:54.116]                 args <- list()
[13:22:54.116]                 for (kk in seq_along(NAMES)) {
[13:22:54.116]                   name <- changed[[kk]]
[13:22:54.116]                   NAME <- NAMES[[kk]]
[13:22:54.116]                   if (name != NAME && is.element(NAME, old_names)) 
[13:22:54.116]                     next
[13:22:54.116]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:22:54.116]                 }
[13:22:54.116]                 NAMES <- toupper(added)
[13:22:54.116]                 for (kk in seq_along(NAMES)) {
[13:22:54.116]                   name <- added[[kk]]
[13:22:54.116]                   NAME <- NAMES[[kk]]
[13:22:54.116]                   if (name != NAME && is.element(NAME, old_names)) 
[13:22:54.116]                     next
[13:22:54.116]                   args[[name]] <- ""
[13:22:54.116]                 }
[13:22:54.116]                 NAMES <- toupper(removed)
[13:22:54.116]                 for (kk in seq_along(NAMES)) {
[13:22:54.116]                   name <- removed[[kk]]
[13:22:54.116]                   NAME <- NAMES[[kk]]
[13:22:54.116]                   if (name != NAME && is.element(NAME, old_names)) 
[13:22:54.116]                     next
[13:22:54.116]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:22:54.116]                 }
[13:22:54.116]                 if (length(args) > 0) 
[13:22:54.116]                   base::do.call(base::Sys.setenv, args = args)
[13:22:54.116]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:22:54.116]             }
[13:22:54.116]             else {
[13:22:54.116]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:22:54.116]             }
[13:22:54.116]             {
[13:22:54.116]                 if (base::length(...future.futureOptionsAdded) > 
[13:22:54.116]                   0L) {
[13:22:54.116]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:22:54.116]                   base::names(opts) <- ...future.futureOptionsAdded
[13:22:54.116]                   base::options(opts)
[13:22:54.116]                 }
[13:22:54.116]                 {
[13:22:54.116]                   {
[13:22:54.116]                     NULL
[13:22:54.116]                     RNGkind("Mersenne-Twister")
[13:22:54.116]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[13:22:54.116]                       inherits = FALSE)
[13:22:54.116]                   }
[13:22:54.116]                   options(future.plan = NULL)
[13:22:54.116]                   if (is.na(NA_character_)) 
[13:22:54.116]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:22:54.116]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:22:54.116]                   future::plan(list(function (..., envir = parent.frame()) 
[13:22:54.116]                   {
[13:22:54.116]                     future <- SequentialFuture(..., envir = envir)
[13:22:54.116]                     if (!future$lazy) 
[13:22:54.116]                       future <- run(future)
[13:22:54.116]                     invisible(future)
[13:22:54.116]                   }), .cleanup = FALSE, .init = FALSE)
[13:22:54.116]                 }
[13:22:54.116]             }
[13:22:54.116]         }
[13:22:54.116]     })
[13:22:54.116]     if (TRUE) {
[13:22:54.116]         base::sink(type = "output", split = FALSE)
[13:22:54.116]         if (TRUE) {
[13:22:54.116]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:22:54.116]         }
[13:22:54.116]         else {
[13:22:54.116]             ...future.result["stdout"] <- base::list(NULL)
[13:22:54.116]         }
[13:22:54.116]         base::close(...future.stdout)
[13:22:54.116]         ...future.stdout <- NULL
[13:22:54.116]     }
[13:22:54.116]     ...future.result$conditions <- ...future.conditions
[13:22:54.116]     ...future.result$finished <- base::Sys.time()
[13:22:54.116]     ...future.result
[13:22:54.116] }
[13:22:54.118] plan(): Setting new future strategy stack:
[13:22:54.118] List of future strategies:
[13:22:54.118] 1. sequential:
[13:22:54.118]    - args: function (..., envir = parent.frame())
[13:22:54.118]    - tweaked: FALSE
[13:22:54.118]    - call: NULL
[13:22:54.119] plan(): nbrOfWorkers() = 1
[13:22:54.120] plan(): Setting new future strategy stack:
[13:22:54.120] List of future strategies:
[13:22:54.120] 1. sequential:
[13:22:54.120]    - args: function (..., envir = parent.frame())
[13:22:54.120]    - tweaked: FALSE
[13:22:54.120]    - call: future::plan("sequential")
[13:22:54.121] plan(): nbrOfWorkers() = 1
[13:22:54.121] SequentialFuture started (and completed)
[13:22:54.121] - Launch lazy future ... done
[13:22:54.121] run() for ‘SequentialFuture’ ... done
> str(y)
List of 1
 $ B: logi TRUE
> stopifnot(length(y) == 1)
> stopifnot(identical(names(y), "B"))
> 
> 
> message("*** %<-% to environment: Potential task name clashes")
*** %<-% to environment: Potential task name clashes
> u <- new.env()
> u$a %<-% { 1 } %lazy% TRUE
[13:22:54.125] getGlobalsAndPackages() ...
[13:22:54.125] Searching for globals...
[13:22:54.126] - globals found: [1] ‘{’
[13:22:54.126] Searching for globals ... DONE
[13:22:54.126] Resolving globals: FALSE
[13:22:54.126] 
[13:22:54.126] 
[13:22:54.126] getGlobalsAndPackages() ... DONE
> stopifnot(length(u) == 2)
> stopifnot("a" %in% names(u))
> fu <- futureOf(u$a)
> 
> v <- new.env()
> v$a %<-% { 2 } %lazy% TRUE
[13:22:54.127] getGlobalsAndPackages() ...
[13:22:54.127] Searching for globals...
[13:22:54.128] - globals found: [1] ‘{’
[13:22:54.128] Searching for globals ... DONE
[13:22:54.128] Resolving globals: FALSE
[13:22:54.128] 
[13:22:54.129] 
[13:22:54.129] getGlobalsAndPackages() ... DONE
> stopifnot(length(v) == 2)
> stopifnot("a" %in% names(v))
> fv <- futureOf(v$a)
> stopifnot(!identical(fu, fv))
> 
> fu <- futureOf(u$a)
> stopifnot(!identical(fu, fv))
> 
> stopifnot(identical(u$a, 1))
[13:22:54.129] run() for ‘Future’ ...
[13:22:54.129] - state: ‘created’
[13:22:54.130] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[13:22:54.130] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[13:22:54.130] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[13:22:54.130]   - Field: ‘label’
[13:22:54.130]   - Field: ‘local’
[13:22:54.130]   - Field: ‘owner’
[13:22:54.130]   - Field: ‘envir’
[13:22:54.131]   - Field: ‘packages’
[13:22:54.131]   - Field: ‘gc’
[13:22:54.131]   - Field: ‘conditions’
[13:22:54.131]   - Field: ‘expr’
[13:22:54.131]   - Field: ‘uuid’
[13:22:54.131]   - Field: ‘seed’
[13:22:54.131]   - Field: ‘version’
[13:22:54.131]   - Field: ‘result’
[13:22:54.131]   - Field: ‘asynchronous’
[13:22:54.131]   - Field: ‘calls’
[13:22:54.131]   - Field: ‘globals’
[13:22:54.132]   - Field: ‘stdout’
[13:22:54.132]   - Field: ‘earlySignal’
[13:22:54.132]   - Field: ‘lazy’
[13:22:54.132]   - Field: ‘state’
[13:22:54.132] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[13:22:54.132] - Launch lazy future ...
[13:22:54.132] Packages needed by the future expression (n = 0): <none>
[13:22:54.132] Packages needed by future strategies (n = 0): <none>
[13:22:54.133] {
[13:22:54.133]     {
[13:22:54.133]         {
[13:22:54.133]             ...future.startTime <- base::Sys.time()
[13:22:54.133]             {
[13:22:54.133]                 {
[13:22:54.133]                   {
[13:22:54.133]                     base::local({
[13:22:54.133]                       has_future <- base::requireNamespace("future", 
[13:22:54.133]                         quietly = TRUE)
[13:22:54.133]                       if (has_future) {
[13:22:54.133]                         ns <- base::getNamespace("future")
[13:22:54.133]                         version <- ns[[".package"]][["version"]]
[13:22:54.133]                         if (is.null(version)) 
[13:22:54.133]                           version <- utils::packageVersion("future")
[13:22:54.133]                       }
[13:22:54.133]                       else {
[13:22:54.133]                         version <- NULL
[13:22:54.133]                       }
[13:22:54.133]                       if (!has_future || version < "1.8.0") {
[13:22:54.133]                         info <- base::c(r_version = base::gsub("R version ", 
[13:22:54.133]                           "", base::R.version$version.string), 
[13:22:54.133]                           platform = base::sprintf("%s (%s-bit)", 
[13:22:54.133]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:22:54.133]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[13:22:54.133]                             "release", "version")], collapse = " "), 
[13:22:54.133]                           hostname = base::Sys.info()[["nodename"]])
[13:22:54.133]                         info <- base::sprintf("%s: %s", base::names(info), 
[13:22:54.133]                           info)
[13:22:54.133]                         info <- base::paste(info, collapse = "; ")
[13:22:54.133]                         if (!has_future) {
[13:22:54.133]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:22:54.133]                             info)
[13:22:54.133]                         }
[13:22:54.133]                         else {
[13:22:54.133]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:22:54.133]                             info, version)
[13:22:54.133]                         }
[13:22:54.133]                         base::stop(msg)
[13:22:54.133]                       }
[13:22:54.133]                     })
[13:22:54.133]                   }
[13:22:54.133]                   options(future.plan = NULL)
[13:22:54.133]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:22:54.133]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:22:54.133]                 }
[13:22:54.133]                 ...future.workdir <- getwd()
[13:22:54.133]             }
[13:22:54.133]             ...future.oldOptions <- base::as.list(base::.Options)
[13:22:54.133]             ...future.oldEnvVars <- base::Sys.getenv()
[13:22:54.133]         }
[13:22:54.133]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:22:54.133]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:22:54.133]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:22:54.133]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:22:54.133]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:22:54.133]             future.stdout.windows.reencode = NULL, width = 80L)
[13:22:54.133]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:22:54.133]             base::names(...future.oldOptions))
[13:22:54.133]     }
[13:22:54.133]     if (FALSE) {
[13:22:54.133]     }
[13:22:54.133]     else {
[13:22:54.133]         if (TRUE) {
[13:22:54.133]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:22:54.133]                 open = "w")
[13:22:54.133]         }
[13:22:54.133]         else {
[13:22:54.133]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:22:54.133]                 windows = "NUL", "/dev/null"), open = "w")
[13:22:54.133]         }
[13:22:54.133]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:22:54.133]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:22:54.133]             base::sink(type = "output", split = FALSE)
[13:22:54.133]             base::close(...future.stdout)
[13:22:54.133]         }, add = TRUE)
[13:22:54.133]     }
[13:22:54.133]     ...future.frame <- base::sys.nframe()
[13:22:54.133]     ...future.conditions <- base::list()
[13:22:54.133]     ...future.rng <- base::globalenv()$.Random.seed
[13:22:54.133]     if (FALSE) {
[13:22:54.133]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:22:54.133]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:22:54.133]     }
[13:22:54.133]     ...future.result <- base::tryCatch({
[13:22:54.133]         base::withCallingHandlers({
[13:22:54.133]             ...future.value <- base::withVisible(base::local({
[13:22:54.133]                 1
[13:22:54.133]             }))
[13:22:54.133]             future::FutureResult(value = ...future.value$value, 
[13:22:54.133]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:22:54.133]                   ...future.rng), globalenv = if (FALSE) 
[13:22:54.133]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:22:54.133]                     ...future.globalenv.names))
[13:22:54.133]                 else NULL, started = ...future.startTime, version = "1.8")
[13:22:54.133]         }, condition = base::local({
[13:22:54.133]             c <- base::c
[13:22:54.133]             inherits <- base::inherits
[13:22:54.133]             invokeRestart <- base::invokeRestart
[13:22:54.133]             length <- base::length
[13:22:54.133]             list <- base::list
[13:22:54.133]             seq.int <- base::seq.int
[13:22:54.133]             signalCondition <- base::signalCondition
[13:22:54.133]             sys.calls <- base::sys.calls
[13:22:54.133]             `[[` <- base::`[[`
[13:22:54.133]             `+` <- base::`+`
[13:22:54.133]             `<<-` <- base::`<<-`
[13:22:54.133]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:22:54.133]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:22:54.133]                   3L)]
[13:22:54.133]             }
[13:22:54.133]             function(cond) {
[13:22:54.133]                 is_error <- inherits(cond, "error")
[13:22:54.133]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:22:54.133]                   NULL)
[13:22:54.133]                 if (is_error) {
[13:22:54.133]                   sessionInformation <- function() {
[13:22:54.133]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:22:54.133]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:22:54.133]                       search = base::search(), system = base::Sys.info())
[13:22:54.133]                   }
[13:22:54.133]                   ...future.conditions[[length(...future.conditions) + 
[13:22:54.133]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:22:54.133]                     cond$call), session = sessionInformation(), 
[13:22:54.133]                     timestamp = base::Sys.time(), signaled = 0L)
[13:22:54.133]                   signalCondition(cond)
[13:22:54.133]                 }
[13:22:54.133]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:22:54.133]                 "immediateCondition"))) {
[13:22:54.133]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:22:54.133]                   ...future.conditions[[length(...future.conditions) + 
[13:22:54.133]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:22:54.133]                   if (TRUE && !signal) {
[13:22:54.133]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:22:54.133]                     {
[13:22:54.133]                       inherits <- base::inherits
[13:22:54.133]                       invokeRestart <- base::invokeRestart
[13:22:54.133]                       is.null <- base::is.null
[13:22:54.133]                       muffled <- FALSE
[13:22:54.133]                       if (inherits(cond, "message")) {
[13:22:54.133]                         muffled <- grepl(pattern, "muffleMessage")
[13:22:54.133]                         if (muffled) 
[13:22:54.133]                           invokeRestart("muffleMessage")
[13:22:54.133]                       }
[13:22:54.133]                       else if (inherits(cond, "warning")) {
[13:22:54.133]                         muffled <- grepl(pattern, "muffleWarning")
[13:22:54.133]                         if (muffled) 
[13:22:54.133]                           invokeRestart("muffleWarning")
[13:22:54.133]                       }
[13:22:54.133]                       else if (inherits(cond, "condition")) {
[13:22:54.133]                         if (!is.null(pattern)) {
[13:22:54.133]                           computeRestarts <- base::computeRestarts
[13:22:54.133]                           grepl <- base::grepl
[13:22:54.133]                           restarts <- computeRestarts(cond)
[13:22:54.133]                           for (restart in restarts) {
[13:22:54.133]                             name <- restart$name
[13:22:54.133]                             if (is.null(name)) 
[13:22:54.133]                               next
[13:22:54.133]                             if (!grepl(pattern, name)) 
[13:22:54.133]                               next
[13:22:54.133]                             invokeRestart(restart)
[13:22:54.133]                             muffled <- TRUE
[13:22:54.133]                             break
[13:22:54.133]                           }
[13:22:54.133]                         }
[13:22:54.133]                       }
[13:22:54.133]                       invisible(muffled)
[13:22:54.133]                     }
[13:22:54.133]                     muffleCondition(cond, pattern = "^muffle")
[13:22:54.133]                   }
[13:22:54.133]                 }
[13:22:54.133]                 else {
[13:22:54.133]                   if (TRUE) {
[13:22:54.133]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:22:54.133]                     {
[13:22:54.133]                       inherits <- base::inherits
[13:22:54.133]                       invokeRestart <- base::invokeRestart
[13:22:54.133]                       is.null <- base::is.null
[13:22:54.133]                       muffled <- FALSE
[13:22:54.133]                       if (inherits(cond, "message")) {
[13:22:54.133]                         muffled <- grepl(pattern, "muffleMessage")
[13:22:54.133]                         if (muffled) 
[13:22:54.133]                           invokeRestart("muffleMessage")
[13:22:54.133]                       }
[13:22:54.133]                       else if (inherits(cond, "warning")) {
[13:22:54.133]                         muffled <- grepl(pattern, "muffleWarning")
[13:22:54.133]                         if (muffled) 
[13:22:54.133]                           invokeRestart("muffleWarning")
[13:22:54.133]                       }
[13:22:54.133]                       else if (inherits(cond, "condition")) {
[13:22:54.133]                         if (!is.null(pattern)) {
[13:22:54.133]                           computeRestarts <- base::computeRestarts
[13:22:54.133]                           grepl <- base::grepl
[13:22:54.133]                           restarts <- computeRestarts(cond)
[13:22:54.133]                           for (restart in restarts) {
[13:22:54.133]                             name <- restart$name
[13:22:54.133]                             if (is.null(name)) 
[13:22:54.133]                               next
[13:22:54.133]                             if (!grepl(pattern, name)) 
[13:22:54.133]                               next
[13:22:54.133]                             invokeRestart(restart)
[13:22:54.133]                             muffled <- TRUE
[13:22:54.133]                             break
[13:22:54.133]                           }
[13:22:54.133]                         }
[13:22:54.133]                       }
[13:22:54.133]                       invisible(muffled)
[13:22:54.133]                     }
[13:22:54.133]                     muffleCondition(cond, pattern = "^muffle")
[13:22:54.133]                   }
[13:22:54.133]                 }
[13:22:54.133]             }
[13:22:54.133]         }))
[13:22:54.133]     }, error = function(ex) {
[13:22:54.133]         base::structure(base::list(value = NULL, visible = NULL, 
[13:22:54.133]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:22:54.133]                 ...future.rng), started = ...future.startTime, 
[13:22:54.133]             finished = Sys.time(), session_uuid = NA_character_, 
[13:22:54.133]             version = "1.8"), class = "FutureResult")
[13:22:54.133]     }, finally = {
[13:22:54.133]         if (!identical(...future.workdir, getwd())) 
[13:22:54.133]             setwd(...future.workdir)
[13:22:54.133]         {
[13:22:54.133]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:22:54.133]                 ...future.oldOptions$nwarnings <- NULL
[13:22:54.133]             }
[13:22:54.133]             base::options(...future.oldOptions)
[13:22:54.133]             if (.Platform$OS.type == "windows") {
[13:22:54.133]                 old_names <- names(...future.oldEnvVars)
[13:22:54.133]                 envs <- base::Sys.getenv()
[13:22:54.133]                 names <- names(envs)
[13:22:54.133]                 common <- intersect(names, old_names)
[13:22:54.133]                 added <- setdiff(names, old_names)
[13:22:54.133]                 removed <- setdiff(old_names, names)
[13:22:54.133]                 changed <- common[...future.oldEnvVars[common] != 
[13:22:54.133]                   envs[common]]
[13:22:54.133]                 NAMES <- toupper(changed)
[13:22:54.133]                 args <- list()
[13:22:54.133]                 for (kk in seq_along(NAMES)) {
[13:22:54.133]                   name <- changed[[kk]]
[13:22:54.133]                   NAME <- NAMES[[kk]]
[13:22:54.133]                   if (name != NAME && is.element(NAME, old_names)) 
[13:22:54.133]                     next
[13:22:54.133]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:22:54.133]                 }
[13:22:54.133]                 NAMES <- toupper(added)
[13:22:54.133]                 for (kk in seq_along(NAMES)) {
[13:22:54.133]                   name <- added[[kk]]
[13:22:54.133]                   NAME <- NAMES[[kk]]
[13:22:54.133]                   if (name != NAME && is.element(NAME, old_names)) 
[13:22:54.133]                     next
[13:22:54.133]                   args[[name]] <- ""
[13:22:54.133]                 }
[13:22:54.133]                 NAMES <- toupper(removed)
[13:22:54.133]                 for (kk in seq_along(NAMES)) {
[13:22:54.133]                   name <- removed[[kk]]
[13:22:54.133]                   NAME <- NAMES[[kk]]
[13:22:54.133]                   if (name != NAME && is.element(NAME, old_names)) 
[13:22:54.133]                     next
[13:22:54.133]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:22:54.133]                 }
[13:22:54.133]                 if (length(args) > 0) 
[13:22:54.133]                   base::do.call(base::Sys.setenv, args = args)
[13:22:54.133]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:22:54.133]             }
[13:22:54.133]             else {
[13:22:54.133]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:22:54.133]             }
[13:22:54.133]             {
[13:22:54.133]                 if (base::length(...future.futureOptionsAdded) > 
[13:22:54.133]                   0L) {
[13:22:54.133]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:22:54.133]                   base::names(opts) <- ...future.futureOptionsAdded
[13:22:54.133]                   base::options(opts)
[13:22:54.133]                 }
[13:22:54.133]                 {
[13:22:54.133]                   {
[13:22:54.133]                     NULL
[13:22:54.133]                     RNGkind("Mersenne-Twister")
[13:22:54.133]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[13:22:54.133]                       inherits = FALSE)
[13:22:54.133]                   }
[13:22:54.133]                   options(future.plan = NULL)
[13:22:54.133]                   if (is.na(NA_character_)) 
[13:22:54.133]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:22:54.133]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:22:54.133]                   future::plan(list(function (..., envir = parent.frame()) 
[13:22:54.133]                   {
[13:22:54.133]                     future <- SequentialFuture(..., envir = envir)
[13:22:54.133]                     if (!future$lazy) 
[13:22:54.133]                       future <- run(future)
[13:22:54.133]                     invisible(future)
[13:22:54.133]                   }), .cleanup = FALSE, .init = FALSE)
[13:22:54.133]                 }
[13:22:54.133]             }
[13:22:54.133]         }
[13:22:54.133]     })
[13:22:54.133]     if (TRUE) {
[13:22:54.133]         base::sink(type = "output", split = FALSE)
[13:22:54.133]         if (TRUE) {
[13:22:54.133]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:22:54.133]         }
[13:22:54.133]         else {
[13:22:54.133]             ...future.result["stdout"] <- base::list(NULL)
[13:22:54.133]         }
[13:22:54.133]         base::close(...future.stdout)
[13:22:54.133]         ...future.stdout <- NULL
[13:22:54.133]     }
[13:22:54.133]     ...future.result$conditions <- ...future.conditions
[13:22:54.133]     ...future.result$finished <- base::Sys.time()
[13:22:54.133]     ...future.result
[13:22:54.133] }
[13:22:54.135] plan(): Setting new future strategy stack:
[13:22:54.135] List of future strategies:
[13:22:54.135] 1. sequential:
[13:22:54.135]    - args: function (..., envir = parent.frame())
[13:22:54.135]    - tweaked: FALSE
[13:22:54.135]    - call: NULL
[13:22:54.135] plan(): nbrOfWorkers() = 1
[13:22:54.136] plan(): Setting new future strategy stack:
[13:22:54.136] List of future strategies:
[13:22:54.136] 1. sequential:
[13:22:54.136]    - args: function (..., envir = parent.frame())
[13:22:54.136]    - tweaked: FALSE
[13:22:54.136]    - call: future::plan("sequential")
[13:22:54.137] plan(): nbrOfWorkers() = 1
[13:22:54.137] SequentialFuture started (and completed)
[13:22:54.137] - Launch lazy future ... done
[13:22:54.137] run() for ‘SequentialFuture’ ... done
> stopifnot(identical(v$a, 2))
[13:22:54.137] run() for ‘Future’ ...
[13:22:54.137] - state: ‘created’
[13:22:54.138] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[13:22:54.138] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[13:22:54.138] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[13:22:54.138]   - Field: ‘label’
[13:22:54.138]   - Field: ‘local’
[13:22:54.138]   - Field: ‘owner’
[13:22:54.138]   - Field: ‘envir’
[13:22:54.138]   - Field: ‘packages’
[13:22:54.139]   - Field: ‘gc’
[13:22:54.139]   - Field: ‘conditions’
[13:22:54.139]   - Field: ‘expr’
[13:22:54.139]   - Field: ‘uuid’
[13:22:54.139]   - Field: ‘seed’
[13:22:54.139]   - Field: ‘version’
[13:22:54.139]   - Field: ‘result’
[13:22:54.139]   - Field: ‘asynchronous’
[13:22:54.139]   - Field: ‘calls’
[13:22:54.139]   - Field: ‘globals’
[13:22:54.140]   - Field: ‘stdout’
[13:22:54.140]   - Field: ‘earlySignal’
[13:22:54.140]   - Field: ‘lazy’
[13:22:54.140]   - Field: ‘state’
[13:22:54.140] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[13:22:54.140] - Launch lazy future ...
[13:22:54.140] Packages needed by the future expression (n = 0): <none>
[13:22:54.140] Packages needed by future strategies (n = 0): <none>
[13:22:54.141] {
[13:22:54.141]     {
[13:22:54.141]         {
[13:22:54.141]             ...future.startTime <- base::Sys.time()
[13:22:54.141]             {
[13:22:54.141]                 {
[13:22:54.141]                   {
[13:22:54.141]                     base::local({
[13:22:54.141]                       has_future <- base::requireNamespace("future", 
[13:22:54.141]                         quietly = TRUE)
[13:22:54.141]                       if (has_future) {
[13:22:54.141]                         ns <- base::getNamespace("future")
[13:22:54.141]                         version <- ns[[".package"]][["version"]]
[13:22:54.141]                         if (is.null(version)) 
[13:22:54.141]                           version <- utils::packageVersion("future")
[13:22:54.141]                       }
[13:22:54.141]                       else {
[13:22:54.141]                         version <- NULL
[13:22:54.141]                       }
[13:22:54.141]                       if (!has_future || version < "1.8.0") {
[13:22:54.141]                         info <- base::c(r_version = base::gsub("R version ", 
[13:22:54.141]                           "", base::R.version$version.string), 
[13:22:54.141]                           platform = base::sprintf("%s (%s-bit)", 
[13:22:54.141]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:22:54.141]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[13:22:54.141]                             "release", "version")], collapse = " "), 
[13:22:54.141]                           hostname = base::Sys.info()[["nodename"]])
[13:22:54.141]                         info <- base::sprintf("%s: %s", base::names(info), 
[13:22:54.141]                           info)
[13:22:54.141]                         info <- base::paste(info, collapse = "; ")
[13:22:54.141]                         if (!has_future) {
[13:22:54.141]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:22:54.141]                             info)
[13:22:54.141]                         }
[13:22:54.141]                         else {
[13:22:54.141]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:22:54.141]                             info, version)
[13:22:54.141]                         }
[13:22:54.141]                         base::stop(msg)
[13:22:54.141]                       }
[13:22:54.141]                     })
[13:22:54.141]                   }
[13:22:54.141]                   options(future.plan = NULL)
[13:22:54.141]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:22:54.141]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:22:54.141]                 }
[13:22:54.141]                 ...future.workdir <- getwd()
[13:22:54.141]             }
[13:22:54.141]             ...future.oldOptions <- base::as.list(base::.Options)
[13:22:54.141]             ...future.oldEnvVars <- base::Sys.getenv()
[13:22:54.141]         }
[13:22:54.141]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:22:54.141]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:22:54.141]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:22:54.141]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:22:54.141]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:22:54.141]             future.stdout.windows.reencode = NULL, width = 80L)
[13:22:54.141]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:22:54.141]             base::names(...future.oldOptions))
[13:22:54.141]     }
[13:22:54.141]     if (FALSE) {
[13:22:54.141]     }
[13:22:54.141]     else {
[13:22:54.141]         if (TRUE) {
[13:22:54.141]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:22:54.141]                 open = "w")
[13:22:54.141]         }
[13:22:54.141]         else {
[13:22:54.141]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:22:54.141]                 windows = "NUL", "/dev/null"), open = "w")
[13:22:54.141]         }
[13:22:54.141]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:22:54.141]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:22:54.141]             base::sink(type = "output", split = FALSE)
[13:22:54.141]             base::close(...future.stdout)
[13:22:54.141]         }, add = TRUE)
[13:22:54.141]     }
[13:22:54.141]     ...future.frame <- base::sys.nframe()
[13:22:54.141]     ...future.conditions <- base::list()
[13:22:54.141]     ...future.rng <- base::globalenv()$.Random.seed
[13:22:54.141]     if (FALSE) {
[13:22:54.141]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:22:54.141]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:22:54.141]     }
[13:22:54.141]     ...future.result <- base::tryCatch({
[13:22:54.141]         base::withCallingHandlers({
[13:22:54.141]             ...future.value <- base::withVisible(base::local({
[13:22:54.141]                 2
[13:22:54.141]             }))
[13:22:54.141]             future::FutureResult(value = ...future.value$value, 
[13:22:54.141]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:22:54.141]                   ...future.rng), globalenv = if (FALSE) 
[13:22:54.141]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:22:54.141]                     ...future.globalenv.names))
[13:22:54.141]                 else NULL, started = ...future.startTime, version = "1.8")
[13:22:54.141]         }, condition = base::local({
[13:22:54.141]             c <- base::c
[13:22:54.141]             inherits <- base::inherits
[13:22:54.141]             invokeRestart <- base::invokeRestart
[13:22:54.141]             length <- base::length
[13:22:54.141]             list <- base::list
[13:22:54.141]             seq.int <- base::seq.int
[13:22:54.141]             signalCondition <- base::signalCondition
[13:22:54.141]             sys.calls <- base::sys.calls
[13:22:54.141]             `[[` <- base::`[[`
[13:22:54.141]             `+` <- base::`+`
[13:22:54.141]             `<<-` <- base::`<<-`
[13:22:54.141]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:22:54.141]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:22:54.141]                   3L)]
[13:22:54.141]             }
[13:22:54.141]             function(cond) {
[13:22:54.141]                 is_error <- inherits(cond, "error")
[13:22:54.141]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:22:54.141]                   NULL)
[13:22:54.141]                 if (is_error) {
[13:22:54.141]                   sessionInformation <- function() {
[13:22:54.141]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:22:54.141]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:22:54.141]                       search = base::search(), system = base::Sys.info())
[13:22:54.141]                   }
[13:22:54.141]                   ...future.conditions[[length(...future.conditions) + 
[13:22:54.141]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:22:54.141]                     cond$call), session = sessionInformation(), 
[13:22:54.141]                     timestamp = base::Sys.time(), signaled = 0L)
[13:22:54.141]                   signalCondition(cond)
[13:22:54.141]                 }
[13:22:54.141]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:22:54.141]                 "immediateCondition"))) {
[13:22:54.141]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:22:54.141]                   ...future.conditions[[length(...future.conditions) + 
[13:22:54.141]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:22:54.141]                   if (TRUE && !signal) {
[13:22:54.141]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:22:54.141]                     {
[13:22:54.141]                       inherits <- base::inherits
[13:22:54.141]                       invokeRestart <- base::invokeRestart
[13:22:54.141]                       is.null <- base::is.null
[13:22:54.141]                       muffled <- FALSE
[13:22:54.141]                       if (inherits(cond, "message")) {
[13:22:54.141]                         muffled <- grepl(pattern, "muffleMessage")
[13:22:54.141]                         if (muffled) 
[13:22:54.141]                           invokeRestart("muffleMessage")
[13:22:54.141]                       }
[13:22:54.141]                       else if (inherits(cond, "warning")) {
[13:22:54.141]                         muffled <- grepl(pattern, "muffleWarning")
[13:22:54.141]                         if (muffled) 
[13:22:54.141]                           invokeRestart("muffleWarning")
[13:22:54.141]                       }
[13:22:54.141]                       else if (inherits(cond, "condition")) {
[13:22:54.141]                         if (!is.null(pattern)) {
[13:22:54.141]                           computeRestarts <- base::computeRestarts
[13:22:54.141]                           grepl <- base::grepl
[13:22:54.141]                           restarts <- computeRestarts(cond)
[13:22:54.141]                           for (restart in restarts) {
[13:22:54.141]                             name <- restart$name
[13:22:54.141]                             if (is.null(name)) 
[13:22:54.141]                               next
[13:22:54.141]                             if (!grepl(pattern, name)) 
[13:22:54.141]                               next
[13:22:54.141]                             invokeRestart(restart)
[13:22:54.141]                             muffled <- TRUE
[13:22:54.141]                             break
[13:22:54.141]                           }
[13:22:54.141]                         }
[13:22:54.141]                       }
[13:22:54.141]                       invisible(muffled)
[13:22:54.141]                     }
[13:22:54.141]                     muffleCondition(cond, pattern = "^muffle")
[13:22:54.141]                   }
[13:22:54.141]                 }
[13:22:54.141]                 else {
[13:22:54.141]                   if (TRUE) {
[13:22:54.141]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:22:54.141]                     {
[13:22:54.141]                       inherits <- base::inherits
[13:22:54.141]                       invokeRestart <- base::invokeRestart
[13:22:54.141]                       is.null <- base::is.null
[13:22:54.141]                       muffled <- FALSE
[13:22:54.141]                       if (inherits(cond, "message")) {
[13:22:54.141]                         muffled <- grepl(pattern, "muffleMessage")
[13:22:54.141]                         if (muffled) 
[13:22:54.141]                           invokeRestart("muffleMessage")
[13:22:54.141]                       }
[13:22:54.141]                       else if (inherits(cond, "warning")) {
[13:22:54.141]                         muffled <- grepl(pattern, "muffleWarning")
[13:22:54.141]                         if (muffled) 
[13:22:54.141]                           invokeRestart("muffleWarning")
[13:22:54.141]                       }
[13:22:54.141]                       else if (inherits(cond, "condition")) {
[13:22:54.141]                         if (!is.null(pattern)) {
[13:22:54.141]                           computeRestarts <- base::computeRestarts
[13:22:54.141]                           grepl <- base::grepl
[13:22:54.141]                           restarts <- computeRestarts(cond)
[13:22:54.141]                           for (restart in restarts) {
[13:22:54.141]                             name <- restart$name
[13:22:54.141]                             if (is.null(name)) 
[13:22:54.141]                               next
[13:22:54.141]                             if (!grepl(pattern, name)) 
[13:22:54.141]                               next
[13:22:54.141]                             invokeRestart(restart)
[13:22:54.141]                             muffled <- TRUE
[13:22:54.141]                             break
[13:22:54.141]                           }
[13:22:54.141]                         }
[13:22:54.141]                       }
[13:22:54.141]                       invisible(muffled)
[13:22:54.141]                     }
[13:22:54.141]                     muffleCondition(cond, pattern = "^muffle")
[13:22:54.141]                   }
[13:22:54.141]                 }
[13:22:54.141]             }
[13:22:54.141]         }))
[13:22:54.141]     }, error = function(ex) {
[13:22:54.141]         base::structure(base::list(value = NULL, visible = NULL, 
[13:22:54.141]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:22:54.141]                 ...future.rng), started = ...future.startTime, 
[13:22:54.141]             finished = Sys.time(), session_uuid = NA_character_, 
[13:22:54.141]             version = "1.8"), class = "FutureResult")
[13:22:54.141]     }, finally = {
[13:22:54.141]         if (!identical(...future.workdir, getwd())) 
[13:22:54.141]             setwd(...future.workdir)
[13:22:54.141]         {
[13:22:54.141]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:22:54.141]                 ...future.oldOptions$nwarnings <- NULL
[13:22:54.141]             }
[13:22:54.141]             base::options(...future.oldOptions)
[13:22:54.141]             if (.Platform$OS.type == "windows") {
[13:22:54.141]                 old_names <- names(...future.oldEnvVars)
[13:22:54.141]                 envs <- base::Sys.getenv()
[13:22:54.141]                 names <- names(envs)
[13:22:54.141]                 common <- intersect(names, old_names)
[13:22:54.141]                 added <- setdiff(names, old_names)
[13:22:54.141]                 removed <- setdiff(old_names, names)
[13:22:54.141]                 changed <- common[...future.oldEnvVars[common] != 
[13:22:54.141]                   envs[common]]
[13:22:54.141]                 NAMES <- toupper(changed)
[13:22:54.141]                 args <- list()
[13:22:54.141]                 for (kk in seq_along(NAMES)) {
[13:22:54.141]                   name <- changed[[kk]]
[13:22:54.141]                   NAME <- NAMES[[kk]]
[13:22:54.141]                   if (name != NAME && is.element(NAME, old_names)) 
[13:22:54.141]                     next
[13:22:54.141]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:22:54.141]                 }
[13:22:54.141]                 NAMES <- toupper(added)
[13:22:54.141]                 for (kk in seq_along(NAMES)) {
[13:22:54.141]                   name <- added[[kk]]
[13:22:54.141]                   NAME <- NAMES[[kk]]
[13:22:54.141]                   if (name != NAME && is.element(NAME, old_names)) 
[13:22:54.141]                     next
[13:22:54.141]                   args[[name]] <- ""
[13:22:54.141]                 }
[13:22:54.141]                 NAMES <- toupper(removed)
[13:22:54.141]                 for (kk in seq_along(NAMES)) {
[13:22:54.141]                   name <- removed[[kk]]
[13:22:54.141]                   NAME <- NAMES[[kk]]
[13:22:54.141]                   if (name != NAME && is.element(NAME, old_names)) 
[13:22:54.141]                     next
[13:22:54.141]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:22:54.141]                 }
[13:22:54.141]                 if (length(args) > 0) 
[13:22:54.141]                   base::do.call(base::Sys.setenv, args = args)
[13:22:54.141]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:22:54.141]             }
[13:22:54.141]             else {
[13:22:54.141]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:22:54.141]             }
[13:22:54.141]             {
[13:22:54.141]                 if (base::length(...future.futureOptionsAdded) > 
[13:22:54.141]                   0L) {
[13:22:54.141]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:22:54.141]                   base::names(opts) <- ...future.futureOptionsAdded
[13:22:54.141]                   base::options(opts)
[13:22:54.141]                 }
[13:22:54.141]                 {
[13:22:54.141]                   {
[13:22:54.141]                     NULL
[13:22:54.141]                     RNGkind("Mersenne-Twister")
[13:22:54.141]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[13:22:54.141]                       inherits = FALSE)
[13:22:54.141]                   }
[13:22:54.141]                   options(future.plan = NULL)
[13:22:54.141]                   if (is.na(NA_character_)) 
[13:22:54.141]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:22:54.141]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:22:54.141]                   future::plan(list(function (..., envir = parent.frame()) 
[13:22:54.141]                   {
[13:22:54.141]                     future <- SequentialFuture(..., envir = envir)
[13:22:54.141]                     if (!future$lazy) 
[13:22:54.141]                       future <- run(future)
[13:22:54.141]                     invisible(future)
[13:22:54.141]                   }), .cleanup = FALSE, .init = FALSE)
[13:22:54.141]                 }
[13:22:54.141]             }
[13:22:54.141]         }
[13:22:54.141]     })
[13:22:54.141]     if (TRUE) {
[13:22:54.141]         base::sink(type = "output", split = FALSE)
[13:22:54.141]         if (TRUE) {
[13:22:54.141]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:22:54.141]         }
[13:22:54.141]         else {
[13:22:54.141]             ...future.result["stdout"] <- base::list(NULL)
[13:22:54.141]         }
[13:22:54.141]         base::close(...future.stdout)
[13:22:54.141]         ...future.stdout <- NULL
[13:22:54.141]     }
[13:22:54.141]     ...future.result$conditions <- ...future.conditions
[13:22:54.141]     ...future.result$finished <- base::Sys.time()
[13:22:54.141]     ...future.result
[13:22:54.141] }
[13:22:54.143] plan(): Setting new future strategy stack:
[13:22:54.143] List of future strategies:
[13:22:54.143] 1. sequential:
[13:22:54.143]    - args: function (..., envir = parent.frame())
[13:22:54.143]    - tweaked: FALSE
[13:22:54.143]    - call: NULL
[13:22:54.143] plan(): nbrOfWorkers() = 1
[13:22:54.144] plan(): Setting new future strategy stack:
[13:22:54.144] List of future strategies:
[13:22:54.144] 1. sequential:
[13:22:54.144]    - args: function (..., envir = parent.frame())
[13:22:54.144]    - tweaked: FALSE
[13:22:54.144]    - call: future::plan("sequential")
[13:22:54.148] plan(): nbrOfWorkers() = 1
[13:22:54.148] SequentialFuture started (and completed)
[13:22:54.148] - Launch lazy future ... done
[13:22:54.149] run() for ‘SequentialFuture’ ... done
> 
> message("*** %<-% to environment ... DONE")
*** %<-% to environment ... DONE
> 
> source("incl/end.R")
[13:22:54.149] plan(): Setting new future strategy stack:
[13:22:54.149] List of future strategies:
[13:22:54.149] 1. FutureStrategy:
[13:22:54.149]    - args: function (..., envir = parent.frame())
[13:22:54.149]    - tweaked: FALSE
[13:22:54.149]    - call: future::plan(oplan)
[13:22:54.161] plan(): nbrOfWorkers() = 1
> 
