
R version 4.3.2 (2023-10-31) -- "Eye Holes"
Copyright (C) 2023 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> source("incl/start.R")
[13:23:02.705] plan(): Setting new future strategy stack:
[13:23:02.706] List of future strategies:
[13:23:02.706] 1. sequential:
[13:23:02.706]    - args: function (..., envir = parent.frame())
[13:23:02.706]    - tweaked: FALSE
[13:23:02.706]    - call: future::plan("sequential")
[13:23:02.721] plan(): nbrOfWorkers() = 1
> 
> message("*** FutureError class ...")
*** FutureError class ...
> 
> ## Minimal
> ex <- FutureError(message = "Woops")
> print(ex)
<FutureError: Woops>


Future UUID: <NA>
> 
> cond <- tryCatch(message("Woops", appendLF = FALSE), message = identity)
> ex2 <- FutureError(message = cond)
> print(ex2)
<FutureError: Woops>


Future UUID: <NA>
> stopifnot(conditionMessage(ex2) == conditionMessage(ex))
> 
> f <- future({ 42L; stop("woops") })
[13:23:02.733] getGlobalsAndPackages() ...
[13:23:02.733] Searching for globals...
[13:23:02.740] - globals found: [2] ‘{’, ‘stop’
[13:23:02.740] Searching for globals ... DONE
[13:23:02.740] Resolving globals: FALSE
[13:23:02.741] 
[13:23:02.741] 
[13:23:02.741] getGlobalsAndPackages() ... DONE
[13:23:02.742] run() for ‘Future’ ...
[13:23:02.742] - state: ‘created’
[13:23:02.742] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[13:23:02.742] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[13:23:02.742] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[13:23:02.743]   - Field: ‘label’
[13:23:02.743]   - Field: ‘local’
[13:23:02.743]   - Field: ‘owner’
[13:23:02.743]   - Field: ‘envir’
[13:23:02.743]   - Field: ‘packages’
[13:23:02.743]   - Field: ‘gc’
[13:23:02.743]   - Field: ‘conditions’
[13:23:02.743]   - Field: ‘expr’
[13:23:02.743]   - Field: ‘uuid’
[13:23:02.743]   - Field: ‘seed’
[13:23:02.744]   - Field: ‘version’
[13:23:02.744]   - Field: ‘result’
[13:23:02.744]   - Field: ‘asynchronous’
[13:23:02.744]   - Field: ‘calls’
[13:23:02.744]   - Field: ‘globals’
[13:23:02.744]   - Field: ‘stdout’
[13:23:02.744]   - Field: ‘earlySignal’
[13:23:02.744]   - Field: ‘lazy’
[13:23:02.744]   - Field: ‘state’
[13:23:02.744] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[13:23:02.744] - Launch lazy future ...
[13:23:02.745] Packages needed by the future expression (n = 0): <none>
[13:23:02.745] Packages needed by future strategies (n = 0): <none>
[13:23:02.746] {
[13:23:02.746]     {
[13:23:02.746]         {
[13:23:02.746]             ...future.startTime <- base::Sys.time()
[13:23:02.746]             {
[13:23:02.746]                 {
[13:23:02.746]                   {
[13:23:02.746]                     base::local({
[13:23:02.746]                       has_future <- base::requireNamespace("future", 
[13:23:02.746]                         quietly = TRUE)
[13:23:02.746]                       if (has_future) {
[13:23:02.746]                         ns <- base::getNamespace("future")
[13:23:02.746]                         version <- ns[[".package"]][["version"]]
[13:23:02.746]                         if (is.null(version)) 
[13:23:02.746]                           version <- utils::packageVersion("future")
[13:23:02.746]                       }
[13:23:02.746]                       else {
[13:23:02.746]                         version <- NULL
[13:23:02.746]                       }
[13:23:02.746]                       if (!has_future || version < "1.8.0") {
[13:23:02.746]                         info <- base::c(r_version = base::gsub("R version ", 
[13:23:02.746]                           "", base::R.version$version.string), 
[13:23:02.746]                           platform = base::sprintf("%s (%s-bit)", 
[13:23:02.746]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:23:02.746]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[13:23:02.746]                             "release", "version")], collapse = " "), 
[13:23:02.746]                           hostname = base::Sys.info()[["nodename"]])
[13:23:02.746]                         info <- base::sprintf("%s: %s", base::names(info), 
[13:23:02.746]                           info)
[13:23:02.746]                         info <- base::paste(info, collapse = "; ")
[13:23:02.746]                         if (!has_future) {
[13:23:02.746]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:23:02.746]                             info)
[13:23:02.746]                         }
[13:23:02.746]                         else {
[13:23:02.746]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:23:02.746]                             info, version)
[13:23:02.746]                         }
[13:23:02.746]                         base::stop(msg)
[13:23:02.746]                       }
[13:23:02.746]                     })
[13:23:02.746]                   }
[13:23:02.746]                   options(future.plan = NULL)
[13:23:02.746]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:23:02.746]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:23:02.746]                 }
[13:23:02.746]                 ...future.workdir <- getwd()
[13:23:02.746]             }
[13:23:02.746]             ...future.oldOptions <- base::as.list(base::.Options)
[13:23:02.746]             ...future.oldEnvVars <- base::Sys.getenv()
[13:23:02.746]         }
[13:23:02.746]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:23:02.746]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:23:02.746]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:23:02.746]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:23:02.746]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:23:02.746]             future.stdout.windows.reencode = NULL, width = 80L)
[13:23:02.746]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:23:02.746]             base::names(...future.oldOptions))
[13:23:02.746]     }
[13:23:02.746]     if (FALSE) {
[13:23:02.746]     }
[13:23:02.746]     else {
[13:23:02.746]         if (TRUE) {
[13:23:02.746]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:23:02.746]                 open = "w")
[13:23:02.746]         }
[13:23:02.746]         else {
[13:23:02.746]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:23:02.746]                 windows = "NUL", "/dev/null"), open = "w")
[13:23:02.746]         }
[13:23:02.746]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:23:02.746]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:23:02.746]             base::sink(type = "output", split = FALSE)
[13:23:02.746]             base::close(...future.stdout)
[13:23:02.746]         }, add = TRUE)
[13:23:02.746]     }
[13:23:02.746]     ...future.frame <- base::sys.nframe()
[13:23:02.746]     ...future.conditions <- base::list()
[13:23:02.746]     ...future.rng <- base::globalenv()$.Random.seed
[13:23:02.746]     if (FALSE) {
[13:23:02.746]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:23:02.746]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:23:02.746]     }
[13:23:02.746]     ...future.result <- base::tryCatch({
[13:23:02.746]         base::withCallingHandlers({
[13:23:02.746]             ...future.value <- base::withVisible(base::local({
[13:23:02.746]                 42L
[13:23:02.746]                 stop("woops")
[13:23:02.746]             }))
[13:23:02.746]             future::FutureResult(value = ...future.value$value, 
[13:23:02.746]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:23:02.746]                   ...future.rng), globalenv = if (FALSE) 
[13:23:02.746]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:23:02.746]                     ...future.globalenv.names))
[13:23:02.746]                 else NULL, started = ...future.startTime, version = "1.8")
[13:23:02.746]         }, condition = base::local({
[13:23:02.746]             c <- base::c
[13:23:02.746]             inherits <- base::inherits
[13:23:02.746]             invokeRestart <- base::invokeRestart
[13:23:02.746]             length <- base::length
[13:23:02.746]             list <- base::list
[13:23:02.746]             seq.int <- base::seq.int
[13:23:02.746]             signalCondition <- base::signalCondition
[13:23:02.746]             sys.calls <- base::sys.calls
[13:23:02.746]             `[[` <- base::`[[`
[13:23:02.746]             `+` <- base::`+`
[13:23:02.746]             `<<-` <- base::`<<-`
[13:23:02.746]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:23:02.746]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:23:02.746]                   3L)]
[13:23:02.746]             }
[13:23:02.746]             function(cond) {
[13:23:02.746]                 is_error <- inherits(cond, "error")
[13:23:02.746]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:23:02.746]                   NULL)
[13:23:02.746]                 if (is_error) {
[13:23:02.746]                   sessionInformation <- function() {
[13:23:02.746]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:23:02.746]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:23:02.746]                       search = base::search(), system = base::Sys.info())
[13:23:02.746]                   }
[13:23:02.746]                   ...future.conditions[[length(...future.conditions) + 
[13:23:02.746]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:23:02.746]                     cond$call), session = sessionInformation(), 
[13:23:02.746]                     timestamp = base::Sys.time(), signaled = 0L)
[13:23:02.746]                   signalCondition(cond)
[13:23:02.746]                 }
[13:23:02.746]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:23:02.746]                 "immediateCondition"))) {
[13:23:02.746]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:23:02.746]                   ...future.conditions[[length(...future.conditions) + 
[13:23:02.746]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:23:02.746]                   if (TRUE && !signal) {
[13:23:02.746]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:23:02.746]                     {
[13:23:02.746]                       inherits <- base::inherits
[13:23:02.746]                       invokeRestart <- base::invokeRestart
[13:23:02.746]                       is.null <- base::is.null
[13:23:02.746]                       muffled <- FALSE
[13:23:02.746]                       if (inherits(cond, "message")) {
[13:23:02.746]                         muffled <- grepl(pattern, "muffleMessage")
[13:23:02.746]                         if (muffled) 
[13:23:02.746]                           invokeRestart("muffleMessage")
[13:23:02.746]                       }
[13:23:02.746]                       else if (inherits(cond, "warning")) {
[13:23:02.746]                         muffled <- grepl(pattern, "muffleWarning")
[13:23:02.746]                         if (muffled) 
[13:23:02.746]                           invokeRestart("muffleWarning")
[13:23:02.746]                       }
[13:23:02.746]                       else if (inherits(cond, "condition")) {
[13:23:02.746]                         if (!is.null(pattern)) {
[13:23:02.746]                           computeRestarts <- base::computeRestarts
[13:23:02.746]                           grepl <- base::grepl
[13:23:02.746]                           restarts <- computeRestarts(cond)
[13:23:02.746]                           for (restart in restarts) {
[13:23:02.746]                             name <- restart$name
[13:23:02.746]                             if (is.null(name)) 
[13:23:02.746]                               next
[13:23:02.746]                             if (!grepl(pattern, name)) 
[13:23:02.746]                               next
[13:23:02.746]                             invokeRestart(restart)
[13:23:02.746]                             muffled <- TRUE
[13:23:02.746]                             break
[13:23:02.746]                           }
[13:23:02.746]                         }
[13:23:02.746]                       }
[13:23:02.746]                       invisible(muffled)
[13:23:02.746]                     }
[13:23:02.746]                     muffleCondition(cond, pattern = "^muffle")
[13:23:02.746]                   }
[13:23:02.746]                 }
[13:23:02.746]                 else {
[13:23:02.746]                   if (TRUE) {
[13:23:02.746]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:23:02.746]                     {
[13:23:02.746]                       inherits <- base::inherits
[13:23:02.746]                       invokeRestart <- base::invokeRestart
[13:23:02.746]                       is.null <- base::is.null
[13:23:02.746]                       muffled <- FALSE
[13:23:02.746]                       if (inherits(cond, "message")) {
[13:23:02.746]                         muffled <- grepl(pattern, "muffleMessage")
[13:23:02.746]                         if (muffled) 
[13:23:02.746]                           invokeRestart("muffleMessage")
[13:23:02.746]                       }
[13:23:02.746]                       else if (inherits(cond, "warning")) {
[13:23:02.746]                         muffled <- grepl(pattern, "muffleWarning")
[13:23:02.746]                         if (muffled) 
[13:23:02.746]                           invokeRestart("muffleWarning")
[13:23:02.746]                       }
[13:23:02.746]                       else if (inherits(cond, "condition")) {
[13:23:02.746]                         if (!is.null(pattern)) {
[13:23:02.746]                           computeRestarts <- base::computeRestarts
[13:23:02.746]                           grepl <- base::grepl
[13:23:02.746]                           restarts <- computeRestarts(cond)
[13:23:02.746]                           for (restart in restarts) {
[13:23:02.746]                             name <- restart$name
[13:23:02.746]                             if (is.null(name)) 
[13:23:02.746]                               next
[13:23:02.746]                             if (!grepl(pattern, name)) 
[13:23:02.746]                               next
[13:23:02.746]                             invokeRestart(restart)
[13:23:02.746]                             muffled <- TRUE
[13:23:02.746]                             break
[13:23:02.746]                           }
[13:23:02.746]                         }
[13:23:02.746]                       }
[13:23:02.746]                       invisible(muffled)
[13:23:02.746]                     }
[13:23:02.746]                     muffleCondition(cond, pattern = "^muffle")
[13:23:02.746]                   }
[13:23:02.746]                 }
[13:23:02.746]             }
[13:23:02.746]         }))
[13:23:02.746]     }, error = function(ex) {
[13:23:02.746]         base::structure(base::list(value = NULL, visible = NULL, 
[13:23:02.746]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:23:02.746]                 ...future.rng), started = ...future.startTime, 
[13:23:02.746]             finished = Sys.time(), session_uuid = NA_character_, 
[13:23:02.746]             version = "1.8"), class = "FutureResult")
[13:23:02.746]     }, finally = {
[13:23:02.746]         if (!identical(...future.workdir, getwd())) 
[13:23:02.746]             setwd(...future.workdir)
[13:23:02.746]         {
[13:23:02.746]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:23:02.746]                 ...future.oldOptions$nwarnings <- NULL
[13:23:02.746]             }
[13:23:02.746]             base::options(...future.oldOptions)
[13:23:02.746]             if (.Platform$OS.type == "windows") {
[13:23:02.746]                 old_names <- names(...future.oldEnvVars)
[13:23:02.746]                 envs <- base::Sys.getenv()
[13:23:02.746]                 names <- names(envs)
[13:23:02.746]                 common <- intersect(names, old_names)
[13:23:02.746]                 added <- setdiff(names, old_names)
[13:23:02.746]                 removed <- setdiff(old_names, names)
[13:23:02.746]                 changed <- common[...future.oldEnvVars[common] != 
[13:23:02.746]                   envs[common]]
[13:23:02.746]                 NAMES <- toupper(changed)
[13:23:02.746]                 args <- list()
[13:23:02.746]                 for (kk in seq_along(NAMES)) {
[13:23:02.746]                   name <- changed[[kk]]
[13:23:02.746]                   NAME <- NAMES[[kk]]
[13:23:02.746]                   if (name != NAME && is.element(NAME, old_names)) 
[13:23:02.746]                     next
[13:23:02.746]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:23:02.746]                 }
[13:23:02.746]                 NAMES <- toupper(added)
[13:23:02.746]                 for (kk in seq_along(NAMES)) {
[13:23:02.746]                   name <- added[[kk]]
[13:23:02.746]                   NAME <- NAMES[[kk]]
[13:23:02.746]                   if (name != NAME && is.element(NAME, old_names)) 
[13:23:02.746]                     next
[13:23:02.746]                   args[[name]] <- ""
[13:23:02.746]                 }
[13:23:02.746]                 NAMES <- toupper(removed)
[13:23:02.746]                 for (kk in seq_along(NAMES)) {
[13:23:02.746]                   name <- removed[[kk]]
[13:23:02.746]                   NAME <- NAMES[[kk]]
[13:23:02.746]                   if (name != NAME && is.element(NAME, old_names)) 
[13:23:02.746]                     next
[13:23:02.746]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:23:02.746]                 }
[13:23:02.746]                 if (length(args) > 0) 
[13:23:02.746]                   base::do.call(base::Sys.setenv, args = args)
[13:23:02.746]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:23:02.746]             }
[13:23:02.746]             else {
[13:23:02.746]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:23:02.746]             }
[13:23:02.746]             {
[13:23:02.746]                 if (base::length(...future.futureOptionsAdded) > 
[13:23:02.746]                   0L) {
[13:23:02.746]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:23:02.746]                   base::names(opts) <- ...future.futureOptionsAdded
[13:23:02.746]                   base::options(opts)
[13:23:02.746]                 }
[13:23:02.746]                 {
[13:23:02.746]                   {
[13:23:02.746]                     NULL
[13:23:02.746]                     RNGkind("Mersenne-Twister")
[13:23:02.746]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[13:23:02.746]                       inherits = FALSE)
[13:23:02.746]                   }
[13:23:02.746]                   options(future.plan = NULL)
[13:23:02.746]                   if (is.na(NA_character_)) 
[13:23:02.746]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:23:02.746]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:23:02.746]                   future::plan(list(function (..., envir = parent.frame()) 
[13:23:02.746]                   {
[13:23:02.746]                     future <- SequentialFuture(..., envir = envir)
[13:23:02.746]                     if (!future$lazy) 
[13:23:02.746]                       future <- run(future)
[13:23:02.746]                     invisible(future)
[13:23:02.746]                   }), .cleanup = FALSE, .init = FALSE)
[13:23:02.746]                 }
[13:23:02.746]             }
[13:23:02.746]         }
[13:23:02.746]     })
[13:23:02.746]     if (TRUE) {
[13:23:02.746]         base::sink(type = "output", split = FALSE)
[13:23:02.746]         if (TRUE) {
[13:23:02.746]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:23:02.746]         }
[13:23:02.746]         else {
[13:23:02.746]             ...future.result["stdout"] <- base::list(NULL)
[13:23:02.746]         }
[13:23:02.746]         base::close(...future.stdout)
[13:23:02.746]         ...future.stdout <- NULL
[13:23:02.746]     }
[13:23:02.746]     ...future.result$conditions <- ...future.conditions
[13:23:02.746]     ...future.result$finished <- base::Sys.time()
[13:23:02.746]     ...future.result
[13:23:02.746] }
[13:23:02.748] plan(): Setting new future strategy stack:
[13:23:02.749] List of future strategies:
[13:23:02.749] 1. sequential:
[13:23:02.749]    - args: function (..., envir = parent.frame())
[13:23:02.749]    - tweaked: FALSE
[13:23:02.749]    - call: NULL
[13:23:02.749] plan(): nbrOfWorkers() = 1
[13:23:02.750] plan(): Setting new future strategy stack:
[13:23:02.750] List of future strategies:
[13:23:02.750] 1. sequential:
[13:23:02.750]    - args: function (..., envir = parent.frame())
[13:23:02.750]    - tweaked: FALSE
[13:23:02.750]    - call: future::plan("sequential")
[13:23:02.750] plan(): nbrOfWorkers() = 1
[13:23:02.751] SequentialFuture started (and completed)
[13:23:02.751] signalConditions() ...
[13:23:02.751]  - include = ‘immediateCondition’
[13:23:02.751]  - exclude = 
[13:23:02.751]  - resignal = FALSE
[13:23:02.751]  - Number of conditions: 1
[13:23:02.752] signalConditions() ... done
[13:23:02.752] - Launch lazy future ... done
[13:23:02.752] run() for ‘SequentialFuture’ ... done
> v <- value(f, signal = FALSE)
[13:23:02.752] signalConditions() ...
[13:23:02.752]  - include = ‘immediateCondition’
[13:23:02.753]  - exclude = 
[13:23:02.753]  - resignal = FALSE
[13:23:02.753]  - Number of conditions: 1
[13:23:02.753] signalConditions() ... done
> print(v)
<simpleError in eval(quote({    42L    stop("woops")}), new.env()): woops>
> ex <- FutureError(message = "Woops", future = f)
> print(ex)
<FutureError: Woops>


Future UUID: 31a40a97-c36b-2578-9b9e-15f07253acc7


DEBUG: BEGIN TROUBLESHOOTING HELP
Future involved:
SequentialFuture:
Label: ‘<none>’
Expression:
{
    42L
    stop("woops")
}
Lazy evaluation: FALSE
Asynchronous evaluation: FALSE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: TRUE
Value: 0 bytes of class ‘NULL’
Conditions captured: [n=1] ‘simpleError’
Early signaling: FALSE
Owner process: ec0d0abc-15c4-b0ce-97b5-60f38e00cf81
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’

DEBUG: END TROUBLESHOOTING HELP
> 
> message("*** FutureError class ... DONE")
*** FutureError class ... DONE
> 
> source("incl/end.R")
[13:23:02.755] plan(): Setting new future strategy stack:
[13:23:02.755] List of future strategies:
[13:23:02.755] 1. FutureStrategy:
[13:23:02.755]    - args: function (..., envir = parent.frame())
[13:23:02.755]    - tweaked: FALSE
[13:23:02.755]    - call: future::plan(oplan)
[13:23:02.770] plan(): nbrOfWorkers() = 1
> 
