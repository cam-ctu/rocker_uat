
R version 4.3.2 (2023-10-31) -- "Eye Holes"
Copyright (C) 2023 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> source("incl/start.R")
[10:25:35.252] plan(): Setting new future strategy stack:
[10:25:35.253] List of future strategies:
[10:25:35.253] 1. sequential:
[10:25:35.253]    - args: function (..., envir = parent.frame())
[10:25:35.253]    - tweaked: FALSE
[10:25:35.253]    - call: future::plan("sequential")
[10:25:35.266] plan(): nbrOfWorkers() = 1
> 
> message("*** future() ...")
*** future() ...
> 
> f <- future({
+   42L
+ }, lazy = TRUE)
[10:25:35.277] getGlobalsAndPackages() ...
[10:25:35.277] Searching for globals...
[10:25:35.280] - globals found: [1] ‘{’
[10:25:35.280] Searching for globals ... DONE
[10:25:35.280] Resolving globals: FALSE
[10:25:35.281] 
[10:25:35.281] 
[10:25:35.281] getGlobalsAndPackages() ... DONE
> 
> print(resolved(f))
[10:25:35.282] resolved() for ‘Future’ ...
[10:25:35.282] - state: ‘created’
[10:25:35.282] - run: TRUE
[10:25:35.282] - run() ...
[10:25:35.282] run() for ‘Future’ ...
[10:25:35.283] - state: ‘created’
[10:25:35.283] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:25:35.283] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[10:25:35.283] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[10:25:35.283]   - Field: ‘label’
[10:25:35.283]   - Field: ‘local’
[10:25:35.283]   - Field: ‘owner’
[10:25:35.284]   - Field: ‘envir’
[10:25:35.284]   - Field: ‘packages’
[10:25:35.284]   - Field: ‘gc’
[10:25:35.284]   - Field: ‘conditions’
[10:25:35.284]   - Field: ‘expr’
[10:25:35.284]   - Field: ‘uuid’
[10:25:35.284]   - Field: ‘seed’
[10:25:35.284]   - Field: ‘version’
[10:25:35.284]   - Field: ‘result’
[10:25:35.284]   - Field: ‘asynchronous’
[10:25:35.284]   - Field: ‘calls’
[10:25:35.285]   - Field: ‘globals’
[10:25:35.285]   - Field: ‘stdout’
[10:25:35.285]   - Field: ‘earlySignal’
[10:25:35.285]   - Field: ‘lazy’
[10:25:35.285]   - Field: ‘state’
[10:25:35.285] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[10:25:35.285] - Launch lazy future ...
[10:25:35.286] Packages needed by the future expression (n = 0): <none>
[10:25:35.286] Packages needed by future strategies (n = 0): <none>
[10:25:35.287] {
[10:25:35.287]     {
[10:25:35.287]         {
[10:25:35.287]             ...future.startTime <- base::Sys.time()
[10:25:35.287]             {
[10:25:35.287]                 {
[10:25:35.287]                   {
[10:25:35.287]                     base::local({
[10:25:35.287]                       has_future <- base::requireNamespace("future", 
[10:25:35.287]                         quietly = TRUE)
[10:25:35.287]                       if (has_future) {
[10:25:35.287]                         ns <- base::getNamespace("future")
[10:25:35.287]                         version <- ns[[".package"]][["version"]]
[10:25:35.287]                         if (is.null(version)) 
[10:25:35.287]                           version <- utils::packageVersion("future")
[10:25:35.287]                       }
[10:25:35.287]                       else {
[10:25:35.287]                         version <- NULL
[10:25:35.287]                       }
[10:25:35.287]                       if (!has_future || version < "1.8.0") {
[10:25:35.287]                         info <- base::c(r_version = base::gsub("R version ", 
[10:25:35.287]                           "", base::R.version$version.string), 
[10:25:35.287]                           platform = base::sprintf("%s (%s-bit)", 
[10:25:35.287]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:25:35.287]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[10:25:35.287]                             "release", "version")], collapse = " "), 
[10:25:35.287]                           hostname = base::Sys.info()[["nodename"]])
[10:25:35.287]                         info <- base::sprintf("%s: %s", base::names(info), 
[10:25:35.287]                           info)
[10:25:35.287]                         info <- base::paste(info, collapse = "; ")
[10:25:35.287]                         if (!has_future) {
[10:25:35.287]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:25:35.287]                             info)
[10:25:35.287]                         }
[10:25:35.287]                         else {
[10:25:35.287]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:25:35.287]                             info, version)
[10:25:35.287]                         }
[10:25:35.287]                         base::stop(msg)
[10:25:35.287]                       }
[10:25:35.287]                     })
[10:25:35.287]                   }
[10:25:35.287]                   options(future.plan = NULL)
[10:25:35.287]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:25:35.287]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:25:35.287]                 }
[10:25:35.287]                 ...future.workdir <- getwd()
[10:25:35.287]             }
[10:25:35.287]             ...future.oldOptions <- base::as.list(base::.Options)
[10:25:35.287]             ...future.oldEnvVars <- base::Sys.getenv()
[10:25:35.287]         }
[10:25:35.287]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:25:35.287]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[10:25:35.287]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:25:35.287]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:25:35.287]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:25:35.287]             future.stdout.windows.reencode = NULL, width = 80L)
[10:25:35.287]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:25:35.287]             base::names(...future.oldOptions))
[10:25:35.287]     }
[10:25:35.287]     if (FALSE) {
[10:25:35.287]     }
[10:25:35.287]     else {
[10:25:35.287]         if (TRUE) {
[10:25:35.287]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:25:35.287]                 open = "w")
[10:25:35.287]         }
[10:25:35.287]         else {
[10:25:35.287]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:25:35.287]                 windows = "NUL", "/dev/null"), open = "w")
[10:25:35.287]         }
[10:25:35.287]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:25:35.287]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:25:35.287]             base::sink(type = "output", split = FALSE)
[10:25:35.287]             base::close(...future.stdout)
[10:25:35.287]         }, add = TRUE)
[10:25:35.287]     }
[10:25:35.287]     ...future.frame <- base::sys.nframe()
[10:25:35.287]     ...future.conditions <- base::list()
[10:25:35.287]     ...future.rng <- base::globalenv()$.Random.seed
[10:25:35.287]     if (FALSE) {
[10:25:35.287]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:25:35.287]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:25:35.287]     }
[10:25:35.287]     ...future.result <- base::tryCatch({
[10:25:35.287]         base::withCallingHandlers({
[10:25:35.287]             ...future.value <- base::withVisible(base::local({
[10:25:35.287]                 42L
[10:25:35.287]             }))
[10:25:35.287]             future::FutureResult(value = ...future.value$value, 
[10:25:35.287]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:25:35.287]                   ...future.rng), globalenv = if (FALSE) 
[10:25:35.287]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:25:35.287]                     ...future.globalenv.names))
[10:25:35.287]                 else NULL, started = ...future.startTime, version = "1.8")
[10:25:35.287]         }, condition = base::local({
[10:25:35.287]             c <- base::c
[10:25:35.287]             inherits <- base::inherits
[10:25:35.287]             invokeRestart <- base::invokeRestart
[10:25:35.287]             length <- base::length
[10:25:35.287]             list <- base::list
[10:25:35.287]             seq.int <- base::seq.int
[10:25:35.287]             signalCondition <- base::signalCondition
[10:25:35.287]             sys.calls <- base::sys.calls
[10:25:35.287]             `[[` <- base::`[[`
[10:25:35.287]             `+` <- base::`+`
[10:25:35.287]             `<<-` <- base::`<<-`
[10:25:35.287]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:25:35.287]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:25:35.287]                   3L)]
[10:25:35.287]             }
[10:25:35.287]             function(cond) {
[10:25:35.287]                 is_error <- inherits(cond, "error")
[10:25:35.287]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:25:35.287]                   NULL)
[10:25:35.287]                 if (is_error) {
[10:25:35.287]                   sessionInformation <- function() {
[10:25:35.287]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:25:35.287]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:25:35.287]                       search = base::search(), system = base::Sys.info())
[10:25:35.287]                   }
[10:25:35.287]                   ...future.conditions[[length(...future.conditions) + 
[10:25:35.287]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:25:35.287]                     cond$call), session = sessionInformation(), 
[10:25:35.287]                     timestamp = base::Sys.time(), signaled = 0L)
[10:25:35.287]                   signalCondition(cond)
[10:25:35.287]                 }
[10:25:35.287]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:25:35.287]                 "immediateCondition"))) {
[10:25:35.287]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:25:35.287]                   ...future.conditions[[length(...future.conditions) + 
[10:25:35.287]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:25:35.287]                   if (TRUE && !signal) {
[10:25:35.287]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:25:35.287]                     {
[10:25:35.287]                       inherits <- base::inherits
[10:25:35.287]                       invokeRestart <- base::invokeRestart
[10:25:35.287]                       is.null <- base::is.null
[10:25:35.287]                       muffled <- FALSE
[10:25:35.287]                       if (inherits(cond, "message")) {
[10:25:35.287]                         muffled <- grepl(pattern, "muffleMessage")
[10:25:35.287]                         if (muffled) 
[10:25:35.287]                           invokeRestart("muffleMessage")
[10:25:35.287]                       }
[10:25:35.287]                       else if (inherits(cond, "warning")) {
[10:25:35.287]                         muffled <- grepl(pattern, "muffleWarning")
[10:25:35.287]                         if (muffled) 
[10:25:35.287]                           invokeRestart("muffleWarning")
[10:25:35.287]                       }
[10:25:35.287]                       else if (inherits(cond, "condition")) {
[10:25:35.287]                         if (!is.null(pattern)) {
[10:25:35.287]                           computeRestarts <- base::computeRestarts
[10:25:35.287]                           grepl <- base::grepl
[10:25:35.287]                           restarts <- computeRestarts(cond)
[10:25:35.287]                           for (restart in restarts) {
[10:25:35.287]                             name <- restart$name
[10:25:35.287]                             if (is.null(name)) 
[10:25:35.287]                               next
[10:25:35.287]                             if (!grepl(pattern, name)) 
[10:25:35.287]                               next
[10:25:35.287]                             invokeRestart(restart)
[10:25:35.287]                             muffled <- TRUE
[10:25:35.287]                             break
[10:25:35.287]                           }
[10:25:35.287]                         }
[10:25:35.287]                       }
[10:25:35.287]                       invisible(muffled)
[10:25:35.287]                     }
[10:25:35.287]                     muffleCondition(cond, pattern = "^muffle")
[10:25:35.287]                   }
[10:25:35.287]                 }
[10:25:35.287]                 else {
[10:25:35.287]                   if (TRUE) {
[10:25:35.287]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:25:35.287]                     {
[10:25:35.287]                       inherits <- base::inherits
[10:25:35.287]                       invokeRestart <- base::invokeRestart
[10:25:35.287]                       is.null <- base::is.null
[10:25:35.287]                       muffled <- FALSE
[10:25:35.287]                       if (inherits(cond, "message")) {
[10:25:35.287]                         muffled <- grepl(pattern, "muffleMessage")
[10:25:35.287]                         if (muffled) 
[10:25:35.287]                           invokeRestart("muffleMessage")
[10:25:35.287]                       }
[10:25:35.287]                       else if (inherits(cond, "warning")) {
[10:25:35.287]                         muffled <- grepl(pattern, "muffleWarning")
[10:25:35.287]                         if (muffled) 
[10:25:35.287]                           invokeRestart("muffleWarning")
[10:25:35.287]                       }
[10:25:35.287]                       else if (inherits(cond, "condition")) {
[10:25:35.287]                         if (!is.null(pattern)) {
[10:25:35.287]                           computeRestarts <- base::computeRestarts
[10:25:35.287]                           grepl <- base::grepl
[10:25:35.287]                           restarts <- computeRestarts(cond)
[10:25:35.287]                           for (restart in restarts) {
[10:25:35.287]                             name <- restart$name
[10:25:35.287]                             if (is.null(name)) 
[10:25:35.287]                               next
[10:25:35.287]                             if (!grepl(pattern, name)) 
[10:25:35.287]                               next
[10:25:35.287]                             invokeRestart(restart)
[10:25:35.287]                             muffled <- TRUE
[10:25:35.287]                             break
[10:25:35.287]                           }
[10:25:35.287]                         }
[10:25:35.287]                       }
[10:25:35.287]                       invisible(muffled)
[10:25:35.287]                     }
[10:25:35.287]                     muffleCondition(cond, pattern = "^muffle")
[10:25:35.287]                   }
[10:25:35.287]                 }
[10:25:35.287]             }
[10:25:35.287]         }))
[10:25:35.287]     }, error = function(ex) {
[10:25:35.287]         base::structure(base::list(value = NULL, visible = NULL, 
[10:25:35.287]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:25:35.287]                 ...future.rng), started = ...future.startTime, 
[10:25:35.287]             finished = Sys.time(), session_uuid = NA_character_, 
[10:25:35.287]             version = "1.8"), class = "FutureResult")
[10:25:35.287]     }, finally = {
[10:25:35.287]         if (!identical(...future.workdir, getwd())) 
[10:25:35.287]             setwd(...future.workdir)
[10:25:35.287]         {
[10:25:35.287]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:25:35.287]                 ...future.oldOptions$nwarnings <- NULL
[10:25:35.287]             }
[10:25:35.287]             base::options(...future.oldOptions)
[10:25:35.287]             if (.Platform$OS.type == "windows") {
[10:25:35.287]                 old_names <- names(...future.oldEnvVars)
[10:25:35.287]                 envs <- base::Sys.getenv()
[10:25:35.287]                 names <- names(envs)
[10:25:35.287]                 common <- intersect(names, old_names)
[10:25:35.287]                 added <- setdiff(names, old_names)
[10:25:35.287]                 removed <- setdiff(old_names, names)
[10:25:35.287]                 changed <- common[...future.oldEnvVars[common] != 
[10:25:35.287]                   envs[common]]
[10:25:35.287]                 NAMES <- toupper(changed)
[10:25:35.287]                 args <- list()
[10:25:35.287]                 for (kk in seq_along(NAMES)) {
[10:25:35.287]                   name <- changed[[kk]]
[10:25:35.287]                   NAME <- NAMES[[kk]]
[10:25:35.287]                   if (name != NAME && is.element(NAME, old_names)) 
[10:25:35.287]                     next
[10:25:35.287]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:25:35.287]                 }
[10:25:35.287]                 NAMES <- toupper(added)
[10:25:35.287]                 for (kk in seq_along(NAMES)) {
[10:25:35.287]                   name <- added[[kk]]
[10:25:35.287]                   NAME <- NAMES[[kk]]
[10:25:35.287]                   if (name != NAME && is.element(NAME, old_names)) 
[10:25:35.287]                     next
[10:25:35.287]                   args[[name]] <- ""
[10:25:35.287]                 }
[10:25:35.287]                 NAMES <- toupper(removed)
[10:25:35.287]                 for (kk in seq_along(NAMES)) {
[10:25:35.287]                   name <- removed[[kk]]
[10:25:35.287]                   NAME <- NAMES[[kk]]
[10:25:35.287]                   if (name != NAME && is.element(NAME, old_names)) 
[10:25:35.287]                     next
[10:25:35.287]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:25:35.287]                 }
[10:25:35.287]                 if (length(args) > 0) 
[10:25:35.287]                   base::do.call(base::Sys.setenv, args = args)
[10:25:35.287]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:25:35.287]             }
[10:25:35.287]             else {
[10:25:35.287]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:25:35.287]             }
[10:25:35.287]             {
[10:25:35.287]                 if (base::length(...future.futureOptionsAdded) > 
[10:25:35.287]                   0L) {
[10:25:35.287]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:25:35.287]                   base::names(opts) <- ...future.futureOptionsAdded
[10:25:35.287]                   base::options(opts)
[10:25:35.287]                 }
[10:25:35.287]                 {
[10:25:35.287]                   {
[10:25:35.287]                     NULL
[10:25:35.287]                     RNGkind("Mersenne-Twister")
[10:25:35.287]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[10:25:35.287]                       inherits = FALSE)
[10:25:35.287]                   }
[10:25:35.287]                   options(future.plan = NULL)
[10:25:35.287]                   if (is.na(NA_character_)) 
[10:25:35.287]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:25:35.287]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:25:35.287]                   future::plan(list(function (..., envir = parent.frame()) 
[10:25:35.287]                   {
[10:25:35.287]                     future <- SequentialFuture(..., envir = envir)
[10:25:35.287]                     if (!future$lazy) 
[10:25:35.287]                       future <- run(future)
[10:25:35.287]                     invisible(future)
[10:25:35.287]                   }), .cleanup = FALSE, .init = FALSE)
[10:25:35.287]                 }
[10:25:35.287]             }
[10:25:35.287]         }
[10:25:35.287]     })
[10:25:35.287]     if (TRUE) {
[10:25:35.287]         base::sink(type = "output", split = FALSE)
[10:25:35.287]         if (TRUE) {
[10:25:35.287]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:25:35.287]         }
[10:25:35.287]         else {
[10:25:35.287]             ...future.result["stdout"] <- base::list(NULL)
[10:25:35.287]         }
[10:25:35.287]         base::close(...future.stdout)
[10:25:35.287]         ...future.stdout <- NULL
[10:25:35.287]     }
[10:25:35.287]     ...future.result$conditions <- ...future.conditions
[10:25:35.287]     ...future.result$finished <- base::Sys.time()
[10:25:35.287]     ...future.result
[10:25:35.287] }
[10:25:35.289] plan(): Setting new future strategy stack:
[10:25:35.289] List of future strategies:
[10:25:35.289] 1. sequential:
[10:25:35.289]    - args: function (..., envir = parent.frame())
[10:25:35.289]    - tweaked: FALSE
[10:25:35.289]    - call: NULL
[10:25:35.289] plan(): nbrOfWorkers() = 1
[10:25:35.290] plan(): Setting new future strategy stack:
[10:25:35.290] List of future strategies:
[10:25:35.290] 1. sequential:
[10:25:35.290]    - args: function (..., envir = parent.frame())
[10:25:35.290]    - tweaked: FALSE
[10:25:35.290]    - call: future::plan("sequential")
[10:25:35.291] plan(): nbrOfWorkers() = 1
[10:25:35.291] SequentialFuture started (and completed)
[10:25:35.291] - Launch lazy future ... done
[10:25:35.291] run() for ‘SequentialFuture’ ... done
[10:25:35.292] - run() ... done
[10:25:35.292] - resolved() ...
[10:25:35.292] resolved() for ‘SequentialFuture’ ...
[10:25:35.292] - state: ‘finished’
[10:25:35.292] - run: TRUE
[10:25:35.292] - result: ‘FutureResult’
[10:25:35.292] resolved() for ‘SequentialFuture’ ... done
[10:25:35.292] - resolved: TRUE
[10:25:35.292] - resolved() ... done
[10:25:35.292] resolved() for ‘SequentialFuture’ ... done
[1] TRUE
> y <- value(f)
> print(y)
[1] 42
> stopifnot(y == 42L)
> 
> 
> message("*** future() w/ gc = TRUE ...")
*** future() w/ gc = TRUE ...
> 
> f <- future(42L, gc = TRUE, lazy = TRUE)
[10:25:35.293] getGlobalsAndPackages() ...
[10:25:35.293] Searching for globals...
[10:25:35.293] 
[10:25:35.294] Searching for globals ... DONE
[10:25:35.294] - globals: [0] <none>
[10:25:35.294] getGlobalsAndPackages() ... DONE
> print(f)
Future:
Label: ‘<none>’
Expression:
[1] 42
Lazy evaluation: TRUE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: FALSE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: 3a7782f9-4680-c469-b2ca-331549c49586
Class: ‘Future’, ‘environment’
> y <- value(f)
[10:25:35.295] run() for ‘Future’ ...
[10:25:35.295] - state: ‘created’
[10:25:35.295] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:25:35.295] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[10:25:35.295] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[10:25:35.295]   - Field: ‘label’
[10:25:35.295]   - Field: ‘local’
[10:25:35.296]   - Field: ‘owner’
[10:25:35.296]   - Field: ‘envir’
[10:25:35.296]   - Field: ‘packages’
[10:25:35.296]   - Field: ‘gc’
[10:25:35.296]   - Field: ‘conditions’
[10:25:35.296]   - Field: ‘expr’
[10:25:35.296]   - Field: ‘uuid’
[10:25:35.296]   - Field: ‘seed’
[10:25:35.296]   - Field: ‘version’
[10:25:35.296]   - Field: ‘result’
[10:25:35.296]   - Field: ‘asynchronous’
[10:25:35.297]   - Field: ‘calls’
[10:25:35.297]   - Field: ‘globals’
[10:25:35.297]   - Field: ‘stdout’
[10:25:35.297]   - Field: ‘earlySignal’
[10:25:35.297]   - Field: ‘lazy’
[10:25:35.297]   - Field: ‘state’
[10:25:35.297] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[10:25:35.297] - Launch lazy future ...
[10:25:35.297] Packages needed by the future expression (n = 0): <none>
[10:25:35.297] Packages needed by future strategies (n = 0): <none>
[10:25:35.298] {
[10:25:35.298]     {
[10:25:35.298]         {
[10:25:35.298]             ...future.startTime <- base::Sys.time()
[10:25:35.298]             {
[10:25:35.298]                 {
[10:25:35.298]                   {
[10:25:35.298]                     base::local({
[10:25:35.298]                       has_future <- base::requireNamespace("future", 
[10:25:35.298]                         quietly = TRUE)
[10:25:35.298]                       if (has_future) {
[10:25:35.298]                         ns <- base::getNamespace("future")
[10:25:35.298]                         version <- ns[[".package"]][["version"]]
[10:25:35.298]                         if (is.null(version)) 
[10:25:35.298]                           version <- utils::packageVersion("future")
[10:25:35.298]                       }
[10:25:35.298]                       else {
[10:25:35.298]                         version <- NULL
[10:25:35.298]                       }
[10:25:35.298]                       if (!has_future || version < "1.8.0") {
[10:25:35.298]                         info <- base::c(r_version = base::gsub("R version ", 
[10:25:35.298]                           "", base::R.version$version.string), 
[10:25:35.298]                           platform = base::sprintf("%s (%s-bit)", 
[10:25:35.298]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:25:35.298]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[10:25:35.298]                             "release", "version")], collapse = " "), 
[10:25:35.298]                           hostname = base::Sys.info()[["nodename"]])
[10:25:35.298]                         info <- base::sprintf("%s: %s", base::names(info), 
[10:25:35.298]                           info)
[10:25:35.298]                         info <- base::paste(info, collapse = "; ")
[10:25:35.298]                         if (!has_future) {
[10:25:35.298]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:25:35.298]                             info)
[10:25:35.298]                         }
[10:25:35.298]                         else {
[10:25:35.298]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:25:35.298]                             info, version)
[10:25:35.298]                         }
[10:25:35.298]                         base::stop(msg)
[10:25:35.298]                       }
[10:25:35.298]                     })
[10:25:35.298]                   }
[10:25:35.298]                   options(future.plan = NULL)
[10:25:35.298]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:25:35.298]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:25:35.298]                 }
[10:25:35.298]                 ...future.workdir <- getwd()
[10:25:35.298]             }
[10:25:35.298]             ...future.oldOptions <- base::as.list(base::.Options)
[10:25:35.298]             ...future.oldEnvVars <- base::Sys.getenv()
[10:25:35.298]         }
[10:25:35.298]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:25:35.298]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[10:25:35.298]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:25:35.298]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:25:35.298]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:25:35.298]             future.stdout.windows.reencode = NULL, width = 80L)
[10:25:35.298]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:25:35.298]             base::names(...future.oldOptions))
[10:25:35.298]     }
[10:25:35.298]     if (FALSE) {
[10:25:35.298]     }
[10:25:35.298]     else {
[10:25:35.298]         if (TRUE) {
[10:25:35.298]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:25:35.298]                 open = "w")
[10:25:35.298]         }
[10:25:35.298]         else {
[10:25:35.298]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:25:35.298]                 windows = "NUL", "/dev/null"), open = "w")
[10:25:35.298]         }
[10:25:35.298]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:25:35.298]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:25:35.298]             base::sink(type = "output", split = FALSE)
[10:25:35.298]             base::close(...future.stdout)
[10:25:35.298]         }, add = TRUE)
[10:25:35.298]     }
[10:25:35.298]     ...future.frame <- base::sys.nframe()
[10:25:35.298]     ...future.conditions <- base::list()
[10:25:35.298]     ...future.rng <- base::globalenv()$.Random.seed
[10:25:35.298]     if (FALSE) {
[10:25:35.298]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:25:35.298]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:25:35.298]     }
[10:25:35.298]     ...future.result <- base::tryCatch({
[10:25:35.298]         base::withCallingHandlers({
[10:25:35.298]             ...future.value <- base::withVisible(base::local(42L))
[10:25:35.298]             future::FutureResult(value = ...future.value$value, 
[10:25:35.298]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:25:35.298]                   ...future.rng), globalenv = if (FALSE) 
[10:25:35.298]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:25:35.298]                     ...future.globalenv.names))
[10:25:35.298]                 else NULL, started = ...future.startTime, version = "1.8")
[10:25:35.298]         }, condition = base::local({
[10:25:35.298]             c <- base::c
[10:25:35.298]             inherits <- base::inherits
[10:25:35.298]             invokeRestart <- base::invokeRestart
[10:25:35.298]             length <- base::length
[10:25:35.298]             list <- base::list
[10:25:35.298]             seq.int <- base::seq.int
[10:25:35.298]             signalCondition <- base::signalCondition
[10:25:35.298]             sys.calls <- base::sys.calls
[10:25:35.298]             `[[` <- base::`[[`
[10:25:35.298]             `+` <- base::`+`
[10:25:35.298]             `<<-` <- base::`<<-`
[10:25:35.298]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:25:35.298]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:25:35.298]                   3L)]
[10:25:35.298]             }
[10:25:35.298]             function(cond) {
[10:25:35.298]                 is_error <- inherits(cond, "error")
[10:25:35.298]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:25:35.298]                   NULL)
[10:25:35.298]                 if (is_error) {
[10:25:35.298]                   sessionInformation <- function() {
[10:25:35.298]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:25:35.298]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:25:35.298]                       search = base::search(), system = base::Sys.info())
[10:25:35.298]                   }
[10:25:35.298]                   ...future.conditions[[length(...future.conditions) + 
[10:25:35.298]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:25:35.298]                     cond$call), session = sessionInformation(), 
[10:25:35.298]                     timestamp = base::Sys.time(), signaled = 0L)
[10:25:35.298]                   signalCondition(cond)
[10:25:35.298]                 }
[10:25:35.298]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:25:35.298]                 "immediateCondition"))) {
[10:25:35.298]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:25:35.298]                   ...future.conditions[[length(...future.conditions) + 
[10:25:35.298]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:25:35.298]                   if (TRUE && !signal) {
[10:25:35.298]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:25:35.298]                     {
[10:25:35.298]                       inherits <- base::inherits
[10:25:35.298]                       invokeRestart <- base::invokeRestart
[10:25:35.298]                       is.null <- base::is.null
[10:25:35.298]                       muffled <- FALSE
[10:25:35.298]                       if (inherits(cond, "message")) {
[10:25:35.298]                         muffled <- grepl(pattern, "muffleMessage")
[10:25:35.298]                         if (muffled) 
[10:25:35.298]                           invokeRestart("muffleMessage")
[10:25:35.298]                       }
[10:25:35.298]                       else if (inherits(cond, "warning")) {
[10:25:35.298]                         muffled <- grepl(pattern, "muffleWarning")
[10:25:35.298]                         if (muffled) 
[10:25:35.298]                           invokeRestart("muffleWarning")
[10:25:35.298]                       }
[10:25:35.298]                       else if (inherits(cond, "condition")) {
[10:25:35.298]                         if (!is.null(pattern)) {
[10:25:35.298]                           computeRestarts <- base::computeRestarts
[10:25:35.298]                           grepl <- base::grepl
[10:25:35.298]                           restarts <- computeRestarts(cond)
[10:25:35.298]                           for (restart in restarts) {
[10:25:35.298]                             name <- restart$name
[10:25:35.298]                             if (is.null(name)) 
[10:25:35.298]                               next
[10:25:35.298]                             if (!grepl(pattern, name)) 
[10:25:35.298]                               next
[10:25:35.298]                             invokeRestart(restart)
[10:25:35.298]                             muffled <- TRUE
[10:25:35.298]                             break
[10:25:35.298]                           }
[10:25:35.298]                         }
[10:25:35.298]                       }
[10:25:35.298]                       invisible(muffled)
[10:25:35.298]                     }
[10:25:35.298]                     muffleCondition(cond, pattern = "^muffle")
[10:25:35.298]                   }
[10:25:35.298]                 }
[10:25:35.298]                 else {
[10:25:35.298]                   if (TRUE) {
[10:25:35.298]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:25:35.298]                     {
[10:25:35.298]                       inherits <- base::inherits
[10:25:35.298]                       invokeRestart <- base::invokeRestart
[10:25:35.298]                       is.null <- base::is.null
[10:25:35.298]                       muffled <- FALSE
[10:25:35.298]                       if (inherits(cond, "message")) {
[10:25:35.298]                         muffled <- grepl(pattern, "muffleMessage")
[10:25:35.298]                         if (muffled) 
[10:25:35.298]                           invokeRestart("muffleMessage")
[10:25:35.298]                       }
[10:25:35.298]                       else if (inherits(cond, "warning")) {
[10:25:35.298]                         muffled <- grepl(pattern, "muffleWarning")
[10:25:35.298]                         if (muffled) 
[10:25:35.298]                           invokeRestart("muffleWarning")
[10:25:35.298]                       }
[10:25:35.298]                       else if (inherits(cond, "condition")) {
[10:25:35.298]                         if (!is.null(pattern)) {
[10:25:35.298]                           computeRestarts <- base::computeRestarts
[10:25:35.298]                           grepl <- base::grepl
[10:25:35.298]                           restarts <- computeRestarts(cond)
[10:25:35.298]                           for (restart in restarts) {
[10:25:35.298]                             name <- restart$name
[10:25:35.298]                             if (is.null(name)) 
[10:25:35.298]                               next
[10:25:35.298]                             if (!grepl(pattern, name)) 
[10:25:35.298]                               next
[10:25:35.298]                             invokeRestart(restart)
[10:25:35.298]                             muffled <- TRUE
[10:25:35.298]                             break
[10:25:35.298]                           }
[10:25:35.298]                         }
[10:25:35.298]                       }
[10:25:35.298]                       invisible(muffled)
[10:25:35.298]                     }
[10:25:35.298]                     muffleCondition(cond, pattern = "^muffle")
[10:25:35.298]                   }
[10:25:35.298]                 }
[10:25:35.298]             }
[10:25:35.298]         }))
[10:25:35.298]     }, error = function(ex) {
[10:25:35.298]         base::structure(base::list(value = NULL, visible = NULL, 
[10:25:35.298]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:25:35.298]                 ...future.rng), started = ...future.startTime, 
[10:25:35.298]             finished = Sys.time(), session_uuid = NA_character_, 
[10:25:35.298]             version = "1.8"), class = "FutureResult")
[10:25:35.298]     }, finally = {
[10:25:35.298]         if (!identical(...future.workdir, getwd())) 
[10:25:35.298]             setwd(...future.workdir)
[10:25:35.298]         {
[10:25:35.298]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:25:35.298]                 ...future.oldOptions$nwarnings <- NULL
[10:25:35.298]             }
[10:25:35.298]             base::options(...future.oldOptions)
[10:25:35.298]             if (.Platform$OS.type == "windows") {
[10:25:35.298]                 old_names <- names(...future.oldEnvVars)
[10:25:35.298]                 envs <- base::Sys.getenv()
[10:25:35.298]                 names <- names(envs)
[10:25:35.298]                 common <- intersect(names, old_names)
[10:25:35.298]                 added <- setdiff(names, old_names)
[10:25:35.298]                 removed <- setdiff(old_names, names)
[10:25:35.298]                 changed <- common[...future.oldEnvVars[common] != 
[10:25:35.298]                   envs[common]]
[10:25:35.298]                 NAMES <- toupper(changed)
[10:25:35.298]                 args <- list()
[10:25:35.298]                 for (kk in seq_along(NAMES)) {
[10:25:35.298]                   name <- changed[[kk]]
[10:25:35.298]                   NAME <- NAMES[[kk]]
[10:25:35.298]                   if (name != NAME && is.element(NAME, old_names)) 
[10:25:35.298]                     next
[10:25:35.298]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:25:35.298]                 }
[10:25:35.298]                 NAMES <- toupper(added)
[10:25:35.298]                 for (kk in seq_along(NAMES)) {
[10:25:35.298]                   name <- added[[kk]]
[10:25:35.298]                   NAME <- NAMES[[kk]]
[10:25:35.298]                   if (name != NAME && is.element(NAME, old_names)) 
[10:25:35.298]                     next
[10:25:35.298]                   args[[name]] <- ""
[10:25:35.298]                 }
[10:25:35.298]                 NAMES <- toupper(removed)
[10:25:35.298]                 for (kk in seq_along(NAMES)) {
[10:25:35.298]                   name <- removed[[kk]]
[10:25:35.298]                   NAME <- NAMES[[kk]]
[10:25:35.298]                   if (name != NAME && is.element(NAME, old_names)) 
[10:25:35.298]                     next
[10:25:35.298]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:25:35.298]                 }
[10:25:35.298]                 if (length(args) > 0) 
[10:25:35.298]                   base::do.call(base::Sys.setenv, args = args)
[10:25:35.298]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:25:35.298]             }
[10:25:35.298]             else {
[10:25:35.298]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:25:35.298]             }
[10:25:35.298]             {
[10:25:35.298]                 if (base::length(...future.futureOptionsAdded) > 
[10:25:35.298]                   0L) {
[10:25:35.298]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:25:35.298]                   base::names(opts) <- ...future.futureOptionsAdded
[10:25:35.298]                   base::options(opts)
[10:25:35.298]                 }
[10:25:35.298]                 {
[10:25:35.298]                   {
[10:25:35.298]                     NULL
[10:25:35.298]                     RNGkind("Mersenne-Twister")
[10:25:35.298]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[10:25:35.298]                       inherits = FALSE)
[10:25:35.298]                   }
[10:25:35.298]                   options(future.plan = NULL)
[10:25:35.298]                   if (is.na(NA_character_)) 
[10:25:35.298]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:25:35.298]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:25:35.298]                   future::plan(list(function (..., envir = parent.frame()) 
[10:25:35.298]                   {
[10:25:35.298]                     future <- SequentialFuture(..., envir = envir)
[10:25:35.298]                     if (!future$lazy) 
[10:25:35.298]                       future <- run(future)
[10:25:35.298]                     invisible(future)
[10:25:35.298]                   }), .cleanup = FALSE, .init = FALSE)
[10:25:35.298]                 }
[10:25:35.298]             }
[10:25:35.298]         }
[10:25:35.298]     })
[10:25:35.298]     if (TRUE) {
[10:25:35.298]         base::sink(type = "output", split = FALSE)
[10:25:35.298]         if (TRUE) {
[10:25:35.298]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:25:35.298]         }
[10:25:35.298]         else {
[10:25:35.298]             ...future.result["stdout"] <- base::list(NULL)
[10:25:35.298]         }
[10:25:35.298]         base::close(...future.stdout)
[10:25:35.298]         ...future.stdout <- NULL
[10:25:35.298]     }
[10:25:35.298]     ...future.result$conditions <- ...future.conditions
[10:25:35.298]     ...future.result$finished <- base::Sys.time()
[10:25:35.298]     ...future.result
[10:25:35.298] }
[10:25:35.300] plan(): Setting new future strategy stack:
[10:25:35.300] List of future strategies:
[10:25:35.300] 1. sequential:
[10:25:35.300]    - args: function (..., envir = parent.frame())
[10:25:35.300]    - tweaked: FALSE
[10:25:35.300]    - call: NULL
[10:25:35.300] plan(): nbrOfWorkers() = 1
[10:25:35.301] plan(): Setting new future strategy stack:
[10:25:35.301] List of future strategies:
[10:25:35.301] 1. sequential:
[10:25:35.301]    - args: function (..., envir = parent.frame())
[10:25:35.301]    - tweaked: FALSE
[10:25:35.301]    - call: future::plan("sequential")
[10:25:35.301] plan(): nbrOfWorkers() = 1
[10:25:35.301] SequentialFuture started (and completed)
[10:25:35.301] - Launch lazy future ... done
[10:25:35.301] run() for ‘SequentialFuture’ ... done
> print(y)
[1] 42
> stopifnot(y == 42L)
> 
> message("*** future() w/ gc = TRUE ... DONE")
*** future() w/ gc = TRUE ... DONE
> message("*** future() ... DONE")
*** future() ... DONE
> 
> message("*** future() ...")
*** future() ...
> 
> f <- future({
+   42L
+ }, lazy = TRUE)
[10:25:35.302] getGlobalsAndPackages() ...
[10:25:35.302] Searching for globals...
[10:25:35.303] - globals found: [1] ‘{’
[10:25:35.303] Searching for globals ... DONE
[10:25:35.303] Resolving globals: FALSE
[10:25:35.303] 
[10:25:35.303] 
[10:25:35.303] getGlobalsAndPackages() ... DONE
> 
> print(resolved(f))
[10:25:35.303] resolved() for ‘Future’ ...
[10:25:35.304] - state: ‘created’
[10:25:35.304] - run: TRUE
[10:25:35.304] - run() ...
[10:25:35.304] run() for ‘Future’ ...
[10:25:35.304] - state: ‘created’
[10:25:35.304] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:25:35.304] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[10:25:35.304] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[10:25:35.304]   - Field: ‘label’
[10:25:35.305]   - Field: ‘local’
[10:25:35.305]   - Field: ‘owner’
[10:25:35.305]   - Field: ‘envir’
[10:25:35.305]   - Field: ‘packages’
[10:25:35.305]   - Field: ‘gc’
[10:25:35.305]   - Field: ‘conditions’
[10:25:35.305]   - Field: ‘expr’
[10:25:35.305]   - Field: ‘uuid’
[10:25:35.305]   - Field: ‘seed’
[10:25:35.305]   - Field: ‘version’
[10:25:35.305]   - Field: ‘result’
[10:25:35.306]   - Field: ‘asynchronous’
[10:25:35.306]   - Field: ‘calls’
[10:25:35.306]   - Field: ‘globals’
[10:25:35.306]   - Field: ‘stdout’
[10:25:35.306]   - Field: ‘earlySignal’
[10:25:35.306]   - Field: ‘lazy’
[10:25:35.306]   - Field: ‘state’
[10:25:35.306] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[10:25:35.306] - Launch lazy future ...
[10:25:35.306] Packages needed by the future expression (n = 0): <none>
[10:25:35.307] Packages needed by future strategies (n = 0): <none>
[10:25:35.307] {
[10:25:35.307]     {
[10:25:35.307]         {
[10:25:35.307]             ...future.startTime <- base::Sys.time()
[10:25:35.307]             {
[10:25:35.307]                 {
[10:25:35.307]                   {
[10:25:35.307]                     base::local({
[10:25:35.307]                       has_future <- base::requireNamespace("future", 
[10:25:35.307]                         quietly = TRUE)
[10:25:35.307]                       if (has_future) {
[10:25:35.307]                         ns <- base::getNamespace("future")
[10:25:35.307]                         version <- ns[[".package"]][["version"]]
[10:25:35.307]                         if (is.null(version)) 
[10:25:35.307]                           version <- utils::packageVersion("future")
[10:25:35.307]                       }
[10:25:35.307]                       else {
[10:25:35.307]                         version <- NULL
[10:25:35.307]                       }
[10:25:35.307]                       if (!has_future || version < "1.8.0") {
[10:25:35.307]                         info <- base::c(r_version = base::gsub("R version ", 
[10:25:35.307]                           "", base::R.version$version.string), 
[10:25:35.307]                           platform = base::sprintf("%s (%s-bit)", 
[10:25:35.307]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:25:35.307]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[10:25:35.307]                             "release", "version")], collapse = " "), 
[10:25:35.307]                           hostname = base::Sys.info()[["nodename"]])
[10:25:35.307]                         info <- base::sprintf("%s: %s", base::names(info), 
[10:25:35.307]                           info)
[10:25:35.307]                         info <- base::paste(info, collapse = "; ")
[10:25:35.307]                         if (!has_future) {
[10:25:35.307]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:25:35.307]                             info)
[10:25:35.307]                         }
[10:25:35.307]                         else {
[10:25:35.307]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:25:35.307]                             info, version)
[10:25:35.307]                         }
[10:25:35.307]                         base::stop(msg)
[10:25:35.307]                       }
[10:25:35.307]                     })
[10:25:35.307]                   }
[10:25:35.307]                   options(future.plan = NULL)
[10:25:35.307]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:25:35.307]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:25:35.307]                 }
[10:25:35.307]                 ...future.workdir <- getwd()
[10:25:35.307]             }
[10:25:35.307]             ...future.oldOptions <- base::as.list(base::.Options)
[10:25:35.307]             ...future.oldEnvVars <- base::Sys.getenv()
[10:25:35.307]         }
[10:25:35.307]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:25:35.307]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[10:25:35.307]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:25:35.307]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:25:35.307]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:25:35.307]             future.stdout.windows.reencode = NULL, width = 80L)
[10:25:35.307]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:25:35.307]             base::names(...future.oldOptions))
[10:25:35.307]     }
[10:25:35.307]     if (FALSE) {
[10:25:35.307]     }
[10:25:35.307]     else {
[10:25:35.307]         if (TRUE) {
[10:25:35.307]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:25:35.307]                 open = "w")
[10:25:35.307]         }
[10:25:35.307]         else {
[10:25:35.307]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:25:35.307]                 windows = "NUL", "/dev/null"), open = "w")
[10:25:35.307]         }
[10:25:35.307]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:25:35.307]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:25:35.307]             base::sink(type = "output", split = FALSE)
[10:25:35.307]             base::close(...future.stdout)
[10:25:35.307]         }, add = TRUE)
[10:25:35.307]     }
[10:25:35.307]     ...future.frame <- base::sys.nframe()
[10:25:35.307]     ...future.conditions <- base::list()
[10:25:35.307]     ...future.rng <- base::globalenv()$.Random.seed
[10:25:35.307]     if (FALSE) {
[10:25:35.307]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:25:35.307]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:25:35.307]     }
[10:25:35.307]     ...future.result <- base::tryCatch({
[10:25:35.307]         base::withCallingHandlers({
[10:25:35.307]             ...future.value <- base::withVisible(base::local({
[10:25:35.307]                 42L
[10:25:35.307]             }))
[10:25:35.307]             future::FutureResult(value = ...future.value$value, 
[10:25:35.307]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:25:35.307]                   ...future.rng), globalenv = if (FALSE) 
[10:25:35.307]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:25:35.307]                     ...future.globalenv.names))
[10:25:35.307]                 else NULL, started = ...future.startTime, version = "1.8")
[10:25:35.307]         }, condition = base::local({
[10:25:35.307]             c <- base::c
[10:25:35.307]             inherits <- base::inherits
[10:25:35.307]             invokeRestart <- base::invokeRestart
[10:25:35.307]             length <- base::length
[10:25:35.307]             list <- base::list
[10:25:35.307]             seq.int <- base::seq.int
[10:25:35.307]             signalCondition <- base::signalCondition
[10:25:35.307]             sys.calls <- base::sys.calls
[10:25:35.307]             `[[` <- base::`[[`
[10:25:35.307]             `+` <- base::`+`
[10:25:35.307]             `<<-` <- base::`<<-`
[10:25:35.307]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:25:35.307]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:25:35.307]                   3L)]
[10:25:35.307]             }
[10:25:35.307]             function(cond) {
[10:25:35.307]                 is_error <- inherits(cond, "error")
[10:25:35.307]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:25:35.307]                   NULL)
[10:25:35.307]                 if (is_error) {
[10:25:35.307]                   sessionInformation <- function() {
[10:25:35.307]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:25:35.307]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:25:35.307]                       search = base::search(), system = base::Sys.info())
[10:25:35.307]                   }
[10:25:35.307]                   ...future.conditions[[length(...future.conditions) + 
[10:25:35.307]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:25:35.307]                     cond$call), session = sessionInformation(), 
[10:25:35.307]                     timestamp = base::Sys.time(), signaled = 0L)
[10:25:35.307]                   signalCondition(cond)
[10:25:35.307]                 }
[10:25:35.307]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:25:35.307]                 "immediateCondition"))) {
[10:25:35.307]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:25:35.307]                   ...future.conditions[[length(...future.conditions) + 
[10:25:35.307]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:25:35.307]                   if (TRUE && !signal) {
[10:25:35.307]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:25:35.307]                     {
[10:25:35.307]                       inherits <- base::inherits
[10:25:35.307]                       invokeRestart <- base::invokeRestart
[10:25:35.307]                       is.null <- base::is.null
[10:25:35.307]                       muffled <- FALSE
[10:25:35.307]                       if (inherits(cond, "message")) {
[10:25:35.307]                         muffled <- grepl(pattern, "muffleMessage")
[10:25:35.307]                         if (muffled) 
[10:25:35.307]                           invokeRestart("muffleMessage")
[10:25:35.307]                       }
[10:25:35.307]                       else if (inherits(cond, "warning")) {
[10:25:35.307]                         muffled <- grepl(pattern, "muffleWarning")
[10:25:35.307]                         if (muffled) 
[10:25:35.307]                           invokeRestart("muffleWarning")
[10:25:35.307]                       }
[10:25:35.307]                       else if (inherits(cond, "condition")) {
[10:25:35.307]                         if (!is.null(pattern)) {
[10:25:35.307]                           computeRestarts <- base::computeRestarts
[10:25:35.307]                           grepl <- base::grepl
[10:25:35.307]                           restarts <- computeRestarts(cond)
[10:25:35.307]                           for (restart in restarts) {
[10:25:35.307]                             name <- restart$name
[10:25:35.307]                             if (is.null(name)) 
[10:25:35.307]                               next
[10:25:35.307]                             if (!grepl(pattern, name)) 
[10:25:35.307]                               next
[10:25:35.307]                             invokeRestart(restart)
[10:25:35.307]                             muffled <- TRUE
[10:25:35.307]                             break
[10:25:35.307]                           }
[10:25:35.307]                         }
[10:25:35.307]                       }
[10:25:35.307]                       invisible(muffled)
[10:25:35.307]                     }
[10:25:35.307]                     muffleCondition(cond, pattern = "^muffle")
[10:25:35.307]                   }
[10:25:35.307]                 }
[10:25:35.307]                 else {
[10:25:35.307]                   if (TRUE) {
[10:25:35.307]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:25:35.307]                     {
[10:25:35.307]                       inherits <- base::inherits
[10:25:35.307]                       invokeRestart <- base::invokeRestart
[10:25:35.307]                       is.null <- base::is.null
[10:25:35.307]                       muffled <- FALSE
[10:25:35.307]                       if (inherits(cond, "message")) {
[10:25:35.307]                         muffled <- grepl(pattern, "muffleMessage")
[10:25:35.307]                         if (muffled) 
[10:25:35.307]                           invokeRestart("muffleMessage")
[10:25:35.307]                       }
[10:25:35.307]                       else if (inherits(cond, "warning")) {
[10:25:35.307]                         muffled <- grepl(pattern, "muffleWarning")
[10:25:35.307]                         if (muffled) 
[10:25:35.307]                           invokeRestart("muffleWarning")
[10:25:35.307]                       }
[10:25:35.307]                       else if (inherits(cond, "condition")) {
[10:25:35.307]                         if (!is.null(pattern)) {
[10:25:35.307]                           computeRestarts <- base::computeRestarts
[10:25:35.307]                           grepl <- base::grepl
[10:25:35.307]                           restarts <- computeRestarts(cond)
[10:25:35.307]                           for (restart in restarts) {
[10:25:35.307]                             name <- restart$name
[10:25:35.307]                             if (is.null(name)) 
[10:25:35.307]                               next
[10:25:35.307]                             if (!grepl(pattern, name)) 
[10:25:35.307]                               next
[10:25:35.307]                             invokeRestart(restart)
[10:25:35.307]                             muffled <- TRUE
[10:25:35.307]                             break
[10:25:35.307]                           }
[10:25:35.307]                         }
[10:25:35.307]                       }
[10:25:35.307]                       invisible(muffled)
[10:25:35.307]                     }
[10:25:35.307]                     muffleCondition(cond, pattern = "^muffle")
[10:25:35.307]                   }
[10:25:35.307]                 }
[10:25:35.307]             }
[10:25:35.307]         }))
[10:25:35.307]     }, error = function(ex) {
[10:25:35.307]         base::structure(base::list(value = NULL, visible = NULL, 
[10:25:35.307]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:25:35.307]                 ...future.rng), started = ...future.startTime, 
[10:25:35.307]             finished = Sys.time(), session_uuid = NA_character_, 
[10:25:35.307]             version = "1.8"), class = "FutureResult")
[10:25:35.307]     }, finally = {
[10:25:35.307]         if (!identical(...future.workdir, getwd())) 
[10:25:35.307]             setwd(...future.workdir)
[10:25:35.307]         {
[10:25:35.307]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:25:35.307]                 ...future.oldOptions$nwarnings <- NULL
[10:25:35.307]             }
[10:25:35.307]             base::options(...future.oldOptions)
[10:25:35.307]             if (.Platform$OS.type == "windows") {
[10:25:35.307]                 old_names <- names(...future.oldEnvVars)
[10:25:35.307]                 envs <- base::Sys.getenv()
[10:25:35.307]                 names <- names(envs)
[10:25:35.307]                 common <- intersect(names, old_names)
[10:25:35.307]                 added <- setdiff(names, old_names)
[10:25:35.307]                 removed <- setdiff(old_names, names)
[10:25:35.307]                 changed <- common[...future.oldEnvVars[common] != 
[10:25:35.307]                   envs[common]]
[10:25:35.307]                 NAMES <- toupper(changed)
[10:25:35.307]                 args <- list()
[10:25:35.307]                 for (kk in seq_along(NAMES)) {
[10:25:35.307]                   name <- changed[[kk]]
[10:25:35.307]                   NAME <- NAMES[[kk]]
[10:25:35.307]                   if (name != NAME && is.element(NAME, old_names)) 
[10:25:35.307]                     next
[10:25:35.307]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:25:35.307]                 }
[10:25:35.307]                 NAMES <- toupper(added)
[10:25:35.307]                 for (kk in seq_along(NAMES)) {
[10:25:35.307]                   name <- added[[kk]]
[10:25:35.307]                   NAME <- NAMES[[kk]]
[10:25:35.307]                   if (name != NAME && is.element(NAME, old_names)) 
[10:25:35.307]                     next
[10:25:35.307]                   args[[name]] <- ""
[10:25:35.307]                 }
[10:25:35.307]                 NAMES <- toupper(removed)
[10:25:35.307]                 for (kk in seq_along(NAMES)) {
[10:25:35.307]                   name <- removed[[kk]]
[10:25:35.307]                   NAME <- NAMES[[kk]]
[10:25:35.307]                   if (name != NAME && is.element(NAME, old_names)) 
[10:25:35.307]                     next
[10:25:35.307]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:25:35.307]                 }
[10:25:35.307]                 if (length(args) > 0) 
[10:25:35.307]                   base::do.call(base::Sys.setenv, args = args)
[10:25:35.307]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:25:35.307]             }
[10:25:35.307]             else {
[10:25:35.307]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:25:35.307]             }
[10:25:35.307]             {
[10:25:35.307]                 if (base::length(...future.futureOptionsAdded) > 
[10:25:35.307]                   0L) {
[10:25:35.307]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:25:35.307]                   base::names(opts) <- ...future.futureOptionsAdded
[10:25:35.307]                   base::options(opts)
[10:25:35.307]                 }
[10:25:35.307]                 {
[10:25:35.307]                   {
[10:25:35.307]                     NULL
[10:25:35.307]                     RNGkind("Mersenne-Twister")
[10:25:35.307]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[10:25:35.307]                       inherits = FALSE)
[10:25:35.307]                   }
[10:25:35.307]                   options(future.plan = NULL)
[10:25:35.307]                   if (is.na(NA_character_)) 
[10:25:35.307]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:25:35.307]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:25:35.307]                   future::plan(list(function (..., envir = parent.frame()) 
[10:25:35.307]                   {
[10:25:35.307]                     future <- SequentialFuture(..., envir = envir)
[10:25:35.307]                     if (!future$lazy) 
[10:25:35.307]                       future <- run(future)
[10:25:35.307]                     invisible(future)
[10:25:35.307]                   }), .cleanup = FALSE, .init = FALSE)
[10:25:35.307]                 }
[10:25:35.307]             }
[10:25:35.307]         }
[10:25:35.307]     })
[10:25:35.307]     if (TRUE) {
[10:25:35.307]         base::sink(type = "output", split = FALSE)
[10:25:35.307]         if (TRUE) {
[10:25:35.307]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:25:35.307]         }
[10:25:35.307]         else {
[10:25:35.307]             ...future.result["stdout"] <- base::list(NULL)
[10:25:35.307]         }
[10:25:35.307]         base::close(...future.stdout)
[10:25:35.307]         ...future.stdout <- NULL
[10:25:35.307]     }
[10:25:35.307]     ...future.result$conditions <- ...future.conditions
[10:25:35.307]     ...future.result$finished <- base::Sys.time()
[10:25:35.307]     ...future.result
[10:25:35.307] }
[10:25:35.309] plan(): Setting new future strategy stack:
[10:25:35.309] List of future strategies:
[10:25:35.309] 1. sequential:
[10:25:35.309]    - args: function (..., envir = parent.frame())
[10:25:35.309]    - tweaked: FALSE
[10:25:35.309]    - call: NULL
[10:25:35.309] plan(): nbrOfWorkers() = 1
[10:25:35.310] plan(): Setting new future strategy stack:
[10:25:35.310] List of future strategies:
[10:25:35.310] 1. sequential:
[10:25:35.310]    - args: function (..., envir = parent.frame())
[10:25:35.310]    - tweaked: FALSE
[10:25:35.310]    - call: future::plan("sequential")
[10:25:35.310] plan(): nbrOfWorkers() = 1
[10:25:35.310] SequentialFuture started (and completed)
[10:25:35.310] - Launch lazy future ... done
[10:25:35.311] run() for ‘SequentialFuture’ ... done
[10:25:35.311] - run() ... done
[10:25:35.311] - resolved() ...
[10:25:35.311] resolved() for ‘SequentialFuture’ ...
[10:25:35.311] - state: ‘finished’
[10:25:35.311] - run: TRUE
[10:25:35.311] - result: ‘FutureResult’
[10:25:35.311] resolved() for ‘SequentialFuture’ ... done
[10:25:35.311] - resolved: TRUE
[10:25:35.311] - resolved() ... done
[10:25:35.311] resolved() for ‘SequentialFuture’ ... done
[1] TRUE
> y <- value(f)
> print(y)
[1] 42
> stopifnot(y == 42L)
> 
> 
> message("*** future() w/ gc = TRUE ...")
*** future() w/ gc = TRUE ...
> 
> f <- future(42L, gc = TRUE, lazy = TRUE)
[10:25:35.312] getGlobalsAndPackages() ...
[10:25:35.312] Searching for globals...
[10:25:35.312] 
[10:25:35.312] Searching for globals ... DONE
[10:25:35.312] - globals: [0] <none>
[10:25:35.315] getGlobalsAndPackages() ... DONE
> print(f)
Future:
Label: ‘<none>’
Expression:
[1] 42
Lazy evaluation: TRUE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: FALSE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: 3a7782f9-4680-c469-b2ca-331549c49586
Class: ‘Future’, ‘environment’
> y <- value(f)
[10:25:35.315] run() for ‘Future’ ...
[10:25:35.315] - state: ‘created’
[10:25:35.315] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:25:35.316] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[10:25:35.316] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[10:25:35.316]   - Field: ‘label’
[10:25:35.316]   - Field: ‘local’
[10:25:35.316]   - Field: ‘owner’
[10:25:35.316]   - Field: ‘envir’
[10:25:35.316]   - Field: ‘packages’
[10:25:35.316]   - Field: ‘gc’
[10:25:35.316]   - Field: ‘conditions’
[10:25:35.316]   - Field: ‘expr’
[10:25:35.317]   - Field: ‘uuid’
[10:25:35.317]   - Field: ‘seed’
[10:25:35.317]   - Field: ‘version’
[10:25:35.317]   - Field: ‘result’
[10:25:35.317]   - Field: ‘asynchronous’
[10:25:35.317]   - Field: ‘calls’
[10:25:35.317]   - Field: ‘globals’
[10:25:35.317]   - Field: ‘stdout’
[10:25:35.317]   - Field: ‘earlySignal’
[10:25:35.317]   - Field: ‘lazy’
[10:25:35.317]   - Field: ‘state’
[10:25:35.318] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[10:25:35.318] - Launch lazy future ...
[10:25:35.318] Packages needed by the future expression (n = 0): <none>
[10:25:35.318] Packages needed by future strategies (n = 0): <none>
[10:25:35.318] {
[10:25:35.318]     {
[10:25:35.318]         {
[10:25:35.318]             ...future.startTime <- base::Sys.time()
[10:25:35.318]             {
[10:25:35.318]                 {
[10:25:35.318]                   {
[10:25:35.318]                     base::local({
[10:25:35.318]                       has_future <- base::requireNamespace("future", 
[10:25:35.318]                         quietly = TRUE)
[10:25:35.318]                       if (has_future) {
[10:25:35.318]                         ns <- base::getNamespace("future")
[10:25:35.318]                         version <- ns[[".package"]][["version"]]
[10:25:35.318]                         if (is.null(version)) 
[10:25:35.318]                           version <- utils::packageVersion("future")
[10:25:35.318]                       }
[10:25:35.318]                       else {
[10:25:35.318]                         version <- NULL
[10:25:35.318]                       }
[10:25:35.318]                       if (!has_future || version < "1.8.0") {
[10:25:35.318]                         info <- base::c(r_version = base::gsub("R version ", 
[10:25:35.318]                           "", base::R.version$version.string), 
[10:25:35.318]                           platform = base::sprintf("%s (%s-bit)", 
[10:25:35.318]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:25:35.318]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[10:25:35.318]                             "release", "version")], collapse = " "), 
[10:25:35.318]                           hostname = base::Sys.info()[["nodename"]])
[10:25:35.318]                         info <- base::sprintf("%s: %s", base::names(info), 
[10:25:35.318]                           info)
[10:25:35.318]                         info <- base::paste(info, collapse = "; ")
[10:25:35.318]                         if (!has_future) {
[10:25:35.318]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:25:35.318]                             info)
[10:25:35.318]                         }
[10:25:35.318]                         else {
[10:25:35.318]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:25:35.318]                             info, version)
[10:25:35.318]                         }
[10:25:35.318]                         base::stop(msg)
[10:25:35.318]                       }
[10:25:35.318]                     })
[10:25:35.318]                   }
[10:25:35.318]                   options(future.plan = NULL)
[10:25:35.318]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:25:35.318]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:25:35.318]                 }
[10:25:35.318]                 ...future.workdir <- getwd()
[10:25:35.318]             }
[10:25:35.318]             ...future.oldOptions <- base::as.list(base::.Options)
[10:25:35.318]             ...future.oldEnvVars <- base::Sys.getenv()
[10:25:35.318]         }
[10:25:35.318]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:25:35.318]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[10:25:35.318]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:25:35.318]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:25:35.318]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:25:35.318]             future.stdout.windows.reencode = NULL, width = 80L)
[10:25:35.318]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:25:35.318]             base::names(...future.oldOptions))
[10:25:35.318]     }
[10:25:35.318]     if (FALSE) {
[10:25:35.318]     }
[10:25:35.318]     else {
[10:25:35.318]         if (TRUE) {
[10:25:35.318]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:25:35.318]                 open = "w")
[10:25:35.318]         }
[10:25:35.318]         else {
[10:25:35.318]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:25:35.318]                 windows = "NUL", "/dev/null"), open = "w")
[10:25:35.318]         }
[10:25:35.318]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:25:35.318]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:25:35.318]             base::sink(type = "output", split = FALSE)
[10:25:35.318]             base::close(...future.stdout)
[10:25:35.318]         }, add = TRUE)
[10:25:35.318]     }
[10:25:35.318]     ...future.frame <- base::sys.nframe()
[10:25:35.318]     ...future.conditions <- base::list()
[10:25:35.318]     ...future.rng <- base::globalenv()$.Random.seed
[10:25:35.318]     if (FALSE) {
[10:25:35.318]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:25:35.318]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:25:35.318]     }
[10:25:35.318]     ...future.result <- base::tryCatch({
[10:25:35.318]         base::withCallingHandlers({
[10:25:35.318]             ...future.value <- base::withVisible(base::local(42L))
[10:25:35.318]             future::FutureResult(value = ...future.value$value, 
[10:25:35.318]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:25:35.318]                   ...future.rng), globalenv = if (FALSE) 
[10:25:35.318]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:25:35.318]                     ...future.globalenv.names))
[10:25:35.318]                 else NULL, started = ...future.startTime, version = "1.8")
[10:25:35.318]         }, condition = base::local({
[10:25:35.318]             c <- base::c
[10:25:35.318]             inherits <- base::inherits
[10:25:35.318]             invokeRestart <- base::invokeRestart
[10:25:35.318]             length <- base::length
[10:25:35.318]             list <- base::list
[10:25:35.318]             seq.int <- base::seq.int
[10:25:35.318]             signalCondition <- base::signalCondition
[10:25:35.318]             sys.calls <- base::sys.calls
[10:25:35.318]             `[[` <- base::`[[`
[10:25:35.318]             `+` <- base::`+`
[10:25:35.318]             `<<-` <- base::`<<-`
[10:25:35.318]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:25:35.318]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:25:35.318]                   3L)]
[10:25:35.318]             }
[10:25:35.318]             function(cond) {
[10:25:35.318]                 is_error <- inherits(cond, "error")
[10:25:35.318]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:25:35.318]                   NULL)
[10:25:35.318]                 if (is_error) {
[10:25:35.318]                   sessionInformation <- function() {
[10:25:35.318]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:25:35.318]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:25:35.318]                       search = base::search(), system = base::Sys.info())
[10:25:35.318]                   }
[10:25:35.318]                   ...future.conditions[[length(...future.conditions) + 
[10:25:35.318]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:25:35.318]                     cond$call), session = sessionInformation(), 
[10:25:35.318]                     timestamp = base::Sys.time(), signaled = 0L)
[10:25:35.318]                   signalCondition(cond)
[10:25:35.318]                 }
[10:25:35.318]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:25:35.318]                 "immediateCondition"))) {
[10:25:35.318]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:25:35.318]                   ...future.conditions[[length(...future.conditions) + 
[10:25:35.318]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:25:35.318]                   if (TRUE && !signal) {
[10:25:35.318]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:25:35.318]                     {
[10:25:35.318]                       inherits <- base::inherits
[10:25:35.318]                       invokeRestart <- base::invokeRestart
[10:25:35.318]                       is.null <- base::is.null
[10:25:35.318]                       muffled <- FALSE
[10:25:35.318]                       if (inherits(cond, "message")) {
[10:25:35.318]                         muffled <- grepl(pattern, "muffleMessage")
[10:25:35.318]                         if (muffled) 
[10:25:35.318]                           invokeRestart("muffleMessage")
[10:25:35.318]                       }
[10:25:35.318]                       else if (inherits(cond, "warning")) {
[10:25:35.318]                         muffled <- grepl(pattern, "muffleWarning")
[10:25:35.318]                         if (muffled) 
[10:25:35.318]                           invokeRestart("muffleWarning")
[10:25:35.318]                       }
[10:25:35.318]                       else if (inherits(cond, "condition")) {
[10:25:35.318]                         if (!is.null(pattern)) {
[10:25:35.318]                           computeRestarts <- base::computeRestarts
[10:25:35.318]                           grepl <- base::grepl
[10:25:35.318]                           restarts <- computeRestarts(cond)
[10:25:35.318]                           for (restart in restarts) {
[10:25:35.318]                             name <- restart$name
[10:25:35.318]                             if (is.null(name)) 
[10:25:35.318]                               next
[10:25:35.318]                             if (!grepl(pattern, name)) 
[10:25:35.318]                               next
[10:25:35.318]                             invokeRestart(restart)
[10:25:35.318]                             muffled <- TRUE
[10:25:35.318]                             break
[10:25:35.318]                           }
[10:25:35.318]                         }
[10:25:35.318]                       }
[10:25:35.318]                       invisible(muffled)
[10:25:35.318]                     }
[10:25:35.318]                     muffleCondition(cond, pattern = "^muffle")
[10:25:35.318]                   }
[10:25:35.318]                 }
[10:25:35.318]                 else {
[10:25:35.318]                   if (TRUE) {
[10:25:35.318]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:25:35.318]                     {
[10:25:35.318]                       inherits <- base::inherits
[10:25:35.318]                       invokeRestart <- base::invokeRestart
[10:25:35.318]                       is.null <- base::is.null
[10:25:35.318]                       muffled <- FALSE
[10:25:35.318]                       if (inherits(cond, "message")) {
[10:25:35.318]                         muffled <- grepl(pattern, "muffleMessage")
[10:25:35.318]                         if (muffled) 
[10:25:35.318]                           invokeRestart("muffleMessage")
[10:25:35.318]                       }
[10:25:35.318]                       else if (inherits(cond, "warning")) {
[10:25:35.318]                         muffled <- grepl(pattern, "muffleWarning")
[10:25:35.318]                         if (muffled) 
[10:25:35.318]                           invokeRestart("muffleWarning")
[10:25:35.318]                       }
[10:25:35.318]                       else if (inherits(cond, "condition")) {
[10:25:35.318]                         if (!is.null(pattern)) {
[10:25:35.318]                           computeRestarts <- base::computeRestarts
[10:25:35.318]                           grepl <- base::grepl
[10:25:35.318]                           restarts <- computeRestarts(cond)
[10:25:35.318]                           for (restart in restarts) {
[10:25:35.318]                             name <- restart$name
[10:25:35.318]                             if (is.null(name)) 
[10:25:35.318]                               next
[10:25:35.318]                             if (!grepl(pattern, name)) 
[10:25:35.318]                               next
[10:25:35.318]                             invokeRestart(restart)
[10:25:35.318]                             muffled <- TRUE
[10:25:35.318]                             break
[10:25:35.318]                           }
[10:25:35.318]                         }
[10:25:35.318]                       }
[10:25:35.318]                       invisible(muffled)
[10:25:35.318]                     }
[10:25:35.318]                     muffleCondition(cond, pattern = "^muffle")
[10:25:35.318]                   }
[10:25:35.318]                 }
[10:25:35.318]             }
[10:25:35.318]         }))
[10:25:35.318]     }, error = function(ex) {
[10:25:35.318]         base::structure(base::list(value = NULL, visible = NULL, 
[10:25:35.318]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:25:35.318]                 ...future.rng), started = ...future.startTime, 
[10:25:35.318]             finished = Sys.time(), session_uuid = NA_character_, 
[10:25:35.318]             version = "1.8"), class = "FutureResult")
[10:25:35.318]     }, finally = {
[10:25:35.318]         if (!identical(...future.workdir, getwd())) 
[10:25:35.318]             setwd(...future.workdir)
[10:25:35.318]         {
[10:25:35.318]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:25:35.318]                 ...future.oldOptions$nwarnings <- NULL
[10:25:35.318]             }
[10:25:35.318]             base::options(...future.oldOptions)
[10:25:35.318]             if (.Platform$OS.type == "windows") {
[10:25:35.318]                 old_names <- names(...future.oldEnvVars)
[10:25:35.318]                 envs <- base::Sys.getenv()
[10:25:35.318]                 names <- names(envs)
[10:25:35.318]                 common <- intersect(names, old_names)
[10:25:35.318]                 added <- setdiff(names, old_names)
[10:25:35.318]                 removed <- setdiff(old_names, names)
[10:25:35.318]                 changed <- common[...future.oldEnvVars[common] != 
[10:25:35.318]                   envs[common]]
[10:25:35.318]                 NAMES <- toupper(changed)
[10:25:35.318]                 args <- list()
[10:25:35.318]                 for (kk in seq_along(NAMES)) {
[10:25:35.318]                   name <- changed[[kk]]
[10:25:35.318]                   NAME <- NAMES[[kk]]
[10:25:35.318]                   if (name != NAME && is.element(NAME, old_names)) 
[10:25:35.318]                     next
[10:25:35.318]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:25:35.318]                 }
[10:25:35.318]                 NAMES <- toupper(added)
[10:25:35.318]                 for (kk in seq_along(NAMES)) {
[10:25:35.318]                   name <- added[[kk]]
[10:25:35.318]                   NAME <- NAMES[[kk]]
[10:25:35.318]                   if (name != NAME && is.element(NAME, old_names)) 
[10:25:35.318]                     next
[10:25:35.318]                   args[[name]] <- ""
[10:25:35.318]                 }
[10:25:35.318]                 NAMES <- toupper(removed)
[10:25:35.318]                 for (kk in seq_along(NAMES)) {
[10:25:35.318]                   name <- removed[[kk]]
[10:25:35.318]                   NAME <- NAMES[[kk]]
[10:25:35.318]                   if (name != NAME && is.element(NAME, old_names)) 
[10:25:35.318]                     next
[10:25:35.318]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:25:35.318]                 }
[10:25:35.318]                 if (length(args) > 0) 
[10:25:35.318]                   base::do.call(base::Sys.setenv, args = args)
[10:25:35.318]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:25:35.318]             }
[10:25:35.318]             else {
[10:25:35.318]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:25:35.318]             }
[10:25:35.318]             {
[10:25:35.318]                 if (base::length(...future.futureOptionsAdded) > 
[10:25:35.318]                   0L) {
[10:25:35.318]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:25:35.318]                   base::names(opts) <- ...future.futureOptionsAdded
[10:25:35.318]                   base::options(opts)
[10:25:35.318]                 }
[10:25:35.318]                 {
[10:25:35.318]                   {
[10:25:35.318]                     NULL
[10:25:35.318]                     RNGkind("Mersenne-Twister")
[10:25:35.318]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[10:25:35.318]                       inherits = FALSE)
[10:25:35.318]                   }
[10:25:35.318]                   options(future.plan = NULL)
[10:25:35.318]                   if (is.na(NA_character_)) 
[10:25:35.318]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:25:35.318]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:25:35.318]                   future::plan(list(function (..., envir = parent.frame()) 
[10:25:35.318]                   {
[10:25:35.318]                     future <- SequentialFuture(..., envir = envir)
[10:25:35.318]                     if (!future$lazy) 
[10:25:35.318]                       future <- run(future)
[10:25:35.318]                     invisible(future)
[10:25:35.318]                   }), .cleanup = FALSE, .init = FALSE)
[10:25:35.318]                 }
[10:25:35.318]             }
[10:25:35.318]         }
[10:25:35.318]     })
[10:25:35.318]     if (TRUE) {
[10:25:35.318]         base::sink(type = "output", split = FALSE)
[10:25:35.318]         if (TRUE) {
[10:25:35.318]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:25:35.318]         }
[10:25:35.318]         else {
[10:25:35.318]             ...future.result["stdout"] <- base::list(NULL)
[10:25:35.318]         }
[10:25:35.318]         base::close(...future.stdout)
[10:25:35.318]         ...future.stdout <- NULL
[10:25:35.318]     }
[10:25:35.318]     ...future.result$conditions <- ...future.conditions
[10:25:35.318]     ...future.result$finished <- base::Sys.time()
[10:25:35.318]     ...future.result
[10:25:35.318] }
[10:25:35.320] plan(): Setting new future strategy stack:
[10:25:35.320] List of future strategies:
[10:25:35.320] 1. sequential:
[10:25:35.320]    - args: function (..., envir = parent.frame())
[10:25:35.320]    - tweaked: FALSE
[10:25:35.320]    - call: NULL
[10:25:35.320] plan(): nbrOfWorkers() = 1
[10:25:35.321] plan(): Setting new future strategy stack:
[10:25:35.321] List of future strategies:
[10:25:35.321] 1. sequential:
[10:25:35.321]    - args: function (..., envir = parent.frame())
[10:25:35.321]    - tweaked: FALSE
[10:25:35.321]    - call: future::plan("sequential")
[10:25:35.321] plan(): nbrOfWorkers() = 1
[10:25:35.322] SequentialFuture started (and completed)
[10:25:35.322] - Launch lazy future ... done
[10:25:35.322] run() for ‘SequentialFuture’ ... done
> print(y)
[1] 42
> stopifnot(y == 42L)
> 
> message("*** future() w/ gc = TRUE ... DONE")
*** future() w/ gc = TRUE ... DONE
> 
> 
> message("*** future() - exceptions ...")
*** future() - exceptions ...
> 
> target <- list(name = "<unknown>", envir = new.env(), code = "Yo!", exists = TRUE)
> res <- tryCatch(get_future(target, mustExist = TRUE), error = identity)
[10:25:35.322] ERROR: Future (‘<unknown>’) not found in environment ‘<noname>’: ‘Yo!’
> stopifnot(inherits(res, "error"))
> 
> message("*** future() - exceptions ... DONE")
*** future() - exceptions ... DONE
> 
> message("*** future() ... DONE")
*** future() ... DONE
> 
> source("incl/end.R")
[10:25:35.323] plan(): Setting new future strategy stack:
[10:25:35.323] List of future strategies:
[10:25:35.323] 1. FutureStrategy:
[10:25:35.323]    - args: function (..., envir = parent.frame())
[10:25:35.323]    - tweaked: FALSE
[10:25:35.323]    - call: future::plan(oplan)
[10:25:35.333] plan(): nbrOfWorkers() = 1
> 
