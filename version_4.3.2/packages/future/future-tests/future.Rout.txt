
R version 4.3.2 (2023-10-31) -- "Eye Holes"
Copyright (C) 2023 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> source("incl/start.R")
[13:22:53.705] plan(): Setting new future strategy stack:
[13:22:53.706] List of future strategies:
[13:22:53.706] 1. sequential:
[13:22:53.706]    - args: function (..., envir = parent.frame())
[13:22:53.706]    - tweaked: FALSE
[13:22:53.706]    - call: future::plan("sequential")
[13:22:53.721] plan(): nbrOfWorkers() = 1
> 
> message("*** future() ...")
*** future() ...
> 
> f <- future({
+   42L
+ }, lazy = TRUE)
[13:22:53.732] getGlobalsAndPackages() ...
[13:22:53.732] Searching for globals...
[13:22:53.735] - globals found: [1] ‘{’
[13:22:53.735] Searching for globals ... DONE
[13:22:53.736] Resolving globals: FALSE
[13:22:53.736] 
[13:22:53.736] 
[13:22:53.736] getGlobalsAndPackages() ... DONE
> 
> print(resolved(f))
[13:22:53.737] resolved() for ‘Future’ ...
[13:22:53.737] - state: ‘created’
[13:22:53.737] - run: TRUE
[13:22:53.737] - run() ...
[13:22:53.738] run() for ‘Future’ ...
[13:22:53.738] - state: ‘created’
[13:22:53.738] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[13:22:53.738] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[13:22:53.738] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[13:22:53.739]   - Field: ‘label’
[13:22:53.739]   - Field: ‘local’
[13:22:53.739]   - Field: ‘owner’
[13:22:53.739]   - Field: ‘envir’
[13:22:53.739]   - Field: ‘packages’
[13:22:53.739]   - Field: ‘gc’
[13:22:53.739]   - Field: ‘conditions’
[13:22:53.739]   - Field: ‘expr’
[13:22:53.739]   - Field: ‘uuid’
[13:22:53.739]   - Field: ‘seed’
[13:22:53.740]   - Field: ‘version’
[13:22:53.740]   - Field: ‘result’
[13:22:53.740]   - Field: ‘asynchronous’
[13:22:53.740]   - Field: ‘calls’
[13:22:53.740]   - Field: ‘globals’
[13:22:53.740]   - Field: ‘stdout’
[13:22:53.740]   - Field: ‘earlySignal’
[13:22:53.740]   - Field: ‘lazy’
[13:22:53.740]   - Field: ‘state’
[13:22:53.740] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[13:22:53.741] - Launch lazy future ...
[13:22:53.741] Packages needed by the future expression (n = 0): <none>
[13:22:53.742] Packages needed by future strategies (n = 0): <none>
[13:22:53.742] {
[13:22:53.742]     {
[13:22:53.742]         {
[13:22:53.742]             ...future.startTime <- base::Sys.time()
[13:22:53.742]             {
[13:22:53.742]                 {
[13:22:53.742]                   {
[13:22:53.742]                     base::local({
[13:22:53.742]                       has_future <- base::requireNamespace("future", 
[13:22:53.742]                         quietly = TRUE)
[13:22:53.742]                       if (has_future) {
[13:22:53.742]                         ns <- base::getNamespace("future")
[13:22:53.742]                         version <- ns[[".package"]][["version"]]
[13:22:53.742]                         if (is.null(version)) 
[13:22:53.742]                           version <- utils::packageVersion("future")
[13:22:53.742]                       }
[13:22:53.742]                       else {
[13:22:53.742]                         version <- NULL
[13:22:53.742]                       }
[13:22:53.742]                       if (!has_future || version < "1.8.0") {
[13:22:53.742]                         info <- base::c(r_version = base::gsub("R version ", 
[13:22:53.742]                           "", base::R.version$version.string), 
[13:22:53.742]                           platform = base::sprintf("%s (%s-bit)", 
[13:22:53.742]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:22:53.742]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[13:22:53.742]                             "release", "version")], collapse = " "), 
[13:22:53.742]                           hostname = base::Sys.info()[["nodename"]])
[13:22:53.742]                         info <- base::sprintf("%s: %s", base::names(info), 
[13:22:53.742]                           info)
[13:22:53.742]                         info <- base::paste(info, collapse = "; ")
[13:22:53.742]                         if (!has_future) {
[13:22:53.742]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:22:53.742]                             info)
[13:22:53.742]                         }
[13:22:53.742]                         else {
[13:22:53.742]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:22:53.742]                             info, version)
[13:22:53.742]                         }
[13:22:53.742]                         base::stop(msg)
[13:22:53.742]                       }
[13:22:53.742]                     })
[13:22:53.742]                   }
[13:22:53.742]                   options(future.plan = NULL)
[13:22:53.742]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:22:53.742]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:22:53.742]                 }
[13:22:53.742]                 ...future.workdir <- getwd()
[13:22:53.742]             }
[13:22:53.742]             ...future.oldOptions <- base::as.list(base::.Options)
[13:22:53.742]             ...future.oldEnvVars <- base::Sys.getenv()
[13:22:53.742]         }
[13:22:53.742]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:22:53.742]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:22:53.742]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:22:53.742]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:22:53.742]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:22:53.742]             future.stdout.windows.reencode = NULL, width = 80L)
[13:22:53.742]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:22:53.742]             base::names(...future.oldOptions))
[13:22:53.742]     }
[13:22:53.742]     if (FALSE) {
[13:22:53.742]     }
[13:22:53.742]     else {
[13:22:53.742]         if (TRUE) {
[13:22:53.742]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:22:53.742]                 open = "w")
[13:22:53.742]         }
[13:22:53.742]         else {
[13:22:53.742]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:22:53.742]                 windows = "NUL", "/dev/null"), open = "w")
[13:22:53.742]         }
[13:22:53.742]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:22:53.742]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:22:53.742]             base::sink(type = "output", split = FALSE)
[13:22:53.742]             base::close(...future.stdout)
[13:22:53.742]         }, add = TRUE)
[13:22:53.742]     }
[13:22:53.742]     ...future.frame <- base::sys.nframe()
[13:22:53.742]     ...future.conditions <- base::list()
[13:22:53.742]     ...future.rng <- base::globalenv()$.Random.seed
[13:22:53.742]     if (FALSE) {
[13:22:53.742]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:22:53.742]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:22:53.742]     }
[13:22:53.742]     ...future.result <- base::tryCatch({
[13:22:53.742]         base::withCallingHandlers({
[13:22:53.742]             ...future.value <- base::withVisible(base::local({
[13:22:53.742]                 42L
[13:22:53.742]             }))
[13:22:53.742]             future::FutureResult(value = ...future.value$value, 
[13:22:53.742]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:22:53.742]                   ...future.rng), globalenv = if (FALSE) 
[13:22:53.742]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:22:53.742]                     ...future.globalenv.names))
[13:22:53.742]                 else NULL, started = ...future.startTime, version = "1.8")
[13:22:53.742]         }, condition = base::local({
[13:22:53.742]             c <- base::c
[13:22:53.742]             inherits <- base::inherits
[13:22:53.742]             invokeRestart <- base::invokeRestart
[13:22:53.742]             length <- base::length
[13:22:53.742]             list <- base::list
[13:22:53.742]             seq.int <- base::seq.int
[13:22:53.742]             signalCondition <- base::signalCondition
[13:22:53.742]             sys.calls <- base::sys.calls
[13:22:53.742]             `[[` <- base::`[[`
[13:22:53.742]             `+` <- base::`+`
[13:22:53.742]             `<<-` <- base::`<<-`
[13:22:53.742]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:22:53.742]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:22:53.742]                   3L)]
[13:22:53.742]             }
[13:22:53.742]             function(cond) {
[13:22:53.742]                 is_error <- inherits(cond, "error")
[13:22:53.742]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:22:53.742]                   NULL)
[13:22:53.742]                 if (is_error) {
[13:22:53.742]                   sessionInformation <- function() {
[13:22:53.742]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:22:53.742]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:22:53.742]                       search = base::search(), system = base::Sys.info())
[13:22:53.742]                   }
[13:22:53.742]                   ...future.conditions[[length(...future.conditions) + 
[13:22:53.742]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:22:53.742]                     cond$call), session = sessionInformation(), 
[13:22:53.742]                     timestamp = base::Sys.time(), signaled = 0L)
[13:22:53.742]                   signalCondition(cond)
[13:22:53.742]                 }
[13:22:53.742]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:22:53.742]                 "immediateCondition"))) {
[13:22:53.742]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:22:53.742]                   ...future.conditions[[length(...future.conditions) + 
[13:22:53.742]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:22:53.742]                   if (TRUE && !signal) {
[13:22:53.742]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:22:53.742]                     {
[13:22:53.742]                       inherits <- base::inherits
[13:22:53.742]                       invokeRestart <- base::invokeRestart
[13:22:53.742]                       is.null <- base::is.null
[13:22:53.742]                       muffled <- FALSE
[13:22:53.742]                       if (inherits(cond, "message")) {
[13:22:53.742]                         muffled <- grepl(pattern, "muffleMessage")
[13:22:53.742]                         if (muffled) 
[13:22:53.742]                           invokeRestart("muffleMessage")
[13:22:53.742]                       }
[13:22:53.742]                       else if (inherits(cond, "warning")) {
[13:22:53.742]                         muffled <- grepl(pattern, "muffleWarning")
[13:22:53.742]                         if (muffled) 
[13:22:53.742]                           invokeRestart("muffleWarning")
[13:22:53.742]                       }
[13:22:53.742]                       else if (inherits(cond, "condition")) {
[13:22:53.742]                         if (!is.null(pattern)) {
[13:22:53.742]                           computeRestarts <- base::computeRestarts
[13:22:53.742]                           grepl <- base::grepl
[13:22:53.742]                           restarts <- computeRestarts(cond)
[13:22:53.742]                           for (restart in restarts) {
[13:22:53.742]                             name <- restart$name
[13:22:53.742]                             if (is.null(name)) 
[13:22:53.742]                               next
[13:22:53.742]                             if (!grepl(pattern, name)) 
[13:22:53.742]                               next
[13:22:53.742]                             invokeRestart(restart)
[13:22:53.742]                             muffled <- TRUE
[13:22:53.742]                             break
[13:22:53.742]                           }
[13:22:53.742]                         }
[13:22:53.742]                       }
[13:22:53.742]                       invisible(muffled)
[13:22:53.742]                     }
[13:22:53.742]                     muffleCondition(cond, pattern = "^muffle")
[13:22:53.742]                   }
[13:22:53.742]                 }
[13:22:53.742]                 else {
[13:22:53.742]                   if (TRUE) {
[13:22:53.742]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:22:53.742]                     {
[13:22:53.742]                       inherits <- base::inherits
[13:22:53.742]                       invokeRestart <- base::invokeRestart
[13:22:53.742]                       is.null <- base::is.null
[13:22:53.742]                       muffled <- FALSE
[13:22:53.742]                       if (inherits(cond, "message")) {
[13:22:53.742]                         muffled <- grepl(pattern, "muffleMessage")
[13:22:53.742]                         if (muffled) 
[13:22:53.742]                           invokeRestart("muffleMessage")
[13:22:53.742]                       }
[13:22:53.742]                       else if (inherits(cond, "warning")) {
[13:22:53.742]                         muffled <- grepl(pattern, "muffleWarning")
[13:22:53.742]                         if (muffled) 
[13:22:53.742]                           invokeRestart("muffleWarning")
[13:22:53.742]                       }
[13:22:53.742]                       else if (inherits(cond, "condition")) {
[13:22:53.742]                         if (!is.null(pattern)) {
[13:22:53.742]                           computeRestarts <- base::computeRestarts
[13:22:53.742]                           grepl <- base::grepl
[13:22:53.742]                           restarts <- computeRestarts(cond)
[13:22:53.742]                           for (restart in restarts) {
[13:22:53.742]                             name <- restart$name
[13:22:53.742]                             if (is.null(name)) 
[13:22:53.742]                               next
[13:22:53.742]                             if (!grepl(pattern, name)) 
[13:22:53.742]                               next
[13:22:53.742]                             invokeRestart(restart)
[13:22:53.742]                             muffled <- TRUE
[13:22:53.742]                             break
[13:22:53.742]                           }
[13:22:53.742]                         }
[13:22:53.742]                       }
[13:22:53.742]                       invisible(muffled)
[13:22:53.742]                     }
[13:22:53.742]                     muffleCondition(cond, pattern = "^muffle")
[13:22:53.742]                   }
[13:22:53.742]                 }
[13:22:53.742]             }
[13:22:53.742]         }))
[13:22:53.742]     }, error = function(ex) {
[13:22:53.742]         base::structure(base::list(value = NULL, visible = NULL, 
[13:22:53.742]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:22:53.742]                 ...future.rng), started = ...future.startTime, 
[13:22:53.742]             finished = Sys.time(), session_uuid = NA_character_, 
[13:22:53.742]             version = "1.8"), class = "FutureResult")
[13:22:53.742]     }, finally = {
[13:22:53.742]         if (!identical(...future.workdir, getwd())) 
[13:22:53.742]             setwd(...future.workdir)
[13:22:53.742]         {
[13:22:53.742]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:22:53.742]                 ...future.oldOptions$nwarnings <- NULL
[13:22:53.742]             }
[13:22:53.742]             base::options(...future.oldOptions)
[13:22:53.742]             if (.Platform$OS.type == "windows") {
[13:22:53.742]                 old_names <- names(...future.oldEnvVars)
[13:22:53.742]                 envs <- base::Sys.getenv()
[13:22:53.742]                 names <- names(envs)
[13:22:53.742]                 common <- intersect(names, old_names)
[13:22:53.742]                 added <- setdiff(names, old_names)
[13:22:53.742]                 removed <- setdiff(old_names, names)
[13:22:53.742]                 changed <- common[...future.oldEnvVars[common] != 
[13:22:53.742]                   envs[common]]
[13:22:53.742]                 NAMES <- toupper(changed)
[13:22:53.742]                 args <- list()
[13:22:53.742]                 for (kk in seq_along(NAMES)) {
[13:22:53.742]                   name <- changed[[kk]]
[13:22:53.742]                   NAME <- NAMES[[kk]]
[13:22:53.742]                   if (name != NAME && is.element(NAME, old_names)) 
[13:22:53.742]                     next
[13:22:53.742]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:22:53.742]                 }
[13:22:53.742]                 NAMES <- toupper(added)
[13:22:53.742]                 for (kk in seq_along(NAMES)) {
[13:22:53.742]                   name <- added[[kk]]
[13:22:53.742]                   NAME <- NAMES[[kk]]
[13:22:53.742]                   if (name != NAME && is.element(NAME, old_names)) 
[13:22:53.742]                     next
[13:22:53.742]                   args[[name]] <- ""
[13:22:53.742]                 }
[13:22:53.742]                 NAMES <- toupper(removed)
[13:22:53.742]                 for (kk in seq_along(NAMES)) {
[13:22:53.742]                   name <- removed[[kk]]
[13:22:53.742]                   NAME <- NAMES[[kk]]
[13:22:53.742]                   if (name != NAME && is.element(NAME, old_names)) 
[13:22:53.742]                     next
[13:22:53.742]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:22:53.742]                 }
[13:22:53.742]                 if (length(args) > 0) 
[13:22:53.742]                   base::do.call(base::Sys.setenv, args = args)
[13:22:53.742]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:22:53.742]             }
[13:22:53.742]             else {
[13:22:53.742]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:22:53.742]             }
[13:22:53.742]             {
[13:22:53.742]                 if (base::length(...future.futureOptionsAdded) > 
[13:22:53.742]                   0L) {
[13:22:53.742]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:22:53.742]                   base::names(opts) <- ...future.futureOptionsAdded
[13:22:53.742]                   base::options(opts)
[13:22:53.742]                 }
[13:22:53.742]                 {
[13:22:53.742]                   {
[13:22:53.742]                     NULL
[13:22:53.742]                     RNGkind("Mersenne-Twister")
[13:22:53.742]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[13:22:53.742]                       inherits = FALSE)
[13:22:53.742]                   }
[13:22:53.742]                   options(future.plan = NULL)
[13:22:53.742]                   if (is.na(NA_character_)) 
[13:22:53.742]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:22:53.742]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:22:53.742]                   future::plan(list(function (..., envir = parent.frame()) 
[13:22:53.742]                   {
[13:22:53.742]                     future <- SequentialFuture(..., envir = envir)
[13:22:53.742]                     if (!future$lazy) 
[13:22:53.742]                       future <- run(future)
[13:22:53.742]                     invisible(future)
[13:22:53.742]                   }), .cleanup = FALSE, .init = FALSE)
[13:22:53.742]                 }
[13:22:53.742]             }
[13:22:53.742]         }
[13:22:53.742]     })
[13:22:53.742]     if (TRUE) {
[13:22:53.742]         base::sink(type = "output", split = FALSE)
[13:22:53.742]         if (TRUE) {
[13:22:53.742]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:22:53.742]         }
[13:22:53.742]         else {
[13:22:53.742]             ...future.result["stdout"] <- base::list(NULL)
[13:22:53.742]         }
[13:22:53.742]         base::close(...future.stdout)
[13:22:53.742]         ...future.stdout <- NULL
[13:22:53.742]     }
[13:22:53.742]     ...future.result$conditions <- ...future.conditions
[13:22:53.742]     ...future.result$finished <- base::Sys.time()
[13:22:53.742]     ...future.result
[13:22:53.742] }
[13:22:53.745] plan(): Setting new future strategy stack:
[13:22:53.745] List of future strategies:
[13:22:53.745] 1. sequential:
[13:22:53.745]    - args: function (..., envir = parent.frame())
[13:22:53.745]    - tweaked: FALSE
[13:22:53.745]    - call: NULL
[13:22:53.745] plan(): nbrOfWorkers() = 1
[13:22:53.746] plan(): Setting new future strategy stack:
[13:22:53.746] List of future strategies:
[13:22:53.746] 1. sequential:
[13:22:53.746]    - args: function (..., envir = parent.frame())
[13:22:53.746]    - tweaked: FALSE
[13:22:53.746]    - call: future::plan("sequential")
[13:22:53.747] plan(): nbrOfWorkers() = 1
[13:22:53.747] SequentialFuture started (and completed)
[13:22:53.747] - Launch lazy future ... done
[13:22:53.747] run() for ‘SequentialFuture’ ... done
[13:22:53.748] - run() ... done
[13:22:53.748] - resolved() ...
[13:22:53.748] resolved() for ‘SequentialFuture’ ...
[13:22:53.748] - state: ‘finished’
[13:22:53.748] - run: TRUE
[13:22:53.748] - result: ‘FutureResult’
[13:22:53.748] resolved() for ‘SequentialFuture’ ... done
[13:22:53.748] - resolved: TRUE
[13:22:53.748] - resolved() ... done
[13:22:53.749] resolved() for ‘SequentialFuture’ ... done
[1] TRUE
> y <- value(f)
> print(y)
[1] 42
> stopifnot(y == 42L)
> 
> 
> message("*** future() w/ gc = TRUE ...")
*** future() w/ gc = TRUE ...
> 
> f <- future(42L, gc = TRUE, lazy = TRUE)
[13:22:53.749] getGlobalsAndPackages() ...
[13:22:53.749] Searching for globals...
[13:22:53.750] 
[13:22:53.750] Searching for globals ... DONE
[13:22:53.750] - globals: [0] <none>
[13:22:53.750] getGlobalsAndPackages() ... DONE
> print(f)
Future:
Label: ‘<none>’
Expression:
[1] 42
Lazy evaluation: TRUE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: FALSE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: e979bf26-4799-4195-2490-4b068551e9f9
Class: ‘Future’, ‘environment’
> y <- value(f)
[13:22:53.751] run() for ‘Future’ ...
[13:22:53.751] - state: ‘created’
[13:22:53.751] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[13:22:53.751] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[13:22:53.752] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[13:22:53.752]   - Field: ‘label’
[13:22:53.752]   - Field: ‘local’
[13:22:53.752]   - Field: ‘owner’
[13:22:53.752]   - Field: ‘envir’
[13:22:53.752]   - Field: ‘packages’
[13:22:53.752]   - Field: ‘gc’
[13:22:53.752]   - Field: ‘conditions’
[13:22:53.752]   - Field: ‘expr’
[13:22:53.752]   - Field: ‘uuid’
[13:22:53.753]   - Field: ‘seed’
[13:22:53.753]   - Field: ‘version’
[13:22:53.753]   - Field: ‘result’
[13:22:53.753]   - Field: ‘asynchronous’
[13:22:53.753]   - Field: ‘calls’
[13:22:53.753]   - Field: ‘globals’
[13:22:53.753]   - Field: ‘stdout’
[13:22:53.753]   - Field: ‘earlySignal’
[13:22:53.753]   - Field: ‘lazy’
[13:22:53.753]   - Field: ‘state’
[13:22:53.753] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[13:22:53.754] - Launch lazy future ...
[13:22:53.754] Packages needed by the future expression (n = 0): <none>
[13:22:53.754] Packages needed by future strategies (n = 0): <none>
[13:22:53.754] {
[13:22:53.754]     {
[13:22:53.754]         {
[13:22:53.754]             ...future.startTime <- base::Sys.time()
[13:22:53.754]             {
[13:22:53.754]                 {
[13:22:53.754]                   {
[13:22:53.754]                     base::local({
[13:22:53.754]                       has_future <- base::requireNamespace("future", 
[13:22:53.754]                         quietly = TRUE)
[13:22:53.754]                       if (has_future) {
[13:22:53.754]                         ns <- base::getNamespace("future")
[13:22:53.754]                         version <- ns[[".package"]][["version"]]
[13:22:53.754]                         if (is.null(version)) 
[13:22:53.754]                           version <- utils::packageVersion("future")
[13:22:53.754]                       }
[13:22:53.754]                       else {
[13:22:53.754]                         version <- NULL
[13:22:53.754]                       }
[13:22:53.754]                       if (!has_future || version < "1.8.0") {
[13:22:53.754]                         info <- base::c(r_version = base::gsub("R version ", 
[13:22:53.754]                           "", base::R.version$version.string), 
[13:22:53.754]                           platform = base::sprintf("%s (%s-bit)", 
[13:22:53.754]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:22:53.754]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[13:22:53.754]                             "release", "version")], collapse = " "), 
[13:22:53.754]                           hostname = base::Sys.info()[["nodename"]])
[13:22:53.754]                         info <- base::sprintf("%s: %s", base::names(info), 
[13:22:53.754]                           info)
[13:22:53.754]                         info <- base::paste(info, collapse = "; ")
[13:22:53.754]                         if (!has_future) {
[13:22:53.754]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:22:53.754]                             info)
[13:22:53.754]                         }
[13:22:53.754]                         else {
[13:22:53.754]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:22:53.754]                             info, version)
[13:22:53.754]                         }
[13:22:53.754]                         base::stop(msg)
[13:22:53.754]                       }
[13:22:53.754]                     })
[13:22:53.754]                   }
[13:22:53.754]                   options(future.plan = NULL)
[13:22:53.754]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:22:53.754]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:22:53.754]                 }
[13:22:53.754]                 ...future.workdir <- getwd()
[13:22:53.754]             }
[13:22:53.754]             ...future.oldOptions <- base::as.list(base::.Options)
[13:22:53.754]             ...future.oldEnvVars <- base::Sys.getenv()
[13:22:53.754]         }
[13:22:53.754]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:22:53.754]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:22:53.754]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:22:53.754]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:22:53.754]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:22:53.754]             future.stdout.windows.reencode = NULL, width = 80L)
[13:22:53.754]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:22:53.754]             base::names(...future.oldOptions))
[13:22:53.754]     }
[13:22:53.754]     if (FALSE) {
[13:22:53.754]     }
[13:22:53.754]     else {
[13:22:53.754]         if (TRUE) {
[13:22:53.754]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:22:53.754]                 open = "w")
[13:22:53.754]         }
[13:22:53.754]         else {
[13:22:53.754]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:22:53.754]                 windows = "NUL", "/dev/null"), open = "w")
[13:22:53.754]         }
[13:22:53.754]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:22:53.754]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:22:53.754]             base::sink(type = "output", split = FALSE)
[13:22:53.754]             base::close(...future.stdout)
[13:22:53.754]         }, add = TRUE)
[13:22:53.754]     }
[13:22:53.754]     ...future.frame <- base::sys.nframe()
[13:22:53.754]     ...future.conditions <- base::list()
[13:22:53.754]     ...future.rng <- base::globalenv()$.Random.seed
[13:22:53.754]     if (FALSE) {
[13:22:53.754]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:22:53.754]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:22:53.754]     }
[13:22:53.754]     ...future.result <- base::tryCatch({
[13:22:53.754]         base::withCallingHandlers({
[13:22:53.754]             ...future.value <- base::withVisible(base::local(42L))
[13:22:53.754]             future::FutureResult(value = ...future.value$value, 
[13:22:53.754]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:22:53.754]                   ...future.rng), globalenv = if (FALSE) 
[13:22:53.754]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:22:53.754]                     ...future.globalenv.names))
[13:22:53.754]                 else NULL, started = ...future.startTime, version = "1.8")
[13:22:53.754]         }, condition = base::local({
[13:22:53.754]             c <- base::c
[13:22:53.754]             inherits <- base::inherits
[13:22:53.754]             invokeRestart <- base::invokeRestart
[13:22:53.754]             length <- base::length
[13:22:53.754]             list <- base::list
[13:22:53.754]             seq.int <- base::seq.int
[13:22:53.754]             signalCondition <- base::signalCondition
[13:22:53.754]             sys.calls <- base::sys.calls
[13:22:53.754]             `[[` <- base::`[[`
[13:22:53.754]             `+` <- base::`+`
[13:22:53.754]             `<<-` <- base::`<<-`
[13:22:53.754]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:22:53.754]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:22:53.754]                   3L)]
[13:22:53.754]             }
[13:22:53.754]             function(cond) {
[13:22:53.754]                 is_error <- inherits(cond, "error")
[13:22:53.754]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:22:53.754]                   NULL)
[13:22:53.754]                 if (is_error) {
[13:22:53.754]                   sessionInformation <- function() {
[13:22:53.754]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:22:53.754]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:22:53.754]                       search = base::search(), system = base::Sys.info())
[13:22:53.754]                   }
[13:22:53.754]                   ...future.conditions[[length(...future.conditions) + 
[13:22:53.754]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:22:53.754]                     cond$call), session = sessionInformation(), 
[13:22:53.754]                     timestamp = base::Sys.time(), signaled = 0L)
[13:22:53.754]                   signalCondition(cond)
[13:22:53.754]                 }
[13:22:53.754]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:22:53.754]                 "immediateCondition"))) {
[13:22:53.754]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:22:53.754]                   ...future.conditions[[length(...future.conditions) + 
[13:22:53.754]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:22:53.754]                   if (TRUE && !signal) {
[13:22:53.754]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:22:53.754]                     {
[13:22:53.754]                       inherits <- base::inherits
[13:22:53.754]                       invokeRestart <- base::invokeRestart
[13:22:53.754]                       is.null <- base::is.null
[13:22:53.754]                       muffled <- FALSE
[13:22:53.754]                       if (inherits(cond, "message")) {
[13:22:53.754]                         muffled <- grepl(pattern, "muffleMessage")
[13:22:53.754]                         if (muffled) 
[13:22:53.754]                           invokeRestart("muffleMessage")
[13:22:53.754]                       }
[13:22:53.754]                       else if (inherits(cond, "warning")) {
[13:22:53.754]                         muffled <- grepl(pattern, "muffleWarning")
[13:22:53.754]                         if (muffled) 
[13:22:53.754]                           invokeRestart("muffleWarning")
[13:22:53.754]                       }
[13:22:53.754]                       else if (inherits(cond, "condition")) {
[13:22:53.754]                         if (!is.null(pattern)) {
[13:22:53.754]                           computeRestarts <- base::computeRestarts
[13:22:53.754]                           grepl <- base::grepl
[13:22:53.754]                           restarts <- computeRestarts(cond)
[13:22:53.754]                           for (restart in restarts) {
[13:22:53.754]                             name <- restart$name
[13:22:53.754]                             if (is.null(name)) 
[13:22:53.754]                               next
[13:22:53.754]                             if (!grepl(pattern, name)) 
[13:22:53.754]                               next
[13:22:53.754]                             invokeRestart(restart)
[13:22:53.754]                             muffled <- TRUE
[13:22:53.754]                             break
[13:22:53.754]                           }
[13:22:53.754]                         }
[13:22:53.754]                       }
[13:22:53.754]                       invisible(muffled)
[13:22:53.754]                     }
[13:22:53.754]                     muffleCondition(cond, pattern = "^muffle")
[13:22:53.754]                   }
[13:22:53.754]                 }
[13:22:53.754]                 else {
[13:22:53.754]                   if (TRUE) {
[13:22:53.754]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:22:53.754]                     {
[13:22:53.754]                       inherits <- base::inherits
[13:22:53.754]                       invokeRestart <- base::invokeRestart
[13:22:53.754]                       is.null <- base::is.null
[13:22:53.754]                       muffled <- FALSE
[13:22:53.754]                       if (inherits(cond, "message")) {
[13:22:53.754]                         muffled <- grepl(pattern, "muffleMessage")
[13:22:53.754]                         if (muffled) 
[13:22:53.754]                           invokeRestart("muffleMessage")
[13:22:53.754]                       }
[13:22:53.754]                       else if (inherits(cond, "warning")) {
[13:22:53.754]                         muffled <- grepl(pattern, "muffleWarning")
[13:22:53.754]                         if (muffled) 
[13:22:53.754]                           invokeRestart("muffleWarning")
[13:22:53.754]                       }
[13:22:53.754]                       else if (inherits(cond, "condition")) {
[13:22:53.754]                         if (!is.null(pattern)) {
[13:22:53.754]                           computeRestarts <- base::computeRestarts
[13:22:53.754]                           grepl <- base::grepl
[13:22:53.754]                           restarts <- computeRestarts(cond)
[13:22:53.754]                           for (restart in restarts) {
[13:22:53.754]                             name <- restart$name
[13:22:53.754]                             if (is.null(name)) 
[13:22:53.754]                               next
[13:22:53.754]                             if (!grepl(pattern, name)) 
[13:22:53.754]                               next
[13:22:53.754]                             invokeRestart(restart)
[13:22:53.754]                             muffled <- TRUE
[13:22:53.754]                             break
[13:22:53.754]                           }
[13:22:53.754]                         }
[13:22:53.754]                       }
[13:22:53.754]                       invisible(muffled)
[13:22:53.754]                     }
[13:22:53.754]                     muffleCondition(cond, pattern = "^muffle")
[13:22:53.754]                   }
[13:22:53.754]                 }
[13:22:53.754]             }
[13:22:53.754]         }))
[13:22:53.754]     }, error = function(ex) {
[13:22:53.754]         base::structure(base::list(value = NULL, visible = NULL, 
[13:22:53.754]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:22:53.754]                 ...future.rng), started = ...future.startTime, 
[13:22:53.754]             finished = Sys.time(), session_uuid = NA_character_, 
[13:22:53.754]             version = "1.8"), class = "FutureResult")
[13:22:53.754]     }, finally = {
[13:22:53.754]         if (!identical(...future.workdir, getwd())) 
[13:22:53.754]             setwd(...future.workdir)
[13:22:53.754]         {
[13:22:53.754]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:22:53.754]                 ...future.oldOptions$nwarnings <- NULL
[13:22:53.754]             }
[13:22:53.754]             base::options(...future.oldOptions)
[13:22:53.754]             if (.Platform$OS.type == "windows") {
[13:22:53.754]                 old_names <- names(...future.oldEnvVars)
[13:22:53.754]                 envs <- base::Sys.getenv()
[13:22:53.754]                 names <- names(envs)
[13:22:53.754]                 common <- intersect(names, old_names)
[13:22:53.754]                 added <- setdiff(names, old_names)
[13:22:53.754]                 removed <- setdiff(old_names, names)
[13:22:53.754]                 changed <- common[...future.oldEnvVars[common] != 
[13:22:53.754]                   envs[common]]
[13:22:53.754]                 NAMES <- toupper(changed)
[13:22:53.754]                 args <- list()
[13:22:53.754]                 for (kk in seq_along(NAMES)) {
[13:22:53.754]                   name <- changed[[kk]]
[13:22:53.754]                   NAME <- NAMES[[kk]]
[13:22:53.754]                   if (name != NAME && is.element(NAME, old_names)) 
[13:22:53.754]                     next
[13:22:53.754]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:22:53.754]                 }
[13:22:53.754]                 NAMES <- toupper(added)
[13:22:53.754]                 for (kk in seq_along(NAMES)) {
[13:22:53.754]                   name <- added[[kk]]
[13:22:53.754]                   NAME <- NAMES[[kk]]
[13:22:53.754]                   if (name != NAME && is.element(NAME, old_names)) 
[13:22:53.754]                     next
[13:22:53.754]                   args[[name]] <- ""
[13:22:53.754]                 }
[13:22:53.754]                 NAMES <- toupper(removed)
[13:22:53.754]                 for (kk in seq_along(NAMES)) {
[13:22:53.754]                   name <- removed[[kk]]
[13:22:53.754]                   NAME <- NAMES[[kk]]
[13:22:53.754]                   if (name != NAME && is.element(NAME, old_names)) 
[13:22:53.754]                     next
[13:22:53.754]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:22:53.754]                 }
[13:22:53.754]                 if (length(args) > 0) 
[13:22:53.754]                   base::do.call(base::Sys.setenv, args = args)
[13:22:53.754]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:22:53.754]             }
[13:22:53.754]             else {
[13:22:53.754]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:22:53.754]             }
[13:22:53.754]             {
[13:22:53.754]                 if (base::length(...future.futureOptionsAdded) > 
[13:22:53.754]                   0L) {
[13:22:53.754]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:22:53.754]                   base::names(opts) <- ...future.futureOptionsAdded
[13:22:53.754]                   base::options(opts)
[13:22:53.754]                 }
[13:22:53.754]                 {
[13:22:53.754]                   {
[13:22:53.754]                     NULL
[13:22:53.754]                     RNGkind("Mersenne-Twister")
[13:22:53.754]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[13:22:53.754]                       inherits = FALSE)
[13:22:53.754]                   }
[13:22:53.754]                   options(future.plan = NULL)
[13:22:53.754]                   if (is.na(NA_character_)) 
[13:22:53.754]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:22:53.754]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:22:53.754]                   future::plan(list(function (..., envir = parent.frame()) 
[13:22:53.754]                   {
[13:22:53.754]                     future <- SequentialFuture(..., envir = envir)
[13:22:53.754]                     if (!future$lazy) 
[13:22:53.754]                       future <- run(future)
[13:22:53.754]                     invisible(future)
[13:22:53.754]                   }), .cleanup = FALSE, .init = FALSE)
[13:22:53.754]                 }
[13:22:53.754]             }
[13:22:53.754]         }
[13:22:53.754]     })
[13:22:53.754]     if (TRUE) {
[13:22:53.754]         base::sink(type = "output", split = FALSE)
[13:22:53.754]         if (TRUE) {
[13:22:53.754]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:22:53.754]         }
[13:22:53.754]         else {
[13:22:53.754]             ...future.result["stdout"] <- base::list(NULL)
[13:22:53.754]         }
[13:22:53.754]         base::close(...future.stdout)
[13:22:53.754]         ...future.stdout <- NULL
[13:22:53.754]     }
[13:22:53.754]     ...future.result$conditions <- ...future.conditions
[13:22:53.754]     ...future.result$finished <- base::Sys.time()
[13:22:53.754]     ...future.result
[13:22:53.754] }
[13:22:53.756] plan(): Setting new future strategy stack:
[13:22:53.756] List of future strategies:
[13:22:53.756] 1. sequential:
[13:22:53.756]    - args: function (..., envir = parent.frame())
[13:22:53.756]    - tweaked: FALSE
[13:22:53.756]    - call: NULL
[13:22:53.757] plan(): nbrOfWorkers() = 1
[13:22:53.757] plan(): Setting new future strategy stack:
[13:22:53.758] List of future strategies:
[13:22:53.758] 1. sequential:
[13:22:53.758]    - args: function (..., envir = parent.frame())
[13:22:53.758]    - tweaked: FALSE
[13:22:53.758]    - call: future::plan("sequential")
[13:22:53.758] plan(): nbrOfWorkers() = 1
[13:22:53.758] SequentialFuture started (and completed)
[13:22:53.758] - Launch lazy future ... done
[13:22:53.758] run() for ‘SequentialFuture’ ... done
> print(y)
[1] 42
> stopifnot(y == 42L)
> 
> message("*** future() w/ gc = TRUE ... DONE")
*** future() w/ gc = TRUE ... DONE
> message("*** future() ... DONE")
*** future() ... DONE
> 
> message("*** future() ...")
*** future() ...
> 
> f <- future({
+   42L
+ }, lazy = TRUE)
[13:22:53.759] getGlobalsAndPackages() ...
[13:22:53.759] Searching for globals...
[13:22:53.760] - globals found: [1] ‘{’
[13:22:53.760] Searching for globals ... DONE
[13:22:53.760] Resolving globals: FALSE
[13:22:53.760] 
[13:22:53.760] 
[13:22:53.760] getGlobalsAndPackages() ... DONE
> 
> print(resolved(f))
[13:22:53.761] resolved() for ‘Future’ ...
[13:22:53.761] - state: ‘created’
[13:22:53.761] - run: TRUE
[13:22:53.761] - run() ...
[13:22:53.761] run() for ‘Future’ ...
[13:22:53.761] - state: ‘created’
[13:22:53.761] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[13:22:53.761] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[13:22:53.761] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[13:22:53.762]   - Field: ‘label’
[13:22:53.762]   - Field: ‘local’
[13:22:53.762]   - Field: ‘owner’
[13:22:53.762]   - Field: ‘envir’
[13:22:53.762]   - Field: ‘packages’
[13:22:53.762]   - Field: ‘gc’
[13:22:53.762]   - Field: ‘conditions’
[13:22:53.762]   - Field: ‘expr’
[13:22:53.762]   - Field: ‘uuid’
[13:22:53.762]   - Field: ‘seed’
[13:22:53.763]   - Field: ‘version’
[13:22:53.763]   - Field: ‘result’
[13:22:53.763]   - Field: ‘asynchronous’
[13:22:53.763]   - Field: ‘calls’
[13:22:53.763]   - Field: ‘globals’
[13:22:53.763]   - Field: ‘stdout’
[13:22:53.763]   - Field: ‘earlySignal’
[13:22:53.763]   - Field: ‘lazy’
[13:22:53.763]   - Field: ‘state’
[13:22:53.763] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[13:22:53.763] - Launch lazy future ...
[13:22:53.764] Packages needed by the future expression (n = 0): <none>
[13:22:53.764] Packages needed by future strategies (n = 0): <none>
[13:22:53.764] {
[13:22:53.764]     {
[13:22:53.764]         {
[13:22:53.764]             ...future.startTime <- base::Sys.time()
[13:22:53.764]             {
[13:22:53.764]                 {
[13:22:53.764]                   {
[13:22:53.764]                     base::local({
[13:22:53.764]                       has_future <- base::requireNamespace("future", 
[13:22:53.764]                         quietly = TRUE)
[13:22:53.764]                       if (has_future) {
[13:22:53.764]                         ns <- base::getNamespace("future")
[13:22:53.764]                         version <- ns[[".package"]][["version"]]
[13:22:53.764]                         if (is.null(version)) 
[13:22:53.764]                           version <- utils::packageVersion("future")
[13:22:53.764]                       }
[13:22:53.764]                       else {
[13:22:53.764]                         version <- NULL
[13:22:53.764]                       }
[13:22:53.764]                       if (!has_future || version < "1.8.0") {
[13:22:53.764]                         info <- base::c(r_version = base::gsub("R version ", 
[13:22:53.764]                           "", base::R.version$version.string), 
[13:22:53.764]                           platform = base::sprintf("%s (%s-bit)", 
[13:22:53.764]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:22:53.764]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[13:22:53.764]                             "release", "version")], collapse = " "), 
[13:22:53.764]                           hostname = base::Sys.info()[["nodename"]])
[13:22:53.764]                         info <- base::sprintf("%s: %s", base::names(info), 
[13:22:53.764]                           info)
[13:22:53.764]                         info <- base::paste(info, collapse = "; ")
[13:22:53.764]                         if (!has_future) {
[13:22:53.764]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:22:53.764]                             info)
[13:22:53.764]                         }
[13:22:53.764]                         else {
[13:22:53.764]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:22:53.764]                             info, version)
[13:22:53.764]                         }
[13:22:53.764]                         base::stop(msg)
[13:22:53.764]                       }
[13:22:53.764]                     })
[13:22:53.764]                   }
[13:22:53.764]                   options(future.plan = NULL)
[13:22:53.764]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:22:53.764]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:22:53.764]                 }
[13:22:53.764]                 ...future.workdir <- getwd()
[13:22:53.764]             }
[13:22:53.764]             ...future.oldOptions <- base::as.list(base::.Options)
[13:22:53.764]             ...future.oldEnvVars <- base::Sys.getenv()
[13:22:53.764]         }
[13:22:53.764]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:22:53.764]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:22:53.764]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:22:53.764]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:22:53.764]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:22:53.764]             future.stdout.windows.reencode = NULL, width = 80L)
[13:22:53.764]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:22:53.764]             base::names(...future.oldOptions))
[13:22:53.764]     }
[13:22:53.764]     if (FALSE) {
[13:22:53.764]     }
[13:22:53.764]     else {
[13:22:53.764]         if (TRUE) {
[13:22:53.764]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:22:53.764]                 open = "w")
[13:22:53.764]         }
[13:22:53.764]         else {
[13:22:53.764]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:22:53.764]                 windows = "NUL", "/dev/null"), open = "w")
[13:22:53.764]         }
[13:22:53.764]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:22:53.764]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:22:53.764]             base::sink(type = "output", split = FALSE)
[13:22:53.764]             base::close(...future.stdout)
[13:22:53.764]         }, add = TRUE)
[13:22:53.764]     }
[13:22:53.764]     ...future.frame <- base::sys.nframe()
[13:22:53.764]     ...future.conditions <- base::list()
[13:22:53.764]     ...future.rng <- base::globalenv()$.Random.seed
[13:22:53.764]     if (FALSE) {
[13:22:53.764]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:22:53.764]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:22:53.764]     }
[13:22:53.764]     ...future.result <- base::tryCatch({
[13:22:53.764]         base::withCallingHandlers({
[13:22:53.764]             ...future.value <- base::withVisible(base::local({
[13:22:53.764]                 42L
[13:22:53.764]             }))
[13:22:53.764]             future::FutureResult(value = ...future.value$value, 
[13:22:53.764]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:22:53.764]                   ...future.rng), globalenv = if (FALSE) 
[13:22:53.764]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:22:53.764]                     ...future.globalenv.names))
[13:22:53.764]                 else NULL, started = ...future.startTime, version = "1.8")
[13:22:53.764]         }, condition = base::local({
[13:22:53.764]             c <- base::c
[13:22:53.764]             inherits <- base::inherits
[13:22:53.764]             invokeRestart <- base::invokeRestart
[13:22:53.764]             length <- base::length
[13:22:53.764]             list <- base::list
[13:22:53.764]             seq.int <- base::seq.int
[13:22:53.764]             signalCondition <- base::signalCondition
[13:22:53.764]             sys.calls <- base::sys.calls
[13:22:53.764]             `[[` <- base::`[[`
[13:22:53.764]             `+` <- base::`+`
[13:22:53.764]             `<<-` <- base::`<<-`
[13:22:53.764]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:22:53.764]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:22:53.764]                   3L)]
[13:22:53.764]             }
[13:22:53.764]             function(cond) {
[13:22:53.764]                 is_error <- inherits(cond, "error")
[13:22:53.764]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:22:53.764]                   NULL)
[13:22:53.764]                 if (is_error) {
[13:22:53.764]                   sessionInformation <- function() {
[13:22:53.764]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:22:53.764]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:22:53.764]                       search = base::search(), system = base::Sys.info())
[13:22:53.764]                   }
[13:22:53.764]                   ...future.conditions[[length(...future.conditions) + 
[13:22:53.764]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:22:53.764]                     cond$call), session = sessionInformation(), 
[13:22:53.764]                     timestamp = base::Sys.time(), signaled = 0L)
[13:22:53.764]                   signalCondition(cond)
[13:22:53.764]                 }
[13:22:53.764]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:22:53.764]                 "immediateCondition"))) {
[13:22:53.764]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:22:53.764]                   ...future.conditions[[length(...future.conditions) + 
[13:22:53.764]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:22:53.764]                   if (TRUE && !signal) {
[13:22:53.764]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:22:53.764]                     {
[13:22:53.764]                       inherits <- base::inherits
[13:22:53.764]                       invokeRestart <- base::invokeRestart
[13:22:53.764]                       is.null <- base::is.null
[13:22:53.764]                       muffled <- FALSE
[13:22:53.764]                       if (inherits(cond, "message")) {
[13:22:53.764]                         muffled <- grepl(pattern, "muffleMessage")
[13:22:53.764]                         if (muffled) 
[13:22:53.764]                           invokeRestart("muffleMessage")
[13:22:53.764]                       }
[13:22:53.764]                       else if (inherits(cond, "warning")) {
[13:22:53.764]                         muffled <- grepl(pattern, "muffleWarning")
[13:22:53.764]                         if (muffled) 
[13:22:53.764]                           invokeRestart("muffleWarning")
[13:22:53.764]                       }
[13:22:53.764]                       else if (inherits(cond, "condition")) {
[13:22:53.764]                         if (!is.null(pattern)) {
[13:22:53.764]                           computeRestarts <- base::computeRestarts
[13:22:53.764]                           grepl <- base::grepl
[13:22:53.764]                           restarts <- computeRestarts(cond)
[13:22:53.764]                           for (restart in restarts) {
[13:22:53.764]                             name <- restart$name
[13:22:53.764]                             if (is.null(name)) 
[13:22:53.764]                               next
[13:22:53.764]                             if (!grepl(pattern, name)) 
[13:22:53.764]                               next
[13:22:53.764]                             invokeRestart(restart)
[13:22:53.764]                             muffled <- TRUE
[13:22:53.764]                             break
[13:22:53.764]                           }
[13:22:53.764]                         }
[13:22:53.764]                       }
[13:22:53.764]                       invisible(muffled)
[13:22:53.764]                     }
[13:22:53.764]                     muffleCondition(cond, pattern = "^muffle")
[13:22:53.764]                   }
[13:22:53.764]                 }
[13:22:53.764]                 else {
[13:22:53.764]                   if (TRUE) {
[13:22:53.764]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:22:53.764]                     {
[13:22:53.764]                       inherits <- base::inherits
[13:22:53.764]                       invokeRestart <- base::invokeRestart
[13:22:53.764]                       is.null <- base::is.null
[13:22:53.764]                       muffled <- FALSE
[13:22:53.764]                       if (inherits(cond, "message")) {
[13:22:53.764]                         muffled <- grepl(pattern, "muffleMessage")
[13:22:53.764]                         if (muffled) 
[13:22:53.764]                           invokeRestart("muffleMessage")
[13:22:53.764]                       }
[13:22:53.764]                       else if (inherits(cond, "warning")) {
[13:22:53.764]                         muffled <- grepl(pattern, "muffleWarning")
[13:22:53.764]                         if (muffled) 
[13:22:53.764]                           invokeRestart("muffleWarning")
[13:22:53.764]                       }
[13:22:53.764]                       else if (inherits(cond, "condition")) {
[13:22:53.764]                         if (!is.null(pattern)) {
[13:22:53.764]                           computeRestarts <- base::computeRestarts
[13:22:53.764]                           grepl <- base::grepl
[13:22:53.764]                           restarts <- computeRestarts(cond)
[13:22:53.764]                           for (restart in restarts) {
[13:22:53.764]                             name <- restart$name
[13:22:53.764]                             if (is.null(name)) 
[13:22:53.764]                               next
[13:22:53.764]                             if (!grepl(pattern, name)) 
[13:22:53.764]                               next
[13:22:53.764]                             invokeRestart(restart)
[13:22:53.764]                             muffled <- TRUE
[13:22:53.764]                             break
[13:22:53.764]                           }
[13:22:53.764]                         }
[13:22:53.764]                       }
[13:22:53.764]                       invisible(muffled)
[13:22:53.764]                     }
[13:22:53.764]                     muffleCondition(cond, pattern = "^muffle")
[13:22:53.764]                   }
[13:22:53.764]                 }
[13:22:53.764]             }
[13:22:53.764]         }))
[13:22:53.764]     }, error = function(ex) {
[13:22:53.764]         base::structure(base::list(value = NULL, visible = NULL, 
[13:22:53.764]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:22:53.764]                 ...future.rng), started = ...future.startTime, 
[13:22:53.764]             finished = Sys.time(), session_uuid = NA_character_, 
[13:22:53.764]             version = "1.8"), class = "FutureResult")
[13:22:53.764]     }, finally = {
[13:22:53.764]         if (!identical(...future.workdir, getwd())) 
[13:22:53.764]             setwd(...future.workdir)
[13:22:53.764]         {
[13:22:53.764]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:22:53.764]                 ...future.oldOptions$nwarnings <- NULL
[13:22:53.764]             }
[13:22:53.764]             base::options(...future.oldOptions)
[13:22:53.764]             if (.Platform$OS.type == "windows") {
[13:22:53.764]                 old_names <- names(...future.oldEnvVars)
[13:22:53.764]                 envs <- base::Sys.getenv()
[13:22:53.764]                 names <- names(envs)
[13:22:53.764]                 common <- intersect(names, old_names)
[13:22:53.764]                 added <- setdiff(names, old_names)
[13:22:53.764]                 removed <- setdiff(old_names, names)
[13:22:53.764]                 changed <- common[...future.oldEnvVars[common] != 
[13:22:53.764]                   envs[common]]
[13:22:53.764]                 NAMES <- toupper(changed)
[13:22:53.764]                 args <- list()
[13:22:53.764]                 for (kk in seq_along(NAMES)) {
[13:22:53.764]                   name <- changed[[kk]]
[13:22:53.764]                   NAME <- NAMES[[kk]]
[13:22:53.764]                   if (name != NAME && is.element(NAME, old_names)) 
[13:22:53.764]                     next
[13:22:53.764]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:22:53.764]                 }
[13:22:53.764]                 NAMES <- toupper(added)
[13:22:53.764]                 for (kk in seq_along(NAMES)) {
[13:22:53.764]                   name <- added[[kk]]
[13:22:53.764]                   NAME <- NAMES[[kk]]
[13:22:53.764]                   if (name != NAME && is.element(NAME, old_names)) 
[13:22:53.764]                     next
[13:22:53.764]                   args[[name]] <- ""
[13:22:53.764]                 }
[13:22:53.764]                 NAMES <- toupper(removed)
[13:22:53.764]                 for (kk in seq_along(NAMES)) {
[13:22:53.764]                   name <- removed[[kk]]
[13:22:53.764]                   NAME <- NAMES[[kk]]
[13:22:53.764]                   if (name != NAME && is.element(NAME, old_names)) 
[13:22:53.764]                     next
[13:22:53.764]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:22:53.764]                 }
[13:22:53.764]                 if (length(args) > 0) 
[13:22:53.764]                   base::do.call(base::Sys.setenv, args = args)
[13:22:53.764]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:22:53.764]             }
[13:22:53.764]             else {
[13:22:53.764]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:22:53.764]             }
[13:22:53.764]             {
[13:22:53.764]                 if (base::length(...future.futureOptionsAdded) > 
[13:22:53.764]                   0L) {
[13:22:53.764]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:22:53.764]                   base::names(opts) <- ...future.futureOptionsAdded
[13:22:53.764]                   base::options(opts)
[13:22:53.764]                 }
[13:22:53.764]                 {
[13:22:53.764]                   {
[13:22:53.764]                     NULL
[13:22:53.764]                     RNGkind("Mersenne-Twister")
[13:22:53.764]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[13:22:53.764]                       inherits = FALSE)
[13:22:53.764]                   }
[13:22:53.764]                   options(future.plan = NULL)
[13:22:53.764]                   if (is.na(NA_character_)) 
[13:22:53.764]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:22:53.764]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:22:53.764]                   future::plan(list(function (..., envir = parent.frame()) 
[13:22:53.764]                   {
[13:22:53.764]                     future <- SequentialFuture(..., envir = envir)
[13:22:53.764]                     if (!future$lazy) 
[13:22:53.764]                       future <- run(future)
[13:22:53.764]                     invisible(future)
[13:22:53.764]                   }), .cleanup = FALSE, .init = FALSE)
[13:22:53.764]                 }
[13:22:53.764]             }
[13:22:53.764]         }
[13:22:53.764]     })
[13:22:53.764]     if (TRUE) {
[13:22:53.764]         base::sink(type = "output", split = FALSE)
[13:22:53.764]         if (TRUE) {
[13:22:53.764]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:22:53.764]         }
[13:22:53.764]         else {
[13:22:53.764]             ...future.result["stdout"] <- base::list(NULL)
[13:22:53.764]         }
[13:22:53.764]         base::close(...future.stdout)
[13:22:53.764]         ...future.stdout <- NULL
[13:22:53.764]     }
[13:22:53.764]     ...future.result$conditions <- ...future.conditions
[13:22:53.764]     ...future.result$finished <- base::Sys.time()
[13:22:53.764]     ...future.result
[13:22:53.764] }
[13:22:53.766] plan(): Setting new future strategy stack:
[13:22:53.766] List of future strategies:
[13:22:53.766] 1. sequential:
[13:22:53.766]    - args: function (..., envir = parent.frame())
[13:22:53.766]    - tweaked: FALSE
[13:22:53.766]    - call: NULL
[13:22:53.767] plan(): nbrOfWorkers() = 1
[13:22:53.767] plan(): Setting new future strategy stack:
[13:22:53.767] List of future strategies:
[13:22:53.767] 1. sequential:
[13:22:53.767]    - args: function (..., envir = parent.frame())
[13:22:53.767]    - tweaked: FALSE
[13:22:53.767]    - call: future::plan("sequential")
[13:22:53.768] plan(): nbrOfWorkers() = 1
[13:22:53.768] SequentialFuture started (and completed)
[13:22:53.768] - Launch lazy future ... done
[13:22:53.768] run() for ‘SequentialFuture’ ... done
[13:22:53.768] - run() ... done
[13:22:53.768] - resolved() ...
[13:22:53.769] resolved() for ‘SequentialFuture’ ...
[13:22:53.769] - state: ‘finished’
[13:22:53.769] - run: TRUE
[13:22:53.769] - result: ‘FutureResult’
[13:22:53.769] resolved() for ‘SequentialFuture’ ... done
[13:22:53.769] - resolved: TRUE
[13:22:53.769] - resolved() ... done
[13:22:53.769] resolved() for ‘SequentialFuture’ ... done
[1] TRUE
> y <- value(f)
> print(y)
[1] 42
> stopifnot(y == 42L)
> 
> 
> message("*** future() w/ gc = TRUE ...")
*** future() w/ gc = TRUE ...
> 
> f <- future(42L, gc = TRUE, lazy = TRUE)
[13:22:53.770] getGlobalsAndPackages() ...
[13:22:53.770] Searching for globals...
[13:22:53.770] 
[13:22:53.770] Searching for globals ... DONE
[13:22:53.770] - globals: [0] <none>
[13:22:53.773] getGlobalsAndPackages() ... DONE
> print(f)
Future:
Label: ‘<none>’
Expression:
[1] 42
Lazy evaluation: TRUE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: FALSE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: e979bf26-4799-4195-2490-4b068551e9f9
Class: ‘Future’, ‘environment’
> y <- value(f)
[13:22:53.774] run() for ‘Future’ ...
[13:22:53.774] - state: ‘created’
[13:22:53.774] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[13:22:53.774] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[13:22:53.774] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[13:22:53.775]   - Field: ‘label’
[13:22:53.775]   - Field: ‘local’
[13:22:53.775]   - Field: ‘owner’
[13:22:53.775]   - Field: ‘envir’
[13:22:53.775]   - Field: ‘packages’
[13:22:53.775]   - Field: ‘gc’
[13:22:53.775]   - Field: ‘conditions’
[13:22:53.775]   - Field: ‘expr’
[13:22:53.775]   - Field: ‘uuid’
[13:22:53.776]   - Field: ‘seed’
[13:22:53.776]   - Field: ‘version’
[13:22:53.776]   - Field: ‘result’
[13:22:53.776]   - Field: ‘asynchronous’
[13:22:53.776]   - Field: ‘calls’
[13:22:53.776]   - Field: ‘globals’
[13:22:53.776]   - Field: ‘stdout’
[13:22:53.776]   - Field: ‘earlySignal’
[13:22:53.776]   - Field: ‘lazy’
[13:22:53.776]   - Field: ‘state’
[13:22:53.776] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[13:22:53.777] - Launch lazy future ...
[13:22:53.777] Packages needed by the future expression (n = 0): <none>
[13:22:53.777] Packages needed by future strategies (n = 0): <none>
[13:22:53.777] {
[13:22:53.777]     {
[13:22:53.777]         {
[13:22:53.777]             ...future.startTime <- base::Sys.time()
[13:22:53.777]             {
[13:22:53.777]                 {
[13:22:53.777]                   {
[13:22:53.777]                     base::local({
[13:22:53.777]                       has_future <- base::requireNamespace("future", 
[13:22:53.777]                         quietly = TRUE)
[13:22:53.777]                       if (has_future) {
[13:22:53.777]                         ns <- base::getNamespace("future")
[13:22:53.777]                         version <- ns[[".package"]][["version"]]
[13:22:53.777]                         if (is.null(version)) 
[13:22:53.777]                           version <- utils::packageVersion("future")
[13:22:53.777]                       }
[13:22:53.777]                       else {
[13:22:53.777]                         version <- NULL
[13:22:53.777]                       }
[13:22:53.777]                       if (!has_future || version < "1.8.0") {
[13:22:53.777]                         info <- base::c(r_version = base::gsub("R version ", 
[13:22:53.777]                           "", base::R.version$version.string), 
[13:22:53.777]                           platform = base::sprintf("%s (%s-bit)", 
[13:22:53.777]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:22:53.777]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[13:22:53.777]                             "release", "version")], collapse = " "), 
[13:22:53.777]                           hostname = base::Sys.info()[["nodename"]])
[13:22:53.777]                         info <- base::sprintf("%s: %s", base::names(info), 
[13:22:53.777]                           info)
[13:22:53.777]                         info <- base::paste(info, collapse = "; ")
[13:22:53.777]                         if (!has_future) {
[13:22:53.777]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:22:53.777]                             info)
[13:22:53.777]                         }
[13:22:53.777]                         else {
[13:22:53.777]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:22:53.777]                             info, version)
[13:22:53.777]                         }
[13:22:53.777]                         base::stop(msg)
[13:22:53.777]                       }
[13:22:53.777]                     })
[13:22:53.777]                   }
[13:22:53.777]                   options(future.plan = NULL)
[13:22:53.777]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:22:53.777]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:22:53.777]                 }
[13:22:53.777]                 ...future.workdir <- getwd()
[13:22:53.777]             }
[13:22:53.777]             ...future.oldOptions <- base::as.list(base::.Options)
[13:22:53.777]             ...future.oldEnvVars <- base::Sys.getenv()
[13:22:53.777]         }
[13:22:53.777]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:22:53.777]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:22:53.777]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:22:53.777]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:22:53.777]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:22:53.777]             future.stdout.windows.reencode = NULL, width = 80L)
[13:22:53.777]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:22:53.777]             base::names(...future.oldOptions))
[13:22:53.777]     }
[13:22:53.777]     if (FALSE) {
[13:22:53.777]     }
[13:22:53.777]     else {
[13:22:53.777]         if (TRUE) {
[13:22:53.777]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:22:53.777]                 open = "w")
[13:22:53.777]         }
[13:22:53.777]         else {
[13:22:53.777]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:22:53.777]                 windows = "NUL", "/dev/null"), open = "w")
[13:22:53.777]         }
[13:22:53.777]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:22:53.777]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:22:53.777]             base::sink(type = "output", split = FALSE)
[13:22:53.777]             base::close(...future.stdout)
[13:22:53.777]         }, add = TRUE)
[13:22:53.777]     }
[13:22:53.777]     ...future.frame <- base::sys.nframe()
[13:22:53.777]     ...future.conditions <- base::list()
[13:22:53.777]     ...future.rng <- base::globalenv()$.Random.seed
[13:22:53.777]     if (FALSE) {
[13:22:53.777]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:22:53.777]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:22:53.777]     }
[13:22:53.777]     ...future.result <- base::tryCatch({
[13:22:53.777]         base::withCallingHandlers({
[13:22:53.777]             ...future.value <- base::withVisible(base::local(42L))
[13:22:53.777]             future::FutureResult(value = ...future.value$value, 
[13:22:53.777]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:22:53.777]                   ...future.rng), globalenv = if (FALSE) 
[13:22:53.777]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:22:53.777]                     ...future.globalenv.names))
[13:22:53.777]                 else NULL, started = ...future.startTime, version = "1.8")
[13:22:53.777]         }, condition = base::local({
[13:22:53.777]             c <- base::c
[13:22:53.777]             inherits <- base::inherits
[13:22:53.777]             invokeRestart <- base::invokeRestart
[13:22:53.777]             length <- base::length
[13:22:53.777]             list <- base::list
[13:22:53.777]             seq.int <- base::seq.int
[13:22:53.777]             signalCondition <- base::signalCondition
[13:22:53.777]             sys.calls <- base::sys.calls
[13:22:53.777]             `[[` <- base::`[[`
[13:22:53.777]             `+` <- base::`+`
[13:22:53.777]             `<<-` <- base::`<<-`
[13:22:53.777]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:22:53.777]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:22:53.777]                   3L)]
[13:22:53.777]             }
[13:22:53.777]             function(cond) {
[13:22:53.777]                 is_error <- inherits(cond, "error")
[13:22:53.777]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:22:53.777]                   NULL)
[13:22:53.777]                 if (is_error) {
[13:22:53.777]                   sessionInformation <- function() {
[13:22:53.777]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:22:53.777]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:22:53.777]                       search = base::search(), system = base::Sys.info())
[13:22:53.777]                   }
[13:22:53.777]                   ...future.conditions[[length(...future.conditions) + 
[13:22:53.777]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:22:53.777]                     cond$call), session = sessionInformation(), 
[13:22:53.777]                     timestamp = base::Sys.time(), signaled = 0L)
[13:22:53.777]                   signalCondition(cond)
[13:22:53.777]                 }
[13:22:53.777]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:22:53.777]                 "immediateCondition"))) {
[13:22:53.777]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:22:53.777]                   ...future.conditions[[length(...future.conditions) + 
[13:22:53.777]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:22:53.777]                   if (TRUE && !signal) {
[13:22:53.777]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:22:53.777]                     {
[13:22:53.777]                       inherits <- base::inherits
[13:22:53.777]                       invokeRestart <- base::invokeRestart
[13:22:53.777]                       is.null <- base::is.null
[13:22:53.777]                       muffled <- FALSE
[13:22:53.777]                       if (inherits(cond, "message")) {
[13:22:53.777]                         muffled <- grepl(pattern, "muffleMessage")
[13:22:53.777]                         if (muffled) 
[13:22:53.777]                           invokeRestart("muffleMessage")
[13:22:53.777]                       }
[13:22:53.777]                       else if (inherits(cond, "warning")) {
[13:22:53.777]                         muffled <- grepl(pattern, "muffleWarning")
[13:22:53.777]                         if (muffled) 
[13:22:53.777]                           invokeRestart("muffleWarning")
[13:22:53.777]                       }
[13:22:53.777]                       else if (inherits(cond, "condition")) {
[13:22:53.777]                         if (!is.null(pattern)) {
[13:22:53.777]                           computeRestarts <- base::computeRestarts
[13:22:53.777]                           grepl <- base::grepl
[13:22:53.777]                           restarts <- computeRestarts(cond)
[13:22:53.777]                           for (restart in restarts) {
[13:22:53.777]                             name <- restart$name
[13:22:53.777]                             if (is.null(name)) 
[13:22:53.777]                               next
[13:22:53.777]                             if (!grepl(pattern, name)) 
[13:22:53.777]                               next
[13:22:53.777]                             invokeRestart(restart)
[13:22:53.777]                             muffled <- TRUE
[13:22:53.777]                             break
[13:22:53.777]                           }
[13:22:53.777]                         }
[13:22:53.777]                       }
[13:22:53.777]                       invisible(muffled)
[13:22:53.777]                     }
[13:22:53.777]                     muffleCondition(cond, pattern = "^muffle")
[13:22:53.777]                   }
[13:22:53.777]                 }
[13:22:53.777]                 else {
[13:22:53.777]                   if (TRUE) {
[13:22:53.777]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:22:53.777]                     {
[13:22:53.777]                       inherits <- base::inherits
[13:22:53.777]                       invokeRestart <- base::invokeRestart
[13:22:53.777]                       is.null <- base::is.null
[13:22:53.777]                       muffled <- FALSE
[13:22:53.777]                       if (inherits(cond, "message")) {
[13:22:53.777]                         muffled <- grepl(pattern, "muffleMessage")
[13:22:53.777]                         if (muffled) 
[13:22:53.777]                           invokeRestart("muffleMessage")
[13:22:53.777]                       }
[13:22:53.777]                       else if (inherits(cond, "warning")) {
[13:22:53.777]                         muffled <- grepl(pattern, "muffleWarning")
[13:22:53.777]                         if (muffled) 
[13:22:53.777]                           invokeRestart("muffleWarning")
[13:22:53.777]                       }
[13:22:53.777]                       else if (inherits(cond, "condition")) {
[13:22:53.777]                         if (!is.null(pattern)) {
[13:22:53.777]                           computeRestarts <- base::computeRestarts
[13:22:53.777]                           grepl <- base::grepl
[13:22:53.777]                           restarts <- computeRestarts(cond)
[13:22:53.777]                           for (restart in restarts) {
[13:22:53.777]                             name <- restart$name
[13:22:53.777]                             if (is.null(name)) 
[13:22:53.777]                               next
[13:22:53.777]                             if (!grepl(pattern, name)) 
[13:22:53.777]                               next
[13:22:53.777]                             invokeRestart(restart)
[13:22:53.777]                             muffled <- TRUE
[13:22:53.777]                             break
[13:22:53.777]                           }
[13:22:53.777]                         }
[13:22:53.777]                       }
[13:22:53.777]                       invisible(muffled)
[13:22:53.777]                     }
[13:22:53.777]                     muffleCondition(cond, pattern = "^muffle")
[13:22:53.777]                   }
[13:22:53.777]                 }
[13:22:53.777]             }
[13:22:53.777]         }))
[13:22:53.777]     }, error = function(ex) {
[13:22:53.777]         base::structure(base::list(value = NULL, visible = NULL, 
[13:22:53.777]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:22:53.777]                 ...future.rng), started = ...future.startTime, 
[13:22:53.777]             finished = Sys.time(), session_uuid = NA_character_, 
[13:22:53.777]             version = "1.8"), class = "FutureResult")
[13:22:53.777]     }, finally = {
[13:22:53.777]         if (!identical(...future.workdir, getwd())) 
[13:22:53.777]             setwd(...future.workdir)
[13:22:53.777]         {
[13:22:53.777]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:22:53.777]                 ...future.oldOptions$nwarnings <- NULL
[13:22:53.777]             }
[13:22:53.777]             base::options(...future.oldOptions)
[13:22:53.777]             if (.Platform$OS.type == "windows") {
[13:22:53.777]                 old_names <- names(...future.oldEnvVars)
[13:22:53.777]                 envs <- base::Sys.getenv()
[13:22:53.777]                 names <- names(envs)
[13:22:53.777]                 common <- intersect(names, old_names)
[13:22:53.777]                 added <- setdiff(names, old_names)
[13:22:53.777]                 removed <- setdiff(old_names, names)
[13:22:53.777]                 changed <- common[...future.oldEnvVars[common] != 
[13:22:53.777]                   envs[common]]
[13:22:53.777]                 NAMES <- toupper(changed)
[13:22:53.777]                 args <- list()
[13:22:53.777]                 for (kk in seq_along(NAMES)) {
[13:22:53.777]                   name <- changed[[kk]]
[13:22:53.777]                   NAME <- NAMES[[kk]]
[13:22:53.777]                   if (name != NAME && is.element(NAME, old_names)) 
[13:22:53.777]                     next
[13:22:53.777]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:22:53.777]                 }
[13:22:53.777]                 NAMES <- toupper(added)
[13:22:53.777]                 for (kk in seq_along(NAMES)) {
[13:22:53.777]                   name <- added[[kk]]
[13:22:53.777]                   NAME <- NAMES[[kk]]
[13:22:53.777]                   if (name != NAME && is.element(NAME, old_names)) 
[13:22:53.777]                     next
[13:22:53.777]                   args[[name]] <- ""
[13:22:53.777]                 }
[13:22:53.777]                 NAMES <- toupper(removed)
[13:22:53.777]                 for (kk in seq_along(NAMES)) {
[13:22:53.777]                   name <- removed[[kk]]
[13:22:53.777]                   NAME <- NAMES[[kk]]
[13:22:53.777]                   if (name != NAME && is.element(NAME, old_names)) 
[13:22:53.777]                     next
[13:22:53.777]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:22:53.777]                 }
[13:22:53.777]                 if (length(args) > 0) 
[13:22:53.777]                   base::do.call(base::Sys.setenv, args = args)
[13:22:53.777]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:22:53.777]             }
[13:22:53.777]             else {
[13:22:53.777]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:22:53.777]             }
[13:22:53.777]             {
[13:22:53.777]                 if (base::length(...future.futureOptionsAdded) > 
[13:22:53.777]                   0L) {
[13:22:53.777]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:22:53.777]                   base::names(opts) <- ...future.futureOptionsAdded
[13:22:53.777]                   base::options(opts)
[13:22:53.777]                 }
[13:22:53.777]                 {
[13:22:53.777]                   {
[13:22:53.777]                     NULL
[13:22:53.777]                     RNGkind("Mersenne-Twister")
[13:22:53.777]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[13:22:53.777]                       inherits = FALSE)
[13:22:53.777]                   }
[13:22:53.777]                   options(future.plan = NULL)
[13:22:53.777]                   if (is.na(NA_character_)) 
[13:22:53.777]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:22:53.777]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:22:53.777]                   future::plan(list(function (..., envir = parent.frame()) 
[13:22:53.777]                   {
[13:22:53.777]                     future <- SequentialFuture(..., envir = envir)
[13:22:53.777]                     if (!future$lazy) 
[13:22:53.777]                       future <- run(future)
[13:22:53.777]                     invisible(future)
[13:22:53.777]                   }), .cleanup = FALSE, .init = FALSE)
[13:22:53.777]                 }
[13:22:53.777]             }
[13:22:53.777]         }
[13:22:53.777]     })
[13:22:53.777]     if (TRUE) {
[13:22:53.777]         base::sink(type = "output", split = FALSE)
[13:22:53.777]         if (TRUE) {
[13:22:53.777]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:22:53.777]         }
[13:22:53.777]         else {
[13:22:53.777]             ...future.result["stdout"] <- base::list(NULL)
[13:22:53.777]         }
[13:22:53.777]         base::close(...future.stdout)
[13:22:53.777]         ...future.stdout <- NULL
[13:22:53.777]     }
[13:22:53.777]     ...future.result$conditions <- ...future.conditions
[13:22:53.777]     ...future.result$finished <- base::Sys.time()
[13:22:53.777]     ...future.result
[13:22:53.777] }
[13:22:53.779] plan(): Setting new future strategy stack:
[13:22:53.779] List of future strategies:
[13:22:53.779] 1. sequential:
[13:22:53.779]    - args: function (..., envir = parent.frame())
[13:22:53.779]    - tweaked: FALSE
[13:22:53.779]    - call: NULL
[13:22:53.780] plan(): nbrOfWorkers() = 1
[13:22:53.780] plan(): Setting new future strategy stack:
[13:22:53.781] List of future strategies:
[13:22:53.781] 1. sequential:
[13:22:53.781]    - args: function (..., envir = parent.frame())
[13:22:53.781]    - tweaked: FALSE
[13:22:53.781]    - call: future::plan("sequential")
[13:22:53.781] plan(): nbrOfWorkers() = 1
[13:22:53.781] SequentialFuture started (and completed)
[13:22:53.781] - Launch lazy future ... done
[13:22:53.781] run() for ‘SequentialFuture’ ... done
> print(y)
[1] 42
> stopifnot(y == 42L)
> 
> message("*** future() w/ gc = TRUE ... DONE")
*** future() w/ gc = TRUE ... DONE
> 
> 
> message("*** future() - exceptions ...")
*** future() - exceptions ...
> 
> target <- list(name = "<unknown>", envir = new.env(), code = "Yo!", exists = TRUE)
> res <- tryCatch(get_future(target, mustExist = TRUE), error = identity)
[13:22:53.782] ERROR: Future (‘<unknown>’) not found in environment ‘<noname>’: ‘Yo!’
> stopifnot(inherits(res, "error"))
> 
> message("*** future() - exceptions ... DONE")
*** future() - exceptions ... DONE
> 
> message("*** future() ... DONE")
*** future() ... DONE
> 
> source("incl/end.R")
[13:22:53.783] plan(): Setting new future strategy stack:
[13:22:53.783] List of future strategies:
[13:22:53.783] 1. FutureStrategy:
[13:22:53.783]    - args: function (..., envir = parent.frame())
[13:22:53.783]    - tweaked: FALSE
[13:22:53.783]    - call: future::plan(oplan)
[13:22:53.794] plan(): nbrOfWorkers() = 1
> 
