
R version 4.3.2 (2023-10-31) -- "Eye Holes"
Copyright (C) 2023 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> source("incl/start.R")
[16:05:20.440] plan(): Setting new future strategy stack:
[16:05:20.440] List of future strategies:
[16:05:20.440] 1. sequential:
[16:05:20.440]    - args: function (..., envir = parent.frame())
[16:05:20.440]    - tweaked: FALSE
[16:05:20.440]    - call: future::plan("sequential")
[16:05:20.454] plan(): nbrOfWorkers() = 1
> library("listenv")
> 
> message("*** multisession() ...")
*** multisession() ...
> 
> for (cores in 1:availCores) {
+   ## Speed up CRAN checks: Skip on CRAN Windows 32-bit
+   if (!fullTest && isWin32) next
+   
+   message(sprintf("Testing with %d cores ...", cores))
+   options(mc.cores = cores)
+ 
+   ## No global variables
+   f <- multisession({
+     42L
+   })
+   print(f)
+   stopifnot(inherits(f, "ClusterFuture") || (inherits(f, "SequentialFuture") && f$lazy))
+ 
+   print(resolved(f))
+   y <- value(f)
+   print(y)
+   stopifnot(y == 42L)
+ 
+ 
+   ## A global variable
+   a <- 0
+   f <- multisession({
+     b <- 3
+     c <- 2
+     a * b * c
+   }, globals = TRUE)
+   print(f)
+ 
+ 
+   ## A multisession future is evaluated in a separate
+   ## R session process.  Changing the value of a global
+   ## variable should not affect the result of the
+   ## future.
+   a <- 7  ## Make sure globals are frozen
+   v <- value(f)
+   print(v)
+   stopifnot(v == 0)
+ 
+ 
+   message("*** multisession() with globals and blocking")
+   x <- listenv()
+   for (ii in 2:1) {
+     message(sprintf(" - Creating multisession future #%d ...", ii))
+     x[[ii]] <- multisession({ ii }, globals = TRUE)
+   }
+   message(sprintf(" - Resolving %d multisession futures", length(x)))
+   v <- sapply(x, FUN = value)
+   stopifnot(all(v == 1:2))
+ 
+ 
+   message("*** multisession() - workers inherit .libPaths()")
+ 
+   libs <- value(future(.libPaths()))
+   str(list(
+     main = .libPaths(),
+     workers = libs
+   ))
+   stopifnot(identical(libs, .libPaths()))
+ 
+   message("*** multisession() and errors")
+   f <- multisession({
+     stop("Whoops!")
+     1
+   })
+   print(f)
+   v <- value(f, signal = FALSE)
+   print(v)
+   stopifnot(inherits(v, "simpleError"))
+ 
+   res <- try(value(f), silent = TRUE)
+   print(res)
+   stopifnot(inherits(res, "try-error"))
+ 
+   ## Error is repeated
+   res <- try(value(f), silent = TRUE)
+   print(res)
+   stopifnot(inherits(res, "try-error"))
+ 
+   ## Custom error class
+   f <- multisession({
+     stop(structure(list(message = "boom"),
+                    class = c("MyError", "error", "condition")))
+   })
+   print(f)
+   v <- value(f, signal = FALSE)
+   print(v)
+   stopifnot(inherits(v, "error"), inherits(v, "MyError"))
+ 
+   ## Make sure error is signaled
+   res <- tryCatch(value(f), error = identity)
+   stopifnot(inherits(res, "error"))
+ 
+   ## Issue #200: Custom condition class attributes are lost
+   ## https://github.com/HenrikBengtsson/Wishlist-for-R/issues/57
+   ## stopifnot(inherits(res, "MyError"))    
+ 
+   message(sprintf("Testing with %d cores ... DONE", cores))
+ } ## for (cores ...)
Testing with 1 cores ...
[16:05:20.506] getGlobalsAndPackages() ...
[16:05:20.506] Searching for globals...
[16:05:20.509] - globals found: [1] ‘{’
[16:05:20.509] Searching for globals ... DONE
[16:05:20.509] Resolving globals: FALSE
[16:05:20.510] 
[16:05:20.510] 
[16:05:20.510] getGlobalsAndPackages() ... DONE
SequentialFuture:
Label: ‘<none>’
Expression:
{
    42L
}
Lazy evaluation: TRUE
Asynchronous evaluation: FALSE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: FALSE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: 44f0d080-a0af-4897-da8d-6d247098800b
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[16:05:20.512] Packages needed by the future expression (n = 0): <none>
[16:05:20.512] Packages needed by future strategies (n = 0): <none>
[16:05:20.513] {
[16:05:20.513]     {
[16:05:20.513]         {
[16:05:20.513]             ...future.startTime <- base::Sys.time()
[16:05:20.513]             {
[16:05:20.513]                 {
[16:05:20.513]                   {
[16:05:20.513]                     base::local({
[16:05:20.513]                       has_future <- base::requireNamespace("future", 
[16:05:20.513]                         quietly = TRUE)
[16:05:20.513]                       if (has_future) {
[16:05:20.513]                         ns <- base::getNamespace("future")
[16:05:20.513]                         version <- ns[[".package"]][["version"]]
[16:05:20.513]                         if (is.null(version)) 
[16:05:20.513]                           version <- utils::packageVersion("future")
[16:05:20.513]                       }
[16:05:20.513]                       else {
[16:05:20.513]                         version <- NULL
[16:05:20.513]                       }
[16:05:20.513]                       if (!has_future || version < "1.8.0") {
[16:05:20.513]                         info <- base::c(r_version = base::gsub("R version ", 
[16:05:20.513]                           "", base::R.version$version.string), 
[16:05:20.513]                           platform = base::sprintf("%s (%s-bit)", 
[16:05:20.513]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:05:20.513]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[16:05:20.513]                             "release", "version")], collapse = " "), 
[16:05:20.513]                           hostname = base::Sys.info()[["nodename"]])
[16:05:20.513]                         info <- base::sprintf("%s: %s", base::names(info), 
[16:05:20.513]                           info)
[16:05:20.513]                         info <- base::paste(info, collapse = "; ")
[16:05:20.513]                         if (!has_future) {
[16:05:20.513]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:05:20.513]                             info)
[16:05:20.513]                         }
[16:05:20.513]                         else {
[16:05:20.513]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:05:20.513]                             info, version)
[16:05:20.513]                         }
[16:05:20.513]                         base::stop(msg)
[16:05:20.513]                       }
[16:05:20.513]                     })
[16:05:20.513]                   }
[16:05:20.513]                   options(future.plan = NULL)
[16:05:20.513]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:05:20.513]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:05:20.513]                 }
[16:05:20.513]                 ...future.workdir <- getwd()
[16:05:20.513]             }
[16:05:20.513]             ...future.oldOptions <- base::as.list(base::.Options)
[16:05:20.513]             ...future.oldEnvVars <- base::Sys.getenv()
[16:05:20.513]         }
[16:05:20.513]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:05:20.513]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:05:20.513]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:05:20.513]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:05:20.513]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:05:20.513]             future.stdout.windows.reencode = NULL, width = 80L)
[16:05:20.513]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:05:20.513]             base::names(...future.oldOptions))
[16:05:20.513]     }
[16:05:20.513]     if (FALSE) {
[16:05:20.513]     }
[16:05:20.513]     else {
[16:05:20.513]         if (TRUE) {
[16:05:20.513]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:05:20.513]                 open = "w")
[16:05:20.513]         }
[16:05:20.513]         else {
[16:05:20.513]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:05:20.513]                 windows = "NUL", "/dev/null"), open = "w")
[16:05:20.513]         }
[16:05:20.513]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:05:20.513]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:05:20.513]             base::sink(type = "output", split = FALSE)
[16:05:20.513]             base::close(...future.stdout)
[16:05:20.513]         }, add = TRUE)
[16:05:20.513]     }
[16:05:20.513]     ...future.frame <- base::sys.nframe()
[16:05:20.513]     ...future.conditions <- base::list()
[16:05:20.513]     ...future.rng <- base::globalenv()$.Random.seed
[16:05:20.513]     if (FALSE) {
[16:05:20.513]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:05:20.513]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:05:20.513]     }
[16:05:20.513]     ...future.result <- base::tryCatch({
[16:05:20.513]         base::withCallingHandlers({
[16:05:20.513]             ...future.value <- base::withVisible(base::local({
[16:05:20.513]                 42L
[16:05:20.513]             }))
[16:05:20.513]             future::FutureResult(value = ...future.value$value, 
[16:05:20.513]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:05:20.513]                   ...future.rng), globalenv = if (FALSE) 
[16:05:20.513]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:05:20.513]                     ...future.globalenv.names))
[16:05:20.513]                 else NULL, started = ...future.startTime, version = "1.8")
[16:05:20.513]         }, condition = base::local({
[16:05:20.513]             c <- base::c
[16:05:20.513]             inherits <- base::inherits
[16:05:20.513]             invokeRestart <- base::invokeRestart
[16:05:20.513]             length <- base::length
[16:05:20.513]             list <- base::list
[16:05:20.513]             seq.int <- base::seq.int
[16:05:20.513]             signalCondition <- base::signalCondition
[16:05:20.513]             sys.calls <- base::sys.calls
[16:05:20.513]             `[[` <- base::`[[`
[16:05:20.513]             `+` <- base::`+`
[16:05:20.513]             `<<-` <- base::`<<-`
[16:05:20.513]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:05:20.513]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:05:20.513]                   3L)]
[16:05:20.513]             }
[16:05:20.513]             function(cond) {
[16:05:20.513]                 is_error <- inherits(cond, "error")
[16:05:20.513]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:05:20.513]                   NULL)
[16:05:20.513]                 if (is_error) {
[16:05:20.513]                   sessionInformation <- function() {
[16:05:20.513]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:05:20.513]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:05:20.513]                       search = base::search(), system = base::Sys.info())
[16:05:20.513]                   }
[16:05:20.513]                   ...future.conditions[[length(...future.conditions) + 
[16:05:20.513]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:05:20.513]                     cond$call), session = sessionInformation(), 
[16:05:20.513]                     timestamp = base::Sys.time(), signaled = 0L)
[16:05:20.513]                   signalCondition(cond)
[16:05:20.513]                 }
[16:05:20.513]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:05:20.513]                 "immediateCondition"))) {
[16:05:20.513]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:05:20.513]                   ...future.conditions[[length(...future.conditions) + 
[16:05:20.513]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:05:20.513]                   if (TRUE && !signal) {
[16:05:20.513]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:05:20.513]                     {
[16:05:20.513]                       inherits <- base::inherits
[16:05:20.513]                       invokeRestart <- base::invokeRestart
[16:05:20.513]                       is.null <- base::is.null
[16:05:20.513]                       muffled <- FALSE
[16:05:20.513]                       if (inherits(cond, "message")) {
[16:05:20.513]                         muffled <- grepl(pattern, "muffleMessage")
[16:05:20.513]                         if (muffled) 
[16:05:20.513]                           invokeRestart("muffleMessage")
[16:05:20.513]                       }
[16:05:20.513]                       else if (inherits(cond, "warning")) {
[16:05:20.513]                         muffled <- grepl(pattern, "muffleWarning")
[16:05:20.513]                         if (muffled) 
[16:05:20.513]                           invokeRestart("muffleWarning")
[16:05:20.513]                       }
[16:05:20.513]                       else if (inherits(cond, "condition")) {
[16:05:20.513]                         if (!is.null(pattern)) {
[16:05:20.513]                           computeRestarts <- base::computeRestarts
[16:05:20.513]                           grepl <- base::grepl
[16:05:20.513]                           restarts <- computeRestarts(cond)
[16:05:20.513]                           for (restart in restarts) {
[16:05:20.513]                             name <- restart$name
[16:05:20.513]                             if (is.null(name)) 
[16:05:20.513]                               next
[16:05:20.513]                             if (!grepl(pattern, name)) 
[16:05:20.513]                               next
[16:05:20.513]                             invokeRestart(restart)
[16:05:20.513]                             muffled <- TRUE
[16:05:20.513]                             break
[16:05:20.513]                           }
[16:05:20.513]                         }
[16:05:20.513]                       }
[16:05:20.513]                       invisible(muffled)
[16:05:20.513]                     }
[16:05:20.513]                     muffleCondition(cond, pattern = "^muffle")
[16:05:20.513]                   }
[16:05:20.513]                 }
[16:05:20.513]                 else {
[16:05:20.513]                   if (TRUE) {
[16:05:20.513]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:05:20.513]                     {
[16:05:20.513]                       inherits <- base::inherits
[16:05:20.513]                       invokeRestart <- base::invokeRestart
[16:05:20.513]                       is.null <- base::is.null
[16:05:20.513]                       muffled <- FALSE
[16:05:20.513]                       if (inherits(cond, "message")) {
[16:05:20.513]                         muffled <- grepl(pattern, "muffleMessage")
[16:05:20.513]                         if (muffled) 
[16:05:20.513]                           invokeRestart("muffleMessage")
[16:05:20.513]                       }
[16:05:20.513]                       else if (inherits(cond, "warning")) {
[16:05:20.513]                         muffled <- grepl(pattern, "muffleWarning")
[16:05:20.513]                         if (muffled) 
[16:05:20.513]                           invokeRestart("muffleWarning")
[16:05:20.513]                       }
[16:05:20.513]                       else if (inherits(cond, "condition")) {
[16:05:20.513]                         if (!is.null(pattern)) {
[16:05:20.513]                           computeRestarts <- base::computeRestarts
[16:05:20.513]                           grepl <- base::grepl
[16:05:20.513]                           restarts <- computeRestarts(cond)
[16:05:20.513]                           for (restart in restarts) {
[16:05:20.513]                             name <- restart$name
[16:05:20.513]                             if (is.null(name)) 
[16:05:20.513]                               next
[16:05:20.513]                             if (!grepl(pattern, name)) 
[16:05:20.513]                               next
[16:05:20.513]                             invokeRestart(restart)
[16:05:20.513]                             muffled <- TRUE
[16:05:20.513]                             break
[16:05:20.513]                           }
[16:05:20.513]                         }
[16:05:20.513]                       }
[16:05:20.513]                       invisible(muffled)
[16:05:20.513]                     }
[16:05:20.513]                     muffleCondition(cond, pattern = "^muffle")
[16:05:20.513]                   }
[16:05:20.513]                 }
[16:05:20.513]             }
[16:05:20.513]         }))
[16:05:20.513]     }, error = function(ex) {
[16:05:20.513]         base::structure(base::list(value = NULL, visible = NULL, 
[16:05:20.513]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:05:20.513]                 ...future.rng), started = ...future.startTime, 
[16:05:20.513]             finished = Sys.time(), session_uuid = NA_character_, 
[16:05:20.513]             version = "1.8"), class = "FutureResult")
[16:05:20.513]     }, finally = {
[16:05:20.513]         if (!identical(...future.workdir, getwd())) 
[16:05:20.513]             setwd(...future.workdir)
[16:05:20.513]         {
[16:05:20.513]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:05:20.513]                 ...future.oldOptions$nwarnings <- NULL
[16:05:20.513]             }
[16:05:20.513]             base::options(...future.oldOptions)
[16:05:20.513]             if (.Platform$OS.type == "windows") {
[16:05:20.513]                 old_names <- names(...future.oldEnvVars)
[16:05:20.513]                 envs <- base::Sys.getenv()
[16:05:20.513]                 names <- names(envs)
[16:05:20.513]                 common <- intersect(names, old_names)
[16:05:20.513]                 added <- setdiff(names, old_names)
[16:05:20.513]                 removed <- setdiff(old_names, names)
[16:05:20.513]                 changed <- common[...future.oldEnvVars[common] != 
[16:05:20.513]                   envs[common]]
[16:05:20.513]                 NAMES <- toupper(changed)
[16:05:20.513]                 args <- list()
[16:05:20.513]                 for (kk in seq_along(NAMES)) {
[16:05:20.513]                   name <- changed[[kk]]
[16:05:20.513]                   NAME <- NAMES[[kk]]
[16:05:20.513]                   if (name != NAME && is.element(NAME, old_names)) 
[16:05:20.513]                     next
[16:05:20.513]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:05:20.513]                 }
[16:05:20.513]                 NAMES <- toupper(added)
[16:05:20.513]                 for (kk in seq_along(NAMES)) {
[16:05:20.513]                   name <- added[[kk]]
[16:05:20.513]                   NAME <- NAMES[[kk]]
[16:05:20.513]                   if (name != NAME && is.element(NAME, old_names)) 
[16:05:20.513]                     next
[16:05:20.513]                   args[[name]] <- ""
[16:05:20.513]                 }
[16:05:20.513]                 NAMES <- toupper(removed)
[16:05:20.513]                 for (kk in seq_along(NAMES)) {
[16:05:20.513]                   name <- removed[[kk]]
[16:05:20.513]                   NAME <- NAMES[[kk]]
[16:05:20.513]                   if (name != NAME && is.element(NAME, old_names)) 
[16:05:20.513]                     next
[16:05:20.513]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:05:20.513]                 }
[16:05:20.513]                 if (length(args) > 0) 
[16:05:20.513]                   base::do.call(base::Sys.setenv, args = args)
[16:05:20.513]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:05:20.513]             }
[16:05:20.513]             else {
[16:05:20.513]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:05:20.513]             }
[16:05:20.513]             {
[16:05:20.513]                 if (base::length(...future.futureOptionsAdded) > 
[16:05:20.513]                   0L) {
[16:05:20.513]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:05:20.513]                   base::names(opts) <- ...future.futureOptionsAdded
[16:05:20.513]                   base::options(opts)
[16:05:20.513]                 }
[16:05:20.513]                 {
[16:05:20.513]                   {
[16:05:20.513]                     NULL
[16:05:20.513]                     RNGkind("Mersenne-Twister")
[16:05:20.513]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[16:05:20.513]                       inherits = FALSE)
[16:05:20.513]                   }
[16:05:20.513]                   options(future.plan = NULL)
[16:05:20.513]                   if (is.na(NA_character_)) 
[16:05:20.513]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:05:20.513]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:05:20.513]                   future::plan(list(function (..., envir = parent.frame()) 
[16:05:20.513]                   {
[16:05:20.513]                     future <- SequentialFuture(..., envir = envir)
[16:05:20.513]                     if (!future$lazy) 
[16:05:20.513]                       future <- run(future)
[16:05:20.513]                     invisible(future)
[16:05:20.513]                   }), .cleanup = FALSE, .init = FALSE)
[16:05:20.513]                 }
[16:05:20.513]             }
[16:05:20.513]         }
[16:05:20.513]     })
[16:05:20.513]     if (TRUE) {
[16:05:20.513]         base::sink(type = "output", split = FALSE)
[16:05:20.513]         if (TRUE) {
[16:05:20.513]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:05:20.513]         }
[16:05:20.513]         else {
[16:05:20.513]             ...future.result["stdout"] <- base::list(NULL)
[16:05:20.513]         }
[16:05:20.513]         base::close(...future.stdout)
[16:05:20.513]         ...future.stdout <- NULL
[16:05:20.513]     }
[16:05:20.513]     ...future.result$conditions <- ...future.conditions
[16:05:20.513]     ...future.result$finished <- base::Sys.time()
[16:05:20.513]     ...future.result
[16:05:20.513] }
[16:05:20.515] plan(): Setting new future strategy stack:
[16:05:20.515] List of future strategies:
[16:05:20.515] 1. sequential:
[16:05:20.515]    - args: function (..., envir = parent.frame())
[16:05:20.515]    - tweaked: FALSE
[16:05:20.515]    - call: NULL
[16:05:20.515] plan(): nbrOfWorkers() = 1
[16:05:20.516] plan(): Setting new future strategy stack:
[16:05:20.516] List of future strategies:
[16:05:20.516] 1. sequential:
[16:05:20.516]    - args: function (..., envir = parent.frame())
[16:05:20.516]    - tweaked: FALSE
[16:05:20.516]    - call: future::plan("sequential")
[16:05:20.517] plan(): nbrOfWorkers() = 1
[16:05:20.517] SequentialFuture started (and completed)
[16:05:20.517] resolved() for ‘SequentialFuture’ ...
[16:05:20.517] - state: ‘finished’
[16:05:20.518] - run: TRUE
[16:05:20.518] - result: ‘FutureResult’
[16:05:20.518] resolved() for ‘SequentialFuture’ ... done
[1] TRUE
[1] 42
[16:05:20.521] getGlobalsAndPackages() ...
[16:05:20.521] Searching for globals...
[16:05:20.526] - globals found: [4] ‘{’, ‘<-’, ‘*’, ‘a’
[16:05:20.526] Searching for globals ... DONE
[16:05:20.526] Resolving globals: FALSE
[16:05:20.527] The total size of the 1 globals is 56 bytes (56 bytes)
[16:05:20.529] The total size of the 1 globals exported for future expression (‘{; b <- 3; c <- 2; a * b * c; }’) is 56 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘a’ (56 bytes of class ‘numeric’)
[16:05:20.529] - globals: [1] ‘a’
[16:05:20.530] 
[16:05:20.530] getGlobalsAndPackages() ... DONE
SequentialFuture:
Label: ‘<none>’
Expression:
{
    b <- 3
    c <- 2
    a * b * c
}
Lazy evaluation: TRUE
Asynchronous evaluation: FALSE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: 1 objects totaling 56 bytes (numeric ‘a’ of 56 bytes)
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: FALSE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: 44f0d080-a0af-4897-da8d-6d247098800b
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[16:05:20.531] Packages needed by the future expression (n = 0): <none>
[16:05:20.531] Packages needed by future strategies (n = 0): <none>
[16:05:20.531] {
[16:05:20.531]     {
[16:05:20.531]         {
[16:05:20.531]             ...future.startTime <- base::Sys.time()
[16:05:20.531]             {
[16:05:20.531]                 {
[16:05:20.531]                   {
[16:05:20.531]                     base::local({
[16:05:20.531]                       has_future <- base::requireNamespace("future", 
[16:05:20.531]                         quietly = TRUE)
[16:05:20.531]                       if (has_future) {
[16:05:20.531]                         ns <- base::getNamespace("future")
[16:05:20.531]                         version <- ns[[".package"]][["version"]]
[16:05:20.531]                         if (is.null(version)) 
[16:05:20.531]                           version <- utils::packageVersion("future")
[16:05:20.531]                       }
[16:05:20.531]                       else {
[16:05:20.531]                         version <- NULL
[16:05:20.531]                       }
[16:05:20.531]                       if (!has_future || version < "1.8.0") {
[16:05:20.531]                         info <- base::c(r_version = base::gsub("R version ", 
[16:05:20.531]                           "", base::R.version$version.string), 
[16:05:20.531]                           platform = base::sprintf("%s (%s-bit)", 
[16:05:20.531]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:05:20.531]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[16:05:20.531]                             "release", "version")], collapse = " "), 
[16:05:20.531]                           hostname = base::Sys.info()[["nodename"]])
[16:05:20.531]                         info <- base::sprintf("%s: %s", base::names(info), 
[16:05:20.531]                           info)
[16:05:20.531]                         info <- base::paste(info, collapse = "; ")
[16:05:20.531]                         if (!has_future) {
[16:05:20.531]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:05:20.531]                             info)
[16:05:20.531]                         }
[16:05:20.531]                         else {
[16:05:20.531]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:05:20.531]                             info, version)
[16:05:20.531]                         }
[16:05:20.531]                         base::stop(msg)
[16:05:20.531]                       }
[16:05:20.531]                     })
[16:05:20.531]                   }
[16:05:20.531]                   options(future.plan = NULL)
[16:05:20.531]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:05:20.531]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:05:20.531]                 }
[16:05:20.531]                 ...future.workdir <- getwd()
[16:05:20.531]             }
[16:05:20.531]             ...future.oldOptions <- base::as.list(base::.Options)
[16:05:20.531]             ...future.oldEnvVars <- base::Sys.getenv()
[16:05:20.531]         }
[16:05:20.531]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:05:20.531]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:05:20.531]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:05:20.531]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:05:20.531]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:05:20.531]             future.stdout.windows.reencode = NULL, width = 80L)
[16:05:20.531]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:05:20.531]             base::names(...future.oldOptions))
[16:05:20.531]     }
[16:05:20.531]     if (FALSE) {
[16:05:20.531]     }
[16:05:20.531]     else {
[16:05:20.531]         if (TRUE) {
[16:05:20.531]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:05:20.531]                 open = "w")
[16:05:20.531]         }
[16:05:20.531]         else {
[16:05:20.531]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:05:20.531]                 windows = "NUL", "/dev/null"), open = "w")
[16:05:20.531]         }
[16:05:20.531]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:05:20.531]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:05:20.531]             base::sink(type = "output", split = FALSE)
[16:05:20.531]             base::close(...future.stdout)
[16:05:20.531]         }, add = TRUE)
[16:05:20.531]     }
[16:05:20.531]     ...future.frame <- base::sys.nframe()
[16:05:20.531]     ...future.conditions <- base::list()
[16:05:20.531]     ...future.rng <- base::globalenv()$.Random.seed
[16:05:20.531]     if (FALSE) {
[16:05:20.531]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:05:20.531]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:05:20.531]     }
[16:05:20.531]     ...future.result <- base::tryCatch({
[16:05:20.531]         base::withCallingHandlers({
[16:05:20.531]             ...future.value <- base::withVisible(base::local({
[16:05:20.531]                 b <- 3
[16:05:20.531]                 c <- 2
[16:05:20.531]                 a * b * c
[16:05:20.531]             }))
[16:05:20.531]             future::FutureResult(value = ...future.value$value, 
[16:05:20.531]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:05:20.531]                   ...future.rng), globalenv = if (FALSE) 
[16:05:20.531]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:05:20.531]                     ...future.globalenv.names))
[16:05:20.531]                 else NULL, started = ...future.startTime, version = "1.8")
[16:05:20.531]         }, condition = base::local({
[16:05:20.531]             c <- base::c
[16:05:20.531]             inherits <- base::inherits
[16:05:20.531]             invokeRestart <- base::invokeRestart
[16:05:20.531]             length <- base::length
[16:05:20.531]             list <- base::list
[16:05:20.531]             seq.int <- base::seq.int
[16:05:20.531]             signalCondition <- base::signalCondition
[16:05:20.531]             sys.calls <- base::sys.calls
[16:05:20.531]             `[[` <- base::`[[`
[16:05:20.531]             `+` <- base::`+`
[16:05:20.531]             `<<-` <- base::`<<-`
[16:05:20.531]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:05:20.531]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:05:20.531]                   3L)]
[16:05:20.531]             }
[16:05:20.531]             function(cond) {
[16:05:20.531]                 is_error <- inherits(cond, "error")
[16:05:20.531]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:05:20.531]                   NULL)
[16:05:20.531]                 if (is_error) {
[16:05:20.531]                   sessionInformation <- function() {
[16:05:20.531]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:05:20.531]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:05:20.531]                       search = base::search(), system = base::Sys.info())
[16:05:20.531]                   }
[16:05:20.531]                   ...future.conditions[[length(...future.conditions) + 
[16:05:20.531]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:05:20.531]                     cond$call), session = sessionInformation(), 
[16:05:20.531]                     timestamp = base::Sys.time(), signaled = 0L)
[16:05:20.531]                   signalCondition(cond)
[16:05:20.531]                 }
[16:05:20.531]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:05:20.531]                 "immediateCondition"))) {
[16:05:20.531]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:05:20.531]                   ...future.conditions[[length(...future.conditions) + 
[16:05:20.531]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:05:20.531]                   if (TRUE && !signal) {
[16:05:20.531]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:05:20.531]                     {
[16:05:20.531]                       inherits <- base::inherits
[16:05:20.531]                       invokeRestart <- base::invokeRestart
[16:05:20.531]                       is.null <- base::is.null
[16:05:20.531]                       muffled <- FALSE
[16:05:20.531]                       if (inherits(cond, "message")) {
[16:05:20.531]                         muffled <- grepl(pattern, "muffleMessage")
[16:05:20.531]                         if (muffled) 
[16:05:20.531]                           invokeRestart("muffleMessage")
[16:05:20.531]                       }
[16:05:20.531]                       else if (inherits(cond, "warning")) {
[16:05:20.531]                         muffled <- grepl(pattern, "muffleWarning")
[16:05:20.531]                         if (muffled) 
[16:05:20.531]                           invokeRestart("muffleWarning")
[16:05:20.531]                       }
[16:05:20.531]                       else if (inherits(cond, "condition")) {
[16:05:20.531]                         if (!is.null(pattern)) {
[16:05:20.531]                           computeRestarts <- base::computeRestarts
[16:05:20.531]                           grepl <- base::grepl
[16:05:20.531]                           restarts <- computeRestarts(cond)
[16:05:20.531]                           for (restart in restarts) {
[16:05:20.531]                             name <- restart$name
[16:05:20.531]                             if (is.null(name)) 
[16:05:20.531]                               next
[16:05:20.531]                             if (!grepl(pattern, name)) 
[16:05:20.531]                               next
[16:05:20.531]                             invokeRestart(restart)
[16:05:20.531]                             muffled <- TRUE
[16:05:20.531]                             break
[16:05:20.531]                           }
[16:05:20.531]                         }
[16:05:20.531]                       }
[16:05:20.531]                       invisible(muffled)
[16:05:20.531]                     }
[16:05:20.531]                     muffleCondition(cond, pattern = "^muffle")
[16:05:20.531]                   }
[16:05:20.531]                 }
[16:05:20.531]                 else {
[16:05:20.531]                   if (TRUE) {
[16:05:20.531]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:05:20.531]                     {
[16:05:20.531]                       inherits <- base::inherits
[16:05:20.531]                       invokeRestart <- base::invokeRestart
[16:05:20.531]                       is.null <- base::is.null
[16:05:20.531]                       muffled <- FALSE
[16:05:20.531]                       if (inherits(cond, "message")) {
[16:05:20.531]                         muffled <- grepl(pattern, "muffleMessage")
[16:05:20.531]                         if (muffled) 
[16:05:20.531]                           invokeRestart("muffleMessage")
[16:05:20.531]                       }
[16:05:20.531]                       else if (inherits(cond, "warning")) {
[16:05:20.531]                         muffled <- grepl(pattern, "muffleWarning")
[16:05:20.531]                         if (muffled) 
[16:05:20.531]                           invokeRestart("muffleWarning")
[16:05:20.531]                       }
[16:05:20.531]                       else if (inherits(cond, "condition")) {
[16:05:20.531]                         if (!is.null(pattern)) {
[16:05:20.531]                           computeRestarts <- base::computeRestarts
[16:05:20.531]                           grepl <- base::grepl
[16:05:20.531]                           restarts <- computeRestarts(cond)
[16:05:20.531]                           for (restart in restarts) {
[16:05:20.531]                             name <- restart$name
[16:05:20.531]                             if (is.null(name)) 
[16:05:20.531]                               next
[16:05:20.531]                             if (!grepl(pattern, name)) 
[16:05:20.531]                               next
[16:05:20.531]                             invokeRestart(restart)
[16:05:20.531]                             muffled <- TRUE
[16:05:20.531]                             break
[16:05:20.531]                           }
[16:05:20.531]                         }
[16:05:20.531]                       }
[16:05:20.531]                       invisible(muffled)
[16:05:20.531]                     }
[16:05:20.531]                     muffleCondition(cond, pattern = "^muffle")
[16:05:20.531]                   }
[16:05:20.531]                 }
[16:05:20.531]             }
[16:05:20.531]         }))
[16:05:20.531]     }, error = function(ex) {
[16:05:20.531]         base::structure(base::list(value = NULL, visible = NULL, 
[16:05:20.531]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:05:20.531]                 ...future.rng), started = ...future.startTime, 
[16:05:20.531]             finished = Sys.time(), session_uuid = NA_character_, 
[16:05:20.531]             version = "1.8"), class = "FutureResult")
[16:05:20.531]     }, finally = {
[16:05:20.531]         if (!identical(...future.workdir, getwd())) 
[16:05:20.531]             setwd(...future.workdir)
[16:05:20.531]         {
[16:05:20.531]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:05:20.531]                 ...future.oldOptions$nwarnings <- NULL
[16:05:20.531]             }
[16:05:20.531]             base::options(...future.oldOptions)
[16:05:20.531]             if (.Platform$OS.type == "windows") {
[16:05:20.531]                 old_names <- names(...future.oldEnvVars)
[16:05:20.531]                 envs <- base::Sys.getenv()
[16:05:20.531]                 names <- names(envs)
[16:05:20.531]                 common <- intersect(names, old_names)
[16:05:20.531]                 added <- setdiff(names, old_names)
[16:05:20.531]                 removed <- setdiff(old_names, names)
[16:05:20.531]                 changed <- common[...future.oldEnvVars[common] != 
[16:05:20.531]                   envs[common]]
[16:05:20.531]                 NAMES <- toupper(changed)
[16:05:20.531]                 args <- list()
[16:05:20.531]                 for (kk in seq_along(NAMES)) {
[16:05:20.531]                   name <- changed[[kk]]
[16:05:20.531]                   NAME <- NAMES[[kk]]
[16:05:20.531]                   if (name != NAME && is.element(NAME, old_names)) 
[16:05:20.531]                     next
[16:05:20.531]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:05:20.531]                 }
[16:05:20.531]                 NAMES <- toupper(added)
[16:05:20.531]                 for (kk in seq_along(NAMES)) {
[16:05:20.531]                   name <- added[[kk]]
[16:05:20.531]                   NAME <- NAMES[[kk]]
[16:05:20.531]                   if (name != NAME && is.element(NAME, old_names)) 
[16:05:20.531]                     next
[16:05:20.531]                   args[[name]] <- ""
[16:05:20.531]                 }
[16:05:20.531]                 NAMES <- toupper(removed)
[16:05:20.531]                 for (kk in seq_along(NAMES)) {
[16:05:20.531]                   name <- removed[[kk]]
[16:05:20.531]                   NAME <- NAMES[[kk]]
[16:05:20.531]                   if (name != NAME && is.element(NAME, old_names)) 
[16:05:20.531]                     next
[16:05:20.531]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:05:20.531]                 }
[16:05:20.531]                 if (length(args) > 0) 
[16:05:20.531]                   base::do.call(base::Sys.setenv, args = args)
[16:05:20.531]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:05:20.531]             }
[16:05:20.531]             else {
[16:05:20.531]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:05:20.531]             }
[16:05:20.531]             {
[16:05:20.531]                 if (base::length(...future.futureOptionsAdded) > 
[16:05:20.531]                   0L) {
[16:05:20.531]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:05:20.531]                   base::names(opts) <- ...future.futureOptionsAdded
[16:05:20.531]                   base::options(opts)
[16:05:20.531]                 }
[16:05:20.531]                 {
[16:05:20.531]                   {
[16:05:20.531]                     NULL
[16:05:20.531]                     RNGkind("Mersenne-Twister")
[16:05:20.531]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[16:05:20.531]                       inherits = FALSE)
[16:05:20.531]                   }
[16:05:20.531]                   options(future.plan = NULL)
[16:05:20.531]                   if (is.na(NA_character_)) 
[16:05:20.531]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:05:20.531]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:05:20.531]                   future::plan(list(function (..., envir = parent.frame()) 
[16:05:20.531]                   {
[16:05:20.531]                     future <- SequentialFuture(..., envir = envir)
[16:05:20.531]                     if (!future$lazy) 
[16:05:20.531]                       future <- run(future)
[16:05:20.531]                     invisible(future)
[16:05:20.531]                   }), .cleanup = FALSE, .init = FALSE)
[16:05:20.531]                 }
[16:05:20.531]             }
[16:05:20.531]         }
[16:05:20.531]     })
[16:05:20.531]     if (TRUE) {
[16:05:20.531]         base::sink(type = "output", split = FALSE)
[16:05:20.531]         if (TRUE) {
[16:05:20.531]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:05:20.531]         }
[16:05:20.531]         else {
[16:05:20.531]             ...future.result["stdout"] <- base::list(NULL)
[16:05:20.531]         }
[16:05:20.531]         base::close(...future.stdout)
[16:05:20.531]         ...future.stdout <- NULL
[16:05:20.531]     }
[16:05:20.531]     ...future.result$conditions <- ...future.conditions
[16:05:20.531]     ...future.result$finished <- base::Sys.time()
[16:05:20.531]     ...future.result
[16:05:20.531] }
[16:05:20.533] assign_globals() ...
[16:05:20.533] List of 1
[16:05:20.533]  $ a: num 0
[16:05:20.533]  - attr(*, "where")=List of 1
[16:05:20.533]   ..$ a:<environment: R_EmptyEnv> 
[16:05:20.533]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[16:05:20.533]  - attr(*, "resolved")= logi FALSE
[16:05:20.533]  - attr(*, "total_size")= num 56
[16:05:20.537] - copied ‘a’ to environment
[16:05:20.537] assign_globals() ... done
[16:05:20.538] plan(): Setting new future strategy stack:
[16:05:20.538] List of future strategies:
[16:05:20.538] 1. sequential:
[16:05:20.538]    - args: function (..., envir = parent.frame())
[16:05:20.538]    - tweaked: FALSE
[16:05:20.538]    - call: NULL
[16:05:20.538] plan(): nbrOfWorkers() = 1
[16:05:20.539] plan(): Setting new future strategy stack:
[16:05:20.539] List of future strategies:
[16:05:20.539] 1. sequential:
[16:05:20.539]    - args: function (..., envir = parent.frame())
[16:05:20.539]    - tweaked: FALSE
[16:05:20.539]    - call: future::plan("sequential")
[16:05:20.539] plan(): nbrOfWorkers() = 1
[16:05:20.539] SequentialFuture started (and completed)
[1] 0
*** multisession() with globals and blocking
 - Creating multisession future #2 ...
[16:05:20.543] getGlobalsAndPackages() ...
[16:05:20.543] Searching for globals...
[16:05:20.544] - globals found: [2] ‘{’, ‘ii’
[16:05:20.544] Searching for globals ... DONE
[16:05:20.544] Resolving globals: FALSE
[16:05:20.544] The total size of the 1 globals is 56 bytes (56 bytes)
[16:05:20.544] The total size of the 1 globals exported for future expression (‘{; ii; }’) is 56 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘ii’ (56 bytes of class ‘numeric’)
[16:05:20.544] - globals: [1] ‘ii’
[16:05:20.545] 
[16:05:20.545] getGlobalsAndPackages() ... DONE
 - Creating multisession future #1 ...
[16:05:20.548] getGlobalsAndPackages() ...
[16:05:20.548] Searching for globals...
[16:05:20.549] - globals found: [2] ‘{’, ‘ii’
[16:05:20.549] Searching for globals ... DONE
[16:05:20.549] Resolving globals: FALSE
[16:05:20.550] The total size of the 1 globals is 56 bytes (56 bytes)
[16:05:20.550] The total size of the 1 globals exported for future expression (‘{; ii; }’) is 56 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘ii’ (56 bytes of class ‘numeric’)
[16:05:20.550] - globals: [1] ‘ii’
[16:05:20.550] 
[16:05:20.550] getGlobalsAndPackages() ... DONE
 - Resolving 2 multisession futures
[16:05:20.551] Packages needed by the future expression (n = 0): <none>
[16:05:20.551] Packages needed by future strategies (n = 0): <none>
[16:05:20.551] {
[16:05:20.551]     {
[16:05:20.551]         {
[16:05:20.551]             ...future.startTime <- base::Sys.time()
[16:05:20.551]             {
[16:05:20.551]                 {
[16:05:20.551]                   {
[16:05:20.551]                     base::local({
[16:05:20.551]                       has_future <- base::requireNamespace("future", 
[16:05:20.551]                         quietly = TRUE)
[16:05:20.551]                       if (has_future) {
[16:05:20.551]                         ns <- base::getNamespace("future")
[16:05:20.551]                         version <- ns[[".package"]][["version"]]
[16:05:20.551]                         if (is.null(version)) 
[16:05:20.551]                           version <- utils::packageVersion("future")
[16:05:20.551]                       }
[16:05:20.551]                       else {
[16:05:20.551]                         version <- NULL
[16:05:20.551]                       }
[16:05:20.551]                       if (!has_future || version < "1.8.0") {
[16:05:20.551]                         info <- base::c(r_version = base::gsub("R version ", 
[16:05:20.551]                           "", base::R.version$version.string), 
[16:05:20.551]                           platform = base::sprintf("%s (%s-bit)", 
[16:05:20.551]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:05:20.551]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[16:05:20.551]                             "release", "version")], collapse = " "), 
[16:05:20.551]                           hostname = base::Sys.info()[["nodename"]])
[16:05:20.551]                         info <- base::sprintf("%s: %s", base::names(info), 
[16:05:20.551]                           info)
[16:05:20.551]                         info <- base::paste(info, collapse = "; ")
[16:05:20.551]                         if (!has_future) {
[16:05:20.551]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:05:20.551]                             info)
[16:05:20.551]                         }
[16:05:20.551]                         else {
[16:05:20.551]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:05:20.551]                             info, version)
[16:05:20.551]                         }
[16:05:20.551]                         base::stop(msg)
[16:05:20.551]                       }
[16:05:20.551]                     })
[16:05:20.551]                   }
[16:05:20.551]                   options(future.plan = NULL)
[16:05:20.551]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:05:20.551]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:05:20.551]                 }
[16:05:20.551]                 ...future.workdir <- getwd()
[16:05:20.551]             }
[16:05:20.551]             ...future.oldOptions <- base::as.list(base::.Options)
[16:05:20.551]             ...future.oldEnvVars <- base::Sys.getenv()
[16:05:20.551]         }
[16:05:20.551]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:05:20.551]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:05:20.551]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:05:20.551]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:05:20.551]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:05:20.551]             future.stdout.windows.reencode = NULL, width = 80L)
[16:05:20.551]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:05:20.551]             base::names(...future.oldOptions))
[16:05:20.551]     }
[16:05:20.551]     if (FALSE) {
[16:05:20.551]     }
[16:05:20.551]     else {
[16:05:20.551]         if (TRUE) {
[16:05:20.551]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:05:20.551]                 open = "w")
[16:05:20.551]         }
[16:05:20.551]         else {
[16:05:20.551]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:05:20.551]                 windows = "NUL", "/dev/null"), open = "w")
[16:05:20.551]         }
[16:05:20.551]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:05:20.551]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:05:20.551]             base::sink(type = "output", split = FALSE)
[16:05:20.551]             base::close(...future.stdout)
[16:05:20.551]         }, add = TRUE)
[16:05:20.551]     }
[16:05:20.551]     ...future.frame <- base::sys.nframe()
[16:05:20.551]     ...future.conditions <- base::list()
[16:05:20.551]     ...future.rng <- base::globalenv()$.Random.seed
[16:05:20.551]     if (FALSE) {
[16:05:20.551]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:05:20.551]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:05:20.551]     }
[16:05:20.551]     ...future.result <- base::tryCatch({
[16:05:20.551]         base::withCallingHandlers({
[16:05:20.551]             ...future.value <- base::withVisible(base::local({
[16:05:20.551]                 ii
[16:05:20.551]             }))
[16:05:20.551]             future::FutureResult(value = ...future.value$value, 
[16:05:20.551]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:05:20.551]                   ...future.rng), globalenv = if (FALSE) 
[16:05:20.551]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:05:20.551]                     ...future.globalenv.names))
[16:05:20.551]                 else NULL, started = ...future.startTime, version = "1.8")
[16:05:20.551]         }, condition = base::local({
[16:05:20.551]             c <- base::c
[16:05:20.551]             inherits <- base::inherits
[16:05:20.551]             invokeRestart <- base::invokeRestart
[16:05:20.551]             length <- base::length
[16:05:20.551]             list <- base::list
[16:05:20.551]             seq.int <- base::seq.int
[16:05:20.551]             signalCondition <- base::signalCondition
[16:05:20.551]             sys.calls <- base::sys.calls
[16:05:20.551]             `[[` <- base::`[[`
[16:05:20.551]             `+` <- base::`+`
[16:05:20.551]             `<<-` <- base::`<<-`
[16:05:20.551]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:05:20.551]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:05:20.551]                   3L)]
[16:05:20.551]             }
[16:05:20.551]             function(cond) {
[16:05:20.551]                 is_error <- inherits(cond, "error")
[16:05:20.551]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:05:20.551]                   NULL)
[16:05:20.551]                 if (is_error) {
[16:05:20.551]                   sessionInformation <- function() {
[16:05:20.551]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:05:20.551]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:05:20.551]                       search = base::search(), system = base::Sys.info())
[16:05:20.551]                   }
[16:05:20.551]                   ...future.conditions[[length(...future.conditions) + 
[16:05:20.551]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:05:20.551]                     cond$call), session = sessionInformation(), 
[16:05:20.551]                     timestamp = base::Sys.time(), signaled = 0L)
[16:05:20.551]                   signalCondition(cond)
[16:05:20.551]                 }
[16:05:20.551]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:05:20.551]                 "immediateCondition"))) {
[16:05:20.551]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:05:20.551]                   ...future.conditions[[length(...future.conditions) + 
[16:05:20.551]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:05:20.551]                   if (TRUE && !signal) {
[16:05:20.551]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:05:20.551]                     {
[16:05:20.551]                       inherits <- base::inherits
[16:05:20.551]                       invokeRestart <- base::invokeRestart
[16:05:20.551]                       is.null <- base::is.null
[16:05:20.551]                       muffled <- FALSE
[16:05:20.551]                       if (inherits(cond, "message")) {
[16:05:20.551]                         muffled <- grepl(pattern, "muffleMessage")
[16:05:20.551]                         if (muffled) 
[16:05:20.551]                           invokeRestart("muffleMessage")
[16:05:20.551]                       }
[16:05:20.551]                       else if (inherits(cond, "warning")) {
[16:05:20.551]                         muffled <- grepl(pattern, "muffleWarning")
[16:05:20.551]                         if (muffled) 
[16:05:20.551]                           invokeRestart("muffleWarning")
[16:05:20.551]                       }
[16:05:20.551]                       else if (inherits(cond, "condition")) {
[16:05:20.551]                         if (!is.null(pattern)) {
[16:05:20.551]                           computeRestarts <- base::computeRestarts
[16:05:20.551]                           grepl <- base::grepl
[16:05:20.551]                           restarts <- computeRestarts(cond)
[16:05:20.551]                           for (restart in restarts) {
[16:05:20.551]                             name <- restart$name
[16:05:20.551]                             if (is.null(name)) 
[16:05:20.551]                               next
[16:05:20.551]                             if (!grepl(pattern, name)) 
[16:05:20.551]                               next
[16:05:20.551]                             invokeRestart(restart)
[16:05:20.551]                             muffled <- TRUE
[16:05:20.551]                             break
[16:05:20.551]                           }
[16:05:20.551]                         }
[16:05:20.551]                       }
[16:05:20.551]                       invisible(muffled)
[16:05:20.551]                     }
[16:05:20.551]                     muffleCondition(cond, pattern = "^muffle")
[16:05:20.551]                   }
[16:05:20.551]                 }
[16:05:20.551]                 else {
[16:05:20.551]                   if (TRUE) {
[16:05:20.551]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:05:20.551]                     {
[16:05:20.551]                       inherits <- base::inherits
[16:05:20.551]                       invokeRestart <- base::invokeRestart
[16:05:20.551]                       is.null <- base::is.null
[16:05:20.551]                       muffled <- FALSE
[16:05:20.551]                       if (inherits(cond, "message")) {
[16:05:20.551]                         muffled <- grepl(pattern, "muffleMessage")
[16:05:20.551]                         if (muffled) 
[16:05:20.551]                           invokeRestart("muffleMessage")
[16:05:20.551]                       }
[16:05:20.551]                       else if (inherits(cond, "warning")) {
[16:05:20.551]                         muffled <- grepl(pattern, "muffleWarning")
[16:05:20.551]                         if (muffled) 
[16:05:20.551]                           invokeRestart("muffleWarning")
[16:05:20.551]                       }
[16:05:20.551]                       else if (inherits(cond, "condition")) {
[16:05:20.551]                         if (!is.null(pattern)) {
[16:05:20.551]                           computeRestarts <- base::computeRestarts
[16:05:20.551]                           grepl <- base::grepl
[16:05:20.551]                           restarts <- computeRestarts(cond)
[16:05:20.551]                           for (restart in restarts) {
[16:05:20.551]                             name <- restart$name
[16:05:20.551]                             if (is.null(name)) 
[16:05:20.551]                               next
[16:05:20.551]                             if (!grepl(pattern, name)) 
[16:05:20.551]                               next
[16:05:20.551]                             invokeRestart(restart)
[16:05:20.551]                             muffled <- TRUE
[16:05:20.551]                             break
[16:05:20.551]                           }
[16:05:20.551]                         }
[16:05:20.551]                       }
[16:05:20.551]                       invisible(muffled)
[16:05:20.551]                     }
[16:05:20.551]                     muffleCondition(cond, pattern = "^muffle")
[16:05:20.551]                   }
[16:05:20.551]                 }
[16:05:20.551]             }
[16:05:20.551]         }))
[16:05:20.551]     }, error = function(ex) {
[16:05:20.551]         base::structure(base::list(value = NULL, visible = NULL, 
[16:05:20.551]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:05:20.551]                 ...future.rng), started = ...future.startTime, 
[16:05:20.551]             finished = Sys.time(), session_uuid = NA_character_, 
[16:05:20.551]             version = "1.8"), class = "FutureResult")
[16:05:20.551]     }, finally = {
[16:05:20.551]         if (!identical(...future.workdir, getwd())) 
[16:05:20.551]             setwd(...future.workdir)
[16:05:20.551]         {
[16:05:20.551]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:05:20.551]                 ...future.oldOptions$nwarnings <- NULL
[16:05:20.551]             }
[16:05:20.551]             base::options(...future.oldOptions)
[16:05:20.551]             if (.Platform$OS.type == "windows") {
[16:05:20.551]                 old_names <- names(...future.oldEnvVars)
[16:05:20.551]                 envs <- base::Sys.getenv()
[16:05:20.551]                 names <- names(envs)
[16:05:20.551]                 common <- intersect(names, old_names)
[16:05:20.551]                 added <- setdiff(names, old_names)
[16:05:20.551]                 removed <- setdiff(old_names, names)
[16:05:20.551]                 changed <- common[...future.oldEnvVars[common] != 
[16:05:20.551]                   envs[common]]
[16:05:20.551]                 NAMES <- toupper(changed)
[16:05:20.551]                 args <- list()
[16:05:20.551]                 for (kk in seq_along(NAMES)) {
[16:05:20.551]                   name <- changed[[kk]]
[16:05:20.551]                   NAME <- NAMES[[kk]]
[16:05:20.551]                   if (name != NAME && is.element(NAME, old_names)) 
[16:05:20.551]                     next
[16:05:20.551]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:05:20.551]                 }
[16:05:20.551]                 NAMES <- toupper(added)
[16:05:20.551]                 for (kk in seq_along(NAMES)) {
[16:05:20.551]                   name <- added[[kk]]
[16:05:20.551]                   NAME <- NAMES[[kk]]
[16:05:20.551]                   if (name != NAME && is.element(NAME, old_names)) 
[16:05:20.551]                     next
[16:05:20.551]                   args[[name]] <- ""
[16:05:20.551]                 }
[16:05:20.551]                 NAMES <- toupper(removed)
[16:05:20.551]                 for (kk in seq_along(NAMES)) {
[16:05:20.551]                   name <- removed[[kk]]
[16:05:20.551]                   NAME <- NAMES[[kk]]
[16:05:20.551]                   if (name != NAME && is.element(NAME, old_names)) 
[16:05:20.551]                     next
[16:05:20.551]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:05:20.551]                 }
[16:05:20.551]                 if (length(args) > 0) 
[16:05:20.551]                   base::do.call(base::Sys.setenv, args = args)
[16:05:20.551]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:05:20.551]             }
[16:05:20.551]             else {
[16:05:20.551]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:05:20.551]             }
[16:05:20.551]             {
[16:05:20.551]                 if (base::length(...future.futureOptionsAdded) > 
[16:05:20.551]                   0L) {
[16:05:20.551]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:05:20.551]                   base::names(opts) <- ...future.futureOptionsAdded
[16:05:20.551]                   base::options(opts)
[16:05:20.551]                 }
[16:05:20.551]                 {
[16:05:20.551]                   {
[16:05:20.551]                     NULL
[16:05:20.551]                     RNGkind("Mersenne-Twister")
[16:05:20.551]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[16:05:20.551]                       inherits = FALSE)
[16:05:20.551]                   }
[16:05:20.551]                   options(future.plan = NULL)
[16:05:20.551]                   if (is.na(NA_character_)) 
[16:05:20.551]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:05:20.551]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:05:20.551]                   future::plan(list(function (..., envir = parent.frame()) 
[16:05:20.551]                   {
[16:05:20.551]                     future <- SequentialFuture(..., envir = envir)
[16:05:20.551]                     if (!future$lazy) 
[16:05:20.551]                       future <- run(future)
[16:05:20.551]                     invisible(future)
[16:05:20.551]                   }), .cleanup = FALSE, .init = FALSE)
[16:05:20.551]                 }
[16:05:20.551]             }
[16:05:20.551]         }
[16:05:20.551]     })
[16:05:20.551]     if (TRUE) {
[16:05:20.551]         base::sink(type = "output", split = FALSE)
[16:05:20.551]         if (TRUE) {
[16:05:20.551]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:05:20.551]         }
[16:05:20.551]         else {
[16:05:20.551]             ...future.result["stdout"] <- base::list(NULL)
[16:05:20.551]         }
[16:05:20.551]         base::close(...future.stdout)
[16:05:20.551]         ...future.stdout <- NULL
[16:05:20.551]     }
[16:05:20.551]     ...future.result$conditions <- ...future.conditions
[16:05:20.551]     ...future.result$finished <- base::Sys.time()
[16:05:20.551]     ...future.result
[16:05:20.551] }
[16:05:20.553] assign_globals() ...
[16:05:20.553] List of 1
[16:05:20.553]  $ ii: int 1
[16:05:20.553]  - attr(*, "where")=List of 1
[16:05:20.553]   ..$ ii:<environment: R_EmptyEnv> 
[16:05:20.553]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[16:05:20.553]  - attr(*, "resolved")= logi FALSE
[16:05:20.553]  - attr(*, "total_size")= num 56
[16:05:20.555] - copied ‘ii’ to environment
[16:05:20.555] assign_globals() ... done
[16:05:20.555] plan(): Setting new future strategy stack:
[16:05:20.555] List of future strategies:
[16:05:20.555] 1. sequential:
[16:05:20.555]    - args: function (..., envir = parent.frame())
[16:05:20.555]    - tweaked: FALSE
[16:05:20.555]    - call: NULL
[16:05:20.556] plan(): nbrOfWorkers() = 1
[16:05:20.556] plan(): Setting new future strategy stack:
[16:05:20.556] List of future strategies:
[16:05:20.556] 1. sequential:
[16:05:20.556]    - args: function (..., envir = parent.frame())
[16:05:20.556]    - tweaked: FALSE
[16:05:20.556]    - call: future::plan("sequential")
[16:05:20.557] plan(): nbrOfWorkers() = 1
[16:05:20.557] SequentialFuture started (and completed)
[16:05:20.557] Packages needed by the future expression (n = 0): <none>
[16:05:20.557] Packages needed by future strategies (n = 0): <none>
[16:05:20.558] {
[16:05:20.558]     {
[16:05:20.558]         {
[16:05:20.558]             ...future.startTime <- base::Sys.time()
[16:05:20.558]             {
[16:05:20.558]                 {
[16:05:20.558]                   {
[16:05:20.558]                     base::local({
[16:05:20.558]                       has_future <- base::requireNamespace("future", 
[16:05:20.558]                         quietly = TRUE)
[16:05:20.558]                       if (has_future) {
[16:05:20.558]                         ns <- base::getNamespace("future")
[16:05:20.558]                         version <- ns[[".package"]][["version"]]
[16:05:20.558]                         if (is.null(version)) 
[16:05:20.558]                           version <- utils::packageVersion("future")
[16:05:20.558]                       }
[16:05:20.558]                       else {
[16:05:20.558]                         version <- NULL
[16:05:20.558]                       }
[16:05:20.558]                       if (!has_future || version < "1.8.0") {
[16:05:20.558]                         info <- base::c(r_version = base::gsub("R version ", 
[16:05:20.558]                           "", base::R.version$version.string), 
[16:05:20.558]                           platform = base::sprintf("%s (%s-bit)", 
[16:05:20.558]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:05:20.558]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[16:05:20.558]                             "release", "version")], collapse = " "), 
[16:05:20.558]                           hostname = base::Sys.info()[["nodename"]])
[16:05:20.558]                         info <- base::sprintf("%s: %s", base::names(info), 
[16:05:20.558]                           info)
[16:05:20.558]                         info <- base::paste(info, collapse = "; ")
[16:05:20.558]                         if (!has_future) {
[16:05:20.558]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:05:20.558]                             info)
[16:05:20.558]                         }
[16:05:20.558]                         else {
[16:05:20.558]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:05:20.558]                             info, version)
[16:05:20.558]                         }
[16:05:20.558]                         base::stop(msg)
[16:05:20.558]                       }
[16:05:20.558]                     })
[16:05:20.558]                   }
[16:05:20.558]                   options(future.plan = NULL)
[16:05:20.558]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:05:20.558]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:05:20.558]                 }
[16:05:20.558]                 ...future.workdir <- getwd()
[16:05:20.558]             }
[16:05:20.558]             ...future.oldOptions <- base::as.list(base::.Options)
[16:05:20.558]             ...future.oldEnvVars <- base::Sys.getenv()
[16:05:20.558]         }
[16:05:20.558]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:05:20.558]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:05:20.558]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:05:20.558]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:05:20.558]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:05:20.558]             future.stdout.windows.reencode = NULL, width = 80L)
[16:05:20.558]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:05:20.558]             base::names(...future.oldOptions))
[16:05:20.558]     }
[16:05:20.558]     if (FALSE) {
[16:05:20.558]     }
[16:05:20.558]     else {
[16:05:20.558]         if (TRUE) {
[16:05:20.558]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:05:20.558]                 open = "w")
[16:05:20.558]         }
[16:05:20.558]         else {
[16:05:20.558]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:05:20.558]                 windows = "NUL", "/dev/null"), open = "w")
[16:05:20.558]         }
[16:05:20.558]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:05:20.558]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:05:20.558]             base::sink(type = "output", split = FALSE)
[16:05:20.558]             base::close(...future.stdout)
[16:05:20.558]         }, add = TRUE)
[16:05:20.558]     }
[16:05:20.558]     ...future.frame <- base::sys.nframe()
[16:05:20.558]     ...future.conditions <- base::list()
[16:05:20.558]     ...future.rng <- base::globalenv()$.Random.seed
[16:05:20.558]     if (FALSE) {
[16:05:20.558]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:05:20.558]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:05:20.558]     }
[16:05:20.558]     ...future.result <- base::tryCatch({
[16:05:20.558]         base::withCallingHandlers({
[16:05:20.558]             ...future.value <- base::withVisible(base::local({
[16:05:20.558]                 ii
[16:05:20.558]             }))
[16:05:20.558]             future::FutureResult(value = ...future.value$value, 
[16:05:20.558]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:05:20.558]                   ...future.rng), globalenv = if (FALSE) 
[16:05:20.558]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:05:20.558]                     ...future.globalenv.names))
[16:05:20.558]                 else NULL, started = ...future.startTime, version = "1.8")
[16:05:20.558]         }, condition = base::local({
[16:05:20.558]             c <- base::c
[16:05:20.558]             inherits <- base::inherits
[16:05:20.558]             invokeRestart <- base::invokeRestart
[16:05:20.558]             length <- base::length
[16:05:20.558]             list <- base::list
[16:05:20.558]             seq.int <- base::seq.int
[16:05:20.558]             signalCondition <- base::signalCondition
[16:05:20.558]             sys.calls <- base::sys.calls
[16:05:20.558]             `[[` <- base::`[[`
[16:05:20.558]             `+` <- base::`+`
[16:05:20.558]             `<<-` <- base::`<<-`
[16:05:20.558]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:05:20.558]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:05:20.558]                   3L)]
[16:05:20.558]             }
[16:05:20.558]             function(cond) {
[16:05:20.558]                 is_error <- inherits(cond, "error")
[16:05:20.558]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:05:20.558]                   NULL)
[16:05:20.558]                 if (is_error) {
[16:05:20.558]                   sessionInformation <- function() {
[16:05:20.558]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:05:20.558]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:05:20.558]                       search = base::search(), system = base::Sys.info())
[16:05:20.558]                   }
[16:05:20.558]                   ...future.conditions[[length(...future.conditions) + 
[16:05:20.558]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:05:20.558]                     cond$call), session = sessionInformation(), 
[16:05:20.558]                     timestamp = base::Sys.time(), signaled = 0L)
[16:05:20.558]                   signalCondition(cond)
[16:05:20.558]                 }
[16:05:20.558]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:05:20.558]                 "immediateCondition"))) {
[16:05:20.558]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:05:20.558]                   ...future.conditions[[length(...future.conditions) + 
[16:05:20.558]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:05:20.558]                   if (TRUE && !signal) {
[16:05:20.558]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:05:20.558]                     {
[16:05:20.558]                       inherits <- base::inherits
[16:05:20.558]                       invokeRestart <- base::invokeRestart
[16:05:20.558]                       is.null <- base::is.null
[16:05:20.558]                       muffled <- FALSE
[16:05:20.558]                       if (inherits(cond, "message")) {
[16:05:20.558]                         muffled <- grepl(pattern, "muffleMessage")
[16:05:20.558]                         if (muffled) 
[16:05:20.558]                           invokeRestart("muffleMessage")
[16:05:20.558]                       }
[16:05:20.558]                       else if (inherits(cond, "warning")) {
[16:05:20.558]                         muffled <- grepl(pattern, "muffleWarning")
[16:05:20.558]                         if (muffled) 
[16:05:20.558]                           invokeRestart("muffleWarning")
[16:05:20.558]                       }
[16:05:20.558]                       else if (inherits(cond, "condition")) {
[16:05:20.558]                         if (!is.null(pattern)) {
[16:05:20.558]                           computeRestarts <- base::computeRestarts
[16:05:20.558]                           grepl <- base::grepl
[16:05:20.558]                           restarts <- computeRestarts(cond)
[16:05:20.558]                           for (restart in restarts) {
[16:05:20.558]                             name <- restart$name
[16:05:20.558]                             if (is.null(name)) 
[16:05:20.558]                               next
[16:05:20.558]                             if (!grepl(pattern, name)) 
[16:05:20.558]                               next
[16:05:20.558]                             invokeRestart(restart)
[16:05:20.558]                             muffled <- TRUE
[16:05:20.558]                             break
[16:05:20.558]                           }
[16:05:20.558]                         }
[16:05:20.558]                       }
[16:05:20.558]                       invisible(muffled)
[16:05:20.558]                     }
[16:05:20.558]                     muffleCondition(cond, pattern = "^muffle")
[16:05:20.558]                   }
[16:05:20.558]                 }
[16:05:20.558]                 else {
[16:05:20.558]                   if (TRUE) {
[16:05:20.558]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:05:20.558]                     {
[16:05:20.558]                       inherits <- base::inherits
[16:05:20.558]                       invokeRestart <- base::invokeRestart
[16:05:20.558]                       is.null <- base::is.null
[16:05:20.558]                       muffled <- FALSE
[16:05:20.558]                       if (inherits(cond, "message")) {
[16:05:20.558]                         muffled <- grepl(pattern, "muffleMessage")
[16:05:20.558]                         if (muffled) 
[16:05:20.558]                           invokeRestart("muffleMessage")
[16:05:20.558]                       }
[16:05:20.558]                       else if (inherits(cond, "warning")) {
[16:05:20.558]                         muffled <- grepl(pattern, "muffleWarning")
[16:05:20.558]                         if (muffled) 
[16:05:20.558]                           invokeRestart("muffleWarning")
[16:05:20.558]                       }
[16:05:20.558]                       else if (inherits(cond, "condition")) {
[16:05:20.558]                         if (!is.null(pattern)) {
[16:05:20.558]                           computeRestarts <- base::computeRestarts
[16:05:20.558]                           grepl <- base::grepl
[16:05:20.558]                           restarts <- computeRestarts(cond)
[16:05:20.558]                           for (restart in restarts) {
[16:05:20.558]                             name <- restart$name
[16:05:20.558]                             if (is.null(name)) 
[16:05:20.558]                               next
[16:05:20.558]                             if (!grepl(pattern, name)) 
[16:05:20.558]                               next
[16:05:20.558]                             invokeRestart(restart)
[16:05:20.558]                             muffled <- TRUE
[16:05:20.558]                             break
[16:05:20.558]                           }
[16:05:20.558]                         }
[16:05:20.558]                       }
[16:05:20.558]                       invisible(muffled)
[16:05:20.558]                     }
[16:05:20.558]                     muffleCondition(cond, pattern = "^muffle")
[16:05:20.558]                   }
[16:05:20.558]                 }
[16:05:20.558]             }
[16:05:20.558]         }))
[16:05:20.558]     }, error = function(ex) {
[16:05:20.558]         base::structure(base::list(value = NULL, visible = NULL, 
[16:05:20.558]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:05:20.558]                 ...future.rng), started = ...future.startTime, 
[16:05:20.558]             finished = Sys.time(), session_uuid = NA_character_, 
[16:05:20.558]             version = "1.8"), class = "FutureResult")
[16:05:20.558]     }, finally = {
[16:05:20.558]         if (!identical(...future.workdir, getwd())) 
[16:05:20.558]             setwd(...future.workdir)
[16:05:20.558]         {
[16:05:20.558]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:05:20.558]                 ...future.oldOptions$nwarnings <- NULL
[16:05:20.558]             }
[16:05:20.558]             base::options(...future.oldOptions)
[16:05:20.558]             if (.Platform$OS.type == "windows") {
[16:05:20.558]                 old_names <- names(...future.oldEnvVars)
[16:05:20.558]                 envs <- base::Sys.getenv()
[16:05:20.558]                 names <- names(envs)
[16:05:20.558]                 common <- intersect(names, old_names)
[16:05:20.558]                 added <- setdiff(names, old_names)
[16:05:20.558]                 removed <- setdiff(old_names, names)
[16:05:20.558]                 changed <- common[...future.oldEnvVars[common] != 
[16:05:20.558]                   envs[common]]
[16:05:20.558]                 NAMES <- toupper(changed)
[16:05:20.558]                 args <- list()
[16:05:20.558]                 for (kk in seq_along(NAMES)) {
[16:05:20.558]                   name <- changed[[kk]]
[16:05:20.558]                   NAME <- NAMES[[kk]]
[16:05:20.558]                   if (name != NAME && is.element(NAME, old_names)) 
[16:05:20.558]                     next
[16:05:20.558]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:05:20.558]                 }
[16:05:20.558]                 NAMES <- toupper(added)
[16:05:20.558]                 for (kk in seq_along(NAMES)) {
[16:05:20.558]                   name <- added[[kk]]
[16:05:20.558]                   NAME <- NAMES[[kk]]
[16:05:20.558]                   if (name != NAME && is.element(NAME, old_names)) 
[16:05:20.558]                     next
[16:05:20.558]                   args[[name]] <- ""
[16:05:20.558]                 }
[16:05:20.558]                 NAMES <- toupper(removed)
[16:05:20.558]                 for (kk in seq_along(NAMES)) {
[16:05:20.558]                   name <- removed[[kk]]
[16:05:20.558]                   NAME <- NAMES[[kk]]
[16:05:20.558]                   if (name != NAME && is.element(NAME, old_names)) 
[16:05:20.558]                     next
[16:05:20.558]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:05:20.558]                 }
[16:05:20.558]                 if (length(args) > 0) 
[16:05:20.558]                   base::do.call(base::Sys.setenv, args = args)
[16:05:20.558]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:05:20.558]             }
[16:05:20.558]             else {
[16:05:20.558]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:05:20.558]             }
[16:05:20.558]             {
[16:05:20.558]                 if (base::length(...future.futureOptionsAdded) > 
[16:05:20.558]                   0L) {
[16:05:20.558]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:05:20.558]                   base::names(opts) <- ...future.futureOptionsAdded
[16:05:20.558]                   base::options(opts)
[16:05:20.558]                 }
[16:05:20.558]                 {
[16:05:20.558]                   {
[16:05:20.558]                     NULL
[16:05:20.558]                     RNGkind("Mersenne-Twister")
[16:05:20.558]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[16:05:20.558]                       inherits = FALSE)
[16:05:20.558]                   }
[16:05:20.558]                   options(future.plan = NULL)
[16:05:20.558]                   if (is.na(NA_character_)) 
[16:05:20.558]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:05:20.558]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:05:20.558]                   future::plan(list(function (..., envir = parent.frame()) 
[16:05:20.558]                   {
[16:05:20.558]                     future <- SequentialFuture(..., envir = envir)
[16:05:20.558]                     if (!future$lazy) 
[16:05:20.558]                       future <- run(future)
[16:05:20.558]                     invisible(future)
[16:05:20.558]                   }), .cleanup = FALSE, .init = FALSE)
[16:05:20.558]                 }
[16:05:20.558]             }
[16:05:20.558]         }
[16:05:20.558]     })
[16:05:20.558]     if (TRUE) {
[16:05:20.558]         base::sink(type = "output", split = FALSE)
[16:05:20.558]         if (TRUE) {
[16:05:20.558]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:05:20.558]         }
[16:05:20.558]         else {
[16:05:20.558]             ...future.result["stdout"] <- base::list(NULL)
[16:05:20.558]         }
[16:05:20.558]         base::close(...future.stdout)
[16:05:20.558]         ...future.stdout <- NULL
[16:05:20.558]     }
[16:05:20.558]     ...future.result$conditions <- ...future.conditions
[16:05:20.558]     ...future.result$finished <- base::Sys.time()
[16:05:20.558]     ...future.result
[16:05:20.558] }
[16:05:20.559] assign_globals() ...
[16:05:20.559] List of 1
[16:05:20.559]  $ ii: int 2
[16:05:20.559]  - attr(*, "where")=List of 1
[16:05:20.559]   ..$ ii:<environment: R_EmptyEnv> 
[16:05:20.559]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[16:05:20.559]  - attr(*, "resolved")= logi FALSE
[16:05:20.559]  - attr(*, "total_size")= num 56
[16:05:20.561] - copied ‘ii’ to environment
[16:05:20.561] assign_globals() ... done
[16:05:20.562] plan(): Setting new future strategy stack:
[16:05:20.562] List of future strategies:
[16:05:20.562] 1. sequential:
[16:05:20.562]    - args: function (..., envir = parent.frame())
[16:05:20.562]    - tweaked: FALSE
[16:05:20.562]    - call: NULL
[16:05:20.562] plan(): nbrOfWorkers() = 1
[16:05:20.563] plan(): Setting new future strategy stack:
[16:05:20.563] List of future strategies:
[16:05:20.563] 1. sequential:
[16:05:20.563]    - args: function (..., envir = parent.frame())
[16:05:20.563]    - tweaked: FALSE
[16:05:20.563]    - call: future::plan("sequential")
[16:05:20.563] plan(): nbrOfWorkers() = 1
[16:05:20.563] SequentialFuture started (and completed)
*** multisession() - workers inherit .libPaths()
[16:05:20.564] getGlobalsAndPackages() ...
[16:05:20.564] Searching for globals...
[16:05:20.564] - globals found: [1] ‘.libPaths’
[16:05:20.564] Searching for globals ... DONE
[16:05:20.564] Resolving globals: FALSE
[16:05:20.565] 
[16:05:20.565] 
[16:05:20.565] getGlobalsAndPackages() ... DONE
[16:05:20.565] run() for ‘Future’ ...
[16:05:20.565] - state: ‘created’
[16:05:20.565] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[16:05:20.566] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[16:05:20.566] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[16:05:20.566]   - Field: ‘label’
[16:05:20.567]   - Field: ‘local’
[16:05:20.567]   - Field: ‘owner’
[16:05:20.568]   - Field: ‘envir’
[16:05:20.568]   - Field: ‘packages’
[16:05:20.568]   - Field: ‘gc’
[16:05:20.568]   - Field: ‘conditions’
[16:05:20.568]   - Field: ‘expr’
[16:05:20.568]   - Field: ‘uuid’
[16:05:20.568]   - Field: ‘seed’
[16:05:20.568]   - Field: ‘version’
[16:05:20.568]   - Field: ‘result’
[16:05:20.568]   - Field: ‘asynchronous’
[16:05:20.568]   - Field: ‘calls’
[16:05:20.569]   - Field: ‘globals’
[16:05:20.569]   - Field: ‘stdout’
[16:05:20.569]   - Field: ‘earlySignal’
[16:05:20.569]   - Field: ‘lazy’
[16:05:20.569]   - Field: ‘state’
[16:05:20.569] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[16:05:20.569] - Launch lazy future ...
[16:05:20.569] Packages needed by the future expression (n = 0): <none>
[16:05:20.569] Packages needed by future strategies (n = 0): <none>
[16:05:20.570] {
[16:05:20.570]     {
[16:05:20.570]         {
[16:05:20.570]             ...future.startTime <- base::Sys.time()
[16:05:20.570]             {
[16:05:20.570]                 {
[16:05:20.570]                   {
[16:05:20.570]                     base::local({
[16:05:20.570]                       has_future <- base::requireNamespace("future", 
[16:05:20.570]                         quietly = TRUE)
[16:05:20.570]                       if (has_future) {
[16:05:20.570]                         ns <- base::getNamespace("future")
[16:05:20.570]                         version <- ns[[".package"]][["version"]]
[16:05:20.570]                         if (is.null(version)) 
[16:05:20.570]                           version <- utils::packageVersion("future")
[16:05:20.570]                       }
[16:05:20.570]                       else {
[16:05:20.570]                         version <- NULL
[16:05:20.570]                       }
[16:05:20.570]                       if (!has_future || version < "1.8.0") {
[16:05:20.570]                         info <- base::c(r_version = base::gsub("R version ", 
[16:05:20.570]                           "", base::R.version$version.string), 
[16:05:20.570]                           platform = base::sprintf("%s (%s-bit)", 
[16:05:20.570]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:05:20.570]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[16:05:20.570]                             "release", "version")], collapse = " "), 
[16:05:20.570]                           hostname = base::Sys.info()[["nodename"]])
[16:05:20.570]                         info <- base::sprintf("%s: %s", base::names(info), 
[16:05:20.570]                           info)
[16:05:20.570]                         info <- base::paste(info, collapse = "; ")
[16:05:20.570]                         if (!has_future) {
[16:05:20.570]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:05:20.570]                             info)
[16:05:20.570]                         }
[16:05:20.570]                         else {
[16:05:20.570]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:05:20.570]                             info, version)
[16:05:20.570]                         }
[16:05:20.570]                         base::stop(msg)
[16:05:20.570]                       }
[16:05:20.570]                     })
[16:05:20.570]                   }
[16:05:20.570]                   options(future.plan = NULL)
[16:05:20.570]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:05:20.570]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:05:20.570]                 }
[16:05:20.570]                 ...future.workdir <- getwd()
[16:05:20.570]             }
[16:05:20.570]             ...future.oldOptions <- base::as.list(base::.Options)
[16:05:20.570]             ...future.oldEnvVars <- base::Sys.getenv()
[16:05:20.570]         }
[16:05:20.570]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:05:20.570]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:05:20.570]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:05:20.570]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:05:20.570]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:05:20.570]             future.stdout.windows.reencode = NULL, width = 80L)
[16:05:20.570]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:05:20.570]             base::names(...future.oldOptions))
[16:05:20.570]     }
[16:05:20.570]     if (FALSE) {
[16:05:20.570]     }
[16:05:20.570]     else {
[16:05:20.570]         if (TRUE) {
[16:05:20.570]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:05:20.570]                 open = "w")
[16:05:20.570]         }
[16:05:20.570]         else {
[16:05:20.570]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:05:20.570]                 windows = "NUL", "/dev/null"), open = "w")
[16:05:20.570]         }
[16:05:20.570]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:05:20.570]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:05:20.570]             base::sink(type = "output", split = FALSE)
[16:05:20.570]             base::close(...future.stdout)
[16:05:20.570]         }, add = TRUE)
[16:05:20.570]     }
[16:05:20.570]     ...future.frame <- base::sys.nframe()
[16:05:20.570]     ...future.conditions <- base::list()
[16:05:20.570]     ...future.rng <- base::globalenv()$.Random.seed
[16:05:20.570]     if (FALSE) {
[16:05:20.570]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:05:20.570]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:05:20.570]     }
[16:05:20.570]     ...future.result <- base::tryCatch({
[16:05:20.570]         base::withCallingHandlers({
[16:05:20.570]             ...future.value <- base::withVisible(base::local(.libPaths()))
[16:05:20.570]             future::FutureResult(value = ...future.value$value, 
[16:05:20.570]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:05:20.570]                   ...future.rng), globalenv = if (FALSE) 
[16:05:20.570]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:05:20.570]                     ...future.globalenv.names))
[16:05:20.570]                 else NULL, started = ...future.startTime, version = "1.8")
[16:05:20.570]         }, condition = base::local({
[16:05:20.570]             c <- base::c
[16:05:20.570]             inherits <- base::inherits
[16:05:20.570]             invokeRestart <- base::invokeRestart
[16:05:20.570]             length <- base::length
[16:05:20.570]             list <- base::list
[16:05:20.570]             seq.int <- base::seq.int
[16:05:20.570]             signalCondition <- base::signalCondition
[16:05:20.570]             sys.calls <- base::sys.calls
[16:05:20.570]             `[[` <- base::`[[`
[16:05:20.570]             `+` <- base::`+`
[16:05:20.570]             `<<-` <- base::`<<-`
[16:05:20.570]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:05:20.570]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:05:20.570]                   3L)]
[16:05:20.570]             }
[16:05:20.570]             function(cond) {
[16:05:20.570]                 is_error <- inherits(cond, "error")
[16:05:20.570]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:05:20.570]                   NULL)
[16:05:20.570]                 if (is_error) {
[16:05:20.570]                   sessionInformation <- function() {
[16:05:20.570]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:05:20.570]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:05:20.570]                       search = base::search(), system = base::Sys.info())
[16:05:20.570]                   }
[16:05:20.570]                   ...future.conditions[[length(...future.conditions) + 
[16:05:20.570]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:05:20.570]                     cond$call), session = sessionInformation(), 
[16:05:20.570]                     timestamp = base::Sys.time(), signaled = 0L)
[16:05:20.570]                   signalCondition(cond)
[16:05:20.570]                 }
[16:05:20.570]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:05:20.570]                 "immediateCondition"))) {
[16:05:20.570]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:05:20.570]                   ...future.conditions[[length(...future.conditions) + 
[16:05:20.570]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:05:20.570]                   if (TRUE && !signal) {
[16:05:20.570]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:05:20.570]                     {
[16:05:20.570]                       inherits <- base::inherits
[16:05:20.570]                       invokeRestart <- base::invokeRestart
[16:05:20.570]                       is.null <- base::is.null
[16:05:20.570]                       muffled <- FALSE
[16:05:20.570]                       if (inherits(cond, "message")) {
[16:05:20.570]                         muffled <- grepl(pattern, "muffleMessage")
[16:05:20.570]                         if (muffled) 
[16:05:20.570]                           invokeRestart("muffleMessage")
[16:05:20.570]                       }
[16:05:20.570]                       else if (inherits(cond, "warning")) {
[16:05:20.570]                         muffled <- grepl(pattern, "muffleWarning")
[16:05:20.570]                         if (muffled) 
[16:05:20.570]                           invokeRestart("muffleWarning")
[16:05:20.570]                       }
[16:05:20.570]                       else if (inherits(cond, "condition")) {
[16:05:20.570]                         if (!is.null(pattern)) {
[16:05:20.570]                           computeRestarts <- base::computeRestarts
[16:05:20.570]                           grepl <- base::grepl
[16:05:20.570]                           restarts <- computeRestarts(cond)
[16:05:20.570]                           for (restart in restarts) {
[16:05:20.570]                             name <- restart$name
[16:05:20.570]                             if (is.null(name)) 
[16:05:20.570]                               next
[16:05:20.570]                             if (!grepl(pattern, name)) 
[16:05:20.570]                               next
[16:05:20.570]                             invokeRestart(restart)
[16:05:20.570]                             muffled <- TRUE
[16:05:20.570]                             break
[16:05:20.570]                           }
[16:05:20.570]                         }
[16:05:20.570]                       }
[16:05:20.570]                       invisible(muffled)
[16:05:20.570]                     }
[16:05:20.570]                     muffleCondition(cond, pattern = "^muffle")
[16:05:20.570]                   }
[16:05:20.570]                 }
[16:05:20.570]                 else {
[16:05:20.570]                   if (TRUE) {
[16:05:20.570]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:05:20.570]                     {
[16:05:20.570]                       inherits <- base::inherits
[16:05:20.570]                       invokeRestart <- base::invokeRestart
[16:05:20.570]                       is.null <- base::is.null
[16:05:20.570]                       muffled <- FALSE
[16:05:20.570]                       if (inherits(cond, "message")) {
[16:05:20.570]                         muffled <- grepl(pattern, "muffleMessage")
[16:05:20.570]                         if (muffled) 
[16:05:20.570]                           invokeRestart("muffleMessage")
[16:05:20.570]                       }
[16:05:20.570]                       else if (inherits(cond, "warning")) {
[16:05:20.570]                         muffled <- grepl(pattern, "muffleWarning")
[16:05:20.570]                         if (muffled) 
[16:05:20.570]                           invokeRestart("muffleWarning")
[16:05:20.570]                       }
[16:05:20.570]                       else if (inherits(cond, "condition")) {
[16:05:20.570]                         if (!is.null(pattern)) {
[16:05:20.570]                           computeRestarts <- base::computeRestarts
[16:05:20.570]                           grepl <- base::grepl
[16:05:20.570]                           restarts <- computeRestarts(cond)
[16:05:20.570]                           for (restart in restarts) {
[16:05:20.570]                             name <- restart$name
[16:05:20.570]                             if (is.null(name)) 
[16:05:20.570]                               next
[16:05:20.570]                             if (!grepl(pattern, name)) 
[16:05:20.570]                               next
[16:05:20.570]                             invokeRestart(restart)
[16:05:20.570]                             muffled <- TRUE
[16:05:20.570]                             break
[16:05:20.570]                           }
[16:05:20.570]                         }
[16:05:20.570]                       }
[16:05:20.570]                       invisible(muffled)
[16:05:20.570]                     }
[16:05:20.570]                     muffleCondition(cond, pattern = "^muffle")
[16:05:20.570]                   }
[16:05:20.570]                 }
[16:05:20.570]             }
[16:05:20.570]         }))
[16:05:20.570]     }, error = function(ex) {
[16:05:20.570]         base::structure(base::list(value = NULL, visible = NULL, 
[16:05:20.570]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:05:20.570]                 ...future.rng), started = ...future.startTime, 
[16:05:20.570]             finished = Sys.time(), session_uuid = NA_character_, 
[16:05:20.570]             version = "1.8"), class = "FutureResult")
[16:05:20.570]     }, finally = {
[16:05:20.570]         if (!identical(...future.workdir, getwd())) 
[16:05:20.570]             setwd(...future.workdir)
[16:05:20.570]         {
[16:05:20.570]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:05:20.570]                 ...future.oldOptions$nwarnings <- NULL
[16:05:20.570]             }
[16:05:20.570]             base::options(...future.oldOptions)
[16:05:20.570]             if (.Platform$OS.type == "windows") {
[16:05:20.570]                 old_names <- names(...future.oldEnvVars)
[16:05:20.570]                 envs <- base::Sys.getenv()
[16:05:20.570]                 names <- names(envs)
[16:05:20.570]                 common <- intersect(names, old_names)
[16:05:20.570]                 added <- setdiff(names, old_names)
[16:05:20.570]                 removed <- setdiff(old_names, names)
[16:05:20.570]                 changed <- common[...future.oldEnvVars[common] != 
[16:05:20.570]                   envs[common]]
[16:05:20.570]                 NAMES <- toupper(changed)
[16:05:20.570]                 args <- list()
[16:05:20.570]                 for (kk in seq_along(NAMES)) {
[16:05:20.570]                   name <- changed[[kk]]
[16:05:20.570]                   NAME <- NAMES[[kk]]
[16:05:20.570]                   if (name != NAME && is.element(NAME, old_names)) 
[16:05:20.570]                     next
[16:05:20.570]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:05:20.570]                 }
[16:05:20.570]                 NAMES <- toupper(added)
[16:05:20.570]                 for (kk in seq_along(NAMES)) {
[16:05:20.570]                   name <- added[[kk]]
[16:05:20.570]                   NAME <- NAMES[[kk]]
[16:05:20.570]                   if (name != NAME && is.element(NAME, old_names)) 
[16:05:20.570]                     next
[16:05:20.570]                   args[[name]] <- ""
[16:05:20.570]                 }
[16:05:20.570]                 NAMES <- toupper(removed)
[16:05:20.570]                 for (kk in seq_along(NAMES)) {
[16:05:20.570]                   name <- removed[[kk]]
[16:05:20.570]                   NAME <- NAMES[[kk]]
[16:05:20.570]                   if (name != NAME && is.element(NAME, old_names)) 
[16:05:20.570]                     next
[16:05:20.570]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:05:20.570]                 }
[16:05:20.570]                 if (length(args) > 0) 
[16:05:20.570]                   base::do.call(base::Sys.setenv, args = args)
[16:05:20.570]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:05:20.570]             }
[16:05:20.570]             else {
[16:05:20.570]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:05:20.570]             }
[16:05:20.570]             {
[16:05:20.570]                 if (base::length(...future.futureOptionsAdded) > 
[16:05:20.570]                   0L) {
[16:05:20.570]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:05:20.570]                   base::names(opts) <- ...future.futureOptionsAdded
[16:05:20.570]                   base::options(opts)
[16:05:20.570]                 }
[16:05:20.570]                 {
[16:05:20.570]                   {
[16:05:20.570]                     NULL
[16:05:20.570]                     RNGkind("Mersenne-Twister")
[16:05:20.570]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[16:05:20.570]                       inherits = FALSE)
[16:05:20.570]                   }
[16:05:20.570]                   options(future.plan = NULL)
[16:05:20.570]                   if (is.na(NA_character_)) 
[16:05:20.570]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:05:20.570]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:05:20.570]                   future::plan(list(function (..., envir = parent.frame()) 
[16:05:20.570]                   {
[16:05:20.570]                     future <- SequentialFuture(..., envir = envir)
[16:05:20.570]                     if (!future$lazy) 
[16:05:20.570]                       future <- run(future)
[16:05:20.570]                     invisible(future)
[16:05:20.570]                   }), .cleanup = FALSE, .init = FALSE)
[16:05:20.570]                 }
[16:05:20.570]             }
[16:05:20.570]         }
[16:05:20.570]     })
[16:05:20.570]     if (TRUE) {
[16:05:20.570]         base::sink(type = "output", split = FALSE)
[16:05:20.570]         if (TRUE) {
[16:05:20.570]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:05:20.570]         }
[16:05:20.570]         else {
[16:05:20.570]             ...future.result["stdout"] <- base::list(NULL)
[16:05:20.570]         }
[16:05:20.570]         base::close(...future.stdout)
[16:05:20.570]         ...future.stdout <- NULL
[16:05:20.570]     }
[16:05:20.570]     ...future.result$conditions <- ...future.conditions
[16:05:20.570]     ...future.result$finished <- base::Sys.time()
[16:05:20.570]     ...future.result
[16:05:20.570] }
[16:05:20.571] plan(): Setting new future strategy stack:
[16:05:20.572] List of future strategies:
[16:05:20.572] 1. sequential:
[16:05:20.572]    - args: function (..., envir = parent.frame())
[16:05:20.572]    - tweaked: FALSE
[16:05:20.572]    - call: NULL
[16:05:20.572] plan(): nbrOfWorkers() = 1
[16:05:20.573] plan(): Setting new future strategy stack:
[16:05:20.573] List of future strategies:
[16:05:20.573] 1. sequential:
[16:05:20.573]    - args: function (..., envir = parent.frame())
[16:05:20.573]    - tweaked: FALSE
[16:05:20.573]    - call: future::plan("sequential")
[16:05:20.573] plan(): nbrOfWorkers() = 1
[16:05:20.573] SequentialFuture started (and completed)
[16:05:20.573] - Launch lazy future ... done
[16:05:20.573] run() for ‘SequentialFuture’ ... done
List of 2
 $ main   : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
 $ workers: chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
*** multisession() and errors
[16:05:20.577] getGlobalsAndPackages() ...
[16:05:20.577] Searching for globals...
[16:05:20.578] - globals found: [2] ‘{’, ‘stop’
[16:05:20.578] Searching for globals ... DONE
[16:05:20.579] Resolving globals: FALSE
[16:05:20.579] 
[16:05:20.579] 
[16:05:20.579] getGlobalsAndPackages() ... DONE
SequentialFuture:
Label: ‘<none>’
Expression:
{
    stop("Whoops!")
    1
}
Lazy evaluation: TRUE
Asynchronous evaluation: FALSE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: FALSE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: 44f0d080-a0af-4897-da8d-6d247098800b
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[16:05:20.580] Packages needed by the future expression (n = 0): <none>
[16:05:20.580] Packages needed by future strategies (n = 0): <none>
[16:05:20.580] {
[16:05:20.580]     {
[16:05:20.580]         {
[16:05:20.580]             ...future.startTime <- base::Sys.time()
[16:05:20.580]             {
[16:05:20.580]                 {
[16:05:20.580]                   {
[16:05:20.580]                     base::local({
[16:05:20.580]                       has_future <- base::requireNamespace("future", 
[16:05:20.580]                         quietly = TRUE)
[16:05:20.580]                       if (has_future) {
[16:05:20.580]                         ns <- base::getNamespace("future")
[16:05:20.580]                         version <- ns[[".package"]][["version"]]
[16:05:20.580]                         if (is.null(version)) 
[16:05:20.580]                           version <- utils::packageVersion("future")
[16:05:20.580]                       }
[16:05:20.580]                       else {
[16:05:20.580]                         version <- NULL
[16:05:20.580]                       }
[16:05:20.580]                       if (!has_future || version < "1.8.0") {
[16:05:20.580]                         info <- base::c(r_version = base::gsub("R version ", 
[16:05:20.580]                           "", base::R.version$version.string), 
[16:05:20.580]                           platform = base::sprintf("%s (%s-bit)", 
[16:05:20.580]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:05:20.580]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[16:05:20.580]                             "release", "version")], collapse = " "), 
[16:05:20.580]                           hostname = base::Sys.info()[["nodename"]])
[16:05:20.580]                         info <- base::sprintf("%s: %s", base::names(info), 
[16:05:20.580]                           info)
[16:05:20.580]                         info <- base::paste(info, collapse = "; ")
[16:05:20.580]                         if (!has_future) {
[16:05:20.580]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:05:20.580]                             info)
[16:05:20.580]                         }
[16:05:20.580]                         else {
[16:05:20.580]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:05:20.580]                             info, version)
[16:05:20.580]                         }
[16:05:20.580]                         base::stop(msg)
[16:05:20.580]                       }
[16:05:20.580]                     })
[16:05:20.580]                   }
[16:05:20.580]                   options(future.plan = NULL)
[16:05:20.580]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:05:20.580]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:05:20.580]                 }
[16:05:20.580]                 ...future.workdir <- getwd()
[16:05:20.580]             }
[16:05:20.580]             ...future.oldOptions <- base::as.list(base::.Options)
[16:05:20.580]             ...future.oldEnvVars <- base::Sys.getenv()
[16:05:20.580]         }
[16:05:20.580]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:05:20.580]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:05:20.580]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:05:20.580]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:05:20.580]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:05:20.580]             future.stdout.windows.reencode = NULL, width = 80L)
[16:05:20.580]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:05:20.580]             base::names(...future.oldOptions))
[16:05:20.580]     }
[16:05:20.580]     if (FALSE) {
[16:05:20.580]     }
[16:05:20.580]     else {
[16:05:20.580]         if (TRUE) {
[16:05:20.580]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:05:20.580]                 open = "w")
[16:05:20.580]         }
[16:05:20.580]         else {
[16:05:20.580]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:05:20.580]                 windows = "NUL", "/dev/null"), open = "w")
[16:05:20.580]         }
[16:05:20.580]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:05:20.580]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:05:20.580]             base::sink(type = "output", split = FALSE)
[16:05:20.580]             base::close(...future.stdout)
[16:05:20.580]         }, add = TRUE)
[16:05:20.580]     }
[16:05:20.580]     ...future.frame <- base::sys.nframe()
[16:05:20.580]     ...future.conditions <- base::list()
[16:05:20.580]     ...future.rng <- base::globalenv()$.Random.seed
[16:05:20.580]     if (FALSE) {
[16:05:20.580]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:05:20.580]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:05:20.580]     }
[16:05:20.580]     ...future.result <- base::tryCatch({
[16:05:20.580]         base::withCallingHandlers({
[16:05:20.580]             ...future.value <- base::withVisible(base::local({
[16:05:20.580]                 stop("Whoops!")
[16:05:20.580]                 1
[16:05:20.580]             }))
[16:05:20.580]             future::FutureResult(value = ...future.value$value, 
[16:05:20.580]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:05:20.580]                   ...future.rng), globalenv = if (FALSE) 
[16:05:20.580]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:05:20.580]                     ...future.globalenv.names))
[16:05:20.580]                 else NULL, started = ...future.startTime, version = "1.8")
[16:05:20.580]         }, condition = base::local({
[16:05:20.580]             c <- base::c
[16:05:20.580]             inherits <- base::inherits
[16:05:20.580]             invokeRestart <- base::invokeRestart
[16:05:20.580]             length <- base::length
[16:05:20.580]             list <- base::list
[16:05:20.580]             seq.int <- base::seq.int
[16:05:20.580]             signalCondition <- base::signalCondition
[16:05:20.580]             sys.calls <- base::sys.calls
[16:05:20.580]             `[[` <- base::`[[`
[16:05:20.580]             `+` <- base::`+`
[16:05:20.580]             `<<-` <- base::`<<-`
[16:05:20.580]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:05:20.580]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:05:20.580]                   3L)]
[16:05:20.580]             }
[16:05:20.580]             function(cond) {
[16:05:20.580]                 is_error <- inherits(cond, "error")
[16:05:20.580]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:05:20.580]                   NULL)
[16:05:20.580]                 if (is_error) {
[16:05:20.580]                   sessionInformation <- function() {
[16:05:20.580]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:05:20.580]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:05:20.580]                       search = base::search(), system = base::Sys.info())
[16:05:20.580]                   }
[16:05:20.580]                   ...future.conditions[[length(...future.conditions) + 
[16:05:20.580]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:05:20.580]                     cond$call), session = sessionInformation(), 
[16:05:20.580]                     timestamp = base::Sys.time(), signaled = 0L)
[16:05:20.580]                   signalCondition(cond)
[16:05:20.580]                 }
[16:05:20.580]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:05:20.580]                 "immediateCondition"))) {
[16:05:20.580]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:05:20.580]                   ...future.conditions[[length(...future.conditions) + 
[16:05:20.580]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:05:20.580]                   if (TRUE && !signal) {
[16:05:20.580]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:05:20.580]                     {
[16:05:20.580]                       inherits <- base::inherits
[16:05:20.580]                       invokeRestart <- base::invokeRestart
[16:05:20.580]                       is.null <- base::is.null
[16:05:20.580]                       muffled <- FALSE
[16:05:20.580]                       if (inherits(cond, "message")) {
[16:05:20.580]                         muffled <- grepl(pattern, "muffleMessage")
[16:05:20.580]                         if (muffled) 
[16:05:20.580]                           invokeRestart("muffleMessage")
[16:05:20.580]                       }
[16:05:20.580]                       else if (inherits(cond, "warning")) {
[16:05:20.580]                         muffled <- grepl(pattern, "muffleWarning")
[16:05:20.580]                         if (muffled) 
[16:05:20.580]                           invokeRestart("muffleWarning")
[16:05:20.580]                       }
[16:05:20.580]                       else if (inherits(cond, "condition")) {
[16:05:20.580]                         if (!is.null(pattern)) {
[16:05:20.580]                           computeRestarts <- base::computeRestarts
[16:05:20.580]                           grepl <- base::grepl
[16:05:20.580]                           restarts <- computeRestarts(cond)
[16:05:20.580]                           for (restart in restarts) {
[16:05:20.580]                             name <- restart$name
[16:05:20.580]                             if (is.null(name)) 
[16:05:20.580]                               next
[16:05:20.580]                             if (!grepl(pattern, name)) 
[16:05:20.580]                               next
[16:05:20.580]                             invokeRestart(restart)
[16:05:20.580]                             muffled <- TRUE
[16:05:20.580]                             break
[16:05:20.580]                           }
[16:05:20.580]                         }
[16:05:20.580]                       }
[16:05:20.580]                       invisible(muffled)
[16:05:20.580]                     }
[16:05:20.580]                     muffleCondition(cond, pattern = "^muffle")
[16:05:20.580]                   }
[16:05:20.580]                 }
[16:05:20.580]                 else {
[16:05:20.580]                   if (TRUE) {
[16:05:20.580]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:05:20.580]                     {
[16:05:20.580]                       inherits <- base::inherits
[16:05:20.580]                       invokeRestart <- base::invokeRestart
[16:05:20.580]                       is.null <- base::is.null
[16:05:20.580]                       muffled <- FALSE
[16:05:20.580]                       if (inherits(cond, "message")) {
[16:05:20.580]                         muffled <- grepl(pattern, "muffleMessage")
[16:05:20.580]                         if (muffled) 
[16:05:20.580]                           invokeRestart("muffleMessage")
[16:05:20.580]                       }
[16:05:20.580]                       else if (inherits(cond, "warning")) {
[16:05:20.580]                         muffled <- grepl(pattern, "muffleWarning")
[16:05:20.580]                         if (muffled) 
[16:05:20.580]                           invokeRestart("muffleWarning")
[16:05:20.580]                       }
[16:05:20.580]                       else if (inherits(cond, "condition")) {
[16:05:20.580]                         if (!is.null(pattern)) {
[16:05:20.580]                           computeRestarts <- base::computeRestarts
[16:05:20.580]                           grepl <- base::grepl
[16:05:20.580]                           restarts <- computeRestarts(cond)
[16:05:20.580]                           for (restart in restarts) {
[16:05:20.580]                             name <- restart$name
[16:05:20.580]                             if (is.null(name)) 
[16:05:20.580]                               next
[16:05:20.580]                             if (!grepl(pattern, name)) 
[16:05:20.580]                               next
[16:05:20.580]                             invokeRestart(restart)
[16:05:20.580]                             muffled <- TRUE
[16:05:20.580]                             break
[16:05:20.580]                           }
[16:05:20.580]                         }
[16:05:20.580]                       }
[16:05:20.580]                       invisible(muffled)
[16:05:20.580]                     }
[16:05:20.580]                     muffleCondition(cond, pattern = "^muffle")
[16:05:20.580]                   }
[16:05:20.580]                 }
[16:05:20.580]             }
[16:05:20.580]         }))
[16:05:20.580]     }, error = function(ex) {
[16:05:20.580]         base::structure(base::list(value = NULL, visible = NULL, 
[16:05:20.580]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:05:20.580]                 ...future.rng), started = ...future.startTime, 
[16:05:20.580]             finished = Sys.time(), session_uuid = NA_character_, 
[16:05:20.580]             version = "1.8"), class = "FutureResult")
[16:05:20.580]     }, finally = {
[16:05:20.580]         if (!identical(...future.workdir, getwd())) 
[16:05:20.580]             setwd(...future.workdir)
[16:05:20.580]         {
[16:05:20.580]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:05:20.580]                 ...future.oldOptions$nwarnings <- NULL
[16:05:20.580]             }
[16:05:20.580]             base::options(...future.oldOptions)
[16:05:20.580]             if (.Platform$OS.type == "windows") {
[16:05:20.580]                 old_names <- names(...future.oldEnvVars)
[16:05:20.580]                 envs <- base::Sys.getenv()
[16:05:20.580]                 names <- names(envs)
[16:05:20.580]                 common <- intersect(names, old_names)
[16:05:20.580]                 added <- setdiff(names, old_names)
[16:05:20.580]                 removed <- setdiff(old_names, names)
[16:05:20.580]                 changed <- common[...future.oldEnvVars[common] != 
[16:05:20.580]                   envs[common]]
[16:05:20.580]                 NAMES <- toupper(changed)
[16:05:20.580]                 args <- list()
[16:05:20.580]                 for (kk in seq_along(NAMES)) {
[16:05:20.580]                   name <- changed[[kk]]
[16:05:20.580]                   NAME <- NAMES[[kk]]
[16:05:20.580]                   if (name != NAME && is.element(NAME, old_names)) 
[16:05:20.580]                     next
[16:05:20.580]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:05:20.580]                 }
[16:05:20.580]                 NAMES <- toupper(added)
[16:05:20.580]                 for (kk in seq_along(NAMES)) {
[16:05:20.580]                   name <- added[[kk]]
[16:05:20.580]                   NAME <- NAMES[[kk]]
[16:05:20.580]                   if (name != NAME && is.element(NAME, old_names)) 
[16:05:20.580]                     next
[16:05:20.580]                   args[[name]] <- ""
[16:05:20.580]                 }
[16:05:20.580]                 NAMES <- toupper(removed)
[16:05:20.580]                 for (kk in seq_along(NAMES)) {
[16:05:20.580]                   name <- removed[[kk]]
[16:05:20.580]                   NAME <- NAMES[[kk]]
[16:05:20.580]                   if (name != NAME && is.element(NAME, old_names)) 
[16:05:20.580]                     next
[16:05:20.580]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:05:20.580]                 }
[16:05:20.580]                 if (length(args) > 0) 
[16:05:20.580]                   base::do.call(base::Sys.setenv, args = args)
[16:05:20.580]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:05:20.580]             }
[16:05:20.580]             else {
[16:05:20.580]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:05:20.580]             }
[16:05:20.580]             {
[16:05:20.580]                 if (base::length(...future.futureOptionsAdded) > 
[16:05:20.580]                   0L) {
[16:05:20.580]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:05:20.580]                   base::names(opts) <- ...future.futureOptionsAdded
[16:05:20.580]                   base::options(opts)
[16:05:20.580]                 }
[16:05:20.580]                 {
[16:05:20.580]                   {
[16:05:20.580]                     NULL
[16:05:20.580]                     RNGkind("Mersenne-Twister")
[16:05:20.580]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[16:05:20.580]                       inherits = FALSE)
[16:05:20.580]                   }
[16:05:20.580]                   options(future.plan = NULL)
[16:05:20.580]                   if (is.na(NA_character_)) 
[16:05:20.580]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:05:20.580]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:05:20.580]                   future::plan(list(function (..., envir = parent.frame()) 
[16:05:20.580]                   {
[16:05:20.580]                     future <- SequentialFuture(..., envir = envir)
[16:05:20.580]                     if (!future$lazy) 
[16:05:20.580]                       future <- run(future)
[16:05:20.580]                     invisible(future)
[16:05:20.580]                   }), .cleanup = FALSE, .init = FALSE)
[16:05:20.580]                 }
[16:05:20.580]             }
[16:05:20.580]         }
[16:05:20.580]     })
[16:05:20.580]     if (TRUE) {
[16:05:20.580]         base::sink(type = "output", split = FALSE)
[16:05:20.580]         if (TRUE) {
[16:05:20.580]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:05:20.580]         }
[16:05:20.580]         else {
[16:05:20.580]             ...future.result["stdout"] <- base::list(NULL)
[16:05:20.580]         }
[16:05:20.580]         base::close(...future.stdout)
[16:05:20.580]         ...future.stdout <- NULL
[16:05:20.580]     }
[16:05:20.580]     ...future.result$conditions <- ...future.conditions
[16:05:20.580]     ...future.result$finished <- base::Sys.time()
[16:05:20.580]     ...future.result
[16:05:20.580] }
[16:05:20.582] plan(): Setting new future strategy stack:
[16:05:20.582] List of future strategies:
[16:05:20.582] 1. sequential:
[16:05:20.582]    - args: function (..., envir = parent.frame())
[16:05:20.582]    - tweaked: FALSE
[16:05:20.582]    - call: NULL
[16:05:20.582] plan(): nbrOfWorkers() = 1
[16:05:20.583] plan(): Setting new future strategy stack:
[16:05:20.583] List of future strategies:
[16:05:20.583] 1. sequential:
[16:05:20.583]    - args: function (..., envir = parent.frame())
[16:05:20.583]    - tweaked: FALSE
[16:05:20.583]    - call: future::plan("sequential")
[16:05:20.583] plan(): nbrOfWorkers() = 1
[16:05:20.584] SequentialFuture started (and completed)
[16:05:20.584] signalConditions() ...
[16:05:20.584]  - include = ‘immediateCondition’
[16:05:20.584]  - exclude = 
[16:05:20.584]  - resignal = FALSE
[16:05:20.584]  - Number of conditions: 1
[16:05:20.584] signalConditions() ... done
[16:05:20.584] signalConditions() ...
[16:05:20.584]  - include = ‘immediateCondition’
[16:05:20.584]  - exclude = 
[16:05:20.585]  - resignal = FALSE
[16:05:20.585]  - Number of conditions: 1
[16:05:20.585] signalConditions() ... done
<simpleError in eval(quote({    stop("Whoops!")    1}), new.env()): Whoops!>
[16:05:20.585] signalConditions() ...
[16:05:20.585]  - include = ‘immediateCondition’
[16:05:20.585]  - exclude = 
[16:05:20.585]  - resignal = FALSE
[16:05:20.585]  - Number of conditions: 1
[16:05:20.585] signalConditions() ... done
[16:05:20.586] Future state: ‘finished’
[16:05:20.586] signalConditions() ...
[16:05:20.586]  - include = ‘condition’
[16:05:20.586]  - exclude = ‘immediateCondition’
[16:05:20.586]  - resignal = TRUE
[16:05:20.586]  - Number of conditions: 1
[16:05:20.586]  - Condition #1: ‘simpleError’, ‘error’, ‘condition’
[16:05:20.586] signalConditions() ... done
[1] "Error in eval(quote({ : Whoops!\n"
attr(,"class")
[1] "try-error"
attr(,"condition")
<simpleError in eval(quote({    stop("Whoops!")    1}), new.env()): Whoops!>
[16:05:20.587] signalConditions() ...
[16:05:20.587]  - include = ‘immediateCondition’
[16:05:20.587]  - exclude = 
[16:05:20.587]  - resignal = FALSE
[16:05:20.587]  - Number of conditions: 1
[16:05:20.587] signalConditions() ... done
[16:05:20.587] Future state: ‘finished’
[16:05:20.587] signalConditions() ...
[16:05:20.587]  - include = ‘condition’
[16:05:20.587]  - exclude = ‘immediateCondition’
[16:05:20.587]  - resignal = TRUE
[16:05:20.588]  - Number of conditions: 1
[16:05:20.588]  - Condition #1: ‘simpleError’, ‘error’, ‘condition’
[16:05:20.588] signalConditions() ... done
[1] "Error in eval(quote({ : Whoops!\n"
attr(,"class")
[1] "try-error"
attr(,"condition")
<simpleError in eval(quote({    stop("Whoops!")    1}), new.env()): Whoops!>
[16:05:20.591] getGlobalsAndPackages() ...
[16:05:20.591] Searching for globals...
[16:05:20.592] - globals found: [5] ‘{’, ‘stop’, ‘structure’, ‘list’, ‘c’
[16:05:20.592] Searching for globals ... DONE
[16:05:20.592] Resolving globals: FALSE
[16:05:20.593] 
[16:05:20.593] 
[16:05:20.593] getGlobalsAndPackages() ... DONE
SequentialFuture:
Label: ‘<none>’
Expression:
{
    stop(structure(list(message = "boom"), class = c("MyError", 
        "error", "condition")))
}
Lazy evaluation: TRUE
Asynchronous evaluation: FALSE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: FALSE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: 44f0d080-a0af-4897-da8d-6d247098800b
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[16:05:20.593] Packages needed by the future expression (n = 0): <none>
[16:05:20.594] Packages needed by future strategies (n = 0): <none>
[16:05:20.594] {
[16:05:20.594]     {
[16:05:20.594]         {
[16:05:20.594]             ...future.startTime <- base::Sys.time()
[16:05:20.594]             {
[16:05:20.594]                 {
[16:05:20.594]                   {
[16:05:20.594]                     base::local({
[16:05:20.594]                       has_future <- base::requireNamespace("future", 
[16:05:20.594]                         quietly = TRUE)
[16:05:20.594]                       if (has_future) {
[16:05:20.594]                         ns <- base::getNamespace("future")
[16:05:20.594]                         version <- ns[[".package"]][["version"]]
[16:05:20.594]                         if (is.null(version)) 
[16:05:20.594]                           version <- utils::packageVersion("future")
[16:05:20.594]                       }
[16:05:20.594]                       else {
[16:05:20.594]                         version <- NULL
[16:05:20.594]                       }
[16:05:20.594]                       if (!has_future || version < "1.8.0") {
[16:05:20.594]                         info <- base::c(r_version = base::gsub("R version ", 
[16:05:20.594]                           "", base::R.version$version.string), 
[16:05:20.594]                           platform = base::sprintf("%s (%s-bit)", 
[16:05:20.594]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:05:20.594]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[16:05:20.594]                             "release", "version")], collapse = " "), 
[16:05:20.594]                           hostname = base::Sys.info()[["nodename"]])
[16:05:20.594]                         info <- base::sprintf("%s: %s", base::names(info), 
[16:05:20.594]                           info)
[16:05:20.594]                         info <- base::paste(info, collapse = "; ")
[16:05:20.594]                         if (!has_future) {
[16:05:20.594]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:05:20.594]                             info)
[16:05:20.594]                         }
[16:05:20.594]                         else {
[16:05:20.594]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:05:20.594]                             info, version)
[16:05:20.594]                         }
[16:05:20.594]                         base::stop(msg)
[16:05:20.594]                       }
[16:05:20.594]                     })
[16:05:20.594]                   }
[16:05:20.594]                   options(future.plan = NULL)
[16:05:20.594]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:05:20.594]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:05:20.594]                 }
[16:05:20.594]                 ...future.workdir <- getwd()
[16:05:20.594]             }
[16:05:20.594]             ...future.oldOptions <- base::as.list(base::.Options)
[16:05:20.594]             ...future.oldEnvVars <- base::Sys.getenv()
[16:05:20.594]         }
[16:05:20.594]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:05:20.594]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:05:20.594]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:05:20.594]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:05:20.594]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:05:20.594]             future.stdout.windows.reencode = NULL, width = 80L)
[16:05:20.594]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:05:20.594]             base::names(...future.oldOptions))
[16:05:20.594]     }
[16:05:20.594]     if (FALSE) {
[16:05:20.594]     }
[16:05:20.594]     else {
[16:05:20.594]         if (TRUE) {
[16:05:20.594]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:05:20.594]                 open = "w")
[16:05:20.594]         }
[16:05:20.594]         else {
[16:05:20.594]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:05:20.594]                 windows = "NUL", "/dev/null"), open = "w")
[16:05:20.594]         }
[16:05:20.594]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:05:20.594]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:05:20.594]             base::sink(type = "output", split = FALSE)
[16:05:20.594]             base::close(...future.stdout)
[16:05:20.594]         }, add = TRUE)
[16:05:20.594]     }
[16:05:20.594]     ...future.frame <- base::sys.nframe()
[16:05:20.594]     ...future.conditions <- base::list()
[16:05:20.594]     ...future.rng <- base::globalenv()$.Random.seed
[16:05:20.594]     if (FALSE) {
[16:05:20.594]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:05:20.594]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:05:20.594]     }
[16:05:20.594]     ...future.result <- base::tryCatch({
[16:05:20.594]         base::withCallingHandlers({
[16:05:20.594]             ...future.value <- base::withVisible(base::local({
[16:05:20.594]                 stop(structure(list(message = "boom"), class = c("MyError", 
[16:05:20.594]                   "error", "condition")))
[16:05:20.594]             }))
[16:05:20.594]             future::FutureResult(value = ...future.value$value, 
[16:05:20.594]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:05:20.594]                   ...future.rng), globalenv = if (FALSE) 
[16:05:20.594]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:05:20.594]                     ...future.globalenv.names))
[16:05:20.594]                 else NULL, started = ...future.startTime, version = "1.8")
[16:05:20.594]         }, condition = base::local({
[16:05:20.594]             c <- base::c
[16:05:20.594]             inherits <- base::inherits
[16:05:20.594]             invokeRestart <- base::invokeRestart
[16:05:20.594]             length <- base::length
[16:05:20.594]             list <- base::list
[16:05:20.594]             seq.int <- base::seq.int
[16:05:20.594]             signalCondition <- base::signalCondition
[16:05:20.594]             sys.calls <- base::sys.calls
[16:05:20.594]             `[[` <- base::`[[`
[16:05:20.594]             `+` <- base::`+`
[16:05:20.594]             `<<-` <- base::`<<-`
[16:05:20.594]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:05:20.594]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:05:20.594]                   3L)]
[16:05:20.594]             }
[16:05:20.594]             function(cond) {
[16:05:20.594]                 is_error <- inherits(cond, "error")
[16:05:20.594]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:05:20.594]                   NULL)
[16:05:20.594]                 if (is_error) {
[16:05:20.594]                   sessionInformation <- function() {
[16:05:20.594]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:05:20.594]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:05:20.594]                       search = base::search(), system = base::Sys.info())
[16:05:20.594]                   }
[16:05:20.594]                   ...future.conditions[[length(...future.conditions) + 
[16:05:20.594]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:05:20.594]                     cond$call), session = sessionInformation(), 
[16:05:20.594]                     timestamp = base::Sys.time(), signaled = 0L)
[16:05:20.594]                   signalCondition(cond)
[16:05:20.594]                 }
[16:05:20.594]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:05:20.594]                 "immediateCondition"))) {
[16:05:20.594]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:05:20.594]                   ...future.conditions[[length(...future.conditions) + 
[16:05:20.594]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:05:20.594]                   if (TRUE && !signal) {
[16:05:20.594]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:05:20.594]                     {
[16:05:20.594]                       inherits <- base::inherits
[16:05:20.594]                       invokeRestart <- base::invokeRestart
[16:05:20.594]                       is.null <- base::is.null
[16:05:20.594]                       muffled <- FALSE
[16:05:20.594]                       if (inherits(cond, "message")) {
[16:05:20.594]                         muffled <- grepl(pattern, "muffleMessage")
[16:05:20.594]                         if (muffled) 
[16:05:20.594]                           invokeRestart("muffleMessage")
[16:05:20.594]                       }
[16:05:20.594]                       else if (inherits(cond, "warning")) {
[16:05:20.594]                         muffled <- grepl(pattern, "muffleWarning")
[16:05:20.594]                         if (muffled) 
[16:05:20.594]                           invokeRestart("muffleWarning")
[16:05:20.594]                       }
[16:05:20.594]                       else if (inherits(cond, "condition")) {
[16:05:20.594]                         if (!is.null(pattern)) {
[16:05:20.594]                           computeRestarts <- base::computeRestarts
[16:05:20.594]                           grepl <- base::grepl
[16:05:20.594]                           restarts <- computeRestarts(cond)
[16:05:20.594]                           for (restart in restarts) {
[16:05:20.594]                             name <- restart$name
[16:05:20.594]                             if (is.null(name)) 
[16:05:20.594]                               next
[16:05:20.594]                             if (!grepl(pattern, name)) 
[16:05:20.594]                               next
[16:05:20.594]                             invokeRestart(restart)
[16:05:20.594]                             muffled <- TRUE
[16:05:20.594]                             break
[16:05:20.594]                           }
[16:05:20.594]                         }
[16:05:20.594]                       }
[16:05:20.594]                       invisible(muffled)
[16:05:20.594]                     }
[16:05:20.594]                     muffleCondition(cond, pattern = "^muffle")
[16:05:20.594]                   }
[16:05:20.594]                 }
[16:05:20.594]                 else {
[16:05:20.594]                   if (TRUE) {
[16:05:20.594]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:05:20.594]                     {
[16:05:20.594]                       inherits <- base::inherits
[16:05:20.594]                       invokeRestart <- base::invokeRestart
[16:05:20.594]                       is.null <- base::is.null
[16:05:20.594]                       muffled <- FALSE
[16:05:20.594]                       if (inherits(cond, "message")) {
[16:05:20.594]                         muffled <- grepl(pattern, "muffleMessage")
[16:05:20.594]                         if (muffled) 
[16:05:20.594]                           invokeRestart("muffleMessage")
[16:05:20.594]                       }
[16:05:20.594]                       else if (inherits(cond, "warning")) {
[16:05:20.594]                         muffled <- grepl(pattern, "muffleWarning")
[16:05:20.594]                         if (muffled) 
[16:05:20.594]                           invokeRestart("muffleWarning")
[16:05:20.594]                       }
[16:05:20.594]                       else if (inherits(cond, "condition")) {
[16:05:20.594]                         if (!is.null(pattern)) {
[16:05:20.594]                           computeRestarts <- base::computeRestarts
[16:05:20.594]                           grepl <- base::grepl
[16:05:20.594]                           restarts <- computeRestarts(cond)
[16:05:20.594]                           for (restart in restarts) {
[16:05:20.594]                             name <- restart$name
[16:05:20.594]                             if (is.null(name)) 
[16:05:20.594]                               next
[16:05:20.594]                             if (!grepl(pattern, name)) 
[16:05:20.594]                               next
[16:05:20.594]                             invokeRestart(restart)
[16:05:20.594]                             muffled <- TRUE
[16:05:20.594]                             break
[16:05:20.594]                           }
[16:05:20.594]                         }
[16:05:20.594]                       }
[16:05:20.594]                       invisible(muffled)
[16:05:20.594]                     }
[16:05:20.594]                     muffleCondition(cond, pattern = "^muffle")
[16:05:20.594]                   }
[16:05:20.594]                 }
[16:05:20.594]             }
[16:05:20.594]         }))
[16:05:20.594]     }, error = function(ex) {
[16:05:20.594]         base::structure(base::list(value = NULL, visible = NULL, 
[16:05:20.594]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:05:20.594]                 ...future.rng), started = ...future.startTime, 
[16:05:20.594]             finished = Sys.time(), session_uuid = NA_character_, 
[16:05:20.594]             version = "1.8"), class = "FutureResult")
[16:05:20.594]     }, finally = {
[16:05:20.594]         if (!identical(...future.workdir, getwd())) 
[16:05:20.594]             setwd(...future.workdir)
[16:05:20.594]         {
[16:05:20.594]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:05:20.594]                 ...future.oldOptions$nwarnings <- NULL
[16:05:20.594]             }
[16:05:20.594]             base::options(...future.oldOptions)
[16:05:20.594]             if (.Platform$OS.type == "windows") {
[16:05:20.594]                 old_names <- names(...future.oldEnvVars)
[16:05:20.594]                 envs <- base::Sys.getenv()
[16:05:20.594]                 names <- names(envs)
[16:05:20.594]                 common <- intersect(names, old_names)
[16:05:20.594]                 added <- setdiff(names, old_names)
[16:05:20.594]                 removed <- setdiff(old_names, names)
[16:05:20.594]                 changed <- common[...future.oldEnvVars[common] != 
[16:05:20.594]                   envs[common]]
[16:05:20.594]                 NAMES <- toupper(changed)
[16:05:20.594]                 args <- list()
[16:05:20.594]                 for (kk in seq_along(NAMES)) {
[16:05:20.594]                   name <- changed[[kk]]
[16:05:20.594]                   NAME <- NAMES[[kk]]
[16:05:20.594]                   if (name != NAME && is.element(NAME, old_names)) 
[16:05:20.594]                     next
[16:05:20.594]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:05:20.594]                 }
[16:05:20.594]                 NAMES <- toupper(added)
[16:05:20.594]                 for (kk in seq_along(NAMES)) {
[16:05:20.594]                   name <- added[[kk]]
[16:05:20.594]                   NAME <- NAMES[[kk]]
[16:05:20.594]                   if (name != NAME && is.element(NAME, old_names)) 
[16:05:20.594]                     next
[16:05:20.594]                   args[[name]] <- ""
[16:05:20.594]                 }
[16:05:20.594]                 NAMES <- toupper(removed)
[16:05:20.594]                 for (kk in seq_along(NAMES)) {
[16:05:20.594]                   name <- removed[[kk]]
[16:05:20.594]                   NAME <- NAMES[[kk]]
[16:05:20.594]                   if (name != NAME && is.element(NAME, old_names)) 
[16:05:20.594]                     next
[16:05:20.594]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:05:20.594]                 }
[16:05:20.594]                 if (length(args) > 0) 
[16:05:20.594]                   base::do.call(base::Sys.setenv, args = args)
[16:05:20.594]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:05:20.594]             }
[16:05:20.594]             else {
[16:05:20.594]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:05:20.594]             }
[16:05:20.594]             {
[16:05:20.594]                 if (base::length(...future.futureOptionsAdded) > 
[16:05:20.594]                   0L) {
[16:05:20.594]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:05:20.594]                   base::names(opts) <- ...future.futureOptionsAdded
[16:05:20.594]                   base::options(opts)
[16:05:20.594]                 }
[16:05:20.594]                 {
[16:05:20.594]                   {
[16:05:20.594]                     NULL
[16:05:20.594]                     RNGkind("Mersenne-Twister")
[16:05:20.594]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[16:05:20.594]                       inherits = FALSE)
[16:05:20.594]                   }
[16:05:20.594]                   options(future.plan = NULL)
[16:05:20.594]                   if (is.na(NA_character_)) 
[16:05:20.594]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:05:20.594]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:05:20.594]                   future::plan(list(function (..., envir = parent.frame()) 
[16:05:20.594]                   {
[16:05:20.594]                     future <- SequentialFuture(..., envir = envir)
[16:05:20.594]                     if (!future$lazy) 
[16:05:20.594]                       future <- run(future)
[16:05:20.594]                     invisible(future)
[16:05:20.594]                   }), .cleanup = FALSE, .init = FALSE)
[16:05:20.594]                 }
[16:05:20.594]             }
[16:05:20.594]         }
[16:05:20.594]     })
[16:05:20.594]     if (TRUE) {
[16:05:20.594]         base::sink(type = "output", split = FALSE)
[16:05:20.594]         if (TRUE) {
[16:05:20.594]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:05:20.594]         }
[16:05:20.594]         else {
[16:05:20.594]             ...future.result["stdout"] <- base::list(NULL)
[16:05:20.594]         }
[16:05:20.594]         base::close(...future.stdout)
[16:05:20.594]         ...future.stdout <- NULL
[16:05:20.594]     }
[16:05:20.594]     ...future.result$conditions <- ...future.conditions
[16:05:20.594]     ...future.result$finished <- base::Sys.time()
[16:05:20.594]     ...future.result
[16:05:20.594] }
[16:05:20.596] plan(): Setting new future strategy stack:
[16:05:20.596] List of future strategies:
[16:05:20.596] 1. sequential:
[16:05:20.596]    - args: function (..., envir = parent.frame())
[16:05:20.596]    - tweaked: FALSE
[16:05:20.596]    - call: NULL
[16:05:20.596] plan(): nbrOfWorkers() = 1
[16:05:20.597] plan(): Setting new future strategy stack:
[16:05:20.597] List of future strategies:
[16:05:20.597] 1. sequential:
[16:05:20.597]    - args: function (..., envir = parent.frame())
[16:05:20.597]    - tweaked: FALSE
[16:05:20.597]    - call: future::plan("sequential")
[16:05:20.597] plan(): nbrOfWorkers() = 1
[16:05:20.598] SequentialFuture started (and completed)
[16:05:20.598] signalConditions() ...
[16:05:20.598]  - include = ‘immediateCondition’
[16:05:20.598]  - exclude = 
[16:05:20.598]  - resignal = FALSE
[16:05:20.598]  - Number of conditions: 1
[16:05:20.598] signalConditions() ... done
[16:05:20.598] signalConditions() ...
[16:05:20.598]  - include = ‘immediateCondition’
[16:05:20.598]  - exclude = 
[16:05:20.598]  - resignal = FALSE
[16:05:20.598]  - Number of conditions: 1
[16:05:20.599] signalConditions() ... done
<MyError: boom>
[16:05:20.599] signalConditions() ...
[16:05:20.599]  - include = ‘immediateCondition’
[16:05:20.599]  - exclude = 
[16:05:20.599]  - resignal = FALSE
[16:05:20.599]  - Number of conditions: 1
[16:05:20.599] signalConditions() ... done
[16:05:20.599] Future state: ‘finished’
[16:05:20.599] signalConditions() ...
[16:05:20.600]  - include = ‘condition’
[16:05:20.600]  - exclude = ‘immediateCondition’
[16:05:20.600]  - resignal = TRUE
[16:05:20.600]  - Number of conditions: 1
[16:05:20.600]  - Condition #1: ‘MyError’, ‘error’, ‘condition’
[16:05:20.600] signalConditions() ... done
Testing with 1 cores ... DONE
Testing with 2 cores ...
[16:05:20.606] getGlobalsAndPackages() ...
[16:05:20.607] 
[16:05:20.607] - globals: [0] <none>
[16:05:20.607] getGlobalsAndPackages() ... DONE
[16:05:20.607] [local output] makeClusterPSOCK() ...
[16:05:20.639] [local output] Workers: [n = 2] ‘localhost’, ‘localhost’
[16:05:20.640] [local output] Base port: 11239
[16:05:20.640] [local output] Getting setup options for 2 cluster nodes ...
[16:05:20.640] [local output]  - Node 1 of 2 ...
[16:05:20.640] [local output] localMachine=TRUE => revtunnel=FALSE

[16:05:20.641] Testing if worker's PID can be inferred: ‘'/usr/local/lib/R/bin/Rscript' -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/RtmpVtakKw/worker.rank=1.parallelly.parent=87188.154941995939c.pid")), silent = TRUE)' -e 'file.exists("/tmp/RtmpVtakKw/worker.rank=1.parallelly.parent=87188.154941995939c.pid")'’
[16:05:20.828] - Possible to infer worker's PID: TRUE
[16:05:20.828] [local output] Rscript port: 11239

[16:05:20.828] [local output]  - Node 2 of 2 ...
[16:05:20.829] [local output] localMachine=TRUE => revtunnel=FALSE

[16:05:20.829] [local output] Rscript port: 11239

[16:05:20.830] [local output] Getting setup options for 2 cluster nodes ... done
[16:05:20.830] [local output]  - Parallel setup requested for some PSOCK nodes
[16:05:20.830] [local output] Setting up PSOCK nodes in parallel
[16:05:20.830] List of 36
[16:05:20.830]  $ worker          : chr "localhost"
[16:05:20.830]   ..- attr(*, "localhost")= logi TRUE
[16:05:20.830]  $ master          : chr "localhost"
[16:05:20.830]  $ port            : int 11239
[16:05:20.830]  $ connectTimeout  : num 120
[16:05:20.830]  $ timeout         : num 2592000
[16:05:20.830]  $ rscript         : chr "'/usr/local/lib/R/bin/Rscript'"
[16:05:20.830]  $ homogeneous     : logi TRUE
[16:05:20.830]  $ rscript_args    : chr "--default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),fi"| __truncated__
[16:05:20.830]  $ rscript_envs    : NULL
[16:05:20.830]  $ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[16:05:20.830]  $ rscript_startup : NULL
[16:05:20.830]  $ rscript_sh      : chr "sh"
[16:05:20.830]  $ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[16:05:20.830]  $ methods         : logi TRUE
[16:05:20.830]  $ socketOptions   : chr "no-delay"
[16:05:20.830]  $ useXDR          : logi FALSE
[16:05:20.830]  $ outfile         : chr "/dev/null"
[16:05:20.830]  $ renice          : int NA
[16:05:20.830]  $ rshcmd          : NULL
[16:05:20.830]  $ user            : chr(0) 
[16:05:20.830]  $ revtunnel       : logi FALSE
[16:05:20.830]  $ rshlogfile      : NULL
[16:05:20.830]  $ rshopts         : chr(0) 
[16:05:20.830]  $ rank            : int 1
[16:05:20.830]  $ manual          : logi FALSE
[16:05:20.830]  $ dryrun          : logi FALSE
[16:05:20.830]  $ quiet           : logi FALSE
[16:05:20.830]  $ setup_strategy  : chr "parallel"
[16:05:20.830]  $ local_cmd       : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[16:05:20.830]  $ pidfile         : chr "/tmp/RtmpVtakKw/worker.rank=1.parallelly.parent=87188.154941995939c.pid"
[16:05:20.830]  $ rshcmd_label    : NULL
[16:05:20.830]  $ rsh_call        : NULL
[16:05:20.830]  $ cmd             : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[16:05:20.830]  $ localMachine    : logi TRUE
[16:05:20.830]  $ make_fcn        :function (worker = getOption2("parallelly.localhost.hostname", "localhost"), 
[16:05:20.830]     master = NULL, port, connectTimeout = getOption2("parallelly.makeNodePSOCK.connectTimeout", 
[16:05:20.830]         2 * 60), timeout = getOption2("parallelly.makeNodePSOCK.timeout", 
[16:05:20.830]         30 * 24 * 60 * 60), rscript = NULL, homogeneous = NULL, rscript_args = NULL, 
[16:05:20.830]     rscript_envs = NULL, rscript_libs = NULL, rscript_startup = NULL, rscript_sh = c("auto", 
[16:05:20.830]         "cmd", "sh"), default_packages = c("datasets", "utils", "grDevices", 
[16:05:20.830]         "graphics", "stats", if (methods) "methods"), methods = TRUE, socketOptions = getOption2("parallelly.makeNodePSOCK.socketOptions", 
[16:05:20.830]         "no-delay"), useXDR = getOption2("parallelly.makeNodePSOCK.useXDR", 
[16:05:20.830]         FALSE), outfile = "/dev/null", renice = NA_integer_, rshcmd = getOption2("parallelly.makeNodePSOCK.rshcmd", 
[16:05:20.830]         NULL), user = NULL, revtunnel = NA, rshlogfile = NULL, rshopts = getOption2("parallelly.makeNodePSOCK.rshopts", 
[16:05:20.830]         NULL), rank = 1L, manual = FALSE, dryrun = FALSE, quiet = FALSE, 
[16:05:20.830]     setup_strategy = getOption2("parallelly.makeNodePSOCK.setup_strategy", 
[16:05:20.830]         "parallel"), action = c("launch", "options"), verbose = FALSE)  
[16:05:20.830]  $ arguments       :List of 28
[16:05:20.830]   ..$ worker          : chr "localhost"
[16:05:20.830]   ..$ master          : NULL
[16:05:20.830]   ..$ port            : int 11239
[16:05:20.830]   ..$ connectTimeout  : num 120
[16:05:20.830]   ..$ timeout         : num 2592000
[16:05:20.830]   ..$ rscript         : NULL
[16:05:20.830]   ..$ homogeneous     : NULL
[16:05:20.830]   ..$ rscript_args    : NULL
[16:05:20.830]   ..$ rscript_envs    : NULL
[16:05:20.830]   ..$ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[16:05:20.830]   ..$ rscript_startup : NULL
[16:05:20.830]   ..$ rscript_sh      : chr [1:3] "auto" "cmd" "sh"
[16:05:20.830]   ..$ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[16:05:20.830]   ..$ methods         : logi TRUE
[16:05:20.830]   ..$ socketOptions   : chr "no-delay"
[16:05:20.830]   ..$ useXDR          : logi FALSE
[16:05:20.830]   ..$ outfile         : chr "/dev/null"
[16:05:20.830]   ..$ renice          : int NA
[16:05:20.830]   ..$ rshcmd          : NULL
[16:05:20.830]   ..$ user            : NULL
[16:05:20.830]   ..$ revtunnel       : logi NA
[16:05:20.830]   ..$ rshlogfile      : NULL
[16:05:20.830]   ..$ rshopts         : NULL
[16:05:20.830]   ..$ rank            : int 1
[16:05:20.830]   ..$ manual          : logi FALSE
[16:05:20.830]   ..$ dryrun          : logi FALSE
[16:05:20.830]   ..$ quiet           : logi FALSE
[16:05:20.830]   ..$ setup_strategy  : chr "parallel"
[16:05:20.830]  - attr(*, "class")= chr [1:2] "makeNodePSOCKOptions" "makeNodeOptions"
[16:05:20.846] [local output] System call to launch all workers:
[16:05:20.847] [local output] '/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/RtmpVtakKw/worker.rank=1.parallelly.parent=87188.154941995939c.pid")), silent = TRUE)' -e 'options(socketOptions = "no-delay")' -e '.libPaths(c("/usr/local/lib/R/site-library","/usr/local/lib/R/library"))' -e 'workRSOCK <- tryCatch(parallel:::.workRSOCK, error=function(e) parallel:::.slaveRSOCK); workRSOCK()' MASTER=localhost PORT=11239 OUT=/dev/null TIMEOUT=2592000 XDR=FALSE SETUPTIMEOUT=120 SETUPSTRATEGY=parallel
[16:05:20.847] [local output] Starting PSOCK main server
[16:05:20.852] [local output] Workers launched
[16:05:20.852] [local output] Waiting for workers to connect back
[16:05:20.852]  - [local output] 0 workers out of 2 ready
[16:05:21.093]  - [local output] 0 workers out of 2 ready
[16:05:21.094]  - [local output] 1 workers out of 2 ready
[16:05:21.097]  - [local output] 1 workers out of 2 ready
[16:05:21.097]  - [local output] 2 workers out of 2 ready
[16:05:21.097] [local output] Launching of workers completed
[16:05:21.097] [local output] Collecting session information from workers
[16:05:21.098] [local output]  - Worker #1 of 2
[16:05:21.099] [local output]  - Worker #2 of 2
[16:05:21.099] [local output] makeClusterPSOCK() ... done
[16:05:21.111] Packages needed by the future expression (n = 0): <none>
[16:05:21.111] Packages needed by future strategies (n = 0): <none>
[16:05:21.111] {
[16:05:21.111]     {
[16:05:21.111]         {
[16:05:21.111]             ...future.startTime <- base::Sys.time()
[16:05:21.111]             {
[16:05:21.111]                 {
[16:05:21.111]                   {
[16:05:21.111]                     {
[16:05:21.111]                       base::local({
[16:05:21.111]                         has_future <- base::requireNamespace("future", 
[16:05:21.111]                           quietly = TRUE)
[16:05:21.111]                         if (has_future) {
[16:05:21.111]                           ns <- base::getNamespace("future")
[16:05:21.111]                           version <- ns[[".package"]][["version"]]
[16:05:21.111]                           if (is.null(version)) 
[16:05:21.111]                             version <- utils::packageVersion("future")
[16:05:21.111]                         }
[16:05:21.111]                         else {
[16:05:21.111]                           version <- NULL
[16:05:21.111]                         }
[16:05:21.111]                         if (!has_future || version < "1.8.0") {
[16:05:21.111]                           info <- base::c(r_version = base::gsub("R version ", 
[16:05:21.111]                             "", base::R.version$version.string), 
[16:05:21.111]                             platform = base::sprintf("%s (%s-bit)", 
[16:05:21.111]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:05:21.111]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[16:05:21.111]                               "release", "version")], collapse = " "), 
[16:05:21.111]                             hostname = base::Sys.info()[["nodename"]])
[16:05:21.111]                           info <- base::sprintf("%s: %s", base::names(info), 
[16:05:21.111]                             info)
[16:05:21.111]                           info <- base::paste(info, collapse = "; ")
[16:05:21.111]                           if (!has_future) {
[16:05:21.111]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:05:21.111]                               info)
[16:05:21.111]                           }
[16:05:21.111]                           else {
[16:05:21.111]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:05:21.111]                               info, version)
[16:05:21.111]                           }
[16:05:21.111]                           base::stop(msg)
[16:05:21.111]                         }
[16:05:21.111]                       })
[16:05:21.111]                     }
[16:05:21.111]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[16:05:21.111]                     base::options(mc.cores = 1L)
[16:05:21.111]                   }
[16:05:21.111]                   options(future.plan = NULL)
[16:05:21.111]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:05:21.111]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:05:21.111]                 }
[16:05:21.111]                 ...future.workdir <- getwd()
[16:05:21.111]             }
[16:05:21.111]             ...future.oldOptions <- base::as.list(base::.Options)
[16:05:21.111]             ...future.oldEnvVars <- base::Sys.getenv()
[16:05:21.111]         }
[16:05:21.111]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:05:21.111]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:05:21.111]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:05:21.111]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:05:21.111]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:05:21.111]             future.stdout.windows.reencode = NULL, width = 80L)
[16:05:21.111]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:05:21.111]             base::names(...future.oldOptions))
[16:05:21.111]     }
[16:05:21.111]     if (FALSE) {
[16:05:21.111]     }
[16:05:21.111]     else {
[16:05:21.111]         if (TRUE) {
[16:05:21.111]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:05:21.111]                 open = "w")
[16:05:21.111]         }
[16:05:21.111]         else {
[16:05:21.111]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:05:21.111]                 windows = "NUL", "/dev/null"), open = "w")
[16:05:21.111]         }
[16:05:21.111]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:05:21.111]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:05:21.111]             base::sink(type = "output", split = FALSE)
[16:05:21.111]             base::close(...future.stdout)
[16:05:21.111]         }, add = TRUE)
[16:05:21.111]     }
[16:05:21.111]     ...future.frame <- base::sys.nframe()
[16:05:21.111]     ...future.conditions <- base::list()
[16:05:21.111]     ...future.rng <- base::globalenv()$.Random.seed
[16:05:21.111]     if (FALSE) {
[16:05:21.111]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:05:21.111]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:05:21.111]     }
[16:05:21.111]     ...future.result <- base::tryCatch({
[16:05:21.111]         base::withCallingHandlers({
[16:05:21.111]             ...future.value <- base::withVisible(base::local({
[16:05:21.111]                 ...future.makeSendCondition <- base::local({
[16:05:21.111]                   sendCondition <- NULL
[16:05:21.111]                   function(frame = 1L) {
[16:05:21.111]                     if (is.function(sendCondition)) 
[16:05:21.111]                       return(sendCondition)
[16:05:21.111]                     ns <- getNamespace("parallel")
[16:05:21.111]                     if (exists("sendData", mode = "function", 
[16:05:21.111]                       envir = ns)) {
[16:05:21.111]                       parallel_sendData <- get("sendData", mode = "function", 
[16:05:21.111]                         envir = ns)
[16:05:21.111]                       envir <- sys.frame(frame)
[16:05:21.111]                       master <- NULL
[16:05:21.111]                       while (!identical(envir, .GlobalEnv) && 
[16:05:21.111]                         !identical(envir, emptyenv())) {
[16:05:21.111]                         if (exists("master", mode = "list", envir = envir, 
[16:05:21.111]                           inherits = FALSE)) {
[16:05:21.111]                           master <- get("master", mode = "list", 
[16:05:21.111]                             envir = envir, inherits = FALSE)
[16:05:21.111]                           if (inherits(master, c("SOCKnode", 
[16:05:21.111]                             "SOCK0node"))) {
[16:05:21.111]                             sendCondition <<- function(cond) {
[16:05:21.111]                               data <- list(type = "VALUE", value = cond, 
[16:05:21.111]                                 success = TRUE)
[16:05:21.111]                               parallel_sendData(master, data)
[16:05:21.111]                             }
[16:05:21.111]                             return(sendCondition)
[16:05:21.111]                           }
[16:05:21.111]                         }
[16:05:21.111]                         frame <- frame + 1L
[16:05:21.111]                         envir <- sys.frame(frame)
[16:05:21.111]                       }
[16:05:21.111]                     }
[16:05:21.111]                     sendCondition <<- function(cond) NULL
[16:05:21.111]                   }
[16:05:21.111]                 })
[16:05:21.111]                 withCallingHandlers({
[16:05:21.111]                   {
[16:05:21.111]                     42L
[16:05:21.111]                   }
[16:05:21.111]                 }, immediateCondition = function(cond) {
[16:05:21.111]                   sendCondition <- ...future.makeSendCondition()
[16:05:21.111]                   sendCondition(cond)
[16:05:21.111]                   muffleCondition <- function (cond, pattern = "^muffle") 
[16:05:21.111]                   {
[16:05:21.111]                     inherits <- base::inherits
[16:05:21.111]                     invokeRestart <- base::invokeRestart
[16:05:21.111]                     is.null <- base::is.null
[16:05:21.111]                     muffled <- FALSE
[16:05:21.111]                     if (inherits(cond, "message")) {
[16:05:21.111]                       muffled <- grepl(pattern, "muffleMessage")
[16:05:21.111]                       if (muffled) 
[16:05:21.111]                         invokeRestart("muffleMessage")
[16:05:21.111]                     }
[16:05:21.111]                     else if (inherits(cond, "warning")) {
[16:05:21.111]                       muffled <- grepl(pattern, "muffleWarning")
[16:05:21.111]                       if (muffled) 
[16:05:21.111]                         invokeRestart("muffleWarning")
[16:05:21.111]                     }
[16:05:21.111]                     else if (inherits(cond, "condition")) {
[16:05:21.111]                       if (!is.null(pattern)) {
[16:05:21.111]                         computeRestarts <- base::computeRestarts
[16:05:21.111]                         grepl <- base::grepl
[16:05:21.111]                         restarts <- computeRestarts(cond)
[16:05:21.111]                         for (restart in restarts) {
[16:05:21.111]                           name <- restart$name
[16:05:21.111]                           if (is.null(name)) 
[16:05:21.111]                             next
[16:05:21.111]                           if (!grepl(pattern, name)) 
[16:05:21.111]                             next
[16:05:21.111]                           invokeRestart(restart)
[16:05:21.111]                           muffled <- TRUE
[16:05:21.111]                           break
[16:05:21.111]                         }
[16:05:21.111]                       }
[16:05:21.111]                     }
[16:05:21.111]                     invisible(muffled)
[16:05:21.111]                   }
[16:05:21.111]                   muffleCondition(cond)
[16:05:21.111]                 })
[16:05:21.111]             }))
[16:05:21.111]             future::FutureResult(value = ...future.value$value, 
[16:05:21.111]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:05:21.111]                   ...future.rng), globalenv = if (FALSE) 
[16:05:21.111]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:05:21.111]                     ...future.globalenv.names))
[16:05:21.111]                 else NULL, started = ...future.startTime, version = "1.8")
[16:05:21.111]         }, condition = base::local({
[16:05:21.111]             c <- base::c
[16:05:21.111]             inherits <- base::inherits
[16:05:21.111]             invokeRestart <- base::invokeRestart
[16:05:21.111]             length <- base::length
[16:05:21.111]             list <- base::list
[16:05:21.111]             seq.int <- base::seq.int
[16:05:21.111]             signalCondition <- base::signalCondition
[16:05:21.111]             sys.calls <- base::sys.calls
[16:05:21.111]             `[[` <- base::`[[`
[16:05:21.111]             `+` <- base::`+`
[16:05:21.111]             `<<-` <- base::`<<-`
[16:05:21.111]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:05:21.111]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:05:21.111]                   3L)]
[16:05:21.111]             }
[16:05:21.111]             function(cond) {
[16:05:21.111]                 is_error <- inherits(cond, "error")
[16:05:21.111]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:05:21.111]                   NULL)
[16:05:21.111]                 if (is_error) {
[16:05:21.111]                   sessionInformation <- function() {
[16:05:21.111]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:05:21.111]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:05:21.111]                       search = base::search(), system = base::Sys.info())
[16:05:21.111]                   }
[16:05:21.111]                   ...future.conditions[[length(...future.conditions) + 
[16:05:21.111]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:05:21.111]                     cond$call), session = sessionInformation(), 
[16:05:21.111]                     timestamp = base::Sys.time(), signaled = 0L)
[16:05:21.111]                   signalCondition(cond)
[16:05:21.111]                 }
[16:05:21.111]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:05:21.111]                 "immediateCondition"))) {
[16:05:21.111]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:05:21.111]                   ...future.conditions[[length(...future.conditions) + 
[16:05:21.111]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:05:21.111]                   if (TRUE && !signal) {
[16:05:21.111]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:05:21.111]                     {
[16:05:21.111]                       inherits <- base::inherits
[16:05:21.111]                       invokeRestart <- base::invokeRestart
[16:05:21.111]                       is.null <- base::is.null
[16:05:21.111]                       muffled <- FALSE
[16:05:21.111]                       if (inherits(cond, "message")) {
[16:05:21.111]                         muffled <- grepl(pattern, "muffleMessage")
[16:05:21.111]                         if (muffled) 
[16:05:21.111]                           invokeRestart("muffleMessage")
[16:05:21.111]                       }
[16:05:21.111]                       else if (inherits(cond, "warning")) {
[16:05:21.111]                         muffled <- grepl(pattern, "muffleWarning")
[16:05:21.111]                         if (muffled) 
[16:05:21.111]                           invokeRestart("muffleWarning")
[16:05:21.111]                       }
[16:05:21.111]                       else if (inherits(cond, "condition")) {
[16:05:21.111]                         if (!is.null(pattern)) {
[16:05:21.111]                           computeRestarts <- base::computeRestarts
[16:05:21.111]                           grepl <- base::grepl
[16:05:21.111]                           restarts <- computeRestarts(cond)
[16:05:21.111]                           for (restart in restarts) {
[16:05:21.111]                             name <- restart$name
[16:05:21.111]                             if (is.null(name)) 
[16:05:21.111]                               next
[16:05:21.111]                             if (!grepl(pattern, name)) 
[16:05:21.111]                               next
[16:05:21.111]                             invokeRestart(restart)
[16:05:21.111]                             muffled <- TRUE
[16:05:21.111]                             break
[16:05:21.111]                           }
[16:05:21.111]                         }
[16:05:21.111]                       }
[16:05:21.111]                       invisible(muffled)
[16:05:21.111]                     }
[16:05:21.111]                     muffleCondition(cond, pattern = "^muffle")
[16:05:21.111]                   }
[16:05:21.111]                 }
[16:05:21.111]                 else {
[16:05:21.111]                   if (TRUE) {
[16:05:21.111]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:05:21.111]                     {
[16:05:21.111]                       inherits <- base::inherits
[16:05:21.111]                       invokeRestart <- base::invokeRestart
[16:05:21.111]                       is.null <- base::is.null
[16:05:21.111]                       muffled <- FALSE
[16:05:21.111]                       if (inherits(cond, "message")) {
[16:05:21.111]                         muffled <- grepl(pattern, "muffleMessage")
[16:05:21.111]                         if (muffled) 
[16:05:21.111]                           invokeRestart("muffleMessage")
[16:05:21.111]                       }
[16:05:21.111]                       else if (inherits(cond, "warning")) {
[16:05:21.111]                         muffled <- grepl(pattern, "muffleWarning")
[16:05:21.111]                         if (muffled) 
[16:05:21.111]                           invokeRestart("muffleWarning")
[16:05:21.111]                       }
[16:05:21.111]                       else if (inherits(cond, "condition")) {
[16:05:21.111]                         if (!is.null(pattern)) {
[16:05:21.111]                           computeRestarts <- base::computeRestarts
[16:05:21.111]                           grepl <- base::grepl
[16:05:21.111]                           restarts <- computeRestarts(cond)
[16:05:21.111]                           for (restart in restarts) {
[16:05:21.111]                             name <- restart$name
[16:05:21.111]                             if (is.null(name)) 
[16:05:21.111]                               next
[16:05:21.111]                             if (!grepl(pattern, name)) 
[16:05:21.111]                               next
[16:05:21.111]                             invokeRestart(restart)
[16:05:21.111]                             muffled <- TRUE
[16:05:21.111]                             break
[16:05:21.111]                           }
[16:05:21.111]                         }
[16:05:21.111]                       }
[16:05:21.111]                       invisible(muffled)
[16:05:21.111]                     }
[16:05:21.111]                     muffleCondition(cond, pattern = "^muffle")
[16:05:21.111]                   }
[16:05:21.111]                 }
[16:05:21.111]             }
[16:05:21.111]         }))
[16:05:21.111]     }, error = function(ex) {
[16:05:21.111]         base::structure(base::list(value = NULL, visible = NULL, 
[16:05:21.111]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:05:21.111]                 ...future.rng), started = ...future.startTime, 
[16:05:21.111]             finished = Sys.time(), session_uuid = NA_character_, 
[16:05:21.111]             version = "1.8"), class = "FutureResult")
[16:05:21.111]     }, finally = {
[16:05:21.111]         if (!identical(...future.workdir, getwd())) 
[16:05:21.111]             setwd(...future.workdir)
[16:05:21.111]         {
[16:05:21.111]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:05:21.111]                 ...future.oldOptions$nwarnings <- NULL
[16:05:21.111]             }
[16:05:21.111]             base::options(...future.oldOptions)
[16:05:21.111]             if (.Platform$OS.type == "windows") {
[16:05:21.111]                 old_names <- names(...future.oldEnvVars)
[16:05:21.111]                 envs <- base::Sys.getenv()
[16:05:21.111]                 names <- names(envs)
[16:05:21.111]                 common <- intersect(names, old_names)
[16:05:21.111]                 added <- setdiff(names, old_names)
[16:05:21.111]                 removed <- setdiff(old_names, names)
[16:05:21.111]                 changed <- common[...future.oldEnvVars[common] != 
[16:05:21.111]                   envs[common]]
[16:05:21.111]                 NAMES <- toupper(changed)
[16:05:21.111]                 args <- list()
[16:05:21.111]                 for (kk in seq_along(NAMES)) {
[16:05:21.111]                   name <- changed[[kk]]
[16:05:21.111]                   NAME <- NAMES[[kk]]
[16:05:21.111]                   if (name != NAME && is.element(NAME, old_names)) 
[16:05:21.111]                     next
[16:05:21.111]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:05:21.111]                 }
[16:05:21.111]                 NAMES <- toupper(added)
[16:05:21.111]                 for (kk in seq_along(NAMES)) {
[16:05:21.111]                   name <- added[[kk]]
[16:05:21.111]                   NAME <- NAMES[[kk]]
[16:05:21.111]                   if (name != NAME && is.element(NAME, old_names)) 
[16:05:21.111]                     next
[16:05:21.111]                   args[[name]] <- ""
[16:05:21.111]                 }
[16:05:21.111]                 NAMES <- toupper(removed)
[16:05:21.111]                 for (kk in seq_along(NAMES)) {
[16:05:21.111]                   name <- removed[[kk]]
[16:05:21.111]                   NAME <- NAMES[[kk]]
[16:05:21.111]                   if (name != NAME && is.element(NAME, old_names)) 
[16:05:21.111]                     next
[16:05:21.111]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:05:21.111]                 }
[16:05:21.111]                 if (length(args) > 0) 
[16:05:21.111]                   base::do.call(base::Sys.setenv, args = args)
[16:05:21.111]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:05:21.111]             }
[16:05:21.111]             else {
[16:05:21.111]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:05:21.111]             }
[16:05:21.111]             {
[16:05:21.111]                 if (base::length(...future.futureOptionsAdded) > 
[16:05:21.111]                   0L) {
[16:05:21.111]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:05:21.111]                   base::names(opts) <- ...future.futureOptionsAdded
[16:05:21.111]                   base::options(opts)
[16:05:21.111]                 }
[16:05:21.111]                 {
[16:05:21.111]                   {
[16:05:21.111]                     base::options(mc.cores = ...future.mc.cores.old)
[16:05:21.111]                     NULL
[16:05:21.111]                   }
[16:05:21.111]                   options(future.plan = NULL)
[16:05:21.111]                   if (is.na(NA_character_)) 
[16:05:21.111]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:05:21.111]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:05:21.111]                   future::plan(list(function (..., envir = parent.frame()) 
[16:05:21.111]                   {
[16:05:21.111]                     future <- SequentialFuture(..., envir = envir)
[16:05:21.111]                     if (!future$lazy) 
[16:05:21.111]                       future <- run(future)
[16:05:21.111]                     invisible(future)
[16:05:21.111]                   }), .cleanup = FALSE, .init = FALSE)
[16:05:21.111]                 }
[16:05:21.111]             }
[16:05:21.111]         }
[16:05:21.111]     })
[16:05:21.111]     if (TRUE) {
[16:05:21.111]         base::sink(type = "output", split = FALSE)
[16:05:21.111]         if (TRUE) {
[16:05:21.111]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:05:21.111]         }
[16:05:21.111]         else {
[16:05:21.111]             ...future.result["stdout"] <- base::list(NULL)
[16:05:21.111]         }
[16:05:21.111]         base::close(...future.stdout)
[16:05:21.111]         ...future.stdout <- NULL
[16:05:21.111]     }
[16:05:21.111]     ...future.result$conditions <- ...future.conditions
[16:05:21.111]     ...future.result$finished <- base::Sys.time()
[16:05:21.111]     ...future.result
[16:05:21.111] }
[16:05:21.165] MultisessionFuture started
MultisessionFuture:
Label: ‘<none>’
Expression:
{
    42L
}
Lazy evaluation: FALSE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: FALSE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: 44f0d080-a0af-4897-da8d-6d247098800b
Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[1] FALSE
[16:05:21.189] result() for ClusterFuture ...
[16:05:21.190] receiveMessageFromWorker() for ClusterFuture ...
[16:05:21.190] - Validating connection of MultisessionFuture
[16:05:21.201] - received message: FutureResult
[16:05:21.201] - Received FutureResult
[16:05:21.204] - Erased future from FutureRegistry
[16:05:21.204] result() for ClusterFuture ...
[16:05:21.204] - result already collected: FutureResult
[16:05:21.204] result() for ClusterFuture ... done
[16:05:21.205] receiveMessageFromWorker() for ClusterFuture ... done
[16:05:21.205] result() for ClusterFuture ... done
[16:05:21.205] result() for ClusterFuture ...
[16:05:21.205] - result already collected: FutureResult
[16:05:21.205] result() for ClusterFuture ... done
[1] 42
[16:05:21.209] getGlobalsAndPackages() ...
[16:05:21.209] Searching for globals...
[16:05:21.212] - globals found: [4] ‘{’, ‘<-’, ‘*’, ‘a’
[16:05:21.212] Searching for globals ... DONE
[16:05:21.212] Resolving globals: FALSE
[16:05:21.212] The total size of the 1 globals is 56 bytes (56 bytes)
[16:05:21.213] The total size of the 1 globals exported for future expression (‘{; b <- 3; c <- 2; a * b * c; }’) is 56 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘a’ (56 bytes of class ‘numeric’)
[16:05:21.213] - globals: [1] ‘a’
[16:05:21.213] 
[16:05:21.213] getGlobalsAndPackages() ... DONE
[16:05:21.224] Packages needed by the future expression (n = 0): <none>
[16:05:21.225] Packages needed by future strategies (n = 0): <none>
[16:05:21.225] {
[16:05:21.225]     {
[16:05:21.225]         {
[16:05:21.225]             ...future.startTime <- base::Sys.time()
[16:05:21.225]             {
[16:05:21.225]                 {
[16:05:21.225]                   {
[16:05:21.225]                     {
[16:05:21.225]                       base::local({
[16:05:21.225]                         has_future <- base::requireNamespace("future", 
[16:05:21.225]                           quietly = TRUE)
[16:05:21.225]                         if (has_future) {
[16:05:21.225]                           ns <- base::getNamespace("future")
[16:05:21.225]                           version <- ns[[".package"]][["version"]]
[16:05:21.225]                           if (is.null(version)) 
[16:05:21.225]                             version <- utils::packageVersion("future")
[16:05:21.225]                         }
[16:05:21.225]                         else {
[16:05:21.225]                           version <- NULL
[16:05:21.225]                         }
[16:05:21.225]                         if (!has_future || version < "1.8.0") {
[16:05:21.225]                           info <- base::c(r_version = base::gsub("R version ", 
[16:05:21.225]                             "", base::R.version$version.string), 
[16:05:21.225]                             platform = base::sprintf("%s (%s-bit)", 
[16:05:21.225]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:05:21.225]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[16:05:21.225]                               "release", "version")], collapse = " "), 
[16:05:21.225]                             hostname = base::Sys.info()[["nodename"]])
[16:05:21.225]                           info <- base::sprintf("%s: %s", base::names(info), 
[16:05:21.225]                             info)
[16:05:21.225]                           info <- base::paste(info, collapse = "; ")
[16:05:21.225]                           if (!has_future) {
[16:05:21.225]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:05:21.225]                               info)
[16:05:21.225]                           }
[16:05:21.225]                           else {
[16:05:21.225]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:05:21.225]                               info, version)
[16:05:21.225]                           }
[16:05:21.225]                           base::stop(msg)
[16:05:21.225]                         }
[16:05:21.225]                       })
[16:05:21.225]                     }
[16:05:21.225]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[16:05:21.225]                     base::options(mc.cores = 1L)
[16:05:21.225]                   }
[16:05:21.225]                   options(future.plan = NULL)
[16:05:21.225]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:05:21.225]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:05:21.225]                 }
[16:05:21.225]                 ...future.workdir <- getwd()
[16:05:21.225]             }
[16:05:21.225]             ...future.oldOptions <- base::as.list(base::.Options)
[16:05:21.225]             ...future.oldEnvVars <- base::Sys.getenv()
[16:05:21.225]         }
[16:05:21.225]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:05:21.225]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:05:21.225]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:05:21.225]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:05:21.225]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:05:21.225]             future.stdout.windows.reencode = NULL, width = 80L)
[16:05:21.225]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:05:21.225]             base::names(...future.oldOptions))
[16:05:21.225]     }
[16:05:21.225]     if (FALSE) {
[16:05:21.225]     }
[16:05:21.225]     else {
[16:05:21.225]         if (TRUE) {
[16:05:21.225]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:05:21.225]                 open = "w")
[16:05:21.225]         }
[16:05:21.225]         else {
[16:05:21.225]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:05:21.225]                 windows = "NUL", "/dev/null"), open = "w")
[16:05:21.225]         }
[16:05:21.225]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:05:21.225]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:05:21.225]             base::sink(type = "output", split = FALSE)
[16:05:21.225]             base::close(...future.stdout)
[16:05:21.225]         }, add = TRUE)
[16:05:21.225]     }
[16:05:21.225]     ...future.frame <- base::sys.nframe()
[16:05:21.225]     ...future.conditions <- base::list()
[16:05:21.225]     ...future.rng <- base::globalenv()$.Random.seed
[16:05:21.225]     if (FALSE) {
[16:05:21.225]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:05:21.225]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:05:21.225]     }
[16:05:21.225]     ...future.result <- base::tryCatch({
[16:05:21.225]         base::withCallingHandlers({
[16:05:21.225]             ...future.value <- base::withVisible(base::local({
[16:05:21.225]                 ...future.makeSendCondition <- base::local({
[16:05:21.225]                   sendCondition <- NULL
[16:05:21.225]                   function(frame = 1L) {
[16:05:21.225]                     if (is.function(sendCondition)) 
[16:05:21.225]                       return(sendCondition)
[16:05:21.225]                     ns <- getNamespace("parallel")
[16:05:21.225]                     if (exists("sendData", mode = "function", 
[16:05:21.225]                       envir = ns)) {
[16:05:21.225]                       parallel_sendData <- get("sendData", mode = "function", 
[16:05:21.225]                         envir = ns)
[16:05:21.225]                       envir <- sys.frame(frame)
[16:05:21.225]                       master <- NULL
[16:05:21.225]                       while (!identical(envir, .GlobalEnv) && 
[16:05:21.225]                         !identical(envir, emptyenv())) {
[16:05:21.225]                         if (exists("master", mode = "list", envir = envir, 
[16:05:21.225]                           inherits = FALSE)) {
[16:05:21.225]                           master <- get("master", mode = "list", 
[16:05:21.225]                             envir = envir, inherits = FALSE)
[16:05:21.225]                           if (inherits(master, c("SOCKnode", 
[16:05:21.225]                             "SOCK0node"))) {
[16:05:21.225]                             sendCondition <<- function(cond) {
[16:05:21.225]                               data <- list(type = "VALUE", value = cond, 
[16:05:21.225]                                 success = TRUE)
[16:05:21.225]                               parallel_sendData(master, data)
[16:05:21.225]                             }
[16:05:21.225]                             return(sendCondition)
[16:05:21.225]                           }
[16:05:21.225]                         }
[16:05:21.225]                         frame <- frame + 1L
[16:05:21.225]                         envir <- sys.frame(frame)
[16:05:21.225]                       }
[16:05:21.225]                     }
[16:05:21.225]                     sendCondition <<- function(cond) NULL
[16:05:21.225]                   }
[16:05:21.225]                 })
[16:05:21.225]                 withCallingHandlers({
[16:05:21.225]                   {
[16:05:21.225]                     b <- 3
[16:05:21.225]                     c <- 2
[16:05:21.225]                     a * b * c
[16:05:21.225]                   }
[16:05:21.225]                 }, immediateCondition = function(cond) {
[16:05:21.225]                   sendCondition <- ...future.makeSendCondition()
[16:05:21.225]                   sendCondition(cond)
[16:05:21.225]                   muffleCondition <- function (cond, pattern = "^muffle") 
[16:05:21.225]                   {
[16:05:21.225]                     inherits <- base::inherits
[16:05:21.225]                     invokeRestart <- base::invokeRestart
[16:05:21.225]                     is.null <- base::is.null
[16:05:21.225]                     muffled <- FALSE
[16:05:21.225]                     if (inherits(cond, "message")) {
[16:05:21.225]                       muffled <- grepl(pattern, "muffleMessage")
[16:05:21.225]                       if (muffled) 
[16:05:21.225]                         invokeRestart("muffleMessage")
[16:05:21.225]                     }
[16:05:21.225]                     else if (inherits(cond, "warning")) {
[16:05:21.225]                       muffled <- grepl(pattern, "muffleWarning")
[16:05:21.225]                       if (muffled) 
[16:05:21.225]                         invokeRestart("muffleWarning")
[16:05:21.225]                     }
[16:05:21.225]                     else if (inherits(cond, "condition")) {
[16:05:21.225]                       if (!is.null(pattern)) {
[16:05:21.225]                         computeRestarts <- base::computeRestarts
[16:05:21.225]                         grepl <- base::grepl
[16:05:21.225]                         restarts <- computeRestarts(cond)
[16:05:21.225]                         for (restart in restarts) {
[16:05:21.225]                           name <- restart$name
[16:05:21.225]                           if (is.null(name)) 
[16:05:21.225]                             next
[16:05:21.225]                           if (!grepl(pattern, name)) 
[16:05:21.225]                             next
[16:05:21.225]                           invokeRestart(restart)
[16:05:21.225]                           muffled <- TRUE
[16:05:21.225]                           break
[16:05:21.225]                         }
[16:05:21.225]                       }
[16:05:21.225]                     }
[16:05:21.225]                     invisible(muffled)
[16:05:21.225]                   }
[16:05:21.225]                   muffleCondition(cond)
[16:05:21.225]                 })
[16:05:21.225]             }))
[16:05:21.225]             future::FutureResult(value = ...future.value$value, 
[16:05:21.225]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:05:21.225]                   ...future.rng), globalenv = if (FALSE) 
[16:05:21.225]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:05:21.225]                     ...future.globalenv.names))
[16:05:21.225]                 else NULL, started = ...future.startTime, version = "1.8")
[16:05:21.225]         }, condition = base::local({
[16:05:21.225]             c <- base::c
[16:05:21.225]             inherits <- base::inherits
[16:05:21.225]             invokeRestart <- base::invokeRestart
[16:05:21.225]             length <- base::length
[16:05:21.225]             list <- base::list
[16:05:21.225]             seq.int <- base::seq.int
[16:05:21.225]             signalCondition <- base::signalCondition
[16:05:21.225]             sys.calls <- base::sys.calls
[16:05:21.225]             `[[` <- base::`[[`
[16:05:21.225]             `+` <- base::`+`
[16:05:21.225]             `<<-` <- base::`<<-`
[16:05:21.225]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:05:21.225]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:05:21.225]                   3L)]
[16:05:21.225]             }
[16:05:21.225]             function(cond) {
[16:05:21.225]                 is_error <- inherits(cond, "error")
[16:05:21.225]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:05:21.225]                   NULL)
[16:05:21.225]                 if (is_error) {
[16:05:21.225]                   sessionInformation <- function() {
[16:05:21.225]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:05:21.225]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:05:21.225]                       search = base::search(), system = base::Sys.info())
[16:05:21.225]                   }
[16:05:21.225]                   ...future.conditions[[length(...future.conditions) + 
[16:05:21.225]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:05:21.225]                     cond$call), session = sessionInformation(), 
[16:05:21.225]                     timestamp = base::Sys.time(), signaled = 0L)
[16:05:21.225]                   signalCondition(cond)
[16:05:21.225]                 }
[16:05:21.225]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:05:21.225]                 "immediateCondition"))) {
[16:05:21.225]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:05:21.225]                   ...future.conditions[[length(...future.conditions) + 
[16:05:21.225]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:05:21.225]                   if (TRUE && !signal) {
[16:05:21.225]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:05:21.225]                     {
[16:05:21.225]                       inherits <- base::inherits
[16:05:21.225]                       invokeRestart <- base::invokeRestart
[16:05:21.225]                       is.null <- base::is.null
[16:05:21.225]                       muffled <- FALSE
[16:05:21.225]                       if (inherits(cond, "message")) {
[16:05:21.225]                         muffled <- grepl(pattern, "muffleMessage")
[16:05:21.225]                         if (muffled) 
[16:05:21.225]                           invokeRestart("muffleMessage")
[16:05:21.225]                       }
[16:05:21.225]                       else if (inherits(cond, "warning")) {
[16:05:21.225]                         muffled <- grepl(pattern, "muffleWarning")
[16:05:21.225]                         if (muffled) 
[16:05:21.225]                           invokeRestart("muffleWarning")
[16:05:21.225]                       }
[16:05:21.225]                       else if (inherits(cond, "condition")) {
[16:05:21.225]                         if (!is.null(pattern)) {
[16:05:21.225]                           computeRestarts <- base::computeRestarts
[16:05:21.225]                           grepl <- base::grepl
[16:05:21.225]                           restarts <- computeRestarts(cond)
[16:05:21.225]                           for (restart in restarts) {
[16:05:21.225]                             name <- restart$name
[16:05:21.225]                             if (is.null(name)) 
[16:05:21.225]                               next
[16:05:21.225]                             if (!grepl(pattern, name)) 
[16:05:21.225]                               next
[16:05:21.225]                             invokeRestart(restart)
[16:05:21.225]                             muffled <- TRUE
[16:05:21.225]                             break
[16:05:21.225]                           }
[16:05:21.225]                         }
[16:05:21.225]                       }
[16:05:21.225]                       invisible(muffled)
[16:05:21.225]                     }
[16:05:21.225]                     muffleCondition(cond, pattern = "^muffle")
[16:05:21.225]                   }
[16:05:21.225]                 }
[16:05:21.225]                 else {
[16:05:21.225]                   if (TRUE) {
[16:05:21.225]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:05:21.225]                     {
[16:05:21.225]                       inherits <- base::inherits
[16:05:21.225]                       invokeRestart <- base::invokeRestart
[16:05:21.225]                       is.null <- base::is.null
[16:05:21.225]                       muffled <- FALSE
[16:05:21.225]                       if (inherits(cond, "message")) {
[16:05:21.225]                         muffled <- grepl(pattern, "muffleMessage")
[16:05:21.225]                         if (muffled) 
[16:05:21.225]                           invokeRestart("muffleMessage")
[16:05:21.225]                       }
[16:05:21.225]                       else if (inherits(cond, "warning")) {
[16:05:21.225]                         muffled <- grepl(pattern, "muffleWarning")
[16:05:21.225]                         if (muffled) 
[16:05:21.225]                           invokeRestart("muffleWarning")
[16:05:21.225]                       }
[16:05:21.225]                       else if (inherits(cond, "condition")) {
[16:05:21.225]                         if (!is.null(pattern)) {
[16:05:21.225]                           computeRestarts <- base::computeRestarts
[16:05:21.225]                           grepl <- base::grepl
[16:05:21.225]                           restarts <- computeRestarts(cond)
[16:05:21.225]                           for (restart in restarts) {
[16:05:21.225]                             name <- restart$name
[16:05:21.225]                             if (is.null(name)) 
[16:05:21.225]                               next
[16:05:21.225]                             if (!grepl(pattern, name)) 
[16:05:21.225]                               next
[16:05:21.225]                             invokeRestart(restart)
[16:05:21.225]                             muffled <- TRUE
[16:05:21.225]                             break
[16:05:21.225]                           }
[16:05:21.225]                         }
[16:05:21.225]                       }
[16:05:21.225]                       invisible(muffled)
[16:05:21.225]                     }
[16:05:21.225]                     muffleCondition(cond, pattern = "^muffle")
[16:05:21.225]                   }
[16:05:21.225]                 }
[16:05:21.225]             }
[16:05:21.225]         }))
[16:05:21.225]     }, error = function(ex) {
[16:05:21.225]         base::structure(base::list(value = NULL, visible = NULL, 
[16:05:21.225]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:05:21.225]                 ...future.rng), started = ...future.startTime, 
[16:05:21.225]             finished = Sys.time(), session_uuid = NA_character_, 
[16:05:21.225]             version = "1.8"), class = "FutureResult")
[16:05:21.225]     }, finally = {
[16:05:21.225]         if (!identical(...future.workdir, getwd())) 
[16:05:21.225]             setwd(...future.workdir)
[16:05:21.225]         {
[16:05:21.225]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:05:21.225]                 ...future.oldOptions$nwarnings <- NULL
[16:05:21.225]             }
[16:05:21.225]             base::options(...future.oldOptions)
[16:05:21.225]             if (.Platform$OS.type == "windows") {
[16:05:21.225]                 old_names <- names(...future.oldEnvVars)
[16:05:21.225]                 envs <- base::Sys.getenv()
[16:05:21.225]                 names <- names(envs)
[16:05:21.225]                 common <- intersect(names, old_names)
[16:05:21.225]                 added <- setdiff(names, old_names)
[16:05:21.225]                 removed <- setdiff(old_names, names)
[16:05:21.225]                 changed <- common[...future.oldEnvVars[common] != 
[16:05:21.225]                   envs[common]]
[16:05:21.225]                 NAMES <- toupper(changed)
[16:05:21.225]                 args <- list()
[16:05:21.225]                 for (kk in seq_along(NAMES)) {
[16:05:21.225]                   name <- changed[[kk]]
[16:05:21.225]                   NAME <- NAMES[[kk]]
[16:05:21.225]                   if (name != NAME && is.element(NAME, old_names)) 
[16:05:21.225]                     next
[16:05:21.225]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:05:21.225]                 }
[16:05:21.225]                 NAMES <- toupper(added)
[16:05:21.225]                 for (kk in seq_along(NAMES)) {
[16:05:21.225]                   name <- added[[kk]]
[16:05:21.225]                   NAME <- NAMES[[kk]]
[16:05:21.225]                   if (name != NAME && is.element(NAME, old_names)) 
[16:05:21.225]                     next
[16:05:21.225]                   args[[name]] <- ""
[16:05:21.225]                 }
[16:05:21.225]                 NAMES <- toupper(removed)
[16:05:21.225]                 for (kk in seq_along(NAMES)) {
[16:05:21.225]                   name <- removed[[kk]]
[16:05:21.225]                   NAME <- NAMES[[kk]]
[16:05:21.225]                   if (name != NAME && is.element(NAME, old_names)) 
[16:05:21.225]                     next
[16:05:21.225]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:05:21.225]                 }
[16:05:21.225]                 if (length(args) > 0) 
[16:05:21.225]                   base::do.call(base::Sys.setenv, args = args)
[16:05:21.225]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:05:21.225]             }
[16:05:21.225]             else {
[16:05:21.225]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:05:21.225]             }
[16:05:21.225]             {
[16:05:21.225]                 if (base::length(...future.futureOptionsAdded) > 
[16:05:21.225]                   0L) {
[16:05:21.225]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:05:21.225]                   base::names(opts) <- ...future.futureOptionsAdded
[16:05:21.225]                   base::options(opts)
[16:05:21.225]                 }
[16:05:21.225]                 {
[16:05:21.225]                   {
[16:05:21.225]                     base::options(mc.cores = ...future.mc.cores.old)
[16:05:21.225]                     NULL
[16:05:21.225]                   }
[16:05:21.225]                   options(future.plan = NULL)
[16:05:21.225]                   if (is.na(NA_character_)) 
[16:05:21.225]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:05:21.225]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:05:21.225]                   future::plan(list(function (..., envir = parent.frame()) 
[16:05:21.225]                   {
[16:05:21.225]                     future <- SequentialFuture(..., envir = envir)
[16:05:21.225]                     if (!future$lazy) 
[16:05:21.225]                       future <- run(future)
[16:05:21.225]                     invisible(future)
[16:05:21.225]                   }), .cleanup = FALSE, .init = FALSE)
[16:05:21.225]                 }
[16:05:21.225]             }
[16:05:21.225]         }
[16:05:21.225]     })
[16:05:21.225]     if (TRUE) {
[16:05:21.225]         base::sink(type = "output", split = FALSE)
[16:05:21.225]         if (TRUE) {
[16:05:21.225]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:05:21.225]         }
[16:05:21.225]         else {
[16:05:21.225]             ...future.result["stdout"] <- base::list(NULL)
[16:05:21.225]         }
[16:05:21.225]         base::close(...future.stdout)
[16:05:21.225]         ...future.stdout <- NULL
[16:05:21.225]     }
[16:05:21.225]     ...future.result$conditions <- ...future.conditions
[16:05:21.225]     ...future.result$finished <- base::Sys.time()
[16:05:21.225]     ...future.result
[16:05:21.225] }
[16:05:21.229] Exporting 1 global objects (56 bytes) to cluster node #1 ...
[16:05:21.229] Exporting ‘a’ (56 bytes) to cluster node #1 ...
[16:05:21.229] Exporting ‘a’ (56 bytes) to cluster node #1 ... DONE
[16:05:21.229] Exporting 1 global objects (56 bytes) to cluster node #1 ... DONE
[16:05:21.230] MultisessionFuture started
MultisessionFuture:
Label: ‘<none>’
Expression:
{
    b <- 3
    c <- 2
    a * b * c
}
Lazy evaluation: FALSE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: 1 objects totaling 56 bytes (numeric ‘a’ of 56 bytes)
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: FALSE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: 44f0d080-a0af-4897-da8d-6d247098800b
Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[16:05:21.242] result() for ClusterFuture ...
[16:05:21.242] receiveMessageFromWorker() for ClusterFuture ...
[16:05:21.242] - Validating connection of MultisessionFuture
[16:05:21.275] - received message: FutureResult
[16:05:21.276] - Received FutureResult
[16:05:21.276] - Erased future from FutureRegistry
[16:05:21.276] result() for ClusterFuture ...
[16:05:21.276] - result already collected: FutureResult
[16:05:21.276] result() for ClusterFuture ... done
[16:05:21.276] receiveMessageFromWorker() for ClusterFuture ... done
[16:05:21.276] result() for ClusterFuture ... done
[16:05:21.277] result() for ClusterFuture ...
[16:05:21.277] - result already collected: FutureResult
[16:05:21.277] result() for ClusterFuture ... done
[1] 0
*** multisession() with globals and blocking
 - Creating multisession future #2 ...
[16:05:21.281] getGlobalsAndPackages() ...
[16:05:21.281] Searching for globals...
[16:05:21.282] - globals found: [2] ‘{’, ‘ii’
[16:05:21.282] Searching for globals ... DONE
[16:05:21.282] Resolving globals: FALSE
[16:05:21.283] The total size of the 1 globals is 56 bytes (56 bytes)
[16:05:21.283] The total size of the 1 globals exported for future expression (‘{; ii; }’) is 56 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘ii’ (56 bytes of class ‘numeric’)
[16:05:21.283] - globals: [1] ‘ii’
[16:05:21.284] 
[16:05:21.284] getGlobalsAndPackages() ... DONE
[16:05:21.295] Packages needed by the future expression (n = 0): <none>
[16:05:21.295] Packages needed by future strategies (n = 0): <none>
[16:05:21.295] {
[16:05:21.295]     {
[16:05:21.295]         {
[16:05:21.295]             ...future.startTime <- base::Sys.time()
[16:05:21.295]             {
[16:05:21.295]                 {
[16:05:21.295]                   {
[16:05:21.295]                     {
[16:05:21.295]                       base::local({
[16:05:21.295]                         has_future <- base::requireNamespace("future", 
[16:05:21.295]                           quietly = TRUE)
[16:05:21.295]                         if (has_future) {
[16:05:21.295]                           ns <- base::getNamespace("future")
[16:05:21.295]                           version <- ns[[".package"]][["version"]]
[16:05:21.295]                           if (is.null(version)) 
[16:05:21.295]                             version <- utils::packageVersion("future")
[16:05:21.295]                         }
[16:05:21.295]                         else {
[16:05:21.295]                           version <- NULL
[16:05:21.295]                         }
[16:05:21.295]                         if (!has_future || version < "1.8.0") {
[16:05:21.295]                           info <- base::c(r_version = base::gsub("R version ", 
[16:05:21.295]                             "", base::R.version$version.string), 
[16:05:21.295]                             platform = base::sprintf("%s (%s-bit)", 
[16:05:21.295]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:05:21.295]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[16:05:21.295]                               "release", "version")], collapse = " "), 
[16:05:21.295]                             hostname = base::Sys.info()[["nodename"]])
[16:05:21.295]                           info <- base::sprintf("%s: %s", base::names(info), 
[16:05:21.295]                             info)
[16:05:21.295]                           info <- base::paste(info, collapse = "; ")
[16:05:21.295]                           if (!has_future) {
[16:05:21.295]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:05:21.295]                               info)
[16:05:21.295]                           }
[16:05:21.295]                           else {
[16:05:21.295]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:05:21.295]                               info, version)
[16:05:21.295]                           }
[16:05:21.295]                           base::stop(msg)
[16:05:21.295]                         }
[16:05:21.295]                       })
[16:05:21.295]                     }
[16:05:21.295]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[16:05:21.295]                     base::options(mc.cores = 1L)
[16:05:21.295]                   }
[16:05:21.295]                   options(future.plan = NULL)
[16:05:21.295]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:05:21.295]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:05:21.295]                 }
[16:05:21.295]                 ...future.workdir <- getwd()
[16:05:21.295]             }
[16:05:21.295]             ...future.oldOptions <- base::as.list(base::.Options)
[16:05:21.295]             ...future.oldEnvVars <- base::Sys.getenv()
[16:05:21.295]         }
[16:05:21.295]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:05:21.295]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:05:21.295]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:05:21.295]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:05:21.295]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:05:21.295]             future.stdout.windows.reencode = NULL, width = 80L)
[16:05:21.295]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:05:21.295]             base::names(...future.oldOptions))
[16:05:21.295]     }
[16:05:21.295]     if (FALSE) {
[16:05:21.295]     }
[16:05:21.295]     else {
[16:05:21.295]         if (TRUE) {
[16:05:21.295]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:05:21.295]                 open = "w")
[16:05:21.295]         }
[16:05:21.295]         else {
[16:05:21.295]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:05:21.295]                 windows = "NUL", "/dev/null"), open = "w")
[16:05:21.295]         }
[16:05:21.295]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:05:21.295]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:05:21.295]             base::sink(type = "output", split = FALSE)
[16:05:21.295]             base::close(...future.stdout)
[16:05:21.295]         }, add = TRUE)
[16:05:21.295]     }
[16:05:21.295]     ...future.frame <- base::sys.nframe()
[16:05:21.295]     ...future.conditions <- base::list()
[16:05:21.295]     ...future.rng <- base::globalenv()$.Random.seed
[16:05:21.295]     if (FALSE) {
[16:05:21.295]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:05:21.295]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:05:21.295]     }
[16:05:21.295]     ...future.result <- base::tryCatch({
[16:05:21.295]         base::withCallingHandlers({
[16:05:21.295]             ...future.value <- base::withVisible(base::local({
[16:05:21.295]                 ...future.makeSendCondition <- base::local({
[16:05:21.295]                   sendCondition <- NULL
[16:05:21.295]                   function(frame = 1L) {
[16:05:21.295]                     if (is.function(sendCondition)) 
[16:05:21.295]                       return(sendCondition)
[16:05:21.295]                     ns <- getNamespace("parallel")
[16:05:21.295]                     if (exists("sendData", mode = "function", 
[16:05:21.295]                       envir = ns)) {
[16:05:21.295]                       parallel_sendData <- get("sendData", mode = "function", 
[16:05:21.295]                         envir = ns)
[16:05:21.295]                       envir <- sys.frame(frame)
[16:05:21.295]                       master <- NULL
[16:05:21.295]                       while (!identical(envir, .GlobalEnv) && 
[16:05:21.295]                         !identical(envir, emptyenv())) {
[16:05:21.295]                         if (exists("master", mode = "list", envir = envir, 
[16:05:21.295]                           inherits = FALSE)) {
[16:05:21.295]                           master <- get("master", mode = "list", 
[16:05:21.295]                             envir = envir, inherits = FALSE)
[16:05:21.295]                           if (inherits(master, c("SOCKnode", 
[16:05:21.295]                             "SOCK0node"))) {
[16:05:21.295]                             sendCondition <<- function(cond) {
[16:05:21.295]                               data <- list(type = "VALUE", value = cond, 
[16:05:21.295]                                 success = TRUE)
[16:05:21.295]                               parallel_sendData(master, data)
[16:05:21.295]                             }
[16:05:21.295]                             return(sendCondition)
[16:05:21.295]                           }
[16:05:21.295]                         }
[16:05:21.295]                         frame <- frame + 1L
[16:05:21.295]                         envir <- sys.frame(frame)
[16:05:21.295]                       }
[16:05:21.295]                     }
[16:05:21.295]                     sendCondition <<- function(cond) NULL
[16:05:21.295]                   }
[16:05:21.295]                 })
[16:05:21.295]                 withCallingHandlers({
[16:05:21.295]                   {
[16:05:21.295]                     ii
[16:05:21.295]                   }
[16:05:21.295]                 }, immediateCondition = function(cond) {
[16:05:21.295]                   sendCondition <- ...future.makeSendCondition()
[16:05:21.295]                   sendCondition(cond)
[16:05:21.295]                   muffleCondition <- function (cond, pattern = "^muffle") 
[16:05:21.295]                   {
[16:05:21.295]                     inherits <- base::inherits
[16:05:21.295]                     invokeRestart <- base::invokeRestart
[16:05:21.295]                     is.null <- base::is.null
[16:05:21.295]                     muffled <- FALSE
[16:05:21.295]                     if (inherits(cond, "message")) {
[16:05:21.295]                       muffled <- grepl(pattern, "muffleMessage")
[16:05:21.295]                       if (muffled) 
[16:05:21.295]                         invokeRestart("muffleMessage")
[16:05:21.295]                     }
[16:05:21.295]                     else if (inherits(cond, "warning")) {
[16:05:21.295]                       muffled <- grepl(pattern, "muffleWarning")
[16:05:21.295]                       if (muffled) 
[16:05:21.295]                         invokeRestart("muffleWarning")
[16:05:21.295]                     }
[16:05:21.295]                     else if (inherits(cond, "condition")) {
[16:05:21.295]                       if (!is.null(pattern)) {
[16:05:21.295]                         computeRestarts <- base::computeRestarts
[16:05:21.295]                         grepl <- base::grepl
[16:05:21.295]                         restarts <- computeRestarts(cond)
[16:05:21.295]                         for (restart in restarts) {
[16:05:21.295]                           name <- restart$name
[16:05:21.295]                           if (is.null(name)) 
[16:05:21.295]                             next
[16:05:21.295]                           if (!grepl(pattern, name)) 
[16:05:21.295]                             next
[16:05:21.295]                           invokeRestart(restart)
[16:05:21.295]                           muffled <- TRUE
[16:05:21.295]                           break
[16:05:21.295]                         }
[16:05:21.295]                       }
[16:05:21.295]                     }
[16:05:21.295]                     invisible(muffled)
[16:05:21.295]                   }
[16:05:21.295]                   muffleCondition(cond)
[16:05:21.295]                 })
[16:05:21.295]             }))
[16:05:21.295]             future::FutureResult(value = ...future.value$value, 
[16:05:21.295]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:05:21.295]                   ...future.rng), globalenv = if (FALSE) 
[16:05:21.295]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:05:21.295]                     ...future.globalenv.names))
[16:05:21.295]                 else NULL, started = ...future.startTime, version = "1.8")
[16:05:21.295]         }, condition = base::local({
[16:05:21.295]             c <- base::c
[16:05:21.295]             inherits <- base::inherits
[16:05:21.295]             invokeRestart <- base::invokeRestart
[16:05:21.295]             length <- base::length
[16:05:21.295]             list <- base::list
[16:05:21.295]             seq.int <- base::seq.int
[16:05:21.295]             signalCondition <- base::signalCondition
[16:05:21.295]             sys.calls <- base::sys.calls
[16:05:21.295]             `[[` <- base::`[[`
[16:05:21.295]             `+` <- base::`+`
[16:05:21.295]             `<<-` <- base::`<<-`
[16:05:21.295]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:05:21.295]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:05:21.295]                   3L)]
[16:05:21.295]             }
[16:05:21.295]             function(cond) {
[16:05:21.295]                 is_error <- inherits(cond, "error")
[16:05:21.295]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:05:21.295]                   NULL)
[16:05:21.295]                 if (is_error) {
[16:05:21.295]                   sessionInformation <- function() {
[16:05:21.295]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:05:21.295]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:05:21.295]                       search = base::search(), system = base::Sys.info())
[16:05:21.295]                   }
[16:05:21.295]                   ...future.conditions[[length(...future.conditions) + 
[16:05:21.295]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:05:21.295]                     cond$call), session = sessionInformation(), 
[16:05:21.295]                     timestamp = base::Sys.time(), signaled = 0L)
[16:05:21.295]                   signalCondition(cond)
[16:05:21.295]                 }
[16:05:21.295]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:05:21.295]                 "immediateCondition"))) {
[16:05:21.295]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:05:21.295]                   ...future.conditions[[length(...future.conditions) + 
[16:05:21.295]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:05:21.295]                   if (TRUE && !signal) {
[16:05:21.295]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:05:21.295]                     {
[16:05:21.295]                       inherits <- base::inherits
[16:05:21.295]                       invokeRestart <- base::invokeRestart
[16:05:21.295]                       is.null <- base::is.null
[16:05:21.295]                       muffled <- FALSE
[16:05:21.295]                       if (inherits(cond, "message")) {
[16:05:21.295]                         muffled <- grepl(pattern, "muffleMessage")
[16:05:21.295]                         if (muffled) 
[16:05:21.295]                           invokeRestart("muffleMessage")
[16:05:21.295]                       }
[16:05:21.295]                       else if (inherits(cond, "warning")) {
[16:05:21.295]                         muffled <- grepl(pattern, "muffleWarning")
[16:05:21.295]                         if (muffled) 
[16:05:21.295]                           invokeRestart("muffleWarning")
[16:05:21.295]                       }
[16:05:21.295]                       else if (inherits(cond, "condition")) {
[16:05:21.295]                         if (!is.null(pattern)) {
[16:05:21.295]                           computeRestarts <- base::computeRestarts
[16:05:21.295]                           grepl <- base::grepl
[16:05:21.295]                           restarts <- computeRestarts(cond)
[16:05:21.295]                           for (restart in restarts) {
[16:05:21.295]                             name <- restart$name
[16:05:21.295]                             if (is.null(name)) 
[16:05:21.295]                               next
[16:05:21.295]                             if (!grepl(pattern, name)) 
[16:05:21.295]                               next
[16:05:21.295]                             invokeRestart(restart)
[16:05:21.295]                             muffled <- TRUE
[16:05:21.295]                             break
[16:05:21.295]                           }
[16:05:21.295]                         }
[16:05:21.295]                       }
[16:05:21.295]                       invisible(muffled)
[16:05:21.295]                     }
[16:05:21.295]                     muffleCondition(cond, pattern = "^muffle")
[16:05:21.295]                   }
[16:05:21.295]                 }
[16:05:21.295]                 else {
[16:05:21.295]                   if (TRUE) {
[16:05:21.295]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:05:21.295]                     {
[16:05:21.295]                       inherits <- base::inherits
[16:05:21.295]                       invokeRestart <- base::invokeRestart
[16:05:21.295]                       is.null <- base::is.null
[16:05:21.295]                       muffled <- FALSE
[16:05:21.295]                       if (inherits(cond, "message")) {
[16:05:21.295]                         muffled <- grepl(pattern, "muffleMessage")
[16:05:21.295]                         if (muffled) 
[16:05:21.295]                           invokeRestart("muffleMessage")
[16:05:21.295]                       }
[16:05:21.295]                       else if (inherits(cond, "warning")) {
[16:05:21.295]                         muffled <- grepl(pattern, "muffleWarning")
[16:05:21.295]                         if (muffled) 
[16:05:21.295]                           invokeRestart("muffleWarning")
[16:05:21.295]                       }
[16:05:21.295]                       else if (inherits(cond, "condition")) {
[16:05:21.295]                         if (!is.null(pattern)) {
[16:05:21.295]                           computeRestarts <- base::computeRestarts
[16:05:21.295]                           grepl <- base::grepl
[16:05:21.295]                           restarts <- computeRestarts(cond)
[16:05:21.295]                           for (restart in restarts) {
[16:05:21.295]                             name <- restart$name
[16:05:21.295]                             if (is.null(name)) 
[16:05:21.295]                               next
[16:05:21.295]                             if (!grepl(pattern, name)) 
[16:05:21.295]                               next
[16:05:21.295]                             invokeRestart(restart)
[16:05:21.295]                             muffled <- TRUE
[16:05:21.295]                             break
[16:05:21.295]                           }
[16:05:21.295]                         }
[16:05:21.295]                       }
[16:05:21.295]                       invisible(muffled)
[16:05:21.295]                     }
[16:05:21.295]                     muffleCondition(cond, pattern = "^muffle")
[16:05:21.295]                   }
[16:05:21.295]                 }
[16:05:21.295]             }
[16:05:21.295]         }))
[16:05:21.295]     }, error = function(ex) {
[16:05:21.295]         base::structure(base::list(value = NULL, visible = NULL, 
[16:05:21.295]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:05:21.295]                 ...future.rng), started = ...future.startTime, 
[16:05:21.295]             finished = Sys.time(), session_uuid = NA_character_, 
[16:05:21.295]             version = "1.8"), class = "FutureResult")
[16:05:21.295]     }, finally = {
[16:05:21.295]         if (!identical(...future.workdir, getwd())) 
[16:05:21.295]             setwd(...future.workdir)
[16:05:21.295]         {
[16:05:21.295]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:05:21.295]                 ...future.oldOptions$nwarnings <- NULL
[16:05:21.295]             }
[16:05:21.295]             base::options(...future.oldOptions)
[16:05:21.295]             if (.Platform$OS.type == "windows") {
[16:05:21.295]                 old_names <- names(...future.oldEnvVars)
[16:05:21.295]                 envs <- base::Sys.getenv()
[16:05:21.295]                 names <- names(envs)
[16:05:21.295]                 common <- intersect(names, old_names)
[16:05:21.295]                 added <- setdiff(names, old_names)
[16:05:21.295]                 removed <- setdiff(old_names, names)
[16:05:21.295]                 changed <- common[...future.oldEnvVars[common] != 
[16:05:21.295]                   envs[common]]
[16:05:21.295]                 NAMES <- toupper(changed)
[16:05:21.295]                 args <- list()
[16:05:21.295]                 for (kk in seq_along(NAMES)) {
[16:05:21.295]                   name <- changed[[kk]]
[16:05:21.295]                   NAME <- NAMES[[kk]]
[16:05:21.295]                   if (name != NAME && is.element(NAME, old_names)) 
[16:05:21.295]                     next
[16:05:21.295]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:05:21.295]                 }
[16:05:21.295]                 NAMES <- toupper(added)
[16:05:21.295]                 for (kk in seq_along(NAMES)) {
[16:05:21.295]                   name <- added[[kk]]
[16:05:21.295]                   NAME <- NAMES[[kk]]
[16:05:21.295]                   if (name != NAME && is.element(NAME, old_names)) 
[16:05:21.295]                     next
[16:05:21.295]                   args[[name]] <- ""
[16:05:21.295]                 }
[16:05:21.295]                 NAMES <- toupper(removed)
[16:05:21.295]                 for (kk in seq_along(NAMES)) {
[16:05:21.295]                   name <- removed[[kk]]
[16:05:21.295]                   NAME <- NAMES[[kk]]
[16:05:21.295]                   if (name != NAME && is.element(NAME, old_names)) 
[16:05:21.295]                     next
[16:05:21.295]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:05:21.295]                 }
[16:05:21.295]                 if (length(args) > 0) 
[16:05:21.295]                   base::do.call(base::Sys.setenv, args = args)
[16:05:21.295]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:05:21.295]             }
[16:05:21.295]             else {
[16:05:21.295]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:05:21.295]             }
[16:05:21.295]             {
[16:05:21.295]                 if (base::length(...future.futureOptionsAdded) > 
[16:05:21.295]                   0L) {
[16:05:21.295]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:05:21.295]                   base::names(opts) <- ...future.futureOptionsAdded
[16:05:21.295]                   base::options(opts)
[16:05:21.295]                 }
[16:05:21.295]                 {
[16:05:21.295]                   {
[16:05:21.295]                     base::options(mc.cores = ...future.mc.cores.old)
[16:05:21.295]                     NULL
[16:05:21.295]                   }
[16:05:21.295]                   options(future.plan = NULL)
[16:05:21.295]                   if (is.na(NA_character_)) 
[16:05:21.295]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:05:21.295]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:05:21.295]                   future::plan(list(function (..., envir = parent.frame()) 
[16:05:21.295]                   {
[16:05:21.295]                     future <- SequentialFuture(..., envir = envir)
[16:05:21.295]                     if (!future$lazy) 
[16:05:21.295]                       future <- run(future)
[16:05:21.295]                     invisible(future)
[16:05:21.295]                   }), .cleanup = FALSE, .init = FALSE)
[16:05:21.295]                 }
[16:05:21.295]             }
[16:05:21.295]         }
[16:05:21.295]     })
[16:05:21.295]     if (TRUE) {
[16:05:21.295]         base::sink(type = "output", split = FALSE)
[16:05:21.295]         if (TRUE) {
[16:05:21.295]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:05:21.295]         }
[16:05:21.295]         else {
[16:05:21.295]             ...future.result["stdout"] <- base::list(NULL)
[16:05:21.295]         }
[16:05:21.295]         base::close(...future.stdout)
[16:05:21.295]         ...future.stdout <- NULL
[16:05:21.295]     }
[16:05:21.295]     ...future.result$conditions <- ...future.conditions
[16:05:21.295]     ...future.result$finished <- base::Sys.time()
[16:05:21.295]     ...future.result
[16:05:21.295] }
[16:05:21.298] Exporting 1 global objects (56 bytes) to cluster node #1 ...
[16:05:21.298] Exporting ‘ii’ (56 bytes) to cluster node #1 ...
[16:05:21.299] Exporting ‘ii’ (56 bytes) to cluster node #1 ... DONE
[16:05:21.299] Exporting 1 global objects (56 bytes) to cluster node #1 ... DONE
[16:05:21.300] MultisessionFuture started
 - Creating multisession future #1 ...
[16:05:21.303] getGlobalsAndPackages() ...
[16:05:21.304] Searching for globals...
[16:05:21.304] - globals found: [2] ‘{’, ‘ii’
[16:05:21.305] Searching for globals ... DONE
[16:05:21.305] Resolving globals: FALSE
[16:05:21.305] The total size of the 1 globals is 56 bytes (56 bytes)
[16:05:21.305] The total size of the 1 globals exported for future expression (‘{; ii; }’) is 56 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘ii’ (56 bytes of class ‘numeric’)
[16:05:21.306] - globals: [1] ‘ii’
[16:05:21.306] 
[16:05:21.306] getGlobalsAndPackages() ... DONE
[16:05:21.317] Packages needed by the future expression (n = 0): <none>
[16:05:21.317] Packages needed by future strategies (n = 0): <none>
[16:05:21.317] {
[16:05:21.317]     {
[16:05:21.317]         {
[16:05:21.317]             ...future.startTime <- base::Sys.time()
[16:05:21.317]             {
[16:05:21.317]                 {
[16:05:21.317]                   {
[16:05:21.317]                     {
[16:05:21.317]                       base::local({
[16:05:21.317]                         has_future <- base::requireNamespace("future", 
[16:05:21.317]                           quietly = TRUE)
[16:05:21.317]                         if (has_future) {
[16:05:21.317]                           ns <- base::getNamespace("future")
[16:05:21.317]                           version <- ns[[".package"]][["version"]]
[16:05:21.317]                           if (is.null(version)) 
[16:05:21.317]                             version <- utils::packageVersion("future")
[16:05:21.317]                         }
[16:05:21.317]                         else {
[16:05:21.317]                           version <- NULL
[16:05:21.317]                         }
[16:05:21.317]                         if (!has_future || version < "1.8.0") {
[16:05:21.317]                           info <- base::c(r_version = base::gsub("R version ", 
[16:05:21.317]                             "", base::R.version$version.string), 
[16:05:21.317]                             platform = base::sprintf("%s (%s-bit)", 
[16:05:21.317]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:05:21.317]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[16:05:21.317]                               "release", "version")], collapse = " "), 
[16:05:21.317]                             hostname = base::Sys.info()[["nodename"]])
[16:05:21.317]                           info <- base::sprintf("%s: %s", base::names(info), 
[16:05:21.317]                             info)
[16:05:21.317]                           info <- base::paste(info, collapse = "; ")
[16:05:21.317]                           if (!has_future) {
[16:05:21.317]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:05:21.317]                               info)
[16:05:21.317]                           }
[16:05:21.317]                           else {
[16:05:21.317]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:05:21.317]                               info, version)
[16:05:21.317]                           }
[16:05:21.317]                           base::stop(msg)
[16:05:21.317]                         }
[16:05:21.317]                       })
[16:05:21.317]                     }
[16:05:21.317]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[16:05:21.317]                     base::options(mc.cores = 1L)
[16:05:21.317]                   }
[16:05:21.317]                   options(future.plan = NULL)
[16:05:21.317]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:05:21.317]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:05:21.317]                 }
[16:05:21.317]                 ...future.workdir <- getwd()
[16:05:21.317]             }
[16:05:21.317]             ...future.oldOptions <- base::as.list(base::.Options)
[16:05:21.317]             ...future.oldEnvVars <- base::Sys.getenv()
[16:05:21.317]         }
[16:05:21.317]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:05:21.317]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:05:21.317]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:05:21.317]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:05:21.317]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:05:21.317]             future.stdout.windows.reencode = NULL, width = 80L)
[16:05:21.317]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:05:21.317]             base::names(...future.oldOptions))
[16:05:21.317]     }
[16:05:21.317]     if (FALSE) {
[16:05:21.317]     }
[16:05:21.317]     else {
[16:05:21.317]         if (TRUE) {
[16:05:21.317]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:05:21.317]                 open = "w")
[16:05:21.317]         }
[16:05:21.317]         else {
[16:05:21.317]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:05:21.317]                 windows = "NUL", "/dev/null"), open = "w")
[16:05:21.317]         }
[16:05:21.317]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:05:21.317]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:05:21.317]             base::sink(type = "output", split = FALSE)
[16:05:21.317]             base::close(...future.stdout)
[16:05:21.317]         }, add = TRUE)
[16:05:21.317]     }
[16:05:21.317]     ...future.frame <- base::sys.nframe()
[16:05:21.317]     ...future.conditions <- base::list()
[16:05:21.317]     ...future.rng <- base::globalenv()$.Random.seed
[16:05:21.317]     if (FALSE) {
[16:05:21.317]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:05:21.317]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:05:21.317]     }
[16:05:21.317]     ...future.result <- base::tryCatch({
[16:05:21.317]         base::withCallingHandlers({
[16:05:21.317]             ...future.value <- base::withVisible(base::local({
[16:05:21.317]                 ...future.makeSendCondition <- base::local({
[16:05:21.317]                   sendCondition <- NULL
[16:05:21.317]                   function(frame = 1L) {
[16:05:21.317]                     if (is.function(sendCondition)) 
[16:05:21.317]                       return(sendCondition)
[16:05:21.317]                     ns <- getNamespace("parallel")
[16:05:21.317]                     if (exists("sendData", mode = "function", 
[16:05:21.317]                       envir = ns)) {
[16:05:21.317]                       parallel_sendData <- get("sendData", mode = "function", 
[16:05:21.317]                         envir = ns)
[16:05:21.317]                       envir <- sys.frame(frame)
[16:05:21.317]                       master <- NULL
[16:05:21.317]                       while (!identical(envir, .GlobalEnv) && 
[16:05:21.317]                         !identical(envir, emptyenv())) {
[16:05:21.317]                         if (exists("master", mode = "list", envir = envir, 
[16:05:21.317]                           inherits = FALSE)) {
[16:05:21.317]                           master <- get("master", mode = "list", 
[16:05:21.317]                             envir = envir, inherits = FALSE)
[16:05:21.317]                           if (inherits(master, c("SOCKnode", 
[16:05:21.317]                             "SOCK0node"))) {
[16:05:21.317]                             sendCondition <<- function(cond) {
[16:05:21.317]                               data <- list(type = "VALUE", value = cond, 
[16:05:21.317]                                 success = TRUE)
[16:05:21.317]                               parallel_sendData(master, data)
[16:05:21.317]                             }
[16:05:21.317]                             return(sendCondition)
[16:05:21.317]                           }
[16:05:21.317]                         }
[16:05:21.317]                         frame <- frame + 1L
[16:05:21.317]                         envir <- sys.frame(frame)
[16:05:21.317]                       }
[16:05:21.317]                     }
[16:05:21.317]                     sendCondition <<- function(cond) NULL
[16:05:21.317]                   }
[16:05:21.317]                 })
[16:05:21.317]                 withCallingHandlers({
[16:05:21.317]                   {
[16:05:21.317]                     ii
[16:05:21.317]                   }
[16:05:21.317]                 }, immediateCondition = function(cond) {
[16:05:21.317]                   sendCondition <- ...future.makeSendCondition()
[16:05:21.317]                   sendCondition(cond)
[16:05:21.317]                   muffleCondition <- function (cond, pattern = "^muffle") 
[16:05:21.317]                   {
[16:05:21.317]                     inherits <- base::inherits
[16:05:21.317]                     invokeRestart <- base::invokeRestart
[16:05:21.317]                     is.null <- base::is.null
[16:05:21.317]                     muffled <- FALSE
[16:05:21.317]                     if (inherits(cond, "message")) {
[16:05:21.317]                       muffled <- grepl(pattern, "muffleMessage")
[16:05:21.317]                       if (muffled) 
[16:05:21.317]                         invokeRestart("muffleMessage")
[16:05:21.317]                     }
[16:05:21.317]                     else if (inherits(cond, "warning")) {
[16:05:21.317]                       muffled <- grepl(pattern, "muffleWarning")
[16:05:21.317]                       if (muffled) 
[16:05:21.317]                         invokeRestart("muffleWarning")
[16:05:21.317]                     }
[16:05:21.317]                     else if (inherits(cond, "condition")) {
[16:05:21.317]                       if (!is.null(pattern)) {
[16:05:21.317]                         computeRestarts <- base::computeRestarts
[16:05:21.317]                         grepl <- base::grepl
[16:05:21.317]                         restarts <- computeRestarts(cond)
[16:05:21.317]                         for (restart in restarts) {
[16:05:21.317]                           name <- restart$name
[16:05:21.317]                           if (is.null(name)) 
[16:05:21.317]                             next
[16:05:21.317]                           if (!grepl(pattern, name)) 
[16:05:21.317]                             next
[16:05:21.317]                           invokeRestart(restart)
[16:05:21.317]                           muffled <- TRUE
[16:05:21.317]                           break
[16:05:21.317]                         }
[16:05:21.317]                       }
[16:05:21.317]                     }
[16:05:21.317]                     invisible(muffled)
[16:05:21.317]                   }
[16:05:21.317]                   muffleCondition(cond)
[16:05:21.317]                 })
[16:05:21.317]             }))
[16:05:21.317]             future::FutureResult(value = ...future.value$value, 
[16:05:21.317]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:05:21.317]                   ...future.rng), globalenv = if (FALSE) 
[16:05:21.317]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:05:21.317]                     ...future.globalenv.names))
[16:05:21.317]                 else NULL, started = ...future.startTime, version = "1.8")
[16:05:21.317]         }, condition = base::local({
[16:05:21.317]             c <- base::c
[16:05:21.317]             inherits <- base::inherits
[16:05:21.317]             invokeRestart <- base::invokeRestart
[16:05:21.317]             length <- base::length
[16:05:21.317]             list <- base::list
[16:05:21.317]             seq.int <- base::seq.int
[16:05:21.317]             signalCondition <- base::signalCondition
[16:05:21.317]             sys.calls <- base::sys.calls
[16:05:21.317]             `[[` <- base::`[[`
[16:05:21.317]             `+` <- base::`+`
[16:05:21.317]             `<<-` <- base::`<<-`
[16:05:21.317]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:05:21.317]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:05:21.317]                   3L)]
[16:05:21.317]             }
[16:05:21.317]             function(cond) {
[16:05:21.317]                 is_error <- inherits(cond, "error")
[16:05:21.317]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:05:21.317]                   NULL)
[16:05:21.317]                 if (is_error) {
[16:05:21.317]                   sessionInformation <- function() {
[16:05:21.317]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:05:21.317]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:05:21.317]                       search = base::search(), system = base::Sys.info())
[16:05:21.317]                   }
[16:05:21.317]                   ...future.conditions[[length(...future.conditions) + 
[16:05:21.317]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:05:21.317]                     cond$call), session = sessionInformation(), 
[16:05:21.317]                     timestamp = base::Sys.time(), signaled = 0L)
[16:05:21.317]                   signalCondition(cond)
[16:05:21.317]                 }
[16:05:21.317]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:05:21.317]                 "immediateCondition"))) {
[16:05:21.317]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:05:21.317]                   ...future.conditions[[length(...future.conditions) + 
[16:05:21.317]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:05:21.317]                   if (TRUE && !signal) {
[16:05:21.317]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:05:21.317]                     {
[16:05:21.317]                       inherits <- base::inherits
[16:05:21.317]                       invokeRestart <- base::invokeRestart
[16:05:21.317]                       is.null <- base::is.null
[16:05:21.317]                       muffled <- FALSE
[16:05:21.317]                       if (inherits(cond, "message")) {
[16:05:21.317]                         muffled <- grepl(pattern, "muffleMessage")
[16:05:21.317]                         if (muffled) 
[16:05:21.317]                           invokeRestart("muffleMessage")
[16:05:21.317]                       }
[16:05:21.317]                       else if (inherits(cond, "warning")) {
[16:05:21.317]                         muffled <- grepl(pattern, "muffleWarning")
[16:05:21.317]                         if (muffled) 
[16:05:21.317]                           invokeRestart("muffleWarning")
[16:05:21.317]                       }
[16:05:21.317]                       else if (inherits(cond, "condition")) {
[16:05:21.317]                         if (!is.null(pattern)) {
[16:05:21.317]                           computeRestarts <- base::computeRestarts
[16:05:21.317]                           grepl <- base::grepl
[16:05:21.317]                           restarts <- computeRestarts(cond)
[16:05:21.317]                           for (restart in restarts) {
[16:05:21.317]                             name <- restart$name
[16:05:21.317]                             if (is.null(name)) 
[16:05:21.317]                               next
[16:05:21.317]                             if (!grepl(pattern, name)) 
[16:05:21.317]                               next
[16:05:21.317]                             invokeRestart(restart)
[16:05:21.317]                             muffled <- TRUE
[16:05:21.317]                             break
[16:05:21.317]                           }
[16:05:21.317]                         }
[16:05:21.317]                       }
[16:05:21.317]                       invisible(muffled)
[16:05:21.317]                     }
[16:05:21.317]                     muffleCondition(cond, pattern = "^muffle")
[16:05:21.317]                   }
[16:05:21.317]                 }
[16:05:21.317]                 else {
[16:05:21.317]                   if (TRUE) {
[16:05:21.317]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:05:21.317]                     {
[16:05:21.317]                       inherits <- base::inherits
[16:05:21.317]                       invokeRestart <- base::invokeRestart
[16:05:21.317]                       is.null <- base::is.null
[16:05:21.317]                       muffled <- FALSE
[16:05:21.317]                       if (inherits(cond, "message")) {
[16:05:21.317]                         muffled <- grepl(pattern, "muffleMessage")
[16:05:21.317]                         if (muffled) 
[16:05:21.317]                           invokeRestart("muffleMessage")
[16:05:21.317]                       }
[16:05:21.317]                       else if (inherits(cond, "warning")) {
[16:05:21.317]                         muffled <- grepl(pattern, "muffleWarning")
[16:05:21.317]                         if (muffled) 
[16:05:21.317]                           invokeRestart("muffleWarning")
[16:05:21.317]                       }
[16:05:21.317]                       else if (inherits(cond, "condition")) {
[16:05:21.317]                         if (!is.null(pattern)) {
[16:05:21.317]                           computeRestarts <- base::computeRestarts
[16:05:21.317]                           grepl <- base::grepl
[16:05:21.317]                           restarts <- computeRestarts(cond)
[16:05:21.317]                           for (restart in restarts) {
[16:05:21.317]                             name <- restart$name
[16:05:21.317]                             if (is.null(name)) 
[16:05:21.317]                               next
[16:05:21.317]                             if (!grepl(pattern, name)) 
[16:05:21.317]                               next
[16:05:21.317]                             invokeRestart(restart)
[16:05:21.317]                             muffled <- TRUE
[16:05:21.317]                             break
[16:05:21.317]                           }
[16:05:21.317]                         }
[16:05:21.317]                       }
[16:05:21.317]                       invisible(muffled)
[16:05:21.317]                     }
[16:05:21.317]                     muffleCondition(cond, pattern = "^muffle")
[16:05:21.317]                   }
[16:05:21.317]                 }
[16:05:21.317]             }
[16:05:21.317]         }))
[16:05:21.317]     }, error = function(ex) {
[16:05:21.317]         base::structure(base::list(value = NULL, visible = NULL, 
[16:05:21.317]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:05:21.317]                 ...future.rng), started = ...future.startTime, 
[16:05:21.317]             finished = Sys.time(), session_uuid = NA_character_, 
[16:05:21.317]             version = "1.8"), class = "FutureResult")
[16:05:21.317]     }, finally = {
[16:05:21.317]         if (!identical(...future.workdir, getwd())) 
[16:05:21.317]             setwd(...future.workdir)
[16:05:21.317]         {
[16:05:21.317]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:05:21.317]                 ...future.oldOptions$nwarnings <- NULL
[16:05:21.317]             }
[16:05:21.317]             base::options(...future.oldOptions)
[16:05:21.317]             if (.Platform$OS.type == "windows") {
[16:05:21.317]                 old_names <- names(...future.oldEnvVars)
[16:05:21.317]                 envs <- base::Sys.getenv()
[16:05:21.317]                 names <- names(envs)
[16:05:21.317]                 common <- intersect(names, old_names)
[16:05:21.317]                 added <- setdiff(names, old_names)
[16:05:21.317]                 removed <- setdiff(old_names, names)
[16:05:21.317]                 changed <- common[...future.oldEnvVars[common] != 
[16:05:21.317]                   envs[common]]
[16:05:21.317]                 NAMES <- toupper(changed)
[16:05:21.317]                 args <- list()
[16:05:21.317]                 for (kk in seq_along(NAMES)) {
[16:05:21.317]                   name <- changed[[kk]]
[16:05:21.317]                   NAME <- NAMES[[kk]]
[16:05:21.317]                   if (name != NAME && is.element(NAME, old_names)) 
[16:05:21.317]                     next
[16:05:21.317]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:05:21.317]                 }
[16:05:21.317]                 NAMES <- toupper(added)
[16:05:21.317]                 for (kk in seq_along(NAMES)) {
[16:05:21.317]                   name <- added[[kk]]
[16:05:21.317]                   NAME <- NAMES[[kk]]
[16:05:21.317]                   if (name != NAME && is.element(NAME, old_names)) 
[16:05:21.317]                     next
[16:05:21.317]                   args[[name]] <- ""
[16:05:21.317]                 }
[16:05:21.317]                 NAMES <- toupper(removed)
[16:05:21.317]                 for (kk in seq_along(NAMES)) {
[16:05:21.317]                   name <- removed[[kk]]
[16:05:21.317]                   NAME <- NAMES[[kk]]
[16:05:21.317]                   if (name != NAME && is.element(NAME, old_names)) 
[16:05:21.317]                     next
[16:05:21.317]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:05:21.317]                 }
[16:05:21.317]                 if (length(args) > 0) 
[16:05:21.317]                   base::do.call(base::Sys.setenv, args = args)
[16:05:21.317]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:05:21.317]             }
[16:05:21.317]             else {
[16:05:21.317]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:05:21.317]             }
[16:05:21.317]             {
[16:05:21.317]                 if (base::length(...future.futureOptionsAdded) > 
[16:05:21.317]                   0L) {
[16:05:21.317]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:05:21.317]                   base::names(opts) <- ...future.futureOptionsAdded
[16:05:21.317]                   base::options(opts)
[16:05:21.317]                 }
[16:05:21.317]                 {
[16:05:21.317]                   {
[16:05:21.317]                     base::options(mc.cores = ...future.mc.cores.old)
[16:05:21.317]                     NULL
[16:05:21.317]                   }
[16:05:21.317]                   options(future.plan = NULL)
[16:05:21.317]                   if (is.na(NA_character_)) 
[16:05:21.317]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:05:21.317]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:05:21.317]                   future::plan(list(function (..., envir = parent.frame()) 
[16:05:21.317]                   {
[16:05:21.317]                     future <- SequentialFuture(..., envir = envir)
[16:05:21.317]                     if (!future$lazy) 
[16:05:21.317]                       future <- run(future)
[16:05:21.317]                     invisible(future)
[16:05:21.317]                   }), .cleanup = FALSE, .init = FALSE)
[16:05:21.317]                 }
[16:05:21.317]             }
[16:05:21.317]         }
[16:05:21.317]     })
[16:05:21.317]     if (TRUE) {
[16:05:21.317]         base::sink(type = "output", split = FALSE)
[16:05:21.317]         if (TRUE) {
[16:05:21.317]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:05:21.317]         }
[16:05:21.317]         else {
[16:05:21.317]             ...future.result["stdout"] <- base::list(NULL)
[16:05:21.317]         }
[16:05:21.317]         base::close(...future.stdout)
[16:05:21.317]         ...future.stdout <- NULL
[16:05:21.317]     }
[16:05:21.317]     ...future.result$conditions <- ...future.conditions
[16:05:21.317]     ...future.result$finished <- base::Sys.time()
[16:05:21.317]     ...future.result
[16:05:21.317] }
[16:05:21.371] Exporting 1 global objects (56 bytes) to cluster node #2 ...
[16:05:21.371] Exporting ‘ii’ (56 bytes) to cluster node #2 ...
[16:05:21.371] Exporting ‘ii’ (56 bytes) to cluster node #2 ... DONE
[16:05:21.372] Exporting 1 global objects (56 bytes) to cluster node #2 ... DONE
[16:05:21.372] MultisessionFuture started
 - Resolving 2 multisession futures
[16:05:21.373] result() for ClusterFuture ...
[16:05:21.373] receiveMessageFromWorker() for ClusterFuture ...
[16:05:21.373] - Validating connection of MultisessionFuture
[16:05:21.450] - received message: FutureResult
[16:05:21.450] - Received FutureResult
[16:05:21.451] - Erased future from FutureRegistry
[16:05:21.451] result() for ClusterFuture ...
[16:05:21.451] - result already collected: FutureResult
[16:05:21.451] result() for ClusterFuture ... done
[16:05:21.451] receiveMessageFromWorker() for ClusterFuture ... done
[16:05:21.451] result() for ClusterFuture ... done
[16:05:21.452] result() for ClusterFuture ...
[16:05:21.452] - result already collected: FutureResult
[16:05:21.452] result() for ClusterFuture ... done
[16:05:21.452] result() for ClusterFuture ...
[16:05:21.452] receiveMessageFromWorker() for ClusterFuture ...
[16:05:21.452] - Validating connection of MultisessionFuture
[16:05:21.452] - received message: FutureResult
[16:05:21.453] - Received FutureResult
[16:05:21.453] - Erased future from FutureRegistry
[16:05:21.453] result() for ClusterFuture ...
[16:05:21.453] - result already collected: FutureResult
[16:05:21.453] result() for ClusterFuture ... done
[16:05:21.453] receiveMessageFromWorker() for ClusterFuture ... done
[16:05:21.453] result() for ClusterFuture ... done
[16:05:21.453] result() for ClusterFuture ...
[16:05:21.454] - result already collected: FutureResult
[16:05:21.454] result() for ClusterFuture ... done
*** multisession() - workers inherit .libPaths()
[16:05:21.454] getGlobalsAndPackages() ...
[16:05:21.454] Searching for globals...
[16:05:21.455] - globals found: [1] ‘.libPaths’
[16:05:21.455] Searching for globals ... DONE
[16:05:21.455] Resolving globals: FALSE
[16:05:21.455] 
[16:05:21.455] 
[16:05:21.456] getGlobalsAndPackages() ... DONE
[16:05:21.456] run() for ‘Future’ ...
[16:05:21.456] - state: ‘created’
[16:05:21.456] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[16:05:21.456] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[16:05:21.457] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[16:05:21.457]   - Field: ‘label’
[16:05:21.457]   - Field: ‘local’
[16:05:21.457]   - Field: ‘owner’
[16:05:21.457]   - Field: ‘envir’
[16:05:21.457]   - Field: ‘packages’
[16:05:21.457]   - Field: ‘gc’
[16:05:21.457]   - Field: ‘conditions’
[16:05:21.458]   - Field: ‘expr’
[16:05:21.458]   - Field: ‘uuid’
[16:05:21.458]   - Field: ‘seed’
[16:05:21.458]   - Field: ‘version’
[16:05:21.458]   - Field: ‘result’
[16:05:21.458]   - Field: ‘asynchronous’
[16:05:21.458]   - Field: ‘calls’
[16:05:21.458]   - Field: ‘globals’
[16:05:21.458]   - Field: ‘stdout’
[16:05:21.459]   - Field: ‘earlySignal’
[16:05:21.459]   - Field: ‘lazy’
[16:05:21.459]   - Field: ‘state’
[16:05:21.459] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[16:05:21.459] - Launch lazy future ...
[16:05:21.459] Packages needed by the future expression (n = 0): <none>
[16:05:21.459] Packages needed by future strategies (n = 0): <none>
[16:05:21.460] {
[16:05:21.460]     {
[16:05:21.460]         {
[16:05:21.460]             ...future.startTime <- base::Sys.time()
[16:05:21.460]             {
[16:05:21.460]                 {
[16:05:21.460]                   {
[16:05:21.460]                     base::local({
[16:05:21.460]                       has_future <- base::requireNamespace("future", 
[16:05:21.460]                         quietly = TRUE)
[16:05:21.460]                       if (has_future) {
[16:05:21.460]                         ns <- base::getNamespace("future")
[16:05:21.460]                         version <- ns[[".package"]][["version"]]
[16:05:21.460]                         if (is.null(version)) 
[16:05:21.460]                           version <- utils::packageVersion("future")
[16:05:21.460]                       }
[16:05:21.460]                       else {
[16:05:21.460]                         version <- NULL
[16:05:21.460]                       }
[16:05:21.460]                       if (!has_future || version < "1.8.0") {
[16:05:21.460]                         info <- base::c(r_version = base::gsub("R version ", 
[16:05:21.460]                           "", base::R.version$version.string), 
[16:05:21.460]                           platform = base::sprintf("%s (%s-bit)", 
[16:05:21.460]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:05:21.460]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[16:05:21.460]                             "release", "version")], collapse = " "), 
[16:05:21.460]                           hostname = base::Sys.info()[["nodename"]])
[16:05:21.460]                         info <- base::sprintf("%s: %s", base::names(info), 
[16:05:21.460]                           info)
[16:05:21.460]                         info <- base::paste(info, collapse = "; ")
[16:05:21.460]                         if (!has_future) {
[16:05:21.460]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:05:21.460]                             info)
[16:05:21.460]                         }
[16:05:21.460]                         else {
[16:05:21.460]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:05:21.460]                             info, version)
[16:05:21.460]                         }
[16:05:21.460]                         base::stop(msg)
[16:05:21.460]                       }
[16:05:21.460]                     })
[16:05:21.460]                   }
[16:05:21.460]                   options(future.plan = NULL)
[16:05:21.460]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:05:21.460]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:05:21.460]                 }
[16:05:21.460]                 ...future.workdir <- getwd()
[16:05:21.460]             }
[16:05:21.460]             ...future.oldOptions <- base::as.list(base::.Options)
[16:05:21.460]             ...future.oldEnvVars <- base::Sys.getenv()
[16:05:21.460]         }
[16:05:21.460]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:05:21.460]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:05:21.460]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:05:21.460]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:05:21.460]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:05:21.460]             future.stdout.windows.reencode = NULL, width = 80L)
[16:05:21.460]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:05:21.460]             base::names(...future.oldOptions))
[16:05:21.460]     }
[16:05:21.460]     if (FALSE) {
[16:05:21.460]     }
[16:05:21.460]     else {
[16:05:21.460]         if (TRUE) {
[16:05:21.460]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:05:21.460]                 open = "w")
[16:05:21.460]         }
[16:05:21.460]         else {
[16:05:21.460]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:05:21.460]                 windows = "NUL", "/dev/null"), open = "w")
[16:05:21.460]         }
[16:05:21.460]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:05:21.460]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:05:21.460]             base::sink(type = "output", split = FALSE)
[16:05:21.460]             base::close(...future.stdout)
[16:05:21.460]         }, add = TRUE)
[16:05:21.460]     }
[16:05:21.460]     ...future.frame <- base::sys.nframe()
[16:05:21.460]     ...future.conditions <- base::list()
[16:05:21.460]     ...future.rng <- base::globalenv()$.Random.seed
[16:05:21.460]     if (FALSE) {
[16:05:21.460]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:05:21.460]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:05:21.460]     }
[16:05:21.460]     ...future.result <- base::tryCatch({
[16:05:21.460]         base::withCallingHandlers({
[16:05:21.460]             ...future.value <- base::withVisible(base::local(.libPaths()))
[16:05:21.460]             future::FutureResult(value = ...future.value$value, 
[16:05:21.460]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:05:21.460]                   ...future.rng), globalenv = if (FALSE) 
[16:05:21.460]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:05:21.460]                     ...future.globalenv.names))
[16:05:21.460]                 else NULL, started = ...future.startTime, version = "1.8")
[16:05:21.460]         }, condition = base::local({
[16:05:21.460]             c <- base::c
[16:05:21.460]             inherits <- base::inherits
[16:05:21.460]             invokeRestart <- base::invokeRestart
[16:05:21.460]             length <- base::length
[16:05:21.460]             list <- base::list
[16:05:21.460]             seq.int <- base::seq.int
[16:05:21.460]             signalCondition <- base::signalCondition
[16:05:21.460]             sys.calls <- base::sys.calls
[16:05:21.460]             `[[` <- base::`[[`
[16:05:21.460]             `+` <- base::`+`
[16:05:21.460]             `<<-` <- base::`<<-`
[16:05:21.460]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:05:21.460]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:05:21.460]                   3L)]
[16:05:21.460]             }
[16:05:21.460]             function(cond) {
[16:05:21.460]                 is_error <- inherits(cond, "error")
[16:05:21.460]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:05:21.460]                   NULL)
[16:05:21.460]                 if (is_error) {
[16:05:21.460]                   sessionInformation <- function() {
[16:05:21.460]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:05:21.460]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:05:21.460]                       search = base::search(), system = base::Sys.info())
[16:05:21.460]                   }
[16:05:21.460]                   ...future.conditions[[length(...future.conditions) + 
[16:05:21.460]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:05:21.460]                     cond$call), session = sessionInformation(), 
[16:05:21.460]                     timestamp = base::Sys.time(), signaled = 0L)
[16:05:21.460]                   signalCondition(cond)
[16:05:21.460]                 }
[16:05:21.460]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:05:21.460]                 "immediateCondition"))) {
[16:05:21.460]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:05:21.460]                   ...future.conditions[[length(...future.conditions) + 
[16:05:21.460]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:05:21.460]                   if (TRUE && !signal) {
[16:05:21.460]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:05:21.460]                     {
[16:05:21.460]                       inherits <- base::inherits
[16:05:21.460]                       invokeRestart <- base::invokeRestart
[16:05:21.460]                       is.null <- base::is.null
[16:05:21.460]                       muffled <- FALSE
[16:05:21.460]                       if (inherits(cond, "message")) {
[16:05:21.460]                         muffled <- grepl(pattern, "muffleMessage")
[16:05:21.460]                         if (muffled) 
[16:05:21.460]                           invokeRestart("muffleMessage")
[16:05:21.460]                       }
[16:05:21.460]                       else if (inherits(cond, "warning")) {
[16:05:21.460]                         muffled <- grepl(pattern, "muffleWarning")
[16:05:21.460]                         if (muffled) 
[16:05:21.460]                           invokeRestart("muffleWarning")
[16:05:21.460]                       }
[16:05:21.460]                       else if (inherits(cond, "condition")) {
[16:05:21.460]                         if (!is.null(pattern)) {
[16:05:21.460]                           computeRestarts <- base::computeRestarts
[16:05:21.460]                           grepl <- base::grepl
[16:05:21.460]                           restarts <- computeRestarts(cond)
[16:05:21.460]                           for (restart in restarts) {
[16:05:21.460]                             name <- restart$name
[16:05:21.460]                             if (is.null(name)) 
[16:05:21.460]                               next
[16:05:21.460]                             if (!grepl(pattern, name)) 
[16:05:21.460]                               next
[16:05:21.460]                             invokeRestart(restart)
[16:05:21.460]                             muffled <- TRUE
[16:05:21.460]                             break
[16:05:21.460]                           }
[16:05:21.460]                         }
[16:05:21.460]                       }
[16:05:21.460]                       invisible(muffled)
[16:05:21.460]                     }
[16:05:21.460]                     muffleCondition(cond, pattern = "^muffle")
[16:05:21.460]                   }
[16:05:21.460]                 }
[16:05:21.460]                 else {
[16:05:21.460]                   if (TRUE) {
[16:05:21.460]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:05:21.460]                     {
[16:05:21.460]                       inherits <- base::inherits
[16:05:21.460]                       invokeRestart <- base::invokeRestart
[16:05:21.460]                       is.null <- base::is.null
[16:05:21.460]                       muffled <- FALSE
[16:05:21.460]                       if (inherits(cond, "message")) {
[16:05:21.460]                         muffled <- grepl(pattern, "muffleMessage")
[16:05:21.460]                         if (muffled) 
[16:05:21.460]                           invokeRestart("muffleMessage")
[16:05:21.460]                       }
[16:05:21.460]                       else if (inherits(cond, "warning")) {
[16:05:21.460]                         muffled <- grepl(pattern, "muffleWarning")
[16:05:21.460]                         if (muffled) 
[16:05:21.460]                           invokeRestart("muffleWarning")
[16:05:21.460]                       }
[16:05:21.460]                       else if (inherits(cond, "condition")) {
[16:05:21.460]                         if (!is.null(pattern)) {
[16:05:21.460]                           computeRestarts <- base::computeRestarts
[16:05:21.460]                           grepl <- base::grepl
[16:05:21.460]                           restarts <- computeRestarts(cond)
[16:05:21.460]                           for (restart in restarts) {
[16:05:21.460]                             name <- restart$name
[16:05:21.460]                             if (is.null(name)) 
[16:05:21.460]                               next
[16:05:21.460]                             if (!grepl(pattern, name)) 
[16:05:21.460]                               next
[16:05:21.460]                             invokeRestart(restart)
[16:05:21.460]                             muffled <- TRUE
[16:05:21.460]                             break
[16:05:21.460]                           }
[16:05:21.460]                         }
[16:05:21.460]                       }
[16:05:21.460]                       invisible(muffled)
[16:05:21.460]                     }
[16:05:21.460]                     muffleCondition(cond, pattern = "^muffle")
[16:05:21.460]                   }
[16:05:21.460]                 }
[16:05:21.460]             }
[16:05:21.460]         }))
[16:05:21.460]     }, error = function(ex) {
[16:05:21.460]         base::structure(base::list(value = NULL, visible = NULL, 
[16:05:21.460]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:05:21.460]                 ...future.rng), started = ...future.startTime, 
[16:05:21.460]             finished = Sys.time(), session_uuid = NA_character_, 
[16:05:21.460]             version = "1.8"), class = "FutureResult")
[16:05:21.460]     }, finally = {
[16:05:21.460]         if (!identical(...future.workdir, getwd())) 
[16:05:21.460]             setwd(...future.workdir)
[16:05:21.460]         {
[16:05:21.460]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:05:21.460]                 ...future.oldOptions$nwarnings <- NULL
[16:05:21.460]             }
[16:05:21.460]             base::options(...future.oldOptions)
[16:05:21.460]             if (.Platform$OS.type == "windows") {
[16:05:21.460]                 old_names <- names(...future.oldEnvVars)
[16:05:21.460]                 envs <- base::Sys.getenv()
[16:05:21.460]                 names <- names(envs)
[16:05:21.460]                 common <- intersect(names, old_names)
[16:05:21.460]                 added <- setdiff(names, old_names)
[16:05:21.460]                 removed <- setdiff(old_names, names)
[16:05:21.460]                 changed <- common[...future.oldEnvVars[common] != 
[16:05:21.460]                   envs[common]]
[16:05:21.460]                 NAMES <- toupper(changed)
[16:05:21.460]                 args <- list()
[16:05:21.460]                 for (kk in seq_along(NAMES)) {
[16:05:21.460]                   name <- changed[[kk]]
[16:05:21.460]                   NAME <- NAMES[[kk]]
[16:05:21.460]                   if (name != NAME && is.element(NAME, old_names)) 
[16:05:21.460]                     next
[16:05:21.460]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:05:21.460]                 }
[16:05:21.460]                 NAMES <- toupper(added)
[16:05:21.460]                 for (kk in seq_along(NAMES)) {
[16:05:21.460]                   name <- added[[kk]]
[16:05:21.460]                   NAME <- NAMES[[kk]]
[16:05:21.460]                   if (name != NAME && is.element(NAME, old_names)) 
[16:05:21.460]                     next
[16:05:21.460]                   args[[name]] <- ""
[16:05:21.460]                 }
[16:05:21.460]                 NAMES <- toupper(removed)
[16:05:21.460]                 for (kk in seq_along(NAMES)) {
[16:05:21.460]                   name <- removed[[kk]]
[16:05:21.460]                   NAME <- NAMES[[kk]]
[16:05:21.460]                   if (name != NAME && is.element(NAME, old_names)) 
[16:05:21.460]                     next
[16:05:21.460]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:05:21.460]                 }
[16:05:21.460]                 if (length(args) > 0) 
[16:05:21.460]                   base::do.call(base::Sys.setenv, args = args)
[16:05:21.460]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:05:21.460]             }
[16:05:21.460]             else {
[16:05:21.460]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:05:21.460]             }
[16:05:21.460]             {
[16:05:21.460]                 if (base::length(...future.futureOptionsAdded) > 
[16:05:21.460]                   0L) {
[16:05:21.460]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:05:21.460]                   base::names(opts) <- ...future.futureOptionsAdded
[16:05:21.460]                   base::options(opts)
[16:05:21.460]                 }
[16:05:21.460]                 {
[16:05:21.460]                   {
[16:05:21.460]                     NULL
[16:05:21.460]                     RNGkind("Mersenne-Twister")
[16:05:21.460]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[16:05:21.460]                       inherits = FALSE)
[16:05:21.460]                   }
[16:05:21.460]                   options(future.plan = NULL)
[16:05:21.460]                   if (is.na(NA_character_)) 
[16:05:21.460]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:05:21.460]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:05:21.460]                   future::plan(list(function (..., envir = parent.frame()) 
[16:05:21.460]                   {
[16:05:21.460]                     future <- SequentialFuture(..., envir = envir)
[16:05:21.460]                     if (!future$lazy) 
[16:05:21.460]                       future <- run(future)
[16:05:21.460]                     invisible(future)
[16:05:21.460]                   }), .cleanup = FALSE, .init = FALSE)
[16:05:21.460]                 }
[16:05:21.460]             }
[16:05:21.460]         }
[16:05:21.460]     })
[16:05:21.460]     if (TRUE) {
[16:05:21.460]         base::sink(type = "output", split = FALSE)
[16:05:21.460]         if (TRUE) {
[16:05:21.460]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:05:21.460]         }
[16:05:21.460]         else {
[16:05:21.460]             ...future.result["stdout"] <- base::list(NULL)
[16:05:21.460]         }
[16:05:21.460]         base::close(...future.stdout)
[16:05:21.460]         ...future.stdout <- NULL
[16:05:21.460]     }
[16:05:21.460]     ...future.result$conditions <- ...future.conditions
[16:05:21.460]     ...future.result$finished <- base::Sys.time()
[16:05:21.460]     ...future.result
[16:05:21.460] }
[16:05:21.462] plan(): Setting new future strategy stack:
[16:05:21.464] List of future strategies:
[16:05:21.464] 1. sequential:
[16:05:21.464]    - args: function (..., envir = parent.frame())
[16:05:21.464]    - tweaked: FALSE
[16:05:21.464]    - call: NULL
[16:05:21.465] plan(): nbrOfWorkers() = 1
[16:05:21.465] plan(): Setting new future strategy stack:
[16:05:21.465] List of future strategies:
[16:05:21.465] 1. sequential:
[16:05:21.465]    - args: function (..., envir = parent.frame())
[16:05:21.465]    - tweaked: FALSE
[16:05:21.465]    - call: future::plan("sequential")
[16:05:21.466] plan(): nbrOfWorkers() = 1
[16:05:21.466] SequentialFuture started (and completed)
[16:05:21.466] - Launch lazy future ... done
[16:05:21.466] run() for ‘SequentialFuture’ ... done
List of 2
 $ main   : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
 $ workers: chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
*** multisession() and errors
[16:05:21.470] getGlobalsAndPackages() ...
[16:05:21.470] 
[16:05:21.471] - globals: [0] <none>
[16:05:21.471] getGlobalsAndPackages() ... DONE
[16:05:21.481] Packages needed by the future expression (n = 0): <none>
[16:05:21.481] Packages needed by future strategies (n = 0): <none>
[16:05:21.482] {
[16:05:21.482]     {
[16:05:21.482]         {
[16:05:21.482]             ...future.startTime <- base::Sys.time()
[16:05:21.482]             {
[16:05:21.482]                 {
[16:05:21.482]                   {
[16:05:21.482]                     {
[16:05:21.482]                       base::local({
[16:05:21.482]                         has_future <- base::requireNamespace("future", 
[16:05:21.482]                           quietly = TRUE)
[16:05:21.482]                         if (has_future) {
[16:05:21.482]                           ns <- base::getNamespace("future")
[16:05:21.482]                           version <- ns[[".package"]][["version"]]
[16:05:21.482]                           if (is.null(version)) 
[16:05:21.482]                             version <- utils::packageVersion("future")
[16:05:21.482]                         }
[16:05:21.482]                         else {
[16:05:21.482]                           version <- NULL
[16:05:21.482]                         }
[16:05:21.482]                         if (!has_future || version < "1.8.0") {
[16:05:21.482]                           info <- base::c(r_version = base::gsub("R version ", 
[16:05:21.482]                             "", base::R.version$version.string), 
[16:05:21.482]                             platform = base::sprintf("%s (%s-bit)", 
[16:05:21.482]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:05:21.482]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[16:05:21.482]                               "release", "version")], collapse = " "), 
[16:05:21.482]                             hostname = base::Sys.info()[["nodename"]])
[16:05:21.482]                           info <- base::sprintf("%s: %s", base::names(info), 
[16:05:21.482]                             info)
[16:05:21.482]                           info <- base::paste(info, collapse = "; ")
[16:05:21.482]                           if (!has_future) {
[16:05:21.482]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:05:21.482]                               info)
[16:05:21.482]                           }
[16:05:21.482]                           else {
[16:05:21.482]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:05:21.482]                               info, version)
[16:05:21.482]                           }
[16:05:21.482]                           base::stop(msg)
[16:05:21.482]                         }
[16:05:21.482]                       })
[16:05:21.482]                     }
[16:05:21.482]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[16:05:21.482]                     base::options(mc.cores = 1L)
[16:05:21.482]                   }
[16:05:21.482]                   options(future.plan = NULL)
[16:05:21.482]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:05:21.482]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:05:21.482]                 }
[16:05:21.482]                 ...future.workdir <- getwd()
[16:05:21.482]             }
[16:05:21.482]             ...future.oldOptions <- base::as.list(base::.Options)
[16:05:21.482]             ...future.oldEnvVars <- base::Sys.getenv()
[16:05:21.482]         }
[16:05:21.482]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:05:21.482]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:05:21.482]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:05:21.482]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:05:21.482]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:05:21.482]             future.stdout.windows.reencode = NULL, width = 80L)
[16:05:21.482]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:05:21.482]             base::names(...future.oldOptions))
[16:05:21.482]     }
[16:05:21.482]     if (FALSE) {
[16:05:21.482]     }
[16:05:21.482]     else {
[16:05:21.482]         if (TRUE) {
[16:05:21.482]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:05:21.482]                 open = "w")
[16:05:21.482]         }
[16:05:21.482]         else {
[16:05:21.482]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:05:21.482]                 windows = "NUL", "/dev/null"), open = "w")
[16:05:21.482]         }
[16:05:21.482]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:05:21.482]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:05:21.482]             base::sink(type = "output", split = FALSE)
[16:05:21.482]             base::close(...future.stdout)
[16:05:21.482]         }, add = TRUE)
[16:05:21.482]     }
[16:05:21.482]     ...future.frame <- base::sys.nframe()
[16:05:21.482]     ...future.conditions <- base::list()
[16:05:21.482]     ...future.rng <- base::globalenv()$.Random.seed
[16:05:21.482]     if (FALSE) {
[16:05:21.482]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:05:21.482]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:05:21.482]     }
[16:05:21.482]     ...future.result <- base::tryCatch({
[16:05:21.482]         base::withCallingHandlers({
[16:05:21.482]             ...future.value <- base::withVisible(base::local({
[16:05:21.482]                 ...future.makeSendCondition <- base::local({
[16:05:21.482]                   sendCondition <- NULL
[16:05:21.482]                   function(frame = 1L) {
[16:05:21.482]                     if (is.function(sendCondition)) 
[16:05:21.482]                       return(sendCondition)
[16:05:21.482]                     ns <- getNamespace("parallel")
[16:05:21.482]                     if (exists("sendData", mode = "function", 
[16:05:21.482]                       envir = ns)) {
[16:05:21.482]                       parallel_sendData <- get("sendData", mode = "function", 
[16:05:21.482]                         envir = ns)
[16:05:21.482]                       envir <- sys.frame(frame)
[16:05:21.482]                       master <- NULL
[16:05:21.482]                       while (!identical(envir, .GlobalEnv) && 
[16:05:21.482]                         !identical(envir, emptyenv())) {
[16:05:21.482]                         if (exists("master", mode = "list", envir = envir, 
[16:05:21.482]                           inherits = FALSE)) {
[16:05:21.482]                           master <- get("master", mode = "list", 
[16:05:21.482]                             envir = envir, inherits = FALSE)
[16:05:21.482]                           if (inherits(master, c("SOCKnode", 
[16:05:21.482]                             "SOCK0node"))) {
[16:05:21.482]                             sendCondition <<- function(cond) {
[16:05:21.482]                               data <- list(type = "VALUE", value = cond, 
[16:05:21.482]                                 success = TRUE)
[16:05:21.482]                               parallel_sendData(master, data)
[16:05:21.482]                             }
[16:05:21.482]                             return(sendCondition)
[16:05:21.482]                           }
[16:05:21.482]                         }
[16:05:21.482]                         frame <- frame + 1L
[16:05:21.482]                         envir <- sys.frame(frame)
[16:05:21.482]                       }
[16:05:21.482]                     }
[16:05:21.482]                     sendCondition <<- function(cond) NULL
[16:05:21.482]                   }
[16:05:21.482]                 })
[16:05:21.482]                 withCallingHandlers({
[16:05:21.482]                   {
[16:05:21.482]                     stop("Whoops!")
[16:05:21.482]                     1
[16:05:21.482]                   }
[16:05:21.482]                 }, immediateCondition = function(cond) {
[16:05:21.482]                   sendCondition <- ...future.makeSendCondition()
[16:05:21.482]                   sendCondition(cond)
[16:05:21.482]                   muffleCondition <- function (cond, pattern = "^muffle") 
[16:05:21.482]                   {
[16:05:21.482]                     inherits <- base::inherits
[16:05:21.482]                     invokeRestart <- base::invokeRestart
[16:05:21.482]                     is.null <- base::is.null
[16:05:21.482]                     muffled <- FALSE
[16:05:21.482]                     if (inherits(cond, "message")) {
[16:05:21.482]                       muffled <- grepl(pattern, "muffleMessage")
[16:05:21.482]                       if (muffled) 
[16:05:21.482]                         invokeRestart("muffleMessage")
[16:05:21.482]                     }
[16:05:21.482]                     else if (inherits(cond, "warning")) {
[16:05:21.482]                       muffled <- grepl(pattern, "muffleWarning")
[16:05:21.482]                       if (muffled) 
[16:05:21.482]                         invokeRestart("muffleWarning")
[16:05:21.482]                     }
[16:05:21.482]                     else if (inherits(cond, "condition")) {
[16:05:21.482]                       if (!is.null(pattern)) {
[16:05:21.482]                         computeRestarts <- base::computeRestarts
[16:05:21.482]                         grepl <- base::grepl
[16:05:21.482]                         restarts <- computeRestarts(cond)
[16:05:21.482]                         for (restart in restarts) {
[16:05:21.482]                           name <- restart$name
[16:05:21.482]                           if (is.null(name)) 
[16:05:21.482]                             next
[16:05:21.482]                           if (!grepl(pattern, name)) 
[16:05:21.482]                             next
[16:05:21.482]                           invokeRestart(restart)
[16:05:21.482]                           muffled <- TRUE
[16:05:21.482]                           break
[16:05:21.482]                         }
[16:05:21.482]                       }
[16:05:21.482]                     }
[16:05:21.482]                     invisible(muffled)
[16:05:21.482]                   }
[16:05:21.482]                   muffleCondition(cond)
[16:05:21.482]                 })
[16:05:21.482]             }))
[16:05:21.482]             future::FutureResult(value = ...future.value$value, 
[16:05:21.482]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:05:21.482]                   ...future.rng), globalenv = if (FALSE) 
[16:05:21.482]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:05:21.482]                     ...future.globalenv.names))
[16:05:21.482]                 else NULL, started = ...future.startTime, version = "1.8")
[16:05:21.482]         }, condition = base::local({
[16:05:21.482]             c <- base::c
[16:05:21.482]             inherits <- base::inherits
[16:05:21.482]             invokeRestart <- base::invokeRestart
[16:05:21.482]             length <- base::length
[16:05:21.482]             list <- base::list
[16:05:21.482]             seq.int <- base::seq.int
[16:05:21.482]             signalCondition <- base::signalCondition
[16:05:21.482]             sys.calls <- base::sys.calls
[16:05:21.482]             `[[` <- base::`[[`
[16:05:21.482]             `+` <- base::`+`
[16:05:21.482]             `<<-` <- base::`<<-`
[16:05:21.482]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:05:21.482]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:05:21.482]                   3L)]
[16:05:21.482]             }
[16:05:21.482]             function(cond) {
[16:05:21.482]                 is_error <- inherits(cond, "error")
[16:05:21.482]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:05:21.482]                   NULL)
[16:05:21.482]                 if (is_error) {
[16:05:21.482]                   sessionInformation <- function() {
[16:05:21.482]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:05:21.482]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:05:21.482]                       search = base::search(), system = base::Sys.info())
[16:05:21.482]                   }
[16:05:21.482]                   ...future.conditions[[length(...future.conditions) + 
[16:05:21.482]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:05:21.482]                     cond$call), session = sessionInformation(), 
[16:05:21.482]                     timestamp = base::Sys.time(), signaled = 0L)
[16:05:21.482]                   signalCondition(cond)
[16:05:21.482]                 }
[16:05:21.482]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:05:21.482]                 "immediateCondition"))) {
[16:05:21.482]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:05:21.482]                   ...future.conditions[[length(...future.conditions) + 
[16:05:21.482]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:05:21.482]                   if (TRUE && !signal) {
[16:05:21.482]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:05:21.482]                     {
[16:05:21.482]                       inherits <- base::inherits
[16:05:21.482]                       invokeRestart <- base::invokeRestart
[16:05:21.482]                       is.null <- base::is.null
[16:05:21.482]                       muffled <- FALSE
[16:05:21.482]                       if (inherits(cond, "message")) {
[16:05:21.482]                         muffled <- grepl(pattern, "muffleMessage")
[16:05:21.482]                         if (muffled) 
[16:05:21.482]                           invokeRestart("muffleMessage")
[16:05:21.482]                       }
[16:05:21.482]                       else if (inherits(cond, "warning")) {
[16:05:21.482]                         muffled <- grepl(pattern, "muffleWarning")
[16:05:21.482]                         if (muffled) 
[16:05:21.482]                           invokeRestart("muffleWarning")
[16:05:21.482]                       }
[16:05:21.482]                       else if (inherits(cond, "condition")) {
[16:05:21.482]                         if (!is.null(pattern)) {
[16:05:21.482]                           computeRestarts <- base::computeRestarts
[16:05:21.482]                           grepl <- base::grepl
[16:05:21.482]                           restarts <- computeRestarts(cond)
[16:05:21.482]                           for (restart in restarts) {
[16:05:21.482]                             name <- restart$name
[16:05:21.482]                             if (is.null(name)) 
[16:05:21.482]                               next
[16:05:21.482]                             if (!grepl(pattern, name)) 
[16:05:21.482]                               next
[16:05:21.482]                             invokeRestart(restart)
[16:05:21.482]                             muffled <- TRUE
[16:05:21.482]                             break
[16:05:21.482]                           }
[16:05:21.482]                         }
[16:05:21.482]                       }
[16:05:21.482]                       invisible(muffled)
[16:05:21.482]                     }
[16:05:21.482]                     muffleCondition(cond, pattern = "^muffle")
[16:05:21.482]                   }
[16:05:21.482]                 }
[16:05:21.482]                 else {
[16:05:21.482]                   if (TRUE) {
[16:05:21.482]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:05:21.482]                     {
[16:05:21.482]                       inherits <- base::inherits
[16:05:21.482]                       invokeRestart <- base::invokeRestart
[16:05:21.482]                       is.null <- base::is.null
[16:05:21.482]                       muffled <- FALSE
[16:05:21.482]                       if (inherits(cond, "message")) {
[16:05:21.482]                         muffled <- grepl(pattern, "muffleMessage")
[16:05:21.482]                         if (muffled) 
[16:05:21.482]                           invokeRestart("muffleMessage")
[16:05:21.482]                       }
[16:05:21.482]                       else if (inherits(cond, "warning")) {
[16:05:21.482]                         muffled <- grepl(pattern, "muffleWarning")
[16:05:21.482]                         if (muffled) 
[16:05:21.482]                           invokeRestart("muffleWarning")
[16:05:21.482]                       }
[16:05:21.482]                       else if (inherits(cond, "condition")) {
[16:05:21.482]                         if (!is.null(pattern)) {
[16:05:21.482]                           computeRestarts <- base::computeRestarts
[16:05:21.482]                           grepl <- base::grepl
[16:05:21.482]                           restarts <- computeRestarts(cond)
[16:05:21.482]                           for (restart in restarts) {
[16:05:21.482]                             name <- restart$name
[16:05:21.482]                             if (is.null(name)) 
[16:05:21.482]                               next
[16:05:21.482]                             if (!grepl(pattern, name)) 
[16:05:21.482]                               next
[16:05:21.482]                             invokeRestart(restart)
[16:05:21.482]                             muffled <- TRUE
[16:05:21.482]                             break
[16:05:21.482]                           }
[16:05:21.482]                         }
[16:05:21.482]                       }
[16:05:21.482]                       invisible(muffled)
[16:05:21.482]                     }
[16:05:21.482]                     muffleCondition(cond, pattern = "^muffle")
[16:05:21.482]                   }
[16:05:21.482]                 }
[16:05:21.482]             }
[16:05:21.482]         }))
[16:05:21.482]     }, error = function(ex) {
[16:05:21.482]         base::structure(base::list(value = NULL, visible = NULL, 
[16:05:21.482]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:05:21.482]                 ...future.rng), started = ...future.startTime, 
[16:05:21.482]             finished = Sys.time(), session_uuid = NA_character_, 
[16:05:21.482]             version = "1.8"), class = "FutureResult")
[16:05:21.482]     }, finally = {
[16:05:21.482]         if (!identical(...future.workdir, getwd())) 
[16:05:21.482]             setwd(...future.workdir)
[16:05:21.482]         {
[16:05:21.482]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:05:21.482]                 ...future.oldOptions$nwarnings <- NULL
[16:05:21.482]             }
[16:05:21.482]             base::options(...future.oldOptions)
[16:05:21.482]             if (.Platform$OS.type == "windows") {
[16:05:21.482]                 old_names <- names(...future.oldEnvVars)
[16:05:21.482]                 envs <- base::Sys.getenv()
[16:05:21.482]                 names <- names(envs)
[16:05:21.482]                 common <- intersect(names, old_names)
[16:05:21.482]                 added <- setdiff(names, old_names)
[16:05:21.482]                 removed <- setdiff(old_names, names)
[16:05:21.482]                 changed <- common[...future.oldEnvVars[common] != 
[16:05:21.482]                   envs[common]]
[16:05:21.482]                 NAMES <- toupper(changed)
[16:05:21.482]                 args <- list()
[16:05:21.482]                 for (kk in seq_along(NAMES)) {
[16:05:21.482]                   name <- changed[[kk]]
[16:05:21.482]                   NAME <- NAMES[[kk]]
[16:05:21.482]                   if (name != NAME && is.element(NAME, old_names)) 
[16:05:21.482]                     next
[16:05:21.482]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:05:21.482]                 }
[16:05:21.482]                 NAMES <- toupper(added)
[16:05:21.482]                 for (kk in seq_along(NAMES)) {
[16:05:21.482]                   name <- added[[kk]]
[16:05:21.482]                   NAME <- NAMES[[kk]]
[16:05:21.482]                   if (name != NAME && is.element(NAME, old_names)) 
[16:05:21.482]                     next
[16:05:21.482]                   args[[name]] <- ""
[16:05:21.482]                 }
[16:05:21.482]                 NAMES <- toupper(removed)
[16:05:21.482]                 for (kk in seq_along(NAMES)) {
[16:05:21.482]                   name <- removed[[kk]]
[16:05:21.482]                   NAME <- NAMES[[kk]]
[16:05:21.482]                   if (name != NAME && is.element(NAME, old_names)) 
[16:05:21.482]                     next
[16:05:21.482]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:05:21.482]                 }
[16:05:21.482]                 if (length(args) > 0) 
[16:05:21.482]                   base::do.call(base::Sys.setenv, args = args)
[16:05:21.482]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:05:21.482]             }
[16:05:21.482]             else {
[16:05:21.482]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:05:21.482]             }
[16:05:21.482]             {
[16:05:21.482]                 if (base::length(...future.futureOptionsAdded) > 
[16:05:21.482]                   0L) {
[16:05:21.482]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:05:21.482]                   base::names(opts) <- ...future.futureOptionsAdded
[16:05:21.482]                   base::options(opts)
[16:05:21.482]                 }
[16:05:21.482]                 {
[16:05:21.482]                   {
[16:05:21.482]                     base::options(mc.cores = ...future.mc.cores.old)
[16:05:21.482]                     NULL
[16:05:21.482]                   }
[16:05:21.482]                   options(future.plan = NULL)
[16:05:21.482]                   if (is.na(NA_character_)) 
[16:05:21.482]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:05:21.482]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:05:21.482]                   future::plan(list(function (..., envir = parent.frame()) 
[16:05:21.482]                   {
[16:05:21.482]                     future <- SequentialFuture(..., envir = envir)
[16:05:21.482]                     if (!future$lazy) 
[16:05:21.482]                       future <- run(future)
[16:05:21.482]                     invisible(future)
[16:05:21.482]                   }), .cleanup = FALSE, .init = FALSE)
[16:05:21.482]                 }
[16:05:21.482]             }
[16:05:21.482]         }
[16:05:21.482]     })
[16:05:21.482]     if (TRUE) {
[16:05:21.482]         base::sink(type = "output", split = FALSE)
[16:05:21.482]         if (TRUE) {
[16:05:21.482]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:05:21.482]         }
[16:05:21.482]         else {
[16:05:21.482]             ...future.result["stdout"] <- base::list(NULL)
[16:05:21.482]         }
[16:05:21.482]         base::close(...future.stdout)
[16:05:21.482]         ...future.stdout <- NULL
[16:05:21.482]     }
[16:05:21.482]     ...future.result$conditions <- ...future.conditions
[16:05:21.482]     ...future.result$finished <- base::Sys.time()
[16:05:21.482]     ...future.result
[16:05:21.482] }
[16:05:21.485] MultisessionFuture started
MultisessionFuture:
Label: ‘<none>’
Expression:
{
    stop("Whoops!")
    1
}
Lazy evaluation: FALSE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: FALSE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: 44f0d080-a0af-4897-da8d-6d247098800b
Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[16:05:21.496] result() for ClusterFuture ...
[16:05:21.496] receiveMessageFromWorker() for ClusterFuture ...
[16:05:21.496] - Validating connection of MultisessionFuture
[16:05:21.529] - received message: FutureResult
[16:05:21.529] - Received FutureResult
[16:05:21.529] - Erased future from FutureRegistry
[16:05:21.530] result() for ClusterFuture ...
[16:05:21.530] - result already collected: FutureResult
[16:05:21.530] result() for ClusterFuture ... done
[16:05:21.530] signalConditions() ...
[16:05:21.530]  - include = ‘immediateCondition’
[16:05:21.530]  - exclude = 
[16:05:21.530]  - resignal = FALSE
[16:05:21.530]  - Number of conditions: 1
[16:05:21.530] signalConditions() ... done
[16:05:21.530] receiveMessageFromWorker() for ClusterFuture ... done
[16:05:21.530] result() for ClusterFuture ... done
[16:05:21.530] result() for ClusterFuture ...
[16:05:21.531] - result already collected: FutureResult
[16:05:21.531] result() for ClusterFuture ... done
[16:05:21.531] signalConditions() ...
[16:05:21.531]  - include = ‘immediateCondition’
[16:05:21.531]  - exclude = 
[16:05:21.531]  - resignal = FALSE
[16:05:21.531]  - Number of conditions: 1
[16:05:21.531] signalConditions() ... done
<simpleError in withCallingHandlers({    {        stop("Whoops!")        1    }}, immediateCondition = function(cond) {    sendCondition <- ...future.makeSendCondition()    sendCondition(cond)    muffleCondition <- function (cond, pattern = "^muffle")     {        inherits <- base::inherits        invokeRestart <- base::invokeRestart        is.null <- base::is.null        muffled <- FALSE        if (inherits(cond, "message")) {            muffled <- grepl(pattern, "muffleMessage")            if (muffled)                 invokeRestart("muffleMessage")        }        else if (inherits(cond, "warning")) {            muffled <- grepl(pattern, "muffleWarning")            if (muffled)                 invokeRestart("muffleWarning")        }        else if (inherits(cond, "condition")) {            if (!is.null(pattern)) {                computeRestarts <- base::computeRestarts                grepl <- base::grepl                restarts <- computeRestarts(cond)                for (restart in restarts) {                  name <- restart$name                  if (is.null(name))                     next                  if (!grepl(pattern, name))                     next                  invokeRestart(restart)                  muffled <- TRUE                  break                }            }        }        invisible(muffled)    }    muffleCondition(cond)}): Whoops!>
[16:05:21.532] result() for ClusterFuture ...
[16:05:21.532] - result already collected: FutureResult
[16:05:21.532] result() for ClusterFuture ... done
[16:05:21.532] result() for ClusterFuture ...
[16:05:21.532] - result already collected: FutureResult
[16:05:21.532] result() for ClusterFuture ... done
[16:05:21.532] signalConditions() ...
[16:05:21.532]  - include = ‘immediateCondition’
[16:05:21.532]  - exclude = 
[16:05:21.532]  - resignal = FALSE
[16:05:21.532]  - Number of conditions: 1
[16:05:21.533] signalConditions() ... done
[16:05:21.533] Future state: ‘finished’
[16:05:21.533] result() for ClusterFuture ...
[16:05:21.533] - result already collected: FutureResult
[16:05:21.533] result() for ClusterFuture ... done
[16:05:21.533] signalConditions() ...
[16:05:21.533]  - include = ‘condition’
[16:05:21.533]  - exclude = ‘immediateCondition’
[16:05:21.533]  - resignal = TRUE
[16:05:21.533]  - Number of conditions: 1
[16:05:21.533]  - Condition #1: ‘simpleError’, ‘error’, ‘condition’
[16:05:21.534] signalConditions() ... done
[1] "Error in withCallingHandlers({ : Whoops!\n"
attr(,"class")
[1] "try-error"
attr(,"condition")
<simpleError in withCallingHandlers({    {        stop("Whoops!")        1    }}, immediateCondition = function(cond) {    sendCondition <- ...future.makeSendCondition()    sendCondition(cond)    muffleCondition <- function (cond, pattern = "^muffle")     {        inherits <- base::inherits        invokeRestart <- base::invokeRestart        is.null <- base::is.null        muffled <- FALSE        if (inherits(cond, "message")) {            muffled <- grepl(pattern, "muffleMessage")            if (muffled)                 invokeRestart("muffleMessage")        }        else if (inherits(cond, "warning")) {            muffled <- grepl(pattern, "muffleWarning")            if (muffled)                 invokeRestart("muffleWarning")        }        else if (inherits(cond, "condition")) {            if (!is.null(pattern)) {                computeRestarts <- base::computeRestarts                grepl <- base::grepl                restarts <- computeRestarts(cond)                for (restart in restarts) {                  name <- restart$name                  if (is.null(name))                     next                  if (!grepl(pattern, name))                     next                  invokeRestart(restart)                  muffled <- TRUE                  break                }            }        }        invisible(muffled)    }    muffleCondition(cond)}): Whoops!>
[16:05:21.534] result() for ClusterFuture ...
[16:05:21.534] - result already collected: FutureResult
[16:05:21.534] result() for ClusterFuture ... done
[16:05:21.534] result() for ClusterFuture ...
[16:05:21.534] - result already collected: FutureResult
[16:05:21.534] result() for ClusterFuture ... done
[16:05:21.535] signalConditions() ...
[16:05:21.535]  - include = ‘immediateCondition’
[16:05:21.535]  - exclude = 
[16:05:21.535]  - resignal = FALSE
[16:05:21.535]  - Number of conditions: 1
[16:05:21.535] signalConditions() ... done
[16:05:21.535] Future state: ‘finished’
[16:05:21.535] result() for ClusterFuture ...
[16:05:21.535] - result already collected: FutureResult
[16:05:21.535] result() for ClusterFuture ... done
[16:05:21.535] signalConditions() ...
[16:05:21.536]  - include = ‘condition’
[16:05:21.536]  - exclude = ‘immediateCondition’
[16:05:21.536]  - resignal = TRUE
[16:05:21.536]  - Number of conditions: 1
[16:05:21.536]  - Condition #1: ‘simpleError’, ‘error’, ‘condition’
[16:05:21.536] signalConditions() ... done
[1] "Error in withCallingHandlers({ : Whoops!\n"
attr(,"class")
[1] "try-error"
attr(,"condition")
<simpleError in withCallingHandlers({    {        stop("Whoops!")        1    }}, immediateCondition = function(cond) {    sendCondition <- ...future.makeSendCondition()    sendCondition(cond)    muffleCondition <- function (cond, pattern = "^muffle")     {        inherits <- base::inherits        invokeRestart <- base::invokeRestart        is.null <- base::is.null        muffled <- FALSE        if (inherits(cond, "message")) {            muffled <- grepl(pattern, "muffleMessage")            if (muffled)                 invokeRestart("muffleMessage")        }        else if (inherits(cond, "warning")) {            muffled <- grepl(pattern, "muffleWarning")            if (muffled)                 invokeRestart("muffleWarning")        }        else if (inherits(cond, "condition")) {            if (!is.null(pattern)) {                computeRestarts <- base::computeRestarts                grepl <- base::grepl                restarts <- computeRestarts(cond)                for (restart in restarts) {                  name <- restart$name                  if (is.null(name))                     next                  if (!grepl(pattern, name))                     next                  invokeRestart(restart)                  muffled <- TRUE                  break                }            }        }        invisible(muffled)    }    muffleCondition(cond)}): Whoops!>
[16:05:21.540] getGlobalsAndPackages() ...
[16:05:21.540] 
[16:05:21.540] - globals: [0] <none>
[16:05:21.540] getGlobalsAndPackages() ... DONE
[16:05:21.551] Packages needed by the future expression (n = 0): <none>
[16:05:21.551] Packages needed by future strategies (n = 0): <none>
[16:05:21.551] {
[16:05:21.551]     {
[16:05:21.551]         {
[16:05:21.551]             ...future.startTime <- base::Sys.time()
[16:05:21.551]             {
[16:05:21.551]                 {
[16:05:21.551]                   {
[16:05:21.551]                     {
[16:05:21.551]                       base::local({
[16:05:21.551]                         has_future <- base::requireNamespace("future", 
[16:05:21.551]                           quietly = TRUE)
[16:05:21.551]                         if (has_future) {
[16:05:21.551]                           ns <- base::getNamespace("future")
[16:05:21.551]                           version <- ns[[".package"]][["version"]]
[16:05:21.551]                           if (is.null(version)) 
[16:05:21.551]                             version <- utils::packageVersion("future")
[16:05:21.551]                         }
[16:05:21.551]                         else {
[16:05:21.551]                           version <- NULL
[16:05:21.551]                         }
[16:05:21.551]                         if (!has_future || version < "1.8.0") {
[16:05:21.551]                           info <- base::c(r_version = base::gsub("R version ", 
[16:05:21.551]                             "", base::R.version$version.string), 
[16:05:21.551]                             platform = base::sprintf("%s (%s-bit)", 
[16:05:21.551]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:05:21.551]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[16:05:21.551]                               "release", "version")], collapse = " "), 
[16:05:21.551]                             hostname = base::Sys.info()[["nodename"]])
[16:05:21.551]                           info <- base::sprintf("%s: %s", base::names(info), 
[16:05:21.551]                             info)
[16:05:21.551]                           info <- base::paste(info, collapse = "; ")
[16:05:21.551]                           if (!has_future) {
[16:05:21.551]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:05:21.551]                               info)
[16:05:21.551]                           }
[16:05:21.551]                           else {
[16:05:21.551]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:05:21.551]                               info, version)
[16:05:21.551]                           }
[16:05:21.551]                           base::stop(msg)
[16:05:21.551]                         }
[16:05:21.551]                       })
[16:05:21.551]                     }
[16:05:21.551]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[16:05:21.551]                     base::options(mc.cores = 1L)
[16:05:21.551]                   }
[16:05:21.551]                   options(future.plan = NULL)
[16:05:21.551]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:05:21.551]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:05:21.551]                 }
[16:05:21.551]                 ...future.workdir <- getwd()
[16:05:21.551]             }
[16:05:21.551]             ...future.oldOptions <- base::as.list(base::.Options)
[16:05:21.551]             ...future.oldEnvVars <- base::Sys.getenv()
[16:05:21.551]         }
[16:05:21.551]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:05:21.551]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:05:21.551]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:05:21.551]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:05:21.551]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:05:21.551]             future.stdout.windows.reencode = NULL, width = 80L)
[16:05:21.551]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:05:21.551]             base::names(...future.oldOptions))
[16:05:21.551]     }
[16:05:21.551]     if (FALSE) {
[16:05:21.551]     }
[16:05:21.551]     else {
[16:05:21.551]         if (TRUE) {
[16:05:21.551]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:05:21.551]                 open = "w")
[16:05:21.551]         }
[16:05:21.551]         else {
[16:05:21.551]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:05:21.551]                 windows = "NUL", "/dev/null"), open = "w")
[16:05:21.551]         }
[16:05:21.551]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:05:21.551]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:05:21.551]             base::sink(type = "output", split = FALSE)
[16:05:21.551]             base::close(...future.stdout)
[16:05:21.551]         }, add = TRUE)
[16:05:21.551]     }
[16:05:21.551]     ...future.frame <- base::sys.nframe()
[16:05:21.551]     ...future.conditions <- base::list()
[16:05:21.551]     ...future.rng <- base::globalenv()$.Random.seed
[16:05:21.551]     if (FALSE) {
[16:05:21.551]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:05:21.551]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:05:21.551]     }
[16:05:21.551]     ...future.result <- base::tryCatch({
[16:05:21.551]         base::withCallingHandlers({
[16:05:21.551]             ...future.value <- base::withVisible(base::local({
[16:05:21.551]                 ...future.makeSendCondition <- base::local({
[16:05:21.551]                   sendCondition <- NULL
[16:05:21.551]                   function(frame = 1L) {
[16:05:21.551]                     if (is.function(sendCondition)) 
[16:05:21.551]                       return(sendCondition)
[16:05:21.551]                     ns <- getNamespace("parallel")
[16:05:21.551]                     if (exists("sendData", mode = "function", 
[16:05:21.551]                       envir = ns)) {
[16:05:21.551]                       parallel_sendData <- get("sendData", mode = "function", 
[16:05:21.551]                         envir = ns)
[16:05:21.551]                       envir <- sys.frame(frame)
[16:05:21.551]                       master <- NULL
[16:05:21.551]                       while (!identical(envir, .GlobalEnv) && 
[16:05:21.551]                         !identical(envir, emptyenv())) {
[16:05:21.551]                         if (exists("master", mode = "list", envir = envir, 
[16:05:21.551]                           inherits = FALSE)) {
[16:05:21.551]                           master <- get("master", mode = "list", 
[16:05:21.551]                             envir = envir, inherits = FALSE)
[16:05:21.551]                           if (inherits(master, c("SOCKnode", 
[16:05:21.551]                             "SOCK0node"))) {
[16:05:21.551]                             sendCondition <<- function(cond) {
[16:05:21.551]                               data <- list(type = "VALUE", value = cond, 
[16:05:21.551]                                 success = TRUE)
[16:05:21.551]                               parallel_sendData(master, data)
[16:05:21.551]                             }
[16:05:21.551]                             return(sendCondition)
[16:05:21.551]                           }
[16:05:21.551]                         }
[16:05:21.551]                         frame <- frame + 1L
[16:05:21.551]                         envir <- sys.frame(frame)
[16:05:21.551]                       }
[16:05:21.551]                     }
[16:05:21.551]                     sendCondition <<- function(cond) NULL
[16:05:21.551]                   }
[16:05:21.551]                 })
[16:05:21.551]                 withCallingHandlers({
[16:05:21.551]                   {
[16:05:21.551]                     stop(structure(list(message = "boom"), class = c("MyError", 
[16:05:21.551]                       "error", "condition")))
[16:05:21.551]                   }
[16:05:21.551]                 }, immediateCondition = function(cond) {
[16:05:21.551]                   sendCondition <- ...future.makeSendCondition()
[16:05:21.551]                   sendCondition(cond)
[16:05:21.551]                   muffleCondition <- function (cond, pattern = "^muffle") 
[16:05:21.551]                   {
[16:05:21.551]                     inherits <- base::inherits
[16:05:21.551]                     invokeRestart <- base::invokeRestart
[16:05:21.551]                     is.null <- base::is.null
[16:05:21.551]                     muffled <- FALSE
[16:05:21.551]                     if (inherits(cond, "message")) {
[16:05:21.551]                       muffled <- grepl(pattern, "muffleMessage")
[16:05:21.551]                       if (muffled) 
[16:05:21.551]                         invokeRestart("muffleMessage")
[16:05:21.551]                     }
[16:05:21.551]                     else if (inherits(cond, "warning")) {
[16:05:21.551]                       muffled <- grepl(pattern, "muffleWarning")
[16:05:21.551]                       if (muffled) 
[16:05:21.551]                         invokeRestart("muffleWarning")
[16:05:21.551]                     }
[16:05:21.551]                     else if (inherits(cond, "condition")) {
[16:05:21.551]                       if (!is.null(pattern)) {
[16:05:21.551]                         computeRestarts <- base::computeRestarts
[16:05:21.551]                         grepl <- base::grepl
[16:05:21.551]                         restarts <- computeRestarts(cond)
[16:05:21.551]                         for (restart in restarts) {
[16:05:21.551]                           name <- restart$name
[16:05:21.551]                           if (is.null(name)) 
[16:05:21.551]                             next
[16:05:21.551]                           if (!grepl(pattern, name)) 
[16:05:21.551]                             next
[16:05:21.551]                           invokeRestart(restart)
[16:05:21.551]                           muffled <- TRUE
[16:05:21.551]                           break
[16:05:21.551]                         }
[16:05:21.551]                       }
[16:05:21.551]                     }
[16:05:21.551]                     invisible(muffled)
[16:05:21.551]                   }
[16:05:21.551]                   muffleCondition(cond)
[16:05:21.551]                 })
[16:05:21.551]             }))
[16:05:21.551]             future::FutureResult(value = ...future.value$value, 
[16:05:21.551]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:05:21.551]                   ...future.rng), globalenv = if (FALSE) 
[16:05:21.551]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:05:21.551]                     ...future.globalenv.names))
[16:05:21.551]                 else NULL, started = ...future.startTime, version = "1.8")
[16:05:21.551]         }, condition = base::local({
[16:05:21.551]             c <- base::c
[16:05:21.551]             inherits <- base::inherits
[16:05:21.551]             invokeRestart <- base::invokeRestart
[16:05:21.551]             length <- base::length
[16:05:21.551]             list <- base::list
[16:05:21.551]             seq.int <- base::seq.int
[16:05:21.551]             signalCondition <- base::signalCondition
[16:05:21.551]             sys.calls <- base::sys.calls
[16:05:21.551]             `[[` <- base::`[[`
[16:05:21.551]             `+` <- base::`+`
[16:05:21.551]             `<<-` <- base::`<<-`
[16:05:21.551]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:05:21.551]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:05:21.551]                   3L)]
[16:05:21.551]             }
[16:05:21.551]             function(cond) {
[16:05:21.551]                 is_error <- inherits(cond, "error")
[16:05:21.551]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:05:21.551]                   NULL)
[16:05:21.551]                 if (is_error) {
[16:05:21.551]                   sessionInformation <- function() {
[16:05:21.551]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:05:21.551]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:05:21.551]                       search = base::search(), system = base::Sys.info())
[16:05:21.551]                   }
[16:05:21.551]                   ...future.conditions[[length(...future.conditions) + 
[16:05:21.551]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:05:21.551]                     cond$call), session = sessionInformation(), 
[16:05:21.551]                     timestamp = base::Sys.time(), signaled = 0L)
[16:05:21.551]                   signalCondition(cond)
[16:05:21.551]                 }
[16:05:21.551]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:05:21.551]                 "immediateCondition"))) {
[16:05:21.551]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:05:21.551]                   ...future.conditions[[length(...future.conditions) + 
[16:05:21.551]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:05:21.551]                   if (TRUE && !signal) {
[16:05:21.551]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:05:21.551]                     {
[16:05:21.551]                       inherits <- base::inherits
[16:05:21.551]                       invokeRestart <- base::invokeRestart
[16:05:21.551]                       is.null <- base::is.null
[16:05:21.551]                       muffled <- FALSE
[16:05:21.551]                       if (inherits(cond, "message")) {
[16:05:21.551]                         muffled <- grepl(pattern, "muffleMessage")
[16:05:21.551]                         if (muffled) 
[16:05:21.551]                           invokeRestart("muffleMessage")
[16:05:21.551]                       }
[16:05:21.551]                       else if (inherits(cond, "warning")) {
[16:05:21.551]                         muffled <- grepl(pattern, "muffleWarning")
[16:05:21.551]                         if (muffled) 
[16:05:21.551]                           invokeRestart("muffleWarning")
[16:05:21.551]                       }
[16:05:21.551]                       else if (inherits(cond, "condition")) {
[16:05:21.551]                         if (!is.null(pattern)) {
[16:05:21.551]                           computeRestarts <- base::computeRestarts
[16:05:21.551]                           grepl <- base::grepl
[16:05:21.551]                           restarts <- computeRestarts(cond)
[16:05:21.551]                           for (restart in restarts) {
[16:05:21.551]                             name <- restart$name
[16:05:21.551]                             if (is.null(name)) 
[16:05:21.551]                               next
[16:05:21.551]                             if (!grepl(pattern, name)) 
[16:05:21.551]                               next
[16:05:21.551]                             invokeRestart(restart)
[16:05:21.551]                             muffled <- TRUE
[16:05:21.551]                             break
[16:05:21.551]                           }
[16:05:21.551]                         }
[16:05:21.551]                       }
[16:05:21.551]                       invisible(muffled)
[16:05:21.551]                     }
[16:05:21.551]                     muffleCondition(cond, pattern = "^muffle")
[16:05:21.551]                   }
[16:05:21.551]                 }
[16:05:21.551]                 else {
[16:05:21.551]                   if (TRUE) {
[16:05:21.551]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:05:21.551]                     {
[16:05:21.551]                       inherits <- base::inherits
[16:05:21.551]                       invokeRestart <- base::invokeRestart
[16:05:21.551]                       is.null <- base::is.null
[16:05:21.551]                       muffled <- FALSE
[16:05:21.551]                       if (inherits(cond, "message")) {
[16:05:21.551]                         muffled <- grepl(pattern, "muffleMessage")
[16:05:21.551]                         if (muffled) 
[16:05:21.551]                           invokeRestart("muffleMessage")
[16:05:21.551]                       }
[16:05:21.551]                       else if (inherits(cond, "warning")) {
[16:05:21.551]                         muffled <- grepl(pattern, "muffleWarning")
[16:05:21.551]                         if (muffled) 
[16:05:21.551]                           invokeRestart("muffleWarning")
[16:05:21.551]                       }
[16:05:21.551]                       else if (inherits(cond, "condition")) {
[16:05:21.551]                         if (!is.null(pattern)) {
[16:05:21.551]                           computeRestarts <- base::computeRestarts
[16:05:21.551]                           grepl <- base::grepl
[16:05:21.551]                           restarts <- computeRestarts(cond)
[16:05:21.551]                           for (restart in restarts) {
[16:05:21.551]                             name <- restart$name
[16:05:21.551]                             if (is.null(name)) 
[16:05:21.551]                               next
[16:05:21.551]                             if (!grepl(pattern, name)) 
[16:05:21.551]                               next
[16:05:21.551]                             invokeRestart(restart)
[16:05:21.551]                             muffled <- TRUE
[16:05:21.551]                             break
[16:05:21.551]                           }
[16:05:21.551]                         }
[16:05:21.551]                       }
[16:05:21.551]                       invisible(muffled)
[16:05:21.551]                     }
[16:05:21.551]                     muffleCondition(cond, pattern = "^muffle")
[16:05:21.551]                   }
[16:05:21.551]                 }
[16:05:21.551]             }
[16:05:21.551]         }))
[16:05:21.551]     }, error = function(ex) {
[16:05:21.551]         base::structure(base::list(value = NULL, visible = NULL, 
[16:05:21.551]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:05:21.551]                 ...future.rng), started = ...future.startTime, 
[16:05:21.551]             finished = Sys.time(), session_uuid = NA_character_, 
[16:05:21.551]             version = "1.8"), class = "FutureResult")
[16:05:21.551]     }, finally = {
[16:05:21.551]         if (!identical(...future.workdir, getwd())) 
[16:05:21.551]             setwd(...future.workdir)
[16:05:21.551]         {
[16:05:21.551]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:05:21.551]                 ...future.oldOptions$nwarnings <- NULL
[16:05:21.551]             }
[16:05:21.551]             base::options(...future.oldOptions)
[16:05:21.551]             if (.Platform$OS.type == "windows") {
[16:05:21.551]                 old_names <- names(...future.oldEnvVars)
[16:05:21.551]                 envs <- base::Sys.getenv()
[16:05:21.551]                 names <- names(envs)
[16:05:21.551]                 common <- intersect(names, old_names)
[16:05:21.551]                 added <- setdiff(names, old_names)
[16:05:21.551]                 removed <- setdiff(old_names, names)
[16:05:21.551]                 changed <- common[...future.oldEnvVars[common] != 
[16:05:21.551]                   envs[common]]
[16:05:21.551]                 NAMES <- toupper(changed)
[16:05:21.551]                 args <- list()
[16:05:21.551]                 for (kk in seq_along(NAMES)) {
[16:05:21.551]                   name <- changed[[kk]]
[16:05:21.551]                   NAME <- NAMES[[kk]]
[16:05:21.551]                   if (name != NAME && is.element(NAME, old_names)) 
[16:05:21.551]                     next
[16:05:21.551]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:05:21.551]                 }
[16:05:21.551]                 NAMES <- toupper(added)
[16:05:21.551]                 for (kk in seq_along(NAMES)) {
[16:05:21.551]                   name <- added[[kk]]
[16:05:21.551]                   NAME <- NAMES[[kk]]
[16:05:21.551]                   if (name != NAME && is.element(NAME, old_names)) 
[16:05:21.551]                     next
[16:05:21.551]                   args[[name]] <- ""
[16:05:21.551]                 }
[16:05:21.551]                 NAMES <- toupper(removed)
[16:05:21.551]                 for (kk in seq_along(NAMES)) {
[16:05:21.551]                   name <- removed[[kk]]
[16:05:21.551]                   NAME <- NAMES[[kk]]
[16:05:21.551]                   if (name != NAME && is.element(NAME, old_names)) 
[16:05:21.551]                     next
[16:05:21.551]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:05:21.551]                 }
[16:05:21.551]                 if (length(args) > 0) 
[16:05:21.551]                   base::do.call(base::Sys.setenv, args = args)
[16:05:21.551]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:05:21.551]             }
[16:05:21.551]             else {
[16:05:21.551]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:05:21.551]             }
[16:05:21.551]             {
[16:05:21.551]                 if (base::length(...future.futureOptionsAdded) > 
[16:05:21.551]                   0L) {
[16:05:21.551]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:05:21.551]                   base::names(opts) <- ...future.futureOptionsAdded
[16:05:21.551]                   base::options(opts)
[16:05:21.551]                 }
[16:05:21.551]                 {
[16:05:21.551]                   {
[16:05:21.551]                     base::options(mc.cores = ...future.mc.cores.old)
[16:05:21.551]                     NULL
[16:05:21.551]                   }
[16:05:21.551]                   options(future.plan = NULL)
[16:05:21.551]                   if (is.na(NA_character_)) 
[16:05:21.551]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:05:21.551]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:05:21.551]                   future::plan(list(function (..., envir = parent.frame()) 
[16:05:21.551]                   {
[16:05:21.551]                     future <- SequentialFuture(..., envir = envir)
[16:05:21.551]                     if (!future$lazy) 
[16:05:21.551]                       future <- run(future)
[16:05:21.551]                     invisible(future)
[16:05:21.551]                   }), .cleanup = FALSE, .init = FALSE)
[16:05:21.551]                 }
[16:05:21.551]             }
[16:05:21.551]         }
[16:05:21.551]     })
[16:05:21.551]     if (TRUE) {
[16:05:21.551]         base::sink(type = "output", split = FALSE)
[16:05:21.551]         if (TRUE) {
[16:05:21.551]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:05:21.551]         }
[16:05:21.551]         else {
[16:05:21.551]             ...future.result["stdout"] <- base::list(NULL)
[16:05:21.551]         }
[16:05:21.551]         base::close(...future.stdout)
[16:05:21.551]         ...future.stdout <- NULL
[16:05:21.551]     }
[16:05:21.551]     ...future.result$conditions <- ...future.conditions
[16:05:21.551]     ...future.result$finished <- base::Sys.time()
[16:05:21.551]     ...future.result
[16:05:21.551] }
[16:05:21.554] MultisessionFuture started
MultisessionFuture:
Label: ‘<none>’
Expression:
{
    stop(structure(list(message = "boom"), class = c("MyError", 
        "error", "condition")))
}
Lazy evaluation: FALSE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: FALSE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: 44f0d080-a0af-4897-da8d-6d247098800b
Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[16:05:21.566] result() for ClusterFuture ...
[16:05:21.566] receiveMessageFromWorker() for ClusterFuture ...
[16:05:21.566] - Validating connection of MultisessionFuture
[16:05:21.597] - received message: FutureResult
[16:05:21.597] - Received FutureResult
[16:05:21.597] - Erased future from FutureRegistry
[16:05:21.597] result() for ClusterFuture ...
[16:05:21.597] - result already collected: FutureResult
[16:05:21.597] result() for ClusterFuture ... done
[16:05:21.597] signalConditions() ...
[16:05:21.597]  - include = ‘immediateCondition’
[16:05:21.598]  - exclude = 
[16:05:21.598]  - resignal = FALSE
[16:05:21.598]  - Number of conditions: 1
[16:05:21.598] signalConditions() ... done
[16:05:21.598] receiveMessageFromWorker() for ClusterFuture ... done
[16:05:21.598] result() for ClusterFuture ... done
[16:05:21.598] result() for ClusterFuture ...
[16:05:21.598] - result already collected: FutureResult
[16:05:21.598] result() for ClusterFuture ... done
[16:05:21.598] signalConditions() ...
[16:05:21.598]  - include = ‘immediateCondition’
[16:05:21.598]  - exclude = 
[16:05:21.599]  - resignal = FALSE
[16:05:21.599]  - Number of conditions: 1
[16:05:21.599] signalConditions() ... done
<MyError: boom>
[16:05:21.599] result() for ClusterFuture ...
[16:05:21.599] - result already collected: FutureResult
[16:05:21.599] result() for ClusterFuture ... done
[16:05:21.599] result() for ClusterFuture ...
[16:05:21.599] - result already collected: FutureResult
[16:05:21.599] result() for ClusterFuture ... done
[16:05:21.600] signalConditions() ...
[16:05:21.600]  - include = ‘immediateCondition’
[16:05:21.600]  - exclude = 
[16:05:21.600]  - resignal = FALSE
[16:05:21.600]  - Number of conditions: 1
[16:05:21.600] signalConditions() ... done
[16:05:21.600] Future state: ‘finished’
[16:05:21.600] result() for ClusterFuture ...
[16:05:21.600] - result already collected: FutureResult
[16:05:21.600] result() for ClusterFuture ... done
[16:05:21.600] signalConditions() ...
[16:05:21.600]  - include = ‘condition’
[16:05:21.601]  - exclude = ‘immediateCondition’
[16:05:21.601]  - resignal = TRUE
[16:05:21.601]  - Number of conditions: 1
[16:05:21.601]  - Condition #1: ‘MyError’, ‘error’, ‘condition’
[16:05:21.601] signalConditions() ... done
Testing with 2 cores ... DONE
> 
> 
> message("*** multisession() - too large globals ...")
*** multisession() - too large globals ...
> ooptsT <- options(future.globals.maxSize = object.size(1:1014))
> 
> limit <- getOption("future.globals.maxSize")
> cat(sprintf("Max total size of globals: %g bytes\n", limit))
Max total size of globals: 4104 bytes
> 
> for (workers in unique(c(1L, availableCores()))) {
+   ## Speed up CRAN checks: Skip on CRAN Windows 32-bit
+   if (!fullTest && isWin32) next
+   
+   message("Max number of sessions: ", workers)
+ 
+   ## A large object
+   a <- 1:1014
+   yTruth <- sum(a)
+   size <- object.size(a)
+   cat(sprintf("a: %g bytes\n", size))
+   f <- multisession({ sum(a) }, globals = TRUE, workers = workers)
+   print(f)
+   rm(list = "a")
+   v <- value(f)
+   print(v)
+   stopifnot(v == yTruth)
+ 
+ 
+   ## A too large object
+   a <- 1:1015
+   yTruth <- sum(a)
+   size <- object.size(a)
+   cat(sprintf("a: %g bytes\n", size))
+   res <- try(f <- multisession({ sum(a) }, globals = TRUE, workers = workers), silent = TRUE)
+   rm(list = "a")
+   stopifnot(inherits(res, "try-error"))
+ } ## for (workers in ...)
Max number of sessions: 1
a: 4104 bytes
[16:05:21.617] getGlobalsAndPackages() ...
[16:05:21.617] Searching for globals...
[16:05:21.618] - globals found: [3] ‘{’, ‘sum’, ‘a’
[16:05:21.618] Searching for globals ... DONE
[16:05:21.618] Resolving globals: FALSE
[16:05:21.618] The total size of the 1 globals is 4.01 KiB (4104 bytes)
[16:05:21.619] The total size of the 1 globals exported for future expression (‘{; sum(a); }’) is 4.01 KiB.. This exceeds the maximum allowed size of 4.01 KiB (option 'future.globals.maxSize'). There is one global: ‘a’ (4.01 KiB of class ‘numeric’)
[16:05:21.619] - globals: [1] ‘a’
[16:05:21.619] 
[16:05:21.619] getGlobalsAndPackages() ... DONE
SequentialFuture:
Label: ‘<none>’
Expression:
{
    sum(a)
}
Lazy evaluation: TRUE
Asynchronous evaluation: FALSE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: 1 objects totaling 4.01 KiB (integer ‘a’ of 4.01 KiB)
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: FALSE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: 44f0d080-a0af-4897-da8d-6d247098800b
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[16:05:21.620] Packages needed by the future expression (n = 0): <none>
[16:05:21.620] Packages needed by future strategies (n = 0): <none>
[16:05:21.620] {
[16:05:21.620]     {
[16:05:21.620]         {
[16:05:21.620]             ...future.startTime <- base::Sys.time()
[16:05:21.620]             {
[16:05:21.620]                 {
[16:05:21.620]                   {
[16:05:21.620]                     base::local({
[16:05:21.620]                       has_future <- base::requireNamespace("future", 
[16:05:21.620]                         quietly = TRUE)
[16:05:21.620]                       if (has_future) {
[16:05:21.620]                         ns <- base::getNamespace("future")
[16:05:21.620]                         version <- ns[[".package"]][["version"]]
[16:05:21.620]                         if (is.null(version)) 
[16:05:21.620]                           version <- utils::packageVersion("future")
[16:05:21.620]                       }
[16:05:21.620]                       else {
[16:05:21.620]                         version <- NULL
[16:05:21.620]                       }
[16:05:21.620]                       if (!has_future || version < "1.8.0") {
[16:05:21.620]                         info <- base::c(r_version = base::gsub("R version ", 
[16:05:21.620]                           "", base::R.version$version.string), 
[16:05:21.620]                           platform = base::sprintf("%s (%s-bit)", 
[16:05:21.620]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:05:21.620]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[16:05:21.620]                             "release", "version")], collapse = " "), 
[16:05:21.620]                           hostname = base::Sys.info()[["nodename"]])
[16:05:21.620]                         info <- base::sprintf("%s: %s", base::names(info), 
[16:05:21.620]                           info)
[16:05:21.620]                         info <- base::paste(info, collapse = "; ")
[16:05:21.620]                         if (!has_future) {
[16:05:21.620]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:05:21.620]                             info)
[16:05:21.620]                         }
[16:05:21.620]                         else {
[16:05:21.620]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:05:21.620]                             info, version)
[16:05:21.620]                         }
[16:05:21.620]                         base::stop(msg)
[16:05:21.620]                       }
[16:05:21.620]                     })
[16:05:21.620]                   }
[16:05:21.620]                   options(future.plan = NULL)
[16:05:21.620]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:05:21.620]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:05:21.620]                 }
[16:05:21.620]                 ...future.workdir <- getwd()
[16:05:21.620]             }
[16:05:21.620]             ...future.oldOptions <- base::as.list(base::.Options)
[16:05:21.620]             ...future.oldEnvVars <- base::Sys.getenv()
[16:05:21.620]         }
[16:05:21.620]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:05:21.620]             future.globals.maxSize = 4104, future.globals.method = NULL, 
[16:05:21.620]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:05:21.620]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:05:21.620]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:05:21.620]             future.stdout.windows.reencode = NULL, width = 80L)
[16:05:21.620]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:05:21.620]             base::names(...future.oldOptions))
[16:05:21.620]     }
[16:05:21.620]     if (FALSE) {
[16:05:21.620]     }
[16:05:21.620]     else {
[16:05:21.620]         if (TRUE) {
[16:05:21.620]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:05:21.620]                 open = "w")
[16:05:21.620]         }
[16:05:21.620]         else {
[16:05:21.620]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:05:21.620]                 windows = "NUL", "/dev/null"), open = "w")
[16:05:21.620]         }
[16:05:21.620]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:05:21.620]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:05:21.620]             base::sink(type = "output", split = FALSE)
[16:05:21.620]             base::close(...future.stdout)
[16:05:21.620]         }, add = TRUE)
[16:05:21.620]     }
[16:05:21.620]     ...future.frame <- base::sys.nframe()
[16:05:21.620]     ...future.conditions <- base::list()
[16:05:21.620]     ...future.rng <- base::globalenv()$.Random.seed
[16:05:21.620]     if (FALSE) {
[16:05:21.620]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:05:21.620]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:05:21.620]     }
[16:05:21.620]     ...future.result <- base::tryCatch({
[16:05:21.620]         base::withCallingHandlers({
[16:05:21.620]             ...future.value <- base::withVisible(base::local({
[16:05:21.620]                 sum(a)
[16:05:21.620]             }))
[16:05:21.620]             future::FutureResult(value = ...future.value$value, 
[16:05:21.620]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:05:21.620]                   ...future.rng), globalenv = if (FALSE) 
[16:05:21.620]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:05:21.620]                     ...future.globalenv.names))
[16:05:21.620]                 else NULL, started = ...future.startTime, version = "1.8")
[16:05:21.620]         }, condition = base::local({
[16:05:21.620]             c <- base::c
[16:05:21.620]             inherits <- base::inherits
[16:05:21.620]             invokeRestart <- base::invokeRestart
[16:05:21.620]             length <- base::length
[16:05:21.620]             list <- base::list
[16:05:21.620]             seq.int <- base::seq.int
[16:05:21.620]             signalCondition <- base::signalCondition
[16:05:21.620]             sys.calls <- base::sys.calls
[16:05:21.620]             `[[` <- base::`[[`
[16:05:21.620]             `+` <- base::`+`
[16:05:21.620]             `<<-` <- base::`<<-`
[16:05:21.620]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:05:21.620]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:05:21.620]                   3L)]
[16:05:21.620]             }
[16:05:21.620]             function(cond) {
[16:05:21.620]                 is_error <- inherits(cond, "error")
[16:05:21.620]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:05:21.620]                   NULL)
[16:05:21.620]                 if (is_error) {
[16:05:21.620]                   sessionInformation <- function() {
[16:05:21.620]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:05:21.620]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:05:21.620]                       search = base::search(), system = base::Sys.info())
[16:05:21.620]                   }
[16:05:21.620]                   ...future.conditions[[length(...future.conditions) + 
[16:05:21.620]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:05:21.620]                     cond$call), session = sessionInformation(), 
[16:05:21.620]                     timestamp = base::Sys.time(), signaled = 0L)
[16:05:21.620]                   signalCondition(cond)
[16:05:21.620]                 }
[16:05:21.620]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:05:21.620]                 "immediateCondition"))) {
[16:05:21.620]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:05:21.620]                   ...future.conditions[[length(...future.conditions) + 
[16:05:21.620]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:05:21.620]                   if (TRUE && !signal) {
[16:05:21.620]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:05:21.620]                     {
[16:05:21.620]                       inherits <- base::inherits
[16:05:21.620]                       invokeRestart <- base::invokeRestart
[16:05:21.620]                       is.null <- base::is.null
[16:05:21.620]                       muffled <- FALSE
[16:05:21.620]                       if (inherits(cond, "message")) {
[16:05:21.620]                         muffled <- grepl(pattern, "muffleMessage")
[16:05:21.620]                         if (muffled) 
[16:05:21.620]                           invokeRestart("muffleMessage")
[16:05:21.620]                       }
[16:05:21.620]                       else if (inherits(cond, "warning")) {
[16:05:21.620]                         muffled <- grepl(pattern, "muffleWarning")
[16:05:21.620]                         if (muffled) 
[16:05:21.620]                           invokeRestart("muffleWarning")
[16:05:21.620]                       }
[16:05:21.620]                       else if (inherits(cond, "condition")) {
[16:05:21.620]                         if (!is.null(pattern)) {
[16:05:21.620]                           computeRestarts <- base::computeRestarts
[16:05:21.620]                           grepl <- base::grepl
[16:05:21.620]                           restarts <- computeRestarts(cond)
[16:05:21.620]                           for (restart in restarts) {
[16:05:21.620]                             name <- restart$name
[16:05:21.620]                             if (is.null(name)) 
[16:05:21.620]                               next
[16:05:21.620]                             if (!grepl(pattern, name)) 
[16:05:21.620]                               next
[16:05:21.620]                             invokeRestart(restart)
[16:05:21.620]                             muffled <- TRUE
[16:05:21.620]                             break
[16:05:21.620]                           }
[16:05:21.620]                         }
[16:05:21.620]                       }
[16:05:21.620]                       invisible(muffled)
[16:05:21.620]                     }
[16:05:21.620]                     muffleCondition(cond, pattern = "^muffle")
[16:05:21.620]                   }
[16:05:21.620]                 }
[16:05:21.620]                 else {
[16:05:21.620]                   if (TRUE) {
[16:05:21.620]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:05:21.620]                     {
[16:05:21.620]                       inherits <- base::inherits
[16:05:21.620]                       invokeRestart <- base::invokeRestart
[16:05:21.620]                       is.null <- base::is.null
[16:05:21.620]                       muffled <- FALSE
[16:05:21.620]                       if (inherits(cond, "message")) {
[16:05:21.620]                         muffled <- grepl(pattern, "muffleMessage")
[16:05:21.620]                         if (muffled) 
[16:05:21.620]                           invokeRestart("muffleMessage")
[16:05:21.620]                       }
[16:05:21.620]                       else if (inherits(cond, "warning")) {
[16:05:21.620]                         muffled <- grepl(pattern, "muffleWarning")
[16:05:21.620]                         if (muffled) 
[16:05:21.620]                           invokeRestart("muffleWarning")
[16:05:21.620]                       }
[16:05:21.620]                       else if (inherits(cond, "condition")) {
[16:05:21.620]                         if (!is.null(pattern)) {
[16:05:21.620]                           computeRestarts <- base::computeRestarts
[16:05:21.620]                           grepl <- base::grepl
[16:05:21.620]                           restarts <- computeRestarts(cond)
[16:05:21.620]                           for (restart in restarts) {
[16:05:21.620]                             name <- restart$name
[16:05:21.620]                             if (is.null(name)) 
[16:05:21.620]                               next
[16:05:21.620]                             if (!grepl(pattern, name)) 
[16:05:21.620]                               next
[16:05:21.620]                             invokeRestart(restart)
[16:05:21.620]                             muffled <- TRUE
[16:05:21.620]                             break
[16:05:21.620]                           }
[16:05:21.620]                         }
[16:05:21.620]                       }
[16:05:21.620]                       invisible(muffled)
[16:05:21.620]                     }
[16:05:21.620]                     muffleCondition(cond, pattern = "^muffle")
[16:05:21.620]                   }
[16:05:21.620]                 }
[16:05:21.620]             }
[16:05:21.620]         }))
[16:05:21.620]     }, error = function(ex) {
[16:05:21.620]         base::structure(base::list(value = NULL, visible = NULL, 
[16:05:21.620]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:05:21.620]                 ...future.rng), started = ...future.startTime, 
[16:05:21.620]             finished = Sys.time(), session_uuid = NA_character_, 
[16:05:21.620]             version = "1.8"), class = "FutureResult")
[16:05:21.620]     }, finally = {
[16:05:21.620]         if (!identical(...future.workdir, getwd())) 
[16:05:21.620]             setwd(...future.workdir)
[16:05:21.620]         {
[16:05:21.620]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:05:21.620]                 ...future.oldOptions$nwarnings <- NULL
[16:05:21.620]             }
[16:05:21.620]             base::options(...future.oldOptions)
[16:05:21.620]             if (.Platform$OS.type == "windows") {
[16:05:21.620]                 old_names <- names(...future.oldEnvVars)
[16:05:21.620]                 envs <- base::Sys.getenv()
[16:05:21.620]                 names <- names(envs)
[16:05:21.620]                 common <- intersect(names, old_names)
[16:05:21.620]                 added <- setdiff(names, old_names)
[16:05:21.620]                 removed <- setdiff(old_names, names)
[16:05:21.620]                 changed <- common[...future.oldEnvVars[common] != 
[16:05:21.620]                   envs[common]]
[16:05:21.620]                 NAMES <- toupper(changed)
[16:05:21.620]                 args <- list()
[16:05:21.620]                 for (kk in seq_along(NAMES)) {
[16:05:21.620]                   name <- changed[[kk]]
[16:05:21.620]                   NAME <- NAMES[[kk]]
[16:05:21.620]                   if (name != NAME && is.element(NAME, old_names)) 
[16:05:21.620]                     next
[16:05:21.620]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:05:21.620]                 }
[16:05:21.620]                 NAMES <- toupper(added)
[16:05:21.620]                 for (kk in seq_along(NAMES)) {
[16:05:21.620]                   name <- added[[kk]]
[16:05:21.620]                   NAME <- NAMES[[kk]]
[16:05:21.620]                   if (name != NAME && is.element(NAME, old_names)) 
[16:05:21.620]                     next
[16:05:21.620]                   args[[name]] <- ""
[16:05:21.620]                 }
[16:05:21.620]                 NAMES <- toupper(removed)
[16:05:21.620]                 for (kk in seq_along(NAMES)) {
[16:05:21.620]                   name <- removed[[kk]]
[16:05:21.620]                   NAME <- NAMES[[kk]]
[16:05:21.620]                   if (name != NAME && is.element(NAME, old_names)) 
[16:05:21.620]                     next
[16:05:21.620]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:05:21.620]                 }
[16:05:21.620]                 if (length(args) > 0) 
[16:05:21.620]                   base::do.call(base::Sys.setenv, args = args)
[16:05:21.620]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:05:21.620]             }
[16:05:21.620]             else {
[16:05:21.620]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:05:21.620]             }
[16:05:21.620]             {
[16:05:21.620]                 if (base::length(...future.futureOptionsAdded) > 
[16:05:21.620]                   0L) {
[16:05:21.620]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:05:21.620]                   base::names(opts) <- ...future.futureOptionsAdded
[16:05:21.620]                   base::options(opts)
[16:05:21.620]                 }
[16:05:21.620]                 {
[16:05:21.620]                   {
[16:05:21.620]                     NULL
[16:05:21.620]                     RNGkind("Mersenne-Twister")
[16:05:21.620]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[16:05:21.620]                       inherits = FALSE)
[16:05:21.620]                   }
[16:05:21.620]                   options(future.plan = NULL)
[16:05:21.620]                   if (is.na(NA_character_)) 
[16:05:21.620]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:05:21.620]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:05:21.620]                   future::plan(list(function (..., envir = parent.frame()) 
[16:05:21.620]                   {
[16:05:21.620]                     future <- SequentialFuture(..., envir = envir)
[16:05:21.620]                     if (!future$lazy) 
[16:05:21.620]                       future <- run(future)
[16:05:21.620]                     invisible(future)
[16:05:21.620]                   }), .cleanup = FALSE, .init = FALSE)
[16:05:21.620]                 }
[16:05:21.620]             }
[16:05:21.620]         }
[16:05:21.620]     })
[16:05:21.620]     if (TRUE) {
[16:05:21.620]         base::sink(type = "output", split = FALSE)
[16:05:21.620]         if (TRUE) {
[16:05:21.620]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:05:21.620]         }
[16:05:21.620]         else {
[16:05:21.620]             ...future.result["stdout"] <- base::list(NULL)
[16:05:21.620]         }
[16:05:21.620]         base::close(...future.stdout)
[16:05:21.620]         ...future.stdout <- NULL
[16:05:21.620]     }
[16:05:21.620]     ...future.result$conditions <- ...future.conditions
[16:05:21.620]     ...future.result$finished <- base::Sys.time()
[16:05:21.620]     ...future.result
[16:05:21.620] }
[16:05:21.622] assign_globals() ...
[16:05:21.622] List of 1
[16:05:21.622]  $ a: int [1:1014] 1 2 3 4 5 6 7 8 9 10 ...
[16:05:21.622]  - attr(*, "where")=List of 1
[16:05:21.622]   ..$ a:<environment: R_EmptyEnv> 
[16:05:21.622]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[16:05:21.622]  - attr(*, "resolved")= logi FALSE
[16:05:21.622]  - attr(*, "total_size")= num 4104
[16:05:21.624] - copied ‘a’ to environment
[16:05:21.624] assign_globals() ... done
[16:05:21.625] plan(): Setting new future strategy stack:
[16:05:21.625] List of future strategies:
[16:05:21.625] 1. sequential:
[16:05:21.625]    - args: function (..., envir = parent.frame())
[16:05:21.625]    - tweaked: FALSE
[16:05:21.625]    - call: NULL
[16:05:21.625] plan(): nbrOfWorkers() = 1
[16:05:21.626] plan(): Setting new future strategy stack:
[16:05:21.626] List of future strategies:
[16:05:21.626] 1. sequential:
[16:05:21.626]    - args: function (..., envir = parent.frame())
[16:05:21.626]    - tweaked: FALSE
[16:05:21.626]    - call: future::plan("sequential")
[16:05:21.626] plan(): nbrOfWorkers() = 1
[16:05:21.626] SequentialFuture started (and completed)
[1] 514605
a: 4112 bytes
[16:05:21.627] getGlobalsAndPackages() ...
[16:05:21.627] Searching for globals...
[16:05:21.628] - globals found: [3] ‘{’, ‘sum’, ‘a’
[16:05:21.628] Searching for globals ... DONE
[16:05:21.628] Resolving globals: FALSE
[16:05:21.628] The total size of the 1 globals is 4.02 KiB (4112 bytes)
[16:05:21.628] The total size of the 1 globals exported for future expression (‘{; sum(a); }’) is 4.02 KiB.. This exceeds the maximum allowed size of 4.01 KiB (option 'future.globals.maxSize'). There is one global: ‘a’ (4.02 KiB of class ‘numeric’)
Max number of sessions: 2
a: 4104 bytes
[16:05:21.629] getGlobalsAndPackages() ...
[16:05:21.629] Searching for globals...
[16:05:21.630] - globals found: [3] ‘{’, ‘sum’, ‘a’
[16:05:21.630] Searching for globals ... DONE
[16:05:21.630] Resolving globals: FALSE
[16:05:21.630] The total size of the 1 globals is 4.01 KiB (4104 bytes)
[16:05:21.630] The total size of the 1 globals exported for future expression (‘{; sum(a); }’) is 4.01 KiB.. This exceeds the maximum allowed size of 4.01 KiB (option 'future.globals.maxSize'). There is one global: ‘a’ (4.01 KiB of class ‘numeric’)
[16:05:21.631] - globals: [1] ‘a’
[16:05:21.631] 
[16:05:21.631] getGlobalsAndPackages() ... DONE
[16:05:21.641] Packages needed by the future expression (n = 0): <none>
[16:05:21.641] Packages needed by future strategies (n = 0): <none>
[16:05:21.642] {
[16:05:21.642]     {
[16:05:21.642]         {
[16:05:21.642]             ...future.startTime <- base::Sys.time()
[16:05:21.642]             {
[16:05:21.642]                 {
[16:05:21.642]                   {
[16:05:21.642]                     {
[16:05:21.642]                       base::local({
[16:05:21.642]                         has_future <- base::requireNamespace("future", 
[16:05:21.642]                           quietly = TRUE)
[16:05:21.642]                         if (has_future) {
[16:05:21.642]                           ns <- base::getNamespace("future")
[16:05:21.642]                           version <- ns[[".package"]][["version"]]
[16:05:21.642]                           if (is.null(version)) 
[16:05:21.642]                             version <- utils::packageVersion("future")
[16:05:21.642]                         }
[16:05:21.642]                         else {
[16:05:21.642]                           version <- NULL
[16:05:21.642]                         }
[16:05:21.642]                         if (!has_future || version < "1.8.0") {
[16:05:21.642]                           info <- base::c(r_version = base::gsub("R version ", 
[16:05:21.642]                             "", base::R.version$version.string), 
[16:05:21.642]                             platform = base::sprintf("%s (%s-bit)", 
[16:05:21.642]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:05:21.642]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[16:05:21.642]                               "release", "version")], collapse = " "), 
[16:05:21.642]                             hostname = base::Sys.info()[["nodename"]])
[16:05:21.642]                           info <- base::sprintf("%s: %s", base::names(info), 
[16:05:21.642]                             info)
[16:05:21.642]                           info <- base::paste(info, collapse = "; ")
[16:05:21.642]                           if (!has_future) {
[16:05:21.642]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:05:21.642]                               info)
[16:05:21.642]                           }
[16:05:21.642]                           else {
[16:05:21.642]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:05:21.642]                               info, version)
[16:05:21.642]                           }
[16:05:21.642]                           base::stop(msg)
[16:05:21.642]                         }
[16:05:21.642]                       })
[16:05:21.642]                     }
[16:05:21.642]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[16:05:21.642]                     base::options(mc.cores = 1L)
[16:05:21.642]                   }
[16:05:21.642]                   options(future.plan = NULL)
[16:05:21.642]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:05:21.642]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:05:21.642]                 }
[16:05:21.642]                 ...future.workdir <- getwd()
[16:05:21.642]             }
[16:05:21.642]             ...future.oldOptions <- base::as.list(base::.Options)
[16:05:21.642]             ...future.oldEnvVars <- base::Sys.getenv()
[16:05:21.642]         }
[16:05:21.642]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:05:21.642]             future.globals.maxSize = 4104, future.globals.method = NULL, 
[16:05:21.642]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:05:21.642]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:05:21.642]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:05:21.642]             future.stdout.windows.reencode = NULL, width = 80L)
[16:05:21.642]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:05:21.642]             base::names(...future.oldOptions))
[16:05:21.642]     }
[16:05:21.642]     if (FALSE) {
[16:05:21.642]     }
[16:05:21.642]     else {
[16:05:21.642]         if (TRUE) {
[16:05:21.642]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:05:21.642]                 open = "w")
[16:05:21.642]         }
[16:05:21.642]         else {
[16:05:21.642]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:05:21.642]                 windows = "NUL", "/dev/null"), open = "w")
[16:05:21.642]         }
[16:05:21.642]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:05:21.642]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:05:21.642]             base::sink(type = "output", split = FALSE)
[16:05:21.642]             base::close(...future.stdout)
[16:05:21.642]         }, add = TRUE)
[16:05:21.642]     }
[16:05:21.642]     ...future.frame <- base::sys.nframe()
[16:05:21.642]     ...future.conditions <- base::list()
[16:05:21.642]     ...future.rng <- base::globalenv()$.Random.seed
[16:05:21.642]     if (FALSE) {
[16:05:21.642]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:05:21.642]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:05:21.642]     }
[16:05:21.642]     ...future.result <- base::tryCatch({
[16:05:21.642]         base::withCallingHandlers({
[16:05:21.642]             ...future.value <- base::withVisible(base::local({
[16:05:21.642]                 ...future.makeSendCondition <- base::local({
[16:05:21.642]                   sendCondition <- NULL
[16:05:21.642]                   function(frame = 1L) {
[16:05:21.642]                     if (is.function(sendCondition)) 
[16:05:21.642]                       return(sendCondition)
[16:05:21.642]                     ns <- getNamespace("parallel")
[16:05:21.642]                     if (exists("sendData", mode = "function", 
[16:05:21.642]                       envir = ns)) {
[16:05:21.642]                       parallel_sendData <- get("sendData", mode = "function", 
[16:05:21.642]                         envir = ns)
[16:05:21.642]                       envir <- sys.frame(frame)
[16:05:21.642]                       master <- NULL
[16:05:21.642]                       while (!identical(envir, .GlobalEnv) && 
[16:05:21.642]                         !identical(envir, emptyenv())) {
[16:05:21.642]                         if (exists("master", mode = "list", envir = envir, 
[16:05:21.642]                           inherits = FALSE)) {
[16:05:21.642]                           master <- get("master", mode = "list", 
[16:05:21.642]                             envir = envir, inherits = FALSE)
[16:05:21.642]                           if (inherits(master, c("SOCKnode", 
[16:05:21.642]                             "SOCK0node"))) {
[16:05:21.642]                             sendCondition <<- function(cond) {
[16:05:21.642]                               data <- list(type = "VALUE", value = cond, 
[16:05:21.642]                                 success = TRUE)
[16:05:21.642]                               parallel_sendData(master, data)
[16:05:21.642]                             }
[16:05:21.642]                             return(sendCondition)
[16:05:21.642]                           }
[16:05:21.642]                         }
[16:05:21.642]                         frame <- frame + 1L
[16:05:21.642]                         envir <- sys.frame(frame)
[16:05:21.642]                       }
[16:05:21.642]                     }
[16:05:21.642]                     sendCondition <<- function(cond) NULL
[16:05:21.642]                   }
[16:05:21.642]                 })
[16:05:21.642]                 withCallingHandlers({
[16:05:21.642]                   {
[16:05:21.642]                     sum(a)
[16:05:21.642]                   }
[16:05:21.642]                 }, immediateCondition = function(cond) {
[16:05:21.642]                   sendCondition <- ...future.makeSendCondition()
[16:05:21.642]                   sendCondition(cond)
[16:05:21.642]                   muffleCondition <- function (cond, pattern = "^muffle") 
[16:05:21.642]                   {
[16:05:21.642]                     inherits <- base::inherits
[16:05:21.642]                     invokeRestart <- base::invokeRestart
[16:05:21.642]                     is.null <- base::is.null
[16:05:21.642]                     muffled <- FALSE
[16:05:21.642]                     if (inherits(cond, "message")) {
[16:05:21.642]                       muffled <- grepl(pattern, "muffleMessage")
[16:05:21.642]                       if (muffled) 
[16:05:21.642]                         invokeRestart("muffleMessage")
[16:05:21.642]                     }
[16:05:21.642]                     else if (inherits(cond, "warning")) {
[16:05:21.642]                       muffled <- grepl(pattern, "muffleWarning")
[16:05:21.642]                       if (muffled) 
[16:05:21.642]                         invokeRestart("muffleWarning")
[16:05:21.642]                     }
[16:05:21.642]                     else if (inherits(cond, "condition")) {
[16:05:21.642]                       if (!is.null(pattern)) {
[16:05:21.642]                         computeRestarts <- base::computeRestarts
[16:05:21.642]                         grepl <- base::grepl
[16:05:21.642]                         restarts <- computeRestarts(cond)
[16:05:21.642]                         for (restart in restarts) {
[16:05:21.642]                           name <- restart$name
[16:05:21.642]                           if (is.null(name)) 
[16:05:21.642]                             next
[16:05:21.642]                           if (!grepl(pattern, name)) 
[16:05:21.642]                             next
[16:05:21.642]                           invokeRestart(restart)
[16:05:21.642]                           muffled <- TRUE
[16:05:21.642]                           break
[16:05:21.642]                         }
[16:05:21.642]                       }
[16:05:21.642]                     }
[16:05:21.642]                     invisible(muffled)
[16:05:21.642]                   }
[16:05:21.642]                   muffleCondition(cond)
[16:05:21.642]                 })
[16:05:21.642]             }))
[16:05:21.642]             future::FutureResult(value = ...future.value$value, 
[16:05:21.642]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:05:21.642]                   ...future.rng), globalenv = if (FALSE) 
[16:05:21.642]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:05:21.642]                     ...future.globalenv.names))
[16:05:21.642]                 else NULL, started = ...future.startTime, version = "1.8")
[16:05:21.642]         }, condition = base::local({
[16:05:21.642]             c <- base::c
[16:05:21.642]             inherits <- base::inherits
[16:05:21.642]             invokeRestart <- base::invokeRestart
[16:05:21.642]             length <- base::length
[16:05:21.642]             list <- base::list
[16:05:21.642]             seq.int <- base::seq.int
[16:05:21.642]             signalCondition <- base::signalCondition
[16:05:21.642]             sys.calls <- base::sys.calls
[16:05:21.642]             `[[` <- base::`[[`
[16:05:21.642]             `+` <- base::`+`
[16:05:21.642]             `<<-` <- base::`<<-`
[16:05:21.642]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:05:21.642]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:05:21.642]                   3L)]
[16:05:21.642]             }
[16:05:21.642]             function(cond) {
[16:05:21.642]                 is_error <- inherits(cond, "error")
[16:05:21.642]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:05:21.642]                   NULL)
[16:05:21.642]                 if (is_error) {
[16:05:21.642]                   sessionInformation <- function() {
[16:05:21.642]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:05:21.642]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:05:21.642]                       search = base::search(), system = base::Sys.info())
[16:05:21.642]                   }
[16:05:21.642]                   ...future.conditions[[length(...future.conditions) + 
[16:05:21.642]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:05:21.642]                     cond$call), session = sessionInformation(), 
[16:05:21.642]                     timestamp = base::Sys.time(), signaled = 0L)
[16:05:21.642]                   signalCondition(cond)
[16:05:21.642]                 }
[16:05:21.642]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:05:21.642]                 "immediateCondition"))) {
[16:05:21.642]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:05:21.642]                   ...future.conditions[[length(...future.conditions) + 
[16:05:21.642]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:05:21.642]                   if (TRUE && !signal) {
[16:05:21.642]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:05:21.642]                     {
[16:05:21.642]                       inherits <- base::inherits
[16:05:21.642]                       invokeRestart <- base::invokeRestart
[16:05:21.642]                       is.null <- base::is.null
[16:05:21.642]                       muffled <- FALSE
[16:05:21.642]                       if (inherits(cond, "message")) {
[16:05:21.642]                         muffled <- grepl(pattern, "muffleMessage")
[16:05:21.642]                         if (muffled) 
[16:05:21.642]                           invokeRestart("muffleMessage")
[16:05:21.642]                       }
[16:05:21.642]                       else if (inherits(cond, "warning")) {
[16:05:21.642]                         muffled <- grepl(pattern, "muffleWarning")
[16:05:21.642]                         if (muffled) 
[16:05:21.642]                           invokeRestart("muffleWarning")
[16:05:21.642]                       }
[16:05:21.642]                       else if (inherits(cond, "condition")) {
[16:05:21.642]                         if (!is.null(pattern)) {
[16:05:21.642]                           computeRestarts <- base::computeRestarts
[16:05:21.642]                           grepl <- base::grepl
[16:05:21.642]                           restarts <- computeRestarts(cond)
[16:05:21.642]                           for (restart in restarts) {
[16:05:21.642]                             name <- restart$name
[16:05:21.642]                             if (is.null(name)) 
[16:05:21.642]                               next
[16:05:21.642]                             if (!grepl(pattern, name)) 
[16:05:21.642]                               next
[16:05:21.642]                             invokeRestart(restart)
[16:05:21.642]                             muffled <- TRUE
[16:05:21.642]                             break
[16:05:21.642]                           }
[16:05:21.642]                         }
[16:05:21.642]                       }
[16:05:21.642]                       invisible(muffled)
[16:05:21.642]                     }
[16:05:21.642]                     muffleCondition(cond, pattern = "^muffle")
[16:05:21.642]                   }
[16:05:21.642]                 }
[16:05:21.642]                 else {
[16:05:21.642]                   if (TRUE) {
[16:05:21.642]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:05:21.642]                     {
[16:05:21.642]                       inherits <- base::inherits
[16:05:21.642]                       invokeRestart <- base::invokeRestart
[16:05:21.642]                       is.null <- base::is.null
[16:05:21.642]                       muffled <- FALSE
[16:05:21.642]                       if (inherits(cond, "message")) {
[16:05:21.642]                         muffled <- grepl(pattern, "muffleMessage")
[16:05:21.642]                         if (muffled) 
[16:05:21.642]                           invokeRestart("muffleMessage")
[16:05:21.642]                       }
[16:05:21.642]                       else if (inherits(cond, "warning")) {
[16:05:21.642]                         muffled <- grepl(pattern, "muffleWarning")
[16:05:21.642]                         if (muffled) 
[16:05:21.642]                           invokeRestart("muffleWarning")
[16:05:21.642]                       }
[16:05:21.642]                       else if (inherits(cond, "condition")) {
[16:05:21.642]                         if (!is.null(pattern)) {
[16:05:21.642]                           computeRestarts <- base::computeRestarts
[16:05:21.642]                           grepl <- base::grepl
[16:05:21.642]                           restarts <- computeRestarts(cond)
[16:05:21.642]                           for (restart in restarts) {
[16:05:21.642]                             name <- restart$name
[16:05:21.642]                             if (is.null(name)) 
[16:05:21.642]                               next
[16:05:21.642]                             if (!grepl(pattern, name)) 
[16:05:21.642]                               next
[16:05:21.642]                             invokeRestart(restart)
[16:05:21.642]                             muffled <- TRUE
[16:05:21.642]                             break
[16:05:21.642]                           }
[16:05:21.642]                         }
[16:05:21.642]                       }
[16:05:21.642]                       invisible(muffled)
[16:05:21.642]                     }
[16:05:21.642]                     muffleCondition(cond, pattern = "^muffle")
[16:05:21.642]                   }
[16:05:21.642]                 }
[16:05:21.642]             }
[16:05:21.642]         }))
[16:05:21.642]     }, error = function(ex) {
[16:05:21.642]         base::structure(base::list(value = NULL, visible = NULL, 
[16:05:21.642]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:05:21.642]                 ...future.rng), started = ...future.startTime, 
[16:05:21.642]             finished = Sys.time(), session_uuid = NA_character_, 
[16:05:21.642]             version = "1.8"), class = "FutureResult")
[16:05:21.642]     }, finally = {
[16:05:21.642]         if (!identical(...future.workdir, getwd())) 
[16:05:21.642]             setwd(...future.workdir)
[16:05:21.642]         {
[16:05:21.642]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:05:21.642]                 ...future.oldOptions$nwarnings <- NULL
[16:05:21.642]             }
[16:05:21.642]             base::options(...future.oldOptions)
[16:05:21.642]             if (.Platform$OS.type == "windows") {
[16:05:21.642]                 old_names <- names(...future.oldEnvVars)
[16:05:21.642]                 envs <- base::Sys.getenv()
[16:05:21.642]                 names <- names(envs)
[16:05:21.642]                 common <- intersect(names, old_names)
[16:05:21.642]                 added <- setdiff(names, old_names)
[16:05:21.642]                 removed <- setdiff(old_names, names)
[16:05:21.642]                 changed <- common[...future.oldEnvVars[common] != 
[16:05:21.642]                   envs[common]]
[16:05:21.642]                 NAMES <- toupper(changed)
[16:05:21.642]                 args <- list()
[16:05:21.642]                 for (kk in seq_along(NAMES)) {
[16:05:21.642]                   name <- changed[[kk]]
[16:05:21.642]                   NAME <- NAMES[[kk]]
[16:05:21.642]                   if (name != NAME && is.element(NAME, old_names)) 
[16:05:21.642]                     next
[16:05:21.642]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:05:21.642]                 }
[16:05:21.642]                 NAMES <- toupper(added)
[16:05:21.642]                 for (kk in seq_along(NAMES)) {
[16:05:21.642]                   name <- added[[kk]]
[16:05:21.642]                   NAME <- NAMES[[kk]]
[16:05:21.642]                   if (name != NAME && is.element(NAME, old_names)) 
[16:05:21.642]                     next
[16:05:21.642]                   args[[name]] <- ""
[16:05:21.642]                 }
[16:05:21.642]                 NAMES <- toupper(removed)
[16:05:21.642]                 for (kk in seq_along(NAMES)) {
[16:05:21.642]                   name <- removed[[kk]]
[16:05:21.642]                   NAME <- NAMES[[kk]]
[16:05:21.642]                   if (name != NAME && is.element(NAME, old_names)) 
[16:05:21.642]                     next
[16:05:21.642]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:05:21.642]                 }
[16:05:21.642]                 if (length(args) > 0) 
[16:05:21.642]                   base::do.call(base::Sys.setenv, args = args)
[16:05:21.642]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:05:21.642]             }
[16:05:21.642]             else {
[16:05:21.642]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:05:21.642]             }
[16:05:21.642]             {
[16:05:21.642]                 if (base::length(...future.futureOptionsAdded) > 
[16:05:21.642]                   0L) {
[16:05:21.642]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:05:21.642]                   base::names(opts) <- ...future.futureOptionsAdded
[16:05:21.642]                   base::options(opts)
[16:05:21.642]                 }
[16:05:21.642]                 {
[16:05:21.642]                   {
[16:05:21.642]                     base::options(mc.cores = ...future.mc.cores.old)
[16:05:21.642]                     NULL
[16:05:21.642]                   }
[16:05:21.642]                   options(future.plan = NULL)
[16:05:21.642]                   if (is.na(NA_character_)) 
[16:05:21.642]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:05:21.642]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:05:21.642]                   future::plan(list(function (..., envir = parent.frame()) 
[16:05:21.642]                   {
[16:05:21.642]                     future <- SequentialFuture(..., envir = envir)
[16:05:21.642]                     if (!future$lazy) 
[16:05:21.642]                       future <- run(future)
[16:05:21.642]                     invisible(future)
[16:05:21.642]                   }), .cleanup = FALSE, .init = FALSE)
[16:05:21.642]                 }
[16:05:21.642]             }
[16:05:21.642]         }
[16:05:21.642]     })
[16:05:21.642]     if (TRUE) {
[16:05:21.642]         base::sink(type = "output", split = FALSE)
[16:05:21.642]         if (TRUE) {
[16:05:21.642]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:05:21.642]         }
[16:05:21.642]         else {
[16:05:21.642]             ...future.result["stdout"] <- base::list(NULL)
[16:05:21.642]         }
[16:05:21.642]         base::close(...future.stdout)
[16:05:21.642]         ...future.stdout <- NULL
[16:05:21.642]     }
[16:05:21.642]     ...future.result$conditions <- ...future.conditions
[16:05:21.642]     ...future.result$finished <- base::Sys.time()
[16:05:21.642]     ...future.result
[16:05:21.642] }
[16:05:21.644] Exporting 1 global objects (4.01 KiB) to cluster node #1 ...
[16:05:21.645] Exporting ‘a’ (4.01 KiB) to cluster node #1 ...
[16:05:21.645] Exporting ‘a’ (4.01 KiB) to cluster node #1 ... DONE
[16:05:21.645] Exporting 1 global objects (4.01 KiB) to cluster node #1 ... DONE
[16:05:21.646] MultisessionFuture started
MultisessionFuture:
Label: ‘<none>’
Expression:
{
    sum(a)
}
Lazy evaluation: FALSE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: 1 objects totaling 4.01 KiB (integer ‘a’ of 4.01 KiB)
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: FALSE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: 44f0d080-a0af-4897-da8d-6d247098800b
Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[16:05:21.657] result() for ClusterFuture ...
[16:05:21.657] receiveMessageFromWorker() for ClusterFuture ...
[16:05:21.657] - Validating connection of MultisessionFuture
[16:05:21.688] - received message: FutureResult
[16:05:21.688] - Received FutureResult
[16:05:21.689] - Erased future from FutureRegistry
[16:05:21.689] result() for ClusterFuture ...
[16:05:21.689] - result already collected: FutureResult
[16:05:21.689] result() for ClusterFuture ... done
[16:05:21.689] receiveMessageFromWorker() for ClusterFuture ... done
[16:05:21.689] result() for ClusterFuture ... done
[16:05:21.689] result() for ClusterFuture ...
[16:05:21.689] - result already collected: FutureResult
[16:05:21.689] result() for ClusterFuture ... done
[1] 514605
a: 4112 bytes
[16:05:21.690] getGlobalsAndPackages() ...
[16:05:21.690] Searching for globals...
[16:05:21.690] - globals found: [3] ‘{’, ‘sum’, ‘a’
[16:05:21.691] Searching for globals ... DONE
[16:05:21.691] Resolving globals: FALSE
[16:05:21.691] The total size of the 1 globals is 4.02 KiB (4112 bytes)
[16:05:21.691] The total size of the 1 globals exported for future expression (‘{; sum(a); }’) is 4.02 KiB.. This exceeds the maximum allowed size of 4.01 KiB (option 'future.globals.maxSize'). There is one global: ‘a’ (4.02 KiB of class ‘numeric’)
> 
> ## Undo options changed in this test
> options(ooptsT)
> 
> message("*** multisession() - too large globals ... DONE")
*** multisession() - too large globals ... DONE
> 
> message("*** multisession(..., workers = 1L) ...")
*** multisession(..., workers = 1L) ...
> 
> a <- 2
> b <- 3
> yTruth <- a * b
> 
> f <- multisession({ a * b }, globals = TRUE, workers = 1L)
[16:05:21.692] getGlobalsAndPackages() ...
[16:05:21.692] Searching for globals...
[16:05:21.693] - globals found: [4] ‘{’, ‘*’, ‘a’, ‘b’
[16:05:21.693] Searching for globals ... DONE
[16:05:21.693] Resolving globals: FALSE
[16:05:21.693] The total size of the 2 globals is 112 bytes (112 bytes)
[16:05:21.694] The total size of the 2 globals exported for future expression (‘{; a * b; }’) is 112 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘a’ (56 bytes of class ‘numeric’) and ‘b’ (56 bytes of class ‘numeric’)
[16:05:21.694] - globals: [2] ‘a’, ‘b’
[16:05:21.694] 
[16:05:21.694] getGlobalsAndPackages() ... DONE
> rm(list = c("a", "b"))
> 
> v <- value(f)
[16:05:21.694] Packages needed by the future expression (n = 0): <none>
[16:05:21.694] Packages needed by future strategies (n = 0): <none>
[16:05:21.695] {
[16:05:21.695]     {
[16:05:21.695]         {
[16:05:21.695]             ...future.startTime <- base::Sys.time()
[16:05:21.695]             {
[16:05:21.695]                 {
[16:05:21.695]                   {
[16:05:21.695]                     base::local({
[16:05:21.695]                       has_future <- base::requireNamespace("future", 
[16:05:21.695]                         quietly = TRUE)
[16:05:21.695]                       if (has_future) {
[16:05:21.695]                         ns <- base::getNamespace("future")
[16:05:21.695]                         version <- ns[[".package"]][["version"]]
[16:05:21.695]                         if (is.null(version)) 
[16:05:21.695]                           version <- utils::packageVersion("future")
[16:05:21.695]                       }
[16:05:21.695]                       else {
[16:05:21.695]                         version <- NULL
[16:05:21.695]                       }
[16:05:21.695]                       if (!has_future || version < "1.8.0") {
[16:05:21.695]                         info <- base::c(r_version = base::gsub("R version ", 
[16:05:21.695]                           "", base::R.version$version.string), 
[16:05:21.695]                           platform = base::sprintf("%s (%s-bit)", 
[16:05:21.695]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:05:21.695]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[16:05:21.695]                             "release", "version")], collapse = " "), 
[16:05:21.695]                           hostname = base::Sys.info()[["nodename"]])
[16:05:21.695]                         info <- base::sprintf("%s: %s", base::names(info), 
[16:05:21.695]                           info)
[16:05:21.695]                         info <- base::paste(info, collapse = "; ")
[16:05:21.695]                         if (!has_future) {
[16:05:21.695]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:05:21.695]                             info)
[16:05:21.695]                         }
[16:05:21.695]                         else {
[16:05:21.695]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:05:21.695]                             info, version)
[16:05:21.695]                         }
[16:05:21.695]                         base::stop(msg)
[16:05:21.695]                       }
[16:05:21.695]                     })
[16:05:21.695]                   }
[16:05:21.695]                   options(future.plan = NULL)
[16:05:21.695]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:05:21.695]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:05:21.695]                 }
[16:05:21.695]                 ...future.workdir <- getwd()
[16:05:21.695]             }
[16:05:21.695]             ...future.oldOptions <- base::as.list(base::.Options)
[16:05:21.695]             ...future.oldEnvVars <- base::Sys.getenv()
[16:05:21.695]         }
[16:05:21.695]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:05:21.695]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:05:21.695]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:05:21.695]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:05:21.695]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:05:21.695]             future.stdout.windows.reencode = NULL, width = 80L)
[16:05:21.695]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:05:21.695]             base::names(...future.oldOptions))
[16:05:21.695]     }
[16:05:21.695]     if (FALSE) {
[16:05:21.695]     }
[16:05:21.695]     else {
[16:05:21.695]         if (TRUE) {
[16:05:21.695]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:05:21.695]                 open = "w")
[16:05:21.695]         }
[16:05:21.695]         else {
[16:05:21.695]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:05:21.695]                 windows = "NUL", "/dev/null"), open = "w")
[16:05:21.695]         }
[16:05:21.695]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:05:21.695]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:05:21.695]             base::sink(type = "output", split = FALSE)
[16:05:21.695]             base::close(...future.stdout)
[16:05:21.695]         }, add = TRUE)
[16:05:21.695]     }
[16:05:21.695]     ...future.frame <- base::sys.nframe()
[16:05:21.695]     ...future.conditions <- base::list()
[16:05:21.695]     ...future.rng <- base::globalenv()$.Random.seed
[16:05:21.695]     if (FALSE) {
[16:05:21.695]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:05:21.695]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:05:21.695]     }
[16:05:21.695]     ...future.result <- base::tryCatch({
[16:05:21.695]         base::withCallingHandlers({
[16:05:21.695]             ...future.value <- base::withVisible(base::local({
[16:05:21.695]                 a * b
[16:05:21.695]             }))
[16:05:21.695]             future::FutureResult(value = ...future.value$value, 
[16:05:21.695]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:05:21.695]                   ...future.rng), globalenv = if (FALSE) 
[16:05:21.695]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:05:21.695]                     ...future.globalenv.names))
[16:05:21.695]                 else NULL, started = ...future.startTime, version = "1.8")
[16:05:21.695]         }, condition = base::local({
[16:05:21.695]             c <- base::c
[16:05:21.695]             inherits <- base::inherits
[16:05:21.695]             invokeRestart <- base::invokeRestart
[16:05:21.695]             length <- base::length
[16:05:21.695]             list <- base::list
[16:05:21.695]             seq.int <- base::seq.int
[16:05:21.695]             signalCondition <- base::signalCondition
[16:05:21.695]             sys.calls <- base::sys.calls
[16:05:21.695]             `[[` <- base::`[[`
[16:05:21.695]             `+` <- base::`+`
[16:05:21.695]             `<<-` <- base::`<<-`
[16:05:21.695]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:05:21.695]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:05:21.695]                   3L)]
[16:05:21.695]             }
[16:05:21.695]             function(cond) {
[16:05:21.695]                 is_error <- inherits(cond, "error")
[16:05:21.695]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:05:21.695]                   NULL)
[16:05:21.695]                 if (is_error) {
[16:05:21.695]                   sessionInformation <- function() {
[16:05:21.695]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:05:21.695]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:05:21.695]                       search = base::search(), system = base::Sys.info())
[16:05:21.695]                   }
[16:05:21.695]                   ...future.conditions[[length(...future.conditions) + 
[16:05:21.695]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:05:21.695]                     cond$call), session = sessionInformation(), 
[16:05:21.695]                     timestamp = base::Sys.time(), signaled = 0L)
[16:05:21.695]                   signalCondition(cond)
[16:05:21.695]                 }
[16:05:21.695]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:05:21.695]                 "immediateCondition"))) {
[16:05:21.695]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:05:21.695]                   ...future.conditions[[length(...future.conditions) + 
[16:05:21.695]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:05:21.695]                   if (TRUE && !signal) {
[16:05:21.695]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:05:21.695]                     {
[16:05:21.695]                       inherits <- base::inherits
[16:05:21.695]                       invokeRestart <- base::invokeRestart
[16:05:21.695]                       is.null <- base::is.null
[16:05:21.695]                       muffled <- FALSE
[16:05:21.695]                       if (inherits(cond, "message")) {
[16:05:21.695]                         muffled <- grepl(pattern, "muffleMessage")
[16:05:21.695]                         if (muffled) 
[16:05:21.695]                           invokeRestart("muffleMessage")
[16:05:21.695]                       }
[16:05:21.695]                       else if (inherits(cond, "warning")) {
[16:05:21.695]                         muffled <- grepl(pattern, "muffleWarning")
[16:05:21.695]                         if (muffled) 
[16:05:21.695]                           invokeRestart("muffleWarning")
[16:05:21.695]                       }
[16:05:21.695]                       else if (inherits(cond, "condition")) {
[16:05:21.695]                         if (!is.null(pattern)) {
[16:05:21.695]                           computeRestarts <- base::computeRestarts
[16:05:21.695]                           grepl <- base::grepl
[16:05:21.695]                           restarts <- computeRestarts(cond)
[16:05:21.695]                           for (restart in restarts) {
[16:05:21.695]                             name <- restart$name
[16:05:21.695]                             if (is.null(name)) 
[16:05:21.695]                               next
[16:05:21.695]                             if (!grepl(pattern, name)) 
[16:05:21.695]                               next
[16:05:21.695]                             invokeRestart(restart)
[16:05:21.695]                             muffled <- TRUE
[16:05:21.695]                             break
[16:05:21.695]                           }
[16:05:21.695]                         }
[16:05:21.695]                       }
[16:05:21.695]                       invisible(muffled)
[16:05:21.695]                     }
[16:05:21.695]                     muffleCondition(cond, pattern = "^muffle")
[16:05:21.695]                   }
[16:05:21.695]                 }
[16:05:21.695]                 else {
[16:05:21.695]                   if (TRUE) {
[16:05:21.695]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:05:21.695]                     {
[16:05:21.695]                       inherits <- base::inherits
[16:05:21.695]                       invokeRestart <- base::invokeRestart
[16:05:21.695]                       is.null <- base::is.null
[16:05:21.695]                       muffled <- FALSE
[16:05:21.695]                       if (inherits(cond, "message")) {
[16:05:21.695]                         muffled <- grepl(pattern, "muffleMessage")
[16:05:21.695]                         if (muffled) 
[16:05:21.695]                           invokeRestart("muffleMessage")
[16:05:21.695]                       }
[16:05:21.695]                       else if (inherits(cond, "warning")) {
[16:05:21.695]                         muffled <- grepl(pattern, "muffleWarning")
[16:05:21.695]                         if (muffled) 
[16:05:21.695]                           invokeRestart("muffleWarning")
[16:05:21.695]                       }
[16:05:21.695]                       else if (inherits(cond, "condition")) {
[16:05:21.695]                         if (!is.null(pattern)) {
[16:05:21.695]                           computeRestarts <- base::computeRestarts
[16:05:21.695]                           grepl <- base::grepl
[16:05:21.695]                           restarts <- computeRestarts(cond)
[16:05:21.695]                           for (restart in restarts) {
[16:05:21.695]                             name <- restart$name
[16:05:21.695]                             if (is.null(name)) 
[16:05:21.695]                               next
[16:05:21.695]                             if (!grepl(pattern, name)) 
[16:05:21.695]                               next
[16:05:21.695]                             invokeRestart(restart)
[16:05:21.695]                             muffled <- TRUE
[16:05:21.695]                             break
[16:05:21.695]                           }
[16:05:21.695]                         }
[16:05:21.695]                       }
[16:05:21.695]                       invisible(muffled)
[16:05:21.695]                     }
[16:05:21.695]                     muffleCondition(cond, pattern = "^muffle")
[16:05:21.695]                   }
[16:05:21.695]                 }
[16:05:21.695]             }
[16:05:21.695]         }))
[16:05:21.695]     }, error = function(ex) {
[16:05:21.695]         base::structure(base::list(value = NULL, visible = NULL, 
[16:05:21.695]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:05:21.695]                 ...future.rng), started = ...future.startTime, 
[16:05:21.695]             finished = Sys.time(), session_uuid = NA_character_, 
[16:05:21.695]             version = "1.8"), class = "FutureResult")
[16:05:21.695]     }, finally = {
[16:05:21.695]         if (!identical(...future.workdir, getwd())) 
[16:05:21.695]             setwd(...future.workdir)
[16:05:21.695]         {
[16:05:21.695]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:05:21.695]                 ...future.oldOptions$nwarnings <- NULL
[16:05:21.695]             }
[16:05:21.695]             base::options(...future.oldOptions)
[16:05:21.695]             if (.Platform$OS.type == "windows") {
[16:05:21.695]                 old_names <- names(...future.oldEnvVars)
[16:05:21.695]                 envs <- base::Sys.getenv()
[16:05:21.695]                 names <- names(envs)
[16:05:21.695]                 common <- intersect(names, old_names)
[16:05:21.695]                 added <- setdiff(names, old_names)
[16:05:21.695]                 removed <- setdiff(old_names, names)
[16:05:21.695]                 changed <- common[...future.oldEnvVars[common] != 
[16:05:21.695]                   envs[common]]
[16:05:21.695]                 NAMES <- toupper(changed)
[16:05:21.695]                 args <- list()
[16:05:21.695]                 for (kk in seq_along(NAMES)) {
[16:05:21.695]                   name <- changed[[kk]]
[16:05:21.695]                   NAME <- NAMES[[kk]]
[16:05:21.695]                   if (name != NAME && is.element(NAME, old_names)) 
[16:05:21.695]                     next
[16:05:21.695]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:05:21.695]                 }
[16:05:21.695]                 NAMES <- toupper(added)
[16:05:21.695]                 for (kk in seq_along(NAMES)) {
[16:05:21.695]                   name <- added[[kk]]
[16:05:21.695]                   NAME <- NAMES[[kk]]
[16:05:21.695]                   if (name != NAME && is.element(NAME, old_names)) 
[16:05:21.695]                     next
[16:05:21.695]                   args[[name]] <- ""
[16:05:21.695]                 }
[16:05:21.695]                 NAMES <- toupper(removed)
[16:05:21.695]                 for (kk in seq_along(NAMES)) {
[16:05:21.695]                   name <- removed[[kk]]
[16:05:21.695]                   NAME <- NAMES[[kk]]
[16:05:21.695]                   if (name != NAME && is.element(NAME, old_names)) 
[16:05:21.695]                     next
[16:05:21.695]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:05:21.695]                 }
[16:05:21.695]                 if (length(args) > 0) 
[16:05:21.695]                   base::do.call(base::Sys.setenv, args = args)
[16:05:21.695]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:05:21.695]             }
[16:05:21.695]             else {
[16:05:21.695]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:05:21.695]             }
[16:05:21.695]             {
[16:05:21.695]                 if (base::length(...future.futureOptionsAdded) > 
[16:05:21.695]                   0L) {
[16:05:21.695]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:05:21.695]                   base::names(opts) <- ...future.futureOptionsAdded
[16:05:21.695]                   base::options(opts)
[16:05:21.695]                 }
[16:05:21.695]                 {
[16:05:21.695]                   {
[16:05:21.695]                     NULL
[16:05:21.695]                     RNGkind("Mersenne-Twister")
[16:05:21.695]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[16:05:21.695]                       inherits = FALSE)
[16:05:21.695]                   }
[16:05:21.695]                   options(future.plan = NULL)
[16:05:21.695]                   if (is.na(NA_character_)) 
[16:05:21.695]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:05:21.695]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:05:21.695]                   future::plan(list(function (..., envir = parent.frame()) 
[16:05:21.695]                   {
[16:05:21.695]                     future <- SequentialFuture(..., envir = envir)
[16:05:21.695]                     if (!future$lazy) 
[16:05:21.695]                       future <- run(future)
[16:05:21.695]                     invisible(future)
[16:05:21.695]                   }), .cleanup = FALSE, .init = FALSE)
[16:05:21.695]                 }
[16:05:21.695]             }
[16:05:21.695]         }
[16:05:21.695]     })
[16:05:21.695]     if (TRUE) {
[16:05:21.695]         base::sink(type = "output", split = FALSE)
[16:05:21.695]         if (TRUE) {
[16:05:21.695]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:05:21.695]         }
[16:05:21.695]         else {
[16:05:21.695]             ...future.result["stdout"] <- base::list(NULL)
[16:05:21.695]         }
[16:05:21.695]         base::close(...future.stdout)
[16:05:21.695]         ...future.stdout <- NULL
[16:05:21.695]     }
[16:05:21.695]     ...future.result$conditions <- ...future.conditions
[16:05:21.695]     ...future.result$finished <- base::Sys.time()
[16:05:21.695]     ...future.result
[16:05:21.695] }
[16:05:21.696] assign_globals() ...
[16:05:21.697] List of 2
[16:05:21.697]  $ a: num 2
[16:05:21.697]  $ b: num 3
[16:05:21.697]  - attr(*, "where")=List of 2
[16:05:21.697]   ..$ a:<environment: R_EmptyEnv> 
[16:05:21.697]   ..$ b:<environment: R_EmptyEnv> 
[16:05:21.697]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[16:05:21.697]  - attr(*, "resolved")= logi FALSE
[16:05:21.697]  - attr(*, "total_size")= num 112
[16:05:21.701] - copied ‘a’ to environment
[16:05:21.701] - copied ‘b’ to environment
[16:05:21.701] assign_globals() ... done
[16:05:21.701] plan(): Setting new future strategy stack:
[16:05:21.702] List of future strategies:
[16:05:21.702] 1. sequential:
[16:05:21.702]    - args: function (..., envir = parent.frame())
[16:05:21.702]    - tweaked: FALSE
[16:05:21.702]    - call: NULL
[16:05:21.702] plan(): nbrOfWorkers() = 1
[16:05:21.703] plan(): Setting new future strategy stack:
[16:05:21.703] List of future strategies:
[16:05:21.703] 1. sequential:
[16:05:21.703]    - args: function (..., envir = parent.frame())
[16:05:21.703]    - tweaked: FALSE
[16:05:21.703]    - call: future::plan("sequential")
[16:05:21.703] plan(): nbrOfWorkers() = 1
[16:05:21.703] SequentialFuture started (and completed)
> print(v)
[1] 6
> stopifnot(v == yTruth)
> 
> message("*** multisession(..., workers = 1L) ... DONE")
*** multisession(..., workers = 1L) ... DONE
> 
> message("*** multisession(..., gc = TRUE) ...")
*** multisession(..., gc = TRUE) ...
> plan(multisession, workers = 2L)
[16:05:21.704] plan(): Setting new future strategy stack:
[16:05:21.704] List of future strategies:
[16:05:21.704] 1. multisession:
[16:05:21.704]    - args: function (..., workers = 2L, envir = parent.frame())
[16:05:21.704]    - tweaked: TRUE
[16:05:21.704]    - call: plan(multisession, workers = 2L)
[16:05:21.719] plan(): plan_init() of ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ...
[16:05:21.720] multisession:
[16:05:21.720] - args: function (..., workers = 2L, envir = parent.frame())
[16:05:21.720] - tweaked: TRUE
[16:05:21.720] - call: plan(multisession, workers = 2L)
[16:05:21.720] getGlobalsAndPackages() ...
[16:05:21.720] Not searching for globals
[16:05:21.720] - globals: [0] <none>
[16:05:21.721] getGlobalsAndPackages() ... DONE
[16:05:21.721] [local output] makeClusterPSOCK() ...
[16:05:21.725] [local output] Workers: [n = 2] ‘localhost’, ‘localhost’
[16:05:21.725] [local output] Base port: 11396
[16:05:21.725] [local output] Getting setup options for 2 cluster nodes ...
[16:05:21.725] [local output]  - Node 1 of 2 ...
[16:05:21.726] [local output] localMachine=TRUE => revtunnel=FALSE

[16:05:21.726] [local output] Rscript port: 11396

[16:05:21.726] [local output]  - Node 2 of 2 ...
[16:05:21.727] [local output] localMachine=TRUE => revtunnel=FALSE

[16:05:21.727] [local output] Rscript port: 11396

[16:05:21.728] [local output] Getting setup options for 2 cluster nodes ... done
[16:05:21.728] [local output]  - Parallel setup requested for some PSOCK nodes
[16:05:21.728] [local output] Setting up PSOCK nodes in parallel
[16:05:21.728] List of 36
[16:05:21.728]  $ worker          : chr "localhost"
[16:05:21.728]   ..- attr(*, "localhost")= logi TRUE
[16:05:21.728]  $ master          : chr "localhost"
[16:05:21.728]  $ port            : int 11396
[16:05:21.728]  $ connectTimeout  : num 120
[16:05:21.728]  $ timeout         : num 2592000
[16:05:21.728]  $ rscript         : chr "'/usr/local/lib/R/bin/Rscript'"
[16:05:21.728]  $ homogeneous     : logi TRUE
[16:05:21.728]  $ rscript_args    : chr "--default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),fi"| __truncated__
[16:05:21.728]  $ rscript_envs    : NULL
[16:05:21.728]  $ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[16:05:21.728]  $ rscript_startup : NULL
[16:05:21.728]  $ rscript_sh      : chr "sh"
[16:05:21.728]  $ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[16:05:21.728]  $ methods         : logi TRUE
[16:05:21.728]  $ socketOptions   : chr "no-delay"
[16:05:21.728]  $ useXDR          : logi FALSE
[16:05:21.728]  $ outfile         : chr "/dev/null"
[16:05:21.728]  $ renice          : int NA
[16:05:21.728]  $ rshcmd          : NULL
[16:05:21.728]  $ user            : chr(0) 
[16:05:21.728]  $ revtunnel       : logi FALSE
[16:05:21.728]  $ rshlogfile      : NULL
[16:05:21.728]  $ rshopts         : chr(0) 
[16:05:21.728]  $ rank            : int 1
[16:05:21.728]  $ manual          : logi FALSE
[16:05:21.728]  $ dryrun          : logi FALSE
[16:05:21.728]  $ quiet           : logi FALSE
[16:05:21.728]  $ setup_strategy  : chr "parallel"
[16:05:21.728]  $ local_cmd       : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[16:05:21.728]  $ pidfile         : chr "/tmp/RtmpVtakKw/worker.rank=1.parallelly.parent=87188.154941f1a6040.pid"
[16:05:21.728]  $ rshcmd_label    : NULL
[16:05:21.728]  $ rsh_call        : NULL
[16:05:21.728]  $ cmd             : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[16:05:21.728]  $ localMachine    : logi TRUE
[16:05:21.728]  $ make_fcn        :function (worker = getOption2("parallelly.localhost.hostname", "localhost"), 
[16:05:21.728]     master = NULL, port, connectTimeout = getOption2("parallelly.makeNodePSOCK.connectTimeout", 
[16:05:21.728]         2 * 60), timeout = getOption2("parallelly.makeNodePSOCK.timeout", 
[16:05:21.728]         30 * 24 * 60 * 60), rscript = NULL, homogeneous = NULL, rscript_args = NULL, 
[16:05:21.728]     rscript_envs = NULL, rscript_libs = NULL, rscript_startup = NULL, rscript_sh = c("auto", 
[16:05:21.728]         "cmd", "sh"), default_packages = c("datasets", "utils", "grDevices", 
[16:05:21.728]         "graphics", "stats", if (methods) "methods"), methods = TRUE, socketOptions = getOption2("parallelly.makeNodePSOCK.socketOptions", 
[16:05:21.728]         "no-delay"), useXDR = getOption2("parallelly.makeNodePSOCK.useXDR", 
[16:05:21.728]         FALSE), outfile = "/dev/null", renice = NA_integer_, rshcmd = getOption2("parallelly.makeNodePSOCK.rshcmd", 
[16:05:21.728]         NULL), user = NULL, revtunnel = NA, rshlogfile = NULL, rshopts = getOption2("parallelly.makeNodePSOCK.rshopts", 
[16:05:21.728]         NULL), rank = 1L, manual = FALSE, dryrun = FALSE, quiet = FALSE, 
[16:05:21.728]     setup_strategy = getOption2("parallelly.makeNodePSOCK.setup_strategy", 
[16:05:21.728]         "parallel"), action = c("launch", "options"), verbose = FALSE)  
[16:05:21.728]  $ arguments       :List of 28
[16:05:21.728]   ..$ worker          : chr "localhost"
[16:05:21.728]   ..$ master          : NULL
[16:05:21.728]   ..$ port            : int 11396
[16:05:21.728]   ..$ connectTimeout  : num 120
[16:05:21.728]   ..$ timeout         : num 2592000
[16:05:21.728]   ..$ rscript         : NULL
[16:05:21.728]   ..$ homogeneous     : NULL
[16:05:21.728]   ..$ rscript_args    : NULL
[16:05:21.728]   ..$ rscript_envs    : NULL
[16:05:21.728]   ..$ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[16:05:21.728]   ..$ rscript_startup : NULL
[16:05:21.728]   ..$ rscript_sh      : chr [1:3] "auto" "cmd" "sh"
[16:05:21.728]   ..$ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[16:05:21.728]   ..$ methods         : logi TRUE
[16:05:21.728]   ..$ socketOptions   : chr "no-delay"
[16:05:21.728]   ..$ useXDR          : logi FALSE
[16:05:21.728]   ..$ outfile         : chr "/dev/null"
[16:05:21.728]   ..$ renice          : int NA
[16:05:21.728]   ..$ rshcmd          : NULL
[16:05:21.728]   ..$ user            : NULL
[16:05:21.728]   ..$ revtunnel       : logi NA
[16:05:21.728]   ..$ rshlogfile      : NULL
[16:05:21.728]   ..$ rshopts         : NULL
[16:05:21.728]   ..$ rank            : int 1
[16:05:21.728]   ..$ manual          : logi FALSE
[16:05:21.728]   ..$ dryrun          : logi FALSE
[16:05:21.728]   ..$ quiet           : logi FALSE
[16:05:21.728]   ..$ setup_strategy  : chr "parallel"
[16:05:21.728]  - attr(*, "class")= chr [1:2] "makeNodePSOCKOptions" "makeNodeOptions"
[16:05:21.745] [local output] System call to launch all workers:
[16:05:21.745] [local output] '/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/RtmpVtakKw/worker.rank=1.parallelly.parent=87188.154941f1a6040.pid")), silent = TRUE)' -e 'options(socketOptions = "no-delay")' -e '.libPaths(c("/usr/local/lib/R/site-library","/usr/local/lib/R/library"))' -e 'workRSOCK <- tryCatch(parallel:::.workRSOCK, error=function(e) parallel:::.slaveRSOCK); workRSOCK()' MASTER=localhost PORT=11396 OUT=/dev/null TIMEOUT=2592000 XDR=FALSE SETUPTIMEOUT=120 SETUPSTRATEGY=parallel
[16:05:21.745] [local output] Starting PSOCK main server
[16:05:21.746] [local output] Workers launched
[16:05:21.746] [local output] Waiting for workers to connect back
[16:05:21.747]  - [local output] 0 workers out of 2 ready
[16:05:21.984]  - [local output] 0 workers out of 2 ready
[16:05:21.985]  - [local output] 1 workers out of 2 ready
[16:05:21.991]  - [local output] 1 workers out of 2 ready
[16:05:21.991]  - [local output] 2 workers out of 2 ready
[16:05:21.991] [local output] Launching of workers completed
[16:05:21.992] [local output] Collecting session information from workers
[16:05:21.992] [local output]  - Worker #1 of 2
[16:05:21.993] [local output]  - Worker #2 of 2
[16:05:21.993] [local output] makeClusterPSOCK() ... done
[16:05:22.003] Packages needed by the future expression (n = 0): <none>
[16:05:22.003] Packages needed by future strategies (n = 0): <none>
[16:05:22.004] {
[16:05:22.004]     {
[16:05:22.004]         {
[16:05:22.004]             ...future.startTime <- base::Sys.time()
[16:05:22.004]             {
[16:05:22.004]                 {
[16:05:22.004]                   {
[16:05:22.004]                     {
[16:05:22.004]                       base::local({
[16:05:22.004]                         has_future <- base::requireNamespace("future", 
[16:05:22.004]                           quietly = TRUE)
[16:05:22.004]                         if (has_future) {
[16:05:22.004]                           ns <- base::getNamespace("future")
[16:05:22.004]                           version <- ns[[".package"]][["version"]]
[16:05:22.004]                           if (is.null(version)) 
[16:05:22.004]                             version <- utils::packageVersion("future")
[16:05:22.004]                         }
[16:05:22.004]                         else {
[16:05:22.004]                           version <- NULL
[16:05:22.004]                         }
[16:05:22.004]                         if (!has_future || version < "1.8.0") {
[16:05:22.004]                           info <- base::c(r_version = base::gsub("R version ", 
[16:05:22.004]                             "", base::R.version$version.string), 
[16:05:22.004]                             platform = base::sprintf("%s (%s-bit)", 
[16:05:22.004]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:05:22.004]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[16:05:22.004]                               "release", "version")], collapse = " "), 
[16:05:22.004]                             hostname = base::Sys.info()[["nodename"]])
[16:05:22.004]                           info <- base::sprintf("%s: %s", base::names(info), 
[16:05:22.004]                             info)
[16:05:22.004]                           info <- base::paste(info, collapse = "; ")
[16:05:22.004]                           if (!has_future) {
[16:05:22.004]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:05:22.004]                               info)
[16:05:22.004]                           }
[16:05:22.004]                           else {
[16:05:22.004]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:05:22.004]                               info, version)
[16:05:22.004]                           }
[16:05:22.004]                           base::stop(msg)
[16:05:22.004]                         }
[16:05:22.004]                       })
[16:05:22.004]                     }
[16:05:22.004]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[16:05:22.004]                     base::options(mc.cores = 1L)
[16:05:22.004]                   }
[16:05:22.004]                   options(future.plan = NULL)
[16:05:22.004]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:05:22.004]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:05:22.004]                 }
[16:05:22.004]                 ...future.workdir <- getwd()
[16:05:22.004]             }
[16:05:22.004]             ...future.oldOptions <- base::as.list(base::.Options)
[16:05:22.004]             ...future.oldEnvVars <- base::Sys.getenv()
[16:05:22.004]         }
[16:05:22.004]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:05:22.004]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:05:22.004]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:05:22.004]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:05:22.004]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:05:22.004]             future.stdout.windows.reencode = NULL, width = 80L)
[16:05:22.004]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:05:22.004]             base::names(...future.oldOptions))
[16:05:22.004]     }
[16:05:22.004]     if (FALSE) {
[16:05:22.004]     }
[16:05:22.004]     else {
[16:05:22.004]         if (TRUE) {
[16:05:22.004]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:05:22.004]                 open = "w")
[16:05:22.004]         }
[16:05:22.004]         else {
[16:05:22.004]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:05:22.004]                 windows = "NUL", "/dev/null"), open = "w")
[16:05:22.004]         }
[16:05:22.004]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:05:22.004]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:05:22.004]             base::sink(type = "output", split = FALSE)
[16:05:22.004]             base::close(...future.stdout)
[16:05:22.004]         }, add = TRUE)
[16:05:22.004]     }
[16:05:22.004]     ...future.frame <- base::sys.nframe()
[16:05:22.004]     ...future.conditions <- base::list()
[16:05:22.004]     ...future.rng <- base::globalenv()$.Random.seed
[16:05:22.004]     if (FALSE) {
[16:05:22.004]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:05:22.004]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:05:22.004]     }
[16:05:22.004]     ...future.result <- base::tryCatch({
[16:05:22.004]         base::withCallingHandlers({
[16:05:22.004]             ...future.value <- base::withVisible(base::local({
[16:05:22.004]                 ...future.makeSendCondition <- base::local({
[16:05:22.004]                   sendCondition <- NULL
[16:05:22.004]                   function(frame = 1L) {
[16:05:22.004]                     if (is.function(sendCondition)) 
[16:05:22.004]                       return(sendCondition)
[16:05:22.004]                     ns <- getNamespace("parallel")
[16:05:22.004]                     if (exists("sendData", mode = "function", 
[16:05:22.004]                       envir = ns)) {
[16:05:22.004]                       parallel_sendData <- get("sendData", mode = "function", 
[16:05:22.004]                         envir = ns)
[16:05:22.004]                       envir <- sys.frame(frame)
[16:05:22.004]                       master <- NULL
[16:05:22.004]                       while (!identical(envir, .GlobalEnv) && 
[16:05:22.004]                         !identical(envir, emptyenv())) {
[16:05:22.004]                         if (exists("master", mode = "list", envir = envir, 
[16:05:22.004]                           inherits = FALSE)) {
[16:05:22.004]                           master <- get("master", mode = "list", 
[16:05:22.004]                             envir = envir, inherits = FALSE)
[16:05:22.004]                           if (inherits(master, c("SOCKnode", 
[16:05:22.004]                             "SOCK0node"))) {
[16:05:22.004]                             sendCondition <<- function(cond) {
[16:05:22.004]                               data <- list(type = "VALUE", value = cond, 
[16:05:22.004]                                 success = TRUE)
[16:05:22.004]                               parallel_sendData(master, data)
[16:05:22.004]                             }
[16:05:22.004]                             return(sendCondition)
[16:05:22.004]                           }
[16:05:22.004]                         }
[16:05:22.004]                         frame <- frame + 1L
[16:05:22.004]                         envir <- sys.frame(frame)
[16:05:22.004]                       }
[16:05:22.004]                     }
[16:05:22.004]                     sendCondition <<- function(cond) NULL
[16:05:22.004]                   }
[16:05:22.004]                 })
[16:05:22.004]                 withCallingHandlers({
[16:05:22.004]                   NA
[16:05:22.004]                 }, immediateCondition = function(cond) {
[16:05:22.004]                   sendCondition <- ...future.makeSendCondition()
[16:05:22.004]                   sendCondition(cond)
[16:05:22.004]                   muffleCondition <- function (cond, pattern = "^muffle") 
[16:05:22.004]                   {
[16:05:22.004]                     inherits <- base::inherits
[16:05:22.004]                     invokeRestart <- base::invokeRestart
[16:05:22.004]                     is.null <- base::is.null
[16:05:22.004]                     muffled <- FALSE
[16:05:22.004]                     if (inherits(cond, "message")) {
[16:05:22.004]                       muffled <- grepl(pattern, "muffleMessage")
[16:05:22.004]                       if (muffled) 
[16:05:22.004]                         invokeRestart("muffleMessage")
[16:05:22.004]                     }
[16:05:22.004]                     else if (inherits(cond, "warning")) {
[16:05:22.004]                       muffled <- grepl(pattern, "muffleWarning")
[16:05:22.004]                       if (muffled) 
[16:05:22.004]                         invokeRestart("muffleWarning")
[16:05:22.004]                     }
[16:05:22.004]                     else if (inherits(cond, "condition")) {
[16:05:22.004]                       if (!is.null(pattern)) {
[16:05:22.004]                         computeRestarts <- base::computeRestarts
[16:05:22.004]                         grepl <- base::grepl
[16:05:22.004]                         restarts <- computeRestarts(cond)
[16:05:22.004]                         for (restart in restarts) {
[16:05:22.004]                           name <- restart$name
[16:05:22.004]                           if (is.null(name)) 
[16:05:22.004]                             next
[16:05:22.004]                           if (!grepl(pattern, name)) 
[16:05:22.004]                             next
[16:05:22.004]                           invokeRestart(restart)
[16:05:22.004]                           muffled <- TRUE
[16:05:22.004]                           break
[16:05:22.004]                         }
[16:05:22.004]                       }
[16:05:22.004]                     }
[16:05:22.004]                     invisible(muffled)
[16:05:22.004]                   }
[16:05:22.004]                   muffleCondition(cond)
[16:05:22.004]                 })
[16:05:22.004]             }))
[16:05:22.004]             future::FutureResult(value = ...future.value$value, 
[16:05:22.004]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:05:22.004]                   ...future.rng), globalenv = if (FALSE) 
[16:05:22.004]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:05:22.004]                     ...future.globalenv.names))
[16:05:22.004]                 else NULL, started = ...future.startTime, version = "1.8")
[16:05:22.004]         }, condition = base::local({
[16:05:22.004]             c <- base::c
[16:05:22.004]             inherits <- base::inherits
[16:05:22.004]             invokeRestart <- base::invokeRestart
[16:05:22.004]             length <- base::length
[16:05:22.004]             list <- base::list
[16:05:22.004]             seq.int <- base::seq.int
[16:05:22.004]             signalCondition <- base::signalCondition
[16:05:22.004]             sys.calls <- base::sys.calls
[16:05:22.004]             `[[` <- base::`[[`
[16:05:22.004]             `+` <- base::`+`
[16:05:22.004]             `<<-` <- base::`<<-`
[16:05:22.004]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:05:22.004]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:05:22.004]                   3L)]
[16:05:22.004]             }
[16:05:22.004]             function(cond) {
[16:05:22.004]                 is_error <- inherits(cond, "error")
[16:05:22.004]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:05:22.004]                   NULL)
[16:05:22.004]                 if (is_error) {
[16:05:22.004]                   sessionInformation <- function() {
[16:05:22.004]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:05:22.004]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:05:22.004]                       search = base::search(), system = base::Sys.info())
[16:05:22.004]                   }
[16:05:22.004]                   ...future.conditions[[length(...future.conditions) + 
[16:05:22.004]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:05:22.004]                     cond$call), session = sessionInformation(), 
[16:05:22.004]                     timestamp = base::Sys.time(), signaled = 0L)
[16:05:22.004]                   signalCondition(cond)
[16:05:22.004]                 }
[16:05:22.004]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:05:22.004]                 "immediateCondition"))) {
[16:05:22.004]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:05:22.004]                   ...future.conditions[[length(...future.conditions) + 
[16:05:22.004]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:05:22.004]                   if (TRUE && !signal) {
[16:05:22.004]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:05:22.004]                     {
[16:05:22.004]                       inherits <- base::inherits
[16:05:22.004]                       invokeRestart <- base::invokeRestart
[16:05:22.004]                       is.null <- base::is.null
[16:05:22.004]                       muffled <- FALSE
[16:05:22.004]                       if (inherits(cond, "message")) {
[16:05:22.004]                         muffled <- grepl(pattern, "muffleMessage")
[16:05:22.004]                         if (muffled) 
[16:05:22.004]                           invokeRestart("muffleMessage")
[16:05:22.004]                       }
[16:05:22.004]                       else if (inherits(cond, "warning")) {
[16:05:22.004]                         muffled <- grepl(pattern, "muffleWarning")
[16:05:22.004]                         if (muffled) 
[16:05:22.004]                           invokeRestart("muffleWarning")
[16:05:22.004]                       }
[16:05:22.004]                       else if (inherits(cond, "condition")) {
[16:05:22.004]                         if (!is.null(pattern)) {
[16:05:22.004]                           computeRestarts <- base::computeRestarts
[16:05:22.004]                           grepl <- base::grepl
[16:05:22.004]                           restarts <- computeRestarts(cond)
[16:05:22.004]                           for (restart in restarts) {
[16:05:22.004]                             name <- restart$name
[16:05:22.004]                             if (is.null(name)) 
[16:05:22.004]                               next
[16:05:22.004]                             if (!grepl(pattern, name)) 
[16:05:22.004]                               next
[16:05:22.004]                             invokeRestart(restart)
[16:05:22.004]                             muffled <- TRUE
[16:05:22.004]                             break
[16:05:22.004]                           }
[16:05:22.004]                         }
[16:05:22.004]                       }
[16:05:22.004]                       invisible(muffled)
[16:05:22.004]                     }
[16:05:22.004]                     muffleCondition(cond, pattern = "^muffle")
[16:05:22.004]                   }
[16:05:22.004]                 }
[16:05:22.004]                 else {
[16:05:22.004]                   if (TRUE) {
[16:05:22.004]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:05:22.004]                     {
[16:05:22.004]                       inherits <- base::inherits
[16:05:22.004]                       invokeRestart <- base::invokeRestart
[16:05:22.004]                       is.null <- base::is.null
[16:05:22.004]                       muffled <- FALSE
[16:05:22.004]                       if (inherits(cond, "message")) {
[16:05:22.004]                         muffled <- grepl(pattern, "muffleMessage")
[16:05:22.004]                         if (muffled) 
[16:05:22.004]                           invokeRestart("muffleMessage")
[16:05:22.004]                       }
[16:05:22.004]                       else if (inherits(cond, "warning")) {
[16:05:22.004]                         muffled <- grepl(pattern, "muffleWarning")
[16:05:22.004]                         if (muffled) 
[16:05:22.004]                           invokeRestart("muffleWarning")
[16:05:22.004]                       }
[16:05:22.004]                       else if (inherits(cond, "condition")) {
[16:05:22.004]                         if (!is.null(pattern)) {
[16:05:22.004]                           computeRestarts <- base::computeRestarts
[16:05:22.004]                           grepl <- base::grepl
[16:05:22.004]                           restarts <- computeRestarts(cond)
[16:05:22.004]                           for (restart in restarts) {
[16:05:22.004]                             name <- restart$name
[16:05:22.004]                             if (is.null(name)) 
[16:05:22.004]                               next
[16:05:22.004]                             if (!grepl(pattern, name)) 
[16:05:22.004]                               next
[16:05:22.004]                             invokeRestart(restart)
[16:05:22.004]                             muffled <- TRUE
[16:05:22.004]                             break
[16:05:22.004]                           }
[16:05:22.004]                         }
[16:05:22.004]                       }
[16:05:22.004]                       invisible(muffled)
[16:05:22.004]                     }
[16:05:22.004]                     muffleCondition(cond, pattern = "^muffle")
[16:05:22.004]                   }
[16:05:22.004]                 }
[16:05:22.004]             }
[16:05:22.004]         }))
[16:05:22.004]     }, error = function(ex) {
[16:05:22.004]         base::structure(base::list(value = NULL, visible = NULL, 
[16:05:22.004]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:05:22.004]                 ...future.rng), started = ...future.startTime, 
[16:05:22.004]             finished = Sys.time(), session_uuid = NA_character_, 
[16:05:22.004]             version = "1.8"), class = "FutureResult")
[16:05:22.004]     }, finally = {
[16:05:22.004]         if (!identical(...future.workdir, getwd())) 
[16:05:22.004]             setwd(...future.workdir)
[16:05:22.004]         {
[16:05:22.004]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:05:22.004]                 ...future.oldOptions$nwarnings <- NULL
[16:05:22.004]             }
[16:05:22.004]             base::options(...future.oldOptions)
[16:05:22.004]             if (.Platform$OS.type == "windows") {
[16:05:22.004]                 old_names <- names(...future.oldEnvVars)
[16:05:22.004]                 envs <- base::Sys.getenv()
[16:05:22.004]                 names <- names(envs)
[16:05:22.004]                 common <- intersect(names, old_names)
[16:05:22.004]                 added <- setdiff(names, old_names)
[16:05:22.004]                 removed <- setdiff(old_names, names)
[16:05:22.004]                 changed <- common[...future.oldEnvVars[common] != 
[16:05:22.004]                   envs[common]]
[16:05:22.004]                 NAMES <- toupper(changed)
[16:05:22.004]                 args <- list()
[16:05:22.004]                 for (kk in seq_along(NAMES)) {
[16:05:22.004]                   name <- changed[[kk]]
[16:05:22.004]                   NAME <- NAMES[[kk]]
[16:05:22.004]                   if (name != NAME && is.element(NAME, old_names)) 
[16:05:22.004]                     next
[16:05:22.004]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:05:22.004]                 }
[16:05:22.004]                 NAMES <- toupper(added)
[16:05:22.004]                 for (kk in seq_along(NAMES)) {
[16:05:22.004]                   name <- added[[kk]]
[16:05:22.004]                   NAME <- NAMES[[kk]]
[16:05:22.004]                   if (name != NAME && is.element(NAME, old_names)) 
[16:05:22.004]                     next
[16:05:22.004]                   args[[name]] <- ""
[16:05:22.004]                 }
[16:05:22.004]                 NAMES <- toupper(removed)
[16:05:22.004]                 for (kk in seq_along(NAMES)) {
[16:05:22.004]                   name <- removed[[kk]]
[16:05:22.004]                   NAME <- NAMES[[kk]]
[16:05:22.004]                   if (name != NAME && is.element(NAME, old_names)) 
[16:05:22.004]                     next
[16:05:22.004]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:05:22.004]                 }
[16:05:22.004]                 if (length(args) > 0) 
[16:05:22.004]                   base::do.call(base::Sys.setenv, args = args)
[16:05:22.004]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:05:22.004]             }
[16:05:22.004]             else {
[16:05:22.004]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:05:22.004]             }
[16:05:22.004]             {
[16:05:22.004]                 if (base::length(...future.futureOptionsAdded) > 
[16:05:22.004]                   0L) {
[16:05:22.004]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:05:22.004]                   base::names(opts) <- ...future.futureOptionsAdded
[16:05:22.004]                   base::options(opts)
[16:05:22.004]                 }
[16:05:22.004]                 {
[16:05:22.004]                   {
[16:05:22.004]                     base::options(mc.cores = ...future.mc.cores.old)
[16:05:22.004]                     NULL
[16:05:22.004]                   }
[16:05:22.004]                   options(future.plan = NULL)
[16:05:22.004]                   if (is.na(NA_character_)) 
[16:05:22.004]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:05:22.004]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:05:22.004]                   future::plan(list(function (..., workers = 2L, 
[16:05:22.004]                     envir = parent.frame()) 
[16:05:22.004]                   strategy(..., workers = workers, envir = envir)), 
[16:05:22.004]                     .cleanup = FALSE, .init = FALSE)
[16:05:22.004]                 }
[16:05:22.004]             }
[16:05:22.004]         }
[16:05:22.004]     })
[16:05:22.004]     if (TRUE) {
[16:05:22.004]         base::sink(type = "output", split = FALSE)
[16:05:22.004]         if (TRUE) {
[16:05:22.004]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:05:22.004]         }
[16:05:22.004]         else {
[16:05:22.004]             ...future.result["stdout"] <- base::list(NULL)
[16:05:22.004]         }
[16:05:22.004]         base::close(...future.stdout)
[16:05:22.004]         ...future.stdout <- NULL
[16:05:22.004]     }
[16:05:22.004]     ...future.result$conditions <- ...future.conditions
[16:05:22.004]     ...future.result$finished <- base::Sys.time()
[16:05:22.004]     ...future.result
[16:05:22.004] }
[16:05:22.057] MultisessionFuture started
[16:05:22.058] result() for ClusterFuture ...
[16:05:22.058] receiveMessageFromWorker() for ClusterFuture ...
[16:05:22.058] - Validating connection of MultisessionFuture
[16:05:22.091] - received message: FutureResult
[16:05:22.091] - Received FutureResult
[16:05:22.091] - Erased future from FutureRegistry
[16:05:22.091] result() for ClusterFuture ...
[16:05:22.092] - result already collected: FutureResult
[16:05:22.092] result() for ClusterFuture ... done
[16:05:22.092] receiveMessageFromWorker() for ClusterFuture ... done
[16:05:22.092] result() for ClusterFuture ... done
[16:05:22.092] result() for ClusterFuture ...
[16:05:22.092] - result already collected: FutureResult
[16:05:22.092] result() for ClusterFuture ... done
[16:05:22.092] plan(): plan_init() of ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ... DONE
[16:05:22.092] plan(): nbrOfWorkers() = 2
> 
> f <- future({ gc() })
[16:05:22.093] getGlobalsAndPackages() ...
[16:05:22.093] Searching for globals...
[16:05:22.094] - globals found: [2] ‘{’, ‘gc’
[16:05:22.094] Searching for globals ... DONE
[16:05:22.094] Resolving globals: FALSE
[16:05:22.094] 
[16:05:22.094] 
[16:05:22.094] getGlobalsAndPackages() ... DONE
[16:05:22.095] run() for ‘Future’ ...
[16:05:22.095] - state: ‘created’
[16:05:22.095] - Future backend: ‘FutureStrategy’, ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[16:05:22.105] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[16:05:22.105] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[16:05:22.105]   - Field: ‘node’
[16:05:22.105]   - Field: ‘label’
[16:05:22.105]   - Field: ‘local’
[16:05:22.106]   - Field: ‘owner’
[16:05:22.106]   - Field: ‘envir’
[16:05:22.106]   - Field: ‘workers’
[16:05:22.106]   - Field: ‘packages’
[16:05:22.106]   - Field: ‘gc’
[16:05:22.106]   - Field: ‘conditions’
[16:05:22.106]   - Field: ‘persistent’
[16:05:22.106]   - Field: ‘expr’
[16:05:22.106]   - Field: ‘uuid’
[16:05:22.106]   - Field: ‘seed’
[16:05:22.106]   - Field: ‘version’
[16:05:22.107]   - Field: ‘result’
[16:05:22.107]   - Field: ‘asynchronous’
[16:05:22.107]   - Field: ‘calls’
[16:05:22.107]   - Field: ‘globals’
[16:05:22.107]   - Field: ‘stdout’
[16:05:22.107]   - Field: ‘earlySignal’
[16:05:22.107]   - Field: ‘lazy’
[16:05:22.107]   - Field: ‘state’
[16:05:22.107] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[16:05:22.107] - Launch lazy future ...
[16:05:22.108] Packages needed by the future expression (n = 0): <none>
[16:05:22.108] Packages needed by future strategies (n = 0): <none>
[16:05:22.108] {
[16:05:22.108]     {
[16:05:22.108]         {
[16:05:22.108]             ...future.startTime <- base::Sys.time()
[16:05:22.108]             {
[16:05:22.108]                 {
[16:05:22.108]                   {
[16:05:22.108]                     {
[16:05:22.108]                       base::local({
[16:05:22.108]                         has_future <- base::requireNamespace("future", 
[16:05:22.108]                           quietly = TRUE)
[16:05:22.108]                         if (has_future) {
[16:05:22.108]                           ns <- base::getNamespace("future")
[16:05:22.108]                           version <- ns[[".package"]][["version"]]
[16:05:22.108]                           if (is.null(version)) 
[16:05:22.108]                             version <- utils::packageVersion("future")
[16:05:22.108]                         }
[16:05:22.108]                         else {
[16:05:22.108]                           version <- NULL
[16:05:22.108]                         }
[16:05:22.108]                         if (!has_future || version < "1.8.0") {
[16:05:22.108]                           info <- base::c(r_version = base::gsub("R version ", 
[16:05:22.108]                             "", base::R.version$version.string), 
[16:05:22.108]                             platform = base::sprintf("%s (%s-bit)", 
[16:05:22.108]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:05:22.108]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[16:05:22.108]                               "release", "version")], collapse = " "), 
[16:05:22.108]                             hostname = base::Sys.info()[["nodename"]])
[16:05:22.108]                           info <- base::sprintf("%s: %s", base::names(info), 
[16:05:22.108]                             info)
[16:05:22.108]                           info <- base::paste(info, collapse = "; ")
[16:05:22.108]                           if (!has_future) {
[16:05:22.108]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:05:22.108]                               info)
[16:05:22.108]                           }
[16:05:22.108]                           else {
[16:05:22.108]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:05:22.108]                               info, version)
[16:05:22.108]                           }
[16:05:22.108]                           base::stop(msg)
[16:05:22.108]                         }
[16:05:22.108]                       })
[16:05:22.108]                     }
[16:05:22.108]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[16:05:22.108]                     base::options(mc.cores = 1L)
[16:05:22.108]                   }
[16:05:22.108]                   options(future.plan = NULL)
[16:05:22.108]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:05:22.108]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:05:22.108]                 }
[16:05:22.108]                 ...future.workdir <- getwd()
[16:05:22.108]             }
[16:05:22.108]             ...future.oldOptions <- base::as.list(base::.Options)
[16:05:22.108]             ...future.oldEnvVars <- base::Sys.getenv()
[16:05:22.108]         }
[16:05:22.108]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:05:22.108]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:05:22.108]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:05:22.108]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:05:22.108]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:05:22.108]             future.stdout.windows.reencode = NULL, width = 80L)
[16:05:22.108]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:05:22.108]             base::names(...future.oldOptions))
[16:05:22.108]     }
[16:05:22.108]     if (FALSE) {
[16:05:22.108]     }
[16:05:22.108]     else {
[16:05:22.108]         if (TRUE) {
[16:05:22.108]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:05:22.108]                 open = "w")
[16:05:22.108]         }
[16:05:22.108]         else {
[16:05:22.108]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:05:22.108]                 windows = "NUL", "/dev/null"), open = "w")
[16:05:22.108]         }
[16:05:22.108]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:05:22.108]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:05:22.108]             base::sink(type = "output", split = FALSE)
[16:05:22.108]             base::close(...future.stdout)
[16:05:22.108]         }, add = TRUE)
[16:05:22.108]     }
[16:05:22.108]     ...future.frame <- base::sys.nframe()
[16:05:22.108]     ...future.conditions <- base::list()
[16:05:22.108]     ...future.rng <- base::globalenv()$.Random.seed
[16:05:22.108]     if (FALSE) {
[16:05:22.108]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:05:22.108]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:05:22.108]     }
[16:05:22.108]     ...future.result <- base::tryCatch({
[16:05:22.108]         base::withCallingHandlers({
[16:05:22.108]             ...future.value <- base::withVisible(base::local({
[16:05:22.108]                 ...future.makeSendCondition <- base::local({
[16:05:22.108]                   sendCondition <- NULL
[16:05:22.108]                   function(frame = 1L) {
[16:05:22.108]                     if (is.function(sendCondition)) 
[16:05:22.108]                       return(sendCondition)
[16:05:22.108]                     ns <- getNamespace("parallel")
[16:05:22.108]                     if (exists("sendData", mode = "function", 
[16:05:22.108]                       envir = ns)) {
[16:05:22.108]                       parallel_sendData <- get("sendData", mode = "function", 
[16:05:22.108]                         envir = ns)
[16:05:22.108]                       envir <- sys.frame(frame)
[16:05:22.108]                       master <- NULL
[16:05:22.108]                       while (!identical(envir, .GlobalEnv) && 
[16:05:22.108]                         !identical(envir, emptyenv())) {
[16:05:22.108]                         if (exists("master", mode = "list", envir = envir, 
[16:05:22.108]                           inherits = FALSE)) {
[16:05:22.108]                           master <- get("master", mode = "list", 
[16:05:22.108]                             envir = envir, inherits = FALSE)
[16:05:22.108]                           if (inherits(master, c("SOCKnode", 
[16:05:22.108]                             "SOCK0node"))) {
[16:05:22.108]                             sendCondition <<- function(cond) {
[16:05:22.108]                               data <- list(type = "VALUE", value = cond, 
[16:05:22.108]                                 success = TRUE)
[16:05:22.108]                               parallel_sendData(master, data)
[16:05:22.108]                             }
[16:05:22.108]                             return(sendCondition)
[16:05:22.108]                           }
[16:05:22.108]                         }
[16:05:22.108]                         frame <- frame + 1L
[16:05:22.108]                         envir <- sys.frame(frame)
[16:05:22.108]                       }
[16:05:22.108]                     }
[16:05:22.108]                     sendCondition <<- function(cond) NULL
[16:05:22.108]                   }
[16:05:22.108]                 })
[16:05:22.108]                 withCallingHandlers({
[16:05:22.108]                   {
[16:05:22.108]                     gc()
[16:05:22.108]                   }
[16:05:22.108]                 }, immediateCondition = function(cond) {
[16:05:22.108]                   sendCondition <- ...future.makeSendCondition()
[16:05:22.108]                   sendCondition(cond)
[16:05:22.108]                   muffleCondition <- function (cond, pattern = "^muffle") 
[16:05:22.108]                   {
[16:05:22.108]                     inherits <- base::inherits
[16:05:22.108]                     invokeRestart <- base::invokeRestart
[16:05:22.108]                     is.null <- base::is.null
[16:05:22.108]                     muffled <- FALSE
[16:05:22.108]                     if (inherits(cond, "message")) {
[16:05:22.108]                       muffled <- grepl(pattern, "muffleMessage")
[16:05:22.108]                       if (muffled) 
[16:05:22.108]                         invokeRestart("muffleMessage")
[16:05:22.108]                     }
[16:05:22.108]                     else if (inherits(cond, "warning")) {
[16:05:22.108]                       muffled <- grepl(pattern, "muffleWarning")
[16:05:22.108]                       if (muffled) 
[16:05:22.108]                         invokeRestart("muffleWarning")
[16:05:22.108]                     }
[16:05:22.108]                     else if (inherits(cond, "condition")) {
[16:05:22.108]                       if (!is.null(pattern)) {
[16:05:22.108]                         computeRestarts <- base::computeRestarts
[16:05:22.108]                         grepl <- base::grepl
[16:05:22.108]                         restarts <- computeRestarts(cond)
[16:05:22.108]                         for (restart in restarts) {
[16:05:22.108]                           name <- restart$name
[16:05:22.108]                           if (is.null(name)) 
[16:05:22.108]                             next
[16:05:22.108]                           if (!grepl(pattern, name)) 
[16:05:22.108]                             next
[16:05:22.108]                           invokeRestart(restart)
[16:05:22.108]                           muffled <- TRUE
[16:05:22.108]                           break
[16:05:22.108]                         }
[16:05:22.108]                       }
[16:05:22.108]                     }
[16:05:22.108]                     invisible(muffled)
[16:05:22.108]                   }
[16:05:22.108]                   muffleCondition(cond)
[16:05:22.108]                 })
[16:05:22.108]             }))
[16:05:22.108]             future::FutureResult(value = ...future.value$value, 
[16:05:22.108]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:05:22.108]                   ...future.rng), globalenv = if (FALSE) 
[16:05:22.108]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:05:22.108]                     ...future.globalenv.names))
[16:05:22.108]                 else NULL, started = ...future.startTime, version = "1.8")
[16:05:22.108]         }, condition = base::local({
[16:05:22.108]             c <- base::c
[16:05:22.108]             inherits <- base::inherits
[16:05:22.108]             invokeRestart <- base::invokeRestart
[16:05:22.108]             length <- base::length
[16:05:22.108]             list <- base::list
[16:05:22.108]             seq.int <- base::seq.int
[16:05:22.108]             signalCondition <- base::signalCondition
[16:05:22.108]             sys.calls <- base::sys.calls
[16:05:22.108]             `[[` <- base::`[[`
[16:05:22.108]             `+` <- base::`+`
[16:05:22.108]             `<<-` <- base::`<<-`
[16:05:22.108]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:05:22.108]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:05:22.108]                   3L)]
[16:05:22.108]             }
[16:05:22.108]             function(cond) {
[16:05:22.108]                 is_error <- inherits(cond, "error")
[16:05:22.108]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:05:22.108]                   NULL)
[16:05:22.108]                 if (is_error) {
[16:05:22.108]                   sessionInformation <- function() {
[16:05:22.108]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:05:22.108]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:05:22.108]                       search = base::search(), system = base::Sys.info())
[16:05:22.108]                   }
[16:05:22.108]                   ...future.conditions[[length(...future.conditions) + 
[16:05:22.108]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:05:22.108]                     cond$call), session = sessionInformation(), 
[16:05:22.108]                     timestamp = base::Sys.time(), signaled = 0L)
[16:05:22.108]                   signalCondition(cond)
[16:05:22.108]                 }
[16:05:22.108]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:05:22.108]                 "immediateCondition"))) {
[16:05:22.108]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:05:22.108]                   ...future.conditions[[length(...future.conditions) + 
[16:05:22.108]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:05:22.108]                   if (TRUE && !signal) {
[16:05:22.108]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:05:22.108]                     {
[16:05:22.108]                       inherits <- base::inherits
[16:05:22.108]                       invokeRestart <- base::invokeRestart
[16:05:22.108]                       is.null <- base::is.null
[16:05:22.108]                       muffled <- FALSE
[16:05:22.108]                       if (inherits(cond, "message")) {
[16:05:22.108]                         muffled <- grepl(pattern, "muffleMessage")
[16:05:22.108]                         if (muffled) 
[16:05:22.108]                           invokeRestart("muffleMessage")
[16:05:22.108]                       }
[16:05:22.108]                       else if (inherits(cond, "warning")) {
[16:05:22.108]                         muffled <- grepl(pattern, "muffleWarning")
[16:05:22.108]                         if (muffled) 
[16:05:22.108]                           invokeRestart("muffleWarning")
[16:05:22.108]                       }
[16:05:22.108]                       else if (inherits(cond, "condition")) {
[16:05:22.108]                         if (!is.null(pattern)) {
[16:05:22.108]                           computeRestarts <- base::computeRestarts
[16:05:22.108]                           grepl <- base::grepl
[16:05:22.108]                           restarts <- computeRestarts(cond)
[16:05:22.108]                           for (restart in restarts) {
[16:05:22.108]                             name <- restart$name
[16:05:22.108]                             if (is.null(name)) 
[16:05:22.108]                               next
[16:05:22.108]                             if (!grepl(pattern, name)) 
[16:05:22.108]                               next
[16:05:22.108]                             invokeRestart(restart)
[16:05:22.108]                             muffled <- TRUE
[16:05:22.108]                             break
[16:05:22.108]                           }
[16:05:22.108]                         }
[16:05:22.108]                       }
[16:05:22.108]                       invisible(muffled)
[16:05:22.108]                     }
[16:05:22.108]                     muffleCondition(cond, pattern = "^muffle")
[16:05:22.108]                   }
[16:05:22.108]                 }
[16:05:22.108]                 else {
[16:05:22.108]                   if (TRUE) {
[16:05:22.108]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:05:22.108]                     {
[16:05:22.108]                       inherits <- base::inherits
[16:05:22.108]                       invokeRestart <- base::invokeRestart
[16:05:22.108]                       is.null <- base::is.null
[16:05:22.108]                       muffled <- FALSE
[16:05:22.108]                       if (inherits(cond, "message")) {
[16:05:22.108]                         muffled <- grepl(pattern, "muffleMessage")
[16:05:22.108]                         if (muffled) 
[16:05:22.108]                           invokeRestart("muffleMessage")
[16:05:22.108]                       }
[16:05:22.108]                       else if (inherits(cond, "warning")) {
[16:05:22.108]                         muffled <- grepl(pattern, "muffleWarning")
[16:05:22.108]                         if (muffled) 
[16:05:22.108]                           invokeRestart("muffleWarning")
[16:05:22.108]                       }
[16:05:22.108]                       else if (inherits(cond, "condition")) {
[16:05:22.108]                         if (!is.null(pattern)) {
[16:05:22.108]                           computeRestarts <- base::computeRestarts
[16:05:22.108]                           grepl <- base::grepl
[16:05:22.108]                           restarts <- computeRestarts(cond)
[16:05:22.108]                           for (restart in restarts) {
[16:05:22.108]                             name <- restart$name
[16:05:22.108]                             if (is.null(name)) 
[16:05:22.108]                               next
[16:05:22.108]                             if (!grepl(pattern, name)) 
[16:05:22.108]                               next
[16:05:22.108]                             invokeRestart(restart)
[16:05:22.108]                             muffled <- TRUE
[16:05:22.108]                             break
[16:05:22.108]                           }
[16:05:22.108]                         }
[16:05:22.108]                       }
[16:05:22.108]                       invisible(muffled)
[16:05:22.108]                     }
[16:05:22.108]                     muffleCondition(cond, pattern = "^muffle")
[16:05:22.108]                   }
[16:05:22.108]                 }
[16:05:22.108]             }
[16:05:22.108]         }))
[16:05:22.108]     }, error = function(ex) {
[16:05:22.108]         base::structure(base::list(value = NULL, visible = NULL, 
[16:05:22.108]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:05:22.108]                 ...future.rng), started = ...future.startTime, 
[16:05:22.108]             finished = Sys.time(), session_uuid = NA_character_, 
[16:05:22.108]             version = "1.8"), class = "FutureResult")
[16:05:22.108]     }, finally = {
[16:05:22.108]         if (!identical(...future.workdir, getwd())) 
[16:05:22.108]             setwd(...future.workdir)
[16:05:22.108]         {
[16:05:22.108]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:05:22.108]                 ...future.oldOptions$nwarnings <- NULL
[16:05:22.108]             }
[16:05:22.108]             base::options(...future.oldOptions)
[16:05:22.108]             if (.Platform$OS.type == "windows") {
[16:05:22.108]                 old_names <- names(...future.oldEnvVars)
[16:05:22.108]                 envs <- base::Sys.getenv()
[16:05:22.108]                 names <- names(envs)
[16:05:22.108]                 common <- intersect(names, old_names)
[16:05:22.108]                 added <- setdiff(names, old_names)
[16:05:22.108]                 removed <- setdiff(old_names, names)
[16:05:22.108]                 changed <- common[...future.oldEnvVars[common] != 
[16:05:22.108]                   envs[common]]
[16:05:22.108]                 NAMES <- toupper(changed)
[16:05:22.108]                 args <- list()
[16:05:22.108]                 for (kk in seq_along(NAMES)) {
[16:05:22.108]                   name <- changed[[kk]]
[16:05:22.108]                   NAME <- NAMES[[kk]]
[16:05:22.108]                   if (name != NAME && is.element(NAME, old_names)) 
[16:05:22.108]                     next
[16:05:22.108]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:05:22.108]                 }
[16:05:22.108]                 NAMES <- toupper(added)
[16:05:22.108]                 for (kk in seq_along(NAMES)) {
[16:05:22.108]                   name <- added[[kk]]
[16:05:22.108]                   NAME <- NAMES[[kk]]
[16:05:22.108]                   if (name != NAME && is.element(NAME, old_names)) 
[16:05:22.108]                     next
[16:05:22.108]                   args[[name]] <- ""
[16:05:22.108]                 }
[16:05:22.108]                 NAMES <- toupper(removed)
[16:05:22.108]                 for (kk in seq_along(NAMES)) {
[16:05:22.108]                   name <- removed[[kk]]
[16:05:22.108]                   NAME <- NAMES[[kk]]
[16:05:22.108]                   if (name != NAME && is.element(NAME, old_names)) 
[16:05:22.108]                     next
[16:05:22.108]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:05:22.108]                 }
[16:05:22.108]                 if (length(args) > 0) 
[16:05:22.108]                   base::do.call(base::Sys.setenv, args = args)
[16:05:22.108]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:05:22.108]             }
[16:05:22.108]             else {
[16:05:22.108]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:05:22.108]             }
[16:05:22.108]             {
[16:05:22.108]                 if (base::length(...future.futureOptionsAdded) > 
[16:05:22.108]                   0L) {
[16:05:22.108]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:05:22.108]                   base::names(opts) <- ...future.futureOptionsAdded
[16:05:22.108]                   base::options(opts)
[16:05:22.108]                 }
[16:05:22.108]                 {
[16:05:22.108]                   {
[16:05:22.108]                     base::options(mc.cores = ...future.mc.cores.old)
[16:05:22.108]                     NULL
[16:05:22.108]                   }
[16:05:22.108]                   options(future.plan = NULL)
[16:05:22.108]                   if (is.na(NA_character_)) 
[16:05:22.108]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:05:22.108]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:05:22.108]                   future::plan(list(function (..., workers = 2L, 
[16:05:22.108]                     envir = parent.frame()) 
[16:05:22.108]                   strategy(..., workers = workers, envir = envir)), 
[16:05:22.108]                     .cleanup = FALSE, .init = FALSE)
[16:05:22.108]                 }
[16:05:22.108]             }
[16:05:22.108]         }
[16:05:22.108]     })
[16:05:22.108]     if (TRUE) {
[16:05:22.108]         base::sink(type = "output", split = FALSE)
[16:05:22.108]         if (TRUE) {
[16:05:22.108]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:05:22.108]         }
[16:05:22.108]         else {
[16:05:22.108]             ...future.result["stdout"] <- base::list(NULL)
[16:05:22.108]         }
[16:05:22.108]         base::close(...future.stdout)
[16:05:22.108]         ...future.stdout <- NULL
[16:05:22.108]     }
[16:05:22.108]     ...future.result$conditions <- ...future.conditions
[16:05:22.108]     ...future.result$finished <- base::Sys.time()
[16:05:22.108]     ...future.result
[16:05:22.108] }
[16:05:22.111] MultisessionFuture started
[16:05:22.111] - Launch lazy future ... done
[16:05:22.111] run() for ‘MultisessionFuture’ ... done
> v <- value(f)
[16:05:22.111] result() for ClusterFuture ...
[16:05:22.112] receiveMessageFromWorker() for ClusterFuture ...
[16:05:22.112] - Validating connection of MultisessionFuture
[16:05:22.180] - received message: FutureResult
[16:05:22.180] - Received FutureResult
[16:05:22.180] - Erased future from FutureRegistry
[16:05:22.181] result() for ClusterFuture ...
[16:05:22.181] - result already collected: FutureResult
[16:05:22.181] result() for ClusterFuture ... done
[16:05:22.181] receiveMessageFromWorker() for ClusterFuture ... done
[16:05:22.181] result() for ClusterFuture ... done
[16:05:22.181] result() for ClusterFuture ...
[16:05:22.181] - result already collected: FutureResult
[16:05:22.181] result() for ClusterFuture ... done
> print(v)
         used (Mb) gc trigger (Mb) max used (Mb)
Ncells 395067 21.1     836944 44.7   664120 35.5
Vcells 704741  5.4    8388608 64.0  1814359 13.9
> 
> f <- future({ integer(10e6) })
[16:05:22.181] getGlobalsAndPackages() ...
[16:05:22.182] Searching for globals...
[16:05:22.182] - globals found: [2] ‘{’, ‘integer’
[16:05:22.183] Searching for globals ... DONE
[16:05:22.183] Resolving globals: FALSE
[16:05:22.183] 
[16:05:22.183] 
[16:05:22.183] getGlobalsAndPackages() ... DONE
[16:05:22.183] run() for ‘Future’ ...
[16:05:22.184] - state: ‘created’
[16:05:22.184] - Future backend: ‘FutureStrategy’, ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[16:05:22.194] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[16:05:22.194] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[16:05:22.194]   - Field: ‘node’
[16:05:22.194]   - Field: ‘label’
[16:05:22.195]   - Field: ‘local’
[16:05:22.195]   - Field: ‘owner’
[16:05:22.195]   - Field: ‘envir’
[16:05:22.195]   - Field: ‘workers’
[16:05:22.195]   - Field: ‘packages’
[16:05:22.195]   - Field: ‘gc’
[16:05:22.195]   - Field: ‘conditions’
[16:05:22.195]   - Field: ‘persistent’
[16:05:22.195]   - Field: ‘expr’
[16:05:22.196]   - Field: ‘uuid’
[16:05:22.196]   - Field: ‘seed’
[16:05:22.198]   - Field: ‘version’
[16:05:22.198]   - Field: ‘result’
[16:05:22.198]   - Field: ‘asynchronous’
[16:05:22.198]   - Field: ‘calls’
[16:05:22.198]   - Field: ‘globals’
[16:05:22.198]   - Field: ‘stdout’
[16:05:22.199]   - Field: ‘earlySignal’
[16:05:22.199]   - Field: ‘lazy’
[16:05:22.199]   - Field: ‘state’
[16:05:22.199] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[16:05:22.199] - Launch lazy future ...
[16:05:22.199] Packages needed by the future expression (n = 0): <none>
[16:05:22.199] Packages needed by future strategies (n = 0): <none>
[16:05:22.200] {
[16:05:22.200]     {
[16:05:22.200]         {
[16:05:22.200]             ...future.startTime <- base::Sys.time()
[16:05:22.200]             {
[16:05:22.200]                 {
[16:05:22.200]                   {
[16:05:22.200]                     {
[16:05:22.200]                       base::local({
[16:05:22.200]                         has_future <- base::requireNamespace("future", 
[16:05:22.200]                           quietly = TRUE)
[16:05:22.200]                         if (has_future) {
[16:05:22.200]                           ns <- base::getNamespace("future")
[16:05:22.200]                           version <- ns[[".package"]][["version"]]
[16:05:22.200]                           if (is.null(version)) 
[16:05:22.200]                             version <- utils::packageVersion("future")
[16:05:22.200]                         }
[16:05:22.200]                         else {
[16:05:22.200]                           version <- NULL
[16:05:22.200]                         }
[16:05:22.200]                         if (!has_future || version < "1.8.0") {
[16:05:22.200]                           info <- base::c(r_version = base::gsub("R version ", 
[16:05:22.200]                             "", base::R.version$version.string), 
[16:05:22.200]                             platform = base::sprintf("%s (%s-bit)", 
[16:05:22.200]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:05:22.200]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[16:05:22.200]                               "release", "version")], collapse = " "), 
[16:05:22.200]                             hostname = base::Sys.info()[["nodename"]])
[16:05:22.200]                           info <- base::sprintf("%s: %s", base::names(info), 
[16:05:22.200]                             info)
[16:05:22.200]                           info <- base::paste(info, collapse = "; ")
[16:05:22.200]                           if (!has_future) {
[16:05:22.200]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:05:22.200]                               info)
[16:05:22.200]                           }
[16:05:22.200]                           else {
[16:05:22.200]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:05:22.200]                               info, version)
[16:05:22.200]                           }
[16:05:22.200]                           base::stop(msg)
[16:05:22.200]                         }
[16:05:22.200]                       })
[16:05:22.200]                     }
[16:05:22.200]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[16:05:22.200]                     base::options(mc.cores = 1L)
[16:05:22.200]                   }
[16:05:22.200]                   options(future.plan = NULL)
[16:05:22.200]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:05:22.200]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:05:22.200]                 }
[16:05:22.200]                 ...future.workdir <- getwd()
[16:05:22.200]             }
[16:05:22.200]             ...future.oldOptions <- base::as.list(base::.Options)
[16:05:22.200]             ...future.oldEnvVars <- base::Sys.getenv()
[16:05:22.200]         }
[16:05:22.200]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:05:22.200]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:05:22.200]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:05:22.200]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:05:22.200]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:05:22.200]             future.stdout.windows.reencode = NULL, width = 80L)
[16:05:22.200]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:05:22.200]             base::names(...future.oldOptions))
[16:05:22.200]     }
[16:05:22.200]     if (FALSE) {
[16:05:22.200]     }
[16:05:22.200]     else {
[16:05:22.200]         if (TRUE) {
[16:05:22.200]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:05:22.200]                 open = "w")
[16:05:22.200]         }
[16:05:22.200]         else {
[16:05:22.200]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:05:22.200]                 windows = "NUL", "/dev/null"), open = "w")
[16:05:22.200]         }
[16:05:22.200]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:05:22.200]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:05:22.200]             base::sink(type = "output", split = FALSE)
[16:05:22.200]             base::close(...future.stdout)
[16:05:22.200]         }, add = TRUE)
[16:05:22.200]     }
[16:05:22.200]     ...future.frame <- base::sys.nframe()
[16:05:22.200]     ...future.conditions <- base::list()
[16:05:22.200]     ...future.rng <- base::globalenv()$.Random.seed
[16:05:22.200]     if (FALSE) {
[16:05:22.200]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:05:22.200]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:05:22.200]     }
[16:05:22.200]     ...future.result <- base::tryCatch({
[16:05:22.200]         base::withCallingHandlers({
[16:05:22.200]             ...future.value <- base::withVisible(base::local({
[16:05:22.200]                 ...future.makeSendCondition <- base::local({
[16:05:22.200]                   sendCondition <- NULL
[16:05:22.200]                   function(frame = 1L) {
[16:05:22.200]                     if (is.function(sendCondition)) 
[16:05:22.200]                       return(sendCondition)
[16:05:22.200]                     ns <- getNamespace("parallel")
[16:05:22.200]                     if (exists("sendData", mode = "function", 
[16:05:22.200]                       envir = ns)) {
[16:05:22.200]                       parallel_sendData <- get("sendData", mode = "function", 
[16:05:22.200]                         envir = ns)
[16:05:22.200]                       envir <- sys.frame(frame)
[16:05:22.200]                       master <- NULL
[16:05:22.200]                       while (!identical(envir, .GlobalEnv) && 
[16:05:22.200]                         !identical(envir, emptyenv())) {
[16:05:22.200]                         if (exists("master", mode = "list", envir = envir, 
[16:05:22.200]                           inherits = FALSE)) {
[16:05:22.200]                           master <- get("master", mode = "list", 
[16:05:22.200]                             envir = envir, inherits = FALSE)
[16:05:22.200]                           if (inherits(master, c("SOCKnode", 
[16:05:22.200]                             "SOCK0node"))) {
[16:05:22.200]                             sendCondition <<- function(cond) {
[16:05:22.200]                               data <- list(type = "VALUE", value = cond, 
[16:05:22.200]                                 success = TRUE)
[16:05:22.200]                               parallel_sendData(master, data)
[16:05:22.200]                             }
[16:05:22.200]                             return(sendCondition)
[16:05:22.200]                           }
[16:05:22.200]                         }
[16:05:22.200]                         frame <- frame + 1L
[16:05:22.200]                         envir <- sys.frame(frame)
[16:05:22.200]                       }
[16:05:22.200]                     }
[16:05:22.200]                     sendCondition <<- function(cond) NULL
[16:05:22.200]                   }
[16:05:22.200]                 })
[16:05:22.200]                 withCallingHandlers({
[16:05:22.200]                   {
[16:05:22.200]                     integer(1e+07)
[16:05:22.200]                   }
[16:05:22.200]                 }, immediateCondition = function(cond) {
[16:05:22.200]                   sendCondition <- ...future.makeSendCondition()
[16:05:22.200]                   sendCondition(cond)
[16:05:22.200]                   muffleCondition <- function (cond, pattern = "^muffle") 
[16:05:22.200]                   {
[16:05:22.200]                     inherits <- base::inherits
[16:05:22.200]                     invokeRestart <- base::invokeRestart
[16:05:22.200]                     is.null <- base::is.null
[16:05:22.200]                     muffled <- FALSE
[16:05:22.200]                     if (inherits(cond, "message")) {
[16:05:22.200]                       muffled <- grepl(pattern, "muffleMessage")
[16:05:22.200]                       if (muffled) 
[16:05:22.200]                         invokeRestart("muffleMessage")
[16:05:22.200]                     }
[16:05:22.200]                     else if (inherits(cond, "warning")) {
[16:05:22.200]                       muffled <- grepl(pattern, "muffleWarning")
[16:05:22.200]                       if (muffled) 
[16:05:22.200]                         invokeRestart("muffleWarning")
[16:05:22.200]                     }
[16:05:22.200]                     else if (inherits(cond, "condition")) {
[16:05:22.200]                       if (!is.null(pattern)) {
[16:05:22.200]                         computeRestarts <- base::computeRestarts
[16:05:22.200]                         grepl <- base::grepl
[16:05:22.200]                         restarts <- computeRestarts(cond)
[16:05:22.200]                         for (restart in restarts) {
[16:05:22.200]                           name <- restart$name
[16:05:22.200]                           if (is.null(name)) 
[16:05:22.200]                             next
[16:05:22.200]                           if (!grepl(pattern, name)) 
[16:05:22.200]                             next
[16:05:22.200]                           invokeRestart(restart)
[16:05:22.200]                           muffled <- TRUE
[16:05:22.200]                           break
[16:05:22.200]                         }
[16:05:22.200]                       }
[16:05:22.200]                     }
[16:05:22.200]                     invisible(muffled)
[16:05:22.200]                   }
[16:05:22.200]                   muffleCondition(cond)
[16:05:22.200]                 })
[16:05:22.200]             }))
[16:05:22.200]             future::FutureResult(value = ...future.value$value, 
[16:05:22.200]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:05:22.200]                   ...future.rng), globalenv = if (FALSE) 
[16:05:22.200]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:05:22.200]                     ...future.globalenv.names))
[16:05:22.200]                 else NULL, started = ...future.startTime, version = "1.8")
[16:05:22.200]         }, condition = base::local({
[16:05:22.200]             c <- base::c
[16:05:22.200]             inherits <- base::inherits
[16:05:22.200]             invokeRestart <- base::invokeRestart
[16:05:22.200]             length <- base::length
[16:05:22.200]             list <- base::list
[16:05:22.200]             seq.int <- base::seq.int
[16:05:22.200]             signalCondition <- base::signalCondition
[16:05:22.200]             sys.calls <- base::sys.calls
[16:05:22.200]             `[[` <- base::`[[`
[16:05:22.200]             `+` <- base::`+`
[16:05:22.200]             `<<-` <- base::`<<-`
[16:05:22.200]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:05:22.200]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:05:22.200]                   3L)]
[16:05:22.200]             }
[16:05:22.200]             function(cond) {
[16:05:22.200]                 is_error <- inherits(cond, "error")
[16:05:22.200]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:05:22.200]                   NULL)
[16:05:22.200]                 if (is_error) {
[16:05:22.200]                   sessionInformation <- function() {
[16:05:22.200]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:05:22.200]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:05:22.200]                       search = base::search(), system = base::Sys.info())
[16:05:22.200]                   }
[16:05:22.200]                   ...future.conditions[[length(...future.conditions) + 
[16:05:22.200]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:05:22.200]                     cond$call), session = sessionInformation(), 
[16:05:22.200]                     timestamp = base::Sys.time(), signaled = 0L)
[16:05:22.200]                   signalCondition(cond)
[16:05:22.200]                 }
[16:05:22.200]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:05:22.200]                 "immediateCondition"))) {
[16:05:22.200]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:05:22.200]                   ...future.conditions[[length(...future.conditions) + 
[16:05:22.200]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:05:22.200]                   if (TRUE && !signal) {
[16:05:22.200]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:05:22.200]                     {
[16:05:22.200]                       inherits <- base::inherits
[16:05:22.200]                       invokeRestart <- base::invokeRestart
[16:05:22.200]                       is.null <- base::is.null
[16:05:22.200]                       muffled <- FALSE
[16:05:22.200]                       if (inherits(cond, "message")) {
[16:05:22.200]                         muffled <- grepl(pattern, "muffleMessage")
[16:05:22.200]                         if (muffled) 
[16:05:22.200]                           invokeRestart("muffleMessage")
[16:05:22.200]                       }
[16:05:22.200]                       else if (inherits(cond, "warning")) {
[16:05:22.200]                         muffled <- grepl(pattern, "muffleWarning")
[16:05:22.200]                         if (muffled) 
[16:05:22.200]                           invokeRestart("muffleWarning")
[16:05:22.200]                       }
[16:05:22.200]                       else if (inherits(cond, "condition")) {
[16:05:22.200]                         if (!is.null(pattern)) {
[16:05:22.200]                           computeRestarts <- base::computeRestarts
[16:05:22.200]                           grepl <- base::grepl
[16:05:22.200]                           restarts <- computeRestarts(cond)
[16:05:22.200]                           for (restart in restarts) {
[16:05:22.200]                             name <- restart$name
[16:05:22.200]                             if (is.null(name)) 
[16:05:22.200]                               next
[16:05:22.200]                             if (!grepl(pattern, name)) 
[16:05:22.200]                               next
[16:05:22.200]                             invokeRestart(restart)
[16:05:22.200]                             muffled <- TRUE
[16:05:22.200]                             break
[16:05:22.200]                           }
[16:05:22.200]                         }
[16:05:22.200]                       }
[16:05:22.200]                       invisible(muffled)
[16:05:22.200]                     }
[16:05:22.200]                     muffleCondition(cond, pattern = "^muffle")
[16:05:22.200]                   }
[16:05:22.200]                 }
[16:05:22.200]                 else {
[16:05:22.200]                   if (TRUE) {
[16:05:22.200]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:05:22.200]                     {
[16:05:22.200]                       inherits <- base::inherits
[16:05:22.200]                       invokeRestart <- base::invokeRestart
[16:05:22.200]                       is.null <- base::is.null
[16:05:22.200]                       muffled <- FALSE
[16:05:22.200]                       if (inherits(cond, "message")) {
[16:05:22.200]                         muffled <- grepl(pattern, "muffleMessage")
[16:05:22.200]                         if (muffled) 
[16:05:22.200]                           invokeRestart("muffleMessage")
[16:05:22.200]                       }
[16:05:22.200]                       else if (inherits(cond, "warning")) {
[16:05:22.200]                         muffled <- grepl(pattern, "muffleWarning")
[16:05:22.200]                         if (muffled) 
[16:05:22.200]                           invokeRestart("muffleWarning")
[16:05:22.200]                       }
[16:05:22.200]                       else if (inherits(cond, "condition")) {
[16:05:22.200]                         if (!is.null(pattern)) {
[16:05:22.200]                           computeRestarts <- base::computeRestarts
[16:05:22.200]                           grepl <- base::grepl
[16:05:22.200]                           restarts <- computeRestarts(cond)
[16:05:22.200]                           for (restart in restarts) {
[16:05:22.200]                             name <- restart$name
[16:05:22.200]                             if (is.null(name)) 
[16:05:22.200]                               next
[16:05:22.200]                             if (!grepl(pattern, name)) 
[16:05:22.200]                               next
[16:05:22.200]                             invokeRestart(restart)
[16:05:22.200]                             muffled <- TRUE
[16:05:22.200]                             break
[16:05:22.200]                           }
[16:05:22.200]                         }
[16:05:22.200]                       }
[16:05:22.200]                       invisible(muffled)
[16:05:22.200]                     }
[16:05:22.200]                     muffleCondition(cond, pattern = "^muffle")
[16:05:22.200]                   }
[16:05:22.200]                 }
[16:05:22.200]             }
[16:05:22.200]         }))
[16:05:22.200]     }, error = function(ex) {
[16:05:22.200]         base::structure(base::list(value = NULL, visible = NULL, 
[16:05:22.200]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:05:22.200]                 ...future.rng), started = ...future.startTime, 
[16:05:22.200]             finished = Sys.time(), session_uuid = NA_character_, 
[16:05:22.200]             version = "1.8"), class = "FutureResult")
[16:05:22.200]     }, finally = {
[16:05:22.200]         if (!identical(...future.workdir, getwd())) 
[16:05:22.200]             setwd(...future.workdir)
[16:05:22.200]         {
[16:05:22.200]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:05:22.200]                 ...future.oldOptions$nwarnings <- NULL
[16:05:22.200]             }
[16:05:22.200]             base::options(...future.oldOptions)
[16:05:22.200]             if (.Platform$OS.type == "windows") {
[16:05:22.200]                 old_names <- names(...future.oldEnvVars)
[16:05:22.200]                 envs <- base::Sys.getenv()
[16:05:22.200]                 names <- names(envs)
[16:05:22.200]                 common <- intersect(names, old_names)
[16:05:22.200]                 added <- setdiff(names, old_names)
[16:05:22.200]                 removed <- setdiff(old_names, names)
[16:05:22.200]                 changed <- common[...future.oldEnvVars[common] != 
[16:05:22.200]                   envs[common]]
[16:05:22.200]                 NAMES <- toupper(changed)
[16:05:22.200]                 args <- list()
[16:05:22.200]                 for (kk in seq_along(NAMES)) {
[16:05:22.200]                   name <- changed[[kk]]
[16:05:22.200]                   NAME <- NAMES[[kk]]
[16:05:22.200]                   if (name != NAME && is.element(NAME, old_names)) 
[16:05:22.200]                     next
[16:05:22.200]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:05:22.200]                 }
[16:05:22.200]                 NAMES <- toupper(added)
[16:05:22.200]                 for (kk in seq_along(NAMES)) {
[16:05:22.200]                   name <- added[[kk]]
[16:05:22.200]                   NAME <- NAMES[[kk]]
[16:05:22.200]                   if (name != NAME && is.element(NAME, old_names)) 
[16:05:22.200]                     next
[16:05:22.200]                   args[[name]] <- ""
[16:05:22.200]                 }
[16:05:22.200]                 NAMES <- toupper(removed)
[16:05:22.200]                 for (kk in seq_along(NAMES)) {
[16:05:22.200]                   name <- removed[[kk]]
[16:05:22.200]                   NAME <- NAMES[[kk]]
[16:05:22.200]                   if (name != NAME && is.element(NAME, old_names)) 
[16:05:22.200]                     next
[16:05:22.200]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:05:22.200]                 }
[16:05:22.200]                 if (length(args) > 0) 
[16:05:22.200]                   base::do.call(base::Sys.setenv, args = args)
[16:05:22.200]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:05:22.200]             }
[16:05:22.200]             else {
[16:05:22.200]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:05:22.200]             }
[16:05:22.200]             {
[16:05:22.200]                 if (base::length(...future.futureOptionsAdded) > 
[16:05:22.200]                   0L) {
[16:05:22.200]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:05:22.200]                   base::names(opts) <- ...future.futureOptionsAdded
[16:05:22.200]                   base::options(opts)
[16:05:22.200]                 }
[16:05:22.200]                 {
[16:05:22.200]                   {
[16:05:22.200]                     base::options(mc.cores = ...future.mc.cores.old)
[16:05:22.200]                     NULL
[16:05:22.200]                   }
[16:05:22.200]                   options(future.plan = NULL)
[16:05:22.200]                   if (is.na(NA_character_)) 
[16:05:22.200]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:05:22.200]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:05:22.200]                   future::plan(list(function (..., workers = 2L, 
[16:05:22.200]                     envir = parent.frame()) 
[16:05:22.200]                   strategy(..., workers = workers, envir = envir)), 
[16:05:22.200]                     .cleanup = FALSE, .init = FALSE)
[16:05:22.200]                 }
[16:05:22.200]             }
[16:05:22.200]         }
[16:05:22.200]     })
[16:05:22.200]     if (TRUE) {
[16:05:22.200]         base::sink(type = "output", split = FALSE)
[16:05:22.200]         if (TRUE) {
[16:05:22.200]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:05:22.200]         }
[16:05:22.200]         else {
[16:05:22.200]             ...future.result["stdout"] <- base::list(NULL)
[16:05:22.200]         }
[16:05:22.200]         base::close(...future.stdout)
[16:05:22.200]         ...future.stdout <- NULL
[16:05:22.200]     }
[16:05:22.200]     ...future.result$conditions <- ...future.conditions
[16:05:22.200]     ...future.result$finished <- base::Sys.time()
[16:05:22.200]     ...future.result
[16:05:22.200] }
[16:05:22.203] MultisessionFuture started
[16:05:22.203] - Launch lazy future ... done
[16:05:22.203] run() for ‘MultisessionFuture’ ... done
> v <- value(f)
[16:05:22.203] result() for ClusterFuture ...
[16:05:22.203] receiveMessageFromWorker() for ClusterFuture ...
[16:05:22.203] - Validating connection of MultisessionFuture
[16:05:22.297] - received message: FutureResult
[16:05:22.297] - Received FutureResult
[16:05:22.297] - Erased future from FutureRegistry
[16:05:22.297] result() for ClusterFuture ...
[16:05:22.297] - result already collected: FutureResult
[16:05:22.297] result() for ClusterFuture ... done
[16:05:22.298] receiveMessageFromWorker() for ClusterFuture ... done
[16:05:22.298] result() for ClusterFuture ... done
[16:05:22.298] result() for ClusterFuture ...
[16:05:22.298] - result already collected: FutureResult
[16:05:22.298] result() for ClusterFuture ... done
> str(v)
 int [1:10000000] 0 0 0 0 0 0 0 0 0 0 ...
> 
> f <- future({ gc() })
[16:05:22.298] getGlobalsAndPackages() ...
[16:05:22.299] Searching for globals...
[16:05:22.299] - globals found: [2] ‘{’, ‘gc’
[16:05:22.300] Searching for globals ... DONE
[16:05:22.300] Resolving globals: FALSE
[16:05:22.300] 
[16:05:22.300] 
[16:05:22.300] getGlobalsAndPackages() ... DONE
[16:05:22.300] run() for ‘Future’ ...
[16:05:22.301] - state: ‘created’
[16:05:22.301] - Future backend: ‘FutureStrategy’, ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[16:05:22.311] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[16:05:22.311] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[16:05:22.311]   - Field: ‘node’
[16:05:22.311]   - Field: ‘label’
[16:05:22.312]   - Field: ‘local’
[16:05:22.312]   - Field: ‘owner’
[16:05:22.312]   - Field: ‘envir’
[16:05:22.312]   - Field: ‘workers’
[16:05:22.312]   - Field: ‘packages’
[16:05:22.312]   - Field: ‘gc’
[16:05:22.312]   - Field: ‘conditions’
[16:05:22.312]   - Field: ‘persistent’
[16:05:22.312]   - Field: ‘expr’
[16:05:22.312]   - Field: ‘uuid’
[16:05:22.312]   - Field: ‘seed’
[16:05:22.313]   - Field: ‘version’
[16:05:22.313]   - Field: ‘result’
[16:05:22.313]   - Field: ‘asynchronous’
[16:05:22.313]   - Field: ‘calls’
[16:05:22.313]   - Field: ‘globals’
[16:05:22.313]   - Field: ‘stdout’
[16:05:22.313]   - Field: ‘earlySignal’
[16:05:22.313]   - Field: ‘lazy’
[16:05:22.313]   - Field: ‘state’
[16:05:22.313] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[16:05:22.313] - Launch lazy future ...
[16:05:22.314] Packages needed by the future expression (n = 0): <none>
[16:05:22.314] Packages needed by future strategies (n = 0): <none>
[16:05:22.314] {
[16:05:22.314]     {
[16:05:22.314]         {
[16:05:22.314]             ...future.startTime <- base::Sys.time()
[16:05:22.314]             {
[16:05:22.314]                 {
[16:05:22.314]                   {
[16:05:22.314]                     {
[16:05:22.314]                       base::local({
[16:05:22.314]                         has_future <- base::requireNamespace("future", 
[16:05:22.314]                           quietly = TRUE)
[16:05:22.314]                         if (has_future) {
[16:05:22.314]                           ns <- base::getNamespace("future")
[16:05:22.314]                           version <- ns[[".package"]][["version"]]
[16:05:22.314]                           if (is.null(version)) 
[16:05:22.314]                             version <- utils::packageVersion("future")
[16:05:22.314]                         }
[16:05:22.314]                         else {
[16:05:22.314]                           version <- NULL
[16:05:22.314]                         }
[16:05:22.314]                         if (!has_future || version < "1.8.0") {
[16:05:22.314]                           info <- base::c(r_version = base::gsub("R version ", 
[16:05:22.314]                             "", base::R.version$version.string), 
[16:05:22.314]                             platform = base::sprintf("%s (%s-bit)", 
[16:05:22.314]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:05:22.314]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[16:05:22.314]                               "release", "version")], collapse = " "), 
[16:05:22.314]                             hostname = base::Sys.info()[["nodename"]])
[16:05:22.314]                           info <- base::sprintf("%s: %s", base::names(info), 
[16:05:22.314]                             info)
[16:05:22.314]                           info <- base::paste(info, collapse = "; ")
[16:05:22.314]                           if (!has_future) {
[16:05:22.314]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:05:22.314]                               info)
[16:05:22.314]                           }
[16:05:22.314]                           else {
[16:05:22.314]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:05:22.314]                               info, version)
[16:05:22.314]                           }
[16:05:22.314]                           base::stop(msg)
[16:05:22.314]                         }
[16:05:22.314]                       })
[16:05:22.314]                     }
[16:05:22.314]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[16:05:22.314]                     base::options(mc.cores = 1L)
[16:05:22.314]                   }
[16:05:22.314]                   options(future.plan = NULL)
[16:05:22.314]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:05:22.314]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:05:22.314]                 }
[16:05:22.314]                 ...future.workdir <- getwd()
[16:05:22.314]             }
[16:05:22.314]             ...future.oldOptions <- base::as.list(base::.Options)
[16:05:22.314]             ...future.oldEnvVars <- base::Sys.getenv()
[16:05:22.314]         }
[16:05:22.314]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:05:22.314]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:05:22.314]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:05:22.314]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:05:22.314]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:05:22.314]             future.stdout.windows.reencode = NULL, width = 80L)
[16:05:22.314]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:05:22.314]             base::names(...future.oldOptions))
[16:05:22.314]     }
[16:05:22.314]     if (FALSE) {
[16:05:22.314]     }
[16:05:22.314]     else {
[16:05:22.314]         if (TRUE) {
[16:05:22.314]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:05:22.314]                 open = "w")
[16:05:22.314]         }
[16:05:22.314]         else {
[16:05:22.314]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:05:22.314]                 windows = "NUL", "/dev/null"), open = "w")
[16:05:22.314]         }
[16:05:22.314]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:05:22.314]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:05:22.314]             base::sink(type = "output", split = FALSE)
[16:05:22.314]             base::close(...future.stdout)
[16:05:22.314]         }, add = TRUE)
[16:05:22.314]     }
[16:05:22.314]     ...future.frame <- base::sys.nframe()
[16:05:22.314]     ...future.conditions <- base::list()
[16:05:22.314]     ...future.rng <- base::globalenv()$.Random.seed
[16:05:22.314]     if (FALSE) {
[16:05:22.314]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:05:22.314]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:05:22.314]     }
[16:05:22.314]     ...future.result <- base::tryCatch({
[16:05:22.314]         base::withCallingHandlers({
[16:05:22.314]             ...future.value <- base::withVisible(base::local({
[16:05:22.314]                 ...future.makeSendCondition <- base::local({
[16:05:22.314]                   sendCondition <- NULL
[16:05:22.314]                   function(frame = 1L) {
[16:05:22.314]                     if (is.function(sendCondition)) 
[16:05:22.314]                       return(sendCondition)
[16:05:22.314]                     ns <- getNamespace("parallel")
[16:05:22.314]                     if (exists("sendData", mode = "function", 
[16:05:22.314]                       envir = ns)) {
[16:05:22.314]                       parallel_sendData <- get("sendData", mode = "function", 
[16:05:22.314]                         envir = ns)
[16:05:22.314]                       envir <- sys.frame(frame)
[16:05:22.314]                       master <- NULL
[16:05:22.314]                       while (!identical(envir, .GlobalEnv) && 
[16:05:22.314]                         !identical(envir, emptyenv())) {
[16:05:22.314]                         if (exists("master", mode = "list", envir = envir, 
[16:05:22.314]                           inherits = FALSE)) {
[16:05:22.314]                           master <- get("master", mode = "list", 
[16:05:22.314]                             envir = envir, inherits = FALSE)
[16:05:22.314]                           if (inherits(master, c("SOCKnode", 
[16:05:22.314]                             "SOCK0node"))) {
[16:05:22.314]                             sendCondition <<- function(cond) {
[16:05:22.314]                               data <- list(type = "VALUE", value = cond, 
[16:05:22.314]                                 success = TRUE)
[16:05:22.314]                               parallel_sendData(master, data)
[16:05:22.314]                             }
[16:05:22.314]                             return(sendCondition)
[16:05:22.314]                           }
[16:05:22.314]                         }
[16:05:22.314]                         frame <- frame + 1L
[16:05:22.314]                         envir <- sys.frame(frame)
[16:05:22.314]                       }
[16:05:22.314]                     }
[16:05:22.314]                     sendCondition <<- function(cond) NULL
[16:05:22.314]                   }
[16:05:22.314]                 })
[16:05:22.314]                 withCallingHandlers({
[16:05:22.314]                   {
[16:05:22.314]                     gc()
[16:05:22.314]                   }
[16:05:22.314]                 }, immediateCondition = function(cond) {
[16:05:22.314]                   sendCondition <- ...future.makeSendCondition()
[16:05:22.314]                   sendCondition(cond)
[16:05:22.314]                   muffleCondition <- function (cond, pattern = "^muffle") 
[16:05:22.314]                   {
[16:05:22.314]                     inherits <- base::inherits
[16:05:22.314]                     invokeRestart <- base::invokeRestart
[16:05:22.314]                     is.null <- base::is.null
[16:05:22.314]                     muffled <- FALSE
[16:05:22.314]                     if (inherits(cond, "message")) {
[16:05:22.314]                       muffled <- grepl(pattern, "muffleMessage")
[16:05:22.314]                       if (muffled) 
[16:05:22.314]                         invokeRestart("muffleMessage")
[16:05:22.314]                     }
[16:05:22.314]                     else if (inherits(cond, "warning")) {
[16:05:22.314]                       muffled <- grepl(pattern, "muffleWarning")
[16:05:22.314]                       if (muffled) 
[16:05:22.314]                         invokeRestart("muffleWarning")
[16:05:22.314]                     }
[16:05:22.314]                     else if (inherits(cond, "condition")) {
[16:05:22.314]                       if (!is.null(pattern)) {
[16:05:22.314]                         computeRestarts <- base::computeRestarts
[16:05:22.314]                         grepl <- base::grepl
[16:05:22.314]                         restarts <- computeRestarts(cond)
[16:05:22.314]                         for (restart in restarts) {
[16:05:22.314]                           name <- restart$name
[16:05:22.314]                           if (is.null(name)) 
[16:05:22.314]                             next
[16:05:22.314]                           if (!grepl(pattern, name)) 
[16:05:22.314]                             next
[16:05:22.314]                           invokeRestart(restart)
[16:05:22.314]                           muffled <- TRUE
[16:05:22.314]                           break
[16:05:22.314]                         }
[16:05:22.314]                       }
[16:05:22.314]                     }
[16:05:22.314]                     invisible(muffled)
[16:05:22.314]                   }
[16:05:22.314]                   muffleCondition(cond)
[16:05:22.314]                 })
[16:05:22.314]             }))
[16:05:22.314]             future::FutureResult(value = ...future.value$value, 
[16:05:22.314]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:05:22.314]                   ...future.rng), globalenv = if (FALSE) 
[16:05:22.314]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:05:22.314]                     ...future.globalenv.names))
[16:05:22.314]                 else NULL, started = ...future.startTime, version = "1.8")
[16:05:22.314]         }, condition = base::local({
[16:05:22.314]             c <- base::c
[16:05:22.314]             inherits <- base::inherits
[16:05:22.314]             invokeRestart <- base::invokeRestart
[16:05:22.314]             length <- base::length
[16:05:22.314]             list <- base::list
[16:05:22.314]             seq.int <- base::seq.int
[16:05:22.314]             signalCondition <- base::signalCondition
[16:05:22.314]             sys.calls <- base::sys.calls
[16:05:22.314]             `[[` <- base::`[[`
[16:05:22.314]             `+` <- base::`+`
[16:05:22.314]             `<<-` <- base::`<<-`
[16:05:22.314]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:05:22.314]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:05:22.314]                   3L)]
[16:05:22.314]             }
[16:05:22.314]             function(cond) {
[16:05:22.314]                 is_error <- inherits(cond, "error")
[16:05:22.314]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:05:22.314]                   NULL)
[16:05:22.314]                 if (is_error) {
[16:05:22.314]                   sessionInformation <- function() {
[16:05:22.314]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:05:22.314]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:05:22.314]                       search = base::search(), system = base::Sys.info())
[16:05:22.314]                   }
[16:05:22.314]                   ...future.conditions[[length(...future.conditions) + 
[16:05:22.314]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:05:22.314]                     cond$call), session = sessionInformation(), 
[16:05:22.314]                     timestamp = base::Sys.time(), signaled = 0L)
[16:05:22.314]                   signalCondition(cond)
[16:05:22.314]                 }
[16:05:22.314]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:05:22.314]                 "immediateCondition"))) {
[16:05:22.314]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:05:22.314]                   ...future.conditions[[length(...future.conditions) + 
[16:05:22.314]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:05:22.314]                   if (TRUE && !signal) {
[16:05:22.314]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:05:22.314]                     {
[16:05:22.314]                       inherits <- base::inherits
[16:05:22.314]                       invokeRestart <- base::invokeRestart
[16:05:22.314]                       is.null <- base::is.null
[16:05:22.314]                       muffled <- FALSE
[16:05:22.314]                       if (inherits(cond, "message")) {
[16:05:22.314]                         muffled <- grepl(pattern, "muffleMessage")
[16:05:22.314]                         if (muffled) 
[16:05:22.314]                           invokeRestart("muffleMessage")
[16:05:22.314]                       }
[16:05:22.314]                       else if (inherits(cond, "warning")) {
[16:05:22.314]                         muffled <- grepl(pattern, "muffleWarning")
[16:05:22.314]                         if (muffled) 
[16:05:22.314]                           invokeRestart("muffleWarning")
[16:05:22.314]                       }
[16:05:22.314]                       else if (inherits(cond, "condition")) {
[16:05:22.314]                         if (!is.null(pattern)) {
[16:05:22.314]                           computeRestarts <- base::computeRestarts
[16:05:22.314]                           grepl <- base::grepl
[16:05:22.314]                           restarts <- computeRestarts(cond)
[16:05:22.314]                           for (restart in restarts) {
[16:05:22.314]                             name <- restart$name
[16:05:22.314]                             if (is.null(name)) 
[16:05:22.314]                               next
[16:05:22.314]                             if (!grepl(pattern, name)) 
[16:05:22.314]                               next
[16:05:22.314]                             invokeRestart(restart)
[16:05:22.314]                             muffled <- TRUE
[16:05:22.314]                             break
[16:05:22.314]                           }
[16:05:22.314]                         }
[16:05:22.314]                       }
[16:05:22.314]                       invisible(muffled)
[16:05:22.314]                     }
[16:05:22.314]                     muffleCondition(cond, pattern = "^muffle")
[16:05:22.314]                   }
[16:05:22.314]                 }
[16:05:22.314]                 else {
[16:05:22.314]                   if (TRUE) {
[16:05:22.314]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:05:22.314]                     {
[16:05:22.314]                       inherits <- base::inherits
[16:05:22.314]                       invokeRestart <- base::invokeRestart
[16:05:22.314]                       is.null <- base::is.null
[16:05:22.314]                       muffled <- FALSE
[16:05:22.314]                       if (inherits(cond, "message")) {
[16:05:22.314]                         muffled <- grepl(pattern, "muffleMessage")
[16:05:22.314]                         if (muffled) 
[16:05:22.314]                           invokeRestart("muffleMessage")
[16:05:22.314]                       }
[16:05:22.314]                       else if (inherits(cond, "warning")) {
[16:05:22.314]                         muffled <- grepl(pattern, "muffleWarning")
[16:05:22.314]                         if (muffled) 
[16:05:22.314]                           invokeRestart("muffleWarning")
[16:05:22.314]                       }
[16:05:22.314]                       else if (inherits(cond, "condition")) {
[16:05:22.314]                         if (!is.null(pattern)) {
[16:05:22.314]                           computeRestarts <- base::computeRestarts
[16:05:22.314]                           grepl <- base::grepl
[16:05:22.314]                           restarts <- computeRestarts(cond)
[16:05:22.314]                           for (restart in restarts) {
[16:05:22.314]                             name <- restart$name
[16:05:22.314]                             if (is.null(name)) 
[16:05:22.314]                               next
[16:05:22.314]                             if (!grepl(pattern, name)) 
[16:05:22.314]                               next
[16:05:22.314]                             invokeRestart(restart)
[16:05:22.314]                             muffled <- TRUE
[16:05:22.314]                             break
[16:05:22.314]                           }
[16:05:22.314]                         }
[16:05:22.314]                       }
[16:05:22.314]                       invisible(muffled)
[16:05:22.314]                     }
[16:05:22.314]                     muffleCondition(cond, pattern = "^muffle")
[16:05:22.314]                   }
[16:05:22.314]                 }
[16:05:22.314]             }
[16:05:22.314]         }))
[16:05:22.314]     }, error = function(ex) {
[16:05:22.314]         base::structure(base::list(value = NULL, visible = NULL, 
[16:05:22.314]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:05:22.314]                 ...future.rng), started = ...future.startTime, 
[16:05:22.314]             finished = Sys.time(), session_uuid = NA_character_, 
[16:05:22.314]             version = "1.8"), class = "FutureResult")
[16:05:22.314]     }, finally = {
[16:05:22.314]         if (!identical(...future.workdir, getwd())) 
[16:05:22.314]             setwd(...future.workdir)
[16:05:22.314]         {
[16:05:22.314]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:05:22.314]                 ...future.oldOptions$nwarnings <- NULL
[16:05:22.314]             }
[16:05:22.314]             base::options(...future.oldOptions)
[16:05:22.314]             if (.Platform$OS.type == "windows") {
[16:05:22.314]                 old_names <- names(...future.oldEnvVars)
[16:05:22.314]                 envs <- base::Sys.getenv()
[16:05:22.314]                 names <- names(envs)
[16:05:22.314]                 common <- intersect(names, old_names)
[16:05:22.314]                 added <- setdiff(names, old_names)
[16:05:22.314]                 removed <- setdiff(old_names, names)
[16:05:22.314]                 changed <- common[...future.oldEnvVars[common] != 
[16:05:22.314]                   envs[common]]
[16:05:22.314]                 NAMES <- toupper(changed)
[16:05:22.314]                 args <- list()
[16:05:22.314]                 for (kk in seq_along(NAMES)) {
[16:05:22.314]                   name <- changed[[kk]]
[16:05:22.314]                   NAME <- NAMES[[kk]]
[16:05:22.314]                   if (name != NAME && is.element(NAME, old_names)) 
[16:05:22.314]                     next
[16:05:22.314]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:05:22.314]                 }
[16:05:22.314]                 NAMES <- toupper(added)
[16:05:22.314]                 for (kk in seq_along(NAMES)) {
[16:05:22.314]                   name <- added[[kk]]
[16:05:22.314]                   NAME <- NAMES[[kk]]
[16:05:22.314]                   if (name != NAME && is.element(NAME, old_names)) 
[16:05:22.314]                     next
[16:05:22.314]                   args[[name]] <- ""
[16:05:22.314]                 }
[16:05:22.314]                 NAMES <- toupper(removed)
[16:05:22.314]                 for (kk in seq_along(NAMES)) {
[16:05:22.314]                   name <- removed[[kk]]
[16:05:22.314]                   NAME <- NAMES[[kk]]
[16:05:22.314]                   if (name != NAME && is.element(NAME, old_names)) 
[16:05:22.314]                     next
[16:05:22.314]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:05:22.314]                 }
[16:05:22.314]                 if (length(args) > 0) 
[16:05:22.314]                   base::do.call(base::Sys.setenv, args = args)
[16:05:22.314]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:05:22.314]             }
[16:05:22.314]             else {
[16:05:22.314]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:05:22.314]             }
[16:05:22.314]             {
[16:05:22.314]                 if (base::length(...future.futureOptionsAdded) > 
[16:05:22.314]                   0L) {
[16:05:22.314]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:05:22.314]                   base::names(opts) <- ...future.futureOptionsAdded
[16:05:22.314]                   base::options(opts)
[16:05:22.314]                 }
[16:05:22.314]                 {
[16:05:22.314]                   {
[16:05:22.314]                     base::options(mc.cores = ...future.mc.cores.old)
[16:05:22.314]                     NULL
[16:05:22.314]                   }
[16:05:22.314]                   options(future.plan = NULL)
[16:05:22.314]                   if (is.na(NA_character_)) 
[16:05:22.314]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:05:22.314]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:05:22.314]                   future::plan(list(function (..., workers = 2L, 
[16:05:22.314]                     envir = parent.frame()) 
[16:05:22.314]                   strategy(..., workers = workers, envir = envir)), 
[16:05:22.314]                     .cleanup = FALSE, .init = FALSE)
[16:05:22.314]                 }
[16:05:22.314]             }
[16:05:22.314]         }
[16:05:22.314]     })
[16:05:22.314]     if (TRUE) {
[16:05:22.314]         base::sink(type = "output", split = FALSE)
[16:05:22.314]         if (TRUE) {
[16:05:22.314]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:05:22.314]         }
[16:05:22.314]         else {
[16:05:22.314]             ...future.result["stdout"] <- base::list(NULL)
[16:05:22.314]         }
[16:05:22.314]         base::close(...future.stdout)
[16:05:22.314]         ...future.stdout <- NULL
[16:05:22.314]     }
[16:05:22.314]     ...future.result$conditions <- ...future.conditions
[16:05:22.314]     ...future.result$finished <- base::Sys.time()
[16:05:22.314]     ...future.result
[16:05:22.314] }
[16:05:22.317] MultisessionFuture started
[16:05:22.317] - Launch lazy future ... done
[16:05:22.317] run() for ‘MultisessionFuture’ ... done
> v <- value(f)
[16:05:22.318] result() for ClusterFuture ...
[16:05:22.318] receiveMessageFromWorker() for ClusterFuture ...
[16:05:22.318] - Validating connection of MultisessionFuture
[16:05:22.383] - received message: FutureResult
[16:05:22.383] - Received FutureResult
[16:05:22.384] - Erased future from FutureRegistry
[16:05:22.384] result() for ClusterFuture ...
[16:05:22.384] - result already collected: FutureResult
[16:05:22.384] result() for ClusterFuture ... done
[16:05:22.384] receiveMessageFromWorker() for ClusterFuture ... done
[16:05:22.384] result() for ClusterFuture ... done
[16:05:22.384] result() for ClusterFuture ...
[16:05:22.384] - result already collected: FutureResult
[16:05:22.384] result() for ClusterFuture ... done
> print(v)
         used (Mb) gc trigger (Mb) max used (Mb)
Ncells 395062 21.1     836944 44.7   664120 35.5
Vcells 704731  5.4    8388608 64.0  5727918 43.8
> 
> f <- future({ integer(10e6) }, gc = TRUE)
[16:05:22.385] getGlobalsAndPackages() ...
[16:05:22.385] Searching for globals...
[16:05:22.386] - globals found: [2] ‘{’, ‘integer’
[16:05:22.386] Searching for globals ... DONE
[16:05:22.386] Resolving globals: FALSE
[16:05:22.386] 
[16:05:22.386] 
[16:05:22.386] getGlobalsAndPackages() ... DONE
[16:05:22.387] run() for ‘Future’ ...
[16:05:22.387] - state: ‘created’
[16:05:22.387] - Future backend: ‘FutureStrategy’, ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[16:05:22.397] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[16:05:22.397] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[16:05:22.398]   - Field: ‘node’
[16:05:22.398]   - Field: ‘label’
[16:05:22.398]   - Field: ‘local’
[16:05:22.398]   - Field: ‘owner’
[16:05:22.398]   - Field: ‘envir’
[16:05:22.398]   - Field: ‘workers’
[16:05:22.398]   - Field: ‘packages’
[16:05:22.398]   - Field: ‘gc’
[16:05:22.398]   - Field: ‘conditions’
[16:05:22.398]   - Field: ‘persistent’
[16:05:22.398]   - Field: ‘expr’
[16:05:22.399]   - Field: ‘uuid’
[16:05:22.399]   - Field: ‘seed’
[16:05:22.399]   - Field: ‘version’
[16:05:22.399]   - Field: ‘result’
[16:05:22.399]   - Field: ‘asynchronous’
[16:05:22.399]   - Field: ‘calls’
[16:05:22.399]   - Field: ‘globals’
[16:05:22.399]   - Field: ‘stdout’
[16:05:22.399]   - Field: ‘earlySignal’
[16:05:22.399]   - Field: ‘lazy’
[16:05:22.399]   - Field: ‘state’
[16:05:22.400] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[16:05:22.400] - Launch lazy future ...
[16:05:22.400] Packages needed by the future expression (n = 0): <none>
[16:05:22.400] Packages needed by future strategies (n = 0): <none>
[16:05:22.400] {
[16:05:22.400]     {
[16:05:22.400]         {
[16:05:22.400]             ...future.startTime <- base::Sys.time()
[16:05:22.400]             {
[16:05:22.400]                 {
[16:05:22.400]                   {
[16:05:22.400]                     {
[16:05:22.400]                       base::local({
[16:05:22.400]                         has_future <- base::requireNamespace("future", 
[16:05:22.400]                           quietly = TRUE)
[16:05:22.400]                         if (has_future) {
[16:05:22.400]                           ns <- base::getNamespace("future")
[16:05:22.400]                           version <- ns[[".package"]][["version"]]
[16:05:22.400]                           if (is.null(version)) 
[16:05:22.400]                             version <- utils::packageVersion("future")
[16:05:22.400]                         }
[16:05:22.400]                         else {
[16:05:22.400]                           version <- NULL
[16:05:22.400]                         }
[16:05:22.400]                         if (!has_future || version < "1.8.0") {
[16:05:22.400]                           info <- base::c(r_version = base::gsub("R version ", 
[16:05:22.400]                             "", base::R.version$version.string), 
[16:05:22.400]                             platform = base::sprintf("%s (%s-bit)", 
[16:05:22.400]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:05:22.400]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[16:05:22.400]                               "release", "version")], collapse = " "), 
[16:05:22.400]                             hostname = base::Sys.info()[["nodename"]])
[16:05:22.400]                           info <- base::sprintf("%s: %s", base::names(info), 
[16:05:22.400]                             info)
[16:05:22.400]                           info <- base::paste(info, collapse = "; ")
[16:05:22.400]                           if (!has_future) {
[16:05:22.400]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:05:22.400]                               info)
[16:05:22.400]                           }
[16:05:22.400]                           else {
[16:05:22.400]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:05:22.400]                               info, version)
[16:05:22.400]                           }
[16:05:22.400]                           base::stop(msg)
[16:05:22.400]                         }
[16:05:22.400]                       })
[16:05:22.400]                     }
[16:05:22.400]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[16:05:22.400]                     base::options(mc.cores = 1L)
[16:05:22.400]                   }
[16:05:22.400]                   options(future.plan = NULL)
[16:05:22.400]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:05:22.400]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:05:22.400]                 }
[16:05:22.400]                 ...future.workdir <- getwd()
[16:05:22.400]             }
[16:05:22.400]             ...future.oldOptions <- base::as.list(base::.Options)
[16:05:22.400]             ...future.oldEnvVars <- base::Sys.getenv()
[16:05:22.400]         }
[16:05:22.400]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:05:22.400]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:05:22.400]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:05:22.400]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:05:22.400]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:05:22.400]             future.stdout.windows.reencode = NULL, width = 80L)
[16:05:22.400]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:05:22.400]             base::names(...future.oldOptions))
[16:05:22.400]     }
[16:05:22.400]     if (FALSE) {
[16:05:22.400]     }
[16:05:22.400]     else {
[16:05:22.400]         if (TRUE) {
[16:05:22.400]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:05:22.400]                 open = "w")
[16:05:22.400]         }
[16:05:22.400]         else {
[16:05:22.400]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:05:22.400]                 windows = "NUL", "/dev/null"), open = "w")
[16:05:22.400]         }
[16:05:22.400]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:05:22.400]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:05:22.400]             base::sink(type = "output", split = FALSE)
[16:05:22.400]             base::close(...future.stdout)
[16:05:22.400]         }, add = TRUE)
[16:05:22.400]     }
[16:05:22.400]     ...future.frame <- base::sys.nframe()
[16:05:22.400]     ...future.conditions <- base::list()
[16:05:22.400]     ...future.rng <- base::globalenv()$.Random.seed
[16:05:22.400]     if (FALSE) {
[16:05:22.400]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:05:22.400]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:05:22.400]     }
[16:05:22.400]     ...future.result <- base::tryCatch({
[16:05:22.400]         base::withCallingHandlers({
[16:05:22.400]             ...future.value <- base::withVisible(base::local({
[16:05:22.400]                 ...future.makeSendCondition <- base::local({
[16:05:22.400]                   sendCondition <- NULL
[16:05:22.400]                   function(frame = 1L) {
[16:05:22.400]                     if (is.function(sendCondition)) 
[16:05:22.400]                       return(sendCondition)
[16:05:22.400]                     ns <- getNamespace("parallel")
[16:05:22.400]                     if (exists("sendData", mode = "function", 
[16:05:22.400]                       envir = ns)) {
[16:05:22.400]                       parallel_sendData <- get("sendData", mode = "function", 
[16:05:22.400]                         envir = ns)
[16:05:22.400]                       envir <- sys.frame(frame)
[16:05:22.400]                       master <- NULL
[16:05:22.400]                       while (!identical(envir, .GlobalEnv) && 
[16:05:22.400]                         !identical(envir, emptyenv())) {
[16:05:22.400]                         if (exists("master", mode = "list", envir = envir, 
[16:05:22.400]                           inherits = FALSE)) {
[16:05:22.400]                           master <- get("master", mode = "list", 
[16:05:22.400]                             envir = envir, inherits = FALSE)
[16:05:22.400]                           if (inherits(master, c("SOCKnode", 
[16:05:22.400]                             "SOCK0node"))) {
[16:05:22.400]                             sendCondition <<- function(cond) {
[16:05:22.400]                               data <- list(type = "VALUE", value = cond, 
[16:05:22.400]                                 success = TRUE)
[16:05:22.400]                               parallel_sendData(master, data)
[16:05:22.400]                             }
[16:05:22.400]                             return(sendCondition)
[16:05:22.400]                           }
[16:05:22.400]                         }
[16:05:22.400]                         frame <- frame + 1L
[16:05:22.400]                         envir <- sys.frame(frame)
[16:05:22.400]                       }
[16:05:22.400]                     }
[16:05:22.400]                     sendCondition <<- function(cond) NULL
[16:05:22.400]                   }
[16:05:22.400]                 })
[16:05:22.400]                 withCallingHandlers({
[16:05:22.400]                   {
[16:05:22.400]                     integer(1e+07)
[16:05:22.400]                   }
[16:05:22.400]                 }, immediateCondition = function(cond) {
[16:05:22.400]                   sendCondition <- ...future.makeSendCondition()
[16:05:22.400]                   sendCondition(cond)
[16:05:22.400]                   muffleCondition <- function (cond, pattern = "^muffle") 
[16:05:22.400]                   {
[16:05:22.400]                     inherits <- base::inherits
[16:05:22.400]                     invokeRestart <- base::invokeRestart
[16:05:22.400]                     is.null <- base::is.null
[16:05:22.400]                     muffled <- FALSE
[16:05:22.400]                     if (inherits(cond, "message")) {
[16:05:22.400]                       muffled <- grepl(pattern, "muffleMessage")
[16:05:22.400]                       if (muffled) 
[16:05:22.400]                         invokeRestart("muffleMessage")
[16:05:22.400]                     }
[16:05:22.400]                     else if (inherits(cond, "warning")) {
[16:05:22.400]                       muffled <- grepl(pattern, "muffleWarning")
[16:05:22.400]                       if (muffled) 
[16:05:22.400]                         invokeRestart("muffleWarning")
[16:05:22.400]                     }
[16:05:22.400]                     else if (inherits(cond, "condition")) {
[16:05:22.400]                       if (!is.null(pattern)) {
[16:05:22.400]                         computeRestarts <- base::computeRestarts
[16:05:22.400]                         grepl <- base::grepl
[16:05:22.400]                         restarts <- computeRestarts(cond)
[16:05:22.400]                         for (restart in restarts) {
[16:05:22.400]                           name <- restart$name
[16:05:22.400]                           if (is.null(name)) 
[16:05:22.400]                             next
[16:05:22.400]                           if (!grepl(pattern, name)) 
[16:05:22.400]                             next
[16:05:22.400]                           invokeRestart(restart)
[16:05:22.400]                           muffled <- TRUE
[16:05:22.400]                           break
[16:05:22.400]                         }
[16:05:22.400]                       }
[16:05:22.400]                     }
[16:05:22.400]                     invisible(muffled)
[16:05:22.400]                   }
[16:05:22.400]                   muffleCondition(cond)
[16:05:22.400]                 })
[16:05:22.400]             }))
[16:05:22.400]             future::FutureResult(value = ...future.value$value, 
[16:05:22.400]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:05:22.400]                   ...future.rng), globalenv = if (FALSE) 
[16:05:22.400]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:05:22.400]                     ...future.globalenv.names))
[16:05:22.400]                 else NULL, started = ...future.startTime, version = "1.8")
[16:05:22.400]         }, condition = base::local({
[16:05:22.400]             c <- base::c
[16:05:22.400]             inherits <- base::inherits
[16:05:22.400]             invokeRestart <- base::invokeRestart
[16:05:22.400]             length <- base::length
[16:05:22.400]             list <- base::list
[16:05:22.400]             seq.int <- base::seq.int
[16:05:22.400]             signalCondition <- base::signalCondition
[16:05:22.400]             sys.calls <- base::sys.calls
[16:05:22.400]             `[[` <- base::`[[`
[16:05:22.400]             `+` <- base::`+`
[16:05:22.400]             `<<-` <- base::`<<-`
[16:05:22.400]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:05:22.400]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:05:22.400]                   3L)]
[16:05:22.400]             }
[16:05:22.400]             function(cond) {
[16:05:22.400]                 is_error <- inherits(cond, "error")
[16:05:22.400]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:05:22.400]                   NULL)
[16:05:22.400]                 if (is_error) {
[16:05:22.400]                   sessionInformation <- function() {
[16:05:22.400]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:05:22.400]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:05:22.400]                       search = base::search(), system = base::Sys.info())
[16:05:22.400]                   }
[16:05:22.400]                   ...future.conditions[[length(...future.conditions) + 
[16:05:22.400]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:05:22.400]                     cond$call), session = sessionInformation(), 
[16:05:22.400]                     timestamp = base::Sys.time(), signaled = 0L)
[16:05:22.400]                   signalCondition(cond)
[16:05:22.400]                 }
[16:05:22.400]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:05:22.400]                 "immediateCondition"))) {
[16:05:22.400]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:05:22.400]                   ...future.conditions[[length(...future.conditions) + 
[16:05:22.400]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:05:22.400]                   if (TRUE && !signal) {
[16:05:22.400]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:05:22.400]                     {
[16:05:22.400]                       inherits <- base::inherits
[16:05:22.400]                       invokeRestart <- base::invokeRestart
[16:05:22.400]                       is.null <- base::is.null
[16:05:22.400]                       muffled <- FALSE
[16:05:22.400]                       if (inherits(cond, "message")) {
[16:05:22.400]                         muffled <- grepl(pattern, "muffleMessage")
[16:05:22.400]                         if (muffled) 
[16:05:22.400]                           invokeRestart("muffleMessage")
[16:05:22.400]                       }
[16:05:22.400]                       else if (inherits(cond, "warning")) {
[16:05:22.400]                         muffled <- grepl(pattern, "muffleWarning")
[16:05:22.400]                         if (muffled) 
[16:05:22.400]                           invokeRestart("muffleWarning")
[16:05:22.400]                       }
[16:05:22.400]                       else if (inherits(cond, "condition")) {
[16:05:22.400]                         if (!is.null(pattern)) {
[16:05:22.400]                           computeRestarts <- base::computeRestarts
[16:05:22.400]                           grepl <- base::grepl
[16:05:22.400]                           restarts <- computeRestarts(cond)
[16:05:22.400]                           for (restart in restarts) {
[16:05:22.400]                             name <- restart$name
[16:05:22.400]                             if (is.null(name)) 
[16:05:22.400]                               next
[16:05:22.400]                             if (!grepl(pattern, name)) 
[16:05:22.400]                               next
[16:05:22.400]                             invokeRestart(restart)
[16:05:22.400]                             muffled <- TRUE
[16:05:22.400]                             break
[16:05:22.400]                           }
[16:05:22.400]                         }
[16:05:22.400]                       }
[16:05:22.400]                       invisible(muffled)
[16:05:22.400]                     }
[16:05:22.400]                     muffleCondition(cond, pattern = "^muffle")
[16:05:22.400]                   }
[16:05:22.400]                 }
[16:05:22.400]                 else {
[16:05:22.400]                   if (TRUE) {
[16:05:22.400]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:05:22.400]                     {
[16:05:22.400]                       inherits <- base::inherits
[16:05:22.400]                       invokeRestart <- base::invokeRestart
[16:05:22.400]                       is.null <- base::is.null
[16:05:22.400]                       muffled <- FALSE
[16:05:22.400]                       if (inherits(cond, "message")) {
[16:05:22.400]                         muffled <- grepl(pattern, "muffleMessage")
[16:05:22.400]                         if (muffled) 
[16:05:22.400]                           invokeRestart("muffleMessage")
[16:05:22.400]                       }
[16:05:22.400]                       else if (inherits(cond, "warning")) {
[16:05:22.400]                         muffled <- grepl(pattern, "muffleWarning")
[16:05:22.400]                         if (muffled) 
[16:05:22.400]                           invokeRestart("muffleWarning")
[16:05:22.400]                       }
[16:05:22.400]                       else if (inherits(cond, "condition")) {
[16:05:22.400]                         if (!is.null(pattern)) {
[16:05:22.400]                           computeRestarts <- base::computeRestarts
[16:05:22.400]                           grepl <- base::grepl
[16:05:22.400]                           restarts <- computeRestarts(cond)
[16:05:22.400]                           for (restart in restarts) {
[16:05:22.400]                             name <- restart$name
[16:05:22.400]                             if (is.null(name)) 
[16:05:22.400]                               next
[16:05:22.400]                             if (!grepl(pattern, name)) 
[16:05:22.400]                               next
[16:05:22.400]                             invokeRestart(restart)
[16:05:22.400]                             muffled <- TRUE
[16:05:22.400]                             break
[16:05:22.400]                           }
[16:05:22.400]                         }
[16:05:22.400]                       }
[16:05:22.400]                       invisible(muffled)
[16:05:22.400]                     }
[16:05:22.400]                     muffleCondition(cond, pattern = "^muffle")
[16:05:22.400]                   }
[16:05:22.400]                 }
[16:05:22.400]             }
[16:05:22.400]         }))
[16:05:22.400]     }, error = function(ex) {
[16:05:22.400]         base::structure(base::list(value = NULL, visible = NULL, 
[16:05:22.400]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:05:22.400]                 ...future.rng), started = ...future.startTime, 
[16:05:22.400]             finished = Sys.time(), session_uuid = NA_character_, 
[16:05:22.400]             version = "1.8"), class = "FutureResult")
[16:05:22.400]     }, finally = {
[16:05:22.400]         if (!identical(...future.workdir, getwd())) 
[16:05:22.400]             setwd(...future.workdir)
[16:05:22.400]         {
[16:05:22.400]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:05:22.400]                 ...future.oldOptions$nwarnings <- NULL
[16:05:22.400]             }
[16:05:22.400]             base::options(...future.oldOptions)
[16:05:22.400]             if (.Platform$OS.type == "windows") {
[16:05:22.400]                 old_names <- names(...future.oldEnvVars)
[16:05:22.400]                 envs <- base::Sys.getenv()
[16:05:22.400]                 names <- names(envs)
[16:05:22.400]                 common <- intersect(names, old_names)
[16:05:22.400]                 added <- setdiff(names, old_names)
[16:05:22.400]                 removed <- setdiff(old_names, names)
[16:05:22.400]                 changed <- common[...future.oldEnvVars[common] != 
[16:05:22.400]                   envs[common]]
[16:05:22.400]                 NAMES <- toupper(changed)
[16:05:22.400]                 args <- list()
[16:05:22.400]                 for (kk in seq_along(NAMES)) {
[16:05:22.400]                   name <- changed[[kk]]
[16:05:22.400]                   NAME <- NAMES[[kk]]
[16:05:22.400]                   if (name != NAME && is.element(NAME, old_names)) 
[16:05:22.400]                     next
[16:05:22.400]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:05:22.400]                 }
[16:05:22.400]                 NAMES <- toupper(added)
[16:05:22.400]                 for (kk in seq_along(NAMES)) {
[16:05:22.400]                   name <- added[[kk]]
[16:05:22.400]                   NAME <- NAMES[[kk]]
[16:05:22.400]                   if (name != NAME && is.element(NAME, old_names)) 
[16:05:22.400]                     next
[16:05:22.400]                   args[[name]] <- ""
[16:05:22.400]                 }
[16:05:22.400]                 NAMES <- toupper(removed)
[16:05:22.400]                 for (kk in seq_along(NAMES)) {
[16:05:22.400]                   name <- removed[[kk]]
[16:05:22.400]                   NAME <- NAMES[[kk]]
[16:05:22.400]                   if (name != NAME && is.element(NAME, old_names)) 
[16:05:22.400]                     next
[16:05:22.400]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:05:22.400]                 }
[16:05:22.400]                 if (length(args) > 0) 
[16:05:22.400]                   base::do.call(base::Sys.setenv, args = args)
[16:05:22.400]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:05:22.400]             }
[16:05:22.400]             else {
[16:05:22.400]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:05:22.400]             }
[16:05:22.400]             {
[16:05:22.400]                 if (base::length(...future.futureOptionsAdded) > 
[16:05:22.400]                   0L) {
[16:05:22.400]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:05:22.400]                   base::names(opts) <- ...future.futureOptionsAdded
[16:05:22.400]                   base::options(opts)
[16:05:22.400]                 }
[16:05:22.400]                 {
[16:05:22.400]                   {
[16:05:22.400]                     base::options(mc.cores = ...future.mc.cores.old)
[16:05:22.400]                     NULL
[16:05:22.400]                   }
[16:05:22.400]                   options(future.plan = NULL)
[16:05:22.400]                   if (is.na(NA_character_)) 
[16:05:22.400]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:05:22.400]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:05:22.400]                   future::plan(list(function (..., workers = 2L, 
[16:05:22.400]                     envir = parent.frame()) 
[16:05:22.400]                   strategy(..., workers = workers, envir = envir)), 
[16:05:22.400]                     .cleanup = FALSE, .init = FALSE)
[16:05:22.400]                 }
[16:05:22.400]             }
[16:05:22.400]         }
[16:05:22.400]     })
[16:05:22.400]     if (TRUE) {
[16:05:22.400]         base::sink(type = "output", split = FALSE)
[16:05:22.400]         if (TRUE) {
[16:05:22.400]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:05:22.400]         }
[16:05:22.400]         else {
[16:05:22.400]             ...future.result["stdout"] <- base::list(NULL)
[16:05:22.400]         }
[16:05:22.400]         base::close(...future.stdout)
[16:05:22.400]         ...future.stdout <- NULL
[16:05:22.400]     }
[16:05:22.400]     ...future.result$conditions <- ...future.conditions
[16:05:22.400]     ...future.result$finished <- base::Sys.time()
[16:05:22.400]     ...future.result
[16:05:22.400] }
[16:05:22.403] MultisessionFuture started
[16:05:22.403] - Launch lazy future ... done
[16:05:22.404] run() for ‘MultisessionFuture’ ... done
> v <- value(f)
[16:05:22.404] result() for ClusterFuture ...
[16:05:22.404] receiveMessageFromWorker() for ClusterFuture ...
[16:05:22.404] - Validating connection of MultisessionFuture
[16:05:22.509] - received message: FutureResult
[16:05:22.509] - Received FutureResult
[16:05:22.509] - Erased future from FutureRegistry
[16:05:22.509] result() for ClusterFuture ...
[16:05:22.509] - result already collected: FutureResult
[16:05:22.509] result() for ClusterFuture ... done
[16:05:22.509] - Garbage collecting worker ...
[16:05:22.762] - Garbage collecting worker ... done
[16:05:22.762] receiveMessageFromWorker() for ClusterFuture ... done
[16:05:22.762] result() for ClusterFuture ... done
[16:05:22.763] result() for ClusterFuture ...
[16:05:22.763] - result already collected: FutureResult
[16:05:22.763] result() for ClusterFuture ... done
> str(v)
 int [1:10000000] 0 0 0 0 0 0 0 0 0 0 ...
> 
> f <- future({ gc() })
[16:05:22.763] getGlobalsAndPackages() ...
[16:05:22.763] Searching for globals...
[16:05:22.764] - globals found: [2] ‘{’, ‘gc’
[16:05:22.764] Searching for globals ... DONE
[16:05:22.764] Resolving globals: FALSE
[16:05:22.765] 
[16:05:22.765] 
[16:05:22.765] getGlobalsAndPackages() ... DONE
[16:05:22.765] run() for ‘Future’ ...
[16:05:22.765] - state: ‘created’
[16:05:22.765] - Future backend: ‘FutureStrategy’, ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[16:05:22.776] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[16:05:22.776] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[16:05:22.776]   - Field: ‘node’
[16:05:22.777]   - Field: ‘label’
[16:05:22.777]   - Field: ‘local’
[16:05:22.777]   - Field: ‘owner’
[16:05:22.777]   - Field: ‘envir’
[16:05:22.777]   - Field: ‘workers’
[16:05:22.777]   - Field: ‘packages’
[16:05:22.777]   - Field: ‘gc’
[16:05:22.777]   - Field: ‘conditions’
[16:05:22.777]   - Field: ‘persistent’
[16:05:22.777]   - Field: ‘expr’
[16:05:22.777]   - Field: ‘uuid’
[16:05:22.778]   - Field: ‘seed’
[16:05:22.778]   - Field: ‘version’
[16:05:22.778]   - Field: ‘result’
[16:05:22.778]   - Field: ‘asynchronous’
[16:05:22.778]   - Field: ‘calls’
[16:05:22.778]   - Field: ‘globals’
[16:05:22.778]   - Field: ‘stdout’
[16:05:22.778]   - Field: ‘earlySignal’
[16:05:22.778]   - Field: ‘lazy’
[16:05:22.778]   - Field: ‘state’
[16:05:22.778] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[16:05:22.779] - Launch lazy future ...
[16:05:22.779] Packages needed by the future expression (n = 0): <none>
[16:05:22.779] Packages needed by future strategies (n = 0): <none>
[16:05:22.779] {
[16:05:22.779]     {
[16:05:22.779]         {
[16:05:22.779]             ...future.startTime <- base::Sys.time()
[16:05:22.779]             {
[16:05:22.779]                 {
[16:05:22.779]                   {
[16:05:22.779]                     {
[16:05:22.779]                       base::local({
[16:05:22.779]                         has_future <- base::requireNamespace("future", 
[16:05:22.779]                           quietly = TRUE)
[16:05:22.779]                         if (has_future) {
[16:05:22.779]                           ns <- base::getNamespace("future")
[16:05:22.779]                           version <- ns[[".package"]][["version"]]
[16:05:22.779]                           if (is.null(version)) 
[16:05:22.779]                             version <- utils::packageVersion("future")
[16:05:22.779]                         }
[16:05:22.779]                         else {
[16:05:22.779]                           version <- NULL
[16:05:22.779]                         }
[16:05:22.779]                         if (!has_future || version < "1.8.0") {
[16:05:22.779]                           info <- base::c(r_version = base::gsub("R version ", 
[16:05:22.779]                             "", base::R.version$version.string), 
[16:05:22.779]                             platform = base::sprintf("%s (%s-bit)", 
[16:05:22.779]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:05:22.779]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[16:05:22.779]                               "release", "version")], collapse = " "), 
[16:05:22.779]                             hostname = base::Sys.info()[["nodename"]])
[16:05:22.779]                           info <- base::sprintf("%s: %s", base::names(info), 
[16:05:22.779]                             info)
[16:05:22.779]                           info <- base::paste(info, collapse = "; ")
[16:05:22.779]                           if (!has_future) {
[16:05:22.779]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:05:22.779]                               info)
[16:05:22.779]                           }
[16:05:22.779]                           else {
[16:05:22.779]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:05:22.779]                               info, version)
[16:05:22.779]                           }
[16:05:22.779]                           base::stop(msg)
[16:05:22.779]                         }
[16:05:22.779]                       })
[16:05:22.779]                     }
[16:05:22.779]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[16:05:22.779]                     base::options(mc.cores = 1L)
[16:05:22.779]                   }
[16:05:22.779]                   options(future.plan = NULL)
[16:05:22.779]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:05:22.779]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:05:22.779]                 }
[16:05:22.779]                 ...future.workdir <- getwd()
[16:05:22.779]             }
[16:05:22.779]             ...future.oldOptions <- base::as.list(base::.Options)
[16:05:22.779]             ...future.oldEnvVars <- base::Sys.getenv()
[16:05:22.779]         }
[16:05:22.779]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:05:22.779]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:05:22.779]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:05:22.779]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:05:22.779]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:05:22.779]             future.stdout.windows.reencode = NULL, width = 80L)
[16:05:22.779]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:05:22.779]             base::names(...future.oldOptions))
[16:05:22.779]     }
[16:05:22.779]     if (FALSE) {
[16:05:22.779]     }
[16:05:22.779]     else {
[16:05:22.779]         if (TRUE) {
[16:05:22.779]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:05:22.779]                 open = "w")
[16:05:22.779]         }
[16:05:22.779]         else {
[16:05:22.779]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:05:22.779]                 windows = "NUL", "/dev/null"), open = "w")
[16:05:22.779]         }
[16:05:22.779]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:05:22.779]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:05:22.779]             base::sink(type = "output", split = FALSE)
[16:05:22.779]             base::close(...future.stdout)
[16:05:22.779]         }, add = TRUE)
[16:05:22.779]     }
[16:05:22.779]     ...future.frame <- base::sys.nframe()
[16:05:22.779]     ...future.conditions <- base::list()
[16:05:22.779]     ...future.rng <- base::globalenv()$.Random.seed
[16:05:22.779]     if (FALSE) {
[16:05:22.779]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:05:22.779]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:05:22.779]     }
[16:05:22.779]     ...future.result <- base::tryCatch({
[16:05:22.779]         base::withCallingHandlers({
[16:05:22.779]             ...future.value <- base::withVisible(base::local({
[16:05:22.779]                 ...future.makeSendCondition <- base::local({
[16:05:22.779]                   sendCondition <- NULL
[16:05:22.779]                   function(frame = 1L) {
[16:05:22.779]                     if (is.function(sendCondition)) 
[16:05:22.779]                       return(sendCondition)
[16:05:22.779]                     ns <- getNamespace("parallel")
[16:05:22.779]                     if (exists("sendData", mode = "function", 
[16:05:22.779]                       envir = ns)) {
[16:05:22.779]                       parallel_sendData <- get("sendData", mode = "function", 
[16:05:22.779]                         envir = ns)
[16:05:22.779]                       envir <- sys.frame(frame)
[16:05:22.779]                       master <- NULL
[16:05:22.779]                       while (!identical(envir, .GlobalEnv) && 
[16:05:22.779]                         !identical(envir, emptyenv())) {
[16:05:22.779]                         if (exists("master", mode = "list", envir = envir, 
[16:05:22.779]                           inherits = FALSE)) {
[16:05:22.779]                           master <- get("master", mode = "list", 
[16:05:22.779]                             envir = envir, inherits = FALSE)
[16:05:22.779]                           if (inherits(master, c("SOCKnode", 
[16:05:22.779]                             "SOCK0node"))) {
[16:05:22.779]                             sendCondition <<- function(cond) {
[16:05:22.779]                               data <- list(type = "VALUE", value = cond, 
[16:05:22.779]                                 success = TRUE)
[16:05:22.779]                               parallel_sendData(master, data)
[16:05:22.779]                             }
[16:05:22.779]                             return(sendCondition)
[16:05:22.779]                           }
[16:05:22.779]                         }
[16:05:22.779]                         frame <- frame + 1L
[16:05:22.779]                         envir <- sys.frame(frame)
[16:05:22.779]                       }
[16:05:22.779]                     }
[16:05:22.779]                     sendCondition <<- function(cond) NULL
[16:05:22.779]                   }
[16:05:22.779]                 })
[16:05:22.779]                 withCallingHandlers({
[16:05:22.779]                   {
[16:05:22.779]                     gc()
[16:05:22.779]                   }
[16:05:22.779]                 }, immediateCondition = function(cond) {
[16:05:22.779]                   sendCondition <- ...future.makeSendCondition()
[16:05:22.779]                   sendCondition(cond)
[16:05:22.779]                   muffleCondition <- function (cond, pattern = "^muffle") 
[16:05:22.779]                   {
[16:05:22.779]                     inherits <- base::inherits
[16:05:22.779]                     invokeRestart <- base::invokeRestart
[16:05:22.779]                     is.null <- base::is.null
[16:05:22.779]                     muffled <- FALSE
[16:05:22.779]                     if (inherits(cond, "message")) {
[16:05:22.779]                       muffled <- grepl(pattern, "muffleMessage")
[16:05:22.779]                       if (muffled) 
[16:05:22.779]                         invokeRestart("muffleMessage")
[16:05:22.779]                     }
[16:05:22.779]                     else if (inherits(cond, "warning")) {
[16:05:22.779]                       muffled <- grepl(pattern, "muffleWarning")
[16:05:22.779]                       if (muffled) 
[16:05:22.779]                         invokeRestart("muffleWarning")
[16:05:22.779]                     }
[16:05:22.779]                     else if (inherits(cond, "condition")) {
[16:05:22.779]                       if (!is.null(pattern)) {
[16:05:22.779]                         computeRestarts <- base::computeRestarts
[16:05:22.779]                         grepl <- base::grepl
[16:05:22.779]                         restarts <- computeRestarts(cond)
[16:05:22.779]                         for (restart in restarts) {
[16:05:22.779]                           name <- restart$name
[16:05:22.779]                           if (is.null(name)) 
[16:05:22.779]                             next
[16:05:22.779]                           if (!grepl(pattern, name)) 
[16:05:22.779]                             next
[16:05:22.779]                           invokeRestart(restart)
[16:05:22.779]                           muffled <- TRUE
[16:05:22.779]                           break
[16:05:22.779]                         }
[16:05:22.779]                       }
[16:05:22.779]                     }
[16:05:22.779]                     invisible(muffled)
[16:05:22.779]                   }
[16:05:22.779]                   muffleCondition(cond)
[16:05:22.779]                 })
[16:05:22.779]             }))
[16:05:22.779]             future::FutureResult(value = ...future.value$value, 
[16:05:22.779]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:05:22.779]                   ...future.rng), globalenv = if (FALSE) 
[16:05:22.779]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:05:22.779]                     ...future.globalenv.names))
[16:05:22.779]                 else NULL, started = ...future.startTime, version = "1.8")
[16:05:22.779]         }, condition = base::local({
[16:05:22.779]             c <- base::c
[16:05:22.779]             inherits <- base::inherits
[16:05:22.779]             invokeRestart <- base::invokeRestart
[16:05:22.779]             length <- base::length
[16:05:22.779]             list <- base::list
[16:05:22.779]             seq.int <- base::seq.int
[16:05:22.779]             signalCondition <- base::signalCondition
[16:05:22.779]             sys.calls <- base::sys.calls
[16:05:22.779]             `[[` <- base::`[[`
[16:05:22.779]             `+` <- base::`+`
[16:05:22.779]             `<<-` <- base::`<<-`
[16:05:22.779]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:05:22.779]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:05:22.779]                   3L)]
[16:05:22.779]             }
[16:05:22.779]             function(cond) {
[16:05:22.779]                 is_error <- inherits(cond, "error")
[16:05:22.779]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:05:22.779]                   NULL)
[16:05:22.779]                 if (is_error) {
[16:05:22.779]                   sessionInformation <- function() {
[16:05:22.779]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:05:22.779]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:05:22.779]                       search = base::search(), system = base::Sys.info())
[16:05:22.779]                   }
[16:05:22.779]                   ...future.conditions[[length(...future.conditions) + 
[16:05:22.779]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:05:22.779]                     cond$call), session = sessionInformation(), 
[16:05:22.779]                     timestamp = base::Sys.time(), signaled = 0L)
[16:05:22.779]                   signalCondition(cond)
[16:05:22.779]                 }
[16:05:22.779]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:05:22.779]                 "immediateCondition"))) {
[16:05:22.779]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:05:22.779]                   ...future.conditions[[length(...future.conditions) + 
[16:05:22.779]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:05:22.779]                   if (TRUE && !signal) {
[16:05:22.779]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:05:22.779]                     {
[16:05:22.779]                       inherits <- base::inherits
[16:05:22.779]                       invokeRestart <- base::invokeRestart
[16:05:22.779]                       is.null <- base::is.null
[16:05:22.779]                       muffled <- FALSE
[16:05:22.779]                       if (inherits(cond, "message")) {
[16:05:22.779]                         muffled <- grepl(pattern, "muffleMessage")
[16:05:22.779]                         if (muffled) 
[16:05:22.779]                           invokeRestart("muffleMessage")
[16:05:22.779]                       }
[16:05:22.779]                       else if (inherits(cond, "warning")) {
[16:05:22.779]                         muffled <- grepl(pattern, "muffleWarning")
[16:05:22.779]                         if (muffled) 
[16:05:22.779]                           invokeRestart("muffleWarning")
[16:05:22.779]                       }
[16:05:22.779]                       else if (inherits(cond, "condition")) {
[16:05:22.779]                         if (!is.null(pattern)) {
[16:05:22.779]                           computeRestarts <- base::computeRestarts
[16:05:22.779]                           grepl <- base::grepl
[16:05:22.779]                           restarts <- computeRestarts(cond)
[16:05:22.779]                           for (restart in restarts) {
[16:05:22.779]                             name <- restart$name
[16:05:22.779]                             if (is.null(name)) 
[16:05:22.779]                               next
[16:05:22.779]                             if (!grepl(pattern, name)) 
[16:05:22.779]                               next
[16:05:22.779]                             invokeRestart(restart)
[16:05:22.779]                             muffled <- TRUE
[16:05:22.779]                             break
[16:05:22.779]                           }
[16:05:22.779]                         }
[16:05:22.779]                       }
[16:05:22.779]                       invisible(muffled)
[16:05:22.779]                     }
[16:05:22.779]                     muffleCondition(cond, pattern = "^muffle")
[16:05:22.779]                   }
[16:05:22.779]                 }
[16:05:22.779]                 else {
[16:05:22.779]                   if (TRUE) {
[16:05:22.779]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:05:22.779]                     {
[16:05:22.779]                       inherits <- base::inherits
[16:05:22.779]                       invokeRestart <- base::invokeRestart
[16:05:22.779]                       is.null <- base::is.null
[16:05:22.779]                       muffled <- FALSE
[16:05:22.779]                       if (inherits(cond, "message")) {
[16:05:22.779]                         muffled <- grepl(pattern, "muffleMessage")
[16:05:22.779]                         if (muffled) 
[16:05:22.779]                           invokeRestart("muffleMessage")
[16:05:22.779]                       }
[16:05:22.779]                       else if (inherits(cond, "warning")) {
[16:05:22.779]                         muffled <- grepl(pattern, "muffleWarning")
[16:05:22.779]                         if (muffled) 
[16:05:22.779]                           invokeRestart("muffleWarning")
[16:05:22.779]                       }
[16:05:22.779]                       else if (inherits(cond, "condition")) {
[16:05:22.779]                         if (!is.null(pattern)) {
[16:05:22.779]                           computeRestarts <- base::computeRestarts
[16:05:22.779]                           grepl <- base::grepl
[16:05:22.779]                           restarts <- computeRestarts(cond)
[16:05:22.779]                           for (restart in restarts) {
[16:05:22.779]                             name <- restart$name
[16:05:22.779]                             if (is.null(name)) 
[16:05:22.779]                               next
[16:05:22.779]                             if (!grepl(pattern, name)) 
[16:05:22.779]                               next
[16:05:22.779]                             invokeRestart(restart)
[16:05:22.779]                             muffled <- TRUE
[16:05:22.779]                             break
[16:05:22.779]                           }
[16:05:22.779]                         }
[16:05:22.779]                       }
[16:05:22.779]                       invisible(muffled)
[16:05:22.779]                     }
[16:05:22.779]                     muffleCondition(cond, pattern = "^muffle")
[16:05:22.779]                   }
[16:05:22.779]                 }
[16:05:22.779]             }
[16:05:22.779]         }))
[16:05:22.779]     }, error = function(ex) {
[16:05:22.779]         base::structure(base::list(value = NULL, visible = NULL, 
[16:05:22.779]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:05:22.779]                 ...future.rng), started = ...future.startTime, 
[16:05:22.779]             finished = Sys.time(), session_uuid = NA_character_, 
[16:05:22.779]             version = "1.8"), class = "FutureResult")
[16:05:22.779]     }, finally = {
[16:05:22.779]         if (!identical(...future.workdir, getwd())) 
[16:05:22.779]             setwd(...future.workdir)
[16:05:22.779]         {
[16:05:22.779]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:05:22.779]                 ...future.oldOptions$nwarnings <- NULL
[16:05:22.779]             }
[16:05:22.779]             base::options(...future.oldOptions)
[16:05:22.779]             if (.Platform$OS.type == "windows") {
[16:05:22.779]                 old_names <- names(...future.oldEnvVars)
[16:05:22.779]                 envs <- base::Sys.getenv()
[16:05:22.779]                 names <- names(envs)
[16:05:22.779]                 common <- intersect(names, old_names)
[16:05:22.779]                 added <- setdiff(names, old_names)
[16:05:22.779]                 removed <- setdiff(old_names, names)
[16:05:22.779]                 changed <- common[...future.oldEnvVars[common] != 
[16:05:22.779]                   envs[common]]
[16:05:22.779]                 NAMES <- toupper(changed)
[16:05:22.779]                 args <- list()
[16:05:22.779]                 for (kk in seq_along(NAMES)) {
[16:05:22.779]                   name <- changed[[kk]]
[16:05:22.779]                   NAME <- NAMES[[kk]]
[16:05:22.779]                   if (name != NAME && is.element(NAME, old_names)) 
[16:05:22.779]                     next
[16:05:22.779]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:05:22.779]                 }
[16:05:22.779]                 NAMES <- toupper(added)
[16:05:22.779]                 for (kk in seq_along(NAMES)) {
[16:05:22.779]                   name <- added[[kk]]
[16:05:22.779]                   NAME <- NAMES[[kk]]
[16:05:22.779]                   if (name != NAME && is.element(NAME, old_names)) 
[16:05:22.779]                     next
[16:05:22.779]                   args[[name]] <- ""
[16:05:22.779]                 }
[16:05:22.779]                 NAMES <- toupper(removed)
[16:05:22.779]                 for (kk in seq_along(NAMES)) {
[16:05:22.779]                   name <- removed[[kk]]
[16:05:22.779]                   NAME <- NAMES[[kk]]
[16:05:22.779]                   if (name != NAME && is.element(NAME, old_names)) 
[16:05:22.779]                     next
[16:05:22.779]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:05:22.779]                 }
[16:05:22.779]                 if (length(args) > 0) 
[16:05:22.779]                   base::do.call(base::Sys.setenv, args = args)
[16:05:22.779]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:05:22.779]             }
[16:05:22.779]             else {
[16:05:22.779]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:05:22.779]             }
[16:05:22.779]             {
[16:05:22.779]                 if (base::length(...future.futureOptionsAdded) > 
[16:05:22.779]                   0L) {
[16:05:22.779]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:05:22.779]                   base::names(opts) <- ...future.futureOptionsAdded
[16:05:22.779]                   base::options(opts)
[16:05:22.779]                 }
[16:05:22.779]                 {
[16:05:22.779]                   {
[16:05:22.779]                     base::options(mc.cores = ...future.mc.cores.old)
[16:05:22.779]                     NULL
[16:05:22.779]                   }
[16:05:22.779]                   options(future.plan = NULL)
[16:05:22.779]                   if (is.na(NA_character_)) 
[16:05:22.779]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:05:22.779]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:05:22.779]                   future::plan(list(function (..., workers = 2L, 
[16:05:22.779]                     envir = parent.frame()) 
[16:05:22.779]                   strategy(..., workers = workers, envir = envir)), 
[16:05:22.779]                     .cleanup = FALSE, .init = FALSE)
[16:05:22.779]                 }
[16:05:22.779]             }
[16:05:22.779]         }
[16:05:22.779]     })
[16:05:22.779]     if (TRUE) {
[16:05:22.779]         base::sink(type = "output", split = FALSE)
[16:05:22.779]         if (TRUE) {
[16:05:22.779]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:05:22.779]         }
[16:05:22.779]         else {
[16:05:22.779]             ...future.result["stdout"] <- base::list(NULL)
[16:05:22.779]         }
[16:05:22.779]         base::close(...future.stdout)
[16:05:22.779]         ...future.stdout <- NULL
[16:05:22.779]     }
[16:05:22.779]     ...future.result$conditions <- ...future.conditions
[16:05:22.779]     ...future.result$finished <- base::Sys.time()
[16:05:22.779]     ...future.result
[16:05:22.779] }
[16:05:22.782] MultisessionFuture started
[16:05:22.783] - Launch lazy future ... done
[16:05:22.783] run() for ‘MultisessionFuture’ ... done
> v <- value(f)
[16:05:22.783] result() for ClusterFuture ...
[16:05:22.783] receiveMessageFromWorker() for ClusterFuture ...
[16:05:22.783] - Validating connection of MultisessionFuture
[16:05:22.847] - received message: FutureResult
[16:05:22.847] - Received FutureResult
[16:05:22.847] - Erased future from FutureRegistry
[16:05:22.847] result() for ClusterFuture ...
[16:05:22.848] - result already collected: FutureResult
[16:05:22.848] result() for ClusterFuture ... done
[16:05:22.848] receiveMessageFromWorker() for ClusterFuture ... done
[16:05:22.848] result() for ClusterFuture ... done
[16:05:22.848] result() for ClusterFuture ...
[16:05:22.848] - result already collected: FutureResult
[16:05:22.848] result() for ClusterFuture ... done
> print(v)
         used (Mb) gc trigger  (Mb) max used  (Mb)
Ncells 395203 21.2     836944  44.7   664120  35.5
Vcells 704816  5.4   13457836 102.7 15781226 120.5
> 
> message("*** multisession(..., gc = TRUE) ... TRUE")
*** multisession(..., gc = TRUE) ... TRUE
> 
> 
> message("*** multisession(...) - stopping with plan() change ...")
*** multisession(...) - stopping with plan() change ...
>   
> plan(multisession, workers = 2L)
[16:05:22.849] plan(): Setting new future strategy stack:
[16:05:22.849] List of future strategies:
[16:05:22.849] 1. multisession:
[16:05:22.849]    - args: function (..., workers = 2L, envir = parent.frame())
[16:05:22.849]    - tweaked: TRUE
[16:05:22.849]    - call: plan(multisession, workers = 2L)
[16:05:22.850] plan(): plan_init() of ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ...
[16:05:22.850] multisession:
[16:05:22.850] - args: function (..., workers = 2L, envir = parent.frame())
[16:05:22.850] - tweaked: TRUE
[16:05:22.850] - call: plan(multisession, workers = 2L)
[16:05:22.850] getGlobalsAndPackages() ...
[16:05:22.850] Not searching for globals
[16:05:22.851] - globals: [0] <none>
[16:05:22.851] getGlobalsAndPackages() ... DONE
[16:05:22.851] [local output] makeClusterPSOCK() ...
[16:05:22.856] [local output] Workers: [n = 2] ‘localhost’, ‘localhost’
[16:05:22.857] [local output] Base port: 11555
[16:05:22.857] [local output] Getting setup options for 2 cluster nodes ...
[16:05:22.857] [local output]  - Node 1 of 2 ...
[16:05:22.858] [local output] localMachine=TRUE => revtunnel=FALSE

[16:05:22.859] [local output] Rscript port: 11555

[16:05:22.859] [local output]  - Node 2 of 2 ...
[16:05:22.860] [local output] localMachine=TRUE => revtunnel=FALSE

[16:05:22.861] [local output] Rscript port: 11555

[16:05:22.861] [local output] Getting setup options for 2 cluster nodes ... done
[16:05:22.861] [local output]  - Parallel setup requested for some PSOCK nodes
[16:05:22.862] [local output] Setting up PSOCK nodes in parallel
[16:05:22.862] List of 36
[16:05:22.862]  $ worker          : chr "localhost"
[16:05:22.862]   ..- attr(*, "localhost")= logi TRUE
[16:05:22.862]  $ master          : chr "localhost"
[16:05:22.862]  $ port            : int 11555
[16:05:22.862]  $ connectTimeout  : num 120
[16:05:22.862]  $ timeout         : num 2592000
[16:05:22.862]  $ rscript         : chr "'/usr/local/lib/R/bin/Rscript'"
[16:05:22.862]  $ homogeneous     : logi TRUE
[16:05:22.862]  $ rscript_args    : chr "--default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),fi"| __truncated__
[16:05:22.862]  $ rscript_envs    : NULL
[16:05:22.862]  $ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[16:05:22.862]  $ rscript_startup : NULL
[16:05:22.862]  $ rscript_sh      : chr "sh"
[16:05:22.862]  $ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[16:05:22.862]  $ methods         : logi TRUE
[16:05:22.862]  $ socketOptions   : chr "no-delay"
[16:05:22.862]  $ useXDR          : logi FALSE
[16:05:22.862]  $ outfile         : chr "/dev/null"
[16:05:22.862]  $ renice          : int NA
[16:05:22.862]  $ rshcmd          : NULL
[16:05:22.862]  $ user            : chr(0) 
[16:05:22.862]  $ revtunnel       : logi FALSE
[16:05:22.862]  $ rshlogfile      : NULL
[16:05:22.862]  $ rshopts         : chr(0) 
[16:05:22.862]  $ rank            : int 1
[16:05:22.862]  $ manual          : logi FALSE
[16:05:22.862]  $ dryrun          : logi FALSE
[16:05:22.862]  $ quiet           : logi FALSE
[16:05:22.862]  $ setup_strategy  : chr "parallel"
[16:05:22.862]  $ local_cmd       : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[16:05:22.862]  $ pidfile         : chr "/tmp/RtmpVtakKw/worker.rank=1.parallelly.parent=87188.15494326bff36.pid"
[16:05:22.862]  $ rshcmd_label    : NULL
[16:05:22.862]  $ rsh_call        : NULL
[16:05:22.862]  $ cmd             : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[16:05:22.862]  $ localMachine    : logi TRUE
[16:05:22.862]  $ make_fcn        :function (worker = getOption2("parallelly.localhost.hostname", "localhost"), 
[16:05:22.862]     master = NULL, port, connectTimeout = getOption2("parallelly.makeNodePSOCK.connectTimeout", 
[16:05:22.862]         2 * 60), timeout = getOption2("parallelly.makeNodePSOCK.timeout", 
[16:05:22.862]         30 * 24 * 60 * 60), rscript = NULL, homogeneous = NULL, rscript_args = NULL, 
[16:05:22.862]     rscript_envs = NULL, rscript_libs = NULL, rscript_startup = NULL, rscript_sh = c("auto", 
[16:05:22.862]         "cmd", "sh"), default_packages = c("datasets", "utils", "grDevices", 
[16:05:22.862]         "graphics", "stats", if (methods) "methods"), methods = TRUE, socketOptions = getOption2("parallelly.makeNodePSOCK.socketOptions", 
[16:05:22.862]         "no-delay"), useXDR = getOption2("parallelly.makeNodePSOCK.useXDR", 
[16:05:22.862]         FALSE), outfile = "/dev/null", renice = NA_integer_, rshcmd = getOption2("parallelly.makeNodePSOCK.rshcmd", 
[16:05:22.862]         NULL), user = NULL, revtunnel = NA, rshlogfile = NULL, rshopts = getOption2("parallelly.makeNodePSOCK.rshopts", 
[16:05:22.862]         NULL), rank = 1L, manual = FALSE, dryrun = FALSE, quiet = FALSE, 
[16:05:22.862]     setup_strategy = getOption2("parallelly.makeNodePSOCK.setup_strategy", 
[16:05:22.862]         "parallel"), action = c("launch", "options"), verbose = FALSE)  
[16:05:22.862]  $ arguments       :List of 28
[16:05:22.862]   ..$ worker          : chr "localhost"
[16:05:22.862]   ..$ master          : NULL
[16:05:22.862]   ..$ port            : int 11555
[16:05:22.862]   ..$ connectTimeout  : num 120
[16:05:22.862]   ..$ timeout         : num 2592000
[16:05:22.862]   ..$ rscript         : NULL
[16:05:22.862]   ..$ homogeneous     : NULL
[16:05:22.862]   ..$ rscript_args    : NULL
[16:05:22.862]   ..$ rscript_envs    : NULL
[16:05:22.862]   ..$ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[16:05:22.862]   ..$ rscript_startup : NULL
[16:05:22.862]   ..$ rscript_sh      : chr [1:3] "auto" "cmd" "sh"
[16:05:22.862]   ..$ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[16:05:22.862]   ..$ methods         : logi TRUE
[16:05:22.862]   ..$ socketOptions   : chr "no-delay"
[16:05:22.862]   ..$ useXDR          : logi FALSE
[16:05:22.862]   ..$ outfile         : chr "/dev/null"
[16:05:22.862]   ..$ renice          : int NA
[16:05:22.862]   ..$ rshcmd          : NULL
[16:05:22.862]   ..$ user            : NULL
[16:05:22.862]   ..$ revtunnel       : logi NA
[16:05:22.862]   ..$ rshlogfile      : NULL
[16:05:22.862]   ..$ rshopts         : NULL
[16:05:22.862]   ..$ rank            : int 1
[16:05:22.862]   ..$ manual          : logi FALSE
[16:05:22.862]   ..$ dryrun          : logi FALSE
[16:05:22.862]   ..$ quiet           : logi FALSE
[16:05:22.862]   ..$ setup_strategy  : chr "parallel"
[16:05:22.862]  - attr(*, "class")= chr [1:2] "makeNodePSOCKOptions" "makeNodeOptions"
[16:05:22.884] [local output] System call to launch all workers:
[16:05:22.884] [local output] '/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/RtmpVtakKw/worker.rank=1.parallelly.parent=87188.15494326bff36.pid")), silent = TRUE)' -e 'options(socketOptions = "no-delay")' -e '.libPaths(c("/usr/local/lib/R/site-library","/usr/local/lib/R/library"))' -e 'workRSOCK <- tryCatch(parallel:::.workRSOCK, error=function(e) parallel:::.slaveRSOCK); workRSOCK()' MASTER=localhost PORT=11555 OUT=/dev/null TIMEOUT=2592000 XDR=FALSE SETUPTIMEOUT=120 SETUPSTRATEGY=parallel
[16:05:22.884] [local output] Starting PSOCK main server
[16:05:22.885] [local output] Workers launched
[16:05:22.886] [local output] Waiting for workers to connect back
[16:05:22.886]  - [local output] 0 workers out of 2 ready
[16:05:23.123]  - [local output] 0 workers out of 2 ready
[16:05:23.123]  - [local output] 1 workers out of 2 ready
[16:05:23.126]  - [local output] 1 workers out of 2 ready
[16:05:23.126]  - [local output] 2 workers out of 2 ready
[16:05:23.126] [local output] Launching of workers completed
[16:05:23.126] [local output] Collecting session information from workers
[16:05:23.127] [local output]  - Worker #1 of 2
[16:05:23.127] [local output]  - Worker #2 of 2
[16:05:23.127] [local output] makeClusterPSOCK() ... done
[16:05:23.138] Packages needed by the future expression (n = 0): <none>
[16:05:23.138] Packages needed by future strategies (n = 0): <none>
[16:05:23.138] {
[16:05:23.138]     {
[16:05:23.138]         {
[16:05:23.138]             ...future.startTime <- base::Sys.time()
[16:05:23.138]             {
[16:05:23.138]                 {
[16:05:23.138]                   {
[16:05:23.138]                     {
[16:05:23.138]                       base::local({
[16:05:23.138]                         has_future <- base::requireNamespace("future", 
[16:05:23.138]                           quietly = TRUE)
[16:05:23.138]                         if (has_future) {
[16:05:23.138]                           ns <- base::getNamespace("future")
[16:05:23.138]                           version <- ns[[".package"]][["version"]]
[16:05:23.138]                           if (is.null(version)) 
[16:05:23.138]                             version <- utils::packageVersion("future")
[16:05:23.138]                         }
[16:05:23.138]                         else {
[16:05:23.138]                           version <- NULL
[16:05:23.138]                         }
[16:05:23.138]                         if (!has_future || version < "1.8.0") {
[16:05:23.138]                           info <- base::c(r_version = base::gsub("R version ", 
[16:05:23.138]                             "", base::R.version$version.string), 
[16:05:23.138]                             platform = base::sprintf("%s (%s-bit)", 
[16:05:23.138]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:05:23.138]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[16:05:23.138]                               "release", "version")], collapse = " "), 
[16:05:23.138]                             hostname = base::Sys.info()[["nodename"]])
[16:05:23.138]                           info <- base::sprintf("%s: %s", base::names(info), 
[16:05:23.138]                             info)
[16:05:23.138]                           info <- base::paste(info, collapse = "; ")
[16:05:23.138]                           if (!has_future) {
[16:05:23.138]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:05:23.138]                               info)
[16:05:23.138]                           }
[16:05:23.138]                           else {
[16:05:23.138]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:05:23.138]                               info, version)
[16:05:23.138]                           }
[16:05:23.138]                           base::stop(msg)
[16:05:23.138]                         }
[16:05:23.138]                       })
[16:05:23.138]                     }
[16:05:23.138]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[16:05:23.138]                     base::options(mc.cores = 1L)
[16:05:23.138]                   }
[16:05:23.138]                   options(future.plan = NULL)
[16:05:23.138]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:05:23.138]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:05:23.138]                 }
[16:05:23.138]                 ...future.workdir <- getwd()
[16:05:23.138]             }
[16:05:23.138]             ...future.oldOptions <- base::as.list(base::.Options)
[16:05:23.138]             ...future.oldEnvVars <- base::Sys.getenv()
[16:05:23.138]         }
[16:05:23.138]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:05:23.138]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:05:23.138]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:05:23.138]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:05:23.138]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:05:23.138]             future.stdout.windows.reencode = NULL, width = 80L)
[16:05:23.138]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:05:23.138]             base::names(...future.oldOptions))
[16:05:23.138]     }
[16:05:23.138]     if (FALSE) {
[16:05:23.138]     }
[16:05:23.138]     else {
[16:05:23.138]         if (TRUE) {
[16:05:23.138]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:05:23.138]                 open = "w")
[16:05:23.138]         }
[16:05:23.138]         else {
[16:05:23.138]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:05:23.138]                 windows = "NUL", "/dev/null"), open = "w")
[16:05:23.138]         }
[16:05:23.138]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:05:23.138]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:05:23.138]             base::sink(type = "output", split = FALSE)
[16:05:23.138]             base::close(...future.stdout)
[16:05:23.138]         }, add = TRUE)
[16:05:23.138]     }
[16:05:23.138]     ...future.frame <- base::sys.nframe()
[16:05:23.138]     ...future.conditions <- base::list()
[16:05:23.138]     ...future.rng <- base::globalenv()$.Random.seed
[16:05:23.138]     if (FALSE) {
[16:05:23.138]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:05:23.138]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:05:23.138]     }
[16:05:23.138]     ...future.result <- base::tryCatch({
[16:05:23.138]         base::withCallingHandlers({
[16:05:23.138]             ...future.value <- base::withVisible(base::local({
[16:05:23.138]                 ...future.makeSendCondition <- base::local({
[16:05:23.138]                   sendCondition <- NULL
[16:05:23.138]                   function(frame = 1L) {
[16:05:23.138]                     if (is.function(sendCondition)) 
[16:05:23.138]                       return(sendCondition)
[16:05:23.138]                     ns <- getNamespace("parallel")
[16:05:23.138]                     if (exists("sendData", mode = "function", 
[16:05:23.138]                       envir = ns)) {
[16:05:23.138]                       parallel_sendData <- get("sendData", mode = "function", 
[16:05:23.138]                         envir = ns)
[16:05:23.138]                       envir <- sys.frame(frame)
[16:05:23.138]                       master <- NULL
[16:05:23.138]                       while (!identical(envir, .GlobalEnv) && 
[16:05:23.138]                         !identical(envir, emptyenv())) {
[16:05:23.138]                         if (exists("master", mode = "list", envir = envir, 
[16:05:23.138]                           inherits = FALSE)) {
[16:05:23.138]                           master <- get("master", mode = "list", 
[16:05:23.138]                             envir = envir, inherits = FALSE)
[16:05:23.138]                           if (inherits(master, c("SOCKnode", 
[16:05:23.138]                             "SOCK0node"))) {
[16:05:23.138]                             sendCondition <<- function(cond) {
[16:05:23.138]                               data <- list(type = "VALUE", value = cond, 
[16:05:23.138]                                 success = TRUE)
[16:05:23.138]                               parallel_sendData(master, data)
[16:05:23.138]                             }
[16:05:23.138]                             return(sendCondition)
[16:05:23.138]                           }
[16:05:23.138]                         }
[16:05:23.138]                         frame <- frame + 1L
[16:05:23.138]                         envir <- sys.frame(frame)
[16:05:23.138]                       }
[16:05:23.138]                     }
[16:05:23.138]                     sendCondition <<- function(cond) NULL
[16:05:23.138]                   }
[16:05:23.138]                 })
[16:05:23.138]                 withCallingHandlers({
[16:05:23.138]                   NA
[16:05:23.138]                 }, immediateCondition = function(cond) {
[16:05:23.138]                   sendCondition <- ...future.makeSendCondition()
[16:05:23.138]                   sendCondition(cond)
[16:05:23.138]                   muffleCondition <- function (cond, pattern = "^muffle") 
[16:05:23.138]                   {
[16:05:23.138]                     inherits <- base::inherits
[16:05:23.138]                     invokeRestart <- base::invokeRestart
[16:05:23.138]                     is.null <- base::is.null
[16:05:23.138]                     muffled <- FALSE
[16:05:23.138]                     if (inherits(cond, "message")) {
[16:05:23.138]                       muffled <- grepl(pattern, "muffleMessage")
[16:05:23.138]                       if (muffled) 
[16:05:23.138]                         invokeRestart("muffleMessage")
[16:05:23.138]                     }
[16:05:23.138]                     else if (inherits(cond, "warning")) {
[16:05:23.138]                       muffled <- grepl(pattern, "muffleWarning")
[16:05:23.138]                       if (muffled) 
[16:05:23.138]                         invokeRestart("muffleWarning")
[16:05:23.138]                     }
[16:05:23.138]                     else if (inherits(cond, "condition")) {
[16:05:23.138]                       if (!is.null(pattern)) {
[16:05:23.138]                         computeRestarts <- base::computeRestarts
[16:05:23.138]                         grepl <- base::grepl
[16:05:23.138]                         restarts <- computeRestarts(cond)
[16:05:23.138]                         for (restart in restarts) {
[16:05:23.138]                           name <- restart$name
[16:05:23.138]                           if (is.null(name)) 
[16:05:23.138]                             next
[16:05:23.138]                           if (!grepl(pattern, name)) 
[16:05:23.138]                             next
[16:05:23.138]                           invokeRestart(restart)
[16:05:23.138]                           muffled <- TRUE
[16:05:23.138]                           break
[16:05:23.138]                         }
[16:05:23.138]                       }
[16:05:23.138]                     }
[16:05:23.138]                     invisible(muffled)
[16:05:23.138]                   }
[16:05:23.138]                   muffleCondition(cond)
[16:05:23.138]                 })
[16:05:23.138]             }))
[16:05:23.138]             future::FutureResult(value = ...future.value$value, 
[16:05:23.138]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:05:23.138]                   ...future.rng), globalenv = if (FALSE) 
[16:05:23.138]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:05:23.138]                     ...future.globalenv.names))
[16:05:23.138]                 else NULL, started = ...future.startTime, version = "1.8")
[16:05:23.138]         }, condition = base::local({
[16:05:23.138]             c <- base::c
[16:05:23.138]             inherits <- base::inherits
[16:05:23.138]             invokeRestart <- base::invokeRestart
[16:05:23.138]             length <- base::length
[16:05:23.138]             list <- base::list
[16:05:23.138]             seq.int <- base::seq.int
[16:05:23.138]             signalCondition <- base::signalCondition
[16:05:23.138]             sys.calls <- base::sys.calls
[16:05:23.138]             `[[` <- base::`[[`
[16:05:23.138]             `+` <- base::`+`
[16:05:23.138]             `<<-` <- base::`<<-`
[16:05:23.138]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:05:23.138]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:05:23.138]                   3L)]
[16:05:23.138]             }
[16:05:23.138]             function(cond) {
[16:05:23.138]                 is_error <- inherits(cond, "error")
[16:05:23.138]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:05:23.138]                   NULL)
[16:05:23.138]                 if (is_error) {
[16:05:23.138]                   sessionInformation <- function() {
[16:05:23.138]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:05:23.138]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:05:23.138]                       search = base::search(), system = base::Sys.info())
[16:05:23.138]                   }
[16:05:23.138]                   ...future.conditions[[length(...future.conditions) + 
[16:05:23.138]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:05:23.138]                     cond$call), session = sessionInformation(), 
[16:05:23.138]                     timestamp = base::Sys.time(), signaled = 0L)
[16:05:23.138]                   signalCondition(cond)
[16:05:23.138]                 }
[16:05:23.138]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:05:23.138]                 "immediateCondition"))) {
[16:05:23.138]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:05:23.138]                   ...future.conditions[[length(...future.conditions) + 
[16:05:23.138]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:05:23.138]                   if (TRUE && !signal) {
[16:05:23.138]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:05:23.138]                     {
[16:05:23.138]                       inherits <- base::inherits
[16:05:23.138]                       invokeRestart <- base::invokeRestart
[16:05:23.138]                       is.null <- base::is.null
[16:05:23.138]                       muffled <- FALSE
[16:05:23.138]                       if (inherits(cond, "message")) {
[16:05:23.138]                         muffled <- grepl(pattern, "muffleMessage")
[16:05:23.138]                         if (muffled) 
[16:05:23.138]                           invokeRestart("muffleMessage")
[16:05:23.138]                       }
[16:05:23.138]                       else if (inherits(cond, "warning")) {
[16:05:23.138]                         muffled <- grepl(pattern, "muffleWarning")
[16:05:23.138]                         if (muffled) 
[16:05:23.138]                           invokeRestart("muffleWarning")
[16:05:23.138]                       }
[16:05:23.138]                       else if (inherits(cond, "condition")) {
[16:05:23.138]                         if (!is.null(pattern)) {
[16:05:23.138]                           computeRestarts <- base::computeRestarts
[16:05:23.138]                           grepl <- base::grepl
[16:05:23.138]                           restarts <- computeRestarts(cond)
[16:05:23.138]                           for (restart in restarts) {
[16:05:23.138]                             name <- restart$name
[16:05:23.138]                             if (is.null(name)) 
[16:05:23.138]                               next
[16:05:23.138]                             if (!grepl(pattern, name)) 
[16:05:23.138]                               next
[16:05:23.138]                             invokeRestart(restart)
[16:05:23.138]                             muffled <- TRUE
[16:05:23.138]                             break
[16:05:23.138]                           }
[16:05:23.138]                         }
[16:05:23.138]                       }
[16:05:23.138]                       invisible(muffled)
[16:05:23.138]                     }
[16:05:23.138]                     muffleCondition(cond, pattern = "^muffle")
[16:05:23.138]                   }
[16:05:23.138]                 }
[16:05:23.138]                 else {
[16:05:23.138]                   if (TRUE) {
[16:05:23.138]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:05:23.138]                     {
[16:05:23.138]                       inherits <- base::inherits
[16:05:23.138]                       invokeRestart <- base::invokeRestart
[16:05:23.138]                       is.null <- base::is.null
[16:05:23.138]                       muffled <- FALSE
[16:05:23.138]                       if (inherits(cond, "message")) {
[16:05:23.138]                         muffled <- grepl(pattern, "muffleMessage")
[16:05:23.138]                         if (muffled) 
[16:05:23.138]                           invokeRestart("muffleMessage")
[16:05:23.138]                       }
[16:05:23.138]                       else if (inherits(cond, "warning")) {
[16:05:23.138]                         muffled <- grepl(pattern, "muffleWarning")
[16:05:23.138]                         if (muffled) 
[16:05:23.138]                           invokeRestart("muffleWarning")
[16:05:23.138]                       }
[16:05:23.138]                       else if (inherits(cond, "condition")) {
[16:05:23.138]                         if (!is.null(pattern)) {
[16:05:23.138]                           computeRestarts <- base::computeRestarts
[16:05:23.138]                           grepl <- base::grepl
[16:05:23.138]                           restarts <- computeRestarts(cond)
[16:05:23.138]                           for (restart in restarts) {
[16:05:23.138]                             name <- restart$name
[16:05:23.138]                             if (is.null(name)) 
[16:05:23.138]                               next
[16:05:23.138]                             if (!grepl(pattern, name)) 
[16:05:23.138]                               next
[16:05:23.138]                             invokeRestart(restart)
[16:05:23.138]                             muffled <- TRUE
[16:05:23.138]                             break
[16:05:23.138]                           }
[16:05:23.138]                         }
[16:05:23.138]                       }
[16:05:23.138]                       invisible(muffled)
[16:05:23.138]                     }
[16:05:23.138]                     muffleCondition(cond, pattern = "^muffle")
[16:05:23.138]                   }
[16:05:23.138]                 }
[16:05:23.138]             }
[16:05:23.138]         }))
[16:05:23.138]     }, error = function(ex) {
[16:05:23.138]         base::structure(base::list(value = NULL, visible = NULL, 
[16:05:23.138]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:05:23.138]                 ...future.rng), started = ...future.startTime, 
[16:05:23.138]             finished = Sys.time(), session_uuid = NA_character_, 
[16:05:23.138]             version = "1.8"), class = "FutureResult")
[16:05:23.138]     }, finally = {
[16:05:23.138]         if (!identical(...future.workdir, getwd())) 
[16:05:23.138]             setwd(...future.workdir)
[16:05:23.138]         {
[16:05:23.138]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:05:23.138]                 ...future.oldOptions$nwarnings <- NULL
[16:05:23.138]             }
[16:05:23.138]             base::options(...future.oldOptions)
[16:05:23.138]             if (.Platform$OS.type == "windows") {
[16:05:23.138]                 old_names <- names(...future.oldEnvVars)
[16:05:23.138]                 envs <- base::Sys.getenv()
[16:05:23.138]                 names <- names(envs)
[16:05:23.138]                 common <- intersect(names, old_names)
[16:05:23.138]                 added <- setdiff(names, old_names)
[16:05:23.138]                 removed <- setdiff(old_names, names)
[16:05:23.138]                 changed <- common[...future.oldEnvVars[common] != 
[16:05:23.138]                   envs[common]]
[16:05:23.138]                 NAMES <- toupper(changed)
[16:05:23.138]                 args <- list()
[16:05:23.138]                 for (kk in seq_along(NAMES)) {
[16:05:23.138]                   name <- changed[[kk]]
[16:05:23.138]                   NAME <- NAMES[[kk]]
[16:05:23.138]                   if (name != NAME && is.element(NAME, old_names)) 
[16:05:23.138]                     next
[16:05:23.138]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:05:23.138]                 }
[16:05:23.138]                 NAMES <- toupper(added)
[16:05:23.138]                 for (kk in seq_along(NAMES)) {
[16:05:23.138]                   name <- added[[kk]]
[16:05:23.138]                   NAME <- NAMES[[kk]]
[16:05:23.138]                   if (name != NAME && is.element(NAME, old_names)) 
[16:05:23.138]                     next
[16:05:23.138]                   args[[name]] <- ""
[16:05:23.138]                 }
[16:05:23.138]                 NAMES <- toupper(removed)
[16:05:23.138]                 for (kk in seq_along(NAMES)) {
[16:05:23.138]                   name <- removed[[kk]]
[16:05:23.138]                   NAME <- NAMES[[kk]]
[16:05:23.138]                   if (name != NAME && is.element(NAME, old_names)) 
[16:05:23.138]                     next
[16:05:23.138]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:05:23.138]                 }
[16:05:23.138]                 if (length(args) > 0) 
[16:05:23.138]                   base::do.call(base::Sys.setenv, args = args)
[16:05:23.138]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:05:23.138]             }
[16:05:23.138]             else {
[16:05:23.138]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:05:23.138]             }
[16:05:23.138]             {
[16:05:23.138]                 if (base::length(...future.futureOptionsAdded) > 
[16:05:23.138]                   0L) {
[16:05:23.138]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:05:23.138]                   base::names(opts) <- ...future.futureOptionsAdded
[16:05:23.138]                   base::options(opts)
[16:05:23.138]                 }
[16:05:23.138]                 {
[16:05:23.138]                   {
[16:05:23.138]                     base::options(mc.cores = ...future.mc.cores.old)
[16:05:23.138]                     NULL
[16:05:23.138]                   }
[16:05:23.138]                   options(future.plan = NULL)
[16:05:23.138]                   if (is.na(NA_character_)) 
[16:05:23.138]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:05:23.138]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:05:23.138]                   future::plan(list(function (..., workers = 2L, 
[16:05:23.138]                     envir = parent.frame()) 
[16:05:23.138]                   strategy(..., workers = workers, envir = envir)), 
[16:05:23.138]                     .cleanup = FALSE, .init = FALSE)
[16:05:23.138]                 }
[16:05:23.138]             }
[16:05:23.138]         }
[16:05:23.138]     })
[16:05:23.138]     if (TRUE) {
[16:05:23.138]         base::sink(type = "output", split = FALSE)
[16:05:23.138]         if (TRUE) {
[16:05:23.138]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:05:23.138]         }
[16:05:23.138]         else {
[16:05:23.138]             ...future.result["stdout"] <- base::list(NULL)
[16:05:23.138]         }
[16:05:23.138]         base::close(...future.stdout)
[16:05:23.138]         ...future.stdout <- NULL
[16:05:23.138]     }
[16:05:23.138]     ...future.result$conditions <- ...future.conditions
[16:05:23.138]     ...future.result$finished <- base::Sys.time()
[16:05:23.138]     ...future.result
[16:05:23.138] }
[16:05:23.191] MultisessionFuture started
[16:05:23.191] result() for ClusterFuture ...
[16:05:23.191] receiveMessageFromWorker() for ClusterFuture ...
[16:05:23.191] - Validating connection of MultisessionFuture
[16:05:23.225] - received message: FutureResult
[16:05:23.225] - Received FutureResult
[16:05:23.225] - Erased future from FutureRegistry
[16:05:23.225] result() for ClusterFuture ...
[16:05:23.225] - result already collected: FutureResult
[16:05:23.225] result() for ClusterFuture ... done
[16:05:23.225] receiveMessageFromWorker() for ClusterFuture ... done
[16:05:23.226] result() for ClusterFuture ... done
[16:05:23.226] result() for ClusterFuture ...
[16:05:23.226] - result already collected: FutureResult
[16:05:23.226] result() for ClusterFuture ... done
[16:05:23.226] plan(): plan_init() of ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ... DONE
[16:05:23.226] plan(): nbrOfWorkers() = 2
> f <- future(1L)
[16:05:23.226] getGlobalsAndPackages() ...
[16:05:23.226] Searching for globals...
[16:05:23.227] 
[16:05:23.227] Searching for globals ... DONE
[16:05:23.227] - globals: [0] <none>
[16:05:23.227] getGlobalsAndPackages() ... DONE
[16:05:23.227] run() for ‘Future’ ...
[16:05:23.228] - state: ‘created’
[16:05:23.228] - Future backend: ‘FutureStrategy’, ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[16:05:23.238] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[16:05:23.238] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[16:05:23.238]   - Field: ‘node’
[16:05:23.239]   - Field: ‘label’
[16:05:23.239]   - Field: ‘local’
[16:05:23.239]   - Field: ‘owner’
[16:05:23.239]   - Field: ‘envir’
[16:05:23.239]   - Field: ‘workers’
[16:05:23.239]   - Field: ‘packages’
[16:05:23.239]   - Field: ‘gc’
[16:05:23.239]   - Field: ‘conditions’
[16:05:23.239]   - Field: ‘persistent’
[16:05:23.239]   - Field: ‘expr’
[16:05:23.240]   - Field: ‘uuid’
[16:05:23.240]   - Field: ‘seed’
[16:05:23.240]   - Field: ‘version’
[16:05:23.240]   - Field: ‘result’
[16:05:23.240]   - Field: ‘asynchronous’
[16:05:23.240]   - Field: ‘calls’
[16:05:23.240]   - Field: ‘globals’
[16:05:23.240]   - Field: ‘stdout’
[16:05:23.240]   - Field: ‘earlySignal’
[16:05:23.240]   - Field: ‘lazy’
[16:05:23.240]   - Field: ‘state’
[16:05:23.240] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[16:05:23.241] - Launch lazy future ...
[16:05:23.241] Packages needed by the future expression (n = 0): <none>
[16:05:23.241] Packages needed by future strategies (n = 0): <none>
[16:05:23.241] {
[16:05:23.241]     {
[16:05:23.241]         {
[16:05:23.241]             ...future.startTime <- base::Sys.time()
[16:05:23.241]             {
[16:05:23.241]                 {
[16:05:23.241]                   {
[16:05:23.241]                     {
[16:05:23.241]                       base::local({
[16:05:23.241]                         has_future <- base::requireNamespace("future", 
[16:05:23.241]                           quietly = TRUE)
[16:05:23.241]                         if (has_future) {
[16:05:23.241]                           ns <- base::getNamespace("future")
[16:05:23.241]                           version <- ns[[".package"]][["version"]]
[16:05:23.241]                           if (is.null(version)) 
[16:05:23.241]                             version <- utils::packageVersion("future")
[16:05:23.241]                         }
[16:05:23.241]                         else {
[16:05:23.241]                           version <- NULL
[16:05:23.241]                         }
[16:05:23.241]                         if (!has_future || version < "1.8.0") {
[16:05:23.241]                           info <- base::c(r_version = base::gsub("R version ", 
[16:05:23.241]                             "", base::R.version$version.string), 
[16:05:23.241]                             platform = base::sprintf("%s (%s-bit)", 
[16:05:23.241]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:05:23.241]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[16:05:23.241]                               "release", "version")], collapse = " "), 
[16:05:23.241]                             hostname = base::Sys.info()[["nodename"]])
[16:05:23.241]                           info <- base::sprintf("%s: %s", base::names(info), 
[16:05:23.241]                             info)
[16:05:23.241]                           info <- base::paste(info, collapse = "; ")
[16:05:23.241]                           if (!has_future) {
[16:05:23.241]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:05:23.241]                               info)
[16:05:23.241]                           }
[16:05:23.241]                           else {
[16:05:23.241]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:05:23.241]                               info, version)
[16:05:23.241]                           }
[16:05:23.241]                           base::stop(msg)
[16:05:23.241]                         }
[16:05:23.241]                       })
[16:05:23.241]                     }
[16:05:23.241]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[16:05:23.241]                     base::options(mc.cores = 1L)
[16:05:23.241]                   }
[16:05:23.241]                   options(future.plan = NULL)
[16:05:23.241]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:05:23.241]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:05:23.241]                 }
[16:05:23.241]                 ...future.workdir <- getwd()
[16:05:23.241]             }
[16:05:23.241]             ...future.oldOptions <- base::as.list(base::.Options)
[16:05:23.241]             ...future.oldEnvVars <- base::Sys.getenv()
[16:05:23.241]         }
[16:05:23.241]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:05:23.241]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:05:23.241]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:05:23.241]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:05:23.241]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:05:23.241]             future.stdout.windows.reencode = NULL, width = 80L)
[16:05:23.241]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:05:23.241]             base::names(...future.oldOptions))
[16:05:23.241]     }
[16:05:23.241]     if (FALSE) {
[16:05:23.241]     }
[16:05:23.241]     else {
[16:05:23.241]         if (TRUE) {
[16:05:23.241]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:05:23.241]                 open = "w")
[16:05:23.241]         }
[16:05:23.241]         else {
[16:05:23.241]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:05:23.241]                 windows = "NUL", "/dev/null"), open = "w")
[16:05:23.241]         }
[16:05:23.241]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:05:23.241]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:05:23.241]             base::sink(type = "output", split = FALSE)
[16:05:23.241]             base::close(...future.stdout)
[16:05:23.241]         }, add = TRUE)
[16:05:23.241]     }
[16:05:23.241]     ...future.frame <- base::sys.nframe()
[16:05:23.241]     ...future.conditions <- base::list()
[16:05:23.241]     ...future.rng <- base::globalenv()$.Random.seed
[16:05:23.241]     if (FALSE) {
[16:05:23.241]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:05:23.241]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:05:23.241]     }
[16:05:23.241]     ...future.result <- base::tryCatch({
[16:05:23.241]         base::withCallingHandlers({
[16:05:23.241]             ...future.value <- base::withVisible(base::local({
[16:05:23.241]                 ...future.makeSendCondition <- base::local({
[16:05:23.241]                   sendCondition <- NULL
[16:05:23.241]                   function(frame = 1L) {
[16:05:23.241]                     if (is.function(sendCondition)) 
[16:05:23.241]                       return(sendCondition)
[16:05:23.241]                     ns <- getNamespace("parallel")
[16:05:23.241]                     if (exists("sendData", mode = "function", 
[16:05:23.241]                       envir = ns)) {
[16:05:23.241]                       parallel_sendData <- get("sendData", mode = "function", 
[16:05:23.241]                         envir = ns)
[16:05:23.241]                       envir <- sys.frame(frame)
[16:05:23.241]                       master <- NULL
[16:05:23.241]                       while (!identical(envir, .GlobalEnv) && 
[16:05:23.241]                         !identical(envir, emptyenv())) {
[16:05:23.241]                         if (exists("master", mode = "list", envir = envir, 
[16:05:23.241]                           inherits = FALSE)) {
[16:05:23.241]                           master <- get("master", mode = "list", 
[16:05:23.241]                             envir = envir, inherits = FALSE)
[16:05:23.241]                           if (inherits(master, c("SOCKnode", 
[16:05:23.241]                             "SOCK0node"))) {
[16:05:23.241]                             sendCondition <<- function(cond) {
[16:05:23.241]                               data <- list(type = "VALUE", value = cond, 
[16:05:23.241]                                 success = TRUE)
[16:05:23.241]                               parallel_sendData(master, data)
[16:05:23.241]                             }
[16:05:23.241]                             return(sendCondition)
[16:05:23.241]                           }
[16:05:23.241]                         }
[16:05:23.241]                         frame <- frame + 1L
[16:05:23.241]                         envir <- sys.frame(frame)
[16:05:23.241]                       }
[16:05:23.241]                     }
[16:05:23.241]                     sendCondition <<- function(cond) NULL
[16:05:23.241]                   }
[16:05:23.241]                 })
[16:05:23.241]                 withCallingHandlers({
[16:05:23.241]                   1L
[16:05:23.241]                 }, immediateCondition = function(cond) {
[16:05:23.241]                   sendCondition <- ...future.makeSendCondition()
[16:05:23.241]                   sendCondition(cond)
[16:05:23.241]                   muffleCondition <- function (cond, pattern = "^muffle") 
[16:05:23.241]                   {
[16:05:23.241]                     inherits <- base::inherits
[16:05:23.241]                     invokeRestart <- base::invokeRestart
[16:05:23.241]                     is.null <- base::is.null
[16:05:23.241]                     muffled <- FALSE
[16:05:23.241]                     if (inherits(cond, "message")) {
[16:05:23.241]                       muffled <- grepl(pattern, "muffleMessage")
[16:05:23.241]                       if (muffled) 
[16:05:23.241]                         invokeRestart("muffleMessage")
[16:05:23.241]                     }
[16:05:23.241]                     else if (inherits(cond, "warning")) {
[16:05:23.241]                       muffled <- grepl(pattern, "muffleWarning")
[16:05:23.241]                       if (muffled) 
[16:05:23.241]                         invokeRestart("muffleWarning")
[16:05:23.241]                     }
[16:05:23.241]                     else if (inherits(cond, "condition")) {
[16:05:23.241]                       if (!is.null(pattern)) {
[16:05:23.241]                         computeRestarts <- base::computeRestarts
[16:05:23.241]                         grepl <- base::grepl
[16:05:23.241]                         restarts <- computeRestarts(cond)
[16:05:23.241]                         for (restart in restarts) {
[16:05:23.241]                           name <- restart$name
[16:05:23.241]                           if (is.null(name)) 
[16:05:23.241]                             next
[16:05:23.241]                           if (!grepl(pattern, name)) 
[16:05:23.241]                             next
[16:05:23.241]                           invokeRestart(restart)
[16:05:23.241]                           muffled <- TRUE
[16:05:23.241]                           break
[16:05:23.241]                         }
[16:05:23.241]                       }
[16:05:23.241]                     }
[16:05:23.241]                     invisible(muffled)
[16:05:23.241]                   }
[16:05:23.241]                   muffleCondition(cond)
[16:05:23.241]                 })
[16:05:23.241]             }))
[16:05:23.241]             future::FutureResult(value = ...future.value$value, 
[16:05:23.241]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:05:23.241]                   ...future.rng), globalenv = if (FALSE) 
[16:05:23.241]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:05:23.241]                     ...future.globalenv.names))
[16:05:23.241]                 else NULL, started = ...future.startTime, version = "1.8")
[16:05:23.241]         }, condition = base::local({
[16:05:23.241]             c <- base::c
[16:05:23.241]             inherits <- base::inherits
[16:05:23.241]             invokeRestart <- base::invokeRestart
[16:05:23.241]             length <- base::length
[16:05:23.241]             list <- base::list
[16:05:23.241]             seq.int <- base::seq.int
[16:05:23.241]             signalCondition <- base::signalCondition
[16:05:23.241]             sys.calls <- base::sys.calls
[16:05:23.241]             `[[` <- base::`[[`
[16:05:23.241]             `+` <- base::`+`
[16:05:23.241]             `<<-` <- base::`<<-`
[16:05:23.241]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:05:23.241]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:05:23.241]                   3L)]
[16:05:23.241]             }
[16:05:23.241]             function(cond) {
[16:05:23.241]                 is_error <- inherits(cond, "error")
[16:05:23.241]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:05:23.241]                   NULL)
[16:05:23.241]                 if (is_error) {
[16:05:23.241]                   sessionInformation <- function() {
[16:05:23.241]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:05:23.241]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:05:23.241]                       search = base::search(), system = base::Sys.info())
[16:05:23.241]                   }
[16:05:23.241]                   ...future.conditions[[length(...future.conditions) + 
[16:05:23.241]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:05:23.241]                     cond$call), session = sessionInformation(), 
[16:05:23.241]                     timestamp = base::Sys.time(), signaled = 0L)
[16:05:23.241]                   signalCondition(cond)
[16:05:23.241]                 }
[16:05:23.241]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:05:23.241]                 "immediateCondition"))) {
[16:05:23.241]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:05:23.241]                   ...future.conditions[[length(...future.conditions) + 
[16:05:23.241]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:05:23.241]                   if (TRUE && !signal) {
[16:05:23.241]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:05:23.241]                     {
[16:05:23.241]                       inherits <- base::inherits
[16:05:23.241]                       invokeRestart <- base::invokeRestart
[16:05:23.241]                       is.null <- base::is.null
[16:05:23.241]                       muffled <- FALSE
[16:05:23.241]                       if (inherits(cond, "message")) {
[16:05:23.241]                         muffled <- grepl(pattern, "muffleMessage")
[16:05:23.241]                         if (muffled) 
[16:05:23.241]                           invokeRestart("muffleMessage")
[16:05:23.241]                       }
[16:05:23.241]                       else if (inherits(cond, "warning")) {
[16:05:23.241]                         muffled <- grepl(pattern, "muffleWarning")
[16:05:23.241]                         if (muffled) 
[16:05:23.241]                           invokeRestart("muffleWarning")
[16:05:23.241]                       }
[16:05:23.241]                       else if (inherits(cond, "condition")) {
[16:05:23.241]                         if (!is.null(pattern)) {
[16:05:23.241]                           computeRestarts <- base::computeRestarts
[16:05:23.241]                           grepl <- base::grepl
[16:05:23.241]                           restarts <- computeRestarts(cond)
[16:05:23.241]                           for (restart in restarts) {
[16:05:23.241]                             name <- restart$name
[16:05:23.241]                             if (is.null(name)) 
[16:05:23.241]                               next
[16:05:23.241]                             if (!grepl(pattern, name)) 
[16:05:23.241]                               next
[16:05:23.241]                             invokeRestart(restart)
[16:05:23.241]                             muffled <- TRUE
[16:05:23.241]                             break
[16:05:23.241]                           }
[16:05:23.241]                         }
[16:05:23.241]                       }
[16:05:23.241]                       invisible(muffled)
[16:05:23.241]                     }
[16:05:23.241]                     muffleCondition(cond, pattern = "^muffle")
[16:05:23.241]                   }
[16:05:23.241]                 }
[16:05:23.241]                 else {
[16:05:23.241]                   if (TRUE) {
[16:05:23.241]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:05:23.241]                     {
[16:05:23.241]                       inherits <- base::inherits
[16:05:23.241]                       invokeRestart <- base::invokeRestart
[16:05:23.241]                       is.null <- base::is.null
[16:05:23.241]                       muffled <- FALSE
[16:05:23.241]                       if (inherits(cond, "message")) {
[16:05:23.241]                         muffled <- grepl(pattern, "muffleMessage")
[16:05:23.241]                         if (muffled) 
[16:05:23.241]                           invokeRestart("muffleMessage")
[16:05:23.241]                       }
[16:05:23.241]                       else if (inherits(cond, "warning")) {
[16:05:23.241]                         muffled <- grepl(pattern, "muffleWarning")
[16:05:23.241]                         if (muffled) 
[16:05:23.241]                           invokeRestart("muffleWarning")
[16:05:23.241]                       }
[16:05:23.241]                       else if (inherits(cond, "condition")) {
[16:05:23.241]                         if (!is.null(pattern)) {
[16:05:23.241]                           computeRestarts <- base::computeRestarts
[16:05:23.241]                           grepl <- base::grepl
[16:05:23.241]                           restarts <- computeRestarts(cond)
[16:05:23.241]                           for (restart in restarts) {
[16:05:23.241]                             name <- restart$name
[16:05:23.241]                             if (is.null(name)) 
[16:05:23.241]                               next
[16:05:23.241]                             if (!grepl(pattern, name)) 
[16:05:23.241]                               next
[16:05:23.241]                             invokeRestart(restart)
[16:05:23.241]                             muffled <- TRUE
[16:05:23.241]                             break
[16:05:23.241]                           }
[16:05:23.241]                         }
[16:05:23.241]                       }
[16:05:23.241]                       invisible(muffled)
[16:05:23.241]                     }
[16:05:23.241]                     muffleCondition(cond, pattern = "^muffle")
[16:05:23.241]                   }
[16:05:23.241]                 }
[16:05:23.241]             }
[16:05:23.241]         }))
[16:05:23.241]     }, error = function(ex) {
[16:05:23.241]         base::structure(base::list(value = NULL, visible = NULL, 
[16:05:23.241]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:05:23.241]                 ...future.rng), started = ...future.startTime, 
[16:05:23.241]             finished = Sys.time(), session_uuid = NA_character_, 
[16:05:23.241]             version = "1.8"), class = "FutureResult")
[16:05:23.241]     }, finally = {
[16:05:23.241]         if (!identical(...future.workdir, getwd())) 
[16:05:23.241]             setwd(...future.workdir)
[16:05:23.241]         {
[16:05:23.241]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:05:23.241]                 ...future.oldOptions$nwarnings <- NULL
[16:05:23.241]             }
[16:05:23.241]             base::options(...future.oldOptions)
[16:05:23.241]             if (.Platform$OS.type == "windows") {
[16:05:23.241]                 old_names <- names(...future.oldEnvVars)
[16:05:23.241]                 envs <- base::Sys.getenv()
[16:05:23.241]                 names <- names(envs)
[16:05:23.241]                 common <- intersect(names, old_names)
[16:05:23.241]                 added <- setdiff(names, old_names)
[16:05:23.241]                 removed <- setdiff(old_names, names)
[16:05:23.241]                 changed <- common[...future.oldEnvVars[common] != 
[16:05:23.241]                   envs[common]]
[16:05:23.241]                 NAMES <- toupper(changed)
[16:05:23.241]                 args <- list()
[16:05:23.241]                 for (kk in seq_along(NAMES)) {
[16:05:23.241]                   name <- changed[[kk]]
[16:05:23.241]                   NAME <- NAMES[[kk]]
[16:05:23.241]                   if (name != NAME && is.element(NAME, old_names)) 
[16:05:23.241]                     next
[16:05:23.241]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:05:23.241]                 }
[16:05:23.241]                 NAMES <- toupper(added)
[16:05:23.241]                 for (kk in seq_along(NAMES)) {
[16:05:23.241]                   name <- added[[kk]]
[16:05:23.241]                   NAME <- NAMES[[kk]]
[16:05:23.241]                   if (name != NAME && is.element(NAME, old_names)) 
[16:05:23.241]                     next
[16:05:23.241]                   args[[name]] <- ""
[16:05:23.241]                 }
[16:05:23.241]                 NAMES <- toupper(removed)
[16:05:23.241]                 for (kk in seq_along(NAMES)) {
[16:05:23.241]                   name <- removed[[kk]]
[16:05:23.241]                   NAME <- NAMES[[kk]]
[16:05:23.241]                   if (name != NAME && is.element(NAME, old_names)) 
[16:05:23.241]                     next
[16:05:23.241]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:05:23.241]                 }
[16:05:23.241]                 if (length(args) > 0) 
[16:05:23.241]                   base::do.call(base::Sys.setenv, args = args)
[16:05:23.241]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:05:23.241]             }
[16:05:23.241]             else {
[16:05:23.241]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:05:23.241]             }
[16:05:23.241]             {
[16:05:23.241]                 if (base::length(...future.futureOptionsAdded) > 
[16:05:23.241]                   0L) {
[16:05:23.241]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:05:23.241]                   base::names(opts) <- ...future.futureOptionsAdded
[16:05:23.241]                   base::options(opts)
[16:05:23.241]                 }
[16:05:23.241]                 {
[16:05:23.241]                   {
[16:05:23.241]                     base::options(mc.cores = ...future.mc.cores.old)
[16:05:23.241]                     NULL
[16:05:23.241]                   }
[16:05:23.241]                   options(future.plan = NULL)
[16:05:23.241]                   if (is.na(NA_character_)) 
[16:05:23.241]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:05:23.241]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:05:23.241]                   future::plan(list(function (..., workers = 2L, 
[16:05:23.241]                     envir = parent.frame()) 
[16:05:23.241]                   strategy(..., workers = workers, envir = envir)), 
[16:05:23.241]                     .cleanup = FALSE, .init = FALSE)
[16:05:23.241]                 }
[16:05:23.241]             }
[16:05:23.241]         }
[16:05:23.241]     })
[16:05:23.241]     if (TRUE) {
[16:05:23.241]         base::sink(type = "output", split = FALSE)
[16:05:23.241]         if (TRUE) {
[16:05:23.241]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:05:23.241]         }
[16:05:23.241]         else {
[16:05:23.241]             ...future.result["stdout"] <- base::list(NULL)
[16:05:23.241]         }
[16:05:23.241]         base::close(...future.stdout)
[16:05:23.241]         ...future.stdout <- NULL
[16:05:23.241]     }
[16:05:23.241]     ...future.result$conditions <- ...future.conditions
[16:05:23.241]     ...future.result$finished <- base::Sys.time()
[16:05:23.241]     ...future.result
[16:05:23.241] }
[16:05:23.244] MultisessionFuture started
[16:05:23.245] - Launch lazy future ... done
[16:05:23.245] run() for ‘MultisessionFuture’ ... done
> cl <- ClusterRegistry("get")
> stopifnot(inherits(cl, "cluster"), length(cl) >= 1L)
> 
> plan(sequential)
[16:05:23.245] plan(): Setting new future strategy stack:
[16:05:23.245] List of future strategies:
[16:05:23.245] 1. sequential:
[16:05:23.245]    - args: function (..., envir = parent.frame())
[16:05:23.245]    - tweaked: FALSE
[16:05:23.245]    - call: plan(sequential)
[16:05:23.246] plan(): nbrOfWorkers() = 1
> cl <- ClusterRegistry("get")
> stopifnot(is.null(cl), length(cl) == 0L)
>   
> message("*** multisession(...) - stopping with plan() change ... DONE")
*** multisession(...) - stopping with plan() change ... DONE
> 
> message("*** multisession() ... DONE")
*** multisession() ... DONE
> 
> source("incl/end.R")
[16:05:23.247] plan(): Setting new future strategy stack:
[16:05:23.247] List of future strategies:
[16:05:23.247] 1. FutureStrategy:
[16:05:23.247]    - args: function (..., envir = parent.frame())
[16:05:23.247]    - tweaked: FALSE
[16:05:23.247]    - call: future::plan(oplan)
[16:05:23.248] plan(): nbrOfWorkers() = 1
> 
