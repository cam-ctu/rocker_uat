
R version 4.3.2 (2023-10-31) -- "Eye Holes"
Copyright (C) 2023 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> source("incl/start.R")
[13:23:46.391] plan(): Setting new future strategy stack:
[13:23:46.392] List of future strategies:
[13:23:46.392] 1. sequential:
[13:23:46.392]    - args: function (..., envir = parent.frame())
[13:23:46.392]    - tweaked: FALSE
[13:23:46.392]    - call: future::plan("sequential")
[13:23:46.407] plan(): nbrOfWorkers() = 1
> library("listenv")
> 
> message("*** multisession() ...")
*** multisession() ...
> 
> for (cores in 1:availCores) {
+   ## Speed up CRAN checks: Skip on CRAN Windows 32-bit
+   if (!fullTest && isWin32) next
+   
+   message(sprintf("Testing with %d cores ...", cores))
+   options(mc.cores = cores)
+ 
+   ## No global variables
+   f <- multisession({
+     42L
+   })
+   print(f)
+   stopifnot(inherits(f, "ClusterFuture") || (inherits(f, "SequentialFuture") && f$lazy))
+ 
+   print(resolved(f))
+   y <- value(f)
+   print(y)
+   stopifnot(y == 42L)
+ 
+ 
+   ## A global variable
+   a <- 0
+   f <- multisession({
+     b <- 3
+     c <- 2
+     a * b * c
+   }, globals = TRUE)
+   print(f)
+ 
+ 
+   ## A multisession future is evaluated in a separate
+   ## R session process.  Changing the value of a global
+   ## variable should not affect the result of the
+   ## future.
+   a <- 7  ## Make sure globals are frozen
+   v <- value(f)
+   print(v)
+   stopifnot(v == 0)
+ 
+ 
+   message("*** multisession() with globals and blocking")
+   x <- listenv()
+   for (ii in 2:1) {
+     message(sprintf(" - Creating multisession future #%d ...", ii))
+     x[[ii]] <- multisession({ ii }, globals = TRUE)
+   }
+   message(sprintf(" - Resolving %d multisession futures", length(x)))
+   v <- sapply(x, FUN = value)
+   stopifnot(all(v == 1:2))
+ 
+ 
+   message("*** multisession() - workers inherit .libPaths()")
+ 
+   libs <- value(future(.libPaths()))
+   str(list(
+     main = .libPaths(),
+     workers = libs
+   ))
+   stopifnot(identical(libs, .libPaths()))
+ 
+   message("*** multisession() and errors")
+   f <- multisession({
+     stop("Whoops!")
+     1
+   })
+   print(f)
+   v <- value(f, signal = FALSE)
+   print(v)
+   stopifnot(inherits(v, "simpleError"))
+ 
+   res <- try(value(f), silent = TRUE)
+   print(res)
+   stopifnot(inherits(res, "try-error"))
+ 
+   ## Error is repeated
+   res <- try(value(f), silent = TRUE)
+   print(res)
+   stopifnot(inherits(res, "try-error"))
+ 
+   ## Custom error class
+   f <- multisession({
+     stop(structure(list(message = "boom"),
+                    class = c("MyError", "error", "condition")))
+   })
+   print(f)
+   v <- value(f, signal = FALSE)
+   print(v)
+   stopifnot(inherits(v, "error"), inherits(v, "MyError"))
+ 
+   ## Make sure error is signaled
+   res <- tryCatch(value(f), error = identity)
+   stopifnot(inherits(res, "error"))
+ 
+   ## Issue #200: Custom condition class attributes are lost
+   ## https://github.com/HenrikBengtsson/Wishlist-for-R/issues/57
+   ## stopifnot(inherits(res, "MyError"))    
+ 
+   message(sprintf("Testing with %d cores ... DONE", cores))
+ } ## for (cores ...)
Testing with 1 cores ...
[13:23:46.461] getGlobalsAndPackages() ...
[13:23:46.461] Searching for globals...
[13:23:46.465] - globals found: [1] ‘{’
[13:23:46.465] Searching for globals ... DONE
[13:23:46.465] Resolving globals: FALSE
[13:23:46.466] 
[13:23:46.466] 
[13:23:46.466] getGlobalsAndPackages() ... DONE
SequentialFuture:
Label: ‘<none>’
Expression:
{
    42L
}
Lazy evaluation: TRUE
Asynchronous evaluation: FALSE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: FALSE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: c1010526-43cf-67f3-5528-f283513a2221
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[13:23:46.468] Packages needed by the future expression (n = 0): <none>
[13:23:46.468] Packages needed by future strategies (n = 0): <none>
[13:23:46.469] {
[13:23:46.469]     {
[13:23:46.469]         {
[13:23:46.469]             ...future.startTime <- base::Sys.time()
[13:23:46.469]             {
[13:23:46.469]                 {
[13:23:46.469]                   {
[13:23:46.469]                     base::local({
[13:23:46.469]                       has_future <- base::requireNamespace("future", 
[13:23:46.469]                         quietly = TRUE)
[13:23:46.469]                       if (has_future) {
[13:23:46.469]                         ns <- base::getNamespace("future")
[13:23:46.469]                         version <- ns[[".package"]][["version"]]
[13:23:46.469]                         if (is.null(version)) 
[13:23:46.469]                           version <- utils::packageVersion("future")
[13:23:46.469]                       }
[13:23:46.469]                       else {
[13:23:46.469]                         version <- NULL
[13:23:46.469]                       }
[13:23:46.469]                       if (!has_future || version < "1.8.0") {
[13:23:46.469]                         info <- base::c(r_version = base::gsub("R version ", 
[13:23:46.469]                           "", base::R.version$version.string), 
[13:23:46.469]                           platform = base::sprintf("%s (%s-bit)", 
[13:23:46.469]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:23:46.469]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[13:23:46.469]                             "release", "version")], collapse = " "), 
[13:23:46.469]                           hostname = base::Sys.info()[["nodename"]])
[13:23:46.469]                         info <- base::sprintf("%s: %s", base::names(info), 
[13:23:46.469]                           info)
[13:23:46.469]                         info <- base::paste(info, collapse = "; ")
[13:23:46.469]                         if (!has_future) {
[13:23:46.469]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:23:46.469]                             info)
[13:23:46.469]                         }
[13:23:46.469]                         else {
[13:23:46.469]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:23:46.469]                             info, version)
[13:23:46.469]                         }
[13:23:46.469]                         base::stop(msg)
[13:23:46.469]                       }
[13:23:46.469]                     })
[13:23:46.469]                   }
[13:23:46.469]                   options(future.plan = NULL)
[13:23:46.469]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:23:46.469]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:23:46.469]                 }
[13:23:46.469]                 ...future.workdir <- getwd()
[13:23:46.469]             }
[13:23:46.469]             ...future.oldOptions <- base::as.list(base::.Options)
[13:23:46.469]             ...future.oldEnvVars <- base::Sys.getenv()
[13:23:46.469]         }
[13:23:46.469]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:23:46.469]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:23:46.469]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:23:46.469]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:23:46.469]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:23:46.469]             future.stdout.windows.reencode = NULL, width = 80L)
[13:23:46.469]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:23:46.469]             base::names(...future.oldOptions))
[13:23:46.469]     }
[13:23:46.469]     if (FALSE) {
[13:23:46.469]     }
[13:23:46.469]     else {
[13:23:46.469]         if (TRUE) {
[13:23:46.469]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:23:46.469]                 open = "w")
[13:23:46.469]         }
[13:23:46.469]         else {
[13:23:46.469]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:23:46.469]                 windows = "NUL", "/dev/null"), open = "w")
[13:23:46.469]         }
[13:23:46.469]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:23:46.469]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:23:46.469]             base::sink(type = "output", split = FALSE)
[13:23:46.469]             base::close(...future.stdout)
[13:23:46.469]         }, add = TRUE)
[13:23:46.469]     }
[13:23:46.469]     ...future.frame <- base::sys.nframe()
[13:23:46.469]     ...future.conditions <- base::list()
[13:23:46.469]     ...future.rng <- base::globalenv()$.Random.seed
[13:23:46.469]     if (FALSE) {
[13:23:46.469]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:23:46.469]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:23:46.469]     }
[13:23:46.469]     ...future.result <- base::tryCatch({
[13:23:46.469]         base::withCallingHandlers({
[13:23:46.469]             ...future.value <- base::withVisible(base::local({
[13:23:46.469]                 42L
[13:23:46.469]             }))
[13:23:46.469]             future::FutureResult(value = ...future.value$value, 
[13:23:46.469]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:23:46.469]                   ...future.rng), globalenv = if (FALSE) 
[13:23:46.469]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:23:46.469]                     ...future.globalenv.names))
[13:23:46.469]                 else NULL, started = ...future.startTime, version = "1.8")
[13:23:46.469]         }, condition = base::local({
[13:23:46.469]             c <- base::c
[13:23:46.469]             inherits <- base::inherits
[13:23:46.469]             invokeRestart <- base::invokeRestart
[13:23:46.469]             length <- base::length
[13:23:46.469]             list <- base::list
[13:23:46.469]             seq.int <- base::seq.int
[13:23:46.469]             signalCondition <- base::signalCondition
[13:23:46.469]             sys.calls <- base::sys.calls
[13:23:46.469]             `[[` <- base::`[[`
[13:23:46.469]             `+` <- base::`+`
[13:23:46.469]             `<<-` <- base::`<<-`
[13:23:46.469]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:23:46.469]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:23:46.469]                   3L)]
[13:23:46.469]             }
[13:23:46.469]             function(cond) {
[13:23:46.469]                 is_error <- inherits(cond, "error")
[13:23:46.469]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:23:46.469]                   NULL)
[13:23:46.469]                 if (is_error) {
[13:23:46.469]                   sessionInformation <- function() {
[13:23:46.469]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:23:46.469]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:23:46.469]                       search = base::search(), system = base::Sys.info())
[13:23:46.469]                   }
[13:23:46.469]                   ...future.conditions[[length(...future.conditions) + 
[13:23:46.469]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:23:46.469]                     cond$call), session = sessionInformation(), 
[13:23:46.469]                     timestamp = base::Sys.time(), signaled = 0L)
[13:23:46.469]                   signalCondition(cond)
[13:23:46.469]                 }
[13:23:46.469]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:23:46.469]                 "immediateCondition"))) {
[13:23:46.469]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:23:46.469]                   ...future.conditions[[length(...future.conditions) + 
[13:23:46.469]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:23:46.469]                   if (TRUE && !signal) {
[13:23:46.469]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:23:46.469]                     {
[13:23:46.469]                       inherits <- base::inherits
[13:23:46.469]                       invokeRestart <- base::invokeRestart
[13:23:46.469]                       is.null <- base::is.null
[13:23:46.469]                       muffled <- FALSE
[13:23:46.469]                       if (inherits(cond, "message")) {
[13:23:46.469]                         muffled <- grepl(pattern, "muffleMessage")
[13:23:46.469]                         if (muffled) 
[13:23:46.469]                           invokeRestart("muffleMessage")
[13:23:46.469]                       }
[13:23:46.469]                       else if (inherits(cond, "warning")) {
[13:23:46.469]                         muffled <- grepl(pattern, "muffleWarning")
[13:23:46.469]                         if (muffled) 
[13:23:46.469]                           invokeRestart("muffleWarning")
[13:23:46.469]                       }
[13:23:46.469]                       else if (inherits(cond, "condition")) {
[13:23:46.469]                         if (!is.null(pattern)) {
[13:23:46.469]                           computeRestarts <- base::computeRestarts
[13:23:46.469]                           grepl <- base::grepl
[13:23:46.469]                           restarts <- computeRestarts(cond)
[13:23:46.469]                           for (restart in restarts) {
[13:23:46.469]                             name <- restart$name
[13:23:46.469]                             if (is.null(name)) 
[13:23:46.469]                               next
[13:23:46.469]                             if (!grepl(pattern, name)) 
[13:23:46.469]                               next
[13:23:46.469]                             invokeRestart(restart)
[13:23:46.469]                             muffled <- TRUE
[13:23:46.469]                             break
[13:23:46.469]                           }
[13:23:46.469]                         }
[13:23:46.469]                       }
[13:23:46.469]                       invisible(muffled)
[13:23:46.469]                     }
[13:23:46.469]                     muffleCondition(cond, pattern = "^muffle")
[13:23:46.469]                   }
[13:23:46.469]                 }
[13:23:46.469]                 else {
[13:23:46.469]                   if (TRUE) {
[13:23:46.469]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:23:46.469]                     {
[13:23:46.469]                       inherits <- base::inherits
[13:23:46.469]                       invokeRestart <- base::invokeRestart
[13:23:46.469]                       is.null <- base::is.null
[13:23:46.469]                       muffled <- FALSE
[13:23:46.469]                       if (inherits(cond, "message")) {
[13:23:46.469]                         muffled <- grepl(pattern, "muffleMessage")
[13:23:46.469]                         if (muffled) 
[13:23:46.469]                           invokeRestart("muffleMessage")
[13:23:46.469]                       }
[13:23:46.469]                       else if (inherits(cond, "warning")) {
[13:23:46.469]                         muffled <- grepl(pattern, "muffleWarning")
[13:23:46.469]                         if (muffled) 
[13:23:46.469]                           invokeRestart("muffleWarning")
[13:23:46.469]                       }
[13:23:46.469]                       else if (inherits(cond, "condition")) {
[13:23:46.469]                         if (!is.null(pattern)) {
[13:23:46.469]                           computeRestarts <- base::computeRestarts
[13:23:46.469]                           grepl <- base::grepl
[13:23:46.469]                           restarts <- computeRestarts(cond)
[13:23:46.469]                           for (restart in restarts) {
[13:23:46.469]                             name <- restart$name
[13:23:46.469]                             if (is.null(name)) 
[13:23:46.469]                               next
[13:23:46.469]                             if (!grepl(pattern, name)) 
[13:23:46.469]                               next
[13:23:46.469]                             invokeRestart(restart)
[13:23:46.469]                             muffled <- TRUE
[13:23:46.469]                             break
[13:23:46.469]                           }
[13:23:46.469]                         }
[13:23:46.469]                       }
[13:23:46.469]                       invisible(muffled)
[13:23:46.469]                     }
[13:23:46.469]                     muffleCondition(cond, pattern = "^muffle")
[13:23:46.469]                   }
[13:23:46.469]                 }
[13:23:46.469]             }
[13:23:46.469]         }))
[13:23:46.469]     }, error = function(ex) {
[13:23:46.469]         base::structure(base::list(value = NULL, visible = NULL, 
[13:23:46.469]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:23:46.469]                 ...future.rng), started = ...future.startTime, 
[13:23:46.469]             finished = Sys.time(), session_uuid = NA_character_, 
[13:23:46.469]             version = "1.8"), class = "FutureResult")
[13:23:46.469]     }, finally = {
[13:23:46.469]         if (!identical(...future.workdir, getwd())) 
[13:23:46.469]             setwd(...future.workdir)
[13:23:46.469]         {
[13:23:46.469]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:23:46.469]                 ...future.oldOptions$nwarnings <- NULL
[13:23:46.469]             }
[13:23:46.469]             base::options(...future.oldOptions)
[13:23:46.469]             if (.Platform$OS.type == "windows") {
[13:23:46.469]                 old_names <- names(...future.oldEnvVars)
[13:23:46.469]                 envs <- base::Sys.getenv()
[13:23:46.469]                 names <- names(envs)
[13:23:46.469]                 common <- intersect(names, old_names)
[13:23:46.469]                 added <- setdiff(names, old_names)
[13:23:46.469]                 removed <- setdiff(old_names, names)
[13:23:46.469]                 changed <- common[...future.oldEnvVars[common] != 
[13:23:46.469]                   envs[common]]
[13:23:46.469]                 NAMES <- toupper(changed)
[13:23:46.469]                 args <- list()
[13:23:46.469]                 for (kk in seq_along(NAMES)) {
[13:23:46.469]                   name <- changed[[kk]]
[13:23:46.469]                   NAME <- NAMES[[kk]]
[13:23:46.469]                   if (name != NAME && is.element(NAME, old_names)) 
[13:23:46.469]                     next
[13:23:46.469]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:23:46.469]                 }
[13:23:46.469]                 NAMES <- toupper(added)
[13:23:46.469]                 for (kk in seq_along(NAMES)) {
[13:23:46.469]                   name <- added[[kk]]
[13:23:46.469]                   NAME <- NAMES[[kk]]
[13:23:46.469]                   if (name != NAME && is.element(NAME, old_names)) 
[13:23:46.469]                     next
[13:23:46.469]                   args[[name]] <- ""
[13:23:46.469]                 }
[13:23:46.469]                 NAMES <- toupper(removed)
[13:23:46.469]                 for (kk in seq_along(NAMES)) {
[13:23:46.469]                   name <- removed[[kk]]
[13:23:46.469]                   NAME <- NAMES[[kk]]
[13:23:46.469]                   if (name != NAME && is.element(NAME, old_names)) 
[13:23:46.469]                     next
[13:23:46.469]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:23:46.469]                 }
[13:23:46.469]                 if (length(args) > 0) 
[13:23:46.469]                   base::do.call(base::Sys.setenv, args = args)
[13:23:46.469]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:23:46.469]             }
[13:23:46.469]             else {
[13:23:46.469]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:23:46.469]             }
[13:23:46.469]             {
[13:23:46.469]                 if (base::length(...future.futureOptionsAdded) > 
[13:23:46.469]                   0L) {
[13:23:46.469]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:23:46.469]                   base::names(opts) <- ...future.futureOptionsAdded
[13:23:46.469]                   base::options(opts)
[13:23:46.469]                 }
[13:23:46.469]                 {
[13:23:46.469]                   {
[13:23:46.469]                     NULL
[13:23:46.469]                     RNGkind("Mersenne-Twister")
[13:23:46.469]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[13:23:46.469]                       inherits = FALSE)
[13:23:46.469]                   }
[13:23:46.469]                   options(future.plan = NULL)
[13:23:46.469]                   if (is.na(NA_character_)) 
[13:23:46.469]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:23:46.469]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:23:46.469]                   future::plan(list(function (..., envir = parent.frame()) 
[13:23:46.469]                   {
[13:23:46.469]                     future <- SequentialFuture(..., envir = envir)
[13:23:46.469]                     if (!future$lazy) 
[13:23:46.469]                       future <- run(future)
[13:23:46.469]                     invisible(future)
[13:23:46.469]                   }), .cleanup = FALSE, .init = FALSE)
[13:23:46.469]                 }
[13:23:46.469]             }
[13:23:46.469]         }
[13:23:46.469]     })
[13:23:46.469]     if (TRUE) {
[13:23:46.469]         base::sink(type = "output", split = FALSE)
[13:23:46.469]         if (TRUE) {
[13:23:46.469]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:23:46.469]         }
[13:23:46.469]         else {
[13:23:46.469]             ...future.result["stdout"] <- base::list(NULL)
[13:23:46.469]         }
[13:23:46.469]         base::close(...future.stdout)
[13:23:46.469]         ...future.stdout <- NULL
[13:23:46.469]     }
[13:23:46.469]     ...future.result$conditions <- ...future.conditions
[13:23:46.469]     ...future.result$finished <- base::Sys.time()
[13:23:46.469]     ...future.result
[13:23:46.469] }
[13:23:46.471] plan(): Setting new future strategy stack:
[13:23:46.471] List of future strategies:
[13:23:46.471] 1. sequential:
[13:23:46.471]    - args: function (..., envir = parent.frame())
[13:23:46.471]    - tweaked: FALSE
[13:23:46.471]    - call: NULL
[13:23:46.471] plan(): nbrOfWorkers() = 1
[13:23:46.472] plan(): Setting new future strategy stack:
[13:23:46.472] List of future strategies:
[13:23:46.472] 1. sequential:
[13:23:46.472]    - args: function (..., envir = parent.frame())
[13:23:46.472]    - tweaked: FALSE
[13:23:46.472]    - call: future::plan("sequential")
[13:23:46.473] plan(): nbrOfWorkers() = 1
[13:23:46.473] SequentialFuture started (and completed)
[13:23:46.474] resolved() for ‘SequentialFuture’ ...
[13:23:46.474] - state: ‘finished’
[13:23:46.474] - run: TRUE
[13:23:46.474] - result: ‘FutureResult’
[13:23:46.474] resolved() for ‘SequentialFuture’ ... done
[1] TRUE
[1] 42
[13:23:46.478] getGlobalsAndPackages() ...
[13:23:46.478] Searching for globals...
[13:23:46.483] - globals found: [4] ‘{’, ‘<-’, ‘*’, ‘a’
[13:23:46.483] Searching for globals ... DONE
[13:23:46.483] Resolving globals: FALSE
[13:23:46.484] The total size of the 1 globals is 56 bytes (56 bytes)
[13:23:46.487] The total size of the 1 globals exported for future expression (‘{; b <- 3; c <- 2; a * b * c; }’) is 56 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘a’ (56 bytes of class ‘numeric’)
[13:23:46.487] - globals: [1] ‘a’
[13:23:46.487] 
[13:23:46.487] getGlobalsAndPackages() ... DONE
SequentialFuture:
Label: ‘<none>’
Expression:
{
    b <- 3
    c <- 2
    a * b * c
}
Lazy evaluation: TRUE
Asynchronous evaluation: FALSE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: 1 objects totaling 56 bytes (numeric ‘a’ of 56 bytes)
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: FALSE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: c1010526-43cf-67f3-5528-f283513a2221
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[13:23:46.488] Packages needed by the future expression (n = 0): <none>
[13:23:46.489] Packages needed by future strategies (n = 0): <none>
[13:23:46.489] {
[13:23:46.489]     {
[13:23:46.489]         {
[13:23:46.489]             ...future.startTime <- base::Sys.time()
[13:23:46.489]             {
[13:23:46.489]                 {
[13:23:46.489]                   {
[13:23:46.489]                     base::local({
[13:23:46.489]                       has_future <- base::requireNamespace("future", 
[13:23:46.489]                         quietly = TRUE)
[13:23:46.489]                       if (has_future) {
[13:23:46.489]                         ns <- base::getNamespace("future")
[13:23:46.489]                         version <- ns[[".package"]][["version"]]
[13:23:46.489]                         if (is.null(version)) 
[13:23:46.489]                           version <- utils::packageVersion("future")
[13:23:46.489]                       }
[13:23:46.489]                       else {
[13:23:46.489]                         version <- NULL
[13:23:46.489]                       }
[13:23:46.489]                       if (!has_future || version < "1.8.0") {
[13:23:46.489]                         info <- base::c(r_version = base::gsub("R version ", 
[13:23:46.489]                           "", base::R.version$version.string), 
[13:23:46.489]                           platform = base::sprintf("%s (%s-bit)", 
[13:23:46.489]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:23:46.489]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[13:23:46.489]                             "release", "version")], collapse = " "), 
[13:23:46.489]                           hostname = base::Sys.info()[["nodename"]])
[13:23:46.489]                         info <- base::sprintf("%s: %s", base::names(info), 
[13:23:46.489]                           info)
[13:23:46.489]                         info <- base::paste(info, collapse = "; ")
[13:23:46.489]                         if (!has_future) {
[13:23:46.489]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:23:46.489]                             info)
[13:23:46.489]                         }
[13:23:46.489]                         else {
[13:23:46.489]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:23:46.489]                             info, version)
[13:23:46.489]                         }
[13:23:46.489]                         base::stop(msg)
[13:23:46.489]                       }
[13:23:46.489]                     })
[13:23:46.489]                   }
[13:23:46.489]                   options(future.plan = NULL)
[13:23:46.489]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:23:46.489]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:23:46.489]                 }
[13:23:46.489]                 ...future.workdir <- getwd()
[13:23:46.489]             }
[13:23:46.489]             ...future.oldOptions <- base::as.list(base::.Options)
[13:23:46.489]             ...future.oldEnvVars <- base::Sys.getenv()
[13:23:46.489]         }
[13:23:46.489]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:23:46.489]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:23:46.489]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:23:46.489]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:23:46.489]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:23:46.489]             future.stdout.windows.reencode = NULL, width = 80L)
[13:23:46.489]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:23:46.489]             base::names(...future.oldOptions))
[13:23:46.489]     }
[13:23:46.489]     if (FALSE) {
[13:23:46.489]     }
[13:23:46.489]     else {
[13:23:46.489]         if (TRUE) {
[13:23:46.489]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:23:46.489]                 open = "w")
[13:23:46.489]         }
[13:23:46.489]         else {
[13:23:46.489]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:23:46.489]                 windows = "NUL", "/dev/null"), open = "w")
[13:23:46.489]         }
[13:23:46.489]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:23:46.489]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:23:46.489]             base::sink(type = "output", split = FALSE)
[13:23:46.489]             base::close(...future.stdout)
[13:23:46.489]         }, add = TRUE)
[13:23:46.489]     }
[13:23:46.489]     ...future.frame <- base::sys.nframe()
[13:23:46.489]     ...future.conditions <- base::list()
[13:23:46.489]     ...future.rng <- base::globalenv()$.Random.seed
[13:23:46.489]     if (FALSE) {
[13:23:46.489]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:23:46.489]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:23:46.489]     }
[13:23:46.489]     ...future.result <- base::tryCatch({
[13:23:46.489]         base::withCallingHandlers({
[13:23:46.489]             ...future.value <- base::withVisible(base::local({
[13:23:46.489]                 b <- 3
[13:23:46.489]                 c <- 2
[13:23:46.489]                 a * b * c
[13:23:46.489]             }))
[13:23:46.489]             future::FutureResult(value = ...future.value$value, 
[13:23:46.489]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:23:46.489]                   ...future.rng), globalenv = if (FALSE) 
[13:23:46.489]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:23:46.489]                     ...future.globalenv.names))
[13:23:46.489]                 else NULL, started = ...future.startTime, version = "1.8")
[13:23:46.489]         }, condition = base::local({
[13:23:46.489]             c <- base::c
[13:23:46.489]             inherits <- base::inherits
[13:23:46.489]             invokeRestart <- base::invokeRestart
[13:23:46.489]             length <- base::length
[13:23:46.489]             list <- base::list
[13:23:46.489]             seq.int <- base::seq.int
[13:23:46.489]             signalCondition <- base::signalCondition
[13:23:46.489]             sys.calls <- base::sys.calls
[13:23:46.489]             `[[` <- base::`[[`
[13:23:46.489]             `+` <- base::`+`
[13:23:46.489]             `<<-` <- base::`<<-`
[13:23:46.489]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:23:46.489]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:23:46.489]                   3L)]
[13:23:46.489]             }
[13:23:46.489]             function(cond) {
[13:23:46.489]                 is_error <- inherits(cond, "error")
[13:23:46.489]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:23:46.489]                   NULL)
[13:23:46.489]                 if (is_error) {
[13:23:46.489]                   sessionInformation <- function() {
[13:23:46.489]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:23:46.489]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:23:46.489]                       search = base::search(), system = base::Sys.info())
[13:23:46.489]                   }
[13:23:46.489]                   ...future.conditions[[length(...future.conditions) + 
[13:23:46.489]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:23:46.489]                     cond$call), session = sessionInformation(), 
[13:23:46.489]                     timestamp = base::Sys.time(), signaled = 0L)
[13:23:46.489]                   signalCondition(cond)
[13:23:46.489]                 }
[13:23:46.489]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:23:46.489]                 "immediateCondition"))) {
[13:23:46.489]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:23:46.489]                   ...future.conditions[[length(...future.conditions) + 
[13:23:46.489]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:23:46.489]                   if (TRUE && !signal) {
[13:23:46.489]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:23:46.489]                     {
[13:23:46.489]                       inherits <- base::inherits
[13:23:46.489]                       invokeRestart <- base::invokeRestart
[13:23:46.489]                       is.null <- base::is.null
[13:23:46.489]                       muffled <- FALSE
[13:23:46.489]                       if (inherits(cond, "message")) {
[13:23:46.489]                         muffled <- grepl(pattern, "muffleMessage")
[13:23:46.489]                         if (muffled) 
[13:23:46.489]                           invokeRestart("muffleMessage")
[13:23:46.489]                       }
[13:23:46.489]                       else if (inherits(cond, "warning")) {
[13:23:46.489]                         muffled <- grepl(pattern, "muffleWarning")
[13:23:46.489]                         if (muffled) 
[13:23:46.489]                           invokeRestart("muffleWarning")
[13:23:46.489]                       }
[13:23:46.489]                       else if (inherits(cond, "condition")) {
[13:23:46.489]                         if (!is.null(pattern)) {
[13:23:46.489]                           computeRestarts <- base::computeRestarts
[13:23:46.489]                           grepl <- base::grepl
[13:23:46.489]                           restarts <- computeRestarts(cond)
[13:23:46.489]                           for (restart in restarts) {
[13:23:46.489]                             name <- restart$name
[13:23:46.489]                             if (is.null(name)) 
[13:23:46.489]                               next
[13:23:46.489]                             if (!grepl(pattern, name)) 
[13:23:46.489]                               next
[13:23:46.489]                             invokeRestart(restart)
[13:23:46.489]                             muffled <- TRUE
[13:23:46.489]                             break
[13:23:46.489]                           }
[13:23:46.489]                         }
[13:23:46.489]                       }
[13:23:46.489]                       invisible(muffled)
[13:23:46.489]                     }
[13:23:46.489]                     muffleCondition(cond, pattern = "^muffle")
[13:23:46.489]                   }
[13:23:46.489]                 }
[13:23:46.489]                 else {
[13:23:46.489]                   if (TRUE) {
[13:23:46.489]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:23:46.489]                     {
[13:23:46.489]                       inherits <- base::inherits
[13:23:46.489]                       invokeRestart <- base::invokeRestart
[13:23:46.489]                       is.null <- base::is.null
[13:23:46.489]                       muffled <- FALSE
[13:23:46.489]                       if (inherits(cond, "message")) {
[13:23:46.489]                         muffled <- grepl(pattern, "muffleMessage")
[13:23:46.489]                         if (muffled) 
[13:23:46.489]                           invokeRestart("muffleMessage")
[13:23:46.489]                       }
[13:23:46.489]                       else if (inherits(cond, "warning")) {
[13:23:46.489]                         muffled <- grepl(pattern, "muffleWarning")
[13:23:46.489]                         if (muffled) 
[13:23:46.489]                           invokeRestart("muffleWarning")
[13:23:46.489]                       }
[13:23:46.489]                       else if (inherits(cond, "condition")) {
[13:23:46.489]                         if (!is.null(pattern)) {
[13:23:46.489]                           computeRestarts <- base::computeRestarts
[13:23:46.489]                           grepl <- base::grepl
[13:23:46.489]                           restarts <- computeRestarts(cond)
[13:23:46.489]                           for (restart in restarts) {
[13:23:46.489]                             name <- restart$name
[13:23:46.489]                             if (is.null(name)) 
[13:23:46.489]                               next
[13:23:46.489]                             if (!grepl(pattern, name)) 
[13:23:46.489]                               next
[13:23:46.489]                             invokeRestart(restart)
[13:23:46.489]                             muffled <- TRUE
[13:23:46.489]                             break
[13:23:46.489]                           }
[13:23:46.489]                         }
[13:23:46.489]                       }
[13:23:46.489]                       invisible(muffled)
[13:23:46.489]                     }
[13:23:46.489]                     muffleCondition(cond, pattern = "^muffle")
[13:23:46.489]                   }
[13:23:46.489]                 }
[13:23:46.489]             }
[13:23:46.489]         }))
[13:23:46.489]     }, error = function(ex) {
[13:23:46.489]         base::structure(base::list(value = NULL, visible = NULL, 
[13:23:46.489]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:23:46.489]                 ...future.rng), started = ...future.startTime, 
[13:23:46.489]             finished = Sys.time(), session_uuid = NA_character_, 
[13:23:46.489]             version = "1.8"), class = "FutureResult")
[13:23:46.489]     }, finally = {
[13:23:46.489]         if (!identical(...future.workdir, getwd())) 
[13:23:46.489]             setwd(...future.workdir)
[13:23:46.489]         {
[13:23:46.489]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:23:46.489]                 ...future.oldOptions$nwarnings <- NULL
[13:23:46.489]             }
[13:23:46.489]             base::options(...future.oldOptions)
[13:23:46.489]             if (.Platform$OS.type == "windows") {
[13:23:46.489]                 old_names <- names(...future.oldEnvVars)
[13:23:46.489]                 envs <- base::Sys.getenv()
[13:23:46.489]                 names <- names(envs)
[13:23:46.489]                 common <- intersect(names, old_names)
[13:23:46.489]                 added <- setdiff(names, old_names)
[13:23:46.489]                 removed <- setdiff(old_names, names)
[13:23:46.489]                 changed <- common[...future.oldEnvVars[common] != 
[13:23:46.489]                   envs[common]]
[13:23:46.489]                 NAMES <- toupper(changed)
[13:23:46.489]                 args <- list()
[13:23:46.489]                 for (kk in seq_along(NAMES)) {
[13:23:46.489]                   name <- changed[[kk]]
[13:23:46.489]                   NAME <- NAMES[[kk]]
[13:23:46.489]                   if (name != NAME && is.element(NAME, old_names)) 
[13:23:46.489]                     next
[13:23:46.489]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:23:46.489]                 }
[13:23:46.489]                 NAMES <- toupper(added)
[13:23:46.489]                 for (kk in seq_along(NAMES)) {
[13:23:46.489]                   name <- added[[kk]]
[13:23:46.489]                   NAME <- NAMES[[kk]]
[13:23:46.489]                   if (name != NAME && is.element(NAME, old_names)) 
[13:23:46.489]                     next
[13:23:46.489]                   args[[name]] <- ""
[13:23:46.489]                 }
[13:23:46.489]                 NAMES <- toupper(removed)
[13:23:46.489]                 for (kk in seq_along(NAMES)) {
[13:23:46.489]                   name <- removed[[kk]]
[13:23:46.489]                   NAME <- NAMES[[kk]]
[13:23:46.489]                   if (name != NAME && is.element(NAME, old_names)) 
[13:23:46.489]                     next
[13:23:46.489]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:23:46.489]                 }
[13:23:46.489]                 if (length(args) > 0) 
[13:23:46.489]                   base::do.call(base::Sys.setenv, args = args)
[13:23:46.489]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:23:46.489]             }
[13:23:46.489]             else {
[13:23:46.489]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:23:46.489]             }
[13:23:46.489]             {
[13:23:46.489]                 if (base::length(...future.futureOptionsAdded) > 
[13:23:46.489]                   0L) {
[13:23:46.489]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:23:46.489]                   base::names(opts) <- ...future.futureOptionsAdded
[13:23:46.489]                   base::options(opts)
[13:23:46.489]                 }
[13:23:46.489]                 {
[13:23:46.489]                   {
[13:23:46.489]                     NULL
[13:23:46.489]                     RNGkind("Mersenne-Twister")
[13:23:46.489]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[13:23:46.489]                       inherits = FALSE)
[13:23:46.489]                   }
[13:23:46.489]                   options(future.plan = NULL)
[13:23:46.489]                   if (is.na(NA_character_)) 
[13:23:46.489]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:23:46.489]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:23:46.489]                   future::plan(list(function (..., envir = parent.frame()) 
[13:23:46.489]                   {
[13:23:46.489]                     future <- SequentialFuture(..., envir = envir)
[13:23:46.489]                     if (!future$lazy) 
[13:23:46.489]                       future <- run(future)
[13:23:46.489]                     invisible(future)
[13:23:46.489]                   }), .cleanup = FALSE, .init = FALSE)
[13:23:46.489]                 }
[13:23:46.489]             }
[13:23:46.489]         }
[13:23:46.489]     })
[13:23:46.489]     if (TRUE) {
[13:23:46.489]         base::sink(type = "output", split = FALSE)
[13:23:46.489]         if (TRUE) {
[13:23:46.489]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:23:46.489]         }
[13:23:46.489]         else {
[13:23:46.489]             ...future.result["stdout"] <- base::list(NULL)
[13:23:46.489]         }
[13:23:46.489]         base::close(...future.stdout)
[13:23:46.489]         ...future.stdout <- NULL
[13:23:46.489]     }
[13:23:46.489]     ...future.result$conditions <- ...future.conditions
[13:23:46.489]     ...future.result$finished <- base::Sys.time()
[13:23:46.489]     ...future.result
[13:23:46.489] }
[13:23:46.491] assign_globals() ...
[13:23:46.491] List of 1
[13:23:46.491]  $ a: num 0
[13:23:46.491]  - attr(*, "where")=List of 1
[13:23:46.491]   ..$ a:<environment: R_EmptyEnv> 
[13:23:46.491]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[13:23:46.491]  - attr(*, "resolved")= logi FALSE
[13:23:46.491]  - attr(*, "total_size")= num 56
[13:23:46.495] - copied ‘a’ to environment
[13:23:46.496] assign_globals() ... done
[13:23:46.496] plan(): Setting new future strategy stack:
[13:23:46.496] List of future strategies:
[13:23:46.496] 1. sequential:
[13:23:46.496]    - args: function (..., envir = parent.frame())
[13:23:46.496]    - tweaked: FALSE
[13:23:46.496]    - call: NULL
[13:23:46.496] plan(): nbrOfWorkers() = 1
[13:23:46.497] plan(): Setting new future strategy stack:
[13:23:46.497] List of future strategies:
[13:23:46.497] 1. sequential:
[13:23:46.497]    - args: function (..., envir = parent.frame())
[13:23:46.497]    - tweaked: FALSE
[13:23:46.497]    - call: future::plan("sequential")
[13:23:46.498] plan(): nbrOfWorkers() = 1
[13:23:46.498] SequentialFuture started (and completed)
[1] 0
*** multisession() with globals and blocking
 - Creating multisession future #2 ...
[13:23:46.501] getGlobalsAndPackages() ...
[13:23:46.502] Searching for globals...
[13:23:46.502] - globals found: [2] ‘{’, ‘ii’
[13:23:46.502] Searching for globals ... DONE
[13:23:46.503] Resolving globals: FALSE
[13:23:46.503] The total size of the 1 globals is 56 bytes (56 bytes)
[13:23:46.503] The total size of the 1 globals exported for future expression (‘{; ii; }’) is 56 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘ii’ (56 bytes of class ‘numeric’)
[13:23:46.503] - globals: [1] ‘ii’
[13:23:46.503] 
[13:23:46.504] getGlobalsAndPackages() ... DONE
 - Creating multisession future #1 ...
[13:23:46.507] getGlobalsAndPackages() ...
[13:23:46.508] Searching for globals...
[13:23:46.508] - globals found: [2] ‘{’, ‘ii’
[13:23:46.508] Searching for globals ... DONE
[13:23:46.508] Resolving globals: FALSE
[13:23:46.509] The total size of the 1 globals is 56 bytes (56 bytes)
[13:23:46.509] The total size of the 1 globals exported for future expression (‘{; ii; }’) is 56 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘ii’ (56 bytes of class ‘numeric’)
[13:23:46.509] - globals: [1] ‘ii’
[13:23:46.509] 
[13:23:46.509] getGlobalsAndPackages() ... DONE
 - Resolving 2 multisession futures
[13:23:46.510] Packages needed by the future expression (n = 0): <none>
[13:23:46.510] Packages needed by future strategies (n = 0): <none>
[13:23:46.511] {
[13:23:46.511]     {
[13:23:46.511]         {
[13:23:46.511]             ...future.startTime <- base::Sys.time()
[13:23:46.511]             {
[13:23:46.511]                 {
[13:23:46.511]                   {
[13:23:46.511]                     base::local({
[13:23:46.511]                       has_future <- base::requireNamespace("future", 
[13:23:46.511]                         quietly = TRUE)
[13:23:46.511]                       if (has_future) {
[13:23:46.511]                         ns <- base::getNamespace("future")
[13:23:46.511]                         version <- ns[[".package"]][["version"]]
[13:23:46.511]                         if (is.null(version)) 
[13:23:46.511]                           version <- utils::packageVersion("future")
[13:23:46.511]                       }
[13:23:46.511]                       else {
[13:23:46.511]                         version <- NULL
[13:23:46.511]                       }
[13:23:46.511]                       if (!has_future || version < "1.8.0") {
[13:23:46.511]                         info <- base::c(r_version = base::gsub("R version ", 
[13:23:46.511]                           "", base::R.version$version.string), 
[13:23:46.511]                           platform = base::sprintf("%s (%s-bit)", 
[13:23:46.511]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:23:46.511]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[13:23:46.511]                             "release", "version")], collapse = " "), 
[13:23:46.511]                           hostname = base::Sys.info()[["nodename"]])
[13:23:46.511]                         info <- base::sprintf("%s: %s", base::names(info), 
[13:23:46.511]                           info)
[13:23:46.511]                         info <- base::paste(info, collapse = "; ")
[13:23:46.511]                         if (!has_future) {
[13:23:46.511]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:23:46.511]                             info)
[13:23:46.511]                         }
[13:23:46.511]                         else {
[13:23:46.511]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:23:46.511]                             info, version)
[13:23:46.511]                         }
[13:23:46.511]                         base::stop(msg)
[13:23:46.511]                       }
[13:23:46.511]                     })
[13:23:46.511]                   }
[13:23:46.511]                   options(future.plan = NULL)
[13:23:46.511]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:23:46.511]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:23:46.511]                 }
[13:23:46.511]                 ...future.workdir <- getwd()
[13:23:46.511]             }
[13:23:46.511]             ...future.oldOptions <- base::as.list(base::.Options)
[13:23:46.511]             ...future.oldEnvVars <- base::Sys.getenv()
[13:23:46.511]         }
[13:23:46.511]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:23:46.511]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:23:46.511]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:23:46.511]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:23:46.511]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:23:46.511]             future.stdout.windows.reencode = NULL, width = 80L)
[13:23:46.511]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:23:46.511]             base::names(...future.oldOptions))
[13:23:46.511]     }
[13:23:46.511]     if (FALSE) {
[13:23:46.511]     }
[13:23:46.511]     else {
[13:23:46.511]         if (TRUE) {
[13:23:46.511]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:23:46.511]                 open = "w")
[13:23:46.511]         }
[13:23:46.511]         else {
[13:23:46.511]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:23:46.511]                 windows = "NUL", "/dev/null"), open = "w")
[13:23:46.511]         }
[13:23:46.511]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:23:46.511]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:23:46.511]             base::sink(type = "output", split = FALSE)
[13:23:46.511]             base::close(...future.stdout)
[13:23:46.511]         }, add = TRUE)
[13:23:46.511]     }
[13:23:46.511]     ...future.frame <- base::sys.nframe()
[13:23:46.511]     ...future.conditions <- base::list()
[13:23:46.511]     ...future.rng <- base::globalenv()$.Random.seed
[13:23:46.511]     if (FALSE) {
[13:23:46.511]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:23:46.511]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:23:46.511]     }
[13:23:46.511]     ...future.result <- base::tryCatch({
[13:23:46.511]         base::withCallingHandlers({
[13:23:46.511]             ...future.value <- base::withVisible(base::local({
[13:23:46.511]                 ii
[13:23:46.511]             }))
[13:23:46.511]             future::FutureResult(value = ...future.value$value, 
[13:23:46.511]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:23:46.511]                   ...future.rng), globalenv = if (FALSE) 
[13:23:46.511]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:23:46.511]                     ...future.globalenv.names))
[13:23:46.511]                 else NULL, started = ...future.startTime, version = "1.8")
[13:23:46.511]         }, condition = base::local({
[13:23:46.511]             c <- base::c
[13:23:46.511]             inherits <- base::inherits
[13:23:46.511]             invokeRestart <- base::invokeRestart
[13:23:46.511]             length <- base::length
[13:23:46.511]             list <- base::list
[13:23:46.511]             seq.int <- base::seq.int
[13:23:46.511]             signalCondition <- base::signalCondition
[13:23:46.511]             sys.calls <- base::sys.calls
[13:23:46.511]             `[[` <- base::`[[`
[13:23:46.511]             `+` <- base::`+`
[13:23:46.511]             `<<-` <- base::`<<-`
[13:23:46.511]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:23:46.511]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:23:46.511]                   3L)]
[13:23:46.511]             }
[13:23:46.511]             function(cond) {
[13:23:46.511]                 is_error <- inherits(cond, "error")
[13:23:46.511]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:23:46.511]                   NULL)
[13:23:46.511]                 if (is_error) {
[13:23:46.511]                   sessionInformation <- function() {
[13:23:46.511]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:23:46.511]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:23:46.511]                       search = base::search(), system = base::Sys.info())
[13:23:46.511]                   }
[13:23:46.511]                   ...future.conditions[[length(...future.conditions) + 
[13:23:46.511]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:23:46.511]                     cond$call), session = sessionInformation(), 
[13:23:46.511]                     timestamp = base::Sys.time(), signaled = 0L)
[13:23:46.511]                   signalCondition(cond)
[13:23:46.511]                 }
[13:23:46.511]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:23:46.511]                 "immediateCondition"))) {
[13:23:46.511]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:23:46.511]                   ...future.conditions[[length(...future.conditions) + 
[13:23:46.511]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:23:46.511]                   if (TRUE && !signal) {
[13:23:46.511]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:23:46.511]                     {
[13:23:46.511]                       inherits <- base::inherits
[13:23:46.511]                       invokeRestart <- base::invokeRestart
[13:23:46.511]                       is.null <- base::is.null
[13:23:46.511]                       muffled <- FALSE
[13:23:46.511]                       if (inherits(cond, "message")) {
[13:23:46.511]                         muffled <- grepl(pattern, "muffleMessage")
[13:23:46.511]                         if (muffled) 
[13:23:46.511]                           invokeRestart("muffleMessage")
[13:23:46.511]                       }
[13:23:46.511]                       else if (inherits(cond, "warning")) {
[13:23:46.511]                         muffled <- grepl(pattern, "muffleWarning")
[13:23:46.511]                         if (muffled) 
[13:23:46.511]                           invokeRestart("muffleWarning")
[13:23:46.511]                       }
[13:23:46.511]                       else if (inherits(cond, "condition")) {
[13:23:46.511]                         if (!is.null(pattern)) {
[13:23:46.511]                           computeRestarts <- base::computeRestarts
[13:23:46.511]                           grepl <- base::grepl
[13:23:46.511]                           restarts <- computeRestarts(cond)
[13:23:46.511]                           for (restart in restarts) {
[13:23:46.511]                             name <- restart$name
[13:23:46.511]                             if (is.null(name)) 
[13:23:46.511]                               next
[13:23:46.511]                             if (!grepl(pattern, name)) 
[13:23:46.511]                               next
[13:23:46.511]                             invokeRestart(restart)
[13:23:46.511]                             muffled <- TRUE
[13:23:46.511]                             break
[13:23:46.511]                           }
[13:23:46.511]                         }
[13:23:46.511]                       }
[13:23:46.511]                       invisible(muffled)
[13:23:46.511]                     }
[13:23:46.511]                     muffleCondition(cond, pattern = "^muffle")
[13:23:46.511]                   }
[13:23:46.511]                 }
[13:23:46.511]                 else {
[13:23:46.511]                   if (TRUE) {
[13:23:46.511]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:23:46.511]                     {
[13:23:46.511]                       inherits <- base::inherits
[13:23:46.511]                       invokeRestart <- base::invokeRestart
[13:23:46.511]                       is.null <- base::is.null
[13:23:46.511]                       muffled <- FALSE
[13:23:46.511]                       if (inherits(cond, "message")) {
[13:23:46.511]                         muffled <- grepl(pattern, "muffleMessage")
[13:23:46.511]                         if (muffled) 
[13:23:46.511]                           invokeRestart("muffleMessage")
[13:23:46.511]                       }
[13:23:46.511]                       else if (inherits(cond, "warning")) {
[13:23:46.511]                         muffled <- grepl(pattern, "muffleWarning")
[13:23:46.511]                         if (muffled) 
[13:23:46.511]                           invokeRestart("muffleWarning")
[13:23:46.511]                       }
[13:23:46.511]                       else if (inherits(cond, "condition")) {
[13:23:46.511]                         if (!is.null(pattern)) {
[13:23:46.511]                           computeRestarts <- base::computeRestarts
[13:23:46.511]                           grepl <- base::grepl
[13:23:46.511]                           restarts <- computeRestarts(cond)
[13:23:46.511]                           for (restart in restarts) {
[13:23:46.511]                             name <- restart$name
[13:23:46.511]                             if (is.null(name)) 
[13:23:46.511]                               next
[13:23:46.511]                             if (!grepl(pattern, name)) 
[13:23:46.511]                               next
[13:23:46.511]                             invokeRestart(restart)
[13:23:46.511]                             muffled <- TRUE
[13:23:46.511]                             break
[13:23:46.511]                           }
[13:23:46.511]                         }
[13:23:46.511]                       }
[13:23:46.511]                       invisible(muffled)
[13:23:46.511]                     }
[13:23:46.511]                     muffleCondition(cond, pattern = "^muffle")
[13:23:46.511]                   }
[13:23:46.511]                 }
[13:23:46.511]             }
[13:23:46.511]         }))
[13:23:46.511]     }, error = function(ex) {
[13:23:46.511]         base::structure(base::list(value = NULL, visible = NULL, 
[13:23:46.511]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:23:46.511]                 ...future.rng), started = ...future.startTime, 
[13:23:46.511]             finished = Sys.time(), session_uuid = NA_character_, 
[13:23:46.511]             version = "1.8"), class = "FutureResult")
[13:23:46.511]     }, finally = {
[13:23:46.511]         if (!identical(...future.workdir, getwd())) 
[13:23:46.511]             setwd(...future.workdir)
[13:23:46.511]         {
[13:23:46.511]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:23:46.511]                 ...future.oldOptions$nwarnings <- NULL
[13:23:46.511]             }
[13:23:46.511]             base::options(...future.oldOptions)
[13:23:46.511]             if (.Platform$OS.type == "windows") {
[13:23:46.511]                 old_names <- names(...future.oldEnvVars)
[13:23:46.511]                 envs <- base::Sys.getenv()
[13:23:46.511]                 names <- names(envs)
[13:23:46.511]                 common <- intersect(names, old_names)
[13:23:46.511]                 added <- setdiff(names, old_names)
[13:23:46.511]                 removed <- setdiff(old_names, names)
[13:23:46.511]                 changed <- common[...future.oldEnvVars[common] != 
[13:23:46.511]                   envs[common]]
[13:23:46.511]                 NAMES <- toupper(changed)
[13:23:46.511]                 args <- list()
[13:23:46.511]                 for (kk in seq_along(NAMES)) {
[13:23:46.511]                   name <- changed[[kk]]
[13:23:46.511]                   NAME <- NAMES[[kk]]
[13:23:46.511]                   if (name != NAME && is.element(NAME, old_names)) 
[13:23:46.511]                     next
[13:23:46.511]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:23:46.511]                 }
[13:23:46.511]                 NAMES <- toupper(added)
[13:23:46.511]                 for (kk in seq_along(NAMES)) {
[13:23:46.511]                   name <- added[[kk]]
[13:23:46.511]                   NAME <- NAMES[[kk]]
[13:23:46.511]                   if (name != NAME && is.element(NAME, old_names)) 
[13:23:46.511]                     next
[13:23:46.511]                   args[[name]] <- ""
[13:23:46.511]                 }
[13:23:46.511]                 NAMES <- toupper(removed)
[13:23:46.511]                 for (kk in seq_along(NAMES)) {
[13:23:46.511]                   name <- removed[[kk]]
[13:23:46.511]                   NAME <- NAMES[[kk]]
[13:23:46.511]                   if (name != NAME && is.element(NAME, old_names)) 
[13:23:46.511]                     next
[13:23:46.511]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:23:46.511]                 }
[13:23:46.511]                 if (length(args) > 0) 
[13:23:46.511]                   base::do.call(base::Sys.setenv, args = args)
[13:23:46.511]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:23:46.511]             }
[13:23:46.511]             else {
[13:23:46.511]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:23:46.511]             }
[13:23:46.511]             {
[13:23:46.511]                 if (base::length(...future.futureOptionsAdded) > 
[13:23:46.511]                   0L) {
[13:23:46.511]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:23:46.511]                   base::names(opts) <- ...future.futureOptionsAdded
[13:23:46.511]                   base::options(opts)
[13:23:46.511]                 }
[13:23:46.511]                 {
[13:23:46.511]                   {
[13:23:46.511]                     NULL
[13:23:46.511]                     RNGkind("Mersenne-Twister")
[13:23:46.511]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[13:23:46.511]                       inherits = FALSE)
[13:23:46.511]                   }
[13:23:46.511]                   options(future.plan = NULL)
[13:23:46.511]                   if (is.na(NA_character_)) 
[13:23:46.511]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:23:46.511]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:23:46.511]                   future::plan(list(function (..., envir = parent.frame()) 
[13:23:46.511]                   {
[13:23:46.511]                     future <- SequentialFuture(..., envir = envir)
[13:23:46.511]                     if (!future$lazy) 
[13:23:46.511]                       future <- run(future)
[13:23:46.511]                     invisible(future)
[13:23:46.511]                   }), .cleanup = FALSE, .init = FALSE)
[13:23:46.511]                 }
[13:23:46.511]             }
[13:23:46.511]         }
[13:23:46.511]     })
[13:23:46.511]     if (TRUE) {
[13:23:46.511]         base::sink(type = "output", split = FALSE)
[13:23:46.511]         if (TRUE) {
[13:23:46.511]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:23:46.511]         }
[13:23:46.511]         else {
[13:23:46.511]             ...future.result["stdout"] <- base::list(NULL)
[13:23:46.511]         }
[13:23:46.511]         base::close(...future.stdout)
[13:23:46.511]         ...future.stdout <- NULL
[13:23:46.511]     }
[13:23:46.511]     ...future.result$conditions <- ...future.conditions
[13:23:46.511]     ...future.result$finished <- base::Sys.time()
[13:23:46.511]     ...future.result
[13:23:46.511] }
[13:23:46.512] assign_globals() ...
[13:23:46.512] List of 1
[13:23:46.512]  $ ii: int 1
[13:23:46.512]  - attr(*, "where")=List of 1
[13:23:46.512]   ..$ ii:<environment: R_EmptyEnv> 
[13:23:46.512]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[13:23:46.512]  - attr(*, "resolved")= logi FALSE
[13:23:46.512]  - attr(*, "total_size")= num 56
[13:23:46.515] - copied ‘ii’ to environment
[13:23:46.515] assign_globals() ... done
[13:23:46.515] plan(): Setting new future strategy stack:
[13:23:46.515] List of future strategies:
[13:23:46.515] 1. sequential:
[13:23:46.515]    - args: function (..., envir = parent.frame())
[13:23:46.515]    - tweaked: FALSE
[13:23:46.515]    - call: NULL
[13:23:46.515] plan(): nbrOfWorkers() = 1
[13:23:46.516] plan(): Setting new future strategy stack:
[13:23:46.516] List of future strategies:
[13:23:46.516] 1. sequential:
[13:23:46.516]    - args: function (..., envir = parent.frame())
[13:23:46.516]    - tweaked: FALSE
[13:23:46.516]    - call: future::plan("sequential")
[13:23:46.517] plan(): nbrOfWorkers() = 1
[13:23:46.517] SequentialFuture started (and completed)
[13:23:46.517] Packages needed by the future expression (n = 0): <none>
[13:23:46.517] Packages needed by future strategies (n = 0): <none>
[13:23:46.518] {
[13:23:46.518]     {
[13:23:46.518]         {
[13:23:46.518]             ...future.startTime <- base::Sys.time()
[13:23:46.518]             {
[13:23:46.518]                 {
[13:23:46.518]                   {
[13:23:46.518]                     base::local({
[13:23:46.518]                       has_future <- base::requireNamespace("future", 
[13:23:46.518]                         quietly = TRUE)
[13:23:46.518]                       if (has_future) {
[13:23:46.518]                         ns <- base::getNamespace("future")
[13:23:46.518]                         version <- ns[[".package"]][["version"]]
[13:23:46.518]                         if (is.null(version)) 
[13:23:46.518]                           version <- utils::packageVersion("future")
[13:23:46.518]                       }
[13:23:46.518]                       else {
[13:23:46.518]                         version <- NULL
[13:23:46.518]                       }
[13:23:46.518]                       if (!has_future || version < "1.8.0") {
[13:23:46.518]                         info <- base::c(r_version = base::gsub("R version ", 
[13:23:46.518]                           "", base::R.version$version.string), 
[13:23:46.518]                           platform = base::sprintf("%s (%s-bit)", 
[13:23:46.518]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:23:46.518]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[13:23:46.518]                             "release", "version")], collapse = " "), 
[13:23:46.518]                           hostname = base::Sys.info()[["nodename"]])
[13:23:46.518]                         info <- base::sprintf("%s: %s", base::names(info), 
[13:23:46.518]                           info)
[13:23:46.518]                         info <- base::paste(info, collapse = "; ")
[13:23:46.518]                         if (!has_future) {
[13:23:46.518]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:23:46.518]                             info)
[13:23:46.518]                         }
[13:23:46.518]                         else {
[13:23:46.518]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:23:46.518]                             info, version)
[13:23:46.518]                         }
[13:23:46.518]                         base::stop(msg)
[13:23:46.518]                       }
[13:23:46.518]                     })
[13:23:46.518]                   }
[13:23:46.518]                   options(future.plan = NULL)
[13:23:46.518]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:23:46.518]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:23:46.518]                 }
[13:23:46.518]                 ...future.workdir <- getwd()
[13:23:46.518]             }
[13:23:46.518]             ...future.oldOptions <- base::as.list(base::.Options)
[13:23:46.518]             ...future.oldEnvVars <- base::Sys.getenv()
[13:23:46.518]         }
[13:23:46.518]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:23:46.518]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:23:46.518]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:23:46.518]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:23:46.518]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:23:46.518]             future.stdout.windows.reencode = NULL, width = 80L)
[13:23:46.518]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:23:46.518]             base::names(...future.oldOptions))
[13:23:46.518]     }
[13:23:46.518]     if (FALSE) {
[13:23:46.518]     }
[13:23:46.518]     else {
[13:23:46.518]         if (TRUE) {
[13:23:46.518]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:23:46.518]                 open = "w")
[13:23:46.518]         }
[13:23:46.518]         else {
[13:23:46.518]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:23:46.518]                 windows = "NUL", "/dev/null"), open = "w")
[13:23:46.518]         }
[13:23:46.518]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:23:46.518]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:23:46.518]             base::sink(type = "output", split = FALSE)
[13:23:46.518]             base::close(...future.stdout)
[13:23:46.518]         }, add = TRUE)
[13:23:46.518]     }
[13:23:46.518]     ...future.frame <- base::sys.nframe()
[13:23:46.518]     ...future.conditions <- base::list()
[13:23:46.518]     ...future.rng <- base::globalenv()$.Random.seed
[13:23:46.518]     if (FALSE) {
[13:23:46.518]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:23:46.518]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:23:46.518]     }
[13:23:46.518]     ...future.result <- base::tryCatch({
[13:23:46.518]         base::withCallingHandlers({
[13:23:46.518]             ...future.value <- base::withVisible(base::local({
[13:23:46.518]                 ii
[13:23:46.518]             }))
[13:23:46.518]             future::FutureResult(value = ...future.value$value, 
[13:23:46.518]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:23:46.518]                   ...future.rng), globalenv = if (FALSE) 
[13:23:46.518]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:23:46.518]                     ...future.globalenv.names))
[13:23:46.518]                 else NULL, started = ...future.startTime, version = "1.8")
[13:23:46.518]         }, condition = base::local({
[13:23:46.518]             c <- base::c
[13:23:46.518]             inherits <- base::inherits
[13:23:46.518]             invokeRestart <- base::invokeRestart
[13:23:46.518]             length <- base::length
[13:23:46.518]             list <- base::list
[13:23:46.518]             seq.int <- base::seq.int
[13:23:46.518]             signalCondition <- base::signalCondition
[13:23:46.518]             sys.calls <- base::sys.calls
[13:23:46.518]             `[[` <- base::`[[`
[13:23:46.518]             `+` <- base::`+`
[13:23:46.518]             `<<-` <- base::`<<-`
[13:23:46.518]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:23:46.518]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:23:46.518]                   3L)]
[13:23:46.518]             }
[13:23:46.518]             function(cond) {
[13:23:46.518]                 is_error <- inherits(cond, "error")
[13:23:46.518]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:23:46.518]                   NULL)
[13:23:46.518]                 if (is_error) {
[13:23:46.518]                   sessionInformation <- function() {
[13:23:46.518]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:23:46.518]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:23:46.518]                       search = base::search(), system = base::Sys.info())
[13:23:46.518]                   }
[13:23:46.518]                   ...future.conditions[[length(...future.conditions) + 
[13:23:46.518]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:23:46.518]                     cond$call), session = sessionInformation(), 
[13:23:46.518]                     timestamp = base::Sys.time(), signaled = 0L)
[13:23:46.518]                   signalCondition(cond)
[13:23:46.518]                 }
[13:23:46.518]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:23:46.518]                 "immediateCondition"))) {
[13:23:46.518]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:23:46.518]                   ...future.conditions[[length(...future.conditions) + 
[13:23:46.518]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:23:46.518]                   if (TRUE && !signal) {
[13:23:46.518]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:23:46.518]                     {
[13:23:46.518]                       inherits <- base::inherits
[13:23:46.518]                       invokeRestart <- base::invokeRestart
[13:23:46.518]                       is.null <- base::is.null
[13:23:46.518]                       muffled <- FALSE
[13:23:46.518]                       if (inherits(cond, "message")) {
[13:23:46.518]                         muffled <- grepl(pattern, "muffleMessage")
[13:23:46.518]                         if (muffled) 
[13:23:46.518]                           invokeRestart("muffleMessage")
[13:23:46.518]                       }
[13:23:46.518]                       else if (inherits(cond, "warning")) {
[13:23:46.518]                         muffled <- grepl(pattern, "muffleWarning")
[13:23:46.518]                         if (muffled) 
[13:23:46.518]                           invokeRestart("muffleWarning")
[13:23:46.518]                       }
[13:23:46.518]                       else if (inherits(cond, "condition")) {
[13:23:46.518]                         if (!is.null(pattern)) {
[13:23:46.518]                           computeRestarts <- base::computeRestarts
[13:23:46.518]                           grepl <- base::grepl
[13:23:46.518]                           restarts <- computeRestarts(cond)
[13:23:46.518]                           for (restart in restarts) {
[13:23:46.518]                             name <- restart$name
[13:23:46.518]                             if (is.null(name)) 
[13:23:46.518]                               next
[13:23:46.518]                             if (!grepl(pattern, name)) 
[13:23:46.518]                               next
[13:23:46.518]                             invokeRestart(restart)
[13:23:46.518]                             muffled <- TRUE
[13:23:46.518]                             break
[13:23:46.518]                           }
[13:23:46.518]                         }
[13:23:46.518]                       }
[13:23:46.518]                       invisible(muffled)
[13:23:46.518]                     }
[13:23:46.518]                     muffleCondition(cond, pattern = "^muffle")
[13:23:46.518]                   }
[13:23:46.518]                 }
[13:23:46.518]                 else {
[13:23:46.518]                   if (TRUE) {
[13:23:46.518]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:23:46.518]                     {
[13:23:46.518]                       inherits <- base::inherits
[13:23:46.518]                       invokeRestart <- base::invokeRestart
[13:23:46.518]                       is.null <- base::is.null
[13:23:46.518]                       muffled <- FALSE
[13:23:46.518]                       if (inherits(cond, "message")) {
[13:23:46.518]                         muffled <- grepl(pattern, "muffleMessage")
[13:23:46.518]                         if (muffled) 
[13:23:46.518]                           invokeRestart("muffleMessage")
[13:23:46.518]                       }
[13:23:46.518]                       else if (inherits(cond, "warning")) {
[13:23:46.518]                         muffled <- grepl(pattern, "muffleWarning")
[13:23:46.518]                         if (muffled) 
[13:23:46.518]                           invokeRestart("muffleWarning")
[13:23:46.518]                       }
[13:23:46.518]                       else if (inherits(cond, "condition")) {
[13:23:46.518]                         if (!is.null(pattern)) {
[13:23:46.518]                           computeRestarts <- base::computeRestarts
[13:23:46.518]                           grepl <- base::grepl
[13:23:46.518]                           restarts <- computeRestarts(cond)
[13:23:46.518]                           for (restart in restarts) {
[13:23:46.518]                             name <- restart$name
[13:23:46.518]                             if (is.null(name)) 
[13:23:46.518]                               next
[13:23:46.518]                             if (!grepl(pattern, name)) 
[13:23:46.518]                               next
[13:23:46.518]                             invokeRestart(restart)
[13:23:46.518]                             muffled <- TRUE
[13:23:46.518]                             break
[13:23:46.518]                           }
[13:23:46.518]                         }
[13:23:46.518]                       }
[13:23:46.518]                       invisible(muffled)
[13:23:46.518]                     }
[13:23:46.518]                     muffleCondition(cond, pattern = "^muffle")
[13:23:46.518]                   }
[13:23:46.518]                 }
[13:23:46.518]             }
[13:23:46.518]         }))
[13:23:46.518]     }, error = function(ex) {
[13:23:46.518]         base::structure(base::list(value = NULL, visible = NULL, 
[13:23:46.518]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:23:46.518]                 ...future.rng), started = ...future.startTime, 
[13:23:46.518]             finished = Sys.time(), session_uuid = NA_character_, 
[13:23:46.518]             version = "1.8"), class = "FutureResult")
[13:23:46.518]     }, finally = {
[13:23:46.518]         if (!identical(...future.workdir, getwd())) 
[13:23:46.518]             setwd(...future.workdir)
[13:23:46.518]         {
[13:23:46.518]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:23:46.518]                 ...future.oldOptions$nwarnings <- NULL
[13:23:46.518]             }
[13:23:46.518]             base::options(...future.oldOptions)
[13:23:46.518]             if (.Platform$OS.type == "windows") {
[13:23:46.518]                 old_names <- names(...future.oldEnvVars)
[13:23:46.518]                 envs <- base::Sys.getenv()
[13:23:46.518]                 names <- names(envs)
[13:23:46.518]                 common <- intersect(names, old_names)
[13:23:46.518]                 added <- setdiff(names, old_names)
[13:23:46.518]                 removed <- setdiff(old_names, names)
[13:23:46.518]                 changed <- common[...future.oldEnvVars[common] != 
[13:23:46.518]                   envs[common]]
[13:23:46.518]                 NAMES <- toupper(changed)
[13:23:46.518]                 args <- list()
[13:23:46.518]                 for (kk in seq_along(NAMES)) {
[13:23:46.518]                   name <- changed[[kk]]
[13:23:46.518]                   NAME <- NAMES[[kk]]
[13:23:46.518]                   if (name != NAME && is.element(NAME, old_names)) 
[13:23:46.518]                     next
[13:23:46.518]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:23:46.518]                 }
[13:23:46.518]                 NAMES <- toupper(added)
[13:23:46.518]                 for (kk in seq_along(NAMES)) {
[13:23:46.518]                   name <- added[[kk]]
[13:23:46.518]                   NAME <- NAMES[[kk]]
[13:23:46.518]                   if (name != NAME && is.element(NAME, old_names)) 
[13:23:46.518]                     next
[13:23:46.518]                   args[[name]] <- ""
[13:23:46.518]                 }
[13:23:46.518]                 NAMES <- toupper(removed)
[13:23:46.518]                 for (kk in seq_along(NAMES)) {
[13:23:46.518]                   name <- removed[[kk]]
[13:23:46.518]                   NAME <- NAMES[[kk]]
[13:23:46.518]                   if (name != NAME && is.element(NAME, old_names)) 
[13:23:46.518]                     next
[13:23:46.518]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:23:46.518]                 }
[13:23:46.518]                 if (length(args) > 0) 
[13:23:46.518]                   base::do.call(base::Sys.setenv, args = args)
[13:23:46.518]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:23:46.518]             }
[13:23:46.518]             else {
[13:23:46.518]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:23:46.518]             }
[13:23:46.518]             {
[13:23:46.518]                 if (base::length(...future.futureOptionsAdded) > 
[13:23:46.518]                   0L) {
[13:23:46.518]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:23:46.518]                   base::names(opts) <- ...future.futureOptionsAdded
[13:23:46.518]                   base::options(opts)
[13:23:46.518]                 }
[13:23:46.518]                 {
[13:23:46.518]                   {
[13:23:46.518]                     NULL
[13:23:46.518]                     RNGkind("Mersenne-Twister")
[13:23:46.518]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[13:23:46.518]                       inherits = FALSE)
[13:23:46.518]                   }
[13:23:46.518]                   options(future.plan = NULL)
[13:23:46.518]                   if (is.na(NA_character_)) 
[13:23:46.518]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:23:46.518]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:23:46.518]                   future::plan(list(function (..., envir = parent.frame()) 
[13:23:46.518]                   {
[13:23:46.518]                     future <- SequentialFuture(..., envir = envir)
[13:23:46.518]                     if (!future$lazy) 
[13:23:46.518]                       future <- run(future)
[13:23:46.518]                     invisible(future)
[13:23:46.518]                   }), .cleanup = FALSE, .init = FALSE)
[13:23:46.518]                 }
[13:23:46.518]             }
[13:23:46.518]         }
[13:23:46.518]     })
[13:23:46.518]     if (TRUE) {
[13:23:46.518]         base::sink(type = "output", split = FALSE)
[13:23:46.518]         if (TRUE) {
[13:23:46.518]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:23:46.518]         }
[13:23:46.518]         else {
[13:23:46.518]             ...future.result["stdout"] <- base::list(NULL)
[13:23:46.518]         }
[13:23:46.518]         base::close(...future.stdout)
[13:23:46.518]         ...future.stdout <- NULL
[13:23:46.518]     }
[13:23:46.518]     ...future.result$conditions <- ...future.conditions
[13:23:46.518]     ...future.result$finished <- base::Sys.time()
[13:23:46.518]     ...future.result
[13:23:46.518] }
[13:23:46.519] assign_globals() ...
[13:23:46.519] List of 1
[13:23:46.519]  $ ii: int 2
[13:23:46.519]  - attr(*, "where")=List of 1
[13:23:46.519]   ..$ ii:<environment: R_EmptyEnv> 
[13:23:46.519]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[13:23:46.519]  - attr(*, "resolved")= logi FALSE
[13:23:46.519]  - attr(*, "total_size")= num 56
[13:23:46.521] - copied ‘ii’ to environment
[13:23:46.522] assign_globals() ... done
[13:23:46.522] plan(): Setting new future strategy stack:
[13:23:46.522] List of future strategies:
[13:23:46.522] 1. sequential:
[13:23:46.522]    - args: function (..., envir = parent.frame())
[13:23:46.522]    - tweaked: FALSE
[13:23:46.522]    - call: NULL
[13:23:46.522] plan(): nbrOfWorkers() = 1
[13:23:46.523] plan(): Setting new future strategy stack:
[13:23:46.523] List of future strategies:
[13:23:46.523] 1. sequential:
[13:23:46.523]    - args: function (..., envir = parent.frame())
[13:23:46.523]    - tweaked: FALSE
[13:23:46.523]    - call: future::plan("sequential")
[13:23:46.523] plan(): nbrOfWorkers() = 1
[13:23:46.524] SequentialFuture started (and completed)
*** multisession() - workers inherit .libPaths()
[13:23:46.524] getGlobalsAndPackages() ...
[13:23:46.524] Searching for globals...
[13:23:46.524] - globals found: [1] ‘.libPaths’
[13:23:46.525] Searching for globals ... DONE
[13:23:46.525] Resolving globals: FALSE
[13:23:46.525] 
[13:23:46.525] 
[13:23:46.525] getGlobalsAndPackages() ... DONE
[13:23:46.526] run() for ‘Future’ ...
[13:23:46.526] - state: ‘created’
[13:23:46.526] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[13:23:46.526] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[13:23:46.526] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[13:23:46.526]   - Field: ‘label’
[13:23:46.528]   - Field: ‘local’
[13:23:46.529]   - Field: ‘owner’
[13:23:46.529]   - Field: ‘envir’
[13:23:46.529]   - Field: ‘packages’
[13:23:46.529]   - Field: ‘gc’
[13:23:46.529]   - Field: ‘conditions’
[13:23:46.529]   - Field: ‘expr’
[13:23:46.529]   - Field: ‘uuid’
[13:23:46.529]   - Field: ‘seed’
[13:23:46.529]   - Field: ‘version’
[13:23:46.529]   - Field: ‘result’
[13:23:46.530]   - Field: ‘asynchronous’
[13:23:46.530]   - Field: ‘calls’
[13:23:46.530]   - Field: ‘globals’
[13:23:46.530]   - Field: ‘stdout’
[13:23:46.530]   - Field: ‘earlySignal’
[13:23:46.530]   - Field: ‘lazy’
[13:23:46.530]   - Field: ‘state’
[13:23:46.530] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[13:23:46.530] - Launch lazy future ...
[13:23:46.530] Packages needed by the future expression (n = 0): <none>
[13:23:46.531] Packages needed by future strategies (n = 0): <none>
[13:23:46.531] {
[13:23:46.531]     {
[13:23:46.531]         {
[13:23:46.531]             ...future.startTime <- base::Sys.time()
[13:23:46.531]             {
[13:23:46.531]                 {
[13:23:46.531]                   {
[13:23:46.531]                     base::local({
[13:23:46.531]                       has_future <- base::requireNamespace("future", 
[13:23:46.531]                         quietly = TRUE)
[13:23:46.531]                       if (has_future) {
[13:23:46.531]                         ns <- base::getNamespace("future")
[13:23:46.531]                         version <- ns[[".package"]][["version"]]
[13:23:46.531]                         if (is.null(version)) 
[13:23:46.531]                           version <- utils::packageVersion("future")
[13:23:46.531]                       }
[13:23:46.531]                       else {
[13:23:46.531]                         version <- NULL
[13:23:46.531]                       }
[13:23:46.531]                       if (!has_future || version < "1.8.0") {
[13:23:46.531]                         info <- base::c(r_version = base::gsub("R version ", 
[13:23:46.531]                           "", base::R.version$version.string), 
[13:23:46.531]                           platform = base::sprintf("%s (%s-bit)", 
[13:23:46.531]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:23:46.531]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[13:23:46.531]                             "release", "version")], collapse = " "), 
[13:23:46.531]                           hostname = base::Sys.info()[["nodename"]])
[13:23:46.531]                         info <- base::sprintf("%s: %s", base::names(info), 
[13:23:46.531]                           info)
[13:23:46.531]                         info <- base::paste(info, collapse = "; ")
[13:23:46.531]                         if (!has_future) {
[13:23:46.531]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:23:46.531]                             info)
[13:23:46.531]                         }
[13:23:46.531]                         else {
[13:23:46.531]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:23:46.531]                             info, version)
[13:23:46.531]                         }
[13:23:46.531]                         base::stop(msg)
[13:23:46.531]                       }
[13:23:46.531]                     })
[13:23:46.531]                   }
[13:23:46.531]                   options(future.plan = NULL)
[13:23:46.531]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:23:46.531]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:23:46.531]                 }
[13:23:46.531]                 ...future.workdir <- getwd()
[13:23:46.531]             }
[13:23:46.531]             ...future.oldOptions <- base::as.list(base::.Options)
[13:23:46.531]             ...future.oldEnvVars <- base::Sys.getenv()
[13:23:46.531]         }
[13:23:46.531]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:23:46.531]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:23:46.531]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:23:46.531]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:23:46.531]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:23:46.531]             future.stdout.windows.reencode = NULL, width = 80L)
[13:23:46.531]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:23:46.531]             base::names(...future.oldOptions))
[13:23:46.531]     }
[13:23:46.531]     if (FALSE) {
[13:23:46.531]     }
[13:23:46.531]     else {
[13:23:46.531]         if (TRUE) {
[13:23:46.531]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:23:46.531]                 open = "w")
[13:23:46.531]         }
[13:23:46.531]         else {
[13:23:46.531]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:23:46.531]                 windows = "NUL", "/dev/null"), open = "w")
[13:23:46.531]         }
[13:23:46.531]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:23:46.531]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:23:46.531]             base::sink(type = "output", split = FALSE)
[13:23:46.531]             base::close(...future.stdout)
[13:23:46.531]         }, add = TRUE)
[13:23:46.531]     }
[13:23:46.531]     ...future.frame <- base::sys.nframe()
[13:23:46.531]     ...future.conditions <- base::list()
[13:23:46.531]     ...future.rng <- base::globalenv()$.Random.seed
[13:23:46.531]     if (FALSE) {
[13:23:46.531]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:23:46.531]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:23:46.531]     }
[13:23:46.531]     ...future.result <- base::tryCatch({
[13:23:46.531]         base::withCallingHandlers({
[13:23:46.531]             ...future.value <- base::withVisible(base::local(.libPaths()))
[13:23:46.531]             future::FutureResult(value = ...future.value$value, 
[13:23:46.531]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:23:46.531]                   ...future.rng), globalenv = if (FALSE) 
[13:23:46.531]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:23:46.531]                     ...future.globalenv.names))
[13:23:46.531]                 else NULL, started = ...future.startTime, version = "1.8")
[13:23:46.531]         }, condition = base::local({
[13:23:46.531]             c <- base::c
[13:23:46.531]             inherits <- base::inherits
[13:23:46.531]             invokeRestart <- base::invokeRestart
[13:23:46.531]             length <- base::length
[13:23:46.531]             list <- base::list
[13:23:46.531]             seq.int <- base::seq.int
[13:23:46.531]             signalCondition <- base::signalCondition
[13:23:46.531]             sys.calls <- base::sys.calls
[13:23:46.531]             `[[` <- base::`[[`
[13:23:46.531]             `+` <- base::`+`
[13:23:46.531]             `<<-` <- base::`<<-`
[13:23:46.531]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:23:46.531]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:23:46.531]                   3L)]
[13:23:46.531]             }
[13:23:46.531]             function(cond) {
[13:23:46.531]                 is_error <- inherits(cond, "error")
[13:23:46.531]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:23:46.531]                   NULL)
[13:23:46.531]                 if (is_error) {
[13:23:46.531]                   sessionInformation <- function() {
[13:23:46.531]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:23:46.531]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:23:46.531]                       search = base::search(), system = base::Sys.info())
[13:23:46.531]                   }
[13:23:46.531]                   ...future.conditions[[length(...future.conditions) + 
[13:23:46.531]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:23:46.531]                     cond$call), session = sessionInformation(), 
[13:23:46.531]                     timestamp = base::Sys.time(), signaled = 0L)
[13:23:46.531]                   signalCondition(cond)
[13:23:46.531]                 }
[13:23:46.531]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:23:46.531]                 "immediateCondition"))) {
[13:23:46.531]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:23:46.531]                   ...future.conditions[[length(...future.conditions) + 
[13:23:46.531]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:23:46.531]                   if (TRUE && !signal) {
[13:23:46.531]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:23:46.531]                     {
[13:23:46.531]                       inherits <- base::inherits
[13:23:46.531]                       invokeRestart <- base::invokeRestart
[13:23:46.531]                       is.null <- base::is.null
[13:23:46.531]                       muffled <- FALSE
[13:23:46.531]                       if (inherits(cond, "message")) {
[13:23:46.531]                         muffled <- grepl(pattern, "muffleMessage")
[13:23:46.531]                         if (muffled) 
[13:23:46.531]                           invokeRestart("muffleMessage")
[13:23:46.531]                       }
[13:23:46.531]                       else if (inherits(cond, "warning")) {
[13:23:46.531]                         muffled <- grepl(pattern, "muffleWarning")
[13:23:46.531]                         if (muffled) 
[13:23:46.531]                           invokeRestart("muffleWarning")
[13:23:46.531]                       }
[13:23:46.531]                       else if (inherits(cond, "condition")) {
[13:23:46.531]                         if (!is.null(pattern)) {
[13:23:46.531]                           computeRestarts <- base::computeRestarts
[13:23:46.531]                           grepl <- base::grepl
[13:23:46.531]                           restarts <- computeRestarts(cond)
[13:23:46.531]                           for (restart in restarts) {
[13:23:46.531]                             name <- restart$name
[13:23:46.531]                             if (is.null(name)) 
[13:23:46.531]                               next
[13:23:46.531]                             if (!grepl(pattern, name)) 
[13:23:46.531]                               next
[13:23:46.531]                             invokeRestart(restart)
[13:23:46.531]                             muffled <- TRUE
[13:23:46.531]                             break
[13:23:46.531]                           }
[13:23:46.531]                         }
[13:23:46.531]                       }
[13:23:46.531]                       invisible(muffled)
[13:23:46.531]                     }
[13:23:46.531]                     muffleCondition(cond, pattern = "^muffle")
[13:23:46.531]                   }
[13:23:46.531]                 }
[13:23:46.531]                 else {
[13:23:46.531]                   if (TRUE) {
[13:23:46.531]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:23:46.531]                     {
[13:23:46.531]                       inherits <- base::inherits
[13:23:46.531]                       invokeRestart <- base::invokeRestart
[13:23:46.531]                       is.null <- base::is.null
[13:23:46.531]                       muffled <- FALSE
[13:23:46.531]                       if (inherits(cond, "message")) {
[13:23:46.531]                         muffled <- grepl(pattern, "muffleMessage")
[13:23:46.531]                         if (muffled) 
[13:23:46.531]                           invokeRestart("muffleMessage")
[13:23:46.531]                       }
[13:23:46.531]                       else if (inherits(cond, "warning")) {
[13:23:46.531]                         muffled <- grepl(pattern, "muffleWarning")
[13:23:46.531]                         if (muffled) 
[13:23:46.531]                           invokeRestart("muffleWarning")
[13:23:46.531]                       }
[13:23:46.531]                       else if (inherits(cond, "condition")) {
[13:23:46.531]                         if (!is.null(pattern)) {
[13:23:46.531]                           computeRestarts <- base::computeRestarts
[13:23:46.531]                           grepl <- base::grepl
[13:23:46.531]                           restarts <- computeRestarts(cond)
[13:23:46.531]                           for (restart in restarts) {
[13:23:46.531]                             name <- restart$name
[13:23:46.531]                             if (is.null(name)) 
[13:23:46.531]                               next
[13:23:46.531]                             if (!grepl(pattern, name)) 
[13:23:46.531]                               next
[13:23:46.531]                             invokeRestart(restart)
[13:23:46.531]                             muffled <- TRUE
[13:23:46.531]                             break
[13:23:46.531]                           }
[13:23:46.531]                         }
[13:23:46.531]                       }
[13:23:46.531]                       invisible(muffled)
[13:23:46.531]                     }
[13:23:46.531]                     muffleCondition(cond, pattern = "^muffle")
[13:23:46.531]                   }
[13:23:46.531]                 }
[13:23:46.531]             }
[13:23:46.531]         }))
[13:23:46.531]     }, error = function(ex) {
[13:23:46.531]         base::structure(base::list(value = NULL, visible = NULL, 
[13:23:46.531]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:23:46.531]                 ...future.rng), started = ...future.startTime, 
[13:23:46.531]             finished = Sys.time(), session_uuid = NA_character_, 
[13:23:46.531]             version = "1.8"), class = "FutureResult")
[13:23:46.531]     }, finally = {
[13:23:46.531]         if (!identical(...future.workdir, getwd())) 
[13:23:46.531]             setwd(...future.workdir)
[13:23:46.531]         {
[13:23:46.531]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:23:46.531]                 ...future.oldOptions$nwarnings <- NULL
[13:23:46.531]             }
[13:23:46.531]             base::options(...future.oldOptions)
[13:23:46.531]             if (.Platform$OS.type == "windows") {
[13:23:46.531]                 old_names <- names(...future.oldEnvVars)
[13:23:46.531]                 envs <- base::Sys.getenv()
[13:23:46.531]                 names <- names(envs)
[13:23:46.531]                 common <- intersect(names, old_names)
[13:23:46.531]                 added <- setdiff(names, old_names)
[13:23:46.531]                 removed <- setdiff(old_names, names)
[13:23:46.531]                 changed <- common[...future.oldEnvVars[common] != 
[13:23:46.531]                   envs[common]]
[13:23:46.531]                 NAMES <- toupper(changed)
[13:23:46.531]                 args <- list()
[13:23:46.531]                 for (kk in seq_along(NAMES)) {
[13:23:46.531]                   name <- changed[[kk]]
[13:23:46.531]                   NAME <- NAMES[[kk]]
[13:23:46.531]                   if (name != NAME && is.element(NAME, old_names)) 
[13:23:46.531]                     next
[13:23:46.531]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:23:46.531]                 }
[13:23:46.531]                 NAMES <- toupper(added)
[13:23:46.531]                 for (kk in seq_along(NAMES)) {
[13:23:46.531]                   name <- added[[kk]]
[13:23:46.531]                   NAME <- NAMES[[kk]]
[13:23:46.531]                   if (name != NAME && is.element(NAME, old_names)) 
[13:23:46.531]                     next
[13:23:46.531]                   args[[name]] <- ""
[13:23:46.531]                 }
[13:23:46.531]                 NAMES <- toupper(removed)
[13:23:46.531]                 for (kk in seq_along(NAMES)) {
[13:23:46.531]                   name <- removed[[kk]]
[13:23:46.531]                   NAME <- NAMES[[kk]]
[13:23:46.531]                   if (name != NAME && is.element(NAME, old_names)) 
[13:23:46.531]                     next
[13:23:46.531]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:23:46.531]                 }
[13:23:46.531]                 if (length(args) > 0) 
[13:23:46.531]                   base::do.call(base::Sys.setenv, args = args)
[13:23:46.531]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:23:46.531]             }
[13:23:46.531]             else {
[13:23:46.531]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:23:46.531]             }
[13:23:46.531]             {
[13:23:46.531]                 if (base::length(...future.futureOptionsAdded) > 
[13:23:46.531]                   0L) {
[13:23:46.531]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:23:46.531]                   base::names(opts) <- ...future.futureOptionsAdded
[13:23:46.531]                   base::options(opts)
[13:23:46.531]                 }
[13:23:46.531]                 {
[13:23:46.531]                   {
[13:23:46.531]                     NULL
[13:23:46.531]                     RNGkind("Mersenne-Twister")
[13:23:46.531]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[13:23:46.531]                       inherits = FALSE)
[13:23:46.531]                   }
[13:23:46.531]                   options(future.plan = NULL)
[13:23:46.531]                   if (is.na(NA_character_)) 
[13:23:46.531]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:23:46.531]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:23:46.531]                   future::plan(list(function (..., envir = parent.frame()) 
[13:23:46.531]                   {
[13:23:46.531]                     future <- SequentialFuture(..., envir = envir)
[13:23:46.531]                     if (!future$lazy) 
[13:23:46.531]                       future <- run(future)
[13:23:46.531]                     invisible(future)
[13:23:46.531]                   }), .cleanup = FALSE, .init = FALSE)
[13:23:46.531]                 }
[13:23:46.531]             }
[13:23:46.531]         }
[13:23:46.531]     })
[13:23:46.531]     if (TRUE) {
[13:23:46.531]         base::sink(type = "output", split = FALSE)
[13:23:46.531]         if (TRUE) {
[13:23:46.531]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:23:46.531]         }
[13:23:46.531]         else {
[13:23:46.531]             ...future.result["stdout"] <- base::list(NULL)
[13:23:46.531]         }
[13:23:46.531]         base::close(...future.stdout)
[13:23:46.531]         ...future.stdout <- NULL
[13:23:46.531]     }
[13:23:46.531]     ...future.result$conditions <- ...future.conditions
[13:23:46.531]     ...future.result$finished <- base::Sys.time()
[13:23:46.531]     ...future.result
[13:23:46.531] }
[13:23:46.533] plan(): Setting new future strategy stack:
[13:23:46.533] List of future strategies:
[13:23:46.533] 1. sequential:
[13:23:46.533]    - args: function (..., envir = parent.frame())
[13:23:46.533]    - tweaked: FALSE
[13:23:46.533]    - call: NULL
[13:23:46.533] plan(): nbrOfWorkers() = 1
[13:23:46.534] plan(): Setting new future strategy stack:
[13:23:46.534] List of future strategies:
[13:23:46.534] 1. sequential:
[13:23:46.534]    - args: function (..., envir = parent.frame())
[13:23:46.534]    - tweaked: FALSE
[13:23:46.534]    - call: future::plan("sequential")
[13:23:46.534] plan(): nbrOfWorkers() = 1
[13:23:46.535] SequentialFuture started (and completed)
[13:23:46.535] - Launch lazy future ... done
[13:23:46.535] run() for ‘SequentialFuture’ ... done
List of 2
 $ main   : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
 $ workers: chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
*** multisession() and errors
[13:23:46.539] getGlobalsAndPackages() ...
[13:23:46.539] Searching for globals...
[13:23:46.541] - globals found: [2] ‘{’, ‘stop’
[13:23:46.541] Searching for globals ... DONE
[13:23:46.541] Resolving globals: FALSE
[13:23:46.541] 
[13:23:46.541] 
[13:23:46.541] getGlobalsAndPackages() ... DONE
SequentialFuture:
Label: ‘<none>’
Expression:
{
    stop("Whoops!")
    1
}
Lazy evaluation: TRUE
Asynchronous evaluation: FALSE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: FALSE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: c1010526-43cf-67f3-5528-f283513a2221
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[13:23:46.542] Packages needed by the future expression (n = 0): <none>
[13:23:46.542] Packages needed by future strategies (n = 0): <none>
[13:23:46.543] {
[13:23:46.543]     {
[13:23:46.543]         {
[13:23:46.543]             ...future.startTime <- base::Sys.time()
[13:23:46.543]             {
[13:23:46.543]                 {
[13:23:46.543]                   {
[13:23:46.543]                     base::local({
[13:23:46.543]                       has_future <- base::requireNamespace("future", 
[13:23:46.543]                         quietly = TRUE)
[13:23:46.543]                       if (has_future) {
[13:23:46.543]                         ns <- base::getNamespace("future")
[13:23:46.543]                         version <- ns[[".package"]][["version"]]
[13:23:46.543]                         if (is.null(version)) 
[13:23:46.543]                           version <- utils::packageVersion("future")
[13:23:46.543]                       }
[13:23:46.543]                       else {
[13:23:46.543]                         version <- NULL
[13:23:46.543]                       }
[13:23:46.543]                       if (!has_future || version < "1.8.0") {
[13:23:46.543]                         info <- base::c(r_version = base::gsub("R version ", 
[13:23:46.543]                           "", base::R.version$version.string), 
[13:23:46.543]                           platform = base::sprintf("%s (%s-bit)", 
[13:23:46.543]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:23:46.543]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[13:23:46.543]                             "release", "version")], collapse = " "), 
[13:23:46.543]                           hostname = base::Sys.info()[["nodename"]])
[13:23:46.543]                         info <- base::sprintf("%s: %s", base::names(info), 
[13:23:46.543]                           info)
[13:23:46.543]                         info <- base::paste(info, collapse = "; ")
[13:23:46.543]                         if (!has_future) {
[13:23:46.543]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:23:46.543]                             info)
[13:23:46.543]                         }
[13:23:46.543]                         else {
[13:23:46.543]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:23:46.543]                             info, version)
[13:23:46.543]                         }
[13:23:46.543]                         base::stop(msg)
[13:23:46.543]                       }
[13:23:46.543]                     })
[13:23:46.543]                   }
[13:23:46.543]                   options(future.plan = NULL)
[13:23:46.543]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:23:46.543]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:23:46.543]                 }
[13:23:46.543]                 ...future.workdir <- getwd()
[13:23:46.543]             }
[13:23:46.543]             ...future.oldOptions <- base::as.list(base::.Options)
[13:23:46.543]             ...future.oldEnvVars <- base::Sys.getenv()
[13:23:46.543]         }
[13:23:46.543]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:23:46.543]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:23:46.543]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:23:46.543]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:23:46.543]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:23:46.543]             future.stdout.windows.reencode = NULL, width = 80L)
[13:23:46.543]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:23:46.543]             base::names(...future.oldOptions))
[13:23:46.543]     }
[13:23:46.543]     if (FALSE) {
[13:23:46.543]     }
[13:23:46.543]     else {
[13:23:46.543]         if (TRUE) {
[13:23:46.543]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:23:46.543]                 open = "w")
[13:23:46.543]         }
[13:23:46.543]         else {
[13:23:46.543]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:23:46.543]                 windows = "NUL", "/dev/null"), open = "w")
[13:23:46.543]         }
[13:23:46.543]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:23:46.543]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:23:46.543]             base::sink(type = "output", split = FALSE)
[13:23:46.543]             base::close(...future.stdout)
[13:23:46.543]         }, add = TRUE)
[13:23:46.543]     }
[13:23:46.543]     ...future.frame <- base::sys.nframe()
[13:23:46.543]     ...future.conditions <- base::list()
[13:23:46.543]     ...future.rng <- base::globalenv()$.Random.seed
[13:23:46.543]     if (FALSE) {
[13:23:46.543]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:23:46.543]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:23:46.543]     }
[13:23:46.543]     ...future.result <- base::tryCatch({
[13:23:46.543]         base::withCallingHandlers({
[13:23:46.543]             ...future.value <- base::withVisible(base::local({
[13:23:46.543]                 stop("Whoops!")
[13:23:46.543]                 1
[13:23:46.543]             }))
[13:23:46.543]             future::FutureResult(value = ...future.value$value, 
[13:23:46.543]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:23:46.543]                   ...future.rng), globalenv = if (FALSE) 
[13:23:46.543]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:23:46.543]                     ...future.globalenv.names))
[13:23:46.543]                 else NULL, started = ...future.startTime, version = "1.8")
[13:23:46.543]         }, condition = base::local({
[13:23:46.543]             c <- base::c
[13:23:46.543]             inherits <- base::inherits
[13:23:46.543]             invokeRestart <- base::invokeRestart
[13:23:46.543]             length <- base::length
[13:23:46.543]             list <- base::list
[13:23:46.543]             seq.int <- base::seq.int
[13:23:46.543]             signalCondition <- base::signalCondition
[13:23:46.543]             sys.calls <- base::sys.calls
[13:23:46.543]             `[[` <- base::`[[`
[13:23:46.543]             `+` <- base::`+`
[13:23:46.543]             `<<-` <- base::`<<-`
[13:23:46.543]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:23:46.543]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:23:46.543]                   3L)]
[13:23:46.543]             }
[13:23:46.543]             function(cond) {
[13:23:46.543]                 is_error <- inherits(cond, "error")
[13:23:46.543]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:23:46.543]                   NULL)
[13:23:46.543]                 if (is_error) {
[13:23:46.543]                   sessionInformation <- function() {
[13:23:46.543]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:23:46.543]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:23:46.543]                       search = base::search(), system = base::Sys.info())
[13:23:46.543]                   }
[13:23:46.543]                   ...future.conditions[[length(...future.conditions) + 
[13:23:46.543]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:23:46.543]                     cond$call), session = sessionInformation(), 
[13:23:46.543]                     timestamp = base::Sys.time(), signaled = 0L)
[13:23:46.543]                   signalCondition(cond)
[13:23:46.543]                 }
[13:23:46.543]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:23:46.543]                 "immediateCondition"))) {
[13:23:46.543]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:23:46.543]                   ...future.conditions[[length(...future.conditions) + 
[13:23:46.543]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:23:46.543]                   if (TRUE && !signal) {
[13:23:46.543]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:23:46.543]                     {
[13:23:46.543]                       inherits <- base::inherits
[13:23:46.543]                       invokeRestart <- base::invokeRestart
[13:23:46.543]                       is.null <- base::is.null
[13:23:46.543]                       muffled <- FALSE
[13:23:46.543]                       if (inherits(cond, "message")) {
[13:23:46.543]                         muffled <- grepl(pattern, "muffleMessage")
[13:23:46.543]                         if (muffled) 
[13:23:46.543]                           invokeRestart("muffleMessage")
[13:23:46.543]                       }
[13:23:46.543]                       else if (inherits(cond, "warning")) {
[13:23:46.543]                         muffled <- grepl(pattern, "muffleWarning")
[13:23:46.543]                         if (muffled) 
[13:23:46.543]                           invokeRestart("muffleWarning")
[13:23:46.543]                       }
[13:23:46.543]                       else if (inherits(cond, "condition")) {
[13:23:46.543]                         if (!is.null(pattern)) {
[13:23:46.543]                           computeRestarts <- base::computeRestarts
[13:23:46.543]                           grepl <- base::grepl
[13:23:46.543]                           restarts <- computeRestarts(cond)
[13:23:46.543]                           for (restart in restarts) {
[13:23:46.543]                             name <- restart$name
[13:23:46.543]                             if (is.null(name)) 
[13:23:46.543]                               next
[13:23:46.543]                             if (!grepl(pattern, name)) 
[13:23:46.543]                               next
[13:23:46.543]                             invokeRestart(restart)
[13:23:46.543]                             muffled <- TRUE
[13:23:46.543]                             break
[13:23:46.543]                           }
[13:23:46.543]                         }
[13:23:46.543]                       }
[13:23:46.543]                       invisible(muffled)
[13:23:46.543]                     }
[13:23:46.543]                     muffleCondition(cond, pattern = "^muffle")
[13:23:46.543]                   }
[13:23:46.543]                 }
[13:23:46.543]                 else {
[13:23:46.543]                   if (TRUE) {
[13:23:46.543]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:23:46.543]                     {
[13:23:46.543]                       inherits <- base::inherits
[13:23:46.543]                       invokeRestart <- base::invokeRestart
[13:23:46.543]                       is.null <- base::is.null
[13:23:46.543]                       muffled <- FALSE
[13:23:46.543]                       if (inherits(cond, "message")) {
[13:23:46.543]                         muffled <- grepl(pattern, "muffleMessage")
[13:23:46.543]                         if (muffled) 
[13:23:46.543]                           invokeRestart("muffleMessage")
[13:23:46.543]                       }
[13:23:46.543]                       else if (inherits(cond, "warning")) {
[13:23:46.543]                         muffled <- grepl(pattern, "muffleWarning")
[13:23:46.543]                         if (muffled) 
[13:23:46.543]                           invokeRestart("muffleWarning")
[13:23:46.543]                       }
[13:23:46.543]                       else if (inherits(cond, "condition")) {
[13:23:46.543]                         if (!is.null(pattern)) {
[13:23:46.543]                           computeRestarts <- base::computeRestarts
[13:23:46.543]                           grepl <- base::grepl
[13:23:46.543]                           restarts <- computeRestarts(cond)
[13:23:46.543]                           for (restart in restarts) {
[13:23:46.543]                             name <- restart$name
[13:23:46.543]                             if (is.null(name)) 
[13:23:46.543]                               next
[13:23:46.543]                             if (!grepl(pattern, name)) 
[13:23:46.543]                               next
[13:23:46.543]                             invokeRestart(restart)
[13:23:46.543]                             muffled <- TRUE
[13:23:46.543]                             break
[13:23:46.543]                           }
[13:23:46.543]                         }
[13:23:46.543]                       }
[13:23:46.543]                       invisible(muffled)
[13:23:46.543]                     }
[13:23:46.543]                     muffleCondition(cond, pattern = "^muffle")
[13:23:46.543]                   }
[13:23:46.543]                 }
[13:23:46.543]             }
[13:23:46.543]         }))
[13:23:46.543]     }, error = function(ex) {
[13:23:46.543]         base::structure(base::list(value = NULL, visible = NULL, 
[13:23:46.543]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:23:46.543]                 ...future.rng), started = ...future.startTime, 
[13:23:46.543]             finished = Sys.time(), session_uuid = NA_character_, 
[13:23:46.543]             version = "1.8"), class = "FutureResult")
[13:23:46.543]     }, finally = {
[13:23:46.543]         if (!identical(...future.workdir, getwd())) 
[13:23:46.543]             setwd(...future.workdir)
[13:23:46.543]         {
[13:23:46.543]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:23:46.543]                 ...future.oldOptions$nwarnings <- NULL
[13:23:46.543]             }
[13:23:46.543]             base::options(...future.oldOptions)
[13:23:46.543]             if (.Platform$OS.type == "windows") {
[13:23:46.543]                 old_names <- names(...future.oldEnvVars)
[13:23:46.543]                 envs <- base::Sys.getenv()
[13:23:46.543]                 names <- names(envs)
[13:23:46.543]                 common <- intersect(names, old_names)
[13:23:46.543]                 added <- setdiff(names, old_names)
[13:23:46.543]                 removed <- setdiff(old_names, names)
[13:23:46.543]                 changed <- common[...future.oldEnvVars[common] != 
[13:23:46.543]                   envs[common]]
[13:23:46.543]                 NAMES <- toupper(changed)
[13:23:46.543]                 args <- list()
[13:23:46.543]                 for (kk in seq_along(NAMES)) {
[13:23:46.543]                   name <- changed[[kk]]
[13:23:46.543]                   NAME <- NAMES[[kk]]
[13:23:46.543]                   if (name != NAME && is.element(NAME, old_names)) 
[13:23:46.543]                     next
[13:23:46.543]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:23:46.543]                 }
[13:23:46.543]                 NAMES <- toupper(added)
[13:23:46.543]                 for (kk in seq_along(NAMES)) {
[13:23:46.543]                   name <- added[[kk]]
[13:23:46.543]                   NAME <- NAMES[[kk]]
[13:23:46.543]                   if (name != NAME && is.element(NAME, old_names)) 
[13:23:46.543]                     next
[13:23:46.543]                   args[[name]] <- ""
[13:23:46.543]                 }
[13:23:46.543]                 NAMES <- toupper(removed)
[13:23:46.543]                 for (kk in seq_along(NAMES)) {
[13:23:46.543]                   name <- removed[[kk]]
[13:23:46.543]                   NAME <- NAMES[[kk]]
[13:23:46.543]                   if (name != NAME && is.element(NAME, old_names)) 
[13:23:46.543]                     next
[13:23:46.543]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:23:46.543]                 }
[13:23:46.543]                 if (length(args) > 0) 
[13:23:46.543]                   base::do.call(base::Sys.setenv, args = args)
[13:23:46.543]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:23:46.543]             }
[13:23:46.543]             else {
[13:23:46.543]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:23:46.543]             }
[13:23:46.543]             {
[13:23:46.543]                 if (base::length(...future.futureOptionsAdded) > 
[13:23:46.543]                   0L) {
[13:23:46.543]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:23:46.543]                   base::names(opts) <- ...future.futureOptionsAdded
[13:23:46.543]                   base::options(opts)
[13:23:46.543]                 }
[13:23:46.543]                 {
[13:23:46.543]                   {
[13:23:46.543]                     NULL
[13:23:46.543]                     RNGkind("Mersenne-Twister")
[13:23:46.543]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[13:23:46.543]                       inherits = FALSE)
[13:23:46.543]                   }
[13:23:46.543]                   options(future.plan = NULL)
[13:23:46.543]                   if (is.na(NA_character_)) 
[13:23:46.543]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:23:46.543]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:23:46.543]                   future::plan(list(function (..., envir = parent.frame()) 
[13:23:46.543]                   {
[13:23:46.543]                     future <- SequentialFuture(..., envir = envir)
[13:23:46.543]                     if (!future$lazy) 
[13:23:46.543]                       future <- run(future)
[13:23:46.543]                     invisible(future)
[13:23:46.543]                   }), .cleanup = FALSE, .init = FALSE)
[13:23:46.543]                 }
[13:23:46.543]             }
[13:23:46.543]         }
[13:23:46.543]     })
[13:23:46.543]     if (TRUE) {
[13:23:46.543]         base::sink(type = "output", split = FALSE)
[13:23:46.543]         if (TRUE) {
[13:23:46.543]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:23:46.543]         }
[13:23:46.543]         else {
[13:23:46.543]             ...future.result["stdout"] <- base::list(NULL)
[13:23:46.543]         }
[13:23:46.543]         base::close(...future.stdout)
[13:23:46.543]         ...future.stdout <- NULL
[13:23:46.543]     }
[13:23:46.543]     ...future.result$conditions <- ...future.conditions
[13:23:46.543]     ...future.result$finished <- base::Sys.time()
[13:23:46.543]     ...future.result
[13:23:46.543] }
[13:23:46.544] plan(): Setting new future strategy stack:
[13:23:46.545] List of future strategies:
[13:23:46.545] 1. sequential:
[13:23:46.545]    - args: function (..., envir = parent.frame())
[13:23:46.545]    - tweaked: FALSE
[13:23:46.545]    - call: NULL
[13:23:46.545] plan(): nbrOfWorkers() = 1
[13:23:46.546] plan(): Setting new future strategy stack:
[13:23:46.546] List of future strategies:
[13:23:46.546] 1. sequential:
[13:23:46.546]    - args: function (..., envir = parent.frame())
[13:23:46.546]    - tweaked: FALSE
[13:23:46.546]    - call: future::plan("sequential")
[13:23:46.546] plan(): nbrOfWorkers() = 1
[13:23:46.546] SequentialFuture started (and completed)
[13:23:46.547] signalConditions() ...
[13:23:46.547]  - include = ‘immediateCondition’
[13:23:46.547]  - exclude = 
[13:23:46.547]  - resignal = FALSE
[13:23:46.547]  - Number of conditions: 1
[13:23:46.547] signalConditions() ... done
[13:23:46.547] signalConditions() ...
[13:23:46.547]  - include = ‘immediateCondition’
[13:23:46.547]  - exclude = 
[13:23:46.547]  - resignal = FALSE
[13:23:46.547]  - Number of conditions: 1
[13:23:46.548] signalConditions() ... done
<simpleError in eval(quote({    stop("Whoops!")    1}), new.env()): Whoops!>
[13:23:46.548] signalConditions() ...
[13:23:46.548]  - include = ‘immediateCondition’
[13:23:46.548]  - exclude = 
[13:23:46.548]  - resignal = FALSE
[13:23:46.548]  - Number of conditions: 1
[13:23:46.548] signalConditions() ... done
[13:23:46.549] Future state: ‘finished’
[13:23:46.549] signalConditions() ...
[13:23:46.549]  - include = ‘condition’
[13:23:46.549]  - exclude = ‘immediateCondition’
[13:23:46.549]  - resignal = TRUE
[13:23:46.549]  - Number of conditions: 1
[13:23:46.549]  - Condition #1: ‘simpleError’, ‘error’, ‘condition’
[13:23:46.549] signalConditions() ... done
[1] "Error in eval(quote({ : Whoops!\n"
attr(,"class")
[1] "try-error"
attr(,"condition")
<simpleError in eval(quote({    stop("Whoops!")    1}), new.env()): Whoops!>
[13:23:46.550] signalConditions() ...
[13:23:46.550]  - include = ‘immediateCondition’
[13:23:46.550]  - exclude = 
[13:23:46.550]  - resignal = FALSE
[13:23:46.550]  - Number of conditions: 1
[13:23:46.550] signalConditions() ... done
[13:23:46.550] Future state: ‘finished’
[13:23:46.550] signalConditions() ...
[13:23:46.550]  - include = ‘condition’
[13:23:46.550]  - exclude = ‘immediateCondition’
[13:23:46.550]  - resignal = TRUE
[13:23:46.551]  - Number of conditions: 1
[13:23:46.551]  - Condition #1: ‘simpleError’, ‘error’, ‘condition’
[13:23:46.551] signalConditions() ... done
[1] "Error in eval(quote({ : Whoops!\n"
attr(,"class")
[1] "try-error"
attr(,"condition")
<simpleError in eval(quote({    stop("Whoops!")    1}), new.env()): Whoops!>
[13:23:46.554] getGlobalsAndPackages() ...
[13:23:46.555] Searching for globals...
[13:23:46.556] - globals found: [5] ‘{’, ‘stop’, ‘structure’, ‘list’, ‘c’
[13:23:46.556] Searching for globals ... DONE
[13:23:46.556] Resolving globals: FALSE
[13:23:46.557] 
[13:23:46.557] 
[13:23:46.557] getGlobalsAndPackages() ... DONE
SequentialFuture:
Label: ‘<none>’
Expression:
{
    stop(structure(list(message = "boom"), class = c("MyError", 
        "error", "condition")))
}
Lazy evaluation: TRUE
Asynchronous evaluation: FALSE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: FALSE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: c1010526-43cf-67f3-5528-f283513a2221
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[13:23:46.558] Packages needed by the future expression (n = 0): <none>
[13:23:46.558] Packages needed by future strategies (n = 0): <none>
[13:23:46.558] {
[13:23:46.558]     {
[13:23:46.558]         {
[13:23:46.558]             ...future.startTime <- base::Sys.time()
[13:23:46.558]             {
[13:23:46.558]                 {
[13:23:46.558]                   {
[13:23:46.558]                     base::local({
[13:23:46.558]                       has_future <- base::requireNamespace("future", 
[13:23:46.558]                         quietly = TRUE)
[13:23:46.558]                       if (has_future) {
[13:23:46.558]                         ns <- base::getNamespace("future")
[13:23:46.558]                         version <- ns[[".package"]][["version"]]
[13:23:46.558]                         if (is.null(version)) 
[13:23:46.558]                           version <- utils::packageVersion("future")
[13:23:46.558]                       }
[13:23:46.558]                       else {
[13:23:46.558]                         version <- NULL
[13:23:46.558]                       }
[13:23:46.558]                       if (!has_future || version < "1.8.0") {
[13:23:46.558]                         info <- base::c(r_version = base::gsub("R version ", 
[13:23:46.558]                           "", base::R.version$version.string), 
[13:23:46.558]                           platform = base::sprintf("%s (%s-bit)", 
[13:23:46.558]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:23:46.558]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[13:23:46.558]                             "release", "version")], collapse = " "), 
[13:23:46.558]                           hostname = base::Sys.info()[["nodename"]])
[13:23:46.558]                         info <- base::sprintf("%s: %s", base::names(info), 
[13:23:46.558]                           info)
[13:23:46.558]                         info <- base::paste(info, collapse = "; ")
[13:23:46.558]                         if (!has_future) {
[13:23:46.558]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:23:46.558]                             info)
[13:23:46.558]                         }
[13:23:46.558]                         else {
[13:23:46.558]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:23:46.558]                             info, version)
[13:23:46.558]                         }
[13:23:46.558]                         base::stop(msg)
[13:23:46.558]                       }
[13:23:46.558]                     })
[13:23:46.558]                   }
[13:23:46.558]                   options(future.plan = NULL)
[13:23:46.558]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:23:46.558]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:23:46.558]                 }
[13:23:46.558]                 ...future.workdir <- getwd()
[13:23:46.558]             }
[13:23:46.558]             ...future.oldOptions <- base::as.list(base::.Options)
[13:23:46.558]             ...future.oldEnvVars <- base::Sys.getenv()
[13:23:46.558]         }
[13:23:46.558]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:23:46.558]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:23:46.558]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:23:46.558]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:23:46.558]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:23:46.558]             future.stdout.windows.reencode = NULL, width = 80L)
[13:23:46.558]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:23:46.558]             base::names(...future.oldOptions))
[13:23:46.558]     }
[13:23:46.558]     if (FALSE) {
[13:23:46.558]     }
[13:23:46.558]     else {
[13:23:46.558]         if (TRUE) {
[13:23:46.558]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:23:46.558]                 open = "w")
[13:23:46.558]         }
[13:23:46.558]         else {
[13:23:46.558]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:23:46.558]                 windows = "NUL", "/dev/null"), open = "w")
[13:23:46.558]         }
[13:23:46.558]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:23:46.558]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:23:46.558]             base::sink(type = "output", split = FALSE)
[13:23:46.558]             base::close(...future.stdout)
[13:23:46.558]         }, add = TRUE)
[13:23:46.558]     }
[13:23:46.558]     ...future.frame <- base::sys.nframe()
[13:23:46.558]     ...future.conditions <- base::list()
[13:23:46.558]     ...future.rng <- base::globalenv()$.Random.seed
[13:23:46.558]     if (FALSE) {
[13:23:46.558]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:23:46.558]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:23:46.558]     }
[13:23:46.558]     ...future.result <- base::tryCatch({
[13:23:46.558]         base::withCallingHandlers({
[13:23:46.558]             ...future.value <- base::withVisible(base::local({
[13:23:46.558]                 stop(structure(list(message = "boom"), class = c("MyError", 
[13:23:46.558]                   "error", "condition")))
[13:23:46.558]             }))
[13:23:46.558]             future::FutureResult(value = ...future.value$value, 
[13:23:46.558]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:23:46.558]                   ...future.rng), globalenv = if (FALSE) 
[13:23:46.558]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:23:46.558]                     ...future.globalenv.names))
[13:23:46.558]                 else NULL, started = ...future.startTime, version = "1.8")
[13:23:46.558]         }, condition = base::local({
[13:23:46.558]             c <- base::c
[13:23:46.558]             inherits <- base::inherits
[13:23:46.558]             invokeRestart <- base::invokeRestart
[13:23:46.558]             length <- base::length
[13:23:46.558]             list <- base::list
[13:23:46.558]             seq.int <- base::seq.int
[13:23:46.558]             signalCondition <- base::signalCondition
[13:23:46.558]             sys.calls <- base::sys.calls
[13:23:46.558]             `[[` <- base::`[[`
[13:23:46.558]             `+` <- base::`+`
[13:23:46.558]             `<<-` <- base::`<<-`
[13:23:46.558]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:23:46.558]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:23:46.558]                   3L)]
[13:23:46.558]             }
[13:23:46.558]             function(cond) {
[13:23:46.558]                 is_error <- inherits(cond, "error")
[13:23:46.558]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:23:46.558]                   NULL)
[13:23:46.558]                 if (is_error) {
[13:23:46.558]                   sessionInformation <- function() {
[13:23:46.558]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:23:46.558]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:23:46.558]                       search = base::search(), system = base::Sys.info())
[13:23:46.558]                   }
[13:23:46.558]                   ...future.conditions[[length(...future.conditions) + 
[13:23:46.558]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:23:46.558]                     cond$call), session = sessionInformation(), 
[13:23:46.558]                     timestamp = base::Sys.time(), signaled = 0L)
[13:23:46.558]                   signalCondition(cond)
[13:23:46.558]                 }
[13:23:46.558]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:23:46.558]                 "immediateCondition"))) {
[13:23:46.558]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:23:46.558]                   ...future.conditions[[length(...future.conditions) + 
[13:23:46.558]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:23:46.558]                   if (TRUE && !signal) {
[13:23:46.558]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:23:46.558]                     {
[13:23:46.558]                       inherits <- base::inherits
[13:23:46.558]                       invokeRestart <- base::invokeRestart
[13:23:46.558]                       is.null <- base::is.null
[13:23:46.558]                       muffled <- FALSE
[13:23:46.558]                       if (inherits(cond, "message")) {
[13:23:46.558]                         muffled <- grepl(pattern, "muffleMessage")
[13:23:46.558]                         if (muffled) 
[13:23:46.558]                           invokeRestart("muffleMessage")
[13:23:46.558]                       }
[13:23:46.558]                       else if (inherits(cond, "warning")) {
[13:23:46.558]                         muffled <- grepl(pattern, "muffleWarning")
[13:23:46.558]                         if (muffled) 
[13:23:46.558]                           invokeRestart("muffleWarning")
[13:23:46.558]                       }
[13:23:46.558]                       else if (inherits(cond, "condition")) {
[13:23:46.558]                         if (!is.null(pattern)) {
[13:23:46.558]                           computeRestarts <- base::computeRestarts
[13:23:46.558]                           grepl <- base::grepl
[13:23:46.558]                           restarts <- computeRestarts(cond)
[13:23:46.558]                           for (restart in restarts) {
[13:23:46.558]                             name <- restart$name
[13:23:46.558]                             if (is.null(name)) 
[13:23:46.558]                               next
[13:23:46.558]                             if (!grepl(pattern, name)) 
[13:23:46.558]                               next
[13:23:46.558]                             invokeRestart(restart)
[13:23:46.558]                             muffled <- TRUE
[13:23:46.558]                             break
[13:23:46.558]                           }
[13:23:46.558]                         }
[13:23:46.558]                       }
[13:23:46.558]                       invisible(muffled)
[13:23:46.558]                     }
[13:23:46.558]                     muffleCondition(cond, pattern = "^muffle")
[13:23:46.558]                   }
[13:23:46.558]                 }
[13:23:46.558]                 else {
[13:23:46.558]                   if (TRUE) {
[13:23:46.558]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:23:46.558]                     {
[13:23:46.558]                       inherits <- base::inherits
[13:23:46.558]                       invokeRestart <- base::invokeRestart
[13:23:46.558]                       is.null <- base::is.null
[13:23:46.558]                       muffled <- FALSE
[13:23:46.558]                       if (inherits(cond, "message")) {
[13:23:46.558]                         muffled <- grepl(pattern, "muffleMessage")
[13:23:46.558]                         if (muffled) 
[13:23:46.558]                           invokeRestart("muffleMessage")
[13:23:46.558]                       }
[13:23:46.558]                       else if (inherits(cond, "warning")) {
[13:23:46.558]                         muffled <- grepl(pattern, "muffleWarning")
[13:23:46.558]                         if (muffled) 
[13:23:46.558]                           invokeRestart("muffleWarning")
[13:23:46.558]                       }
[13:23:46.558]                       else if (inherits(cond, "condition")) {
[13:23:46.558]                         if (!is.null(pattern)) {
[13:23:46.558]                           computeRestarts <- base::computeRestarts
[13:23:46.558]                           grepl <- base::grepl
[13:23:46.558]                           restarts <- computeRestarts(cond)
[13:23:46.558]                           for (restart in restarts) {
[13:23:46.558]                             name <- restart$name
[13:23:46.558]                             if (is.null(name)) 
[13:23:46.558]                               next
[13:23:46.558]                             if (!grepl(pattern, name)) 
[13:23:46.558]                               next
[13:23:46.558]                             invokeRestart(restart)
[13:23:46.558]                             muffled <- TRUE
[13:23:46.558]                             break
[13:23:46.558]                           }
[13:23:46.558]                         }
[13:23:46.558]                       }
[13:23:46.558]                       invisible(muffled)
[13:23:46.558]                     }
[13:23:46.558]                     muffleCondition(cond, pattern = "^muffle")
[13:23:46.558]                   }
[13:23:46.558]                 }
[13:23:46.558]             }
[13:23:46.558]         }))
[13:23:46.558]     }, error = function(ex) {
[13:23:46.558]         base::structure(base::list(value = NULL, visible = NULL, 
[13:23:46.558]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:23:46.558]                 ...future.rng), started = ...future.startTime, 
[13:23:46.558]             finished = Sys.time(), session_uuid = NA_character_, 
[13:23:46.558]             version = "1.8"), class = "FutureResult")
[13:23:46.558]     }, finally = {
[13:23:46.558]         if (!identical(...future.workdir, getwd())) 
[13:23:46.558]             setwd(...future.workdir)
[13:23:46.558]         {
[13:23:46.558]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:23:46.558]                 ...future.oldOptions$nwarnings <- NULL
[13:23:46.558]             }
[13:23:46.558]             base::options(...future.oldOptions)
[13:23:46.558]             if (.Platform$OS.type == "windows") {
[13:23:46.558]                 old_names <- names(...future.oldEnvVars)
[13:23:46.558]                 envs <- base::Sys.getenv()
[13:23:46.558]                 names <- names(envs)
[13:23:46.558]                 common <- intersect(names, old_names)
[13:23:46.558]                 added <- setdiff(names, old_names)
[13:23:46.558]                 removed <- setdiff(old_names, names)
[13:23:46.558]                 changed <- common[...future.oldEnvVars[common] != 
[13:23:46.558]                   envs[common]]
[13:23:46.558]                 NAMES <- toupper(changed)
[13:23:46.558]                 args <- list()
[13:23:46.558]                 for (kk in seq_along(NAMES)) {
[13:23:46.558]                   name <- changed[[kk]]
[13:23:46.558]                   NAME <- NAMES[[kk]]
[13:23:46.558]                   if (name != NAME && is.element(NAME, old_names)) 
[13:23:46.558]                     next
[13:23:46.558]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:23:46.558]                 }
[13:23:46.558]                 NAMES <- toupper(added)
[13:23:46.558]                 for (kk in seq_along(NAMES)) {
[13:23:46.558]                   name <- added[[kk]]
[13:23:46.558]                   NAME <- NAMES[[kk]]
[13:23:46.558]                   if (name != NAME && is.element(NAME, old_names)) 
[13:23:46.558]                     next
[13:23:46.558]                   args[[name]] <- ""
[13:23:46.558]                 }
[13:23:46.558]                 NAMES <- toupper(removed)
[13:23:46.558]                 for (kk in seq_along(NAMES)) {
[13:23:46.558]                   name <- removed[[kk]]
[13:23:46.558]                   NAME <- NAMES[[kk]]
[13:23:46.558]                   if (name != NAME && is.element(NAME, old_names)) 
[13:23:46.558]                     next
[13:23:46.558]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:23:46.558]                 }
[13:23:46.558]                 if (length(args) > 0) 
[13:23:46.558]                   base::do.call(base::Sys.setenv, args = args)
[13:23:46.558]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:23:46.558]             }
[13:23:46.558]             else {
[13:23:46.558]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:23:46.558]             }
[13:23:46.558]             {
[13:23:46.558]                 if (base::length(...future.futureOptionsAdded) > 
[13:23:46.558]                   0L) {
[13:23:46.558]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:23:46.558]                   base::names(opts) <- ...future.futureOptionsAdded
[13:23:46.558]                   base::options(opts)
[13:23:46.558]                 }
[13:23:46.558]                 {
[13:23:46.558]                   {
[13:23:46.558]                     NULL
[13:23:46.558]                     RNGkind("Mersenne-Twister")
[13:23:46.558]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[13:23:46.558]                       inherits = FALSE)
[13:23:46.558]                   }
[13:23:46.558]                   options(future.plan = NULL)
[13:23:46.558]                   if (is.na(NA_character_)) 
[13:23:46.558]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:23:46.558]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:23:46.558]                   future::plan(list(function (..., envir = parent.frame()) 
[13:23:46.558]                   {
[13:23:46.558]                     future <- SequentialFuture(..., envir = envir)
[13:23:46.558]                     if (!future$lazy) 
[13:23:46.558]                       future <- run(future)
[13:23:46.558]                     invisible(future)
[13:23:46.558]                   }), .cleanup = FALSE, .init = FALSE)
[13:23:46.558]                 }
[13:23:46.558]             }
[13:23:46.558]         }
[13:23:46.558]     })
[13:23:46.558]     if (TRUE) {
[13:23:46.558]         base::sink(type = "output", split = FALSE)
[13:23:46.558]         if (TRUE) {
[13:23:46.558]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:23:46.558]         }
[13:23:46.558]         else {
[13:23:46.558]             ...future.result["stdout"] <- base::list(NULL)
[13:23:46.558]         }
[13:23:46.558]         base::close(...future.stdout)
[13:23:46.558]         ...future.stdout <- NULL
[13:23:46.558]     }
[13:23:46.558]     ...future.result$conditions <- ...future.conditions
[13:23:46.558]     ...future.result$finished <- base::Sys.time()
[13:23:46.558]     ...future.result
[13:23:46.558] }
[13:23:46.560] plan(): Setting new future strategy stack:
[13:23:46.560] List of future strategies:
[13:23:46.560] 1. sequential:
[13:23:46.560]    - args: function (..., envir = parent.frame())
[13:23:46.560]    - tweaked: FALSE
[13:23:46.560]    - call: NULL
[13:23:46.560] plan(): nbrOfWorkers() = 1
[13:23:46.561] plan(): Setting new future strategy stack:
[13:23:46.561] List of future strategies:
[13:23:46.561] 1. sequential:
[13:23:46.561]    - args: function (..., envir = parent.frame())
[13:23:46.561]    - tweaked: FALSE
[13:23:46.561]    - call: future::plan("sequential")
[13:23:46.562] plan(): nbrOfWorkers() = 1
[13:23:46.562] SequentialFuture started (and completed)
[13:23:46.562] signalConditions() ...
[13:23:46.562]  - include = ‘immediateCondition’
[13:23:46.562]  - exclude = 
[13:23:46.562]  - resignal = FALSE
[13:23:46.562]  - Number of conditions: 1
[13:23:46.563] signalConditions() ... done
[13:23:46.563] signalConditions() ...
[13:23:46.563]  - include = ‘immediateCondition’
[13:23:46.563]  - exclude = 
[13:23:46.563]  - resignal = FALSE
[13:23:46.563]  - Number of conditions: 1
[13:23:46.563] signalConditions() ... done
<MyError: boom>
[13:23:46.563] signalConditions() ...
[13:23:46.563]  - include = ‘immediateCondition’
[13:23:46.564]  - exclude = 
[13:23:46.564]  - resignal = FALSE
[13:23:46.564]  - Number of conditions: 1
[13:23:46.564] signalConditions() ... done
[13:23:46.564] Future state: ‘finished’
[13:23:46.564] signalConditions() ...
[13:23:46.564]  - include = ‘condition’
[13:23:46.564]  - exclude = ‘immediateCondition’
[13:23:46.564]  - resignal = TRUE
[13:23:46.564]  - Number of conditions: 1
[13:23:46.565]  - Condition #1: ‘MyError’, ‘error’, ‘condition’
[13:23:46.565] signalConditions() ... done
Testing with 1 cores ... DONE
Testing with 2 cores ...
[13:23:46.573] getGlobalsAndPackages() ...
[13:23:46.573] 
[13:23:46.573] - globals: [0] <none>
[13:23:46.573] getGlobalsAndPackages() ... DONE
[13:23:46.574] [local output] makeClusterPSOCK() ...
[13:23:46.611] [local output] Workers: [n = 2] ‘localhost’, ‘localhost’
[13:23:46.613] [local output] Base port: 11704
[13:23:46.613] [local output] Getting setup options for 2 cluster nodes ...
[13:23:46.613] [local output]  - Node 1 of 2 ...
[13:23:46.613] [local output] localMachine=TRUE => revtunnel=FALSE

[13:23:46.614] Testing if worker's PID can be inferred: ‘'/usr/local/lib/R/bin/Rscript' -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/Rtmp66NXja/worker.rank=1.parallelly.parent=88294.158e640c2e095.pid")), silent = TRUE)' -e 'file.exists("/tmp/Rtmp66NXja/worker.rank=1.parallelly.parent=88294.158e640c2e095.pid")'’
[13:23:46.811] - Possible to infer worker's PID: TRUE
[13:23:46.811] [local output] Rscript port: 11704

[13:23:46.811] [local output]  - Node 2 of 2 ...
[13:23:46.812] [local output] localMachine=TRUE => revtunnel=FALSE

[13:23:46.812] [local output] Rscript port: 11704

[13:23:46.813] [local output] Getting setup options for 2 cluster nodes ... done
[13:23:46.813] [local output]  - Parallel setup requested for some PSOCK nodes
[13:23:46.813] [local output] Setting up PSOCK nodes in parallel
[13:23:46.814] List of 36
[13:23:46.814]  $ worker          : chr "localhost"
[13:23:46.814]   ..- attr(*, "localhost")= logi TRUE
[13:23:46.814]  $ master          : chr "localhost"
[13:23:46.814]  $ port            : int 11704
[13:23:46.814]  $ connectTimeout  : num 120
[13:23:46.814]  $ timeout         : num 2592000
[13:23:46.814]  $ rscript         : chr "'/usr/local/lib/R/bin/Rscript'"
[13:23:46.814]  $ homogeneous     : logi TRUE
[13:23:46.814]  $ rscript_args    : chr "--default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),fi"| __truncated__
[13:23:46.814]  $ rscript_envs    : NULL
[13:23:46.814]  $ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[13:23:46.814]  $ rscript_startup : NULL
[13:23:46.814]  $ rscript_sh      : chr "sh"
[13:23:46.814]  $ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[13:23:46.814]  $ methods         : logi TRUE
[13:23:46.814]  $ socketOptions   : chr "no-delay"
[13:23:46.814]  $ useXDR          : logi FALSE
[13:23:46.814]  $ outfile         : chr "/dev/null"
[13:23:46.814]  $ renice          : int NA
[13:23:46.814]  $ rshcmd          : NULL
[13:23:46.814]  $ user            : chr(0) 
[13:23:46.814]  $ revtunnel       : logi FALSE
[13:23:46.814]  $ rshlogfile      : NULL
[13:23:46.814]  $ rshopts         : chr(0) 
[13:23:46.814]  $ rank            : int 1
[13:23:46.814]  $ manual          : logi FALSE
[13:23:46.814]  $ dryrun          : logi FALSE
[13:23:46.814]  $ quiet           : logi FALSE
[13:23:46.814]  $ setup_strategy  : chr "parallel"
[13:23:46.814]  $ local_cmd       : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[13:23:46.814]  $ pidfile         : chr "/tmp/Rtmp66NXja/worker.rank=1.parallelly.parent=88294.158e640c2e095.pid"
[13:23:46.814]  $ rshcmd_label    : NULL
[13:23:46.814]  $ rsh_call        : NULL
[13:23:46.814]  $ cmd             : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[13:23:46.814]  $ localMachine    : logi TRUE
[13:23:46.814]  $ make_fcn        :function (worker = getOption2("parallelly.localhost.hostname", "localhost"), 
[13:23:46.814]     master = NULL, port, connectTimeout = getOption2("parallelly.makeNodePSOCK.connectTimeout", 
[13:23:46.814]         2 * 60), timeout = getOption2("parallelly.makeNodePSOCK.timeout", 
[13:23:46.814]         30 * 24 * 60 * 60), rscript = NULL, homogeneous = NULL, rscript_args = NULL, 
[13:23:46.814]     rscript_envs = NULL, rscript_libs = NULL, rscript_startup = NULL, rscript_sh = c("auto", 
[13:23:46.814]         "cmd", "sh"), default_packages = c("datasets", "utils", "grDevices", 
[13:23:46.814]         "graphics", "stats", if (methods) "methods"), methods = TRUE, socketOptions = getOption2("parallelly.makeNodePSOCK.socketOptions", 
[13:23:46.814]         "no-delay"), useXDR = getOption2("parallelly.makeNodePSOCK.useXDR", 
[13:23:46.814]         FALSE), outfile = "/dev/null", renice = NA_integer_, rshcmd = getOption2("parallelly.makeNodePSOCK.rshcmd", 
[13:23:46.814]         NULL), user = NULL, revtunnel = NA, rshlogfile = NULL, rshopts = getOption2("parallelly.makeNodePSOCK.rshopts", 
[13:23:46.814]         NULL), rank = 1L, manual = FALSE, dryrun = FALSE, quiet = FALSE, 
[13:23:46.814]     setup_strategy = getOption2("parallelly.makeNodePSOCK.setup_strategy", 
[13:23:46.814]         "parallel"), action = c("launch", "options"), verbose = FALSE)  
[13:23:46.814]  $ arguments       :List of 28
[13:23:46.814]   ..$ worker          : chr "localhost"
[13:23:46.814]   ..$ master          : NULL
[13:23:46.814]   ..$ port            : int 11704
[13:23:46.814]   ..$ connectTimeout  : num 120
[13:23:46.814]   ..$ timeout         : num 2592000
[13:23:46.814]   ..$ rscript         : NULL
[13:23:46.814]   ..$ homogeneous     : NULL
[13:23:46.814]   ..$ rscript_args    : NULL
[13:23:46.814]   ..$ rscript_envs    : NULL
[13:23:46.814]   ..$ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[13:23:46.814]   ..$ rscript_startup : NULL
[13:23:46.814]   ..$ rscript_sh      : chr [1:3] "auto" "cmd" "sh"
[13:23:46.814]   ..$ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[13:23:46.814]   ..$ methods         : logi TRUE
[13:23:46.814]   ..$ socketOptions   : chr "no-delay"
[13:23:46.814]   ..$ useXDR          : logi FALSE
[13:23:46.814]   ..$ outfile         : chr "/dev/null"
[13:23:46.814]   ..$ renice          : int NA
[13:23:46.814]   ..$ rshcmd          : NULL
[13:23:46.814]   ..$ user            : NULL
[13:23:46.814]   ..$ revtunnel       : logi NA
[13:23:46.814]   ..$ rshlogfile      : NULL
[13:23:46.814]   ..$ rshopts         : NULL
[13:23:46.814]   ..$ rank            : int 1
[13:23:46.814]   ..$ manual          : logi FALSE
[13:23:46.814]   ..$ dryrun          : logi FALSE
[13:23:46.814]   ..$ quiet           : logi FALSE
[13:23:46.814]   ..$ setup_strategy  : chr "parallel"
[13:23:46.814]  - attr(*, "class")= chr [1:2] "makeNodePSOCKOptions" "makeNodeOptions"
[13:23:46.831] [local output] System call to launch all workers:
[13:23:46.831] [local output] '/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/Rtmp66NXja/worker.rank=1.parallelly.parent=88294.158e640c2e095.pid")), silent = TRUE)' -e 'options(socketOptions = "no-delay")' -e '.libPaths(c("/usr/local/lib/R/site-library","/usr/local/lib/R/library"))' -e 'workRSOCK <- tryCatch(parallel:::.workRSOCK, error=function(e) parallel:::.slaveRSOCK); workRSOCK()' MASTER=localhost PORT=11704 OUT=/dev/null TIMEOUT=2592000 XDR=FALSE SETUPTIMEOUT=120 SETUPSTRATEGY=parallel
[13:23:46.831] [local output] Starting PSOCK main server
[13:23:46.837] [local output] Workers launched
[13:23:46.838] [local output] Waiting for workers to connect back
[13:23:46.838]  - [local output] 0 workers out of 2 ready
[13:23:47.093]  - [local output] 0 workers out of 2 ready
[13:23:47.094]  - [local output] 1 workers out of 2 ready
[13:23:47.094]  - [local output] 2 workers out of 2 ready
[13:23:47.094] [local output] Launching of workers completed
[13:23:47.094] [local output] Collecting session information from workers
[13:23:47.095] [local output]  - Worker #1 of 2
[13:23:47.096] [local output]  - Worker #2 of 2
[13:23:47.096] [local output] makeClusterPSOCK() ... done
[13:23:47.108] Packages needed by the future expression (n = 0): <none>
[13:23:47.108] Packages needed by future strategies (n = 0): <none>
[13:23:47.108] {
[13:23:47.108]     {
[13:23:47.108]         {
[13:23:47.108]             ...future.startTime <- base::Sys.time()
[13:23:47.108]             {
[13:23:47.108]                 {
[13:23:47.108]                   {
[13:23:47.108]                     {
[13:23:47.108]                       base::local({
[13:23:47.108]                         has_future <- base::requireNamespace("future", 
[13:23:47.108]                           quietly = TRUE)
[13:23:47.108]                         if (has_future) {
[13:23:47.108]                           ns <- base::getNamespace("future")
[13:23:47.108]                           version <- ns[[".package"]][["version"]]
[13:23:47.108]                           if (is.null(version)) 
[13:23:47.108]                             version <- utils::packageVersion("future")
[13:23:47.108]                         }
[13:23:47.108]                         else {
[13:23:47.108]                           version <- NULL
[13:23:47.108]                         }
[13:23:47.108]                         if (!has_future || version < "1.8.0") {
[13:23:47.108]                           info <- base::c(r_version = base::gsub("R version ", 
[13:23:47.108]                             "", base::R.version$version.string), 
[13:23:47.108]                             platform = base::sprintf("%s (%s-bit)", 
[13:23:47.108]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:23:47.108]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:23:47.108]                               "release", "version")], collapse = " "), 
[13:23:47.108]                             hostname = base::Sys.info()[["nodename"]])
[13:23:47.108]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:23:47.108]                             info)
[13:23:47.108]                           info <- base::paste(info, collapse = "; ")
[13:23:47.108]                           if (!has_future) {
[13:23:47.108]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:23:47.108]                               info)
[13:23:47.108]                           }
[13:23:47.108]                           else {
[13:23:47.108]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:23:47.108]                               info, version)
[13:23:47.108]                           }
[13:23:47.108]                           base::stop(msg)
[13:23:47.108]                         }
[13:23:47.108]                       })
[13:23:47.108]                     }
[13:23:47.108]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[13:23:47.108]                     base::options(mc.cores = 1L)
[13:23:47.108]                   }
[13:23:47.108]                   options(future.plan = NULL)
[13:23:47.108]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:23:47.108]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:23:47.108]                 }
[13:23:47.108]                 ...future.workdir <- getwd()
[13:23:47.108]             }
[13:23:47.108]             ...future.oldOptions <- base::as.list(base::.Options)
[13:23:47.108]             ...future.oldEnvVars <- base::Sys.getenv()
[13:23:47.108]         }
[13:23:47.108]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:23:47.108]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:23:47.108]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:23:47.108]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:23:47.108]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:23:47.108]             future.stdout.windows.reencode = NULL, width = 80L)
[13:23:47.108]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:23:47.108]             base::names(...future.oldOptions))
[13:23:47.108]     }
[13:23:47.108]     if (FALSE) {
[13:23:47.108]     }
[13:23:47.108]     else {
[13:23:47.108]         if (TRUE) {
[13:23:47.108]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:23:47.108]                 open = "w")
[13:23:47.108]         }
[13:23:47.108]         else {
[13:23:47.108]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:23:47.108]                 windows = "NUL", "/dev/null"), open = "w")
[13:23:47.108]         }
[13:23:47.108]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:23:47.108]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:23:47.108]             base::sink(type = "output", split = FALSE)
[13:23:47.108]             base::close(...future.stdout)
[13:23:47.108]         }, add = TRUE)
[13:23:47.108]     }
[13:23:47.108]     ...future.frame <- base::sys.nframe()
[13:23:47.108]     ...future.conditions <- base::list()
[13:23:47.108]     ...future.rng <- base::globalenv()$.Random.seed
[13:23:47.108]     if (FALSE) {
[13:23:47.108]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:23:47.108]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:23:47.108]     }
[13:23:47.108]     ...future.result <- base::tryCatch({
[13:23:47.108]         base::withCallingHandlers({
[13:23:47.108]             ...future.value <- base::withVisible(base::local({
[13:23:47.108]                 ...future.makeSendCondition <- base::local({
[13:23:47.108]                   sendCondition <- NULL
[13:23:47.108]                   function(frame = 1L) {
[13:23:47.108]                     if (is.function(sendCondition)) 
[13:23:47.108]                       return(sendCondition)
[13:23:47.108]                     ns <- getNamespace("parallel")
[13:23:47.108]                     if (exists("sendData", mode = "function", 
[13:23:47.108]                       envir = ns)) {
[13:23:47.108]                       parallel_sendData <- get("sendData", mode = "function", 
[13:23:47.108]                         envir = ns)
[13:23:47.108]                       envir <- sys.frame(frame)
[13:23:47.108]                       master <- NULL
[13:23:47.108]                       while (!identical(envir, .GlobalEnv) && 
[13:23:47.108]                         !identical(envir, emptyenv())) {
[13:23:47.108]                         if (exists("master", mode = "list", envir = envir, 
[13:23:47.108]                           inherits = FALSE)) {
[13:23:47.108]                           master <- get("master", mode = "list", 
[13:23:47.108]                             envir = envir, inherits = FALSE)
[13:23:47.108]                           if (inherits(master, c("SOCKnode", 
[13:23:47.108]                             "SOCK0node"))) {
[13:23:47.108]                             sendCondition <<- function(cond) {
[13:23:47.108]                               data <- list(type = "VALUE", value = cond, 
[13:23:47.108]                                 success = TRUE)
[13:23:47.108]                               parallel_sendData(master, data)
[13:23:47.108]                             }
[13:23:47.108]                             return(sendCondition)
[13:23:47.108]                           }
[13:23:47.108]                         }
[13:23:47.108]                         frame <- frame + 1L
[13:23:47.108]                         envir <- sys.frame(frame)
[13:23:47.108]                       }
[13:23:47.108]                     }
[13:23:47.108]                     sendCondition <<- function(cond) NULL
[13:23:47.108]                   }
[13:23:47.108]                 })
[13:23:47.108]                 withCallingHandlers({
[13:23:47.108]                   {
[13:23:47.108]                     42L
[13:23:47.108]                   }
[13:23:47.108]                 }, immediateCondition = function(cond) {
[13:23:47.108]                   sendCondition <- ...future.makeSendCondition()
[13:23:47.108]                   sendCondition(cond)
[13:23:47.108]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:23:47.108]                   {
[13:23:47.108]                     inherits <- base::inherits
[13:23:47.108]                     invokeRestart <- base::invokeRestart
[13:23:47.108]                     is.null <- base::is.null
[13:23:47.108]                     muffled <- FALSE
[13:23:47.108]                     if (inherits(cond, "message")) {
[13:23:47.108]                       muffled <- grepl(pattern, "muffleMessage")
[13:23:47.108]                       if (muffled) 
[13:23:47.108]                         invokeRestart("muffleMessage")
[13:23:47.108]                     }
[13:23:47.108]                     else if (inherits(cond, "warning")) {
[13:23:47.108]                       muffled <- grepl(pattern, "muffleWarning")
[13:23:47.108]                       if (muffled) 
[13:23:47.108]                         invokeRestart("muffleWarning")
[13:23:47.108]                     }
[13:23:47.108]                     else if (inherits(cond, "condition")) {
[13:23:47.108]                       if (!is.null(pattern)) {
[13:23:47.108]                         computeRestarts <- base::computeRestarts
[13:23:47.108]                         grepl <- base::grepl
[13:23:47.108]                         restarts <- computeRestarts(cond)
[13:23:47.108]                         for (restart in restarts) {
[13:23:47.108]                           name <- restart$name
[13:23:47.108]                           if (is.null(name)) 
[13:23:47.108]                             next
[13:23:47.108]                           if (!grepl(pattern, name)) 
[13:23:47.108]                             next
[13:23:47.108]                           invokeRestart(restart)
[13:23:47.108]                           muffled <- TRUE
[13:23:47.108]                           break
[13:23:47.108]                         }
[13:23:47.108]                       }
[13:23:47.108]                     }
[13:23:47.108]                     invisible(muffled)
[13:23:47.108]                   }
[13:23:47.108]                   muffleCondition(cond)
[13:23:47.108]                 })
[13:23:47.108]             }))
[13:23:47.108]             future::FutureResult(value = ...future.value$value, 
[13:23:47.108]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:23:47.108]                   ...future.rng), globalenv = if (FALSE) 
[13:23:47.108]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:23:47.108]                     ...future.globalenv.names))
[13:23:47.108]                 else NULL, started = ...future.startTime, version = "1.8")
[13:23:47.108]         }, condition = base::local({
[13:23:47.108]             c <- base::c
[13:23:47.108]             inherits <- base::inherits
[13:23:47.108]             invokeRestart <- base::invokeRestart
[13:23:47.108]             length <- base::length
[13:23:47.108]             list <- base::list
[13:23:47.108]             seq.int <- base::seq.int
[13:23:47.108]             signalCondition <- base::signalCondition
[13:23:47.108]             sys.calls <- base::sys.calls
[13:23:47.108]             `[[` <- base::`[[`
[13:23:47.108]             `+` <- base::`+`
[13:23:47.108]             `<<-` <- base::`<<-`
[13:23:47.108]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:23:47.108]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:23:47.108]                   3L)]
[13:23:47.108]             }
[13:23:47.108]             function(cond) {
[13:23:47.108]                 is_error <- inherits(cond, "error")
[13:23:47.108]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:23:47.108]                   NULL)
[13:23:47.108]                 if (is_error) {
[13:23:47.108]                   sessionInformation <- function() {
[13:23:47.108]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:23:47.108]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:23:47.108]                       search = base::search(), system = base::Sys.info())
[13:23:47.108]                   }
[13:23:47.108]                   ...future.conditions[[length(...future.conditions) + 
[13:23:47.108]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:23:47.108]                     cond$call), session = sessionInformation(), 
[13:23:47.108]                     timestamp = base::Sys.time(), signaled = 0L)
[13:23:47.108]                   signalCondition(cond)
[13:23:47.108]                 }
[13:23:47.108]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:23:47.108]                 "immediateCondition"))) {
[13:23:47.108]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:23:47.108]                   ...future.conditions[[length(...future.conditions) + 
[13:23:47.108]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:23:47.108]                   if (TRUE && !signal) {
[13:23:47.108]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:23:47.108]                     {
[13:23:47.108]                       inherits <- base::inherits
[13:23:47.108]                       invokeRestart <- base::invokeRestart
[13:23:47.108]                       is.null <- base::is.null
[13:23:47.108]                       muffled <- FALSE
[13:23:47.108]                       if (inherits(cond, "message")) {
[13:23:47.108]                         muffled <- grepl(pattern, "muffleMessage")
[13:23:47.108]                         if (muffled) 
[13:23:47.108]                           invokeRestart("muffleMessage")
[13:23:47.108]                       }
[13:23:47.108]                       else if (inherits(cond, "warning")) {
[13:23:47.108]                         muffled <- grepl(pattern, "muffleWarning")
[13:23:47.108]                         if (muffled) 
[13:23:47.108]                           invokeRestart("muffleWarning")
[13:23:47.108]                       }
[13:23:47.108]                       else if (inherits(cond, "condition")) {
[13:23:47.108]                         if (!is.null(pattern)) {
[13:23:47.108]                           computeRestarts <- base::computeRestarts
[13:23:47.108]                           grepl <- base::grepl
[13:23:47.108]                           restarts <- computeRestarts(cond)
[13:23:47.108]                           for (restart in restarts) {
[13:23:47.108]                             name <- restart$name
[13:23:47.108]                             if (is.null(name)) 
[13:23:47.108]                               next
[13:23:47.108]                             if (!grepl(pattern, name)) 
[13:23:47.108]                               next
[13:23:47.108]                             invokeRestart(restart)
[13:23:47.108]                             muffled <- TRUE
[13:23:47.108]                             break
[13:23:47.108]                           }
[13:23:47.108]                         }
[13:23:47.108]                       }
[13:23:47.108]                       invisible(muffled)
[13:23:47.108]                     }
[13:23:47.108]                     muffleCondition(cond, pattern = "^muffle")
[13:23:47.108]                   }
[13:23:47.108]                 }
[13:23:47.108]                 else {
[13:23:47.108]                   if (TRUE) {
[13:23:47.108]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:23:47.108]                     {
[13:23:47.108]                       inherits <- base::inherits
[13:23:47.108]                       invokeRestart <- base::invokeRestart
[13:23:47.108]                       is.null <- base::is.null
[13:23:47.108]                       muffled <- FALSE
[13:23:47.108]                       if (inherits(cond, "message")) {
[13:23:47.108]                         muffled <- grepl(pattern, "muffleMessage")
[13:23:47.108]                         if (muffled) 
[13:23:47.108]                           invokeRestart("muffleMessage")
[13:23:47.108]                       }
[13:23:47.108]                       else if (inherits(cond, "warning")) {
[13:23:47.108]                         muffled <- grepl(pattern, "muffleWarning")
[13:23:47.108]                         if (muffled) 
[13:23:47.108]                           invokeRestart("muffleWarning")
[13:23:47.108]                       }
[13:23:47.108]                       else if (inherits(cond, "condition")) {
[13:23:47.108]                         if (!is.null(pattern)) {
[13:23:47.108]                           computeRestarts <- base::computeRestarts
[13:23:47.108]                           grepl <- base::grepl
[13:23:47.108]                           restarts <- computeRestarts(cond)
[13:23:47.108]                           for (restart in restarts) {
[13:23:47.108]                             name <- restart$name
[13:23:47.108]                             if (is.null(name)) 
[13:23:47.108]                               next
[13:23:47.108]                             if (!grepl(pattern, name)) 
[13:23:47.108]                               next
[13:23:47.108]                             invokeRestart(restart)
[13:23:47.108]                             muffled <- TRUE
[13:23:47.108]                             break
[13:23:47.108]                           }
[13:23:47.108]                         }
[13:23:47.108]                       }
[13:23:47.108]                       invisible(muffled)
[13:23:47.108]                     }
[13:23:47.108]                     muffleCondition(cond, pattern = "^muffle")
[13:23:47.108]                   }
[13:23:47.108]                 }
[13:23:47.108]             }
[13:23:47.108]         }))
[13:23:47.108]     }, error = function(ex) {
[13:23:47.108]         base::structure(base::list(value = NULL, visible = NULL, 
[13:23:47.108]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:23:47.108]                 ...future.rng), started = ...future.startTime, 
[13:23:47.108]             finished = Sys.time(), session_uuid = NA_character_, 
[13:23:47.108]             version = "1.8"), class = "FutureResult")
[13:23:47.108]     }, finally = {
[13:23:47.108]         if (!identical(...future.workdir, getwd())) 
[13:23:47.108]             setwd(...future.workdir)
[13:23:47.108]         {
[13:23:47.108]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:23:47.108]                 ...future.oldOptions$nwarnings <- NULL
[13:23:47.108]             }
[13:23:47.108]             base::options(...future.oldOptions)
[13:23:47.108]             if (.Platform$OS.type == "windows") {
[13:23:47.108]                 old_names <- names(...future.oldEnvVars)
[13:23:47.108]                 envs <- base::Sys.getenv()
[13:23:47.108]                 names <- names(envs)
[13:23:47.108]                 common <- intersect(names, old_names)
[13:23:47.108]                 added <- setdiff(names, old_names)
[13:23:47.108]                 removed <- setdiff(old_names, names)
[13:23:47.108]                 changed <- common[...future.oldEnvVars[common] != 
[13:23:47.108]                   envs[common]]
[13:23:47.108]                 NAMES <- toupper(changed)
[13:23:47.108]                 args <- list()
[13:23:47.108]                 for (kk in seq_along(NAMES)) {
[13:23:47.108]                   name <- changed[[kk]]
[13:23:47.108]                   NAME <- NAMES[[kk]]
[13:23:47.108]                   if (name != NAME && is.element(NAME, old_names)) 
[13:23:47.108]                     next
[13:23:47.108]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:23:47.108]                 }
[13:23:47.108]                 NAMES <- toupper(added)
[13:23:47.108]                 for (kk in seq_along(NAMES)) {
[13:23:47.108]                   name <- added[[kk]]
[13:23:47.108]                   NAME <- NAMES[[kk]]
[13:23:47.108]                   if (name != NAME && is.element(NAME, old_names)) 
[13:23:47.108]                     next
[13:23:47.108]                   args[[name]] <- ""
[13:23:47.108]                 }
[13:23:47.108]                 NAMES <- toupper(removed)
[13:23:47.108]                 for (kk in seq_along(NAMES)) {
[13:23:47.108]                   name <- removed[[kk]]
[13:23:47.108]                   NAME <- NAMES[[kk]]
[13:23:47.108]                   if (name != NAME && is.element(NAME, old_names)) 
[13:23:47.108]                     next
[13:23:47.108]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:23:47.108]                 }
[13:23:47.108]                 if (length(args) > 0) 
[13:23:47.108]                   base::do.call(base::Sys.setenv, args = args)
[13:23:47.108]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:23:47.108]             }
[13:23:47.108]             else {
[13:23:47.108]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:23:47.108]             }
[13:23:47.108]             {
[13:23:47.108]                 if (base::length(...future.futureOptionsAdded) > 
[13:23:47.108]                   0L) {
[13:23:47.108]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:23:47.108]                   base::names(opts) <- ...future.futureOptionsAdded
[13:23:47.108]                   base::options(opts)
[13:23:47.108]                 }
[13:23:47.108]                 {
[13:23:47.108]                   {
[13:23:47.108]                     base::options(mc.cores = ...future.mc.cores.old)
[13:23:47.108]                     NULL
[13:23:47.108]                   }
[13:23:47.108]                   options(future.plan = NULL)
[13:23:47.108]                   if (is.na(NA_character_)) 
[13:23:47.108]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:23:47.108]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:23:47.108]                   future::plan(list(function (..., envir = parent.frame()) 
[13:23:47.108]                   {
[13:23:47.108]                     future <- SequentialFuture(..., envir = envir)
[13:23:47.108]                     if (!future$lazy) 
[13:23:47.108]                       future <- run(future)
[13:23:47.108]                     invisible(future)
[13:23:47.108]                   }), .cleanup = FALSE, .init = FALSE)
[13:23:47.108]                 }
[13:23:47.108]             }
[13:23:47.108]         }
[13:23:47.108]     })
[13:23:47.108]     if (TRUE) {
[13:23:47.108]         base::sink(type = "output", split = FALSE)
[13:23:47.108]         if (TRUE) {
[13:23:47.108]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:23:47.108]         }
[13:23:47.108]         else {
[13:23:47.108]             ...future.result["stdout"] <- base::list(NULL)
[13:23:47.108]         }
[13:23:47.108]         base::close(...future.stdout)
[13:23:47.108]         ...future.stdout <- NULL
[13:23:47.108]     }
[13:23:47.108]     ...future.result$conditions <- ...future.conditions
[13:23:47.108]     ...future.result$finished <- base::Sys.time()
[13:23:47.108]     ...future.result
[13:23:47.108] }
[13:23:47.164] MultisessionFuture started
MultisessionFuture:
Label: ‘<none>’
Expression:
{
    42L
}
Lazy evaluation: FALSE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: FALSE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: c1010526-43cf-67f3-5528-f283513a2221
Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[1] FALSE
[13:23:47.187] result() for ClusterFuture ...
[13:23:47.188] receiveMessageFromWorker() for ClusterFuture ...
[13:23:47.189] - Validating connection of MultisessionFuture
[13:23:47.200] - received message: FutureResult
[13:23:47.201] - Received FutureResult
[13:23:47.204] - Erased future from FutureRegistry
[13:23:47.204] result() for ClusterFuture ...
[13:23:47.204] - result already collected: FutureResult
[13:23:47.204] result() for ClusterFuture ... done
[13:23:47.204] receiveMessageFromWorker() for ClusterFuture ... done
[13:23:47.205] result() for ClusterFuture ... done
[13:23:47.205] result() for ClusterFuture ...
[13:23:47.205] - result already collected: FutureResult
[13:23:47.205] result() for ClusterFuture ... done
[1] 42
[13:23:47.209] getGlobalsAndPackages() ...
[13:23:47.209] Searching for globals...
[13:23:47.211] - globals found: [4] ‘{’, ‘<-’, ‘*’, ‘a’
[13:23:47.212] Searching for globals ... DONE
[13:23:47.212] Resolving globals: FALSE
[13:23:47.212] The total size of the 1 globals is 56 bytes (56 bytes)
[13:23:47.213] The total size of the 1 globals exported for future expression (‘{; b <- 3; c <- 2; a * b * c; }’) is 56 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘a’ (56 bytes of class ‘numeric’)
[13:23:47.213] - globals: [1] ‘a’
[13:23:47.213] 
[13:23:47.213] getGlobalsAndPackages() ... DONE
[13:23:47.224] Packages needed by the future expression (n = 0): <none>
[13:23:47.225] Packages needed by future strategies (n = 0): <none>
[13:23:47.225] {
[13:23:47.225]     {
[13:23:47.225]         {
[13:23:47.225]             ...future.startTime <- base::Sys.time()
[13:23:47.225]             {
[13:23:47.225]                 {
[13:23:47.225]                   {
[13:23:47.225]                     {
[13:23:47.225]                       base::local({
[13:23:47.225]                         has_future <- base::requireNamespace("future", 
[13:23:47.225]                           quietly = TRUE)
[13:23:47.225]                         if (has_future) {
[13:23:47.225]                           ns <- base::getNamespace("future")
[13:23:47.225]                           version <- ns[[".package"]][["version"]]
[13:23:47.225]                           if (is.null(version)) 
[13:23:47.225]                             version <- utils::packageVersion("future")
[13:23:47.225]                         }
[13:23:47.225]                         else {
[13:23:47.225]                           version <- NULL
[13:23:47.225]                         }
[13:23:47.225]                         if (!has_future || version < "1.8.0") {
[13:23:47.225]                           info <- base::c(r_version = base::gsub("R version ", 
[13:23:47.225]                             "", base::R.version$version.string), 
[13:23:47.225]                             platform = base::sprintf("%s (%s-bit)", 
[13:23:47.225]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:23:47.225]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:23:47.225]                               "release", "version")], collapse = " "), 
[13:23:47.225]                             hostname = base::Sys.info()[["nodename"]])
[13:23:47.225]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:23:47.225]                             info)
[13:23:47.225]                           info <- base::paste(info, collapse = "; ")
[13:23:47.225]                           if (!has_future) {
[13:23:47.225]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:23:47.225]                               info)
[13:23:47.225]                           }
[13:23:47.225]                           else {
[13:23:47.225]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:23:47.225]                               info, version)
[13:23:47.225]                           }
[13:23:47.225]                           base::stop(msg)
[13:23:47.225]                         }
[13:23:47.225]                       })
[13:23:47.225]                     }
[13:23:47.225]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[13:23:47.225]                     base::options(mc.cores = 1L)
[13:23:47.225]                   }
[13:23:47.225]                   options(future.plan = NULL)
[13:23:47.225]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:23:47.225]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:23:47.225]                 }
[13:23:47.225]                 ...future.workdir <- getwd()
[13:23:47.225]             }
[13:23:47.225]             ...future.oldOptions <- base::as.list(base::.Options)
[13:23:47.225]             ...future.oldEnvVars <- base::Sys.getenv()
[13:23:47.225]         }
[13:23:47.225]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:23:47.225]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:23:47.225]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:23:47.225]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:23:47.225]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:23:47.225]             future.stdout.windows.reencode = NULL, width = 80L)
[13:23:47.225]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:23:47.225]             base::names(...future.oldOptions))
[13:23:47.225]     }
[13:23:47.225]     if (FALSE) {
[13:23:47.225]     }
[13:23:47.225]     else {
[13:23:47.225]         if (TRUE) {
[13:23:47.225]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:23:47.225]                 open = "w")
[13:23:47.225]         }
[13:23:47.225]         else {
[13:23:47.225]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:23:47.225]                 windows = "NUL", "/dev/null"), open = "w")
[13:23:47.225]         }
[13:23:47.225]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:23:47.225]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:23:47.225]             base::sink(type = "output", split = FALSE)
[13:23:47.225]             base::close(...future.stdout)
[13:23:47.225]         }, add = TRUE)
[13:23:47.225]     }
[13:23:47.225]     ...future.frame <- base::sys.nframe()
[13:23:47.225]     ...future.conditions <- base::list()
[13:23:47.225]     ...future.rng <- base::globalenv()$.Random.seed
[13:23:47.225]     if (FALSE) {
[13:23:47.225]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:23:47.225]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:23:47.225]     }
[13:23:47.225]     ...future.result <- base::tryCatch({
[13:23:47.225]         base::withCallingHandlers({
[13:23:47.225]             ...future.value <- base::withVisible(base::local({
[13:23:47.225]                 ...future.makeSendCondition <- base::local({
[13:23:47.225]                   sendCondition <- NULL
[13:23:47.225]                   function(frame = 1L) {
[13:23:47.225]                     if (is.function(sendCondition)) 
[13:23:47.225]                       return(sendCondition)
[13:23:47.225]                     ns <- getNamespace("parallel")
[13:23:47.225]                     if (exists("sendData", mode = "function", 
[13:23:47.225]                       envir = ns)) {
[13:23:47.225]                       parallel_sendData <- get("sendData", mode = "function", 
[13:23:47.225]                         envir = ns)
[13:23:47.225]                       envir <- sys.frame(frame)
[13:23:47.225]                       master <- NULL
[13:23:47.225]                       while (!identical(envir, .GlobalEnv) && 
[13:23:47.225]                         !identical(envir, emptyenv())) {
[13:23:47.225]                         if (exists("master", mode = "list", envir = envir, 
[13:23:47.225]                           inherits = FALSE)) {
[13:23:47.225]                           master <- get("master", mode = "list", 
[13:23:47.225]                             envir = envir, inherits = FALSE)
[13:23:47.225]                           if (inherits(master, c("SOCKnode", 
[13:23:47.225]                             "SOCK0node"))) {
[13:23:47.225]                             sendCondition <<- function(cond) {
[13:23:47.225]                               data <- list(type = "VALUE", value = cond, 
[13:23:47.225]                                 success = TRUE)
[13:23:47.225]                               parallel_sendData(master, data)
[13:23:47.225]                             }
[13:23:47.225]                             return(sendCondition)
[13:23:47.225]                           }
[13:23:47.225]                         }
[13:23:47.225]                         frame <- frame + 1L
[13:23:47.225]                         envir <- sys.frame(frame)
[13:23:47.225]                       }
[13:23:47.225]                     }
[13:23:47.225]                     sendCondition <<- function(cond) NULL
[13:23:47.225]                   }
[13:23:47.225]                 })
[13:23:47.225]                 withCallingHandlers({
[13:23:47.225]                   {
[13:23:47.225]                     b <- 3
[13:23:47.225]                     c <- 2
[13:23:47.225]                     a * b * c
[13:23:47.225]                   }
[13:23:47.225]                 }, immediateCondition = function(cond) {
[13:23:47.225]                   sendCondition <- ...future.makeSendCondition()
[13:23:47.225]                   sendCondition(cond)
[13:23:47.225]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:23:47.225]                   {
[13:23:47.225]                     inherits <- base::inherits
[13:23:47.225]                     invokeRestart <- base::invokeRestart
[13:23:47.225]                     is.null <- base::is.null
[13:23:47.225]                     muffled <- FALSE
[13:23:47.225]                     if (inherits(cond, "message")) {
[13:23:47.225]                       muffled <- grepl(pattern, "muffleMessage")
[13:23:47.225]                       if (muffled) 
[13:23:47.225]                         invokeRestart("muffleMessage")
[13:23:47.225]                     }
[13:23:47.225]                     else if (inherits(cond, "warning")) {
[13:23:47.225]                       muffled <- grepl(pattern, "muffleWarning")
[13:23:47.225]                       if (muffled) 
[13:23:47.225]                         invokeRestart("muffleWarning")
[13:23:47.225]                     }
[13:23:47.225]                     else if (inherits(cond, "condition")) {
[13:23:47.225]                       if (!is.null(pattern)) {
[13:23:47.225]                         computeRestarts <- base::computeRestarts
[13:23:47.225]                         grepl <- base::grepl
[13:23:47.225]                         restarts <- computeRestarts(cond)
[13:23:47.225]                         for (restart in restarts) {
[13:23:47.225]                           name <- restart$name
[13:23:47.225]                           if (is.null(name)) 
[13:23:47.225]                             next
[13:23:47.225]                           if (!grepl(pattern, name)) 
[13:23:47.225]                             next
[13:23:47.225]                           invokeRestart(restart)
[13:23:47.225]                           muffled <- TRUE
[13:23:47.225]                           break
[13:23:47.225]                         }
[13:23:47.225]                       }
[13:23:47.225]                     }
[13:23:47.225]                     invisible(muffled)
[13:23:47.225]                   }
[13:23:47.225]                   muffleCondition(cond)
[13:23:47.225]                 })
[13:23:47.225]             }))
[13:23:47.225]             future::FutureResult(value = ...future.value$value, 
[13:23:47.225]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:23:47.225]                   ...future.rng), globalenv = if (FALSE) 
[13:23:47.225]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:23:47.225]                     ...future.globalenv.names))
[13:23:47.225]                 else NULL, started = ...future.startTime, version = "1.8")
[13:23:47.225]         }, condition = base::local({
[13:23:47.225]             c <- base::c
[13:23:47.225]             inherits <- base::inherits
[13:23:47.225]             invokeRestart <- base::invokeRestart
[13:23:47.225]             length <- base::length
[13:23:47.225]             list <- base::list
[13:23:47.225]             seq.int <- base::seq.int
[13:23:47.225]             signalCondition <- base::signalCondition
[13:23:47.225]             sys.calls <- base::sys.calls
[13:23:47.225]             `[[` <- base::`[[`
[13:23:47.225]             `+` <- base::`+`
[13:23:47.225]             `<<-` <- base::`<<-`
[13:23:47.225]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:23:47.225]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:23:47.225]                   3L)]
[13:23:47.225]             }
[13:23:47.225]             function(cond) {
[13:23:47.225]                 is_error <- inherits(cond, "error")
[13:23:47.225]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:23:47.225]                   NULL)
[13:23:47.225]                 if (is_error) {
[13:23:47.225]                   sessionInformation <- function() {
[13:23:47.225]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:23:47.225]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:23:47.225]                       search = base::search(), system = base::Sys.info())
[13:23:47.225]                   }
[13:23:47.225]                   ...future.conditions[[length(...future.conditions) + 
[13:23:47.225]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:23:47.225]                     cond$call), session = sessionInformation(), 
[13:23:47.225]                     timestamp = base::Sys.time(), signaled = 0L)
[13:23:47.225]                   signalCondition(cond)
[13:23:47.225]                 }
[13:23:47.225]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:23:47.225]                 "immediateCondition"))) {
[13:23:47.225]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:23:47.225]                   ...future.conditions[[length(...future.conditions) + 
[13:23:47.225]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:23:47.225]                   if (TRUE && !signal) {
[13:23:47.225]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:23:47.225]                     {
[13:23:47.225]                       inherits <- base::inherits
[13:23:47.225]                       invokeRestart <- base::invokeRestart
[13:23:47.225]                       is.null <- base::is.null
[13:23:47.225]                       muffled <- FALSE
[13:23:47.225]                       if (inherits(cond, "message")) {
[13:23:47.225]                         muffled <- grepl(pattern, "muffleMessage")
[13:23:47.225]                         if (muffled) 
[13:23:47.225]                           invokeRestart("muffleMessage")
[13:23:47.225]                       }
[13:23:47.225]                       else if (inherits(cond, "warning")) {
[13:23:47.225]                         muffled <- grepl(pattern, "muffleWarning")
[13:23:47.225]                         if (muffled) 
[13:23:47.225]                           invokeRestart("muffleWarning")
[13:23:47.225]                       }
[13:23:47.225]                       else if (inherits(cond, "condition")) {
[13:23:47.225]                         if (!is.null(pattern)) {
[13:23:47.225]                           computeRestarts <- base::computeRestarts
[13:23:47.225]                           grepl <- base::grepl
[13:23:47.225]                           restarts <- computeRestarts(cond)
[13:23:47.225]                           for (restart in restarts) {
[13:23:47.225]                             name <- restart$name
[13:23:47.225]                             if (is.null(name)) 
[13:23:47.225]                               next
[13:23:47.225]                             if (!grepl(pattern, name)) 
[13:23:47.225]                               next
[13:23:47.225]                             invokeRestart(restart)
[13:23:47.225]                             muffled <- TRUE
[13:23:47.225]                             break
[13:23:47.225]                           }
[13:23:47.225]                         }
[13:23:47.225]                       }
[13:23:47.225]                       invisible(muffled)
[13:23:47.225]                     }
[13:23:47.225]                     muffleCondition(cond, pattern = "^muffle")
[13:23:47.225]                   }
[13:23:47.225]                 }
[13:23:47.225]                 else {
[13:23:47.225]                   if (TRUE) {
[13:23:47.225]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:23:47.225]                     {
[13:23:47.225]                       inherits <- base::inherits
[13:23:47.225]                       invokeRestart <- base::invokeRestart
[13:23:47.225]                       is.null <- base::is.null
[13:23:47.225]                       muffled <- FALSE
[13:23:47.225]                       if (inherits(cond, "message")) {
[13:23:47.225]                         muffled <- grepl(pattern, "muffleMessage")
[13:23:47.225]                         if (muffled) 
[13:23:47.225]                           invokeRestart("muffleMessage")
[13:23:47.225]                       }
[13:23:47.225]                       else if (inherits(cond, "warning")) {
[13:23:47.225]                         muffled <- grepl(pattern, "muffleWarning")
[13:23:47.225]                         if (muffled) 
[13:23:47.225]                           invokeRestart("muffleWarning")
[13:23:47.225]                       }
[13:23:47.225]                       else if (inherits(cond, "condition")) {
[13:23:47.225]                         if (!is.null(pattern)) {
[13:23:47.225]                           computeRestarts <- base::computeRestarts
[13:23:47.225]                           grepl <- base::grepl
[13:23:47.225]                           restarts <- computeRestarts(cond)
[13:23:47.225]                           for (restart in restarts) {
[13:23:47.225]                             name <- restart$name
[13:23:47.225]                             if (is.null(name)) 
[13:23:47.225]                               next
[13:23:47.225]                             if (!grepl(pattern, name)) 
[13:23:47.225]                               next
[13:23:47.225]                             invokeRestart(restart)
[13:23:47.225]                             muffled <- TRUE
[13:23:47.225]                             break
[13:23:47.225]                           }
[13:23:47.225]                         }
[13:23:47.225]                       }
[13:23:47.225]                       invisible(muffled)
[13:23:47.225]                     }
[13:23:47.225]                     muffleCondition(cond, pattern = "^muffle")
[13:23:47.225]                   }
[13:23:47.225]                 }
[13:23:47.225]             }
[13:23:47.225]         }))
[13:23:47.225]     }, error = function(ex) {
[13:23:47.225]         base::structure(base::list(value = NULL, visible = NULL, 
[13:23:47.225]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:23:47.225]                 ...future.rng), started = ...future.startTime, 
[13:23:47.225]             finished = Sys.time(), session_uuid = NA_character_, 
[13:23:47.225]             version = "1.8"), class = "FutureResult")
[13:23:47.225]     }, finally = {
[13:23:47.225]         if (!identical(...future.workdir, getwd())) 
[13:23:47.225]             setwd(...future.workdir)
[13:23:47.225]         {
[13:23:47.225]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:23:47.225]                 ...future.oldOptions$nwarnings <- NULL
[13:23:47.225]             }
[13:23:47.225]             base::options(...future.oldOptions)
[13:23:47.225]             if (.Platform$OS.type == "windows") {
[13:23:47.225]                 old_names <- names(...future.oldEnvVars)
[13:23:47.225]                 envs <- base::Sys.getenv()
[13:23:47.225]                 names <- names(envs)
[13:23:47.225]                 common <- intersect(names, old_names)
[13:23:47.225]                 added <- setdiff(names, old_names)
[13:23:47.225]                 removed <- setdiff(old_names, names)
[13:23:47.225]                 changed <- common[...future.oldEnvVars[common] != 
[13:23:47.225]                   envs[common]]
[13:23:47.225]                 NAMES <- toupper(changed)
[13:23:47.225]                 args <- list()
[13:23:47.225]                 for (kk in seq_along(NAMES)) {
[13:23:47.225]                   name <- changed[[kk]]
[13:23:47.225]                   NAME <- NAMES[[kk]]
[13:23:47.225]                   if (name != NAME && is.element(NAME, old_names)) 
[13:23:47.225]                     next
[13:23:47.225]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:23:47.225]                 }
[13:23:47.225]                 NAMES <- toupper(added)
[13:23:47.225]                 for (kk in seq_along(NAMES)) {
[13:23:47.225]                   name <- added[[kk]]
[13:23:47.225]                   NAME <- NAMES[[kk]]
[13:23:47.225]                   if (name != NAME && is.element(NAME, old_names)) 
[13:23:47.225]                     next
[13:23:47.225]                   args[[name]] <- ""
[13:23:47.225]                 }
[13:23:47.225]                 NAMES <- toupper(removed)
[13:23:47.225]                 for (kk in seq_along(NAMES)) {
[13:23:47.225]                   name <- removed[[kk]]
[13:23:47.225]                   NAME <- NAMES[[kk]]
[13:23:47.225]                   if (name != NAME && is.element(NAME, old_names)) 
[13:23:47.225]                     next
[13:23:47.225]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:23:47.225]                 }
[13:23:47.225]                 if (length(args) > 0) 
[13:23:47.225]                   base::do.call(base::Sys.setenv, args = args)
[13:23:47.225]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:23:47.225]             }
[13:23:47.225]             else {
[13:23:47.225]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:23:47.225]             }
[13:23:47.225]             {
[13:23:47.225]                 if (base::length(...future.futureOptionsAdded) > 
[13:23:47.225]                   0L) {
[13:23:47.225]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:23:47.225]                   base::names(opts) <- ...future.futureOptionsAdded
[13:23:47.225]                   base::options(opts)
[13:23:47.225]                 }
[13:23:47.225]                 {
[13:23:47.225]                   {
[13:23:47.225]                     base::options(mc.cores = ...future.mc.cores.old)
[13:23:47.225]                     NULL
[13:23:47.225]                   }
[13:23:47.225]                   options(future.plan = NULL)
[13:23:47.225]                   if (is.na(NA_character_)) 
[13:23:47.225]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:23:47.225]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:23:47.225]                   future::plan(list(function (..., envir = parent.frame()) 
[13:23:47.225]                   {
[13:23:47.225]                     future <- SequentialFuture(..., envir = envir)
[13:23:47.225]                     if (!future$lazy) 
[13:23:47.225]                       future <- run(future)
[13:23:47.225]                     invisible(future)
[13:23:47.225]                   }), .cleanup = FALSE, .init = FALSE)
[13:23:47.225]                 }
[13:23:47.225]             }
[13:23:47.225]         }
[13:23:47.225]     })
[13:23:47.225]     if (TRUE) {
[13:23:47.225]         base::sink(type = "output", split = FALSE)
[13:23:47.225]         if (TRUE) {
[13:23:47.225]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:23:47.225]         }
[13:23:47.225]         else {
[13:23:47.225]             ...future.result["stdout"] <- base::list(NULL)
[13:23:47.225]         }
[13:23:47.225]         base::close(...future.stdout)
[13:23:47.225]         ...future.stdout <- NULL
[13:23:47.225]     }
[13:23:47.225]     ...future.result$conditions <- ...future.conditions
[13:23:47.225]     ...future.result$finished <- base::Sys.time()
[13:23:47.225]     ...future.result
[13:23:47.225] }
[13:23:47.228] Exporting 1 global objects (56 bytes) to cluster node #1 ...
[13:23:47.228] Exporting ‘a’ (56 bytes) to cluster node #1 ...
[13:23:47.229] Exporting ‘a’ (56 bytes) to cluster node #1 ... DONE
[13:23:47.229] Exporting 1 global objects (56 bytes) to cluster node #1 ... DONE
[13:23:47.229] MultisessionFuture started
MultisessionFuture:
Label: ‘<none>’
Expression:
{
    b <- 3
    c <- 2
    a * b * c
}
Lazy evaluation: FALSE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: 1 objects totaling 56 bytes (numeric ‘a’ of 56 bytes)
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[13:23:47.235] receiveMessageFromWorker() for ClusterFuture ...
[13:23:47.235] - Validating connection of MultisessionFuture
[13:23:47.236] - received message: FutureResult
[13:23:47.236] - Received FutureResult
[13:23:47.236] - Erased future from FutureRegistry
[13:23:47.236] result() for ClusterFuture ...
[13:23:47.236] - result already collected: FutureResult
[13:23:47.236] result() for ClusterFuture ... done
[13:23:47.236] receiveMessageFromWorker() for ClusterFuture ... done
Resolved: TRUE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: c1010526-43cf-67f3-5528-f283513a2221
Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:23:47.237] result() for ClusterFuture ...
[13:23:47.237] - result already collected: FutureResult
[13:23:47.237] result() for ClusterFuture ... done
[13:23:47.237] result() for ClusterFuture ...
[13:23:47.237] - result already collected: FutureResult
[13:23:47.237] result() for ClusterFuture ... done
[1] 0
*** multisession() with globals and blocking
 - Creating multisession future #2 ...
[13:23:47.242] getGlobalsAndPackages() ...
[13:23:47.242] Searching for globals...
[13:23:47.243] - globals found: [2] ‘{’, ‘ii’
[13:23:47.243] Searching for globals ... DONE
[13:23:47.243] Resolving globals: FALSE
[13:23:47.243] The total size of the 1 globals is 56 bytes (56 bytes)
[13:23:47.244] The total size of the 1 globals exported for future expression (‘{; ii; }’) is 56 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘ii’ (56 bytes of class ‘numeric’)
[13:23:47.244] - globals: [1] ‘ii’
[13:23:47.244] 
[13:23:47.244] getGlobalsAndPackages() ... DONE
[13:23:47.256] Packages needed by the future expression (n = 0): <none>
[13:23:47.256] Packages needed by future strategies (n = 0): <none>
[13:23:47.256] {
[13:23:47.256]     {
[13:23:47.256]         {
[13:23:47.256]             ...future.startTime <- base::Sys.time()
[13:23:47.256]             {
[13:23:47.256]                 {
[13:23:47.256]                   {
[13:23:47.256]                     {
[13:23:47.256]                       base::local({
[13:23:47.256]                         has_future <- base::requireNamespace("future", 
[13:23:47.256]                           quietly = TRUE)
[13:23:47.256]                         if (has_future) {
[13:23:47.256]                           ns <- base::getNamespace("future")
[13:23:47.256]                           version <- ns[[".package"]][["version"]]
[13:23:47.256]                           if (is.null(version)) 
[13:23:47.256]                             version <- utils::packageVersion("future")
[13:23:47.256]                         }
[13:23:47.256]                         else {
[13:23:47.256]                           version <- NULL
[13:23:47.256]                         }
[13:23:47.256]                         if (!has_future || version < "1.8.0") {
[13:23:47.256]                           info <- base::c(r_version = base::gsub("R version ", 
[13:23:47.256]                             "", base::R.version$version.string), 
[13:23:47.256]                             platform = base::sprintf("%s (%s-bit)", 
[13:23:47.256]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:23:47.256]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:23:47.256]                               "release", "version")], collapse = " "), 
[13:23:47.256]                             hostname = base::Sys.info()[["nodename"]])
[13:23:47.256]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:23:47.256]                             info)
[13:23:47.256]                           info <- base::paste(info, collapse = "; ")
[13:23:47.256]                           if (!has_future) {
[13:23:47.256]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:23:47.256]                               info)
[13:23:47.256]                           }
[13:23:47.256]                           else {
[13:23:47.256]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:23:47.256]                               info, version)
[13:23:47.256]                           }
[13:23:47.256]                           base::stop(msg)
[13:23:47.256]                         }
[13:23:47.256]                       })
[13:23:47.256]                     }
[13:23:47.256]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[13:23:47.256]                     base::options(mc.cores = 1L)
[13:23:47.256]                   }
[13:23:47.256]                   options(future.plan = NULL)
[13:23:47.256]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:23:47.256]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:23:47.256]                 }
[13:23:47.256]                 ...future.workdir <- getwd()
[13:23:47.256]             }
[13:23:47.256]             ...future.oldOptions <- base::as.list(base::.Options)
[13:23:47.256]             ...future.oldEnvVars <- base::Sys.getenv()
[13:23:47.256]         }
[13:23:47.256]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:23:47.256]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:23:47.256]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:23:47.256]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:23:47.256]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:23:47.256]             future.stdout.windows.reencode = NULL, width = 80L)
[13:23:47.256]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:23:47.256]             base::names(...future.oldOptions))
[13:23:47.256]     }
[13:23:47.256]     if (FALSE) {
[13:23:47.256]     }
[13:23:47.256]     else {
[13:23:47.256]         if (TRUE) {
[13:23:47.256]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:23:47.256]                 open = "w")
[13:23:47.256]         }
[13:23:47.256]         else {
[13:23:47.256]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:23:47.256]                 windows = "NUL", "/dev/null"), open = "w")
[13:23:47.256]         }
[13:23:47.256]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:23:47.256]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:23:47.256]             base::sink(type = "output", split = FALSE)
[13:23:47.256]             base::close(...future.stdout)
[13:23:47.256]         }, add = TRUE)
[13:23:47.256]     }
[13:23:47.256]     ...future.frame <- base::sys.nframe()
[13:23:47.256]     ...future.conditions <- base::list()
[13:23:47.256]     ...future.rng <- base::globalenv()$.Random.seed
[13:23:47.256]     if (FALSE) {
[13:23:47.256]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:23:47.256]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:23:47.256]     }
[13:23:47.256]     ...future.result <- base::tryCatch({
[13:23:47.256]         base::withCallingHandlers({
[13:23:47.256]             ...future.value <- base::withVisible(base::local({
[13:23:47.256]                 ...future.makeSendCondition <- base::local({
[13:23:47.256]                   sendCondition <- NULL
[13:23:47.256]                   function(frame = 1L) {
[13:23:47.256]                     if (is.function(sendCondition)) 
[13:23:47.256]                       return(sendCondition)
[13:23:47.256]                     ns <- getNamespace("parallel")
[13:23:47.256]                     if (exists("sendData", mode = "function", 
[13:23:47.256]                       envir = ns)) {
[13:23:47.256]                       parallel_sendData <- get("sendData", mode = "function", 
[13:23:47.256]                         envir = ns)
[13:23:47.256]                       envir <- sys.frame(frame)
[13:23:47.256]                       master <- NULL
[13:23:47.256]                       while (!identical(envir, .GlobalEnv) && 
[13:23:47.256]                         !identical(envir, emptyenv())) {
[13:23:47.256]                         if (exists("master", mode = "list", envir = envir, 
[13:23:47.256]                           inherits = FALSE)) {
[13:23:47.256]                           master <- get("master", mode = "list", 
[13:23:47.256]                             envir = envir, inherits = FALSE)
[13:23:47.256]                           if (inherits(master, c("SOCKnode", 
[13:23:47.256]                             "SOCK0node"))) {
[13:23:47.256]                             sendCondition <<- function(cond) {
[13:23:47.256]                               data <- list(type = "VALUE", value = cond, 
[13:23:47.256]                                 success = TRUE)
[13:23:47.256]                               parallel_sendData(master, data)
[13:23:47.256]                             }
[13:23:47.256]                             return(sendCondition)
[13:23:47.256]                           }
[13:23:47.256]                         }
[13:23:47.256]                         frame <- frame + 1L
[13:23:47.256]                         envir <- sys.frame(frame)
[13:23:47.256]                       }
[13:23:47.256]                     }
[13:23:47.256]                     sendCondition <<- function(cond) NULL
[13:23:47.256]                   }
[13:23:47.256]                 })
[13:23:47.256]                 withCallingHandlers({
[13:23:47.256]                   {
[13:23:47.256]                     ii
[13:23:47.256]                   }
[13:23:47.256]                 }, immediateCondition = function(cond) {
[13:23:47.256]                   sendCondition <- ...future.makeSendCondition()
[13:23:47.256]                   sendCondition(cond)
[13:23:47.256]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:23:47.256]                   {
[13:23:47.256]                     inherits <- base::inherits
[13:23:47.256]                     invokeRestart <- base::invokeRestart
[13:23:47.256]                     is.null <- base::is.null
[13:23:47.256]                     muffled <- FALSE
[13:23:47.256]                     if (inherits(cond, "message")) {
[13:23:47.256]                       muffled <- grepl(pattern, "muffleMessage")
[13:23:47.256]                       if (muffled) 
[13:23:47.256]                         invokeRestart("muffleMessage")
[13:23:47.256]                     }
[13:23:47.256]                     else if (inherits(cond, "warning")) {
[13:23:47.256]                       muffled <- grepl(pattern, "muffleWarning")
[13:23:47.256]                       if (muffled) 
[13:23:47.256]                         invokeRestart("muffleWarning")
[13:23:47.256]                     }
[13:23:47.256]                     else if (inherits(cond, "condition")) {
[13:23:47.256]                       if (!is.null(pattern)) {
[13:23:47.256]                         computeRestarts <- base::computeRestarts
[13:23:47.256]                         grepl <- base::grepl
[13:23:47.256]                         restarts <- computeRestarts(cond)
[13:23:47.256]                         for (restart in restarts) {
[13:23:47.256]                           name <- restart$name
[13:23:47.256]                           if (is.null(name)) 
[13:23:47.256]                             next
[13:23:47.256]                           if (!grepl(pattern, name)) 
[13:23:47.256]                             next
[13:23:47.256]                           invokeRestart(restart)
[13:23:47.256]                           muffled <- TRUE
[13:23:47.256]                           break
[13:23:47.256]                         }
[13:23:47.256]                       }
[13:23:47.256]                     }
[13:23:47.256]                     invisible(muffled)
[13:23:47.256]                   }
[13:23:47.256]                   muffleCondition(cond)
[13:23:47.256]                 })
[13:23:47.256]             }))
[13:23:47.256]             future::FutureResult(value = ...future.value$value, 
[13:23:47.256]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:23:47.256]                   ...future.rng), globalenv = if (FALSE) 
[13:23:47.256]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:23:47.256]                     ...future.globalenv.names))
[13:23:47.256]                 else NULL, started = ...future.startTime, version = "1.8")
[13:23:47.256]         }, condition = base::local({
[13:23:47.256]             c <- base::c
[13:23:47.256]             inherits <- base::inherits
[13:23:47.256]             invokeRestart <- base::invokeRestart
[13:23:47.256]             length <- base::length
[13:23:47.256]             list <- base::list
[13:23:47.256]             seq.int <- base::seq.int
[13:23:47.256]             signalCondition <- base::signalCondition
[13:23:47.256]             sys.calls <- base::sys.calls
[13:23:47.256]             `[[` <- base::`[[`
[13:23:47.256]             `+` <- base::`+`
[13:23:47.256]             `<<-` <- base::`<<-`
[13:23:47.256]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:23:47.256]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:23:47.256]                   3L)]
[13:23:47.256]             }
[13:23:47.256]             function(cond) {
[13:23:47.256]                 is_error <- inherits(cond, "error")
[13:23:47.256]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:23:47.256]                   NULL)
[13:23:47.256]                 if (is_error) {
[13:23:47.256]                   sessionInformation <- function() {
[13:23:47.256]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:23:47.256]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:23:47.256]                       search = base::search(), system = base::Sys.info())
[13:23:47.256]                   }
[13:23:47.256]                   ...future.conditions[[length(...future.conditions) + 
[13:23:47.256]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:23:47.256]                     cond$call), session = sessionInformation(), 
[13:23:47.256]                     timestamp = base::Sys.time(), signaled = 0L)
[13:23:47.256]                   signalCondition(cond)
[13:23:47.256]                 }
[13:23:47.256]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:23:47.256]                 "immediateCondition"))) {
[13:23:47.256]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:23:47.256]                   ...future.conditions[[length(...future.conditions) + 
[13:23:47.256]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:23:47.256]                   if (TRUE && !signal) {
[13:23:47.256]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:23:47.256]                     {
[13:23:47.256]                       inherits <- base::inherits
[13:23:47.256]                       invokeRestart <- base::invokeRestart
[13:23:47.256]                       is.null <- base::is.null
[13:23:47.256]                       muffled <- FALSE
[13:23:47.256]                       if (inherits(cond, "message")) {
[13:23:47.256]                         muffled <- grepl(pattern, "muffleMessage")
[13:23:47.256]                         if (muffled) 
[13:23:47.256]                           invokeRestart("muffleMessage")
[13:23:47.256]                       }
[13:23:47.256]                       else if (inherits(cond, "warning")) {
[13:23:47.256]                         muffled <- grepl(pattern, "muffleWarning")
[13:23:47.256]                         if (muffled) 
[13:23:47.256]                           invokeRestart("muffleWarning")
[13:23:47.256]                       }
[13:23:47.256]                       else if (inherits(cond, "condition")) {
[13:23:47.256]                         if (!is.null(pattern)) {
[13:23:47.256]                           computeRestarts <- base::computeRestarts
[13:23:47.256]                           grepl <- base::grepl
[13:23:47.256]                           restarts <- computeRestarts(cond)
[13:23:47.256]                           for (restart in restarts) {
[13:23:47.256]                             name <- restart$name
[13:23:47.256]                             if (is.null(name)) 
[13:23:47.256]                               next
[13:23:47.256]                             if (!grepl(pattern, name)) 
[13:23:47.256]                               next
[13:23:47.256]                             invokeRestart(restart)
[13:23:47.256]                             muffled <- TRUE
[13:23:47.256]                             break
[13:23:47.256]                           }
[13:23:47.256]                         }
[13:23:47.256]                       }
[13:23:47.256]                       invisible(muffled)
[13:23:47.256]                     }
[13:23:47.256]                     muffleCondition(cond, pattern = "^muffle")
[13:23:47.256]                   }
[13:23:47.256]                 }
[13:23:47.256]                 else {
[13:23:47.256]                   if (TRUE) {
[13:23:47.256]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:23:47.256]                     {
[13:23:47.256]                       inherits <- base::inherits
[13:23:47.256]                       invokeRestart <- base::invokeRestart
[13:23:47.256]                       is.null <- base::is.null
[13:23:47.256]                       muffled <- FALSE
[13:23:47.256]                       if (inherits(cond, "message")) {
[13:23:47.256]                         muffled <- grepl(pattern, "muffleMessage")
[13:23:47.256]                         if (muffled) 
[13:23:47.256]                           invokeRestart("muffleMessage")
[13:23:47.256]                       }
[13:23:47.256]                       else if (inherits(cond, "warning")) {
[13:23:47.256]                         muffled <- grepl(pattern, "muffleWarning")
[13:23:47.256]                         if (muffled) 
[13:23:47.256]                           invokeRestart("muffleWarning")
[13:23:47.256]                       }
[13:23:47.256]                       else if (inherits(cond, "condition")) {
[13:23:47.256]                         if (!is.null(pattern)) {
[13:23:47.256]                           computeRestarts <- base::computeRestarts
[13:23:47.256]                           grepl <- base::grepl
[13:23:47.256]                           restarts <- computeRestarts(cond)
[13:23:47.256]                           for (restart in restarts) {
[13:23:47.256]                             name <- restart$name
[13:23:47.256]                             if (is.null(name)) 
[13:23:47.256]                               next
[13:23:47.256]                             if (!grepl(pattern, name)) 
[13:23:47.256]                               next
[13:23:47.256]                             invokeRestart(restart)
[13:23:47.256]                             muffled <- TRUE
[13:23:47.256]                             break
[13:23:47.256]                           }
[13:23:47.256]                         }
[13:23:47.256]                       }
[13:23:47.256]                       invisible(muffled)
[13:23:47.256]                     }
[13:23:47.256]                     muffleCondition(cond, pattern = "^muffle")
[13:23:47.256]                   }
[13:23:47.256]                 }
[13:23:47.256]             }
[13:23:47.256]         }))
[13:23:47.256]     }, error = function(ex) {
[13:23:47.256]         base::structure(base::list(value = NULL, visible = NULL, 
[13:23:47.256]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:23:47.256]                 ...future.rng), started = ...future.startTime, 
[13:23:47.256]             finished = Sys.time(), session_uuid = NA_character_, 
[13:23:47.256]             version = "1.8"), class = "FutureResult")
[13:23:47.256]     }, finally = {
[13:23:47.256]         if (!identical(...future.workdir, getwd())) 
[13:23:47.256]             setwd(...future.workdir)
[13:23:47.256]         {
[13:23:47.256]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:23:47.256]                 ...future.oldOptions$nwarnings <- NULL
[13:23:47.256]             }
[13:23:47.256]             base::options(...future.oldOptions)
[13:23:47.256]             if (.Platform$OS.type == "windows") {
[13:23:47.256]                 old_names <- names(...future.oldEnvVars)
[13:23:47.256]                 envs <- base::Sys.getenv()
[13:23:47.256]                 names <- names(envs)
[13:23:47.256]                 common <- intersect(names, old_names)
[13:23:47.256]                 added <- setdiff(names, old_names)
[13:23:47.256]                 removed <- setdiff(old_names, names)
[13:23:47.256]                 changed <- common[...future.oldEnvVars[common] != 
[13:23:47.256]                   envs[common]]
[13:23:47.256]                 NAMES <- toupper(changed)
[13:23:47.256]                 args <- list()
[13:23:47.256]                 for (kk in seq_along(NAMES)) {
[13:23:47.256]                   name <- changed[[kk]]
[13:23:47.256]                   NAME <- NAMES[[kk]]
[13:23:47.256]                   if (name != NAME && is.element(NAME, old_names)) 
[13:23:47.256]                     next
[13:23:47.256]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:23:47.256]                 }
[13:23:47.256]                 NAMES <- toupper(added)
[13:23:47.256]                 for (kk in seq_along(NAMES)) {
[13:23:47.256]                   name <- added[[kk]]
[13:23:47.256]                   NAME <- NAMES[[kk]]
[13:23:47.256]                   if (name != NAME && is.element(NAME, old_names)) 
[13:23:47.256]                     next
[13:23:47.256]                   args[[name]] <- ""
[13:23:47.256]                 }
[13:23:47.256]                 NAMES <- toupper(removed)
[13:23:47.256]                 for (kk in seq_along(NAMES)) {
[13:23:47.256]                   name <- removed[[kk]]
[13:23:47.256]                   NAME <- NAMES[[kk]]
[13:23:47.256]                   if (name != NAME && is.element(NAME, old_names)) 
[13:23:47.256]                     next
[13:23:47.256]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:23:47.256]                 }
[13:23:47.256]                 if (length(args) > 0) 
[13:23:47.256]                   base::do.call(base::Sys.setenv, args = args)
[13:23:47.256]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:23:47.256]             }
[13:23:47.256]             else {
[13:23:47.256]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:23:47.256]             }
[13:23:47.256]             {
[13:23:47.256]                 if (base::length(...future.futureOptionsAdded) > 
[13:23:47.256]                   0L) {
[13:23:47.256]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:23:47.256]                   base::names(opts) <- ...future.futureOptionsAdded
[13:23:47.256]                   base::options(opts)
[13:23:47.256]                 }
[13:23:47.256]                 {
[13:23:47.256]                   {
[13:23:47.256]                     base::options(mc.cores = ...future.mc.cores.old)
[13:23:47.256]                     NULL
[13:23:47.256]                   }
[13:23:47.256]                   options(future.plan = NULL)
[13:23:47.256]                   if (is.na(NA_character_)) 
[13:23:47.256]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:23:47.256]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:23:47.256]                   future::plan(list(function (..., envir = parent.frame()) 
[13:23:47.256]                   {
[13:23:47.256]                     future <- SequentialFuture(..., envir = envir)
[13:23:47.256]                     if (!future$lazy) 
[13:23:47.256]                       future <- run(future)
[13:23:47.256]                     invisible(future)
[13:23:47.256]                   }), .cleanup = FALSE, .init = FALSE)
[13:23:47.256]                 }
[13:23:47.256]             }
[13:23:47.256]         }
[13:23:47.256]     })
[13:23:47.256]     if (TRUE) {
[13:23:47.256]         base::sink(type = "output", split = FALSE)
[13:23:47.256]         if (TRUE) {
[13:23:47.256]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:23:47.256]         }
[13:23:47.256]         else {
[13:23:47.256]             ...future.result["stdout"] <- base::list(NULL)
[13:23:47.256]         }
[13:23:47.256]         base::close(...future.stdout)
[13:23:47.256]         ...future.stdout <- NULL
[13:23:47.256]     }
[13:23:47.256]     ...future.result$conditions <- ...future.conditions
[13:23:47.256]     ...future.result$finished <- base::Sys.time()
[13:23:47.256]     ...future.result
[13:23:47.256] }
[13:23:47.259] Exporting 1 global objects (56 bytes) to cluster node #1 ...
[13:23:47.260] Exporting ‘ii’ (56 bytes) to cluster node #1 ...
[13:23:47.260] Exporting ‘ii’ (56 bytes) to cluster node #1 ... DONE
[13:23:47.260] Exporting 1 global objects (56 bytes) to cluster node #1 ... DONE
[13:23:47.261] MultisessionFuture started
 - Creating multisession future #1 ...
[13:23:47.265] getGlobalsAndPackages() ...
[13:23:47.265] Searching for globals...
[13:23:47.266] - globals found: [2] ‘{’, ‘ii’
[13:23:47.266] Searching for globals ... DONE
[13:23:47.267] Resolving globals: FALSE
[13:23:47.267] The total size of the 1 globals is 56 bytes (56 bytes)
[13:23:47.267] The total size of the 1 globals exported for future expression (‘{; ii; }’) is 56 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘ii’ (56 bytes of class ‘numeric’)
[13:23:47.268] - globals: [1] ‘ii’
[13:23:47.268] 
[13:23:47.268] getGlobalsAndPackages() ... DONE
[13:23:47.279] Packages needed by the future expression (n = 0): <none>
[13:23:47.279] Packages needed by future strategies (n = 0): <none>
[13:23:47.280] {
[13:23:47.280]     {
[13:23:47.280]         {
[13:23:47.280]             ...future.startTime <- base::Sys.time()
[13:23:47.280]             {
[13:23:47.280]                 {
[13:23:47.280]                   {
[13:23:47.280]                     {
[13:23:47.280]                       base::local({
[13:23:47.280]                         has_future <- base::requireNamespace("future", 
[13:23:47.280]                           quietly = TRUE)
[13:23:47.280]                         if (has_future) {
[13:23:47.280]                           ns <- base::getNamespace("future")
[13:23:47.280]                           version <- ns[[".package"]][["version"]]
[13:23:47.280]                           if (is.null(version)) 
[13:23:47.280]                             version <- utils::packageVersion("future")
[13:23:47.280]                         }
[13:23:47.280]                         else {
[13:23:47.280]                           version <- NULL
[13:23:47.280]                         }
[13:23:47.280]                         if (!has_future || version < "1.8.0") {
[13:23:47.280]                           info <- base::c(r_version = base::gsub("R version ", 
[13:23:47.280]                             "", base::R.version$version.string), 
[13:23:47.280]                             platform = base::sprintf("%s (%s-bit)", 
[13:23:47.280]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:23:47.280]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:23:47.280]                               "release", "version")], collapse = " "), 
[13:23:47.280]                             hostname = base::Sys.info()[["nodename"]])
[13:23:47.280]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:23:47.280]                             info)
[13:23:47.280]                           info <- base::paste(info, collapse = "; ")
[13:23:47.280]                           if (!has_future) {
[13:23:47.280]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:23:47.280]                               info)
[13:23:47.280]                           }
[13:23:47.280]                           else {
[13:23:47.280]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:23:47.280]                               info, version)
[13:23:47.280]                           }
[13:23:47.280]                           base::stop(msg)
[13:23:47.280]                         }
[13:23:47.280]                       })
[13:23:47.280]                     }
[13:23:47.280]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[13:23:47.280]                     base::options(mc.cores = 1L)
[13:23:47.280]                   }
[13:23:47.280]                   options(future.plan = NULL)
[13:23:47.280]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:23:47.280]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:23:47.280]                 }
[13:23:47.280]                 ...future.workdir <- getwd()
[13:23:47.280]             }
[13:23:47.280]             ...future.oldOptions <- base::as.list(base::.Options)
[13:23:47.280]             ...future.oldEnvVars <- base::Sys.getenv()
[13:23:47.280]         }
[13:23:47.280]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:23:47.280]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:23:47.280]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:23:47.280]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:23:47.280]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:23:47.280]             future.stdout.windows.reencode = NULL, width = 80L)
[13:23:47.280]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:23:47.280]             base::names(...future.oldOptions))
[13:23:47.280]     }
[13:23:47.280]     if (FALSE) {
[13:23:47.280]     }
[13:23:47.280]     else {
[13:23:47.280]         if (TRUE) {
[13:23:47.280]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:23:47.280]                 open = "w")
[13:23:47.280]         }
[13:23:47.280]         else {
[13:23:47.280]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:23:47.280]                 windows = "NUL", "/dev/null"), open = "w")
[13:23:47.280]         }
[13:23:47.280]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:23:47.280]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:23:47.280]             base::sink(type = "output", split = FALSE)
[13:23:47.280]             base::close(...future.stdout)
[13:23:47.280]         }, add = TRUE)
[13:23:47.280]     }
[13:23:47.280]     ...future.frame <- base::sys.nframe()
[13:23:47.280]     ...future.conditions <- base::list()
[13:23:47.280]     ...future.rng <- base::globalenv()$.Random.seed
[13:23:47.280]     if (FALSE) {
[13:23:47.280]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:23:47.280]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:23:47.280]     }
[13:23:47.280]     ...future.result <- base::tryCatch({
[13:23:47.280]         base::withCallingHandlers({
[13:23:47.280]             ...future.value <- base::withVisible(base::local({
[13:23:47.280]                 ...future.makeSendCondition <- base::local({
[13:23:47.280]                   sendCondition <- NULL
[13:23:47.280]                   function(frame = 1L) {
[13:23:47.280]                     if (is.function(sendCondition)) 
[13:23:47.280]                       return(sendCondition)
[13:23:47.280]                     ns <- getNamespace("parallel")
[13:23:47.280]                     if (exists("sendData", mode = "function", 
[13:23:47.280]                       envir = ns)) {
[13:23:47.280]                       parallel_sendData <- get("sendData", mode = "function", 
[13:23:47.280]                         envir = ns)
[13:23:47.280]                       envir <- sys.frame(frame)
[13:23:47.280]                       master <- NULL
[13:23:47.280]                       while (!identical(envir, .GlobalEnv) && 
[13:23:47.280]                         !identical(envir, emptyenv())) {
[13:23:47.280]                         if (exists("master", mode = "list", envir = envir, 
[13:23:47.280]                           inherits = FALSE)) {
[13:23:47.280]                           master <- get("master", mode = "list", 
[13:23:47.280]                             envir = envir, inherits = FALSE)
[13:23:47.280]                           if (inherits(master, c("SOCKnode", 
[13:23:47.280]                             "SOCK0node"))) {
[13:23:47.280]                             sendCondition <<- function(cond) {
[13:23:47.280]                               data <- list(type = "VALUE", value = cond, 
[13:23:47.280]                                 success = TRUE)
[13:23:47.280]                               parallel_sendData(master, data)
[13:23:47.280]                             }
[13:23:47.280]                             return(sendCondition)
[13:23:47.280]                           }
[13:23:47.280]                         }
[13:23:47.280]                         frame <- frame + 1L
[13:23:47.280]                         envir <- sys.frame(frame)
[13:23:47.280]                       }
[13:23:47.280]                     }
[13:23:47.280]                     sendCondition <<- function(cond) NULL
[13:23:47.280]                   }
[13:23:47.280]                 })
[13:23:47.280]                 withCallingHandlers({
[13:23:47.280]                   {
[13:23:47.280]                     ii
[13:23:47.280]                   }
[13:23:47.280]                 }, immediateCondition = function(cond) {
[13:23:47.280]                   sendCondition <- ...future.makeSendCondition()
[13:23:47.280]                   sendCondition(cond)
[13:23:47.280]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:23:47.280]                   {
[13:23:47.280]                     inherits <- base::inherits
[13:23:47.280]                     invokeRestart <- base::invokeRestart
[13:23:47.280]                     is.null <- base::is.null
[13:23:47.280]                     muffled <- FALSE
[13:23:47.280]                     if (inherits(cond, "message")) {
[13:23:47.280]                       muffled <- grepl(pattern, "muffleMessage")
[13:23:47.280]                       if (muffled) 
[13:23:47.280]                         invokeRestart("muffleMessage")
[13:23:47.280]                     }
[13:23:47.280]                     else if (inherits(cond, "warning")) {
[13:23:47.280]                       muffled <- grepl(pattern, "muffleWarning")
[13:23:47.280]                       if (muffled) 
[13:23:47.280]                         invokeRestart("muffleWarning")
[13:23:47.280]                     }
[13:23:47.280]                     else if (inherits(cond, "condition")) {
[13:23:47.280]                       if (!is.null(pattern)) {
[13:23:47.280]                         computeRestarts <- base::computeRestarts
[13:23:47.280]                         grepl <- base::grepl
[13:23:47.280]                         restarts <- computeRestarts(cond)
[13:23:47.280]                         for (restart in restarts) {
[13:23:47.280]                           name <- restart$name
[13:23:47.280]                           if (is.null(name)) 
[13:23:47.280]                             next
[13:23:47.280]                           if (!grepl(pattern, name)) 
[13:23:47.280]                             next
[13:23:47.280]                           invokeRestart(restart)
[13:23:47.280]                           muffled <- TRUE
[13:23:47.280]                           break
[13:23:47.280]                         }
[13:23:47.280]                       }
[13:23:47.280]                     }
[13:23:47.280]                     invisible(muffled)
[13:23:47.280]                   }
[13:23:47.280]                   muffleCondition(cond)
[13:23:47.280]                 })
[13:23:47.280]             }))
[13:23:47.280]             future::FutureResult(value = ...future.value$value, 
[13:23:47.280]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:23:47.280]                   ...future.rng), globalenv = if (FALSE) 
[13:23:47.280]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:23:47.280]                     ...future.globalenv.names))
[13:23:47.280]                 else NULL, started = ...future.startTime, version = "1.8")
[13:23:47.280]         }, condition = base::local({
[13:23:47.280]             c <- base::c
[13:23:47.280]             inherits <- base::inherits
[13:23:47.280]             invokeRestart <- base::invokeRestart
[13:23:47.280]             length <- base::length
[13:23:47.280]             list <- base::list
[13:23:47.280]             seq.int <- base::seq.int
[13:23:47.280]             signalCondition <- base::signalCondition
[13:23:47.280]             sys.calls <- base::sys.calls
[13:23:47.280]             `[[` <- base::`[[`
[13:23:47.280]             `+` <- base::`+`
[13:23:47.280]             `<<-` <- base::`<<-`
[13:23:47.280]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:23:47.280]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:23:47.280]                   3L)]
[13:23:47.280]             }
[13:23:47.280]             function(cond) {
[13:23:47.280]                 is_error <- inherits(cond, "error")
[13:23:47.280]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:23:47.280]                   NULL)
[13:23:47.280]                 if (is_error) {
[13:23:47.280]                   sessionInformation <- function() {
[13:23:47.280]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:23:47.280]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:23:47.280]                       search = base::search(), system = base::Sys.info())
[13:23:47.280]                   }
[13:23:47.280]                   ...future.conditions[[length(...future.conditions) + 
[13:23:47.280]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:23:47.280]                     cond$call), session = sessionInformation(), 
[13:23:47.280]                     timestamp = base::Sys.time(), signaled = 0L)
[13:23:47.280]                   signalCondition(cond)
[13:23:47.280]                 }
[13:23:47.280]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:23:47.280]                 "immediateCondition"))) {
[13:23:47.280]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:23:47.280]                   ...future.conditions[[length(...future.conditions) + 
[13:23:47.280]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:23:47.280]                   if (TRUE && !signal) {
[13:23:47.280]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:23:47.280]                     {
[13:23:47.280]                       inherits <- base::inherits
[13:23:47.280]                       invokeRestart <- base::invokeRestart
[13:23:47.280]                       is.null <- base::is.null
[13:23:47.280]                       muffled <- FALSE
[13:23:47.280]                       if (inherits(cond, "message")) {
[13:23:47.280]                         muffled <- grepl(pattern, "muffleMessage")
[13:23:47.280]                         if (muffled) 
[13:23:47.280]                           invokeRestart("muffleMessage")
[13:23:47.280]                       }
[13:23:47.280]                       else if (inherits(cond, "warning")) {
[13:23:47.280]                         muffled <- grepl(pattern, "muffleWarning")
[13:23:47.280]                         if (muffled) 
[13:23:47.280]                           invokeRestart("muffleWarning")
[13:23:47.280]                       }
[13:23:47.280]                       else if (inherits(cond, "condition")) {
[13:23:47.280]                         if (!is.null(pattern)) {
[13:23:47.280]                           computeRestarts <- base::computeRestarts
[13:23:47.280]                           grepl <- base::grepl
[13:23:47.280]                           restarts <- computeRestarts(cond)
[13:23:47.280]                           for (restart in restarts) {
[13:23:47.280]                             name <- restart$name
[13:23:47.280]                             if (is.null(name)) 
[13:23:47.280]                               next
[13:23:47.280]                             if (!grepl(pattern, name)) 
[13:23:47.280]                               next
[13:23:47.280]                             invokeRestart(restart)
[13:23:47.280]                             muffled <- TRUE
[13:23:47.280]                             break
[13:23:47.280]                           }
[13:23:47.280]                         }
[13:23:47.280]                       }
[13:23:47.280]                       invisible(muffled)
[13:23:47.280]                     }
[13:23:47.280]                     muffleCondition(cond, pattern = "^muffle")
[13:23:47.280]                   }
[13:23:47.280]                 }
[13:23:47.280]                 else {
[13:23:47.280]                   if (TRUE) {
[13:23:47.280]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:23:47.280]                     {
[13:23:47.280]                       inherits <- base::inherits
[13:23:47.280]                       invokeRestart <- base::invokeRestart
[13:23:47.280]                       is.null <- base::is.null
[13:23:47.280]                       muffled <- FALSE
[13:23:47.280]                       if (inherits(cond, "message")) {
[13:23:47.280]                         muffled <- grepl(pattern, "muffleMessage")
[13:23:47.280]                         if (muffled) 
[13:23:47.280]                           invokeRestart("muffleMessage")
[13:23:47.280]                       }
[13:23:47.280]                       else if (inherits(cond, "warning")) {
[13:23:47.280]                         muffled <- grepl(pattern, "muffleWarning")
[13:23:47.280]                         if (muffled) 
[13:23:47.280]                           invokeRestart("muffleWarning")
[13:23:47.280]                       }
[13:23:47.280]                       else if (inherits(cond, "condition")) {
[13:23:47.280]                         if (!is.null(pattern)) {
[13:23:47.280]                           computeRestarts <- base::computeRestarts
[13:23:47.280]                           grepl <- base::grepl
[13:23:47.280]                           restarts <- computeRestarts(cond)
[13:23:47.280]                           for (restart in restarts) {
[13:23:47.280]                             name <- restart$name
[13:23:47.280]                             if (is.null(name)) 
[13:23:47.280]                               next
[13:23:47.280]                             if (!grepl(pattern, name)) 
[13:23:47.280]                               next
[13:23:47.280]                             invokeRestart(restart)
[13:23:47.280]                             muffled <- TRUE
[13:23:47.280]                             break
[13:23:47.280]                           }
[13:23:47.280]                         }
[13:23:47.280]                       }
[13:23:47.280]                       invisible(muffled)
[13:23:47.280]                     }
[13:23:47.280]                     muffleCondition(cond, pattern = "^muffle")
[13:23:47.280]                   }
[13:23:47.280]                 }
[13:23:47.280]             }
[13:23:47.280]         }))
[13:23:47.280]     }, error = function(ex) {
[13:23:47.280]         base::structure(base::list(value = NULL, visible = NULL, 
[13:23:47.280]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:23:47.280]                 ...future.rng), started = ...future.startTime, 
[13:23:47.280]             finished = Sys.time(), session_uuid = NA_character_, 
[13:23:47.280]             version = "1.8"), class = "FutureResult")
[13:23:47.280]     }, finally = {
[13:23:47.280]         if (!identical(...future.workdir, getwd())) 
[13:23:47.280]             setwd(...future.workdir)
[13:23:47.280]         {
[13:23:47.280]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:23:47.280]                 ...future.oldOptions$nwarnings <- NULL
[13:23:47.280]             }
[13:23:47.280]             base::options(...future.oldOptions)
[13:23:47.280]             if (.Platform$OS.type == "windows") {
[13:23:47.280]                 old_names <- names(...future.oldEnvVars)
[13:23:47.280]                 envs <- base::Sys.getenv()
[13:23:47.280]                 names <- names(envs)
[13:23:47.280]                 common <- intersect(names, old_names)
[13:23:47.280]                 added <- setdiff(names, old_names)
[13:23:47.280]                 removed <- setdiff(old_names, names)
[13:23:47.280]                 changed <- common[...future.oldEnvVars[common] != 
[13:23:47.280]                   envs[common]]
[13:23:47.280]                 NAMES <- toupper(changed)
[13:23:47.280]                 args <- list()
[13:23:47.280]                 for (kk in seq_along(NAMES)) {
[13:23:47.280]                   name <- changed[[kk]]
[13:23:47.280]                   NAME <- NAMES[[kk]]
[13:23:47.280]                   if (name != NAME && is.element(NAME, old_names)) 
[13:23:47.280]                     next
[13:23:47.280]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:23:47.280]                 }
[13:23:47.280]                 NAMES <- toupper(added)
[13:23:47.280]                 for (kk in seq_along(NAMES)) {
[13:23:47.280]                   name <- added[[kk]]
[13:23:47.280]                   NAME <- NAMES[[kk]]
[13:23:47.280]                   if (name != NAME && is.element(NAME, old_names)) 
[13:23:47.280]                     next
[13:23:47.280]                   args[[name]] <- ""
[13:23:47.280]                 }
[13:23:47.280]                 NAMES <- toupper(removed)
[13:23:47.280]                 for (kk in seq_along(NAMES)) {
[13:23:47.280]                   name <- removed[[kk]]
[13:23:47.280]                   NAME <- NAMES[[kk]]
[13:23:47.280]                   if (name != NAME && is.element(NAME, old_names)) 
[13:23:47.280]                     next
[13:23:47.280]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:23:47.280]                 }
[13:23:47.280]                 if (length(args) > 0) 
[13:23:47.280]                   base::do.call(base::Sys.setenv, args = args)
[13:23:47.280]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:23:47.280]             }
[13:23:47.280]             else {
[13:23:47.280]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:23:47.280]             }
[13:23:47.280]             {
[13:23:47.280]                 if (base::length(...future.futureOptionsAdded) > 
[13:23:47.280]                   0L) {
[13:23:47.280]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:23:47.280]                   base::names(opts) <- ...future.futureOptionsAdded
[13:23:47.280]                   base::options(opts)
[13:23:47.280]                 }
[13:23:47.280]                 {
[13:23:47.280]                   {
[13:23:47.280]                     base::options(mc.cores = ...future.mc.cores.old)
[13:23:47.280]                     NULL
[13:23:47.280]                   }
[13:23:47.280]                   options(future.plan = NULL)
[13:23:47.280]                   if (is.na(NA_character_)) 
[13:23:47.280]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:23:47.280]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:23:47.280]                   future::plan(list(function (..., envir = parent.frame()) 
[13:23:47.280]                   {
[13:23:47.280]                     future <- SequentialFuture(..., envir = envir)
[13:23:47.280]                     if (!future$lazy) 
[13:23:47.280]                       future <- run(future)
[13:23:47.280]                     invisible(future)
[13:23:47.280]                   }), .cleanup = FALSE, .init = FALSE)
[13:23:47.280]                 }
[13:23:47.280]             }
[13:23:47.280]         }
[13:23:47.280]     })
[13:23:47.280]     if (TRUE) {
[13:23:47.280]         base::sink(type = "output", split = FALSE)
[13:23:47.280]         if (TRUE) {
[13:23:47.280]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:23:47.280]         }
[13:23:47.280]         else {
[13:23:47.280]             ...future.result["stdout"] <- base::list(NULL)
[13:23:47.280]         }
[13:23:47.280]         base::close(...future.stdout)
[13:23:47.280]         ...future.stdout <- NULL
[13:23:47.280]     }
[13:23:47.280]     ...future.result$conditions <- ...future.conditions
[13:23:47.280]     ...future.result$finished <- base::Sys.time()
[13:23:47.280]     ...future.result
[13:23:47.280] }
[13:23:47.334] Exporting 1 global objects (56 bytes) to cluster node #2 ...
[13:23:47.334] Exporting ‘ii’ (56 bytes) to cluster node #2 ...
[13:23:47.335] Exporting ‘ii’ (56 bytes) to cluster node #2 ... DONE
[13:23:47.335] Exporting 1 global objects (56 bytes) to cluster node #2 ... DONE
[13:23:47.336] MultisessionFuture started
 - Resolving 2 multisession futures
[13:23:47.336] result() for ClusterFuture ...
[13:23:47.336] receiveMessageFromWorker() for ClusterFuture ...
[13:23:47.336] - Validating connection of MultisessionFuture
[13:23:47.411] - received message: FutureResult
[13:23:47.411] - Received FutureResult
[13:23:47.411] - Erased future from FutureRegistry
[13:23:47.411] result() for ClusterFuture ...
[13:23:47.411] - result already collected: FutureResult
[13:23:47.412] result() for ClusterFuture ... done
[13:23:47.412] receiveMessageFromWorker() for ClusterFuture ... done
[13:23:47.412] result() for ClusterFuture ... done
[13:23:47.412] result() for ClusterFuture ...
[13:23:47.412] - result already collected: FutureResult
[13:23:47.412] result() for ClusterFuture ... done
[13:23:47.412] result() for ClusterFuture ...
[13:23:47.412] receiveMessageFromWorker() for ClusterFuture ...
[13:23:47.413] - Validating connection of MultisessionFuture
[13:23:47.413] - received message: FutureResult
[13:23:47.413] - Received FutureResult
[13:23:47.413] - Erased future from FutureRegistry
[13:23:47.413] result() for ClusterFuture ...
[13:23:47.413] - result already collected: FutureResult
[13:23:47.413] result() for ClusterFuture ... done
[13:23:47.414] receiveMessageFromWorker() for ClusterFuture ... done
[13:23:47.414] result() for ClusterFuture ... done
[13:23:47.414] result() for ClusterFuture ...
[13:23:47.414] - result already collected: FutureResult
[13:23:47.414] result() for ClusterFuture ... done
*** multisession() - workers inherit .libPaths()
[13:23:47.414] getGlobalsAndPackages() ...
[13:23:47.414] Searching for globals...
[13:23:47.415] - globals found: [1] ‘.libPaths’
[13:23:47.415] Searching for globals ... DONE
[13:23:47.415] Resolving globals: FALSE
[13:23:47.416] 
[13:23:47.416] 
[13:23:47.416] getGlobalsAndPackages() ... DONE
[13:23:47.416] run() for ‘Future’ ...
[13:23:47.416] - state: ‘created’
[13:23:47.417] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[13:23:47.417] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[13:23:47.417] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[13:23:47.417]   - Field: ‘label’
[13:23:47.417]   - Field: ‘local’
[13:23:47.417]   - Field: ‘owner’
[13:23:47.418]   - Field: ‘envir’
[13:23:47.418]   - Field: ‘packages’
[13:23:47.418]   - Field: ‘gc’
[13:23:47.418]   - Field: ‘conditions’
[13:23:47.418]   - Field: ‘expr’
[13:23:47.418]   - Field: ‘uuid’
[13:23:47.418]   - Field: ‘seed’
[13:23:47.418]   - Field: ‘version’
[13:23:47.418]   - Field: ‘result’
[13:23:47.419]   - Field: ‘asynchronous’
[13:23:47.419]   - Field: ‘calls’
[13:23:47.419]   - Field: ‘globals’
[13:23:47.419]   - Field: ‘stdout’
[13:23:47.419]   - Field: ‘earlySignal’
[13:23:47.419]   - Field: ‘lazy’
[13:23:47.419]   - Field: ‘state’
[13:23:47.419] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[13:23:47.420] - Launch lazy future ...
[13:23:47.420] Packages needed by the future expression (n = 0): <none>
[13:23:47.420] Packages needed by future strategies (n = 0): <none>
[13:23:47.420] {
[13:23:47.420]     {
[13:23:47.420]         {
[13:23:47.420]             ...future.startTime <- base::Sys.time()
[13:23:47.420]             {
[13:23:47.420]                 {
[13:23:47.420]                   {
[13:23:47.420]                     base::local({
[13:23:47.420]                       has_future <- base::requireNamespace("future", 
[13:23:47.420]                         quietly = TRUE)
[13:23:47.420]                       if (has_future) {
[13:23:47.420]                         ns <- base::getNamespace("future")
[13:23:47.420]                         version <- ns[[".package"]][["version"]]
[13:23:47.420]                         if (is.null(version)) 
[13:23:47.420]                           version <- utils::packageVersion("future")
[13:23:47.420]                       }
[13:23:47.420]                       else {
[13:23:47.420]                         version <- NULL
[13:23:47.420]                       }
[13:23:47.420]                       if (!has_future || version < "1.8.0") {
[13:23:47.420]                         info <- base::c(r_version = base::gsub("R version ", 
[13:23:47.420]                           "", base::R.version$version.string), 
[13:23:47.420]                           platform = base::sprintf("%s (%s-bit)", 
[13:23:47.420]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:23:47.420]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[13:23:47.420]                             "release", "version")], collapse = " "), 
[13:23:47.420]                           hostname = base::Sys.info()[["nodename"]])
[13:23:47.420]                         info <- base::sprintf("%s: %s", base::names(info), 
[13:23:47.420]                           info)
[13:23:47.420]                         info <- base::paste(info, collapse = "; ")
[13:23:47.420]                         if (!has_future) {
[13:23:47.420]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:23:47.420]                             info)
[13:23:47.420]                         }
[13:23:47.420]                         else {
[13:23:47.420]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:23:47.420]                             info, version)
[13:23:47.420]                         }
[13:23:47.420]                         base::stop(msg)
[13:23:47.420]                       }
[13:23:47.420]                     })
[13:23:47.420]                   }
[13:23:47.420]                   options(future.plan = NULL)
[13:23:47.420]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:23:47.420]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:23:47.420]                 }
[13:23:47.420]                 ...future.workdir <- getwd()
[13:23:47.420]             }
[13:23:47.420]             ...future.oldOptions <- base::as.list(base::.Options)
[13:23:47.420]             ...future.oldEnvVars <- base::Sys.getenv()
[13:23:47.420]         }
[13:23:47.420]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:23:47.420]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:23:47.420]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:23:47.420]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:23:47.420]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:23:47.420]             future.stdout.windows.reencode = NULL, width = 80L)
[13:23:47.420]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:23:47.420]             base::names(...future.oldOptions))
[13:23:47.420]     }
[13:23:47.420]     if (FALSE) {
[13:23:47.420]     }
[13:23:47.420]     else {
[13:23:47.420]         if (TRUE) {
[13:23:47.420]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:23:47.420]                 open = "w")
[13:23:47.420]         }
[13:23:47.420]         else {
[13:23:47.420]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:23:47.420]                 windows = "NUL", "/dev/null"), open = "w")
[13:23:47.420]         }
[13:23:47.420]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:23:47.420]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:23:47.420]             base::sink(type = "output", split = FALSE)
[13:23:47.420]             base::close(...future.stdout)
[13:23:47.420]         }, add = TRUE)
[13:23:47.420]     }
[13:23:47.420]     ...future.frame <- base::sys.nframe()
[13:23:47.420]     ...future.conditions <- base::list()
[13:23:47.420]     ...future.rng <- base::globalenv()$.Random.seed
[13:23:47.420]     if (FALSE) {
[13:23:47.420]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:23:47.420]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:23:47.420]     }
[13:23:47.420]     ...future.result <- base::tryCatch({
[13:23:47.420]         base::withCallingHandlers({
[13:23:47.420]             ...future.value <- base::withVisible(base::local(.libPaths()))
[13:23:47.420]             future::FutureResult(value = ...future.value$value, 
[13:23:47.420]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:23:47.420]                   ...future.rng), globalenv = if (FALSE) 
[13:23:47.420]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:23:47.420]                     ...future.globalenv.names))
[13:23:47.420]                 else NULL, started = ...future.startTime, version = "1.8")
[13:23:47.420]         }, condition = base::local({
[13:23:47.420]             c <- base::c
[13:23:47.420]             inherits <- base::inherits
[13:23:47.420]             invokeRestart <- base::invokeRestart
[13:23:47.420]             length <- base::length
[13:23:47.420]             list <- base::list
[13:23:47.420]             seq.int <- base::seq.int
[13:23:47.420]             signalCondition <- base::signalCondition
[13:23:47.420]             sys.calls <- base::sys.calls
[13:23:47.420]             `[[` <- base::`[[`
[13:23:47.420]             `+` <- base::`+`
[13:23:47.420]             `<<-` <- base::`<<-`
[13:23:47.420]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:23:47.420]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:23:47.420]                   3L)]
[13:23:47.420]             }
[13:23:47.420]             function(cond) {
[13:23:47.420]                 is_error <- inherits(cond, "error")
[13:23:47.420]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:23:47.420]                   NULL)
[13:23:47.420]                 if (is_error) {
[13:23:47.420]                   sessionInformation <- function() {
[13:23:47.420]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:23:47.420]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:23:47.420]                       search = base::search(), system = base::Sys.info())
[13:23:47.420]                   }
[13:23:47.420]                   ...future.conditions[[length(...future.conditions) + 
[13:23:47.420]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:23:47.420]                     cond$call), session = sessionInformation(), 
[13:23:47.420]                     timestamp = base::Sys.time(), signaled = 0L)
[13:23:47.420]                   signalCondition(cond)
[13:23:47.420]                 }
[13:23:47.420]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:23:47.420]                 "immediateCondition"))) {
[13:23:47.420]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:23:47.420]                   ...future.conditions[[length(...future.conditions) + 
[13:23:47.420]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:23:47.420]                   if (TRUE && !signal) {
[13:23:47.420]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:23:47.420]                     {
[13:23:47.420]                       inherits <- base::inherits
[13:23:47.420]                       invokeRestart <- base::invokeRestart
[13:23:47.420]                       is.null <- base::is.null
[13:23:47.420]                       muffled <- FALSE
[13:23:47.420]                       if (inherits(cond, "message")) {
[13:23:47.420]                         muffled <- grepl(pattern, "muffleMessage")
[13:23:47.420]                         if (muffled) 
[13:23:47.420]                           invokeRestart("muffleMessage")
[13:23:47.420]                       }
[13:23:47.420]                       else if (inherits(cond, "warning")) {
[13:23:47.420]                         muffled <- grepl(pattern, "muffleWarning")
[13:23:47.420]                         if (muffled) 
[13:23:47.420]                           invokeRestart("muffleWarning")
[13:23:47.420]                       }
[13:23:47.420]                       else if (inherits(cond, "condition")) {
[13:23:47.420]                         if (!is.null(pattern)) {
[13:23:47.420]                           computeRestarts <- base::computeRestarts
[13:23:47.420]                           grepl <- base::grepl
[13:23:47.420]                           restarts <- computeRestarts(cond)
[13:23:47.420]                           for (restart in restarts) {
[13:23:47.420]                             name <- restart$name
[13:23:47.420]                             if (is.null(name)) 
[13:23:47.420]                               next
[13:23:47.420]                             if (!grepl(pattern, name)) 
[13:23:47.420]                               next
[13:23:47.420]                             invokeRestart(restart)
[13:23:47.420]                             muffled <- TRUE
[13:23:47.420]                             break
[13:23:47.420]                           }
[13:23:47.420]                         }
[13:23:47.420]                       }
[13:23:47.420]                       invisible(muffled)
[13:23:47.420]                     }
[13:23:47.420]                     muffleCondition(cond, pattern = "^muffle")
[13:23:47.420]                   }
[13:23:47.420]                 }
[13:23:47.420]                 else {
[13:23:47.420]                   if (TRUE) {
[13:23:47.420]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:23:47.420]                     {
[13:23:47.420]                       inherits <- base::inherits
[13:23:47.420]                       invokeRestart <- base::invokeRestart
[13:23:47.420]                       is.null <- base::is.null
[13:23:47.420]                       muffled <- FALSE
[13:23:47.420]                       if (inherits(cond, "message")) {
[13:23:47.420]                         muffled <- grepl(pattern, "muffleMessage")
[13:23:47.420]                         if (muffled) 
[13:23:47.420]                           invokeRestart("muffleMessage")
[13:23:47.420]                       }
[13:23:47.420]                       else if (inherits(cond, "warning")) {
[13:23:47.420]                         muffled <- grepl(pattern, "muffleWarning")
[13:23:47.420]                         if (muffled) 
[13:23:47.420]                           invokeRestart("muffleWarning")
[13:23:47.420]                       }
[13:23:47.420]                       else if (inherits(cond, "condition")) {
[13:23:47.420]                         if (!is.null(pattern)) {
[13:23:47.420]                           computeRestarts <- base::computeRestarts
[13:23:47.420]                           grepl <- base::grepl
[13:23:47.420]                           restarts <- computeRestarts(cond)
[13:23:47.420]                           for (restart in restarts) {
[13:23:47.420]                             name <- restart$name
[13:23:47.420]                             if (is.null(name)) 
[13:23:47.420]                               next
[13:23:47.420]                             if (!grepl(pattern, name)) 
[13:23:47.420]                               next
[13:23:47.420]                             invokeRestart(restart)
[13:23:47.420]                             muffled <- TRUE
[13:23:47.420]                             break
[13:23:47.420]                           }
[13:23:47.420]                         }
[13:23:47.420]                       }
[13:23:47.420]                       invisible(muffled)
[13:23:47.420]                     }
[13:23:47.420]                     muffleCondition(cond, pattern = "^muffle")
[13:23:47.420]                   }
[13:23:47.420]                 }
[13:23:47.420]             }
[13:23:47.420]         }))
[13:23:47.420]     }, error = function(ex) {
[13:23:47.420]         base::structure(base::list(value = NULL, visible = NULL, 
[13:23:47.420]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:23:47.420]                 ...future.rng), started = ...future.startTime, 
[13:23:47.420]             finished = Sys.time(), session_uuid = NA_character_, 
[13:23:47.420]             version = "1.8"), class = "FutureResult")
[13:23:47.420]     }, finally = {
[13:23:47.420]         if (!identical(...future.workdir, getwd())) 
[13:23:47.420]             setwd(...future.workdir)
[13:23:47.420]         {
[13:23:47.420]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:23:47.420]                 ...future.oldOptions$nwarnings <- NULL
[13:23:47.420]             }
[13:23:47.420]             base::options(...future.oldOptions)
[13:23:47.420]             if (.Platform$OS.type == "windows") {
[13:23:47.420]                 old_names <- names(...future.oldEnvVars)
[13:23:47.420]                 envs <- base::Sys.getenv()
[13:23:47.420]                 names <- names(envs)
[13:23:47.420]                 common <- intersect(names, old_names)
[13:23:47.420]                 added <- setdiff(names, old_names)
[13:23:47.420]                 removed <- setdiff(old_names, names)
[13:23:47.420]                 changed <- common[...future.oldEnvVars[common] != 
[13:23:47.420]                   envs[common]]
[13:23:47.420]                 NAMES <- toupper(changed)
[13:23:47.420]                 args <- list()
[13:23:47.420]                 for (kk in seq_along(NAMES)) {
[13:23:47.420]                   name <- changed[[kk]]
[13:23:47.420]                   NAME <- NAMES[[kk]]
[13:23:47.420]                   if (name != NAME && is.element(NAME, old_names)) 
[13:23:47.420]                     next
[13:23:47.420]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:23:47.420]                 }
[13:23:47.420]                 NAMES <- toupper(added)
[13:23:47.420]                 for (kk in seq_along(NAMES)) {
[13:23:47.420]                   name <- added[[kk]]
[13:23:47.420]                   NAME <- NAMES[[kk]]
[13:23:47.420]                   if (name != NAME && is.element(NAME, old_names)) 
[13:23:47.420]                     next
[13:23:47.420]                   args[[name]] <- ""
[13:23:47.420]                 }
[13:23:47.420]                 NAMES <- toupper(removed)
[13:23:47.420]                 for (kk in seq_along(NAMES)) {
[13:23:47.420]                   name <- removed[[kk]]
[13:23:47.420]                   NAME <- NAMES[[kk]]
[13:23:47.420]                   if (name != NAME && is.element(NAME, old_names)) 
[13:23:47.420]                     next
[13:23:47.420]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:23:47.420]                 }
[13:23:47.420]                 if (length(args) > 0) 
[13:23:47.420]                   base::do.call(base::Sys.setenv, args = args)
[13:23:47.420]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:23:47.420]             }
[13:23:47.420]             else {
[13:23:47.420]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:23:47.420]             }
[13:23:47.420]             {
[13:23:47.420]                 if (base::length(...future.futureOptionsAdded) > 
[13:23:47.420]                   0L) {
[13:23:47.420]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:23:47.420]                   base::names(opts) <- ...future.futureOptionsAdded
[13:23:47.420]                   base::options(opts)
[13:23:47.420]                 }
[13:23:47.420]                 {
[13:23:47.420]                   {
[13:23:47.420]                     NULL
[13:23:47.420]                     RNGkind("Mersenne-Twister")
[13:23:47.420]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[13:23:47.420]                       inherits = FALSE)
[13:23:47.420]                   }
[13:23:47.420]                   options(future.plan = NULL)
[13:23:47.420]                   if (is.na(NA_character_)) 
[13:23:47.420]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:23:47.420]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:23:47.420]                   future::plan(list(function (..., envir = parent.frame()) 
[13:23:47.420]                   {
[13:23:47.420]                     future <- SequentialFuture(..., envir = envir)
[13:23:47.420]                     if (!future$lazy) 
[13:23:47.420]                       future <- run(future)
[13:23:47.420]                     invisible(future)
[13:23:47.420]                   }), .cleanup = FALSE, .init = FALSE)
[13:23:47.420]                 }
[13:23:47.420]             }
[13:23:47.420]         }
[13:23:47.420]     })
[13:23:47.420]     if (TRUE) {
[13:23:47.420]         base::sink(type = "output", split = FALSE)
[13:23:47.420]         if (TRUE) {
[13:23:47.420]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:23:47.420]         }
[13:23:47.420]         else {
[13:23:47.420]             ...future.result["stdout"] <- base::list(NULL)
[13:23:47.420]         }
[13:23:47.420]         base::close(...future.stdout)
[13:23:47.420]         ...future.stdout <- NULL
[13:23:47.420]     }
[13:23:47.420]     ...future.result$conditions <- ...future.conditions
[13:23:47.420]     ...future.result$finished <- base::Sys.time()
[13:23:47.420]     ...future.result
[13:23:47.420] }
[13:23:47.423] plan(): Setting new future strategy stack:
[13:23:47.425] List of future strategies:
[13:23:47.425] 1. sequential:
[13:23:47.425]    - args: function (..., envir = parent.frame())
[13:23:47.425]    - tweaked: FALSE
[13:23:47.425]    - call: NULL
[13:23:47.426] plan(): nbrOfWorkers() = 1
[13:23:47.426] plan(): Setting new future strategy stack:
[13:23:47.426] List of future strategies:
[13:23:47.426] 1. sequential:
[13:23:47.426]    - args: function (..., envir = parent.frame())
[13:23:47.426]    - tweaked: FALSE
[13:23:47.426]    - call: future::plan("sequential")
[13:23:47.427] plan(): nbrOfWorkers() = 1
[13:23:47.427] SequentialFuture started (and completed)
[13:23:47.427] - Launch lazy future ... done
[13:23:47.427] run() for ‘SequentialFuture’ ... done
List of 2
 $ main   : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
 $ workers: chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
*** multisession() and errors
[13:23:47.432] getGlobalsAndPackages() ...
[13:23:47.432] 
[13:23:47.432] - globals: [0] <none>
[13:23:47.432] getGlobalsAndPackages() ... DONE
[13:23:47.443] Packages needed by the future expression (n = 0): <none>
[13:23:47.443] Packages needed by future strategies (n = 0): <none>
[13:23:47.444] {
[13:23:47.444]     {
[13:23:47.444]         {
[13:23:47.444]             ...future.startTime <- base::Sys.time()
[13:23:47.444]             {
[13:23:47.444]                 {
[13:23:47.444]                   {
[13:23:47.444]                     {
[13:23:47.444]                       base::local({
[13:23:47.444]                         has_future <- base::requireNamespace("future", 
[13:23:47.444]                           quietly = TRUE)
[13:23:47.444]                         if (has_future) {
[13:23:47.444]                           ns <- base::getNamespace("future")
[13:23:47.444]                           version <- ns[[".package"]][["version"]]
[13:23:47.444]                           if (is.null(version)) 
[13:23:47.444]                             version <- utils::packageVersion("future")
[13:23:47.444]                         }
[13:23:47.444]                         else {
[13:23:47.444]                           version <- NULL
[13:23:47.444]                         }
[13:23:47.444]                         if (!has_future || version < "1.8.0") {
[13:23:47.444]                           info <- base::c(r_version = base::gsub("R version ", 
[13:23:47.444]                             "", base::R.version$version.string), 
[13:23:47.444]                             platform = base::sprintf("%s (%s-bit)", 
[13:23:47.444]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:23:47.444]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:23:47.444]                               "release", "version")], collapse = " "), 
[13:23:47.444]                             hostname = base::Sys.info()[["nodename"]])
[13:23:47.444]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:23:47.444]                             info)
[13:23:47.444]                           info <- base::paste(info, collapse = "; ")
[13:23:47.444]                           if (!has_future) {
[13:23:47.444]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:23:47.444]                               info)
[13:23:47.444]                           }
[13:23:47.444]                           else {
[13:23:47.444]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:23:47.444]                               info, version)
[13:23:47.444]                           }
[13:23:47.444]                           base::stop(msg)
[13:23:47.444]                         }
[13:23:47.444]                       })
[13:23:47.444]                     }
[13:23:47.444]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[13:23:47.444]                     base::options(mc.cores = 1L)
[13:23:47.444]                   }
[13:23:47.444]                   options(future.plan = NULL)
[13:23:47.444]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:23:47.444]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:23:47.444]                 }
[13:23:47.444]                 ...future.workdir <- getwd()
[13:23:47.444]             }
[13:23:47.444]             ...future.oldOptions <- base::as.list(base::.Options)
[13:23:47.444]             ...future.oldEnvVars <- base::Sys.getenv()
[13:23:47.444]         }
[13:23:47.444]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:23:47.444]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:23:47.444]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:23:47.444]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:23:47.444]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:23:47.444]             future.stdout.windows.reencode = NULL, width = 80L)
[13:23:47.444]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:23:47.444]             base::names(...future.oldOptions))
[13:23:47.444]     }
[13:23:47.444]     if (FALSE) {
[13:23:47.444]     }
[13:23:47.444]     else {
[13:23:47.444]         if (TRUE) {
[13:23:47.444]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:23:47.444]                 open = "w")
[13:23:47.444]         }
[13:23:47.444]         else {
[13:23:47.444]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:23:47.444]                 windows = "NUL", "/dev/null"), open = "w")
[13:23:47.444]         }
[13:23:47.444]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:23:47.444]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:23:47.444]             base::sink(type = "output", split = FALSE)
[13:23:47.444]             base::close(...future.stdout)
[13:23:47.444]         }, add = TRUE)
[13:23:47.444]     }
[13:23:47.444]     ...future.frame <- base::sys.nframe()
[13:23:47.444]     ...future.conditions <- base::list()
[13:23:47.444]     ...future.rng <- base::globalenv()$.Random.seed
[13:23:47.444]     if (FALSE) {
[13:23:47.444]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:23:47.444]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:23:47.444]     }
[13:23:47.444]     ...future.result <- base::tryCatch({
[13:23:47.444]         base::withCallingHandlers({
[13:23:47.444]             ...future.value <- base::withVisible(base::local({
[13:23:47.444]                 ...future.makeSendCondition <- base::local({
[13:23:47.444]                   sendCondition <- NULL
[13:23:47.444]                   function(frame = 1L) {
[13:23:47.444]                     if (is.function(sendCondition)) 
[13:23:47.444]                       return(sendCondition)
[13:23:47.444]                     ns <- getNamespace("parallel")
[13:23:47.444]                     if (exists("sendData", mode = "function", 
[13:23:47.444]                       envir = ns)) {
[13:23:47.444]                       parallel_sendData <- get("sendData", mode = "function", 
[13:23:47.444]                         envir = ns)
[13:23:47.444]                       envir <- sys.frame(frame)
[13:23:47.444]                       master <- NULL
[13:23:47.444]                       while (!identical(envir, .GlobalEnv) && 
[13:23:47.444]                         !identical(envir, emptyenv())) {
[13:23:47.444]                         if (exists("master", mode = "list", envir = envir, 
[13:23:47.444]                           inherits = FALSE)) {
[13:23:47.444]                           master <- get("master", mode = "list", 
[13:23:47.444]                             envir = envir, inherits = FALSE)
[13:23:47.444]                           if (inherits(master, c("SOCKnode", 
[13:23:47.444]                             "SOCK0node"))) {
[13:23:47.444]                             sendCondition <<- function(cond) {
[13:23:47.444]                               data <- list(type = "VALUE", value = cond, 
[13:23:47.444]                                 success = TRUE)
[13:23:47.444]                               parallel_sendData(master, data)
[13:23:47.444]                             }
[13:23:47.444]                             return(sendCondition)
[13:23:47.444]                           }
[13:23:47.444]                         }
[13:23:47.444]                         frame <- frame + 1L
[13:23:47.444]                         envir <- sys.frame(frame)
[13:23:47.444]                       }
[13:23:47.444]                     }
[13:23:47.444]                     sendCondition <<- function(cond) NULL
[13:23:47.444]                   }
[13:23:47.444]                 })
[13:23:47.444]                 withCallingHandlers({
[13:23:47.444]                   {
[13:23:47.444]                     stop("Whoops!")
[13:23:47.444]                     1
[13:23:47.444]                   }
[13:23:47.444]                 }, immediateCondition = function(cond) {
[13:23:47.444]                   sendCondition <- ...future.makeSendCondition()
[13:23:47.444]                   sendCondition(cond)
[13:23:47.444]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:23:47.444]                   {
[13:23:47.444]                     inherits <- base::inherits
[13:23:47.444]                     invokeRestart <- base::invokeRestart
[13:23:47.444]                     is.null <- base::is.null
[13:23:47.444]                     muffled <- FALSE
[13:23:47.444]                     if (inherits(cond, "message")) {
[13:23:47.444]                       muffled <- grepl(pattern, "muffleMessage")
[13:23:47.444]                       if (muffled) 
[13:23:47.444]                         invokeRestart("muffleMessage")
[13:23:47.444]                     }
[13:23:47.444]                     else if (inherits(cond, "warning")) {
[13:23:47.444]                       muffled <- grepl(pattern, "muffleWarning")
[13:23:47.444]                       if (muffled) 
[13:23:47.444]                         invokeRestart("muffleWarning")
[13:23:47.444]                     }
[13:23:47.444]                     else if (inherits(cond, "condition")) {
[13:23:47.444]                       if (!is.null(pattern)) {
[13:23:47.444]                         computeRestarts <- base::computeRestarts
[13:23:47.444]                         grepl <- base::grepl
[13:23:47.444]                         restarts <- computeRestarts(cond)
[13:23:47.444]                         for (restart in restarts) {
[13:23:47.444]                           name <- restart$name
[13:23:47.444]                           if (is.null(name)) 
[13:23:47.444]                             next
[13:23:47.444]                           if (!grepl(pattern, name)) 
[13:23:47.444]                             next
[13:23:47.444]                           invokeRestart(restart)
[13:23:47.444]                           muffled <- TRUE
[13:23:47.444]                           break
[13:23:47.444]                         }
[13:23:47.444]                       }
[13:23:47.444]                     }
[13:23:47.444]                     invisible(muffled)
[13:23:47.444]                   }
[13:23:47.444]                   muffleCondition(cond)
[13:23:47.444]                 })
[13:23:47.444]             }))
[13:23:47.444]             future::FutureResult(value = ...future.value$value, 
[13:23:47.444]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:23:47.444]                   ...future.rng), globalenv = if (FALSE) 
[13:23:47.444]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:23:47.444]                     ...future.globalenv.names))
[13:23:47.444]                 else NULL, started = ...future.startTime, version = "1.8")
[13:23:47.444]         }, condition = base::local({
[13:23:47.444]             c <- base::c
[13:23:47.444]             inherits <- base::inherits
[13:23:47.444]             invokeRestart <- base::invokeRestart
[13:23:47.444]             length <- base::length
[13:23:47.444]             list <- base::list
[13:23:47.444]             seq.int <- base::seq.int
[13:23:47.444]             signalCondition <- base::signalCondition
[13:23:47.444]             sys.calls <- base::sys.calls
[13:23:47.444]             `[[` <- base::`[[`
[13:23:47.444]             `+` <- base::`+`
[13:23:47.444]             `<<-` <- base::`<<-`
[13:23:47.444]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:23:47.444]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:23:47.444]                   3L)]
[13:23:47.444]             }
[13:23:47.444]             function(cond) {
[13:23:47.444]                 is_error <- inherits(cond, "error")
[13:23:47.444]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:23:47.444]                   NULL)
[13:23:47.444]                 if (is_error) {
[13:23:47.444]                   sessionInformation <- function() {
[13:23:47.444]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:23:47.444]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:23:47.444]                       search = base::search(), system = base::Sys.info())
[13:23:47.444]                   }
[13:23:47.444]                   ...future.conditions[[length(...future.conditions) + 
[13:23:47.444]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:23:47.444]                     cond$call), session = sessionInformation(), 
[13:23:47.444]                     timestamp = base::Sys.time(), signaled = 0L)
[13:23:47.444]                   signalCondition(cond)
[13:23:47.444]                 }
[13:23:47.444]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:23:47.444]                 "immediateCondition"))) {
[13:23:47.444]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:23:47.444]                   ...future.conditions[[length(...future.conditions) + 
[13:23:47.444]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:23:47.444]                   if (TRUE && !signal) {
[13:23:47.444]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:23:47.444]                     {
[13:23:47.444]                       inherits <- base::inherits
[13:23:47.444]                       invokeRestart <- base::invokeRestart
[13:23:47.444]                       is.null <- base::is.null
[13:23:47.444]                       muffled <- FALSE
[13:23:47.444]                       if (inherits(cond, "message")) {
[13:23:47.444]                         muffled <- grepl(pattern, "muffleMessage")
[13:23:47.444]                         if (muffled) 
[13:23:47.444]                           invokeRestart("muffleMessage")
[13:23:47.444]                       }
[13:23:47.444]                       else if (inherits(cond, "warning")) {
[13:23:47.444]                         muffled <- grepl(pattern, "muffleWarning")
[13:23:47.444]                         if (muffled) 
[13:23:47.444]                           invokeRestart("muffleWarning")
[13:23:47.444]                       }
[13:23:47.444]                       else if (inherits(cond, "condition")) {
[13:23:47.444]                         if (!is.null(pattern)) {
[13:23:47.444]                           computeRestarts <- base::computeRestarts
[13:23:47.444]                           grepl <- base::grepl
[13:23:47.444]                           restarts <- computeRestarts(cond)
[13:23:47.444]                           for (restart in restarts) {
[13:23:47.444]                             name <- restart$name
[13:23:47.444]                             if (is.null(name)) 
[13:23:47.444]                               next
[13:23:47.444]                             if (!grepl(pattern, name)) 
[13:23:47.444]                               next
[13:23:47.444]                             invokeRestart(restart)
[13:23:47.444]                             muffled <- TRUE
[13:23:47.444]                             break
[13:23:47.444]                           }
[13:23:47.444]                         }
[13:23:47.444]                       }
[13:23:47.444]                       invisible(muffled)
[13:23:47.444]                     }
[13:23:47.444]                     muffleCondition(cond, pattern = "^muffle")
[13:23:47.444]                   }
[13:23:47.444]                 }
[13:23:47.444]                 else {
[13:23:47.444]                   if (TRUE) {
[13:23:47.444]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:23:47.444]                     {
[13:23:47.444]                       inherits <- base::inherits
[13:23:47.444]                       invokeRestart <- base::invokeRestart
[13:23:47.444]                       is.null <- base::is.null
[13:23:47.444]                       muffled <- FALSE
[13:23:47.444]                       if (inherits(cond, "message")) {
[13:23:47.444]                         muffled <- grepl(pattern, "muffleMessage")
[13:23:47.444]                         if (muffled) 
[13:23:47.444]                           invokeRestart("muffleMessage")
[13:23:47.444]                       }
[13:23:47.444]                       else if (inherits(cond, "warning")) {
[13:23:47.444]                         muffled <- grepl(pattern, "muffleWarning")
[13:23:47.444]                         if (muffled) 
[13:23:47.444]                           invokeRestart("muffleWarning")
[13:23:47.444]                       }
[13:23:47.444]                       else if (inherits(cond, "condition")) {
[13:23:47.444]                         if (!is.null(pattern)) {
[13:23:47.444]                           computeRestarts <- base::computeRestarts
[13:23:47.444]                           grepl <- base::grepl
[13:23:47.444]                           restarts <- computeRestarts(cond)
[13:23:47.444]                           for (restart in restarts) {
[13:23:47.444]                             name <- restart$name
[13:23:47.444]                             if (is.null(name)) 
[13:23:47.444]                               next
[13:23:47.444]                             if (!grepl(pattern, name)) 
[13:23:47.444]                               next
[13:23:47.444]                             invokeRestart(restart)
[13:23:47.444]                             muffled <- TRUE
[13:23:47.444]                             break
[13:23:47.444]                           }
[13:23:47.444]                         }
[13:23:47.444]                       }
[13:23:47.444]                       invisible(muffled)
[13:23:47.444]                     }
[13:23:47.444]                     muffleCondition(cond, pattern = "^muffle")
[13:23:47.444]                   }
[13:23:47.444]                 }
[13:23:47.444]             }
[13:23:47.444]         }))
[13:23:47.444]     }, error = function(ex) {
[13:23:47.444]         base::structure(base::list(value = NULL, visible = NULL, 
[13:23:47.444]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:23:47.444]                 ...future.rng), started = ...future.startTime, 
[13:23:47.444]             finished = Sys.time(), session_uuid = NA_character_, 
[13:23:47.444]             version = "1.8"), class = "FutureResult")
[13:23:47.444]     }, finally = {
[13:23:47.444]         if (!identical(...future.workdir, getwd())) 
[13:23:47.444]             setwd(...future.workdir)
[13:23:47.444]         {
[13:23:47.444]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:23:47.444]                 ...future.oldOptions$nwarnings <- NULL
[13:23:47.444]             }
[13:23:47.444]             base::options(...future.oldOptions)
[13:23:47.444]             if (.Platform$OS.type == "windows") {
[13:23:47.444]                 old_names <- names(...future.oldEnvVars)
[13:23:47.444]                 envs <- base::Sys.getenv()
[13:23:47.444]                 names <- names(envs)
[13:23:47.444]                 common <- intersect(names, old_names)
[13:23:47.444]                 added <- setdiff(names, old_names)
[13:23:47.444]                 removed <- setdiff(old_names, names)
[13:23:47.444]                 changed <- common[...future.oldEnvVars[common] != 
[13:23:47.444]                   envs[common]]
[13:23:47.444]                 NAMES <- toupper(changed)
[13:23:47.444]                 args <- list()
[13:23:47.444]                 for (kk in seq_along(NAMES)) {
[13:23:47.444]                   name <- changed[[kk]]
[13:23:47.444]                   NAME <- NAMES[[kk]]
[13:23:47.444]                   if (name != NAME && is.element(NAME, old_names)) 
[13:23:47.444]                     next
[13:23:47.444]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:23:47.444]                 }
[13:23:47.444]                 NAMES <- toupper(added)
[13:23:47.444]                 for (kk in seq_along(NAMES)) {
[13:23:47.444]                   name <- added[[kk]]
[13:23:47.444]                   NAME <- NAMES[[kk]]
[13:23:47.444]                   if (name != NAME && is.element(NAME, old_names)) 
[13:23:47.444]                     next
[13:23:47.444]                   args[[name]] <- ""
[13:23:47.444]                 }
[13:23:47.444]                 NAMES <- toupper(removed)
[13:23:47.444]                 for (kk in seq_along(NAMES)) {
[13:23:47.444]                   name <- removed[[kk]]
[13:23:47.444]                   NAME <- NAMES[[kk]]
[13:23:47.444]                   if (name != NAME && is.element(NAME, old_names)) 
[13:23:47.444]                     next
[13:23:47.444]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:23:47.444]                 }
[13:23:47.444]                 if (length(args) > 0) 
[13:23:47.444]                   base::do.call(base::Sys.setenv, args = args)
[13:23:47.444]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:23:47.444]             }
[13:23:47.444]             else {
[13:23:47.444]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:23:47.444]             }
[13:23:47.444]             {
[13:23:47.444]                 if (base::length(...future.futureOptionsAdded) > 
[13:23:47.444]                   0L) {
[13:23:47.444]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:23:47.444]                   base::names(opts) <- ...future.futureOptionsAdded
[13:23:47.444]                   base::options(opts)
[13:23:47.444]                 }
[13:23:47.444]                 {
[13:23:47.444]                   {
[13:23:47.444]                     base::options(mc.cores = ...future.mc.cores.old)
[13:23:47.444]                     NULL
[13:23:47.444]                   }
[13:23:47.444]                   options(future.plan = NULL)
[13:23:47.444]                   if (is.na(NA_character_)) 
[13:23:47.444]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:23:47.444]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:23:47.444]                   future::plan(list(function (..., envir = parent.frame()) 
[13:23:47.444]                   {
[13:23:47.444]                     future <- SequentialFuture(..., envir = envir)
[13:23:47.444]                     if (!future$lazy) 
[13:23:47.444]                       future <- run(future)
[13:23:47.444]                     invisible(future)
[13:23:47.444]                   }), .cleanup = FALSE, .init = FALSE)
[13:23:47.444]                 }
[13:23:47.444]             }
[13:23:47.444]         }
[13:23:47.444]     })
[13:23:47.444]     if (TRUE) {
[13:23:47.444]         base::sink(type = "output", split = FALSE)
[13:23:47.444]         if (TRUE) {
[13:23:47.444]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:23:47.444]         }
[13:23:47.444]         else {
[13:23:47.444]             ...future.result["stdout"] <- base::list(NULL)
[13:23:47.444]         }
[13:23:47.444]         base::close(...future.stdout)
[13:23:47.444]         ...future.stdout <- NULL
[13:23:47.444]     }
[13:23:47.444]     ...future.result$conditions <- ...future.conditions
[13:23:47.444]     ...future.result$finished <- base::Sys.time()
[13:23:47.444]     ...future.result
[13:23:47.444] }
[13:23:47.447] MultisessionFuture started
MultisessionFuture:
Label: ‘<none>’
Expression:
{
    stop("Whoops!")
    1
}
Lazy evaluation: FALSE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: FALSE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: c1010526-43cf-67f3-5528-f283513a2221
Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:23:47.458] result() for ClusterFuture ...
[13:23:47.458] receiveMessageFromWorker() for ClusterFuture ...
[13:23:47.458] - Validating connection of MultisessionFuture
[13:23:47.490] - received message: FutureResult
[13:23:47.491] - Received FutureResult
[13:23:47.491] - Erased future from FutureRegistry
[13:23:47.491] result() for ClusterFuture ...
[13:23:47.491] - result already collected: FutureResult
[13:23:47.491] result() for ClusterFuture ... done
[13:23:47.491] signalConditions() ...
[13:23:47.491]  - include = ‘immediateCondition’
[13:23:47.491]  - exclude = 
[13:23:47.491]  - resignal = FALSE
[13:23:47.491]  - Number of conditions: 1
[13:23:47.492] signalConditions() ... done
[13:23:47.492] receiveMessageFromWorker() for ClusterFuture ... done
[13:23:47.492] result() for ClusterFuture ... done
[13:23:47.492] result() for ClusterFuture ...
[13:23:47.492] - result already collected: FutureResult
[13:23:47.492] result() for ClusterFuture ... done
[13:23:47.492] signalConditions() ...
[13:23:47.492]  - include = ‘immediateCondition’
[13:23:47.492]  - exclude = 
[13:23:47.492]  - resignal = FALSE
[13:23:47.492]  - Number of conditions: 1
[13:23:47.493] signalConditions() ... done
<simpleError in withCallingHandlers({    {        stop("Whoops!")        1    }}, immediateCondition = function(cond) {    sendCondition <- ...future.makeSendCondition()    sendCondition(cond)    muffleCondition <- function (cond, pattern = "^muffle")     {        inherits <- base::inherits        invokeRestart <- base::invokeRestart        is.null <- base::is.null        muffled <- FALSE        if (inherits(cond, "message")) {            muffled <- grepl(pattern, "muffleMessage")            if (muffled)                 invokeRestart("muffleMessage")        }        else if (inherits(cond, "warning")) {            muffled <- grepl(pattern, "muffleWarning")            if (muffled)                 invokeRestart("muffleWarning")        }        else if (inherits(cond, "condition")) {            if (!is.null(pattern)) {                computeRestarts <- base::computeRestarts                grepl <- base::grepl                restarts <- computeRestarts(cond)                for (restart in restarts) {                  name <- restart$name                  if (is.null(name))                     next                  if (!grepl(pattern, name))                     next                  invokeRestart(restart)                  muffled <- TRUE                  break                }            }        }        invisible(muffled)    }    muffleCondition(cond)}): Whoops!>
[13:23:47.493] result() for ClusterFuture ...
[13:23:47.493] - result already collected: FutureResult
[13:23:47.493] result() for ClusterFuture ... done
[13:23:47.493] result() for ClusterFuture ...
[13:23:47.493] - result already collected: FutureResult
[13:23:47.493] result() for ClusterFuture ... done
[13:23:47.494] signalConditions() ...
[13:23:47.494]  - include = ‘immediateCondition’
[13:23:47.494]  - exclude = 
[13:23:47.494]  - resignal = FALSE
[13:23:47.494]  - Number of conditions: 1
[13:23:47.494] signalConditions() ... done
[13:23:47.494] Future state: ‘finished’
[13:23:47.494] result() for ClusterFuture ...
[13:23:47.494] - result already collected: FutureResult
[13:23:47.494] result() for ClusterFuture ... done
[13:23:47.494] signalConditions() ...
[13:23:47.495]  - include = ‘condition’
[13:23:47.495]  - exclude = ‘immediateCondition’
[13:23:47.495]  - resignal = TRUE
[13:23:47.495]  - Number of conditions: 1
[13:23:47.495]  - Condition #1: ‘simpleError’, ‘error’, ‘condition’
[13:23:47.495] signalConditions() ... done
[1] "Error in withCallingHandlers({ : Whoops!\n"
attr(,"class")
[1] "try-error"
attr(,"condition")
<simpleError in withCallingHandlers({    {        stop("Whoops!")        1    }}, immediateCondition = function(cond) {    sendCondition <- ...future.makeSendCondition()    sendCondition(cond)    muffleCondition <- function (cond, pattern = "^muffle")     {        inherits <- base::inherits        invokeRestart <- base::invokeRestart        is.null <- base::is.null        muffled <- FALSE        if (inherits(cond, "message")) {            muffled <- grepl(pattern, "muffleMessage")            if (muffled)                 invokeRestart("muffleMessage")        }        else if (inherits(cond, "warning")) {            muffled <- grepl(pattern, "muffleWarning")            if (muffled)                 invokeRestart("muffleWarning")        }        else if (inherits(cond, "condition")) {            if (!is.null(pattern)) {                computeRestarts <- base::computeRestarts                grepl <- base::grepl                restarts <- computeRestarts(cond)                for (restart in restarts) {                  name <- restart$name                  if (is.null(name))                     next                  if (!grepl(pattern, name))                     next                  invokeRestart(restart)                  muffled <- TRUE                  break                }            }        }        invisible(muffled)    }    muffleCondition(cond)}): Whoops!>
[13:23:47.496] result() for ClusterFuture ...
[13:23:47.496] - result already collected: FutureResult
[13:23:47.496] result() for ClusterFuture ... done
[13:23:47.496] result() for ClusterFuture ...
[13:23:47.496] - result already collected: FutureResult
[13:23:47.496] result() for ClusterFuture ... done
[13:23:47.496] signalConditions() ...
[13:23:47.496]  - include = ‘immediateCondition’
[13:23:47.496]  - exclude = 
[13:23:47.496]  - resignal = FALSE
[13:23:47.496]  - Number of conditions: 1
[13:23:47.497] signalConditions() ... done
[13:23:47.497] Future state: ‘finished’
[13:23:47.497] result() for ClusterFuture ...
[13:23:47.497] - result already collected: FutureResult
[13:23:47.497] result() for ClusterFuture ... done
[13:23:47.497] signalConditions() ...
[13:23:47.497]  - include = ‘condition’
[13:23:47.497]  - exclude = ‘immediateCondition’
[13:23:47.497]  - resignal = TRUE
[13:23:47.497]  - Number of conditions: 1
[13:23:47.497]  - Condition #1: ‘simpleError’, ‘error’, ‘condition’
[13:23:47.498] signalConditions() ... done
[1] "Error in withCallingHandlers({ : Whoops!\n"
attr(,"class")
[1] "try-error"
attr(,"condition")
<simpleError in withCallingHandlers({    {        stop("Whoops!")        1    }}, immediateCondition = function(cond) {    sendCondition <- ...future.makeSendCondition()    sendCondition(cond)    muffleCondition <- function (cond, pattern = "^muffle")     {        inherits <- base::inherits        invokeRestart <- base::invokeRestart        is.null <- base::is.null        muffled <- FALSE        if (inherits(cond, "message")) {            muffled <- grepl(pattern, "muffleMessage")            if (muffled)                 invokeRestart("muffleMessage")        }        else if (inherits(cond, "warning")) {            muffled <- grepl(pattern, "muffleWarning")            if (muffled)                 invokeRestart("muffleWarning")        }        else if (inherits(cond, "condition")) {            if (!is.null(pattern)) {                computeRestarts <- base::computeRestarts                grepl <- base::grepl                restarts <- computeRestarts(cond)                for (restart in restarts) {                  name <- restart$name                  if (is.null(name))                     next                  if (!grepl(pattern, name))                     next                  invokeRestart(restart)                  muffled <- TRUE                  break                }            }        }        invisible(muffled)    }    muffleCondition(cond)}): Whoops!>
[13:23:47.501] getGlobalsAndPackages() ...
[13:23:47.502] 
[13:23:47.502] - globals: [0] <none>
[13:23:47.502] getGlobalsAndPackages() ... DONE
[13:23:47.513] Packages needed by the future expression (n = 0): <none>
[13:23:47.513] Packages needed by future strategies (n = 0): <none>
[13:23:47.513] {
[13:23:47.513]     {
[13:23:47.513]         {
[13:23:47.513]             ...future.startTime <- base::Sys.time()
[13:23:47.513]             {
[13:23:47.513]                 {
[13:23:47.513]                   {
[13:23:47.513]                     {
[13:23:47.513]                       base::local({
[13:23:47.513]                         has_future <- base::requireNamespace("future", 
[13:23:47.513]                           quietly = TRUE)
[13:23:47.513]                         if (has_future) {
[13:23:47.513]                           ns <- base::getNamespace("future")
[13:23:47.513]                           version <- ns[[".package"]][["version"]]
[13:23:47.513]                           if (is.null(version)) 
[13:23:47.513]                             version <- utils::packageVersion("future")
[13:23:47.513]                         }
[13:23:47.513]                         else {
[13:23:47.513]                           version <- NULL
[13:23:47.513]                         }
[13:23:47.513]                         if (!has_future || version < "1.8.0") {
[13:23:47.513]                           info <- base::c(r_version = base::gsub("R version ", 
[13:23:47.513]                             "", base::R.version$version.string), 
[13:23:47.513]                             platform = base::sprintf("%s (%s-bit)", 
[13:23:47.513]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:23:47.513]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:23:47.513]                               "release", "version")], collapse = " "), 
[13:23:47.513]                             hostname = base::Sys.info()[["nodename"]])
[13:23:47.513]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:23:47.513]                             info)
[13:23:47.513]                           info <- base::paste(info, collapse = "; ")
[13:23:47.513]                           if (!has_future) {
[13:23:47.513]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:23:47.513]                               info)
[13:23:47.513]                           }
[13:23:47.513]                           else {
[13:23:47.513]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:23:47.513]                               info, version)
[13:23:47.513]                           }
[13:23:47.513]                           base::stop(msg)
[13:23:47.513]                         }
[13:23:47.513]                       })
[13:23:47.513]                     }
[13:23:47.513]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[13:23:47.513]                     base::options(mc.cores = 1L)
[13:23:47.513]                   }
[13:23:47.513]                   options(future.plan = NULL)
[13:23:47.513]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:23:47.513]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:23:47.513]                 }
[13:23:47.513]                 ...future.workdir <- getwd()
[13:23:47.513]             }
[13:23:47.513]             ...future.oldOptions <- base::as.list(base::.Options)
[13:23:47.513]             ...future.oldEnvVars <- base::Sys.getenv()
[13:23:47.513]         }
[13:23:47.513]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:23:47.513]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:23:47.513]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:23:47.513]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:23:47.513]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:23:47.513]             future.stdout.windows.reencode = NULL, width = 80L)
[13:23:47.513]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:23:47.513]             base::names(...future.oldOptions))
[13:23:47.513]     }
[13:23:47.513]     if (FALSE) {
[13:23:47.513]     }
[13:23:47.513]     else {
[13:23:47.513]         if (TRUE) {
[13:23:47.513]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:23:47.513]                 open = "w")
[13:23:47.513]         }
[13:23:47.513]         else {
[13:23:47.513]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:23:47.513]                 windows = "NUL", "/dev/null"), open = "w")
[13:23:47.513]         }
[13:23:47.513]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:23:47.513]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:23:47.513]             base::sink(type = "output", split = FALSE)
[13:23:47.513]             base::close(...future.stdout)
[13:23:47.513]         }, add = TRUE)
[13:23:47.513]     }
[13:23:47.513]     ...future.frame <- base::sys.nframe()
[13:23:47.513]     ...future.conditions <- base::list()
[13:23:47.513]     ...future.rng <- base::globalenv()$.Random.seed
[13:23:47.513]     if (FALSE) {
[13:23:47.513]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:23:47.513]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:23:47.513]     }
[13:23:47.513]     ...future.result <- base::tryCatch({
[13:23:47.513]         base::withCallingHandlers({
[13:23:47.513]             ...future.value <- base::withVisible(base::local({
[13:23:47.513]                 ...future.makeSendCondition <- base::local({
[13:23:47.513]                   sendCondition <- NULL
[13:23:47.513]                   function(frame = 1L) {
[13:23:47.513]                     if (is.function(sendCondition)) 
[13:23:47.513]                       return(sendCondition)
[13:23:47.513]                     ns <- getNamespace("parallel")
[13:23:47.513]                     if (exists("sendData", mode = "function", 
[13:23:47.513]                       envir = ns)) {
[13:23:47.513]                       parallel_sendData <- get("sendData", mode = "function", 
[13:23:47.513]                         envir = ns)
[13:23:47.513]                       envir <- sys.frame(frame)
[13:23:47.513]                       master <- NULL
[13:23:47.513]                       while (!identical(envir, .GlobalEnv) && 
[13:23:47.513]                         !identical(envir, emptyenv())) {
[13:23:47.513]                         if (exists("master", mode = "list", envir = envir, 
[13:23:47.513]                           inherits = FALSE)) {
[13:23:47.513]                           master <- get("master", mode = "list", 
[13:23:47.513]                             envir = envir, inherits = FALSE)
[13:23:47.513]                           if (inherits(master, c("SOCKnode", 
[13:23:47.513]                             "SOCK0node"))) {
[13:23:47.513]                             sendCondition <<- function(cond) {
[13:23:47.513]                               data <- list(type = "VALUE", value = cond, 
[13:23:47.513]                                 success = TRUE)
[13:23:47.513]                               parallel_sendData(master, data)
[13:23:47.513]                             }
[13:23:47.513]                             return(sendCondition)
[13:23:47.513]                           }
[13:23:47.513]                         }
[13:23:47.513]                         frame <- frame + 1L
[13:23:47.513]                         envir <- sys.frame(frame)
[13:23:47.513]                       }
[13:23:47.513]                     }
[13:23:47.513]                     sendCondition <<- function(cond) NULL
[13:23:47.513]                   }
[13:23:47.513]                 })
[13:23:47.513]                 withCallingHandlers({
[13:23:47.513]                   {
[13:23:47.513]                     stop(structure(list(message = "boom"), class = c("MyError", 
[13:23:47.513]                       "error", "condition")))
[13:23:47.513]                   }
[13:23:47.513]                 }, immediateCondition = function(cond) {
[13:23:47.513]                   sendCondition <- ...future.makeSendCondition()
[13:23:47.513]                   sendCondition(cond)
[13:23:47.513]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:23:47.513]                   {
[13:23:47.513]                     inherits <- base::inherits
[13:23:47.513]                     invokeRestart <- base::invokeRestart
[13:23:47.513]                     is.null <- base::is.null
[13:23:47.513]                     muffled <- FALSE
[13:23:47.513]                     if (inherits(cond, "message")) {
[13:23:47.513]                       muffled <- grepl(pattern, "muffleMessage")
[13:23:47.513]                       if (muffled) 
[13:23:47.513]                         invokeRestart("muffleMessage")
[13:23:47.513]                     }
[13:23:47.513]                     else if (inherits(cond, "warning")) {
[13:23:47.513]                       muffled <- grepl(pattern, "muffleWarning")
[13:23:47.513]                       if (muffled) 
[13:23:47.513]                         invokeRestart("muffleWarning")
[13:23:47.513]                     }
[13:23:47.513]                     else if (inherits(cond, "condition")) {
[13:23:47.513]                       if (!is.null(pattern)) {
[13:23:47.513]                         computeRestarts <- base::computeRestarts
[13:23:47.513]                         grepl <- base::grepl
[13:23:47.513]                         restarts <- computeRestarts(cond)
[13:23:47.513]                         for (restart in restarts) {
[13:23:47.513]                           name <- restart$name
[13:23:47.513]                           if (is.null(name)) 
[13:23:47.513]                             next
[13:23:47.513]                           if (!grepl(pattern, name)) 
[13:23:47.513]                             next
[13:23:47.513]                           invokeRestart(restart)
[13:23:47.513]                           muffled <- TRUE
[13:23:47.513]                           break
[13:23:47.513]                         }
[13:23:47.513]                       }
[13:23:47.513]                     }
[13:23:47.513]                     invisible(muffled)
[13:23:47.513]                   }
[13:23:47.513]                   muffleCondition(cond)
[13:23:47.513]                 })
[13:23:47.513]             }))
[13:23:47.513]             future::FutureResult(value = ...future.value$value, 
[13:23:47.513]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:23:47.513]                   ...future.rng), globalenv = if (FALSE) 
[13:23:47.513]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:23:47.513]                     ...future.globalenv.names))
[13:23:47.513]                 else NULL, started = ...future.startTime, version = "1.8")
[13:23:47.513]         }, condition = base::local({
[13:23:47.513]             c <- base::c
[13:23:47.513]             inherits <- base::inherits
[13:23:47.513]             invokeRestart <- base::invokeRestart
[13:23:47.513]             length <- base::length
[13:23:47.513]             list <- base::list
[13:23:47.513]             seq.int <- base::seq.int
[13:23:47.513]             signalCondition <- base::signalCondition
[13:23:47.513]             sys.calls <- base::sys.calls
[13:23:47.513]             `[[` <- base::`[[`
[13:23:47.513]             `+` <- base::`+`
[13:23:47.513]             `<<-` <- base::`<<-`
[13:23:47.513]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:23:47.513]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:23:47.513]                   3L)]
[13:23:47.513]             }
[13:23:47.513]             function(cond) {
[13:23:47.513]                 is_error <- inherits(cond, "error")
[13:23:47.513]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:23:47.513]                   NULL)
[13:23:47.513]                 if (is_error) {
[13:23:47.513]                   sessionInformation <- function() {
[13:23:47.513]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:23:47.513]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:23:47.513]                       search = base::search(), system = base::Sys.info())
[13:23:47.513]                   }
[13:23:47.513]                   ...future.conditions[[length(...future.conditions) + 
[13:23:47.513]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:23:47.513]                     cond$call), session = sessionInformation(), 
[13:23:47.513]                     timestamp = base::Sys.time(), signaled = 0L)
[13:23:47.513]                   signalCondition(cond)
[13:23:47.513]                 }
[13:23:47.513]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:23:47.513]                 "immediateCondition"))) {
[13:23:47.513]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:23:47.513]                   ...future.conditions[[length(...future.conditions) + 
[13:23:47.513]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:23:47.513]                   if (TRUE && !signal) {
[13:23:47.513]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:23:47.513]                     {
[13:23:47.513]                       inherits <- base::inherits
[13:23:47.513]                       invokeRestart <- base::invokeRestart
[13:23:47.513]                       is.null <- base::is.null
[13:23:47.513]                       muffled <- FALSE
[13:23:47.513]                       if (inherits(cond, "message")) {
[13:23:47.513]                         muffled <- grepl(pattern, "muffleMessage")
[13:23:47.513]                         if (muffled) 
[13:23:47.513]                           invokeRestart("muffleMessage")
[13:23:47.513]                       }
[13:23:47.513]                       else if (inherits(cond, "warning")) {
[13:23:47.513]                         muffled <- grepl(pattern, "muffleWarning")
[13:23:47.513]                         if (muffled) 
[13:23:47.513]                           invokeRestart("muffleWarning")
[13:23:47.513]                       }
[13:23:47.513]                       else if (inherits(cond, "condition")) {
[13:23:47.513]                         if (!is.null(pattern)) {
[13:23:47.513]                           computeRestarts <- base::computeRestarts
[13:23:47.513]                           grepl <- base::grepl
[13:23:47.513]                           restarts <- computeRestarts(cond)
[13:23:47.513]                           for (restart in restarts) {
[13:23:47.513]                             name <- restart$name
[13:23:47.513]                             if (is.null(name)) 
[13:23:47.513]                               next
[13:23:47.513]                             if (!grepl(pattern, name)) 
[13:23:47.513]                               next
[13:23:47.513]                             invokeRestart(restart)
[13:23:47.513]                             muffled <- TRUE
[13:23:47.513]                             break
[13:23:47.513]                           }
[13:23:47.513]                         }
[13:23:47.513]                       }
[13:23:47.513]                       invisible(muffled)
[13:23:47.513]                     }
[13:23:47.513]                     muffleCondition(cond, pattern = "^muffle")
[13:23:47.513]                   }
[13:23:47.513]                 }
[13:23:47.513]                 else {
[13:23:47.513]                   if (TRUE) {
[13:23:47.513]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:23:47.513]                     {
[13:23:47.513]                       inherits <- base::inherits
[13:23:47.513]                       invokeRestart <- base::invokeRestart
[13:23:47.513]                       is.null <- base::is.null
[13:23:47.513]                       muffled <- FALSE
[13:23:47.513]                       if (inherits(cond, "message")) {
[13:23:47.513]                         muffled <- grepl(pattern, "muffleMessage")
[13:23:47.513]                         if (muffled) 
[13:23:47.513]                           invokeRestart("muffleMessage")
[13:23:47.513]                       }
[13:23:47.513]                       else if (inherits(cond, "warning")) {
[13:23:47.513]                         muffled <- grepl(pattern, "muffleWarning")
[13:23:47.513]                         if (muffled) 
[13:23:47.513]                           invokeRestart("muffleWarning")
[13:23:47.513]                       }
[13:23:47.513]                       else if (inherits(cond, "condition")) {
[13:23:47.513]                         if (!is.null(pattern)) {
[13:23:47.513]                           computeRestarts <- base::computeRestarts
[13:23:47.513]                           grepl <- base::grepl
[13:23:47.513]                           restarts <- computeRestarts(cond)
[13:23:47.513]                           for (restart in restarts) {
[13:23:47.513]                             name <- restart$name
[13:23:47.513]                             if (is.null(name)) 
[13:23:47.513]                               next
[13:23:47.513]                             if (!grepl(pattern, name)) 
[13:23:47.513]                               next
[13:23:47.513]                             invokeRestart(restart)
[13:23:47.513]                             muffled <- TRUE
[13:23:47.513]                             break
[13:23:47.513]                           }
[13:23:47.513]                         }
[13:23:47.513]                       }
[13:23:47.513]                       invisible(muffled)
[13:23:47.513]                     }
[13:23:47.513]                     muffleCondition(cond, pattern = "^muffle")
[13:23:47.513]                   }
[13:23:47.513]                 }
[13:23:47.513]             }
[13:23:47.513]         }))
[13:23:47.513]     }, error = function(ex) {
[13:23:47.513]         base::structure(base::list(value = NULL, visible = NULL, 
[13:23:47.513]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:23:47.513]                 ...future.rng), started = ...future.startTime, 
[13:23:47.513]             finished = Sys.time(), session_uuid = NA_character_, 
[13:23:47.513]             version = "1.8"), class = "FutureResult")
[13:23:47.513]     }, finally = {
[13:23:47.513]         if (!identical(...future.workdir, getwd())) 
[13:23:47.513]             setwd(...future.workdir)
[13:23:47.513]         {
[13:23:47.513]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:23:47.513]                 ...future.oldOptions$nwarnings <- NULL
[13:23:47.513]             }
[13:23:47.513]             base::options(...future.oldOptions)
[13:23:47.513]             if (.Platform$OS.type == "windows") {
[13:23:47.513]                 old_names <- names(...future.oldEnvVars)
[13:23:47.513]                 envs <- base::Sys.getenv()
[13:23:47.513]                 names <- names(envs)
[13:23:47.513]                 common <- intersect(names, old_names)
[13:23:47.513]                 added <- setdiff(names, old_names)
[13:23:47.513]                 removed <- setdiff(old_names, names)
[13:23:47.513]                 changed <- common[...future.oldEnvVars[common] != 
[13:23:47.513]                   envs[common]]
[13:23:47.513]                 NAMES <- toupper(changed)
[13:23:47.513]                 args <- list()
[13:23:47.513]                 for (kk in seq_along(NAMES)) {
[13:23:47.513]                   name <- changed[[kk]]
[13:23:47.513]                   NAME <- NAMES[[kk]]
[13:23:47.513]                   if (name != NAME && is.element(NAME, old_names)) 
[13:23:47.513]                     next
[13:23:47.513]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:23:47.513]                 }
[13:23:47.513]                 NAMES <- toupper(added)
[13:23:47.513]                 for (kk in seq_along(NAMES)) {
[13:23:47.513]                   name <- added[[kk]]
[13:23:47.513]                   NAME <- NAMES[[kk]]
[13:23:47.513]                   if (name != NAME && is.element(NAME, old_names)) 
[13:23:47.513]                     next
[13:23:47.513]                   args[[name]] <- ""
[13:23:47.513]                 }
[13:23:47.513]                 NAMES <- toupper(removed)
[13:23:47.513]                 for (kk in seq_along(NAMES)) {
[13:23:47.513]                   name <- removed[[kk]]
[13:23:47.513]                   NAME <- NAMES[[kk]]
[13:23:47.513]                   if (name != NAME && is.element(NAME, old_names)) 
[13:23:47.513]                     next
[13:23:47.513]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:23:47.513]                 }
[13:23:47.513]                 if (length(args) > 0) 
[13:23:47.513]                   base::do.call(base::Sys.setenv, args = args)
[13:23:47.513]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:23:47.513]             }
[13:23:47.513]             else {
[13:23:47.513]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:23:47.513]             }
[13:23:47.513]             {
[13:23:47.513]                 if (base::length(...future.futureOptionsAdded) > 
[13:23:47.513]                   0L) {
[13:23:47.513]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:23:47.513]                   base::names(opts) <- ...future.futureOptionsAdded
[13:23:47.513]                   base::options(opts)
[13:23:47.513]                 }
[13:23:47.513]                 {
[13:23:47.513]                   {
[13:23:47.513]                     base::options(mc.cores = ...future.mc.cores.old)
[13:23:47.513]                     NULL
[13:23:47.513]                   }
[13:23:47.513]                   options(future.plan = NULL)
[13:23:47.513]                   if (is.na(NA_character_)) 
[13:23:47.513]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:23:47.513]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:23:47.513]                   future::plan(list(function (..., envir = parent.frame()) 
[13:23:47.513]                   {
[13:23:47.513]                     future <- SequentialFuture(..., envir = envir)
[13:23:47.513]                     if (!future$lazy) 
[13:23:47.513]                       future <- run(future)
[13:23:47.513]                     invisible(future)
[13:23:47.513]                   }), .cleanup = FALSE, .init = FALSE)
[13:23:47.513]                 }
[13:23:47.513]             }
[13:23:47.513]         }
[13:23:47.513]     })
[13:23:47.513]     if (TRUE) {
[13:23:47.513]         base::sink(type = "output", split = FALSE)
[13:23:47.513]         if (TRUE) {
[13:23:47.513]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:23:47.513]         }
[13:23:47.513]         else {
[13:23:47.513]             ...future.result["stdout"] <- base::list(NULL)
[13:23:47.513]         }
[13:23:47.513]         base::close(...future.stdout)
[13:23:47.513]         ...future.stdout <- NULL
[13:23:47.513]     }
[13:23:47.513]     ...future.result$conditions <- ...future.conditions
[13:23:47.513]     ...future.result$finished <- base::Sys.time()
[13:23:47.513]     ...future.result
[13:23:47.513] }
[13:23:47.517] MultisessionFuture started
MultisessionFuture:
Label: ‘<none>’
Expression:
{
    stop(structure(list(message = "boom"), class = c("MyError", 
        "error", "condition")))
}
Lazy evaluation: FALSE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: FALSE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: c1010526-43cf-67f3-5528-f283513a2221
Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:23:47.528] result() for ClusterFuture ...
[13:23:47.528] receiveMessageFromWorker() for ClusterFuture ...
[13:23:47.528] - Validating connection of MultisessionFuture
[13:23:47.562] - received message: FutureResult
[13:23:47.562] - Received FutureResult
[13:23:47.562] - Erased future from FutureRegistry
[13:23:47.562] result() for ClusterFuture ...
[13:23:47.563] - result already collected: FutureResult
[13:23:47.563] result() for ClusterFuture ... done
[13:23:47.563] signalConditions() ...
[13:23:47.563]  - include = ‘immediateCondition’
[13:23:47.563]  - exclude = 
[13:23:47.563]  - resignal = FALSE
[13:23:47.563]  - Number of conditions: 1
[13:23:47.563] signalConditions() ... done
[13:23:47.563] receiveMessageFromWorker() for ClusterFuture ... done
[13:23:47.563] result() for ClusterFuture ... done
[13:23:47.563] result() for ClusterFuture ...
[13:23:47.564] - result already collected: FutureResult
[13:23:47.564] result() for ClusterFuture ... done
[13:23:47.564] signalConditions() ...
[13:23:47.564]  - include = ‘immediateCondition’
[13:23:47.564]  - exclude = 
[13:23:47.564]  - resignal = FALSE
[13:23:47.564]  - Number of conditions: 1
[13:23:47.564] signalConditions() ... done
<MyError: boom>
[13:23:47.564] result() for ClusterFuture ...
[13:23:47.565] - result already collected: FutureResult
[13:23:47.565] result() for ClusterFuture ... done
[13:23:47.565] result() for ClusterFuture ...
[13:23:47.565] - result already collected: FutureResult
[13:23:47.565] result() for ClusterFuture ... done
[13:23:47.565] signalConditions() ...
[13:23:47.565]  - include = ‘immediateCondition’
[13:23:47.565]  - exclude = 
[13:23:47.565]  - resignal = FALSE
[13:23:47.565]  - Number of conditions: 1
[13:23:47.565] signalConditions() ... done
[13:23:47.566] Future state: ‘finished’
[13:23:47.566] result() for ClusterFuture ...
[13:23:47.566] - result already collected: FutureResult
[13:23:47.566] result() for ClusterFuture ... done
[13:23:47.566] signalConditions() ...
[13:23:47.566]  - include = ‘condition’
[13:23:47.566]  - exclude = ‘immediateCondition’
[13:23:47.566]  - resignal = TRUE
[13:23:47.566]  - Number of conditions: 1
[13:23:47.566]  - Condition #1: ‘MyError’, ‘error’, ‘condition’
[13:23:47.566] signalConditions() ... done
Testing with 2 cores ... DONE
> 
> 
> message("*** multisession() - too large globals ...")
*** multisession() - too large globals ...
> ooptsT <- options(future.globals.maxSize = object.size(1:1014))
> 
> limit <- getOption("future.globals.maxSize")
> cat(sprintf("Max total size of globals: %g bytes\n", limit))
Max total size of globals: 4104 bytes
> 
> for (workers in unique(c(1L, availableCores()))) {
+   ## Speed up CRAN checks: Skip on CRAN Windows 32-bit
+   if (!fullTest && isWin32) next
+   
+   message("Max number of sessions: ", workers)
+ 
+   ## A large object
+   a <- 1:1014
+   yTruth <- sum(a)
+   size <- object.size(a)
+   cat(sprintf("a: %g bytes\n", size))
+   f <- multisession({ sum(a) }, globals = TRUE, workers = workers)
+   print(f)
+   rm(list = "a")
+   v <- value(f)
+   print(v)
+   stopifnot(v == yTruth)
+ 
+ 
+   ## A too large object
+   a <- 1:1015
+   yTruth <- sum(a)
+   size <- object.size(a)
+   cat(sprintf("a: %g bytes\n", size))
+   res <- try(f <- multisession({ sum(a) }, globals = TRUE, workers = workers), silent = TRUE)
+   rm(list = "a")
+   stopifnot(inherits(res, "try-error"))
+ } ## for (workers in ...)
Max number of sessions: 1
a: 4104 bytes
[13:23:47.583] getGlobalsAndPackages() ...
[13:23:47.583] Searching for globals...
[13:23:47.584] - globals found: [3] ‘{’, ‘sum’, ‘a’
[13:23:47.584] Searching for globals ... DONE
[13:23:47.584] Resolving globals: FALSE
[13:23:47.584] The total size of the 1 globals is 4.01 KiB (4104 bytes)
[13:23:47.585] The total size of the 1 globals exported for future expression (‘{; sum(a); }’) is 4.01 KiB.. This exceeds the maximum allowed size of 4.01 KiB (option 'future.globals.maxSize'). There is one global: ‘a’ (4.01 KiB of class ‘numeric’)
[13:23:47.585] - globals: [1] ‘a’
[13:23:47.585] 
[13:23:47.585] getGlobalsAndPackages() ... DONE
SequentialFuture:
Label: ‘<none>’
Expression:
{
    sum(a)
}
Lazy evaluation: TRUE
Asynchronous evaluation: FALSE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: 1 objects totaling 4.01 KiB (integer ‘a’ of 4.01 KiB)
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: FALSE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: c1010526-43cf-67f3-5528-f283513a2221
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[13:23:47.586] Packages needed by the future expression (n = 0): <none>
[13:23:47.586] Packages needed by future strategies (n = 0): <none>
[13:23:47.586] {
[13:23:47.586]     {
[13:23:47.586]         {
[13:23:47.586]             ...future.startTime <- base::Sys.time()
[13:23:47.586]             {
[13:23:47.586]                 {
[13:23:47.586]                   {
[13:23:47.586]                     base::local({
[13:23:47.586]                       has_future <- base::requireNamespace("future", 
[13:23:47.586]                         quietly = TRUE)
[13:23:47.586]                       if (has_future) {
[13:23:47.586]                         ns <- base::getNamespace("future")
[13:23:47.586]                         version <- ns[[".package"]][["version"]]
[13:23:47.586]                         if (is.null(version)) 
[13:23:47.586]                           version <- utils::packageVersion("future")
[13:23:47.586]                       }
[13:23:47.586]                       else {
[13:23:47.586]                         version <- NULL
[13:23:47.586]                       }
[13:23:47.586]                       if (!has_future || version < "1.8.0") {
[13:23:47.586]                         info <- base::c(r_version = base::gsub("R version ", 
[13:23:47.586]                           "", base::R.version$version.string), 
[13:23:47.586]                           platform = base::sprintf("%s (%s-bit)", 
[13:23:47.586]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:23:47.586]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[13:23:47.586]                             "release", "version")], collapse = " "), 
[13:23:47.586]                           hostname = base::Sys.info()[["nodename"]])
[13:23:47.586]                         info <- base::sprintf("%s: %s", base::names(info), 
[13:23:47.586]                           info)
[13:23:47.586]                         info <- base::paste(info, collapse = "; ")
[13:23:47.586]                         if (!has_future) {
[13:23:47.586]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:23:47.586]                             info)
[13:23:47.586]                         }
[13:23:47.586]                         else {
[13:23:47.586]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:23:47.586]                             info, version)
[13:23:47.586]                         }
[13:23:47.586]                         base::stop(msg)
[13:23:47.586]                       }
[13:23:47.586]                     })
[13:23:47.586]                   }
[13:23:47.586]                   options(future.plan = NULL)
[13:23:47.586]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:23:47.586]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:23:47.586]                 }
[13:23:47.586]                 ...future.workdir <- getwd()
[13:23:47.586]             }
[13:23:47.586]             ...future.oldOptions <- base::as.list(base::.Options)
[13:23:47.586]             ...future.oldEnvVars <- base::Sys.getenv()
[13:23:47.586]         }
[13:23:47.586]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:23:47.586]             future.globals.maxSize = 4104, future.globals.method = NULL, 
[13:23:47.586]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:23:47.586]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:23:47.586]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:23:47.586]             future.stdout.windows.reencode = NULL, width = 80L)
[13:23:47.586]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:23:47.586]             base::names(...future.oldOptions))
[13:23:47.586]     }
[13:23:47.586]     if (FALSE) {
[13:23:47.586]     }
[13:23:47.586]     else {
[13:23:47.586]         if (TRUE) {
[13:23:47.586]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:23:47.586]                 open = "w")
[13:23:47.586]         }
[13:23:47.586]         else {
[13:23:47.586]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:23:47.586]                 windows = "NUL", "/dev/null"), open = "w")
[13:23:47.586]         }
[13:23:47.586]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:23:47.586]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:23:47.586]             base::sink(type = "output", split = FALSE)
[13:23:47.586]             base::close(...future.stdout)
[13:23:47.586]         }, add = TRUE)
[13:23:47.586]     }
[13:23:47.586]     ...future.frame <- base::sys.nframe()
[13:23:47.586]     ...future.conditions <- base::list()
[13:23:47.586]     ...future.rng <- base::globalenv()$.Random.seed
[13:23:47.586]     if (FALSE) {
[13:23:47.586]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:23:47.586]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:23:47.586]     }
[13:23:47.586]     ...future.result <- base::tryCatch({
[13:23:47.586]         base::withCallingHandlers({
[13:23:47.586]             ...future.value <- base::withVisible(base::local({
[13:23:47.586]                 sum(a)
[13:23:47.586]             }))
[13:23:47.586]             future::FutureResult(value = ...future.value$value, 
[13:23:47.586]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:23:47.586]                   ...future.rng), globalenv = if (FALSE) 
[13:23:47.586]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:23:47.586]                     ...future.globalenv.names))
[13:23:47.586]                 else NULL, started = ...future.startTime, version = "1.8")
[13:23:47.586]         }, condition = base::local({
[13:23:47.586]             c <- base::c
[13:23:47.586]             inherits <- base::inherits
[13:23:47.586]             invokeRestart <- base::invokeRestart
[13:23:47.586]             length <- base::length
[13:23:47.586]             list <- base::list
[13:23:47.586]             seq.int <- base::seq.int
[13:23:47.586]             signalCondition <- base::signalCondition
[13:23:47.586]             sys.calls <- base::sys.calls
[13:23:47.586]             `[[` <- base::`[[`
[13:23:47.586]             `+` <- base::`+`
[13:23:47.586]             `<<-` <- base::`<<-`
[13:23:47.586]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:23:47.586]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:23:47.586]                   3L)]
[13:23:47.586]             }
[13:23:47.586]             function(cond) {
[13:23:47.586]                 is_error <- inherits(cond, "error")
[13:23:47.586]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:23:47.586]                   NULL)
[13:23:47.586]                 if (is_error) {
[13:23:47.586]                   sessionInformation <- function() {
[13:23:47.586]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:23:47.586]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:23:47.586]                       search = base::search(), system = base::Sys.info())
[13:23:47.586]                   }
[13:23:47.586]                   ...future.conditions[[length(...future.conditions) + 
[13:23:47.586]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:23:47.586]                     cond$call), session = sessionInformation(), 
[13:23:47.586]                     timestamp = base::Sys.time(), signaled = 0L)
[13:23:47.586]                   signalCondition(cond)
[13:23:47.586]                 }
[13:23:47.586]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:23:47.586]                 "immediateCondition"))) {
[13:23:47.586]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:23:47.586]                   ...future.conditions[[length(...future.conditions) + 
[13:23:47.586]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:23:47.586]                   if (TRUE && !signal) {
[13:23:47.586]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:23:47.586]                     {
[13:23:47.586]                       inherits <- base::inherits
[13:23:47.586]                       invokeRestart <- base::invokeRestart
[13:23:47.586]                       is.null <- base::is.null
[13:23:47.586]                       muffled <- FALSE
[13:23:47.586]                       if (inherits(cond, "message")) {
[13:23:47.586]                         muffled <- grepl(pattern, "muffleMessage")
[13:23:47.586]                         if (muffled) 
[13:23:47.586]                           invokeRestart("muffleMessage")
[13:23:47.586]                       }
[13:23:47.586]                       else if (inherits(cond, "warning")) {
[13:23:47.586]                         muffled <- grepl(pattern, "muffleWarning")
[13:23:47.586]                         if (muffled) 
[13:23:47.586]                           invokeRestart("muffleWarning")
[13:23:47.586]                       }
[13:23:47.586]                       else if (inherits(cond, "condition")) {
[13:23:47.586]                         if (!is.null(pattern)) {
[13:23:47.586]                           computeRestarts <- base::computeRestarts
[13:23:47.586]                           grepl <- base::grepl
[13:23:47.586]                           restarts <- computeRestarts(cond)
[13:23:47.586]                           for (restart in restarts) {
[13:23:47.586]                             name <- restart$name
[13:23:47.586]                             if (is.null(name)) 
[13:23:47.586]                               next
[13:23:47.586]                             if (!grepl(pattern, name)) 
[13:23:47.586]                               next
[13:23:47.586]                             invokeRestart(restart)
[13:23:47.586]                             muffled <- TRUE
[13:23:47.586]                             break
[13:23:47.586]                           }
[13:23:47.586]                         }
[13:23:47.586]                       }
[13:23:47.586]                       invisible(muffled)
[13:23:47.586]                     }
[13:23:47.586]                     muffleCondition(cond, pattern = "^muffle")
[13:23:47.586]                   }
[13:23:47.586]                 }
[13:23:47.586]                 else {
[13:23:47.586]                   if (TRUE) {
[13:23:47.586]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:23:47.586]                     {
[13:23:47.586]                       inherits <- base::inherits
[13:23:47.586]                       invokeRestart <- base::invokeRestart
[13:23:47.586]                       is.null <- base::is.null
[13:23:47.586]                       muffled <- FALSE
[13:23:47.586]                       if (inherits(cond, "message")) {
[13:23:47.586]                         muffled <- grepl(pattern, "muffleMessage")
[13:23:47.586]                         if (muffled) 
[13:23:47.586]                           invokeRestart("muffleMessage")
[13:23:47.586]                       }
[13:23:47.586]                       else if (inherits(cond, "warning")) {
[13:23:47.586]                         muffled <- grepl(pattern, "muffleWarning")
[13:23:47.586]                         if (muffled) 
[13:23:47.586]                           invokeRestart("muffleWarning")
[13:23:47.586]                       }
[13:23:47.586]                       else if (inherits(cond, "condition")) {
[13:23:47.586]                         if (!is.null(pattern)) {
[13:23:47.586]                           computeRestarts <- base::computeRestarts
[13:23:47.586]                           grepl <- base::grepl
[13:23:47.586]                           restarts <- computeRestarts(cond)
[13:23:47.586]                           for (restart in restarts) {
[13:23:47.586]                             name <- restart$name
[13:23:47.586]                             if (is.null(name)) 
[13:23:47.586]                               next
[13:23:47.586]                             if (!grepl(pattern, name)) 
[13:23:47.586]                               next
[13:23:47.586]                             invokeRestart(restart)
[13:23:47.586]                             muffled <- TRUE
[13:23:47.586]                             break
[13:23:47.586]                           }
[13:23:47.586]                         }
[13:23:47.586]                       }
[13:23:47.586]                       invisible(muffled)
[13:23:47.586]                     }
[13:23:47.586]                     muffleCondition(cond, pattern = "^muffle")
[13:23:47.586]                   }
[13:23:47.586]                 }
[13:23:47.586]             }
[13:23:47.586]         }))
[13:23:47.586]     }, error = function(ex) {
[13:23:47.586]         base::structure(base::list(value = NULL, visible = NULL, 
[13:23:47.586]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:23:47.586]                 ...future.rng), started = ...future.startTime, 
[13:23:47.586]             finished = Sys.time(), session_uuid = NA_character_, 
[13:23:47.586]             version = "1.8"), class = "FutureResult")
[13:23:47.586]     }, finally = {
[13:23:47.586]         if (!identical(...future.workdir, getwd())) 
[13:23:47.586]             setwd(...future.workdir)
[13:23:47.586]         {
[13:23:47.586]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:23:47.586]                 ...future.oldOptions$nwarnings <- NULL
[13:23:47.586]             }
[13:23:47.586]             base::options(...future.oldOptions)
[13:23:47.586]             if (.Platform$OS.type == "windows") {
[13:23:47.586]                 old_names <- names(...future.oldEnvVars)
[13:23:47.586]                 envs <- base::Sys.getenv()
[13:23:47.586]                 names <- names(envs)
[13:23:47.586]                 common <- intersect(names, old_names)
[13:23:47.586]                 added <- setdiff(names, old_names)
[13:23:47.586]                 removed <- setdiff(old_names, names)
[13:23:47.586]                 changed <- common[...future.oldEnvVars[common] != 
[13:23:47.586]                   envs[common]]
[13:23:47.586]                 NAMES <- toupper(changed)
[13:23:47.586]                 args <- list()
[13:23:47.586]                 for (kk in seq_along(NAMES)) {
[13:23:47.586]                   name <- changed[[kk]]
[13:23:47.586]                   NAME <- NAMES[[kk]]
[13:23:47.586]                   if (name != NAME && is.element(NAME, old_names)) 
[13:23:47.586]                     next
[13:23:47.586]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:23:47.586]                 }
[13:23:47.586]                 NAMES <- toupper(added)
[13:23:47.586]                 for (kk in seq_along(NAMES)) {
[13:23:47.586]                   name <- added[[kk]]
[13:23:47.586]                   NAME <- NAMES[[kk]]
[13:23:47.586]                   if (name != NAME && is.element(NAME, old_names)) 
[13:23:47.586]                     next
[13:23:47.586]                   args[[name]] <- ""
[13:23:47.586]                 }
[13:23:47.586]                 NAMES <- toupper(removed)
[13:23:47.586]                 for (kk in seq_along(NAMES)) {
[13:23:47.586]                   name <- removed[[kk]]
[13:23:47.586]                   NAME <- NAMES[[kk]]
[13:23:47.586]                   if (name != NAME && is.element(NAME, old_names)) 
[13:23:47.586]                     next
[13:23:47.586]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:23:47.586]                 }
[13:23:47.586]                 if (length(args) > 0) 
[13:23:47.586]                   base::do.call(base::Sys.setenv, args = args)
[13:23:47.586]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:23:47.586]             }
[13:23:47.586]             else {
[13:23:47.586]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:23:47.586]             }
[13:23:47.586]             {
[13:23:47.586]                 if (base::length(...future.futureOptionsAdded) > 
[13:23:47.586]                   0L) {
[13:23:47.586]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:23:47.586]                   base::names(opts) <- ...future.futureOptionsAdded
[13:23:47.586]                   base::options(opts)
[13:23:47.586]                 }
[13:23:47.586]                 {
[13:23:47.586]                   {
[13:23:47.586]                     NULL
[13:23:47.586]                     RNGkind("Mersenne-Twister")
[13:23:47.586]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[13:23:47.586]                       inherits = FALSE)
[13:23:47.586]                   }
[13:23:47.586]                   options(future.plan = NULL)
[13:23:47.586]                   if (is.na(NA_character_)) 
[13:23:47.586]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:23:47.586]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:23:47.586]                   future::plan(list(function (..., envir = parent.frame()) 
[13:23:47.586]                   {
[13:23:47.586]                     future <- SequentialFuture(..., envir = envir)
[13:23:47.586]                     if (!future$lazy) 
[13:23:47.586]                       future <- run(future)
[13:23:47.586]                     invisible(future)
[13:23:47.586]                   }), .cleanup = FALSE, .init = FALSE)
[13:23:47.586]                 }
[13:23:47.586]             }
[13:23:47.586]         }
[13:23:47.586]     })
[13:23:47.586]     if (TRUE) {
[13:23:47.586]         base::sink(type = "output", split = FALSE)
[13:23:47.586]         if (TRUE) {
[13:23:47.586]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:23:47.586]         }
[13:23:47.586]         else {
[13:23:47.586]             ...future.result["stdout"] <- base::list(NULL)
[13:23:47.586]         }
[13:23:47.586]         base::close(...future.stdout)
[13:23:47.586]         ...future.stdout <- NULL
[13:23:47.586]     }
[13:23:47.586]     ...future.result$conditions <- ...future.conditions
[13:23:47.586]     ...future.result$finished <- base::Sys.time()
[13:23:47.586]     ...future.result
[13:23:47.586] }
[13:23:47.588] assign_globals() ...
[13:23:47.588] List of 1
[13:23:47.588]  $ a: int [1:1014] 1 2 3 4 5 6 7 8 9 10 ...
[13:23:47.588]  - attr(*, "where")=List of 1
[13:23:47.588]   ..$ a:<environment: R_EmptyEnv> 
[13:23:47.588]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[13:23:47.588]  - attr(*, "resolved")= logi FALSE
[13:23:47.588]  - attr(*, "total_size")= num 4104
[13:23:47.591] - copied ‘a’ to environment
[13:23:47.591] assign_globals() ... done
[13:23:47.591] plan(): Setting new future strategy stack:
[13:23:47.591] List of future strategies:
[13:23:47.591] 1. sequential:
[13:23:47.591]    - args: function (..., envir = parent.frame())
[13:23:47.591]    - tweaked: FALSE
[13:23:47.591]    - call: NULL
[13:23:47.591] plan(): nbrOfWorkers() = 1
[13:23:47.592] plan(): Setting new future strategy stack:
[13:23:47.592] List of future strategies:
[13:23:47.592] 1. sequential:
[13:23:47.592]    - args: function (..., envir = parent.frame())
[13:23:47.592]    - tweaked: FALSE
[13:23:47.592]    - call: future::plan("sequential")
[13:23:47.593] plan(): nbrOfWorkers() = 1
[13:23:47.593] SequentialFuture started (and completed)
[1] 514605
a: 4112 bytes
[13:23:47.593] getGlobalsAndPackages() ...
[13:23:47.593] Searching for globals...
[13:23:47.594] - globals found: [3] ‘{’, ‘sum’, ‘a’
[13:23:47.594] Searching for globals ... DONE
[13:23:47.594] Resolving globals: FALSE
[13:23:47.595] The total size of the 1 globals is 4.02 KiB (4112 bytes)
[13:23:47.595] The total size of the 1 globals exported for future expression (‘{; sum(a); }’) is 4.02 KiB.. This exceeds the maximum allowed size of 4.01 KiB (option 'future.globals.maxSize'). There is one global: ‘a’ (4.02 KiB of class ‘numeric’)
Max number of sessions: 2
a: 4104 bytes
[13:23:47.596] getGlobalsAndPackages() ...
[13:23:47.596] Searching for globals...
[13:23:47.596] - globals found: [3] ‘{’, ‘sum’, ‘a’
[13:23:47.597] Searching for globals ... DONE
[13:23:47.597] Resolving globals: FALSE
[13:23:47.597] The total size of the 1 globals is 4.01 KiB (4104 bytes)
[13:23:47.597] The total size of the 1 globals exported for future expression (‘{; sum(a); }’) is 4.01 KiB.. This exceeds the maximum allowed size of 4.01 KiB (option 'future.globals.maxSize'). There is one global: ‘a’ (4.01 KiB of class ‘numeric’)
[13:23:47.597] - globals: [1] ‘a’
[13:23:47.598] 
[13:23:47.598] getGlobalsAndPackages() ... DONE
[13:23:47.608] Packages needed by the future expression (n = 0): <none>
[13:23:47.609] Packages needed by future strategies (n = 0): <none>
[13:23:47.609] {
[13:23:47.609]     {
[13:23:47.609]         {
[13:23:47.609]             ...future.startTime <- base::Sys.time()
[13:23:47.609]             {
[13:23:47.609]                 {
[13:23:47.609]                   {
[13:23:47.609]                     {
[13:23:47.609]                       base::local({
[13:23:47.609]                         has_future <- base::requireNamespace("future", 
[13:23:47.609]                           quietly = TRUE)
[13:23:47.609]                         if (has_future) {
[13:23:47.609]                           ns <- base::getNamespace("future")
[13:23:47.609]                           version <- ns[[".package"]][["version"]]
[13:23:47.609]                           if (is.null(version)) 
[13:23:47.609]                             version <- utils::packageVersion("future")
[13:23:47.609]                         }
[13:23:47.609]                         else {
[13:23:47.609]                           version <- NULL
[13:23:47.609]                         }
[13:23:47.609]                         if (!has_future || version < "1.8.0") {
[13:23:47.609]                           info <- base::c(r_version = base::gsub("R version ", 
[13:23:47.609]                             "", base::R.version$version.string), 
[13:23:47.609]                             platform = base::sprintf("%s (%s-bit)", 
[13:23:47.609]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:23:47.609]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:23:47.609]                               "release", "version")], collapse = " "), 
[13:23:47.609]                             hostname = base::Sys.info()[["nodename"]])
[13:23:47.609]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:23:47.609]                             info)
[13:23:47.609]                           info <- base::paste(info, collapse = "; ")
[13:23:47.609]                           if (!has_future) {
[13:23:47.609]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:23:47.609]                               info)
[13:23:47.609]                           }
[13:23:47.609]                           else {
[13:23:47.609]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:23:47.609]                               info, version)
[13:23:47.609]                           }
[13:23:47.609]                           base::stop(msg)
[13:23:47.609]                         }
[13:23:47.609]                       })
[13:23:47.609]                     }
[13:23:47.609]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[13:23:47.609]                     base::options(mc.cores = 1L)
[13:23:47.609]                   }
[13:23:47.609]                   options(future.plan = NULL)
[13:23:47.609]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:23:47.609]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:23:47.609]                 }
[13:23:47.609]                 ...future.workdir <- getwd()
[13:23:47.609]             }
[13:23:47.609]             ...future.oldOptions <- base::as.list(base::.Options)
[13:23:47.609]             ...future.oldEnvVars <- base::Sys.getenv()
[13:23:47.609]         }
[13:23:47.609]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:23:47.609]             future.globals.maxSize = 4104, future.globals.method = NULL, 
[13:23:47.609]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:23:47.609]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:23:47.609]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:23:47.609]             future.stdout.windows.reencode = NULL, width = 80L)
[13:23:47.609]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:23:47.609]             base::names(...future.oldOptions))
[13:23:47.609]     }
[13:23:47.609]     if (FALSE) {
[13:23:47.609]     }
[13:23:47.609]     else {
[13:23:47.609]         if (TRUE) {
[13:23:47.609]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:23:47.609]                 open = "w")
[13:23:47.609]         }
[13:23:47.609]         else {
[13:23:47.609]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:23:47.609]                 windows = "NUL", "/dev/null"), open = "w")
[13:23:47.609]         }
[13:23:47.609]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:23:47.609]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:23:47.609]             base::sink(type = "output", split = FALSE)
[13:23:47.609]             base::close(...future.stdout)
[13:23:47.609]         }, add = TRUE)
[13:23:47.609]     }
[13:23:47.609]     ...future.frame <- base::sys.nframe()
[13:23:47.609]     ...future.conditions <- base::list()
[13:23:47.609]     ...future.rng <- base::globalenv()$.Random.seed
[13:23:47.609]     if (FALSE) {
[13:23:47.609]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:23:47.609]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:23:47.609]     }
[13:23:47.609]     ...future.result <- base::tryCatch({
[13:23:47.609]         base::withCallingHandlers({
[13:23:47.609]             ...future.value <- base::withVisible(base::local({
[13:23:47.609]                 ...future.makeSendCondition <- base::local({
[13:23:47.609]                   sendCondition <- NULL
[13:23:47.609]                   function(frame = 1L) {
[13:23:47.609]                     if (is.function(sendCondition)) 
[13:23:47.609]                       return(sendCondition)
[13:23:47.609]                     ns <- getNamespace("parallel")
[13:23:47.609]                     if (exists("sendData", mode = "function", 
[13:23:47.609]                       envir = ns)) {
[13:23:47.609]                       parallel_sendData <- get("sendData", mode = "function", 
[13:23:47.609]                         envir = ns)
[13:23:47.609]                       envir <- sys.frame(frame)
[13:23:47.609]                       master <- NULL
[13:23:47.609]                       while (!identical(envir, .GlobalEnv) && 
[13:23:47.609]                         !identical(envir, emptyenv())) {
[13:23:47.609]                         if (exists("master", mode = "list", envir = envir, 
[13:23:47.609]                           inherits = FALSE)) {
[13:23:47.609]                           master <- get("master", mode = "list", 
[13:23:47.609]                             envir = envir, inherits = FALSE)
[13:23:47.609]                           if (inherits(master, c("SOCKnode", 
[13:23:47.609]                             "SOCK0node"))) {
[13:23:47.609]                             sendCondition <<- function(cond) {
[13:23:47.609]                               data <- list(type = "VALUE", value = cond, 
[13:23:47.609]                                 success = TRUE)
[13:23:47.609]                               parallel_sendData(master, data)
[13:23:47.609]                             }
[13:23:47.609]                             return(sendCondition)
[13:23:47.609]                           }
[13:23:47.609]                         }
[13:23:47.609]                         frame <- frame + 1L
[13:23:47.609]                         envir <- sys.frame(frame)
[13:23:47.609]                       }
[13:23:47.609]                     }
[13:23:47.609]                     sendCondition <<- function(cond) NULL
[13:23:47.609]                   }
[13:23:47.609]                 })
[13:23:47.609]                 withCallingHandlers({
[13:23:47.609]                   {
[13:23:47.609]                     sum(a)
[13:23:47.609]                   }
[13:23:47.609]                 }, immediateCondition = function(cond) {
[13:23:47.609]                   sendCondition <- ...future.makeSendCondition()
[13:23:47.609]                   sendCondition(cond)
[13:23:47.609]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:23:47.609]                   {
[13:23:47.609]                     inherits <- base::inherits
[13:23:47.609]                     invokeRestart <- base::invokeRestart
[13:23:47.609]                     is.null <- base::is.null
[13:23:47.609]                     muffled <- FALSE
[13:23:47.609]                     if (inherits(cond, "message")) {
[13:23:47.609]                       muffled <- grepl(pattern, "muffleMessage")
[13:23:47.609]                       if (muffled) 
[13:23:47.609]                         invokeRestart("muffleMessage")
[13:23:47.609]                     }
[13:23:47.609]                     else if (inherits(cond, "warning")) {
[13:23:47.609]                       muffled <- grepl(pattern, "muffleWarning")
[13:23:47.609]                       if (muffled) 
[13:23:47.609]                         invokeRestart("muffleWarning")
[13:23:47.609]                     }
[13:23:47.609]                     else if (inherits(cond, "condition")) {
[13:23:47.609]                       if (!is.null(pattern)) {
[13:23:47.609]                         computeRestarts <- base::computeRestarts
[13:23:47.609]                         grepl <- base::grepl
[13:23:47.609]                         restarts <- computeRestarts(cond)
[13:23:47.609]                         for (restart in restarts) {
[13:23:47.609]                           name <- restart$name
[13:23:47.609]                           if (is.null(name)) 
[13:23:47.609]                             next
[13:23:47.609]                           if (!grepl(pattern, name)) 
[13:23:47.609]                             next
[13:23:47.609]                           invokeRestart(restart)
[13:23:47.609]                           muffled <- TRUE
[13:23:47.609]                           break
[13:23:47.609]                         }
[13:23:47.609]                       }
[13:23:47.609]                     }
[13:23:47.609]                     invisible(muffled)
[13:23:47.609]                   }
[13:23:47.609]                   muffleCondition(cond)
[13:23:47.609]                 })
[13:23:47.609]             }))
[13:23:47.609]             future::FutureResult(value = ...future.value$value, 
[13:23:47.609]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:23:47.609]                   ...future.rng), globalenv = if (FALSE) 
[13:23:47.609]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:23:47.609]                     ...future.globalenv.names))
[13:23:47.609]                 else NULL, started = ...future.startTime, version = "1.8")
[13:23:47.609]         }, condition = base::local({
[13:23:47.609]             c <- base::c
[13:23:47.609]             inherits <- base::inherits
[13:23:47.609]             invokeRestart <- base::invokeRestart
[13:23:47.609]             length <- base::length
[13:23:47.609]             list <- base::list
[13:23:47.609]             seq.int <- base::seq.int
[13:23:47.609]             signalCondition <- base::signalCondition
[13:23:47.609]             sys.calls <- base::sys.calls
[13:23:47.609]             `[[` <- base::`[[`
[13:23:47.609]             `+` <- base::`+`
[13:23:47.609]             `<<-` <- base::`<<-`
[13:23:47.609]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:23:47.609]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:23:47.609]                   3L)]
[13:23:47.609]             }
[13:23:47.609]             function(cond) {
[13:23:47.609]                 is_error <- inherits(cond, "error")
[13:23:47.609]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:23:47.609]                   NULL)
[13:23:47.609]                 if (is_error) {
[13:23:47.609]                   sessionInformation <- function() {
[13:23:47.609]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:23:47.609]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:23:47.609]                       search = base::search(), system = base::Sys.info())
[13:23:47.609]                   }
[13:23:47.609]                   ...future.conditions[[length(...future.conditions) + 
[13:23:47.609]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:23:47.609]                     cond$call), session = sessionInformation(), 
[13:23:47.609]                     timestamp = base::Sys.time(), signaled = 0L)
[13:23:47.609]                   signalCondition(cond)
[13:23:47.609]                 }
[13:23:47.609]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:23:47.609]                 "immediateCondition"))) {
[13:23:47.609]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:23:47.609]                   ...future.conditions[[length(...future.conditions) + 
[13:23:47.609]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:23:47.609]                   if (TRUE && !signal) {
[13:23:47.609]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:23:47.609]                     {
[13:23:47.609]                       inherits <- base::inherits
[13:23:47.609]                       invokeRestart <- base::invokeRestart
[13:23:47.609]                       is.null <- base::is.null
[13:23:47.609]                       muffled <- FALSE
[13:23:47.609]                       if (inherits(cond, "message")) {
[13:23:47.609]                         muffled <- grepl(pattern, "muffleMessage")
[13:23:47.609]                         if (muffled) 
[13:23:47.609]                           invokeRestart("muffleMessage")
[13:23:47.609]                       }
[13:23:47.609]                       else if (inherits(cond, "warning")) {
[13:23:47.609]                         muffled <- grepl(pattern, "muffleWarning")
[13:23:47.609]                         if (muffled) 
[13:23:47.609]                           invokeRestart("muffleWarning")
[13:23:47.609]                       }
[13:23:47.609]                       else if (inherits(cond, "condition")) {
[13:23:47.609]                         if (!is.null(pattern)) {
[13:23:47.609]                           computeRestarts <- base::computeRestarts
[13:23:47.609]                           grepl <- base::grepl
[13:23:47.609]                           restarts <- computeRestarts(cond)
[13:23:47.609]                           for (restart in restarts) {
[13:23:47.609]                             name <- restart$name
[13:23:47.609]                             if (is.null(name)) 
[13:23:47.609]                               next
[13:23:47.609]                             if (!grepl(pattern, name)) 
[13:23:47.609]                               next
[13:23:47.609]                             invokeRestart(restart)
[13:23:47.609]                             muffled <- TRUE
[13:23:47.609]                             break
[13:23:47.609]                           }
[13:23:47.609]                         }
[13:23:47.609]                       }
[13:23:47.609]                       invisible(muffled)
[13:23:47.609]                     }
[13:23:47.609]                     muffleCondition(cond, pattern = "^muffle")
[13:23:47.609]                   }
[13:23:47.609]                 }
[13:23:47.609]                 else {
[13:23:47.609]                   if (TRUE) {
[13:23:47.609]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:23:47.609]                     {
[13:23:47.609]                       inherits <- base::inherits
[13:23:47.609]                       invokeRestart <- base::invokeRestart
[13:23:47.609]                       is.null <- base::is.null
[13:23:47.609]                       muffled <- FALSE
[13:23:47.609]                       if (inherits(cond, "message")) {
[13:23:47.609]                         muffled <- grepl(pattern, "muffleMessage")
[13:23:47.609]                         if (muffled) 
[13:23:47.609]                           invokeRestart("muffleMessage")
[13:23:47.609]                       }
[13:23:47.609]                       else if (inherits(cond, "warning")) {
[13:23:47.609]                         muffled <- grepl(pattern, "muffleWarning")
[13:23:47.609]                         if (muffled) 
[13:23:47.609]                           invokeRestart("muffleWarning")
[13:23:47.609]                       }
[13:23:47.609]                       else if (inherits(cond, "condition")) {
[13:23:47.609]                         if (!is.null(pattern)) {
[13:23:47.609]                           computeRestarts <- base::computeRestarts
[13:23:47.609]                           grepl <- base::grepl
[13:23:47.609]                           restarts <- computeRestarts(cond)
[13:23:47.609]                           for (restart in restarts) {
[13:23:47.609]                             name <- restart$name
[13:23:47.609]                             if (is.null(name)) 
[13:23:47.609]                               next
[13:23:47.609]                             if (!grepl(pattern, name)) 
[13:23:47.609]                               next
[13:23:47.609]                             invokeRestart(restart)
[13:23:47.609]                             muffled <- TRUE
[13:23:47.609]                             break
[13:23:47.609]                           }
[13:23:47.609]                         }
[13:23:47.609]                       }
[13:23:47.609]                       invisible(muffled)
[13:23:47.609]                     }
[13:23:47.609]                     muffleCondition(cond, pattern = "^muffle")
[13:23:47.609]                   }
[13:23:47.609]                 }
[13:23:47.609]             }
[13:23:47.609]         }))
[13:23:47.609]     }, error = function(ex) {
[13:23:47.609]         base::structure(base::list(value = NULL, visible = NULL, 
[13:23:47.609]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:23:47.609]                 ...future.rng), started = ...future.startTime, 
[13:23:47.609]             finished = Sys.time(), session_uuid = NA_character_, 
[13:23:47.609]             version = "1.8"), class = "FutureResult")
[13:23:47.609]     }, finally = {
[13:23:47.609]         if (!identical(...future.workdir, getwd())) 
[13:23:47.609]             setwd(...future.workdir)
[13:23:47.609]         {
[13:23:47.609]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:23:47.609]                 ...future.oldOptions$nwarnings <- NULL
[13:23:47.609]             }
[13:23:47.609]             base::options(...future.oldOptions)
[13:23:47.609]             if (.Platform$OS.type == "windows") {
[13:23:47.609]                 old_names <- names(...future.oldEnvVars)
[13:23:47.609]                 envs <- base::Sys.getenv()
[13:23:47.609]                 names <- names(envs)
[13:23:47.609]                 common <- intersect(names, old_names)
[13:23:47.609]                 added <- setdiff(names, old_names)
[13:23:47.609]                 removed <- setdiff(old_names, names)
[13:23:47.609]                 changed <- common[...future.oldEnvVars[common] != 
[13:23:47.609]                   envs[common]]
[13:23:47.609]                 NAMES <- toupper(changed)
[13:23:47.609]                 args <- list()
[13:23:47.609]                 for (kk in seq_along(NAMES)) {
[13:23:47.609]                   name <- changed[[kk]]
[13:23:47.609]                   NAME <- NAMES[[kk]]
[13:23:47.609]                   if (name != NAME && is.element(NAME, old_names)) 
[13:23:47.609]                     next
[13:23:47.609]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:23:47.609]                 }
[13:23:47.609]                 NAMES <- toupper(added)
[13:23:47.609]                 for (kk in seq_along(NAMES)) {
[13:23:47.609]                   name <- added[[kk]]
[13:23:47.609]                   NAME <- NAMES[[kk]]
[13:23:47.609]                   if (name != NAME && is.element(NAME, old_names)) 
[13:23:47.609]                     next
[13:23:47.609]                   args[[name]] <- ""
[13:23:47.609]                 }
[13:23:47.609]                 NAMES <- toupper(removed)
[13:23:47.609]                 for (kk in seq_along(NAMES)) {
[13:23:47.609]                   name <- removed[[kk]]
[13:23:47.609]                   NAME <- NAMES[[kk]]
[13:23:47.609]                   if (name != NAME && is.element(NAME, old_names)) 
[13:23:47.609]                     next
[13:23:47.609]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:23:47.609]                 }
[13:23:47.609]                 if (length(args) > 0) 
[13:23:47.609]                   base::do.call(base::Sys.setenv, args = args)
[13:23:47.609]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:23:47.609]             }
[13:23:47.609]             else {
[13:23:47.609]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:23:47.609]             }
[13:23:47.609]             {
[13:23:47.609]                 if (base::length(...future.futureOptionsAdded) > 
[13:23:47.609]                   0L) {
[13:23:47.609]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:23:47.609]                   base::names(opts) <- ...future.futureOptionsAdded
[13:23:47.609]                   base::options(opts)
[13:23:47.609]                 }
[13:23:47.609]                 {
[13:23:47.609]                   {
[13:23:47.609]                     base::options(mc.cores = ...future.mc.cores.old)
[13:23:47.609]                     NULL
[13:23:47.609]                   }
[13:23:47.609]                   options(future.plan = NULL)
[13:23:47.609]                   if (is.na(NA_character_)) 
[13:23:47.609]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:23:47.609]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:23:47.609]                   future::plan(list(function (..., envir = parent.frame()) 
[13:23:47.609]                   {
[13:23:47.609]                     future <- SequentialFuture(..., envir = envir)
[13:23:47.609]                     if (!future$lazy) 
[13:23:47.609]                       future <- run(future)
[13:23:47.609]                     invisible(future)
[13:23:47.609]                   }), .cleanup = FALSE, .init = FALSE)
[13:23:47.609]                 }
[13:23:47.609]             }
[13:23:47.609]         }
[13:23:47.609]     })
[13:23:47.609]     if (TRUE) {
[13:23:47.609]         base::sink(type = "output", split = FALSE)
[13:23:47.609]         if (TRUE) {
[13:23:47.609]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:23:47.609]         }
[13:23:47.609]         else {
[13:23:47.609]             ...future.result["stdout"] <- base::list(NULL)
[13:23:47.609]         }
[13:23:47.609]         base::close(...future.stdout)
[13:23:47.609]         ...future.stdout <- NULL
[13:23:47.609]     }
[13:23:47.609]     ...future.result$conditions <- ...future.conditions
[13:23:47.609]     ...future.result$finished <- base::Sys.time()
[13:23:47.609]     ...future.result
[13:23:47.609] }
[13:23:47.612] Exporting 1 global objects (4.01 KiB) to cluster node #1 ...
[13:23:47.612] Exporting ‘a’ (4.01 KiB) to cluster node #1 ...
[13:23:47.612] Exporting ‘a’ (4.01 KiB) to cluster node #1 ... DONE
[13:23:47.612] Exporting 1 global objects (4.01 KiB) to cluster node #1 ... DONE
[13:23:47.613] MultisessionFuture started
MultisessionFuture:
Label: ‘<none>’
Expression:
{
    sum(a)
}
Lazy evaluation: FALSE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: 1 objects totaling 4.01 KiB (integer ‘a’ of 4.01 KiB)
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[13:23:47.614] receiveMessageFromWorker() for ClusterFuture ...
[13:23:47.615] - Validating connection of MultisessionFuture
[13:23:47.615] - received message: FutureResult
[13:23:47.615] - Received FutureResult
[13:23:47.615] - Erased future from FutureRegistry
[13:23:47.615] result() for ClusterFuture ...
[13:23:47.615] - result already collected: FutureResult
[13:23:47.615] result() for ClusterFuture ... done
[13:23:47.615] receiveMessageFromWorker() for ClusterFuture ... done
Resolved: TRUE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: c1010526-43cf-67f3-5528-f283513a2221
Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:23:47.616] result() for ClusterFuture ...
[13:23:47.616] - result already collected: FutureResult
[13:23:47.616] result() for ClusterFuture ... done
[13:23:47.616] result() for ClusterFuture ...
[13:23:47.616] - result already collected: FutureResult
[13:23:47.616] result() for ClusterFuture ... done
[1] 514605
a: 4112 bytes
[13:23:47.616] getGlobalsAndPackages() ...
[13:23:47.617] Searching for globals...
[13:23:47.617] - globals found: [3] ‘{’, ‘sum’, ‘a’
[13:23:47.618] Searching for globals ... DONE
[13:23:47.618] Resolving globals: FALSE
[13:23:47.618] The total size of the 1 globals is 4.02 KiB (4112 bytes)
[13:23:47.618] The total size of the 1 globals exported for future expression (‘{; sum(a); }’) is 4.02 KiB.. This exceeds the maximum allowed size of 4.01 KiB (option 'future.globals.maxSize'). There is one global: ‘a’ (4.02 KiB of class ‘numeric’)
> 
> ## Undo options changed in this test
> options(ooptsT)
> 
> message("*** multisession() - too large globals ... DONE")
*** multisession() - too large globals ... DONE
> 
> message("*** multisession(..., workers = 1L) ...")
*** multisession(..., workers = 1L) ...
> 
> a <- 2
> b <- 3
> yTruth <- a * b
> 
> f <- multisession({ a * b }, globals = TRUE, workers = 1L)
[13:23:47.619] getGlobalsAndPackages() ...
[13:23:47.619] Searching for globals...
[13:23:47.620] - globals found: [4] ‘{’, ‘*’, ‘a’, ‘b’
[13:23:47.620] Searching for globals ... DONE
[13:23:47.620] Resolving globals: FALSE
[13:23:47.620] The total size of the 2 globals is 112 bytes (112 bytes)
[13:23:47.621] The total size of the 2 globals exported for future expression (‘{; a * b; }’) is 112 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘a’ (56 bytes of class ‘numeric’) and ‘b’ (56 bytes of class ‘numeric’)
[13:23:47.621] - globals: [2] ‘a’, ‘b’
[13:23:47.621] 
[13:23:47.621] getGlobalsAndPackages() ... DONE
> rm(list = c("a", "b"))
> 
> v <- value(f)
[13:23:47.622] Packages needed by the future expression (n = 0): <none>
[13:23:47.622] Packages needed by future strategies (n = 0): <none>
[13:23:47.622] {
[13:23:47.622]     {
[13:23:47.622]         {
[13:23:47.622]             ...future.startTime <- base::Sys.time()
[13:23:47.622]             {
[13:23:47.622]                 {
[13:23:47.622]                   {
[13:23:47.622]                     base::local({
[13:23:47.622]                       has_future <- base::requireNamespace("future", 
[13:23:47.622]                         quietly = TRUE)
[13:23:47.622]                       if (has_future) {
[13:23:47.622]                         ns <- base::getNamespace("future")
[13:23:47.622]                         version <- ns[[".package"]][["version"]]
[13:23:47.622]                         if (is.null(version)) 
[13:23:47.622]                           version <- utils::packageVersion("future")
[13:23:47.622]                       }
[13:23:47.622]                       else {
[13:23:47.622]                         version <- NULL
[13:23:47.622]                       }
[13:23:47.622]                       if (!has_future || version < "1.8.0") {
[13:23:47.622]                         info <- base::c(r_version = base::gsub("R version ", 
[13:23:47.622]                           "", base::R.version$version.string), 
[13:23:47.622]                           platform = base::sprintf("%s (%s-bit)", 
[13:23:47.622]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:23:47.622]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[13:23:47.622]                             "release", "version")], collapse = " "), 
[13:23:47.622]                           hostname = base::Sys.info()[["nodename"]])
[13:23:47.622]                         info <- base::sprintf("%s: %s", base::names(info), 
[13:23:47.622]                           info)
[13:23:47.622]                         info <- base::paste(info, collapse = "; ")
[13:23:47.622]                         if (!has_future) {
[13:23:47.622]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:23:47.622]                             info)
[13:23:47.622]                         }
[13:23:47.622]                         else {
[13:23:47.622]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:23:47.622]                             info, version)
[13:23:47.622]                         }
[13:23:47.622]                         base::stop(msg)
[13:23:47.622]                       }
[13:23:47.622]                     })
[13:23:47.622]                   }
[13:23:47.622]                   options(future.plan = NULL)
[13:23:47.622]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:23:47.622]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:23:47.622]                 }
[13:23:47.622]                 ...future.workdir <- getwd()
[13:23:47.622]             }
[13:23:47.622]             ...future.oldOptions <- base::as.list(base::.Options)
[13:23:47.622]             ...future.oldEnvVars <- base::Sys.getenv()
[13:23:47.622]         }
[13:23:47.622]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:23:47.622]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:23:47.622]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:23:47.622]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:23:47.622]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:23:47.622]             future.stdout.windows.reencode = NULL, width = 80L)
[13:23:47.622]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:23:47.622]             base::names(...future.oldOptions))
[13:23:47.622]     }
[13:23:47.622]     if (FALSE) {
[13:23:47.622]     }
[13:23:47.622]     else {
[13:23:47.622]         if (TRUE) {
[13:23:47.622]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:23:47.622]                 open = "w")
[13:23:47.622]         }
[13:23:47.622]         else {
[13:23:47.622]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:23:47.622]                 windows = "NUL", "/dev/null"), open = "w")
[13:23:47.622]         }
[13:23:47.622]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:23:47.622]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:23:47.622]             base::sink(type = "output", split = FALSE)
[13:23:47.622]             base::close(...future.stdout)
[13:23:47.622]         }, add = TRUE)
[13:23:47.622]     }
[13:23:47.622]     ...future.frame <- base::sys.nframe()
[13:23:47.622]     ...future.conditions <- base::list()
[13:23:47.622]     ...future.rng <- base::globalenv()$.Random.seed
[13:23:47.622]     if (FALSE) {
[13:23:47.622]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:23:47.622]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:23:47.622]     }
[13:23:47.622]     ...future.result <- base::tryCatch({
[13:23:47.622]         base::withCallingHandlers({
[13:23:47.622]             ...future.value <- base::withVisible(base::local({
[13:23:47.622]                 a * b
[13:23:47.622]             }))
[13:23:47.622]             future::FutureResult(value = ...future.value$value, 
[13:23:47.622]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:23:47.622]                   ...future.rng), globalenv = if (FALSE) 
[13:23:47.622]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:23:47.622]                     ...future.globalenv.names))
[13:23:47.622]                 else NULL, started = ...future.startTime, version = "1.8")
[13:23:47.622]         }, condition = base::local({
[13:23:47.622]             c <- base::c
[13:23:47.622]             inherits <- base::inherits
[13:23:47.622]             invokeRestart <- base::invokeRestart
[13:23:47.622]             length <- base::length
[13:23:47.622]             list <- base::list
[13:23:47.622]             seq.int <- base::seq.int
[13:23:47.622]             signalCondition <- base::signalCondition
[13:23:47.622]             sys.calls <- base::sys.calls
[13:23:47.622]             `[[` <- base::`[[`
[13:23:47.622]             `+` <- base::`+`
[13:23:47.622]             `<<-` <- base::`<<-`
[13:23:47.622]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:23:47.622]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:23:47.622]                   3L)]
[13:23:47.622]             }
[13:23:47.622]             function(cond) {
[13:23:47.622]                 is_error <- inherits(cond, "error")
[13:23:47.622]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:23:47.622]                   NULL)
[13:23:47.622]                 if (is_error) {
[13:23:47.622]                   sessionInformation <- function() {
[13:23:47.622]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:23:47.622]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:23:47.622]                       search = base::search(), system = base::Sys.info())
[13:23:47.622]                   }
[13:23:47.622]                   ...future.conditions[[length(...future.conditions) + 
[13:23:47.622]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:23:47.622]                     cond$call), session = sessionInformation(), 
[13:23:47.622]                     timestamp = base::Sys.time(), signaled = 0L)
[13:23:47.622]                   signalCondition(cond)
[13:23:47.622]                 }
[13:23:47.622]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:23:47.622]                 "immediateCondition"))) {
[13:23:47.622]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:23:47.622]                   ...future.conditions[[length(...future.conditions) + 
[13:23:47.622]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:23:47.622]                   if (TRUE && !signal) {
[13:23:47.622]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:23:47.622]                     {
[13:23:47.622]                       inherits <- base::inherits
[13:23:47.622]                       invokeRestart <- base::invokeRestart
[13:23:47.622]                       is.null <- base::is.null
[13:23:47.622]                       muffled <- FALSE
[13:23:47.622]                       if (inherits(cond, "message")) {
[13:23:47.622]                         muffled <- grepl(pattern, "muffleMessage")
[13:23:47.622]                         if (muffled) 
[13:23:47.622]                           invokeRestart("muffleMessage")
[13:23:47.622]                       }
[13:23:47.622]                       else if (inherits(cond, "warning")) {
[13:23:47.622]                         muffled <- grepl(pattern, "muffleWarning")
[13:23:47.622]                         if (muffled) 
[13:23:47.622]                           invokeRestart("muffleWarning")
[13:23:47.622]                       }
[13:23:47.622]                       else if (inherits(cond, "condition")) {
[13:23:47.622]                         if (!is.null(pattern)) {
[13:23:47.622]                           computeRestarts <- base::computeRestarts
[13:23:47.622]                           grepl <- base::grepl
[13:23:47.622]                           restarts <- computeRestarts(cond)
[13:23:47.622]                           for (restart in restarts) {
[13:23:47.622]                             name <- restart$name
[13:23:47.622]                             if (is.null(name)) 
[13:23:47.622]                               next
[13:23:47.622]                             if (!grepl(pattern, name)) 
[13:23:47.622]                               next
[13:23:47.622]                             invokeRestart(restart)
[13:23:47.622]                             muffled <- TRUE
[13:23:47.622]                             break
[13:23:47.622]                           }
[13:23:47.622]                         }
[13:23:47.622]                       }
[13:23:47.622]                       invisible(muffled)
[13:23:47.622]                     }
[13:23:47.622]                     muffleCondition(cond, pattern = "^muffle")
[13:23:47.622]                   }
[13:23:47.622]                 }
[13:23:47.622]                 else {
[13:23:47.622]                   if (TRUE) {
[13:23:47.622]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:23:47.622]                     {
[13:23:47.622]                       inherits <- base::inherits
[13:23:47.622]                       invokeRestart <- base::invokeRestart
[13:23:47.622]                       is.null <- base::is.null
[13:23:47.622]                       muffled <- FALSE
[13:23:47.622]                       if (inherits(cond, "message")) {
[13:23:47.622]                         muffled <- grepl(pattern, "muffleMessage")
[13:23:47.622]                         if (muffled) 
[13:23:47.622]                           invokeRestart("muffleMessage")
[13:23:47.622]                       }
[13:23:47.622]                       else if (inherits(cond, "warning")) {
[13:23:47.622]                         muffled <- grepl(pattern, "muffleWarning")
[13:23:47.622]                         if (muffled) 
[13:23:47.622]                           invokeRestart("muffleWarning")
[13:23:47.622]                       }
[13:23:47.622]                       else if (inherits(cond, "condition")) {
[13:23:47.622]                         if (!is.null(pattern)) {
[13:23:47.622]                           computeRestarts <- base::computeRestarts
[13:23:47.622]                           grepl <- base::grepl
[13:23:47.622]                           restarts <- computeRestarts(cond)
[13:23:47.622]                           for (restart in restarts) {
[13:23:47.622]                             name <- restart$name
[13:23:47.622]                             if (is.null(name)) 
[13:23:47.622]                               next
[13:23:47.622]                             if (!grepl(pattern, name)) 
[13:23:47.622]                               next
[13:23:47.622]                             invokeRestart(restart)
[13:23:47.622]                             muffled <- TRUE
[13:23:47.622]                             break
[13:23:47.622]                           }
[13:23:47.622]                         }
[13:23:47.622]                       }
[13:23:47.622]                       invisible(muffled)
[13:23:47.622]                     }
[13:23:47.622]                     muffleCondition(cond, pattern = "^muffle")
[13:23:47.622]                   }
[13:23:47.622]                 }
[13:23:47.622]             }
[13:23:47.622]         }))
[13:23:47.622]     }, error = function(ex) {
[13:23:47.622]         base::structure(base::list(value = NULL, visible = NULL, 
[13:23:47.622]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:23:47.622]                 ...future.rng), started = ...future.startTime, 
[13:23:47.622]             finished = Sys.time(), session_uuid = NA_character_, 
[13:23:47.622]             version = "1.8"), class = "FutureResult")
[13:23:47.622]     }, finally = {
[13:23:47.622]         if (!identical(...future.workdir, getwd())) 
[13:23:47.622]             setwd(...future.workdir)
[13:23:47.622]         {
[13:23:47.622]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:23:47.622]                 ...future.oldOptions$nwarnings <- NULL
[13:23:47.622]             }
[13:23:47.622]             base::options(...future.oldOptions)
[13:23:47.622]             if (.Platform$OS.type == "windows") {
[13:23:47.622]                 old_names <- names(...future.oldEnvVars)
[13:23:47.622]                 envs <- base::Sys.getenv()
[13:23:47.622]                 names <- names(envs)
[13:23:47.622]                 common <- intersect(names, old_names)
[13:23:47.622]                 added <- setdiff(names, old_names)
[13:23:47.622]                 removed <- setdiff(old_names, names)
[13:23:47.622]                 changed <- common[...future.oldEnvVars[common] != 
[13:23:47.622]                   envs[common]]
[13:23:47.622]                 NAMES <- toupper(changed)
[13:23:47.622]                 args <- list()
[13:23:47.622]                 for (kk in seq_along(NAMES)) {
[13:23:47.622]                   name <- changed[[kk]]
[13:23:47.622]                   NAME <- NAMES[[kk]]
[13:23:47.622]                   if (name != NAME && is.element(NAME, old_names)) 
[13:23:47.622]                     next
[13:23:47.622]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:23:47.622]                 }
[13:23:47.622]                 NAMES <- toupper(added)
[13:23:47.622]                 for (kk in seq_along(NAMES)) {
[13:23:47.622]                   name <- added[[kk]]
[13:23:47.622]                   NAME <- NAMES[[kk]]
[13:23:47.622]                   if (name != NAME && is.element(NAME, old_names)) 
[13:23:47.622]                     next
[13:23:47.622]                   args[[name]] <- ""
[13:23:47.622]                 }
[13:23:47.622]                 NAMES <- toupper(removed)
[13:23:47.622]                 for (kk in seq_along(NAMES)) {
[13:23:47.622]                   name <- removed[[kk]]
[13:23:47.622]                   NAME <- NAMES[[kk]]
[13:23:47.622]                   if (name != NAME && is.element(NAME, old_names)) 
[13:23:47.622]                     next
[13:23:47.622]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:23:47.622]                 }
[13:23:47.622]                 if (length(args) > 0) 
[13:23:47.622]                   base::do.call(base::Sys.setenv, args = args)
[13:23:47.622]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:23:47.622]             }
[13:23:47.622]             else {
[13:23:47.622]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:23:47.622]             }
[13:23:47.622]             {
[13:23:47.622]                 if (base::length(...future.futureOptionsAdded) > 
[13:23:47.622]                   0L) {
[13:23:47.622]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:23:47.622]                   base::names(opts) <- ...future.futureOptionsAdded
[13:23:47.622]                   base::options(opts)
[13:23:47.622]                 }
[13:23:47.622]                 {
[13:23:47.622]                   {
[13:23:47.622]                     NULL
[13:23:47.622]                     RNGkind("Mersenne-Twister")
[13:23:47.622]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[13:23:47.622]                       inherits = FALSE)
[13:23:47.622]                   }
[13:23:47.622]                   options(future.plan = NULL)
[13:23:47.622]                   if (is.na(NA_character_)) 
[13:23:47.622]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:23:47.622]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:23:47.622]                   future::plan(list(function (..., envir = parent.frame()) 
[13:23:47.622]                   {
[13:23:47.622]                     future <- SequentialFuture(..., envir = envir)
[13:23:47.622]                     if (!future$lazy) 
[13:23:47.622]                       future <- run(future)
[13:23:47.622]                     invisible(future)
[13:23:47.622]                   }), .cleanup = FALSE, .init = FALSE)
[13:23:47.622]                 }
[13:23:47.622]             }
[13:23:47.622]         }
[13:23:47.622]     })
[13:23:47.622]     if (TRUE) {
[13:23:47.622]         base::sink(type = "output", split = FALSE)
[13:23:47.622]         if (TRUE) {
[13:23:47.622]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:23:47.622]         }
[13:23:47.622]         else {
[13:23:47.622]             ...future.result["stdout"] <- base::list(NULL)
[13:23:47.622]         }
[13:23:47.622]         base::close(...future.stdout)
[13:23:47.622]         ...future.stdout <- NULL
[13:23:47.622]     }
[13:23:47.622]     ...future.result$conditions <- ...future.conditions
[13:23:47.622]     ...future.result$finished <- base::Sys.time()
[13:23:47.622]     ...future.result
[13:23:47.622] }
[13:23:47.624] assign_globals() ...
[13:23:47.624] List of 2
[13:23:47.624]  $ a: num 2
[13:23:47.624]  $ b: num 3
[13:23:47.624]  - attr(*, "where")=List of 2
[13:23:47.624]   ..$ a:<environment: R_EmptyEnv> 
[13:23:47.624]   ..$ b:<environment: R_EmptyEnv> 
[13:23:47.624]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[13:23:47.624]  - attr(*, "resolved")= logi FALSE
[13:23:47.624]  - attr(*, "total_size")= num 112
[13:23:47.629] - copied ‘a’ to environment
[13:23:47.629] - copied ‘b’ to environment
[13:23:47.629] assign_globals() ... done
[13:23:47.629] plan(): Setting new future strategy stack:
[13:23:47.629] List of future strategies:
[13:23:47.629] 1. sequential:
[13:23:47.629]    - args: function (..., envir = parent.frame())
[13:23:47.629]    - tweaked: FALSE
[13:23:47.629]    - call: NULL
[13:23:47.630] plan(): nbrOfWorkers() = 1
[13:23:47.630] plan(): Setting new future strategy stack:
[13:23:47.630] List of future strategies:
[13:23:47.630] 1. sequential:
[13:23:47.630]    - args: function (..., envir = parent.frame())
[13:23:47.630]    - tweaked: FALSE
[13:23:47.630]    - call: future::plan("sequential")
[13:23:47.631] plan(): nbrOfWorkers() = 1
[13:23:47.631] SequentialFuture started (and completed)
> print(v)
[1] 6
> stopifnot(v == yTruth)
> 
> message("*** multisession(..., workers = 1L) ... DONE")
*** multisession(..., workers = 1L) ... DONE
> 
> message("*** multisession(..., gc = TRUE) ...")
*** multisession(..., gc = TRUE) ...
> plan(multisession, workers = 2L)
[13:23:47.632] plan(): Setting new future strategy stack:
[13:23:47.632] List of future strategies:
[13:23:47.632] 1. multisession:
[13:23:47.632]    - args: function (..., workers = 2L, envir = parent.frame())
[13:23:47.632]    - tweaked: TRUE
[13:23:47.632]    - call: plan(multisession, workers = 2L)
[13:23:47.647] plan(): plan_init() of ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ...
[13:23:47.647] multisession:
[13:23:47.647] - args: function (..., workers = 2L, envir = parent.frame())
[13:23:47.647] - tweaked: TRUE
[13:23:47.647] - call: plan(multisession, workers = 2L)
[13:23:47.647] getGlobalsAndPackages() ...
[13:23:47.648] Not searching for globals
[13:23:47.648] - globals: [0] <none>
[13:23:47.648] getGlobalsAndPackages() ... DONE
[13:23:47.648] [local output] makeClusterPSOCK() ...
[13:23:47.652] [local output] Workers: [n = 2] ‘localhost’, ‘localhost’
[13:23:47.652] [local output] Base port: 11612
[13:23:47.652] [local output] Getting setup options for 2 cluster nodes ...
[13:23:47.652] [local output]  - Node 1 of 2 ...
[13:23:47.653] [local output] localMachine=TRUE => revtunnel=FALSE

[13:23:47.653] [local output] Rscript port: 11612

[13:23:47.654] [local output]  - Node 2 of 2 ...
[13:23:47.654] [local output] localMachine=TRUE => revtunnel=FALSE

[13:23:47.655] [local output] Rscript port: 11612

[13:23:47.655] [local output] Getting setup options for 2 cluster nodes ... done
[13:23:47.655] [local output]  - Parallel setup requested for some PSOCK nodes
[13:23:47.655] [local output] Setting up PSOCK nodes in parallel
[13:23:47.655] List of 36
[13:23:47.655]  $ worker          : chr "localhost"
[13:23:47.655]   ..- attr(*, "localhost")= logi TRUE
[13:23:47.655]  $ master          : chr "localhost"
[13:23:47.655]  $ port            : int 11612
[13:23:47.655]  $ connectTimeout  : num 120
[13:23:47.655]  $ timeout         : num 2592000
[13:23:47.655]  $ rscript         : chr "'/usr/local/lib/R/bin/Rscript'"
[13:23:47.655]  $ homogeneous     : logi TRUE
[13:23:47.655]  $ rscript_args    : chr "--default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),fi"| __truncated__
[13:23:47.655]  $ rscript_envs    : NULL
[13:23:47.655]  $ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[13:23:47.655]  $ rscript_startup : NULL
[13:23:47.655]  $ rscript_sh      : chr "sh"
[13:23:47.655]  $ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[13:23:47.655]  $ methods         : logi TRUE
[13:23:47.655]  $ socketOptions   : chr "no-delay"
[13:23:47.655]  $ useXDR          : logi FALSE
[13:23:47.655]  $ outfile         : chr "/dev/null"
[13:23:47.655]  $ renice          : int NA
[13:23:47.655]  $ rshcmd          : NULL
[13:23:47.655]  $ user            : chr(0) 
[13:23:47.655]  $ revtunnel       : logi FALSE
[13:23:47.655]  $ rshlogfile      : NULL
[13:23:47.655]  $ rshopts         : chr(0) 
[13:23:47.655]  $ rank            : int 1
[13:23:47.655]  $ manual          : logi FALSE
[13:23:47.655]  $ dryrun          : logi FALSE
[13:23:47.655]  $ quiet           : logi FALSE
[13:23:47.655]  $ setup_strategy  : chr "parallel"
[13:23:47.655]  $ local_cmd       : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[13:23:47.655]  $ pidfile         : chr "/tmp/Rtmp66NXja/worker.rank=1.parallelly.parent=88294.158e644d5b678.pid"
[13:23:47.655]  $ rshcmd_label    : NULL
[13:23:47.655]  $ rsh_call        : NULL
[13:23:47.655]  $ cmd             : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[13:23:47.655]  $ localMachine    : logi TRUE
[13:23:47.655]  $ make_fcn        :function (worker = getOption2("parallelly.localhost.hostname", "localhost"), 
[13:23:47.655]     master = NULL, port, connectTimeout = getOption2("parallelly.makeNodePSOCK.connectTimeout", 
[13:23:47.655]         2 * 60), timeout = getOption2("parallelly.makeNodePSOCK.timeout", 
[13:23:47.655]         30 * 24 * 60 * 60), rscript = NULL, homogeneous = NULL, rscript_args = NULL, 
[13:23:47.655]     rscript_envs = NULL, rscript_libs = NULL, rscript_startup = NULL, rscript_sh = c("auto", 
[13:23:47.655]         "cmd", "sh"), default_packages = c("datasets", "utils", "grDevices", 
[13:23:47.655]         "graphics", "stats", if (methods) "methods"), methods = TRUE, socketOptions = getOption2("parallelly.makeNodePSOCK.socketOptions", 
[13:23:47.655]         "no-delay"), useXDR = getOption2("parallelly.makeNodePSOCK.useXDR", 
[13:23:47.655]         FALSE), outfile = "/dev/null", renice = NA_integer_, rshcmd = getOption2("parallelly.makeNodePSOCK.rshcmd", 
[13:23:47.655]         NULL), user = NULL, revtunnel = NA, rshlogfile = NULL, rshopts = getOption2("parallelly.makeNodePSOCK.rshopts", 
[13:23:47.655]         NULL), rank = 1L, manual = FALSE, dryrun = FALSE, quiet = FALSE, 
[13:23:47.655]     setup_strategy = getOption2("parallelly.makeNodePSOCK.setup_strategy", 
[13:23:47.655]         "parallel"), action = c("launch", "options"), verbose = FALSE)  
[13:23:47.655]  $ arguments       :List of 28
[13:23:47.655]   ..$ worker          : chr "localhost"
[13:23:47.655]   ..$ master          : NULL
[13:23:47.655]   ..$ port            : int 11612
[13:23:47.655]   ..$ connectTimeout  : num 120
[13:23:47.655]   ..$ timeout         : num 2592000
[13:23:47.655]   ..$ rscript         : NULL
[13:23:47.655]   ..$ homogeneous     : NULL
[13:23:47.655]   ..$ rscript_args    : NULL
[13:23:47.655]   ..$ rscript_envs    : NULL
[13:23:47.655]   ..$ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[13:23:47.655]   ..$ rscript_startup : NULL
[13:23:47.655]   ..$ rscript_sh      : chr [1:3] "auto" "cmd" "sh"
[13:23:47.655]   ..$ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[13:23:47.655]   ..$ methods         : logi TRUE
[13:23:47.655]   ..$ socketOptions   : chr "no-delay"
[13:23:47.655]   ..$ useXDR          : logi FALSE
[13:23:47.655]   ..$ outfile         : chr "/dev/null"
[13:23:47.655]   ..$ renice          : int NA
[13:23:47.655]   ..$ rshcmd          : NULL
[13:23:47.655]   ..$ user            : NULL
[13:23:47.655]   ..$ revtunnel       : logi NA
[13:23:47.655]   ..$ rshlogfile      : NULL
[13:23:47.655]   ..$ rshopts         : NULL
[13:23:47.655]   ..$ rank            : int 1
[13:23:47.655]   ..$ manual          : logi FALSE
[13:23:47.655]   ..$ dryrun          : logi FALSE
[13:23:47.655]   ..$ quiet           : logi FALSE
[13:23:47.655]   ..$ setup_strategy  : chr "parallel"
[13:23:47.655]  - attr(*, "class")= chr [1:2] "makeNodePSOCKOptions" "makeNodeOptions"
[13:23:47.673] [local output] System call to launch all workers:
[13:23:47.673] [local output] '/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/Rtmp66NXja/worker.rank=1.parallelly.parent=88294.158e644d5b678.pid")), silent = TRUE)' -e 'options(socketOptions = "no-delay")' -e '.libPaths(c("/usr/local/lib/R/site-library","/usr/local/lib/R/library"))' -e 'workRSOCK <- tryCatch(parallel:::.workRSOCK, error=function(e) parallel:::.slaveRSOCK); workRSOCK()' MASTER=localhost PORT=11612 OUT=/dev/null TIMEOUT=2592000 XDR=FALSE SETUPTIMEOUT=120 SETUPSTRATEGY=parallel
[13:23:47.673] [local output] Starting PSOCK main server
[13:23:47.674] [local output] Workers launched
[13:23:47.674] [local output] Waiting for workers to connect back
[13:23:47.674]  - [local output] 0 workers out of 2 ready
[13:23:47.921]  - [local output] 0 workers out of 2 ready
[13:23:47.921]  - [local output] 1 workers out of 2 ready
[13:23:47.925]  - [local output] 1 workers out of 2 ready
[13:23:47.926]  - [local output] 2 workers out of 2 ready
[13:23:47.926] [local output] Launching of workers completed
[13:23:47.926] [local output] Collecting session information from workers
[13:23:47.927] [local output]  - Worker #1 of 2
[13:23:47.927] [local output]  - Worker #2 of 2
[13:23:47.927] [local output] makeClusterPSOCK() ... done
[13:23:47.938] Packages needed by the future expression (n = 0): <none>
[13:23:47.938] Packages needed by future strategies (n = 0): <none>
[13:23:47.938] {
[13:23:47.938]     {
[13:23:47.938]         {
[13:23:47.938]             ...future.startTime <- base::Sys.time()
[13:23:47.938]             {
[13:23:47.938]                 {
[13:23:47.938]                   {
[13:23:47.938]                     {
[13:23:47.938]                       base::local({
[13:23:47.938]                         has_future <- base::requireNamespace("future", 
[13:23:47.938]                           quietly = TRUE)
[13:23:47.938]                         if (has_future) {
[13:23:47.938]                           ns <- base::getNamespace("future")
[13:23:47.938]                           version <- ns[[".package"]][["version"]]
[13:23:47.938]                           if (is.null(version)) 
[13:23:47.938]                             version <- utils::packageVersion("future")
[13:23:47.938]                         }
[13:23:47.938]                         else {
[13:23:47.938]                           version <- NULL
[13:23:47.938]                         }
[13:23:47.938]                         if (!has_future || version < "1.8.0") {
[13:23:47.938]                           info <- base::c(r_version = base::gsub("R version ", 
[13:23:47.938]                             "", base::R.version$version.string), 
[13:23:47.938]                             platform = base::sprintf("%s (%s-bit)", 
[13:23:47.938]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:23:47.938]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:23:47.938]                               "release", "version")], collapse = " "), 
[13:23:47.938]                             hostname = base::Sys.info()[["nodename"]])
[13:23:47.938]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:23:47.938]                             info)
[13:23:47.938]                           info <- base::paste(info, collapse = "; ")
[13:23:47.938]                           if (!has_future) {
[13:23:47.938]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:23:47.938]                               info)
[13:23:47.938]                           }
[13:23:47.938]                           else {
[13:23:47.938]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:23:47.938]                               info, version)
[13:23:47.938]                           }
[13:23:47.938]                           base::stop(msg)
[13:23:47.938]                         }
[13:23:47.938]                       })
[13:23:47.938]                     }
[13:23:47.938]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[13:23:47.938]                     base::options(mc.cores = 1L)
[13:23:47.938]                   }
[13:23:47.938]                   options(future.plan = NULL)
[13:23:47.938]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:23:47.938]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:23:47.938]                 }
[13:23:47.938]                 ...future.workdir <- getwd()
[13:23:47.938]             }
[13:23:47.938]             ...future.oldOptions <- base::as.list(base::.Options)
[13:23:47.938]             ...future.oldEnvVars <- base::Sys.getenv()
[13:23:47.938]         }
[13:23:47.938]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:23:47.938]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:23:47.938]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:23:47.938]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:23:47.938]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:23:47.938]             future.stdout.windows.reencode = NULL, width = 80L)
[13:23:47.938]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:23:47.938]             base::names(...future.oldOptions))
[13:23:47.938]     }
[13:23:47.938]     if (FALSE) {
[13:23:47.938]     }
[13:23:47.938]     else {
[13:23:47.938]         if (TRUE) {
[13:23:47.938]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:23:47.938]                 open = "w")
[13:23:47.938]         }
[13:23:47.938]         else {
[13:23:47.938]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:23:47.938]                 windows = "NUL", "/dev/null"), open = "w")
[13:23:47.938]         }
[13:23:47.938]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:23:47.938]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:23:47.938]             base::sink(type = "output", split = FALSE)
[13:23:47.938]             base::close(...future.stdout)
[13:23:47.938]         }, add = TRUE)
[13:23:47.938]     }
[13:23:47.938]     ...future.frame <- base::sys.nframe()
[13:23:47.938]     ...future.conditions <- base::list()
[13:23:47.938]     ...future.rng <- base::globalenv()$.Random.seed
[13:23:47.938]     if (FALSE) {
[13:23:47.938]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:23:47.938]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:23:47.938]     }
[13:23:47.938]     ...future.result <- base::tryCatch({
[13:23:47.938]         base::withCallingHandlers({
[13:23:47.938]             ...future.value <- base::withVisible(base::local({
[13:23:47.938]                 ...future.makeSendCondition <- base::local({
[13:23:47.938]                   sendCondition <- NULL
[13:23:47.938]                   function(frame = 1L) {
[13:23:47.938]                     if (is.function(sendCondition)) 
[13:23:47.938]                       return(sendCondition)
[13:23:47.938]                     ns <- getNamespace("parallel")
[13:23:47.938]                     if (exists("sendData", mode = "function", 
[13:23:47.938]                       envir = ns)) {
[13:23:47.938]                       parallel_sendData <- get("sendData", mode = "function", 
[13:23:47.938]                         envir = ns)
[13:23:47.938]                       envir <- sys.frame(frame)
[13:23:47.938]                       master <- NULL
[13:23:47.938]                       while (!identical(envir, .GlobalEnv) && 
[13:23:47.938]                         !identical(envir, emptyenv())) {
[13:23:47.938]                         if (exists("master", mode = "list", envir = envir, 
[13:23:47.938]                           inherits = FALSE)) {
[13:23:47.938]                           master <- get("master", mode = "list", 
[13:23:47.938]                             envir = envir, inherits = FALSE)
[13:23:47.938]                           if (inherits(master, c("SOCKnode", 
[13:23:47.938]                             "SOCK0node"))) {
[13:23:47.938]                             sendCondition <<- function(cond) {
[13:23:47.938]                               data <- list(type = "VALUE", value = cond, 
[13:23:47.938]                                 success = TRUE)
[13:23:47.938]                               parallel_sendData(master, data)
[13:23:47.938]                             }
[13:23:47.938]                             return(sendCondition)
[13:23:47.938]                           }
[13:23:47.938]                         }
[13:23:47.938]                         frame <- frame + 1L
[13:23:47.938]                         envir <- sys.frame(frame)
[13:23:47.938]                       }
[13:23:47.938]                     }
[13:23:47.938]                     sendCondition <<- function(cond) NULL
[13:23:47.938]                   }
[13:23:47.938]                 })
[13:23:47.938]                 withCallingHandlers({
[13:23:47.938]                   NA
[13:23:47.938]                 }, immediateCondition = function(cond) {
[13:23:47.938]                   sendCondition <- ...future.makeSendCondition()
[13:23:47.938]                   sendCondition(cond)
[13:23:47.938]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:23:47.938]                   {
[13:23:47.938]                     inherits <- base::inherits
[13:23:47.938]                     invokeRestart <- base::invokeRestart
[13:23:47.938]                     is.null <- base::is.null
[13:23:47.938]                     muffled <- FALSE
[13:23:47.938]                     if (inherits(cond, "message")) {
[13:23:47.938]                       muffled <- grepl(pattern, "muffleMessage")
[13:23:47.938]                       if (muffled) 
[13:23:47.938]                         invokeRestart("muffleMessage")
[13:23:47.938]                     }
[13:23:47.938]                     else if (inherits(cond, "warning")) {
[13:23:47.938]                       muffled <- grepl(pattern, "muffleWarning")
[13:23:47.938]                       if (muffled) 
[13:23:47.938]                         invokeRestart("muffleWarning")
[13:23:47.938]                     }
[13:23:47.938]                     else if (inherits(cond, "condition")) {
[13:23:47.938]                       if (!is.null(pattern)) {
[13:23:47.938]                         computeRestarts <- base::computeRestarts
[13:23:47.938]                         grepl <- base::grepl
[13:23:47.938]                         restarts <- computeRestarts(cond)
[13:23:47.938]                         for (restart in restarts) {
[13:23:47.938]                           name <- restart$name
[13:23:47.938]                           if (is.null(name)) 
[13:23:47.938]                             next
[13:23:47.938]                           if (!grepl(pattern, name)) 
[13:23:47.938]                             next
[13:23:47.938]                           invokeRestart(restart)
[13:23:47.938]                           muffled <- TRUE
[13:23:47.938]                           break
[13:23:47.938]                         }
[13:23:47.938]                       }
[13:23:47.938]                     }
[13:23:47.938]                     invisible(muffled)
[13:23:47.938]                   }
[13:23:47.938]                   muffleCondition(cond)
[13:23:47.938]                 })
[13:23:47.938]             }))
[13:23:47.938]             future::FutureResult(value = ...future.value$value, 
[13:23:47.938]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:23:47.938]                   ...future.rng), globalenv = if (FALSE) 
[13:23:47.938]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:23:47.938]                     ...future.globalenv.names))
[13:23:47.938]                 else NULL, started = ...future.startTime, version = "1.8")
[13:23:47.938]         }, condition = base::local({
[13:23:47.938]             c <- base::c
[13:23:47.938]             inherits <- base::inherits
[13:23:47.938]             invokeRestart <- base::invokeRestart
[13:23:47.938]             length <- base::length
[13:23:47.938]             list <- base::list
[13:23:47.938]             seq.int <- base::seq.int
[13:23:47.938]             signalCondition <- base::signalCondition
[13:23:47.938]             sys.calls <- base::sys.calls
[13:23:47.938]             `[[` <- base::`[[`
[13:23:47.938]             `+` <- base::`+`
[13:23:47.938]             `<<-` <- base::`<<-`
[13:23:47.938]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:23:47.938]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:23:47.938]                   3L)]
[13:23:47.938]             }
[13:23:47.938]             function(cond) {
[13:23:47.938]                 is_error <- inherits(cond, "error")
[13:23:47.938]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:23:47.938]                   NULL)
[13:23:47.938]                 if (is_error) {
[13:23:47.938]                   sessionInformation <- function() {
[13:23:47.938]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:23:47.938]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:23:47.938]                       search = base::search(), system = base::Sys.info())
[13:23:47.938]                   }
[13:23:47.938]                   ...future.conditions[[length(...future.conditions) + 
[13:23:47.938]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:23:47.938]                     cond$call), session = sessionInformation(), 
[13:23:47.938]                     timestamp = base::Sys.time(), signaled = 0L)
[13:23:47.938]                   signalCondition(cond)
[13:23:47.938]                 }
[13:23:47.938]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:23:47.938]                 "immediateCondition"))) {
[13:23:47.938]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:23:47.938]                   ...future.conditions[[length(...future.conditions) + 
[13:23:47.938]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:23:47.938]                   if (TRUE && !signal) {
[13:23:47.938]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:23:47.938]                     {
[13:23:47.938]                       inherits <- base::inherits
[13:23:47.938]                       invokeRestart <- base::invokeRestart
[13:23:47.938]                       is.null <- base::is.null
[13:23:47.938]                       muffled <- FALSE
[13:23:47.938]                       if (inherits(cond, "message")) {
[13:23:47.938]                         muffled <- grepl(pattern, "muffleMessage")
[13:23:47.938]                         if (muffled) 
[13:23:47.938]                           invokeRestart("muffleMessage")
[13:23:47.938]                       }
[13:23:47.938]                       else if (inherits(cond, "warning")) {
[13:23:47.938]                         muffled <- grepl(pattern, "muffleWarning")
[13:23:47.938]                         if (muffled) 
[13:23:47.938]                           invokeRestart("muffleWarning")
[13:23:47.938]                       }
[13:23:47.938]                       else if (inherits(cond, "condition")) {
[13:23:47.938]                         if (!is.null(pattern)) {
[13:23:47.938]                           computeRestarts <- base::computeRestarts
[13:23:47.938]                           grepl <- base::grepl
[13:23:47.938]                           restarts <- computeRestarts(cond)
[13:23:47.938]                           for (restart in restarts) {
[13:23:47.938]                             name <- restart$name
[13:23:47.938]                             if (is.null(name)) 
[13:23:47.938]                               next
[13:23:47.938]                             if (!grepl(pattern, name)) 
[13:23:47.938]                               next
[13:23:47.938]                             invokeRestart(restart)
[13:23:47.938]                             muffled <- TRUE
[13:23:47.938]                             break
[13:23:47.938]                           }
[13:23:47.938]                         }
[13:23:47.938]                       }
[13:23:47.938]                       invisible(muffled)
[13:23:47.938]                     }
[13:23:47.938]                     muffleCondition(cond, pattern = "^muffle")
[13:23:47.938]                   }
[13:23:47.938]                 }
[13:23:47.938]                 else {
[13:23:47.938]                   if (TRUE) {
[13:23:47.938]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:23:47.938]                     {
[13:23:47.938]                       inherits <- base::inherits
[13:23:47.938]                       invokeRestart <- base::invokeRestart
[13:23:47.938]                       is.null <- base::is.null
[13:23:47.938]                       muffled <- FALSE
[13:23:47.938]                       if (inherits(cond, "message")) {
[13:23:47.938]                         muffled <- grepl(pattern, "muffleMessage")
[13:23:47.938]                         if (muffled) 
[13:23:47.938]                           invokeRestart("muffleMessage")
[13:23:47.938]                       }
[13:23:47.938]                       else if (inherits(cond, "warning")) {
[13:23:47.938]                         muffled <- grepl(pattern, "muffleWarning")
[13:23:47.938]                         if (muffled) 
[13:23:47.938]                           invokeRestart("muffleWarning")
[13:23:47.938]                       }
[13:23:47.938]                       else if (inherits(cond, "condition")) {
[13:23:47.938]                         if (!is.null(pattern)) {
[13:23:47.938]                           computeRestarts <- base::computeRestarts
[13:23:47.938]                           grepl <- base::grepl
[13:23:47.938]                           restarts <- computeRestarts(cond)
[13:23:47.938]                           for (restart in restarts) {
[13:23:47.938]                             name <- restart$name
[13:23:47.938]                             if (is.null(name)) 
[13:23:47.938]                               next
[13:23:47.938]                             if (!grepl(pattern, name)) 
[13:23:47.938]                               next
[13:23:47.938]                             invokeRestart(restart)
[13:23:47.938]                             muffled <- TRUE
[13:23:47.938]                             break
[13:23:47.938]                           }
[13:23:47.938]                         }
[13:23:47.938]                       }
[13:23:47.938]                       invisible(muffled)
[13:23:47.938]                     }
[13:23:47.938]                     muffleCondition(cond, pattern = "^muffle")
[13:23:47.938]                   }
[13:23:47.938]                 }
[13:23:47.938]             }
[13:23:47.938]         }))
[13:23:47.938]     }, error = function(ex) {
[13:23:47.938]         base::structure(base::list(value = NULL, visible = NULL, 
[13:23:47.938]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:23:47.938]                 ...future.rng), started = ...future.startTime, 
[13:23:47.938]             finished = Sys.time(), session_uuid = NA_character_, 
[13:23:47.938]             version = "1.8"), class = "FutureResult")
[13:23:47.938]     }, finally = {
[13:23:47.938]         if (!identical(...future.workdir, getwd())) 
[13:23:47.938]             setwd(...future.workdir)
[13:23:47.938]         {
[13:23:47.938]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:23:47.938]                 ...future.oldOptions$nwarnings <- NULL
[13:23:47.938]             }
[13:23:47.938]             base::options(...future.oldOptions)
[13:23:47.938]             if (.Platform$OS.type == "windows") {
[13:23:47.938]                 old_names <- names(...future.oldEnvVars)
[13:23:47.938]                 envs <- base::Sys.getenv()
[13:23:47.938]                 names <- names(envs)
[13:23:47.938]                 common <- intersect(names, old_names)
[13:23:47.938]                 added <- setdiff(names, old_names)
[13:23:47.938]                 removed <- setdiff(old_names, names)
[13:23:47.938]                 changed <- common[...future.oldEnvVars[common] != 
[13:23:47.938]                   envs[common]]
[13:23:47.938]                 NAMES <- toupper(changed)
[13:23:47.938]                 args <- list()
[13:23:47.938]                 for (kk in seq_along(NAMES)) {
[13:23:47.938]                   name <- changed[[kk]]
[13:23:47.938]                   NAME <- NAMES[[kk]]
[13:23:47.938]                   if (name != NAME && is.element(NAME, old_names)) 
[13:23:47.938]                     next
[13:23:47.938]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:23:47.938]                 }
[13:23:47.938]                 NAMES <- toupper(added)
[13:23:47.938]                 for (kk in seq_along(NAMES)) {
[13:23:47.938]                   name <- added[[kk]]
[13:23:47.938]                   NAME <- NAMES[[kk]]
[13:23:47.938]                   if (name != NAME && is.element(NAME, old_names)) 
[13:23:47.938]                     next
[13:23:47.938]                   args[[name]] <- ""
[13:23:47.938]                 }
[13:23:47.938]                 NAMES <- toupper(removed)
[13:23:47.938]                 for (kk in seq_along(NAMES)) {
[13:23:47.938]                   name <- removed[[kk]]
[13:23:47.938]                   NAME <- NAMES[[kk]]
[13:23:47.938]                   if (name != NAME && is.element(NAME, old_names)) 
[13:23:47.938]                     next
[13:23:47.938]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:23:47.938]                 }
[13:23:47.938]                 if (length(args) > 0) 
[13:23:47.938]                   base::do.call(base::Sys.setenv, args = args)
[13:23:47.938]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:23:47.938]             }
[13:23:47.938]             else {
[13:23:47.938]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:23:47.938]             }
[13:23:47.938]             {
[13:23:47.938]                 if (base::length(...future.futureOptionsAdded) > 
[13:23:47.938]                   0L) {
[13:23:47.938]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:23:47.938]                   base::names(opts) <- ...future.futureOptionsAdded
[13:23:47.938]                   base::options(opts)
[13:23:47.938]                 }
[13:23:47.938]                 {
[13:23:47.938]                   {
[13:23:47.938]                     base::options(mc.cores = ...future.mc.cores.old)
[13:23:47.938]                     NULL
[13:23:47.938]                   }
[13:23:47.938]                   options(future.plan = NULL)
[13:23:47.938]                   if (is.na(NA_character_)) 
[13:23:47.938]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:23:47.938]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:23:47.938]                   future::plan(list(function (..., workers = 2L, 
[13:23:47.938]                     envir = parent.frame()) 
[13:23:47.938]                   strategy(..., workers = workers, envir = envir)), 
[13:23:47.938]                     .cleanup = FALSE, .init = FALSE)
[13:23:47.938]                 }
[13:23:47.938]             }
[13:23:47.938]         }
[13:23:47.938]     })
[13:23:47.938]     if (TRUE) {
[13:23:47.938]         base::sink(type = "output", split = FALSE)
[13:23:47.938]         if (TRUE) {
[13:23:47.938]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:23:47.938]         }
[13:23:47.938]         else {
[13:23:47.938]             ...future.result["stdout"] <- base::list(NULL)
[13:23:47.938]         }
[13:23:47.938]         base::close(...future.stdout)
[13:23:47.938]         ...future.stdout <- NULL
[13:23:47.938]     }
[13:23:47.938]     ...future.result$conditions <- ...future.conditions
[13:23:47.938]     ...future.result$finished <- base::Sys.time()
[13:23:47.938]     ...future.result
[13:23:47.938] }
[13:23:47.992] MultisessionFuture started
[13:23:47.993] result() for ClusterFuture ...
[13:23:47.993] receiveMessageFromWorker() for ClusterFuture ...
[13:23:47.993] - Validating connection of MultisessionFuture
[13:23:48.027] - received message: FutureResult
[13:23:48.027] - Received FutureResult
[13:23:48.027] - Erased future from FutureRegistry
[13:23:48.027] result() for ClusterFuture ...
[13:23:48.027] - result already collected: FutureResult
[13:23:48.028] result() for ClusterFuture ... done
[13:23:48.028] receiveMessageFromWorker() for ClusterFuture ... done
[13:23:48.028] result() for ClusterFuture ... done
[13:23:48.028] result() for ClusterFuture ...
[13:23:48.028] - result already collected: FutureResult
[13:23:48.028] result() for ClusterFuture ... done
[13:23:48.028] plan(): plan_init() of ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ... DONE
[13:23:48.028] plan(): nbrOfWorkers() = 2
> 
> f <- future({ gc() })
[13:23:48.029] getGlobalsAndPackages() ...
[13:23:48.029] Searching for globals...
[13:23:48.030] - globals found: [2] ‘{’, ‘gc’
[13:23:48.030] Searching for globals ... DONE
[13:23:48.030] Resolving globals: FALSE
[13:23:48.030] 
[13:23:48.030] 
[13:23:48.030] getGlobalsAndPackages() ... DONE
[13:23:48.031] run() for ‘Future’ ...
[13:23:48.031] - state: ‘created’
[13:23:48.031] - Future backend: ‘FutureStrategy’, ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[13:23:48.041] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:23:48.042] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[13:23:48.042]   - Field: ‘node’
[13:23:48.042]   - Field: ‘label’
[13:23:48.042]   - Field: ‘local’
[13:23:48.042]   - Field: ‘owner’
[13:23:48.042]   - Field: ‘envir’
[13:23:48.042]   - Field: ‘workers’
[13:23:48.042]   - Field: ‘packages’
[13:23:48.042]   - Field: ‘gc’
[13:23:48.042]   - Field: ‘conditions’
[13:23:48.043]   - Field: ‘persistent’
[13:23:48.043]   - Field: ‘expr’
[13:23:48.043]   - Field: ‘uuid’
[13:23:48.043]   - Field: ‘seed’
[13:23:48.043]   - Field: ‘version’
[13:23:48.043]   - Field: ‘result’
[13:23:48.043]   - Field: ‘asynchronous’
[13:23:48.043]   - Field: ‘calls’
[13:23:48.043]   - Field: ‘globals’
[13:23:48.043]   - Field: ‘stdout’
[13:23:48.043]   - Field: ‘earlySignal’
[13:23:48.044]   - Field: ‘lazy’
[13:23:48.044]   - Field: ‘state’
[13:23:48.044] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[13:23:48.044] - Launch lazy future ...
[13:23:48.044] Packages needed by the future expression (n = 0): <none>
[13:23:48.044] Packages needed by future strategies (n = 0): <none>
[13:23:48.045] {
[13:23:48.045]     {
[13:23:48.045]         {
[13:23:48.045]             ...future.startTime <- base::Sys.time()
[13:23:48.045]             {
[13:23:48.045]                 {
[13:23:48.045]                   {
[13:23:48.045]                     {
[13:23:48.045]                       base::local({
[13:23:48.045]                         has_future <- base::requireNamespace("future", 
[13:23:48.045]                           quietly = TRUE)
[13:23:48.045]                         if (has_future) {
[13:23:48.045]                           ns <- base::getNamespace("future")
[13:23:48.045]                           version <- ns[[".package"]][["version"]]
[13:23:48.045]                           if (is.null(version)) 
[13:23:48.045]                             version <- utils::packageVersion("future")
[13:23:48.045]                         }
[13:23:48.045]                         else {
[13:23:48.045]                           version <- NULL
[13:23:48.045]                         }
[13:23:48.045]                         if (!has_future || version < "1.8.0") {
[13:23:48.045]                           info <- base::c(r_version = base::gsub("R version ", 
[13:23:48.045]                             "", base::R.version$version.string), 
[13:23:48.045]                             platform = base::sprintf("%s (%s-bit)", 
[13:23:48.045]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:23:48.045]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:23:48.045]                               "release", "version")], collapse = " "), 
[13:23:48.045]                             hostname = base::Sys.info()[["nodename"]])
[13:23:48.045]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:23:48.045]                             info)
[13:23:48.045]                           info <- base::paste(info, collapse = "; ")
[13:23:48.045]                           if (!has_future) {
[13:23:48.045]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:23:48.045]                               info)
[13:23:48.045]                           }
[13:23:48.045]                           else {
[13:23:48.045]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:23:48.045]                               info, version)
[13:23:48.045]                           }
[13:23:48.045]                           base::stop(msg)
[13:23:48.045]                         }
[13:23:48.045]                       })
[13:23:48.045]                     }
[13:23:48.045]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[13:23:48.045]                     base::options(mc.cores = 1L)
[13:23:48.045]                   }
[13:23:48.045]                   options(future.plan = NULL)
[13:23:48.045]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:23:48.045]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:23:48.045]                 }
[13:23:48.045]                 ...future.workdir <- getwd()
[13:23:48.045]             }
[13:23:48.045]             ...future.oldOptions <- base::as.list(base::.Options)
[13:23:48.045]             ...future.oldEnvVars <- base::Sys.getenv()
[13:23:48.045]         }
[13:23:48.045]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:23:48.045]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:23:48.045]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:23:48.045]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:23:48.045]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:23:48.045]             future.stdout.windows.reencode = NULL, width = 80L)
[13:23:48.045]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:23:48.045]             base::names(...future.oldOptions))
[13:23:48.045]     }
[13:23:48.045]     if (FALSE) {
[13:23:48.045]     }
[13:23:48.045]     else {
[13:23:48.045]         if (TRUE) {
[13:23:48.045]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:23:48.045]                 open = "w")
[13:23:48.045]         }
[13:23:48.045]         else {
[13:23:48.045]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:23:48.045]                 windows = "NUL", "/dev/null"), open = "w")
[13:23:48.045]         }
[13:23:48.045]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:23:48.045]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:23:48.045]             base::sink(type = "output", split = FALSE)
[13:23:48.045]             base::close(...future.stdout)
[13:23:48.045]         }, add = TRUE)
[13:23:48.045]     }
[13:23:48.045]     ...future.frame <- base::sys.nframe()
[13:23:48.045]     ...future.conditions <- base::list()
[13:23:48.045]     ...future.rng <- base::globalenv()$.Random.seed
[13:23:48.045]     if (FALSE) {
[13:23:48.045]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:23:48.045]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:23:48.045]     }
[13:23:48.045]     ...future.result <- base::tryCatch({
[13:23:48.045]         base::withCallingHandlers({
[13:23:48.045]             ...future.value <- base::withVisible(base::local({
[13:23:48.045]                 ...future.makeSendCondition <- base::local({
[13:23:48.045]                   sendCondition <- NULL
[13:23:48.045]                   function(frame = 1L) {
[13:23:48.045]                     if (is.function(sendCondition)) 
[13:23:48.045]                       return(sendCondition)
[13:23:48.045]                     ns <- getNamespace("parallel")
[13:23:48.045]                     if (exists("sendData", mode = "function", 
[13:23:48.045]                       envir = ns)) {
[13:23:48.045]                       parallel_sendData <- get("sendData", mode = "function", 
[13:23:48.045]                         envir = ns)
[13:23:48.045]                       envir <- sys.frame(frame)
[13:23:48.045]                       master <- NULL
[13:23:48.045]                       while (!identical(envir, .GlobalEnv) && 
[13:23:48.045]                         !identical(envir, emptyenv())) {
[13:23:48.045]                         if (exists("master", mode = "list", envir = envir, 
[13:23:48.045]                           inherits = FALSE)) {
[13:23:48.045]                           master <- get("master", mode = "list", 
[13:23:48.045]                             envir = envir, inherits = FALSE)
[13:23:48.045]                           if (inherits(master, c("SOCKnode", 
[13:23:48.045]                             "SOCK0node"))) {
[13:23:48.045]                             sendCondition <<- function(cond) {
[13:23:48.045]                               data <- list(type = "VALUE", value = cond, 
[13:23:48.045]                                 success = TRUE)
[13:23:48.045]                               parallel_sendData(master, data)
[13:23:48.045]                             }
[13:23:48.045]                             return(sendCondition)
[13:23:48.045]                           }
[13:23:48.045]                         }
[13:23:48.045]                         frame <- frame + 1L
[13:23:48.045]                         envir <- sys.frame(frame)
[13:23:48.045]                       }
[13:23:48.045]                     }
[13:23:48.045]                     sendCondition <<- function(cond) NULL
[13:23:48.045]                   }
[13:23:48.045]                 })
[13:23:48.045]                 withCallingHandlers({
[13:23:48.045]                   {
[13:23:48.045]                     gc()
[13:23:48.045]                   }
[13:23:48.045]                 }, immediateCondition = function(cond) {
[13:23:48.045]                   sendCondition <- ...future.makeSendCondition()
[13:23:48.045]                   sendCondition(cond)
[13:23:48.045]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:23:48.045]                   {
[13:23:48.045]                     inherits <- base::inherits
[13:23:48.045]                     invokeRestart <- base::invokeRestart
[13:23:48.045]                     is.null <- base::is.null
[13:23:48.045]                     muffled <- FALSE
[13:23:48.045]                     if (inherits(cond, "message")) {
[13:23:48.045]                       muffled <- grepl(pattern, "muffleMessage")
[13:23:48.045]                       if (muffled) 
[13:23:48.045]                         invokeRestart("muffleMessage")
[13:23:48.045]                     }
[13:23:48.045]                     else if (inherits(cond, "warning")) {
[13:23:48.045]                       muffled <- grepl(pattern, "muffleWarning")
[13:23:48.045]                       if (muffled) 
[13:23:48.045]                         invokeRestart("muffleWarning")
[13:23:48.045]                     }
[13:23:48.045]                     else if (inherits(cond, "condition")) {
[13:23:48.045]                       if (!is.null(pattern)) {
[13:23:48.045]                         computeRestarts <- base::computeRestarts
[13:23:48.045]                         grepl <- base::grepl
[13:23:48.045]                         restarts <- computeRestarts(cond)
[13:23:48.045]                         for (restart in restarts) {
[13:23:48.045]                           name <- restart$name
[13:23:48.045]                           if (is.null(name)) 
[13:23:48.045]                             next
[13:23:48.045]                           if (!grepl(pattern, name)) 
[13:23:48.045]                             next
[13:23:48.045]                           invokeRestart(restart)
[13:23:48.045]                           muffled <- TRUE
[13:23:48.045]                           break
[13:23:48.045]                         }
[13:23:48.045]                       }
[13:23:48.045]                     }
[13:23:48.045]                     invisible(muffled)
[13:23:48.045]                   }
[13:23:48.045]                   muffleCondition(cond)
[13:23:48.045]                 })
[13:23:48.045]             }))
[13:23:48.045]             future::FutureResult(value = ...future.value$value, 
[13:23:48.045]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:23:48.045]                   ...future.rng), globalenv = if (FALSE) 
[13:23:48.045]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:23:48.045]                     ...future.globalenv.names))
[13:23:48.045]                 else NULL, started = ...future.startTime, version = "1.8")
[13:23:48.045]         }, condition = base::local({
[13:23:48.045]             c <- base::c
[13:23:48.045]             inherits <- base::inherits
[13:23:48.045]             invokeRestart <- base::invokeRestart
[13:23:48.045]             length <- base::length
[13:23:48.045]             list <- base::list
[13:23:48.045]             seq.int <- base::seq.int
[13:23:48.045]             signalCondition <- base::signalCondition
[13:23:48.045]             sys.calls <- base::sys.calls
[13:23:48.045]             `[[` <- base::`[[`
[13:23:48.045]             `+` <- base::`+`
[13:23:48.045]             `<<-` <- base::`<<-`
[13:23:48.045]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:23:48.045]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:23:48.045]                   3L)]
[13:23:48.045]             }
[13:23:48.045]             function(cond) {
[13:23:48.045]                 is_error <- inherits(cond, "error")
[13:23:48.045]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:23:48.045]                   NULL)
[13:23:48.045]                 if (is_error) {
[13:23:48.045]                   sessionInformation <- function() {
[13:23:48.045]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:23:48.045]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:23:48.045]                       search = base::search(), system = base::Sys.info())
[13:23:48.045]                   }
[13:23:48.045]                   ...future.conditions[[length(...future.conditions) + 
[13:23:48.045]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:23:48.045]                     cond$call), session = sessionInformation(), 
[13:23:48.045]                     timestamp = base::Sys.time(), signaled = 0L)
[13:23:48.045]                   signalCondition(cond)
[13:23:48.045]                 }
[13:23:48.045]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:23:48.045]                 "immediateCondition"))) {
[13:23:48.045]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:23:48.045]                   ...future.conditions[[length(...future.conditions) + 
[13:23:48.045]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:23:48.045]                   if (TRUE && !signal) {
[13:23:48.045]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:23:48.045]                     {
[13:23:48.045]                       inherits <- base::inherits
[13:23:48.045]                       invokeRestart <- base::invokeRestart
[13:23:48.045]                       is.null <- base::is.null
[13:23:48.045]                       muffled <- FALSE
[13:23:48.045]                       if (inherits(cond, "message")) {
[13:23:48.045]                         muffled <- grepl(pattern, "muffleMessage")
[13:23:48.045]                         if (muffled) 
[13:23:48.045]                           invokeRestart("muffleMessage")
[13:23:48.045]                       }
[13:23:48.045]                       else if (inherits(cond, "warning")) {
[13:23:48.045]                         muffled <- grepl(pattern, "muffleWarning")
[13:23:48.045]                         if (muffled) 
[13:23:48.045]                           invokeRestart("muffleWarning")
[13:23:48.045]                       }
[13:23:48.045]                       else if (inherits(cond, "condition")) {
[13:23:48.045]                         if (!is.null(pattern)) {
[13:23:48.045]                           computeRestarts <- base::computeRestarts
[13:23:48.045]                           grepl <- base::grepl
[13:23:48.045]                           restarts <- computeRestarts(cond)
[13:23:48.045]                           for (restart in restarts) {
[13:23:48.045]                             name <- restart$name
[13:23:48.045]                             if (is.null(name)) 
[13:23:48.045]                               next
[13:23:48.045]                             if (!grepl(pattern, name)) 
[13:23:48.045]                               next
[13:23:48.045]                             invokeRestart(restart)
[13:23:48.045]                             muffled <- TRUE
[13:23:48.045]                             break
[13:23:48.045]                           }
[13:23:48.045]                         }
[13:23:48.045]                       }
[13:23:48.045]                       invisible(muffled)
[13:23:48.045]                     }
[13:23:48.045]                     muffleCondition(cond, pattern = "^muffle")
[13:23:48.045]                   }
[13:23:48.045]                 }
[13:23:48.045]                 else {
[13:23:48.045]                   if (TRUE) {
[13:23:48.045]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:23:48.045]                     {
[13:23:48.045]                       inherits <- base::inherits
[13:23:48.045]                       invokeRestart <- base::invokeRestart
[13:23:48.045]                       is.null <- base::is.null
[13:23:48.045]                       muffled <- FALSE
[13:23:48.045]                       if (inherits(cond, "message")) {
[13:23:48.045]                         muffled <- grepl(pattern, "muffleMessage")
[13:23:48.045]                         if (muffled) 
[13:23:48.045]                           invokeRestart("muffleMessage")
[13:23:48.045]                       }
[13:23:48.045]                       else if (inherits(cond, "warning")) {
[13:23:48.045]                         muffled <- grepl(pattern, "muffleWarning")
[13:23:48.045]                         if (muffled) 
[13:23:48.045]                           invokeRestart("muffleWarning")
[13:23:48.045]                       }
[13:23:48.045]                       else if (inherits(cond, "condition")) {
[13:23:48.045]                         if (!is.null(pattern)) {
[13:23:48.045]                           computeRestarts <- base::computeRestarts
[13:23:48.045]                           grepl <- base::grepl
[13:23:48.045]                           restarts <- computeRestarts(cond)
[13:23:48.045]                           for (restart in restarts) {
[13:23:48.045]                             name <- restart$name
[13:23:48.045]                             if (is.null(name)) 
[13:23:48.045]                               next
[13:23:48.045]                             if (!grepl(pattern, name)) 
[13:23:48.045]                               next
[13:23:48.045]                             invokeRestart(restart)
[13:23:48.045]                             muffled <- TRUE
[13:23:48.045]                             break
[13:23:48.045]                           }
[13:23:48.045]                         }
[13:23:48.045]                       }
[13:23:48.045]                       invisible(muffled)
[13:23:48.045]                     }
[13:23:48.045]                     muffleCondition(cond, pattern = "^muffle")
[13:23:48.045]                   }
[13:23:48.045]                 }
[13:23:48.045]             }
[13:23:48.045]         }))
[13:23:48.045]     }, error = function(ex) {
[13:23:48.045]         base::structure(base::list(value = NULL, visible = NULL, 
[13:23:48.045]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:23:48.045]                 ...future.rng), started = ...future.startTime, 
[13:23:48.045]             finished = Sys.time(), session_uuid = NA_character_, 
[13:23:48.045]             version = "1.8"), class = "FutureResult")
[13:23:48.045]     }, finally = {
[13:23:48.045]         if (!identical(...future.workdir, getwd())) 
[13:23:48.045]             setwd(...future.workdir)
[13:23:48.045]         {
[13:23:48.045]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:23:48.045]                 ...future.oldOptions$nwarnings <- NULL
[13:23:48.045]             }
[13:23:48.045]             base::options(...future.oldOptions)
[13:23:48.045]             if (.Platform$OS.type == "windows") {
[13:23:48.045]                 old_names <- names(...future.oldEnvVars)
[13:23:48.045]                 envs <- base::Sys.getenv()
[13:23:48.045]                 names <- names(envs)
[13:23:48.045]                 common <- intersect(names, old_names)
[13:23:48.045]                 added <- setdiff(names, old_names)
[13:23:48.045]                 removed <- setdiff(old_names, names)
[13:23:48.045]                 changed <- common[...future.oldEnvVars[common] != 
[13:23:48.045]                   envs[common]]
[13:23:48.045]                 NAMES <- toupper(changed)
[13:23:48.045]                 args <- list()
[13:23:48.045]                 for (kk in seq_along(NAMES)) {
[13:23:48.045]                   name <- changed[[kk]]
[13:23:48.045]                   NAME <- NAMES[[kk]]
[13:23:48.045]                   if (name != NAME && is.element(NAME, old_names)) 
[13:23:48.045]                     next
[13:23:48.045]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:23:48.045]                 }
[13:23:48.045]                 NAMES <- toupper(added)
[13:23:48.045]                 for (kk in seq_along(NAMES)) {
[13:23:48.045]                   name <- added[[kk]]
[13:23:48.045]                   NAME <- NAMES[[kk]]
[13:23:48.045]                   if (name != NAME && is.element(NAME, old_names)) 
[13:23:48.045]                     next
[13:23:48.045]                   args[[name]] <- ""
[13:23:48.045]                 }
[13:23:48.045]                 NAMES <- toupper(removed)
[13:23:48.045]                 for (kk in seq_along(NAMES)) {
[13:23:48.045]                   name <- removed[[kk]]
[13:23:48.045]                   NAME <- NAMES[[kk]]
[13:23:48.045]                   if (name != NAME && is.element(NAME, old_names)) 
[13:23:48.045]                     next
[13:23:48.045]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:23:48.045]                 }
[13:23:48.045]                 if (length(args) > 0) 
[13:23:48.045]                   base::do.call(base::Sys.setenv, args = args)
[13:23:48.045]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:23:48.045]             }
[13:23:48.045]             else {
[13:23:48.045]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:23:48.045]             }
[13:23:48.045]             {
[13:23:48.045]                 if (base::length(...future.futureOptionsAdded) > 
[13:23:48.045]                   0L) {
[13:23:48.045]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:23:48.045]                   base::names(opts) <- ...future.futureOptionsAdded
[13:23:48.045]                   base::options(opts)
[13:23:48.045]                 }
[13:23:48.045]                 {
[13:23:48.045]                   {
[13:23:48.045]                     base::options(mc.cores = ...future.mc.cores.old)
[13:23:48.045]                     NULL
[13:23:48.045]                   }
[13:23:48.045]                   options(future.plan = NULL)
[13:23:48.045]                   if (is.na(NA_character_)) 
[13:23:48.045]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:23:48.045]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:23:48.045]                   future::plan(list(function (..., workers = 2L, 
[13:23:48.045]                     envir = parent.frame()) 
[13:23:48.045]                   strategy(..., workers = workers, envir = envir)), 
[13:23:48.045]                     .cleanup = FALSE, .init = FALSE)
[13:23:48.045]                 }
[13:23:48.045]             }
[13:23:48.045]         }
[13:23:48.045]     })
[13:23:48.045]     if (TRUE) {
[13:23:48.045]         base::sink(type = "output", split = FALSE)
[13:23:48.045]         if (TRUE) {
[13:23:48.045]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:23:48.045]         }
[13:23:48.045]         else {
[13:23:48.045]             ...future.result["stdout"] <- base::list(NULL)
[13:23:48.045]         }
[13:23:48.045]         base::close(...future.stdout)
[13:23:48.045]         ...future.stdout <- NULL
[13:23:48.045]     }
[13:23:48.045]     ...future.result$conditions <- ...future.conditions
[13:23:48.045]     ...future.result$finished <- base::Sys.time()
[13:23:48.045]     ...future.result
[13:23:48.045] }
[13:23:48.048] MultisessionFuture started
[13:23:48.048] - Launch lazy future ... done
[13:23:48.048] run() for ‘MultisessionFuture’ ... done
> v <- value(f)
[13:23:48.048] result() for ClusterFuture ...
[13:23:48.048] receiveMessageFromWorker() for ClusterFuture ...
[13:23:48.049] - Validating connection of MultisessionFuture
[13:23:48.115] - received message: FutureResult
[13:23:48.115] - Received FutureResult
[13:23:48.115] - Erased future from FutureRegistry
[13:23:48.116] result() for ClusterFuture ...
[13:23:48.116] - result already collected: FutureResult
[13:23:48.116] result() for ClusterFuture ... done
[13:23:48.116] receiveMessageFromWorker() for ClusterFuture ... done
[13:23:48.116] result() for ClusterFuture ... done
[13:23:48.116] result() for ClusterFuture ...
[13:23:48.116] - result already collected: FutureResult
[13:23:48.116] result() for ClusterFuture ... done
> print(v)
         used (Mb) gc trigger (Mb) max used (Mb)
Ncells 395068 21.1     836944 44.7   664120 35.5
Vcells 704742  5.4    8388608 64.0  1814359 13.9
> 
> f <- future({ integer(10e6) })
[13:23:48.117] getGlobalsAndPackages() ...
[13:23:48.117] Searching for globals...
[13:23:48.118] - globals found: [2] ‘{’, ‘integer’
[13:23:48.118] Searching for globals ... DONE
[13:23:48.118] Resolving globals: FALSE
[13:23:48.118] 
[13:23:48.118] 
[13:23:48.118] getGlobalsAndPackages() ... DONE
[13:23:48.119] run() for ‘Future’ ...
[13:23:48.119] - state: ‘created’
[13:23:48.119] - Future backend: ‘FutureStrategy’, ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[13:23:48.129] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:23:48.129] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[13:23:48.130]   - Field: ‘node’
[13:23:48.130]   - Field: ‘label’
[13:23:48.130]   - Field: ‘local’
[13:23:48.130]   - Field: ‘owner’
[13:23:48.130]   - Field: ‘envir’
[13:23:48.130]   - Field: ‘workers’
[13:23:48.130]   - Field: ‘packages’
[13:23:48.130]   - Field: ‘gc’
[13:23:48.130]   - Field: ‘conditions’
[13:23:48.130]   - Field: ‘persistent’
[13:23:48.131]   - Field: ‘expr’
[13:23:48.131]   - Field: ‘uuid’
[13:23:48.131]   - Field: ‘seed’
[13:23:48.133]   - Field: ‘version’
[13:23:48.133]   - Field: ‘result’
[13:23:48.133]   - Field: ‘asynchronous’
[13:23:48.133]   - Field: ‘calls’
[13:23:48.133]   - Field: ‘globals’
[13:23:48.133]   - Field: ‘stdout’
[13:23:48.133]   - Field: ‘earlySignal’
[13:23:48.133]   - Field: ‘lazy’
[13:23:48.134]   - Field: ‘state’
[13:23:48.134] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[13:23:48.134] - Launch lazy future ...
[13:23:48.134] Packages needed by the future expression (n = 0): <none>
[13:23:48.134] Packages needed by future strategies (n = 0): <none>
[13:23:48.135] {
[13:23:48.135]     {
[13:23:48.135]         {
[13:23:48.135]             ...future.startTime <- base::Sys.time()
[13:23:48.135]             {
[13:23:48.135]                 {
[13:23:48.135]                   {
[13:23:48.135]                     {
[13:23:48.135]                       base::local({
[13:23:48.135]                         has_future <- base::requireNamespace("future", 
[13:23:48.135]                           quietly = TRUE)
[13:23:48.135]                         if (has_future) {
[13:23:48.135]                           ns <- base::getNamespace("future")
[13:23:48.135]                           version <- ns[[".package"]][["version"]]
[13:23:48.135]                           if (is.null(version)) 
[13:23:48.135]                             version <- utils::packageVersion("future")
[13:23:48.135]                         }
[13:23:48.135]                         else {
[13:23:48.135]                           version <- NULL
[13:23:48.135]                         }
[13:23:48.135]                         if (!has_future || version < "1.8.0") {
[13:23:48.135]                           info <- base::c(r_version = base::gsub("R version ", 
[13:23:48.135]                             "", base::R.version$version.string), 
[13:23:48.135]                             platform = base::sprintf("%s (%s-bit)", 
[13:23:48.135]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:23:48.135]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:23:48.135]                               "release", "version")], collapse = " "), 
[13:23:48.135]                             hostname = base::Sys.info()[["nodename"]])
[13:23:48.135]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:23:48.135]                             info)
[13:23:48.135]                           info <- base::paste(info, collapse = "; ")
[13:23:48.135]                           if (!has_future) {
[13:23:48.135]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:23:48.135]                               info)
[13:23:48.135]                           }
[13:23:48.135]                           else {
[13:23:48.135]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:23:48.135]                               info, version)
[13:23:48.135]                           }
[13:23:48.135]                           base::stop(msg)
[13:23:48.135]                         }
[13:23:48.135]                       })
[13:23:48.135]                     }
[13:23:48.135]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[13:23:48.135]                     base::options(mc.cores = 1L)
[13:23:48.135]                   }
[13:23:48.135]                   options(future.plan = NULL)
[13:23:48.135]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:23:48.135]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:23:48.135]                 }
[13:23:48.135]                 ...future.workdir <- getwd()
[13:23:48.135]             }
[13:23:48.135]             ...future.oldOptions <- base::as.list(base::.Options)
[13:23:48.135]             ...future.oldEnvVars <- base::Sys.getenv()
[13:23:48.135]         }
[13:23:48.135]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:23:48.135]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:23:48.135]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:23:48.135]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:23:48.135]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:23:48.135]             future.stdout.windows.reencode = NULL, width = 80L)
[13:23:48.135]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:23:48.135]             base::names(...future.oldOptions))
[13:23:48.135]     }
[13:23:48.135]     if (FALSE) {
[13:23:48.135]     }
[13:23:48.135]     else {
[13:23:48.135]         if (TRUE) {
[13:23:48.135]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:23:48.135]                 open = "w")
[13:23:48.135]         }
[13:23:48.135]         else {
[13:23:48.135]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:23:48.135]                 windows = "NUL", "/dev/null"), open = "w")
[13:23:48.135]         }
[13:23:48.135]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:23:48.135]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:23:48.135]             base::sink(type = "output", split = FALSE)
[13:23:48.135]             base::close(...future.stdout)
[13:23:48.135]         }, add = TRUE)
[13:23:48.135]     }
[13:23:48.135]     ...future.frame <- base::sys.nframe()
[13:23:48.135]     ...future.conditions <- base::list()
[13:23:48.135]     ...future.rng <- base::globalenv()$.Random.seed
[13:23:48.135]     if (FALSE) {
[13:23:48.135]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:23:48.135]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:23:48.135]     }
[13:23:48.135]     ...future.result <- base::tryCatch({
[13:23:48.135]         base::withCallingHandlers({
[13:23:48.135]             ...future.value <- base::withVisible(base::local({
[13:23:48.135]                 ...future.makeSendCondition <- base::local({
[13:23:48.135]                   sendCondition <- NULL
[13:23:48.135]                   function(frame = 1L) {
[13:23:48.135]                     if (is.function(sendCondition)) 
[13:23:48.135]                       return(sendCondition)
[13:23:48.135]                     ns <- getNamespace("parallel")
[13:23:48.135]                     if (exists("sendData", mode = "function", 
[13:23:48.135]                       envir = ns)) {
[13:23:48.135]                       parallel_sendData <- get("sendData", mode = "function", 
[13:23:48.135]                         envir = ns)
[13:23:48.135]                       envir <- sys.frame(frame)
[13:23:48.135]                       master <- NULL
[13:23:48.135]                       while (!identical(envir, .GlobalEnv) && 
[13:23:48.135]                         !identical(envir, emptyenv())) {
[13:23:48.135]                         if (exists("master", mode = "list", envir = envir, 
[13:23:48.135]                           inherits = FALSE)) {
[13:23:48.135]                           master <- get("master", mode = "list", 
[13:23:48.135]                             envir = envir, inherits = FALSE)
[13:23:48.135]                           if (inherits(master, c("SOCKnode", 
[13:23:48.135]                             "SOCK0node"))) {
[13:23:48.135]                             sendCondition <<- function(cond) {
[13:23:48.135]                               data <- list(type = "VALUE", value = cond, 
[13:23:48.135]                                 success = TRUE)
[13:23:48.135]                               parallel_sendData(master, data)
[13:23:48.135]                             }
[13:23:48.135]                             return(sendCondition)
[13:23:48.135]                           }
[13:23:48.135]                         }
[13:23:48.135]                         frame <- frame + 1L
[13:23:48.135]                         envir <- sys.frame(frame)
[13:23:48.135]                       }
[13:23:48.135]                     }
[13:23:48.135]                     sendCondition <<- function(cond) NULL
[13:23:48.135]                   }
[13:23:48.135]                 })
[13:23:48.135]                 withCallingHandlers({
[13:23:48.135]                   {
[13:23:48.135]                     integer(1e+07)
[13:23:48.135]                   }
[13:23:48.135]                 }, immediateCondition = function(cond) {
[13:23:48.135]                   sendCondition <- ...future.makeSendCondition()
[13:23:48.135]                   sendCondition(cond)
[13:23:48.135]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:23:48.135]                   {
[13:23:48.135]                     inherits <- base::inherits
[13:23:48.135]                     invokeRestart <- base::invokeRestart
[13:23:48.135]                     is.null <- base::is.null
[13:23:48.135]                     muffled <- FALSE
[13:23:48.135]                     if (inherits(cond, "message")) {
[13:23:48.135]                       muffled <- grepl(pattern, "muffleMessage")
[13:23:48.135]                       if (muffled) 
[13:23:48.135]                         invokeRestart("muffleMessage")
[13:23:48.135]                     }
[13:23:48.135]                     else if (inherits(cond, "warning")) {
[13:23:48.135]                       muffled <- grepl(pattern, "muffleWarning")
[13:23:48.135]                       if (muffled) 
[13:23:48.135]                         invokeRestart("muffleWarning")
[13:23:48.135]                     }
[13:23:48.135]                     else if (inherits(cond, "condition")) {
[13:23:48.135]                       if (!is.null(pattern)) {
[13:23:48.135]                         computeRestarts <- base::computeRestarts
[13:23:48.135]                         grepl <- base::grepl
[13:23:48.135]                         restarts <- computeRestarts(cond)
[13:23:48.135]                         for (restart in restarts) {
[13:23:48.135]                           name <- restart$name
[13:23:48.135]                           if (is.null(name)) 
[13:23:48.135]                             next
[13:23:48.135]                           if (!grepl(pattern, name)) 
[13:23:48.135]                             next
[13:23:48.135]                           invokeRestart(restart)
[13:23:48.135]                           muffled <- TRUE
[13:23:48.135]                           break
[13:23:48.135]                         }
[13:23:48.135]                       }
[13:23:48.135]                     }
[13:23:48.135]                     invisible(muffled)
[13:23:48.135]                   }
[13:23:48.135]                   muffleCondition(cond)
[13:23:48.135]                 })
[13:23:48.135]             }))
[13:23:48.135]             future::FutureResult(value = ...future.value$value, 
[13:23:48.135]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:23:48.135]                   ...future.rng), globalenv = if (FALSE) 
[13:23:48.135]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:23:48.135]                     ...future.globalenv.names))
[13:23:48.135]                 else NULL, started = ...future.startTime, version = "1.8")
[13:23:48.135]         }, condition = base::local({
[13:23:48.135]             c <- base::c
[13:23:48.135]             inherits <- base::inherits
[13:23:48.135]             invokeRestart <- base::invokeRestart
[13:23:48.135]             length <- base::length
[13:23:48.135]             list <- base::list
[13:23:48.135]             seq.int <- base::seq.int
[13:23:48.135]             signalCondition <- base::signalCondition
[13:23:48.135]             sys.calls <- base::sys.calls
[13:23:48.135]             `[[` <- base::`[[`
[13:23:48.135]             `+` <- base::`+`
[13:23:48.135]             `<<-` <- base::`<<-`
[13:23:48.135]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:23:48.135]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:23:48.135]                   3L)]
[13:23:48.135]             }
[13:23:48.135]             function(cond) {
[13:23:48.135]                 is_error <- inherits(cond, "error")
[13:23:48.135]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:23:48.135]                   NULL)
[13:23:48.135]                 if (is_error) {
[13:23:48.135]                   sessionInformation <- function() {
[13:23:48.135]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:23:48.135]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:23:48.135]                       search = base::search(), system = base::Sys.info())
[13:23:48.135]                   }
[13:23:48.135]                   ...future.conditions[[length(...future.conditions) + 
[13:23:48.135]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:23:48.135]                     cond$call), session = sessionInformation(), 
[13:23:48.135]                     timestamp = base::Sys.time(), signaled = 0L)
[13:23:48.135]                   signalCondition(cond)
[13:23:48.135]                 }
[13:23:48.135]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:23:48.135]                 "immediateCondition"))) {
[13:23:48.135]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:23:48.135]                   ...future.conditions[[length(...future.conditions) + 
[13:23:48.135]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:23:48.135]                   if (TRUE && !signal) {
[13:23:48.135]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:23:48.135]                     {
[13:23:48.135]                       inherits <- base::inherits
[13:23:48.135]                       invokeRestart <- base::invokeRestart
[13:23:48.135]                       is.null <- base::is.null
[13:23:48.135]                       muffled <- FALSE
[13:23:48.135]                       if (inherits(cond, "message")) {
[13:23:48.135]                         muffled <- grepl(pattern, "muffleMessage")
[13:23:48.135]                         if (muffled) 
[13:23:48.135]                           invokeRestart("muffleMessage")
[13:23:48.135]                       }
[13:23:48.135]                       else if (inherits(cond, "warning")) {
[13:23:48.135]                         muffled <- grepl(pattern, "muffleWarning")
[13:23:48.135]                         if (muffled) 
[13:23:48.135]                           invokeRestart("muffleWarning")
[13:23:48.135]                       }
[13:23:48.135]                       else if (inherits(cond, "condition")) {
[13:23:48.135]                         if (!is.null(pattern)) {
[13:23:48.135]                           computeRestarts <- base::computeRestarts
[13:23:48.135]                           grepl <- base::grepl
[13:23:48.135]                           restarts <- computeRestarts(cond)
[13:23:48.135]                           for (restart in restarts) {
[13:23:48.135]                             name <- restart$name
[13:23:48.135]                             if (is.null(name)) 
[13:23:48.135]                               next
[13:23:48.135]                             if (!grepl(pattern, name)) 
[13:23:48.135]                               next
[13:23:48.135]                             invokeRestart(restart)
[13:23:48.135]                             muffled <- TRUE
[13:23:48.135]                             break
[13:23:48.135]                           }
[13:23:48.135]                         }
[13:23:48.135]                       }
[13:23:48.135]                       invisible(muffled)
[13:23:48.135]                     }
[13:23:48.135]                     muffleCondition(cond, pattern = "^muffle")
[13:23:48.135]                   }
[13:23:48.135]                 }
[13:23:48.135]                 else {
[13:23:48.135]                   if (TRUE) {
[13:23:48.135]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:23:48.135]                     {
[13:23:48.135]                       inherits <- base::inherits
[13:23:48.135]                       invokeRestart <- base::invokeRestart
[13:23:48.135]                       is.null <- base::is.null
[13:23:48.135]                       muffled <- FALSE
[13:23:48.135]                       if (inherits(cond, "message")) {
[13:23:48.135]                         muffled <- grepl(pattern, "muffleMessage")
[13:23:48.135]                         if (muffled) 
[13:23:48.135]                           invokeRestart("muffleMessage")
[13:23:48.135]                       }
[13:23:48.135]                       else if (inherits(cond, "warning")) {
[13:23:48.135]                         muffled <- grepl(pattern, "muffleWarning")
[13:23:48.135]                         if (muffled) 
[13:23:48.135]                           invokeRestart("muffleWarning")
[13:23:48.135]                       }
[13:23:48.135]                       else if (inherits(cond, "condition")) {
[13:23:48.135]                         if (!is.null(pattern)) {
[13:23:48.135]                           computeRestarts <- base::computeRestarts
[13:23:48.135]                           grepl <- base::grepl
[13:23:48.135]                           restarts <- computeRestarts(cond)
[13:23:48.135]                           for (restart in restarts) {
[13:23:48.135]                             name <- restart$name
[13:23:48.135]                             if (is.null(name)) 
[13:23:48.135]                               next
[13:23:48.135]                             if (!grepl(pattern, name)) 
[13:23:48.135]                               next
[13:23:48.135]                             invokeRestart(restart)
[13:23:48.135]                             muffled <- TRUE
[13:23:48.135]                             break
[13:23:48.135]                           }
[13:23:48.135]                         }
[13:23:48.135]                       }
[13:23:48.135]                       invisible(muffled)
[13:23:48.135]                     }
[13:23:48.135]                     muffleCondition(cond, pattern = "^muffle")
[13:23:48.135]                   }
[13:23:48.135]                 }
[13:23:48.135]             }
[13:23:48.135]         }))
[13:23:48.135]     }, error = function(ex) {
[13:23:48.135]         base::structure(base::list(value = NULL, visible = NULL, 
[13:23:48.135]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:23:48.135]                 ...future.rng), started = ...future.startTime, 
[13:23:48.135]             finished = Sys.time(), session_uuid = NA_character_, 
[13:23:48.135]             version = "1.8"), class = "FutureResult")
[13:23:48.135]     }, finally = {
[13:23:48.135]         if (!identical(...future.workdir, getwd())) 
[13:23:48.135]             setwd(...future.workdir)
[13:23:48.135]         {
[13:23:48.135]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:23:48.135]                 ...future.oldOptions$nwarnings <- NULL
[13:23:48.135]             }
[13:23:48.135]             base::options(...future.oldOptions)
[13:23:48.135]             if (.Platform$OS.type == "windows") {
[13:23:48.135]                 old_names <- names(...future.oldEnvVars)
[13:23:48.135]                 envs <- base::Sys.getenv()
[13:23:48.135]                 names <- names(envs)
[13:23:48.135]                 common <- intersect(names, old_names)
[13:23:48.135]                 added <- setdiff(names, old_names)
[13:23:48.135]                 removed <- setdiff(old_names, names)
[13:23:48.135]                 changed <- common[...future.oldEnvVars[common] != 
[13:23:48.135]                   envs[common]]
[13:23:48.135]                 NAMES <- toupper(changed)
[13:23:48.135]                 args <- list()
[13:23:48.135]                 for (kk in seq_along(NAMES)) {
[13:23:48.135]                   name <- changed[[kk]]
[13:23:48.135]                   NAME <- NAMES[[kk]]
[13:23:48.135]                   if (name != NAME && is.element(NAME, old_names)) 
[13:23:48.135]                     next
[13:23:48.135]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:23:48.135]                 }
[13:23:48.135]                 NAMES <- toupper(added)
[13:23:48.135]                 for (kk in seq_along(NAMES)) {
[13:23:48.135]                   name <- added[[kk]]
[13:23:48.135]                   NAME <- NAMES[[kk]]
[13:23:48.135]                   if (name != NAME && is.element(NAME, old_names)) 
[13:23:48.135]                     next
[13:23:48.135]                   args[[name]] <- ""
[13:23:48.135]                 }
[13:23:48.135]                 NAMES <- toupper(removed)
[13:23:48.135]                 for (kk in seq_along(NAMES)) {
[13:23:48.135]                   name <- removed[[kk]]
[13:23:48.135]                   NAME <- NAMES[[kk]]
[13:23:48.135]                   if (name != NAME && is.element(NAME, old_names)) 
[13:23:48.135]                     next
[13:23:48.135]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:23:48.135]                 }
[13:23:48.135]                 if (length(args) > 0) 
[13:23:48.135]                   base::do.call(base::Sys.setenv, args = args)
[13:23:48.135]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:23:48.135]             }
[13:23:48.135]             else {
[13:23:48.135]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:23:48.135]             }
[13:23:48.135]             {
[13:23:48.135]                 if (base::length(...future.futureOptionsAdded) > 
[13:23:48.135]                   0L) {
[13:23:48.135]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:23:48.135]                   base::names(opts) <- ...future.futureOptionsAdded
[13:23:48.135]                   base::options(opts)
[13:23:48.135]                 }
[13:23:48.135]                 {
[13:23:48.135]                   {
[13:23:48.135]                     base::options(mc.cores = ...future.mc.cores.old)
[13:23:48.135]                     NULL
[13:23:48.135]                   }
[13:23:48.135]                   options(future.plan = NULL)
[13:23:48.135]                   if (is.na(NA_character_)) 
[13:23:48.135]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:23:48.135]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:23:48.135]                   future::plan(list(function (..., workers = 2L, 
[13:23:48.135]                     envir = parent.frame()) 
[13:23:48.135]                   strategy(..., workers = workers, envir = envir)), 
[13:23:48.135]                     .cleanup = FALSE, .init = FALSE)
[13:23:48.135]                 }
[13:23:48.135]             }
[13:23:48.135]         }
[13:23:48.135]     })
[13:23:48.135]     if (TRUE) {
[13:23:48.135]         base::sink(type = "output", split = FALSE)
[13:23:48.135]         if (TRUE) {
[13:23:48.135]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:23:48.135]         }
[13:23:48.135]         else {
[13:23:48.135]             ...future.result["stdout"] <- base::list(NULL)
[13:23:48.135]         }
[13:23:48.135]         base::close(...future.stdout)
[13:23:48.135]         ...future.stdout <- NULL
[13:23:48.135]     }
[13:23:48.135]     ...future.result$conditions <- ...future.conditions
[13:23:48.135]     ...future.result$finished <- base::Sys.time()
[13:23:48.135]     ...future.result
[13:23:48.135] }
[13:23:48.138] MultisessionFuture started
[13:23:48.138] - Launch lazy future ... done
[13:23:48.138] run() for ‘MultisessionFuture’ ... done
> v <- value(f)
[13:23:48.138] result() for ClusterFuture ...
[13:23:48.138] receiveMessageFromWorker() for ClusterFuture ...
[13:23:48.138] - Validating connection of MultisessionFuture
[13:23:48.236] - received message: FutureResult
[13:23:48.237] - Received FutureResult
[13:23:48.237] - Erased future from FutureRegistry
[13:23:48.237] result() for ClusterFuture ...
[13:23:48.237] - result already collected: FutureResult
[13:23:48.237] result() for ClusterFuture ... done
[13:23:48.237] receiveMessageFromWorker() for ClusterFuture ... done
[13:23:48.237] result() for ClusterFuture ... done
[13:23:48.237] result() for ClusterFuture ...
[13:23:48.237] - result already collected: FutureResult
[13:23:48.237] result() for ClusterFuture ... done
> str(v)
 int [1:10000000] 0 0 0 0 0 0 0 0 0 0 ...
> 
> f <- future({ gc() })
[13:23:48.238] getGlobalsAndPackages() ...
[13:23:48.238] Searching for globals...
[13:23:48.239] - globals found: [2] ‘{’, ‘gc’
[13:23:48.239] Searching for globals ... DONE
[13:23:48.239] Resolving globals: FALSE
[13:23:48.240] 
[13:23:48.240] 
[13:23:48.240] getGlobalsAndPackages() ... DONE
[13:23:48.240] run() for ‘Future’ ...
[13:23:48.240] - state: ‘created’
[13:23:48.240] - Future backend: ‘FutureStrategy’, ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[13:23:48.251] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:23:48.251] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[13:23:48.251]   - Field: ‘node’
[13:23:48.251]   - Field: ‘label’
[13:23:48.251]   - Field: ‘local’
[13:23:48.251]   - Field: ‘owner’
[13:23:48.251]   - Field: ‘envir’
[13:23:48.252]   - Field: ‘workers’
[13:23:48.252]   - Field: ‘packages’
[13:23:48.252]   - Field: ‘gc’
[13:23:48.252]   - Field: ‘conditions’
[13:23:48.252]   - Field: ‘persistent’
[13:23:48.252]   - Field: ‘expr’
[13:23:48.252]   - Field: ‘uuid’
[13:23:48.252]   - Field: ‘seed’
[13:23:48.252]   - Field: ‘version’
[13:23:48.252]   - Field: ‘result’
[13:23:48.252]   - Field: ‘asynchronous’
[13:23:48.253]   - Field: ‘calls’
[13:23:48.253]   - Field: ‘globals’
[13:23:48.253]   - Field: ‘stdout’
[13:23:48.253]   - Field: ‘earlySignal’
[13:23:48.253]   - Field: ‘lazy’
[13:23:48.253]   - Field: ‘state’
[13:23:48.253] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[13:23:48.253] - Launch lazy future ...
[13:23:48.253] Packages needed by the future expression (n = 0): <none>
[13:23:48.254] Packages needed by future strategies (n = 0): <none>
[13:23:48.254] {
[13:23:48.254]     {
[13:23:48.254]         {
[13:23:48.254]             ...future.startTime <- base::Sys.time()
[13:23:48.254]             {
[13:23:48.254]                 {
[13:23:48.254]                   {
[13:23:48.254]                     {
[13:23:48.254]                       base::local({
[13:23:48.254]                         has_future <- base::requireNamespace("future", 
[13:23:48.254]                           quietly = TRUE)
[13:23:48.254]                         if (has_future) {
[13:23:48.254]                           ns <- base::getNamespace("future")
[13:23:48.254]                           version <- ns[[".package"]][["version"]]
[13:23:48.254]                           if (is.null(version)) 
[13:23:48.254]                             version <- utils::packageVersion("future")
[13:23:48.254]                         }
[13:23:48.254]                         else {
[13:23:48.254]                           version <- NULL
[13:23:48.254]                         }
[13:23:48.254]                         if (!has_future || version < "1.8.0") {
[13:23:48.254]                           info <- base::c(r_version = base::gsub("R version ", 
[13:23:48.254]                             "", base::R.version$version.string), 
[13:23:48.254]                             platform = base::sprintf("%s (%s-bit)", 
[13:23:48.254]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:23:48.254]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:23:48.254]                               "release", "version")], collapse = " "), 
[13:23:48.254]                             hostname = base::Sys.info()[["nodename"]])
[13:23:48.254]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:23:48.254]                             info)
[13:23:48.254]                           info <- base::paste(info, collapse = "; ")
[13:23:48.254]                           if (!has_future) {
[13:23:48.254]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:23:48.254]                               info)
[13:23:48.254]                           }
[13:23:48.254]                           else {
[13:23:48.254]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:23:48.254]                               info, version)
[13:23:48.254]                           }
[13:23:48.254]                           base::stop(msg)
[13:23:48.254]                         }
[13:23:48.254]                       })
[13:23:48.254]                     }
[13:23:48.254]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[13:23:48.254]                     base::options(mc.cores = 1L)
[13:23:48.254]                   }
[13:23:48.254]                   options(future.plan = NULL)
[13:23:48.254]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:23:48.254]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:23:48.254]                 }
[13:23:48.254]                 ...future.workdir <- getwd()
[13:23:48.254]             }
[13:23:48.254]             ...future.oldOptions <- base::as.list(base::.Options)
[13:23:48.254]             ...future.oldEnvVars <- base::Sys.getenv()
[13:23:48.254]         }
[13:23:48.254]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:23:48.254]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:23:48.254]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:23:48.254]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:23:48.254]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:23:48.254]             future.stdout.windows.reencode = NULL, width = 80L)
[13:23:48.254]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:23:48.254]             base::names(...future.oldOptions))
[13:23:48.254]     }
[13:23:48.254]     if (FALSE) {
[13:23:48.254]     }
[13:23:48.254]     else {
[13:23:48.254]         if (TRUE) {
[13:23:48.254]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:23:48.254]                 open = "w")
[13:23:48.254]         }
[13:23:48.254]         else {
[13:23:48.254]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:23:48.254]                 windows = "NUL", "/dev/null"), open = "w")
[13:23:48.254]         }
[13:23:48.254]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:23:48.254]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:23:48.254]             base::sink(type = "output", split = FALSE)
[13:23:48.254]             base::close(...future.stdout)
[13:23:48.254]         }, add = TRUE)
[13:23:48.254]     }
[13:23:48.254]     ...future.frame <- base::sys.nframe()
[13:23:48.254]     ...future.conditions <- base::list()
[13:23:48.254]     ...future.rng <- base::globalenv()$.Random.seed
[13:23:48.254]     if (FALSE) {
[13:23:48.254]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:23:48.254]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:23:48.254]     }
[13:23:48.254]     ...future.result <- base::tryCatch({
[13:23:48.254]         base::withCallingHandlers({
[13:23:48.254]             ...future.value <- base::withVisible(base::local({
[13:23:48.254]                 ...future.makeSendCondition <- base::local({
[13:23:48.254]                   sendCondition <- NULL
[13:23:48.254]                   function(frame = 1L) {
[13:23:48.254]                     if (is.function(sendCondition)) 
[13:23:48.254]                       return(sendCondition)
[13:23:48.254]                     ns <- getNamespace("parallel")
[13:23:48.254]                     if (exists("sendData", mode = "function", 
[13:23:48.254]                       envir = ns)) {
[13:23:48.254]                       parallel_sendData <- get("sendData", mode = "function", 
[13:23:48.254]                         envir = ns)
[13:23:48.254]                       envir <- sys.frame(frame)
[13:23:48.254]                       master <- NULL
[13:23:48.254]                       while (!identical(envir, .GlobalEnv) && 
[13:23:48.254]                         !identical(envir, emptyenv())) {
[13:23:48.254]                         if (exists("master", mode = "list", envir = envir, 
[13:23:48.254]                           inherits = FALSE)) {
[13:23:48.254]                           master <- get("master", mode = "list", 
[13:23:48.254]                             envir = envir, inherits = FALSE)
[13:23:48.254]                           if (inherits(master, c("SOCKnode", 
[13:23:48.254]                             "SOCK0node"))) {
[13:23:48.254]                             sendCondition <<- function(cond) {
[13:23:48.254]                               data <- list(type = "VALUE", value = cond, 
[13:23:48.254]                                 success = TRUE)
[13:23:48.254]                               parallel_sendData(master, data)
[13:23:48.254]                             }
[13:23:48.254]                             return(sendCondition)
[13:23:48.254]                           }
[13:23:48.254]                         }
[13:23:48.254]                         frame <- frame + 1L
[13:23:48.254]                         envir <- sys.frame(frame)
[13:23:48.254]                       }
[13:23:48.254]                     }
[13:23:48.254]                     sendCondition <<- function(cond) NULL
[13:23:48.254]                   }
[13:23:48.254]                 })
[13:23:48.254]                 withCallingHandlers({
[13:23:48.254]                   {
[13:23:48.254]                     gc()
[13:23:48.254]                   }
[13:23:48.254]                 }, immediateCondition = function(cond) {
[13:23:48.254]                   sendCondition <- ...future.makeSendCondition()
[13:23:48.254]                   sendCondition(cond)
[13:23:48.254]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:23:48.254]                   {
[13:23:48.254]                     inherits <- base::inherits
[13:23:48.254]                     invokeRestart <- base::invokeRestart
[13:23:48.254]                     is.null <- base::is.null
[13:23:48.254]                     muffled <- FALSE
[13:23:48.254]                     if (inherits(cond, "message")) {
[13:23:48.254]                       muffled <- grepl(pattern, "muffleMessage")
[13:23:48.254]                       if (muffled) 
[13:23:48.254]                         invokeRestart("muffleMessage")
[13:23:48.254]                     }
[13:23:48.254]                     else if (inherits(cond, "warning")) {
[13:23:48.254]                       muffled <- grepl(pattern, "muffleWarning")
[13:23:48.254]                       if (muffled) 
[13:23:48.254]                         invokeRestart("muffleWarning")
[13:23:48.254]                     }
[13:23:48.254]                     else if (inherits(cond, "condition")) {
[13:23:48.254]                       if (!is.null(pattern)) {
[13:23:48.254]                         computeRestarts <- base::computeRestarts
[13:23:48.254]                         grepl <- base::grepl
[13:23:48.254]                         restarts <- computeRestarts(cond)
[13:23:48.254]                         for (restart in restarts) {
[13:23:48.254]                           name <- restart$name
[13:23:48.254]                           if (is.null(name)) 
[13:23:48.254]                             next
[13:23:48.254]                           if (!grepl(pattern, name)) 
[13:23:48.254]                             next
[13:23:48.254]                           invokeRestart(restart)
[13:23:48.254]                           muffled <- TRUE
[13:23:48.254]                           break
[13:23:48.254]                         }
[13:23:48.254]                       }
[13:23:48.254]                     }
[13:23:48.254]                     invisible(muffled)
[13:23:48.254]                   }
[13:23:48.254]                   muffleCondition(cond)
[13:23:48.254]                 })
[13:23:48.254]             }))
[13:23:48.254]             future::FutureResult(value = ...future.value$value, 
[13:23:48.254]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:23:48.254]                   ...future.rng), globalenv = if (FALSE) 
[13:23:48.254]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:23:48.254]                     ...future.globalenv.names))
[13:23:48.254]                 else NULL, started = ...future.startTime, version = "1.8")
[13:23:48.254]         }, condition = base::local({
[13:23:48.254]             c <- base::c
[13:23:48.254]             inherits <- base::inherits
[13:23:48.254]             invokeRestart <- base::invokeRestart
[13:23:48.254]             length <- base::length
[13:23:48.254]             list <- base::list
[13:23:48.254]             seq.int <- base::seq.int
[13:23:48.254]             signalCondition <- base::signalCondition
[13:23:48.254]             sys.calls <- base::sys.calls
[13:23:48.254]             `[[` <- base::`[[`
[13:23:48.254]             `+` <- base::`+`
[13:23:48.254]             `<<-` <- base::`<<-`
[13:23:48.254]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:23:48.254]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:23:48.254]                   3L)]
[13:23:48.254]             }
[13:23:48.254]             function(cond) {
[13:23:48.254]                 is_error <- inherits(cond, "error")
[13:23:48.254]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:23:48.254]                   NULL)
[13:23:48.254]                 if (is_error) {
[13:23:48.254]                   sessionInformation <- function() {
[13:23:48.254]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:23:48.254]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:23:48.254]                       search = base::search(), system = base::Sys.info())
[13:23:48.254]                   }
[13:23:48.254]                   ...future.conditions[[length(...future.conditions) + 
[13:23:48.254]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:23:48.254]                     cond$call), session = sessionInformation(), 
[13:23:48.254]                     timestamp = base::Sys.time(), signaled = 0L)
[13:23:48.254]                   signalCondition(cond)
[13:23:48.254]                 }
[13:23:48.254]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:23:48.254]                 "immediateCondition"))) {
[13:23:48.254]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:23:48.254]                   ...future.conditions[[length(...future.conditions) + 
[13:23:48.254]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:23:48.254]                   if (TRUE && !signal) {
[13:23:48.254]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:23:48.254]                     {
[13:23:48.254]                       inherits <- base::inherits
[13:23:48.254]                       invokeRestart <- base::invokeRestart
[13:23:48.254]                       is.null <- base::is.null
[13:23:48.254]                       muffled <- FALSE
[13:23:48.254]                       if (inherits(cond, "message")) {
[13:23:48.254]                         muffled <- grepl(pattern, "muffleMessage")
[13:23:48.254]                         if (muffled) 
[13:23:48.254]                           invokeRestart("muffleMessage")
[13:23:48.254]                       }
[13:23:48.254]                       else if (inherits(cond, "warning")) {
[13:23:48.254]                         muffled <- grepl(pattern, "muffleWarning")
[13:23:48.254]                         if (muffled) 
[13:23:48.254]                           invokeRestart("muffleWarning")
[13:23:48.254]                       }
[13:23:48.254]                       else if (inherits(cond, "condition")) {
[13:23:48.254]                         if (!is.null(pattern)) {
[13:23:48.254]                           computeRestarts <- base::computeRestarts
[13:23:48.254]                           grepl <- base::grepl
[13:23:48.254]                           restarts <- computeRestarts(cond)
[13:23:48.254]                           for (restart in restarts) {
[13:23:48.254]                             name <- restart$name
[13:23:48.254]                             if (is.null(name)) 
[13:23:48.254]                               next
[13:23:48.254]                             if (!grepl(pattern, name)) 
[13:23:48.254]                               next
[13:23:48.254]                             invokeRestart(restart)
[13:23:48.254]                             muffled <- TRUE
[13:23:48.254]                             break
[13:23:48.254]                           }
[13:23:48.254]                         }
[13:23:48.254]                       }
[13:23:48.254]                       invisible(muffled)
[13:23:48.254]                     }
[13:23:48.254]                     muffleCondition(cond, pattern = "^muffle")
[13:23:48.254]                   }
[13:23:48.254]                 }
[13:23:48.254]                 else {
[13:23:48.254]                   if (TRUE) {
[13:23:48.254]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:23:48.254]                     {
[13:23:48.254]                       inherits <- base::inherits
[13:23:48.254]                       invokeRestart <- base::invokeRestart
[13:23:48.254]                       is.null <- base::is.null
[13:23:48.254]                       muffled <- FALSE
[13:23:48.254]                       if (inherits(cond, "message")) {
[13:23:48.254]                         muffled <- grepl(pattern, "muffleMessage")
[13:23:48.254]                         if (muffled) 
[13:23:48.254]                           invokeRestart("muffleMessage")
[13:23:48.254]                       }
[13:23:48.254]                       else if (inherits(cond, "warning")) {
[13:23:48.254]                         muffled <- grepl(pattern, "muffleWarning")
[13:23:48.254]                         if (muffled) 
[13:23:48.254]                           invokeRestart("muffleWarning")
[13:23:48.254]                       }
[13:23:48.254]                       else if (inherits(cond, "condition")) {
[13:23:48.254]                         if (!is.null(pattern)) {
[13:23:48.254]                           computeRestarts <- base::computeRestarts
[13:23:48.254]                           grepl <- base::grepl
[13:23:48.254]                           restarts <- computeRestarts(cond)
[13:23:48.254]                           for (restart in restarts) {
[13:23:48.254]                             name <- restart$name
[13:23:48.254]                             if (is.null(name)) 
[13:23:48.254]                               next
[13:23:48.254]                             if (!grepl(pattern, name)) 
[13:23:48.254]                               next
[13:23:48.254]                             invokeRestart(restart)
[13:23:48.254]                             muffled <- TRUE
[13:23:48.254]                             break
[13:23:48.254]                           }
[13:23:48.254]                         }
[13:23:48.254]                       }
[13:23:48.254]                       invisible(muffled)
[13:23:48.254]                     }
[13:23:48.254]                     muffleCondition(cond, pattern = "^muffle")
[13:23:48.254]                   }
[13:23:48.254]                 }
[13:23:48.254]             }
[13:23:48.254]         }))
[13:23:48.254]     }, error = function(ex) {
[13:23:48.254]         base::structure(base::list(value = NULL, visible = NULL, 
[13:23:48.254]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:23:48.254]                 ...future.rng), started = ...future.startTime, 
[13:23:48.254]             finished = Sys.time(), session_uuid = NA_character_, 
[13:23:48.254]             version = "1.8"), class = "FutureResult")
[13:23:48.254]     }, finally = {
[13:23:48.254]         if (!identical(...future.workdir, getwd())) 
[13:23:48.254]             setwd(...future.workdir)
[13:23:48.254]         {
[13:23:48.254]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:23:48.254]                 ...future.oldOptions$nwarnings <- NULL
[13:23:48.254]             }
[13:23:48.254]             base::options(...future.oldOptions)
[13:23:48.254]             if (.Platform$OS.type == "windows") {
[13:23:48.254]                 old_names <- names(...future.oldEnvVars)
[13:23:48.254]                 envs <- base::Sys.getenv()
[13:23:48.254]                 names <- names(envs)
[13:23:48.254]                 common <- intersect(names, old_names)
[13:23:48.254]                 added <- setdiff(names, old_names)
[13:23:48.254]                 removed <- setdiff(old_names, names)
[13:23:48.254]                 changed <- common[...future.oldEnvVars[common] != 
[13:23:48.254]                   envs[common]]
[13:23:48.254]                 NAMES <- toupper(changed)
[13:23:48.254]                 args <- list()
[13:23:48.254]                 for (kk in seq_along(NAMES)) {
[13:23:48.254]                   name <- changed[[kk]]
[13:23:48.254]                   NAME <- NAMES[[kk]]
[13:23:48.254]                   if (name != NAME && is.element(NAME, old_names)) 
[13:23:48.254]                     next
[13:23:48.254]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:23:48.254]                 }
[13:23:48.254]                 NAMES <- toupper(added)
[13:23:48.254]                 for (kk in seq_along(NAMES)) {
[13:23:48.254]                   name <- added[[kk]]
[13:23:48.254]                   NAME <- NAMES[[kk]]
[13:23:48.254]                   if (name != NAME && is.element(NAME, old_names)) 
[13:23:48.254]                     next
[13:23:48.254]                   args[[name]] <- ""
[13:23:48.254]                 }
[13:23:48.254]                 NAMES <- toupper(removed)
[13:23:48.254]                 for (kk in seq_along(NAMES)) {
[13:23:48.254]                   name <- removed[[kk]]
[13:23:48.254]                   NAME <- NAMES[[kk]]
[13:23:48.254]                   if (name != NAME && is.element(NAME, old_names)) 
[13:23:48.254]                     next
[13:23:48.254]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:23:48.254]                 }
[13:23:48.254]                 if (length(args) > 0) 
[13:23:48.254]                   base::do.call(base::Sys.setenv, args = args)
[13:23:48.254]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:23:48.254]             }
[13:23:48.254]             else {
[13:23:48.254]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:23:48.254]             }
[13:23:48.254]             {
[13:23:48.254]                 if (base::length(...future.futureOptionsAdded) > 
[13:23:48.254]                   0L) {
[13:23:48.254]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:23:48.254]                   base::names(opts) <- ...future.futureOptionsAdded
[13:23:48.254]                   base::options(opts)
[13:23:48.254]                 }
[13:23:48.254]                 {
[13:23:48.254]                   {
[13:23:48.254]                     base::options(mc.cores = ...future.mc.cores.old)
[13:23:48.254]                     NULL
[13:23:48.254]                   }
[13:23:48.254]                   options(future.plan = NULL)
[13:23:48.254]                   if (is.na(NA_character_)) 
[13:23:48.254]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:23:48.254]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:23:48.254]                   future::plan(list(function (..., workers = 2L, 
[13:23:48.254]                     envir = parent.frame()) 
[13:23:48.254]                   strategy(..., workers = workers, envir = envir)), 
[13:23:48.254]                     .cleanup = FALSE, .init = FALSE)
[13:23:48.254]                 }
[13:23:48.254]             }
[13:23:48.254]         }
[13:23:48.254]     })
[13:23:48.254]     if (TRUE) {
[13:23:48.254]         base::sink(type = "output", split = FALSE)
[13:23:48.254]         if (TRUE) {
[13:23:48.254]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:23:48.254]         }
[13:23:48.254]         else {
[13:23:48.254]             ...future.result["stdout"] <- base::list(NULL)
[13:23:48.254]         }
[13:23:48.254]         base::close(...future.stdout)
[13:23:48.254]         ...future.stdout <- NULL
[13:23:48.254]     }
[13:23:48.254]     ...future.result$conditions <- ...future.conditions
[13:23:48.254]     ...future.result$finished <- base::Sys.time()
[13:23:48.254]     ...future.result
[13:23:48.254] }
[13:23:48.257] MultisessionFuture started
[13:23:48.257] - Launch lazy future ... done
[13:23:48.257] run() for ‘MultisessionFuture’ ... done
> v <- value(f)
[13:23:48.257] result() for ClusterFuture ...
[13:23:48.258] receiveMessageFromWorker() for ClusterFuture ...
[13:23:48.258] - Validating connection of MultisessionFuture
[13:23:48.326] - received message: FutureResult
[13:23:48.327] - Received FutureResult
[13:23:48.327] - Erased future from FutureRegistry
[13:23:48.327] result() for ClusterFuture ...
[13:23:48.327] - result already collected: FutureResult
[13:23:48.327] result() for ClusterFuture ... done
[13:23:48.327] receiveMessageFromWorker() for ClusterFuture ... done
[13:23:48.327] result() for ClusterFuture ... done
[13:23:48.327] result() for ClusterFuture ...
[13:23:48.327] - result already collected: FutureResult
[13:23:48.327] result() for ClusterFuture ... done
> print(v)
         used (Mb) gc trigger (Mb) max used (Mb)
Ncells 395063 21.1     836944 44.7   664120 35.5
Vcells 704732  5.4    8388608 64.0  5727919 43.8
> 
> f <- future({ integer(10e6) }, gc = TRUE)
[13:23:48.328] getGlobalsAndPackages() ...
[13:23:48.328] Searching for globals...
[13:23:48.329] - globals found: [2] ‘{’, ‘integer’
[13:23:48.329] Searching for globals ... DONE
[13:23:48.329] Resolving globals: FALSE
[13:23:48.329] 
[13:23:48.329] 
[13:23:48.329] getGlobalsAndPackages() ... DONE
[13:23:48.330] run() for ‘Future’ ...
[13:23:48.330] - state: ‘created’
[13:23:48.330] - Future backend: ‘FutureStrategy’, ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[13:23:48.341] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:23:48.341] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[13:23:48.341]   - Field: ‘node’
[13:23:48.341]   - Field: ‘label’
[13:23:48.341]   - Field: ‘local’
[13:23:48.341]   - Field: ‘owner’
[13:23:48.341]   - Field: ‘envir’
[13:23:48.341]   - Field: ‘workers’
[13:23:48.341]   - Field: ‘packages’
[13:23:48.342]   - Field: ‘gc’
[13:23:48.342]   - Field: ‘conditions’
[13:23:48.342]   - Field: ‘persistent’
[13:23:48.342]   - Field: ‘expr’
[13:23:48.342]   - Field: ‘uuid’
[13:23:48.342]   - Field: ‘seed’
[13:23:48.342]   - Field: ‘version’
[13:23:48.342]   - Field: ‘result’
[13:23:48.342]   - Field: ‘asynchronous’
[13:23:48.342]   - Field: ‘calls’
[13:23:48.342]   - Field: ‘globals’
[13:23:48.343]   - Field: ‘stdout’
[13:23:48.343]   - Field: ‘earlySignal’
[13:23:48.343]   - Field: ‘lazy’
[13:23:48.343]   - Field: ‘state’
[13:23:48.343] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[13:23:48.343] - Launch lazy future ...
[13:23:48.343] Packages needed by the future expression (n = 0): <none>
[13:23:48.343] Packages needed by future strategies (n = 0): <none>
[13:23:48.344] {
[13:23:48.344]     {
[13:23:48.344]         {
[13:23:48.344]             ...future.startTime <- base::Sys.time()
[13:23:48.344]             {
[13:23:48.344]                 {
[13:23:48.344]                   {
[13:23:48.344]                     {
[13:23:48.344]                       base::local({
[13:23:48.344]                         has_future <- base::requireNamespace("future", 
[13:23:48.344]                           quietly = TRUE)
[13:23:48.344]                         if (has_future) {
[13:23:48.344]                           ns <- base::getNamespace("future")
[13:23:48.344]                           version <- ns[[".package"]][["version"]]
[13:23:48.344]                           if (is.null(version)) 
[13:23:48.344]                             version <- utils::packageVersion("future")
[13:23:48.344]                         }
[13:23:48.344]                         else {
[13:23:48.344]                           version <- NULL
[13:23:48.344]                         }
[13:23:48.344]                         if (!has_future || version < "1.8.0") {
[13:23:48.344]                           info <- base::c(r_version = base::gsub("R version ", 
[13:23:48.344]                             "", base::R.version$version.string), 
[13:23:48.344]                             platform = base::sprintf("%s (%s-bit)", 
[13:23:48.344]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:23:48.344]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:23:48.344]                               "release", "version")], collapse = " "), 
[13:23:48.344]                             hostname = base::Sys.info()[["nodename"]])
[13:23:48.344]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:23:48.344]                             info)
[13:23:48.344]                           info <- base::paste(info, collapse = "; ")
[13:23:48.344]                           if (!has_future) {
[13:23:48.344]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:23:48.344]                               info)
[13:23:48.344]                           }
[13:23:48.344]                           else {
[13:23:48.344]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:23:48.344]                               info, version)
[13:23:48.344]                           }
[13:23:48.344]                           base::stop(msg)
[13:23:48.344]                         }
[13:23:48.344]                       })
[13:23:48.344]                     }
[13:23:48.344]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[13:23:48.344]                     base::options(mc.cores = 1L)
[13:23:48.344]                   }
[13:23:48.344]                   options(future.plan = NULL)
[13:23:48.344]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:23:48.344]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:23:48.344]                 }
[13:23:48.344]                 ...future.workdir <- getwd()
[13:23:48.344]             }
[13:23:48.344]             ...future.oldOptions <- base::as.list(base::.Options)
[13:23:48.344]             ...future.oldEnvVars <- base::Sys.getenv()
[13:23:48.344]         }
[13:23:48.344]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:23:48.344]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:23:48.344]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:23:48.344]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:23:48.344]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:23:48.344]             future.stdout.windows.reencode = NULL, width = 80L)
[13:23:48.344]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:23:48.344]             base::names(...future.oldOptions))
[13:23:48.344]     }
[13:23:48.344]     if (FALSE) {
[13:23:48.344]     }
[13:23:48.344]     else {
[13:23:48.344]         if (TRUE) {
[13:23:48.344]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:23:48.344]                 open = "w")
[13:23:48.344]         }
[13:23:48.344]         else {
[13:23:48.344]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:23:48.344]                 windows = "NUL", "/dev/null"), open = "w")
[13:23:48.344]         }
[13:23:48.344]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:23:48.344]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:23:48.344]             base::sink(type = "output", split = FALSE)
[13:23:48.344]             base::close(...future.stdout)
[13:23:48.344]         }, add = TRUE)
[13:23:48.344]     }
[13:23:48.344]     ...future.frame <- base::sys.nframe()
[13:23:48.344]     ...future.conditions <- base::list()
[13:23:48.344]     ...future.rng <- base::globalenv()$.Random.seed
[13:23:48.344]     if (FALSE) {
[13:23:48.344]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:23:48.344]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:23:48.344]     }
[13:23:48.344]     ...future.result <- base::tryCatch({
[13:23:48.344]         base::withCallingHandlers({
[13:23:48.344]             ...future.value <- base::withVisible(base::local({
[13:23:48.344]                 ...future.makeSendCondition <- base::local({
[13:23:48.344]                   sendCondition <- NULL
[13:23:48.344]                   function(frame = 1L) {
[13:23:48.344]                     if (is.function(sendCondition)) 
[13:23:48.344]                       return(sendCondition)
[13:23:48.344]                     ns <- getNamespace("parallel")
[13:23:48.344]                     if (exists("sendData", mode = "function", 
[13:23:48.344]                       envir = ns)) {
[13:23:48.344]                       parallel_sendData <- get("sendData", mode = "function", 
[13:23:48.344]                         envir = ns)
[13:23:48.344]                       envir <- sys.frame(frame)
[13:23:48.344]                       master <- NULL
[13:23:48.344]                       while (!identical(envir, .GlobalEnv) && 
[13:23:48.344]                         !identical(envir, emptyenv())) {
[13:23:48.344]                         if (exists("master", mode = "list", envir = envir, 
[13:23:48.344]                           inherits = FALSE)) {
[13:23:48.344]                           master <- get("master", mode = "list", 
[13:23:48.344]                             envir = envir, inherits = FALSE)
[13:23:48.344]                           if (inherits(master, c("SOCKnode", 
[13:23:48.344]                             "SOCK0node"))) {
[13:23:48.344]                             sendCondition <<- function(cond) {
[13:23:48.344]                               data <- list(type = "VALUE", value = cond, 
[13:23:48.344]                                 success = TRUE)
[13:23:48.344]                               parallel_sendData(master, data)
[13:23:48.344]                             }
[13:23:48.344]                             return(sendCondition)
[13:23:48.344]                           }
[13:23:48.344]                         }
[13:23:48.344]                         frame <- frame + 1L
[13:23:48.344]                         envir <- sys.frame(frame)
[13:23:48.344]                       }
[13:23:48.344]                     }
[13:23:48.344]                     sendCondition <<- function(cond) NULL
[13:23:48.344]                   }
[13:23:48.344]                 })
[13:23:48.344]                 withCallingHandlers({
[13:23:48.344]                   {
[13:23:48.344]                     integer(1e+07)
[13:23:48.344]                   }
[13:23:48.344]                 }, immediateCondition = function(cond) {
[13:23:48.344]                   sendCondition <- ...future.makeSendCondition()
[13:23:48.344]                   sendCondition(cond)
[13:23:48.344]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:23:48.344]                   {
[13:23:48.344]                     inherits <- base::inherits
[13:23:48.344]                     invokeRestart <- base::invokeRestart
[13:23:48.344]                     is.null <- base::is.null
[13:23:48.344]                     muffled <- FALSE
[13:23:48.344]                     if (inherits(cond, "message")) {
[13:23:48.344]                       muffled <- grepl(pattern, "muffleMessage")
[13:23:48.344]                       if (muffled) 
[13:23:48.344]                         invokeRestart("muffleMessage")
[13:23:48.344]                     }
[13:23:48.344]                     else if (inherits(cond, "warning")) {
[13:23:48.344]                       muffled <- grepl(pattern, "muffleWarning")
[13:23:48.344]                       if (muffled) 
[13:23:48.344]                         invokeRestart("muffleWarning")
[13:23:48.344]                     }
[13:23:48.344]                     else if (inherits(cond, "condition")) {
[13:23:48.344]                       if (!is.null(pattern)) {
[13:23:48.344]                         computeRestarts <- base::computeRestarts
[13:23:48.344]                         grepl <- base::grepl
[13:23:48.344]                         restarts <- computeRestarts(cond)
[13:23:48.344]                         for (restart in restarts) {
[13:23:48.344]                           name <- restart$name
[13:23:48.344]                           if (is.null(name)) 
[13:23:48.344]                             next
[13:23:48.344]                           if (!grepl(pattern, name)) 
[13:23:48.344]                             next
[13:23:48.344]                           invokeRestart(restart)
[13:23:48.344]                           muffled <- TRUE
[13:23:48.344]                           break
[13:23:48.344]                         }
[13:23:48.344]                       }
[13:23:48.344]                     }
[13:23:48.344]                     invisible(muffled)
[13:23:48.344]                   }
[13:23:48.344]                   muffleCondition(cond)
[13:23:48.344]                 })
[13:23:48.344]             }))
[13:23:48.344]             future::FutureResult(value = ...future.value$value, 
[13:23:48.344]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:23:48.344]                   ...future.rng), globalenv = if (FALSE) 
[13:23:48.344]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:23:48.344]                     ...future.globalenv.names))
[13:23:48.344]                 else NULL, started = ...future.startTime, version = "1.8")
[13:23:48.344]         }, condition = base::local({
[13:23:48.344]             c <- base::c
[13:23:48.344]             inherits <- base::inherits
[13:23:48.344]             invokeRestart <- base::invokeRestart
[13:23:48.344]             length <- base::length
[13:23:48.344]             list <- base::list
[13:23:48.344]             seq.int <- base::seq.int
[13:23:48.344]             signalCondition <- base::signalCondition
[13:23:48.344]             sys.calls <- base::sys.calls
[13:23:48.344]             `[[` <- base::`[[`
[13:23:48.344]             `+` <- base::`+`
[13:23:48.344]             `<<-` <- base::`<<-`
[13:23:48.344]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:23:48.344]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:23:48.344]                   3L)]
[13:23:48.344]             }
[13:23:48.344]             function(cond) {
[13:23:48.344]                 is_error <- inherits(cond, "error")
[13:23:48.344]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:23:48.344]                   NULL)
[13:23:48.344]                 if (is_error) {
[13:23:48.344]                   sessionInformation <- function() {
[13:23:48.344]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:23:48.344]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:23:48.344]                       search = base::search(), system = base::Sys.info())
[13:23:48.344]                   }
[13:23:48.344]                   ...future.conditions[[length(...future.conditions) + 
[13:23:48.344]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:23:48.344]                     cond$call), session = sessionInformation(), 
[13:23:48.344]                     timestamp = base::Sys.time(), signaled = 0L)
[13:23:48.344]                   signalCondition(cond)
[13:23:48.344]                 }
[13:23:48.344]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:23:48.344]                 "immediateCondition"))) {
[13:23:48.344]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:23:48.344]                   ...future.conditions[[length(...future.conditions) + 
[13:23:48.344]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:23:48.344]                   if (TRUE && !signal) {
[13:23:48.344]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:23:48.344]                     {
[13:23:48.344]                       inherits <- base::inherits
[13:23:48.344]                       invokeRestart <- base::invokeRestart
[13:23:48.344]                       is.null <- base::is.null
[13:23:48.344]                       muffled <- FALSE
[13:23:48.344]                       if (inherits(cond, "message")) {
[13:23:48.344]                         muffled <- grepl(pattern, "muffleMessage")
[13:23:48.344]                         if (muffled) 
[13:23:48.344]                           invokeRestart("muffleMessage")
[13:23:48.344]                       }
[13:23:48.344]                       else if (inherits(cond, "warning")) {
[13:23:48.344]                         muffled <- grepl(pattern, "muffleWarning")
[13:23:48.344]                         if (muffled) 
[13:23:48.344]                           invokeRestart("muffleWarning")
[13:23:48.344]                       }
[13:23:48.344]                       else if (inherits(cond, "condition")) {
[13:23:48.344]                         if (!is.null(pattern)) {
[13:23:48.344]                           computeRestarts <- base::computeRestarts
[13:23:48.344]                           grepl <- base::grepl
[13:23:48.344]                           restarts <- computeRestarts(cond)
[13:23:48.344]                           for (restart in restarts) {
[13:23:48.344]                             name <- restart$name
[13:23:48.344]                             if (is.null(name)) 
[13:23:48.344]                               next
[13:23:48.344]                             if (!grepl(pattern, name)) 
[13:23:48.344]                               next
[13:23:48.344]                             invokeRestart(restart)
[13:23:48.344]                             muffled <- TRUE
[13:23:48.344]                             break
[13:23:48.344]                           }
[13:23:48.344]                         }
[13:23:48.344]                       }
[13:23:48.344]                       invisible(muffled)
[13:23:48.344]                     }
[13:23:48.344]                     muffleCondition(cond, pattern = "^muffle")
[13:23:48.344]                   }
[13:23:48.344]                 }
[13:23:48.344]                 else {
[13:23:48.344]                   if (TRUE) {
[13:23:48.344]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:23:48.344]                     {
[13:23:48.344]                       inherits <- base::inherits
[13:23:48.344]                       invokeRestart <- base::invokeRestart
[13:23:48.344]                       is.null <- base::is.null
[13:23:48.344]                       muffled <- FALSE
[13:23:48.344]                       if (inherits(cond, "message")) {
[13:23:48.344]                         muffled <- grepl(pattern, "muffleMessage")
[13:23:48.344]                         if (muffled) 
[13:23:48.344]                           invokeRestart("muffleMessage")
[13:23:48.344]                       }
[13:23:48.344]                       else if (inherits(cond, "warning")) {
[13:23:48.344]                         muffled <- grepl(pattern, "muffleWarning")
[13:23:48.344]                         if (muffled) 
[13:23:48.344]                           invokeRestart("muffleWarning")
[13:23:48.344]                       }
[13:23:48.344]                       else if (inherits(cond, "condition")) {
[13:23:48.344]                         if (!is.null(pattern)) {
[13:23:48.344]                           computeRestarts <- base::computeRestarts
[13:23:48.344]                           grepl <- base::grepl
[13:23:48.344]                           restarts <- computeRestarts(cond)
[13:23:48.344]                           for (restart in restarts) {
[13:23:48.344]                             name <- restart$name
[13:23:48.344]                             if (is.null(name)) 
[13:23:48.344]                               next
[13:23:48.344]                             if (!grepl(pattern, name)) 
[13:23:48.344]                               next
[13:23:48.344]                             invokeRestart(restart)
[13:23:48.344]                             muffled <- TRUE
[13:23:48.344]                             break
[13:23:48.344]                           }
[13:23:48.344]                         }
[13:23:48.344]                       }
[13:23:48.344]                       invisible(muffled)
[13:23:48.344]                     }
[13:23:48.344]                     muffleCondition(cond, pattern = "^muffle")
[13:23:48.344]                   }
[13:23:48.344]                 }
[13:23:48.344]             }
[13:23:48.344]         }))
[13:23:48.344]     }, error = function(ex) {
[13:23:48.344]         base::structure(base::list(value = NULL, visible = NULL, 
[13:23:48.344]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:23:48.344]                 ...future.rng), started = ...future.startTime, 
[13:23:48.344]             finished = Sys.time(), session_uuid = NA_character_, 
[13:23:48.344]             version = "1.8"), class = "FutureResult")
[13:23:48.344]     }, finally = {
[13:23:48.344]         if (!identical(...future.workdir, getwd())) 
[13:23:48.344]             setwd(...future.workdir)
[13:23:48.344]         {
[13:23:48.344]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:23:48.344]                 ...future.oldOptions$nwarnings <- NULL
[13:23:48.344]             }
[13:23:48.344]             base::options(...future.oldOptions)
[13:23:48.344]             if (.Platform$OS.type == "windows") {
[13:23:48.344]                 old_names <- names(...future.oldEnvVars)
[13:23:48.344]                 envs <- base::Sys.getenv()
[13:23:48.344]                 names <- names(envs)
[13:23:48.344]                 common <- intersect(names, old_names)
[13:23:48.344]                 added <- setdiff(names, old_names)
[13:23:48.344]                 removed <- setdiff(old_names, names)
[13:23:48.344]                 changed <- common[...future.oldEnvVars[common] != 
[13:23:48.344]                   envs[common]]
[13:23:48.344]                 NAMES <- toupper(changed)
[13:23:48.344]                 args <- list()
[13:23:48.344]                 for (kk in seq_along(NAMES)) {
[13:23:48.344]                   name <- changed[[kk]]
[13:23:48.344]                   NAME <- NAMES[[kk]]
[13:23:48.344]                   if (name != NAME && is.element(NAME, old_names)) 
[13:23:48.344]                     next
[13:23:48.344]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:23:48.344]                 }
[13:23:48.344]                 NAMES <- toupper(added)
[13:23:48.344]                 for (kk in seq_along(NAMES)) {
[13:23:48.344]                   name <- added[[kk]]
[13:23:48.344]                   NAME <- NAMES[[kk]]
[13:23:48.344]                   if (name != NAME && is.element(NAME, old_names)) 
[13:23:48.344]                     next
[13:23:48.344]                   args[[name]] <- ""
[13:23:48.344]                 }
[13:23:48.344]                 NAMES <- toupper(removed)
[13:23:48.344]                 for (kk in seq_along(NAMES)) {
[13:23:48.344]                   name <- removed[[kk]]
[13:23:48.344]                   NAME <- NAMES[[kk]]
[13:23:48.344]                   if (name != NAME && is.element(NAME, old_names)) 
[13:23:48.344]                     next
[13:23:48.344]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:23:48.344]                 }
[13:23:48.344]                 if (length(args) > 0) 
[13:23:48.344]                   base::do.call(base::Sys.setenv, args = args)
[13:23:48.344]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:23:48.344]             }
[13:23:48.344]             else {
[13:23:48.344]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:23:48.344]             }
[13:23:48.344]             {
[13:23:48.344]                 if (base::length(...future.futureOptionsAdded) > 
[13:23:48.344]                   0L) {
[13:23:48.344]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:23:48.344]                   base::names(opts) <- ...future.futureOptionsAdded
[13:23:48.344]                   base::options(opts)
[13:23:48.344]                 }
[13:23:48.344]                 {
[13:23:48.344]                   {
[13:23:48.344]                     base::options(mc.cores = ...future.mc.cores.old)
[13:23:48.344]                     NULL
[13:23:48.344]                   }
[13:23:48.344]                   options(future.plan = NULL)
[13:23:48.344]                   if (is.na(NA_character_)) 
[13:23:48.344]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:23:48.344]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:23:48.344]                   future::plan(list(function (..., workers = 2L, 
[13:23:48.344]                     envir = parent.frame()) 
[13:23:48.344]                   strategy(..., workers = workers, envir = envir)), 
[13:23:48.344]                     .cleanup = FALSE, .init = FALSE)
[13:23:48.344]                 }
[13:23:48.344]             }
[13:23:48.344]         }
[13:23:48.344]     })
[13:23:48.344]     if (TRUE) {
[13:23:48.344]         base::sink(type = "output", split = FALSE)
[13:23:48.344]         if (TRUE) {
[13:23:48.344]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:23:48.344]         }
[13:23:48.344]         else {
[13:23:48.344]             ...future.result["stdout"] <- base::list(NULL)
[13:23:48.344]         }
[13:23:48.344]         base::close(...future.stdout)
[13:23:48.344]         ...future.stdout <- NULL
[13:23:48.344]     }
[13:23:48.344]     ...future.result$conditions <- ...future.conditions
[13:23:48.344]     ...future.result$finished <- base::Sys.time()
[13:23:48.344]     ...future.result
[13:23:48.344] }
[13:23:48.347] MultisessionFuture started
[13:23:48.347] - Launch lazy future ... done
[13:23:48.347] run() for ‘MultisessionFuture’ ... done
> v <- value(f)
[13:23:48.347] result() for ClusterFuture ...
[13:23:48.347] receiveMessageFromWorker() for ClusterFuture ...
[13:23:48.347] - Validating connection of MultisessionFuture
[13:23:48.445] - received message: FutureResult
[13:23:48.446] - Received FutureResult
[13:23:48.446] - Erased future from FutureRegistry
[13:23:48.446] result() for ClusterFuture ...
[13:23:48.446] - result already collected: FutureResult
[13:23:48.446] result() for ClusterFuture ... done
[13:23:48.446] - Garbage collecting worker ...
[13:23:48.679] - Garbage collecting worker ... done
[13:23:48.679] receiveMessageFromWorker() for ClusterFuture ... done
[13:23:48.679] result() for ClusterFuture ... done
[13:23:48.679] result() for ClusterFuture ...
[13:23:48.679] - result already collected: FutureResult
[13:23:48.679] result() for ClusterFuture ... done
> str(v)
 int [1:10000000] 0 0 0 0 0 0 0 0 0 0 ...
> 
> f <- future({ gc() })
[13:23:48.680] getGlobalsAndPackages() ...
[13:23:48.680] Searching for globals...
[13:23:48.681] - globals found: [2] ‘{’, ‘gc’
[13:23:48.681] Searching for globals ... DONE
[13:23:48.681] Resolving globals: FALSE
[13:23:48.682] 
[13:23:48.682] 
[13:23:48.682] getGlobalsAndPackages() ... DONE
[13:23:48.682] run() for ‘Future’ ...
[13:23:48.682] - state: ‘created’
[13:23:48.682] - Future backend: ‘FutureStrategy’, ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[13:23:48.693] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:23:48.693] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[13:23:48.693]   - Field: ‘node’
[13:23:48.693]   - Field: ‘label’
[13:23:48.693]   - Field: ‘local’
[13:23:48.693]   - Field: ‘owner’
[13:23:48.694]   - Field: ‘envir’
[13:23:48.694]   - Field: ‘workers’
[13:23:48.694]   - Field: ‘packages’
[13:23:48.694]   - Field: ‘gc’
[13:23:48.694]   - Field: ‘conditions’
[13:23:48.694]   - Field: ‘persistent’
[13:23:48.694]   - Field: ‘expr’
[13:23:48.694]   - Field: ‘uuid’
[13:23:48.694]   - Field: ‘seed’
[13:23:48.694]   - Field: ‘version’
[13:23:48.694]   - Field: ‘result’
[13:23:48.695]   - Field: ‘asynchronous’
[13:23:48.695]   - Field: ‘calls’
[13:23:48.695]   - Field: ‘globals’
[13:23:48.695]   - Field: ‘stdout’
[13:23:48.695]   - Field: ‘earlySignal’
[13:23:48.695]   - Field: ‘lazy’
[13:23:48.695]   - Field: ‘state’
[13:23:48.695] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[13:23:48.695] - Launch lazy future ...
[13:23:48.696] Packages needed by the future expression (n = 0): <none>
[13:23:48.696] Packages needed by future strategies (n = 0): <none>
[13:23:48.696] {
[13:23:48.696]     {
[13:23:48.696]         {
[13:23:48.696]             ...future.startTime <- base::Sys.time()
[13:23:48.696]             {
[13:23:48.696]                 {
[13:23:48.696]                   {
[13:23:48.696]                     {
[13:23:48.696]                       base::local({
[13:23:48.696]                         has_future <- base::requireNamespace("future", 
[13:23:48.696]                           quietly = TRUE)
[13:23:48.696]                         if (has_future) {
[13:23:48.696]                           ns <- base::getNamespace("future")
[13:23:48.696]                           version <- ns[[".package"]][["version"]]
[13:23:48.696]                           if (is.null(version)) 
[13:23:48.696]                             version <- utils::packageVersion("future")
[13:23:48.696]                         }
[13:23:48.696]                         else {
[13:23:48.696]                           version <- NULL
[13:23:48.696]                         }
[13:23:48.696]                         if (!has_future || version < "1.8.0") {
[13:23:48.696]                           info <- base::c(r_version = base::gsub("R version ", 
[13:23:48.696]                             "", base::R.version$version.string), 
[13:23:48.696]                             platform = base::sprintf("%s (%s-bit)", 
[13:23:48.696]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:23:48.696]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:23:48.696]                               "release", "version")], collapse = " "), 
[13:23:48.696]                             hostname = base::Sys.info()[["nodename"]])
[13:23:48.696]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:23:48.696]                             info)
[13:23:48.696]                           info <- base::paste(info, collapse = "; ")
[13:23:48.696]                           if (!has_future) {
[13:23:48.696]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:23:48.696]                               info)
[13:23:48.696]                           }
[13:23:48.696]                           else {
[13:23:48.696]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:23:48.696]                               info, version)
[13:23:48.696]                           }
[13:23:48.696]                           base::stop(msg)
[13:23:48.696]                         }
[13:23:48.696]                       })
[13:23:48.696]                     }
[13:23:48.696]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[13:23:48.696]                     base::options(mc.cores = 1L)
[13:23:48.696]                   }
[13:23:48.696]                   options(future.plan = NULL)
[13:23:48.696]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:23:48.696]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:23:48.696]                 }
[13:23:48.696]                 ...future.workdir <- getwd()
[13:23:48.696]             }
[13:23:48.696]             ...future.oldOptions <- base::as.list(base::.Options)
[13:23:48.696]             ...future.oldEnvVars <- base::Sys.getenv()
[13:23:48.696]         }
[13:23:48.696]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:23:48.696]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:23:48.696]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:23:48.696]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:23:48.696]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:23:48.696]             future.stdout.windows.reencode = NULL, width = 80L)
[13:23:48.696]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:23:48.696]             base::names(...future.oldOptions))
[13:23:48.696]     }
[13:23:48.696]     if (FALSE) {
[13:23:48.696]     }
[13:23:48.696]     else {
[13:23:48.696]         if (TRUE) {
[13:23:48.696]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:23:48.696]                 open = "w")
[13:23:48.696]         }
[13:23:48.696]         else {
[13:23:48.696]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:23:48.696]                 windows = "NUL", "/dev/null"), open = "w")
[13:23:48.696]         }
[13:23:48.696]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:23:48.696]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:23:48.696]             base::sink(type = "output", split = FALSE)
[13:23:48.696]             base::close(...future.stdout)
[13:23:48.696]         }, add = TRUE)
[13:23:48.696]     }
[13:23:48.696]     ...future.frame <- base::sys.nframe()
[13:23:48.696]     ...future.conditions <- base::list()
[13:23:48.696]     ...future.rng <- base::globalenv()$.Random.seed
[13:23:48.696]     if (FALSE) {
[13:23:48.696]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:23:48.696]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:23:48.696]     }
[13:23:48.696]     ...future.result <- base::tryCatch({
[13:23:48.696]         base::withCallingHandlers({
[13:23:48.696]             ...future.value <- base::withVisible(base::local({
[13:23:48.696]                 ...future.makeSendCondition <- base::local({
[13:23:48.696]                   sendCondition <- NULL
[13:23:48.696]                   function(frame = 1L) {
[13:23:48.696]                     if (is.function(sendCondition)) 
[13:23:48.696]                       return(sendCondition)
[13:23:48.696]                     ns <- getNamespace("parallel")
[13:23:48.696]                     if (exists("sendData", mode = "function", 
[13:23:48.696]                       envir = ns)) {
[13:23:48.696]                       parallel_sendData <- get("sendData", mode = "function", 
[13:23:48.696]                         envir = ns)
[13:23:48.696]                       envir <- sys.frame(frame)
[13:23:48.696]                       master <- NULL
[13:23:48.696]                       while (!identical(envir, .GlobalEnv) && 
[13:23:48.696]                         !identical(envir, emptyenv())) {
[13:23:48.696]                         if (exists("master", mode = "list", envir = envir, 
[13:23:48.696]                           inherits = FALSE)) {
[13:23:48.696]                           master <- get("master", mode = "list", 
[13:23:48.696]                             envir = envir, inherits = FALSE)
[13:23:48.696]                           if (inherits(master, c("SOCKnode", 
[13:23:48.696]                             "SOCK0node"))) {
[13:23:48.696]                             sendCondition <<- function(cond) {
[13:23:48.696]                               data <- list(type = "VALUE", value = cond, 
[13:23:48.696]                                 success = TRUE)
[13:23:48.696]                               parallel_sendData(master, data)
[13:23:48.696]                             }
[13:23:48.696]                             return(sendCondition)
[13:23:48.696]                           }
[13:23:48.696]                         }
[13:23:48.696]                         frame <- frame + 1L
[13:23:48.696]                         envir <- sys.frame(frame)
[13:23:48.696]                       }
[13:23:48.696]                     }
[13:23:48.696]                     sendCondition <<- function(cond) NULL
[13:23:48.696]                   }
[13:23:48.696]                 })
[13:23:48.696]                 withCallingHandlers({
[13:23:48.696]                   {
[13:23:48.696]                     gc()
[13:23:48.696]                   }
[13:23:48.696]                 }, immediateCondition = function(cond) {
[13:23:48.696]                   sendCondition <- ...future.makeSendCondition()
[13:23:48.696]                   sendCondition(cond)
[13:23:48.696]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:23:48.696]                   {
[13:23:48.696]                     inherits <- base::inherits
[13:23:48.696]                     invokeRestart <- base::invokeRestart
[13:23:48.696]                     is.null <- base::is.null
[13:23:48.696]                     muffled <- FALSE
[13:23:48.696]                     if (inherits(cond, "message")) {
[13:23:48.696]                       muffled <- grepl(pattern, "muffleMessage")
[13:23:48.696]                       if (muffled) 
[13:23:48.696]                         invokeRestart("muffleMessage")
[13:23:48.696]                     }
[13:23:48.696]                     else if (inherits(cond, "warning")) {
[13:23:48.696]                       muffled <- grepl(pattern, "muffleWarning")
[13:23:48.696]                       if (muffled) 
[13:23:48.696]                         invokeRestart("muffleWarning")
[13:23:48.696]                     }
[13:23:48.696]                     else if (inherits(cond, "condition")) {
[13:23:48.696]                       if (!is.null(pattern)) {
[13:23:48.696]                         computeRestarts <- base::computeRestarts
[13:23:48.696]                         grepl <- base::grepl
[13:23:48.696]                         restarts <- computeRestarts(cond)
[13:23:48.696]                         for (restart in restarts) {
[13:23:48.696]                           name <- restart$name
[13:23:48.696]                           if (is.null(name)) 
[13:23:48.696]                             next
[13:23:48.696]                           if (!grepl(pattern, name)) 
[13:23:48.696]                             next
[13:23:48.696]                           invokeRestart(restart)
[13:23:48.696]                           muffled <- TRUE
[13:23:48.696]                           break
[13:23:48.696]                         }
[13:23:48.696]                       }
[13:23:48.696]                     }
[13:23:48.696]                     invisible(muffled)
[13:23:48.696]                   }
[13:23:48.696]                   muffleCondition(cond)
[13:23:48.696]                 })
[13:23:48.696]             }))
[13:23:48.696]             future::FutureResult(value = ...future.value$value, 
[13:23:48.696]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:23:48.696]                   ...future.rng), globalenv = if (FALSE) 
[13:23:48.696]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:23:48.696]                     ...future.globalenv.names))
[13:23:48.696]                 else NULL, started = ...future.startTime, version = "1.8")
[13:23:48.696]         }, condition = base::local({
[13:23:48.696]             c <- base::c
[13:23:48.696]             inherits <- base::inherits
[13:23:48.696]             invokeRestart <- base::invokeRestart
[13:23:48.696]             length <- base::length
[13:23:48.696]             list <- base::list
[13:23:48.696]             seq.int <- base::seq.int
[13:23:48.696]             signalCondition <- base::signalCondition
[13:23:48.696]             sys.calls <- base::sys.calls
[13:23:48.696]             `[[` <- base::`[[`
[13:23:48.696]             `+` <- base::`+`
[13:23:48.696]             `<<-` <- base::`<<-`
[13:23:48.696]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:23:48.696]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:23:48.696]                   3L)]
[13:23:48.696]             }
[13:23:48.696]             function(cond) {
[13:23:48.696]                 is_error <- inherits(cond, "error")
[13:23:48.696]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:23:48.696]                   NULL)
[13:23:48.696]                 if (is_error) {
[13:23:48.696]                   sessionInformation <- function() {
[13:23:48.696]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:23:48.696]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:23:48.696]                       search = base::search(), system = base::Sys.info())
[13:23:48.696]                   }
[13:23:48.696]                   ...future.conditions[[length(...future.conditions) + 
[13:23:48.696]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:23:48.696]                     cond$call), session = sessionInformation(), 
[13:23:48.696]                     timestamp = base::Sys.time(), signaled = 0L)
[13:23:48.696]                   signalCondition(cond)
[13:23:48.696]                 }
[13:23:48.696]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:23:48.696]                 "immediateCondition"))) {
[13:23:48.696]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:23:48.696]                   ...future.conditions[[length(...future.conditions) + 
[13:23:48.696]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:23:48.696]                   if (TRUE && !signal) {
[13:23:48.696]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:23:48.696]                     {
[13:23:48.696]                       inherits <- base::inherits
[13:23:48.696]                       invokeRestart <- base::invokeRestart
[13:23:48.696]                       is.null <- base::is.null
[13:23:48.696]                       muffled <- FALSE
[13:23:48.696]                       if (inherits(cond, "message")) {
[13:23:48.696]                         muffled <- grepl(pattern, "muffleMessage")
[13:23:48.696]                         if (muffled) 
[13:23:48.696]                           invokeRestart("muffleMessage")
[13:23:48.696]                       }
[13:23:48.696]                       else if (inherits(cond, "warning")) {
[13:23:48.696]                         muffled <- grepl(pattern, "muffleWarning")
[13:23:48.696]                         if (muffled) 
[13:23:48.696]                           invokeRestart("muffleWarning")
[13:23:48.696]                       }
[13:23:48.696]                       else if (inherits(cond, "condition")) {
[13:23:48.696]                         if (!is.null(pattern)) {
[13:23:48.696]                           computeRestarts <- base::computeRestarts
[13:23:48.696]                           grepl <- base::grepl
[13:23:48.696]                           restarts <- computeRestarts(cond)
[13:23:48.696]                           for (restart in restarts) {
[13:23:48.696]                             name <- restart$name
[13:23:48.696]                             if (is.null(name)) 
[13:23:48.696]                               next
[13:23:48.696]                             if (!grepl(pattern, name)) 
[13:23:48.696]                               next
[13:23:48.696]                             invokeRestart(restart)
[13:23:48.696]                             muffled <- TRUE
[13:23:48.696]                             break
[13:23:48.696]                           }
[13:23:48.696]                         }
[13:23:48.696]                       }
[13:23:48.696]                       invisible(muffled)
[13:23:48.696]                     }
[13:23:48.696]                     muffleCondition(cond, pattern = "^muffle")
[13:23:48.696]                   }
[13:23:48.696]                 }
[13:23:48.696]                 else {
[13:23:48.696]                   if (TRUE) {
[13:23:48.696]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:23:48.696]                     {
[13:23:48.696]                       inherits <- base::inherits
[13:23:48.696]                       invokeRestart <- base::invokeRestart
[13:23:48.696]                       is.null <- base::is.null
[13:23:48.696]                       muffled <- FALSE
[13:23:48.696]                       if (inherits(cond, "message")) {
[13:23:48.696]                         muffled <- grepl(pattern, "muffleMessage")
[13:23:48.696]                         if (muffled) 
[13:23:48.696]                           invokeRestart("muffleMessage")
[13:23:48.696]                       }
[13:23:48.696]                       else if (inherits(cond, "warning")) {
[13:23:48.696]                         muffled <- grepl(pattern, "muffleWarning")
[13:23:48.696]                         if (muffled) 
[13:23:48.696]                           invokeRestart("muffleWarning")
[13:23:48.696]                       }
[13:23:48.696]                       else if (inherits(cond, "condition")) {
[13:23:48.696]                         if (!is.null(pattern)) {
[13:23:48.696]                           computeRestarts <- base::computeRestarts
[13:23:48.696]                           grepl <- base::grepl
[13:23:48.696]                           restarts <- computeRestarts(cond)
[13:23:48.696]                           for (restart in restarts) {
[13:23:48.696]                             name <- restart$name
[13:23:48.696]                             if (is.null(name)) 
[13:23:48.696]                               next
[13:23:48.696]                             if (!grepl(pattern, name)) 
[13:23:48.696]                               next
[13:23:48.696]                             invokeRestart(restart)
[13:23:48.696]                             muffled <- TRUE
[13:23:48.696]                             break
[13:23:48.696]                           }
[13:23:48.696]                         }
[13:23:48.696]                       }
[13:23:48.696]                       invisible(muffled)
[13:23:48.696]                     }
[13:23:48.696]                     muffleCondition(cond, pattern = "^muffle")
[13:23:48.696]                   }
[13:23:48.696]                 }
[13:23:48.696]             }
[13:23:48.696]         }))
[13:23:48.696]     }, error = function(ex) {
[13:23:48.696]         base::structure(base::list(value = NULL, visible = NULL, 
[13:23:48.696]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:23:48.696]                 ...future.rng), started = ...future.startTime, 
[13:23:48.696]             finished = Sys.time(), session_uuid = NA_character_, 
[13:23:48.696]             version = "1.8"), class = "FutureResult")
[13:23:48.696]     }, finally = {
[13:23:48.696]         if (!identical(...future.workdir, getwd())) 
[13:23:48.696]             setwd(...future.workdir)
[13:23:48.696]         {
[13:23:48.696]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:23:48.696]                 ...future.oldOptions$nwarnings <- NULL
[13:23:48.696]             }
[13:23:48.696]             base::options(...future.oldOptions)
[13:23:48.696]             if (.Platform$OS.type == "windows") {
[13:23:48.696]                 old_names <- names(...future.oldEnvVars)
[13:23:48.696]                 envs <- base::Sys.getenv()
[13:23:48.696]                 names <- names(envs)
[13:23:48.696]                 common <- intersect(names, old_names)
[13:23:48.696]                 added <- setdiff(names, old_names)
[13:23:48.696]                 removed <- setdiff(old_names, names)
[13:23:48.696]                 changed <- common[...future.oldEnvVars[common] != 
[13:23:48.696]                   envs[common]]
[13:23:48.696]                 NAMES <- toupper(changed)
[13:23:48.696]                 args <- list()
[13:23:48.696]                 for (kk in seq_along(NAMES)) {
[13:23:48.696]                   name <- changed[[kk]]
[13:23:48.696]                   NAME <- NAMES[[kk]]
[13:23:48.696]                   if (name != NAME && is.element(NAME, old_names)) 
[13:23:48.696]                     next
[13:23:48.696]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:23:48.696]                 }
[13:23:48.696]                 NAMES <- toupper(added)
[13:23:48.696]                 for (kk in seq_along(NAMES)) {
[13:23:48.696]                   name <- added[[kk]]
[13:23:48.696]                   NAME <- NAMES[[kk]]
[13:23:48.696]                   if (name != NAME && is.element(NAME, old_names)) 
[13:23:48.696]                     next
[13:23:48.696]                   args[[name]] <- ""
[13:23:48.696]                 }
[13:23:48.696]                 NAMES <- toupper(removed)
[13:23:48.696]                 for (kk in seq_along(NAMES)) {
[13:23:48.696]                   name <- removed[[kk]]
[13:23:48.696]                   NAME <- NAMES[[kk]]
[13:23:48.696]                   if (name != NAME && is.element(NAME, old_names)) 
[13:23:48.696]                     next
[13:23:48.696]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:23:48.696]                 }
[13:23:48.696]                 if (length(args) > 0) 
[13:23:48.696]                   base::do.call(base::Sys.setenv, args = args)
[13:23:48.696]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:23:48.696]             }
[13:23:48.696]             else {
[13:23:48.696]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:23:48.696]             }
[13:23:48.696]             {
[13:23:48.696]                 if (base::length(...future.futureOptionsAdded) > 
[13:23:48.696]                   0L) {
[13:23:48.696]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:23:48.696]                   base::names(opts) <- ...future.futureOptionsAdded
[13:23:48.696]                   base::options(opts)
[13:23:48.696]                 }
[13:23:48.696]                 {
[13:23:48.696]                   {
[13:23:48.696]                     base::options(mc.cores = ...future.mc.cores.old)
[13:23:48.696]                     NULL
[13:23:48.696]                   }
[13:23:48.696]                   options(future.plan = NULL)
[13:23:48.696]                   if (is.na(NA_character_)) 
[13:23:48.696]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:23:48.696]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:23:48.696]                   future::plan(list(function (..., workers = 2L, 
[13:23:48.696]                     envir = parent.frame()) 
[13:23:48.696]                   strategy(..., workers = workers, envir = envir)), 
[13:23:48.696]                     .cleanup = FALSE, .init = FALSE)
[13:23:48.696]                 }
[13:23:48.696]             }
[13:23:48.696]         }
[13:23:48.696]     })
[13:23:48.696]     if (TRUE) {
[13:23:48.696]         base::sink(type = "output", split = FALSE)
[13:23:48.696]         if (TRUE) {
[13:23:48.696]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:23:48.696]         }
[13:23:48.696]         else {
[13:23:48.696]             ...future.result["stdout"] <- base::list(NULL)
[13:23:48.696]         }
[13:23:48.696]         base::close(...future.stdout)
[13:23:48.696]         ...future.stdout <- NULL
[13:23:48.696]     }
[13:23:48.696]     ...future.result$conditions <- ...future.conditions
[13:23:48.696]     ...future.result$finished <- base::Sys.time()
[13:23:48.696]     ...future.result
[13:23:48.696] }
[13:23:48.699] MultisessionFuture started
[13:23:48.699] - Launch lazy future ... done
[13:23:48.699] run() for ‘MultisessionFuture’ ... done
> v <- value(f)
[13:23:48.700] result() for ClusterFuture ...
[13:23:48.700] receiveMessageFromWorker() for ClusterFuture ...
[13:23:48.700] - Validating connection of MultisessionFuture
[13:23:48.769] - received message: FutureResult
[13:23:48.769] - Received FutureResult
[13:23:48.769] - Erased future from FutureRegistry
[13:23:48.770] result() for ClusterFuture ...
[13:23:48.770] - result already collected: FutureResult
[13:23:48.770] result() for ClusterFuture ... done
[13:23:48.770] receiveMessageFromWorker() for ClusterFuture ... done
[13:23:48.770] result() for ClusterFuture ... done
[13:23:48.771] result() for ClusterFuture ...
[13:23:48.771] - result already collected: FutureResult
[13:23:48.771] result() for ClusterFuture ... done
> print(v)
         used (Mb) gc trigger  (Mb) max used  (Mb)
Ncells 395204 21.2     836944  44.7   664120  35.5
Vcells 704817  5.4   13457836 102.7 15781226 120.5
> 
> message("*** multisession(..., gc = TRUE) ... TRUE")
*** multisession(..., gc = TRUE) ... TRUE
> 
> 
> message("*** multisession(...) - stopping with plan() change ...")
*** multisession(...) - stopping with plan() change ...
>   
> plan(multisession, workers = 2L)
[13:23:48.772] plan(): Setting new future strategy stack:
[13:23:48.772] List of future strategies:
[13:23:48.772] 1. multisession:
[13:23:48.772]    - args: function (..., workers = 2L, envir = parent.frame())
[13:23:48.772]    - tweaked: TRUE
[13:23:48.772]    - call: plan(multisession, workers = 2L)
[13:23:48.773] plan(): plan_init() of ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ...
[13:23:48.773] multisession:
[13:23:48.773] - args: function (..., workers = 2L, envir = parent.frame())
[13:23:48.773] - tweaked: TRUE
[13:23:48.773] - call: plan(multisession, workers = 2L)
[13:23:48.774] getGlobalsAndPackages() ...
[13:23:48.774] Not searching for globals
[13:23:48.775] - globals: [0] <none>
[13:23:48.775] getGlobalsAndPackages() ... DONE
[13:23:48.775] [local output] makeClusterPSOCK() ...
[13:23:48.781] [local output] Workers: [n = 2] ‘localhost’, ‘localhost’
[13:23:48.782] [local output] Base port: 11413
[13:23:48.782] [local output] Getting setup options for 2 cluster nodes ...
[13:23:48.782] [local output]  - Node 1 of 2 ...
[13:23:48.783] [local output] localMachine=TRUE => revtunnel=FALSE

[13:23:48.784] [local output] Rscript port: 11413

[13:23:48.784] [local output]  - Node 2 of 2 ...
[13:23:48.785] [local output] localMachine=TRUE => revtunnel=FALSE

[13:23:48.786] [local output] Rscript port: 11413

[13:23:48.786] [local output] Getting setup options for 2 cluster nodes ... done
[13:23:48.787] [local output]  - Parallel setup requested for some PSOCK nodes
[13:23:48.787] [local output] Setting up PSOCK nodes in parallel
[13:23:48.787] List of 36
[13:23:48.787]  $ worker          : chr "localhost"
[13:23:48.787]   ..- attr(*, "localhost")= logi TRUE
[13:23:48.787]  $ master          : chr "localhost"
[13:23:48.787]  $ port            : int 11413
[13:23:48.787]  $ connectTimeout  : num 120
[13:23:48.787]  $ timeout         : num 2592000
[13:23:48.787]  $ rscript         : chr "'/usr/local/lib/R/bin/Rscript'"
[13:23:48.787]  $ homogeneous     : logi TRUE
[13:23:48.787]  $ rscript_args    : chr "--default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),fi"| __truncated__
[13:23:48.787]  $ rscript_envs    : NULL
[13:23:48.787]  $ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[13:23:48.787]  $ rscript_startup : NULL
[13:23:48.787]  $ rscript_sh      : chr "sh"
[13:23:48.787]  $ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[13:23:48.787]  $ methods         : logi TRUE
[13:23:48.787]  $ socketOptions   : chr "no-delay"
[13:23:48.787]  $ useXDR          : logi FALSE
[13:23:48.787]  $ outfile         : chr "/dev/null"
[13:23:48.787]  $ renice          : int NA
[13:23:48.787]  $ rshcmd          : NULL
[13:23:48.787]  $ user            : chr(0) 
[13:23:48.787]  $ revtunnel       : logi FALSE
[13:23:48.787]  $ rshlogfile      : NULL
[13:23:48.787]  $ rshopts         : chr(0) 
[13:23:48.787]  $ rank            : int 1
[13:23:48.787]  $ manual          : logi FALSE
[13:23:48.787]  $ dryrun          : logi FALSE
[13:23:48.787]  $ quiet           : logi FALSE
[13:23:48.787]  $ setup_strategy  : chr "parallel"
[13:23:48.787]  $ local_cmd       : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[13:23:48.787]  $ pidfile         : chr "/tmp/Rtmp66NXja/worker.rank=1.parallelly.parent=88294.158e686def8d.pid"
[13:23:48.787]  $ rshcmd_label    : NULL
[13:23:48.787]  $ rsh_call        : NULL
[13:23:48.787]  $ cmd             : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[13:23:48.787]  $ localMachine    : logi TRUE
[13:23:48.787]  $ make_fcn        :function (worker = getOption2("parallelly.localhost.hostname", "localhost"), 
[13:23:48.787]     master = NULL, port, connectTimeout = getOption2("parallelly.makeNodePSOCK.connectTimeout", 
[13:23:48.787]         2 * 60), timeout = getOption2("parallelly.makeNodePSOCK.timeout", 
[13:23:48.787]         30 * 24 * 60 * 60), rscript = NULL, homogeneous = NULL, rscript_args = NULL, 
[13:23:48.787]     rscript_envs = NULL, rscript_libs = NULL, rscript_startup = NULL, rscript_sh = c("auto", 
[13:23:48.787]         "cmd", "sh"), default_packages = c("datasets", "utils", "grDevices", 
[13:23:48.787]         "graphics", "stats", if (methods) "methods"), methods = TRUE, socketOptions = getOption2("parallelly.makeNodePSOCK.socketOptions", 
[13:23:48.787]         "no-delay"), useXDR = getOption2("parallelly.makeNodePSOCK.useXDR", 
[13:23:48.787]         FALSE), outfile = "/dev/null", renice = NA_integer_, rshcmd = getOption2("parallelly.makeNodePSOCK.rshcmd", 
[13:23:48.787]         NULL), user = NULL, revtunnel = NA, rshlogfile = NULL, rshopts = getOption2("parallelly.makeNodePSOCK.rshopts", 
[13:23:48.787]         NULL), rank = 1L, manual = FALSE, dryrun = FALSE, quiet = FALSE, 
[13:23:48.787]     setup_strategy = getOption2("parallelly.makeNodePSOCK.setup_strategy", 
[13:23:48.787]         "parallel"), action = c("launch", "options"), verbose = FALSE)  
[13:23:48.787]  $ arguments       :List of 28
[13:23:48.787]   ..$ worker          : chr "localhost"
[13:23:48.787]   ..$ master          : NULL
[13:23:48.787]   ..$ port            : int 11413
[13:23:48.787]   ..$ connectTimeout  : num 120
[13:23:48.787]   ..$ timeout         : num 2592000
[13:23:48.787]   ..$ rscript         : NULL
[13:23:48.787]   ..$ homogeneous     : NULL
[13:23:48.787]   ..$ rscript_args    : NULL
[13:23:48.787]   ..$ rscript_envs    : NULL
[13:23:48.787]   ..$ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[13:23:48.787]   ..$ rscript_startup : NULL
[13:23:48.787]   ..$ rscript_sh      : chr [1:3] "auto" "cmd" "sh"
[13:23:48.787]   ..$ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[13:23:48.787]   ..$ methods         : logi TRUE
[13:23:48.787]   ..$ socketOptions   : chr "no-delay"
[13:23:48.787]   ..$ useXDR          : logi FALSE
[13:23:48.787]   ..$ outfile         : chr "/dev/null"
[13:23:48.787]   ..$ renice          : int NA
[13:23:48.787]   ..$ rshcmd          : NULL
[13:23:48.787]   ..$ user            : NULL
[13:23:48.787]   ..$ revtunnel       : logi NA
[13:23:48.787]   ..$ rshlogfile      : NULL
[13:23:48.787]   ..$ rshopts         : NULL
[13:23:48.787]   ..$ rank            : int 1
[13:23:48.787]   ..$ manual          : logi FALSE
[13:23:48.787]   ..$ dryrun          : logi FALSE
[13:23:48.787]   ..$ quiet           : logi FALSE
[13:23:48.787]   ..$ setup_strategy  : chr "parallel"
[13:23:48.787]  - attr(*, "class")= chr [1:2] "makeNodePSOCKOptions" "makeNodeOptions"
[13:23:48.811] [local output] System call to launch all workers:
[13:23:48.811] [local output] '/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/Rtmp66NXja/worker.rank=1.parallelly.parent=88294.158e686def8d.pid")), silent = TRUE)' -e 'options(socketOptions = "no-delay")' -e '.libPaths(c("/usr/local/lib/R/site-library","/usr/local/lib/R/library"))' -e 'workRSOCK <- tryCatch(parallel:::.workRSOCK, error=function(e) parallel:::.slaveRSOCK); workRSOCK()' MASTER=localhost PORT=11413 OUT=/dev/null TIMEOUT=2592000 XDR=FALSE SETUPTIMEOUT=120 SETUPSTRATEGY=parallel
[13:23:48.812] [local output] Starting PSOCK main server
[13:23:48.813] [local output] Workers launched
[13:23:48.813] [local output] Waiting for workers to connect back
[13:23:48.813]  - [local output] 0 workers out of 2 ready
[13:23:49.094]  - [local output] 0 workers out of 2 ready
[13:23:49.095]  - [local output] 1 workers out of 2 ready
[13:23:49.102]  - [local output] 1 workers out of 2 ready
[13:23:49.102]  - [local output] 2 workers out of 2 ready
[13:23:49.103] [local output] Launching of workers completed
[13:23:49.103] [local output] Collecting session information from workers
[13:23:49.103] [local output]  - Worker #1 of 2
[13:23:49.104] [local output]  - Worker #2 of 2
[13:23:49.104] [local output] makeClusterPSOCK() ... done
[13:23:49.115] Packages needed by the future expression (n = 0): <none>
[13:23:49.115] Packages needed by future strategies (n = 0): <none>
[13:23:49.116] {
[13:23:49.116]     {
[13:23:49.116]         {
[13:23:49.116]             ...future.startTime <- base::Sys.time()
[13:23:49.116]             {
[13:23:49.116]                 {
[13:23:49.116]                   {
[13:23:49.116]                     {
[13:23:49.116]                       base::local({
[13:23:49.116]                         has_future <- base::requireNamespace("future", 
[13:23:49.116]                           quietly = TRUE)
[13:23:49.116]                         if (has_future) {
[13:23:49.116]                           ns <- base::getNamespace("future")
[13:23:49.116]                           version <- ns[[".package"]][["version"]]
[13:23:49.116]                           if (is.null(version)) 
[13:23:49.116]                             version <- utils::packageVersion("future")
[13:23:49.116]                         }
[13:23:49.116]                         else {
[13:23:49.116]                           version <- NULL
[13:23:49.116]                         }
[13:23:49.116]                         if (!has_future || version < "1.8.0") {
[13:23:49.116]                           info <- base::c(r_version = base::gsub("R version ", 
[13:23:49.116]                             "", base::R.version$version.string), 
[13:23:49.116]                             platform = base::sprintf("%s (%s-bit)", 
[13:23:49.116]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:23:49.116]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:23:49.116]                               "release", "version")], collapse = " "), 
[13:23:49.116]                             hostname = base::Sys.info()[["nodename"]])
[13:23:49.116]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:23:49.116]                             info)
[13:23:49.116]                           info <- base::paste(info, collapse = "; ")
[13:23:49.116]                           if (!has_future) {
[13:23:49.116]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:23:49.116]                               info)
[13:23:49.116]                           }
[13:23:49.116]                           else {
[13:23:49.116]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:23:49.116]                               info, version)
[13:23:49.116]                           }
[13:23:49.116]                           base::stop(msg)
[13:23:49.116]                         }
[13:23:49.116]                       })
[13:23:49.116]                     }
[13:23:49.116]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[13:23:49.116]                     base::options(mc.cores = 1L)
[13:23:49.116]                   }
[13:23:49.116]                   options(future.plan = NULL)
[13:23:49.116]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:23:49.116]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:23:49.116]                 }
[13:23:49.116]                 ...future.workdir <- getwd()
[13:23:49.116]             }
[13:23:49.116]             ...future.oldOptions <- base::as.list(base::.Options)
[13:23:49.116]             ...future.oldEnvVars <- base::Sys.getenv()
[13:23:49.116]         }
[13:23:49.116]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:23:49.116]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:23:49.116]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:23:49.116]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:23:49.116]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:23:49.116]             future.stdout.windows.reencode = NULL, width = 80L)
[13:23:49.116]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:23:49.116]             base::names(...future.oldOptions))
[13:23:49.116]     }
[13:23:49.116]     if (FALSE) {
[13:23:49.116]     }
[13:23:49.116]     else {
[13:23:49.116]         if (TRUE) {
[13:23:49.116]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:23:49.116]                 open = "w")
[13:23:49.116]         }
[13:23:49.116]         else {
[13:23:49.116]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:23:49.116]                 windows = "NUL", "/dev/null"), open = "w")
[13:23:49.116]         }
[13:23:49.116]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:23:49.116]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:23:49.116]             base::sink(type = "output", split = FALSE)
[13:23:49.116]             base::close(...future.stdout)
[13:23:49.116]         }, add = TRUE)
[13:23:49.116]     }
[13:23:49.116]     ...future.frame <- base::sys.nframe()
[13:23:49.116]     ...future.conditions <- base::list()
[13:23:49.116]     ...future.rng <- base::globalenv()$.Random.seed
[13:23:49.116]     if (FALSE) {
[13:23:49.116]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:23:49.116]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:23:49.116]     }
[13:23:49.116]     ...future.result <- base::tryCatch({
[13:23:49.116]         base::withCallingHandlers({
[13:23:49.116]             ...future.value <- base::withVisible(base::local({
[13:23:49.116]                 ...future.makeSendCondition <- base::local({
[13:23:49.116]                   sendCondition <- NULL
[13:23:49.116]                   function(frame = 1L) {
[13:23:49.116]                     if (is.function(sendCondition)) 
[13:23:49.116]                       return(sendCondition)
[13:23:49.116]                     ns <- getNamespace("parallel")
[13:23:49.116]                     if (exists("sendData", mode = "function", 
[13:23:49.116]                       envir = ns)) {
[13:23:49.116]                       parallel_sendData <- get("sendData", mode = "function", 
[13:23:49.116]                         envir = ns)
[13:23:49.116]                       envir <- sys.frame(frame)
[13:23:49.116]                       master <- NULL
[13:23:49.116]                       while (!identical(envir, .GlobalEnv) && 
[13:23:49.116]                         !identical(envir, emptyenv())) {
[13:23:49.116]                         if (exists("master", mode = "list", envir = envir, 
[13:23:49.116]                           inherits = FALSE)) {
[13:23:49.116]                           master <- get("master", mode = "list", 
[13:23:49.116]                             envir = envir, inherits = FALSE)
[13:23:49.116]                           if (inherits(master, c("SOCKnode", 
[13:23:49.116]                             "SOCK0node"))) {
[13:23:49.116]                             sendCondition <<- function(cond) {
[13:23:49.116]                               data <- list(type = "VALUE", value = cond, 
[13:23:49.116]                                 success = TRUE)
[13:23:49.116]                               parallel_sendData(master, data)
[13:23:49.116]                             }
[13:23:49.116]                             return(sendCondition)
[13:23:49.116]                           }
[13:23:49.116]                         }
[13:23:49.116]                         frame <- frame + 1L
[13:23:49.116]                         envir <- sys.frame(frame)
[13:23:49.116]                       }
[13:23:49.116]                     }
[13:23:49.116]                     sendCondition <<- function(cond) NULL
[13:23:49.116]                   }
[13:23:49.116]                 })
[13:23:49.116]                 withCallingHandlers({
[13:23:49.116]                   NA
[13:23:49.116]                 }, immediateCondition = function(cond) {
[13:23:49.116]                   sendCondition <- ...future.makeSendCondition()
[13:23:49.116]                   sendCondition(cond)
[13:23:49.116]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:23:49.116]                   {
[13:23:49.116]                     inherits <- base::inherits
[13:23:49.116]                     invokeRestart <- base::invokeRestart
[13:23:49.116]                     is.null <- base::is.null
[13:23:49.116]                     muffled <- FALSE
[13:23:49.116]                     if (inherits(cond, "message")) {
[13:23:49.116]                       muffled <- grepl(pattern, "muffleMessage")
[13:23:49.116]                       if (muffled) 
[13:23:49.116]                         invokeRestart("muffleMessage")
[13:23:49.116]                     }
[13:23:49.116]                     else if (inherits(cond, "warning")) {
[13:23:49.116]                       muffled <- grepl(pattern, "muffleWarning")
[13:23:49.116]                       if (muffled) 
[13:23:49.116]                         invokeRestart("muffleWarning")
[13:23:49.116]                     }
[13:23:49.116]                     else if (inherits(cond, "condition")) {
[13:23:49.116]                       if (!is.null(pattern)) {
[13:23:49.116]                         computeRestarts <- base::computeRestarts
[13:23:49.116]                         grepl <- base::grepl
[13:23:49.116]                         restarts <- computeRestarts(cond)
[13:23:49.116]                         for (restart in restarts) {
[13:23:49.116]                           name <- restart$name
[13:23:49.116]                           if (is.null(name)) 
[13:23:49.116]                             next
[13:23:49.116]                           if (!grepl(pattern, name)) 
[13:23:49.116]                             next
[13:23:49.116]                           invokeRestart(restart)
[13:23:49.116]                           muffled <- TRUE
[13:23:49.116]                           break
[13:23:49.116]                         }
[13:23:49.116]                       }
[13:23:49.116]                     }
[13:23:49.116]                     invisible(muffled)
[13:23:49.116]                   }
[13:23:49.116]                   muffleCondition(cond)
[13:23:49.116]                 })
[13:23:49.116]             }))
[13:23:49.116]             future::FutureResult(value = ...future.value$value, 
[13:23:49.116]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:23:49.116]                   ...future.rng), globalenv = if (FALSE) 
[13:23:49.116]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:23:49.116]                     ...future.globalenv.names))
[13:23:49.116]                 else NULL, started = ...future.startTime, version = "1.8")
[13:23:49.116]         }, condition = base::local({
[13:23:49.116]             c <- base::c
[13:23:49.116]             inherits <- base::inherits
[13:23:49.116]             invokeRestart <- base::invokeRestart
[13:23:49.116]             length <- base::length
[13:23:49.116]             list <- base::list
[13:23:49.116]             seq.int <- base::seq.int
[13:23:49.116]             signalCondition <- base::signalCondition
[13:23:49.116]             sys.calls <- base::sys.calls
[13:23:49.116]             `[[` <- base::`[[`
[13:23:49.116]             `+` <- base::`+`
[13:23:49.116]             `<<-` <- base::`<<-`
[13:23:49.116]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:23:49.116]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:23:49.116]                   3L)]
[13:23:49.116]             }
[13:23:49.116]             function(cond) {
[13:23:49.116]                 is_error <- inherits(cond, "error")
[13:23:49.116]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:23:49.116]                   NULL)
[13:23:49.116]                 if (is_error) {
[13:23:49.116]                   sessionInformation <- function() {
[13:23:49.116]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:23:49.116]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:23:49.116]                       search = base::search(), system = base::Sys.info())
[13:23:49.116]                   }
[13:23:49.116]                   ...future.conditions[[length(...future.conditions) + 
[13:23:49.116]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:23:49.116]                     cond$call), session = sessionInformation(), 
[13:23:49.116]                     timestamp = base::Sys.time(), signaled = 0L)
[13:23:49.116]                   signalCondition(cond)
[13:23:49.116]                 }
[13:23:49.116]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:23:49.116]                 "immediateCondition"))) {
[13:23:49.116]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:23:49.116]                   ...future.conditions[[length(...future.conditions) + 
[13:23:49.116]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:23:49.116]                   if (TRUE && !signal) {
[13:23:49.116]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:23:49.116]                     {
[13:23:49.116]                       inherits <- base::inherits
[13:23:49.116]                       invokeRestart <- base::invokeRestart
[13:23:49.116]                       is.null <- base::is.null
[13:23:49.116]                       muffled <- FALSE
[13:23:49.116]                       if (inherits(cond, "message")) {
[13:23:49.116]                         muffled <- grepl(pattern, "muffleMessage")
[13:23:49.116]                         if (muffled) 
[13:23:49.116]                           invokeRestart("muffleMessage")
[13:23:49.116]                       }
[13:23:49.116]                       else if (inherits(cond, "warning")) {
[13:23:49.116]                         muffled <- grepl(pattern, "muffleWarning")
[13:23:49.116]                         if (muffled) 
[13:23:49.116]                           invokeRestart("muffleWarning")
[13:23:49.116]                       }
[13:23:49.116]                       else if (inherits(cond, "condition")) {
[13:23:49.116]                         if (!is.null(pattern)) {
[13:23:49.116]                           computeRestarts <- base::computeRestarts
[13:23:49.116]                           grepl <- base::grepl
[13:23:49.116]                           restarts <- computeRestarts(cond)
[13:23:49.116]                           for (restart in restarts) {
[13:23:49.116]                             name <- restart$name
[13:23:49.116]                             if (is.null(name)) 
[13:23:49.116]                               next
[13:23:49.116]                             if (!grepl(pattern, name)) 
[13:23:49.116]                               next
[13:23:49.116]                             invokeRestart(restart)
[13:23:49.116]                             muffled <- TRUE
[13:23:49.116]                             break
[13:23:49.116]                           }
[13:23:49.116]                         }
[13:23:49.116]                       }
[13:23:49.116]                       invisible(muffled)
[13:23:49.116]                     }
[13:23:49.116]                     muffleCondition(cond, pattern = "^muffle")
[13:23:49.116]                   }
[13:23:49.116]                 }
[13:23:49.116]                 else {
[13:23:49.116]                   if (TRUE) {
[13:23:49.116]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:23:49.116]                     {
[13:23:49.116]                       inherits <- base::inherits
[13:23:49.116]                       invokeRestart <- base::invokeRestart
[13:23:49.116]                       is.null <- base::is.null
[13:23:49.116]                       muffled <- FALSE
[13:23:49.116]                       if (inherits(cond, "message")) {
[13:23:49.116]                         muffled <- grepl(pattern, "muffleMessage")
[13:23:49.116]                         if (muffled) 
[13:23:49.116]                           invokeRestart("muffleMessage")
[13:23:49.116]                       }
[13:23:49.116]                       else if (inherits(cond, "warning")) {
[13:23:49.116]                         muffled <- grepl(pattern, "muffleWarning")
[13:23:49.116]                         if (muffled) 
[13:23:49.116]                           invokeRestart("muffleWarning")
[13:23:49.116]                       }
[13:23:49.116]                       else if (inherits(cond, "condition")) {
[13:23:49.116]                         if (!is.null(pattern)) {
[13:23:49.116]                           computeRestarts <- base::computeRestarts
[13:23:49.116]                           grepl <- base::grepl
[13:23:49.116]                           restarts <- computeRestarts(cond)
[13:23:49.116]                           for (restart in restarts) {
[13:23:49.116]                             name <- restart$name
[13:23:49.116]                             if (is.null(name)) 
[13:23:49.116]                               next
[13:23:49.116]                             if (!grepl(pattern, name)) 
[13:23:49.116]                               next
[13:23:49.116]                             invokeRestart(restart)
[13:23:49.116]                             muffled <- TRUE
[13:23:49.116]                             break
[13:23:49.116]                           }
[13:23:49.116]                         }
[13:23:49.116]                       }
[13:23:49.116]                       invisible(muffled)
[13:23:49.116]                     }
[13:23:49.116]                     muffleCondition(cond, pattern = "^muffle")
[13:23:49.116]                   }
[13:23:49.116]                 }
[13:23:49.116]             }
[13:23:49.116]         }))
[13:23:49.116]     }, error = function(ex) {
[13:23:49.116]         base::structure(base::list(value = NULL, visible = NULL, 
[13:23:49.116]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:23:49.116]                 ...future.rng), started = ...future.startTime, 
[13:23:49.116]             finished = Sys.time(), session_uuid = NA_character_, 
[13:23:49.116]             version = "1.8"), class = "FutureResult")
[13:23:49.116]     }, finally = {
[13:23:49.116]         if (!identical(...future.workdir, getwd())) 
[13:23:49.116]             setwd(...future.workdir)
[13:23:49.116]         {
[13:23:49.116]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:23:49.116]                 ...future.oldOptions$nwarnings <- NULL
[13:23:49.116]             }
[13:23:49.116]             base::options(...future.oldOptions)
[13:23:49.116]             if (.Platform$OS.type == "windows") {
[13:23:49.116]                 old_names <- names(...future.oldEnvVars)
[13:23:49.116]                 envs <- base::Sys.getenv()
[13:23:49.116]                 names <- names(envs)
[13:23:49.116]                 common <- intersect(names, old_names)
[13:23:49.116]                 added <- setdiff(names, old_names)
[13:23:49.116]                 removed <- setdiff(old_names, names)
[13:23:49.116]                 changed <- common[...future.oldEnvVars[common] != 
[13:23:49.116]                   envs[common]]
[13:23:49.116]                 NAMES <- toupper(changed)
[13:23:49.116]                 args <- list()
[13:23:49.116]                 for (kk in seq_along(NAMES)) {
[13:23:49.116]                   name <- changed[[kk]]
[13:23:49.116]                   NAME <- NAMES[[kk]]
[13:23:49.116]                   if (name != NAME && is.element(NAME, old_names)) 
[13:23:49.116]                     next
[13:23:49.116]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:23:49.116]                 }
[13:23:49.116]                 NAMES <- toupper(added)
[13:23:49.116]                 for (kk in seq_along(NAMES)) {
[13:23:49.116]                   name <- added[[kk]]
[13:23:49.116]                   NAME <- NAMES[[kk]]
[13:23:49.116]                   if (name != NAME && is.element(NAME, old_names)) 
[13:23:49.116]                     next
[13:23:49.116]                   args[[name]] <- ""
[13:23:49.116]                 }
[13:23:49.116]                 NAMES <- toupper(removed)
[13:23:49.116]                 for (kk in seq_along(NAMES)) {
[13:23:49.116]                   name <- removed[[kk]]
[13:23:49.116]                   NAME <- NAMES[[kk]]
[13:23:49.116]                   if (name != NAME && is.element(NAME, old_names)) 
[13:23:49.116]                     next
[13:23:49.116]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:23:49.116]                 }
[13:23:49.116]                 if (length(args) > 0) 
[13:23:49.116]                   base::do.call(base::Sys.setenv, args = args)
[13:23:49.116]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:23:49.116]             }
[13:23:49.116]             else {
[13:23:49.116]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:23:49.116]             }
[13:23:49.116]             {
[13:23:49.116]                 if (base::length(...future.futureOptionsAdded) > 
[13:23:49.116]                   0L) {
[13:23:49.116]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:23:49.116]                   base::names(opts) <- ...future.futureOptionsAdded
[13:23:49.116]                   base::options(opts)
[13:23:49.116]                 }
[13:23:49.116]                 {
[13:23:49.116]                   {
[13:23:49.116]                     base::options(mc.cores = ...future.mc.cores.old)
[13:23:49.116]                     NULL
[13:23:49.116]                   }
[13:23:49.116]                   options(future.plan = NULL)
[13:23:49.116]                   if (is.na(NA_character_)) 
[13:23:49.116]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:23:49.116]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:23:49.116]                   future::plan(list(function (..., workers = 2L, 
[13:23:49.116]                     envir = parent.frame()) 
[13:23:49.116]                   strategy(..., workers = workers, envir = envir)), 
[13:23:49.116]                     .cleanup = FALSE, .init = FALSE)
[13:23:49.116]                 }
[13:23:49.116]             }
[13:23:49.116]         }
[13:23:49.116]     })
[13:23:49.116]     if (TRUE) {
[13:23:49.116]         base::sink(type = "output", split = FALSE)
[13:23:49.116]         if (TRUE) {
[13:23:49.116]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:23:49.116]         }
[13:23:49.116]         else {
[13:23:49.116]             ...future.result["stdout"] <- base::list(NULL)
[13:23:49.116]         }
[13:23:49.116]         base::close(...future.stdout)
[13:23:49.116]         ...future.stdout <- NULL
[13:23:49.116]     }
[13:23:49.116]     ...future.result$conditions <- ...future.conditions
[13:23:49.116]     ...future.result$finished <- base::Sys.time()
[13:23:49.116]     ...future.result
[13:23:49.116] }
[13:23:49.171] MultisessionFuture started
[13:23:49.172] result() for ClusterFuture ...
[13:23:49.172] receiveMessageFromWorker() for ClusterFuture ...
[13:23:49.172] - Validating connection of MultisessionFuture
[13:23:49.207] - received message: FutureResult
[13:23:49.207] - Received FutureResult
[13:23:49.207] - Erased future from FutureRegistry
[13:23:49.207] result() for ClusterFuture ...
[13:23:49.207] - result already collected: FutureResult
[13:23:49.207] result() for ClusterFuture ... done
[13:23:49.207] receiveMessageFromWorker() for ClusterFuture ... done
[13:23:49.208] result() for ClusterFuture ... done
[13:23:49.208] result() for ClusterFuture ...
[13:23:49.208] - result already collected: FutureResult
[13:23:49.208] result() for ClusterFuture ... done
[13:23:49.208] plan(): plan_init() of ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ... DONE
[13:23:49.208] plan(): nbrOfWorkers() = 2
> f <- future(1L)
[13:23:49.208] getGlobalsAndPackages() ...
[13:23:49.209] Searching for globals...
[13:23:49.209] 
[13:23:49.209] Searching for globals ... DONE
[13:23:49.209] - globals: [0] <none>
[13:23:49.209] getGlobalsAndPackages() ... DONE
[13:23:49.209] run() for ‘Future’ ...
[13:23:49.210] - state: ‘created’
[13:23:49.210] - Future backend: ‘FutureStrategy’, ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[13:23:49.220] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:23:49.221] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[13:23:49.221]   - Field: ‘node’
[13:23:49.221]   - Field: ‘label’
[13:23:49.221]   - Field: ‘local’
[13:23:49.221]   - Field: ‘owner’
[13:23:49.221]   - Field: ‘envir’
[13:23:49.221]   - Field: ‘workers’
[13:23:49.221]   - Field: ‘packages’
[13:23:49.222]   - Field: ‘gc’
[13:23:49.222]   - Field: ‘conditions’
[13:23:49.222]   - Field: ‘persistent’
[13:23:49.222]   - Field: ‘expr’
[13:23:49.222]   - Field: ‘uuid’
[13:23:49.222]   - Field: ‘seed’
[13:23:49.222]   - Field: ‘version’
[13:23:49.222]   - Field: ‘result’
[13:23:49.222]   - Field: ‘asynchronous’
[13:23:49.222]   - Field: ‘calls’
[13:23:49.222]   - Field: ‘globals’
[13:23:49.223]   - Field: ‘stdout’
[13:23:49.223]   - Field: ‘earlySignal’
[13:23:49.223]   - Field: ‘lazy’
[13:23:49.223]   - Field: ‘state’
[13:23:49.223] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[13:23:49.223] - Launch lazy future ...
[13:23:49.223] Packages needed by the future expression (n = 0): <none>
[13:23:49.223] Packages needed by future strategies (n = 0): <none>
[13:23:49.224] {
[13:23:49.224]     {
[13:23:49.224]         {
[13:23:49.224]             ...future.startTime <- base::Sys.time()
[13:23:49.224]             {
[13:23:49.224]                 {
[13:23:49.224]                   {
[13:23:49.224]                     {
[13:23:49.224]                       base::local({
[13:23:49.224]                         has_future <- base::requireNamespace("future", 
[13:23:49.224]                           quietly = TRUE)
[13:23:49.224]                         if (has_future) {
[13:23:49.224]                           ns <- base::getNamespace("future")
[13:23:49.224]                           version <- ns[[".package"]][["version"]]
[13:23:49.224]                           if (is.null(version)) 
[13:23:49.224]                             version <- utils::packageVersion("future")
[13:23:49.224]                         }
[13:23:49.224]                         else {
[13:23:49.224]                           version <- NULL
[13:23:49.224]                         }
[13:23:49.224]                         if (!has_future || version < "1.8.0") {
[13:23:49.224]                           info <- base::c(r_version = base::gsub("R version ", 
[13:23:49.224]                             "", base::R.version$version.string), 
[13:23:49.224]                             platform = base::sprintf("%s (%s-bit)", 
[13:23:49.224]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:23:49.224]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:23:49.224]                               "release", "version")], collapse = " "), 
[13:23:49.224]                             hostname = base::Sys.info()[["nodename"]])
[13:23:49.224]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:23:49.224]                             info)
[13:23:49.224]                           info <- base::paste(info, collapse = "; ")
[13:23:49.224]                           if (!has_future) {
[13:23:49.224]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:23:49.224]                               info)
[13:23:49.224]                           }
[13:23:49.224]                           else {
[13:23:49.224]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:23:49.224]                               info, version)
[13:23:49.224]                           }
[13:23:49.224]                           base::stop(msg)
[13:23:49.224]                         }
[13:23:49.224]                       })
[13:23:49.224]                     }
[13:23:49.224]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[13:23:49.224]                     base::options(mc.cores = 1L)
[13:23:49.224]                   }
[13:23:49.224]                   options(future.plan = NULL)
[13:23:49.224]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:23:49.224]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:23:49.224]                 }
[13:23:49.224]                 ...future.workdir <- getwd()
[13:23:49.224]             }
[13:23:49.224]             ...future.oldOptions <- base::as.list(base::.Options)
[13:23:49.224]             ...future.oldEnvVars <- base::Sys.getenv()
[13:23:49.224]         }
[13:23:49.224]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:23:49.224]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:23:49.224]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:23:49.224]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:23:49.224]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:23:49.224]             future.stdout.windows.reencode = NULL, width = 80L)
[13:23:49.224]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:23:49.224]             base::names(...future.oldOptions))
[13:23:49.224]     }
[13:23:49.224]     if (FALSE) {
[13:23:49.224]     }
[13:23:49.224]     else {
[13:23:49.224]         if (TRUE) {
[13:23:49.224]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:23:49.224]                 open = "w")
[13:23:49.224]         }
[13:23:49.224]         else {
[13:23:49.224]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:23:49.224]                 windows = "NUL", "/dev/null"), open = "w")
[13:23:49.224]         }
[13:23:49.224]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:23:49.224]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:23:49.224]             base::sink(type = "output", split = FALSE)
[13:23:49.224]             base::close(...future.stdout)
[13:23:49.224]         }, add = TRUE)
[13:23:49.224]     }
[13:23:49.224]     ...future.frame <- base::sys.nframe()
[13:23:49.224]     ...future.conditions <- base::list()
[13:23:49.224]     ...future.rng <- base::globalenv()$.Random.seed
[13:23:49.224]     if (FALSE) {
[13:23:49.224]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:23:49.224]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:23:49.224]     }
[13:23:49.224]     ...future.result <- base::tryCatch({
[13:23:49.224]         base::withCallingHandlers({
[13:23:49.224]             ...future.value <- base::withVisible(base::local({
[13:23:49.224]                 ...future.makeSendCondition <- base::local({
[13:23:49.224]                   sendCondition <- NULL
[13:23:49.224]                   function(frame = 1L) {
[13:23:49.224]                     if (is.function(sendCondition)) 
[13:23:49.224]                       return(sendCondition)
[13:23:49.224]                     ns <- getNamespace("parallel")
[13:23:49.224]                     if (exists("sendData", mode = "function", 
[13:23:49.224]                       envir = ns)) {
[13:23:49.224]                       parallel_sendData <- get("sendData", mode = "function", 
[13:23:49.224]                         envir = ns)
[13:23:49.224]                       envir <- sys.frame(frame)
[13:23:49.224]                       master <- NULL
[13:23:49.224]                       while (!identical(envir, .GlobalEnv) && 
[13:23:49.224]                         !identical(envir, emptyenv())) {
[13:23:49.224]                         if (exists("master", mode = "list", envir = envir, 
[13:23:49.224]                           inherits = FALSE)) {
[13:23:49.224]                           master <- get("master", mode = "list", 
[13:23:49.224]                             envir = envir, inherits = FALSE)
[13:23:49.224]                           if (inherits(master, c("SOCKnode", 
[13:23:49.224]                             "SOCK0node"))) {
[13:23:49.224]                             sendCondition <<- function(cond) {
[13:23:49.224]                               data <- list(type = "VALUE", value = cond, 
[13:23:49.224]                                 success = TRUE)
[13:23:49.224]                               parallel_sendData(master, data)
[13:23:49.224]                             }
[13:23:49.224]                             return(sendCondition)
[13:23:49.224]                           }
[13:23:49.224]                         }
[13:23:49.224]                         frame <- frame + 1L
[13:23:49.224]                         envir <- sys.frame(frame)
[13:23:49.224]                       }
[13:23:49.224]                     }
[13:23:49.224]                     sendCondition <<- function(cond) NULL
[13:23:49.224]                   }
[13:23:49.224]                 })
[13:23:49.224]                 withCallingHandlers({
[13:23:49.224]                   1L
[13:23:49.224]                 }, immediateCondition = function(cond) {
[13:23:49.224]                   sendCondition <- ...future.makeSendCondition()
[13:23:49.224]                   sendCondition(cond)
[13:23:49.224]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:23:49.224]                   {
[13:23:49.224]                     inherits <- base::inherits
[13:23:49.224]                     invokeRestart <- base::invokeRestart
[13:23:49.224]                     is.null <- base::is.null
[13:23:49.224]                     muffled <- FALSE
[13:23:49.224]                     if (inherits(cond, "message")) {
[13:23:49.224]                       muffled <- grepl(pattern, "muffleMessage")
[13:23:49.224]                       if (muffled) 
[13:23:49.224]                         invokeRestart("muffleMessage")
[13:23:49.224]                     }
[13:23:49.224]                     else if (inherits(cond, "warning")) {
[13:23:49.224]                       muffled <- grepl(pattern, "muffleWarning")
[13:23:49.224]                       if (muffled) 
[13:23:49.224]                         invokeRestart("muffleWarning")
[13:23:49.224]                     }
[13:23:49.224]                     else if (inherits(cond, "condition")) {
[13:23:49.224]                       if (!is.null(pattern)) {
[13:23:49.224]                         computeRestarts <- base::computeRestarts
[13:23:49.224]                         grepl <- base::grepl
[13:23:49.224]                         restarts <- computeRestarts(cond)
[13:23:49.224]                         for (restart in restarts) {
[13:23:49.224]                           name <- restart$name
[13:23:49.224]                           if (is.null(name)) 
[13:23:49.224]                             next
[13:23:49.224]                           if (!grepl(pattern, name)) 
[13:23:49.224]                             next
[13:23:49.224]                           invokeRestart(restart)
[13:23:49.224]                           muffled <- TRUE
[13:23:49.224]                           break
[13:23:49.224]                         }
[13:23:49.224]                       }
[13:23:49.224]                     }
[13:23:49.224]                     invisible(muffled)
[13:23:49.224]                   }
[13:23:49.224]                   muffleCondition(cond)
[13:23:49.224]                 })
[13:23:49.224]             }))
[13:23:49.224]             future::FutureResult(value = ...future.value$value, 
[13:23:49.224]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:23:49.224]                   ...future.rng), globalenv = if (FALSE) 
[13:23:49.224]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:23:49.224]                     ...future.globalenv.names))
[13:23:49.224]                 else NULL, started = ...future.startTime, version = "1.8")
[13:23:49.224]         }, condition = base::local({
[13:23:49.224]             c <- base::c
[13:23:49.224]             inherits <- base::inherits
[13:23:49.224]             invokeRestart <- base::invokeRestart
[13:23:49.224]             length <- base::length
[13:23:49.224]             list <- base::list
[13:23:49.224]             seq.int <- base::seq.int
[13:23:49.224]             signalCondition <- base::signalCondition
[13:23:49.224]             sys.calls <- base::sys.calls
[13:23:49.224]             `[[` <- base::`[[`
[13:23:49.224]             `+` <- base::`+`
[13:23:49.224]             `<<-` <- base::`<<-`
[13:23:49.224]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:23:49.224]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:23:49.224]                   3L)]
[13:23:49.224]             }
[13:23:49.224]             function(cond) {
[13:23:49.224]                 is_error <- inherits(cond, "error")
[13:23:49.224]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:23:49.224]                   NULL)
[13:23:49.224]                 if (is_error) {
[13:23:49.224]                   sessionInformation <- function() {
[13:23:49.224]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:23:49.224]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:23:49.224]                       search = base::search(), system = base::Sys.info())
[13:23:49.224]                   }
[13:23:49.224]                   ...future.conditions[[length(...future.conditions) + 
[13:23:49.224]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:23:49.224]                     cond$call), session = sessionInformation(), 
[13:23:49.224]                     timestamp = base::Sys.time(), signaled = 0L)
[13:23:49.224]                   signalCondition(cond)
[13:23:49.224]                 }
[13:23:49.224]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:23:49.224]                 "immediateCondition"))) {
[13:23:49.224]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:23:49.224]                   ...future.conditions[[length(...future.conditions) + 
[13:23:49.224]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:23:49.224]                   if (TRUE && !signal) {
[13:23:49.224]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:23:49.224]                     {
[13:23:49.224]                       inherits <- base::inherits
[13:23:49.224]                       invokeRestart <- base::invokeRestart
[13:23:49.224]                       is.null <- base::is.null
[13:23:49.224]                       muffled <- FALSE
[13:23:49.224]                       if (inherits(cond, "message")) {
[13:23:49.224]                         muffled <- grepl(pattern, "muffleMessage")
[13:23:49.224]                         if (muffled) 
[13:23:49.224]                           invokeRestart("muffleMessage")
[13:23:49.224]                       }
[13:23:49.224]                       else if (inherits(cond, "warning")) {
[13:23:49.224]                         muffled <- grepl(pattern, "muffleWarning")
[13:23:49.224]                         if (muffled) 
[13:23:49.224]                           invokeRestart("muffleWarning")
[13:23:49.224]                       }
[13:23:49.224]                       else if (inherits(cond, "condition")) {
[13:23:49.224]                         if (!is.null(pattern)) {
[13:23:49.224]                           computeRestarts <- base::computeRestarts
[13:23:49.224]                           grepl <- base::grepl
[13:23:49.224]                           restarts <- computeRestarts(cond)
[13:23:49.224]                           for (restart in restarts) {
[13:23:49.224]                             name <- restart$name
[13:23:49.224]                             if (is.null(name)) 
[13:23:49.224]                               next
[13:23:49.224]                             if (!grepl(pattern, name)) 
[13:23:49.224]                               next
[13:23:49.224]                             invokeRestart(restart)
[13:23:49.224]                             muffled <- TRUE
[13:23:49.224]                             break
[13:23:49.224]                           }
[13:23:49.224]                         }
[13:23:49.224]                       }
[13:23:49.224]                       invisible(muffled)
[13:23:49.224]                     }
[13:23:49.224]                     muffleCondition(cond, pattern = "^muffle")
[13:23:49.224]                   }
[13:23:49.224]                 }
[13:23:49.224]                 else {
[13:23:49.224]                   if (TRUE) {
[13:23:49.224]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:23:49.224]                     {
[13:23:49.224]                       inherits <- base::inherits
[13:23:49.224]                       invokeRestart <- base::invokeRestart
[13:23:49.224]                       is.null <- base::is.null
[13:23:49.224]                       muffled <- FALSE
[13:23:49.224]                       if (inherits(cond, "message")) {
[13:23:49.224]                         muffled <- grepl(pattern, "muffleMessage")
[13:23:49.224]                         if (muffled) 
[13:23:49.224]                           invokeRestart("muffleMessage")
[13:23:49.224]                       }
[13:23:49.224]                       else if (inherits(cond, "warning")) {
[13:23:49.224]                         muffled <- grepl(pattern, "muffleWarning")
[13:23:49.224]                         if (muffled) 
[13:23:49.224]                           invokeRestart("muffleWarning")
[13:23:49.224]                       }
[13:23:49.224]                       else if (inherits(cond, "condition")) {
[13:23:49.224]                         if (!is.null(pattern)) {
[13:23:49.224]                           computeRestarts <- base::computeRestarts
[13:23:49.224]                           grepl <- base::grepl
[13:23:49.224]                           restarts <- computeRestarts(cond)
[13:23:49.224]                           for (restart in restarts) {
[13:23:49.224]                             name <- restart$name
[13:23:49.224]                             if (is.null(name)) 
[13:23:49.224]                               next
[13:23:49.224]                             if (!grepl(pattern, name)) 
[13:23:49.224]                               next
[13:23:49.224]                             invokeRestart(restart)
[13:23:49.224]                             muffled <- TRUE
[13:23:49.224]                             break
[13:23:49.224]                           }
[13:23:49.224]                         }
[13:23:49.224]                       }
[13:23:49.224]                       invisible(muffled)
[13:23:49.224]                     }
[13:23:49.224]                     muffleCondition(cond, pattern = "^muffle")
[13:23:49.224]                   }
[13:23:49.224]                 }
[13:23:49.224]             }
[13:23:49.224]         }))
[13:23:49.224]     }, error = function(ex) {
[13:23:49.224]         base::structure(base::list(value = NULL, visible = NULL, 
[13:23:49.224]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:23:49.224]                 ...future.rng), started = ...future.startTime, 
[13:23:49.224]             finished = Sys.time(), session_uuid = NA_character_, 
[13:23:49.224]             version = "1.8"), class = "FutureResult")
[13:23:49.224]     }, finally = {
[13:23:49.224]         if (!identical(...future.workdir, getwd())) 
[13:23:49.224]             setwd(...future.workdir)
[13:23:49.224]         {
[13:23:49.224]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:23:49.224]                 ...future.oldOptions$nwarnings <- NULL
[13:23:49.224]             }
[13:23:49.224]             base::options(...future.oldOptions)
[13:23:49.224]             if (.Platform$OS.type == "windows") {
[13:23:49.224]                 old_names <- names(...future.oldEnvVars)
[13:23:49.224]                 envs <- base::Sys.getenv()
[13:23:49.224]                 names <- names(envs)
[13:23:49.224]                 common <- intersect(names, old_names)
[13:23:49.224]                 added <- setdiff(names, old_names)
[13:23:49.224]                 removed <- setdiff(old_names, names)
[13:23:49.224]                 changed <- common[...future.oldEnvVars[common] != 
[13:23:49.224]                   envs[common]]
[13:23:49.224]                 NAMES <- toupper(changed)
[13:23:49.224]                 args <- list()
[13:23:49.224]                 for (kk in seq_along(NAMES)) {
[13:23:49.224]                   name <- changed[[kk]]
[13:23:49.224]                   NAME <- NAMES[[kk]]
[13:23:49.224]                   if (name != NAME && is.element(NAME, old_names)) 
[13:23:49.224]                     next
[13:23:49.224]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:23:49.224]                 }
[13:23:49.224]                 NAMES <- toupper(added)
[13:23:49.224]                 for (kk in seq_along(NAMES)) {
[13:23:49.224]                   name <- added[[kk]]
[13:23:49.224]                   NAME <- NAMES[[kk]]
[13:23:49.224]                   if (name != NAME && is.element(NAME, old_names)) 
[13:23:49.224]                     next
[13:23:49.224]                   args[[name]] <- ""
[13:23:49.224]                 }
[13:23:49.224]                 NAMES <- toupper(removed)
[13:23:49.224]                 for (kk in seq_along(NAMES)) {
[13:23:49.224]                   name <- removed[[kk]]
[13:23:49.224]                   NAME <- NAMES[[kk]]
[13:23:49.224]                   if (name != NAME && is.element(NAME, old_names)) 
[13:23:49.224]                     next
[13:23:49.224]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:23:49.224]                 }
[13:23:49.224]                 if (length(args) > 0) 
[13:23:49.224]                   base::do.call(base::Sys.setenv, args = args)
[13:23:49.224]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:23:49.224]             }
[13:23:49.224]             else {
[13:23:49.224]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:23:49.224]             }
[13:23:49.224]             {
[13:23:49.224]                 if (base::length(...future.futureOptionsAdded) > 
[13:23:49.224]                   0L) {
[13:23:49.224]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:23:49.224]                   base::names(opts) <- ...future.futureOptionsAdded
[13:23:49.224]                   base::options(opts)
[13:23:49.224]                 }
[13:23:49.224]                 {
[13:23:49.224]                   {
[13:23:49.224]                     base::options(mc.cores = ...future.mc.cores.old)
[13:23:49.224]                     NULL
[13:23:49.224]                   }
[13:23:49.224]                   options(future.plan = NULL)
[13:23:49.224]                   if (is.na(NA_character_)) 
[13:23:49.224]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:23:49.224]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:23:49.224]                   future::plan(list(function (..., workers = 2L, 
[13:23:49.224]                     envir = parent.frame()) 
[13:23:49.224]                   strategy(..., workers = workers, envir = envir)), 
[13:23:49.224]                     .cleanup = FALSE, .init = FALSE)
[13:23:49.224]                 }
[13:23:49.224]             }
[13:23:49.224]         }
[13:23:49.224]     })
[13:23:49.224]     if (TRUE) {
[13:23:49.224]         base::sink(type = "output", split = FALSE)
[13:23:49.224]         if (TRUE) {
[13:23:49.224]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:23:49.224]         }
[13:23:49.224]         else {
[13:23:49.224]             ...future.result["stdout"] <- base::list(NULL)
[13:23:49.224]         }
[13:23:49.224]         base::close(...future.stdout)
[13:23:49.224]         ...future.stdout <- NULL
[13:23:49.224]     }
[13:23:49.224]     ...future.result$conditions <- ...future.conditions
[13:23:49.224]     ...future.result$finished <- base::Sys.time()
[13:23:49.224]     ...future.result
[13:23:49.224] }
[13:23:49.227] MultisessionFuture started
[13:23:49.227] - Launch lazy future ... done
[13:23:49.227] run() for ‘MultisessionFuture’ ... done
> cl <- ClusterRegistry("get")
> stopifnot(inherits(cl, "cluster"), length(cl) >= 1L)
> 
> plan(sequential)
[13:23:49.228] plan(): Setting new future strategy stack:
[13:23:49.228] List of future strategies:
[13:23:49.228] 1. sequential:
[13:23:49.228]    - args: function (..., envir = parent.frame())
[13:23:49.228]    - tweaked: FALSE
[13:23:49.228]    - call: plan(sequential)
[13:23:49.228] plan(): nbrOfWorkers() = 1
> cl <- ClusterRegistry("get")
> stopifnot(is.null(cl), length(cl) == 0L)
>   
> message("*** multisession(...) - stopping with plan() change ... DONE")
*** multisession(...) - stopping with plan() change ... DONE
> 
> message("*** multisession() ... DONE")
*** multisession() ... DONE
> 
> source("incl/end.R")
[13:23:49.229] plan(): Setting new future strategy stack:
[13:23:49.229] List of future strategies:
[13:23:49.229] 1. FutureStrategy:
[13:23:49.229]    - args: function (..., envir = parent.frame())
[13:23:49.229]    - tweaked: FALSE
[13:23:49.229]    - call: future::plan(oplan)
[13:23:49.230] plan(): nbrOfWorkers() = 1
> 
