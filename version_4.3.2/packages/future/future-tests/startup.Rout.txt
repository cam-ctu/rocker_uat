
R version 4.3.2 (2023-10-31) -- "Eye Holes"
Copyright (C) 2023 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> source("incl/start.R")
[16:06:41.925] plan(): Setting new future strategy stack:
[16:06:41.926] List of future strategies:
[16:06:41.926] 1. sequential:
[16:06:41.926]    - args: function (..., envir = parent.frame())
[16:06:41.926]    - tweaked: FALSE
[16:06:41.926]    - call: future::plan("sequential")
[16:06:41.939] plan(): nbrOfWorkers() = 1
> 
> maxCores <- min(2L, availableCores(methods = "system"))
> 
> 
> plan("default")
[16:06:41.949] plan(): Setting new future strategy stack:
[16:06:41.949] List of future strategies:
[16:06:41.949] 1. sequential:
[16:06:41.949]    - args: function (..., envir = parent.frame())
[16:06:41.949]    - tweaked: FALSE
[16:06:41.949]    - call: NULL
[16:06:41.959] plan(): nbrOfWorkers() = 1
> strategy0 <- plan()
>  
> message("*** parseCmdArgs() ...")
*** parseCmdArgs() ...
> 
> args <- parseCmdArgs()
> str(args)
 list()
> 
> options(future.plan = NULL, future.cmdargs = c("-p", 1L))
> args <- parseCmdArgs()
> str(args)
List of 1
 $ p: int 1
> stopifnot(args$p == 1L)
> 
> options(future.plan = NULL, future.cmdargs = c(sprintf("--parallel=%d", maxCores)))
> args <- parseCmdArgs()
> str(args)
List of 1
 $ p: int 2
> stopifnot(args$p == maxCores)
> 
> options(future.plan = NULL, future.cmdargs = c("-p", 1L, sprintf("--parallel=%d", maxCores)))
> args <- parseCmdArgs()
> str(args)
List of 1
 $ p: int 2
> stopifnot(args$p == maxCores)
> 
> options(future.plan = NULL, future.cmdargs = c("-p", 0L))
> args <- parseCmdArgs()
Warning: future: Ignoring invalid number of processes specified in command-line option: -p 0
> stopifnot(is.null(args$p))
> res <- tryCatch(parseCmdArgs(), warning = function(w) w)
> stopifnot(inherits(res, "warning"))
> 
> options(future.plan = NULL, future.cmdargs = c("-p", .Machine$integer.max))
> args <- parseCmdArgs()
Warning: future: Ignoring requested number of processes, because it is greater than the number of cores/child processes available (= 4) to this R process: -p 2147483647
> stopifnot(is.null(args$p))
> res <- tryCatch(parseCmdArgs(), warning = function(w) w)
> stopifnot(inherits(res, "warning"))
> 
> options(future.plan = NULL, future.cmdargs = NULL)
> 
> message("*** parseCmdArgs() ... DONE")
*** parseCmdArgs() ... DONE
> 
> 
> 
> message("*** .onLoad() ...")
*** .onLoad() ...
> plan("default")
[16:06:41.966] plan(): Setting new future strategy stack:
[16:06:41.966] List of future strategies:
[16:06:41.966] 1. sequential:
[16:06:41.966]    - args: function (..., envir = parent.frame())
[16:06:41.966]    - tweaked: FALSE
[16:06:41.966]    - call: NULL
[16:06:41.967] plan(): nbrOfWorkers() = 1
> pkgname <- "future"
> 
> message("- .onLoad() w/out command-line options ...")
- .onLoad() w/out command-line options ...
> options(future.plan = NULL, future.cmdargs = NULL)
> .onLoad(pkgname, pkgname)
[16:06:41.967] Future-specific environment variables:
- R_FUTURE_WAIT_INTERVAL=‘0.01’
[16:06:41.968] Environment variable ‘R_FUTURE_DEMO_MANDELBROT_REGION’ not set
[16:06:41.968] Environment variable ‘R_FUTURE_DEMO_MANDELBROT_NROW’ not set
[16:06:41.968] Environment variable ‘R_FUTURE_DEPRECATED_IGNORE’ not set
[16:06:41.968] Environment variable ‘R_FUTURE_DEPRECATED_DEFUNCT’ not set
[16:06:41.968] Environment variable ‘R_FUTURE_FORK_MULTITHREADING_ENABLE’ not set
[16:06:41.968] Environment variable ‘R_FUTURE_GLOBALS_MAXSIZE’ not set
[16:06:41.968] Environment variable ‘R_FUTURE_GLOBALS_ONMISSING’ not set
[16:06:41.968] Environment variable ‘R_FUTURE_GLOBALS_ONREFERENCE’ not set
[16:06:41.968] Environment variable ‘R_FUTURE_GLOBALS_METHOD’ not set
[16:06:41.969] Environment variable ‘R_FUTURE_GLOBALS_RESOLVE’ not set
[16:06:41.969] Environment variable ‘R_FUTURE_LAZY_ASSERTOWNER’ not set
[16:06:41.969] Environment variable ‘R_FUTURE_PLAN’ not set
[16:06:41.969] Environment variable ‘R_FUTURE_PLAN_DISALLOW’ not set
[16:06:41.969] Environment variable ‘R_FUTURE_PSOCK_RELAY_IMMEDIATE’ not set
[16:06:41.969] Environment variable ‘R_FUTURE_RELAY_IMMEDIATE’ not set
[16:06:41.969] Environment variable ‘R_FUTURE_RESOLVE_RECURSIVE’ not set
[16:06:41.969] Environment variable ‘R_FUTURE_ALIVE_TIMEOUT’ not set
[16:06:41.969] Environment variable ‘R_FUTURE_RESOLVED_TIMEOUT’ not set
[16:06:41.970] Environment variable ‘R_FUTURE_CLUSTER_RESOLVED_TIMEOUT’ not set
[16:06:41.970] Environment variable ‘R_FUTURE_MULTICORE_RESOLVED_TIMEOUT’ not set
[16:06:41.970] Environment variable ‘R_FUTURE_ONFUTURECONDITION_KEEPFUTURE’ not set
[16:06:41.970] Environment variable ‘R_FUTURE_RNG_ONMISUSE’ not set
[16:06:41.970] Environment variable ‘R_FUTURE_GLOBALENV_ONMISUSE’ not set
[16:06:41.970] Environment variable ‘R_FUTURE_WAIT_TIMEOUT’ not set
[16:06:41.970] R_FUTURE_WAIT_INTERVAL=‘0.01’
[16:06:41.970] Coercing from character to numeric: ‘0.01’
[16:06:41.970] => options(“future.wait.interval” = ‘0.01’) [n=1, mode=double]
[16:06:41.971] Environment variable ‘R_FUTURE_WAIT_ALPHA’ not set
[16:06:41.971] Environment variable ‘R_FUTURE_ASSIGN_GLOBALS_EXCLUDE’ not set
[16:06:41.971] Environment variable ‘R_FUTURE_OUTPUT_WINDOWS_REENCODE’ not set
[16:06:41.971] Environment variable ‘R_FUTURE_GLOBALS_GLOBALSOF_LOCALS’ not set
[16:06:41.971] Environment variable ‘R_FUTURE_STATE_ONINVALID’ not set
[16:06:41.971] Environment variable ‘R_FUTURE_JOURNAL’ not set
[16:06:41.971] Environment variable ‘R_FUTURE_GLOBALS_KEEPWHERE’ not set
[16:06:41.972] R process uuid: bd7d0964-dce4-8085-e24e-182f62cec721
[16:06:41.972] Setting plan('default')
[16:06:41.972] plan(): Setting new future strategy stack:
[16:06:41.972] List of future strategies:
[16:06:41.972] 1. sequential:
[16:06:41.972]    - args: function (..., envir = parent.frame())
[16:06:41.972]    - tweaked: FALSE
[16:06:41.972]    - call: NULL
[16:06:41.972] plan(): nbrOfWorkers() = 1
> strategy <- plan("next")
> print(strategy)
sequential:
- args: function (..., envir = parent.frame())
- tweaked: FALSE
- call: NULL
> stopifnot(all(class(strategy) == class(strategy0)))
> plan("default")
[16:06:41.973] plan(): Setting new future strategy stack:
[16:06:41.973] List of future strategies:
[16:06:41.973] 1. sequential:
[16:06:41.973]    - args: function (..., envir = parent.frame())
[16:06:41.973]    - tweaked: FALSE
[16:06:41.973]    - call: NULL
[16:06:41.973] plan(): nbrOfWorkers() = 1
> message("- .onLoad() w/out command-line options ... DONE")
- .onLoad() w/out command-line options ... DONE
> 
> message("- .onLoad() w/ -p 1 ...")
- .onLoad() w/ -p 1 ...
> options(future.plan = NULL, future.cmdargs = c("-p", 1))
> .onLoad(pkgname, pkgname)
[16:06:41.974] Future-specific environment variables:
- R_FUTURE_WAIT_INTERVAL=‘0.01’
[16:06:41.974] Environment variable ‘R_FUTURE_DEMO_MANDELBROT_REGION’ not set
[16:06:41.974] Environment variable ‘R_FUTURE_DEMO_MANDELBROT_NROW’ not set
[16:06:41.974] Environment variable ‘R_FUTURE_DEPRECATED_IGNORE’ not set
[16:06:41.974] Environment variable ‘R_FUTURE_DEPRECATED_DEFUNCT’ not set
[16:06:41.974] Environment variable ‘R_FUTURE_FORK_MULTITHREADING_ENABLE’ not set
[16:06:41.974] Environment variable ‘R_FUTURE_GLOBALS_MAXSIZE’ not set
[16:06:41.975] Environment variable ‘R_FUTURE_GLOBALS_ONMISSING’ not set
[16:06:41.975] Environment variable ‘R_FUTURE_GLOBALS_ONREFERENCE’ not set
[16:06:41.975] Environment variable ‘R_FUTURE_GLOBALS_METHOD’ not set
[16:06:41.975] Environment variable ‘R_FUTURE_GLOBALS_RESOLVE’ not set
[16:06:41.975] Environment variable ‘R_FUTURE_LAZY_ASSERTOWNER’ not set
[16:06:41.975] Environment variable ‘R_FUTURE_PLAN’ not set
[16:06:41.975] Environment variable ‘R_FUTURE_PLAN_DISALLOW’ not set
[16:06:41.975] Environment variable ‘R_FUTURE_PSOCK_RELAY_IMMEDIATE’ not set
[16:06:41.976] Environment variable ‘R_FUTURE_RELAY_IMMEDIATE’ not set
[16:06:41.976] Environment variable ‘R_FUTURE_RESOLVE_RECURSIVE’ not set
[16:06:41.976] Environment variable ‘R_FUTURE_ALIVE_TIMEOUT’ not set
[16:06:41.976] Environment variable ‘R_FUTURE_RESOLVED_TIMEOUT’ not set
[16:06:41.976] Environment variable ‘R_FUTURE_CLUSTER_RESOLVED_TIMEOUT’ not set
[16:06:41.976] Environment variable ‘R_FUTURE_MULTICORE_RESOLVED_TIMEOUT’ not set
[16:06:41.976] Environment variable ‘R_FUTURE_ONFUTURECONDITION_KEEPFUTURE’ not set
[16:06:41.976] Environment variable ‘R_FUTURE_RNG_ONMISUSE’ not set
[16:06:41.976] Environment variable ‘R_FUTURE_GLOBALENV_ONMISUSE’ not set
[16:06:41.978] Environment variable ‘R_FUTURE_WAIT_TIMEOUT’ not set
[16:06:41.978] Environment variable ‘R_FUTURE_WAIT_ALPHA’ not set
[16:06:41.978] Environment variable ‘R_FUTURE_ASSIGN_GLOBALS_EXCLUDE’ not set
[16:06:41.978] Environment variable ‘R_FUTURE_OUTPUT_WINDOWS_REENCODE’ not set
[16:06:41.978] Environment variable ‘R_FUTURE_GLOBALS_GLOBALSOF_LOCALS’ not set
[16:06:41.979] Environment variable ‘R_FUTURE_STATE_ONINVALID’ not set
[16:06:41.979] Environment variable ‘R_FUTURE_JOURNAL’ not set
[16:06:41.979] Environment variable ‘R_FUTURE_GLOBALS_KEEPWHERE’ not set
[16:06:41.979] R command-line argument: -p 1
[16:06:41.979]  => options(future.plan = sequential)
[16:06:41.979] R process uuid: bd7d0964-dce4-8085-e24e-182f62cec721
[16:06:41.979] Setting plan('default')
[16:06:41.980] plan(): Setting new future strategy stack:
[16:06:41.980] List of future strategies:
[16:06:41.980] 1. sequential:
[16:06:41.980]    - args: function (..., envir = parent.frame())
[16:06:41.980]    - tweaked: FALSE
[16:06:41.980]    - call: NULL
[16:06:41.980] plan(): nbrOfWorkers() = 1
> strategy <- plan("next")
> print(strategy)
sequential:
- args: function (..., envir = parent.frame())
- tweaked: FALSE
- call: NULL
> ## future.plan can be either a string or a future function
> default <- getOption("future.plan", "sequential")
> if (is.function(default)) default <- class(default)
> stopifnot(inherits(strategy, default))
> plan("default")
[16:06:41.980] plan(): Setting new future strategy stack:
[16:06:41.980] List of future strategies:
[16:06:41.980] 1. sequential:
[16:06:41.980]    - args: function (..., envir = parent.frame())
[16:06:41.980]    - tweaked: FALSE
[16:06:41.980]    - call: NULL
[16:06:41.981] plan(): nbrOfWorkers() = 1
> message("- .onLoad() w/ -p 1 ... DONE")
- .onLoad() w/ -p 1 ... DONE
> 
> message("- .onLoad() w/ --parallel=1 ...")
- .onLoad() w/ --parallel=1 ...
> plan("default")
[16:06:41.981] plan(): Setting new future strategy stack:
[16:06:41.981] List of future strategies:
[16:06:41.981] 1. sequential:
[16:06:41.981]    - args: function (..., envir = parent.frame())
[16:06:41.981]    - tweaked: FALSE
[16:06:41.981]    - call: NULL
[16:06:41.981] plan(): nbrOfWorkers() = 1
> options(future.plan = NULL, future.cmdargs = "-parallel=1")
> .onLoad(pkgname, pkgname)
[16:06:41.982] Future-specific environment variables:
- R_FUTURE_WAIT_INTERVAL=‘0.01’
[16:06:41.982] Environment variable ‘R_FUTURE_DEMO_MANDELBROT_REGION’ not set
[16:06:41.982] Environment variable ‘R_FUTURE_DEMO_MANDELBROT_NROW’ not set
[16:06:41.982] Environment variable ‘R_FUTURE_DEPRECATED_IGNORE’ not set
[16:06:41.983] Environment variable ‘R_FUTURE_DEPRECATED_DEFUNCT’ not set
[16:06:41.983] Environment variable ‘R_FUTURE_FORK_MULTITHREADING_ENABLE’ not set
[16:06:41.983] Environment variable ‘R_FUTURE_GLOBALS_MAXSIZE’ not set
[16:06:41.983] Environment variable ‘R_FUTURE_GLOBALS_ONMISSING’ not set
[16:06:41.983] Environment variable ‘R_FUTURE_GLOBALS_ONREFERENCE’ not set
[16:06:41.983] Environment variable ‘R_FUTURE_GLOBALS_METHOD’ not set
[16:06:41.983] Environment variable ‘R_FUTURE_GLOBALS_RESOLVE’ not set
[16:06:41.983] Environment variable ‘R_FUTURE_LAZY_ASSERTOWNER’ not set
[16:06:41.983] Environment variable ‘R_FUTURE_PLAN’ not set
[16:06:41.984] Environment variable ‘R_FUTURE_PLAN_DISALLOW’ not set
[16:06:41.984] Environment variable ‘R_FUTURE_PSOCK_RELAY_IMMEDIATE’ not set
[16:06:41.984] Environment variable ‘R_FUTURE_RELAY_IMMEDIATE’ not set
[16:06:41.984] Environment variable ‘R_FUTURE_RESOLVE_RECURSIVE’ not set
[16:06:41.984] Environment variable ‘R_FUTURE_ALIVE_TIMEOUT’ not set
[16:06:41.984] Environment variable ‘R_FUTURE_RESOLVED_TIMEOUT’ not set
[16:06:41.984] Environment variable ‘R_FUTURE_CLUSTER_RESOLVED_TIMEOUT’ not set
[16:06:41.984] Environment variable ‘R_FUTURE_MULTICORE_RESOLVED_TIMEOUT’ not set
[16:06:41.984] Environment variable ‘R_FUTURE_ONFUTURECONDITION_KEEPFUTURE’ not set
[16:06:41.984] Environment variable ‘R_FUTURE_RNG_ONMISUSE’ not set
[16:06:41.985] Environment variable ‘R_FUTURE_GLOBALENV_ONMISUSE’ not set
[16:06:41.985] Environment variable ‘R_FUTURE_WAIT_TIMEOUT’ not set
[16:06:41.985] Environment variable ‘R_FUTURE_WAIT_ALPHA’ not set
[16:06:41.985] Environment variable ‘R_FUTURE_ASSIGN_GLOBALS_EXCLUDE’ not set
[16:06:41.985] Environment variable ‘R_FUTURE_OUTPUT_WINDOWS_REENCODE’ not set
[16:06:41.985] Environment variable ‘R_FUTURE_GLOBALS_GLOBALSOF_LOCALS’ not set
[16:06:41.985] Environment variable ‘R_FUTURE_STATE_ONINVALID’ not set
[16:06:41.985] Environment variable ‘R_FUTURE_JOURNAL’ not set
[16:06:41.985] Environment variable ‘R_FUTURE_GLOBALS_KEEPWHERE’ not set
[16:06:41.985] R process uuid: bd7d0964-dce4-8085-e24e-182f62cec721
[16:06:41.986] Setting plan('default')
[16:06:41.986] plan(): Setting new future strategy stack:
[16:06:41.986] List of future strategies:
[16:06:41.986] 1. sequential:
[16:06:41.986]    - args: function (..., envir = parent.frame())
[16:06:41.986]    - tweaked: FALSE
[16:06:41.986]    - call: NULL
[16:06:41.986] plan(): nbrOfWorkers() = 1
> strategy <- plan("next")
> print(strategy)
sequential:
- args: function (..., envir = parent.frame())
- tweaked: FALSE
- call: NULL
> ## future.plan can be either a string or a future function
> default <- getOption("future.plan", "sequential")
> if (is.function(default)) default <- class(default)
> stopifnot(inherits(strategy, default))
> plan("default")
[16:06:41.986] plan(): Setting new future strategy stack:
[16:06:41.986] List of future strategies:
[16:06:41.986] 1. sequential:
[16:06:41.986]    - args: function (..., envir = parent.frame())
[16:06:41.986]    - tweaked: FALSE
[16:06:41.986]    - call: NULL
[16:06:41.987] plan(): nbrOfWorkers() = 1
> message("- .onLoad() w/ --parallel=1 ... DONE")
- .onLoad() w/ --parallel=1 ... DONE
> 
> message("- .onLoad() w/ -p 2 ...")
- .onLoad() w/ -p 2 ...
> options(future.plan = NULL, future.cmdargs = c("-p", 2))
> .onLoad(pkgname, pkgname)
[16:06:41.988] Future-specific environment variables:
- R_FUTURE_WAIT_INTERVAL=‘0.01’
[16:06:41.988] Environment variable ‘R_FUTURE_DEMO_MANDELBROT_REGION’ not set
[16:06:41.988] Environment variable ‘R_FUTURE_DEMO_MANDELBROT_NROW’ not set
[16:06:41.988] Environment variable ‘R_FUTURE_DEPRECATED_IGNORE’ not set
[16:06:41.988] Environment variable ‘R_FUTURE_DEPRECATED_DEFUNCT’ not set
[16:06:41.988] Environment variable ‘R_FUTURE_FORK_MULTITHREADING_ENABLE’ not set
[16:06:41.988] Environment variable ‘R_FUTURE_GLOBALS_MAXSIZE’ not set
[16:06:41.988] Environment variable ‘R_FUTURE_GLOBALS_ONMISSING’ not set
[16:06:41.989] Environment variable ‘R_FUTURE_GLOBALS_ONREFERENCE’ not set
[16:06:41.989] Environment variable ‘R_FUTURE_GLOBALS_METHOD’ not set
[16:06:41.989] Environment variable ‘R_FUTURE_GLOBALS_RESOLVE’ not set
[16:06:41.989] Environment variable ‘R_FUTURE_LAZY_ASSERTOWNER’ not set
[16:06:41.989] Environment variable ‘R_FUTURE_PLAN’ not set
[16:06:41.989] Environment variable ‘R_FUTURE_PLAN_DISALLOW’ not set
[16:06:41.989] Environment variable ‘R_FUTURE_PSOCK_RELAY_IMMEDIATE’ not set
[16:06:41.989] Environment variable ‘R_FUTURE_RELAY_IMMEDIATE’ not set
[16:06:41.989] Environment variable ‘R_FUTURE_RESOLVE_RECURSIVE’ not set
[16:06:41.989] Environment variable ‘R_FUTURE_ALIVE_TIMEOUT’ not set
[16:06:41.990] Environment variable ‘R_FUTURE_RESOLVED_TIMEOUT’ not set
[16:06:41.990] Environment variable ‘R_FUTURE_CLUSTER_RESOLVED_TIMEOUT’ not set
[16:06:41.990] Environment variable ‘R_FUTURE_MULTICORE_RESOLVED_TIMEOUT’ not set
[16:06:41.990] Environment variable ‘R_FUTURE_ONFUTURECONDITION_KEEPFUTURE’ not set
[16:06:41.990] Environment variable ‘R_FUTURE_RNG_ONMISUSE’ not set
[16:06:41.990] Environment variable ‘R_FUTURE_GLOBALENV_ONMISUSE’ not set
[16:06:41.990] Environment variable ‘R_FUTURE_WAIT_TIMEOUT’ not set
[16:06:41.990] Environment variable ‘R_FUTURE_WAIT_ALPHA’ not set
[16:06:41.990] Environment variable ‘R_FUTURE_ASSIGN_GLOBALS_EXCLUDE’ not set
[16:06:41.990] Environment variable ‘R_FUTURE_OUTPUT_WINDOWS_REENCODE’ not set
[16:06:41.991] Environment variable ‘R_FUTURE_GLOBALS_GLOBALSOF_LOCALS’ not set
[16:06:41.991] Environment variable ‘R_FUTURE_STATE_ONINVALID’ not set
[16:06:41.991] Environment variable ‘R_FUTURE_JOURNAL’ not set
[16:06:41.991] Environment variable ‘R_FUTURE_GLOBALS_KEEPWHERE’ not set
[16:06:41.991] R command-line argument: -p 2
[16:06:41.991]  => options(future.plan = tweak(multisession, workers = 2))
[16:06:41.994] R process uuid: bd7d0964-dce4-8085-e24e-182f62cec721
[16:06:41.994] Setting plan('default')
[16:06:41.994] plan(): Setting new future strategy stack:
[16:06:41.994] List of future strategies:
[16:06:41.994] 1. multisession:
[16:06:41.994]    - args: function (..., workers = 2L, envir = parent.frame())
[16:06:41.994]    - tweaked: TRUE
[16:06:41.994]    - call: NULL
[16:06:41.995] plan(): nbrOfWorkers() = 2
> strategy <- plan("next")
> print(strategy)
multisession:
- args: function (..., workers = 2L, envir = parent.frame())
- tweaked: TRUE
- call: NULL
> if (maxCores >= 2) {
+   ## Exactly which type of 'multiprocess' future depends on R_FUTURE_PLAN
+   stopifnot(inherits(strategy, "multiprocess"))
+ } else {
+   stopifnot(all(class(strategy) == class(strategy0)))
+ }
> plan("default")
[16:06:41.995] plan(): Setting new future strategy stack:
[16:06:41.995] List of future strategies:
[16:06:41.995] 1. multisession:
[16:06:41.995]    - args: function (..., workers = 2L, envir = parent.frame())
[16:06:41.995]    - tweaked: TRUE
[16:06:41.995]    - call: NULL
[16:06:41.995] plan(): plan_init() of ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ...
[16:06:41.995] multisession:
[16:06:41.995] - args: function (..., workers = 2L, envir = parent.frame())
[16:06:41.995] - tweaked: TRUE
[16:06:41.995] - call: NULL
[16:06:41.997] getGlobalsAndPackages() ...
[16:06:41.997] Not searching for globals
[16:06:41.997] - globals: [0] <none>
[16:06:41.997] getGlobalsAndPackages() ... DONE
[16:06:41.998] [local output] makeClusterPSOCK() ...
[16:06:42.029] [local output] Workers: [n = 2] ‘localhost’, ‘localhost’
[16:06:42.030] [local output] Base port: 11889
[16:06:42.031] [local output] Getting setup options for 2 cluster nodes ...
[16:06:42.031] [local output]  - Node 1 of 2 ...
[16:06:42.031] [local output] localMachine=TRUE => revtunnel=FALSE

[16:06:42.032] Testing if worker's PID can be inferred: ‘'/usr/local/lib/R/bin/Rscript' -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/RtmphX0Y3M/worker.rank=1.parallelly.parent=92014.1676e6ac3609f.pid")), silent = TRUE)' -e 'file.exists("/tmp/RtmphX0Y3M/worker.rank=1.parallelly.parent=92014.1676e6ac3609f.pid")'’
[16:06:42.220] - Possible to infer worker's PID: TRUE
[16:06:42.220] [local output] Rscript port: 11889

[16:06:42.220] [local output]  - Node 2 of 2 ...
[16:06:42.221] [local output] localMachine=TRUE => revtunnel=FALSE

[16:06:42.221] [local output] Rscript port: 11889

[16:06:42.221] [local output] Getting setup options for 2 cluster nodes ... done
[16:06:42.222] [local output]  - Parallel setup requested for some PSOCK nodes
[16:06:42.222] [local output] Setting up PSOCK nodes in parallel
[16:06:42.222] List of 36
[16:06:42.222]  $ worker          : chr "localhost"
[16:06:42.222]   ..- attr(*, "localhost")= logi TRUE
[16:06:42.222]  $ master          : chr "localhost"
[16:06:42.222]  $ port            : int 11889
[16:06:42.222]  $ connectTimeout  : num 120
[16:06:42.222]  $ timeout         : num 2592000
[16:06:42.222]  $ rscript         : chr "'/usr/local/lib/R/bin/Rscript'"
[16:06:42.222]  $ homogeneous     : logi TRUE
[16:06:42.222]  $ rscript_args    : chr "--default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),fi"| __truncated__
[16:06:42.222]  $ rscript_envs    : NULL
[16:06:42.222]  $ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[16:06:42.222]  $ rscript_startup : NULL
[16:06:42.222]  $ rscript_sh      : chr "sh"
[16:06:42.222]  $ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[16:06:42.222]  $ methods         : logi TRUE
[16:06:42.222]  $ socketOptions   : chr "no-delay"
[16:06:42.222]  $ useXDR          : logi FALSE
[16:06:42.222]  $ outfile         : chr "/dev/null"
[16:06:42.222]  $ renice          : int NA
[16:06:42.222]  $ rshcmd          : NULL
[16:06:42.222]  $ user            : chr(0) 
[16:06:42.222]  $ revtunnel       : logi FALSE
[16:06:42.222]  $ rshlogfile      : NULL
[16:06:42.222]  $ rshopts         : chr(0) 
[16:06:42.222]  $ rank            : int 1
[16:06:42.222]  $ manual          : logi FALSE
[16:06:42.222]  $ dryrun          : logi FALSE
[16:06:42.222]  $ quiet           : logi FALSE
[16:06:42.222]  $ setup_strategy  : chr "parallel"
[16:06:42.222]  $ local_cmd       : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[16:06:42.222]  $ pidfile         : chr "/tmp/RtmphX0Y3M/worker.rank=1.parallelly.parent=92014.1676e6ac3609f.pid"
[16:06:42.222]  $ rshcmd_label    : NULL
[16:06:42.222]  $ rsh_call        : NULL
[16:06:42.222]  $ cmd             : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[16:06:42.222]  $ localMachine    : logi TRUE
[16:06:42.222]  $ make_fcn        :function (worker = getOption2("parallelly.localhost.hostname", "localhost"), 
[16:06:42.222]     master = NULL, port, connectTimeout = getOption2("parallelly.makeNodePSOCK.connectTimeout", 
[16:06:42.222]         2 * 60), timeout = getOption2("parallelly.makeNodePSOCK.timeout", 
[16:06:42.222]         30 * 24 * 60 * 60), rscript = NULL, homogeneous = NULL, rscript_args = NULL, 
[16:06:42.222]     rscript_envs = NULL, rscript_libs = NULL, rscript_startup = NULL, rscript_sh = c("auto", 
[16:06:42.222]         "cmd", "sh"), default_packages = c("datasets", "utils", "grDevices", 
[16:06:42.222]         "graphics", "stats", if (methods) "methods"), methods = TRUE, socketOptions = getOption2("parallelly.makeNodePSOCK.socketOptions", 
[16:06:42.222]         "no-delay"), useXDR = getOption2("parallelly.makeNodePSOCK.useXDR", 
[16:06:42.222]         FALSE), outfile = "/dev/null", renice = NA_integer_, rshcmd = getOption2("parallelly.makeNodePSOCK.rshcmd", 
[16:06:42.222]         NULL), user = NULL, revtunnel = NA, rshlogfile = NULL, rshopts = getOption2("parallelly.makeNodePSOCK.rshopts", 
[16:06:42.222]         NULL), rank = 1L, manual = FALSE, dryrun = FALSE, quiet = FALSE, 
[16:06:42.222]     setup_strategy = getOption2("parallelly.makeNodePSOCK.setup_strategy", 
[16:06:42.222]         "parallel"), action = c("launch", "options"), verbose = FALSE)  
[16:06:42.222]  $ arguments       :List of 28
[16:06:42.222]   ..$ worker          : chr "localhost"
[16:06:42.222]   ..$ master          : NULL
[16:06:42.222]   ..$ port            : int 11889
[16:06:42.222]   ..$ connectTimeout  : num 120
[16:06:42.222]   ..$ timeout         : num 2592000
[16:06:42.222]   ..$ rscript         : NULL
[16:06:42.222]   ..$ homogeneous     : NULL
[16:06:42.222]   ..$ rscript_args    : NULL
[16:06:42.222]   ..$ rscript_envs    : NULL
[16:06:42.222]   ..$ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[16:06:42.222]   ..$ rscript_startup : NULL
[16:06:42.222]   ..$ rscript_sh      : chr [1:3] "auto" "cmd" "sh"
[16:06:42.222]   ..$ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[16:06:42.222]   ..$ methods         : logi TRUE
[16:06:42.222]   ..$ socketOptions   : chr "no-delay"
[16:06:42.222]   ..$ useXDR          : logi FALSE
[16:06:42.222]   ..$ outfile         : chr "/dev/null"
[16:06:42.222]   ..$ renice          : int NA
[16:06:42.222]   ..$ rshcmd          : NULL
[16:06:42.222]   ..$ user            : NULL
[16:06:42.222]   ..$ revtunnel       : logi NA
[16:06:42.222]   ..$ rshlogfile      : NULL
[16:06:42.222]   ..$ rshopts         : NULL
[16:06:42.222]   ..$ rank            : int 1
[16:06:42.222]   ..$ manual          : logi FALSE
[16:06:42.222]   ..$ dryrun          : logi FALSE
[16:06:42.222]   ..$ quiet           : logi FALSE
[16:06:42.222]   ..$ setup_strategy  : chr "parallel"
[16:06:42.222]  - attr(*, "class")= chr [1:2] "makeNodePSOCKOptions" "makeNodeOptions"
[16:06:42.239] [local output] System call to launch all workers:
[16:06:42.239] [local output] '/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/RtmphX0Y3M/worker.rank=1.parallelly.parent=92014.1676e6ac3609f.pid")), silent = TRUE)' -e 'options(socketOptions = "no-delay")' -e '.libPaths(c("/usr/local/lib/R/site-library","/usr/local/lib/R/library"))' -e 'workRSOCK <- tryCatch(parallel:::.workRSOCK, error=function(e) parallel:::.slaveRSOCK); workRSOCK()' MASTER=localhost PORT=11889 OUT=/dev/null TIMEOUT=2592000 XDR=FALSE SETUPTIMEOUT=120 SETUPSTRATEGY=parallel
[16:06:42.239] [local output] Starting PSOCK main server
[16:06:42.244] [local output] Workers launched
[16:06:42.245] [local output] Waiting for workers to connect back
[16:06:42.245]  - [local output] 0 workers out of 2 ready
[16:06:42.489]  - [local output] 0 workers out of 2 ready
[16:06:42.490]  - [local output] 1 workers out of 2 ready
[16:06:42.490]  - [local output] 1 workers out of 2 ready
[16:06:42.491]  - [local output] 2 workers out of 2 ready
[16:06:42.491] [local output] Launching of workers completed
[16:06:42.491] [local output] Collecting session information from workers
[16:06:42.492] [local output]  - Worker #1 of 2
[16:06:42.492] [local output]  - Worker #2 of 2
[16:06:42.492] [local output] makeClusterPSOCK() ... done
[16:06:42.505] Packages needed by the future expression (n = 0): <none>
[16:06:42.505] Packages needed by future strategies (n = 0): <none>
[16:06:42.506] {
[16:06:42.506]     {
[16:06:42.506]         {
[16:06:42.506]             ...future.startTime <- base::Sys.time()
[16:06:42.506]             {
[16:06:42.506]                 {
[16:06:42.506]                   {
[16:06:42.506]                     {
[16:06:42.506]                       base::local({
[16:06:42.506]                         has_future <- base::requireNamespace("future", 
[16:06:42.506]                           quietly = TRUE)
[16:06:42.506]                         if (has_future) {
[16:06:42.506]                           ns <- base::getNamespace("future")
[16:06:42.506]                           version <- ns[[".package"]][["version"]]
[16:06:42.506]                           if (is.null(version)) 
[16:06:42.506]                             version <- utils::packageVersion("future")
[16:06:42.506]                         }
[16:06:42.506]                         else {
[16:06:42.506]                           version <- NULL
[16:06:42.506]                         }
[16:06:42.506]                         if (!has_future || version < "1.8.0") {
[16:06:42.506]                           info <- base::c(r_version = base::gsub("R version ", 
[16:06:42.506]                             "", base::R.version$version.string), 
[16:06:42.506]                             platform = base::sprintf("%s (%s-bit)", 
[16:06:42.506]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:06:42.506]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[16:06:42.506]                               "release", "version")], collapse = " "), 
[16:06:42.506]                             hostname = base::Sys.info()[["nodename"]])
[16:06:42.506]                           info <- base::sprintf("%s: %s", base::names(info), 
[16:06:42.506]                             info)
[16:06:42.506]                           info <- base::paste(info, collapse = "; ")
[16:06:42.506]                           if (!has_future) {
[16:06:42.506]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:06:42.506]                               info)
[16:06:42.506]                           }
[16:06:42.506]                           else {
[16:06:42.506]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:06:42.506]                               info, version)
[16:06:42.506]                           }
[16:06:42.506]                           base::stop(msg)
[16:06:42.506]                         }
[16:06:42.506]                       })
[16:06:42.506]                     }
[16:06:42.506]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[16:06:42.506]                     base::options(mc.cores = 1L)
[16:06:42.506]                   }
[16:06:42.506]                   options(future.plan = NULL)
[16:06:42.506]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:06:42.506]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:06:42.506]                 }
[16:06:42.506]                 ...future.workdir <- getwd()
[16:06:42.506]             }
[16:06:42.506]             ...future.oldOptions <- base::as.list(base::.Options)
[16:06:42.506]             ...future.oldEnvVars <- base::Sys.getenv()
[16:06:42.506]         }
[16:06:42.506]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:06:42.506]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:06:42.506]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:06:42.506]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:06:42.506]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:06:42.506]             future.stdout.windows.reencode = NULL, width = 80L)
[16:06:42.506]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:06:42.506]             base::names(...future.oldOptions))
[16:06:42.506]     }
[16:06:42.506]     if (FALSE) {
[16:06:42.506]     }
[16:06:42.506]     else {
[16:06:42.506]         if (TRUE) {
[16:06:42.506]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:06:42.506]                 open = "w")
[16:06:42.506]         }
[16:06:42.506]         else {
[16:06:42.506]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:06:42.506]                 windows = "NUL", "/dev/null"), open = "w")
[16:06:42.506]         }
[16:06:42.506]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:06:42.506]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:06:42.506]             base::sink(type = "output", split = FALSE)
[16:06:42.506]             base::close(...future.stdout)
[16:06:42.506]         }, add = TRUE)
[16:06:42.506]     }
[16:06:42.506]     ...future.frame <- base::sys.nframe()
[16:06:42.506]     ...future.conditions <- base::list()
[16:06:42.506]     ...future.rng <- base::globalenv()$.Random.seed
[16:06:42.506]     if (FALSE) {
[16:06:42.506]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:06:42.506]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:06:42.506]     }
[16:06:42.506]     ...future.result <- base::tryCatch({
[16:06:42.506]         base::withCallingHandlers({
[16:06:42.506]             ...future.value <- base::withVisible(base::local({
[16:06:42.506]                 ...future.makeSendCondition <- base::local({
[16:06:42.506]                   sendCondition <- NULL
[16:06:42.506]                   function(frame = 1L) {
[16:06:42.506]                     if (is.function(sendCondition)) 
[16:06:42.506]                       return(sendCondition)
[16:06:42.506]                     ns <- getNamespace("parallel")
[16:06:42.506]                     if (exists("sendData", mode = "function", 
[16:06:42.506]                       envir = ns)) {
[16:06:42.506]                       parallel_sendData <- get("sendData", mode = "function", 
[16:06:42.506]                         envir = ns)
[16:06:42.506]                       envir <- sys.frame(frame)
[16:06:42.506]                       master <- NULL
[16:06:42.506]                       while (!identical(envir, .GlobalEnv) && 
[16:06:42.506]                         !identical(envir, emptyenv())) {
[16:06:42.506]                         if (exists("master", mode = "list", envir = envir, 
[16:06:42.506]                           inherits = FALSE)) {
[16:06:42.506]                           master <- get("master", mode = "list", 
[16:06:42.506]                             envir = envir, inherits = FALSE)
[16:06:42.506]                           if (inherits(master, c("SOCKnode", 
[16:06:42.506]                             "SOCK0node"))) {
[16:06:42.506]                             sendCondition <<- function(cond) {
[16:06:42.506]                               data <- list(type = "VALUE", value = cond, 
[16:06:42.506]                                 success = TRUE)
[16:06:42.506]                               parallel_sendData(master, data)
[16:06:42.506]                             }
[16:06:42.506]                             return(sendCondition)
[16:06:42.506]                           }
[16:06:42.506]                         }
[16:06:42.506]                         frame <- frame + 1L
[16:06:42.506]                         envir <- sys.frame(frame)
[16:06:42.506]                       }
[16:06:42.506]                     }
[16:06:42.506]                     sendCondition <<- function(cond) NULL
[16:06:42.506]                   }
[16:06:42.506]                 })
[16:06:42.506]                 withCallingHandlers({
[16:06:42.506]                   NA
[16:06:42.506]                 }, immediateCondition = function(cond) {
[16:06:42.506]                   sendCondition <- ...future.makeSendCondition()
[16:06:42.506]                   sendCondition(cond)
[16:06:42.506]                   muffleCondition <- function (cond, pattern = "^muffle") 
[16:06:42.506]                   {
[16:06:42.506]                     inherits <- base::inherits
[16:06:42.506]                     invokeRestart <- base::invokeRestart
[16:06:42.506]                     is.null <- base::is.null
[16:06:42.506]                     muffled <- FALSE
[16:06:42.506]                     if (inherits(cond, "message")) {
[16:06:42.506]                       muffled <- grepl(pattern, "muffleMessage")
[16:06:42.506]                       if (muffled) 
[16:06:42.506]                         invokeRestart("muffleMessage")
[16:06:42.506]                     }
[16:06:42.506]                     else if (inherits(cond, "warning")) {
[16:06:42.506]                       muffled <- grepl(pattern, "muffleWarning")
[16:06:42.506]                       if (muffled) 
[16:06:42.506]                         invokeRestart("muffleWarning")
[16:06:42.506]                     }
[16:06:42.506]                     else if (inherits(cond, "condition")) {
[16:06:42.506]                       if (!is.null(pattern)) {
[16:06:42.506]                         computeRestarts <- base::computeRestarts
[16:06:42.506]                         grepl <- base::grepl
[16:06:42.506]                         restarts <- computeRestarts(cond)
[16:06:42.506]                         for (restart in restarts) {
[16:06:42.506]                           name <- restart$name
[16:06:42.506]                           if (is.null(name)) 
[16:06:42.506]                             next
[16:06:42.506]                           if (!grepl(pattern, name)) 
[16:06:42.506]                             next
[16:06:42.506]                           invokeRestart(restart)
[16:06:42.506]                           muffled <- TRUE
[16:06:42.506]                           break
[16:06:42.506]                         }
[16:06:42.506]                       }
[16:06:42.506]                     }
[16:06:42.506]                     invisible(muffled)
[16:06:42.506]                   }
[16:06:42.506]                   muffleCondition(cond)
[16:06:42.506]                 })
[16:06:42.506]             }))
[16:06:42.506]             future::FutureResult(value = ...future.value$value, 
[16:06:42.506]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:06:42.506]                   ...future.rng), globalenv = if (FALSE) 
[16:06:42.506]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:06:42.506]                     ...future.globalenv.names))
[16:06:42.506]                 else NULL, started = ...future.startTime, version = "1.8")
[16:06:42.506]         }, condition = base::local({
[16:06:42.506]             c <- base::c
[16:06:42.506]             inherits <- base::inherits
[16:06:42.506]             invokeRestart <- base::invokeRestart
[16:06:42.506]             length <- base::length
[16:06:42.506]             list <- base::list
[16:06:42.506]             seq.int <- base::seq.int
[16:06:42.506]             signalCondition <- base::signalCondition
[16:06:42.506]             sys.calls <- base::sys.calls
[16:06:42.506]             `[[` <- base::`[[`
[16:06:42.506]             `+` <- base::`+`
[16:06:42.506]             `<<-` <- base::`<<-`
[16:06:42.506]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:06:42.506]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:06:42.506]                   3L)]
[16:06:42.506]             }
[16:06:42.506]             function(cond) {
[16:06:42.506]                 is_error <- inherits(cond, "error")
[16:06:42.506]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:06:42.506]                   NULL)
[16:06:42.506]                 if (is_error) {
[16:06:42.506]                   sessionInformation <- function() {
[16:06:42.506]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:06:42.506]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:06:42.506]                       search = base::search(), system = base::Sys.info())
[16:06:42.506]                   }
[16:06:42.506]                   ...future.conditions[[length(...future.conditions) + 
[16:06:42.506]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:06:42.506]                     cond$call), session = sessionInformation(), 
[16:06:42.506]                     timestamp = base::Sys.time(), signaled = 0L)
[16:06:42.506]                   signalCondition(cond)
[16:06:42.506]                 }
[16:06:42.506]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:06:42.506]                 "immediateCondition"))) {
[16:06:42.506]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:06:42.506]                   ...future.conditions[[length(...future.conditions) + 
[16:06:42.506]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:06:42.506]                   if (TRUE && !signal) {
[16:06:42.506]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:06:42.506]                     {
[16:06:42.506]                       inherits <- base::inherits
[16:06:42.506]                       invokeRestart <- base::invokeRestart
[16:06:42.506]                       is.null <- base::is.null
[16:06:42.506]                       muffled <- FALSE
[16:06:42.506]                       if (inherits(cond, "message")) {
[16:06:42.506]                         muffled <- grepl(pattern, "muffleMessage")
[16:06:42.506]                         if (muffled) 
[16:06:42.506]                           invokeRestart("muffleMessage")
[16:06:42.506]                       }
[16:06:42.506]                       else if (inherits(cond, "warning")) {
[16:06:42.506]                         muffled <- grepl(pattern, "muffleWarning")
[16:06:42.506]                         if (muffled) 
[16:06:42.506]                           invokeRestart("muffleWarning")
[16:06:42.506]                       }
[16:06:42.506]                       else if (inherits(cond, "condition")) {
[16:06:42.506]                         if (!is.null(pattern)) {
[16:06:42.506]                           computeRestarts <- base::computeRestarts
[16:06:42.506]                           grepl <- base::grepl
[16:06:42.506]                           restarts <- computeRestarts(cond)
[16:06:42.506]                           for (restart in restarts) {
[16:06:42.506]                             name <- restart$name
[16:06:42.506]                             if (is.null(name)) 
[16:06:42.506]                               next
[16:06:42.506]                             if (!grepl(pattern, name)) 
[16:06:42.506]                               next
[16:06:42.506]                             invokeRestart(restart)
[16:06:42.506]                             muffled <- TRUE
[16:06:42.506]                             break
[16:06:42.506]                           }
[16:06:42.506]                         }
[16:06:42.506]                       }
[16:06:42.506]                       invisible(muffled)
[16:06:42.506]                     }
[16:06:42.506]                     muffleCondition(cond, pattern = "^muffle")
[16:06:42.506]                   }
[16:06:42.506]                 }
[16:06:42.506]                 else {
[16:06:42.506]                   if (TRUE) {
[16:06:42.506]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:06:42.506]                     {
[16:06:42.506]                       inherits <- base::inherits
[16:06:42.506]                       invokeRestart <- base::invokeRestart
[16:06:42.506]                       is.null <- base::is.null
[16:06:42.506]                       muffled <- FALSE
[16:06:42.506]                       if (inherits(cond, "message")) {
[16:06:42.506]                         muffled <- grepl(pattern, "muffleMessage")
[16:06:42.506]                         if (muffled) 
[16:06:42.506]                           invokeRestart("muffleMessage")
[16:06:42.506]                       }
[16:06:42.506]                       else if (inherits(cond, "warning")) {
[16:06:42.506]                         muffled <- grepl(pattern, "muffleWarning")
[16:06:42.506]                         if (muffled) 
[16:06:42.506]                           invokeRestart("muffleWarning")
[16:06:42.506]                       }
[16:06:42.506]                       else if (inherits(cond, "condition")) {
[16:06:42.506]                         if (!is.null(pattern)) {
[16:06:42.506]                           computeRestarts <- base::computeRestarts
[16:06:42.506]                           grepl <- base::grepl
[16:06:42.506]                           restarts <- computeRestarts(cond)
[16:06:42.506]                           for (restart in restarts) {
[16:06:42.506]                             name <- restart$name
[16:06:42.506]                             if (is.null(name)) 
[16:06:42.506]                               next
[16:06:42.506]                             if (!grepl(pattern, name)) 
[16:06:42.506]                               next
[16:06:42.506]                             invokeRestart(restart)
[16:06:42.506]                             muffled <- TRUE
[16:06:42.506]                             break
[16:06:42.506]                           }
[16:06:42.506]                         }
[16:06:42.506]                       }
[16:06:42.506]                       invisible(muffled)
[16:06:42.506]                     }
[16:06:42.506]                     muffleCondition(cond, pattern = "^muffle")
[16:06:42.506]                   }
[16:06:42.506]                 }
[16:06:42.506]             }
[16:06:42.506]         }))
[16:06:42.506]     }, error = function(ex) {
[16:06:42.506]         base::structure(base::list(value = NULL, visible = NULL, 
[16:06:42.506]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:06:42.506]                 ...future.rng), started = ...future.startTime, 
[16:06:42.506]             finished = Sys.time(), session_uuid = NA_character_, 
[16:06:42.506]             version = "1.8"), class = "FutureResult")
[16:06:42.506]     }, finally = {
[16:06:42.506]         if (!identical(...future.workdir, getwd())) 
[16:06:42.506]             setwd(...future.workdir)
[16:06:42.506]         {
[16:06:42.506]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:06:42.506]                 ...future.oldOptions$nwarnings <- NULL
[16:06:42.506]             }
[16:06:42.506]             base::options(...future.oldOptions)
[16:06:42.506]             if (.Platform$OS.type == "windows") {
[16:06:42.506]                 old_names <- names(...future.oldEnvVars)
[16:06:42.506]                 envs <- base::Sys.getenv()
[16:06:42.506]                 names <- names(envs)
[16:06:42.506]                 common <- intersect(names, old_names)
[16:06:42.506]                 added <- setdiff(names, old_names)
[16:06:42.506]                 removed <- setdiff(old_names, names)
[16:06:42.506]                 changed <- common[...future.oldEnvVars[common] != 
[16:06:42.506]                   envs[common]]
[16:06:42.506]                 NAMES <- toupper(changed)
[16:06:42.506]                 args <- list()
[16:06:42.506]                 for (kk in seq_along(NAMES)) {
[16:06:42.506]                   name <- changed[[kk]]
[16:06:42.506]                   NAME <- NAMES[[kk]]
[16:06:42.506]                   if (name != NAME && is.element(NAME, old_names)) 
[16:06:42.506]                     next
[16:06:42.506]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:06:42.506]                 }
[16:06:42.506]                 NAMES <- toupper(added)
[16:06:42.506]                 for (kk in seq_along(NAMES)) {
[16:06:42.506]                   name <- added[[kk]]
[16:06:42.506]                   NAME <- NAMES[[kk]]
[16:06:42.506]                   if (name != NAME && is.element(NAME, old_names)) 
[16:06:42.506]                     next
[16:06:42.506]                   args[[name]] <- ""
[16:06:42.506]                 }
[16:06:42.506]                 NAMES <- toupper(removed)
[16:06:42.506]                 for (kk in seq_along(NAMES)) {
[16:06:42.506]                   name <- removed[[kk]]
[16:06:42.506]                   NAME <- NAMES[[kk]]
[16:06:42.506]                   if (name != NAME && is.element(NAME, old_names)) 
[16:06:42.506]                     next
[16:06:42.506]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:06:42.506]                 }
[16:06:42.506]                 if (length(args) > 0) 
[16:06:42.506]                   base::do.call(base::Sys.setenv, args = args)
[16:06:42.506]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:06:42.506]             }
[16:06:42.506]             else {
[16:06:42.506]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:06:42.506]             }
[16:06:42.506]             {
[16:06:42.506]                 if (base::length(...future.futureOptionsAdded) > 
[16:06:42.506]                   0L) {
[16:06:42.506]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:06:42.506]                   base::names(opts) <- ...future.futureOptionsAdded
[16:06:42.506]                   base::options(opts)
[16:06:42.506]                 }
[16:06:42.506]                 {
[16:06:42.506]                   {
[16:06:42.506]                     base::options(mc.cores = ...future.mc.cores.old)
[16:06:42.506]                     NULL
[16:06:42.506]                   }
[16:06:42.506]                   options(future.plan = function (..., workers = 2L, 
[16:06:42.506]                     envir = parent.frame()) 
[16:06:42.506]                   strategy(..., workers = workers, envir = envir))
[16:06:42.506]                   if (is.na(NA_character_)) 
[16:06:42.506]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:06:42.506]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:06:42.506]                   future::plan(list(function (..., workers = 2L, 
[16:06:42.506]                     envir = parent.frame()) 
[16:06:42.506]                   strategy(..., workers = workers, envir = envir)), 
[16:06:42.506]                     .cleanup = FALSE, .init = FALSE)
[16:06:42.506]                 }
[16:06:42.506]             }
[16:06:42.506]         }
[16:06:42.506]     })
[16:06:42.506]     if (TRUE) {
[16:06:42.506]         base::sink(type = "output", split = FALSE)
[16:06:42.506]         if (TRUE) {
[16:06:42.506]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:06:42.506]         }
[16:06:42.506]         else {
[16:06:42.506]             ...future.result["stdout"] <- base::list(NULL)
[16:06:42.506]         }
[16:06:42.506]         base::close(...future.stdout)
[16:06:42.506]         ...future.stdout <- NULL
[16:06:42.506]     }
[16:06:42.506]     ...future.result$conditions <- ...future.conditions
[16:06:42.506]     ...future.result$finished <- base::Sys.time()
[16:06:42.506]     ...future.result
[16:06:42.506] }
[16:06:42.559] MultisessionFuture started
[16:06:42.560] result() for ClusterFuture ...
[16:06:42.561] receiveMessageFromWorker() for ClusterFuture ...
[16:06:42.561] - Validating connection of MultisessionFuture
[16:06:42.593] - received message: FutureResult
[16:06:42.594] - Received FutureResult
[16:06:42.596] - Erased future from FutureRegistry
[16:06:42.597] result() for ClusterFuture ...
[16:06:42.597] - result already collected: FutureResult
[16:06:42.597] result() for ClusterFuture ... done
[16:06:42.597] receiveMessageFromWorker() for ClusterFuture ... done
[16:06:42.597] result() for ClusterFuture ... done
[16:06:42.597] result() for ClusterFuture ...
[16:06:42.597] - result already collected: FutureResult
[16:06:42.597] result() for ClusterFuture ... done
[16:06:42.598] plan(): plan_init() of ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ... DONE
[16:06:42.598] plan(): nbrOfWorkers() = 2
> message("- .onLoad() w/ -p 2 ... DONE")
- .onLoad() w/ -p 2 ... DONE
> 
> message("- .onLoad() w/ -p 0 ...")
- .onLoad() w/ -p 0 ...
> options(future.plan = NULL, future.cmdargs = c("-p", 0))
> .onLoad(pkgname, pkgname)
[16:06:42.599] Future-specific environment variables:
- R_FUTURE_WAIT_INTERVAL=‘0.01’
[16:06:42.599] Environment variable ‘R_FUTURE_DEMO_MANDELBROT_REGION’ not set
[16:06:42.599] Environment variable ‘R_FUTURE_DEMO_MANDELBROT_NROW’ not set
[16:06:42.599] Environment variable ‘R_FUTURE_DEPRECATED_IGNORE’ not set
[16:06:42.600] Environment variable ‘R_FUTURE_DEPRECATED_DEFUNCT’ not set
[16:06:42.600] Environment variable ‘R_FUTURE_FORK_MULTITHREADING_ENABLE’ not set
[16:06:42.600] Environment variable ‘R_FUTURE_GLOBALS_MAXSIZE’ not set
[16:06:42.600] Environment variable ‘R_FUTURE_GLOBALS_ONMISSING’ not set
[16:06:42.600] Environment variable ‘R_FUTURE_GLOBALS_ONREFERENCE’ not set
[16:06:42.600] Environment variable ‘R_FUTURE_GLOBALS_METHOD’ not set
[16:06:42.600] Environment variable ‘R_FUTURE_GLOBALS_RESOLVE’ not set
[16:06:42.601] Environment variable ‘R_FUTURE_LAZY_ASSERTOWNER’ not set
[16:06:42.601] Environment variable ‘R_FUTURE_PLAN’ not set
[16:06:42.601] Environment variable ‘R_FUTURE_PLAN_DISALLOW’ not set
[16:06:42.601] Environment variable ‘R_FUTURE_PSOCK_RELAY_IMMEDIATE’ not set
[16:06:42.601] Environment variable ‘R_FUTURE_RELAY_IMMEDIATE’ not set
[16:06:42.601] Environment variable ‘R_FUTURE_RESOLVE_RECURSIVE’ not set
[16:06:42.601] Environment variable ‘R_FUTURE_ALIVE_TIMEOUT’ not set
[16:06:42.601] Environment variable ‘R_FUTURE_RESOLVED_TIMEOUT’ not set
[16:06:42.602] Environment variable ‘R_FUTURE_CLUSTER_RESOLVED_TIMEOUT’ not set
[16:06:42.602] Environment variable ‘R_FUTURE_MULTICORE_RESOLVED_TIMEOUT’ not set
[16:06:42.602] Environment variable ‘R_FUTURE_ONFUTURECONDITION_KEEPFUTURE’ not set
[16:06:42.602] Environment variable ‘R_FUTURE_RNG_ONMISUSE’ not set
[16:06:42.602] Environment variable ‘R_FUTURE_GLOBALENV_ONMISUSE’ not set
[16:06:42.602] Environment variable ‘R_FUTURE_WAIT_TIMEOUT’ not set
[16:06:42.602] Environment variable ‘R_FUTURE_WAIT_ALPHA’ not set
[16:06:42.603] Environment variable ‘R_FUTURE_ASSIGN_GLOBALS_EXCLUDE’ not set
[16:06:42.603] Environment variable ‘R_FUTURE_OUTPUT_WINDOWS_REENCODE’ not set
[16:06:42.603] Environment variable ‘R_FUTURE_GLOBALS_GLOBALSOF_LOCALS’ not set
[16:06:42.603] Environment variable ‘R_FUTURE_STATE_ONINVALID’ not set
[16:06:42.603] Environment variable ‘R_FUTURE_JOURNAL’ not set
[16:06:42.603] Environment variable ‘R_FUTURE_GLOBALS_KEEPWHERE’ not set
Warning: future: Ignoring invalid number of processes specified in command-line option: -p 0
[16:06:42.604] R process uuid: bd7d0964-dce4-8085-e24e-182f62cec721
[16:06:42.604] Setting plan('default')
[16:06:42.604] plan(): Setting new future strategy stack:
[16:06:42.604] List of future strategies:
[16:06:42.604] 1. sequential:
[16:06:42.604]    - args: function (..., envir = parent.frame())
[16:06:42.604]    - tweaked: FALSE
[16:06:42.604]    - call: NULL
[16:06:42.605] plan(): nbrOfWorkers() = 1
> strategy <- plan("next")
> print(strategy)
sequential:
- args: function (..., envir = parent.frame())
- tweaked: FALSE
- call: NULL
> stopifnot(all(class(strategy) == class(strategy0)))
> plan("default")
[16:06:42.606] plan(): Setting new future strategy stack:
[16:06:42.606] List of future strategies:
[16:06:42.606] 1. sequential:
[16:06:42.606]    - args: function (..., envir = parent.frame())
[16:06:42.606]    - tweaked: FALSE
[16:06:42.606]    - call: NULL
[16:06:42.606] plan(): nbrOfWorkers() = 1
> message("- .onLoad() w/ -p 0 ... DONE")
- .onLoad() w/ -p 0 ... DONE
> 
> message("- .onLoad() w/ -p -1 ...")
- .onLoad() w/ -p -1 ...
> options(future.plan = NULL, future.cmdargs = c("-p", -1))
> .onLoad(pkgname, pkgname)
[16:06:42.608] Future-specific environment variables:
- R_FUTURE_WAIT_INTERVAL=‘0.01’
[16:06:42.608] Environment variable ‘R_FUTURE_DEMO_MANDELBROT_REGION’ not set
[16:06:42.608] Environment variable ‘R_FUTURE_DEMO_MANDELBROT_NROW’ not set
[16:06:42.608] Environment variable ‘R_FUTURE_DEPRECATED_IGNORE’ not set
[16:06:42.608] Environment variable ‘R_FUTURE_DEPRECATED_DEFUNCT’ not set
[16:06:42.609] Environment variable ‘R_FUTURE_FORK_MULTITHREADING_ENABLE’ not set
[16:06:42.609] Environment variable ‘R_FUTURE_GLOBALS_MAXSIZE’ not set
[16:06:42.609] Environment variable ‘R_FUTURE_GLOBALS_ONMISSING’ not set
[16:06:42.609] Environment variable ‘R_FUTURE_GLOBALS_ONREFERENCE’ not set
[16:06:42.609] Environment variable ‘R_FUTURE_GLOBALS_METHOD’ not set
[16:06:42.609] Environment variable ‘R_FUTURE_GLOBALS_RESOLVE’ not set
[16:06:42.609] Environment variable ‘R_FUTURE_LAZY_ASSERTOWNER’ not set
[16:06:42.610] Environment variable ‘R_FUTURE_PLAN’ not set
[16:06:42.610] Environment variable ‘R_FUTURE_PLAN_DISALLOW’ not set
[16:06:42.610] Environment variable ‘R_FUTURE_PSOCK_RELAY_IMMEDIATE’ not set
[16:06:42.610] Environment variable ‘R_FUTURE_RELAY_IMMEDIATE’ not set
[16:06:42.610] Environment variable ‘R_FUTURE_RESOLVE_RECURSIVE’ not set
[16:06:42.610] Environment variable ‘R_FUTURE_ALIVE_TIMEOUT’ not set
[16:06:42.610] Environment variable ‘R_FUTURE_RESOLVED_TIMEOUT’ not set
[16:06:42.610] Environment variable ‘R_FUTURE_CLUSTER_RESOLVED_TIMEOUT’ not set
[16:06:42.611] Environment variable ‘R_FUTURE_MULTICORE_RESOLVED_TIMEOUT’ not set
[16:06:42.611] Environment variable ‘R_FUTURE_ONFUTURECONDITION_KEEPFUTURE’ not set
[16:06:42.611] Environment variable ‘R_FUTURE_RNG_ONMISUSE’ not set
[16:06:42.611] Environment variable ‘R_FUTURE_GLOBALENV_ONMISUSE’ not set
[16:06:42.611] Environment variable ‘R_FUTURE_WAIT_TIMEOUT’ not set
[16:06:42.611] Environment variable ‘R_FUTURE_WAIT_ALPHA’ not set
[16:06:42.611] Environment variable ‘R_FUTURE_ASSIGN_GLOBALS_EXCLUDE’ not set
[16:06:42.612] Environment variable ‘R_FUTURE_OUTPUT_WINDOWS_REENCODE’ not set
[16:06:42.612] Environment variable ‘R_FUTURE_GLOBALS_GLOBALSOF_LOCALS’ not set
[16:06:42.612] Environment variable ‘R_FUTURE_STATE_ONINVALID’ not set
[16:06:42.612] Environment variable ‘R_FUTURE_JOURNAL’ not set
[16:06:42.612] Environment variable ‘R_FUTURE_GLOBALS_KEEPWHERE’ not set
Warning: future: Ignoring invalid number of processes specified in command-line option: -p -1
[16:06:42.613] R process uuid: bd7d0964-dce4-8085-e24e-182f62cec721
[16:06:42.613] Setting plan('default')
[16:06:42.613] plan(): Setting new future strategy stack:
[16:06:42.613] List of future strategies:
[16:06:42.613] 1. sequential:
[16:06:42.613]    - args: function (..., envir = parent.frame())
[16:06:42.613]    - tweaked: FALSE
[16:06:42.613]    - call: NULL
[16:06:42.614] plan(): nbrOfWorkers() = 1
> strategy <- plan("next")
> print(strategy)
sequential:
- args: function (..., envir = parent.frame())
- tweaked: FALSE
- call: NULL
> stopifnot(all(class(strategy) == class(strategy0)))
> plan("default")
[16:06:42.614] plan(): Setting new future strategy stack:
[16:06:42.614] List of future strategies:
[16:06:42.614] 1. sequential:
[16:06:42.614]    - args: function (..., envir = parent.frame())
[16:06:42.614]    - tweaked: FALSE
[16:06:42.614]    - call: NULL
[16:06:42.615] plan(): nbrOfWorkers() = 1
> message("- .onLoad() w/ -p -1 ... DONE")
- .onLoad() w/ -p -1 ... DONE
> 
> message("- .onLoad() w/ -p foo ...")
- .onLoad() w/ -p foo ...
> options(future.plan = NULL, future.cmdargs = c("-p", "foo"))
> .onLoad(pkgname, pkgname)
[16:06:42.616] Future-specific environment variables:
- R_FUTURE_WAIT_INTERVAL=‘0.01’
[16:06:42.616] Environment variable ‘R_FUTURE_DEMO_MANDELBROT_REGION’ not set
[16:06:42.616] Environment variable ‘R_FUTURE_DEMO_MANDELBROT_NROW’ not set
[16:06:42.616] Environment variable ‘R_FUTURE_DEPRECATED_IGNORE’ not set
[16:06:42.616] Environment variable ‘R_FUTURE_DEPRECATED_DEFUNCT’ not set
[16:06:42.616] Environment variable ‘R_FUTURE_FORK_MULTITHREADING_ENABLE’ not set
[16:06:42.617] Environment variable ‘R_FUTURE_GLOBALS_MAXSIZE’ not set
[16:06:42.617] Environment variable ‘R_FUTURE_GLOBALS_ONMISSING’ not set
[16:06:42.617] Environment variable ‘R_FUTURE_GLOBALS_ONREFERENCE’ not set
[16:06:42.617] Environment variable ‘R_FUTURE_GLOBALS_METHOD’ not set
[16:06:42.617] Environment variable ‘R_FUTURE_GLOBALS_RESOLVE’ not set
[16:06:42.617] Environment variable ‘R_FUTURE_LAZY_ASSERTOWNER’ not set
[16:06:42.617] Environment variable ‘R_FUTURE_PLAN’ not set
[16:06:42.618] Environment variable ‘R_FUTURE_PLAN_DISALLOW’ not set
[16:06:42.618] Environment variable ‘R_FUTURE_PSOCK_RELAY_IMMEDIATE’ not set
[16:06:42.618] Environment variable ‘R_FUTURE_RELAY_IMMEDIATE’ not set
[16:06:42.618] Environment variable ‘R_FUTURE_RESOLVE_RECURSIVE’ not set
[16:06:42.618] Environment variable ‘R_FUTURE_ALIVE_TIMEOUT’ not set
[16:06:42.618] Environment variable ‘R_FUTURE_RESOLVED_TIMEOUT’ not set
[16:06:42.618] Environment variable ‘R_FUTURE_CLUSTER_RESOLVED_TIMEOUT’ not set
[16:06:42.618] Environment variable ‘R_FUTURE_MULTICORE_RESOLVED_TIMEOUT’ not set
[16:06:42.619] Environment variable ‘R_FUTURE_ONFUTURECONDITION_KEEPFUTURE’ not set
[16:06:42.619] Environment variable ‘R_FUTURE_RNG_ONMISUSE’ not set
[16:06:42.619] Environment variable ‘R_FUTURE_GLOBALENV_ONMISUSE’ not set
[16:06:42.619] Environment variable ‘R_FUTURE_WAIT_TIMEOUT’ not set
[16:06:42.619] Environment variable ‘R_FUTURE_WAIT_ALPHA’ not set
[16:06:42.619] Environment variable ‘R_FUTURE_ASSIGN_GLOBALS_EXCLUDE’ not set
[16:06:42.619] Environment variable ‘R_FUTURE_OUTPUT_WINDOWS_REENCODE’ not set
[16:06:42.620] Environment variable ‘R_FUTURE_GLOBALS_GLOBALSOF_LOCALS’ not set
[16:06:42.620] Environment variable ‘R_FUTURE_STATE_ONINVALID’ not set
[16:06:42.620] Environment variable ‘R_FUTURE_JOURNAL’ not set
[16:06:42.620] Environment variable ‘R_FUTURE_GLOBALS_KEEPWHERE’ not set
Warning in parseCmdArgs() : NAs introduced by coercion
Warning: future: Ignoring invalid number of processes specified in command-line option: -p foo
[16:06:42.621] R process uuid: bd7d0964-dce4-8085-e24e-182f62cec721
[16:06:42.621] Setting plan('default')
[16:06:42.621] plan(): Setting new future strategy stack:
[16:06:42.621] List of future strategies:
[16:06:42.621] 1. sequential:
[16:06:42.621]    - args: function (..., envir = parent.frame())
[16:06:42.621]    - tweaked: FALSE
[16:06:42.621]    - call: NULL
[16:06:42.622] plan(): nbrOfWorkers() = 1
> strategy <- plan("next")
> print(strategy)
sequential:
- args: function (..., envir = parent.frame())
- tweaked: FALSE
- call: NULL
> stopifnot(all(class(strategy) == class(strategy0)))
> plan("default")
[16:06:42.622] plan(): Setting new future strategy stack:
[16:06:42.622] List of future strategies:
[16:06:42.622] 1. sequential:
[16:06:42.622]    - args: function (..., envir = parent.frame())
[16:06:42.622]    - tweaked: FALSE
[16:06:42.622]    - call: NULL
[16:06:42.623] plan(): nbrOfWorkers() = 1
> message("- .onLoad() w/ -p foo ... DONE")
- .onLoad() w/ -p foo ... DONE
> 
> message("- .onLoad() w/ R_FUTURE_PLAN = 'multisession' ...")
- .onLoad() w/ R_FUTURE_PLAN = 'multisession' ...
> Sys.setenv(R_FUTURE_PLAN = "multisession")
> options(future.plan = NULL, future.cmdargs = NULL)
> .onLoad(pkgname, pkgname)
[16:06:42.624] Future-specific environment variables:
- R_FUTURE_PLAN=‘multisession’
- R_FUTURE_WAIT_INTERVAL=‘0.01’
[16:06:42.625] Environment variable ‘R_FUTURE_DEMO_MANDELBROT_REGION’ not set
[16:06:42.625] Environment variable ‘R_FUTURE_DEMO_MANDELBROT_NROW’ not set
[16:06:42.625] Environment variable ‘R_FUTURE_DEPRECATED_IGNORE’ not set
[16:06:42.625] Environment variable ‘R_FUTURE_DEPRECATED_DEFUNCT’ not set
[16:06:42.625] Environment variable ‘R_FUTURE_FORK_MULTITHREADING_ENABLE’ not set
[16:06:42.626] Environment variable ‘R_FUTURE_GLOBALS_MAXSIZE’ not set
[16:06:42.626] Environment variable ‘R_FUTURE_GLOBALS_ONMISSING’ not set
[16:06:42.626] Environment variable ‘R_FUTURE_GLOBALS_ONREFERENCE’ not set
[16:06:42.626] Environment variable ‘R_FUTURE_GLOBALS_METHOD’ not set
[16:06:42.626] Environment variable ‘R_FUTURE_GLOBALS_RESOLVE’ not set
[16:06:42.627] Environment variable ‘R_FUTURE_LAZY_ASSERTOWNER’ not set
[16:06:42.627] R_FUTURE_PLAN=‘multisession’
[16:06:42.627] => options(“future.plan” = ‘multisession’) [n=1, mode=character]
[16:06:42.627] Environment variable ‘R_FUTURE_PLAN_DISALLOW’ not set
[16:06:42.627] Environment variable ‘R_FUTURE_PSOCK_RELAY_IMMEDIATE’ not set
[16:06:42.628] Environment variable ‘R_FUTURE_RELAY_IMMEDIATE’ not set
[16:06:42.628] Environment variable ‘R_FUTURE_RESOLVE_RECURSIVE’ not set
[16:06:42.628] Environment variable ‘R_FUTURE_ALIVE_TIMEOUT’ not set
[16:06:42.628] Environment variable ‘R_FUTURE_RESOLVED_TIMEOUT’ not set
[16:06:42.628] Environment variable ‘R_FUTURE_CLUSTER_RESOLVED_TIMEOUT’ not set
[16:06:42.628] Environment variable ‘R_FUTURE_MULTICORE_RESOLVED_TIMEOUT’ not set
[16:06:42.628] Environment variable ‘R_FUTURE_ONFUTURECONDITION_KEEPFUTURE’ not set
[16:06:42.629] Environment variable ‘R_FUTURE_RNG_ONMISUSE’ not set
[16:06:42.629] Environment variable ‘R_FUTURE_GLOBALENV_ONMISUSE’ not set
[16:06:42.629] Environment variable ‘R_FUTURE_WAIT_TIMEOUT’ not set
[16:06:42.629] Environment variable ‘R_FUTURE_WAIT_ALPHA’ not set
[16:06:42.629] Environment variable ‘R_FUTURE_ASSIGN_GLOBALS_EXCLUDE’ not set
[16:06:42.629] Environment variable ‘R_FUTURE_OUTPUT_WINDOWS_REENCODE’ not set
[16:06:42.629] Environment variable ‘R_FUTURE_GLOBALS_GLOBALSOF_LOCALS’ not set
[16:06:42.629] Environment variable ‘R_FUTURE_STATE_ONINVALID’ not set
[16:06:42.630] Environment variable ‘R_FUTURE_JOURNAL’ not set
[16:06:42.630] Environment variable ‘R_FUTURE_GLOBALS_KEEPWHERE’ not set
[16:06:42.630] Option 'future.plan' = ‘multisession’
[16:06:42.630] R process uuid: bd7d0964-dce4-8085-e24e-182f62cec721
[16:06:42.630] Setting plan('default')
[16:06:42.630] plan(): Setting new future strategy stack:
[16:06:42.630] List of future strategies:
[16:06:42.630] 1. multisession:
[16:06:42.630]    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[16:06:42.630]    - tweaked: FALSE
[16:06:42.630]    - call: plan("default", .init = FALSE)
[16:06:42.634] plan(): nbrOfWorkers() = 2
> strategy <- plan("next")
> print(strategy)
multisession:
- args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
- tweaked: FALSE
- call: plan("default", .init = FALSE)
> stopifnot(inherits(strategy, "multisession"))
> plan("default")
[16:06:42.635] plan(): Setting new future strategy stack:
[16:06:42.635] List of future strategies:
[16:06:42.635] 1. multisession:
[16:06:42.635]    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[16:06:42.635]    - tweaked: FALSE
[16:06:42.635]    - call: plan("default")
[16:06:42.638] plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ...
[16:06:42.638] multisession:
[16:06:42.638] - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[16:06:42.638] - tweaked: FALSE
[16:06:42.638] - call: plan("default")
[16:06:42.641] getGlobalsAndPackages() ...
[16:06:42.641] Not searching for globals
[16:06:42.641] - globals: [0] <none>
[16:06:42.641] getGlobalsAndPackages() ... DONE
[16:06:42.642] [local output] makeClusterPSOCK() ...
[16:06:42.645] [local output] Workers: [n = 2] ‘localhost’, ‘localhost’
[16:06:42.646] [local output] Base port: 11250
[16:06:42.646] [local output] Getting setup options for 2 cluster nodes ...
[16:06:42.646] [local output]  - Node 1 of 2 ...
[16:06:42.646] [local output] localMachine=TRUE => revtunnel=FALSE

[16:06:42.647] [local output] Rscript port: 11250

[16:06:42.647] [local output]  - Node 2 of 2 ...
[16:06:42.647] [local output] localMachine=TRUE => revtunnel=FALSE

[16:06:42.648] [local output] Rscript port: 11250

[16:06:42.648] [local output] Getting setup options for 2 cluster nodes ... done
[16:06:42.648] [local output]  - Parallel setup requested for some PSOCK nodes
[16:06:42.648] [local output] Setting up PSOCK nodes in parallel
[16:06:42.649] List of 36
[16:06:42.649]  $ worker          : chr "localhost"
[16:06:42.649]   ..- attr(*, "localhost")= logi TRUE
[16:06:42.649]  $ master          : chr "localhost"
[16:06:42.649]  $ port            : int 11250
[16:06:42.649]  $ connectTimeout  : num 120
[16:06:42.649]  $ timeout         : num 2592000
[16:06:42.649]  $ rscript         : chr "'/usr/local/lib/R/bin/Rscript'"
[16:06:42.649]  $ homogeneous     : logi TRUE
[16:06:42.649]  $ rscript_args    : chr "--default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),fi"| __truncated__
[16:06:42.649]  $ rscript_envs    : NULL
[16:06:42.649]  $ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[16:06:42.649]  $ rscript_startup : NULL
[16:06:42.649]  $ rscript_sh      : chr "sh"
[16:06:42.649]  $ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[16:06:42.649]  $ methods         : logi TRUE
[16:06:42.649]  $ socketOptions   : chr "no-delay"
[16:06:42.649]  $ useXDR          : logi FALSE
[16:06:42.649]  $ outfile         : chr "/dev/null"
[16:06:42.649]  $ renice          : int NA
[16:06:42.649]  $ rshcmd          : NULL
[16:06:42.649]  $ user            : chr(0) 
[16:06:42.649]  $ revtunnel       : logi FALSE
[16:06:42.649]  $ rshlogfile      : NULL
[16:06:42.649]  $ rshopts         : chr(0) 
[16:06:42.649]  $ rank            : int 1
[16:06:42.649]  $ manual          : logi FALSE
[16:06:42.649]  $ dryrun          : logi FALSE
[16:06:42.649]  $ quiet           : logi FALSE
[16:06:42.649]  $ setup_strategy  : chr "parallel"
[16:06:42.649]  $ local_cmd       : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[16:06:42.649]  $ pidfile         : chr "/tmp/RtmphX0Y3M/worker.rank=1.parallelly.parent=92014.1676e549fd020.pid"
[16:06:42.649]  $ rshcmd_label    : NULL
[16:06:42.649]  $ rsh_call        : NULL
[16:06:42.649]  $ cmd             : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[16:06:42.649]  $ localMachine    : logi TRUE
[16:06:42.649]  $ make_fcn        :function (worker = getOption2("parallelly.localhost.hostname", "localhost"), 
[16:06:42.649]     master = NULL, port, connectTimeout = getOption2("parallelly.makeNodePSOCK.connectTimeout", 
[16:06:42.649]         2 * 60), timeout = getOption2("parallelly.makeNodePSOCK.timeout", 
[16:06:42.649]         30 * 24 * 60 * 60), rscript = NULL, homogeneous = NULL, rscript_args = NULL, 
[16:06:42.649]     rscript_envs = NULL, rscript_libs = NULL, rscript_startup = NULL, rscript_sh = c("auto", 
[16:06:42.649]         "cmd", "sh"), default_packages = c("datasets", "utils", "grDevices", 
[16:06:42.649]         "graphics", "stats", if (methods) "methods"), methods = TRUE, socketOptions = getOption2("parallelly.makeNodePSOCK.socketOptions", 
[16:06:42.649]         "no-delay"), useXDR = getOption2("parallelly.makeNodePSOCK.useXDR", 
[16:06:42.649]         FALSE), outfile = "/dev/null", renice = NA_integer_, rshcmd = getOption2("parallelly.makeNodePSOCK.rshcmd", 
[16:06:42.649]         NULL), user = NULL, revtunnel = NA, rshlogfile = NULL, rshopts = getOption2("parallelly.makeNodePSOCK.rshopts", 
[16:06:42.649]         NULL), rank = 1L, manual = FALSE, dryrun = FALSE, quiet = FALSE, 
[16:06:42.649]     setup_strategy = getOption2("parallelly.makeNodePSOCK.setup_strategy", 
[16:06:42.649]         "parallel"), action = c("launch", "options"), verbose = FALSE)  
[16:06:42.649]  $ arguments       :List of 28
[16:06:42.649]   ..$ worker          : chr "localhost"
[16:06:42.649]   ..$ master          : NULL
[16:06:42.649]   ..$ port            : int 11250
[16:06:42.649]   ..$ connectTimeout  : num 120
[16:06:42.649]   ..$ timeout         : num 2592000
[16:06:42.649]   ..$ rscript         : NULL
[16:06:42.649]   ..$ homogeneous     : NULL
[16:06:42.649]   ..$ rscript_args    : NULL
[16:06:42.649]   ..$ rscript_envs    : NULL
[16:06:42.649]   ..$ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[16:06:42.649]   ..$ rscript_startup : NULL
[16:06:42.649]   ..$ rscript_sh      : chr [1:3] "auto" "cmd" "sh"
[16:06:42.649]   ..$ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[16:06:42.649]   ..$ methods         : logi TRUE
[16:06:42.649]   ..$ socketOptions   : chr "no-delay"
[16:06:42.649]   ..$ useXDR          : logi FALSE
[16:06:42.649]   ..$ outfile         : chr "/dev/null"
[16:06:42.649]   ..$ renice          : int NA
[16:06:42.649]   ..$ rshcmd          : NULL
[16:06:42.649]   ..$ user            : NULL
[16:06:42.649]   ..$ revtunnel       : logi NA
[16:06:42.649]   ..$ rshlogfile      : NULL
[16:06:42.649]   ..$ rshopts         : NULL
[16:06:42.649]   ..$ rank            : int 1
[16:06:42.649]   ..$ manual          : logi FALSE
[16:06:42.649]   ..$ dryrun          : logi FALSE
[16:06:42.649]   ..$ quiet           : logi FALSE
[16:06:42.649]   ..$ setup_strategy  : chr "parallel"
[16:06:42.649]  - attr(*, "class")= chr [1:2] "makeNodePSOCKOptions" "makeNodeOptions"
[16:06:42.665] [local output] System call to launch all workers:
[16:06:42.665] [local output] '/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/RtmphX0Y3M/worker.rank=1.parallelly.parent=92014.1676e549fd020.pid")), silent = TRUE)' -e 'options(socketOptions = "no-delay")' -e '.libPaths(c("/usr/local/lib/R/site-library","/usr/local/lib/R/library"))' -e 'workRSOCK <- tryCatch(parallel:::.workRSOCK, error=function(e) parallel:::.slaveRSOCK); workRSOCK()' MASTER=localhost PORT=11250 OUT=/dev/null TIMEOUT=2592000 XDR=FALSE SETUPTIMEOUT=120 SETUPSTRATEGY=parallel
[16:06:42.665] [local output] Starting PSOCK main server
[16:06:42.666] [local output] Workers launched
[16:06:42.667] [local output] Waiting for workers to connect back
[16:06:42.667]  - [local output] 0 workers out of 2 ready
[16:06:42.916]  - [local output] 0 workers out of 2 ready
[16:06:42.917]  - [local output] 1 workers out of 2 ready
[16:06:42.917]  - [local output] 2 workers out of 2 ready
[16:06:42.917] [local output] Launching of workers completed
[16:06:42.917] [local output] Collecting session information from workers
[16:06:42.918] [local output]  - Worker #1 of 2
[16:06:42.918] [local output]  - Worker #2 of 2
[16:06:42.919] [local output] makeClusterPSOCK() ... done
[16:06:42.930] Packages needed by the future expression (n = 0): <none>
[16:06:42.930] Packages needed by future strategies (n = 0): <none>
[16:06:42.931] {
[16:06:42.931]     {
[16:06:42.931]         {
[16:06:42.931]             ...future.startTime <- base::Sys.time()
[16:06:42.931]             {
[16:06:42.931]                 {
[16:06:42.931]                   {
[16:06:42.931]                     {
[16:06:42.931]                       base::local({
[16:06:42.931]                         has_future <- base::requireNamespace("future", 
[16:06:42.931]                           quietly = TRUE)
[16:06:42.931]                         if (has_future) {
[16:06:42.931]                           ns <- base::getNamespace("future")
[16:06:42.931]                           version <- ns[[".package"]][["version"]]
[16:06:42.931]                           if (is.null(version)) 
[16:06:42.931]                             version <- utils::packageVersion("future")
[16:06:42.931]                         }
[16:06:42.931]                         else {
[16:06:42.931]                           version <- NULL
[16:06:42.931]                         }
[16:06:42.931]                         if (!has_future || version < "1.8.0") {
[16:06:42.931]                           info <- base::c(r_version = base::gsub("R version ", 
[16:06:42.931]                             "", base::R.version$version.string), 
[16:06:42.931]                             platform = base::sprintf("%s (%s-bit)", 
[16:06:42.931]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:06:42.931]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[16:06:42.931]                               "release", "version")], collapse = " "), 
[16:06:42.931]                             hostname = base::Sys.info()[["nodename"]])
[16:06:42.931]                           info <- base::sprintf("%s: %s", base::names(info), 
[16:06:42.931]                             info)
[16:06:42.931]                           info <- base::paste(info, collapse = "; ")
[16:06:42.931]                           if (!has_future) {
[16:06:42.931]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:06:42.931]                               info)
[16:06:42.931]                           }
[16:06:42.931]                           else {
[16:06:42.931]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:06:42.931]                               info, version)
[16:06:42.931]                           }
[16:06:42.931]                           base::stop(msg)
[16:06:42.931]                         }
[16:06:42.931]                       })
[16:06:42.931]                     }
[16:06:42.931]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[16:06:42.931]                     base::options(mc.cores = 1L)
[16:06:42.931]                   }
[16:06:42.931]                   options(future.plan = NULL)
[16:06:42.931]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:06:42.931]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:06:42.931]                 }
[16:06:42.931]                 ...future.workdir <- getwd()
[16:06:42.931]             }
[16:06:42.931]             ...future.oldOptions <- base::as.list(base::.Options)
[16:06:42.931]             ...future.oldEnvVars <- base::Sys.getenv()
[16:06:42.931]         }
[16:06:42.931]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:06:42.931]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:06:42.931]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:06:42.931]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:06:42.931]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:06:42.931]             future.stdout.windows.reencode = NULL, width = 80L)
[16:06:42.931]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:06:42.931]             base::names(...future.oldOptions))
[16:06:42.931]     }
[16:06:42.931]     if (FALSE) {
[16:06:42.931]     }
[16:06:42.931]     else {
[16:06:42.931]         if (TRUE) {
[16:06:42.931]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:06:42.931]                 open = "w")
[16:06:42.931]         }
[16:06:42.931]         else {
[16:06:42.931]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:06:42.931]                 windows = "NUL", "/dev/null"), open = "w")
[16:06:42.931]         }
[16:06:42.931]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:06:42.931]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:06:42.931]             base::sink(type = "output", split = FALSE)
[16:06:42.931]             base::close(...future.stdout)
[16:06:42.931]         }, add = TRUE)
[16:06:42.931]     }
[16:06:42.931]     ...future.frame <- base::sys.nframe()
[16:06:42.931]     ...future.conditions <- base::list()
[16:06:42.931]     ...future.rng <- base::globalenv()$.Random.seed
[16:06:42.931]     if (FALSE) {
[16:06:42.931]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:06:42.931]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:06:42.931]     }
[16:06:42.931]     ...future.result <- base::tryCatch({
[16:06:42.931]         base::withCallingHandlers({
[16:06:42.931]             ...future.value <- base::withVisible(base::local({
[16:06:42.931]                 ...future.makeSendCondition <- base::local({
[16:06:42.931]                   sendCondition <- NULL
[16:06:42.931]                   function(frame = 1L) {
[16:06:42.931]                     if (is.function(sendCondition)) 
[16:06:42.931]                       return(sendCondition)
[16:06:42.931]                     ns <- getNamespace("parallel")
[16:06:42.931]                     if (exists("sendData", mode = "function", 
[16:06:42.931]                       envir = ns)) {
[16:06:42.931]                       parallel_sendData <- get("sendData", mode = "function", 
[16:06:42.931]                         envir = ns)
[16:06:42.931]                       envir <- sys.frame(frame)
[16:06:42.931]                       master <- NULL
[16:06:42.931]                       while (!identical(envir, .GlobalEnv) && 
[16:06:42.931]                         !identical(envir, emptyenv())) {
[16:06:42.931]                         if (exists("master", mode = "list", envir = envir, 
[16:06:42.931]                           inherits = FALSE)) {
[16:06:42.931]                           master <- get("master", mode = "list", 
[16:06:42.931]                             envir = envir, inherits = FALSE)
[16:06:42.931]                           if (inherits(master, c("SOCKnode", 
[16:06:42.931]                             "SOCK0node"))) {
[16:06:42.931]                             sendCondition <<- function(cond) {
[16:06:42.931]                               data <- list(type = "VALUE", value = cond, 
[16:06:42.931]                                 success = TRUE)
[16:06:42.931]                               parallel_sendData(master, data)
[16:06:42.931]                             }
[16:06:42.931]                             return(sendCondition)
[16:06:42.931]                           }
[16:06:42.931]                         }
[16:06:42.931]                         frame <- frame + 1L
[16:06:42.931]                         envir <- sys.frame(frame)
[16:06:42.931]                       }
[16:06:42.931]                     }
[16:06:42.931]                     sendCondition <<- function(cond) NULL
[16:06:42.931]                   }
[16:06:42.931]                 })
[16:06:42.931]                 withCallingHandlers({
[16:06:42.931]                   NA
[16:06:42.931]                 }, immediateCondition = function(cond) {
[16:06:42.931]                   sendCondition <- ...future.makeSendCondition()
[16:06:42.931]                   sendCondition(cond)
[16:06:42.931]                   muffleCondition <- function (cond, pattern = "^muffle") 
[16:06:42.931]                   {
[16:06:42.931]                     inherits <- base::inherits
[16:06:42.931]                     invokeRestart <- base::invokeRestart
[16:06:42.931]                     is.null <- base::is.null
[16:06:42.931]                     muffled <- FALSE
[16:06:42.931]                     if (inherits(cond, "message")) {
[16:06:42.931]                       muffled <- grepl(pattern, "muffleMessage")
[16:06:42.931]                       if (muffled) 
[16:06:42.931]                         invokeRestart("muffleMessage")
[16:06:42.931]                     }
[16:06:42.931]                     else if (inherits(cond, "warning")) {
[16:06:42.931]                       muffled <- grepl(pattern, "muffleWarning")
[16:06:42.931]                       if (muffled) 
[16:06:42.931]                         invokeRestart("muffleWarning")
[16:06:42.931]                     }
[16:06:42.931]                     else if (inherits(cond, "condition")) {
[16:06:42.931]                       if (!is.null(pattern)) {
[16:06:42.931]                         computeRestarts <- base::computeRestarts
[16:06:42.931]                         grepl <- base::grepl
[16:06:42.931]                         restarts <- computeRestarts(cond)
[16:06:42.931]                         for (restart in restarts) {
[16:06:42.931]                           name <- restart$name
[16:06:42.931]                           if (is.null(name)) 
[16:06:42.931]                             next
[16:06:42.931]                           if (!grepl(pattern, name)) 
[16:06:42.931]                             next
[16:06:42.931]                           invokeRestart(restart)
[16:06:42.931]                           muffled <- TRUE
[16:06:42.931]                           break
[16:06:42.931]                         }
[16:06:42.931]                       }
[16:06:42.931]                     }
[16:06:42.931]                     invisible(muffled)
[16:06:42.931]                   }
[16:06:42.931]                   muffleCondition(cond)
[16:06:42.931]                 })
[16:06:42.931]             }))
[16:06:42.931]             future::FutureResult(value = ...future.value$value, 
[16:06:42.931]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:06:42.931]                   ...future.rng), globalenv = if (FALSE) 
[16:06:42.931]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:06:42.931]                     ...future.globalenv.names))
[16:06:42.931]                 else NULL, started = ...future.startTime, version = "1.8")
[16:06:42.931]         }, condition = base::local({
[16:06:42.931]             c <- base::c
[16:06:42.931]             inherits <- base::inherits
[16:06:42.931]             invokeRestart <- base::invokeRestart
[16:06:42.931]             length <- base::length
[16:06:42.931]             list <- base::list
[16:06:42.931]             seq.int <- base::seq.int
[16:06:42.931]             signalCondition <- base::signalCondition
[16:06:42.931]             sys.calls <- base::sys.calls
[16:06:42.931]             `[[` <- base::`[[`
[16:06:42.931]             `+` <- base::`+`
[16:06:42.931]             `<<-` <- base::`<<-`
[16:06:42.931]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:06:42.931]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:06:42.931]                   3L)]
[16:06:42.931]             }
[16:06:42.931]             function(cond) {
[16:06:42.931]                 is_error <- inherits(cond, "error")
[16:06:42.931]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:06:42.931]                   NULL)
[16:06:42.931]                 if (is_error) {
[16:06:42.931]                   sessionInformation <- function() {
[16:06:42.931]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:06:42.931]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:06:42.931]                       search = base::search(), system = base::Sys.info())
[16:06:42.931]                   }
[16:06:42.931]                   ...future.conditions[[length(...future.conditions) + 
[16:06:42.931]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:06:42.931]                     cond$call), session = sessionInformation(), 
[16:06:42.931]                     timestamp = base::Sys.time(), signaled = 0L)
[16:06:42.931]                   signalCondition(cond)
[16:06:42.931]                 }
[16:06:42.931]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:06:42.931]                 "immediateCondition"))) {
[16:06:42.931]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:06:42.931]                   ...future.conditions[[length(...future.conditions) + 
[16:06:42.931]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:06:42.931]                   if (TRUE && !signal) {
[16:06:42.931]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:06:42.931]                     {
[16:06:42.931]                       inherits <- base::inherits
[16:06:42.931]                       invokeRestart <- base::invokeRestart
[16:06:42.931]                       is.null <- base::is.null
[16:06:42.931]                       muffled <- FALSE
[16:06:42.931]                       if (inherits(cond, "message")) {
[16:06:42.931]                         muffled <- grepl(pattern, "muffleMessage")
[16:06:42.931]                         if (muffled) 
[16:06:42.931]                           invokeRestart("muffleMessage")
[16:06:42.931]                       }
[16:06:42.931]                       else if (inherits(cond, "warning")) {
[16:06:42.931]                         muffled <- grepl(pattern, "muffleWarning")
[16:06:42.931]                         if (muffled) 
[16:06:42.931]                           invokeRestart("muffleWarning")
[16:06:42.931]                       }
[16:06:42.931]                       else if (inherits(cond, "condition")) {
[16:06:42.931]                         if (!is.null(pattern)) {
[16:06:42.931]                           computeRestarts <- base::computeRestarts
[16:06:42.931]                           grepl <- base::grepl
[16:06:42.931]                           restarts <- computeRestarts(cond)
[16:06:42.931]                           for (restart in restarts) {
[16:06:42.931]                             name <- restart$name
[16:06:42.931]                             if (is.null(name)) 
[16:06:42.931]                               next
[16:06:42.931]                             if (!grepl(pattern, name)) 
[16:06:42.931]                               next
[16:06:42.931]                             invokeRestart(restart)
[16:06:42.931]                             muffled <- TRUE
[16:06:42.931]                             break
[16:06:42.931]                           }
[16:06:42.931]                         }
[16:06:42.931]                       }
[16:06:42.931]                       invisible(muffled)
[16:06:42.931]                     }
[16:06:42.931]                     muffleCondition(cond, pattern = "^muffle")
[16:06:42.931]                   }
[16:06:42.931]                 }
[16:06:42.931]                 else {
[16:06:42.931]                   if (TRUE) {
[16:06:42.931]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:06:42.931]                     {
[16:06:42.931]                       inherits <- base::inherits
[16:06:42.931]                       invokeRestart <- base::invokeRestart
[16:06:42.931]                       is.null <- base::is.null
[16:06:42.931]                       muffled <- FALSE
[16:06:42.931]                       if (inherits(cond, "message")) {
[16:06:42.931]                         muffled <- grepl(pattern, "muffleMessage")
[16:06:42.931]                         if (muffled) 
[16:06:42.931]                           invokeRestart("muffleMessage")
[16:06:42.931]                       }
[16:06:42.931]                       else if (inherits(cond, "warning")) {
[16:06:42.931]                         muffled <- grepl(pattern, "muffleWarning")
[16:06:42.931]                         if (muffled) 
[16:06:42.931]                           invokeRestart("muffleWarning")
[16:06:42.931]                       }
[16:06:42.931]                       else if (inherits(cond, "condition")) {
[16:06:42.931]                         if (!is.null(pattern)) {
[16:06:42.931]                           computeRestarts <- base::computeRestarts
[16:06:42.931]                           grepl <- base::grepl
[16:06:42.931]                           restarts <- computeRestarts(cond)
[16:06:42.931]                           for (restart in restarts) {
[16:06:42.931]                             name <- restart$name
[16:06:42.931]                             if (is.null(name)) 
[16:06:42.931]                               next
[16:06:42.931]                             if (!grepl(pattern, name)) 
[16:06:42.931]                               next
[16:06:42.931]                             invokeRestart(restart)
[16:06:42.931]                             muffled <- TRUE
[16:06:42.931]                             break
[16:06:42.931]                           }
[16:06:42.931]                         }
[16:06:42.931]                       }
[16:06:42.931]                       invisible(muffled)
[16:06:42.931]                     }
[16:06:42.931]                     muffleCondition(cond, pattern = "^muffle")
[16:06:42.931]                   }
[16:06:42.931]                 }
[16:06:42.931]             }
[16:06:42.931]         }))
[16:06:42.931]     }, error = function(ex) {
[16:06:42.931]         base::structure(base::list(value = NULL, visible = NULL, 
[16:06:42.931]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:06:42.931]                 ...future.rng), started = ...future.startTime, 
[16:06:42.931]             finished = Sys.time(), session_uuid = NA_character_, 
[16:06:42.931]             version = "1.8"), class = "FutureResult")
[16:06:42.931]     }, finally = {
[16:06:42.931]         if (!identical(...future.workdir, getwd())) 
[16:06:42.931]             setwd(...future.workdir)
[16:06:42.931]         {
[16:06:42.931]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:06:42.931]                 ...future.oldOptions$nwarnings <- NULL
[16:06:42.931]             }
[16:06:42.931]             base::options(...future.oldOptions)
[16:06:42.931]             if (.Platform$OS.type == "windows") {
[16:06:42.931]                 old_names <- names(...future.oldEnvVars)
[16:06:42.931]                 envs <- base::Sys.getenv()
[16:06:42.931]                 names <- names(envs)
[16:06:42.931]                 common <- intersect(names, old_names)
[16:06:42.931]                 added <- setdiff(names, old_names)
[16:06:42.931]                 removed <- setdiff(old_names, names)
[16:06:42.931]                 changed <- common[...future.oldEnvVars[common] != 
[16:06:42.931]                   envs[common]]
[16:06:42.931]                 NAMES <- toupper(changed)
[16:06:42.931]                 args <- list()
[16:06:42.931]                 for (kk in seq_along(NAMES)) {
[16:06:42.931]                   name <- changed[[kk]]
[16:06:42.931]                   NAME <- NAMES[[kk]]
[16:06:42.931]                   if (name != NAME && is.element(NAME, old_names)) 
[16:06:42.931]                     next
[16:06:42.931]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:06:42.931]                 }
[16:06:42.931]                 NAMES <- toupper(added)
[16:06:42.931]                 for (kk in seq_along(NAMES)) {
[16:06:42.931]                   name <- added[[kk]]
[16:06:42.931]                   NAME <- NAMES[[kk]]
[16:06:42.931]                   if (name != NAME && is.element(NAME, old_names)) 
[16:06:42.931]                     next
[16:06:42.931]                   args[[name]] <- ""
[16:06:42.931]                 }
[16:06:42.931]                 NAMES <- toupper(removed)
[16:06:42.931]                 for (kk in seq_along(NAMES)) {
[16:06:42.931]                   name <- removed[[kk]]
[16:06:42.931]                   NAME <- NAMES[[kk]]
[16:06:42.931]                   if (name != NAME && is.element(NAME, old_names)) 
[16:06:42.931]                     next
[16:06:42.931]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:06:42.931]                 }
[16:06:42.931]                 if (length(args) > 0) 
[16:06:42.931]                   base::do.call(base::Sys.setenv, args = args)
[16:06:42.931]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:06:42.931]             }
[16:06:42.931]             else {
[16:06:42.931]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:06:42.931]             }
[16:06:42.931]             {
[16:06:42.931]                 if (base::length(...future.futureOptionsAdded) > 
[16:06:42.931]                   0L) {
[16:06:42.931]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:06:42.931]                   base::names(opts) <- ...future.futureOptionsAdded
[16:06:42.931]                   base::options(opts)
[16:06:42.931]                 }
[16:06:42.931]                 {
[16:06:42.931]                   {
[16:06:42.931]                     base::options(mc.cores = ...future.mc.cores.old)
[16:06:42.931]                     NULL
[16:06:42.931]                   }
[16:06:42.931]                   options(future.plan = "multisession")
[16:06:42.931]                   if (is.na("multisession")) 
[16:06:42.931]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:06:42.931]                   else Sys.setenv(R_FUTURE_PLAN = "multisession")
[16:06:42.931]                   future::plan(list(function (..., workers = availableCores(), 
[16:06:42.931]                     lazy = FALSE, rscript_libs = .libPaths(), 
[16:06:42.931]                     envir = parent.frame()) 
[16:06:42.931]                   {
[16:06:42.931]                     if (is.function(workers)) 
[16:06:42.931]                       workers <- workers()
[16:06:42.931]                     workers <- structure(as.integer(workers), 
[16:06:42.931]                       class = class(workers))
[16:06:42.931]                     stop_if_not(length(workers) == 1, is.finite(workers), 
[16:06:42.931]                       workers >= 1)
[16:06:42.931]                     if (workers == 1L && !inherits(workers, "AsIs")) {
[16:06:42.931]                       return(sequential(..., lazy = TRUE, envir = envir))
[16:06:42.931]                     }
[16:06:42.931]                     future <- MultisessionFuture(..., workers = workers, 
[16:06:42.931]                       lazy = lazy, rscript_libs = rscript_libs, 
[16:06:42.931]                       envir = envir)
[16:06:42.931]                     if (!future$lazy) 
[16:06:42.931]                       future <- run(future)
[16:06:42.931]                     invisible(future)
[16:06:42.931]                   }), .cleanup = FALSE, .init = FALSE)
[16:06:42.931]                 }
[16:06:42.931]             }
[16:06:42.931]         }
[16:06:42.931]     })
[16:06:42.931]     if (TRUE) {
[16:06:42.931]         base::sink(type = "output", split = FALSE)
[16:06:42.931]         if (TRUE) {
[16:06:42.931]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:06:42.931]         }
[16:06:42.931]         else {
[16:06:42.931]             ...future.result["stdout"] <- base::list(NULL)
[16:06:42.931]         }
[16:06:42.931]         base::close(...future.stdout)
[16:06:42.931]         ...future.stdout <- NULL
[16:06:42.931]     }
[16:06:42.931]     ...future.result$conditions <- ...future.conditions
[16:06:42.931]     ...future.result$finished <- base::Sys.time()
[16:06:42.931]     ...future.result
[16:06:42.931] }
[16:06:42.991] MultisessionFuture started
[16:06:42.991] result() for ClusterFuture ...
[16:06:42.992] receiveMessageFromWorker() for ClusterFuture ...
[16:06:42.992] - Validating connection of MultisessionFuture
[16:06:43.031] - received message: FutureResult
[16:06:43.031] - Received FutureResult
[16:06:43.031] - Erased future from FutureRegistry
[16:06:43.031] result() for ClusterFuture ...
[16:06:43.032] - result already collected: FutureResult
[16:06:43.032] result() for ClusterFuture ... done
[16:06:43.032] receiveMessageFromWorker() for ClusterFuture ... done
[16:06:43.032] result() for ClusterFuture ... done
[16:06:43.032] result() for ClusterFuture ...
[16:06:43.032] - result already collected: FutureResult
[16:06:43.032] result() for ClusterFuture ... done
[16:06:43.032] plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ... DONE
[16:06:43.036] plan(): nbrOfWorkers() = 2
> Sys.setenv(R_FUTURE_PLAN = "")
> message("- .onLoad() w/ R_FUTURE_PLAN = 'multisession' ... DONE")
- .onLoad() w/ R_FUTURE_PLAN = 'multisession' ... DONE
> 
> message("- .onLoad() w/ future.plan = 'multisession' ...")
- .onLoad() w/ future.plan = 'multisession' ...
> options(future.plan = NULL, future.plan = 'multisession', future.cmdargs = NULL)
> .onLoad(pkgname, pkgname)
[16:06:43.037] Future-specific environment variables:
- R_FUTURE_PLAN=‘’
- R_FUTURE_WAIT_INTERVAL=‘0.01’
[16:06:43.037] Environment variable ‘R_FUTURE_DEMO_MANDELBROT_REGION’ not set
[16:06:43.037] Environment variable ‘R_FUTURE_DEMO_MANDELBROT_NROW’ not set
[16:06:43.037] Environment variable ‘R_FUTURE_DEPRECATED_IGNORE’ not set
[16:06:43.037] Environment variable ‘R_FUTURE_DEPRECATED_DEFUNCT’ not set
[16:06:43.037] Environment variable ‘R_FUTURE_FORK_MULTITHREADING_ENABLE’ not set
[16:06:43.037] Environment variable ‘R_FUTURE_GLOBALS_MAXSIZE’ not set
[16:06:43.037] Environment variable ‘R_FUTURE_GLOBALS_ONMISSING’ not set
[16:06:43.038] Environment variable ‘R_FUTURE_GLOBALS_ONREFERENCE’ not set
[16:06:43.038] Environment variable ‘R_FUTURE_GLOBALS_METHOD’ not set
[16:06:43.038] Environment variable ‘R_FUTURE_GLOBALS_RESOLVE’ not set
[16:06:43.038] Environment variable ‘R_FUTURE_LAZY_ASSERTOWNER’ not set
[16:06:43.038] Environment variable ‘R_FUTURE_PLAN_DISALLOW’ not set
[16:06:43.038] Environment variable ‘R_FUTURE_PSOCK_RELAY_IMMEDIATE’ not set
[16:06:43.038] Environment variable ‘R_FUTURE_RELAY_IMMEDIATE’ not set
[16:06:43.038] Environment variable ‘R_FUTURE_RESOLVE_RECURSIVE’ not set
[16:06:43.038] Environment variable ‘R_FUTURE_ALIVE_TIMEOUT’ not set
[16:06:43.038] Environment variable ‘R_FUTURE_RESOLVED_TIMEOUT’ not set
[16:06:43.039] Environment variable ‘R_FUTURE_CLUSTER_RESOLVED_TIMEOUT’ not set
[16:06:43.039] Environment variable ‘R_FUTURE_MULTICORE_RESOLVED_TIMEOUT’ not set
[16:06:43.039] Environment variable ‘R_FUTURE_ONFUTURECONDITION_KEEPFUTURE’ not set
[16:06:43.039] Environment variable ‘R_FUTURE_RNG_ONMISUSE’ not set
[16:06:43.039] Environment variable ‘R_FUTURE_GLOBALENV_ONMISUSE’ not set
[16:06:43.039] Environment variable ‘R_FUTURE_WAIT_TIMEOUT’ not set
[16:06:43.039] Environment variable ‘R_FUTURE_WAIT_ALPHA’ not set
[16:06:43.039] Environment variable ‘R_FUTURE_ASSIGN_GLOBALS_EXCLUDE’ not set
[16:06:43.040] Environment variable ‘R_FUTURE_OUTPUT_WINDOWS_REENCODE’ not set
[16:06:43.040] Environment variable ‘R_FUTURE_GLOBALS_GLOBALSOF_LOCALS’ not set
[16:06:43.040] Environment variable ‘R_FUTURE_STATE_ONINVALID’ not set
[16:06:43.040] Environment variable ‘R_FUTURE_JOURNAL’ not set
[16:06:43.040] Environment variable ‘R_FUTURE_GLOBALS_KEEPWHERE’ not set
[16:06:43.040] Option 'future.plan' = ‘multisession’
[16:06:43.040] R process uuid: bd7d0964-dce4-8085-e24e-182f62cec721
[16:06:43.040] Setting plan('default')
[16:06:43.040] plan(): Setting new future strategy stack:
[16:06:43.041] List of future strategies:
[16:06:43.041] 1. multisession:
[16:06:43.041]    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[16:06:43.041]    - tweaked: FALSE
[16:06:43.041]    - call: plan("default", .init = FALSE)
[16:06:43.045] plan(): nbrOfWorkers() = 2
> strategy <- plan("next")
> print(strategy)
multisession:
- args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
- tweaked: FALSE
- call: plan("default", .init = FALSE)
> stopifnot(inherits(strategy, "multisession"))
> plan("default")
[16:06:43.045] plan(): Setting new future strategy stack:
[16:06:43.045] List of future strategies:
[16:06:43.045] 1. multisession:
[16:06:43.045]    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[16:06:43.045]    - tweaked: FALSE
[16:06:43.045]    - call: plan("default")
[16:06:43.046] plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ...
[16:06:43.046] multisession:
[16:06:43.046] - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[16:06:43.046] - tweaked: FALSE
[16:06:43.046] - call: plan("default")
[16:06:43.050] getGlobalsAndPackages() ...
[16:06:43.050] Not searching for globals
[16:06:43.050] - globals: [0] <none>
[16:06:43.050] getGlobalsAndPackages() ... DONE
[16:06:43.050] [local output] makeClusterPSOCK() ...
[16:06:43.054] [local output] Workers: [n = 2] ‘localhost’, ‘localhost’
[16:06:43.054] [local output] Base port: 11888
[16:06:43.054] [local output] Getting setup options for 2 cluster nodes ...
[16:06:43.054] [local output]  - Node 1 of 2 ...
[16:06:43.055] [local output] localMachine=TRUE => revtunnel=FALSE

[16:06:43.055] [local output] Rscript port: 11888

[16:06:43.056] [local output]  - Node 2 of 2 ...
[16:06:43.056] [local output] localMachine=TRUE => revtunnel=FALSE

[16:06:43.057] [local output] Rscript port: 11888

[16:06:43.057] [local output] Getting setup options for 2 cluster nodes ... done
[16:06:43.057] [local output]  - Parallel setup requested for some PSOCK nodes
[16:06:43.057] [local output] Setting up PSOCK nodes in parallel
[16:06:43.057] List of 36
[16:06:43.057]  $ worker          : chr "localhost"
[16:06:43.057]   ..- attr(*, "localhost")= logi TRUE
[16:06:43.057]  $ master          : chr "localhost"
[16:06:43.057]  $ port            : int 11888
[16:06:43.057]  $ connectTimeout  : num 120
[16:06:43.057]  $ timeout         : num 2592000
[16:06:43.057]  $ rscript         : chr "'/usr/local/lib/R/bin/Rscript'"
[16:06:43.057]  $ homogeneous     : logi TRUE
[16:06:43.057]  $ rscript_args    : chr "--default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),fi"| __truncated__
[16:06:43.057]  $ rscript_envs    : NULL
[16:06:43.057]  $ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[16:06:43.057]  $ rscript_startup : NULL
[16:06:43.057]  $ rscript_sh      : chr "sh"
[16:06:43.057]  $ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[16:06:43.057]  $ methods         : logi TRUE
[16:06:43.057]  $ socketOptions   : chr "no-delay"
[16:06:43.057]  $ useXDR          : logi FALSE
[16:06:43.057]  $ outfile         : chr "/dev/null"
[16:06:43.057]  $ renice          : int NA
[16:06:43.057]  $ rshcmd          : NULL
[16:06:43.057]  $ user            : chr(0) 
[16:06:43.057]  $ revtunnel       : logi FALSE
[16:06:43.057]  $ rshlogfile      : NULL
[16:06:43.057]  $ rshopts         : chr(0) 
[16:06:43.057]  $ rank            : int 1
[16:06:43.057]  $ manual          : logi FALSE
[16:06:43.057]  $ dryrun          : logi FALSE
[16:06:43.057]  $ quiet           : logi FALSE
[16:06:43.057]  $ setup_strategy  : chr "parallel"
[16:06:43.057]  $ local_cmd       : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[16:06:43.057]  $ pidfile         : chr "/tmp/RtmphX0Y3M/worker.rank=1.parallelly.parent=92014.1676e5428c2c8.pid"
[16:06:43.057]  $ rshcmd_label    : NULL
[16:06:43.057]  $ rsh_call        : NULL
[16:06:43.057]  $ cmd             : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[16:06:43.057]  $ localMachine    : logi TRUE
[16:06:43.057]  $ make_fcn        :function (worker = getOption2("parallelly.localhost.hostname", "localhost"), 
[16:06:43.057]     master = NULL, port, connectTimeout = getOption2("parallelly.makeNodePSOCK.connectTimeout", 
[16:06:43.057]         2 * 60), timeout = getOption2("parallelly.makeNodePSOCK.timeout", 
[16:06:43.057]         30 * 24 * 60 * 60), rscript = NULL, homogeneous = NULL, rscript_args = NULL, 
[16:06:43.057]     rscript_envs = NULL, rscript_libs = NULL, rscript_startup = NULL, rscript_sh = c("auto", 
[16:06:43.057]         "cmd", "sh"), default_packages = c("datasets", "utils", "grDevices", 
[16:06:43.057]         "graphics", "stats", if (methods) "methods"), methods = TRUE, socketOptions = getOption2("parallelly.makeNodePSOCK.socketOptions", 
[16:06:43.057]         "no-delay"), useXDR = getOption2("parallelly.makeNodePSOCK.useXDR", 
[16:06:43.057]         FALSE), outfile = "/dev/null", renice = NA_integer_, rshcmd = getOption2("parallelly.makeNodePSOCK.rshcmd", 
[16:06:43.057]         NULL), user = NULL, revtunnel = NA, rshlogfile = NULL, rshopts = getOption2("parallelly.makeNodePSOCK.rshopts", 
[16:06:43.057]         NULL), rank = 1L, manual = FALSE, dryrun = FALSE, quiet = FALSE, 
[16:06:43.057]     setup_strategy = getOption2("parallelly.makeNodePSOCK.setup_strategy", 
[16:06:43.057]         "parallel"), action = c("launch", "options"), verbose = FALSE)  
[16:06:43.057]  $ arguments       :List of 28
[16:06:43.057]   ..$ worker          : chr "localhost"
[16:06:43.057]   ..$ master          : NULL
[16:06:43.057]   ..$ port            : int 11888
[16:06:43.057]   ..$ connectTimeout  : num 120
[16:06:43.057]   ..$ timeout         : num 2592000
[16:06:43.057]   ..$ rscript         : NULL
[16:06:43.057]   ..$ homogeneous     : NULL
[16:06:43.057]   ..$ rscript_args    : NULL
[16:06:43.057]   ..$ rscript_envs    : NULL
[16:06:43.057]   ..$ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[16:06:43.057]   ..$ rscript_startup : NULL
[16:06:43.057]   ..$ rscript_sh      : chr [1:3] "auto" "cmd" "sh"
[16:06:43.057]   ..$ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[16:06:43.057]   ..$ methods         : logi TRUE
[16:06:43.057]   ..$ socketOptions   : chr "no-delay"
[16:06:43.057]   ..$ useXDR          : logi FALSE
[16:06:43.057]   ..$ outfile         : chr "/dev/null"
[16:06:43.057]   ..$ renice          : int NA
[16:06:43.057]   ..$ rshcmd          : NULL
[16:06:43.057]   ..$ user            : NULL
[16:06:43.057]   ..$ revtunnel       : logi NA
[16:06:43.057]   ..$ rshlogfile      : NULL
[16:06:43.057]   ..$ rshopts         : NULL
[16:06:43.057]   ..$ rank            : int 1
[16:06:43.057]   ..$ manual          : logi FALSE
[16:06:43.057]   ..$ dryrun          : logi FALSE
[16:06:43.057]   ..$ quiet           : logi FALSE
[16:06:43.057]   ..$ setup_strategy  : chr "parallel"
[16:06:43.057]  - attr(*, "class")= chr [1:2] "makeNodePSOCKOptions" "makeNodeOptions"
[16:06:43.076] [local output] System call to launch all workers:
[16:06:43.076] [local output] '/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/RtmphX0Y3M/worker.rank=1.parallelly.parent=92014.1676e5428c2c8.pid")), silent = TRUE)' -e 'options(socketOptions = "no-delay")' -e '.libPaths(c("/usr/local/lib/R/site-library","/usr/local/lib/R/library"))' -e 'workRSOCK <- tryCatch(parallel:::.workRSOCK, error=function(e) parallel:::.slaveRSOCK); workRSOCK()' MASTER=localhost PORT=11888 OUT=/dev/null TIMEOUT=2592000 XDR=FALSE SETUPTIMEOUT=120 SETUPSTRATEGY=parallel
[16:06:43.076] [local output] Starting PSOCK main server
[16:06:43.078] [local output] Workers launched
[16:06:43.078] [local output] Waiting for workers to connect back
[16:06:43.078]  - [local output] 0 workers out of 2 ready
[16:06:43.321]  - [local output] 0 workers out of 2 ready
[16:06:43.322]  - [local output] 1 workers out of 2 ready
[16:06:43.323]  - [local output] 1 workers out of 2 ready
[16:06:43.323]  - [local output] 2 workers out of 2 ready
[16:06:43.323] [local output] Launching of workers completed
[16:06:43.323] [local output] Collecting session information from workers
[16:06:43.324] [local output]  - Worker #1 of 2
[16:06:43.325] [local output]  - Worker #2 of 2
[16:06:43.325] [local output] makeClusterPSOCK() ... done
[16:06:43.335] Packages needed by the future expression (n = 0): <none>
[16:06:43.335] Packages needed by future strategies (n = 0): <none>
[16:06:43.336] {
[16:06:43.336]     {
[16:06:43.336]         {
[16:06:43.336]             ...future.startTime <- base::Sys.time()
[16:06:43.336]             {
[16:06:43.336]                 {
[16:06:43.336]                   {
[16:06:43.336]                     {
[16:06:43.336]                       base::local({
[16:06:43.336]                         has_future <- base::requireNamespace("future", 
[16:06:43.336]                           quietly = TRUE)
[16:06:43.336]                         if (has_future) {
[16:06:43.336]                           ns <- base::getNamespace("future")
[16:06:43.336]                           version <- ns[[".package"]][["version"]]
[16:06:43.336]                           if (is.null(version)) 
[16:06:43.336]                             version <- utils::packageVersion("future")
[16:06:43.336]                         }
[16:06:43.336]                         else {
[16:06:43.336]                           version <- NULL
[16:06:43.336]                         }
[16:06:43.336]                         if (!has_future || version < "1.8.0") {
[16:06:43.336]                           info <- base::c(r_version = base::gsub("R version ", 
[16:06:43.336]                             "", base::R.version$version.string), 
[16:06:43.336]                             platform = base::sprintf("%s (%s-bit)", 
[16:06:43.336]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:06:43.336]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[16:06:43.336]                               "release", "version")], collapse = " "), 
[16:06:43.336]                             hostname = base::Sys.info()[["nodename"]])
[16:06:43.336]                           info <- base::sprintf("%s: %s", base::names(info), 
[16:06:43.336]                             info)
[16:06:43.336]                           info <- base::paste(info, collapse = "; ")
[16:06:43.336]                           if (!has_future) {
[16:06:43.336]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:06:43.336]                               info)
[16:06:43.336]                           }
[16:06:43.336]                           else {
[16:06:43.336]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:06:43.336]                               info, version)
[16:06:43.336]                           }
[16:06:43.336]                           base::stop(msg)
[16:06:43.336]                         }
[16:06:43.336]                       })
[16:06:43.336]                     }
[16:06:43.336]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[16:06:43.336]                     base::options(mc.cores = 1L)
[16:06:43.336]                   }
[16:06:43.336]                   options(future.plan = NULL)
[16:06:43.336]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:06:43.336]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:06:43.336]                 }
[16:06:43.336]                 ...future.workdir <- getwd()
[16:06:43.336]             }
[16:06:43.336]             ...future.oldOptions <- base::as.list(base::.Options)
[16:06:43.336]             ...future.oldEnvVars <- base::Sys.getenv()
[16:06:43.336]         }
[16:06:43.336]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:06:43.336]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:06:43.336]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:06:43.336]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:06:43.336]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:06:43.336]             future.stdout.windows.reencode = NULL, width = 80L)
[16:06:43.336]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:06:43.336]             base::names(...future.oldOptions))
[16:06:43.336]     }
[16:06:43.336]     if (FALSE) {
[16:06:43.336]     }
[16:06:43.336]     else {
[16:06:43.336]         if (TRUE) {
[16:06:43.336]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:06:43.336]                 open = "w")
[16:06:43.336]         }
[16:06:43.336]         else {
[16:06:43.336]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:06:43.336]                 windows = "NUL", "/dev/null"), open = "w")
[16:06:43.336]         }
[16:06:43.336]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:06:43.336]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:06:43.336]             base::sink(type = "output", split = FALSE)
[16:06:43.336]             base::close(...future.stdout)
[16:06:43.336]         }, add = TRUE)
[16:06:43.336]     }
[16:06:43.336]     ...future.frame <- base::sys.nframe()
[16:06:43.336]     ...future.conditions <- base::list()
[16:06:43.336]     ...future.rng <- base::globalenv()$.Random.seed
[16:06:43.336]     if (FALSE) {
[16:06:43.336]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:06:43.336]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:06:43.336]     }
[16:06:43.336]     ...future.result <- base::tryCatch({
[16:06:43.336]         base::withCallingHandlers({
[16:06:43.336]             ...future.value <- base::withVisible(base::local({
[16:06:43.336]                 ...future.makeSendCondition <- base::local({
[16:06:43.336]                   sendCondition <- NULL
[16:06:43.336]                   function(frame = 1L) {
[16:06:43.336]                     if (is.function(sendCondition)) 
[16:06:43.336]                       return(sendCondition)
[16:06:43.336]                     ns <- getNamespace("parallel")
[16:06:43.336]                     if (exists("sendData", mode = "function", 
[16:06:43.336]                       envir = ns)) {
[16:06:43.336]                       parallel_sendData <- get("sendData", mode = "function", 
[16:06:43.336]                         envir = ns)
[16:06:43.336]                       envir <- sys.frame(frame)
[16:06:43.336]                       master <- NULL
[16:06:43.336]                       while (!identical(envir, .GlobalEnv) && 
[16:06:43.336]                         !identical(envir, emptyenv())) {
[16:06:43.336]                         if (exists("master", mode = "list", envir = envir, 
[16:06:43.336]                           inherits = FALSE)) {
[16:06:43.336]                           master <- get("master", mode = "list", 
[16:06:43.336]                             envir = envir, inherits = FALSE)
[16:06:43.336]                           if (inherits(master, c("SOCKnode", 
[16:06:43.336]                             "SOCK0node"))) {
[16:06:43.336]                             sendCondition <<- function(cond) {
[16:06:43.336]                               data <- list(type = "VALUE", value = cond, 
[16:06:43.336]                                 success = TRUE)
[16:06:43.336]                               parallel_sendData(master, data)
[16:06:43.336]                             }
[16:06:43.336]                             return(sendCondition)
[16:06:43.336]                           }
[16:06:43.336]                         }
[16:06:43.336]                         frame <- frame + 1L
[16:06:43.336]                         envir <- sys.frame(frame)
[16:06:43.336]                       }
[16:06:43.336]                     }
[16:06:43.336]                     sendCondition <<- function(cond) NULL
[16:06:43.336]                   }
[16:06:43.336]                 })
[16:06:43.336]                 withCallingHandlers({
[16:06:43.336]                   NA
[16:06:43.336]                 }, immediateCondition = function(cond) {
[16:06:43.336]                   sendCondition <- ...future.makeSendCondition()
[16:06:43.336]                   sendCondition(cond)
[16:06:43.336]                   muffleCondition <- function (cond, pattern = "^muffle") 
[16:06:43.336]                   {
[16:06:43.336]                     inherits <- base::inherits
[16:06:43.336]                     invokeRestart <- base::invokeRestart
[16:06:43.336]                     is.null <- base::is.null
[16:06:43.336]                     muffled <- FALSE
[16:06:43.336]                     if (inherits(cond, "message")) {
[16:06:43.336]                       muffled <- grepl(pattern, "muffleMessage")
[16:06:43.336]                       if (muffled) 
[16:06:43.336]                         invokeRestart("muffleMessage")
[16:06:43.336]                     }
[16:06:43.336]                     else if (inherits(cond, "warning")) {
[16:06:43.336]                       muffled <- grepl(pattern, "muffleWarning")
[16:06:43.336]                       if (muffled) 
[16:06:43.336]                         invokeRestart("muffleWarning")
[16:06:43.336]                     }
[16:06:43.336]                     else if (inherits(cond, "condition")) {
[16:06:43.336]                       if (!is.null(pattern)) {
[16:06:43.336]                         computeRestarts <- base::computeRestarts
[16:06:43.336]                         grepl <- base::grepl
[16:06:43.336]                         restarts <- computeRestarts(cond)
[16:06:43.336]                         for (restart in restarts) {
[16:06:43.336]                           name <- restart$name
[16:06:43.336]                           if (is.null(name)) 
[16:06:43.336]                             next
[16:06:43.336]                           if (!grepl(pattern, name)) 
[16:06:43.336]                             next
[16:06:43.336]                           invokeRestart(restart)
[16:06:43.336]                           muffled <- TRUE
[16:06:43.336]                           break
[16:06:43.336]                         }
[16:06:43.336]                       }
[16:06:43.336]                     }
[16:06:43.336]                     invisible(muffled)
[16:06:43.336]                   }
[16:06:43.336]                   muffleCondition(cond)
[16:06:43.336]                 })
[16:06:43.336]             }))
[16:06:43.336]             future::FutureResult(value = ...future.value$value, 
[16:06:43.336]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:06:43.336]                   ...future.rng), globalenv = if (FALSE) 
[16:06:43.336]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:06:43.336]                     ...future.globalenv.names))
[16:06:43.336]                 else NULL, started = ...future.startTime, version = "1.8")
[16:06:43.336]         }, condition = base::local({
[16:06:43.336]             c <- base::c
[16:06:43.336]             inherits <- base::inherits
[16:06:43.336]             invokeRestart <- base::invokeRestart
[16:06:43.336]             length <- base::length
[16:06:43.336]             list <- base::list
[16:06:43.336]             seq.int <- base::seq.int
[16:06:43.336]             signalCondition <- base::signalCondition
[16:06:43.336]             sys.calls <- base::sys.calls
[16:06:43.336]             `[[` <- base::`[[`
[16:06:43.336]             `+` <- base::`+`
[16:06:43.336]             `<<-` <- base::`<<-`
[16:06:43.336]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:06:43.336]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:06:43.336]                   3L)]
[16:06:43.336]             }
[16:06:43.336]             function(cond) {
[16:06:43.336]                 is_error <- inherits(cond, "error")
[16:06:43.336]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:06:43.336]                   NULL)
[16:06:43.336]                 if (is_error) {
[16:06:43.336]                   sessionInformation <- function() {
[16:06:43.336]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:06:43.336]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:06:43.336]                       search = base::search(), system = base::Sys.info())
[16:06:43.336]                   }
[16:06:43.336]                   ...future.conditions[[length(...future.conditions) + 
[16:06:43.336]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:06:43.336]                     cond$call), session = sessionInformation(), 
[16:06:43.336]                     timestamp = base::Sys.time(), signaled = 0L)
[16:06:43.336]                   signalCondition(cond)
[16:06:43.336]                 }
[16:06:43.336]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:06:43.336]                 "immediateCondition"))) {
[16:06:43.336]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:06:43.336]                   ...future.conditions[[length(...future.conditions) + 
[16:06:43.336]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:06:43.336]                   if (TRUE && !signal) {
[16:06:43.336]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:06:43.336]                     {
[16:06:43.336]                       inherits <- base::inherits
[16:06:43.336]                       invokeRestart <- base::invokeRestart
[16:06:43.336]                       is.null <- base::is.null
[16:06:43.336]                       muffled <- FALSE
[16:06:43.336]                       if (inherits(cond, "message")) {
[16:06:43.336]                         muffled <- grepl(pattern, "muffleMessage")
[16:06:43.336]                         if (muffled) 
[16:06:43.336]                           invokeRestart("muffleMessage")
[16:06:43.336]                       }
[16:06:43.336]                       else if (inherits(cond, "warning")) {
[16:06:43.336]                         muffled <- grepl(pattern, "muffleWarning")
[16:06:43.336]                         if (muffled) 
[16:06:43.336]                           invokeRestart("muffleWarning")
[16:06:43.336]                       }
[16:06:43.336]                       else if (inherits(cond, "condition")) {
[16:06:43.336]                         if (!is.null(pattern)) {
[16:06:43.336]                           computeRestarts <- base::computeRestarts
[16:06:43.336]                           grepl <- base::grepl
[16:06:43.336]                           restarts <- computeRestarts(cond)
[16:06:43.336]                           for (restart in restarts) {
[16:06:43.336]                             name <- restart$name
[16:06:43.336]                             if (is.null(name)) 
[16:06:43.336]                               next
[16:06:43.336]                             if (!grepl(pattern, name)) 
[16:06:43.336]                               next
[16:06:43.336]                             invokeRestart(restart)
[16:06:43.336]                             muffled <- TRUE
[16:06:43.336]                             break
[16:06:43.336]                           }
[16:06:43.336]                         }
[16:06:43.336]                       }
[16:06:43.336]                       invisible(muffled)
[16:06:43.336]                     }
[16:06:43.336]                     muffleCondition(cond, pattern = "^muffle")
[16:06:43.336]                   }
[16:06:43.336]                 }
[16:06:43.336]                 else {
[16:06:43.336]                   if (TRUE) {
[16:06:43.336]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:06:43.336]                     {
[16:06:43.336]                       inherits <- base::inherits
[16:06:43.336]                       invokeRestart <- base::invokeRestart
[16:06:43.336]                       is.null <- base::is.null
[16:06:43.336]                       muffled <- FALSE
[16:06:43.336]                       if (inherits(cond, "message")) {
[16:06:43.336]                         muffled <- grepl(pattern, "muffleMessage")
[16:06:43.336]                         if (muffled) 
[16:06:43.336]                           invokeRestart("muffleMessage")
[16:06:43.336]                       }
[16:06:43.336]                       else if (inherits(cond, "warning")) {
[16:06:43.336]                         muffled <- grepl(pattern, "muffleWarning")
[16:06:43.336]                         if (muffled) 
[16:06:43.336]                           invokeRestart("muffleWarning")
[16:06:43.336]                       }
[16:06:43.336]                       else if (inherits(cond, "condition")) {
[16:06:43.336]                         if (!is.null(pattern)) {
[16:06:43.336]                           computeRestarts <- base::computeRestarts
[16:06:43.336]                           grepl <- base::grepl
[16:06:43.336]                           restarts <- computeRestarts(cond)
[16:06:43.336]                           for (restart in restarts) {
[16:06:43.336]                             name <- restart$name
[16:06:43.336]                             if (is.null(name)) 
[16:06:43.336]                               next
[16:06:43.336]                             if (!grepl(pattern, name)) 
[16:06:43.336]                               next
[16:06:43.336]                             invokeRestart(restart)
[16:06:43.336]                             muffled <- TRUE
[16:06:43.336]                             break
[16:06:43.336]                           }
[16:06:43.336]                         }
[16:06:43.336]                       }
[16:06:43.336]                       invisible(muffled)
[16:06:43.336]                     }
[16:06:43.336]                     muffleCondition(cond, pattern = "^muffle")
[16:06:43.336]                   }
[16:06:43.336]                 }
[16:06:43.336]             }
[16:06:43.336]         }))
[16:06:43.336]     }, error = function(ex) {
[16:06:43.336]         base::structure(base::list(value = NULL, visible = NULL, 
[16:06:43.336]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:06:43.336]                 ...future.rng), started = ...future.startTime, 
[16:06:43.336]             finished = Sys.time(), session_uuid = NA_character_, 
[16:06:43.336]             version = "1.8"), class = "FutureResult")
[16:06:43.336]     }, finally = {
[16:06:43.336]         if (!identical(...future.workdir, getwd())) 
[16:06:43.336]             setwd(...future.workdir)
[16:06:43.336]         {
[16:06:43.336]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:06:43.336]                 ...future.oldOptions$nwarnings <- NULL
[16:06:43.336]             }
[16:06:43.336]             base::options(...future.oldOptions)
[16:06:43.336]             if (.Platform$OS.type == "windows") {
[16:06:43.336]                 old_names <- names(...future.oldEnvVars)
[16:06:43.336]                 envs <- base::Sys.getenv()
[16:06:43.336]                 names <- names(envs)
[16:06:43.336]                 common <- intersect(names, old_names)
[16:06:43.336]                 added <- setdiff(names, old_names)
[16:06:43.336]                 removed <- setdiff(old_names, names)
[16:06:43.336]                 changed <- common[...future.oldEnvVars[common] != 
[16:06:43.336]                   envs[common]]
[16:06:43.336]                 NAMES <- toupper(changed)
[16:06:43.336]                 args <- list()
[16:06:43.336]                 for (kk in seq_along(NAMES)) {
[16:06:43.336]                   name <- changed[[kk]]
[16:06:43.336]                   NAME <- NAMES[[kk]]
[16:06:43.336]                   if (name != NAME && is.element(NAME, old_names)) 
[16:06:43.336]                     next
[16:06:43.336]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:06:43.336]                 }
[16:06:43.336]                 NAMES <- toupper(added)
[16:06:43.336]                 for (kk in seq_along(NAMES)) {
[16:06:43.336]                   name <- added[[kk]]
[16:06:43.336]                   NAME <- NAMES[[kk]]
[16:06:43.336]                   if (name != NAME && is.element(NAME, old_names)) 
[16:06:43.336]                     next
[16:06:43.336]                   args[[name]] <- ""
[16:06:43.336]                 }
[16:06:43.336]                 NAMES <- toupper(removed)
[16:06:43.336]                 for (kk in seq_along(NAMES)) {
[16:06:43.336]                   name <- removed[[kk]]
[16:06:43.336]                   NAME <- NAMES[[kk]]
[16:06:43.336]                   if (name != NAME && is.element(NAME, old_names)) 
[16:06:43.336]                     next
[16:06:43.336]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:06:43.336]                 }
[16:06:43.336]                 if (length(args) > 0) 
[16:06:43.336]                   base::do.call(base::Sys.setenv, args = args)
[16:06:43.336]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:06:43.336]             }
[16:06:43.336]             else {
[16:06:43.336]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:06:43.336]             }
[16:06:43.336]             {
[16:06:43.336]                 if (base::length(...future.futureOptionsAdded) > 
[16:06:43.336]                   0L) {
[16:06:43.336]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:06:43.336]                   base::names(opts) <- ...future.futureOptionsAdded
[16:06:43.336]                   base::options(opts)
[16:06:43.336]                 }
[16:06:43.336]                 {
[16:06:43.336]                   {
[16:06:43.336]                     base::options(mc.cores = ...future.mc.cores.old)
[16:06:43.336]                     NULL
[16:06:43.336]                   }
[16:06:43.336]                   options(future.plan = "multisession")
[16:06:43.336]                   if (is.na("")) 
[16:06:43.336]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:06:43.336]                   else Sys.setenv(R_FUTURE_PLAN = "")
[16:06:43.336]                   future::plan(list(function (..., workers = availableCores(), 
[16:06:43.336]                     lazy = FALSE, rscript_libs = .libPaths(), 
[16:06:43.336]                     envir = parent.frame()) 
[16:06:43.336]                   {
[16:06:43.336]                     if (is.function(workers)) 
[16:06:43.336]                       workers <- workers()
[16:06:43.336]                     workers <- structure(as.integer(workers), 
[16:06:43.336]                       class = class(workers))
[16:06:43.336]                     stop_if_not(length(workers) == 1, is.finite(workers), 
[16:06:43.336]                       workers >= 1)
[16:06:43.336]                     if (workers == 1L && !inherits(workers, "AsIs")) {
[16:06:43.336]                       return(sequential(..., lazy = TRUE, envir = envir))
[16:06:43.336]                     }
[16:06:43.336]                     future <- MultisessionFuture(..., workers = workers, 
[16:06:43.336]                       lazy = lazy, rscript_libs = rscript_libs, 
[16:06:43.336]                       envir = envir)
[16:06:43.336]                     if (!future$lazy) 
[16:06:43.336]                       future <- run(future)
[16:06:43.336]                     invisible(future)
[16:06:43.336]                   }), .cleanup = FALSE, .init = FALSE)
[16:06:43.336]                 }
[16:06:43.336]             }
[16:06:43.336]         }
[16:06:43.336]     })
[16:06:43.336]     if (TRUE) {
[16:06:43.336]         base::sink(type = "output", split = FALSE)
[16:06:43.336]         if (TRUE) {
[16:06:43.336]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:06:43.336]         }
[16:06:43.336]         else {
[16:06:43.336]             ...future.result["stdout"] <- base::list(NULL)
[16:06:43.336]         }
[16:06:43.336]         base::close(...future.stdout)
[16:06:43.336]         ...future.stdout <- NULL
[16:06:43.336]     }
[16:06:43.336]     ...future.result$conditions <- ...future.conditions
[16:06:43.336]     ...future.result$finished <- base::Sys.time()
[16:06:43.336]     ...future.result
[16:06:43.336] }
[16:06:43.392] MultisessionFuture started
[16:06:43.393] result() for ClusterFuture ...
[16:06:43.393] receiveMessageFromWorker() for ClusterFuture ...
[16:06:43.393] - Validating connection of MultisessionFuture
[16:06:43.448] - received message: FutureResult
[16:06:43.448] - Received FutureResult
[16:06:43.448] - Erased future from FutureRegistry
[16:06:43.448] result() for ClusterFuture ...
[16:06:43.448] - result already collected: FutureResult
[16:06:43.448] result() for ClusterFuture ... done
[16:06:43.449] receiveMessageFromWorker() for ClusterFuture ... done
[16:06:43.449] result() for ClusterFuture ... done
[16:06:43.449] result() for ClusterFuture ...
[16:06:43.449] - result already collected: FutureResult
[16:06:43.449] result() for ClusterFuture ... done
[16:06:43.449] plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ... DONE
[16:06:43.452] plan(): nbrOfWorkers() = 2
> message("- .onLoad() w/ future.plan = 'multisession' ... DONE")
- .onLoad() w/ future.plan = 'multisession' ... DONE
> 
> message("- .onLoad() w/ R_FUTURE_PLAN = 'multisession' & -p 1 ...")
- .onLoad() w/ R_FUTURE_PLAN = 'multisession' & -p 1 ...
> Sys.setenv(R_FUTURE_PLAN = "multisession")
> options(future.plan = NULL, future.cmdargs = c("-p", 1))
> .onLoad(pkgname, pkgname)
[16:06:43.453] Future-specific environment variables:
- R_FUTURE_PLAN=‘multisession’
- R_FUTURE_WAIT_INTERVAL=‘0.01’
[16:06:43.454] Environment variable ‘R_FUTURE_DEMO_MANDELBROT_REGION’ not set
[16:06:43.454] Environment variable ‘R_FUTURE_DEMO_MANDELBROT_NROW’ not set
[16:06:43.454] Environment variable ‘R_FUTURE_DEPRECATED_IGNORE’ not set
[16:06:43.454] Environment variable ‘R_FUTURE_DEPRECATED_DEFUNCT’ not set
[16:06:43.454] Environment variable ‘R_FUTURE_FORK_MULTITHREADING_ENABLE’ not set
[16:06:43.454] Environment variable ‘R_FUTURE_GLOBALS_MAXSIZE’ not set
[16:06:43.454] Environment variable ‘R_FUTURE_GLOBALS_ONMISSING’ not set
[16:06:43.454] Environment variable ‘R_FUTURE_GLOBALS_ONREFERENCE’ not set
[16:06:43.454] Environment variable ‘R_FUTURE_GLOBALS_METHOD’ not set
[16:06:43.454] Environment variable ‘R_FUTURE_GLOBALS_RESOLVE’ not set
[16:06:43.455] Environment variable ‘R_FUTURE_LAZY_ASSERTOWNER’ not set
[16:06:43.455] R_FUTURE_PLAN=‘multisession’
[16:06:43.455] => options(“future.plan” = ‘multisession’) [n=1, mode=character]
[16:06:43.455] Environment variable ‘R_FUTURE_PLAN_DISALLOW’ not set
[16:06:43.455] Environment variable ‘R_FUTURE_PSOCK_RELAY_IMMEDIATE’ not set
[16:06:43.455] Environment variable ‘R_FUTURE_RELAY_IMMEDIATE’ not set
[16:06:43.455] Environment variable ‘R_FUTURE_RESOLVE_RECURSIVE’ not set
[16:06:43.455] Environment variable ‘R_FUTURE_ALIVE_TIMEOUT’ not set
[16:06:43.456] Environment variable ‘R_FUTURE_RESOLVED_TIMEOUT’ not set
[16:06:43.456] Environment variable ‘R_FUTURE_CLUSTER_RESOLVED_TIMEOUT’ not set
[16:06:43.456] Environment variable ‘R_FUTURE_MULTICORE_RESOLVED_TIMEOUT’ not set
[16:06:43.456] Environment variable ‘R_FUTURE_ONFUTURECONDITION_KEEPFUTURE’ not set
[16:06:43.456] Environment variable ‘R_FUTURE_RNG_ONMISUSE’ not set
[16:06:43.456] Environment variable ‘R_FUTURE_GLOBALENV_ONMISUSE’ not set
[16:06:43.456] Environment variable ‘R_FUTURE_WAIT_TIMEOUT’ not set
[16:06:43.456] Environment variable ‘R_FUTURE_WAIT_ALPHA’ not set
[16:06:43.456] Environment variable ‘R_FUTURE_ASSIGN_GLOBALS_EXCLUDE’ not set
[16:06:43.456] Environment variable ‘R_FUTURE_OUTPUT_WINDOWS_REENCODE’ not set
[16:06:43.457] Environment variable ‘R_FUTURE_GLOBALS_GLOBALSOF_LOCALS’ not set
[16:06:43.457] Environment variable ‘R_FUTURE_STATE_ONINVALID’ not set
[16:06:43.457] Environment variable ‘R_FUTURE_JOURNAL’ not set
[16:06:43.457] Environment variable ‘R_FUTURE_GLOBALS_KEEPWHERE’ not set
[16:06:43.457] Option 'future.plan' = ‘multisession’
[16:06:43.457] R command-line argument: -p 1
[16:06:43.457]  => 'future.plan' already set.
[16:06:43.458] R process uuid: bd7d0964-dce4-8085-e24e-182f62cec721
[16:06:43.458] Setting plan('default')
[16:06:43.458] plan(): Setting new future strategy stack:
[16:06:43.458] List of future strategies:
[16:06:43.458] 1. multisession:
[16:06:43.458]    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[16:06:43.458]    - tweaked: FALSE
[16:06:43.458]    - call: plan("default", .init = FALSE)
[16:06:43.463] plan(): nbrOfWorkers() = 1
> strategy <- plan("next")
> print(strategy)
multisession:
- args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
- tweaked: FALSE
- call: plan("default", .init = FALSE)
> stopifnot(inherits(strategy, "multisession"))
> plan("default")
[16:06:43.463] plan(): Setting new future strategy stack:
[16:06:43.464] List of future strategies:
[16:06:43.464] 1. multisession:
[16:06:43.464]    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[16:06:43.464]    - tweaked: FALSE
[16:06:43.464]    - call: plan("default")
[16:06:43.464] plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ...
[16:06:43.464] multisession:
[16:06:43.464] - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[16:06:43.464] - tweaked: FALSE
[16:06:43.464] - call: plan("default")
[16:06:43.468] getGlobalsAndPackages() ...
[16:06:43.469] Not searching for globals
[16:06:43.469] - globals: [0] <none>
[16:06:43.469] getGlobalsAndPackages() ... DONE
[16:06:43.469] Packages needed by the future expression (n = 0): <none>
[16:06:43.470] Packages needed by future strategies (n = 0): <none>
[16:06:43.470] {
[16:06:43.470]     {
[16:06:43.470]         {
[16:06:43.470]             ...future.startTime <- base::Sys.time()
[16:06:43.470]             {
[16:06:43.470]                 {
[16:06:43.470]                   {
[16:06:43.470]                     base::local({
[16:06:43.470]                       has_future <- base::requireNamespace("future", 
[16:06:43.470]                         quietly = TRUE)
[16:06:43.470]                       if (has_future) {
[16:06:43.470]                         ns <- base::getNamespace("future")
[16:06:43.470]                         version <- ns[[".package"]][["version"]]
[16:06:43.470]                         if (is.null(version)) 
[16:06:43.470]                           version <- utils::packageVersion("future")
[16:06:43.470]                       }
[16:06:43.470]                       else {
[16:06:43.470]                         version <- NULL
[16:06:43.470]                       }
[16:06:43.470]                       if (!has_future || version < "1.8.0") {
[16:06:43.470]                         info <- base::c(r_version = base::gsub("R version ", 
[16:06:43.470]                           "", base::R.version$version.string), 
[16:06:43.470]                           platform = base::sprintf("%s (%s-bit)", 
[16:06:43.470]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:06:43.470]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[16:06:43.470]                             "release", "version")], collapse = " "), 
[16:06:43.470]                           hostname = base::Sys.info()[["nodename"]])
[16:06:43.470]                         info <- base::sprintf("%s: %s", base::names(info), 
[16:06:43.470]                           info)
[16:06:43.470]                         info <- base::paste(info, collapse = "; ")
[16:06:43.470]                         if (!has_future) {
[16:06:43.470]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:06:43.470]                             info)
[16:06:43.470]                         }
[16:06:43.470]                         else {
[16:06:43.470]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:06:43.470]                             info, version)
[16:06:43.470]                         }
[16:06:43.470]                         base::stop(msg)
[16:06:43.470]                       }
[16:06:43.470]                     })
[16:06:43.470]                   }
[16:06:43.470]                   options(future.plan = NULL)
[16:06:43.470]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:06:43.470]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:06:43.470]                 }
[16:06:43.470]                 ...future.workdir <- getwd()
[16:06:43.470]             }
[16:06:43.470]             ...future.oldOptions <- base::as.list(base::.Options)
[16:06:43.470]             ...future.oldEnvVars <- base::Sys.getenv()
[16:06:43.470]         }
[16:06:43.470]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:06:43.470]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:06:43.470]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:06:43.470]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:06:43.470]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:06:43.470]             future.stdout.windows.reencode = NULL, width = 80L)
[16:06:43.470]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:06:43.470]             base::names(...future.oldOptions))
[16:06:43.470]     }
[16:06:43.470]     if (FALSE) {
[16:06:43.470]     }
[16:06:43.470]     else {
[16:06:43.470]         if (TRUE) {
[16:06:43.470]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:06:43.470]                 open = "w")
[16:06:43.470]         }
[16:06:43.470]         else {
[16:06:43.470]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:06:43.470]                 windows = "NUL", "/dev/null"), open = "w")
[16:06:43.470]         }
[16:06:43.470]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:06:43.470]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:06:43.470]             base::sink(type = "output", split = FALSE)
[16:06:43.470]             base::close(...future.stdout)
[16:06:43.470]         }, add = TRUE)
[16:06:43.470]     }
[16:06:43.470]     ...future.frame <- base::sys.nframe()
[16:06:43.470]     ...future.conditions <- base::list()
[16:06:43.470]     ...future.rng <- base::globalenv()$.Random.seed
[16:06:43.470]     if (FALSE) {
[16:06:43.470]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:06:43.470]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:06:43.470]     }
[16:06:43.470]     ...future.result <- base::tryCatch({
[16:06:43.470]         base::withCallingHandlers({
[16:06:43.470]             ...future.value <- base::withVisible(base::local(NA))
[16:06:43.470]             future::FutureResult(value = ...future.value$value, 
[16:06:43.470]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:06:43.470]                   ...future.rng), globalenv = if (FALSE) 
[16:06:43.470]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:06:43.470]                     ...future.globalenv.names))
[16:06:43.470]                 else NULL, started = ...future.startTime, version = "1.8")
[16:06:43.470]         }, condition = base::local({
[16:06:43.470]             c <- base::c
[16:06:43.470]             inherits <- base::inherits
[16:06:43.470]             invokeRestart <- base::invokeRestart
[16:06:43.470]             length <- base::length
[16:06:43.470]             list <- base::list
[16:06:43.470]             seq.int <- base::seq.int
[16:06:43.470]             signalCondition <- base::signalCondition
[16:06:43.470]             sys.calls <- base::sys.calls
[16:06:43.470]             `[[` <- base::`[[`
[16:06:43.470]             `+` <- base::`+`
[16:06:43.470]             `<<-` <- base::`<<-`
[16:06:43.470]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:06:43.470]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:06:43.470]                   3L)]
[16:06:43.470]             }
[16:06:43.470]             function(cond) {
[16:06:43.470]                 is_error <- inherits(cond, "error")
[16:06:43.470]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:06:43.470]                   NULL)
[16:06:43.470]                 if (is_error) {
[16:06:43.470]                   sessionInformation <- function() {
[16:06:43.470]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:06:43.470]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:06:43.470]                       search = base::search(), system = base::Sys.info())
[16:06:43.470]                   }
[16:06:43.470]                   ...future.conditions[[length(...future.conditions) + 
[16:06:43.470]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:06:43.470]                     cond$call), session = sessionInformation(), 
[16:06:43.470]                     timestamp = base::Sys.time(), signaled = 0L)
[16:06:43.470]                   signalCondition(cond)
[16:06:43.470]                 }
[16:06:43.470]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:06:43.470]                 "immediateCondition"))) {
[16:06:43.470]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:06:43.470]                   ...future.conditions[[length(...future.conditions) + 
[16:06:43.470]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:06:43.470]                   if (TRUE && !signal) {
[16:06:43.470]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:06:43.470]                     {
[16:06:43.470]                       inherits <- base::inherits
[16:06:43.470]                       invokeRestart <- base::invokeRestart
[16:06:43.470]                       is.null <- base::is.null
[16:06:43.470]                       muffled <- FALSE
[16:06:43.470]                       if (inherits(cond, "message")) {
[16:06:43.470]                         muffled <- grepl(pattern, "muffleMessage")
[16:06:43.470]                         if (muffled) 
[16:06:43.470]                           invokeRestart("muffleMessage")
[16:06:43.470]                       }
[16:06:43.470]                       else if (inherits(cond, "warning")) {
[16:06:43.470]                         muffled <- grepl(pattern, "muffleWarning")
[16:06:43.470]                         if (muffled) 
[16:06:43.470]                           invokeRestart("muffleWarning")
[16:06:43.470]                       }
[16:06:43.470]                       else if (inherits(cond, "condition")) {
[16:06:43.470]                         if (!is.null(pattern)) {
[16:06:43.470]                           computeRestarts <- base::computeRestarts
[16:06:43.470]                           grepl <- base::grepl
[16:06:43.470]                           restarts <- computeRestarts(cond)
[16:06:43.470]                           for (restart in restarts) {
[16:06:43.470]                             name <- restart$name
[16:06:43.470]                             if (is.null(name)) 
[16:06:43.470]                               next
[16:06:43.470]                             if (!grepl(pattern, name)) 
[16:06:43.470]                               next
[16:06:43.470]                             invokeRestart(restart)
[16:06:43.470]                             muffled <- TRUE
[16:06:43.470]                             break
[16:06:43.470]                           }
[16:06:43.470]                         }
[16:06:43.470]                       }
[16:06:43.470]                       invisible(muffled)
[16:06:43.470]                     }
[16:06:43.470]                     muffleCondition(cond, pattern = "^muffle")
[16:06:43.470]                   }
[16:06:43.470]                 }
[16:06:43.470]                 else {
[16:06:43.470]                   if (TRUE) {
[16:06:43.470]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:06:43.470]                     {
[16:06:43.470]                       inherits <- base::inherits
[16:06:43.470]                       invokeRestart <- base::invokeRestart
[16:06:43.470]                       is.null <- base::is.null
[16:06:43.470]                       muffled <- FALSE
[16:06:43.470]                       if (inherits(cond, "message")) {
[16:06:43.470]                         muffled <- grepl(pattern, "muffleMessage")
[16:06:43.470]                         if (muffled) 
[16:06:43.470]                           invokeRestart("muffleMessage")
[16:06:43.470]                       }
[16:06:43.470]                       else if (inherits(cond, "warning")) {
[16:06:43.470]                         muffled <- grepl(pattern, "muffleWarning")
[16:06:43.470]                         if (muffled) 
[16:06:43.470]                           invokeRestart("muffleWarning")
[16:06:43.470]                       }
[16:06:43.470]                       else if (inherits(cond, "condition")) {
[16:06:43.470]                         if (!is.null(pattern)) {
[16:06:43.470]                           computeRestarts <- base::computeRestarts
[16:06:43.470]                           grepl <- base::grepl
[16:06:43.470]                           restarts <- computeRestarts(cond)
[16:06:43.470]                           for (restart in restarts) {
[16:06:43.470]                             name <- restart$name
[16:06:43.470]                             if (is.null(name)) 
[16:06:43.470]                               next
[16:06:43.470]                             if (!grepl(pattern, name)) 
[16:06:43.470]                               next
[16:06:43.470]                             invokeRestart(restart)
[16:06:43.470]                             muffled <- TRUE
[16:06:43.470]                             break
[16:06:43.470]                           }
[16:06:43.470]                         }
[16:06:43.470]                       }
[16:06:43.470]                       invisible(muffled)
[16:06:43.470]                     }
[16:06:43.470]                     muffleCondition(cond, pattern = "^muffle")
[16:06:43.470]                   }
[16:06:43.470]                 }
[16:06:43.470]             }
[16:06:43.470]         }))
[16:06:43.470]     }, error = function(ex) {
[16:06:43.470]         base::structure(base::list(value = NULL, visible = NULL, 
[16:06:43.470]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:06:43.470]                 ...future.rng), started = ...future.startTime, 
[16:06:43.470]             finished = Sys.time(), session_uuid = NA_character_, 
[16:06:43.470]             version = "1.8"), class = "FutureResult")
[16:06:43.470]     }, finally = {
[16:06:43.470]         if (!identical(...future.workdir, getwd())) 
[16:06:43.470]             setwd(...future.workdir)
[16:06:43.470]         {
[16:06:43.470]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:06:43.470]                 ...future.oldOptions$nwarnings <- NULL
[16:06:43.470]             }
[16:06:43.470]             base::options(...future.oldOptions)
[16:06:43.470]             if (.Platform$OS.type == "windows") {
[16:06:43.470]                 old_names <- names(...future.oldEnvVars)
[16:06:43.470]                 envs <- base::Sys.getenv()
[16:06:43.470]                 names <- names(envs)
[16:06:43.470]                 common <- intersect(names, old_names)
[16:06:43.470]                 added <- setdiff(names, old_names)
[16:06:43.470]                 removed <- setdiff(old_names, names)
[16:06:43.470]                 changed <- common[...future.oldEnvVars[common] != 
[16:06:43.470]                   envs[common]]
[16:06:43.470]                 NAMES <- toupper(changed)
[16:06:43.470]                 args <- list()
[16:06:43.470]                 for (kk in seq_along(NAMES)) {
[16:06:43.470]                   name <- changed[[kk]]
[16:06:43.470]                   NAME <- NAMES[[kk]]
[16:06:43.470]                   if (name != NAME && is.element(NAME, old_names)) 
[16:06:43.470]                     next
[16:06:43.470]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:06:43.470]                 }
[16:06:43.470]                 NAMES <- toupper(added)
[16:06:43.470]                 for (kk in seq_along(NAMES)) {
[16:06:43.470]                   name <- added[[kk]]
[16:06:43.470]                   NAME <- NAMES[[kk]]
[16:06:43.470]                   if (name != NAME && is.element(NAME, old_names)) 
[16:06:43.470]                     next
[16:06:43.470]                   args[[name]] <- ""
[16:06:43.470]                 }
[16:06:43.470]                 NAMES <- toupper(removed)
[16:06:43.470]                 for (kk in seq_along(NAMES)) {
[16:06:43.470]                   name <- removed[[kk]]
[16:06:43.470]                   NAME <- NAMES[[kk]]
[16:06:43.470]                   if (name != NAME && is.element(NAME, old_names)) 
[16:06:43.470]                     next
[16:06:43.470]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:06:43.470]                 }
[16:06:43.470]                 if (length(args) > 0) 
[16:06:43.470]                   base::do.call(base::Sys.setenv, args = args)
[16:06:43.470]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:06:43.470]             }
[16:06:43.470]             else {
[16:06:43.470]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:06:43.470]             }
[16:06:43.470]             {
[16:06:43.470]                 if (base::length(...future.futureOptionsAdded) > 
[16:06:43.470]                   0L) {
[16:06:43.470]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:06:43.470]                   base::names(opts) <- ...future.futureOptionsAdded
[16:06:43.470]                   base::options(opts)
[16:06:43.470]                 }
[16:06:43.470]                 {
[16:06:43.470]                   {
[16:06:43.470]                     NULL
[16:06:43.470]                     RNGkind("Mersenne-Twister")
[16:06:43.470]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[16:06:43.470]                       inherits = FALSE)
[16:06:43.470]                   }
[16:06:43.470]                   options(future.plan = "multisession")
[16:06:43.470]                   if (is.na("multisession")) 
[16:06:43.470]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:06:43.470]                   else Sys.setenv(R_FUTURE_PLAN = "multisession")
[16:06:43.470]                   future::plan(list(function (..., workers = availableCores(), 
[16:06:43.470]                     lazy = FALSE, rscript_libs = .libPaths(), 
[16:06:43.470]                     envir = parent.frame()) 
[16:06:43.470]                   {
[16:06:43.470]                     if (is.function(workers)) 
[16:06:43.470]                       workers <- workers()
[16:06:43.470]                     workers <- structure(as.integer(workers), 
[16:06:43.470]                       class = class(workers))
[16:06:43.470]                     stop_if_not(length(workers) == 1, is.finite(workers), 
[16:06:43.470]                       workers >= 1)
[16:06:43.470]                     if (workers == 1L && !inherits(workers, "AsIs")) {
[16:06:43.470]                       return(sequential(..., lazy = TRUE, envir = envir))
[16:06:43.470]                     }
[16:06:43.470]                     future <- MultisessionFuture(..., workers = workers, 
[16:06:43.470]                       lazy = lazy, rscript_libs = rscript_libs, 
[16:06:43.470]                       envir = envir)
[16:06:43.470]                     if (!future$lazy) 
[16:06:43.470]                       future <- run(future)
[16:06:43.470]                     invisible(future)
[16:06:43.470]                   }), .cleanup = FALSE, .init = FALSE)
[16:06:43.470]                 }
[16:06:43.470]             }
[16:06:43.470]         }
[16:06:43.470]     })
[16:06:43.470]     if (TRUE) {
[16:06:43.470]         base::sink(type = "output", split = FALSE)
[16:06:43.470]         if (TRUE) {
[16:06:43.470]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:06:43.470]         }
[16:06:43.470]         else {
[16:06:43.470]             ...future.result["stdout"] <- base::list(NULL)
[16:06:43.470]         }
[16:06:43.470]         base::close(...future.stdout)
[16:06:43.470]         ...future.stdout <- NULL
[16:06:43.470]     }
[16:06:43.470]     ...future.result$conditions <- ...future.conditions
[16:06:43.470]     ...future.result$finished <- base::Sys.time()
[16:06:43.470]     ...future.result
[16:06:43.470] }
[16:06:43.472] plan(): Setting new future strategy stack:
[16:06:43.472] List of future strategies:
[16:06:43.472] 1. sequential:
[16:06:43.472]    - args: function (..., envir = parent.frame())
[16:06:43.472]    - tweaked: FALSE
[16:06:43.472]    - call: NULL
[16:06:43.472] plan(): nbrOfWorkers() = 1
[16:06:43.474] plan(): Setting new future strategy stack:
[16:06:43.474] List of future strategies:
[16:06:43.474] 1. multisession:
[16:06:43.474]    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[16:06:43.474]    - tweaked: FALSE
[16:06:43.474]    - call: plan("default")
[16:06:43.477] plan(): nbrOfWorkers() = 1
[16:06:43.477] SequentialFuture started (and completed)
[16:06:43.478] plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ... DONE
[16:06:43.481] plan(): nbrOfWorkers() = 1
> Sys.setenv(R_FUTURE_PLAN = "")
> message("- .onLoad() w/ R_FUTURE_PLAN = 'multisession' & -p 1 ... DONE")
- .onLoad() w/ R_FUTURE_PLAN = 'multisession' & -p 1 ... DONE
> 
> message("- .onLoad() w/ future.plan = 'multisession' & -p 1 ...")
- .onLoad() w/ future.plan = 'multisession' & -p 1 ...
> options(future.plan = 'multisession', future.cmdargs = c("-p", "1"))
> .onLoad(pkgname, pkgname)
[16:06:43.482] Future-specific environment variables:
- R_FUTURE_PLAN=‘’
- R_FUTURE_WAIT_INTERVAL=‘0.01’
[16:06:43.482] Environment variable ‘R_FUTURE_DEMO_MANDELBROT_REGION’ not set
[16:06:43.482] Environment variable ‘R_FUTURE_DEMO_MANDELBROT_NROW’ not set
[16:06:43.482] Environment variable ‘R_FUTURE_DEPRECATED_IGNORE’ not set
[16:06:43.482] Environment variable ‘R_FUTURE_DEPRECATED_DEFUNCT’ not set
[16:06:43.482] Environment variable ‘R_FUTURE_FORK_MULTITHREADING_ENABLE’ not set
[16:06:43.482] Environment variable ‘R_FUTURE_GLOBALS_MAXSIZE’ not set
[16:06:43.482] Environment variable ‘R_FUTURE_GLOBALS_ONMISSING’ not set
[16:06:43.482] Environment variable ‘R_FUTURE_GLOBALS_ONREFERENCE’ not set
[16:06:43.483] Environment variable ‘R_FUTURE_GLOBALS_METHOD’ not set
[16:06:43.483] Environment variable ‘R_FUTURE_GLOBALS_RESOLVE’ not set
[16:06:43.483] Environment variable ‘R_FUTURE_LAZY_ASSERTOWNER’ not set
[16:06:43.483] Environment variable ‘R_FUTURE_PLAN_DISALLOW’ not set
[16:06:43.483] Environment variable ‘R_FUTURE_PSOCK_RELAY_IMMEDIATE’ not set
[16:06:43.483] Environment variable ‘R_FUTURE_RELAY_IMMEDIATE’ not set
[16:06:43.483] Environment variable ‘R_FUTURE_RESOLVE_RECURSIVE’ not set
[16:06:43.483] Environment variable ‘R_FUTURE_ALIVE_TIMEOUT’ not set
[16:06:43.483] Environment variable ‘R_FUTURE_RESOLVED_TIMEOUT’ not set
[16:06:43.484] Environment variable ‘R_FUTURE_CLUSTER_RESOLVED_TIMEOUT’ not set
[16:06:43.484] Environment variable ‘R_FUTURE_MULTICORE_RESOLVED_TIMEOUT’ not set
[16:06:43.484] Environment variable ‘R_FUTURE_ONFUTURECONDITION_KEEPFUTURE’ not set
[16:06:43.484] Environment variable ‘R_FUTURE_RNG_ONMISUSE’ not set
[16:06:43.484] Environment variable ‘R_FUTURE_GLOBALENV_ONMISUSE’ not set
[16:06:43.484] Environment variable ‘R_FUTURE_WAIT_TIMEOUT’ not set
[16:06:43.484] Environment variable ‘R_FUTURE_WAIT_ALPHA’ not set
[16:06:43.484] Environment variable ‘R_FUTURE_ASSIGN_GLOBALS_EXCLUDE’ not set
[16:06:43.484] Environment variable ‘R_FUTURE_OUTPUT_WINDOWS_REENCODE’ not set
[16:06:43.484] Environment variable ‘R_FUTURE_GLOBALS_GLOBALSOF_LOCALS’ not set
[16:06:43.485] Environment variable ‘R_FUTURE_STATE_ONINVALID’ not set
[16:06:43.485] Environment variable ‘R_FUTURE_JOURNAL’ not set
[16:06:43.485] Environment variable ‘R_FUTURE_GLOBALS_KEEPWHERE’ not set
[16:06:43.485] Option 'future.plan' = ‘multisession’
[16:06:43.485] R command-line argument: -p 1
[16:06:43.485]  => 'future.plan' already set.
[16:06:43.485] R process uuid: bd7d0964-dce4-8085-e24e-182f62cec721
[16:06:43.485] Setting plan('default')
[16:06:43.486] plan(): Setting new future strategy stack:
[16:06:43.486] List of future strategies:
[16:06:43.486] 1. multisession:
[16:06:43.486]    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[16:06:43.486]    - tweaked: FALSE
[16:06:43.486]    - call: plan("default", .init = FALSE)
[16:06:43.489] plan(): nbrOfWorkers() = 1
> strategy <- plan("next")
> print(strategy)
multisession:
- args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
- tweaked: FALSE
- call: plan("default", .init = FALSE)
> stopifnot(inherits(strategy, "multisession"))
> plan("default")
[16:06:43.490] plan(): Setting new future strategy stack:
[16:06:43.490] List of future strategies:
[16:06:43.490] 1. multisession:
[16:06:43.490]    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[16:06:43.490]    - tweaked: FALSE
[16:06:43.490]    - call: plan("default")
[16:06:43.490] plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ...
[16:06:43.490] multisession:
[16:06:43.490] - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[16:06:43.490] - tweaked: FALSE
[16:06:43.490] - call: plan("default")
[16:06:43.493] getGlobalsAndPackages() ...
[16:06:43.494] Not searching for globals
[16:06:43.494] - globals: [0] <none>
[16:06:43.494] getGlobalsAndPackages() ... DONE
[16:06:43.494] Packages needed by the future expression (n = 0): <none>
[16:06:43.494] Packages needed by future strategies (n = 0): <none>
[16:06:43.495] {
[16:06:43.495]     {
[16:06:43.495]         {
[16:06:43.495]             ...future.startTime <- base::Sys.time()
[16:06:43.495]             {
[16:06:43.495]                 {
[16:06:43.495]                   {
[16:06:43.495]                     base::local({
[16:06:43.495]                       has_future <- base::requireNamespace("future", 
[16:06:43.495]                         quietly = TRUE)
[16:06:43.495]                       if (has_future) {
[16:06:43.495]                         ns <- base::getNamespace("future")
[16:06:43.495]                         version <- ns[[".package"]][["version"]]
[16:06:43.495]                         if (is.null(version)) 
[16:06:43.495]                           version <- utils::packageVersion("future")
[16:06:43.495]                       }
[16:06:43.495]                       else {
[16:06:43.495]                         version <- NULL
[16:06:43.495]                       }
[16:06:43.495]                       if (!has_future || version < "1.8.0") {
[16:06:43.495]                         info <- base::c(r_version = base::gsub("R version ", 
[16:06:43.495]                           "", base::R.version$version.string), 
[16:06:43.495]                           platform = base::sprintf("%s (%s-bit)", 
[16:06:43.495]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:06:43.495]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[16:06:43.495]                             "release", "version")], collapse = " "), 
[16:06:43.495]                           hostname = base::Sys.info()[["nodename"]])
[16:06:43.495]                         info <- base::sprintf("%s: %s", base::names(info), 
[16:06:43.495]                           info)
[16:06:43.495]                         info <- base::paste(info, collapse = "; ")
[16:06:43.495]                         if (!has_future) {
[16:06:43.495]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:06:43.495]                             info)
[16:06:43.495]                         }
[16:06:43.495]                         else {
[16:06:43.495]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:06:43.495]                             info, version)
[16:06:43.495]                         }
[16:06:43.495]                         base::stop(msg)
[16:06:43.495]                       }
[16:06:43.495]                     })
[16:06:43.495]                   }
[16:06:43.495]                   options(future.plan = NULL)
[16:06:43.495]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:06:43.495]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:06:43.495]                 }
[16:06:43.495]                 ...future.workdir <- getwd()
[16:06:43.495]             }
[16:06:43.495]             ...future.oldOptions <- base::as.list(base::.Options)
[16:06:43.495]             ...future.oldEnvVars <- base::Sys.getenv()
[16:06:43.495]         }
[16:06:43.495]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:06:43.495]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:06:43.495]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:06:43.495]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:06:43.495]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:06:43.495]             future.stdout.windows.reencode = NULL, width = 80L)
[16:06:43.495]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:06:43.495]             base::names(...future.oldOptions))
[16:06:43.495]     }
[16:06:43.495]     if (FALSE) {
[16:06:43.495]     }
[16:06:43.495]     else {
[16:06:43.495]         if (TRUE) {
[16:06:43.495]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:06:43.495]                 open = "w")
[16:06:43.495]         }
[16:06:43.495]         else {
[16:06:43.495]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:06:43.495]                 windows = "NUL", "/dev/null"), open = "w")
[16:06:43.495]         }
[16:06:43.495]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:06:43.495]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:06:43.495]             base::sink(type = "output", split = FALSE)
[16:06:43.495]             base::close(...future.stdout)
[16:06:43.495]         }, add = TRUE)
[16:06:43.495]     }
[16:06:43.495]     ...future.frame <- base::sys.nframe()
[16:06:43.495]     ...future.conditions <- base::list()
[16:06:43.495]     ...future.rng <- base::globalenv()$.Random.seed
[16:06:43.495]     if (FALSE) {
[16:06:43.495]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:06:43.495]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:06:43.495]     }
[16:06:43.495]     ...future.result <- base::tryCatch({
[16:06:43.495]         base::withCallingHandlers({
[16:06:43.495]             ...future.value <- base::withVisible(base::local(NA))
[16:06:43.495]             future::FutureResult(value = ...future.value$value, 
[16:06:43.495]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:06:43.495]                   ...future.rng), globalenv = if (FALSE) 
[16:06:43.495]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:06:43.495]                     ...future.globalenv.names))
[16:06:43.495]                 else NULL, started = ...future.startTime, version = "1.8")
[16:06:43.495]         }, condition = base::local({
[16:06:43.495]             c <- base::c
[16:06:43.495]             inherits <- base::inherits
[16:06:43.495]             invokeRestart <- base::invokeRestart
[16:06:43.495]             length <- base::length
[16:06:43.495]             list <- base::list
[16:06:43.495]             seq.int <- base::seq.int
[16:06:43.495]             signalCondition <- base::signalCondition
[16:06:43.495]             sys.calls <- base::sys.calls
[16:06:43.495]             `[[` <- base::`[[`
[16:06:43.495]             `+` <- base::`+`
[16:06:43.495]             `<<-` <- base::`<<-`
[16:06:43.495]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:06:43.495]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:06:43.495]                   3L)]
[16:06:43.495]             }
[16:06:43.495]             function(cond) {
[16:06:43.495]                 is_error <- inherits(cond, "error")
[16:06:43.495]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:06:43.495]                   NULL)
[16:06:43.495]                 if (is_error) {
[16:06:43.495]                   sessionInformation <- function() {
[16:06:43.495]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:06:43.495]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:06:43.495]                       search = base::search(), system = base::Sys.info())
[16:06:43.495]                   }
[16:06:43.495]                   ...future.conditions[[length(...future.conditions) + 
[16:06:43.495]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:06:43.495]                     cond$call), session = sessionInformation(), 
[16:06:43.495]                     timestamp = base::Sys.time(), signaled = 0L)
[16:06:43.495]                   signalCondition(cond)
[16:06:43.495]                 }
[16:06:43.495]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:06:43.495]                 "immediateCondition"))) {
[16:06:43.495]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:06:43.495]                   ...future.conditions[[length(...future.conditions) + 
[16:06:43.495]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:06:43.495]                   if (TRUE && !signal) {
[16:06:43.495]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:06:43.495]                     {
[16:06:43.495]                       inherits <- base::inherits
[16:06:43.495]                       invokeRestart <- base::invokeRestart
[16:06:43.495]                       is.null <- base::is.null
[16:06:43.495]                       muffled <- FALSE
[16:06:43.495]                       if (inherits(cond, "message")) {
[16:06:43.495]                         muffled <- grepl(pattern, "muffleMessage")
[16:06:43.495]                         if (muffled) 
[16:06:43.495]                           invokeRestart("muffleMessage")
[16:06:43.495]                       }
[16:06:43.495]                       else if (inherits(cond, "warning")) {
[16:06:43.495]                         muffled <- grepl(pattern, "muffleWarning")
[16:06:43.495]                         if (muffled) 
[16:06:43.495]                           invokeRestart("muffleWarning")
[16:06:43.495]                       }
[16:06:43.495]                       else if (inherits(cond, "condition")) {
[16:06:43.495]                         if (!is.null(pattern)) {
[16:06:43.495]                           computeRestarts <- base::computeRestarts
[16:06:43.495]                           grepl <- base::grepl
[16:06:43.495]                           restarts <- computeRestarts(cond)
[16:06:43.495]                           for (restart in restarts) {
[16:06:43.495]                             name <- restart$name
[16:06:43.495]                             if (is.null(name)) 
[16:06:43.495]                               next
[16:06:43.495]                             if (!grepl(pattern, name)) 
[16:06:43.495]                               next
[16:06:43.495]                             invokeRestart(restart)
[16:06:43.495]                             muffled <- TRUE
[16:06:43.495]                             break
[16:06:43.495]                           }
[16:06:43.495]                         }
[16:06:43.495]                       }
[16:06:43.495]                       invisible(muffled)
[16:06:43.495]                     }
[16:06:43.495]                     muffleCondition(cond, pattern = "^muffle")
[16:06:43.495]                   }
[16:06:43.495]                 }
[16:06:43.495]                 else {
[16:06:43.495]                   if (TRUE) {
[16:06:43.495]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:06:43.495]                     {
[16:06:43.495]                       inherits <- base::inherits
[16:06:43.495]                       invokeRestart <- base::invokeRestart
[16:06:43.495]                       is.null <- base::is.null
[16:06:43.495]                       muffled <- FALSE
[16:06:43.495]                       if (inherits(cond, "message")) {
[16:06:43.495]                         muffled <- grepl(pattern, "muffleMessage")
[16:06:43.495]                         if (muffled) 
[16:06:43.495]                           invokeRestart("muffleMessage")
[16:06:43.495]                       }
[16:06:43.495]                       else if (inherits(cond, "warning")) {
[16:06:43.495]                         muffled <- grepl(pattern, "muffleWarning")
[16:06:43.495]                         if (muffled) 
[16:06:43.495]                           invokeRestart("muffleWarning")
[16:06:43.495]                       }
[16:06:43.495]                       else if (inherits(cond, "condition")) {
[16:06:43.495]                         if (!is.null(pattern)) {
[16:06:43.495]                           computeRestarts <- base::computeRestarts
[16:06:43.495]                           grepl <- base::grepl
[16:06:43.495]                           restarts <- computeRestarts(cond)
[16:06:43.495]                           for (restart in restarts) {
[16:06:43.495]                             name <- restart$name
[16:06:43.495]                             if (is.null(name)) 
[16:06:43.495]                               next
[16:06:43.495]                             if (!grepl(pattern, name)) 
[16:06:43.495]                               next
[16:06:43.495]                             invokeRestart(restart)
[16:06:43.495]                             muffled <- TRUE
[16:06:43.495]                             break
[16:06:43.495]                           }
[16:06:43.495]                         }
[16:06:43.495]                       }
[16:06:43.495]                       invisible(muffled)
[16:06:43.495]                     }
[16:06:43.495]                     muffleCondition(cond, pattern = "^muffle")
[16:06:43.495]                   }
[16:06:43.495]                 }
[16:06:43.495]             }
[16:06:43.495]         }))
[16:06:43.495]     }, error = function(ex) {
[16:06:43.495]         base::structure(base::list(value = NULL, visible = NULL, 
[16:06:43.495]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:06:43.495]                 ...future.rng), started = ...future.startTime, 
[16:06:43.495]             finished = Sys.time(), session_uuid = NA_character_, 
[16:06:43.495]             version = "1.8"), class = "FutureResult")
[16:06:43.495]     }, finally = {
[16:06:43.495]         if (!identical(...future.workdir, getwd())) 
[16:06:43.495]             setwd(...future.workdir)
[16:06:43.495]         {
[16:06:43.495]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:06:43.495]                 ...future.oldOptions$nwarnings <- NULL
[16:06:43.495]             }
[16:06:43.495]             base::options(...future.oldOptions)
[16:06:43.495]             if (.Platform$OS.type == "windows") {
[16:06:43.495]                 old_names <- names(...future.oldEnvVars)
[16:06:43.495]                 envs <- base::Sys.getenv()
[16:06:43.495]                 names <- names(envs)
[16:06:43.495]                 common <- intersect(names, old_names)
[16:06:43.495]                 added <- setdiff(names, old_names)
[16:06:43.495]                 removed <- setdiff(old_names, names)
[16:06:43.495]                 changed <- common[...future.oldEnvVars[common] != 
[16:06:43.495]                   envs[common]]
[16:06:43.495]                 NAMES <- toupper(changed)
[16:06:43.495]                 args <- list()
[16:06:43.495]                 for (kk in seq_along(NAMES)) {
[16:06:43.495]                   name <- changed[[kk]]
[16:06:43.495]                   NAME <- NAMES[[kk]]
[16:06:43.495]                   if (name != NAME && is.element(NAME, old_names)) 
[16:06:43.495]                     next
[16:06:43.495]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:06:43.495]                 }
[16:06:43.495]                 NAMES <- toupper(added)
[16:06:43.495]                 for (kk in seq_along(NAMES)) {
[16:06:43.495]                   name <- added[[kk]]
[16:06:43.495]                   NAME <- NAMES[[kk]]
[16:06:43.495]                   if (name != NAME && is.element(NAME, old_names)) 
[16:06:43.495]                     next
[16:06:43.495]                   args[[name]] <- ""
[16:06:43.495]                 }
[16:06:43.495]                 NAMES <- toupper(removed)
[16:06:43.495]                 for (kk in seq_along(NAMES)) {
[16:06:43.495]                   name <- removed[[kk]]
[16:06:43.495]                   NAME <- NAMES[[kk]]
[16:06:43.495]                   if (name != NAME && is.element(NAME, old_names)) 
[16:06:43.495]                     next
[16:06:43.495]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:06:43.495]                 }
[16:06:43.495]                 if (length(args) > 0) 
[16:06:43.495]                   base::do.call(base::Sys.setenv, args = args)
[16:06:43.495]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:06:43.495]             }
[16:06:43.495]             else {
[16:06:43.495]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:06:43.495]             }
[16:06:43.495]             {
[16:06:43.495]                 if (base::length(...future.futureOptionsAdded) > 
[16:06:43.495]                   0L) {
[16:06:43.495]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:06:43.495]                   base::names(opts) <- ...future.futureOptionsAdded
[16:06:43.495]                   base::options(opts)
[16:06:43.495]                 }
[16:06:43.495]                 {
[16:06:43.495]                   {
[16:06:43.495]                     NULL
[16:06:43.495]                     RNGkind("Mersenne-Twister")
[16:06:43.495]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[16:06:43.495]                       inherits = FALSE)
[16:06:43.495]                   }
[16:06:43.495]                   options(future.plan = "multisession")
[16:06:43.495]                   if (is.na("")) 
[16:06:43.495]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:06:43.495]                   else Sys.setenv(R_FUTURE_PLAN = "")
[16:06:43.495]                   future::plan(list(function (..., workers = availableCores(), 
[16:06:43.495]                     lazy = FALSE, rscript_libs = .libPaths(), 
[16:06:43.495]                     envir = parent.frame()) 
[16:06:43.495]                   {
[16:06:43.495]                     if (is.function(workers)) 
[16:06:43.495]                       workers <- workers()
[16:06:43.495]                     workers <- structure(as.integer(workers), 
[16:06:43.495]                       class = class(workers))
[16:06:43.495]                     stop_if_not(length(workers) == 1, is.finite(workers), 
[16:06:43.495]                       workers >= 1)
[16:06:43.495]                     if (workers == 1L && !inherits(workers, "AsIs")) {
[16:06:43.495]                       return(sequential(..., lazy = TRUE, envir = envir))
[16:06:43.495]                     }
[16:06:43.495]                     future <- MultisessionFuture(..., workers = workers, 
[16:06:43.495]                       lazy = lazy, rscript_libs = rscript_libs, 
[16:06:43.495]                       envir = envir)
[16:06:43.495]                     if (!future$lazy) 
[16:06:43.495]                       future <- run(future)
[16:06:43.495]                     invisible(future)
[16:06:43.495]                   }), .cleanup = FALSE, .init = FALSE)
[16:06:43.495]                 }
[16:06:43.495]             }
[16:06:43.495]         }
[16:06:43.495]     })
[16:06:43.495]     if (TRUE) {
[16:06:43.495]         base::sink(type = "output", split = FALSE)
[16:06:43.495]         if (TRUE) {
[16:06:43.495]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:06:43.495]         }
[16:06:43.495]         else {
[16:06:43.495]             ...future.result["stdout"] <- base::list(NULL)
[16:06:43.495]         }
[16:06:43.495]         base::close(...future.stdout)
[16:06:43.495]         ...future.stdout <- NULL
[16:06:43.495]     }
[16:06:43.495]     ...future.result$conditions <- ...future.conditions
[16:06:43.495]     ...future.result$finished <- base::Sys.time()
[16:06:43.495]     ...future.result
[16:06:43.495] }
[16:06:43.497] plan(): Setting new future strategy stack:
[16:06:43.497] List of future strategies:
[16:06:43.497] 1. sequential:
[16:06:43.497]    - args: function (..., envir = parent.frame())
[16:06:43.497]    - tweaked: FALSE
[16:06:43.497]    - call: NULL
[16:06:43.497] plan(): nbrOfWorkers() = 1
[16:06:43.498] plan(): Setting new future strategy stack:
[16:06:43.498] List of future strategies:
[16:06:43.498] 1. multisession:
[16:06:43.498]    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[16:06:43.498]    - tweaked: FALSE
[16:06:43.498]    - call: plan("default")
[16:06:43.501] plan(): nbrOfWorkers() = 1
[16:06:43.501] SequentialFuture started (and completed)
[16:06:43.501] plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ... DONE
[16:06:43.505] plan(): nbrOfWorkers() = 1
> message("- .onLoad() w/ future.plan = 'multisession' & -p 1 ... DONE")
- .onLoad() w/ future.plan = 'multisession' & -p 1 ... DONE
> 
> message("- .onLoad() w/ future.plan = 'multisession' & -p 1 ...")
- .onLoad() w/ future.plan = 'multisession' & -p 1 ...
> options(future.plan = multisession, future.cmdargs = c("-p", "1"))
> .onLoad(pkgname, pkgname)
[16:06:43.506] Future-specific environment variables:
- R_FUTURE_PLAN=‘’
- R_FUTURE_WAIT_INTERVAL=‘0.01’
[16:06:43.506] Environment variable ‘R_FUTURE_DEMO_MANDELBROT_REGION’ not set
[16:06:43.506] Environment variable ‘R_FUTURE_DEMO_MANDELBROT_NROW’ not set
[16:06:43.506] Environment variable ‘R_FUTURE_DEPRECATED_IGNORE’ not set
[16:06:43.506] Environment variable ‘R_FUTURE_DEPRECATED_DEFUNCT’ not set
[16:06:43.506] Environment variable ‘R_FUTURE_FORK_MULTITHREADING_ENABLE’ not set
[16:06:43.506] Environment variable ‘R_FUTURE_GLOBALS_MAXSIZE’ not set
[16:06:43.506] Environment variable ‘R_FUTURE_GLOBALS_ONMISSING’ not set
[16:06:43.506] Environment variable ‘R_FUTURE_GLOBALS_ONREFERENCE’ not set
[16:06:43.507] Environment variable ‘R_FUTURE_GLOBALS_METHOD’ not set
[16:06:43.507] Environment variable ‘R_FUTURE_GLOBALS_RESOLVE’ not set
[16:06:43.507] Environment variable ‘R_FUTURE_LAZY_ASSERTOWNER’ not set
[16:06:43.507] Environment variable ‘R_FUTURE_PLAN_DISALLOW’ not set
[16:06:43.507] Environment variable ‘R_FUTURE_PSOCK_RELAY_IMMEDIATE’ not set
[16:06:43.507] Environment variable ‘R_FUTURE_RELAY_IMMEDIATE’ not set
[16:06:43.507] Environment variable ‘R_FUTURE_RESOLVE_RECURSIVE’ not set
[16:06:43.507] Environment variable ‘R_FUTURE_ALIVE_TIMEOUT’ not set
[16:06:43.507] Environment variable ‘R_FUTURE_RESOLVED_TIMEOUT’ not set
[16:06:43.508] Environment variable ‘R_FUTURE_CLUSTER_RESOLVED_TIMEOUT’ not set
[16:06:43.508] Environment variable ‘R_FUTURE_MULTICORE_RESOLVED_TIMEOUT’ not set
[16:06:43.508] Environment variable ‘R_FUTURE_ONFUTURECONDITION_KEEPFUTURE’ not set
[16:06:43.508] Environment variable ‘R_FUTURE_RNG_ONMISUSE’ not set
[16:06:43.508] Environment variable ‘R_FUTURE_GLOBALENV_ONMISUSE’ not set
[16:06:43.508] Environment variable ‘R_FUTURE_WAIT_TIMEOUT’ not set
[16:06:43.508] Environment variable ‘R_FUTURE_WAIT_ALPHA’ not set
[16:06:43.508] Environment variable ‘R_FUTURE_ASSIGN_GLOBALS_EXCLUDE’ not set
[16:06:43.508] Environment variable ‘R_FUTURE_OUTPUT_WINDOWS_REENCODE’ not set
[16:06:43.508] Environment variable ‘R_FUTURE_GLOBALS_GLOBALSOF_LOCALS’ not set
[16:06:43.509] Environment variable ‘R_FUTURE_STATE_ONINVALID’ not set
[16:06:43.509] Environment variable ‘R_FUTURE_JOURNAL’ not set
[16:06:43.509] Environment variable ‘R_FUTURE_GLOBALS_KEEPWHERE’ not set
[16:06:43.509] Option 'future.plan' of type ‘function’
[16:06:43.509] R command-line argument: -p 1
[16:06:43.509]  => 'future.plan' already set.
[16:06:43.509] R process uuid: bd7d0964-dce4-8085-e24e-182f62cec721
[16:06:43.509] Setting plan('default')
[16:06:43.510] plan(): Setting new future strategy stack:
[16:06:43.510] List of future strategies:
[16:06:43.510] 1. multisession:
[16:06:43.510]    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[16:06:43.510]    - tweaked: FALSE
[16:06:43.510]    - call: NULL
[16:06:43.513] plan(): nbrOfWorkers() = 1
> strategy <- plan("next")
> print(strategy)
multisession:
- args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
- tweaked: FALSE
- call: NULL
> stopifnot(inherits(strategy, "multisession"))
> plan("default")
[16:06:43.513] plan(): Setting new future strategy stack:
[16:06:43.513] List of future strategies:
[16:06:43.513] 1. multisession:
[16:06:43.513]    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[16:06:43.513]    - tweaked: FALSE
[16:06:43.513]    - call: NULL
[16:06:43.514] plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ...
[16:06:43.514] multisession:
[16:06:43.514] - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[16:06:43.514] - tweaked: FALSE
[16:06:43.514] - call: NULL
[16:06:43.517] getGlobalsAndPackages() ...
[16:06:43.517] Not searching for globals
[16:06:43.517] - globals: [0] <none>
[16:06:43.517] getGlobalsAndPackages() ... DONE
[16:06:43.518] Packages needed by the future expression (n = 0): <none>
[16:06:43.518] Packages needed by future strategies (n = 0): <none>
[16:06:43.518] {
[16:06:43.518]     {
[16:06:43.518]         {
[16:06:43.518]             ...future.startTime <- base::Sys.time()
[16:06:43.518]             {
[16:06:43.518]                 {
[16:06:43.518]                   {
[16:06:43.518]                     base::local({
[16:06:43.518]                       has_future <- base::requireNamespace("future", 
[16:06:43.518]                         quietly = TRUE)
[16:06:43.518]                       if (has_future) {
[16:06:43.518]                         ns <- base::getNamespace("future")
[16:06:43.518]                         version <- ns[[".package"]][["version"]]
[16:06:43.518]                         if (is.null(version)) 
[16:06:43.518]                           version <- utils::packageVersion("future")
[16:06:43.518]                       }
[16:06:43.518]                       else {
[16:06:43.518]                         version <- NULL
[16:06:43.518]                       }
[16:06:43.518]                       if (!has_future || version < "1.8.0") {
[16:06:43.518]                         info <- base::c(r_version = base::gsub("R version ", 
[16:06:43.518]                           "", base::R.version$version.string), 
[16:06:43.518]                           platform = base::sprintf("%s (%s-bit)", 
[16:06:43.518]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:06:43.518]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[16:06:43.518]                             "release", "version")], collapse = " "), 
[16:06:43.518]                           hostname = base::Sys.info()[["nodename"]])
[16:06:43.518]                         info <- base::sprintf("%s: %s", base::names(info), 
[16:06:43.518]                           info)
[16:06:43.518]                         info <- base::paste(info, collapse = "; ")
[16:06:43.518]                         if (!has_future) {
[16:06:43.518]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:06:43.518]                             info)
[16:06:43.518]                         }
[16:06:43.518]                         else {
[16:06:43.518]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:06:43.518]                             info, version)
[16:06:43.518]                         }
[16:06:43.518]                         base::stop(msg)
[16:06:43.518]                       }
[16:06:43.518]                     })
[16:06:43.518]                   }
[16:06:43.518]                   options(future.plan = NULL)
[16:06:43.518]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:06:43.518]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:06:43.518]                 }
[16:06:43.518]                 ...future.workdir <- getwd()
[16:06:43.518]             }
[16:06:43.518]             ...future.oldOptions <- base::as.list(base::.Options)
[16:06:43.518]             ...future.oldEnvVars <- base::Sys.getenv()
[16:06:43.518]         }
[16:06:43.518]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:06:43.518]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:06:43.518]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:06:43.518]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:06:43.518]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:06:43.518]             future.stdout.windows.reencode = NULL, width = 80L)
[16:06:43.518]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:06:43.518]             base::names(...future.oldOptions))
[16:06:43.518]     }
[16:06:43.518]     if (FALSE) {
[16:06:43.518]     }
[16:06:43.518]     else {
[16:06:43.518]         if (TRUE) {
[16:06:43.518]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:06:43.518]                 open = "w")
[16:06:43.518]         }
[16:06:43.518]         else {
[16:06:43.518]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:06:43.518]                 windows = "NUL", "/dev/null"), open = "w")
[16:06:43.518]         }
[16:06:43.518]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:06:43.518]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:06:43.518]             base::sink(type = "output", split = FALSE)
[16:06:43.518]             base::close(...future.stdout)
[16:06:43.518]         }, add = TRUE)
[16:06:43.518]     }
[16:06:43.518]     ...future.frame <- base::sys.nframe()
[16:06:43.518]     ...future.conditions <- base::list()
[16:06:43.518]     ...future.rng <- base::globalenv()$.Random.seed
[16:06:43.518]     if (FALSE) {
[16:06:43.518]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:06:43.518]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:06:43.518]     }
[16:06:43.518]     ...future.result <- base::tryCatch({
[16:06:43.518]         base::withCallingHandlers({
[16:06:43.518]             ...future.value <- base::withVisible(base::local(NA))
[16:06:43.518]             future::FutureResult(value = ...future.value$value, 
[16:06:43.518]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:06:43.518]                   ...future.rng), globalenv = if (FALSE) 
[16:06:43.518]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:06:43.518]                     ...future.globalenv.names))
[16:06:43.518]                 else NULL, started = ...future.startTime, version = "1.8")
[16:06:43.518]         }, condition = base::local({
[16:06:43.518]             c <- base::c
[16:06:43.518]             inherits <- base::inherits
[16:06:43.518]             invokeRestart <- base::invokeRestart
[16:06:43.518]             length <- base::length
[16:06:43.518]             list <- base::list
[16:06:43.518]             seq.int <- base::seq.int
[16:06:43.518]             signalCondition <- base::signalCondition
[16:06:43.518]             sys.calls <- base::sys.calls
[16:06:43.518]             `[[` <- base::`[[`
[16:06:43.518]             `+` <- base::`+`
[16:06:43.518]             `<<-` <- base::`<<-`
[16:06:43.518]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:06:43.518]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:06:43.518]                   3L)]
[16:06:43.518]             }
[16:06:43.518]             function(cond) {
[16:06:43.518]                 is_error <- inherits(cond, "error")
[16:06:43.518]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:06:43.518]                   NULL)
[16:06:43.518]                 if (is_error) {
[16:06:43.518]                   sessionInformation <- function() {
[16:06:43.518]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:06:43.518]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:06:43.518]                       search = base::search(), system = base::Sys.info())
[16:06:43.518]                   }
[16:06:43.518]                   ...future.conditions[[length(...future.conditions) + 
[16:06:43.518]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:06:43.518]                     cond$call), session = sessionInformation(), 
[16:06:43.518]                     timestamp = base::Sys.time(), signaled = 0L)
[16:06:43.518]                   signalCondition(cond)
[16:06:43.518]                 }
[16:06:43.518]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:06:43.518]                 "immediateCondition"))) {
[16:06:43.518]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:06:43.518]                   ...future.conditions[[length(...future.conditions) + 
[16:06:43.518]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:06:43.518]                   if (TRUE && !signal) {
[16:06:43.518]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:06:43.518]                     {
[16:06:43.518]                       inherits <- base::inherits
[16:06:43.518]                       invokeRestart <- base::invokeRestart
[16:06:43.518]                       is.null <- base::is.null
[16:06:43.518]                       muffled <- FALSE
[16:06:43.518]                       if (inherits(cond, "message")) {
[16:06:43.518]                         muffled <- grepl(pattern, "muffleMessage")
[16:06:43.518]                         if (muffled) 
[16:06:43.518]                           invokeRestart("muffleMessage")
[16:06:43.518]                       }
[16:06:43.518]                       else if (inherits(cond, "warning")) {
[16:06:43.518]                         muffled <- grepl(pattern, "muffleWarning")
[16:06:43.518]                         if (muffled) 
[16:06:43.518]                           invokeRestart("muffleWarning")
[16:06:43.518]                       }
[16:06:43.518]                       else if (inherits(cond, "condition")) {
[16:06:43.518]                         if (!is.null(pattern)) {
[16:06:43.518]                           computeRestarts <- base::computeRestarts
[16:06:43.518]                           grepl <- base::grepl
[16:06:43.518]                           restarts <- computeRestarts(cond)
[16:06:43.518]                           for (restart in restarts) {
[16:06:43.518]                             name <- restart$name
[16:06:43.518]                             if (is.null(name)) 
[16:06:43.518]                               next
[16:06:43.518]                             if (!grepl(pattern, name)) 
[16:06:43.518]                               next
[16:06:43.518]                             invokeRestart(restart)
[16:06:43.518]                             muffled <- TRUE
[16:06:43.518]                             break
[16:06:43.518]                           }
[16:06:43.518]                         }
[16:06:43.518]                       }
[16:06:43.518]                       invisible(muffled)
[16:06:43.518]                     }
[16:06:43.518]                     muffleCondition(cond, pattern = "^muffle")
[16:06:43.518]                   }
[16:06:43.518]                 }
[16:06:43.518]                 else {
[16:06:43.518]                   if (TRUE) {
[16:06:43.518]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:06:43.518]                     {
[16:06:43.518]                       inherits <- base::inherits
[16:06:43.518]                       invokeRestart <- base::invokeRestart
[16:06:43.518]                       is.null <- base::is.null
[16:06:43.518]                       muffled <- FALSE
[16:06:43.518]                       if (inherits(cond, "message")) {
[16:06:43.518]                         muffled <- grepl(pattern, "muffleMessage")
[16:06:43.518]                         if (muffled) 
[16:06:43.518]                           invokeRestart("muffleMessage")
[16:06:43.518]                       }
[16:06:43.518]                       else if (inherits(cond, "warning")) {
[16:06:43.518]                         muffled <- grepl(pattern, "muffleWarning")
[16:06:43.518]                         if (muffled) 
[16:06:43.518]                           invokeRestart("muffleWarning")
[16:06:43.518]                       }
[16:06:43.518]                       else if (inherits(cond, "condition")) {
[16:06:43.518]                         if (!is.null(pattern)) {
[16:06:43.518]                           computeRestarts <- base::computeRestarts
[16:06:43.518]                           grepl <- base::grepl
[16:06:43.518]                           restarts <- computeRestarts(cond)
[16:06:43.518]                           for (restart in restarts) {
[16:06:43.518]                             name <- restart$name
[16:06:43.518]                             if (is.null(name)) 
[16:06:43.518]                               next
[16:06:43.518]                             if (!grepl(pattern, name)) 
[16:06:43.518]                               next
[16:06:43.518]                             invokeRestart(restart)
[16:06:43.518]                             muffled <- TRUE
[16:06:43.518]                             break
[16:06:43.518]                           }
[16:06:43.518]                         }
[16:06:43.518]                       }
[16:06:43.518]                       invisible(muffled)
[16:06:43.518]                     }
[16:06:43.518]                     muffleCondition(cond, pattern = "^muffle")
[16:06:43.518]                   }
[16:06:43.518]                 }
[16:06:43.518]             }
[16:06:43.518]         }))
[16:06:43.518]     }, error = function(ex) {
[16:06:43.518]         base::structure(base::list(value = NULL, visible = NULL, 
[16:06:43.518]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:06:43.518]                 ...future.rng), started = ...future.startTime, 
[16:06:43.518]             finished = Sys.time(), session_uuid = NA_character_, 
[16:06:43.518]             version = "1.8"), class = "FutureResult")
[16:06:43.518]     }, finally = {
[16:06:43.518]         if (!identical(...future.workdir, getwd())) 
[16:06:43.518]             setwd(...future.workdir)
[16:06:43.518]         {
[16:06:43.518]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:06:43.518]                 ...future.oldOptions$nwarnings <- NULL
[16:06:43.518]             }
[16:06:43.518]             base::options(...future.oldOptions)
[16:06:43.518]             if (.Platform$OS.type == "windows") {
[16:06:43.518]                 old_names <- names(...future.oldEnvVars)
[16:06:43.518]                 envs <- base::Sys.getenv()
[16:06:43.518]                 names <- names(envs)
[16:06:43.518]                 common <- intersect(names, old_names)
[16:06:43.518]                 added <- setdiff(names, old_names)
[16:06:43.518]                 removed <- setdiff(old_names, names)
[16:06:43.518]                 changed <- common[...future.oldEnvVars[common] != 
[16:06:43.518]                   envs[common]]
[16:06:43.518]                 NAMES <- toupper(changed)
[16:06:43.518]                 args <- list()
[16:06:43.518]                 for (kk in seq_along(NAMES)) {
[16:06:43.518]                   name <- changed[[kk]]
[16:06:43.518]                   NAME <- NAMES[[kk]]
[16:06:43.518]                   if (name != NAME && is.element(NAME, old_names)) 
[16:06:43.518]                     next
[16:06:43.518]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:06:43.518]                 }
[16:06:43.518]                 NAMES <- toupper(added)
[16:06:43.518]                 for (kk in seq_along(NAMES)) {
[16:06:43.518]                   name <- added[[kk]]
[16:06:43.518]                   NAME <- NAMES[[kk]]
[16:06:43.518]                   if (name != NAME && is.element(NAME, old_names)) 
[16:06:43.518]                     next
[16:06:43.518]                   args[[name]] <- ""
[16:06:43.518]                 }
[16:06:43.518]                 NAMES <- toupper(removed)
[16:06:43.518]                 for (kk in seq_along(NAMES)) {
[16:06:43.518]                   name <- removed[[kk]]
[16:06:43.518]                   NAME <- NAMES[[kk]]
[16:06:43.518]                   if (name != NAME && is.element(NAME, old_names)) 
[16:06:43.518]                     next
[16:06:43.518]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:06:43.518]                 }
[16:06:43.518]                 if (length(args) > 0) 
[16:06:43.518]                   base::do.call(base::Sys.setenv, args = args)
[16:06:43.518]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:06:43.518]             }
[16:06:43.518]             else {
[16:06:43.518]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:06:43.518]             }
[16:06:43.518]             {
[16:06:43.518]                 if (base::length(...future.futureOptionsAdded) > 
[16:06:43.518]                   0L) {
[16:06:43.518]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:06:43.518]                   base::names(opts) <- ...future.futureOptionsAdded
[16:06:43.518]                   base::options(opts)
[16:06:43.518]                 }
[16:06:43.518]                 {
[16:06:43.518]                   {
[16:06:43.518]                     NULL
[16:06:43.518]                     RNGkind("Mersenne-Twister")
[16:06:43.518]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[16:06:43.518]                       inherits = FALSE)
[16:06:43.518]                   }
[16:06:43.518]                   options(future.plan = function (..., workers = availableCores(), 
[16:06:43.518]                     lazy = FALSE, rscript_libs = .libPaths(), 
[16:06:43.518]                     envir = parent.frame()) 
[16:06:43.518]                   {
[16:06:43.518]                     if (is.function(workers)) 
[16:06:43.518]                       workers <- workers()
[16:06:43.518]                     workers <- structure(as.integer(workers), 
[16:06:43.518]                       class = class(workers))
[16:06:43.518]                     stop_if_not(length(workers) == 1, is.finite(workers), 
[16:06:43.518]                       workers >= 1)
[16:06:43.518]                     if (workers == 1L && !inherits(workers, "AsIs")) {
[16:06:43.518]                       return(sequential(..., lazy = TRUE, envir = envir))
[16:06:43.518]                     }
[16:06:43.518]                     future <- MultisessionFuture(..., workers = workers, 
[16:06:43.518]                       lazy = lazy, rscript_libs = rscript_libs, 
[16:06:43.518]                       envir = envir)
[16:06:43.518]                     if (!future$lazy) 
[16:06:43.518]                       future <- run(future)
[16:06:43.518]                     invisible(future)
[16:06:43.518]                   })
[16:06:43.518]                   if (is.na("")) 
[16:06:43.518]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:06:43.518]                   else Sys.setenv(R_FUTURE_PLAN = "")
[16:06:43.518]                   future::plan(list(function (..., workers = availableCores(), 
[16:06:43.518]                     lazy = FALSE, rscript_libs = .libPaths(), 
[16:06:43.518]                     envir = parent.frame()) 
[16:06:43.518]                   {
[16:06:43.518]                     if (is.function(workers)) 
[16:06:43.518]                       workers <- workers()
[16:06:43.518]                     workers <- structure(as.integer(workers), 
[16:06:43.518]                       class = class(workers))
[16:06:43.518]                     stop_if_not(length(workers) == 1, is.finite(workers), 
[16:06:43.518]                       workers >= 1)
[16:06:43.518]                     if (workers == 1L && !inherits(workers, "AsIs")) {
[16:06:43.518]                       return(sequential(..., lazy = TRUE, envir = envir))
[16:06:43.518]                     }
[16:06:43.518]                     future <- MultisessionFuture(..., workers = workers, 
[16:06:43.518]                       lazy = lazy, rscript_libs = rscript_libs, 
[16:06:43.518]                       envir = envir)
[16:06:43.518]                     if (!future$lazy) 
[16:06:43.518]                       future <- run(future)
[16:06:43.518]                     invisible(future)
[16:06:43.518]                   }), .cleanup = FALSE, .init = FALSE)
[16:06:43.518]                 }
[16:06:43.518]             }
[16:06:43.518]         }
[16:06:43.518]     })
[16:06:43.518]     if (TRUE) {
[16:06:43.518]         base::sink(type = "output", split = FALSE)
[16:06:43.518]         if (TRUE) {
[16:06:43.518]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:06:43.518]         }
[16:06:43.518]         else {
[16:06:43.518]             ...future.result["stdout"] <- base::list(NULL)
[16:06:43.518]         }
[16:06:43.518]         base::close(...future.stdout)
[16:06:43.518]         ...future.stdout <- NULL
[16:06:43.518]     }
[16:06:43.518]     ...future.result$conditions <- ...future.conditions
[16:06:43.518]     ...future.result$finished <- base::Sys.time()
[16:06:43.518]     ...future.result
[16:06:43.518] }
[16:06:43.520] plan(): Setting new future strategy stack:
[16:06:43.520] List of future strategies:
[16:06:43.520] 1. sequential:
[16:06:43.520]    - args: function (..., envir = parent.frame())
[16:06:43.520]    - tweaked: FALSE
[16:06:43.520]    - call: NULL
[16:06:43.521] plan(): nbrOfWorkers() = 1
[16:06:43.521] plan(): Setting new future strategy stack:
[16:06:43.521] List of future strategies:
[16:06:43.521] 1. multisession:
[16:06:43.521]    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[16:06:43.521]    - tweaked: FALSE
[16:06:43.521]    - call: NULL
[16:06:43.525] plan(): nbrOfWorkers() = 1
[16:06:43.525] SequentialFuture started (and completed)
[16:06:43.525] plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ... DONE
[16:06:43.528] plan(): nbrOfWorkers() = 1
> message("- .onLoad() w/ future.plan = 'multisession' & -p 1 ... DONE")
- .onLoad() w/ future.plan = 'multisession' & -p 1 ... DONE
> 
> options(future.plan = NULL, future.cmdargs = NULL, future.availableCores.system = NULL, future.availableCores.fallback = NULL)
> 
> message("*** .onLoad() ... DONE")
*** .onLoad() ... DONE
> 
> 
> message("*** .onAttach() ...")
*** .onAttach() ...
> 
> pkgname <- "future"
> 
> message("- .onAttach() w/ option future.startup.loadScript ...")
- .onAttach() w/ option future.startup.loadScript ...
> 
> for (value in list(NULL, FALSE, TRUE)) {
+   options(future.startup.loadScript = value)
+   .onAttach(pkgname, pkgname)
+ }
[16:06:43.531] Option 'future.startup.script': TRUE
[16:06:43.531] Future startup scripts considered: ‘.future.R’, ‘~/.future.R’
[16:06:43.531] Future startup scripts found: <none>
[16:06:43.531] Option 'future.startup.script': TRUE
[16:06:43.531] Future startup scripts considered: ‘.future.R’, ‘~/.future.R’
[16:06:43.531] Future startup scripts found: <none>
[16:06:43.531] Option 'future.startup.script': TRUE
[16:06:43.532] Future startup scripts considered: ‘.future.R’, ‘~/.future.R’
[16:06:43.532] Future startup scripts found: <none>
> 
> message("- .onAttach() w/ option future.startup.loadScript ... DONE")
- .onAttach() w/ option future.startup.loadScript ... DONE
> 
> message("- .onAttach() with ./.future.R ...")
- .onAttach() with ./.future.R ...
> 
> pathname <- ".future.R"
> xyz <- 0L
> cat("xyz <- 42L; cat('ping\n')\n", file = pathname)
> .onAttach(pkgname, pkgname)
[16:06:43.534] Option 'future.startup.script': TRUE
[16:06:43.534] Future startup scripts considered: ‘.future.R’, ‘~/.future.R’
[16:06:43.534] Future startup scripts found: ‘.future.R’
[16:06:43.534] Future startup script to load: ‘.future.R’
ping
[1] ".future.R"
> print(xyz)
[1] 42
> stopifnot(is.integer(xyz), xyz >= 0, xyz == 42L)
> file.remove(pathname)
[1] TRUE
> 
> message("- .onAttach() with ./.future.R ... DONE")
- .onAttach() with ./.future.R ... DONE
> 
> message("*** .onAttach() ... DONE")
*** .onAttach() ... DONE
> 
> 
> source("incl/end.R")
[16:06:43.535] plan(): Setting new future strategy stack:
[16:06:43.535] List of future strategies:
[16:06:43.535] 1. FutureStrategy:
[16:06:43.535]    - args: function (..., envir = parent.frame())
[16:06:43.535]    - tweaked: FALSE
[16:06:43.535]    - call: future::plan(oplan)
[16:06:43.536] plan(): nbrOfWorkers() = 1
> 
