
R version 4.3.2 (2023-10-31) -- "Eye Holes"
Copyright (C) 2023 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> source("incl/start.R")
[10:27:48.750] plan(): Setting new future strategy stack:
[10:27:48.750] List of future strategies:
[10:27:48.750] 1. sequential:
[10:27:48.750]    - args: function (..., envir = parent.frame())
[10:27:48.750]    - tweaked: FALSE
[10:27:48.750]    - call: future::plan("sequential")
[10:27:48.766] plan(): nbrOfWorkers() = 1
> 
> maxCores <- min(2L, availableCores(methods = "system"))
> 
> 
> plan("default")
[10:27:48.776] plan(): Setting new future strategy stack:
[10:27:48.777] List of future strategies:
[10:27:48.777] 1. sequential:
[10:27:48.777]    - args: function (..., envir = parent.frame())
[10:27:48.777]    - tweaked: FALSE
[10:27:48.777]    - call: NULL
[10:27:48.788] plan(): nbrOfWorkers() = 1
> strategy0 <- plan()
>  
> message("*** parseCmdArgs() ...")
*** parseCmdArgs() ...
> 
> args <- parseCmdArgs()
> str(args)
 list()
> 
> options(future.plan = NULL, future.cmdargs = c("-p", 1L))
> args <- parseCmdArgs()
> str(args)
List of 1
 $ p: int 1
> stopifnot(args$p == 1L)
> 
> options(future.plan = NULL, future.cmdargs = c(sprintf("--parallel=%d", maxCores)))
> args <- parseCmdArgs()
> str(args)
List of 1
 $ p: int 2
> stopifnot(args$p == maxCores)
> 
> options(future.plan = NULL, future.cmdargs = c("-p", 1L, sprintf("--parallel=%d", maxCores)))
> args <- parseCmdArgs()
> str(args)
List of 1
 $ p: int 2
> stopifnot(args$p == maxCores)
> 
> options(future.plan = NULL, future.cmdargs = c("-p", 0L))
> args <- parseCmdArgs()
Warning: future: Ignoring invalid number of processes specified in command-line option: -p 0
> stopifnot(is.null(args$p))
> res <- tryCatch(parseCmdArgs(), warning = function(w) w)
> stopifnot(inherits(res, "warning"))
> 
> options(future.plan = NULL, future.cmdargs = c("-p", .Machine$integer.max))
> args <- parseCmdArgs()
Warning: future: Ignoring requested number of processes, because it is greater than the number of cores/child processes available (= 4) to this R process: -p 2147483647
> stopifnot(is.null(args$p))
> res <- tryCatch(parseCmdArgs(), warning = function(w) w)
> stopifnot(inherits(res, "warning"))
> 
> options(future.plan = NULL, future.cmdargs = NULL)
> 
> message("*** parseCmdArgs() ... DONE")
*** parseCmdArgs() ... DONE
> 
> 
> 
> message("*** .onLoad() ...")
*** .onLoad() ...
> plan("default")
[10:27:48.795] plan(): Setting new future strategy stack:
[10:27:48.795] List of future strategies:
[10:27:48.795] 1. sequential:
[10:27:48.795]    - args: function (..., envir = parent.frame())
[10:27:48.795]    - tweaked: FALSE
[10:27:48.795]    - call: NULL
[10:27:48.795] plan(): nbrOfWorkers() = 1
> pkgname <- "future"
> 
> message("- .onLoad() w/out command-line options ...")
- .onLoad() w/out command-line options ...
> options(future.plan = NULL, future.cmdargs = NULL)
> .onLoad(pkgname, pkgname)
[10:27:48.796] Future-specific environment variables:
- R_FUTURE_WAIT_INTERVAL=‘0.01’
[10:27:48.796] Environment variable ‘R_FUTURE_DEMO_MANDELBROT_REGION’ not set
[10:27:48.797] Environment variable ‘R_FUTURE_DEMO_MANDELBROT_NROW’ not set
[10:27:48.797] Environment variable ‘R_FUTURE_DEPRECATED_IGNORE’ not set
[10:27:48.797] Environment variable ‘R_FUTURE_DEPRECATED_DEFUNCT’ not set
[10:27:48.797] Environment variable ‘R_FUTURE_FORK_MULTITHREADING_ENABLE’ not set
[10:27:48.797] Environment variable ‘R_FUTURE_GLOBALS_MAXSIZE’ not set
[10:27:48.797] Environment variable ‘R_FUTURE_GLOBALS_ONMISSING’ not set
[10:27:48.797] Environment variable ‘R_FUTURE_GLOBALS_ONREFERENCE’ not set
[10:27:48.797] Environment variable ‘R_FUTURE_GLOBALS_METHOD’ not set
[10:27:48.798] Environment variable ‘R_FUTURE_GLOBALS_RESOLVE’ not set
[10:27:48.798] Environment variable ‘R_FUTURE_LAZY_ASSERTOWNER’ not set
[10:27:48.798] Environment variable ‘R_FUTURE_PLAN’ not set
[10:27:48.798] Environment variable ‘R_FUTURE_PLAN_DISALLOW’ not set
[10:27:48.798] Environment variable ‘R_FUTURE_PSOCK_RELAY_IMMEDIATE’ not set
[10:27:48.798] Environment variable ‘R_FUTURE_RELAY_IMMEDIATE’ not set
[10:27:48.798] Environment variable ‘R_FUTURE_RESOLVE_RECURSIVE’ not set
[10:27:48.798] Environment variable ‘R_FUTURE_ALIVE_TIMEOUT’ not set
[10:27:48.798] Environment variable ‘R_FUTURE_RESOLVED_TIMEOUT’ not set
[10:27:48.799] Environment variable ‘R_FUTURE_CLUSTER_RESOLVED_TIMEOUT’ not set
[10:27:48.799] Environment variable ‘R_FUTURE_MULTICORE_RESOLVED_TIMEOUT’ not set
[10:27:48.799] Environment variable ‘R_FUTURE_ONFUTURECONDITION_KEEPFUTURE’ not set
[10:27:48.799] Environment variable ‘R_FUTURE_RNG_ONMISUSE’ not set
[10:27:48.799] Environment variable ‘R_FUTURE_GLOBALENV_ONMISUSE’ not set
[10:27:48.799] Environment variable ‘R_FUTURE_WAIT_TIMEOUT’ not set
[10:27:48.799] R_FUTURE_WAIT_INTERVAL=‘0.01’
[10:27:48.799] Coercing from character to numeric: ‘0.01’
[10:27:48.799] => options(“future.wait.interval” = ‘0.01’) [n=1, mode=double]
[10:27:48.800] Environment variable ‘R_FUTURE_WAIT_ALPHA’ not set
[10:27:48.800] Environment variable ‘R_FUTURE_ASSIGN_GLOBALS_EXCLUDE’ not set
[10:27:48.800] Environment variable ‘R_FUTURE_OUTPUT_WINDOWS_REENCODE’ not set
[10:27:48.800] Environment variable ‘R_FUTURE_GLOBALS_GLOBALSOF_LOCALS’ not set
[10:27:48.800] Environment variable ‘R_FUTURE_STATE_ONINVALID’ not set
[10:27:48.800] Environment variable ‘R_FUTURE_JOURNAL’ not set
[10:27:48.800] Environment variable ‘R_FUTURE_GLOBALS_KEEPWHERE’ not set
[10:27:48.801] R process uuid: 02bdf616-e82e-8268-20f6-d170051ac4ee
[10:27:48.801] Setting plan('default')
[10:27:48.801] plan(): Setting new future strategy stack:
[10:27:48.801] List of future strategies:
[10:27:48.801] 1. sequential:
[10:27:48.801]    - args: function (..., envir = parent.frame())
[10:27:48.801]    - tweaked: FALSE
[10:27:48.801]    - call: NULL
[10:27:48.801] plan(): nbrOfWorkers() = 1
> strategy <- plan("next")
> print(strategy)
sequential:
- args: function (..., envir = parent.frame())
- tweaked: FALSE
- call: NULL
> stopifnot(all(class(strategy) == class(strategy0)))
> plan("default")
[10:27:48.802] plan(): Setting new future strategy stack:
[10:27:48.802] List of future strategies:
[10:27:48.802] 1. sequential:
[10:27:48.802]    - args: function (..., envir = parent.frame())
[10:27:48.802]    - tweaked: FALSE
[10:27:48.802]    - call: NULL
[10:27:48.802] plan(): nbrOfWorkers() = 1
> message("- .onLoad() w/out command-line options ... DONE")
- .onLoad() w/out command-line options ... DONE
> 
> message("- .onLoad() w/ -p 1 ...")
- .onLoad() w/ -p 1 ...
> options(future.plan = NULL, future.cmdargs = c("-p", 1))
> .onLoad(pkgname, pkgname)
[10:27:48.803] Future-specific environment variables:
- R_FUTURE_WAIT_INTERVAL=‘0.01’
[10:27:48.803] Environment variable ‘R_FUTURE_DEMO_MANDELBROT_REGION’ not set
[10:27:48.803] Environment variable ‘R_FUTURE_DEMO_MANDELBROT_NROW’ not set
[10:27:48.803] Environment variable ‘R_FUTURE_DEPRECATED_IGNORE’ not set
[10:27:48.804] Environment variable ‘R_FUTURE_DEPRECATED_DEFUNCT’ not set
[10:27:48.804] Environment variable ‘R_FUTURE_FORK_MULTITHREADING_ENABLE’ not set
[10:27:48.804] Environment variable ‘R_FUTURE_GLOBALS_MAXSIZE’ not set
[10:27:48.804] Environment variable ‘R_FUTURE_GLOBALS_ONMISSING’ not set
[10:27:48.804] Environment variable ‘R_FUTURE_GLOBALS_ONREFERENCE’ not set
[10:27:48.804] Environment variable ‘R_FUTURE_GLOBALS_METHOD’ not set
[10:27:48.804] Environment variable ‘R_FUTURE_GLOBALS_RESOLVE’ not set
[10:27:48.804] Environment variable ‘R_FUTURE_LAZY_ASSERTOWNER’ not set
[10:27:48.804] Environment variable ‘R_FUTURE_PLAN’ not set
[10:27:48.805] Environment variable ‘R_FUTURE_PLAN_DISALLOW’ not set
[10:27:48.805] Environment variable ‘R_FUTURE_PSOCK_RELAY_IMMEDIATE’ not set
[10:27:48.805] Environment variable ‘R_FUTURE_RELAY_IMMEDIATE’ not set
[10:27:48.805] Environment variable ‘R_FUTURE_RESOLVE_RECURSIVE’ not set
[10:27:48.805] Environment variable ‘R_FUTURE_ALIVE_TIMEOUT’ not set
[10:27:48.805] Environment variable ‘R_FUTURE_RESOLVED_TIMEOUT’ not set
[10:27:48.805] Environment variable ‘R_FUTURE_CLUSTER_RESOLVED_TIMEOUT’ not set
[10:27:48.805] Environment variable ‘R_FUTURE_MULTICORE_RESOLVED_TIMEOUT’ not set
[10:27:48.805] Environment variable ‘R_FUTURE_ONFUTURECONDITION_KEEPFUTURE’ not set
[10:27:48.806] Environment variable ‘R_FUTURE_RNG_ONMISUSE’ not set
[10:27:48.806] Environment variable ‘R_FUTURE_GLOBALENV_ONMISUSE’ not set
[10:27:48.808] Environment variable ‘R_FUTURE_WAIT_TIMEOUT’ not set
[10:27:48.808] Environment variable ‘R_FUTURE_WAIT_ALPHA’ not set
[10:27:48.808] Environment variable ‘R_FUTURE_ASSIGN_GLOBALS_EXCLUDE’ not set
[10:27:48.808] Environment variable ‘R_FUTURE_OUTPUT_WINDOWS_REENCODE’ not set
[10:27:48.808] Environment variable ‘R_FUTURE_GLOBALS_GLOBALSOF_LOCALS’ not set
[10:27:48.808] Environment variable ‘R_FUTURE_STATE_ONINVALID’ not set
[10:27:48.808] Environment variable ‘R_FUTURE_JOURNAL’ not set
[10:27:48.809] Environment variable ‘R_FUTURE_GLOBALS_KEEPWHERE’ not set
[10:27:48.809] R command-line argument: -p 1
[10:27:48.809]  => options(future.plan = sequential)
[10:27:48.809] R process uuid: 02bdf616-e82e-8268-20f6-d170051ac4ee
[10:27:48.809] Setting plan('default')
[10:27:48.809] plan(): Setting new future strategy stack:
[10:27:48.809] List of future strategies:
[10:27:48.809] 1. sequential:
[10:27:48.809]    - args: function (..., envir = parent.frame())
[10:27:48.809]    - tweaked: FALSE
[10:27:48.809]    - call: NULL
[10:27:48.810] plan(): nbrOfWorkers() = 1
> strategy <- plan("next")
> print(strategy)
sequential:
- args: function (..., envir = parent.frame())
- tweaked: FALSE
- call: NULL
> ## future.plan can be either a string or a future function
> default <- getOption("future.plan", "sequential")
> if (is.function(default)) default <- class(default)
> stopifnot(inherits(strategy, default))
> plan("default")
[10:27:48.810] plan(): Setting new future strategy stack:
[10:27:48.810] List of future strategies:
[10:27:48.810] 1. sequential:
[10:27:48.810]    - args: function (..., envir = parent.frame())
[10:27:48.810]    - tweaked: FALSE
[10:27:48.810]    - call: NULL
[10:27:48.811] plan(): nbrOfWorkers() = 1
> message("- .onLoad() w/ -p 1 ... DONE")
- .onLoad() w/ -p 1 ... DONE
> 
> message("- .onLoad() w/ --parallel=1 ...")
- .onLoad() w/ --parallel=1 ...
> plan("default")
[10:27:48.811] plan(): Setting new future strategy stack:
[10:27:48.811] List of future strategies:
[10:27:48.811] 1. sequential:
[10:27:48.811]    - args: function (..., envir = parent.frame())
[10:27:48.811]    - tweaked: FALSE
[10:27:48.811]    - call: NULL
[10:27:48.811] plan(): nbrOfWorkers() = 1
> options(future.plan = NULL, future.cmdargs = "-parallel=1")
> .onLoad(pkgname, pkgname)
[10:27:48.812] Future-specific environment variables:
- R_FUTURE_WAIT_INTERVAL=‘0.01’
[10:27:48.812] Environment variable ‘R_FUTURE_DEMO_MANDELBROT_REGION’ not set
[10:27:48.812] Environment variable ‘R_FUTURE_DEMO_MANDELBROT_NROW’ not set
[10:27:48.812] Environment variable ‘R_FUTURE_DEPRECATED_IGNORE’ not set
[10:27:48.812] Environment variable ‘R_FUTURE_DEPRECATED_DEFUNCT’ not set
[10:27:48.813] Environment variable ‘R_FUTURE_FORK_MULTITHREADING_ENABLE’ not set
[10:27:48.813] Environment variable ‘R_FUTURE_GLOBALS_MAXSIZE’ not set
[10:27:48.813] Environment variable ‘R_FUTURE_GLOBALS_ONMISSING’ not set
[10:27:48.813] Environment variable ‘R_FUTURE_GLOBALS_ONREFERENCE’ not set
[10:27:48.813] Environment variable ‘R_FUTURE_GLOBALS_METHOD’ not set
[10:27:48.813] Environment variable ‘R_FUTURE_GLOBALS_RESOLVE’ not set
[10:27:48.813] Environment variable ‘R_FUTURE_LAZY_ASSERTOWNER’ not set
[10:27:48.813] Environment variable ‘R_FUTURE_PLAN’ not set
[10:27:48.814] Environment variable ‘R_FUTURE_PLAN_DISALLOW’ not set
[10:27:48.814] Environment variable ‘R_FUTURE_PSOCK_RELAY_IMMEDIATE’ not set
[10:27:48.814] Environment variable ‘R_FUTURE_RELAY_IMMEDIATE’ not set
[10:27:48.814] Environment variable ‘R_FUTURE_RESOLVE_RECURSIVE’ not set
[10:27:48.814] Environment variable ‘R_FUTURE_ALIVE_TIMEOUT’ not set
[10:27:48.814] Environment variable ‘R_FUTURE_RESOLVED_TIMEOUT’ not set
[10:27:48.814] Environment variable ‘R_FUTURE_CLUSTER_RESOLVED_TIMEOUT’ not set
[10:27:48.814] Environment variable ‘R_FUTURE_MULTICORE_RESOLVED_TIMEOUT’ not set
[10:27:48.814] Environment variable ‘R_FUTURE_ONFUTURECONDITION_KEEPFUTURE’ not set
[10:27:48.815] Environment variable ‘R_FUTURE_RNG_ONMISUSE’ not set
[10:27:48.815] Environment variable ‘R_FUTURE_GLOBALENV_ONMISUSE’ not set
[10:27:48.815] Environment variable ‘R_FUTURE_WAIT_TIMEOUT’ not set
[10:27:48.815] Environment variable ‘R_FUTURE_WAIT_ALPHA’ not set
[10:27:48.815] Environment variable ‘R_FUTURE_ASSIGN_GLOBALS_EXCLUDE’ not set
[10:27:48.815] Environment variable ‘R_FUTURE_OUTPUT_WINDOWS_REENCODE’ not set
[10:27:48.815] Environment variable ‘R_FUTURE_GLOBALS_GLOBALSOF_LOCALS’ not set
[10:27:48.815] Environment variable ‘R_FUTURE_STATE_ONINVALID’ not set
[10:27:48.815] Environment variable ‘R_FUTURE_JOURNAL’ not set
[10:27:48.816] Environment variable ‘R_FUTURE_GLOBALS_KEEPWHERE’ not set
[10:27:48.816] R process uuid: 02bdf616-e82e-8268-20f6-d170051ac4ee
[10:27:48.816] Setting plan('default')
[10:27:48.816] plan(): Setting new future strategy stack:
[10:27:48.816] List of future strategies:
[10:27:48.816] 1. sequential:
[10:27:48.816]    - args: function (..., envir = parent.frame())
[10:27:48.816]    - tweaked: FALSE
[10:27:48.816]    - call: NULL
[10:27:48.816] plan(): nbrOfWorkers() = 1
> strategy <- plan("next")
> print(strategy)
sequential:
- args: function (..., envir = parent.frame())
- tweaked: FALSE
- call: NULL
> ## future.plan can be either a string or a future function
> default <- getOption("future.plan", "sequential")
> if (is.function(default)) default <- class(default)
> stopifnot(inherits(strategy, default))
> plan("default")
[10:27:48.817] plan(): Setting new future strategy stack:
[10:27:48.817] List of future strategies:
[10:27:48.817] 1. sequential:
[10:27:48.817]    - args: function (..., envir = parent.frame())
[10:27:48.817]    - tweaked: FALSE
[10:27:48.817]    - call: NULL
[10:27:48.817] plan(): nbrOfWorkers() = 1
> message("- .onLoad() w/ --parallel=1 ... DONE")
- .onLoad() w/ --parallel=1 ... DONE
> 
> message("- .onLoad() w/ -p 2 ...")
- .onLoad() w/ -p 2 ...
> options(future.plan = NULL, future.cmdargs = c("-p", 2))
> .onLoad(pkgname, pkgname)
[10:27:48.818] Future-specific environment variables:
- R_FUTURE_WAIT_INTERVAL=‘0.01’
[10:27:48.818] Environment variable ‘R_FUTURE_DEMO_MANDELBROT_REGION’ not set
[10:27:48.818] Environment variable ‘R_FUTURE_DEMO_MANDELBROT_NROW’ not set
[10:27:48.819] Environment variable ‘R_FUTURE_DEPRECATED_IGNORE’ not set
[10:27:48.819] Environment variable ‘R_FUTURE_DEPRECATED_DEFUNCT’ not set
[10:27:48.819] Environment variable ‘R_FUTURE_FORK_MULTITHREADING_ENABLE’ not set
[10:27:48.819] Environment variable ‘R_FUTURE_GLOBALS_MAXSIZE’ not set
[10:27:48.819] Environment variable ‘R_FUTURE_GLOBALS_ONMISSING’ not set
[10:27:48.819] Environment variable ‘R_FUTURE_GLOBALS_ONREFERENCE’ not set
[10:27:48.819] Environment variable ‘R_FUTURE_GLOBALS_METHOD’ not set
[10:27:48.819] Environment variable ‘R_FUTURE_GLOBALS_RESOLVE’ not set
[10:27:48.819] Environment variable ‘R_FUTURE_LAZY_ASSERTOWNER’ not set
[10:27:48.820] Environment variable ‘R_FUTURE_PLAN’ not set
[10:27:48.820] Environment variable ‘R_FUTURE_PLAN_DISALLOW’ not set
[10:27:48.820] Environment variable ‘R_FUTURE_PSOCK_RELAY_IMMEDIATE’ not set
[10:27:48.820] Environment variable ‘R_FUTURE_RELAY_IMMEDIATE’ not set
[10:27:48.820] Environment variable ‘R_FUTURE_RESOLVE_RECURSIVE’ not set
[10:27:48.820] Environment variable ‘R_FUTURE_ALIVE_TIMEOUT’ not set
[10:27:48.820] Environment variable ‘R_FUTURE_RESOLVED_TIMEOUT’ not set
[10:27:48.820] Environment variable ‘R_FUTURE_CLUSTER_RESOLVED_TIMEOUT’ not set
[10:27:48.820] Environment variable ‘R_FUTURE_MULTICORE_RESOLVED_TIMEOUT’ not set
[10:27:48.821] Environment variable ‘R_FUTURE_ONFUTURECONDITION_KEEPFUTURE’ not set
[10:27:48.821] Environment variable ‘R_FUTURE_RNG_ONMISUSE’ not set
[10:27:48.821] Environment variable ‘R_FUTURE_GLOBALENV_ONMISUSE’ not set
[10:27:48.821] Environment variable ‘R_FUTURE_WAIT_TIMEOUT’ not set
[10:27:48.821] Environment variable ‘R_FUTURE_WAIT_ALPHA’ not set
[10:27:48.821] Environment variable ‘R_FUTURE_ASSIGN_GLOBALS_EXCLUDE’ not set
[10:27:48.821] Environment variable ‘R_FUTURE_OUTPUT_WINDOWS_REENCODE’ not set
[10:27:48.821] Environment variable ‘R_FUTURE_GLOBALS_GLOBALSOF_LOCALS’ not set
[10:27:48.821] Environment variable ‘R_FUTURE_STATE_ONINVALID’ not set
[10:27:48.822] Environment variable ‘R_FUTURE_JOURNAL’ not set
[10:27:48.822] Environment variable ‘R_FUTURE_GLOBALS_KEEPWHERE’ not set
[10:27:48.822] R command-line argument: -p 2
[10:27:48.822]  => options(future.plan = tweak(multisession, workers = 2))
[10:27:48.825] R process uuid: 02bdf616-e82e-8268-20f6-d170051ac4ee
[10:27:48.825] Setting plan('default')
[10:27:48.825] plan(): Setting new future strategy stack:
[10:27:48.825] List of future strategies:
[10:27:48.825] 1. multisession:
[10:27:48.825]    - args: function (..., workers = 2L, envir = parent.frame())
[10:27:48.825]    - tweaked: TRUE
[10:27:48.825]    - call: NULL
[10:27:48.826] plan(): nbrOfWorkers() = 2
> strategy <- plan("next")
> print(strategy)
multisession:
- args: function (..., workers = 2L, envir = parent.frame())
- tweaked: TRUE
- call: NULL
> if (maxCores >= 2) {
+   ## Exactly which type of 'multiprocess' future depends on R_FUTURE_PLAN
+   stopifnot(inherits(strategy, "multiprocess"))
+ } else {
+   stopifnot(all(class(strategy) == class(strategy0)))
+ }
> plan("default")
[10:27:48.826] plan(): Setting new future strategy stack:
[10:27:48.826] List of future strategies:
[10:27:48.826] 1. multisession:
[10:27:48.826]    - args: function (..., workers = 2L, envir = parent.frame())
[10:27:48.826]    - tweaked: TRUE
[10:27:48.826]    - call: NULL
[10:27:48.826] plan(): plan_init() of ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ...
[10:27:48.827] multisession:
[10:27:48.827] - args: function (..., workers = 2L, envir = parent.frame())
[10:27:48.827] - tweaked: TRUE
[10:27:48.827] - call: NULL
[10:27:48.828] getGlobalsAndPackages() ...
[10:27:48.828] Not searching for globals
[10:27:48.829] - globals: [0] <none>
[10:27:48.829] getGlobalsAndPackages() ... DONE
[10:27:48.829] [local output] makeClusterPSOCK() ...
[10:27:48.865] [local output] Workers: [n = 2] ‘localhost’, ‘localhost’
[10:27:48.867] [local output] Base port: 11379
[10:27:48.867] [local output] Getting setup options for 2 cluster nodes ...
[10:27:48.867] [local output]  - Node 1 of 2 ...
[10:27:48.867] [local output] localMachine=TRUE => revtunnel=FALSE

[10:27:48.868] Testing if worker's PID can be inferred: ‘'/usr/local/lib/R/bin/Rscript' -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/RtmpthmAkr/worker.rank=1.parallelly.parent=92277.168752455b3cc.pid")), silent = TRUE)' -e 'file.exists("/tmp/RtmpthmAkr/worker.rank=1.parallelly.parent=92277.168752455b3cc.pid")'’
[10:27:49.062] - Possible to infer worker's PID: TRUE
[10:27:49.062] [local output] Rscript port: 11379

[10:27:49.062] [local output]  - Node 2 of 2 ...
[10:27:49.063] [local output] localMachine=TRUE => revtunnel=FALSE

[10:27:49.063] [local output] Rscript port: 11379

[10:27:49.064] [local output] Getting setup options for 2 cluster nodes ... done
[10:27:49.064] [local output]  - Parallel setup requested for some PSOCK nodes
[10:27:49.064] [local output] Setting up PSOCK nodes in parallel
[10:27:49.064] List of 36
[10:27:49.064]  $ worker          : chr "localhost"
[10:27:49.064]   ..- attr(*, "localhost")= logi TRUE
[10:27:49.064]  $ master          : chr "localhost"
[10:27:49.064]  $ port            : int 11379
[10:27:49.064]  $ connectTimeout  : num 120
[10:27:49.064]  $ timeout         : num 2592000
[10:27:49.064]  $ rscript         : chr "'/usr/local/lib/R/bin/Rscript'"
[10:27:49.064]  $ homogeneous     : logi TRUE
[10:27:49.064]  $ rscript_args    : chr "--default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),fi"| __truncated__
[10:27:49.064]  $ rscript_envs    : NULL
[10:27:49.064]  $ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[10:27:49.064]  $ rscript_startup : NULL
[10:27:49.064]  $ rscript_sh      : chr "sh"
[10:27:49.064]  $ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[10:27:49.064]  $ methods         : logi TRUE
[10:27:49.064]  $ socketOptions   : chr "no-delay"
[10:27:49.064]  $ useXDR          : logi FALSE
[10:27:49.064]  $ outfile         : chr "/dev/null"
[10:27:49.064]  $ renice          : int NA
[10:27:49.064]  $ rshcmd          : NULL
[10:27:49.064]  $ user            : chr(0) 
[10:27:49.064]  $ revtunnel       : logi FALSE
[10:27:49.064]  $ rshlogfile      : NULL
[10:27:49.064]  $ rshopts         : chr(0) 
[10:27:49.064]  $ rank            : int 1
[10:27:49.064]  $ manual          : logi FALSE
[10:27:49.064]  $ dryrun          : logi FALSE
[10:27:49.064]  $ quiet           : logi FALSE
[10:27:49.064]  $ setup_strategy  : chr "parallel"
[10:27:49.064]  $ local_cmd       : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[10:27:49.064]  $ pidfile         : chr "/tmp/RtmpthmAkr/worker.rank=1.parallelly.parent=92277.168752455b3cc.pid"
[10:27:49.064]  $ rshcmd_label    : NULL
[10:27:49.064]  $ rsh_call        : NULL
[10:27:49.064]  $ cmd             : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[10:27:49.064]  $ localMachine    : logi TRUE
[10:27:49.064]  $ make_fcn        :function (worker = getOption2("parallelly.localhost.hostname", "localhost"), 
[10:27:49.064]     master = NULL, port, connectTimeout = getOption2("parallelly.makeNodePSOCK.connectTimeout", 
[10:27:49.064]         2 * 60), timeout = getOption2("parallelly.makeNodePSOCK.timeout", 
[10:27:49.064]         30 * 24 * 60 * 60), rscript = NULL, homogeneous = NULL, rscript_args = NULL, 
[10:27:49.064]     rscript_envs = NULL, rscript_libs = NULL, rscript_startup = NULL, rscript_sh = c("auto", 
[10:27:49.064]         "cmd", "sh"), default_packages = c("datasets", "utils", "grDevices", 
[10:27:49.064]         "graphics", "stats", if (methods) "methods"), methods = TRUE, socketOptions = getOption2("parallelly.makeNodePSOCK.socketOptions", 
[10:27:49.064]         "no-delay"), useXDR = getOption2("parallelly.makeNodePSOCK.useXDR", 
[10:27:49.064]         FALSE), outfile = "/dev/null", renice = NA_integer_, rshcmd = getOption2("parallelly.makeNodePSOCK.rshcmd", 
[10:27:49.064]         NULL), user = NULL, revtunnel = NA, rshlogfile = NULL, rshopts = getOption2("parallelly.makeNodePSOCK.rshopts", 
[10:27:49.064]         NULL), rank = 1L, manual = FALSE, dryrun = FALSE, quiet = FALSE, 
[10:27:49.064]     setup_strategy = getOption2("parallelly.makeNodePSOCK.setup_strategy", 
[10:27:49.064]         "parallel"), action = c("launch", "options"), verbose = FALSE)  
[10:27:49.064]  $ arguments       :List of 28
[10:27:49.064]   ..$ worker          : chr "localhost"
[10:27:49.064]   ..$ master          : NULL
[10:27:49.064]   ..$ port            : int 11379
[10:27:49.064]   ..$ connectTimeout  : num 120
[10:27:49.064]   ..$ timeout         : num 2592000
[10:27:49.064]   ..$ rscript         : NULL
[10:27:49.064]   ..$ homogeneous     : NULL
[10:27:49.064]   ..$ rscript_args    : NULL
[10:27:49.064]   ..$ rscript_envs    : NULL
[10:27:49.064]   ..$ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[10:27:49.064]   ..$ rscript_startup : NULL
[10:27:49.064]   ..$ rscript_sh      : chr [1:3] "auto" "cmd" "sh"
[10:27:49.064]   ..$ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[10:27:49.064]   ..$ methods         : logi TRUE
[10:27:49.064]   ..$ socketOptions   : chr "no-delay"
[10:27:49.064]   ..$ useXDR          : logi FALSE
[10:27:49.064]   ..$ outfile         : chr "/dev/null"
[10:27:49.064]   ..$ renice          : int NA
[10:27:49.064]   ..$ rshcmd          : NULL
[10:27:49.064]   ..$ user            : NULL
[10:27:49.064]   ..$ revtunnel       : logi NA
[10:27:49.064]   ..$ rshlogfile      : NULL
[10:27:49.064]   ..$ rshopts         : NULL
[10:27:49.064]   ..$ rank            : int 1
[10:27:49.064]   ..$ manual          : logi FALSE
[10:27:49.064]   ..$ dryrun          : logi FALSE
[10:27:49.064]   ..$ quiet           : logi FALSE
[10:27:49.064]   ..$ setup_strategy  : chr "parallel"
[10:27:49.064]  - attr(*, "class")= chr [1:2] "makeNodePSOCKOptions" "makeNodeOptions"
[10:27:49.082] [local output] System call to launch all workers:
[10:27:49.082] [local output] '/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/RtmpthmAkr/worker.rank=1.parallelly.parent=92277.168752455b3cc.pid")), silent = TRUE)' -e 'options(socketOptions = "no-delay")' -e '.libPaths(c("/usr/local/lib/R/site-library","/usr/local/lib/R/library"))' -e 'workRSOCK <- tryCatch(parallel:::.workRSOCK, error=function(e) parallel:::.slaveRSOCK); workRSOCK()' MASTER=localhost PORT=11379 OUT=/dev/null TIMEOUT=2592000 XDR=FALSE SETUPTIMEOUT=120 SETUPSTRATEGY=parallel
[10:27:49.082] [local output] Starting PSOCK main server
[10:27:49.088] [local output] Workers launched
[10:27:49.088] [local output] Waiting for workers to connect back
[10:27:49.088]  - [local output] 0 workers out of 2 ready
[10:27:49.363]  - [local output] 0 workers out of 2 ready
[10:27:49.363]  - [local output] 1 workers out of 2 ready
[10:27:49.364]  - [local output] 1 workers out of 2 ready
[10:27:49.364]  - [local output] 2 workers out of 2 ready
[10:27:49.364] [local output] Launching of workers completed
[10:27:49.364] [local output] Collecting session information from workers
[10:27:49.365] [local output]  - Worker #1 of 2
[10:27:49.366] [local output]  - Worker #2 of 2
[10:27:49.366] [local output] makeClusterPSOCK() ... done
[10:27:49.380] Packages needed by the future expression (n = 0): <none>
[10:27:49.380] Packages needed by future strategies (n = 0): <none>
[10:27:49.381] {
[10:27:49.381]     {
[10:27:49.381]         {
[10:27:49.381]             ...future.startTime <- base::Sys.time()
[10:27:49.381]             {
[10:27:49.381]                 {
[10:27:49.381]                   {
[10:27:49.381]                     {
[10:27:49.381]                       base::local({
[10:27:49.381]                         has_future <- base::requireNamespace("future", 
[10:27:49.381]                           quietly = TRUE)
[10:27:49.381]                         if (has_future) {
[10:27:49.381]                           ns <- base::getNamespace("future")
[10:27:49.381]                           version <- ns[[".package"]][["version"]]
[10:27:49.381]                           if (is.null(version)) 
[10:27:49.381]                             version <- utils::packageVersion("future")
[10:27:49.381]                         }
[10:27:49.381]                         else {
[10:27:49.381]                           version <- NULL
[10:27:49.381]                         }
[10:27:49.381]                         if (!has_future || version < "1.8.0") {
[10:27:49.381]                           info <- base::c(r_version = base::gsub("R version ", 
[10:27:49.381]                             "", base::R.version$version.string), 
[10:27:49.381]                             platform = base::sprintf("%s (%s-bit)", 
[10:27:49.381]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:27:49.381]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[10:27:49.381]                               "release", "version")], collapse = " "), 
[10:27:49.381]                             hostname = base::Sys.info()[["nodename"]])
[10:27:49.381]                           info <- base::sprintf("%s: %s", base::names(info), 
[10:27:49.381]                             info)
[10:27:49.381]                           info <- base::paste(info, collapse = "; ")
[10:27:49.381]                           if (!has_future) {
[10:27:49.381]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:27:49.381]                               info)
[10:27:49.381]                           }
[10:27:49.381]                           else {
[10:27:49.381]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:27:49.381]                               info, version)
[10:27:49.381]                           }
[10:27:49.381]                           base::stop(msg)
[10:27:49.381]                         }
[10:27:49.381]                       })
[10:27:49.381]                     }
[10:27:49.381]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[10:27:49.381]                     base::options(mc.cores = 1L)
[10:27:49.381]                   }
[10:27:49.381]                   options(future.plan = NULL)
[10:27:49.381]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:27:49.381]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:27:49.381]                 }
[10:27:49.381]                 ...future.workdir <- getwd()
[10:27:49.381]             }
[10:27:49.381]             ...future.oldOptions <- base::as.list(base::.Options)
[10:27:49.381]             ...future.oldEnvVars <- base::Sys.getenv()
[10:27:49.381]         }
[10:27:49.381]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:27:49.381]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[10:27:49.381]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:27:49.381]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:27:49.381]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:27:49.381]             future.stdout.windows.reencode = NULL, width = 80L)
[10:27:49.381]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:27:49.381]             base::names(...future.oldOptions))
[10:27:49.381]     }
[10:27:49.381]     if (FALSE) {
[10:27:49.381]     }
[10:27:49.381]     else {
[10:27:49.381]         if (TRUE) {
[10:27:49.381]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:27:49.381]                 open = "w")
[10:27:49.381]         }
[10:27:49.381]         else {
[10:27:49.381]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:27:49.381]                 windows = "NUL", "/dev/null"), open = "w")
[10:27:49.381]         }
[10:27:49.381]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:27:49.381]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:27:49.381]             base::sink(type = "output", split = FALSE)
[10:27:49.381]             base::close(...future.stdout)
[10:27:49.381]         }, add = TRUE)
[10:27:49.381]     }
[10:27:49.381]     ...future.frame <- base::sys.nframe()
[10:27:49.381]     ...future.conditions <- base::list()
[10:27:49.381]     ...future.rng <- base::globalenv()$.Random.seed
[10:27:49.381]     if (FALSE) {
[10:27:49.381]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:27:49.381]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:27:49.381]     }
[10:27:49.381]     ...future.result <- base::tryCatch({
[10:27:49.381]         base::withCallingHandlers({
[10:27:49.381]             ...future.value <- base::withVisible(base::local({
[10:27:49.381]                 ...future.makeSendCondition <- base::local({
[10:27:49.381]                   sendCondition <- NULL
[10:27:49.381]                   function(frame = 1L) {
[10:27:49.381]                     if (is.function(sendCondition)) 
[10:27:49.381]                       return(sendCondition)
[10:27:49.381]                     ns <- getNamespace("parallel")
[10:27:49.381]                     if (exists("sendData", mode = "function", 
[10:27:49.381]                       envir = ns)) {
[10:27:49.381]                       parallel_sendData <- get("sendData", mode = "function", 
[10:27:49.381]                         envir = ns)
[10:27:49.381]                       envir <- sys.frame(frame)
[10:27:49.381]                       master <- NULL
[10:27:49.381]                       while (!identical(envir, .GlobalEnv) && 
[10:27:49.381]                         !identical(envir, emptyenv())) {
[10:27:49.381]                         if (exists("master", mode = "list", envir = envir, 
[10:27:49.381]                           inherits = FALSE)) {
[10:27:49.381]                           master <- get("master", mode = "list", 
[10:27:49.381]                             envir = envir, inherits = FALSE)
[10:27:49.381]                           if (inherits(master, c("SOCKnode", 
[10:27:49.381]                             "SOCK0node"))) {
[10:27:49.381]                             sendCondition <<- function(cond) {
[10:27:49.381]                               data <- list(type = "VALUE", value = cond, 
[10:27:49.381]                                 success = TRUE)
[10:27:49.381]                               parallel_sendData(master, data)
[10:27:49.381]                             }
[10:27:49.381]                             return(sendCondition)
[10:27:49.381]                           }
[10:27:49.381]                         }
[10:27:49.381]                         frame <- frame + 1L
[10:27:49.381]                         envir <- sys.frame(frame)
[10:27:49.381]                       }
[10:27:49.381]                     }
[10:27:49.381]                     sendCondition <<- function(cond) NULL
[10:27:49.381]                   }
[10:27:49.381]                 })
[10:27:49.381]                 withCallingHandlers({
[10:27:49.381]                   NA
[10:27:49.381]                 }, immediateCondition = function(cond) {
[10:27:49.381]                   sendCondition <- ...future.makeSendCondition()
[10:27:49.381]                   sendCondition(cond)
[10:27:49.381]                   muffleCondition <- function (cond, pattern = "^muffle") 
[10:27:49.381]                   {
[10:27:49.381]                     inherits <- base::inherits
[10:27:49.381]                     invokeRestart <- base::invokeRestart
[10:27:49.381]                     is.null <- base::is.null
[10:27:49.381]                     muffled <- FALSE
[10:27:49.381]                     if (inherits(cond, "message")) {
[10:27:49.381]                       muffled <- grepl(pattern, "muffleMessage")
[10:27:49.381]                       if (muffled) 
[10:27:49.381]                         invokeRestart("muffleMessage")
[10:27:49.381]                     }
[10:27:49.381]                     else if (inherits(cond, "warning")) {
[10:27:49.381]                       muffled <- grepl(pattern, "muffleWarning")
[10:27:49.381]                       if (muffled) 
[10:27:49.381]                         invokeRestart("muffleWarning")
[10:27:49.381]                     }
[10:27:49.381]                     else if (inherits(cond, "condition")) {
[10:27:49.381]                       if (!is.null(pattern)) {
[10:27:49.381]                         computeRestarts <- base::computeRestarts
[10:27:49.381]                         grepl <- base::grepl
[10:27:49.381]                         restarts <- computeRestarts(cond)
[10:27:49.381]                         for (restart in restarts) {
[10:27:49.381]                           name <- restart$name
[10:27:49.381]                           if (is.null(name)) 
[10:27:49.381]                             next
[10:27:49.381]                           if (!grepl(pattern, name)) 
[10:27:49.381]                             next
[10:27:49.381]                           invokeRestart(restart)
[10:27:49.381]                           muffled <- TRUE
[10:27:49.381]                           break
[10:27:49.381]                         }
[10:27:49.381]                       }
[10:27:49.381]                     }
[10:27:49.381]                     invisible(muffled)
[10:27:49.381]                   }
[10:27:49.381]                   muffleCondition(cond)
[10:27:49.381]                 })
[10:27:49.381]             }))
[10:27:49.381]             future::FutureResult(value = ...future.value$value, 
[10:27:49.381]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:27:49.381]                   ...future.rng), globalenv = if (FALSE) 
[10:27:49.381]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:27:49.381]                     ...future.globalenv.names))
[10:27:49.381]                 else NULL, started = ...future.startTime, version = "1.8")
[10:27:49.381]         }, condition = base::local({
[10:27:49.381]             c <- base::c
[10:27:49.381]             inherits <- base::inherits
[10:27:49.381]             invokeRestart <- base::invokeRestart
[10:27:49.381]             length <- base::length
[10:27:49.381]             list <- base::list
[10:27:49.381]             seq.int <- base::seq.int
[10:27:49.381]             signalCondition <- base::signalCondition
[10:27:49.381]             sys.calls <- base::sys.calls
[10:27:49.381]             `[[` <- base::`[[`
[10:27:49.381]             `+` <- base::`+`
[10:27:49.381]             `<<-` <- base::`<<-`
[10:27:49.381]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:27:49.381]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:27:49.381]                   3L)]
[10:27:49.381]             }
[10:27:49.381]             function(cond) {
[10:27:49.381]                 is_error <- inherits(cond, "error")
[10:27:49.381]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:27:49.381]                   NULL)
[10:27:49.381]                 if (is_error) {
[10:27:49.381]                   sessionInformation <- function() {
[10:27:49.381]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:27:49.381]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:27:49.381]                       search = base::search(), system = base::Sys.info())
[10:27:49.381]                   }
[10:27:49.381]                   ...future.conditions[[length(...future.conditions) + 
[10:27:49.381]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:27:49.381]                     cond$call), session = sessionInformation(), 
[10:27:49.381]                     timestamp = base::Sys.time(), signaled = 0L)
[10:27:49.381]                   signalCondition(cond)
[10:27:49.381]                 }
[10:27:49.381]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:27:49.381]                 "immediateCondition"))) {
[10:27:49.381]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:27:49.381]                   ...future.conditions[[length(...future.conditions) + 
[10:27:49.381]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:27:49.381]                   if (TRUE && !signal) {
[10:27:49.381]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:27:49.381]                     {
[10:27:49.381]                       inherits <- base::inherits
[10:27:49.381]                       invokeRestart <- base::invokeRestart
[10:27:49.381]                       is.null <- base::is.null
[10:27:49.381]                       muffled <- FALSE
[10:27:49.381]                       if (inherits(cond, "message")) {
[10:27:49.381]                         muffled <- grepl(pattern, "muffleMessage")
[10:27:49.381]                         if (muffled) 
[10:27:49.381]                           invokeRestart("muffleMessage")
[10:27:49.381]                       }
[10:27:49.381]                       else if (inherits(cond, "warning")) {
[10:27:49.381]                         muffled <- grepl(pattern, "muffleWarning")
[10:27:49.381]                         if (muffled) 
[10:27:49.381]                           invokeRestart("muffleWarning")
[10:27:49.381]                       }
[10:27:49.381]                       else if (inherits(cond, "condition")) {
[10:27:49.381]                         if (!is.null(pattern)) {
[10:27:49.381]                           computeRestarts <- base::computeRestarts
[10:27:49.381]                           grepl <- base::grepl
[10:27:49.381]                           restarts <- computeRestarts(cond)
[10:27:49.381]                           for (restart in restarts) {
[10:27:49.381]                             name <- restart$name
[10:27:49.381]                             if (is.null(name)) 
[10:27:49.381]                               next
[10:27:49.381]                             if (!grepl(pattern, name)) 
[10:27:49.381]                               next
[10:27:49.381]                             invokeRestart(restart)
[10:27:49.381]                             muffled <- TRUE
[10:27:49.381]                             break
[10:27:49.381]                           }
[10:27:49.381]                         }
[10:27:49.381]                       }
[10:27:49.381]                       invisible(muffled)
[10:27:49.381]                     }
[10:27:49.381]                     muffleCondition(cond, pattern = "^muffle")
[10:27:49.381]                   }
[10:27:49.381]                 }
[10:27:49.381]                 else {
[10:27:49.381]                   if (TRUE) {
[10:27:49.381]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:27:49.381]                     {
[10:27:49.381]                       inherits <- base::inherits
[10:27:49.381]                       invokeRestart <- base::invokeRestart
[10:27:49.381]                       is.null <- base::is.null
[10:27:49.381]                       muffled <- FALSE
[10:27:49.381]                       if (inherits(cond, "message")) {
[10:27:49.381]                         muffled <- grepl(pattern, "muffleMessage")
[10:27:49.381]                         if (muffled) 
[10:27:49.381]                           invokeRestart("muffleMessage")
[10:27:49.381]                       }
[10:27:49.381]                       else if (inherits(cond, "warning")) {
[10:27:49.381]                         muffled <- grepl(pattern, "muffleWarning")
[10:27:49.381]                         if (muffled) 
[10:27:49.381]                           invokeRestart("muffleWarning")
[10:27:49.381]                       }
[10:27:49.381]                       else if (inherits(cond, "condition")) {
[10:27:49.381]                         if (!is.null(pattern)) {
[10:27:49.381]                           computeRestarts <- base::computeRestarts
[10:27:49.381]                           grepl <- base::grepl
[10:27:49.381]                           restarts <- computeRestarts(cond)
[10:27:49.381]                           for (restart in restarts) {
[10:27:49.381]                             name <- restart$name
[10:27:49.381]                             if (is.null(name)) 
[10:27:49.381]                               next
[10:27:49.381]                             if (!grepl(pattern, name)) 
[10:27:49.381]                               next
[10:27:49.381]                             invokeRestart(restart)
[10:27:49.381]                             muffled <- TRUE
[10:27:49.381]                             break
[10:27:49.381]                           }
[10:27:49.381]                         }
[10:27:49.381]                       }
[10:27:49.381]                       invisible(muffled)
[10:27:49.381]                     }
[10:27:49.381]                     muffleCondition(cond, pattern = "^muffle")
[10:27:49.381]                   }
[10:27:49.381]                 }
[10:27:49.381]             }
[10:27:49.381]         }))
[10:27:49.381]     }, error = function(ex) {
[10:27:49.381]         base::structure(base::list(value = NULL, visible = NULL, 
[10:27:49.381]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:27:49.381]                 ...future.rng), started = ...future.startTime, 
[10:27:49.381]             finished = Sys.time(), session_uuid = NA_character_, 
[10:27:49.381]             version = "1.8"), class = "FutureResult")
[10:27:49.381]     }, finally = {
[10:27:49.381]         if (!identical(...future.workdir, getwd())) 
[10:27:49.381]             setwd(...future.workdir)
[10:27:49.381]         {
[10:27:49.381]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:27:49.381]                 ...future.oldOptions$nwarnings <- NULL
[10:27:49.381]             }
[10:27:49.381]             base::options(...future.oldOptions)
[10:27:49.381]             if (.Platform$OS.type == "windows") {
[10:27:49.381]                 old_names <- names(...future.oldEnvVars)
[10:27:49.381]                 envs <- base::Sys.getenv()
[10:27:49.381]                 names <- names(envs)
[10:27:49.381]                 common <- intersect(names, old_names)
[10:27:49.381]                 added <- setdiff(names, old_names)
[10:27:49.381]                 removed <- setdiff(old_names, names)
[10:27:49.381]                 changed <- common[...future.oldEnvVars[common] != 
[10:27:49.381]                   envs[common]]
[10:27:49.381]                 NAMES <- toupper(changed)
[10:27:49.381]                 args <- list()
[10:27:49.381]                 for (kk in seq_along(NAMES)) {
[10:27:49.381]                   name <- changed[[kk]]
[10:27:49.381]                   NAME <- NAMES[[kk]]
[10:27:49.381]                   if (name != NAME && is.element(NAME, old_names)) 
[10:27:49.381]                     next
[10:27:49.381]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:27:49.381]                 }
[10:27:49.381]                 NAMES <- toupper(added)
[10:27:49.381]                 for (kk in seq_along(NAMES)) {
[10:27:49.381]                   name <- added[[kk]]
[10:27:49.381]                   NAME <- NAMES[[kk]]
[10:27:49.381]                   if (name != NAME && is.element(NAME, old_names)) 
[10:27:49.381]                     next
[10:27:49.381]                   args[[name]] <- ""
[10:27:49.381]                 }
[10:27:49.381]                 NAMES <- toupper(removed)
[10:27:49.381]                 for (kk in seq_along(NAMES)) {
[10:27:49.381]                   name <- removed[[kk]]
[10:27:49.381]                   NAME <- NAMES[[kk]]
[10:27:49.381]                   if (name != NAME && is.element(NAME, old_names)) 
[10:27:49.381]                     next
[10:27:49.381]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:27:49.381]                 }
[10:27:49.381]                 if (length(args) > 0) 
[10:27:49.381]                   base::do.call(base::Sys.setenv, args = args)
[10:27:49.381]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:27:49.381]             }
[10:27:49.381]             else {
[10:27:49.381]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:27:49.381]             }
[10:27:49.381]             {
[10:27:49.381]                 if (base::length(...future.futureOptionsAdded) > 
[10:27:49.381]                   0L) {
[10:27:49.381]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:27:49.381]                   base::names(opts) <- ...future.futureOptionsAdded
[10:27:49.381]                   base::options(opts)
[10:27:49.381]                 }
[10:27:49.381]                 {
[10:27:49.381]                   {
[10:27:49.381]                     base::options(mc.cores = ...future.mc.cores.old)
[10:27:49.381]                     NULL
[10:27:49.381]                   }
[10:27:49.381]                   options(future.plan = function (..., workers = 2L, 
[10:27:49.381]                     envir = parent.frame()) 
[10:27:49.381]                   strategy(..., workers = workers, envir = envir))
[10:27:49.381]                   if (is.na(NA_character_)) 
[10:27:49.381]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:27:49.381]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:27:49.381]                   future::plan(list(function (..., workers = 2L, 
[10:27:49.381]                     envir = parent.frame()) 
[10:27:49.381]                   strategy(..., workers = workers, envir = envir)), 
[10:27:49.381]                     .cleanup = FALSE, .init = FALSE)
[10:27:49.381]                 }
[10:27:49.381]             }
[10:27:49.381]         }
[10:27:49.381]     })
[10:27:49.381]     if (TRUE) {
[10:27:49.381]         base::sink(type = "output", split = FALSE)
[10:27:49.381]         if (TRUE) {
[10:27:49.381]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:27:49.381]         }
[10:27:49.381]         else {
[10:27:49.381]             ...future.result["stdout"] <- base::list(NULL)
[10:27:49.381]         }
[10:27:49.381]         base::close(...future.stdout)
[10:27:49.381]         ...future.stdout <- NULL
[10:27:49.381]     }
[10:27:49.381]     ...future.result$conditions <- ...future.conditions
[10:27:49.381]     ...future.result$finished <- base::Sys.time()
[10:27:49.381]     ...future.result
[10:27:49.381] }
[10:27:49.436] MultisessionFuture started
[10:27:49.437] result() for ClusterFuture ...
[10:27:49.437] receiveMessageFromWorker() for ClusterFuture ...
[10:27:49.438] - Validating connection of MultisessionFuture
[10:27:49.471] - received message: FutureResult
[10:27:49.471] - Received FutureResult
[10:27:49.474] - Erased future from FutureRegistry
[10:27:49.474] result() for ClusterFuture ...
[10:27:49.475] - result already collected: FutureResult
[10:27:49.475] result() for ClusterFuture ... done
[10:27:49.475] receiveMessageFromWorker() for ClusterFuture ... done
[10:27:49.475] result() for ClusterFuture ... done
[10:27:49.475] result() for ClusterFuture ...
[10:27:49.475] - result already collected: FutureResult
[10:27:49.475] result() for ClusterFuture ... done
[10:27:49.475] plan(): plan_init() of ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ... DONE
[10:27:49.476] plan(): nbrOfWorkers() = 2
> message("- .onLoad() w/ -p 2 ... DONE")
- .onLoad() w/ -p 2 ... DONE
> 
> message("- .onLoad() w/ -p 0 ...")
- .onLoad() w/ -p 0 ...
> options(future.plan = NULL, future.cmdargs = c("-p", 0))
> .onLoad(pkgname, pkgname)
[10:27:49.477] Future-specific environment variables:
- R_FUTURE_WAIT_INTERVAL=‘0.01’
[10:27:49.477] Environment variable ‘R_FUTURE_DEMO_MANDELBROT_REGION’ not set
[10:27:49.477] Environment variable ‘R_FUTURE_DEMO_MANDELBROT_NROW’ not set
[10:27:49.477] Environment variable ‘R_FUTURE_DEPRECATED_IGNORE’ not set
[10:27:49.478] Environment variable ‘R_FUTURE_DEPRECATED_DEFUNCT’ not set
[10:27:49.478] Environment variable ‘R_FUTURE_FORK_MULTITHREADING_ENABLE’ not set
[10:27:49.478] Environment variable ‘R_FUTURE_GLOBALS_MAXSIZE’ not set
[10:27:49.478] Environment variable ‘R_FUTURE_GLOBALS_ONMISSING’ not set
[10:27:49.478] Environment variable ‘R_FUTURE_GLOBALS_ONREFERENCE’ not set
[10:27:49.478] Environment variable ‘R_FUTURE_GLOBALS_METHOD’ not set
[10:27:49.478] Environment variable ‘R_FUTURE_GLOBALS_RESOLVE’ not set
[10:27:49.479] Environment variable ‘R_FUTURE_LAZY_ASSERTOWNER’ not set
[10:27:49.479] Environment variable ‘R_FUTURE_PLAN’ not set
[10:27:49.479] Environment variable ‘R_FUTURE_PLAN_DISALLOW’ not set
[10:27:49.479] Environment variable ‘R_FUTURE_PSOCK_RELAY_IMMEDIATE’ not set
[10:27:49.479] Environment variable ‘R_FUTURE_RELAY_IMMEDIATE’ not set
[10:27:49.479] Environment variable ‘R_FUTURE_RESOLVE_RECURSIVE’ not set
[10:27:49.479] Environment variable ‘R_FUTURE_ALIVE_TIMEOUT’ not set
[10:27:49.479] Environment variable ‘R_FUTURE_RESOLVED_TIMEOUT’ not set
[10:27:49.480] Environment variable ‘R_FUTURE_CLUSTER_RESOLVED_TIMEOUT’ not set
[10:27:49.480] Environment variable ‘R_FUTURE_MULTICORE_RESOLVED_TIMEOUT’ not set
[10:27:49.480] Environment variable ‘R_FUTURE_ONFUTURECONDITION_KEEPFUTURE’ not set
[10:27:49.480] Environment variable ‘R_FUTURE_RNG_ONMISUSE’ not set
[10:27:49.480] Environment variable ‘R_FUTURE_GLOBALENV_ONMISUSE’ not set
[10:27:49.480] Environment variable ‘R_FUTURE_WAIT_TIMEOUT’ not set
[10:27:49.480] Environment variable ‘R_FUTURE_WAIT_ALPHA’ not set
[10:27:49.481] Environment variable ‘R_FUTURE_ASSIGN_GLOBALS_EXCLUDE’ not set
[10:27:49.481] Environment variable ‘R_FUTURE_OUTPUT_WINDOWS_REENCODE’ not set
[10:27:49.481] Environment variable ‘R_FUTURE_GLOBALS_GLOBALSOF_LOCALS’ not set
[10:27:49.481] Environment variable ‘R_FUTURE_STATE_ONINVALID’ not set
[10:27:49.481] Environment variable ‘R_FUTURE_JOURNAL’ not set
[10:27:49.481] Environment variable ‘R_FUTURE_GLOBALS_KEEPWHERE’ not set
Warning: future: Ignoring invalid number of processes specified in command-line option: -p 0
[10:27:49.482] R process uuid: 02bdf616-e82e-8268-20f6-d170051ac4ee
[10:27:49.482] Setting plan('default')
[10:27:49.482] plan(): Setting new future strategy stack:
[10:27:49.482] List of future strategies:
[10:27:49.482] 1. sequential:
[10:27:49.482]    - args: function (..., envir = parent.frame())
[10:27:49.482]    - tweaked: FALSE
[10:27:49.482]    - call: NULL
[10:27:49.483] plan(): nbrOfWorkers() = 1
> strategy <- plan("next")
> print(strategy)
sequential:
- args: function (..., envir = parent.frame())
- tweaked: FALSE
- call: NULL
> stopifnot(all(class(strategy) == class(strategy0)))
> plan("default")
[10:27:49.484] plan(): Setting new future strategy stack:
[10:27:49.484] List of future strategies:
[10:27:49.484] 1. sequential:
[10:27:49.484]    - args: function (..., envir = parent.frame())
[10:27:49.484]    - tweaked: FALSE
[10:27:49.484]    - call: NULL
[10:27:49.485] plan(): nbrOfWorkers() = 1
> message("- .onLoad() w/ -p 0 ... DONE")
- .onLoad() w/ -p 0 ... DONE
> 
> message("- .onLoad() w/ -p -1 ...")
- .onLoad() w/ -p -1 ...
> options(future.plan = NULL, future.cmdargs = c("-p", -1))
> .onLoad(pkgname, pkgname)
[10:27:49.486] Future-specific environment variables:
- R_FUTURE_WAIT_INTERVAL=‘0.01’
[10:27:49.486] Environment variable ‘R_FUTURE_DEMO_MANDELBROT_REGION’ not set
[10:27:49.486] Environment variable ‘R_FUTURE_DEMO_MANDELBROT_NROW’ not set
[10:27:49.486] Environment variable ‘R_FUTURE_DEPRECATED_IGNORE’ not set
[10:27:49.487] Environment variable ‘R_FUTURE_DEPRECATED_DEFUNCT’ not set
[10:27:49.487] Environment variable ‘R_FUTURE_FORK_MULTITHREADING_ENABLE’ not set
[10:27:49.487] Environment variable ‘R_FUTURE_GLOBALS_MAXSIZE’ not set
[10:27:49.487] Environment variable ‘R_FUTURE_GLOBALS_ONMISSING’ not set
[10:27:49.487] Environment variable ‘R_FUTURE_GLOBALS_ONREFERENCE’ not set
[10:27:49.487] Environment variable ‘R_FUTURE_GLOBALS_METHOD’ not set
[10:27:49.487] Environment variable ‘R_FUTURE_GLOBALS_RESOLVE’ not set
[10:27:49.488] Environment variable ‘R_FUTURE_LAZY_ASSERTOWNER’ not set
[10:27:49.488] Environment variable ‘R_FUTURE_PLAN’ not set
[10:27:49.488] Environment variable ‘R_FUTURE_PLAN_DISALLOW’ not set
[10:27:49.488] Environment variable ‘R_FUTURE_PSOCK_RELAY_IMMEDIATE’ not set
[10:27:49.488] Environment variable ‘R_FUTURE_RELAY_IMMEDIATE’ not set
[10:27:49.488] Environment variable ‘R_FUTURE_RESOLVE_RECURSIVE’ not set
[10:27:49.488] Environment variable ‘R_FUTURE_ALIVE_TIMEOUT’ not set
[10:27:49.488] Environment variable ‘R_FUTURE_RESOLVED_TIMEOUT’ not set
[10:27:49.489] Environment variable ‘R_FUTURE_CLUSTER_RESOLVED_TIMEOUT’ not set
[10:27:49.489] Environment variable ‘R_FUTURE_MULTICORE_RESOLVED_TIMEOUT’ not set
[10:27:49.489] Environment variable ‘R_FUTURE_ONFUTURECONDITION_KEEPFUTURE’ not set
[10:27:49.489] Environment variable ‘R_FUTURE_RNG_ONMISUSE’ not set
[10:27:49.489] Environment variable ‘R_FUTURE_GLOBALENV_ONMISUSE’ not set
[10:27:49.489] Environment variable ‘R_FUTURE_WAIT_TIMEOUT’ not set
[10:27:49.489] Environment variable ‘R_FUTURE_WAIT_ALPHA’ not set
[10:27:49.490] Environment variable ‘R_FUTURE_ASSIGN_GLOBALS_EXCLUDE’ not set
[10:27:49.490] Environment variable ‘R_FUTURE_OUTPUT_WINDOWS_REENCODE’ not set
[10:27:49.490] Environment variable ‘R_FUTURE_GLOBALS_GLOBALSOF_LOCALS’ not set
[10:27:49.490] Environment variable ‘R_FUTURE_STATE_ONINVALID’ not set
[10:27:49.490] Environment variable ‘R_FUTURE_JOURNAL’ not set
[10:27:49.490] Environment variable ‘R_FUTURE_GLOBALS_KEEPWHERE’ not set
Warning: future: Ignoring invalid number of processes specified in command-line option: -p -1
[10:27:49.491] R process uuid: 02bdf616-e82e-8268-20f6-d170051ac4ee
[10:27:49.491] Setting plan('default')
[10:27:49.491] plan(): Setting new future strategy stack:
[10:27:49.491] List of future strategies:
[10:27:49.491] 1. sequential:
[10:27:49.491]    - args: function (..., envir = parent.frame())
[10:27:49.491]    - tweaked: FALSE
[10:27:49.491]    - call: NULL
[10:27:49.492] plan(): nbrOfWorkers() = 1
> strategy <- plan("next")
> print(strategy)
sequential:
- args: function (..., envir = parent.frame())
- tweaked: FALSE
- call: NULL
> stopifnot(all(class(strategy) == class(strategy0)))
> plan("default")
[10:27:49.492] plan(): Setting new future strategy stack:
[10:27:49.492] List of future strategies:
[10:27:49.492] 1. sequential:
[10:27:49.492]    - args: function (..., envir = parent.frame())
[10:27:49.492]    - tweaked: FALSE
[10:27:49.492]    - call: NULL
[10:27:49.493] plan(): nbrOfWorkers() = 1
> message("- .onLoad() w/ -p -1 ... DONE")
- .onLoad() w/ -p -1 ... DONE
> 
> message("- .onLoad() w/ -p foo ...")
- .onLoad() w/ -p foo ...
> options(future.plan = NULL, future.cmdargs = c("-p", "foo"))
> .onLoad(pkgname, pkgname)
[10:27:49.494] Future-specific environment variables:
- R_FUTURE_WAIT_INTERVAL=‘0.01’
[10:27:49.494] Environment variable ‘R_FUTURE_DEMO_MANDELBROT_REGION’ not set
[10:27:49.495] Environment variable ‘R_FUTURE_DEMO_MANDELBROT_NROW’ not set
[10:27:49.495] Environment variable ‘R_FUTURE_DEPRECATED_IGNORE’ not set
[10:27:49.495] Environment variable ‘R_FUTURE_DEPRECATED_DEFUNCT’ not set
[10:27:49.495] Environment variable ‘R_FUTURE_FORK_MULTITHREADING_ENABLE’ not set
[10:27:49.495] Environment variable ‘R_FUTURE_GLOBALS_MAXSIZE’ not set
[10:27:49.496] Environment variable ‘R_FUTURE_GLOBALS_ONMISSING’ not set
[10:27:49.496] Environment variable ‘R_FUTURE_GLOBALS_ONREFERENCE’ not set
[10:27:49.496] Environment variable ‘R_FUTURE_GLOBALS_METHOD’ not set
[10:27:49.496] Environment variable ‘R_FUTURE_GLOBALS_RESOLVE’ not set
[10:27:49.496] Environment variable ‘R_FUTURE_LAZY_ASSERTOWNER’ not set
[10:27:49.496] Environment variable ‘R_FUTURE_PLAN’ not set
[10:27:49.496] Environment variable ‘R_FUTURE_PLAN_DISALLOW’ not set
[10:27:49.497] Environment variable ‘R_FUTURE_PSOCK_RELAY_IMMEDIATE’ not set
[10:27:49.497] Environment variable ‘R_FUTURE_RELAY_IMMEDIATE’ not set
[10:27:49.497] Environment variable ‘R_FUTURE_RESOLVE_RECURSIVE’ not set
[10:27:49.497] Environment variable ‘R_FUTURE_ALIVE_TIMEOUT’ not set
[10:27:49.497] Environment variable ‘R_FUTURE_RESOLVED_TIMEOUT’ not set
[10:27:49.497] Environment variable ‘R_FUTURE_CLUSTER_RESOLVED_TIMEOUT’ not set
[10:27:49.497] Environment variable ‘R_FUTURE_MULTICORE_RESOLVED_TIMEOUT’ not set
[10:27:49.498] Environment variable ‘R_FUTURE_ONFUTURECONDITION_KEEPFUTURE’ not set
[10:27:49.498] Environment variable ‘R_FUTURE_RNG_ONMISUSE’ not set
[10:27:49.498] Environment variable ‘R_FUTURE_GLOBALENV_ONMISUSE’ not set
[10:27:49.498] Environment variable ‘R_FUTURE_WAIT_TIMEOUT’ not set
[10:27:49.498] Environment variable ‘R_FUTURE_WAIT_ALPHA’ not set
[10:27:49.498] Environment variable ‘R_FUTURE_ASSIGN_GLOBALS_EXCLUDE’ not set
[10:27:49.498] Environment variable ‘R_FUTURE_OUTPUT_WINDOWS_REENCODE’ not set
[10:27:49.499] Environment variable ‘R_FUTURE_GLOBALS_GLOBALSOF_LOCALS’ not set
[10:27:49.499] Environment variable ‘R_FUTURE_STATE_ONINVALID’ not set
[10:27:49.499] Environment variable ‘R_FUTURE_JOURNAL’ not set
[10:27:49.499] Environment variable ‘R_FUTURE_GLOBALS_KEEPWHERE’ not set
Warning in parseCmdArgs() : NAs introduced by coercion
Warning: future: Ignoring invalid number of processes specified in command-line option: -p foo
[10:27:49.500] R process uuid: 02bdf616-e82e-8268-20f6-d170051ac4ee
[10:27:49.500] Setting plan('default')
[10:27:49.500] plan(): Setting new future strategy stack:
[10:27:49.500] List of future strategies:
[10:27:49.500] 1. sequential:
[10:27:49.500]    - args: function (..., envir = parent.frame())
[10:27:49.500]    - tweaked: FALSE
[10:27:49.500]    - call: NULL
[10:27:49.501] plan(): nbrOfWorkers() = 1
> strategy <- plan("next")
> print(strategy)
sequential:
- args: function (..., envir = parent.frame())
- tweaked: FALSE
- call: NULL
> stopifnot(all(class(strategy) == class(strategy0)))
> plan("default")
[10:27:49.502] plan(): Setting new future strategy stack:
[10:27:49.502] List of future strategies:
[10:27:49.502] 1. sequential:
[10:27:49.502]    - args: function (..., envir = parent.frame())
[10:27:49.502]    - tweaked: FALSE
[10:27:49.502]    - call: NULL
[10:27:49.502] plan(): nbrOfWorkers() = 1
> message("- .onLoad() w/ -p foo ... DONE")
- .onLoad() w/ -p foo ... DONE
> 
> message("- .onLoad() w/ R_FUTURE_PLAN = 'multisession' ...")
- .onLoad() w/ R_FUTURE_PLAN = 'multisession' ...
> Sys.setenv(R_FUTURE_PLAN = "multisession")
> options(future.plan = NULL, future.cmdargs = NULL)
> .onLoad(pkgname, pkgname)
[10:27:49.504] Future-specific environment variables:
- R_FUTURE_PLAN=‘multisession’
- R_FUTURE_WAIT_INTERVAL=‘0.01’
[10:27:49.504] Environment variable ‘R_FUTURE_DEMO_MANDELBROT_REGION’ not set
[10:27:49.504] Environment variable ‘R_FUTURE_DEMO_MANDELBROT_NROW’ not set
[10:27:49.505] Environment variable ‘R_FUTURE_DEPRECATED_IGNORE’ not set
[10:27:49.505] Environment variable ‘R_FUTURE_DEPRECATED_DEFUNCT’ not set
[10:27:49.505] Environment variable ‘R_FUTURE_FORK_MULTITHREADING_ENABLE’ not set
[10:27:49.505] Environment variable ‘R_FUTURE_GLOBALS_MAXSIZE’ not set
[10:27:49.505] Environment variable ‘R_FUTURE_GLOBALS_ONMISSING’ not set
[10:27:49.506] Environment variable ‘R_FUTURE_GLOBALS_ONREFERENCE’ not set
[10:27:49.506] Environment variable ‘R_FUTURE_GLOBALS_METHOD’ not set
[10:27:49.506] Environment variable ‘R_FUTURE_GLOBALS_RESOLVE’ not set
[10:27:49.506] Environment variable ‘R_FUTURE_LAZY_ASSERTOWNER’ not set
[10:27:49.506] R_FUTURE_PLAN=‘multisession’
[10:27:49.507] => options(“future.plan” = ‘multisession’) [n=1, mode=character]
[10:27:49.507] Environment variable ‘R_FUTURE_PLAN_DISALLOW’ not set
[10:27:49.507] Environment variable ‘R_FUTURE_PSOCK_RELAY_IMMEDIATE’ not set
[10:27:49.507] Environment variable ‘R_FUTURE_RELAY_IMMEDIATE’ not set
[10:27:49.507] Environment variable ‘R_FUTURE_RESOLVE_RECURSIVE’ not set
[10:27:49.508] Environment variable ‘R_FUTURE_ALIVE_TIMEOUT’ not set
[10:27:49.508] Environment variable ‘R_FUTURE_RESOLVED_TIMEOUT’ not set
[10:27:49.508] Environment variable ‘R_FUTURE_CLUSTER_RESOLVED_TIMEOUT’ not set
[10:27:49.508] Environment variable ‘R_FUTURE_MULTICORE_RESOLVED_TIMEOUT’ not set
[10:27:49.508] Environment variable ‘R_FUTURE_ONFUTURECONDITION_KEEPFUTURE’ not set
[10:27:49.508] Environment variable ‘R_FUTURE_RNG_ONMISUSE’ not set
[10:27:49.508] Environment variable ‘R_FUTURE_GLOBALENV_ONMISUSE’ not set
[10:27:49.509] Environment variable ‘R_FUTURE_WAIT_TIMEOUT’ not set
[10:27:49.509] Environment variable ‘R_FUTURE_WAIT_ALPHA’ not set
[10:27:49.509] Environment variable ‘R_FUTURE_ASSIGN_GLOBALS_EXCLUDE’ not set
[10:27:49.509] Environment variable ‘R_FUTURE_OUTPUT_WINDOWS_REENCODE’ not set
[10:27:49.509] Environment variable ‘R_FUTURE_GLOBALS_GLOBALSOF_LOCALS’ not set
[10:27:49.509] Environment variable ‘R_FUTURE_STATE_ONINVALID’ not set
[10:27:49.509] Environment variable ‘R_FUTURE_JOURNAL’ not set
[10:27:49.510] Environment variable ‘R_FUTURE_GLOBALS_KEEPWHERE’ not set
[10:27:49.510] Option 'future.plan' = ‘multisession’
[10:27:49.510] R process uuid: 02bdf616-e82e-8268-20f6-d170051ac4ee
[10:27:49.510] Setting plan('default')
[10:27:49.510] plan(): Setting new future strategy stack:
[10:27:49.510] List of future strategies:
[10:27:49.510] 1. multisession:
[10:27:49.510]    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[10:27:49.510]    - tweaked: FALSE
[10:27:49.510]    - call: plan("default", .init = FALSE)
[10:27:49.515] plan(): nbrOfWorkers() = 2
> strategy <- plan("next")
> print(strategy)
multisession:
- args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
- tweaked: FALSE
- call: plan("default", .init = FALSE)
> stopifnot(inherits(strategy, "multisession"))
> plan("default")
[10:27:49.515] plan(): Setting new future strategy stack:
[10:27:49.515] List of future strategies:
[10:27:49.515] 1. multisession:
[10:27:49.515]    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[10:27:49.515]    - tweaked: FALSE
[10:27:49.515]    - call: plan("default")
[10:27:49.518] plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ...
[10:27:49.518] multisession:
[10:27:49.518] - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[10:27:49.518] - tweaked: FALSE
[10:27:49.518] - call: plan("default")
[10:27:49.522] getGlobalsAndPackages() ...
[10:27:49.522] Not searching for globals
[10:27:49.522] - globals: [0] <none>
[10:27:49.523] getGlobalsAndPackages() ... DONE
[10:27:49.523] [local output] makeClusterPSOCK() ...
[10:27:49.526] [local output] Workers: [n = 2] ‘localhost’, ‘localhost’
[10:27:49.527] [local output] Base port: 11440
[10:27:49.527] [local output] Getting setup options for 2 cluster nodes ...
[10:27:49.527] [local output]  - Node 1 of 2 ...
[10:27:49.527] [local output] localMachine=TRUE => revtunnel=FALSE

[10:27:49.528] [local output] Rscript port: 11440

[10:27:49.528] [local output]  - Node 2 of 2 ...
[10:27:49.529] [local output] localMachine=TRUE => revtunnel=FALSE

[10:27:49.529] [local output] Rscript port: 11440

[10:27:49.530] [local output] Getting setup options for 2 cluster nodes ... done
[10:27:49.530] [local output]  - Parallel setup requested for some PSOCK nodes
[10:27:49.530] [local output] Setting up PSOCK nodes in parallel
[10:27:49.530] List of 36
[10:27:49.530]  $ worker          : chr "localhost"
[10:27:49.530]   ..- attr(*, "localhost")= logi TRUE
[10:27:49.530]  $ master          : chr "localhost"
[10:27:49.530]  $ port            : int 11440
[10:27:49.530]  $ connectTimeout  : num 120
[10:27:49.530]  $ timeout         : num 2592000
[10:27:49.530]  $ rscript         : chr "'/usr/local/lib/R/bin/Rscript'"
[10:27:49.530]  $ homogeneous     : logi TRUE
[10:27:49.530]  $ rscript_args    : chr "--default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),fi"| __truncated__
[10:27:49.530]  $ rscript_envs    : NULL
[10:27:49.530]  $ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[10:27:49.530]  $ rscript_startup : NULL
[10:27:49.530]  $ rscript_sh      : chr "sh"
[10:27:49.530]  $ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[10:27:49.530]  $ methods         : logi TRUE
[10:27:49.530]  $ socketOptions   : chr "no-delay"
[10:27:49.530]  $ useXDR          : logi FALSE
[10:27:49.530]  $ outfile         : chr "/dev/null"
[10:27:49.530]  $ renice          : int NA
[10:27:49.530]  $ rshcmd          : NULL
[10:27:49.530]  $ user            : chr(0) 
[10:27:49.530]  $ revtunnel       : logi FALSE
[10:27:49.530]  $ rshlogfile      : NULL
[10:27:49.530]  $ rshopts         : chr(0) 
[10:27:49.530]  $ rank            : int 1
[10:27:49.530]  $ manual          : logi FALSE
[10:27:49.530]  $ dryrun          : logi FALSE
[10:27:49.530]  $ quiet           : logi FALSE
[10:27:49.530]  $ setup_strategy  : chr "parallel"
[10:27:49.530]  $ local_cmd       : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[10:27:49.530]  $ pidfile         : chr "/tmp/RtmpthmAkr/worker.rank=1.parallelly.parent=92277.1687560d7d201.pid"
[10:27:49.530]  $ rshcmd_label    : NULL
[10:27:49.530]  $ rsh_call        : NULL
[10:27:49.530]  $ cmd             : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[10:27:49.530]  $ localMachine    : logi TRUE
[10:27:49.530]  $ make_fcn        :function (worker = getOption2("parallelly.localhost.hostname", "localhost"), 
[10:27:49.530]     master = NULL, port, connectTimeout = getOption2("parallelly.makeNodePSOCK.connectTimeout", 
[10:27:49.530]         2 * 60), timeout = getOption2("parallelly.makeNodePSOCK.timeout", 
[10:27:49.530]         30 * 24 * 60 * 60), rscript = NULL, homogeneous = NULL, rscript_args = NULL, 
[10:27:49.530]     rscript_envs = NULL, rscript_libs = NULL, rscript_startup = NULL, rscript_sh = c("auto", 
[10:27:49.530]         "cmd", "sh"), default_packages = c("datasets", "utils", "grDevices", 
[10:27:49.530]         "graphics", "stats", if (methods) "methods"), methods = TRUE, socketOptions = getOption2("parallelly.makeNodePSOCK.socketOptions", 
[10:27:49.530]         "no-delay"), useXDR = getOption2("parallelly.makeNodePSOCK.useXDR", 
[10:27:49.530]         FALSE), outfile = "/dev/null", renice = NA_integer_, rshcmd = getOption2("parallelly.makeNodePSOCK.rshcmd", 
[10:27:49.530]         NULL), user = NULL, revtunnel = NA, rshlogfile = NULL, rshopts = getOption2("parallelly.makeNodePSOCK.rshopts", 
[10:27:49.530]         NULL), rank = 1L, manual = FALSE, dryrun = FALSE, quiet = FALSE, 
[10:27:49.530]     setup_strategy = getOption2("parallelly.makeNodePSOCK.setup_strategy", 
[10:27:49.530]         "parallel"), action = c("launch", "options"), verbose = FALSE)  
[10:27:49.530]  $ arguments       :List of 28
[10:27:49.530]   ..$ worker          : chr "localhost"
[10:27:49.530]   ..$ master          : NULL
[10:27:49.530]   ..$ port            : int 11440
[10:27:49.530]   ..$ connectTimeout  : num 120
[10:27:49.530]   ..$ timeout         : num 2592000
[10:27:49.530]   ..$ rscript         : NULL
[10:27:49.530]   ..$ homogeneous     : NULL
[10:27:49.530]   ..$ rscript_args    : NULL
[10:27:49.530]   ..$ rscript_envs    : NULL
[10:27:49.530]   ..$ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[10:27:49.530]   ..$ rscript_startup : NULL
[10:27:49.530]   ..$ rscript_sh      : chr [1:3] "auto" "cmd" "sh"
[10:27:49.530]   ..$ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[10:27:49.530]   ..$ methods         : logi TRUE
[10:27:49.530]   ..$ socketOptions   : chr "no-delay"
[10:27:49.530]   ..$ useXDR          : logi FALSE
[10:27:49.530]   ..$ outfile         : chr "/dev/null"
[10:27:49.530]   ..$ renice          : int NA
[10:27:49.530]   ..$ rshcmd          : NULL
[10:27:49.530]   ..$ user            : NULL
[10:27:49.530]   ..$ revtunnel       : logi NA
[10:27:49.530]   ..$ rshlogfile      : NULL
[10:27:49.530]   ..$ rshopts         : NULL
[10:27:49.530]   ..$ rank            : int 1
[10:27:49.530]   ..$ manual          : logi FALSE
[10:27:49.530]   ..$ dryrun          : logi FALSE
[10:27:49.530]   ..$ quiet           : logi FALSE
[10:27:49.530]   ..$ setup_strategy  : chr "parallel"
[10:27:49.530]  - attr(*, "class")= chr [1:2] "makeNodePSOCKOptions" "makeNodeOptions"
[10:27:49.547] [local output] System call to launch all workers:
[10:27:49.547] [local output] '/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/RtmpthmAkr/worker.rank=1.parallelly.parent=92277.1687560d7d201.pid")), silent = TRUE)' -e 'options(socketOptions = "no-delay")' -e '.libPaths(c("/usr/local/lib/R/site-library","/usr/local/lib/R/library"))' -e 'workRSOCK <- tryCatch(parallel:::.workRSOCK, error=function(e) parallel:::.slaveRSOCK); workRSOCK()' MASTER=localhost PORT=11440 OUT=/dev/null TIMEOUT=2592000 XDR=FALSE SETUPTIMEOUT=120 SETUPSTRATEGY=parallel
[10:27:49.547] [local output] Starting PSOCK main server
[10:27:49.549] [local output] Workers launched
[10:27:49.549] [local output] Waiting for workers to connect back
[10:27:49.549]  - [local output] 0 workers out of 2 ready
[10:27:49.827]  - [local output] 0 workers out of 2 ready
[10:27:49.827]  - [local output] 1 workers out of 2 ready
[10:27:49.828]  - [local output] 2 workers out of 2 ready
[10:27:49.828] [local output] Launching of workers completed
[10:27:49.828] [local output] Collecting session information from workers
[10:27:49.828] [local output]  - Worker #1 of 2
[10:27:49.829] [local output]  - Worker #2 of 2
[10:27:49.829] [local output] makeClusterPSOCK() ... done
[10:27:49.841] Packages needed by the future expression (n = 0): <none>
[10:27:49.841] Packages needed by future strategies (n = 0): <none>
[10:27:49.842] {
[10:27:49.842]     {
[10:27:49.842]         {
[10:27:49.842]             ...future.startTime <- base::Sys.time()
[10:27:49.842]             {
[10:27:49.842]                 {
[10:27:49.842]                   {
[10:27:49.842]                     {
[10:27:49.842]                       base::local({
[10:27:49.842]                         has_future <- base::requireNamespace("future", 
[10:27:49.842]                           quietly = TRUE)
[10:27:49.842]                         if (has_future) {
[10:27:49.842]                           ns <- base::getNamespace("future")
[10:27:49.842]                           version <- ns[[".package"]][["version"]]
[10:27:49.842]                           if (is.null(version)) 
[10:27:49.842]                             version <- utils::packageVersion("future")
[10:27:49.842]                         }
[10:27:49.842]                         else {
[10:27:49.842]                           version <- NULL
[10:27:49.842]                         }
[10:27:49.842]                         if (!has_future || version < "1.8.0") {
[10:27:49.842]                           info <- base::c(r_version = base::gsub("R version ", 
[10:27:49.842]                             "", base::R.version$version.string), 
[10:27:49.842]                             platform = base::sprintf("%s (%s-bit)", 
[10:27:49.842]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:27:49.842]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[10:27:49.842]                               "release", "version")], collapse = " "), 
[10:27:49.842]                             hostname = base::Sys.info()[["nodename"]])
[10:27:49.842]                           info <- base::sprintf("%s: %s", base::names(info), 
[10:27:49.842]                             info)
[10:27:49.842]                           info <- base::paste(info, collapse = "; ")
[10:27:49.842]                           if (!has_future) {
[10:27:49.842]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:27:49.842]                               info)
[10:27:49.842]                           }
[10:27:49.842]                           else {
[10:27:49.842]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:27:49.842]                               info, version)
[10:27:49.842]                           }
[10:27:49.842]                           base::stop(msg)
[10:27:49.842]                         }
[10:27:49.842]                       })
[10:27:49.842]                     }
[10:27:49.842]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[10:27:49.842]                     base::options(mc.cores = 1L)
[10:27:49.842]                   }
[10:27:49.842]                   options(future.plan = NULL)
[10:27:49.842]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:27:49.842]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:27:49.842]                 }
[10:27:49.842]                 ...future.workdir <- getwd()
[10:27:49.842]             }
[10:27:49.842]             ...future.oldOptions <- base::as.list(base::.Options)
[10:27:49.842]             ...future.oldEnvVars <- base::Sys.getenv()
[10:27:49.842]         }
[10:27:49.842]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:27:49.842]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[10:27:49.842]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:27:49.842]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:27:49.842]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:27:49.842]             future.stdout.windows.reencode = NULL, width = 80L)
[10:27:49.842]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:27:49.842]             base::names(...future.oldOptions))
[10:27:49.842]     }
[10:27:49.842]     if (FALSE) {
[10:27:49.842]     }
[10:27:49.842]     else {
[10:27:49.842]         if (TRUE) {
[10:27:49.842]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:27:49.842]                 open = "w")
[10:27:49.842]         }
[10:27:49.842]         else {
[10:27:49.842]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:27:49.842]                 windows = "NUL", "/dev/null"), open = "w")
[10:27:49.842]         }
[10:27:49.842]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:27:49.842]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:27:49.842]             base::sink(type = "output", split = FALSE)
[10:27:49.842]             base::close(...future.stdout)
[10:27:49.842]         }, add = TRUE)
[10:27:49.842]     }
[10:27:49.842]     ...future.frame <- base::sys.nframe()
[10:27:49.842]     ...future.conditions <- base::list()
[10:27:49.842]     ...future.rng <- base::globalenv()$.Random.seed
[10:27:49.842]     if (FALSE) {
[10:27:49.842]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:27:49.842]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:27:49.842]     }
[10:27:49.842]     ...future.result <- base::tryCatch({
[10:27:49.842]         base::withCallingHandlers({
[10:27:49.842]             ...future.value <- base::withVisible(base::local({
[10:27:49.842]                 ...future.makeSendCondition <- base::local({
[10:27:49.842]                   sendCondition <- NULL
[10:27:49.842]                   function(frame = 1L) {
[10:27:49.842]                     if (is.function(sendCondition)) 
[10:27:49.842]                       return(sendCondition)
[10:27:49.842]                     ns <- getNamespace("parallel")
[10:27:49.842]                     if (exists("sendData", mode = "function", 
[10:27:49.842]                       envir = ns)) {
[10:27:49.842]                       parallel_sendData <- get("sendData", mode = "function", 
[10:27:49.842]                         envir = ns)
[10:27:49.842]                       envir <- sys.frame(frame)
[10:27:49.842]                       master <- NULL
[10:27:49.842]                       while (!identical(envir, .GlobalEnv) && 
[10:27:49.842]                         !identical(envir, emptyenv())) {
[10:27:49.842]                         if (exists("master", mode = "list", envir = envir, 
[10:27:49.842]                           inherits = FALSE)) {
[10:27:49.842]                           master <- get("master", mode = "list", 
[10:27:49.842]                             envir = envir, inherits = FALSE)
[10:27:49.842]                           if (inherits(master, c("SOCKnode", 
[10:27:49.842]                             "SOCK0node"))) {
[10:27:49.842]                             sendCondition <<- function(cond) {
[10:27:49.842]                               data <- list(type = "VALUE", value = cond, 
[10:27:49.842]                                 success = TRUE)
[10:27:49.842]                               parallel_sendData(master, data)
[10:27:49.842]                             }
[10:27:49.842]                             return(sendCondition)
[10:27:49.842]                           }
[10:27:49.842]                         }
[10:27:49.842]                         frame <- frame + 1L
[10:27:49.842]                         envir <- sys.frame(frame)
[10:27:49.842]                       }
[10:27:49.842]                     }
[10:27:49.842]                     sendCondition <<- function(cond) NULL
[10:27:49.842]                   }
[10:27:49.842]                 })
[10:27:49.842]                 withCallingHandlers({
[10:27:49.842]                   NA
[10:27:49.842]                 }, immediateCondition = function(cond) {
[10:27:49.842]                   sendCondition <- ...future.makeSendCondition()
[10:27:49.842]                   sendCondition(cond)
[10:27:49.842]                   muffleCondition <- function (cond, pattern = "^muffle") 
[10:27:49.842]                   {
[10:27:49.842]                     inherits <- base::inherits
[10:27:49.842]                     invokeRestart <- base::invokeRestart
[10:27:49.842]                     is.null <- base::is.null
[10:27:49.842]                     muffled <- FALSE
[10:27:49.842]                     if (inherits(cond, "message")) {
[10:27:49.842]                       muffled <- grepl(pattern, "muffleMessage")
[10:27:49.842]                       if (muffled) 
[10:27:49.842]                         invokeRestart("muffleMessage")
[10:27:49.842]                     }
[10:27:49.842]                     else if (inherits(cond, "warning")) {
[10:27:49.842]                       muffled <- grepl(pattern, "muffleWarning")
[10:27:49.842]                       if (muffled) 
[10:27:49.842]                         invokeRestart("muffleWarning")
[10:27:49.842]                     }
[10:27:49.842]                     else if (inherits(cond, "condition")) {
[10:27:49.842]                       if (!is.null(pattern)) {
[10:27:49.842]                         computeRestarts <- base::computeRestarts
[10:27:49.842]                         grepl <- base::grepl
[10:27:49.842]                         restarts <- computeRestarts(cond)
[10:27:49.842]                         for (restart in restarts) {
[10:27:49.842]                           name <- restart$name
[10:27:49.842]                           if (is.null(name)) 
[10:27:49.842]                             next
[10:27:49.842]                           if (!grepl(pattern, name)) 
[10:27:49.842]                             next
[10:27:49.842]                           invokeRestart(restart)
[10:27:49.842]                           muffled <- TRUE
[10:27:49.842]                           break
[10:27:49.842]                         }
[10:27:49.842]                       }
[10:27:49.842]                     }
[10:27:49.842]                     invisible(muffled)
[10:27:49.842]                   }
[10:27:49.842]                   muffleCondition(cond)
[10:27:49.842]                 })
[10:27:49.842]             }))
[10:27:49.842]             future::FutureResult(value = ...future.value$value, 
[10:27:49.842]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:27:49.842]                   ...future.rng), globalenv = if (FALSE) 
[10:27:49.842]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:27:49.842]                     ...future.globalenv.names))
[10:27:49.842]                 else NULL, started = ...future.startTime, version = "1.8")
[10:27:49.842]         }, condition = base::local({
[10:27:49.842]             c <- base::c
[10:27:49.842]             inherits <- base::inherits
[10:27:49.842]             invokeRestart <- base::invokeRestart
[10:27:49.842]             length <- base::length
[10:27:49.842]             list <- base::list
[10:27:49.842]             seq.int <- base::seq.int
[10:27:49.842]             signalCondition <- base::signalCondition
[10:27:49.842]             sys.calls <- base::sys.calls
[10:27:49.842]             `[[` <- base::`[[`
[10:27:49.842]             `+` <- base::`+`
[10:27:49.842]             `<<-` <- base::`<<-`
[10:27:49.842]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:27:49.842]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:27:49.842]                   3L)]
[10:27:49.842]             }
[10:27:49.842]             function(cond) {
[10:27:49.842]                 is_error <- inherits(cond, "error")
[10:27:49.842]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:27:49.842]                   NULL)
[10:27:49.842]                 if (is_error) {
[10:27:49.842]                   sessionInformation <- function() {
[10:27:49.842]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:27:49.842]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:27:49.842]                       search = base::search(), system = base::Sys.info())
[10:27:49.842]                   }
[10:27:49.842]                   ...future.conditions[[length(...future.conditions) + 
[10:27:49.842]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:27:49.842]                     cond$call), session = sessionInformation(), 
[10:27:49.842]                     timestamp = base::Sys.time(), signaled = 0L)
[10:27:49.842]                   signalCondition(cond)
[10:27:49.842]                 }
[10:27:49.842]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:27:49.842]                 "immediateCondition"))) {
[10:27:49.842]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:27:49.842]                   ...future.conditions[[length(...future.conditions) + 
[10:27:49.842]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:27:49.842]                   if (TRUE && !signal) {
[10:27:49.842]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:27:49.842]                     {
[10:27:49.842]                       inherits <- base::inherits
[10:27:49.842]                       invokeRestart <- base::invokeRestart
[10:27:49.842]                       is.null <- base::is.null
[10:27:49.842]                       muffled <- FALSE
[10:27:49.842]                       if (inherits(cond, "message")) {
[10:27:49.842]                         muffled <- grepl(pattern, "muffleMessage")
[10:27:49.842]                         if (muffled) 
[10:27:49.842]                           invokeRestart("muffleMessage")
[10:27:49.842]                       }
[10:27:49.842]                       else if (inherits(cond, "warning")) {
[10:27:49.842]                         muffled <- grepl(pattern, "muffleWarning")
[10:27:49.842]                         if (muffled) 
[10:27:49.842]                           invokeRestart("muffleWarning")
[10:27:49.842]                       }
[10:27:49.842]                       else if (inherits(cond, "condition")) {
[10:27:49.842]                         if (!is.null(pattern)) {
[10:27:49.842]                           computeRestarts <- base::computeRestarts
[10:27:49.842]                           grepl <- base::grepl
[10:27:49.842]                           restarts <- computeRestarts(cond)
[10:27:49.842]                           for (restart in restarts) {
[10:27:49.842]                             name <- restart$name
[10:27:49.842]                             if (is.null(name)) 
[10:27:49.842]                               next
[10:27:49.842]                             if (!grepl(pattern, name)) 
[10:27:49.842]                               next
[10:27:49.842]                             invokeRestart(restart)
[10:27:49.842]                             muffled <- TRUE
[10:27:49.842]                             break
[10:27:49.842]                           }
[10:27:49.842]                         }
[10:27:49.842]                       }
[10:27:49.842]                       invisible(muffled)
[10:27:49.842]                     }
[10:27:49.842]                     muffleCondition(cond, pattern = "^muffle")
[10:27:49.842]                   }
[10:27:49.842]                 }
[10:27:49.842]                 else {
[10:27:49.842]                   if (TRUE) {
[10:27:49.842]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:27:49.842]                     {
[10:27:49.842]                       inherits <- base::inherits
[10:27:49.842]                       invokeRestart <- base::invokeRestart
[10:27:49.842]                       is.null <- base::is.null
[10:27:49.842]                       muffled <- FALSE
[10:27:49.842]                       if (inherits(cond, "message")) {
[10:27:49.842]                         muffled <- grepl(pattern, "muffleMessage")
[10:27:49.842]                         if (muffled) 
[10:27:49.842]                           invokeRestart("muffleMessage")
[10:27:49.842]                       }
[10:27:49.842]                       else if (inherits(cond, "warning")) {
[10:27:49.842]                         muffled <- grepl(pattern, "muffleWarning")
[10:27:49.842]                         if (muffled) 
[10:27:49.842]                           invokeRestart("muffleWarning")
[10:27:49.842]                       }
[10:27:49.842]                       else if (inherits(cond, "condition")) {
[10:27:49.842]                         if (!is.null(pattern)) {
[10:27:49.842]                           computeRestarts <- base::computeRestarts
[10:27:49.842]                           grepl <- base::grepl
[10:27:49.842]                           restarts <- computeRestarts(cond)
[10:27:49.842]                           for (restart in restarts) {
[10:27:49.842]                             name <- restart$name
[10:27:49.842]                             if (is.null(name)) 
[10:27:49.842]                               next
[10:27:49.842]                             if (!grepl(pattern, name)) 
[10:27:49.842]                               next
[10:27:49.842]                             invokeRestart(restart)
[10:27:49.842]                             muffled <- TRUE
[10:27:49.842]                             break
[10:27:49.842]                           }
[10:27:49.842]                         }
[10:27:49.842]                       }
[10:27:49.842]                       invisible(muffled)
[10:27:49.842]                     }
[10:27:49.842]                     muffleCondition(cond, pattern = "^muffle")
[10:27:49.842]                   }
[10:27:49.842]                 }
[10:27:49.842]             }
[10:27:49.842]         }))
[10:27:49.842]     }, error = function(ex) {
[10:27:49.842]         base::structure(base::list(value = NULL, visible = NULL, 
[10:27:49.842]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:27:49.842]                 ...future.rng), started = ...future.startTime, 
[10:27:49.842]             finished = Sys.time(), session_uuid = NA_character_, 
[10:27:49.842]             version = "1.8"), class = "FutureResult")
[10:27:49.842]     }, finally = {
[10:27:49.842]         if (!identical(...future.workdir, getwd())) 
[10:27:49.842]             setwd(...future.workdir)
[10:27:49.842]         {
[10:27:49.842]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:27:49.842]                 ...future.oldOptions$nwarnings <- NULL
[10:27:49.842]             }
[10:27:49.842]             base::options(...future.oldOptions)
[10:27:49.842]             if (.Platform$OS.type == "windows") {
[10:27:49.842]                 old_names <- names(...future.oldEnvVars)
[10:27:49.842]                 envs <- base::Sys.getenv()
[10:27:49.842]                 names <- names(envs)
[10:27:49.842]                 common <- intersect(names, old_names)
[10:27:49.842]                 added <- setdiff(names, old_names)
[10:27:49.842]                 removed <- setdiff(old_names, names)
[10:27:49.842]                 changed <- common[...future.oldEnvVars[common] != 
[10:27:49.842]                   envs[common]]
[10:27:49.842]                 NAMES <- toupper(changed)
[10:27:49.842]                 args <- list()
[10:27:49.842]                 for (kk in seq_along(NAMES)) {
[10:27:49.842]                   name <- changed[[kk]]
[10:27:49.842]                   NAME <- NAMES[[kk]]
[10:27:49.842]                   if (name != NAME && is.element(NAME, old_names)) 
[10:27:49.842]                     next
[10:27:49.842]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:27:49.842]                 }
[10:27:49.842]                 NAMES <- toupper(added)
[10:27:49.842]                 for (kk in seq_along(NAMES)) {
[10:27:49.842]                   name <- added[[kk]]
[10:27:49.842]                   NAME <- NAMES[[kk]]
[10:27:49.842]                   if (name != NAME && is.element(NAME, old_names)) 
[10:27:49.842]                     next
[10:27:49.842]                   args[[name]] <- ""
[10:27:49.842]                 }
[10:27:49.842]                 NAMES <- toupper(removed)
[10:27:49.842]                 for (kk in seq_along(NAMES)) {
[10:27:49.842]                   name <- removed[[kk]]
[10:27:49.842]                   NAME <- NAMES[[kk]]
[10:27:49.842]                   if (name != NAME && is.element(NAME, old_names)) 
[10:27:49.842]                     next
[10:27:49.842]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:27:49.842]                 }
[10:27:49.842]                 if (length(args) > 0) 
[10:27:49.842]                   base::do.call(base::Sys.setenv, args = args)
[10:27:49.842]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:27:49.842]             }
[10:27:49.842]             else {
[10:27:49.842]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:27:49.842]             }
[10:27:49.842]             {
[10:27:49.842]                 if (base::length(...future.futureOptionsAdded) > 
[10:27:49.842]                   0L) {
[10:27:49.842]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:27:49.842]                   base::names(opts) <- ...future.futureOptionsAdded
[10:27:49.842]                   base::options(opts)
[10:27:49.842]                 }
[10:27:49.842]                 {
[10:27:49.842]                   {
[10:27:49.842]                     base::options(mc.cores = ...future.mc.cores.old)
[10:27:49.842]                     NULL
[10:27:49.842]                   }
[10:27:49.842]                   options(future.plan = "multisession")
[10:27:49.842]                   if (is.na("multisession")) 
[10:27:49.842]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:27:49.842]                   else Sys.setenv(R_FUTURE_PLAN = "multisession")
[10:27:49.842]                   future::plan(list(function (..., workers = availableCores(), 
[10:27:49.842]                     lazy = FALSE, rscript_libs = .libPaths(), 
[10:27:49.842]                     envir = parent.frame()) 
[10:27:49.842]                   {
[10:27:49.842]                     if (is.function(workers)) 
[10:27:49.842]                       workers <- workers()
[10:27:49.842]                     workers <- structure(as.integer(workers), 
[10:27:49.842]                       class = class(workers))
[10:27:49.842]                     stop_if_not(length(workers) == 1, is.finite(workers), 
[10:27:49.842]                       workers >= 1)
[10:27:49.842]                     if (workers == 1L && !inherits(workers, "AsIs")) {
[10:27:49.842]                       return(sequential(..., lazy = TRUE, envir = envir))
[10:27:49.842]                     }
[10:27:49.842]                     future <- MultisessionFuture(..., workers = workers, 
[10:27:49.842]                       lazy = lazy, rscript_libs = rscript_libs, 
[10:27:49.842]                       envir = envir)
[10:27:49.842]                     if (!future$lazy) 
[10:27:49.842]                       future <- run(future)
[10:27:49.842]                     invisible(future)
[10:27:49.842]                   }), .cleanup = FALSE, .init = FALSE)
[10:27:49.842]                 }
[10:27:49.842]             }
[10:27:49.842]         }
[10:27:49.842]     })
[10:27:49.842]     if (TRUE) {
[10:27:49.842]         base::sink(type = "output", split = FALSE)
[10:27:49.842]         if (TRUE) {
[10:27:49.842]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:27:49.842]         }
[10:27:49.842]         else {
[10:27:49.842]             ...future.result["stdout"] <- base::list(NULL)
[10:27:49.842]         }
[10:27:49.842]         base::close(...future.stdout)
[10:27:49.842]         ...future.stdout <- NULL
[10:27:49.842]     }
[10:27:49.842]     ...future.result$conditions <- ...future.conditions
[10:27:49.842]     ...future.result$finished <- base::Sys.time()
[10:27:49.842]     ...future.result
[10:27:49.842] }
[10:27:49.907] MultisessionFuture started
[10:27:49.907] result() for ClusterFuture ...
[10:27:49.908] receiveMessageFromWorker() for ClusterFuture ...
[10:27:49.908] - Validating connection of MultisessionFuture
[10:27:49.948] - received message: FutureResult
[10:27:49.949] - Received FutureResult
[10:27:49.949] - Erased future from FutureRegistry
[10:27:49.949] result() for ClusterFuture ...
[10:27:49.949] - result already collected: FutureResult
[10:27:49.949] result() for ClusterFuture ... done
[10:27:49.949] receiveMessageFromWorker() for ClusterFuture ... done
[10:27:49.949] result() for ClusterFuture ... done
[10:27:49.950] result() for ClusterFuture ...
[10:27:49.950] - result already collected: FutureResult
[10:27:49.950] result() for ClusterFuture ... done
[10:27:49.950] plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ... DONE
[10:27:49.953] plan(): nbrOfWorkers() = 2
> Sys.setenv(R_FUTURE_PLAN = "")
> message("- .onLoad() w/ R_FUTURE_PLAN = 'multisession' ... DONE")
- .onLoad() w/ R_FUTURE_PLAN = 'multisession' ... DONE
> 
> message("- .onLoad() w/ future.plan = 'multisession' ...")
- .onLoad() w/ future.plan = 'multisession' ...
> options(future.plan = NULL, future.plan = 'multisession', future.cmdargs = NULL)
> .onLoad(pkgname, pkgname)
[10:27:49.954] Future-specific environment variables:
- R_FUTURE_PLAN=‘’
- R_FUTURE_WAIT_INTERVAL=‘0.01’
[10:27:49.954] Environment variable ‘R_FUTURE_DEMO_MANDELBROT_REGION’ not set
[10:27:49.955] Environment variable ‘R_FUTURE_DEMO_MANDELBROT_NROW’ not set
[10:27:49.955] Environment variable ‘R_FUTURE_DEPRECATED_IGNORE’ not set
[10:27:49.955] Environment variable ‘R_FUTURE_DEPRECATED_DEFUNCT’ not set
[10:27:49.955] Environment variable ‘R_FUTURE_FORK_MULTITHREADING_ENABLE’ not set
[10:27:49.955] Environment variable ‘R_FUTURE_GLOBALS_MAXSIZE’ not set
[10:27:49.955] Environment variable ‘R_FUTURE_GLOBALS_ONMISSING’ not set
[10:27:49.955] Environment variable ‘R_FUTURE_GLOBALS_ONREFERENCE’ not set
[10:27:49.955] Environment variable ‘R_FUTURE_GLOBALS_METHOD’ not set
[10:27:49.956] Environment variable ‘R_FUTURE_GLOBALS_RESOLVE’ not set
[10:27:49.956] Environment variable ‘R_FUTURE_LAZY_ASSERTOWNER’ not set
[10:27:49.956] Environment variable ‘R_FUTURE_PLAN_DISALLOW’ not set
[10:27:49.956] Environment variable ‘R_FUTURE_PSOCK_RELAY_IMMEDIATE’ not set
[10:27:49.956] Environment variable ‘R_FUTURE_RELAY_IMMEDIATE’ not set
[10:27:49.956] Environment variable ‘R_FUTURE_RESOLVE_RECURSIVE’ not set
[10:27:49.956] Environment variable ‘R_FUTURE_ALIVE_TIMEOUT’ not set
[10:27:49.956] Environment variable ‘R_FUTURE_RESOLVED_TIMEOUT’ not set
[10:27:49.956] Environment variable ‘R_FUTURE_CLUSTER_RESOLVED_TIMEOUT’ not set
[10:27:49.957] Environment variable ‘R_FUTURE_MULTICORE_RESOLVED_TIMEOUT’ not set
[10:27:49.957] Environment variable ‘R_FUTURE_ONFUTURECONDITION_KEEPFUTURE’ not set
[10:27:49.957] Environment variable ‘R_FUTURE_RNG_ONMISUSE’ not set
[10:27:49.957] Environment variable ‘R_FUTURE_GLOBALENV_ONMISUSE’ not set
[10:27:49.957] Environment variable ‘R_FUTURE_WAIT_TIMEOUT’ not set
[10:27:49.957] Environment variable ‘R_FUTURE_WAIT_ALPHA’ not set
[10:27:49.957] Environment variable ‘R_FUTURE_ASSIGN_GLOBALS_EXCLUDE’ not set
[10:27:49.957] Environment variable ‘R_FUTURE_OUTPUT_WINDOWS_REENCODE’ not set
[10:27:49.958] Environment variable ‘R_FUTURE_GLOBALS_GLOBALSOF_LOCALS’ not set
[10:27:49.958] Environment variable ‘R_FUTURE_STATE_ONINVALID’ not set
[10:27:49.958] Environment variable ‘R_FUTURE_JOURNAL’ not set
[10:27:49.958] Environment variable ‘R_FUTURE_GLOBALS_KEEPWHERE’ not set
[10:27:49.958] Option 'future.plan' = ‘multisession’
[10:27:49.958] R process uuid: 02bdf616-e82e-8268-20f6-d170051ac4ee
[10:27:49.958] Setting plan('default')
[10:27:49.958] plan(): Setting new future strategy stack:
[10:27:49.958] List of future strategies:
[10:27:49.958] 1. multisession:
[10:27:49.958]    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[10:27:49.958]    - tweaked: FALSE
[10:27:49.958]    - call: plan("default", .init = FALSE)
[10:27:49.964] plan(): nbrOfWorkers() = 2
> strategy <- plan("next")
> print(strategy)
multisession:
- args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
- tweaked: FALSE
- call: plan("default", .init = FALSE)
> stopifnot(inherits(strategy, "multisession"))
> plan("default")
[10:27:49.964] plan(): Setting new future strategy stack:
[10:27:49.964] List of future strategies:
[10:27:49.964] 1. multisession:
[10:27:49.964]    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[10:27:49.964]    - tweaked: FALSE
[10:27:49.964]    - call: plan("default")
[10:27:49.965] plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ...
[10:27:49.965] multisession:
[10:27:49.965] - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[10:27:49.965] - tweaked: FALSE
[10:27:49.965] - call: plan("default")
[10:27:49.970] getGlobalsAndPackages() ...
[10:27:49.971] Not searching for globals
[10:27:49.971] - globals: [0] <none>
[10:27:49.971] getGlobalsAndPackages() ... DONE
[10:27:49.971] [local output] makeClusterPSOCK() ...
[10:27:49.976] [local output] Workers: [n = 2] ‘localhost’, ‘localhost’
[10:27:49.976] [local output] Base port: 11648
[10:27:49.977] [local output] Getting setup options for 2 cluster nodes ...
[10:27:49.977] [local output]  - Node 1 of 2 ...
[10:27:49.977] [local output] localMachine=TRUE => revtunnel=FALSE

[10:27:49.978] [local output] Rscript port: 11648

[10:27:49.978] [local output]  - Node 2 of 2 ...
[10:27:49.979] [local output] localMachine=TRUE => revtunnel=FALSE

[10:27:49.979] [local output] Rscript port: 11648

[10:27:49.979] [local output] Getting setup options for 2 cluster nodes ... done
[10:27:49.980] [local output]  - Parallel setup requested for some PSOCK nodes
[10:27:49.980] [local output] Setting up PSOCK nodes in parallel
[10:27:49.980] List of 36
[10:27:49.980]  $ worker          : chr "localhost"
[10:27:49.980]   ..- attr(*, "localhost")= logi TRUE
[10:27:49.980]  $ master          : chr "localhost"
[10:27:49.980]  $ port            : int 11648
[10:27:49.980]  $ connectTimeout  : num 120
[10:27:49.980]  $ timeout         : num 2592000
[10:27:49.980]  $ rscript         : chr "'/usr/local/lib/R/bin/Rscript'"
[10:27:49.980]  $ homogeneous     : logi TRUE
[10:27:49.980]  $ rscript_args    : chr "--default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),fi"| __truncated__
[10:27:49.980]  $ rscript_envs    : NULL
[10:27:49.980]  $ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[10:27:49.980]  $ rscript_startup : NULL
[10:27:49.980]  $ rscript_sh      : chr "sh"
[10:27:49.980]  $ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[10:27:49.980]  $ methods         : logi TRUE
[10:27:49.980]  $ socketOptions   : chr "no-delay"
[10:27:49.980]  $ useXDR          : logi FALSE
[10:27:49.980]  $ outfile         : chr "/dev/null"
[10:27:49.980]  $ renice          : int NA
[10:27:49.980]  $ rshcmd          : NULL
[10:27:49.980]  $ user            : chr(0) 
[10:27:49.980]  $ revtunnel       : logi FALSE
[10:27:49.980]  $ rshlogfile      : NULL
[10:27:49.980]  $ rshopts         : chr(0) 
[10:27:49.980]  $ rank            : int 1
[10:27:49.980]  $ manual          : logi FALSE
[10:27:49.980]  $ dryrun          : logi FALSE
[10:27:49.980]  $ quiet           : logi FALSE
[10:27:49.980]  $ setup_strategy  : chr "parallel"
[10:27:49.980]  $ local_cmd       : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[10:27:49.980]  $ pidfile         : chr "/tmp/RtmpthmAkr/worker.rank=1.parallelly.parent=92277.1687537dc5234.pid"
[10:27:49.980]  $ rshcmd_label    : NULL
[10:27:49.980]  $ rsh_call        : NULL
[10:27:49.980]  $ cmd             : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[10:27:49.980]  $ localMachine    : logi TRUE
[10:27:49.980]  $ make_fcn        :function (worker = getOption2("parallelly.localhost.hostname", "localhost"), 
[10:27:49.980]     master = NULL, port, connectTimeout = getOption2("parallelly.makeNodePSOCK.connectTimeout", 
[10:27:49.980]         2 * 60), timeout = getOption2("parallelly.makeNodePSOCK.timeout", 
[10:27:49.980]         30 * 24 * 60 * 60), rscript = NULL, homogeneous = NULL, rscript_args = NULL, 
[10:27:49.980]     rscript_envs = NULL, rscript_libs = NULL, rscript_startup = NULL, rscript_sh = c("auto", 
[10:27:49.980]         "cmd", "sh"), default_packages = c("datasets", "utils", "grDevices", 
[10:27:49.980]         "graphics", "stats", if (methods) "methods"), methods = TRUE, socketOptions = getOption2("parallelly.makeNodePSOCK.socketOptions", 
[10:27:49.980]         "no-delay"), useXDR = getOption2("parallelly.makeNodePSOCK.useXDR", 
[10:27:49.980]         FALSE), outfile = "/dev/null", renice = NA_integer_, rshcmd = getOption2("parallelly.makeNodePSOCK.rshcmd", 
[10:27:49.980]         NULL), user = NULL, revtunnel = NA, rshlogfile = NULL, rshopts = getOption2("parallelly.makeNodePSOCK.rshopts", 
[10:27:49.980]         NULL), rank = 1L, manual = FALSE, dryrun = FALSE, quiet = FALSE, 
[10:27:49.980]     setup_strategy = getOption2("parallelly.makeNodePSOCK.setup_strategy", 
[10:27:49.980]         "parallel"), action = c("launch", "options"), verbose = FALSE)  
[10:27:49.980]  $ arguments       :List of 28
[10:27:49.980]   ..$ worker          : chr "localhost"
[10:27:49.980]   ..$ master          : NULL
[10:27:49.980]   ..$ port            : int 11648
[10:27:49.980]   ..$ connectTimeout  : num 120
[10:27:49.980]   ..$ timeout         : num 2592000
[10:27:49.980]   ..$ rscript         : NULL
[10:27:49.980]   ..$ homogeneous     : NULL
[10:27:49.980]   ..$ rscript_args    : NULL
[10:27:49.980]   ..$ rscript_envs    : NULL
[10:27:49.980]   ..$ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[10:27:49.980]   ..$ rscript_startup : NULL
[10:27:49.980]   ..$ rscript_sh      : chr [1:3] "auto" "cmd" "sh"
[10:27:49.980]   ..$ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[10:27:49.980]   ..$ methods         : logi TRUE
[10:27:49.980]   ..$ socketOptions   : chr "no-delay"
[10:27:49.980]   ..$ useXDR          : logi FALSE
[10:27:49.980]   ..$ outfile         : chr "/dev/null"
[10:27:49.980]   ..$ renice          : int NA
[10:27:49.980]   ..$ rshcmd          : NULL
[10:27:49.980]   ..$ user            : NULL
[10:27:49.980]   ..$ revtunnel       : logi NA
[10:27:49.980]   ..$ rshlogfile      : NULL
[10:27:49.980]   ..$ rshopts         : NULL
[10:27:49.980]   ..$ rank            : int 1
[10:27:49.980]   ..$ manual          : logi FALSE
[10:27:49.980]   ..$ dryrun          : logi FALSE
[10:27:49.980]   ..$ quiet           : logi FALSE
[10:27:49.980]   ..$ setup_strategy  : chr "parallel"
[10:27:49.980]  - attr(*, "class")= chr [1:2] "makeNodePSOCKOptions" "makeNodeOptions"
[10:27:50.000] [local output] System call to launch all workers:
[10:27:50.000] [local output] '/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/RtmpthmAkr/worker.rank=1.parallelly.parent=92277.1687537dc5234.pid")), silent = TRUE)' -e 'options(socketOptions = "no-delay")' -e '.libPaths(c("/usr/local/lib/R/site-library","/usr/local/lib/R/library"))' -e 'workRSOCK <- tryCatch(parallel:::.workRSOCK, error=function(e) parallel:::.slaveRSOCK); workRSOCK()' MASTER=localhost PORT=11648 OUT=/dev/null TIMEOUT=2592000 XDR=FALSE SETUPTIMEOUT=120 SETUPSTRATEGY=parallel
[10:27:50.000] [local output] Starting PSOCK main server
[10:27:50.002] [local output] Workers launched
[10:27:50.002] [local output] Waiting for workers to connect back
[10:27:50.002]  - [local output] 0 workers out of 2 ready
[10:27:50.249]  - [local output] 0 workers out of 2 ready
[10:27:50.249]  - [local output] 1 workers out of 2 ready
[10:27:50.262]  - [local output] 1 workers out of 2 ready
[10:27:50.262]  - [local output] 2 workers out of 2 ready
[10:27:50.263] [local output] Launching of workers completed
[10:27:50.263] [local output] Collecting session information from workers
[10:27:50.263] [local output]  - Worker #1 of 2
[10:27:50.264] [local output]  - Worker #2 of 2
[10:27:50.264] [local output] makeClusterPSOCK() ... done
[10:27:50.275] Packages needed by the future expression (n = 0): <none>
[10:27:50.275] Packages needed by future strategies (n = 0): <none>
[10:27:50.275] {
[10:27:50.275]     {
[10:27:50.275]         {
[10:27:50.275]             ...future.startTime <- base::Sys.time()
[10:27:50.275]             {
[10:27:50.275]                 {
[10:27:50.275]                   {
[10:27:50.275]                     {
[10:27:50.275]                       base::local({
[10:27:50.275]                         has_future <- base::requireNamespace("future", 
[10:27:50.275]                           quietly = TRUE)
[10:27:50.275]                         if (has_future) {
[10:27:50.275]                           ns <- base::getNamespace("future")
[10:27:50.275]                           version <- ns[[".package"]][["version"]]
[10:27:50.275]                           if (is.null(version)) 
[10:27:50.275]                             version <- utils::packageVersion("future")
[10:27:50.275]                         }
[10:27:50.275]                         else {
[10:27:50.275]                           version <- NULL
[10:27:50.275]                         }
[10:27:50.275]                         if (!has_future || version < "1.8.0") {
[10:27:50.275]                           info <- base::c(r_version = base::gsub("R version ", 
[10:27:50.275]                             "", base::R.version$version.string), 
[10:27:50.275]                             platform = base::sprintf("%s (%s-bit)", 
[10:27:50.275]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:27:50.275]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[10:27:50.275]                               "release", "version")], collapse = " "), 
[10:27:50.275]                             hostname = base::Sys.info()[["nodename"]])
[10:27:50.275]                           info <- base::sprintf("%s: %s", base::names(info), 
[10:27:50.275]                             info)
[10:27:50.275]                           info <- base::paste(info, collapse = "; ")
[10:27:50.275]                           if (!has_future) {
[10:27:50.275]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:27:50.275]                               info)
[10:27:50.275]                           }
[10:27:50.275]                           else {
[10:27:50.275]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:27:50.275]                               info, version)
[10:27:50.275]                           }
[10:27:50.275]                           base::stop(msg)
[10:27:50.275]                         }
[10:27:50.275]                       })
[10:27:50.275]                     }
[10:27:50.275]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[10:27:50.275]                     base::options(mc.cores = 1L)
[10:27:50.275]                   }
[10:27:50.275]                   options(future.plan = NULL)
[10:27:50.275]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:27:50.275]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:27:50.275]                 }
[10:27:50.275]                 ...future.workdir <- getwd()
[10:27:50.275]             }
[10:27:50.275]             ...future.oldOptions <- base::as.list(base::.Options)
[10:27:50.275]             ...future.oldEnvVars <- base::Sys.getenv()
[10:27:50.275]         }
[10:27:50.275]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:27:50.275]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[10:27:50.275]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:27:50.275]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:27:50.275]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:27:50.275]             future.stdout.windows.reencode = NULL, width = 80L)
[10:27:50.275]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:27:50.275]             base::names(...future.oldOptions))
[10:27:50.275]     }
[10:27:50.275]     if (FALSE) {
[10:27:50.275]     }
[10:27:50.275]     else {
[10:27:50.275]         if (TRUE) {
[10:27:50.275]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:27:50.275]                 open = "w")
[10:27:50.275]         }
[10:27:50.275]         else {
[10:27:50.275]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:27:50.275]                 windows = "NUL", "/dev/null"), open = "w")
[10:27:50.275]         }
[10:27:50.275]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:27:50.275]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:27:50.275]             base::sink(type = "output", split = FALSE)
[10:27:50.275]             base::close(...future.stdout)
[10:27:50.275]         }, add = TRUE)
[10:27:50.275]     }
[10:27:50.275]     ...future.frame <- base::sys.nframe()
[10:27:50.275]     ...future.conditions <- base::list()
[10:27:50.275]     ...future.rng <- base::globalenv()$.Random.seed
[10:27:50.275]     if (FALSE) {
[10:27:50.275]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:27:50.275]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:27:50.275]     }
[10:27:50.275]     ...future.result <- base::tryCatch({
[10:27:50.275]         base::withCallingHandlers({
[10:27:50.275]             ...future.value <- base::withVisible(base::local({
[10:27:50.275]                 ...future.makeSendCondition <- base::local({
[10:27:50.275]                   sendCondition <- NULL
[10:27:50.275]                   function(frame = 1L) {
[10:27:50.275]                     if (is.function(sendCondition)) 
[10:27:50.275]                       return(sendCondition)
[10:27:50.275]                     ns <- getNamespace("parallel")
[10:27:50.275]                     if (exists("sendData", mode = "function", 
[10:27:50.275]                       envir = ns)) {
[10:27:50.275]                       parallel_sendData <- get("sendData", mode = "function", 
[10:27:50.275]                         envir = ns)
[10:27:50.275]                       envir <- sys.frame(frame)
[10:27:50.275]                       master <- NULL
[10:27:50.275]                       while (!identical(envir, .GlobalEnv) && 
[10:27:50.275]                         !identical(envir, emptyenv())) {
[10:27:50.275]                         if (exists("master", mode = "list", envir = envir, 
[10:27:50.275]                           inherits = FALSE)) {
[10:27:50.275]                           master <- get("master", mode = "list", 
[10:27:50.275]                             envir = envir, inherits = FALSE)
[10:27:50.275]                           if (inherits(master, c("SOCKnode", 
[10:27:50.275]                             "SOCK0node"))) {
[10:27:50.275]                             sendCondition <<- function(cond) {
[10:27:50.275]                               data <- list(type = "VALUE", value = cond, 
[10:27:50.275]                                 success = TRUE)
[10:27:50.275]                               parallel_sendData(master, data)
[10:27:50.275]                             }
[10:27:50.275]                             return(sendCondition)
[10:27:50.275]                           }
[10:27:50.275]                         }
[10:27:50.275]                         frame <- frame + 1L
[10:27:50.275]                         envir <- sys.frame(frame)
[10:27:50.275]                       }
[10:27:50.275]                     }
[10:27:50.275]                     sendCondition <<- function(cond) NULL
[10:27:50.275]                   }
[10:27:50.275]                 })
[10:27:50.275]                 withCallingHandlers({
[10:27:50.275]                   NA
[10:27:50.275]                 }, immediateCondition = function(cond) {
[10:27:50.275]                   sendCondition <- ...future.makeSendCondition()
[10:27:50.275]                   sendCondition(cond)
[10:27:50.275]                   muffleCondition <- function (cond, pattern = "^muffle") 
[10:27:50.275]                   {
[10:27:50.275]                     inherits <- base::inherits
[10:27:50.275]                     invokeRestart <- base::invokeRestart
[10:27:50.275]                     is.null <- base::is.null
[10:27:50.275]                     muffled <- FALSE
[10:27:50.275]                     if (inherits(cond, "message")) {
[10:27:50.275]                       muffled <- grepl(pattern, "muffleMessage")
[10:27:50.275]                       if (muffled) 
[10:27:50.275]                         invokeRestart("muffleMessage")
[10:27:50.275]                     }
[10:27:50.275]                     else if (inherits(cond, "warning")) {
[10:27:50.275]                       muffled <- grepl(pattern, "muffleWarning")
[10:27:50.275]                       if (muffled) 
[10:27:50.275]                         invokeRestart("muffleWarning")
[10:27:50.275]                     }
[10:27:50.275]                     else if (inherits(cond, "condition")) {
[10:27:50.275]                       if (!is.null(pattern)) {
[10:27:50.275]                         computeRestarts <- base::computeRestarts
[10:27:50.275]                         grepl <- base::grepl
[10:27:50.275]                         restarts <- computeRestarts(cond)
[10:27:50.275]                         for (restart in restarts) {
[10:27:50.275]                           name <- restart$name
[10:27:50.275]                           if (is.null(name)) 
[10:27:50.275]                             next
[10:27:50.275]                           if (!grepl(pattern, name)) 
[10:27:50.275]                             next
[10:27:50.275]                           invokeRestart(restart)
[10:27:50.275]                           muffled <- TRUE
[10:27:50.275]                           break
[10:27:50.275]                         }
[10:27:50.275]                       }
[10:27:50.275]                     }
[10:27:50.275]                     invisible(muffled)
[10:27:50.275]                   }
[10:27:50.275]                   muffleCondition(cond)
[10:27:50.275]                 })
[10:27:50.275]             }))
[10:27:50.275]             future::FutureResult(value = ...future.value$value, 
[10:27:50.275]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:27:50.275]                   ...future.rng), globalenv = if (FALSE) 
[10:27:50.275]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:27:50.275]                     ...future.globalenv.names))
[10:27:50.275]                 else NULL, started = ...future.startTime, version = "1.8")
[10:27:50.275]         }, condition = base::local({
[10:27:50.275]             c <- base::c
[10:27:50.275]             inherits <- base::inherits
[10:27:50.275]             invokeRestart <- base::invokeRestart
[10:27:50.275]             length <- base::length
[10:27:50.275]             list <- base::list
[10:27:50.275]             seq.int <- base::seq.int
[10:27:50.275]             signalCondition <- base::signalCondition
[10:27:50.275]             sys.calls <- base::sys.calls
[10:27:50.275]             `[[` <- base::`[[`
[10:27:50.275]             `+` <- base::`+`
[10:27:50.275]             `<<-` <- base::`<<-`
[10:27:50.275]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:27:50.275]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:27:50.275]                   3L)]
[10:27:50.275]             }
[10:27:50.275]             function(cond) {
[10:27:50.275]                 is_error <- inherits(cond, "error")
[10:27:50.275]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:27:50.275]                   NULL)
[10:27:50.275]                 if (is_error) {
[10:27:50.275]                   sessionInformation <- function() {
[10:27:50.275]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:27:50.275]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:27:50.275]                       search = base::search(), system = base::Sys.info())
[10:27:50.275]                   }
[10:27:50.275]                   ...future.conditions[[length(...future.conditions) + 
[10:27:50.275]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:27:50.275]                     cond$call), session = sessionInformation(), 
[10:27:50.275]                     timestamp = base::Sys.time(), signaled = 0L)
[10:27:50.275]                   signalCondition(cond)
[10:27:50.275]                 }
[10:27:50.275]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:27:50.275]                 "immediateCondition"))) {
[10:27:50.275]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:27:50.275]                   ...future.conditions[[length(...future.conditions) + 
[10:27:50.275]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:27:50.275]                   if (TRUE && !signal) {
[10:27:50.275]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:27:50.275]                     {
[10:27:50.275]                       inherits <- base::inherits
[10:27:50.275]                       invokeRestart <- base::invokeRestart
[10:27:50.275]                       is.null <- base::is.null
[10:27:50.275]                       muffled <- FALSE
[10:27:50.275]                       if (inherits(cond, "message")) {
[10:27:50.275]                         muffled <- grepl(pattern, "muffleMessage")
[10:27:50.275]                         if (muffled) 
[10:27:50.275]                           invokeRestart("muffleMessage")
[10:27:50.275]                       }
[10:27:50.275]                       else if (inherits(cond, "warning")) {
[10:27:50.275]                         muffled <- grepl(pattern, "muffleWarning")
[10:27:50.275]                         if (muffled) 
[10:27:50.275]                           invokeRestart("muffleWarning")
[10:27:50.275]                       }
[10:27:50.275]                       else if (inherits(cond, "condition")) {
[10:27:50.275]                         if (!is.null(pattern)) {
[10:27:50.275]                           computeRestarts <- base::computeRestarts
[10:27:50.275]                           grepl <- base::grepl
[10:27:50.275]                           restarts <- computeRestarts(cond)
[10:27:50.275]                           for (restart in restarts) {
[10:27:50.275]                             name <- restart$name
[10:27:50.275]                             if (is.null(name)) 
[10:27:50.275]                               next
[10:27:50.275]                             if (!grepl(pattern, name)) 
[10:27:50.275]                               next
[10:27:50.275]                             invokeRestart(restart)
[10:27:50.275]                             muffled <- TRUE
[10:27:50.275]                             break
[10:27:50.275]                           }
[10:27:50.275]                         }
[10:27:50.275]                       }
[10:27:50.275]                       invisible(muffled)
[10:27:50.275]                     }
[10:27:50.275]                     muffleCondition(cond, pattern = "^muffle")
[10:27:50.275]                   }
[10:27:50.275]                 }
[10:27:50.275]                 else {
[10:27:50.275]                   if (TRUE) {
[10:27:50.275]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:27:50.275]                     {
[10:27:50.275]                       inherits <- base::inherits
[10:27:50.275]                       invokeRestart <- base::invokeRestart
[10:27:50.275]                       is.null <- base::is.null
[10:27:50.275]                       muffled <- FALSE
[10:27:50.275]                       if (inherits(cond, "message")) {
[10:27:50.275]                         muffled <- grepl(pattern, "muffleMessage")
[10:27:50.275]                         if (muffled) 
[10:27:50.275]                           invokeRestart("muffleMessage")
[10:27:50.275]                       }
[10:27:50.275]                       else if (inherits(cond, "warning")) {
[10:27:50.275]                         muffled <- grepl(pattern, "muffleWarning")
[10:27:50.275]                         if (muffled) 
[10:27:50.275]                           invokeRestart("muffleWarning")
[10:27:50.275]                       }
[10:27:50.275]                       else if (inherits(cond, "condition")) {
[10:27:50.275]                         if (!is.null(pattern)) {
[10:27:50.275]                           computeRestarts <- base::computeRestarts
[10:27:50.275]                           grepl <- base::grepl
[10:27:50.275]                           restarts <- computeRestarts(cond)
[10:27:50.275]                           for (restart in restarts) {
[10:27:50.275]                             name <- restart$name
[10:27:50.275]                             if (is.null(name)) 
[10:27:50.275]                               next
[10:27:50.275]                             if (!grepl(pattern, name)) 
[10:27:50.275]                               next
[10:27:50.275]                             invokeRestart(restart)
[10:27:50.275]                             muffled <- TRUE
[10:27:50.275]                             break
[10:27:50.275]                           }
[10:27:50.275]                         }
[10:27:50.275]                       }
[10:27:50.275]                       invisible(muffled)
[10:27:50.275]                     }
[10:27:50.275]                     muffleCondition(cond, pattern = "^muffle")
[10:27:50.275]                   }
[10:27:50.275]                 }
[10:27:50.275]             }
[10:27:50.275]         }))
[10:27:50.275]     }, error = function(ex) {
[10:27:50.275]         base::structure(base::list(value = NULL, visible = NULL, 
[10:27:50.275]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:27:50.275]                 ...future.rng), started = ...future.startTime, 
[10:27:50.275]             finished = Sys.time(), session_uuid = NA_character_, 
[10:27:50.275]             version = "1.8"), class = "FutureResult")
[10:27:50.275]     }, finally = {
[10:27:50.275]         if (!identical(...future.workdir, getwd())) 
[10:27:50.275]             setwd(...future.workdir)
[10:27:50.275]         {
[10:27:50.275]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:27:50.275]                 ...future.oldOptions$nwarnings <- NULL
[10:27:50.275]             }
[10:27:50.275]             base::options(...future.oldOptions)
[10:27:50.275]             if (.Platform$OS.type == "windows") {
[10:27:50.275]                 old_names <- names(...future.oldEnvVars)
[10:27:50.275]                 envs <- base::Sys.getenv()
[10:27:50.275]                 names <- names(envs)
[10:27:50.275]                 common <- intersect(names, old_names)
[10:27:50.275]                 added <- setdiff(names, old_names)
[10:27:50.275]                 removed <- setdiff(old_names, names)
[10:27:50.275]                 changed <- common[...future.oldEnvVars[common] != 
[10:27:50.275]                   envs[common]]
[10:27:50.275]                 NAMES <- toupper(changed)
[10:27:50.275]                 args <- list()
[10:27:50.275]                 for (kk in seq_along(NAMES)) {
[10:27:50.275]                   name <- changed[[kk]]
[10:27:50.275]                   NAME <- NAMES[[kk]]
[10:27:50.275]                   if (name != NAME && is.element(NAME, old_names)) 
[10:27:50.275]                     next
[10:27:50.275]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:27:50.275]                 }
[10:27:50.275]                 NAMES <- toupper(added)
[10:27:50.275]                 for (kk in seq_along(NAMES)) {
[10:27:50.275]                   name <- added[[kk]]
[10:27:50.275]                   NAME <- NAMES[[kk]]
[10:27:50.275]                   if (name != NAME && is.element(NAME, old_names)) 
[10:27:50.275]                     next
[10:27:50.275]                   args[[name]] <- ""
[10:27:50.275]                 }
[10:27:50.275]                 NAMES <- toupper(removed)
[10:27:50.275]                 for (kk in seq_along(NAMES)) {
[10:27:50.275]                   name <- removed[[kk]]
[10:27:50.275]                   NAME <- NAMES[[kk]]
[10:27:50.275]                   if (name != NAME && is.element(NAME, old_names)) 
[10:27:50.275]                     next
[10:27:50.275]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:27:50.275]                 }
[10:27:50.275]                 if (length(args) > 0) 
[10:27:50.275]                   base::do.call(base::Sys.setenv, args = args)
[10:27:50.275]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:27:50.275]             }
[10:27:50.275]             else {
[10:27:50.275]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:27:50.275]             }
[10:27:50.275]             {
[10:27:50.275]                 if (base::length(...future.futureOptionsAdded) > 
[10:27:50.275]                   0L) {
[10:27:50.275]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:27:50.275]                   base::names(opts) <- ...future.futureOptionsAdded
[10:27:50.275]                   base::options(opts)
[10:27:50.275]                 }
[10:27:50.275]                 {
[10:27:50.275]                   {
[10:27:50.275]                     base::options(mc.cores = ...future.mc.cores.old)
[10:27:50.275]                     NULL
[10:27:50.275]                   }
[10:27:50.275]                   options(future.plan = "multisession")
[10:27:50.275]                   if (is.na("")) 
[10:27:50.275]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:27:50.275]                   else Sys.setenv(R_FUTURE_PLAN = "")
[10:27:50.275]                   future::plan(list(function (..., workers = availableCores(), 
[10:27:50.275]                     lazy = FALSE, rscript_libs = .libPaths(), 
[10:27:50.275]                     envir = parent.frame()) 
[10:27:50.275]                   {
[10:27:50.275]                     if (is.function(workers)) 
[10:27:50.275]                       workers <- workers()
[10:27:50.275]                     workers <- structure(as.integer(workers), 
[10:27:50.275]                       class = class(workers))
[10:27:50.275]                     stop_if_not(length(workers) == 1, is.finite(workers), 
[10:27:50.275]                       workers >= 1)
[10:27:50.275]                     if (workers == 1L && !inherits(workers, "AsIs")) {
[10:27:50.275]                       return(sequential(..., lazy = TRUE, envir = envir))
[10:27:50.275]                     }
[10:27:50.275]                     future <- MultisessionFuture(..., workers = workers, 
[10:27:50.275]                       lazy = lazy, rscript_libs = rscript_libs, 
[10:27:50.275]                       envir = envir)
[10:27:50.275]                     if (!future$lazy) 
[10:27:50.275]                       future <- run(future)
[10:27:50.275]                     invisible(future)
[10:27:50.275]                   }), .cleanup = FALSE, .init = FALSE)
[10:27:50.275]                 }
[10:27:50.275]             }
[10:27:50.275]         }
[10:27:50.275]     })
[10:27:50.275]     if (TRUE) {
[10:27:50.275]         base::sink(type = "output", split = FALSE)
[10:27:50.275]         if (TRUE) {
[10:27:50.275]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:27:50.275]         }
[10:27:50.275]         else {
[10:27:50.275]             ...future.result["stdout"] <- base::list(NULL)
[10:27:50.275]         }
[10:27:50.275]         base::close(...future.stdout)
[10:27:50.275]         ...future.stdout <- NULL
[10:27:50.275]     }
[10:27:50.275]     ...future.result$conditions <- ...future.conditions
[10:27:50.275]     ...future.result$finished <- base::Sys.time()
[10:27:50.275]     ...future.result
[10:27:50.275] }
[10:27:50.331] MultisessionFuture started
[10:27:50.331] result() for ClusterFuture ...
[10:27:50.332] receiveMessageFromWorker() for ClusterFuture ...
[10:27:50.332] - Validating connection of MultisessionFuture
[10:27:50.378] - received message: FutureResult
[10:27:50.379] - Received FutureResult
[10:27:50.379] - Erased future from FutureRegistry
[10:27:50.379] result() for ClusterFuture ...
[10:27:50.379] - result already collected: FutureResult
[10:27:50.379] result() for ClusterFuture ... done
[10:27:50.379] receiveMessageFromWorker() for ClusterFuture ... done
[10:27:50.379] result() for ClusterFuture ... done
[10:27:50.379] result() for ClusterFuture ...
[10:27:50.379] - result already collected: FutureResult
[10:27:50.380] result() for ClusterFuture ... done
[10:27:50.380] plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ... DONE
[10:27:50.383] plan(): nbrOfWorkers() = 2
> message("- .onLoad() w/ future.plan = 'multisession' ... DONE")
- .onLoad() w/ future.plan = 'multisession' ... DONE
> 
> message("- .onLoad() w/ R_FUTURE_PLAN = 'multisession' & -p 1 ...")
- .onLoad() w/ R_FUTURE_PLAN = 'multisession' & -p 1 ...
> Sys.setenv(R_FUTURE_PLAN = "multisession")
> options(future.plan = NULL, future.cmdargs = c("-p", 1))
> .onLoad(pkgname, pkgname)
[10:27:50.385] Future-specific environment variables:
- R_FUTURE_PLAN=‘multisession’
- R_FUTURE_WAIT_INTERVAL=‘0.01’
[10:27:50.385] Environment variable ‘R_FUTURE_DEMO_MANDELBROT_REGION’ not set
[10:27:50.385] Environment variable ‘R_FUTURE_DEMO_MANDELBROT_NROW’ not set
[10:27:50.385] Environment variable ‘R_FUTURE_DEPRECATED_IGNORE’ not set
[10:27:50.385] Environment variable ‘R_FUTURE_DEPRECATED_DEFUNCT’ not set
[10:27:50.385] Environment variable ‘R_FUTURE_FORK_MULTITHREADING_ENABLE’ not set
[10:27:50.385] Environment variable ‘R_FUTURE_GLOBALS_MAXSIZE’ not set
[10:27:50.386] Environment variable ‘R_FUTURE_GLOBALS_ONMISSING’ not set
[10:27:50.386] Environment variable ‘R_FUTURE_GLOBALS_ONREFERENCE’ not set
[10:27:50.386] Environment variable ‘R_FUTURE_GLOBALS_METHOD’ not set
[10:27:50.386] Environment variable ‘R_FUTURE_GLOBALS_RESOLVE’ not set
[10:27:50.386] Environment variable ‘R_FUTURE_LAZY_ASSERTOWNER’ not set
[10:27:50.386] R_FUTURE_PLAN=‘multisession’
[10:27:50.386] => options(“future.plan” = ‘multisession’) [n=1, mode=character]
[10:27:50.386] Environment variable ‘R_FUTURE_PLAN_DISALLOW’ not set
[10:27:50.386] Environment variable ‘R_FUTURE_PSOCK_RELAY_IMMEDIATE’ not set
[10:27:50.387] Environment variable ‘R_FUTURE_RELAY_IMMEDIATE’ not set
[10:27:50.387] Environment variable ‘R_FUTURE_RESOLVE_RECURSIVE’ not set
[10:27:50.387] Environment variable ‘R_FUTURE_ALIVE_TIMEOUT’ not set
[10:27:50.387] Environment variable ‘R_FUTURE_RESOLVED_TIMEOUT’ not set
[10:27:50.387] Environment variable ‘R_FUTURE_CLUSTER_RESOLVED_TIMEOUT’ not set
[10:27:50.387] Environment variable ‘R_FUTURE_MULTICORE_RESOLVED_TIMEOUT’ not set
[10:27:50.387] Environment variable ‘R_FUTURE_ONFUTURECONDITION_KEEPFUTURE’ not set
[10:27:50.387] Environment variable ‘R_FUTURE_RNG_ONMISUSE’ not set
[10:27:50.387] Environment variable ‘R_FUTURE_GLOBALENV_ONMISUSE’ not set
[10:27:50.388] Environment variable ‘R_FUTURE_WAIT_TIMEOUT’ not set
[10:27:50.388] Environment variable ‘R_FUTURE_WAIT_ALPHA’ not set
[10:27:50.388] Environment variable ‘R_FUTURE_ASSIGN_GLOBALS_EXCLUDE’ not set
[10:27:50.388] Environment variable ‘R_FUTURE_OUTPUT_WINDOWS_REENCODE’ not set
[10:27:50.388] Environment variable ‘R_FUTURE_GLOBALS_GLOBALSOF_LOCALS’ not set
[10:27:50.388] Environment variable ‘R_FUTURE_STATE_ONINVALID’ not set
[10:27:50.388] Environment variable ‘R_FUTURE_JOURNAL’ not set
[10:27:50.388] Environment variable ‘R_FUTURE_GLOBALS_KEEPWHERE’ not set
[10:27:50.389] Option 'future.plan' = ‘multisession’
[10:27:50.389] R command-line argument: -p 1
[10:27:50.389]  => 'future.plan' already set.
[10:27:50.389] R process uuid: 02bdf616-e82e-8268-20f6-d170051ac4ee
[10:27:50.389] Setting plan('default')
[10:27:50.389] plan(): Setting new future strategy stack:
[10:27:50.390] List of future strategies:
[10:27:50.390] 1. multisession:
[10:27:50.390]    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[10:27:50.390]    - tweaked: FALSE
[10:27:50.390]    - call: plan("default", .init = FALSE)
[10:27:50.394] plan(): nbrOfWorkers() = 1
> strategy <- plan("next")
> print(strategy)
multisession:
- args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
- tweaked: FALSE
- call: plan("default", .init = FALSE)
> stopifnot(inherits(strategy, "multisession"))
> plan("default")
[10:27:50.395] plan(): Setting new future strategy stack:
[10:27:50.395] List of future strategies:
[10:27:50.395] 1. multisession:
[10:27:50.395]    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[10:27:50.395]    - tweaked: FALSE
[10:27:50.395]    - call: plan("default")
[10:27:50.396] plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ...
[10:27:50.396] multisession:
[10:27:50.396] - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[10:27:50.396] - tweaked: FALSE
[10:27:50.396] - call: plan("default")
[10:27:50.401] getGlobalsAndPackages() ...
[10:27:50.401] Not searching for globals
[10:27:50.401] - globals: [0] <none>
[10:27:50.401] getGlobalsAndPackages() ... DONE
[10:27:50.402] Packages needed by the future expression (n = 0): <none>
[10:27:50.402] Packages needed by future strategies (n = 0): <none>
[10:27:50.402] {
[10:27:50.402]     {
[10:27:50.402]         {
[10:27:50.402]             ...future.startTime <- base::Sys.time()
[10:27:50.402]             {
[10:27:50.402]                 {
[10:27:50.402]                   {
[10:27:50.402]                     base::local({
[10:27:50.402]                       has_future <- base::requireNamespace("future", 
[10:27:50.402]                         quietly = TRUE)
[10:27:50.402]                       if (has_future) {
[10:27:50.402]                         ns <- base::getNamespace("future")
[10:27:50.402]                         version <- ns[[".package"]][["version"]]
[10:27:50.402]                         if (is.null(version)) 
[10:27:50.402]                           version <- utils::packageVersion("future")
[10:27:50.402]                       }
[10:27:50.402]                       else {
[10:27:50.402]                         version <- NULL
[10:27:50.402]                       }
[10:27:50.402]                       if (!has_future || version < "1.8.0") {
[10:27:50.402]                         info <- base::c(r_version = base::gsub("R version ", 
[10:27:50.402]                           "", base::R.version$version.string), 
[10:27:50.402]                           platform = base::sprintf("%s (%s-bit)", 
[10:27:50.402]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:27:50.402]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[10:27:50.402]                             "release", "version")], collapse = " "), 
[10:27:50.402]                           hostname = base::Sys.info()[["nodename"]])
[10:27:50.402]                         info <- base::sprintf("%s: %s", base::names(info), 
[10:27:50.402]                           info)
[10:27:50.402]                         info <- base::paste(info, collapse = "; ")
[10:27:50.402]                         if (!has_future) {
[10:27:50.402]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:27:50.402]                             info)
[10:27:50.402]                         }
[10:27:50.402]                         else {
[10:27:50.402]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:27:50.402]                             info, version)
[10:27:50.402]                         }
[10:27:50.402]                         base::stop(msg)
[10:27:50.402]                       }
[10:27:50.402]                     })
[10:27:50.402]                   }
[10:27:50.402]                   options(future.plan = NULL)
[10:27:50.402]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:27:50.402]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:27:50.402]                 }
[10:27:50.402]                 ...future.workdir <- getwd()
[10:27:50.402]             }
[10:27:50.402]             ...future.oldOptions <- base::as.list(base::.Options)
[10:27:50.402]             ...future.oldEnvVars <- base::Sys.getenv()
[10:27:50.402]         }
[10:27:50.402]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:27:50.402]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[10:27:50.402]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:27:50.402]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:27:50.402]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:27:50.402]             future.stdout.windows.reencode = NULL, width = 80L)
[10:27:50.402]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:27:50.402]             base::names(...future.oldOptions))
[10:27:50.402]     }
[10:27:50.402]     if (FALSE) {
[10:27:50.402]     }
[10:27:50.402]     else {
[10:27:50.402]         if (TRUE) {
[10:27:50.402]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:27:50.402]                 open = "w")
[10:27:50.402]         }
[10:27:50.402]         else {
[10:27:50.402]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:27:50.402]                 windows = "NUL", "/dev/null"), open = "w")
[10:27:50.402]         }
[10:27:50.402]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:27:50.402]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:27:50.402]             base::sink(type = "output", split = FALSE)
[10:27:50.402]             base::close(...future.stdout)
[10:27:50.402]         }, add = TRUE)
[10:27:50.402]     }
[10:27:50.402]     ...future.frame <- base::sys.nframe()
[10:27:50.402]     ...future.conditions <- base::list()
[10:27:50.402]     ...future.rng <- base::globalenv()$.Random.seed
[10:27:50.402]     if (FALSE) {
[10:27:50.402]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:27:50.402]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:27:50.402]     }
[10:27:50.402]     ...future.result <- base::tryCatch({
[10:27:50.402]         base::withCallingHandlers({
[10:27:50.402]             ...future.value <- base::withVisible(base::local(NA))
[10:27:50.402]             future::FutureResult(value = ...future.value$value, 
[10:27:50.402]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:27:50.402]                   ...future.rng), globalenv = if (FALSE) 
[10:27:50.402]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:27:50.402]                     ...future.globalenv.names))
[10:27:50.402]                 else NULL, started = ...future.startTime, version = "1.8")
[10:27:50.402]         }, condition = base::local({
[10:27:50.402]             c <- base::c
[10:27:50.402]             inherits <- base::inherits
[10:27:50.402]             invokeRestart <- base::invokeRestart
[10:27:50.402]             length <- base::length
[10:27:50.402]             list <- base::list
[10:27:50.402]             seq.int <- base::seq.int
[10:27:50.402]             signalCondition <- base::signalCondition
[10:27:50.402]             sys.calls <- base::sys.calls
[10:27:50.402]             `[[` <- base::`[[`
[10:27:50.402]             `+` <- base::`+`
[10:27:50.402]             `<<-` <- base::`<<-`
[10:27:50.402]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:27:50.402]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:27:50.402]                   3L)]
[10:27:50.402]             }
[10:27:50.402]             function(cond) {
[10:27:50.402]                 is_error <- inherits(cond, "error")
[10:27:50.402]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:27:50.402]                   NULL)
[10:27:50.402]                 if (is_error) {
[10:27:50.402]                   sessionInformation <- function() {
[10:27:50.402]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:27:50.402]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:27:50.402]                       search = base::search(), system = base::Sys.info())
[10:27:50.402]                   }
[10:27:50.402]                   ...future.conditions[[length(...future.conditions) + 
[10:27:50.402]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:27:50.402]                     cond$call), session = sessionInformation(), 
[10:27:50.402]                     timestamp = base::Sys.time(), signaled = 0L)
[10:27:50.402]                   signalCondition(cond)
[10:27:50.402]                 }
[10:27:50.402]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:27:50.402]                 "immediateCondition"))) {
[10:27:50.402]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:27:50.402]                   ...future.conditions[[length(...future.conditions) + 
[10:27:50.402]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:27:50.402]                   if (TRUE && !signal) {
[10:27:50.402]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:27:50.402]                     {
[10:27:50.402]                       inherits <- base::inherits
[10:27:50.402]                       invokeRestart <- base::invokeRestart
[10:27:50.402]                       is.null <- base::is.null
[10:27:50.402]                       muffled <- FALSE
[10:27:50.402]                       if (inherits(cond, "message")) {
[10:27:50.402]                         muffled <- grepl(pattern, "muffleMessage")
[10:27:50.402]                         if (muffled) 
[10:27:50.402]                           invokeRestart("muffleMessage")
[10:27:50.402]                       }
[10:27:50.402]                       else if (inherits(cond, "warning")) {
[10:27:50.402]                         muffled <- grepl(pattern, "muffleWarning")
[10:27:50.402]                         if (muffled) 
[10:27:50.402]                           invokeRestart("muffleWarning")
[10:27:50.402]                       }
[10:27:50.402]                       else if (inherits(cond, "condition")) {
[10:27:50.402]                         if (!is.null(pattern)) {
[10:27:50.402]                           computeRestarts <- base::computeRestarts
[10:27:50.402]                           grepl <- base::grepl
[10:27:50.402]                           restarts <- computeRestarts(cond)
[10:27:50.402]                           for (restart in restarts) {
[10:27:50.402]                             name <- restart$name
[10:27:50.402]                             if (is.null(name)) 
[10:27:50.402]                               next
[10:27:50.402]                             if (!grepl(pattern, name)) 
[10:27:50.402]                               next
[10:27:50.402]                             invokeRestart(restart)
[10:27:50.402]                             muffled <- TRUE
[10:27:50.402]                             break
[10:27:50.402]                           }
[10:27:50.402]                         }
[10:27:50.402]                       }
[10:27:50.402]                       invisible(muffled)
[10:27:50.402]                     }
[10:27:50.402]                     muffleCondition(cond, pattern = "^muffle")
[10:27:50.402]                   }
[10:27:50.402]                 }
[10:27:50.402]                 else {
[10:27:50.402]                   if (TRUE) {
[10:27:50.402]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:27:50.402]                     {
[10:27:50.402]                       inherits <- base::inherits
[10:27:50.402]                       invokeRestart <- base::invokeRestart
[10:27:50.402]                       is.null <- base::is.null
[10:27:50.402]                       muffled <- FALSE
[10:27:50.402]                       if (inherits(cond, "message")) {
[10:27:50.402]                         muffled <- grepl(pattern, "muffleMessage")
[10:27:50.402]                         if (muffled) 
[10:27:50.402]                           invokeRestart("muffleMessage")
[10:27:50.402]                       }
[10:27:50.402]                       else if (inherits(cond, "warning")) {
[10:27:50.402]                         muffled <- grepl(pattern, "muffleWarning")
[10:27:50.402]                         if (muffled) 
[10:27:50.402]                           invokeRestart("muffleWarning")
[10:27:50.402]                       }
[10:27:50.402]                       else if (inherits(cond, "condition")) {
[10:27:50.402]                         if (!is.null(pattern)) {
[10:27:50.402]                           computeRestarts <- base::computeRestarts
[10:27:50.402]                           grepl <- base::grepl
[10:27:50.402]                           restarts <- computeRestarts(cond)
[10:27:50.402]                           for (restart in restarts) {
[10:27:50.402]                             name <- restart$name
[10:27:50.402]                             if (is.null(name)) 
[10:27:50.402]                               next
[10:27:50.402]                             if (!grepl(pattern, name)) 
[10:27:50.402]                               next
[10:27:50.402]                             invokeRestart(restart)
[10:27:50.402]                             muffled <- TRUE
[10:27:50.402]                             break
[10:27:50.402]                           }
[10:27:50.402]                         }
[10:27:50.402]                       }
[10:27:50.402]                       invisible(muffled)
[10:27:50.402]                     }
[10:27:50.402]                     muffleCondition(cond, pattern = "^muffle")
[10:27:50.402]                   }
[10:27:50.402]                 }
[10:27:50.402]             }
[10:27:50.402]         }))
[10:27:50.402]     }, error = function(ex) {
[10:27:50.402]         base::structure(base::list(value = NULL, visible = NULL, 
[10:27:50.402]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:27:50.402]                 ...future.rng), started = ...future.startTime, 
[10:27:50.402]             finished = Sys.time(), session_uuid = NA_character_, 
[10:27:50.402]             version = "1.8"), class = "FutureResult")
[10:27:50.402]     }, finally = {
[10:27:50.402]         if (!identical(...future.workdir, getwd())) 
[10:27:50.402]             setwd(...future.workdir)
[10:27:50.402]         {
[10:27:50.402]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:27:50.402]                 ...future.oldOptions$nwarnings <- NULL
[10:27:50.402]             }
[10:27:50.402]             base::options(...future.oldOptions)
[10:27:50.402]             if (.Platform$OS.type == "windows") {
[10:27:50.402]                 old_names <- names(...future.oldEnvVars)
[10:27:50.402]                 envs <- base::Sys.getenv()
[10:27:50.402]                 names <- names(envs)
[10:27:50.402]                 common <- intersect(names, old_names)
[10:27:50.402]                 added <- setdiff(names, old_names)
[10:27:50.402]                 removed <- setdiff(old_names, names)
[10:27:50.402]                 changed <- common[...future.oldEnvVars[common] != 
[10:27:50.402]                   envs[common]]
[10:27:50.402]                 NAMES <- toupper(changed)
[10:27:50.402]                 args <- list()
[10:27:50.402]                 for (kk in seq_along(NAMES)) {
[10:27:50.402]                   name <- changed[[kk]]
[10:27:50.402]                   NAME <- NAMES[[kk]]
[10:27:50.402]                   if (name != NAME && is.element(NAME, old_names)) 
[10:27:50.402]                     next
[10:27:50.402]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:27:50.402]                 }
[10:27:50.402]                 NAMES <- toupper(added)
[10:27:50.402]                 for (kk in seq_along(NAMES)) {
[10:27:50.402]                   name <- added[[kk]]
[10:27:50.402]                   NAME <- NAMES[[kk]]
[10:27:50.402]                   if (name != NAME && is.element(NAME, old_names)) 
[10:27:50.402]                     next
[10:27:50.402]                   args[[name]] <- ""
[10:27:50.402]                 }
[10:27:50.402]                 NAMES <- toupper(removed)
[10:27:50.402]                 for (kk in seq_along(NAMES)) {
[10:27:50.402]                   name <- removed[[kk]]
[10:27:50.402]                   NAME <- NAMES[[kk]]
[10:27:50.402]                   if (name != NAME && is.element(NAME, old_names)) 
[10:27:50.402]                     next
[10:27:50.402]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:27:50.402]                 }
[10:27:50.402]                 if (length(args) > 0) 
[10:27:50.402]                   base::do.call(base::Sys.setenv, args = args)
[10:27:50.402]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:27:50.402]             }
[10:27:50.402]             else {
[10:27:50.402]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:27:50.402]             }
[10:27:50.402]             {
[10:27:50.402]                 if (base::length(...future.futureOptionsAdded) > 
[10:27:50.402]                   0L) {
[10:27:50.402]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:27:50.402]                   base::names(opts) <- ...future.futureOptionsAdded
[10:27:50.402]                   base::options(opts)
[10:27:50.402]                 }
[10:27:50.402]                 {
[10:27:50.402]                   {
[10:27:50.402]                     NULL
[10:27:50.402]                     RNGkind("Mersenne-Twister")
[10:27:50.402]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[10:27:50.402]                       inherits = FALSE)
[10:27:50.402]                   }
[10:27:50.402]                   options(future.plan = "multisession")
[10:27:50.402]                   if (is.na("multisession")) 
[10:27:50.402]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:27:50.402]                   else Sys.setenv(R_FUTURE_PLAN = "multisession")
[10:27:50.402]                   future::plan(list(function (..., workers = availableCores(), 
[10:27:50.402]                     lazy = FALSE, rscript_libs = .libPaths(), 
[10:27:50.402]                     envir = parent.frame()) 
[10:27:50.402]                   {
[10:27:50.402]                     if (is.function(workers)) 
[10:27:50.402]                       workers <- workers()
[10:27:50.402]                     workers <- structure(as.integer(workers), 
[10:27:50.402]                       class = class(workers))
[10:27:50.402]                     stop_if_not(length(workers) == 1, is.finite(workers), 
[10:27:50.402]                       workers >= 1)
[10:27:50.402]                     if (workers == 1L && !inherits(workers, "AsIs")) {
[10:27:50.402]                       return(sequential(..., lazy = TRUE, envir = envir))
[10:27:50.402]                     }
[10:27:50.402]                     future <- MultisessionFuture(..., workers = workers, 
[10:27:50.402]                       lazy = lazy, rscript_libs = rscript_libs, 
[10:27:50.402]                       envir = envir)
[10:27:50.402]                     if (!future$lazy) 
[10:27:50.402]                       future <- run(future)
[10:27:50.402]                     invisible(future)
[10:27:50.402]                   }), .cleanup = FALSE, .init = FALSE)
[10:27:50.402]                 }
[10:27:50.402]             }
[10:27:50.402]         }
[10:27:50.402]     })
[10:27:50.402]     if (TRUE) {
[10:27:50.402]         base::sink(type = "output", split = FALSE)
[10:27:50.402]         if (TRUE) {
[10:27:50.402]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:27:50.402]         }
[10:27:50.402]         else {
[10:27:50.402]             ...future.result["stdout"] <- base::list(NULL)
[10:27:50.402]         }
[10:27:50.402]         base::close(...future.stdout)
[10:27:50.402]         ...future.stdout <- NULL
[10:27:50.402]     }
[10:27:50.402]     ...future.result$conditions <- ...future.conditions
[10:27:50.402]     ...future.result$finished <- base::Sys.time()
[10:27:50.402]     ...future.result
[10:27:50.402] }
[10:27:50.404] plan(): Setting new future strategy stack:
[10:27:50.404] List of future strategies:
[10:27:50.404] 1. sequential:
[10:27:50.404]    - args: function (..., envir = parent.frame())
[10:27:50.404]    - tweaked: FALSE
[10:27:50.404]    - call: NULL
[10:27:50.405] plan(): nbrOfWorkers() = 1
[10:27:50.406] plan(): Setting new future strategy stack:
[10:27:50.406] List of future strategies:
[10:27:50.406] 1. multisession:
[10:27:50.406]    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[10:27:50.406]    - tweaked: FALSE
[10:27:50.406]    - call: plan("default")
[10:27:50.411] plan(): nbrOfWorkers() = 1
[10:27:50.411] SequentialFuture started (and completed)
[10:27:50.412] plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ... DONE
[10:27:50.415] plan(): nbrOfWorkers() = 1
> Sys.setenv(R_FUTURE_PLAN = "")
> message("- .onLoad() w/ R_FUTURE_PLAN = 'multisession' & -p 1 ... DONE")
- .onLoad() w/ R_FUTURE_PLAN = 'multisession' & -p 1 ... DONE
> 
> message("- .onLoad() w/ future.plan = 'multisession' & -p 1 ...")
- .onLoad() w/ future.plan = 'multisession' & -p 1 ...
> options(future.plan = 'multisession', future.cmdargs = c("-p", "1"))
> .onLoad(pkgname, pkgname)
[10:27:50.416] Future-specific environment variables:
- R_FUTURE_PLAN=‘’
- R_FUTURE_WAIT_INTERVAL=‘0.01’
[10:27:50.416] Environment variable ‘R_FUTURE_DEMO_MANDELBROT_REGION’ not set
[10:27:50.416] Environment variable ‘R_FUTURE_DEMO_MANDELBROT_NROW’ not set
[10:27:50.416] Environment variable ‘R_FUTURE_DEPRECATED_IGNORE’ not set
[10:27:50.416] Environment variable ‘R_FUTURE_DEPRECATED_DEFUNCT’ not set
[10:27:50.416] Environment variable ‘R_FUTURE_FORK_MULTITHREADING_ENABLE’ not set
[10:27:50.417] Environment variable ‘R_FUTURE_GLOBALS_MAXSIZE’ not set
[10:27:50.417] Environment variable ‘R_FUTURE_GLOBALS_ONMISSING’ not set
[10:27:50.417] Environment variable ‘R_FUTURE_GLOBALS_ONREFERENCE’ not set
[10:27:50.417] Environment variable ‘R_FUTURE_GLOBALS_METHOD’ not set
[10:27:50.417] Environment variable ‘R_FUTURE_GLOBALS_RESOLVE’ not set
[10:27:50.417] Environment variable ‘R_FUTURE_LAZY_ASSERTOWNER’ not set
[10:27:50.417] Environment variable ‘R_FUTURE_PLAN_DISALLOW’ not set
[10:27:50.417] Environment variable ‘R_FUTURE_PSOCK_RELAY_IMMEDIATE’ not set
[10:27:50.418] Environment variable ‘R_FUTURE_RELAY_IMMEDIATE’ not set
[10:27:50.418] Environment variable ‘R_FUTURE_RESOLVE_RECURSIVE’ not set
[10:27:50.418] Environment variable ‘R_FUTURE_ALIVE_TIMEOUT’ not set
[10:27:50.418] Environment variable ‘R_FUTURE_RESOLVED_TIMEOUT’ not set
[10:27:50.418] Environment variable ‘R_FUTURE_CLUSTER_RESOLVED_TIMEOUT’ not set
[10:27:50.418] Environment variable ‘R_FUTURE_MULTICORE_RESOLVED_TIMEOUT’ not set
[10:27:50.418] Environment variable ‘R_FUTURE_ONFUTURECONDITION_KEEPFUTURE’ not set
[10:27:50.418] Environment variable ‘R_FUTURE_RNG_ONMISUSE’ not set
[10:27:50.418] Environment variable ‘R_FUTURE_GLOBALENV_ONMISUSE’ not set
[10:27:50.419] Environment variable ‘R_FUTURE_WAIT_TIMEOUT’ not set
[10:27:50.419] Environment variable ‘R_FUTURE_WAIT_ALPHA’ not set
[10:27:50.419] Environment variable ‘R_FUTURE_ASSIGN_GLOBALS_EXCLUDE’ not set
[10:27:50.419] Environment variable ‘R_FUTURE_OUTPUT_WINDOWS_REENCODE’ not set
[10:27:50.419] Environment variable ‘R_FUTURE_GLOBALS_GLOBALSOF_LOCALS’ not set
[10:27:50.419] Environment variable ‘R_FUTURE_STATE_ONINVALID’ not set
[10:27:50.419] Environment variable ‘R_FUTURE_JOURNAL’ not set
[10:27:50.419] Environment variable ‘R_FUTURE_GLOBALS_KEEPWHERE’ not set
[10:27:50.419] Option 'future.plan' = ‘multisession’
[10:27:50.420] R command-line argument: -p 1
[10:27:50.420]  => 'future.plan' already set.
[10:27:50.420] R process uuid: 02bdf616-e82e-8268-20f6-d170051ac4ee
[10:27:50.420] Setting plan('default')
[10:27:50.420] plan(): Setting new future strategy stack:
[10:27:50.420] List of future strategies:
[10:27:50.420] 1. multisession:
[10:27:50.420]    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[10:27:50.420]    - tweaked: FALSE
[10:27:50.420]    - call: plan("default", .init = FALSE)
[10:27:50.424] plan(): nbrOfWorkers() = 1
> strategy <- plan("next")
> print(strategy)
multisession:
- args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
- tweaked: FALSE
- call: plan("default", .init = FALSE)
> stopifnot(inherits(strategy, "multisession"))
> plan("default")
[10:27:50.424] plan(): Setting new future strategy stack:
[10:27:50.424] List of future strategies:
[10:27:50.424] 1. multisession:
[10:27:50.424]    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[10:27:50.424]    - tweaked: FALSE
[10:27:50.424]    - call: plan("default")
[10:27:50.425] plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ...
[10:27:50.425] multisession:
[10:27:50.425] - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[10:27:50.425] - tweaked: FALSE
[10:27:50.425] - call: plan("default")
[10:27:50.428] getGlobalsAndPackages() ...
[10:27:50.428] Not searching for globals
[10:27:50.428] - globals: [0] <none>
[10:27:50.428] getGlobalsAndPackages() ... DONE
[10:27:50.429] Packages needed by the future expression (n = 0): <none>
[10:27:50.429] Packages needed by future strategies (n = 0): <none>
[10:27:50.429] {
[10:27:50.429]     {
[10:27:50.429]         {
[10:27:50.429]             ...future.startTime <- base::Sys.time()
[10:27:50.429]             {
[10:27:50.429]                 {
[10:27:50.429]                   {
[10:27:50.429]                     base::local({
[10:27:50.429]                       has_future <- base::requireNamespace("future", 
[10:27:50.429]                         quietly = TRUE)
[10:27:50.429]                       if (has_future) {
[10:27:50.429]                         ns <- base::getNamespace("future")
[10:27:50.429]                         version <- ns[[".package"]][["version"]]
[10:27:50.429]                         if (is.null(version)) 
[10:27:50.429]                           version <- utils::packageVersion("future")
[10:27:50.429]                       }
[10:27:50.429]                       else {
[10:27:50.429]                         version <- NULL
[10:27:50.429]                       }
[10:27:50.429]                       if (!has_future || version < "1.8.0") {
[10:27:50.429]                         info <- base::c(r_version = base::gsub("R version ", 
[10:27:50.429]                           "", base::R.version$version.string), 
[10:27:50.429]                           platform = base::sprintf("%s (%s-bit)", 
[10:27:50.429]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:27:50.429]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[10:27:50.429]                             "release", "version")], collapse = " "), 
[10:27:50.429]                           hostname = base::Sys.info()[["nodename"]])
[10:27:50.429]                         info <- base::sprintf("%s: %s", base::names(info), 
[10:27:50.429]                           info)
[10:27:50.429]                         info <- base::paste(info, collapse = "; ")
[10:27:50.429]                         if (!has_future) {
[10:27:50.429]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:27:50.429]                             info)
[10:27:50.429]                         }
[10:27:50.429]                         else {
[10:27:50.429]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:27:50.429]                             info, version)
[10:27:50.429]                         }
[10:27:50.429]                         base::stop(msg)
[10:27:50.429]                       }
[10:27:50.429]                     })
[10:27:50.429]                   }
[10:27:50.429]                   options(future.plan = NULL)
[10:27:50.429]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:27:50.429]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:27:50.429]                 }
[10:27:50.429]                 ...future.workdir <- getwd()
[10:27:50.429]             }
[10:27:50.429]             ...future.oldOptions <- base::as.list(base::.Options)
[10:27:50.429]             ...future.oldEnvVars <- base::Sys.getenv()
[10:27:50.429]         }
[10:27:50.429]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:27:50.429]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[10:27:50.429]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:27:50.429]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:27:50.429]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:27:50.429]             future.stdout.windows.reencode = NULL, width = 80L)
[10:27:50.429]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:27:50.429]             base::names(...future.oldOptions))
[10:27:50.429]     }
[10:27:50.429]     if (FALSE) {
[10:27:50.429]     }
[10:27:50.429]     else {
[10:27:50.429]         if (TRUE) {
[10:27:50.429]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:27:50.429]                 open = "w")
[10:27:50.429]         }
[10:27:50.429]         else {
[10:27:50.429]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:27:50.429]                 windows = "NUL", "/dev/null"), open = "w")
[10:27:50.429]         }
[10:27:50.429]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:27:50.429]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:27:50.429]             base::sink(type = "output", split = FALSE)
[10:27:50.429]             base::close(...future.stdout)
[10:27:50.429]         }, add = TRUE)
[10:27:50.429]     }
[10:27:50.429]     ...future.frame <- base::sys.nframe()
[10:27:50.429]     ...future.conditions <- base::list()
[10:27:50.429]     ...future.rng <- base::globalenv()$.Random.seed
[10:27:50.429]     if (FALSE) {
[10:27:50.429]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:27:50.429]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:27:50.429]     }
[10:27:50.429]     ...future.result <- base::tryCatch({
[10:27:50.429]         base::withCallingHandlers({
[10:27:50.429]             ...future.value <- base::withVisible(base::local(NA))
[10:27:50.429]             future::FutureResult(value = ...future.value$value, 
[10:27:50.429]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:27:50.429]                   ...future.rng), globalenv = if (FALSE) 
[10:27:50.429]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:27:50.429]                     ...future.globalenv.names))
[10:27:50.429]                 else NULL, started = ...future.startTime, version = "1.8")
[10:27:50.429]         }, condition = base::local({
[10:27:50.429]             c <- base::c
[10:27:50.429]             inherits <- base::inherits
[10:27:50.429]             invokeRestart <- base::invokeRestart
[10:27:50.429]             length <- base::length
[10:27:50.429]             list <- base::list
[10:27:50.429]             seq.int <- base::seq.int
[10:27:50.429]             signalCondition <- base::signalCondition
[10:27:50.429]             sys.calls <- base::sys.calls
[10:27:50.429]             `[[` <- base::`[[`
[10:27:50.429]             `+` <- base::`+`
[10:27:50.429]             `<<-` <- base::`<<-`
[10:27:50.429]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:27:50.429]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:27:50.429]                   3L)]
[10:27:50.429]             }
[10:27:50.429]             function(cond) {
[10:27:50.429]                 is_error <- inherits(cond, "error")
[10:27:50.429]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:27:50.429]                   NULL)
[10:27:50.429]                 if (is_error) {
[10:27:50.429]                   sessionInformation <- function() {
[10:27:50.429]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:27:50.429]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:27:50.429]                       search = base::search(), system = base::Sys.info())
[10:27:50.429]                   }
[10:27:50.429]                   ...future.conditions[[length(...future.conditions) + 
[10:27:50.429]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:27:50.429]                     cond$call), session = sessionInformation(), 
[10:27:50.429]                     timestamp = base::Sys.time(), signaled = 0L)
[10:27:50.429]                   signalCondition(cond)
[10:27:50.429]                 }
[10:27:50.429]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:27:50.429]                 "immediateCondition"))) {
[10:27:50.429]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:27:50.429]                   ...future.conditions[[length(...future.conditions) + 
[10:27:50.429]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:27:50.429]                   if (TRUE && !signal) {
[10:27:50.429]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:27:50.429]                     {
[10:27:50.429]                       inherits <- base::inherits
[10:27:50.429]                       invokeRestart <- base::invokeRestart
[10:27:50.429]                       is.null <- base::is.null
[10:27:50.429]                       muffled <- FALSE
[10:27:50.429]                       if (inherits(cond, "message")) {
[10:27:50.429]                         muffled <- grepl(pattern, "muffleMessage")
[10:27:50.429]                         if (muffled) 
[10:27:50.429]                           invokeRestart("muffleMessage")
[10:27:50.429]                       }
[10:27:50.429]                       else if (inherits(cond, "warning")) {
[10:27:50.429]                         muffled <- grepl(pattern, "muffleWarning")
[10:27:50.429]                         if (muffled) 
[10:27:50.429]                           invokeRestart("muffleWarning")
[10:27:50.429]                       }
[10:27:50.429]                       else if (inherits(cond, "condition")) {
[10:27:50.429]                         if (!is.null(pattern)) {
[10:27:50.429]                           computeRestarts <- base::computeRestarts
[10:27:50.429]                           grepl <- base::grepl
[10:27:50.429]                           restarts <- computeRestarts(cond)
[10:27:50.429]                           for (restart in restarts) {
[10:27:50.429]                             name <- restart$name
[10:27:50.429]                             if (is.null(name)) 
[10:27:50.429]                               next
[10:27:50.429]                             if (!grepl(pattern, name)) 
[10:27:50.429]                               next
[10:27:50.429]                             invokeRestart(restart)
[10:27:50.429]                             muffled <- TRUE
[10:27:50.429]                             break
[10:27:50.429]                           }
[10:27:50.429]                         }
[10:27:50.429]                       }
[10:27:50.429]                       invisible(muffled)
[10:27:50.429]                     }
[10:27:50.429]                     muffleCondition(cond, pattern = "^muffle")
[10:27:50.429]                   }
[10:27:50.429]                 }
[10:27:50.429]                 else {
[10:27:50.429]                   if (TRUE) {
[10:27:50.429]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:27:50.429]                     {
[10:27:50.429]                       inherits <- base::inherits
[10:27:50.429]                       invokeRestart <- base::invokeRestart
[10:27:50.429]                       is.null <- base::is.null
[10:27:50.429]                       muffled <- FALSE
[10:27:50.429]                       if (inherits(cond, "message")) {
[10:27:50.429]                         muffled <- grepl(pattern, "muffleMessage")
[10:27:50.429]                         if (muffled) 
[10:27:50.429]                           invokeRestart("muffleMessage")
[10:27:50.429]                       }
[10:27:50.429]                       else if (inherits(cond, "warning")) {
[10:27:50.429]                         muffled <- grepl(pattern, "muffleWarning")
[10:27:50.429]                         if (muffled) 
[10:27:50.429]                           invokeRestart("muffleWarning")
[10:27:50.429]                       }
[10:27:50.429]                       else if (inherits(cond, "condition")) {
[10:27:50.429]                         if (!is.null(pattern)) {
[10:27:50.429]                           computeRestarts <- base::computeRestarts
[10:27:50.429]                           grepl <- base::grepl
[10:27:50.429]                           restarts <- computeRestarts(cond)
[10:27:50.429]                           for (restart in restarts) {
[10:27:50.429]                             name <- restart$name
[10:27:50.429]                             if (is.null(name)) 
[10:27:50.429]                               next
[10:27:50.429]                             if (!grepl(pattern, name)) 
[10:27:50.429]                               next
[10:27:50.429]                             invokeRestart(restart)
[10:27:50.429]                             muffled <- TRUE
[10:27:50.429]                             break
[10:27:50.429]                           }
[10:27:50.429]                         }
[10:27:50.429]                       }
[10:27:50.429]                       invisible(muffled)
[10:27:50.429]                     }
[10:27:50.429]                     muffleCondition(cond, pattern = "^muffle")
[10:27:50.429]                   }
[10:27:50.429]                 }
[10:27:50.429]             }
[10:27:50.429]         }))
[10:27:50.429]     }, error = function(ex) {
[10:27:50.429]         base::structure(base::list(value = NULL, visible = NULL, 
[10:27:50.429]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:27:50.429]                 ...future.rng), started = ...future.startTime, 
[10:27:50.429]             finished = Sys.time(), session_uuid = NA_character_, 
[10:27:50.429]             version = "1.8"), class = "FutureResult")
[10:27:50.429]     }, finally = {
[10:27:50.429]         if (!identical(...future.workdir, getwd())) 
[10:27:50.429]             setwd(...future.workdir)
[10:27:50.429]         {
[10:27:50.429]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:27:50.429]                 ...future.oldOptions$nwarnings <- NULL
[10:27:50.429]             }
[10:27:50.429]             base::options(...future.oldOptions)
[10:27:50.429]             if (.Platform$OS.type == "windows") {
[10:27:50.429]                 old_names <- names(...future.oldEnvVars)
[10:27:50.429]                 envs <- base::Sys.getenv()
[10:27:50.429]                 names <- names(envs)
[10:27:50.429]                 common <- intersect(names, old_names)
[10:27:50.429]                 added <- setdiff(names, old_names)
[10:27:50.429]                 removed <- setdiff(old_names, names)
[10:27:50.429]                 changed <- common[...future.oldEnvVars[common] != 
[10:27:50.429]                   envs[common]]
[10:27:50.429]                 NAMES <- toupper(changed)
[10:27:50.429]                 args <- list()
[10:27:50.429]                 for (kk in seq_along(NAMES)) {
[10:27:50.429]                   name <- changed[[kk]]
[10:27:50.429]                   NAME <- NAMES[[kk]]
[10:27:50.429]                   if (name != NAME && is.element(NAME, old_names)) 
[10:27:50.429]                     next
[10:27:50.429]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:27:50.429]                 }
[10:27:50.429]                 NAMES <- toupper(added)
[10:27:50.429]                 for (kk in seq_along(NAMES)) {
[10:27:50.429]                   name <- added[[kk]]
[10:27:50.429]                   NAME <- NAMES[[kk]]
[10:27:50.429]                   if (name != NAME && is.element(NAME, old_names)) 
[10:27:50.429]                     next
[10:27:50.429]                   args[[name]] <- ""
[10:27:50.429]                 }
[10:27:50.429]                 NAMES <- toupper(removed)
[10:27:50.429]                 for (kk in seq_along(NAMES)) {
[10:27:50.429]                   name <- removed[[kk]]
[10:27:50.429]                   NAME <- NAMES[[kk]]
[10:27:50.429]                   if (name != NAME && is.element(NAME, old_names)) 
[10:27:50.429]                     next
[10:27:50.429]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:27:50.429]                 }
[10:27:50.429]                 if (length(args) > 0) 
[10:27:50.429]                   base::do.call(base::Sys.setenv, args = args)
[10:27:50.429]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:27:50.429]             }
[10:27:50.429]             else {
[10:27:50.429]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:27:50.429]             }
[10:27:50.429]             {
[10:27:50.429]                 if (base::length(...future.futureOptionsAdded) > 
[10:27:50.429]                   0L) {
[10:27:50.429]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:27:50.429]                   base::names(opts) <- ...future.futureOptionsAdded
[10:27:50.429]                   base::options(opts)
[10:27:50.429]                 }
[10:27:50.429]                 {
[10:27:50.429]                   {
[10:27:50.429]                     NULL
[10:27:50.429]                     RNGkind("Mersenne-Twister")
[10:27:50.429]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[10:27:50.429]                       inherits = FALSE)
[10:27:50.429]                   }
[10:27:50.429]                   options(future.plan = "multisession")
[10:27:50.429]                   if (is.na("")) 
[10:27:50.429]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:27:50.429]                   else Sys.setenv(R_FUTURE_PLAN = "")
[10:27:50.429]                   future::plan(list(function (..., workers = availableCores(), 
[10:27:50.429]                     lazy = FALSE, rscript_libs = .libPaths(), 
[10:27:50.429]                     envir = parent.frame()) 
[10:27:50.429]                   {
[10:27:50.429]                     if (is.function(workers)) 
[10:27:50.429]                       workers <- workers()
[10:27:50.429]                     workers <- structure(as.integer(workers), 
[10:27:50.429]                       class = class(workers))
[10:27:50.429]                     stop_if_not(length(workers) == 1, is.finite(workers), 
[10:27:50.429]                       workers >= 1)
[10:27:50.429]                     if (workers == 1L && !inherits(workers, "AsIs")) {
[10:27:50.429]                       return(sequential(..., lazy = TRUE, envir = envir))
[10:27:50.429]                     }
[10:27:50.429]                     future <- MultisessionFuture(..., workers = workers, 
[10:27:50.429]                       lazy = lazy, rscript_libs = rscript_libs, 
[10:27:50.429]                       envir = envir)
[10:27:50.429]                     if (!future$lazy) 
[10:27:50.429]                       future <- run(future)
[10:27:50.429]                     invisible(future)
[10:27:50.429]                   }), .cleanup = FALSE, .init = FALSE)
[10:27:50.429]                 }
[10:27:50.429]             }
[10:27:50.429]         }
[10:27:50.429]     })
[10:27:50.429]     if (TRUE) {
[10:27:50.429]         base::sink(type = "output", split = FALSE)
[10:27:50.429]         if (TRUE) {
[10:27:50.429]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:27:50.429]         }
[10:27:50.429]         else {
[10:27:50.429]             ...future.result["stdout"] <- base::list(NULL)
[10:27:50.429]         }
[10:27:50.429]         base::close(...future.stdout)
[10:27:50.429]         ...future.stdout <- NULL
[10:27:50.429]     }
[10:27:50.429]     ...future.result$conditions <- ...future.conditions
[10:27:50.429]     ...future.result$finished <- base::Sys.time()
[10:27:50.429]     ...future.result
[10:27:50.429] }
[10:27:50.431] plan(): Setting new future strategy stack:
[10:27:50.431] List of future strategies:
[10:27:50.431] 1. sequential:
[10:27:50.431]    - args: function (..., envir = parent.frame())
[10:27:50.431]    - tweaked: FALSE
[10:27:50.431]    - call: NULL
[10:27:50.432] plan(): nbrOfWorkers() = 1
[10:27:50.433] plan(): Setting new future strategy stack:
[10:27:50.433] List of future strategies:
[10:27:50.433] 1. multisession:
[10:27:50.433]    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[10:27:50.433]    - tweaked: FALSE
[10:27:50.433]    - call: plan("default")
[10:27:50.436] plan(): nbrOfWorkers() = 1
[10:27:50.436] SequentialFuture started (and completed)
[10:27:50.436] plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ... DONE
[10:27:50.440] plan(): nbrOfWorkers() = 1
> message("- .onLoad() w/ future.plan = 'multisession' & -p 1 ... DONE")
- .onLoad() w/ future.plan = 'multisession' & -p 1 ... DONE
> 
> message("- .onLoad() w/ future.plan = 'multisession' & -p 1 ...")
- .onLoad() w/ future.plan = 'multisession' & -p 1 ...
> options(future.plan = multisession, future.cmdargs = c("-p", "1"))
> .onLoad(pkgname, pkgname)
[10:27:50.441] Future-specific environment variables:
- R_FUTURE_PLAN=‘’
- R_FUTURE_WAIT_INTERVAL=‘0.01’
[10:27:50.441] Environment variable ‘R_FUTURE_DEMO_MANDELBROT_REGION’ not set
[10:27:50.441] Environment variable ‘R_FUTURE_DEMO_MANDELBROT_NROW’ not set
[10:27:50.441] Environment variable ‘R_FUTURE_DEPRECATED_IGNORE’ not set
[10:27:50.441] Environment variable ‘R_FUTURE_DEPRECATED_DEFUNCT’ not set
[10:27:50.441] Environment variable ‘R_FUTURE_FORK_MULTITHREADING_ENABLE’ not set
[10:27:50.441] Environment variable ‘R_FUTURE_GLOBALS_MAXSIZE’ not set
[10:27:50.441] Environment variable ‘R_FUTURE_GLOBALS_ONMISSING’ not set
[10:27:50.442] Environment variable ‘R_FUTURE_GLOBALS_ONREFERENCE’ not set
[10:27:50.442] Environment variable ‘R_FUTURE_GLOBALS_METHOD’ not set
[10:27:50.442] Environment variable ‘R_FUTURE_GLOBALS_RESOLVE’ not set
[10:27:50.442] Environment variable ‘R_FUTURE_LAZY_ASSERTOWNER’ not set
[10:27:50.442] Environment variable ‘R_FUTURE_PLAN_DISALLOW’ not set
[10:27:50.442] Environment variable ‘R_FUTURE_PSOCK_RELAY_IMMEDIATE’ not set
[10:27:50.442] Environment variable ‘R_FUTURE_RELAY_IMMEDIATE’ not set
[10:27:50.442] Environment variable ‘R_FUTURE_RESOLVE_RECURSIVE’ not set
[10:27:50.442] Environment variable ‘R_FUTURE_ALIVE_TIMEOUT’ not set
[10:27:50.443] Environment variable ‘R_FUTURE_RESOLVED_TIMEOUT’ not set
[10:27:50.443] Environment variable ‘R_FUTURE_CLUSTER_RESOLVED_TIMEOUT’ not set
[10:27:50.443] Environment variable ‘R_FUTURE_MULTICORE_RESOLVED_TIMEOUT’ not set
[10:27:50.443] Environment variable ‘R_FUTURE_ONFUTURECONDITION_KEEPFUTURE’ not set
[10:27:50.443] Environment variable ‘R_FUTURE_RNG_ONMISUSE’ not set
[10:27:50.443] Environment variable ‘R_FUTURE_GLOBALENV_ONMISUSE’ not set
[10:27:50.443] Environment variable ‘R_FUTURE_WAIT_TIMEOUT’ not set
[10:27:50.443] Environment variable ‘R_FUTURE_WAIT_ALPHA’ not set
[10:27:50.443] Environment variable ‘R_FUTURE_ASSIGN_GLOBALS_EXCLUDE’ not set
[10:27:50.444] Environment variable ‘R_FUTURE_OUTPUT_WINDOWS_REENCODE’ not set
[10:27:50.444] Environment variable ‘R_FUTURE_GLOBALS_GLOBALSOF_LOCALS’ not set
[10:27:50.444] Environment variable ‘R_FUTURE_STATE_ONINVALID’ not set
[10:27:50.444] Environment variable ‘R_FUTURE_JOURNAL’ not set
[10:27:50.444] Environment variable ‘R_FUTURE_GLOBALS_KEEPWHERE’ not set
[10:27:50.444] Option 'future.plan' of type ‘function’
[10:27:50.444] R command-line argument: -p 1
[10:27:50.445]  => 'future.plan' already set.
[10:27:50.445] R process uuid: 02bdf616-e82e-8268-20f6-d170051ac4ee
[10:27:50.445] Setting plan('default')
[10:27:50.445] plan(): Setting new future strategy stack:
[10:27:50.445] List of future strategies:
[10:27:50.445] 1. multisession:
[10:27:50.445]    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[10:27:50.445]    - tweaked: FALSE
[10:27:50.445]    - call: NULL
[10:27:50.448] plan(): nbrOfWorkers() = 1
> strategy <- plan("next")
> print(strategy)
multisession:
- args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
- tweaked: FALSE
- call: NULL
> stopifnot(inherits(strategy, "multisession"))
> plan("default")
[10:27:50.449] plan(): Setting new future strategy stack:
[10:27:50.449] List of future strategies:
[10:27:50.449] 1. multisession:
[10:27:50.449]    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[10:27:50.449]    - tweaked: FALSE
[10:27:50.449]    - call: NULL
[10:27:50.449] plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ...
[10:27:50.449] multisession:
[10:27:50.449] - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[10:27:50.449] - tweaked: FALSE
[10:27:50.449] - call: NULL
[10:27:50.452] getGlobalsAndPackages() ...
[10:27:50.453] Not searching for globals
[10:27:50.453] - globals: [0] <none>
[10:27:50.453] getGlobalsAndPackages() ... DONE
[10:27:50.453] Packages needed by the future expression (n = 0): <none>
[10:27:50.453] Packages needed by future strategies (n = 0): <none>
[10:27:50.454] {
[10:27:50.454]     {
[10:27:50.454]         {
[10:27:50.454]             ...future.startTime <- base::Sys.time()
[10:27:50.454]             {
[10:27:50.454]                 {
[10:27:50.454]                   {
[10:27:50.454]                     base::local({
[10:27:50.454]                       has_future <- base::requireNamespace("future", 
[10:27:50.454]                         quietly = TRUE)
[10:27:50.454]                       if (has_future) {
[10:27:50.454]                         ns <- base::getNamespace("future")
[10:27:50.454]                         version <- ns[[".package"]][["version"]]
[10:27:50.454]                         if (is.null(version)) 
[10:27:50.454]                           version <- utils::packageVersion("future")
[10:27:50.454]                       }
[10:27:50.454]                       else {
[10:27:50.454]                         version <- NULL
[10:27:50.454]                       }
[10:27:50.454]                       if (!has_future || version < "1.8.0") {
[10:27:50.454]                         info <- base::c(r_version = base::gsub("R version ", 
[10:27:50.454]                           "", base::R.version$version.string), 
[10:27:50.454]                           platform = base::sprintf("%s (%s-bit)", 
[10:27:50.454]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:27:50.454]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[10:27:50.454]                             "release", "version")], collapse = " "), 
[10:27:50.454]                           hostname = base::Sys.info()[["nodename"]])
[10:27:50.454]                         info <- base::sprintf("%s: %s", base::names(info), 
[10:27:50.454]                           info)
[10:27:50.454]                         info <- base::paste(info, collapse = "; ")
[10:27:50.454]                         if (!has_future) {
[10:27:50.454]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:27:50.454]                             info)
[10:27:50.454]                         }
[10:27:50.454]                         else {
[10:27:50.454]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:27:50.454]                             info, version)
[10:27:50.454]                         }
[10:27:50.454]                         base::stop(msg)
[10:27:50.454]                       }
[10:27:50.454]                     })
[10:27:50.454]                   }
[10:27:50.454]                   options(future.plan = NULL)
[10:27:50.454]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:27:50.454]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:27:50.454]                 }
[10:27:50.454]                 ...future.workdir <- getwd()
[10:27:50.454]             }
[10:27:50.454]             ...future.oldOptions <- base::as.list(base::.Options)
[10:27:50.454]             ...future.oldEnvVars <- base::Sys.getenv()
[10:27:50.454]         }
[10:27:50.454]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:27:50.454]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[10:27:50.454]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:27:50.454]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:27:50.454]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:27:50.454]             future.stdout.windows.reencode = NULL, width = 80L)
[10:27:50.454]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:27:50.454]             base::names(...future.oldOptions))
[10:27:50.454]     }
[10:27:50.454]     if (FALSE) {
[10:27:50.454]     }
[10:27:50.454]     else {
[10:27:50.454]         if (TRUE) {
[10:27:50.454]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:27:50.454]                 open = "w")
[10:27:50.454]         }
[10:27:50.454]         else {
[10:27:50.454]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:27:50.454]                 windows = "NUL", "/dev/null"), open = "w")
[10:27:50.454]         }
[10:27:50.454]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:27:50.454]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:27:50.454]             base::sink(type = "output", split = FALSE)
[10:27:50.454]             base::close(...future.stdout)
[10:27:50.454]         }, add = TRUE)
[10:27:50.454]     }
[10:27:50.454]     ...future.frame <- base::sys.nframe()
[10:27:50.454]     ...future.conditions <- base::list()
[10:27:50.454]     ...future.rng <- base::globalenv()$.Random.seed
[10:27:50.454]     if (FALSE) {
[10:27:50.454]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:27:50.454]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:27:50.454]     }
[10:27:50.454]     ...future.result <- base::tryCatch({
[10:27:50.454]         base::withCallingHandlers({
[10:27:50.454]             ...future.value <- base::withVisible(base::local(NA))
[10:27:50.454]             future::FutureResult(value = ...future.value$value, 
[10:27:50.454]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:27:50.454]                   ...future.rng), globalenv = if (FALSE) 
[10:27:50.454]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:27:50.454]                     ...future.globalenv.names))
[10:27:50.454]                 else NULL, started = ...future.startTime, version = "1.8")
[10:27:50.454]         }, condition = base::local({
[10:27:50.454]             c <- base::c
[10:27:50.454]             inherits <- base::inherits
[10:27:50.454]             invokeRestart <- base::invokeRestart
[10:27:50.454]             length <- base::length
[10:27:50.454]             list <- base::list
[10:27:50.454]             seq.int <- base::seq.int
[10:27:50.454]             signalCondition <- base::signalCondition
[10:27:50.454]             sys.calls <- base::sys.calls
[10:27:50.454]             `[[` <- base::`[[`
[10:27:50.454]             `+` <- base::`+`
[10:27:50.454]             `<<-` <- base::`<<-`
[10:27:50.454]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:27:50.454]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:27:50.454]                   3L)]
[10:27:50.454]             }
[10:27:50.454]             function(cond) {
[10:27:50.454]                 is_error <- inherits(cond, "error")
[10:27:50.454]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:27:50.454]                   NULL)
[10:27:50.454]                 if (is_error) {
[10:27:50.454]                   sessionInformation <- function() {
[10:27:50.454]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:27:50.454]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:27:50.454]                       search = base::search(), system = base::Sys.info())
[10:27:50.454]                   }
[10:27:50.454]                   ...future.conditions[[length(...future.conditions) + 
[10:27:50.454]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:27:50.454]                     cond$call), session = sessionInformation(), 
[10:27:50.454]                     timestamp = base::Sys.time(), signaled = 0L)
[10:27:50.454]                   signalCondition(cond)
[10:27:50.454]                 }
[10:27:50.454]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:27:50.454]                 "immediateCondition"))) {
[10:27:50.454]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:27:50.454]                   ...future.conditions[[length(...future.conditions) + 
[10:27:50.454]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:27:50.454]                   if (TRUE && !signal) {
[10:27:50.454]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:27:50.454]                     {
[10:27:50.454]                       inherits <- base::inherits
[10:27:50.454]                       invokeRestart <- base::invokeRestart
[10:27:50.454]                       is.null <- base::is.null
[10:27:50.454]                       muffled <- FALSE
[10:27:50.454]                       if (inherits(cond, "message")) {
[10:27:50.454]                         muffled <- grepl(pattern, "muffleMessage")
[10:27:50.454]                         if (muffled) 
[10:27:50.454]                           invokeRestart("muffleMessage")
[10:27:50.454]                       }
[10:27:50.454]                       else if (inherits(cond, "warning")) {
[10:27:50.454]                         muffled <- grepl(pattern, "muffleWarning")
[10:27:50.454]                         if (muffled) 
[10:27:50.454]                           invokeRestart("muffleWarning")
[10:27:50.454]                       }
[10:27:50.454]                       else if (inherits(cond, "condition")) {
[10:27:50.454]                         if (!is.null(pattern)) {
[10:27:50.454]                           computeRestarts <- base::computeRestarts
[10:27:50.454]                           grepl <- base::grepl
[10:27:50.454]                           restarts <- computeRestarts(cond)
[10:27:50.454]                           for (restart in restarts) {
[10:27:50.454]                             name <- restart$name
[10:27:50.454]                             if (is.null(name)) 
[10:27:50.454]                               next
[10:27:50.454]                             if (!grepl(pattern, name)) 
[10:27:50.454]                               next
[10:27:50.454]                             invokeRestart(restart)
[10:27:50.454]                             muffled <- TRUE
[10:27:50.454]                             break
[10:27:50.454]                           }
[10:27:50.454]                         }
[10:27:50.454]                       }
[10:27:50.454]                       invisible(muffled)
[10:27:50.454]                     }
[10:27:50.454]                     muffleCondition(cond, pattern = "^muffle")
[10:27:50.454]                   }
[10:27:50.454]                 }
[10:27:50.454]                 else {
[10:27:50.454]                   if (TRUE) {
[10:27:50.454]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:27:50.454]                     {
[10:27:50.454]                       inherits <- base::inherits
[10:27:50.454]                       invokeRestart <- base::invokeRestart
[10:27:50.454]                       is.null <- base::is.null
[10:27:50.454]                       muffled <- FALSE
[10:27:50.454]                       if (inherits(cond, "message")) {
[10:27:50.454]                         muffled <- grepl(pattern, "muffleMessage")
[10:27:50.454]                         if (muffled) 
[10:27:50.454]                           invokeRestart("muffleMessage")
[10:27:50.454]                       }
[10:27:50.454]                       else if (inherits(cond, "warning")) {
[10:27:50.454]                         muffled <- grepl(pattern, "muffleWarning")
[10:27:50.454]                         if (muffled) 
[10:27:50.454]                           invokeRestart("muffleWarning")
[10:27:50.454]                       }
[10:27:50.454]                       else if (inherits(cond, "condition")) {
[10:27:50.454]                         if (!is.null(pattern)) {
[10:27:50.454]                           computeRestarts <- base::computeRestarts
[10:27:50.454]                           grepl <- base::grepl
[10:27:50.454]                           restarts <- computeRestarts(cond)
[10:27:50.454]                           for (restart in restarts) {
[10:27:50.454]                             name <- restart$name
[10:27:50.454]                             if (is.null(name)) 
[10:27:50.454]                               next
[10:27:50.454]                             if (!grepl(pattern, name)) 
[10:27:50.454]                               next
[10:27:50.454]                             invokeRestart(restart)
[10:27:50.454]                             muffled <- TRUE
[10:27:50.454]                             break
[10:27:50.454]                           }
[10:27:50.454]                         }
[10:27:50.454]                       }
[10:27:50.454]                       invisible(muffled)
[10:27:50.454]                     }
[10:27:50.454]                     muffleCondition(cond, pattern = "^muffle")
[10:27:50.454]                   }
[10:27:50.454]                 }
[10:27:50.454]             }
[10:27:50.454]         }))
[10:27:50.454]     }, error = function(ex) {
[10:27:50.454]         base::structure(base::list(value = NULL, visible = NULL, 
[10:27:50.454]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:27:50.454]                 ...future.rng), started = ...future.startTime, 
[10:27:50.454]             finished = Sys.time(), session_uuid = NA_character_, 
[10:27:50.454]             version = "1.8"), class = "FutureResult")
[10:27:50.454]     }, finally = {
[10:27:50.454]         if (!identical(...future.workdir, getwd())) 
[10:27:50.454]             setwd(...future.workdir)
[10:27:50.454]         {
[10:27:50.454]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:27:50.454]                 ...future.oldOptions$nwarnings <- NULL
[10:27:50.454]             }
[10:27:50.454]             base::options(...future.oldOptions)
[10:27:50.454]             if (.Platform$OS.type == "windows") {
[10:27:50.454]                 old_names <- names(...future.oldEnvVars)
[10:27:50.454]                 envs <- base::Sys.getenv()
[10:27:50.454]                 names <- names(envs)
[10:27:50.454]                 common <- intersect(names, old_names)
[10:27:50.454]                 added <- setdiff(names, old_names)
[10:27:50.454]                 removed <- setdiff(old_names, names)
[10:27:50.454]                 changed <- common[...future.oldEnvVars[common] != 
[10:27:50.454]                   envs[common]]
[10:27:50.454]                 NAMES <- toupper(changed)
[10:27:50.454]                 args <- list()
[10:27:50.454]                 for (kk in seq_along(NAMES)) {
[10:27:50.454]                   name <- changed[[kk]]
[10:27:50.454]                   NAME <- NAMES[[kk]]
[10:27:50.454]                   if (name != NAME && is.element(NAME, old_names)) 
[10:27:50.454]                     next
[10:27:50.454]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:27:50.454]                 }
[10:27:50.454]                 NAMES <- toupper(added)
[10:27:50.454]                 for (kk in seq_along(NAMES)) {
[10:27:50.454]                   name <- added[[kk]]
[10:27:50.454]                   NAME <- NAMES[[kk]]
[10:27:50.454]                   if (name != NAME && is.element(NAME, old_names)) 
[10:27:50.454]                     next
[10:27:50.454]                   args[[name]] <- ""
[10:27:50.454]                 }
[10:27:50.454]                 NAMES <- toupper(removed)
[10:27:50.454]                 for (kk in seq_along(NAMES)) {
[10:27:50.454]                   name <- removed[[kk]]
[10:27:50.454]                   NAME <- NAMES[[kk]]
[10:27:50.454]                   if (name != NAME && is.element(NAME, old_names)) 
[10:27:50.454]                     next
[10:27:50.454]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:27:50.454]                 }
[10:27:50.454]                 if (length(args) > 0) 
[10:27:50.454]                   base::do.call(base::Sys.setenv, args = args)
[10:27:50.454]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:27:50.454]             }
[10:27:50.454]             else {
[10:27:50.454]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:27:50.454]             }
[10:27:50.454]             {
[10:27:50.454]                 if (base::length(...future.futureOptionsAdded) > 
[10:27:50.454]                   0L) {
[10:27:50.454]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:27:50.454]                   base::names(opts) <- ...future.futureOptionsAdded
[10:27:50.454]                   base::options(opts)
[10:27:50.454]                 }
[10:27:50.454]                 {
[10:27:50.454]                   {
[10:27:50.454]                     NULL
[10:27:50.454]                     RNGkind("Mersenne-Twister")
[10:27:50.454]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[10:27:50.454]                       inherits = FALSE)
[10:27:50.454]                   }
[10:27:50.454]                   options(future.plan = function (..., workers = availableCores(), 
[10:27:50.454]                     lazy = FALSE, rscript_libs = .libPaths(), 
[10:27:50.454]                     envir = parent.frame()) 
[10:27:50.454]                   {
[10:27:50.454]                     if (is.function(workers)) 
[10:27:50.454]                       workers <- workers()
[10:27:50.454]                     workers <- structure(as.integer(workers), 
[10:27:50.454]                       class = class(workers))
[10:27:50.454]                     stop_if_not(length(workers) == 1, is.finite(workers), 
[10:27:50.454]                       workers >= 1)
[10:27:50.454]                     if (workers == 1L && !inherits(workers, "AsIs")) {
[10:27:50.454]                       return(sequential(..., lazy = TRUE, envir = envir))
[10:27:50.454]                     }
[10:27:50.454]                     future <- MultisessionFuture(..., workers = workers, 
[10:27:50.454]                       lazy = lazy, rscript_libs = rscript_libs, 
[10:27:50.454]                       envir = envir)
[10:27:50.454]                     if (!future$lazy) 
[10:27:50.454]                       future <- run(future)
[10:27:50.454]                     invisible(future)
[10:27:50.454]                   })
[10:27:50.454]                   if (is.na("")) 
[10:27:50.454]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:27:50.454]                   else Sys.setenv(R_FUTURE_PLAN = "")
[10:27:50.454]                   future::plan(list(function (..., workers = availableCores(), 
[10:27:50.454]                     lazy = FALSE, rscript_libs = .libPaths(), 
[10:27:50.454]                     envir = parent.frame()) 
[10:27:50.454]                   {
[10:27:50.454]                     if (is.function(workers)) 
[10:27:50.454]                       workers <- workers()
[10:27:50.454]                     workers <- structure(as.integer(workers), 
[10:27:50.454]                       class = class(workers))
[10:27:50.454]                     stop_if_not(length(workers) == 1, is.finite(workers), 
[10:27:50.454]                       workers >= 1)
[10:27:50.454]                     if (workers == 1L && !inherits(workers, "AsIs")) {
[10:27:50.454]                       return(sequential(..., lazy = TRUE, envir = envir))
[10:27:50.454]                     }
[10:27:50.454]                     future <- MultisessionFuture(..., workers = workers, 
[10:27:50.454]                       lazy = lazy, rscript_libs = rscript_libs, 
[10:27:50.454]                       envir = envir)
[10:27:50.454]                     if (!future$lazy) 
[10:27:50.454]                       future <- run(future)
[10:27:50.454]                     invisible(future)
[10:27:50.454]                   }), .cleanup = FALSE, .init = FALSE)
[10:27:50.454]                 }
[10:27:50.454]             }
[10:27:50.454]         }
[10:27:50.454]     })
[10:27:50.454]     if (TRUE) {
[10:27:50.454]         base::sink(type = "output", split = FALSE)
[10:27:50.454]         if (TRUE) {
[10:27:50.454]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:27:50.454]         }
[10:27:50.454]         else {
[10:27:50.454]             ...future.result["stdout"] <- base::list(NULL)
[10:27:50.454]         }
[10:27:50.454]         base::close(...future.stdout)
[10:27:50.454]         ...future.stdout <- NULL
[10:27:50.454]     }
[10:27:50.454]     ...future.result$conditions <- ...future.conditions
[10:27:50.454]     ...future.result$finished <- base::Sys.time()
[10:27:50.454]     ...future.result
[10:27:50.454] }
[10:27:50.456] plan(): Setting new future strategy stack:
[10:27:50.456] List of future strategies:
[10:27:50.456] 1. sequential:
[10:27:50.456]    - args: function (..., envir = parent.frame())
[10:27:50.456]    - tweaked: FALSE
[10:27:50.456]    - call: NULL
[10:27:50.457] plan(): nbrOfWorkers() = 1
[10:27:50.458] plan(): Setting new future strategy stack:
[10:27:50.458] List of future strategies:
[10:27:50.458] 1. multisession:
[10:27:50.458]    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[10:27:50.458]    - tweaked: FALSE
[10:27:50.458]    - call: NULL
[10:27:50.461] plan(): nbrOfWorkers() = 1
[10:27:50.462] SequentialFuture started (and completed)
[10:27:50.462] plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ... DONE
[10:27:50.465] plan(): nbrOfWorkers() = 1
> message("- .onLoad() w/ future.plan = 'multisession' & -p 1 ... DONE")
- .onLoad() w/ future.plan = 'multisession' & -p 1 ... DONE
> 
> options(future.plan = NULL, future.cmdargs = NULL, future.availableCores.system = NULL, future.availableCores.fallback = NULL)
> 
> message("*** .onLoad() ... DONE")
*** .onLoad() ... DONE
> 
> 
> message("*** .onAttach() ...")
*** .onAttach() ...
> 
> pkgname <- "future"
> 
> message("- .onAttach() w/ option future.startup.loadScript ...")
- .onAttach() w/ option future.startup.loadScript ...
> 
> for (value in list(NULL, FALSE, TRUE)) {
+   options(future.startup.loadScript = value)
+   .onAttach(pkgname, pkgname)
+ }
[10:27:50.468] Option 'future.startup.script': TRUE
[10:27:50.468] Future startup scripts considered: ‘.future.R’, ‘~/.future.R’
[10:27:50.468] Future startup scripts found: <none>
[10:27:50.468] Option 'future.startup.script': TRUE
[10:27:50.468] Future startup scripts considered: ‘.future.R’, ‘~/.future.R’
[10:27:50.468] Future startup scripts found: <none>
[10:27:50.469] Option 'future.startup.script': TRUE
[10:27:50.469] Future startup scripts considered: ‘.future.R’, ‘~/.future.R’
[10:27:50.469] Future startup scripts found: <none>
> 
> message("- .onAttach() w/ option future.startup.loadScript ... DONE")
- .onAttach() w/ option future.startup.loadScript ... DONE
> 
> message("- .onAttach() with ./.future.R ...")
- .onAttach() with ./.future.R ...
> 
> pathname <- ".future.R"
> xyz <- 0L
> cat("xyz <- 42L; cat('ping\n')\n", file = pathname)
> .onAttach(pkgname, pkgname)
[10:27:50.472] Option 'future.startup.script': TRUE
[10:27:50.472] Future startup scripts considered: ‘.future.R’, ‘~/.future.R’
[10:27:50.472] Future startup scripts found: ‘.future.R’
[10:27:50.472] Future startup script to load: ‘.future.R’
ping
[1] ".future.R"
> print(xyz)
[1] 42
> stopifnot(is.integer(xyz), xyz >= 0, xyz == 42L)
> file.remove(pathname)
[1] TRUE
> 
> message("- .onAttach() with ./.future.R ... DONE")
- .onAttach() with ./.future.R ... DONE
> 
> message("*** .onAttach() ... DONE")
*** .onAttach() ... DONE
> 
> 
> source("incl/end.R")
[10:27:50.473] plan(): Setting new future strategy stack:
[10:27:50.473] List of future strategies:
[10:27:50.473] 1. FutureStrategy:
[10:27:50.473]    - args: function (..., envir = parent.frame())
[10:27:50.473]    - tweaked: FALSE
[10:27:50.473]    - call: future::plan(oplan)
[10:27:50.474] plan(): nbrOfWorkers() = 1
> 
