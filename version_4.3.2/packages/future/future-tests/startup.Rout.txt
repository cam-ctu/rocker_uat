
R version 4.3.2 (2023-10-31) -- "Eye Holes"
Copyright (C) 2023 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> source("incl/start.R")
[13:25:09.319] plan(): Setting new future strategy stack:
[13:25:09.319] List of future strategies:
[13:25:09.319] 1. sequential:
[13:25:09.319]    - args: function (..., envir = parent.frame())
[13:25:09.319]    - tweaked: FALSE
[13:25:09.319]    - call: future::plan("sequential")
[13:25:09.334] plan(): nbrOfWorkers() = 1
> 
> maxCores <- min(2L, availableCores(methods = "system"))
> 
> 
> plan("default")
[13:25:09.344] plan(): Setting new future strategy stack:
[13:25:09.344] List of future strategies:
[13:25:09.344] 1. sequential:
[13:25:09.344]    - args: function (..., envir = parent.frame())
[13:25:09.344]    - tweaked: FALSE
[13:25:09.344]    - call: NULL
[13:25:09.355] plan(): nbrOfWorkers() = 1
> strategy0 <- plan()
>  
> message("*** parseCmdArgs() ...")
*** parseCmdArgs() ...
> 
> args <- parseCmdArgs()
> str(args)
 list()
> 
> options(future.plan = NULL, future.cmdargs = c("-p", 1L))
> args <- parseCmdArgs()
> str(args)
List of 1
 $ p: int 1
> stopifnot(args$p == 1L)
> 
> options(future.plan = NULL, future.cmdargs = c(sprintf("--parallel=%d", maxCores)))
> args <- parseCmdArgs()
> str(args)
List of 1
 $ p: int 2
> stopifnot(args$p == maxCores)
> 
> options(future.plan = NULL, future.cmdargs = c("-p", 1L, sprintf("--parallel=%d", maxCores)))
> args <- parseCmdArgs()
> str(args)
List of 1
 $ p: int 2
> stopifnot(args$p == maxCores)
> 
> options(future.plan = NULL, future.cmdargs = c("-p", 0L))
> args <- parseCmdArgs()
Warning: future: Ignoring invalid number of processes specified in command-line option: -p 0
> stopifnot(is.null(args$p))
> res <- tryCatch(parseCmdArgs(), warning = function(w) w)
> stopifnot(inherits(res, "warning"))
> 
> options(future.plan = NULL, future.cmdargs = c("-p", .Machine$integer.max))
> args <- parseCmdArgs()
Warning: future: Ignoring requested number of processes, because it is greater than the number of cores/child processes available (= 4) to this R process: -p 2147483647
> stopifnot(is.null(args$p))
> res <- tryCatch(parseCmdArgs(), warning = function(w) w)
> stopifnot(inherits(res, "warning"))
> 
> options(future.plan = NULL, future.cmdargs = NULL)
> 
> message("*** parseCmdArgs() ... DONE")
*** parseCmdArgs() ... DONE
> 
> 
> 
> message("*** .onLoad() ...")
*** .onLoad() ...
> plan("default")
[13:25:09.362] plan(): Setting new future strategy stack:
[13:25:09.362] List of future strategies:
[13:25:09.362] 1. sequential:
[13:25:09.362]    - args: function (..., envir = parent.frame())
[13:25:09.362]    - tweaked: FALSE
[13:25:09.362]    - call: NULL
[13:25:09.362] plan(): nbrOfWorkers() = 1
> pkgname <- "future"
> 
> message("- .onLoad() w/out command-line options ...")
- .onLoad() w/out command-line options ...
> options(future.plan = NULL, future.cmdargs = NULL)
> .onLoad(pkgname, pkgname)
[13:25:09.363] Future-specific environment variables:
- R_FUTURE_WAIT_INTERVAL=‘0.01’
[13:25:09.363] Environment variable ‘R_FUTURE_DEMO_MANDELBROT_REGION’ not set
[13:25:09.364] Environment variable ‘R_FUTURE_DEMO_MANDELBROT_NROW’ not set
[13:25:09.364] Environment variable ‘R_FUTURE_DEPRECATED_IGNORE’ not set
[13:25:09.364] Environment variable ‘R_FUTURE_DEPRECATED_DEFUNCT’ not set
[13:25:09.364] Environment variable ‘R_FUTURE_FORK_MULTITHREADING_ENABLE’ not set
[13:25:09.364] Environment variable ‘R_FUTURE_GLOBALS_MAXSIZE’ not set
[13:25:09.364] Environment variable ‘R_FUTURE_GLOBALS_ONMISSING’ not set
[13:25:09.364] Environment variable ‘R_FUTURE_GLOBALS_ONREFERENCE’ not set
[13:25:09.364] Environment variable ‘R_FUTURE_GLOBALS_METHOD’ not set
[13:25:09.364] Environment variable ‘R_FUTURE_GLOBALS_RESOLVE’ not set
[13:25:09.365] Environment variable ‘R_FUTURE_LAZY_ASSERTOWNER’ not set
[13:25:09.365] Environment variable ‘R_FUTURE_PLAN’ not set
[13:25:09.365] Environment variable ‘R_FUTURE_PLAN_DISALLOW’ not set
[13:25:09.365] Environment variable ‘R_FUTURE_PSOCK_RELAY_IMMEDIATE’ not set
[13:25:09.365] Environment variable ‘R_FUTURE_RELAY_IMMEDIATE’ not set
[13:25:09.365] Environment variable ‘R_FUTURE_RESOLVE_RECURSIVE’ not set
[13:25:09.365] Environment variable ‘R_FUTURE_ALIVE_TIMEOUT’ not set
[13:25:09.365] Environment variable ‘R_FUTURE_RESOLVED_TIMEOUT’ not set
[13:25:09.365] Environment variable ‘R_FUTURE_CLUSTER_RESOLVED_TIMEOUT’ not set
[13:25:09.366] Environment variable ‘R_FUTURE_MULTICORE_RESOLVED_TIMEOUT’ not set
[13:25:09.366] Environment variable ‘R_FUTURE_ONFUTURECONDITION_KEEPFUTURE’ not set
[13:25:09.366] Environment variable ‘R_FUTURE_RNG_ONMISUSE’ not set
[13:25:09.366] Environment variable ‘R_FUTURE_GLOBALENV_ONMISUSE’ not set
[13:25:09.366] Environment variable ‘R_FUTURE_WAIT_TIMEOUT’ not set
[13:25:09.366] R_FUTURE_WAIT_INTERVAL=‘0.01’
[13:25:09.366] Coercing from character to numeric: ‘0.01’
[13:25:09.366] => options(“future.wait.interval” = ‘0.01’) [n=1, mode=double]
[13:25:09.367] Environment variable ‘R_FUTURE_WAIT_ALPHA’ not set
[13:25:09.367] Environment variable ‘R_FUTURE_ASSIGN_GLOBALS_EXCLUDE’ not set
[13:25:09.367] Environment variable ‘R_FUTURE_OUTPUT_WINDOWS_REENCODE’ not set
[13:25:09.367] Environment variable ‘R_FUTURE_GLOBALS_GLOBALSOF_LOCALS’ not set
[13:25:09.367] Environment variable ‘R_FUTURE_STATE_ONINVALID’ not set
[13:25:09.367] Environment variable ‘R_FUTURE_JOURNAL’ not set
[13:25:09.367] Environment variable ‘R_FUTURE_GLOBALS_KEEPWHERE’ not set
[13:25:09.367] R process uuid: 23a78189-cf97-f775-96c6-d0d164da4543
[13:25:09.368] Setting plan('default')
[13:25:09.368] plan(): Setting new future strategy stack:
[13:25:09.368] List of future strategies:
[13:25:09.368] 1. sequential:
[13:25:09.368]    - args: function (..., envir = parent.frame())
[13:25:09.368]    - tweaked: FALSE
[13:25:09.368]    - call: NULL
[13:25:09.368] plan(): nbrOfWorkers() = 1
> strategy <- plan("next")
> print(strategy)
sequential:
- args: function (..., envir = parent.frame())
- tweaked: FALSE
- call: NULL
> stopifnot(all(class(strategy) == class(strategy0)))
> plan("default")
[13:25:09.369] plan(): Setting new future strategy stack:
[13:25:09.369] List of future strategies:
[13:25:09.369] 1. sequential:
[13:25:09.369]    - args: function (..., envir = parent.frame())
[13:25:09.369]    - tweaked: FALSE
[13:25:09.369]    - call: NULL
[13:25:09.369] plan(): nbrOfWorkers() = 1
> message("- .onLoad() w/out command-line options ... DONE")
- .onLoad() w/out command-line options ... DONE
> 
> message("- .onLoad() w/ -p 1 ...")
- .onLoad() w/ -p 1 ...
> options(future.plan = NULL, future.cmdargs = c("-p", 1))
> .onLoad(pkgname, pkgname)
[13:25:09.370] Future-specific environment variables:
- R_FUTURE_WAIT_INTERVAL=‘0.01’
[13:25:09.370] Environment variable ‘R_FUTURE_DEMO_MANDELBROT_REGION’ not set
[13:25:09.370] Environment variable ‘R_FUTURE_DEMO_MANDELBROT_NROW’ not set
[13:25:09.370] Environment variable ‘R_FUTURE_DEPRECATED_IGNORE’ not set
[13:25:09.370] Environment variable ‘R_FUTURE_DEPRECATED_DEFUNCT’ not set
[13:25:09.370] Environment variable ‘R_FUTURE_FORK_MULTITHREADING_ENABLE’ not set
[13:25:09.371] Environment variable ‘R_FUTURE_GLOBALS_MAXSIZE’ not set
[13:25:09.371] Environment variable ‘R_FUTURE_GLOBALS_ONMISSING’ not set
[13:25:09.371] Environment variable ‘R_FUTURE_GLOBALS_ONREFERENCE’ not set
[13:25:09.371] Environment variable ‘R_FUTURE_GLOBALS_METHOD’ not set
[13:25:09.371] Environment variable ‘R_FUTURE_GLOBALS_RESOLVE’ not set
[13:25:09.371] Environment variable ‘R_FUTURE_LAZY_ASSERTOWNER’ not set
[13:25:09.371] Environment variable ‘R_FUTURE_PLAN’ not set
[13:25:09.371] Environment variable ‘R_FUTURE_PLAN_DISALLOW’ not set
[13:25:09.371] Environment variable ‘R_FUTURE_PSOCK_RELAY_IMMEDIATE’ not set
[13:25:09.372] Environment variable ‘R_FUTURE_RELAY_IMMEDIATE’ not set
[13:25:09.372] Environment variable ‘R_FUTURE_RESOLVE_RECURSIVE’ not set
[13:25:09.372] Environment variable ‘R_FUTURE_ALIVE_TIMEOUT’ not set
[13:25:09.372] Environment variable ‘R_FUTURE_RESOLVED_TIMEOUT’ not set
[13:25:09.372] Environment variable ‘R_FUTURE_CLUSTER_RESOLVED_TIMEOUT’ not set
[13:25:09.372] Environment variable ‘R_FUTURE_MULTICORE_RESOLVED_TIMEOUT’ not set
[13:25:09.372] Environment variable ‘R_FUTURE_ONFUTURECONDITION_KEEPFUTURE’ not set
[13:25:09.372] Environment variable ‘R_FUTURE_RNG_ONMISUSE’ not set
[13:25:09.372] Environment variable ‘R_FUTURE_GLOBALENV_ONMISUSE’ not set
[13:25:09.374] Environment variable ‘R_FUTURE_WAIT_TIMEOUT’ not set
[13:25:09.375] Environment variable ‘R_FUTURE_WAIT_ALPHA’ not set
[13:25:09.375] Environment variable ‘R_FUTURE_ASSIGN_GLOBALS_EXCLUDE’ not set
[13:25:09.375] Environment variable ‘R_FUTURE_OUTPUT_WINDOWS_REENCODE’ not set
[13:25:09.375] Environment variable ‘R_FUTURE_GLOBALS_GLOBALSOF_LOCALS’ not set
[13:25:09.375] Environment variable ‘R_FUTURE_STATE_ONINVALID’ not set
[13:25:09.375] Environment variable ‘R_FUTURE_JOURNAL’ not set
[13:25:09.375] Environment variable ‘R_FUTURE_GLOBALS_KEEPWHERE’ not set
[13:25:09.376] R command-line argument: -p 1
[13:25:09.376]  => options(future.plan = sequential)
[13:25:09.376] R process uuid: 23a78189-cf97-f775-96c6-d0d164da4543
[13:25:09.376] Setting plan('default')
[13:25:09.376] plan(): Setting new future strategy stack:
[13:25:09.376] List of future strategies:
[13:25:09.376] 1. sequential:
[13:25:09.376]    - args: function (..., envir = parent.frame())
[13:25:09.376]    - tweaked: FALSE
[13:25:09.376]    - call: NULL
[13:25:09.376] plan(): nbrOfWorkers() = 1
> strategy <- plan("next")
> print(strategy)
sequential:
- args: function (..., envir = parent.frame())
- tweaked: FALSE
- call: NULL
> ## future.plan can be either a string or a future function
> default <- getOption("future.plan", "sequential")
> if (is.function(default)) default <- class(default)
> stopifnot(inherits(strategy, default))
> plan("default")
[13:25:09.377] plan(): Setting new future strategy stack:
[13:25:09.377] List of future strategies:
[13:25:09.377] 1. sequential:
[13:25:09.377]    - args: function (..., envir = parent.frame())
[13:25:09.377]    - tweaked: FALSE
[13:25:09.377]    - call: NULL
[13:25:09.377] plan(): nbrOfWorkers() = 1
> message("- .onLoad() w/ -p 1 ... DONE")
- .onLoad() w/ -p 1 ... DONE
> 
> message("- .onLoad() w/ --parallel=1 ...")
- .onLoad() w/ --parallel=1 ...
> plan("default")
[13:25:09.377] plan(): Setting new future strategy stack:
[13:25:09.378] List of future strategies:
[13:25:09.378] 1. sequential:
[13:25:09.378]    - args: function (..., envir = parent.frame())
[13:25:09.378]    - tweaked: FALSE
[13:25:09.378]    - call: NULL
[13:25:09.378] plan(): nbrOfWorkers() = 1
> options(future.plan = NULL, future.cmdargs = "-parallel=1")
> .onLoad(pkgname, pkgname)
[13:25:09.379] Future-specific environment variables:
- R_FUTURE_WAIT_INTERVAL=‘0.01’
[13:25:09.379] Environment variable ‘R_FUTURE_DEMO_MANDELBROT_REGION’ not set
[13:25:09.379] Environment variable ‘R_FUTURE_DEMO_MANDELBROT_NROW’ not set
[13:25:09.379] Environment variable ‘R_FUTURE_DEPRECATED_IGNORE’ not set
[13:25:09.379] Environment variable ‘R_FUTURE_DEPRECATED_DEFUNCT’ not set
[13:25:09.379] Environment variable ‘R_FUTURE_FORK_MULTITHREADING_ENABLE’ not set
[13:25:09.379] Environment variable ‘R_FUTURE_GLOBALS_MAXSIZE’ not set
[13:25:09.379] Environment variable ‘R_FUTURE_GLOBALS_ONMISSING’ not set
[13:25:09.380] Environment variable ‘R_FUTURE_GLOBALS_ONREFERENCE’ not set
[13:25:09.380] Environment variable ‘R_FUTURE_GLOBALS_METHOD’ not set
[13:25:09.380] Environment variable ‘R_FUTURE_GLOBALS_RESOLVE’ not set
[13:25:09.380] Environment variable ‘R_FUTURE_LAZY_ASSERTOWNER’ not set
[13:25:09.380] Environment variable ‘R_FUTURE_PLAN’ not set
[13:25:09.380] Environment variable ‘R_FUTURE_PLAN_DISALLOW’ not set
[13:25:09.380] Environment variable ‘R_FUTURE_PSOCK_RELAY_IMMEDIATE’ not set
[13:25:09.380] Environment variable ‘R_FUTURE_RELAY_IMMEDIATE’ not set
[13:25:09.380] Environment variable ‘R_FUTURE_RESOLVE_RECURSIVE’ not set
[13:25:09.381] Environment variable ‘R_FUTURE_ALIVE_TIMEOUT’ not set
[13:25:09.381] Environment variable ‘R_FUTURE_RESOLVED_TIMEOUT’ not set
[13:25:09.381] Environment variable ‘R_FUTURE_CLUSTER_RESOLVED_TIMEOUT’ not set
[13:25:09.381] Environment variable ‘R_FUTURE_MULTICORE_RESOLVED_TIMEOUT’ not set
[13:25:09.381] Environment variable ‘R_FUTURE_ONFUTURECONDITION_KEEPFUTURE’ not set
[13:25:09.381] Environment variable ‘R_FUTURE_RNG_ONMISUSE’ not set
[13:25:09.381] Environment variable ‘R_FUTURE_GLOBALENV_ONMISUSE’ not set
[13:25:09.381] Environment variable ‘R_FUTURE_WAIT_TIMEOUT’ not set
[13:25:09.381] Environment variable ‘R_FUTURE_WAIT_ALPHA’ not set
[13:25:09.381] Environment variable ‘R_FUTURE_ASSIGN_GLOBALS_EXCLUDE’ not set
[13:25:09.382] Environment variable ‘R_FUTURE_OUTPUT_WINDOWS_REENCODE’ not set
[13:25:09.382] Environment variable ‘R_FUTURE_GLOBALS_GLOBALSOF_LOCALS’ not set
[13:25:09.382] Environment variable ‘R_FUTURE_STATE_ONINVALID’ not set
[13:25:09.382] Environment variable ‘R_FUTURE_JOURNAL’ not set
[13:25:09.382] Environment variable ‘R_FUTURE_GLOBALS_KEEPWHERE’ not set
[13:25:09.382] R process uuid: 23a78189-cf97-f775-96c6-d0d164da4543
[13:25:09.382] Setting plan('default')
[13:25:09.382] plan(): Setting new future strategy stack:
[13:25:09.382] List of future strategies:
[13:25:09.382] 1. sequential:
[13:25:09.382]    - args: function (..., envir = parent.frame())
[13:25:09.382]    - tweaked: FALSE
[13:25:09.382]    - call: NULL
[13:25:09.383] plan(): nbrOfWorkers() = 1
> strategy <- plan("next")
> print(strategy)
sequential:
- args: function (..., envir = parent.frame())
- tweaked: FALSE
- call: NULL
> ## future.plan can be either a string or a future function
> default <- getOption("future.plan", "sequential")
> if (is.function(default)) default <- class(default)
> stopifnot(inherits(strategy, default))
> plan("default")
[13:25:09.383] plan(): Setting new future strategy stack:
[13:25:09.383] List of future strategies:
[13:25:09.383] 1. sequential:
[13:25:09.383]    - args: function (..., envir = parent.frame())
[13:25:09.383]    - tweaked: FALSE
[13:25:09.383]    - call: NULL
[13:25:09.383] plan(): nbrOfWorkers() = 1
> message("- .onLoad() w/ --parallel=1 ... DONE")
- .onLoad() w/ --parallel=1 ... DONE
> 
> message("- .onLoad() w/ -p 2 ...")
- .onLoad() w/ -p 2 ...
> options(future.plan = NULL, future.cmdargs = c("-p", 2))
> .onLoad(pkgname, pkgname)
[13:25:09.384] Future-specific environment variables:
- R_FUTURE_WAIT_INTERVAL=‘0.01’
[13:25:09.384] Environment variable ‘R_FUTURE_DEMO_MANDELBROT_REGION’ not set
[13:25:09.385] Environment variable ‘R_FUTURE_DEMO_MANDELBROT_NROW’ not set
[13:25:09.385] Environment variable ‘R_FUTURE_DEPRECATED_IGNORE’ not set
[13:25:09.385] Environment variable ‘R_FUTURE_DEPRECATED_DEFUNCT’ not set
[13:25:09.385] Environment variable ‘R_FUTURE_FORK_MULTITHREADING_ENABLE’ not set
[13:25:09.385] Environment variable ‘R_FUTURE_GLOBALS_MAXSIZE’ not set
[13:25:09.385] Environment variable ‘R_FUTURE_GLOBALS_ONMISSING’ not set
[13:25:09.385] Environment variable ‘R_FUTURE_GLOBALS_ONREFERENCE’ not set
[13:25:09.385] Environment variable ‘R_FUTURE_GLOBALS_METHOD’ not set
[13:25:09.385] Environment variable ‘R_FUTURE_GLOBALS_RESOLVE’ not set
[13:25:09.386] Environment variable ‘R_FUTURE_LAZY_ASSERTOWNER’ not set
[13:25:09.386] Environment variable ‘R_FUTURE_PLAN’ not set
[13:25:09.386] Environment variable ‘R_FUTURE_PLAN_DISALLOW’ not set
[13:25:09.386] Environment variable ‘R_FUTURE_PSOCK_RELAY_IMMEDIATE’ not set
[13:25:09.386] Environment variable ‘R_FUTURE_RELAY_IMMEDIATE’ not set
[13:25:09.386] Environment variable ‘R_FUTURE_RESOLVE_RECURSIVE’ not set
[13:25:09.386] Environment variable ‘R_FUTURE_ALIVE_TIMEOUT’ not set
[13:25:09.386] Environment variable ‘R_FUTURE_RESOLVED_TIMEOUT’ not set
[13:25:09.386] Environment variable ‘R_FUTURE_CLUSTER_RESOLVED_TIMEOUT’ not set
[13:25:09.386] Environment variable ‘R_FUTURE_MULTICORE_RESOLVED_TIMEOUT’ not set
[13:25:09.387] Environment variable ‘R_FUTURE_ONFUTURECONDITION_KEEPFUTURE’ not set
[13:25:09.387] Environment variable ‘R_FUTURE_RNG_ONMISUSE’ not set
[13:25:09.387] Environment variable ‘R_FUTURE_GLOBALENV_ONMISUSE’ not set
[13:25:09.387] Environment variable ‘R_FUTURE_WAIT_TIMEOUT’ not set
[13:25:09.387] Environment variable ‘R_FUTURE_WAIT_ALPHA’ not set
[13:25:09.387] Environment variable ‘R_FUTURE_ASSIGN_GLOBALS_EXCLUDE’ not set
[13:25:09.387] Environment variable ‘R_FUTURE_OUTPUT_WINDOWS_REENCODE’ not set
[13:25:09.387] Environment variable ‘R_FUTURE_GLOBALS_GLOBALSOF_LOCALS’ not set
[13:25:09.387] Environment variable ‘R_FUTURE_STATE_ONINVALID’ not set
[13:25:09.388] Environment variable ‘R_FUTURE_JOURNAL’ not set
[13:25:09.388] Environment variable ‘R_FUTURE_GLOBALS_KEEPWHERE’ not set
[13:25:09.388] R command-line argument: -p 2
[13:25:09.388]  => options(future.plan = tweak(multisession, workers = 2))
[13:25:09.391] R process uuid: 23a78189-cf97-f775-96c6-d0d164da4543
[13:25:09.391] Setting plan('default')
[13:25:09.391] plan(): Setting new future strategy stack:
[13:25:09.391] List of future strategies:
[13:25:09.391] 1. multisession:
[13:25:09.391]    - args: function (..., workers = 2L, envir = parent.frame())
[13:25:09.391]    - tweaked: TRUE
[13:25:09.391]    - call: NULL
[13:25:09.391] plan(): nbrOfWorkers() = 2
> strategy <- plan("next")
> print(strategy)
multisession:
- args: function (..., workers = 2L, envir = parent.frame())
- tweaked: TRUE
- call: NULL
> if (maxCores >= 2) {
+   ## Exactly which type of 'multiprocess' future depends on R_FUTURE_PLAN
+   stopifnot(inherits(strategy, "multiprocess"))
+ } else {
+   stopifnot(all(class(strategy) == class(strategy0)))
+ }
> plan("default")
[13:25:09.392] plan(): Setting new future strategy stack:
[13:25:09.392] List of future strategies:
[13:25:09.392] 1. multisession:
[13:25:09.392]    - args: function (..., workers = 2L, envir = parent.frame())
[13:25:09.392]    - tweaked: TRUE
[13:25:09.392]    - call: NULL
[13:25:09.392] plan(): plan_init() of ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ...
[13:25:09.392] multisession:
[13:25:09.392] - args: function (..., workers = 2L, envir = parent.frame())
[13:25:09.392] - tweaked: TRUE
[13:25:09.392] - call: NULL
[13:25:09.394] getGlobalsAndPackages() ...
[13:25:09.394] Not searching for globals
[13:25:09.394] - globals: [0] <none>
[13:25:09.394] getGlobalsAndPackages() ... DONE
[13:25:09.395] [local output] makeClusterPSOCK() ...
[13:25:09.430] [local output] Workers: [n = 2] ‘localhost’, ‘localhost’
[13:25:09.431] [local output] Base port: 11091
[13:25:09.431] [local output] Getting setup options for 2 cluster nodes ...
[13:25:09.431] [local output]  - Node 1 of 2 ...
[13:25:09.432] [local output] localMachine=TRUE => revtunnel=FALSE

[13:25:09.433] Testing if worker's PID can be inferred: ‘'/usr/local/lib/R/bin/Rscript' -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/Rtmp8CmNfX/worker.rank=1.parallelly.parent=93120.16bc044162da0.pid")), silent = TRUE)' -e 'file.exists("/tmp/Rtmp8CmNfX/worker.rank=1.parallelly.parent=93120.16bc044162da0.pid")'’
[13:25:09.626] - Possible to infer worker's PID: TRUE
[13:25:09.626] [local output] Rscript port: 11091

[13:25:09.627] [local output]  - Node 2 of 2 ...
[13:25:09.627] [local output] localMachine=TRUE => revtunnel=FALSE

[13:25:09.628] [local output] Rscript port: 11091

[13:25:09.628] [local output] Getting setup options for 2 cluster nodes ... done
[13:25:09.629] [local output]  - Parallel setup requested for some PSOCK nodes
[13:25:09.629] [local output] Setting up PSOCK nodes in parallel
[13:25:09.629] List of 36
[13:25:09.629]  $ worker          : chr "localhost"
[13:25:09.629]   ..- attr(*, "localhost")= logi TRUE
[13:25:09.629]  $ master          : chr "localhost"
[13:25:09.629]  $ port            : int 11091
[13:25:09.629]  $ connectTimeout  : num 120
[13:25:09.629]  $ timeout         : num 2592000
[13:25:09.629]  $ rscript         : chr "'/usr/local/lib/R/bin/Rscript'"
[13:25:09.629]  $ homogeneous     : logi TRUE
[13:25:09.629]  $ rscript_args    : chr "--default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),fi"| __truncated__
[13:25:09.629]  $ rscript_envs    : NULL
[13:25:09.629]  $ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[13:25:09.629]  $ rscript_startup : NULL
[13:25:09.629]  $ rscript_sh      : chr "sh"
[13:25:09.629]  $ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[13:25:09.629]  $ methods         : logi TRUE
[13:25:09.629]  $ socketOptions   : chr "no-delay"
[13:25:09.629]  $ useXDR          : logi FALSE
[13:25:09.629]  $ outfile         : chr "/dev/null"
[13:25:09.629]  $ renice          : int NA
[13:25:09.629]  $ rshcmd          : NULL
[13:25:09.629]  $ user            : chr(0) 
[13:25:09.629]  $ revtunnel       : logi FALSE
[13:25:09.629]  $ rshlogfile      : NULL
[13:25:09.629]  $ rshopts         : chr(0) 
[13:25:09.629]  $ rank            : int 1
[13:25:09.629]  $ manual          : logi FALSE
[13:25:09.629]  $ dryrun          : logi FALSE
[13:25:09.629]  $ quiet           : logi FALSE
[13:25:09.629]  $ setup_strategy  : chr "parallel"
[13:25:09.629]  $ local_cmd       : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[13:25:09.629]  $ pidfile         : chr "/tmp/Rtmp8CmNfX/worker.rank=1.parallelly.parent=93120.16bc044162da0.pid"
[13:25:09.629]  $ rshcmd_label    : NULL
[13:25:09.629]  $ rsh_call        : NULL
[13:25:09.629]  $ cmd             : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[13:25:09.629]  $ localMachine    : logi TRUE
[13:25:09.629]  $ make_fcn        :function (worker = getOption2("parallelly.localhost.hostname", "localhost"), 
[13:25:09.629]     master = NULL, port, connectTimeout = getOption2("parallelly.makeNodePSOCK.connectTimeout", 
[13:25:09.629]         2 * 60), timeout = getOption2("parallelly.makeNodePSOCK.timeout", 
[13:25:09.629]         30 * 24 * 60 * 60), rscript = NULL, homogeneous = NULL, rscript_args = NULL, 
[13:25:09.629]     rscript_envs = NULL, rscript_libs = NULL, rscript_startup = NULL, rscript_sh = c("auto", 
[13:25:09.629]         "cmd", "sh"), default_packages = c("datasets", "utils", "grDevices", 
[13:25:09.629]         "graphics", "stats", if (methods) "methods"), methods = TRUE, socketOptions = getOption2("parallelly.makeNodePSOCK.socketOptions", 
[13:25:09.629]         "no-delay"), useXDR = getOption2("parallelly.makeNodePSOCK.useXDR", 
[13:25:09.629]         FALSE), outfile = "/dev/null", renice = NA_integer_, rshcmd = getOption2("parallelly.makeNodePSOCK.rshcmd", 
[13:25:09.629]         NULL), user = NULL, revtunnel = NA, rshlogfile = NULL, rshopts = getOption2("parallelly.makeNodePSOCK.rshopts", 
[13:25:09.629]         NULL), rank = 1L, manual = FALSE, dryrun = FALSE, quiet = FALSE, 
[13:25:09.629]     setup_strategy = getOption2("parallelly.makeNodePSOCK.setup_strategy", 
[13:25:09.629]         "parallel"), action = c("launch", "options"), verbose = FALSE)  
[13:25:09.629]  $ arguments       :List of 28
[13:25:09.629]   ..$ worker          : chr "localhost"
[13:25:09.629]   ..$ master          : NULL
[13:25:09.629]   ..$ port            : int 11091
[13:25:09.629]   ..$ connectTimeout  : num 120
[13:25:09.629]   ..$ timeout         : num 2592000
[13:25:09.629]   ..$ rscript         : NULL
[13:25:09.629]   ..$ homogeneous     : NULL
[13:25:09.629]   ..$ rscript_args    : NULL
[13:25:09.629]   ..$ rscript_envs    : NULL
[13:25:09.629]   ..$ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[13:25:09.629]   ..$ rscript_startup : NULL
[13:25:09.629]   ..$ rscript_sh      : chr [1:3] "auto" "cmd" "sh"
[13:25:09.629]   ..$ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[13:25:09.629]   ..$ methods         : logi TRUE
[13:25:09.629]   ..$ socketOptions   : chr "no-delay"
[13:25:09.629]   ..$ useXDR          : logi FALSE
[13:25:09.629]   ..$ outfile         : chr "/dev/null"
[13:25:09.629]   ..$ renice          : int NA
[13:25:09.629]   ..$ rshcmd          : NULL
[13:25:09.629]   ..$ user            : NULL
[13:25:09.629]   ..$ revtunnel       : logi NA
[13:25:09.629]   ..$ rshlogfile      : NULL
[13:25:09.629]   ..$ rshopts         : NULL
[13:25:09.629]   ..$ rank            : int 1
[13:25:09.629]   ..$ manual          : logi FALSE
[13:25:09.629]   ..$ dryrun          : logi FALSE
[13:25:09.629]   ..$ quiet           : logi FALSE
[13:25:09.629]   ..$ setup_strategy  : chr "parallel"
[13:25:09.629]  - attr(*, "class")= chr [1:2] "makeNodePSOCKOptions" "makeNodeOptions"
[13:25:09.654] [local output] System call to launch all workers:
[13:25:09.654] [local output] '/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/Rtmp8CmNfX/worker.rank=1.parallelly.parent=93120.16bc044162da0.pid")), silent = TRUE)' -e 'options(socketOptions = "no-delay")' -e '.libPaths(c("/usr/local/lib/R/site-library","/usr/local/lib/R/library"))' -e 'workRSOCK <- tryCatch(parallel:::.workRSOCK, error=function(e) parallel:::.slaveRSOCK); workRSOCK()' MASTER=localhost PORT=11091 OUT=/dev/null TIMEOUT=2592000 XDR=FALSE SETUPTIMEOUT=120 SETUPSTRATEGY=parallel
[13:25:09.654] [local output] Starting PSOCK main server
[13:25:09.660] [local output] Workers launched
[13:25:09.660] [local output] Waiting for workers to connect back
[13:25:09.661]  - [local output] 0 workers out of 2 ready
[13:25:09.917]  - [local output] 0 workers out of 2 ready
[13:25:09.917]  - [local output] 1 workers out of 2 ready
[13:25:09.923]  - [local output] 1 workers out of 2 ready
[13:25:09.923]  - [local output] 2 workers out of 2 ready
[13:25:09.923] [local output] Launching of workers completed
[13:25:09.923] [local output] Collecting session information from workers
[13:25:09.924] [local output]  - Worker #1 of 2
[13:25:09.925] [local output]  - Worker #2 of 2
[13:25:09.925] [local output] makeClusterPSOCK() ... done
[13:25:09.938] Packages needed by the future expression (n = 0): <none>
[13:25:09.938] Packages needed by future strategies (n = 0): <none>
[13:25:09.939] {
[13:25:09.939]     {
[13:25:09.939]         {
[13:25:09.939]             ...future.startTime <- base::Sys.time()
[13:25:09.939]             {
[13:25:09.939]                 {
[13:25:09.939]                   {
[13:25:09.939]                     {
[13:25:09.939]                       base::local({
[13:25:09.939]                         has_future <- base::requireNamespace("future", 
[13:25:09.939]                           quietly = TRUE)
[13:25:09.939]                         if (has_future) {
[13:25:09.939]                           ns <- base::getNamespace("future")
[13:25:09.939]                           version <- ns[[".package"]][["version"]]
[13:25:09.939]                           if (is.null(version)) 
[13:25:09.939]                             version <- utils::packageVersion("future")
[13:25:09.939]                         }
[13:25:09.939]                         else {
[13:25:09.939]                           version <- NULL
[13:25:09.939]                         }
[13:25:09.939]                         if (!has_future || version < "1.8.0") {
[13:25:09.939]                           info <- base::c(r_version = base::gsub("R version ", 
[13:25:09.939]                             "", base::R.version$version.string), 
[13:25:09.939]                             platform = base::sprintf("%s (%s-bit)", 
[13:25:09.939]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:25:09.939]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:25:09.939]                               "release", "version")], collapse = " "), 
[13:25:09.939]                             hostname = base::Sys.info()[["nodename"]])
[13:25:09.939]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:25:09.939]                             info)
[13:25:09.939]                           info <- base::paste(info, collapse = "; ")
[13:25:09.939]                           if (!has_future) {
[13:25:09.939]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:25:09.939]                               info)
[13:25:09.939]                           }
[13:25:09.939]                           else {
[13:25:09.939]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:25:09.939]                               info, version)
[13:25:09.939]                           }
[13:25:09.939]                           base::stop(msg)
[13:25:09.939]                         }
[13:25:09.939]                       })
[13:25:09.939]                     }
[13:25:09.939]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[13:25:09.939]                     base::options(mc.cores = 1L)
[13:25:09.939]                   }
[13:25:09.939]                   options(future.plan = NULL)
[13:25:09.939]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:25:09.939]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:25:09.939]                 }
[13:25:09.939]                 ...future.workdir <- getwd()
[13:25:09.939]             }
[13:25:09.939]             ...future.oldOptions <- base::as.list(base::.Options)
[13:25:09.939]             ...future.oldEnvVars <- base::Sys.getenv()
[13:25:09.939]         }
[13:25:09.939]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:25:09.939]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:25:09.939]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:25:09.939]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:25:09.939]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:25:09.939]             future.stdout.windows.reencode = NULL, width = 80L)
[13:25:09.939]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:25:09.939]             base::names(...future.oldOptions))
[13:25:09.939]     }
[13:25:09.939]     if (FALSE) {
[13:25:09.939]     }
[13:25:09.939]     else {
[13:25:09.939]         if (TRUE) {
[13:25:09.939]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:25:09.939]                 open = "w")
[13:25:09.939]         }
[13:25:09.939]         else {
[13:25:09.939]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:25:09.939]                 windows = "NUL", "/dev/null"), open = "w")
[13:25:09.939]         }
[13:25:09.939]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:25:09.939]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:25:09.939]             base::sink(type = "output", split = FALSE)
[13:25:09.939]             base::close(...future.stdout)
[13:25:09.939]         }, add = TRUE)
[13:25:09.939]     }
[13:25:09.939]     ...future.frame <- base::sys.nframe()
[13:25:09.939]     ...future.conditions <- base::list()
[13:25:09.939]     ...future.rng <- base::globalenv()$.Random.seed
[13:25:09.939]     if (FALSE) {
[13:25:09.939]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:25:09.939]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:25:09.939]     }
[13:25:09.939]     ...future.result <- base::tryCatch({
[13:25:09.939]         base::withCallingHandlers({
[13:25:09.939]             ...future.value <- base::withVisible(base::local({
[13:25:09.939]                 ...future.makeSendCondition <- base::local({
[13:25:09.939]                   sendCondition <- NULL
[13:25:09.939]                   function(frame = 1L) {
[13:25:09.939]                     if (is.function(sendCondition)) 
[13:25:09.939]                       return(sendCondition)
[13:25:09.939]                     ns <- getNamespace("parallel")
[13:25:09.939]                     if (exists("sendData", mode = "function", 
[13:25:09.939]                       envir = ns)) {
[13:25:09.939]                       parallel_sendData <- get("sendData", mode = "function", 
[13:25:09.939]                         envir = ns)
[13:25:09.939]                       envir <- sys.frame(frame)
[13:25:09.939]                       master <- NULL
[13:25:09.939]                       while (!identical(envir, .GlobalEnv) && 
[13:25:09.939]                         !identical(envir, emptyenv())) {
[13:25:09.939]                         if (exists("master", mode = "list", envir = envir, 
[13:25:09.939]                           inherits = FALSE)) {
[13:25:09.939]                           master <- get("master", mode = "list", 
[13:25:09.939]                             envir = envir, inherits = FALSE)
[13:25:09.939]                           if (inherits(master, c("SOCKnode", 
[13:25:09.939]                             "SOCK0node"))) {
[13:25:09.939]                             sendCondition <<- function(cond) {
[13:25:09.939]                               data <- list(type = "VALUE", value = cond, 
[13:25:09.939]                                 success = TRUE)
[13:25:09.939]                               parallel_sendData(master, data)
[13:25:09.939]                             }
[13:25:09.939]                             return(sendCondition)
[13:25:09.939]                           }
[13:25:09.939]                         }
[13:25:09.939]                         frame <- frame + 1L
[13:25:09.939]                         envir <- sys.frame(frame)
[13:25:09.939]                       }
[13:25:09.939]                     }
[13:25:09.939]                     sendCondition <<- function(cond) NULL
[13:25:09.939]                   }
[13:25:09.939]                 })
[13:25:09.939]                 withCallingHandlers({
[13:25:09.939]                   NA
[13:25:09.939]                 }, immediateCondition = function(cond) {
[13:25:09.939]                   sendCondition <- ...future.makeSendCondition()
[13:25:09.939]                   sendCondition(cond)
[13:25:09.939]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:25:09.939]                   {
[13:25:09.939]                     inherits <- base::inherits
[13:25:09.939]                     invokeRestart <- base::invokeRestart
[13:25:09.939]                     is.null <- base::is.null
[13:25:09.939]                     muffled <- FALSE
[13:25:09.939]                     if (inherits(cond, "message")) {
[13:25:09.939]                       muffled <- grepl(pattern, "muffleMessage")
[13:25:09.939]                       if (muffled) 
[13:25:09.939]                         invokeRestart("muffleMessage")
[13:25:09.939]                     }
[13:25:09.939]                     else if (inherits(cond, "warning")) {
[13:25:09.939]                       muffled <- grepl(pattern, "muffleWarning")
[13:25:09.939]                       if (muffled) 
[13:25:09.939]                         invokeRestart("muffleWarning")
[13:25:09.939]                     }
[13:25:09.939]                     else if (inherits(cond, "condition")) {
[13:25:09.939]                       if (!is.null(pattern)) {
[13:25:09.939]                         computeRestarts <- base::computeRestarts
[13:25:09.939]                         grepl <- base::grepl
[13:25:09.939]                         restarts <- computeRestarts(cond)
[13:25:09.939]                         for (restart in restarts) {
[13:25:09.939]                           name <- restart$name
[13:25:09.939]                           if (is.null(name)) 
[13:25:09.939]                             next
[13:25:09.939]                           if (!grepl(pattern, name)) 
[13:25:09.939]                             next
[13:25:09.939]                           invokeRestart(restart)
[13:25:09.939]                           muffled <- TRUE
[13:25:09.939]                           break
[13:25:09.939]                         }
[13:25:09.939]                       }
[13:25:09.939]                     }
[13:25:09.939]                     invisible(muffled)
[13:25:09.939]                   }
[13:25:09.939]                   muffleCondition(cond)
[13:25:09.939]                 })
[13:25:09.939]             }))
[13:25:09.939]             future::FutureResult(value = ...future.value$value, 
[13:25:09.939]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:25:09.939]                   ...future.rng), globalenv = if (FALSE) 
[13:25:09.939]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:25:09.939]                     ...future.globalenv.names))
[13:25:09.939]                 else NULL, started = ...future.startTime, version = "1.8")
[13:25:09.939]         }, condition = base::local({
[13:25:09.939]             c <- base::c
[13:25:09.939]             inherits <- base::inherits
[13:25:09.939]             invokeRestart <- base::invokeRestart
[13:25:09.939]             length <- base::length
[13:25:09.939]             list <- base::list
[13:25:09.939]             seq.int <- base::seq.int
[13:25:09.939]             signalCondition <- base::signalCondition
[13:25:09.939]             sys.calls <- base::sys.calls
[13:25:09.939]             `[[` <- base::`[[`
[13:25:09.939]             `+` <- base::`+`
[13:25:09.939]             `<<-` <- base::`<<-`
[13:25:09.939]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:25:09.939]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:25:09.939]                   3L)]
[13:25:09.939]             }
[13:25:09.939]             function(cond) {
[13:25:09.939]                 is_error <- inherits(cond, "error")
[13:25:09.939]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:25:09.939]                   NULL)
[13:25:09.939]                 if (is_error) {
[13:25:09.939]                   sessionInformation <- function() {
[13:25:09.939]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:25:09.939]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:25:09.939]                       search = base::search(), system = base::Sys.info())
[13:25:09.939]                   }
[13:25:09.939]                   ...future.conditions[[length(...future.conditions) + 
[13:25:09.939]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:25:09.939]                     cond$call), session = sessionInformation(), 
[13:25:09.939]                     timestamp = base::Sys.time(), signaled = 0L)
[13:25:09.939]                   signalCondition(cond)
[13:25:09.939]                 }
[13:25:09.939]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:25:09.939]                 "immediateCondition"))) {
[13:25:09.939]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:25:09.939]                   ...future.conditions[[length(...future.conditions) + 
[13:25:09.939]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:25:09.939]                   if (TRUE && !signal) {
[13:25:09.939]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:25:09.939]                     {
[13:25:09.939]                       inherits <- base::inherits
[13:25:09.939]                       invokeRestart <- base::invokeRestart
[13:25:09.939]                       is.null <- base::is.null
[13:25:09.939]                       muffled <- FALSE
[13:25:09.939]                       if (inherits(cond, "message")) {
[13:25:09.939]                         muffled <- grepl(pattern, "muffleMessage")
[13:25:09.939]                         if (muffled) 
[13:25:09.939]                           invokeRestart("muffleMessage")
[13:25:09.939]                       }
[13:25:09.939]                       else if (inherits(cond, "warning")) {
[13:25:09.939]                         muffled <- grepl(pattern, "muffleWarning")
[13:25:09.939]                         if (muffled) 
[13:25:09.939]                           invokeRestart("muffleWarning")
[13:25:09.939]                       }
[13:25:09.939]                       else if (inherits(cond, "condition")) {
[13:25:09.939]                         if (!is.null(pattern)) {
[13:25:09.939]                           computeRestarts <- base::computeRestarts
[13:25:09.939]                           grepl <- base::grepl
[13:25:09.939]                           restarts <- computeRestarts(cond)
[13:25:09.939]                           for (restart in restarts) {
[13:25:09.939]                             name <- restart$name
[13:25:09.939]                             if (is.null(name)) 
[13:25:09.939]                               next
[13:25:09.939]                             if (!grepl(pattern, name)) 
[13:25:09.939]                               next
[13:25:09.939]                             invokeRestart(restart)
[13:25:09.939]                             muffled <- TRUE
[13:25:09.939]                             break
[13:25:09.939]                           }
[13:25:09.939]                         }
[13:25:09.939]                       }
[13:25:09.939]                       invisible(muffled)
[13:25:09.939]                     }
[13:25:09.939]                     muffleCondition(cond, pattern = "^muffle")
[13:25:09.939]                   }
[13:25:09.939]                 }
[13:25:09.939]                 else {
[13:25:09.939]                   if (TRUE) {
[13:25:09.939]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:25:09.939]                     {
[13:25:09.939]                       inherits <- base::inherits
[13:25:09.939]                       invokeRestart <- base::invokeRestart
[13:25:09.939]                       is.null <- base::is.null
[13:25:09.939]                       muffled <- FALSE
[13:25:09.939]                       if (inherits(cond, "message")) {
[13:25:09.939]                         muffled <- grepl(pattern, "muffleMessage")
[13:25:09.939]                         if (muffled) 
[13:25:09.939]                           invokeRestart("muffleMessage")
[13:25:09.939]                       }
[13:25:09.939]                       else if (inherits(cond, "warning")) {
[13:25:09.939]                         muffled <- grepl(pattern, "muffleWarning")
[13:25:09.939]                         if (muffled) 
[13:25:09.939]                           invokeRestart("muffleWarning")
[13:25:09.939]                       }
[13:25:09.939]                       else if (inherits(cond, "condition")) {
[13:25:09.939]                         if (!is.null(pattern)) {
[13:25:09.939]                           computeRestarts <- base::computeRestarts
[13:25:09.939]                           grepl <- base::grepl
[13:25:09.939]                           restarts <- computeRestarts(cond)
[13:25:09.939]                           for (restart in restarts) {
[13:25:09.939]                             name <- restart$name
[13:25:09.939]                             if (is.null(name)) 
[13:25:09.939]                               next
[13:25:09.939]                             if (!grepl(pattern, name)) 
[13:25:09.939]                               next
[13:25:09.939]                             invokeRestart(restart)
[13:25:09.939]                             muffled <- TRUE
[13:25:09.939]                             break
[13:25:09.939]                           }
[13:25:09.939]                         }
[13:25:09.939]                       }
[13:25:09.939]                       invisible(muffled)
[13:25:09.939]                     }
[13:25:09.939]                     muffleCondition(cond, pattern = "^muffle")
[13:25:09.939]                   }
[13:25:09.939]                 }
[13:25:09.939]             }
[13:25:09.939]         }))
[13:25:09.939]     }, error = function(ex) {
[13:25:09.939]         base::structure(base::list(value = NULL, visible = NULL, 
[13:25:09.939]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:25:09.939]                 ...future.rng), started = ...future.startTime, 
[13:25:09.939]             finished = Sys.time(), session_uuid = NA_character_, 
[13:25:09.939]             version = "1.8"), class = "FutureResult")
[13:25:09.939]     }, finally = {
[13:25:09.939]         if (!identical(...future.workdir, getwd())) 
[13:25:09.939]             setwd(...future.workdir)
[13:25:09.939]         {
[13:25:09.939]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:25:09.939]                 ...future.oldOptions$nwarnings <- NULL
[13:25:09.939]             }
[13:25:09.939]             base::options(...future.oldOptions)
[13:25:09.939]             if (.Platform$OS.type == "windows") {
[13:25:09.939]                 old_names <- names(...future.oldEnvVars)
[13:25:09.939]                 envs <- base::Sys.getenv()
[13:25:09.939]                 names <- names(envs)
[13:25:09.939]                 common <- intersect(names, old_names)
[13:25:09.939]                 added <- setdiff(names, old_names)
[13:25:09.939]                 removed <- setdiff(old_names, names)
[13:25:09.939]                 changed <- common[...future.oldEnvVars[common] != 
[13:25:09.939]                   envs[common]]
[13:25:09.939]                 NAMES <- toupper(changed)
[13:25:09.939]                 args <- list()
[13:25:09.939]                 for (kk in seq_along(NAMES)) {
[13:25:09.939]                   name <- changed[[kk]]
[13:25:09.939]                   NAME <- NAMES[[kk]]
[13:25:09.939]                   if (name != NAME && is.element(NAME, old_names)) 
[13:25:09.939]                     next
[13:25:09.939]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:25:09.939]                 }
[13:25:09.939]                 NAMES <- toupper(added)
[13:25:09.939]                 for (kk in seq_along(NAMES)) {
[13:25:09.939]                   name <- added[[kk]]
[13:25:09.939]                   NAME <- NAMES[[kk]]
[13:25:09.939]                   if (name != NAME && is.element(NAME, old_names)) 
[13:25:09.939]                     next
[13:25:09.939]                   args[[name]] <- ""
[13:25:09.939]                 }
[13:25:09.939]                 NAMES <- toupper(removed)
[13:25:09.939]                 for (kk in seq_along(NAMES)) {
[13:25:09.939]                   name <- removed[[kk]]
[13:25:09.939]                   NAME <- NAMES[[kk]]
[13:25:09.939]                   if (name != NAME && is.element(NAME, old_names)) 
[13:25:09.939]                     next
[13:25:09.939]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:25:09.939]                 }
[13:25:09.939]                 if (length(args) > 0) 
[13:25:09.939]                   base::do.call(base::Sys.setenv, args = args)
[13:25:09.939]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:25:09.939]             }
[13:25:09.939]             else {
[13:25:09.939]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:25:09.939]             }
[13:25:09.939]             {
[13:25:09.939]                 if (base::length(...future.futureOptionsAdded) > 
[13:25:09.939]                   0L) {
[13:25:09.939]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:25:09.939]                   base::names(opts) <- ...future.futureOptionsAdded
[13:25:09.939]                   base::options(opts)
[13:25:09.939]                 }
[13:25:09.939]                 {
[13:25:09.939]                   {
[13:25:09.939]                     base::options(mc.cores = ...future.mc.cores.old)
[13:25:09.939]                     NULL
[13:25:09.939]                   }
[13:25:09.939]                   options(future.plan = function (..., workers = 2L, 
[13:25:09.939]                     envir = parent.frame()) 
[13:25:09.939]                   strategy(..., workers = workers, envir = envir))
[13:25:09.939]                   if (is.na(NA_character_)) 
[13:25:09.939]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:25:09.939]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:25:09.939]                   future::plan(list(function (..., workers = 2L, 
[13:25:09.939]                     envir = parent.frame()) 
[13:25:09.939]                   strategy(..., workers = workers, envir = envir)), 
[13:25:09.939]                     .cleanup = FALSE, .init = FALSE)
[13:25:09.939]                 }
[13:25:09.939]             }
[13:25:09.939]         }
[13:25:09.939]     })
[13:25:09.939]     if (TRUE) {
[13:25:09.939]         base::sink(type = "output", split = FALSE)
[13:25:09.939]         if (TRUE) {
[13:25:09.939]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:25:09.939]         }
[13:25:09.939]         else {
[13:25:09.939]             ...future.result["stdout"] <- base::list(NULL)
[13:25:09.939]         }
[13:25:09.939]         base::close(...future.stdout)
[13:25:09.939]         ...future.stdout <- NULL
[13:25:09.939]     }
[13:25:09.939]     ...future.result$conditions <- ...future.conditions
[13:25:09.939]     ...future.result$finished <- base::Sys.time()
[13:25:09.939]     ...future.result
[13:25:09.939] }
[13:25:09.991] MultisessionFuture started
[13:25:09.992] result() for ClusterFuture ...
[13:25:09.992] receiveMessageFromWorker() for ClusterFuture ...
[13:25:09.992] - Validating connection of MultisessionFuture
[13:25:10.025] - received message: FutureResult
[13:25:10.025] - Received FutureResult
[13:25:10.028] - Erased future from FutureRegistry
[13:25:10.028] result() for ClusterFuture ...
[13:25:10.028] - result already collected: FutureResult
[13:25:10.029] result() for ClusterFuture ... done
[13:25:10.029] receiveMessageFromWorker() for ClusterFuture ... done
[13:25:10.029] result() for ClusterFuture ... done
[13:25:10.029] result() for ClusterFuture ...
[13:25:10.029] - result already collected: FutureResult
[13:25:10.029] result() for ClusterFuture ... done
[13:25:10.029] plan(): plan_init() of ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ... DONE
[13:25:10.029] plan(): nbrOfWorkers() = 2
> message("- .onLoad() w/ -p 2 ... DONE")
- .onLoad() w/ -p 2 ... DONE
> 
> message("- .onLoad() w/ -p 0 ...")
- .onLoad() w/ -p 0 ...
> options(future.plan = NULL, future.cmdargs = c("-p", 0))
> .onLoad(pkgname, pkgname)
[13:25:10.031] Future-specific environment variables:
- R_FUTURE_WAIT_INTERVAL=‘0.01’
[13:25:10.031] Environment variable ‘R_FUTURE_DEMO_MANDELBROT_REGION’ not set
[13:25:10.031] Environment variable ‘R_FUTURE_DEMO_MANDELBROT_NROW’ not set
[13:25:10.031] Environment variable ‘R_FUTURE_DEPRECATED_IGNORE’ not set
[13:25:10.031] Environment variable ‘R_FUTURE_DEPRECATED_DEFUNCT’ not set
[13:25:10.031] Environment variable ‘R_FUTURE_FORK_MULTITHREADING_ENABLE’ not set
[13:25:10.031] Environment variable ‘R_FUTURE_GLOBALS_MAXSIZE’ not set
[13:25:10.032] Environment variable ‘R_FUTURE_GLOBALS_ONMISSING’ not set
[13:25:10.032] Environment variable ‘R_FUTURE_GLOBALS_ONREFERENCE’ not set
[13:25:10.032] Environment variable ‘R_FUTURE_GLOBALS_METHOD’ not set
[13:25:10.032] Environment variable ‘R_FUTURE_GLOBALS_RESOLVE’ not set
[13:25:10.032] Environment variable ‘R_FUTURE_LAZY_ASSERTOWNER’ not set
[13:25:10.032] Environment variable ‘R_FUTURE_PLAN’ not set
[13:25:10.032] Environment variable ‘R_FUTURE_PLAN_DISALLOW’ not set
[13:25:10.033] Environment variable ‘R_FUTURE_PSOCK_RELAY_IMMEDIATE’ not set
[13:25:10.033] Environment variable ‘R_FUTURE_RELAY_IMMEDIATE’ not set
[13:25:10.033] Environment variable ‘R_FUTURE_RESOLVE_RECURSIVE’ not set
[13:25:10.033] Environment variable ‘R_FUTURE_ALIVE_TIMEOUT’ not set
[13:25:10.033] Environment variable ‘R_FUTURE_RESOLVED_TIMEOUT’ not set
[13:25:10.033] Environment variable ‘R_FUTURE_CLUSTER_RESOLVED_TIMEOUT’ not set
[13:25:10.033] Environment variable ‘R_FUTURE_MULTICORE_RESOLVED_TIMEOUT’ not set
[13:25:10.034] Environment variable ‘R_FUTURE_ONFUTURECONDITION_KEEPFUTURE’ not set
[13:25:10.034] Environment variable ‘R_FUTURE_RNG_ONMISUSE’ not set
[13:25:10.034] Environment variable ‘R_FUTURE_GLOBALENV_ONMISUSE’ not set
[13:25:10.034] Environment variable ‘R_FUTURE_WAIT_TIMEOUT’ not set
[13:25:10.034] Environment variable ‘R_FUTURE_WAIT_ALPHA’ not set
[13:25:10.034] Environment variable ‘R_FUTURE_ASSIGN_GLOBALS_EXCLUDE’ not set
[13:25:10.034] Environment variable ‘R_FUTURE_OUTPUT_WINDOWS_REENCODE’ not set
[13:25:10.035] Environment variable ‘R_FUTURE_GLOBALS_GLOBALSOF_LOCALS’ not set
[13:25:10.035] Environment variable ‘R_FUTURE_STATE_ONINVALID’ not set
[13:25:10.035] Environment variable ‘R_FUTURE_JOURNAL’ not set
[13:25:10.035] Environment variable ‘R_FUTURE_GLOBALS_KEEPWHERE’ not set
Warning: future: Ignoring invalid number of processes specified in command-line option: -p 0
[13:25:10.035] R process uuid: 23a78189-cf97-f775-96c6-d0d164da4543
[13:25:10.036] Setting plan('default')
[13:25:10.036] plan(): Setting new future strategy stack:
[13:25:10.036] List of future strategies:
[13:25:10.036] 1. sequential:
[13:25:10.036]    - args: function (..., envir = parent.frame())
[13:25:10.036]    - tweaked: FALSE
[13:25:10.036]    - call: NULL
[13:25:10.037] plan(): nbrOfWorkers() = 1
> strategy <- plan("next")
> print(strategy)
sequential:
- args: function (..., envir = parent.frame())
- tweaked: FALSE
- call: NULL
> stopifnot(all(class(strategy) == class(strategy0)))
> plan("default")
[13:25:10.037] plan(): Setting new future strategy stack:
[13:25:10.037] List of future strategies:
[13:25:10.037] 1. sequential:
[13:25:10.037]    - args: function (..., envir = parent.frame())
[13:25:10.037]    - tweaked: FALSE
[13:25:10.037]    - call: NULL
[13:25:10.038] plan(): nbrOfWorkers() = 1
> message("- .onLoad() w/ -p 0 ... DONE")
- .onLoad() w/ -p 0 ... DONE
> 
> message("- .onLoad() w/ -p -1 ...")
- .onLoad() w/ -p -1 ...
> options(future.plan = NULL, future.cmdargs = c("-p", -1))
> .onLoad(pkgname, pkgname)
[13:25:10.040] Future-specific environment variables:
- R_FUTURE_WAIT_INTERVAL=‘0.01’
[13:25:10.040] Environment variable ‘R_FUTURE_DEMO_MANDELBROT_REGION’ not set
[13:25:10.040] Environment variable ‘R_FUTURE_DEMO_MANDELBROT_NROW’ not set
[13:25:10.040] Environment variable ‘R_FUTURE_DEPRECATED_IGNORE’ not set
[13:25:10.040] Environment variable ‘R_FUTURE_DEPRECATED_DEFUNCT’ not set
[13:25:10.041] Environment variable ‘R_FUTURE_FORK_MULTITHREADING_ENABLE’ not set
[13:25:10.041] Environment variable ‘R_FUTURE_GLOBALS_MAXSIZE’ not set
[13:25:10.041] Environment variable ‘R_FUTURE_GLOBALS_ONMISSING’ not set
[13:25:10.041] Environment variable ‘R_FUTURE_GLOBALS_ONREFERENCE’ not set
[13:25:10.042] Environment variable ‘R_FUTURE_GLOBALS_METHOD’ not set
[13:25:10.042] Environment variable ‘R_FUTURE_GLOBALS_RESOLVE’ not set
[13:25:10.042] Environment variable ‘R_FUTURE_LAZY_ASSERTOWNER’ not set
[13:25:10.042] Environment variable ‘R_FUTURE_PLAN’ not set
[13:25:10.042] Environment variable ‘R_FUTURE_PLAN_DISALLOW’ not set
[13:25:10.043] Environment variable ‘R_FUTURE_PSOCK_RELAY_IMMEDIATE’ not set
[13:25:10.043] Environment variable ‘R_FUTURE_RELAY_IMMEDIATE’ not set
[13:25:10.043] Environment variable ‘R_FUTURE_RESOLVE_RECURSIVE’ not set
[13:25:10.043] Environment variable ‘R_FUTURE_ALIVE_TIMEOUT’ not set
[13:25:10.043] Environment variable ‘R_FUTURE_RESOLVED_TIMEOUT’ not set
[13:25:10.043] Environment variable ‘R_FUTURE_CLUSTER_RESOLVED_TIMEOUT’ not set
[13:25:10.044] Environment variable ‘R_FUTURE_MULTICORE_RESOLVED_TIMEOUT’ not set
[13:25:10.044] Environment variable ‘R_FUTURE_ONFUTURECONDITION_KEEPFUTURE’ not set
[13:25:10.044] Environment variable ‘R_FUTURE_RNG_ONMISUSE’ not set
[13:25:10.044] Environment variable ‘R_FUTURE_GLOBALENV_ONMISUSE’ not set
[13:25:10.045] Environment variable ‘R_FUTURE_WAIT_TIMEOUT’ not set
[13:25:10.045] Environment variable ‘R_FUTURE_WAIT_ALPHA’ not set
[13:25:10.045] Environment variable ‘R_FUTURE_ASSIGN_GLOBALS_EXCLUDE’ not set
[13:25:10.045] Environment variable ‘R_FUTURE_OUTPUT_WINDOWS_REENCODE’ not set
[13:25:10.046] Environment variable ‘R_FUTURE_GLOBALS_GLOBALSOF_LOCALS’ not set
[13:25:10.046] Environment variable ‘R_FUTURE_STATE_ONINVALID’ not set
[13:25:10.046] Environment variable ‘R_FUTURE_JOURNAL’ not set
[13:25:10.046] Environment variable ‘R_FUTURE_GLOBALS_KEEPWHERE’ not set
Warning: future: Ignoring invalid number of processes specified in command-line option: -p -1
[13:25:10.047] R process uuid: 23a78189-cf97-f775-96c6-d0d164da4543
[13:25:10.047] Setting plan('default')
[13:25:10.047] plan(): Setting new future strategy stack:
[13:25:10.048] List of future strategies:
[13:25:10.048] 1. sequential:
[13:25:10.048]    - args: function (..., envir = parent.frame())
[13:25:10.048]    - tweaked: FALSE
[13:25:10.048]    - call: NULL
[13:25:10.048] plan(): nbrOfWorkers() = 1
> strategy <- plan("next")
> print(strategy)
sequential:
- args: function (..., envir = parent.frame())
- tweaked: FALSE
- call: NULL
> stopifnot(all(class(strategy) == class(strategy0)))
> plan("default")
[13:25:10.049] plan(): Setting new future strategy stack:
[13:25:10.049] List of future strategies:
[13:25:10.049] 1. sequential:
[13:25:10.049]    - args: function (..., envir = parent.frame())
[13:25:10.049]    - tweaked: FALSE
[13:25:10.049]    - call: NULL
[13:25:10.050] plan(): nbrOfWorkers() = 1
> message("- .onLoad() w/ -p -1 ... DONE")
- .onLoad() w/ -p -1 ... DONE
> 
> message("- .onLoad() w/ -p foo ...")
- .onLoad() w/ -p foo ...
> options(future.plan = NULL, future.cmdargs = c("-p", "foo"))
> .onLoad(pkgname, pkgname)
[13:25:10.051] Future-specific environment variables:
- R_FUTURE_WAIT_INTERVAL=‘0.01’
[13:25:10.051] Environment variable ‘R_FUTURE_DEMO_MANDELBROT_REGION’ not set
[13:25:10.052] Environment variable ‘R_FUTURE_DEMO_MANDELBROT_NROW’ not set
[13:25:10.052] Environment variable ‘R_FUTURE_DEPRECATED_IGNORE’ not set
[13:25:10.052] Environment variable ‘R_FUTURE_DEPRECATED_DEFUNCT’ not set
[13:25:10.052] Environment variable ‘R_FUTURE_FORK_MULTITHREADING_ENABLE’ not set
[13:25:10.053] Environment variable ‘R_FUTURE_GLOBALS_MAXSIZE’ not set
[13:25:10.053] Environment variable ‘R_FUTURE_GLOBALS_ONMISSING’ not set
[13:25:10.053] Environment variable ‘R_FUTURE_GLOBALS_ONREFERENCE’ not set
[13:25:10.053] Environment variable ‘R_FUTURE_GLOBALS_METHOD’ not set
[13:25:10.053] Environment variable ‘R_FUTURE_GLOBALS_RESOLVE’ not set
[13:25:10.053] Environment variable ‘R_FUTURE_LAZY_ASSERTOWNER’ not set
[13:25:10.054] Environment variable ‘R_FUTURE_PLAN’ not set
[13:25:10.054] Environment variable ‘R_FUTURE_PLAN_DISALLOW’ not set
[13:25:10.054] Environment variable ‘R_FUTURE_PSOCK_RELAY_IMMEDIATE’ not set
[13:25:10.054] Environment variable ‘R_FUTURE_RELAY_IMMEDIATE’ not set
[13:25:10.054] Environment variable ‘R_FUTURE_RESOLVE_RECURSIVE’ not set
[13:25:10.055] Environment variable ‘R_FUTURE_ALIVE_TIMEOUT’ not set
[13:25:10.055] Environment variable ‘R_FUTURE_RESOLVED_TIMEOUT’ not set
[13:25:10.055] Environment variable ‘R_FUTURE_CLUSTER_RESOLVED_TIMEOUT’ not set
[13:25:10.055] Environment variable ‘R_FUTURE_MULTICORE_RESOLVED_TIMEOUT’ not set
[13:25:10.055] Environment variable ‘R_FUTURE_ONFUTURECONDITION_KEEPFUTURE’ not set
[13:25:10.055] Environment variable ‘R_FUTURE_RNG_ONMISUSE’ not set
[13:25:10.056] Environment variable ‘R_FUTURE_GLOBALENV_ONMISUSE’ not set
[13:25:10.056] Environment variable ‘R_FUTURE_WAIT_TIMEOUT’ not set
[13:25:10.056] Environment variable ‘R_FUTURE_WAIT_ALPHA’ not set
[13:25:10.056] Environment variable ‘R_FUTURE_ASSIGN_GLOBALS_EXCLUDE’ not set
[13:25:10.056] Environment variable ‘R_FUTURE_OUTPUT_WINDOWS_REENCODE’ not set
[13:25:10.056] Environment variable ‘R_FUTURE_GLOBALS_GLOBALSOF_LOCALS’ not set
[13:25:10.057] Environment variable ‘R_FUTURE_STATE_ONINVALID’ not set
[13:25:10.057] Environment variable ‘R_FUTURE_JOURNAL’ not set
[13:25:10.057] Environment variable ‘R_FUTURE_GLOBALS_KEEPWHERE’ not set
Warning in parseCmdArgs() : NAs introduced by coercion
Warning: future: Ignoring invalid number of processes specified in command-line option: -p foo
[13:25:10.058] R process uuid: 23a78189-cf97-f775-96c6-d0d164da4543
[13:25:10.058] Setting plan('default')
[13:25:10.058] plan(): Setting new future strategy stack:
[13:25:10.058] List of future strategies:
[13:25:10.058] 1. sequential:
[13:25:10.058]    - args: function (..., envir = parent.frame())
[13:25:10.058]    - tweaked: FALSE
[13:25:10.058]    - call: NULL
[13:25:10.058] plan(): nbrOfWorkers() = 1
> strategy <- plan("next")
> print(strategy)
sequential:
- args: function (..., envir = parent.frame())
- tweaked: FALSE
- call: NULL
> stopifnot(all(class(strategy) == class(strategy0)))
> plan("default")
[13:25:10.059] plan(): Setting new future strategy stack:
[13:25:10.059] List of future strategies:
[13:25:10.059] 1. sequential:
[13:25:10.059]    - args: function (..., envir = parent.frame())
[13:25:10.059]    - tweaked: FALSE
[13:25:10.059]    - call: NULL
[13:25:10.059] plan(): nbrOfWorkers() = 1
> message("- .onLoad() w/ -p foo ... DONE")
- .onLoad() w/ -p foo ... DONE
> 
> message("- .onLoad() w/ R_FUTURE_PLAN = 'multisession' ...")
- .onLoad() w/ R_FUTURE_PLAN = 'multisession' ...
> Sys.setenv(R_FUTURE_PLAN = "multisession")
> options(future.plan = NULL, future.cmdargs = NULL)
> .onLoad(pkgname, pkgname)
[13:25:10.060] Future-specific environment variables:
- R_FUTURE_PLAN=‘multisession’
- R_FUTURE_WAIT_INTERVAL=‘0.01’
[13:25:10.060] Environment variable ‘R_FUTURE_DEMO_MANDELBROT_REGION’ not set
[13:25:10.061] Environment variable ‘R_FUTURE_DEMO_MANDELBROT_NROW’ not set
[13:25:10.061] Environment variable ‘R_FUTURE_DEPRECATED_IGNORE’ not set
[13:25:10.061] Environment variable ‘R_FUTURE_DEPRECATED_DEFUNCT’ not set
[13:25:10.061] Environment variable ‘R_FUTURE_FORK_MULTITHREADING_ENABLE’ not set
[13:25:10.061] Environment variable ‘R_FUTURE_GLOBALS_MAXSIZE’ not set
[13:25:10.061] Environment variable ‘R_FUTURE_GLOBALS_ONMISSING’ not set
[13:25:10.061] Environment variable ‘R_FUTURE_GLOBALS_ONREFERENCE’ not set
[13:25:10.062] Environment variable ‘R_FUTURE_GLOBALS_METHOD’ not set
[13:25:10.062] Environment variable ‘R_FUTURE_GLOBALS_RESOLVE’ not set
[13:25:10.062] Environment variable ‘R_FUTURE_LAZY_ASSERTOWNER’ not set
[13:25:10.062] R_FUTURE_PLAN=‘multisession’
[13:25:10.062] => options(“future.plan” = ‘multisession’) [n=1, mode=character]
[13:25:10.062] Environment variable ‘R_FUTURE_PLAN_DISALLOW’ not set
[13:25:10.062] Environment variable ‘R_FUTURE_PSOCK_RELAY_IMMEDIATE’ not set
[13:25:10.063] Environment variable ‘R_FUTURE_RELAY_IMMEDIATE’ not set
[13:25:10.063] Environment variable ‘R_FUTURE_RESOLVE_RECURSIVE’ not set
[13:25:10.063] Environment variable ‘R_FUTURE_ALIVE_TIMEOUT’ not set
[13:25:10.063] Environment variable ‘R_FUTURE_RESOLVED_TIMEOUT’ not set
[13:25:10.063] Environment variable ‘R_FUTURE_CLUSTER_RESOLVED_TIMEOUT’ not set
[13:25:10.063] Environment variable ‘R_FUTURE_MULTICORE_RESOLVED_TIMEOUT’ not set
[13:25:10.063] Environment variable ‘R_FUTURE_ONFUTURECONDITION_KEEPFUTURE’ not set
[13:25:10.064] Environment variable ‘R_FUTURE_RNG_ONMISUSE’ not set
[13:25:10.064] Environment variable ‘R_FUTURE_GLOBALENV_ONMISUSE’ not set
[13:25:10.064] Environment variable ‘R_FUTURE_WAIT_TIMEOUT’ not set
[13:25:10.064] Environment variable ‘R_FUTURE_WAIT_ALPHA’ not set
[13:25:10.064] Environment variable ‘R_FUTURE_ASSIGN_GLOBALS_EXCLUDE’ not set
[13:25:10.064] Environment variable ‘R_FUTURE_OUTPUT_WINDOWS_REENCODE’ not set
[13:25:10.064] Environment variable ‘R_FUTURE_GLOBALS_GLOBALSOF_LOCALS’ not set
[13:25:10.064] Environment variable ‘R_FUTURE_STATE_ONINVALID’ not set
[13:25:10.065] Environment variable ‘R_FUTURE_JOURNAL’ not set
[13:25:10.065] Environment variable ‘R_FUTURE_GLOBALS_KEEPWHERE’ not set
[13:25:10.065] Option 'future.plan' = ‘multisession’
[13:25:10.065] R process uuid: 23a78189-cf97-f775-96c6-d0d164da4543
[13:25:10.065] Setting plan('default')
[13:25:10.065] plan(): Setting new future strategy stack:
[13:25:10.065] List of future strategies:
[13:25:10.065] 1. multisession:
[13:25:10.065]    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[13:25:10.065]    - tweaked: FALSE
[13:25:10.065]    - call: plan("default", .init = FALSE)
[13:25:10.069] plan(): nbrOfWorkers() = 2
> strategy <- plan("next")
> print(strategy)
multisession:
- args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
- tweaked: FALSE
- call: plan("default", .init = FALSE)
> stopifnot(inherits(strategy, "multisession"))
> plan("default")
[13:25:10.070] plan(): Setting new future strategy stack:
[13:25:10.070] List of future strategies:
[13:25:10.070] 1. multisession:
[13:25:10.070]    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[13:25:10.070]    - tweaked: FALSE
[13:25:10.070]    - call: plan("default")
[13:25:10.072] plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ...
[13:25:10.072] multisession:
[13:25:10.072] - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[13:25:10.072] - tweaked: FALSE
[13:25:10.072] - call: plan("default")
[13:25:10.076] getGlobalsAndPackages() ...
[13:25:10.076] Not searching for globals
[13:25:10.076] - globals: [0] <none>
[13:25:10.076] getGlobalsAndPackages() ... DONE
[13:25:10.076] [local output] makeClusterPSOCK() ...
[13:25:10.079] [local output] Workers: [n = 2] ‘localhost’, ‘localhost’
[13:25:10.080] [local output] Base port: 11471
[13:25:10.080] [local output] Getting setup options for 2 cluster nodes ...
[13:25:10.080] [local output]  - Node 1 of 2 ...
[13:25:10.080] [local output] localMachine=TRUE => revtunnel=FALSE

[13:25:10.081] [local output] Rscript port: 11471

[13:25:10.081] [local output]  - Node 2 of 2 ...
[13:25:10.082] [local output] localMachine=TRUE => revtunnel=FALSE

[13:25:10.082] [local output] Rscript port: 11471

[13:25:10.082] [local output] Getting setup options for 2 cluster nodes ... done
[13:25:10.082] [local output]  - Parallel setup requested for some PSOCK nodes
[13:25:10.083] [local output] Setting up PSOCK nodes in parallel
[13:25:10.083] List of 36
[13:25:10.083]  $ worker          : chr "localhost"
[13:25:10.083]   ..- attr(*, "localhost")= logi TRUE
[13:25:10.083]  $ master          : chr "localhost"
[13:25:10.083]  $ port            : int 11471
[13:25:10.083]  $ connectTimeout  : num 120
[13:25:10.083]  $ timeout         : num 2592000
[13:25:10.083]  $ rscript         : chr "'/usr/local/lib/R/bin/Rscript'"
[13:25:10.083]  $ homogeneous     : logi TRUE
[13:25:10.083]  $ rscript_args    : chr "--default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),fi"| __truncated__
[13:25:10.083]  $ rscript_envs    : NULL
[13:25:10.083]  $ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[13:25:10.083]  $ rscript_startup : NULL
[13:25:10.083]  $ rscript_sh      : chr "sh"
[13:25:10.083]  $ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[13:25:10.083]  $ methods         : logi TRUE
[13:25:10.083]  $ socketOptions   : chr "no-delay"
[13:25:10.083]  $ useXDR          : logi FALSE
[13:25:10.083]  $ outfile         : chr "/dev/null"
[13:25:10.083]  $ renice          : int NA
[13:25:10.083]  $ rshcmd          : NULL
[13:25:10.083]  $ user            : chr(0) 
[13:25:10.083]  $ revtunnel       : logi FALSE
[13:25:10.083]  $ rshlogfile      : NULL
[13:25:10.083]  $ rshopts         : chr(0) 
[13:25:10.083]  $ rank            : int 1
[13:25:10.083]  $ manual          : logi FALSE
[13:25:10.083]  $ dryrun          : logi FALSE
[13:25:10.083]  $ quiet           : logi FALSE
[13:25:10.083]  $ setup_strategy  : chr "parallel"
[13:25:10.083]  $ local_cmd       : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[13:25:10.083]  $ pidfile         : chr "/tmp/Rtmp8CmNfX/worker.rank=1.parallelly.parent=93120.16bc03ad2d51b.pid"
[13:25:10.083]  $ rshcmd_label    : NULL
[13:25:10.083]  $ rsh_call        : NULL
[13:25:10.083]  $ cmd             : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[13:25:10.083]  $ localMachine    : logi TRUE
[13:25:10.083]  $ make_fcn        :function (worker = getOption2("parallelly.localhost.hostname", "localhost"), 
[13:25:10.083]     master = NULL, port, connectTimeout = getOption2("parallelly.makeNodePSOCK.connectTimeout", 
[13:25:10.083]         2 * 60), timeout = getOption2("parallelly.makeNodePSOCK.timeout", 
[13:25:10.083]         30 * 24 * 60 * 60), rscript = NULL, homogeneous = NULL, rscript_args = NULL, 
[13:25:10.083]     rscript_envs = NULL, rscript_libs = NULL, rscript_startup = NULL, rscript_sh = c("auto", 
[13:25:10.083]         "cmd", "sh"), default_packages = c("datasets", "utils", "grDevices", 
[13:25:10.083]         "graphics", "stats", if (methods) "methods"), methods = TRUE, socketOptions = getOption2("parallelly.makeNodePSOCK.socketOptions", 
[13:25:10.083]         "no-delay"), useXDR = getOption2("parallelly.makeNodePSOCK.useXDR", 
[13:25:10.083]         FALSE), outfile = "/dev/null", renice = NA_integer_, rshcmd = getOption2("parallelly.makeNodePSOCK.rshcmd", 
[13:25:10.083]         NULL), user = NULL, revtunnel = NA, rshlogfile = NULL, rshopts = getOption2("parallelly.makeNodePSOCK.rshopts", 
[13:25:10.083]         NULL), rank = 1L, manual = FALSE, dryrun = FALSE, quiet = FALSE, 
[13:25:10.083]     setup_strategy = getOption2("parallelly.makeNodePSOCK.setup_strategy", 
[13:25:10.083]         "parallel"), action = c("launch", "options"), verbose = FALSE)  
[13:25:10.083]  $ arguments       :List of 28
[13:25:10.083]   ..$ worker          : chr "localhost"
[13:25:10.083]   ..$ master          : NULL
[13:25:10.083]   ..$ port            : int 11471
[13:25:10.083]   ..$ connectTimeout  : num 120
[13:25:10.083]   ..$ timeout         : num 2592000
[13:25:10.083]   ..$ rscript         : NULL
[13:25:10.083]   ..$ homogeneous     : NULL
[13:25:10.083]   ..$ rscript_args    : NULL
[13:25:10.083]   ..$ rscript_envs    : NULL
[13:25:10.083]   ..$ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[13:25:10.083]   ..$ rscript_startup : NULL
[13:25:10.083]   ..$ rscript_sh      : chr [1:3] "auto" "cmd" "sh"
[13:25:10.083]   ..$ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[13:25:10.083]   ..$ methods         : logi TRUE
[13:25:10.083]   ..$ socketOptions   : chr "no-delay"
[13:25:10.083]   ..$ useXDR          : logi FALSE
[13:25:10.083]   ..$ outfile         : chr "/dev/null"
[13:25:10.083]   ..$ renice          : int NA
[13:25:10.083]   ..$ rshcmd          : NULL
[13:25:10.083]   ..$ user            : NULL
[13:25:10.083]   ..$ revtunnel       : logi NA
[13:25:10.083]   ..$ rshlogfile      : NULL
[13:25:10.083]   ..$ rshopts         : NULL
[13:25:10.083]   ..$ rank            : int 1
[13:25:10.083]   ..$ manual          : logi FALSE
[13:25:10.083]   ..$ dryrun          : logi FALSE
[13:25:10.083]   ..$ quiet           : logi FALSE
[13:25:10.083]   ..$ setup_strategy  : chr "parallel"
[13:25:10.083]  - attr(*, "class")= chr [1:2] "makeNodePSOCKOptions" "makeNodeOptions"
[13:25:10.099] [local output] System call to launch all workers:
[13:25:10.099] [local output] '/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/Rtmp8CmNfX/worker.rank=1.parallelly.parent=93120.16bc03ad2d51b.pid")), silent = TRUE)' -e 'options(socketOptions = "no-delay")' -e '.libPaths(c("/usr/local/lib/R/site-library","/usr/local/lib/R/library"))' -e 'workRSOCK <- tryCatch(parallel:::.workRSOCK, error=function(e) parallel:::.slaveRSOCK); workRSOCK()' MASTER=localhost PORT=11471 OUT=/dev/null TIMEOUT=2592000 XDR=FALSE SETUPTIMEOUT=120 SETUPSTRATEGY=parallel
[13:25:10.099] [local output] Starting PSOCK main server
[13:25:10.101] [local output] Workers launched
[13:25:10.101] [local output] Waiting for workers to connect back
[13:25:10.101]  - [local output] 0 workers out of 2 ready
[13:25:10.349]  - [local output] 0 workers out of 2 ready
[13:25:10.350]  - [local output] 1 workers out of 2 ready
[13:25:10.350]  - [local output] 2 workers out of 2 ready
[13:25:10.350] [local output] Launching of workers completed
[13:25:10.350] [local output] Collecting session information from workers
[13:25:10.351] [local output]  - Worker #1 of 2
[13:25:10.351] [local output]  - Worker #2 of 2
[13:25:10.351] [local output] makeClusterPSOCK() ... done
[13:25:10.363] Packages needed by the future expression (n = 0): <none>
[13:25:10.364] Packages needed by future strategies (n = 0): <none>
[13:25:10.364] {
[13:25:10.364]     {
[13:25:10.364]         {
[13:25:10.364]             ...future.startTime <- base::Sys.time()
[13:25:10.364]             {
[13:25:10.364]                 {
[13:25:10.364]                   {
[13:25:10.364]                     {
[13:25:10.364]                       base::local({
[13:25:10.364]                         has_future <- base::requireNamespace("future", 
[13:25:10.364]                           quietly = TRUE)
[13:25:10.364]                         if (has_future) {
[13:25:10.364]                           ns <- base::getNamespace("future")
[13:25:10.364]                           version <- ns[[".package"]][["version"]]
[13:25:10.364]                           if (is.null(version)) 
[13:25:10.364]                             version <- utils::packageVersion("future")
[13:25:10.364]                         }
[13:25:10.364]                         else {
[13:25:10.364]                           version <- NULL
[13:25:10.364]                         }
[13:25:10.364]                         if (!has_future || version < "1.8.0") {
[13:25:10.364]                           info <- base::c(r_version = base::gsub("R version ", 
[13:25:10.364]                             "", base::R.version$version.string), 
[13:25:10.364]                             platform = base::sprintf("%s (%s-bit)", 
[13:25:10.364]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:25:10.364]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:25:10.364]                               "release", "version")], collapse = " "), 
[13:25:10.364]                             hostname = base::Sys.info()[["nodename"]])
[13:25:10.364]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:25:10.364]                             info)
[13:25:10.364]                           info <- base::paste(info, collapse = "; ")
[13:25:10.364]                           if (!has_future) {
[13:25:10.364]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:25:10.364]                               info)
[13:25:10.364]                           }
[13:25:10.364]                           else {
[13:25:10.364]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:25:10.364]                               info, version)
[13:25:10.364]                           }
[13:25:10.364]                           base::stop(msg)
[13:25:10.364]                         }
[13:25:10.364]                       })
[13:25:10.364]                     }
[13:25:10.364]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[13:25:10.364]                     base::options(mc.cores = 1L)
[13:25:10.364]                   }
[13:25:10.364]                   options(future.plan = NULL)
[13:25:10.364]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:25:10.364]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:25:10.364]                 }
[13:25:10.364]                 ...future.workdir <- getwd()
[13:25:10.364]             }
[13:25:10.364]             ...future.oldOptions <- base::as.list(base::.Options)
[13:25:10.364]             ...future.oldEnvVars <- base::Sys.getenv()
[13:25:10.364]         }
[13:25:10.364]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:25:10.364]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:25:10.364]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:25:10.364]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:25:10.364]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:25:10.364]             future.stdout.windows.reencode = NULL, width = 80L)
[13:25:10.364]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:25:10.364]             base::names(...future.oldOptions))
[13:25:10.364]     }
[13:25:10.364]     if (FALSE) {
[13:25:10.364]     }
[13:25:10.364]     else {
[13:25:10.364]         if (TRUE) {
[13:25:10.364]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:25:10.364]                 open = "w")
[13:25:10.364]         }
[13:25:10.364]         else {
[13:25:10.364]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:25:10.364]                 windows = "NUL", "/dev/null"), open = "w")
[13:25:10.364]         }
[13:25:10.364]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:25:10.364]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:25:10.364]             base::sink(type = "output", split = FALSE)
[13:25:10.364]             base::close(...future.stdout)
[13:25:10.364]         }, add = TRUE)
[13:25:10.364]     }
[13:25:10.364]     ...future.frame <- base::sys.nframe()
[13:25:10.364]     ...future.conditions <- base::list()
[13:25:10.364]     ...future.rng <- base::globalenv()$.Random.seed
[13:25:10.364]     if (FALSE) {
[13:25:10.364]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:25:10.364]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:25:10.364]     }
[13:25:10.364]     ...future.result <- base::tryCatch({
[13:25:10.364]         base::withCallingHandlers({
[13:25:10.364]             ...future.value <- base::withVisible(base::local({
[13:25:10.364]                 ...future.makeSendCondition <- base::local({
[13:25:10.364]                   sendCondition <- NULL
[13:25:10.364]                   function(frame = 1L) {
[13:25:10.364]                     if (is.function(sendCondition)) 
[13:25:10.364]                       return(sendCondition)
[13:25:10.364]                     ns <- getNamespace("parallel")
[13:25:10.364]                     if (exists("sendData", mode = "function", 
[13:25:10.364]                       envir = ns)) {
[13:25:10.364]                       parallel_sendData <- get("sendData", mode = "function", 
[13:25:10.364]                         envir = ns)
[13:25:10.364]                       envir <- sys.frame(frame)
[13:25:10.364]                       master <- NULL
[13:25:10.364]                       while (!identical(envir, .GlobalEnv) && 
[13:25:10.364]                         !identical(envir, emptyenv())) {
[13:25:10.364]                         if (exists("master", mode = "list", envir = envir, 
[13:25:10.364]                           inherits = FALSE)) {
[13:25:10.364]                           master <- get("master", mode = "list", 
[13:25:10.364]                             envir = envir, inherits = FALSE)
[13:25:10.364]                           if (inherits(master, c("SOCKnode", 
[13:25:10.364]                             "SOCK0node"))) {
[13:25:10.364]                             sendCondition <<- function(cond) {
[13:25:10.364]                               data <- list(type = "VALUE", value = cond, 
[13:25:10.364]                                 success = TRUE)
[13:25:10.364]                               parallel_sendData(master, data)
[13:25:10.364]                             }
[13:25:10.364]                             return(sendCondition)
[13:25:10.364]                           }
[13:25:10.364]                         }
[13:25:10.364]                         frame <- frame + 1L
[13:25:10.364]                         envir <- sys.frame(frame)
[13:25:10.364]                       }
[13:25:10.364]                     }
[13:25:10.364]                     sendCondition <<- function(cond) NULL
[13:25:10.364]                   }
[13:25:10.364]                 })
[13:25:10.364]                 withCallingHandlers({
[13:25:10.364]                   NA
[13:25:10.364]                 }, immediateCondition = function(cond) {
[13:25:10.364]                   sendCondition <- ...future.makeSendCondition()
[13:25:10.364]                   sendCondition(cond)
[13:25:10.364]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:25:10.364]                   {
[13:25:10.364]                     inherits <- base::inherits
[13:25:10.364]                     invokeRestart <- base::invokeRestart
[13:25:10.364]                     is.null <- base::is.null
[13:25:10.364]                     muffled <- FALSE
[13:25:10.364]                     if (inherits(cond, "message")) {
[13:25:10.364]                       muffled <- grepl(pattern, "muffleMessage")
[13:25:10.364]                       if (muffled) 
[13:25:10.364]                         invokeRestart("muffleMessage")
[13:25:10.364]                     }
[13:25:10.364]                     else if (inherits(cond, "warning")) {
[13:25:10.364]                       muffled <- grepl(pattern, "muffleWarning")
[13:25:10.364]                       if (muffled) 
[13:25:10.364]                         invokeRestart("muffleWarning")
[13:25:10.364]                     }
[13:25:10.364]                     else if (inherits(cond, "condition")) {
[13:25:10.364]                       if (!is.null(pattern)) {
[13:25:10.364]                         computeRestarts <- base::computeRestarts
[13:25:10.364]                         grepl <- base::grepl
[13:25:10.364]                         restarts <- computeRestarts(cond)
[13:25:10.364]                         for (restart in restarts) {
[13:25:10.364]                           name <- restart$name
[13:25:10.364]                           if (is.null(name)) 
[13:25:10.364]                             next
[13:25:10.364]                           if (!grepl(pattern, name)) 
[13:25:10.364]                             next
[13:25:10.364]                           invokeRestart(restart)
[13:25:10.364]                           muffled <- TRUE
[13:25:10.364]                           break
[13:25:10.364]                         }
[13:25:10.364]                       }
[13:25:10.364]                     }
[13:25:10.364]                     invisible(muffled)
[13:25:10.364]                   }
[13:25:10.364]                   muffleCondition(cond)
[13:25:10.364]                 })
[13:25:10.364]             }))
[13:25:10.364]             future::FutureResult(value = ...future.value$value, 
[13:25:10.364]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:25:10.364]                   ...future.rng), globalenv = if (FALSE) 
[13:25:10.364]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:25:10.364]                     ...future.globalenv.names))
[13:25:10.364]                 else NULL, started = ...future.startTime, version = "1.8")
[13:25:10.364]         }, condition = base::local({
[13:25:10.364]             c <- base::c
[13:25:10.364]             inherits <- base::inherits
[13:25:10.364]             invokeRestart <- base::invokeRestart
[13:25:10.364]             length <- base::length
[13:25:10.364]             list <- base::list
[13:25:10.364]             seq.int <- base::seq.int
[13:25:10.364]             signalCondition <- base::signalCondition
[13:25:10.364]             sys.calls <- base::sys.calls
[13:25:10.364]             `[[` <- base::`[[`
[13:25:10.364]             `+` <- base::`+`
[13:25:10.364]             `<<-` <- base::`<<-`
[13:25:10.364]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:25:10.364]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:25:10.364]                   3L)]
[13:25:10.364]             }
[13:25:10.364]             function(cond) {
[13:25:10.364]                 is_error <- inherits(cond, "error")
[13:25:10.364]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:25:10.364]                   NULL)
[13:25:10.364]                 if (is_error) {
[13:25:10.364]                   sessionInformation <- function() {
[13:25:10.364]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:25:10.364]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:25:10.364]                       search = base::search(), system = base::Sys.info())
[13:25:10.364]                   }
[13:25:10.364]                   ...future.conditions[[length(...future.conditions) + 
[13:25:10.364]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:25:10.364]                     cond$call), session = sessionInformation(), 
[13:25:10.364]                     timestamp = base::Sys.time(), signaled = 0L)
[13:25:10.364]                   signalCondition(cond)
[13:25:10.364]                 }
[13:25:10.364]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:25:10.364]                 "immediateCondition"))) {
[13:25:10.364]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:25:10.364]                   ...future.conditions[[length(...future.conditions) + 
[13:25:10.364]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:25:10.364]                   if (TRUE && !signal) {
[13:25:10.364]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:25:10.364]                     {
[13:25:10.364]                       inherits <- base::inherits
[13:25:10.364]                       invokeRestart <- base::invokeRestart
[13:25:10.364]                       is.null <- base::is.null
[13:25:10.364]                       muffled <- FALSE
[13:25:10.364]                       if (inherits(cond, "message")) {
[13:25:10.364]                         muffled <- grepl(pattern, "muffleMessage")
[13:25:10.364]                         if (muffled) 
[13:25:10.364]                           invokeRestart("muffleMessage")
[13:25:10.364]                       }
[13:25:10.364]                       else if (inherits(cond, "warning")) {
[13:25:10.364]                         muffled <- grepl(pattern, "muffleWarning")
[13:25:10.364]                         if (muffled) 
[13:25:10.364]                           invokeRestart("muffleWarning")
[13:25:10.364]                       }
[13:25:10.364]                       else if (inherits(cond, "condition")) {
[13:25:10.364]                         if (!is.null(pattern)) {
[13:25:10.364]                           computeRestarts <- base::computeRestarts
[13:25:10.364]                           grepl <- base::grepl
[13:25:10.364]                           restarts <- computeRestarts(cond)
[13:25:10.364]                           for (restart in restarts) {
[13:25:10.364]                             name <- restart$name
[13:25:10.364]                             if (is.null(name)) 
[13:25:10.364]                               next
[13:25:10.364]                             if (!grepl(pattern, name)) 
[13:25:10.364]                               next
[13:25:10.364]                             invokeRestart(restart)
[13:25:10.364]                             muffled <- TRUE
[13:25:10.364]                             break
[13:25:10.364]                           }
[13:25:10.364]                         }
[13:25:10.364]                       }
[13:25:10.364]                       invisible(muffled)
[13:25:10.364]                     }
[13:25:10.364]                     muffleCondition(cond, pattern = "^muffle")
[13:25:10.364]                   }
[13:25:10.364]                 }
[13:25:10.364]                 else {
[13:25:10.364]                   if (TRUE) {
[13:25:10.364]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:25:10.364]                     {
[13:25:10.364]                       inherits <- base::inherits
[13:25:10.364]                       invokeRestart <- base::invokeRestart
[13:25:10.364]                       is.null <- base::is.null
[13:25:10.364]                       muffled <- FALSE
[13:25:10.364]                       if (inherits(cond, "message")) {
[13:25:10.364]                         muffled <- grepl(pattern, "muffleMessage")
[13:25:10.364]                         if (muffled) 
[13:25:10.364]                           invokeRestart("muffleMessage")
[13:25:10.364]                       }
[13:25:10.364]                       else if (inherits(cond, "warning")) {
[13:25:10.364]                         muffled <- grepl(pattern, "muffleWarning")
[13:25:10.364]                         if (muffled) 
[13:25:10.364]                           invokeRestart("muffleWarning")
[13:25:10.364]                       }
[13:25:10.364]                       else if (inherits(cond, "condition")) {
[13:25:10.364]                         if (!is.null(pattern)) {
[13:25:10.364]                           computeRestarts <- base::computeRestarts
[13:25:10.364]                           grepl <- base::grepl
[13:25:10.364]                           restarts <- computeRestarts(cond)
[13:25:10.364]                           for (restart in restarts) {
[13:25:10.364]                             name <- restart$name
[13:25:10.364]                             if (is.null(name)) 
[13:25:10.364]                               next
[13:25:10.364]                             if (!grepl(pattern, name)) 
[13:25:10.364]                               next
[13:25:10.364]                             invokeRestart(restart)
[13:25:10.364]                             muffled <- TRUE
[13:25:10.364]                             break
[13:25:10.364]                           }
[13:25:10.364]                         }
[13:25:10.364]                       }
[13:25:10.364]                       invisible(muffled)
[13:25:10.364]                     }
[13:25:10.364]                     muffleCondition(cond, pattern = "^muffle")
[13:25:10.364]                   }
[13:25:10.364]                 }
[13:25:10.364]             }
[13:25:10.364]         }))
[13:25:10.364]     }, error = function(ex) {
[13:25:10.364]         base::structure(base::list(value = NULL, visible = NULL, 
[13:25:10.364]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:25:10.364]                 ...future.rng), started = ...future.startTime, 
[13:25:10.364]             finished = Sys.time(), session_uuid = NA_character_, 
[13:25:10.364]             version = "1.8"), class = "FutureResult")
[13:25:10.364]     }, finally = {
[13:25:10.364]         if (!identical(...future.workdir, getwd())) 
[13:25:10.364]             setwd(...future.workdir)
[13:25:10.364]         {
[13:25:10.364]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:25:10.364]                 ...future.oldOptions$nwarnings <- NULL
[13:25:10.364]             }
[13:25:10.364]             base::options(...future.oldOptions)
[13:25:10.364]             if (.Platform$OS.type == "windows") {
[13:25:10.364]                 old_names <- names(...future.oldEnvVars)
[13:25:10.364]                 envs <- base::Sys.getenv()
[13:25:10.364]                 names <- names(envs)
[13:25:10.364]                 common <- intersect(names, old_names)
[13:25:10.364]                 added <- setdiff(names, old_names)
[13:25:10.364]                 removed <- setdiff(old_names, names)
[13:25:10.364]                 changed <- common[...future.oldEnvVars[common] != 
[13:25:10.364]                   envs[common]]
[13:25:10.364]                 NAMES <- toupper(changed)
[13:25:10.364]                 args <- list()
[13:25:10.364]                 for (kk in seq_along(NAMES)) {
[13:25:10.364]                   name <- changed[[kk]]
[13:25:10.364]                   NAME <- NAMES[[kk]]
[13:25:10.364]                   if (name != NAME && is.element(NAME, old_names)) 
[13:25:10.364]                     next
[13:25:10.364]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:25:10.364]                 }
[13:25:10.364]                 NAMES <- toupper(added)
[13:25:10.364]                 for (kk in seq_along(NAMES)) {
[13:25:10.364]                   name <- added[[kk]]
[13:25:10.364]                   NAME <- NAMES[[kk]]
[13:25:10.364]                   if (name != NAME && is.element(NAME, old_names)) 
[13:25:10.364]                     next
[13:25:10.364]                   args[[name]] <- ""
[13:25:10.364]                 }
[13:25:10.364]                 NAMES <- toupper(removed)
[13:25:10.364]                 for (kk in seq_along(NAMES)) {
[13:25:10.364]                   name <- removed[[kk]]
[13:25:10.364]                   NAME <- NAMES[[kk]]
[13:25:10.364]                   if (name != NAME && is.element(NAME, old_names)) 
[13:25:10.364]                     next
[13:25:10.364]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:25:10.364]                 }
[13:25:10.364]                 if (length(args) > 0) 
[13:25:10.364]                   base::do.call(base::Sys.setenv, args = args)
[13:25:10.364]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:25:10.364]             }
[13:25:10.364]             else {
[13:25:10.364]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:25:10.364]             }
[13:25:10.364]             {
[13:25:10.364]                 if (base::length(...future.futureOptionsAdded) > 
[13:25:10.364]                   0L) {
[13:25:10.364]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:25:10.364]                   base::names(opts) <- ...future.futureOptionsAdded
[13:25:10.364]                   base::options(opts)
[13:25:10.364]                 }
[13:25:10.364]                 {
[13:25:10.364]                   {
[13:25:10.364]                     base::options(mc.cores = ...future.mc.cores.old)
[13:25:10.364]                     NULL
[13:25:10.364]                   }
[13:25:10.364]                   options(future.plan = "multisession")
[13:25:10.364]                   if (is.na("multisession")) 
[13:25:10.364]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:25:10.364]                   else Sys.setenv(R_FUTURE_PLAN = "multisession")
[13:25:10.364]                   future::plan(list(function (..., workers = availableCores(), 
[13:25:10.364]                     lazy = FALSE, rscript_libs = .libPaths(), 
[13:25:10.364]                     envir = parent.frame()) 
[13:25:10.364]                   {
[13:25:10.364]                     if (is.function(workers)) 
[13:25:10.364]                       workers <- workers()
[13:25:10.364]                     workers <- structure(as.integer(workers), 
[13:25:10.364]                       class = class(workers))
[13:25:10.364]                     stop_if_not(length(workers) == 1, is.finite(workers), 
[13:25:10.364]                       workers >= 1)
[13:25:10.364]                     if (workers == 1L && !inherits(workers, "AsIs")) {
[13:25:10.364]                       return(sequential(..., lazy = TRUE, envir = envir))
[13:25:10.364]                     }
[13:25:10.364]                     future <- MultisessionFuture(..., workers = workers, 
[13:25:10.364]                       lazy = lazy, rscript_libs = rscript_libs, 
[13:25:10.364]                       envir = envir)
[13:25:10.364]                     if (!future$lazy) 
[13:25:10.364]                       future <- run(future)
[13:25:10.364]                     invisible(future)
[13:25:10.364]                   }), .cleanup = FALSE, .init = FALSE)
[13:25:10.364]                 }
[13:25:10.364]             }
[13:25:10.364]         }
[13:25:10.364]     })
[13:25:10.364]     if (TRUE) {
[13:25:10.364]         base::sink(type = "output", split = FALSE)
[13:25:10.364]         if (TRUE) {
[13:25:10.364]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:25:10.364]         }
[13:25:10.364]         else {
[13:25:10.364]             ...future.result["stdout"] <- base::list(NULL)
[13:25:10.364]         }
[13:25:10.364]         base::close(...future.stdout)
[13:25:10.364]         ...future.stdout <- NULL
[13:25:10.364]     }
[13:25:10.364]     ...future.result$conditions <- ...future.conditions
[13:25:10.364]     ...future.result$finished <- base::Sys.time()
[13:25:10.364]     ...future.result
[13:25:10.364] }
[13:25:10.424] MultisessionFuture started
[13:25:10.425] result() for ClusterFuture ...
[13:25:10.425] receiveMessageFromWorker() for ClusterFuture ...
[13:25:10.425] - Validating connection of MultisessionFuture
[13:25:10.465] - received message: FutureResult
[13:25:10.465] - Received FutureResult
[13:25:10.465] - Erased future from FutureRegistry
[13:25:10.466] result() for ClusterFuture ...
[13:25:10.466] - result already collected: FutureResult
[13:25:10.466] result() for ClusterFuture ... done
[13:25:10.466] receiveMessageFromWorker() for ClusterFuture ... done
[13:25:10.466] result() for ClusterFuture ... done
[13:25:10.466] result() for ClusterFuture ...
[13:25:10.466] - result already collected: FutureResult
[13:25:10.466] result() for ClusterFuture ... done
[13:25:10.466] plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ... DONE
[13:25:10.470] plan(): nbrOfWorkers() = 2
> Sys.setenv(R_FUTURE_PLAN = "")
> message("- .onLoad() w/ R_FUTURE_PLAN = 'multisession' ... DONE")
- .onLoad() w/ R_FUTURE_PLAN = 'multisession' ... DONE
> 
> message("- .onLoad() w/ future.plan = 'multisession' ...")
- .onLoad() w/ future.plan = 'multisession' ...
> options(future.plan = NULL, future.plan = 'multisession', future.cmdargs = NULL)
> .onLoad(pkgname, pkgname)
[13:25:10.471] Future-specific environment variables:
- R_FUTURE_PLAN=‘’
- R_FUTURE_WAIT_INTERVAL=‘0.01’
[13:25:10.471] Environment variable ‘R_FUTURE_DEMO_MANDELBROT_REGION’ not set
[13:25:10.472] Environment variable ‘R_FUTURE_DEMO_MANDELBROT_NROW’ not set
[13:25:10.472] Environment variable ‘R_FUTURE_DEPRECATED_IGNORE’ not set
[13:25:10.472] Environment variable ‘R_FUTURE_DEPRECATED_DEFUNCT’ not set
[13:25:10.472] Environment variable ‘R_FUTURE_FORK_MULTITHREADING_ENABLE’ not set
[13:25:10.472] Environment variable ‘R_FUTURE_GLOBALS_MAXSIZE’ not set
[13:25:10.472] Environment variable ‘R_FUTURE_GLOBALS_ONMISSING’ not set
[13:25:10.472] Environment variable ‘R_FUTURE_GLOBALS_ONREFERENCE’ not set
[13:25:10.472] Environment variable ‘R_FUTURE_GLOBALS_METHOD’ not set
[13:25:10.473] Environment variable ‘R_FUTURE_GLOBALS_RESOLVE’ not set
[13:25:10.473] Environment variable ‘R_FUTURE_LAZY_ASSERTOWNER’ not set
[13:25:10.473] Environment variable ‘R_FUTURE_PLAN_DISALLOW’ not set
[13:25:10.473] Environment variable ‘R_FUTURE_PSOCK_RELAY_IMMEDIATE’ not set
[13:25:10.473] Environment variable ‘R_FUTURE_RELAY_IMMEDIATE’ not set
[13:25:10.473] Environment variable ‘R_FUTURE_RESOLVE_RECURSIVE’ not set
[13:25:10.473] Environment variable ‘R_FUTURE_ALIVE_TIMEOUT’ not set
[13:25:10.473] Environment variable ‘R_FUTURE_RESOLVED_TIMEOUT’ not set
[13:25:10.473] Environment variable ‘R_FUTURE_CLUSTER_RESOLVED_TIMEOUT’ not set
[13:25:10.474] Environment variable ‘R_FUTURE_MULTICORE_RESOLVED_TIMEOUT’ not set
[13:25:10.474] Environment variable ‘R_FUTURE_ONFUTURECONDITION_KEEPFUTURE’ not set
[13:25:10.474] Environment variable ‘R_FUTURE_RNG_ONMISUSE’ not set
[13:25:10.474] Environment variable ‘R_FUTURE_GLOBALENV_ONMISUSE’ not set
[13:25:10.474] Environment variable ‘R_FUTURE_WAIT_TIMEOUT’ not set
[13:25:10.474] Environment variable ‘R_FUTURE_WAIT_ALPHA’ not set
[13:25:10.474] Environment variable ‘R_FUTURE_ASSIGN_GLOBALS_EXCLUDE’ not set
[13:25:10.474] Environment variable ‘R_FUTURE_OUTPUT_WINDOWS_REENCODE’ not set
[13:25:10.474] Environment variable ‘R_FUTURE_GLOBALS_GLOBALSOF_LOCALS’ not set
[13:25:10.475] Environment variable ‘R_FUTURE_STATE_ONINVALID’ not set
[13:25:10.475] Environment variable ‘R_FUTURE_JOURNAL’ not set
[13:25:10.475] Environment variable ‘R_FUTURE_GLOBALS_KEEPWHERE’ not set
[13:25:10.475] Option 'future.plan' = ‘multisession’
[13:25:10.475] R process uuid: 23a78189-cf97-f775-96c6-d0d164da4543
[13:25:10.475] Setting plan('default')
[13:25:10.475] plan(): Setting new future strategy stack:
[13:25:10.475] List of future strategies:
[13:25:10.475] 1. multisession:
[13:25:10.475]    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[13:25:10.475]    - tweaked: FALSE
[13:25:10.475]    - call: plan("default", .init = FALSE)
[13:25:10.480] plan(): nbrOfWorkers() = 2
> strategy <- plan("next")
> print(strategy)
multisession:
- args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
- tweaked: FALSE
- call: plan("default", .init = FALSE)
> stopifnot(inherits(strategy, "multisession"))
> plan("default")
[13:25:10.481] plan(): Setting new future strategy stack:
[13:25:10.481] List of future strategies:
[13:25:10.481] 1. multisession:
[13:25:10.481]    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[13:25:10.481]    - tweaked: FALSE
[13:25:10.481]    - call: plan("default")
[13:25:10.482] plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ...
[13:25:10.482] multisession:
[13:25:10.482] - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[13:25:10.482] - tweaked: FALSE
[13:25:10.482] - call: plan("default")
[13:25:10.487] getGlobalsAndPackages() ...
[13:25:10.487] Not searching for globals
[13:25:10.487] - globals: [0] <none>
[13:25:10.487] getGlobalsAndPackages() ... DONE
[13:25:10.488] [local output] makeClusterPSOCK() ...
[13:25:10.492] [local output] Workers: [n = 2] ‘localhost’, ‘localhost’
[13:25:10.493] [local output] Base port: 11803
[13:25:10.493] [local output] Getting setup options for 2 cluster nodes ...
[13:25:10.493] [local output]  - Node 1 of 2 ...
[13:25:10.493] [local output] localMachine=TRUE => revtunnel=FALSE

[13:25:10.494] [local output] Rscript port: 11803

[13:25:10.494] [local output]  - Node 2 of 2 ...
[13:25:10.495] [local output] localMachine=TRUE => revtunnel=FALSE

[13:25:10.495] [local output] Rscript port: 11803

[13:25:10.496] [local output] Getting setup options for 2 cluster nodes ... done
[13:25:10.496] [local output]  - Parallel setup requested for some PSOCK nodes
[13:25:10.496] [local output] Setting up PSOCK nodes in parallel
[13:25:10.496] List of 36
[13:25:10.496]  $ worker          : chr "localhost"
[13:25:10.496]   ..- attr(*, "localhost")= logi TRUE
[13:25:10.496]  $ master          : chr "localhost"
[13:25:10.496]  $ port            : int 11803
[13:25:10.496]  $ connectTimeout  : num 120
[13:25:10.496]  $ timeout         : num 2592000
[13:25:10.496]  $ rscript         : chr "'/usr/local/lib/R/bin/Rscript'"
[13:25:10.496]  $ homogeneous     : logi TRUE
[13:25:10.496]  $ rscript_args    : chr "--default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),fi"| __truncated__
[13:25:10.496]  $ rscript_envs    : NULL
[13:25:10.496]  $ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[13:25:10.496]  $ rscript_startup : NULL
[13:25:10.496]  $ rscript_sh      : chr "sh"
[13:25:10.496]  $ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[13:25:10.496]  $ methods         : logi TRUE
[13:25:10.496]  $ socketOptions   : chr "no-delay"
[13:25:10.496]  $ useXDR          : logi FALSE
[13:25:10.496]  $ outfile         : chr "/dev/null"
[13:25:10.496]  $ renice          : int NA
[13:25:10.496]  $ rshcmd          : NULL
[13:25:10.496]  $ user            : chr(0) 
[13:25:10.496]  $ revtunnel       : logi FALSE
[13:25:10.496]  $ rshlogfile      : NULL
[13:25:10.496]  $ rshopts         : chr(0) 
[13:25:10.496]  $ rank            : int 1
[13:25:10.496]  $ manual          : logi FALSE
[13:25:10.496]  $ dryrun          : logi FALSE
[13:25:10.496]  $ quiet           : logi FALSE
[13:25:10.496]  $ setup_strategy  : chr "parallel"
[13:25:10.496]  $ local_cmd       : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[13:25:10.496]  $ pidfile         : chr "/tmp/Rtmp8CmNfX/worker.rank=1.parallelly.parent=93120.16bc06955cb1a.pid"
[13:25:10.496]  $ rshcmd_label    : NULL
[13:25:10.496]  $ rsh_call        : NULL
[13:25:10.496]  $ cmd             : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[13:25:10.496]  $ localMachine    : logi TRUE
[13:25:10.496]  $ make_fcn        :function (worker = getOption2("parallelly.localhost.hostname", "localhost"), 
[13:25:10.496]     master = NULL, port, connectTimeout = getOption2("parallelly.makeNodePSOCK.connectTimeout", 
[13:25:10.496]         2 * 60), timeout = getOption2("parallelly.makeNodePSOCK.timeout", 
[13:25:10.496]         30 * 24 * 60 * 60), rscript = NULL, homogeneous = NULL, rscript_args = NULL, 
[13:25:10.496]     rscript_envs = NULL, rscript_libs = NULL, rscript_startup = NULL, rscript_sh = c("auto", 
[13:25:10.496]         "cmd", "sh"), default_packages = c("datasets", "utils", "grDevices", 
[13:25:10.496]         "graphics", "stats", if (methods) "methods"), methods = TRUE, socketOptions = getOption2("parallelly.makeNodePSOCK.socketOptions", 
[13:25:10.496]         "no-delay"), useXDR = getOption2("parallelly.makeNodePSOCK.useXDR", 
[13:25:10.496]         FALSE), outfile = "/dev/null", renice = NA_integer_, rshcmd = getOption2("parallelly.makeNodePSOCK.rshcmd", 
[13:25:10.496]         NULL), user = NULL, revtunnel = NA, rshlogfile = NULL, rshopts = getOption2("parallelly.makeNodePSOCK.rshopts", 
[13:25:10.496]         NULL), rank = 1L, manual = FALSE, dryrun = FALSE, quiet = FALSE, 
[13:25:10.496]     setup_strategy = getOption2("parallelly.makeNodePSOCK.setup_strategy", 
[13:25:10.496]         "parallel"), action = c("launch", "options"), verbose = FALSE)  
[13:25:10.496]  $ arguments       :List of 28
[13:25:10.496]   ..$ worker          : chr "localhost"
[13:25:10.496]   ..$ master          : NULL
[13:25:10.496]   ..$ port            : int 11803
[13:25:10.496]   ..$ connectTimeout  : num 120
[13:25:10.496]   ..$ timeout         : num 2592000
[13:25:10.496]   ..$ rscript         : NULL
[13:25:10.496]   ..$ homogeneous     : NULL
[13:25:10.496]   ..$ rscript_args    : NULL
[13:25:10.496]   ..$ rscript_envs    : NULL
[13:25:10.496]   ..$ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[13:25:10.496]   ..$ rscript_startup : NULL
[13:25:10.496]   ..$ rscript_sh      : chr [1:3] "auto" "cmd" "sh"
[13:25:10.496]   ..$ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[13:25:10.496]   ..$ methods         : logi TRUE
[13:25:10.496]   ..$ socketOptions   : chr "no-delay"
[13:25:10.496]   ..$ useXDR          : logi FALSE
[13:25:10.496]   ..$ outfile         : chr "/dev/null"
[13:25:10.496]   ..$ renice          : int NA
[13:25:10.496]   ..$ rshcmd          : NULL
[13:25:10.496]   ..$ user            : NULL
[13:25:10.496]   ..$ revtunnel       : logi NA
[13:25:10.496]   ..$ rshlogfile      : NULL
[13:25:10.496]   ..$ rshopts         : NULL
[13:25:10.496]   ..$ rank            : int 1
[13:25:10.496]   ..$ manual          : logi FALSE
[13:25:10.496]   ..$ dryrun          : logi FALSE
[13:25:10.496]   ..$ quiet           : logi FALSE
[13:25:10.496]   ..$ setup_strategy  : chr "parallel"
[13:25:10.496]  - attr(*, "class")= chr [1:2] "makeNodePSOCKOptions" "makeNodeOptions"
[13:25:10.515] [local output] System call to launch all workers:
[13:25:10.515] [local output] '/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/Rtmp8CmNfX/worker.rank=1.parallelly.parent=93120.16bc06955cb1a.pid")), silent = TRUE)' -e 'options(socketOptions = "no-delay")' -e '.libPaths(c("/usr/local/lib/R/site-library","/usr/local/lib/R/library"))' -e 'workRSOCK <- tryCatch(parallel:::.workRSOCK, error=function(e) parallel:::.slaveRSOCK); workRSOCK()' MASTER=localhost PORT=11803 OUT=/dev/null TIMEOUT=2592000 XDR=FALSE SETUPTIMEOUT=120 SETUPSTRATEGY=parallel
[13:25:10.515] [local output] Starting PSOCK main server
[13:25:10.516] [local output] Workers launched
[13:25:10.517] [local output] Waiting for workers to connect back
[13:25:10.517]  - [local output] 0 workers out of 2 ready
[13:25:10.764]  - [local output] 0 workers out of 2 ready
[13:25:10.764]  - [local output] 1 workers out of 2 ready
[13:25:10.770]  - [local output] 1 workers out of 2 ready
[13:25:10.770]  - [local output] 2 workers out of 2 ready
[13:25:10.770] [local output] Launching of workers completed
[13:25:10.770] [local output] Collecting session information from workers
[13:25:10.771] [local output]  - Worker #1 of 2
[13:25:10.772] [local output]  - Worker #2 of 2
[13:25:10.772] [local output] makeClusterPSOCK() ... done
[13:25:10.782] Packages needed by the future expression (n = 0): <none>
[13:25:10.782] Packages needed by future strategies (n = 0): <none>
[13:25:10.783] {
[13:25:10.783]     {
[13:25:10.783]         {
[13:25:10.783]             ...future.startTime <- base::Sys.time()
[13:25:10.783]             {
[13:25:10.783]                 {
[13:25:10.783]                   {
[13:25:10.783]                     {
[13:25:10.783]                       base::local({
[13:25:10.783]                         has_future <- base::requireNamespace("future", 
[13:25:10.783]                           quietly = TRUE)
[13:25:10.783]                         if (has_future) {
[13:25:10.783]                           ns <- base::getNamespace("future")
[13:25:10.783]                           version <- ns[[".package"]][["version"]]
[13:25:10.783]                           if (is.null(version)) 
[13:25:10.783]                             version <- utils::packageVersion("future")
[13:25:10.783]                         }
[13:25:10.783]                         else {
[13:25:10.783]                           version <- NULL
[13:25:10.783]                         }
[13:25:10.783]                         if (!has_future || version < "1.8.0") {
[13:25:10.783]                           info <- base::c(r_version = base::gsub("R version ", 
[13:25:10.783]                             "", base::R.version$version.string), 
[13:25:10.783]                             platform = base::sprintf("%s (%s-bit)", 
[13:25:10.783]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:25:10.783]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:25:10.783]                               "release", "version")], collapse = " "), 
[13:25:10.783]                             hostname = base::Sys.info()[["nodename"]])
[13:25:10.783]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:25:10.783]                             info)
[13:25:10.783]                           info <- base::paste(info, collapse = "; ")
[13:25:10.783]                           if (!has_future) {
[13:25:10.783]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:25:10.783]                               info)
[13:25:10.783]                           }
[13:25:10.783]                           else {
[13:25:10.783]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:25:10.783]                               info, version)
[13:25:10.783]                           }
[13:25:10.783]                           base::stop(msg)
[13:25:10.783]                         }
[13:25:10.783]                       })
[13:25:10.783]                     }
[13:25:10.783]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[13:25:10.783]                     base::options(mc.cores = 1L)
[13:25:10.783]                   }
[13:25:10.783]                   options(future.plan = NULL)
[13:25:10.783]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:25:10.783]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:25:10.783]                 }
[13:25:10.783]                 ...future.workdir <- getwd()
[13:25:10.783]             }
[13:25:10.783]             ...future.oldOptions <- base::as.list(base::.Options)
[13:25:10.783]             ...future.oldEnvVars <- base::Sys.getenv()
[13:25:10.783]         }
[13:25:10.783]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:25:10.783]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:25:10.783]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:25:10.783]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:25:10.783]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:25:10.783]             future.stdout.windows.reencode = NULL, width = 80L)
[13:25:10.783]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:25:10.783]             base::names(...future.oldOptions))
[13:25:10.783]     }
[13:25:10.783]     if (FALSE) {
[13:25:10.783]     }
[13:25:10.783]     else {
[13:25:10.783]         if (TRUE) {
[13:25:10.783]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:25:10.783]                 open = "w")
[13:25:10.783]         }
[13:25:10.783]         else {
[13:25:10.783]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:25:10.783]                 windows = "NUL", "/dev/null"), open = "w")
[13:25:10.783]         }
[13:25:10.783]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:25:10.783]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:25:10.783]             base::sink(type = "output", split = FALSE)
[13:25:10.783]             base::close(...future.stdout)
[13:25:10.783]         }, add = TRUE)
[13:25:10.783]     }
[13:25:10.783]     ...future.frame <- base::sys.nframe()
[13:25:10.783]     ...future.conditions <- base::list()
[13:25:10.783]     ...future.rng <- base::globalenv()$.Random.seed
[13:25:10.783]     if (FALSE) {
[13:25:10.783]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:25:10.783]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:25:10.783]     }
[13:25:10.783]     ...future.result <- base::tryCatch({
[13:25:10.783]         base::withCallingHandlers({
[13:25:10.783]             ...future.value <- base::withVisible(base::local({
[13:25:10.783]                 ...future.makeSendCondition <- base::local({
[13:25:10.783]                   sendCondition <- NULL
[13:25:10.783]                   function(frame = 1L) {
[13:25:10.783]                     if (is.function(sendCondition)) 
[13:25:10.783]                       return(sendCondition)
[13:25:10.783]                     ns <- getNamespace("parallel")
[13:25:10.783]                     if (exists("sendData", mode = "function", 
[13:25:10.783]                       envir = ns)) {
[13:25:10.783]                       parallel_sendData <- get("sendData", mode = "function", 
[13:25:10.783]                         envir = ns)
[13:25:10.783]                       envir <- sys.frame(frame)
[13:25:10.783]                       master <- NULL
[13:25:10.783]                       while (!identical(envir, .GlobalEnv) && 
[13:25:10.783]                         !identical(envir, emptyenv())) {
[13:25:10.783]                         if (exists("master", mode = "list", envir = envir, 
[13:25:10.783]                           inherits = FALSE)) {
[13:25:10.783]                           master <- get("master", mode = "list", 
[13:25:10.783]                             envir = envir, inherits = FALSE)
[13:25:10.783]                           if (inherits(master, c("SOCKnode", 
[13:25:10.783]                             "SOCK0node"))) {
[13:25:10.783]                             sendCondition <<- function(cond) {
[13:25:10.783]                               data <- list(type = "VALUE", value = cond, 
[13:25:10.783]                                 success = TRUE)
[13:25:10.783]                               parallel_sendData(master, data)
[13:25:10.783]                             }
[13:25:10.783]                             return(sendCondition)
[13:25:10.783]                           }
[13:25:10.783]                         }
[13:25:10.783]                         frame <- frame + 1L
[13:25:10.783]                         envir <- sys.frame(frame)
[13:25:10.783]                       }
[13:25:10.783]                     }
[13:25:10.783]                     sendCondition <<- function(cond) NULL
[13:25:10.783]                   }
[13:25:10.783]                 })
[13:25:10.783]                 withCallingHandlers({
[13:25:10.783]                   NA
[13:25:10.783]                 }, immediateCondition = function(cond) {
[13:25:10.783]                   sendCondition <- ...future.makeSendCondition()
[13:25:10.783]                   sendCondition(cond)
[13:25:10.783]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:25:10.783]                   {
[13:25:10.783]                     inherits <- base::inherits
[13:25:10.783]                     invokeRestart <- base::invokeRestart
[13:25:10.783]                     is.null <- base::is.null
[13:25:10.783]                     muffled <- FALSE
[13:25:10.783]                     if (inherits(cond, "message")) {
[13:25:10.783]                       muffled <- grepl(pattern, "muffleMessage")
[13:25:10.783]                       if (muffled) 
[13:25:10.783]                         invokeRestart("muffleMessage")
[13:25:10.783]                     }
[13:25:10.783]                     else if (inherits(cond, "warning")) {
[13:25:10.783]                       muffled <- grepl(pattern, "muffleWarning")
[13:25:10.783]                       if (muffled) 
[13:25:10.783]                         invokeRestart("muffleWarning")
[13:25:10.783]                     }
[13:25:10.783]                     else if (inherits(cond, "condition")) {
[13:25:10.783]                       if (!is.null(pattern)) {
[13:25:10.783]                         computeRestarts <- base::computeRestarts
[13:25:10.783]                         grepl <- base::grepl
[13:25:10.783]                         restarts <- computeRestarts(cond)
[13:25:10.783]                         for (restart in restarts) {
[13:25:10.783]                           name <- restart$name
[13:25:10.783]                           if (is.null(name)) 
[13:25:10.783]                             next
[13:25:10.783]                           if (!grepl(pattern, name)) 
[13:25:10.783]                             next
[13:25:10.783]                           invokeRestart(restart)
[13:25:10.783]                           muffled <- TRUE
[13:25:10.783]                           break
[13:25:10.783]                         }
[13:25:10.783]                       }
[13:25:10.783]                     }
[13:25:10.783]                     invisible(muffled)
[13:25:10.783]                   }
[13:25:10.783]                   muffleCondition(cond)
[13:25:10.783]                 })
[13:25:10.783]             }))
[13:25:10.783]             future::FutureResult(value = ...future.value$value, 
[13:25:10.783]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:25:10.783]                   ...future.rng), globalenv = if (FALSE) 
[13:25:10.783]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:25:10.783]                     ...future.globalenv.names))
[13:25:10.783]                 else NULL, started = ...future.startTime, version = "1.8")
[13:25:10.783]         }, condition = base::local({
[13:25:10.783]             c <- base::c
[13:25:10.783]             inherits <- base::inherits
[13:25:10.783]             invokeRestart <- base::invokeRestart
[13:25:10.783]             length <- base::length
[13:25:10.783]             list <- base::list
[13:25:10.783]             seq.int <- base::seq.int
[13:25:10.783]             signalCondition <- base::signalCondition
[13:25:10.783]             sys.calls <- base::sys.calls
[13:25:10.783]             `[[` <- base::`[[`
[13:25:10.783]             `+` <- base::`+`
[13:25:10.783]             `<<-` <- base::`<<-`
[13:25:10.783]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:25:10.783]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:25:10.783]                   3L)]
[13:25:10.783]             }
[13:25:10.783]             function(cond) {
[13:25:10.783]                 is_error <- inherits(cond, "error")
[13:25:10.783]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:25:10.783]                   NULL)
[13:25:10.783]                 if (is_error) {
[13:25:10.783]                   sessionInformation <- function() {
[13:25:10.783]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:25:10.783]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:25:10.783]                       search = base::search(), system = base::Sys.info())
[13:25:10.783]                   }
[13:25:10.783]                   ...future.conditions[[length(...future.conditions) + 
[13:25:10.783]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:25:10.783]                     cond$call), session = sessionInformation(), 
[13:25:10.783]                     timestamp = base::Sys.time(), signaled = 0L)
[13:25:10.783]                   signalCondition(cond)
[13:25:10.783]                 }
[13:25:10.783]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:25:10.783]                 "immediateCondition"))) {
[13:25:10.783]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:25:10.783]                   ...future.conditions[[length(...future.conditions) + 
[13:25:10.783]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:25:10.783]                   if (TRUE && !signal) {
[13:25:10.783]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:25:10.783]                     {
[13:25:10.783]                       inherits <- base::inherits
[13:25:10.783]                       invokeRestart <- base::invokeRestart
[13:25:10.783]                       is.null <- base::is.null
[13:25:10.783]                       muffled <- FALSE
[13:25:10.783]                       if (inherits(cond, "message")) {
[13:25:10.783]                         muffled <- grepl(pattern, "muffleMessage")
[13:25:10.783]                         if (muffled) 
[13:25:10.783]                           invokeRestart("muffleMessage")
[13:25:10.783]                       }
[13:25:10.783]                       else if (inherits(cond, "warning")) {
[13:25:10.783]                         muffled <- grepl(pattern, "muffleWarning")
[13:25:10.783]                         if (muffled) 
[13:25:10.783]                           invokeRestart("muffleWarning")
[13:25:10.783]                       }
[13:25:10.783]                       else if (inherits(cond, "condition")) {
[13:25:10.783]                         if (!is.null(pattern)) {
[13:25:10.783]                           computeRestarts <- base::computeRestarts
[13:25:10.783]                           grepl <- base::grepl
[13:25:10.783]                           restarts <- computeRestarts(cond)
[13:25:10.783]                           for (restart in restarts) {
[13:25:10.783]                             name <- restart$name
[13:25:10.783]                             if (is.null(name)) 
[13:25:10.783]                               next
[13:25:10.783]                             if (!grepl(pattern, name)) 
[13:25:10.783]                               next
[13:25:10.783]                             invokeRestart(restart)
[13:25:10.783]                             muffled <- TRUE
[13:25:10.783]                             break
[13:25:10.783]                           }
[13:25:10.783]                         }
[13:25:10.783]                       }
[13:25:10.783]                       invisible(muffled)
[13:25:10.783]                     }
[13:25:10.783]                     muffleCondition(cond, pattern = "^muffle")
[13:25:10.783]                   }
[13:25:10.783]                 }
[13:25:10.783]                 else {
[13:25:10.783]                   if (TRUE) {
[13:25:10.783]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:25:10.783]                     {
[13:25:10.783]                       inherits <- base::inherits
[13:25:10.783]                       invokeRestart <- base::invokeRestart
[13:25:10.783]                       is.null <- base::is.null
[13:25:10.783]                       muffled <- FALSE
[13:25:10.783]                       if (inherits(cond, "message")) {
[13:25:10.783]                         muffled <- grepl(pattern, "muffleMessage")
[13:25:10.783]                         if (muffled) 
[13:25:10.783]                           invokeRestart("muffleMessage")
[13:25:10.783]                       }
[13:25:10.783]                       else if (inherits(cond, "warning")) {
[13:25:10.783]                         muffled <- grepl(pattern, "muffleWarning")
[13:25:10.783]                         if (muffled) 
[13:25:10.783]                           invokeRestart("muffleWarning")
[13:25:10.783]                       }
[13:25:10.783]                       else if (inherits(cond, "condition")) {
[13:25:10.783]                         if (!is.null(pattern)) {
[13:25:10.783]                           computeRestarts <- base::computeRestarts
[13:25:10.783]                           grepl <- base::grepl
[13:25:10.783]                           restarts <- computeRestarts(cond)
[13:25:10.783]                           for (restart in restarts) {
[13:25:10.783]                             name <- restart$name
[13:25:10.783]                             if (is.null(name)) 
[13:25:10.783]                               next
[13:25:10.783]                             if (!grepl(pattern, name)) 
[13:25:10.783]                               next
[13:25:10.783]                             invokeRestart(restart)
[13:25:10.783]                             muffled <- TRUE
[13:25:10.783]                             break
[13:25:10.783]                           }
[13:25:10.783]                         }
[13:25:10.783]                       }
[13:25:10.783]                       invisible(muffled)
[13:25:10.783]                     }
[13:25:10.783]                     muffleCondition(cond, pattern = "^muffle")
[13:25:10.783]                   }
[13:25:10.783]                 }
[13:25:10.783]             }
[13:25:10.783]         }))
[13:25:10.783]     }, error = function(ex) {
[13:25:10.783]         base::structure(base::list(value = NULL, visible = NULL, 
[13:25:10.783]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:25:10.783]                 ...future.rng), started = ...future.startTime, 
[13:25:10.783]             finished = Sys.time(), session_uuid = NA_character_, 
[13:25:10.783]             version = "1.8"), class = "FutureResult")
[13:25:10.783]     }, finally = {
[13:25:10.783]         if (!identical(...future.workdir, getwd())) 
[13:25:10.783]             setwd(...future.workdir)
[13:25:10.783]         {
[13:25:10.783]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:25:10.783]                 ...future.oldOptions$nwarnings <- NULL
[13:25:10.783]             }
[13:25:10.783]             base::options(...future.oldOptions)
[13:25:10.783]             if (.Platform$OS.type == "windows") {
[13:25:10.783]                 old_names <- names(...future.oldEnvVars)
[13:25:10.783]                 envs <- base::Sys.getenv()
[13:25:10.783]                 names <- names(envs)
[13:25:10.783]                 common <- intersect(names, old_names)
[13:25:10.783]                 added <- setdiff(names, old_names)
[13:25:10.783]                 removed <- setdiff(old_names, names)
[13:25:10.783]                 changed <- common[...future.oldEnvVars[common] != 
[13:25:10.783]                   envs[common]]
[13:25:10.783]                 NAMES <- toupper(changed)
[13:25:10.783]                 args <- list()
[13:25:10.783]                 for (kk in seq_along(NAMES)) {
[13:25:10.783]                   name <- changed[[kk]]
[13:25:10.783]                   NAME <- NAMES[[kk]]
[13:25:10.783]                   if (name != NAME && is.element(NAME, old_names)) 
[13:25:10.783]                     next
[13:25:10.783]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:25:10.783]                 }
[13:25:10.783]                 NAMES <- toupper(added)
[13:25:10.783]                 for (kk in seq_along(NAMES)) {
[13:25:10.783]                   name <- added[[kk]]
[13:25:10.783]                   NAME <- NAMES[[kk]]
[13:25:10.783]                   if (name != NAME && is.element(NAME, old_names)) 
[13:25:10.783]                     next
[13:25:10.783]                   args[[name]] <- ""
[13:25:10.783]                 }
[13:25:10.783]                 NAMES <- toupper(removed)
[13:25:10.783]                 for (kk in seq_along(NAMES)) {
[13:25:10.783]                   name <- removed[[kk]]
[13:25:10.783]                   NAME <- NAMES[[kk]]
[13:25:10.783]                   if (name != NAME && is.element(NAME, old_names)) 
[13:25:10.783]                     next
[13:25:10.783]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:25:10.783]                 }
[13:25:10.783]                 if (length(args) > 0) 
[13:25:10.783]                   base::do.call(base::Sys.setenv, args = args)
[13:25:10.783]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:25:10.783]             }
[13:25:10.783]             else {
[13:25:10.783]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:25:10.783]             }
[13:25:10.783]             {
[13:25:10.783]                 if (base::length(...future.futureOptionsAdded) > 
[13:25:10.783]                   0L) {
[13:25:10.783]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:25:10.783]                   base::names(opts) <- ...future.futureOptionsAdded
[13:25:10.783]                   base::options(opts)
[13:25:10.783]                 }
[13:25:10.783]                 {
[13:25:10.783]                   {
[13:25:10.783]                     base::options(mc.cores = ...future.mc.cores.old)
[13:25:10.783]                     NULL
[13:25:10.783]                   }
[13:25:10.783]                   options(future.plan = "multisession")
[13:25:10.783]                   if (is.na("")) 
[13:25:10.783]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:25:10.783]                   else Sys.setenv(R_FUTURE_PLAN = "")
[13:25:10.783]                   future::plan(list(function (..., workers = availableCores(), 
[13:25:10.783]                     lazy = FALSE, rscript_libs = .libPaths(), 
[13:25:10.783]                     envir = parent.frame()) 
[13:25:10.783]                   {
[13:25:10.783]                     if (is.function(workers)) 
[13:25:10.783]                       workers <- workers()
[13:25:10.783]                     workers <- structure(as.integer(workers), 
[13:25:10.783]                       class = class(workers))
[13:25:10.783]                     stop_if_not(length(workers) == 1, is.finite(workers), 
[13:25:10.783]                       workers >= 1)
[13:25:10.783]                     if (workers == 1L && !inherits(workers, "AsIs")) {
[13:25:10.783]                       return(sequential(..., lazy = TRUE, envir = envir))
[13:25:10.783]                     }
[13:25:10.783]                     future <- MultisessionFuture(..., workers = workers, 
[13:25:10.783]                       lazy = lazy, rscript_libs = rscript_libs, 
[13:25:10.783]                       envir = envir)
[13:25:10.783]                     if (!future$lazy) 
[13:25:10.783]                       future <- run(future)
[13:25:10.783]                     invisible(future)
[13:25:10.783]                   }), .cleanup = FALSE, .init = FALSE)
[13:25:10.783]                 }
[13:25:10.783]             }
[13:25:10.783]         }
[13:25:10.783]     })
[13:25:10.783]     if (TRUE) {
[13:25:10.783]         base::sink(type = "output", split = FALSE)
[13:25:10.783]         if (TRUE) {
[13:25:10.783]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:25:10.783]         }
[13:25:10.783]         else {
[13:25:10.783]             ...future.result["stdout"] <- base::list(NULL)
[13:25:10.783]         }
[13:25:10.783]         base::close(...future.stdout)
[13:25:10.783]         ...future.stdout <- NULL
[13:25:10.783]     }
[13:25:10.783]     ...future.result$conditions <- ...future.conditions
[13:25:10.783]     ...future.result$finished <- base::Sys.time()
[13:25:10.783]     ...future.result
[13:25:10.783] }
[13:25:10.838] MultisessionFuture started
[13:25:10.838] result() for ClusterFuture ...
[13:25:10.838] receiveMessageFromWorker() for ClusterFuture ...
[13:25:10.838] - Validating connection of MultisessionFuture
[13:25:10.883] - received message: FutureResult
[13:25:10.883] - Received FutureResult
[13:25:10.883] - Erased future from FutureRegistry
[13:25:10.883] result() for ClusterFuture ...
[13:25:10.883] - result already collected: FutureResult
[13:25:10.883] result() for ClusterFuture ... done
[13:25:10.883] receiveMessageFromWorker() for ClusterFuture ... done
[13:25:10.883] result() for ClusterFuture ... done
[13:25:10.884] result() for ClusterFuture ...
[13:25:10.884] - result already collected: FutureResult
[13:25:10.884] result() for ClusterFuture ... done
[13:25:10.884] plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ... DONE
[13:25:10.887] plan(): nbrOfWorkers() = 2
> message("- .onLoad() w/ future.plan = 'multisession' ... DONE")
- .onLoad() w/ future.plan = 'multisession' ... DONE
> 
> message("- .onLoad() w/ R_FUTURE_PLAN = 'multisession' & -p 1 ...")
- .onLoad() w/ R_FUTURE_PLAN = 'multisession' & -p 1 ...
> Sys.setenv(R_FUTURE_PLAN = "multisession")
> options(future.plan = NULL, future.cmdargs = c("-p", 1))
> .onLoad(pkgname, pkgname)
[13:25:10.888] Future-specific environment variables:
- R_FUTURE_PLAN=‘multisession’
- R_FUTURE_WAIT_INTERVAL=‘0.01’
[13:25:10.888] Environment variable ‘R_FUTURE_DEMO_MANDELBROT_REGION’ not set
[13:25:10.888] Environment variable ‘R_FUTURE_DEMO_MANDELBROT_NROW’ not set
[13:25:10.889] Environment variable ‘R_FUTURE_DEPRECATED_IGNORE’ not set
[13:25:10.889] Environment variable ‘R_FUTURE_DEPRECATED_DEFUNCT’ not set
[13:25:10.889] Environment variable ‘R_FUTURE_FORK_MULTITHREADING_ENABLE’ not set
[13:25:10.889] Environment variable ‘R_FUTURE_GLOBALS_MAXSIZE’ not set
[13:25:10.889] Environment variable ‘R_FUTURE_GLOBALS_ONMISSING’ not set
[13:25:10.889] Environment variable ‘R_FUTURE_GLOBALS_ONREFERENCE’ not set
[13:25:10.889] Environment variable ‘R_FUTURE_GLOBALS_METHOD’ not set
[13:25:10.889] Environment variable ‘R_FUTURE_GLOBALS_RESOLVE’ not set
[13:25:10.889] Environment variable ‘R_FUTURE_LAZY_ASSERTOWNER’ not set
[13:25:10.889] R_FUTURE_PLAN=‘multisession’
[13:25:10.890] => options(“future.plan” = ‘multisession’) [n=1, mode=character]
[13:25:10.890] Environment variable ‘R_FUTURE_PLAN_DISALLOW’ not set
[13:25:10.890] Environment variable ‘R_FUTURE_PSOCK_RELAY_IMMEDIATE’ not set
[13:25:10.890] Environment variable ‘R_FUTURE_RELAY_IMMEDIATE’ not set
[13:25:10.890] Environment variable ‘R_FUTURE_RESOLVE_RECURSIVE’ not set
[13:25:10.890] Environment variable ‘R_FUTURE_ALIVE_TIMEOUT’ not set
[13:25:10.890] Environment variable ‘R_FUTURE_RESOLVED_TIMEOUT’ not set
[13:25:10.890] Environment variable ‘R_FUTURE_CLUSTER_RESOLVED_TIMEOUT’ not set
[13:25:10.891] Environment variable ‘R_FUTURE_MULTICORE_RESOLVED_TIMEOUT’ not set
[13:25:10.891] Environment variable ‘R_FUTURE_ONFUTURECONDITION_KEEPFUTURE’ not set
[13:25:10.891] Environment variable ‘R_FUTURE_RNG_ONMISUSE’ not set
[13:25:10.891] Environment variable ‘R_FUTURE_GLOBALENV_ONMISUSE’ not set
[13:25:10.891] Environment variable ‘R_FUTURE_WAIT_TIMEOUT’ not set
[13:25:10.891] Environment variable ‘R_FUTURE_WAIT_ALPHA’ not set
[13:25:10.891] Environment variable ‘R_FUTURE_ASSIGN_GLOBALS_EXCLUDE’ not set
[13:25:10.891] Environment variable ‘R_FUTURE_OUTPUT_WINDOWS_REENCODE’ not set
[13:25:10.891] Environment variable ‘R_FUTURE_GLOBALS_GLOBALSOF_LOCALS’ not set
[13:25:10.891] Environment variable ‘R_FUTURE_STATE_ONINVALID’ not set
[13:25:10.892] Environment variable ‘R_FUTURE_JOURNAL’ not set
[13:25:10.892] Environment variable ‘R_FUTURE_GLOBALS_KEEPWHERE’ not set
[13:25:10.892] Option 'future.plan' = ‘multisession’
[13:25:10.892] R command-line argument: -p 1
[13:25:10.892]  => 'future.plan' already set.
[13:25:10.892] R process uuid: 23a78189-cf97-f775-96c6-d0d164da4543
[13:25:10.892] Setting plan('default')
[13:25:10.893] plan(): Setting new future strategy stack:
[13:25:10.893] List of future strategies:
[13:25:10.893] 1. multisession:
[13:25:10.893]    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[13:25:10.893]    - tweaked: FALSE
[13:25:10.893]    - call: plan("default", .init = FALSE)
[13:25:10.898] plan(): nbrOfWorkers() = 1
> strategy <- plan("next")
> print(strategy)
multisession:
- args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
- tweaked: FALSE
- call: plan("default", .init = FALSE)
> stopifnot(inherits(strategy, "multisession"))
> plan("default")
[13:25:10.898] plan(): Setting new future strategy stack:
[13:25:10.898] List of future strategies:
[13:25:10.898] 1. multisession:
[13:25:10.898]    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[13:25:10.898]    - tweaked: FALSE
[13:25:10.898]    - call: plan("default")
[13:25:10.899] plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ...
[13:25:10.899] multisession:
[13:25:10.899] - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[13:25:10.899] - tweaked: FALSE
[13:25:10.899] - call: plan("default")
[13:25:10.904] getGlobalsAndPackages() ...
[13:25:10.904] Not searching for globals
[13:25:10.904] - globals: [0] <none>
[13:25:10.904] getGlobalsAndPackages() ... DONE
[13:25:10.905] Packages needed by the future expression (n = 0): <none>
[13:25:10.906] Packages needed by future strategies (n = 0): <none>
[13:25:10.906] {
[13:25:10.906]     {
[13:25:10.906]         {
[13:25:10.906]             ...future.startTime <- base::Sys.time()
[13:25:10.906]             {
[13:25:10.906]                 {
[13:25:10.906]                   {
[13:25:10.906]                     base::local({
[13:25:10.906]                       has_future <- base::requireNamespace("future", 
[13:25:10.906]                         quietly = TRUE)
[13:25:10.906]                       if (has_future) {
[13:25:10.906]                         ns <- base::getNamespace("future")
[13:25:10.906]                         version <- ns[[".package"]][["version"]]
[13:25:10.906]                         if (is.null(version)) 
[13:25:10.906]                           version <- utils::packageVersion("future")
[13:25:10.906]                       }
[13:25:10.906]                       else {
[13:25:10.906]                         version <- NULL
[13:25:10.906]                       }
[13:25:10.906]                       if (!has_future || version < "1.8.0") {
[13:25:10.906]                         info <- base::c(r_version = base::gsub("R version ", 
[13:25:10.906]                           "", base::R.version$version.string), 
[13:25:10.906]                           platform = base::sprintf("%s (%s-bit)", 
[13:25:10.906]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:25:10.906]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[13:25:10.906]                             "release", "version")], collapse = " "), 
[13:25:10.906]                           hostname = base::Sys.info()[["nodename"]])
[13:25:10.906]                         info <- base::sprintf("%s: %s", base::names(info), 
[13:25:10.906]                           info)
[13:25:10.906]                         info <- base::paste(info, collapse = "; ")
[13:25:10.906]                         if (!has_future) {
[13:25:10.906]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:25:10.906]                             info)
[13:25:10.906]                         }
[13:25:10.906]                         else {
[13:25:10.906]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:25:10.906]                             info, version)
[13:25:10.906]                         }
[13:25:10.906]                         base::stop(msg)
[13:25:10.906]                       }
[13:25:10.906]                     })
[13:25:10.906]                   }
[13:25:10.906]                   options(future.plan = NULL)
[13:25:10.906]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:25:10.906]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:25:10.906]                 }
[13:25:10.906]                 ...future.workdir <- getwd()
[13:25:10.906]             }
[13:25:10.906]             ...future.oldOptions <- base::as.list(base::.Options)
[13:25:10.906]             ...future.oldEnvVars <- base::Sys.getenv()
[13:25:10.906]         }
[13:25:10.906]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:25:10.906]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:25:10.906]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:25:10.906]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:25:10.906]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:25:10.906]             future.stdout.windows.reencode = NULL, width = 80L)
[13:25:10.906]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:25:10.906]             base::names(...future.oldOptions))
[13:25:10.906]     }
[13:25:10.906]     if (FALSE) {
[13:25:10.906]     }
[13:25:10.906]     else {
[13:25:10.906]         if (TRUE) {
[13:25:10.906]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:25:10.906]                 open = "w")
[13:25:10.906]         }
[13:25:10.906]         else {
[13:25:10.906]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:25:10.906]                 windows = "NUL", "/dev/null"), open = "w")
[13:25:10.906]         }
[13:25:10.906]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:25:10.906]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:25:10.906]             base::sink(type = "output", split = FALSE)
[13:25:10.906]             base::close(...future.stdout)
[13:25:10.906]         }, add = TRUE)
[13:25:10.906]     }
[13:25:10.906]     ...future.frame <- base::sys.nframe()
[13:25:10.906]     ...future.conditions <- base::list()
[13:25:10.906]     ...future.rng <- base::globalenv()$.Random.seed
[13:25:10.906]     if (FALSE) {
[13:25:10.906]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:25:10.906]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:25:10.906]     }
[13:25:10.906]     ...future.result <- base::tryCatch({
[13:25:10.906]         base::withCallingHandlers({
[13:25:10.906]             ...future.value <- base::withVisible(base::local(NA))
[13:25:10.906]             future::FutureResult(value = ...future.value$value, 
[13:25:10.906]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:25:10.906]                   ...future.rng), globalenv = if (FALSE) 
[13:25:10.906]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:25:10.906]                     ...future.globalenv.names))
[13:25:10.906]                 else NULL, started = ...future.startTime, version = "1.8")
[13:25:10.906]         }, condition = base::local({
[13:25:10.906]             c <- base::c
[13:25:10.906]             inherits <- base::inherits
[13:25:10.906]             invokeRestart <- base::invokeRestart
[13:25:10.906]             length <- base::length
[13:25:10.906]             list <- base::list
[13:25:10.906]             seq.int <- base::seq.int
[13:25:10.906]             signalCondition <- base::signalCondition
[13:25:10.906]             sys.calls <- base::sys.calls
[13:25:10.906]             `[[` <- base::`[[`
[13:25:10.906]             `+` <- base::`+`
[13:25:10.906]             `<<-` <- base::`<<-`
[13:25:10.906]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:25:10.906]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:25:10.906]                   3L)]
[13:25:10.906]             }
[13:25:10.906]             function(cond) {
[13:25:10.906]                 is_error <- inherits(cond, "error")
[13:25:10.906]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:25:10.906]                   NULL)
[13:25:10.906]                 if (is_error) {
[13:25:10.906]                   sessionInformation <- function() {
[13:25:10.906]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:25:10.906]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:25:10.906]                       search = base::search(), system = base::Sys.info())
[13:25:10.906]                   }
[13:25:10.906]                   ...future.conditions[[length(...future.conditions) + 
[13:25:10.906]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:25:10.906]                     cond$call), session = sessionInformation(), 
[13:25:10.906]                     timestamp = base::Sys.time(), signaled = 0L)
[13:25:10.906]                   signalCondition(cond)
[13:25:10.906]                 }
[13:25:10.906]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:25:10.906]                 "immediateCondition"))) {
[13:25:10.906]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:25:10.906]                   ...future.conditions[[length(...future.conditions) + 
[13:25:10.906]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:25:10.906]                   if (TRUE && !signal) {
[13:25:10.906]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:25:10.906]                     {
[13:25:10.906]                       inherits <- base::inherits
[13:25:10.906]                       invokeRestart <- base::invokeRestart
[13:25:10.906]                       is.null <- base::is.null
[13:25:10.906]                       muffled <- FALSE
[13:25:10.906]                       if (inherits(cond, "message")) {
[13:25:10.906]                         muffled <- grepl(pattern, "muffleMessage")
[13:25:10.906]                         if (muffled) 
[13:25:10.906]                           invokeRestart("muffleMessage")
[13:25:10.906]                       }
[13:25:10.906]                       else if (inherits(cond, "warning")) {
[13:25:10.906]                         muffled <- grepl(pattern, "muffleWarning")
[13:25:10.906]                         if (muffled) 
[13:25:10.906]                           invokeRestart("muffleWarning")
[13:25:10.906]                       }
[13:25:10.906]                       else if (inherits(cond, "condition")) {
[13:25:10.906]                         if (!is.null(pattern)) {
[13:25:10.906]                           computeRestarts <- base::computeRestarts
[13:25:10.906]                           grepl <- base::grepl
[13:25:10.906]                           restarts <- computeRestarts(cond)
[13:25:10.906]                           for (restart in restarts) {
[13:25:10.906]                             name <- restart$name
[13:25:10.906]                             if (is.null(name)) 
[13:25:10.906]                               next
[13:25:10.906]                             if (!grepl(pattern, name)) 
[13:25:10.906]                               next
[13:25:10.906]                             invokeRestart(restart)
[13:25:10.906]                             muffled <- TRUE
[13:25:10.906]                             break
[13:25:10.906]                           }
[13:25:10.906]                         }
[13:25:10.906]                       }
[13:25:10.906]                       invisible(muffled)
[13:25:10.906]                     }
[13:25:10.906]                     muffleCondition(cond, pattern = "^muffle")
[13:25:10.906]                   }
[13:25:10.906]                 }
[13:25:10.906]                 else {
[13:25:10.906]                   if (TRUE) {
[13:25:10.906]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:25:10.906]                     {
[13:25:10.906]                       inherits <- base::inherits
[13:25:10.906]                       invokeRestart <- base::invokeRestart
[13:25:10.906]                       is.null <- base::is.null
[13:25:10.906]                       muffled <- FALSE
[13:25:10.906]                       if (inherits(cond, "message")) {
[13:25:10.906]                         muffled <- grepl(pattern, "muffleMessage")
[13:25:10.906]                         if (muffled) 
[13:25:10.906]                           invokeRestart("muffleMessage")
[13:25:10.906]                       }
[13:25:10.906]                       else if (inherits(cond, "warning")) {
[13:25:10.906]                         muffled <- grepl(pattern, "muffleWarning")
[13:25:10.906]                         if (muffled) 
[13:25:10.906]                           invokeRestart("muffleWarning")
[13:25:10.906]                       }
[13:25:10.906]                       else if (inherits(cond, "condition")) {
[13:25:10.906]                         if (!is.null(pattern)) {
[13:25:10.906]                           computeRestarts <- base::computeRestarts
[13:25:10.906]                           grepl <- base::grepl
[13:25:10.906]                           restarts <- computeRestarts(cond)
[13:25:10.906]                           for (restart in restarts) {
[13:25:10.906]                             name <- restart$name
[13:25:10.906]                             if (is.null(name)) 
[13:25:10.906]                               next
[13:25:10.906]                             if (!grepl(pattern, name)) 
[13:25:10.906]                               next
[13:25:10.906]                             invokeRestart(restart)
[13:25:10.906]                             muffled <- TRUE
[13:25:10.906]                             break
[13:25:10.906]                           }
[13:25:10.906]                         }
[13:25:10.906]                       }
[13:25:10.906]                       invisible(muffled)
[13:25:10.906]                     }
[13:25:10.906]                     muffleCondition(cond, pattern = "^muffle")
[13:25:10.906]                   }
[13:25:10.906]                 }
[13:25:10.906]             }
[13:25:10.906]         }))
[13:25:10.906]     }, error = function(ex) {
[13:25:10.906]         base::structure(base::list(value = NULL, visible = NULL, 
[13:25:10.906]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:25:10.906]                 ...future.rng), started = ...future.startTime, 
[13:25:10.906]             finished = Sys.time(), session_uuid = NA_character_, 
[13:25:10.906]             version = "1.8"), class = "FutureResult")
[13:25:10.906]     }, finally = {
[13:25:10.906]         if (!identical(...future.workdir, getwd())) 
[13:25:10.906]             setwd(...future.workdir)
[13:25:10.906]         {
[13:25:10.906]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:25:10.906]                 ...future.oldOptions$nwarnings <- NULL
[13:25:10.906]             }
[13:25:10.906]             base::options(...future.oldOptions)
[13:25:10.906]             if (.Platform$OS.type == "windows") {
[13:25:10.906]                 old_names <- names(...future.oldEnvVars)
[13:25:10.906]                 envs <- base::Sys.getenv()
[13:25:10.906]                 names <- names(envs)
[13:25:10.906]                 common <- intersect(names, old_names)
[13:25:10.906]                 added <- setdiff(names, old_names)
[13:25:10.906]                 removed <- setdiff(old_names, names)
[13:25:10.906]                 changed <- common[...future.oldEnvVars[common] != 
[13:25:10.906]                   envs[common]]
[13:25:10.906]                 NAMES <- toupper(changed)
[13:25:10.906]                 args <- list()
[13:25:10.906]                 for (kk in seq_along(NAMES)) {
[13:25:10.906]                   name <- changed[[kk]]
[13:25:10.906]                   NAME <- NAMES[[kk]]
[13:25:10.906]                   if (name != NAME && is.element(NAME, old_names)) 
[13:25:10.906]                     next
[13:25:10.906]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:25:10.906]                 }
[13:25:10.906]                 NAMES <- toupper(added)
[13:25:10.906]                 for (kk in seq_along(NAMES)) {
[13:25:10.906]                   name <- added[[kk]]
[13:25:10.906]                   NAME <- NAMES[[kk]]
[13:25:10.906]                   if (name != NAME && is.element(NAME, old_names)) 
[13:25:10.906]                     next
[13:25:10.906]                   args[[name]] <- ""
[13:25:10.906]                 }
[13:25:10.906]                 NAMES <- toupper(removed)
[13:25:10.906]                 for (kk in seq_along(NAMES)) {
[13:25:10.906]                   name <- removed[[kk]]
[13:25:10.906]                   NAME <- NAMES[[kk]]
[13:25:10.906]                   if (name != NAME && is.element(NAME, old_names)) 
[13:25:10.906]                     next
[13:25:10.906]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:25:10.906]                 }
[13:25:10.906]                 if (length(args) > 0) 
[13:25:10.906]                   base::do.call(base::Sys.setenv, args = args)
[13:25:10.906]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:25:10.906]             }
[13:25:10.906]             else {
[13:25:10.906]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:25:10.906]             }
[13:25:10.906]             {
[13:25:10.906]                 if (base::length(...future.futureOptionsAdded) > 
[13:25:10.906]                   0L) {
[13:25:10.906]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:25:10.906]                   base::names(opts) <- ...future.futureOptionsAdded
[13:25:10.906]                   base::options(opts)
[13:25:10.906]                 }
[13:25:10.906]                 {
[13:25:10.906]                   {
[13:25:10.906]                     NULL
[13:25:10.906]                     RNGkind("Mersenne-Twister")
[13:25:10.906]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[13:25:10.906]                       inherits = FALSE)
[13:25:10.906]                   }
[13:25:10.906]                   options(future.plan = "multisession")
[13:25:10.906]                   if (is.na("multisession")) 
[13:25:10.906]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:25:10.906]                   else Sys.setenv(R_FUTURE_PLAN = "multisession")
[13:25:10.906]                   future::plan(list(function (..., workers = availableCores(), 
[13:25:10.906]                     lazy = FALSE, rscript_libs = .libPaths(), 
[13:25:10.906]                     envir = parent.frame()) 
[13:25:10.906]                   {
[13:25:10.906]                     if (is.function(workers)) 
[13:25:10.906]                       workers <- workers()
[13:25:10.906]                     workers <- structure(as.integer(workers), 
[13:25:10.906]                       class = class(workers))
[13:25:10.906]                     stop_if_not(length(workers) == 1, is.finite(workers), 
[13:25:10.906]                       workers >= 1)
[13:25:10.906]                     if (workers == 1L && !inherits(workers, "AsIs")) {
[13:25:10.906]                       return(sequential(..., lazy = TRUE, envir = envir))
[13:25:10.906]                     }
[13:25:10.906]                     future <- MultisessionFuture(..., workers = workers, 
[13:25:10.906]                       lazy = lazy, rscript_libs = rscript_libs, 
[13:25:10.906]                       envir = envir)
[13:25:10.906]                     if (!future$lazy) 
[13:25:10.906]                       future <- run(future)
[13:25:10.906]                     invisible(future)
[13:25:10.906]                   }), .cleanup = FALSE, .init = FALSE)
[13:25:10.906]                 }
[13:25:10.906]             }
[13:25:10.906]         }
[13:25:10.906]     })
[13:25:10.906]     if (TRUE) {
[13:25:10.906]         base::sink(type = "output", split = FALSE)
[13:25:10.906]         if (TRUE) {
[13:25:10.906]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:25:10.906]         }
[13:25:10.906]         else {
[13:25:10.906]             ...future.result["stdout"] <- base::list(NULL)
[13:25:10.906]         }
[13:25:10.906]         base::close(...future.stdout)
[13:25:10.906]         ...future.stdout <- NULL
[13:25:10.906]     }
[13:25:10.906]     ...future.result$conditions <- ...future.conditions
[13:25:10.906]     ...future.result$finished <- base::Sys.time()
[13:25:10.906]     ...future.result
[13:25:10.906] }
[13:25:10.909] plan(): Setting new future strategy stack:
[13:25:10.910] List of future strategies:
[13:25:10.910] 1. sequential:
[13:25:10.910]    - args: function (..., envir = parent.frame())
[13:25:10.910]    - tweaked: FALSE
[13:25:10.910]    - call: NULL
[13:25:10.910] plan(): nbrOfWorkers() = 1
[13:25:10.911] plan(): Setting new future strategy stack:
[13:25:10.912] List of future strategies:
[13:25:10.912] 1. multisession:
[13:25:10.912]    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[13:25:10.912]    - tweaked: FALSE
[13:25:10.912]    - call: plan("default")
[13:25:10.915] plan(): nbrOfWorkers() = 1
[13:25:10.915] SequentialFuture started (and completed)
[13:25:10.916] plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ... DONE
[13:25:10.919] plan(): nbrOfWorkers() = 1
> Sys.setenv(R_FUTURE_PLAN = "")
> message("- .onLoad() w/ R_FUTURE_PLAN = 'multisession' & -p 1 ... DONE")
- .onLoad() w/ R_FUTURE_PLAN = 'multisession' & -p 1 ... DONE
> 
> message("- .onLoad() w/ future.plan = 'multisession' & -p 1 ...")
- .onLoad() w/ future.plan = 'multisession' & -p 1 ...
> options(future.plan = 'multisession', future.cmdargs = c("-p", "1"))
> .onLoad(pkgname, pkgname)
[13:25:10.920] Future-specific environment variables:
- R_FUTURE_PLAN=‘’
- R_FUTURE_WAIT_INTERVAL=‘0.01’
[13:25:10.920] Environment variable ‘R_FUTURE_DEMO_MANDELBROT_REGION’ not set
[13:25:10.920] Environment variable ‘R_FUTURE_DEMO_MANDELBROT_NROW’ not set
[13:25:10.920] Environment variable ‘R_FUTURE_DEPRECATED_IGNORE’ not set
[13:25:10.920] Environment variable ‘R_FUTURE_DEPRECATED_DEFUNCT’ not set
[13:25:10.920] Environment variable ‘R_FUTURE_FORK_MULTITHREADING_ENABLE’ not set
[13:25:10.920] Environment variable ‘R_FUTURE_GLOBALS_MAXSIZE’ not set
[13:25:10.920] Environment variable ‘R_FUTURE_GLOBALS_ONMISSING’ not set
[13:25:10.921] Environment variable ‘R_FUTURE_GLOBALS_ONREFERENCE’ not set
[13:25:10.921] Environment variable ‘R_FUTURE_GLOBALS_METHOD’ not set
[13:25:10.921] Environment variable ‘R_FUTURE_GLOBALS_RESOLVE’ not set
[13:25:10.921] Environment variable ‘R_FUTURE_LAZY_ASSERTOWNER’ not set
[13:25:10.921] Environment variable ‘R_FUTURE_PLAN_DISALLOW’ not set
[13:25:10.921] Environment variable ‘R_FUTURE_PSOCK_RELAY_IMMEDIATE’ not set
[13:25:10.921] Environment variable ‘R_FUTURE_RELAY_IMMEDIATE’ not set
[13:25:10.921] Environment variable ‘R_FUTURE_RESOLVE_RECURSIVE’ not set
[13:25:10.921] Environment variable ‘R_FUTURE_ALIVE_TIMEOUT’ not set
[13:25:10.922] Environment variable ‘R_FUTURE_RESOLVED_TIMEOUT’ not set
[13:25:10.922] Environment variable ‘R_FUTURE_CLUSTER_RESOLVED_TIMEOUT’ not set
[13:25:10.922] Environment variable ‘R_FUTURE_MULTICORE_RESOLVED_TIMEOUT’ not set
[13:25:10.922] Environment variable ‘R_FUTURE_ONFUTURECONDITION_KEEPFUTURE’ not set
[13:25:10.922] Environment variable ‘R_FUTURE_RNG_ONMISUSE’ not set
[13:25:10.922] Environment variable ‘R_FUTURE_GLOBALENV_ONMISUSE’ not set
[13:25:10.922] Environment variable ‘R_FUTURE_WAIT_TIMEOUT’ not set
[13:25:10.922] Environment variable ‘R_FUTURE_WAIT_ALPHA’ not set
[13:25:10.922] Environment variable ‘R_FUTURE_ASSIGN_GLOBALS_EXCLUDE’ not set
[13:25:10.923] Environment variable ‘R_FUTURE_OUTPUT_WINDOWS_REENCODE’ not set
[13:25:10.923] Environment variable ‘R_FUTURE_GLOBALS_GLOBALSOF_LOCALS’ not set
[13:25:10.923] Environment variable ‘R_FUTURE_STATE_ONINVALID’ not set
[13:25:10.923] Environment variable ‘R_FUTURE_JOURNAL’ not set
[13:25:10.923] Environment variable ‘R_FUTURE_GLOBALS_KEEPWHERE’ not set
[13:25:10.923] Option 'future.plan' = ‘multisession’
[13:25:10.923] R command-line argument: -p 1
[13:25:10.923]  => 'future.plan' already set.
[13:25:10.924] R process uuid: 23a78189-cf97-f775-96c6-d0d164da4543
[13:25:10.924] Setting plan('default')
[13:25:10.924] plan(): Setting new future strategy stack:
[13:25:10.924] List of future strategies:
[13:25:10.924] 1. multisession:
[13:25:10.924]    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[13:25:10.924]    - tweaked: FALSE
[13:25:10.924]    - call: plan("default", .init = FALSE)
[13:25:10.927] plan(): nbrOfWorkers() = 1
> strategy <- plan("next")
> print(strategy)
multisession:
- args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
- tweaked: FALSE
- call: plan("default", .init = FALSE)
> stopifnot(inherits(strategy, "multisession"))
> plan("default")
[13:25:10.928] plan(): Setting new future strategy stack:
[13:25:10.928] List of future strategies:
[13:25:10.928] 1. multisession:
[13:25:10.928]    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[13:25:10.928]    - tweaked: FALSE
[13:25:10.928]    - call: plan("default")
[13:25:10.928] plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ...
[13:25:10.928] multisession:
[13:25:10.928] - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[13:25:10.928] - tweaked: FALSE
[13:25:10.928] - call: plan("default")
[13:25:10.931] getGlobalsAndPackages() ...
[13:25:10.931] Not searching for globals
[13:25:10.932] - globals: [0] <none>
[13:25:10.932] getGlobalsAndPackages() ... DONE
[13:25:10.932] Packages needed by the future expression (n = 0): <none>
[13:25:10.932] Packages needed by future strategies (n = 0): <none>
[13:25:10.933] {
[13:25:10.933]     {
[13:25:10.933]         {
[13:25:10.933]             ...future.startTime <- base::Sys.time()
[13:25:10.933]             {
[13:25:10.933]                 {
[13:25:10.933]                   {
[13:25:10.933]                     base::local({
[13:25:10.933]                       has_future <- base::requireNamespace("future", 
[13:25:10.933]                         quietly = TRUE)
[13:25:10.933]                       if (has_future) {
[13:25:10.933]                         ns <- base::getNamespace("future")
[13:25:10.933]                         version <- ns[[".package"]][["version"]]
[13:25:10.933]                         if (is.null(version)) 
[13:25:10.933]                           version <- utils::packageVersion("future")
[13:25:10.933]                       }
[13:25:10.933]                       else {
[13:25:10.933]                         version <- NULL
[13:25:10.933]                       }
[13:25:10.933]                       if (!has_future || version < "1.8.0") {
[13:25:10.933]                         info <- base::c(r_version = base::gsub("R version ", 
[13:25:10.933]                           "", base::R.version$version.string), 
[13:25:10.933]                           platform = base::sprintf("%s (%s-bit)", 
[13:25:10.933]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:25:10.933]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[13:25:10.933]                             "release", "version")], collapse = " "), 
[13:25:10.933]                           hostname = base::Sys.info()[["nodename"]])
[13:25:10.933]                         info <- base::sprintf("%s: %s", base::names(info), 
[13:25:10.933]                           info)
[13:25:10.933]                         info <- base::paste(info, collapse = "; ")
[13:25:10.933]                         if (!has_future) {
[13:25:10.933]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:25:10.933]                             info)
[13:25:10.933]                         }
[13:25:10.933]                         else {
[13:25:10.933]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:25:10.933]                             info, version)
[13:25:10.933]                         }
[13:25:10.933]                         base::stop(msg)
[13:25:10.933]                       }
[13:25:10.933]                     })
[13:25:10.933]                   }
[13:25:10.933]                   options(future.plan = NULL)
[13:25:10.933]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:25:10.933]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:25:10.933]                 }
[13:25:10.933]                 ...future.workdir <- getwd()
[13:25:10.933]             }
[13:25:10.933]             ...future.oldOptions <- base::as.list(base::.Options)
[13:25:10.933]             ...future.oldEnvVars <- base::Sys.getenv()
[13:25:10.933]         }
[13:25:10.933]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:25:10.933]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:25:10.933]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:25:10.933]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:25:10.933]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:25:10.933]             future.stdout.windows.reencode = NULL, width = 80L)
[13:25:10.933]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:25:10.933]             base::names(...future.oldOptions))
[13:25:10.933]     }
[13:25:10.933]     if (FALSE) {
[13:25:10.933]     }
[13:25:10.933]     else {
[13:25:10.933]         if (TRUE) {
[13:25:10.933]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:25:10.933]                 open = "w")
[13:25:10.933]         }
[13:25:10.933]         else {
[13:25:10.933]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:25:10.933]                 windows = "NUL", "/dev/null"), open = "w")
[13:25:10.933]         }
[13:25:10.933]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:25:10.933]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:25:10.933]             base::sink(type = "output", split = FALSE)
[13:25:10.933]             base::close(...future.stdout)
[13:25:10.933]         }, add = TRUE)
[13:25:10.933]     }
[13:25:10.933]     ...future.frame <- base::sys.nframe()
[13:25:10.933]     ...future.conditions <- base::list()
[13:25:10.933]     ...future.rng <- base::globalenv()$.Random.seed
[13:25:10.933]     if (FALSE) {
[13:25:10.933]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:25:10.933]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:25:10.933]     }
[13:25:10.933]     ...future.result <- base::tryCatch({
[13:25:10.933]         base::withCallingHandlers({
[13:25:10.933]             ...future.value <- base::withVisible(base::local(NA))
[13:25:10.933]             future::FutureResult(value = ...future.value$value, 
[13:25:10.933]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:25:10.933]                   ...future.rng), globalenv = if (FALSE) 
[13:25:10.933]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:25:10.933]                     ...future.globalenv.names))
[13:25:10.933]                 else NULL, started = ...future.startTime, version = "1.8")
[13:25:10.933]         }, condition = base::local({
[13:25:10.933]             c <- base::c
[13:25:10.933]             inherits <- base::inherits
[13:25:10.933]             invokeRestart <- base::invokeRestart
[13:25:10.933]             length <- base::length
[13:25:10.933]             list <- base::list
[13:25:10.933]             seq.int <- base::seq.int
[13:25:10.933]             signalCondition <- base::signalCondition
[13:25:10.933]             sys.calls <- base::sys.calls
[13:25:10.933]             `[[` <- base::`[[`
[13:25:10.933]             `+` <- base::`+`
[13:25:10.933]             `<<-` <- base::`<<-`
[13:25:10.933]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:25:10.933]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:25:10.933]                   3L)]
[13:25:10.933]             }
[13:25:10.933]             function(cond) {
[13:25:10.933]                 is_error <- inherits(cond, "error")
[13:25:10.933]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:25:10.933]                   NULL)
[13:25:10.933]                 if (is_error) {
[13:25:10.933]                   sessionInformation <- function() {
[13:25:10.933]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:25:10.933]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:25:10.933]                       search = base::search(), system = base::Sys.info())
[13:25:10.933]                   }
[13:25:10.933]                   ...future.conditions[[length(...future.conditions) + 
[13:25:10.933]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:25:10.933]                     cond$call), session = sessionInformation(), 
[13:25:10.933]                     timestamp = base::Sys.time(), signaled = 0L)
[13:25:10.933]                   signalCondition(cond)
[13:25:10.933]                 }
[13:25:10.933]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:25:10.933]                 "immediateCondition"))) {
[13:25:10.933]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:25:10.933]                   ...future.conditions[[length(...future.conditions) + 
[13:25:10.933]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:25:10.933]                   if (TRUE && !signal) {
[13:25:10.933]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:25:10.933]                     {
[13:25:10.933]                       inherits <- base::inherits
[13:25:10.933]                       invokeRestart <- base::invokeRestart
[13:25:10.933]                       is.null <- base::is.null
[13:25:10.933]                       muffled <- FALSE
[13:25:10.933]                       if (inherits(cond, "message")) {
[13:25:10.933]                         muffled <- grepl(pattern, "muffleMessage")
[13:25:10.933]                         if (muffled) 
[13:25:10.933]                           invokeRestart("muffleMessage")
[13:25:10.933]                       }
[13:25:10.933]                       else if (inherits(cond, "warning")) {
[13:25:10.933]                         muffled <- grepl(pattern, "muffleWarning")
[13:25:10.933]                         if (muffled) 
[13:25:10.933]                           invokeRestart("muffleWarning")
[13:25:10.933]                       }
[13:25:10.933]                       else if (inherits(cond, "condition")) {
[13:25:10.933]                         if (!is.null(pattern)) {
[13:25:10.933]                           computeRestarts <- base::computeRestarts
[13:25:10.933]                           grepl <- base::grepl
[13:25:10.933]                           restarts <- computeRestarts(cond)
[13:25:10.933]                           for (restart in restarts) {
[13:25:10.933]                             name <- restart$name
[13:25:10.933]                             if (is.null(name)) 
[13:25:10.933]                               next
[13:25:10.933]                             if (!grepl(pattern, name)) 
[13:25:10.933]                               next
[13:25:10.933]                             invokeRestart(restart)
[13:25:10.933]                             muffled <- TRUE
[13:25:10.933]                             break
[13:25:10.933]                           }
[13:25:10.933]                         }
[13:25:10.933]                       }
[13:25:10.933]                       invisible(muffled)
[13:25:10.933]                     }
[13:25:10.933]                     muffleCondition(cond, pattern = "^muffle")
[13:25:10.933]                   }
[13:25:10.933]                 }
[13:25:10.933]                 else {
[13:25:10.933]                   if (TRUE) {
[13:25:10.933]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:25:10.933]                     {
[13:25:10.933]                       inherits <- base::inherits
[13:25:10.933]                       invokeRestart <- base::invokeRestart
[13:25:10.933]                       is.null <- base::is.null
[13:25:10.933]                       muffled <- FALSE
[13:25:10.933]                       if (inherits(cond, "message")) {
[13:25:10.933]                         muffled <- grepl(pattern, "muffleMessage")
[13:25:10.933]                         if (muffled) 
[13:25:10.933]                           invokeRestart("muffleMessage")
[13:25:10.933]                       }
[13:25:10.933]                       else if (inherits(cond, "warning")) {
[13:25:10.933]                         muffled <- grepl(pattern, "muffleWarning")
[13:25:10.933]                         if (muffled) 
[13:25:10.933]                           invokeRestart("muffleWarning")
[13:25:10.933]                       }
[13:25:10.933]                       else if (inherits(cond, "condition")) {
[13:25:10.933]                         if (!is.null(pattern)) {
[13:25:10.933]                           computeRestarts <- base::computeRestarts
[13:25:10.933]                           grepl <- base::grepl
[13:25:10.933]                           restarts <- computeRestarts(cond)
[13:25:10.933]                           for (restart in restarts) {
[13:25:10.933]                             name <- restart$name
[13:25:10.933]                             if (is.null(name)) 
[13:25:10.933]                               next
[13:25:10.933]                             if (!grepl(pattern, name)) 
[13:25:10.933]                               next
[13:25:10.933]                             invokeRestart(restart)
[13:25:10.933]                             muffled <- TRUE
[13:25:10.933]                             break
[13:25:10.933]                           }
[13:25:10.933]                         }
[13:25:10.933]                       }
[13:25:10.933]                       invisible(muffled)
[13:25:10.933]                     }
[13:25:10.933]                     muffleCondition(cond, pattern = "^muffle")
[13:25:10.933]                   }
[13:25:10.933]                 }
[13:25:10.933]             }
[13:25:10.933]         }))
[13:25:10.933]     }, error = function(ex) {
[13:25:10.933]         base::structure(base::list(value = NULL, visible = NULL, 
[13:25:10.933]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:25:10.933]                 ...future.rng), started = ...future.startTime, 
[13:25:10.933]             finished = Sys.time(), session_uuid = NA_character_, 
[13:25:10.933]             version = "1.8"), class = "FutureResult")
[13:25:10.933]     }, finally = {
[13:25:10.933]         if (!identical(...future.workdir, getwd())) 
[13:25:10.933]             setwd(...future.workdir)
[13:25:10.933]         {
[13:25:10.933]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:25:10.933]                 ...future.oldOptions$nwarnings <- NULL
[13:25:10.933]             }
[13:25:10.933]             base::options(...future.oldOptions)
[13:25:10.933]             if (.Platform$OS.type == "windows") {
[13:25:10.933]                 old_names <- names(...future.oldEnvVars)
[13:25:10.933]                 envs <- base::Sys.getenv()
[13:25:10.933]                 names <- names(envs)
[13:25:10.933]                 common <- intersect(names, old_names)
[13:25:10.933]                 added <- setdiff(names, old_names)
[13:25:10.933]                 removed <- setdiff(old_names, names)
[13:25:10.933]                 changed <- common[...future.oldEnvVars[common] != 
[13:25:10.933]                   envs[common]]
[13:25:10.933]                 NAMES <- toupper(changed)
[13:25:10.933]                 args <- list()
[13:25:10.933]                 for (kk in seq_along(NAMES)) {
[13:25:10.933]                   name <- changed[[kk]]
[13:25:10.933]                   NAME <- NAMES[[kk]]
[13:25:10.933]                   if (name != NAME && is.element(NAME, old_names)) 
[13:25:10.933]                     next
[13:25:10.933]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:25:10.933]                 }
[13:25:10.933]                 NAMES <- toupper(added)
[13:25:10.933]                 for (kk in seq_along(NAMES)) {
[13:25:10.933]                   name <- added[[kk]]
[13:25:10.933]                   NAME <- NAMES[[kk]]
[13:25:10.933]                   if (name != NAME && is.element(NAME, old_names)) 
[13:25:10.933]                     next
[13:25:10.933]                   args[[name]] <- ""
[13:25:10.933]                 }
[13:25:10.933]                 NAMES <- toupper(removed)
[13:25:10.933]                 for (kk in seq_along(NAMES)) {
[13:25:10.933]                   name <- removed[[kk]]
[13:25:10.933]                   NAME <- NAMES[[kk]]
[13:25:10.933]                   if (name != NAME && is.element(NAME, old_names)) 
[13:25:10.933]                     next
[13:25:10.933]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:25:10.933]                 }
[13:25:10.933]                 if (length(args) > 0) 
[13:25:10.933]                   base::do.call(base::Sys.setenv, args = args)
[13:25:10.933]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:25:10.933]             }
[13:25:10.933]             else {
[13:25:10.933]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:25:10.933]             }
[13:25:10.933]             {
[13:25:10.933]                 if (base::length(...future.futureOptionsAdded) > 
[13:25:10.933]                   0L) {
[13:25:10.933]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:25:10.933]                   base::names(opts) <- ...future.futureOptionsAdded
[13:25:10.933]                   base::options(opts)
[13:25:10.933]                 }
[13:25:10.933]                 {
[13:25:10.933]                   {
[13:25:10.933]                     NULL
[13:25:10.933]                     RNGkind("Mersenne-Twister")
[13:25:10.933]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[13:25:10.933]                       inherits = FALSE)
[13:25:10.933]                   }
[13:25:10.933]                   options(future.plan = "multisession")
[13:25:10.933]                   if (is.na("")) 
[13:25:10.933]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:25:10.933]                   else Sys.setenv(R_FUTURE_PLAN = "")
[13:25:10.933]                   future::plan(list(function (..., workers = availableCores(), 
[13:25:10.933]                     lazy = FALSE, rscript_libs = .libPaths(), 
[13:25:10.933]                     envir = parent.frame()) 
[13:25:10.933]                   {
[13:25:10.933]                     if (is.function(workers)) 
[13:25:10.933]                       workers <- workers()
[13:25:10.933]                     workers <- structure(as.integer(workers), 
[13:25:10.933]                       class = class(workers))
[13:25:10.933]                     stop_if_not(length(workers) == 1, is.finite(workers), 
[13:25:10.933]                       workers >= 1)
[13:25:10.933]                     if (workers == 1L && !inherits(workers, "AsIs")) {
[13:25:10.933]                       return(sequential(..., lazy = TRUE, envir = envir))
[13:25:10.933]                     }
[13:25:10.933]                     future <- MultisessionFuture(..., workers = workers, 
[13:25:10.933]                       lazy = lazy, rscript_libs = rscript_libs, 
[13:25:10.933]                       envir = envir)
[13:25:10.933]                     if (!future$lazy) 
[13:25:10.933]                       future <- run(future)
[13:25:10.933]                     invisible(future)
[13:25:10.933]                   }), .cleanup = FALSE, .init = FALSE)
[13:25:10.933]                 }
[13:25:10.933]             }
[13:25:10.933]         }
[13:25:10.933]     })
[13:25:10.933]     if (TRUE) {
[13:25:10.933]         base::sink(type = "output", split = FALSE)
[13:25:10.933]         if (TRUE) {
[13:25:10.933]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:25:10.933]         }
[13:25:10.933]         else {
[13:25:10.933]             ...future.result["stdout"] <- base::list(NULL)
[13:25:10.933]         }
[13:25:10.933]         base::close(...future.stdout)
[13:25:10.933]         ...future.stdout <- NULL
[13:25:10.933]     }
[13:25:10.933]     ...future.result$conditions <- ...future.conditions
[13:25:10.933]     ...future.result$finished <- base::Sys.time()
[13:25:10.933]     ...future.result
[13:25:10.933] }
[13:25:10.934] plan(): Setting new future strategy stack:
[13:25:10.935] List of future strategies:
[13:25:10.935] 1. sequential:
[13:25:10.935]    - args: function (..., envir = parent.frame())
[13:25:10.935]    - tweaked: FALSE
[13:25:10.935]    - call: NULL
[13:25:10.935] plan(): nbrOfWorkers() = 1
[13:25:10.936] plan(): Setting new future strategy stack:
[13:25:10.936] List of future strategies:
[13:25:10.936] 1. multisession:
[13:25:10.936]    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[13:25:10.936]    - tweaked: FALSE
[13:25:10.936]    - call: plan("default")
[13:25:10.939] plan(): nbrOfWorkers() = 1
[13:25:10.939] SequentialFuture started (and completed)
[13:25:10.939] plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ... DONE
[13:25:10.942] plan(): nbrOfWorkers() = 1
> message("- .onLoad() w/ future.plan = 'multisession' & -p 1 ... DONE")
- .onLoad() w/ future.plan = 'multisession' & -p 1 ... DONE
> 
> message("- .onLoad() w/ future.plan = 'multisession' & -p 1 ...")
- .onLoad() w/ future.plan = 'multisession' & -p 1 ...
> options(future.plan = multisession, future.cmdargs = c("-p", "1"))
> .onLoad(pkgname, pkgname)
[13:25:10.943] Future-specific environment variables:
- R_FUTURE_PLAN=‘’
- R_FUTURE_WAIT_INTERVAL=‘0.01’
[13:25:10.943] Environment variable ‘R_FUTURE_DEMO_MANDELBROT_REGION’ not set
[13:25:10.944] Environment variable ‘R_FUTURE_DEMO_MANDELBROT_NROW’ not set
[13:25:10.944] Environment variable ‘R_FUTURE_DEPRECATED_IGNORE’ not set
[13:25:10.944] Environment variable ‘R_FUTURE_DEPRECATED_DEFUNCT’ not set
[13:25:10.944] Environment variable ‘R_FUTURE_FORK_MULTITHREADING_ENABLE’ not set
[13:25:10.944] Environment variable ‘R_FUTURE_GLOBALS_MAXSIZE’ not set
[13:25:10.944] Environment variable ‘R_FUTURE_GLOBALS_ONMISSING’ not set
[13:25:10.944] Environment variable ‘R_FUTURE_GLOBALS_ONREFERENCE’ not set
[13:25:10.944] Environment variable ‘R_FUTURE_GLOBALS_METHOD’ not set
[13:25:10.945] Environment variable ‘R_FUTURE_GLOBALS_RESOLVE’ not set
[13:25:10.945] Environment variable ‘R_FUTURE_LAZY_ASSERTOWNER’ not set
[13:25:10.945] Environment variable ‘R_FUTURE_PLAN_DISALLOW’ not set
[13:25:10.945] Environment variable ‘R_FUTURE_PSOCK_RELAY_IMMEDIATE’ not set
[13:25:10.945] Environment variable ‘R_FUTURE_RELAY_IMMEDIATE’ not set
[13:25:10.945] Environment variable ‘R_FUTURE_RESOLVE_RECURSIVE’ not set
[13:25:10.945] Environment variable ‘R_FUTURE_ALIVE_TIMEOUT’ not set
[13:25:10.945] Environment variable ‘R_FUTURE_RESOLVED_TIMEOUT’ not set
[13:25:10.945] Environment variable ‘R_FUTURE_CLUSTER_RESOLVED_TIMEOUT’ not set
[13:25:10.946] Environment variable ‘R_FUTURE_MULTICORE_RESOLVED_TIMEOUT’ not set
[13:25:10.946] Environment variable ‘R_FUTURE_ONFUTURECONDITION_KEEPFUTURE’ not set
[13:25:10.946] Environment variable ‘R_FUTURE_RNG_ONMISUSE’ not set
[13:25:10.946] Environment variable ‘R_FUTURE_GLOBALENV_ONMISUSE’ not set
[13:25:10.946] Environment variable ‘R_FUTURE_WAIT_TIMEOUT’ not set
[13:25:10.946] Environment variable ‘R_FUTURE_WAIT_ALPHA’ not set
[13:25:10.946] Environment variable ‘R_FUTURE_ASSIGN_GLOBALS_EXCLUDE’ not set
[13:25:10.946] Environment variable ‘R_FUTURE_OUTPUT_WINDOWS_REENCODE’ not set
[13:25:10.946] Environment variable ‘R_FUTURE_GLOBALS_GLOBALSOF_LOCALS’ not set
[13:25:10.946] Environment variable ‘R_FUTURE_STATE_ONINVALID’ not set
[13:25:10.947] Environment variable ‘R_FUTURE_JOURNAL’ not set
[13:25:10.947] Environment variable ‘R_FUTURE_GLOBALS_KEEPWHERE’ not set
[13:25:10.947] Option 'future.plan' of type ‘function’
[13:25:10.947] R command-line argument: -p 1
[13:25:10.947]  => 'future.plan' already set.
[13:25:10.947] R process uuid: 23a78189-cf97-f775-96c6-d0d164da4543
[13:25:10.947] Setting plan('default')
[13:25:10.947] plan(): Setting new future strategy stack:
[13:25:10.948] List of future strategies:
[13:25:10.948] 1. multisession:
[13:25:10.948]    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[13:25:10.948]    - tweaked: FALSE
[13:25:10.948]    - call: NULL
[13:25:10.951] plan(): nbrOfWorkers() = 1
> strategy <- plan("next")
> print(strategy)
multisession:
- args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
- tweaked: FALSE
- call: NULL
> stopifnot(inherits(strategy, "multisession"))
> plan("default")
[13:25:10.951] plan(): Setting new future strategy stack:
[13:25:10.951] List of future strategies:
[13:25:10.951] 1. multisession:
[13:25:10.951]    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[13:25:10.951]    - tweaked: FALSE
[13:25:10.951]    - call: NULL
[13:25:10.952] plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ...
[13:25:10.952] multisession:
[13:25:10.952] - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[13:25:10.952] - tweaked: FALSE
[13:25:10.952] - call: NULL
[13:25:10.955] getGlobalsAndPackages() ...
[13:25:10.955] Not searching for globals
[13:25:10.955] - globals: [0] <none>
[13:25:10.955] getGlobalsAndPackages() ... DONE
[13:25:10.956] Packages needed by the future expression (n = 0): <none>
[13:25:10.956] Packages needed by future strategies (n = 0): <none>
[13:25:10.956] {
[13:25:10.956]     {
[13:25:10.956]         {
[13:25:10.956]             ...future.startTime <- base::Sys.time()
[13:25:10.956]             {
[13:25:10.956]                 {
[13:25:10.956]                   {
[13:25:10.956]                     base::local({
[13:25:10.956]                       has_future <- base::requireNamespace("future", 
[13:25:10.956]                         quietly = TRUE)
[13:25:10.956]                       if (has_future) {
[13:25:10.956]                         ns <- base::getNamespace("future")
[13:25:10.956]                         version <- ns[[".package"]][["version"]]
[13:25:10.956]                         if (is.null(version)) 
[13:25:10.956]                           version <- utils::packageVersion("future")
[13:25:10.956]                       }
[13:25:10.956]                       else {
[13:25:10.956]                         version <- NULL
[13:25:10.956]                       }
[13:25:10.956]                       if (!has_future || version < "1.8.0") {
[13:25:10.956]                         info <- base::c(r_version = base::gsub("R version ", 
[13:25:10.956]                           "", base::R.version$version.string), 
[13:25:10.956]                           platform = base::sprintf("%s (%s-bit)", 
[13:25:10.956]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:25:10.956]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[13:25:10.956]                             "release", "version")], collapse = " "), 
[13:25:10.956]                           hostname = base::Sys.info()[["nodename"]])
[13:25:10.956]                         info <- base::sprintf("%s: %s", base::names(info), 
[13:25:10.956]                           info)
[13:25:10.956]                         info <- base::paste(info, collapse = "; ")
[13:25:10.956]                         if (!has_future) {
[13:25:10.956]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:25:10.956]                             info)
[13:25:10.956]                         }
[13:25:10.956]                         else {
[13:25:10.956]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:25:10.956]                             info, version)
[13:25:10.956]                         }
[13:25:10.956]                         base::stop(msg)
[13:25:10.956]                       }
[13:25:10.956]                     })
[13:25:10.956]                   }
[13:25:10.956]                   options(future.plan = NULL)
[13:25:10.956]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:25:10.956]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:25:10.956]                 }
[13:25:10.956]                 ...future.workdir <- getwd()
[13:25:10.956]             }
[13:25:10.956]             ...future.oldOptions <- base::as.list(base::.Options)
[13:25:10.956]             ...future.oldEnvVars <- base::Sys.getenv()
[13:25:10.956]         }
[13:25:10.956]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:25:10.956]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:25:10.956]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:25:10.956]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:25:10.956]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:25:10.956]             future.stdout.windows.reencode = NULL, width = 80L)
[13:25:10.956]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:25:10.956]             base::names(...future.oldOptions))
[13:25:10.956]     }
[13:25:10.956]     if (FALSE) {
[13:25:10.956]     }
[13:25:10.956]     else {
[13:25:10.956]         if (TRUE) {
[13:25:10.956]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:25:10.956]                 open = "w")
[13:25:10.956]         }
[13:25:10.956]         else {
[13:25:10.956]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:25:10.956]                 windows = "NUL", "/dev/null"), open = "w")
[13:25:10.956]         }
[13:25:10.956]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:25:10.956]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:25:10.956]             base::sink(type = "output", split = FALSE)
[13:25:10.956]             base::close(...future.stdout)
[13:25:10.956]         }, add = TRUE)
[13:25:10.956]     }
[13:25:10.956]     ...future.frame <- base::sys.nframe()
[13:25:10.956]     ...future.conditions <- base::list()
[13:25:10.956]     ...future.rng <- base::globalenv()$.Random.seed
[13:25:10.956]     if (FALSE) {
[13:25:10.956]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:25:10.956]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:25:10.956]     }
[13:25:10.956]     ...future.result <- base::tryCatch({
[13:25:10.956]         base::withCallingHandlers({
[13:25:10.956]             ...future.value <- base::withVisible(base::local(NA))
[13:25:10.956]             future::FutureResult(value = ...future.value$value, 
[13:25:10.956]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:25:10.956]                   ...future.rng), globalenv = if (FALSE) 
[13:25:10.956]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:25:10.956]                     ...future.globalenv.names))
[13:25:10.956]                 else NULL, started = ...future.startTime, version = "1.8")
[13:25:10.956]         }, condition = base::local({
[13:25:10.956]             c <- base::c
[13:25:10.956]             inherits <- base::inherits
[13:25:10.956]             invokeRestart <- base::invokeRestart
[13:25:10.956]             length <- base::length
[13:25:10.956]             list <- base::list
[13:25:10.956]             seq.int <- base::seq.int
[13:25:10.956]             signalCondition <- base::signalCondition
[13:25:10.956]             sys.calls <- base::sys.calls
[13:25:10.956]             `[[` <- base::`[[`
[13:25:10.956]             `+` <- base::`+`
[13:25:10.956]             `<<-` <- base::`<<-`
[13:25:10.956]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:25:10.956]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:25:10.956]                   3L)]
[13:25:10.956]             }
[13:25:10.956]             function(cond) {
[13:25:10.956]                 is_error <- inherits(cond, "error")
[13:25:10.956]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:25:10.956]                   NULL)
[13:25:10.956]                 if (is_error) {
[13:25:10.956]                   sessionInformation <- function() {
[13:25:10.956]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:25:10.956]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:25:10.956]                       search = base::search(), system = base::Sys.info())
[13:25:10.956]                   }
[13:25:10.956]                   ...future.conditions[[length(...future.conditions) + 
[13:25:10.956]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:25:10.956]                     cond$call), session = sessionInformation(), 
[13:25:10.956]                     timestamp = base::Sys.time(), signaled = 0L)
[13:25:10.956]                   signalCondition(cond)
[13:25:10.956]                 }
[13:25:10.956]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:25:10.956]                 "immediateCondition"))) {
[13:25:10.956]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:25:10.956]                   ...future.conditions[[length(...future.conditions) + 
[13:25:10.956]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:25:10.956]                   if (TRUE && !signal) {
[13:25:10.956]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:25:10.956]                     {
[13:25:10.956]                       inherits <- base::inherits
[13:25:10.956]                       invokeRestart <- base::invokeRestart
[13:25:10.956]                       is.null <- base::is.null
[13:25:10.956]                       muffled <- FALSE
[13:25:10.956]                       if (inherits(cond, "message")) {
[13:25:10.956]                         muffled <- grepl(pattern, "muffleMessage")
[13:25:10.956]                         if (muffled) 
[13:25:10.956]                           invokeRestart("muffleMessage")
[13:25:10.956]                       }
[13:25:10.956]                       else if (inherits(cond, "warning")) {
[13:25:10.956]                         muffled <- grepl(pattern, "muffleWarning")
[13:25:10.956]                         if (muffled) 
[13:25:10.956]                           invokeRestart("muffleWarning")
[13:25:10.956]                       }
[13:25:10.956]                       else if (inherits(cond, "condition")) {
[13:25:10.956]                         if (!is.null(pattern)) {
[13:25:10.956]                           computeRestarts <- base::computeRestarts
[13:25:10.956]                           grepl <- base::grepl
[13:25:10.956]                           restarts <- computeRestarts(cond)
[13:25:10.956]                           for (restart in restarts) {
[13:25:10.956]                             name <- restart$name
[13:25:10.956]                             if (is.null(name)) 
[13:25:10.956]                               next
[13:25:10.956]                             if (!grepl(pattern, name)) 
[13:25:10.956]                               next
[13:25:10.956]                             invokeRestart(restart)
[13:25:10.956]                             muffled <- TRUE
[13:25:10.956]                             break
[13:25:10.956]                           }
[13:25:10.956]                         }
[13:25:10.956]                       }
[13:25:10.956]                       invisible(muffled)
[13:25:10.956]                     }
[13:25:10.956]                     muffleCondition(cond, pattern = "^muffle")
[13:25:10.956]                   }
[13:25:10.956]                 }
[13:25:10.956]                 else {
[13:25:10.956]                   if (TRUE) {
[13:25:10.956]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:25:10.956]                     {
[13:25:10.956]                       inherits <- base::inherits
[13:25:10.956]                       invokeRestart <- base::invokeRestart
[13:25:10.956]                       is.null <- base::is.null
[13:25:10.956]                       muffled <- FALSE
[13:25:10.956]                       if (inherits(cond, "message")) {
[13:25:10.956]                         muffled <- grepl(pattern, "muffleMessage")
[13:25:10.956]                         if (muffled) 
[13:25:10.956]                           invokeRestart("muffleMessage")
[13:25:10.956]                       }
[13:25:10.956]                       else if (inherits(cond, "warning")) {
[13:25:10.956]                         muffled <- grepl(pattern, "muffleWarning")
[13:25:10.956]                         if (muffled) 
[13:25:10.956]                           invokeRestart("muffleWarning")
[13:25:10.956]                       }
[13:25:10.956]                       else if (inherits(cond, "condition")) {
[13:25:10.956]                         if (!is.null(pattern)) {
[13:25:10.956]                           computeRestarts <- base::computeRestarts
[13:25:10.956]                           grepl <- base::grepl
[13:25:10.956]                           restarts <- computeRestarts(cond)
[13:25:10.956]                           for (restart in restarts) {
[13:25:10.956]                             name <- restart$name
[13:25:10.956]                             if (is.null(name)) 
[13:25:10.956]                               next
[13:25:10.956]                             if (!grepl(pattern, name)) 
[13:25:10.956]                               next
[13:25:10.956]                             invokeRestart(restart)
[13:25:10.956]                             muffled <- TRUE
[13:25:10.956]                             break
[13:25:10.956]                           }
[13:25:10.956]                         }
[13:25:10.956]                       }
[13:25:10.956]                       invisible(muffled)
[13:25:10.956]                     }
[13:25:10.956]                     muffleCondition(cond, pattern = "^muffle")
[13:25:10.956]                   }
[13:25:10.956]                 }
[13:25:10.956]             }
[13:25:10.956]         }))
[13:25:10.956]     }, error = function(ex) {
[13:25:10.956]         base::structure(base::list(value = NULL, visible = NULL, 
[13:25:10.956]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:25:10.956]                 ...future.rng), started = ...future.startTime, 
[13:25:10.956]             finished = Sys.time(), session_uuid = NA_character_, 
[13:25:10.956]             version = "1.8"), class = "FutureResult")
[13:25:10.956]     }, finally = {
[13:25:10.956]         if (!identical(...future.workdir, getwd())) 
[13:25:10.956]             setwd(...future.workdir)
[13:25:10.956]         {
[13:25:10.956]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:25:10.956]                 ...future.oldOptions$nwarnings <- NULL
[13:25:10.956]             }
[13:25:10.956]             base::options(...future.oldOptions)
[13:25:10.956]             if (.Platform$OS.type == "windows") {
[13:25:10.956]                 old_names <- names(...future.oldEnvVars)
[13:25:10.956]                 envs <- base::Sys.getenv()
[13:25:10.956]                 names <- names(envs)
[13:25:10.956]                 common <- intersect(names, old_names)
[13:25:10.956]                 added <- setdiff(names, old_names)
[13:25:10.956]                 removed <- setdiff(old_names, names)
[13:25:10.956]                 changed <- common[...future.oldEnvVars[common] != 
[13:25:10.956]                   envs[common]]
[13:25:10.956]                 NAMES <- toupper(changed)
[13:25:10.956]                 args <- list()
[13:25:10.956]                 for (kk in seq_along(NAMES)) {
[13:25:10.956]                   name <- changed[[kk]]
[13:25:10.956]                   NAME <- NAMES[[kk]]
[13:25:10.956]                   if (name != NAME && is.element(NAME, old_names)) 
[13:25:10.956]                     next
[13:25:10.956]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:25:10.956]                 }
[13:25:10.956]                 NAMES <- toupper(added)
[13:25:10.956]                 for (kk in seq_along(NAMES)) {
[13:25:10.956]                   name <- added[[kk]]
[13:25:10.956]                   NAME <- NAMES[[kk]]
[13:25:10.956]                   if (name != NAME && is.element(NAME, old_names)) 
[13:25:10.956]                     next
[13:25:10.956]                   args[[name]] <- ""
[13:25:10.956]                 }
[13:25:10.956]                 NAMES <- toupper(removed)
[13:25:10.956]                 for (kk in seq_along(NAMES)) {
[13:25:10.956]                   name <- removed[[kk]]
[13:25:10.956]                   NAME <- NAMES[[kk]]
[13:25:10.956]                   if (name != NAME && is.element(NAME, old_names)) 
[13:25:10.956]                     next
[13:25:10.956]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:25:10.956]                 }
[13:25:10.956]                 if (length(args) > 0) 
[13:25:10.956]                   base::do.call(base::Sys.setenv, args = args)
[13:25:10.956]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:25:10.956]             }
[13:25:10.956]             else {
[13:25:10.956]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:25:10.956]             }
[13:25:10.956]             {
[13:25:10.956]                 if (base::length(...future.futureOptionsAdded) > 
[13:25:10.956]                   0L) {
[13:25:10.956]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:25:10.956]                   base::names(opts) <- ...future.futureOptionsAdded
[13:25:10.956]                   base::options(opts)
[13:25:10.956]                 }
[13:25:10.956]                 {
[13:25:10.956]                   {
[13:25:10.956]                     NULL
[13:25:10.956]                     RNGkind("Mersenne-Twister")
[13:25:10.956]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[13:25:10.956]                       inherits = FALSE)
[13:25:10.956]                   }
[13:25:10.956]                   options(future.plan = function (..., workers = availableCores(), 
[13:25:10.956]                     lazy = FALSE, rscript_libs = .libPaths(), 
[13:25:10.956]                     envir = parent.frame()) 
[13:25:10.956]                   {
[13:25:10.956]                     if (is.function(workers)) 
[13:25:10.956]                       workers <- workers()
[13:25:10.956]                     workers <- structure(as.integer(workers), 
[13:25:10.956]                       class = class(workers))
[13:25:10.956]                     stop_if_not(length(workers) == 1, is.finite(workers), 
[13:25:10.956]                       workers >= 1)
[13:25:10.956]                     if (workers == 1L && !inherits(workers, "AsIs")) {
[13:25:10.956]                       return(sequential(..., lazy = TRUE, envir = envir))
[13:25:10.956]                     }
[13:25:10.956]                     future <- MultisessionFuture(..., workers = workers, 
[13:25:10.956]                       lazy = lazy, rscript_libs = rscript_libs, 
[13:25:10.956]                       envir = envir)
[13:25:10.956]                     if (!future$lazy) 
[13:25:10.956]                       future <- run(future)
[13:25:10.956]                     invisible(future)
[13:25:10.956]                   })
[13:25:10.956]                   if (is.na("")) 
[13:25:10.956]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:25:10.956]                   else Sys.setenv(R_FUTURE_PLAN = "")
[13:25:10.956]                   future::plan(list(function (..., workers = availableCores(), 
[13:25:10.956]                     lazy = FALSE, rscript_libs = .libPaths(), 
[13:25:10.956]                     envir = parent.frame()) 
[13:25:10.956]                   {
[13:25:10.956]                     if (is.function(workers)) 
[13:25:10.956]                       workers <- workers()
[13:25:10.956]                     workers <- structure(as.integer(workers), 
[13:25:10.956]                       class = class(workers))
[13:25:10.956]                     stop_if_not(length(workers) == 1, is.finite(workers), 
[13:25:10.956]                       workers >= 1)
[13:25:10.956]                     if (workers == 1L && !inherits(workers, "AsIs")) {
[13:25:10.956]                       return(sequential(..., lazy = TRUE, envir = envir))
[13:25:10.956]                     }
[13:25:10.956]                     future <- MultisessionFuture(..., workers = workers, 
[13:25:10.956]                       lazy = lazy, rscript_libs = rscript_libs, 
[13:25:10.956]                       envir = envir)
[13:25:10.956]                     if (!future$lazy) 
[13:25:10.956]                       future <- run(future)
[13:25:10.956]                     invisible(future)
[13:25:10.956]                   }), .cleanup = FALSE, .init = FALSE)
[13:25:10.956]                 }
[13:25:10.956]             }
[13:25:10.956]         }
[13:25:10.956]     })
[13:25:10.956]     if (TRUE) {
[13:25:10.956]         base::sink(type = "output", split = FALSE)
[13:25:10.956]         if (TRUE) {
[13:25:10.956]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:25:10.956]         }
[13:25:10.956]         else {
[13:25:10.956]             ...future.result["stdout"] <- base::list(NULL)
[13:25:10.956]         }
[13:25:10.956]         base::close(...future.stdout)
[13:25:10.956]         ...future.stdout <- NULL
[13:25:10.956]     }
[13:25:10.956]     ...future.result$conditions <- ...future.conditions
[13:25:10.956]     ...future.result$finished <- base::Sys.time()
[13:25:10.956]     ...future.result
[13:25:10.956] }
[13:25:10.958] plan(): Setting new future strategy stack:
[13:25:10.958] List of future strategies:
[13:25:10.958] 1. sequential:
[13:25:10.958]    - args: function (..., envir = parent.frame())
[13:25:10.958]    - tweaked: FALSE
[13:25:10.958]    - call: NULL
[13:25:10.959] plan(): nbrOfWorkers() = 1
[13:25:10.959] plan(): Setting new future strategy stack:
[13:25:10.959] List of future strategies:
[13:25:10.959] 1. multisession:
[13:25:10.959]    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[13:25:10.959]    - tweaked: FALSE
[13:25:10.959]    - call: NULL
[13:25:10.963] plan(): nbrOfWorkers() = 1
[13:25:10.963] SequentialFuture started (and completed)
[13:25:10.963] plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ... DONE
[13:25:10.966] plan(): nbrOfWorkers() = 1
> message("- .onLoad() w/ future.plan = 'multisession' & -p 1 ... DONE")
- .onLoad() w/ future.plan = 'multisession' & -p 1 ... DONE
> 
> options(future.plan = NULL, future.cmdargs = NULL, future.availableCores.system = NULL, future.availableCores.fallback = NULL)
> 
> message("*** .onLoad() ... DONE")
*** .onLoad() ... DONE
> 
> 
> message("*** .onAttach() ...")
*** .onAttach() ...
> 
> pkgname <- "future"
> 
> message("- .onAttach() w/ option future.startup.loadScript ...")
- .onAttach() w/ option future.startup.loadScript ...
> 
> for (value in list(NULL, FALSE, TRUE)) {
+   options(future.startup.loadScript = value)
+   .onAttach(pkgname, pkgname)
+ }
[13:25:10.969] Option 'future.startup.script': TRUE
[13:25:10.969] Future startup scripts considered: ‘.future.R’, ‘~/.future.R’
[13:25:10.969] Future startup scripts found: <none>
[13:25:10.969] Option 'future.startup.script': TRUE
[13:25:10.969] Future startup scripts considered: ‘.future.R’, ‘~/.future.R’
[13:25:10.969] Future startup scripts found: <none>
[13:25:10.970] Option 'future.startup.script': TRUE
[13:25:10.970] Future startup scripts considered: ‘.future.R’, ‘~/.future.R’
[13:25:10.970] Future startup scripts found: <none>
> 
> message("- .onAttach() w/ option future.startup.loadScript ... DONE")
- .onAttach() w/ option future.startup.loadScript ... DONE
> 
> message("- .onAttach() with ./.future.R ...")
- .onAttach() with ./.future.R ...
> 
> pathname <- ".future.R"
> xyz <- 0L
> cat("xyz <- 42L; cat('ping\n')\n", file = pathname)
> .onAttach(pkgname, pkgname)
[13:25:10.972] Option 'future.startup.script': TRUE
[13:25:10.972] Future startup scripts considered: ‘.future.R’, ‘~/.future.R’
[13:25:10.972] Future startup scripts found: ‘.future.R’
[13:25:10.972] Future startup script to load: ‘.future.R’
ping
[1] ".future.R"
> print(xyz)
[1] 42
> stopifnot(is.integer(xyz), xyz >= 0, xyz == 42L)
> file.remove(pathname)
[1] TRUE
> 
> message("- .onAttach() with ./.future.R ... DONE")
- .onAttach() with ./.future.R ... DONE
> 
> message("*** .onAttach() ... DONE")
*** .onAttach() ... DONE
> 
> 
> source("incl/end.R")
[13:25:10.973] plan(): Setting new future strategy stack:
[13:25:10.974] List of future strategies:
[13:25:10.974] 1. FutureStrategy:
[13:25:10.974]    - args: function (..., envir = parent.frame())
[13:25:10.974]    - tweaked: FALSE
[13:25:10.974]    - call: future::plan(oplan)
[13:25:10.974] plan(): nbrOfWorkers() = 1
> 
