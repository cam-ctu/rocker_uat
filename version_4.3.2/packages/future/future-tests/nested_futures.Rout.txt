
R version 4.3.2 (2023-10-31) -- "Eye Holes"
Copyright (C) 2023 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> source("incl/start.R")
[13:23:57.699] plan(): Setting new future strategy stack:
[13:23:57.699] List of future strategies:
[13:23:57.699] 1. sequential:
[13:23:57.699]    - args: function (..., envir = parent.frame())
[13:23:57.699]    - tweaked: FALSE
[13:23:57.699]    - call: future::plan("sequential")
[13:23:57.714] plan(): nbrOfWorkers() = 1
> 
> strategies <- supportedStrategies()
> 
> message("*** Nested futures ...")
*** Nested futures ...
> 
> for (strategy1 in strategies) {
+   ## Speed up CRAN checks: Skip on CRAN Windows 32-bit
+   if (!fullTest && isWin32) next
+   
+   for (strategy2 in strategies) {
+     message(sprintf("- plan(list('%s', '%s')) ...", strategy1, strategy2))
+     plan(list(a = strategy1, b = strategy2))
+     
+     nested <- plan("list")
+     stopifnot(
+       length(nested) == 2L,
+       all(names(nested) == c("a", "b")),
+       inherits(plan("next"), strategy1)
+     )
+ 
+     x %<-% {
+       a <- 1L
+ 
+       ## IMPORTANT: Use future::plan() - not just plan() - otherwise
+       ## we're exporting the plan() function including its local stack!
+       plan_a <- unclass(future::plan("list"))
+       nested_a <- nested[-1]
+ 
+       stopifnot(
+         length(nested_a) == 1L,
+         length(plan_a) == 1L,
+         inherits(plan_a[[1]], "future"),
+         inherits(future::plan("next"), strategy2)
+       )
+ 
+       ## Attribute 'init' is modified at run time
+       for (kk in seq_along(plan_a)) attr(plan_a[[kk]], "init") <- NULL
+       for (kk in seq_along(nested_a)) attr(nested_a[[kk]], "init") <- NULL
+       stopifnot(all.equal(plan_a, nested_a))
+ 
+       y %<-% {
+         b <- 2L
+         
+         ## IMPORTANT: Use future::plan() - not just plan() - otherwise
+         ## we're exporting the plan() function including its local stack!
+         plan_b <- future::plan("list")
+         nested_b <- nested_a[-1]
+ 
+         stopifnot(
+           length(nested_b) == 0L,
+           length(plan_b) == 1L,
+           inherits(plan_b[[1]], "future"),
+           inherits(future::plan("next"), "sequential")
+         )
+ 
+         list(a = a, nested_a = nested_a, plan_a = plan_a,
+              b = b, nested_b = nested_b, plan_b = plan_b)
+       }
+       y
+     }
+ 
+     str(x)
+ 
+     stopifnot(
+       length(x) == 3 * length(nested),
+       all(names(x) == c("a", "nested_a", "plan_a",
+                         "b", "nested_b", "plan_b")),
+ 
+       x$a == 1L,
+       length(x$nested_a) == 1L,
+       is.list(x$plan_a),
+       length(x$plan_a) == 1L,
+       inherits(x$plan_a[[1]], "future"),
+ 
+       x$b == 2L,
+       length(x$nested_b) == 0L,
+       is.list(x$plan_b),
+       length(x$plan_b) == 1L,
+       inherits(x$plan_b[[1]], "future"),
+       inherits(x$plan_b[[1]], "sequential")
+     )
+ 
+     ## Attribute 'init' is modified at run time
+     for (kk in seq_along(x$plan_a)) attr(x$plan_a[[kk]], "init") <- NULL
+     for (kk in seq_along(nested)) attr(nested[[kk]], "init") <- NULL
+     stopifnot(all.equal(x$plan_a, nested[-1L]))
+ 
+     rm(list = c("nested", "x"))
+ 
+ 
+     ## Nested futures and globals
+     ## In future (<= 1.7.0), the below would produce an error saying
+     ## "Failed to locate global object in the relevant environments: 'a'"
+     ## Related to https://github.com/HenrikBengtsson/globals/issues/35
+     data <- data.frame(a = 1:3, b = 3:1)
+     y_truth <- subset(data, a == 2)
+     f <- future({
+       value(future( subset(data, a == 2) ))
+     })
+     y <- value(f)
+     stopifnot(identical(y, y_truth))
+     
+     message(sprintf("- plan(list('%s', '%s')) ... DONE", strategy1, strategy2))
+   }
+ }
- plan(list('sequential', 'sequential')) ...
[13:23:57.768] plan(): Setting new future strategy stack:
[13:23:57.768] List of future strategies:
[13:23:57.768] 1. sequential:
[13:23:57.768]    - args: function (..., envir = parent.frame())
[13:23:57.768]    - tweaked: FALSE
[13:23:57.768]    - call: plan(list(a = strategy1, b = strategy2))
[13:23:57.768] 2. sequential:
[13:23:57.768]    - args: function (..., envir = parent.frame())
[13:23:57.768]    - tweaked: FALSE
[13:23:57.768]    - call: plan(list(a = strategy1, b = strategy2))
[13:23:57.781] plan(): nbrOfWorkers() = 1
[13:23:57.783] getGlobalsAndPackages() ...
[13:23:57.783] Searching for globals...
[13:23:57.806] - globals found: [21] ‘{’, ‘<-’, ‘unclass’, ‘::’, ‘[’, ‘nested’, ‘-’, ‘stopifnot’, ‘==’, ‘length’, ‘inherits’, ‘[[’, ‘strategy2’, ‘for’, ‘seq_along’, ‘attr’, ‘attr<-’, ‘[[<-’, ‘all.equal’, ‘list’, ‘%<-%’
[13:23:57.807] Searching for globals ... DONE
[13:23:57.807] Resolving globals: FALSE
[13:23:57.809] The total size of the 2 globals is 22.60 KiB (23144 bytes)
[13:23:57.809] The total size of the 2 globals exported for future expression (‘{; a <- 1L; plan_a <- unclass(future::plan("list")); nested_a <- nested[-1]; stopifnot(length(nested_a) == 1L, length(plan_a) == 1L, inherits(plan_a[[1]],; "future"), inherits(future::plan("next"), strategy2)); ...; }; y; }’) is 22.60 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘nested’ (22.48 KiB of class ‘list’) and ‘strategy2’ (120 bytes of class ‘character’)
[13:23:57.809] - globals: [2] ‘nested’, ‘strategy2’
[13:23:57.810] - packages: [1] ‘future’
[13:23:57.810] getGlobalsAndPackages() ... DONE
[13:23:57.810] run() for ‘Future’ ...
[13:23:57.810] - state: ‘created’
[13:23:57.811] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[13:23:57.811] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[13:23:57.811] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[13:23:57.811]   - Field: ‘label’
[13:23:57.811]   - Field: ‘local’
[13:23:57.811]   - Field: ‘owner’
[13:23:57.812]   - Field: ‘envir’
[13:23:57.812]   - Field: ‘packages’
[13:23:57.812]   - Field: ‘gc’
[13:23:57.812]   - Field: ‘conditions’
[13:23:57.812]   - Field: ‘expr’
[13:23:57.812]   - Field: ‘uuid’
[13:23:57.812]   - Field: ‘seed’
[13:23:57.812]   - Field: ‘version’
[13:23:57.812]   - Field: ‘result’
[13:23:57.812]   - Field: ‘asynchronous’
[13:23:57.813]   - Field: ‘calls’
[13:23:57.813]   - Field: ‘globals’
[13:23:57.813]   - Field: ‘stdout’
[13:23:57.813]   - Field: ‘earlySignal’
[13:23:57.813]   - Field: ‘lazy’
[13:23:57.813]   - Field: ‘state’
[13:23:57.813] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[13:23:57.813] - Launch lazy future ...
[13:23:57.814] Packages needed by the future expression (n = 1): ‘future’
[13:23:57.814] Packages needed by future strategies (n = 1): ‘future’
[13:23:57.815] {
[13:23:57.815]     {
[13:23:57.815]         {
[13:23:57.815]             ...future.startTime <- base::Sys.time()
[13:23:57.815]             {
[13:23:57.815]                 {
[13:23:57.815]                   {
[13:23:57.815]                     {
[13:23:57.815]                       base::local({
[13:23:57.815]                         has_future <- base::requireNamespace("future", 
[13:23:57.815]                           quietly = TRUE)
[13:23:57.815]                         if (has_future) {
[13:23:57.815]                           ns <- base::getNamespace("future")
[13:23:57.815]                           version <- ns[[".package"]][["version"]]
[13:23:57.815]                           if (is.null(version)) 
[13:23:57.815]                             version <- utils::packageVersion("future")
[13:23:57.815]                         }
[13:23:57.815]                         else {
[13:23:57.815]                           version <- NULL
[13:23:57.815]                         }
[13:23:57.815]                         if (!has_future || version < "1.8.0") {
[13:23:57.815]                           info <- base::c(r_version = base::gsub("R version ", 
[13:23:57.815]                             "", base::R.version$version.string), 
[13:23:57.815]                             platform = base::sprintf("%s (%s-bit)", 
[13:23:57.815]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:23:57.815]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:23:57.815]                               "release", "version")], collapse = " "), 
[13:23:57.815]                             hostname = base::Sys.info()[["nodename"]])
[13:23:57.815]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:23:57.815]                             info)
[13:23:57.815]                           info <- base::paste(info, collapse = "; ")
[13:23:57.815]                           if (!has_future) {
[13:23:57.815]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:23:57.815]                               info)
[13:23:57.815]                           }
[13:23:57.815]                           else {
[13:23:57.815]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:23:57.815]                               info, version)
[13:23:57.815]                           }
[13:23:57.815]                           base::stop(msg)
[13:23:57.815]                         }
[13:23:57.815]                       })
[13:23:57.815]                     }
[13:23:57.815]                     base::local({
[13:23:57.815]                       for (pkg in "future") {
[13:23:57.815]                         base::loadNamespace(pkg)
[13:23:57.815]                         base::library(pkg, character.only = TRUE)
[13:23:57.815]                       }
[13:23:57.815]                     })
[13:23:57.815]                   }
[13:23:57.815]                   options(future.plan = NULL)
[13:23:57.815]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:23:57.815]                   future::plan(list(b = function (..., envir = parent.frame()) 
[13:23:57.815]                   {
[13:23:57.815]                     future <- SequentialFuture(..., envir = envir)
[13:23:57.815]                     if (!future$lazy) 
[13:23:57.815]                       future <- run(future)
[13:23:57.815]                     invisible(future)
[13:23:57.815]                   }), .cleanup = FALSE, .init = FALSE)
[13:23:57.815]                 }
[13:23:57.815]                 ...future.workdir <- getwd()
[13:23:57.815]             }
[13:23:57.815]             ...future.oldOptions <- base::as.list(base::.Options)
[13:23:57.815]             ...future.oldEnvVars <- base::Sys.getenv()
[13:23:57.815]         }
[13:23:57.815]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:23:57.815]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:23:57.815]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:23:57.815]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:23:57.815]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:23:57.815]             future.stdout.windows.reencode = NULL, width = 80L)
[13:23:57.815]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:23:57.815]             base::names(...future.oldOptions))
[13:23:57.815]     }
[13:23:57.815]     if (FALSE) {
[13:23:57.815]     }
[13:23:57.815]     else {
[13:23:57.815]         if (TRUE) {
[13:23:57.815]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:23:57.815]                 open = "w")
[13:23:57.815]         }
[13:23:57.815]         else {
[13:23:57.815]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:23:57.815]                 windows = "NUL", "/dev/null"), open = "w")
[13:23:57.815]         }
[13:23:57.815]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:23:57.815]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:23:57.815]             base::sink(type = "output", split = FALSE)
[13:23:57.815]             base::close(...future.stdout)
[13:23:57.815]         }, add = TRUE)
[13:23:57.815]     }
[13:23:57.815]     ...future.frame <- base::sys.nframe()
[13:23:57.815]     ...future.conditions <- base::list()
[13:23:57.815]     ...future.rng <- base::globalenv()$.Random.seed
[13:23:57.815]     if (FALSE) {
[13:23:57.815]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:23:57.815]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:23:57.815]     }
[13:23:57.815]     ...future.result <- base::tryCatch({
[13:23:57.815]         base::withCallingHandlers({
[13:23:57.815]             ...future.value <- base::withVisible(base::local({
[13:23:57.815]                 a <- 1L
[13:23:57.815]                 plan_a <- unclass(future::plan("list"))
[13:23:57.815]                 nested_a <- nested[-1]
[13:23:57.815]                 stopifnot(length(nested_a) == 1L, length(plan_a) == 
[13:23:57.815]                   1L, inherits(plan_a[[1]], "future"), inherits(future::plan("next"), 
[13:23:57.815]                   strategy2))
[13:23:57.815]                 for (kk in seq_along(plan_a)) attr(plan_a[[kk]], 
[13:23:57.815]                   "init") <- NULL
[13:23:57.815]                 for (kk in seq_along(nested_a)) attr(nested_a[[kk]], 
[13:23:57.815]                   "init") <- NULL
[13:23:57.815]                 stopifnot(all.equal(plan_a, nested_a))
[13:23:57.815]                 y %<-% {
[13:23:57.815]                   b <- 2L
[13:23:57.815]                   plan_b <- future::plan("list")
[13:23:57.815]                   nested_b <- nested_a[-1]
[13:23:57.815]                   stopifnot(length(nested_b) == 0L, length(plan_b) == 
[13:23:57.815]                     1L, inherits(plan_b[[1]], "future"), inherits(future::plan("next"), 
[13:23:57.815]                     "sequential"))
[13:23:57.815]                   list(a = a, nested_a = nested_a, plan_a = plan_a, 
[13:23:57.815]                     b = b, nested_b = nested_b, plan_b = plan_b)
[13:23:57.815]                 }
[13:23:57.815]                 y
[13:23:57.815]             }))
[13:23:57.815]             future::FutureResult(value = ...future.value$value, 
[13:23:57.815]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:23:57.815]                   ...future.rng), globalenv = if (FALSE) 
[13:23:57.815]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:23:57.815]                     ...future.globalenv.names))
[13:23:57.815]                 else NULL, started = ...future.startTime, version = "1.8")
[13:23:57.815]         }, condition = base::local({
[13:23:57.815]             c <- base::c
[13:23:57.815]             inherits <- base::inherits
[13:23:57.815]             invokeRestart <- base::invokeRestart
[13:23:57.815]             length <- base::length
[13:23:57.815]             list <- base::list
[13:23:57.815]             seq.int <- base::seq.int
[13:23:57.815]             signalCondition <- base::signalCondition
[13:23:57.815]             sys.calls <- base::sys.calls
[13:23:57.815]             `[[` <- base::`[[`
[13:23:57.815]             `+` <- base::`+`
[13:23:57.815]             `<<-` <- base::`<<-`
[13:23:57.815]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:23:57.815]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:23:57.815]                   3L)]
[13:23:57.815]             }
[13:23:57.815]             function(cond) {
[13:23:57.815]                 is_error <- inherits(cond, "error")
[13:23:57.815]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:23:57.815]                   NULL)
[13:23:57.815]                 if (is_error) {
[13:23:57.815]                   sessionInformation <- function() {
[13:23:57.815]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:23:57.815]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:23:57.815]                       search = base::search(), system = base::Sys.info())
[13:23:57.815]                   }
[13:23:57.815]                   ...future.conditions[[length(...future.conditions) + 
[13:23:57.815]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:23:57.815]                     cond$call), session = sessionInformation(), 
[13:23:57.815]                     timestamp = base::Sys.time(), signaled = 0L)
[13:23:57.815]                   signalCondition(cond)
[13:23:57.815]                 }
[13:23:57.815]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:23:57.815]                 "immediateCondition"))) {
[13:23:57.815]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:23:57.815]                   ...future.conditions[[length(...future.conditions) + 
[13:23:57.815]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:23:57.815]                   if (TRUE && !signal) {
[13:23:57.815]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:23:57.815]                     {
[13:23:57.815]                       inherits <- base::inherits
[13:23:57.815]                       invokeRestart <- base::invokeRestart
[13:23:57.815]                       is.null <- base::is.null
[13:23:57.815]                       muffled <- FALSE
[13:23:57.815]                       if (inherits(cond, "message")) {
[13:23:57.815]                         muffled <- grepl(pattern, "muffleMessage")
[13:23:57.815]                         if (muffled) 
[13:23:57.815]                           invokeRestart("muffleMessage")
[13:23:57.815]                       }
[13:23:57.815]                       else if (inherits(cond, "warning")) {
[13:23:57.815]                         muffled <- grepl(pattern, "muffleWarning")
[13:23:57.815]                         if (muffled) 
[13:23:57.815]                           invokeRestart("muffleWarning")
[13:23:57.815]                       }
[13:23:57.815]                       else if (inherits(cond, "condition")) {
[13:23:57.815]                         if (!is.null(pattern)) {
[13:23:57.815]                           computeRestarts <- base::computeRestarts
[13:23:57.815]                           grepl <- base::grepl
[13:23:57.815]                           restarts <- computeRestarts(cond)
[13:23:57.815]                           for (restart in restarts) {
[13:23:57.815]                             name <- restart$name
[13:23:57.815]                             if (is.null(name)) 
[13:23:57.815]                               next
[13:23:57.815]                             if (!grepl(pattern, name)) 
[13:23:57.815]                               next
[13:23:57.815]                             invokeRestart(restart)
[13:23:57.815]                             muffled <- TRUE
[13:23:57.815]                             break
[13:23:57.815]                           }
[13:23:57.815]                         }
[13:23:57.815]                       }
[13:23:57.815]                       invisible(muffled)
[13:23:57.815]                     }
[13:23:57.815]                     muffleCondition(cond, pattern = "^muffle")
[13:23:57.815]                   }
[13:23:57.815]                 }
[13:23:57.815]                 else {
[13:23:57.815]                   if (TRUE) {
[13:23:57.815]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:23:57.815]                     {
[13:23:57.815]                       inherits <- base::inherits
[13:23:57.815]                       invokeRestart <- base::invokeRestart
[13:23:57.815]                       is.null <- base::is.null
[13:23:57.815]                       muffled <- FALSE
[13:23:57.815]                       if (inherits(cond, "message")) {
[13:23:57.815]                         muffled <- grepl(pattern, "muffleMessage")
[13:23:57.815]                         if (muffled) 
[13:23:57.815]                           invokeRestart("muffleMessage")
[13:23:57.815]                       }
[13:23:57.815]                       else if (inherits(cond, "warning")) {
[13:23:57.815]                         muffled <- grepl(pattern, "muffleWarning")
[13:23:57.815]                         if (muffled) 
[13:23:57.815]                           invokeRestart("muffleWarning")
[13:23:57.815]                       }
[13:23:57.815]                       else if (inherits(cond, "condition")) {
[13:23:57.815]                         if (!is.null(pattern)) {
[13:23:57.815]                           computeRestarts <- base::computeRestarts
[13:23:57.815]                           grepl <- base::grepl
[13:23:57.815]                           restarts <- computeRestarts(cond)
[13:23:57.815]                           for (restart in restarts) {
[13:23:57.815]                             name <- restart$name
[13:23:57.815]                             if (is.null(name)) 
[13:23:57.815]                               next
[13:23:57.815]                             if (!grepl(pattern, name)) 
[13:23:57.815]                               next
[13:23:57.815]                             invokeRestart(restart)
[13:23:57.815]                             muffled <- TRUE
[13:23:57.815]                             break
[13:23:57.815]                           }
[13:23:57.815]                         }
[13:23:57.815]                       }
[13:23:57.815]                       invisible(muffled)
[13:23:57.815]                     }
[13:23:57.815]                     muffleCondition(cond, pattern = "^muffle")
[13:23:57.815]                   }
[13:23:57.815]                 }
[13:23:57.815]             }
[13:23:57.815]         }))
[13:23:57.815]     }, error = function(ex) {
[13:23:57.815]         base::structure(base::list(value = NULL, visible = NULL, 
[13:23:57.815]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:23:57.815]                 ...future.rng), started = ...future.startTime, 
[13:23:57.815]             finished = Sys.time(), session_uuid = NA_character_, 
[13:23:57.815]             version = "1.8"), class = "FutureResult")
[13:23:57.815]     }, finally = {
[13:23:57.815]         if (!identical(...future.workdir, getwd())) 
[13:23:57.815]             setwd(...future.workdir)
[13:23:57.815]         {
[13:23:57.815]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:23:57.815]                 ...future.oldOptions$nwarnings <- NULL
[13:23:57.815]             }
[13:23:57.815]             base::options(...future.oldOptions)
[13:23:57.815]             if (.Platform$OS.type == "windows") {
[13:23:57.815]                 old_names <- names(...future.oldEnvVars)
[13:23:57.815]                 envs <- base::Sys.getenv()
[13:23:57.815]                 names <- names(envs)
[13:23:57.815]                 common <- intersect(names, old_names)
[13:23:57.815]                 added <- setdiff(names, old_names)
[13:23:57.815]                 removed <- setdiff(old_names, names)
[13:23:57.815]                 changed <- common[...future.oldEnvVars[common] != 
[13:23:57.815]                   envs[common]]
[13:23:57.815]                 NAMES <- toupper(changed)
[13:23:57.815]                 args <- list()
[13:23:57.815]                 for (kk in seq_along(NAMES)) {
[13:23:57.815]                   name <- changed[[kk]]
[13:23:57.815]                   NAME <- NAMES[[kk]]
[13:23:57.815]                   if (name != NAME && is.element(NAME, old_names)) 
[13:23:57.815]                     next
[13:23:57.815]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:23:57.815]                 }
[13:23:57.815]                 NAMES <- toupper(added)
[13:23:57.815]                 for (kk in seq_along(NAMES)) {
[13:23:57.815]                   name <- added[[kk]]
[13:23:57.815]                   NAME <- NAMES[[kk]]
[13:23:57.815]                   if (name != NAME && is.element(NAME, old_names)) 
[13:23:57.815]                     next
[13:23:57.815]                   args[[name]] <- ""
[13:23:57.815]                 }
[13:23:57.815]                 NAMES <- toupper(removed)
[13:23:57.815]                 for (kk in seq_along(NAMES)) {
[13:23:57.815]                   name <- removed[[kk]]
[13:23:57.815]                   NAME <- NAMES[[kk]]
[13:23:57.815]                   if (name != NAME && is.element(NAME, old_names)) 
[13:23:57.815]                     next
[13:23:57.815]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:23:57.815]                 }
[13:23:57.815]                 if (length(args) > 0) 
[13:23:57.815]                   base::do.call(base::Sys.setenv, args = args)
[13:23:57.815]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:23:57.815]             }
[13:23:57.815]             else {
[13:23:57.815]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:23:57.815]             }
[13:23:57.815]             {
[13:23:57.815]                 if (base::length(...future.futureOptionsAdded) > 
[13:23:57.815]                   0L) {
[13:23:57.815]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:23:57.815]                   base::names(opts) <- ...future.futureOptionsAdded
[13:23:57.815]                   base::options(opts)
[13:23:57.815]                 }
[13:23:57.815]                 {
[13:23:57.815]                   {
[13:23:57.815]                     NULL
[13:23:57.815]                     RNGkind("Mersenne-Twister")
[13:23:57.815]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[13:23:57.815]                       inherits = FALSE)
[13:23:57.815]                   }
[13:23:57.815]                   options(future.plan = NULL)
[13:23:57.815]                   if (is.na(NA_character_)) 
[13:23:57.815]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:23:57.815]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:23:57.815]                   future::plan(list(a = function (..., envir = parent.frame()) 
[13:23:57.815]                   {
[13:23:57.815]                     future <- SequentialFuture(..., envir = envir)
[13:23:57.815]                     if (!future$lazy) 
[13:23:57.815]                       future <- run(future)
[13:23:57.815]                     invisible(future)
[13:23:57.815]                   }, b = function (..., envir = parent.frame()) 
[13:23:57.815]                   {
[13:23:57.815]                     future <- SequentialFuture(..., envir = envir)
[13:23:57.815]                     if (!future$lazy) 
[13:23:57.815]                       future <- run(future)
[13:23:57.815]                     invisible(future)
[13:23:57.815]                   }), .cleanup = FALSE, .init = FALSE)
[13:23:57.815]                 }
[13:23:57.815]             }
[13:23:57.815]         }
[13:23:57.815]     })
[13:23:57.815]     if (TRUE) {
[13:23:57.815]         base::sink(type = "output", split = FALSE)
[13:23:57.815]         if (TRUE) {
[13:23:57.815]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:23:57.815]         }
[13:23:57.815]         else {
[13:23:57.815]             ...future.result["stdout"] <- base::list(NULL)
[13:23:57.815]         }
[13:23:57.815]         base::close(...future.stdout)
[13:23:57.815]         ...future.stdout <- NULL
[13:23:57.815]     }
[13:23:57.815]     ...future.result$conditions <- ...future.conditions
[13:23:57.815]     ...future.result$finished <- base::Sys.time()
[13:23:57.815]     ...future.result
[13:23:57.815] }
[13:23:57.817] assign_globals() ...
[13:23:57.817] List of 2
[13:23:57.817]  $ nested   :List of 2
[13:23:57.817]   ..$ a:function (..., envir = parent.frame())  
[13:23:57.817]   .. ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[13:23:57.817]   .. ..- attr(*, "call")= language plan(list(a = strategy1, b = strategy2))
[13:23:57.817]   ..$ b:function (..., envir = parent.frame())  
[13:23:57.817]   .. ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[13:23:57.817]   .. ..- attr(*, "call")= language plan(list(a = strategy1, b = strategy2))
[13:23:57.817]   ..- attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[13:23:57.817]  $ strategy2: chr "sequential"
[13:23:57.817]  - attr(*, "where")=List of 2
[13:23:57.817]   ..$ nested   :<environment: R_EmptyEnv> 
[13:23:57.817]   ..$ strategy2:<environment: R_EmptyEnv> 
[13:23:57.817]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[13:23:57.817]  - attr(*, "resolved")= logi FALSE
[13:23:57.817]  - attr(*, "total_size")= num 23144
[13:23:57.817]  - attr(*, "already-done")= logi TRUE
[13:23:57.824] - copied ‘nested’ to environment
[13:23:57.824] - copied ‘strategy2’ to environment
[13:23:57.825] assign_globals() ... done
[13:23:57.825] plan(): Setting new future strategy stack:
[13:23:57.825] List of future strategies:
[13:23:57.825] 1. sequential:
[13:23:57.825]    - args: function (..., envir = parent.frame())
[13:23:57.825]    - tweaked: FALSE
[13:23:57.825]    - call: plan(list(a = strategy1, b = strategy2))
[13:23:57.825] plan(): nbrOfWorkers() = 1
[13:23:57.866] plan(): Setting new future strategy stack:
[13:23:57.866] List of future strategies:
[13:23:57.866] 1. sequential:
[13:23:57.866]    - args: function (..., envir = parent.frame())
[13:23:57.866]    - tweaked: FALSE
[13:23:57.866]    - call: plan(list(a = strategy1, b = strategy2))
[13:23:57.866] 2. sequential:
[13:23:57.866]    - args: function (..., envir = parent.frame())
[13:23:57.866]    - tweaked: FALSE
[13:23:57.866]    - call: plan(list(a = strategy1, b = strategy2))
[13:23:57.866] plan(): nbrOfWorkers() = 1
[13:23:57.867] SequentialFuture started (and completed)
[13:23:57.867] signalConditions() ...
[13:23:57.867]  - include = ‘immediateCondition’
[13:23:57.867]  - exclude = 
[13:23:57.867]  - resignal = FALSE
[13:23:57.867]  - Number of conditions: 54
[13:23:57.867] signalConditions() ... done
[13:23:57.867] - Launch lazy future ... done
[13:23:57.867] run() for ‘SequentialFuture’ ... done
[13:23:57.868] signalConditions() ...
[13:23:57.868]  - include = ‘immediateCondition’
[13:23:57.868]  - exclude = 
[13:23:57.868]  - resignal = FALSE
[13:23:57.868]  - Number of conditions: 54
[13:23:57.868] signalConditions() ... done
[13:23:57.868] Future state: ‘finished’
[13:23:57.868] signalConditions() ...
[13:23:57.868]  - include = ‘condition’
[13:23:57.868]  - exclude = ‘immediateCondition’
[13:23:57.869]  - resignal = TRUE
[13:23:57.869]  - Number of conditions: 54
[13:23:57.869]  - Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:57.827] getGlobalsAndPackages() ...
[13:23:57.869]  - Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:57.827] Searching for globals...
[13:23:57.869]  - Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:57.847] - globals found: [14] ‘{’, ‘<-’, ‘::’, ‘[’, ‘nested_a’, ‘-’, ‘stopifnot’, ‘==’, ‘length’, ‘inherits’, ‘[[’, ‘list’, ‘a’, ‘plan_a’
[13:23:57.869]  - Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:57.847] Searching for globals ... DONE
[13:23:57.869]  - Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:57.847] Resolving globals: FALSE
[13:23:57.869]  - Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:57.848] The total size of the 3 globals is 22.54 KiB (23080 bytes)
[13:23:57.870]  - Condition #7: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:57.848] The total size of the 3 globals exported for future expression (‘{; b <- 2L; plan_b <- future::plan("list"); nested_b <- nested_a[-1]; stopifnot(length(nested_b) == 0L, length(plan_b) == 1L, inherits(plan_b[[1]],; "future"), inherits(future::plan("next"), "sequential")); list(a = a, nested_a = nested_a, plan_a = plan_a, b = b,; nested_b = nested_b, plan_b = plan_b); }’) is 22.54 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are three globals: ‘nested_a’ (11.24 KiB of class ‘list’), ‘plan_a’ (11.24 KiB of class ‘list’) and ‘a’ (56 bytes of class ‘numeric’)
[13:23:57.870]  - Condition #8: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:57.848] - globals: [3] ‘nested_a’, ‘a’, ‘plan_a’
[13:23:57.870]  - Condition #9: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:57.849] 
[13:23:57.870]  - Condition #10: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:57.849] getGlobalsAndPackages() ... DONE
[13:23:57.870]  - Condition #11: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:57.849] run() for ‘Future’ ...
[13:23:57.870]  - Condition #12: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:57.849] - state: ‘created’
[13:23:57.870]  - Condition #13: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:57.849] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[13:23:57.871]  - Condition #14: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:57.850] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[13:23:57.871]  - Condition #15: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:57.850] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[13:23:57.871]  - Condition #16: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:57.850]   - Field: ‘label’
[13:23:57.871]  - Condition #17: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:57.850]   - Field: ‘local’
[13:23:57.871]  - Condition #18: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:57.850]   - Field: ‘owner’
[13:23:57.871]  - Condition #19: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:57.850]   - Field: ‘envir’
[13:23:57.871]  - Condition #20: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:57.850]   - Field: ‘packages’
[13:23:57.871]  - Condition #21: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:57.850]   - Field: ‘gc’
[13:23:57.872]  - Condition #22: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:57.850]   - Field: ‘conditions’
[13:23:57.872]  - Condition #23: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:57.851]   - Field: ‘expr’
[13:23:57.872]  - Condition #24: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:57.851]   - Field: ‘uuid’
[13:23:57.872]  - Condition #25: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:57.851]   - Field: ‘seed’
[13:23:57.872]  - Condition #26: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:57.851]   - Field: ‘version’
[13:23:57.872]  - Condition #27: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:57.851]   - Field: ‘result’
[13:23:57.872]  - Condition #28: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:57.851]   - Field: ‘asynchronous’
[13:23:57.873]  - Condition #29: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:57.851]   - Field: ‘calls’
[13:23:57.873]  - Condition #30: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:57.851]   - Field: ‘globals’
[13:23:57.873]  - Condition #31: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:57.851]   - Field: ‘stdout’
[13:23:57.873]  - Condition #32: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:57.852]   - Field: ‘earlySignal’
[13:23:57.873]  - Condition #33: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:57.852]   - Field: ‘lazy’
[13:23:57.873]  - Condition #34: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:57.852]   - Field: ‘state’
[13:23:57.873]  - Condition #35: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:57.852] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[13:23:57.873]  - Condition #36: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:57.852] - Launch lazy future ...
[13:23:57.874]  - Condition #37: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:57.852] Packages needed by the future expression (n = 0): <none>
[13:23:57.874]  - Condition #38: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:57.852] Packages needed by future strategies (n = 0): <none>
[13:23:57.874]  - Condition #39: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:57.853] {
[13:23:57.853]     {
[13:23:57.853]         {
[13:23:57.853]             ...future.startTime <- base::Sys.time()
[13:23:57.853]             {
[13:23:57.853]                 {
[13:23:57.853]                   {
[13:23:57.853]                     base::local({
[13:23:57.853]                       has_future <- base::requireNamespace("future", 
[13:23:57.853]                         quietly = TRUE)
[13:23:57.853]                       if (has_future) {
[13:23:57.853]                         ns <- base::getNamespace("future")
[13:23:57.853]                         version <- ns[[".package"]][["version"]]
[13:23:57.853]                         if (is.null(version)) 
[13:23:57.853]                           version <- utils::packageVersion("future")
[13:23:57.853]                       }
[13:23:57.853]                       else {
[13:23:57.853]                         version <- NULL
[13:23:57.853]                       }
[13:23:57.853]                       if (!has_future || version < "1.8.0") {
[13:23:57.853]                         info <- base::c(r_version = base::gsub("R version ", 
[13:23:57.853]                           "", base::R.version$version.string), 
[13:23:57.853]                           platform = base::sprintf("%s (%s-bit)", 
[13:23:57.853]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:23:57.853]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[13:23:57.853]                             "release", "version")], collapse = " "), 
[13:23:57.853]                           hostname = base::Sys.info()[["nodename"]])
[13:23:57.853]                         info <- base::sprintf("%s: %s", base::names(info), 
[13:23:57.853]                           info)
[13:23:57.853]                         info <- base::paste(info, collapse = "; ")
[13:23:57.853]                         if (!has_future) {
[13:23:57.853]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:23:57.853]                             info)
[13:23:57.853]                         }
[13:23:57.853]                         else {
[13:23:57.853]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:23:57.853]                             info, version)
[13:23:57.853]                         }
[13:23:57.853]                         base::stop(msg)
[13:23:57.853]                       }
[13:23:57.853]                     })
[13:23:57.853]                   }
[13:23:57.853]                   options(future.plan = NULL)
[13:23:57.853]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:23:57.853]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:23:57.853]                 }
[13:23:57.853]                 ...future.workdir <- getwd()
[13:23:57.853]             }
[13:23:57.853]             ...future.oldOptions <- base::as.list(base::.Options)
[13:23:57.853]             ...future.oldEnvVars <- base::Sys.getenv()
[13:23:57.853]         }
[13:23:57.853]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:23:57.853]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:23:57.853]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:23:57.853]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:23:57.853]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:23:57.853]             future.stdout.windows.reencode = NULL, width = 80L)
[13:23:57.853]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:23:57.853]             base::names(...future.oldOptions))
[13:23:57.853]     }
[13:23:57.853]     if (FALSE) {
[13:23:57.853]     }
[13:23:57.853]     else {
[13:23:57.853]         if (TRUE) {
[13:23:57.853]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:23:57.853]                 open = "w")
[13:23:57.853]         }
[13:23:57.853]         else {
[13:23:57.853]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:23:57.853]                 windows = "NUL", "/dev/null"), open = "w")
[13:23:57.853]         }
[13:23:57.853]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:23:57.853]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:23:57.853]             base::sink(type = "output", split = FALSE)
[13:23:57.853]             base::close(...future.stdout)
[13:23:57.853]         }, add = TRUE)
[13:23:57.853]     }
[13:23:57.853]     ...future.frame <- base::sys.nframe()
[13:23:57.853]     ...future.conditions <- base::list()
[13:23:57.853]     ...future.rng <- base::globalenv()$.Random.seed
[13:23:57.853]     if (FALSE) {
[13:23:57.853]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:23:57.853]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:23:57.853]     }
[13:23:57.853]     ...future.result <- base::tryCatch({
[13:23:57.853]         base::withCallingHandlers({
[13:23:57.853]             ...future.value <- base::withVisible(base::local({
[13:23:57.853]                 b <- 2L
[13:23:57.853]                 plan_b <- future::plan("list")
[13:23:57.853]                 nested_b <- nested_a[-1]
[13:23:57.853]                 stopifnot(length(nested_b) == 0L, length(plan_b) == 
[13:23:57.853]                   1L, inherits(plan_b[[1]], "future"), inherits(future::plan("next"), 
[13:23:57.853]                   "sequential"))
[13:23:57.853]                 list(a = a, nested_a = nested_a, plan_a = plan_a, 
[13:23:57.853]                   b = b, nested_b = nested_b, plan_b = plan_b)
[13:23:57.853]             }))
[13:23:57.853]             future::FutureResult(value = ...future.value$value, 
[13:23:57.853]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:23:57.853]                   ...future.rng), globalenv = if (FALSE) 
[13:23:57.853]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:23:57.853]                     ...future.globalenv.names))
[13:23:57.853]                 else NULL, started = ...future.startTime, version = "1.8")
[13:23:57.853]         }, condition = base::local({
[13:23:57.853]             c <- base::c
[13:23:57.853]             inherits <- base::inherits
[13:23:57.853]             invokeRestart <- base::invokeRestart
[13:23:57.853]             length <- base::length
[13:23:57.853]             list <- base::list
[13:23:57.853]             seq.int <- base::seq.int
[13:23:57.853]             signalCondition <- base::signalCondition
[13:23:57.853]             sys.calls <- base::sys.calls
[13:23:57.853]             `[[` <- base::`[[`
[13:23:57.853]             `+` <- base::`+`
[13:23:57.853]             `<<-` <- base::`<<-`
[13:23:57.853]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:23:57.853]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:23:57.853]                   3L)]
[13:23:57.853]             }
[13:23:57.853]             function(cond) {
[13:23:57.853]                 is_error <- inherits(cond, "error")
[13:23:57.853]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:23:57.853]                   NULL)
[13:23:57.853]                 if (is_error) {
[13:23:57.853]                   sessionInformation <- function() {
[13:23:57.853]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:23:57.853]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:23:57.853]                       search = base::search(), system = base::Sys.info())
[13:23:57.853]                   }
[13:23:57.853]                   ...future.conditions[[length(...future.conditions) + 
[13:23:57.853]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:23:57.853]                     cond$call), session = sessionInformation(), 
[13:23:57.853]                     timestamp = base::Sys.time(), signaled = 0L)
[13:23:57.853]                   signalCondition(cond)
[13:23:57.853]                 }
[13:23:57.853]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:23:57.853]                 "immediateCondition"))) {
[13:23:57.853]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:23:57.853]                   ...future.conditions[[length(...future.conditions) + 
[13:23:57.853]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:23:57.853]                   if (TRUE && !signal) {
[13:23:57.853]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:23:57.853]                     {
[13:23:57.853]                       inherits <- base::inherits
[13:23:57.853]                       invokeRestart <- base::invokeRestart
[13:23:57.853]                       is.null <- base::is.null
[13:23:57.853]                       muffled <- FALSE
[13:23:57.853]                       if (inherits(cond, "message")) {
[13:23:57.853]                         muffled <- grepl(pattern, "muffleMessage")
[13:23:57.853]                         if (muffled) 
[13:23:57.853]                           invokeRestart("muffleMessage")
[13:23:57.853]                       }
[13:23:57.853]                       else if (inherits(cond, "warning")) {
[13:23:57.853]                         muffled <- grepl(pattern, "muffleWarning")
[13:23:57.853]                         if (muffled) 
[13:23:57.853]                           invokeRestart("muffleWarning")
[13:23:57.853]                       }
[13:23:57.853]                       else if (inherits(cond, "condition")) {
[13:23:57.853]                         if (!is.null(pattern)) {
[13:23:57.853]                           computeRestarts <- base::computeRestarts
[13:23:57.853]                           grepl <- base::grepl
[13:23:57.853]                           restarts <- computeRestarts(cond)
[13:23:57.853]                           for (restart in restarts) {
[13:23:57.853]                             name <- restart$name
[13:23:57.853]                             if (is.null(name)) 
[13:23:57.853]                               next
[13:23:57.853]                             if (!grepl(pattern, name)) 
[13:23:57.853]                               next
[13:23:57.853]                             invokeRestart(restart)
[13:23:57.853]                             muffled <- TRUE
[13:23:57.853]                             break
[13:23:57.853]                           }
[13:23:57.853]                         }
[13:23:57.853]                       }
[13:23:57.853]                       invisible(muffled)
[13:23:57.853]                     }
[13:23:57.853]                     muffleCondition(cond, pattern = "^muffle")
[13:23:57.853]                   }
[13:23:57.853]                 }
[13:23:57.853]                 else {
[13:23:57.853]                   if (TRUE) {
[13:23:57.853]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:23:57.853]                     {
[13:23:57.853]                       inherits <- base::inherits
[13:23:57.853]                       invokeRestart <- base::invokeRestart
[13:23:57.853]                       is.null <- base::is.null
[13:23:57.853]                       muffled <- FALSE
[13:23:57.853]                       if (inherits(cond, "message")) {
[13:23:57.853]                         muffled <- grepl(pattern, "muffleMessage")
[13:23:57.853]                         if (muffled) 
[13:23:57.853]                           invokeRestart("muffleMessage")
[13:23:57.853]                       }
[13:23:57.853]                       else if (inherits(cond, "warning")) {
[13:23:57.853]                         muffled <- grepl(pattern, "muffleWarning")
[13:23:57.853]                         if (muffled) 
[13:23:57.853]                           invokeRestart("muffleWarning")
[13:23:57.853]                       }
[13:23:57.853]                       else if (inherits(cond, "condition")) {
[13:23:57.853]                         if (!is.null(pattern)) {
[13:23:57.853]                           computeRestarts <- base::computeRestarts
[13:23:57.853]                           grepl <- base::grepl
[13:23:57.853]                           restarts <- computeRestarts(cond)
[13:23:57.853]                           for (restart in restarts) {
[13:23:57.853]                             name <- restart$name
[13:23:57.853]                             if (is.null(name)) 
[13:23:57.853]                               next
[13:23:57.853]                             if (!grepl(pattern, name)) 
[13:23:57.853]                               next
[13:23:57.853]                             invokeRestart(restart)
[13:23:57.853]                             muffled <- TRUE
[13:23:57.853]                             break
[13:23:57.853]                           }
[13:23:57.853]                         }
[13:23:57.853]                       }
[13:23:57.853]                       invisible(muffled)
[13:23:57.853]                     }
[13:23:57.853]                     muffleCondition(cond, pattern = "^muffle")
[13:23:57.853]                   }
[13:23:57.853]                 }
[13:23:57.853]             }
[13:23:57.853]         }))
[13:23:57.853]     }, error = function(ex) {
[13:23:57.853]         base::structure(base::list(value = NULL, visible = NULL, 
[13:23:57.853]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:23:57.853]                 ...future.rng), started = ...future.startTime, 
[13:23:57.853]             finished = Sys.time(), session_uuid = NA_character_, 
[13:23:57.853]             version = "1.8"), class = "FutureResult")
[13:23:57.853]     }, finally = {
[13:23:57.853]         if (!identical(...future.workdir, getwd())) 
[13:23:57.853]             setwd(...future.workdir)
[13:23:57.853]         {
[13:23:57.853]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:23:57.853]                 ...future.oldOptions$nwarnings <- NULL
[13:23:57.853]             }
[13:23:57.853]             base::options(...future.oldOptions)
[13:23:57.853]             if (.Platform$OS.type == "windows") {
[13:23:57.853]                 old_names <- names(...future.oldEnvVars)
[13:23:57.853]                 envs <- base::Sys.getenv()
[13:23:57.853]                 names <- names(envs)
[13:23:57.853]                 common <- intersect(names, old_names)
[13:23:57.853]                 added <- setdiff(names, old_names)
[13:23:57.853]                 removed <- setdiff(old_names, names)
[13:23:57.853]                 changed <- common[...future.oldEnvVars[common] != 
[13:23:57.853]                   envs[common]]
[13:23:57.853]                 NAMES <- toupper(changed)
[13:23:57.853]                 args <- list()
[13:23:57.853]                 for (kk in seq_along(NAMES)) {
[13:23:57.853]                   name <- changed[[kk]]
[13:23:57.853]                   NAME <- NAMES[[kk]]
[13:23:57.853]                   if (name != NAME && is.element(NAME, old_names)) 
[13:23:57.853]                     next
[13:23:57.853]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:23:57.853]                 }
[13:23:57.853]                 NAMES <- toupper(added)
[13:23:57.853]                 for (kk in seq_along(NAMES)) {
[13:23:57.853]                   name <- added[[kk]]
[13:23:57.853]                   NAME <- NAMES[[kk]]
[13:23:57.853]                   if (name != NAME && is.element(NAME, old_names)) 
[13:23:57.853]                     next
[13:23:57.853]                   args[[name]] <- ""
[13:23:57.853]                 }
[13:23:57.853]                 NAMES <- toupper(removed)
[13:23:57.853]                 for (kk in seq_along(NAMES)) {
[13:23:57.853]                   name <- removed[[kk]]
[13:23:57.853]                   NAME <- NAMES[[kk]]
[13:23:57.853]                   if (name != NAME && is.element(NAME, old_names)) 
[13:23:57.853]                     next
[13:23:57.853]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:23:57.853]                 }
[13:23:57.853]                 if (length(args) > 0) 
[13:23:57.853]                   base::do.call(base::Sys.setenv, args = args)
[13:23:57.853]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:23:57.853]             }
[13:23:57.853]             else {
[13:23:57.853]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:23:57.853]             }
[13:23:57.853]             {
[13:23:57.853]                 if (base::length(...future.futureOptionsAdded) > 
[13:23:57.853]                   0L) {
[13:23:57.853]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:23:57.853]                   base::names(opts) <- ...future.futureOptionsAdded
[13:23:57.853]                   base::options(opts)
[13:23:57.853]                 }
[13:23:57.853]                 {
[13:23:57.853]                   {
[13:23:57.853]                     NULL
[13:23:57.853]                     RNGkind("Mersenne-Twister")
[13:23:57.853]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[13:23:57.853]                       inherits = FALSE)
[13:23:57.853]                   }
[13:23:57.853]                   options(future.plan = NULL)
[13:23:57.853]                   if (is.na(NA_character_)) 
[13:23:57.853]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:23:57.853]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:23:57.853]                   future::plan(list(b = function (..., envir = parent.frame()) 
[13:23:57.853]                   {
[13:23:57.853]                     future <- SequentialFuture(..., envir = envir)
[13:23:57.853]                     if (!future$lazy) 
[13:23:57.853]                       future <- run(future)
[13:23:57.853]                     invisible(future)
[13:23:57.853]                   }), .cleanup = FALSE, .init = FALSE)
[13:23:57.853]                 }
[13:23:57.853]             }
[13:23:57.853]         }
[13:23:57.853]     })
[13:23:57.853]     if (TRUE) {
[13:23:57.853]         base::sink(type = "output", split = FALSE)
[13:23:57.853]         if (TRUE) {
[13:23:57.853]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:23:57.853]         }
[13:23:57.853]         else {
[13:23:57.853]             ...future.result["stdout"] <- base::list(NULL)
[13:23:57.853]         }
[13:23:57.853]         base::close(...future.stdout)
[13:23:57.853]         ...future.stdout <- NULL
[13:23:57.853]     }
[13:23:57.853]     ...future.result$conditions <- ...future.conditions
[13:23:57.853]     ...future.result$finished <- base::Sys.time()
[13:23:57.853]     ...future.result
[13:23:57.853] }
[13:23:57.874]  - Condition #40: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:57.855] assign_globals() ...
[13:23:57.874]  - Condition #41: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:57.855] List of 3
[13:23:57.855]  $ nested_a:List of 1
[13:23:57.855]   ..$ b:function (..., envir = parent.frame())  
[13:23:57.855]   .. ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[13:23:57.855]   .. ..- attr(*, "call")= language plan(list(a = strategy1, b = strategy2))
[13:23:57.855]  $ a       : int 1
[13:23:57.855]  $ plan_a  :List of 1
[13:23:57.855]   ..$ b:function (..., envir = parent.frame())  
[13:23:57.855]   .. ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[13:23:57.855]   .. ..- attr(*, "call")= language plan(list(a = strategy1, b = strategy2))
[13:23:57.855]  - attr(*, "where")=List of 3
[13:23:57.855]   ..$ nested_a:<environment: R_EmptyEnv> 
[13:23:57.855]   ..$ a       :<environment: R_EmptyEnv> 
[13:23:57.855]   ..$ plan_a  :<environment: R_EmptyEnv> 
[13:23:57.855]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[13:23:57.855]  - attr(*, "resolved")= logi FALSE
[13:23:57.855]  - attr(*, "total_size")= num 23080
[13:23:57.855]  - attr(*, "already-done")= logi TRUE
[13:23:57.874]  - Condition #42: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:57.861] - copied ‘nested_a’ to environment
[13:23:57.874]  - Condition #43: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:57.861] - copied ‘a’ to environment
[13:23:57.875]  - Condition #44: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:57.862] - copied ‘plan_a’ to environment
[13:23:57.875]  - Condition #45: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:57.862] assign_globals() ... done
[13:23:57.875]  - Condition #46: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:57.862] plan(): Setting new future strategy stack:
[13:23:57.875]  - Condition #47: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:57.862] List of future strategies:
[13:23:57.862] 1. sequential:
[13:23:57.862]    - args: function (..., envir = parent.frame())
[13:23:57.862]    - tweaked: FALSE
[13:23:57.862]    - call: NULL
[13:23:57.875]  - Condition #48: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:57.862] plan(): nbrOfWorkers() = 1
[13:23:57.875]  - Condition #49: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:57.864] plan(): Setting new future strategy stack:
[13:23:57.875]  - Condition #50: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:57.864] List of future strategies:
[13:23:57.864] 1. sequential:
[13:23:57.864]    - args: function (..., envir = parent.frame())
[13:23:57.864]    - tweaked: FALSE
[13:23:57.864]    - call: plan(list(a = strategy1, b = strategy2))
[13:23:57.876]  - Condition #51: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:57.864] plan(): nbrOfWorkers() = 1
[13:23:57.876]  - Condition #52: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:57.864] SequentialFuture started (and completed)
[13:23:57.876]  - Condition #53: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:57.865] - Launch lazy future ... done
[13:23:57.876]  - Condition #54: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:57.865] run() for ‘SequentialFuture’ ... done
[13:23:57.876] signalConditions() ... done
List of 6
 $ a       : int 1
 $ nested_a:List of 1
  ..$ b:function (..., envir = parent.frame())  
  .. ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
  .. ..- attr(*, "call")= language plan(list(a = strategy1, b = strategy2))
 $ plan_a  :List of 1
  ..$ b:function (..., envir = parent.frame())  
  .. ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
  .. ..- attr(*, "call")= language plan(list(a = strategy1, b = strategy2))
 $ b       : int 2
 $ nested_b: Named list()
 $ plan_b  :List of 1
  ..$ :function (..., envir = parent.frame())  
  .. ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
  ..- attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[13:23:57.881] getGlobalsAndPackages() ...
[13:23:57.881] Searching for globals...
[13:23:57.884] - globals found: [7] ‘{’, ‘value’, ‘future’, ‘subset’, ‘data’, ‘==’, ‘a’
[13:23:57.884] Searching for globals ... DONE
[13:23:57.884] Resolving globals: FALSE
[13:23:57.885] The total size of the 1 globals is 128 bytes (128 bytes)
[13:23:57.885] The total size of the 1 globals exported for future expression (‘{; value(future(subset(data, a == 2))); }’) is 128 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘data’ (128 bytes of class ‘list’)
[13:23:57.886] - globals: [1] ‘data’
[13:23:57.886] - packages: [1] ‘future’
[13:23:57.886] getGlobalsAndPackages() ... DONE
[13:23:57.886] run() for ‘Future’ ...
[13:23:57.886] - state: ‘created’
[13:23:57.886] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[13:23:57.887] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[13:23:57.887] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[13:23:57.887]   - Field: ‘label’
[13:23:57.887]   - Field: ‘local’
[13:23:57.887]   - Field: ‘owner’
[13:23:57.887]   - Field: ‘envir’
[13:23:57.887]   - Field: ‘packages’
[13:23:57.887]   - Field: ‘gc’
[13:23:57.887]   - Field: ‘conditions’
[13:23:57.887]   - Field: ‘expr’
[13:23:57.888]   - Field: ‘uuid’
[13:23:57.888]   - Field: ‘seed’
[13:23:57.888]   - Field: ‘version’
[13:23:57.888]   - Field: ‘result’
[13:23:57.888]   - Field: ‘asynchronous’
[13:23:57.888]   - Field: ‘calls’
[13:23:57.888]   - Field: ‘globals’
[13:23:57.888]   - Field: ‘stdout’
[13:23:57.888]   - Field: ‘earlySignal’
[13:23:57.888]   - Field: ‘lazy’
[13:23:57.889]   - Field: ‘state’
[13:23:57.889] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[13:23:57.889] - Launch lazy future ...
[13:23:57.889] Packages needed by the future expression (n = 1): ‘future’
[13:23:57.889] Packages needed by future strategies (n = 1): ‘future’
[13:23:57.890] {
[13:23:57.890]     {
[13:23:57.890]         {
[13:23:57.890]             ...future.startTime <- base::Sys.time()
[13:23:57.890]             {
[13:23:57.890]                 {
[13:23:57.890]                   {
[13:23:57.890]                     {
[13:23:57.890]                       base::local({
[13:23:57.890]                         has_future <- base::requireNamespace("future", 
[13:23:57.890]                           quietly = TRUE)
[13:23:57.890]                         if (has_future) {
[13:23:57.890]                           ns <- base::getNamespace("future")
[13:23:57.890]                           version <- ns[[".package"]][["version"]]
[13:23:57.890]                           if (is.null(version)) 
[13:23:57.890]                             version <- utils::packageVersion("future")
[13:23:57.890]                         }
[13:23:57.890]                         else {
[13:23:57.890]                           version <- NULL
[13:23:57.890]                         }
[13:23:57.890]                         if (!has_future || version < "1.8.0") {
[13:23:57.890]                           info <- base::c(r_version = base::gsub("R version ", 
[13:23:57.890]                             "", base::R.version$version.string), 
[13:23:57.890]                             platform = base::sprintf("%s (%s-bit)", 
[13:23:57.890]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:23:57.890]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:23:57.890]                               "release", "version")], collapse = " "), 
[13:23:57.890]                             hostname = base::Sys.info()[["nodename"]])
[13:23:57.890]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:23:57.890]                             info)
[13:23:57.890]                           info <- base::paste(info, collapse = "; ")
[13:23:57.890]                           if (!has_future) {
[13:23:57.890]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:23:57.890]                               info)
[13:23:57.890]                           }
[13:23:57.890]                           else {
[13:23:57.890]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:23:57.890]                               info, version)
[13:23:57.890]                           }
[13:23:57.890]                           base::stop(msg)
[13:23:57.890]                         }
[13:23:57.890]                       })
[13:23:57.890]                     }
[13:23:57.890]                     base::local({
[13:23:57.890]                       for (pkg in "future") {
[13:23:57.890]                         base::loadNamespace(pkg)
[13:23:57.890]                         base::library(pkg, character.only = TRUE)
[13:23:57.890]                       }
[13:23:57.890]                     })
[13:23:57.890]                   }
[13:23:57.890]                   options(future.plan = NULL)
[13:23:57.890]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:23:57.890]                   future::plan(list(b = function (..., envir = parent.frame()) 
[13:23:57.890]                   {
[13:23:57.890]                     future <- SequentialFuture(..., envir = envir)
[13:23:57.890]                     if (!future$lazy) 
[13:23:57.890]                       future <- run(future)
[13:23:57.890]                     invisible(future)
[13:23:57.890]                   }), .cleanup = FALSE, .init = FALSE)
[13:23:57.890]                 }
[13:23:57.890]                 ...future.workdir <- getwd()
[13:23:57.890]             }
[13:23:57.890]             ...future.oldOptions <- base::as.list(base::.Options)
[13:23:57.890]             ...future.oldEnvVars <- base::Sys.getenv()
[13:23:57.890]         }
[13:23:57.890]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:23:57.890]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:23:57.890]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:23:57.890]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:23:57.890]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:23:57.890]             future.stdout.windows.reencode = NULL, width = 80L)
[13:23:57.890]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:23:57.890]             base::names(...future.oldOptions))
[13:23:57.890]     }
[13:23:57.890]     if (FALSE) {
[13:23:57.890]     }
[13:23:57.890]     else {
[13:23:57.890]         if (TRUE) {
[13:23:57.890]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:23:57.890]                 open = "w")
[13:23:57.890]         }
[13:23:57.890]         else {
[13:23:57.890]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:23:57.890]                 windows = "NUL", "/dev/null"), open = "w")
[13:23:57.890]         }
[13:23:57.890]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:23:57.890]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:23:57.890]             base::sink(type = "output", split = FALSE)
[13:23:57.890]             base::close(...future.stdout)
[13:23:57.890]         }, add = TRUE)
[13:23:57.890]     }
[13:23:57.890]     ...future.frame <- base::sys.nframe()
[13:23:57.890]     ...future.conditions <- base::list()
[13:23:57.890]     ...future.rng <- base::globalenv()$.Random.seed
[13:23:57.890]     if (FALSE) {
[13:23:57.890]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:23:57.890]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:23:57.890]     }
[13:23:57.890]     ...future.result <- base::tryCatch({
[13:23:57.890]         base::withCallingHandlers({
[13:23:57.890]             ...future.value <- base::withVisible(base::local({
[13:23:57.890]                 value(future(subset(data, a == 2)))
[13:23:57.890]             }))
[13:23:57.890]             future::FutureResult(value = ...future.value$value, 
[13:23:57.890]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:23:57.890]                   ...future.rng), globalenv = if (FALSE) 
[13:23:57.890]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:23:57.890]                     ...future.globalenv.names))
[13:23:57.890]                 else NULL, started = ...future.startTime, version = "1.8")
[13:23:57.890]         }, condition = base::local({
[13:23:57.890]             c <- base::c
[13:23:57.890]             inherits <- base::inherits
[13:23:57.890]             invokeRestart <- base::invokeRestart
[13:23:57.890]             length <- base::length
[13:23:57.890]             list <- base::list
[13:23:57.890]             seq.int <- base::seq.int
[13:23:57.890]             signalCondition <- base::signalCondition
[13:23:57.890]             sys.calls <- base::sys.calls
[13:23:57.890]             `[[` <- base::`[[`
[13:23:57.890]             `+` <- base::`+`
[13:23:57.890]             `<<-` <- base::`<<-`
[13:23:57.890]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:23:57.890]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:23:57.890]                   3L)]
[13:23:57.890]             }
[13:23:57.890]             function(cond) {
[13:23:57.890]                 is_error <- inherits(cond, "error")
[13:23:57.890]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:23:57.890]                   NULL)
[13:23:57.890]                 if (is_error) {
[13:23:57.890]                   sessionInformation <- function() {
[13:23:57.890]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:23:57.890]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:23:57.890]                       search = base::search(), system = base::Sys.info())
[13:23:57.890]                   }
[13:23:57.890]                   ...future.conditions[[length(...future.conditions) + 
[13:23:57.890]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:23:57.890]                     cond$call), session = sessionInformation(), 
[13:23:57.890]                     timestamp = base::Sys.time(), signaled = 0L)
[13:23:57.890]                   signalCondition(cond)
[13:23:57.890]                 }
[13:23:57.890]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:23:57.890]                 "immediateCondition"))) {
[13:23:57.890]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:23:57.890]                   ...future.conditions[[length(...future.conditions) + 
[13:23:57.890]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:23:57.890]                   if (TRUE && !signal) {
[13:23:57.890]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:23:57.890]                     {
[13:23:57.890]                       inherits <- base::inherits
[13:23:57.890]                       invokeRestart <- base::invokeRestart
[13:23:57.890]                       is.null <- base::is.null
[13:23:57.890]                       muffled <- FALSE
[13:23:57.890]                       if (inherits(cond, "message")) {
[13:23:57.890]                         muffled <- grepl(pattern, "muffleMessage")
[13:23:57.890]                         if (muffled) 
[13:23:57.890]                           invokeRestart("muffleMessage")
[13:23:57.890]                       }
[13:23:57.890]                       else if (inherits(cond, "warning")) {
[13:23:57.890]                         muffled <- grepl(pattern, "muffleWarning")
[13:23:57.890]                         if (muffled) 
[13:23:57.890]                           invokeRestart("muffleWarning")
[13:23:57.890]                       }
[13:23:57.890]                       else if (inherits(cond, "condition")) {
[13:23:57.890]                         if (!is.null(pattern)) {
[13:23:57.890]                           computeRestarts <- base::computeRestarts
[13:23:57.890]                           grepl <- base::grepl
[13:23:57.890]                           restarts <- computeRestarts(cond)
[13:23:57.890]                           for (restart in restarts) {
[13:23:57.890]                             name <- restart$name
[13:23:57.890]                             if (is.null(name)) 
[13:23:57.890]                               next
[13:23:57.890]                             if (!grepl(pattern, name)) 
[13:23:57.890]                               next
[13:23:57.890]                             invokeRestart(restart)
[13:23:57.890]                             muffled <- TRUE
[13:23:57.890]                             break
[13:23:57.890]                           }
[13:23:57.890]                         }
[13:23:57.890]                       }
[13:23:57.890]                       invisible(muffled)
[13:23:57.890]                     }
[13:23:57.890]                     muffleCondition(cond, pattern = "^muffle")
[13:23:57.890]                   }
[13:23:57.890]                 }
[13:23:57.890]                 else {
[13:23:57.890]                   if (TRUE) {
[13:23:57.890]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:23:57.890]                     {
[13:23:57.890]                       inherits <- base::inherits
[13:23:57.890]                       invokeRestart <- base::invokeRestart
[13:23:57.890]                       is.null <- base::is.null
[13:23:57.890]                       muffled <- FALSE
[13:23:57.890]                       if (inherits(cond, "message")) {
[13:23:57.890]                         muffled <- grepl(pattern, "muffleMessage")
[13:23:57.890]                         if (muffled) 
[13:23:57.890]                           invokeRestart("muffleMessage")
[13:23:57.890]                       }
[13:23:57.890]                       else if (inherits(cond, "warning")) {
[13:23:57.890]                         muffled <- grepl(pattern, "muffleWarning")
[13:23:57.890]                         if (muffled) 
[13:23:57.890]                           invokeRestart("muffleWarning")
[13:23:57.890]                       }
[13:23:57.890]                       else if (inherits(cond, "condition")) {
[13:23:57.890]                         if (!is.null(pattern)) {
[13:23:57.890]                           computeRestarts <- base::computeRestarts
[13:23:57.890]                           grepl <- base::grepl
[13:23:57.890]                           restarts <- computeRestarts(cond)
[13:23:57.890]                           for (restart in restarts) {
[13:23:57.890]                             name <- restart$name
[13:23:57.890]                             if (is.null(name)) 
[13:23:57.890]                               next
[13:23:57.890]                             if (!grepl(pattern, name)) 
[13:23:57.890]                               next
[13:23:57.890]                             invokeRestart(restart)
[13:23:57.890]                             muffled <- TRUE
[13:23:57.890]                             break
[13:23:57.890]                           }
[13:23:57.890]                         }
[13:23:57.890]                       }
[13:23:57.890]                       invisible(muffled)
[13:23:57.890]                     }
[13:23:57.890]                     muffleCondition(cond, pattern = "^muffle")
[13:23:57.890]                   }
[13:23:57.890]                 }
[13:23:57.890]             }
[13:23:57.890]         }))
[13:23:57.890]     }, error = function(ex) {
[13:23:57.890]         base::structure(base::list(value = NULL, visible = NULL, 
[13:23:57.890]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:23:57.890]                 ...future.rng), started = ...future.startTime, 
[13:23:57.890]             finished = Sys.time(), session_uuid = NA_character_, 
[13:23:57.890]             version = "1.8"), class = "FutureResult")
[13:23:57.890]     }, finally = {
[13:23:57.890]         if (!identical(...future.workdir, getwd())) 
[13:23:57.890]             setwd(...future.workdir)
[13:23:57.890]         {
[13:23:57.890]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:23:57.890]                 ...future.oldOptions$nwarnings <- NULL
[13:23:57.890]             }
[13:23:57.890]             base::options(...future.oldOptions)
[13:23:57.890]             if (.Platform$OS.type == "windows") {
[13:23:57.890]                 old_names <- names(...future.oldEnvVars)
[13:23:57.890]                 envs <- base::Sys.getenv()
[13:23:57.890]                 names <- names(envs)
[13:23:57.890]                 common <- intersect(names, old_names)
[13:23:57.890]                 added <- setdiff(names, old_names)
[13:23:57.890]                 removed <- setdiff(old_names, names)
[13:23:57.890]                 changed <- common[...future.oldEnvVars[common] != 
[13:23:57.890]                   envs[common]]
[13:23:57.890]                 NAMES <- toupper(changed)
[13:23:57.890]                 args <- list()
[13:23:57.890]                 for (kk in seq_along(NAMES)) {
[13:23:57.890]                   name <- changed[[kk]]
[13:23:57.890]                   NAME <- NAMES[[kk]]
[13:23:57.890]                   if (name != NAME && is.element(NAME, old_names)) 
[13:23:57.890]                     next
[13:23:57.890]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:23:57.890]                 }
[13:23:57.890]                 NAMES <- toupper(added)
[13:23:57.890]                 for (kk in seq_along(NAMES)) {
[13:23:57.890]                   name <- added[[kk]]
[13:23:57.890]                   NAME <- NAMES[[kk]]
[13:23:57.890]                   if (name != NAME && is.element(NAME, old_names)) 
[13:23:57.890]                     next
[13:23:57.890]                   args[[name]] <- ""
[13:23:57.890]                 }
[13:23:57.890]                 NAMES <- toupper(removed)
[13:23:57.890]                 for (kk in seq_along(NAMES)) {
[13:23:57.890]                   name <- removed[[kk]]
[13:23:57.890]                   NAME <- NAMES[[kk]]
[13:23:57.890]                   if (name != NAME && is.element(NAME, old_names)) 
[13:23:57.890]                     next
[13:23:57.890]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:23:57.890]                 }
[13:23:57.890]                 if (length(args) > 0) 
[13:23:57.890]                   base::do.call(base::Sys.setenv, args = args)
[13:23:57.890]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:23:57.890]             }
[13:23:57.890]             else {
[13:23:57.890]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:23:57.890]             }
[13:23:57.890]             {
[13:23:57.890]                 if (base::length(...future.futureOptionsAdded) > 
[13:23:57.890]                   0L) {
[13:23:57.890]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:23:57.890]                   base::names(opts) <- ...future.futureOptionsAdded
[13:23:57.890]                   base::options(opts)
[13:23:57.890]                 }
[13:23:57.890]                 {
[13:23:57.890]                   {
[13:23:57.890]                     NULL
[13:23:57.890]                     RNGkind("Mersenne-Twister")
[13:23:57.890]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[13:23:57.890]                       inherits = FALSE)
[13:23:57.890]                   }
[13:23:57.890]                   options(future.plan = NULL)
[13:23:57.890]                   if (is.na(NA_character_)) 
[13:23:57.890]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:23:57.890]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:23:57.890]                   future::plan(list(a = function (..., envir = parent.frame()) 
[13:23:57.890]                   {
[13:23:57.890]                     future <- SequentialFuture(..., envir = envir)
[13:23:57.890]                     if (!future$lazy) 
[13:23:57.890]                       future <- run(future)
[13:23:57.890]                     invisible(future)
[13:23:57.890]                   }, b = function (..., envir = parent.frame()) 
[13:23:57.890]                   {
[13:23:57.890]                     future <- SequentialFuture(..., envir = envir)
[13:23:57.890]                     if (!future$lazy) 
[13:23:57.890]                       future <- run(future)
[13:23:57.890]                     invisible(future)
[13:23:57.890]                   }), .cleanup = FALSE, .init = FALSE)
[13:23:57.890]                 }
[13:23:57.890]             }
[13:23:57.890]         }
[13:23:57.890]     })
[13:23:57.890]     if (TRUE) {
[13:23:57.890]         base::sink(type = "output", split = FALSE)
[13:23:57.890]         if (TRUE) {
[13:23:57.890]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:23:57.890]         }
[13:23:57.890]         else {
[13:23:57.890]             ...future.result["stdout"] <- base::list(NULL)
[13:23:57.890]         }
[13:23:57.890]         base::close(...future.stdout)
[13:23:57.890]         ...future.stdout <- NULL
[13:23:57.890]     }
[13:23:57.890]     ...future.result$conditions <- ...future.conditions
[13:23:57.890]     ...future.result$finished <- base::Sys.time()
[13:23:57.890]     ...future.result
[13:23:57.890] }
[13:23:57.891] assign_globals() ...
[13:23:57.891] List of 1
[13:23:57.891]  $ data:'data.frame':	3 obs. of  2 variables:
[13:23:57.891]   ..$ a: int [1:3] 1 2 3
[13:23:57.891]   ..$ b: int [1:3] 3 2 1
[13:23:57.891]  - attr(*, "where")=List of 1
[13:23:57.891]   ..$ data:<environment: R_EmptyEnv> 
[13:23:57.891]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[13:23:57.891]  - attr(*, "resolved")= logi FALSE
[13:23:57.891]  - attr(*, "total_size")= num 128
[13:23:57.891]  - attr(*, "already-done")= logi TRUE
[13:23:57.895] - copied ‘data’ to environment
[13:23:57.895] assign_globals() ... done
[13:23:57.895] plan(): Setting new future strategy stack:
[13:23:57.895] List of future strategies:
[13:23:57.895] 1. sequential:
[13:23:57.895]    - args: function (..., envir = parent.frame())
[13:23:57.895]    - tweaked: FALSE
[13:23:57.895]    - call: plan(list(a = strategy1, b = strategy2))
[13:23:57.896] plan(): nbrOfWorkers() = 1
[13:23:57.925] plan(): Setting new future strategy stack:
[13:23:57.925] List of future strategies:
[13:23:57.925] 1. sequential:
[13:23:57.925]    - args: function (..., envir = parent.frame())
[13:23:57.925]    - tweaked: FALSE
[13:23:57.925]    - call: plan(list(a = strategy1, b = strategy2))
[13:23:57.925] 2. sequential:
[13:23:57.925]    - args: function (..., envir = parent.frame())
[13:23:57.925]    - tweaked: FALSE
[13:23:57.925]    - call: plan(list(a = strategy1, b = strategy2))
[13:23:57.925] plan(): nbrOfWorkers() = 1
[13:23:57.925] SequentialFuture started (and completed)
[13:23:57.925] signalConditions() ...
[13:23:57.926]  - include = ‘immediateCondition’
[13:23:57.926]  - exclude = 
[13:23:57.926]  - resignal = FALSE
[13:23:57.926]  - Number of conditions: 52
[13:23:57.926] signalConditions() ... done
[13:23:57.926] - Launch lazy future ... done
[13:23:57.926] run() for ‘SequentialFuture’ ... done
[13:23:57.926] signalConditions() ...
[13:23:57.926]  - include = ‘immediateCondition’
[13:23:57.926]  - exclude = 
[13:23:57.927]  - resignal = FALSE
[13:23:57.927]  - Number of conditions: 52
[13:23:57.927] signalConditions() ... done
[13:23:57.927] Future state: ‘finished’
[13:23:57.927] signalConditions() ...
[13:23:57.927]  - include = ‘condition’
[13:23:57.927]  - exclude = ‘immediateCondition’
[13:23:57.927]  - resignal = TRUE
[13:23:57.927]  - Number of conditions: 52
[13:23:57.927]  - Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:57.896] getGlobalsAndPackages() ...
[13:23:57.928]  - Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:57.896] Searching for globals...
[13:23:57.928]  - Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:57.911] - globals found: [4] ‘subset’, ‘data’, ‘==’, ‘a’
[13:23:57.928]  - Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:57.911] Searching for globals ... DONE
[13:23:57.928]  - Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:57.911] Resolving globals: FALSE
[13:23:57.928]  - Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:57.912] The total size of the 1 globals is 128 bytes (128 bytes)
[13:23:57.928]  - Condition #7: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:57.912] The total size of the 1 globals exported for future expression (‘subset(data, a == 2)’) is 128 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘data’ (128 bytes of class ‘list’)
[13:23:57.928]  - Condition #8: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:57.912] - globals: [1] ‘data’
[13:23:57.929]  - Condition #9: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:57.912] 
[13:23:57.930]  - Condition #10: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:57.913] getGlobalsAndPackages() ... DONE
[13:23:57.930]  - Condition #11: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:57.913] run() for ‘Future’ ...
[13:23:57.931]  - Condition #12: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:57.913] - state: ‘created’
[13:23:57.931]  - Condition #13: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:57.913] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[13:23:57.931]  - Condition #14: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:57.913] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[13:23:57.931]  - Condition #15: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:57.913] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[13:23:57.931]  - Condition #16: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:57.914]   - Field: ‘label’
[13:23:57.931]  - Condition #17: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:57.914]   - Field: ‘local’
[13:23:57.931]  - Condition #18: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:57.914]   - Field: ‘owner’
[13:23:57.932]  - Condition #19: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:57.914]   - Field: ‘envir’
[13:23:57.932]  - Condition #20: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:57.914]   - Field: ‘packages’
[13:23:57.932]  - Condition #21: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:57.914]   - Field: ‘gc’
[13:23:57.932]  - Condition #22: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:57.914]   - Field: ‘conditions’
[13:23:57.932]  - Condition #23: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:57.914]   - Field: ‘expr’
[13:23:57.932]  - Condition #24: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:57.914]   - Field: ‘uuid’
[13:23:57.932]  - Condition #25: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:57.915]   - Field: ‘seed’
[13:23:57.933]  - Condition #26: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:57.915]   - Field: ‘version’
[13:23:57.933]  - Condition #27: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:57.915]   - Field: ‘result’
[13:23:57.933]  - Condition #28: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:57.915]   - Field: ‘asynchronous’
[13:23:57.933]  - Condition #29: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:57.915]   - Field: ‘calls’
[13:23:57.933]  - Condition #30: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:57.915]   - Field: ‘globals’
[13:23:57.933]  - Condition #31: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:57.915]   - Field: ‘stdout’
[13:23:57.933]  - Condition #32: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:57.915]   - Field: ‘earlySignal’
[13:23:57.933]  - Condition #33: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:57.915]   - Field: ‘lazy’
[13:23:57.934]  - Condition #34: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:57.915]   - Field: ‘state’
[13:23:57.934]  - Condition #35: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:57.916] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[13:23:57.934]  - Condition #36: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:57.916] - Launch lazy future ...
[13:23:57.934]  - Condition #37: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:57.916] Packages needed by the future expression (n = 0): <none>
[13:23:57.934]  - Condition #38: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:57.916] Packages needed by future strategies (n = 0): <none>
[13:23:57.934]  - Condition #39: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:57.917] {
[13:23:57.917]     {
[13:23:57.917]         {
[13:23:57.917]             ...future.startTime <- base::Sys.time()
[13:23:57.917]             {
[13:23:57.917]                 {
[13:23:57.917]                   {
[13:23:57.917]                     base::local({
[13:23:57.917]                       has_future <- base::requireNamespace("future", 
[13:23:57.917]                         quietly = TRUE)
[13:23:57.917]                       if (has_future) {
[13:23:57.917]                         ns <- base::getNamespace("future")
[13:23:57.917]                         version <- ns[[".package"]][["version"]]
[13:23:57.917]                         if (is.null(version)) 
[13:23:57.917]                           version <- utils::packageVersion("future")
[13:23:57.917]                       }
[13:23:57.917]                       else {
[13:23:57.917]                         version <- NULL
[13:23:57.917]                       }
[13:23:57.917]                       if (!has_future || version < "1.8.0") {
[13:23:57.917]                         info <- base::c(r_version = base::gsub("R version ", 
[13:23:57.917]                           "", base::R.version$version.string), 
[13:23:57.917]                           platform = base::sprintf("%s (%s-bit)", 
[13:23:57.917]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:23:57.917]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[13:23:57.917]                             "release", "version")], collapse = " "), 
[13:23:57.917]                           hostname = base::Sys.info()[["nodename"]])
[13:23:57.917]                         info <- base::sprintf("%s: %s", base::names(info), 
[13:23:57.917]                           info)
[13:23:57.917]                         info <- base::paste(info, collapse = "; ")
[13:23:57.917]                         if (!has_future) {
[13:23:57.917]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:23:57.917]                             info)
[13:23:57.917]                         }
[13:23:57.917]                         else {
[13:23:57.917]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:23:57.917]                             info, version)
[13:23:57.917]                         }
[13:23:57.917]                         base::stop(msg)
[13:23:57.917]                       }
[13:23:57.917]                     })
[13:23:57.917]                   }
[13:23:57.917]                   options(future.plan = NULL)
[13:23:57.917]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:23:57.917]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:23:57.917]                 }
[13:23:57.917]                 ...future.workdir <- getwd()
[13:23:57.917]             }
[13:23:57.917]             ...future.oldOptions <- base::as.list(base::.Options)
[13:23:57.917]             ...future.oldEnvVars <- base::Sys.getenv()
[13:23:57.917]         }
[13:23:57.917]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:23:57.917]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:23:57.917]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:23:57.917]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:23:57.917]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:23:57.917]             future.stdout.windows.reencode = NULL, width = 80L)
[13:23:57.917]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:23:57.917]             base::names(...future.oldOptions))
[13:23:57.917]     }
[13:23:57.917]     if (FALSE) {
[13:23:57.917]     }
[13:23:57.917]     else {
[13:23:57.917]         if (TRUE) {
[13:23:57.917]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:23:57.917]                 open = "w")
[13:23:57.917]         }
[13:23:57.917]         else {
[13:23:57.917]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:23:57.917]                 windows = "NUL", "/dev/null"), open = "w")
[13:23:57.917]         }
[13:23:57.917]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:23:57.917]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:23:57.917]             base::sink(type = "output", split = FALSE)
[13:23:57.917]             base::close(...future.stdout)
[13:23:57.917]         }, add = TRUE)
[13:23:57.917]     }
[13:23:57.917]     ...future.frame <- base::sys.nframe()
[13:23:57.917]     ...future.conditions <- base::list()
[13:23:57.917]     ...future.rng <- base::globalenv()$.Random.seed
[13:23:57.917]     if (FALSE) {
[13:23:57.917]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:23:57.917]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:23:57.917]     }
[13:23:57.917]     ...future.result <- base::tryCatch({
[13:23:57.917]         base::withCallingHandlers({
[13:23:57.917]             ...future.value <- base::withVisible(base::local(subset(data, 
[13:23:57.917]                 a == 2)))
[13:23:57.917]             future::FutureResult(value = ...future.value$value, 
[13:23:57.917]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:23:57.917]                   ...future.rng), globalenv = if (FALSE) 
[13:23:57.917]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:23:57.917]                     ...future.globalenv.names))
[13:23:57.917]                 else NULL, started = ...future.startTime, version = "1.8")
[13:23:57.917]         }, condition = base::local({
[13:23:57.917]             c <- base::c
[13:23:57.917]             inherits <- base::inherits
[13:23:57.917]             invokeRestart <- base::invokeRestart
[13:23:57.917]             length <- base::length
[13:23:57.917]             list <- base::list
[13:23:57.917]             seq.int <- base::seq.int
[13:23:57.917]             signalCondition <- base::signalCondition
[13:23:57.917]             sys.calls <- base::sys.calls
[13:23:57.917]             `[[` <- base::`[[`
[13:23:57.917]             `+` <- base::`+`
[13:23:57.917]             `<<-` <- base::`<<-`
[13:23:57.917]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:23:57.917]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:23:57.917]                   3L)]
[13:23:57.917]             }
[13:23:57.917]             function(cond) {
[13:23:57.917]                 is_error <- inherits(cond, "error")
[13:23:57.917]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:23:57.917]                   NULL)
[13:23:57.917]                 if (is_error) {
[13:23:57.917]                   sessionInformation <- function() {
[13:23:57.917]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:23:57.917]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:23:57.917]                       search = base::search(), system = base::Sys.info())
[13:23:57.917]                   }
[13:23:57.917]                   ...future.conditions[[length(...future.conditions) + 
[13:23:57.917]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:23:57.917]                     cond$call), session = sessionInformation(), 
[13:23:57.917]                     timestamp = base::Sys.time(), signaled = 0L)
[13:23:57.917]                   signalCondition(cond)
[13:23:57.917]                 }
[13:23:57.917]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:23:57.917]                 "immediateCondition"))) {
[13:23:57.917]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:23:57.917]                   ...future.conditions[[length(...future.conditions) + 
[13:23:57.917]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:23:57.917]                   if (TRUE && !signal) {
[13:23:57.917]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:23:57.917]                     {
[13:23:57.917]                       inherits <- base::inherits
[13:23:57.917]                       invokeRestart <- base::invokeRestart
[13:23:57.917]                       is.null <- base::is.null
[13:23:57.917]                       muffled <- FALSE
[13:23:57.917]                       if (inherits(cond, "message")) {
[13:23:57.917]                         muffled <- grepl(pattern, "muffleMessage")
[13:23:57.917]                         if (muffled) 
[13:23:57.917]                           invokeRestart("muffleMessage")
[13:23:57.917]                       }
[13:23:57.917]                       else if (inherits(cond, "warning")) {
[13:23:57.917]                         muffled <- grepl(pattern, "muffleWarning")
[13:23:57.917]                         if (muffled) 
[13:23:57.917]                           invokeRestart("muffleWarning")
[13:23:57.917]                       }
[13:23:57.917]                       else if (inherits(cond, "condition")) {
[13:23:57.917]                         if (!is.null(pattern)) {
[13:23:57.917]                           computeRestarts <- base::computeRestarts
[13:23:57.917]                           grepl <- base::grepl
[13:23:57.917]                           restarts <- computeRestarts(cond)
[13:23:57.917]                           for (restart in restarts) {
[13:23:57.917]                             name <- restart$name
[13:23:57.917]                             if (is.null(name)) 
[13:23:57.917]                               next
[13:23:57.917]                             if (!grepl(pattern, name)) 
[13:23:57.917]                               next
[13:23:57.917]                             invokeRestart(restart)
[13:23:57.917]                             muffled <- TRUE
[13:23:57.917]                             break
[13:23:57.917]                           }
[13:23:57.917]                         }
[13:23:57.917]                       }
[13:23:57.917]                       invisible(muffled)
[13:23:57.917]                     }
[13:23:57.917]                     muffleCondition(cond, pattern = "^muffle")
[13:23:57.917]                   }
[13:23:57.917]                 }
[13:23:57.917]                 else {
[13:23:57.917]                   if (TRUE) {
[13:23:57.917]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:23:57.917]                     {
[13:23:57.917]                       inherits <- base::inherits
[13:23:57.917]                       invokeRestart <- base::invokeRestart
[13:23:57.917]                       is.null <- base::is.null
[13:23:57.917]                       muffled <- FALSE
[13:23:57.917]                       if (inherits(cond, "message")) {
[13:23:57.917]                         muffled <- grepl(pattern, "muffleMessage")
[13:23:57.917]                         if (muffled) 
[13:23:57.917]                           invokeRestart("muffleMessage")
[13:23:57.917]                       }
[13:23:57.917]                       else if (inherits(cond, "warning")) {
[13:23:57.917]                         muffled <- grepl(pattern, "muffleWarning")
[13:23:57.917]                         if (muffled) 
[13:23:57.917]                           invokeRestart("muffleWarning")
[13:23:57.917]                       }
[13:23:57.917]                       else if (inherits(cond, "condition")) {
[13:23:57.917]                         if (!is.null(pattern)) {
[13:23:57.917]                           computeRestarts <- base::computeRestarts
[13:23:57.917]                           grepl <- base::grepl
[13:23:57.917]                           restarts <- computeRestarts(cond)
[13:23:57.917]                           for (restart in restarts) {
[13:23:57.917]                             name <- restart$name
[13:23:57.917]                             if (is.null(name)) 
[13:23:57.917]                               next
[13:23:57.917]                             if (!grepl(pattern, name)) 
[13:23:57.917]                               next
[13:23:57.917]                             invokeRestart(restart)
[13:23:57.917]                             muffled <- TRUE
[13:23:57.917]                             break
[13:23:57.917]                           }
[13:23:57.917]                         }
[13:23:57.917]                       }
[13:23:57.917]                       invisible(muffled)
[13:23:57.917]                     }
[13:23:57.917]                     muffleCondition(cond, pattern = "^muffle")
[13:23:57.917]                   }
[13:23:57.917]                 }
[13:23:57.917]             }
[13:23:57.917]         }))
[13:23:57.917]     }, error = function(ex) {
[13:23:57.917]         base::structure(base::list(value = NULL, visible = NULL, 
[13:23:57.917]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:23:57.917]                 ...future.rng), started = ...future.startTime, 
[13:23:57.917]             finished = Sys.time(), session_uuid = NA_character_, 
[13:23:57.917]             version = "1.8"), class = "FutureResult")
[13:23:57.917]     }, finally = {
[13:23:57.917]         if (!identical(...future.workdir, getwd())) 
[13:23:57.917]             setwd(...future.workdir)
[13:23:57.917]         {
[13:23:57.917]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:23:57.917]                 ...future.oldOptions$nwarnings <- NULL
[13:23:57.917]             }
[13:23:57.917]             base::options(...future.oldOptions)
[13:23:57.917]             if (.Platform$OS.type == "windows") {
[13:23:57.917]                 old_names <- names(...future.oldEnvVars)
[13:23:57.917]                 envs <- base::Sys.getenv()
[13:23:57.917]                 names <- names(envs)
[13:23:57.917]                 common <- intersect(names, old_names)
[13:23:57.917]                 added <- setdiff(names, old_names)
[13:23:57.917]                 removed <- setdiff(old_names, names)
[13:23:57.917]                 changed <- common[...future.oldEnvVars[common] != 
[13:23:57.917]                   envs[common]]
[13:23:57.917]                 NAMES <- toupper(changed)
[13:23:57.917]                 args <- list()
[13:23:57.917]                 for (kk in seq_along(NAMES)) {
[13:23:57.917]                   name <- changed[[kk]]
[13:23:57.917]                   NAME <- NAMES[[kk]]
[13:23:57.917]                   if (name != NAME && is.element(NAME, old_names)) 
[13:23:57.917]                     next
[13:23:57.917]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:23:57.917]                 }
[13:23:57.917]                 NAMES <- toupper(added)
[13:23:57.917]                 for (kk in seq_along(NAMES)) {
[13:23:57.917]                   name <- added[[kk]]
[13:23:57.917]                   NAME <- NAMES[[kk]]
[13:23:57.917]                   if (name != NAME && is.element(NAME, old_names)) 
[13:23:57.917]                     next
[13:23:57.917]                   args[[name]] <- ""
[13:23:57.917]                 }
[13:23:57.917]                 NAMES <- toupper(removed)
[13:23:57.917]                 for (kk in seq_along(NAMES)) {
[13:23:57.917]                   name <- removed[[kk]]
[13:23:57.917]                   NAME <- NAMES[[kk]]
[13:23:57.917]                   if (name != NAME && is.element(NAME, old_names)) 
[13:23:57.917]                     next
[13:23:57.917]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:23:57.917]                 }
[13:23:57.917]                 if (length(args) > 0) 
[13:23:57.917]                   base::do.call(base::Sys.setenv, args = args)
[13:23:57.917]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:23:57.917]             }
[13:23:57.917]             else {
[13:23:57.917]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:23:57.917]             }
[13:23:57.917]             {
[13:23:57.917]                 if (base::length(...future.futureOptionsAdded) > 
[13:23:57.917]                   0L) {
[13:23:57.917]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:23:57.917]                   base::names(opts) <- ...future.futureOptionsAdded
[13:23:57.917]                   base::options(opts)
[13:23:57.917]                 }
[13:23:57.917]                 {
[13:23:57.917]                   {
[13:23:57.917]                     NULL
[13:23:57.917]                     RNGkind("Mersenne-Twister")
[13:23:57.917]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[13:23:57.917]                       inherits = FALSE)
[13:23:57.917]                   }
[13:23:57.917]                   options(future.plan = NULL)
[13:23:57.917]                   if (is.na(NA_character_)) 
[13:23:57.917]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:23:57.917]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:23:57.917]                   future::plan(list(b = function (..., envir = parent.frame()) 
[13:23:57.917]                   {
[13:23:57.917]                     future <- SequentialFuture(..., envir = envir)
[13:23:57.917]                     if (!future$lazy) 
[13:23:57.917]                       future <- run(future)
[13:23:57.917]                     invisible(future)
[13:23:57.917]                   }), .cleanup = FALSE, .init = FALSE)
[13:23:57.917]                 }
[13:23:57.917]             }
[13:23:57.917]         }
[13:23:57.917]     })
[13:23:57.917]     if (TRUE) {
[13:23:57.917]         base::sink(type = "output", split = FALSE)
[13:23:57.917]         if (TRUE) {
[13:23:57.917]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:23:57.917]         }
[13:23:57.917]         else {
[13:23:57.917]             ...future.result["stdout"] <- base::list(NULL)
[13:23:57.917]         }
[13:23:57.917]         base::close(...future.stdout)
[13:23:57.917]         ...future.stdout <- NULL
[13:23:57.917]     }
[13:23:57.917]     ...future.result$conditions <- ...future.conditions
[13:23:57.917]     ...future.result$finished <- base::Sys.time()
[13:23:57.917]     ...future.result
[13:23:57.917] }
[13:23:57.934]  - Condition #40: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:57.918] assign_globals() ...
[13:23:57.935]  - Condition #41: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:57.918] List of 1
[13:23:57.918]  $ data:'data.frame':	3 obs. of  2 variables:
[13:23:57.918]   ..$ a: int [1:3] 1 2 3
[13:23:57.918]   ..$ b: int [1:3] 3 2 1
[13:23:57.918]  - attr(*, "where")=List of 1
[13:23:57.918]   ..$ data:<environment: R_EmptyEnv> 
[13:23:57.918]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[13:23:57.918]  - attr(*, "resolved")= logi FALSE
[13:23:57.918]  - attr(*, "total_size")= num 128
[13:23:57.918]  - attr(*, "already-done")= logi TRUE
[13:23:57.935]  - Condition #42: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:57.921] - copied ‘data’ to environment
[13:23:57.935]  - Condition #43: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:57.922] assign_globals() ... done
[13:23:57.935]  - Condition #44: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:57.922] plan(): Setting new future strategy stack:
[13:23:57.935]  - Condition #45: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:57.922] List of future strategies:
[13:23:57.922] 1. sequential:
[13:23:57.922]    - args: function (..., envir = parent.frame())
[13:23:57.922]    - tweaked: FALSE
[13:23:57.922]    - call: NULL
[13:23:57.935]  - Condition #46: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:57.922] plan(): nbrOfWorkers() = 1
[13:23:57.935]  - Condition #47: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:57.923] plan(): Setting new future strategy stack:
[13:23:57.936]  - Condition #48: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:57.923] List of future strategies:
[13:23:57.923] 1. sequential:
[13:23:57.923]    - args: function (..., envir = parent.frame())
[13:23:57.923]    - tweaked: FALSE
[13:23:57.923]    - call: plan(list(a = strategy1, b = strategy2))
[13:23:57.936]  - Condition #49: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:57.924] plan(): nbrOfWorkers() = 1
[13:23:57.936]  - Condition #50: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:57.924] SequentialFuture started (and completed)
[13:23:57.936]  - Condition #51: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:57.924] - Launch lazy future ... done
[13:23:57.936]  - Condition #52: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:57.924] run() for ‘SequentialFuture’ ... done
[13:23:57.936] signalConditions() ... done
- plan(list('sequential', 'sequential')) ... DONE
- plan(list('sequential', 'multicore')) ...
[13:23:57.937] plan(): Setting new future strategy stack:
[13:23:57.937] List of future strategies:
[13:23:57.937] 1. sequential:
[13:23:57.937]    - args: function (..., envir = parent.frame())
[13:23:57.937]    - tweaked: FALSE
[13:23:57.937]    - call: plan(list(a = strategy1, b = strategy2))
[13:23:57.937] 2. multicore:
[13:23:57.937]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[13:23:57.937]    - tweaked: FALSE
[13:23:57.937]    - call: plan(list(a = strategy1, b = strategy2))
[13:23:57.937] plan(): nbrOfWorkers() = 1
[13:23:57.938] getGlobalsAndPackages() ...
[13:23:57.938] Searching for globals...
[13:23:57.958] - globals found: [21] ‘{’, ‘<-’, ‘unclass’, ‘::’, ‘[’, ‘nested’, ‘-’, ‘stopifnot’, ‘==’, ‘length’, ‘inherits’, ‘[[’, ‘strategy2’, ‘for’, ‘seq_along’, ‘attr’, ‘attr<-’, ‘[[<-’, ‘all.equal’, ‘list’, ‘%<-%’
[13:23:57.958] Searching for globals ... DONE
[13:23:57.958] Resolving globals: FALSE
[13:23:57.959] The total size of the 2 globals is 57.84 KiB (59224 bytes)
[13:23:57.959] The total size of the 2 globals exported for future expression (‘{; a <- 1L; plan_a <- unclass(future::plan("list")); nested_a <- nested[-1]; stopifnot(length(nested_a) == 1L, length(plan_a) == 1L, inherits(plan_a[[1]],; "future"), inherits(future::plan("next"), strategy2)); ...; }; y; }’) is 57.84 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘nested’ (57.72 KiB of class ‘list’) and ‘strategy2’ (120 bytes of class ‘character’)
[13:23:57.960] - globals: [2] ‘nested’, ‘strategy2’
[13:23:57.960] - packages: [1] ‘future’
[13:23:57.960] getGlobalsAndPackages() ... DONE
[13:23:57.960] run() for ‘Future’ ...
[13:23:57.960] - state: ‘created’
[13:23:57.960] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[13:23:57.961] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[13:23:57.961] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[13:23:57.961]   - Field: ‘label’
[13:23:57.961]   - Field: ‘local’
[13:23:57.961]   - Field: ‘owner’
[13:23:57.961]   - Field: ‘envir’
[13:23:57.961]   - Field: ‘packages’
[13:23:57.961]   - Field: ‘gc’
[13:23:57.962]   - Field: ‘conditions’
[13:23:57.962]   - Field: ‘expr’
[13:23:57.962]   - Field: ‘uuid’
[13:23:57.962]   - Field: ‘seed’
[13:23:57.962]   - Field: ‘version’
[13:23:57.962]   - Field: ‘result’
[13:23:57.962]   - Field: ‘asynchronous’
[13:23:57.962]   - Field: ‘calls’
[13:23:57.962]   - Field: ‘globals’
[13:23:57.962]   - Field: ‘stdout’
[13:23:57.962]   - Field: ‘earlySignal’
[13:23:57.963]   - Field: ‘lazy’
[13:23:57.963]   - Field: ‘state’
[13:23:57.963] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[13:23:57.963] - Launch lazy future ...
[13:23:57.963] Packages needed by the future expression (n = 1): ‘future’
[13:23:57.963] Packages needed by future strategies (n = 1): ‘future’
[13:23:57.964] {
[13:23:57.964]     {
[13:23:57.964]         {
[13:23:57.964]             ...future.startTime <- base::Sys.time()
[13:23:57.964]             {
[13:23:57.964]                 {
[13:23:57.964]                   {
[13:23:57.964]                     {
[13:23:57.964]                       base::local({
[13:23:57.964]                         has_future <- base::requireNamespace("future", 
[13:23:57.964]                           quietly = TRUE)
[13:23:57.964]                         if (has_future) {
[13:23:57.964]                           ns <- base::getNamespace("future")
[13:23:57.964]                           version <- ns[[".package"]][["version"]]
[13:23:57.964]                           if (is.null(version)) 
[13:23:57.964]                             version <- utils::packageVersion("future")
[13:23:57.964]                         }
[13:23:57.964]                         else {
[13:23:57.964]                           version <- NULL
[13:23:57.964]                         }
[13:23:57.964]                         if (!has_future || version < "1.8.0") {
[13:23:57.964]                           info <- base::c(r_version = base::gsub("R version ", 
[13:23:57.964]                             "", base::R.version$version.string), 
[13:23:57.964]                             platform = base::sprintf("%s (%s-bit)", 
[13:23:57.964]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:23:57.964]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:23:57.964]                               "release", "version")], collapse = " "), 
[13:23:57.964]                             hostname = base::Sys.info()[["nodename"]])
[13:23:57.964]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:23:57.964]                             info)
[13:23:57.964]                           info <- base::paste(info, collapse = "; ")
[13:23:57.964]                           if (!has_future) {
[13:23:57.964]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:23:57.964]                               info)
[13:23:57.964]                           }
[13:23:57.964]                           else {
[13:23:57.964]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:23:57.964]                               info, version)
[13:23:57.964]                           }
[13:23:57.964]                           base::stop(msg)
[13:23:57.964]                         }
[13:23:57.964]                       })
[13:23:57.964]                     }
[13:23:57.964]                     base::local({
[13:23:57.964]                       for (pkg in "future") {
[13:23:57.964]                         base::loadNamespace(pkg)
[13:23:57.964]                         base::library(pkg, character.only = TRUE)
[13:23:57.964]                       }
[13:23:57.964]                     })
[13:23:57.964]                   }
[13:23:57.964]                   options(future.plan = NULL)
[13:23:57.964]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:23:57.964]                   future::plan(list(b = function (..., workers = availableCores(constraints = "multicore"), 
[13:23:57.964]                     envir = parent.frame()) 
[13:23:57.964]                   {
[13:23:57.964]                     default_workers <- missing(workers)
[13:23:57.964]                     if (is.function(workers)) 
[13:23:57.964]                       workers <- workers()
[13:23:57.964]                     workers <- structure(as.integer(workers), 
[13:23:57.964]                       class = class(workers))
[13:23:57.964]                     stop_if_not(is.finite(workers), workers >= 
[13:23:57.964]                       1L)
[13:23:57.964]                     if ((workers == 1L && !inherits(workers, 
[13:23:57.964]                       "AsIs")) || !supportsMulticore(warn = TRUE)) {
[13:23:57.964]                       if (default_workers) 
[13:23:57.964]                         supportsMulticore(warn = TRUE)
[13:23:57.964]                       return(sequential(..., envir = envir))
[13:23:57.964]                     }
[13:23:57.964]                     oopts <- options(mc.cores = workers)
[13:23:57.964]                     on.exit(options(oopts))
[13:23:57.964]                     future <- MulticoreFuture(..., workers = workers, 
[13:23:57.964]                       envir = envir)
[13:23:57.964]                     if (!future$lazy) 
[13:23:57.964]                       future <- run(future)
[13:23:57.964]                     invisible(future)
[13:23:57.964]                   }), .cleanup = FALSE, .init = FALSE)
[13:23:57.964]                 }
[13:23:57.964]                 ...future.workdir <- getwd()
[13:23:57.964]             }
[13:23:57.964]             ...future.oldOptions <- base::as.list(base::.Options)
[13:23:57.964]             ...future.oldEnvVars <- base::Sys.getenv()
[13:23:57.964]         }
[13:23:57.964]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:23:57.964]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:23:57.964]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:23:57.964]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:23:57.964]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:23:57.964]             future.stdout.windows.reencode = NULL, width = 80L)
[13:23:57.964]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:23:57.964]             base::names(...future.oldOptions))
[13:23:57.964]     }
[13:23:57.964]     if (FALSE) {
[13:23:57.964]     }
[13:23:57.964]     else {
[13:23:57.964]         if (TRUE) {
[13:23:57.964]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:23:57.964]                 open = "w")
[13:23:57.964]         }
[13:23:57.964]         else {
[13:23:57.964]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:23:57.964]                 windows = "NUL", "/dev/null"), open = "w")
[13:23:57.964]         }
[13:23:57.964]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:23:57.964]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:23:57.964]             base::sink(type = "output", split = FALSE)
[13:23:57.964]             base::close(...future.stdout)
[13:23:57.964]         }, add = TRUE)
[13:23:57.964]     }
[13:23:57.964]     ...future.frame <- base::sys.nframe()
[13:23:57.964]     ...future.conditions <- base::list()
[13:23:57.964]     ...future.rng <- base::globalenv()$.Random.seed
[13:23:57.964]     if (FALSE) {
[13:23:57.964]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:23:57.964]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:23:57.964]     }
[13:23:57.964]     ...future.result <- base::tryCatch({
[13:23:57.964]         base::withCallingHandlers({
[13:23:57.964]             ...future.value <- base::withVisible(base::local({
[13:23:57.964]                 a <- 1L
[13:23:57.964]                 plan_a <- unclass(future::plan("list"))
[13:23:57.964]                 nested_a <- nested[-1]
[13:23:57.964]                 stopifnot(length(nested_a) == 1L, length(plan_a) == 
[13:23:57.964]                   1L, inherits(plan_a[[1]], "future"), inherits(future::plan("next"), 
[13:23:57.964]                   strategy2))
[13:23:57.964]                 for (kk in seq_along(plan_a)) attr(plan_a[[kk]], 
[13:23:57.964]                   "init") <- NULL
[13:23:57.964]                 for (kk in seq_along(nested_a)) attr(nested_a[[kk]], 
[13:23:57.964]                   "init") <- NULL
[13:23:57.964]                 stopifnot(all.equal(plan_a, nested_a))
[13:23:57.964]                 y %<-% {
[13:23:57.964]                   b <- 2L
[13:23:57.964]                   plan_b <- future::plan("list")
[13:23:57.964]                   nested_b <- nested_a[-1]
[13:23:57.964]                   stopifnot(length(nested_b) == 0L, length(plan_b) == 
[13:23:57.964]                     1L, inherits(plan_b[[1]], "future"), inherits(future::plan("next"), 
[13:23:57.964]                     "sequential"))
[13:23:57.964]                   list(a = a, nested_a = nested_a, plan_a = plan_a, 
[13:23:57.964]                     b = b, nested_b = nested_b, plan_b = plan_b)
[13:23:57.964]                 }
[13:23:57.964]                 y
[13:23:57.964]             }))
[13:23:57.964]             future::FutureResult(value = ...future.value$value, 
[13:23:57.964]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:23:57.964]                   ...future.rng), globalenv = if (FALSE) 
[13:23:57.964]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:23:57.964]                     ...future.globalenv.names))
[13:23:57.964]                 else NULL, started = ...future.startTime, version = "1.8")
[13:23:57.964]         }, condition = base::local({
[13:23:57.964]             c <- base::c
[13:23:57.964]             inherits <- base::inherits
[13:23:57.964]             invokeRestart <- base::invokeRestart
[13:23:57.964]             length <- base::length
[13:23:57.964]             list <- base::list
[13:23:57.964]             seq.int <- base::seq.int
[13:23:57.964]             signalCondition <- base::signalCondition
[13:23:57.964]             sys.calls <- base::sys.calls
[13:23:57.964]             `[[` <- base::`[[`
[13:23:57.964]             `+` <- base::`+`
[13:23:57.964]             `<<-` <- base::`<<-`
[13:23:57.964]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:23:57.964]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:23:57.964]                   3L)]
[13:23:57.964]             }
[13:23:57.964]             function(cond) {
[13:23:57.964]                 is_error <- inherits(cond, "error")
[13:23:57.964]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:23:57.964]                   NULL)
[13:23:57.964]                 if (is_error) {
[13:23:57.964]                   sessionInformation <- function() {
[13:23:57.964]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:23:57.964]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:23:57.964]                       search = base::search(), system = base::Sys.info())
[13:23:57.964]                   }
[13:23:57.964]                   ...future.conditions[[length(...future.conditions) + 
[13:23:57.964]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:23:57.964]                     cond$call), session = sessionInformation(), 
[13:23:57.964]                     timestamp = base::Sys.time(), signaled = 0L)
[13:23:57.964]                   signalCondition(cond)
[13:23:57.964]                 }
[13:23:57.964]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:23:57.964]                 "immediateCondition"))) {
[13:23:57.964]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:23:57.964]                   ...future.conditions[[length(...future.conditions) + 
[13:23:57.964]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:23:57.964]                   if (TRUE && !signal) {
[13:23:57.964]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:23:57.964]                     {
[13:23:57.964]                       inherits <- base::inherits
[13:23:57.964]                       invokeRestart <- base::invokeRestart
[13:23:57.964]                       is.null <- base::is.null
[13:23:57.964]                       muffled <- FALSE
[13:23:57.964]                       if (inherits(cond, "message")) {
[13:23:57.964]                         muffled <- grepl(pattern, "muffleMessage")
[13:23:57.964]                         if (muffled) 
[13:23:57.964]                           invokeRestart("muffleMessage")
[13:23:57.964]                       }
[13:23:57.964]                       else if (inherits(cond, "warning")) {
[13:23:57.964]                         muffled <- grepl(pattern, "muffleWarning")
[13:23:57.964]                         if (muffled) 
[13:23:57.964]                           invokeRestart("muffleWarning")
[13:23:57.964]                       }
[13:23:57.964]                       else if (inherits(cond, "condition")) {
[13:23:57.964]                         if (!is.null(pattern)) {
[13:23:57.964]                           computeRestarts <- base::computeRestarts
[13:23:57.964]                           grepl <- base::grepl
[13:23:57.964]                           restarts <- computeRestarts(cond)
[13:23:57.964]                           for (restart in restarts) {
[13:23:57.964]                             name <- restart$name
[13:23:57.964]                             if (is.null(name)) 
[13:23:57.964]                               next
[13:23:57.964]                             if (!grepl(pattern, name)) 
[13:23:57.964]                               next
[13:23:57.964]                             invokeRestart(restart)
[13:23:57.964]                             muffled <- TRUE
[13:23:57.964]                             break
[13:23:57.964]                           }
[13:23:57.964]                         }
[13:23:57.964]                       }
[13:23:57.964]                       invisible(muffled)
[13:23:57.964]                     }
[13:23:57.964]                     muffleCondition(cond, pattern = "^muffle")
[13:23:57.964]                   }
[13:23:57.964]                 }
[13:23:57.964]                 else {
[13:23:57.964]                   if (TRUE) {
[13:23:57.964]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:23:57.964]                     {
[13:23:57.964]                       inherits <- base::inherits
[13:23:57.964]                       invokeRestart <- base::invokeRestart
[13:23:57.964]                       is.null <- base::is.null
[13:23:57.964]                       muffled <- FALSE
[13:23:57.964]                       if (inherits(cond, "message")) {
[13:23:57.964]                         muffled <- grepl(pattern, "muffleMessage")
[13:23:57.964]                         if (muffled) 
[13:23:57.964]                           invokeRestart("muffleMessage")
[13:23:57.964]                       }
[13:23:57.964]                       else if (inherits(cond, "warning")) {
[13:23:57.964]                         muffled <- grepl(pattern, "muffleWarning")
[13:23:57.964]                         if (muffled) 
[13:23:57.964]                           invokeRestart("muffleWarning")
[13:23:57.964]                       }
[13:23:57.964]                       else if (inherits(cond, "condition")) {
[13:23:57.964]                         if (!is.null(pattern)) {
[13:23:57.964]                           computeRestarts <- base::computeRestarts
[13:23:57.964]                           grepl <- base::grepl
[13:23:57.964]                           restarts <- computeRestarts(cond)
[13:23:57.964]                           for (restart in restarts) {
[13:23:57.964]                             name <- restart$name
[13:23:57.964]                             if (is.null(name)) 
[13:23:57.964]                               next
[13:23:57.964]                             if (!grepl(pattern, name)) 
[13:23:57.964]                               next
[13:23:57.964]                             invokeRestart(restart)
[13:23:57.964]                             muffled <- TRUE
[13:23:57.964]                             break
[13:23:57.964]                           }
[13:23:57.964]                         }
[13:23:57.964]                       }
[13:23:57.964]                       invisible(muffled)
[13:23:57.964]                     }
[13:23:57.964]                     muffleCondition(cond, pattern = "^muffle")
[13:23:57.964]                   }
[13:23:57.964]                 }
[13:23:57.964]             }
[13:23:57.964]         }))
[13:23:57.964]     }, error = function(ex) {
[13:23:57.964]         base::structure(base::list(value = NULL, visible = NULL, 
[13:23:57.964]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:23:57.964]                 ...future.rng), started = ...future.startTime, 
[13:23:57.964]             finished = Sys.time(), session_uuid = NA_character_, 
[13:23:57.964]             version = "1.8"), class = "FutureResult")
[13:23:57.964]     }, finally = {
[13:23:57.964]         if (!identical(...future.workdir, getwd())) 
[13:23:57.964]             setwd(...future.workdir)
[13:23:57.964]         {
[13:23:57.964]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:23:57.964]                 ...future.oldOptions$nwarnings <- NULL
[13:23:57.964]             }
[13:23:57.964]             base::options(...future.oldOptions)
[13:23:57.964]             if (.Platform$OS.type == "windows") {
[13:23:57.964]                 old_names <- names(...future.oldEnvVars)
[13:23:57.964]                 envs <- base::Sys.getenv()
[13:23:57.964]                 names <- names(envs)
[13:23:57.964]                 common <- intersect(names, old_names)
[13:23:57.964]                 added <- setdiff(names, old_names)
[13:23:57.964]                 removed <- setdiff(old_names, names)
[13:23:57.964]                 changed <- common[...future.oldEnvVars[common] != 
[13:23:57.964]                   envs[common]]
[13:23:57.964]                 NAMES <- toupper(changed)
[13:23:57.964]                 args <- list()
[13:23:57.964]                 for (kk in seq_along(NAMES)) {
[13:23:57.964]                   name <- changed[[kk]]
[13:23:57.964]                   NAME <- NAMES[[kk]]
[13:23:57.964]                   if (name != NAME && is.element(NAME, old_names)) 
[13:23:57.964]                     next
[13:23:57.964]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:23:57.964]                 }
[13:23:57.964]                 NAMES <- toupper(added)
[13:23:57.964]                 for (kk in seq_along(NAMES)) {
[13:23:57.964]                   name <- added[[kk]]
[13:23:57.964]                   NAME <- NAMES[[kk]]
[13:23:57.964]                   if (name != NAME && is.element(NAME, old_names)) 
[13:23:57.964]                     next
[13:23:57.964]                   args[[name]] <- ""
[13:23:57.964]                 }
[13:23:57.964]                 NAMES <- toupper(removed)
[13:23:57.964]                 for (kk in seq_along(NAMES)) {
[13:23:57.964]                   name <- removed[[kk]]
[13:23:57.964]                   NAME <- NAMES[[kk]]
[13:23:57.964]                   if (name != NAME && is.element(NAME, old_names)) 
[13:23:57.964]                     next
[13:23:57.964]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:23:57.964]                 }
[13:23:57.964]                 if (length(args) > 0) 
[13:23:57.964]                   base::do.call(base::Sys.setenv, args = args)
[13:23:57.964]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:23:57.964]             }
[13:23:57.964]             else {
[13:23:57.964]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:23:57.964]             }
[13:23:57.964]             {
[13:23:57.964]                 if (base::length(...future.futureOptionsAdded) > 
[13:23:57.964]                   0L) {
[13:23:57.964]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:23:57.964]                   base::names(opts) <- ...future.futureOptionsAdded
[13:23:57.964]                   base::options(opts)
[13:23:57.964]                 }
[13:23:57.964]                 {
[13:23:57.964]                   {
[13:23:57.964]                     NULL
[13:23:57.964]                     RNGkind("Mersenne-Twister")
[13:23:57.964]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[13:23:57.964]                       inherits = FALSE)
[13:23:57.964]                   }
[13:23:57.964]                   options(future.plan = NULL)
[13:23:57.964]                   if (is.na(NA_character_)) 
[13:23:57.964]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:23:57.964]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:23:57.964]                   future::plan(list(a = function (..., envir = parent.frame()) 
[13:23:57.964]                   {
[13:23:57.964]                     future <- SequentialFuture(..., envir = envir)
[13:23:57.964]                     if (!future$lazy) 
[13:23:57.964]                       future <- run(future)
[13:23:57.964]                     invisible(future)
[13:23:57.964]                   }, b = function (..., workers = availableCores(constraints = "multicore"), 
[13:23:57.964]                     envir = parent.frame()) 
[13:23:57.964]                   {
[13:23:57.964]                     default_workers <- missing(workers)
[13:23:57.964]                     if (is.function(workers)) 
[13:23:57.964]                       workers <- workers()
[13:23:57.964]                     workers <- structure(as.integer(workers), 
[13:23:57.964]                       class = class(workers))
[13:23:57.964]                     stop_if_not(is.finite(workers), workers >= 
[13:23:57.964]                       1L)
[13:23:57.964]                     if ((workers == 1L && !inherits(workers, 
[13:23:57.964]                       "AsIs")) || !supportsMulticore(warn = TRUE)) {
[13:23:57.964]                       if (default_workers) 
[13:23:57.964]                         supportsMulticore(warn = TRUE)
[13:23:57.964]                       return(sequential(..., envir = envir))
[13:23:57.964]                     }
[13:23:57.964]                     oopts <- options(mc.cores = workers)
[13:23:57.964]                     on.exit(options(oopts))
[13:23:57.964]                     future <- MulticoreFuture(..., workers = workers, 
[13:23:57.964]                       envir = envir)
[13:23:57.964]                     if (!future$lazy) 
[13:23:57.964]                       future <- run(future)
[13:23:57.964]                     invisible(future)
[13:23:57.964]                   }), .cleanup = FALSE, .init = FALSE)
[13:23:57.964]                 }
[13:23:57.964]             }
[13:23:57.964]         }
[13:23:57.964]     })
[13:23:57.964]     if (TRUE) {
[13:23:57.964]         base::sink(type = "output", split = FALSE)
[13:23:57.964]         if (TRUE) {
[13:23:57.964]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:23:57.964]         }
[13:23:57.964]         else {
[13:23:57.964]             ...future.result["stdout"] <- base::list(NULL)
[13:23:57.964]         }
[13:23:57.964]         base::close(...future.stdout)
[13:23:57.964]         ...future.stdout <- NULL
[13:23:57.964]     }
[13:23:57.964]     ...future.result$conditions <- ...future.conditions
[13:23:57.964]     ...future.result$finished <- base::Sys.time()
[13:23:57.964]     ...future.result
[13:23:57.964] }
[13:23:57.966] assign_globals() ...
[13:23:57.966] List of 2
[13:23:57.966]  $ nested   :List of 2
[13:23:57.966]   ..$ a:function (..., envir = parent.frame())  
[13:23:57.966]   .. ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[13:23:57.966]   .. ..- attr(*, "call")= language plan(list(a = strategy1, b = strategy2))
[13:23:57.966]   ..$ b:function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())  
[13:23:57.966]   .. ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[13:23:57.966]   .. ..- attr(*, "call")= language plan(list(a = strategy1, b = strategy2))
[13:23:57.966]   ..- attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[13:23:57.966]  $ strategy2: chr "multicore"
[13:23:57.966]  - attr(*, "where")=List of 2
[13:23:57.966]   ..$ nested   :<environment: R_EmptyEnv> 
[13:23:57.966]   ..$ strategy2:<environment: R_EmptyEnv> 
[13:23:57.966]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[13:23:57.966]  - attr(*, "resolved")= logi FALSE
[13:23:57.966]  - attr(*, "total_size")= num 59224
[13:23:57.966]  - attr(*, "already-done")= logi TRUE
[13:23:57.971] - copied ‘nested’ to environment
[13:23:57.971] - copied ‘strategy2’ to environment
[13:23:57.971] assign_globals() ... done
[13:23:57.971] plan(): Setting new future strategy stack:
[13:23:57.971] List of future strategies:
[13:23:57.971] 1. multicore:
[13:23:57.971]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[13:23:57.971]    - tweaked: FALSE
[13:23:57.971]    - call: plan(list(a = strategy1, b = strategy2))
[13:23:57.977] plan(): nbrOfWorkers() = 2
[13:23:58.037] plan(): Setting new future strategy stack:
[13:23:58.037] List of future strategies:
[13:23:58.037] 1. sequential:
[13:23:58.037]    - args: function (..., envir = parent.frame())
[13:23:58.037]    - tweaked: FALSE
[13:23:58.037]    - call: plan(list(a = strategy1, b = strategy2))
[13:23:58.037] 2. multicore:
[13:23:58.037]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[13:23:58.037]    - tweaked: FALSE
[13:23:58.037]    - call: plan(list(a = strategy1, b = strategy2))
[13:23:58.038] plan(): nbrOfWorkers() = 1
[13:23:58.038] SequentialFuture started (and completed)
[13:23:58.038] signalConditions() ...
[13:23:58.038]  - include = ‘immediateCondition’
[13:23:58.038]  - exclude = 
[13:23:58.038]  - resignal = FALSE
[13:23:58.039]  - Number of conditions: 57
[13:23:58.039] signalConditions() ... done
[13:23:58.039] - Launch lazy future ... done
[13:23:58.039] run() for ‘SequentialFuture’ ... done
[13:23:58.039] signalConditions() ...
[13:23:58.039]  - include = ‘immediateCondition’
[13:23:58.040]  - exclude = 
[13:23:58.040]  - resignal = FALSE
[13:23:58.040]  - Number of conditions: 57
[13:23:58.040] signalConditions() ... done
[13:23:58.040] Future state: ‘finished’
[13:23:58.040] signalConditions() ...
[13:23:58.040]  - include = ‘condition’
[13:23:58.040]  - exclude = ‘immediateCondition’
[13:23:58.041]  - resignal = TRUE
[13:23:58.041]  - Number of conditions: 57
[13:23:58.041]  - Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:57.978] getGlobalsAndPackages() ...
[13:23:58.041]  - Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:57.978] Searching for globals...
[13:23:58.041]  - Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:57.997] - globals found: [14] ‘{’, ‘<-’, ‘::’, ‘[’, ‘nested_a’, ‘-’, ‘stopifnot’, ‘==’, ‘length’, ‘inherits’, ‘[[’, ‘list’, ‘a’, ‘plan_a’
[13:23:58.041]  - Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:57.997] Searching for globals ... DONE
[13:23:58.041]  - Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:57.997] Resolving globals: FALSE
[13:23:58.042]  - Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:57.998] The total size of the 3 globals is 93.01 KiB (95240 bytes)
[13:23:58.042]  - Condition #7: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:57.998] The total size of the 3 globals exported for future expression (‘{; b <- 2L; plan_b <- future::plan("list"); nested_b <- nested_a[-1]; stopifnot(length(nested_b) == 0L, length(plan_b) == 1L, inherits(plan_b[[1]],; "future"), inherits(future::plan("next"), "sequential")); list(a = a, nested_a = nested_a, plan_a = plan_a, b = b,; nested_b = nested_b, plan_b = plan_b); }’) is 93.01 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are three globals: ‘nested_a’ (46.48 KiB of class ‘list’), ‘plan_a’ (46.48 KiB of class ‘list’) and ‘a’ (56 bytes of class ‘numeric’)
[13:23:58.042]  - Condition #8: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:57.998] - globals: [3] ‘nested_a’, ‘a’, ‘plan_a’
[13:23:58.042]  - Condition #9: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:57.998] 
[13:23:58.042]  - Condition #10: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:57.999] getGlobalsAndPackages() ... DONE
[13:23:58.042]  - Condition #11: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:57.999] run() for ‘Future’ ...
[13:23:58.043]  - Condition #12: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:57.999] - state: ‘created’
[13:23:58.043]  - Condition #13: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:57.999] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[13:23:58.043]  - Condition #14: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:58.003] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:23:58.043]  - Condition #15: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:58.003] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[13:23:58.043]  - Condition #16: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:58.003]   - Field: ‘label’
[13:23:58.043]  - Condition #17: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:58.003]   - Field: ‘local’
[13:23:58.044]  - Condition #18: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:58.004]   - Field: ‘owner’
[13:23:58.044]  - Condition #19: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:58.004]   - Field: ‘envir’
[13:23:58.044]  - Condition #20: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:58.004]   - Field: ‘workers’
[13:23:58.044]  - Condition #21: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:58.004]   - Field: ‘packages’
[13:23:58.044]  - Condition #22: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:58.004]   - Field: ‘gc’
[13:23:58.044]  - Condition #23: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:58.004]   - Field: ‘job’
[13:23:58.045]  - Condition #24: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:58.004]   - Field: ‘conditions’
[13:23:58.045]  - Condition #25: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:58.004]   - Field: ‘expr’
[13:23:58.045]  - Condition #26: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:58.004]   - Field: ‘uuid’
[13:23:58.045]  - Condition #27: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:58.005]   - Field: ‘seed’
[13:23:58.045]  - Condition #28: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:58.005]   - Field: ‘version’
[13:23:58.045]  - Condition #29: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:58.005]   - Field: ‘result’
[13:23:58.046]  - Condition #30: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:58.005]   - Field: ‘asynchronous’
[13:23:58.046]  - Condition #31: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:58.005]   - Field: ‘calls’
[13:23:58.046]  - Condition #32: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:58.005]   - Field: ‘globals’
[13:23:58.046]  - Condition #33: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:58.005]   - Field: ‘stdout’
[13:23:58.046]  - Condition #34: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:58.005]   - Field: ‘earlySignal’
[13:23:58.046]  - Condition #35: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:58.005]   - Field: ‘lazy’
[13:23:58.046]  - Condition #36: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:58.006]   - Field: ‘state’
[13:23:58.047]  - Condition #37: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:58.006] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[13:23:58.047]  - Condition #38: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:58.006] - Launch lazy future ...
[13:23:58.047]  - Condition #39: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:58.007] Packages needed by the future expression (n = 0): <none>
[13:23:58.047]  - Condition #40: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:58.007] Packages needed by future strategies (n = 0): <none>
[13:23:58.047]  - Condition #41: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:58.007] {
[13:23:58.007]     {
[13:23:58.007]         {
[13:23:58.007]             ...future.startTime <- base::Sys.time()
[13:23:58.007]             {
[13:23:58.007]                 {
[13:23:58.007]                   {
[13:23:58.007]                     {
[13:23:58.007]                       base::local({
[13:23:58.007]                         has_future <- base::requireNamespace("future", 
[13:23:58.007]                           quietly = TRUE)
[13:23:58.007]                         if (has_future) {
[13:23:58.007]                           ns <- base::getNamespace("future")
[13:23:58.007]                           version <- ns[[".package"]][["version"]]
[13:23:58.007]                           if (is.null(version)) 
[13:23:58.007]                             version <- utils::packageVersion("future")
[13:23:58.007]                         }
[13:23:58.007]                         else {
[13:23:58.007]                           version <- NULL
[13:23:58.007]                         }
[13:23:58.007]                         if (!has_future || version < "1.8.0") {
[13:23:58.007]                           info <- base::c(r_version = base::gsub("R version ", 
[13:23:58.007]                             "", base::R.version$version.string), 
[13:23:58.007]                             platform = base::sprintf("%s (%s-bit)", 
[13:23:58.007]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:23:58.007]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:23:58.007]                               "release", "version")], collapse = " "), 
[13:23:58.007]                             hostname = base::Sys.info()[["nodename"]])
[13:23:58.007]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:23:58.007]                             info)
[13:23:58.007]                           info <- base::paste(info, collapse = "; ")
[13:23:58.007]                           if (!has_future) {
[13:23:58.007]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:23:58.007]                               info)
[13:23:58.007]                           }
[13:23:58.007]                           else {
[13:23:58.007]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:23:58.007]                               info, version)
[13:23:58.007]                           }
[13:23:58.007]                           base::stop(msg)
[13:23:58.007]                         }
[13:23:58.007]                       })
[13:23:58.007]                     }
[13:23:58.007]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[13:23:58.007]                     base::options(mc.cores = 1L)
[13:23:58.007]                   }
[13:23:58.007]                   options(future.plan = NULL)
[13:23:58.007]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:23:58.007]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:23:58.007]                 }
[13:23:58.007]                 ...future.workdir <- getwd()
[13:23:58.007]             }
[13:23:58.007]             ...future.oldOptions <- base::as.list(base::.Options)
[13:23:58.007]             ...future.oldEnvVars <- base::Sys.getenv()
[13:23:58.007]         }
[13:23:58.007]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:23:58.007]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:23:58.007]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:23:58.007]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:23:58.007]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:23:58.007]             future.stdout.windows.reencode = NULL, width = 80L)
[13:23:58.007]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:23:58.007]             base::names(...future.oldOptions))
[13:23:58.007]     }
[13:23:58.007]     if (FALSE) {
[13:23:58.007]     }
[13:23:58.007]     else {
[13:23:58.007]         if (TRUE) {
[13:23:58.007]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:23:58.007]                 open = "w")
[13:23:58.007]         }
[13:23:58.007]         else {
[13:23:58.007]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:23:58.007]                 windows = "NUL", "/dev/null"), open = "w")
[13:23:58.007]         }
[13:23:58.007]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:23:58.007]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:23:58.007]             base::sink(type = "output", split = FALSE)
[13:23:58.007]             base::close(...future.stdout)
[13:23:58.007]         }, add = TRUE)
[13:23:58.007]     }
[13:23:58.007]     ...future.frame <- base::sys.nframe()
[13:23:58.007]     ...future.conditions <- base::list()
[13:23:58.007]     ...future.rng <- base::globalenv()$.Random.seed
[13:23:58.007]     if (FALSE) {
[13:23:58.007]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:23:58.007]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:23:58.007]     }
[13:23:58.007]     ...future.result <- base::tryCatch({
[13:23:58.007]         base::withCallingHandlers({
[13:23:58.007]             ...future.value <- base::withVisible(base::local({
[13:23:58.007]                 withCallingHandlers({
[13:23:58.007]                   {
[13:23:58.007]                     b <- 2L
[13:23:58.007]                     plan_b <- future::plan("list")
[13:23:58.007]                     nested_b <- nested_a[-1]
[13:23:58.007]                     stopifnot(length(nested_b) == 0L, length(plan_b) == 
[13:23:58.007]                       1L, inherits(plan_b[[1]], "future"), inherits(future::plan("next"), 
[13:23:58.007]                       "sequential"))
[13:23:58.007]                     list(a = a, nested_a = nested_a, plan_a = plan_a, 
[13:23:58.007]                       b = b, nested_b = nested_b, plan_b = plan_b)
[13:23:58.007]                   }
[13:23:58.007]                 }, immediateCondition = function(cond) {
[13:23:58.007]                   save_rds <- function (object, pathname, ...) 
[13:23:58.007]                   {
[13:23:58.007]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[13:23:58.007]                     if (file_test("-f", pathname_tmp)) {
[13:23:58.007]                       fi_tmp <- file.info(pathname_tmp)
[13:23:58.007]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[13:23:58.007]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:23:58.007]                         fi_tmp[["mtime"]])
[13:23:58.007]                     }
[13:23:58.007]                     tryCatch({
[13:23:58.007]                       saveRDS(object, file = pathname_tmp, ...)
[13:23:58.007]                     }, error = function(ex) {
[13:23:58.007]                       msg <- conditionMessage(ex)
[13:23:58.007]                       fi_tmp <- file.info(pathname_tmp)
[13:23:58.007]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[13:23:58.007]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:23:58.007]                         fi_tmp[["mtime"]], msg)
[13:23:58.007]                       ex$message <- msg
[13:23:58.007]                       stop(ex)
[13:23:58.007]                     })
[13:23:58.007]                     stopifnot(file_test("-f", pathname_tmp))
[13:23:58.007]                     res <- file.rename(from = pathname_tmp, to = pathname)
[13:23:58.007]                     if (!res || file_test("-f", pathname_tmp)) {
[13:23:58.007]                       fi_tmp <- file.info(pathname_tmp)
[13:23:58.007]                       fi <- file.info(pathname)
[13:23:58.007]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[13:23:58.007]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:23:58.007]                         fi_tmp[["mtime"]], sQuote(pathname), 
[13:23:58.007]                         fi[["size"]], fi[["mtime"]])
[13:23:58.007]                       stop(msg)
[13:23:58.007]                     }
[13:23:58.007]                     invisible(pathname)
[13:23:58.007]                   }
[13:23:58.007]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[13:23:58.007]                     rootPath = tempdir()) 
[13:23:58.007]                   {
[13:23:58.007]                     obj <- list(time = Sys.time(), condition = cond)
[13:23:58.007]                     file <- tempfile(pattern = class(cond)[1], 
[13:23:58.007]                       tmpdir = path, fileext = ".rds")
[13:23:58.007]                     save_rds(obj, file)
[13:23:58.007]                   }
[13:23:58.007]                   saveImmediateCondition(cond, path = "/tmp/RtmpKOlrlL/.future/immediateConditions")
[13:23:58.007]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:23:58.007]                   {
[13:23:58.007]                     inherits <- base::inherits
[13:23:58.007]                     invokeRestart <- base::invokeRestart
[13:23:58.007]                     is.null <- base::is.null
[13:23:58.007]                     muffled <- FALSE
[13:23:58.007]                     if (inherits(cond, "message")) {
[13:23:58.007]                       muffled <- grepl(pattern, "muffleMessage")
[13:23:58.007]                       if (muffled) 
[13:23:58.007]                         invokeRestart("muffleMessage")
[13:23:58.007]                     }
[13:23:58.007]                     else if (inherits(cond, "warning")) {
[13:23:58.007]                       muffled <- grepl(pattern, "muffleWarning")
[13:23:58.007]                       if (muffled) 
[13:23:58.007]                         invokeRestart("muffleWarning")
[13:23:58.007]                     }
[13:23:58.007]                     else if (inherits(cond, "condition")) {
[13:23:58.007]                       if (!is.null(pattern)) {
[13:23:58.007]                         computeRestarts <- base::computeRestarts
[13:23:58.007]                         grepl <- base::grepl
[13:23:58.007]                         restarts <- computeRestarts(cond)
[13:23:58.007]                         for (restart in restarts) {
[13:23:58.007]                           name <- restart$name
[13:23:58.007]                           if (is.null(name)) 
[13:23:58.007]                             next
[13:23:58.007]                           if (!grepl(pattern, name)) 
[13:23:58.007]                             next
[13:23:58.007]                           invokeRestart(restart)
[13:23:58.007]                           muffled <- TRUE
[13:23:58.007]                           break
[13:23:58.007]                         }
[13:23:58.007]                       }
[13:23:58.007]                     }
[13:23:58.007]                     invisible(muffled)
[13:23:58.007]                   }
[13:23:58.007]                   muffleCondition(cond)
[13:23:58.007]                 })
[13:23:58.007]             }))
[13:23:58.007]             future::FutureResult(value = ...future.value$value, 
[13:23:58.007]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:23:58.007]                   ...future.rng), globalenv = if (FALSE) 
[13:23:58.007]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:23:58.007]                     ...future.globalenv.names))
[13:23:58.007]                 else NULL, started = ...future.startTime, version = "1.8")
[13:23:58.007]         }, condition = base::local({
[13:23:58.007]             c <- base::c
[13:23:58.007]             inherits <- base::inherits
[13:23:58.007]             invokeRestart <- base::invokeRestart
[13:23:58.007]             length <- base::length
[13:23:58.007]             list <- base::list
[13:23:58.007]             seq.int <- base::seq.int
[13:23:58.007]             signalCondition <- base::signalCondition
[13:23:58.007]             sys.calls <- base::sys.calls
[13:23:58.007]             `[[` <- base::`[[`
[13:23:58.007]             `+` <- base::`+`
[13:23:58.007]             `<<-` <- base::`<<-`
[13:23:58.007]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:23:58.007]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:23:58.007]                   3L)]
[13:23:58.007]             }
[13:23:58.007]             function(cond) {
[13:23:58.007]                 is_error <- inherits(cond, "error")
[13:23:58.007]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:23:58.007]                   NULL)
[13:23:58.007]                 if (is_error) {
[13:23:58.007]                   sessionInformation <- function() {
[13:23:58.007]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:23:58.007]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:23:58.007]                       search = base::search(), system = base::Sys.info())
[13:23:58.007]                   }
[13:23:58.007]                   ...future.conditions[[length(...future.conditions) + 
[13:23:58.007]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:23:58.007]                     cond$call), session = sessionInformation(), 
[13:23:58.007]                     timestamp = base::Sys.time(), signaled = 0L)
[13:23:58.007]                   signalCondition(cond)
[13:23:58.007]                 }
[13:23:58.007]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:23:58.007]                 "immediateCondition"))) {
[13:23:58.007]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:23:58.007]                   ...future.conditions[[length(...future.conditions) + 
[13:23:58.007]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:23:58.007]                   if (TRUE && !signal) {
[13:23:58.007]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:23:58.007]                     {
[13:23:58.007]                       inherits <- base::inherits
[13:23:58.007]                       invokeRestart <- base::invokeRestart
[13:23:58.007]                       is.null <- base::is.null
[13:23:58.007]                       muffled <- FALSE
[13:23:58.007]                       if (inherits(cond, "message")) {
[13:23:58.007]                         muffled <- grepl(pattern, "muffleMessage")
[13:23:58.007]                         if (muffled) 
[13:23:58.007]                           invokeRestart("muffleMessage")
[13:23:58.007]                       }
[13:23:58.007]                       else if (inherits(cond, "warning")) {
[13:23:58.007]                         muffled <- grepl(pattern, "muffleWarning")
[13:23:58.007]                         if (muffled) 
[13:23:58.007]                           invokeRestart("muffleWarning")
[13:23:58.007]                       }
[13:23:58.007]                       else if (inherits(cond, "condition")) {
[13:23:58.007]                         if (!is.null(pattern)) {
[13:23:58.007]                           computeRestarts <- base::computeRestarts
[13:23:58.007]                           grepl <- base::grepl
[13:23:58.007]                           restarts <- computeRestarts(cond)
[13:23:58.007]                           for (restart in restarts) {
[13:23:58.007]                             name <- restart$name
[13:23:58.007]                             if (is.null(name)) 
[13:23:58.007]                               next
[13:23:58.007]                             if (!grepl(pattern, name)) 
[13:23:58.007]                               next
[13:23:58.007]                             invokeRestart(restart)
[13:23:58.007]                             muffled <- TRUE
[13:23:58.007]                             break
[13:23:58.007]                           }
[13:23:58.007]                         }
[13:23:58.007]                       }
[13:23:58.007]                       invisible(muffled)
[13:23:58.007]                     }
[13:23:58.007]                     muffleCondition(cond, pattern = "^muffle")
[13:23:58.007]                   }
[13:23:58.007]                 }
[13:23:58.007]                 else {
[13:23:58.007]                   if (TRUE) {
[13:23:58.007]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:23:58.007]                     {
[13:23:58.007]                       inherits <- base::inherits
[13:23:58.007]                       invokeRestart <- base::invokeRestart
[13:23:58.007]                       is.null <- base::is.null
[13:23:58.007]                       muffled <- FALSE
[13:23:58.007]                       if (inherits(cond, "message")) {
[13:23:58.007]                         muffled <- grepl(pattern, "muffleMessage")
[13:23:58.007]                         if (muffled) 
[13:23:58.007]                           invokeRestart("muffleMessage")
[13:23:58.007]                       }
[13:23:58.007]                       else if (inherits(cond, "warning")) {
[13:23:58.007]                         muffled <- grepl(pattern, "muffleWarning")
[13:23:58.007]                         if (muffled) 
[13:23:58.007]                           invokeRestart("muffleWarning")
[13:23:58.007]                       }
[13:23:58.007]                       else if (inherits(cond, "condition")) {
[13:23:58.007]                         if (!is.null(pattern)) {
[13:23:58.007]                           computeRestarts <- base::computeRestarts
[13:23:58.007]                           grepl <- base::grepl
[13:23:58.007]                           restarts <- computeRestarts(cond)
[13:23:58.007]                           for (restart in restarts) {
[13:23:58.007]                             name <- restart$name
[13:23:58.007]                             if (is.null(name)) 
[13:23:58.007]                               next
[13:23:58.007]                             if (!grepl(pattern, name)) 
[13:23:58.007]                               next
[13:23:58.007]                             invokeRestart(restart)
[13:23:58.007]                             muffled <- TRUE
[13:23:58.007]                             break
[13:23:58.007]                           }
[13:23:58.007]                         }
[13:23:58.007]                       }
[13:23:58.007]                       invisible(muffled)
[13:23:58.007]                     }
[13:23:58.007]                     muffleCondition(cond, pattern = "^muffle")
[13:23:58.007]                   }
[13:23:58.007]                 }
[13:23:58.007]             }
[13:23:58.007]         }))
[13:23:58.007]     }, error = function(ex) {
[13:23:58.007]         base::structure(base::list(value = NULL, visible = NULL, 
[13:23:58.007]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:23:58.007]                 ...future.rng), started = ...future.startTime, 
[13:23:58.007]             finished = Sys.time(), session_uuid = NA_character_, 
[13:23:58.007]             version = "1.8"), class = "FutureResult")
[13:23:58.007]     }, finally = {
[13:23:58.007]         if (!identical(...future.workdir, getwd())) 
[13:23:58.007]             setwd(...future.workdir)
[13:23:58.007]         {
[13:23:58.007]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:23:58.007]                 ...future.oldOptions$nwarnings <- NULL
[13:23:58.007]             }
[13:23:58.007]             base::options(...future.oldOptions)
[13:23:58.007]             if (.Platform$OS.type == "windows") {
[13:23:58.007]                 old_names <- names(...future.oldEnvVars)
[13:23:58.007]                 envs <- base::Sys.getenv()
[13:23:58.007]                 names <- names(envs)
[13:23:58.007]                 common <- intersect(names, old_names)
[13:23:58.007]                 added <- setdiff(names, old_names)
[13:23:58.007]                 removed <- setdiff(old_names, names)
[13:23:58.007]                 changed <- common[...future.oldEnvVars[common] != 
[13:23:58.007]                   envs[common]]
[13:23:58.007]                 NAMES <- toupper(changed)
[13:23:58.007]                 args <- list()
[13:23:58.007]                 for (kk in seq_along(NAMES)) {
[13:23:58.007]                   name <- changed[[kk]]
[13:23:58.007]                   NAME <- NAMES[[kk]]
[13:23:58.007]                   if (name != NAME && is.element(NAME, old_names)) 
[13:23:58.007]                     next
[13:23:58.007]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:23:58.007]                 }
[13:23:58.007]                 NAMES <- toupper(added)
[13:23:58.007]                 for (kk in seq_along(NAMES)) {
[13:23:58.007]                   name <- added[[kk]]
[13:23:58.007]                   NAME <- NAMES[[kk]]
[13:23:58.007]                   if (name != NAME && is.element(NAME, old_names)) 
[13:23:58.007]                     next
[13:23:58.007]                   args[[name]] <- ""
[13:23:58.007]                 }
[13:23:58.007]                 NAMES <- toupper(removed)
[13:23:58.007]                 for (kk in seq_along(NAMES)) {
[13:23:58.007]                   name <- removed[[kk]]
[13:23:58.007]                   NAME <- NAMES[[kk]]
[13:23:58.007]                   if (name != NAME && is.element(NAME, old_names)) 
[13:23:58.007]                     next
[13:23:58.007]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:23:58.007]                 }
[13:23:58.007]                 if (length(args) > 0) 
[13:23:58.007]                   base::do.call(base::Sys.setenv, args = args)
[13:23:58.007]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:23:58.007]             }
[13:23:58.007]             else {
[13:23:58.007]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:23:58.007]             }
[13:23:58.007]             {
[13:23:58.007]                 if (base::length(...future.futureOptionsAdded) > 
[13:23:58.007]                   0L) {
[13:23:58.007]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:23:58.007]                   base::names(opts) <- ...future.futureOptionsAdded
[13:23:58.007]                   base::options(opts)
[13:23:58.007]                 }
[13:23:58.007]                 {
[13:23:58.007]                   {
[13:23:58.007]                     base::options(mc.cores = ...future.mc.cores.old)
[13:23:58.007]                     NULL
[13:23:58.007]                   }
[13:23:58.007]                   options(future.plan = NULL)
[13:23:58.007]                   if (is.na(NA_character_)) 
[13:23:58.007]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:23:58.007]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:23:58.007]                   future::plan(list(b = function (..., workers = availableCores(constraints = "multicore"), 
[13:23:58.007]                     envir = parent.frame()) 
[13:23:58.007]                   {
[13:23:58.007]                     default_workers <- missing(workers)
[13:23:58.007]                     if (is.function(workers)) 
[13:23:58.007]                       workers <- workers()
[13:23:58.007]                     workers <- structure(as.integer(workers), 
[13:23:58.007]                       class = class(workers))
[13:23:58.007]                     stop_if_not(is.finite(workers), workers >= 
[13:23:58.007]                       1L)
[13:23:58.007]                     if ((workers == 1L && !inherits(workers, 
[13:23:58.007]                       "AsIs")) || !supportsMulticore(warn = TRUE)) {
[13:23:58.007]                       if (default_workers) 
[13:23:58.007]                         supportsMulticore(warn = TRUE)
[13:23:58.007]                       return(sequential(..., envir = envir))
[13:23:58.007]                     }
[13:23:58.007]                     oopts <- options(mc.cores = workers)
[13:23:58.007]                     on.exit(options(oopts))
[13:23:58.007]                     future <- MulticoreFuture(..., workers = workers, 
[13:23:58.007]                       envir = envir)
[13:23:58.007]                     if (!future$lazy) 
[13:23:58.007]                       future <- run(future)
[13:23:58.007]                     invisible(future)
[13:23:58.007]                   }), .cleanup = FALSE, .init = FALSE)
[13:23:58.007]                 }
[13:23:58.007]             }
[13:23:58.007]         }
[13:23:58.007]     })
[13:23:58.007]     if (TRUE) {
[13:23:58.007]         base::sink(type = "output", split = FALSE)
[13:23:58.007]         if (TRUE) {
[13:23:58.007]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:23:58.007]         }
[13:23:58.007]         else {
[13:23:58.007]             ...future.result["stdout"] <- base::list(NULL)
[13:23:58.007]         }
[13:23:58.007]         base::close(...future.stdout)
[13:23:58.007]         ...future.stdout <- NULL
[13:23:58.007]     }
[13:23:58.007]     ...future.result$conditions <- ...future.conditions
[13:23:58.007]     ...future.result$finished <- base::Sys.time()
[13:23:58.007]     ...future.result
[13:23:58.007] }
[13:23:58.047]  - Condition #42: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:58.010] assign_globals() ...
[13:23:58.048]  - Condition #43: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:58.010] List of 3
[13:23:58.010]  $ nested_a:List of 1
[13:23:58.010]   ..$ b:function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())  
[13:23:58.010]   .. ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[13:23:58.010]   .. ..- attr(*, "call")= language plan(list(a = strategy1, b = strategy2))
[13:23:58.010]  $ a       : int 1
[13:23:58.010]  $ plan_a  :List of 1
[13:23:58.010]   ..$ b:function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())  
[13:23:58.010]   .. ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[13:23:58.010]   .. ..- attr(*, "call")= language plan(list(a = strategy1, b = strategy2))
[13:23:58.010]  - attr(*, "where")=List of 3
[13:23:58.010]   ..$ nested_a:<environment: R_EmptyEnv> 
[13:23:58.010]   ..$ a       :<environment: R_EmptyEnv> 
[13:23:58.010]   ..$ plan_a  :<environment: R_EmptyEnv> 
[13:23:58.010]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[13:23:58.010]  - attr(*, "resolved")= logi FALSE
[13:23:58.010]  - attr(*, "total_size")= num 95240
[13:23:58.010]  - attr(*, "already-done")= logi TRUE
[13:23:58.048]  - Condition #44: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:58.015] - copied ‘nested_a’ to environment
[13:23:58.048]  - Condition #45: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:58.015] - copied ‘a’ to environment
[13:23:58.048]  - Condition #46: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:58.015] - copied ‘plan_a’ to environment
[13:23:58.048]  - Condition #47: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:58.015] assign_globals() ... done
[13:23:58.048]  - Condition #48: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:58.015] requestCore(): workers = 2
[13:23:58.049]  - Condition #49: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:58.018] MulticoreFuture started
[13:23:58.049]  - Condition #50: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:58.019] - Launch lazy future ... done
[13:23:58.049]  - Condition #51: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:58.019] run() for ‘MulticoreFuture’ ... done
[13:23:58.049]  - Condition #52: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:58.021] result() for MulticoreFuture ...
[13:23:58.049]  - Condition #53: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:58.033] result() for MulticoreFuture ...
[13:23:58.049]  - Condition #54: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:58.033] result() for MulticoreFuture ... done
[13:23:58.050]  - Condition #55: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:58.033] result() for MulticoreFuture ... done
[13:23:58.050]  - Condition #56: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:58.033] result() for MulticoreFuture ...
[13:23:58.050]  - Condition #57: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:58.033] result() for MulticoreFuture ... done
[13:23:58.050] signalConditions() ... done
List of 6
 $ a       : int 1
 $ nested_a:List of 1
  ..$ b:function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())  
  .. ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
  .. ..- attr(*, "call")= language plan(list(a = strategy1, b = strategy2))
 $ plan_a  :List of 1
  ..$ b:function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())  
  .. ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
  .. ..- attr(*, "call")= language plan(list(a = strategy1, b = strategy2))
 $ b       : int 2
 $ nested_b: Named list()
 $ plan_b  :List of 1
  ..$ :function (..., envir = parent.frame())  
  .. ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
  ..- attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[13:23:58.056] getGlobalsAndPackages() ...
[13:23:58.056] Searching for globals...
[13:23:58.058] - globals found: [7] ‘{’, ‘value’, ‘future’, ‘subset’, ‘data’, ‘==’, ‘a’
[13:23:58.058] Searching for globals ... DONE
[13:23:58.058] Resolving globals: FALSE
[13:23:58.059] The total size of the 1 globals is 128 bytes (128 bytes)
[13:23:58.059] The total size of the 1 globals exported for future expression (‘{; value(future(subset(data, a == 2))); }’) is 128 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘data’ (128 bytes of class ‘list’)
[13:23:58.059] - globals: [1] ‘data’
[13:23:58.059] - packages: [1] ‘future’
[13:23:58.059] getGlobalsAndPackages() ... DONE
[13:23:58.060] run() for ‘Future’ ...
[13:23:58.060] - state: ‘created’
[13:23:58.060] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[13:23:58.060] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[13:23:58.060] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[13:23:58.060]   - Field: ‘label’
[13:23:58.061]   - Field: ‘local’
[13:23:58.061]   - Field: ‘owner’
[13:23:58.061]   - Field: ‘envir’
[13:23:58.061]   - Field: ‘packages’
[13:23:58.061]   - Field: ‘gc’
[13:23:58.061]   - Field: ‘conditions’
[13:23:58.063]   - Field: ‘expr’
[13:23:58.063]   - Field: ‘uuid’
[13:23:58.063]   - Field: ‘seed’
[13:23:58.063]   - Field: ‘version’
[13:23:58.063]   - Field: ‘result’
[13:23:58.063]   - Field: ‘asynchronous’
[13:23:58.063]   - Field: ‘calls’
[13:23:58.064]   - Field: ‘globals’
[13:23:58.064]   - Field: ‘stdout’
[13:23:58.064]   - Field: ‘earlySignal’
[13:23:58.064]   - Field: ‘lazy’
[13:23:58.064]   - Field: ‘state’
[13:23:58.064] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[13:23:58.064] - Launch lazy future ...
[13:23:58.064] Packages needed by the future expression (n = 1): ‘future’
[13:23:58.065] Packages needed by future strategies (n = 1): ‘future’
[13:23:58.065] {
[13:23:58.065]     {
[13:23:58.065]         {
[13:23:58.065]             ...future.startTime <- base::Sys.time()
[13:23:58.065]             {
[13:23:58.065]                 {
[13:23:58.065]                   {
[13:23:58.065]                     {
[13:23:58.065]                       base::local({
[13:23:58.065]                         has_future <- base::requireNamespace("future", 
[13:23:58.065]                           quietly = TRUE)
[13:23:58.065]                         if (has_future) {
[13:23:58.065]                           ns <- base::getNamespace("future")
[13:23:58.065]                           version <- ns[[".package"]][["version"]]
[13:23:58.065]                           if (is.null(version)) 
[13:23:58.065]                             version <- utils::packageVersion("future")
[13:23:58.065]                         }
[13:23:58.065]                         else {
[13:23:58.065]                           version <- NULL
[13:23:58.065]                         }
[13:23:58.065]                         if (!has_future || version < "1.8.0") {
[13:23:58.065]                           info <- base::c(r_version = base::gsub("R version ", 
[13:23:58.065]                             "", base::R.version$version.string), 
[13:23:58.065]                             platform = base::sprintf("%s (%s-bit)", 
[13:23:58.065]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:23:58.065]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:23:58.065]                               "release", "version")], collapse = " "), 
[13:23:58.065]                             hostname = base::Sys.info()[["nodename"]])
[13:23:58.065]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:23:58.065]                             info)
[13:23:58.065]                           info <- base::paste(info, collapse = "; ")
[13:23:58.065]                           if (!has_future) {
[13:23:58.065]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:23:58.065]                               info)
[13:23:58.065]                           }
[13:23:58.065]                           else {
[13:23:58.065]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:23:58.065]                               info, version)
[13:23:58.065]                           }
[13:23:58.065]                           base::stop(msg)
[13:23:58.065]                         }
[13:23:58.065]                       })
[13:23:58.065]                     }
[13:23:58.065]                     base::local({
[13:23:58.065]                       for (pkg in "future") {
[13:23:58.065]                         base::loadNamespace(pkg)
[13:23:58.065]                         base::library(pkg, character.only = TRUE)
[13:23:58.065]                       }
[13:23:58.065]                     })
[13:23:58.065]                   }
[13:23:58.065]                   options(future.plan = NULL)
[13:23:58.065]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:23:58.065]                   future::plan(list(b = function (..., workers = availableCores(constraints = "multicore"), 
[13:23:58.065]                     envir = parent.frame()) 
[13:23:58.065]                   {
[13:23:58.065]                     default_workers <- missing(workers)
[13:23:58.065]                     if (is.function(workers)) 
[13:23:58.065]                       workers <- workers()
[13:23:58.065]                     workers <- structure(as.integer(workers), 
[13:23:58.065]                       class = class(workers))
[13:23:58.065]                     stop_if_not(is.finite(workers), workers >= 
[13:23:58.065]                       1L)
[13:23:58.065]                     if ((workers == 1L && !inherits(workers, 
[13:23:58.065]                       "AsIs")) || !supportsMulticore(warn = TRUE)) {
[13:23:58.065]                       if (default_workers) 
[13:23:58.065]                         supportsMulticore(warn = TRUE)
[13:23:58.065]                       return(sequential(..., envir = envir))
[13:23:58.065]                     }
[13:23:58.065]                     oopts <- options(mc.cores = workers)
[13:23:58.065]                     on.exit(options(oopts))
[13:23:58.065]                     future <- MulticoreFuture(..., workers = workers, 
[13:23:58.065]                       envir = envir)
[13:23:58.065]                     if (!future$lazy) 
[13:23:58.065]                       future <- run(future)
[13:23:58.065]                     invisible(future)
[13:23:58.065]                   }), .cleanup = FALSE, .init = FALSE)
[13:23:58.065]                 }
[13:23:58.065]                 ...future.workdir <- getwd()
[13:23:58.065]             }
[13:23:58.065]             ...future.oldOptions <- base::as.list(base::.Options)
[13:23:58.065]             ...future.oldEnvVars <- base::Sys.getenv()
[13:23:58.065]         }
[13:23:58.065]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:23:58.065]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:23:58.065]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:23:58.065]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:23:58.065]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:23:58.065]             future.stdout.windows.reencode = NULL, width = 80L)
[13:23:58.065]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:23:58.065]             base::names(...future.oldOptions))
[13:23:58.065]     }
[13:23:58.065]     if (FALSE) {
[13:23:58.065]     }
[13:23:58.065]     else {
[13:23:58.065]         if (TRUE) {
[13:23:58.065]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:23:58.065]                 open = "w")
[13:23:58.065]         }
[13:23:58.065]         else {
[13:23:58.065]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:23:58.065]                 windows = "NUL", "/dev/null"), open = "w")
[13:23:58.065]         }
[13:23:58.065]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:23:58.065]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:23:58.065]             base::sink(type = "output", split = FALSE)
[13:23:58.065]             base::close(...future.stdout)
[13:23:58.065]         }, add = TRUE)
[13:23:58.065]     }
[13:23:58.065]     ...future.frame <- base::sys.nframe()
[13:23:58.065]     ...future.conditions <- base::list()
[13:23:58.065]     ...future.rng <- base::globalenv()$.Random.seed
[13:23:58.065]     if (FALSE) {
[13:23:58.065]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:23:58.065]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:23:58.065]     }
[13:23:58.065]     ...future.result <- base::tryCatch({
[13:23:58.065]         base::withCallingHandlers({
[13:23:58.065]             ...future.value <- base::withVisible(base::local({
[13:23:58.065]                 value(future(subset(data, a == 2)))
[13:23:58.065]             }))
[13:23:58.065]             future::FutureResult(value = ...future.value$value, 
[13:23:58.065]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:23:58.065]                   ...future.rng), globalenv = if (FALSE) 
[13:23:58.065]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:23:58.065]                     ...future.globalenv.names))
[13:23:58.065]                 else NULL, started = ...future.startTime, version = "1.8")
[13:23:58.065]         }, condition = base::local({
[13:23:58.065]             c <- base::c
[13:23:58.065]             inherits <- base::inherits
[13:23:58.065]             invokeRestart <- base::invokeRestart
[13:23:58.065]             length <- base::length
[13:23:58.065]             list <- base::list
[13:23:58.065]             seq.int <- base::seq.int
[13:23:58.065]             signalCondition <- base::signalCondition
[13:23:58.065]             sys.calls <- base::sys.calls
[13:23:58.065]             `[[` <- base::`[[`
[13:23:58.065]             `+` <- base::`+`
[13:23:58.065]             `<<-` <- base::`<<-`
[13:23:58.065]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:23:58.065]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:23:58.065]                   3L)]
[13:23:58.065]             }
[13:23:58.065]             function(cond) {
[13:23:58.065]                 is_error <- inherits(cond, "error")
[13:23:58.065]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:23:58.065]                   NULL)
[13:23:58.065]                 if (is_error) {
[13:23:58.065]                   sessionInformation <- function() {
[13:23:58.065]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:23:58.065]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:23:58.065]                       search = base::search(), system = base::Sys.info())
[13:23:58.065]                   }
[13:23:58.065]                   ...future.conditions[[length(...future.conditions) + 
[13:23:58.065]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:23:58.065]                     cond$call), session = sessionInformation(), 
[13:23:58.065]                     timestamp = base::Sys.time(), signaled = 0L)
[13:23:58.065]                   signalCondition(cond)
[13:23:58.065]                 }
[13:23:58.065]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:23:58.065]                 "immediateCondition"))) {
[13:23:58.065]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:23:58.065]                   ...future.conditions[[length(...future.conditions) + 
[13:23:58.065]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:23:58.065]                   if (TRUE && !signal) {
[13:23:58.065]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:23:58.065]                     {
[13:23:58.065]                       inherits <- base::inherits
[13:23:58.065]                       invokeRestart <- base::invokeRestart
[13:23:58.065]                       is.null <- base::is.null
[13:23:58.065]                       muffled <- FALSE
[13:23:58.065]                       if (inherits(cond, "message")) {
[13:23:58.065]                         muffled <- grepl(pattern, "muffleMessage")
[13:23:58.065]                         if (muffled) 
[13:23:58.065]                           invokeRestart("muffleMessage")
[13:23:58.065]                       }
[13:23:58.065]                       else if (inherits(cond, "warning")) {
[13:23:58.065]                         muffled <- grepl(pattern, "muffleWarning")
[13:23:58.065]                         if (muffled) 
[13:23:58.065]                           invokeRestart("muffleWarning")
[13:23:58.065]                       }
[13:23:58.065]                       else if (inherits(cond, "condition")) {
[13:23:58.065]                         if (!is.null(pattern)) {
[13:23:58.065]                           computeRestarts <- base::computeRestarts
[13:23:58.065]                           grepl <- base::grepl
[13:23:58.065]                           restarts <- computeRestarts(cond)
[13:23:58.065]                           for (restart in restarts) {
[13:23:58.065]                             name <- restart$name
[13:23:58.065]                             if (is.null(name)) 
[13:23:58.065]                               next
[13:23:58.065]                             if (!grepl(pattern, name)) 
[13:23:58.065]                               next
[13:23:58.065]                             invokeRestart(restart)
[13:23:58.065]                             muffled <- TRUE
[13:23:58.065]                             break
[13:23:58.065]                           }
[13:23:58.065]                         }
[13:23:58.065]                       }
[13:23:58.065]                       invisible(muffled)
[13:23:58.065]                     }
[13:23:58.065]                     muffleCondition(cond, pattern = "^muffle")
[13:23:58.065]                   }
[13:23:58.065]                 }
[13:23:58.065]                 else {
[13:23:58.065]                   if (TRUE) {
[13:23:58.065]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:23:58.065]                     {
[13:23:58.065]                       inherits <- base::inherits
[13:23:58.065]                       invokeRestart <- base::invokeRestart
[13:23:58.065]                       is.null <- base::is.null
[13:23:58.065]                       muffled <- FALSE
[13:23:58.065]                       if (inherits(cond, "message")) {
[13:23:58.065]                         muffled <- grepl(pattern, "muffleMessage")
[13:23:58.065]                         if (muffled) 
[13:23:58.065]                           invokeRestart("muffleMessage")
[13:23:58.065]                       }
[13:23:58.065]                       else if (inherits(cond, "warning")) {
[13:23:58.065]                         muffled <- grepl(pattern, "muffleWarning")
[13:23:58.065]                         if (muffled) 
[13:23:58.065]                           invokeRestart("muffleWarning")
[13:23:58.065]                       }
[13:23:58.065]                       else if (inherits(cond, "condition")) {
[13:23:58.065]                         if (!is.null(pattern)) {
[13:23:58.065]                           computeRestarts <- base::computeRestarts
[13:23:58.065]                           grepl <- base::grepl
[13:23:58.065]                           restarts <- computeRestarts(cond)
[13:23:58.065]                           for (restart in restarts) {
[13:23:58.065]                             name <- restart$name
[13:23:58.065]                             if (is.null(name)) 
[13:23:58.065]                               next
[13:23:58.065]                             if (!grepl(pattern, name)) 
[13:23:58.065]                               next
[13:23:58.065]                             invokeRestart(restart)
[13:23:58.065]                             muffled <- TRUE
[13:23:58.065]                             break
[13:23:58.065]                           }
[13:23:58.065]                         }
[13:23:58.065]                       }
[13:23:58.065]                       invisible(muffled)
[13:23:58.065]                     }
[13:23:58.065]                     muffleCondition(cond, pattern = "^muffle")
[13:23:58.065]                   }
[13:23:58.065]                 }
[13:23:58.065]             }
[13:23:58.065]         }))
[13:23:58.065]     }, error = function(ex) {
[13:23:58.065]         base::structure(base::list(value = NULL, visible = NULL, 
[13:23:58.065]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:23:58.065]                 ...future.rng), started = ...future.startTime, 
[13:23:58.065]             finished = Sys.time(), session_uuid = NA_character_, 
[13:23:58.065]             version = "1.8"), class = "FutureResult")
[13:23:58.065]     }, finally = {
[13:23:58.065]         if (!identical(...future.workdir, getwd())) 
[13:23:58.065]             setwd(...future.workdir)
[13:23:58.065]         {
[13:23:58.065]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:23:58.065]                 ...future.oldOptions$nwarnings <- NULL
[13:23:58.065]             }
[13:23:58.065]             base::options(...future.oldOptions)
[13:23:58.065]             if (.Platform$OS.type == "windows") {
[13:23:58.065]                 old_names <- names(...future.oldEnvVars)
[13:23:58.065]                 envs <- base::Sys.getenv()
[13:23:58.065]                 names <- names(envs)
[13:23:58.065]                 common <- intersect(names, old_names)
[13:23:58.065]                 added <- setdiff(names, old_names)
[13:23:58.065]                 removed <- setdiff(old_names, names)
[13:23:58.065]                 changed <- common[...future.oldEnvVars[common] != 
[13:23:58.065]                   envs[common]]
[13:23:58.065]                 NAMES <- toupper(changed)
[13:23:58.065]                 args <- list()
[13:23:58.065]                 for (kk in seq_along(NAMES)) {
[13:23:58.065]                   name <- changed[[kk]]
[13:23:58.065]                   NAME <- NAMES[[kk]]
[13:23:58.065]                   if (name != NAME && is.element(NAME, old_names)) 
[13:23:58.065]                     next
[13:23:58.065]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:23:58.065]                 }
[13:23:58.065]                 NAMES <- toupper(added)
[13:23:58.065]                 for (kk in seq_along(NAMES)) {
[13:23:58.065]                   name <- added[[kk]]
[13:23:58.065]                   NAME <- NAMES[[kk]]
[13:23:58.065]                   if (name != NAME && is.element(NAME, old_names)) 
[13:23:58.065]                     next
[13:23:58.065]                   args[[name]] <- ""
[13:23:58.065]                 }
[13:23:58.065]                 NAMES <- toupper(removed)
[13:23:58.065]                 for (kk in seq_along(NAMES)) {
[13:23:58.065]                   name <- removed[[kk]]
[13:23:58.065]                   NAME <- NAMES[[kk]]
[13:23:58.065]                   if (name != NAME && is.element(NAME, old_names)) 
[13:23:58.065]                     next
[13:23:58.065]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:23:58.065]                 }
[13:23:58.065]                 if (length(args) > 0) 
[13:23:58.065]                   base::do.call(base::Sys.setenv, args = args)
[13:23:58.065]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:23:58.065]             }
[13:23:58.065]             else {
[13:23:58.065]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:23:58.065]             }
[13:23:58.065]             {
[13:23:58.065]                 if (base::length(...future.futureOptionsAdded) > 
[13:23:58.065]                   0L) {
[13:23:58.065]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:23:58.065]                   base::names(opts) <- ...future.futureOptionsAdded
[13:23:58.065]                   base::options(opts)
[13:23:58.065]                 }
[13:23:58.065]                 {
[13:23:58.065]                   {
[13:23:58.065]                     NULL
[13:23:58.065]                     RNGkind("Mersenne-Twister")
[13:23:58.065]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[13:23:58.065]                       inherits = FALSE)
[13:23:58.065]                   }
[13:23:58.065]                   options(future.plan = NULL)
[13:23:58.065]                   if (is.na(NA_character_)) 
[13:23:58.065]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:23:58.065]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:23:58.065]                   future::plan(list(a = function (..., envir = parent.frame()) 
[13:23:58.065]                   {
[13:23:58.065]                     future <- SequentialFuture(..., envir = envir)
[13:23:58.065]                     if (!future$lazy) 
[13:23:58.065]                       future <- run(future)
[13:23:58.065]                     invisible(future)
[13:23:58.065]                   }, b = function (..., workers = availableCores(constraints = "multicore"), 
[13:23:58.065]                     envir = parent.frame()) 
[13:23:58.065]                   {
[13:23:58.065]                     default_workers <- missing(workers)
[13:23:58.065]                     if (is.function(workers)) 
[13:23:58.065]                       workers <- workers()
[13:23:58.065]                     workers <- structure(as.integer(workers), 
[13:23:58.065]                       class = class(workers))
[13:23:58.065]                     stop_if_not(is.finite(workers), workers >= 
[13:23:58.065]                       1L)
[13:23:58.065]                     if ((workers == 1L && !inherits(workers, 
[13:23:58.065]                       "AsIs")) || !supportsMulticore(warn = TRUE)) {
[13:23:58.065]                       if (default_workers) 
[13:23:58.065]                         supportsMulticore(warn = TRUE)
[13:23:58.065]                       return(sequential(..., envir = envir))
[13:23:58.065]                     }
[13:23:58.065]                     oopts <- options(mc.cores = workers)
[13:23:58.065]                     on.exit(options(oopts))
[13:23:58.065]                     future <- MulticoreFuture(..., workers = workers, 
[13:23:58.065]                       envir = envir)
[13:23:58.065]                     if (!future$lazy) 
[13:23:58.065]                       future <- run(future)
[13:23:58.065]                     invisible(future)
[13:23:58.065]                   }), .cleanup = FALSE, .init = FALSE)
[13:23:58.065]                 }
[13:23:58.065]             }
[13:23:58.065]         }
[13:23:58.065]     })
[13:23:58.065]     if (TRUE) {
[13:23:58.065]         base::sink(type = "output", split = FALSE)
[13:23:58.065]         if (TRUE) {
[13:23:58.065]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:23:58.065]         }
[13:23:58.065]         else {
[13:23:58.065]             ...future.result["stdout"] <- base::list(NULL)
[13:23:58.065]         }
[13:23:58.065]         base::close(...future.stdout)
[13:23:58.065]         ...future.stdout <- NULL
[13:23:58.065]     }
[13:23:58.065]     ...future.result$conditions <- ...future.conditions
[13:23:58.065]     ...future.result$finished <- base::Sys.time()
[13:23:58.065]     ...future.result
[13:23:58.065] }
[13:23:58.067] assign_globals() ...
[13:23:58.067] List of 1
[13:23:58.067]  $ data:'data.frame':	3 obs. of  2 variables:
[13:23:58.067]   ..$ a: int [1:3] 1 2 3
[13:23:58.067]   ..$ b: int [1:3] 3 2 1
[13:23:58.067]  - attr(*, "where")=List of 1
[13:23:58.067]   ..$ data:<environment: R_EmptyEnv> 
[13:23:58.067]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[13:23:58.067]  - attr(*, "resolved")= logi FALSE
[13:23:58.067]  - attr(*, "total_size")= num 128
[13:23:58.067]  - attr(*, "already-done")= logi TRUE
[13:23:58.070] - copied ‘data’ to environment
[13:23:58.071] assign_globals() ... done
[13:23:58.071] plan(): Setting new future strategy stack:
[13:23:58.071] List of future strategies:
[13:23:58.071] 1. multicore:
[13:23:58.071]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[13:23:58.071]    - tweaked: FALSE
[13:23:58.071]    - call: plan(list(a = strategy1, b = strategy2))
[13:23:58.075] plan(): nbrOfWorkers() = 2
[13:23:58.122] plan(): Setting new future strategy stack:
[13:23:58.122] List of future strategies:
[13:23:58.122] 1. sequential:
[13:23:58.122]    - args: function (..., envir = parent.frame())
[13:23:58.122]    - tweaked: FALSE
[13:23:58.122]    - call: plan(list(a = strategy1, b = strategy2))
[13:23:58.122] 2. multicore:
[13:23:58.122]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[13:23:58.122]    - tweaked: FALSE
[13:23:58.122]    - call: plan(list(a = strategy1, b = strategy2))
[13:23:58.123] plan(): nbrOfWorkers() = 1
[13:23:58.123] SequentialFuture started (and completed)
[13:23:58.124] signalConditions() ...
[13:23:58.124]  - include = ‘immediateCondition’
[13:23:58.124]  - exclude = 
[13:23:58.124]  - resignal = FALSE
[13:23:58.124]  - Number of conditions: 55
[13:23:58.124] signalConditions() ... done
[13:23:58.124] - Launch lazy future ... done
[13:23:58.125] run() for ‘SequentialFuture’ ... done
[13:23:58.125] signalConditions() ...
[13:23:58.125]  - include = ‘immediateCondition’
[13:23:58.125]  - exclude = 
[13:23:58.125]  - resignal = FALSE
[13:23:58.125]  - Number of conditions: 55
[13:23:58.125] signalConditions() ... done
[13:23:58.128] Future state: ‘finished’
[13:23:58.128] signalConditions() ...
[13:23:58.128]  - include = ‘condition’
[13:23:58.128]  - exclude = ‘immediateCondition’
[13:23:58.128]  - resignal = TRUE
[13:23:58.129]  - Number of conditions: 55
[13:23:58.129]  - Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:58.076] getGlobalsAndPackages() ...
[13:23:58.129]  - Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:58.076] Searching for globals...
[13:23:58.129]  - Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:58.092] - globals found: [4] ‘subset’, ‘data’, ‘==’, ‘a’
[13:23:58.129]  - Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:58.092] Searching for globals ... DONE
[13:23:58.130]  - Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:58.092] Resolving globals: FALSE
[13:23:58.130]  - Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:58.092] The total size of the 1 globals is 128 bytes (128 bytes)
[13:23:58.130]  - Condition #7: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:58.093] The total size of the 1 globals exported for future expression (‘subset(data, a == 2)’) is 128 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘data’ (128 bytes of class ‘list’)
[13:23:58.130]  - Condition #8: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:58.093] - globals: [1] ‘data’
[13:23:58.130]  - Condition #9: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:58.093] 
[13:23:58.131]  - Condition #10: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:58.093] getGlobalsAndPackages() ... DONE
[13:23:58.131]  - Condition #11: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:58.093] run() for ‘Future’ ...
[13:23:58.131]  - Condition #12: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:58.094] - state: ‘created’
[13:23:58.131]  - Condition #13: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:58.094] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[13:23:58.131]  - Condition #14: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:58.098] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:23:58.131]  - Condition #15: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:58.098] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[13:23:58.132]  - Condition #16: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:58.098]   - Field: ‘label’
[13:23:58.132]  - Condition #17: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:58.098]   - Field: ‘local’
[13:23:58.132]  - Condition #18: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:58.098]   - Field: ‘owner’
[13:23:58.132]  - Condition #19: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:58.099]   - Field: ‘envir’
[13:23:58.132]  - Condition #20: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:58.099]   - Field: ‘workers’
[13:23:58.133]  - Condition #21: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:58.099]   - Field: ‘packages’
[13:23:58.133]  - Condition #22: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:58.099]   - Field: ‘gc’
[13:23:58.133]  - Condition #23: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:58.099]   - Field: ‘job’
[13:23:58.133]  - Condition #24: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:58.099]   - Field: ‘conditions’
[13:23:58.133]  - Condition #25: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:58.099]   - Field: ‘expr’
[13:23:58.133]  - Condition #26: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:58.099]   - Field: ‘uuid’
[13:23:58.134]  - Condition #27: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:58.100]   - Field: ‘seed’
[13:23:58.134]  - Condition #28: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:58.100]   - Field: ‘version’
[13:23:58.134]  - Condition #29: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:58.100]   - Field: ‘result’
[13:23:58.134]  - Condition #30: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:58.100]   - Field: ‘asynchronous’
[13:23:58.134]  - Condition #31: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:58.100]   - Field: ‘calls’
[13:23:58.134]  - Condition #32: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:58.100]   - Field: ‘globals’
[13:23:58.135]  - Condition #33: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:58.100]   - Field: ‘stdout’
[13:23:58.135]  - Condition #34: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:58.100]   - Field: ‘earlySignal’
[13:23:58.135]  - Condition #35: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:58.101]   - Field: ‘lazy’
[13:23:58.135]  - Condition #36: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:58.101]   - Field: ‘state’
[13:23:58.135]  - Condition #37: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:58.101] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[13:23:58.135]  - Condition #38: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:58.101] - Launch lazy future ...
[13:23:58.136]  - Condition #39: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:58.101] Packages needed by the future expression (n = 0): <none>
[13:23:58.136]  - Condition #40: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:58.101] Packages needed by future strategies (n = 0): <none>
[13:23:58.136]  - Condition #41: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:58.102] {
[13:23:58.102]     {
[13:23:58.102]         {
[13:23:58.102]             ...future.startTime <- base::Sys.time()
[13:23:58.102]             {
[13:23:58.102]                 {
[13:23:58.102]                   {
[13:23:58.102]                     {
[13:23:58.102]                       base::local({
[13:23:58.102]                         has_future <- base::requireNamespace("future", 
[13:23:58.102]                           quietly = TRUE)
[13:23:58.102]                         if (has_future) {
[13:23:58.102]                           ns <- base::getNamespace("future")
[13:23:58.102]                           version <- ns[[".package"]][["version"]]
[13:23:58.102]                           if (is.null(version)) 
[13:23:58.102]                             version <- utils::packageVersion("future")
[13:23:58.102]                         }
[13:23:58.102]                         else {
[13:23:58.102]                           version <- NULL
[13:23:58.102]                         }
[13:23:58.102]                         if (!has_future || version < "1.8.0") {
[13:23:58.102]                           info <- base::c(r_version = base::gsub("R version ", 
[13:23:58.102]                             "", base::R.version$version.string), 
[13:23:58.102]                             platform = base::sprintf("%s (%s-bit)", 
[13:23:58.102]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:23:58.102]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:23:58.102]                               "release", "version")], collapse = " "), 
[13:23:58.102]                             hostname = base::Sys.info()[["nodename"]])
[13:23:58.102]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:23:58.102]                             info)
[13:23:58.102]                           info <- base::paste(info, collapse = "; ")
[13:23:58.102]                           if (!has_future) {
[13:23:58.102]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:23:58.102]                               info)
[13:23:58.102]                           }
[13:23:58.102]                           else {
[13:23:58.102]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:23:58.102]                               info, version)
[13:23:58.102]                           }
[13:23:58.102]                           base::stop(msg)
[13:23:58.102]                         }
[13:23:58.102]                       })
[13:23:58.102]                     }
[13:23:58.102]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[13:23:58.102]                     base::options(mc.cores = 1L)
[13:23:58.102]                   }
[13:23:58.102]                   options(future.plan = NULL)
[13:23:58.102]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:23:58.102]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:23:58.102]                 }
[13:23:58.102]                 ...future.workdir <- getwd()
[13:23:58.102]             }
[13:23:58.102]             ...future.oldOptions <- base::as.list(base::.Options)
[13:23:58.102]             ...future.oldEnvVars <- base::Sys.getenv()
[13:23:58.102]         }
[13:23:58.102]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:23:58.102]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:23:58.102]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:23:58.102]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:23:58.102]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:23:58.102]             future.stdout.windows.reencode = NULL, width = 80L)
[13:23:58.102]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:23:58.102]             base::names(...future.oldOptions))
[13:23:58.102]     }
[13:23:58.102]     if (FALSE) {
[13:23:58.102]     }
[13:23:58.102]     else {
[13:23:58.102]         if (TRUE) {
[13:23:58.102]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:23:58.102]                 open = "w")
[13:23:58.102]         }
[13:23:58.102]         else {
[13:23:58.102]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:23:58.102]                 windows = "NUL", "/dev/null"), open = "w")
[13:23:58.102]         }
[13:23:58.102]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:23:58.102]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:23:58.102]             base::sink(type = "output", split = FALSE)
[13:23:58.102]             base::close(...future.stdout)
[13:23:58.102]         }, add = TRUE)
[13:23:58.102]     }
[13:23:58.102]     ...future.frame <- base::sys.nframe()
[13:23:58.102]     ...future.conditions <- base::list()
[13:23:58.102]     ...future.rng <- base::globalenv()$.Random.seed
[13:23:58.102]     if (FALSE) {
[13:23:58.102]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:23:58.102]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:23:58.102]     }
[13:23:58.102]     ...future.result <- base::tryCatch({
[13:23:58.102]         base::withCallingHandlers({
[13:23:58.102]             ...future.value <- base::withVisible(base::local({
[13:23:58.102]                 withCallingHandlers({
[13:23:58.102]                   subset(data, a == 2)
[13:23:58.102]                 }, immediateCondition = function(cond) {
[13:23:58.102]                   save_rds <- function (object, pathname, ...) 
[13:23:58.102]                   {
[13:23:58.102]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[13:23:58.102]                     if (file_test("-f", pathname_tmp)) {
[13:23:58.102]                       fi_tmp <- file.info(pathname_tmp)
[13:23:58.102]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[13:23:58.102]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:23:58.102]                         fi_tmp[["mtime"]])
[13:23:58.102]                     }
[13:23:58.102]                     tryCatch({
[13:23:58.102]                       saveRDS(object, file = pathname_tmp, ...)
[13:23:58.102]                     }, error = function(ex) {
[13:23:58.102]                       msg <- conditionMessage(ex)
[13:23:58.102]                       fi_tmp <- file.info(pathname_tmp)
[13:23:58.102]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[13:23:58.102]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:23:58.102]                         fi_tmp[["mtime"]], msg)
[13:23:58.102]                       ex$message <- msg
[13:23:58.102]                       stop(ex)
[13:23:58.102]                     })
[13:23:58.102]                     stopifnot(file_test("-f", pathname_tmp))
[13:23:58.102]                     res <- file.rename(from = pathname_tmp, to = pathname)
[13:23:58.102]                     if (!res || file_test("-f", pathname_tmp)) {
[13:23:58.102]                       fi_tmp <- file.info(pathname_tmp)
[13:23:58.102]                       fi <- file.info(pathname)
[13:23:58.102]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[13:23:58.102]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:23:58.102]                         fi_tmp[["mtime"]], sQuote(pathname), 
[13:23:58.102]                         fi[["size"]], fi[["mtime"]])
[13:23:58.102]                       stop(msg)
[13:23:58.102]                     }
[13:23:58.102]                     invisible(pathname)
[13:23:58.102]                   }
[13:23:58.102]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[13:23:58.102]                     rootPath = tempdir()) 
[13:23:58.102]                   {
[13:23:58.102]                     obj <- list(time = Sys.time(), condition = cond)
[13:23:58.102]                     file <- tempfile(pattern = class(cond)[1], 
[13:23:58.102]                       tmpdir = path, fileext = ".rds")
[13:23:58.102]                     save_rds(obj, file)
[13:23:58.102]                   }
[13:23:58.102]                   saveImmediateCondition(cond, path = "/tmp/RtmpKOlrlL/.future/immediateConditions")
[13:23:58.102]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:23:58.102]                   {
[13:23:58.102]                     inherits <- base::inherits
[13:23:58.102]                     invokeRestart <- base::invokeRestart
[13:23:58.102]                     is.null <- base::is.null
[13:23:58.102]                     muffled <- FALSE
[13:23:58.102]                     if (inherits(cond, "message")) {
[13:23:58.102]                       muffled <- grepl(pattern, "muffleMessage")
[13:23:58.102]                       if (muffled) 
[13:23:58.102]                         invokeRestart("muffleMessage")
[13:23:58.102]                     }
[13:23:58.102]                     else if (inherits(cond, "warning")) {
[13:23:58.102]                       muffled <- grepl(pattern, "muffleWarning")
[13:23:58.102]                       if (muffled) 
[13:23:58.102]                         invokeRestart("muffleWarning")
[13:23:58.102]                     }
[13:23:58.102]                     else if (inherits(cond, "condition")) {
[13:23:58.102]                       if (!is.null(pattern)) {
[13:23:58.102]                         computeRestarts <- base::computeRestarts
[13:23:58.102]                         grepl <- base::grepl
[13:23:58.102]                         restarts <- computeRestarts(cond)
[13:23:58.102]                         for (restart in restarts) {
[13:23:58.102]                           name <- restart$name
[13:23:58.102]                           if (is.null(name)) 
[13:23:58.102]                             next
[13:23:58.102]                           if (!grepl(pattern, name)) 
[13:23:58.102]                             next
[13:23:58.102]                           invokeRestart(restart)
[13:23:58.102]                           muffled <- TRUE
[13:23:58.102]                           break
[13:23:58.102]                         }
[13:23:58.102]                       }
[13:23:58.102]                     }
[13:23:58.102]                     invisible(muffled)
[13:23:58.102]                   }
[13:23:58.102]                   muffleCondition(cond)
[13:23:58.102]                 })
[13:23:58.102]             }))
[13:23:58.102]             future::FutureResult(value = ...future.value$value, 
[13:23:58.102]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:23:58.102]                   ...future.rng), globalenv = if (FALSE) 
[13:23:58.102]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:23:58.102]                     ...future.globalenv.names))
[13:23:58.102]                 else NULL, started = ...future.startTime, version = "1.8")
[13:23:58.102]         }, condition = base::local({
[13:23:58.102]             c <- base::c
[13:23:58.102]             inherits <- base::inherits
[13:23:58.102]             invokeRestart <- base::invokeRestart
[13:23:58.102]             length <- base::length
[13:23:58.102]             list <- base::list
[13:23:58.102]             seq.int <- base::seq.int
[13:23:58.102]             signalCondition <- base::signalCondition
[13:23:58.102]             sys.calls <- base::sys.calls
[13:23:58.102]             `[[` <- base::`[[`
[13:23:58.102]             `+` <- base::`+`
[13:23:58.102]             `<<-` <- base::`<<-`
[13:23:58.102]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:23:58.102]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:23:58.102]                   3L)]
[13:23:58.102]             }
[13:23:58.102]             function(cond) {
[13:23:58.102]                 is_error <- inherits(cond, "error")
[13:23:58.102]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:23:58.102]                   NULL)
[13:23:58.102]                 if (is_error) {
[13:23:58.102]                   sessionInformation <- function() {
[13:23:58.102]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:23:58.102]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:23:58.102]                       search = base::search(), system = base::Sys.info())
[13:23:58.102]                   }
[13:23:58.102]                   ...future.conditions[[length(...future.conditions) + 
[13:23:58.102]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:23:58.102]                     cond$call), session = sessionInformation(), 
[13:23:58.102]                     timestamp = base::Sys.time(), signaled = 0L)
[13:23:58.102]                   signalCondition(cond)
[13:23:58.102]                 }
[13:23:58.102]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:23:58.102]                 "immediateCondition"))) {
[13:23:58.102]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:23:58.102]                   ...future.conditions[[length(...future.conditions) + 
[13:23:58.102]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:23:58.102]                   if (TRUE && !signal) {
[13:23:58.102]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:23:58.102]                     {
[13:23:58.102]                       inherits <- base::inherits
[13:23:58.102]                       invokeRestart <- base::invokeRestart
[13:23:58.102]                       is.null <- base::is.null
[13:23:58.102]                       muffled <- FALSE
[13:23:58.102]                       if (inherits(cond, "message")) {
[13:23:58.102]                         muffled <- grepl(pattern, "muffleMessage")
[13:23:58.102]                         if (muffled) 
[13:23:58.102]                           invokeRestart("muffleMessage")
[13:23:58.102]                       }
[13:23:58.102]                       else if (inherits(cond, "warning")) {
[13:23:58.102]                         muffled <- grepl(pattern, "muffleWarning")
[13:23:58.102]                         if (muffled) 
[13:23:58.102]                           invokeRestart("muffleWarning")
[13:23:58.102]                       }
[13:23:58.102]                       else if (inherits(cond, "condition")) {
[13:23:58.102]                         if (!is.null(pattern)) {
[13:23:58.102]                           computeRestarts <- base::computeRestarts
[13:23:58.102]                           grepl <- base::grepl
[13:23:58.102]                           restarts <- computeRestarts(cond)
[13:23:58.102]                           for (restart in restarts) {
[13:23:58.102]                             name <- restart$name
[13:23:58.102]                             if (is.null(name)) 
[13:23:58.102]                               next
[13:23:58.102]                             if (!grepl(pattern, name)) 
[13:23:58.102]                               next
[13:23:58.102]                             invokeRestart(restart)
[13:23:58.102]                             muffled <- TRUE
[13:23:58.102]                             break
[13:23:58.102]                           }
[13:23:58.102]                         }
[13:23:58.102]                       }
[13:23:58.102]                       invisible(muffled)
[13:23:58.102]                     }
[13:23:58.102]                     muffleCondition(cond, pattern = "^muffle")
[13:23:58.102]                   }
[13:23:58.102]                 }
[13:23:58.102]                 else {
[13:23:58.102]                   if (TRUE) {
[13:23:58.102]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:23:58.102]                     {
[13:23:58.102]                       inherits <- base::inherits
[13:23:58.102]                       invokeRestart <- base::invokeRestart
[13:23:58.102]                       is.null <- base::is.null
[13:23:58.102]                       muffled <- FALSE
[13:23:58.102]                       if (inherits(cond, "message")) {
[13:23:58.102]                         muffled <- grepl(pattern, "muffleMessage")
[13:23:58.102]                         if (muffled) 
[13:23:58.102]                           invokeRestart("muffleMessage")
[13:23:58.102]                       }
[13:23:58.102]                       else if (inherits(cond, "warning")) {
[13:23:58.102]                         muffled <- grepl(pattern, "muffleWarning")
[13:23:58.102]                         if (muffled) 
[13:23:58.102]                           invokeRestart("muffleWarning")
[13:23:58.102]                       }
[13:23:58.102]                       else if (inherits(cond, "condition")) {
[13:23:58.102]                         if (!is.null(pattern)) {
[13:23:58.102]                           computeRestarts <- base::computeRestarts
[13:23:58.102]                           grepl <- base::grepl
[13:23:58.102]                           restarts <- computeRestarts(cond)
[13:23:58.102]                           for (restart in restarts) {
[13:23:58.102]                             name <- restart$name
[13:23:58.102]                             if (is.null(name)) 
[13:23:58.102]                               next
[13:23:58.102]                             if (!grepl(pattern, name)) 
[13:23:58.102]                               next
[13:23:58.102]                             invokeRestart(restart)
[13:23:58.102]                             muffled <- TRUE
[13:23:58.102]                             break
[13:23:58.102]                           }
[13:23:58.102]                         }
[13:23:58.102]                       }
[13:23:58.102]                       invisible(muffled)
[13:23:58.102]                     }
[13:23:58.102]                     muffleCondition(cond, pattern = "^muffle")
[13:23:58.102]                   }
[13:23:58.102]                 }
[13:23:58.102]             }
[13:23:58.102]         }))
[13:23:58.102]     }, error = function(ex) {
[13:23:58.102]         base::structure(base::list(value = NULL, visible = NULL, 
[13:23:58.102]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:23:58.102]                 ...future.rng), started = ...future.startTime, 
[13:23:58.102]             finished = Sys.time(), session_uuid = NA_character_, 
[13:23:58.102]             version = "1.8"), class = "FutureResult")
[13:23:58.102]     }, finally = {
[13:23:58.102]         if (!identical(...future.workdir, getwd())) 
[13:23:58.102]             setwd(...future.workdir)
[13:23:58.102]         {
[13:23:58.102]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:23:58.102]                 ...future.oldOptions$nwarnings <- NULL
[13:23:58.102]             }
[13:23:58.102]             base::options(...future.oldOptions)
[13:23:58.102]             if (.Platform$OS.type == "windows") {
[13:23:58.102]                 old_names <- names(...future.oldEnvVars)
[13:23:58.102]                 envs <- base::Sys.getenv()
[13:23:58.102]                 names <- names(envs)
[13:23:58.102]                 common <- intersect(names, old_names)
[13:23:58.102]                 added <- setdiff(names, old_names)
[13:23:58.102]                 removed <- setdiff(old_names, names)
[13:23:58.102]                 changed <- common[...future.oldEnvVars[common] != 
[13:23:58.102]                   envs[common]]
[13:23:58.102]                 NAMES <- toupper(changed)
[13:23:58.102]                 args <- list()
[13:23:58.102]                 for (kk in seq_along(NAMES)) {
[13:23:58.102]                   name <- changed[[kk]]
[13:23:58.102]                   NAME <- NAMES[[kk]]
[13:23:58.102]                   if (name != NAME && is.element(NAME, old_names)) 
[13:23:58.102]                     next
[13:23:58.102]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:23:58.102]                 }
[13:23:58.102]                 NAMES <- toupper(added)
[13:23:58.102]                 for (kk in seq_along(NAMES)) {
[13:23:58.102]                   name <- added[[kk]]
[13:23:58.102]                   NAME <- NAMES[[kk]]
[13:23:58.102]                   if (name != NAME && is.element(NAME, old_names)) 
[13:23:58.102]                     next
[13:23:58.102]                   args[[name]] <- ""
[13:23:58.102]                 }
[13:23:58.102]                 NAMES <- toupper(removed)
[13:23:58.102]                 for (kk in seq_along(NAMES)) {
[13:23:58.102]                   name <- removed[[kk]]
[13:23:58.102]                   NAME <- NAMES[[kk]]
[13:23:58.102]                   if (name != NAME && is.element(NAME, old_names)) 
[13:23:58.102]                     next
[13:23:58.102]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:23:58.102]                 }
[13:23:58.102]                 if (length(args) > 0) 
[13:23:58.102]                   base::do.call(base::Sys.setenv, args = args)
[13:23:58.102]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:23:58.102]             }
[13:23:58.102]             else {
[13:23:58.102]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:23:58.102]             }
[13:23:58.102]             {
[13:23:58.102]                 if (base::length(...future.futureOptionsAdded) > 
[13:23:58.102]                   0L) {
[13:23:58.102]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:23:58.102]                   base::names(opts) <- ...future.futureOptionsAdded
[13:23:58.102]                   base::options(opts)
[13:23:58.102]                 }
[13:23:58.102]                 {
[13:23:58.102]                   {
[13:23:58.102]                     base::options(mc.cores = ...future.mc.cores.old)
[13:23:58.102]                     NULL
[13:23:58.102]                   }
[13:23:58.102]                   options(future.plan = NULL)
[13:23:58.102]                   if (is.na(NA_character_)) 
[13:23:58.102]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:23:58.102]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:23:58.102]                   future::plan(list(b = function (..., workers = availableCores(constraints = "multicore"), 
[13:23:58.102]                     envir = parent.frame()) 
[13:23:58.102]                   {
[13:23:58.102]                     default_workers <- missing(workers)
[13:23:58.102]                     if (is.function(workers)) 
[13:23:58.102]                       workers <- workers()
[13:23:58.102]                     workers <- structure(as.integer(workers), 
[13:23:58.102]                       class = class(workers))
[13:23:58.102]                     stop_if_not(is.finite(workers), workers >= 
[13:23:58.102]                       1L)
[13:23:58.102]                     if ((workers == 1L && !inherits(workers, 
[13:23:58.102]                       "AsIs")) || !supportsMulticore(warn = TRUE)) {
[13:23:58.102]                       if (default_workers) 
[13:23:58.102]                         supportsMulticore(warn = TRUE)
[13:23:58.102]                       return(sequential(..., envir = envir))
[13:23:58.102]                     }
[13:23:58.102]                     oopts <- options(mc.cores = workers)
[13:23:58.102]                     on.exit(options(oopts))
[13:23:58.102]                     future <- MulticoreFuture(..., workers = workers, 
[13:23:58.102]                       envir = envir)
[13:23:58.102]                     if (!future$lazy) 
[13:23:58.102]                       future <- run(future)
[13:23:58.102]                     invisible(future)
[13:23:58.102]                   }), .cleanup = FALSE, .init = FALSE)
[13:23:58.102]                 }
[13:23:58.102]             }
[13:23:58.102]         }
[13:23:58.102]     })
[13:23:58.102]     if (TRUE) {
[13:23:58.102]         base::sink(type = "output", split = FALSE)
[13:23:58.102]         if (TRUE) {
[13:23:58.102]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:23:58.102]         }
[13:23:58.102]         else {
[13:23:58.102]             ...future.result["stdout"] <- base::list(NULL)
[13:23:58.102]         }
[13:23:58.102]         base::close(...future.stdout)
[13:23:58.102]         ...future.stdout <- NULL
[13:23:58.102]     }
[13:23:58.102]     ...future.result$conditions <- ...future.conditions
[13:23:58.102]     ...future.result$finished <- base::Sys.time()
[13:23:58.102]     ...future.result
[13:23:58.102] }
[13:23:58.136]  - Condition #42: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:58.104] assign_globals() ...
[13:23:58.136]  - Condition #43: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:58.104] List of 1
[13:23:58.104]  $ data:'data.frame':	3 obs. of  2 variables:
[13:23:58.104]   ..$ a: int [1:3] 1 2 3
[13:23:58.104]   ..$ b: int [1:3] 3 2 1
[13:23:58.104]  - attr(*, "where")=List of 1
[13:23:58.104]   ..$ data:<environment: R_EmptyEnv> 
[13:23:58.104]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[13:23:58.104]  - attr(*, "resolved")= logi FALSE
[13:23:58.104]  - attr(*, "total_size")= num 128
[13:23:58.104]  - attr(*, "already-done")= logi TRUE
[13:23:58.136]  - Condition #44: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:58.107] - copied ‘data’ to environment
[13:23:58.137]  - Condition #45: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:58.107] assign_globals() ... done
[13:23:58.137]  - Condition #46: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:58.108] requestCore(): workers = 2
[13:23:58.137]  - Condition #47: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:58.110] MulticoreFuture started
[13:23:58.137]  - Condition #48: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:58.110] - Launch lazy future ... done
[13:23:58.137]  - Condition #49: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:58.111] run() for ‘MulticoreFuture’ ... done
[13:23:58.137]  - Condition #50: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:58.111] result() for MulticoreFuture ...
[13:23:58.138]  - Condition #51: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:58.120] result() for MulticoreFuture ...
[13:23:58.138]  - Condition #52: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:58.121] result() for MulticoreFuture ... done
[13:23:58.138]  - Condition #53: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:58.121] result() for MulticoreFuture ... done
[13:23:58.138]  - Condition #54: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:58.121] result() for MulticoreFuture ...
[13:23:58.138]  - Condition #55: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:58.121] result() for MulticoreFuture ... done
[13:23:58.138] signalConditions() ... done
- plan(list('sequential', 'multicore')) ... DONE
- plan(list('sequential', 'multisession')) ...
[13:23:58.139] plan(): Setting new future strategy stack:
[13:23:58.139] List of future strategies:
[13:23:58.139] 1. sequential:
[13:23:58.139]    - args: function (..., envir = parent.frame())
[13:23:58.139]    - tweaked: FALSE
[13:23:58.139]    - call: plan(list(a = strategy1, b = strategy2))
[13:23:58.139] 2. multisession:
[13:23:58.139]    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[13:23:58.139]    - tweaked: FALSE
[13:23:58.139]    - call: plan(list(a = strategy1, b = strategy2))
[13:23:58.140] plan(): nbrOfWorkers() = 1
[13:23:58.140] getGlobalsAndPackages() ...
[13:23:58.140] Searching for globals...
[13:23:58.159] - globals found: [21] ‘{’, ‘<-’, ‘unclass’, ‘::’, ‘[’, ‘nested’, ‘-’, ‘stopifnot’, ‘==’, ‘length’, ‘inherits’, ‘[[’, ‘strategy2’, ‘for’, ‘seq_along’, ‘attr’, ‘attr<-’, ‘[[<-’, ‘all.equal’, ‘list’, ‘%<-%’
[13:23:58.159] Searching for globals ... DONE
[13:23:58.159] Resolving globals: FALSE
[13:23:58.160] The total size of the 2 globals is 55.41 KiB (56736 bytes)
[13:23:58.161] The total size of the 2 globals exported for future expression (‘{; a <- 1L; plan_a <- unclass(future::plan("list")); nested_a <- nested[-1]; stopifnot(length(nested_a) == 1L, length(plan_a) == 1L, inherits(plan_a[[1]],; "future"), inherits(future::plan("next"), strategy2)); ...; }; y; }’) is 55.41 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘nested’ (55.29 KiB of class ‘list’) and ‘strategy2’ (120 bytes of class ‘character’)
[13:23:58.161] - globals: [2] ‘nested’, ‘strategy2’
[13:23:58.161] - packages: [1] ‘future’
[13:23:58.161] getGlobalsAndPackages() ... DONE
[13:23:58.161] run() for ‘Future’ ...
[13:23:58.162] - state: ‘created’
[13:23:58.162] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[13:23:58.162] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[13:23:58.162] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[13:23:58.162]   - Field: ‘label’
[13:23:58.162]   - Field: ‘local’
[13:23:58.162]   - Field: ‘owner’
[13:23:58.162]   - Field: ‘envir’
[13:23:58.163]   - Field: ‘packages’
[13:23:58.163]   - Field: ‘gc’
[13:23:58.163]   - Field: ‘conditions’
[13:23:58.163]   - Field: ‘expr’
[13:23:58.163]   - Field: ‘uuid’
[13:23:58.163]   - Field: ‘seed’
[13:23:58.163]   - Field: ‘version’
[13:23:58.163]   - Field: ‘result’
[13:23:58.163]   - Field: ‘asynchronous’
[13:23:58.163]   - Field: ‘calls’
[13:23:58.164]   - Field: ‘globals’
[13:23:58.164]   - Field: ‘stdout’
[13:23:58.164]   - Field: ‘earlySignal’
[13:23:58.164]   - Field: ‘lazy’
[13:23:58.164]   - Field: ‘state’
[13:23:58.164] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[13:23:58.164] - Launch lazy future ...
[13:23:58.164] Packages needed by the future expression (n = 1): ‘future’
[13:23:58.164] Packages needed by future strategies (n = 1): ‘future’
[13:23:58.165] {
[13:23:58.165]     {
[13:23:58.165]         {
[13:23:58.165]             ...future.startTime <- base::Sys.time()
[13:23:58.165]             {
[13:23:58.165]                 {
[13:23:58.165]                   {
[13:23:58.165]                     {
[13:23:58.165]                       base::local({
[13:23:58.165]                         has_future <- base::requireNamespace("future", 
[13:23:58.165]                           quietly = TRUE)
[13:23:58.165]                         if (has_future) {
[13:23:58.165]                           ns <- base::getNamespace("future")
[13:23:58.165]                           version <- ns[[".package"]][["version"]]
[13:23:58.165]                           if (is.null(version)) 
[13:23:58.165]                             version <- utils::packageVersion("future")
[13:23:58.165]                         }
[13:23:58.165]                         else {
[13:23:58.165]                           version <- NULL
[13:23:58.165]                         }
[13:23:58.165]                         if (!has_future || version < "1.8.0") {
[13:23:58.165]                           info <- base::c(r_version = base::gsub("R version ", 
[13:23:58.165]                             "", base::R.version$version.string), 
[13:23:58.165]                             platform = base::sprintf("%s (%s-bit)", 
[13:23:58.165]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:23:58.165]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:23:58.165]                               "release", "version")], collapse = " "), 
[13:23:58.165]                             hostname = base::Sys.info()[["nodename"]])
[13:23:58.165]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:23:58.165]                             info)
[13:23:58.165]                           info <- base::paste(info, collapse = "; ")
[13:23:58.165]                           if (!has_future) {
[13:23:58.165]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:23:58.165]                               info)
[13:23:58.165]                           }
[13:23:58.165]                           else {
[13:23:58.165]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:23:58.165]                               info, version)
[13:23:58.165]                           }
[13:23:58.165]                           base::stop(msg)
[13:23:58.165]                         }
[13:23:58.165]                       })
[13:23:58.165]                     }
[13:23:58.165]                     base::local({
[13:23:58.165]                       for (pkg in "future") {
[13:23:58.165]                         base::loadNamespace(pkg)
[13:23:58.165]                         base::library(pkg, character.only = TRUE)
[13:23:58.165]                       }
[13:23:58.165]                     })
[13:23:58.165]                   }
[13:23:58.165]                   options(future.plan = NULL)
[13:23:58.165]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:23:58.165]                   future::plan(list(b = function (..., workers = availableCores(), 
[13:23:58.165]                     lazy = FALSE, rscript_libs = .libPaths(), 
[13:23:58.165]                     envir = parent.frame()) 
[13:23:58.165]                   {
[13:23:58.165]                     if (is.function(workers)) 
[13:23:58.165]                       workers <- workers()
[13:23:58.165]                     workers <- structure(as.integer(workers), 
[13:23:58.165]                       class = class(workers))
[13:23:58.165]                     stop_if_not(length(workers) == 1, is.finite(workers), 
[13:23:58.165]                       workers >= 1)
[13:23:58.165]                     if (workers == 1L && !inherits(workers, "AsIs")) {
[13:23:58.165]                       return(sequential(..., lazy = TRUE, envir = envir))
[13:23:58.165]                     }
[13:23:58.165]                     future <- MultisessionFuture(..., workers = workers, 
[13:23:58.165]                       lazy = lazy, rscript_libs = rscript_libs, 
[13:23:58.165]                       envir = envir)
[13:23:58.165]                     if (!future$lazy) 
[13:23:58.165]                       future <- run(future)
[13:23:58.165]                     invisible(future)
[13:23:58.165]                   }), .cleanup = FALSE, .init = FALSE)
[13:23:58.165]                 }
[13:23:58.165]                 ...future.workdir <- getwd()
[13:23:58.165]             }
[13:23:58.165]             ...future.oldOptions <- base::as.list(base::.Options)
[13:23:58.165]             ...future.oldEnvVars <- base::Sys.getenv()
[13:23:58.165]         }
[13:23:58.165]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:23:58.165]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:23:58.165]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:23:58.165]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:23:58.165]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:23:58.165]             future.stdout.windows.reencode = NULL, width = 80L)
[13:23:58.165]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:23:58.165]             base::names(...future.oldOptions))
[13:23:58.165]     }
[13:23:58.165]     if (FALSE) {
[13:23:58.165]     }
[13:23:58.165]     else {
[13:23:58.165]         if (TRUE) {
[13:23:58.165]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:23:58.165]                 open = "w")
[13:23:58.165]         }
[13:23:58.165]         else {
[13:23:58.165]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:23:58.165]                 windows = "NUL", "/dev/null"), open = "w")
[13:23:58.165]         }
[13:23:58.165]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:23:58.165]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:23:58.165]             base::sink(type = "output", split = FALSE)
[13:23:58.165]             base::close(...future.stdout)
[13:23:58.165]         }, add = TRUE)
[13:23:58.165]     }
[13:23:58.165]     ...future.frame <- base::sys.nframe()
[13:23:58.165]     ...future.conditions <- base::list()
[13:23:58.165]     ...future.rng <- base::globalenv()$.Random.seed
[13:23:58.165]     if (FALSE) {
[13:23:58.165]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:23:58.165]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:23:58.165]     }
[13:23:58.165]     ...future.result <- base::tryCatch({
[13:23:58.165]         base::withCallingHandlers({
[13:23:58.165]             ...future.value <- base::withVisible(base::local({
[13:23:58.165]                 a <- 1L
[13:23:58.165]                 plan_a <- unclass(future::plan("list"))
[13:23:58.165]                 nested_a <- nested[-1]
[13:23:58.165]                 stopifnot(length(nested_a) == 1L, length(plan_a) == 
[13:23:58.165]                   1L, inherits(plan_a[[1]], "future"), inherits(future::plan("next"), 
[13:23:58.165]                   strategy2))
[13:23:58.165]                 for (kk in seq_along(plan_a)) attr(plan_a[[kk]], 
[13:23:58.165]                   "init") <- NULL
[13:23:58.165]                 for (kk in seq_along(nested_a)) attr(nested_a[[kk]], 
[13:23:58.165]                   "init") <- NULL
[13:23:58.165]                 stopifnot(all.equal(plan_a, nested_a))
[13:23:58.165]                 y %<-% {
[13:23:58.165]                   b <- 2L
[13:23:58.165]                   plan_b <- future::plan("list")
[13:23:58.165]                   nested_b <- nested_a[-1]
[13:23:58.165]                   stopifnot(length(nested_b) == 0L, length(plan_b) == 
[13:23:58.165]                     1L, inherits(plan_b[[1]], "future"), inherits(future::plan("next"), 
[13:23:58.165]                     "sequential"))
[13:23:58.165]                   list(a = a, nested_a = nested_a, plan_a = plan_a, 
[13:23:58.165]                     b = b, nested_b = nested_b, plan_b = plan_b)
[13:23:58.165]                 }
[13:23:58.165]                 y
[13:23:58.165]             }))
[13:23:58.165]             future::FutureResult(value = ...future.value$value, 
[13:23:58.165]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:23:58.165]                   ...future.rng), globalenv = if (FALSE) 
[13:23:58.165]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:23:58.165]                     ...future.globalenv.names))
[13:23:58.165]                 else NULL, started = ...future.startTime, version = "1.8")
[13:23:58.165]         }, condition = base::local({
[13:23:58.165]             c <- base::c
[13:23:58.165]             inherits <- base::inherits
[13:23:58.165]             invokeRestart <- base::invokeRestart
[13:23:58.165]             length <- base::length
[13:23:58.165]             list <- base::list
[13:23:58.165]             seq.int <- base::seq.int
[13:23:58.165]             signalCondition <- base::signalCondition
[13:23:58.165]             sys.calls <- base::sys.calls
[13:23:58.165]             `[[` <- base::`[[`
[13:23:58.165]             `+` <- base::`+`
[13:23:58.165]             `<<-` <- base::`<<-`
[13:23:58.165]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:23:58.165]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:23:58.165]                   3L)]
[13:23:58.165]             }
[13:23:58.165]             function(cond) {
[13:23:58.165]                 is_error <- inherits(cond, "error")
[13:23:58.165]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:23:58.165]                   NULL)
[13:23:58.165]                 if (is_error) {
[13:23:58.165]                   sessionInformation <- function() {
[13:23:58.165]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:23:58.165]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:23:58.165]                       search = base::search(), system = base::Sys.info())
[13:23:58.165]                   }
[13:23:58.165]                   ...future.conditions[[length(...future.conditions) + 
[13:23:58.165]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:23:58.165]                     cond$call), session = sessionInformation(), 
[13:23:58.165]                     timestamp = base::Sys.time(), signaled = 0L)
[13:23:58.165]                   signalCondition(cond)
[13:23:58.165]                 }
[13:23:58.165]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:23:58.165]                 "immediateCondition"))) {
[13:23:58.165]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:23:58.165]                   ...future.conditions[[length(...future.conditions) + 
[13:23:58.165]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:23:58.165]                   if (TRUE && !signal) {
[13:23:58.165]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:23:58.165]                     {
[13:23:58.165]                       inherits <- base::inherits
[13:23:58.165]                       invokeRestart <- base::invokeRestart
[13:23:58.165]                       is.null <- base::is.null
[13:23:58.165]                       muffled <- FALSE
[13:23:58.165]                       if (inherits(cond, "message")) {
[13:23:58.165]                         muffled <- grepl(pattern, "muffleMessage")
[13:23:58.165]                         if (muffled) 
[13:23:58.165]                           invokeRestart("muffleMessage")
[13:23:58.165]                       }
[13:23:58.165]                       else if (inherits(cond, "warning")) {
[13:23:58.165]                         muffled <- grepl(pattern, "muffleWarning")
[13:23:58.165]                         if (muffled) 
[13:23:58.165]                           invokeRestart("muffleWarning")
[13:23:58.165]                       }
[13:23:58.165]                       else if (inherits(cond, "condition")) {
[13:23:58.165]                         if (!is.null(pattern)) {
[13:23:58.165]                           computeRestarts <- base::computeRestarts
[13:23:58.165]                           grepl <- base::grepl
[13:23:58.165]                           restarts <- computeRestarts(cond)
[13:23:58.165]                           for (restart in restarts) {
[13:23:58.165]                             name <- restart$name
[13:23:58.165]                             if (is.null(name)) 
[13:23:58.165]                               next
[13:23:58.165]                             if (!grepl(pattern, name)) 
[13:23:58.165]                               next
[13:23:58.165]                             invokeRestart(restart)
[13:23:58.165]                             muffled <- TRUE
[13:23:58.165]                             break
[13:23:58.165]                           }
[13:23:58.165]                         }
[13:23:58.165]                       }
[13:23:58.165]                       invisible(muffled)
[13:23:58.165]                     }
[13:23:58.165]                     muffleCondition(cond, pattern = "^muffle")
[13:23:58.165]                   }
[13:23:58.165]                 }
[13:23:58.165]                 else {
[13:23:58.165]                   if (TRUE) {
[13:23:58.165]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:23:58.165]                     {
[13:23:58.165]                       inherits <- base::inherits
[13:23:58.165]                       invokeRestart <- base::invokeRestart
[13:23:58.165]                       is.null <- base::is.null
[13:23:58.165]                       muffled <- FALSE
[13:23:58.165]                       if (inherits(cond, "message")) {
[13:23:58.165]                         muffled <- grepl(pattern, "muffleMessage")
[13:23:58.165]                         if (muffled) 
[13:23:58.165]                           invokeRestart("muffleMessage")
[13:23:58.165]                       }
[13:23:58.165]                       else if (inherits(cond, "warning")) {
[13:23:58.165]                         muffled <- grepl(pattern, "muffleWarning")
[13:23:58.165]                         if (muffled) 
[13:23:58.165]                           invokeRestart("muffleWarning")
[13:23:58.165]                       }
[13:23:58.165]                       else if (inherits(cond, "condition")) {
[13:23:58.165]                         if (!is.null(pattern)) {
[13:23:58.165]                           computeRestarts <- base::computeRestarts
[13:23:58.165]                           grepl <- base::grepl
[13:23:58.165]                           restarts <- computeRestarts(cond)
[13:23:58.165]                           for (restart in restarts) {
[13:23:58.165]                             name <- restart$name
[13:23:58.165]                             if (is.null(name)) 
[13:23:58.165]                               next
[13:23:58.165]                             if (!grepl(pattern, name)) 
[13:23:58.165]                               next
[13:23:58.165]                             invokeRestart(restart)
[13:23:58.165]                             muffled <- TRUE
[13:23:58.165]                             break
[13:23:58.165]                           }
[13:23:58.165]                         }
[13:23:58.165]                       }
[13:23:58.165]                       invisible(muffled)
[13:23:58.165]                     }
[13:23:58.165]                     muffleCondition(cond, pattern = "^muffle")
[13:23:58.165]                   }
[13:23:58.165]                 }
[13:23:58.165]             }
[13:23:58.165]         }))
[13:23:58.165]     }, error = function(ex) {
[13:23:58.165]         base::structure(base::list(value = NULL, visible = NULL, 
[13:23:58.165]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:23:58.165]                 ...future.rng), started = ...future.startTime, 
[13:23:58.165]             finished = Sys.time(), session_uuid = NA_character_, 
[13:23:58.165]             version = "1.8"), class = "FutureResult")
[13:23:58.165]     }, finally = {
[13:23:58.165]         if (!identical(...future.workdir, getwd())) 
[13:23:58.165]             setwd(...future.workdir)
[13:23:58.165]         {
[13:23:58.165]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:23:58.165]                 ...future.oldOptions$nwarnings <- NULL
[13:23:58.165]             }
[13:23:58.165]             base::options(...future.oldOptions)
[13:23:58.165]             if (.Platform$OS.type == "windows") {
[13:23:58.165]                 old_names <- names(...future.oldEnvVars)
[13:23:58.165]                 envs <- base::Sys.getenv()
[13:23:58.165]                 names <- names(envs)
[13:23:58.165]                 common <- intersect(names, old_names)
[13:23:58.165]                 added <- setdiff(names, old_names)
[13:23:58.165]                 removed <- setdiff(old_names, names)
[13:23:58.165]                 changed <- common[...future.oldEnvVars[common] != 
[13:23:58.165]                   envs[common]]
[13:23:58.165]                 NAMES <- toupper(changed)
[13:23:58.165]                 args <- list()
[13:23:58.165]                 for (kk in seq_along(NAMES)) {
[13:23:58.165]                   name <- changed[[kk]]
[13:23:58.165]                   NAME <- NAMES[[kk]]
[13:23:58.165]                   if (name != NAME && is.element(NAME, old_names)) 
[13:23:58.165]                     next
[13:23:58.165]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:23:58.165]                 }
[13:23:58.165]                 NAMES <- toupper(added)
[13:23:58.165]                 for (kk in seq_along(NAMES)) {
[13:23:58.165]                   name <- added[[kk]]
[13:23:58.165]                   NAME <- NAMES[[kk]]
[13:23:58.165]                   if (name != NAME && is.element(NAME, old_names)) 
[13:23:58.165]                     next
[13:23:58.165]                   args[[name]] <- ""
[13:23:58.165]                 }
[13:23:58.165]                 NAMES <- toupper(removed)
[13:23:58.165]                 for (kk in seq_along(NAMES)) {
[13:23:58.165]                   name <- removed[[kk]]
[13:23:58.165]                   NAME <- NAMES[[kk]]
[13:23:58.165]                   if (name != NAME && is.element(NAME, old_names)) 
[13:23:58.165]                     next
[13:23:58.165]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:23:58.165]                 }
[13:23:58.165]                 if (length(args) > 0) 
[13:23:58.165]                   base::do.call(base::Sys.setenv, args = args)
[13:23:58.165]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:23:58.165]             }
[13:23:58.165]             else {
[13:23:58.165]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:23:58.165]             }
[13:23:58.165]             {
[13:23:58.165]                 if (base::length(...future.futureOptionsAdded) > 
[13:23:58.165]                   0L) {
[13:23:58.165]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:23:58.165]                   base::names(opts) <- ...future.futureOptionsAdded
[13:23:58.165]                   base::options(opts)
[13:23:58.165]                 }
[13:23:58.165]                 {
[13:23:58.165]                   {
[13:23:58.165]                     NULL
[13:23:58.165]                     RNGkind("Mersenne-Twister")
[13:23:58.165]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[13:23:58.165]                       inherits = FALSE)
[13:23:58.165]                   }
[13:23:58.165]                   options(future.plan = NULL)
[13:23:58.165]                   if (is.na(NA_character_)) 
[13:23:58.165]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:23:58.165]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:23:58.165]                   future::plan(list(a = function (..., envir = parent.frame()) 
[13:23:58.165]                   {
[13:23:58.165]                     future <- SequentialFuture(..., envir = envir)
[13:23:58.165]                     if (!future$lazy) 
[13:23:58.165]                       future <- run(future)
[13:23:58.165]                     invisible(future)
[13:23:58.165]                   }, b = function (..., workers = availableCores(), 
[13:23:58.165]                     lazy = FALSE, rscript_libs = .libPaths(), 
[13:23:58.165]                     envir = parent.frame()) 
[13:23:58.165]                   {
[13:23:58.165]                     if (is.function(workers)) 
[13:23:58.165]                       workers <- workers()
[13:23:58.165]                     workers <- structure(as.integer(workers), 
[13:23:58.165]                       class = class(workers))
[13:23:58.165]                     stop_if_not(length(workers) == 1, is.finite(workers), 
[13:23:58.165]                       workers >= 1)
[13:23:58.165]                     if (workers == 1L && !inherits(workers, "AsIs")) {
[13:23:58.165]                       return(sequential(..., lazy = TRUE, envir = envir))
[13:23:58.165]                     }
[13:23:58.165]                     future <- MultisessionFuture(..., workers = workers, 
[13:23:58.165]                       lazy = lazy, rscript_libs = rscript_libs, 
[13:23:58.165]                       envir = envir)
[13:23:58.165]                     if (!future$lazy) 
[13:23:58.165]                       future <- run(future)
[13:23:58.165]                     invisible(future)
[13:23:58.165]                   }), .cleanup = FALSE, .init = FALSE)
[13:23:58.165]                 }
[13:23:58.165]             }
[13:23:58.165]         }
[13:23:58.165]     })
[13:23:58.165]     if (TRUE) {
[13:23:58.165]         base::sink(type = "output", split = FALSE)
[13:23:58.165]         if (TRUE) {
[13:23:58.165]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:23:58.165]         }
[13:23:58.165]         else {
[13:23:58.165]             ...future.result["stdout"] <- base::list(NULL)
[13:23:58.165]         }
[13:23:58.165]         base::close(...future.stdout)
[13:23:58.165]         ...future.stdout <- NULL
[13:23:58.165]     }
[13:23:58.165]     ...future.result$conditions <- ...future.conditions
[13:23:58.165]     ...future.result$finished <- base::Sys.time()
[13:23:58.165]     ...future.result
[13:23:58.165] }
[13:23:58.167] assign_globals() ...
[13:23:58.167] List of 2
[13:23:58.167]  $ nested   :List of 2
[13:23:58.167]   ..$ a:function (..., envir = parent.frame())  
[13:23:58.167]   .. ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[13:23:58.167]   .. ..- attr(*, "call")= language plan(list(a = strategy1, b = strategy2))
[13:23:58.167]   ..$ b:function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), 
[13:23:58.167]     envir = parent.frame())  
[13:23:58.167]   .. ..- attr(*, "class")= chr [1:5] "multisession" "cluster" "multiprocess" "future" ...
[13:23:58.167]   .. ..- attr(*, "init")= logi TRUE
[13:23:58.167]   .. ..- attr(*, "untweakable")= chr "persistent"
[13:23:58.167]   .. ..- attr(*, "call")= language plan(list(a = strategy1, b = strategy2))
[13:23:58.167]   ..- attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[13:23:58.167]  $ strategy2: chr "multisession"
[13:23:58.167]  - attr(*, "where")=List of 2
[13:23:58.167]   ..$ nested   :<environment: R_EmptyEnv> 
[13:23:58.167]   ..$ strategy2:<environment: R_EmptyEnv> 
[13:23:58.167]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[13:23:58.167]  - attr(*, "resolved")= logi FALSE
[13:23:58.167]  - attr(*, "total_size")= num 56736
[13:23:58.167]  - attr(*, "already-done")= logi TRUE
[13:23:58.174] - copied ‘nested’ to environment
[13:23:58.174] - copied ‘strategy2’ to environment
[13:23:58.175] assign_globals() ... done
[13:23:58.175] plan(): Setting new future strategy stack:
[13:23:58.175] List of future strategies:
[13:23:58.175] 1. multisession:
[13:23:58.175]    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[13:23:58.175]    - tweaked: FALSE
[13:23:58.175]    - call: plan(list(a = strategy1, b = strategy2))
[13:23:58.179] plan(): nbrOfWorkers() = 2
[13:23:58.968] plan(): Setting new future strategy stack:
[13:23:58.968] List of future strategies:
[13:23:58.968] 1. sequential:
[13:23:58.968]    - args: function (..., envir = parent.frame())
[13:23:58.968]    - tweaked: FALSE
[13:23:58.968]    - call: plan(list(a = strategy1, b = strategy2))
[13:23:58.968] 2. multisession:
[13:23:58.968]    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[13:23:58.968]    - tweaked: FALSE
[13:23:58.968]    - call: plan(list(a = strategy1, b = strategy2))
[13:23:58.969] plan(): nbrOfWorkers() = 1
[13:23:58.969] SequentialFuture started (and completed)
[13:23:58.969] signalConditions() ...
[13:23:58.969]  - include = ‘immediateCondition’
[13:23:58.970]  - exclude = 
[13:23:58.970]  - resignal = FALSE
[13:23:58.970]  - Number of conditions: 97
[13:23:58.970] signalConditions() ... done
[13:23:58.970] - Launch lazy future ... done
[13:23:58.970] run() for ‘SequentialFuture’ ... done
[13:23:58.970] signalConditions() ...
[13:23:58.971]  - include = ‘immediateCondition’
[13:23:58.971]  - exclude = 
[13:23:58.971]  - resignal = FALSE
[13:23:58.971]  - Number of conditions: 97
[13:23:58.971] signalConditions() ... done
[13:23:58.971] Future state: ‘finished’
[13:23:58.971] signalConditions() ...
[13:23:58.972]  - include = ‘condition’
[13:23:58.972]  - exclude = ‘immediateCondition’
[13:23:58.972]  - resignal = TRUE
[13:23:58.972]  - Number of conditions: 97
[13:23:58.972]  - Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:58.180] getGlobalsAndPackages() ...
[13:23:58.972]  - Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:58.180] Searching for globals...
[13:23:58.972]  - Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:58.200] - globals found: [14] ‘{’, ‘<-’, ‘::’, ‘[’, ‘nested_a’, ‘-’, ‘stopifnot’, ‘==’, ‘length’, ‘inherits’, ‘[[’, ‘list’, ‘a’, ‘plan_a’
[13:23:58.973]  - Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:58.200] Searching for globals ... DONE
[13:23:58.973]  - Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:58.200] Resolving globals: FALSE
[13:23:58.973]  - Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:58.201] The total size of the 3 globals is 87.82 KiB (89928 bytes)
[13:23:58.973]  - Condition #7: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:58.201] The total size of the 3 globals exported for future expression (‘{; b <- 2L; plan_b <- future::plan("list"); nested_b <- nested_a[-1]; stopifnot(length(nested_b) == 0L, length(plan_b) == 1L, inherits(plan_b[[1]],; "future"), inherits(future::plan("next"), "sequential")); list(a = a, nested_a = nested_a, plan_a = plan_a, b = b,; nested_b = nested_b, plan_b = plan_b); }’) is 87.82 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are three globals: ‘nested_a’ (43.88 KiB of class ‘list’), ‘plan_a’ (43.88 KiB of class ‘list’) and ‘a’ (56 bytes of class ‘numeric’)
[13:23:58.973]  - Condition #8: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:58.201] - globals: [3] ‘nested_a’, ‘a’, ‘plan_a’
[13:23:58.973]  - Condition #9: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:58.202] 
[13:23:58.974]  - Condition #10: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:58.202] getGlobalsAndPackages() ... DONE
[13:23:58.974]  - Condition #11: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:58.202] run() for ‘Future’ ...
[13:23:58.974]  - Condition #12: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:58.202] - state: ‘created’
[13:23:58.974]  - Condition #13: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:58.202] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[13:23:58.974]  - Condition #14: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:58.209] [local output] makeClusterPSOCK() ...
[13:23:58.974]  - Condition #15: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:58.280] [local output] Workers: [n = 2] ‘localhost’, ‘localhost’
[13:23:58.975]  - Condition #16: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:58.281] [local output] Base port: 11675
[13:23:58.975]  - Condition #17: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:58.282] [local output] Getting setup options for 2 cluster nodes ...
[13:23:58.975]  - Condition #18: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:58.282] [local output]  - Node 1 of 2 ...
[13:23:58.975]  - Condition #19: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:58.282] [local output] localMachine=TRUE => revtunnel=FALSE

[13:23:58.975]  - Condition #20: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:58.283] Testing if worker's PID can be inferred: ‘'/usr/local/lib/R/bin/Rscript' -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/RtmpKOlrlL/worker.rank=1.parallelly.parent=90070.15fd6b8c4b87.pid")), silent = TRUE)' -e 'file.exists("/tmp/RtmpKOlrlL/worker.rank=1.parallelly.parent=90070.15fd6b8c4b87.pid")'’
[13:23:58.975]  - Condition #21: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:58.479] - Possible to infer worker's PID: TRUE
[13:23:58.976]  - Condition #22: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:58.479] [local output] Rscript port: 11675

[13:23:58.976]  - Condition #23: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:58.480] [local output]  - Node 2 of 2 ...
[13:23:58.976]  - Condition #24: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:58.480] [local output] localMachine=TRUE => revtunnel=FALSE

[13:23:58.976]  - Condition #25: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:58.481] [local output] Rscript port: 11675

[13:23:58.976]  - Condition #26: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:58.481] [local output] Getting setup options for 2 cluster nodes ... done
[13:23:58.977]  - Condition #27: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:58.481] [local output]  - Parallel setup requested for some PSOCK nodes
[13:23:58.977]  - Condition #28: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:58.482] [local output] Setting up PSOCK nodes in parallel
[13:23:58.977]  - Condition #29: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:58.482] List of 36
[13:23:58.482]  $ worker          : chr "localhost"
[13:23:58.482]   ..- attr(*, "localhost")= logi TRUE
[13:23:58.482]  $ master          : chr "localhost"
[13:23:58.482]  $ port            : int 11675
[13:23:58.482]  $ connectTimeout  : num 120
[13:23:58.482]  $ timeout         : num 2592000
[13:23:58.482]  $ rscript         : chr "'/usr/local/lib/R/bin/Rscript'"
[13:23:58.482]  $ homogeneous     : logi TRUE
[13:23:58.482]  $ rscript_args    : chr "--default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),fi"| __truncated__
[13:23:58.482]  $ rscript_envs    : NULL
[13:23:58.482]  $ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[13:23:58.482]  $ rscript_startup : NULL
[13:23:58.482]  $ rscript_sh      : chr "sh"
[13:23:58.482]  $ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[13:23:58.482]  $ methods         : logi TRUE
[13:23:58.482]  $ socketOptions   : chr "no-delay"
[13:23:58.482]  $ useXDR          : logi FALSE
[13:23:58.482]  $ outfile         : chr "/dev/null"
[13:23:58.482]  $ renice          : int NA
[13:23:58.482]  $ rshcmd          : NULL
[13:23:58.482]  $ user            : chr(0) 
[13:23:58.482]  $ revtunnel       : logi FALSE
[13:23:58.482]  $ rshlogfile      : NULL
[13:23:58.482]  $ rshopts         : chr(0) 
[13:23:58.482]  $ rank            : int 1
[13:23:58.482]  $ manual          : logi FALSE
[13:23:58.482]  $ dryrun          : logi FALSE
[13:23:58.482]  $ quiet           : logi FALSE
[13:23:58.482]  $ setup_strategy  : chr "parallel"
[13:23:58.482]  $ local_cmd       : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[13:23:58.482]  $ pidfile         : chr "/tmp/RtmpKOlrlL/worker.rank=1.parallelly.parent=90070.15fd6b8c4b87.pid"
[13:23:58.482]  $ rshcmd_label    : NULL
[13:23:58.482]  $ rsh_call        : NULL
[13:23:58.482]  $ cmd             : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[13:23:58.482]  $ localMachine    : logi TRUE
[13:23:58.482]  $ make_fcn        :function (worker = getOption2("parallelly.localhost.hostname", "localhost"), 
[13:23:58.482]     master = NULL, port, connectTimeout = getOption2("parallelly.makeNodePSOCK.connectTimeout", 
[13:23:58.482]         2 * 60), timeout = getOption2("parallelly.makeNodePSOCK.timeout", 
[13:23:58.482]         30 * 24 * 60 * 60), rscript = NULL, homogeneous = NULL, rscript_args = NULL, 
[13:23:58.482]     rscript_envs = NULL, rscript_libs = NULL, rscript_startup = NULL, rscript_sh = c("auto", 
[13:23:58.482]         "cmd", "sh"), default_packages = c("datasets", "utils", "grDevices", 
[13:23:58.482]         "graphics", "stats", if (methods) "methods"), methods = TRUE, socketOptions = getOption2("parallelly.makeNodePSOCK.socketOptions", 
[13:23:58.482]         "no-delay"), useXDR = getOption2("parallelly.makeNodePSOCK.useXDR", 
[13:23:58.482]         FALSE), outfile = "/dev/null", renice = NA_integer_, rshcmd = getOption2("parallelly.makeNodePSOCK.rshcmd", 
[13:23:58.482]         NULL), user = NULL, revtunnel = NA, rshlogfile = NULL, rshopts = getOption2("parallelly.makeNodePSOCK.rshopts", 
[13:23:58.482]         NULL), rank = 1L, manual = FALSE, dryrun = FALSE, quiet = FALSE, 
[13:23:58.482]     setup_strategy = getOption2("parallelly.makeNodePSOCK.setup_strategy", 
[13:23:58.482]         "parallel"), action = c("launch", "options"), verbose = FALSE)  
[13:23:58.482]  $ arguments       :List of 28
[13:23:58.482]   ..$ worker          : chr "localhost"
[13:23:58.482]   ..$ master          : NULL
[13:23:58.482]   ..$ port            : int 11675
[13:23:58.482]   ..$ connectTimeout  : num 120
[13:23:58.482]   ..$ timeout         : num 2592000
[13:23:58.482]   ..$ rscript         : NULL
[13:23:58.482]   ..$ homogeneous     : NULL
[13:23:58.482]   ..$ rscript_args    : NULL
[13:23:58.482]   ..$ rscript_envs    : NULL
[13:23:58.482]   ..$ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[13:23:58.482]   ..$ rscript_startup : NULL
[13:23:58.482]   ..$ rscript_sh      : chr [1:3] "auto" "cmd" "sh"
[13:23:58.482]   ..$ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[13:23:58.482]   ..$ methods         : logi TRUE
[13:23:58.482]   ..$ socketOptions   : chr "no-delay"
[13:23:58.482]   ..$ useXDR          : logi FALSE
[13:23:58.482]   ..$ outfile         : chr "/dev/null"
[13:23:58.482]   ..$ renice          : int NA
[13:23:58.482]   ..$ rshcmd          : NULL
[13:23:58.482]   ..$ user            : NULL
[13:23:58.482]   ..$ revtunnel       : logi NA
[13:23:58.482]   ..$ rshlogfile      : NULL
[13:23:58.482]   ..$ rshopts         : NULL
[13:23:58.482]   ..$ rank            : int 1
[13:23:58.482]   ..$ manual          : logi FALSE
[13:23:58.482]   ..$ dryrun          : logi FALSE
[13:23:58.482]   ..$ quiet           : logi FALSE
[13:23:58.482]   ..$ setup_strategy  : chr "parallel"
[13:23:58.482]  - attr(*, "class")= chr [1:2] "makeNodePSOCKOptions" "makeNodeOptions"
[13:23:58.977]  - Condition #30: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:58.499] [local output] System call to launch all workers:
[13:23:58.977]  - Condition #31: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:58.499] [local output] '/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/RtmpKOlrlL/worker.rank=1.parallelly.parent=90070.15fd6b8c4b87.pid")), silent = TRUE)' -e 'options(socketOptions = "no-delay")' -e '.libPaths(c("/usr/local/lib/R/site-library","/usr/local/lib/R/library"))' -e 'workRSOCK <- tryCatch(parallel:::.workRSOCK, error=function(e) parallel:::.slaveRSOCK); workRSOCK()' MASTER=localhost PORT=11675 OUT=/dev/null TIMEOUT=2592000 XDR=FALSE SETUPTIMEOUT=120 SETUPSTRATEGY=parallel
[13:23:58.977]  - Condition #32: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:58.500] [local output] Starting PSOCK main server
[13:23:58.978]  - Condition #33: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:58.505] [local output] Workers launched
[13:23:58.978]  - Condition #34: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:58.506] [local output] Waiting for workers to connect back
[13:23:58.978]  - Condition #35: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:58.506]  - [local output] 0 workers out of 2 ready
[13:23:58.978]  - Condition #36: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:58.754]  - [local output] 0 workers out of 2 ready
[13:23:58.978]  - Condition #37: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:58.754]  - [local output] 1 workers out of 2 ready
[13:23:58.978]  - Condition #38: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:58.754]  - [local output] 2 workers out of 2 ready
[13:23:58.979]  - Condition #39: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:58.755] [local output] Launching of workers completed
[13:23:58.979]  - Condition #40: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:58.755] [local output] Collecting session information from workers
[13:23:58.979]  - Condition #41: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:58.756] [local output]  - Worker #1 of 2
[13:23:58.979]  - Condition #42: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:58.756] [local output]  - Worker #2 of 2
[13:23:58.979]  - Condition #43: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:58.756] [local output] makeClusterPSOCK() ... done
[13:23:58.979]  - Condition #44: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:58.767] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:23:58.980]  - Condition #45: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:58.767] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[13:23:58.980]  - Condition #46: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:58.768]   - Field: ‘node’
[13:23:58.980]  - Condition #47: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:58.768]   - Field: ‘label’
[13:23:58.980]  - Condition #48: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:58.768]   - Field: ‘local’
[13:23:58.980]  - Condition #49: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:58.768]   - Field: ‘owner’
[13:23:58.981]  - Condition #50: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:58.768]   - Field: ‘envir’
[13:23:58.981]  - Condition #51: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:58.768]   - Field: ‘workers’
[13:23:58.981]  - Condition #52: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:58.768]   - Field: ‘packages’
[13:23:58.981]  - Condition #53: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:58.768]   - Field: ‘gc’
[13:23:58.981]  - Condition #54: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:58.769]   - Field: ‘conditions’
[13:23:58.981]  - Condition #55: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:58.769]   - Field: ‘persistent’
[13:23:58.982]  - Condition #56: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:58.769]   - Field: ‘expr’
[13:23:58.982]  - Condition #57: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:58.769]   - Field: ‘uuid’
[13:23:58.982]  - Condition #58: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:58.769]   - Field: ‘seed’
[13:23:58.982]  - Condition #59: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:58.769]   - Field: ‘version’
[13:23:58.982]  - Condition #60: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:58.769]   - Field: ‘result’
[13:23:58.982]  - Condition #61: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:58.770]   - Field: ‘asynchronous’
[13:23:58.983]  - Condition #62: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:58.770]   - Field: ‘calls’
[13:23:58.983]  - Condition #63: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:58.770]   - Field: ‘globals’
[13:23:58.983]  - Condition #64: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:58.770]   - Field: ‘stdout’
[13:23:58.983]  - Condition #65: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:58.770]   - Field: ‘earlySignal’
[13:23:58.983]  - Condition #66: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:58.770]   - Field: ‘lazy’
[13:23:58.983]  - Condition #67: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:58.770]   - Field: ‘state’
[13:23:58.984]  - Condition #68: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:58.771] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[13:23:58.984]  - Condition #69: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:58.771] - Launch lazy future ...
[13:23:58.984]  - Condition #70: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:58.772] Packages needed by the future expression (n = 0): <none>
[13:23:58.984]  - Condition #71: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:58.772] Packages needed by future strategies (n = 0): <none>
[13:23:58.984]  - Condition #72: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:58.772] {
[13:23:58.772]     {
[13:23:58.772]         {
[13:23:58.772]             ...future.startTime <- base::Sys.time()
[13:23:58.772]             {
[13:23:58.772]                 {
[13:23:58.772]                   {
[13:23:58.772]                     {
[13:23:58.772]                       base::local({
[13:23:58.772]                         has_future <- base::requireNamespace("future", 
[13:23:58.772]                           quietly = TRUE)
[13:23:58.772]                         if (has_future) {
[13:23:58.772]                           ns <- base::getNamespace("future")
[13:23:58.772]                           version <- ns[[".package"]][["version"]]
[13:23:58.772]                           if (is.null(version)) 
[13:23:58.772]                             version <- utils::packageVersion("future")
[13:23:58.772]                         }
[13:23:58.772]                         else {
[13:23:58.772]                           version <- NULL
[13:23:58.772]                         }
[13:23:58.772]                         if (!has_future || version < "1.8.0") {
[13:23:58.772]                           info <- base::c(r_version = base::gsub("R version ", 
[13:23:58.772]                             "", base::R.version$version.string), 
[13:23:58.772]                             platform = base::sprintf("%s (%s-bit)", 
[13:23:58.772]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:23:58.772]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:23:58.772]                               "release", "version")], collapse = " "), 
[13:23:58.772]                             hostname = base::Sys.info()[["nodename"]])
[13:23:58.772]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:23:58.772]                             info)
[13:23:58.772]                           info <- base::paste(info, collapse = "; ")
[13:23:58.772]                           if (!has_future) {
[13:23:58.772]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:23:58.772]                               info)
[13:23:58.772]                           }
[13:23:58.772]                           else {
[13:23:58.772]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:23:58.772]                               info, version)
[13:23:58.772]                           }
[13:23:58.772]                           base::stop(msg)
[13:23:58.772]                         }
[13:23:58.772]                       })
[13:23:58.772]                     }
[13:23:58.772]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[13:23:58.772]                     base::options(mc.cores = 1L)
[13:23:58.772]                   }
[13:23:58.772]                   options(future.plan = NULL)
[13:23:58.772]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:23:58.772]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:23:58.772]                 }
[13:23:58.772]                 ...future.workdir <- getwd()
[13:23:58.772]             }
[13:23:58.772]             ...future.oldOptions <- base::as.list(base::.Options)
[13:23:58.772]             ...future.oldEnvVars <- base::Sys.getenv()
[13:23:58.772]         }
[13:23:58.772]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:23:58.772]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:23:58.772]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:23:58.772]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:23:58.772]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:23:58.772]             future.stdout.windows.reencode = NULL, width = 80L)
[13:23:58.772]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:23:58.772]             base::names(...future.oldOptions))
[13:23:58.772]     }
[13:23:58.772]     if (FALSE) {
[13:23:58.772]     }
[13:23:58.772]     else {
[13:23:58.772]         if (TRUE) {
[13:23:58.772]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:23:58.772]                 open = "w")
[13:23:58.772]         }
[13:23:58.772]         else {
[13:23:58.772]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:23:58.772]                 windows = "NUL", "/dev/null"), open = "w")
[13:23:58.772]         }
[13:23:58.772]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:23:58.772]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:23:58.772]             base::sink(type = "output", split = FALSE)
[13:23:58.772]             base::close(...future.stdout)
[13:23:58.772]         }, add = TRUE)
[13:23:58.772]     }
[13:23:58.772]     ...future.frame <- base::sys.nframe()
[13:23:58.772]     ...future.conditions <- base::list()
[13:23:58.772]     ...future.rng <- base::globalenv()$.Random.seed
[13:23:58.772]     if (FALSE) {
[13:23:58.772]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:23:58.772]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:23:58.772]     }
[13:23:58.772]     ...future.result <- base::tryCatch({
[13:23:58.772]         base::withCallingHandlers({
[13:23:58.772]             ...future.value <- base::withVisible(base::local({
[13:23:58.772]                 ...future.makeSendCondition <- base::local({
[13:23:58.772]                   sendCondition <- NULL
[13:23:58.772]                   function(frame = 1L) {
[13:23:58.772]                     if (is.function(sendCondition)) 
[13:23:58.772]                       return(sendCondition)
[13:23:58.772]                     ns <- getNamespace("parallel")
[13:23:58.772]                     if (exists("sendData", mode = "function", 
[13:23:58.772]                       envir = ns)) {
[13:23:58.772]                       parallel_sendData <- get("sendData", mode = "function", 
[13:23:58.772]                         envir = ns)
[13:23:58.772]                       envir <- sys.frame(frame)
[13:23:58.772]                       master <- NULL
[13:23:58.772]                       while (!identical(envir, .GlobalEnv) && 
[13:23:58.772]                         !identical(envir, emptyenv())) {
[13:23:58.772]                         if (exists("master", mode = "list", envir = envir, 
[13:23:58.772]                           inherits = FALSE)) {
[13:23:58.772]                           master <- get("master", mode = "list", 
[13:23:58.772]                             envir = envir, inherits = FALSE)
[13:23:58.772]                           if (inherits(master, c("SOCKnode", 
[13:23:58.772]                             "SOCK0node"))) {
[13:23:58.772]                             sendCondition <<- function(cond) {
[13:23:58.772]                               data <- list(type = "VALUE", value = cond, 
[13:23:58.772]                                 success = TRUE)
[13:23:58.772]                               parallel_sendData(master, data)
[13:23:58.772]                             }
[13:23:58.772]                             return(sendCondition)
[13:23:58.772]                           }
[13:23:58.772]                         }
[13:23:58.772]                         frame <- frame + 1L
[13:23:58.772]                         envir <- sys.frame(frame)
[13:23:58.772]                       }
[13:23:58.772]                     }
[13:23:58.772]                     sendCondition <<- function(cond) NULL
[13:23:58.772]                   }
[13:23:58.772]                 })
[13:23:58.772]                 withCallingHandlers({
[13:23:58.772]                   {
[13:23:58.772]                     b <- 2L
[13:23:58.772]                     plan_b <- future::plan("list")
[13:23:58.772]                     nested_b <- nested_a[-1]
[13:23:58.772]                     stopifnot(length(nested_b) == 0L, length(plan_b) == 
[13:23:58.772]                       1L, inherits(plan_b[[1]], "future"), inherits(future::plan("next"), 
[13:23:58.772]                       "sequential"))
[13:23:58.772]                     list(a = a, nested_a = nested_a, plan_a = plan_a, 
[13:23:58.772]                       b = b, nested_b = nested_b, plan_b = plan_b)
[13:23:58.772]                   }
[13:23:58.772]                 }, immediateCondition = function(cond) {
[13:23:58.772]                   sendCondition <- ...future.makeSendCondition()
[13:23:58.772]                   sendCondition(cond)
[13:23:58.772]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:23:58.772]                   {
[13:23:58.772]                     inherits <- base::inherits
[13:23:58.772]                     invokeRestart <- base::invokeRestart
[13:23:58.772]                     is.null <- base::is.null
[13:23:58.772]                     muffled <- FALSE
[13:23:58.772]                     if (inherits(cond, "message")) {
[13:23:58.772]                       muffled <- grepl(pattern, "muffleMessage")
[13:23:58.772]                       if (muffled) 
[13:23:58.772]                         invokeRestart("muffleMessage")
[13:23:58.772]                     }
[13:23:58.772]                     else if (inherits(cond, "warning")) {
[13:23:58.772]                       muffled <- grepl(pattern, "muffleWarning")
[13:23:58.772]                       if (muffled) 
[13:23:58.772]                         invokeRestart("muffleWarning")
[13:23:58.772]                     }
[13:23:58.772]                     else if (inherits(cond, "condition")) {
[13:23:58.772]                       if (!is.null(pattern)) {
[13:23:58.772]                         computeRestarts <- base::computeRestarts
[13:23:58.772]                         grepl <- base::grepl
[13:23:58.772]                         restarts <- computeRestarts(cond)
[13:23:58.772]                         for (restart in restarts) {
[13:23:58.772]                           name <- restart$name
[13:23:58.772]                           if (is.null(name)) 
[13:23:58.772]                             next
[13:23:58.772]                           if (!grepl(pattern, name)) 
[13:23:58.772]                             next
[13:23:58.772]                           invokeRestart(restart)
[13:23:58.772]                           muffled <- TRUE
[13:23:58.772]                           break
[13:23:58.772]                         }
[13:23:58.772]                       }
[13:23:58.772]                     }
[13:23:58.772]                     invisible(muffled)
[13:23:58.772]                   }
[13:23:58.772]                   muffleCondition(cond)
[13:23:58.772]                 })
[13:23:58.772]             }))
[13:23:58.772]             future::FutureResult(value = ...future.value$value, 
[13:23:58.772]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:23:58.772]                   ...future.rng), globalenv = if (FALSE) 
[13:23:58.772]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:23:58.772]                     ...future.globalenv.names))
[13:23:58.772]                 else NULL, started = ...future.startTime, version = "1.8")
[13:23:58.772]         }, condition = base::local({
[13:23:58.772]             c <- base::c
[13:23:58.772]             inherits <- base::inherits
[13:23:58.772]             invokeRestart <- base::invokeRestart
[13:23:58.772]             length <- base::length
[13:23:58.772]             list <- base::list
[13:23:58.772]             seq.int <- base::seq.int
[13:23:58.772]             signalCondition <- base::signalCondition
[13:23:58.772]             sys.calls <- base::sys.calls
[13:23:58.772]             `[[` <- base::`[[`
[13:23:58.772]             `+` <- base::`+`
[13:23:58.772]             `<<-` <- base::`<<-`
[13:23:58.772]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:23:58.772]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:23:58.772]                   3L)]
[13:23:58.772]             }
[13:23:58.772]             function(cond) {
[13:23:58.772]                 is_error <- inherits(cond, "error")
[13:23:58.772]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:23:58.772]                   NULL)
[13:23:58.772]                 if (is_error) {
[13:23:58.772]                   sessionInformation <- function() {
[13:23:58.772]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:23:58.772]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:23:58.772]                       search = base::search(), system = base::Sys.info())
[13:23:58.772]                   }
[13:23:58.772]                   ...future.conditions[[length(...future.conditions) + 
[13:23:58.772]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:23:58.772]                     cond$call), session = sessionInformation(), 
[13:23:58.772]                     timestamp = base::Sys.time(), signaled = 0L)
[13:23:58.772]                   signalCondition(cond)
[13:23:58.772]                 }
[13:23:58.772]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:23:58.772]                 "immediateCondition"))) {
[13:23:58.772]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:23:58.772]                   ...future.conditions[[length(...future.conditions) + 
[13:23:58.772]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:23:58.772]                   if (TRUE && !signal) {
[13:23:58.772]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:23:58.772]                     {
[13:23:58.772]                       inherits <- base::inherits
[13:23:58.772]                       invokeRestart <- base::invokeRestart
[13:23:58.772]                       is.null <- base::is.null
[13:23:58.772]                       muffled <- FALSE
[13:23:58.772]                       if (inherits(cond, "message")) {
[13:23:58.772]                         muffled <- grepl(pattern, "muffleMessage")
[13:23:58.772]                         if (muffled) 
[13:23:58.772]                           invokeRestart("muffleMessage")
[13:23:58.772]                       }
[13:23:58.772]                       else if (inherits(cond, "warning")) {
[13:23:58.772]                         muffled <- grepl(pattern, "muffleWarning")
[13:23:58.772]                         if (muffled) 
[13:23:58.772]                           invokeRestart("muffleWarning")
[13:23:58.772]                       }
[13:23:58.772]                       else if (inherits(cond, "condition")) {
[13:23:58.772]                         if (!is.null(pattern)) {
[13:23:58.772]                           computeRestarts <- base::computeRestarts
[13:23:58.772]                           grepl <- base::grepl
[13:23:58.772]                           restarts <- computeRestarts(cond)
[13:23:58.772]                           for (restart in restarts) {
[13:23:58.772]                             name <- restart$name
[13:23:58.772]                             if (is.null(name)) 
[13:23:58.772]                               next
[13:23:58.772]                             if (!grepl(pattern, name)) 
[13:23:58.772]                               next
[13:23:58.772]                             invokeRestart(restart)
[13:23:58.772]                             muffled <- TRUE
[13:23:58.772]                             break
[13:23:58.772]                           }
[13:23:58.772]                         }
[13:23:58.772]                       }
[13:23:58.772]                       invisible(muffled)
[13:23:58.772]                     }
[13:23:58.772]                     muffleCondition(cond, pattern = "^muffle")
[13:23:58.772]                   }
[13:23:58.772]                 }
[13:23:58.772]                 else {
[13:23:58.772]                   if (TRUE) {
[13:23:58.772]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:23:58.772]                     {
[13:23:58.772]                       inherits <- base::inherits
[13:23:58.772]                       invokeRestart <- base::invokeRestart
[13:23:58.772]                       is.null <- base::is.null
[13:23:58.772]                       muffled <- FALSE
[13:23:58.772]                       if (inherits(cond, "message")) {
[13:23:58.772]                         muffled <- grepl(pattern, "muffleMessage")
[13:23:58.772]                         if (muffled) 
[13:23:58.772]                           invokeRestart("muffleMessage")
[13:23:58.772]                       }
[13:23:58.772]                       else if (inherits(cond, "warning")) {
[13:23:58.772]                         muffled <- grepl(pattern, "muffleWarning")
[13:23:58.772]                         if (muffled) 
[13:23:58.772]                           invokeRestart("muffleWarning")
[13:23:58.772]                       }
[13:23:58.772]                       else if (inherits(cond, "condition")) {
[13:23:58.772]                         if (!is.null(pattern)) {
[13:23:58.772]                           computeRestarts <- base::computeRestarts
[13:23:58.772]                           grepl <- base::grepl
[13:23:58.772]                           restarts <- computeRestarts(cond)
[13:23:58.772]                           for (restart in restarts) {
[13:23:58.772]                             name <- restart$name
[13:23:58.772]                             if (is.null(name)) 
[13:23:58.772]                               next
[13:23:58.772]                             if (!grepl(pattern, name)) 
[13:23:58.772]                               next
[13:23:58.772]                             invokeRestart(restart)
[13:23:58.772]                             muffled <- TRUE
[13:23:58.772]                             break
[13:23:58.772]                           }
[13:23:58.772]                         }
[13:23:58.772]                       }
[13:23:58.772]                       invisible(muffled)
[13:23:58.772]                     }
[13:23:58.772]                     muffleCondition(cond, pattern = "^muffle")
[13:23:58.772]                   }
[13:23:58.772]                 }
[13:23:58.772]             }
[13:23:58.772]         }))
[13:23:58.772]     }, error = function(ex) {
[13:23:58.772]         base::structure(base::list(value = NULL, visible = NULL, 
[13:23:58.772]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:23:58.772]                 ...future.rng), started = ...future.startTime, 
[13:23:58.772]             finished = Sys.time(), session_uuid = NA_character_, 
[13:23:58.772]             version = "1.8"), class = "FutureResult")
[13:23:58.772]     }, finally = {
[13:23:58.772]         if (!identical(...future.workdir, getwd())) 
[13:23:58.772]             setwd(...future.workdir)
[13:23:58.772]         {
[13:23:58.772]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:23:58.772]                 ...future.oldOptions$nwarnings <- NULL
[13:23:58.772]             }
[13:23:58.772]             base::options(...future.oldOptions)
[13:23:58.772]             if (.Platform$OS.type == "windows") {
[13:23:58.772]                 old_names <- names(...future.oldEnvVars)
[13:23:58.772]                 envs <- base::Sys.getenv()
[13:23:58.772]                 names <- names(envs)
[13:23:58.772]                 common <- intersect(names, old_names)
[13:23:58.772]                 added <- setdiff(names, old_names)
[13:23:58.772]                 removed <- setdiff(old_names, names)
[13:23:58.772]                 changed <- common[...future.oldEnvVars[common] != 
[13:23:58.772]                   envs[common]]
[13:23:58.772]                 NAMES <- toupper(changed)
[13:23:58.772]                 args <- list()
[13:23:58.772]                 for (kk in seq_along(NAMES)) {
[13:23:58.772]                   name <- changed[[kk]]
[13:23:58.772]                   NAME <- NAMES[[kk]]
[13:23:58.772]                   if (name != NAME && is.element(NAME, old_names)) 
[13:23:58.772]                     next
[13:23:58.772]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:23:58.772]                 }
[13:23:58.772]                 NAMES <- toupper(added)
[13:23:58.772]                 for (kk in seq_along(NAMES)) {
[13:23:58.772]                   name <- added[[kk]]
[13:23:58.772]                   NAME <- NAMES[[kk]]
[13:23:58.772]                   if (name != NAME && is.element(NAME, old_names)) 
[13:23:58.772]                     next
[13:23:58.772]                   args[[name]] <- ""
[13:23:58.772]                 }
[13:23:58.772]                 NAMES <- toupper(removed)
[13:23:58.772]                 for (kk in seq_along(NAMES)) {
[13:23:58.772]                   name <- removed[[kk]]
[13:23:58.772]                   NAME <- NAMES[[kk]]
[13:23:58.772]                   if (name != NAME && is.element(NAME, old_names)) 
[13:23:58.772]                     next
[13:23:58.772]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:23:58.772]                 }
[13:23:58.772]                 if (length(args) > 0) 
[13:23:58.772]                   base::do.call(base::Sys.setenv, args = args)
[13:23:58.772]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:23:58.772]             }
[13:23:58.772]             else {
[13:23:58.772]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:23:58.772]             }
[13:23:58.772]             {
[13:23:58.772]                 if (base::length(...future.futureOptionsAdded) > 
[13:23:58.772]                   0L) {
[13:23:58.772]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:23:58.772]                   base::names(opts) <- ...future.futureOptionsAdded
[13:23:58.772]                   base::options(opts)
[13:23:58.772]                 }
[13:23:58.772]                 {
[13:23:58.772]                   {
[13:23:58.772]                     base::options(mc.cores = ...future.mc.cores.old)
[13:23:58.772]                     NULL
[13:23:58.772]                   }
[13:23:58.772]                   options(future.plan = NULL)
[13:23:58.772]                   if (is.na(NA_character_)) 
[13:23:58.772]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:23:58.772]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:23:58.772]                   future::plan(list(b = function (..., workers = availableCores(), 
[13:23:58.772]                     lazy = FALSE, rscript_libs = .libPaths(), 
[13:23:58.772]                     envir = parent.frame()) 
[13:23:58.772]                   {
[13:23:58.772]                     if (is.function(workers)) 
[13:23:58.772]                       workers <- workers()
[13:23:58.772]                     workers <- structure(as.integer(workers), 
[13:23:58.772]                       class = class(workers))
[13:23:58.772]                     stop_if_not(length(workers) == 1, is.finite(workers), 
[13:23:58.772]                       workers >= 1)
[13:23:58.772]                     if (workers == 1L && !inherits(workers, "AsIs")) {
[13:23:58.772]                       return(sequential(..., lazy = TRUE, envir = envir))
[13:23:58.772]                     }
[13:23:58.772]                     future <- MultisessionFuture(..., workers = workers, 
[13:23:58.772]                       lazy = lazy, rscript_libs = rscript_libs, 
[13:23:58.772]                       envir = envir)
[13:23:58.772]                     if (!future$lazy) 
[13:23:58.772]                       future <- run(future)
[13:23:58.772]                     invisible(future)
[13:23:58.772]                   }), .cleanup = FALSE, .init = FALSE)
[13:23:58.772]                 }
[13:23:58.772]             }
[13:23:58.772]         }
[13:23:58.772]     })
[13:23:58.772]     if (TRUE) {
[13:23:58.772]         base::sink(type = "output", split = FALSE)
[13:23:58.772]         if (TRUE) {
[13:23:58.772]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:23:58.772]         }
[13:23:58.772]         else {
[13:23:58.772]             ...future.result["stdout"] <- base::list(NULL)
[13:23:58.772]         }
[13:23:58.772]         base::close(...future.stdout)
[13:23:58.772]         ...future.stdout <- NULL
[13:23:58.772]     }
[13:23:58.772]     ...future.result$conditions <- ...future.conditions
[13:23:58.772]     ...future.result$finished <- base::Sys.time()
[13:23:58.772]     ...future.result
[13:23:58.772] }
[13:23:58.985]  - Condition #73: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:58.826] Exporting 3 global objects (87.82 KiB) to cluster node #1 ...
[13:23:58.985]  - Condition #74: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:58.826] Exporting ‘nested_a’ (43.88 KiB) to cluster node #1 ...
[13:23:58.985]  - Condition #75: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:58.827] Exporting ‘nested_a’ (43.88 KiB) to cluster node #1 ... DONE
[13:23:58.985]  - Condition #76: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:58.827] Exporting ‘a’ (56 bytes) to cluster node #1 ...
[13:23:58.985]  - Condition #77: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:58.827] Exporting ‘a’ (56 bytes) to cluster node #1 ... DONE
[13:23:58.985]  - Condition #78: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:58.828] Exporting ‘plan_a’ (43.88 KiB) to cluster node #1 ...
[13:23:58.986]  - Condition #79: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:58.872] Exporting ‘plan_a’ (43.88 KiB) to cluster node #1 ... DONE
[13:23:58.986]  - Condition #80: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:58.873] Exporting 3 global objects (87.82 KiB) to cluster node #1 ... DONE
[13:23:58.986]  - Condition #81: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:58.874] MultisessionFuture started
[13:23:58.986]  - Condition #82: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:58.874] - Launch lazy future ... done
[13:23:58.986]  - Condition #83: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:58.874] run() for ‘MultisessionFuture’ ... done
[13:23:58.986]  - Condition #84: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:58.875] result() for ClusterFuture ...
[13:23:58.987]  - Condition #85: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:58.875] receiveMessageFromWorker() for ClusterFuture ...
[13:23:58.987]  - Condition #86: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:58.876] - Validating connection of MultisessionFuture
[13:23:58.987]  - Condition #87: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:58.966] - received message: FutureResult
[13:23:58.987]  - Condition #88: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:58.966] - Received FutureResult
[13:23:58.987]  - Condition #89: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:58.966] - Erased future from FutureRegistry
[13:23:58.987]  - Condition #90: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:58.967] result() for ClusterFuture ...
[13:23:58.988]  - Condition #91: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:58.967] - result already collected: FutureResult
[13:23:58.988]  - Condition #92: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:58.967] result() for ClusterFuture ... done
[13:23:58.988]  - Condition #93: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:58.967] receiveMessageFromWorker() for ClusterFuture ... done
[13:23:58.988]  - Condition #94: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:58.967] result() for ClusterFuture ... done
[13:23:58.988]  - Condition #95: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:58.967] result() for ClusterFuture ...
[13:23:58.988]  - Condition #96: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:58.967] - result already collected: FutureResult
[13:23:58.989]  - Condition #97: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:58.967] result() for ClusterFuture ... done
[13:23:58.989] signalConditions() ... done
List of 6
 $ a       : int 1
 $ nested_a:List of 1
  ..$ b:function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), 
    envir = parent.frame())  
  .. ..- attr(*, "class")= chr [1:5] "multisession" "cluster" "multiprocess" "future" ...
  .. ..- attr(*, "untweakable")= chr "persistent"
  .. ..- attr(*, "call")= language plan(list(a = strategy1, b = strategy2))
 $ plan_a  :List of 1
  ..$ b:function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), 
    envir = parent.frame())  
  .. ..- attr(*, "class")= chr [1:5] "multisession" "cluster" "multiprocess" "future" ...
  .. ..- attr(*, "untweakable")= chr "persistent"
  .. ..- attr(*, "call")= language plan(list(a = strategy1, b = strategy2))
 $ b       : int 2
 $ nested_b: Named list()
 $ plan_b  :List of 1
  ..$ :function (..., envir = parent.frame())  
  .. ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
  ..- attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[13:23:58.996] getGlobalsAndPackages() ...
[13:23:58.996] Searching for globals...
[13:23:58.998] - globals found: [7] ‘{’, ‘value’, ‘future’, ‘subset’, ‘data’, ‘==’, ‘a’
[13:23:58.998] Searching for globals ... DONE
[13:23:58.998] Resolving globals: FALSE
[13:23:58.999] The total size of the 1 globals is 128 bytes (128 bytes)
[13:23:58.999] The total size of the 1 globals exported for future expression (‘{; value(future(subset(data, a == 2))); }’) is 128 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘data’ (128 bytes of class ‘list’)
[13:23:58.999] - globals: [1] ‘data’
[13:23:58.999] - packages: [1] ‘future’
[13:23:58.999] getGlobalsAndPackages() ... DONE
[13:23:59.000] run() for ‘Future’ ...
[13:23:59.000] - state: ‘created’
[13:23:59.000] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[13:23:59.000] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[13:23:59.001] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[13:23:59.001]   - Field: ‘label’
[13:23:59.001]   - Field: ‘local’
[13:23:59.001]   - Field: ‘owner’
[13:23:59.001]   - Field: ‘envir’
[13:23:59.001]   - Field: ‘packages’
[13:23:59.001]   - Field: ‘gc’
[13:23:59.001]   - Field: ‘conditions’
[13:23:59.002]   - Field: ‘expr’
[13:23:59.002]   - Field: ‘uuid’
[13:23:59.002]   - Field: ‘seed’
[13:23:59.002]   - Field: ‘version’
[13:23:59.002]   - Field: ‘result’
[13:23:59.002]   - Field: ‘asynchronous’
[13:23:59.002]   - Field: ‘calls’
[13:23:59.002]   - Field: ‘globals’
[13:23:59.003]   - Field: ‘stdout’
[13:23:59.003]   - Field: ‘earlySignal’
[13:23:59.003]   - Field: ‘lazy’
[13:23:59.003]   - Field: ‘state’
[13:23:59.003] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[13:23:59.003] - Launch lazy future ...
[13:23:59.003] Packages needed by the future expression (n = 1): ‘future’
[13:23:59.004] Packages needed by future strategies (n = 1): ‘future’
[13:23:59.004] {
[13:23:59.004]     {
[13:23:59.004]         {
[13:23:59.004]             ...future.startTime <- base::Sys.time()
[13:23:59.004]             {
[13:23:59.004]                 {
[13:23:59.004]                   {
[13:23:59.004]                     {
[13:23:59.004]                       base::local({
[13:23:59.004]                         has_future <- base::requireNamespace("future", 
[13:23:59.004]                           quietly = TRUE)
[13:23:59.004]                         if (has_future) {
[13:23:59.004]                           ns <- base::getNamespace("future")
[13:23:59.004]                           version <- ns[[".package"]][["version"]]
[13:23:59.004]                           if (is.null(version)) 
[13:23:59.004]                             version <- utils::packageVersion("future")
[13:23:59.004]                         }
[13:23:59.004]                         else {
[13:23:59.004]                           version <- NULL
[13:23:59.004]                         }
[13:23:59.004]                         if (!has_future || version < "1.8.0") {
[13:23:59.004]                           info <- base::c(r_version = base::gsub("R version ", 
[13:23:59.004]                             "", base::R.version$version.string), 
[13:23:59.004]                             platform = base::sprintf("%s (%s-bit)", 
[13:23:59.004]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:23:59.004]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:23:59.004]                               "release", "version")], collapse = " "), 
[13:23:59.004]                             hostname = base::Sys.info()[["nodename"]])
[13:23:59.004]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:23:59.004]                             info)
[13:23:59.004]                           info <- base::paste(info, collapse = "; ")
[13:23:59.004]                           if (!has_future) {
[13:23:59.004]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:23:59.004]                               info)
[13:23:59.004]                           }
[13:23:59.004]                           else {
[13:23:59.004]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:23:59.004]                               info, version)
[13:23:59.004]                           }
[13:23:59.004]                           base::stop(msg)
[13:23:59.004]                         }
[13:23:59.004]                       })
[13:23:59.004]                     }
[13:23:59.004]                     base::local({
[13:23:59.004]                       for (pkg in "future") {
[13:23:59.004]                         base::loadNamespace(pkg)
[13:23:59.004]                         base::library(pkg, character.only = TRUE)
[13:23:59.004]                       }
[13:23:59.004]                     })
[13:23:59.004]                   }
[13:23:59.004]                   options(future.plan = NULL)
[13:23:59.004]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:23:59.004]                   future::plan(list(b = function (..., workers = availableCores(), 
[13:23:59.004]                     lazy = FALSE, rscript_libs = .libPaths(), 
[13:23:59.004]                     envir = parent.frame()) 
[13:23:59.004]                   {
[13:23:59.004]                     if (is.function(workers)) 
[13:23:59.004]                       workers <- workers()
[13:23:59.004]                     workers <- structure(as.integer(workers), 
[13:23:59.004]                       class = class(workers))
[13:23:59.004]                     stop_if_not(length(workers) == 1, is.finite(workers), 
[13:23:59.004]                       workers >= 1)
[13:23:59.004]                     if (workers == 1L && !inherits(workers, "AsIs")) {
[13:23:59.004]                       return(sequential(..., lazy = TRUE, envir = envir))
[13:23:59.004]                     }
[13:23:59.004]                     future <- MultisessionFuture(..., workers = workers, 
[13:23:59.004]                       lazy = lazy, rscript_libs = rscript_libs, 
[13:23:59.004]                       envir = envir)
[13:23:59.004]                     if (!future$lazy) 
[13:23:59.004]                       future <- run(future)
[13:23:59.004]                     invisible(future)
[13:23:59.004]                   }), .cleanup = FALSE, .init = FALSE)
[13:23:59.004]                 }
[13:23:59.004]                 ...future.workdir <- getwd()
[13:23:59.004]             }
[13:23:59.004]             ...future.oldOptions <- base::as.list(base::.Options)
[13:23:59.004]             ...future.oldEnvVars <- base::Sys.getenv()
[13:23:59.004]         }
[13:23:59.004]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:23:59.004]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:23:59.004]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:23:59.004]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:23:59.004]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:23:59.004]             future.stdout.windows.reencode = NULL, width = 80L)
[13:23:59.004]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:23:59.004]             base::names(...future.oldOptions))
[13:23:59.004]     }
[13:23:59.004]     if (FALSE) {
[13:23:59.004]     }
[13:23:59.004]     else {
[13:23:59.004]         if (TRUE) {
[13:23:59.004]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:23:59.004]                 open = "w")
[13:23:59.004]         }
[13:23:59.004]         else {
[13:23:59.004]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:23:59.004]                 windows = "NUL", "/dev/null"), open = "w")
[13:23:59.004]         }
[13:23:59.004]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:23:59.004]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:23:59.004]             base::sink(type = "output", split = FALSE)
[13:23:59.004]             base::close(...future.stdout)
[13:23:59.004]         }, add = TRUE)
[13:23:59.004]     }
[13:23:59.004]     ...future.frame <- base::sys.nframe()
[13:23:59.004]     ...future.conditions <- base::list()
[13:23:59.004]     ...future.rng <- base::globalenv()$.Random.seed
[13:23:59.004]     if (FALSE) {
[13:23:59.004]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:23:59.004]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:23:59.004]     }
[13:23:59.004]     ...future.result <- base::tryCatch({
[13:23:59.004]         base::withCallingHandlers({
[13:23:59.004]             ...future.value <- base::withVisible(base::local({
[13:23:59.004]                 value(future(subset(data, a == 2)))
[13:23:59.004]             }))
[13:23:59.004]             future::FutureResult(value = ...future.value$value, 
[13:23:59.004]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:23:59.004]                   ...future.rng), globalenv = if (FALSE) 
[13:23:59.004]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:23:59.004]                     ...future.globalenv.names))
[13:23:59.004]                 else NULL, started = ...future.startTime, version = "1.8")
[13:23:59.004]         }, condition = base::local({
[13:23:59.004]             c <- base::c
[13:23:59.004]             inherits <- base::inherits
[13:23:59.004]             invokeRestart <- base::invokeRestart
[13:23:59.004]             length <- base::length
[13:23:59.004]             list <- base::list
[13:23:59.004]             seq.int <- base::seq.int
[13:23:59.004]             signalCondition <- base::signalCondition
[13:23:59.004]             sys.calls <- base::sys.calls
[13:23:59.004]             `[[` <- base::`[[`
[13:23:59.004]             `+` <- base::`+`
[13:23:59.004]             `<<-` <- base::`<<-`
[13:23:59.004]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:23:59.004]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:23:59.004]                   3L)]
[13:23:59.004]             }
[13:23:59.004]             function(cond) {
[13:23:59.004]                 is_error <- inherits(cond, "error")
[13:23:59.004]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:23:59.004]                   NULL)
[13:23:59.004]                 if (is_error) {
[13:23:59.004]                   sessionInformation <- function() {
[13:23:59.004]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:23:59.004]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:23:59.004]                       search = base::search(), system = base::Sys.info())
[13:23:59.004]                   }
[13:23:59.004]                   ...future.conditions[[length(...future.conditions) + 
[13:23:59.004]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:23:59.004]                     cond$call), session = sessionInformation(), 
[13:23:59.004]                     timestamp = base::Sys.time(), signaled = 0L)
[13:23:59.004]                   signalCondition(cond)
[13:23:59.004]                 }
[13:23:59.004]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:23:59.004]                 "immediateCondition"))) {
[13:23:59.004]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:23:59.004]                   ...future.conditions[[length(...future.conditions) + 
[13:23:59.004]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:23:59.004]                   if (TRUE && !signal) {
[13:23:59.004]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:23:59.004]                     {
[13:23:59.004]                       inherits <- base::inherits
[13:23:59.004]                       invokeRestart <- base::invokeRestart
[13:23:59.004]                       is.null <- base::is.null
[13:23:59.004]                       muffled <- FALSE
[13:23:59.004]                       if (inherits(cond, "message")) {
[13:23:59.004]                         muffled <- grepl(pattern, "muffleMessage")
[13:23:59.004]                         if (muffled) 
[13:23:59.004]                           invokeRestart("muffleMessage")
[13:23:59.004]                       }
[13:23:59.004]                       else if (inherits(cond, "warning")) {
[13:23:59.004]                         muffled <- grepl(pattern, "muffleWarning")
[13:23:59.004]                         if (muffled) 
[13:23:59.004]                           invokeRestart("muffleWarning")
[13:23:59.004]                       }
[13:23:59.004]                       else if (inherits(cond, "condition")) {
[13:23:59.004]                         if (!is.null(pattern)) {
[13:23:59.004]                           computeRestarts <- base::computeRestarts
[13:23:59.004]                           grepl <- base::grepl
[13:23:59.004]                           restarts <- computeRestarts(cond)
[13:23:59.004]                           for (restart in restarts) {
[13:23:59.004]                             name <- restart$name
[13:23:59.004]                             if (is.null(name)) 
[13:23:59.004]                               next
[13:23:59.004]                             if (!grepl(pattern, name)) 
[13:23:59.004]                               next
[13:23:59.004]                             invokeRestart(restart)
[13:23:59.004]                             muffled <- TRUE
[13:23:59.004]                             break
[13:23:59.004]                           }
[13:23:59.004]                         }
[13:23:59.004]                       }
[13:23:59.004]                       invisible(muffled)
[13:23:59.004]                     }
[13:23:59.004]                     muffleCondition(cond, pattern = "^muffle")
[13:23:59.004]                   }
[13:23:59.004]                 }
[13:23:59.004]                 else {
[13:23:59.004]                   if (TRUE) {
[13:23:59.004]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:23:59.004]                     {
[13:23:59.004]                       inherits <- base::inherits
[13:23:59.004]                       invokeRestart <- base::invokeRestart
[13:23:59.004]                       is.null <- base::is.null
[13:23:59.004]                       muffled <- FALSE
[13:23:59.004]                       if (inherits(cond, "message")) {
[13:23:59.004]                         muffled <- grepl(pattern, "muffleMessage")
[13:23:59.004]                         if (muffled) 
[13:23:59.004]                           invokeRestart("muffleMessage")
[13:23:59.004]                       }
[13:23:59.004]                       else if (inherits(cond, "warning")) {
[13:23:59.004]                         muffled <- grepl(pattern, "muffleWarning")
[13:23:59.004]                         if (muffled) 
[13:23:59.004]                           invokeRestart("muffleWarning")
[13:23:59.004]                       }
[13:23:59.004]                       else if (inherits(cond, "condition")) {
[13:23:59.004]                         if (!is.null(pattern)) {
[13:23:59.004]                           computeRestarts <- base::computeRestarts
[13:23:59.004]                           grepl <- base::grepl
[13:23:59.004]                           restarts <- computeRestarts(cond)
[13:23:59.004]                           for (restart in restarts) {
[13:23:59.004]                             name <- restart$name
[13:23:59.004]                             if (is.null(name)) 
[13:23:59.004]                               next
[13:23:59.004]                             if (!grepl(pattern, name)) 
[13:23:59.004]                               next
[13:23:59.004]                             invokeRestart(restart)
[13:23:59.004]                             muffled <- TRUE
[13:23:59.004]                             break
[13:23:59.004]                           }
[13:23:59.004]                         }
[13:23:59.004]                       }
[13:23:59.004]                       invisible(muffled)
[13:23:59.004]                     }
[13:23:59.004]                     muffleCondition(cond, pattern = "^muffle")
[13:23:59.004]                   }
[13:23:59.004]                 }
[13:23:59.004]             }
[13:23:59.004]         }))
[13:23:59.004]     }, error = function(ex) {
[13:23:59.004]         base::structure(base::list(value = NULL, visible = NULL, 
[13:23:59.004]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:23:59.004]                 ...future.rng), started = ...future.startTime, 
[13:23:59.004]             finished = Sys.time(), session_uuid = NA_character_, 
[13:23:59.004]             version = "1.8"), class = "FutureResult")
[13:23:59.004]     }, finally = {
[13:23:59.004]         if (!identical(...future.workdir, getwd())) 
[13:23:59.004]             setwd(...future.workdir)
[13:23:59.004]         {
[13:23:59.004]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:23:59.004]                 ...future.oldOptions$nwarnings <- NULL
[13:23:59.004]             }
[13:23:59.004]             base::options(...future.oldOptions)
[13:23:59.004]             if (.Platform$OS.type == "windows") {
[13:23:59.004]                 old_names <- names(...future.oldEnvVars)
[13:23:59.004]                 envs <- base::Sys.getenv()
[13:23:59.004]                 names <- names(envs)
[13:23:59.004]                 common <- intersect(names, old_names)
[13:23:59.004]                 added <- setdiff(names, old_names)
[13:23:59.004]                 removed <- setdiff(old_names, names)
[13:23:59.004]                 changed <- common[...future.oldEnvVars[common] != 
[13:23:59.004]                   envs[common]]
[13:23:59.004]                 NAMES <- toupper(changed)
[13:23:59.004]                 args <- list()
[13:23:59.004]                 for (kk in seq_along(NAMES)) {
[13:23:59.004]                   name <- changed[[kk]]
[13:23:59.004]                   NAME <- NAMES[[kk]]
[13:23:59.004]                   if (name != NAME && is.element(NAME, old_names)) 
[13:23:59.004]                     next
[13:23:59.004]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:23:59.004]                 }
[13:23:59.004]                 NAMES <- toupper(added)
[13:23:59.004]                 for (kk in seq_along(NAMES)) {
[13:23:59.004]                   name <- added[[kk]]
[13:23:59.004]                   NAME <- NAMES[[kk]]
[13:23:59.004]                   if (name != NAME && is.element(NAME, old_names)) 
[13:23:59.004]                     next
[13:23:59.004]                   args[[name]] <- ""
[13:23:59.004]                 }
[13:23:59.004]                 NAMES <- toupper(removed)
[13:23:59.004]                 for (kk in seq_along(NAMES)) {
[13:23:59.004]                   name <- removed[[kk]]
[13:23:59.004]                   NAME <- NAMES[[kk]]
[13:23:59.004]                   if (name != NAME && is.element(NAME, old_names)) 
[13:23:59.004]                     next
[13:23:59.004]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:23:59.004]                 }
[13:23:59.004]                 if (length(args) > 0) 
[13:23:59.004]                   base::do.call(base::Sys.setenv, args = args)
[13:23:59.004]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:23:59.004]             }
[13:23:59.004]             else {
[13:23:59.004]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:23:59.004]             }
[13:23:59.004]             {
[13:23:59.004]                 if (base::length(...future.futureOptionsAdded) > 
[13:23:59.004]                   0L) {
[13:23:59.004]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:23:59.004]                   base::names(opts) <- ...future.futureOptionsAdded
[13:23:59.004]                   base::options(opts)
[13:23:59.004]                 }
[13:23:59.004]                 {
[13:23:59.004]                   {
[13:23:59.004]                     NULL
[13:23:59.004]                     RNGkind("Mersenne-Twister")
[13:23:59.004]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[13:23:59.004]                       inherits = FALSE)
[13:23:59.004]                   }
[13:23:59.004]                   options(future.plan = NULL)
[13:23:59.004]                   if (is.na(NA_character_)) 
[13:23:59.004]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:23:59.004]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:23:59.004]                   future::plan(list(a = function (..., envir = parent.frame()) 
[13:23:59.004]                   {
[13:23:59.004]                     future <- SequentialFuture(..., envir = envir)
[13:23:59.004]                     if (!future$lazy) 
[13:23:59.004]                       future <- run(future)
[13:23:59.004]                     invisible(future)
[13:23:59.004]                   }, b = function (..., workers = availableCores(), 
[13:23:59.004]                     lazy = FALSE, rscript_libs = .libPaths(), 
[13:23:59.004]                     envir = parent.frame()) 
[13:23:59.004]                   {
[13:23:59.004]                     if (is.function(workers)) 
[13:23:59.004]                       workers <- workers()
[13:23:59.004]                     workers <- structure(as.integer(workers), 
[13:23:59.004]                       class = class(workers))
[13:23:59.004]                     stop_if_not(length(workers) == 1, is.finite(workers), 
[13:23:59.004]                       workers >= 1)
[13:23:59.004]                     if (workers == 1L && !inherits(workers, "AsIs")) {
[13:23:59.004]                       return(sequential(..., lazy = TRUE, envir = envir))
[13:23:59.004]                     }
[13:23:59.004]                     future <- MultisessionFuture(..., workers = workers, 
[13:23:59.004]                       lazy = lazy, rscript_libs = rscript_libs, 
[13:23:59.004]                       envir = envir)
[13:23:59.004]                     if (!future$lazy) 
[13:23:59.004]                       future <- run(future)
[13:23:59.004]                     invisible(future)
[13:23:59.004]                   }), .cleanup = FALSE, .init = FALSE)
[13:23:59.004]                 }
[13:23:59.004]             }
[13:23:59.004]         }
[13:23:59.004]     })
[13:23:59.004]     if (TRUE) {
[13:23:59.004]         base::sink(type = "output", split = FALSE)
[13:23:59.004]         if (TRUE) {
[13:23:59.004]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:23:59.004]         }
[13:23:59.004]         else {
[13:23:59.004]             ...future.result["stdout"] <- base::list(NULL)
[13:23:59.004]         }
[13:23:59.004]         base::close(...future.stdout)
[13:23:59.004]         ...future.stdout <- NULL
[13:23:59.004]     }
[13:23:59.004]     ...future.result$conditions <- ...future.conditions
[13:23:59.004]     ...future.result$finished <- base::Sys.time()
[13:23:59.004]     ...future.result
[13:23:59.004] }
[13:23:59.006] assign_globals() ...
[13:23:59.007] List of 1
[13:23:59.007]  $ data:'data.frame':	3 obs. of  2 variables:
[13:23:59.007]   ..$ a: int [1:3] 1 2 3
[13:23:59.007]   ..$ b: int [1:3] 3 2 1
[13:23:59.007]  - attr(*, "where")=List of 1
[13:23:59.007]   ..$ data:<environment: R_EmptyEnv> 
[13:23:59.007]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[13:23:59.007]  - attr(*, "resolved")= logi FALSE
[13:23:59.007]  - attr(*, "total_size")= num 128
[13:23:59.007]  - attr(*, "already-done")= logi TRUE
[13:23:59.012] - copied ‘data’ to environment
[13:23:59.012] assign_globals() ... done
[13:23:59.013] plan(): Setting new future strategy stack:
[13:23:59.013] List of future strategies:
[13:23:59.013] 1. multisession:
[13:23:59.013]    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[13:23:59.013]    - tweaked: FALSE
[13:23:59.013]    - call: plan(list(a = strategy1, b = strategy2))
[13:23:59.017] plan(): nbrOfWorkers() = 2
[13:23:59.103] plan(): Setting new future strategy stack:
[13:23:59.103] List of future strategies:
[13:23:59.103] 1. sequential:
[13:23:59.103]    - args: function (..., envir = parent.frame())
[13:23:59.103]    - tweaked: FALSE
[13:23:59.103]    - call: plan(list(a = strategy1, b = strategy2))
[13:23:59.103] 2. multisession:
[13:23:59.103]    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[13:23:59.103]    - tweaked: FALSE
[13:23:59.103]    - call: plan(list(a = strategy1, b = strategy2))
[13:23:59.104] plan(): nbrOfWorkers() = 1
[13:23:59.104] SequentialFuture started (and completed)
[13:23:59.104] signalConditions() ...
[13:23:59.104]  - include = ‘immediateCondition’
[13:23:59.104]  - exclude = 
[13:23:59.105]  - resignal = FALSE
[13:23:59.105]  - Number of conditions: 63
[13:23:59.105] signalConditions() ... done
[13:23:59.105] - Launch lazy future ... done
[13:23:59.105] run() for ‘SequentialFuture’ ... done
[13:23:59.105] signalConditions() ...
[13:23:59.105]  - include = ‘immediateCondition’
[13:23:59.105]  - exclude = 
[13:23:59.105]  - resignal = FALSE
[13:23:59.105]  - Number of conditions: 63
[13:23:59.106] signalConditions() ... done
[13:23:59.106] Future state: ‘finished’
[13:23:59.106] signalConditions() ...
[13:23:59.106]  - include = ‘condition’
[13:23:59.106]  - exclude = ‘immediateCondition’
[13:23:59.106]  - resignal = TRUE
[13:23:59.106]  - Number of conditions: 63
[13:23:59.106]  - Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:59.018] getGlobalsAndPackages() ...
[13:23:59.106]  - Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:59.018] Searching for globals...
[13:23:59.107]  - Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:59.031] - globals found: [4] ‘subset’, ‘data’, ‘==’, ‘a’
[13:23:59.107]  - Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:59.032] Searching for globals ... DONE
[13:23:59.107]  - Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:59.032] Resolving globals: FALSE
[13:23:59.107]  - Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:59.032] The total size of the 1 globals is 128 bytes (128 bytes)
[13:23:59.107]  - Condition #7: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:59.033] The total size of the 1 globals exported for future expression (‘subset(data, a == 2)’) is 128 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘data’ (128 bytes of class ‘list’)
[13:23:59.107]  - Condition #8: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:59.033] - globals: [1] ‘data’
[13:23:59.107]  - Condition #9: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:59.033] 
[13:23:59.108]  - Condition #10: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:59.033] getGlobalsAndPackages() ... DONE
[13:23:59.108]  - Condition #11: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:59.033] run() for ‘Future’ ...
[13:23:59.108]  - Condition #12: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:59.033] - state: ‘created’
[13:23:59.108]  - Condition #13: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:59.034] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[13:23:59.108]  - Condition #14: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:59.047] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:23:59.108]  - Condition #15: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:59.048] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[13:23:59.108]  - Condition #16: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:59.048]   - Field: ‘node’
[13:23:59.109]  - Condition #17: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:59.048]   - Field: ‘label’
[13:23:59.109]  - Condition #18: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:59.048]   - Field: ‘local’
[13:23:59.109]  - Condition #19: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:59.048]   - Field: ‘owner’
[13:23:59.109]  - Condition #20: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:59.048]   - Field: ‘envir’
[13:23:59.109]  - Condition #21: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:59.048]   - Field: ‘workers’
[13:23:59.109]  - Condition #22: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:59.048]   - Field: ‘packages’
[13:23:59.109]  - Condition #23: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:59.049]   - Field: ‘gc’
[13:23:59.109]  - Condition #24: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:59.049]   - Field: ‘conditions’
[13:23:59.110]  - Condition #25: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:59.049]   - Field: ‘persistent’
[13:23:59.110]  - Condition #26: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:59.049]   - Field: ‘expr’
[13:23:59.110]  - Condition #27: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:59.049]   - Field: ‘uuid’
[13:23:59.110]  - Condition #28: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:59.049]   - Field: ‘seed’
[13:23:59.110]  - Condition #29: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:59.049]   - Field: ‘version’
[13:23:59.110]  - Condition #30: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:59.049]   - Field: ‘result’
[13:23:59.110]  - Condition #31: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:59.049]   - Field: ‘asynchronous’
[13:23:59.110]  - Condition #32: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:59.050]   - Field: ‘calls’
[13:23:59.111]  - Condition #33: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:59.050]   - Field: ‘globals’
[13:23:59.111]  - Condition #34: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:59.050]   - Field: ‘stdout’
[13:23:59.111]  - Condition #35: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:59.050]   - Field: ‘earlySignal’
[13:23:59.111]  - Condition #36: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:59.050]   - Field: ‘lazy’
[13:23:59.111]  - Condition #37: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:59.050]   - Field: ‘state’
[13:23:59.111]  - Condition #38: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:59.050] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[13:23:59.111]  - Condition #39: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:59.050] - Launch lazy future ...
[13:23:59.112]  - Condition #40: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:59.051] Packages needed by the future expression (n = 0): <none>
[13:23:59.112]  - Condition #41: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:59.051] Packages needed by future strategies (n = 0): <none>
[13:23:59.112]  - Condition #42: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:59.051] {
[13:23:59.051]     {
[13:23:59.051]         {
[13:23:59.051]             ...future.startTime <- base::Sys.time()
[13:23:59.051]             {
[13:23:59.051]                 {
[13:23:59.051]                   {
[13:23:59.051]                     {
[13:23:59.051]                       base::local({
[13:23:59.051]                         has_future <- base::requireNamespace("future", 
[13:23:59.051]                           quietly = TRUE)
[13:23:59.051]                         if (has_future) {
[13:23:59.051]                           ns <- base::getNamespace("future")
[13:23:59.051]                           version <- ns[[".package"]][["version"]]
[13:23:59.051]                           if (is.null(version)) 
[13:23:59.051]                             version <- utils::packageVersion("future")
[13:23:59.051]                         }
[13:23:59.051]                         else {
[13:23:59.051]                           version <- NULL
[13:23:59.051]                         }
[13:23:59.051]                         if (!has_future || version < "1.8.0") {
[13:23:59.051]                           info <- base::c(r_version = base::gsub("R version ", 
[13:23:59.051]                             "", base::R.version$version.string), 
[13:23:59.051]                             platform = base::sprintf("%s (%s-bit)", 
[13:23:59.051]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:23:59.051]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:23:59.051]                               "release", "version")], collapse = " "), 
[13:23:59.051]                             hostname = base::Sys.info()[["nodename"]])
[13:23:59.051]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:23:59.051]                             info)
[13:23:59.051]                           info <- base::paste(info, collapse = "; ")
[13:23:59.051]                           if (!has_future) {
[13:23:59.051]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:23:59.051]                               info)
[13:23:59.051]                           }
[13:23:59.051]                           else {
[13:23:59.051]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:23:59.051]                               info, version)
[13:23:59.051]                           }
[13:23:59.051]                           base::stop(msg)
[13:23:59.051]                         }
[13:23:59.051]                       })
[13:23:59.051]                     }
[13:23:59.051]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[13:23:59.051]                     base::options(mc.cores = 1L)
[13:23:59.051]                   }
[13:23:59.051]                   options(future.plan = NULL)
[13:23:59.051]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:23:59.051]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:23:59.051]                 }
[13:23:59.051]                 ...future.workdir <- getwd()
[13:23:59.051]             }
[13:23:59.051]             ...future.oldOptions <- base::as.list(base::.Options)
[13:23:59.051]             ...future.oldEnvVars <- base::Sys.getenv()
[13:23:59.051]         }
[13:23:59.051]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:23:59.051]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:23:59.051]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:23:59.051]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:23:59.051]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:23:59.051]             future.stdout.windows.reencode = NULL, width = 80L)
[13:23:59.051]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:23:59.051]             base::names(...future.oldOptions))
[13:23:59.051]     }
[13:23:59.051]     if (FALSE) {
[13:23:59.051]     }
[13:23:59.051]     else {
[13:23:59.051]         if (TRUE) {
[13:23:59.051]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:23:59.051]                 open = "w")
[13:23:59.051]         }
[13:23:59.051]         else {
[13:23:59.051]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:23:59.051]                 windows = "NUL", "/dev/null"), open = "w")
[13:23:59.051]         }
[13:23:59.051]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:23:59.051]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:23:59.051]             base::sink(type = "output", split = FALSE)
[13:23:59.051]             base::close(...future.stdout)
[13:23:59.051]         }, add = TRUE)
[13:23:59.051]     }
[13:23:59.051]     ...future.frame <- base::sys.nframe()
[13:23:59.051]     ...future.conditions <- base::list()
[13:23:59.051]     ...future.rng <- base::globalenv()$.Random.seed
[13:23:59.051]     if (FALSE) {
[13:23:59.051]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:23:59.051]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:23:59.051]     }
[13:23:59.051]     ...future.result <- base::tryCatch({
[13:23:59.051]         base::withCallingHandlers({
[13:23:59.051]             ...future.value <- base::withVisible(base::local({
[13:23:59.051]                 ...future.makeSendCondition <- base::local({
[13:23:59.051]                   sendCondition <- NULL
[13:23:59.051]                   function(frame = 1L) {
[13:23:59.051]                     if (is.function(sendCondition)) 
[13:23:59.051]                       return(sendCondition)
[13:23:59.051]                     ns <- getNamespace("parallel")
[13:23:59.051]                     if (exists("sendData", mode = "function", 
[13:23:59.051]                       envir = ns)) {
[13:23:59.051]                       parallel_sendData <- get("sendData", mode = "function", 
[13:23:59.051]                         envir = ns)
[13:23:59.051]                       envir <- sys.frame(frame)
[13:23:59.051]                       master <- NULL
[13:23:59.051]                       while (!identical(envir, .GlobalEnv) && 
[13:23:59.051]                         !identical(envir, emptyenv())) {
[13:23:59.051]                         if (exists("master", mode = "list", envir = envir, 
[13:23:59.051]                           inherits = FALSE)) {
[13:23:59.051]                           master <- get("master", mode = "list", 
[13:23:59.051]                             envir = envir, inherits = FALSE)
[13:23:59.051]                           if (inherits(master, c("SOCKnode", 
[13:23:59.051]                             "SOCK0node"))) {
[13:23:59.051]                             sendCondition <<- function(cond) {
[13:23:59.051]                               data <- list(type = "VALUE", value = cond, 
[13:23:59.051]                                 success = TRUE)
[13:23:59.051]                               parallel_sendData(master, data)
[13:23:59.051]                             }
[13:23:59.051]                             return(sendCondition)
[13:23:59.051]                           }
[13:23:59.051]                         }
[13:23:59.051]                         frame <- frame + 1L
[13:23:59.051]                         envir <- sys.frame(frame)
[13:23:59.051]                       }
[13:23:59.051]                     }
[13:23:59.051]                     sendCondition <<- function(cond) NULL
[13:23:59.051]                   }
[13:23:59.051]                 })
[13:23:59.051]                 withCallingHandlers({
[13:23:59.051]                   subset(data, a == 2)
[13:23:59.051]                 }, immediateCondition = function(cond) {
[13:23:59.051]                   sendCondition <- ...future.makeSendCondition()
[13:23:59.051]                   sendCondition(cond)
[13:23:59.051]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:23:59.051]                   {
[13:23:59.051]                     inherits <- base::inherits
[13:23:59.051]                     invokeRestart <- base::invokeRestart
[13:23:59.051]                     is.null <- base::is.null
[13:23:59.051]                     muffled <- FALSE
[13:23:59.051]                     if (inherits(cond, "message")) {
[13:23:59.051]                       muffled <- grepl(pattern, "muffleMessage")
[13:23:59.051]                       if (muffled) 
[13:23:59.051]                         invokeRestart("muffleMessage")
[13:23:59.051]                     }
[13:23:59.051]                     else if (inherits(cond, "warning")) {
[13:23:59.051]                       muffled <- grepl(pattern, "muffleWarning")
[13:23:59.051]                       if (muffled) 
[13:23:59.051]                         invokeRestart("muffleWarning")
[13:23:59.051]                     }
[13:23:59.051]                     else if (inherits(cond, "condition")) {
[13:23:59.051]                       if (!is.null(pattern)) {
[13:23:59.051]                         computeRestarts <- base::computeRestarts
[13:23:59.051]                         grepl <- base::grepl
[13:23:59.051]                         restarts <- computeRestarts(cond)
[13:23:59.051]                         for (restart in restarts) {
[13:23:59.051]                           name <- restart$name
[13:23:59.051]                           if (is.null(name)) 
[13:23:59.051]                             next
[13:23:59.051]                           if (!grepl(pattern, name)) 
[13:23:59.051]                             next
[13:23:59.051]                           invokeRestart(restart)
[13:23:59.051]                           muffled <- TRUE
[13:23:59.051]                           break
[13:23:59.051]                         }
[13:23:59.051]                       }
[13:23:59.051]                     }
[13:23:59.051]                     invisible(muffled)
[13:23:59.051]                   }
[13:23:59.051]                   muffleCondition(cond)
[13:23:59.051]                 })
[13:23:59.051]             }))
[13:23:59.051]             future::FutureResult(value = ...future.value$value, 
[13:23:59.051]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:23:59.051]                   ...future.rng), globalenv = if (FALSE) 
[13:23:59.051]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:23:59.051]                     ...future.globalenv.names))
[13:23:59.051]                 else NULL, started = ...future.startTime, version = "1.8")
[13:23:59.051]         }, condition = base::local({
[13:23:59.051]             c <- base::c
[13:23:59.051]             inherits <- base::inherits
[13:23:59.051]             invokeRestart <- base::invokeRestart
[13:23:59.051]             length <- base::length
[13:23:59.051]             list <- base::list
[13:23:59.051]             seq.int <- base::seq.int
[13:23:59.051]             signalCondition <- base::signalCondition
[13:23:59.051]             sys.calls <- base::sys.calls
[13:23:59.051]             `[[` <- base::`[[`
[13:23:59.051]             `+` <- base::`+`
[13:23:59.051]             `<<-` <- base::`<<-`
[13:23:59.051]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:23:59.051]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:23:59.051]                   3L)]
[13:23:59.051]             }
[13:23:59.051]             function(cond) {
[13:23:59.051]                 is_error <- inherits(cond, "error")
[13:23:59.051]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:23:59.051]                   NULL)
[13:23:59.051]                 if (is_error) {
[13:23:59.051]                   sessionInformation <- function() {
[13:23:59.051]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:23:59.051]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:23:59.051]                       search = base::search(), system = base::Sys.info())
[13:23:59.051]                   }
[13:23:59.051]                   ...future.conditions[[length(...future.conditions) + 
[13:23:59.051]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:23:59.051]                     cond$call), session = sessionInformation(), 
[13:23:59.051]                     timestamp = base::Sys.time(), signaled = 0L)
[13:23:59.051]                   signalCondition(cond)
[13:23:59.051]                 }
[13:23:59.051]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:23:59.051]                 "immediateCondition"))) {
[13:23:59.051]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:23:59.051]                   ...future.conditions[[length(...future.conditions) + 
[13:23:59.051]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:23:59.051]                   if (TRUE && !signal) {
[13:23:59.051]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:23:59.051]                     {
[13:23:59.051]                       inherits <- base::inherits
[13:23:59.051]                       invokeRestart <- base::invokeRestart
[13:23:59.051]                       is.null <- base::is.null
[13:23:59.051]                       muffled <- FALSE
[13:23:59.051]                       if (inherits(cond, "message")) {
[13:23:59.051]                         muffled <- grepl(pattern, "muffleMessage")
[13:23:59.051]                         if (muffled) 
[13:23:59.051]                           invokeRestart("muffleMessage")
[13:23:59.051]                       }
[13:23:59.051]                       else if (inherits(cond, "warning")) {
[13:23:59.051]                         muffled <- grepl(pattern, "muffleWarning")
[13:23:59.051]                         if (muffled) 
[13:23:59.051]                           invokeRestart("muffleWarning")
[13:23:59.051]                       }
[13:23:59.051]                       else if (inherits(cond, "condition")) {
[13:23:59.051]                         if (!is.null(pattern)) {
[13:23:59.051]                           computeRestarts <- base::computeRestarts
[13:23:59.051]                           grepl <- base::grepl
[13:23:59.051]                           restarts <- computeRestarts(cond)
[13:23:59.051]                           for (restart in restarts) {
[13:23:59.051]                             name <- restart$name
[13:23:59.051]                             if (is.null(name)) 
[13:23:59.051]                               next
[13:23:59.051]                             if (!grepl(pattern, name)) 
[13:23:59.051]                               next
[13:23:59.051]                             invokeRestart(restart)
[13:23:59.051]                             muffled <- TRUE
[13:23:59.051]                             break
[13:23:59.051]                           }
[13:23:59.051]                         }
[13:23:59.051]                       }
[13:23:59.051]                       invisible(muffled)
[13:23:59.051]                     }
[13:23:59.051]                     muffleCondition(cond, pattern = "^muffle")
[13:23:59.051]                   }
[13:23:59.051]                 }
[13:23:59.051]                 else {
[13:23:59.051]                   if (TRUE) {
[13:23:59.051]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:23:59.051]                     {
[13:23:59.051]                       inherits <- base::inherits
[13:23:59.051]                       invokeRestart <- base::invokeRestart
[13:23:59.051]                       is.null <- base::is.null
[13:23:59.051]                       muffled <- FALSE
[13:23:59.051]                       if (inherits(cond, "message")) {
[13:23:59.051]                         muffled <- grepl(pattern, "muffleMessage")
[13:23:59.051]                         if (muffled) 
[13:23:59.051]                           invokeRestart("muffleMessage")
[13:23:59.051]                       }
[13:23:59.051]                       else if (inherits(cond, "warning")) {
[13:23:59.051]                         muffled <- grepl(pattern, "muffleWarning")
[13:23:59.051]                         if (muffled) 
[13:23:59.051]                           invokeRestart("muffleWarning")
[13:23:59.051]                       }
[13:23:59.051]                       else if (inherits(cond, "condition")) {
[13:23:59.051]                         if (!is.null(pattern)) {
[13:23:59.051]                           computeRestarts <- base::computeRestarts
[13:23:59.051]                           grepl <- base::grepl
[13:23:59.051]                           restarts <- computeRestarts(cond)
[13:23:59.051]                           for (restart in restarts) {
[13:23:59.051]                             name <- restart$name
[13:23:59.051]                             if (is.null(name)) 
[13:23:59.051]                               next
[13:23:59.051]                             if (!grepl(pattern, name)) 
[13:23:59.051]                               next
[13:23:59.051]                             invokeRestart(restart)
[13:23:59.051]                             muffled <- TRUE
[13:23:59.051]                             break
[13:23:59.051]                           }
[13:23:59.051]                         }
[13:23:59.051]                       }
[13:23:59.051]                       invisible(muffled)
[13:23:59.051]                     }
[13:23:59.051]                     muffleCondition(cond, pattern = "^muffle")
[13:23:59.051]                   }
[13:23:59.051]                 }
[13:23:59.051]             }
[13:23:59.051]         }))
[13:23:59.051]     }, error = function(ex) {
[13:23:59.051]         base::structure(base::list(value = NULL, visible = NULL, 
[13:23:59.051]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:23:59.051]                 ...future.rng), started = ...future.startTime, 
[13:23:59.051]             finished = Sys.time(), session_uuid = NA_character_, 
[13:23:59.051]             version = "1.8"), class = "FutureResult")
[13:23:59.051]     }, finally = {
[13:23:59.051]         if (!identical(...future.workdir, getwd())) 
[13:23:59.051]             setwd(...future.workdir)
[13:23:59.051]         {
[13:23:59.051]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:23:59.051]                 ...future.oldOptions$nwarnings <- NULL
[13:23:59.051]             }
[13:23:59.051]             base::options(...future.oldOptions)
[13:23:59.051]             if (.Platform$OS.type == "windows") {
[13:23:59.051]                 old_names <- names(...future.oldEnvVars)
[13:23:59.051]                 envs <- base::Sys.getenv()
[13:23:59.051]                 names <- names(envs)
[13:23:59.051]                 common <- intersect(names, old_names)
[13:23:59.051]                 added <- setdiff(names, old_names)
[13:23:59.051]                 removed <- setdiff(old_names, names)
[13:23:59.051]                 changed <- common[...future.oldEnvVars[common] != 
[13:23:59.051]                   envs[common]]
[13:23:59.051]                 NAMES <- toupper(changed)
[13:23:59.051]                 args <- list()
[13:23:59.051]                 for (kk in seq_along(NAMES)) {
[13:23:59.051]                   name <- changed[[kk]]
[13:23:59.051]                   NAME <- NAMES[[kk]]
[13:23:59.051]                   if (name != NAME && is.element(NAME, old_names)) 
[13:23:59.051]                     next
[13:23:59.051]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:23:59.051]                 }
[13:23:59.051]                 NAMES <- toupper(added)
[13:23:59.051]                 for (kk in seq_along(NAMES)) {
[13:23:59.051]                   name <- added[[kk]]
[13:23:59.051]                   NAME <- NAMES[[kk]]
[13:23:59.051]                   if (name != NAME && is.element(NAME, old_names)) 
[13:23:59.051]                     next
[13:23:59.051]                   args[[name]] <- ""
[13:23:59.051]                 }
[13:23:59.051]                 NAMES <- toupper(removed)
[13:23:59.051]                 for (kk in seq_along(NAMES)) {
[13:23:59.051]                   name <- removed[[kk]]
[13:23:59.051]                   NAME <- NAMES[[kk]]
[13:23:59.051]                   if (name != NAME && is.element(NAME, old_names)) 
[13:23:59.051]                     next
[13:23:59.051]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:23:59.051]                 }
[13:23:59.051]                 if (length(args) > 0) 
[13:23:59.051]                   base::do.call(base::Sys.setenv, args = args)
[13:23:59.051]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:23:59.051]             }
[13:23:59.051]             else {
[13:23:59.051]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:23:59.051]             }
[13:23:59.051]             {
[13:23:59.051]                 if (base::length(...future.futureOptionsAdded) > 
[13:23:59.051]                   0L) {
[13:23:59.051]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:23:59.051]                   base::names(opts) <- ...future.futureOptionsAdded
[13:23:59.051]                   base::options(opts)
[13:23:59.051]                 }
[13:23:59.051]                 {
[13:23:59.051]                   {
[13:23:59.051]                     base::options(mc.cores = ...future.mc.cores.old)
[13:23:59.051]                     NULL
[13:23:59.051]                   }
[13:23:59.051]                   options(future.plan = NULL)
[13:23:59.051]                   if (is.na(NA_character_)) 
[13:23:59.051]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:23:59.051]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:23:59.051]                   future::plan(list(b = function (..., workers = availableCores(), 
[13:23:59.051]                     lazy = FALSE, rscript_libs = .libPaths(), 
[13:23:59.051]                     envir = parent.frame()) 
[13:23:59.051]                   {
[13:23:59.051]                     if (is.function(workers)) 
[13:23:59.051]                       workers <- workers()
[13:23:59.051]                     workers <- structure(as.integer(workers), 
[13:23:59.051]                       class = class(workers))
[13:23:59.051]                     stop_if_not(length(workers) == 1, is.finite(workers), 
[13:23:59.051]                       workers >= 1)
[13:23:59.051]                     if (workers == 1L && !inherits(workers, "AsIs")) {
[13:23:59.051]                       return(sequential(..., lazy = TRUE, envir = envir))
[13:23:59.051]                     }
[13:23:59.051]                     future <- MultisessionFuture(..., workers = workers, 
[13:23:59.051]                       lazy = lazy, rscript_libs = rscript_libs, 
[13:23:59.051]                       envir = envir)
[13:23:59.051]                     if (!future$lazy) 
[13:23:59.051]                       future <- run(future)
[13:23:59.051]                     invisible(future)
[13:23:59.051]                   }), .cleanup = FALSE, .init = FALSE)
[13:23:59.051]                 }
[13:23:59.051]             }
[13:23:59.051]         }
[13:23:59.051]     })
[13:23:59.051]     if (TRUE) {
[13:23:59.051]         base::sink(type = "output", split = FALSE)
[13:23:59.051]         if (TRUE) {
[13:23:59.051]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:23:59.051]         }
[13:23:59.051]         else {
[13:23:59.051]             ...future.result["stdout"] <- base::list(NULL)
[13:23:59.051]         }
[13:23:59.051]         base::close(...future.stdout)
[13:23:59.051]         ...future.stdout <- NULL
[13:23:59.051]     }
[13:23:59.051]     ...future.result$conditions <- ...future.conditions
[13:23:59.051]     ...future.result$finished <- base::Sys.time()
[13:23:59.051]     ...future.result
[13:23:59.051] }
[13:23:59.112]  - Condition #43: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:59.054] Exporting 1 global objects (128 bytes) to cluster node #1 ...
[13:23:59.112]  - Condition #44: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:59.054] Exporting ‘data’ (128 bytes) to cluster node #1 ...
[13:23:59.112]  - Condition #45: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:59.055] Exporting ‘data’ (128 bytes) to cluster node #1 ... DONE
[13:23:59.112]  - Condition #46: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:59.055] Exporting 1 global objects (128 bytes) to cluster node #1 ... DONE
[13:23:59.113]  - Condition #47: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:59.055] MultisessionFuture started
[13:23:59.113]  - Condition #48: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:59.056] - Launch lazy future ... done
[13:23:59.113]  - Condition #49: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:59.056] run() for ‘MultisessionFuture’ ... done
[13:23:59.113]  - Condition #50: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:59.056] result() for ClusterFuture ...
[13:23:59.113]  - Condition #51: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:59.056] receiveMessageFromWorker() for ClusterFuture ...
[13:23:59.113]  - Condition #52: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:59.056] - Validating connection of MultisessionFuture
[13:23:59.113]  - Condition #53: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:59.101] - received message: FutureResult
[13:23:59.113]  - Condition #54: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:59.102] - Received FutureResult
[13:23:59.114]  - Condition #55: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:59.102] - Erased future from FutureRegistry
[13:23:59.114]  - Condition #56: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:59.102] result() for ClusterFuture ...
[13:23:59.114]  - Condition #57: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:59.102] - result already collected: FutureResult
[13:23:59.114]  - Condition #58: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:59.102] result() for ClusterFuture ... done
[13:23:59.114]  - Condition #59: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:59.102] receiveMessageFromWorker() for ClusterFuture ... done
[13:23:59.114]  - Condition #60: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:59.102] result() for ClusterFuture ... done
[13:23:59.114]  - Condition #61: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:59.102] result() for ClusterFuture ...
[13:23:59.115]  - Condition #62: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:59.103] - result already collected: FutureResult
[13:23:59.115]  - Condition #63: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:59.103] result() for ClusterFuture ... done
[13:23:59.115] signalConditions() ... done
- plan(list('sequential', 'multisession')) ... DONE
- plan(list('multicore', 'sequential')) ...
[13:23:59.115] plan(): Setting new future strategy stack:
[13:23:59.115] List of future strategies:
[13:23:59.115] 1. multicore:
[13:23:59.115]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[13:23:59.115]    - tweaked: FALSE
[13:23:59.115]    - call: plan(list(a = strategy1, b = strategy2))
[13:23:59.115] 2. sequential:
[13:23:59.115]    - args: function (..., envir = parent.frame())
[13:23:59.115]    - tweaked: FALSE
[13:23:59.115]    - call: plan(list(a = strategy1, b = strategy2))
[13:23:59.121] plan(): nbrOfWorkers() = 2
[13:23:59.121] getGlobalsAndPackages() ...
[13:23:59.121] Searching for globals...
[13:23:59.145] - globals found: [21] ‘{’, ‘<-’, ‘unclass’, ‘::’, ‘[’, ‘nested’, ‘-’, ‘stopifnot’, ‘==’, ‘length’, ‘inherits’, ‘[[’, ‘strategy2’, ‘for’, ‘seq_along’, ‘attr’, ‘attr<-’, ‘[[<-’, ‘all.equal’, ‘list’, ‘%<-%’
[13:23:59.145] Searching for globals ... DONE
[13:23:59.145] Resolving globals: FALSE
[13:23:59.146] The total size of the 2 globals is 57.84 KiB (59224 bytes)
[13:23:59.146] The total size of the 2 globals exported for future expression (‘{; a <- 1L; plan_a <- unclass(future::plan("list")); nested_a <- nested[-1]; stopifnot(length(nested_a) == 1L, length(plan_a) == 1L, inherits(plan_a[[1]],; "future"), inherits(future::plan("next"), strategy2)); ...; }; y; }’) is 57.84 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘nested’ (57.72 KiB of class ‘list’) and ‘strategy2’ (120 bytes of class ‘character’)
[13:23:59.147] - globals: [2] ‘nested’, ‘strategy2’
[13:23:59.147] - packages: [1] ‘future’
[13:23:59.147] getGlobalsAndPackages() ... DONE
[13:23:59.147] run() for ‘Future’ ...
[13:23:59.147] - state: ‘created’
[13:23:59.147] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[13:23:59.151] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:23:59.151] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[13:23:59.152]   - Field: ‘label’
[13:23:59.152]   - Field: ‘local’
[13:23:59.152]   - Field: ‘owner’
[13:23:59.152]   - Field: ‘envir’
[13:23:59.152]   - Field: ‘workers’
[13:23:59.152]   - Field: ‘packages’
[13:23:59.152]   - Field: ‘gc’
[13:23:59.152]   - Field: ‘job’
[13:23:59.153]   - Field: ‘conditions’
[13:23:59.153]   - Field: ‘expr’
[13:23:59.153]   - Field: ‘uuid’
[13:23:59.153]   - Field: ‘seed’
[13:23:59.153]   - Field: ‘version’
[13:23:59.153]   - Field: ‘result’
[13:23:59.153]   - Field: ‘asynchronous’
[13:23:59.153]   - Field: ‘calls’
[13:23:59.153]   - Field: ‘globals’
[13:23:59.153]   - Field: ‘stdout’
[13:23:59.153]   - Field: ‘earlySignal’
[13:23:59.154]   - Field: ‘lazy’
[13:23:59.154]   - Field: ‘state’
[13:23:59.154] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[13:23:59.154] - Launch lazy future ...
[13:23:59.154] Packages needed by the future expression (n = 1): ‘future’
[13:23:59.154] Packages needed by future strategies (n = 1): ‘future’
[13:23:59.155] {
[13:23:59.155]     {
[13:23:59.155]         {
[13:23:59.155]             ...future.startTime <- base::Sys.time()
[13:23:59.155]             {
[13:23:59.155]                 {
[13:23:59.155]                   {
[13:23:59.155]                     {
[13:23:59.155]                       {
[13:23:59.155]                         base::local({
[13:23:59.155]                           has_future <- base::requireNamespace("future", 
[13:23:59.155]                             quietly = TRUE)
[13:23:59.155]                           if (has_future) {
[13:23:59.155]                             ns <- base::getNamespace("future")
[13:23:59.155]                             version <- ns[[".package"]][["version"]]
[13:23:59.155]                             if (is.null(version)) 
[13:23:59.155]                               version <- utils::packageVersion("future")
[13:23:59.155]                           }
[13:23:59.155]                           else {
[13:23:59.155]                             version <- NULL
[13:23:59.155]                           }
[13:23:59.155]                           if (!has_future || version < "1.8.0") {
[13:23:59.155]                             info <- base::c(r_version = base::gsub("R version ", 
[13:23:59.155]                               "", base::R.version$version.string), 
[13:23:59.155]                               platform = base::sprintf("%s (%s-bit)", 
[13:23:59.155]                                 base::R.version$platform, 8 * 
[13:23:59.155]                                   base::.Machine$sizeof.pointer), 
[13:23:59.155]                               os = base::paste(base::Sys.info()[base::c("sysname", 
[13:23:59.155]                                 "release", "version")], collapse = " "), 
[13:23:59.155]                               hostname = base::Sys.info()[["nodename"]])
[13:23:59.155]                             info <- base::sprintf("%s: %s", base::names(info), 
[13:23:59.155]                               info)
[13:23:59.155]                             info <- base::paste(info, collapse = "; ")
[13:23:59.155]                             if (!has_future) {
[13:23:59.155]                               msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:23:59.155]                                 info)
[13:23:59.155]                             }
[13:23:59.155]                             else {
[13:23:59.155]                               msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:23:59.155]                                 info, version)
[13:23:59.155]                             }
[13:23:59.155]                             base::stop(msg)
[13:23:59.155]                           }
[13:23:59.155]                         })
[13:23:59.155]                       }
[13:23:59.155]                       ...future.mc.cores.old <- base::getOption("mc.cores")
[13:23:59.155]                       base::options(mc.cores = 1L)
[13:23:59.155]                     }
[13:23:59.155]                     base::local({
[13:23:59.155]                       for (pkg in "future") {
[13:23:59.155]                         base::loadNamespace(pkg)
[13:23:59.155]                         base::library(pkg, character.only = TRUE)
[13:23:59.155]                       }
[13:23:59.155]                     })
[13:23:59.155]                   }
[13:23:59.155]                   options(future.plan = NULL)
[13:23:59.155]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:23:59.155]                   future::plan(list(b = function (..., envir = parent.frame()) 
[13:23:59.155]                   {
[13:23:59.155]                     future <- SequentialFuture(..., envir = envir)
[13:23:59.155]                     if (!future$lazy) 
[13:23:59.155]                       future <- run(future)
[13:23:59.155]                     invisible(future)
[13:23:59.155]                   }), .cleanup = FALSE, .init = FALSE)
[13:23:59.155]                 }
[13:23:59.155]                 ...future.workdir <- getwd()
[13:23:59.155]             }
[13:23:59.155]             ...future.oldOptions <- base::as.list(base::.Options)
[13:23:59.155]             ...future.oldEnvVars <- base::Sys.getenv()
[13:23:59.155]         }
[13:23:59.155]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:23:59.155]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:23:59.155]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:23:59.155]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:23:59.155]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:23:59.155]             future.stdout.windows.reencode = NULL, width = 80L)
[13:23:59.155]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:23:59.155]             base::names(...future.oldOptions))
[13:23:59.155]     }
[13:23:59.155]     if (FALSE) {
[13:23:59.155]     }
[13:23:59.155]     else {
[13:23:59.155]         if (TRUE) {
[13:23:59.155]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:23:59.155]                 open = "w")
[13:23:59.155]         }
[13:23:59.155]         else {
[13:23:59.155]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:23:59.155]                 windows = "NUL", "/dev/null"), open = "w")
[13:23:59.155]         }
[13:23:59.155]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:23:59.155]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:23:59.155]             base::sink(type = "output", split = FALSE)
[13:23:59.155]             base::close(...future.stdout)
[13:23:59.155]         }, add = TRUE)
[13:23:59.155]     }
[13:23:59.155]     ...future.frame <- base::sys.nframe()
[13:23:59.155]     ...future.conditions <- base::list()
[13:23:59.155]     ...future.rng <- base::globalenv()$.Random.seed
[13:23:59.155]     if (FALSE) {
[13:23:59.155]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:23:59.155]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:23:59.155]     }
[13:23:59.155]     ...future.result <- base::tryCatch({
[13:23:59.155]         base::withCallingHandlers({
[13:23:59.155]             ...future.value <- base::withVisible(base::local({
[13:23:59.155]                 withCallingHandlers({
[13:23:59.155]                   {
[13:23:59.155]                     a <- 1L
[13:23:59.155]                     plan_a <- unclass(future::plan("list"))
[13:23:59.155]                     nested_a <- nested[-1]
[13:23:59.155]                     stopifnot(length(nested_a) == 1L, length(plan_a) == 
[13:23:59.155]                       1L, inherits(plan_a[[1]], "future"), inherits(future::plan("next"), 
[13:23:59.155]                       strategy2))
[13:23:59.155]                     for (kk in seq_along(plan_a)) attr(plan_a[[kk]], 
[13:23:59.155]                       "init") <- NULL
[13:23:59.155]                     for (kk in seq_along(nested_a)) attr(nested_a[[kk]], 
[13:23:59.155]                       "init") <- NULL
[13:23:59.155]                     stopifnot(all.equal(plan_a, nested_a))
[13:23:59.155]                     y %<-% {
[13:23:59.155]                       b <- 2L
[13:23:59.155]                       plan_b <- future::plan("list")
[13:23:59.155]                       nested_b <- nested_a[-1]
[13:23:59.155]                       stopifnot(length(nested_b) == 0L, length(plan_b) == 
[13:23:59.155]                         1L, inherits(plan_b[[1]], "future"), 
[13:23:59.155]                         inherits(future::plan("next"), "sequential"))
[13:23:59.155]                       list(a = a, nested_a = nested_a, plan_a = plan_a, 
[13:23:59.155]                         b = b, nested_b = nested_b, plan_b = plan_b)
[13:23:59.155]                     }
[13:23:59.155]                     y
[13:23:59.155]                   }
[13:23:59.155]                 }, immediateCondition = function(cond) {
[13:23:59.155]                   save_rds <- function (object, pathname, ...) 
[13:23:59.155]                   {
[13:23:59.155]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[13:23:59.155]                     if (file_test("-f", pathname_tmp)) {
[13:23:59.155]                       fi_tmp <- file.info(pathname_tmp)
[13:23:59.155]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[13:23:59.155]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:23:59.155]                         fi_tmp[["mtime"]])
[13:23:59.155]                     }
[13:23:59.155]                     tryCatch({
[13:23:59.155]                       saveRDS(object, file = pathname_tmp, ...)
[13:23:59.155]                     }, error = function(ex) {
[13:23:59.155]                       msg <- conditionMessage(ex)
[13:23:59.155]                       fi_tmp <- file.info(pathname_tmp)
[13:23:59.155]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[13:23:59.155]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:23:59.155]                         fi_tmp[["mtime"]], msg)
[13:23:59.155]                       ex$message <- msg
[13:23:59.155]                       stop(ex)
[13:23:59.155]                     })
[13:23:59.155]                     stopifnot(file_test("-f", pathname_tmp))
[13:23:59.155]                     res <- file.rename(from = pathname_tmp, to = pathname)
[13:23:59.155]                     if (!res || file_test("-f", pathname_tmp)) {
[13:23:59.155]                       fi_tmp <- file.info(pathname_tmp)
[13:23:59.155]                       fi <- file.info(pathname)
[13:23:59.155]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[13:23:59.155]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:23:59.155]                         fi_tmp[["mtime"]], sQuote(pathname), 
[13:23:59.155]                         fi[["size"]], fi[["mtime"]])
[13:23:59.155]                       stop(msg)
[13:23:59.155]                     }
[13:23:59.155]                     invisible(pathname)
[13:23:59.155]                   }
[13:23:59.155]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[13:23:59.155]                     rootPath = tempdir()) 
[13:23:59.155]                   {
[13:23:59.155]                     obj <- list(time = Sys.time(), condition = cond)
[13:23:59.155]                     file <- tempfile(pattern = class(cond)[1], 
[13:23:59.155]                       tmpdir = path, fileext = ".rds")
[13:23:59.155]                     save_rds(obj, file)
[13:23:59.155]                   }
[13:23:59.155]                   saveImmediateCondition(cond, path = "/tmp/RtmpKOlrlL/.future/immediateConditions")
[13:23:59.155]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:23:59.155]                   {
[13:23:59.155]                     inherits <- base::inherits
[13:23:59.155]                     invokeRestart <- base::invokeRestart
[13:23:59.155]                     is.null <- base::is.null
[13:23:59.155]                     muffled <- FALSE
[13:23:59.155]                     if (inherits(cond, "message")) {
[13:23:59.155]                       muffled <- grepl(pattern, "muffleMessage")
[13:23:59.155]                       if (muffled) 
[13:23:59.155]                         invokeRestart("muffleMessage")
[13:23:59.155]                     }
[13:23:59.155]                     else if (inherits(cond, "warning")) {
[13:23:59.155]                       muffled <- grepl(pattern, "muffleWarning")
[13:23:59.155]                       if (muffled) 
[13:23:59.155]                         invokeRestart("muffleWarning")
[13:23:59.155]                     }
[13:23:59.155]                     else if (inherits(cond, "condition")) {
[13:23:59.155]                       if (!is.null(pattern)) {
[13:23:59.155]                         computeRestarts <- base::computeRestarts
[13:23:59.155]                         grepl <- base::grepl
[13:23:59.155]                         restarts <- computeRestarts(cond)
[13:23:59.155]                         for (restart in restarts) {
[13:23:59.155]                           name <- restart$name
[13:23:59.155]                           if (is.null(name)) 
[13:23:59.155]                             next
[13:23:59.155]                           if (!grepl(pattern, name)) 
[13:23:59.155]                             next
[13:23:59.155]                           invokeRestart(restart)
[13:23:59.155]                           muffled <- TRUE
[13:23:59.155]                           break
[13:23:59.155]                         }
[13:23:59.155]                       }
[13:23:59.155]                     }
[13:23:59.155]                     invisible(muffled)
[13:23:59.155]                   }
[13:23:59.155]                   muffleCondition(cond)
[13:23:59.155]                 })
[13:23:59.155]             }))
[13:23:59.155]             future::FutureResult(value = ...future.value$value, 
[13:23:59.155]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:23:59.155]                   ...future.rng), globalenv = if (FALSE) 
[13:23:59.155]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:23:59.155]                     ...future.globalenv.names))
[13:23:59.155]                 else NULL, started = ...future.startTime, version = "1.8")
[13:23:59.155]         }, condition = base::local({
[13:23:59.155]             c <- base::c
[13:23:59.155]             inherits <- base::inherits
[13:23:59.155]             invokeRestart <- base::invokeRestart
[13:23:59.155]             length <- base::length
[13:23:59.155]             list <- base::list
[13:23:59.155]             seq.int <- base::seq.int
[13:23:59.155]             signalCondition <- base::signalCondition
[13:23:59.155]             sys.calls <- base::sys.calls
[13:23:59.155]             `[[` <- base::`[[`
[13:23:59.155]             `+` <- base::`+`
[13:23:59.155]             `<<-` <- base::`<<-`
[13:23:59.155]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:23:59.155]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:23:59.155]                   3L)]
[13:23:59.155]             }
[13:23:59.155]             function(cond) {
[13:23:59.155]                 is_error <- inherits(cond, "error")
[13:23:59.155]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:23:59.155]                   NULL)
[13:23:59.155]                 if (is_error) {
[13:23:59.155]                   sessionInformation <- function() {
[13:23:59.155]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:23:59.155]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:23:59.155]                       search = base::search(), system = base::Sys.info())
[13:23:59.155]                   }
[13:23:59.155]                   ...future.conditions[[length(...future.conditions) + 
[13:23:59.155]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:23:59.155]                     cond$call), session = sessionInformation(), 
[13:23:59.155]                     timestamp = base::Sys.time(), signaled = 0L)
[13:23:59.155]                   signalCondition(cond)
[13:23:59.155]                 }
[13:23:59.155]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:23:59.155]                 "immediateCondition"))) {
[13:23:59.155]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:23:59.155]                   ...future.conditions[[length(...future.conditions) + 
[13:23:59.155]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:23:59.155]                   if (TRUE && !signal) {
[13:23:59.155]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:23:59.155]                     {
[13:23:59.155]                       inherits <- base::inherits
[13:23:59.155]                       invokeRestart <- base::invokeRestart
[13:23:59.155]                       is.null <- base::is.null
[13:23:59.155]                       muffled <- FALSE
[13:23:59.155]                       if (inherits(cond, "message")) {
[13:23:59.155]                         muffled <- grepl(pattern, "muffleMessage")
[13:23:59.155]                         if (muffled) 
[13:23:59.155]                           invokeRestart("muffleMessage")
[13:23:59.155]                       }
[13:23:59.155]                       else if (inherits(cond, "warning")) {
[13:23:59.155]                         muffled <- grepl(pattern, "muffleWarning")
[13:23:59.155]                         if (muffled) 
[13:23:59.155]                           invokeRestart("muffleWarning")
[13:23:59.155]                       }
[13:23:59.155]                       else if (inherits(cond, "condition")) {
[13:23:59.155]                         if (!is.null(pattern)) {
[13:23:59.155]                           computeRestarts <- base::computeRestarts
[13:23:59.155]                           grepl <- base::grepl
[13:23:59.155]                           restarts <- computeRestarts(cond)
[13:23:59.155]                           for (restart in restarts) {
[13:23:59.155]                             name <- restart$name
[13:23:59.155]                             if (is.null(name)) 
[13:23:59.155]                               next
[13:23:59.155]                             if (!grepl(pattern, name)) 
[13:23:59.155]                               next
[13:23:59.155]                             invokeRestart(restart)
[13:23:59.155]                             muffled <- TRUE
[13:23:59.155]                             break
[13:23:59.155]                           }
[13:23:59.155]                         }
[13:23:59.155]                       }
[13:23:59.155]                       invisible(muffled)
[13:23:59.155]                     }
[13:23:59.155]                     muffleCondition(cond, pattern = "^muffle")
[13:23:59.155]                   }
[13:23:59.155]                 }
[13:23:59.155]                 else {
[13:23:59.155]                   if (TRUE) {
[13:23:59.155]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:23:59.155]                     {
[13:23:59.155]                       inherits <- base::inherits
[13:23:59.155]                       invokeRestart <- base::invokeRestart
[13:23:59.155]                       is.null <- base::is.null
[13:23:59.155]                       muffled <- FALSE
[13:23:59.155]                       if (inherits(cond, "message")) {
[13:23:59.155]                         muffled <- grepl(pattern, "muffleMessage")
[13:23:59.155]                         if (muffled) 
[13:23:59.155]                           invokeRestart("muffleMessage")
[13:23:59.155]                       }
[13:23:59.155]                       else if (inherits(cond, "warning")) {
[13:23:59.155]                         muffled <- grepl(pattern, "muffleWarning")
[13:23:59.155]                         if (muffled) 
[13:23:59.155]                           invokeRestart("muffleWarning")
[13:23:59.155]                       }
[13:23:59.155]                       else if (inherits(cond, "condition")) {
[13:23:59.155]                         if (!is.null(pattern)) {
[13:23:59.155]                           computeRestarts <- base::computeRestarts
[13:23:59.155]                           grepl <- base::grepl
[13:23:59.155]                           restarts <- computeRestarts(cond)
[13:23:59.155]                           for (restart in restarts) {
[13:23:59.155]                             name <- restart$name
[13:23:59.155]                             if (is.null(name)) 
[13:23:59.155]                               next
[13:23:59.155]                             if (!grepl(pattern, name)) 
[13:23:59.155]                               next
[13:23:59.155]                             invokeRestart(restart)
[13:23:59.155]                             muffled <- TRUE
[13:23:59.155]                             break
[13:23:59.155]                           }
[13:23:59.155]                         }
[13:23:59.155]                       }
[13:23:59.155]                       invisible(muffled)
[13:23:59.155]                     }
[13:23:59.155]                     muffleCondition(cond, pattern = "^muffle")
[13:23:59.155]                   }
[13:23:59.155]                 }
[13:23:59.155]             }
[13:23:59.155]         }))
[13:23:59.155]     }, error = function(ex) {
[13:23:59.155]         base::structure(base::list(value = NULL, visible = NULL, 
[13:23:59.155]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:23:59.155]                 ...future.rng), started = ...future.startTime, 
[13:23:59.155]             finished = Sys.time(), session_uuid = NA_character_, 
[13:23:59.155]             version = "1.8"), class = "FutureResult")
[13:23:59.155]     }, finally = {
[13:23:59.155]         if (!identical(...future.workdir, getwd())) 
[13:23:59.155]             setwd(...future.workdir)
[13:23:59.155]         {
[13:23:59.155]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:23:59.155]                 ...future.oldOptions$nwarnings <- NULL
[13:23:59.155]             }
[13:23:59.155]             base::options(...future.oldOptions)
[13:23:59.155]             if (.Platform$OS.type == "windows") {
[13:23:59.155]                 old_names <- names(...future.oldEnvVars)
[13:23:59.155]                 envs <- base::Sys.getenv()
[13:23:59.155]                 names <- names(envs)
[13:23:59.155]                 common <- intersect(names, old_names)
[13:23:59.155]                 added <- setdiff(names, old_names)
[13:23:59.155]                 removed <- setdiff(old_names, names)
[13:23:59.155]                 changed <- common[...future.oldEnvVars[common] != 
[13:23:59.155]                   envs[common]]
[13:23:59.155]                 NAMES <- toupper(changed)
[13:23:59.155]                 args <- list()
[13:23:59.155]                 for (kk in seq_along(NAMES)) {
[13:23:59.155]                   name <- changed[[kk]]
[13:23:59.155]                   NAME <- NAMES[[kk]]
[13:23:59.155]                   if (name != NAME && is.element(NAME, old_names)) 
[13:23:59.155]                     next
[13:23:59.155]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:23:59.155]                 }
[13:23:59.155]                 NAMES <- toupper(added)
[13:23:59.155]                 for (kk in seq_along(NAMES)) {
[13:23:59.155]                   name <- added[[kk]]
[13:23:59.155]                   NAME <- NAMES[[kk]]
[13:23:59.155]                   if (name != NAME && is.element(NAME, old_names)) 
[13:23:59.155]                     next
[13:23:59.155]                   args[[name]] <- ""
[13:23:59.155]                 }
[13:23:59.155]                 NAMES <- toupper(removed)
[13:23:59.155]                 for (kk in seq_along(NAMES)) {
[13:23:59.155]                   name <- removed[[kk]]
[13:23:59.155]                   NAME <- NAMES[[kk]]
[13:23:59.155]                   if (name != NAME && is.element(NAME, old_names)) 
[13:23:59.155]                     next
[13:23:59.155]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:23:59.155]                 }
[13:23:59.155]                 if (length(args) > 0) 
[13:23:59.155]                   base::do.call(base::Sys.setenv, args = args)
[13:23:59.155]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:23:59.155]             }
[13:23:59.155]             else {
[13:23:59.155]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:23:59.155]             }
[13:23:59.155]             {
[13:23:59.155]                 if (base::length(...future.futureOptionsAdded) > 
[13:23:59.155]                   0L) {
[13:23:59.155]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:23:59.155]                   base::names(opts) <- ...future.futureOptionsAdded
[13:23:59.155]                   base::options(opts)
[13:23:59.155]                 }
[13:23:59.155]                 {
[13:23:59.155]                   {
[13:23:59.155]                     base::options(mc.cores = ...future.mc.cores.old)
[13:23:59.155]                     NULL
[13:23:59.155]                   }
[13:23:59.155]                   options(future.plan = NULL)
[13:23:59.155]                   if (is.na(NA_character_)) 
[13:23:59.155]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:23:59.155]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:23:59.155]                   future::plan(list(a = function (..., workers = availableCores(constraints = "multicore"), 
[13:23:59.155]                     envir = parent.frame()) 
[13:23:59.155]                   {
[13:23:59.155]                     default_workers <- missing(workers)
[13:23:59.155]                     if (is.function(workers)) 
[13:23:59.155]                       workers <- workers()
[13:23:59.155]                     workers <- structure(as.integer(workers), 
[13:23:59.155]                       class = class(workers))
[13:23:59.155]                     stop_if_not(is.finite(workers), workers >= 
[13:23:59.155]                       1L)
[13:23:59.155]                     if ((workers == 1L && !inherits(workers, 
[13:23:59.155]                       "AsIs")) || !supportsMulticore(warn = TRUE)) {
[13:23:59.155]                       if (default_workers) 
[13:23:59.155]                         supportsMulticore(warn = TRUE)
[13:23:59.155]                       return(sequential(..., envir = envir))
[13:23:59.155]                     }
[13:23:59.155]                     oopts <- options(mc.cores = workers)
[13:23:59.155]                     on.exit(options(oopts))
[13:23:59.155]                     future <- MulticoreFuture(..., workers = workers, 
[13:23:59.155]                       envir = envir)
[13:23:59.155]                     if (!future$lazy) 
[13:23:59.155]                       future <- run(future)
[13:23:59.155]                     invisible(future)
[13:23:59.155]                   }, b = function (..., envir = parent.frame()) 
[13:23:59.155]                   {
[13:23:59.155]                     future <- SequentialFuture(..., envir = envir)
[13:23:59.155]                     if (!future$lazy) 
[13:23:59.155]                       future <- run(future)
[13:23:59.155]                     invisible(future)
[13:23:59.155]                   }), .cleanup = FALSE, .init = FALSE)
[13:23:59.155]                 }
[13:23:59.155]             }
[13:23:59.155]         }
[13:23:59.155]     })
[13:23:59.155]     if (TRUE) {
[13:23:59.155]         base::sink(type = "output", split = FALSE)
[13:23:59.155]         if (TRUE) {
[13:23:59.155]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:23:59.155]         }
[13:23:59.155]         else {
[13:23:59.155]             ...future.result["stdout"] <- base::list(NULL)
[13:23:59.155]         }
[13:23:59.155]         base::close(...future.stdout)
[13:23:59.155]         ...future.stdout <- NULL
[13:23:59.155]     }
[13:23:59.155]     ...future.result$conditions <- ...future.conditions
[13:23:59.155]     ...future.result$finished <- base::Sys.time()
[13:23:59.155]     ...future.result
[13:23:59.155] }
[13:23:59.157] assign_globals() ...
[13:23:59.158] List of 2
[13:23:59.158]  $ nested   :List of 2
[13:23:59.158]   ..$ a:function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())  
[13:23:59.158]   .. ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[13:23:59.158]   .. ..- attr(*, "call")= language plan(list(a = strategy1, b = strategy2))
[13:23:59.158]   ..$ b:function (..., envir = parent.frame())  
[13:23:59.158]   .. ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[13:23:59.158]   .. ..- attr(*, "call")= language plan(list(a = strategy1, b = strategy2))
[13:23:59.158]   ..- attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[13:23:59.158]  $ strategy2: chr "sequential"
[13:23:59.158]  - attr(*, "where")=List of 2
[13:23:59.158]   ..$ nested   :<environment: R_EmptyEnv> 
[13:23:59.158]   ..$ strategy2:<environment: R_EmptyEnv> 
[13:23:59.158]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[13:23:59.158]  - attr(*, "resolved")= logi FALSE
[13:23:59.158]  - attr(*, "total_size")= num 59224
[13:23:59.158]  - attr(*, "already-done")= logi TRUE
[13:23:59.162] - copied ‘nested’ to environment
[13:23:59.162] - copied ‘strategy2’ to environment
[13:23:59.162] assign_globals() ... done
[13:23:59.162] requestCore(): workers = 2
[13:23:59.165] MulticoreFuture started
[13:23:59.165] - Launch lazy future ... done
[13:23:59.166] run() for ‘MulticoreFuture’ ... done
[13:23:59.166] result() for MulticoreFuture ...
[13:23:59.167] plan(): Setting new future strategy stack:
[13:23:59.167] List of future strategies:
[13:23:59.167] 1. sequential:
[13:23:59.167]    - args: function (..., envir = parent.frame())
[13:23:59.167]    - tweaked: FALSE
[13:23:59.167]    - call: plan(list(a = strategy1, b = strategy2))
[13:23:59.168] plan(): nbrOfWorkers() = 1
[13:23:59.205] plan(): Setting new future strategy stack:
[13:23:59.205] List of future strategies:
[13:23:59.205] 1. multicore:
[13:23:59.205]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[13:23:59.205]    - tweaked: FALSE
[13:23:59.205]    - call: plan(list(a = strategy1, b = strategy2))
[13:23:59.205] 2. sequential:
[13:23:59.205]    - args: function (..., envir = parent.frame())
[13:23:59.205]    - tweaked: FALSE
[13:23:59.205]    - call: plan(list(a = strategy1, b = strategy2))
[13:23:59.210] plan(): nbrOfWorkers() = 2
[13:23:59.211] result() for MulticoreFuture ...
[13:23:59.211] result() for MulticoreFuture ... done
[13:23:59.211] signalConditions() ...
[13:23:59.211]  - include = ‘immediateCondition’
[13:23:59.212]  - exclude = 
[13:23:59.212]  - resignal = FALSE
[13:23:59.212]  - Number of conditions: 54
[13:23:59.212] signalConditions() ... done
[13:23:59.212] result() for MulticoreFuture ... done
[13:23:59.212] result() for MulticoreFuture ...
[13:23:59.212] result() for MulticoreFuture ... done
[13:23:59.213] signalConditions() ...
[13:23:59.213]  - include = ‘immediateCondition’
[13:23:59.213]  - exclude = 
[13:23:59.213]  - resignal = FALSE
[13:23:59.213]  - Number of conditions: 54
[13:23:59.213] signalConditions() ... done
[13:23:59.213] Future state: ‘finished’
[13:23:59.213] result() for MulticoreFuture ...
[13:23:59.214] result() for MulticoreFuture ... done
[13:23:59.214] signalConditions() ...
[13:23:59.214]  - include = ‘condition’
[13:23:59.214]  - exclude = ‘immediateCondition’
[13:23:59.214]  - resignal = TRUE
[13:23:59.214]  - Number of conditions: 54
[13:23:59.214]  - Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:59.170] getGlobalsAndPackages() ...
[13:23:59.214]  - Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:59.170] Searching for globals...
[13:23:59.215]  - Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:59.180] - globals found: [14] ‘{’, ‘<-’, ‘::’, ‘[’, ‘nested_a’, ‘-’, ‘stopifnot’, ‘==’, ‘length’, ‘inherits’, ‘[[’, ‘list’, ‘a’, ‘plan_a’
[13:23:59.215]  - Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:59.180] Searching for globals ... DONE
[13:23:59.215]  - Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:59.181] Resolving globals: FALSE
[13:23:59.215]  - Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:59.182] The total size of the 3 globals is 22.54 KiB (23080 bytes)
[13:23:59.215]  - Condition #7: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:59.183] The total size of the 3 globals exported for future expression (‘{; b <- 2L; plan_b <- future::plan("list"); nested_b <- nested_a[-1]; stopifnot(length(nested_b) == 0L, length(plan_b) == 1L, inherits(plan_b[[1]],; "future"), inherits(future::plan("next"), "sequential")); list(a = a, nested_a = nested_a, plan_a = plan_a, b = b,; nested_b = nested_b, plan_b = plan_b); }’) is 22.54 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are three globals: ‘nested_a’ (11.24 KiB of class ‘list’), ‘plan_a’ (11.24 KiB of class ‘list’) and ‘a’ (56 bytes of class ‘numeric’)
[13:23:59.216]  - Condition #8: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:59.183] - globals: [3] ‘nested_a’, ‘a’, ‘plan_a’
[13:23:59.216]  - Condition #9: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:59.183] 
[13:23:59.216]  - Condition #10: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:59.184] getGlobalsAndPackages() ... DONE
[13:23:59.216]  - Condition #11: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:59.184] run() for ‘Future’ ...
[13:23:59.216]  - Condition #12: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:59.185] - state: ‘created’
[13:23:59.217]  - Condition #13: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:59.185] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[13:23:59.217]  - Condition #14: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:59.185] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[13:23:59.217]  - Condition #15: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:59.186] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[13:23:59.217]  - Condition #16: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:59.186]   - Field: ‘label’
[13:23:59.217]  - Condition #17: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:59.186]   - Field: ‘local’
[13:23:59.217]  - Condition #18: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:59.186]   - Field: ‘owner’
[13:23:59.218]  - Condition #19: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:59.186]   - Field: ‘envir’
[13:23:59.218]  - Condition #20: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:59.187]   - Field: ‘packages’
[13:23:59.218]  - Condition #21: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:59.187]   - Field: ‘gc’
[13:23:59.218]  - Condition #22: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:59.187]   - Field: ‘conditions’
[13:23:59.218]  - Condition #23: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:59.187]   - Field: ‘expr’
[13:23:59.219]  - Condition #24: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:59.187]   - Field: ‘uuid’
[13:23:59.219]  - Condition #25: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:59.187]   - Field: ‘seed’
[13:23:59.219]  - Condition #26: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:59.188]   - Field: ‘version’
[13:23:59.219]  - Condition #27: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:59.188]   - Field: ‘result’
[13:23:59.219]  - Condition #28: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:59.188]   - Field: ‘asynchronous’
[13:23:59.219]  - Condition #29: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:59.188]   - Field: ‘calls’
[13:23:59.220]  - Condition #30: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:59.188]   - Field: ‘globals’
[13:23:59.220]  - Condition #31: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:59.188]   - Field: ‘stdout’
[13:23:59.220]  - Condition #32: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:59.189]   - Field: ‘earlySignal’
[13:23:59.220]  - Condition #33: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:59.189]   - Field: ‘lazy’
[13:23:59.220]  - Condition #34: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:59.189]   - Field: ‘state’
[13:23:59.221]  - Condition #35: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:59.189] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[13:23:59.221]  - Condition #36: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:59.189] - Launch lazy future ...
[13:23:59.221]  - Condition #37: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:59.189] Packages needed by the future expression (n = 0): <none>
[13:23:59.221]  - Condition #38: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:59.190] Packages needed by future strategies (n = 0): <none>
[13:23:59.221]  - Condition #39: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:59.190] {
[13:23:59.190]     {
[13:23:59.190]         {
[13:23:59.190]             ...future.startTime <- base::Sys.time()
[13:23:59.190]             {
[13:23:59.190]                 {
[13:23:59.190]                   {
[13:23:59.190]                     base::local({
[13:23:59.190]                       has_future <- base::requireNamespace("future", 
[13:23:59.190]                         quietly = TRUE)
[13:23:59.190]                       if (has_future) {
[13:23:59.190]                         ns <- base::getNamespace("future")
[13:23:59.190]                         version <- ns[[".package"]][["version"]]
[13:23:59.190]                         if (is.null(version)) 
[13:23:59.190]                           version <- utils::packageVersion("future")
[13:23:59.190]                       }
[13:23:59.190]                       else {
[13:23:59.190]                         version <- NULL
[13:23:59.190]                       }
[13:23:59.190]                       if (!has_future || version < "1.8.0") {
[13:23:59.190]                         info <- base::c(r_version = base::gsub("R version ", 
[13:23:59.190]                           "", base::R.version$version.string), 
[13:23:59.190]                           platform = base::sprintf("%s (%s-bit)", 
[13:23:59.190]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:23:59.190]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[13:23:59.190]                             "release", "version")], collapse = " "), 
[13:23:59.190]                           hostname = base::Sys.info()[["nodename"]])
[13:23:59.190]                         info <- base::sprintf("%s: %s", base::names(info), 
[13:23:59.190]                           info)
[13:23:59.190]                         info <- base::paste(info, collapse = "; ")
[13:23:59.190]                         if (!has_future) {
[13:23:59.190]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:23:59.190]                             info)
[13:23:59.190]                         }
[13:23:59.190]                         else {
[13:23:59.190]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:23:59.190]                             info, version)
[13:23:59.190]                         }
[13:23:59.190]                         base::stop(msg)
[13:23:59.190]                       }
[13:23:59.190]                     })
[13:23:59.190]                   }
[13:23:59.190]                   options(future.plan = NULL)
[13:23:59.190]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:23:59.190]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:23:59.190]                 }
[13:23:59.190]                 ...future.workdir <- getwd()
[13:23:59.190]             }
[13:23:59.190]             ...future.oldOptions <- base::as.list(base::.Options)
[13:23:59.190]             ...future.oldEnvVars <- base::Sys.getenv()
[13:23:59.190]         }
[13:23:59.190]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:23:59.190]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:23:59.190]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:23:59.190]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:23:59.190]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:23:59.190]             future.stdout.windows.reencode = NULL, width = 80L)
[13:23:59.190]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:23:59.190]             base::names(...future.oldOptions))
[13:23:59.190]     }
[13:23:59.190]     if (FALSE) {
[13:23:59.190]     }
[13:23:59.190]     else {
[13:23:59.190]         if (TRUE) {
[13:23:59.190]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:23:59.190]                 open = "w")
[13:23:59.190]         }
[13:23:59.190]         else {
[13:23:59.190]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:23:59.190]                 windows = "NUL", "/dev/null"), open = "w")
[13:23:59.190]         }
[13:23:59.190]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:23:59.190]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:23:59.190]             base::sink(type = "output", split = FALSE)
[13:23:59.190]             base::close(...future.stdout)
[13:23:59.190]         }, add = TRUE)
[13:23:59.190]     }
[13:23:59.190]     ...future.frame <- base::sys.nframe()
[13:23:59.190]     ...future.conditions <- base::list()
[13:23:59.190]     ...future.rng <- base::globalenv()$.Random.seed
[13:23:59.190]     if (FALSE) {
[13:23:59.190]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:23:59.190]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:23:59.190]     }
[13:23:59.190]     ...future.result <- base::tryCatch({
[13:23:59.190]         base::withCallingHandlers({
[13:23:59.190]             ...future.value <- base::withVisible(base::local({
[13:23:59.190]                 b <- 2L
[13:23:59.190]                 plan_b <- future::plan("list")
[13:23:59.190]                 nested_b <- nested_a[-1]
[13:23:59.190]                 stopifnot(length(nested_b) == 0L, length(plan_b) == 
[13:23:59.190]                   1L, inherits(plan_b[[1]], "future"), inherits(future::plan("next"), 
[13:23:59.190]                   "sequential"))
[13:23:59.190]                 list(a = a, nested_a = nested_a, plan_a = plan_a, 
[13:23:59.190]                   b = b, nested_b = nested_b, plan_b = plan_b)
[13:23:59.190]             }))
[13:23:59.190]             future::FutureResult(value = ...future.value$value, 
[13:23:59.190]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:23:59.190]                   ...future.rng), globalenv = if (FALSE) 
[13:23:59.190]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:23:59.190]                     ...future.globalenv.names))
[13:23:59.190]                 else NULL, started = ...future.startTime, version = "1.8")
[13:23:59.190]         }, condition = base::local({
[13:23:59.190]             c <- base::c
[13:23:59.190]             inherits <- base::inherits
[13:23:59.190]             invokeRestart <- base::invokeRestart
[13:23:59.190]             length <- base::length
[13:23:59.190]             list <- base::list
[13:23:59.190]             seq.int <- base::seq.int
[13:23:59.190]             signalCondition <- base::signalCondition
[13:23:59.190]             sys.calls <- base::sys.calls
[13:23:59.190]             `[[` <- base::`[[`
[13:23:59.190]             `+` <- base::`+`
[13:23:59.190]             `<<-` <- base::`<<-`
[13:23:59.190]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:23:59.190]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:23:59.190]                   3L)]
[13:23:59.190]             }
[13:23:59.190]             function(cond) {
[13:23:59.190]                 is_error <- inherits(cond, "error")
[13:23:59.190]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:23:59.190]                   NULL)
[13:23:59.190]                 if (is_error) {
[13:23:59.190]                   sessionInformation <- function() {
[13:23:59.190]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:23:59.190]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:23:59.190]                       search = base::search(), system = base::Sys.info())
[13:23:59.190]                   }
[13:23:59.190]                   ...future.conditions[[length(...future.conditions) + 
[13:23:59.190]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:23:59.190]                     cond$call), session = sessionInformation(), 
[13:23:59.190]                     timestamp = base::Sys.time(), signaled = 0L)
[13:23:59.190]                   signalCondition(cond)
[13:23:59.190]                 }
[13:23:59.190]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:23:59.190]                 "immediateCondition"))) {
[13:23:59.190]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:23:59.190]                   ...future.conditions[[length(...future.conditions) + 
[13:23:59.190]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:23:59.190]                   if (TRUE && !signal) {
[13:23:59.190]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:23:59.190]                     {
[13:23:59.190]                       inherits <- base::inherits
[13:23:59.190]                       invokeRestart <- base::invokeRestart
[13:23:59.190]                       is.null <- base::is.null
[13:23:59.190]                       muffled <- FALSE
[13:23:59.190]                       if (inherits(cond, "message")) {
[13:23:59.190]                         muffled <- grepl(pattern, "muffleMessage")
[13:23:59.190]                         if (muffled) 
[13:23:59.190]                           invokeRestart("muffleMessage")
[13:23:59.190]                       }
[13:23:59.190]                       else if (inherits(cond, "warning")) {
[13:23:59.190]                         muffled <- grepl(pattern, "muffleWarning")
[13:23:59.190]                         if (muffled) 
[13:23:59.190]                           invokeRestart("muffleWarning")
[13:23:59.190]                       }
[13:23:59.190]                       else if (inherits(cond, "condition")) {
[13:23:59.190]                         if (!is.null(pattern)) {
[13:23:59.190]                           computeRestarts <- base::computeRestarts
[13:23:59.190]                           grepl <- base::grepl
[13:23:59.190]                           restarts <- computeRestarts(cond)
[13:23:59.190]                           for (restart in restarts) {
[13:23:59.190]                             name <- restart$name
[13:23:59.190]                             if (is.null(name)) 
[13:23:59.190]                               next
[13:23:59.190]                             if (!grepl(pattern, name)) 
[13:23:59.190]                               next
[13:23:59.190]                             invokeRestart(restart)
[13:23:59.190]                             muffled <- TRUE
[13:23:59.190]                             break
[13:23:59.190]                           }
[13:23:59.190]                         }
[13:23:59.190]                       }
[13:23:59.190]                       invisible(muffled)
[13:23:59.190]                     }
[13:23:59.190]                     muffleCondition(cond, pattern = "^muffle")
[13:23:59.190]                   }
[13:23:59.190]                 }
[13:23:59.190]                 else {
[13:23:59.190]                   if (TRUE) {
[13:23:59.190]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:23:59.190]                     {
[13:23:59.190]                       inherits <- base::inherits
[13:23:59.190]                       invokeRestart <- base::invokeRestart
[13:23:59.190]                       is.null <- base::is.null
[13:23:59.190]                       muffled <- FALSE
[13:23:59.190]                       if (inherits(cond, "message")) {
[13:23:59.190]                         muffled <- grepl(pattern, "muffleMessage")
[13:23:59.190]                         if (muffled) 
[13:23:59.190]                           invokeRestart("muffleMessage")
[13:23:59.190]                       }
[13:23:59.190]                       else if (inherits(cond, "warning")) {
[13:23:59.190]                         muffled <- grepl(pattern, "muffleWarning")
[13:23:59.190]                         if (muffled) 
[13:23:59.190]                           invokeRestart("muffleWarning")
[13:23:59.190]                       }
[13:23:59.190]                       else if (inherits(cond, "condition")) {
[13:23:59.190]                         if (!is.null(pattern)) {
[13:23:59.190]                           computeRestarts <- base::computeRestarts
[13:23:59.190]                           grepl <- base::grepl
[13:23:59.190]                           restarts <- computeRestarts(cond)
[13:23:59.190]                           for (restart in restarts) {
[13:23:59.190]                             name <- restart$name
[13:23:59.190]                             if (is.null(name)) 
[13:23:59.190]                               next
[13:23:59.190]                             if (!grepl(pattern, name)) 
[13:23:59.190]                               next
[13:23:59.190]                             invokeRestart(restart)
[13:23:59.190]                             muffled <- TRUE
[13:23:59.190]                             break
[13:23:59.190]                           }
[13:23:59.190]                         }
[13:23:59.190]                       }
[13:23:59.190]                       invisible(muffled)
[13:23:59.190]                     }
[13:23:59.190]                     muffleCondition(cond, pattern = "^muffle")
[13:23:59.190]                   }
[13:23:59.190]                 }
[13:23:59.190]             }
[13:23:59.190]         }))
[13:23:59.190]     }, error = function(ex) {
[13:23:59.190]         base::structure(base::list(value = NULL, visible = NULL, 
[13:23:59.190]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:23:59.190]                 ...future.rng), started = ...future.startTime, 
[13:23:59.190]             finished = Sys.time(), session_uuid = NA_character_, 
[13:23:59.190]             version = "1.8"), class = "FutureResult")
[13:23:59.190]     }, finally = {
[13:23:59.190]         if (!identical(...future.workdir, getwd())) 
[13:23:59.190]             setwd(...future.workdir)
[13:23:59.190]         {
[13:23:59.190]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:23:59.190]                 ...future.oldOptions$nwarnings <- NULL
[13:23:59.190]             }
[13:23:59.190]             base::options(...future.oldOptions)
[13:23:59.190]             if (.Platform$OS.type == "windows") {
[13:23:59.190]                 old_names <- names(...future.oldEnvVars)
[13:23:59.190]                 envs <- base::Sys.getenv()
[13:23:59.190]                 names <- names(envs)
[13:23:59.190]                 common <- intersect(names, old_names)
[13:23:59.190]                 added <- setdiff(names, old_names)
[13:23:59.190]                 removed <- setdiff(old_names, names)
[13:23:59.190]                 changed <- common[...future.oldEnvVars[common] != 
[13:23:59.190]                   envs[common]]
[13:23:59.190]                 NAMES <- toupper(changed)
[13:23:59.190]                 args <- list()
[13:23:59.190]                 for (kk in seq_along(NAMES)) {
[13:23:59.190]                   name <- changed[[kk]]
[13:23:59.190]                   NAME <- NAMES[[kk]]
[13:23:59.190]                   if (name != NAME && is.element(NAME, old_names)) 
[13:23:59.190]                     next
[13:23:59.190]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:23:59.190]                 }
[13:23:59.190]                 NAMES <- toupper(added)
[13:23:59.190]                 for (kk in seq_along(NAMES)) {
[13:23:59.190]                   name <- added[[kk]]
[13:23:59.190]                   NAME <- NAMES[[kk]]
[13:23:59.190]                   if (name != NAME && is.element(NAME, old_names)) 
[13:23:59.190]                     next
[13:23:59.190]                   args[[name]] <- ""
[13:23:59.190]                 }
[13:23:59.190]                 NAMES <- toupper(removed)
[13:23:59.190]                 for (kk in seq_along(NAMES)) {
[13:23:59.190]                   name <- removed[[kk]]
[13:23:59.190]                   NAME <- NAMES[[kk]]
[13:23:59.190]                   if (name != NAME && is.element(NAME, old_names)) 
[13:23:59.190]                     next
[13:23:59.190]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:23:59.190]                 }
[13:23:59.190]                 if (length(args) > 0) 
[13:23:59.190]                   base::do.call(base::Sys.setenv, args = args)
[13:23:59.190]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:23:59.190]             }
[13:23:59.190]             else {
[13:23:59.190]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:23:59.190]             }
[13:23:59.190]             {
[13:23:59.190]                 if (base::length(...future.futureOptionsAdded) > 
[13:23:59.190]                   0L) {
[13:23:59.190]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:23:59.190]                   base::names(opts) <- ...future.futureOptionsAdded
[13:23:59.190]                   base::options(opts)
[13:23:59.190]                 }
[13:23:59.190]                 {
[13:23:59.190]                   {
[13:23:59.190]                     NULL
[13:23:59.190]                     RNGkind("Mersenne-Twister")
[13:23:59.190]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[13:23:59.190]                       inherits = FALSE)
[13:23:59.190]                   }
[13:23:59.190]                   options(future.plan = NULL)
[13:23:59.190]                   if (is.na(NA_character_)) 
[13:23:59.190]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:23:59.190]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:23:59.190]                   future::plan(list(b = function (..., envir = parent.frame()) 
[13:23:59.190]                   {
[13:23:59.190]                     future <- SequentialFuture(..., envir = envir)
[13:23:59.190]                     if (!future$lazy) 
[13:23:59.190]                       future <- run(future)
[13:23:59.190]                     invisible(future)
[13:23:59.190]                   }), .cleanup = FALSE, .init = FALSE)
[13:23:59.190]                 }
[13:23:59.190]             }
[13:23:59.190]         }
[13:23:59.190]     })
[13:23:59.190]     if (TRUE) {
[13:23:59.190]         base::sink(type = "output", split = FALSE)
[13:23:59.190]         if (TRUE) {
[13:23:59.190]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:23:59.190]         }
[13:23:59.190]         else {
[13:23:59.190]             ...future.result["stdout"] <- base::list(NULL)
[13:23:59.190]         }
[13:23:59.190]         base::close(...future.stdout)
[13:23:59.190]         ...future.stdout <- NULL
[13:23:59.190]     }
[13:23:59.190]     ...future.result$conditions <- ...future.conditions
[13:23:59.190]     ...future.result$finished <- base::Sys.time()
[13:23:59.190]     ...future.result
[13:23:59.190] }
[13:23:59.222]  - Condition #40: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:59.193] assign_globals() ...
[13:23:59.222]  - Condition #41: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:59.193] List of 3
[13:23:59.193]  $ nested_a:List of 1
[13:23:59.193]   ..$ b:function (..., envir = parent.frame())  
[13:23:59.193]   .. ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[13:23:59.193]   .. ..- attr(*, "call")= language plan(list(a = strategy1, b = strategy2))
[13:23:59.193]  $ a       : int 1
[13:23:59.193]  $ plan_a  :List of 1
[13:23:59.193]   ..$ b:function (..., envir = parent.frame())  
[13:23:59.193]   .. ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[13:23:59.193]   .. ..- attr(*, "call")= language plan(list(a = strategy1, b = strategy2))
[13:23:59.193]  - attr(*, "where")=List of 3
[13:23:59.193]   ..$ nested_a:<environment: R_EmptyEnv> 
[13:23:59.193]   ..$ a       :<environment: R_EmptyEnv> 
[13:23:59.193]   ..$ plan_a  :<environment: R_EmptyEnv> 
[13:23:59.193]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[13:23:59.193]  - attr(*, "resolved")= logi FALSE
[13:23:59.193]  - attr(*, "total_size")= num 23080
[13:23:59.193]  - attr(*, "already-done")= logi TRUE
[13:23:59.222]  - Condition #42: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:59.201] - copied ‘nested_a’ to environment
[13:23:59.222]  - Condition #43: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:59.201] - copied ‘a’ to environment
[13:23:59.222]  - Condition #44: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:59.201] - copied ‘plan_a’ to environment
[13:23:59.222]  - Condition #45: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:59.201] assign_globals() ... done
[13:23:59.223]  - Condition #46: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:59.201] plan(): Setting new future strategy stack:
[13:23:59.223]  - Condition #47: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:59.202] List of future strategies:
[13:23:59.202] 1. sequential:
[13:23:59.202]    - args: function (..., envir = parent.frame())
[13:23:59.202]    - tweaked: FALSE
[13:23:59.202]    - call: NULL
[13:23:59.223]  - Condition #48: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:59.202] plan(): nbrOfWorkers() = 1
[13:23:59.223]  - Condition #49: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:59.203] plan(): Setting new future strategy stack:
[13:23:59.223]  - Condition #50: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:59.203] List of future strategies:
[13:23:59.203] 1. sequential:
[13:23:59.203]    - args: function (..., envir = parent.frame())
[13:23:59.203]    - tweaked: FALSE
[13:23:59.203]    - call: plan(list(a = strategy1, b = strategy2))
[13:23:59.223]  - Condition #51: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:59.204] plan(): nbrOfWorkers() = 1
[13:23:59.224]  - Condition #52: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:59.204] SequentialFuture started (and completed)
[13:23:59.224]  - Condition #53: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:59.204] - Launch lazy future ... done
[13:23:59.224]  - Condition #54: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:59.204] run() for ‘SequentialFuture’ ... done
[13:23:59.224] signalConditions() ... done
List of 6
 $ a       : int 1
 $ nested_a:List of 1
  ..$ b:function (..., envir = parent.frame())  
  .. ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
  .. ..- attr(*, "call")= language plan(list(a = strategy1, b = strategy2))
 $ plan_a  :List of 1
  ..$ b:function (..., envir = parent.frame())  
  .. ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
  .. ..- attr(*, "call")= language plan(list(a = strategy1, b = strategy2))
 $ b       : int 2
 $ nested_b: Named list()
 $ plan_b  :List of 1
  ..$ :function (..., envir = parent.frame())  
  .. ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
  ..- attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[13:23:59.230] getGlobalsAndPackages() ...
[13:23:59.230] Searching for globals...
[13:23:59.232] - globals found: [7] ‘{’, ‘value’, ‘future’, ‘subset’, ‘data’, ‘==’, ‘a’
[13:23:59.232] Searching for globals ... DONE
[13:23:59.232] Resolving globals: FALSE
[13:23:59.233] The total size of the 1 globals is 128 bytes (128 bytes)
[13:23:59.234] The total size of the 1 globals exported for future expression (‘{; value(future(subset(data, a == 2))); }’) is 128 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘data’ (128 bytes of class ‘list’)
[13:23:59.234] - globals: [1] ‘data’
[13:23:59.234] - packages: [1] ‘future’
[13:23:59.234] getGlobalsAndPackages() ... DONE
[13:23:59.234] run() for ‘Future’ ...
[13:23:59.234] - state: ‘created’
[13:23:59.235] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[13:23:59.239] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:23:59.239] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[13:23:59.239]   - Field: ‘label’
[13:23:59.240]   - Field: ‘local’
[13:23:59.240]   - Field: ‘owner’
[13:23:59.240]   - Field: ‘envir’
[13:23:59.240]   - Field: ‘workers’
[13:23:59.240]   - Field: ‘packages’
[13:23:59.240]   - Field: ‘gc’
[13:23:59.240]   - Field: ‘job’
[13:23:59.240]   - Field: ‘conditions’
[13:23:59.241]   - Field: ‘expr’
[13:23:59.241]   - Field: ‘uuid’
[13:23:59.241]   - Field: ‘seed’
[13:23:59.241]   - Field: ‘version’
[13:23:59.241]   - Field: ‘result’
[13:23:59.241]   - Field: ‘asynchronous’
[13:23:59.241]   - Field: ‘calls’
[13:23:59.241]   - Field: ‘globals’
[13:23:59.241]   - Field: ‘stdout’
[13:23:59.242]   - Field: ‘earlySignal’
[13:23:59.242]   - Field: ‘lazy’
[13:23:59.242]   - Field: ‘state’
[13:23:59.242] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[13:23:59.242] - Launch lazy future ...
[13:23:59.242] Packages needed by the future expression (n = 1): ‘future’
[13:23:59.242] Packages needed by future strategies (n = 1): ‘future’
[13:23:59.243] {
[13:23:59.243]     {
[13:23:59.243]         {
[13:23:59.243]             ...future.startTime <- base::Sys.time()
[13:23:59.243]             {
[13:23:59.243]                 {
[13:23:59.243]                   {
[13:23:59.243]                     {
[13:23:59.243]                       {
[13:23:59.243]                         base::local({
[13:23:59.243]                           has_future <- base::requireNamespace("future", 
[13:23:59.243]                             quietly = TRUE)
[13:23:59.243]                           if (has_future) {
[13:23:59.243]                             ns <- base::getNamespace("future")
[13:23:59.243]                             version <- ns[[".package"]][["version"]]
[13:23:59.243]                             if (is.null(version)) 
[13:23:59.243]                               version <- utils::packageVersion("future")
[13:23:59.243]                           }
[13:23:59.243]                           else {
[13:23:59.243]                             version <- NULL
[13:23:59.243]                           }
[13:23:59.243]                           if (!has_future || version < "1.8.0") {
[13:23:59.243]                             info <- base::c(r_version = base::gsub("R version ", 
[13:23:59.243]                               "", base::R.version$version.string), 
[13:23:59.243]                               platform = base::sprintf("%s (%s-bit)", 
[13:23:59.243]                                 base::R.version$platform, 8 * 
[13:23:59.243]                                   base::.Machine$sizeof.pointer), 
[13:23:59.243]                               os = base::paste(base::Sys.info()[base::c("sysname", 
[13:23:59.243]                                 "release", "version")], collapse = " "), 
[13:23:59.243]                               hostname = base::Sys.info()[["nodename"]])
[13:23:59.243]                             info <- base::sprintf("%s: %s", base::names(info), 
[13:23:59.243]                               info)
[13:23:59.243]                             info <- base::paste(info, collapse = "; ")
[13:23:59.243]                             if (!has_future) {
[13:23:59.243]                               msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:23:59.243]                                 info)
[13:23:59.243]                             }
[13:23:59.243]                             else {
[13:23:59.243]                               msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:23:59.243]                                 info, version)
[13:23:59.243]                             }
[13:23:59.243]                             base::stop(msg)
[13:23:59.243]                           }
[13:23:59.243]                         })
[13:23:59.243]                       }
[13:23:59.243]                       ...future.mc.cores.old <- base::getOption("mc.cores")
[13:23:59.243]                       base::options(mc.cores = 1L)
[13:23:59.243]                     }
[13:23:59.243]                     base::local({
[13:23:59.243]                       for (pkg in "future") {
[13:23:59.243]                         base::loadNamespace(pkg)
[13:23:59.243]                         base::library(pkg, character.only = TRUE)
[13:23:59.243]                       }
[13:23:59.243]                     })
[13:23:59.243]                   }
[13:23:59.243]                   options(future.plan = NULL)
[13:23:59.243]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:23:59.243]                   future::plan(list(b = function (..., envir = parent.frame()) 
[13:23:59.243]                   {
[13:23:59.243]                     future <- SequentialFuture(..., envir = envir)
[13:23:59.243]                     if (!future$lazy) 
[13:23:59.243]                       future <- run(future)
[13:23:59.243]                     invisible(future)
[13:23:59.243]                   }), .cleanup = FALSE, .init = FALSE)
[13:23:59.243]                 }
[13:23:59.243]                 ...future.workdir <- getwd()
[13:23:59.243]             }
[13:23:59.243]             ...future.oldOptions <- base::as.list(base::.Options)
[13:23:59.243]             ...future.oldEnvVars <- base::Sys.getenv()
[13:23:59.243]         }
[13:23:59.243]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:23:59.243]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:23:59.243]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:23:59.243]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:23:59.243]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:23:59.243]             future.stdout.windows.reencode = NULL, width = 80L)
[13:23:59.243]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:23:59.243]             base::names(...future.oldOptions))
[13:23:59.243]     }
[13:23:59.243]     if (FALSE) {
[13:23:59.243]     }
[13:23:59.243]     else {
[13:23:59.243]         if (TRUE) {
[13:23:59.243]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:23:59.243]                 open = "w")
[13:23:59.243]         }
[13:23:59.243]         else {
[13:23:59.243]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:23:59.243]                 windows = "NUL", "/dev/null"), open = "w")
[13:23:59.243]         }
[13:23:59.243]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:23:59.243]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:23:59.243]             base::sink(type = "output", split = FALSE)
[13:23:59.243]             base::close(...future.stdout)
[13:23:59.243]         }, add = TRUE)
[13:23:59.243]     }
[13:23:59.243]     ...future.frame <- base::sys.nframe()
[13:23:59.243]     ...future.conditions <- base::list()
[13:23:59.243]     ...future.rng <- base::globalenv()$.Random.seed
[13:23:59.243]     if (FALSE) {
[13:23:59.243]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:23:59.243]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:23:59.243]     }
[13:23:59.243]     ...future.result <- base::tryCatch({
[13:23:59.243]         base::withCallingHandlers({
[13:23:59.243]             ...future.value <- base::withVisible(base::local({
[13:23:59.243]                 withCallingHandlers({
[13:23:59.243]                   {
[13:23:59.243]                     value(future(subset(data, a == 2)))
[13:23:59.243]                   }
[13:23:59.243]                 }, immediateCondition = function(cond) {
[13:23:59.243]                   save_rds <- function (object, pathname, ...) 
[13:23:59.243]                   {
[13:23:59.243]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[13:23:59.243]                     if (file_test("-f", pathname_tmp)) {
[13:23:59.243]                       fi_tmp <- file.info(pathname_tmp)
[13:23:59.243]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[13:23:59.243]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:23:59.243]                         fi_tmp[["mtime"]])
[13:23:59.243]                     }
[13:23:59.243]                     tryCatch({
[13:23:59.243]                       saveRDS(object, file = pathname_tmp, ...)
[13:23:59.243]                     }, error = function(ex) {
[13:23:59.243]                       msg <- conditionMessage(ex)
[13:23:59.243]                       fi_tmp <- file.info(pathname_tmp)
[13:23:59.243]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[13:23:59.243]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:23:59.243]                         fi_tmp[["mtime"]], msg)
[13:23:59.243]                       ex$message <- msg
[13:23:59.243]                       stop(ex)
[13:23:59.243]                     })
[13:23:59.243]                     stopifnot(file_test("-f", pathname_tmp))
[13:23:59.243]                     res <- file.rename(from = pathname_tmp, to = pathname)
[13:23:59.243]                     if (!res || file_test("-f", pathname_tmp)) {
[13:23:59.243]                       fi_tmp <- file.info(pathname_tmp)
[13:23:59.243]                       fi <- file.info(pathname)
[13:23:59.243]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[13:23:59.243]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:23:59.243]                         fi_tmp[["mtime"]], sQuote(pathname), 
[13:23:59.243]                         fi[["size"]], fi[["mtime"]])
[13:23:59.243]                       stop(msg)
[13:23:59.243]                     }
[13:23:59.243]                     invisible(pathname)
[13:23:59.243]                   }
[13:23:59.243]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[13:23:59.243]                     rootPath = tempdir()) 
[13:23:59.243]                   {
[13:23:59.243]                     obj <- list(time = Sys.time(), condition = cond)
[13:23:59.243]                     file <- tempfile(pattern = class(cond)[1], 
[13:23:59.243]                       tmpdir = path, fileext = ".rds")
[13:23:59.243]                     save_rds(obj, file)
[13:23:59.243]                   }
[13:23:59.243]                   saveImmediateCondition(cond, path = "/tmp/RtmpKOlrlL/.future/immediateConditions")
[13:23:59.243]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:23:59.243]                   {
[13:23:59.243]                     inherits <- base::inherits
[13:23:59.243]                     invokeRestart <- base::invokeRestart
[13:23:59.243]                     is.null <- base::is.null
[13:23:59.243]                     muffled <- FALSE
[13:23:59.243]                     if (inherits(cond, "message")) {
[13:23:59.243]                       muffled <- grepl(pattern, "muffleMessage")
[13:23:59.243]                       if (muffled) 
[13:23:59.243]                         invokeRestart("muffleMessage")
[13:23:59.243]                     }
[13:23:59.243]                     else if (inherits(cond, "warning")) {
[13:23:59.243]                       muffled <- grepl(pattern, "muffleWarning")
[13:23:59.243]                       if (muffled) 
[13:23:59.243]                         invokeRestart("muffleWarning")
[13:23:59.243]                     }
[13:23:59.243]                     else if (inherits(cond, "condition")) {
[13:23:59.243]                       if (!is.null(pattern)) {
[13:23:59.243]                         computeRestarts <- base::computeRestarts
[13:23:59.243]                         grepl <- base::grepl
[13:23:59.243]                         restarts <- computeRestarts(cond)
[13:23:59.243]                         for (restart in restarts) {
[13:23:59.243]                           name <- restart$name
[13:23:59.243]                           if (is.null(name)) 
[13:23:59.243]                             next
[13:23:59.243]                           if (!grepl(pattern, name)) 
[13:23:59.243]                             next
[13:23:59.243]                           invokeRestart(restart)
[13:23:59.243]                           muffled <- TRUE
[13:23:59.243]                           break
[13:23:59.243]                         }
[13:23:59.243]                       }
[13:23:59.243]                     }
[13:23:59.243]                     invisible(muffled)
[13:23:59.243]                   }
[13:23:59.243]                   muffleCondition(cond)
[13:23:59.243]                 })
[13:23:59.243]             }))
[13:23:59.243]             future::FutureResult(value = ...future.value$value, 
[13:23:59.243]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:23:59.243]                   ...future.rng), globalenv = if (FALSE) 
[13:23:59.243]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:23:59.243]                     ...future.globalenv.names))
[13:23:59.243]                 else NULL, started = ...future.startTime, version = "1.8")
[13:23:59.243]         }, condition = base::local({
[13:23:59.243]             c <- base::c
[13:23:59.243]             inherits <- base::inherits
[13:23:59.243]             invokeRestart <- base::invokeRestart
[13:23:59.243]             length <- base::length
[13:23:59.243]             list <- base::list
[13:23:59.243]             seq.int <- base::seq.int
[13:23:59.243]             signalCondition <- base::signalCondition
[13:23:59.243]             sys.calls <- base::sys.calls
[13:23:59.243]             `[[` <- base::`[[`
[13:23:59.243]             `+` <- base::`+`
[13:23:59.243]             `<<-` <- base::`<<-`
[13:23:59.243]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:23:59.243]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:23:59.243]                   3L)]
[13:23:59.243]             }
[13:23:59.243]             function(cond) {
[13:23:59.243]                 is_error <- inherits(cond, "error")
[13:23:59.243]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:23:59.243]                   NULL)
[13:23:59.243]                 if (is_error) {
[13:23:59.243]                   sessionInformation <- function() {
[13:23:59.243]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:23:59.243]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:23:59.243]                       search = base::search(), system = base::Sys.info())
[13:23:59.243]                   }
[13:23:59.243]                   ...future.conditions[[length(...future.conditions) + 
[13:23:59.243]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:23:59.243]                     cond$call), session = sessionInformation(), 
[13:23:59.243]                     timestamp = base::Sys.time(), signaled = 0L)
[13:23:59.243]                   signalCondition(cond)
[13:23:59.243]                 }
[13:23:59.243]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:23:59.243]                 "immediateCondition"))) {
[13:23:59.243]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:23:59.243]                   ...future.conditions[[length(...future.conditions) + 
[13:23:59.243]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:23:59.243]                   if (TRUE && !signal) {
[13:23:59.243]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:23:59.243]                     {
[13:23:59.243]                       inherits <- base::inherits
[13:23:59.243]                       invokeRestart <- base::invokeRestart
[13:23:59.243]                       is.null <- base::is.null
[13:23:59.243]                       muffled <- FALSE
[13:23:59.243]                       if (inherits(cond, "message")) {
[13:23:59.243]                         muffled <- grepl(pattern, "muffleMessage")
[13:23:59.243]                         if (muffled) 
[13:23:59.243]                           invokeRestart("muffleMessage")
[13:23:59.243]                       }
[13:23:59.243]                       else if (inherits(cond, "warning")) {
[13:23:59.243]                         muffled <- grepl(pattern, "muffleWarning")
[13:23:59.243]                         if (muffled) 
[13:23:59.243]                           invokeRestart("muffleWarning")
[13:23:59.243]                       }
[13:23:59.243]                       else if (inherits(cond, "condition")) {
[13:23:59.243]                         if (!is.null(pattern)) {
[13:23:59.243]                           computeRestarts <- base::computeRestarts
[13:23:59.243]                           grepl <- base::grepl
[13:23:59.243]                           restarts <- computeRestarts(cond)
[13:23:59.243]                           for (restart in restarts) {
[13:23:59.243]                             name <- restart$name
[13:23:59.243]                             if (is.null(name)) 
[13:23:59.243]                               next
[13:23:59.243]                             if (!grepl(pattern, name)) 
[13:23:59.243]                               next
[13:23:59.243]                             invokeRestart(restart)
[13:23:59.243]                             muffled <- TRUE
[13:23:59.243]                             break
[13:23:59.243]                           }
[13:23:59.243]                         }
[13:23:59.243]                       }
[13:23:59.243]                       invisible(muffled)
[13:23:59.243]                     }
[13:23:59.243]                     muffleCondition(cond, pattern = "^muffle")
[13:23:59.243]                   }
[13:23:59.243]                 }
[13:23:59.243]                 else {
[13:23:59.243]                   if (TRUE) {
[13:23:59.243]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:23:59.243]                     {
[13:23:59.243]                       inherits <- base::inherits
[13:23:59.243]                       invokeRestart <- base::invokeRestart
[13:23:59.243]                       is.null <- base::is.null
[13:23:59.243]                       muffled <- FALSE
[13:23:59.243]                       if (inherits(cond, "message")) {
[13:23:59.243]                         muffled <- grepl(pattern, "muffleMessage")
[13:23:59.243]                         if (muffled) 
[13:23:59.243]                           invokeRestart("muffleMessage")
[13:23:59.243]                       }
[13:23:59.243]                       else if (inherits(cond, "warning")) {
[13:23:59.243]                         muffled <- grepl(pattern, "muffleWarning")
[13:23:59.243]                         if (muffled) 
[13:23:59.243]                           invokeRestart("muffleWarning")
[13:23:59.243]                       }
[13:23:59.243]                       else if (inherits(cond, "condition")) {
[13:23:59.243]                         if (!is.null(pattern)) {
[13:23:59.243]                           computeRestarts <- base::computeRestarts
[13:23:59.243]                           grepl <- base::grepl
[13:23:59.243]                           restarts <- computeRestarts(cond)
[13:23:59.243]                           for (restart in restarts) {
[13:23:59.243]                             name <- restart$name
[13:23:59.243]                             if (is.null(name)) 
[13:23:59.243]                               next
[13:23:59.243]                             if (!grepl(pattern, name)) 
[13:23:59.243]                               next
[13:23:59.243]                             invokeRestart(restart)
[13:23:59.243]                             muffled <- TRUE
[13:23:59.243]                             break
[13:23:59.243]                           }
[13:23:59.243]                         }
[13:23:59.243]                       }
[13:23:59.243]                       invisible(muffled)
[13:23:59.243]                     }
[13:23:59.243]                     muffleCondition(cond, pattern = "^muffle")
[13:23:59.243]                   }
[13:23:59.243]                 }
[13:23:59.243]             }
[13:23:59.243]         }))
[13:23:59.243]     }, error = function(ex) {
[13:23:59.243]         base::structure(base::list(value = NULL, visible = NULL, 
[13:23:59.243]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:23:59.243]                 ...future.rng), started = ...future.startTime, 
[13:23:59.243]             finished = Sys.time(), session_uuid = NA_character_, 
[13:23:59.243]             version = "1.8"), class = "FutureResult")
[13:23:59.243]     }, finally = {
[13:23:59.243]         if (!identical(...future.workdir, getwd())) 
[13:23:59.243]             setwd(...future.workdir)
[13:23:59.243]         {
[13:23:59.243]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:23:59.243]                 ...future.oldOptions$nwarnings <- NULL
[13:23:59.243]             }
[13:23:59.243]             base::options(...future.oldOptions)
[13:23:59.243]             if (.Platform$OS.type == "windows") {
[13:23:59.243]                 old_names <- names(...future.oldEnvVars)
[13:23:59.243]                 envs <- base::Sys.getenv()
[13:23:59.243]                 names <- names(envs)
[13:23:59.243]                 common <- intersect(names, old_names)
[13:23:59.243]                 added <- setdiff(names, old_names)
[13:23:59.243]                 removed <- setdiff(old_names, names)
[13:23:59.243]                 changed <- common[...future.oldEnvVars[common] != 
[13:23:59.243]                   envs[common]]
[13:23:59.243]                 NAMES <- toupper(changed)
[13:23:59.243]                 args <- list()
[13:23:59.243]                 for (kk in seq_along(NAMES)) {
[13:23:59.243]                   name <- changed[[kk]]
[13:23:59.243]                   NAME <- NAMES[[kk]]
[13:23:59.243]                   if (name != NAME && is.element(NAME, old_names)) 
[13:23:59.243]                     next
[13:23:59.243]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:23:59.243]                 }
[13:23:59.243]                 NAMES <- toupper(added)
[13:23:59.243]                 for (kk in seq_along(NAMES)) {
[13:23:59.243]                   name <- added[[kk]]
[13:23:59.243]                   NAME <- NAMES[[kk]]
[13:23:59.243]                   if (name != NAME && is.element(NAME, old_names)) 
[13:23:59.243]                     next
[13:23:59.243]                   args[[name]] <- ""
[13:23:59.243]                 }
[13:23:59.243]                 NAMES <- toupper(removed)
[13:23:59.243]                 for (kk in seq_along(NAMES)) {
[13:23:59.243]                   name <- removed[[kk]]
[13:23:59.243]                   NAME <- NAMES[[kk]]
[13:23:59.243]                   if (name != NAME && is.element(NAME, old_names)) 
[13:23:59.243]                     next
[13:23:59.243]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:23:59.243]                 }
[13:23:59.243]                 if (length(args) > 0) 
[13:23:59.243]                   base::do.call(base::Sys.setenv, args = args)
[13:23:59.243]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:23:59.243]             }
[13:23:59.243]             else {
[13:23:59.243]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:23:59.243]             }
[13:23:59.243]             {
[13:23:59.243]                 if (base::length(...future.futureOptionsAdded) > 
[13:23:59.243]                   0L) {
[13:23:59.243]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:23:59.243]                   base::names(opts) <- ...future.futureOptionsAdded
[13:23:59.243]                   base::options(opts)
[13:23:59.243]                 }
[13:23:59.243]                 {
[13:23:59.243]                   {
[13:23:59.243]                     base::options(mc.cores = ...future.mc.cores.old)
[13:23:59.243]                     NULL
[13:23:59.243]                   }
[13:23:59.243]                   options(future.plan = NULL)
[13:23:59.243]                   if (is.na(NA_character_)) 
[13:23:59.243]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:23:59.243]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:23:59.243]                   future::plan(list(a = function (..., workers = availableCores(constraints = "multicore"), 
[13:23:59.243]                     envir = parent.frame()) 
[13:23:59.243]                   {
[13:23:59.243]                     default_workers <- missing(workers)
[13:23:59.243]                     if (is.function(workers)) 
[13:23:59.243]                       workers <- workers()
[13:23:59.243]                     workers <- structure(as.integer(workers), 
[13:23:59.243]                       class = class(workers))
[13:23:59.243]                     stop_if_not(is.finite(workers), workers >= 
[13:23:59.243]                       1L)
[13:23:59.243]                     if ((workers == 1L && !inherits(workers, 
[13:23:59.243]                       "AsIs")) || !supportsMulticore(warn = TRUE)) {
[13:23:59.243]                       if (default_workers) 
[13:23:59.243]                         supportsMulticore(warn = TRUE)
[13:23:59.243]                       return(sequential(..., envir = envir))
[13:23:59.243]                     }
[13:23:59.243]                     oopts <- options(mc.cores = workers)
[13:23:59.243]                     on.exit(options(oopts))
[13:23:59.243]                     future <- MulticoreFuture(..., workers = workers, 
[13:23:59.243]                       envir = envir)
[13:23:59.243]                     if (!future$lazy) 
[13:23:59.243]                       future <- run(future)
[13:23:59.243]                     invisible(future)
[13:23:59.243]                   }, b = function (..., envir = parent.frame()) 
[13:23:59.243]                   {
[13:23:59.243]                     future <- SequentialFuture(..., envir = envir)
[13:23:59.243]                     if (!future$lazy) 
[13:23:59.243]                       future <- run(future)
[13:23:59.243]                     invisible(future)
[13:23:59.243]                   }), .cleanup = FALSE, .init = FALSE)
[13:23:59.243]                 }
[13:23:59.243]             }
[13:23:59.243]         }
[13:23:59.243]     })
[13:23:59.243]     if (TRUE) {
[13:23:59.243]         base::sink(type = "output", split = FALSE)
[13:23:59.243]         if (TRUE) {
[13:23:59.243]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:23:59.243]         }
[13:23:59.243]         else {
[13:23:59.243]             ...future.result["stdout"] <- base::list(NULL)
[13:23:59.243]         }
[13:23:59.243]         base::close(...future.stdout)
[13:23:59.243]         ...future.stdout <- NULL
[13:23:59.243]     }
[13:23:59.243]     ...future.result$conditions <- ...future.conditions
[13:23:59.243]     ...future.result$finished <- base::Sys.time()
[13:23:59.243]     ...future.result
[13:23:59.243] }
[13:23:59.246] assign_globals() ...
[13:23:59.246] List of 1
[13:23:59.246]  $ data:'data.frame':	3 obs. of  2 variables:
[13:23:59.246]   ..$ a: int [1:3] 1 2 3
[13:23:59.246]   ..$ b: int [1:3] 3 2 1
[13:23:59.246]  - attr(*, "where")=List of 1
[13:23:59.246]   ..$ data:<environment: R_EmptyEnv> 
[13:23:59.246]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[13:23:59.246]  - attr(*, "resolved")= logi FALSE
[13:23:59.246]  - attr(*, "total_size")= num 128
[13:23:59.246]  - attr(*, "already-done")= logi TRUE
[13:23:59.250] - copied ‘data’ to environment
[13:23:59.250] assign_globals() ... done
[13:23:59.250] requestCore(): workers = 2
[13:23:59.253] MulticoreFuture started
[13:23:59.253] - Launch lazy future ... done
[13:23:59.253] run() for ‘MulticoreFuture’ ... done
[13:23:59.254] result() for MulticoreFuture ...
[13:23:59.254] plan(): Setting new future strategy stack:
[13:23:59.254] List of future strategies:
[13:23:59.254] 1. sequential:
[13:23:59.254]    - args: function (..., envir = parent.frame())
[13:23:59.254]    - tweaked: FALSE
[13:23:59.254]    - call: plan(list(a = strategy1, b = strategy2))
[13:23:59.255] plan(): nbrOfWorkers() = 1
[13:23:59.280] plan(): Setting new future strategy stack:
[13:23:59.280] List of future strategies:
[13:23:59.280] 1. multicore:
[13:23:59.280]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[13:23:59.280]    - tweaked: FALSE
[13:23:59.280]    - call: plan(list(a = strategy1, b = strategy2))
[13:23:59.280] 2. sequential:
[13:23:59.280]    - args: function (..., envir = parent.frame())
[13:23:59.280]    - tweaked: FALSE
[13:23:59.280]    - call: plan(list(a = strategy1, b = strategy2))
[13:23:59.285] plan(): nbrOfWorkers() = 2
[13:23:59.286] result() for MulticoreFuture ...
[13:23:59.286] result() for MulticoreFuture ... done
[13:23:59.286] signalConditions() ...
[13:23:59.286]  - include = ‘immediateCondition’
[13:23:59.286]  - exclude = 
[13:23:59.286]  - resignal = FALSE
[13:23:59.286]  - Number of conditions: 52
[13:23:59.287] signalConditions() ... done
[13:23:59.287] result() for MulticoreFuture ... done
[13:23:59.287] result() for MulticoreFuture ...
[13:23:59.287] result() for MulticoreFuture ... done
[13:23:59.287] signalConditions() ...
[13:23:59.287]  - include = ‘immediateCondition’
[13:23:59.287]  - exclude = 
[13:23:59.287]  - resignal = FALSE
[13:23:59.288]  - Number of conditions: 52
[13:23:59.288] signalConditions() ... done
[13:23:59.288] Future state: ‘finished’
[13:23:59.288] result() for MulticoreFuture ...
[13:23:59.288] result() for MulticoreFuture ... done
[13:23:59.288] signalConditions() ...
[13:23:59.288]  - include = ‘condition’
[13:23:59.288]  - exclude = ‘immediateCondition’
[13:23:59.289]  - resignal = TRUE
[13:23:59.289]  - Number of conditions: 52
[13:23:59.289]  - Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:59.256] getGlobalsAndPackages() ...
[13:23:59.289]  - Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:59.257] Searching for globals...
[13:23:59.289]  - Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:59.259] - globals found: [4] ‘subset’, ‘data’, ‘==’, ‘a’
[13:23:59.289]  - Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:59.259] Searching for globals ... DONE
[13:23:59.289]  - Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:59.259] Resolving globals: FALSE
[13:23:59.290]  - Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:59.260] The total size of the 1 globals is 128 bytes (128 bytes)
[13:23:59.290]  - Condition #7: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:59.261] The total size of the 1 globals exported for future expression (‘subset(data, a == 2)’) is 128 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘data’ (128 bytes of class ‘list’)
[13:23:59.290]  - Condition #8: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:59.261] - globals: [1] ‘data’
[13:23:59.290]  - Condition #9: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:59.261] 
[13:23:59.290]  - Condition #10: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:59.261] getGlobalsAndPackages() ... DONE
[13:23:59.290]  - Condition #11: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:59.262] run() for ‘Future’ ...
[13:23:59.291]  - Condition #12: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:59.262] - state: ‘created’
[13:23:59.291]  - Condition #13: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:59.263] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[13:23:59.291]  - Condition #14: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:59.263] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[13:23:59.291]  - Condition #15: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:59.263] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[13:23:59.291]  - Condition #16: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:59.263]   - Field: ‘label’
[13:23:59.291]  - Condition #17: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:59.264]   - Field: ‘local’
[13:23:59.292]  - Condition #18: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:59.264]   - Field: ‘owner’
[13:23:59.292]  - Condition #19: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:59.264]   - Field: ‘envir’
[13:23:59.292]  - Condition #20: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:59.264]   - Field: ‘packages’
[13:23:59.292]  - Condition #21: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:59.264]   - Field: ‘gc’
[13:23:59.292]  - Condition #22: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:59.264]   - Field: ‘conditions’
[13:23:59.292]  - Condition #23: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:59.265]   - Field: ‘expr’
[13:23:59.293]  - Condition #24: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:59.265]   - Field: ‘uuid’
[13:23:59.293]  - Condition #25: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:59.265]   - Field: ‘seed’
[13:23:59.293]  - Condition #26: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:59.265]   - Field: ‘version’
[13:23:59.293]  - Condition #27: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:59.265]   - Field: ‘result’
[13:23:59.293]  - Condition #28: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:59.265]   - Field: ‘asynchronous’
[13:23:59.293]  - Condition #29: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:59.266]   - Field: ‘calls’
[13:23:59.293]  - Condition #30: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:59.266]   - Field: ‘globals’
[13:23:59.294]  - Condition #31: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:59.266]   - Field: ‘stdout’
[13:23:59.294]  - Condition #32: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:59.266]   - Field: ‘earlySignal’
[13:23:59.294]  - Condition #33: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:59.266]   - Field: ‘lazy’
[13:23:59.294]  - Condition #34: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:59.266]   - Field: ‘state’
[13:23:59.294]  - Condition #35: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:59.266] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[13:23:59.294]  - Condition #36: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:59.267] - Launch lazy future ...
[13:23:59.295]  - Condition #37: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:59.267] Packages needed by the future expression (n = 0): <none>
[13:23:59.295]  - Condition #38: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:59.267] Packages needed by future strategies (n = 0): <none>
[13:23:59.295]  - Condition #39: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:59.268] {
[13:23:59.268]     {
[13:23:59.268]         {
[13:23:59.268]             ...future.startTime <- base::Sys.time()
[13:23:59.268]             {
[13:23:59.268]                 {
[13:23:59.268]                   {
[13:23:59.268]                     base::local({
[13:23:59.268]                       has_future <- base::requireNamespace("future", 
[13:23:59.268]                         quietly = TRUE)
[13:23:59.268]                       if (has_future) {
[13:23:59.268]                         ns <- base::getNamespace("future")
[13:23:59.268]                         version <- ns[[".package"]][["version"]]
[13:23:59.268]                         if (is.null(version)) 
[13:23:59.268]                           version <- utils::packageVersion("future")
[13:23:59.268]                       }
[13:23:59.268]                       else {
[13:23:59.268]                         version <- NULL
[13:23:59.268]                       }
[13:23:59.268]                       if (!has_future || version < "1.8.0") {
[13:23:59.268]                         info <- base::c(r_version = base::gsub("R version ", 
[13:23:59.268]                           "", base::R.version$version.string), 
[13:23:59.268]                           platform = base::sprintf("%s (%s-bit)", 
[13:23:59.268]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:23:59.268]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[13:23:59.268]                             "release", "version")], collapse = " "), 
[13:23:59.268]                           hostname = base::Sys.info()[["nodename"]])
[13:23:59.268]                         info <- base::sprintf("%s: %s", base::names(info), 
[13:23:59.268]                           info)
[13:23:59.268]                         info <- base::paste(info, collapse = "; ")
[13:23:59.268]                         if (!has_future) {
[13:23:59.268]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:23:59.268]                             info)
[13:23:59.268]                         }
[13:23:59.268]                         else {
[13:23:59.268]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:23:59.268]                             info, version)
[13:23:59.268]                         }
[13:23:59.268]                         base::stop(msg)
[13:23:59.268]                       }
[13:23:59.268]                     })
[13:23:59.268]                   }
[13:23:59.268]                   options(future.plan = NULL)
[13:23:59.268]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:23:59.268]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:23:59.268]                 }
[13:23:59.268]                 ...future.workdir <- getwd()
[13:23:59.268]             }
[13:23:59.268]             ...future.oldOptions <- base::as.list(base::.Options)
[13:23:59.268]             ...future.oldEnvVars <- base::Sys.getenv()
[13:23:59.268]         }
[13:23:59.268]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:23:59.268]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:23:59.268]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:23:59.268]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:23:59.268]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:23:59.268]             future.stdout.windows.reencode = NULL, width = 80L)
[13:23:59.268]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:23:59.268]             base::names(...future.oldOptions))
[13:23:59.268]     }
[13:23:59.268]     if (FALSE) {
[13:23:59.268]     }
[13:23:59.268]     else {
[13:23:59.268]         if (TRUE) {
[13:23:59.268]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:23:59.268]                 open = "w")
[13:23:59.268]         }
[13:23:59.268]         else {
[13:23:59.268]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:23:59.268]                 windows = "NUL", "/dev/null"), open = "w")
[13:23:59.268]         }
[13:23:59.268]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:23:59.268]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:23:59.268]             base::sink(type = "output", split = FALSE)
[13:23:59.268]             base::close(...future.stdout)
[13:23:59.268]         }, add = TRUE)
[13:23:59.268]     }
[13:23:59.268]     ...future.frame <- base::sys.nframe()
[13:23:59.268]     ...future.conditions <- base::list()
[13:23:59.268]     ...future.rng <- base::globalenv()$.Random.seed
[13:23:59.268]     if (FALSE) {
[13:23:59.268]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:23:59.268]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:23:59.268]     }
[13:23:59.268]     ...future.result <- base::tryCatch({
[13:23:59.268]         base::withCallingHandlers({
[13:23:59.268]             ...future.value <- base::withVisible(base::local(subset(data, 
[13:23:59.268]                 a == 2)))
[13:23:59.268]             future::FutureResult(value = ...future.value$value, 
[13:23:59.268]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:23:59.268]                   ...future.rng), globalenv = if (FALSE) 
[13:23:59.268]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:23:59.268]                     ...future.globalenv.names))
[13:23:59.268]                 else NULL, started = ...future.startTime, version = "1.8")
[13:23:59.268]         }, condition = base::local({
[13:23:59.268]             c <- base::c
[13:23:59.268]             inherits <- base::inherits
[13:23:59.268]             invokeRestart <- base::invokeRestart
[13:23:59.268]             length <- base::length
[13:23:59.268]             list <- base::list
[13:23:59.268]             seq.int <- base::seq.int
[13:23:59.268]             signalCondition <- base::signalCondition
[13:23:59.268]             sys.calls <- base::sys.calls
[13:23:59.268]             `[[` <- base::`[[`
[13:23:59.268]             `+` <- base::`+`
[13:23:59.268]             `<<-` <- base::`<<-`
[13:23:59.268]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:23:59.268]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:23:59.268]                   3L)]
[13:23:59.268]             }
[13:23:59.268]             function(cond) {
[13:23:59.268]                 is_error <- inherits(cond, "error")
[13:23:59.268]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:23:59.268]                   NULL)
[13:23:59.268]                 if (is_error) {
[13:23:59.268]                   sessionInformation <- function() {
[13:23:59.268]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:23:59.268]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:23:59.268]                       search = base::search(), system = base::Sys.info())
[13:23:59.268]                   }
[13:23:59.268]                   ...future.conditions[[length(...future.conditions) + 
[13:23:59.268]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:23:59.268]                     cond$call), session = sessionInformation(), 
[13:23:59.268]                     timestamp = base::Sys.time(), signaled = 0L)
[13:23:59.268]                   signalCondition(cond)
[13:23:59.268]                 }
[13:23:59.268]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:23:59.268]                 "immediateCondition"))) {
[13:23:59.268]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:23:59.268]                   ...future.conditions[[length(...future.conditions) + 
[13:23:59.268]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:23:59.268]                   if (TRUE && !signal) {
[13:23:59.268]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:23:59.268]                     {
[13:23:59.268]                       inherits <- base::inherits
[13:23:59.268]                       invokeRestart <- base::invokeRestart
[13:23:59.268]                       is.null <- base::is.null
[13:23:59.268]                       muffled <- FALSE
[13:23:59.268]                       if (inherits(cond, "message")) {
[13:23:59.268]                         muffled <- grepl(pattern, "muffleMessage")
[13:23:59.268]                         if (muffled) 
[13:23:59.268]                           invokeRestart("muffleMessage")
[13:23:59.268]                       }
[13:23:59.268]                       else if (inherits(cond, "warning")) {
[13:23:59.268]                         muffled <- grepl(pattern, "muffleWarning")
[13:23:59.268]                         if (muffled) 
[13:23:59.268]                           invokeRestart("muffleWarning")
[13:23:59.268]                       }
[13:23:59.268]                       else if (inherits(cond, "condition")) {
[13:23:59.268]                         if (!is.null(pattern)) {
[13:23:59.268]                           computeRestarts <- base::computeRestarts
[13:23:59.268]                           grepl <- base::grepl
[13:23:59.268]                           restarts <- computeRestarts(cond)
[13:23:59.268]                           for (restart in restarts) {
[13:23:59.268]                             name <- restart$name
[13:23:59.268]                             if (is.null(name)) 
[13:23:59.268]                               next
[13:23:59.268]                             if (!grepl(pattern, name)) 
[13:23:59.268]                               next
[13:23:59.268]                             invokeRestart(restart)
[13:23:59.268]                             muffled <- TRUE
[13:23:59.268]                             break
[13:23:59.268]                           }
[13:23:59.268]                         }
[13:23:59.268]                       }
[13:23:59.268]                       invisible(muffled)
[13:23:59.268]                     }
[13:23:59.268]                     muffleCondition(cond, pattern = "^muffle")
[13:23:59.268]                   }
[13:23:59.268]                 }
[13:23:59.268]                 else {
[13:23:59.268]                   if (TRUE) {
[13:23:59.268]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:23:59.268]                     {
[13:23:59.268]                       inherits <- base::inherits
[13:23:59.268]                       invokeRestart <- base::invokeRestart
[13:23:59.268]                       is.null <- base::is.null
[13:23:59.268]                       muffled <- FALSE
[13:23:59.268]                       if (inherits(cond, "message")) {
[13:23:59.268]                         muffled <- grepl(pattern, "muffleMessage")
[13:23:59.268]                         if (muffled) 
[13:23:59.268]                           invokeRestart("muffleMessage")
[13:23:59.268]                       }
[13:23:59.268]                       else if (inherits(cond, "warning")) {
[13:23:59.268]                         muffled <- grepl(pattern, "muffleWarning")
[13:23:59.268]                         if (muffled) 
[13:23:59.268]                           invokeRestart("muffleWarning")
[13:23:59.268]                       }
[13:23:59.268]                       else if (inherits(cond, "condition")) {
[13:23:59.268]                         if (!is.null(pattern)) {
[13:23:59.268]                           computeRestarts <- base::computeRestarts
[13:23:59.268]                           grepl <- base::grepl
[13:23:59.268]                           restarts <- computeRestarts(cond)
[13:23:59.268]                           for (restart in restarts) {
[13:23:59.268]                             name <- restart$name
[13:23:59.268]                             if (is.null(name)) 
[13:23:59.268]                               next
[13:23:59.268]                             if (!grepl(pattern, name)) 
[13:23:59.268]                               next
[13:23:59.268]                             invokeRestart(restart)
[13:23:59.268]                             muffled <- TRUE
[13:23:59.268]                             break
[13:23:59.268]                           }
[13:23:59.268]                         }
[13:23:59.268]                       }
[13:23:59.268]                       invisible(muffled)
[13:23:59.268]                     }
[13:23:59.268]                     muffleCondition(cond, pattern = "^muffle")
[13:23:59.268]                   }
[13:23:59.268]                 }
[13:23:59.268]             }
[13:23:59.268]         }))
[13:23:59.268]     }, error = function(ex) {
[13:23:59.268]         base::structure(base::list(value = NULL, visible = NULL, 
[13:23:59.268]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:23:59.268]                 ...future.rng), started = ...future.startTime, 
[13:23:59.268]             finished = Sys.time(), session_uuid = NA_character_, 
[13:23:59.268]             version = "1.8"), class = "FutureResult")
[13:23:59.268]     }, finally = {
[13:23:59.268]         if (!identical(...future.workdir, getwd())) 
[13:23:59.268]             setwd(...future.workdir)
[13:23:59.268]         {
[13:23:59.268]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:23:59.268]                 ...future.oldOptions$nwarnings <- NULL
[13:23:59.268]             }
[13:23:59.268]             base::options(...future.oldOptions)
[13:23:59.268]             if (.Platform$OS.type == "windows") {
[13:23:59.268]                 old_names <- names(...future.oldEnvVars)
[13:23:59.268]                 envs <- base::Sys.getenv()
[13:23:59.268]                 names <- names(envs)
[13:23:59.268]                 common <- intersect(names, old_names)
[13:23:59.268]                 added <- setdiff(names, old_names)
[13:23:59.268]                 removed <- setdiff(old_names, names)
[13:23:59.268]                 changed <- common[...future.oldEnvVars[common] != 
[13:23:59.268]                   envs[common]]
[13:23:59.268]                 NAMES <- toupper(changed)
[13:23:59.268]                 args <- list()
[13:23:59.268]                 for (kk in seq_along(NAMES)) {
[13:23:59.268]                   name <- changed[[kk]]
[13:23:59.268]                   NAME <- NAMES[[kk]]
[13:23:59.268]                   if (name != NAME && is.element(NAME, old_names)) 
[13:23:59.268]                     next
[13:23:59.268]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:23:59.268]                 }
[13:23:59.268]                 NAMES <- toupper(added)
[13:23:59.268]                 for (kk in seq_along(NAMES)) {
[13:23:59.268]                   name <- added[[kk]]
[13:23:59.268]                   NAME <- NAMES[[kk]]
[13:23:59.268]                   if (name != NAME && is.element(NAME, old_names)) 
[13:23:59.268]                     next
[13:23:59.268]                   args[[name]] <- ""
[13:23:59.268]                 }
[13:23:59.268]                 NAMES <- toupper(removed)
[13:23:59.268]                 for (kk in seq_along(NAMES)) {
[13:23:59.268]                   name <- removed[[kk]]
[13:23:59.268]                   NAME <- NAMES[[kk]]
[13:23:59.268]                   if (name != NAME && is.element(NAME, old_names)) 
[13:23:59.268]                     next
[13:23:59.268]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:23:59.268]                 }
[13:23:59.268]                 if (length(args) > 0) 
[13:23:59.268]                   base::do.call(base::Sys.setenv, args = args)
[13:23:59.268]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:23:59.268]             }
[13:23:59.268]             else {
[13:23:59.268]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:23:59.268]             }
[13:23:59.268]             {
[13:23:59.268]                 if (base::length(...future.futureOptionsAdded) > 
[13:23:59.268]                   0L) {
[13:23:59.268]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:23:59.268]                   base::names(opts) <- ...future.futureOptionsAdded
[13:23:59.268]                   base::options(opts)
[13:23:59.268]                 }
[13:23:59.268]                 {
[13:23:59.268]                   {
[13:23:59.268]                     NULL
[13:23:59.268]                     RNGkind("Mersenne-Twister")
[13:23:59.268]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[13:23:59.268]                       inherits = FALSE)
[13:23:59.268]                   }
[13:23:59.268]                   options(future.plan = NULL)
[13:23:59.268]                   if (is.na(NA_character_)) 
[13:23:59.268]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:23:59.268]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:23:59.268]                   future::plan(list(b = function (..., envir = parent.frame()) 
[13:23:59.268]                   {
[13:23:59.268]                     future <- SequentialFuture(..., envir = envir)
[13:23:59.268]                     if (!future$lazy) 
[13:23:59.268]                       future <- run(future)
[13:23:59.268]                     invisible(future)
[13:23:59.268]                   }), .cleanup = FALSE, .init = FALSE)
[13:23:59.268]                 }
[13:23:59.268]             }
[13:23:59.268]         }
[13:23:59.268]     })
[13:23:59.268]     if (TRUE) {
[13:23:59.268]         base::sink(type = "output", split = FALSE)
[13:23:59.268]         if (TRUE) {
[13:23:59.268]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:23:59.268]         }
[13:23:59.268]         else {
[13:23:59.268]             ...future.result["stdout"] <- base::list(NULL)
[13:23:59.268]         }
[13:23:59.268]         base::close(...future.stdout)
[13:23:59.268]         ...future.stdout <- NULL
[13:23:59.268]     }
[13:23:59.268]     ...future.result$conditions <- ...future.conditions
[13:23:59.268]     ...future.result$finished <- base::Sys.time()
[13:23:59.268]     ...future.result
[13:23:59.268] }
[13:23:59.295]  - Condition #40: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:59.270] assign_globals() ...
[13:23:59.295]  - Condition #41: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:59.270] List of 1
[13:23:59.270]  $ data:'data.frame':	3 obs. of  2 variables:
[13:23:59.270]   ..$ a: int [1:3] 1 2 3
[13:23:59.270]   ..$ b: int [1:3] 3 2 1
[13:23:59.270]  - attr(*, "where")=List of 1
[13:23:59.270]   ..$ data:<environment: R_EmptyEnv> 
[13:23:59.270]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[13:23:59.270]  - attr(*, "resolved")= logi FALSE
[13:23:59.270]  - attr(*, "total_size")= num 128
[13:23:59.270]  - attr(*, "already-done")= logi TRUE
[13:23:59.295]  - Condition #42: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:59.275] - copied ‘data’ to environment
[13:23:59.296]  - Condition #43: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:59.275] assign_globals() ... done
[13:23:59.296]  - Condition #44: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:59.276] plan(): Setting new future strategy stack:
[13:23:59.296]  - Condition #45: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:59.276] List of future strategies:
[13:23:59.276] 1. sequential:
[13:23:59.276]    - args: function (..., envir = parent.frame())
[13:23:59.276]    - tweaked: FALSE
[13:23:59.276]    - call: NULL
[13:23:59.296]  - Condition #46: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:59.276] plan(): nbrOfWorkers() = 1
[13:23:59.296]  - Condition #47: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:59.278] plan(): Setting new future strategy stack:
[13:23:59.296]  - Condition #48: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:59.278] List of future strategies:
[13:23:59.278] 1. sequential:
[13:23:59.278]    - args: function (..., envir = parent.frame())
[13:23:59.278]    - tweaked: FALSE
[13:23:59.278]    - call: plan(list(a = strategy1, b = strategy2))
[13:23:59.297]  - Condition #49: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:59.278] plan(): nbrOfWorkers() = 1
[13:23:59.297]  - Condition #50: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:59.279] SequentialFuture started (and completed)
[13:23:59.297]  - Condition #51: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:59.279] - Launch lazy future ... done
[13:23:59.297]  - Condition #52: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:59.279] run() for ‘SequentialFuture’ ... done
[13:23:59.297] signalConditions() ... done
- plan(list('multicore', 'sequential')) ... DONE
- plan(list('multicore', 'multicore')) ...
[13:23:59.298] plan(): Setting new future strategy stack:
[13:23:59.298] List of future strategies:
[13:23:59.298] 1. multicore:
[13:23:59.298]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[13:23:59.298]    - tweaked: FALSE
[13:23:59.298]    - call: plan(list(a = strategy1, b = strategy2))
[13:23:59.298] 2. multicore:
[13:23:59.298]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[13:23:59.298]    - tweaked: FALSE
[13:23:59.298]    - call: plan(list(a = strategy1, b = strategy2))
[13:23:59.303] plan(): nbrOfWorkers() = 2
[13:23:59.303] getGlobalsAndPackages() ...
[13:23:59.303] Searching for globals...
[13:23:59.326] - globals found: [21] ‘{’, ‘<-’, ‘unclass’, ‘::’, ‘[’, ‘nested’, ‘-’, ‘stopifnot’, ‘==’, ‘length’, ‘inherits’, ‘[[’, ‘strategy2’, ‘for’, ‘seq_along’, ‘attr’, ‘attr<-’, ‘[[<-’, ‘all.equal’, ‘list’, ‘%<-%’
[13:23:59.326] Searching for globals ... DONE
[13:23:59.326] Resolving globals: FALSE
[13:23:59.327] The total size of the 2 globals is 93.07 KiB (95304 bytes)
[13:23:59.328] The total size of the 2 globals exported for future expression (‘{; a <- 1L; plan_a <- unclass(future::plan("list")); nested_a <- nested[-1]; stopifnot(length(nested_a) == 1L, length(plan_a) == 1L, inherits(plan_a[[1]],; "future"), inherits(future::plan("next"), strategy2)); ...; }; y; }’) is 93.07 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘nested’ (92.95 KiB of class ‘list’) and ‘strategy2’ (120 bytes of class ‘character’)
[13:23:59.328] - globals: [2] ‘nested’, ‘strategy2’
[13:23:59.328] - packages: [1] ‘future’
[13:23:59.328] getGlobalsAndPackages() ... DONE
[13:23:59.328] run() for ‘Future’ ...
[13:23:59.329] - state: ‘created’
[13:23:59.329] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[13:23:59.333] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:23:59.333] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[13:23:59.333]   - Field: ‘label’
[13:23:59.333]   - Field: ‘local’
[13:23:59.333]   - Field: ‘owner’
[13:23:59.334]   - Field: ‘envir’
[13:23:59.334]   - Field: ‘workers’
[13:23:59.334]   - Field: ‘packages’
[13:23:59.334]   - Field: ‘gc’
[13:23:59.334]   - Field: ‘job’
[13:23:59.334]   - Field: ‘conditions’
[13:23:59.334]   - Field: ‘expr’
[13:23:59.334]   - Field: ‘uuid’
[13:23:59.334]   - Field: ‘seed’
[13:23:59.335]   - Field: ‘version’
[13:23:59.335]   - Field: ‘result’
[13:23:59.335]   - Field: ‘asynchronous’
[13:23:59.335]   - Field: ‘calls’
[13:23:59.335]   - Field: ‘globals’
[13:23:59.335]   - Field: ‘stdout’
[13:23:59.335]   - Field: ‘earlySignal’
[13:23:59.335]   - Field: ‘lazy’
[13:23:59.335]   - Field: ‘state’
[13:23:59.336] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[13:23:59.336] - Launch lazy future ...
[13:23:59.336] Packages needed by the future expression (n = 1): ‘future’
[13:23:59.336] Packages needed by future strategies (n = 1): ‘future’
[13:23:59.337] {
[13:23:59.337]     {
[13:23:59.337]         {
[13:23:59.337]             ...future.startTime <- base::Sys.time()
[13:23:59.337]             {
[13:23:59.337]                 {
[13:23:59.337]                   {
[13:23:59.337]                     {
[13:23:59.337]                       {
[13:23:59.337]                         base::local({
[13:23:59.337]                           has_future <- base::requireNamespace("future", 
[13:23:59.337]                             quietly = TRUE)
[13:23:59.337]                           if (has_future) {
[13:23:59.337]                             ns <- base::getNamespace("future")
[13:23:59.337]                             version <- ns[[".package"]][["version"]]
[13:23:59.337]                             if (is.null(version)) 
[13:23:59.337]                               version <- utils::packageVersion("future")
[13:23:59.337]                           }
[13:23:59.337]                           else {
[13:23:59.337]                             version <- NULL
[13:23:59.337]                           }
[13:23:59.337]                           if (!has_future || version < "1.8.0") {
[13:23:59.337]                             info <- base::c(r_version = base::gsub("R version ", 
[13:23:59.337]                               "", base::R.version$version.string), 
[13:23:59.337]                               platform = base::sprintf("%s (%s-bit)", 
[13:23:59.337]                                 base::R.version$platform, 8 * 
[13:23:59.337]                                   base::.Machine$sizeof.pointer), 
[13:23:59.337]                               os = base::paste(base::Sys.info()[base::c("sysname", 
[13:23:59.337]                                 "release", "version")], collapse = " "), 
[13:23:59.337]                               hostname = base::Sys.info()[["nodename"]])
[13:23:59.337]                             info <- base::sprintf("%s: %s", base::names(info), 
[13:23:59.337]                               info)
[13:23:59.337]                             info <- base::paste(info, collapse = "; ")
[13:23:59.337]                             if (!has_future) {
[13:23:59.337]                               msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:23:59.337]                                 info)
[13:23:59.337]                             }
[13:23:59.337]                             else {
[13:23:59.337]                               msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:23:59.337]                                 info, version)
[13:23:59.337]                             }
[13:23:59.337]                             base::stop(msg)
[13:23:59.337]                           }
[13:23:59.337]                         })
[13:23:59.337]                       }
[13:23:59.337]                       ...future.mc.cores.old <- base::getOption("mc.cores")
[13:23:59.337]                       base::options(mc.cores = 1L)
[13:23:59.337]                     }
[13:23:59.337]                     base::local({
[13:23:59.337]                       for (pkg in "future") {
[13:23:59.337]                         base::loadNamespace(pkg)
[13:23:59.337]                         base::library(pkg, character.only = TRUE)
[13:23:59.337]                       }
[13:23:59.337]                     })
[13:23:59.337]                   }
[13:23:59.337]                   options(future.plan = NULL)
[13:23:59.337]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:23:59.337]                   future::plan(list(b = function (..., workers = availableCores(constraints = "multicore"), 
[13:23:59.337]                     envir = parent.frame()) 
[13:23:59.337]                   {
[13:23:59.337]                     default_workers <- missing(workers)
[13:23:59.337]                     if (is.function(workers)) 
[13:23:59.337]                       workers <- workers()
[13:23:59.337]                     workers <- structure(as.integer(workers), 
[13:23:59.337]                       class = class(workers))
[13:23:59.337]                     stop_if_not(is.finite(workers), workers >= 
[13:23:59.337]                       1L)
[13:23:59.337]                     if ((workers == 1L && !inherits(workers, 
[13:23:59.337]                       "AsIs")) || !supportsMulticore(warn = TRUE)) {
[13:23:59.337]                       if (default_workers) 
[13:23:59.337]                         supportsMulticore(warn = TRUE)
[13:23:59.337]                       return(sequential(..., envir = envir))
[13:23:59.337]                     }
[13:23:59.337]                     oopts <- options(mc.cores = workers)
[13:23:59.337]                     on.exit(options(oopts))
[13:23:59.337]                     future <- MulticoreFuture(..., workers = workers, 
[13:23:59.337]                       envir = envir)
[13:23:59.337]                     if (!future$lazy) 
[13:23:59.337]                       future <- run(future)
[13:23:59.337]                     invisible(future)
[13:23:59.337]                   }), .cleanup = FALSE, .init = FALSE)
[13:23:59.337]                 }
[13:23:59.337]                 ...future.workdir <- getwd()
[13:23:59.337]             }
[13:23:59.337]             ...future.oldOptions <- base::as.list(base::.Options)
[13:23:59.337]             ...future.oldEnvVars <- base::Sys.getenv()
[13:23:59.337]         }
[13:23:59.337]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:23:59.337]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:23:59.337]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:23:59.337]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:23:59.337]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:23:59.337]             future.stdout.windows.reencode = NULL, width = 80L)
[13:23:59.337]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:23:59.337]             base::names(...future.oldOptions))
[13:23:59.337]     }
[13:23:59.337]     if (FALSE) {
[13:23:59.337]     }
[13:23:59.337]     else {
[13:23:59.337]         if (TRUE) {
[13:23:59.337]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:23:59.337]                 open = "w")
[13:23:59.337]         }
[13:23:59.337]         else {
[13:23:59.337]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:23:59.337]                 windows = "NUL", "/dev/null"), open = "w")
[13:23:59.337]         }
[13:23:59.337]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:23:59.337]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:23:59.337]             base::sink(type = "output", split = FALSE)
[13:23:59.337]             base::close(...future.stdout)
[13:23:59.337]         }, add = TRUE)
[13:23:59.337]     }
[13:23:59.337]     ...future.frame <- base::sys.nframe()
[13:23:59.337]     ...future.conditions <- base::list()
[13:23:59.337]     ...future.rng <- base::globalenv()$.Random.seed
[13:23:59.337]     if (FALSE) {
[13:23:59.337]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:23:59.337]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:23:59.337]     }
[13:23:59.337]     ...future.result <- base::tryCatch({
[13:23:59.337]         base::withCallingHandlers({
[13:23:59.337]             ...future.value <- base::withVisible(base::local({
[13:23:59.337]                 withCallingHandlers({
[13:23:59.337]                   {
[13:23:59.337]                     a <- 1L
[13:23:59.337]                     plan_a <- unclass(future::plan("list"))
[13:23:59.337]                     nested_a <- nested[-1]
[13:23:59.337]                     stopifnot(length(nested_a) == 1L, length(plan_a) == 
[13:23:59.337]                       1L, inherits(plan_a[[1]], "future"), inherits(future::plan("next"), 
[13:23:59.337]                       strategy2))
[13:23:59.337]                     for (kk in seq_along(plan_a)) attr(plan_a[[kk]], 
[13:23:59.337]                       "init") <- NULL
[13:23:59.337]                     for (kk in seq_along(nested_a)) attr(nested_a[[kk]], 
[13:23:59.337]                       "init") <- NULL
[13:23:59.337]                     stopifnot(all.equal(plan_a, nested_a))
[13:23:59.337]                     y %<-% {
[13:23:59.337]                       b <- 2L
[13:23:59.337]                       plan_b <- future::plan("list")
[13:23:59.337]                       nested_b <- nested_a[-1]
[13:23:59.337]                       stopifnot(length(nested_b) == 0L, length(plan_b) == 
[13:23:59.337]                         1L, inherits(plan_b[[1]], "future"), 
[13:23:59.337]                         inherits(future::plan("next"), "sequential"))
[13:23:59.337]                       list(a = a, nested_a = nested_a, plan_a = plan_a, 
[13:23:59.337]                         b = b, nested_b = nested_b, plan_b = plan_b)
[13:23:59.337]                     }
[13:23:59.337]                     y
[13:23:59.337]                   }
[13:23:59.337]                 }, immediateCondition = function(cond) {
[13:23:59.337]                   save_rds <- function (object, pathname, ...) 
[13:23:59.337]                   {
[13:23:59.337]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[13:23:59.337]                     if (file_test("-f", pathname_tmp)) {
[13:23:59.337]                       fi_tmp <- file.info(pathname_tmp)
[13:23:59.337]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[13:23:59.337]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:23:59.337]                         fi_tmp[["mtime"]])
[13:23:59.337]                     }
[13:23:59.337]                     tryCatch({
[13:23:59.337]                       saveRDS(object, file = pathname_tmp, ...)
[13:23:59.337]                     }, error = function(ex) {
[13:23:59.337]                       msg <- conditionMessage(ex)
[13:23:59.337]                       fi_tmp <- file.info(pathname_tmp)
[13:23:59.337]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[13:23:59.337]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:23:59.337]                         fi_tmp[["mtime"]], msg)
[13:23:59.337]                       ex$message <- msg
[13:23:59.337]                       stop(ex)
[13:23:59.337]                     })
[13:23:59.337]                     stopifnot(file_test("-f", pathname_tmp))
[13:23:59.337]                     res <- file.rename(from = pathname_tmp, to = pathname)
[13:23:59.337]                     if (!res || file_test("-f", pathname_tmp)) {
[13:23:59.337]                       fi_tmp <- file.info(pathname_tmp)
[13:23:59.337]                       fi <- file.info(pathname)
[13:23:59.337]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[13:23:59.337]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:23:59.337]                         fi_tmp[["mtime"]], sQuote(pathname), 
[13:23:59.337]                         fi[["size"]], fi[["mtime"]])
[13:23:59.337]                       stop(msg)
[13:23:59.337]                     }
[13:23:59.337]                     invisible(pathname)
[13:23:59.337]                   }
[13:23:59.337]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[13:23:59.337]                     rootPath = tempdir()) 
[13:23:59.337]                   {
[13:23:59.337]                     obj <- list(time = Sys.time(), condition = cond)
[13:23:59.337]                     file <- tempfile(pattern = class(cond)[1], 
[13:23:59.337]                       tmpdir = path, fileext = ".rds")
[13:23:59.337]                     save_rds(obj, file)
[13:23:59.337]                   }
[13:23:59.337]                   saveImmediateCondition(cond, path = "/tmp/RtmpKOlrlL/.future/immediateConditions")
[13:23:59.337]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:23:59.337]                   {
[13:23:59.337]                     inherits <- base::inherits
[13:23:59.337]                     invokeRestart <- base::invokeRestart
[13:23:59.337]                     is.null <- base::is.null
[13:23:59.337]                     muffled <- FALSE
[13:23:59.337]                     if (inherits(cond, "message")) {
[13:23:59.337]                       muffled <- grepl(pattern, "muffleMessage")
[13:23:59.337]                       if (muffled) 
[13:23:59.337]                         invokeRestart("muffleMessage")
[13:23:59.337]                     }
[13:23:59.337]                     else if (inherits(cond, "warning")) {
[13:23:59.337]                       muffled <- grepl(pattern, "muffleWarning")
[13:23:59.337]                       if (muffled) 
[13:23:59.337]                         invokeRestart("muffleWarning")
[13:23:59.337]                     }
[13:23:59.337]                     else if (inherits(cond, "condition")) {
[13:23:59.337]                       if (!is.null(pattern)) {
[13:23:59.337]                         computeRestarts <- base::computeRestarts
[13:23:59.337]                         grepl <- base::grepl
[13:23:59.337]                         restarts <- computeRestarts(cond)
[13:23:59.337]                         for (restart in restarts) {
[13:23:59.337]                           name <- restart$name
[13:23:59.337]                           if (is.null(name)) 
[13:23:59.337]                             next
[13:23:59.337]                           if (!grepl(pattern, name)) 
[13:23:59.337]                             next
[13:23:59.337]                           invokeRestart(restart)
[13:23:59.337]                           muffled <- TRUE
[13:23:59.337]                           break
[13:23:59.337]                         }
[13:23:59.337]                       }
[13:23:59.337]                     }
[13:23:59.337]                     invisible(muffled)
[13:23:59.337]                   }
[13:23:59.337]                   muffleCondition(cond)
[13:23:59.337]                 })
[13:23:59.337]             }))
[13:23:59.337]             future::FutureResult(value = ...future.value$value, 
[13:23:59.337]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:23:59.337]                   ...future.rng), globalenv = if (FALSE) 
[13:23:59.337]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:23:59.337]                     ...future.globalenv.names))
[13:23:59.337]                 else NULL, started = ...future.startTime, version = "1.8")
[13:23:59.337]         }, condition = base::local({
[13:23:59.337]             c <- base::c
[13:23:59.337]             inherits <- base::inherits
[13:23:59.337]             invokeRestart <- base::invokeRestart
[13:23:59.337]             length <- base::length
[13:23:59.337]             list <- base::list
[13:23:59.337]             seq.int <- base::seq.int
[13:23:59.337]             signalCondition <- base::signalCondition
[13:23:59.337]             sys.calls <- base::sys.calls
[13:23:59.337]             `[[` <- base::`[[`
[13:23:59.337]             `+` <- base::`+`
[13:23:59.337]             `<<-` <- base::`<<-`
[13:23:59.337]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:23:59.337]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:23:59.337]                   3L)]
[13:23:59.337]             }
[13:23:59.337]             function(cond) {
[13:23:59.337]                 is_error <- inherits(cond, "error")
[13:23:59.337]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:23:59.337]                   NULL)
[13:23:59.337]                 if (is_error) {
[13:23:59.337]                   sessionInformation <- function() {
[13:23:59.337]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:23:59.337]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:23:59.337]                       search = base::search(), system = base::Sys.info())
[13:23:59.337]                   }
[13:23:59.337]                   ...future.conditions[[length(...future.conditions) + 
[13:23:59.337]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:23:59.337]                     cond$call), session = sessionInformation(), 
[13:23:59.337]                     timestamp = base::Sys.time(), signaled = 0L)
[13:23:59.337]                   signalCondition(cond)
[13:23:59.337]                 }
[13:23:59.337]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:23:59.337]                 "immediateCondition"))) {
[13:23:59.337]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:23:59.337]                   ...future.conditions[[length(...future.conditions) + 
[13:23:59.337]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:23:59.337]                   if (TRUE && !signal) {
[13:23:59.337]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:23:59.337]                     {
[13:23:59.337]                       inherits <- base::inherits
[13:23:59.337]                       invokeRestart <- base::invokeRestart
[13:23:59.337]                       is.null <- base::is.null
[13:23:59.337]                       muffled <- FALSE
[13:23:59.337]                       if (inherits(cond, "message")) {
[13:23:59.337]                         muffled <- grepl(pattern, "muffleMessage")
[13:23:59.337]                         if (muffled) 
[13:23:59.337]                           invokeRestart("muffleMessage")
[13:23:59.337]                       }
[13:23:59.337]                       else if (inherits(cond, "warning")) {
[13:23:59.337]                         muffled <- grepl(pattern, "muffleWarning")
[13:23:59.337]                         if (muffled) 
[13:23:59.337]                           invokeRestart("muffleWarning")
[13:23:59.337]                       }
[13:23:59.337]                       else if (inherits(cond, "condition")) {
[13:23:59.337]                         if (!is.null(pattern)) {
[13:23:59.337]                           computeRestarts <- base::computeRestarts
[13:23:59.337]                           grepl <- base::grepl
[13:23:59.337]                           restarts <- computeRestarts(cond)
[13:23:59.337]                           for (restart in restarts) {
[13:23:59.337]                             name <- restart$name
[13:23:59.337]                             if (is.null(name)) 
[13:23:59.337]                               next
[13:23:59.337]                             if (!grepl(pattern, name)) 
[13:23:59.337]                               next
[13:23:59.337]                             invokeRestart(restart)
[13:23:59.337]                             muffled <- TRUE
[13:23:59.337]                             break
[13:23:59.337]                           }
[13:23:59.337]                         }
[13:23:59.337]                       }
[13:23:59.337]                       invisible(muffled)
[13:23:59.337]                     }
[13:23:59.337]                     muffleCondition(cond, pattern = "^muffle")
[13:23:59.337]                   }
[13:23:59.337]                 }
[13:23:59.337]                 else {
[13:23:59.337]                   if (TRUE) {
[13:23:59.337]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:23:59.337]                     {
[13:23:59.337]                       inherits <- base::inherits
[13:23:59.337]                       invokeRestart <- base::invokeRestart
[13:23:59.337]                       is.null <- base::is.null
[13:23:59.337]                       muffled <- FALSE
[13:23:59.337]                       if (inherits(cond, "message")) {
[13:23:59.337]                         muffled <- grepl(pattern, "muffleMessage")
[13:23:59.337]                         if (muffled) 
[13:23:59.337]                           invokeRestart("muffleMessage")
[13:23:59.337]                       }
[13:23:59.337]                       else if (inherits(cond, "warning")) {
[13:23:59.337]                         muffled <- grepl(pattern, "muffleWarning")
[13:23:59.337]                         if (muffled) 
[13:23:59.337]                           invokeRestart("muffleWarning")
[13:23:59.337]                       }
[13:23:59.337]                       else if (inherits(cond, "condition")) {
[13:23:59.337]                         if (!is.null(pattern)) {
[13:23:59.337]                           computeRestarts <- base::computeRestarts
[13:23:59.337]                           grepl <- base::grepl
[13:23:59.337]                           restarts <- computeRestarts(cond)
[13:23:59.337]                           for (restart in restarts) {
[13:23:59.337]                             name <- restart$name
[13:23:59.337]                             if (is.null(name)) 
[13:23:59.337]                               next
[13:23:59.337]                             if (!grepl(pattern, name)) 
[13:23:59.337]                               next
[13:23:59.337]                             invokeRestart(restart)
[13:23:59.337]                             muffled <- TRUE
[13:23:59.337]                             break
[13:23:59.337]                           }
[13:23:59.337]                         }
[13:23:59.337]                       }
[13:23:59.337]                       invisible(muffled)
[13:23:59.337]                     }
[13:23:59.337]                     muffleCondition(cond, pattern = "^muffle")
[13:23:59.337]                   }
[13:23:59.337]                 }
[13:23:59.337]             }
[13:23:59.337]         }))
[13:23:59.337]     }, error = function(ex) {
[13:23:59.337]         base::structure(base::list(value = NULL, visible = NULL, 
[13:23:59.337]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:23:59.337]                 ...future.rng), started = ...future.startTime, 
[13:23:59.337]             finished = Sys.time(), session_uuid = NA_character_, 
[13:23:59.337]             version = "1.8"), class = "FutureResult")
[13:23:59.337]     }, finally = {
[13:23:59.337]         if (!identical(...future.workdir, getwd())) 
[13:23:59.337]             setwd(...future.workdir)
[13:23:59.337]         {
[13:23:59.337]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:23:59.337]                 ...future.oldOptions$nwarnings <- NULL
[13:23:59.337]             }
[13:23:59.337]             base::options(...future.oldOptions)
[13:23:59.337]             if (.Platform$OS.type == "windows") {
[13:23:59.337]                 old_names <- names(...future.oldEnvVars)
[13:23:59.337]                 envs <- base::Sys.getenv()
[13:23:59.337]                 names <- names(envs)
[13:23:59.337]                 common <- intersect(names, old_names)
[13:23:59.337]                 added <- setdiff(names, old_names)
[13:23:59.337]                 removed <- setdiff(old_names, names)
[13:23:59.337]                 changed <- common[...future.oldEnvVars[common] != 
[13:23:59.337]                   envs[common]]
[13:23:59.337]                 NAMES <- toupper(changed)
[13:23:59.337]                 args <- list()
[13:23:59.337]                 for (kk in seq_along(NAMES)) {
[13:23:59.337]                   name <- changed[[kk]]
[13:23:59.337]                   NAME <- NAMES[[kk]]
[13:23:59.337]                   if (name != NAME && is.element(NAME, old_names)) 
[13:23:59.337]                     next
[13:23:59.337]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:23:59.337]                 }
[13:23:59.337]                 NAMES <- toupper(added)
[13:23:59.337]                 for (kk in seq_along(NAMES)) {
[13:23:59.337]                   name <- added[[kk]]
[13:23:59.337]                   NAME <- NAMES[[kk]]
[13:23:59.337]                   if (name != NAME && is.element(NAME, old_names)) 
[13:23:59.337]                     next
[13:23:59.337]                   args[[name]] <- ""
[13:23:59.337]                 }
[13:23:59.337]                 NAMES <- toupper(removed)
[13:23:59.337]                 for (kk in seq_along(NAMES)) {
[13:23:59.337]                   name <- removed[[kk]]
[13:23:59.337]                   NAME <- NAMES[[kk]]
[13:23:59.337]                   if (name != NAME && is.element(NAME, old_names)) 
[13:23:59.337]                     next
[13:23:59.337]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:23:59.337]                 }
[13:23:59.337]                 if (length(args) > 0) 
[13:23:59.337]                   base::do.call(base::Sys.setenv, args = args)
[13:23:59.337]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:23:59.337]             }
[13:23:59.337]             else {
[13:23:59.337]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:23:59.337]             }
[13:23:59.337]             {
[13:23:59.337]                 if (base::length(...future.futureOptionsAdded) > 
[13:23:59.337]                   0L) {
[13:23:59.337]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:23:59.337]                   base::names(opts) <- ...future.futureOptionsAdded
[13:23:59.337]                   base::options(opts)
[13:23:59.337]                 }
[13:23:59.337]                 {
[13:23:59.337]                   {
[13:23:59.337]                     base::options(mc.cores = ...future.mc.cores.old)
[13:23:59.337]                     NULL
[13:23:59.337]                   }
[13:23:59.337]                   options(future.plan = NULL)
[13:23:59.337]                   if (is.na(NA_character_)) 
[13:23:59.337]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:23:59.337]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:23:59.337]                   future::plan(list(a = function (..., workers = availableCores(constraints = "multicore"), 
[13:23:59.337]                     envir = parent.frame()) 
[13:23:59.337]                   {
[13:23:59.337]                     default_workers <- missing(workers)
[13:23:59.337]                     if (is.function(workers)) 
[13:23:59.337]                       workers <- workers()
[13:23:59.337]                     workers <- structure(as.integer(workers), 
[13:23:59.337]                       class = class(workers))
[13:23:59.337]                     stop_if_not(is.finite(workers), workers >= 
[13:23:59.337]                       1L)
[13:23:59.337]                     if ((workers == 1L && !inherits(workers, 
[13:23:59.337]                       "AsIs")) || !supportsMulticore(warn = TRUE)) {
[13:23:59.337]                       if (default_workers) 
[13:23:59.337]                         supportsMulticore(warn = TRUE)
[13:23:59.337]                       return(sequential(..., envir = envir))
[13:23:59.337]                     }
[13:23:59.337]                     oopts <- options(mc.cores = workers)
[13:23:59.337]                     on.exit(options(oopts))
[13:23:59.337]                     future <- MulticoreFuture(..., workers = workers, 
[13:23:59.337]                       envir = envir)
[13:23:59.337]                     if (!future$lazy) 
[13:23:59.337]                       future <- run(future)
[13:23:59.337]                     invisible(future)
[13:23:59.337]                   }, b = function (..., workers = availableCores(constraints = "multicore"), 
[13:23:59.337]                     envir = parent.frame()) 
[13:23:59.337]                   {
[13:23:59.337]                     default_workers <- missing(workers)
[13:23:59.337]                     if (is.function(workers)) 
[13:23:59.337]                       workers <- workers()
[13:23:59.337]                     workers <- structure(as.integer(workers), 
[13:23:59.337]                       class = class(workers))
[13:23:59.337]                     stop_if_not(is.finite(workers), workers >= 
[13:23:59.337]                       1L)
[13:23:59.337]                     if ((workers == 1L && !inherits(workers, 
[13:23:59.337]                       "AsIs")) || !supportsMulticore(warn = TRUE)) {
[13:23:59.337]                       if (default_workers) 
[13:23:59.337]                         supportsMulticore(warn = TRUE)
[13:23:59.337]                       return(sequential(..., envir = envir))
[13:23:59.337]                     }
[13:23:59.337]                     oopts <- options(mc.cores = workers)
[13:23:59.337]                     on.exit(options(oopts))
[13:23:59.337]                     future <- MulticoreFuture(..., workers = workers, 
[13:23:59.337]                       envir = envir)
[13:23:59.337]                     if (!future$lazy) 
[13:23:59.337]                       future <- run(future)
[13:23:59.337]                     invisible(future)
[13:23:59.337]                   }), .cleanup = FALSE, .init = FALSE)
[13:23:59.337]                 }
[13:23:59.337]             }
[13:23:59.337]         }
[13:23:59.337]     })
[13:23:59.337]     if (TRUE) {
[13:23:59.337]         base::sink(type = "output", split = FALSE)
[13:23:59.337]         if (TRUE) {
[13:23:59.337]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:23:59.337]         }
[13:23:59.337]         else {
[13:23:59.337]             ...future.result["stdout"] <- base::list(NULL)
[13:23:59.337]         }
[13:23:59.337]         base::close(...future.stdout)
[13:23:59.337]         ...future.stdout <- NULL
[13:23:59.337]     }
[13:23:59.337]     ...future.result$conditions <- ...future.conditions
[13:23:59.337]     ...future.result$finished <- base::Sys.time()
[13:23:59.337]     ...future.result
[13:23:59.337] }
[13:23:59.340] assign_globals() ...
[13:23:59.340] List of 2
[13:23:59.340]  $ nested   :List of 2
[13:23:59.340]   ..$ a:function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())  
[13:23:59.340]   .. ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[13:23:59.340]   .. ..- attr(*, "call")= language plan(list(a = strategy1, b = strategy2))
[13:23:59.340]   ..$ b:function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())  
[13:23:59.340]   .. ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[13:23:59.340]   .. ..- attr(*, "call")= language plan(list(a = strategy1, b = strategy2))
[13:23:59.340]   ..- attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[13:23:59.340]  $ strategy2: chr "multicore"
[13:23:59.340]  - attr(*, "where")=List of 2
[13:23:59.340]   ..$ nested   :<environment: R_EmptyEnv> 
[13:23:59.340]   ..$ strategy2:<environment: R_EmptyEnv> 
[13:23:59.340]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[13:23:59.340]  - attr(*, "resolved")= logi FALSE
[13:23:59.340]  - attr(*, "total_size")= num 95304
[13:23:59.340]  - attr(*, "already-done")= logi TRUE
[13:23:59.346] - copied ‘nested’ to environment
[13:23:59.346] - copied ‘strategy2’ to environment
[13:23:59.346] assign_globals() ... done
[13:23:59.346] requestCore(): workers = 2
[13:23:59.349] MulticoreFuture started
[13:23:59.350] - Launch lazy future ... done
[13:23:59.350] run() for ‘MulticoreFuture’ ... done
[13:23:59.350] result() for MulticoreFuture ...
[13:23:59.351] plan(): Setting new future strategy stack:
[13:23:59.351] List of future strategies:
[13:23:59.351] 1. multicore:
[13:23:59.351]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[13:23:59.351]    - tweaked: FALSE
[13:23:59.351]    - call: plan(list(a = strategy1, b = strategy2))
[13:23:59.357] plan(): nbrOfWorkers() = 1
[13:23:59.398] plan(): Setting new future strategy stack:
[13:23:59.398] List of future strategies:
[13:23:59.398] 1. multicore:
[13:23:59.398]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[13:23:59.398]    - tweaked: FALSE
[13:23:59.398]    - call: plan(list(a = strategy1, b = strategy2))
[13:23:59.398] 2. multicore:
[13:23:59.398]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[13:23:59.398]    - tweaked: FALSE
[13:23:59.398]    - call: plan(list(a = strategy1, b = strategy2))
[13:23:59.402] plan(): nbrOfWorkers() = 2
[13:23:59.404] result() for MulticoreFuture ...
[13:23:59.404] result() for MulticoreFuture ... done
[13:23:59.404] signalConditions() ...
[13:23:59.404]  - include = ‘immediateCondition’
[13:23:59.405]  - exclude = 
[13:23:59.405]  - resignal = FALSE
[13:23:59.405]  - Number of conditions: 54
[13:23:59.405] signalConditions() ... done
[13:23:59.405] result() for MulticoreFuture ... done
[13:23:59.405] result() for MulticoreFuture ...
[13:23:59.406] result() for MulticoreFuture ... done
[13:23:59.406] signalConditions() ...
[13:23:59.406]  - include = ‘immediateCondition’
[13:23:59.406]  - exclude = 
[13:23:59.406]  - resignal = FALSE
[13:23:59.406]  - Number of conditions: 54
[13:23:59.406] signalConditions() ... done
[13:23:59.406] Future state: ‘finished’
[13:23:59.407] result() for MulticoreFuture ...
[13:23:59.407] result() for MulticoreFuture ... done
[13:23:59.407] signalConditions() ...
[13:23:59.407]  - include = ‘condition’
[13:23:59.407]  - exclude = ‘immediateCondition’
[13:23:59.407]  - resignal = TRUE
[13:23:59.407]  - Number of conditions: 54
[13:23:59.407]  - Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:59.359] getGlobalsAndPackages() ...
[13:23:59.408]  - Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:59.359] Searching for globals...
[13:23:59.408]  - Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:59.367] - globals found: [14] ‘{’, ‘<-’, ‘::’, ‘[’, ‘nested_a’, ‘-’, ‘stopifnot’, ‘==’, ‘length’, ‘inherits’, ‘[[’, ‘list’, ‘a’, ‘plan_a’
[13:23:59.408]  - Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:59.368] Searching for globals ... DONE
[13:23:59.408]  - Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:59.368] Resolving globals: FALSE
[13:23:59.408]  - Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:59.369] The total size of the 3 globals is 93.01 KiB (95240 bytes)
[13:23:59.408]  - Condition #7: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:59.370] The total size of the 3 globals exported for future expression (‘{; b <- 2L; plan_b <- future::plan("list"); nested_b <- nested_a[-1]; stopifnot(length(nested_b) == 0L, length(plan_b) == 1L, inherits(plan_b[[1]],; "future"), inherits(future::plan("next"), "sequential")); list(a = a, nested_a = nested_a, plan_a = plan_a, b = b,; nested_b = nested_b, plan_b = plan_b); }’) is 93.01 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are three globals: ‘nested_a’ (46.48 KiB of class ‘list’), ‘plan_a’ (46.48 KiB of class ‘list’) and ‘a’ (56 bytes of class ‘numeric’)
[13:23:59.409]  - Condition #8: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:59.370] - globals: [3] ‘nested_a’, ‘a’, ‘plan_a’
[13:23:59.409]  - Condition #9: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:59.370] 
[13:23:59.409]  - Condition #10: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:59.370] getGlobalsAndPackages() ... DONE
[13:23:59.409]  - Condition #11: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:59.371] run() for ‘Future’ ...
[13:23:59.409]  - Condition #12: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:59.371] - state: ‘created’
[13:23:59.409]  - Condition #13: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:59.371] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[13:23:59.410]  - Condition #14: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:59.375] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[13:23:59.410]  - Condition #15: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:59.376] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[13:23:59.410]  - Condition #16: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:59.376]   - Field: ‘label’
[13:23:59.410]  - Condition #17: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:59.376]   - Field: ‘local’
[13:23:59.410]  - Condition #18: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:59.376]   - Field: ‘owner’
[13:23:59.410]  - Condition #19: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:59.376]   - Field: ‘envir’
[13:23:59.411]  - Condition #20: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:59.376]   - Field: ‘packages’
[13:23:59.411]  - Condition #21: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:59.377]   - Field: ‘gc’
[13:23:59.411]  - Condition #22: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:59.377]   - Field: ‘conditions’
[13:23:59.411]  - Condition #23: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:59.377]   - Field: ‘expr’
[13:23:59.411]  - Condition #24: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:59.377]   - Field: ‘uuid’
[13:23:59.411]  - Condition #25: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:59.377]   - Field: ‘seed’
[13:23:59.411]  - Condition #26: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:59.377]   - Field: ‘version’
[13:23:59.412]  - Condition #27: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:59.378]   - Field: ‘result’
[13:23:59.412]  - Condition #28: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:59.378]   - Field: ‘asynchronous’
[13:23:59.412]  - Condition #29: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:59.378]   - Field: ‘calls’
[13:23:59.412]  - Condition #30: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:59.378]   - Field: ‘globals’
[13:23:59.412]  - Condition #31: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:59.378]   - Field: ‘stdout’
[13:23:59.412]  - Condition #32: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:59.378]   - Field: ‘earlySignal’
[13:23:59.413]  - Condition #33: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:59.378]   - Field: ‘lazy’
[13:23:59.413]  - Condition #34: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:59.379]   - Field: ‘state’
[13:23:59.413]  - Condition #35: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:59.379] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[13:23:59.413]  - Condition #36: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:59.379] - Launch lazy future ...
[13:23:59.413]  - Condition #37: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:59.379] Packages needed by the future expression (n = 0): <none>
[13:23:59.413]  - Condition #38: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:59.380] Packages needed by future strategies (n = 0): <none>
[13:23:59.414]  - Condition #39: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:59.380] {
[13:23:59.380]     {
[13:23:59.380]         {
[13:23:59.380]             ...future.startTime <- base::Sys.time()
[13:23:59.380]             {
[13:23:59.380]                 {
[13:23:59.380]                   {
[13:23:59.380]                     base::local({
[13:23:59.380]                       has_future <- base::requireNamespace("future", 
[13:23:59.380]                         quietly = TRUE)
[13:23:59.380]                       if (has_future) {
[13:23:59.380]                         ns <- base::getNamespace("future")
[13:23:59.380]                         version <- ns[[".package"]][["version"]]
[13:23:59.380]                         if (is.null(version)) 
[13:23:59.380]                           version <- utils::packageVersion("future")
[13:23:59.380]                       }
[13:23:59.380]                       else {
[13:23:59.380]                         version <- NULL
[13:23:59.380]                       }
[13:23:59.380]                       if (!has_future || version < "1.8.0") {
[13:23:59.380]                         info <- base::c(r_version = base::gsub("R version ", 
[13:23:59.380]                           "", base::R.version$version.string), 
[13:23:59.380]                           platform = base::sprintf("%s (%s-bit)", 
[13:23:59.380]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:23:59.380]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[13:23:59.380]                             "release", "version")], collapse = " "), 
[13:23:59.380]                           hostname = base::Sys.info()[["nodename"]])
[13:23:59.380]                         info <- base::sprintf("%s: %s", base::names(info), 
[13:23:59.380]                           info)
[13:23:59.380]                         info <- base::paste(info, collapse = "; ")
[13:23:59.380]                         if (!has_future) {
[13:23:59.380]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:23:59.380]                             info)
[13:23:59.380]                         }
[13:23:59.380]                         else {
[13:23:59.380]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:23:59.380]                             info, version)
[13:23:59.380]                         }
[13:23:59.380]                         base::stop(msg)
[13:23:59.380]                       }
[13:23:59.380]                     })
[13:23:59.380]                   }
[13:23:59.380]                   options(future.plan = NULL)
[13:23:59.380]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:23:59.380]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:23:59.380]                 }
[13:23:59.380]                 ...future.workdir <- getwd()
[13:23:59.380]             }
[13:23:59.380]             ...future.oldOptions <- base::as.list(base::.Options)
[13:23:59.380]             ...future.oldEnvVars <- base::Sys.getenv()
[13:23:59.380]         }
[13:23:59.380]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:23:59.380]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:23:59.380]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:23:59.380]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:23:59.380]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:23:59.380]             future.stdout.windows.reencode = NULL, width = 80L)
[13:23:59.380]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:23:59.380]             base::names(...future.oldOptions))
[13:23:59.380]     }
[13:23:59.380]     if (FALSE) {
[13:23:59.380]     }
[13:23:59.380]     else {
[13:23:59.380]         if (TRUE) {
[13:23:59.380]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:23:59.380]                 open = "w")
[13:23:59.380]         }
[13:23:59.380]         else {
[13:23:59.380]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:23:59.380]                 windows = "NUL", "/dev/null"), open = "w")
[13:23:59.380]         }
[13:23:59.380]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:23:59.380]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:23:59.380]             base::sink(type = "output", split = FALSE)
[13:23:59.380]             base::close(...future.stdout)
[13:23:59.380]         }, add = TRUE)
[13:23:59.380]     }
[13:23:59.380]     ...future.frame <- base::sys.nframe()
[13:23:59.380]     ...future.conditions <- base::list()
[13:23:59.380]     ...future.rng <- base::globalenv()$.Random.seed
[13:23:59.380]     if (FALSE) {
[13:23:59.380]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:23:59.380]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:23:59.380]     }
[13:23:59.380]     ...future.result <- base::tryCatch({
[13:23:59.380]         base::withCallingHandlers({
[13:23:59.380]             ...future.value <- base::withVisible(base::local({
[13:23:59.380]                 b <- 2L
[13:23:59.380]                 plan_b <- future::plan("list")
[13:23:59.380]                 nested_b <- nested_a[-1]
[13:23:59.380]                 stopifnot(length(nested_b) == 0L, length(plan_b) == 
[13:23:59.380]                   1L, inherits(plan_b[[1]], "future"), inherits(future::plan("next"), 
[13:23:59.380]                   "sequential"))
[13:23:59.380]                 list(a = a, nested_a = nested_a, plan_a = plan_a, 
[13:23:59.380]                   b = b, nested_b = nested_b, plan_b = plan_b)
[13:23:59.380]             }))
[13:23:59.380]             future::FutureResult(value = ...future.value$value, 
[13:23:59.380]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:23:59.380]                   ...future.rng), globalenv = if (FALSE) 
[13:23:59.380]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:23:59.380]                     ...future.globalenv.names))
[13:23:59.380]                 else NULL, started = ...future.startTime, version = "1.8")
[13:23:59.380]         }, condition = base::local({
[13:23:59.380]             c <- base::c
[13:23:59.380]             inherits <- base::inherits
[13:23:59.380]             invokeRestart <- base::invokeRestart
[13:23:59.380]             length <- base::length
[13:23:59.380]             list <- base::list
[13:23:59.380]             seq.int <- base::seq.int
[13:23:59.380]             signalCondition <- base::signalCondition
[13:23:59.380]             sys.calls <- base::sys.calls
[13:23:59.380]             `[[` <- base::`[[`
[13:23:59.380]             `+` <- base::`+`
[13:23:59.380]             `<<-` <- base::`<<-`
[13:23:59.380]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:23:59.380]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:23:59.380]                   3L)]
[13:23:59.380]             }
[13:23:59.380]             function(cond) {
[13:23:59.380]                 is_error <- inherits(cond, "error")
[13:23:59.380]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:23:59.380]                   NULL)
[13:23:59.380]                 if (is_error) {
[13:23:59.380]                   sessionInformation <- function() {
[13:23:59.380]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:23:59.380]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:23:59.380]                       search = base::search(), system = base::Sys.info())
[13:23:59.380]                   }
[13:23:59.380]                   ...future.conditions[[length(...future.conditions) + 
[13:23:59.380]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:23:59.380]                     cond$call), session = sessionInformation(), 
[13:23:59.380]                     timestamp = base::Sys.time(), signaled = 0L)
[13:23:59.380]                   signalCondition(cond)
[13:23:59.380]                 }
[13:23:59.380]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:23:59.380]                 "immediateCondition"))) {
[13:23:59.380]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:23:59.380]                   ...future.conditions[[length(...future.conditions) + 
[13:23:59.380]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:23:59.380]                   if (TRUE && !signal) {
[13:23:59.380]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:23:59.380]                     {
[13:23:59.380]                       inherits <- base::inherits
[13:23:59.380]                       invokeRestart <- base::invokeRestart
[13:23:59.380]                       is.null <- base::is.null
[13:23:59.380]                       muffled <- FALSE
[13:23:59.380]                       if (inherits(cond, "message")) {
[13:23:59.380]                         muffled <- grepl(pattern, "muffleMessage")
[13:23:59.380]                         if (muffled) 
[13:23:59.380]                           invokeRestart("muffleMessage")
[13:23:59.380]                       }
[13:23:59.380]                       else if (inherits(cond, "warning")) {
[13:23:59.380]                         muffled <- grepl(pattern, "muffleWarning")
[13:23:59.380]                         if (muffled) 
[13:23:59.380]                           invokeRestart("muffleWarning")
[13:23:59.380]                       }
[13:23:59.380]                       else if (inherits(cond, "condition")) {
[13:23:59.380]                         if (!is.null(pattern)) {
[13:23:59.380]                           computeRestarts <- base::computeRestarts
[13:23:59.380]                           grepl <- base::grepl
[13:23:59.380]                           restarts <- computeRestarts(cond)
[13:23:59.380]                           for (restart in restarts) {
[13:23:59.380]                             name <- restart$name
[13:23:59.380]                             if (is.null(name)) 
[13:23:59.380]                               next
[13:23:59.380]                             if (!grepl(pattern, name)) 
[13:23:59.380]                               next
[13:23:59.380]                             invokeRestart(restart)
[13:23:59.380]                             muffled <- TRUE
[13:23:59.380]                             break
[13:23:59.380]                           }
[13:23:59.380]                         }
[13:23:59.380]                       }
[13:23:59.380]                       invisible(muffled)
[13:23:59.380]                     }
[13:23:59.380]                     muffleCondition(cond, pattern = "^muffle")
[13:23:59.380]                   }
[13:23:59.380]                 }
[13:23:59.380]                 else {
[13:23:59.380]                   if (TRUE) {
[13:23:59.380]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:23:59.380]                     {
[13:23:59.380]                       inherits <- base::inherits
[13:23:59.380]                       invokeRestart <- base::invokeRestart
[13:23:59.380]                       is.null <- base::is.null
[13:23:59.380]                       muffled <- FALSE
[13:23:59.380]                       if (inherits(cond, "message")) {
[13:23:59.380]                         muffled <- grepl(pattern, "muffleMessage")
[13:23:59.380]                         if (muffled) 
[13:23:59.380]                           invokeRestart("muffleMessage")
[13:23:59.380]                       }
[13:23:59.380]                       else if (inherits(cond, "warning")) {
[13:23:59.380]                         muffled <- grepl(pattern, "muffleWarning")
[13:23:59.380]                         if (muffled) 
[13:23:59.380]                           invokeRestart("muffleWarning")
[13:23:59.380]                       }
[13:23:59.380]                       else if (inherits(cond, "condition")) {
[13:23:59.380]                         if (!is.null(pattern)) {
[13:23:59.380]                           computeRestarts <- base::computeRestarts
[13:23:59.380]                           grepl <- base::grepl
[13:23:59.380]                           restarts <- computeRestarts(cond)
[13:23:59.380]                           for (restart in restarts) {
[13:23:59.380]                             name <- restart$name
[13:23:59.380]                             if (is.null(name)) 
[13:23:59.380]                               next
[13:23:59.380]                             if (!grepl(pattern, name)) 
[13:23:59.380]                               next
[13:23:59.380]                             invokeRestart(restart)
[13:23:59.380]                             muffled <- TRUE
[13:23:59.380]                             break
[13:23:59.380]                           }
[13:23:59.380]                         }
[13:23:59.380]                       }
[13:23:59.380]                       invisible(muffled)
[13:23:59.380]                     }
[13:23:59.380]                     muffleCondition(cond, pattern = "^muffle")
[13:23:59.380]                   }
[13:23:59.380]                 }
[13:23:59.380]             }
[13:23:59.380]         }))
[13:23:59.380]     }, error = function(ex) {
[13:23:59.380]         base::structure(base::list(value = NULL, visible = NULL, 
[13:23:59.380]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:23:59.380]                 ...future.rng), started = ...future.startTime, 
[13:23:59.380]             finished = Sys.time(), session_uuid = NA_character_, 
[13:23:59.380]             version = "1.8"), class = "FutureResult")
[13:23:59.380]     }, finally = {
[13:23:59.380]         if (!identical(...future.workdir, getwd())) 
[13:23:59.380]             setwd(...future.workdir)
[13:23:59.380]         {
[13:23:59.380]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:23:59.380]                 ...future.oldOptions$nwarnings <- NULL
[13:23:59.380]             }
[13:23:59.380]             base::options(...future.oldOptions)
[13:23:59.380]             if (.Platform$OS.type == "windows") {
[13:23:59.380]                 old_names <- names(...future.oldEnvVars)
[13:23:59.380]                 envs <- base::Sys.getenv()
[13:23:59.380]                 names <- names(envs)
[13:23:59.380]                 common <- intersect(names, old_names)
[13:23:59.380]                 added <- setdiff(names, old_names)
[13:23:59.380]                 removed <- setdiff(old_names, names)
[13:23:59.380]                 changed <- common[...future.oldEnvVars[common] != 
[13:23:59.380]                   envs[common]]
[13:23:59.380]                 NAMES <- toupper(changed)
[13:23:59.380]                 args <- list()
[13:23:59.380]                 for (kk in seq_along(NAMES)) {
[13:23:59.380]                   name <- changed[[kk]]
[13:23:59.380]                   NAME <- NAMES[[kk]]
[13:23:59.380]                   if (name != NAME && is.element(NAME, old_names)) 
[13:23:59.380]                     next
[13:23:59.380]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:23:59.380]                 }
[13:23:59.380]                 NAMES <- toupper(added)
[13:23:59.380]                 for (kk in seq_along(NAMES)) {
[13:23:59.380]                   name <- added[[kk]]
[13:23:59.380]                   NAME <- NAMES[[kk]]
[13:23:59.380]                   if (name != NAME && is.element(NAME, old_names)) 
[13:23:59.380]                     next
[13:23:59.380]                   args[[name]] <- ""
[13:23:59.380]                 }
[13:23:59.380]                 NAMES <- toupper(removed)
[13:23:59.380]                 for (kk in seq_along(NAMES)) {
[13:23:59.380]                   name <- removed[[kk]]
[13:23:59.380]                   NAME <- NAMES[[kk]]
[13:23:59.380]                   if (name != NAME && is.element(NAME, old_names)) 
[13:23:59.380]                     next
[13:23:59.380]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:23:59.380]                 }
[13:23:59.380]                 if (length(args) > 0) 
[13:23:59.380]                   base::do.call(base::Sys.setenv, args = args)
[13:23:59.380]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:23:59.380]             }
[13:23:59.380]             else {
[13:23:59.380]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:23:59.380]             }
[13:23:59.380]             {
[13:23:59.380]                 if (base::length(...future.futureOptionsAdded) > 
[13:23:59.380]                   0L) {
[13:23:59.380]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:23:59.380]                   base::names(opts) <- ...future.futureOptionsAdded
[13:23:59.380]                   base::options(opts)
[13:23:59.380]                 }
[13:23:59.380]                 {
[13:23:59.380]                   {
[13:23:59.380]                     NULL
[13:23:59.380]                     RNGkind("Mersenne-Twister")
[13:23:59.380]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[13:23:59.380]                       inherits = FALSE)
[13:23:59.380]                   }
[13:23:59.380]                   options(future.plan = NULL)
[13:23:59.380]                   if (is.na(NA_character_)) 
[13:23:59.380]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:23:59.380]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:23:59.380]                   future::plan(list(b = function (..., workers = availableCores(constraints = "multicore"), 
[13:23:59.380]                     envir = parent.frame()) 
[13:23:59.380]                   {
[13:23:59.380]                     default_workers <- missing(workers)
[13:23:59.380]                     if (is.function(workers)) 
[13:23:59.380]                       workers <- workers()
[13:23:59.380]                     workers <- structure(as.integer(workers), 
[13:23:59.380]                       class = class(workers))
[13:23:59.380]                     stop_if_not(is.finite(workers), workers >= 
[13:23:59.380]                       1L)
[13:23:59.380]                     if ((workers == 1L && !inherits(workers, 
[13:23:59.380]                       "AsIs")) || !supportsMulticore(warn = TRUE)) {
[13:23:59.380]                       if (default_workers) 
[13:23:59.380]                         supportsMulticore(warn = TRUE)
[13:23:59.380]                       return(sequential(..., envir = envir))
[13:23:59.380]                     }
[13:23:59.380]                     oopts <- options(mc.cores = workers)
[13:23:59.380]                     on.exit(options(oopts))
[13:23:59.380]                     future <- MulticoreFuture(..., workers = workers, 
[13:23:59.380]                       envir = envir)
[13:23:59.380]                     if (!future$lazy) 
[13:23:59.380]                       future <- run(future)
[13:23:59.380]                     invisible(future)
[13:23:59.380]                   }), .cleanup = FALSE, .init = FALSE)
[13:23:59.380]                 }
[13:23:59.380]             }
[13:23:59.380]         }
[13:23:59.380]     })
[13:23:59.380]     if (TRUE) {
[13:23:59.380]         base::sink(type = "output", split = FALSE)
[13:23:59.380]         if (TRUE) {
[13:23:59.380]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:23:59.380]         }
[13:23:59.380]         else {
[13:23:59.380]             ...future.result["stdout"] <- base::list(NULL)
[13:23:59.380]         }
[13:23:59.380]         base::close(...future.stdout)
[13:23:59.380]         ...future.stdout <- NULL
[13:23:59.380]     }
[13:23:59.380]     ...future.result$conditions <- ...future.conditions
[13:23:59.380]     ...future.result$finished <- base::Sys.time()
[13:23:59.380]     ...future.result
[13:23:59.380] }
[13:23:59.414]  - Condition #40: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:59.383] assign_globals() ...
[13:23:59.414]  - Condition #41: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:59.383] List of 3
[13:23:59.383]  $ nested_a:List of 1
[13:23:59.383]   ..$ b:function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())  
[13:23:59.383]   .. ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[13:23:59.383]   .. ..- attr(*, "call")= language plan(list(a = strategy1, b = strategy2))
[13:23:59.383]  $ a       : int 1
[13:23:59.383]  $ plan_a  :List of 1
[13:23:59.383]   ..$ b:function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())  
[13:23:59.383]   .. ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[13:23:59.383]   .. ..- attr(*, "call")= language plan(list(a = strategy1, b = strategy2))
[13:23:59.383]  - attr(*, "where")=List of 3
[13:23:59.383]   ..$ nested_a:<environment: R_EmptyEnv> 
[13:23:59.383]   ..$ a       :<environment: R_EmptyEnv> 
[13:23:59.383]   ..$ plan_a  :<environment: R_EmptyEnv> 
[13:23:59.383]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[13:23:59.383]  - attr(*, "resolved")= logi FALSE
[13:23:59.383]  - attr(*, "total_size")= num 95240
[13:23:59.383]  - attr(*, "already-done")= logi TRUE
[13:23:59.414]  - Condition #42: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:59.390] - copied ‘nested_a’ to environment
[13:23:59.414]  - Condition #43: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:59.390] - copied ‘a’ to environment
[13:23:59.414]  - Condition #44: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:59.390] - copied ‘plan_a’ to environment
[13:23:59.415]  - Condition #45: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:59.391] assign_globals() ... done
[13:23:59.415]  - Condition #46: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:59.391] plan(): Setting new future strategy stack:
[13:23:59.415]  - Condition #47: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:59.391] List of future strategies:
[13:23:59.391] 1. sequential:
[13:23:59.391]    - args: function (..., envir = parent.frame())
[13:23:59.391]    - tweaked: FALSE
[13:23:59.391]    - call: NULL
[13:23:59.415]  - Condition #48: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:59.392] plan(): nbrOfWorkers() = 1
[13:23:59.415]  - Condition #49: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:59.393] plan(): Setting new future strategy stack:
[13:23:59.415]  - Condition #50: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:59.393] List of future strategies:
[13:23:59.393] 1. multicore:
[13:23:59.393]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[13:23:59.393]    - tweaked: FALSE
[13:23:59.393]    - call: plan(list(a = strategy1, b = strategy2))
[13:23:59.416]  - Condition #51: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:59.397] plan(): nbrOfWorkers() = 1
[13:23:59.416]  - Condition #52: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:59.397] SequentialFuture started (and completed)
[13:23:59.416]  - Condition #53: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:59.397] - Launch lazy future ... done
[13:23:59.416]  - Condition #54: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:59.398] run() for ‘SequentialFuture’ ... done
[13:23:59.416] signalConditions() ... done
List of 6
 $ a       : int 1
 $ nested_a:List of 1
  ..$ b:function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())  
  .. ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
  .. ..- attr(*, "call")= language plan(list(a = strategy1, b = strategy2))
 $ plan_a  :List of 1
  ..$ b:function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())  
  .. ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
  .. ..- attr(*, "call")= language plan(list(a = strategy1, b = strategy2))
 $ b       : int 2
 $ nested_b: Named list()
 $ plan_b  :List of 1
  ..$ :function (..., envir = parent.frame())  
  .. ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
  ..- attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[13:23:59.423] getGlobalsAndPackages() ...
[13:23:59.423] Searching for globals...
[13:23:59.424] - globals found: [7] ‘{’, ‘value’, ‘future’, ‘subset’, ‘data’, ‘==’, ‘a’
[13:23:59.425] Searching for globals ... DONE
[13:23:59.425] Resolving globals: FALSE
[13:23:59.426] The total size of the 1 globals is 128 bytes (128 bytes)
[13:23:59.426] The total size of the 1 globals exported for future expression (‘{; value(future(subset(data, a == 2))); }’) is 128 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘data’ (128 bytes of class ‘list’)
[13:23:59.426] - globals: [1] ‘data’
[13:23:59.426] - packages: [1] ‘future’
[13:23:59.426] getGlobalsAndPackages() ... DONE
[13:23:59.427] run() for ‘Future’ ...
[13:23:59.427] - state: ‘created’
[13:23:59.427] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[13:23:59.431] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:23:59.432] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[13:23:59.432]   - Field: ‘label’
[13:23:59.432]   - Field: ‘local’
[13:23:59.432]   - Field: ‘owner’
[13:23:59.432]   - Field: ‘envir’
[13:23:59.432]   - Field: ‘workers’
[13:23:59.432]   - Field: ‘packages’
[13:23:59.433]   - Field: ‘gc’
[13:23:59.433]   - Field: ‘job’
[13:23:59.433]   - Field: ‘conditions’
[13:23:59.433]   - Field: ‘expr’
[13:23:59.433]   - Field: ‘uuid’
[13:23:59.433]   - Field: ‘seed’
[13:23:59.433]   - Field: ‘version’
[13:23:59.433]   - Field: ‘result’
[13:23:59.433]   - Field: ‘asynchronous’
[13:23:59.434]   - Field: ‘calls’
[13:23:59.434]   - Field: ‘globals’
[13:23:59.434]   - Field: ‘stdout’
[13:23:59.434]   - Field: ‘earlySignal’
[13:23:59.434]   - Field: ‘lazy’
[13:23:59.434]   - Field: ‘state’
[13:23:59.434] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[13:23:59.434] - Launch lazy future ...
[13:23:59.435] Packages needed by the future expression (n = 1): ‘future’
[13:23:59.435] Packages needed by future strategies (n = 1): ‘future’
[13:23:59.435] {
[13:23:59.435]     {
[13:23:59.435]         {
[13:23:59.435]             ...future.startTime <- base::Sys.time()
[13:23:59.435]             {
[13:23:59.435]                 {
[13:23:59.435]                   {
[13:23:59.435]                     {
[13:23:59.435]                       {
[13:23:59.435]                         base::local({
[13:23:59.435]                           has_future <- base::requireNamespace("future", 
[13:23:59.435]                             quietly = TRUE)
[13:23:59.435]                           if (has_future) {
[13:23:59.435]                             ns <- base::getNamespace("future")
[13:23:59.435]                             version <- ns[[".package"]][["version"]]
[13:23:59.435]                             if (is.null(version)) 
[13:23:59.435]                               version <- utils::packageVersion("future")
[13:23:59.435]                           }
[13:23:59.435]                           else {
[13:23:59.435]                             version <- NULL
[13:23:59.435]                           }
[13:23:59.435]                           if (!has_future || version < "1.8.0") {
[13:23:59.435]                             info <- base::c(r_version = base::gsub("R version ", 
[13:23:59.435]                               "", base::R.version$version.string), 
[13:23:59.435]                               platform = base::sprintf("%s (%s-bit)", 
[13:23:59.435]                                 base::R.version$platform, 8 * 
[13:23:59.435]                                   base::.Machine$sizeof.pointer), 
[13:23:59.435]                               os = base::paste(base::Sys.info()[base::c("sysname", 
[13:23:59.435]                                 "release", "version")], collapse = " "), 
[13:23:59.435]                               hostname = base::Sys.info()[["nodename"]])
[13:23:59.435]                             info <- base::sprintf("%s: %s", base::names(info), 
[13:23:59.435]                               info)
[13:23:59.435]                             info <- base::paste(info, collapse = "; ")
[13:23:59.435]                             if (!has_future) {
[13:23:59.435]                               msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:23:59.435]                                 info)
[13:23:59.435]                             }
[13:23:59.435]                             else {
[13:23:59.435]                               msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:23:59.435]                                 info, version)
[13:23:59.435]                             }
[13:23:59.435]                             base::stop(msg)
[13:23:59.435]                           }
[13:23:59.435]                         })
[13:23:59.435]                       }
[13:23:59.435]                       ...future.mc.cores.old <- base::getOption("mc.cores")
[13:23:59.435]                       base::options(mc.cores = 1L)
[13:23:59.435]                     }
[13:23:59.435]                     base::local({
[13:23:59.435]                       for (pkg in "future") {
[13:23:59.435]                         base::loadNamespace(pkg)
[13:23:59.435]                         base::library(pkg, character.only = TRUE)
[13:23:59.435]                       }
[13:23:59.435]                     })
[13:23:59.435]                   }
[13:23:59.435]                   options(future.plan = NULL)
[13:23:59.435]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:23:59.435]                   future::plan(list(b = function (..., workers = availableCores(constraints = "multicore"), 
[13:23:59.435]                     envir = parent.frame()) 
[13:23:59.435]                   {
[13:23:59.435]                     default_workers <- missing(workers)
[13:23:59.435]                     if (is.function(workers)) 
[13:23:59.435]                       workers <- workers()
[13:23:59.435]                     workers <- structure(as.integer(workers), 
[13:23:59.435]                       class = class(workers))
[13:23:59.435]                     stop_if_not(is.finite(workers), workers >= 
[13:23:59.435]                       1L)
[13:23:59.435]                     if ((workers == 1L && !inherits(workers, 
[13:23:59.435]                       "AsIs")) || !supportsMulticore(warn = TRUE)) {
[13:23:59.435]                       if (default_workers) 
[13:23:59.435]                         supportsMulticore(warn = TRUE)
[13:23:59.435]                       return(sequential(..., envir = envir))
[13:23:59.435]                     }
[13:23:59.435]                     oopts <- options(mc.cores = workers)
[13:23:59.435]                     on.exit(options(oopts))
[13:23:59.435]                     future <- MulticoreFuture(..., workers = workers, 
[13:23:59.435]                       envir = envir)
[13:23:59.435]                     if (!future$lazy) 
[13:23:59.435]                       future <- run(future)
[13:23:59.435]                     invisible(future)
[13:23:59.435]                   }), .cleanup = FALSE, .init = FALSE)
[13:23:59.435]                 }
[13:23:59.435]                 ...future.workdir <- getwd()
[13:23:59.435]             }
[13:23:59.435]             ...future.oldOptions <- base::as.list(base::.Options)
[13:23:59.435]             ...future.oldEnvVars <- base::Sys.getenv()
[13:23:59.435]         }
[13:23:59.435]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:23:59.435]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:23:59.435]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:23:59.435]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:23:59.435]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:23:59.435]             future.stdout.windows.reencode = NULL, width = 80L)
[13:23:59.435]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:23:59.435]             base::names(...future.oldOptions))
[13:23:59.435]     }
[13:23:59.435]     if (FALSE) {
[13:23:59.435]     }
[13:23:59.435]     else {
[13:23:59.435]         if (TRUE) {
[13:23:59.435]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:23:59.435]                 open = "w")
[13:23:59.435]         }
[13:23:59.435]         else {
[13:23:59.435]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:23:59.435]                 windows = "NUL", "/dev/null"), open = "w")
[13:23:59.435]         }
[13:23:59.435]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:23:59.435]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:23:59.435]             base::sink(type = "output", split = FALSE)
[13:23:59.435]             base::close(...future.stdout)
[13:23:59.435]         }, add = TRUE)
[13:23:59.435]     }
[13:23:59.435]     ...future.frame <- base::sys.nframe()
[13:23:59.435]     ...future.conditions <- base::list()
[13:23:59.435]     ...future.rng <- base::globalenv()$.Random.seed
[13:23:59.435]     if (FALSE) {
[13:23:59.435]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:23:59.435]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:23:59.435]     }
[13:23:59.435]     ...future.result <- base::tryCatch({
[13:23:59.435]         base::withCallingHandlers({
[13:23:59.435]             ...future.value <- base::withVisible(base::local({
[13:23:59.435]                 withCallingHandlers({
[13:23:59.435]                   {
[13:23:59.435]                     value(future(subset(data, a == 2)))
[13:23:59.435]                   }
[13:23:59.435]                 }, immediateCondition = function(cond) {
[13:23:59.435]                   save_rds <- function (object, pathname, ...) 
[13:23:59.435]                   {
[13:23:59.435]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[13:23:59.435]                     if (file_test("-f", pathname_tmp)) {
[13:23:59.435]                       fi_tmp <- file.info(pathname_tmp)
[13:23:59.435]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[13:23:59.435]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:23:59.435]                         fi_tmp[["mtime"]])
[13:23:59.435]                     }
[13:23:59.435]                     tryCatch({
[13:23:59.435]                       saveRDS(object, file = pathname_tmp, ...)
[13:23:59.435]                     }, error = function(ex) {
[13:23:59.435]                       msg <- conditionMessage(ex)
[13:23:59.435]                       fi_tmp <- file.info(pathname_tmp)
[13:23:59.435]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[13:23:59.435]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:23:59.435]                         fi_tmp[["mtime"]], msg)
[13:23:59.435]                       ex$message <- msg
[13:23:59.435]                       stop(ex)
[13:23:59.435]                     })
[13:23:59.435]                     stopifnot(file_test("-f", pathname_tmp))
[13:23:59.435]                     res <- file.rename(from = pathname_tmp, to = pathname)
[13:23:59.435]                     if (!res || file_test("-f", pathname_tmp)) {
[13:23:59.435]                       fi_tmp <- file.info(pathname_tmp)
[13:23:59.435]                       fi <- file.info(pathname)
[13:23:59.435]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[13:23:59.435]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:23:59.435]                         fi_tmp[["mtime"]], sQuote(pathname), 
[13:23:59.435]                         fi[["size"]], fi[["mtime"]])
[13:23:59.435]                       stop(msg)
[13:23:59.435]                     }
[13:23:59.435]                     invisible(pathname)
[13:23:59.435]                   }
[13:23:59.435]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[13:23:59.435]                     rootPath = tempdir()) 
[13:23:59.435]                   {
[13:23:59.435]                     obj <- list(time = Sys.time(), condition = cond)
[13:23:59.435]                     file <- tempfile(pattern = class(cond)[1], 
[13:23:59.435]                       tmpdir = path, fileext = ".rds")
[13:23:59.435]                     save_rds(obj, file)
[13:23:59.435]                   }
[13:23:59.435]                   saveImmediateCondition(cond, path = "/tmp/RtmpKOlrlL/.future/immediateConditions")
[13:23:59.435]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:23:59.435]                   {
[13:23:59.435]                     inherits <- base::inherits
[13:23:59.435]                     invokeRestart <- base::invokeRestart
[13:23:59.435]                     is.null <- base::is.null
[13:23:59.435]                     muffled <- FALSE
[13:23:59.435]                     if (inherits(cond, "message")) {
[13:23:59.435]                       muffled <- grepl(pattern, "muffleMessage")
[13:23:59.435]                       if (muffled) 
[13:23:59.435]                         invokeRestart("muffleMessage")
[13:23:59.435]                     }
[13:23:59.435]                     else if (inherits(cond, "warning")) {
[13:23:59.435]                       muffled <- grepl(pattern, "muffleWarning")
[13:23:59.435]                       if (muffled) 
[13:23:59.435]                         invokeRestart("muffleWarning")
[13:23:59.435]                     }
[13:23:59.435]                     else if (inherits(cond, "condition")) {
[13:23:59.435]                       if (!is.null(pattern)) {
[13:23:59.435]                         computeRestarts <- base::computeRestarts
[13:23:59.435]                         grepl <- base::grepl
[13:23:59.435]                         restarts <- computeRestarts(cond)
[13:23:59.435]                         for (restart in restarts) {
[13:23:59.435]                           name <- restart$name
[13:23:59.435]                           if (is.null(name)) 
[13:23:59.435]                             next
[13:23:59.435]                           if (!grepl(pattern, name)) 
[13:23:59.435]                             next
[13:23:59.435]                           invokeRestart(restart)
[13:23:59.435]                           muffled <- TRUE
[13:23:59.435]                           break
[13:23:59.435]                         }
[13:23:59.435]                       }
[13:23:59.435]                     }
[13:23:59.435]                     invisible(muffled)
[13:23:59.435]                   }
[13:23:59.435]                   muffleCondition(cond)
[13:23:59.435]                 })
[13:23:59.435]             }))
[13:23:59.435]             future::FutureResult(value = ...future.value$value, 
[13:23:59.435]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:23:59.435]                   ...future.rng), globalenv = if (FALSE) 
[13:23:59.435]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:23:59.435]                     ...future.globalenv.names))
[13:23:59.435]                 else NULL, started = ...future.startTime, version = "1.8")
[13:23:59.435]         }, condition = base::local({
[13:23:59.435]             c <- base::c
[13:23:59.435]             inherits <- base::inherits
[13:23:59.435]             invokeRestart <- base::invokeRestart
[13:23:59.435]             length <- base::length
[13:23:59.435]             list <- base::list
[13:23:59.435]             seq.int <- base::seq.int
[13:23:59.435]             signalCondition <- base::signalCondition
[13:23:59.435]             sys.calls <- base::sys.calls
[13:23:59.435]             `[[` <- base::`[[`
[13:23:59.435]             `+` <- base::`+`
[13:23:59.435]             `<<-` <- base::`<<-`
[13:23:59.435]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:23:59.435]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:23:59.435]                   3L)]
[13:23:59.435]             }
[13:23:59.435]             function(cond) {
[13:23:59.435]                 is_error <- inherits(cond, "error")
[13:23:59.435]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:23:59.435]                   NULL)
[13:23:59.435]                 if (is_error) {
[13:23:59.435]                   sessionInformation <- function() {
[13:23:59.435]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:23:59.435]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:23:59.435]                       search = base::search(), system = base::Sys.info())
[13:23:59.435]                   }
[13:23:59.435]                   ...future.conditions[[length(...future.conditions) + 
[13:23:59.435]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:23:59.435]                     cond$call), session = sessionInformation(), 
[13:23:59.435]                     timestamp = base::Sys.time(), signaled = 0L)
[13:23:59.435]                   signalCondition(cond)
[13:23:59.435]                 }
[13:23:59.435]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:23:59.435]                 "immediateCondition"))) {
[13:23:59.435]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:23:59.435]                   ...future.conditions[[length(...future.conditions) + 
[13:23:59.435]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:23:59.435]                   if (TRUE && !signal) {
[13:23:59.435]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:23:59.435]                     {
[13:23:59.435]                       inherits <- base::inherits
[13:23:59.435]                       invokeRestart <- base::invokeRestart
[13:23:59.435]                       is.null <- base::is.null
[13:23:59.435]                       muffled <- FALSE
[13:23:59.435]                       if (inherits(cond, "message")) {
[13:23:59.435]                         muffled <- grepl(pattern, "muffleMessage")
[13:23:59.435]                         if (muffled) 
[13:23:59.435]                           invokeRestart("muffleMessage")
[13:23:59.435]                       }
[13:23:59.435]                       else if (inherits(cond, "warning")) {
[13:23:59.435]                         muffled <- grepl(pattern, "muffleWarning")
[13:23:59.435]                         if (muffled) 
[13:23:59.435]                           invokeRestart("muffleWarning")
[13:23:59.435]                       }
[13:23:59.435]                       else if (inherits(cond, "condition")) {
[13:23:59.435]                         if (!is.null(pattern)) {
[13:23:59.435]                           computeRestarts <- base::computeRestarts
[13:23:59.435]                           grepl <- base::grepl
[13:23:59.435]                           restarts <- computeRestarts(cond)
[13:23:59.435]                           for (restart in restarts) {
[13:23:59.435]                             name <- restart$name
[13:23:59.435]                             if (is.null(name)) 
[13:23:59.435]                               next
[13:23:59.435]                             if (!grepl(pattern, name)) 
[13:23:59.435]                               next
[13:23:59.435]                             invokeRestart(restart)
[13:23:59.435]                             muffled <- TRUE
[13:23:59.435]                             break
[13:23:59.435]                           }
[13:23:59.435]                         }
[13:23:59.435]                       }
[13:23:59.435]                       invisible(muffled)
[13:23:59.435]                     }
[13:23:59.435]                     muffleCondition(cond, pattern = "^muffle")
[13:23:59.435]                   }
[13:23:59.435]                 }
[13:23:59.435]                 else {
[13:23:59.435]                   if (TRUE) {
[13:23:59.435]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:23:59.435]                     {
[13:23:59.435]                       inherits <- base::inherits
[13:23:59.435]                       invokeRestart <- base::invokeRestart
[13:23:59.435]                       is.null <- base::is.null
[13:23:59.435]                       muffled <- FALSE
[13:23:59.435]                       if (inherits(cond, "message")) {
[13:23:59.435]                         muffled <- grepl(pattern, "muffleMessage")
[13:23:59.435]                         if (muffled) 
[13:23:59.435]                           invokeRestart("muffleMessage")
[13:23:59.435]                       }
[13:23:59.435]                       else if (inherits(cond, "warning")) {
[13:23:59.435]                         muffled <- grepl(pattern, "muffleWarning")
[13:23:59.435]                         if (muffled) 
[13:23:59.435]                           invokeRestart("muffleWarning")
[13:23:59.435]                       }
[13:23:59.435]                       else if (inherits(cond, "condition")) {
[13:23:59.435]                         if (!is.null(pattern)) {
[13:23:59.435]                           computeRestarts <- base::computeRestarts
[13:23:59.435]                           grepl <- base::grepl
[13:23:59.435]                           restarts <- computeRestarts(cond)
[13:23:59.435]                           for (restart in restarts) {
[13:23:59.435]                             name <- restart$name
[13:23:59.435]                             if (is.null(name)) 
[13:23:59.435]                               next
[13:23:59.435]                             if (!grepl(pattern, name)) 
[13:23:59.435]                               next
[13:23:59.435]                             invokeRestart(restart)
[13:23:59.435]                             muffled <- TRUE
[13:23:59.435]                             break
[13:23:59.435]                           }
[13:23:59.435]                         }
[13:23:59.435]                       }
[13:23:59.435]                       invisible(muffled)
[13:23:59.435]                     }
[13:23:59.435]                     muffleCondition(cond, pattern = "^muffle")
[13:23:59.435]                   }
[13:23:59.435]                 }
[13:23:59.435]             }
[13:23:59.435]         }))
[13:23:59.435]     }, error = function(ex) {
[13:23:59.435]         base::structure(base::list(value = NULL, visible = NULL, 
[13:23:59.435]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:23:59.435]                 ...future.rng), started = ...future.startTime, 
[13:23:59.435]             finished = Sys.time(), session_uuid = NA_character_, 
[13:23:59.435]             version = "1.8"), class = "FutureResult")
[13:23:59.435]     }, finally = {
[13:23:59.435]         if (!identical(...future.workdir, getwd())) 
[13:23:59.435]             setwd(...future.workdir)
[13:23:59.435]         {
[13:23:59.435]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:23:59.435]                 ...future.oldOptions$nwarnings <- NULL
[13:23:59.435]             }
[13:23:59.435]             base::options(...future.oldOptions)
[13:23:59.435]             if (.Platform$OS.type == "windows") {
[13:23:59.435]                 old_names <- names(...future.oldEnvVars)
[13:23:59.435]                 envs <- base::Sys.getenv()
[13:23:59.435]                 names <- names(envs)
[13:23:59.435]                 common <- intersect(names, old_names)
[13:23:59.435]                 added <- setdiff(names, old_names)
[13:23:59.435]                 removed <- setdiff(old_names, names)
[13:23:59.435]                 changed <- common[...future.oldEnvVars[common] != 
[13:23:59.435]                   envs[common]]
[13:23:59.435]                 NAMES <- toupper(changed)
[13:23:59.435]                 args <- list()
[13:23:59.435]                 for (kk in seq_along(NAMES)) {
[13:23:59.435]                   name <- changed[[kk]]
[13:23:59.435]                   NAME <- NAMES[[kk]]
[13:23:59.435]                   if (name != NAME && is.element(NAME, old_names)) 
[13:23:59.435]                     next
[13:23:59.435]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:23:59.435]                 }
[13:23:59.435]                 NAMES <- toupper(added)
[13:23:59.435]                 for (kk in seq_along(NAMES)) {
[13:23:59.435]                   name <- added[[kk]]
[13:23:59.435]                   NAME <- NAMES[[kk]]
[13:23:59.435]                   if (name != NAME && is.element(NAME, old_names)) 
[13:23:59.435]                     next
[13:23:59.435]                   args[[name]] <- ""
[13:23:59.435]                 }
[13:23:59.435]                 NAMES <- toupper(removed)
[13:23:59.435]                 for (kk in seq_along(NAMES)) {
[13:23:59.435]                   name <- removed[[kk]]
[13:23:59.435]                   NAME <- NAMES[[kk]]
[13:23:59.435]                   if (name != NAME && is.element(NAME, old_names)) 
[13:23:59.435]                     next
[13:23:59.435]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:23:59.435]                 }
[13:23:59.435]                 if (length(args) > 0) 
[13:23:59.435]                   base::do.call(base::Sys.setenv, args = args)
[13:23:59.435]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:23:59.435]             }
[13:23:59.435]             else {
[13:23:59.435]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:23:59.435]             }
[13:23:59.435]             {
[13:23:59.435]                 if (base::length(...future.futureOptionsAdded) > 
[13:23:59.435]                   0L) {
[13:23:59.435]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:23:59.435]                   base::names(opts) <- ...future.futureOptionsAdded
[13:23:59.435]                   base::options(opts)
[13:23:59.435]                 }
[13:23:59.435]                 {
[13:23:59.435]                   {
[13:23:59.435]                     base::options(mc.cores = ...future.mc.cores.old)
[13:23:59.435]                     NULL
[13:23:59.435]                   }
[13:23:59.435]                   options(future.plan = NULL)
[13:23:59.435]                   if (is.na(NA_character_)) 
[13:23:59.435]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:23:59.435]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:23:59.435]                   future::plan(list(a = function (..., workers = availableCores(constraints = "multicore"), 
[13:23:59.435]                     envir = parent.frame()) 
[13:23:59.435]                   {
[13:23:59.435]                     default_workers <- missing(workers)
[13:23:59.435]                     if (is.function(workers)) 
[13:23:59.435]                       workers <- workers()
[13:23:59.435]                     workers <- structure(as.integer(workers), 
[13:23:59.435]                       class = class(workers))
[13:23:59.435]                     stop_if_not(is.finite(workers), workers >= 
[13:23:59.435]                       1L)
[13:23:59.435]                     if ((workers == 1L && !inherits(workers, 
[13:23:59.435]                       "AsIs")) || !supportsMulticore(warn = TRUE)) {
[13:23:59.435]                       if (default_workers) 
[13:23:59.435]                         supportsMulticore(warn = TRUE)
[13:23:59.435]                       return(sequential(..., envir = envir))
[13:23:59.435]                     }
[13:23:59.435]                     oopts <- options(mc.cores = workers)
[13:23:59.435]                     on.exit(options(oopts))
[13:23:59.435]                     future <- MulticoreFuture(..., workers = workers, 
[13:23:59.435]                       envir = envir)
[13:23:59.435]                     if (!future$lazy) 
[13:23:59.435]                       future <- run(future)
[13:23:59.435]                     invisible(future)
[13:23:59.435]                   }, b = function (..., workers = availableCores(constraints = "multicore"), 
[13:23:59.435]                     envir = parent.frame()) 
[13:23:59.435]                   {
[13:23:59.435]                     default_workers <- missing(workers)
[13:23:59.435]                     if (is.function(workers)) 
[13:23:59.435]                       workers <- workers()
[13:23:59.435]                     workers <- structure(as.integer(workers), 
[13:23:59.435]                       class = class(workers))
[13:23:59.435]                     stop_if_not(is.finite(workers), workers >= 
[13:23:59.435]                       1L)
[13:23:59.435]                     if ((workers == 1L && !inherits(workers, 
[13:23:59.435]                       "AsIs")) || !supportsMulticore(warn = TRUE)) {
[13:23:59.435]                       if (default_workers) 
[13:23:59.435]                         supportsMulticore(warn = TRUE)
[13:23:59.435]                       return(sequential(..., envir = envir))
[13:23:59.435]                     }
[13:23:59.435]                     oopts <- options(mc.cores = workers)
[13:23:59.435]                     on.exit(options(oopts))
[13:23:59.435]                     future <- MulticoreFuture(..., workers = workers, 
[13:23:59.435]                       envir = envir)
[13:23:59.435]                     if (!future$lazy) 
[13:23:59.435]                       future <- run(future)
[13:23:59.435]                     invisible(future)
[13:23:59.435]                   }), .cleanup = FALSE, .init = FALSE)
[13:23:59.435]                 }
[13:23:59.435]             }
[13:23:59.435]         }
[13:23:59.435]     })
[13:23:59.435]     if (TRUE) {
[13:23:59.435]         base::sink(type = "output", split = FALSE)
[13:23:59.435]         if (TRUE) {
[13:23:59.435]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:23:59.435]         }
[13:23:59.435]         else {
[13:23:59.435]             ...future.result["stdout"] <- base::list(NULL)
[13:23:59.435]         }
[13:23:59.435]         base::close(...future.stdout)
[13:23:59.435]         ...future.stdout <- NULL
[13:23:59.435]     }
[13:23:59.435]     ...future.result$conditions <- ...future.conditions
[13:23:59.435]     ...future.result$finished <- base::Sys.time()
[13:23:59.435]     ...future.result
[13:23:59.435] }
[13:23:59.439] assign_globals() ...
[13:23:59.439] List of 1
[13:23:59.439]  $ data:'data.frame':	3 obs. of  2 variables:
[13:23:59.439]   ..$ a: int [1:3] 1 2 3
[13:23:59.439]   ..$ b: int [1:3] 3 2 1
[13:23:59.439]  - attr(*, "where")=List of 1
[13:23:59.439]   ..$ data:<environment: R_EmptyEnv> 
[13:23:59.439]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[13:23:59.439]  - attr(*, "resolved")= logi FALSE
[13:23:59.439]  - attr(*, "total_size")= num 128
[13:23:59.439]  - attr(*, "already-done")= logi TRUE
[13:23:59.442] - copied ‘data’ to environment
[13:23:59.443] assign_globals() ... done
[13:23:59.443] requestCore(): workers = 2
[13:23:59.445] MulticoreFuture started
[13:23:59.446] - Launch lazy future ... done
[13:23:59.446] run() for ‘MulticoreFuture’ ... done
[13:23:59.446] result() for MulticoreFuture ...
[13:23:59.447] plan(): Setting new future strategy stack:
[13:23:59.447] List of future strategies:
[13:23:59.447] 1. multicore:
[13:23:59.447]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[13:23:59.447]    - tweaked: FALSE
[13:23:59.447]    - call: plan(list(a = strategy1, b = strategy2))
[13:23:59.453] plan(): nbrOfWorkers() = 1
[13:23:59.490] plan(): Setting new future strategy stack:
[13:23:59.490] List of future strategies:
[13:23:59.490] 1. multicore:
[13:23:59.490]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[13:23:59.490]    - tweaked: FALSE
[13:23:59.490]    - call: plan(list(a = strategy1, b = strategy2))
[13:23:59.490] 2. multicore:
[13:23:59.490]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[13:23:59.490]    - tweaked: FALSE
[13:23:59.490]    - call: plan(list(a = strategy1, b = strategy2))
[13:23:59.494] plan(): nbrOfWorkers() = 2
[13:23:59.495] result() for MulticoreFuture ...
[13:23:59.495] result() for MulticoreFuture ... done
[13:23:59.495] signalConditions() ...
[13:23:59.495]  - include = ‘immediateCondition’
[13:23:59.496]  - exclude = 
[13:23:59.496]  - resignal = FALSE
[13:23:59.496]  - Number of conditions: 52
[13:23:59.496] signalConditions() ... done
[13:23:59.496] result() for MulticoreFuture ... done
[13:23:59.496] result() for MulticoreFuture ...
[13:23:59.496] result() for MulticoreFuture ... done
[13:23:59.497] signalConditions() ...
[13:23:59.497]  - include = ‘immediateCondition’
[13:23:59.497]  - exclude = 
[13:23:59.497]  - resignal = FALSE
[13:23:59.497]  - Number of conditions: 52
[13:23:59.497] signalConditions() ... done
[13:23:59.497] Future state: ‘finished’
[13:23:59.497] result() for MulticoreFuture ...
[13:23:59.498] result() for MulticoreFuture ... done
[13:23:59.498] signalConditions() ...
[13:23:59.498]  - include = ‘condition’
[13:23:59.498]  - exclude = ‘immediateCondition’
[13:23:59.498]  - resignal = TRUE
[13:23:59.498]  - Number of conditions: 52
[13:23:59.498]  - Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:59.454] getGlobalsAndPackages() ...
[13:23:59.498]  - Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:59.454] Searching for globals...
[13:23:59.498]  - Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:59.456] - globals found: [4] ‘subset’, ‘data’, ‘==’, ‘a’
[13:23:59.499]  - Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:59.456] Searching for globals ... DONE
[13:23:59.499]  - Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:59.457] Resolving globals: FALSE
[13:23:59.499]  - Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:59.457] The total size of the 1 globals is 128 bytes (128 bytes)
[13:23:59.499]  - Condition #7: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:59.458] The total size of the 1 globals exported for future expression (‘subset(data, a == 2)’) is 128 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘data’ (128 bytes of class ‘list’)
[13:23:59.499]  - Condition #8: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:59.458] - globals: [1] ‘data’
[13:23:59.499]  - Condition #9: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:59.458] 
[13:23:59.500]  - Condition #10: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:59.459] getGlobalsAndPackages() ... DONE
[13:23:59.500]  - Condition #11: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:59.459] run() for ‘Future’ ...
[13:23:59.500]  - Condition #12: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:59.460] - state: ‘created’
[13:23:59.500]  - Condition #13: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:59.460] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[13:23:59.500]  - Condition #14: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:59.464] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[13:23:59.500]  - Condition #15: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:59.464] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[13:23:59.501]  - Condition #16: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:59.464]   - Field: ‘label’
[13:23:59.501]  - Condition #17: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:59.465]   - Field: ‘local’
[13:23:59.501]  - Condition #18: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:59.465]   - Field: ‘owner’
[13:23:59.501]  - Condition #19: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:59.465]   - Field: ‘envir’
[13:23:59.501]  - Condition #20: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:59.465]   - Field: ‘packages’
[13:23:59.501]  - Condition #21: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:59.465]   - Field: ‘gc’
[13:23:59.502]  - Condition #22: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:59.465]   - Field: ‘conditions’
[13:23:59.502]  - Condition #23: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:59.466]   - Field: ‘expr’
[13:23:59.502]  - Condition #24: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:59.466]   - Field: ‘uuid’
[13:23:59.502]  - Condition #25: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:59.466]   - Field: ‘seed’
[13:23:59.502]  - Condition #26: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:59.466]   - Field: ‘version’
[13:23:59.502]  - Condition #27: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:59.466]   - Field: ‘result’
[13:23:59.503]  - Condition #28: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:59.466]   - Field: ‘asynchronous’
[13:23:59.503]  - Condition #29: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:59.466]   - Field: ‘calls’
[13:23:59.503]  - Condition #30: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:59.467]   - Field: ‘globals’
[13:23:59.503]  - Condition #31: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:59.467]   - Field: ‘stdout’
[13:23:59.503]  - Condition #32: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:59.467]   - Field: ‘earlySignal’
[13:23:59.503]  - Condition #33: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:59.467]   - Field: ‘lazy’
[13:23:59.503]  - Condition #34: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:59.467]   - Field: ‘state’
[13:23:59.504]  - Condition #35: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:59.467] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[13:23:59.504]  - Condition #36: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:59.468] - Launch lazy future ...
[13:23:59.504]  - Condition #37: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:59.468] Packages needed by the future expression (n = 0): <none>
[13:23:59.504]  - Condition #38: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:59.468] Packages needed by future strategies (n = 0): <none>
[13:23:59.504]  - Condition #39: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:59.469] {
[13:23:59.469]     {
[13:23:59.469]         {
[13:23:59.469]             ...future.startTime <- base::Sys.time()
[13:23:59.469]             {
[13:23:59.469]                 {
[13:23:59.469]                   {
[13:23:59.469]                     base::local({
[13:23:59.469]                       has_future <- base::requireNamespace("future", 
[13:23:59.469]                         quietly = TRUE)
[13:23:59.469]                       if (has_future) {
[13:23:59.469]                         ns <- base::getNamespace("future")
[13:23:59.469]                         version <- ns[[".package"]][["version"]]
[13:23:59.469]                         if (is.null(version)) 
[13:23:59.469]                           version <- utils::packageVersion("future")
[13:23:59.469]                       }
[13:23:59.469]                       else {
[13:23:59.469]                         version <- NULL
[13:23:59.469]                       }
[13:23:59.469]                       if (!has_future || version < "1.8.0") {
[13:23:59.469]                         info <- base::c(r_version = base::gsub("R version ", 
[13:23:59.469]                           "", base::R.version$version.string), 
[13:23:59.469]                           platform = base::sprintf("%s (%s-bit)", 
[13:23:59.469]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:23:59.469]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[13:23:59.469]                             "release", "version")], collapse = " "), 
[13:23:59.469]                           hostname = base::Sys.info()[["nodename"]])
[13:23:59.469]                         info <- base::sprintf("%s: %s", base::names(info), 
[13:23:59.469]                           info)
[13:23:59.469]                         info <- base::paste(info, collapse = "; ")
[13:23:59.469]                         if (!has_future) {
[13:23:59.469]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:23:59.469]                             info)
[13:23:59.469]                         }
[13:23:59.469]                         else {
[13:23:59.469]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:23:59.469]                             info, version)
[13:23:59.469]                         }
[13:23:59.469]                         base::stop(msg)
[13:23:59.469]                       }
[13:23:59.469]                     })
[13:23:59.469]                   }
[13:23:59.469]                   options(future.plan = NULL)
[13:23:59.469]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:23:59.469]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:23:59.469]                 }
[13:23:59.469]                 ...future.workdir <- getwd()
[13:23:59.469]             }
[13:23:59.469]             ...future.oldOptions <- base::as.list(base::.Options)
[13:23:59.469]             ...future.oldEnvVars <- base::Sys.getenv()
[13:23:59.469]         }
[13:23:59.469]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:23:59.469]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:23:59.469]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:23:59.469]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:23:59.469]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:23:59.469]             future.stdout.windows.reencode = NULL, width = 80L)
[13:23:59.469]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:23:59.469]             base::names(...future.oldOptions))
[13:23:59.469]     }
[13:23:59.469]     if (FALSE) {
[13:23:59.469]     }
[13:23:59.469]     else {
[13:23:59.469]         if (TRUE) {
[13:23:59.469]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:23:59.469]                 open = "w")
[13:23:59.469]         }
[13:23:59.469]         else {
[13:23:59.469]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:23:59.469]                 windows = "NUL", "/dev/null"), open = "w")
[13:23:59.469]         }
[13:23:59.469]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:23:59.469]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:23:59.469]             base::sink(type = "output", split = FALSE)
[13:23:59.469]             base::close(...future.stdout)
[13:23:59.469]         }, add = TRUE)
[13:23:59.469]     }
[13:23:59.469]     ...future.frame <- base::sys.nframe()
[13:23:59.469]     ...future.conditions <- base::list()
[13:23:59.469]     ...future.rng <- base::globalenv()$.Random.seed
[13:23:59.469]     if (FALSE) {
[13:23:59.469]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:23:59.469]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:23:59.469]     }
[13:23:59.469]     ...future.result <- base::tryCatch({
[13:23:59.469]         base::withCallingHandlers({
[13:23:59.469]             ...future.value <- base::withVisible(base::local(subset(data, 
[13:23:59.469]                 a == 2)))
[13:23:59.469]             future::FutureResult(value = ...future.value$value, 
[13:23:59.469]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:23:59.469]                   ...future.rng), globalenv = if (FALSE) 
[13:23:59.469]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:23:59.469]                     ...future.globalenv.names))
[13:23:59.469]                 else NULL, started = ...future.startTime, version = "1.8")
[13:23:59.469]         }, condition = base::local({
[13:23:59.469]             c <- base::c
[13:23:59.469]             inherits <- base::inherits
[13:23:59.469]             invokeRestart <- base::invokeRestart
[13:23:59.469]             length <- base::length
[13:23:59.469]             list <- base::list
[13:23:59.469]             seq.int <- base::seq.int
[13:23:59.469]             signalCondition <- base::signalCondition
[13:23:59.469]             sys.calls <- base::sys.calls
[13:23:59.469]             `[[` <- base::`[[`
[13:23:59.469]             `+` <- base::`+`
[13:23:59.469]             `<<-` <- base::`<<-`
[13:23:59.469]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:23:59.469]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:23:59.469]                   3L)]
[13:23:59.469]             }
[13:23:59.469]             function(cond) {
[13:23:59.469]                 is_error <- inherits(cond, "error")
[13:23:59.469]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:23:59.469]                   NULL)
[13:23:59.469]                 if (is_error) {
[13:23:59.469]                   sessionInformation <- function() {
[13:23:59.469]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:23:59.469]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:23:59.469]                       search = base::search(), system = base::Sys.info())
[13:23:59.469]                   }
[13:23:59.469]                   ...future.conditions[[length(...future.conditions) + 
[13:23:59.469]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:23:59.469]                     cond$call), session = sessionInformation(), 
[13:23:59.469]                     timestamp = base::Sys.time(), signaled = 0L)
[13:23:59.469]                   signalCondition(cond)
[13:23:59.469]                 }
[13:23:59.469]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:23:59.469]                 "immediateCondition"))) {
[13:23:59.469]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:23:59.469]                   ...future.conditions[[length(...future.conditions) + 
[13:23:59.469]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:23:59.469]                   if (TRUE && !signal) {
[13:23:59.469]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:23:59.469]                     {
[13:23:59.469]                       inherits <- base::inherits
[13:23:59.469]                       invokeRestart <- base::invokeRestart
[13:23:59.469]                       is.null <- base::is.null
[13:23:59.469]                       muffled <- FALSE
[13:23:59.469]                       if (inherits(cond, "message")) {
[13:23:59.469]                         muffled <- grepl(pattern, "muffleMessage")
[13:23:59.469]                         if (muffled) 
[13:23:59.469]                           invokeRestart("muffleMessage")
[13:23:59.469]                       }
[13:23:59.469]                       else if (inherits(cond, "warning")) {
[13:23:59.469]                         muffled <- grepl(pattern, "muffleWarning")
[13:23:59.469]                         if (muffled) 
[13:23:59.469]                           invokeRestart("muffleWarning")
[13:23:59.469]                       }
[13:23:59.469]                       else if (inherits(cond, "condition")) {
[13:23:59.469]                         if (!is.null(pattern)) {
[13:23:59.469]                           computeRestarts <- base::computeRestarts
[13:23:59.469]                           grepl <- base::grepl
[13:23:59.469]                           restarts <- computeRestarts(cond)
[13:23:59.469]                           for (restart in restarts) {
[13:23:59.469]                             name <- restart$name
[13:23:59.469]                             if (is.null(name)) 
[13:23:59.469]                               next
[13:23:59.469]                             if (!grepl(pattern, name)) 
[13:23:59.469]                               next
[13:23:59.469]                             invokeRestart(restart)
[13:23:59.469]                             muffled <- TRUE
[13:23:59.469]                             break
[13:23:59.469]                           }
[13:23:59.469]                         }
[13:23:59.469]                       }
[13:23:59.469]                       invisible(muffled)
[13:23:59.469]                     }
[13:23:59.469]                     muffleCondition(cond, pattern = "^muffle")
[13:23:59.469]                   }
[13:23:59.469]                 }
[13:23:59.469]                 else {
[13:23:59.469]                   if (TRUE) {
[13:23:59.469]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:23:59.469]                     {
[13:23:59.469]                       inherits <- base::inherits
[13:23:59.469]                       invokeRestart <- base::invokeRestart
[13:23:59.469]                       is.null <- base::is.null
[13:23:59.469]                       muffled <- FALSE
[13:23:59.469]                       if (inherits(cond, "message")) {
[13:23:59.469]                         muffled <- grepl(pattern, "muffleMessage")
[13:23:59.469]                         if (muffled) 
[13:23:59.469]                           invokeRestart("muffleMessage")
[13:23:59.469]                       }
[13:23:59.469]                       else if (inherits(cond, "warning")) {
[13:23:59.469]                         muffled <- grepl(pattern, "muffleWarning")
[13:23:59.469]                         if (muffled) 
[13:23:59.469]                           invokeRestart("muffleWarning")
[13:23:59.469]                       }
[13:23:59.469]                       else if (inherits(cond, "condition")) {
[13:23:59.469]                         if (!is.null(pattern)) {
[13:23:59.469]                           computeRestarts <- base::computeRestarts
[13:23:59.469]                           grepl <- base::grepl
[13:23:59.469]                           restarts <- computeRestarts(cond)
[13:23:59.469]                           for (restart in restarts) {
[13:23:59.469]                             name <- restart$name
[13:23:59.469]                             if (is.null(name)) 
[13:23:59.469]                               next
[13:23:59.469]                             if (!grepl(pattern, name)) 
[13:23:59.469]                               next
[13:23:59.469]                             invokeRestart(restart)
[13:23:59.469]                             muffled <- TRUE
[13:23:59.469]                             break
[13:23:59.469]                           }
[13:23:59.469]                         }
[13:23:59.469]                       }
[13:23:59.469]                       invisible(muffled)
[13:23:59.469]                     }
[13:23:59.469]                     muffleCondition(cond, pattern = "^muffle")
[13:23:59.469]                   }
[13:23:59.469]                 }
[13:23:59.469]             }
[13:23:59.469]         }))
[13:23:59.469]     }, error = function(ex) {
[13:23:59.469]         base::structure(base::list(value = NULL, visible = NULL, 
[13:23:59.469]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:23:59.469]                 ...future.rng), started = ...future.startTime, 
[13:23:59.469]             finished = Sys.time(), session_uuid = NA_character_, 
[13:23:59.469]             version = "1.8"), class = "FutureResult")
[13:23:59.469]     }, finally = {
[13:23:59.469]         if (!identical(...future.workdir, getwd())) 
[13:23:59.469]             setwd(...future.workdir)
[13:23:59.469]         {
[13:23:59.469]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:23:59.469]                 ...future.oldOptions$nwarnings <- NULL
[13:23:59.469]             }
[13:23:59.469]             base::options(...future.oldOptions)
[13:23:59.469]             if (.Platform$OS.type == "windows") {
[13:23:59.469]                 old_names <- names(...future.oldEnvVars)
[13:23:59.469]                 envs <- base::Sys.getenv()
[13:23:59.469]                 names <- names(envs)
[13:23:59.469]                 common <- intersect(names, old_names)
[13:23:59.469]                 added <- setdiff(names, old_names)
[13:23:59.469]                 removed <- setdiff(old_names, names)
[13:23:59.469]                 changed <- common[...future.oldEnvVars[common] != 
[13:23:59.469]                   envs[common]]
[13:23:59.469]                 NAMES <- toupper(changed)
[13:23:59.469]                 args <- list()
[13:23:59.469]                 for (kk in seq_along(NAMES)) {
[13:23:59.469]                   name <- changed[[kk]]
[13:23:59.469]                   NAME <- NAMES[[kk]]
[13:23:59.469]                   if (name != NAME && is.element(NAME, old_names)) 
[13:23:59.469]                     next
[13:23:59.469]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:23:59.469]                 }
[13:23:59.469]                 NAMES <- toupper(added)
[13:23:59.469]                 for (kk in seq_along(NAMES)) {
[13:23:59.469]                   name <- added[[kk]]
[13:23:59.469]                   NAME <- NAMES[[kk]]
[13:23:59.469]                   if (name != NAME && is.element(NAME, old_names)) 
[13:23:59.469]                     next
[13:23:59.469]                   args[[name]] <- ""
[13:23:59.469]                 }
[13:23:59.469]                 NAMES <- toupper(removed)
[13:23:59.469]                 for (kk in seq_along(NAMES)) {
[13:23:59.469]                   name <- removed[[kk]]
[13:23:59.469]                   NAME <- NAMES[[kk]]
[13:23:59.469]                   if (name != NAME && is.element(NAME, old_names)) 
[13:23:59.469]                     next
[13:23:59.469]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:23:59.469]                 }
[13:23:59.469]                 if (length(args) > 0) 
[13:23:59.469]                   base::do.call(base::Sys.setenv, args = args)
[13:23:59.469]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:23:59.469]             }
[13:23:59.469]             else {
[13:23:59.469]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:23:59.469]             }
[13:23:59.469]             {
[13:23:59.469]                 if (base::length(...future.futureOptionsAdded) > 
[13:23:59.469]                   0L) {
[13:23:59.469]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:23:59.469]                   base::names(opts) <- ...future.futureOptionsAdded
[13:23:59.469]                   base::options(opts)
[13:23:59.469]                 }
[13:23:59.469]                 {
[13:23:59.469]                   {
[13:23:59.469]                     NULL
[13:23:59.469]                     RNGkind("Mersenne-Twister")
[13:23:59.469]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[13:23:59.469]                       inherits = FALSE)
[13:23:59.469]                   }
[13:23:59.469]                   options(future.plan = NULL)
[13:23:59.469]                   if (is.na(NA_character_)) 
[13:23:59.469]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:23:59.469]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:23:59.469]                   future::plan(list(b = function (..., workers = availableCores(constraints = "multicore"), 
[13:23:59.469]                     envir = parent.frame()) 
[13:23:59.469]                   {
[13:23:59.469]                     default_workers <- missing(workers)
[13:23:59.469]                     if (is.function(workers)) 
[13:23:59.469]                       workers <- workers()
[13:23:59.469]                     workers <- structure(as.integer(workers), 
[13:23:59.469]                       class = class(workers))
[13:23:59.469]                     stop_if_not(is.finite(workers), workers >= 
[13:23:59.469]                       1L)
[13:23:59.469]                     if ((workers == 1L && !inherits(workers, 
[13:23:59.469]                       "AsIs")) || !supportsMulticore(warn = TRUE)) {
[13:23:59.469]                       if (default_workers) 
[13:23:59.469]                         supportsMulticore(warn = TRUE)
[13:23:59.469]                       return(sequential(..., envir = envir))
[13:23:59.469]                     }
[13:23:59.469]                     oopts <- options(mc.cores = workers)
[13:23:59.469]                     on.exit(options(oopts))
[13:23:59.469]                     future <- MulticoreFuture(..., workers = workers, 
[13:23:59.469]                       envir = envir)
[13:23:59.469]                     if (!future$lazy) 
[13:23:59.469]                       future <- run(future)
[13:23:59.469]                     invisible(future)
[13:23:59.469]                   }), .cleanup = FALSE, .init = FALSE)
[13:23:59.469]                 }
[13:23:59.469]             }
[13:23:59.469]         }
[13:23:59.469]     })
[13:23:59.469]     if (TRUE) {
[13:23:59.469]         base::sink(type = "output", split = FALSE)
[13:23:59.469]         if (TRUE) {
[13:23:59.469]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:23:59.469]         }
[13:23:59.469]         else {
[13:23:59.469]             ...future.result["stdout"] <- base::list(NULL)
[13:23:59.469]         }
[13:23:59.469]         base::close(...future.stdout)
[13:23:59.469]         ...future.stdout <- NULL
[13:23:59.469]     }
[13:23:59.469]     ...future.result$conditions <- ...future.conditions
[13:23:59.469]     ...future.result$finished <- base::Sys.time()
[13:23:59.469]     ...future.result
[13:23:59.469] }
[13:23:59.504]  - Condition #40: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:59.471] assign_globals() ...
[13:23:59.505]  - Condition #41: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:59.471] List of 1
[13:23:59.471]  $ data:'data.frame':	3 obs. of  2 variables:
[13:23:59.471]   ..$ a: int [1:3] 1 2 3
[13:23:59.471]   ..$ b: int [1:3] 3 2 1
[13:23:59.471]  - attr(*, "where")=List of 1
[13:23:59.471]   ..$ data:<environment: R_EmptyEnv> 
[13:23:59.471]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[13:23:59.471]  - attr(*, "resolved")= logi FALSE
[13:23:59.471]  - attr(*, "total_size")= num 128
[13:23:59.471]  - attr(*, "already-done")= logi TRUE
[13:23:59.505]  - Condition #42: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:59.481] - copied ‘data’ to environment
[13:23:59.505]  - Condition #43: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:59.482] assign_globals() ... done
[13:23:59.505]  - Condition #44: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:59.482] plan(): Setting new future strategy stack:
[13:23:59.505]  - Condition #45: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:59.482] List of future strategies:
[13:23:59.482] 1. sequential:
[13:23:59.482]    - args: function (..., envir = parent.frame())
[13:23:59.482]    - tweaked: FALSE
[13:23:59.482]    - call: NULL
[13:23:59.505]  - Condition #46: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:59.483] plan(): nbrOfWorkers() = 1
[13:23:59.506]  - Condition #47: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:59.484] plan(): Setting new future strategy stack:
[13:23:59.506]  - Condition #48: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:59.484] List of future strategies:
[13:23:59.484] 1. multicore:
[13:23:59.484]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[13:23:59.484]    - tweaked: FALSE
[13:23:59.484]    - call: plan(list(a = strategy1, b = strategy2))
[13:23:59.506]  - Condition #49: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:59.488] plan(): nbrOfWorkers() = 1
[13:23:59.506]  - Condition #50: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:59.488] SequentialFuture started (and completed)
[13:23:59.506]  - Condition #51: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:59.489] - Launch lazy future ... done
[13:23:59.506]  - Condition #52: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:59.489] run() for ‘SequentialFuture’ ... done
[13:23:59.507] signalConditions() ... done
- plan(list('multicore', 'multicore')) ... DONE
- plan(list('multicore', 'multisession')) ...
[13:23:59.507] plan(): Setting new future strategy stack:
[13:23:59.507] List of future strategies:
[13:23:59.507] 1. multicore:
[13:23:59.507]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[13:23:59.507]    - tweaked: FALSE
[13:23:59.507]    - call: plan(list(a = strategy1, b = strategy2))
[13:23:59.507] 2. multisession:
[13:23:59.507]    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[13:23:59.507]    - tweaked: FALSE
[13:23:59.507]    - call: plan(list(a = strategy1, b = strategy2))
[13:23:59.512] plan(): nbrOfWorkers() = 2
[13:23:59.513] getGlobalsAndPackages() ...
[13:23:59.513] Searching for globals...
[13:23:59.536] - globals found: [21] ‘{’, ‘<-’, ‘unclass’, ‘::’, ‘[’, ‘nested’, ‘-’, ‘stopifnot’, ‘==’, ‘length’, ‘inherits’, ‘[[’, ‘strategy2’, ‘for’, ‘seq_along’, ‘attr’, ‘attr<-’, ‘[[<-’, ‘all.equal’, ‘list’, ‘%<-%’
[13:23:59.536] Searching for globals ... DONE
[13:23:59.536] Resolving globals: FALSE
[13:23:59.537] The total size of the 2 globals is 90.64 KiB (92816 bytes)
[13:23:59.538] The total size of the 2 globals exported for future expression (‘{; a <- 1L; plan_a <- unclass(future::plan("list")); nested_a <- nested[-1]; stopifnot(length(nested_a) == 1L, length(plan_a) == 1L, inherits(plan_a[[1]],; "future"), inherits(future::plan("next"), strategy2)); ...; }; y; }’) is 90.64 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘nested’ (90.52 KiB of class ‘list’) and ‘strategy2’ (120 bytes of class ‘character’)
[13:23:59.538] - globals: [2] ‘nested’, ‘strategy2’
[13:23:59.538] - packages: [1] ‘future’
[13:23:59.538] getGlobalsAndPackages() ... DONE
[13:23:59.539] run() for ‘Future’ ...
[13:23:59.539] - state: ‘created’
[13:23:59.539] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[13:23:59.543] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:23:59.543] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[13:23:59.544]   - Field: ‘label’
[13:23:59.544]   - Field: ‘local’
[13:23:59.544]   - Field: ‘owner’
[13:23:59.544]   - Field: ‘envir’
[13:23:59.544]   - Field: ‘workers’
[13:23:59.544]   - Field: ‘packages’
[13:23:59.545]   - Field: ‘gc’
[13:23:59.545]   - Field: ‘job’
[13:23:59.545]   - Field: ‘conditions’
[13:23:59.545]   - Field: ‘expr’
[13:23:59.545]   - Field: ‘uuid’
[13:23:59.545]   - Field: ‘seed’
[13:23:59.546]   - Field: ‘version’
[13:23:59.546]   - Field: ‘result’
[13:23:59.546]   - Field: ‘asynchronous’
[13:23:59.546]   - Field: ‘calls’
[13:23:59.546]   - Field: ‘globals’
[13:23:59.546]   - Field: ‘stdout’
[13:23:59.546]   - Field: ‘earlySignal’
[13:23:59.546]   - Field: ‘lazy’
[13:23:59.546]   - Field: ‘state’
[13:23:59.547] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[13:23:59.547] - Launch lazy future ...
[13:23:59.547] Packages needed by the future expression (n = 1): ‘future’
[13:23:59.547] Packages needed by future strategies (n = 1): ‘future’
[13:23:59.548] {
[13:23:59.548]     {
[13:23:59.548]         {
[13:23:59.548]             ...future.startTime <- base::Sys.time()
[13:23:59.548]             {
[13:23:59.548]                 {
[13:23:59.548]                   {
[13:23:59.548]                     {
[13:23:59.548]                       {
[13:23:59.548]                         base::local({
[13:23:59.548]                           has_future <- base::requireNamespace("future", 
[13:23:59.548]                             quietly = TRUE)
[13:23:59.548]                           if (has_future) {
[13:23:59.548]                             ns <- base::getNamespace("future")
[13:23:59.548]                             version <- ns[[".package"]][["version"]]
[13:23:59.548]                             if (is.null(version)) 
[13:23:59.548]                               version <- utils::packageVersion("future")
[13:23:59.548]                           }
[13:23:59.548]                           else {
[13:23:59.548]                             version <- NULL
[13:23:59.548]                           }
[13:23:59.548]                           if (!has_future || version < "1.8.0") {
[13:23:59.548]                             info <- base::c(r_version = base::gsub("R version ", 
[13:23:59.548]                               "", base::R.version$version.string), 
[13:23:59.548]                               platform = base::sprintf("%s (%s-bit)", 
[13:23:59.548]                                 base::R.version$platform, 8 * 
[13:23:59.548]                                   base::.Machine$sizeof.pointer), 
[13:23:59.548]                               os = base::paste(base::Sys.info()[base::c("sysname", 
[13:23:59.548]                                 "release", "version")], collapse = " "), 
[13:23:59.548]                               hostname = base::Sys.info()[["nodename"]])
[13:23:59.548]                             info <- base::sprintf("%s: %s", base::names(info), 
[13:23:59.548]                               info)
[13:23:59.548]                             info <- base::paste(info, collapse = "; ")
[13:23:59.548]                             if (!has_future) {
[13:23:59.548]                               msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:23:59.548]                                 info)
[13:23:59.548]                             }
[13:23:59.548]                             else {
[13:23:59.548]                               msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:23:59.548]                                 info, version)
[13:23:59.548]                             }
[13:23:59.548]                             base::stop(msg)
[13:23:59.548]                           }
[13:23:59.548]                         })
[13:23:59.548]                       }
[13:23:59.548]                       ...future.mc.cores.old <- base::getOption("mc.cores")
[13:23:59.548]                       base::options(mc.cores = 1L)
[13:23:59.548]                     }
[13:23:59.548]                     base::local({
[13:23:59.548]                       for (pkg in "future") {
[13:23:59.548]                         base::loadNamespace(pkg)
[13:23:59.548]                         base::library(pkg, character.only = TRUE)
[13:23:59.548]                       }
[13:23:59.548]                     })
[13:23:59.548]                   }
[13:23:59.548]                   options(future.plan = NULL)
[13:23:59.548]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:23:59.548]                   future::plan(list(b = function (..., workers = availableCores(), 
[13:23:59.548]                     lazy = FALSE, rscript_libs = .libPaths(), 
[13:23:59.548]                     envir = parent.frame()) 
[13:23:59.548]                   {
[13:23:59.548]                     if (is.function(workers)) 
[13:23:59.548]                       workers <- workers()
[13:23:59.548]                     workers <- structure(as.integer(workers), 
[13:23:59.548]                       class = class(workers))
[13:23:59.548]                     stop_if_not(length(workers) == 1, is.finite(workers), 
[13:23:59.548]                       workers >= 1)
[13:23:59.548]                     if (workers == 1L && !inherits(workers, "AsIs")) {
[13:23:59.548]                       return(sequential(..., lazy = TRUE, envir = envir))
[13:23:59.548]                     }
[13:23:59.548]                     future <- MultisessionFuture(..., workers = workers, 
[13:23:59.548]                       lazy = lazy, rscript_libs = rscript_libs, 
[13:23:59.548]                       envir = envir)
[13:23:59.548]                     if (!future$lazy) 
[13:23:59.548]                       future <- run(future)
[13:23:59.548]                     invisible(future)
[13:23:59.548]                   }), .cleanup = FALSE, .init = FALSE)
[13:23:59.548]                 }
[13:23:59.548]                 ...future.workdir <- getwd()
[13:23:59.548]             }
[13:23:59.548]             ...future.oldOptions <- base::as.list(base::.Options)
[13:23:59.548]             ...future.oldEnvVars <- base::Sys.getenv()
[13:23:59.548]         }
[13:23:59.548]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:23:59.548]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:23:59.548]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:23:59.548]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:23:59.548]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:23:59.548]             future.stdout.windows.reencode = NULL, width = 80L)
[13:23:59.548]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:23:59.548]             base::names(...future.oldOptions))
[13:23:59.548]     }
[13:23:59.548]     if (FALSE) {
[13:23:59.548]     }
[13:23:59.548]     else {
[13:23:59.548]         if (TRUE) {
[13:23:59.548]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:23:59.548]                 open = "w")
[13:23:59.548]         }
[13:23:59.548]         else {
[13:23:59.548]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:23:59.548]                 windows = "NUL", "/dev/null"), open = "w")
[13:23:59.548]         }
[13:23:59.548]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:23:59.548]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:23:59.548]             base::sink(type = "output", split = FALSE)
[13:23:59.548]             base::close(...future.stdout)
[13:23:59.548]         }, add = TRUE)
[13:23:59.548]     }
[13:23:59.548]     ...future.frame <- base::sys.nframe()
[13:23:59.548]     ...future.conditions <- base::list()
[13:23:59.548]     ...future.rng <- base::globalenv()$.Random.seed
[13:23:59.548]     if (FALSE) {
[13:23:59.548]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:23:59.548]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:23:59.548]     }
[13:23:59.548]     ...future.result <- base::tryCatch({
[13:23:59.548]         base::withCallingHandlers({
[13:23:59.548]             ...future.value <- base::withVisible(base::local({
[13:23:59.548]                 withCallingHandlers({
[13:23:59.548]                   {
[13:23:59.548]                     a <- 1L
[13:23:59.548]                     plan_a <- unclass(future::plan("list"))
[13:23:59.548]                     nested_a <- nested[-1]
[13:23:59.548]                     stopifnot(length(nested_a) == 1L, length(plan_a) == 
[13:23:59.548]                       1L, inherits(plan_a[[1]], "future"), inherits(future::plan("next"), 
[13:23:59.548]                       strategy2))
[13:23:59.548]                     for (kk in seq_along(plan_a)) attr(plan_a[[kk]], 
[13:23:59.548]                       "init") <- NULL
[13:23:59.548]                     for (kk in seq_along(nested_a)) attr(nested_a[[kk]], 
[13:23:59.548]                       "init") <- NULL
[13:23:59.548]                     stopifnot(all.equal(plan_a, nested_a))
[13:23:59.548]                     y %<-% {
[13:23:59.548]                       b <- 2L
[13:23:59.548]                       plan_b <- future::plan("list")
[13:23:59.548]                       nested_b <- nested_a[-1]
[13:23:59.548]                       stopifnot(length(nested_b) == 0L, length(plan_b) == 
[13:23:59.548]                         1L, inherits(plan_b[[1]], "future"), 
[13:23:59.548]                         inherits(future::plan("next"), "sequential"))
[13:23:59.548]                       list(a = a, nested_a = nested_a, plan_a = plan_a, 
[13:23:59.548]                         b = b, nested_b = nested_b, plan_b = plan_b)
[13:23:59.548]                     }
[13:23:59.548]                     y
[13:23:59.548]                   }
[13:23:59.548]                 }, immediateCondition = function(cond) {
[13:23:59.548]                   save_rds <- function (object, pathname, ...) 
[13:23:59.548]                   {
[13:23:59.548]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[13:23:59.548]                     if (file_test("-f", pathname_tmp)) {
[13:23:59.548]                       fi_tmp <- file.info(pathname_tmp)
[13:23:59.548]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[13:23:59.548]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:23:59.548]                         fi_tmp[["mtime"]])
[13:23:59.548]                     }
[13:23:59.548]                     tryCatch({
[13:23:59.548]                       saveRDS(object, file = pathname_tmp, ...)
[13:23:59.548]                     }, error = function(ex) {
[13:23:59.548]                       msg <- conditionMessage(ex)
[13:23:59.548]                       fi_tmp <- file.info(pathname_tmp)
[13:23:59.548]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[13:23:59.548]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:23:59.548]                         fi_tmp[["mtime"]], msg)
[13:23:59.548]                       ex$message <- msg
[13:23:59.548]                       stop(ex)
[13:23:59.548]                     })
[13:23:59.548]                     stopifnot(file_test("-f", pathname_tmp))
[13:23:59.548]                     res <- file.rename(from = pathname_tmp, to = pathname)
[13:23:59.548]                     if (!res || file_test("-f", pathname_tmp)) {
[13:23:59.548]                       fi_tmp <- file.info(pathname_tmp)
[13:23:59.548]                       fi <- file.info(pathname)
[13:23:59.548]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[13:23:59.548]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:23:59.548]                         fi_tmp[["mtime"]], sQuote(pathname), 
[13:23:59.548]                         fi[["size"]], fi[["mtime"]])
[13:23:59.548]                       stop(msg)
[13:23:59.548]                     }
[13:23:59.548]                     invisible(pathname)
[13:23:59.548]                   }
[13:23:59.548]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[13:23:59.548]                     rootPath = tempdir()) 
[13:23:59.548]                   {
[13:23:59.548]                     obj <- list(time = Sys.time(), condition = cond)
[13:23:59.548]                     file <- tempfile(pattern = class(cond)[1], 
[13:23:59.548]                       tmpdir = path, fileext = ".rds")
[13:23:59.548]                     save_rds(obj, file)
[13:23:59.548]                   }
[13:23:59.548]                   saveImmediateCondition(cond, path = "/tmp/RtmpKOlrlL/.future/immediateConditions")
[13:23:59.548]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:23:59.548]                   {
[13:23:59.548]                     inherits <- base::inherits
[13:23:59.548]                     invokeRestart <- base::invokeRestart
[13:23:59.548]                     is.null <- base::is.null
[13:23:59.548]                     muffled <- FALSE
[13:23:59.548]                     if (inherits(cond, "message")) {
[13:23:59.548]                       muffled <- grepl(pattern, "muffleMessage")
[13:23:59.548]                       if (muffled) 
[13:23:59.548]                         invokeRestart("muffleMessage")
[13:23:59.548]                     }
[13:23:59.548]                     else if (inherits(cond, "warning")) {
[13:23:59.548]                       muffled <- grepl(pattern, "muffleWarning")
[13:23:59.548]                       if (muffled) 
[13:23:59.548]                         invokeRestart("muffleWarning")
[13:23:59.548]                     }
[13:23:59.548]                     else if (inherits(cond, "condition")) {
[13:23:59.548]                       if (!is.null(pattern)) {
[13:23:59.548]                         computeRestarts <- base::computeRestarts
[13:23:59.548]                         grepl <- base::grepl
[13:23:59.548]                         restarts <- computeRestarts(cond)
[13:23:59.548]                         for (restart in restarts) {
[13:23:59.548]                           name <- restart$name
[13:23:59.548]                           if (is.null(name)) 
[13:23:59.548]                             next
[13:23:59.548]                           if (!grepl(pattern, name)) 
[13:23:59.548]                             next
[13:23:59.548]                           invokeRestart(restart)
[13:23:59.548]                           muffled <- TRUE
[13:23:59.548]                           break
[13:23:59.548]                         }
[13:23:59.548]                       }
[13:23:59.548]                     }
[13:23:59.548]                     invisible(muffled)
[13:23:59.548]                   }
[13:23:59.548]                   muffleCondition(cond)
[13:23:59.548]                 })
[13:23:59.548]             }))
[13:23:59.548]             future::FutureResult(value = ...future.value$value, 
[13:23:59.548]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:23:59.548]                   ...future.rng), globalenv = if (FALSE) 
[13:23:59.548]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:23:59.548]                     ...future.globalenv.names))
[13:23:59.548]                 else NULL, started = ...future.startTime, version = "1.8")
[13:23:59.548]         }, condition = base::local({
[13:23:59.548]             c <- base::c
[13:23:59.548]             inherits <- base::inherits
[13:23:59.548]             invokeRestart <- base::invokeRestart
[13:23:59.548]             length <- base::length
[13:23:59.548]             list <- base::list
[13:23:59.548]             seq.int <- base::seq.int
[13:23:59.548]             signalCondition <- base::signalCondition
[13:23:59.548]             sys.calls <- base::sys.calls
[13:23:59.548]             `[[` <- base::`[[`
[13:23:59.548]             `+` <- base::`+`
[13:23:59.548]             `<<-` <- base::`<<-`
[13:23:59.548]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:23:59.548]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:23:59.548]                   3L)]
[13:23:59.548]             }
[13:23:59.548]             function(cond) {
[13:23:59.548]                 is_error <- inherits(cond, "error")
[13:23:59.548]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:23:59.548]                   NULL)
[13:23:59.548]                 if (is_error) {
[13:23:59.548]                   sessionInformation <- function() {
[13:23:59.548]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:23:59.548]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:23:59.548]                       search = base::search(), system = base::Sys.info())
[13:23:59.548]                   }
[13:23:59.548]                   ...future.conditions[[length(...future.conditions) + 
[13:23:59.548]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:23:59.548]                     cond$call), session = sessionInformation(), 
[13:23:59.548]                     timestamp = base::Sys.time(), signaled = 0L)
[13:23:59.548]                   signalCondition(cond)
[13:23:59.548]                 }
[13:23:59.548]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:23:59.548]                 "immediateCondition"))) {
[13:23:59.548]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:23:59.548]                   ...future.conditions[[length(...future.conditions) + 
[13:23:59.548]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:23:59.548]                   if (TRUE && !signal) {
[13:23:59.548]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:23:59.548]                     {
[13:23:59.548]                       inherits <- base::inherits
[13:23:59.548]                       invokeRestart <- base::invokeRestart
[13:23:59.548]                       is.null <- base::is.null
[13:23:59.548]                       muffled <- FALSE
[13:23:59.548]                       if (inherits(cond, "message")) {
[13:23:59.548]                         muffled <- grepl(pattern, "muffleMessage")
[13:23:59.548]                         if (muffled) 
[13:23:59.548]                           invokeRestart("muffleMessage")
[13:23:59.548]                       }
[13:23:59.548]                       else if (inherits(cond, "warning")) {
[13:23:59.548]                         muffled <- grepl(pattern, "muffleWarning")
[13:23:59.548]                         if (muffled) 
[13:23:59.548]                           invokeRestart("muffleWarning")
[13:23:59.548]                       }
[13:23:59.548]                       else if (inherits(cond, "condition")) {
[13:23:59.548]                         if (!is.null(pattern)) {
[13:23:59.548]                           computeRestarts <- base::computeRestarts
[13:23:59.548]                           grepl <- base::grepl
[13:23:59.548]                           restarts <- computeRestarts(cond)
[13:23:59.548]                           for (restart in restarts) {
[13:23:59.548]                             name <- restart$name
[13:23:59.548]                             if (is.null(name)) 
[13:23:59.548]                               next
[13:23:59.548]                             if (!grepl(pattern, name)) 
[13:23:59.548]                               next
[13:23:59.548]                             invokeRestart(restart)
[13:23:59.548]                             muffled <- TRUE
[13:23:59.548]                             break
[13:23:59.548]                           }
[13:23:59.548]                         }
[13:23:59.548]                       }
[13:23:59.548]                       invisible(muffled)
[13:23:59.548]                     }
[13:23:59.548]                     muffleCondition(cond, pattern = "^muffle")
[13:23:59.548]                   }
[13:23:59.548]                 }
[13:23:59.548]                 else {
[13:23:59.548]                   if (TRUE) {
[13:23:59.548]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:23:59.548]                     {
[13:23:59.548]                       inherits <- base::inherits
[13:23:59.548]                       invokeRestart <- base::invokeRestart
[13:23:59.548]                       is.null <- base::is.null
[13:23:59.548]                       muffled <- FALSE
[13:23:59.548]                       if (inherits(cond, "message")) {
[13:23:59.548]                         muffled <- grepl(pattern, "muffleMessage")
[13:23:59.548]                         if (muffled) 
[13:23:59.548]                           invokeRestart("muffleMessage")
[13:23:59.548]                       }
[13:23:59.548]                       else if (inherits(cond, "warning")) {
[13:23:59.548]                         muffled <- grepl(pattern, "muffleWarning")
[13:23:59.548]                         if (muffled) 
[13:23:59.548]                           invokeRestart("muffleWarning")
[13:23:59.548]                       }
[13:23:59.548]                       else if (inherits(cond, "condition")) {
[13:23:59.548]                         if (!is.null(pattern)) {
[13:23:59.548]                           computeRestarts <- base::computeRestarts
[13:23:59.548]                           grepl <- base::grepl
[13:23:59.548]                           restarts <- computeRestarts(cond)
[13:23:59.548]                           for (restart in restarts) {
[13:23:59.548]                             name <- restart$name
[13:23:59.548]                             if (is.null(name)) 
[13:23:59.548]                               next
[13:23:59.548]                             if (!grepl(pattern, name)) 
[13:23:59.548]                               next
[13:23:59.548]                             invokeRestart(restart)
[13:23:59.548]                             muffled <- TRUE
[13:23:59.548]                             break
[13:23:59.548]                           }
[13:23:59.548]                         }
[13:23:59.548]                       }
[13:23:59.548]                       invisible(muffled)
[13:23:59.548]                     }
[13:23:59.548]                     muffleCondition(cond, pattern = "^muffle")
[13:23:59.548]                   }
[13:23:59.548]                 }
[13:23:59.548]             }
[13:23:59.548]         }))
[13:23:59.548]     }, error = function(ex) {
[13:23:59.548]         base::structure(base::list(value = NULL, visible = NULL, 
[13:23:59.548]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:23:59.548]                 ...future.rng), started = ...future.startTime, 
[13:23:59.548]             finished = Sys.time(), session_uuid = NA_character_, 
[13:23:59.548]             version = "1.8"), class = "FutureResult")
[13:23:59.548]     }, finally = {
[13:23:59.548]         if (!identical(...future.workdir, getwd())) 
[13:23:59.548]             setwd(...future.workdir)
[13:23:59.548]         {
[13:23:59.548]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:23:59.548]                 ...future.oldOptions$nwarnings <- NULL
[13:23:59.548]             }
[13:23:59.548]             base::options(...future.oldOptions)
[13:23:59.548]             if (.Platform$OS.type == "windows") {
[13:23:59.548]                 old_names <- names(...future.oldEnvVars)
[13:23:59.548]                 envs <- base::Sys.getenv()
[13:23:59.548]                 names <- names(envs)
[13:23:59.548]                 common <- intersect(names, old_names)
[13:23:59.548]                 added <- setdiff(names, old_names)
[13:23:59.548]                 removed <- setdiff(old_names, names)
[13:23:59.548]                 changed <- common[...future.oldEnvVars[common] != 
[13:23:59.548]                   envs[common]]
[13:23:59.548]                 NAMES <- toupper(changed)
[13:23:59.548]                 args <- list()
[13:23:59.548]                 for (kk in seq_along(NAMES)) {
[13:23:59.548]                   name <- changed[[kk]]
[13:23:59.548]                   NAME <- NAMES[[kk]]
[13:23:59.548]                   if (name != NAME && is.element(NAME, old_names)) 
[13:23:59.548]                     next
[13:23:59.548]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:23:59.548]                 }
[13:23:59.548]                 NAMES <- toupper(added)
[13:23:59.548]                 for (kk in seq_along(NAMES)) {
[13:23:59.548]                   name <- added[[kk]]
[13:23:59.548]                   NAME <- NAMES[[kk]]
[13:23:59.548]                   if (name != NAME && is.element(NAME, old_names)) 
[13:23:59.548]                     next
[13:23:59.548]                   args[[name]] <- ""
[13:23:59.548]                 }
[13:23:59.548]                 NAMES <- toupper(removed)
[13:23:59.548]                 for (kk in seq_along(NAMES)) {
[13:23:59.548]                   name <- removed[[kk]]
[13:23:59.548]                   NAME <- NAMES[[kk]]
[13:23:59.548]                   if (name != NAME && is.element(NAME, old_names)) 
[13:23:59.548]                     next
[13:23:59.548]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:23:59.548]                 }
[13:23:59.548]                 if (length(args) > 0) 
[13:23:59.548]                   base::do.call(base::Sys.setenv, args = args)
[13:23:59.548]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:23:59.548]             }
[13:23:59.548]             else {
[13:23:59.548]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:23:59.548]             }
[13:23:59.548]             {
[13:23:59.548]                 if (base::length(...future.futureOptionsAdded) > 
[13:23:59.548]                   0L) {
[13:23:59.548]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:23:59.548]                   base::names(opts) <- ...future.futureOptionsAdded
[13:23:59.548]                   base::options(opts)
[13:23:59.548]                 }
[13:23:59.548]                 {
[13:23:59.548]                   {
[13:23:59.548]                     base::options(mc.cores = ...future.mc.cores.old)
[13:23:59.548]                     NULL
[13:23:59.548]                   }
[13:23:59.548]                   options(future.plan = NULL)
[13:23:59.548]                   if (is.na(NA_character_)) 
[13:23:59.548]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:23:59.548]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:23:59.548]                   future::plan(list(a = function (..., workers = availableCores(constraints = "multicore"), 
[13:23:59.548]                     envir = parent.frame()) 
[13:23:59.548]                   {
[13:23:59.548]                     default_workers <- missing(workers)
[13:23:59.548]                     if (is.function(workers)) 
[13:23:59.548]                       workers <- workers()
[13:23:59.548]                     workers <- structure(as.integer(workers), 
[13:23:59.548]                       class = class(workers))
[13:23:59.548]                     stop_if_not(is.finite(workers), workers >= 
[13:23:59.548]                       1L)
[13:23:59.548]                     if ((workers == 1L && !inherits(workers, 
[13:23:59.548]                       "AsIs")) || !supportsMulticore(warn = TRUE)) {
[13:23:59.548]                       if (default_workers) 
[13:23:59.548]                         supportsMulticore(warn = TRUE)
[13:23:59.548]                       return(sequential(..., envir = envir))
[13:23:59.548]                     }
[13:23:59.548]                     oopts <- options(mc.cores = workers)
[13:23:59.548]                     on.exit(options(oopts))
[13:23:59.548]                     future <- MulticoreFuture(..., workers = workers, 
[13:23:59.548]                       envir = envir)
[13:23:59.548]                     if (!future$lazy) 
[13:23:59.548]                       future <- run(future)
[13:23:59.548]                     invisible(future)
[13:23:59.548]                   }, b = function (..., workers = availableCores(), 
[13:23:59.548]                     lazy = FALSE, rscript_libs = .libPaths(), 
[13:23:59.548]                     envir = parent.frame()) 
[13:23:59.548]                   {
[13:23:59.548]                     if (is.function(workers)) 
[13:23:59.548]                       workers <- workers()
[13:23:59.548]                     workers <- structure(as.integer(workers), 
[13:23:59.548]                       class = class(workers))
[13:23:59.548]                     stop_if_not(length(workers) == 1, is.finite(workers), 
[13:23:59.548]                       workers >= 1)
[13:23:59.548]                     if (workers == 1L && !inherits(workers, "AsIs")) {
[13:23:59.548]                       return(sequential(..., lazy = TRUE, envir = envir))
[13:23:59.548]                     }
[13:23:59.548]                     future <- MultisessionFuture(..., workers = workers, 
[13:23:59.548]                       lazy = lazy, rscript_libs = rscript_libs, 
[13:23:59.548]                       envir = envir)
[13:23:59.548]                     if (!future$lazy) 
[13:23:59.548]                       future <- run(future)
[13:23:59.548]                     invisible(future)
[13:23:59.548]                   }), .cleanup = FALSE, .init = FALSE)
[13:23:59.548]                 }
[13:23:59.548]             }
[13:23:59.548]         }
[13:23:59.548]     })
[13:23:59.548]     if (TRUE) {
[13:23:59.548]         base::sink(type = "output", split = FALSE)
[13:23:59.548]         if (TRUE) {
[13:23:59.548]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:23:59.548]         }
[13:23:59.548]         else {
[13:23:59.548]             ...future.result["stdout"] <- base::list(NULL)
[13:23:59.548]         }
[13:23:59.548]         base::close(...future.stdout)
[13:23:59.548]         ...future.stdout <- NULL
[13:23:59.548]     }
[13:23:59.548]     ...future.result$conditions <- ...future.conditions
[13:23:59.548]     ...future.result$finished <- base::Sys.time()
[13:23:59.548]     ...future.result
[13:23:59.548] }
[13:23:59.551] assign_globals() ...
[13:23:59.551] List of 2
[13:23:59.551]  $ nested   :List of 2
[13:23:59.551]   ..$ a:function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())  
[13:23:59.551]   .. ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[13:23:59.551]   .. ..- attr(*, "call")= language plan(list(a = strategy1, b = strategy2))
[13:23:59.551]   ..$ b:function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), 
[13:23:59.551]     envir = parent.frame())  
[13:23:59.551]   .. ..- attr(*, "class")= chr [1:5] "multisession" "cluster" "multiprocess" "future" ...
[13:23:59.551]   .. ..- attr(*, "init")= logi TRUE
[13:23:59.551]   .. ..- attr(*, "untweakable")= chr "persistent"
[13:23:59.551]   .. ..- attr(*, "call")= language plan(list(a = strategy1, b = strategy2))
[13:23:59.551]   ..- attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[13:23:59.551]  $ strategy2: chr "multisession"
[13:23:59.551]  - attr(*, "where")=List of 2
[13:23:59.551]   ..$ nested   :<environment: R_EmptyEnv> 
[13:23:59.551]   ..$ strategy2:<environment: R_EmptyEnv> 
[13:23:59.551]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[13:23:59.551]  - attr(*, "resolved")= logi FALSE
[13:23:59.551]  - attr(*, "total_size")= num 92816
[13:23:59.551]  - attr(*, "already-done")= logi TRUE
[13:23:59.557] - copied ‘nested’ to environment
[13:23:59.557] - copied ‘strategy2’ to environment
[13:23:59.557] assign_globals() ... done
[13:23:59.557] requestCore(): workers = 2
[13:23:59.560] MulticoreFuture started
[13:23:59.560] - Launch lazy future ... done
[13:23:59.561] run() for ‘MulticoreFuture’ ... done
[13:23:59.561] result() for MulticoreFuture ...
[13:23:59.561] plan(): Setting new future strategy stack:
[13:23:59.562] List of future strategies:
[13:23:59.562] 1. multisession:
[13:23:59.562]    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[13:23:59.562]    - tweaked: FALSE
[13:23:59.562]    - call: plan(list(a = strategy1, b = strategy2))
[13:23:59.568] plan(): nbrOfWorkers() = 1
[13:23:59.611] plan(): Setting new future strategy stack:
[13:23:59.611] List of future strategies:
[13:23:59.611] 1. multicore:
[13:23:59.611]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[13:23:59.611]    - tweaked: FALSE
[13:23:59.611]    - call: plan(list(a = strategy1, b = strategy2))
[13:23:59.611] 2. multisession:
[13:23:59.611]    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[13:23:59.611]    - tweaked: FALSE
[13:23:59.611]    - call: plan(list(a = strategy1, b = strategy2))
[13:23:59.616] plan(): nbrOfWorkers() = 2
[13:23:59.617] result() for MulticoreFuture ...
[13:23:59.617] result() for MulticoreFuture ... done
[13:23:59.618] signalConditions() ...
[13:23:59.618]  - include = ‘immediateCondition’
[13:23:59.618]  - exclude = 
[13:23:59.618]  - resignal = FALSE
[13:23:59.618]  - Number of conditions: 54
[13:23:59.618] signalConditions() ... done
[13:23:59.618] result() for MulticoreFuture ... done
[13:23:59.619] result() for MulticoreFuture ...
[13:23:59.619] result() for MulticoreFuture ... done
[13:23:59.619] signalConditions() ...
[13:23:59.619]  - include = ‘immediateCondition’
[13:23:59.619]  - exclude = 
[13:23:59.619]  - resignal = FALSE
[13:23:59.619]  - Number of conditions: 54
[13:23:59.619] signalConditions() ... done
[13:23:59.620] Future state: ‘finished’
[13:23:59.620] result() for MulticoreFuture ...
[13:23:59.620] result() for MulticoreFuture ... done
[13:23:59.620] signalConditions() ...
[13:23:59.620]  - include = ‘condition’
[13:23:59.620]  - exclude = ‘immediateCondition’
[13:23:59.620]  - resignal = TRUE
[13:23:59.620]  - Number of conditions: 54
[13:23:59.621]  - Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:59.570] getGlobalsAndPackages() ...
[13:23:59.621]  - Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:59.570] Searching for globals...
[13:23:59.621]  - Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:59.578] - globals found: [14] ‘{’, ‘<-’, ‘::’, ‘[’, ‘nested_a’, ‘-’, ‘stopifnot’, ‘==’, ‘length’, ‘inherits’, ‘[[’, ‘list’, ‘a’, ‘plan_a’
[13:23:59.621]  - Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:59.578] Searching for globals ... DONE
[13:23:59.621]  - Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:59.578] Resolving globals: FALSE
[13:23:59.621]  - Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:59.579] The total size of the 3 globals is 87.82 KiB (89928 bytes)
[13:23:59.622]  - Condition #7: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:59.580] The total size of the 3 globals exported for future expression (‘{; b <- 2L; plan_b <- future::plan("list"); nested_b <- nested_a[-1]; stopifnot(length(nested_b) == 0L, length(plan_b) == 1L, inherits(plan_b[[1]],; "future"), inherits(future::plan("next"), "sequential")); list(a = a, nested_a = nested_a, plan_a = plan_a, b = b,; nested_b = nested_b, plan_b = plan_b); }’) is 87.82 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are three globals: ‘nested_a’ (43.88 KiB of class ‘list’), ‘plan_a’ (43.88 KiB of class ‘list’) and ‘a’ (56 bytes of class ‘numeric’)
[13:23:59.622]  - Condition #8: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:59.580] - globals: [3] ‘nested_a’, ‘a’, ‘plan_a’
[13:23:59.622]  - Condition #9: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:59.580] 
[13:23:59.622]  - Condition #10: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:59.581] getGlobalsAndPackages() ... DONE
[13:23:59.622]  - Condition #11: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:59.581] run() for ‘Future’ ...
[13:23:59.622]  - Condition #12: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:59.582] - state: ‘created’
[13:23:59.622]  - Condition #13: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:59.582] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[13:23:59.623]  - Condition #14: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:59.586] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[13:23:59.623]  - Condition #15: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:59.587] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[13:23:59.623]  - Condition #16: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:59.587]   - Field: ‘label’
[13:23:59.623]  - Condition #17: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:59.587]   - Field: ‘local’
[13:23:59.623]  - Condition #18: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:59.587]   - Field: ‘owner’
[13:23:59.623]  - Condition #19: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:59.588]   - Field: ‘envir’
[13:23:59.624]  - Condition #20: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:59.588]   - Field: ‘packages’
[13:23:59.624]  - Condition #21: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:59.588]   - Field: ‘gc’
[13:23:59.624]  - Condition #22: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:59.588]   - Field: ‘conditions’
[13:23:59.624]  - Condition #23: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:59.588]   - Field: ‘expr’
[13:23:59.624]  - Condition #24: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:59.588]   - Field: ‘uuid’
[13:23:59.624]  - Condition #25: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:59.589]   - Field: ‘seed’
[13:23:59.625]  - Condition #26: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:59.589]   - Field: ‘version’
[13:23:59.625]  - Condition #27: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:59.589]   - Field: ‘result’
[13:23:59.625]  - Condition #28: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:59.589]   - Field: ‘asynchronous’
[13:23:59.625]  - Condition #29: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:59.589]   - Field: ‘calls’
[13:23:59.625]  - Condition #30: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:59.589]   - Field: ‘globals’
[13:23:59.625]  - Condition #31: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:59.590]   - Field: ‘stdout’
[13:23:59.626]  - Condition #32: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:59.590]   - Field: ‘earlySignal’
[13:23:59.626]  - Condition #33: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:59.590]   - Field: ‘lazy’
[13:23:59.626]  - Condition #34: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:59.590]   - Field: ‘state’
[13:23:59.626]  - Condition #35: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:59.590] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[13:23:59.626]  - Condition #36: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:59.590] - Launch lazy future ...
[13:23:59.626]  - Condition #37: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:59.591] Packages needed by the future expression (n = 0): <none>
[13:23:59.627]  - Condition #38: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:59.591] Packages needed by future strategies (n = 0): <none>
[13:23:59.627]  - Condition #39: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:59.592] {
[13:23:59.592]     {
[13:23:59.592]         {
[13:23:59.592]             ...future.startTime <- base::Sys.time()
[13:23:59.592]             {
[13:23:59.592]                 {
[13:23:59.592]                   {
[13:23:59.592]                     base::local({
[13:23:59.592]                       has_future <- base::requireNamespace("future", 
[13:23:59.592]                         quietly = TRUE)
[13:23:59.592]                       if (has_future) {
[13:23:59.592]                         ns <- base::getNamespace("future")
[13:23:59.592]                         version <- ns[[".package"]][["version"]]
[13:23:59.592]                         if (is.null(version)) 
[13:23:59.592]                           version <- utils::packageVersion("future")
[13:23:59.592]                       }
[13:23:59.592]                       else {
[13:23:59.592]                         version <- NULL
[13:23:59.592]                       }
[13:23:59.592]                       if (!has_future || version < "1.8.0") {
[13:23:59.592]                         info <- base::c(r_version = base::gsub("R version ", 
[13:23:59.592]                           "", base::R.version$version.string), 
[13:23:59.592]                           platform = base::sprintf("%s (%s-bit)", 
[13:23:59.592]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:23:59.592]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[13:23:59.592]                             "release", "version")], collapse = " "), 
[13:23:59.592]                           hostname = base::Sys.info()[["nodename"]])
[13:23:59.592]                         info <- base::sprintf("%s: %s", base::names(info), 
[13:23:59.592]                           info)
[13:23:59.592]                         info <- base::paste(info, collapse = "; ")
[13:23:59.592]                         if (!has_future) {
[13:23:59.592]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:23:59.592]                             info)
[13:23:59.592]                         }
[13:23:59.592]                         else {
[13:23:59.592]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:23:59.592]                             info, version)
[13:23:59.592]                         }
[13:23:59.592]                         base::stop(msg)
[13:23:59.592]                       }
[13:23:59.592]                     })
[13:23:59.592]                   }
[13:23:59.592]                   options(future.plan = NULL)
[13:23:59.592]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:23:59.592]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:23:59.592]                 }
[13:23:59.592]                 ...future.workdir <- getwd()
[13:23:59.592]             }
[13:23:59.592]             ...future.oldOptions <- base::as.list(base::.Options)
[13:23:59.592]             ...future.oldEnvVars <- base::Sys.getenv()
[13:23:59.592]         }
[13:23:59.592]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:23:59.592]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:23:59.592]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:23:59.592]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:23:59.592]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:23:59.592]             future.stdout.windows.reencode = NULL, width = 80L)
[13:23:59.592]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:23:59.592]             base::names(...future.oldOptions))
[13:23:59.592]     }
[13:23:59.592]     if (FALSE) {
[13:23:59.592]     }
[13:23:59.592]     else {
[13:23:59.592]         if (TRUE) {
[13:23:59.592]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:23:59.592]                 open = "w")
[13:23:59.592]         }
[13:23:59.592]         else {
[13:23:59.592]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:23:59.592]                 windows = "NUL", "/dev/null"), open = "w")
[13:23:59.592]         }
[13:23:59.592]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:23:59.592]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:23:59.592]             base::sink(type = "output", split = FALSE)
[13:23:59.592]             base::close(...future.stdout)
[13:23:59.592]         }, add = TRUE)
[13:23:59.592]     }
[13:23:59.592]     ...future.frame <- base::sys.nframe()
[13:23:59.592]     ...future.conditions <- base::list()
[13:23:59.592]     ...future.rng <- base::globalenv()$.Random.seed
[13:23:59.592]     if (FALSE) {
[13:23:59.592]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:23:59.592]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:23:59.592]     }
[13:23:59.592]     ...future.result <- base::tryCatch({
[13:23:59.592]         base::withCallingHandlers({
[13:23:59.592]             ...future.value <- base::withVisible(base::local({
[13:23:59.592]                 b <- 2L
[13:23:59.592]                 plan_b <- future::plan("list")
[13:23:59.592]                 nested_b <- nested_a[-1]
[13:23:59.592]                 stopifnot(length(nested_b) == 0L, length(plan_b) == 
[13:23:59.592]                   1L, inherits(plan_b[[1]], "future"), inherits(future::plan("next"), 
[13:23:59.592]                   "sequential"))
[13:23:59.592]                 list(a = a, nested_a = nested_a, plan_a = plan_a, 
[13:23:59.592]                   b = b, nested_b = nested_b, plan_b = plan_b)
[13:23:59.592]             }))
[13:23:59.592]             future::FutureResult(value = ...future.value$value, 
[13:23:59.592]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:23:59.592]                   ...future.rng), globalenv = if (FALSE) 
[13:23:59.592]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:23:59.592]                     ...future.globalenv.names))
[13:23:59.592]                 else NULL, started = ...future.startTime, version = "1.8")
[13:23:59.592]         }, condition = base::local({
[13:23:59.592]             c <- base::c
[13:23:59.592]             inherits <- base::inherits
[13:23:59.592]             invokeRestart <- base::invokeRestart
[13:23:59.592]             length <- base::length
[13:23:59.592]             list <- base::list
[13:23:59.592]             seq.int <- base::seq.int
[13:23:59.592]             signalCondition <- base::signalCondition
[13:23:59.592]             sys.calls <- base::sys.calls
[13:23:59.592]             `[[` <- base::`[[`
[13:23:59.592]             `+` <- base::`+`
[13:23:59.592]             `<<-` <- base::`<<-`
[13:23:59.592]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:23:59.592]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:23:59.592]                   3L)]
[13:23:59.592]             }
[13:23:59.592]             function(cond) {
[13:23:59.592]                 is_error <- inherits(cond, "error")
[13:23:59.592]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:23:59.592]                   NULL)
[13:23:59.592]                 if (is_error) {
[13:23:59.592]                   sessionInformation <- function() {
[13:23:59.592]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:23:59.592]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:23:59.592]                       search = base::search(), system = base::Sys.info())
[13:23:59.592]                   }
[13:23:59.592]                   ...future.conditions[[length(...future.conditions) + 
[13:23:59.592]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:23:59.592]                     cond$call), session = sessionInformation(), 
[13:23:59.592]                     timestamp = base::Sys.time(), signaled = 0L)
[13:23:59.592]                   signalCondition(cond)
[13:23:59.592]                 }
[13:23:59.592]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:23:59.592]                 "immediateCondition"))) {
[13:23:59.592]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:23:59.592]                   ...future.conditions[[length(...future.conditions) + 
[13:23:59.592]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:23:59.592]                   if (TRUE && !signal) {
[13:23:59.592]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:23:59.592]                     {
[13:23:59.592]                       inherits <- base::inherits
[13:23:59.592]                       invokeRestart <- base::invokeRestart
[13:23:59.592]                       is.null <- base::is.null
[13:23:59.592]                       muffled <- FALSE
[13:23:59.592]                       if (inherits(cond, "message")) {
[13:23:59.592]                         muffled <- grepl(pattern, "muffleMessage")
[13:23:59.592]                         if (muffled) 
[13:23:59.592]                           invokeRestart("muffleMessage")
[13:23:59.592]                       }
[13:23:59.592]                       else if (inherits(cond, "warning")) {
[13:23:59.592]                         muffled <- grepl(pattern, "muffleWarning")
[13:23:59.592]                         if (muffled) 
[13:23:59.592]                           invokeRestart("muffleWarning")
[13:23:59.592]                       }
[13:23:59.592]                       else if (inherits(cond, "condition")) {
[13:23:59.592]                         if (!is.null(pattern)) {
[13:23:59.592]                           computeRestarts <- base::computeRestarts
[13:23:59.592]                           grepl <- base::grepl
[13:23:59.592]                           restarts <- computeRestarts(cond)
[13:23:59.592]                           for (restart in restarts) {
[13:23:59.592]                             name <- restart$name
[13:23:59.592]                             if (is.null(name)) 
[13:23:59.592]                               next
[13:23:59.592]                             if (!grepl(pattern, name)) 
[13:23:59.592]                               next
[13:23:59.592]                             invokeRestart(restart)
[13:23:59.592]                             muffled <- TRUE
[13:23:59.592]                             break
[13:23:59.592]                           }
[13:23:59.592]                         }
[13:23:59.592]                       }
[13:23:59.592]                       invisible(muffled)
[13:23:59.592]                     }
[13:23:59.592]                     muffleCondition(cond, pattern = "^muffle")
[13:23:59.592]                   }
[13:23:59.592]                 }
[13:23:59.592]                 else {
[13:23:59.592]                   if (TRUE) {
[13:23:59.592]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:23:59.592]                     {
[13:23:59.592]                       inherits <- base::inherits
[13:23:59.592]                       invokeRestart <- base::invokeRestart
[13:23:59.592]                       is.null <- base::is.null
[13:23:59.592]                       muffled <- FALSE
[13:23:59.592]                       if (inherits(cond, "message")) {
[13:23:59.592]                         muffled <- grepl(pattern, "muffleMessage")
[13:23:59.592]                         if (muffled) 
[13:23:59.592]                           invokeRestart("muffleMessage")
[13:23:59.592]                       }
[13:23:59.592]                       else if (inherits(cond, "warning")) {
[13:23:59.592]                         muffled <- grepl(pattern, "muffleWarning")
[13:23:59.592]                         if (muffled) 
[13:23:59.592]                           invokeRestart("muffleWarning")
[13:23:59.592]                       }
[13:23:59.592]                       else if (inherits(cond, "condition")) {
[13:23:59.592]                         if (!is.null(pattern)) {
[13:23:59.592]                           computeRestarts <- base::computeRestarts
[13:23:59.592]                           grepl <- base::grepl
[13:23:59.592]                           restarts <- computeRestarts(cond)
[13:23:59.592]                           for (restart in restarts) {
[13:23:59.592]                             name <- restart$name
[13:23:59.592]                             if (is.null(name)) 
[13:23:59.592]                               next
[13:23:59.592]                             if (!grepl(pattern, name)) 
[13:23:59.592]                               next
[13:23:59.592]                             invokeRestart(restart)
[13:23:59.592]                             muffled <- TRUE
[13:23:59.592]                             break
[13:23:59.592]                           }
[13:23:59.592]                         }
[13:23:59.592]                       }
[13:23:59.592]                       invisible(muffled)
[13:23:59.592]                     }
[13:23:59.592]                     muffleCondition(cond, pattern = "^muffle")
[13:23:59.592]                   }
[13:23:59.592]                 }
[13:23:59.592]             }
[13:23:59.592]         }))
[13:23:59.592]     }, error = function(ex) {
[13:23:59.592]         base::structure(base::list(value = NULL, visible = NULL, 
[13:23:59.592]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:23:59.592]                 ...future.rng), started = ...future.startTime, 
[13:23:59.592]             finished = Sys.time(), session_uuid = NA_character_, 
[13:23:59.592]             version = "1.8"), class = "FutureResult")
[13:23:59.592]     }, finally = {
[13:23:59.592]         if (!identical(...future.workdir, getwd())) 
[13:23:59.592]             setwd(...future.workdir)
[13:23:59.592]         {
[13:23:59.592]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:23:59.592]                 ...future.oldOptions$nwarnings <- NULL
[13:23:59.592]             }
[13:23:59.592]             base::options(...future.oldOptions)
[13:23:59.592]             if (.Platform$OS.type == "windows") {
[13:23:59.592]                 old_names <- names(...future.oldEnvVars)
[13:23:59.592]                 envs <- base::Sys.getenv()
[13:23:59.592]                 names <- names(envs)
[13:23:59.592]                 common <- intersect(names, old_names)
[13:23:59.592]                 added <- setdiff(names, old_names)
[13:23:59.592]                 removed <- setdiff(old_names, names)
[13:23:59.592]                 changed <- common[...future.oldEnvVars[common] != 
[13:23:59.592]                   envs[common]]
[13:23:59.592]                 NAMES <- toupper(changed)
[13:23:59.592]                 args <- list()
[13:23:59.592]                 for (kk in seq_along(NAMES)) {
[13:23:59.592]                   name <- changed[[kk]]
[13:23:59.592]                   NAME <- NAMES[[kk]]
[13:23:59.592]                   if (name != NAME && is.element(NAME, old_names)) 
[13:23:59.592]                     next
[13:23:59.592]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:23:59.592]                 }
[13:23:59.592]                 NAMES <- toupper(added)
[13:23:59.592]                 for (kk in seq_along(NAMES)) {
[13:23:59.592]                   name <- added[[kk]]
[13:23:59.592]                   NAME <- NAMES[[kk]]
[13:23:59.592]                   if (name != NAME && is.element(NAME, old_names)) 
[13:23:59.592]                     next
[13:23:59.592]                   args[[name]] <- ""
[13:23:59.592]                 }
[13:23:59.592]                 NAMES <- toupper(removed)
[13:23:59.592]                 for (kk in seq_along(NAMES)) {
[13:23:59.592]                   name <- removed[[kk]]
[13:23:59.592]                   NAME <- NAMES[[kk]]
[13:23:59.592]                   if (name != NAME && is.element(NAME, old_names)) 
[13:23:59.592]                     next
[13:23:59.592]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:23:59.592]                 }
[13:23:59.592]                 if (length(args) > 0) 
[13:23:59.592]                   base::do.call(base::Sys.setenv, args = args)
[13:23:59.592]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:23:59.592]             }
[13:23:59.592]             else {
[13:23:59.592]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:23:59.592]             }
[13:23:59.592]             {
[13:23:59.592]                 if (base::length(...future.futureOptionsAdded) > 
[13:23:59.592]                   0L) {
[13:23:59.592]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:23:59.592]                   base::names(opts) <- ...future.futureOptionsAdded
[13:23:59.592]                   base::options(opts)
[13:23:59.592]                 }
[13:23:59.592]                 {
[13:23:59.592]                   {
[13:23:59.592]                     NULL
[13:23:59.592]                     RNGkind("Mersenne-Twister")
[13:23:59.592]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[13:23:59.592]                       inherits = FALSE)
[13:23:59.592]                   }
[13:23:59.592]                   options(future.plan = NULL)
[13:23:59.592]                   if (is.na(NA_character_)) 
[13:23:59.592]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:23:59.592]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:23:59.592]                   future::plan(list(b = function (..., workers = availableCores(), 
[13:23:59.592]                     lazy = FALSE, rscript_libs = .libPaths(), 
[13:23:59.592]                     envir = parent.frame()) 
[13:23:59.592]                   {
[13:23:59.592]                     if (is.function(workers)) 
[13:23:59.592]                       workers <- workers()
[13:23:59.592]                     workers <- structure(as.integer(workers), 
[13:23:59.592]                       class = class(workers))
[13:23:59.592]                     stop_if_not(length(workers) == 1, is.finite(workers), 
[13:23:59.592]                       workers >= 1)
[13:23:59.592]                     if (workers == 1L && !inherits(workers, "AsIs")) {
[13:23:59.592]                       return(sequential(..., lazy = TRUE, envir = envir))
[13:23:59.592]                     }
[13:23:59.592]                     future <- MultisessionFuture(..., workers = workers, 
[13:23:59.592]                       lazy = lazy, rscript_libs = rscript_libs, 
[13:23:59.592]                       envir = envir)
[13:23:59.592]                     if (!future$lazy) 
[13:23:59.592]                       future <- run(future)
[13:23:59.592]                     invisible(future)
[13:23:59.592]                   }), .cleanup = FALSE, .init = FALSE)
[13:23:59.592]                 }
[13:23:59.592]             }
[13:23:59.592]         }
[13:23:59.592]     })
[13:23:59.592]     if (TRUE) {
[13:23:59.592]         base::sink(type = "output", split = FALSE)
[13:23:59.592]         if (TRUE) {
[13:23:59.592]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:23:59.592]         }
[13:23:59.592]         else {
[13:23:59.592]             ...future.result["stdout"] <- base::list(NULL)
[13:23:59.592]         }
[13:23:59.592]         base::close(...future.stdout)
[13:23:59.592]         ...future.stdout <- NULL
[13:23:59.592]     }
[13:23:59.592]     ...future.result$conditions <- ...future.conditions
[13:23:59.592]     ...future.result$finished <- base::Sys.time()
[13:23:59.592]     ...future.result
[13:23:59.592] }
[13:23:59.627]  - Condition #40: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:59.594] assign_globals() ...
[13:23:59.627]  - Condition #41: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:59.594] List of 3
[13:23:59.594]  $ nested_a:List of 1
[13:23:59.594]   ..$ b:function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), 
[13:23:59.594]     envir = parent.frame())  
[13:23:59.594]   .. ..- attr(*, "class")= chr [1:5] "multisession" "cluster" "multiprocess" "future" ...
[13:23:59.594]   .. ..- attr(*, "untweakable")= chr "persistent"
[13:23:59.594]   .. ..- attr(*, "call")= language plan(list(a = strategy1, b = strategy2))
[13:23:59.594]  $ a       : int 1
[13:23:59.594]  $ plan_a  :List of 1
[13:23:59.594]   ..$ b:function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), 
[13:23:59.594]     envir = parent.frame())  
[13:23:59.594]   .. ..- attr(*, "class")= chr [1:5] "multisession" "cluster" "multiprocess" "future" ...
[13:23:59.594]   .. ..- attr(*, "untweakable")= chr "persistent"
[13:23:59.594]   .. ..- attr(*, "call")= language plan(list(a = strategy1, b = strategy2))
[13:23:59.594]  - attr(*, "where")=List of 3
[13:23:59.594]   ..$ nested_a:<environment: R_EmptyEnv> 
[13:23:59.594]   ..$ a       :<environment: R_EmptyEnv> 
[13:23:59.594]   ..$ plan_a  :<environment: R_EmptyEnv> 
[13:23:59.594]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[13:23:59.594]  - attr(*, "resolved")= logi FALSE
[13:23:59.594]  - attr(*, "total_size")= num 89928
[13:23:59.594]  - attr(*, "already-done")= logi TRUE
[13:23:59.627]  - Condition #42: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:59.602] - copied ‘nested_a’ to environment
[13:23:59.627]  - Condition #43: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:59.603] - copied ‘a’ to environment
[13:23:59.628]  - Condition #44: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:59.603] - copied ‘plan_a’ to environment
[13:23:59.628]  - Condition #45: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:59.603] assign_globals() ... done
[13:23:59.628]  - Condition #46: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:59.603] plan(): Setting new future strategy stack:
[13:23:59.628]  - Condition #47: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:59.603] List of future strategies:
[13:23:59.603] 1. sequential:
[13:23:59.603]    - args: function (..., envir = parent.frame())
[13:23:59.603]    - tweaked: FALSE
[13:23:59.603]    - call: NULL
[13:23:59.628]  - Condition #48: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:59.604] plan(): nbrOfWorkers() = 1
[13:23:59.628]  - Condition #49: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:59.605] plan(): Setting new future strategy stack:
[13:23:59.629]  - Condition #50: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:59.605] List of future strategies:
[13:23:59.605] 1. multisession:
[13:23:59.605]    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[13:23:59.605]    - tweaked: FALSE
[13:23:59.605]    - call: plan(list(a = strategy1, b = strategy2))
[13:23:59.629]  - Condition #51: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:59.609] plan(): nbrOfWorkers() = 1
[13:23:59.629]  - Condition #52: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:59.610] SequentialFuture started (and completed)
[13:23:59.629]  - Condition #53: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:59.610] - Launch lazy future ... done
[13:23:59.629]  - Condition #54: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:59.610] run() for ‘SequentialFuture’ ... done
[13:23:59.629] signalConditions() ... done
List of 6
 $ a       : int 1
 $ nested_a:List of 1
  ..$ b:function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), 
    envir = parent.frame())  
  .. ..- attr(*, "class")= chr [1:5] "multisession" "cluster" "multiprocess" "future" ...
  .. ..- attr(*, "untweakable")= chr "persistent"
  .. ..- attr(*, "call")= language plan(list(a = strategy1, b = strategy2))
 $ plan_a  :List of 1
  ..$ b:function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), 
    envir = parent.frame())  
  .. ..- attr(*, "class")= chr [1:5] "multisession" "cluster" "multiprocess" "future" ...
  .. ..- attr(*, "untweakable")= chr "persistent"
  .. ..- attr(*, "call")= language plan(list(a = strategy1, b = strategy2))
 $ b       : int 2
 $ nested_b: Named list()
 $ plan_b  :List of 1
  ..$ :function (..., envir = parent.frame())  
  .. ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
  ..- attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[13:23:59.636] getGlobalsAndPackages() ...
[13:23:59.637] Searching for globals...
[13:23:59.638] - globals found: [7] ‘{’, ‘value’, ‘future’, ‘subset’, ‘data’, ‘==’, ‘a’
[13:23:59.639] Searching for globals ... DONE
[13:23:59.639] Resolving globals: FALSE
[13:23:59.639] The total size of the 1 globals is 128 bytes (128 bytes)
[13:23:59.640] The total size of the 1 globals exported for future expression (‘{; value(future(subset(data, a == 2))); }’) is 128 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘data’ (128 bytes of class ‘list’)
[13:23:59.640] - globals: [1] ‘data’
[13:23:59.640] - packages: [1] ‘future’
[13:23:59.640] getGlobalsAndPackages() ... DONE
[13:23:59.641] run() for ‘Future’ ...
[13:23:59.641] - state: ‘created’
[13:23:59.641] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[13:23:59.646] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:23:59.646] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[13:23:59.646]   - Field: ‘label’
[13:23:59.647]   - Field: ‘local’
[13:23:59.647]   - Field: ‘owner’
[13:23:59.647]   - Field: ‘envir’
[13:23:59.647]   - Field: ‘workers’
[13:23:59.647]   - Field: ‘packages’
[13:23:59.647]   - Field: ‘gc’
[13:23:59.647]   - Field: ‘job’
[13:23:59.647]   - Field: ‘conditions’
[13:23:59.647]   - Field: ‘expr’
[13:23:59.648]   - Field: ‘uuid’
[13:23:59.648]   - Field: ‘seed’
[13:23:59.648]   - Field: ‘version’
[13:23:59.648]   - Field: ‘result’
[13:23:59.648]   - Field: ‘asynchronous’
[13:23:59.648]   - Field: ‘calls’
[13:23:59.648]   - Field: ‘globals’
[13:23:59.648]   - Field: ‘stdout’
[13:23:59.649]   - Field: ‘earlySignal’
[13:23:59.649]   - Field: ‘lazy’
[13:23:59.649]   - Field: ‘state’
[13:23:59.649] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[13:23:59.649] - Launch lazy future ...
[13:23:59.649] Packages needed by the future expression (n = 1): ‘future’
[13:23:59.650] Packages needed by future strategies (n = 1): ‘future’
[13:23:59.650] {
[13:23:59.650]     {
[13:23:59.650]         {
[13:23:59.650]             ...future.startTime <- base::Sys.time()
[13:23:59.650]             {
[13:23:59.650]                 {
[13:23:59.650]                   {
[13:23:59.650]                     {
[13:23:59.650]                       {
[13:23:59.650]                         base::local({
[13:23:59.650]                           has_future <- base::requireNamespace("future", 
[13:23:59.650]                             quietly = TRUE)
[13:23:59.650]                           if (has_future) {
[13:23:59.650]                             ns <- base::getNamespace("future")
[13:23:59.650]                             version <- ns[[".package"]][["version"]]
[13:23:59.650]                             if (is.null(version)) 
[13:23:59.650]                               version <- utils::packageVersion("future")
[13:23:59.650]                           }
[13:23:59.650]                           else {
[13:23:59.650]                             version <- NULL
[13:23:59.650]                           }
[13:23:59.650]                           if (!has_future || version < "1.8.0") {
[13:23:59.650]                             info <- base::c(r_version = base::gsub("R version ", 
[13:23:59.650]                               "", base::R.version$version.string), 
[13:23:59.650]                               platform = base::sprintf("%s (%s-bit)", 
[13:23:59.650]                                 base::R.version$platform, 8 * 
[13:23:59.650]                                   base::.Machine$sizeof.pointer), 
[13:23:59.650]                               os = base::paste(base::Sys.info()[base::c("sysname", 
[13:23:59.650]                                 "release", "version")], collapse = " "), 
[13:23:59.650]                               hostname = base::Sys.info()[["nodename"]])
[13:23:59.650]                             info <- base::sprintf("%s: %s", base::names(info), 
[13:23:59.650]                               info)
[13:23:59.650]                             info <- base::paste(info, collapse = "; ")
[13:23:59.650]                             if (!has_future) {
[13:23:59.650]                               msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:23:59.650]                                 info)
[13:23:59.650]                             }
[13:23:59.650]                             else {
[13:23:59.650]                               msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:23:59.650]                                 info, version)
[13:23:59.650]                             }
[13:23:59.650]                             base::stop(msg)
[13:23:59.650]                           }
[13:23:59.650]                         })
[13:23:59.650]                       }
[13:23:59.650]                       ...future.mc.cores.old <- base::getOption("mc.cores")
[13:23:59.650]                       base::options(mc.cores = 1L)
[13:23:59.650]                     }
[13:23:59.650]                     base::local({
[13:23:59.650]                       for (pkg in "future") {
[13:23:59.650]                         base::loadNamespace(pkg)
[13:23:59.650]                         base::library(pkg, character.only = TRUE)
[13:23:59.650]                       }
[13:23:59.650]                     })
[13:23:59.650]                   }
[13:23:59.650]                   options(future.plan = NULL)
[13:23:59.650]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:23:59.650]                   future::plan(list(b = function (..., workers = availableCores(), 
[13:23:59.650]                     lazy = FALSE, rscript_libs = .libPaths(), 
[13:23:59.650]                     envir = parent.frame()) 
[13:23:59.650]                   {
[13:23:59.650]                     if (is.function(workers)) 
[13:23:59.650]                       workers <- workers()
[13:23:59.650]                     workers <- structure(as.integer(workers), 
[13:23:59.650]                       class = class(workers))
[13:23:59.650]                     stop_if_not(length(workers) == 1, is.finite(workers), 
[13:23:59.650]                       workers >= 1)
[13:23:59.650]                     if (workers == 1L && !inherits(workers, "AsIs")) {
[13:23:59.650]                       return(sequential(..., lazy = TRUE, envir = envir))
[13:23:59.650]                     }
[13:23:59.650]                     future <- MultisessionFuture(..., workers = workers, 
[13:23:59.650]                       lazy = lazy, rscript_libs = rscript_libs, 
[13:23:59.650]                       envir = envir)
[13:23:59.650]                     if (!future$lazy) 
[13:23:59.650]                       future <- run(future)
[13:23:59.650]                     invisible(future)
[13:23:59.650]                   }), .cleanup = FALSE, .init = FALSE)
[13:23:59.650]                 }
[13:23:59.650]                 ...future.workdir <- getwd()
[13:23:59.650]             }
[13:23:59.650]             ...future.oldOptions <- base::as.list(base::.Options)
[13:23:59.650]             ...future.oldEnvVars <- base::Sys.getenv()
[13:23:59.650]         }
[13:23:59.650]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:23:59.650]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:23:59.650]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:23:59.650]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:23:59.650]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:23:59.650]             future.stdout.windows.reencode = NULL, width = 80L)
[13:23:59.650]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:23:59.650]             base::names(...future.oldOptions))
[13:23:59.650]     }
[13:23:59.650]     if (FALSE) {
[13:23:59.650]     }
[13:23:59.650]     else {
[13:23:59.650]         if (TRUE) {
[13:23:59.650]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:23:59.650]                 open = "w")
[13:23:59.650]         }
[13:23:59.650]         else {
[13:23:59.650]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:23:59.650]                 windows = "NUL", "/dev/null"), open = "w")
[13:23:59.650]         }
[13:23:59.650]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:23:59.650]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:23:59.650]             base::sink(type = "output", split = FALSE)
[13:23:59.650]             base::close(...future.stdout)
[13:23:59.650]         }, add = TRUE)
[13:23:59.650]     }
[13:23:59.650]     ...future.frame <- base::sys.nframe()
[13:23:59.650]     ...future.conditions <- base::list()
[13:23:59.650]     ...future.rng <- base::globalenv()$.Random.seed
[13:23:59.650]     if (FALSE) {
[13:23:59.650]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:23:59.650]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:23:59.650]     }
[13:23:59.650]     ...future.result <- base::tryCatch({
[13:23:59.650]         base::withCallingHandlers({
[13:23:59.650]             ...future.value <- base::withVisible(base::local({
[13:23:59.650]                 withCallingHandlers({
[13:23:59.650]                   {
[13:23:59.650]                     value(future(subset(data, a == 2)))
[13:23:59.650]                   }
[13:23:59.650]                 }, immediateCondition = function(cond) {
[13:23:59.650]                   save_rds <- function (object, pathname, ...) 
[13:23:59.650]                   {
[13:23:59.650]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[13:23:59.650]                     if (file_test("-f", pathname_tmp)) {
[13:23:59.650]                       fi_tmp <- file.info(pathname_tmp)
[13:23:59.650]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[13:23:59.650]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:23:59.650]                         fi_tmp[["mtime"]])
[13:23:59.650]                     }
[13:23:59.650]                     tryCatch({
[13:23:59.650]                       saveRDS(object, file = pathname_tmp, ...)
[13:23:59.650]                     }, error = function(ex) {
[13:23:59.650]                       msg <- conditionMessage(ex)
[13:23:59.650]                       fi_tmp <- file.info(pathname_tmp)
[13:23:59.650]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[13:23:59.650]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:23:59.650]                         fi_tmp[["mtime"]], msg)
[13:23:59.650]                       ex$message <- msg
[13:23:59.650]                       stop(ex)
[13:23:59.650]                     })
[13:23:59.650]                     stopifnot(file_test("-f", pathname_tmp))
[13:23:59.650]                     res <- file.rename(from = pathname_tmp, to = pathname)
[13:23:59.650]                     if (!res || file_test("-f", pathname_tmp)) {
[13:23:59.650]                       fi_tmp <- file.info(pathname_tmp)
[13:23:59.650]                       fi <- file.info(pathname)
[13:23:59.650]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[13:23:59.650]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:23:59.650]                         fi_tmp[["mtime"]], sQuote(pathname), 
[13:23:59.650]                         fi[["size"]], fi[["mtime"]])
[13:23:59.650]                       stop(msg)
[13:23:59.650]                     }
[13:23:59.650]                     invisible(pathname)
[13:23:59.650]                   }
[13:23:59.650]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[13:23:59.650]                     rootPath = tempdir()) 
[13:23:59.650]                   {
[13:23:59.650]                     obj <- list(time = Sys.time(), condition = cond)
[13:23:59.650]                     file <- tempfile(pattern = class(cond)[1], 
[13:23:59.650]                       tmpdir = path, fileext = ".rds")
[13:23:59.650]                     save_rds(obj, file)
[13:23:59.650]                   }
[13:23:59.650]                   saveImmediateCondition(cond, path = "/tmp/RtmpKOlrlL/.future/immediateConditions")
[13:23:59.650]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:23:59.650]                   {
[13:23:59.650]                     inherits <- base::inherits
[13:23:59.650]                     invokeRestart <- base::invokeRestart
[13:23:59.650]                     is.null <- base::is.null
[13:23:59.650]                     muffled <- FALSE
[13:23:59.650]                     if (inherits(cond, "message")) {
[13:23:59.650]                       muffled <- grepl(pattern, "muffleMessage")
[13:23:59.650]                       if (muffled) 
[13:23:59.650]                         invokeRestart("muffleMessage")
[13:23:59.650]                     }
[13:23:59.650]                     else if (inherits(cond, "warning")) {
[13:23:59.650]                       muffled <- grepl(pattern, "muffleWarning")
[13:23:59.650]                       if (muffled) 
[13:23:59.650]                         invokeRestart("muffleWarning")
[13:23:59.650]                     }
[13:23:59.650]                     else if (inherits(cond, "condition")) {
[13:23:59.650]                       if (!is.null(pattern)) {
[13:23:59.650]                         computeRestarts <- base::computeRestarts
[13:23:59.650]                         grepl <- base::grepl
[13:23:59.650]                         restarts <- computeRestarts(cond)
[13:23:59.650]                         for (restart in restarts) {
[13:23:59.650]                           name <- restart$name
[13:23:59.650]                           if (is.null(name)) 
[13:23:59.650]                             next
[13:23:59.650]                           if (!grepl(pattern, name)) 
[13:23:59.650]                             next
[13:23:59.650]                           invokeRestart(restart)
[13:23:59.650]                           muffled <- TRUE
[13:23:59.650]                           break
[13:23:59.650]                         }
[13:23:59.650]                       }
[13:23:59.650]                     }
[13:23:59.650]                     invisible(muffled)
[13:23:59.650]                   }
[13:23:59.650]                   muffleCondition(cond)
[13:23:59.650]                 })
[13:23:59.650]             }))
[13:23:59.650]             future::FutureResult(value = ...future.value$value, 
[13:23:59.650]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:23:59.650]                   ...future.rng), globalenv = if (FALSE) 
[13:23:59.650]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:23:59.650]                     ...future.globalenv.names))
[13:23:59.650]                 else NULL, started = ...future.startTime, version = "1.8")
[13:23:59.650]         }, condition = base::local({
[13:23:59.650]             c <- base::c
[13:23:59.650]             inherits <- base::inherits
[13:23:59.650]             invokeRestart <- base::invokeRestart
[13:23:59.650]             length <- base::length
[13:23:59.650]             list <- base::list
[13:23:59.650]             seq.int <- base::seq.int
[13:23:59.650]             signalCondition <- base::signalCondition
[13:23:59.650]             sys.calls <- base::sys.calls
[13:23:59.650]             `[[` <- base::`[[`
[13:23:59.650]             `+` <- base::`+`
[13:23:59.650]             `<<-` <- base::`<<-`
[13:23:59.650]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:23:59.650]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:23:59.650]                   3L)]
[13:23:59.650]             }
[13:23:59.650]             function(cond) {
[13:23:59.650]                 is_error <- inherits(cond, "error")
[13:23:59.650]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:23:59.650]                   NULL)
[13:23:59.650]                 if (is_error) {
[13:23:59.650]                   sessionInformation <- function() {
[13:23:59.650]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:23:59.650]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:23:59.650]                       search = base::search(), system = base::Sys.info())
[13:23:59.650]                   }
[13:23:59.650]                   ...future.conditions[[length(...future.conditions) + 
[13:23:59.650]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:23:59.650]                     cond$call), session = sessionInformation(), 
[13:23:59.650]                     timestamp = base::Sys.time(), signaled = 0L)
[13:23:59.650]                   signalCondition(cond)
[13:23:59.650]                 }
[13:23:59.650]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:23:59.650]                 "immediateCondition"))) {
[13:23:59.650]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:23:59.650]                   ...future.conditions[[length(...future.conditions) + 
[13:23:59.650]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:23:59.650]                   if (TRUE && !signal) {
[13:23:59.650]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:23:59.650]                     {
[13:23:59.650]                       inherits <- base::inherits
[13:23:59.650]                       invokeRestart <- base::invokeRestart
[13:23:59.650]                       is.null <- base::is.null
[13:23:59.650]                       muffled <- FALSE
[13:23:59.650]                       if (inherits(cond, "message")) {
[13:23:59.650]                         muffled <- grepl(pattern, "muffleMessage")
[13:23:59.650]                         if (muffled) 
[13:23:59.650]                           invokeRestart("muffleMessage")
[13:23:59.650]                       }
[13:23:59.650]                       else if (inherits(cond, "warning")) {
[13:23:59.650]                         muffled <- grepl(pattern, "muffleWarning")
[13:23:59.650]                         if (muffled) 
[13:23:59.650]                           invokeRestart("muffleWarning")
[13:23:59.650]                       }
[13:23:59.650]                       else if (inherits(cond, "condition")) {
[13:23:59.650]                         if (!is.null(pattern)) {
[13:23:59.650]                           computeRestarts <- base::computeRestarts
[13:23:59.650]                           grepl <- base::grepl
[13:23:59.650]                           restarts <- computeRestarts(cond)
[13:23:59.650]                           for (restart in restarts) {
[13:23:59.650]                             name <- restart$name
[13:23:59.650]                             if (is.null(name)) 
[13:23:59.650]                               next
[13:23:59.650]                             if (!grepl(pattern, name)) 
[13:23:59.650]                               next
[13:23:59.650]                             invokeRestart(restart)
[13:23:59.650]                             muffled <- TRUE
[13:23:59.650]                             break
[13:23:59.650]                           }
[13:23:59.650]                         }
[13:23:59.650]                       }
[13:23:59.650]                       invisible(muffled)
[13:23:59.650]                     }
[13:23:59.650]                     muffleCondition(cond, pattern = "^muffle")
[13:23:59.650]                   }
[13:23:59.650]                 }
[13:23:59.650]                 else {
[13:23:59.650]                   if (TRUE) {
[13:23:59.650]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:23:59.650]                     {
[13:23:59.650]                       inherits <- base::inherits
[13:23:59.650]                       invokeRestart <- base::invokeRestart
[13:23:59.650]                       is.null <- base::is.null
[13:23:59.650]                       muffled <- FALSE
[13:23:59.650]                       if (inherits(cond, "message")) {
[13:23:59.650]                         muffled <- grepl(pattern, "muffleMessage")
[13:23:59.650]                         if (muffled) 
[13:23:59.650]                           invokeRestart("muffleMessage")
[13:23:59.650]                       }
[13:23:59.650]                       else if (inherits(cond, "warning")) {
[13:23:59.650]                         muffled <- grepl(pattern, "muffleWarning")
[13:23:59.650]                         if (muffled) 
[13:23:59.650]                           invokeRestart("muffleWarning")
[13:23:59.650]                       }
[13:23:59.650]                       else if (inherits(cond, "condition")) {
[13:23:59.650]                         if (!is.null(pattern)) {
[13:23:59.650]                           computeRestarts <- base::computeRestarts
[13:23:59.650]                           grepl <- base::grepl
[13:23:59.650]                           restarts <- computeRestarts(cond)
[13:23:59.650]                           for (restart in restarts) {
[13:23:59.650]                             name <- restart$name
[13:23:59.650]                             if (is.null(name)) 
[13:23:59.650]                               next
[13:23:59.650]                             if (!grepl(pattern, name)) 
[13:23:59.650]                               next
[13:23:59.650]                             invokeRestart(restart)
[13:23:59.650]                             muffled <- TRUE
[13:23:59.650]                             break
[13:23:59.650]                           }
[13:23:59.650]                         }
[13:23:59.650]                       }
[13:23:59.650]                       invisible(muffled)
[13:23:59.650]                     }
[13:23:59.650]                     muffleCondition(cond, pattern = "^muffle")
[13:23:59.650]                   }
[13:23:59.650]                 }
[13:23:59.650]             }
[13:23:59.650]         }))
[13:23:59.650]     }, error = function(ex) {
[13:23:59.650]         base::structure(base::list(value = NULL, visible = NULL, 
[13:23:59.650]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:23:59.650]                 ...future.rng), started = ...future.startTime, 
[13:23:59.650]             finished = Sys.time(), session_uuid = NA_character_, 
[13:23:59.650]             version = "1.8"), class = "FutureResult")
[13:23:59.650]     }, finally = {
[13:23:59.650]         if (!identical(...future.workdir, getwd())) 
[13:23:59.650]             setwd(...future.workdir)
[13:23:59.650]         {
[13:23:59.650]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:23:59.650]                 ...future.oldOptions$nwarnings <- NULL
[13:23:59.650]             }
[13:23:59.650]             base::options(...future.oldOptions)
[13:23:59.650]             if (.Platform$OS.type == "windows") {
[13:23:59.650]                 old_names <- names(...future.oldEnvVars)
[13:23:59.650]                 envs <- base::Sys.getenv()
[13:23:59.650]                 names <- names(envs)
[13:23:59.650]                 common <- intersect(names, old_names)
[13:23:59.650]                 added <- setdiff(names, old_names)
[13:23:59.650]                 removed <- setdiff(old_names, names)
[13:23:59.650]                 changed <- common[...future.oldEnvVars[common] != 
[13:23:59.650]                   envs[common]]
[13:23:59.650]                 NAMES <- toupper(changed)
[13:23:59.650]                 args <- list()
[13:23:59.650]                 for (kk in seq_along(NAMES)) {
[13:23:59.650]                   name <- changed[[kk]]
[13:23:59.650]                   NAME <- NAMES[[kk]]
[13:23:59.650]                   if (name != NAME && is.element(NAME, old_names)) 
[13:23:59.650]                     next
[13:23:59.650]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:23:59.650]                 }
[13:23:59.650]                 NAMES <- toupper(added)
[13:23:59.650]                 for (kk in seq_along(NAMES)) {
[13:23:59.650]                   name <- added[[kk]]
[13:23:59.650]                   NAME <- NAMES[[kk]]
[13:23:59.650]                   if (name != NAME && is.element(NAME, old_names)) 
[13:23:59.650]                     next
[13:23:59.650]                   args[[name]] <- ""
[13:23:59.650]                 }
[13:23:59.650]                 NAMES <- toupper(removed)
[13:23:59.650]                 for (kk in seq_along(NAMES)) {
[13:23:59.650]                   name <- removed[[kk]]
[13:23:59.650]                   NAME <- NAMES[[kk]]
[13:23:59.650]                   if (name != NAME && is.element(NAME, old_names)) 
[13:23:59.650]                     next
[13:23:59.650]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:23:59.650]                 }
[13:23:59.650]                 if (length(args) > 0) 
[13:23:59.650]                   base::do.call(base::Sys.setenv, args = args)
[13:23:59.650]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:23:59.650]             }
[13:23:59.650]             else {
[13:23:59.650]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:23:59.650]             }
[13:23:59.650]             {
[13:23:59.650]                 if (base::length(...future.futureOptionsAdded) > 
[13:23:59.650]                   0L) {
[13:23:59.650]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:23:59.650]                   base::names(opts) <- ...future.futureOptionsAdded
[13:23:59.650]                   base::options(opts)
[13:23:59.650]                 }
[13:23:59.650]                 {
[13:23:59.650]                   {
[13:23:59.650]                     base::options(mc.cores = ...future.mc.cores.old)
[13:23:59.650]                     NULL
[13:23:59.650]                   }
[13:23:59.650]                   options(future.plan = NULL)
[13:23:59.650]                   if (is.na(NA_character_)) 
[13:23:59.650]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:23:59.650]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:23:59.650]                   future::plan(list(a = function (..., workers = availableCores(constraints = "multicore"), 
[13:23:59.650]                     envir = parent.frame()) 
[13:23:59.650]                   {
[13:23:59.650]                     default_workers <- missing(workers)
[13:23:59.650]                     if (is.function(workers)) 
[13:23:59.650]                       workers <- workers()
[13:23:59.650]                     workers <- structure(as.integer(workers), 
[13:23:59.650]                       class = class(workers))
[13:23:59.650]                     stop_if_not(is.finite(workers), workers >= 
[13:23:59.650]                       1L)
[13:23:59.650]                     if ((workers == 1L && !inherits(workers, 
[13:23:59.650]                       "AsIs")) || !supportsMulticore(warn = TRUE)) {
[13:23:59.650]                       if (default_workers) 
[13:23:59.650]                         supportsMulticore(warn = TRUE)
[13:23:59.650]                       return(sequential(..., envir = envir))
[13:23:59.650]                     }
[13:23:59.650]                     oopts <- options(mc.cores = workers)
[13:23:59.650]                     on.exit(options(oopts))
[13:23:59.650]                     future <- MulticoreFuture(..., workers = workers, 
[13:23:59.650]                       envir = envir)
[13:23:59.650]                     if (!future$lazy) 
[13:23:59.650]                       future <- run(future)
[13:23:59.650]                     invisible(future)
[13:23:59.650]                   }, b = function (..., workers = availableCores(), 
[13:23:59.650]                     lazy = FALSE, rscript_libs = .libPaths(), 
[13:23:59.650]                     envir = parent.frame()) 
[13:23:59.650]                   {
[13:23:59.650]                     if (is.function(workers)) 
[13:23:59.650]                       workers <- workers()
[13:23:59.650]                     workers <- structure(as.integer(workers), 
[13:23:59.650]                       class = class(workers))
[13:23:59.650]                     stop_if_not(length(workers) == 1, is.finite(workers), 
[13:23:59.650]                       workers >= 1)
[13:23:59.650]                     if (workers == 1L && !inherits(workers, "AsIs")) {
[13:23:59.650]                       return(sequential(..., lazy = TRUE, envir = envir))
[13:23:59.650]                     }
[13:23:59.650]                     future <- MultisessionFuture(..., workers = workers, 
[13:23:59.650]                       lazy = lazy, rscript_libs = rscript_libs, 
[13:23:59.650]                       envir = envir)
[13:23:59.650]                     if (!future$lazy) 
[13:23:59.650]                       future <- run(future)
[13:23:59.650]                     invisible(future)
[13:23:59.650]                   }), .cleanup = FALSE, .init = FALSE)
[13:23:59.650]                 }
[13:23:59.650]             }
[13:23:59.650]         }
[13:23:59.650]     })
[13:23:59.650]     if (TRUE) {
[13:23:59.650]         base::sink(type = "output", split = FALSE)
[13:23:59.650]         if (TRUE) {
[13:23:59.650]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:23:59.650]         }
[13:23:59.650]         else {
[13:23:59.650]             ...future.result["stdout"] <- base::list(NULL)
[13:23:59.650]         }
[13:23:59.650]         base::close(...future.stdout)
[13:23:59.650]         ...future.stdout <- NULL
[13:23:59.650]     }
[13:23:59.650]     ...future.result$conditions <- ...future.conditions
[13:23:59.650]     ...future.result$finished <- base::Sys.time()
[13:23:59.650]     ...future.result
[13:23:59.650] }
[13:23:59.653] assign_globals() ...
[13:23:59.654] List of 1
[13:23:59.654]  $ data:'data.frame':	3 obs. of  2 variables:
[13:23:59.654]   ..$ a: int [1:3] 1 2 3
[13:23:59.654]   ..$ b: int [1:3] 3 2 1
[13:23:59.654]  - attr(*, "where")=List of 1
[13:23:59.654]   ..$ data:<environment: R_EmptyEnv> 
[13:23:59.654]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[13:23:59.654]  - attr(*, "resolved")= logi FALSE
[13:23:59.654]  - attr(*, "total_size")= num 128
[13:23:59.654]  - attr(*, "already-done")= logi TRUE
[13:23:59.658] - copied ‘data’ to environment
[13:23:59.658] assign_globals() ... done
[13:23:59.658] requestCore(): workers = 2
[13:23:59.661] MulticoreFuture started
[13:23:59.661] - Launch lazy future ... done
[13:23:59.661] run() for ‘MulticoreFuture’ ... done
[13:23:59.662] result() for MulticoreFuture ...
[13:23:59.662] plan(): Setting new future strategy stack:
[13:23:59.662] List of future strategies:
[13:23:59.662] 1. multisession:
[13:23:59.662]    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[13:23:59.662]    - tweaked: FALSE
[13:23:59.662]    - call: plan(list(a = strategy1, b = strategy2))
[13:23:59.675] plan(): nbrOfWorkers() = 1
[13:23:59.707] plan(): Setting new future strategy stack:
[13:23:59.708] List of future strategies:
[13:23:59.708] 1. multicore:
[13:23:59.708]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[13:23:59.708]    - tweaked: FALSE
[13:23:59.708]    - call: plan(list(a = strategy1, b = strategy2))
[13:23:59.708] 2. multisession:
[13:23:59.708]    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[13:23:59.708]    - tweaked: FALSE
[13:23:59.708]    - call: plan(list(a = strategy1, b = strategy2))
[13:23:59.712] plan(): nbrOfWorkers() = 2
[13:23:59.717] result() for MulticoreFuture ...
[13:23:59.717] result() for MulticoreFuture ... done
[13:23:59.717] signalConditions() ...
[13:23:59.717]  - include = ‘immediateCondition’
[13:23:59.717]  - exclude = 
[13:23:59.717]  - resignal = FALSE
[13:23:59.717]  - Number of conditions: 52
[13:23:59.718] signalConditions() ... done
[13:23:59.718] result() for MulticoreFuture ... done
[13:23:59.718] result() for MulticoreFuture ...
[13:23:59.718] result() for MulticoreFuture ... done
[13:23:59.718] signalConditions() ...
[13:23:59.718]  - include = ‘immediateCondition’
[13:23:59.718]  - exclude = 
[13:23:59.718]  - resignal = FALSE
[13:23:59.718]  - Number of conditions: 52
[13:23:59.719] signalConditions() ... done
[13:23:59.719] Future state: ‘finished’
[13:23:59.719] result() for MulticoreFuture ...
[13:23:59.719] result() for MulticoreFuture ... done
[13:23:59.719] signalConditions() ...
[13:23:59.719]  - include = ‘condition’
[13:23:59.719]  - exclude = ‘immediateCondition’
[13:23:59.719]  - resignal = TRUE
[13:23:59.720]  - Number of conditions: 52
[13:23:59.720]  - Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:59.676] getGlobalsAndPackages() ...
[13:23:59.720]  - Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:59.676] Searching for globals...
[13:23:59.720]  - Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:59.678] - globals found: [4] ‘subset’, ‘data’, ‘==’, ‘a’
[13:23:59.720]  - Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:59.679] Searching for globals ... DONE
[13:23:59.720]  - Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:59.679] Resolving globals: FALSE
[13:23:59.721]  - Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:59.680] The total size of the 1 globals is 128 bytes (128 bytes)
[13:23:59.721]  - Condition #7: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:59.680] The total size of the 1 globals exported for future expression (‘subset(data, a == 2)’) is 128 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘data’ (128 bytes of class ‘list’)
[13:23:59.721]  - Condition #8: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:59.681] - globals: [1] ‘data’
[13:23:59.721]  - Condition #9: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:59.681] 
[13:23:59.721]  - Condition #10: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:59.681] getGlobalsAndPackages() ... DONE
[13:23:59.721]  - Condition #11: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:59.682] run() for ‘Future’ ...
[13:23:59.722]  - Condition #12: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:59.682] - state: ‘created’
[13:23:59.722]  - Condition #13: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:59.682] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[13:23:59.722]  - Condition #14: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:59.686] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[13:23:59.722]  - Condition #15: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:59.687] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[13:23:59.722]  - Condition #16: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:59.687]   - Field: ‘label’
[13:23:59.722]  - Condition #17: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:59.687]   - Field: ‘local’
[13:23:59.722]  - Condition #18: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:59.687]   - Field: ‘owner’
[13:23:59.723]  - Condition #19: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:59.687]   - Field: ‘envir’
[13:23:59.723]  - Condition #20: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:59.688]   - Field: ‘packages’
[13:23:59.723]  - Condition #21: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:59.688]   - Field: ‘gc’
[13:23:59.723]  - Condition #22: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:59.688]   - Field: ‘conditions’
[13:23:59.723]  - Condition #23: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:59.688]   - Field: ‘expr’
[13:23:59.723]  - Condition #24: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:59.688]   - Field: ‘uuid’
[13:23:59.724]  - Condition #25: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:59.689]   - Field: ‘seed’
[13:23:59.724]  - Condition #26: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:59.689]   - Field: ‘version’
[13:23:59.724]  - Condition #27: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:59.689]   - Field: ‘result’
[13:23:59.724]  - Condition #28: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:59.689]   - Field: ‘asynchronous’
[13:23:59.724]  - Condition #29: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:59.689]   - Field: ‘calls’
[13:23:59.724]  - Condition #30: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:59.689]   - Field: ‘globals’
[13:23:59.725]  - Condition #31: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:59.690]   - Field: ‘stdout’
[13:23:59.725]  - Condition #32: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:59.690]   - Field: ‘earlySignal’
[13:23:59.725]  - Condition #33: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:59.690]   - Field: ‘lazy’
[13:23:59.725]  - Condition #34: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:59.690]   - Field: ‘state’
[13:23:59.725]  - Condition #35: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:59.690] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[13:23:59.725]  - Condition #36: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:59.690] - Launch lazy future ...
[13:23:59.726]  - Condition #37: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:59.691] Packages needed by the future expression (n = 0): <none>
[13:23:59.726]  - Condition #38: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:59.691] Packages needed by future strategies (n = 0): <none>
[13:23:59.726]  - Condition #39: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:59.692] {
[13:23:59.692]     {
[13:23:59.692]         {
[13:23:59.692]             ...future.startTime <- base::Sys.time()
[13:23:59.692]             {
[13:23:59.692]                 {
[13:23:59.692]                   {
[13:23:59.692]                     base::local({
[13:23:59.692]                       has_future <- base::requireNamespace("future", 
[13:23:59.692]                         quietly = TRUE)
[13:23:59.692]                       if (has_future) {
[13:23:59.692]                         ns <- base::getNamespace("future")
[13:23:59.692]                         version <- ns[[".package"]][["version"]]
[13:23:59.692]                         if (is.null(version)) 
[13:23:59.692]                           version <- utils::packageVersion("future")
[13:23:59.692]                       }
[13:23:59.692]                       else {
[13:23:59.692]                         version <- NULL
[13:23:59.692]                       }
[13:23:59.692]                       if (!has_future || version < "1.8.0") {
[13:23:59.692]                         info <- base::c(r_version = base::gsub("R version ", 
[13:23:59.692]                           "", base::R.version$version.string), 
[13:23:59.692]                           platform = base::sprintf("%s (%s-bit)", 
[13:23:59.692]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:23:59.692]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[13:23:59.692]                             "release", "version")], collapse = " "), 
[13:23:59.692]                           hostname = base::Sys.info()[["nodename"]])
[13:23:59.692]                         info <- base::sprintf("%s: %s", base::names(info), 
[13:23:59.692]                           info)
[13:23:59.692]                         info <- base::paste(info, collapse = "; ")
[13:23:59.692]                         if (!has_future) {
[13:23:59.692]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:23:59.692]                             info)
[13:23:59.692]                         }
[13:23:59.692]                         else {
[13:23:59.692]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:23:59.692]                             info, version)
[13:23:59.692]                         }
[13:23:59.692]                         base::stop(msg)
[13:23:59.692]                       }
[13:23:59.692]                     })
[13:23:59.692]                   }
[13:23:59.692]                   options(future.plan = NULL)
[13:23:59.692]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:23:59.692]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:23:59.692]                 }
[13:23:59.692]                 ...future.workdir <- getwd()
[13:23:59.692]             }
[13:23:59.692]             ...future.oldOptions <- base::as.list(base::.Options)
[13:23:59.692]             ...future.oldEnvVars <- base::Sys.getenv()
[13:23:59.692]         }
[13:23:59.692]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:23:59.692]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:23:59.692]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:23:59.692]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:23:59.692]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:23:59.692]             future.stdout.windows.reencode = NULL, width = 80L)
[13:23:59.692]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:23:59.692]             base::names(...future.oldOptions))
[13:23:59.692]     }
[13:23:59.692]     if (FALSE) {
[13:23:59.692]     }
[13:23:59.692]     else {
[13:23:59.692]         if (TRUE) {
[13:23:59.692]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:23:59.692]                 open = "w")
[13:23:59.692]         }
[13:23:59.692]         else {
[13:23:59.692]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:23:59.692]                 windows = "NUL", "/dev/null"), open = "w")
[13:23:59.692]         }
[13:23:59.692]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:23:59.692]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:23:59.692]             base::sink(type = "output", split = FALSE)
[13:23:59.692]             base::close(...future.stdout)
[13:23:59.692]         }, add = TRUE)
[13:23:59.692]     }
[13:23:59.692]     ...future.frame <- base::sys.nframe()
[13:23:59.692]     ...future.conditions <- base::list()
[13:23:59.692]     ...future.rng <- base::globalenv()$.Random.seed
[13:23:59.692]     if (FALSE) {
[13:23:59.692]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:23:59.692]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:23:59.692]     }
[13:23:59.692]     ...future.result <- base::tryCatch({
[13:23:59.692]         base::withCallingHandlers({
[13:23:59.692]             ...future.value <- base::withVisible(base::local(subset(data, 
[13:23:59.692]                 a == 2)))
[13:23:59.692]             future::FutureResult(value = ...future.value$value, 
[13:23:59.692]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:23:59.692]                   ...future.rng), globalenv = if (FALSE) 
[13:23:59.692]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:23:59.692]                     ...future.globalenv.names))
[13:23:59.692]                 else NULL, started = ...future.startTime, version = "1.8")
[13:23:59.692]         }, condition = base::local({
[13:23:59.692]             c <- base::c
[13:23:59.692]             inherits <- base::inherits
[13:23:59.692]             invokeRestart <- base::invokeRestart
[13:23:59.692]             length <- base::length
[13:23:59.692]             list <- base::list
[13:23:59.692]             seq.int <- base::seq.int
[13:23:59.692]             signalCondition <- base::signalCondition
[13:23:59.692]             sys.calls <- base::sys.calls
[13:23:59.692]             `[[` <- base::`[[`
[13:23:59.692]             `+` <- base::`+`
[13:23:59.692]             `<<-` <- base::`<<-`
[13:23:59.692]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:23:59.692]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:23:59.692]                   3L)]
[13:23:59.692]             }
[13:23:59.692]             function(cond) {
[13:23:59.692]                 is_error <- inherits(cond, "error")
[13:23:59.692]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:23:59.692]                   NULL)
[13:23:59.692]                 if (is_error) {
[13:23:59.692]                   sessionInformation <- function() {
[13:23:59.692]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:23:59.692]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:23:59.692]                       search = base::search(), system = base::Sys.info())
[13:23:59.692]                   }
[13:23:59.692]                   ...future.conditions[[length(...future.conditions) + 
[13:23:59.692]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:23:59.692]                     cond$call), session = sessionInformation(), 
[13:23:59.692]                     timestamp = base::Sys.time(), signaled = 0L)
[13:23:59.692]                   signalCondition(cond)
[13:23:59.692]                 }
[13:23:59.692]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:23:59.692]                 "immediateCondition"))) {
[13:23:59.692]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:23:59.692]                   ...future.conditions[[length(...future.conditions) + 
[13:23:59.692]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:23:59.692]                   if (TRUE && !signal) {
[13:23:59.692]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:23:59.692]                     {
[13:23:59.692]                       inherits <- base::inherits
[13:23:59.692]                       invokeRestart <- base::invokeRestart
[13:23:59.692]                       is.null <- base::is.null
[13:23:59.692]                       muffled <- FALSE
[13:23:59.692]                       if (inherits(cond, "message")) {
[13:23:59.692]                         muffled <- grepl(pattern, "muffleMessage")
[13:23:59.692]                         if (muffled) 
[13:23:59.692]                           invokeRestart("muffleMessage")
[13:23:59.692]                       }
[13:23:59.692]                       else if (inherits(cond, "warning")) {
[13:23:59.692]                         muffled <- grepl(pattern, "muffleWarning")
[13:23:59.692]                         if (muffled) 
[13:23:59.692]                           invokeRestart("muffleWarning")
[13:23:59.692]                       }
[13:23:59.692]                       else if (inherits(cond, "condition")) {
[13:23:59.692]                         if (!is.null(pattern)) {
[13:23:59.692]                           computeRestarts <- base::computeRestarts
[13:23:59.692]                           grepl <- base::grepl
[13:23:59.692]                           restarts <- computeRestarts(cond)
[13:23:59.692]                           for (restart in restarts) {
[13:23:59.692]                             name <- restart$name
[13:23:59.692]                             if (is.null(name)) 
[13:23:59.692]                               next
[13:23:59.692]                             if (!grepl(pattern, name)) 
[13:23:59.692]                               next
[13:23:59.692]                             invokeRestart(restart)
[13:23:59.692]                             muffled <- TRUE
[13:23:59.692]                             break
[13:23:59.692]                           }
[13:23:59.692]                         }
[13:23:59.692]                       }
[13:23:59.692]                       invisible(muffled)
[13:23:59.692]                     }
[13:23:59.692]                     muffleCondition(cond, pattern = "^muffle")
[13:23:59.692]                   }
[13:23:59.692]                 }
[13:23:59.692]                 else {
[13:23:59.692]                   if (TRUE) {
[13:23:59.692]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:23:59.692]                     {
[13:23:59.692]                       inherits <- base::inherits
[13:23:59.692]                       invokeRestart <- base::invokeRestart
[13:23:59.692]                       is.null <- base::is.null
[13:23:59.692]                       muffled <- FALSE
[13:23:59.692]                       if (inherits(cond, "message")) {
[13:23:59.692]                         muffled <- grepl(pattern, "muffleMessage")
[13:23:59.692]                         if (muffled) 
[13:23:59.692]                           invokeRestart("muffleMessage")
[13:23:59.692]                       }
[13:23:59.692]                       else if (inherits(cond, "warning")) {
[13:23:59.692]                         muffled <- grepl(pattern, "muffleWarning")
[13:23:59.692]                         if (muffled) 
[13:23:59.692]                           invokeRestart("muffleWarning")
[13:23:59.692]                       }
[13:23:59.692]                       else if (inherits(cond, "condition")) {
[13:23:59.692]                         if (!is.null(pattern)) {
[13:23:59.692]                           computeRestarts <- base::computeRestarts
[13:23:59.692]                           grepl <- base::grepl
[13:23:59.692]                           restarts <- computeRestarts(cond)
[13:23:59.692]                           for (restart in restarts) {
[13:23:59.692]                             name <- restart$name
[13:23:59.692]                             if (is.null(name)) 
[13:23:59.692]                               next
[13:23:59.692]                             if (!grepl(pattern, name)) 
[13:23:59.692]                               next
[13:23:59.692]                             invokeRestart(restart)
[13:23:59.692]                             muffled <- TRUE
[13:23:59.692]                             break
[13:23:59.692]                           }
[13:23:59.692]                         }
[13:23:59.692]                       }
[13:23:59.692]                       invisible(muffled)
[13:23:59.692]                     }
[13:23:59.692]                     muffleCondition(cond, pattern = "^muffle")
[13:23:59.692]                   }
[13:23:59.692]                 }
[13:23:59.692]             }
[13:23:59.692]         }))
[13:23:59.692]     }, error = function(ex) {
[13:23:59.692]         base::structure(base::list(value = NULL, visible = NULL, 
[13:23:59.692]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:23:59.692]                 ...future.rng), started = ...future.startTime, 
[13:23:59.692]             finished = Sys.time(), session_uuid = NA_character_, 
[13:23:59.692]             version = "1.8"), class = "FutureResult")
[13:23:59.692]     }, finally = {
[13:23:59.692]         if (!identical(...future.workdir, getwd())) 
[13:23:59.692]             setwd(...future.workdir)
[13:23:59.692]         {
[13:23:59.692]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:23:59.692]                 ...future.oldOptions$nwarnings <- NULL
[13:23:59.692]             }
[13:23:59.692]             base::options(...future.oldOptions)
[13:23:59.692]             if (.Platform$OS.type == "windows") {
[13:23:59.692]                 old_names <- names(...future.oldEnvVars)
[13:23:59.692]                 envs <- base::Sys.getenv()
[13:23:59.692]                 names <- names(envs)
[13:23:59.692]                 common <- intersect(names, old_names)
[13:23:59.692]                 added <- setdiff(names, old_names)
[13:23:59.692]                 removed <- setdiff(old_names, names)
[13:23:59.692]                 changed <- common[...future.oldEnvVars[common] != 
[13:23:59.692]                   envs[common]]
[13:23:59.692]                 NAMES <- toupper(changed)
[13:23:59.692]                 args <- list()
[13:23:59.692]                 for (kk in seq_along(NAMES)) {
[13:23:59.692]                   name <- changed[[kk]]
[13:23:59.692]                   NAME <- NAMES[[kk]]
[13:23:59.692]                   if (name != NAME && is.element(NAME, old_names)) 
[13:23:59.692]                     next
[13:23:59.692]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:23:59.692]                 }
[13:23:59.692]                 NAMES <- toupper(added)
[13:23:59.692]                 for (kk in seq_along(NAMES)) {
[13:23:59.692]                   name <- added[[kk]]
[13:23:59.692]                   NAME <- NAMES[[kk]]
[13:23:59.692]                   if (name != NAME && is.element(NAME, old_names)) 
[13:23:59.692]                     next
[13:23:59.692]                   args[[name]] <- ""
[13:23:59.692]                 }
[13:23:59.692]                 NAMES <- toupper(removed)
[13:23:59.692]                 for (kk in seq_along(NAMES)) {
[13:23:59.692]                   name <- removed[[kk]]
[13:23:59.692]                   NAME <- NAMES[[kk]]
[13:23:59.692]                   if (name != NAME && is.element(NAME, old_names)) 
[13:23:59.692]                     next
[13:23:59.692]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:23:59.692]                 }
[13:23:59.692]                 if (length(args) > 0) 
[13:23:59.692]                   base::do.call(base::Sys.setenv, args = args)
[13:23:59.692]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:23:59.692]             }
[13:23:59.692]             else {
[13:23:59.692]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:23:59.692]             }
[13:23:59.692]             {
[13:23:59.692]                 if (base::length(...future.futureOptionsAdded) > 
[13:23:59.692]                   0L) {
[13:23:59.692]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:23:59.692]                   base::names(opts) <- ...future.futureOptionsAdded
[13:23:59.692]                   base::options(opts)
[13:23:59.692]                 }
[13:23:59.692]                 {
[13:23:59.692]                   {
[13:23:59.692]                     NULL
[13:23:59.692]                     RNGkind("Mersenne-Twister")
[13:23:59.692]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[13:23:59.692]                       inherits = FALSE)
[13:23:59.692]                   }
[13:23:59.692]                   options(future.plan = NULL)
[13:23:59.692]                   if (is.na(NA_character_)) 
[13:23:59.692]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:23:59.692]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:23:59.692]                   future::plan(list(b = function (..., workers = availableCores(), 
[13:23:59.692]                     lazy = FALSE, rscript_libs = .libPaths(), 
[13:23:59.692]                     envir = parent.frame()) 
[13:23:59.692]                   {
[13:23:59.692]                     if (is.function(workers)) 
[13:23:59.692]                       workers <- workers()
[13:23:59.692]                     workers <- structure(as.integer(workers), 
[13:23:59.692]                       class = class(workers))
[13:23:59.692]                     stop_if_not(length(workers) == 1, is.finite(workers), 
[13:23:59.692]                       workers >= 1)
[13:23:59.692]                     if (workers == 1L && !inherits(workers, "AsIs")) {
[13:23:59.692]                       return(sequential(..., lazy = TRUE, envir = envir))
[13:23:59.692]                     }
[13:23:59.692]                     future <- MultisessionFuture(..., workers = workers, 
[13:23:59.692]                       lazy = lazy, rscript_libs = rscript_libs, 
[13:23:59.692]                       envir = envir)
[13:23:59.692]                     if (!future$lazy) 
[13:23:59.692]                       future <- run(future)
[13:23:59.692]                     invisible(future)
[13:23:59.692]                   }), .cleanup = FALSE, .init = FALSE)
[13:23:59.692]                 }
[13:23:59.692]             }
[13:23:59.692]         }
[13:23:59.692]     })
[13:23:59.692]     if (TRUE) {
[13:23:59.692]         base::sink(type = "output", split = FALSE)
[13:23:59.692]         if (TRUE) {
[13:23:59.692]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:23:59.692]         }
[13:23:59.692]         else {
[13:23:59.692]             ...future.result["stdout"] <- base::list(NULL)
[13:23:59.692]         }
[13:23:59.692]         base::close(...future.stdout)
[13:23:59.692]         ...future.stdout <- NULL
[13:23:59.692]     }
[13:23:59.692]     ...future.result$conditions <- ...future.conditions
[13:23:59.692]     ...future.result$finished <- base::Sys.time()
[13:23:59.692]     ...future.result
[13:23:59.692] }
[13:23:59.726]  - Condition #40: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:59.694] assign_globals() ...
[13:23:59.726]  - Condition #41: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:59.694] List of 1
[13:23:59.694]  $ data:'data.frame':	3 obs. of  2 variables:
[13:23:59.694]   ..$ a: int [1:3] 1 2 3
[13:23:59.694]   ..$ b: int [1:3] 3 2 1
[13:23:59.694]  - attr(*, "where")=List of 1
[13:23:59.694]   ..$ data:<environment: R_EmptyEnv> 
[13:23:59.694]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[13:23:59.694]  - attr(*, "resolved")= logi FALSE
[13:23:59.694]  - attr(*, "total_size")= num 128
[13:23:59.694]  - attr(*, "already-done")= logi TRUE
[13:23:59.726]  - Condition #42: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:59.699] - copied ‘data’ to environment
[13:23:59.727]  - Condition #43: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:59.699] assign_globals() ... done
[13:23:59.727]  - Condition #44: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:59.700] plan(): Setting new future strategy stack:
[13:23:59.727]  - Condition #45: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:59.700] List of future strategies:
[13:23:59.700] 1. sequential:
[13:23:59.700]    - args: function (..., envir = parent.frame())
[13:23:59.700]    - tweaked: FALSE
[13:23:59.700]    - call: NULL
[13:23:59.727]  - Condition #46: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:59.700] plan(): nbrOfWorkers() = 1
[13:23:59.727]  - Condition #47: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:59.702] plan(): Setting new future strategy stack:
[13:23:59.727]  - Condition #48: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:59.702] List of future strategies:
[13:23:59.702] 1. multisession:
[13:23:59.702]    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[13:23:59.702]    - tweaked: FALSE
[13:23:59.702]    - call: plan(list(a = strategy1, b = strategy2))
[13:23:59.728]  - Condition #49: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:59.706] plan(): nbrOfWorkers() = 1
[13:23:59.728]  - Condition #50: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:59.706] SequentialFuture started (and completed)
[13:23:59.728]  - Condition #51: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:59.707] - Launch lazy future ... done
[13:23:59.728]  - Condition #52: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:59.707] run() for ‘SequentialFuture’ ... done
[13:23:59.728] signalConditions() ... done
- plan(list('multicore', 'multisession')) ... DONE
- plan(list('multisession', 'sequential')) ...
[13:23:59.729] plan(): Setting new future strategy stack:
[13:23:59.729] List of future strategies:
[13:23:59.729] 1. multisession:
[13:23:59.729]    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[13:23:59.729]    - tweaked: FALSE
[13:23:59.729]    - call: plan(list(a = strategy1, b = strategy2))
[13:23:59.729] 2. sequential:
[13:23:59.729]    - args: function (..., envir = parent.frame())
[13:23:59.729]    - tweaked: FALSE
[13:23:59.729]    - call: plan(list(a = strategy1, b = strategy2))
[13:23:59.730] plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ...
[13:23:59.730] multisession:
[13:23:59.730] - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[13:23:59.730] - tweaked: FALSE
[13:23:59.730] - call: plan(list(a = strategy1, b = strategy2))
[13:23:59.734] getGlobalsAndPackages() ...
[13:23:59.734] Not searching for globals
[13:23:59.735] - globals: [0] <none>
[13:23:59.735] getGlobalsAndPackages() ... DONE
[13:23:59.735] [local output] makeClusterPSOCK() ...
[13:23:59.739] [local output] Workers: [n = 2] ‘localhost’, ‘localhost’
[13:23:59.739] [local output] Base port: 11928
[13:23:59.740] [local output] Getting setup options for 2 cluster nodes ...
[13:23:59.740] [local output]  - Node 1 of 2 ...
[13:23:59.740] [local output] localMachine=TRUE => revtunnel=FALSE

[13:23:59.741] [local output] Rscript port: 11928

[13:23:59.741] [local output]  - Node 2 of 2 ...
[13:23:59.742] [local output] localMachine=TRUE => revtunnel=FALSE

[13:23:59.742] [local output] Rscript port: 11928

[13:23:59.743] [local output] Getting setup options for 2 cluster nodes ... done
[13:23:59.743] [local output]  - Parallel setup requested for some PSOCK nodes
[13:23:59.743] [local output] Setting up PSOCK nodes in parallel
[13:23:59.743] List of 36
[13:23:59.743]  $ worker          : chr "localhost"
[13:23:59.743]   ..- attr(*, "localhost")= logi TRUE
[13:23:59.743]  $ master          : chr "localhost"
[13:23:59.743]  $ port            : int 11928
[13:23:59.743]  $ connectTimeout  : num 120
[13:23:59.743]  $ timeout         : num 2592000
[13:23:59.743]  $ rscript         : chr "'/usr/local/lib/R/bin/Rscript'"
[13:23:59.743]  $ homogeneous     : logi TRUE
[13:23:59.743]  $ rscript_args    : chr "--default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),fi"| __truncated__
[13:23:59.743]  $ rscript_envs    : NULL
[13:23:59.743]  $ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[13:23:59.743]  $ rscript_startup : NULL
[13:23:59.743]  $ rscript_sh      : chr "sh"
[13:23:59.743]  $ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[13:23:59.743]  $ methods         : logi TRUE
[13:23:59.743]  $ socketOptions   : chr "no-delay"
[13:23:59.743]  $ useXDR          : logi FALSE
[13:23:59.743]  $ outfile         : chr "/dev/null"
[13:23:59.743]  $ renice          : int NA
[13:23:59.743]  $ rshcmd          : NULL
[13:23:59.743]  $ user            : chr(0) 
[13:23:59.743]  $ revtunnel       : logi FALSE
[13:23:59.743]  $ rshlogfile      : NULL
[13:23:59.743]  $ rshopts         : chr(0) 
[13:23:59.743]  $ rank            : int 1
[13:23:59.743]  $ manual          : logi FALSE
[13:23:59.743]  $ dryrun          : logi FALSE
[13:23:59.743]  $ quiet           : logi FALSE
[13:23:59.743]  $ setup_strategy  : chr "parallel"
[13:23:59.743]  $ local_cmd       : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[13:23:59.743]  $ pidfile         : chr "/tmp/RtmpKOlrlL/worker.rank=1.parallelly.parent=90070.15fd667a4a54.pid"
[13:23:59.743]  $ rshcmd_label    : NULL
[13:23:59.743]  $ rsh_call        : NULL
[13:23:59.743]  $ cmd             : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[13:23:59.743]  $ localMachine    : logi TRUE
[13:23:59.743]  $ make_fcn        :function (worker = getOption2("parallelly.localhost.hostname", "localhost"), 
[13:23:59.743]     master = NULL, port, connectTimeout = getOption2("parallelly.makeNodePSOCK.connectTimeout", 
[13:23:59.743]         2 * 60), timeout = getOption2("parallelly.makeNodePSOCK.timeout", 
[13:23:59.743]         30 * 24 * 60 * 60), rscript = NULL, homogeneous = NULL, rscript_args = NULL, 
[13:23:59.743]     rscript_envs = NULL, rscript_libs = NULL, rscript_startup = NULL, rscript_sh = c("auto", 
[13:23:59.743]         "cmd", "sh"), default_packages = c("datasets", "utils", "grDevices", 
[13:23:59.743]         "graphics", "stats", if (methods) "methods"), methods = TRUE, socketOptions = getOption2("parallelly.makeNodePSOCK.socketOptions", 
[13:23:59.743]         "no-delay"), useXDR = getOption2("parallelly.makeNodePSOCK.useXDR", 
[13:23:59.743]         FALSE), outfile = "/dev/null", renice = NA_integer_, rshcmd = getOption2("parallelly.makeNodePSOCK.rshcmd", 
[13:23:59.743]         NULL), user = NULL, revtunnel = NA, rshlogfile = NULL, rshopts = getOption2("parallelly.makeNodePSOCK.rshopts", 
[13:23:59.743]         NULL), rank = 1L, manual = FALSE, dryrun = FALSE, quiet = FALSE, 
[13:23:59.743]     setup_strategy = getOption2("parallelly.makeNodePSOCK.setup_strategy", 
[13:23:59.743]         "parallel"), action = c("launch", "options"), verbose = FALSE)  
[13:23:59.743]  $ arguments       :List of 28
[13:23:59.743]   ..$ worker          : chr "localhost"
[13:23:59.743]   ..$ master          : NULL
[13:23:59.743]   ..$ port            : int 11928
[13:23:59.743]   ..$ connectTimeout  : num 120
[13:23:59.743]   ..$ timeout         : num 2592000
[13:23:59.743]   ..$ rscript         : NULL
[13:23:59.743]   ..$ homogeneous     : NULL
[13:23:59.743]   ..$ rscript_args    : NULL
[13:23:59.743]   ..$ rscript_envs    : NULL
[13:23:59.743]   ..$ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[13:23:59.743]   ..$ rscript_startup : NULL
[13:23:59.743]   ..$ rscript_sh      : chr [1:3] "auto" "cmd" "sh"
[13:23:59.743]   ..$ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[13:23:59.743]   ..$ methods         : logi TRUE
[13:23:59.743]   ..$ socketOptions   : chr "no-delay"
[13:23:59.743]   ..$ useXDR          : logi FALSE
[13:23:59.743]   ..$ outfile         : chr "/dev/null"
[13:23:59.743]   ..$ renice          : int NA
[13:23:59.743]   ..$ rshcmd          : NULL
[13:23:59.743]   ..$ user            : NULL
[13:23:59.743]   ..$ revtunnel       : logi NA
[13:23:59.743]   ..$ rshlogfile      : NULL
[13:23:59.743]   ..$ rshopts         : NULL
[13:23:59.743]   ..$ rank            : int 1
[13:23:59.743]   ..$ manual          : logi FALSE
[13:23:59.743]   ..$ dryrun          : logi FALSE
[13:23:59.743]   ..$ quiet           : logi FALSE
[13:23:59.743]   ..$ setup_strategy  : chr "parallel"
[13:23:59.743]  - attr(*, "class")= chr [1:2] "makeNodePSOCKOptions" "makeNodeOptions"
[13:23:59.765] [local output] System call to launch all workers:
[13:23:59.765] [local output] '/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/RtmpKOlrlL/worker.rank=1.parallelly.parent=90070.15fd667a4a54.pid")), silent = TRUE)' -e 'options(socketOptions = "no-delay")' -e '.libPaths(c("/usr/local/lib/R/site-library","/usr/local/lib/R/library"))' -e 'workRSOCK <- tryCatch(parallel:::.workRSOCK, error=function(e) parallel:::.slaveRSOCK); workRSOCK()' MASTER=localhost PORT=11928 OUT=/dev/null TIMEOUT=2592000 XDR=FALSE SETUPTIMEOUT=120 SETUPSTRATEGY=parallel
[13:23:59.765] [local output] Starting PSOCK main server
[13:23:59.767] [local output] Workers launched
[13:23:59.767] [local output] Waiting for workers to connect back
[13:23:59.767]  - [local output] 0 workers out of 2 ready
[13:24:00.021]  - [local output] 0 workers out of 2 ready
[13:24:00.021]  - [local output] 1 workers out of 2 ready
[13:24:00.023]  - [local output] 1 workers out of 2 ready
[13:24:00.024]  - [local output] 2 workers out of 2 ready
[13:24:00.024] [local output] Launching of workers completed
[13:24:00.024] [local output] Collecting session information from workers
[13:24:00.025] [local output]  - Worker #1 of 2
[13:24:00.025] [local output]  - Worker #2 of 2
[13:24:00.026] [local output] makeClusterPSOCK() ... done
[13:24:00.037] Packages needed by the future expression (n = 0): <none>
[13:24:00.037] Packages needed by future strategies (n = 1): ‘future’
[13:24:00.037] {
[13:24:00.037]     {
[13:24:00.037]         {
[13:24:00.037]             ...future.startTime <- base::Sys.time()
[13:24:00.037]             {
[13:24:00.037]                 {
[13:24:00.037]                   {
[13:24:00.037]                     {
[13:24:00.037]                       {
[13:24:00.037]                         base::local({
[13:24:00.037]                           has_future <- base::requireNamespace("future", 
[13:24:00.037]                             quietly = TRUE)
[13:24:00.037]                           if (has_future) {
[13:24:00.037]                             ns <- base::getNamespace("future")
[13:24:00.037]                             version <- ns[[".package"]][["version"]]
[13:24:00.037]                             if (is.null(version)) 
[13:24:00.037]                               version <- utils::packageVersion("future")
[13:24:00.037]                           }
[13:24:00.037]                           else {
[13:24:00.037]                             version <- NULL
[13:24:00.037]                           }
[13:24:00.037]                           if (!has_future || version < "1.8.0") {
[13:24:00.037]                             info <- base::c(r_version = base::gsub("R version ", 
[13:24:00.037]                               "", base::R.version$version.string), 
[13:24:00.037]                               platform = base::sprintf("%s (%s-bit)", 
[13:24:00.037]                                 base::R.version$platform, 8 * 
[13:24:00.037]                                   base::.Machine$sizeof.pointer), 
[13:24:00.037]                               os = base::paste(base::Sys.info()[base::c("sysname", 
[13:24:00.037]                                 "release", "version")], collapse = " "), 
[13:24:00.037]                               hostname = base::Sys.info()[["nodename"]])
[13:24:00.037]                             info <- base::sprintf("%s: %s", base::names(info), 
[13:24:00.037]                               info)
[13:24:00.037]                             info <- base::paste(info, collapse = "; ")
[13:24:00.037]                             if (!has_future) {
[13:24:00.037]                               msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:24:00.037]                                 info)
[13:24:00.037]                             }
[13:24:00.037]                             else {
[13:24:00.037]                               msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:24:00.037]                                 info, version)
[13:24:00.037]                             }
[13:24:00.037]                             base::stop(msg)
[13:24:00.037]                           }
[13:24:00.037]                         })
[13:24:00.037]                       }
[13:24:00.037]                       ...future.mc.cores.old <- base::getOption("mc.cores")
[13:24:00.037]                       base::options(mc.cores = 1L)
[13:24:00.037]                     }
[13:24:00.037]                     base::local({
[13:24:00.037]                       for (pkg in "future") {
[13:24:00.037]                         base::loadNamespace(pkg)
[13:24:00.037]                         base::library(pkg, character.only = TRUE)
[13:24:00.037]                       }
[13:24:00.037]                     })
[13:24:00.037]                   }
[13:24:00.037]                   options(future.plan = NULL)
[13:24:00.037]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:24:00.037]                   future::plan(list(b = function (..., envir = parent.frame()) 
[13:24:00.037]                   {
[13:24:00.037]                     future <- SequentialFuture(..., envir = envir)
[13:24:00.037]                     if (!future$lazy) 
[13:24:00.037]                       future <- run(future)
[13:24:00.037]                     invisible(future)
[13:24:00.037]                   }), .cleanup = FALSE, .init = FALSE)
[13:24:00.037]                 }
[13:24:00.037]                 ...future.workdir <- getwd()
[13:24:00.037]             }
[13:24:00.037]             ...future.oldOptions <- base::as.list(base::.Options)
[13:24:00.037]             ...future.oldEnvVars <- base::Sys.getenv()
[13:24:00.037]         }
[13:24:00.037]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:24:00.037]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:24:00.037]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:24:00.037]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:24:00.037]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:24:00.037]             future.stdout.windows.reencode = NULL, width = 80L)
[13:24:00.037]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:24:00.037]             base::names(...future.oldOptions))
[13:24:00.037]     }
[13:24:00.037]     if (FALSE) {
[13:24:00.037]     }
[13:24:00.037]     else {
[13:24:00.037]         if (TRUE) {
[13:24:00.037]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:24:00.037]                 open = "w")
[13:24:00.037]         }
[13:24:00.037]         else {
[13:24:00.037]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:24:00.037]                 windows = "NUL", "/dev/null"), open = "w")
[13:24:00.037]         }
[13:24:00.037]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:24:00.037]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:24:00.037]             base::sink(type = "output", split = FALSE)
[13:24:00.037]             base::close(...future.stdout)
[13:24:00.037]         }, add = TRUE)
[13:24:00.037]     }
[13:24:00.037]     ...future.frame <- base::sys.nframe()
[13:24:00.037]     ...future.conditions <- base::list()
[13:24:00.037]     ...future.rng <- base::globalenv()$.Random.seed
[13:24:00.037]     if (FALSE) {
[13:24:00.037]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:24:00.037]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:24:00.037]     }
[13:24:00.037]     ...future.result <- base::tryCatch({
[13:24:00.037]         base::withCallingHandlers({
[13:24:00.037]             ...future.value <- base::withVisible(base::local({
[13:24:00.037]                 ...future.makeSendCondition <- base::local({
[13:24:00.037]                   sendCondition <- NULL
[13:24:00.037]                   function(frame = 1L) {
[13:24:00.037]                     if (is.function(sendCondition)) 
[13:24:00.037]                       return(sendCondition)
[13:24:00.037]                     ns <- getNamespace("parallel")
[13:24:00.037]                     if (exists("sendData", mode = "function", 
[13:24:00.037]                       envir = ns)) {
[13:24:00.037]                       parallel_sendData <- get("sendData", mode = "function", 
[13:24:00.037]                         envir = ns)
[13:24:00.037]                       envir <- sys.frame(frame)
[13:24:00.037]                       master <- NULL
[13:24:00.037]                       while (!identical(envir, .GlobalEnv) && 
[13:24:00.037]                         !identical(envir, emptyenv())) {
[13:24:00.037]                         if (exists("master", mode = "list", envir = envir, 
[13:24:00.037]                           inherits = FALSE)) {
[13:24:00.037]                           master <- get("master", mode = "list", 
[13:24:00.037]                             envir = envir, inherits = FALSE)
[13:24:00.037]                           if (inherits(master, c("SOCKnode", 
[13:24:00.037]                             "SOCK0node"))) {
[13:24:00.037]                             sendCondition <<- function(cond) {
[13:24:00.037]                               data <- list(type = "VALUE", value = cond, 
[13:24:00.037]                                 success = TRUE)
[13:24:00.037]                               parallel_sendData(master, data)
[13:24:00.037]                             }
[13:24:00.037]                             return(sendCondition)
[13:24:00.037]                           }
[13:24:00.037]                         }
[13:24:00.037]                         frame <- frame + 1L
[13:24:00.037]                         envir <- sys.frame(frame)
[13:24:00.037]                       }
[13:24:00.037]                     }
[13:24:00.037]                     sendCondition <<- function(cond) NULL
[13:24:00.037]                   }
[13:24:00.037]                 })
[13:24:00.037]                 withCallingHandlers({
[13:24:00.037]                   NA
[13:24:00.037]                 }, immediateCondition = function(cond) {
[13:24:00.037]                   sendCondition <- ...future.makeSendCondition()
[13:24:00.037]                   sendCondition(cond)
[13:24:00.037]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:24:00.037]                   {
[13:24:00.037]                     inherits <- base::inherits
[13:24:00.037]                     invokeRestart <- base::invokeRestart
[13:24:00.037]                     is.null <- base::is.null
[13:24:00.037]                     muffled <- FALSE
[13:24:00.037]                     if (inherits(cond, "message")) {
[13:24:00.037]                       muffled <- grepl(pattern, "muffleMessage")
[13:24:00.037]                       if (muffled) 
[13:24:00.037]                         invokeRestart("muffleMessage")
[13:24:00.037]                     }
[13:24:00.037]                     else if (inherits(cond, "warning")) {
[13:24:00.037]                       muffled <- grepl(pattern, "muffleWarning")
[13:24:00.037]                       if (muffled) 
[13:24:00.037]                         invokeRestart("muffleWarning")
[13:24:00.037]                     }
[13:24:00.037]                     else if (inherits(cond, "condition")) {
[13:24:00.037]                       if (!is.null(pattern)) {
[13:24:00.037]                         computeRestarts <- base::computeRestarts
[13:24:00.037]                         grepl <- base::grepl
[13:24:00.037]                         restarts <- computeRestarts(cond)
[13:24:00.037]                         for (restart in restarts) {
[13:24:00.037]                           name <- restart$name
[13:24:00.037]                           if (is.null(name)) 
[13:24:00.037]                             next
[13:24:00.037]                           if (!grepl(pattern, name)) 
[13:24:00.037]                             next
[13:24:00.037]                           invokeRestart(restart)
[13:24:00.037]                           muffled <- TRUE
[13:24:00.037]                           break
[13:24:00.037]                         }
[13:24:00.037]                       }
[13:24:00.037]                     }
[13:24:00.037]                     invisible(muffled)
[13:24:00.037]                   }
[13:24:00.037]                   muffleCondition(cond)
[13:24:00.037]                 })
[13:24:00.037]             }))
[13:24:00.037]             future::FutureResult(value = ...future.value$value, 
[13:24:00.037]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:24:00.037]                   ...future.rng), globalenv = if (FALSE) 
[13:24:00.037]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:24:00.037]                     ...future.globalenv.names))
[13:24:00.037]                 else NULL, started = ...future.startTime, version = "1.8")
[13:24:00.037]         }, condition = base::local({
[13:24:00.037]             c <- base::c
[13:24:00.037]             inherits <- base::inherits
[13:24:00.037]             invokeRestart <- base::invokeRestart
[13:24:00.037]             length <- base::length
[13:24:00.037]             list <- base::list
[13:24:00.037]             seq.int <- base::seq.int
[13:24:00.037]             signalCondition <- base::signalCondition
[13:24:00.037]             sys.calls <- base::sys.calls
[13:24:00.037]             `[[` <- base::`[[`
[13:24:00.037]             `+` <- base::`+`
[13:24:00.037]             `<<-` <- base::`<<-`
[13:24:00.037]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:24:00.037]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:24:00.037]                   3L)]
[13:24:00.037]             }
[13:24:00.037]             function(cond) {
[13:24:00.037]                 is_error <- inherits(cond, "error")
[13:24:00.037]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:24:00.037]                   NULL)
[13:24:00.037]                 if (is_error) {
[13:24:00.037]                   sessionInformation <- function() {
[13:24:00.037]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:24:00.037]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:24:00.037]                       search = base::search(), system = base::Sys.info())
[13:24:00.037]                   }
[13:24:00.037]                   ...future.conditions[[length(...future.conditions) + 
[13:24:00.037]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:24:00.037]                     cond$call), session = sessionInformation(), 
[13:24:00.037]                     timestamp = base::Sys.time(), signaled = 0L)
[13:24:00.037]                   signalCondition(cond)
[13:24:00.037]                 }
[13:24:00.037]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:24:00.037]                 "immediateCondition"))) {
[13:24:00.037]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:24:00.037]                   ...future.conditions[[length(...future.conditions) + 
[13:24:00.037]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:24:00.037]                   if (TRUE && !signal) {
[13:24:00.037]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:24:00.037]                     {
[13:24:00.037]                       inherits <- base::inherits
[13:24:00.037]                       invokeRestart <- base::invokeRestart
[13:24:00.037]                       is.null <- base::is.null
[13:24:00.037]                       muffled <- FALSE
[13:24:00.037]                       if (inherits(cond, "message")) {
[13:24:00.037]                         muffled <- grepl(pattern, "muffleMessage")
[13:24:00.037]                         if (muffled) 
[13:24:00.037]                           invokeRestart("muffleMessage")
[13:24:00.037]                       }
[13:24:00.037]                       else if (inherits(cond, "warning")) {
[13:24:00.037]                         muffled <- grepl(pattern, "muffleWarning")
[13:24:00.037]                         if (muffled) 
[13:24:00.037]                           invokeRestart("muffleWarning")
[13:24:00.037]                       }
[13:24:00.037]                       else if (inherits(cond, "condition")) {
[13:24:00.037]                         if (!is.null(pattern)) {
[13:24:00.037]                           computeRestarts <- base::computeRestarts
[13:24:00.037]                           grepl <- base::grepl
[13:24:00.037]                           restarts <- computeRestarts(cond)
[13:24:00.037]                           for (restart in restarts) {
[13:24:00.037]                             name <- restart$name
[13:24:00.037]                             if (is.null(name)) 
[13:24:00.037]                               next
[13:24:00.037]                             if (!grepl(pattern, name)) 
[13:24:00.037]                               next
[13:24:00.037]                             invokeRestart(restart)
[13:24:00.037]                             muffled <- TRUE
[13:24:00.037]                             break
[13:24:00.037]                           }
[13:24:00.037]                         }
[13:24:00.037]                       }
[13:24:00.037]                       invisible(muffled)
[13:24:00.037]                     }
[13:24:00.037]                     muffleCondition(cond, pattern = "^muffle")
[13:24:00.037]                   }
[13:24:00.037]                 }
[13:24:00.037]                 else {
[13:24:00.037]                   if (TRUE) {
[13:24:00.037]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:24:00.037]                     {
[13:24:00.037]                       inherits <- base::inherits
[13:24:00.037]                       invokeRestart <- base::invokeRestart
[13:24:00.037]                       is.null <- base::is.null
[13:24:00.037]                       muffled <- FALSE
[13:24:00.037]                       if (inherits(cond, "message")) {
[13:24:00.037]                         muffled <- grepl(pattern, "muffleMessage")
[13:24:00.037]                         if (muffled) 
[13:24:00.037]                           invokeRestart("muffleMessage")
[13:24:00.037]                       }
[13:24:00.037]                       else if (inherits(cond, "warning")) {
[13:24:00.037]                         muffled <- grepl(pattern, "muffleWarning")
[13:24:00.037]                         if (muffled) 
[13:24:00.037]                           invokeRestart("muffleWarning")
[13:24:00.037]                       }
[13:24:00.037]                       else if (inherits(cond, "condition")) {
[13:24:00.037]                         if (!is.null(pattern)) {
[13:24:00.037]                           computeRestarts <- base::computeRestarts
[13:24:00.037]                           grepl <- base::grepl
[13:24:00.037]                           restarts <- computeRestarts(cond)
[13:24:00.037]                           for (restart in restarts) {
[13:24:00.037]                             name <- restart$name
[13:24:00.037]                             if (is.null(name)) 
[13:24:00.037]                               next
[13:24:00.037]                             if (!grepl(pattern, name)) 
[13:24:00.037]                               next
[13:24:00.037]                             invokeRestart(restart)
[13:24:00.037]                             muffled <- TRUE
[13:24:00.037]                             break
[13:24:00.037]                           }
[13:24:00.037]                         }
[13:24:00.037]                       }
[13:24:00.037]                       invisible(muffled)
[13:24:00.037]                     }
[13:24:00.037]                     muffleCondition(cond, pattern = "^muffle")
[13:24:00.037]                   }
[13:24:00.037]                 }
[13:24:00.037]             }
[13:24:00.037]         }))
[13:24:00.037]     }, error = function(ex) {
[13:24:00.037]         base::structure(base::list(value = NULL, visible = NULL, 
[13:24:00.037]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:24:00.037]                 ...future.rng), started = ...future.startTime, 
[13:24:00.037]             finished = Sys.time(), session_uuid = NA_character_, 
[13:24:00.037]             version = "1.8"), class = "FutureResult")
[13:24:00.037]     }, finally = {
[13:24:00.037]         if (!identical(...future.workdir, getwd())) 
[13:24:00.037]             setwd(...future.workdir)
[13:24:00.037]         {
[13:24:00.037]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:24:00.037]                 ...future.oldOptions$nwarnings <- NULL
[13:24:00.037]             }
[13:24:00.037]             base::options(...future.oldOptions)
[13:24:00.037]             if (.Platform$OS.type == "windows") {
[13:24:00.037]                 old_names <- names(...future.oldEnvVars)
[13:24:00.037]                 envs <- base::Sys.getenv()
[13:24:00.037]                 names <- names(envs)
[13:24:00.037]                 common <- intersect(names, old_names)
[13:24:00.037]                 added <- setdiff(names, old_names)
[13:24:00.037]                 removed <- setdiff(old_names, names)
[13:24:00.037]                 changed <- common[...future.oldEnvVars[common] != 
[13:24:00.037]                   envs[common]]
[13:24:00.037]                 NAMES <- toupper(changed)
[13:24:00.037]                 args <- list()
[13:24:00.037]                 for (kk in seq_along(NAMES)) {
[13:24:00.037]                   name <- changed[[kk]]
[13:24:00.037]                   NAME <- NAMES[[kk]]
[13:24:00.037]                   if (name != NAME && is.element(NAME, old_names)) 
[13:24:00.037]                     next
[13:24:00.037]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:24:00.037]                 }
[13:24:00.037]                 NAMES <- toupper(added)
[13:24:00.037]                 for (kk in seq_along(NAMES)) {
[13:24:00.037]                   name <- added[[kk]]
[13:24:00.037]                   NAME <- NAMES[[kk]]
[13:24:00.037]                   if (name != NAME && is.element(NAME, old_names)) 
[13:24:00.037]                     next
[13:24:00.037]                   args[[name]] <- ""
[13:24:00.037]                 }
[13:24:00.037]                 NAMES <- toupper(removed)
[13:24:00.037]                 for (kk in seq_along(NAMES)) {
[13:24:00.037]                   name <- removed[[kk]]
[13:24:00.037]                   NAME <- NAMES[[kk]]
[13:24:00.037]                   if (name != NAME && is.element(NAME, old_names)) 
[13:24:00.037]                     next
[13:24:00.037]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:24:00.037]                 }
[13:24:00.037]                 if (length(args) > 0) 
[13:24:00.037]                   base::do.call(base::Sys.setenv, args = args)
[13:24:00.037]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:24:00.037]             }
[13:24:00.037]             else {
[13:24:00.037]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:24:00.037]             }
[13:24:00.037]             {
[13:24:00.037]                 if (base::length(...future.futureOptionsAdded) > 
[13:24:00.037]                   0L) {
[13:24:00.037]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:24:00.037]                   base::names(opts) <- ...future.futureOptionsAdded
[13:24:00.037]                   base::options(opts)
[13:24:00.037]                 }
[13:24:00.037]                 {
[13:24:00.037]                   {
[13:24:00.037]                     base::options(mc.cores = ...future.mc.cores.old)
[13:24:00.037]                     NULL
[13:24:00.037]                   }
[13:24:00.037]                   options(future.plan = NULL)
[13:24:00.037]                   if (is.na(NA_character_)) 
[13:24:00.037]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:24:00.037]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:24:00.037]                   future::plan(list(a = function (..., workers = availableCores(), 
[13:24:00.037]                     lazy = FALSE, rscript_libs = .libPaths(), 
[13:24:00.037]                     envir = parent.frame()) 
[13:24:00.037]                   {
[13:24:00.037]                     if (is.function(workers)) 
[13:24:00.037]                       workers <- workers()
[13:24:00.037]                     workers <- structure(as.integer(workers), 
[13:24:00.037]                       class = class(workers))
[13:24:00.037]                     stop_if_not(length(workers) == 1, is.finite(workers), 
[13:24:00.037]                       workers >= 1)
[13:24:00.037]                     if (workers == 1L && !inherits(workers, "AsIs")) {
[13:24:00.037]                       return(sequential(..., lazy = TRUE, envir = envir))
[13:24:00.037]                     }
[13:24:00.037]                     future <- MultisessionFuture(..., workers = workers, 
[13:24:00.037]                       lazy = lazy, rscript_libs = rscript_libs, 
[13:24:00.037]                       envir = envir)
[13:24:00.037]                     if (!future$lazy) 
[13:24:00.037]                       future <- run(future)
[13:24:00.037]                     invisible(future)
[13:24:00.037]                   }, b = function (..., envir = parent.frame()) 
[13:24:00.037]                   {
[13:24:00.037]                     future <- SequentialFuture(..., envir = envir)
[13:24:00.037]                     if (!future$lazy) 
[13:24:00.037]                       future <- run(future)
[13:24:00.037]                     invisible(future)
[13:24:00.037]                   }), .cleanup = FALSE, .init = FALSE)
[13:24:00.037]                 }
[13:24:00.037]             }
[13:24:00.037]         }
[13:24:00.037]     })
[13:24:00.037]     if (TRUE) {
[13:24:00.037]         base::sink(type = "output", split = FALSE)
[13:24:00.037]         if (TRUE) {
[13:24:00.037]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:24:00.037]         }
[13:24:00.037]         else {
[13:24:00.037]             ...future.result["stdout"] <- base::list(NULL)
[13:24:00.037]         }
[13:24:00.037]         base::close(...future.stdout)
[13:24:00.037]         ...future.stdout <- NULL
[13:24:00.037]     }
[13:24:00.037]     ...future.result$conditions <- ...future.conditions
[13:24:00.037]     ...future.result$finished <- base::Sys.time()
[13:24:00.037]     ...future.result
[13:24:00.037] }
[13:24:00.094] MultisessionFuture started
[13:24:00.094] result() for ClusterFuture ...
[13:24:00.094] receiveMessageFromWorker() for ClusterFuture ...
[13:24:00.094] - Validating connection of MultisessionFuture
[13:24:00.143] - received message: FutureResult
[13:24:00.143] - Received FutureResult
[13:24:00.144] - Erased future from FutureRegistry
[13:24:00.144] result() for ClusterFuture ...
[13:24:00.144] - result already collected: FutureResult
[13:24:00.144] result() for ClusterFuture ... done
[13:24:00.144] receiveMessageFromWorker() for ClusterFuture ... done
[13:24:00.144] result() for ClusterFuture ... done
[13:24:00.144] result() for ClusterFuture ...
[13:24:00.144] - result already collected: FutureResult
[13:24:00.145] result() for ClusterFuture ... done
[13:24:00.145] plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ... DONE
[13:24:00.148] plan(): nbrOfWorkers() = 2
[13:24:00.149] getGlobalsAndPackages() ...
[13:24:00.149] Searching for globals...
[13:24:00.170] - globals found: [21] ‘{’, ‘<-’, ‘unclass’, ‘::’, ‘[’, ‘nested’, ‘-’, ‘stopifnot’, ‘==’, ‘length’, ‘inherits’, ‘[[’, ‘strategy2’, ‘for’, ‘seq_along’, ‘attr’, ‘attr<-’, ‘[[<-’, ‘all.equal’, ‘list’, ‘%<-%’
[13:24:00.171] Searching for globals ... DONE
[13:24:00.171] Resolving globals: FALSE
[13:24:00.172] The total size of the 2 globals is 55.46 KiB (56792 bytes)
[13:24:00.172] The total size of the 2 globals exported for future expression (‘{; a <- 1L; plan_a <- unclass(future::plan("list")); nested_a <- nested[-1]; stopifnot(length(nested_a) == 1L, length(plan_a) == 1L, inherits(plan_a[[1]],; "future"), inherits(future::plan("next"), strategy2)); ...; }; y; }’) is 55.46 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘nested’ (55.34 KiB of class ‘list’) and ‘strategy2’ (120 bytes of class ‘character’)
[13:24:00.173] - globals: [2] ‘nested’, ‘strategy2’
[13:24:00.173] - packages: [1] ‘future’
[13:24:00.173] getGlobalsAndPackages() ... DONE
[13:24:00.173] run() for ‘Future’ ...
[13:24:00.173] - state: ‘created’
[13:24:00.173] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[13:24:00.189] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:24:00.189] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[13:24:00.189]   - Field: ‘node’
[13:24:00.189]   - Field: ‘label’
[13:24:00.189]   - Field: ‘local’
[13:24:00.190]   - Field: ‘owner’
[13:24:00.190]   - Field: ‘envir’
[13:24:00.190]   - Field: ‘workers’
[13:24:00.190]   - Field: ‘packages’
[13:24:00.190]   - Field: ‘gc’
[13:24:00.190]   - Field: ‘conditions’
[13:24:00.190]   - Field: ‘persistent’
[13:24:00.190]   - Field: ‘expr’
[13:24:00.190]   - Field: ‘uuid’
[13:24:00.190]   - Field: ‘seed’
[13:24:00.191]   - Field: ‘version’
[13:24:00.191]   - Field: ‘result’
[13:24:00.191]   - Field: ‘asynchronous’
[13:24:00.191]   - Field: ‘calls’
[13:24:00.191]   - Field: ‘globals’
[13:24:00.191]   - Field: ‘stdout’
[13:24:00.191]   - Field: ‘earlySignal’
[13:24:00.191]   - Field: ‘lazy’
[13:24:00.191]   - Field: ‘state’
[13:24:00.191] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[13:24:00.192] - Launch lazy future ...
[13:24:00.192] Packages needed by the future expression (n = 1): ‘future’
[13:24:00.192] Packages needed by future strategies (n = 1): ‘future’
[13:24:00.193] {
[13:24:00.193]     {
[13:24:00.193]         {
[13:24:00.193]             ...future.startTime <- base::Sys.time()
[13:24:00.193]             {
[13:24:00.193]                 {
[13:24:00.193]                   {
[13:24:00.193]                     {
[13:24:00.193]                       {
[13:24:00.193]                         base::local({
[13:24:00.193]                           has_future <- base::requireNamespace("future", 
[13:24:00.193]                             quietly = TRUE)
[13:24:00.193]                           if (has_future) {
[13:24:00.193]                             ns <- base::getNamespace("future")
[13:24:00.193]                             version <- ns[[".package"]][["version"]]
[13:24:00.193]                             if (is.null(version)) 
[13:24:00.193]                               version <- utils::packageVersion("future")
[13:24:00.193]                           }
[13:24:00.193]                           else {
[13:24:00.193]                             version <- NULL
[13:24:00.193]                           }
[13:24:00.193]                           if (!has_future || version < "1.8.0") {
[13:24:00.193]                             info <- base::c(r_version = base::gsub("R version ", 
[13:24:00.193]                               "", base::R.version$version.string), 
[13:24:00.193]                               platform = base::sprintf("%s (%s-bit)", 
[13:24:00.193]                                 base::R.version$platform, 8 * 
[13:24:00.193]                                   base::.Machine$sizeof.pointer), 
[13:24:00.193]                               os = base::paste(base::Sys.info()[base::c("sysname", 
[13:24:00.193]                                 "release", "version")], collapse = " "), 
[13:24:00.193]                               hostname = base::Sys.info()[["nodename"]])
[13:24:00.193]                             info <- base::sprintf("%s: %s", base::names(info), 
[13:24:00.193]                               info)
[13:24:00.193]                             info <- base::paste(info, collapse = "; ")
[13:24:00.193]                             if (!has_future) {
[13:24:00.193]                               msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:24:00.193]                                 info)
[13:24:00.193]                             }
[13:24:00.193]                             else {
[13:24:00.193]                               msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:24:00.193]                                 info, version)
[13:24:00.193]                             }
[13:24:00.193]                             base::stop(msg)
[13:24:00.193]                           }
[13:24:00.193]                         })
[13:24:00.193]                       }
[13:24:00.193]                       ...future.mc.cores.old <- base::getOption("mc.cores")
[13:24:00.193]                       base::options(mc.cores = 1L)
[13:24:00.193]                     }
[13:24:00.193]                     base::local({
[13:24:00.193]                       for (pkg in "future") {
[13:24:00.193]                         base::loadNamespace(pkg)
[13:24:00.193]                         base::library(pkg, character.only = TRUE)
[13:24:00.193]                       }
[13:24:00.193]                     })
[13:24:00.193]                   }
[13:24:00.193]                   options(future.plan = NULL)
[13:24:00.193]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:24:00.193]                   future::plan(list(b = function (..., envir = parent.frame()) 
[13:24:00.193]                   {
[13:24:00.193]                     future <- SequentialFuture(..., envir = envir)
[13:24:00.193]                     if (!future$lazy) 
[13:24:00.193]                       future <- run(future)
[13:24:00.193]                     invisible(future)
[13:24:00.193]                   }), .cleanup = FALSE, .init = FALSE)
[13:24:00.193]                 }
[13:24:00.193]                 ...future.workdir <- getwd()
[13:24:00.193]             }
[13:24:00.193]             ...future.oldOptions <- base::as.list(base::.Options)
[13:24:00.193]             ...future.oldEnvVars <- base::Sys.getenv()
[13:24:00.193]         }
[13:24:00.193]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:24:00.193]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:24:00.193]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:24:00.193]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:24:00.193]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:24:00.193]             future.stdout.windows.reencode = NULL, width = 80L)
[13:24:00.193]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:24:00.193]             base::names(...future.oldOptions))
[13:24:00.193]     }
[13:24:00.193]     if (FALSE) {
[13:24:00.193]     }
[13:24:00.193]     else {
[13:24:00.193]         if (TRUE) {
[13:24:00.193]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:24:00.193]                 open = "w")
[13:24:00.193]         }
[13:24:00.193]         else {
[13:24:00.193]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:24:00.193]                 windows = "NUL", "/dev/null"), open = "w")
[13:24:00.193]         }
[13:24:00.193]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:24:00.193]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:24:00.193]             base::sink(type = "output", split = FALSE)
[13:24:00.193]             base::close(...future.stdout)
[13:24:00.193]         }, add = TRUE)
[13:24:00.193]     }
[13:24:00.193]     ...future.frame <- base::sys.nframe()
[13:24:00.193]     ...future.conditions <- base::list()
[13:24:00.193]     ...future.rng <- base::globalenv()$.Random.seed
[13:24:00.193]     if (FALSE) {
[13:24:00.193]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:24:00.193]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:24:00.193]     }
[13:24:00.193]     ...future.result <- base::tryCatch({
[13:24:00.193]         base::withCallingHandlers({
[13:24:00.193]             ...future.value <- base::withVisible(base::local({
[13:24:00.193]                 ...future.makeSendCondition <- base::local({
[13:24:00.193]                   sendCondition <- NULL
[13:24:00.193]                   function(frame = 1L) {
[13:24:00.193]                     if (is.function(sendCondition)) 
[13:24:00.193]                       return(sendCondition)
[13:24:00.193]                     ns <- getNamespace("parallel")
[13:24:00.193]                     if (exists("sendData", mode = "function", 
[13:24:00.193]                       envir = ns)) {
[13:24:00.193]                       parallel_sendData <- get("sendData", mode = "function", 
[13:24:00.193]                         envir = ns)
[13:24:00.193]                       envir <- sys.frame(frame)
[13:24:00.193]                       master <- NULL
[13:24:00.193]                       while (!identical(envir, .GlobalEnv) && 
[13:24:00.193]                         !identical(envir, emptyenv())) {
[13:24:00.193]                         if (exists("master", mode = "list", envir = envir, 
[13:24:00.193]                           inherits = FALSE)) {
[13:24:00.193]                           master <- get("master", mode = "list", 
[13:24:00.193]                             envir = envir, inherits = FALSE)
[13:24:00.193]                           if (inherits(master, c("SOCKnode", 
[13:24:00.193]                             "SOCK0node"))) {
[13:24:00.193]                             sendCondition <<- function(cond) {
[13:24:00.193]                               data <- list(type = "VALUE", value = cond, 
[13:24:00.193]                                 success = TRUE)
[13:24:00.193]                               parallel_sendData(master, data)
[13:24:00.193]                             }
[13:24:00.193]                             return(sendCondition)
[13:24:00.193]                           }
[13:24:00.193]                         }
[13:24:00.193]                         frame <- frame + 1L
[13:24:00.193]                         envir <- sys.frame(frame)
[13:24:00.193]                       }
[13:24:00.193]                     }
[13:24:00.193]                     sendCondition <<- function(cond) NULL
[13:24:00.193]                   }
[13:24:00.193]                 })
[13:24:00.193]                 withCallingHandlers({
[13:24:00.193]                   {
[13:24:00.193]                     a <- 1L
[13:24:00.193]                     plan_a <- unclass(future::plan("list"))
[13:24:00.193]                     nested_a <- nested[-1]
[13:24:00.193]                     stopifnot(length(nested_a) == 1L, length(plan_a) == 
[13:24:00.193]                       1L, inherits(plan_a[[1]], "future"), inherits(future::plan("next"), 
[13:24:00.193]                       strategy2))
[13:24:00.193]                     for (kk in seq_along(plan_a)) attr(plan_a[[kk]], 
[13:24:00.193]                       "init") <- NULL
[13:24:00.193]                     for (kk in seq_along(nested_a)) attr(nested_a[[kk]], 
[13:24:00.193]                       "init") <- NULL
[13:24:00.193]                     stopifnot(all.equal(plan_a, nested_a))
[13:24:00.193]                     y %<-% {
[13:24:00.193]                       b <- 2L
[13:24:00.193]                       plan_b <- future::plan("list")
[13:24:00.193]                       nested_b <- nested_a[-1]
[13:24:00.193]                       stopifnot(length(nested_b) == 0L, length(plan_b) == 
[13:24:00.193]                         1L, inherits(plan_b[[1]], "future"), 
[13:24:00.193]                         inherits(future::plan("next"), "sequential"))
[13:24:00.193]                       list(a = a, nested_a = nested_a, plan_a = plan_a, 
[13:24:00.193]                         b = b, nested_b = nested_b, plan_b = plan_b)
[13:24:00.193]                     }
[13:24:00.193]                     y
[13:24:00.193]                   }
[13:24:00.193]                 }, immediateCondition = function(cond) {
[13:24:00.193]                   sendCondition <- ...future.makeSendCondition()
[13:24:00.193]                   sendCondition(cond)
[13:24:00.193]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:24:00.193]                   {
[13:24:00.193]                     inherits <- base::inherits
[13:24:00.193]                     invokeRestart <- base::invokeRestart
[13:24:00.193]                     is.null <- base::is.null
[13:24:00.193]                     muffled <- FALSE
[13:24:00.193]                     if (inherits(cond, "message")) {
[13:24:00.193]                       muffled <- grepl(pattern, "muffleMessage")
[13:24:00.193]                       if (muffled) 
[13:24:00.193]                         invokeRestart("muffleMessage")
[13:24:00.193]                     }
[13:24:00.193]                     else if (inherits(cond, "warning")) {
[13:24:00.193]                       muffled <- grepl(pattern, "muffleWarning")
[13:24:00.193]                       if (muffled) 
[13:24:00.193]                         invokeRestart("muffleWarning")
[13:24:00.193]                     }
[13:24:00.193]                     else if (inherits(cond, "condition")) {
[13:24:00.193]                       if (!is.null(pattern)) {
[13:24:00.193]                         computeRestarts <- base::computeRestarts
[13:24:00.193]                         grepl <- base::grepl
[13:24:00.193]                         restarts <- computeRestarts(cond)
[13:24:00.193]                         for (restart in restarts) {
[13:24:00.193]                           name <- restart$name
[13:24:00.193]                           if (is.null(name)) 
[13:24:00.193]                             next
[13:24:00.193]                           if (!grepl(pattern, name)) 
[13:24:00.193]                             next
[13:24:00.193]                           invokeRestart(restart)
[13:24:00.193]                           muffled <- TRUE
[13:24:00.193]                           break
[13:24:00.193]                         }
[13:24:00.193]                       }
[13:24:00.193]                     }
[13:24:00.193]                     invisible(muffled)
[13:24:00.193]                   }
[13:24:00.193]                   muffleCondition(cond)
[13:24:00.193]                 })
[13:24:00.193]             }))
[13:24:00.193]             future::FutureResult(value = ...future.value$value, 
[13:24:00.193]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:24:00.193]                   ...future.rng), globalenv = if (FALSE) 
[13:24:00.193]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:24:00.193]                     ...future.globalenv.names))
[13:24:00.193]                 else NULL, started = ...future.startTime, version = "1.8")
[13:24:00.193]         }, condition = base::local({
[13:24:00.193]             c <- base::c
[13:24:00.193]             inherits <- base::inherits
[13:24:00.193]             invokeRestart <- base::invokeRestart
[13:24:00.193]             length <- base::length
[13:24:00.193]             list <- base::list
[13:24:00.193]             seq.int <- base::seq.int
[13:24:00.193]             signalCondition <- base::signalCondition
[13:24:00.193]             sys.calls <- base::sys.calls
[13:24:00.193]             `[[` <- base::`[[`
[13:24:00.193]             `+` <- base::`+`
[13:24:00.193]             `<<-` <- base::`<<-`
[13:24:00.193]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:24:00.193]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:24:00.193]                   3L)]
[13:24:00.193]             }
[13:24:00.193]             function(cond) {
[13:24:00.193]                 is_error <- inherits(cond, "error")
[13:24:00.193]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:24:00.193]                   NULL)
[13:24:00.193]                 if (is_error) {
[13:24:00.193]                   sessionInformation <- function() {
[13:24:00.193]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:24:00.193]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:24:00.193]                       search = base::search(), system = base::Sys.info())
[13:24:00.193]                   }
[13:24:00.193]                   ...future.conditions[[length(...future.conditions) + 
[13:24:00.193]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:24:00.193]                     cond$call), session = sessionInformation(), 
[13:24:00.193]                     timestamp = base::Sys.time(), signaled = 0L)
[13:24:00.193]                   signalCondition(cond)
[13:24:00.193]                 }
[13:24:00.193]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:24:00.193]                 "immediateCondition"))) {
[13:24:00.193]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:24:00.193]                   ...future.conditions[[length(...future.conditions) + 
[13:24:00.193]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:24:00.193]                   if (TRUE && !signal) {
[13:24:00.193]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:24:00.193]                     {
[13:24:00.193]                       inherits <- base::inherits
[13:24:00.193]                       invokeRestart <- base::invokeRestart
[13:24:00.193]                       is.null <- base::is.null
[13:24:00.193]                       muffled <- FALSE
[13:24:00.193]                       if (inherits(cond, "message")) {
[13:24:00.193]                         muffled <- grepl(pattern, "muffleMessage")
[13:24:00.193]                         if (muffled) 
[13:24:00.193]                           invokeRestart("muffleMessage")
[13:24:00.193]                       }
[13:24:00.193]                       else if (inherits(cond, "warning")) {
[13:24:00.193]                         muffled <- grepl(pattern, "muffleWarning")
[13:24:00.193]                         if (muffled) 
[13:24:00.193]                           invokeRestart("muffleWarning")
[13:24:00.193]                       }
[13:24:00.193]                       else if (inherits(cond, "condition")) {
[13:24:00.193]                         if (!is.null(pattern)) {
[13:24:00.193]                           computeRestarts <- base::computeRestarts
[13:24:00.193]                           grepl <- base::grepl
[13:24:00.193]                           restarts <- computeRestarts(cond)
[13:24:00.193]                           for (restart in restarts) {
[13:24:00.193]                             name <- restart$name
[13:24:00.193]                             if (is.null(name)) 
[13:24:00.193]                               next
[13:24:00.193]                             if (!grepl(pattern, name)) 
[13:24:00.193]                               next
[13:24:00.193]                             invokeRestart(restart)
[13:24:00.193]                             muffled <- TRUE
[13:24:00.193]                             break
[13:24:00.193]                           }
[13:24:00.193]                         }
[13:24:00.193]                       }
[13:24:00.193]                       invisible(muffled)
[13:24:00.193]                     }
[13:24:00.193]                     muffleCondition(cond, pattern = "^muffle")
[13:24:00.193]                   }
[13:24:00.193]                 }
[13:24:00.193]                 else {
[13:24:00.193]                   if (TRUE) {
[13:24:00.193]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:24:00.193]                     {
[13:24:00.193]                       inherits <- base::inherits
[13:24:00.193]                       invokeRestart <- base::invokeRestart
[13:24:00.193]                       is.null <- base::is.null
[13:24:00.193]                       muffled <- FALSE
[13:24:00.193]                       if (inherits(cond, "message")) {
[13:24:00.193]                         muffled <- grepl(pattern, "muffleMessage")
[13:24:00.193]                         if (muffled) 
[13:24:00.193]                           invokeRestart("muffleMessage")
[13:24:00.193]                       }
[13:24:00.193]                       else if (inherits(cond, "warning")) {
[13:24:00.193]                         muffled <- grepl(pattern, "muffleWarning")
[13:24:00.193]                         if (muffled) 
[13:24:00.193]                           invokeRestart("muffleWarning")
[13:24:00.193]                       }
[13:24:00.193]                       else if (inherits(cond, "condition")) {
[13:24:00.193]                         if (!is.null(pattern)) {
[13:24:00.193]                           computeRestarts <- base::computeRestarts
[13:24:00.193]                           grepl <- base::grepl
[13:24:00.193]                           restarts <- computeRestarts(cond)
[13:24:00.193]                           for (restart in restarts) {
[13:24:00.193]                             name <- restart$name
[13:24:00.193]                             if (is.null(name)) 
[13:24:00.193]                               next
[13:24:00.193]                             if (!grepl(pattern, name)) 
[13:24:00.193]                               next
[13:24:00.193]                             invokeRestart(restart)
[13:24:00.193]                             muffled <- TRUE
[13:24:00.193]                             break
[13:24:00.193]                           }
[13:24:00.193]                         }
[13:24:00.193]                       }
[13:24:00.193]                       invisible(muffled)
[13:24:00.193]                     }
[13:24:00.193]                     muffleCondition(cond, pattern = "^muffle")
[13:24:00.193]                   }
[13:24:00.193]                 }
[13:24:00.193]             }
[13:24:00.193]         }))
[13:24:00.193]     }, error = function(ex) {
[13:24:00.193]         base::structure(base::list(value = NULL, visible = NULL, 
[13:24:00.193]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:24:00.193]                 ...future.rng), started = ...future.startTime, 
[13:24:00.193]             finished = Sys.time(), session_uuid = NA_character_, 
[13:24:00.193]             version = "1.8"), class = "FutureResult")
[13:24:00.193]     }, finally = {
[13:24:00.193]         if (!identical(...future.workdir, getwd())) 
[13:24:00.193]             setwd(...future.workdir)
[13:24:00.193]         {
[13:24:00.193]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:24:00.193]                 ...future.oldOptions$nwarnings <- NULL
[13:24:00.193]             }
[13:24:00.193]             base::options(...future.oldOptions)
[13:24:00.193]             if (.Platform$OS.type == "windows") {
[13:24:00.193]                 old_names <- names(...future.oldEnvVars)
[13:24:00.193]                 envs <- base::Sys.getenv()
[13:24:00.193]                 names <- names(envs)
[13:24:00.193]                 common <- intersect(names, old_names)
[13:24:00.193]                 added <- setdiff(names, old_names)
[13:24:00.193]                 removed <- setdiff(old_names, names)
[13:24:00.193]                 changed <- common[...future.oldEnvVars[common] != 
[13:24:00.193]                   envs[common]]
[13:24:00.193]                 NAMES <- toupper(changed)
[13:24:00.193]                 args <- list()
[13:24:00.193]                 for (kk in seq_along(NAMES)) {
[13:24:00.193]                   name <- changed[[kk]]
[13:24:00.193]                   NAME <- NAMES[[kk]]
[13:24:00.193]                   if (name != NAME && is.element(NAME, old_names)) 
[13:24:00.193]                     next
[13:24:00.193]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:24:00.193]                 }
[13:24:00.193]                 NAMES <- toupper(added)
[13:24:00.193]                 for (kk in seq_along(NAMES)) {
[13:24:00.193]                   name <- added[[kk]]
[13:24:00.193]                   NAME <- NAMES[[kk]]
[13:24:00.193]                   if (name != NAME && is.element(NAME, old_names)) 
[13:24:00.193]                     next
[13:24:00.193]                   args[[name]] <- ""
[13:24:00.193]                 }
[13:24:00.193]                 NAMES <- toupper(removed)
[13:24:00.193]                 for (kk in seq_along(NAMES)) {
[13:24:00.193]                   name <- removed[[kk]]
[13:24:00.193]                   NAME <- NAMES[[kk]]
[13:24:00.193]                   if (name != NAME && is.element(NAME, old_names)) 
[13:24:00.193]                     next
[13:24:00.193]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:24:00.193]                 }
[13:24:00.193]                 if (length(args) > 0) 
[13:24:00.193]                   base::do.call(base::Sys.setenv, args = args)
[13:24:00.193]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:24:00.193]             }
[13:24:00.193]             else {
[13:24:00.193]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:24:00.193]             }
[13:24:00.193]             {
[13:24:00.193]                 if (base::length(...future.futureOptionsAdded) > 
[13:24:00.193]                   0L) {
[13:24:00.193]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:24:00.193]                   base::names(opts) <- ...future.futureOptionsAdded
[13:24:00.193]                   base::options(opts)
[13:24:00.193]                 }
[13:24:00.193]                 {
[13:24:00.193]                   {
[13:24:00.193]                     base::options(mc.cores = ...future.mc.cores.old)
[13:24:00.193]                     NULL
[13:24:00.193]                   }
[13:24:00.193]                   options(future.plan = NULL)
[13:24:00.193]                   if (is.na(NA_character_)) 
[13:24:00.193]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:24:00.193]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:24:00.193]                   future::plan(list(a = function (..., workers = availableCores(), 
[13:24:00.193]                     lazy = FALSE, rscript_libs = .libPaths(), 
[13:24:00.193]                     envir = parent.frame()) 
[13:24:00.193]                   {
[13:24:00.193]                     if (is.function(workers)) 
[13:24:00.193]                       workers <- workers()
[13:24:00.193]                     workers <- structure(as.integer(workers), 
[13:24:00.193]                       class = class(workers))
[13:24:00.193]                     stop_if_not(length(workers) == 1, is.finite(workers), 
[13:24:00.193]                       workers >= 1)
[13:24:00.193]                     if (workers == 1L && !inherits(workers, "AsIs")) {
[13:24:00.193]                       return(sequential(..., lazy = TRUE, envir = envir))
[13:24:00.193]                     }
[13:24:00.193]                     future <- MultisessionFuture(..., workers = workers, 
[13:24:00.193]                       lazy = lazy, rscript_libs = rscript_libs, 
[13:24:00.193]                       envir = envir)
[13:24:00.193]                     if (!future$lazy) 
[13:24:00.193]                       future <- run(future)
[13:24:00.193]                     invisible(future)
[13:24:00.193]                   }, b = function (..., envir = parent.frame()) 
[13:24:00.193]                   {
[13:24:00.193]                     future <- SequentialFuture(..., envir = envir)
[13:24:00.193]                     if (!future$lazy) 
[13:24:00.193]                       future <- run(future)
[13:24:00.193]                     invisible(future)
[13:24:00.193]                   }), .cleanup = FALSE, .init = FALSE)
[13:24:00.193]                 }
[13:24:00.193]             }
[13:24:00.193]         }
[13:24:00.193]     })
[13:24:00.193]     if (TRUE) {
[13:24:00.193]         base::sink(type = "output", split = FALSE)
[13:24:00.193]         if (TRUE) {
[13:24:00.193]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:24:00.193]         }
[13:24:00.193]         else {
[13:24:00.193]             ...future.result["stdout"] <- base::list(NULL)
[13:24:00.193]         }
[13:24:00.193]         base::close(...future.stdout)
[13:24:00.193]         ...future.stdout <- NULL
[13:24:00.193]     }
[13:24:00.193]     ...future.result$conditions <- ...future.conditions
[13:24:00.193]     ...future.result$finished <- base::Sys.time()
[13:24:00.193]     ...future.result
[13:24:00.193] }
[13:24:00.196] Exporting 2 global objects (55.46 KiB) to cluster node #1 ...
[13:24:00.196] Exporting ‘nested’ (55.34 KiB) to cluster node #1 ...
[13:24:00.240] Exporting ‘nested’ (55.34 KiB) to cluster node #1 ... DONE
[13:24:00.241] Exporting ‘strategy2’ (120 bytes) to cluster node #1 ...
[13:24:00.241] Exporting ‘strategy2’ (120 bytes) to cluster node #1 ... DONE
[13:24:00.241] Exporting 2 global objects (55.46 KiB) to cluster node #1 ... DONE
[13:24:00.242] MultisessionFuture started
[13:24:00.242] - Launch lazy future ... done
[13:24:00.242] run() for ‘MultisessionFuture’ ... done
[13:24:00.242] result() for ClusterFuture ...
[13:24:00.243] receiveMessageFromWorker() for ClusterFuture ...
[13:24:00.243] - Validating connection of MultisessionFuture
[13:24:00.309] - received message: FutureResult
[13:24:00.310] - Received FutureResult
[13:24:00.310] - Erased future from FutureRegistry
[13:24:00.310] result() for ClusterFuture ...
[13:24:00.310] - result already collected: FutureResult
[13:24:00.310] result() for ClusterFuture ... done
[13:24:00.310] receiveMessageFromWorker() for ClusterFuture ... done
[13:24:00.310] result() for ClusterFuture ... done
[13:24:00.310] result() for ClusterFuture ...
[13:24:00.310] - result already collected: FutureResult
[13:24:00.310] result() for ClusterFuture ... done
List of 6
 $ a       : int 1
 $ nested_a:List of 1
  ..$ b:function (..., envir = parent.frame())  
  .. ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
  .. ..- attr(*, "call")= language plan(list(a = strategy1, b = strategy2))
 $ plan_a  :List of 1
  ..$ b:function (..., envir = parent.frame())  
  .. ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
  .. ..- attr(*, "call")= language plan(list(a = strategy1, b = strategy2))
 $ b       : int 2
 $ nested_b: Named list()
 $ plan_b  :List of 1
  ..$ :function (..., envir = parent.frame())  
  .. ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
  ..- attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[13:24:00.316] getGlobalsAndPackages() ...
[13:24:00.316] Searching for globals...
[13:24:00.317] - globals found: [7] ‘{’, ‘value’, ‘future’, ‘subset’, ‘data’, ‘==’, ‘a’
[13:24:00.317] Searching for globals ... DONE
[13:24:00.317] Resolving globals: FALSE
[13:24:00.318] The total size of the 1 globals is 128 bytes (128 bytes)
[13:24:00.318] The total size of the 1 globals exported for future expression (‘{; value(future(subset(data, a == 2))); }’) is 128 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘data’ (128 bytes of class ‘list’)
[13:24:00.318] - globals: [1] ‘data’
[13:24:00.319] - packages: [1] ‘future’
[13:24:00.319] getGlobalsAndPackages() ... DONE
[13:24:00.319] run() for ‘Future’ ...
[13:24:00.319] - state: ‘created’
[13:24:00.319] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[13:24:00.335] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:24:00.335] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[13:24:00.336]   - Field: ‘node’
[13:24:00.336]   - Field: ‘label’
[13:24:00.336]   - Field: ‘local’
[13:24:00.336]   - Field: ‘owner’
[13:24:00.336]   - Field: ‘envir’
[13:24:00.336]   - Field: ‘workers’
[13:24:00.336]   - Field: ‘packages’
[13:24:00.336]   - Field: ‘gc’
[13:24:00.336]   - Field: ‘conditions’
[13:24:00.337]   - Field: ‘persistent’
[13:24:00.337]   - Field: ‘expr’
[13:24:00.337]   - Field: ‘uuid’
[13:24:00.337]   - Field: ‘seed’
[13:24:00.337]   - Field: ‘version’
[13:24:00.337]   - Field: ‘result’
[13:24:00.337]   - Field: ‘asynchronous’
[13:24:00.337]   - Field: ‘calls’
[13:24:00.337]   - Field: ‘globals’
[13:24:00.337]   - Field: ‘stdout’
[13:24:00.337]   - Field: ‘earlySignal’
[13:24:00.338]   - Field: ‘lazy’
[13:24:00.338]   - Field: ‘state’
[13:24:00.338] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[13:24:00.338] - Launch lazy future ...
[13:24:00.338] Packages needed by the future expression (n = 1): ‘future’
[13:24:00.338] Packages needed by future strategies (n = 1): ‘future’
[13:24:00.339] {
[13:24:00.339]     {
[13:24:00.339]         {
[13:24:00.339]             ...future.startTime <- base::Sys.time()
[13:24:00.339]             {
[13:24:00.339]                 {
[13:24:00.339]                   {
[13:24:00.339]                     {
[13:24:00.339]                       {
[13:24:00.339]                         base::local({
[13:24:00.339]                           has_future <- base::requireNamespace("future", 
[13:24:00.339]                             quietly = TRUE)
[13:24:00.339]                           if (has_future) {
[13:24:00.339]                             ns <- base::getNamespace("future")
[13:24:00.339]                             version <- ns[[".package"]][["version"]]
[13:24:00.339]                             if (is.null(version)) 
[13:24:00.339]                               version <- utils::packageVersion("future")
[13:24:00.339]                           }
[13:24:00.339]                           else {
[13:24:00.339]                             version <- NULL
[13:24:00.339]                           }
[13:24:00.339]                           if (!has_future || version < "1.8.0") {
[13:24:00.339]                             info <- base::c(r_version = base::gsub("R version ", 
[13:24:00.339]                               "", base::R.version$version.string), 
[13:24:00.339]                               platform = base::sprintf("%s (%s-bit)", 
[13:24:00.339]                                 base::R.version$platform, 8 * 
[13:24:00.339]                                   base::.Machine$sizeof.pointer), 
[13:24:00.339]                               os = base::paste(base::Sys.info()[base::c("sysname", 
[13:24:00.339]                                 "release", "version")], collapse = " "), 
[13:24:00.339]                               hostname = base::Sys.info()[["nodename"]])
[13:24:00.339]                             info <- base::sprintf("%s: %s", base::names(info), 
[13:24:00.339]                               info)
[13:24:00.339]                             info <- base::paste(info, collapse = "; ")
[13:24:00.339]                             if (!has_future) {
[13:24:00.339]                               msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:24:00.339]                                 info)
[13:24:00.339]                             }
[13:24:00.339]                             else {
[13:24:00.339]                               msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:24:00.339]                                 info, version)
[13:24:00.339]                             }
[13:24:00.339]                             base::stop(msg)
[13:24:00.339]                           }
[13:24:00.339]                         })
[13:24:00.339]                       }
[13:24:00.339]                       ...future.mc.cores.old <- base::getOption("mc.cores")
[13:24:00.339]                       base::options(mc.cores = 1L)
[13:24:00.339]                     }
[13:24:00.339]                     base::local({
[13:24:00.339]                       for (pkg in "future") {
[13:24:00.339]                         base::loadNamespace(pkg)
[13:24:00.339]                         base::library(pkg, character.only = TRUE)
[13:24:00.339]                       }
[13:24:00.339]                     })
[13:24:00.339]                   }
[13:24:00.339]                   options(future.plan = NULL)
[13:24:00.339]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:24:00.339]                   future::plan(list(b = function (..., envir = parent.frame()) 
[13:24:00.339]                   {
[13:24:00.339]                     future <- SequentialFuture(..., envir = envir)
[13:24:00.339]                     if (!future$lazy) 
[13:24:00.339]                       future <- run(future)
[13:24:00.339]                     invisible(future)
[13:24:00.339]                   }), .cleanup = FALSE, .init = FALSE)
[13:24:00.339]                 }
[13:24:00.339]                 ...future.workdir <- getwd()
[13:24:00.339]             }
[13:24:00.339]             ...future.oldOptions <- base::as.list(base::.Options)
[13:24:00.339]             ...future.oldEnvVars <- base::Sys.getenv()
[13:24:00.339]         }
[13:24:00.339]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:24:00.339]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:24:00.339]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:24:00.339]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:24:00.339]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:24:00.339]             future.stdout.windows.reencode = NULL, width = 80L)
[13:24:00.339]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:24:00.339]             base::names(...future.oldOptions))
[13:24:00.339]     }
[13:24:00.339]     if (FALSE) {
[13:24:00.339]     }
[13:24:00.339]     else {
[13:24:00.339]         if (TRUE) {
[13:24:00.339]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:24:00.339]                 open = "w")
[13:24:00.339]         }
[13:24:00.339]         else {
[13:24:00.339]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:24:00.339]                 windows = "NUL", "/dev/null"), open = "w")
[13:24:00.339]         }
[13:24:00.339]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:24:00.339]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:24:00.339]             base::sink(type = "output", split = FALSE)
[13:24:00.339]             base::close(...future.stdout)
[13:24:00.339]         }, add = TRUE)
[13:24:00.339]     }
[13:24:00.339]     ...future.frame <- base::sys.nframe()
[13:24:00.339]     ...future.conditions <- base::list()
[13:24:00.339]     ...future.rng <- base::globalenv()$.Random.seed
[13:24:00.339]     if (FALSE) {
[13:24:00.339]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:24:00.339]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:24:00.339]     }
[13:24:00.339]     ...future.result <- base::tryCatch({
[13:24:00.339]         base::withCallingHandlers({
[13:24:00.339]             ...future.value <- base::withVisible(base::local({
[13:24:00.339]                 ...future.makeSendCondition <- base::local({
[13:24:00.339]                   sendCondition <- NULL
[13:24:00.339]                   function(frame = 1L) {
[13:24:00.339]                     if (is.function(sendCondition)) 
[13:24:00.339]                       return(sendCondition)
[13:24:00.339]                     ns <- getNamespace("parallel")
[13:24:00.339]                     if (exists("sendData", mode = "function", 
[13:24:00.339]                       envir = ns)) {
[13:24:00.339]                       parallel_sendData <- get("sendData", mode = "function", 
[13:24:00.339]                         envir = ns)
[13:24:00.339]                       envir <- sys.frame(frame)
[13:24:00.339]                       master <- NULL
[13:24:00.339]                       while (!identical(envir, .GlobalEnv) && 
[13:24:00.339]                         !identical(envir, emptyenv())) {
[13:24:00.339]                         if (exists("master", mode = "list", envir = envir, 
[13:24:00.339]                           inherits = FALSE)) {
[13:24:00.339]                           master <- get("master", mode = "list", 
[13:24:00.339]                             envir = envir, inherits = FALSE)
[13:24:00.339]                           if (inherits(master, c("SOCKnode", 
[13:24:00.339]                             "SOCK0node"))) {
[13:24:00.339]                             sendCondition <<- function(cond) {
[13:24:00.339]                               data <- list(type = "VALUE", value = cond, 
[13:24:00.339]                                 success = TRUE)
[13:24:00.339]                               parallel_sendData(master, data)
[13:24:00.339]                             }
[13:24:00.339]                             return(sendCondition)
[13:24:00.339]                           }
[13:24:00.339]                         }
[13:24:00.339]                         frame <- frame + 1L
[13:24:00.339]                         envir <- sys.frame(frame)
[13:24:00.339]                       }
[13:24:00.339]                     }
[13:24:00.339]                     sendCondition <<- function(cond) NULL
[13:24:00.339]                   }
[13:24:00.339]                 })
[13:24:00.339]                 withCallingHandlers({
[13:24:00.339]                   {
[13:24:00.339]                     value(future(subset(data, a == 2)))
[13:24:00.339]                   }
[13:24:00.339]                 }, immediateCondition = function(cond) {
[13:24:00.339]                   sendCondition <- ...future.makeSendCondition()
[13:24:00.339]                   sendCondition(cond)
[13:24:00.339]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:24:00.339]                   {
[13:24:00.339]                     inherits <- base::inherits
[13:24:00.339]                     invokeRestart <- base::invokeRestart
[13:24:00.339]                     is.null <- base::is.null
[13:24:00.339]                     muffled <- FALSE
[13:24:00.339]                     if (inherits(cond, "message")) {
[13:24:00.339]                       muffled <- grepl(pattern, "muffleMessage")
[13:24:00.339]                       if (muffled) 
[13:24:00.339]                         invokeRestart("muffleMessage")
[13:24:00.339]                     }
[13:24:00.339]                     else if (inherits(cond, "warning")) {
[13:24:00.339]                       muffled <- grepl(pattern, "muffleWarning")
[13:24:00.339]                       if (muffled) 
[13:24:00.339]                         invokeRestart("muffleWarning")
[13:24:00.339]                     }
[13:24:00.339]                     else if (inherits(cond, "condition")) {
[13:24:00.339]                       if (!is.null(pattern)) {
[13:24:00.339]                         computeRestarts <- base::computeRestarts
[13:24:00.339]                         grepl <- base::grepl
[13:24:00.339]                         restarts <- computeRestarts(cond)
[13:24:00.339]                         for (restart in restarts) {
[13:24:00.339]                           name <- restart$name
[13:24:00.339]                           if (is.null(name)) 
[13:24:00.339]                             next
[13:24:00.339]                           if (!grepl(pattern, name)) 
[13:24:00.339]                             next
[13:24:00.339]                           invokeRestart(restart)
[13:24:00.339]                           muffled <- TRUE
[13:24:00.339]                           break
[13:24:00.339]                         }
[13:24:00.339]                       }
[13:24:00.339]                     }
[13:24:00.339]                     invisible(muffled)
[13:24:00.339]                   }
[13:24:00.339]                   muffleCondition(cond)
[13:24:00.339]                 })
[13:24:00.339]             }))
[13:24:00.339]             future::FutureResult(value = ...future.value$value, 
[13:24:00.339]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:24:00.339]                   ...future.rng), globalenv = if (FALSE) 
[13:24:00.339]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:24:00.339]                     ...future.globalenv.names))
[13:24:00.339]                 else NULL, started = ...future.startTime, version = "1.8")
[13:24:00.339]         }, condition = base::local({
[13:24:00.339]             c <- base::c
[13:24:00.339]             inherits <- base::inherits
[13:24:00.339]             invokeRestart <- base::invokeRestart
[13:24:00.339]             length <- base::length
[13:24:00.339]             list <- base::list
[13:24:00.339]             seq.int <- base::seq.int
[13:24:00.339]             signalCondition <- base::signalCondition
[13:24:00.339]             sys.calls <- base::sys.calls
[13:24:00.339]             `[[` <- base::`[[`
[13:24:00.339]             `+` <- base::`+`
[13:24:00.339]             `<<-` <- base::`<<-`
[13:24:00.339]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:24:00.339]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:24:00.339]                   3L)]
[13:24:00.339]             }
[13:24:00.339]             function(cond) {
[13:24:00.339]                 is_error <- inherits(cond, "error")
[13:24:00.339]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:24:00.339]                   NULL)
[13:24:00.339]                 if (is_error) {
[13:24:00.339]                   sessionInformation <- function() {
[13:24:00.339]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:24:00.339]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:24:00.339]                       search = base::search(), system = base::Sys.info())
[13:24:00.339]                   }
[13:24:00.339]                   ...future.conditions[[length(...future.conditions) + 
[13:24:00.339]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:24:00.339]                     cond$call), session = sessionInformation(), 
[13:24:00.339]                     timestamp = base::Sys.time(), signaled = 0L)
[13:24:00.339]                   signalCondition(cond)
[13:24:00.339]                 }
[13:24:00.339]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:24:00.339]                 "immediateCondition"))) {
[13:24:00.339]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:24:00.339]                   ...future.conditions[[length(...future.conditions) + 
[13:24:00.339]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:24:00.339]                   if (TRUE && !signal) {
[13:24:00.339]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:24:00.339]                     {
[13:24:00.339]                       inherits <- base::inherits
[13:24:00.339]                       invokeRestart <- base::invokeRestart
[13:24:00.339]                       is.null <- base::is.null
[13:24:00.339]                       muffled <- FALSE
[13:24:00.339]                       if (inherits(cond, "message")) {
[13:24:00.339]                         muffled <- grepl(pattern, "muffleMessage")
[13:24:00.339]                         if (muffled) 
[13:24:00.339]                           invokeRestart("muffleMessage")
[13:24:00.339]                       }
[13:24:00.339]                       else if (inherits(cond, "warning")) {
[13:24:00.339]                         muffled <- grepl(pattern, "muffleWarning")
[13:24:00.339]                         if (muffled) 
[13:24:00.339]                           invokeRestart("muffleWarning")
[13:24:00.339]                       }
[13:24:00.339]                       else if (inherits(cond, "condition")) {
[13:24:00.339]                         if (!is.null(pattern)) {
[13:24:00.339]                           computeRestarts <- base::computeRestarts
[13:24:00.339]                           grepl <- base::grepl
[13:24:00.339]                           restarts <- computeRestarts(cond)
[13:24:00.339]                           for (restart in restarts) {
[13:24:00.339]                             name <- restart$name
[13:24:00.339]                             if (is.null(name)) 
[13:24:00.339]                               next
[13:24:00.339]                             if (!grepl(pattern, name)) 
[13:24:00.339]                               next
[13:24:00.339]                             invokeRestart(restart)
[13:24:00.339]                             muffled <- TRUE
[13:24:00.339]                             break
[13:24:00.339]                           }
[13:24:00.339]                         }
[13:24:00.339]                       }
[13:24:00.339]                       invisible(muffled)
[13:24:00.339]                     }
[13:24:00.339]                     muffleCondition(cond, pattern = "^muffle")
[13:24:00.339]                   }
[13:24:00.339]                 }
[13:24:00.339]                 else {
[13:24:00.339]                   if (TRUE) {
[13:24:00.339]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:24:00.339]                     {
[13:24:00.339]                       inherits <- base::inherits
[13:24:00.339]                       invokeRestart <- base::invokeRestart
[13:24:00.339]                       is.null <- base::is.null
[13:24:00.339]                       muffled <- FALSE
[13:24:00.339]                       if (inherits(cond, "message")) {
[13:24:00.339]                         muffled <- grepl(pattern, "muffleMessage")
[13:24:00.339]                         if (muffled) 
[13:24:00.339]                           invokeRestart("muffleMessage")
[13:24:00.339]                       }
[13:24:00.339]                       else if (inherits(cond, "warning")) {
[13:24:00.339]                         muffled <- grepl(pattern, "muffleWarning")
[13:24:00.339]                         if (muffled) 
[13:24:00.339]                           invokeRestart("muffleWarning")
[13:24:00.339]                       }
[13:24:00.339]                       else if (inherits(cond, "condition")) {
[13:24:00.339]                         if (!is.null(pattern)) {
[13:24:00.339]                           computeRestarts <- base::computeRestarts
[13:24:00.339]                           grepl <- base::grepl
[13:24:00.339]                           restarts <- computeRestarts(cond)
[13:24:00.339]                           for (restart in restarts) {
[13:24:00.339]                             name <- restart$name
[13:24:00.339]                             if (is.null(name)) 
[13:24:00.339]                               next
[13:24:00.339]                             if (!grepl(pattern, name)) 
[13:24:00.339]                               next
[13:24:00.339]                             invokeRestart(restart)
[13:24:00.339]                             muffled <- TRUE
[13:24:00.339]                             break
[13:24:00.339]                           }
[13:24:00.339]                         }
[13:24:00.339]                       }
[13:24:00.339]                       invisible(muffled)
[13:24:00.339]                     }
[13:24:00.339]                     muffleCondition(cond, pattern = "^muffle")
[13:24:00.339]                   }
[13:24:00.339]                 }
[13:24:00.339]             }
[13:24:00.339]         }))
[13:24:00.339]     }, error = function(ex) {
[13:24:00.339]         base::structure(base::list(value = NULL, visible = NULL, 
[13:24:00.339]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:24:00.339]                 ...future.rng), started = ...future.startTime, 
[13:24:00.339]             finished = Sys.time(), session_uuid = NA_character_, 
[13:24:00.339]             version = "1.8"), class = "FutureResult")
[13:24:00.339]     }, finally = {
[13:24:00.339]         if (!identical(...future.workdir, getwd())) 
[13:24:00.339]             setwd(...future.workdir)
[13:24:00.339]         {
[13:24:00.339]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:24:00.339]                 ...future.oldOptions$nwarnings <- NULL
[13:24:00.339]             }
[13:24:00.339]             base::options(...future.oldOptions)
[13:24:00.339]             if (.Platform$OS.type == "windows") {
[13:24:00.339]                 old_names <- names(...future.oldEnvVars)
[13:24:00.339]                 envs <- base::Sys.getenv()
[13:24:00.339]                 names <- names(envs)
[13:24:00.339]                 common <- intersect(names, old_names)
[13:24:00.339]                 added <- setdiff(names, old_names)
[13:24:00.339]                 removed <- setdiff(old_names, names)
[13:24:00.339]                 changed <- common[...future.oldEnvVars[common] != 
[13:24:00.339]                   envs[common]]
[13:24:00.339]                 NAMES <- toupper(changed)
[13:24:00.339]                 args <- list()
[13:24:00.339]                 for (kk in seq_along(NAMES)) {
[13:24:00.339]                   name <- changed[[kk]]
[13:24:00.339]                   NAME <- NAMES[[kk]]
[13:24:00.339]                   if (name != NAME && is.element(NAME, old_names)) 
[13:24:00.339]                     next
[13:24:00.339]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:24:00.339]                 }
[13:24:00.339]                 NAMES <- toupper(added)
[13:24:00.339]                 for (kk in seq_along(NAMES)) {
[13:24:00.339]                   name <- added[[kk]]
[13:24:00.339]                   NAME <- NAMES[[kk]]
[13:24:00.339]                   if (name != NAME && is.element(NAME, old_names)) 
[13:24:00.339]                     next
[13:24:00.339]                   args[[name]] <- ""
[13:24:00.339]                 }
[13:24:00.339]                 NAMES <- toupper(removed)
[13:24:00.339]                 for (kk in seq_along(NAMES)) {
[13:24:00.339]                   name <- removed[[kk]]
[13:24:00.339]                   NAME <- NAMES[[kk]]
[13:24:00.339]                   if (name != NAME && is.element(NAME, old_names)) 
[13:24:00.339]                     next
[13:24:00.339]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:24:00.339]                 }
[13:24:00.339]                 if (length(args) > 0) 
[13:24:00.339]                   base::do.call(base::Sys.setenv, args = args)
[13:24:00.339]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:24:00.339]             }
[13:24:00.339]             else {
[13:24:00.339]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:24:00.339]             }
[13:24:00.339]             {
[13:24:00.339]                 if (base::length(...future.futureOptionsAdded) > 
[13:24:00.339]                   0L) {
[13:24:00.339]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:24:00.339]                   base::names(opts) <- ...future.futureOptionsAdded
[13:24:00.339]                   base::options(opts)
[13:24:00.339]                 }
[13:24:00.339]                 {
[13:24:00.339]                   {
[13:24:00.339]                     base::options(mc.cores = ...future.mc.cores.old)
[13:24:00.339]                     NULL
[13:24:00.339]                   }
[13:24:00.339]                   options(future.plan = NULL)
[13:24:00.339]                   if (is.na(NA_character_)) 
[13:24:00.339]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:24:00.339]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:24:00.339]                   future::plan(list(a = function (..., workers = availableCores(), 
[13:24:00.339]                     lazy = FALSE, rscript_libs = .libPaths(), 
[13:24:00.339]                     envir = parent.frame()) 
[13:24:00.339]                   {
[13:24:00.339]                     if (is.function(workers)) 
[13:24:00.339]                       workers <- workers()
[13:24:00.339]                     workers <- structure(as.integer(workers), 
[13:24:00.339]                       class = class(workers))
[13:24:00.339]                     stop_if_not(length(workers) == 1, is.finite(workers), 
[13:24:00.339]                       workers >= 1)
[13:24:00.339]                     if (workers == 1L && !inherits(workers, "AsIs")) {
[13:24:00.339]                       return(sequential(..., lazy = TRUE, envir = envir))
[13:24:00.339]                     }
[13:24:00.339]                     future <- MultisessionFuture(..., workers = workers, 
[13:24:00.339]                       lazy = lazy, rscript_libs = rscript_libs, 
[13:24:00.339]                       envir = envir)
[13:24:00.339]                     if (!future$lazy) 
[13:24:00.339]                       future <- run(future)
[13:24:00.339]                     invisible(future)
[13:24:00.339]                   }, b = function (..., envir = parent.frame()) 
[13:24:00.339]                   {
[13:24:00.339]                     future <- SequentialFuture(..., envir = envir)
[13:24:00.339]                     if (!future$lazy) 
[13:24:00.339]                       future <- run(future)
[13:24:00.339]                     invisible(future)
[13:24:00.339]                   }), .cleanup = FALSE, .init = FALSE)
[13:24:00.339]                 }
[13:24:00.339]             }
[13:24:00.339]         }
[13:24:00.339]     })
[13:24:00.339]     if (TRUE) {
[13:24:00.339]         base::sink(type = "output", split = FALSE)
[13:24:00.339]         if (TRUE) {
[13:24:00.339]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:24:00.339]         }
[13:24:00.339]         else {
[13:24:00.339]             ...future.result["stdout"] <- base::list(NULL)
[13:24:00.339]         }
[13:24:00.339]         base::close(...future.stdout)
[13:24:00.339]         ...future.stdout <- NULL
[13:24:00.339]     }
[13:24:00.339]     ...future.result$conditions <- ...future.conditions
[13:24:00.339]     ...future.result$finished <- base::Sys.time()
[13:24:00.339]     ...future.result
[13:24:00.339] }
[13:24:00.342] Exporting 1 global objects (128 bytes) to cluster node #1 ...
[13:24:00.342] Exporting ‘data’ (128 bytes) to cluster node #1 ...
[13:24:00.343] Exporting ‘data’ (128 bytes) to cluster node #1 ... DONE
[13:24:00.343] Exporting 1 global objects (128 bytes) to cluster node #1 ... DONE
[13:24:00.343] MultisessionFuture started
[13:24:00.344] - Launch lazy future ... done
[13:24:00.344] run() for ‘MultisessionFuture’ ... done
[13:24:00.344] result() for ClusterFuture ...
[13:24:00.344] receiveMessageFromWorker() for ClusterFuture ...
[13:24:00.344] - Validating connection of MultisessionFuture
[13:24:00.393] - received message: FutureResult
[13:24:00.393] - Received FutureResult
[13:24:00.394] - Erased future from FutureRegistry
[13:24:00.394] result() for ClusterFuture ...
[13:24:00.394] - result already collected: FutureResult
[13:24:00.394] result() for ClusterFuture ... done
[13:24:00.394] receiveMessageFromWorker() for ClusterFuture ... done
[13:24:00.394] result() for ClusterFuture ... done
[13:24:00.394] result() for ClusterFuture ...
[13:24:00.394] - result already collected: FutureResult
[13:24:00.394] result() for ClusterFuture ... done
- plan(list('multisession', 'sequential')) ... DONE
- plan(list('multisession', 'multicore')) ...
[13:24:00.395] plan(): Setting new future strategy stack:
[13:24:00.395] List of future strategies:
[13:24:00.395] 1. multisession:
[13:24:00.395]    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[13:24:00.395]    - tweaked: FALSE
[13:24:00.395]    - call: plan(list(a = strategy1, b = strategy2))
[13:24:00.395] 2. multicore:
[13:24:00.395]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[13:24:00.395]    - tweaked: FALSE
[13:24:00.395]    - call: plan(list(a = strategy1, b = strategy2))
[13:24:00.396] plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ...
[13:24:00.396] multisession:
[13:24:00.396] - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[13:24:00.396] - tweaked: FALSE
[13:24:00.396] - call: plan(list(a = strategy1, b = strategy2))
[13:24:00.401] getGlobalsAndPackages() ...
[13:24:00.401] Not searching for globals
[13:24:00.401] - globals: [0] <none>
[13:24:00.401] getGlobalsAndPackages() ... DONE
[13:24:00.402] [local output] makeClusterPSOCK() ...
[13:24:00.406] [local output] Workers: [n = 2] ‘localhost’, ‘localhost’
[13:24:00.406] [local output] Base port: 11644
[13:24:00.406] [local output] Getting setup options for 2 cluster nodes ...
[13:24:00.407] [local output]  - Node 1 of 2 ...
[13:24:00.407] [local output] localMachine=TRUE => revtunnel=FALSE

[13:24:00.408] [local output] Rscript port: 11644

[13:24:00.408] [local output]  - Node 2 of 2 ...
[13:24:00.408] [local output] localMachine=TRUE => revtunnel=FALSE

[13:24:00.409] [local output] Rscript port: 11644

[13:24:00.409] [local output] Getting setup options for 2 cluster nodes ... done
[13:24:00.409] [local output]  - Parallel setup requested for some PSOCK nodes
[13:24:00.409] [local output] Setting up PSOCK nodes in parallel
[13:24:00.409] List of 36
[13:24:00.409]  $ worker          : chr "localhost"
[13:24:00.409]   ..- attr(*, "localhost")= logi TRUE
[13:24:00.409]  $ master          : chr "localhost"
[13:24:00.409]  $ port            : int 11644
[13:24:00.409]  $ connectTimeout  : num 120
[13:24:00.409]  $ timeout         : num 2592000
[13:24:00.409]  $ rscript         : chr "'/usr/local/lib/R/bin/Rscript'"
[13:24:00.409]  $ homogeneous     : logi TRUE
[13:24:00.409]  $ rscript_args    : chr "--default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),fi"| __truncated__
[13:24:00.409]  $ rscript_envs    : NULL
[13:24:00.409]  $ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[13:24:00.409]  $ rscript_startup : NULL
[13:24:00.409]  $ rscript_sh      : chr "sh"
[13:24:00.409]  $ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[13:24:00.409]  $ methods         : logi TRUE
[13:24:00.409]  $ socketOptions   : chr "no-delay"
[13:24:00.409]  $ useXDR          : logi FALSE
[13:24:00.409]  $ outfile         : chr "/dev/null"
[13:24:00.409]  $ renice          : int NA
[13:24:00.409]  $ rshcmd          : NULL
[13:24:00.409]  $ user            : chr(0) 
[13:24:00.409]  $ revtunnel       : logi FALSE
[13:24:00.409]  $ rshlogfile      : NULL
[13:24:00.409]  $ rshopts         : chr(0) 
[13:24:00.409]  $ rank            : int 1
[13:24:00.409]  $ manual          : logi FALSE
[13:24:00.409]  $ dryrun          : logi FALSE
[13:24:00.409]  $ quiet           : logi FALSE
[13:24:00.409]  $ setup_strategy  : chr "parallel"
[13:24:00.409]  $ local_cmd       : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[13:24:00.409]  $ pidfile         : chr "/tmp/RtmpKOlrlL/worker.rank=1.parallelly.parent=90070.15fd64024562d.pid"
[13:24:00.409]  $ rshcmd_label    : NULL
[13:24:00.409]  $ rsh_call        : NULL
[13:24:00.409]  $ cmd             : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[13:24:00.409]  $ localMachine    : logi TRUE
[13:24:00.409]  $ make_fcn        :function (worker = getOption2("parallelly.localhost.hostname", "localhost"), 
[13:24:00.409]     master = NULL, port, connectTimeout = getOption2("parallelly.makeNodePSOCK.connectTimeout", 
[13:24:00.409]         2 * 60), timeout = getOption2("parallelly.makeNodePSOCK.timeout", 
[13:24:00.409]         30 * 24 * 60 * 60), rscript = NULL, homogeneous = NULL, rscript_args = NULL, 
[13:24:00.409]     rscript_envs = NULL, rscript_libs = NULL, rscript_startup = NULL, rscript_sh = c("auto", 
[13:24:00.409]         "cmd", "sh"), default_packages = c("datasets", "utils", "grDevices", 
[13:24:00.409]         "graphics", "stats", if (methods) "methods"), methods = TRUE, socketOptions = getOption2("parallelly.makeNodePSOCK.socketOptions", 
[13:24:00.409]         "no-delay"), useXDR = getOption2("parallelly.makeNodePSOCK.useXDR", 
[13:24:00.409]         FALSE), outfile = "/dev/null", renice = NA_integer_, rshcmd = getOption2("parallelly.makeNodePSOCK.rshcmd", 
[13:24:00.409]         NULL), user = NULL, revtunnel = NA, rshlogfile = NULL, rshopts = getOption2("parallelly.makeNodePSOCK.rshopts", 
[13:24:00.409]         NULL), rank = 1L, manual = FALSE, dryrun = FALSE, quiet = FALSE, 
[13:24:00.409]     setup_strategy = getOption2("parallelly.makeNodePSOCK.setup_strategy", 
[13:24:00.409]         "parallel"), action = c("launch", "options"), verbose = FALSE)  
[13:24:00.409]  $ arguments       :List of 28
[13:24:00.409]   ..$ worker          : chr "localhost"
[13:24:00.409]   ..$ master          : NULL
[13:24:00.409]   ..$ port            : int 11644
[13:24:00.409]   ..$ connectTimeout  : num 120
[13:24:00.409]   ..$ timeout         : num 2592000
[13:24:00.409]   ..$ rscript         : NULL
[13:24:00.409]   ..$ homogeneous     : NULL
[13:24:00.409]   ..$ rscript_args    : NULL
[13:24:00.409]   ..$ rscript_envs    : NULL
[13:24:00.409]   ..$ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[13:24:00.409]   ..$ rscript_startup : NULL
[13:24:00.409]   ..$ rscript_sh      : chr [1:3] "auto" "cmd" "sh"
[13:24:00.409]   ..$ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[13:24:00.409]   ..$ methods         : logi TRUE
[13:24:00.409]   ..$ socketOptions   : chr "no-delay"
[13:24:00.409]   ..$ useXDR          : logi FALSE
[13:24:00.409]   ..$ outfile         : chr "/dev/null"
[13:24:00.409]   ..$ renice          : int NA
[13:24:00.409]   ..$ rshcmd          : NULL
[13:24:00.409]   ..$ user            : NULL
[13:24:00.409]   ..$ revtunnel       : logi NA
[13:24:00.409]   ..$ rshlogfile      : NULL
[13:24:00.409]   ..$ rshopts         : NULL
[13:24:00.409]   ..$ rank            : int 1
[13:24:00.409]   ..$ manual          : logi FALSE
[13:24:00.409]   ..$ dryrun          : logi FALSE
[13:24:00.409]   ..$ quiet           : logi FALSE
[13:24:00.409]   ..$ setup_strategy  : chr "parallel"
[13:24:00.409]  - attr(*, "class")= chr [1:2] "makeNodePSOCKOptions" "makeNodeOptions"
[13:24:00.429] [local output] System call to launch all workers:
[13:24:00.429] [local output] '/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/RtmpKOlrlL/worker.rank=1.parallelly.parent=90070.15fd64024562d.pid")), silent = TRUE)' -e 'options(socketOptions = "no-delay")' -e '.libPaths(c("/usr/local/lib/R/site-library","/usr/local/lib/R/library"))' -e 'workRSOCK <- tryCatch(parallel:::.workRSOCK, error=function(e) parallel:::.slaveRSOCK); workRSOCK()' MASTER=localhost PORT=11644 OUT=/dev/null TIMEOUT=2592000 XDR=FALSE SETUPTIMEOUT=120 SETUPSTRATEGY=parallel
[13:24:00.430] [local output] Starting PSOCK main server
[13:24:00.431] [local output] Workers launched
[13:24:00.431] [local output] Waiting for workers to connect back
[13:24:00.432]  - [local output] 0 workers out of 2 ready
[13:24:00.688]  - [local output] 0 workers out of 2 ready
[13:24:00.688]  - [local output] 1 workers out of 2 ready
[13:24:00.688]  - [local output] 2 workers out of 2 ready
[13:24:00.689] [local output] Launching of workers completed
[13:24:00.689] [local output] Collecting session information from workers
[13:24:00.689] [local output]  - Worker #1 of 2
[13:24:00.690] [local output]  - Worker #2 of 2
[13:24:00.690] [local output] makeClusterPSOCK() ... done
[13:24:00.701] Packages needed by the future expression (n = 0): <none>
[13:24:00.701] Packages needed by future strategies (n = 1): ‘future’
[13:24:00.702] {
[13:24:00.702]     {
[13:24:00.702]         {
[13:24:00.702]             ...future.startTime <- base::Sys.time()
[13:24:00.702]             {
[13:24:00.702]                 {
[13:24:00.702]                   {
[13:24:00.702]                     {
[13:24:00.702]                       {
[13:24:00.702]                         base::local({
[13:24:00.702]                           has_future <- base::requireNamespace("future", 
[13:24:00.702]                             quietly = TRUE)
[13:24:00.702]                           if (has_future) {
[13:24:00.702]                             ns <- base::getNamespace("future")
[13:24:00.702]                             version <- ns[[".package"]][["version"]]
[13:24:00.702]                             if (is.null(version)) 
[13:24:00.702]                               version <- utils::packageVersion("future")
[13:24:00.702]                           }
[13:24:00.702]                           else {
[13:24:00.702]                             version <- NULL
[13:24:00.702]                           }
[13:24:00.702]                           if (!has_future || version < "1.8.0") {
[13:24:00.702]                             info <- base::c(r_version = base::gsub("R version ", 
[13:24:00.702]                               "", base::R.version$version.string), 
[13:24:00.702]                               platform = base::sprintf("%s (%s-bit)", 
[13:24:00.702]                                 base::R.version$platform, 8 * 
[13:24:00.702]                                   base::.Machine$sizeof.pointer), 
[13:24:00.702]                               os = base::paste(base::Sys.info()[base::c("sysname", 
[13:24:00.702]                                 "release", "version")], collapse = " "), 
[13:24:00.702]                               hostname = base::Sys.info()[["nodename"]])
[13:24:00.702]                             info <- base::sprintf("%s: %s", base::names(info), 
[13:24:00.702]                               info)
[13:24:00.702]                             info <- base::paste(info, collapse = "; ")
[13:24:00.702]                             if (!has_future) {
[13:24:00.702]                               msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:24:00.702]                                 info)
[13:24:00.702]                             }
[13:24:00.702]                             else {
[13:24:00.702]                               msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:24:00.702]                                 info, version)
[13:24:00.702]                             }
[13:24:00.702]                             base::stop(msg)
[13:24:00.702]                           }
[13:24:00.702]                         })
[13:24:00.702]                       }
[13:24:00.702]                       ...future.mc.cores.old <- base::getOption("mc.cores")
[13:24:00.702]                       base::options(mc.cores = 1L)
[13:24:00.702]                     }
[13:24:00.702]                     base::local({
[13:24:00.702]                       for (pkg in "future") {
[13:24:00.702]                         base::loadNamespace(pkg)
[13:24:00.702]                         base::library(pkg, character.only = TRUE)
[13:24:00.702]                       }
[13:24:00.702]                     })
[13:24:00.702]                   }
[13:24:00.702]                   options(future.plan = NULL)
[13:24:00.702]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:24:00.702]                   future::plan(list(b = function (..., workers = availableCores(constraints = "multicore"), 
[13:24:00.702]                     envir = parent.frame()) 
[13:24:00.702]                   {
[13:24:00.702]                     default_workers <- missing(workers)
[13:24:00.702]                     if (is.function(workers)) 
[13:24:00.702]                       workers <- workers()
[13:24:00.702]                     workers <- structure(as.integer(workers), 
[13:24:00.702]                       class = class(workers))
[13:24:00.702]                     stop_if_not(is.finite(workers), workers >= 
[13:24:00.702]                       1L)
[13:24:00.702]                     if ((workers == 1L && !inherits(workers, 
[13:24:00.702]                       "AsIs")) || !supportsMulticore(warn = TRUE)) {
[13:24:00.702]                       if (default_workers) 
[13:24:00.702]                         supportsMulticore(warn = TRUE)
[13:24:00.702]                       return(sequential(..., envir = envir))
[13:24:00.702]                     }
[13:24:00.702]                     oopts <- options(mc.cores = workers)
[13:24:00.702]                     on.exit(options(oopts))
[13:24:00.702]                     future <- MulticoreFuture(..., workers = workers, 
[13:24:00.702]                       envir = envir)
[13:24:00.702]                     if (!future$lazy) 
[13:24:00.702]                       future <- run(future)
[13:24:00.702]                     invisible(future)
[13:24:00.702]                   }), .cleanup = FALSE, .init = FALSE)
[13:24:00.702]                 }
[13:24:00.702]                 ...future.workdir <- getwd()
[13:24:00.702]             }
[13:24:00.702]             ...future.oldOptions <- base::as.list(base::.Options)
[13:24:00.702]             ...future.oldEnvVars <- base::Sys.getenv()
[13:24:00.702]         }
[13:24:00.702]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:24:00.702]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:24:00.702]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:24:00.702]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:24:00.702]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:24:00.702]             future.stdout.windows.reencode = NULL, width = 80L)
[13:24:00.702]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:24:00.702]             base::names(...future.oldOptions))
[13:24:00.702]     }
[13:24:00.702]     if (FALSE) {
[13:24:00.702]     }
[13:24:00.702]     else {
[13:24:00.702]         if (TRUE) {
[13:24:00.702]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:24:00.702]                 open = "w")
[13:24:00.702]         }
[13:24:00.702]         else {
[13:24:00.702]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:24:00.702]                 windows = "NUL", "/dev/null"), open = "w")
[13:24:00.702]         }
[13:24:00.702]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:24:00.702]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:24:00.702]             base::sink(type = "output", split = FALSE)
[13:24:00.702]             base::close(...future.stdout)
[13:24:00.702]         }, add = TRUE)
[13:24:00.702]     }
[13:24:00.702]     ...future.frame <- base::sys.nframe()
[13:24:00.702]     ...future.conditions <- base::list()
[13:24:00.702]     ...future.rng <- base::globalenv()$.Random.seed
[13:24:00.702]     if (FALSE) {
[13:24:00.702]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:24:00.702]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:24:00.702]     }
[13:24:00.702]     ...future.result <- base::tryCatch({
[13:24:00.702]         base::withCallingHandlers({
[13:24:00.702]             ...future.value <- base::withVisible(base::local({
[13:24:00.702]                 ...future.makeSendCondition <- base::local({
[13:24:00.702]                   sendCondition <- NULL
[13:24:00.702]                   function(frame = 1L) {
[13:24:00.702]                     if (is.function(sendCondition)) 
[13:24:00.702]                       return(sendCondition)
[13:24:00.702]                     ns <- getNamespace("parallel")
[13:24:00.702]                     if (exists("sendData", mode = "function", 
[13:24:00.702]                       envir = ns)) {
[13:24:00.702]                       parallel_sendData <- get("sendData", mode = "function", 
[13:24:00.702]                         envir = ns)
[13:24:00.702]                       envir <- sys.frame(frame)
[13:24:00.702]                       master <- NULL
[13:24:00.702]                       while (!identical(envir, .GlobalEnv) && 
[13:24:00.702]                         !identical(envir, emptyenv())) {
[13:24:00.702]                         if (exists("master", mode = "list", envir = envir, 
[13:24:00.702]                           inherits = FALSE)) {
[13:24:00.702]                           master <- get("master", mode = "list", 
[13:24:00.702]                             envir = envir, inherits = FALSE)
[13:24:00.702]                           if (inherits(master, c("SOCKnode", 
[13:24:00.702]                             "SOCK0node"))) {
[13:24:00.702]                             sendCondition <<- function(cond) {
[13:24:00.702]                               data <- list(type = "VALUE", value = cond, 
[13:24:00.702]                                 success = TRUE)
[13:24:00.702]                               parallel_sendData(master, data)
[13:24:00.702]                             }
[13:24:00.702]                             return(sendCondition)
[13:24:00.702]                           }
[13:24:00.702]                         }
[13:24:00.702]                         frame <- frame + 1L
[13:24:00.702]                         envir <- sys.frame(frame)
[13:24:00.702]                       }
[13:24:00.702]                     }
[13:24:00.702]                     sendCondition <<- function(cond) NULL
[13:24:00.702]                   }
[13:24:00.702]                 })
[13:24:00.702]                 withCallingHandlers({
[13:24:00.702]                   NA
[13:24:00.702]                 }, immediateCondition = function(cond) {
[13:24:00.702]                   sendCondition <- ...future.makeSendCondition()
[13:24:00.702]                   sendCondition(cond)
[13:24:00.702]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:24:00.702]                   {
[13:24:00.702]                     inherits <- base::inherits
[13:24:00.702]                     invokeRestart <- base::invokeRestart
[13:24:00.702]                     is.null <- base::is.null
[13:24:00.702]                     muffled <- FALSE
[13:24:00.702]                     if (inherits(cond, "message")) {
[13:24:00.702]                       muffled <- grepl(pattern, "muffleMessage")
[13:24:00.702]                       if (muffled) 
[13:24:00.702]                         invokeRestart("muffleMessage")
[13:24:00.702]                     }
[13:24:00.702]                     else if (inherits(cond, "warning")) {
[13:24:00.702]                       muffled <- grepl(pattern, "muffleWarning")
[13:24:00.702]                       if (muffled) 
[13:24:00.702]                         invokeRestart("muffleWarning")
[13:24:00.702]                     }
[13:24:00.702]                     else if (inherits(cond, "condition")) {
[13:24:00.702]                       if (!is.null(pattern)) {
[13:24:00.702]                         computeRestarts <- base::computeRestarts
[13:24:00.702]                         grepl <- base::grepl
[13:24:00.702]                         restarts <- computeRestarts(cond)
[13:24:00.702]                         for (restart in restarts) {
[13:24:00.702]                           name <- restart$name
[13:24:00.702]                           if (is.null(name)) 
[13:24:00.702]                             next
[13:24:00.702]                           if (!grepl(pattern, name)) 
[13:24:00.702]                             next
[13:24:00.702]                           invokeRestart(restart)
[13:24:00.702]                           muffled <- TRUE
[13:24:00.702]                           break
[13:24:00.702]                         }
[13:24:00.702]                       }
[13:24:00.702]                     }
[13:24:00.702]                     invisible(muffled)
[13:24:00.702]                   }
[13:24:00.702]                   muffleCondition(cond)
[13:24:00.702]                 })
[13:24:00.702]             }))
[13:24:00.702]             future::FutureResult(value = ...future.value$value, 
[13:24:00.702]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:24:00.702]                   ...future.rng), globalenv = if (FALSE) 
[13:24:00.702]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:24:00.702]                     ...future.globalenv.names))
[13:24:00.702]                 else NULL, started = ...future.startTime, version = "1.8")
[13:24:00.702]         }, condition = base::local({
[13:24:00.702]             c <- base::c
[13:24:00.702]             inherits <- base::inherits
[13:24:00.702]             invokeRestart <- base::invokeRestart
[13:24:00.702]             length <- base::length
[13:24:00.702]             list <- base::list
[13:24:00.702]             seq.int <- base::seq.int
[13:24:00.702]             signalCondition <- base::signalCondition
[13:24:00.702]             sys.calls <- base::sys.calls
[13:24:00.702]             `[[` <- base::`[[`
[13:24:00.702]             `+` <- base::`+`
[13:24:00.702]             `<<-` <- base::`<<-`
[13:24:00.702]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:24:00.702]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:24:00.702]                   3L)]
[13:24:00.702]             }
[13:24:00.702]             function(cond) {
[13:24:00.702]                 is_error <- inherits(cond, "error")
[13:24:00.702]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:24:00.702]                   NULL)
[13:24:00.702]                 if (is_error) {
[13:24:00.702]                   sessionInformation <- function() {
[13:24:00.702]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:24:00.702]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:24:00.702]                       search = base::search(), system = base::Sys.info())
[13:24:00.702]                   }
[13:24:00.702]                   ...future.conditions[[length(...future.conditions) + 
[13:24:00.702]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:24:00.702]                     cond$call), session = sessionInformation(), 
[13:24:00.702]                     timestamp = base::Sys.time(), signaled = 0L)
[13:24:00.702]                   signalCondition(cond)
[13:24:00.702]                 }
[13:24:00.702]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:24:00.702]                 "immediateCondition"))) {
[13:24:00.702]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:24:00.702]                   ...future.conditions[[length(...future.conditions) + 
[13:24:00.702]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:24:00.702]                   if (TRUE && !signal) {
[13:24:00.702]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:24:00.702]                     {
[13:24:00.702]                       inherits <- base::inherits
[13:24:00.702]                       invokeRestart <- base::invokeRestart
[13:24:00.702]                       is.null <- base::is.null
[13:24:00.702]                       muffled <- FALSE
[13:24:00.702]                       if (inherits(cond, "message")) {
[13:24:00.702]                         muffled <- grepl(pattern, "muffleMessage")
[13:24:00.702]                         if (muffled) 
[13:24:00.702]                           invokeRestart("muffleMessage")
[13:24:00.702]                       }
[13:24:00.702]                       else if (inherits(cond, "warning")) {
[13:24:00.702]                         muffled <- grepl(pattern, "muffleWarning")
[13:24:00.702]                         if (muffled) 
[13:24:00.702]                           invokeRestart("muffleWarning")
[13:24:00.702]                       }
[13:24:00.702]                       else if (inherits(cond, "condition")) {
[13:24:00.702]                         if (!is.null(pattern)) {
[13:24:00.702]                           computeRestarts <- base::computeRestarts
[13:24:00.702]                           grepl <- base::grepl
[13:24:00.702]                           restarts <- computeRestarts(cond)
[13:24:00.702]                           for (restart in restarts) {
[13:24:00.702]                             name <- restart$name
[13:24:00.702]                             if (is.null(name)) 
[13:24:00.702]                               next
[13:24:00.702]                             if (!grepl(pattern, name)) 
[13:24:00.702]                               next
[13:24:00.702]                             invokeRestart(restart)
[13:24:00.702]                             muffled <- TRUE
[13:24:00.702]                             break
[13:24:00.702]                           }
[13:24:00.702]                         }
[13:24:00.702]                       }
[13:24:00.702]                       invisible(muffled)
[13:24:00.702]                     }
[13:24:00.702]                     muffleCondition(cond, pattern = "^muffle")
[13:24:00.702]                   }
[13:24:00.702]                 }
[13:24:00.702]                 else {
[13:24:00.702]                   if (TRUE) {
[13:24:00.702]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:24:00.702]                     {
[13:24:00.702]                       inherits <- base::inherits
[13:24:00.702]                       invokeRestart <- base::invokeRestart
[13:24:00.702]                       is.null <- base::is.null
[13:24:00.702]                       muffled <- FALSE
[13:24:00.702]                       if (inherits(cond, "message")) {
[13:24:00.702]                         muffled <- grepl(pattern, "muffleMessage")
[13:24:00.702]                         if (muffled) 
[13:24:00.702]                           invokeRestart("muffleMessage")
[13:24:00.702]                       }
[13:24:00.702]                       else if (inherits(cond, "warning")) {
[13:24:00.702]                         muffled <- grepl(pattern, "muffleWarning")
[13:24:00.702]                         if (muffled) 
[13:24:00.702]                           invokeRestart("muffleWarning")
[13:24:00.702]                       }
[13:24:00.702]                       else if (inherits(cond, "condition")) {
[13:24:00.702]                         if (!is.null(pattern)) {
[13:24:00.702]                           computeRestarts <- base::computeRestarts
[13:24:00.702]                           grepl <- base::grepl
[13:24:00.702]                           restarts <- computeRestarts(cond)
[13:24:00.702]                           for (restart in restarts) {
[13:24:00.702]                             name <- restart$name
[13:24:00.702]                             if (is.null(name)) 
[13:24:00.702]                               next
[13:24:00.702]                             if (!grepl(pattern, name)) 
[13:24:00.702]                               next
[13:24:00.702]                             invokeRestart(restart)
[13:24:00.702]                             muffled <- TRUE
[13:24:00.702]                             break
[13:24:00.702]                           }
[13:24:00.702]                         }
[13:24:00.702]                       }
[13:24:00.702]                       invisible(muffled)
[13:24:00.702]                     }
[13:24:00.702]                     muffleCondition(cond, pattern = "^muffle")
[13:24:00.702]                   }
[13:24:00.702]                 }
[13:24:00.702]             }
[13:24:00.702]         }))
[13:24:00.702]     }, error = function(ex) {
[13:24:00.702]         base::structure(base::list(value = NULL, visible = NULL, 
[13:24:00.702]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:24:00.702]                 ...future.rng), started = ...future.startTime, 
[13:24:00.702]             finished = Sys.time(), session_uuid = NA_character_, 
[13:24:00.702]             version = "1.8"), class = "FutureResult")
[13:24:00.702]     }, finally = {
[13:24:00.702]         if (!identical(...future.workdir, getwd())) 
[13:24:00.702]             setwd(...future.workdir)
[13:24:00.702]         {
[13:24:00.702]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:24:00.702]                 ...future.oldOptions$nwarnings <- NULL
[13:24:00.702]             }
[13:24:00.702]             base::options(...future.oldOptions)
[13:24:00.702]             if (.Platform$OS.type == "windows") {
[13:24:00.702]                 old_names <- names(...future.oldEnvVars)
[13:24:00.702]                 envs <- base::Sys.getenv()
[13:24:00.702]                 names <- names(envs)
[13:24:00.702]                 common <- intersect(names, old_names)
[13:24:00.702]                 added <- setdiff(names, old_names)
[13:24:00.702]                 removed <- setdiff(old_names, names)
[13:24:00.702]                 changed <- common[...future.oldEnvVars[common] != 
[13:24:00.702]                   envs[common]]
[13:24:00.702]                 NAMES <- toupper(changed)
[13:24:00.702]                 args <- list()
[13:24:00.702]                 for (kk in seq_along(NAMES)) {
[13:24:00.702]                   name <- changed[[kk]]
[13:24:00.702]                   NAME <- NAMES[[kk]]
[13:24:00.702]                   if (name != NAME && is.element(NAME, old_names)) 
[13:24:00.702]                     next
[13:24:00.702]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:24:00.702]                 }
[13:24:00.702]                 NAMES <- toupper(added)
[13:24:00.702]                 for (kk in seq_along(NAMES)) {
[13:24:00.702]                   name <- added[[kk]]
[13:24:00.702]                   NAME <- NAMES[[kk]]
[13:24:00.702]                   if (name != NAME && is.element(NAME, old_names)) 
[13:24:00.702]                     next
[13:24:00.702]                   args[[name]] <- ""
[13:24:00.702]                 }
[13:24:00.702]                 NAMES <- toupper(removed)
[13:24:00.702]                 for (kk in seq_along(NAMES)) {
[13:24:00.702]                   name <- removed[[kk]]
[13:24:00.702]                   NAME <- NAMES[[kk]]
[13:24:00.702]                   if (name != NAME && is.element(NAME, old_names)) 
[13:24:00.702]                     next
[13:24:00.702]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:24:00.702]                 }
[13:24:00.702]                 if (length(args) > 0) 
[13:24:00.702]                   base::do.call(base::Sys.setenv, args = args)
[13:24:00.702]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:24:00.702]             }
[13:24:00.702]             else {
[13:24:00.702]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:24:00.702]             }
[13:24:00.702]             {
[13:24:00.702]                 if (base::length(...future.futureOptionsAdded) > 
[13:24:00.702]                   0L) {
[13:24:00.702]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:24:00.702]                   base::names(opts) <- ...future.futureOptionsAdded
[13:24:00.702]                   base::options(opts)
[13:24:00.702]                 }
[13:24:00.702]                 {
[13:24:00.702]                   {
[13:24:00.702]                     base::options(mc.cores = ...future.mc.cores.old)
[13:24:00.702]                     NULL
[13:24:00.702]                   }
[13:24:00.702]                   options(future.plan = NULL)
[13:24:00.702]                   if (is.na(NA_character_)) 
[13:24:00.702]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:24:00.702]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:24:00.702]                   future::plan(list(a = function (..., workers = availableCores(), 
[13:24:00.702]                     lazy = FALSE, rscript_libs = .libPaths(), 
[13:24:00.702]                     envir = parent.frame()) 
[13:24:00.702]                   {
[13:24:00.702]                     if (is.function(workers)) 
[13:24:00.702]                       workers <- workers()
[13:24:00.702]                     workers <- structure(as.integer(workers), 
[13:24:00.702]                       class = class(workers))
[13:24:00.702]                     stop_if_not(length(workers) == 1, is.finite(workers), 
[13:24:00.702]                       workers >= 1)
[13:24:00.702]                     if (workers == 1L && !inherits(workers, "AsIs")) {
[13:24:00.702]                       return(sequential(..., lazy = TRUE, envir = envir))
[13:24:00.702]                     }
[13:24:00.702]                     future <- MultisessionFuture(..., workers = workers, 
[13:24:00.702]                       lazy = lazy, rscript_libs = rscript_libs, 
[13:24:00.702]                       envir = envir)
[13:24:00.702]                     if (!future$lazy) 
[13:24:00.702]                       future <- run(future)
[13:24:00.702]                     invisible(future)
[13:24:00.702]                   }, b = function (..., workers = availableCores(constraints = "multicore"), 
[13:24:00.702]                     envir = parent.frame()) 
[13:24:00.702]                   {
[13:24:00.702]                     default_workers <- missing(workers)
[13:24:00.702]                     if (is.function(workers)) 
[13:24:00.702]                       workers <- workers()
[13:24:00.702]                     workers <- structure(as.integer(workers), 
[13:24:00.702]                       class = class(workers))
[13:24:00.702]                     stop_if_not(is.finite(workers), workers >= 
[13:24:00.702]                       1L)
[13:24:00.702]                     if ((workers == 1L && !inherits(workers, 
[13:24:00.702]                       "AsIs")) || !supportsMulticore(warn = TRUE)) {
[13:24:00.702]                       if (default_workers) 
[13:24:00.702]                         supportsMulticore(warn = TRUE)
[13:24:00.702]                       return(sequential(..., envir = envir))
[13:24:00.702]                     }
[13:24:00.702]                     oopts <- options(mc.cores = workers)
[13:24:00.702]                     on.exit(options(oopts))
[13:24:00.702]                     future <- MulticoreFuture(..., workers = workers, 
[13:24:00.702]                       envir = envir)
[13:24:00.702]                     if (!future$lazy) 
[13:24:00.702]                       future <- run(future)
[13:24:00.702]                     invisible(future)
[13:24:00.702]                   }), .cleanup = FALSE, .init = FALSE)
[13:24:00.702]                 }
[13:24:00.702]             }
[13:24:00.702]         }
[13:24:00.702]     })
[13:24:00.702]     if (TRUE) {
[13:24:00.702]         base::sink(type = "output", split = FALSE)
[13:24:00.702]         if (TRUE) {
[13:24:00.702]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:24:00.702]         }
[13:24:00.702]         else {
[13:24:00.702]             ...future.result["stdout"] <- base::list(NULL)
[13:24:00.702]         }
[13:24:00.702]         base::close(...future.stdout)
[13:24:00.702]         ...future.stdout <- NULL
[13:24:00.702]     }
[13:24:00.702]     ...future.result$conditions <- ...future.conditions
[13:24:00.702]     ...future.result$finished <- base::Sys.time()
[13:24:00.702]     ...future.result
[13:24:00.702] }
[13:24:00.758] MultisessionFuture started
[13:24:00.758] result() for ClusterFuture ...
[13:24:00.759] receiveMessageFromWorker() for ClusterFuture ...
[13:24:00.759] - Validating connection of MultisessionFuture
[13:24:00.811] - received message: FutureResult
[13:24:00.812] - Received FutureResult
[13:24:00.812] - Erased future from FutureRegistry
[13:24:00.812] result() for ClusterFuture ...
[13:24:00.812] - result already collected: FutureResult
[13:24:00.812] result() for ClusterFuture ... done
[13:24:00.812] receiveMessageFromWorker() for ClusterFuture ... done
[13:24:00.812] result() for ClusterFuture ... done
[13:24:00.813] result() for ClusterFuture ...
[13:24:00.813] - result already collected: FutureResult
[13:24:00.813] result() for ClusterFuture ... done
[13:24:00.813] plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ... DONE
[13:24:00.816] plan(): nbrOfWorkers() = 2
[13:24:00.817] getGlobalsAndPackages() ...
[13:24:00.817] Searching for globals...
[13:24:00.835] - globals found: [21] ‘{’, ‘<-’, ‘unclass’, ‘::’, ‘[’, ‘nested’, ‘-’, ‘stopifnot’, ‘==’, ‘length’, ‘inherits’, ‘[[’, ‘strategy2’, ‘for’, ‘seq_along’, ‘attr’, ‘attr<-’, ‘[[<-’, ‘all.equal’, ‘list’, ‘%<-%’
[13:24:00.836] Searching for globals ... DONE
[13:24:00.836] Resolving globals: FALSE
[13:24:00.837] The total size of the 2 globals is 90.70 KiB (92872 bytes)
[13:24:00.837] The total size of the 2 globals exported for future expression (‘{; a <- 1L; plan_a <- unclass(future::plan("list")); nested_a <- nested[-1]; stopifnot(length(nested_a) == 1L, length(plan_a) == 1L, inherits(plan_a[[1]],; "future"), inherits(future::plan("next"), strategy2)); ...; }; y; }’) is 90.70 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘nested’ (90.58 KiB of class ‘list’) and ‘strategy2’ (120 bytes of class ‘character’)
[13:24:00.837] - globals: [2] ‘nested’, ‘strategy2’
[13:24:00.838] - packages: [1] ‘future’
[13:24:00.838] getGlobalsAndPackages() ... DONE
[13:24:00.838] run() for ‘Future’ ...
[13:24:00.838] - state: ‘created’
[13:24:00.838] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[13:24:00.853] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:24:00.853] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[13:24:00.853]   - Field: ‘node’
[13:24:00.853]   - Field: ‘label’
[13:24:00.854]   - Field: ‘local’
[13:24:00.854]   - Field: ‘owner’
[13:24:00.854]   - Field: ‘envir’
[13:24:00.854]   - Field: ‘workers’
[13:24:00.854]   - Field: ‘packages’
[13:24:00.854]   - Field: ‘gc’
[13:24:00.854]   - Field: ‘conditions’
[13:24:00.854]   - Field: ‘persistent’
[13:24:00.854]   - Field: ‘expr’
[13:24:00.854]   - Field: ‘uuid’
[13:24:00.855]   - Field: ‘seed’
[13:24:00.855]   - Field: ‘version’
[13:24:00.855]   - Field: ‘result’
[13:24:00.855]   - Field: ‘asynchronous’
[13:24:00.855]   - Field: ‘calls’
[13:24:00.855]   - Field: ‘globals’
[13:24:00.855]   - Field: ‘stdout’
[13:24:00.855]   - Field: ‘earlySignal’
[13:24:00.855]   - Field: ‘lazy’
[13:24:00.855]   - Field: ‘state’
[13:24:00.855] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[13:24:00.856] - Launch lazy future ...
[13:24:00.856] Packages needed by the future expression (n = 1): ‘future’
[13:24:00.856] Packages needed by future strategies (n = 1): ‘future’
[13:24:00.857] {
[13:24:00.857]     {
[13:24:00.857]         {
[13:24:00.857]             ...future.startTime <- base::Sys.time()
[13:24:00.857]             {
[13:24:00.857]                 {
[13:24:00.857]                   {
[13:24:00.857]                     {
[13:24:00.857]                       {
[13:24:00.857]                         base::local({
[13:24:00.857]                           has_future <- base::requireNamespace("future", 
[13:24:00.857]                             quietly = TRUE)
[13:24:00.857]                           if (has_future) {
[13:24:00.857]                             ns <- base::getNamespace("future")
[13:24:00.857]                             version <- ns[[".package"]][["version"]]
[13:24:00.857]                             if (is.null(version)) 
[13:24:00.857]                               version <- utils::packageVersion("future")
[13:24:00.857]                           }
[13:24:00.857]                           else {
[13:24:00.857]                             version <- NULL
[13:24:00.857]                           }
[13:24:00.857]                           if (!has_future || version < "1.8.0") {
[13:24:00.857]                             info <- base::c(r_version = base::gsub("R version ", 
[13:24:00.857]                               "", base::R.version$version.string), 
[13:24:00.857]                               platform = base::sprintf("%s (%s-bit)", 
[13:24:00.857]                                 base::R.version$platform, 8 * 
[13:24:00.857]                                   base::.Machine$sizeof.pointer), 
[13:24:00.857]                               os = base::paste(base::Sys.info()[base::c("sysname", 
[13:24:00.857]                                 "release", "version")], collapse = " "), 
[13:24:00.857]                               hostname = base::Sys.info()[["nodename"]])
[13:24:00.857]                             info <- base::sprintf("%s: %s", base::names(info), 
[13:24:00.857]                               info)
[13:24:00.857]                             info <- base::paste(info, collapse = "; ")
[13:24:00.857]                             if (!has_future) {
[13:24:00.857]                               msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:24:00.857]                                 info)
[13:24:00.857]                             }
[13:24:00.857]                             else {
[13:24:00.857]                               msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:24:00.857]                                 info, version)
[13:24:00.857]                             }
[13:24:00.857]                             base::stop(msg)
[13:24:00.857]                           }
[13:24:00.857]                         })
[13:24:00.857]                       }
[13:24:00.857]                       ...future.mc.cores.old <- base::getOption("mc.cores")
[13:24:00.857]                       base::options(mc.cores = 1L)
[13:24:00.857]                     }
[13:24:00.857]                     base::local({
[13:24:00.857]                       for (pkg in "future") {
[13:24:00.857]                         base::loadNamespace(pkg)
[13:24:00.857]                         base::library(pkg, character.only = TRUE)
[13:24:00.857]                       }
[13:24:00.857]                     })
[13:24:00.857]                   }
[13:24:00.857]                   options(future.plan = NULL)
[13:24:00.857]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:24:00.857]                   future::plan(list(b = function (..., workers = availableCores(constraints = "multicore"), 
[13:24:00.857]                     envir = parent.frame()) 
[13:24:00.857]                   {
[13:24:00.857]                     default_workers <- missing(workers)
[13:24:00.857]                     if (is.function(workers)) 
[13:24:00.857]                       workers <- workers()
[13:24:00.857]                     workers <- structure(as.integer(workers), 
[13:24:00.857]                       class = class(workers))
[13:24:00.857]                     stop_if_not(is.finite(workers), workers >= 
[13:24:00.857]                       1L)
[13:24:00.857]                     if ((workers == 1L && !inherits(workers, 
[13:24:00.857]                       "AsIs")) || !supportsMulticore(warn = TRUE)) {
[13:24:00.857]                       if (default_workers) 
[13:24:00.857]                         supportsMulticore(warn = TRUE)
[13:24:00.857]                       return(sequential(..., envir = envir))
[13:24:00.857]                     }
[13:24:00.857]                     oopts <- options(mc.cores = workers)
[13:24:00.857]                     on.exit(options(oopts))
[13:24:00.857]                     future <- MulticoreFuture(..., workers = workers, 
[13:24:00.857]                       envir = envir)
[13:24:00.857]                     if (!future$lazy) 
[13:24:00.857]                       future <- run(future)
[13:24:00.857]                     invisible(future)
[13:24:00.857]                   }), .cleanup = FALSE, .init = FALSE)
[13:24:00.857]                 }
[13:24:00.857]                 ...future.workdir <- getwd()
[13:24:00.857]             }
[13:24:00.857]             ...future.oldOptions <- base::as.list(base::.Options)
[13:24:00.857]             ...future.oldEnvVars <- base::Sys.getenv()
[13:24:00.857]         }
[13:24:00.857]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:24:00.857]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:24:00.857]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:24:00.857]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:24:00.857]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:24:00.857]             future.stdout.windows.reencode = NULL, width = 80L)
[13:24:00.857]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:24:00.857]             base::names(...future.oldOptions))
[13:24:00.857]     }
[13:24:00.857]     if (FALSE) {
[13:24:00.857]     }
[13:24:00.857]     else {
[13:24:00.857]         if (TRUE) {
[13:24:00.857]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:24:00.857]                 open = "w")
[13:24:00.857]         }
[13:24:00.857]         else {
[13:24:00.857]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:24:00.857]                 windows = "NUL", "/dev/null"), open = "w")
[13:24:00.857]         }
[13:24:00.857]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:24:00.857]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:24:00.857]             base::sink(type = "output", split = FALSE)
[13:24:00.857]             base::close(...future.stdout)
[13:24:00.857]         }, add = TRUE)
[13:24:00.857]     }
[13:24:00.857]     ...future.frame <- base::sys.nframe()
[13:24:00.857]     ...future.conditions <- base::list()
[13:24:00.857]     ...future.rng <- base::globalenv()$.Random.seed
[13:24:00.857]     if (FALSE) {
[13:24:00.857]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:24:00.857]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:24:00.857]     }
[13:24:00.857]     ...future.result <- base::tryCatch({
[13:24:00.857]         base::withCallingHandlers({
[13:24:00.857]             ...future.value <- base::withVisible(base::local({
[13:24:00.857]                 ...future.makeSendCondition <- base::local({
[13:24:00.857]                   sendCondition <- NULL
[13:24:00.857]                   function(frame = 1L) {
[13:24:00.857]                     if (is.function(sendCondition)) 
[13:24:00.857]                       return(sendCondition)
[13:24:00.857]                     ns <- getNamespace("parallel")
[13:24:00.857]                     if (exists("sendData", mode = "function", 
[13:24:00.857]                       envir = ns)) {
[13:24:00.857]                       parallel_sendData <- get("sendData", mode = "function", 
[13:24:00.857]                         envir = ns)
[13:24:00.857]                       envir <- sys.frame(frame)
[13:24:00.857]                       master <- NULL
[13:24:00.857]                       while (!identical(envir, .GlobalEnv) && 
[13:24:00.857]                         !identical(envir, emptyenv())) {
[13:24:00.857]                         if (exists("master", mode = "list", envir = envir, 
[13:24:00.857]                           inherits = FALSE)) {
[13:24:00.857]                           master <- get("master", mode = "list", 
[13:24:00.857]                             envir = envir, inherits = FALSE)
[13:24:00.857]                           if (inherits(master, c("SOCKnode", 
[13:24:00.857]                             "SOCK0node"))) {
[13:24:00.857]                             sendCondition <<- function(cond) {
[13:24:00.857]                               data <- list(type = "VALUE", value = cond, 
[13:24:00.857]                                 success = TRUE)
[13:24:00.857]                               parallel_sendData(master, data)
[13:24:00.857]                             }
[13:24:00.857]                             return(sendCondition)
[13:24:00.857]                           }
[13:24:00.857]                         }
[13:24:00.857]                         frame <- frame + 1L
[13:24:00.857]                         envir <- sys.frame(frame)
[13:24:00.857]                       }
[13:24:00.857]                     }
[13:24:00.857]                     sendCondition <<- function(cond) NULL
[13:24:00.857]                   }
[13:24:00.857]                 })
[13:24:00.857]                 withCallingHandlers({
[13:24:00.857]                   {
[13:24:00.857]                     a <- 1L
[13:24:00.857]                     plan_a <- unclass(future::plan("list"))
[13:24:00.857]                     nested_a <- nested[-1]
[13:24:00.857]                     stopifnot(length(nested_a) == 1L, length(plan_a) == 
[13:24:00.857]                       1L, inherits(plan_a[[1]], "future"), inherits(future::plan("next"), 
[13:24:00.857]                       strategy2))
[13:24:00.857]                     for (kk in seq_along(plan_a)) attr(plan_a[[kk]], 
[13:24:00.857]                       "init") <- NULL
[13:24:00.857]                     for (kk in seq_along(nested_a)) attr(nested_a[[kk]], 
[13:24:00.857]                       "init") <- NULL
[13:24:00.857]                     stopifnot(all.equal(plan_a, nested_a))
[13:24:00.857]                     y %<-% {
[13:24:00.857]                       b <- 2L
[13:24:00.857]                       plan_b <- future::plan("list")
[13:24:00.857]                       nested_b <- nested_a[-1]
[13:24:00.857]                       stopifnot(length(nested_b) == 0L, length(plan_b) == 
[13:24:00.857]                         1L, inherits(plan_b[[1]], "future"), 
[13:24:00.857]                         inherits(future::plan("next"), "sequential"))
[13:24:00.857]                       list(a = a, nested_a = nested_a, plan_a = plan_a, 
[13:24:00.857]                         b = b, nested_b = nested_b, plan_b = plan_b)
[13:24:00.857]                     }
[13:24:00.857]                     y
[13:24:00.857]                   }
[13:24:00.857]                 }, immediateCondition = function(cond) {
[13:24:00.857]                   sendCondition <- ...future.makeSendCondition()
[13:24:00.857]                   sendCondition(cond)
[13:24:00.857]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:24:00.857]                   {
[13:24:00.857]                     inherits <- base::inherits
[13:24:00.857]                     invokeRestart <- base::invokeRestart
[13:24:00.857]                     is.null <- base::is.null
[13:24:00.857]                     muffled <- FALSE
[13:24:00.857]                     if (inherits(cond, "message")) {
[13:24:00.857]                       muffled <- grepl(pattern, "muffleMessage")
[13:24:00.857]                       if (muffled) 
[13:24:00.857]                         invokeRestart("muffleMessage")
[13:24:00.857]                     }
[13:24:00.857]                     else if (inherits(cond, "warning")) {
[13:24:00.857]                       muffled <- grepl(pattern, "muffleWarning")
[13:24:00.857]                       if (muffled) 
[13:24:00.857]                         invokeRestart("muffleWarning")
[13:24:00.857]                     }
[13:24:00.857]                     else if (inherits(cond, "condition")) {
[13:24:00.857]                       if (!is.null(pattern)) {
[13:24:00.857]                         computeRestarts <- base::computeRestarts
[13:24:00.857]                         grepl <- base::grepl
[13:24:00.857]                         restarts <- computeRestarts(cond)
[13:24:00.857]                         for (restart in restarts) {
[13:24:00.857]                           name <- restart$name
[13:24:00.857]                           if (is.null(name)) 
[13:24:00.857]                             next
[13:24:00.857]                           if (!grepl(pattern, name)) 
[13:24:00.857]                             next
[13:24:00.857]                           invokeRestart(restart)
[13:24:00.857]                           muffled <- TRUE
[13:24:00.857]                           break
[13:24:00.857]                         }
[13:24:00.857]                       }
[13:24:00.857]                     }
[13:24:00.857]                     invisible(muffled)
[13:24:00.857]                   }
[13:24:00.857]                   muffleCondition(cond)
[13:24:00.857]                 })
[13:24:00.857]             }))
[13:24:00.857]             future::FutureResult(value = ...future.value$value, 
[13:24:00.857]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:24:00.857]                   ...future.rng), globalenv = if (FALSE) 
[13:24:00.857]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:24:00.857]                     ...future.globalenv.names))
[13:24:00.857]                 else NULL, started = ...future.startTime, version = "1.8")
[13:24:00.857]         }, condition = base::local({
[13:24:00.857]             c <- base::c
[13:24:00.857]             inherits <- base::inherits
[13:24:00.857]             invokeRestart <- base::invokeRestart
[13:24:00.857]             length <- base::length
[13:24:00.857]             list <- base::list
[13:24:00.857]             seq.int <- base::seq.int
[13:24:00.857]             signalCondition <- base::signalCondition
[13:24:00.857]             sys.calls <- base::sys.calls
[13:24:00.857]             `[[` <- base::`[[`
[13:24:00.857]             `+` <- base::`+`
[13:24:00.857]             `<<-` <- base::`<<-`
[13:24:00.857]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:24:00.857]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:24:00.857]                   3L)]
[13:24:00.857]             }
[13:24:00.857]             function(cond) {
[13:24:00.857]                 is_error <- inherits(cond, "error")
[13:24:00.857]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:24:00.857]                   NULL)
[13:24:00.857]                 if (is_error) {
[13:24:00.857]                   sessionInformation <- function() {
[13:24:00.857]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:24:00.857]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:24:00.857]                       search = base::search(), system = base::Sys.info())
[13:24:00.857]                   }
[13:24:00.857]                   ...future.conditions[[length(...future.conditions) + 
[13:24:00.857]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:24:00.857]                     cond$call), session = sessionInformation(), 
[13:24:00.857]                     timestamp = base::Sys.time(), signaled = 0L)
[13:24:00.857]                   signalCondition(cond)
[13:24:00.857]                 }
[13:24:00.857]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:24:00.857]                 "immediateCondition"))) {
[13:24:00.857]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:24:00.857]                   ...future.conditions[[length(...future.conditions) + 
[13:24:00.857]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:24:00.857]                   if (TRUE && !signal) {
[13:24:00.857]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:24:00.857]                     {
[13:24:00.857]                       inherits <- base::inherits
[13:24:00.857]                       invokeRestart <- base::invokeRestart
[13:24:00.857]                       is.null <- base::is.null
[13:24:00.857]                       muffled <- FALSE
[13:24:00.857]                       if (inherits(cond, "message")) {
[13:24:00.857]                         muffled <- grepl(pattern, "muffleMessage")
[13:24:00.857]                         if (muffled) 
[13:24:00.857]                           invokeRestart("muffleMessage")
[13:24:00.857]                       }
[13:24:00.857]                       else if (inherits(cond, "warning")) {
[13:24:00.857]                         muffled <- grepl(pattern, "muffleWarning")
[13:24:00.857]                         if (muffled) 
[13:24:00.857]                           invokeRestart("muffleWarning")
[13:24:00.857]                       }
[13:24:00.857]                       else if (inherits(cond, "condition")) {
[13:24:00.857]                         if (!is.null(pattern)) {
[13:24:00.857]                           computeRestarts <- base::computeRestarts
[13:24:00.857]                           grepl <- base::grepl
[13:24:00.857]                           restarts <- computeRestarts(cond)
[13:24:00.857]                           for (restart in restarts) {
[13:24:00.857]                             name <- restart$name
[13:24:00.857]                             if (is.null(name)) 
[13:24:00.857]                               next
[13:24:00.857]                             if (!grepl(pattern, name)) 
[13:24:00.857]                               next
[13:24:00.857]                             invokeRestart(restart)
[13:24:00.857]                             muffled <- TRUE
[13:24:00.857]                             break
[13:24:00.857]                           }
[13:24:00.857]                         }
[13:24:00.857]                       }
[13:24:00.857]                       invisible(muffled)
[13:24:00.857]                     }
[13:24:00.857]                     muffleCondition(cond, pattern = "^muffle")
[13:24:00.857]                   }
[13:24:00.857]                 }
[13:24:00.857]                 else {
[13:24:00.857]                   if (TRUE) {
[13:24:00.857]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:24:00.857]                     {
[13:24:00.857]                       inherits <- base::inherits
[13:24:00.857]                       invokeRestart <- base::invokeRestart
[13:24:00.857]                       is.null <- base::is.null
[13:24:00.857]                       muffled <- FALSE
[13:24:00.857]                       if (inherits(cond, "message")) {
[13:24:00.857]                         muffled <- grepl(pattern, "muffleMessage")
[13:24:00.857]                         if (muffled) 
[13:24:00.857]                           invokeRestart("muffleMessage")
[13:24:00.857]                       }
[13:24:00.857]                       else if (inherits(cond, "warning")) {
[13:24:00.857]                         muffled <- grepl(pattern, "muffleWarning")
[13:24:00.857]                         if (muffled) 
[13:24:00.857]                           invokeRestart("muffleWarning")
[13:24:00.857]                       }
[13:24:00.857]                       else if (inherits(cond, "condition")) {
[13:24:00.857]                         if (!is.null(pattern)) {
[13:24:00.857]                           computeRestarts <- base::computeRestarts
[13:24:00.857]                           grepl <- base::grepl
[13:24:00.857]                           restarts <- computeRestarts(cond)
[13:24:00.857]                           for (restart in restarts) {
[13:24:00.857]                             name <- restart$name
[13:24:00.857]                             if (is.null(name)) 
[13:24:00.857]                               next
[13:24:00.857]                             if (!grepl(pattern, name)) 
[13:24:00.857]                               next
[13:24:00.857]                             invokeRestart(restart)
[13:24:00.857]                             muffled <- TRUE
[13:24:00.857]                             break
[13:24:00.857]                           }
[13:24:00.857]                         }
[13:24:00.857]                       }
[13:24:00.857]                       invisible(muffled)
[13:24:00.857]                     }
[13:24:00.857]                     muffleCondition(cond, pattern = "^muffle")
[13:24:00.857]                   }
[13:24:00.857]                 }
[13:24:00.857]             }
[13:24:00.857]         }))
[13:24:00.857]     }, error = function(ex) {
[13:24:00.857]         base::structure(base::list(value = NULL, visible = NULL, 
[13:24:00.857]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:24:00.857]                 ...future.rng), started = ...future.startTime, 
[13:24:00.857]             finished = Sys.time(), session_uuid = NA_character_, 
[13:24:00.857]             version = "1.8"), class = "FutureResult")
[13:24:00.857]     }, finally = {
[13:24:00.857]         if (!identical(...future.workdir, getwd())) 
[13:24:00.857]             setwd(...future.workdir)
[13:24:00.857]         {
[13:24:00.857]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:24:00.857]                 ...future.oldOptions$nwarnings <- NULL
[13:24:00.857]             }
[13:24:00.857]             base::options(...future.oldOptions)
[13:24:00.857]             if (.Platform$OS.type == "windows") {
[13:24:00.857]                 old_names <- names(...future.oldEnvVars)
[13:24:00.857]                 envs <- base::Sys.getenv()
[13:24:00.857]                 names <- names(envs)
[13:24:00.857]                 common <- intersect(names, old_names)
[13:24:00.857]                 added <- setdiff(names, old_names)
[13:24:00.857]                 removed <- setdiff(old_names, names)
[13:24:00.857]                 changed <- common[...future.oldEnvVars[common] != 
[13:24:00.857]                   envs[common]]
[13:24:00.857]                 NAMES <- toupper(changed)
[13:24:00.857]                 args <- list()
[13:24:00.857]                 for (kk in seq_along(NAMES)) {
[13:24:00.857]                   name <- changed[[kk]]
[13:24:00.857]                   NAME <- NAMES[[kk]]
[13:24:00.857]                   if (name != NAME && is.element(NAME, old_names)) 
[13:24:00.857]                     next
[13:24:00.857]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:24:00.857]                 }
[13:24:00.857]                 NAMES <- toupper(added)
[13:24:00.857]                 for (kk in seq_along(NAMES)) {
[13:24:00.857]                   name <- added[[kk]]
[13:24:00.857]                   NAME <- NAMES[[kk]]
[13:24:00.857]                   if (name != NAME && is.element(NAME, old_names)) 
[13:24:00.857]                     next
[13:24:00.857]                   args[[name]] <- ""
[13:24:00.857]                 }
[13:24:00.857]                 NAMES <- toupper(removed)
[13:24:00.857]                 for (kk in seq_along(NAMES)) {
[13:24:00.857]                   name <- removed[[kk]]
[13:24:00.857]                   NAME <- NAMES[[kk]]
[13:24:00.857]                   if (name != NAME && is.element(NAME, old_names)) 
[13:24:00.857]                     next
[13:24:00.857]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:24:00.857]                 }
[13:24:00.857]                 if (length(args) > 0) 
[13:24:00.857]                   base::do.call(base::Sys.setenv, args = args)
[13:24:00.857]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:24:00.857]             }
[13:24:00.857]             else {
[13:24:00.857]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:24:00.857]             }
[13:24:00.857]             {
[13:24:00.857]                 if (base::length(...future.futureOptionsAdded) > 
[13:24:00.857]                   0L) {
[13:24:00.857]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:24:00.857]                   base::names(opts) <- ...future.futureOptionsAdded
[13:24:00.857]                   base::options(opts)
[13:24:00.857]                 }
[13:24:00.857]                 {
[13:24:00.857]                   {
[13:24:00.857]                     base::options(mc.cores = ...future.mc.cores.old)
[13:24:00.857]                     NULL
[13:24:00.857]                   }
[13:24:00.857]                   options(future.plan = NULL)
[13:24:00.857]                   if (is.na(NA_character_)) 
[13:24:00.857]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:24:00.857]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:24:00.857]                   future::plan(list(a = function (..., workers = availableCores(), 
[13:24:00.857]                     lazy = FALSE, rscript_libs = .libPaths(), 
[13:24:00.857]                     envir = parent.frame()) 
[13:24:00.857]                   {
[13:24:00.857]                     if (is.function(workers)) 
[13:24:00.857]                       workers <- workers()
[13:24:00.857]                     workers <- structure(as.integer(workers), 
[13:24:00.857]                       class = class(workers))
[13:24:00.857]                     stop_if_not(length(workers) == 1, is.finite(workers), 
[13:24:00.857]                       workers >= 1)
[13:24:00.857]                     if (workers == 1L && !inherits(workers, "AsIs")) {
[13:24:00.857]                       return(sequential(..., lazy = TRUE, envir = envir))
[13:24:00.857]                     }
[13:24:00.857]                     future <- MultisessionFuture(..., workers = workers, 
[13:24:00.857]                       lazy = lazy, rscript_libs = rscript_libs, 
[13:24:00.857]                       envir = envir)
[13:24:00.857]                     if (!future$lazy) 
[13:24:00.857]                       future <- run(future)
[13:24:00.857]                     invisible(future)
[13:24:00.857]                   }, b = function (..., workers = availableCores(constraints = "multicore"), 
[13:24:00.857]                     envir = parent.frame()) 
[13:24:00.857]                   {
[13:24:00.857]                     default_workers <- missing(workers)
[13:24:00.857]                     if (is.function(workers)) 
[13:24:00.857]                       workers <- workers()
[13:24:00.857]                     workers <- structure(as.integer(workers), 
[13:24:00.857]                       class = class(workers))
[13:24:00.857]                     stop_if_not(is.finite(workers), workers >= 
[13:24:00.857]                       1L)
[13:24:00.857]                     if ((workers == 1L && !inherits(workers, 
[13:24:00.857]                       "AsIs")) || !supportsMulticore(warn = TRUE)) {
[13:24:00.857]                       if (default_workers) 
[13:24:00.857]                         supportsMulticore(warn = TRUE)
[13:24:00.857]                       return(sequential(..., envir = envir))
[13:24:00.857]                     }
[13:24:00.857]                     oopts <- options(mc.cores = workers)
[13:24:00.857]                     on.exit(options(oopts))
[13:24:00.857]                     future <- MulticoreFuture(..., workers = workers, 
[13:24:00.857]                       envir = envir)
[13:24:00.857]                     if (!future$lazy) 
[13:24:00.857]                       future <- run(future)
[13:24:00.857]                     invisible(future)
[13:24:00.857]                   }), .cleanup = FALSE, .init = FALSE)
[13:24:00.857]                 }
[13:24:00.857]             }
[13:24:00.857]         }
[13:24:00.857]     })
[13:24:00.857]     if (TRUE) {
[13:24:00.857]         base::sink(type = "output", split = FALSE)
[13:24:00.857]         if (TRUE) {
[13:24:00.857]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:24:00.857]         }
[13:24:00.857]         else {
[13:24:00.857]             ...future.result["stdout"] <- base::list(NULL)
[13:24:00.857]         }
[13:24:00.857]         base::close(...future.stdout)
[13:24:00.857]         ...future.stdout <- NULL
[13:24:00.857]     }
[13:24:00.857]     ...future.result$conditions <- ...future.conditions
[13:24:00.857]     ...future.result$finished <- base::Sys.time()
[13:24:00.857]     ...future.result
[13:24:00.857] }
[13:24:00.860] Exporting 2 global objects (90.70 KiB) to cluster node #1 ...
[13:24:00.860] Exporting ‘nested’ (90.58 KiB) to cluster node #1 ...
[13:24:00.904] Exporting ‘nested’ (90.58 KiB) to cluster node #1 ... DONE
[13:24:00.905] Exporting ‘strategy2’ (120 bytes) to cluster node #1 ...
[13:24:00.905] Exporting ‘strategy2’ (120 bytes) to cluster node #1 ... DONE
[13:24:00.905] Exporting 2 global objects (90.70 KiB) to cluster node #1 ... DONE
[13:24:00.906] MultisessionFuture started
[13:24:00.906] - Launch lazy future ... done
[13:24:00.906] run() for ‘MultisessionFuture’ ... done
[13:24:00.907] result() for ClusterFuture ...
[13:24:00.907] receiveMessageFromWorker() for ClusterFuture ...
[13:24:00.907] - Validating connection of MultisessionFuture
[13:24:00.984] - received message: FutureResult
[13:24:00.984] - Received FutureResult
[13:24:00.984] - Erased future from FutureRegistry
[13:24:00.984] result() for ClusterFuture ...
[13:24:00.985] - result already collected: FutureResult
[13:24:00.985] result() for ClusterFuture ... done
[13:24:00.985] receiveMessageFromWorker() for ClusterFuture ... done
[13:24:00.985] result() for ClusterFuture ... done
[13:24:00.985] result() for ClusterFuture ...
[13:24:00.985] - result already collected: FutureResult
[13:24:00.985] result() for ClusterFuture ... done
List of 6
 $ a       : int 1
 $ nested_a:List of 1
  ..$ b:function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())  
  .. ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
  .. ..- attr(*, "call")= language plan(list(a = strategy1, b = strategy2))
 $ plan_a  :List of 1
  ..$ b:function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())  
  .. ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
  .. ..- attr(*, "call")= language plan(list(a = strategy1, b = strategy2))
 $ b       : int 2
 $ nested_b: Named list()
 $ plan_b  :List of 1
  ..$ :function (..., envir = parent.frame())  
  .. ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
  ..- attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[13:24:00.991] getGlobalsAndPackages() ...
[13:24:00.991] Searching for globals...
[13:24:00.992] - globals found: [7] ‘{’, ‘value’, ‘future’, ‘subset’, ‘data’, ‘==’, ‘a’
[13:24:00.992] Searching for globals ... DONE
[13:24:00.992] Resolving globals: FALSE
[13:24:00.993] The total size of the 1 globals is 128 bytes (128 bytes)
[13:24:00.993] The total size of the 1 globals exported for future expression (‘{; value(future(subset(data, a == 2))); }’) is 128 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘data’ (128 bytes of class ‘list’)
[13:24:00.993] - globals: [1] ‘data’
[13:24:00.994] - packages: [1] ‘future’
[13:24:00.994] getGlobalsAndPackages() ... DONE
[13:24:00.994] run() for ‘Future’ ...
[13:24:00.994] - state: ‘created’
[13:24:00.994] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[13:24:01.009] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:24:01.009] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[13:24:01.009]   - Field: ‘node’
[13:24:01.009]   - Field: ‘label’
[13:24:01.009]   - Field: ‘local’
[13:24:01.009]   - Field: ‘owner’
[13:24:01.009]   - Field: ‘envir’
[13:24:01.009]   - Field: ‘workers’
[13:24:01.010]   - Field: ‘packages’
[13:24:01.010]   - Field: ‘gc’
[13:24:01.010]   - Field: ‘conditions’
[13:24:01.010]   - Field: ‘persistent’
[13:24:01.010]   - Field: ‘expr’
[13:24:01.010]   - Field: ‘uuid’
[13:24:01.010]   - Field: ‘seed’
[13:24:01.010]   - Field: ‘version’
[13:24:01.010]   - Field: ‘result’
[13:24:01.010]   - Field: ‘asynchronous’
[13:24:01.011]   - Field: ‘calls’
[13:24:01.011]   - Field: ‘globals’
[13:24:01.011]   - Field: ‘stdout’
[13:24:01.011]   - Field: ‘earlySignal’
[13:24:01.011]   - Field: ‘lazy’
[13:24:01.011]   - Field: ‘state’
[13:24:01.011] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[13:24:01.011] - Launch lazy future ...
[13:24:01.012] Packages needed by the future expression (n = 1): ‘future’
[13:24:01.012] Packages needed by future strategies (n = 1): ‘future’
[13:24:01.012] {
[13:24:01.012]     {
[13:24:01.012]         {
[13:24:01.012]             ...future.startTime <- base::Sys.time()
[13:24:01.012]             {
[13:24:01.012]                 {
[13:24:01.012]                   {
[13:24:01.012]                     {
[13:24:01.012]                       {
[13:24:01.012]                         base::local({
[13:24:01.012]                           has_future <- base::requireNamespace("future", 
[13:24:01.012]                             quietly = TRUE)
[13:24:01.012]                           if (has_future) {
[13:24:01.012]                             ns <- base::getNamespace("future")
[13:24:01.012]                             version <- ns[[".package"]][["version"]]
[13:24:01.012]                             if (is.null(version)) 
[13:24:01.012]                               version <- utils::packageVersion("future")
[13:24:01.012]                           }
[13:24:01.012]                           else {
[13:24:01.012]                             version <- NULL
[13:24:01.012]                           }
[13:24:01.012]                           if (!has_future || version < "1.8.0") {
[13:24:01.012]                             info <- base::c(r_version = base::gsub("R version ", 
[13:24:01.012]                               "", base::R.version$version.string), 
[13:24:01.012]                               platform = base::sprintf("%s (%s-bit)", 
[13:24:01.012]                                 base::R.version$platform, 8 * 
[13:24:01.012]                                   base::.Machine$sizeof.pointer), 
[13:24:01.012]                               os = base::paste(base::Sys.info()[base::c("sysname", 
[13:24:01.012]                                 "release", "version")], collapse = " "), 
[13:24:01.012]                               hostname = base::Sys.info()[["nodename"]])
[13:24:01.012]                             info <- base::sprintf("%s: %s", base::names(info), 
[13:24:01.012]                               info)
[13:24:01.012]                             info <- base::paste(info, collapse = "; ")
[13:24:01.012]                             if (!has_future) {
[13:24:01.012]                               msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:24:01.012]                                 info)
[13:24:01.012]                             }
[13:24:01.012]                             else {
[13:24:01.012]                               msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:24:01.012]                                 info, version)
[13:24:01.012]                             }
[13:24:01.012]                             base::stop(msg)
[13:24:01.012]                           }
[13:24:01.012]                         })
[13:24:01.012]                       }
[13:24:01.012]                       ...future.mc.cores.old <- base::getOption("mc.cores")
[13:24:01.012]                       base::options(mc.cores = 1L)
[13:24:01.012]                     }
[13:24:01.012]                     base::local({
[13:24:01.012]                       for (pkg in "future") {
[13:24:01.012]                         base::loadNamespace(pkg)
[13:24:01.012]                         base::library(pkg, character.only = TRUE)
[13:24:01.012]                       }
[13:24:01.012]                     })
[13:24:01.012]                   }
[13:24:01.012]                   options(future.plan = NULL)
[13:24:01.012]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:24:01.012]                   future::plan(list(b = function (..., workers = availableCores(constraints = "multicore"), 
[13:24:01.012]                     envir = parent.frame()) 
[13:24:01.012]                   {
[13:24:01.012]                     default_workers <- missing(workers)
[13:24:01.012]                     if (is.function(workers)) 
[13:24:01.012]                       workers <- workers()
[13:24:01.012]                     workers <- structure(as.integer(workers), 
[13:24:01.012]                       class = class(workers))
[13:24:01.012]                     stop_if_not(is.finite(workers), workers >= 
[13:24:01.012]                       1L)
[13:24:01.012]                     if ((workers == 1L && !inherits(workers, 
[13:24:01.012]                       "AsIs")) || !supportsMulticore(warn = TRUE)) {
[13:24:01.012]                       if (default_workers) 
[13:24:01.012]                         supportsMulticore(warn = TRUE)
[13:24:01.012]                       return(sequential(..., envir = envir))
[13:24:01.012]                     }
[13:24:01.012]                     oopts <- options(mc.cores = workers)
[13:24:01.012]                     on.exit(options(oopts))
[13:24:01.012]                     future <- MulticoreFuture(..., workers = workers, 
[13:24:01.012]                       envir = envir)
[13:24:01.012]                     if (!future$lazy) 
[13:24:01.012]                       future <- run(future)
[13:24:01.012]                     invisible(future)
[13:24:01.012]                   }), .cleanup = FALSE, .init = FALSE)
[13:24:01.012]                 }
[13:24:01.012]                 ...future.workdir <- getwd()
[13:24:01.012]             }
[13:24:01.012]             ...future.oldOptions <- base::as.list(base::.Options)
[13:24:01.012]             ...future.oldEnvVars <- base::Sys.getenv()
[13:24:01.012]         }
[13:24:01.012]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:24:01.012]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:24:01.012]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:24:01.012]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:24:01.012]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:24:01.012]             future.stdout.windows.reencode = NULL, width = 80L)
[13:24:01.012]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:24:01.012]             base::names(...future.oldOptions))
[13:24:01.012]     }
[13:24:01.012]     if (FALSE) {
[13:24:01.012]     }
[13:24:01.012]     else {
[13:24:01.012]         if (TRUE) {
[13:24:01.012]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:24:01.012]                 open = "w")
[13:24:01.012]         }
[13:24:01.012]         else {
[13:24:01.012]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:24:01.012]                 windows = "NUL", "/dev/null"), open = "w")
[13:24:01.012]         }
[13:24:01.012]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:24:01.012]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:24:01.012]             base::sink(type = "output", split = FALSE)
[13:24:01.012]             base::close(...future.stdout)
[13:24:01.012]         }, add = TRUE)
[13:24:01.012]     }
[13:24:01.012]     ...future.frame <- base::sys.nframe()
[13:24:01.012]     ...future.conditions <- base::list()
[13:24:01.012]     ...future.rng <- base::globalenv()$.Random.seed
[13:24:01.012]     if (FALSE) {
[13:24:01.012]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:24:01.012]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:24:01.012]     }
[13:24:01.012]     ...future.result <- base::tryCatch({
[13:24:01.012]         base::withCallingHandlers({
[13:24:01.012]             ...future.value <- base::withVisible(base::local({
[13:24:01.012]                 ...future.makeSendCondition <- base::local({
[13:24:01.012]                   sendCondition <- NULL
[13:24:01.012]                   function(frame = 1L) {
[13:24:01.012]                     if (is.function(sendCondition)) 
[13:24:01.012]                       return(sendCondition)
[13:24:01.012]                     ns <- getNamespace("parallel")
[13:24:01.012]                     if (exists("sendData", mode = "function", 
[13:24:01.012]                       envir = ns)) {
[13:24:01.012]                       parallel_sendData <- get("sendData", mode = "function", 
[13:24:01.012]                         envir = ns)
[13:24:01.012]                       envir <- sys.frame(frame)
[13:24:01.012]                       master <- NULL
[13:24:01.012]                       while (!identical(envir, .GlobalEnv) && 
[13:24:01.012]                         !identical(envir, emptyenv())) {
[13:24:01.012]                         if (exists("master", mode = "list", envir = envir, 
[13:24:01.012]                           inherits = FALSE)) {
[13:24:01.012]                           master <- get("master", mode = "list", 
[13:24:01.012]                             envir = envir, inherits = FALSE)
[13:24:01.012]                           if (inherits(master, c("SOCKnode", 
[13:24:01.012]                             "SOCK0node"))) {
[13:24:01.012]                             sendCondition <<- function(cond) {
[13:24:01.012]                               data <- list(type = "VALUE", value = cond, 
[13:24:01.012]                                 success = TRUE)
[13:24:01.012]                               parallel_sendData(master, data)
[13:24:01.012]                             }
[13:24:01.012]                             return(sendCondition)
[13:24:01.012]                           }
[13:24:01.012]                         }
[13:24:01.012]                         frame <- frame + 1L
[13:24:01.012]                         envir <- sys.frame(frame)
[13:24:01.012]                       }
[13:24:01.012]                     }
[13:24:01.012]                     sendCondition <<- function(cond) NULL
[13:24:01.012]                   }
[13:24:01.012]                 })
[13:24:01.012]                 withCallingHandlers({
[13:24:01.012]                   {
[13:24:01.012]                     value(future(subset(data, a == 2)))
[13:24:01.012]                   }
[13:24:01.012]                 }, immediateCondition = function(cond) {
[13:24:01.012]                   sendCondition <- ...future.makeSendCondition()
[13:24:01.012]                   sendCondition(cond)
[13:24:01.012]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:24:01.012]                   {
[13:24:01.012]                     inherits <- base::inherits
[13:24:01.012]                     invokeRestart <- base::invokeRestart
[13:24:01.012]                     is.null <- base::is.null
[13:24:01.012]                     muffled <- FALSE
[13:24:01.012]                     if (inherits(cond, "message")) {
[13:24:01.012]                       muffled <- grepl(pattern, "muffleMessage")
[13:24:01.012]                       if (muffled) 
[13:24:01.012]                         invokeRestart("muffleMessage")
[13:24:01.012]                     }
[13:24:01.012]                     else if (inherits(cond, "warning")) {
[13:24:01.012]                       muffled <- grepl(pattern, "muffleWarning")
[13:24:01.012]                       if (muffled) 
[13:24:01.012]                         invokeRestart("muffleWarning")
[13:24:01.012]                     }
[13:24:01.012]                     else if (inherits(cond, "condition")) {
[13:24:01.012]                       if (!is.null(pattern)) {
[13:24:01.012]                         computeRestarts <- base::computeRestarts
[13:24:01.012]                         grepl <- base::grepl
[13:24:01.012]                         restarts <- computeRestarts(cond)
[13:24:01.012]                         for (restart in restarts) {
[13:24:01.012]                           name <- restart$name
[13:24:01.012]                           if (is.null(name)) 
[13:24:01.012]                             next
[13:24:01.012]                           if (!grepl(pattern, name)) 
[13:24:01.012]                             next
[13:24:01.012]                           invokeRestart(restart)
[13:24:01.012]                           muffled <- TRUE
[13:24:01.012]                           break
[13:24:01.012]                         }
[13:24:01.012]                       }
[13:24:01.012]                     }
[13:24:01.012]                     invisible(muffled)
[13:24:01.012]                   }
[13:24:01.012]                   muffleCondition(cond)
[13:24:01.012]                 })
[13:24:01.012]             }))
[13:24:01.012]             future::FutureResult(value = ...future.value$value, 
[13:24:01.012]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:24:01.012]                   ...future.rng), globalenv = if (FALSE) 
[13:24:01.012]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:24:01.012]                     ...future.globalenv.names))
[13:24:01.012]                 else NULL, started = ...future.startTime, version = "1.8")
[13:24:01.012]         }, condition = base::local({
[13:24:01.012]             c <- base::c
[13:24:01.012]             inherits <- base::inherits
[13:24:01.012]             invokeRestart <- base::invokeRestart
[13:24:01.012]             length <- base::length
[13:24:01.012]             list <- base::list
[13:24:01.012]             seq.int <- base::seq.int
[13:24:01.012]             signalCondition <- base::signalCondition
[13:24:01.012]             sys.calls <- base::sys.calls
[13:24:01.012]             `[[` <- base::`[[`
[13:24:01.012]             `+` <- base::`+`
[13:24:01.012]             `<<-` <- base::`<<-`
[13:24:01.012]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:24:01.012]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:24:01.012]                   3L)]
[13:24:01.012]             }
[13:24:01.012]             function(cond) {
[13:24:01.012]                 is_error <- inherits(cond, "error")
[13:24:01.012]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:24:01.012]                   NULL)
[13:24:01.012]                 if (is_error) {
[13:24:01.012]                   sessionInformation <- function() {
[13:24:01.012]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:24:01.012]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:24:01.012]                       search = base::search(), system = base::Sys.info())
[13:24:01.012]                   }
[13:24:01.012]                   ...future.conditions[[length(...future.conditions) + 
[13:24:01.012]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:24:01.012]                     cond$call), session = sessionInformation(), 
[13:24:01.012]                     timestamp = base::Sys.time(), signaled = 0L)
[13:24:01.012]                   signalCondition(cond)
[13:24:01.012]                 }
[13:24:01.012]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:24:01.012]                 "immediateCondition"))) {
[13:24:01.012]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:24:01.012]                   ...future.conditions[[length(...future.conditions) + 
[13:24:01.012]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:24:01.012]                   if (TRUE && !signal) {
[13:24:01.012]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:24:01.012]                     {
[13:24:01.012]                       inherits <- base::inherits
[13:24:01.012]                       invokeRestart <- base::invokeRestart
[13:24:01.012]                       is.null <- base::is.null
[13:24:01.012]                       muffled <- FALSE
[13:24:01.012]                       if (inherits(cond, "message")) {
[13:24:01.012]                         muffled <- grepl(pattern, "muffleMessage")
[13:24:01.012]                         if (muffled) 
[13:24:01.012]                           invokeRestart("muffleMessage")
[13:24:01.012]                       }
[13:24:01.012]                       else if (inherits(cond, "warning")) {
[13:24:01.012]                         muffled <- grepl(pattern, "muffleWarning")
[13:24:01.012]                         if (muffled) 
[13:24:01.012]                           invokeRestart("muffleWarning")
[13:24:01.012]                       }
[13:24:01.012]                       else if (inherits(cond, "condition")) {
[13:24:01.012]                         if (!is.null(pattern)) {
[13:24:01.012]                           computeRestarts <- base::computeRestarts
[13:24:01.012]                           grepl <- base::grepl
[13:24:01.012]                           restarts <- computeRestarts(cond)
[13:24:01.012]                           for (restart in restarts) {
[13:24:01.012]                             name <- restart$name
[13:24:01.012]                             if (is.null(name)) 
[13:24:01.012]                               next
[13:24:01.012]                             if (!grepl(pattern, name)) 
[13:24:01.012]                               next
[13:24:01.012]                             invokeRestart(restart)
[13:24:01.012]                             muffled <- TRUE
[13:24:01.012]                             break
[13:24:01.012]                           }
[13:24:01.012]                         }
[13:24:01.012]                       }
[13:24:01.012]                       invisible(muffled)
[13:24:01.012]                     }
[13:24:01.012]                     muffleCondition(cond, pattern = "^muffle")
[13:24:01.012]                   }
[13:24:01.012]                 }
[13:24:01.012]                 else {
[13:24:01.012]                   if (TRUE) {
[13:24:01.012]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:24:01.012]                     {
[13:24:01.012]                       inherits <- base::inherits
[13:24:01.012]                       invokeRestart <- base::invokeRestart
[13:24:01.012]                       is.null <- base::is.null
[13:24:01.012]                       muffled <- FALSE
[13:24:01.012]                       if (inherits(cond, "message")) {
[13:24:01.012]                         muffled <- grepl(pattern, "muffleMessage")
[13:24:01.012]                         if (muffled) 
[13:24:01.012]                           invokeRestart("muffleMessage")
[13:24:01.012]                       }
[13:24:01.012]                       else if (inherits(cond, "warning")) {
[13:24:01.012]                         muffled <- grepl(pattern, "muffleWarning")
[13:24:01.012]                         if (muffled) 
[13:24:01.012]                           invokeRestart("muffleWarning")
[13:24:01.012]                       }
[13:24:01.012]                       else if (inherits(cond, "condition")) {
[13:24:01.012]                         if (!is.null(pattern)) {
[13:24:01.012]                           computeRestarts <- base::computeRestarts
[13:24:01.012]                           grepl <- base::grepl
[13:24:01.012]                           restarts <- computeRestarts(cond)
[13:24:01.012]                           for (restart in restarts) {
[13:24:01.012]                             name <- restart$name
[13:24:01.012]                             if (is.null(name)) 
[13:24:01.012]                               next
[13:24:01.012]                             if (!grepl(pattern, name)) 
[13:24:01.012]                               next
[13:24:01.012]                             invokeRestart(restart)
[13:24:01.012]                             muffled <- TRUE
[13:24:01.012]                             break
[13:24:01.012]                           }
[13:24:01.012]                         }
[13:24:01.012]                       }
[13:24:01.012]                       invisible(muffled)
[13:24:01.012]                     }
[13:24:01.012]                     muffleCondition(cond, pattern = "^muffle")
[13:24:01.012]                   }
[13:24:01.012]                 }
[13:24:01.012]             }
[13:24:01.012]         }))
[13:24:01.012]     }, error = function(ex) {
[13:24:01.012]         base::structure(base::list(value = NULL, visible = NULL, 
[13:24:01.012]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:24:01.012]                 ...future.rng), started = ...future.startTime, 
[13:24:01.012]             finished = Sys.time(), session_uuid = NA_character_, 
[13:24:01.012]             version = "1.8"), class = "FutureResult")
[13:24:01.012]     }, finally = {
[13:24:01.012]         if (!identical(...future.workdir, getwd())) 
[13:24:01.012]             setwd(...future.workdir)
[13:24:01.012]         {
[13:24:01.012]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:24:01.012]                 ...future.oldOptions$nwarnings <- NULL
[13:24:01.012]             }
[13:24:01.012]             base::options(...future.oldOptions)
[13:24:01.012]             if (.Platform$OS.type == "windows") {
[13:24:01.012]                 old_names <- names(...future.oldEnvVars)
[13:24:01.012]                 envs <- base::Sys.getenv()
[13:24:01.012]                 names <- names(envs)
[13:24:01.012]                 common <- intersect(names, old_names)
[13:24:01.012]                 added <- setdiff(names, old_names)
[13:24:01.012]                 removed <- setdiff(old_names, names)
[13:24:01.012]                 changed <- common[...future.oldEnvVars[common] != 
[13:24:01.012]                   envs[common]]
[13:24:01.012]                 NAMES <- toupper(changed)
[13:24:01.012]                 args <- list()
[13:24:01.012]                 for (kk in seq_along(NAMES)) {
[13:24:01.012]                   name <- changed[[kk]]
[13:24:01.012]                   NAME <- NAMES[[kk]]
[13:24:01.012]                   if (name != NAME && is.element(NAME, old_names)) 
[13:24:01.012]                     next
[13:24:01.012]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:24:01.012]                 }
[13:24:01.012]                 NAMES <- toupper(added)
[13:24:01.012]                 for (kk in seq_along(NAMES)) {
[13:24:01.012]                   name <- added[[kk]]
[13:24:01.012]                   NAME <- NAMES[[kk]]
[13:24:01.012]                   if (name != NAME && is.element(NAME, old_names)) 
[13:24:01.012]                     next
[13:24:01.012]                   args[[name]] <- ""
[13:24:01.012]                 }
[13:24:01.012]                 NAMES <- toupper(removed)
[13:24:01.012]                 for (kk in seq_along(NAMES)) {
[13:24:01.012]                   name <- removed[[kk]]
[13:24:01.012]                   NAME <- NAMES[[kk]]
[13:24:01.012]                   if (name != NAME && is.element(NAME, old_names)) 
[13:24:01.012]                     next
[13:24:01.012]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:24:01.012]                 }
[13:24:01.012]                 if (length(args) > 0) 
[13:24:01.012]                   base::do.call(base::Sys.setenv, args = args)
[13:24:01.012]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:24:01.012]             }
[13:24:01.012]             else {
[13:24:01.012]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:24:01.012]             }
[13:24:01.012]             {
[13:24:01.012]                 if (base::length(...future.futureOptionsAdded) > 
[13:24:01.012]                   0L) {
[13:24:01.012]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:24:01.012]                   base::names(opts) <- ...future.futureOptionsAdded
[13:24:01.012]                   base::options(opts)
[13:24:01.012]                 }
[13:24:01.012]                 {
[13:24:01.012]                   {
[13:24:01.012]                     base::options(mc.cores = ...future.mc.cores.old)
[13:24:01.012]                     NULL
[13:24:01.012]                   }
[13:24:01.012]                   options(future.plan = NULL)
[13:24:01.012]                   if (is.na(NA_character_)) 
[13:24:01.012]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:24:01.012]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:24:01.012]                   future::plan(list(a = function (..., workers = availableCores(), 
[13:24:01.012]                     lazy = FALSE, rscript_libs = .libPaths(), 
[13:24:01.012]                     envir = parent.frame()) 
[13:24:01.012]                   {
[13:24:01.012]                     if (is.function(workers)) 
[13:24:01.012]                       workers <- workers()
[13:24:01.012]                     workers <- structure(as.integer(workers), 
[13:24:01.012]                       class = class(workers))
[13:24:01.012]                     stop_if_not(length(workers) == 1, is.finite(workers), 
[13:24:01.012]                       workers >= 1)
[13:24:01.012]                     if (workers == 1L && !inherits(workers, "AsIs")) {
[13:24:01.012]                       return(sequential(..., lazy = TRUE, envir = envir))
[13:24:01.012]                     }
[13:24:01.012]                     future <- MultisessionFuture(..., workers = workers, 
[13:24:01.012]                       lazy = lazy, rscript_libs = rscript_libs, 
[13:24:01.012]                       envir = envir)
[13:24:01.012]                     if (!future$lazy) 
[13:24:01.012]                       future <- run(future)
[13:24:01.012]                     invisible(future)
[13:24:01.012]                   }, b = function (..., workers = availableCores(constraints = "multicore"), 
[13:24:01.012]                     envir = parent.frame()) 
[13:24:01.012]                   {
[13:24:01.012]                     default_workers <- missing(workers)
[13:24:01.012]                     if (is.function(workers)) 
[13:24:01.012]                       workers <- workers()
[13:24:01.012]                     workers <- structure(as.integer(workers), 
[13:24:01.012]                       class = class(workers))
[13:24:01.012]                     stop_if_not(is.finite(workers), workers >= 
[13:24:01.012]                       1L)
[13:24:01.012]                     if ((workers == 1L && !inherits(workers, 
[13:24:01.012]                       "AsIs")) || !supportsMulticore(warn = TRUE)) {
[13:24:01.012]                       if (default_workers) 
[13:24:01.012]                         supportsMulticore(warn = TRUE)
[13:24:01.012]                       return(sequential(..., envir = envir))
[13:24:01.012]                     }
[13:24:01.012]                     oopts <- options(mc.cores = workers)
[13:24:01.012]                     on.exit(options(oopts))
[13:24:01.012]                     future <- MulticoreFuture(..., workers = workers, 
[13:24:01.012]                       envir = envir)
[13:24:01.012]                     if (!future$lazy) 
[13:24:01.012]                       future <- run(future)
[13:24:01.012]                     invisible(future)
[13:24:01.012]                   }), .cleanup = FALSE, .init = FALSE)
[13:24:01.012]                 }
[13:24:01.012]             }
[13:24:01.012]         }
[13:24:01.012]     })
[13:24:01.012]     if (TRUE) {
[13:24:01.012]         base::sink(type = "output", split = FALSE)
[13:24:01.012]         if (TRUE) {
[13:24:01.012]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:24:01.012]         }
[13:24:01.012]         else {
[13:24:01.012]             ...future.result["stdout"] <- base::list(NULL)
[13:24:01.012]         }
[13:24:01.012]         base::close(...future.stdout)
[13:24:01.012]         ...future.stdout <- NULL
[13:24:01.012]     }
[13:24:01.012]     ...future.result$conditions <- ...future.conditions
[13:24:01.012]     ...future.result$finished <- base::Sys.time()
[13:24:01.012]     ...future.result
[13:24:01.012] }
[13:24:01.015] Exporting 1 global objects (128 bytes) to cluster node #1 ...
[13:24:01.016] Exporting ‘data’ (128 bytes) to cluster node #1 ...
[13:24:01.016] Exporting ‘data’ (128 bytes) to cluster node #1 ... DONE
[13:24:01.016] Exporting 1 global objects (128 bytes) to cluster node #1 ... DONE
[13:24:01.017] MultisessionFuture started
[13:24:01.017] - Launch lazy future ... done
[13:24:01.017] run() for ‘MultisessionFuture’ ... done
[13:24:01.017] result() for ClusterFuture ...
[13:24:01.017] receiveMessageFromWorker() for ClusterFuture ...
[13:24:01.017] - Validating connection of MultisessionFuture
[13:24:01.082] - received message: FutureResult
[13:24:01.082] - Received FutureResult
[13:24:01.082] - Erased future from FutureRegistry
[13:24:01.082] result() for ClusterFuture ...
[13:24:01.082] - result already collected: FutureResult
[13:24:01.083] result() for ClusterFuture ... done
[13:24:01.083] receiveMessageFromWorker() for ClusterFuture ... done
[13:24:01.083] result() for ClusterFuture ... done
[13:24:01.083] result() for ClusterFuture ...
[13:24:01.083] - result already collected: FutureResult
[13:24:01.083] result() for ClusterFuture ... done
- plan(list('multisession', 'multicore')) ... DONE
- plan(list('multisession', 'multisession')) ...
[13:24:01.083] plan(): Setting new future strategy stack:
[13:24:01.083] List of future strategies:
[13:24:01.083] 1. multisession:
[13:24:01.083]    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[13:24:01.083]    - tweaked: FALSE
[13:24:01.083]    - call: plan(list(a = strategy1, b = strategy2))
[13:24:01.083] 2. multisession:
[13:24:01.083]    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[13:24:01.083]    - tweaked: FALSE
[13:24:01.083]    - call: plan(list(a = strategy1, b = strategy2))
[13:24:01.084] plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ...
[13:24:01.084] multisession:
[13:24:01.084] - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[13:24:01.084] - tweaked: FALSE
[13:24:01.084] - call: plan(list(a = strategy1, b = strategy2))
[13:24:01.089] getGlobalsAndPackages() ...
[13:24:01.089] Not searching for globals
[13:24:01.089] - globals: [0] <none>
[13:24:01.089] getGlobalsAndPackages() ... DONE
[13:24:01.089] [local output] makeClusterPSOCK() ...
[13:24:01.093] [local output] Workers: [n = 2] ‘localhost’, ‘localhost’
[13:24:01.094] [local output] Base port: 11247
[13:24:01.094] [local output] Getting setup options for 2 cluster nodes ...
[13:24:01.094] [local output]  - Node 1 of 2 ...
[13:24:01.094] [local output] localMachine=TRUE => revtunnel=FALSE

[13:24:01.095] [local output] Rscript port: 11247

[13:24:01.095] [local output]  - Node 2 of 2 ...
[13:24:01.096] [local output] localMachine=TRUE => revtunnel=FALSE

[13:24:01.096] [local output] Rscript port: 11247

[13:24:01.097] [local output] Getting setup options for 2 cluster nodes ... done
[13:24:01.097] [local output]  - Parallel setup requested for some PSOCK nodes
[13:24:01.097] [local output] Setting up PSOCK nodes in parallel
[13:24:01.097] List of 36
[13:24:01.097]  $ worker          : chr "localhost"
[13:24:01.097]   ..- attr(*, "localhost")= logi TRUE
[13:24:01.097]  $ master          : chr "localhost"
[13:24:01.097]  $ port            : int 11247
[13:24:01.097]  $ connectTimeout  : num 120
[13:24:01.097]  $ timeout         : num 2592000
[13:24:01.097]  $ rscript         : chr "'/usr/local/lib/R/bin/Rscript'"
[13:24:01.097]  $ homogeneous     : logi TRUE
[13:24:01.097]  $ rscript_args    : chr "--default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),fi"| __truncated__
[13:24:01.097]  $ rscript_envs    : NULL
[13:24:01.097]  $ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[13:24:01.097]  $ rscript_startup : NULL
[13:24:01.097]  $ rscript_sh      : chr "sh"
[13:24:01.097]  $ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[13:24:01.097]  $ methods         : logi TRUE
[13:24:01.097]  $ socketOptions   : chr "no-delay"
[13:24:01.097]  $ useXDR          : logi FALSE
[13:24:01.097]  $ outfile         : chr "/dev/null"
[13:24:01.097]  $ renice          : int NA
[13:24:01.097]  $ rshcmd          : NULL
[13:24:01.097]  $ user            : chr(0) 
[13:24:01.097]  $ revtunnel       : logi FALSE
[13:24:01.097]  $ rshlogfile      : NULL
[13:24:01.097]  $ rshopts         : chr(0) 
[13:24:01.097]  $ rank            : int 1
[13:24:01.097]  $ manual          : logi FALSE
[13:24:01.097]  $ dryrun          : logi FALSE
[13:24:01.097]  $ quiet           : logi FALSE
[13:24:01.097]  $ setup_strategy  : chr "parallel"
[13:24:01.097]  $ local_cmd       : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[13:24:01.097]  $ pidfile         : chr "/tmp/RtmpKOlrlL/worker.rank=1.parallelly.parent=90070.15fd6342188ec.pid"
[13:24:01.097]  $ rshcmd_label    : NULL
[13:24:01.097]  $ rsh_call        : NULL
[13:24:01.097]  $ cmd             : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[13:24:01.097]  $ localMachine    : logi TRUE
[13:24:01.097]  $ make_fcn        :function (worker = getOption2("parallelly.localhost.hostname", "localhost"), 
[13:24:01.097]     master = NULL, port, connectTimeout = getOption2("parallelly.makeNodePSOCK.connectTimeout", 
[13:24:01.097]         2 * 60), timeout = getOption2("parallelly.makeNodePSOCK.timeout", 
[13:24:01.097]         30 * 24 * 60 * 60), rscript = NULL, homogeneous = NULL, rscript_args = NULL, 
[13:24:01.097]     rscript_envs = NULL, rscript_libs = NULL, rscript_startup = NULL, rscript_sh = c("auto", 
[13:24:01.097]         "cmd", "sh"), default_packages = c("datasets", "utils", "grDevices", 
[13:24:01.097]         "graphics", "stats", if (methods) "methods"), methods = TRUE, socketOptions = getOption2("parallelly.makeNodePSOCK.socketOptions", 
[13:24:01.097]         "no-delay"), useXDR = getOption2("parallelly.makeNodePSOCK.useXDR", 
[13:24:01.097]         FALSE), outfile = "/dev/null", renice = NA_integer_, rshcmd = getOption2("parallelly.makeNodePSOCK.rshcmd", 
[13:24:01.097]         NULL), user = NULL, revtunnel = NA, rshlogfile = NULL, rshopts = getOption2("parallelly.makeNodePSOCK.rshopts", 
[13:24:01.097]         NULL), rank = 1L, manual = FALSE, dryrun = FALSE, quiet = FALSE, 
[13:24:01.097]     setup_strategy = getOption2("parallelly.makeNodePSOCK.setup_strategy", 
[13:24:01.097]         "parallel"), action = c("launch", "options"), verbose = FALSE)  
[13:24:01.097]  $ arguments       :List of 28
[13:24:01.097]   ..$ worker          : chr "localhost"
[13:24:01.097]   ..$ master          : NULL
[13:24:01.097]   ..$ port            : int 11247
[13:24:01.097]   ..$ connectTimeout  : num 120
[13:24:01.097]   ..$ timeout         : num 2592000
[13:24:01.097]   ..$ rscript         : NULL
[13:24:01.097]   ..$ homogeneous     : NULL
[13:24:01.097]   ..$ rscript_args    : NULL
[13:24:01.097]   ..$ rscript_envs    : NULL
[13:24:01.097]   ..$ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[13:24:01.097]   ..$ rscript_startup : NULL
[13:24:01.097]   ..$ rscript_sh      : chr [1:3] "auto" "cmd" "sh"
[13:24:01.097]   ..$ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[13:24:01.097]   ..$ methods         : logi TRUE
[13:24:01.097]   ..$ socketOptions   : chr "no-delay"
[13:24:01.097]   ..$ useXDR          : logi FALSE
[13:24:01.097]   ..$ outfile         : chr "/dev/null"
[13:24:01.097]   ..$ renice          : int NA
[13:24:01.097]   ..$ rshcmd          : NULL
[13:24:01.097]   ..$ user            : NULL
[13:24:01.097]   ..$ revtunnel       : logi NA
[13:24:01.097]   ..$ rshlogfile      : NULL
[13:24:01.097]   ..$ rshopts         : NULL
[13:24:01.097]   ..$ rank            : int 1
[13:24:01.097]   ..$ manual          : logi FALSE
[13:24:01.097]   ..$ dryrun          : logi FALSE
[13:24:01.097]   ..$ quiet           : logi FALSE
[13:24:01.097]   ..$ setup_strategy  : chr "parallel"
[13:24:01.097]  - attr(*, "class")= chr [1:2] "makeNodePSOCKOptions" "makeNodeOptions"
[13:24:01.119] [local output] System call to launch all workers:
[13:24:01.119] [local output] '/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/RtmpKOlrlL/worker.rank=1.parallelly.parent=90070.15fd6342188ec.pid")), silent = TRUE)' -e 'options(socketOptions = "no-delay")' -e '.libPaths(c("/usr/local/lib/R/site-library","/usr/local/lib/R/library"))' -e 'workRSOCK <- tryCatch(parallel:::.workRSOCK, error=function(e) parallel:::.slaveRSOCK); workRSOCK()' MASTER=localhost PORT=11247 OUT=/dev/null TIMEOUT=2592000 XDR=FALSE SETUPTIMEOUT=120 SETUPSTRATEGY=parallel
[13:24:01.119] [local output] Starting PSOCK main server
[13:24:01.121] [local output] Workers launched
[13:24:01.121] [local output] Waiting for workers to connect back
[13:24:01.121]  - [local output] 0 workers out of 2 ready
[13:24:01.373]  - [local output] 0 workers out of 2 ready
[13:24:01.373]  - [local output] 1 workers out of 2 ready
[13:24:01.373]  - [local output] 2 workers out of 2 ready
[13:24:01.374] [local output] Launching of workers completed
[13:24:01.374] [local output] Collecting session information from workers
[13:24:01.374] [local output]  - Worker #1 of 2
[13:24:01.375] [local output]  - Worker #2 of 2
[13:24:01.375] [local output] makeClusterPSOCK() ... done
[13:24:01.385] Packages needed by the future expression (n = 0): <none>
[13:24:01.386] Packages needed by future strategies (n = 1): ‘future’
[13:24:01.386] {
[13:24:01.386]     {
[13:24:01.386]         {
[13:24:01.386]             ...future.startTime <- base::Sys.time()
[13:24:01.386]             {
[13:24:01.386]                 {
[13:24:01.386]                   {
[13:24:01.386]                     {
[13:24:01.386]                       {
[13:24:01.386]                         base::local({
[13:24:01.386]                           has_future <- base::requireNamespace("future", 
[13:24:01.386]                             quietly = TRUE)
[13:24:01.386]                           if (has_future) {
[13:24:01.386]                             ns <- base::getNamespace("future")
[13:24:01.386]                             version <- ns[[".package"]][["version"]]
[13:24:01.386]                             if (is.null(version)) 
[13:24:01.386]                               version <- utils::packageVersion("future")
[13:24:01.386]                           }
[13:24:01.386]                           else {
[13:24:01.386]                             version <- NULL
[13:24:01.386]                           }
[13:24:01.386]                           if (!has_future || version < "1.8.0") {
[13:24:01.386]                             info <- base::c(r_version = base::gsub("R version ", 
[13:24:01.386]                               "", base::R.version$version.string), 
[13:24:01.386]                               platform = base::sprintf("%s (%s-bit)", 
[13:24:01.386]                                 base::R.version$platform, 8 * 
[13:24:01.386]                                   base::.Machine$sizeof.pointer), 
[13:24:01.386]                               os = base::paste(base::Sys.info()[base::c("sysname", 
[13:24:01.386]                                 "release", "version")], collapse = " "), 
[13:24:01.386]                               hostname = base::Sys.info()[["nodename"]])
[13:24:01.386]                             info <- base::sprintf("%s: %s", base::names(info), 
[13:24:01.386]                               info)
[13:24:01.386]                             info <- base::paste(info, collapse = "; ")
[13:24:01.386]                             if (!has_future) {
[13:24:01.386]                               msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:24:01.386]                                 info)
[13:24:01.386]                             }
[13:24:01.386]                             else {
[13:24:01.386]                               msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:24:01.386]                                 info, version)
[13:24:01.386]                             }
[13:24:01.386]                             base::stop(msg)
[13:24:01.386]                           }
[13:24:01.386]                         })
[13:24:01.386]                       }
[13:24:01.386]                       ...future.mc.cores.old <- base::getOption("mc.cores")
[13:24:01.386]                       base::options(mc.cores = 1L)
[13:24:01.386]                     }
[13:24:01.386]                     base::local({
[13:24:01.386]                       for (pkg in "future") {
[13:24:01.386]                         base::loadNamespace(pkg)
[13:24:01.386]                         base::library(pkg, character.only = TRUE)
[13:24:01.386]                       }
[13:24:01.386]                     })
[13:24:01.386]                   }
[13:24:01.386]                   options(future.plan = NULL)
[13:24:01.386]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:24:01.386]                   future::plan(list(b = function (..., workers = availableCores(), 
[13:24:01.386]                     lazy = FALSE, rscript_libs = .libPaths(), 
[13:24:01.386]                     envir = parent.frame()) 
[13:24:01.386]                   {
[13:24:01.386]                     if (is.function(workers)) 
[13:24:01.386]                       workers <- workers()
[13:24:01.386]                     workers <- structure(as.integer(workers), 
[13:24:01.386]                       class = class(workers))
[13:24:01.386]                     stop_if_not(length(workers) == 1, is.finite(workers), 
[13:24:01.386]                       workers >= 1)
[13:24:01.386]                     if (workers == 1L && !inherits(workers, "AsIs")) {
[13:24:01.386]                       return(sequential(..., lazy = TRUE, envir = envir))
[13:24:01.386]                     }
[13:24:01.386]                     future <- MultisessionFuture(..., workers = workers, 
[13:24:01.386]                       lazy = lazy, rscript_libs = rscript_libs, 
[13:24:01.386]                       envir = envir)
[13:24:01.386]                     if (!future$lazy) 
[13:24:01.386]                       future <- run(future)
[13:24:01.386]                     invisible(future)
[13:24:01.386]                   }), .cleanup = FALSE, .init = FALSE)
[13:24:01.386]                 }
[13:24:01.386]                 ...future.workdir <- getwd()
[13:24:01.386]             }
[13:24:01.386]             ...future.oldOptions <- base::as.list(base::.Options)
[13:24:01.386]             ...future.oldEnvVars <- base::Sys.getenv()
[13:24:01.386]         }
[13:24:01.386]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:24:01.386]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:24:01.386]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:24:01.386]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:24:01.386]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:24:01.386]             future.stdout.windows.reencode = NULL, width = 80L)
[13:24:01.386]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:24:01.386]             base::names(...future.oldOptions))
[13:24:01.386]     }
[13:24:01.386]     if (FALSE) {
[13:24:01.386]     }
[13:24:01.386]     else {
[13:24:01.386]         if (TRUE) {
[13:24:01.386]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:24:01.386]                 open = "w")
[13:24:01.386]         }
[13:24:01.386]         else {
[13:24:01.386]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:24:01.386]                 windows = "NUL", "/dev/null"), open = "w")
[13:24:01.386]         }
[13:24:01.386]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:24:01.386]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:24:01.386]             base::sink(type = "output", split = FALSE)
[13:24:01.386]             base::close(...future.stdout)
[13:24:01.386]         }, add = TRUE)
[13:24:01.386]     }
[13:24:01.386]     ...future.frame <- base::sys.nframe()
[13:24:01.386]     ...future.conditions <- base::list()
[13:24:01.386]     ...future.rng <- base::globalenv()$.Random.seed
[13:24:01.386]     if (FALSE) {
[13:24:01.386]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:24:01.386]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:24:01.386]     }
[13:24:01.386]     ...future.result <- base::tryCatch({
[13:24:01.386]         base::withCallingHandlers({
[13:24:01.386]             ...future.value <- base::withVisible(base::local({
[13:24:01.386]                 ...future.makeSendCondition <- base::local({
[13:24:01.386]                   sendCondition <- NULL
[13:24:01.386]                   function(frame = 1L) {
[13:24:01.386]                     if (is.function(sendCondition)) 
[13:24:01.386]                       return(sendCondition)
[13:24:01.386]                     ns <- getNamespace("parallel")
[13:24:01.386]                     if (exists("sendData", mode = "function", 
[13:24:01.386]                       envir = ns)) {
[13:24:01.386]                       parallel_sendData <- get("sendData", mode = "function", 
[13:24:01.386]                         envir = ns)
[13:24:01.386]                       envir <- sys.frame(frame)
[13:24:01.386]                       master <- NULL
[13:24:01.386]                       while (!identical(envir, .GlobalEnv) && 
[13:24:01.386]                         !identical(envir, emptyenv())) {
[13:24:01.386]                         if (exists("master", mode = "list", envir = envir, 
[13:24:01.386]                           inherits = FALSE)) {
[13:24:01.386]                           master <- get("master", mode = "list", 
[13:24:01.386]                             envir = envir, inherits = FALSE)
[13:24:01.386]                           if (inherits(master, c("SOCKnode", 
[13:24:01.386]                             "SOCK0node"))) {
[13:24:01.386]                             sendCondition <<- function(cond) {
[13:24:01.386]                               data <- list(type = "VALUE", value = cond, 
[13:24:01.386]                                 success = TRUE)
[13:24:01.386]                               parallel_sendData(master, data)
[13:24:01.386]                             }
[13:24:01.386]                             return(sendCondition)
[13:24:01.386]                           }
[13:24:01.386]                         }
[13:24:01.386]                         frame <- frame + 1L
[13:24:01.386]                         envir <- sys.frame(frame)
[13:24:01.386]                       }
[13:24:01.386]                     }
[13:24:01.386]                     sendCondition <<- function(cond) NULL
[13:24:01.386]                   }
[13:24:01.386]                 })
[13:24:01.386]                 withCallingHandlers({
[13:24:01.386]                   NA
[13:24:01.386]                 }, immediateCondition = function(cond) {
[13:24:01.386]                   sendCondition <- ...future.makeSendCondition()
[13:24:01.386]                   sendCondition(cond)
[13:24:01.386]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:24:01.386]                   {
[13:24:01.386]                     inherits <- base::inherits
[13:24:01.386]                     invokeRestart <- base::invokeRestart
[13:24:01.386]                     is.null <- base::is.null
[13:24:01.386]                     muffled <- FALSE
[13:24:01.386]                     if (inherits(cond, "message")) {
[13:24:01.386]                       muffled <- grepl(pattern, "muffleMessage")
[13:24:01.386]                       if (muffled) 
[13:24:01.386]                         invokeRestart("muffleMessage")
[13:24:01.386]                     }
[13:24:01.386]                     else if (inherits(cond, "warning")) {
[13:24:01.386]                       muffled <- grepl(pattern, "muffleWarning")
[13:24:01.386]                       if (muffled) 
[13:24:01.386]                         invokeRestart("muffleWarning")
[13:24:01.386]                     }
[13:24:01.386]                     else if (inherits(cond, "condition")) {
[13:24:01.386]                       if (!is.null(pattern)) {
[13:24:01.386]                         computeRestarts <- base::computeRestarts
[13:24:01.386]                         grepl <- base::grepl
[13:24:01.386]                         restarts <- computeRestarts(cond)
[13:24:01.386]                         for (restart in restarts) {
[13:24:01.386]                           name <- restart$name
[13:24:01.386]                           if (is.null(name)) 
[13:24:01.386]                             next
[13:24:01.386]                           if (!grepl(pattern, name)) 
[13:24:01.386]                             next
[13:24:01.386]                           invokeRestart(restart)
[13:24:01.386]                           muffled <- TRUE
[13:24:01.386]                           break
[13:24:01.386]                         }
[13:24:01.386]                       }
[13:24:01.386]                     }
[13:24:01.386]                     invisible(muffled)
[13:24:01.386]                   }
[13:24:01.386]                   muffleCondition(cond)
[13:24:01.386]                 })
[13:24:01.386]             }))
[13:24:01.386]             future::FutureResult(value = ...future.value$value, 
[13:24:01.386]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:24:01.386]                   ...future.rng), globalenv = if (FALSE) 
[13:24:01.386]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:24:01.386]                     ...future.globalenv.names))
[13:24:01.386]                 else NULL, started = ...future.startTime, version = "1.8")
[13:24:01.386]         }, condition = base::local({
[13:24:01.386]             c <- base::c
[13:24:01.386]             inherits <- base::inherits
[13:24:01.386]             invokeRestart <- base::invokeRestart
[13:24:01.386]             length <- base::length
[13:24:01.386]             list <- base::list
[13:24:01.386]             seq.int <- base::seq.int
[13:24:01.386]             signalCondition <- base::signalCondition
[13:24:01.386]             sys.calls <- base::sys.calls
[13:24:01.386]             `[[` <- base::`[[`
[13:24:01.386]             `+` <- base::`+`
[13:24:01.386]             `<<-` <- base::`<<-`
[13:24:01.386]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:24:01.386]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:24:01.386]                   3L)]
[13:24:01.386]             }
[13:24:01.386]             function(cond) {
[13:24:01.386]                 is_error <- inherits(cond, "error")
[13:24:01.386]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:24:01.386]                   NULL)
[13:24:01.386]                 if (is_error) {
[13:24:01.386]                   sessionInformation <- function() {
[13:24:01.386]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:24:01.386]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:24:01.386]                       search = base::search(), system = base::Sys.info())
[13:24:01.386]                   }
[13:24:01.386]                   ...future.conditions[[length(...future.conditions) + 
[13:24:01.386]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:24:01.386]                     cond$call), session = sessionInformation(), 
[13:24:01.386]                     timestamp = base::Sys.time(), signaled = 0L)
[13:24:01.386]                   signalCondition(cond)
[13:24:01.386]                 }
[13:24:01.386]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:24:01.386]                 "immediateCondition"))) {
[13:24:01.386]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:24:01.386]                   ...future.conditions[[length(...future.conditions) + 
[13:24:01.386]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:24:01.386]                   if (TRUE && !signal) {
[13:24:01.386]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:24:01.386]                     {
[13:24:01.386]                       inherits <- base::inherits
[13:24:01.386]                       invokeRestart <- base::invokeRestart
[13:24:01.386]                       is.null <- base::is.null
[13:24:01.386]                       muffled <- FALSE
[13:24:01.386]                       if (inherits(cond, "message")) {
[13:24:01.386]                         muffled <- grepl(pattern, "muffleMessage")
[13:24:01.386]                         if (muffled) 
[13:24:01.386]                           invokeRestart("muffleMessage")
[13:24:01.386]                       }
[13:24:01.386]                       else if (inherits(cond, "warning")) {
[13:24:01.386]                         muffled <- grepl(pattern, "muffleWarning")
[13:24:01.386]                         if (muffled) 
[13:24:01.386]                           invokeRestart("muffleWarning")
[13:24:01.386]                       }
[13:24:01.386]                       else if (inherits(cond, "condition")) {
[13:24:01.386]                         if (!is.null(pattern)) {
[13:24:01.386]                           computeRestarts <- base::computeRestarts
[13:24:01.386]                           grepl <- base::grepl
[13:24:01.386]                           restarts <- computeRestarts(cond)
[13:24:01.386]                           for (restart in restarts) {
[13:24:01.386]                             name <- restart$name
[13:24:01.386]                             if (is.null(name)) 
[13:24:01.386]                               next
[13:24:01.386]                             if (!grepl(pattern, name)) 
[13:24:01.386]                               next
[13:24:01.386]                             invokeRestart(restart)
[13:24:01.386]                             muffled <- TRUE
[13:24:01.386]                             break
[13:24:01.386]                           }
[13:24:01.386]                         }
[13:24:01.386]                       }
[13:24:01.386]                       invisible(muffled)
[13:24:01.386]                     }
[13:24:01.386]                     muffleCondition(cond, pattern = "^muffle")
[13:24:01.386]                   }
[13:24:01.386]                 }
[13:24:01.386]                 else {
[13:24:01.386]                   if (TRUE) {
[13:24:01.386]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:24:01.386]                     {
[13:24:01.386]                       inherits <- base::inherits
[13:24:01.386]                       invokeRestart <- base::invokeRestart
[13:24:01.386]                       is.null <- base::is.null
[13:24:01.386]                       muffled <- FALSE
[13:24:01.386]                       if (inherits(cond, "message")) {
[13:24:01.386]                         muffled <- grepl(pattern, "muffleMessage")
[13:24:01.386]                         if (muffled) 
[13:24:01.386]                           invokeRestart("muffleMessage")
[13:24:01.386]                       }
[13:24:01.386]                       else if (inherits(cond, "warning")) {
[13:24:01.386]                         muffled <- grepl(pattern, "muffleWarning")
[13:24:01.386]                         if (muffled) 
[13:24:01.386]                           invokeRestart("muffleWarning")
[13:24:01.386]                       }
[13:24:01.386]                       else if (inherits(cond, "condition")) {
[13:24:01.386]                         if (!is.null(pattern)) {
[13:24:01.386]                           computeRestarts <- base::computeRestarts
[13:24:01.386]                           grepl <- base::grepl
[13:24:01.386]                           restarts <- computeRestarts(cond)
[13:24:01.386]                           for (restart in restarts) {
[13:24:01.386]                             name <- restart$name
[13:24:01.386]                             if (is.null(name)) 
[13:24:01.386]                               next
[13:24:01.386]                             if (!grepl(pattern, name)) 
[13:24:01.386]                               next
[13:24:01.386]                             invokeRestart(restart)
[13:24:01.386]                             muffled <- TRUE
[13:24:01.386]                             break
[13:24:01.386]                           }
[13:24:01.386]                         }
[13:24:01.386]                       }
[13:24:01.386]                       invisible(muffled)
[13:24:01.386]                     }
[13:24:01.386]                     muffleCondition(cond, pattern = "^muffle")
[13:24:01.386]                   }
[13:24:01.386]                 }
[13:24:01.386]             }
[13:24:01.386]         }))
[13:24:01.386]     }, error = function(ex) {
[13:24:01.386]         base::structure(base::list(value = NULL, visible = NULL, 
[13:24:01.386]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:24:01.386]                 ...future.rng), started = ...future.startTime, 
[13:24:01.386]             finished = Sys.time(), session_uuid = NA_character_, 
[13:24:01.386]             version = "1.8"), class = "FutureResult")
[13:24:01.386]     }, finally = {
[13:24:01.386]         if (!identical(...future.workdir, getwd())) 
[13:24:01.386]             setwd(...future.workdir)
[13:24:01.386]         {
[13:24:01.386]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:24:01.386]                 ...future.oldOptions$nwarnings <- NULL
[13:24:01.386]             }
[13:24:01.386]             base::options(...future.oldOptions)
[13:24:01.386]             if (.Platform$OS.type == "windows") {
[13:24:01.386]                 old_names <- names(...future.oldEnvVars)
[13:24:01.386]                 envs <- base::Sys.getenv()
[13:24:01.386]                 names <- names(envs)
[13:24:01.386]                 common <- intersect(names, old_names)
[13:24:01.386]                 added <- setdiff(names, old_names)
[13:24:01.386]                 removed <- setdiff(old_names, names)
[13:24:01.386]                 changed <- common[...future.oldEnvVars[common] != 
[13:24:01.386]                   envs[common]]
[13:24:01.386]                 NAMES <- toupper(changed)
[13:24:01.386]                 args <- list()
[13:24:01.386]                 for (kk in seq_along(NAMES)) {
[13:24:01.386]                   name <- changed[[kk]]
[13:24:01.386]                   NAME <- NAMES[[kk]]
[13:24:01.386]                   if (name != NAME && is.element(NAME, old_names)) 
[13:24:01.386]                     next
[13:24:01.386]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:24:01.386]                 }
[13:24:01.386]                 NAMES <- toupper(added)
[13:24:01.386]                 for (kk in seq_along(NAMES)) {
[13:24:01.386]                   name <- added[[kk]]
[13:24:01.386]                   NAME <- NAMES[[kk]]
[13:24:01.386]                   if (name != NAME && is.element(NAME, old_names)) 
[13:24:01.386]                     next
[13:24:01.386]                   args[[name]] <- ""
[13:24:01.386]                 }
[13:24:01.386]                 NAMES <- toupper(removed)
[13:24:01.386]                 for (kk in seq_along(NAMES)) {
[13:24:01.386]                   name <- removed[[kk]]
[13:24:01.386]                   NAME <- NAMES[[kk]]
[13:24:01.386]                   if (name != NAME && is.element(NAME, old_names)) 
[13:24:01.386]                     next
[13:24:01.386]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:24:01.386]                 }
[13:24:01.386]                 if (length(args) > 0) 
[13:24:01.386]                   base::do.call(base::Sys.setenv, args = args)
[13:24:01.386]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:24:01.386]             }
[13:24:01.386]             else {
[13:24:01.386]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:24:01.386]             }
[13:24:01.386]             {
[13:24:01.386]                 if (base::length(...future.futureOptionsAdded) > 
[13:24:01.386]                   0L) {
[13:24:01.386]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:24:01.386]                   base::names(opts) <- ...future.futureOptionsAdded
[13:24:01.386]                   base::options(opts)
[13:24:01.386]                 }
[13:24:01.386]                 {
[13:24:01.386]                   {
[13:24:01.386]                     base::options(mc.cores = ...future.mc.cores.old)
[13:24:01.386]                     NULL
[13:24:01.386]                   }
[13:24:01.386]                   options(future.plan = NULL)
[13:24:01.386]                   if (is.na(NA_character_)) 
[13:24:01.386]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:24:01.386]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:24:01.386]                   future::plan(list(a = function (..., workers = availableCores(), 
[13:24:01.386]                     lazy = FALSE, rscript_libs = .libPaths(), 
[13:24:01.386]                     envir = parent.frame()) 
[13:24:01.386]                   {
[13:24:01.386]                     if (is.function(workers)) 
[13:24:01.386]                       workers <- workers()
[13:24:01.386]                     workers <- structure(as.integer(workers), 
[13:24:01.386]                       class = class(workers))
[13:24:01.386]                     stop_if_not(length(workers) == 1, is.finite(workers), 
[13:24:01.386]                       workers >= 1)
[13:24:01.386]                     if (workers == 1L && !inherits(workers, "AsIs")) {
[13:24:01.386]                       return(sequential(..., lazy = TRUE, envir = envir))
[13:24:01.386]                     }
[13:24:01.386]                     future <- MultisessionFuture(..., workers = workers, 
[13:24:01.386]                       lazy = lazy, rscript_libs = rscript_libs, 
[13:24:01.386]                       envir = envir)
[13:24:01.386]                     if (!future$lazy) 
[13:24:01.386]                       future <- run(future)
[13:24:01.386]                     invisible(future)
[13:24:01.386]                   }, b = function (..., workers = availableCores(), 
[13:24:01.386]                     lazy = FALSE, rscript_libs = .libPaths(), 
[13:24:01.386]                     envir = parent.frame()) 
[13:24:01.386]                   {
[13:24:01.386]                     if (is.function(workers)) 
[13:24:01.386]                       workers <- workers()
[13:24:01.386]                     workers <- structure(as.integer(workers), 
[13:24:01.386]                       class = class(workers))
[13:24:01.386]                     stop_if_not(length(workers) == 1, is.finite(workers), 
[13:24:01.386]                       workers >= 1)
[13:24:01.386]                     if (workers == 1L && !inherits(workers, "AsIs")) {
[13:24:01.386]                       return(sequential(..., lazy = TRUE, envir = envir))
[13:24:01.386]                     }
[13:24:01.386]                     future <- MultisessionFuture(..., workers = workers, 
[13:24:01.386]                       lazy = lazy, rscript_libs = rscript_libs, 
[13:24:01.386]                       envir = envir)
[13:24:01.386]                     if (!future$lazy) 
[13:24:01.386]                       future <- run(future)
[13:24:01.386]                     invisible(future)
[13:24:01.386]                   }), .cleanup = FALSE, .init = FALSE)
[13:24:01.386]                 }
[13:24:01.386]             }
[13:24:01.386]         }
[13:24:01.386]     })
[13:24:01.386]     if (TRUE) {
[13:24:01.386]         base::sink(type = "output", split = FALSE)
[13:24:01.386]         if (TRUE) {
[13:24:01.386]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:24:01.386]         }
[13:24:01.386]         else {
[13:24:01.386]             ...future.result["stdout"] <- base::list(NULL)
[13:24:01.386]         }
[13:24:01.386]         base::close(...future.stdout)
[13:24:01.386]         ...future.stdout <- NULL
[13:24:01.386]     }
[13:24:01.386]     ...future.result$conditions <- ...future.conditions
[13:24:01.386]     ...future.result$finished <- base::Sys.time()
[13:24:01.386]     ...future.result
[13:24:01.386] }
[13:24:01.442] MultisessionFuture started
[13:24:01.442] result() for ClusterFuture ...
[13:24:01.442] receiveMessageFromWorker() for ClusterFuture ...
[13:24:01.442] - Validating connection of MultisessionFuture
[13:24:01.494] - received message: FutureResult
[13:24:01.494] - Received FutureResult
[13:24:01.494] - Erased future from FutureRegistry
[13:24:01.494] result() for ClusterFuture ...
[13:24:01.495] - result already collected: FutureResult
[13:24:01.495] result() for ClusterFuture ... done
[13:24:01.495] receiveMessageFromWorker() for ClusterFuture ... done
[13:24:01.495] result() for ClusterFuture ... done
[13:24:01.495] result() for ClusterFuture ...
[13:24:01.495] - result already collected: FutureResult
[13:24:01.495] result() for ClusterFuture ... done
[13:24:01.495] plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ... DONE
[13:24:01.499] plan(): nbrOfWorkers() = 2
[13:24:01.499] getGlobalsAndPackages() ...
[13:24:01.499] Searching for globals...
[13:24:01.516] - globals found: [21] ‘{’, ‘<-’, ‘unclass’, ‘::’, ‘[’, ‘nested’, ‘-’, ‘stopifnot’, ‘==’, ‘length’, ‘inherits’, ‘[[’, ‘strategy2’, ‘for’, ‘seq_along’, ‘attr’, ‘attr<-’, ‘[[<-’, ‘all.equal’, ‘list’, ‘%<-%’
[13:24:01.516] Searching for globals ... DONE
[13:24:01.516] Resolving globals: FALSE
[13:24:01.517] The total size of the 2 globals is 88.27 KiB (90384 bytes)
[13:24:01.518] The total size of the 2 globals exported for future expression (‘{; a <- 1L; plan_a <- unclass(future::plan("list")); nested_a <- nested[-1]; stopifnot(length(nested_a) == 1L, length(plan_a) == 1L, inherits(plan_a[[1]],; "future"), inherits(future::plan("next"), strategy2)); ...; }; y; }’) is 88.27 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘nested’ (88.15 KiB of class ‘list’) and ‘strategy2’ (120 bytes of class ‘character’)
[13:24:01.518] - globals: [2] ‘nested’, ‘strategy2’
[13:24:01.518] - packages: [1] ‘future’
[13:24:01.518] getGlobalsAndPackages() ... DONE
[13:24:01.518] run() for ‘Future’ ...
[13:24:01.518] - state: ‘created’
[13:24:01.518] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[13:24:01.533] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:24:01.533] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[13:24:01.533]   - Field: ‘node’
[13:24:01.533]   - Field: ‘label’
[13:24:01.533]   - Field: ‘local’
[13:24:01.533]   - Field: ‘owner’
[13:24:01.534]   - Field: ‘envir’
[13:24:01.534]   - Field: ‘workers’
[13:24:01.534]   - Field: ‘packages’
[13:24:01.534]   - Field: ‘gc’
[13:24:01.534]   - Field: ‘conditions’
[13:24:01.534]   - Field: ‘persistent’
[13:24:01.534]   - Field: ‘expr’
[13:24:01.534]   - Field: ‘uuid’
[13:24:01.534]   - Field: ‘seed’
[13:24:01.534]   - Field: ‘version’
[13:24:01.535]   - Field: ‘result’
[13:24:01.535]   - Field: ‘asynchronous’
[13:24:01.535]   - Field: ‘calls’
[13:24:01.535]   - Field: ‘globals’
[13:24:01.535]   - Field: ‘stdout’
[13:24:01.535]   - Field: ‘earlySignal’
[13:24:01.535]   - Field: ‘lazy’
[13:24:01.535]   - Field: ‘state’
[13:24:01.535] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[13:24:01.535] - Launch lazy future ...
[13:24:01.536] Packages needed by the future expression (n = 1): ‘future’
[13:24:01.536] Packages needed by future strategies (n = 1): ‘future’
[13:24:01.536] {
[13:24:01.536]     {
[13:24:01.536]         {
[13:24:01.536]             ...future.startTime <- base::Sys.time()
[13:24:01.536]             {
[13:24:01.536]                 {
[13:24:01.536]                   {
[13:24:01.536]                     {
[13:24:01.536]                       {
[13:24:01.536]                         base::local({
[13:24:01.536]                           has_future <- base::requireNamespace("future", 
[13:24:01.536]                             quietly = TRUE)
[13:24:01.536]                           if (has_future) {
[13:24:01.536]                             ns <- base::getNamespace("future")
[13:24:01.536]                             version <- ns[[".package"]][["version"]]
[13:24:01.536]                             if (is.null(version)) 
[13:24:01.536]                               version <- utils::packageVersion("future")
[13:24:01.536]                           }
[13:24:01.536]                           else {
[13:24:01.536]                             version <- NULL
[13:24:01.536]                           }
[13:24:01.536]                           if (!has_future || version < "1.8.0") {
[13:24:01.536]                             info <- base::c(r_version = base::gsub("R version ", 
[13:24:01.536]                               "", base::R.version$version.string), 
[13:24:01.536]                               platform = base::sprintf("%s (%s-bit)", 
[13:24:01.536]                                 base::R.version$platform, 8 * 
[13:24:01.536]                                   base::.Machine$sizeof.pointer), 
[13:24:01.536]                               os = base::paste(base::Sys.info()[base::c("sysname", 
[13:24:01.536]                                 "release", "version")], collapse = " "), 
[13:24:01.536]                               hostname = base::Sys.info()[["nodename"]])
[13:24:01.536]                             info <- base::sprintf("%s: %s", base::names(info), 
[13:24:01.536]                               info)
[13:24:01.536]                             info <- base::paste(info, collapse = "; ")
[13:24:01.536]                             if (!has_future) {
[13:24:01.536]                               msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:24:01.536]                                 info)
[13:24:01.536]                             }
[13:24:01.536]                             else {
[13:24:01.536]                               msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:24:01.536]                                 info, version)
[13:24:01.536]                             }
[13:24:01.536]                             base::stop(msg)
[13:24:01.536]                           }
[13:24:01.536]                         })
[13:24:01.536]                       }
[13:24:01.536]                       ...future.mc.cores.old <- base::getOption("mc.cores")
[13:24:01.536]                       base::options(mc.cores = 1L)
[13:24:01.536]                     }
[13:24:01.536]                     base::local({
[13:24:01.536]                       for (pkg in "future") {
[13:24:01.536]                         base::loadNamespace(pkg)
[13:24:01.536]                         base::library(pkg, character.only = TRUE)
[13:24:01.536]                       }
[13:24:01.536]                     })
[13:24:01.536]                   }
[13:24:01.536]                   options(future.plan = NULL)
[13:24:01.536]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:24:01.536]                   future::plan(list(b = function (..., workers = availableCores(), 
[13:24:01.536]                     lazy = FALSE, rscript_libs = .libPaths(), 
[13:24:01.536]                     envir = parent.frame()) 
[13:24:01.536]                   {
[13:24:01.536]                     if (is.function(workers)) 
[13:24:01.536]                       workers <- workers()
[13:24:01.536]                     workers <- structure(as.integer(workers), 
[13:24:01.536]                       class = class(workers))
[13:24:01.536]                     stop_if_not(length(workers) == 1, is.finite(workers), 
[13:24:01.536]                       workers >= 1)
[13:24:01.536]                     if (workers == 1L && !inherits(workers, "AsIs")) {
[13:24:01.536]                       return(sequential(..., lazy = TRUE, envir = envir))
[13:24:01.536]                     }
[13:24:01.536]                     future <- MultisessionFuture(..., workers = workers, 
[13:24:01.536]                       lazy = lazy, rscript_libs = rscript_libs, 
[13:24:01.536]                       envir = envir)
[13:24:01.536]                     if (!future$lazy) 
[13:24:01.536]                       future <- run(future)
[13:24:01.536]                     invisible(future)
[13:24:01.536]                   }), .cleanup = FALSE, .init = FALSE)
[13:24:01.536]                 }
[13:24:01.536]                 ...future.workdir <- getwd()
[13:24:01.536]             }
[13:24:01.536]             ...future.oldOptions <- base::as.list(base::.Options)
[13:24:01.536]             ...future.oldEnvVars <- base::Sys.getenv()
[13:24:01.536]         }
[13:24:01.536]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:24:01.536]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:24:01.536]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:24:01.536]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:24:01.536]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:24:01.536]             future.stdout.windows.reencode = NULL, width = 80L)
[13:24:01.536]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:24:01.536]             base::names(...future.oldOptions))
[13:24:01.536]     }
[13:24:01.536]     if (FALSE) {
[13:24:01.536]     }
[13:24:01.536]     else {
[13:24:01.536]         if (TRUE) {
[13:24:01.536]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:24:01.536]                 open = "w")
[13:24:01.536]         }
[13:24:01.536]         else {
[13:24:01.536]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:24:01.536]                 windows = "NUL", "/dev/null"), open = "w")
[13:24:01.536]         }
[13:24:01.536]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:24:01.536]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:24:01.536]             base::sink(type = "output", split = FALSE)
[13:24:01.536]             base::close(...future.stdout)
[13:24:01.536]         }, add = TRUE)
[13:24:01.536]     }
[13:24:01.536]     ...future.frame <- base::sys.nframe()
[13:24:01.536]     ...future.conditions <- base::list()
[13:24:01.536]     ...future.rng <- base::globalenv()$.Random.seed
[13:24:01.536]     if (FALSE) {
[13:24:01.536]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:24:01.536]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:24:01.536]     }
[13:24:01.536]     ...future.result <- base::tryCatch({
[13:24:01.536]         base::withCallingHandlers({
[13:24:01.536]             ...future.value <- base::withVisible(base::local({
[13:24:01.536]                 ...future.makeSendCondition <- base::local({
[13:24:01.536]                   sendCondition <- NULL
[13:24:01.536]                   function(frame = 1L) {
[13:24:01.536]                     if (is.function(sendCondition)) 
[13:24:01.536]                       return(sendCondition)
[13:24:01.536]                     ns <- getNamespace("parallel")
[13:24:01.536]                     if (exists("sendData", mode = "function", 
[13:24:01.536]                       envir = ns)) {
[13:24:01.536]                       parallel_sendData <- get("sendData", mode = "function", 
[13:24:01.536]                         envir = ns)
[13:24:01.536]                       envir <- sys.frame(frame)
[13:24:01.536]                       master <- NULL
[13:24:01.536]                       while (!identical(envir, .GlobalEnv) && 
[13:24:01.536]                         !identical(envir, emptyenv())) {
[13:24:01.536]                         if (exists("master", mode = "list", envir = envir, 
[13:24:01.536]                           inherits = FALSE)) {
[13:24:01.536]                           master <- get("master", mode = "list", 
[13:24:01.536]                             envir = envir, inherits = FALSE)
[13:24:01.536]                           if (inherits(master, c("SOCKnode", 
[13:24:01.536]                             "SOCK0node"))) {
[13:24:01.536]                             sendCondition <<- function(cond) {
[13:24:01.536]                               data <- list(type = "VALUE", value = cond, 
[13:24:01.536]                                 success = TRUE)
[13:24:01.536]                               parallel_sendData(master, data)
[13:24:01.536]                             }
[13:24:01.536]                             return(sendCondition)
[13:24:01.536]                           }
[13:24:01.536]                         }
[13:24:01.536]                         frame <- frame + 1L
[13:24:01.536]                         envir <- sys.frame(frame)
[13:24:01.536]                       }
[13:24:01.536]                     }
[13:24:01.536]                     sendCondition <<- function(cond) NULL
[13:24:01.536]                   }
[13:24:01.536]                 })
[13:24:01.536]                 withCallingHandlers({
[13:24:01.536]                   {
[13:24:01.536]                     a <- 1L
[13:24:01.536]                     plan_a <- unclass(future::plan("list"))
[13:24:01.536]                     nested_a <- nested[-1]
[13:24:01.536]                     stopifnot(length(nested_a) == 1L, length(plan_a) == 
[13:24:01.536]                       1L, inherits(plan_a[[1]], "future"), inherits(future::plan("next"), 
[13:24:01.536]                       strategy2))
[13:24:01.536]                     for (kk in seq_along(plan_a)) attr(plan_a[[kk]], 
[13:24:01.536]                       "init") <- NULL
[13:24:01.536]                     for (kk in seq_along(nested_a)) attr(nested_a[[kk]], 
[13:24:01.536]                       "init") <- NULL
[13:24:01.536]                     stopifnot(all.equal(plan_a, nested_a))
[13:24:01.536]                     y %<-% {
[13:24:01.536]                       b <- 2L
[13:24:01.536]                       plan_b <- future::plan("list")
[13:24:01.536]                       nested_b <- nested_a[-1]
[13:24:01.536]                       stopifnot(length(nested_b) == 0L, length(plan_b) == 
[13:24:01.536]                         1L, inherits(plan_b[[1]], "future"), 
[13:24:01.536]                         inherits(future::plan("next"), "sequential"))
[13:24:01.536]                       list(a = a, nested_a = nested_a, plan_a = plan_a, 
[13:24:01.536]                         b = b, nested_b = nested_b, plan_b = plan_b)
[13:24:01.536]                     }
[13:24:01.536]                     y
[13:24:01.536]                   }
[13:24:01.536]                 }, immediateCondition = function(cond) {
[13:24:01.536]                   sendCondition <- ...future.makeSendCondition()
[13:24:01.536]                   sendCondition(cond)
[13:24:01.536]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:24:01.536]                   {
[13:24:01.536]                     inherits <- base::inherits
[13:24:01.536]                     invokeRestart <- base::invokeRestart
[13:24:01.536]                     is.null <- base::is.null
[13:24:01.536]                     muffled <- FALSE
[13:24:01.536]                     if (inherits(cond, "message")) {
[13:24:01.536]                       muffled <- grepl(pattern, "muffleMessage")
[13:24:01.536]                       if (muffled) 
[13:24:01.536]                         invokeRestart("muffleMessage")
[13:24:01.536]                     }
[13:24:01.536]                     else if (inherits(cond, "warning")) {
[13:24:01.536]                       muffled <- grepl(pattern, "muffleWarning")
[13:24:01.536]                       if (muffled) 
[13:24:01.536]                         invokeRestart("muffleWarning")
[13:24:01.536]                     }
[13:24:01.536]                     else if (inherits(cond, "condition")) {
[13:24:01.536]                       if (!is.null(pattern)) {
[13:24:01.536]                         computeRestarts <- base::computeRestarts
[13:24:01.536]                         grepl <- base::grepl
[13:24:01.536]                         restarts <- computeRestarts(cond)
[13:24:01.536]                         for (restart in restarts) {
[13:24:01.536]                           name <- restart$name
[13:24:01.536]                           if (is.null(name)) 
[13:24:01.536]                             next
[13:24:01.536]                           if (!grepl(pattern, name)) 
[13:24:01.536]                             next
[13:24:01.536]                           invokeRestart(restart)
[13:24:01.536]                           muffled <- TRUE
[13:24:01.536]                           break
[13:24:01.536]                         }
[13:24:01.536]                       }
[13:24:01.536]                     }
[13:24:01.536]                     invisible(muffled)
[13:24:01.536]                   }
[13:24:01.536]                   muffleCondition(cond)
[13:24:01.536]                 })
[13:24:01.536]             }))
[13:24:01.536]             future::FutureResult(value = ...future.value$value, 
[13:24:01.536]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:24:01.536]                   ...future.rng), globalenv = if (FALSE) 
[13:24:01.536]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:24:01.536]                     ...future.globalenv.names))
[13:24:01.536]                 else NULL, started = ...future.startTime, version = "1.8")
[13:24:01.536]         }, condition = base::local({
[13:24:01.536]             c <- base::c
[13:24:01.536]             inherits <- base::inherits
[13:24:01.536]             invokeRestart <- base::invokeRestart
[13:24:01.536]             length <- base::length
[13:24:01.536]             list <- base::list
[13:24:01.536]             seq.int <- base::seq.int
[13:24:01.536]             signalCondition <- base::signalCondition
[13:24:01.536]             sys.calls <- base::sys.calls
[13:24:01.536]             `[[` <- base::`[[`
[13:24:01.536]             `+` <- base::`+`
[13:24:01.536]             `<<-` <- base::`<<-`
[13:24:01.536]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:24:01.536]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:24:01.536]                   3L)]
[13:24:01.536]             }
[13:24:01.536]             function(cond) {
[13:24:01.536]                 is_error <- inherits(cond, "error")
[13:24:01.536]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:24:01.536]                   NULL)
[13:24:01.536]                 if (is_error) {
[13:24:01.536]                   sessionInformation <- function() {
[13:24:01.536]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:24:01.536]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:24:01.536]                       search = base::search(), system = base::Sys.info())
[13:24:01.536]                   }
[13:24:01.536]                   ...future.conditions[[length(...future.conditions) + 
[13:24:01.536]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:24:01.536]                     cond$call), session = sessionInformation(), 
[13:24:01.536]                     timestamp = base::Sys.time(), signaled = 0L)
[13:24:01.536]                   signalCondition(cond)
[13:24:01.536]                 }
[13:24:01.536]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:24:01.536]                 "immediateCondition"))) {
[13:24:01.536]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:24:01.536]                   ...future.conditions[[length(...future.conditions) + 
[13:24:01.536]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:24:01.536]                   if (TRUE && !signal) {
[13:24:01.536]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:24:01.536]                     {
[13:24:01.536]                       inherits <- base::inherits
[13:24:01.536]                       invokeRestart <- base::invokeRestart
[13:24:01.536]                       is.null <- base::is.null
[13:24:01.536]                       muffled <- FALSE
[13:24:01.536]                       if (inherits(cond, "message")) {
[13:24:01.536]                         muffled <- grepl(pattern, "muffleMessage")
[13:24:01.536]                         if (muffled) 
[13:24:01.536]                           invokeRestart("muffleMessage")
[13:24:01.536]                       }
[13:24:01.536]                       else if (inherits(cond, "warning")) {
[13:24:01.536]                         muffled <- grepl(pattern, "muffleWarning")
[13:24:01.536]                         if (muffled) 
[13:24:01.536]                           invokeRestart("muffleWarning")
[13:24:01.536]                       }
[13:24:01.536]                       else if (inherits(cond, "condition")) {
[13:24:01.536]                         if (!is.null(pattern)) {
[13:24:01.536]                           computeRestarts <- base::computeRestarts
[13:24:01.536]                           grepl <- base::grepl
[13:24:01.536]                           restarts <- computeRestarts(cond)
[13:24:01.536]                           for (restart in restarts) {
[13:24:01.536]                             name <- restart$name
[13:24:01.536]                             if (is.null(name)) 
[13:24:01.536]                               next
[13:24:01.536]                             if (!grepl(pattern, name)) 
[13:24:01.536]                               next
[13:24:01.536]                             invokeRestart(restart)
[13:24:01.536]                             muffled <- TRUE
[13:24:01.536]                             break
[13:24:01.536]                           }
[13:24:01.536]                         }
[13:24:01.536]                       }
[13:24:01.536]                       invisible(muffled)
[13:24:01.536]                     }
[13:24:01.536]                     muffleCondition(cond, pattern = "^muffle")
[13:24:01.536]                   }
[13:24:01.536]                 }
[13:24:01.536]                 else {
[13:24:01.536]                   if (TRUE) {
[13:24:01.536]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:24:01.536]                     {
[13:24:01.536]                       inherits <- base::inherits
[13:24:01.536]                       invokeRestart <- base::invokeRestart
[13:24:01.536]                       is.null <- base::is.null
[13:24:01.536]                       muffled <- FALSE
[13:24:01.536]                       if (inherits(cond, "message")) {
[13:24:01.536]                         muffled <- grepl(pattern, "muffleMessage")
[13:24:01.536]                         if (muffled) 
[13:24:01.536]                           invokeRestart("muffleMessage")
[13:24:01.536]                       }
[13:24:01.536]                       else if (inherits(cond, "warning")) {
[13:24:01.536]                         muffled <- grepl(pattern, "muffleWarning")
[13:24:01.536]                         if (muffled) 
[13:24:01.536]                           invokeRestart("muffleWarning")
[13:24:01.536]                       }
[13:24:01.536]                       else if (inherits(cond, "condition")) {
[13:24:01.536]                         if (!is.null(pattern)) {
[13:24:01.536]                           computeRestarts <- base::computeRestarts
[13:24:01.536]                           grepl <- base::grepl
[13:24:01.536]                           restarts <- computeRestarts(cond)
[13:24:01.536]                           for (restart in restarts) {
[13:24:01.536]                             name <- restart$name
[13:24:01.536]                             if (is.null(name)) 
[13:24:01.536]                               next
[13:24:01.536]                             if (!grepl(pattern, name)) 
[13:24:01.536]                               next
[13:24:01.536]                             invokeRestart(restart)
[13:24:01.536]                             muffled <- TRUE
[13:24:01.536]                             break
[13:24:01.536]                           }
[13:24:01.536]                         }
[13:24:01.536]                       }
[13:24:01.536]                       invisible(muffled)
[13:24:01.536]                     }
[13:24:01.536]                     muffleCondition(cond, pattern = "^muffle")
[13:24:01.536]                   }
[13:24:01.536]                 }
[13:24:01.536]             }
[13:24:01.536]         }))
[13:24:01.536]     }, error = function(ex) {
[13:24:01.536]         base::structure(base::list(value = NULL, visible = NULL, 
[13:24:01.536]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:24:01.536]                 ...future.rng), started = ...future.startTime, 
[13:24:01.536]             finished = Sys.time(), session_uuid = NA_character_, 
[13:24:01.536]             version = "1.8"), class = "FutureResult")
[13:24:01.536]     }, finally = {
[13:24:01.536]         if (!identical(...future.workdir, getwd())) 
[13:24:01.536]             setwd(...future.workdir)
[13:24:01.536]         {
[13:24:01.536]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:24:01.536]                 ...future.oldOptions$nwarnings <- NULL
[13:24:01.536]             }
[13:24:01.536]             base::options(...future.oldOptions)
[13:24:01.536]             if (.Platform$OS.type == "windows") {
[13:24:01.536]                 old_names <- names(...future.oldEnvVars)
[13:24:01.536]                 envs <- base::Sys.getenv()
[13:24:01.536]                 names <- names(envs)
[13:24:01.536]                 common <- intersect(names, old_names)
[13:24:01.536]                 added <- setdiff(names, old_names)
[13:24:01.536]                 removed <- setdiff(old_names, names)
[13:24:01.536]                 changed <- common[...future.oldEnvVars[common] != 
[13:24:01.536]                   envs[common]]
[13:24:01.536]                 NAMES <- toupper(changed)
[13:24:01.536]                 args <- list()
[13:24:01.536]                 for (kk in seq_along(NAMES)) {
[13:24:01.536]                   name <- changed[[kk]]
[13:24:01.536]                   NAME <- NAMES[[kk]]
[13:24:01.536]                   if (name != NAME && is.element(NAME, old_names)) 
[13:24:01.536]                     next
[13:24:01.536]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:24:01.536]                 }
[13:24:01.536]                 NAMES <- toupper(added)
[13:24:01.536]                 for (kk in seq_along(NAMES)) {
[13:24:01.536]                   name <- added[[kk]]
[13:24:01.536]                   NAME <- NAMES[[kk]]
[13:24:01.536]                   if (name != NAME && is.element(NAME, old_names)) 
[13:24:01.536]                     next
[13:24:01.536]                   args[[name]] <- ""
[13:24:01.536]                 }
[13:24:01.536]                 NAMES <- toupper(removed)
[13:24:01.536]                 for (kk in seq_along(NAMES)) {
[13:24:01.536]                   name <- removed[[kk]]
[13:24:01.536]                   NAME <- NAMES[[kk]]
[13:24:01.536]                   if (name != NAME && is.element(NAME, old_names)) 
[13:24:01.536]                     next
[13:24:01.536]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:24:01.536]                 }
[13:24:01.536]                 if (length(args) > 0) 
[13:24:01.536]                   base::do.call(base::Sys.setenv, args = args)
[13:24:01.536]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:24:01.536]             }
[13:24:01.536]             else {
[13:24:01.536]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:24:01.536]             }
[13:24:01.536]             {
[13:24:01.536]                 if (base::length(...future.futureOptionsAdded) > 
[13:24:01.536]                   0L) {
[13:24:01.536]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:24:01.536]                   base::names(opts) <- ...future.futureOptionsAdded
[13:24:01.536]                   base::options(opts)
[13:24:01.536]                 }
[13:24:01.536]                 {
[13:24:01.536]                   {
[13:24:01.536]                     base::options(mc.cores = ...future.mc.cores.old)
[13:24:01.536]                     NULL
[13:24:01.536]                   }
[13:24:01.536]                   options(future.plan = NULL)
[13:24:01.536]                   if (is.na(NA_character_)) 
[13:24:01.536]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:24:01.536]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:24:01.536]                   future::plan(list(a = function (..., workers = availableCores(), 
[13:24:01.536]                     lazy = FALSE, rscript_libs = .libPaths(), 
[13:24:01.536]                     envir = parent.frame()) 
[13:24:01.536]                   {
[13:24:01.536]                     if (is.function(workers)) 
[13:24:01.536]                       workers <- workers()
[13:24:01.536]                     workers <- structure(as.integer(workers), 
[13:24:01.536]                       class = class(workers))
[13:24:01.536]                     stop_if_not(length(workers) == 1, is.finite(workers), 
[13:24:01.536]                       workers >= 1)
[13:24:01.536]                     if (workers == 1L && !inherits(workers, "AsIs")) {
[13:24:01.536]                       return(sequential(..., lazy = TRUE, envir = envir))
[13:24:01.536]                     }
[13:24:01.536]                     future <- MultisessionFuture(..., workers = workers, 
[13:24:01.536]                       lazy = lazy, rscript_libs = rscript_libs, 
[13:24:01.536]                       envir = envir)
[13:24:01.536]                     if (!future$lazy) 
[13:24:01.536]                       future <- run(future)
[13:24:01.536]                     invisible(future)
[13:24:01.536]                   }, b = function (..., workers = availableCores(), 
[13:24:01.536]                     lazy = FALSE, rscript_libs = .libPaths(), 
[13:24:01.536]                     envir = parent.frame()) 
[13:24:01.536]                   {
[13:24:01.536]                     if (is.function(workers)) 
[13:24:01.536]                       workers <- workers()
[13:24:01.536]                     workers <- structure(as.integer(workers), 
[13:24:01.536]                       class = class(workers))
[13:24:01.536]                     stop_if_not(length(workers) == 1, is.finite(workers), 
[13:24:01.536]                       workers >= 1)
[13:24:01.536]                     if (workers == 1L && !inherits(workers, "AsIs")) {
[13:24:01.536]                       return(sequential(..., lazy = TRUE, envir = envir))
[13:24:01.536]                     }
[13:24:01.536]                     future <- MultisessionFuture(..., workers = workers, 
[13:24:01.536]                       lazy = lazy, rscript_libs = rscript_libs, 
[13:24:01.536]                       envir = envir)
[13:24:01.536]                     if (!future$lazy) 
[13:24:01.536]                       future <- run(future)
[13:24:01.536]                     invisible(future)
[13:24:01.536]                   }), .cleanup = FALSE, .init = FALSE)
[13:24:01.536]                 }
[13:24:01.536]             }
[13:24:01.536]         }
[13:24:01.536]     })
[13:24:01.536]     if (TRUE) {
[13:24:01.536]         base::sink(type = "output", split = FALSE)
[13:24:01.536]         if (TRUE) {
[13:24:01.536]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:24:01.536]         }
[13:24:01.536]         else {
[13:24:01.536]             ...future.result["stdout"] <- base::list(NULL)
[13:24:01.536]         }
[13:24:01.536]         base::close(...future.stdout)
[13:24:01.536]         ...future.stdout <- NULL
[13:24:01.536]     }
[13:24:01.536]     ...future.result$conditions <- ...future.conditions
[13:24:01.536]     ...future.result$finished <- base::Sys.time()
[13:24:01.536]     ...future.result
[13:24:01.536] }
[13:24:01.540] Exporting 2 global objects (88.27 KiB) to cluster node #1 ...
[13:24:01.540] Exporting ‘nested’ (88.15 KiB) to cluster node #1 ...
[13:24:01.584] Exporting ‘nested’ (88.15 KiB) to cluster node #1 ... DONE
[13:24:01.585] Exporting ‘strategy2’ (120 bytes) to cluster node #1 ...
[13:24:01.585] Exporting ‘strategy2’ (120 bytes) to cluster node #1 ... DONE
[13:24:01.585] Exporting 2 global objects (88.27 KiB) to cluster node #1 ... DONE
[13:24:01.586] MultisessionFuture started
[13:24:01.586] - Launch lazy future ... done
[13:24:01.586] run() for ‘MultisessionFuture’ ... done
[13:24:01.586] result() for ClusterFuture ...
[13:24:01.586] receiveMessageFromWorker() for ClusterFuture ...
[13:24:01.586] - Validating connection of MultisessionFuture
[13:24:01.663] - received message: FutureResult
[13:24:01.663] - Received FutureResult
[13:24:01.664] - Erased future from FutureRegistry
[13:24:01.664] result() for ClusterFuture ...
[13:24:01.664] - result already collected: FutureResult
[13:24:01.664] result() for ClusterFuture ... done
[13:24:01.664] receiveMessageFromWorker() for ClusterFuture ... done
[13:24:01.664] result() for ClusterFuture ... done
[13:24:01.664] result() for ClusterFuture ...
[13:24:01.664] - result already collected: FutureResult
[13:24:01.664] result() for ClusterFuture ... done
List of 6
 $ a       : int 1
 $ nested_a:List of 1
  ..$ b:function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), 
    envir = parent.frame())  
  .. ..- attr(*, "class")= chr [1:5] "multisession" "cluster" "multiprocess" "future" ...
  .. ..- attr(*, "untweakable")= chr "persistent"
  .. ..- attr(*, "call")= language plan(list(a = strategy1, b = strategy2))
 $ plan_a  :List of 1
  ..$ b:function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), 
    envir = parent.frame())  
  .. ..- attr(*, "class")= chr [1:5] "multisession" "cluster" "multiprocess" "future" ...
  .. ..- attr(*, "untweakable")= chr "persistent"
  .. ..- attr(*, "call")= language plan(list(a = strategy1, b = strategy2))
 $ b       : int 2
 $ nested_b: Named list()
 $ plan_b  :List of 1
  ..$ :function (..., envir = parent.frame())  
  .. ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
  ..- attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[13:24:01.670] getGlobalsAndPackages() ...
[13:24:01.670] Searching for globals...
[13:24:01.672] - globals found: [7] ‘{’, ‘value’, ‘future’, ‘subset’, ‘data’, ‘==’, ‘a’
[13:24:01.672] Searching for globals ... DONE
[13:24:01.672] Resolving globals: FALSE
[13:24:01.673] The total size of the 1 globals is 128 bytes (128 bytes)
[13:24:01.673] The total size of the 1 globals exported for future expression (‘{; value(future(subset(data, a == 2))); }’) is 128 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘data’ (128 bytes of class ‘list’)
[13:24:01.673] - globals: [1] ‘data’
[13:24:01.673] - packages: [1] ‘future’
[13:24:01.673] getGlobalsAndPackages() ... DONE
[13:24:01.674] run() for ‘Future’ ...
[13:24:01.674] - state: ‘created’
[13:24:01.674] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[13:24:01.688] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:24:01.688] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[13:24:01.688]   - Field: ‘node’
[13:24:01.688]   - Field: ‘label’
[13:24:01.688]   - Field: ‘local’
[13:24:01.688]   - Field: ‘owner’
[13:24:01.688]   - Field: ‘envir’
[13:24:01.689]   - Field: ‘workers’
[13:24:01.689]   - Field: ‘packages’
[13:24:01.689]   - Field: ‘gc’
[13:24:01.689]   - Field: ‘conditions’
[13:24:01.689]   - Field: ‘persistent’
[13:24:01.689]   - Field: ‘expr’
[13:24:01.691]   - Field: ‘uuid’
[13:24:01.692]   - Field: ‘seed’
[13:24:01.692]   - Field: ‘version’
[13:24:01.692]   - Field: ‘result’
[13:24:01.692]   - Field: ‘asynchronous’
[13:24:01.692]   - Field: ‘calls’
[13:24:01.692]   - Field: ‘globals’
[13:24:01.692]   - Field: ‘stdout’
[13:24:01.692]   - Field: ‘earlySignal’
[13:24:01.692]   - Field: ‘lazy’
[13:24:01.692]   - Field: ‘state’
[13:24:01.693] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[13:24:01.693] - Launch lazy future ...
[13:24:01.693] Packages needed by the future expression (n = 1): ‘future’
[13:24:01.693] Packages needed by future strategies (n = 1): ‘future’
[13:24:01.694] {
[13:24:01.694]     {
[13:24:01.694]         {
[13:24:01.694]             ...future.startTime <- base::Sys.time()
[13:24:01.694]             {
[13:24:01.694]                 {
[13:24:01.694]                   {
[13:24:01.694]                     {
[13:24:01.694]                       {
[13:24:01.694]                         base::local({
[13:24:01.694]                           has_future <- base::requireNamespace("future", 
[13:24:01.694]                             quietly = TRUE)
[13:24:01.694]                           if (has_future) {
[13:24:01.694]                             ns <- base::getNamespace("future")
[13:24:01.694]                             version <- ns[[".package"]][["version"]]
[13:24:01.694]                             if (is.null(version)) 
[13:24:01.694]                               version <- utils::packageVersion("future")
[13:24:01.694]                           }
[13:24:01.694]                           else {
[13:24:01.694]                             version <- NULL
[13:24:01.694]                           }
[13:24:01.694]                           if (!has_future || version < "1.8.0") {
[13:24:01.694]                             info <- base::c(r_version = base::gsub("R version ", 
[13:24:01.694]                               "", base::R.version$version.string), 
[13:24:01.694]                               platform = base::sprintf("%s (%s-bit)", 
[13:24:01.694]                                 base::R.version$platform, 8 * 
[13:24:01.694]                                   base::.Machine$sizeof.pointer), 
[13:24:01.694]                               os = base::paste(base::Sys.info()[base::c("sysname", 
[13:24:01.694]                                 "release", "version")], collapse = " "), 
[13:24:01.694]                               hostname = base::Sys.info()[["nodename"]])
[13:24:01.694]                             info <- base::sprintf("%s: %s", base::names(info), 
[13:24:01.694]                               info)
[13:24:01.694]                             info <- base::paste(info, collapse = "; ")
[13:24:01.694]                             if (!has_future) {
[13:24:01.694]                               msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:24:01.694]                                 info)
[13:24:01.694]                             }
[13:24:01.694]                             else {
[13:24:01.694]                               msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:24:01.694]                                 info, version)
[13:24:01.694]                             }
[13:24:01.694]                             base::stop(msg)
[13:24:01.694]                           }
[13:24:01.694]                         })
[13:24:01.694]                       }
[13:24:01.694]                       ...future.mc.cores.old <- base::getOption("mc.cores")
[13:24:01.694]                       base::options(mc.cores = 1L)
[13:24:01.694]                     }
[13:24:01.694]                     base::local({
[13:24:01.694]                       for (pkg in "future") {
[13:24:01.694]                         base::loadNamespace(pkg)
[13:24:01.694]                         base::library(pkg, character.only = TRUE)
[13:24:01.694]                       }
[13:24:01.694]                     })
[13:24:01.694]                   }
[13:24:01.694]                   options(future.plan = NULL)
[13:24:01.694]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:24:01.694]                   future::plan(list(b = function (..., workers = availableCores(), 
[13:24:01.694]                     lazy = FALSE, rscript_libs = .libPaths(), 
[13:24:01.694]                     envir = parent.frame()) 
[13:24:01.694]                   {
[13:24:01.694]                     if (is.function(workers)) 
[13:24:01.694]                       workers <- workers()
[13:24:01.694]                     workers <- structure(as.integer(workers), 
[13:24:01.694]                       class = class(workers))
[13:24:01.694]                     stop_if_not(length(workers) == 1, is.finite(workers), 
[13:24:01.694]                       workers >= 1)
[13:24:01.694]                     if (workers == 1L && !inherits(workers, "AsIs")) {
[13:24:01.694]                       return(sequential(..., lazy = TRUE, envir = envir))
[13:24:01.694]                     }
[13:24:01.694]                     future <- MultisessionFuture(..., workers = workers, 
[13:24:01.694]                       lazy = lazy, rscript_libs = rscript_libs, 
[13:24:01.694]                       envir = envir)
[13:24:01.694]                     if (!future$lazy) 
[13:24:01.694]                       future <- run(future)
[13:24:01.694]                     invisible(future)
[13:24:01.694]                   }), .cleanup = FALSE, .init = FALSE)
[13:24:01.694]                 }
[13:24:01.694]                 ...future.workdir <- getwd()
[13:24:01.694]             }
[13:24:01.694]             ...future.oldOptions <- base::as.list(base::.Options)
[13:24:01.694]             ...future.oldEnvVars <- base::Sys.getenv()
[13:24:01.694]         }
[13:24:01.694]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:24:01.694]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:24:01.694]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:24:01.694]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:24:01.694]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:24:01.694]             future.stdout.windows.reencode = NULL, width = 80L)
[13:24:01.694]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:24:01.694]             base::names(...future.oldOptions))
[13:24:01.694]     }
[13:24:01.694]     if (FALSE) {
[13:24:01.694]     }
[13:24:01.694]     else {
[13:24:01.694]         if (TRUE) {
[13:24:01.694]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:24:01.694]                 open = "w")
[13:24:01.694]         }
[13:24:01.694]         else {
[13:24:01.694]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:24:01.694]                 windows = "NUL", "/dev/null"), open = "w")
[13:24:01.694]         }
[13:24:01.694]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:24:01.694]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:24:01.694]             base::sink(type = "output", split = FALSE)
[13:24:01.694]             base::close(...future.stdout)
[13:24:01.694]         }, add = TRUE)
[13:24:01.694]     }
[13:24:01.694]     ...future.frame <- base::sys.nframe()
[13:24:01.694]     ...future.conditions <- base::list()
[13:24:01.694]     ...future.rng <- base::globalenv()$.Random.seed
[13:24:01.694]     if (FALSE) {
[13:24:01.694]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:24:01.694]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:24:01.694]     }
[13:24:01.694]     ...future.result <- base::tryCatch({
[13:24:01.694]         base::withCallingHandlers({
[13:24:01.694]             ...future.value <- base::withVisible(base::local({
[13:24:01.694]                 ...future.makeSendCondition <- base::local({
[13:24:01.694]                   sendCondition <- NULL
[13:24:01.694]                   function(frame = 1L) {
[13:24:01.694]                     if (is.function(sendCondition)) 
[13:24:01.694]                       return(sendCondition)
[13:24:01.694]                     ns <- getNamespace("parallel")
[13:24:01.694]                     if (exists("sendData", mode = "function", 
[13:24:01.694]                       envir = ns)) {
[13:24:01.694]                       parallel_sendData <- get("sendData", mode = "function", 
[13:24:01.694]                         envir = ns)
[13:24:01.694]                       envir <- sys.frame(frame)
[13:24:01.694]                       master <- NULL
[13:24:01.694]                       while (!identical(envir, .GlobalEnv) && 
[13:24:01.694]                         !identical(envir, emptyenv())) {
[13:24:01.694]                         if (exists("master", mode = "list", envir = envir, 
[13:24:01.694]                           inherits = FALSE)) {
[13:24:01.694]                           master <- get("master", mode = "list", 
[13:24:01.694]                             envir = envir, inherits = FALSE)
[13:24:01.694]                           if (inherits(master, c("SOCKnode", 
[13:24:01.694]                             "SOCK0node"))) {
[13:24:01.694]                             sendCondition <<- function(cond) {
[13:24:01.694]                               data <- list(type = "VALUE", value = cond, 
[13:24:01.694]                                 success = TRUE)
[13:24:01.694]                               parallel_sendData(master, data)
[13:24:01.694]                             }
[13:24:01.694]                             return(sendCondition)
[13:24:01.694]                           }
[13:24:01.694]                         }
[13:24:01.694]                         frame <- frame + 1L
[13:24:01.694]                         envir <- sys.frame(frame)
[13:24:01.694]                       }
[13:24:01.694]                     }
[13:24:01.694]                     sendCondition <<- function(cond) NULL
[13:24:01.694]                   }
[13:24:01.694]                 })
[13:24:01.694]                 withCallingHandlers({
[13:24:01.694]                   {
[13:24:01.694]                     value(future(subset(data, a == 2)))
[13:24:01.694]                   }
[13:24:01.694]                 }, immediateCondition = function(cond) {
[13:24:01.694]                   sendCondition <- ...future.makeSendCondition()
[13:24:01.694]                   sendCondition(cond)
[13:24:01.694]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:24:01.694]                   {
[13:24:01.694]                     inherits <- base::inherits
[13:24:01.694]                     invokeRestart <- base::invokeRestart
[13:24:01.694]                     is.null <- base::is.null
[13:24:01.694]                     muffled <- FALSE
[13:24:01.694]                     if (inherits(cond, "message")) {
[13:24:01.694]                       muffled <- grepl(pattern, "muffleMessage")
[13:24:01.694]                       if (muffled) 
[13:24:01.694]                         invokeRestart("muffleMessage")
[13:24:01.694]                     }
[13:24:01.694]                     else if (inherits(cond, "warning")) {
[13:24:01.694]                       muffled <- grepl(pattern, "muffleWarning")
[13:24:01.694]                       if (muffled) 
[13:24:01.694]                         invokeRestart("muffleWarning")
[13:24:01.694]                     }
[13:24:01.694]                     else if (inherits(cond, "condition")) {
[13:24:01.694]                       if (!is.null(pattern)) {
[13:24:01.694]                         computeRestarts <- base::computeRestarts
[13:24:01.694]                         grepl <- base::grepl
[13:24:01.694]                         restarts <- computeRestarts(cond)
[13:24:01.694]                         for (restart in restarts) {
[13:24:01.694]                           name <- restart$name
[13:24:01.694]                           if (is.null(name)) 
[13:24:01.694]                             next
[13:24:01.694]                           if (!grepl(pattern, name)) 
[13:24:01.694]                             next
[13:24:01.694]                           invokeRestart(restart)
[13:24:01.694]                           muffled <- TRUE
[13:24:01.694]                           break
[13:24:01.694]                         }
[13:24:01.694]                       }
[13:24:01.694]                     }
[13:24:01.694]                     invisible(muffled)
[13:24:01.694]                   }
[13:24:01.694]                   muffleCondition(cond)
[13:24:01.694]                 })
[13:24:01.694]             }))
[13:24:01.694]             future::FutureResult(value = ...future.value$value, 
[13:24:01.694]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:24:01.694]                   ...future.rng), globalenv = if (FALSE) 
[13:24:01.694]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:24:01.694]                     ...future.globalenv.names))
[13:24:01.694]                 else NULL, started = ...future.startTime, version = "1.8")
[13:24:01.694]         }, condition = base::local({
[13:24:01.694]             c <- base::c
[13:24:01.694]             inherits <- base::inherits
[13:24:01.694]             invokeRestart <- base::invokeRestart
[13:24:01.694]             length <- base::length
[13:24:01.694]             list <- base::list
[13:24:01.694]             seq.int <- base::seq.int
[13:24:01.694]             signalCondition <- base::signalCondition
[13:24:01.694]             sys.calls <- base::sys.calls
[13:24:01.694]             `[[` <- base::`[[`
[13:24:01.694]             `+` <- base::`+`
[13:24:01.694]             `<<-` <- base::`<<-`
[13:24:01.694]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:24:01.694]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:24:01.694]                   3L)]
[13:24:01.694]             }
[13:24:01.694]             function(cond) {
[13:24:01.694]                 is_error <- inherits(cond, "error")
[13:24:01.694]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:24:01.694]                   NULL)
[13:24:01.694]                 if (is_error) {
[13:24:01.694]                   sessionInformation <- function() {
[13:24:01.694]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:24:01.694]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:24:01.694]                       search = base::search(), system = base::Sys.info())
[13:24:01.694]                   }
[13:24:01.694]                   ...future.conditions[[length(...future.conditions) + 
[13:24:01.694]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:24:01.694]                     cond$call), session = sessionInformation(), 
[13:24:01.694]                     timestamp = base::Sys.time(), signaled = 0L)
[13:24:01.694]                   signalCondition(cond)
[13:24:01.694]                 }
[13:24:01.694]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:24:01.694]                 "immediateCondition"))) {
[13:24:01.694]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:24:01.694]                   ...future.conditions[[length(...future.conditions) + 
[13:24:01.694]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:24:01.694]                   if (TRUE && !signal) {
[13:24:01.694]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:24:01.694]                     {
[13:24:01.694]                       inherits <- base::inherits
[13:24:01.694]                       invokeRestart <- base::invokeRestart
[13:24:01.694]                       is.null <- base::is.null
[13:24:01.694]                       muffled <- FALSE
[13:24:01.694]                       if (inherits(cond, "message")) {
[13:24:01.694]                         muffled <- grepl(pattern, "muffleMessage")
[13:24:01.694]                         if (muffled) 
[13:24:01.694]                           invokeRestart("muffleMessage")
[13:24:01.694]                       }
[13:24:01.694]                       else if (inherits(cond, "warning")) {
[13:24:01.694]                         muffled <- grepl(pattern, "muffleWarning")
[13:24:01.694]                         if (muffled) 
[13:24:01.694]                           invokeRestart("muffleWarning")
[13:24:01.694]                       }
[13:24:01.694]                       else if (inherits(cond, "condition")) {
[13:24:01.694]                         if (!is.null(pattern)) {
[13:24:01.694]                           computeRestarts <- base::computeRestarts
[13:24:01.694]                           grepl <- base::grepl
[13:24:01.694]                           restarts <- computeRestarts(cond)
[13:24:01.694]                           for (restart in restarts) {
[13:24:01.694]                             name <- restart$name
[13:24:01.694]                             if (is.null(name)) 
[13:24:01.694]                               next
[13:24:01.694]                             if (!grepl(pattern, name)) 
[13:24:01.694]                               next
[13:24:01.694]                             invokeRestart(restart)
[13:24:01.694]                             muffled <- TRUE
[13:24:01.694]                             break
[13:24:01.694]                           }
[13:24:01.694]                         }
[13:24:01.694]                       }
[13:24:01.694]                       invisible(muffled)
[13:24:01.694]                     }
[13:24:01.694]                     muffleCondition(cond, pattern = "^muffle")
[13:24:01.694]                   }
[13:24:01.694]                 }
[13:24:01.694]                 else {
[13:24:01.694]                   if (TRUE) {
[13:24:01.694]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:24:01.694]                     {
[13:24:01.694]                       inherits <- base::inherits
[13:24:01.694]                       invokeRestart <- base::invokeRestart
[13:24:01.694]                       is.null <- base::is.null
[13:24:01.694]                       muffled <- FALSE
[13:24:01.694]                       if (inherits(cond, "message")) {
[13:24:01.694]                         muffled <- grepl(pattern, "muffleMessage")
[13:24:01.694]                         if (muffled) 
[13:24:01.694]                           invokeRestart("muffleMessage")
[13:24:01.694]                       }
[13:24:01.694]                       else if (inherits(cond, "warning")) {
[13:24:01.694]                         muffled <- grepl(pattern, "muffleWarning")
[13:24:01.694]                         if (muffled) 
[13:24:01.694]                           invokeRestart("muffleWarning")
[13:24:01.694]                       }
[13:24:01.694]                       else if (inherits(cond, "condition")) {
[13:24:01.694]                         if (!is.null(pattern)) {
[13:24:01.694]                           computeRestarts <- base::computeRestarts
[13:24:01.694]                           grepl <- base::grepl
[13:24:01.694]                           restarts <- computeRestarts(cond)
[13:24:01.694]                           for (restart in restarts) {
[13:24:01.694]                             name <- restart$name
[13:24:01.694]                             if (is.null(name)) 
[13:24:01.694]                               next
[13:24:01.694]                             if (!grepl(pattern, name)) 
[13:24:01.694]                               next
[13:24:01.694]                             invokeRestart(restart)
[13:24:01.694]                             muffled <- TRUE
[13:24:01.694]                             break
[13:24:01.694]                           }
[13:24:01.694]                         }
[13:24:01.694]                       }
[13:24:01.694]                       invisible(muffled)
[13:24:01.694]                     }
[13:24:01.694]                     muffleCondition(cond, pattern = "^muffle")
[13:24:01.694]                   }
[13:24:01.694]                 }
[13:24:01.694]             }
[13:24:01.694]         }))
[13:24:01.694]     }, error = function(ex) {
[13:24:01.694]         base::structure(base::list(value = NULL, visible = NULL, 
[13:24:01.694]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:24:01.694]                 ...future.rng), started = ...future.startTime, 
[13:24:01.694]             finished = Sys.time(), session_uuid = NA_character_, 
[13:24:01.694]             version = "1.8"), class = "FutureResult")
[13:24:01.694]     }, finally = {
[13:24:01.694]         if (!identical(...future.workdir, getwd())) 
[13:24:01.694]             setwd(...future.workdir)
[13:24:01.694]         {
[13:24:01.694]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:24:01.694]                 ...future.oldOptions$nwarnings <- NULL
[13:24:01.694]             }
[13:24:01.694]             base::options(...future.oldOptions)
[13:24:01.694]             if (.Platform$OS.type == "windows") {
[13:24:01.694]                 old_names <- names(...future.oldEnvVars)
[13:24:01.694]                 envs <- base::Sys.getenv()
[13:24:01.694]                 names <- names(envs)
[13:24:01.694]                 common <- intersect(names, old_names)
[13:24:01.694]                 added <- setdiff(names, old_names)
[13:24:01.694]                 removed <- setdiff(old_names, names)
[13:24:01.694]                 changed <- common[...future.oldEnvVars[common] != 
[13:24:01.694]                   envs[common]]
[13:24:01.694]                 NAMES <- toupper(changed)
[13:24:01.694]                 args <- list()
[13:24:01.694]                 for (kk in seq_along(NAMES)) {
[13:24:01.694]                   name <- changed[[kk]]
[13:24:01.694]                   NAME <- NAMES[[kk]]
[13:24:01.694]                   if (name != NAME && is.element(NAME, old_names)) 
[13:24:01.694]                     next
[13:24:01.694]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:24:01.694]                 }
[13:24:01.694]                 NAMES <- toupper(added)
[13:24:01.694]                 for (kk in seq_along(NAMES)) {
[13:24:01.694]                   name <- added[[kk]]
[13:24:01.694]                   NAME <- NAMES[[kk]]
[13:24:01.694]                   if (name != NAME && is.element(NAME, old_names)) 
[13:24:01.694]                     next
[13:24:01.694]                   args[[name]] <- ""
[13:24:01.694]                 }
[13:24:01.694]                 NAMES <- toupper(removed)
[13:24:01.694]                 for (kk in seq_along(NAMES)) {
[13:24:01.694]                   name <- removed[[kk]]
[13:24:01.694]                   NAME <- NAMES[[kk]]
[13:24:01.694]                   if (name != NAME && is.element(NAME, old_names)) 
[13:24:01.694]                     next
[13:24:01.694]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:24:01.694]                 }
[13:24:01.694]                 if (length(args) > 0) 
[13:24:01.694]                   base::do.call(base::Sys.setenv, args = args)
[13:24:01.694]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:24:01.694]             }
[13:24:01.694]             else {
[13:24:01.694]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:24:01.694]             }
[13:24:01.694]             {
[13:24:01.694]                 if (base::length(...future.futureOptionsAdded) > 
[13:24:01.694]                   0L) {
[13:24:01.694]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:24:01.694]                   base::names(opts) <- ...future.futureOptionsAdded
[13:24:01.694]                   base::options(opts)
[13:24:01.694]                 }
[13:24:01.694]                 {
[13:24:01.694]                   {
[13:24:01.694]                     base::options(mc.cores = ...future.mc.cores.old)
[13:24:01.694]                     NULL
[13:24:01.694]                   }
[13:24:01.694]                   options(future.plan = NULL)
[13:24:01.694]                   if (is.na(NA_character_)) 
[13:24:01.694]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:24:01.694]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:24:01.694]                   future::plan(list(a = function (..., workers = availableCores(), 
[13:24:01.694]                     lazy = FALSE, rscript_libs = .libPaths(), 
[13:24:01.694]                     envir = parent.frame()) 
[13:24:01.694]                   {
[13:24:01.694]                     if (is.function(workers)) 
[13:24:01.694]                       workers <- workers()
[13:24:01.694]                     workers <- structure(as.integer(workers), 
[13:24:01.694]                       class = class(workers))
[13:24:01.694]                     stop_if_not(length(workers) == 1, is.finite(workers), 
[13:24:01.694]                       workers >= 1)
[13:24:01.694]                     if (workers == 1L && !inherits(workers, "AsIs")) {
[13:24:01.694]                       return(sequential(..., lazy = TRUE, envir = envir))
[13:24:01.694]                     }
[13:24:01.694]                     future <- MultisessionFuture(..., workers = workers, 
[13:24:01.694]                       lazy = lazy, rscript_libs = rscript_libs, 
[13:24:01.694]                       envir = envir)
[13:24:01.694]                     if (!future$lazy) 
[13:24:01.694]                       future <- run(future)
[13:24:01.694]                     invisible(future)
[13:24:01.694]                   }, b = function (..., workers = availableCores(), 
[13:24:01.694]                     lazy = FALSE, rscript_libs = .libPaths(), 
[13:24:01.694]                     envir = parent.frame()) 
[13:24:01.694]                   {
[13:24:01.694]                     if (is.function(workers)) 
[13:24:01.694]                       workers <- workers()
[13:24:01.694]                     workers <- structure(as.integer(workers), 
[13:24:01.694]                       class = class(workers))
[13:24:01.694]                     stop_if_not(length(workers) == 1, is.finite(workers), 
[13:24:01.694]                       workers >= 1)
[13:24:01.694]                     if (workers == 1L && !inherits(workers, "AsIs")) {
[13:24:01.694]                       return(sequential(..., lazy = TRUE, envir = envir))
[13:24:01.694]                     }
[13:24:01.694]                     future <- MultisessionFuture(..., workers = workers, 
[13:24:01.694]                       lazy = lazy, rscript_libs = rscript_libs, 
[13:24:01.694]                       envir = envir)
[13:24:01.694]                     if (!future$lazy) 
[13:24:01.694]                       future <- run(future)
[13:24:01.694]                     invisible(future)
[13:24:01.694]                   }), .cleanup = FALSE, .init = FALSE)
[13:24:01.694]                 }
[13:24:01.694]             }
[13:24:01.694]         }
[13:24:01.694]     })
[13:24:01.694]     if (TRUE) {
[13:24:01.694]         base::sink(type = "output", split = FALSE)
[13:24:01.694]         if (TRUE) {
[13:24:01.694]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:24:01.694]         }
[13:24:01.694]         else {
[13:24:01.694]             ...future.result["stdout"] <- base::list(NULL)
[13:24:01.694]         }
[13:24:01.694]         base::close(...future.stdout)
[13:24:01.694]         ...future.stdout <- NULL
[13:24:01.694]     }
[13:24:01.694]     ...future.result$conditions <- ...future.conditions
[13:24:01.694]     ...future.result$finished <- base::Sys.time()
[13:24:01.694]     ...future.result
[13:24:01.694] }
[13:24:01.697] Exporting 1 global objects (128 bytes) to cluster node #1 ...
[13:24:01.697] Exporting ‘data’ (128 bytes) to cluster node #1 ...
[13:24:01.697] Exporting ‘data’ (128 bytes) to cluster node #1 ... DONE
[13:24:01.698] Exporting 1 global objects (128 bytes) to cluster node #1 ... DONE
[13:24:01.698] MultisessionFuture started
[13:24:01.698] - Launch lazy future ... done
[13:24:01.699] run() for ‘MultisessionFuture’ ... done
[13:24:01.699] result() for ClusterFuture ...
[13:24:01.699] receiveMessageFromWorker() for ClusterFuture ...
[13:24:01.699] - Validating connection of MultisessionFuture
[13:24:01.762] - received message: FutureResult
[13:24:01.762] - Received FutureResult
[13:24:01.762] - Erased future from FutureRegistry
[13:24:01.763] result() for ClusterFuture ...
[13:24:01.763] - result already collected: FutureResult
[13:24:01.763] result() for ClusterFuture ... done
[13:24:01.763] receiveMessageFromWorker() for ClusterFuture ... done
[13:24:01.763] result() for ClusterFuture ... done
[13:24:01.763] result() for ClusterFuture ...
[13:24:01.763] - result already collected: FutureResult
[13:24:01.763] result() for ClusterFuture ... done
- plan(list('multisession', 'multisession')) ... DONE
> 
> message("*** Nested futures ... DONE")
*** Nested futures ... DONE
> 
> source("incl/end.R")
[13:24:01.764] plan(): Setting new future strategy stack:
[13:24:01.764] List of future strategies:
[13:24:01.764] 1. FutureStrategy:
[13:24:01.764]    - args: function (..., envir = parent.frame())
[13:24:01.764]    - tweaked: FALSE
[13:24:01.764]    - call: future::plan(oplan)
[13:24:01.765] plan(): nbrOfWorkers() = 1
> 
