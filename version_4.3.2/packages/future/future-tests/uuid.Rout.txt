
R version 4.3.2 (2023-10-31) -- "Eye Holes"
Copyright (C) 2023 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> source("incl/start.R")
[13:25:15.061] plan(): Setting new future strategy stack:
[13:25:15.061] List of future strategies:
[13:25:15.061] 1. sequential:
[13:25:15.061]    - args: function (..., envir = parent.frame())
[13:25:15.061]    - tweaked: FALSE
[13:25:15.061]    - call: future::plan("sequential")
[13:25:15.075] plan(): nbrOfWorkers() = 1
> session_uuid <- future:::session_uuid
> 
> message("*** session_uuid() ...")
*** session_uuid() ...
> 
> id0 <- session_uuid()
> print(id0)
[1] "9863b294-e2ac-b75a-0488-946db7be0dcd"
attr(,"source")
attr(,"source")$host
      HOSTNAME 
"47b98e4ec3a9" 

attr(,"source")$info
                                              sysname 
                                              "Linux" 
                                              release 
                                   "6.5.0-1025-azure" 
                                              version 
"#26~22.04.1-Ubuntu SMP Thu Jul 11 22:33:04 UTC 2024" 
                                             nodename 
                                       "47b98e4ec3a9" 
                                              machine 
                                             "x86_64" 
                                                login 
                                            "unknown" 
                                                 user 
                                               "root" 
                                       effective_user 
                                               "root" 

attr(,"source")$pid
[1] 93852

attr(,"source")$time
[1] "2025-01-07 13:25:15 UTC"

attr(,"source")$random
[1] 2147483647

> 
> ## Reset session UUID (hack)
> environment(session_uuid)$uuids <- list()
> 
> id <- session_uuid()
> print(id)
[1] "fb41d4c8-82c9-6ec8-ece9-544b66ed968f"
attr(,"source")
attr(,"source")$host
      HOSTNAME 
"47b98e4ec3a9" 

attr(,"source")$info
                                              sysname 
                                              "Linux" 
                                              release 
                                   "6.5.0-1025-azure" 
                                              version 
"#26~22.04.1-Ubuntu SMP Thu Jul 11 22:33:04 UTC 2024" 
                                             nodename 
                                       "47b98e4ec3a9" 
                                              machine 
                                             "x86_64" 
                                                login 
                                            "unknown" 
                                                 user 
                                               "root" 
                                       effective_user 
                                               "root" 

attr(,"source")$pid
[1] 93852

attr(,"source")$time
[1] "2025-01-07 13:25:15 UTC"

attr(,"source")$random
[1] 2147483647

> stopifnot(id != id0)
> 
> ## Assert that forked child processes get a unique session id
> ## Issue: https://github.com/HenrikBengtsson/future/issues/187
> if (supportsMulticore()) {
+   plan(multicore, workers = 2L)
+   fs <- lapply(1:2, FUN = function(i) {
+     future({
+       Sys.sleep(0.2)
+       session_uuid()
+     })
+   })
+   ids <- unlist(value(fs))
+   print(ids)
+   stopifnot(all(ids != id), length(unique(ids)) == 2L)
+ }
[13:25:15.087] plan(): Setting new future strategy stack:
[13:25:15.087] List of future strategies:
[13:25:15.087] 1. multicore:
[13:25:15.087]    - args: function (..., workers = 2L, envir = parent.frame())
[13:25:15.087]    - tweaked: TRUE
[13:25:15.087]    - call: plan(multicore, workers = 2L)
[13:25:15.098] plan(): nbrOfWorkers() = 2
[13:25:15.099] getGlobalsAndPackages() ...
[13:25:15.099] Searching for globals...
[13:25:15.114] - globals found: [28] ‘{’, ‘Sys.sleep’, ‘session_uuid’, ‘Sys.getpid’, ‘<-’, ‘as.character’, ‘[[’, ‘uuids’, ‘if’, ‘!’, ‘is.null’, ‘attr’, ‘attr<-’, ‘return’, ‘Sys.info’, ‘Sys.getenv’, ‘c’, ‘[’, ‘nzchar’, ‘==’, ‘length’, ‘list’, ‘Sys.time’, ‘stealth_sample’, ‘$’, ‘.Machine’, ‘<<-’, ‘[[<-’
[13:25:15.114] Searching for globals ... DONE
[13:25:15.114] Resolving globals: FALSE
[13:25:15.116] The total size of the 3 globals is 77.30 KiB (79160 bytes)
[13:25:15.116] The total size of the 3 globals exported for future expression (‘{; Sys.sleep(0.2); session_uuid(); }’) is 77.30 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are three globals: ‘stealth_sample’ (61.89 KiB of class ‘function’), ‘session_uuid’ (12.55 KiB of class ‘function’) and ‘uuids’ (2.87 KiB of class ‘list’)
[13:25:15.116] - globals: [3] ‘session_uuid’, ‘uuids’, ‘stealth_sample’
[13:25:15.117] - packages: [1] ‘future’
[13:25:15.117] getGlobalsAndPackages() ... DONE
[13:25:15.117] run() for ‘Future’ ...
[13:25:15.118] - state: ‘created’
[13:25:15.118] - Future backend: ‘FutureStrategy’, ‘tweaked’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[13:25:15.118] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:25:15.118] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[13:25:15.118]   - Field: ‘label’
[13:25:15.119]   - Field: ‘local’
[13:25:15.119]   - Field: ‘owner’
[13:25:15.119]   - Field: ‘envir’
[13:25:15.119]   - Field: ‘workers’
[13:25:15.119]   - Field: ‘packages’
[13:25:15.119]   - Field: ‘gc’
[13:25:15.119]   - Field: ‘job’
[13:25:15.119]   - Field: ‘conditions’
[13:25:15.119]   - Field: ‘expr’
[13:25:15.119]   - Field: ‘uuid’
[13:25:15.120]   - Field: ‘seed’
[13:25:15.120]   - Field: ‘version’
[13:25:15.120]   - Field: ‘result’
[13:25:15.120]   - Field: ‘asynchronous’
[13:25:15.120]   - Field: ‘calls’
[13:25:15.120]   - Field: ‘globals’
[13:25:15.120]   - Field: ‘stdout’
[13:25:15.120]   - Field: ‘earlySignal’
[13:25:15.120]   - Field: ‘lazy’
[13:25:15.120]   - Field: ‘state’
[13:25:15.120] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[13:25:15.121] - Launch lazy future ...
[13:25:15.122] Packages needed by the future expression (n = 1): ‘future’
[13:25:15.122] Packages needed by future strategies (n = 0): <none>
[13:25:15.123] {
[13:25:15.123]     {
[13:25:15.123]         {
[13:25:15.123]             ...future.startTime <- base::Sys.time()
[13:25:15.123]             {
[13:25:15.123]                 {
[13:25:15.123]                   {
[13:25:15.123]                     {
[13:25:15.123]                       {
[13:25:15.123]                         base::local({
[13:25:15.123]                           has_future <- base::requireNamespace("future", 
[13:25:15.123]                             quietly = TRUE)
[13:25:15.123]                           if (has_future) {
[13:25:15.123]                             ns <- base::getNamespace("future")
[13:25:15.123]                             version <- ns[[".package"]][["version"]]
[13:25:15.123]                             if (is.null(version)) 
[13:25:15.123]                               version <- utils::packageVersion("future")
[13:25:15.123]                           }
[13:25:15.123]                           else {
[13:25:15.123]                             version <- NULL
[13:25:15.123]                           }
[13:25:15.123]                           if (!has_future || version < "1.8.0") {
[13:25:15.123]                             info <- base::c(r_version = base::gsub("R version ", 
[13:25:15.123]                               "", base::R.version$version.string), 
[13:25:15.123]                               platform = base::sprintf("%s (%s-bit)", 
[13:25:15.123]                                 base::R.version$platform, 8 * 
[13:25:15.123]                                   base::.Machine$sizeof.pointer), 
[13:25:15.123]                               os = base::paste(base::Sys.info()[base::c("sysname", 
[13:25:15.123]                                 "release", "version")], collapse = " "), 
[13:25:15.123]                               hostname = base::Sys.info()[["nodename"]])
[13:25:15.123]                             info <- base::sprintf("%s: %s", base::names(info), 
[13:25:15.123]                               info)
[13:25:15.123]                             info <- base::paste(info, collapse = "; ")
[13:25:15.123]                             if (!has_future) {
[13:25:15.123]                               msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:25:15.123]                                 info)
[13:25:15.123]                             }
[13:25:15.123]                             else {
[13:25:15.123]                               msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:25:15.123]                                 info, version)
[13:25:15.123]                             }
[13:25:15.123]                             base::stop(msg)
[13:25:15.123]                           }
[13:25:15.123]                         })
[13:25:15.123]                       }
[13:25:15.123]                       ...future.mc.cores.old <- base::getOption("mc.cores")
[13:25:15.123]                       base::options(mc.cores = 1L)
[13:25:15.123]                     }
[13:25:15.123]                     base::local({
[13:25:15.123]                       for (pkg in "future") {
[13:25:15.123]                         base::loadNamespace(pkg)
[13:25:15.123]                         base::library(pkg, character.only = TRUE)
[13:25:15.123]                       }
[13:25:15.123]                     })
[13:25:15.123]                   }
[13:25:15.123]                   options(future.plan = NULL)
[13:25:15.123]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:25:15.123]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:25:15.123]                 }
[13:25:15.123]                 ...future.workdir <- getwd()
[13:25:15.123]             }
[13:25:15.123]             ...future.oldOptions <- base::as.list(base::.Options)
[13:25:15.123]             ...future.oldEnvVars <- base::Sys.getenv()
[13:25:15.123]         }
[13:25:15.123]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:25:15.123]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:25:15.123]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:25:15.123]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:25:15.123]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:25:15.123]             future.stdout.windows.reencode = NULL, width = 80L)
[13:25:15.123]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:25:15.123]             base::names(...future.oldOptions))
[13:25:15.123]     }
[13:25:15.123]     if (FALSE) {
[13:25:15.123]     }
[13:25:15.123]     else {
[13:25:15.123]         if (TRUE) {
[13:25:15.123]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:25:15.123]                 open = "w")
[13:25:15.123]         }
[13:25:15.123]         else {
[13:25:15.123]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:25:15.123]                 windows = "NUL", "/dev/null"), open = "w")
[13:25:15.123]         }
[13:25:15.123]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:25:15.123]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:25:15.123]             base::sink(type = "output", split = FALSE)
[13:25:15.123]             base::close(...future.stdout)
[13:25:15.123]         }, add = TRUE)
[13:25:15.123]     }
[13:25:15.123]     ...future.frame <- base::sys.nframe()
[13:25:15.123]     ...future.conditions <- base::list()
[13:25:15.123]     ...future.rng <- base::globalenv()$.Random.seed
[13:25:15.123]     if (FALSE) {
[13:25:15.123]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:25:15.123]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:25:15.123]     }
[13:25:15.123]     ...future.result <- base::tryCatch({
[13:25:15.123]         base::withCallingHandlers({
[13:25:15.123]             ...future.value <- base::withVisible(base::local({
[13:25:15.123]                 withCallingHandlers({
[13:25:15.123]                   {
[13:25:15.123]                     Sys.sleep(0.2)
[13:25:15.123]                     session_uuid()
[13:25:15.123]                   }
[13:25:15.123]                 }, immediateCondition = function(cond) {
[13:25:15.123]                   save_rds <- function (object, pathname, ...) 
[13:25:15.123]                   {
[13:25:15.123]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[13:25:15.123]                     if (file_test("-f", pathname_tmp)) {
[13:25:15.123]                       fi_tmp <- file.info(pathname_tmp)
[13:25:15.123]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[13:25:15.123]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:25:15.123]                         fi_tmp[["mtime"]])
[13:25:15.123]                     }
[13:25:15.123]                     tryCatch({
[13:25:15.123]                       saveRDS(object, file = pathname_tmp, ...)
[13:25:15.123]                     }, error = function(ex) {
[13:25:15.123]                       msg <- conditionMessage(ex)
[13:25:15.123]                       fi_tmp <- file.info(pathname_tmp)
[13:25:15.123]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[13:25:15.123]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:25:15.123]                         fi_tmp[["mtime"]], msg)
[13:25:15.123]                       ex$message <- msg
[13:25:15.123]                       stop(ex)
[13:25:15.123]                     })
[13:25:15.123]                     stopifnot(file_test("-f", pathname_tmp))
[13:25:15.123]                     res <- file.rename(from = pathname_tmp, to = pathname)
[13:25:15.123]                     if (!res || file_test("-f", pathname_tmp)) {
[13:25:15.123]                       fi_tmp <- file.info(pathname_tmp)
[13:25:15.123]                       fi <- file.info(pathname)
[13:25:15.123]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[13:25:15.123]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:25:15.123]                         fi_tmp[["mtime"]], sQuote(pathname), 
[13:25:15.123]                         fi[["size"]], fi[["mtime"]])
[13:25:15.123]                       stop(msg)
[13:25:15.123]                     }
[13:25:15.123]                     invisible(pathname)
[13:25:15.123]                   }
[13:25:15.123]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[13:25:15.123]                     rootPath = tempdir()) 
[13:25:15.123]                   {
[13:25:15.123]                     obj <- list(time = Sys.time(), condition = cond)
[13:25:15.123]                     file <- tempfile(pattern = class(cond)[1], 
[13:25:15.123]                       tmpdir = path, fileext = ".rds")
[13:25:15.123]                     save_rds(obj, file)
[13:25:15.123]                   }
[13:25:15.123]                   saveImmediateCondition(cond, path = "/tmp/RtmpxN6ek1/.future/immediateConditions")
[13:25:15.123]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:25:15.123]                   {
[13:25:15.123]                     inherits <- base::inherits
[13:25:15.123]                     invokeRestart <- base::invokeRestart
[13:25:15.123]                     is.null <- base::is.null
[13:25:15.123]                     muffled <- FALSE
[13:25:15.123]                     if (inherits(cond, "message")) {
[13:25:15.123]                       muffled <- grepl(pattern, "muffleMessage")
[13:25:15.123]                       if (muffled) 
[13:25:15.123]                         invokeRestart("muffleMessage")
[13:25:15.123]                     }
[13:25:15.123]                     else if (inherits(cond, "warning")) {
[13:25:15.123]                       muffled <- grepl(pattern, "muffleWarning")
[13:25:15.123]                       if (muffled) 
[13:25:15.123]                         invokeRestart("muffleWarning")
[13:25:15.123]                     }
[13:25:15.123]                     else if (inherits(cond, "condition")) {
[13:25:15.123]                       if (!is.null(pattern)) {
[13:25:15.123]                         computeRestarts <- base::computeRestarts
[13:25:15.123]                         grepl <- base::grepl
[13:25:15.123]                         restarts <- computeRestarts(cond)
[13:25:15.123]                         for (restart in restarts) {
[13:25:15.123]                           name <- restart$name
[13:25:15.123]                           if (is.null(name)) 
[13:25:15.123]                             next
[13:25:15.123]                           if (!grepl(pattern, name)) 
[13:25:15.123]                             next
[13:25:15.123]                           invokeRestart(restart)
[13:25:15.123]                           muffled <- TRUE
[13:25:15.123]                           break
[13:25:15.123]                         }
[13:25:15.123]                       }
[13:25:15.123]                     }
[13:25:15.123]                     invisible(muffled)
[13:25:15.123]                   }
[13:25:15.123]                   muffleCondition(cond)
[13:25:15.123]                 })
[13:25:15.123]             }))
[13:25:15.123]             future::FutureResult(value = ...future.value$value, 
[13:25:15.123]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:25:15.123]                   ...future.rng), globalenv = if (FALSE) 
[13:25:15.123]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:25:15.123]                     ...future.globalenv.names))
[13:25:15.123]                 else NULL, started = ...future.startTime, version = "1.8")
[13:25:15.123]         }, condition = base::local({
[13:25:15.123]             c <- base::c
[13:25:15.123]             inherits <- base::inherits
[13:25:15.123]             invokeRestart <- base::invokeRestart
[13:25:15.123]             length <- base::length
[13:25:15.123]             list <- base::list
[13:25:15.123]             seq.int <- base::seq.int
[13:25:15.123]             signalCondition <- base::signalCondition
[13:25:15.123]             sys.calls <- base::sys.calls
[13:25:15.123]             `[[` <- base::`[[`
[13:25:15.123]             `+` <- base::`+`
[13:25:15.123]             `<<-` <- base::`<<-`
[13:25:15.123]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:25:15.123]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:25:15.123]                   3L)]
[13:25:15.123]             }
[13:25:15.123]             function(cond) {
[13:25:15.123]                 is_error <- inherits(cond, "error")
[13:25:15.123]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:25:15.123]                   NULL)
[13:25:15.123]                 if (is_error) {
[13:25:15.123]                   sessionInformation <- function() {
[13:25:15.123]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:25:15.123]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:25:15.123]                       search = base::search(), system = base::Sys.info())
[13:25:15.123]                   }
[13:25:15.123]                   ...future.conditions[[length(...future.conditions) + 
[13:25:15.123]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:25:15.123]                     cond$call), session = sessionInformation(), 
[13:25:15.123]                     timestamp = base::Sys.time(), signaled = 0L)
[13:25:15.123]                   signalCondition(cond)
[13:25:15.123]                 }
[13:25:15.123]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:25:15.123]                 "immediateCondition"))) {
[13:25:15.123]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:25:15.123]                   ...future.conditions[[length(...future.conditions) + 
[13:25:15.123]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:25:15.123]                   if (TRUE && !signal) {
[13:25:15.123]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:25:15.123]                     {
[13:25:15.123]                       inherits <- base::inherits
[13:25:15.123]                       invokeRestart <- base::invokeRestart
[13:25:15.123]                       is.null <- base::is.null
[13:25:15.123]                       muffled <- FALSE
[13:25:15.123]                       if (inherits(cond, "message")) {
[13:25:15.123]                         muffled <- grepl(pattern, "muffleMessage")
[13:25:15.123]                         if (muffled) 
[13:25:15.123]                           invokeRestart("muffleMessage")
[13:25:15.123]                       }
[13:25:15.123]                       else if (inherits(cond, "warning")) {
[13:25:15.123]                         muffled <- grepl(pattern, "muffleWarning")
[13:25:15.123]                         if (muffled) 
[13:25:15.123]                           invokeRestart("muffleWarning")
[13:25:15.123]                       }
[13:25:15.123]                       else if (inherits(cond, "condition")) {
[13:25:15.123]                         if (!is.null(pattern)) {
[13:25:15.123]                           computeRestarts <- base::computeRestarts
[13:25:15.123]                           grepl <- base::grepl
[13:25:15.123]                           restarts <- computeRestarts(cond)
[13:25:15.123]                           for (restart in restarts) {
[13:25:15.123]                             name <- restart$name
[13:25:15.123]                             if (is.null(name)) 
[13:25:15.123]                               next
[13:25:15.123]                             if (!grepl(pattern, name)) 
[13:25:15.123]                               next
[13:25:15.123]                             invokeRestart(restart)
[13:25:15.123]                             muffled <- TRUE
[13:25:15.123]                             break
[13:25:15.123]                           }
[13:25:15.123]                         }
[13:25:15.123]                       }
[13:25:15.123]                       invisible(muffled)
[13:25:15.123]                     }
[13:25:15.123]                     muffleCondition(cond, pattern = "^muffle")
[13:25:15.123]                   }
[13:25:15.123]                 }
[13:25:15.123]                 else {
[13:25:15.123]                   if (TRUE) {
[13:25:15.123]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:25:15.123]                     {
[13:25:15.123]                       inherits <- base::inherits
[13:25:15.123]                       invokeRestart <- base::invokeRestart
[13:25:15.123]                       is.null <- base::is.null
[13:25:15.123]                       muffled <- FALSE
[13:25:15.123]                       if (inherits(cond, "message")) {
[13:25:15.123]                         muffled <- grepl(pattern, "muffleMessage")
[13:25:15.123]                         if (muffled) 
[13:25:15.123]                           invokeRestart("muffleMessage")
[13:25:15.123]                       }
[13:25:15.123]                       else if (inherits(cond, "warning")) {
[13:25:15.123]                         muffled <- grepl(pattern, "muffleWarning")
[13:25:15.123]                         if (muffled) 
[13:25:15.123]                           invokeRestart("muffleWarning")
[13:25:15.123]                       }
[13:25:15.123]                       else if (inherits(cond, "condition")) {
[13:25:15.123]                         if (!is.null(pattern)) {
[13:25:15.123]                           computeRestarts <- base::computeRestarts
[13:25:15.123]                           grepl <- base::grepl
[13:25:15.123]                           restarts <- computeRestarts(cond)
[13:25:15.123]                           for (restart in restarts) {
[13:25:15.123]                             name <- restart$name
[13:25:15.123]                             if (is.null(name)) 
[13:25:15.123]                               next
[13:25:15.123]                             if (!grepl(pattern, name)) 
[13:25:15.123]                               next
[13:25:15.123]                             invokeRestart(restart)
[13:25:15.123]                             muffled <- TRUE
[13:25:15.123]                             break
[13:25:15.123]                           }
[13:25:15.123]                         }
[13:25:15.123]                       }
[13:25:15.123]                       invisible(muffled)
[13:25:15.123]                     }
[13:25:15.123]                     muffleCondition(cond, pattern = "^muffle")
[13:25:15.123]                   }
[13:25:15.123]                 }
[13:25:15.123]             }
[13:25:15.123]         }))
[13:25:15.123]     }, error = function(ex) {
[13:25:15.123]         base::structure(base::list(value = NULL, visible = NULL, 
[13:25:15.123]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:25:15.123]                 ...future.rng), started = ...future.startTime, 
[13:25:15.123]             finished = Sys.time(), session_uuid = NA_character_, 
[13:25:15.123]             version = "1.8"), class = "FutureResult")
[13:25:15.123]     }, finally = {
[13:25:15.123]         if (!identical(...future.workdir, getwd())) 
[13:25:15.123]             setwd(...future.workdir)
[13:25:15.123]         {
[13:25:15.123]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:25:15.123]                 ...future.oldOptions$nwarnings <- NULL
[13:25:15.123]             }
[13:25:15.123]             base::options(...future.oldOptions)
[13:25:15.123]             if (.Platform$OS.type == "windows") {
[13:25:15.123]                 old_names <- names(...future.oldEnvVars)
[13:25:15.123]                 envs <- base::Sys.getenv()
[13:25:15.123]                 names <- names(envs)
[13:25:15.123]                 common <- intersect(names, old_names)
[13:25:15.123]                 added <- setdiff(names, old_names)
[13:25:15.123]                 removed <- setdiff(old_names, names)
[13:25:15.123]                 changed <- common[...future.oldEnvVars[common] != 
[13:25:15.123]                   envs[common]]
[13:25:15.123]                 NAMES <- toupper(changed)
[13:25:15.123]                 args <- list()
[13:25:15.123]                 for (kk in seq_along(NAMES)) {
[13:25:15.123]                   name <- changed[[kk]]
[13:25:15.123]                   NAME <- NAMES[[kk]]
[13:25:15.123]                   if (name != NAME && is.element(NAME, old_names)) 
[13:25:15.123]                     next
[13:25:15.123]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:25:15.123]                 }
[13:25:15.123]                 NAMES <- toupper(added)
[13:25:15.123]                 for (kk in seq_along(NAMES)) {
[13:25:15.123]                   name <- added[[kk]]
[13:25:15.123]                   NAME <- NAMES[[kk]]
[13:25:15.123]                   if (name != NAME && is.element(NAME, old_names)) 
[13:25:15.123]                     next
[13:25:15.123]                   args[[name]] <- ""
[13:25:15.123]                 }
[13:25:15.123]                 NAMES <- toupper(removed)
[13:25:15.123]                 for (kk in seq_along(NAMES)) {
[13:25:15.123]                   name <- removed[[kk]]
[13:25:15.123]                   NAME <- NAMES[[kk]]
[13:25:15.123]                   if (name != NAME && is.element(NAME, old_names)) 
[13:25:15.123]                     next
[13:25:15.123]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:25:15.123]                 }
[13:25:15.123]                 if (length(args) > 0) 
[13:25:15.123]                   base::do.call(base::Sys.setenv, args = args)
[13:25:15.123]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:25:15.123]             }
[13:25:15.123]             else {
[13:25:15.123]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:25:15.123]             }
[13:25:15.123]             {
[13:25:15.123]                 if (base::length(...future.futureOptionsAdded) > 
[13:25:15.123]                   0L) {
[13:25:15.123]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:25:15.123]                   base::names(opts) <- ...future.futureOptionsAdded
[13:25:15.123]                   base::options(opts)
[13:25:15.123]                 }
[13:25:15.123]                 {
[13:25:15.123]                   {
[13:25:15.123]                     base::options(mc.cores = ...future.mc.cores.old)
[13:25:15.123]                     NULL
[13:25:15.123]                   }
[13:25:15.123]                   options(future.plan = NULL)
[13:25:15.123]                   if (is.na(NA_character_)) 
[13:25:15.123]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:25:15.123]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:25:15.123]                   future::plan(list(function (..., workers = 2L, 
[13:25:15.123]                     envir = parent.frame()) 
[13:25:15.123]                   strategy(..., workers = workers, envir = envir)), 
[13:25:15.123]                     .cleanup = FALSE, .init = FALSE)
[13:25:15.123]                 }
[13:25:15.123]             }
[13:25:15.123]         }
[13:25:15.123]     })
[13:25:15.123]     if (TRUE) {
[13:25:15.123]         base::sink(type = "output", split = FALSE)
[13:25:15.123]         if (TRUE) {
[13:25:15.123]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:25:15.123]         }
[13:25:15.123]         else {
[13:25:15.123]             ...future.result["stdout"] <- base::list(NULL)
[13:25:15.123]         }
[13:25:15.123]         base::close(...future.stdout)
[13:25:15.123]         ...future.stdout <- NULL
[13:25:15.123]     }
[13:25:15.123]     ...future.result$conditions <- ...future.conditions
[13:25:15.123]     ...future.result$finished <- base::Sys.time()
[13:25:15.123]     ...future.result
[13:25:15.123] }
[13:25:15.125] assign_globals() ...
[13:25:15.125] List of 3
[13:25:15.125]  $ session_uuid  :function (pid = Sys.getpid(), attributes = TRUE)  
[13:25:15.125]  $ uuids         :List of 1
[13:25:15.125]   ..$ 93852: chr "fb41d4c8-82c9-6ec8-ece9-544b66ed968f"
[13:25:15.125]   .. ..- attr(*, "source")=List of 5
[13:25:15.125]   .. .. ..$ host  : Named chr "47b98e4ec3a9"
[13:25:15.125]   .. .. .. ..- attr(*, "names")= chr "HOSTNAME"
[13:25:15.125]   .. .. ..$ info  : Named chr [1:8] "Linux" "6.5.0-1025-azure" "#26~22.04.1-Ubuntu SMP Thu Jul 11 22:33:04 UTC 2024" "47b98e4ec3a9" ...
[13:25:15.125]   .. .. .. ..- attr(*, "names")= chr [1:8] "sysname" "release" "version" "nodename" ...
[13:25:15.125]   .. .. ..$ pid   : int 93852
[13:25:15.125]   .. .. ..$ time  : POSIXct[1:1], format: "2025-01-07 13:25:15"
[13:25:15.125]   .. .. ..$ random: int 2147483647
[13:25:15.125]  $ stealth_sample:function (x, size = length(x), replace = FALSE, ...)  
[13:25:15.125]  - attr(*, "where")=List of 3
[13:25:15.125]   ..$ session_uuid  :<environment: R_EmptyEnv> 
[13:25:15.125]   ..$ uuids         :<environment: R_EmptyEnv> 
[13:25:15.125]   ..$ stealth_sample:<environment: R_EmptyEnv> 
[13:25:15.125]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[13:25:15.125]  - attr(*, "resolved")= logi FALSE
[13:25:15.125]  - attr(*, "total_size")= num 79160
[13:25:15.125]  - attr(*, "already-done")= logi TRUE
[13:25:15.133] - copied ‘session_uuid’ to environment
[13:25:15.133] - copied ‘uuids’ to environment
[13:25:15.134] - copied ‘stealth_sample’ to environment
[13:25:15.134] assign_globals() ... done
[13:25:15.134] requestCore(): workers = 2
[13:25:15.137] MulticoreFuture started
[13:25:15.137] - Launch lazy future ... done
[13:25:15.137] run() for ‘MulticoreFuture’ ... done
[13:25:15.138] plan(): Setting new future strategy stack:
[13:25:15.138] List of future strategies:
[13:25:15.138] 1. sequential:
[13:25:15.138]    - args: function (..., envir = parent.frame())
[13:25:15.138]    - tweaked: FALSE
[13:25:15.138]    - call: NULL
[13:25:15.139] plan(): nbrOfWorkers() = 1
[13:25:15.141] getGlobalsAndPackages() ...
[13:25:15.141] Searching for globals...
[13:25:15.158] - globals found: [28] ‘{’, ‘Sys.sleep’, ‘session_uuid’, ‘Sys.getpid’, ‘<-’, ‘as.character’, ‘[[’, ‘uuids’, ‘if’, ‘!’, ‘is.null’, ‘attr’, ‘attr<-’, ‘return’, ‘Sys.info’, ‘Sys.getenv’, ‘c’, ‘[’, ‘nzchar’, ‘==’, ‘length’, ‘list’, ‘Sys.time’, ‘stealth_sample’, ‘$’, ‘.Machine’, ‘<<-’, ‘[[<-’
[13:25:15.158] Searching for globals ... DONE
[13:25:15.158] Resolving globals: FALSE
[13:25:15.160] The total size of the 3 globals is 77.30 KiB (79160 bytes)
[13:25:15.161] The total size of the 3 globals exported for future expression (‘{; Sys.sleep(0.2); session_uuid(); }’) is 77.30 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are three globals: ‘stealth_sample’ (61.89 KiB of class ‘function’), ‘session_uuid’ (12.55 KiB of class ‘function’) and ‘uuids’ (2.87 KiB of class ‘list’)
[13:25:15.161] - globals: [3] ‘session_uuid’, ‘uuids’, ‘stealth_sample’
[13:25:15.161] - packages: [1] ‘future’
[13:25:15.161] getGlobalsAndPackages() ... DONE
[13:25:15.162] run() for ‘Future’ ...
[13:25:15.162] - state: ‘created’
[13:25:15.162] - Future backend: ‘FutureStrategy’, ‘tweaked’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[13:25:15.163] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:25:15.163] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[13:25:15.163]   - Field: ‘label’
[13:25:15.163]   - Field: ‘local’
[13:25:15.164]   - Field: ‘owner’
[13:25:15.164]   - Field: ‘envir’
[13:25:15.164]   - Field: ‘workers’
[13:25:15.164]   - Field: ‘packages’
[13:25:15.164]   - Field: ‘gc’
[13:25:15.164]   - Field: ‘job’
[13:25:15.164]   - Field: ‘conditions’
[13:25:15.164]   - Field: ‘expr’
[13:25:15.165]   - Field: ‘uuid’
[13:25:15.165]   - Field: ‘seed’
[13:25:15.165]   - Field: ‘version’
[13:25:15.165]   - Field: ‘result’
[13:25:15.165]   - Field: ‘asynchronous’
[13:25:15.165]   - Field: ‘calls’
[13:25:15.165]   - Field: ‘globals’
[13:25:15.165]   - Field: ‘stdout’
[13:25:15.166]   - Field: ‘earlySignal’
[13:25:15.166]   - Field: ‘lazy’
[13:25:15.166]   - Field: ‘state’
[13:25:15.166] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[13:25:15.166] - Launch lazy future ...
[13:25:15.166] Packages needed by the future expression (n = 1): ‘future’
[13:25:15.167] Packages needed by future strategies (n = 0): <none>
[13:25:15.167] {
[13:25:15.167]     {
[13:25:15.167]         {
[13:25:15.167]             ...future.startTime <- base::Sys.time()
[13:25:15.167]             {
[13:25:15.167]                 {
[13:25:15.167]                   {
[13:25:15.167]                     {
[13:25:15.167]                       {
[13:25:15.167]                         base::local({
[13:25:15.167]                           has_future <- base::requireNamespace("future", 
[13:25:15.167]                             quietly = TRUE)
[13:25:15.167]                           if (has_future) {
[13:25:15.167]                             ns <- base::getNamespace("future")
[13:25:15.167]                             version <- ns[[".package"]][["version"]]
[13:25:15.167]                             if (is.null(version)) 
[13:25:15.167]                               version <- utils::packageVersion("future")
[13:25:15.167]                           }
[13:25:15.167]                           else {
[13:25:15.167]                             version <- NULL
[13:25:15.167]                           }
[13:25:15.167]                           if (!has_future || version < "1.8.0") {
[13:25:15.167]                             info <- base::c(r_version = base::gsub("R version ", 
[13:25:15.167]                               "", base::R.version$version.string), 
[13:25:15.167]                               platform = base::sprintf("%s (%s-bit)", 
[13:25:15.167]                                 base::R.version$platform, 8 * 
[13:25:15.167]                                   base::.Machine$sizeof.pointer), 
[13:25:15.167]                               os = base::paste(base::Sys.info()[base::c("sysname", 
[13:25:15.167]                                 "release", "version")], collapse = " "), 
[13:25:15.167]                               hostname = base::Sys.info()[["nodename"]])
[13:25:15.167]                             info <- base::sprintf("%s: %s", base::names(info), 
[13:25:15.167]                               info)
[13:25:15.167]                             info <- base::paste(info, collapse = "; ")
[13:25:15.167]                             if (!has_future) {
[13:25:15.167]                               msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:25:15.167]                                 info)
[13:25:15.167]                             }
[13:25:15.167]                             else {
[13:25:15.167]                               msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:25:15.167]                                 info, version)
[13:25:15.167]                             }
[13:25:15.167]                             base::stop(msg)
[13:25:15.167]                           }
[13:25:15.167]                         })
[13:25:15.167]                       }
[13:25:15.167]                       ...future.mc.cores.old <- base::getOption("mc.cores")
[13:25:15.167]                       base::options(mc.cores = 1L)
[13:25:15.167]                     }
[13:25:15.167]                     base::local({
[13:25:15.167]                       for (pkg in "future") {
[13:25:15.167]                         base::loadNamespace(pkg)
[13:25:15.167]                         base::library(pkg, character.only = TRUE)
[13:25:15.167]                       }
[13:25:15.167]                     })
[13:25:15.167]                   }
[13:25:15.167]                   options(future.plan = NULL)
[13:25:15.167]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:25:15.167]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:25:15.167]                 }
[13:25:15.167]                 ...future.workdir <- getwd()
[13:25:15.167]             }
[13:25:15.167]             ...future.oldOptions <- base::as.list(base::.Options)
[13:25:15.167]             ...future.oldEnvVars <- base::Sys.getenv()
[13:25:15.167]         }
[13:25:15.167]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:25:15.167]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:25:15.167]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:25:15.167]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:25:15.167]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:25:15.167]             future.stdout.windows.reencode = NULL, width = 80L)
[13:25:15.167]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:25:15.167]             base::names(...future.oldOptions))
[13:25:15.167]     }
[13:25:15.167]     if (FALSE) {
[13:25:15.167]     }
[13:25:15.167]     else {
[13:25:15.167]         if (TRUE) {
[13:25:15.167]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:25:15.167]                 open = "w")
[13:25:15.167]         }
[13:25:15.167]         else {
[13:25:15.167]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:25:15.167]                 windows = "NUL", "/dev/null"), open = "w")
[13:25:15.167]         }
[13:25:15.167]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:25:15.167]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:25:15.167]             base::sink(type = "output", split = FALSE)
[13:25:15.167]             base::close(...future.stdout)
[13:25:15.167]         }, add = TRUE)
[13:25:15.167]     }
[13:25:15.167]     ...future.frame <- base::sys.nframe()
[13:25:15.167]     ...future.conditions <- base::list()
[13:25:15.167]     ...future.rng <- base::globalenv()$.Random.seed
[13:25:15.167]     if (FALSE) {
[13:25:15.167]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:25:15.167]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:25:15.167]     }
[13:25:15.167]     ...future.result <- base::tryCatch({
[13:25:15.167]         base::withCallingHandlers({
[13:25:15.167]             ...future.value <- base::withVisible(base::local({
[13:25:15.167]                 withCallingHandlers({
[13:25:15.167]                   {
[13:25:15.167]                     Sys.sleep(0.2)
[13:25:15.167]                     session_uuid()
[13:25:15.167]                   }
[13:25:15.167]                 }, immediateCondition = function(cond) {
[13:25:15.167]                   save_rds <- function (object, pathname, ...) 
[13:25:15.167]                   {
[13:25:15.167]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[13:25:15.167]                     if (file_test("-f", pathname_tmp)) {
[13:25:15.167]                       fi_tmp <- file.info(pathname_tmp)
[13:25:15.167]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[13:25:15.167]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:25:15.167]                         fi_tmp[["mtime"]])
[13:25:15.167]                     }
[13:25:15.167]                     tryCatch({
[13:25:15.167]                       saveRDS(object, file = pathname_tmp, ...)
[13:25:15.167]                     }, error = function(ex) {
[13:25:15.167]                       msg <- conditionMessage(ex)
[13:25:15.167]                       fi_tmp <- file.info(pathname_tmp)
[13:25:15.167]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[13:25:15.167]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:25:15.167]                         fi_tmp[["mtime"]], msg)
[13:25:15.167]                       ex$message <- msg
[13:25:15.167]                       stop(ex)
[13:25:15.167]                     })
[13:25:15.167]                     stopifnot(file_test("-f", pathname_tmp))
[13:25:15.167]                     res <- file.rename(from = pathname_tmp, to = pathname)
[13:25:15.167]                     if (!res || file_test("-f", pathname_tmp)) {
[13:25:15.167]                       fi_tmp <- file.info(pathname_tmp)
[13:25:15.167]                       fi <- file.info(pathname)
[13:25:15.167]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[13:25:15.167]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:25:15.167]                         fi_tmp[["mtime"]], sQuote(pathname), 
[13:25:15.167]                         fi[["size"]], fi[["mtime"]])
[13:25:15.167]                       stop(msg)
[13:25:15.167]                     }
[13:25:15.167]                     invisible(pathname)
[13:25:15.167]                   }
[13:25:15.167]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[13:25:15.167]                     rootPath = tempdir()) 
[13:25:15.167]                   {
[13:25:15.167]                     obj <- list(time = Sys.time(), condition = cond)
[13:25:15.167]                     file <- tempfile(pattern = class(cond)[1], 
[13:25:15.167]                       tmpdir = path, fileext = ".rds")
[13:25:15.167]                     save_rds(obj, file)
[13:25:15.167]                   }
[13:25:15.167]                   saveImmediateCondition(cond, path = "/tmp/RtmpxN6ek1/.future/immediateConditions")
[13:25:15.167]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:25:15.167]                   {
[13:25:15.167]                     inherits <- base::inherits
[13:25:15.167]                     invokeRestart <- base::invokeRestart
[13:25:15.167]                     is.null <- base::is.null
[13:25:15.167]                     muffled <- FALSE
[13:25:15.167]                     if (inherits(cond, "message")) {
[13:25:15.167]                       muffled <- grepl(pattern, "muffleMessage")
[13:25:15.167]                       if (muffled) 
[13:25:15.167]                         invokeRestart("muffleMessage")
[13:25:15.167]                     }
[13:25:15.167]                     else if (inherits(cond, "warning")) {
[13:25:15.167]                       muffled <- grepl(pattern, "muffleWarning")
[13:25:15.167]                       if (muffled) 
[13:25:15.167]                         invokeRestart("muffleWarning")
[13:25:15.167]                     }
[13:25:15.167]                     else if (inherits(cond, "condition")) {
[13:25:15.167]                       if (!is.null(pattern)) {
[13:25:15.167]                         computeRestarts <- base::computeRestarts
[13:25:15.167]                         grepl <- base::grepl
[13:25:15.167]                         restarts <- computeRestarts(cond)
[13:25:15.167]                         for (restart in restarts) {
[13:25:15.167]                           name <- restart$name
[13:25:15.167]                           if (is.null(name)) 
[13:25:15.167]                             next
[13:25:15.167]                           if (!grepl(pattern, name)) 
[13:25:15.167]                             next
[13:25:15.167]                           invokeRestart(restart)
[13:25:15.167]                           muffled <- TRUE
[13:25:15.167]                           break
[13:25:15.167]                         }
[13:25:15.167]                       }
[13:25:15.167]                     }
[13:25:15.167]                     invisible(muffled)
[13:25:15.167]                   }
[13:25:15.167]                   muffleCondition(cond)
[13:25:15.167]                 })
[13:25:15.167]             }))
[13:25:15.167]             future::FutureResult(value = ...future.value$value, 
[13:25:15.167]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:25:15.167]                   ...future.rng), globalenv = if (FALSE) 
[13:25:15.167]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:25:15.167]                     ...future.globalenv.names))
[13:25:15.167]                 else NULL, started = ...future.startTime, version = "1.8")
[13:25:15.167]         }, condition = base::local({
[13:25:15.167]             c <- base::c
[13:25:15.167]             inherits <- base::inherits
[13:25:15.167]             invokeRestart <- base::invokeRestart
[13:25:15.167]             length <- base::length
[13:25:15.167]             list <- base::list
[13:25:15.167]             seq.int <- base::seq.int
[13:25:15.167]             signalCondition <- base::signalCondition
[13:25:15.167]             sys.calls <- base::sys.calls
[13:25:15.167]             `[[` <- base::`[[`
[13:25:15.167]             `+` <- base::`+`
[13:25:15.167]             `<<-` <- base::`<<-`
[13:25:15.167]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:25:15.167]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:25:15.167]                   3L)]
[13:25:15.167]             }
[13:25:15.167]             function(cond) {
[13:25:15.167]                 is_error <- inherits(cond, "error")
[13:25:15.167]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:25:15.167]                   NULL)
[13:25:15.167]                 if (is_error) {
[13:25:15.167]                   sessionInformation <- function() {
[13:25:15.167]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:25:15.167]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:25:15.167]                       search = base::search(), system = base::Sys.info())
[13:25:15.167]                   }
[13:25:15.167]                   ...future.conditions[[length(...future.conditions) + 
[13:25:15.167]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:25:15.167]                     cond$call), session = sessionInformation(), 
[13:25:15.167]                     timestamp = base::Sys.time(), signaled = 0L)
[13:25:15.167]                   signalCondition(cond)
[13:25:15.167]                 }
[13:25:15.167]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:25:15.167]                 "immediateCondition"))) {
[13:25:15.167]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:25:15.167]                   ...future.conditions[[length(...future.conditions) + 
[13:25:15.167]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:25:15.167]                   if (TRUE && !signal) {
[13:25:15.167]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:25:15.167]                     {
[13:25:15.167]                       inherits <- base::inherits
[13:25:15.167]                       invokeRestart <- base::invokeRestart
[13:25:15.167]                       is.null <- base::is.null
[13:25:15.167]                       muffled <- FALSE
[13:25:15.167]                       if (inherits(cond, "message")) {
[13:25:15.167]                         muffled <- grepl(pattern, "muffleMessage")
[13:25:15.167]                         if (muffled) 
[13:25:15.167]                           invokeRestart("muffleMessage")
[13:25:15.167]                       }
[13:25:15.167]                       else if (inherits(cond, "warning")) {
[13:25:15.167]                         muffled <- grepl(pattern, "muffleWarning")
[13:25:15.167]                         if (muffled) 
[13:25:15.167]                           invokeRestart("muffleWarning")
[13:25:15.167]                       }
[13:25:15.167]                       else if (inherits(cond, "condition")) {
[13:25:15.167]                         if (!is.null(pattern)) {
[13:25:15.167]                           computeRestarts <- base::computeRestarts
[13:25:15.167]                           grepl <- base::grepl
[13:25:15.167]                           restarts <- computeRestarts(cond)
[13:25:15.167]                           for (restart in restarts) {
[13:25:15.167]                             name <- restart$name
[13:25:15.167]                             if (is.null(name)) 
[13:25:15.167]                               next
[13:25:15.167]                             if (!grepl(pattern, name)) 
[13:25:15.167]                               next
[13:25:15.167]                             invokeRestart(restart)
[13:25:15.167]                             muffled <- TRUE
[13:25:15.167]                             break
[13:25:15.167]                           }
[13:25:15.167]                         }
[13:25:15.167]                       }
[13:25:15.167]                       invisible(muffled)
[13:25:15.167]                     }
[13:25:15.167]                     muffleCondition(cond, pattern = "^muffle")
[13:25:15.167]                   }
[13:25:15.167]                 }
[13:25:15.167]                 else {
[13:25:15.167]                   if (TRUE) {
[13:25:15.167]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:25:15.167]                     {
[13:25:15.167]                       inherits <- base::inherits
[13:25:15.167]                       invokeRestart <- base::invokeRestart
[13:25:15.167]                       is.null <- base::is.null
[13:25:15.167]                       muffled <- FALSE
[13:25:15.167]                       if (inherits(cond, "message")) {
[13:25:15.167]                         muffled <- grepl(pattern, "muffleMessage")
[13:25:15.167]                         if (muffled) 
[13:25:15.167]                           invokeRestart("muffleMessage")
[13:25:15.167]                       }
[13:25:15.167]                       else if (inherits(cond, "warning")) {
[13:25:15.167]                         muffled <- grepl(pattern, "muffleWarning")
[13:25:15.167]                         if (muffled) 
[13:25:15.167]                           invokeRestart("muffleWarning")
[13:25:15.167]                       }
[13:25:15.167]                       else if (inherits(cond, "condition")) {
[13:25:15.167]                         if (!is.null(pattern)) {
[13:25:15.167]                           computeRestarts <- base::computeRestarts
[13:25:15.167]                           grepl <- base::grepl
[13:25:15.167]                           restarts <- computeRestarts(cond)
[13:25:15.167]                           for (restart in restarts) {
[13:25:15.167]                             name <- restart$name
[13:25:15.167]                             if (is.null(name)) 
[13:25:15.167]                               next
[13:25:15.167]                             if (!grepl(pattern, name)) 
[13:25:15.167]                               next
[13:25:15.167]                             invokeRestart(restart)
[13:25:15.167]                             muffled <- TRUE
[13:25:15.167]                             break
[13:25:15.167]                           }
[13:25:15.167]                         }
[13:25:15.167]                       }
[13:25:15.167]                       invisible(muffled)
[13:25:15.167]                     }
[13:25:15.167]                     muffleCondition(cond, pattern = "^muffle")
[13:25:15.167]                   }
[13:25:15.167]                 }
[13:25:15.167]             }
[13:25:15.167]         }))
[13:25:15.167]     }, error = function(ex) {
[13:25:15.167]         base::structure(base::list(value = NULL, visible = NULL, 
[13:25:15.167]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:25:15.167]                 ...future.rng), started = ...future.startTime, 
[13:25:15.167]             finished = Sys.time(), session_uuid = NA_character_, 
[13:25:15.167]             version = "1.8"), class = "FutureResult")
[13:25:15.167]     }, finally = {
[13:25:15.167]         if (!identical(...future.workdir, getwd())) 
[13:25:15.167]             setwd(...future.workdir)
[13:25:15.167]         {
[13:25:15.167]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:25:15.167]                 ...future.oldOptions$nwarnings <- NULL
[13:25:15.167]             }
[13:25:15.167]             base::options(...future.oldOptions)
[13:25:15.167]             if (.Platform$OS.type == "windows") {
[13:25:15.167]                 old_names <- names(...future.oldEnvVars)
[13:25:15.167]                 envs <- base::Sys.getenv()
[13:25:15.167]                 names <- names(envs)
[13:25:15.167]                 common <- intersect(names, old_names)
[13:25:15.167]                 added <- setdiff(names, old_names)
[13:25:15.167]                 removed <- setdiff(old_names, names)
[13:25:15.167]                 changed <- common[...future.oldEnvVars[common] != 
[13:25:15.167]                   envs[common]]
[13:25:15.167]                 NAMES <- toupper(changed)
[13:25:15.167]                 args <- list()
[13:25:15.167]                 for (kk in seq_along(NAMES)) {
[13:25:15.167]                   name <- changed[[kk]]
[13:25:15.167]                   NAME <- NAMES[[kk]]
[13:25:15.167]                   if (name != NAME && is.element(NAME, old_names)) 
[13:25:15.167]                     next
[13:25:15.167]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:25:15.167]                 }
[13:25:15.167]                 NAMES <- toupper(added)
[13:25:15.167]                 for (kk in seq_along(NAMES)) {
[13:25:15.167]                   name <- added[[kk]]
[13:25:15.167]                   NAME <- NAMES[[kk]]
[13:25:15.167]                   if (name != NAME && is.element(NAME, old_names)) 
[13:25:15.167]                     next
[13:25:15.167]                   args[[name]] <- ""
[13:25:15.167]                 }
[13:25:15.167]                 NAMES <- toupper(removed)
[13:25:15.167]                 for (kk in seq_along(NAMES)) {
[13:25:15.167]                   name <- removed[[kk]]
[13:25:15.167]                   NAME <- NAMES[[kk]]
[13:25:15.167]                   if (name != NAME && is.element(NAME, old_names)) 
[13:25:15.167]                     next
[13:25:15.167]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:25:15.167]                 }
[13:25:15.167]                 if (length(args) > 0) 
[13:25:15.167]                   base::do.call(base::Sys.setenv, args = args)
[13:25:15.167]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:25:15.167]             }
[13:25:15.167]             else {
[13:25:15.167]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:25:15.167]             }
[13:25:15.167]             {
[13:25:15.167]                 if (base::length(...future.futureOptionsAdded) > 
[13:25:15.167]                   0L) {
[13:25:15.167]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:25:15.167]                   base::names(opts) <- ...future.futureOptionsAdded
[13:25:15.167]                   base::options(opts)
[13:25:15.167]                 }
[13:25:15.167]                 {
[13:25:15.167]                   {
[13:25:15.167]                     base::options(mc.cores = ...future.mc.cores.old)
[13:25:15.167]                     NULL
[13:25:15.167]                   }
[13:25:15.167]                   options(future.plan = NULL)
[13:25:15.167]                   if (is.na(NA_character_)) 
[13:25:15.167]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:25:15.167]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:25:15.167]                   future::plan(list(function (..., workers = 2L, 
[13:25:15.167]                     envir = parent.frame()) 
[13:25:15.167]                   strategy(..., workers = workers, envir = envir)), 
[13:25:15.167]                     .cleanup = FALSE, .init = FALSE)
[13:25:15.167]                 }
[13:25:15.167]             }
[13:25:15.167]         }
[13:25:15.167]     })
[13:25:15.167]     if (TRUE) {
[13:25:15.167]         base::sink(type = "output", split = FALSE)
[13:25:15.167]         if (TRUE) {
[13:25:15.167]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:25:15.167]         }
[13:25:15.167]         else {
[13:25:15.167]             ...future.result["stdout"] <- base::list(NULL)
[13:25:15.167]         }
[13:25:15.167]         base::close(...future.stdout)
[13:25:15.167]         ...future.stdout <- NULL
[13:25:15.167]     }
[13:25:15.167]     ...future.result$conditions <- ...future.conditions
[13:25:15.167]     ...future.result$finished <- base::Sys.time()
[13:25:15.167]     ...future.result
[13:25:15.167] }
[13:25:15.170] assign_globals() ...
[13:25:15.170] List of 3
[13:25:15.170]  $ session_uuid  :function (pid = Sys.getpid(), attributes = TRUE)  
[13:25:15.170]  $ uuids         :List of 1
[13:25:15.170]   ..$ 93852: chr "fb41d4c8-82c9-6ec8-ece9-544b66ed968f"
[13:25:15.170]   .. ..- attr(*, "source")=List of 5
[13:25:15.170]   .. .. ..$ host  : Named chr "47b98e4ec3a9"
[13:25:15.170]   .. .. .. ..- attr(*, "names")= chr "HOSTNAME"
[13:25:15.170]   .. .. ..$ info  : Named chr [1:8] "Linux" "6.5.0-1025-azure" "#26~22.04.1-Ubuntu SMP Thu Jul 11 22:33:04 UTC 2024" "47b98e4ec3a9" ...
[13:25:15.170]   .. .. .. ..- attr(*, "names")= chr [1:8] "sysname" "release" "version" "nodename" ...
[13:25:15.170]   .. .. ..$ pid   : int 93852
[13:25:15.170]   .. .. ..$ time  : POSIXct[1:1], format: "2025-01-07 13:25:15"
[13:25:15.170]   .. .. ..$ random: int 2147483647
[13:25:15.170]  $ stealth_sample:function (x, size = length(x), replace = FALSE, ...)  
[13:25:15.170]  - attr(*, "where")=List of 3
[13:25:15.170]   ..$ session_uuid  :<environment: R_EmptyEnv> 
[13:25:15.170]   ..$ uuids         :<environment: R_EmptyEnv> 
[13:25:15.170]   ..$ stealth_sample:<environment: R_EmptyEnv> 
[13:25:15.170]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[13:25:15.170]  - attr(*, "resolved")= logi FALSE
[13:25:15.170]  - attr(*, "total_size")= num 79160
[13:25:15.170]  - attr(*, "already-done")= logi TRUE
[13:25:15.177] - copied ‘session_uuid’ to environment
[13:25:15.177] - copied ‘uuids’ to environment
[13:25:15.178] - copied ‘stealth_sample’ to environment
[13:25:15.178] assign_globals() ... done
[13:25:15.178] requestCore(): workers = 2
[13:25:15.182] MulticoreFuture started
[13:25:15.183] - Launch lazy future ... done
[13:25:15.183] run() for ‘MulticoreFuture’ ... done
[13:25:15.184] resolve() on list ...
[13:25:15.184] plan(): Setting new future strategy stack:
[13:25:15.184]  recursive: 0
[13:25:15.185]  length: 2
[13:25:15.184] List of future strategies:
[13:25:15.184] 1. sequential:
[13:25:15.184]    - args: function (..., envir = parent.frame())
[13:25:15.184]    - tweaked: FALSE
[13:25:15.184]    - call: NULL
[13:25:15.185] 
[13:25:15.185] plan(): nbrOfWorkers() = 1
[13:25:15.342] plan(): Setting new future strategy stack:
[13:25:15.342] List of future strategies:
[13:25:15.342] 1. multicore:
[13:25:15.342]    - args: function (..., workers = 2L, envir = parent.frame())
[13:25:15.342]    - tweaked: TRUE
[13:25:15.342]    - call: plan(multicore, workers = 2L)
[13:25:15.343] plan(): nbrOfWorkers() = 2
[13:25:15.344] Future #1
[13:25:15.345] result() for MulticoreFuture ...
[13:25:15.347] result() for MulticoreFuture ...
[13:25:15.347] result() for MulticoreFuture ... done
[13:25:15.347] result() for MulticoreFuture ... done
[13:25:15.347] result() for MulticoreFuture ...
[13:25:15.348] result() for MulticoreFuture ... done
[13:25:15.348] signalConditionsASAP(MulticoreFuture, pos=1) ...
[13:25:15.348] - nx: 2
[13:25:15.348] - relay: TRUE
[13:25:15.348] - stdout: TRUE
[13:25:15.348] - signal: TRUE
[13:25:15.348] - resignal: FALSE
[13:25:15.348] - force: TRUE
[13:25:15.349] - relayed: [n=2] FALSE, FALSE
[13:25:15.349] - queued futures: [n=2] FALSE, FALSE
[13:25:15.349]  - until=1
[13:25:15.349]  - relaying element #1
[13:25:15.349] result() for MulticoreFuture ...
[13:25:15.349] result() for MulticoreFuture ... done
[13:25:15.349] result() for MulticoreFuture ...
[13:25:15.349] result() for MulticoreFuture ... done
[13:25:15.350] result() for MulticoreFuture ...
[13:25:15.350] result() for MulticoreFuture ... done
[13:25:15.350] result() for MulticoreFuture ...
[13:25:15.350] result() for MulticoreFuture ... done
[13:25:15.350] - relayed: [n=2] TRUE, FALSE
[13:25:15.350] - queued futures: [n=2] TRUE, FALSE
[13:25:15.350] signalConditionsASAP(MulticoreFuture, pos=1) ... done
[13:25:15.351]  length: 1 (resolved future 1)
[13:25:15.389] plan(): Setting new future strategy stack:
[13:25:15.389] List of future strategies:
[13:25:15.389] 1. multicore:
[13:25:15.389]    - args: function (..., workers = 2L, envir = parent.frame())
[13:25:15.389]    - tweaked: TRUE
[13:25:15.389]    - call: plan(multicore, workers = 2L)
[13:25:15.389] plan(): nbrOfWorkers() = 2
[13:25:15.392] Future #2
[13:25:15.392] result() for MulticoreFuture ...
[13:25:15.393] result() for MulticoreFuture ...
[13:25:15.393] result() for MulticoreFuture ... done
[13:25:15.393] result() for MulticoreFuture ... done
[13:25:15.393] result() for MulticoreFuture ...
[13:25:15.394] result() for MulticoreFuture ... done
[13:25:15.394] signalConditionsASAP(MulticoreFuture, pos=2) ...
[13:25:15.394] - nx: 2
[13:25:15.394] - relay: TRUE
[13:25:15.394] - stdout: TRUE
[13:25:15.394] - signal: TRUE
[13:25:15.394] - resignal: FALSE
[13:25:15.395] - force: TRUE
[13:25:15.395] - relayed: [n=2] TRUE, FALSE
[13:25:15.395] - queued futures: [n=2] TRUE, FALSE
[13:25:15.395]  - until=2
[13:25:15.395]  - relaying element #2
[13:25:15.395] result() for MulticoreFuture ...
[13:25:15.395] result() for MulticoreFuture ... done
[13:25:15.395] result() for MulticoreFuture ...
[13:25:15.395] result() for MulticoreFuture ... done
[13:25:15.396] result() for MulticoreFuture ...
[13:25:15.396] result() for MulticoreFuture ... done
[13:25:15.396] result() for MulticoreFuture ...
[13:25:15.398] result() for MulticoreFuture ... done
[13:25:15.399] - relayed: [n=2] TRUE, TRUE
[13:25:15.399] - queued futures: [n=2] TRUE, TRUE
[13:25:15.399] signalConditionsASAP(MulticoreFuture, pos=2) ... done
[13:25:15.399]  length: 0 (resolved future 2)
[13:25:15.399] Relaying remaining futures
[13:25:15.399] signalConditionsASAP(NULL, pos=0) ...
[13:25:15.399] - nx: 2
[13:25:15.399] - relay: TRUE
[13:25:15.399] - stdout: TRUE
[13:25:15.400] - signal: TRUE
[13:25:15.400] - resignal: FALSE
[13:25:15.400] - force: TRUE
[13:25:15.400] - relayed: [n=2] TRUE, TRUE
[13:25:15.400] - queued futures: [n=2] TRUE, TRUE
 - flush all
[13:25:15.400] - relayed: [n=2] TRUE, TRUE
[13:25:15.401] - queued futures: [n=2] TRUE, TRUE
[13:25:15.401] signalConditionsASAP(NULL, pos=0) ... done
[13:25:15.401] resolve() on list ... DONE
[13:25:15.401] result() for MulticoreFuture ...
[13:25:15.401] result() for MulticoreFuture ... done
[13:25:15.401] result() for MulticoreFuture ...
[13:25:15.401] result() for MulticoreFuture ... done
[13:25:15.401] result() for MulticoreFuture ...
[13:25:15.402] result() for MulticoreFuture ... done
[13:25:15.402] result() for MulticoreFuture ...
[13:25:15.402] result() for MulticoreFuture ... done
[1] "da3c4d65-3ab7-2221-6070-8f33c39a5ded"
[2] "3f32cd63-56e0-0ca0-f0ca-371ecdf1065e"
> 
> message("*** session_uuid() ... DONE")
*** session_uuid() ... DONE
> 
> source("incl/end.R")
[13:25:15.403] plan(): Setting new future strategy stack:
[13:25:15.403] List of future strategies:
[13:25:15.403] 1. FutureStrategy:
[13:25:15.403]    - args: function (..., envir = parent.frame())
[13:25:15.403]    - tweaked: FALSE
[13:25:15.403]    - call: future::plan(oplan)
[13:25:15.403] plan(): nbrOfWorkers() = 1
> 
