
R version 4.3.2 (2023-10-31) -- "Eye Holes"
Copyright (C) 2023 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> source("incl/start.R")
[16:06:47.476] plan(): Setting new future strategy stack:
[16:06:47.476] List of future strategies:
[16:06:47.476] 1. sequential:
[16:06:47.476]    - args: function (..., envir = parent.frame())
[16:06:47.476]    - tweaked: FALSE
[16:06:47.476]    - call: future::plan("sequential")
[16:06:47.489] plan(): nbrOfWorkers() = 1
> session_uuid <- future:::session_uuid
> 
> message("*** session_uuid() ...")
*** session_uuid() ...
> 
> id0 <- session_uuid()
> print(id0)
[1] "f55a721e-6a74-d916-6151-18e57982598d"
attr(,"source")
attr(,"source")$host
      HOSTNAME 
"11666ca4073c" 

attr(,"source")$info
                                              sysname 
                                              "Linux" 
                                              release 
                                   "6.5.0-1025-azure" 
                                              version 
"#26~22.04.1-Ubuntu SMP Thu Jul 11 22:33:04 UTC 2024" 
                                             nodename 
                                       "11666ca4073c" 
                                              machine 
                                             "x86_64" 
                                                login 
                                            "unknown" 
                                                 user 
                                               "root" 
                                       effective_user 
                                               "root" 

attr(,"source")$pid
[1] 92746

attr(,"source")$time
[1] "2025-01-06 16:06:47 UTC"

attr(,"source")$random
[1] 2147483647

> 
> ## Reset session UUID (hack)
> environment(session_uuid)$uuids <- list()
> 
> id <- session_uuid()
> print(id)
[1] "96e3fcf8-67e2-0011-62dc-f26894736296"
attr(,"source")
attr(,"source")$host
      HOSTNAME 
"11666ca4073c" 

attr(,"source")$info
                                              sysname 
                                              "Linux" 
                                              release 
                                   "6.5.0-1025-azure" 
                                              version 
"#26~22.04.1-Ubuntu SMP Thu Jul 11 22:33:04 UTC 2024" 
                                             nodename 
                                       "11666ca4073c" 
                                              machine 
                                             "x86_64" 
                                                login 
                                            "unknown" 
                                                 user 
                                               "root" 
                                       effective_user 
                                               "root" 

attr(,"source")$pid
[1] 92746

attr(,"source")$time
[1] "2025-01-06 16:06:47 UTC"

attr(,"source")$random
[1] 2147483647

> stopifnot(id != id0)
> 
> ## Assert that forked child processes get a unique session id
> ## Issue: https://github.com/HenrikBengtsson/future/issues/187
> if (supportsMulticore()) {
+   plan(multicore, workers = 2L)
+   fs <- lapply(1:2, FUN = function(i) {
+     future({
+       Sys.sleep(0.2)
+       session_uuid()
+     })
+   })
+   ids <- unlist(value(fs))
+   print(ids)
+   stopifnot(all(ids != id), length(unique(ids)) == 2L)
+ }
[16:06:47.501] plan(): Setting new future strategy stack:
[16:06:47.501] List of future strategies:
[16:06:47.501] 1. multicore:
[16:06:47.501]    - args: function (..., workers = 2L, envir = parent.frame())
[16:06:47.501]    - tweaked: TRUE
[16:06:47.501]    - call: plan(multicore, workers = 2L)
[16:06:47.511] plan(): nbrOfWorkers() = 2
[16:06:47.512] getGlobalsAndPackages() ...
[16:06:47.512] Searching for globals...
[16:06:47.526] - globals found: [28] ‘{’, ‘Sys.sleep’, ‘session_uuid’, ‘Sys.getpid’, ‘<-’, ‘as.character’, ‘[[’, ‘uuids’, ‘if’, ‘!’, ‘is.null’, ‘attr’, ‘attr<-’, ‘return’, ‘Sys.info’, ‘Sys.getenv’, ‘c’, ‘[’, ‘nzchar’, ‘==’, ‘length’, ‘list’, ‘Sys.time’, ‘stealth_sample’, ‘$’, ‘.Machine’, ‘<<-’, ‘[[<-’
[16:06:47.526] Searching for globals ... DONE
[16:06:47.527] Resolving globals: FALSE
[16:06:47.528] The total size of the 3 globals is 77.30 KiB (79160 bytes)
[16:06:47.529] The total size of the 3 globals exported for future expression (‘{; Sys.sleep(0.2); session_uuid(); }’) is 77.30 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are three globals: ‘stealth_sample’ (61.89 KiB of class ‘function’), ‘session_uuid’ (12.55 KiB of class ‘function’) and ‘uuids’ (2.87 KiB of class ‘list’)
[16:06:47.529] - globals: [3] ‘session_uuid’, ‘uuids’, ‘stealth_sample’
[16:06:47.529] - packages: [1] ‘future’
[16:06:47.529] getGlobalsAndPackages() ... DONE
[16:06:47.530] run() for ‘Future’ ...
[16:06:47.530] - state: ‘created’
[16:06:47.530] - Future backend: ‘FutureStrategy’, ‘tweaked’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[16:06:47.531] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[16:06:47.531] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[16:06:47.531]   - Field: ‘label’
[16:06:47.531]   - Field: ‘local’
[16:06:47.531]   - Field: ‘owner’
[16:06:47.531]   - Field: ‘envir’
[16:06:47.531]   - Field: ‘workers’
[16:06:47.531]   - Field: ‘packages’
[16:06:47.531]   - Field: ‘gc’
[16:06:47.531]   - Field: ‘job’
[16:06:47.532]   - Field: ‘conditions’
[16:06:47.532]   - Field: ‘expr’
[16:06:47.532]   - Field: ‘uuid’
[16:06:47.532]   - Field: ‘seed’
[16:06:47.532]   - Field: ‘version’
[16:06:47.532]   - Field: ‘result’
[16:06:47.532]   - Field: ‘asynchronous’
[16:06:47.532]   - Field: ‘calls’
[16:06:47.532]   - Field: ‘globals’
[16:06:47.532]   - Field: ‘stdout’
[16:06:47.532]   - Field: ‘earlySignal’
[16:06:47.532]   - Field: ‘lazy’
[16:06:47.533]   - Field: ‘state’
[16:06:47.533] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[16:06:47.533] - Launch lazy future ...
[16:06:47.534] Packages needed by the future expression (n = 1): ‘future’
[16:06:47.534] Packages needed by future strategies (n = 0): <none>
[16:06:47.535] {
[16:06:47.535]     {
[16:06:47.535]         {
[16:06:47.535]             ...future.startTime <- base::Sys.time()
[16:06:47.535]             {
[16:06:47.535]                 {
[16:06:47.535]                   {
[16:06:47.535]                     {
[16:06:47.535]                       {
[16:06:47.535]                         base::local({
[16:06:47.535]                           has_future <- base::requireNamespace("future", 
[16:06:47.535]                             quietly = TRUE)
[16:06:47.535]                           if (has_future) {
[16:06:47.535]                             ns <- base::getNamespace("future")
[16:06:47.535]                             version <- ns[[".package"]][["version"]]
[16:06:47.535]                             if (is.null(version)) 
[16:06:47.535]                               version <- utils::packageVersion("future")
[16:06:47.535]                           }
[16:06:47.535]                           else {
[16:06:47.535]                             version <- NULL
[16:06:47.535]                           }
[16:06:47.535]                           if (!has_future || version < "1.8.0") {
[16:06:47.535]                             info <- base::c(r_version = base::gsub("R version ", 
[16:06:47.535]                               "", base::R.version$version.string), 
[16:06:47.535]                               platform = base::sprintf("%s (%s-bit)", 
[16:06:47.535]                                 base::R.version$platform, 8 * 
[16:06:47.535]                                   base::.Machine$sizeof.pointer), 
[16:06:47.535]                               os = base::paste(base::Sys.info()[base::c("sysname", 
[16:06:47.535]                                 "release", "version")], collapse = " "), 
[16:06:47.535]                               hostname = base::Sys.info()[["nodename"]])
[16:06:47.535]                             info <- base::sprintf("%s: %s", base::names(info), 
[16:06:47.535]                               info)
[16:06:47.535]                             info <- base::paste(info, collapse = "; ")
[16:06:47.535]                             if (!has_future) {
[16:06:47.535]                               msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:06:47.535]                                 info)
[16:06:47.535]                             }
[16:06:47.535]                             else {
[16:06:47.535]                               msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:06:47.535]                                 info, version)
[16:06:47.535]                             }
[16:06:47.535]                             base::stop(msg)
[16:06:47.535]                           }
[16:06:47.535]                         })
[16:06:47.535]                       }
[16:06:47.535]                       ...future.mc.cores.old <- base::getOption("mc.cores")
[16:06:47.535]                       base::options(mc.cores = 1L)
[16:06:47.535]                     }
[16:06:47.535]                     base::local({
[16:06:47.535]                       for (pkg in "future") {
[16:06:47.535]                         base::loadNamespace(pkg)
[16:06:47.535]                         base::library(pkg, character.only = TRUE)
[16:06:47.535]                       }
[16:06:47.535]                     })
[16:06:47.535]                   }
[16:06:47.535]                   options(future.plan = NULL)
[16:06:47.535]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:06:47.535]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:06:47.535]                 }
[16:06:47.535]                 ...future.workdir <- getwd()
[16:06:47.535]             }
[16:06:47.535]             ...future.oldOptions <- base::as.list(base::.Options)
[16:06:47.535]             ...future.oldEnvVars <- base::Sys.getenv()
[16:06:47.535]         }
[16:06:47.535]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:06:47.535]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:06:47.535]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:06:47.535]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:06:47.535]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:06:47.535]             future.stdout.windows.reencode = NULL, width = 80L)
[16:06:47.535]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:06:47.535]             base::names(...future.oldOptions))
[16:06:47.535]     }
[16:06:47.535]     if (FALSE) {
[16:06:47.535]     }
[16:06:47.535]     else {
[16:06:47.535]         if (TRUE) {
[16:06:47.535]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:06:47.535]                 open = "w")
[16:06:47.535]         }
[16:06:47.535]         else {
[16:06:47.535]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:06:47.535]                 windows = "NUL", "/dev/null"), open = "w")
[16:06:47.535]         }
[16:06:47.535]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:06:47.535]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:06:47.535]             base::sink(type = "output", split = FALSE)
[16:06:47.535]             base::close(...future.stdout)
[16:06:47.535]         }, add = TRUE)
[16:06:47.535]     }
[16:06:47.535]     ...future.frame <- base::sys.nframe()
[16:06:47.535]     ...future.conditions <- base::list()
[16:06:47.535]     ...future.rng <- base::globalenv()$.Random.seed
[16:06:47.535]     if (FALSE) {
[16:06:47.535]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:06:47.535]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:06:47.535]     }
[16:06:47.535]     ...future.result <- base::tryCatch({
[16:06:47.535]         base::withCallingHandlers({
[16:06:47.535]             ...future.value <- base::withVisible(base::local({
[16:06:47.535]                 withCallingHandlers({
[16:06:47.535]                   {
[16:06:47.535]                     Sys.sleep(0.2)
[16:06:47.535]                     session_uuid()
[16:06:47.535]                   }
[16:06:47.535]                 }, immediateCondition = function(cond) {
[16:06:47.535]                   save_rds <- function (object, pathname, ...) 
[16:06:47.535]                   {
[16:06:47.535]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[16:06:47.535]                     if (file_test("-f", pathname_tmp)) {
[16:06:47.535]                       fi_tmp <- file.info(pathname_tmp)
[16:06:47.535]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[16:06:47.535]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:06:47.535]                         fi_tmp[["mtime"]])
[16:06:47.535]                     }
[16:06:47.535]                     tryCatch({
[16:06:47.535]                       saveRDS(object, file = pathname_tmp, ...)
[16:06:47.535]                     }, error = function(ex) {
[16:06:47.535]                       msg <- conditionMessage(ex)
[16:06:47.535]                       fi_tmp <- file.info(pathname_tmp)
[16:06:47.535]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[16:06:47.535]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:06:47.535]                         fi_tmp[["mtime"]], msg)
[16:06:47.535]                       ex$message <- msg
[16:06:47.535]                       stop(ex)
[16:06:47.535]                     })
[16:06:47.535]                     stopifnot(file_test("-f", pathname_tmp))
[16:06:47.535]                     res <- file.rename(from = pathname_tmp, to = pathname)
[16:06:47.535]                     if (!res || file_test("-f", pathname_tmp)) {
[16:06:47.535]                       fi_tmp <- file.info(pathname_tmp)
[16:06:47.535]                       fi <- file.info(pathname)
[16:06:47.535]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[16:06:47.535]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:06:47.535]                         fi_tmp[["mtime"]], sQuote(pathname), 
[16:06:47.535]                         fi[["size"]], fi[["mtime"]])
[16:06:47.535]                       stop(msg)
[16:06:47.535]                     }
[16:06:47.535]                     invisible(pathname)
[16:06:47.535]                   }
[16:06:47.535]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[16:06:47.535]                     rootPath = tempdir()) 
[16:06:47.535]                   {
[16:06:47.535]                     obj <- list(time = Sys.time(), condition = cond)
[16:06:47.535]                     file <- tempfile(pattern = class(cond)[1], 
[16:06:47.535]                       tmpdir = path, fileext = ".rds")
[16:06:47.535]                     save_rds(obj, file)
[16:06:47.535]                   }
[16:06:47.535]                   saveImmediateCondition(cond, path = "/tmp/RtmpVfj8va/.future/immediateConditions")
[16:06:47.535]                   muffleCondition <- function (cond, pattern = "^muffle") 
[16:06:47.535]                   {
[16:06:47.535]                     inherits <- base::inherits
[16:06:47.535]                     invokeRestart <- base::invokeRestart
[16:06:47.535]                     is.null <- base::is.null
[16:06:47.535]                     muffled <- FALSE
[16:06:47.535]                     if (inherits(cond, "message")) {
[16:06:47.535]                       muffled <- grepl(pattern, "muffleMessage")
[16:06:47.535]                       if (muffled) 
[16:06:47.535]                         invokeRestart("muffleMessage")
[16:06:47.535]                     }
[16:06:47.535]                     else if (inherits(cond, "warning")) {
[16:06:47.535]                       muffled <- grepl(pattern, "muffleWarning")
[16:06:47.535]                       if (muffled) 
[16:06:47.535]                         invokeRestart("muffleWarning")
[16:06:47.535]                     }
[16:06:47.535]                     else if (inherits(cond, "condition")) {
[16:06:47.535]                       if (!is.null(pattern)) {
[16:06:47.535]                         computeRestarts <- base::computeRestarts
[16:06:47.535]                         grepl <- base::grepl
[16:06:47.535]                         restarts <- computeRestarts(cond)
[16:06:47.535]                         for (restart in restarts) {
[16:06:47.535]                           name <- restart$name
[16:06:47.535]                           if (is.null(name)) 
[16:06:47.535]                             next
[16:06:47.535]                           if (!grepl(pattern, name)) 
[16:06:47.535]                             next
[16:06:47.535]                           invokeRestart(restart)
[16:06:47.535]                           muffled <- TRUE
[16:06:47.535]                           break
[16:06:47.535]                         }
[16:06:47.535]                       }
[16:06:47.535]                     }
[16:06:47.535]                     invisible(muffled)
[16:06:47.535]                   }
[16:06:47.535]                   muffleCondition(cond)
[16:06:47.535]                 })
[16:06:47.535]             }))
[16:06:47.535]             future::FutureResult(value = ...future.value$value, 
[16:06:47.535]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:06:47.535]                   ...future.rng), globalenv = if (FALSE) 
[16:06:47.535]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:06:47.535]                     ...future.globalenv.names))
[16:06:47.535]                 else NULL, started = ...future.startTime, version = "1.8")
[16:06:47.535]         }, condition = base::local({
[16:06:47.535]             c <- base::c
[16:06:47.535]             inherits <- base::inherits
[16:06:47.535]             invokeRestart <- base::invokeRestart
[16:06:47.535]             length <- base::length
[16:06:47.535]             list <- base::list
[16:06:47.535]             seq.int <- base::seq.int
[16:06:47.535]             signalCondition <- base::signalCondition
[16:06:47.535]             sys.calls <- base::sys.calls
[16:06:47.535]             `[[` <- base::`[[`
[16:06:47.535]             `+` <- base::`+`
[16:06:47.535]             `<<-` <- base::`<<-`
[16:06:47.535]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:06:47.535]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:06:47.535]                   3L)]
[16:06:47.535]             }
[16:06:47.535]             function(cond) {
[16:06:47.535]                 is_error <- inherits(cond, "error")
[16:06:47.535]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:06:47.535]                   NULL)
[16:06:47.535]                 if (is_error) {
[16:06:47.535]                   sessionInformation <- function() {
[16:06:47.535]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:06:47.535]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:06:47.535]                       search = base::search(), system = base::Sys.info())
[16:06:47.535]                   }
[16:06:47.535]                   ...future.conditions[[length(...future.conditions) + 
[16:06:47.535]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:06:47.535]                     cond$call), session = sessionInformation(), 
[16:06:47.535]                     timestamp = base::Sys.time(), signaled = 0L)
[16:06:47.535]                   signalCondition(cond)
[16:06:47.535]                 }
[16:06:47.535]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:06:47.535]                 "immediateCondition"))) {
[16:06:47.535]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:06:47.535]                   ...future.conditions[[length(...future.conditions) + 
[16:06:47.535]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:06:47.535]                   if (TRUE && !signal) {
[16:06:47.535]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:06:47.535]                     {
[16:06:47.535]                       inherits <- base::inherits
[16:06:47.535]                       invokeRestart <- base::invokeRestart
[16:06:47.535]                       is.null <- base::is.null
[16:06:47.535]                       muffled <- FALSE
[16:06:47.535]                       if (inherits(cond, "message")) {
[16:06:47.535]                         muffled <- grepl(pattern, "muffleMessage")
[16:06:47.535]                         if (muffled) 
[16:06:47.535]                           invokeRestart("muffleMessage")
[16:06:47.535]                       }
[16:06:47.535]                       else if (inherits(cond, "warning")) {
[16:06:47.535]                         muffled <- grepl(pattern, "muffleWarning")
[16:06:47.535]                         if (muffled) 
[16:06:47.535]                           invokeRestart("muffleWarning")
[16:06:47.535]                       }
[16:06:47.535]                       else if (inherits(cond, "condition")) {
[16:06:47.535]                         if (!is.null(pattern)) {
[16:06:47.535]                           computeRestarts <- base::computeRestarts
[16:06:47.535]                           grepl <- base::grepl
[16:06:47.535]                           restarts <- computeRestarts(cond)
[16:06:47.535]                           for (restart in restarts) {
[16:06:47.535]                             name <- restart$name
[16:06:47.535]                             if (is.null(name)) 
[16:06:47.535]                               next
[16:06:47.535]                             if (!grepl(pattern, name)) 
[16:06:47.535]                               next
[16:06:47.535]                             invokeRestart(restart)
[16:06:47.535]                             muffled <- TRUE
[16:06:47.535]                             break
[16:06:47.535]                           }
[16:06:47.535]                         }
[16:06:47.535]                       }
[16:06:47.535]                       invisible(muffled)
[16:06:47.535]                     }
[16:06:47.535]                     muffleCondition(cond, pattern = "^muffle")
[16:06:47.535]                   }
[16:06:47.535]                 }
[16:06:47.535]                 else {
[16:06:47.535]                   if (TRUE) {
[16:06:47.535]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:06:47.535]                     {
[16:06:47.535]                       inherits <- base::inherits
[16:06:47.535]                       invokeRestart <- base::invokeRestart
[16:06:47.535]                       is.null <- base::is.null
[16:06:47.535]                       muffled <- FALSE
[16:06:47.535]                       if (inherits(cond, "message")) {
[16:06:47.535]                         muffled <- grepl(pattern, "muffleMessage")
[16:06:47.535]                         if (muffled) 
[16:06:47.535]                           invokeRestart("muffleMessage")
[16:06:47.535]                       }
[16:06:47.535]                       else if (inherits(cond, "warning")) {
[16:06:47.535]                         muffled <- grepl(pattern, "muffleWarning")
[16:06:47.535]                         if (muffled) 
[16:06:47.535]                           invokeRestart("muffleWarning")
[16:06:47.535]                       }
[16:06:47.535]                       else if (inherits(cond, "condition")) {
[16:06:47.535]                         if (!is.null(pattern)) {
[16:06:47.535]                           computeRestarts <- base::computeRestarts
[16:06:47.535]                           grepl <- base::grepl
[16:06:47.535]                           restarts <- computeRestarts(cond)
[16:06:47.535]                           for (restart in restarts) {
[16:06:47.535]                             name <- restart$name
[16:06:47.535]                             if (is.null(name)) 
[16:06:47.535]                               next
[16:06:47.535]                             if (!grepl(pattern, name)) 
[16:06:47.535]                               next
[16:06:47.535]                             invokeRestart(restart)
[16:06:47.535]                             muffled <- TRUE
[16:06:47.535]                             break
[16:06:47.535]                           }
[16:06:47.535]                         }
[16:06:47.535]                       }
[16:06:47.535]                       invisible(muffled)
[16:06:47.535]                     }
[16:06:47.535]                     muffleCondition(cond, pattern = "^muffle")
[16:06:47.535]                   }
[16:06:47.535]                 }
[16:06:47.535]             }
[16:06:47.535]         }))
[16:06:47.535]     }, error = function(ex) {
[16:06:47.535]         base::structure(base::list(value = NULL, visible = NULL, 
[16:06:47.535]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:06:47.535]                 ...future.rng), started = ...future.startTime, 
[16:06:47.535]             finished = Sys.time(), session_uuid = NA_character_, 
[16:06:47.535]             version = "1.8"), class = "FutureResult")
[16:06:47.535]     }, finally = {
[16:06:47.535]         if (!identical(...future.workdir, getwd())) 
[16:06:47.535]             setwd(...future.workdir)
[16:06:47.535]         {
[16:06:47.535]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:06:47.535]                 ...future.oldOptions$nwarnings <- NULL
[16:06:47.535]             }
[16:06:47.535]             base::options(...future.oldOptions)
[16:06:47.535]             if (.Platform$OS.type == "windows") {
[16:06:47.535]                 old_names <- names(...future.oldEnvVars)
[16:06:47.535]                 envs <- base::Sys.getenv()
[16:06:47.535]                 names <- names(envs)
[16:06:47.535]                 common <- intersect(names, old_names)
[16:06:47.535]                 added <- setdiff(names, old_names)
[16:06:47.535]                 removed <- setdiff(old_names, names)
[16:06:47.535]                 changed <- common[...future.oldEnvVars[common] != 
[16:06:47.535]                   envs[common]]
[16:06:47.535]                 NAMES <- toupper(changed)
[16:06:47.535]                 args <- list()
[16:06:47.535]                 for (kk in seq_along(NAMES)) {
[16:06:47.535]                   name <- changed[[kk]]
[16:06:47.535]                   NAME <- NAMES[[kk]]
[16:06:47.535]                   if (name != NAME && is.element(NAME, old_names)) 
[16:06:47.535]                     next
[16:06:47.535]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:06:47.535]                 }
[16:06:47.535]                 NAMES <- toupper(added)
[16:06:47.535]                 for (kk in seq_along(NAMES)) {
[16:06:47.535]                   name <- added[[kk]]
[16:06:47.535]                   NAME <- NAMES[[kk]]
[16:06:47.535]                   if (name != NAME && is.element(NAME, old_names)) 
[16:06:47.535]                     next
[16:06:47.535]                   args[[name]] <- ""
[16:06:47.535]                 }
[16:06:47.535]                 NAMES <- toupper(removed)
[16:06:47.535]                 for (kk in seq_along(NAMES)) {
[16:06:47.535]                   name <- removed[[kk]]
[16:06:47.535]                   NAME <- NAMES[[kk]]
[16:06:47.535]                   if (name != NAME && is.element(NAME, old_names)) 
[16:06:47.535]                     next
[16:06:47.535]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:06:47.535]                 }
[16:06:47.535]                 if (length(args) > 0) 
[16:06:47.535]                   base::do.call(base::Sys.setenv, args = args)
[16:06:47.535]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:06:47.535]             }
[16:06:47.535]             else {
[16:06:47.535]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:06:47.535]             }
[16:06:47.535]             {
[16:06:47.535]                 if (base::length(...future.futureOptionsAdded) > 
[16:06:47.535]                   0L) {
[16:06:47.535]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:06:47.535]                   base::names(opts) <- ...future.futureOptionsAdded
[16:06:47.535]                   base::options(opts)
[16:06:47.535]                 }
[16:06:47.535]                 {
[16:06:47.535]                   {
[16:06:47.535]                     base::options(mc.cores = ...future.mc.cores.old)
[16:06:47.535]                     NULL
[16:06:47.535]                   }
[16:06:47.535]                   options(future.plan = NULL)
[16:06:47.535]                   if (is.na(NA_character_)) 
[16:06:47.535]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:06:47.535]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:06:47.535]                   future::plan(list(function (..., workers = 2L, 
[16:06:47.535]                     envir = parent.frame()) 
[16:06:47.535]                   strategy(..., workers = workers, envir = envir)), 
[16:06:47.535]                     .cleanup = FALSE, .init = FALSE)
[16:06:47.535]                 }
[16:06:47.535]             }
[16:06:47.535]         }
[16:06:47.535]     })
[16:06:47.535]     if (TRUE) {
[16:06:47.535]         base::sink(type = "output", split = FALSE)
[16:06:47.535]         if (TRUE) {
[16:06:47.535]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:06:47.535]         }
[16:06:47.535]         else {
[16:06:47.535]             ...future.result["stdout"] <- base::list(NULL)
[16:06:47.535]         }
[16:06:47.535]         base::close(...future.stdout)
[16:06:47.535]         ...future.stdout <- NULL
[16:06:47.535]     }
[16:06:47.535]     ...future.result$conditions <- ...future.conditions
[16:06:47.535]     ...future.result$finished <- base::Sys.time()
[16:06:47.535]     ...future.result
[16:06:47.535] }
[16:06:47.537] assign_globals() ...
[16:06:47.537] List of 3
[16:06:47.537]  $ session_uuid  :function (pid = Sys.getpid(), attributes = TRUE)  
[16:06:47.537]  $ uuids         :List of 1
[16:06:47.537]   ..$ 92746: chr "96e3fcf8-67e2-0011-62dc-f26894736296"
[16:06:47.537]   .. ..- attr(*, "source")=List of 5
[16:06:47.537]   .. .. ..$ host  : Named chr "11666ca4073c"
[16:06:47.537]   .. .. .. ..- attr(*, "names")= chr "HOSTNAME"
[16:06:47.537]   .. .. ..$ info  : Named chr [1:8] "Linux" "6.5.0-1025-azure" "#26~22.04.1-Ubuntu SMP Thu Jul 11 22:33:04 UTC 2024" "11666ca4073c" ...
[16:06:47.537]   .. .. .. ..- attr(*, "names")= chr [1:8] "sysname" "release" "version" "nodename" ...
[16:06:47.537]   .. .. ..$ pid   : int 92746
[16:06:47.537]   .. .. ..$ time  : POSIXct[1:1], format: "2025-01-06 16:06:47"
[16:06:47.537]   .. .. ..$ random: int 2147483647
[16:06:47.537]  $ stealth_sample:function (x, size = length(x), replace = FALSE, ...)  
[16:06:47.537]  - attr(*, "where")=List of 3
[16:06:47.537]   ..$ session_uuid  :<environment: R_EmptyEnv> 
[16:06:47.537]   ..$ uuids         :<environment: R_EmptyEnv> 
[16:06:47.537]   ..$ stealth_sample:<environment: R_EmptyEnv> 
[16:06:47.537]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[16:06:47.537]  - attr(*, "resolved")= logi FALSE
[16:06:47.537]  - attr(*, "total_size")= num 79160
[16:06:47.537]  - attr(*, "already-done")= logi TRUE
[16:06:47.545] - copied ‘session_uuid’ to environment
[16:06:47.545] - copied ‘uuids’ to environment
[16:06:47.545] - copied ‘stealth_sample’ to environment
[16:06:47.546] assign_globals() ... done
[16:06:47.546] requestCore(): workers = 2
[16:06:47.549] MulticoreFuture started
[16:06:47.549] - Launch lazy future ... done
[16:06:47.549] run() for ‘MulticoreFuture’ ... done
[16:06:47.550] plan(): Setting new future strategy stack:
[16:06:47.550] List of future strategies:
[16:06:47.550] 1. sequential:
[16:06:47.550]    - args: function (..., envir = parent.frame())
[16:06:47.550]    - tweaked: FALSE
[16:06:47.550]    - call: NULL
[16:06:47.551] plan(): nbrOfWorkers() = 1
[16:06:47.553] getGlobalsAndPackages() ...
[16:06:47.553] Searching for globals...
[16:06:47.575] - globals found: [28] ‘{’, ‘Sys.sleep’, ‘session_uuid’, ‘Sys.getpid’, ‘<-’, ‘as.character’, ‘[[’, ‘uuids’, ‘if’, ‘!’, ‘is.null’, ‘attr’, ‘attr<-’, ‘return’, ‘Sys.info’, ‘Sys.getenv’, ‘c’, ‘[’, ‘nzchar’, ‘==’, ‘length’, ‘list’, ‘Sys.time’, ‘stealth_sample’, ‘$’, ‘.Machine’, ‘<<-’, ‘[[<-’
[16:06:47.576] Searching for globals ... DONE
[16:06:47.576] Resolving globals: FALSE
[16:06:47.578] The total size of the 3 globals is 77.30 KiB (79160 bytes)
[16:06:47.579] The total size of the 3 globals exported for future expression (‘{; Sys.sleep(0.2); session_uuid(); }’) is 77.30 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are three globals: ‘stealth_sample’ (61.89 KiB of class ‘function’), ‘session_uuid’ (12.55 KiB of class ‘function’) and ‘uuids’ (2.87 KiB of class ‘list’)
[16:06:47.579] - globals: [3] ‘session_uuid’, ‘uuids’, ‘stealth_sample’
[16:06:47.579] - packages: [1] ‘future’
[16:06:47.579] getGlobalsAndPackages() ... DONE
[16:06:47.580] run() for ‘Future’ ...
[16:06:47.580] - state: ‘created’
[16:06:47.580] - Future backend: ‘FutureStrategy’, ‘tweaked’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[16:06:47.581] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[16:06:47.581] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[16:06:47.581]   - Field: ‘label’
[16:06:47.581]   - Field: ‘local’
[16:06:47.581]   - Field: ‘owner’
[16:06:47.582]   - Field: ‘envir’
[16:06:47.582]   - Field: ‘workers’
[16:06:47.582]   - Field: ‘packages’
[16:06:47.582]   - Field: ‘gc’
[16:06:47.582]   - Field: ‘job’
[16:06:47.582]   - Field: ‘conditions’
[16:06:47.582]   - Field: ‘expr’
[16:06:47.582]   - Field: ‘uuid’
[16:06:47.583]   - Field: ‘seed’
[16:06:47.583]   - Field: ‘version’
[16:06:47.583]   - Field: ‘result’
[16:06:47.583]   - Field: ‘asynchronous’
[16:06:47.583]   - Field: ‘calls’
[16:06:47.583]   - Field: ‘globals’
[16:06:47.583]   - Field: ‘stdout’
[16:06:47.584]   - Field: ‘earlySignal’
[16:06:47.584]   - Field: ‘lazy’
[16:06:47.584]   - Field: ‘state’
[16:06:47.584] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[16:06:47.584] - Launch lazy future ...
[16:06:47.584] Packages needed by the future expression (n = 1): ‘future’
[16:06:47.585] Packages needed by future strategies (n = 0): <none>
[16:06:47.585] {
[16:06:47.585]     {
[16:06:47.585]         {
[16:06:47.585]             ...future.startTime <- base::Sys.time()
[16:06:47.585]             {
[16:06:47.585]                 {
[16:06:47.585]                   {
[16:06:47.585]                     {
[16:06:47.585]                       {
[16:06:47.585]                         base::local({
[16:06:47.585]                           has_future <- base::requireNamespace("future", 
[16:06:47.585]                             quietly = TRUE)
[16:06:47.585]                           if (has_future) {
[16:06:47.585]                             ns <- base::getNamespace("future")
[16:06:47.585]                             version <- ns[[".package"]][["version"]]
[16:06:47.585]                             if (is.null(version)) 
[16:06:47.585]                               version <- utils::packageVersion("future")
[16:06:47.585]                           }
[16:06:47.585]                           else {
[16:06:47.585]                             version <- NULL
[16:06:47.585]                           }
[16:06:47.585]                           if (!has_future || version < "1.8.0") {
[16:06:47.585]                             info <- base::c(r_version = base::gsub("R version ", 
[16:06:47.585]                               "", base::R.version$version.string), 
[16:06:47.585]                               platform = base::sprintf("%s (%s-bit)", 
[16:06:47.585]                                 base::R.version$platform, 8 * 
[16:06:47.585]                                   base::.Machine$sizeof.pointer), 
[16:06:47.585]                               os = base::paste(base::Sys.info()[base::c("sysname", 
[16:06:47.585]                                 "release", "version")], collapse = " "), 
[16:06:47.585]                               hostname = base::Sys.info()[["nodename"]])
[16:06:47.585]                             info <- base::sprintf("%s: %s", base::names(info), 
[16:06:47.585]                               info)
[16:06:47.585]                             info <- base::paste(info, collapse = "; ")
[16:06:47.585]                             if (!has_future) {
[16:06:47.585]                               msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:06:47.585]                                 info)
[16:06:47.585]                             }
[16:06:47.585]                             else {
[16:06:47.585]                               msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:06:47.585]                                 info, version)
[16:06:47.585]                             }
[16:06:47.585]                             base::stop(msg)
[16:06:47.585]                           }
[16:06:47.585]                         })
[16:06:47.585]                       }
[16:06:47.585]                       ...future.mc.cores.old <- base::getOption("mc.cores")
[16:06:47.585]                       base::options(mc.cores = 1L)
[16:06:47.585]                     }
[16:06:47.585]                     base::local({
[16:06:47.585]                       for (pkg in "future") {
[16:06:47.585]                         base::loadNamespace(pkg)
[16:06:47.585]                         base::library(pkg, character.only = TRUE)
[16:06:47.585]                       }
[16:06:47.585]                     })
[16:06:47.585]                   }
[16:06:47.585]                   options(future.plan = NULL)
[16:06:47.585]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:06:47.585]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:06:47.585]                 }
[16:06:47.585]                 ...future.workdir <- getwd()
[16:06:47.585]             }
[16:06:47.585]             ...future.oldOptions <- base::as.list(base::.Options)
[16:06:47.585]             ...future.oldEnvVars <- base::Sys.getenv()
[16:06:47.585]         }
[16:06:47.585]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:06:47.585]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:06:47.585]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:06:47.585]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:06:47.585]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:06:47.585]             future.stdout.windows.reencode = NULL, width = 80L)
[16:06:47.585]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:06:47.585]             base::names(...future.oldOptions))
[16:06:47.585]     }
[16:06:47.585]     if (FALSE) {
[16:06:47.585]     }
[16:06:47.585]     else {
[16:06:47.585]         if (TRUE) {
[16:06:47.585]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:06:47.585]                 open = "w")
[16:06:47.585]         }
[16:06:47.585]         else {
[16:06:47.585]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:06:47.585]                 windows = "NUL", "/dev/null"), open = "w")
[16:06:47.585]         }
[16:06:47.585]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:06:47.585]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:06:47.585]             base::sink(type = "output", split = FALSE)
[16:06:47.585]             base::close(...future.stdout)
[16:06:47.585]         }, add = TRUE)
[16:06:47.585]     }
[16:06:47.585]     ...future.frame <- base::sys.nframe()
[16:06:47.585]     ...future.conditions <- base::list()
[16:06:47.585]     ...future.rng <- base::globalenv()$.Random.seed
[16:06:47.585]     if (FALSE) {
[16:06:47.585]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:06:47.585]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:06:47.585]     }
[16:06:47.585]     ...future.result <- base::tryCatch({
[16:06:47.585]         base::withCallingHandlers({
[16:06:47.585]             ...future.value <- base::withVisible(base::local({
[16:06:47.585]                 withCallingHandlers({
[16:06:47.585]                   {
[16:06:47.585]                     Sys.sleep(0.2)
[16:06:47.585]                     session_uuid()
[16:06:47.585]                   }
[16:06:47.585]                 }, immediateCondition = function(cond) {
[16:06:47.585]                   save_rds <- function (object, pathname, ...) 
[16:06:47.585]                   {
[16:06:47.585]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[16:06:47.585]                     if (file_test("-f", pathname_tmp)) {
[16:06:47.585]                       fi_tmp <- file.info(pathname_tmp)
[16:06:47.585]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[16:06:47.585]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:06:47.585]                         fi_tmp[["mtime"]])
[16:06:47.585]                     }
[16:06:47.585]                     tryCatch({
[16:06:47.585]                       saveRDS(object, file = pathname_tmp, ...)
[16:06:47.585]                     }, error = function(ex) {
[16:06:47.585]                       msg <- conditionMessage(ex)
[16:06:47.585]                       fi_tmp <- file.info(pathname_tmp)
[16:06:47.585]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[16:06:47.585]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:06:47.585]                         fi_tmp[["mtime"]], msg)
[16:06:47.585]                       ex$message <- msg
[16:06:47.585]                       stop(ex)
[16:06:47.585]                     })
[16:06:47.585]                     stopifnot(file_test("-f", pathname_tmp))
[16:06:47.585]                     res <- file.rename(from = pathname_tmp, to = pathname)
[16:06:47.585]                     if (!res || file_test("-f", pathname_tmp)) {
[16:06:47.585]                       fi_tmp <- file.info(pathname_tmp)
[16:06:47.585]                       fi <- file.info(pathname)
[16:06:47.585]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[16:06:47.585]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:06:47.585]                         fi_tmp[["mtime"]], sQuote(pathname), 
[16:06:47.585]                         fi[["size"]], fi[["mtime"]])
[16:06:47.585]                       stop(msg)
[16:06:47.585]                     }
[16:06:47.585]                     invisible(pathname)
[16:06:47.585]                   }
[16:06:47.585]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[16:06:47.585]                     rootPath = tempdir()) 
[16:06:47.585]                   {
[16:06:47.585]                     obj <- list(time = Sys.time(), condition = cond)
[16:06:47.585]                     file <- tempfile(pattern = class(cond)[1], 
[16:06:47.585]                       tmpdir = path, fileext = ".rds")
[16:06:47.585]                     save_rds(obj, file)
[16:06:47.585]                   }
[16:06:47.585]                   saveImmediateCondition(cond, path = "/tmp/RtmpVfj8va/.future/immediateConditions")
[16:06:47.585]                   muffleCondition <- function (cond, pattern = "^muffle") 
[16:06:47.585]                   {
[16:06:47.585]                     inherits <- base::inherits
[16:06:47.585]                     invokeRestart <- base::invokeRestart
[16:06:47.585]                     is.null <- base::is.null
[16:06:47.585]                     muffled <- FALSE
[16:06:47.585]                     if (inherits(cond, "message")) {
[16:06:47.585]                       muffled <- grepl(pattern, "muffleMessage")
[16:06:47.585]                       if (muffled) 
[16:06:47.585]                         invokeRestart("muffleMessage")
[16:06:47.585]                     }
[16:06:47.585]                     else if (inherits(cond, "warning")) {
[16:06:47.585]                       muffled <- grepl(pattern, "muffleWarning")
[16:06:47.585]                       if (muffled) 
[16:06:47.585]                         invokeRestart("muffleWarning")
[16:06:47.585]                     }
[16:06:47.585]                     else if (inherits(cond, "condition")) {
[16:06:47.585]                       if (!is.null(pattern)) {
[16:06:47.585]                         computeRestarts <- base::computeRestarts
[16:06:47.585]                         grepl <- base::grepl
[16:06:47.585]                         restarts <- computeRestarts(cond)
[16:06:47.585]                         for (restart in restarts) {
[16:06:47.585]                           name <- restart$name
[16:06:47.585]                           if (is.null(name)) 
[16:06:47.585]                             next
[16:06:47.585]                           if (!grepl(pattern, name)) 
[16:06:47.585]                             next
[16:06:47.585]                           invokeRestart(restart)
[16:06:47.585]                           muffled <- TRUE
[16:06:47.585]                           break
[16:06:47.585]                         }
[16:06:47.585]                       }
[16:06:47.585]                     }
[16:06:47.585]                     invisible(muffled)
[16:06:47.585]                   }
[16:06:47.585]                   muffleCondition(cond)
[16:06:47.585]                 })
[16:06:47.585]             }))
[16:06:47.585]             future::FutureResult(value = ...future.value$value, 
[16:06:47.585]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:06:47.585]                   ...future.rng), globalenv = if (FALSE) 
[16:06:47.585]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:06:47.585]                     ...future.globalenv.names))
[16:06:47.585]                 else NULL, started = ...future.startTime, version = "1.8")
[16:06:47.585]         }, condition = base::local({
[16:06:47.585]             c <- base::c
[16:06:47.585]             inherits <- base::inherits
[16:06:47.585]             invokeRestart <- base::invokeRestart
[16:06:47.585]             length <- base::length
[16:06:47.585]             list <- base::list
[16:06:47.585]             seq.int <- base::seq.int
[16:06:47.585]             signalCondition <- base::signalCondition
[16:06:47.585]             sys.calls <- base::sys.calls
[16:06:47.585]             `[[` <- base::`[[`
[16:06:47.585]             `+` <- base::`+`
[16:06:47.585]             `<<-` <- base::`<<-`
[16:06:47.585]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:06:47.585]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:06:47.585]                   3L)]
[16:06:47.585]             }
[16:06:47.585]             function(cond) {
[16:06:47.585]                 is_error <- inherits(cond, "error")
[16:06:47.585]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:06:47.585]                   NULL)
[16:06:47.585]                 if (is_error) {
[16:06:47.585]                   sessionInformation <- function() {
[16:06:47.585]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:06:47.585]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:06:47.585]                       search = base::search(), system = base::Sys.info())
[16:06:47.585]                   }
[16:06:47.585]                   ...future.conditions[[length(...future.conditions) + 
[16:06:47.585]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:06:47.585]                     cond$call), session = sessionInformation(), 
[16:06:47.585]                     timestamp = base::Sys.time(), signaled = 0L)
[16:06:47.585]                   signalCondition(cond)
[16:06:47.585]                 }
[16:06:47.585]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:06:47.585]                 "immediateCondition"))) {
[16:06:47.585]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:06:47.585]                   ...future.conditions[[length(...future.conditions) + 
[16:06:47.585]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:06:47.585]                   if (TRUE && !signal) {
[16:06:47.585]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:06:47.585]                     {
[16:06:47.585]                       inherits <- base::inherits
[16:06:47.585]                       invokeRestart <- base::invokeRestart
[16:06:47.585]                       is.null <- base::is.null
[16:06:47.585]                       muffled <- FALSE
[16:06:47.585]                       if (inherits(cond, "message")) {
[16:06:47.585]                         muffled <- grepl(pattern, "muffleMessage")
[16:06:47.585]                         if (muffled) 
[16:06:47.585]                           invokeRestart("muffleMessage")
[16:06:47.585]                       }
[16:06:47.585]                       else if (inherits(cond, "warning")) {
[16:06:47.585]                         muffled <- grepl(pattern, "muffleWarning")
[16:06:47.585]                         if (muffled) 
[16:06:47.585]                           invokeRestart("muffleWarning")
[16:06:47.585]                       }
[16:06:47.585]                       else if (inherits(cond, "condition")) {
[16:06:47.585]                         if (!is.null(pattern)) {
[16:06:47.585]                           computeRestarts <- base::computeRestarts
[16:06:47.585]                           grepl <- base::grepl
[16:06:47.585]                           restarts <- computeRestarts(cond)
[16:06:47.585]                           for (restart in restarts) {
[16:06:47.585]                             name <- restart$name
[16:06:47.585]                             if (is.null(name)) 
[16:06:47.585]                               next
[16:06:47.585]                             if (!grepl(pattern, name)) 
[16:06:47.585]                               next
[16:06:47.585]                             invokeRestart(restart)
[16:06:47.585]                             muffled <- TRUE
[16:06:47.585]                             break
[16:06:47.585]                           }
[16:06:47.585]                         }
[16:06:47.585]                       }
[16:06:47.585]                       invisible(muffled)
[16:06:47.585]                     }
[16:06:47.585]                     muffleCondition(cond, pattern = "^muffle")
[16:06:47.585]                   }
[16:06:47.585]                 }
[16:06:47.585]                 else {
[16:06:47.585]                   if (TRUE) {
[16:06:47.585]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:06:47.585]                     {
[16:06:47.585]                       inherits <- base::inherits
[16:06:47.585]                       invokeRestart <- base::invokeRestart
[16:06:47.585]                       is.null <- base::is.null
[16:06:47.585]                       muffled <- FALSE
[16:06:47.585]                       if (inherits(cond, "message")) {
[16:06:47.585]                         muffled <- grepl(pattern, "muffleMessage")
[16:06:47.585]                         if (muffled) 
[16:06:47.585]                           invokeRestart("muffleMessage")
[16:06:47.585]                       }
[16:06:47.585]                       else if (inherits(cond, "warning")) {
[16:06:47.585]                         muffled <- grepl(pattern, "muffleWarning")
[16:06:47.585]                         if (muffled) 
[16:06:47.585]                           invokeRestart("muffleWarning")
[16:06:47.585]                       }
[16:06:47.585]                       else if (inherits(cond, "condition")) {
[16:06:47.585]                         if (!is.null(pattern)) {
[16:06:47.585]                           computeRestarts <- base::computeRestarts
[16:06:47.585]                           grepl <- base::grepl
[16:06:47.585]                           restarts <- computeRestarts(cond)
[16:06:47.585]                           for (restart in restarts) {
[16:06:47.585]                             name <- restart$name
[16:06:47.585]                             if (is.null(name)) 
[16:06:47.585]                               next
[16:06:47.585]                             if (!grepl(pattern, name)) 
[16:06:47.585]                               next
[16:06:47.585]                             invokeRestart(restart)
[16:06:47.585]                             muffled <- TRUE
[16:06:47.585]                             break
[16:06:47.585]                           }
[16:06:47.585]                         }
[16:06:47.585]                       }
[16:06:47.585]                       invisible(muffled)
[16:06:47.585]                     }
[16:06:47.585]                     muffleCondition(cond, pattern = "^muffle")
[16:06:47.585]                   }
[16:06:47.585]                 }
[16:06:47.585]             }
[16:06:47.585]         }))
[16:06:47.585]     }, error = function(ex) {
[16:06:47.585]         base::structure(base::list(value = NULL, visible = NULL, 
[16:06:47.585]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:06:47.585]                 ...future.rng), started = ...future.startTime, 
[16:06:47.585]             finished = Sys.time(), session_uuid = NA_character_, 
[16:06:47.585]             version = "1.8"), class = "FutureResult")
[16:06:47.585]     }, finally = {
[16:06:47.585]         if (!identical(...future.workdir, getwd())) 
[16:06:47.585]             setwd(...future.workdir)
[16:06:47.585]         {
[16:06:47.585]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:06:47.585]                 ...future.oldOptions$nwarnings <- NULL
[16:06:47.585]             }
[16:06:47.585]             base::options(...future.oldOptions)
[16:06:47.585]             if (.Platform$OS.type == "windows") {
[16:06:47.585]                 old_names <- names(...future.oldEnvVars)
[16:06:47.585]                 envs <- base::Sys.getenv()
[16:06:47.585]                 names <- names(envs)
[16:06:47.585]                 common <- intersect(names, old_names)
[16:06:47.585]                 added <- setdiff(names, old_names)
[16:06:47.585]                 removed <- setdiff(old_names, names)
[16:06:47.585]                 changed <- common[...future.oldEnvVars[common] != 
[16:06:47.585]                   envs[common]]
[16:06:47.585]                 NAMES <- toupper(changed)
[16:06:47.585]                 args <- list()
[16:06:47.585]                 for (kk in seq_along(NAMES)) {
[16:06:47.585]                   name <- changed[[kk]]
[16:06:47.585]                   NAME <- NAMES[[kk]]
[16:06:47.585]                   if (name != NAME && is.element(NAME, old_names)) 
[16:06:47.585]                     next
[16:06:47.585]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:06:47.585]                 }
[16:06:47.585]                 NAMES <- toupper(added)
[16:06:47.585]                 for (kk in seq_along(NAMES)) {
[16:06:47.585]                   name <- added[[kk]]
[16:06:47.585]                   NAME <- NAMES[[kk]]
[16:06:47.585]                   if (name != NAME && is.element(NAME, old_names)) 
[16:06:47.585]                     next
[16:06:47.585]                   args[[name]] <- ""
[16:06:47.585]                 }
[16:06:47.585]                 NAMES <- toupper(removed)
[16:06:47.585]                 for (kk in seq_along(NAMES)) {
[16:06:47.585]                   name <- removed[[kk]]
[16:06:47.585]                   NAME <- NAMES[[kk]]
[16:06:47.585]                   if (name != NAME && is.element(NAME, old_names)) 
[16:06:47.585]                     next
[16:06:47.585]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:06:47.585]                 }
[16:06:47.585]                 if (length(args) > 0) 
[16:06:47.585]                   base::do.call(base::Sys.setenv, args = args)
[16:06:47.585]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:06:47.585]             }
[16:06:47.585]             else {
[16:06:47.585]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:06:47.585]             }
[16:06:47.585]             {
[16:06:47.585]                 if (base::length(...future.futureOptionsAdded) > 
[16:06:47.585]                   0L) {
[16:06:47.585]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:06:47.585]                   base::names(opts) <- ...future.futureOptionsAdded
[16:06:47.585]                   base::options(opts)
[16:06:47.585]                 }
[16:06:47.585]                 {
[16:06:47.585]                   {
[16:06:47.585]                     base::options(mc.cores = ...future.mc.cores.old)
[16:06:47.585]                     NULL
[16:06:47.585]                   }
[16:06:47.585]                   options(future.plan = NULL)
[16:06:47.585]                   if (is.na(NA_character_)) 
[16:06:47.585]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:06:47.585]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:06:47.585]                   future::plan(list(function (..., workers = 2L, 
[16:06:47.585]                     envir = parent.frame()) 
[16:06:47.585]                   strategy(..., workers = workers, envir = envir)), 
[16:06:47.585]                     .cleanup = FALSE, .init = FALSE)
[16:06:47.585]                 }
[16:06:47.585]             }
[16:06:47.585]         }
[16:06:47.585]     })
[16:06:47.585]     if (TRUE) {
[16:06:47.585]         base::sink(type = "output", split = FALSE)
[16:06:47.585]         if (TRUE) {
[16:06:47.585]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:06:47.585]         }
[16:06:47.585]         else {
[16:06:47.585]             ...future.result["stdout"] <- base::list(NULL)
[16:06:47.585]         }
[16:06:47.585]         base::close(...future.stdout)
[16:06:47.585]         ...future.stdout <- NULL
[16:06:47.585]     }
[16:06:47.585]     ...future.result$conditions <- ...future.conditions
[16:06:47.585]     ...future.result$finished <- base::Sys.time()
[16:06:47.585]     ...future.result
[16:06:47.585] }
[16:06:47.587] assign_globals() ...
[16:06:47.588] List of 3
[16:06:47.588]  $ session_uuid  :function (pid = Sys.getpid(), attributes = TRUE)  
[16:06:47.588]  $ uuids         :List of 1
[16:06:47.588]   ..$ 92746: chr "96e3fcf8-67e2-0011-62dc-f26894736296"
[16:06:47.588]   .. ..- attr(*, "source")=List of 5
[16:06:47.588]   .. .. ..$ host  : Named chr "11666ca4073c"
[16:06:47.588]   .. .. .. ..- attr(*, "names")= chr "HOSTNAME"
[16:06:47.588]   .. .. ..$ info  : Named chr [1:8] "Linux" "6.5.0-1025-azure" "#26~22.04.1-Ubuntu SMP Thu Jul 11 22:33:04 UTC 2024" "11666ca4073c" ...
[16:06:47.588]   .. .. .. ..- attr(*, "names")= chr [1:8] "sysname" "release" "version" "nodename" ...
[16:06:47.588]   .. .. ..$ pid   : int 92746
[16:06:47.588]   .. .. ..$ time  : POSIXct[1:1], format: "2025-01-06 16:06:47"
[16:06:47.588]   .. .. ..$ random: int 2147483647
[16:06:47.588]  $ stealth_sample:function (x, size = length(x), replace = FALSE, ...)  
[16:06:47.588]  - attr(*, "where")=List of 3
[16:06:47.588]   ..$ session_uuid  :<environment: R_EmptyEnv> 
[16:06:47.588]   ..$ uuids         :<environment: R_EmptyEnv> 
[16:06:47.588]   ..$ stealth_sample:<environment: R_EmptyEnv> 
[16:06:47.588]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[16:06:47.588]  - attr(*, "resolved")= logi FALSE
[16:06:47.588]  - attr(*, "total_size")= num 79160
[16:06:47.588]  - attr(*, "already-done")= logi TRUE
[16:06:47.595] - copied ‘session_uuid’ to environment
[16:06:47.595] - copied ‘uuids’ to environment
[16:06:47.595] - copied ‘stealth_sample’ to environment
[16:06:47.595] assign_globals() ... done
[16:06:47.596] requestCore(): workers = 2
[16:06:47.600] MulticoreFuture started
[16:06:47.600] - Launch lazy future ... done
[16:06:47.601] run() for ‘MulticoreFuture’ ... done
[16:06:47.602] resolve() on list ...
[16:06:47.602]  recursive: 0
[16:06:47.602] plan(): Setting new future strategy stack:
[16:06:47.602]  length: 2
[16:06:47.602] List of future strategies:
[16:06:47.602] 1. sequential:
[16:06:47.602]    - args: function (..., envir = parent.frame())
[16:06:47.602]    - tweaked: FALSE
[16:06:47.602]    - call: NULL
[16:06:47.603] 
[16:06:47.603] plan(): nbrOfWorkers() = 1
[16:06:47.754] plan(): Setting new future strategy stack:
[16:06:47.754] List of future strategies:
[16:06:47.754] 1. multicore:
[16:06:47.754]    - args: function (..., workers = 2L, envir = parent.frame())
[16:06:47.754]    - tweaked: TRUE
[16:06:47.754]    - call: plan(multicore, workers = 2L)
[16:06:47.755] plan(): nbrOfWorkers() = 2
[16:06:47.758] Future #1
[16:06:47.759] result() for MulticoreFuture ...
[16:06:47.761] result() for MulticoreFuture ...
[16:06:47.761] result() for MulticoreFuture ... done
[16:06:47.761] result() for MulticoreFuture ... done
[16:06:47.761] result() for MulticoreFuture ...
[16:06:47.761] result() for MulticoreFuture ... done
[16:06:47.762] signalConditionsASAP(MulticoreFuture, pos=1) ...
[16:06:47.762] - nx: 2
[16:06:47.762] - relay: TRUE
[16:06:47.762] - stdout: TRUE
[16:06:47.762] - signal: TRUE
[16:06:47.762] - resignal: FALSE
[16:06:47.762] - force: TRUE
[16:06:47.762] - relayed: [n=2] FALSE, FALSE
[16:06:47.763] - queued futures: [n=2] FALSE, FALSE
[16:06:47.763]  - until=1
[16:06:47.763]  - relaying element #1
[16:06:47.763] result() for MulticoreFuture ...
[16:06:47.763] result() for MulticoreFuture ... done
[16:06:47.763] result() for MulticoreFuture ...
[16:06:47.763] result() for MulticoreFuture ... done
[16:06:47.764] result() for MulticoreFuture ...
[16:06:47.764] result() for MulticoreFuture ... done
[16:06:47.764] result() for MulticoreFuture ...
[16:06:47.764] result() for MulticoreFuture ... done
[16:06:47.764] - relayed: [n=2] TRUE, FALSE
[16:06:47.764] - queued futures: [n=2] TRUE, FALSE
[16:06:47.764] signalConditionsASAP(MulticoreFuture, pos=1) ... done
[16:06:47.765]  length: 1 (resolved future 1)
[16:06:47.806] plan(): Setting new future strategy stack:
[16:06:47.806] List of future strategies:
[16:06:47.806] 1. multicore:
[16:06:47.806]    - args: function (..., workers = 2L, envir = parent.frame())
[16:06:47.806]    - tweaked: TRUE
[16:06:47.806]    - call: plan(multicore, workers = 2L)
[16:06:47.807] plan(): nbrOfWorkers() = 2
[16:06:47.807] Future #2
[16:06:47.807] result() for MulticoreFuture ...
[16:06:47.808] result() for MulticoreFuture ...
[16:06:47.808] result() for MulticoreFuture ... done
[16:06:47.808] result() for MulticoreFuture ... done
[16:06:47.808] result() for MulticoreFuture ...
[16:06:47.808] result() for MulticoreFuture ... done
[16:06:47.809] signalConditionsASAP(MulticoreFuture, pos=2) ...
[16:06:47.809] - nx: 2
[16:06:47.809] - relay: TRUE
[16:06:47.809] - stdout: TRUE
[16:06:47.809] - signal: TRUE
[16:06:47.809] - resignal: FALSE
[16:06:47.809] - force: TRUE
[16:06:47.809] - relayed: [n=2] TRUE, FALSE
[16:06:47.809] - queued futures: [n=2] TRUE, FALSE
[16:06:47.810]  - until=2
[16:06:47.810]  - relaying element #2
[16:06:47.810] result() for MulticoreFuture ...
[16:06:47.810] result() for MulticoreFuture ... done
[16:06:47.810] result() for MulticoreFuture ...
[16:06:47.810] result() for MulticoreFuture ... done
[16:06:47.810] result() for MulticoreFuture ...
[16:06:47.810] result() for MulticoreFuture ... done
[16:06:47.810] result() for MulticoreFuture ...
[16:06:47.813] result() for MulticoreFuture ... done
[16:06:47.813] - relayed: [n=2] TRUE, TRUE
[16:06:47.813] - queued futures: [n=2] TRUE, TRUE
[16:06:47.813] signalConditionsASAP(MulticoreFuture, pos=2) ... done
[16:06:47.813]  length: 0 (resolved future 2)
[16:06:47.813] Relaying remaining futures
[16:06:47.813] signalConditionsASAP(NULL, pos=0) ...
[16:06:47.813] - nx: 2
[16:06:47.814] - relay: TRUE
[16:06:47.814] - stdout: TRUE
[16:06:47.814] - signal: TRUE
[16:06:47.814] - resignal: FALSE
[16:06:47.814] - force: TRUE
[16:06:47.814] - relayed: [n=2] TRUE, TRUE
[16:06:47.814] - queued futures: [n=2] TRUE, TRUE
 - flush all
[16:06:47.815] - relayed: [n=2] TRUE, TRUE
[16:06:47.815] - queued futures: [n=2] TRUE, TRUE
[16:06:47.815] signalConditionsASAP(NULL, pos=0) ... done
[16:06:47.815] resolve() on list ... DONE
[16:06:47.815] result() for MulticoreFuture ...
[16:06:47.815] result() for MulticoreFuture ... done
[16:06:47.815] result() for MulticoreFuture ...
[16:06:47.816] result() for MulticoreFuture ... done
[16:06:47.816] result() for MulticoreFuture ...
[16:06:47.816] result() for MulticoreFuture ... done
[16:06:47.816] result() for MulticoreFuture ...
[16:06:47.816] result() for MulticoreFuture ... done
[1] "1307b3c7-b0e2-c067-f526-69f1e9a43d59"
[2] "24a91c5a-9a57-3798-85ed-dbdbbc4e39fb"
> 
> message("*** session_uuid() ... DONE")
*** session_uuid() ... DONE
> 
> source("incl/end.R")
[16:06:47.817] plan(): Setting new future strategy stack:
[16:06:47.817] List of future strategies:
[16:06:47.817] 1. FutureStrategy:
[16:06:47.817]    - args: function (..., envir = parent.frame())
[16:06:47.817]    - tweaked: FALSE
[16:06:47.817]    - call: future::plan(oplan)
[16:06:47.818] plan(): nbrOfWorkers() = 1
> 
