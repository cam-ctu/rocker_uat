
R version 4.3.2 (2023-10-31) -- "Eye Holes"
Copyright (C) 2023 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> source("incl/start.R")
[16:04:56.639] plan(): Setting new future strategy stack:
[16:04:56.639] List of future strategies:
[16:04:56.639] 1. sequential:
[16:04:56.639]    - args: function (..., envir = parent.frame())
[16:04:56.639]    - tweaked: FALSE
[16:04:56.639]    - call: future::plan("sequential")
[16:04:56.654] plan(): nbrOfWorkers() = 1
> library("listenv")
> 
> message("*** Globals w/ non-standard evaluation (NSE) ...")
*** Globals w/ non-standard evaluation (NSE) ...
> 
> data <- data.frame(x = 1:5, y = 1:5)
> v0 <- subset(data, x < 3)$y
> 
> for (strategy in supportedStrategies()) {
+   ## Speed up CRAN checks: Skip on CRAN Windows 32-bit
+   if (!fullTest && isWin32) next
+   
+   message(sprintf("- Strategy: %s ...", strategy))
+   
+   plan(strategy)
+ 
+   ## Assert option is passed on to future
+   options(future.globals.onMissing = "error")
+   opt1 %<-% getOption("future.globals.onMissing")
+   stopifnot(identical(opt1, "error"))
+ 
+   options(future.globals.onMissing = "ignore")
+   opt2 %<-% getOption("future.globals.onMissing")
+   stopifnot(identical(opt2, "ignore"))
+ 
+   options(future.globals.onMissing = "error")
+   res <- try({ v1 %<-% subset(data, x < 3)$y }, silent = TRUE)
+   stopifnot(inherits(res, "try-error"))
+ 
+   options(future.globals.onMissing = "ignore")
+   v2 %<-% subset(data, x < 3)$y
+   stopifnot(identical(v2, v0))
+ 
+   ## Nested futures (requires option is passed on to future)
+   plan(list(sequential, strategy))
+   options(future.globals.onMissing = "ignore")
+   v3 %<-% {
+     a %<-% subset(data, x < 3)$y
+     a
+   } %lazy% TRUE
+   stopifnot(identical(v3, v0))
+ 
+   message(sprintf("- Strategy: %s ... DONE", strategy))
+ }
- Strategy: sequential ...
[16:04:56.684] plan(): Setting new future strategy stack:
[16:04:56.684] List of future strategies:
[16:04:56.684] 1. sequential:
[16:04:56.684]    - args: function (..., envir = parent.frame())
[16:04:56.684]    - tweaked: FALSE
[16:04:56.684]    - call: plan(strategy)
[16:04:56.697] plan(): nbrOfWorkers() = 1
[16:04:56.699] getGlobalsAndPackages() ...
Warning: R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘error’
[16:04:56.700] Searching for globals...
[16:04:56.704] - globals found: [1] ‘getOption’
[16:04:56.704] Searching for globals ... DONE
[16:04:56.704] Resolving globals: FALSE
[16:04:56.704] 
[16:04:56.704] 
[16:04:56.705] getGlobalsAndPackages() ... DONE
[16:04:56.705] run() for ‘Future’ ...
[16:04:56.705] - state: ‘created’
[16:04:56.706] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[16:04:56.706] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[16:04:56.706] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[16:04:56.706]   - Field: ‘label’
[16:04:56.706]   - Field: ‘local’
[16:04:56.706]   - Field: ‘owner’
[16:04:56.706]   - Field: ‘envir’
[16:04:56.707]   - Field: ‘packages’
[16:04:56.707]   - Field: ‘gc’
[16:04:56.707]   - Field: ‘conditions’
[16:04:56.707]   - Field: ‘expr’
[16:04:56.707]   - Field: ‘uuid’
[16:04:56.707]   - Field: ‘seed’
[16:04:56.707]   - Field: ‘version’
[16:04:56.707]   - Field: ‘result’
[16:04:56.707]   - Field: ‘asynchronous’
[16:04:56.707]   - Field: ‘calls’
[16:04:56.707]   - Field: ‘globals’
[16:04:56.708]   - Field: ‘stdout’
[16:04:56.708]   - Field: ‘earlySignal’
[16:04:56.708]   - Field: ‘lazy’
[16:04:56.708]   - Field: ‘state’
[16:04:56.708] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[16:04:56.708] - Launch lazy future ...
[16:04:56.709] Packages needed by the future expression (n = 0): <none>
[16:04:56.709] Packages needed by future strategies (n = 0): <none>
[16:04:56.710] {
[16:04:56.710]     {
[16:04:56.710]         {
[16:04:56.710]             ...future.startTime <- base::Sys.time()
[16:04:56.710]             {
[16:04:56.710]                 {
[16:04:56.710]                   {
[16:04:56.710]                     base::local({
[16:04:56.710]                       has_future <- base::requireNamespace("future", 
[16:04:56.710]                         quietly = TRUE)
[16:04:56.710]                       if (has_future) {
[16:04:56.710]                         ns <- base::getNamespace("future")
[16:04:56.710]                         version <- ns[[".package"]][["version"]]
[16:04:56.710]                         if (is.null(version)) 
[16:04:56.710]                           version <- utils::packageVersion("future")
[16:04:56.710]                       }
[16:04:56.710]                       else {
[16:04:56.710]                         version <- NULL
[16:04:56.710]                       }
[16:04:56.710]                       if (!has_future || version < "1.8.0") {
[16:04:56.710]                         info <- base::c(r_version = base::gsub("R version ", 
[16:04:56.710]                           "", base::R.version$version.string), 
[16:04:56.710]                           platform = base::sprintf("%s (%s-bit)", 
[16:04:56.710]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:04:56.710]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[16:04:56.710]                             "release", "version")], collapse = " "), 
[16:04:56.710]                           hostname = base::Sys.info()[["nodename"]])
[16:04:56.710]                         info <- base::sprintf("%s: %s", base::names(info), 
[16:04:56.710]                           info)
[16:04:56.710]                         info <- base::paste(info, collapse = "; ")
[16:04:56.710]                         if (!has_future) {
[16:04:56.710]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:04:56.710]                             info)
[16:04:56.710]                         }
[16:04:56.710]                         else {
[16:04:56.710]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:04:56.710]                             info, version)
[16:04:56.710]                         }
[16:04:56.710]                         base::stop(msg)
[16:04:56.710]                       }
[16:04:56.710]                     })
[16:04:56.710]                   }
[16:04:56.710]                   options(future.plan = NULL)
[16:04:56.710]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:04:56.710]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:04:56.710]                 }
[16:04:56.710]                 ...future.workdir <- getwd()
[16:04:56.710]             }
[16:04:56.710]             ...future.oldOptions <- base::as.list(base::.Options)
[16:04:56.710]             ...future.oldEnvVars <- base::Sys.getenv()
[16:04:56.710]         }
[16:04:56.710]         base::options(future.startup.script = FALSE, future.globals.onMissing = "error", 
[16:04:56.710]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:04:56.710]             future.globals.onMissing = "error", future.globals.onReference = NULL, 
[16:04:56.710]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:04:56.710]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:04:56.710]             future.stdout.windows.reencode = NULL, width = 80L)
[16:04:56.710]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:04:56.710]             base::names(...future.oldOptions))
[16:04:56.710]     }
[16:04:56.710]     if (FALSE) {
[16:04:56.710]     }
[16:04:56.710]     else {
[16:04:56.710]         if (TRUE) {
[16:04:56.710]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:04:56.710]                 open = "w")
[16:04:56.710]         }
[16:04:56.710]         else {
[16:04:56.710]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:04:56.710]                 windows = "NUL", "/dev/null"), open = "w")
[16:04:56.710]         }
[16:04:56.710]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:04:56.710]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:04:56.710]             base::sink(type = "output", split = FALSE)
[16:04:56.710]             base::close(...future.stdout)
[16:04:56.710]         }, add = TRUE)
[16:04:56.710]     }
[16:04:56.710]     ...future.frame <- base::sys.nframe()
[16:04:56.710]     ...future.conditions <- base::list()
[16:04:56.710]     ...future.rng <- base::globalenv()$.Random.seed
[16:04:56.710]     if (FALSE) {
[16:04:56.710]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:04:56.710]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:04:56.710]     }
[16:04:56.710]     ...future.result <- base::tryCatch({
[16:04:56.710]         base::withCallingHandlers({
[16:04:56.710]             ...future.value <- base::withVisible(base::local(getOption("future.globals.onMissing")))
[16:04:56.710]             future::FutureResult(value = ...future.value$value, 
[16:04:56.710]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:04:56.710]                   ...future.rng), globalenv = if (FALSE) 
[16:04:56.710]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:04:56.710]                     ...future.globalenv.names))
[16:04:56.710]                 else NULL, started = ...future.startTime, version = "1.8")
[16:04:56.710]         }, condition = base::local({
[16:04:56.710]             c <- base::c
[16:04:56.710]             inherits <- base::inherits
[16:04:56.710]             invokeRestart <- base::invokeRestart
[16:04:56.710]             length <- base::length
[16:04:56.710]             list <- base::list
[16:04:56.710]             seq.int <- base::seq.int
[16:04:56.710]             signalCondition <- base::signalCondition
[16:04:56.710]             sys.calls <- base::sys.calls
[16:04:56.710]             `[[` <- base::`[[`
[16:04:56.710]             `+` <- base::`+`
[16:04:56.710]             `<<-` <- base::`<<-`
[16:04:56.710]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:04:56.710]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:04:56.710]                   3L)]
[16:04:56.710]             }
[16:04:56.710]             function(cond) {
[16:04:56.710]                 is_error <- inherits(cond, "error")
[16:04:56.710]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:04:56.710]                   NULL)
[16:04:56.710]                 if (is_error) {
[16:04:56.710]                   sessionInformation <- function() {
[16:04:56.710]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:04:56.710]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:04:56.710]                       search = base::search(), system = base::Sys.info())
[16:04:56.710]                   }
[16:04:56.710]                   ...future.conditions[[length(...future.conditions) + 
[16:04:56.710]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:04:56.710]                     cond$call), session = sessionInformation(), 
[16:04:56.710]                     timestamp = base::Sys.time(), signaled = 0L)
[16:04:56.710]                   signalCondition(cond)
[16:04:56.710]                 }
[16:04:56.710]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:04:56.710]                 "immediateCondition"))) {
[16:04:56.710]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:04:56.710]                   ...future.conditions[[length(...future.conditions) + 
[16:04:56.710]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:04:56.710]                   if (TRUE && !signal) {
[16:04:56.710]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:04:56.710]                     {
[16:04:56.710]                       inherits <- base::inherits
[16:04:56.710]                       invokeRestart <- base::invokeRestart
[16:04:56.710]                       is.null <- base::is.null
[16:04:56.710]                       muffled <- FALSE
[16:04:56.710]                       if (inherits(cond, "message")) {
[16:04:56.710]                         muffled <- grepl(pattern, "muffleMessage")
[16:04:56.710]                         if (muffled) 
[16:04:56.710]                           invokeRestart("muffleMessage")
[16:04:56.710]                       }
[16:04:56.710]                       else if (inherits(cond, "warning")) {
[16:04:56.710]                         muffled <- grepl(pattern, "muffleWarning")
[16:04:56.710]                         if (muffled) 
[16:04:56.710]                           invokeRestart("muffleWarning")
[16:04:56.710]                       }
[16:04:56.710]                       else if (inherits(cond, "condition")) {
[16:04:56.710]                         if (!is.null(pattern)) {
[16:04:56.710]                           computeRestarts <- base::computeRestarts
[16:04:56.710]                           grepl <- base::grepl
[16:04:56.710]                           restarts <- computeRestarts(cond)
[16:04:56.710]                           for (restart in restarts) {
[16:04:56.710]                             name <- restart$name
[16:04:56.710]                             if (is.null(name)) 
[16:04:56.710]                               next
[16:04:56.710]                             if (!grepl(pattern, name)) 
[16:04:56.710]                               next
[16:04:56.710]                             invokeRestart(restart)
[16:04:56.710]                             muffled <- TRUE
[16:04:56.710]                             break
[16:04:56.710]                           }
[16:04:56.710]                         }
[16:04:56.710]                       }
[16:04:56.710]                       invisible(muffled)
[16:04:56.710]                     }
[16:04:56.710]                     muffleCondition(cond, pattern = "^muffle")
[16:04:56.710]                   }
[16:04:56.710]                 }
[16:04:56.710]                 else {
[16:04:56.710]                   if (TRUE) {
[16:04:56.710]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:04:56.710]                     {
[16:04:56.710]                       inherits <- base::inherits
[16:04:56.710]                       invokeRestart <- base::invokeRestart
[16:04:56.710]                       is.null <- base::is.null
[16:04:56.710]                       muffled <- FALSE
[16:04:56.710]                       if (inherits(cond, "message")) {
[16:04:56.710]                         muffled <- grepl(pattern, "muffleMessage")
[16:04:56.710]                         if (muffled) 
[16:04:56.710]                           invokeRestart("muffleMessage")
[16:04:56.710]                       }
[16:04:56.710]                       else if (inherits(cond, "warning")) {
[16:04:56.710]                         muffled <- grepl(pattern, "muffleWarning")
[16:04:56.710]                         if (muffled) 
[16:04:56.710]                           invokeRestart("muffleWarning")
[16:04:56.710]                       }
[16:04:56.710]                       else if (inherits(cond, "condition")) {
[16:04:56.710]                         if (!is.null(pattern)) {
[16:04:56.710]                           computeRestarts <- base::computeRestarts
[16:04:56.710]                           grepl <- base::grepl
[16:04:56.710]                           restarts <- computeRestarts(cond)
[16:04:56.710]                           for (restart in restarts) {
[16:04:56.710]                             name <- restart$name
[16:04:56.710]                             if (is.null(name)) 
[16:04:56.710]                               next
[16:04:56.710]                             if (!grepl(pattern, name)) 
[16:04:56.710]                               next
[16:04:56.710]                             invokeRestart(restart)
[16:04:56.710]                             muffled <- TRUE
[16:04:56.710]                             break
[16:04:56.710]                           }
[16:04:56.710]                         }
[16:04:56.710]                       }
[16:04:56.710]                       invisible(muffled)
[16:04:56.710]                     }
[16:04:56.710]                     muffleCondition(cond, pattern = "^muffle")
[16:04:56.710]                   }
[16:04:56.710]                 }
[16:04:56.710]             }
[16:04:56.710]         }))
[16:04:56.710]     }, error = function(ex) {
[16:04:56.710]         base::structure(base::list(value = NULL, visible = NULL, 
[16:04:56.710]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:04:56.710]                 ...future.rng), started = ...future.startTime, 
[16:04:56.710]             finished = Sys.time(), session_uuid = NA_character_, 
[16:04:56.710]             version = "1.8"), class = "FutureResult")
[16:04:56.710]     }, finally = {
[16:04:56.710]         if (!identical(...future.workdir, getwd())) 
[16:04:56.710]             setwd(...future.workdir)
[16:04:56.710]         {
[16:04:56.710]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:04:56.710]                 ...future.oldOptions$nwarnings <- NULL
[16:04:56.710]             }
[16:04:56.710]             base::options(...future.oldOptions)
[16:04:56.710]             if (.Platform$OS.type == "windows") {
[16:04:56.710]                 old_names <- names(...future.oldEnvVars)
[16:04:56.710]                 envs <- base::Sys.getenv()
[16:04:56.710]                 names <- names(envs)
[16:04:56.710]                 common <- intersect(names, old_names)
[16:04:56.710]                 added <- setdiff(names, old_names)
[16:04:56.710]                 removed <- setdiff(old_names, names)
[16:04:56.710]                 changed <- common[...future.oldEnvVars[common] != 
[16:04:56.710]                   envs[common]]
[16:04:56.710]                 NAMES <- toupper(changed)
[16:04:56.710]                 args <- list()
[16:04:56.710]                 for (kk in seq_along(NAMES)) {
[16:04:56.710]                   name <- changed[[kk]]
[16:04:56.710]                   NAME <- NAMES[[kk]]
[16:04:56.710]                   if (name != NAME && is.element(NAME, old_names)) 
[16:04:56.710]                     next
[16:04:56.710]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:04:56.710]                 }
[16:04:56.710]                 NAMES <- toupper(added)
[16:04:56.710]                 for (kk in seq_along(NAMES)) {
[16:04:56.710]                   name <- added[[kk]]
[16:04:56.710]                   NAME <- NAMES[[kk]]
[16:04:56.710]                   if (name != NAME && is.element(NAME, old_names)) 
[16:04:56.710]                     next
[16:04:56.710]                   args[[name]] <- ""
[16:04:56.710]                 }
[16:04:56.710]                 NAMES <- toupper(removed)
[16:04:56.710]                 for (kk in seq_along(NAMES)) {
[16:04:56.710]                   name <- removed[[kk]]
[16:04:56.710]                   NAME <- NAMES[[kk]]
[16:04:56.710]                   if (name != NAME && is.element(NAME, old_names)) 
[16:04:56.710]                     next
[16:04:56.710]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:04:56.710]                 }
[16:04:56.710]                 if (length(args) > 0) 
[16:04:56.710]                   base::do.call(base::Sys.setenv, args = args)
[16:04:56.710]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:04:56.710]             }
[16:04:56.710]             else {
[16:04:56.710]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:04:56.710]             }
[16:04:56.710]             {
[16:04:56.710]                 if (base::length(...future.futureOptionsAdded) > 
[16:04:56.710]                   0L) {
[16:04:56.710]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:04:56.710]                   base::names(opts) <- ...future.futureOptionsAdded
[16:04:56.710]                   base::options(opts)
[16:04:56.710]                 }
[16:04:56.710]                 {
[16:04:56.710]                   {
[16:04:56.710]                     NULL
[16:04:56.710]                     RNGkind("Mersenne-Twister")
[16:04:56.710]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[16:04:56.710]                       inherits = FALSE)
[16:04:56.710]                   }
[16:04:56.710]                   options(future.plan = NULL)
[16:04:56.710]                   if (is.na(NA_character_)) 
[16:04:56.710]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:04:56.710]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:04:56.710]                   future::plan(list(function (..., envir = parent.frame()) 
[16:04:56.710]                   {
[16:04:56.710]                     future <- SequentialFuture(..., envir = envir)
[16:04:56.710]                     if (!future$lazy) 
[16:04:56.710]                       future <- run(future)
[16:04:56.710]                     invisible(future)
[16:04:56.710]                   }), .cleanup = FALSE, .init = FALSE)
[16:04:56.710]                 }
[16:04:56.710]             }
[16:04:56.710]         }
[16:04:56.710]     })
[16:04:56.710]     if (TRUE) {
[16:04:56.710]         base::sink(type = "output", split = FALSE)
[16:04:56.710]         if (TRUE) {
[16:04:56.710]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:04:56.710]         }
[16:04:56.710]         else {
[16:04:56.710]             ...future.result["stdout"] <- base::list(NULL)
[16:04:56.710]         }
[16:04:56.710]         base::close(...future.stdout)
[16:04:56.710]         ...future.stdout <- NULL
[16:04:56.710]     }
[16:04:56.710]     ...future.result$conditions <- ...future.conditions
[16:04:56.710]     ...future.result$finished <- base::Sys.time()
[16:04:56.710]     ...future.result
[16:04:56.710] }
[16:04:56.712] plan(): Setting new future strategy stack:
[16:04:56.712] List of future strategies:
[16:04:56.712] 1. sequential:
[16:04:56.712]    - args: function (..., envir = parent.frame())
[16:04:56.712]    - tweaked: FALSE
[16:04:56.712]    - call: NULL
[16:04:56.712] plan(): nbrOfWorkers() = 1
[16:04:56.713] plan(): Setting new future strategy stack:
[16:04:56.713] List of future strategies:
[16:04:56.713] 1. sequential:
[16:04:56.713]    - args: function (..., envir = parent.frame())
[16:04:56.713]    - tweaked: FALSE
[16:04:56.713]    - call: plan(strategy)
[16:04:56.714] plan(): nbrOfWorkers() = 1
[16:04:56.714] SequentialFuture started (and completed)
[16:04:56.715] - Launch lazy future ... done
[16:04:56.715] run() for ‘SequentialFuture’ ... done
[16:04:56.715] getGlobalsAndPackages() ...
Warning: R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘ignore’
[16:04:56.716] Searching for globals...
[16:04:56.716] - globals found: [1] ‘getOption’
[16:04:56.716] Searching for globals ... DONE
[16:04:56.716] Resolving globals: FALSE
[16:04:56.716] 
[16:04:56.717] 
[16:04:56.717] getGlobalsAndPackages() ... DONE
[16:04:56.717] run() for ‘Future’ ...
[16:04:56.717] - state: ‘created’
[16:04:56.717] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[16:04:56.717] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[16:04:56.717] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[16:04:56.718]   - Field: ‘label’
[16:04:56.718]   - Field: ‘local’
[16:04:56.718]   - Field: ‘owner’
[16:04:56.718]   - Field: ‘envir’
[16:04:56.718]   - Field: ‘packages’
[16:04:56.718]   - Field: ‘gc’
[16:04:56.718]   - Field: ‘conditions’
[16:04:56.718]   - Field: ‘expr’
[16:04:56.718]   - Field: ‘uuid’
[16:04:56.718]   - Field: ‘seed’
[16:04:56.719]   - Field: ‘version’
[16:04:56.719]   - Field: ‘result’
[16:04:56.719]   - Field: ‘asynchronous’
[16:04:56.719]   - Field: ‘calls’
[16:04:56.719]   - Field: ‘globals’
[16:04:56.719]   - Field: ‘stdout’
[16:04:56.719]   - Field: ‘earlySignal’
[16:04:56.719]   - Field: ‘lazy’
[16:04:56.719]   - Field: ‘state’
[16:04:56.719] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[16:04:56.719] - Launch lazy future ...
[16:04:56.720] Packages needed by the future expression (n = 0): <none>
[16:04:56.720] Packages needed by future strategies (n = 0): <none>
[16:04:56.720] {
[16:04:56.720]     {
[16:04:56.720]         {
[16:04:56.720]             ...future.startTime <- base::Sys.time()
[16:04:56.720]             {
[16:04:56.720]                 {
[16:04:56.720]                   {
[16:04:56.720]                     base::local({
[16:04:56.720]                       has_future <- base::requireNamespace("future", 
[16:04:56.720]                         quietly = TRUE)
[16:04:56.720]                       if (has_future) {
[16:04:56.720]                         ns <- base::getNamespace("future")
[16:04:56.720]                         version <- ns[[".package"]][["version"]]
[16:04:56.720]                         if (is.null(version)) 
[16:04:56.720]                           version <- utils::packageVersion("future")
[16:04:56.720]                       }
[16:04:56.720]                       else {
[16:04:56.720]                         version <- NULL
[16:04:56.720]                       }
[16:04:56.720]                       if (!has_future || version < "1.8.0") {
[16:04:56.720]                         info <- base::c(r_version = base::gsub("R version ", 
[16:04:56.720]                           "", base::R.version$version.string), 
[16:04:56.720]                           platform = base::sprintf("%s (%s-bit)", 
[16:04:56.720]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:04:56.720]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[16:04:56.720]                             "release", "version")], collapse = " "), 
[16:04:56.720]                           hostname = base::Sys.info()[["nodename"]])
[16:04:56.720]                         info <- base::sprintf("%s: %s", base::names(info), 
[16:04:56.720]                           info)
[16:04:56.720]                         info <- base::paste(info, collapse = "; ")
[16:04:56.720]                         if (!has_future) {
[16:04:56.720]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:04:56.720]                             info)
[16:04:56.720]                         }
[16:04:56.720]                         else {
[16:04:56.720]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:04:56.720]                             info, version)
[16:04:56.720]                         }
[16:04:56.720]                         base::stop(msg)
[16:04:56.720]                       }
[16:04:56.720]                     })
[16:04:56.720]                   }
[16:04:56.720]                   options(future.plan = NULL)
[16:04:56.720]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:04:56.720]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:04:56.720]                 }
[16:04:56.720]                 ...future.workdir <- getwd()
[16:04:56.720]             }
[16:04:56.720]             ...future.oldOptions <- base::as.list(base::.Options)
[16:04:56.720]             ...future.oldEnvVars <- base::Sys.getenv()
[16:04:56.720]         }
[16:04:56.720]         base::options(future.startup.script = FALSE, future.globals.onMissing = "ignore", 
[16:04:56.720]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:04:56.720]             future.globals.onMissing = "ignore", future.globals.onReference = NULL, 
[16:04:56.720]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:04:56.720]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:04:56.720]             future.stdout.windows.reencode = NULL, width = 80L)
[16:04:56.720]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:04:56.720]             base::names(...future.oldOptions))
[16:04:56.720]     }
[16:04:56.720]     if (FALSE) {
[16:04:56.720]     }
[16:04:56.720]     else {
[16:04:56.720]         if (TRUE) {
[16:04:56.720]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:04:56.720]                 open = "w")
[16:04:56.720]         }
[16:04:56.720]         else {
[16:04:56.720]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:04:56.720]                 windows = "NUL", "/dev/null"), open = "w")
[16:04:56.720]         }
[16:04:56.720]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:04:56.720]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:04:56.720]             base::sink(type = "output", split = FALSE)
[16:04:56.720]             base::close(...future.stdout)
[16:04:56.720]         }, add = TRUE)
[16:04:56.720]     }
[16:04:56.720]     ...future.frame <- base::sys.nframe()
[16:04:56.720]     ...future.conditions <- base::list()
[16:04:56.720]     ...future.rng <- base::globalenv()$.Random.seed
[16:04:56.720]     if (FALSE) {
[16:04:56.720]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:04:56.720]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:04:56.720]     }
[16:04:56.720]     ...future.result <- base::tryCatch({
[16:04:56.720]         base::withCallingHandlers({
[16:04:56.720]             ...future.value <- base::withVisible(base::local(getOption("future.globals.onMissing")))
[16:04:56.720]             future::FutureResult(value = ...future.value$value, 
[16:04:56.720]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:04:56.720]                   ...future.rng), globalenv = if (FALSE) 
[16:04:56.720]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:04:56.720]                     ...future.globalenv.names))
[16:04:56.720]                 else NULL, started = ...future.startTime, version = "1.8")
[16:04:56.720]         }, condition = base::local({
[16:04:56.720]             c <- base::c
[16:04:56.720]             inherits <- base::inherits
[16:04:56.720]             invokeRestart <- base::invokeRestart
[16:04:56.720]             length <- base::length
[16:04:56.720]             list <- base::list
[16:04:56.720]             seq.int <- base::seq.int
[16:04:56.720]             signalCondition <- base::signalCondition
[16:04:56.720]             sys.calls <- base::sys.calls
[16:04:56.720]             `[[` <- base::`[[`
[16:04:56.720]             `+` <- base::`+`
[16:04:56.720]             `<<-` <- base::`<<-`
[16:04:56.720]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:04:56.720]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:04:56.720]                   3L)]
[16:04:56.720]             }
[16:04:56.720]             function(cond) {
[16:04:56.720]                 is_error <- inherits(cond, "error")
[16:04:56.720]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:04:56.720]                   NULL)
[16:04:56.720]                 if (is_error) {
[16:04:56.720]                   sessionInformation <- function() {
[16:04:56.720]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:04:56.720]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:04:56.720]                       search = base::search(), system = base::Sys.info())
[16:04:56.720]                   }
[16:04:56.720]                   ...future.conditions[[length(...future.conditions) + 
[16:04:56.720]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:04:56.720]                     cond$call), session = sessionInformation(), 
[16:04:56.720]                     timestamp = base::Sys.time(), signaled = 0L)
[16:04:56.720]                   signalCondition(cond)
[16:04:56.720]                 }
[16:04:56.720]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:04:56.720]                 "immediateCondition"))) {
[16:04:56.720]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:04:56.720]                   ...future.conditions[[length(...future.conditions) + 
[16:04:56.720]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:04:56.720]                   if (TRUE && !signal) {
[16:04:56.720]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:04:56.720]                     {
[16:04:56.720]                       inherits <- base::inherits
[16:04:56.720]                       invokeRestart <- base::invokeRestart
[16:04:56.720]                       is.null <- base::is.null
[16:04:56.720]                       muffled <- FALSE
[16:04:56.720]                       if (inherits(cond, "message")) {
[16:04:56.720]                         muffled <- grepl(pattern, "muffleMessage")
[16:04:56.720]                         if (muffled) 
[16:04:56.720]                           invokeRestart("muffleMessage")
[16:04:56.720]                       }
[16:04:56.720]                       else if (inherits(cond, "warning")) {
[16:04:56.720]                         muffled <- grepl(pattern, "muffleWarning")
[16:04:56.720]                         if (muffled) 
[16:04:56.720]                           invokeRestart("muffleWarning")
[16:04:56.720]                       }
[16:04:56.720]                       else if (inherits(cond, "condition")) {
[16:04:56.720]                         if (!is.null(pattern)) {
[16:04:56.720]                           computeRestarts <- base::computeRestarts
[16:04:56.720]                           grepl <- base::grepl
[16:04:56.720]                           restarts <- computeRestarts(cond)
[16:04:56.720]                           for (restart in restarts) {
[16:04:56.720]                             name <- restart$name
[16:04:56.720]                             if (is.null(name)) 
[16:04:56.720]                               next
[16:04:56.720]                             if (!grepl(pattern, name)) 
[16:04:56.720]                               next
[16:04:56.720]                             invokeRestart(restart)
[16:04:56.720]                             muffled <- TRUE
[16:04:56.720]                             break
[16:04:56.720]                           }
[16:04:56.720]                         }
[16:04:56.720]                       }
[16:04:56.720]                       invisible(muffled)
[16:04:56.720]                     }
[16:04:56.720]                     muffleCondition(cond, pattern = "^muffle")
[16:04:56.720]                   }
[16:04:56.720]                 }
[16:04:56.720]                 else {
[16:04:56.720]                   if (TRUE) {
[16:04:56.720]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:04:56.720]                     {
[16:04:56.720]                       inherits <- base::inherits
[16:04:56.720]                       invokeRestart <- base::invokeRestart
[16:04:56.720]                       is.null <- base::is.null
[16:04:56.720]                       muffled <- FALSE
[16:04:56.720]                       if (inherits(cond, "message")) {
[16:04:56.720]                         muffled <- grepl(pattern, "muffleMessage")
[16:04:56.720]                         if (muffled) 
[16:04:56.720]                           invokeRestart("muffleMessage")
[16:04:56.720]                       }
[16:04:56.720]                       else if (inherits(cond, "warning")) {
[16:04:56.720]                         muffled <- grepl(pattern, "muffleWarning")
[16:04:56.720]                         if (muffled) 
[16:04:56.720]                           invokeRestart("muffleWarning")
[16:04:56.720]                       }
[16:04:56.720]                       else if (inherits(cond, "condition")) {
[16:04:56.720]                         if (!is.null(pattern)) {
[16:04:56.720]                           computeRestarts <- base::computeRestarts
[16:04:56.720]                           grepl <- base::grepl
[16:04:56.720]                           restarts <- computeRestarts(cond)
[16:04:56.720]                           for (restart in restarts) {
[16:04:56.720]                             name <- restart$name
[16:04:56.720]                             if (is.null(name)) 
[16:04:56.720]                               next
[16:04:56.720]                             if (!grepl(pattern, name)) 
[16:04:56.720]                               next
[16:04:56.720]                             invokeRestart(restart)
[16:04:56.720]                             muffled <- TRUE
[16:04:56.720]                             break
[16:04:56.720]                           }
[16:04:56.720]                         }
[16:04:56.720]                       }
[16:04:56.720]                       invisible(muffled)
[16:04:56.720]                     }
[16:04:56.720]                     muffleCondition(cond, pattern = "^muffle")
[16:04:56.720]                   }
[16:04:56.720]                 }
[16:04:56.720]             }
[16:04:56.720]         }))
[16:04:56.720]     }, error = function(ex) {
[16:04:56.720]         base::structure(base::list(value = NULL, visible = NULL, 
[16:04:56.720]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:04:56.720]                 ...future.rng), started = ...future.startTime, 
[16:04:56.720]             finished = Sys.time(), session_uuid = NA_character_, 
[16:04:56.720]             version = "1.8"), class = "FutureResult")
[16:04:56.720]     }, finally = {
[16:04:56.720]         if (!identical(...future.workdir, getwd())) 
[16:04:56.720]             setwd(...future.workdir)
[16:04:56.720]         {
[16:04:56.720]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:04:56.720]                 ...future.oldOptions$nwarnings <- NULL
[16:04:56.720]             }
[16:04:56.720]             base::options(...future.oldOptions)
[16:04:56.720]             if (.Platform$OS.type == "windows") {
[16:04:56.720]                 old_names <- names(...future.oldEnvVars)
[16:04:56.720]                 envs <- base::Sys.getenv()
[16:04:56.720]                 names <- names(envs)
[16:04:56.720]                 common <- intersect(names, old_names)
[16:04:56.720]                 added <- setdiff(names, old_names)
[16:04:56.720]                 removed <- setdiff(old_names, names)
[16:04:56.720]                 changed <- common[...future.oldEnvVars[common] != 
[16:04:56.720]                   envs[common]]
[16:04:56.720]                 NAMES <- toupper(changed)
[16:04:56.720]                 args <- list()
[16:04:56.720]                 for (kk in seq_along(NAMES)) {
[16:04:56.720]                   name <- changed[[kk]]
[16:04:56.720]                   NAME <- NAMES[[kk]]
[16:04:56.720]                   if (name != NAME && is.element(NAME, old_names)) 
[16:04:56.720]                     next
[16:04:56.720]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:04:56.720]                 }
[16:04:56.720]                 NAMES <- toupper(added)
[16:04:56.720]                 for (kk in seq_along(NAMES)) {
[16:04:56.720]                   name <- added[[kk]]
[16:04:56.720]                   NAME <- NAMES[[kk]]
[16:04:56.720]                   if (name != NAME && is.element(NAME, old_names)) 
[16:04:56.720]                     next
[16:04:56.720]                   args[[name]] <- ""
[16:04:56.720]                 }
[16:04:56.720]                 NAMES <- toupper(removed)
[16:04:56.720]                 for (kk in seq_along(NAMES)) {
[16:04:56.720]                   name <- removed[[kk]]
[16:04:56.720]                   NAME <- NAMES[[kk]]
[16:04:56.720]                   if (name != NAME && is.element(NAME, old_names)) 
[16:04:56.720]                     next
[16:04:56.720]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:04:56.720]                 }
[16:04:56.720]                 if (length(args) > 0) 
[16:04:56.720]                   base::do.call(base::Sys.setenv, args = args)
[16:04:56.720]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:04:56.720]             }
[16:04:56.720]             else {
[16:04:56.720]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:04:56.720]             }
[16:04:56.720]             {
[16:04:56.720]                 if (base::length(...future.futureOptionsAdded) > 
[16:04:56.720]                   0L) {
[16:04:56.720]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:04:56.720]                   base::names(opts) <- ...future.futureOptionsAdded
[16:04:56.720]                   base::options(opts)
[16:04:56.720]                 }
[16:04:56.720]                 {
[16:04:56.720]                   {
[16:04:56.720]                     NULL
[16:04:56.720]                     RNGkind("Mersenne-Twister")
[16:04:56.720]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[16:04:56.720]                       inherits = FALSE)
[16:04:56.720]                   }
[16:04:56.720]                   options(future.plan = NULL)
[16:04:56.720]                   if (is.na(NA_character_)) 
[16:04:56.720]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:04:56.720]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:04:56.720]                   future::plan(list(function (..., envir = parent.frame()) 
[16:04:56.720]                   {
[16:04:56.720]                     future <- SequentialFuture(..., envir = envir)
[16:04:56.720]                     if (!future$lazy) 
[16:04:56.720]                       future <- run(future)
[16:04:56.720]                     invisible(future)
[16:04:56.720]                   }), .cleanup = FALSE, .init = FALSE)
[16:04:56.720]                 }
[16:04:56.720]             }
[16:04:56.720]         }
[16:04:56.720]     })
[16:04:56.720]     if (TRUE) {
[16:04:56.720]         base::sink(type = "output", split = FALSE)
[16:04:56.720]         if (TRUE) {
[16:04:56.720]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:04:56.720]         }
[16:04:56.720]         else {
[16:04:56.720]             ...future.result["stdout"] <- base::list(NULL)
[16:04:56.720]         }
[16:04:56.720]         base::close(...future.stdout)
[16:04:56.720]         ...future.stdout <- NULL
[16:04:56.720]     }
[16:04:56.720]     ...future.result$conditions <- ...future.conditions
[16:04:56.720]     ...future.result$finished <- base::Sys.time()
[16:04:56.720]     ...future.result
[16:04:56.720] }
[16:04:56.722] plan(): Setting new future strategy stack:
[16:04:56.722] List of future strategies:
[16:04:56.722] 1. sequential:
[16:04:56.722]    - args: function (..., envir = parent.frame())
[16:04:56.722]    - tweaked: FALSE
[16:04:56.722]    - call: NULL
[16:04:56.722] plan(): nbrOfWorkers() = 1
[16:04:56.723] plan(): Setting new future strategy stack:
[16:04:56.723] List of future strategies:
[16:04:56.723] 1. sequential:
[16:04:56.723]    - args: function (..., envir = parent.frame())
[16:04:56.723]    - tweaked: FALSE
[16:04:56.723]    - call: plan(strategy)
[16:04:56.724] plan(): nbrOfWorkers() = 1
[16:04:56.724] SequentialFuture started (and completed)
[16:04:56.724] - Launch lazy future ... done
[16:04:56.724] run() for ‘SequentialFuture’ ... done
[16:04:56.724] getGlobalsAndPackages() ...
Warning: R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘error’
[16:04:56.724] Searching for globals...
[16:04:56.726] getGlobalsAndPackages() ...
Warning: R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘ignore’
[16:04:56.726] Searching for globals...
[16:04:56.727] - globals found: [5] ‘$’, ‘subset’, ‘data’, ‘<’, ‘x’
[16:04:56.727] Searching for globals ... DONE
[16:04:56.727] Resolving globals: FALSE
[16:04:56.731] The total size of the 1 globals is 160 bytes (160 bytes)
[16:04:56.731] The total size of the 1 globals exported for future expression (‘subset(data, x < 3)$y’) is 160 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘data’ (160 bytes of class ‘list’)
[16:04:56.731] - globals: [1] ‘data’
[16:04:56.731] 
[16:04:56.732] getGlobalsAndPackages() ... DONE
[16:04:56.732] run() for ‘Future’ ...
[16:04:56.732] - state: ‘created’
[16:04:56.732] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[16:04:56.732] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[16:04:56.732] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[16:04:56.733]   - Field: ‘label’
[16:04:56.733]   - Field: ‘local’
[16:04:56.733]   - Field: ‘owner’
[16:04:56.733]   - Field: ‘envir’
[16:04:56.733]   - Field: ‘packages’
[16:04:56.733]   - Field: ‘gc’
[16:04:56.733]   - Field: ‘conditions’
[16:04:56.733]   - Field: ‘expr’
[16:04:56.733]   - Field: ‘uuid’
[16:04:56.733]   - Field: ‘seed’
[16:04:56.733]   - Field: ‘version’
[16:04:56.734]   - Field: ‘result’
[16:04:56.734]   - Field: ‘asynchronous’
[16:04:56.734]   - Field: ‘calls’
[16:04:56.734]   - Field: ‘globals’
[16:04:56.734]   - Field: ‘stdout’
[16:04:56.734]   - Field: ‘earlySignal’
[16:04:56.734]   - Field: ‘lazy’
[16:04:56.734]   - Field: ‘state’
[16:04:56.734] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[16:04:56.734] - Launch lazy future ...
[16:04:56.735] Packages needed by the future expression (n = 0): <none>
[16:04:56.735] Packages needed by future strategies (n = 0): <none>
[16:04:56.735] {
[16:04:56.735]     {
[16:04:56.735]         {
[16:04:56.735]             ...future.startTime <- base::Sys.time()
[16:04:56.735]             {
[16:04:56.735]                 {
[16:04:56.735]                   {
[16:04:56.735]                     base::local({
[16:04:56.735]                       has_future <- base::requireNamespace("future", 
[16:04:56.735]                         quietly = TRUE)
[16:04:56.735]                       if (has_future) {
[16:04:56.735]                         ns <- base::getNamespace("future")
[16:04:56.735]                         version <- ns[[".package"]][["version"]]
[16:04:56.735]                         if (is.null(version)) 
[16:04:56.735]                           version <- utils::packageVersion("future")
[16:04:56.735]                       }
[16:04:56.735]                       else {
[16:04:56.735]                         version <- NULL
[16:04:56.735]                       }
[16:04:56.735]                       if (!has_future || version < "1.8.0") {
[16:04:56.735]                         info <- base::c(r_version = base::gsub("R version ", 
[16:04:56.735]                           "", base::R.version$version.string), 
[16:04:56.735]                           platform = base::sprintf("%s (%s-bit)", 
[16:04:56.735]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:04:56.735]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[16:04:56.735]                             "release", "version")], collapse = " "), 
[16:04:56.735]                           hostname = base::Sys.info()[["nodename"]])
[16:04:56.735]                         info <- base::sprintf("%s: %s", base::names(info), 
[16:04:56.735]                           info)
[16:04:56.735]                         info <- base::paste(info, collapse = "; ")
[16:04:56.735]                         if (!has_future) {
[16:04:56.735]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:04:56.735]                             info)
[16:04:56.735]                         }
[16:04:56.735]                         else {
[16:04:56.735]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:04:56.735]                             info, version)
[16:04:56.735]                         }
[16:04:56.735]                         base::stop(msg)
[16:04:56.735]                       }
[16:04:56.735]                     })
[16:04:56.735]                   }
[16:04:56.735]                   options(future.plan = NULL)
[16:04:56.735]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:04:56.735]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:04:56.735]                 }
[16:04:56.735]                 ...future.workdir <- getwd()
[16:04:56.735]             }
[16:04:56.735]             ...future.oldOptions <- base::as.list(base::.Options)
[16:04:56.735]             ...future.oldEnvVars <- base::Sys.getenv()
[16:04:56.735]         }
[16:04:56.735]         base::options(future.startup.script = FALSE, future.globals.onMissing = "ignore", 
[16:04:56.735]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:04:56.735]             future.globals.onMissing = "ignore", future.globals.onReference = NULL, 
[16:04:56.735]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:04:56.735]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:04:56.735]             future.stdout.windows.reencode = NULL, width = 80L)
[16:04:56.735]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:04:56.735]             base::names(...future.oldOptions))
[16:04:56.735]     }
[16:04:56.735]     if (FALSE) {
[16:04:56.735]     }
[16:04:56.735]     else {
[16:04:56.735]         if (TRUE) {
[16:04:56.735]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:04:56.735]                 open = "w")
[16:04:56.735]         }
[16:04:56.735]         else {
[16:04:56.735]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:04:56.735]                 windows = "NUL", "/dev/null"), open = "w")
[16:04:56.735]         }
[16:04:56.735]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:04:56.735]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:04:56.735]             base::sink(type = "output", split = FALSE)
[16:04:56.735]             base::close(...future.stdout)
[16:04:56.735]         }, add = TRUE)
[16:04:56.735]     }
[16:04:56.735]     ...future.frame <- base::sys.nframe()
[16:04:56.735]     ...future.conditions <- base::list()
[16:04:56.735]     ...future.rng <- base::globalenv()$.Random.seed
[16:04:56.735]     if (FALSE) {
[16:04:56.735]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:04:56.735]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:04:56.735]     }
[16:04:56.735]     ...future.result <- base::tryCatch({
[16:04:56.735]         base::withCallingHandlers({
[16:04:56.735]             ...future.value <- base::withVisible(base::local(subset(data, 
[16:04:56.735]                 x < 3)$y))
[16:04:56.735]             future::FutureResult(value = ...future.value$value, 
[16:04:56.735]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:04:56.735]                   ...future.rng), globalenv = if (FALSE) 
[16:04:56.735]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:04:56.735]                     ...future.globalenv.names))
[16:04:56.735]                 else NULL, started = ...future.startTime, version = "1.8")
[16:04:56.735]         }, condition = base::local({
[16:04:56.735]             c <- base::c
[16:04:56.735]             inherits <- base::inherits
[16:04:56.735]             invokeRestart <- base::invokeRestart
[16:04:56.735]             length <- base::length
[16:04:56.735]             list <- base::list
[16:04:56.735]             seq.int <- base::seq.int
[16:04:56.735]             signalCondition <- base::signalCondition
[16:04:56.735]             sys.calls <- base::sys.calls
[16:04:56.735]             `[[` <- base::`[[`
[16:04:56.735]             `+` <- base::`+`
[16:04:56.735]             `<<-` <- base::`<<-`
[16:04:56.735]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:04:56.735]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:04:56.735]                   3L)]
[16:04:56.735]             }
[16:04:56.735]             function(cond) {
[16:04:56.735]                 is_error <- inherits(cond, "error")
[16:04:56.735]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:04:56.735]                   NULL)
[16:04:56.735]                 if (is_error) {
[16:04:56.735]                   sessionInformation <- function() {
[16:04:56.735]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:04:56.735]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:04:56.735]                       search = base::search(), system = base::Sys.info())
[16:04:56.735]                   }
[16:04:56.735]                   ...future.conditions[[length(...future.conditions) + 
[16:04:56.735]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:04:56.735]                     cond$call), session = sessionInformation(), 
[16:04:56.735]                     timestamp = base::Sys.time(), signaled = 0L)
[16:04:56.735]                   signalCondition(cond)
[16:04:56.735]                 }
[16:04:56.735]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:04:56.735]                 "immediateCondition"))) {
[16:04:56.735]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:04:56.735]                   ...future.conditions[[length(...future.conditions) + 
[16:04:56.735]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:04:56.735]                   if (TRUE && !signal) {
[16:04:56.735]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:04:56.735]                     {
[16:04:56.735]                       inherits <- base::inherits
[16:04:56.735]                       invokeRestart <- base::invokeRestart
[16:04:56.735]                       is.null <- base::is.null
[16:04:56.735]                       muffled <- FALSE
[16:04:56.735]                       if (inherits(cond, "message")) {
[16:04:56.735]                         muffled <- grepl(pattern, "muffleMessage")
[16:04:56.735]                         if (muffled) 
[16:04:56.735]                           invokeRestart("muffleMessage")
[16:04:56.735]                       }
[16:04:56.735]                       else if (inherits(cond, "warning")) {
[16:04:56.735]                         muffled <- grepl(pattern, "muffleWarning")
[16:04:56.735]                         if (muffled) 
[16:04:56.735]                           invokeRestart("muffleWarning")
[16:04:56.735]                       }
[16:04:56.735]                       else if (inherits(cond, "condition")) {
[16:04:56.735]                         if (!is.null(pattern)) {
[16:04:56.735]                           computeRestarts <- base::computeRestarts
[16:04:56.735]                           grepl <- base::grepl
[16:04:56.735]                           restarts <- computeRestarts(cond)
[16:04:56.735]                           for (restart in restarts) {
[16:04:56.735]                             name <- restart$name
[16:04:56.735]                             if (is.null(name)) 
[16:04:56.735]                               next
[16:04:56.735]                             if (!grepl(pattern, name)) 
[16:04:56.735]                               next
[16:04:56.735]                             invokeRestart(restart)
[16:04:56.735]                             muffled <- TRUE
[16:04:56.735]                             break
[16:04:56.735]                           }
[16:04:56.735]                         }
[16:04:56.735]                       }
[16:04:56.735]                       invisible(muffled)
[16:04:56.735]                     }
[16:04:56.735]                     muffleCondition(cond, pattern = "^muffle")
[16:04:56.735]                   }
[16:04:56.735]                 }
[16:04:56.735]                 else {
[16:04:56.735]                   if (TRUE) {
[16:04:56.735]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:04:56.735]                     {
[16:04:56.735]                       inherits <- base::inherits
[16:04:56.735]                       invokeRestart <- base::invokeRestart
[16:04:56.735]                       is.null <- base::is.null
[16:04:56.735]                       muffled <- FALSE
[16:04:56.735]                       if (inherits(cond, "message")) {
[16:04:56.735]                         muffled <- grepl(pattern, "muffleMessage")
[16:04:56.735]                         if (muffled) 
[16:04:56.735]                           invokeRestart("muffleMessage")
[16:04:56.735]                       }
[16:04:56.735]                       else if (inherits(cond, "warning")) {
[16:04:56.735]                         muffled <- grepl(pattern, "muffleWarning")
[16:04:56.735]                         if (muffled) 
[16:04:56.735]                           invokeRestart("muffleWarning")
[16:04:56.735]                       }
[16:04:56.735]                       else if (inherits(cond, "condition")) {
[16:04:56.735]                         if (!is.null(pattern)) {
[16:04:56.735]                           computeRestarts <- base::computeRestarts
[16:04:56.735]                           grepl <- base::grepl
[16:04:56.735]                           restarts <- computeRestarts(cond)
[16:04:56.735]                           for (restart in restarts) {
[16:04:56.735]                             name <- restart$name
[16:04:56.735]                             if (is.null(name)) 
[16:04:56.735]                               next
[16:04:56.735]                             if (!grepl(pattern, name)) 
[16:04:56.735]                               next
[16:04:56.735]                             invokeRestart(restart)
[16:04:56.735]                             muffled <- TRUE
[16:04:56.735]                             break
[16:04:56.735]                           }
[16:04:56.735]                         }
[16:04:56.735]                       }
[16:04:56.735]                       invisible(muffled)
[16:04:56.735]                     }
[16:04:56.735]                     muffleCondition(cond, pattern = "^muffle")
[16:04:56.735]                   }
[16:04:56.735]                 }
[16:04:56.735]             }
[16:04:56.735]         }))
[16:04:56.735]     }, error = function(ex) {
[16:04:56.735]         base::structure(base::list(value = NULL, visible = NULL, 
[16:04:56.735]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:04:56.735]                 ...future.rng), started = ...future.startTime, 
[16:04:56.735]             finished = Sys.time(), session_uuid = NA_character_, 
[16:04:56.735]             version = "1.8"), class = "FutureResult")
[16:04:56.735]     }, finally = {
[16:04:56.735]         if (!identical(...future.workdir, getwd())) 
[16:04:56.735]             setwd(...future.workdir)
[16:04:56.735]         {
[16:04:56.735]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:04:56.735]                 ...future.oldOptions$nwarnings <- NULL
[16:04:56.735]             }
[16:04:56.735]             base::options(...future.oldOptions)
[16:04:56.735]             if (.Platform$OS.type == "windows") {
[16:04:56.735]                 old_names <- names(...future.oldEnvVars)
[16:04:56.735]                 envs <- base::Sys.getenv()
[16:04:56.735]                 names <- names(envs)
[16:04:56.735]                 common <- intersect(names, old_names)
[16:04:56.735]                 added <- setdiff(names, old_names)
[16:04:56.735]                 removed <- setdiff(old_names, names)
[16:04:56.735]                 changed <- common[...future.oldEnvVars[common] != 
[16:04:56.735]                   envs[common]]
[16:04:56.735]                 NAMES <- toupper(changed)
[16:04:56.735]                 args <- list()
[16:04:56.735]                 for (kk in seq_along(NAMES)) {
[16:04:56.735]                   name <- changed[[kk]]
[16:04:56.735]                   NAME <- NAMES[[kk]]
[16:04:56.735]                   if (name != NAME && is.element(NAME, old_names)) 
[16:04:56.735]                     next
[16:04:56.735]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:04:56.735]                 }
[16:04:56.735]                 NAMES <- toupper(added)
[16:04:56.735]                 for (kk in seq_along(NAMES)) {
[16:04:56.735]                   name <- added[[kk]]
[16:04:56.735]                   NAME <- NAMES[[kk]]
[16:04:56.735]                   if (name != NAME && is.element(NAME, old_names)) 
[16:04:56.735]                     next
[16:04:56.735]                   args[[name]] <- ""
[16:04:56.735]                 }
[16:04:56.735]                 NAMES <- toupper(removed)
[16:04:56.735]                 for (kk in seq_along(NAMES)) {
[16:04:56.735]                   name <- removed[[kk]]
[16:04:56.735]                   NAME <- NAMES[[kk]]
[16:04:56.735]                   if (name != NAME && is.element(NAME, old_names)) 
[16:04:56.735]                     next
[16:04:56.735]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:04:56.735]                 }
[16:04:56.735]                 if (length(args) > 0) 
[16:04:56.735]                   base::do.call(base::Sys.setenv, args = args)
[16:04:56.735]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:04:56.735]             }
[16:04:56.735]             else {
[16:04:56.735]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:04:56.735]             }
[16:04:56.735]             {
[16:04:56.735]                 if (base::length(...future.futureOptionsAdded) > 
[16:04:56.735]                   0L) {
[16:04:56.735]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:04:56.735]                   base::names(opts) <- ...future.futureOptionsAdded
[16:04:56.735]                   base::options(opts)
[16:04:56.735]                 }
[16:04:56.735]                 {
[16:04:56.735]                   {
[16:04:56.735]                     NULL
[16:04:56.735]                     RNGkind("Mersenne-Twister")
[16:04:56.735]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[16:04:56.735]                       inherits = FALSE)
[16:04:56.735]                   }
[16:04:56.735]                   options(future.plan = NULL)
[16:04:56.735]                   if (is.na(NA_character_)) 
[16:04:56.735]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:04:56.735]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:04:56.735]                   future::plan(list(function (..., envir = parent.frame()) 
[16:04:56.735]                   {
[16:04:56.735]                     future <- SequentialFuture(..., envir = envir)
[16:04:56.735]                     if (!future$lazy) 
[16:04:56.735]                       future <- run(future)
[16:04:56.735]                     invisible(future)
[16:04:56.735]                   }), .cleanup = FALSE, .init = FALSE)
[16:04:56.735]                 }
[16:04:56.735]             }
[16:04:56.735]         }
[16:04:56.735]     })
[16:04:56.735]     if (TRUE) {
[16:04:56.735]         base::sink(type = "output", split = FALSE)
[16:04:56.735]         if (TRUE) {
[16:04:56.735]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:04:56.735]         }
[16:04:56.735]         else {
[16:04:56.735]             ...future.result["stdout"] <- base::list(NULL)
[16:04:56.735]         }
[16:04:56.735]         base::close(...future.stdout)
[16:04:56.735]         ...future.stdout <- NULL
[16:04:56.735]     }
[16:04:56.735]     ...future.result$conditions <- ...future.conditions
[16:04:56.735]     ...future.result$finished <- base::Sys.time()
[16:04:56.735]     ...future.result
[16:04:56.735] }
[16:04:56.737] assign_globals() ...
[16:04:56.737] List of 1
[16:04:56.737]  $ data:'data.frame':	5 obs. of  2 variables:
[16:04:56.737]   ..$ x: int [1:5] 1 2 3 4 5
[16:04:56.737]   ..$ y: int [1:5] 1 2 3 4 5
[16:04:56.737]  - attr(*, "where")=List of 1
[16:04:56.737]   ..$ data:<environment: R_EmptyEnv> 
[16:04:56.737]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[16:04:56.737]  - attr(*, "resolved")= logi FALSE
[16:04:56.737]  - attr(*, "total_size")= num 160
[16:04:56.737]  - attr(*, "already-done")= logi TRUE
[16:04:56.743] - copied ‘data’ to environment
[16:04:56.743] assign_globals() ... done
[16:04:56.743] plan(): Setting new future strategy stack:
[16:04:56.743] List of future strategies:
[16:04:56.743] 1. sequential:
[16:04:56.743]    - args: function (..., envir = parent.frame())
[16:04:56.743]    - tweaked: FALSE
[16:04:56.743]    - call: NULL
[16:04:56.744] plan(): nbrOfWorkers() = 1
[16:04:56.744] plan(): Setting new future strategy stack:
[16:04:56.745] List of future strategies:
[16:04:56.745] 1. sequential:
[16:04:56.745]    - args: function (..., envir = parent.frame())
[16:04:56.745]    - tweaked: FALSE
[16:04:56.745]    - call: plan(strategy)
[16:04:56.745] plan(): nbrOfWorkers() = 1
[16:04:56.745] SequentialFuture started (and completed)
[16:04:56.745] - Launch lazy future ... done
[16:04:56.745] run() for ‘SequentialFuture’ ... done
[16:04:56.746] plan(): Setting new future strategy stack:
[16:04:56.746] List of future strategies:
[16:04:56.746] 1. sequential:
[16:04:56.746]    - args: function (..., envir = parent.frame())
[16:04:56.746]    - tweaked: FALSE
[16:04:56.746]    - call: plan(list(sequential, strategy))
[16:04:56.746] 2. sequential:
[16:04:56.746]    - args: function (..., envir = parent.frame())
[16:04:56.746]    - tweaked: FALSE
[16:04:56.746]    - call: plan(list(sequential, strategy))
[16:04:56.746] plan(): nbrOfWorkers() = 1
[16:04:56.746] getGlobalsAndPackages() ...
Warning: R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘ignore’
[16:04:56.747] Searching for globals...
[16:04:56.752] - globals found: [8] ‘{’, ‘<-’, ‘$’, ‘subset’, ‘data’, ‘<’, ‘x’, ‘%<-%’
[16:04:56.752] Searching for globals ... DONE
[16:04:56.752] Resolving globals: FALSE
[16:04:56.753] The total size of the 1 globals is 160 bytes (160 bytes)
[16:04:56.753] The total size of the 1 globals exported for future expression (‘{; a %<-% subset(data, x < 3)$y; a; }’) is 160 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘data’ (160 bytes of class ‘list’)
[16:04:56.753] - globals: [1] ‘data’
[16:04:56.753] - packages: [1] ‘future’
[16:04:56.753] getGlobalsAndPackages() ... DONE
[16:04:56.754] run() for ‘Future’ ...
[16:04:56.754] - state: ‘created’
[16:04:56.754] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[16:04:56.754] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[16:04:56.754] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[16:04:56.754]   - Field: ‘label’
[16:04:56.754]   - Field: ‘local’
[16:04:56.755]   - Field: ‘owner’
[16:04:56.755]   - Field: ‘envir’
[16:04:56.755]   - Field: ‘packages’
[16:04:56.755]   - Field: ‘gc’
[16:04:56.755]   - Field: ‘conditions’
[16:04:56.755]   - Field: ‘expr’
[16:04:56.755]   - Field: ‘uuid’
[16:04:56.755]   - Field: ‘seed’
[16:04:56.755]   - Field: ‘version’
[16:04:56.755]   - Field: ‘result’
[16:04:56.756]   - Field: ‘asynchronous’
[16:04:56.756]   - Field: ‘calls’
[16:04:56.756]   - Field: ‘globals’
[16:04:56.756]   - Field: ‘stdout’
[16:04:56.756]   - Field: ‘earlySignal’
[16:04:56.756]   - Field: ‘lazy’
[16:04:56.756]   - Field: ‘state’
[16:04:56.756] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[16:04:56.756] - Launch lazy future ...
[16:04:56.756] Packages needed by the future expression (n = 1): ‘future’
[16:04:56.757] Packages needed by future strategies (n = 1): ‘future’
[16:04:56.757] {
[16:04:56.757]     {
[16:04:56.757]         {
[16:04:56.757]             ...future.startTime <- base::Sys.time()
[16:04:56.757]             {
[16:04:56.757]                 {
[16:04:56.757]                   {
[16:04:56.757]                     {
[16:04:56.757]                       base::local({
[16:04:56.757]                         has_future <- base::requireNamespace("future", 
[16:04:56.757]                           quietly = TRUE)
[16:04:56.757]                         if (has_future) {
[16:04:56.757]                           ns <- base::getNamespace("future")
[16:04:56.757]                           version <- ns[[".package"]][["version"]]
[16:04:56.757]                           if (is.null(version)) 
[16:04:56.757]                             version <- utils::packageVersion("future")
[16:04:56.757]                         }
[16:04:56.757]                         else {
[16:04:56.757]                           version <- NULL
[16:04:56.757]                         }
[16:04:56.757]                         if (!has_future || version < "1.8.0") {
[16:04:56.757]                           info <- base::c(r_version = base::gsub("R version ", 
[16:04:56.757]                             "", base::R.version$version.string), 
[16:04:56.757]                             platform = base::sprintf("%s (%s-bit)", 
[16:04:56.757]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:04:56.757]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[16:04:56.757]                               "release", "version")], collapse = " "), 
[16:04:56.757]                             hostname = base::Sys.info()[["nodename"]])
[16:04:56.757]                           info <- base::sprintf("%s: %s", base::names(info), 
[16:04:56.757]                             info)
[16:04:56.757]                           info <- base::paste(info, collapse = "; ")
[16:04:56.757]                           if (!has_future) {
[16:04:56.757]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:04:56.757]                               info)
[16:04:56.757]                           }
[16:04:56.757]                           else {
[16:04:56.757]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:04:56.757]                               info, version)
[16:04:56.757]                           }
[16:04:56.757]                           base::stop(msg)
[16:04:56.757]                         }
[16:04:56.757]                       })
[16:04:56.757]                     }
[16:04:56.757]                     base::local({
[16:04:56.757]                       for (pkg in "future") {
[16:04:56.757]                         base::loadNamespace(pkg)
[16:04:56.757]                         base::library(pkg, character.only = TRUE)
[16:04:56.757]                       }
[16:04:56.757]                     })
[16:04:56.757]                   }
[16:04:56.757]                   options(future.plan = NULL)
[16:04:56.757]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:04:56.757]                   future::plan(list(function (..., envir = parent.frame()) 
[16:04:56.757]                   {
[16:04:56.757]                     future <- SequentialFuture(..., envir = envir)
[16:04:56.757]                     if (!future$lazy) 
[16:04:56.757]                       future <- run(future)
[16:04:56.757]                     invisible(future)
[16:04:56.757]                   }), .cleanup = FALSE, .init = FALSE)
[16:04:56.757]                 }
[16:04:56.757]                 ...future.workdir <- getwd()
[16:04:56.757]             }
[16:04:56.757]             ...future.oldOptions <- base::as.list(base::.Options)
[16:04:56.757]             ...future.oldEnvVars <- base::Sys.getenv()
[16:04:56.757]         }
[16:04:56.757]         base::options(future.startup.script = FALSE, future.globals.onMissing = "ignore", 
[16:04:56.757]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:04:56.757]             future.globals.onMissing = "ignore", future.globals.onReference = NULL, 
[16:04:56.757]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:04:56.757]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:04:56.757]             future.stdout.windows.reencode = NULL, width = 80L)
[16:04:56.757]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:04:56.757]             base::names(...future.oldOptions))
[16:04:56.757]     }
[16:04:56.757]     if (FALSE) {
[16:04:56.757]     }
[16:04:56.757]     else {
[16:04:56.757]         if (TRUE) {
[16:04:56.757]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:04:56.757]                 open = "w")
[16:04:56.757]         }
[16:04:56.757]         else {
[16:04:56.757]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:04:56.757]                 windows = "NUL", "/dev/null"), open = "w")
[16:04:56.757]         }
[16:04:56.757]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:04:56.757]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:04:56.757]             base::sink(type = "output", split = FALSE)
[16:04:56.757]             base::close(...future.stdout)
[16:04:56.757]         }, add = TRUE)
[16:04:56.757]     }
[16:04:56.757]     ...future.frame <- base::sys.nframe()
[16:04:56.757]     ...future.conditions <- base::list()
[16:04:56.757]     ...future.rng <- base::globalenv()$.Random.seed
[16:04:56.757]     if (FALSE) {
[16:04:56.757]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:04:56.757]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:04:56.757]     }
[16:04:56.757]     ...future.result <- base::tryCatch({
[16:04:56.757]         base::withCallingHandlers({
[16:04:56.757]             ...future.value <- base::withVisible(base::local({
[16:04:56.757]                 a %<-% subset(data, x < 3)$y
[16:04:56.757]                 a
[16:04:56.757]             }))
[16:04:56.757]             future::FutureResult(value = ...future.value$value, 
[16:04:56.757]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:04:56.757]                   ...future.rng), globalenv = if (FALSE) 
[16:04:56.757]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:04:56.757]                     ...future.globalenv.names))
[16:04:56.757]                 else NULL, started = ...future.startTime, version = "1.8")
[16:04:56.757]         }, condition = base::local({
[16:04:56.757]             c <- base::c
[16:04:56.757]             inherits <- base::inherits
[16:04:56.757]             invokeRestart <- base::invokeRestart
[16:04:56.757]             length <- base::length
[16:04:56.757]             list <- base::list
[16:04:56.757]             seq.int <- base::seq.int
[16:04:56.757]             signalCondition <- base::signalCondition
[16:04:56.757]             sys.calls <- base::sys.calls
[16:04:56.757]             `[[` <- base::`[[`
[16:04:56.757]             `+` <- base::`+`
[16:04:56.757]             `<<-` <- base::`<<-`
[16:04:56.757]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:04:56.757]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:04:56.757]                   3L)]
[16:04:56.757]             }
[16:04:56.757]             function(cond) {
[16:04:56.757]                 is_error <- inherits(cond, "error")
[16:04:56.757]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:04:56.757]                   NULL)
[16:04:56.757]                 if (is_error) {
[16:04:56.757]                   sessionInformation <- function() {
[16:04:56.757]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:04:56.757]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:04:56.757]                       search = base::search(), system = base::Sys.info())
[16:04:56.757]                   }
[16:04:56.757]                   ...future.conditions[[length(...future.conditions) + 
[16:04:56.757]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:04:56.757]                     cond$call), session = sessionInformation(), 
[16:04:56.757]                     timestamp = base::Sys.time(), signaled = 0L)
[16:04:56.757]                   signalCondition(cond)
[16:04:56.757]                 }
[16:04:56.757]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:04:56.757]                 "immediateCondition"))) {
[16:04:56.757]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:04:56.757]                   ...future.conditions[[length(...future.conditions) + 
[16:04:56.757]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:04:56.757]                   if (TRUE && !signal) {
[16:04:56.757]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:04:56.757]                     {
[16:04:56.757]                       inherits <- base::inherits
[16:04:56.757]                       invokeRestart <- base::invokeRestart
[16:04:56.757]                       is.null <- base::is.null
[16:04:56.757]                       muffled <- FALSE
[16:04:56.757]                       if (inherits(cond, "message")) {
[16:04:56.757]                         muffled <- grepl(pattern, "muffleMessage")
[16:04:56.757]                         if (muffled) 
[16:04:56.757]                           invokeRestart("muffleMessage")
[16:04:56.757]                       }
[16:04:56.757]                       else if (inherits(cond, "warning")) {
[16:04:56.757]                         muffled <- grepl(pattern, "muffleWarning")
[16:04:56.757]                         if (muffled) 
[16:04:56.757]                           invokeRestart("muffleWarning")
[16:04:56.757]                       }
[16:04:56.757]                       else if (inherits(cond, "condition")) {
[16:04:56.757]                         if (!is.null(pattern)) {
[16:04:56.757]                           computeRestarts <- base::computeRestarts
[16:04:56.757]                           grepl <- base::grepl
[16:04:56.757]                           restarts <- computeRestarts(cond)
[16:04:56.757]                           for (restart in restarts) {
[16:04:56.757]                             name <- restart$name
[16:04:56.757]                             if (is.null(name)) 
[16:04:56.757]                               next
[16:04:56.757]                             if (!grepl(pattern, name)) 
[16:04:56.757]                               next
[16:04:56.757]                             invokeRestart(restart)
[16:04:56.757]                             muffled <- TRUE
[16:04:56.757]                             break
[16:04:56.757]                           }
[16:04:56.757]                         }
[16:04:56.757]                       }
[16:04:56.757]                       invisible(muffled)
[16:04:56.757]                     }
[16:04:56.757]                     muffleCondition(cond, pattern = "^muffle")
[16:04:56.757]                   }
[16:04:56.757]                 }
[16:04:56.757]                 else {
[16:04:56.757]                   if (TRUE) {
[16:04:56.757]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:04:56.757]                     {
[16:04:56.757]                       inherits <- base::inherits
[16:04:56.757]                       invokeRestart <- base::invokeRestart
[16:04:56.757]                       is.null <- base::is.null
[16:04:56.757]                       muffled <- FALSE
[16:04:56.757]                       if (inherits(cond, "message")) {
[16:04:56.757]                         muffled <- grepl(pattern, "muffleMessage")
[16:04:56.757]                         if (muffled) 
[16:04:56.757]                           invokeRestart("muffleMessage")
[16:04:56.757]                       }
[16:04:56.757]                       else if (inherits(cond, "warning")) {
[16:04:56.757]                         muffled <- grepl(pattern, "muffleWarning")
[16:04:56.757]                         if (muffled) 
[16:04:56.757]                           invokeRestart("muffleWarning")
[16:04:56.757]                       }
[16:04:56.757]                       else if (inherits(cond, "condition")) {
[16:04:56.757]                         if (!is.null(pattern)) {
[16:04:56.757]                           computeRestarts <- base::computeRestarts
[16:04:56.757]                           grepl <- base::grepl
[16:04:56.757]                           restarts <- computeRestarts(cond)
[16:04:56.757]                           for (restart in restarts) {
[16:04:56.757]                             name <- restart$name
[16:04:56.757]                             if (is.null(name)) 
[16:04:56.757]                               next
[16:04:56.757]                             if (!grepl(pattern, name)) 
[16:04:56.757]                               next
[16:04:56.757]                             invokeRestart(restart)
[16:04:56.757]                             muffled <- TRUE
[16:04:56.757]                             break
[16:04:56.757]                           }
[16:04:56.757]                         }
[16:04:56.757]                       }
[16:04:56.757]                       invisible(muffled)
[16:04:56.757]                     }
[16:04:56.757]                     muffleCondition(cond, pattern = "^muffle")
[16:04:56.757]                   }
[16:04:56.757]                 }
[16:04:56.757]             }
[16:04:56.757]         }))
[16:04:56.757]     }, error = function(ex) {
[16:04:56.757]         base::structure(base::list(value = NULL, visible = NULL, 
[16:04:56.757]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:04:56.757]                 ...future.rng), started = ...future.startTime, 
[16:04:56.757]             finished = Sys.time(), session_uuid = NA_character_, 
[16:04:56.757]             version = "1.8"), class = "FutureResult")
[16:04:56.757]     }, finally = {
[16:04:56.757]         if (!identical(...future.workdir, getwd())) 
[16:04:56.757]             setwd(...future.workdir)
[16:04:56.757]         {
[16:04:56.757]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:04:56.757]                 ...future.oldOptions$nwarnings <- NULL
[16:04:56.757]             }
[16:04:56.757]             base::options(...future.oldOptions)
[16:04:56.757]             if (.Platform$OS.type == "windows") {
[16:04:56.757]                 old_names <- names(...future.oldEnvVars)
[16:04:56.757]                 envs <- base::Sys.getenv()
[16:04:56.757]                 names <- names(envs)
[16:04:56.757]                 common <- intersect(names, old_names)
[16:04:56.757]                 added <- setdiff(names, old_names)
[16:04:56.757]                 removed <- setdiff(old_names, names)
[16:04:56.757]                 changed <- common[...future.oldEnvVars[common] != 
[16:04:56.757]                   envs[common]]
[16:04:56.757]                 NAMES <- toupper(changed)
[16:04:56.757]                 args <- list()
[16:04:56.757]                 for (kk in seq_along(NAMES)) {
[16:04:56.757]                   name <- changed[[kk]]
[16:04:56.757]                   NAME <- NAMES[[kk]]
[16:04:56.757]                   if (name != NAME && is.element(NAME, old_names)) 
[16:04:56.757]                     next
[16:04:56.757]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:04:56.757]                 }
[16:04:56.757]                 NAMES <- toupper(added)
[16:04:56.757]                 for (kk in seq_along(NAMES)) {
[16:04:56.757]                   name <- added[[kk]]
[16:04:56.757]                   NAME <- NAMES[[kk]]
[16:04:56.757]                   if (name != NAME && is.element(NAME, old_names)) 
[16:04:56.757]                     next
[16:04:56.757]                   args[[name]] <- ""
[16:04:56.757]                 }
[16:04:56.757]                 NAMES <- toupper(removed)
[16:04:56.757]                 for (kk in seq_along(NAMES)) {
[16:04:56.757]                   name <- removed[[kk]]
[16:04:56.757]                   NAME <- NAMES[[kk]]
[16:04:56.757]                   if (name != NAME && is.element(NAME, old_names)) 
[16:04:56.757]                     next
[16:04:56.757]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:04:56.757]                 }
[16:04:56.757]                 if (length(args) > 0) 
[16:04:56.757]                   base::do.call(base::Sys.setenv, args = args)
[16:04:56.757]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:04:56.757]             }
[16:04:56.757]             else {
[16:04:56.757]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:04:56.757]             }
[16:04:56.757]             {
[16:04:56.757]                 if (base::length(...future.futureOptionsAdded) > 
[16:04:56.757]                   0L) {
[16:04:56.757]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:04:56.757]                   base::names(opts) <- ...future.futureOptionsAdded
[16:04:56.757]                   base::options(opts)
[16:04:56.757]                 }
[16:04:56.757]                 {
[16:04:56.757]                   {
[16:04:56.757]                     NULL
[16:04:56.757]                     RNGkind("Mersenne-Twister")
[16:04:56.757]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[16:04:56.757]                       inherits = FALSE)
[16:04:56.757]                   }
[16:04:56.757]                   options(future.plan = NULL)
[16:04:56.757]                   if (is.na(NA_character_)) 
[16:04:56.757]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:04:56.757]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:04:56.757]                   future::plan(list(function (..., envir = parent.frame()) 
[16:04:56.757]                   {
[16:04:56.757]                     future <- SequentialFuture(..., envir = envir)
[16:04:56.757]                     if (!future$lazy) 
[16:04:56.757]                       future <- run(future)
[16:04:56.757]                     invisible(future)
[16:04:56.757]                   }, function (..., envir = parent.frame()) 
[16:04:56.757]                   {
[16:04:56.757]                     future <- SequentialFuture(..., envir = envir)
[16:04:56.757]                     if (!future$lazy) 
[16:04:56.757]                       future <- run(future)
[16:04:56.757]                     invisible(future)
[16:04:56.757]                   }), .cleanup = FALSE, .init = FALSE)
[16:04:56.757]                 }
[16:04:56.757]             }
[16:04:56.757]         }
[16:04:56.757]     })
[16:04:56.757]     if (TRUE) {
[16:04:56.757]         base::sink(type = "output", split = FALSE)
[16:04:56.757]         if (TRUE) {
[16:04:56.757]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:04:56.757]         }
[16:04:56.757]         else {
[16:04:56.757]             ...future.result["stdout"] <- base::list(NULL)
[16:04:56.757]         }
[16:04:56.757]         base::close(...future.stdout)
[16:04:56.757]         ...future.stdout <- NULL
[16:04:56.757]     }
[16:04:56.757]     ...future.result$conditions <- ...future.conditions
[16:04:56.757]     ...future.result$finished <- base::Sys.time()
[16:04:56.757]     ...future.result
[16:04:56.757] }
[16:04:56.759] assign_globals() ...
[16:04:56.759] List of 1
[16:04:56.759]  $ data:'data.frame':	5 obs. of  2 variables:
[16:04:56.759]   ..$ x: int [1:5] 1 2 3 4 5
[16:04:56.759]   ..$ y: int [1:5] 1 2 3 4 5
[16:04:56.759]  - attr(*, "where")=List of 1
[16:04:56.759]   ..$ data:<environment: R_EmptyEnv> 
[16:04:56.759]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[16:04:56.759]  - attr(*, "resolved")= logi FALSE
[16:04:56.759]  - attr(*, "total_size")= num 160
[16:04:56.759]  - attr(*, "already-done")= logi TRUE
[16:04:56.764] - copied ‘data’ to environment
[16:04:56.765] assign_globals() ... done
[16:04:56.765] plan(): Setting new future strategy stack:
[16:04:56.765] List of future strategies:
[16:04:56.765] 1. sequential:
[16:04:56.765]    - args: function (..., envir = parent.frame())
[16:04:56.765]    - tweaked: FALSE
[16:04:56.765]    - call: plan(list(sequential, strategy))
[16:04:56.765] plan(): nbrOfWorkers() = 1
[16:04:56.796] plan(): Setting new future strategy stack:
[16:04:56.796] List of future strategies:
[16:04:56.796] 1. sequential:
[16:04:56.796]    - args: function (..., envir = parent.frame())
[16:04:56.796]    - tweaked: FALSE
[16:04:56.796]    - call: plan(list(sequential, strategy))
[16:04:56.796] 2. sequential:
[16:04:56.796]    - args: function (..., envir = parent.frame())
[16:04:56.796]    - tweaked: FALSE
[16:04:56.796]    - call: plan(list(sequential, strategy))
[16:04:56.796] plan(): nbrOfWorkers() = 1
[16:04:56.797] SequentialFuture started (and completed)
[16:04:56.797] signalConditions() ...
[16:04:56.797]  - include = ‘immediateCondition’
[16:04:56.797]  - exclude = 
[16:04:56.797]  - resignal = FALSE
[16:04:56.797]  - Number of conditions: 53
[16:04:56.797] signalConditions() ... done
[16:04:56.797] - Launch lazy future ... done
[16:04:56.797] run() for ‘SequentialFuture’ ... done
[16:04:56.798] signalConditions() ...
[16:04:56.798]  - include = ‘immediateCondition’
[16:04:56.798]  - exclude = 
[16:04:56.798]  - resignal = FALSE
[16:04:56.798]  - Number of conditions: 53
[16:04:56.798] signalConditions() ... done
[16:04:56.798] Future state: ‘finished’
[16:04:56.798] signalConditions() ...
[16:04:56.798]  - include = ‘condition’
[16:04:56.798]  - exclude = ‘immediateCondition’
[16:04:56.799]  - resignal = TRUE
[16:04:56.799]  - Number of conditions: 53
[16:04:56.799]  - Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[16:04:56.766] getGlobalsAndPackages() ...
[16:04:56.799]  - Condition #2: ‘deprecatedWarning’, ‘warning’, ‘condition’
Warning: R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘ignore’
[16:04:56.799]  - Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[16:04:56.780] Searching for globals...
[16:04:56.799]  - Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[16:04:56.781] - globals found: [5] ‘$’, ‘subset’, ‘data’, ‘<’, ‘x’
[16:04:56.799]  - Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[16:04:56.781] Searching for globals ... DONE
[16:04:56.799]  - Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[16:04:56.781] Resolving globals: FALSE
[16:04:56.800]  - Condition #7: ‘simpleMessage’, ‘message’, ‘condition’
[16:04:56.782] The total size of the 1 globals is 160 bytes (160 bytes)
[16:04:56.800]  - Condition #8: ‘simpleMessage’, ‘message’, ‘condition’
[16:04:56.782] The total size of the 1 globals exported for future expression (‘subset(data, x < 3)$y’) is 160 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘data’ (160 bytes of class ‘list’)
[16:04:56.800]  - Condition #9: ‘simpleMessage’, ‘message’, ‘condition’
[16:04:56.784] - globals: [1] ‘data’
[16:04:56.800]  - Condition #10: ‘simpleMessage’, ‘message’, ‘condition’
[16:04:56.784] 
[16:04:56.800]  - Condition #11: ‘simpleMessage’, ‘message’, ‘condition’
[16:04:56.784] getGlobalsAndPackages() ... DONE
[16:04:56.800]  - Condition #12: ‘simpleMessage’, ‘message’, ‘condition’
[16:04:56.784] run() for ‘Future’ ...
[16:04:56.800]  - Condition #13: ‘simpleMessage’, ‘message’, ‘condition’
[16:04:56.784] - state: ‘created’
[16:04:56.801]  - Condition #14: ‘simpleMessage’, ‘message’, ‘condition’
[16:04:56.784] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[16:04:56.801]  - Condition #15: ‘simpleMessage’, ‘message’, ‘condition’
[16:04:56.785] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[16:04:56.801]  - Condition #16: ‘simpleMessage’, ‘message’, ‘condition’
[16:04:56.785] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[16:04:56.801]  - Condition #17: ‘simpleMessage’, ‘message’, ‘condition’
[16:04:56.785]   - Field: ‘label’
[16:04:56.801]  - Condition #18: ‘simpleMessage’, ‘message’, ‘condition’
[16:04:56.785]   - Field: ‘local’
[16:04:56.801]  - Condition #19: ‘simpleMessage’, ‘message’, ‘condition’
[16:04:56.785]   - Field: ‘owner’
[16:04:56.801]  - Condition #20: ‘simpleMessage’, ‘message’, ‘condition’
[16:04:56.785]   - Field: ‘envir’
[16:04:56.801]  - Condition #21: ‘simpleMessage’, ‘message’, ‘condition’
[16:04:56.785]   - Field: ‘packages’
[16:04:56.802]  - Condition #22: ‘simpleMessage’, ‘message’, ‘condition’
[16:04:56.785]   - Field: ‘gc’
[16:04:56.802]  - Condition #23: ‘simpleMessage’, ‘message’, ‘condition’
[16:04:56.786]   - Field: ‘conditions’
[16:04:56.802]  - Condition #24: ‘simpleMessage’, ‘message’, ‘condition’
[16:04:56.786]   - Field: ‘expr’
[16:04:56.802]  - Condition #25: ‘simpleMessage’, ‘message’, ‘condition’
[16:04:56.786]   - Field: ‘uuid’
[16:04:56.802]  - Condition #26: ‘simpleMessage’, ‘message’, ‘condition’
[16:04:56.786]   - Field: ‘seed’
[16:04:56.802]  - Condition #27: ‘simpleMessage’, ‘message’, ‘condition’
[16:04:56.786]   - Field: ‘version’
[16:04:56.802]  - Condition #28: ‘simpleMessage’, ‘message’, ‘condition’
[16:04:56.786]   - Field: ‘result’
[16:04:56.802]  - Condition #29: ‘simpleMessage’, ‘message’, ‘condition’
[16:04:56.786]   - Field: ‘asynchronous’
[16:04:56.803]  - Condition #30: ‘simpleMessage’, ‘message’, ‘condition’
[16:04:56.786]   - Field: ‘calls’
[16:04:56.803]  - Condition #31: ‘simpleMessage’, ‘message’, ‘condition’
[16:04:56.786]   - Field: ‘globals’
[16:04:56.803]  - Condition #32: ‘simpleMessage’, ‘message’, ‘condition’
[16:04:56.787]   - Field: ‘stdout’
[16:04:56.803]  - Condition #33: ‘simpleMessage’, ‘message’, ‘condition’
[16:04:56.787]   - Field: ‘earlySignal’
[16:04:56.803]  - Condition #34: ‘simpleMessage’, ‘message’, ‘condition’
[16:04:56.787]   - Field: ‘lazy’
[16:04:56.803]  - Condition #35: ‘simpleMessage’, ‘message’, ‘condition’
[16:04:56.787]   - Field: ‘state’
[16:04:56.803]  - Condition #36: ‘simpleMessage’, ‘message’, ‘condition’
[16:04:56.787] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[16:04:56.804]  - Condition #37: ‘simpleMessage’, ‘message’, ‘condition’
[16:04:56.787] - Launch lazy future ...
[16:04:56.804]  - Condition #38: ‘simpleMessage’, ‘message’, ‘condition’
[16:04:56.787] Packages needed by the future expression (n = 0): <none>
[16:04:56.804]  - Condition #39: ‘simpleMessage’, ‘message’, ‘condition’
[16:04:56.787] Packages needed by future strategies (n = 0): <none>
[16:04:56.804]  - Condition #40: ‘simpleMessage’, ‘message’, ‘condition’
[16:04:56.788] {
[16:04:56.788]     {
[16:04:56.788]         {
[16:04:56.788]             ...future.startTime <- base::Sys.time()
[16:04:56.788]             {
[16:04:56.788]                 {
[16:04:56.788]                   {
[16:04:56.788]                     base::local({
[16:04:56.788]                       has_future <- base::requireNamespace("future", 
[16:04:56.788]                         quietly = TRUE)
[16:04:56.788]                       if (has_future) {
[16:04:56.788]                         ns <- base::getNamespace("future")
[16:04:56.788]                         version <- ns[[".package"]][["version"]]
[16:04:56.788]                         if (is.null(version)) 
[16:04:56.788]                           version <- utils::packageVersion("future")
[16:04:56.788]                       }
[16:04:56.788]                       else {
[16:04:56.788]                         version <- NULL
[16:04:56.788]                       }
[16:04:56.788]                       if (!has_future || version < "1.8.0") {
[16:04:56.788]                         info <- base::c(r_version = base::gsub("R version ", 
[16:04:56.788]                           "", base::R.version$version.string), 
[16:04:56.788]                           platform = base::sprintf("%s (%s-bit)", 
[16:04:56.788]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:04:56.788]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[16:04:56.788]                             "release", "version")], collapse = " "), 
[16:04:56.788]                           hostname = base::Sys.info()[["nodename"]])
[16:04:56.788]                         info <- base::sprintf("%s: %s", base::names(info), 
[16:04:56.788]                           info)
[16:04:56.788]                         info <- base::paste(info, collapse = "; ")
[16:04:56.788]                         if (!has_future) {
[16:04:56.788]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:04:56.788]                             info)
[16:04:56.788]                         }
[16:04:56.788]                         else {
[16:04:56.788]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:04:56.788]                             info, version)
[16:04:56.788]                         }
[16:04:56.788]                         base::stop(msg)
[16:04:56.788]                       }
[16:04:56.788]                     })
[16:04:56.788]                   }
[16:04:56.788]                   options(future.plan = NULL)
[16:04:56.788]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:04:56.788]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:04:56.788]                 }
[16:04:56.788]                 ...future.workdir <- getwd()
[16:04:56.788]             }
[16:04:56.788]             ...future.oldOptions <- base::as.list(base::.Options)
[16:04:56.788]             ...future.oldEnvVars <- base::Sys.getenv()
[16:04:56.788]         }
[16:04:56.788]         base::options(future.startup.script = FALSE, future.globals.onMissing = "ignore", 
[16:04:56.788]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:04:56.788]             future.globals.onMissing = "ignore", future.globals.onReference = NULL, 
[16:04:56.788]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:04:56.788]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:04:56.788]             future.stdout.windows.reencode = NULL, width = 80L)
[16:04:56.788]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:04:56.788]             base::names(...future.oldOptions))
[16:04:56.788]     }
[16:04:56.788]     if (FALSE) {
[16:04:56.788]     }
[16:04:56.788]     else {
[16:04:56.788]         if (TRUE) {
[16:04:56.788]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:04:56.788]                 open = "w")
[16:04:56.788]         }
[16:04:56.788]         else {
[16:04:56.788]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:04:56.788]                 windows = "NUL", "/dev/null"), open = "w")
[16:04:56.788]         }
[16:04:56.788]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:04:56.788]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:04:56.788]             base::sink(type = "output", split = FALSE)
[16:04:56.788]             base::close(...future.stdout)
[16:04:56.788]         }, add = TRUE)
[16:04:56.788]     }
[16:04:56.788]     ...future.frame <- base::sys.nframe()
[16:04:56.788]     ...future.conditions <- base::list()
[16:04:56.788]     ...future.rng <- base::globalenv()$.Random.seed
[16:04:56.788]     if (FALSE) {
[16:04:56.788]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:04:56.788]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:04:56.788]     }
[16:04:56.788]     ...future.result <- base::tryCatch({
[16:04:56.788]         base::withCallingHandlers({
[16:04:56.788]             ...future.value <- base::withVisible(base::local(subset(data, 
[16:04:56.788]                 x < 3)$y))
[16:04:56.788]             future::FutureResult(value = ...future.value$value, 
[16:04:56.788]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:04:56.788]                   ...future.rng), globalenv = if (FALSE) 
[16:04:56.788]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:04:56.788]                     ...future.globalenv.names))
[16:04:56.788]                 else NULL, started = ...future.startTime, version = "1.8")
[16:04:56.788]         }, condition = base::local({
[16:04:56.788]             c <- base::c
[16:04:56.788]             inherits <- base::inherits
[16:04:56.788]             invokeRestart <- base::invokeRestart
[16:04:56.788]             length <- base::length
[16:04:56.788]             list <- base::list
[16:04:56.788]             seq.int <- base::seq.int
[16:04:56.788]             signalCondition <- base::signalCondition
[16:04:56.788]             sys.calls <- base::sys.calls
[16:04:56.788]             `[[` <- base::`[[`
[16:04:56.788]             `+` <- base::`+`
[16:04:56.788]             `<<-` <- base::`<<-`
[16:04:56.788]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:04:56.788]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:04:56.788]                   3L)]
[16:04:56.788]             }
[16:04:56.788]             function(cond) {
[16:04:56.788]                 is_error <- inherits(cond, "error")
[16:04:56.788]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:04:56.788]                   NULL)
[16:04:56.788]                 if (is_error) {
[16:04:56.788]                   sessionInformation <- function() {
[16:04:56.788]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:04:56.788]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:04:56.788]                       search = base::search(), system = base::Sys.info())
[16:04:56.788]                   }
[16:04:56.788]                   ...future.conditions[[length(...future.conditions) + 
[16:04:56.788]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:04:56.788]                     cond$call), session = sessionInformation(), 
[16:04:56.788]                     timestamp = base::Sys.time(), signaled = 0L)
[16:04:56.788]                   signalCondition(cond)
[16:04:56.788]                 }
[16:04:56.788]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:04:56.788]                 "immediateCondition"))) {
[16:04:56.788]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:04:56.788]                   ...future.conditions[[length(...future.conditions) + 
[16:04:56.788]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:04:56.788]                   if (TRUE && !signal) {
[16:04:56.788]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:04:56.788]                     {
[16:04:56.788]                       inherits <- base::inherits
[16:04:56.788]                       invokeRestart <- base::invokeRestart
[16:04:56.788]                       is.null <- base::is.null
[16:04:56.788]                       muffled <- FALSE
[16:04:56.788]                       if (inherits(cond, "message")) {
[16:04:56.788]                         muffled <- grepl(pattern, "muffleMessage")
[16:04:56.788]                         if (muffled) 
[16:04:56.788]                           invokeRestart("muffleMessage")
[16:04:56.788]                       }
[16:04:56.788]                       else if (inherits(cond, "warning")) {
[16:04:56.788]                         muffled <- grepl(pattern, "muffleWarning")
[16:04:56.788]                         if (muffled) 
[16:04:56.788]                           invokeRestart("muffleWarning")
[16:04:56.788]                       }
[16:04:56.788]                       else if (inherits(cond, "condition")) {
[16:04:56.788]                         if (!is.null(pattern)) {
[16:04:56.788]                           computeRestarts <- base::computeRestarts
[16:04:56.788]                           grepl <- base::grepl
[16:04:56.788]                           restarts <- computeRestarts(cond)
[16:04:56.788]                           for (restart in restarts) {
[16:04:56.788]                             name <- restart$name
[16:04:56.788]                             if (is.null(name)) 
[16:04:56.788]                               next
[16:04:56.788]                             if (!grepl(pattern, name)) 
[16:04:56.788]                               next
[16:04:56.788]                             invokeRestart(restart)
[16:04:56.788]                             muffled <- TRUE
[16:04:56.788]                             break
[16:04:56.788]                           }
[16:04:56.788]                         }
[16:04:56.788]                       }
[16:04:56.788]                       invisible(muffled)
[16:04:56.788]                     }
[16:04:56.788]                     muffleCondition(cond, pattern = "^muffle")
[16:04:56.788]                   }
[16:04:56.788]                 }
[16:04:56.788]                 else {
[16:04:56.788]                   if (TRUE) {
[16:04:56.788]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:04:56.788]                     {
[16:04:56.788]                       inherits <- base::inherits
[16:04:56.788]                       invokeRestart <- base::invokeRestart
[16:04:56.788]                       is.null <- base::is.null
[16:04:56.788]                       muffled <- FALSE
[16:04:56.788]                       if (inherits(cond, "message")) {
[16:04:56.788]                         muffled <- grepl(pattern, "muffleMessage")
[16:04:56.788]                         if (muffled) 
[16:04:56.788]                           invokeRestart("muffleMessage")
[16:04:56.788]                       }
[16:04:56.788]                       else if (inherits(cond, "warning")) {
[16:04:56.788]                         muffled <- grepl(pattern, "muffleWarning")
[16:04:56.788]                         if (muffled) 
[16:04:56.788]                           invokeRestart("muffleWarning")
[16:04:56.788]                       }
[16:04:56.788]                       else if (inherits(cond, "condition")) {
[16:04:56.788]                         if (!is.null(pattern)) {
[16:04:56.788]                           computeRestarts <- base::computeRestarts
[16:04:56.788]                           grepl <- base::grepl
[16:04:56.788]                           restarts <- computeRestarts(cond)
[16:04:56.788]                           for (restart in restarts) {
[16:04:56.788]                             name <- restart$name
[16:04:56.788]                             if (is.null(name)) 
[16:04:56.788]                               next
[16:04:56.788]                             if (!grepl(pattern, name)) 
[16:04:56.788]                               next
[16:04:56.788]                             invokeRestart(restart)
[16:04:56.788]                             muffled <- TRUE
[16:04:56.788]                             break
[16:04:56.788]                           }
[16:04:56.788]                         }
[16:04:56.788]                       }
[16:04:56.788]                       invisible(muffled)
[16:04:56.788]                     }
[16:04:56.788]                     muffleCondition(cond, pattern = "^muffle")
[16:04:56.788]                   }
[16:04:56.788]                 }
[16:04:56.788]             }
[16:04:56.788]         }))
[16:04:56.788]     }, error = function(ex) {
[16:04:56.788]         base::structure(base::list(value = NULL, visible = NULL, 
[16:04:56.788]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:04:56.788]                 ...future.rng), started = ...future.startTime, 
[16:04:56.788]             finished = Sys.time(), session_uuid = NA_character_, 
[16:04:56.788]             version = "1.8"), class = "FutureResult")
[16:04:56.788]     }, finally = {
[16:04:56.788]         if (!identical(...future.workdir, getwd())) 
[16:04:56.788]             setwd(...future.workdir)
[16:04:56.788]         {
[16:04:56.788]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:04:56.788]                 ...future.oldOptions$nwarnings <- NULL
[16:04:56.788]             }
[16:04:56.788]             base::options(...future.oldOptions)
[16:04:56.788]             if (.Platform$OS.type == "windows") {
[16:04:56.788]                 old_names <- names(...future.oldEnvVars)
[16:04:56.788]                 envs <- base::Sys.getenv()
[16:04:56.788]                 names <- names(envs)
[16:04:56.788]                 common <- intersect(names, old_names)
[16:04:56.788]                 added <- setdiff(names, old_names)
[16:04:56.788]                 removed <- setdiff(old_names, names)
[16:04:56.788]                 changed <- common[...future.oldEnvVars[common] != 
[16:04:56.788]                   envs[common]]
[16:04:56.788]                 NAMES <- toupper(changed)
[16:04:56.788]                 args <- list()
[16:04:56.788]                 for (kk in seq_along(NAMES)) {
[16:04:56.788]                   name <- changed[[kk]]
[16:04:56.788]                   NAME <- NAMES[[kk]]
[16:04:56.788]                   if (name != NAME && is.element(NAME, old_names)) 
[16:04:56.788]                     next
[16:04:56.788]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:04:56.788]                 }
[16:04:56.788]                 NAMES <- toupper(added)
[16:04:56.788]                 for (kk in seq_along(NAMES)) {
[16:04:56.788]                   name <- added[[kk]]
[16:04:56.788]                   NAME <- NAMES[[kk]]
[16:04:56.788]                   if (name != NAME && is.element(NAME, old_names)) 
[16:04:56.788]                     next
[16:04:56.788]                   args[[name]] <- ""
[16:04:56.788]                 }
[16:04:56.788]                 NAMES <- toupper(removed)
[16:04:56.788]                 for (kk in seq_along(NAMES)) {
[16:04:56.788]                   name <- removed[[kk]]
[16:04:56.788]                   NAME <- NAMES[[kk]]
[16:04:56.788]                   if (name != NAME && is.element(NAME, old_names)) 
[16:04:56.788]                     next
[16:04:56.788]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:04:56.788]                 }
[16:04:56.788]                 if (length(args) > 0) 
[16:04:56.788]                   base::do.call(base::Sys.setenv, args = args)
[16:04:56.788]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:04:56.788]             }
[16:04:56.788]             else {
[16:04:56.788]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:04:56.788]             }
[16:04:56.788]             {
[16:04:56.788]                 if (base::length(...future.futureOptionsAdded) > 
[16:04:56.788]                   0L) {
[16:04:56.788]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:04:56.788]                   base::names(opts) <- ...future.futureOptionsAdded
[16:04:56.788]                   base::options(opts)
[16:04:56.788]                 }
[16:04:56.788]                 {
[16:04:56.788]                   {
[16:04:56.788]                     NULL
[16:04:56.788]                     RNGkind("Mersenne-Twister")
[16:04:56.788]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[16:04:56.788]                       inherits = FALSE)
[16:04:56.788]                   }
[16:04:56.788]                   options(future.plan = NULL)
[16:04:56.788]                   if (is.na(NA_character_)) 
[16:04:56.788]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:04:56.788]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:04:56.788]                   future::plan(list(function (..., envir = parent.frame()) 
[16:04:56.788]                   {
[16:04:56.788]                     future <- SequentialFuture(..., envir = envir)
[16:04:56.788]                     if (!future$lazy) 
[16:04:56.788]                       future <- run(future)
[16:04:56.788]                     invisible(future)
[16:04:56.788]                   }), .cleanup = FALSE, .init = FALSE)
[16:04:56.788]                 }
[16:04:56.788]             }
[16:04:56.788]         }
[16:04:56.788]     })
[16:04:56.788]     if (TRUE) {
[16:04:56.788]         base::sink(type = "output", split = FALSE)
[16:04:56.788]         if (TRUE) {
[16:04:56.788]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:04:56.788]         }
[16:04:56.788]         else {
[16:04:56.788]             ...future.result["stdout"] <- base::list(NULL)
[16:04:56.788]         }
[16:04:56.788]         base::close(...future.stdout)
[16:04:56.788]         ...future.stdout <- NULL
[16:04:56.788]     }
[16:04:56.788]     ...future.result$conditions <- ...future.conditions
[16:04:56.788]     ...future.result$finished <- base::Sys.time()
[16:04:56.788]     ...future.result
[16:04:56.788] }
[16:04:56.804]  - Condition #41: ‘simpleMessage’, ‘message’, ‘condition’
[16:04:56.789] assign_globals() ...
[16:04:56.804]  - Condition #42: ‘simpleMessage’, ‘message’, ‘condition’
[16:04:56.790] List of 1
[16:04:56.790]  $ data:'data.frame':	5 obs. of  2 variables:
[16:04:56.790]   ..$ x: int [1:5] 1 2 3 4 5
[16:04:56.790]   ..$ y: int [1:5] 1 2 3 4 5
[16:04:56.790]  - attr(*, "where")=List of 1
[16:04:56.790]   ..$ data:<environment: R_EmptyEnv> 
[16:04:56.790]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[16:04:56.790]  - attr(*, "resolved")= logi FALSE
[16:04:56.790]  - attr(*, "total_size")= num 160
[16:04:56.790]  - attr(*, "already-done")= logi TRUE
[16:04:56.804]  - Condition #43: ‘simpleMessage’, ‘message’, ‘condition’
[16:04:56.793] - copied ‘data’ to environment
[16:04:56.805]  - Condition #44: ‘simpleMessage’, ‘message’, ‘condition’
[16:04:56.793] assign_globals() ... done
[16:04:56.805]  - Condition #45: ‘simpleMessage’, ‘message’, ‘condition’
[16:04:56.793] plan(): Setting new future strategy stack:
[16:04:56.805]  - Condition #46: ‘simpleMessage’, ‘message’, ‘condition’
[16:04:56.793] List of future strategies:
[16:04:56.793] 1. sequential:
[16:04:56.793]    - args: function (..., envir = parent.frame())
[16:04:56.793]    - tweaked: FALSE
[16:04:56.793]    - call: NULL
[16:04:56.805]  - Condition #47: ‘simpleMessage’, ‘message’, ‘condition’
[16:04:56.794] plan(): nbrOfWorkers() = 1
[16:04:56.805]  - Condition #48: ‘simpleMessage’, ‘message’, ‘condition’
[16:04:56.794] plan(): Setting new future strategy stack:
[16:04:56.805]  - Condition #49: ‘simpleMessage’, ‘message’, ‘condition’
[16:04:56.795] List of future strategies:
[16:04:56.795] 1. sequential:
[16:04:56.795]    - args: function (..., envir = parent.frame())
[16:04:56.795]    - tweaked: FALSE
[16:04:56.795]    - call: plan(list(sequential, strategy))
[16:04:56.805]  - Condition #50: ‘simpleMessage’, ‘message’, ‘condition’
[16:04:56.795] plan(): nbrOfWorkers() = 1
[16:04:56.805]  - Condition #51: ‘simpleMessage’, ‘message’, ‘condition’
[16:04:56.795] SequentialFuture started (and completed)
[16:04:56.806]  - Condition #52: ‘simpleMessage’, ‘message’, ‘condition’
[16:04:56.795] - Launch lazy future ... done
[16:04:56.806]  - Condition #53: ‘simpleMessage’, ‘message’, ‘condition’
[16:04:56.795] run() for ‘SequentialFuture’ ... done
[16:04:56.806] signalConditions() ... done
- Strategy: sequential ... DONE
- Strategy: multicore ...
[16:04:56.806] plan(): Setting new future strategy stack:
[16:04:56.806] List of future strategies:
[16:04:56.806] 1. multicore:
[16:04:56.806]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[16:04:56.806]    - tweaked: FALSE
[16:04:56.806]    - call: plan(strategy)
[16:04:56.810] plan(): nbrOfWorkers() = 2
[16:04:56.811] getGlobalsAndPackages() ...
Warning: R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘error’
[16:04:56.811] Searching for globals...
[16:04:56.813] - globals found: [1] ‘getOption’
[16:04:56.813] Searching for globals ... DONE
[16:04:56.813] Resolving globals: FALSE
[16:04:56.813] 
[16:04:56.813] 
[16:04:56.813] getGlobalsAndPackages() ... DONE
[16:04:56.814] run() for ‘Future’ ...
[16:04:56.814] - state: ‘created’
[16:04:56.814] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[16:04:56.818] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[16:04:56.818] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[16:04:56.818]   - Field: ‘label’
[16:04:56.818]   - Field: ‘local’
[16:04:56.818]   - Field: ‘owner’
[16:04:56.818]   - Field: ‘envir’
[16:04:56.818]   - Field: ‘workers’
[16:04:56.818]   - Field: ‘packages’
[16:04:56.818]   - Field: ‘gc’
[16:04:56.819]   - Field: ‘job’
[16:04:56.819]   - Field: ‘conditions’
[16:04:56.819]   - Field: ‘expr’
[16:04:56.819]   - Field: ‘uuid’
[16:04:56.819]   - Field: ‘seed’
[16:04:56.819]   - Field: ‘version’
[16:04:56.819]   - Field: ‘result’
[16:04:56.819]   - Field: ‘asynchronous’
[16:04:56.819]   - Field: ‘calls’
[16:04:56.819]   - Field: ‘globals’
[16:04:56.819]   - Field: ‘stdout’
[16:04:56.820]   - Field: ‘earlySignal’
[16:04:56.820]   - Field: ‘lazy’
[16:04:56.820]   - Field: ‘state’
[16:04:56.820] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[16:04:56.820] - Launch lazy future ...
[16:04:56.821] Packages needed by the future expression (n = 0): <none>
[16:04:56.821] Packages needed by future strategies (n = 0): <none>
[16:04:56.822] {
[16:04:56.822]     {
[16:04:56.822]         {
[16:04:56.822]             ...future.startTime <- base::Sys.time()
[16:04:56.822]             {
[16:04:56.822]                 {
[16:04:56.822]                   {
[16:04:56.822]                     {
[16:04:56.822]                       base::local({
[16:04:56.822]                         has_future <- base::requireNamespace("future", 
[16:04:56.822]                           quietly = TRUE)
[16:04:56.822]                         if (has_future) {
[16:04:56.822]                           ns <- base::getNamespace("future")
[16:04:56.822]                           version <- ns[[".package"]][["version"]]
[16:04:56.822]                           if (is.null(version)) 
[16:04:56.822]                             version <- utils::packageVersion("future")
[16:04:56.822]                         }
[16:04:56.822]                         else {
[16:04:56.822]                           version <- NULL
[16:04:56.822]                         }
[16:04:56.822]                         if (!has_future || version < "1.8.0") {
[16:04:56.822]                           info <- base::c(r_version = base::gsub("R version ", 
[16:04:56.822]                             "", base::R.version$version.string), 
[16:04:56.822]                             platform = base::sprintf("%s (%s-bit)", 
[16:04:56.822]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:04:56.822]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[16:04:56.822]                               "release", "version")], collapse = " "), 
[16:04:56.822]                             hostname = base::Sys.info()[["nodename"]])
[16:04:56.822]                           info <- base::sprintf("%s: %s", base::names(info), 
[16:04:56.822]                             info)
[16:04:56.822]                           info <- base::paste(info, collapse = "; ")
[16:04:56.822]                           if (!has_future) {
[16:04:56.822]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:04:56.822]                               info)
[16:04:56.822]                           }
[16:04:56.822]                           else {
[16:04:56.822]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:04:56.822]                               info, version)
[16:04:56.822]                           }
[16:04:56.822]                           base::stop(msg)
[16:04:56.822]                         }
[16:04:56.822]                       })
[16:04:56.822]                     }
[16:04:56.822]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[16:04:56.822]                     base::options(mc.cores = 1L)
[16:04:56.822]                   }
[16:04:56.822]                   options(future.plan = NULL)
[16:04:56.822]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:04:56.822]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:04:56.822]                 }
[16:04:56.822]                 ...future.workdir <- getwd()
[16:04:56.822]             }
[16:04:56.822]             ...future.oldOptions <- base::as.list(base::.Options)
[16:04:56.822]             ...future.oldEnvVars <- base::Sys.getenv()
[16:04:56.822]         }
[16:04:56.822]         base::options(future.startup.script = FALSE, future.globals.onMissing = "error", 
[16:04:56.822]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:04:56.822]             future.globals.onMissing = "error", future.globals.onReference = NULL, 
[16:04:56.822]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:04:56.822]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:04:56.822]             future.stdout.windows.reencode = NULL, width = 80L)
[16:04:56.822]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:04:56.822]             base::names(...future.oldOptions))
[16:04:56.822]     }
[16:04:56.822]     if (FALSE) {
[16:04:56.822]     }
[16:04:56.822]     else {
[16:04:56.822]         if (TRUE) {
[16:04:56.822]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:04:56.822]                 open = "w")
[16:04:56.822]         }
[16:04:56.822]         else {
[16:04:56.822]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:04:56.822]                 windows = "NUL", "/dev/null"), open = "w")
[16:04:56.822]         }
[16:04:56.822]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:04:56.822]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:04:56.822]             base::sink(type = "output", split = FALSE)
[16:04:56.822]             base::close(...future.stdout)
[16:04:56.822]         }, add = TRUE)
[16:04:56.822]     }
[16:04:56.822]     ...future.frame <- base::sys.nframe()
[16:04:56.822]     ...future.conditions <- base::list()
[16:04:56.822]     ...future.rng <- base::globalenv()$.Random.seed
[16:04:56.822]     if (FALSE) {
[16:04:56.822]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:04:56.822]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:04:56.822]     }
[16:04:56.822]     ...future.result <- base::tryCatch({
[16:04:56.822]         base::withCallingHandlers({
[16:04:56.822]             ...future.value <- base::withVisible(base::local({
[16:04:56.822]                 withCallingHandlers({
[16:04:56.822]                   getOption("future.globals.onMissing")
[16:04:56.822]                 }, immediateCondition = function(cond) {
[16:04:56.822]                   save_rds <- function (object, pathname, ...) 
[16:04:56.822]                   {
[16:04:56.822]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[16:04:56.822]                     if (file_test("-f", pathname_tmp)) {
[16:04:56.822]                       fi_tmp <- file.info(pathname_tmp)
[16:04:56.822]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[16:04:56.822]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:04:56.822]                         fi_tmp[["mtime"]])
[16:04:56.822]                     }
[16:04:56.822]                     tryCatch({
[16:04:56.822]                       saveRDS(object, file = pathname_tmp, ...)
[16:04:56.822]                     }, error = function(ex) {
[16:04:56.822]                       msg <- conditionMessage(ex)
[16:04:56.822]                       fi_tmp <- file.info(pathname_tmp)
[16:04:56.822]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[16:04:56.822]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:04:56.822]                         fi_tmp[["mtime"]], msg)
[16:04:56.822]                       ex$message <- msg
[16:04:56.822]                       stop(ex)
[16:04:56.822]                     })
[16:04:56.822]                     stopifnot(file_test("-f", pathname_tmp))
[16:04:56.822]                     res <- file.rename(from = pathname_tmp, to = pathname)
[16:04:56.822]                     if (!res || file_test("-f", pathname_tmp)) {
[16:04:56.822]                       fi_tmp <- file.info(pathname_tmp)
[16:04:56.822]                       fi <- file.info(pathname)
[16:04:56.822]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[16:04:56.822]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:04:56.822]                         fi_tmp[["mtime"]], sQuote(pathname), 
[16:04:56.822]                         fi[["size"]], fi[["mtime"]])
[16:04:56.822]                       stop(msg)
[16:04:56.822]                     }
[16:04:56.822]                     invisible(pathname)
[16:04:56.822]                   }
[16:04:56.822]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[16:04:56.822]                     rootPath = tempdir()) 
[16:04:56.822]                   {
[16:04:56.822]                     obj <- list(time = Sys.time(), condition = cond)
[16:04:56.822]                     file <- tempfile(pattern = class(cond)[1], 
[16:04:56.822]                       tmpdir = path, fileext = ".rds")
[16:04:56.822]                     save_rds(obj, file)
[16:04:56.822]                   }
[16:04:56.822]                   saveImmediateCondition(cond, path = "/tmp/RtmpDZPjQ0/.future/immediateConditions")
[16:04:56.822]                   muffleCondition <- function (cond, pattern = "^muffle") 
[16:04:56.822]                   {
[16:04:56.822]                     inherits <- base::inherits
[16:04:56.822]                     invokeRestart <- base::invokeRestart
[16:04:56.822]                     is.null <- base::is.null
[16:04:56.822]                     muffled <- FALSE
[16:04:56.822]                     if (inherits(cond, "message")) {
[16:04:56.822]                       muffled <- grepl(pattern, "muffleMessage")
[16:04:56.822]                       if (muffled) 
[16:04:56.822]                         invokeRestart("muffleMessage")
[16:04:56.822]                     }
[16:04:56.822]                     else if (inherits(cond, "warning")) {
[16:04:56.822]                       muffled <- grepl(pattern, "muffleWarning")
[16:04:56.822]                       if (muffled) 
[16:04:56.822]                         invokeRestart("muffleWarning")
[16:04:56.822]                     }
[16:04:56.822]                     else if (inherits(cond, "condition")) {
[16:04:56.822]                       if (!is.null(pattern)) {
[16:04:56.822]                         computeRestarts <- base::computeRestarts
[16:04:56.822]                         grepl <- base::grepl
[16:04:56.822]                         restarts <- computeRestarts(cond)
[16:04:56.822]                         for (restart in restarts) {
[16:04:56.822]                           name <- restart$name
[16:04:56.822]                           if (is.null(name)) 
[16:04:56.822]                             next
[16:04:56.822]                           if (!grepl(pattern, name)) 
[16:04:56.822]                             next
[16:04:56.822]                           invokeRestart(restart)
[16:04:56.822]                           muffled <- TRUE
[16:04:56.822]                           break
[16:04:56.822]                         }
[16:04:56.822]                       }
[16:04:56.822]                     }
[16:04:56.822]                     invisible(muffled)
[16:04:56.822]                   }
[16:04:56.822]                   muffleCondition(cond)
[16:04:56.822]                 })
[16:04:56.822]             }))
[16:04:56.822]             future::FutureResult(value = ...future.value$value, 
[16:04:56.822]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:04:56.822]                   ...future.rng), globalenv = if (FALSE) 
[16:04:56.822]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:04:56.822]                     ...future.globalenv.names))
[16:04:56.822]                 else NULL, started = ...future.startTime, version = "1.8")
[16:04:56.822]         }, condition = base::local({
[16:04:56.822]             c <- base::c
[16:04:56.822]             inherits <- base::inherits
[16:04:56.822]             invokeRestart <- base::invokeRestart
[16:04:56.822]             length <- base::length
[16:04:56.822]             list <- base::list
[16:04:56.822]             seq.int <- base::seq.int
[16:04:56.822]             signalCondition <- base::signalCondition
[16:04:56.822]             sys.calls <- base::sys.calls
[16:04:56.822]             `[[` <- base::`[[`
[16:04:56.822]             `+` <- base::`+`
[16:04:56.822]             `<<-` <- base::`<<-`
[16:04:56.822]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:04:56.822]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:04:56.822]                   3L)]
[16:04:56.822]             }
[16:04:56.822]             function(cond) {
[16:04:56.822]                 is_error <- inherits(cond, "error")
[16:04:56.822]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:04:56.822]                   NULL)
[16:04:56.822]                 if (is_error) {
[16:04:56.822]                   sessionInformation <- function() {
[16:04:56.822]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:04:56.822]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:04:56.822]                       search = base::search(), system = base::Sys.info())
[16:04:56.822]                   }
[16:04:56.822]                   ...future.conditions[[length(...future.conditions) + 
[16:04:56.822]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:04:56.822]                     cond$call), session = sessionInformation(), 
[16:04:56.822]                     timestamp = base::Sys.time(), signaled = 0L)
[16:04:56.822]                   signalCondition(cond)
[16:04:56.822]                 }
[16:04:56.822]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:04:56.822]                 "immediateCondition"))) {
[16:04:56.822]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:04:56.822]                   ...future.conditions[[length(...future.conditions) + 
[16:04:56.822]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:04:56.822]                   if (TRUE && !signal) {
[16:04:56.822]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:04:56.822]                     {
[16:04:56.822]                       inherits <- base::inherits
[16:04:56.822]                       invokeRestart <- base::invokeRestart
[16:04:56.822]                       is.null <- base::is.null
[16:04:56.822]                       muffled <- FALSE
[16:04:56.822]                       if (inherits(cond, "message")) {
[16:04:56.822]                         muffled <- grepl(pattern, "muffleMessage")
[16:04:56.822]                         if (muffled) 
[16:04:56.822]                           invokeRestart("muffleMessage")
[16:04:56.822]                       }
[16:04:56.822]                       else if (inherits(cond, "warning")) {
[16:04:56.822]                         muffled <- grepl(pattern, "muffleWarning")
[16:04:56.822]                         if (muffled) 
[16:04:56.822]                           invokeRestart("muffleWarning")
[16:04:56.822]                       }
[16:04:56.822]                       else if (inherits(cond, "condition")) {
[16:04:56.822]                         if (!is.null(pattern)) {
[16:04:56.822]                           computeRestarts <- base::computeRestarts
[16:04:56.822]                           grepl <- base::grepl
[16:04:56.822]                           restarts <- computeRestarts(cond)
[16:04:56.822]                           for (restart in restarts) {
[16:04:56.822]                             name <- restart$name
[16:04:56.822]                             if (is.null(name)) 
[16:04:56.822]                               next
[16:04:56.822]                             if (!grepl(pattern, name)) 
[16:04:56.822]                               next
[16:04:56.822]                             invokeRestart(restart)
[16:04:56.822]                             muffled <- TRUE
[16:04:56.822]                             break
[16:04:56.822]                           }
[16:04:56.822]                         }
[16:04:56.822]                       }
[16:04:56.822]                       invisible(muffled)
[16:04:56.822]                     }
[16:04:56.822]                     muffleCondition(cond, pattern = "^muffle")
[16:04:56.822]                   }
[16:04:56.822]                 }
[16:04:56.822]                 else {
[16:04:56.822]                   if (TRUE) {
[16:04:56.822]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:04:56.822]                     {
[16:04:56.822]                       inherits <- base::inherits
[16:04:56.822]                       invokeRestart <- base::invokeRestart
[16:04:56.822]                       is.null <- base::is.null
[16:04:56.822]                       muffled <- FALSE
[16:04:56.822]                       if (inherits(cond, "message")) {
[16:04:56.822]                         muffled <- grepl(pattern, "muffleMessage")
[16:04:56.822]                         if (muffled) 
[16:04:56.822]                           invokeRestart("muffleMessage")
[16:04:56.822]                       }
[16:04:56.822]                       else if (inherits(cond, "warning")) {
[16:04:56.822]                         muffled <- grepl(pattern, "muffleWarning")
[16:04:56.822]                         if (muffled) 
[16:04:56.822]                           invokeRestart("muffleWarning")
[16:04:56.822]                       }
[16:04:56.822]                       else if (inherits(cond, "condition")) {
[16:04:56.822]                         if (!is.null(pattern)) {
[16:04:56.822]                           computeRestarts <- base::computeRestarts
[16:04:56.822]                           grepl <- base::grepl
[16:04:56.822]                           restarts <- computeRestarts(cond)
[16:04:56.822]                           for (restart in restarts) {
[16:04:56.822]                             name <- restart$name
[16:04:56.822]                             if (is.null(name)) 
[16:04:56.822]                               next
[16:04:56.822]                             if (!grepl(pattern, name)) 
[16:04:56.822]                               next
[16:04:56.822]                             invokeRestart(restart)
[16:04:56.822]                             muffled <- TRUE
[16:04:56.822]                             break
[16:04:56.822]                           }
[16:04:56.822]                         }
[16:04:56.822]                       }
[16:04:56.822]                       invisible(muffled)
[16:04:56.822]                     }
[16:04:56.822]                     muffleCondition(cond, pattern = "^muffle")
[16:04:56.822]                   }
[16:04:56.822]                 }
[16:04:56.822]             }
[16:04:56.822]         }))
[16:04:56.822]     }, error = function(ex) {
[16:04:56.822]         base::structure(base::list(value = NULL, visible = NULL, 
[16:04:56.822]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:04:56.822]                 ...future.rng), started = ...future.startTime, 
[16:04:56.822]             finished = Sys.time(), session_uuid = NA_character_, 
[16:04:56.822]             version = "1.8"), class = "FutureResult")
[16:04:56.822]     }, finally = {
[16:04:56.822]         if (!identical(...future.workdir, getwd())) 
[16:04:56.822]             setwd(...future.workdir)
[16:04:56.822]         {
[16:04:56.822]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:04:56.822]                 ...future.oldOptions$nwarnings <- NULL
[16:04:56.822]             }
[16:04:56.822]             base::options(...future.oldOptions)
[16:04:56.822]             if (.Platform$OS.type == "windows") {
[16:04:56.822]                 old_names <- names(...future.oldEnvVars)
[16:04:56.822]                 envs <- base::Sys.getenv()
[16:04:56.822]                 names <- names(envs)
[16:04:56.822]                 common <- intersect(names, old_names)
[16:04:56.822]                 added <- setdiff(names, old_names)
[16:04:56.822]                 removed <- setdiff(old_names, names)
[16:04:56.822]                 changed <- common[...future.oldEnvVars[common] != 
[16:04:56.822]                   envs[common]]
[16:04:56.822]                 NAMES <- toupper(changed)
[16:04:56.822]                 args <- list()
[16:04:56.822]                 for (kk in seq_along(NAMES)) {
[16:04:56.822]                   name <- changed[[kk]]
[16:04:56.822]                   NAME <- NAMES[[kk]]
[16:04:56.822]                   if (name != NAME && is.element(NAME, old_names)) 
[16:04:56.822]                     next
[16:04:56.822]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:04:56.822]                 }
[16:04:56.822]                 NAMES <- toupper(added)
[16:04:56.822]                 for (kk in seq_along(NAMES)) {
[16:04:56.822]                   name <- added[[kk]]
[16:04:56.822]                   NAME <- NAMES[[kk]]
[16:04:56.822]                   if (name != NAME && is.element(NAME, old_names)) 
[16:04:56.822]                     next
[16:04:56.822]                   args[[name]] <- ""
[16:04:56.822]                 }
[16:04:56.822]                 NAMES <- toupper(removed)
[16:04:56.822]                 for (kk in seq_along(NAMES)) {
[16:04:56.822]                   name <- removed[[kk]]
[16:04:56.822]                   NAME <- NAMES[[kk]]
[16:04:56.822]                   if (name != NAME && is.element(NAME, old_names)) 
[16:04:56.822]                     next
[16:04:56.822]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:04:56.822]                 }
[16:04:56.822]                 if (length(args) > 0) 
[16:04:56.822]                   base::do.call(base::Sys.setenv, args = args)
[16:04:56.822]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:04:56.822]             }
[16:04:56.822]             else {
[16:04:56.822]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:04:56.822]             }
[16:04:56.822]             {
[16:04:56.822]                 if (base::length(...future.futureOptionsAdded) > 
[16:04:56.822]                   0L) {
[16:04:56.822]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:04:56.822]                   base::names(opts) <- ...future.futureOptionsAdded
[16:04:56.822]                   base::options(opts)
[16:04:56.822]                 }
[16:04:56.822]                 {
[16:04:56.822]                   {
[16:04:56.822]                     base::options(mc.cores = ...future.mc.cores.old)
[16:04:56.822]                     NULL
[16:04:56.822]                   }
[16:04:56.822]                   options(future.plan = NULL)
[16:04:56.822]                   if (is.na(NA_character_)) 
[16:04:56.822]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:04:56.822]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:04:56.822]                   future::plan(list(function (..., workers = availableCores(constraints = "multicore"), 
[16:04:56.822]                     envir = parent.frame()) 
[16:04:56.822]                   {
[16:04:56.822]                     default_workers <- missing(workers)
[16:04:56.822]                     if (is.function(workers)) 
[16:04:56.822]                       workers <- workers()
[16:04:56.822]                     workers <- structure(as.integer(workers), 
[16:04:56.822]                       class = class(workers))
[16:04:56.822]                     stop_if_not(is.finite(workers), workers >= 
[16:04:56.822]                       1L)
[16:04:56.822]                     if ((workers == 1L && !inherits(workers, 
[16:04:56.822]                       "AsIs")) || !supportsMulticore(warn = TRUE)) {
[16:04:56.822]                       if (default_workers) 
[16:04:56.822]                         supportsMulticore(warn = TRUE)
[16:04:56.822]                       return(sequential(..., envir = envir))
[16:04:56.822]                     }
[16:04:56.822]                     oopts <- options(mc.cores = workers)
[16:04:56.822]                     on.exit(options(oopts))
[16:04:56.822]                     future <- MulticoreFuture(..., workers = workers, 
[16:04:56.822]                       envir = envir)
[16:04:56.822]                     if (!future$lazy) 
[16:04:56.822]                       future <- run(future)
[16:04:56.822]                     invisible(future)
[16:04:56.822]                   }), .cleanup = FALSE, .init = FALSE)
[16:04:56.822]                 }
[16:04:56.822]             }
[16:04:56.822]         }
[16:04:56.822]     })
[16:04:56.822]     if (TRUE) {
[16:04:56.822]         base::sink(type = "output", split = FALSE)
[16:04:56.822]         if (TRUE) {
[16:04:56.822]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:04:56.822]         }
[16:04:56.822]         else {
[16:04:56.822]             ...future.result["stdout"] <- base::list(NULL)
[16:04:56.822]         }
[16:04:56.822]         base::close(...future.stdout)
[16:04:56.822]         ...future.stdout <- NULL
[16:04:56.822]     }
[16:04:56.822]     ...future.result$conditions <- ...future.conditions
[16:04:56.822]     ...future.result$finished <- base::Sys.time()
[16:04:56.822]     ...future.result
[16:04:56.822] }
[16:04:56.824] requestCore(): workers = 2
[16:04:56.827] MulticoreFuture started
[16:04:56.827] - Launch lazy future ... done
[16:04:56.827] run() for ‘MulticoreFuture’ ... done
[16:04:56.828] plan(): Setting new future strategy stack:
[16:04:56.828] List of future strategies:
[16:04:56.828] 1. sequential:
[16:04:56.828]    - args: function (..., envir = parent.frame())
[16:04:56.828]    - tweaked: FALSE
[16:04:56.828]    - call: NULL
[16:04:56.829] plan(): nbrOfWorkers() = 1
[16:04:56.829] result() for MulticoreFuture ...
[16:04:56.831] plan(): Setting new future strategy stack:
[16:04:56.831] List of future strategies:
[16:04:56.831] 1. multicore:
[16:04:56.831]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[16:04:56.831]    - tweaked: FALSE
[16:04:56.831]    - call: plan(strategy)
[16:04:56.836] plan(): nbrOfWorkers() = 2
[16:04:56.840] result() for MulticoreFuture ...
[16:04:56.840] result() for MulticoreFuture ... done
[16:04:56.840] result() for MulticoreFuture ... done
[16:04:56.840] result() for MulticoreFuture ...
[16:04:56.841] result() for MulticoreFuture ... done
[16:04:56.841] getGlobalsAndPackages() ...
Warning: R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘ignore’
[16:04:56.841] Searching for globals...
[16:04:56.842] - globals found: [1] ‘getOption’
[16:04:56.842] Searching for globals ... DONE
[16:04:56.842] Resolving globals: FALSE
[16:04:56.842] 
[16:04:56.843] 
[16:04:56.843] getGlobalsAndPackages() ... DONE
[16:04:56.843] run() for ‘Future’ ...
[16:04:56.843] - state: ‘created’
[16:04:56.843] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[16:04:56.848] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[16:04:56.848] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[16:04:56.848]   - Field: ‘label’
[16:04:56.848]   - Field: ‘local’
[16:04:56.848]   - Field: ‘owner’
[16:04:56.849]   - Field: ‘envir’
[16:04:56.849]   - Field: ‘workers’
[16:04:56.849]   - Field: ‘packages’
[16:04:56.849]   - Field: ‘gc’
[16:04:56.849]   - Field: ‘job’
[16:04:56.849]   - Field: ‘conditions’
[16:04:56.849]   - Field: ‘expr’
[16:04:56.850]   - Field: ‘uuid’
[16:04:56.850]   - Field: ‘seed’
[16:04:56.850]   - Field: ‘version’
[16:04:56.850]   - Field: ‘result’
[16:04:56.850]   - Field: ‘asynchronous’
[16:04:56.850]   - Field: ‘calls’
[16:04:56.850]   - Field: ‘globals’
[16:04:56.850]   - Field: ‘stdout’
[16:04:56.850]   - Field: ‘earlySignal’
[16:04:56.851]   - Field: ‘lazy’
[16:04:56.851]   - Field: ‘state’
[16:04:56.851] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[16:04:56.851] - Launch lazy future ...
[16:04:56.851] Packages needed by the future expression (n = 0): <none>
[16:04:56.851] Packages needed by future strategies (n = 0): <none>
[16:04:56.852] {
[16:04:56.852]     {
[16:04:56.852]         {
[16:04:56.852]             ...future.startTime <- base::Sys.time()
[16:04:56.852]             {
[16:04:56.852]                 {
[16:04:56.852]                   {
[16:04:56.852]                     {
[16:04:56.852]                       base::local({
[16:04:56.852]                         has_future <- base::requireNamespace("future", 
[16:04:56.852]                           quietly = TRUE)
[16:04:56.852]                         if (has_future) {
[16:04:56.852]                           ns <- base::getNamespace("future")
[16:04:56.852]                           version <- ns[[".package"]][["version"]]
[16:04:56.852]                           if (is.null(version)) 
[16:04:56.852]                             version <- utils::packageVersion("future")
[16:04:56.852]                         }
[16:04:56.852]                         else {
[16:04:56.852]                           version <- NULL
[16:04:56.852]                         }
[16:04:56.852]                         if (!has_future || version < "1.8.0") {
[16:04:56.852]                           info <- base::c(r_version = base::gsub("R version ", 
[16:04:56.852]                             "", base::R.version$version.string), 
[16:04:56.852]                             platform = base::sprintf("%s (%s-bit)", 
[16:04:56.852]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:04:56.852]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[16:04:56.852]                               "release", "version")], collapse = " "), 
[16:04:56.852]                             hostname = base::Sys.info()[["nodename"]])
[16:04:56.852]                           info <- base::sprintf("%s: %s", base::names(info), 
[16:04:56.852]                             info)
[16:04:56.852]                           info <- base::paste(info, collapse = "; ")
[16:04:56.852]                           if (!has_future) {
[16:04:56.852]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:04:56.852]                               info)
[16:04:56.852]                           }
[16:04:56.852]                           else {
[16:04:56.852]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:04:56.852]                               info, version)
[16:04:56.852]                           }
[16:04:56.852]                           base::stop(msg)
[16:04:56.852]                         }
[16:04:56.852]                       })
[16:04:56.852]                     }
[16:04:56.852]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[16:04:56.852]                     base::options(mc.cores = 1L)
[16:04:56.852]                   }
[16:04:56.852]                   options(future.plan = NULL)
[16:04:56.852]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:04:56.852]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:04:56.852]                 }
[16:04:56.852]                 ...future.workdir <- getwd()
[16:04:56.852]             }
[16:04:56.852]             ...future.oldOptions <- base::as.list(base::.Options)
[16:04:56.852]             ...future.oldEnvVars <- base::Sys.getenv()
[16:04:56.852]         }
[16:04:56.852]         base::options(future.startup.script = FALSE, future.globals.onMissing = "ignore", 
[16:04:56.852]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:04:56.852]             future.globals.onMissing = "ignore", future.globals.onReference = NULL, 
[16:04:56.852]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:04:56.852]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:04:56.852]             future.stdout.windows.reencode = NULL, width = 80L)
[16:04:56.852]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:04:56.852]             base::names(...future.oldOptions))
[16:04:56.852]     }
[16:04:56.852]     if (FALSE) {
[16:04:56.852]     }
[16:04:56.852]     else {
[16:04:56.852]         if (TRUE) {
[16:04:56.852]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:04:56.852]                 open = "w")
[16:04:56.852]         }
[16:04:56.852]         else {
[16:04:56.852]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:04:56.852]                 windows = "NUL", "/dev/null"), open = "w")
[16:04:56.852]         }
[16:04:56.852]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:04:56.852]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:04:56.852]             base::sink(type = "output", split = FALSE)
[16:04:56.852]             base::close(...future.stdout)
[16:04:56.852]         }, add = TRUE)
[16:04:56.852]     }
[16:04:56.852]     ...future.frame <- base::sys.nframe()
[16:04:56.852]     ...future.conditions <- base::list()
[16:04:56.852]     ...future.rng <- base::globalenv()$.Random.seed
[16:04:56.852]     if (FALSE) {
[16:04:56.852]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:04:56.852]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:04:56.852]     }
[16:04:56.852]     ...future.result <- base::tryCatch({
[16:04:56.852]         base::withCallingHandlers({
[16:04:56.852]             ...future.value <- base::withVisible(base::local({
[16:04:56.852]                 withCallingHandlers({
[16:04:56.852]                   getOption("future.globals.onMissing")
[16:04:56.852]                 }, immediateCondition = function(cond) {
[16:04:56.852]                   save_rds <- function (object, pathname, ...) 
[16:04:56.852]                   {
[16:04:56.852]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[16:04:56.852]                     if (file_test("-f", pathname_tmp)) {
[16:04:56.852]                       fi_tmp <- file.info(pathname_tmp)
[16:04:56.852]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[16:04:56.852]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:04:56.852]                         fi_tmp[["mtime"]])
[16:04:56.852]                     }
[16:04:56.852]                     tryCatch({
[16:04:56.852]                       saveRDS(object, file = pathname_tmp, ...)
[16:04:56.852]                     }, error = function(ex) {
[16:04:56.852]                       msg <- conditionMessage(ex)
[16:04:56.852]                       fi_tmp <- file.info(pathname_tmp)
[16:04:56.852]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[16:04:56.852]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:04:56.852]                         fi_tmp[["mtime"]], msg)
[16:04:56.852]                       ex$message <- msg
[16:04:56.852]                       stop(ex)
[16:04:56.852]                     })
[16:04:56.852]                     stopifnot(file_test("-f", pathname_tmp))
[16:04:56.852]                     res <- file.rename(from = pathname_tmp, to = pathname)
[16:04:56.852]                     if (!res || file_test("-f", pathname_tmp)) {
[16:04:56.852]                       fi_tmp <- file.info(pathname_tmp)
[16:04:56.852]                       fi <- file.info(pathname)
[16:04:56.852]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[16:04:56.852]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:04:56.852]                         fi_tmp[["mtime"]], sQuote(pathname), 
[16:04:56.852]                         fi[["size"]], fi[["mtime"]])
[16:04:56.852]                       stop(msg)
[16:04:56.852]                     }
[16:04:56.852]                     invisible(pathname)
[16:04:56.852]                   }
[16:04:56.852]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[16:04:56.852]                     rootPath = tempdir()) 
[16:04:56.852]                   {
[16:04:56.852]                     obj <- list(time = Sys.time(), condition = cond)
[16:04:56.852]                     file <- tempfile(pattern = class(cond)[1], 
[16:04:56.852]                       tmpdir = path, fileext = ".rds")
[16:04:56.852]                     save_rds(obj, file)
[16:04:56.852]                   }
[16:04:56.852]                   saveImmediateCondition(cond, path = "/tmp/RtmpDZPjQ0/.future/immediateConditions")
[16:04:56.852]                   muffleCondition <- function (cond, pattern = "^muffle") 
[16:04:56.852]                   {
[16:04:56.852]                     inherits <- base::inherits
[16:04:56.852]                     invokeRestart <- base::invokeRestart
[16:04:56.852]                     is.null <- base::is.null
[16:04:56.852]                     muffled <- FALSE
[16:04:56.852]                     if (inherits(cond, "message")) {
[16:04:56.852]                       muffled <- grepl(pattern, "muffleMessage")
[16:04:56.852]                       if (muffled) 
[16:04:56.852]                         invokeRestart("muffleMessage")
[16:04:56.852]                     }
[16:04:56.852]                     else if (inherits(cond, "warning")) {
[16:04:56.852]                       muffled <- grepl(pattern, "muffleWarning")
[16:04:56.852]                       if (muffled) 
[16:04:56.852]                         invokeRestart("muffleWarning")
[16:04:56.852]                     }
[16:04:56.852]                     else if (inherits(cond, "condition")) {
[16:04:56.852]                       if (!is.null(pattern)) {
[16:04:56.852]                         computeRestarts <- base::computeRestarts
[16:04:56.852]                         grepl <- base::grepl
[16:04:56.852]                         restarts <- computeRestarts(cond)
[16:04:56.852]                         for (restart in restarts) {
[16:04:56.852]                           name <- restart$name
[16:04:56.852]                           if (is.null(name)) 
[16:04:56.852]                             next
[16:04:56.852]                           if (!grepl(pattern, name)) 
[16:04:56.852]                             next
[16:04:56.852]                           invokeRestart(restart)
[16:04:56.852]                           muffled <- TRUE
[16:04:56.852]                           break
[16:04:56.852]                         }
[16:04:56.852]                       }
[16:04:56.852]                     }
[16:04:56.852]                     invisible(muffled)
[16:04:56.852]                   }
[16:04:56.852]                   muffleCondition(cond)
[16:04:56.852]                 })
[16:04:56.852]             }))
[16:04:56.852]             future::FutureResult(value = ...future.value$value, 
[16:04:56.852]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:04:56.852]                   ...future.rng), globalenv = if (FALSE) 
[16:04:56.852]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:04:56.852]                     ...future.globalenv.names))
[16:04:56.852]                 else NULL, started = ...future.startTime, version = "1.8")
[16:04:56.852]         }, condition = base::local({
[16:04:56.852]             c <- base::c
[16:04:56.852]             inherits <- base::inherits
[16:04:56.852]             invokeRestart <- base::invokeRestart
[16:04:56.852]             length <- base::length
[16:04:56.852]             list <- base::list
[16:04:56.852]             seq.int <- base::seq.int
[16:04:56.852]             signalCondition <- base::signalCondition
[16:04:56.852]             sys.calls <- base::sys.calls
[16:04:56.852]             `[[` <- base::`[[`
[16:04:56.852]             `+` <- base::`+`
[16:04:56.852]             `<<-` <- base::`<<-`
[16:04:56.852]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:04:56.852]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:04:56.852]                   3L)]
[16:04:56.852]             }
[16:04:56.852]             function(cond) {
[16:04:56.852]                 is_error <- inherits(cond, "error")
[16:04:56.852]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:04:56.852]                   NULL)
[16:04:56.852]                 if (is_error) {
[16:04:56.852]                   sessionInformation <- function() {
[16:04:56.852]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:04:56.852]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:04:56.852]                       search = base::search(), system = base::Sys.info())
[16:04:56.852]                   }
[16:04:56.852]                   ...future.conditions[[length(...future.conditions) + 
[16:04:56.852]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:04:56.852]                     cond$call), session = sessionInformation(), 
[16:04:56.852]                     timestamp = base::Sys.time(), signaled = 0L)
[16:04:56.852]                   signalCondition(cond)
[16:04:56.852]                 }
[16:04:56.852]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:04:56.852]                 "immediateCondition"))) {
[16:04:56.852]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:04:56.852]                   ...future.conditions[[length(...future.conditions) + 
[16:04:56.852]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:04:56.852]                   if (TRUE && !signal) {
[16:04:56.852]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:04:56.852]                     {
[16:04:56.852]                       inherits <- base::inherits
[16:04:56.852]                       invokeRestart <- base::invokeRestart
[16:04:56.852]                       is.null <- base::is.null
[16:04:56.852]                       muffled <- FALSE
[16:04:56.852]                       if (inherits(cond, "message")) {
[16:04:56.852]                         muffled <- grepl(pattern, "muffleMessage")
[16:04:56.852]                         if (muffled) 
[16:04:56.852]                           invokeRestart("muffleMessage")
[16:04:56.852]                       }
[16:04:56.852]                       else if (inherits(cond, "warning")) {
[16:04:56.852]                         muffled <- grepl(pattern, "muffleWarning")
[16:04:56.852]                         if (muffled) 
[16:04:56.852]                           invokeRestart("muffleWarning")
[16:04:56.852]                       }
[16:04:56.852]                       else if (inherits(cond, "condition")) {
[16:04:56.852]                         if (!is.null(pattern)) {
[16:04:56.852]                           computeRestarts <- base::computeRestarts
[16:04:56.852]                           grepl <- base::grepl
[16:04:56.852]                           restarts <- computeRestarts(cond)
[16:04:56.852]                           for (restart in restarts) {
[16:04:56.852]                             name <- restart$name
[16:04:56.852]                             if (is.null(name)) 
[16:04:56.852]                               next
[16:04:56.852]                             if (!grepl(pattern, name)) 
[16:04:56.852]                               next
[16:04:56.852]                             invokeRestart(restart)
[16:04:56.852]                             muffled <- TRUE
[16:04:56.852]                             break
[16:04:56.852]                           }
[16:04:56.852]                         }
[16:04:56.852]                       }
[16:04:56.852]                       invisible(muffled)
[16:04:56.852]                     }
[16:04:56.852]                     muffleCondition(cond, pattern = "^muffle")
[16:04:56.852]                   }
[16:04:56.852]                 }
[16:04:56.852]                 else {
[16:04:56.852]                   if (TRUE) {
[16:04:56.852]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:04:56.852]                     {
[16:04:56.852]                       inherits <- base::inherits
[16:04:56.852]                       invokeRestart <- base::invokeRestart
[16:04:56.852]                       is.null <- base::is.null
[16:04:56.852]                       muffled <- FALSE
[16:04:56.852]                       if (inherits(cond, "message")) {
[16:04:56.852]                         muffled <- grepl(pattern, "muffleMessage")
[16:04:56.852]                         if (muffled) 
[16:04:56.852]                           invokeRestart("muffleMessage")
[16:04:56.852]                       }
[16:04:56.852]                       else if (inherits(cond, "warning")) {
[16:04:56.852]                         muffled <- grepl(pattern, "muffleWarning")
[16:04:56.852]                         if (muffled) 
[16:04:56.852]                           invokeRestart("muffleWarning")
[16:04:56.852]                       }
[16:04:56.852]                       else if (inherits(cond, "condition")) {
[16:04:56.852]                         if (!is.null(pattern)) {
[16:04:56.852]                           computeRestarts <- base::computeRestarts
[16:04:56.852]                           grepl <- base::grepl
[16:04:56.852]                           restarts <- computeRestarts(cond)
[16:04:56.852]                           for (restart in restarts) {
[16:04:56.852]                             name <- restart$name
[16:04:56.852]                             if (is.null(name)) 
[16:04:56.852]                               next
[16:04:56.852]                             if (!grepl(pattern, name)) 
[16:04:56.852]                               next
[16:04:56.852]                             invokeRestart(restart)
[16:04:56.852]                             muffled <- TRUE
[16:04:56.852]                             break
[16:04:56.852]                           }
[16:04:56.852]                         }
[16:04:56.852]                       }
[16:04:56.852]                       invisible(muffled)
[16:04:56.852]                     }
[16:04:56.852]                     muffleCondition(cond, pattern = "^muffle")
[16:04:56.852]                   }
[16:04:56.852]                 }
[16:04:56.852]             }
[16:04:56.852]         }))
[16:04:56.852]     }, error = function(ex) {
[16:04:56.852]         base::structure(base::list(value = NULL, visible = NULL, 
[16:04:56.852]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:04:56.852]                 ...future.rng), started = ...future.startTime, 
[16:04:56.852]             finished = Sys.time(), session_uuid = NA_character_, 
[16:04:56.852]             version = "1.8"), class = "FutureResult")
[16:04:56.852]     }, finally = {
[16:04:56.852]         if (!identical(...future.workdir, getwd())) 
[16:04:56.852]             setwd(...future.workdir)
[16:04:56.852]         {
[16:04:56.852]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:04:56.852]                 ...future.oldOptions$nwarnings <- NULL
[16:04:56.852]             }
[16:04:56.852]             base::options(...future.oldOptions)
[16:04:56.852]             if (.Platform$OS.type == "windows") {
[16:04:56.852]                 old_names <- names(...future.oldEnvVars)
[16:04:56.852]                 envs <- base::Sys.getenv()
[16:04:56.852]                 names <- names(envs)
[16:04:56.852]                 common <- intersect(names, old_names)
[16:04:56.852]                 added <- setdiff(names, old_names)
[16:04:56.852]                 removed <- setdiff(old_names, names)
[16:04:56.852]                 changed <- common[...future.oldEnvVars[common] != 
[16:04:56.852]                   envs[common]]
[16:04:56.852]                 NAMES <- toupper(changed)
[16:04:56.852]                 args <- list()
[16:04:56.852]                 for (kk in seq_along(NAMES)) {
[16:04:56.852]                   name <- changed[[kk]]
[16:04:56.852]                   NAME <- NAMES[[kk]]
[16:04:56.852]                   if (name != NAME && is.element(NAME, old_names)) 
[16:04:56.852]                     next
[16:04:56.852]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:04:56.852]                 }
[16:04:56.852]                 NAMES <- toupper(added)
[16:04:56.852]                 for (kk in seq_along(NAMES)) {
[16:04:56.852]                   name <- added[[kk]]
[16:04:56.852]                   NAME <- NAMES[[kk]]
[16:04:56.852]                   if (name != NAME && is.element(NAME, old_names)) 
[16:04:56.852]                     next
[16:04:56.852]                   args[[name]] <- ""
[16:04:56.852]                 }
[16:04:56.852]                 NAMES <- toupper(removed)
[16:04:56.852]                 for (kk in seq_along(NAMES)) {
[16:04:56.852]                   name <- removed[[kk]]
[16:04:56.852]                   NAME <- NAMES[[kk]]
[16:04:56.852]                   if (name != NAME && is.element(NAME, old_names)) 
[16:04:56.852]                     next
[16:04:56.852]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:04:56.852]                 }
[16:04:56.852]                 if (length(args) > 0) 
[16:04:56.852]                   base::do.call(base::Sys.setenv, args = args)
[16:04:56.852]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:04:56.852]             }
[16:04:56.852]             else {
[16:04:56.852]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:04:56.852]             }
[16:04:56.852]             {
[16:04:56.852]                 if (base::length(...future.futureOptionsAdded) > 
[16:04:56.852]                   0L) {
[16:04:56.852]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:04:56.852]                   base::names(opts) <- ...future.futureOptionsAdded
[16:04:56.852]                   base::options(opts)
[16:04:56.852]                 }
[16:04:56.852]                 {
[16:04:56.852]                   {
[16:04:56.852]                     base::options(mc.cores = ...future.mc.cores.old)
[16:04:56.852]                     NULL
[16:04:56.852]                   }
[16:04:56.852]                   options(future.plan = NULL)
[16:04:56.852]                   if (is.na(NA_character_)) 
[16:04:56.852]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:04:56.852]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:04:56.852]                   future::plan(list(function (..., workers = availableCores(constraints = "multicore"), 
[16:04:56.852]                     envir = parent.frame()) 
[16:04:56.852]                   {
[16:04:56.852]                     default_workers <- missing(workers)
[16:04:56.852]                     if (is.function(workers)) 
[16:04:56.852]                       workers <- workers()
[16:04:56.852]                     workers <- structure(as.integer(workers), 
[16:04:56.852]                       class = class(workers))
[16:04:56.852]                     stop_if_not(is.finite(workers), workers >= 
[16:04:56.852]                       1L)
[16:04:56.852]                     if ((workers == 1L && !inherits(workers, 
[16:04:56.852]                       "AsIs")) || !supportsMulticore(warn = TRUE)) {
[16:04:56.852]                       if (default_workers) 
[16:04:56.852]                         supportsMulticore(warn = TRUE)
[16:04:56.852]                       return(sequential(..., envir = envir))
[16:04:56.852]                     }
[16:04:56.852]                     oopts <- options(mc.cores = workers)
[16:04:56.852]                     on.exit(options(oopts))
[16:04:56.852]                     future <- MulticoreFuture(..., workers = workers, 
[16:04:56.852]                       envir = envir)
[16:04:56.852]                     if (!future$lazy) 
[16:04:56.852]                       future <- run(future)
[16:04:56.852]                     invisible(future)
[16:04:56.852]                   }), .cleanup = FALSE, .init = FALSE)
[16:04:56.852]                 }
[16:04:56.852]             }
[16:04:56.852]         }
[16:04:56.852]     })
[16:04:56.852]     if (TRUE) {
[16:04:56.852]         base::sink(type = "output", split = FALSE)
[16:04:56.852]         if (TRUE) {
[16:04:56.852]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:04:56.852]         }
[16:04:56.852]         else {
[16:04:56.852]             ...future.result["stdout"] <- base::list(NULL)
[16:04:56.852]         }
[16:04:56.852]         base::close(...future.stdout)
[16:04:56.852]         ...future.stdout <- NULL
[16:04:56.852]     }
[16:04:56.852]     ...future.result$conditions <- ...future.conditions
[16:04:56.852]     ...future.result$finished <- base::Sys.time()
[16:04:56.852]     ...future.result
[16:04:56.852] }
[16:04:56.855] requestCore(): workers = 2
[16:04:56.857] MulticoreFuture started
[16:04:56.857] - Launch lazy future ... done
[16:04:56.857] run() for ‘MulticoreFuture’ ... done
[16:04:56.858] result() for MulticoreFuture ...
[16:04:56.858] plan(): Setting new future strategy stack:
[16:04:56.858] List of future strategies:
[16:04:56.858] 1. sequential:
[16:04:56.858]    - args: function (..., envir = parent.frame())
[16:04:56.858]    - tweaked: FALSE
[16:04:56.858]    - call: NULL
[16:04:56.859] plan(): nbrOfWorkers() = 1
[16:04:56.860] plan(): Setting new future strategy stack:
[16:04:56.861] List of future strategies:
[16:04:56.861] 1. multicore:
[16:04:56.861]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[16:04:56.861]    - tweaked: FALSE
[16:04:56.861]    - call: plan(strategy)
[16:04:56.865] plan(): nbrOfWorkers() = 2
[16:04:56.866] result() for MulticoreFuture ...
[16:04:56.866] result() for MulticoreFuture ... done
[16:04:56.866] result() for MulticoreFuture ... done
[16:04:56.867] result() for MulticoreFuture ...
[16:04:56.867] result() for MulticoreFuture ... done
[16:04:56.867] getGlobalsAndPackages() ...
Warning: R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘error’
[16:04:56.868] Searching for globals...
[16:04:56.869] getGlobalsAndPackages() ...
Warning: R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘ignore’
[16:04:56.870] Searching for globals...
[16:04:56.871] - globals found: [5] ‘$’, ‘subset’, ‘data’, ‘<’, ‘x’
[16:04:56.871] Searching for globals ... DONE
[16:04:56.871] Resolving globals: FALSE
[16:04:56.872] The total size of the 1 globals is 160 bytes (160 bytes)
[16:04:56.872] The total size of the 1 globals exported for future expression (‘subset(data, x < 3)$y’) is 160 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘data’ (160 bytes of class ‘list’)
[16:04:56.872] - globals: [1] ‘data’
[16:04:56.872] 
[16:04:56.872] getGlobalsAndPackages() ... DONE
[16:04:56.873] run() for ‘Future’ ...
[16:04:56.876] - state: ‘created’
[16:04:56.876] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[16:04:56.880] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[16:04:56.880] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[16:04:56.880]   - Field: ‘label’
[16:04:56.881]   - Field: ‘local’
[16:04:56.881]   - Field: ‘owner’
[16:04:56.881]   - Field: ‘envir’
[16:04:56.881]   - Field: ‘workers’
[16:04:56.881]   - Field: ‘packages’
[16:04:56.881]   - Field: ‘gc’
[16:04:56.881]   - Field: ‘job’
[16:04:56.881]   - Field: ‘conditions’
[16:04:56.882]   - Field: ‘expr’
[16:04:56.882]   - Field: ‘uuid’
[16:04:56.882]   - Field: ‘seed’
[16:04:56.882]   - Field: ‘version’
[16:04:56.882]   - Field: ‘result’
[16:04:56.882]   - Field: ‘asynchronous’
[16:04:56.882]   - Field: ‘calls’
[16:04:56.882]   - Field: ‘globals’
[16:04:56.882]   - Field: ‘stdout’
[16:04:56.883]   - Field: ‘earlySignal’
[16:04:56.883]   - Field: ‘lazy’
[16:04:56.883]   - Field: ‘state’
[16:04:56.883] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[16:04:56.883] - Launch lazy future ...
[16:04:56.883] Packages needed by the future expression (n = 0): <none>
[16:04:56.884] Packages needed by future strategies (n = 0): <none>
[16:04:56.884] {
[16:04:56.884]     {
[16:04:56.884]         {
[16:04:56.884]             ...future.startTime <- base::Sys.time()
[16:04:56.884]             {
[16:04:56.884]                 {
[16:04:56.884]                   {
[16:04:56.884]                     {
[16:04:56.884]                       base::local({
[16:04:56.884]                         has_future <- base::requireNamespace("future", 
[16:04:56.884]                           quietly = TRUE)
[16:04:56.884]                         if (has_future) {
[16:04:56.884]                           ns <- base::getNamespace("future")
[16:04:56.884]                           version <- ns[[".package"]][["version"]]
[16:04:56.884]                           if (is.null(version)) 
[16:04:56.884]                             version <- utils::packageVersion("future")
[16:04:56.884]                         }
[16:04:56.884]                         else {
[16:04:56.884]                           version <- NULL
[16:04:56.884]                         }
[16:04:56.884]                         if (!has_future || version < "1.8.0") {
[16:04:56.884]                           info <- base::c(r_version = base::gsub("R version ", 
[16:04:56.884]                             "", base::R.version$version.string), 
[16:04:56.884]                             platform = base::sprintf("%s (%s-bit)", 
[16:04:56.884]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:04:56.884]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[16:04:56.884]                               "release", "version")], collapse = " "), 
[16:04:56.884]                             hostname = base::Sys.info()[["nodename"]])
[16:04:56.884]                           info <- base::sprintf("%s: %s", base::names(info), 
[16:04:56.884]                             info)
[16:04:56.884]                           info <- base::paste(info, collapse = "; ")
[16:04:56.884]                           if (!has_future) {
[16:04:56.884]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:04:56.884]                               info)
[16:04:56.884]                           }
[16:04:56.884]                           else {
[16:04:56.884]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:04:56.884]                               info, version)
[16:04:56.884]                           }
[16:04:56.884]                           base::stop(msg)
[16:04:56.884]                         }
[16:04:56.884]                       })
[16:04:56.884]                     }
[16:04:56.884]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[16:04:56.884]                     base::options(mc.cores = 1L)
[16:04:56.884]                   }
[16:04:56.884]                   options(future.plan = NULL)
[16:04:56.884]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:04:56.884]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:04:56.884]                 }
[16:04:56.884]                 ...future.workdir <- getwd()
[16:04:56.884]             }
[16:04:56.884]             ...future.oldOptions <- base::as.list(base::.Options)
[16:04:56.884]             ...future.oldEnvVars <- base::Sys.getenv()
[16:04:56.884]         }
[16:04:56.884]         base::options(future.startup.script = FALSE, future.globals.onMissing = "ignore", 
[16:04:56.884]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:04:56.884]             future.globals.onMissing = "ignore", future.globals.onReference = NULL, 
[16:04:56.884]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:04:56.884]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:04:56.884]             future.stdout.windows.reencode = NULL, width = 80L)
[16:04:56.884]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:04:56.884]             base::names(...future.oldOptions))
[16:04:56.884]     }
[16:04:56.884]     if (FALSE) {
[16:04:56.884]     }
[16:04:56.884]     else {
[16:04:56.884]         if (TRUE) {
[16:04:56.884]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:04:56.884]                 open = "w")
[16:04:56.884]         }
[16:04:56.884]         else {
[16:04:56.884]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:04:56.884]                 windows = "NUL", "/dev/null"), open = "w")
[16:04:56.884]         }
[16:04:56.884]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:04:56.884]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:04:56.884]             base::sink(type = "output", split = FALSE)
[16:04:56.884]             base::close(...future.stdout)
[16:04:56.884]         }, add = TRUE)
[16:04:56.884]     }
[16:04:56.884]     ...future.frame <- base::sys.nframe()
[16:04:56.884]     ...future.conditions <- base::list()
[16:04:56.884]     ...future.rng <- base::globalenv()$.Random.seed
[16:04:56.884]     if (FALSE) {
[16:04:56.884]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:04:56.884]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:04:56.884]     }
[16:04:56.884]     ...future.result <- base::tryCatch({
[16:04:56.884]         base::withCallingHandlers({
[16:04:56.884]             ...future.value <- base::withVisible(base::local({
[16:04:56.884]                 withCallingHandlers({
[16:04:56.884]                   subset(data, x < 3)$y
[16:04:56.884]                 }, immediateCondition = function(cond) {
[16:04:56.884]                   save_rds <- function (object, pathname, ...) 
[16:04:56.884]                   {
[16:04:56.884]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[16:04:56.884]                     if (file_test("-f", pathname_tmp)) {
[16:04:56.884]                       fi_tmp <- file.info(pathname_tmp)
[16:04:56.884]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[16:04:56.884]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:04:56.884]                         fi_tmp[["mtime"]])
[16:04:56.884]                     }
[16:04:56.884]                     tryCatch({
[16:04:56.884]                       saveRDS(object, file = pathname_tmp, ...)
[16:04:56.884]                     }, error = function(ex) {
[16:04:56.884]                       msg <- conditionMessage(ex)
[16:04:56.884]                       fi_tmp <- file.info(pathname_tmp)
[16:04:56.884]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[16:04:56.884]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:04:56.884]                         fi_tmp[["mtime"]], msg)
[16:04:56.884]                       ex$message <- msg
[16:04:56.884]                       stop(ex)
[16:04:56.884]                     })
[16:04:56.884]                     stopifnot(file_test("-f", pathname_tmp))
[16:04:56.884]                     res <- file.rename(from = pathname_tmp, to = pathname)
[16:04:56.884]                     if (!res || file_test("-f", pathname_tmp)) {
[16:04:56.884]                       fi_tmp <- file.info(pathname_tmp)
[16:04:56.884]                       fi <- file.info(pathname)
[16:04:56.884]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[16:04:56.884]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:04:56.884]                         fi_tmp[["mtime"]], sQuote(pathname), 
[16:04:56.884]                         fi[["size"]], fi[["mtime"]])
[16:04:56.884]                       stop(msg)
[16:04:56.884]                     }
[16:04:56.884]                     invisible(pathname)
[16:04:56.884]                   }
[16:04:56.884]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[16:04:56.884]                     rootPath = tempdir()) 
[16:04:56.884]                   {
[16:04:56.884]                     obj <- list(time = Sys.time(), condition = cond)
[16:04:56.884]                     file <- tempfile(pattern = class(cond)[1], 
[16:04:56.884]                       tmpdir = path, fileext = ".rds")
[16:04:56.884]                     save_rds(obj, file)
[16:04:56.884]                   }
[16:04:56.884]                   saveImmediateCondition(cond, path = "/tmp/RtmpDZPjQ0/.future/immediateConditions")
[16:04:56.884]                   muffleCondition <- function (cond, pattern = "^muffle") 
[16:04:56.884]                   {
[16:04:56.884]                     inherits <- base::inherits
[16:04:56.884]                     invokeRestart <- base::invokeRestart
[16:04:56.884]                     is.null <- base::is.null
[16:04:56.884]                     muffled <- FALSE
[16:04:56.884]                     if (inherits(cond, "message")) {
[16:04:56.884]                       muffled <- grepl(pattern, "muffleMessage")
[16:04:56.884]                       if (muffled) 
[16:04:56.884]                         invokeRestart("muffleMessage")
[16:04:56.884]                     }
[16:04:56.884]                     else if (inherits(cond, "warning")) {
[16:04:56.884]                       muffled <- grepl(pattern, "muffleWarning")
[16:04:56.884]                       if (muffled) 
[16:04:56.884]                         invokeRestart("muffleWarning")
[16:04:56.884]                     }
[16:04:56.884]                     else if (inherits(cond, "condition")) {
[16:04:56.884]                       if (!is.null(pattern)) {
[16:04:56.884]                         computeRestarts <- base::computeRestarts
[16:04:56.884]                         grepl <- base::grepl
[16:04:56.884]                         restarts <- computeRestarts(cond)
[16:04:56.884]                         for (restart in restarts) {
[16:04:56.884]                           name <- restart$name
[16:04:56.884]                           if (is.null(name)) 
[16:04:56.884]                             next
[16:04:56.884]                           if (!grepl(pattern, name)) 
[16:04:56.884]                             next
[16:04:56.884]                           invokeRestart(restart)
[16:04:56.884]                           muffled <- TRUE
[16:04:56.884]                           break
[16:04:56.884]                         }
[16:04:56.884]                       }
[16:04:56.884]                     }
[16:04:56.884]                     invisible(muffled)
[16:04:56.884]                   }
[16:04:56.884]                   muffleCondition(cond)
[16:04:56.884]                 })
[16:04:56.884]             }))
[16:04:56.884]             future::FutureResult(value = ...future.value$value, 
[16:04:56.884]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:04:56.884]                   ...future.rng), globalenv = if (FALSE) 
[16:04:56.884]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:04:56.884]                     ...future.globalenv.names))
[16:04:56.884]                 else NULL, started = ...future.startTime, version = "1.8")
[16:04:56.884]         }, condition = base::local({
[16:04:56.884]             c <- base::c
[16:04:56.884]             inherits <- base::inherits
[16:04:56.884]             invokeRestart <- base::invokeRestart
[16:04:56.884]             length <- base::length
[16:04:56.884]             list <- base::list
[16:04:56.884]             seq.int <- base::seq.int
[16:04:56.884]             signalCondition <- base::signalCondition
[16:04:56.884]             sys.calls <- base::sys.calls
[16:04:56.884]             `[[` <- base::`[[`
[16:04:56.884]             `+` <- base::`+`
[16:04:56.884]             `<<-` <- base::`<<-`
[16:04:56.884]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:04:56.884]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:04:56.884]                   3L)]
[16:04:56.884]             }
[16:04:56.884]             function(cond) {
[16:04:56.884]                 is_error <- inherits(cond, "error")
[16:04:56.884]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:04:56.884]                   NULL)
[16:04:56.884]                 if (is_error) {
[16:04:56.884]                   sessionInformation <- function() {
[16:04:56.884]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:04:56.884]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:04:56.884]                       search = base::search(), system = base::Sys.info())
[16:04:56.884]                   }
[16:04:56.884]                   ...future.conditions[[length(...future.conditions) + 
[16:04:56.884]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:04:56.884]                     cond$call), session = sessionInformation(), 
[16:04:56.884]                     timestamp = base::Sys.time(), signaled = 0L)
[16:04:56.884]                   signalCondition(cond)
[16:04:56.884]                 }
[16:04:56.884]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:04:56.884]                 "immediateCondition"))) {
[16:04:56.884]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:04:56.884]                   ...future.conditions[[length(...future.conditions) + 
[16:04:56.884]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:04:56.884]                   if (TRUE && !signal) {
[16:04:56.884]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:04:56.884]                     {
[16:04:56.884]                       inherits <- base::inherits
[16:04:56.884]                       invokeRestart <- base::invokeRestart
[16:04:56.884]                       is.null <- base::is.null
[16:04:56.884]                       muffled <- FALSE
[16:04:56.884]                       if (inherits(cond, "message")) {
[16:04:56.884]                         muffled <- grepl(pattern, "muffleMessage")
[16:04:56.884]                         if (muffled) 
[16:04:56.884]                           invokeRestart("muffleMessage")
[16:04:56.884]                       }
[16:04:56.884]                       else if (inherits(cond, "warning")) {
[16:04:56.884]                         muffled <- grepl(pattern, "muffleWarning")
[16:04:56.884]                         if (muffled) 
[16:04:56.884]                           invokeRestart("muffleWarning")
[16:04:56.884]                       }
[16:04:56.884]                       else if (inherits(cond, "condition")) {
[16:04:56.884]                         if (!is.null(pattern)) {
[16:04:56.884]                           computeRestarts <- base::computeRestarts
[16:04:56.884]                           grepl <- base::grepl
[16:04:56.884]                           restarts <- computeRestarts(cond)
[16:04:56.884]                           for (restart in restarts) {
[16:04:56.884]                             name <- restart$name
[16:04:56.884]                             if (is.null(name)) 
[16:04:56.884]                               next
[16:04:56.884]                             if (!grepl(pattern, name)) 
[16:04:56.884]                               next
[16:04:56.884]                             invokeRestart(restart)
[16:04:56.884]                             muffled <- TRUE
[16:04:56.884]                             break
[16:04:56.884]                           }
[16:04:56.884]                         }
[16:04:56.884]                       }
[16:04:56.884]                       invisible(muffled)
[16:04:56.884]                     }
[16:04:56.884]                     muffleCondition(cond, pattern = "^muffle")
[16:04:56.884]                   }
[16:04:56.884]                 }
[16:04:56.884]                 else {
[16:04:56.884]                   if (TRUE) {
[16:04:56.884]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:04:56.884]                     {
[16:04:56.884]                       inherits <- base::inherits
[16:04:56.884]                       invokeRestart <- base::invokeRestart
[16:04:56.884]                       is.null <- base::is.null
[16:04:56.884]                       muffled <- FALSE
[16:04:56.884]                       if (inherits(cond, "message")) {
[16:04:56.884]                         muffled <- grepl(pattern, "muffleMessage")
[16:04:56.884]                         if (muffled) 
[16:04:56.884]                           invokeRestart("muffleMessage")
[16:04:56.884]                       }
[16:04:56.884]                       else if (inherits(cond, "warning")) {
[16:04:56.884]                         muffled <- grepl(pattern, "muffleWarning")
[16:04:56.884]                         if (muffled) 
[16:04:56.884]                           invokeRestart("muffleWarning")
[16:04:56.884]                       }
[16:04:56.884]                       else if (inherits(cond, "condition")) {
[16:04:56.884]                         if (!is.null(pattern)) {
[16:04:56.884]                           computeRestarts <- base::computeRestarts
[16:04:56.884]                           grepl <- base::grepl
[16:04:56.884]                           restarts <- computeRestarts(cond)
[16:04:56.884]                           for (restart in restarts) {
[16:04:56.884]                             name <- restart$name
[16:04:56.884]                             if (is.null(name)) 
[16:04:56.884]                               next
[16:04:56.884]                             if (!grepl(pattern, name)) 
[16:04:56.884]                               next
[16:04:56.884]                             invokeRestart(restart)
[16:04:56.884]                             muffled <- TRUE
[16:04:56.884]                             break
[16:04:56.884]                           }
[16:04:56.884]                         }
[16:04:56.884]                       }
[16:04:56.884]                       invisible(muffled)
[16:04:56.884]                     }
[16:04:56.884]                     muffleCondition(cond, pattern = "^muffle")
[16:04:56.884]                   }
[16:04:56.884]                 }
[16:04:56.884]             }
[16:04:56.884]         }))
[16:04:56.884]     }, error = function(ex) {
[16:04:56.884]         base::structure(base::list(value = NULL, visible = NULL, 
[16:04:56.884]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:04:56.884]                 ...future.rng), started = ...future.startTime, 
[16:04:56.884]             finished = Sys.time(), session_uuid = NA_character_, 
[16:04:56.884]             version = "1.8"), class = "FutureResult")
[16:04:56.884]     }, finally = {
[16:04:56.884]         if (!identical(...future.workdir, getwd())) 
[16:04:56.884]             setwd(...future.workdir)
[16:04:56.884]         {
[16:04:56.884]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:04:56.884]                 ...future.oldOptions$nwarnings <- NULL
[16:04:56.884]             }
[16:04:56.884]             base::options(...future.oldOptions)
[16:04:56.884]             if (.Platform$OS.type == "windows") {
[16:04:56.884]                 old_names <- names(...future.oldEnvVars)
[16:04:56.884]                 envs <- base::Sys.getenv()
[16:04:56.884]                 names <- names(envs)
[16:04:56.884]                 common <- intersect(names, old_names)
[16:04:56.884]                 added <- setdiff(names, old_names)
[16:04:56.884]                 removed <- setdiff(old_names, names)
[16:04:56.884]                 changed <- common[...future.oldEnvVars[common] != 
[16:04:56.884]                   envs[common]]
[16:04:56.884]                 NAMES <- toupper(changed)
[16:04:56.884]                 args <- list()
[16:04:56.884]                 for (kk in seq_along(NAMES)) {
[16:04:56.884]                   name <- changed[[kk]]
[16:04:56.884]                   NAME <- NAMES[[kk]]
[16:04:56.884]                   if (name != NAME && is.element(NAME, old_names)) 
[16:04:56.884]                     next
[16:04:56.884]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:04:56.884]                 }
[16:04:56.884]                 NAMES <- toupper(added)
[16:04:56.884]                 for (kk in seq_along(NAMES)) {
[16:04:56.884]                   name <- added[[kk]]
[16:04:56.884]                   NAME <- NAMES[[kk]]
[16:04:56.884]                   if (name != NAME && is.element(NAME, old_names)) 
[16:04:56.884]                     next
[16:04:56.884]                   args[[name]] <- ""
[16:04:56.884]                 }
[16:04:56.884]                 NAMES <- toupper(removed)
[16:04:56.884]                 for (kk in seq_along(NAMES)) {
[16:04:56.884]                   name <- removed[[kk]]
[16:04:56.884]                   NAME <- NAMES[[kk]]
[16:04:56.884]                   if (name != NAME && is.element(NAME, old_names)) 
[16:04:56.884]                     next
[16:04:56.884]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:04:56.884]                 }
[16:04:56.884]                 if (length(args) > 0) 
[16:04:56.884]                   base::do.call(base::Sys.setenv, args = args)
[16:04:56.884]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:04:56.884]             }
[16:04:56.884]             else {
[16:04:56.884]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:04:56.884]             }
[16:04:56.884]             {
[16:04:56.884]                 if (base::length(...future.futureOptionsAdded) > 
[16:04:56.884]                   0L) {
[16:04:56.884]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:04:56.884]                   base::names(opts) <- ...future.futureOptionsAdded
[16:04:56.884]                   base::options(opts)
[16:04:56.884]                 }
[16:04:56.884]                 {
[16:04:56.884]                   {
[16:04:56.884]                     base::options(mc.cores = ...future.mc.cores.old)
[16:04:56.884]                     NULL
[16:04:56.884]                   }
[16:04:56.884]                   options(future.plan = NULL)
[16:04:56.884]                   if (is.na(NA_character_)) 
[16:04:56.884]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:04:56.884]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:04:56.884]                   future::plan(list(function (..., workers = availableCores(constraints = "multicore"), 
[16:04:56.884]                     envir = parent.frame()) 
[16:04:56.884]                   {
[16:04:56.884]                     default_workers <- missing(workers)
[16:04:56.884]                     if (is.function(workers)) 
[16:04:56.884]                       workers <- workers()
[16:04:56.884]                     workers <- structure(as.integer(workers), 
[16:04:56.884]                       class = class(workers))
[16:04:56.884]                     stop_if_not(is.finite(workers), workers >= 
[16:04:56.884]                       1L)
[16:04:56.884]                     if ((workers == 1L && !inherits(workers, 
[16:04:56.884]                       "AsIs")) || !supportsMulticore(warn = TRUE)) {
[16:04:56.884]                       if (default_workers) 
[16:04:56.884]                         supportsMulticore(warn = TRUE)
[16:04:56.884]                       return(sequential(..., envir = envir))
[16:04:56.884]                     }
[16:04:56.884]                     oopts <- options(mc.cores = workers)
[16:04:56.884]                     on.exit(options(oopts))
[16:04:56.884]                     future <- MulticoreFuture(..., workers = workers, 
[16:04:56.884]                       envir = envir)
[16:04:56.884]                     if (!future$lazy) 
[16:04:56.884]                       future <- run(future)
[16:04:56.884]                     invisible(future)
[16:04:56.884]                   }), .cleanup = FALSE, .init = FALSE)
[16:04:56.884]                 }
[16:04:56.884]             }
[16:04:56.884]         }
[16:04:56.884]     })
[16:04:56.884]     if (TRUE) {
[16:04:56.884]         base::sink(type = "output", split = FALSE)
[16:04:56.884]         if (TRUE) {
[16:04:56.884]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:04:56.884]         }
[16:04:56.884]         else {
[16:04:56.884]             ...future.result["stdout"] <- base::list(NULL)
[16:04:56.884]         }
[16:04:56.884]         base::close(...future.stdout)
[16:04:56.884]         ...future.stdout <- NULL
[16:04:56.884]     }
[16:04:56.884]     ...future.result$conditions <- ...future.conditions
[16:04:56.884]     ...future.result$finished <- base::Sys.time()
[16:04:56.884]     ...future.result
[16:04:56.884] }
[16:04:56.886] assign_globals() ...
[16:04:56.887] List of 1
[16:04:56.887]  $ data:'data.frame':	5 obs. of  2 variables:
[16:04:56.887]   ..$ x: int [1:5] 1 2 3 4 5
[16:04:56.887]   ..$ y: int [1:5] 1 2 3 4 5
[16:04:56.887]  - attr(*, "where")=List of 1
[16:04:56.887]   ..$ data:<environment: R_EmptyEnv> 
[16:04:56.887]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[16:04:56.887]  - attr(*, "resolved")= logi FALSE
[16:04:56.887]  - attr(*, "total_size")= num 160
[16:04:56.887]  - attr(*, "already-done")= logi TRUE
[16:04:56.890] - copied ‘data’ to environment
[16:04:56.890] assign_globals() ... done
[16:04:56.891] requestCore(): workers = 2
[16:04:56.893] MulticoreFuture started
[16:04:56.893] - Launch lazy future ... done
[16:04:56.893] run() for ‘MulticoreFuture’ ... done
[16:04:56.894] result() for MulticoreFuture ...
[16:04:56.894] plan(): Setting new future strategy stack:
[16:04:56.894] List of future strategies:
[16:04:56.894] 1. sequential:
[16:04:56.894]    - args: function (..., envir = parent.frame())
[16:04:56.894]    - tweaked: FALSE
[16:04:56.894]    - call: NULL
[16:04:56.895] plan(): nbrOfWorkers() = 1
[16:04:56.897] plan(): Setting new future strategy stack:
[16:04:56.897] List of future strategies:
[16:04:56.897] 1. multicore:
[16:04:56.897]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[16:04:56.897]    - tweaked: FALSE
[16:04:56.897]    - call: plan(strategy)
[16:04:56.903] plan(): nbrOfWorkers() = 2
[16:04:56.904] result() for MulticoreFuture ...
[16:04:56.904] result() for MulticoreFuture ... done
[16:04:56.904] result() for MulticoreFuture ... done
[16:04:56.904] result() for MulticoreFuture ...
[16:04:56.904] result() for MulticoreFuture ... done
[16:04:56.905] plan(): Setting new future strategy stack:
[16:04:56.905] List of future strategies:
[16:04:56.905] 1. sequential:
[16:04:56.905]    - args: function (..., envir = parent.frame())
[16:04:56.905]    - tweaked: FALSE
[16:04:56.905]    - call: plan(list(sequential, strategy))
[16:04:56.905] 2. multicore:
[16:04:56.905]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[16:04:56.905]    - tweaked: FALSE
[16:04:56.905]    - call: plan(list(sequential, strategy))
[16:04:56.906] plan(): nbrOfWorkers() = 1
[16:04:56.906] getGlobalsAndPackages() ...
Warning: R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘ignore’
[16:04:56.906] Searching for globals...
[16:04:56.910] - globals found: [8] ‘{’, ‘<-’, ‘$’, ‘subset’, ‘data’, ‘<’, ‘x’, ‘%<-%’
[16:04:56.910] Searching for globals ... DONE
[16:04:56.910] Resolving globals: FALSE
[16:04:56.911] The total size of the 1 globals is 160 bytes (160 bytes)
[16:04:56.912] The total size of the 1 globals exported for future expression (‘{; a %<-% subset(data, x < 3)$y; a; }’) is 160 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘data’ (160 bytes of class ‘list’)
[16:04:56.912] - globals: [1] ‘data’
[16:04:56.912] - packages: [1] ‘future’
[16:04:56.912] getGlobalsAndPackages() ... DONE
[16:04:56.912] run() for ‘Future’ ...
[16:04:56.912] - state: ‘created’
[16:04:56.913] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[16:04:56.913] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[16:04:56.913] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[16:04:56.913]   - Field: ‘label’
[16:04:56.913]   - Field: ‘local’
[16:04:56.913]   - Field: ‘owner’
[16:04:56.914]   - Field: ‘envir’
[16:04:56.914]   - Field: ‘packages’
[16:04:56.914]   - Field: ‘gc’
[16:04:56.914]   - Field: ‘conditions’
[16:04:56.914]   - Field: ‘expr’
[16:04:56.914]   - Field: ‘uuid’
[16:04:56.914]   - Field: ‘seed’
[16:04:56.914]   - Field: ‘version’
[16:04:56.915]   - Field: ‘result’
[16:04:56.915]   - Field: ‘asynchronous’
[16:04:56.915]   - Field: ‘calls’
[16:04:56.915]   - Field: ‘globals’
[16:04:56.915]   - Field: ‘stdout’
[16:04:56.915]   - Field: ‘earlySignal’
[16:04:56.915]   - Field: ‘lazy’
[16:04:56.915]   - Field: ‘state’
[16:04:56.915] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[16:04:56.916] - Launch lazy future ...
[16:04:56.916] Packages needed by the future expression (n = 1): ‘future’
[16:04:56.916] Packages needed by future strategies (n = 1): ‘future’
[16:04:56.917] {
[16:04:56.917]     {
[16:04:56.917]         {
[16:04:56.917]             ...future.startTime <- base::Sys.time()
[16:04:56.917]             {
[16:04:56.917]                 {
[16:04:56.917]                   {
[16:04:56.917]                     {
[16:04:56.917]                       base::local({
[16:04:56.917]                         has_future <- base::requireNamespace("future", 
[16:04:56.917]                           quietly = TRUE)
[16:04:56.917]                         if (has_future) {
[16:04:56.917]                           ns <- base::getNamespace("future")
[16:04:56.917]                           version <- ns[[".package"]][["version"]]
[16:04:56.917]                           if (is.null(version)) 
[16:04:56.917]                             version <- utils::packageVersion("future")
[16:04:56.917]                         }
[16:04:56.917]                         else {
[16:04:56.917]                           version <- NULL
[16:04:56.917]                         }
[16:04:56.917]                         if (!has_future || version < "1.8.0") {
[16:04:56.917]                           info <- base::c(r_version = base::gsub("R version ", 
[16:04:56.917]                             "", base::R.version$version.string), 
[16:04:56.917]                             platform = base::sprintf("%s (%s-bit)", 
[16:04:56.917]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:04:56.917]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[16:04:56.917]                               "release", "version")], collapse = " "), 
[16:04:56.917]                             hostname = base::Sys.info()[["nodename"]])
[16:04:56.917]                           info <- base::sprintf("%s: %s", base::names(info), 
[16:04:56.917]                             info)
[16:04:56.917]                           info <- base::paste(info, collapse = "; ")
[16:04:56.917]                           if (!has_future) {
[16:04:56.917]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:04:56.917]                               info)
[16:04:56.917]                           }
[16:04:56.917]                           else {
[16:04:56.917]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:04:56.917]                               info, version)
[16:04:56.917]                           }
[16:04:56.917]                           base::stop(msg)
[16:04:56.917]                         }
[16:04:56.917]                       })
[16:04:56.917]                     }
[16:04:56.917]                     base::local({
[16:04:56.917]                       for (pkg in "future") {
[16:04:56.917]                         base::loadNamespace(pkg)
[16:04:56.917]                         base::library(pkg, character.only = TRUE)
[16:04:56.917]                       }
[16:04:56.917]                     })
[16:04:56.917]                   }
[16:04:56.917]                   options(future.plan = NULL)
[16:04:56.917]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:04:56.917]                   future::plan(list(function (..., workers = availableCores(constraints = "multicore"), 
[16:04:56.917]                     envir = parent.frame()) 
[16:04:56.917]                   {
[16:04:56.917]                     default_workers <- missing(workers)
[16:04:56.917]                     if (is.function(workers)) 
[16:04:56.917]                       workers <- workers()
[16:04:56.917]                     workers <- structure(as.integer(workers), 
[16:04:56.917]                       class = class(workers))
[16:04:56.917]                     stop_if_not(is.finite(workers), workers >= 
[16:04:56.917]                       1L)
[16:04:56.917]                     if ((workers == 1L && !inherits(workers, 
[16:04:56.917]                       "AsIs")) || !supportsMulticore(warn = TRUE)) {
[16:04:56.917]                       if (default_workers) 
[16:04:56.917]                         supportsMulticore(warn = TRUE)
[16:04:56.917]                       return(sequential(..., envir = envir))
[16:04:56.917]                     }
[16:04:56.917]                     oopts <- options(mc.cores = workers)
[16:04:56.917]                     on.exit(options(oopts))
[16:04:56.917]                     future <- MulticoreFuture(..., workers = workers, 
[16:04:56.917]                       envir = envir)
[16:04:56.917]                     if (!future$lazy) 
[16:04:56.917]                       future <- run(future)
[16:04:56.917]                     invisible(future)
[16:04:56.917]                   }), .cleanup = FALSE, .init = FALSE)
[16:04:56.917]                 }
[16:04:56.917]                 ...future.workdir <- getwd()
[16:04:56.917]             }
[16:04:56.917]             ...future.oldOptions <- base::as.list(base::.Options)
[16:04:56.917]             ...future.oldEnvVars <- base::Sys.getenv()
[16:04:56.917]         }
[16:04:56.917]         base::options(future.startup.script = FALSE, future.globals.onMissing = "ignore", 
[16:04:56.917]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:04:56.917]             future.globals.onMissing = "ignore", future.globals.onReference = NULL, 
[16:04:56.917]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:04:56.917]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:04:56.917]             future.stdout.windows.reencode = NULL, width = 80L)
[16:04:56.917]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:04:56.917]             base::names(...future.oldOptions))
[16:04:56.917]     }
[16:04:56.917]     if (FALSE) {
[16:04:56.917]     }
[16:04:56.917]     else {
[16:04:56.917]         if (TRUE) {
[16:04:56.917]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:04:56.917]                 open = "w")
[16:04:56.917]         }
[16:04:56.917]         else {
[16:04:56.917]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:04:56.917]                 windows = "NUL", "/dev/null"), open = "w")
[16:04:56.917]         }
[16:04:56.917]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:04:56.917]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:04:56.917]             base::sink(type = "output", split = FALSE)
[16:04:56.917]             base::close(...future.stdout)
[16:04:56.917]         }, add = TRUE)
[16:04:56.917]     }
[16:04:56.917]     ...future.frame <- base::sys.nframe()
[16:04:56.917]     ...future.conditions <- base::list()
[16:04:56.917]     ...future.rng <- base::globalenv()$.Random.seed
[16:04:56.917]     if (FALSE) {
[16:04:56.917]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:04:56.917]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:04:56.917]     }
[16:04:56.917]     ...future.result <- base::tryCatch({
[16:04:56.917]         base::withCallingHandlers({
[16:04:56.917]             ...future.value <- base::withVisible(base::local({
[16:04:56.917]                 a %<-% subset(data, x < 3)$y
[16:04:56.917]                 a
[16:04:56.917]             }))
[16:04:56.917]             future::FutureResult(value = ...future.value$value, 
[16:04:56.917]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:04:56.917]                   ...future.rng), globalenv = if (FALSE) 
[16:04:56.917]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:04:56.917]                     ...future.globalenv.names))
[16:04:56.917]                 else NULL, started = ...future.startTime, version = "1.8")
[16:04:56.917]         }, condition = base::local({
[16:04:56.917]             c <- base::c
[16:04:56.917]             inherits <- base::inherits
[16:04:56.917]             invokeRestart <- base::invokeRestart
[16:04:56.917]             length <- base::length
[16:04:56.917]             list <- base::list
[16:04:56.917]             seq.int <- base::seq.int
[16:04:56.917]             signalCondition <- base::signalCondition
[16:04:56.917]             sys.calls <- base::sys.calls
[16:04:56.917]             `[[` <- base::`[[`
[16:04:56.917]             `+` <- base::`+`
[16:04:56.917]             `<<-` <- base::`<<-`
[16:04:56.917]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:04:56.917]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:04:56.917]                   3L)]
[16:04:56.917]             }
[16:04:56.917]             function(cond) {
[16:04:56.917]                 is_error <- inherits(cond, "error")
[16:04:56.917]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:04:56.917]                   NULL)
[16:04:56.917]                 if (is_error) {
[16:04:56.917]                   sessionInformation <- function() {
[16:04:56.917]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:04:56.917]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:04:56.917]                       search = base::search(), system = base::Sys.info())
[16:04:56.917]                   }
[16:04:56.917]                   ...future.conditions[[length(...future.conditions) + 
[16:04:56.917]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:04:56.917]                     cond$call), session = sessionInformation(), 
[16:04:56.917]                     timestamp = base::Sys.time(), signaled = 0L)
[16:04:56.917]                   signalCondition(cond)
[16:04:56.917]                 }
[16:04:56.917]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:04:56.917]                 "immediateCondition"))) {
[16:04:56.917]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:04:56.917]                   ...future.conditions[[length(...future.conditions) + 
[16:04:56.917]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:04:56.917]                   if (TRUE && !signal) {
[16:04:56.917]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:04:56.917]                     {
[16:04:56.917]                       inherits <- base::inherits
[16:04:56.917]                       invokeRestart <- base::invokeRestart
[16:04:56.917]                       is.null <- base::is.null
[16:04:56.917]                       muffled <- FALSE
[16:04:56.917]                       if (inherits(cond, "message")) {
[16:04:56.917]                         muffled <- grepl(pattern, "muffleMessage")
[16:04:56.917]                         if (muffled) 
[16:04:56.917]                           invokeRestart("muffleMessage")
[16:04:56.917]                       }
[16:04:56.917]                       else if (inherits(cond, "warning")) {
[16:04:56.917]                         muffled <- grepl(pattern, "muffleWarning")
[16:04:56.917]                         if (muffled) 
[16:04:56.917]                           invokeRestart("muffleWarning")
[16:04:56.917]                       }
[16:04:56.917]                       else if (inherits(cond, "condition")) {
[16:04:56.917]                         if (!is.null(pattern)) {
[16:04:56.917]                           computeRestarts <- base::computeRestarts
[16:04:56.917]                           grepl <- base::grepl
[16:04:56.917]                           restarts <- computeRestarts(cond)
[16:04:56.917]                           for (restart in restarts) {
[16:04:56.917]                             name <- restart$name
[16:04:56.917]                             if (is.null(name)) 
[16:04:56.917]                               next
[16:04:56.917]                             if (!grepl(pattern, name)) 
[16:04:56.917]                               next
[16:04:56.917]                             invokeRestart(restart)
[16:04:56.917]                             muffled <- TRUE
[16:04:56.917]                             break
[16:04:56.917]                           }
[16:04:56.917]                         }
[16:04:56.917]                       }
[16:04:56.917]                       invisible(muffled)
[16:04:56.917]                     }
[16:04:56.917]                     muffleCondition(cond, pattern = "^muffle")
[16:04:56.917]                   }
[16:04:56.917]                 }
[16:04:56.917]                 else {
[16:04:56.917]                   if (TRUE) {
[16:04:56.917]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:04:56.917]                     {
[16:04:56.917]                       inherits <- base::inherits
[16:04:56.917]                       invokeRestart <- base::invokeRestart
[16:04:56.917]                       is.null <- base::is.null
[16:04:56.917]                       muffled <- FALSE
[16:04:56.917]                       if (inherits(cond, "message")) {
[16:04:56.917]                         muffled <- grepl(pattern, "muffleMessage")
[16:04:56.917]                         if (muffled) 
[16:04:56.917]                           invokeRestart("muffleMessage")
[16:04:56.917]                       }
[16:04:56.917]                       else if (inherits(cond, "warning")) {
[16:04:56.917]                         muffled <- grepl(pattern, "muffleWarning")
[16:04:56.917]                         if (muffled) 
[16:04:56.917]                           invokeRestart("muffleWarning")
[16:04:56.917]                       }
[16:04:56.917]                       else if (inherits(cond, "condition")) {
[16:04:56.917]                         if (!is.null(pattern)) {
[16:04:56.917]                           computeRestarts <- base::computeRestarts
[16:04:56.917]                           grepl <- base::grepl
[16:04:56.917]                           restarts <- computeRestarts(cond)
[16:04:56.917]                           for (restart in restarts) {
[16:04:56.917]                             name <- restart$name
[16:04:56.917]                             if (is.null(name)) 
[16:04:56.917]                               next
[16:04:56.917]                             if (!grepl(pattern, name)) 
[16:04:56.917]                               next
[16:04:56.917]                             invokeRestart(restart)
[16:04:56.917]                             muffled <- TRUE
[16:04:56.917]                             break
[16:04:56.917]                           }
[16:04:56.917]                         }
[16:04:56.917]                       }
[16:04:56.917]                       invisible(muffled)
[16:04:56.917]                     }
[16:04:56.917]                     muffleCondition(cond, pattern = "^muffle")
[16:04:56.917]                   }
[16:04:56.917]                 }
[16:04:56.917]             }
[16:04:56.917]         }))
[16:04:56.917]     }, error = function(ex) {
[16:04:56.917]         base::structure(base::list(value = NULL, visible = NULL, 
[16:04:56.917]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:04:56.917]                 ...future.rng), started = ...future.startTime, 
[16:04:56.917]             finished = Sys.time(), session_uuid = NA_character_, 
[16:04:56.917]             version = "1.8"), class = "FutureResult")
[16:04:56.917]     }, finally = {
[16:04:56.917]         if (!identical(...future.workdir, getwd())) 
[16:04:56.917]             setwd(...future.workdir)
[16:04:56.917]         {
[16:04:56.917]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:04:56.917]                 ...future.oldOptions$nwarnings <- NULL
[16:04:56.917]             }
[16:04:56.917]             base::options(...future.oldOptions)
[16:04:56.917]             if (.Platform$OS.type == "windows") {
[16:04:56.917]                 old_names <- names(...future.oldEnvVars)
[16:04:56.917]                 envs <- base::Sys.getenv()
[16:04:56.917]                 names <- names(envs)
[16:04:56.917]                 common <- intersect(names, old_names)
[16:04:56.917]                 added <- setdiff(names, old_names)
[16:04:56.917]                 removed <- setdiff(old_names, names)
[16:04:56.917]                 changed <- common[...future.oldEnvVars[common] != 
[16:04:56.917]                   envs[common]]
[16:04:56.917]                 NAMES <- toupper(changed)
[16:04:56.917]                 args <- list()
[16:04:56.917]                 for (kk in seq_along(NAMES)) {
[16:04:56.917]                   name <- changed[[kk]]
[16:04:56.917]                   NAME <- NAMES[[kk]]
[16:04:56.917]                   if (name != NAME && is.element(NAME, old_names)) 
[16:04:56.917]                     next
[16:04:56.917]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:04:56.917]                 }
[16:04:56.917]                 NAMES <- toupper(added)
[16:04:56.917]                 for (kk in seq_along(NAMES)) {
[16:04:56.917]                   name <- added[[kk]]
[16:04:56.917]                   NAME <- NAMES[[kk]]
[16:04:56.917]                   if (name != NAME && is.element(NAME, old_names)) 
[16:04:56.917]                     next
[16:04:56.917]                   args[[name]] <- ""
[16:04:56.917]                 }
[16:04:56.917]                 NAMES <- toupper(removed)
[16:04:56.917]                 for (kk in seq_along(NAMES)) {
[16:04:56.917]                   name <- removed[[kk]]
[16:04:56.917]                   NAME <- NAMES[[kk]]
[16:04:56.917]                   if (name != NAME && is.element(NAME, old_names)) 
[16:04:56.917]                     next
[16:04:56.917]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:04:56.917]                 }
[16:04:56.917]                 if (length(args) > 0) 
[16:04:56.917]                   base::do.call(base::Sys.setenv, args = args)
[16:04:56.917]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:04:56.917]             }
[16:04:56.917]             else {
[16:04:56.917]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:04:56.917]             }
[16:04:56.917]             {
[16:04:56.917]                 if (base::length(...future.futureOptionsAdded) > 
[16:04:56.917]                   0L) {
[16:04:56.917]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:04:56.917]                   base::names(opts) <- ...future.futureOptionsAdded
[16:04:56.917]                   base::options(opts)
[16:04:56.917]                 }
[16:04:56.917]                 {
[16:04:56.917]                   {
[16:04:56.917]                     NULL
[16:04:56.917]                     RNGkind("Mersenne-Twister")
[16:04:56.917]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[16:04:56.917]                       inherits = FALSE)
[16:04:56.917]                   }
[16:04:56.917]                   options(future.plan = NULL)
[16:04:56.917]                   if (is.na(NA_character_)) 
[16:04:56.917]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:04:56.917]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:04:56.917]                   future::plan(list(function (..., envir = parent.frame()) 
[16:04:56.917]                   {
[16:04:56.917]                     future <- SequentialFuture(..., envir = envir)
[16:04:56.917]                     if (!future$lazy) 
[16:04:56.917]                       future <- run(future)
[16:04:56.917]                     invisible(future)
[16:04:56.917]                   }, function (..., workers = availableCores(constraints = "multicore"), 
[16:04:56.917]                     envir = parent.frame()) 
[16:04:56.917]                   {
[16:04:56.917]                     default_workers <- missing(workers)
[16:04:56.917]                     if (is.function(workers)) 
[16:04:56.917]                       workers <- workers()
[16:04:56.917]                     workers <- structure(as.integer(workers), 
[16:04:56.917]                       class = class(workers))
[16:04:56.917]                     stop_if_not(is.finite(workers), workers >= 
[16:04:56.917]                       1L)
[16:04:56.917]                     if ((workers == 1L && !inherits(workers, 
[16:04:56.917]                       "AsIs")) || !supportsMulticore(warn = TRUE)) {
[16:04:56.917]                       if (default_workers) 
[16:04:56.917]                         supportsMulticore(warn = TRUE)
[16:04:56.917]                       return(sequential(..., envir = envir))
[16:04:56.917]                     }
[16:04:56.917]                     oopts <- options(mc.cores = workers)
[16:04:56.917]                     on.exit(options(oopts))
[16:04:56.917]                     future <- MulticoreFuture(..., workers = workers, 
[16:04:56.917]                       envir = envir)
[16:04:56.917]                     if (!future$lazy) 
[16:04:56.917]                       future <- run(future)
[16:04:56.917]                     invisible(future)
[16:04:56.917]                   }), .cleanup = FALSE, .init = FALSE)
[16:04:56.917]                 }
[16:04:56.917]             }
[16:04:56.917]         }
[16:04:56.917]     })
[16:04:56.917]     if (TRUE) {
[16:04:56.917]         base::sink(type = "output", split = FALSE)
[16:04:56.917]         if (TRUE) {
[16:04:56.917]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:04:56.917]         }
[16:04:56.917]         else {
[16:04:56.917]             ...future.result["stdout"] <- base::list(NULL)
[16:04:56.917]         }
[16:04:56.917]         base::close(...future.stdout)
[16:04:56.917]         ...future.stdout <- NULL
[16:04:56.917]     }
[16:04:56.917]     ...future.result$conditions <- ...future.conditions
[16:04:56.917]     ...future.result$finished <- base::Sys.time()
[16:04:56.917]     ...future.result
[16:04:56.917] }
[16:04:56.919] assign_globals() ...
[16:04:56.919] List of 1
[16:04:56.919]  $ data:'data.frame':	5 obs. of  2 variables:
[16:04:56.919]   ..$ x: int [1:5] 1 2 3 4 5
[16:04:56.919]   ..$ y: int [1:5] 1 2 3 4 5
[16:04:56.919]  - attr(*, "where")=List of 1
[16:04:56.919]   ..$ data:<environment: R_EmptyEnv> 
[16:04:56.919]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[16:04:56.919]  - attr(*, "resolved")= logi FALSE
[16:04:56.919]  - attr(*, "total_size")= num 160
[16:04:56.919]  - attr(*, "already-done")= logi TRUE
[16:04:56.925] - copied ‘data’ to environment
[16:04:56.925] assign_globals() ... done
[16:04:56.926] plan(): Setting new future strategy stack:
[16:04:56.926] List of future strategies:
[16:04:56.926] 1. multicore:
[16:04:56.926]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[16:04:56.926]    - tweaked: FALSE
[16:04:56.926]    - call: plan(list(sequential, strategy))
[16:04:56.930] plan(): nbrOfWorkers() = 2
[16:04:56.977] plan(): Setting new future strategy stack:
[16:04:56.978] List of future strategies:
[16:04:56.978] 1. sequential:
[16:04:56.978]    - args: function (..., envir = parent.frame())
[16:04:56.978]    - tweaked: FALSE
[16:04:56.978]    - call: plan(list(sequential, strategy))
[16:04:56.978] 2. multicore:
[16:04:56.978]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[16:04:56.978]    - tweaked: FALSE
[16:04:56.978]    - call: plan(list(sequential, strategy))
[16:04:56.978] plan(): nbrOfWorkers() = 1
[16:04:56.978] SequentialFuture started (and completed)
[16:04:56.979] signalConditions() ...
[16:04:56.979]  - include = ‘immediateCondition’
[16:04:56.979]  - exclude = 
[16:04:56.979]  - resignal = FALSE
[16:04:56.979]  - Number of conditions: 56
[16:04:56.979] signalConditions() ... done
[16:04:56.979] - Launch lazy future ... done
[16:04:56.980] run() for ‘SequentialFuture’ ... done
[16:04:56.980] signalConditions() ...
[16:04:56.980]  - include = ‘immediateCondition’
[16:04:56.980]  - exclude = 
[16:04:56.980]  - resignal = FALSE
[16:04:56.980]  - Number of conditions: 56
[16:04:56.980] signalConditions() ... done
[16:04:56.980] Future state: ‘finished’
[16:04:56.981] signalConditions() ...
[16:04:56.981]  - include = ‘condition’
[16:04:56.981]  - exclude = ‘immediateCondition’
[16:04:56.981]  - resignal = TRUE
[16:04:56.981]  - Number of conditions: 56
[16:04:56.981]  - Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[16:04:56.931] getGlobalsAndPackages() ...
[16:04:56.981]  - Condition #2: ‘deprecatedWarning’, ‘warning’, ‘condition’
Warning: R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘ignore’
[16:04:56.981]  - Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[16:04:56.945] Searching for globals...
[16:04:56.982]  - Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[16:04:56.948] - globals found: [5] ‘$’, ‘subset’, ‘data’, ‘<’, ‘x’
[16:04:56.982]  - Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[16:04:56.948] Searching for globals ... DONE
[16:04:56.982]  - Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[16:04:56.948] Resolving globals: FALSE
[16:04:56.982]  - Condition #7: ‘simpleMessage’, ‘message’, ‘condition’
[16:04:56.949] The total size of the 1 globals is 160 bytes (160 bytes)
[16:04:56.982]  - Condition #8: ‘simpleMessage’, ‘message’, ‘condition’
[16:04:56.949] The total size of the 1 globals exported for future expression (‘subset(data, x < 3)$y’) is 160 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘data’ (160 bytes of class ‘list’)
[16:04:56.982]  - Condition #9: ‘simpleMessage’, ‘message’, ‘condition’
[16:04:56.949] - globals: [1] ‘data’
[16:04:56.983]  - Condition #10: ‘simpleMessage’, ‘message’, ‘condition’
[16:04:56.949] 
[16:04:56.983]  - Condition #11: ‘simpleMessage’, ‘message’, ‘condition’
[16:04:56.950] getGlobalsAndPackages() ... DONE
[16:04:56.983]  - Condition #12: ‘simpleMessage’, ‘message’, ‘condition’
[16:04:56.950] run() for ‘Future’ ...
[16:04:56.983]  - Condition #13: ‘simpleMessage’, ‘message’, ‘condition’
[16:04:56.950] - state: ‘created’
[16:04:56.983]  - Condition #14: ‘simpleMessage’, ‘message’, ‘condition’
[16:04:56.950] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[16:04:56.983]  - Condition #15: ‘simpleMessage’, ‘message’, ‘condition’
[16:04:56.954] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[16:04:56.984]  - Condition #16: ‘simpleMessage’, ‘message’, ‘condition’
[16:04:56.954] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[16:04:56.984]  - Condition #17: ‘simpleMessage’, ‘message’, ‘condition’
[16:04:56.954]   - Field: ‘label’
[16:04:56.984]  - Condition #18: ‘simpleMessage’, ‘message’, ‘condition’
[16:04:56.954]   - Field: ‘local’
[16:04:56.984]  - Condition #19: ‘simpleMessage’, ‘message’, ‘condition’
[16:04:56.954]   - Field: ‘owner’
[16:04:56.984]  - Condition #20: ‘simpleMessage’, ‘message’, ‘condition’
[16:04:56.954]   - Field: ‘envir’
[16:04:56.984]  - Condition #21: ‘simpleMessage’, ‘message’, ‘condition’
[16:04:56.955]   - Field: ‘workers’
[16:04:56.985]  - Condition #22: ‘simpleMessage’, ‘message’, ‘condition’
[16:04:56.955]   - Field: ‘packages’
[16:04:56.985]  - Condition #23: ‘simpleMessage’, ‘message’, ‘condition’
[16:04:56.955]   - Field: ‘gc’
[16:04:56.985]  - Condition #24: ‘simpleMessage’, ‘message’, ‘condition’
[16:04:56.955]   - Field: ‘job’
[16:04:56.985]  - Condition #25: ‘simpleMessage’, ‘message’, ‘condition’
[16:04:56.955]   - Field: ‘conditions’
[16:04:56.985]  - Condition #26: ‘simpleMessage’, ‘message’, ‘condition’
[16:04:56.955]   - Field: ‘expr’
[16:04:56.985]  - Condition #27: ‘simpleMessage’, ‘message’, ‘condition’
[16:04:56.955]   - Field: ‘uuid’
[16:04:56.985]  - Condition #28: ‘simpleMessage’, ‘message’, ‘condition’
[16:04:56.955]   - Field: ‘seed’
[16:04:56.986]  - Condition #29: ‘simpleMessage’, ‘message’, ‘condition’
[16:04:56.955]   - Field: ‘version’
[16:04:56.986]  - Condition #30: ‘simpleMessage’, ‘message’, ‘condition’
[16:04:56.956]   - Field: ‘result’
[16:04:56.986]  - Condition #31: ‘simpleMessage’, ‘message’, ‘condition’
[16:04:56.956]   - Field: ‘asynchronous’
[16:04:56.986]  - Condition #32: ‘simpleMessage’, ‘message’, ‘condition’
[16:04:56.956]   - Field: ‘calls’
[16:04:56.986]  - Condition #33: ‘simpleMessage’, ‘message’, ‘condition’
[16:04:56.956]   - Field: ‘globals’
[16:04:56.986]  - Condition #34: ‘simpleMessage’, ‘message’, ‘condition’
[16:04:56.956]   - Field: ‘stdout’
[16:04:56.987]  - Condition #35: ‘simpleMessage’, ‘message’, ‘condition’
[16:04:56.956]   - Field: ‘earlySignal’
[16:04:56.987]  - Condition #36: ‘simpleMessage’, ‘message’, ‘condition’
[16:04:56.956]   - Field: ‘lazy’
[16:04:56.987]  - Condition #37: ‘simpleMessage’, ‘message’, ‘condition’
[16:04:56.956]   - Field: ‘state’
[16:04:56.987]  - Condition #38: ‘simpleMessage’, ‘message’, ‘condition’
[16:04:56.956] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[16:04:56.987]  - Condition #39: ‘simpleMessage’, ‘message’, ‘condition’
[16:04:56.956] - Launch lazy future ...
[16:04:56.988]  - Condition #40: ‘simpleMessage’, ‘message’, ‘condition’
[16:04:56.957] Packages needed by the future expression (n = 0): <none>
[16:04:56.988]  - Condition #41: ‘simpleMessage’, ‘message’, ‘condition’
[16:04:56.957] Packages needed by future strategies (n = 0): <none>
[16:04:56.988]  - Condition #42: ‘simpleMessage’, ‘message’, ‘condition’
[16:04:56.957] {
[16:04:56.957]     {
[16:04:56.957]         {
[16:04:56.957]             ...future.startTime <- base::Sys.time()
[16:04:56.957]             {
[16:04:56.957]                 {
[16:04:56.957]                   {
[16:04:56.957]                     {
[16:04:56.957]                       base::local({
[16:04:56.957]                         has_future <- base::requireNamespace("future", 
[16:04:56.957]                           quietly = TRUE)
[16:04:56.957]                         if (has_future) {
[16:04:56.957]                           ns <- base::getNamespace("future")
[16:04:56.957]                           version <- ns[[".package"]][["version"]]
[16:04:56.957]                           if (is.null(version)) 
[16:04:56.957]                             version <- utils::packageVersion("future")
[16:04:56.957]                         }
[16:04:56.957]                         else {
[16:04:56.957]                           version <- NULL
[16:04:56.957]                         }
[16:04:56.957]                         if (!has_future || version < "1.8.0") {
[16:04:56.957]                           info <- base::c(r_version = base::gsub("R version ", 
[16:04:56.957]                             "", base::R.version$version.string), 
[16:04:56.957]                             platform = base::sprintf("%s (%s-bit)", 
[16:04:56.957]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:04:56.957]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[16:04:56.957]                               "release", "version")], collapse = " "), 
[16:04:56.957]                             hostname = base::Sys.info()[["nodename"]])
[16:04:56.957]                           info <- base::sprintf("%s: %s", base::names(info), 
[16:04:56.957]                             info)
[16:04:56.957]                           info <- base::paste(info, collapse = "; ")
[16:04:56.957]                           if (!has_future) {
[16:04:56.957]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:04:56.957]                               info)
[16:04:56.957]                           }
[16:04:56.957]                           else {
[16:04:56.957]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:04:56.957]                               info, version)
[16:04:56.957]                           }
[16:04:56.957]                           base::stop(msg)
[16:04:56.957]                         }
[16:04:56.957]                       })
[16:04:56.957]                     }
[16:04:56.957]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[16:04:56.957]                     base::options(mc.cores = 1L)
[16:04:56.957]                   }
[16:04:56.957]                   options(future.plan = NULL)
[16:04:56.957]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:04:56.957]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:04:56.957]                 }
[16:04:56.957]                 ...future.workdir <- getwd()
[16:04:56.957]             }
[16:04:56.957]             ...future.oldOptions <- base::as.list(base::.Options)
[16:04:56.957]             ...future.oldEnvVars <- base::Sys.getenv()
[16:04:56.957]         }
[16:04:56.957]         base::options(future.startup.script = FALSE, future.globals.onMissing = "ignore", 
[16:04:56.957]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:04:56.957]             future.globals.onMissing = "ignore", future.globals.onReference = NULL, 
[16:04:56.957]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:04:56.957]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:04:56.957]             future.stdout.windows.reencode = NULL, width = 80L)
[16:04:56.957]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:04:56.957]             base::names(...future.oldOptions))
[16:04:56.957]     }
[16:04:56.957]     if (FALSE) {
[16:04:56.957]     }
[16:04:56.957]     else {
[16:04:56.957]         if (TRUE) {
[16:04:56.957]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:04:56.957]                 open = "w")
[16:04:56.957]         }
[16:04:56.957]         else {
[16:04:56.957]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:04:56.957]                 windows = "NUL", "/dev/null"), open = "w")
[16:04:56.957]         }
[16:04:56.957]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:04:56.957]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:04:56.957]             base::sink(type = "output", split = FALSE)
[16:04:56.957]             base::close(...future.stdout)
[16:04:56.957]         }, add = TRUE)
[16:04:56.957]     }
[16:04:56.957]     ...future.frame <- base::sys.nframe()
[16:04:56.957]     ...future.conditions <- base::list()
[16:04:56.957]     ...future.rng <- base::globalenv()$.Random.seed
[16:04:56.957]     if (FALSE) {
[16:04:56.957]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:04:56.957]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:04:56.957]     }
[16:04:56.957]     ...future.result <- base::tryCatch({
[16:04:56.957]         base::withCallingHandlers({
[16:04:56.957]             ...future.value <- base::withVisible(base::local({
[16:04:56.957]                 withCallingHandlers({
[16:04:56.957]                   subset(data, x < 3)$y
[16:04:56.957]                 }, immediateCondition = function(cond) {
[16:04:56.957]                   save_rds <- function (object, pathname, ...) 
[16:04:56.957]                   {
[16:04:56.957]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[16:04:56.957]                     if (file_test("-f", pathname_tmp)) {
[16:04:56.957]                       fi_tmp <- file.info(pathname_tmp)
[16:04:56.957]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[16:04:56.957]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:04:56.957]                         fi_tmp[["mtime"]])
[16:04:56.957]                     }
[16:04:56.957]                     tryCatch({
[16:04:56.957]                       saveRDS(object, file = pathname_tmp, ...)
[16:04:56.957]                     }, error = function(ex) {
[16:04:56.957]                       msg <- conditionMessage(ex)
[16:04:56.957]                       fi_tmp <- file.info(pathname_tmp)
[16:04:56.957]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[16:04:56.957]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:04:56.957]                         fi_tmp[["mtime"]], msg)
[16:04:56.957]                       ex$message <- msg
[16:04:56.957]                       stop(ex)
[16:04:56.957]                     })
[16:04:56.957]                     stopifnot(file_test("-f", pathname_tmp))
[16:04:56.957]                     res <- file.rename(from = pathname_tmp, to = pathname)
[16:04:56.957]                     if (!res || file_test("-f", pathname_tmp)) {
[16:04:56.957]                       fi_tmp <- file.info(pathname_tmp)
[16:04:56.957]                       fi <- file.info(pathname)
[16:04:56.957]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[16:04:56.957]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:04:56.957]                         fi_tmp[["mtime"]], sQuote(pathname), 
[16:04:56.957]                         fi[["size"]], fi[["mtime"]])
[16:04:56.957]                       stop(msg)
[16:04:56.957]                     }
[16:04:56.957]                     invisible(pathname)
[16:04:56.957]                   }
[16:04:56.957]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[16:04:56.957]                     rootPath = tempdir()) 
[16:04:56.957]                   {
[16:04:56.957]                     obj <- list(time = Sys.time(), condition = cond)
[16:04:56.957]                     file <- tempfile(pattern = class(cond)[1], 
[16:04:56.957]                       tmpdir = path, fileext = ".rds")
[16:04:56.957]                     save_rds(obj, file)
[16:04:56.957]                   }
[16:04:56.957]                   saveImmediateCondition(cond, path = "/tmp/RtmpDZPjQ0/.future/immediateConditions")
[16:04:56.957]                   muffleCondition <- function (cond, pattern = "^muffle") 
[16:04:56.957]                   {
[16:04:56.957]                     inherits <- base::inherits
[16:04:56.957]                     invokeRestart <- base::invokeRestart
[16:04:56.957]                     is.null <- base::is.null
[16:04:56.957]                     muffled <- FALSE
[16:04:56.957]                     if (inherits(cond, "message")) {
[16:04:56.957]                       muffled <- grepl(pattern, "muffleMessage")
[16:04:56.957]                       if (muffled) 
[16:04:56.957]                         invokeRestart("muffleMessage")
[16:04:56.957]                     }
[16:04:56.957]                     else if (inherits(cond, "warning")) {
[16:04:56.957]                       muffled <- grepl(pattern, "muffleWarning")
[16:04:56.957]                       if (muffled) 
[16:04:56.957]                         invokeRestart("muffleWarning")
[16:04:56.957]                     }
[16:04:56.957]                     else if (inherits(cond, "condition")) {
[16:04:56.957]                       if (!is.null(pattern)) {
[16:04:56.957]                         computeRestarts <- base::computeRestarts
[16:04:56.957]                         grepl <- base::grepl
[16:04:56.957]                         restarts <- computeRestarts(cond)
[16:04:56.957]                         for (restart in restarts) {
[16:04:56.957]                           name <- restart$name
[16:04:56.957]                           if (is.null(name)) 
[16:04:56.957]                             next
[16:04:56.957]                           if (!grepl(pattern, name)) 
[16:04:56.957]                             next
[16:04:56.957]                           invokeRestart(restart)
[16:04:56.957]                           muffled <- TRUE
[16:04:56.957]                           break
[16:04:56.957]                         }
[16:04:56.957]                       }
[16:04:56.957]                     }
[16:04:56.957]                     invisible(muffled)
[16:04:56.957]                   }
[16:04:56.957]                   muffleCondition(cond)
[16:04:56.957]                 })
[16:04:56.957]             }))
[16:04:56.957]             future::FutureResult(value = ...future.value$value, 
[16:04:56.957]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:04:56.957]                   ...future.rng), globalenv = if (FALSE) 
[16:04:56.957]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:04:56.957]                     ...future.globalenv.names))
[16:04:56.957]                 else NULL, started = ...future.startTime, version = "1.8")
[16:04:56.957]         }, condition = base::local({
[16:04:56.957]             c <- base::c
[16:04:56.957]             inherits <- base::inherits
[16:04:56.957]             invokeRestart <- base::invokeRestart
[16:04:56.957]             length <- base::length
[16:04:56.957]             list <- base::list
[16:04:56.957]             seq.int <- base::seq.int
[16:04:56.957]             signalCondition <- base::signalCondition
[16:04:56.957]             sys.calls <- base::sys.calls
[16:04:56.957]             `[[` <- base::`[[`
[16:04:56.957]             `+` <- base::`+`
[16:04:56.957]             `<<-` <- base::`<<-`
[16:04:56.957]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:04:56.957]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:04:56.957]                   3L)]
[16:04:56.957]             }
[16:04:56.957]             function(cond) {
[16:04:56.957]                 is_error <- inherits(cond, "error")
[16:04:56.957]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:04:56.957]                   NULL)
[16:04:56.957]                 if (is_error) {
[16:04:56.957]                   sessionInformation <- function() {
[16:04:56.957]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:04:56.957]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:04:56.957]                       search = base::search(), system = base::Sys.info())
[16:04:56.957]                   }
[16:04:56.957]                   ...future.conditions[[length(...future.conditions) + 
[16:04:56.957]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:04:56.957]                     cond$call), session = sessionInformation(), 
[16:04:56.957]                     timestamp = base::Sys.time(), signaled = 0L)
[16:04:56.957]                   signalCondition(cond)
[16:04:56.957]                 }
[16:04:56.957]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:04:56.957]                 "immediateCondition"))) {
[16:04:56.957]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:04:56.957]                   ...future.conditions[[length(...future.conditions) + 
[16:04:56.957]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:04:56.957]                   if (TRUE && !signal) {
[16:04:56.957]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:04:56.957]                     {
[16:04:56.957]                       inherits <- base::inherits
[16:04:56.957]                       invokeRestart <- base::invokeRestart
[16:04:56.957]                       is.null <- base::is.null
[16:04:56.957]                       muffled <- FALSE
[16:04:56.957]                       if (inherits(cond, "message")) {
[16:04:56.957]                         muffled <- grepl(pattern, "muffleMessage")
[16:04:56.957]                         if (muffled) 
[16:04:56.957]                           invokeRestart("muffleMessage")
[16:04:56.957]                       }
[16:04:56.957]                       else if (inherits(cond, "warning")) {
[16:04:56.957]                         muffled <- grepl(pattern, "muffleWarning")
[16:04:56.957]                         if (muffled) 
[16:04:56.957]                           invokeRestart("muffleWarning")
[16:04:56.957]                       }
[16:04:56.957]                       else if (inherits(cond, "condition")) {
[16:04:56.957]                         if (!is.null(pattern)) {
[16:04:56.957]                           computeRestarts <- base::computeRestarts
[16:04:56.957]                           grepl <- base::grepl
[16:04:56.957]                           restarts <- computeRestarts(cond)
[16:04:56.957]                           for (restart in restarts) {
[16:04:56.957]                             name <- restart$name
[16:04:56.957]                             if (is.null(name)) 
[16:04:56.957]                               next
[16:04:56.957]                             if (!grepl(pattern, name)) 
[16:04:56.957]                               next
[16:04:56.957]                             invokeRestart(restart)
[16:04:56.957]                             muffled <- TRUE
[16:04:56.957]                             break
[16:04:56.957]                           }
[16:04:56.957]                         }
[16:04:56.957]                       }
[16:04:56.957]                       invisible(muffled)
[16:04:56.957]                     }
[16:04:56.957]                     muffleCondition(cond, pattern = "^muffle")
[16:04:56.957]                   }
[16:04:56.957]                 }
[16:04:56.957]                 else {
[16:04:56.957]                   if (TRUE) {
[16:04:56.957]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:04:56.957]                     {
[16:04:56.957]                       inherits <- base::inherits
[16:04:56.957]                       invokeRestart <- base::invokeRestart
[16:04:56.957]                       is.null <- base::is.null
[16:04:56.957]                       muffled <- FALSE
[16:04:56.957]                       if (inherits(cond, "message")) {
[16:04:56.957]                         muffled <- grepl(pattern, "muffleMessage")
[16:04:56.957]                         if (muffled) 
[16:04:56.957]                           invokeRestart("muffleMessage")
[16:04:56.957]                       }
[16:04:56.957]                       else if (inherits(cond, "warning")) {
[16:04:56.957]                         muffled <- grepl(pattern, "muffleWarning")
[16:04:56.957]                         if (muffled) 
[16:04:56.957]                           invokeRestart("muffleWarning")
[16:04:56.957]                       }
[16:04:56.957]                       else if (inherits(cond, "condition")) {
[16:04:56.957]                         if (!is.null(pattern)) {
[16:04:56.957]                           computeRestarts <- base::computeRestarts
[16:04:56.957]                           grepl <- base::grepl
[16:04:56.957]                           restarts <- computeRestarts(cond)
[16:04:56.957]                           for (restart in restarts) {
[16:04:56.957]                             name <- restart$name
[16:04:56.957]                             if (is.null(name)) 
[16:04:56.957]                               next
[16:04:56.957]                             if (!grepl(pattern, name)) 
[16:04:56.957]                               next
[16:04:56.957]                             invokeRestart(restart)
[16:04:56.957]                             muffled <- TRUE
[16:04:56.957]                             break
[16:04:56.957]                           }
[16:04:56.957]                         }
[16:04:56.957]                       }
[16:04:56.957]                       invisible(muffled)
[16:04:56.957]                     }
[16:04:56.957]                     muffleCondition(cond, pattern = "^muffle")
[16:04:56.957]                   }
[16:04:56.957]                 }
[16:04:56.957]             }
[16:04:56.957]         }))
[16:04:56.957]     }, error = function(ex) {
[16:04:56.957]         base::structure(base::list(value = NULL, visible = NULL, 
[16:04:56.957]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:04:56.957]                 ...future.rng), started = ...future.startTime, 
[16:04:56.957]             finished = Sys.time(), session_uuid = NA_character_, 
[16:04:56.957]             version = "1.8"), class = "FutureResult")
[16:04:56.957]     }, finally = {
[16:04:56.957]         if (!identical(...future.workdir, getwd())) 
[16:04:56.957]             setwd(...future.workdir)
[16:04:56.957]         {
[16:04:56.957]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:04:56.957]                 ...future.oldOptions$nwarnings <- NULL
[16:04:56.957]             }
[16:04:56.957]             base::options(...future.oldOptions)
[16:04:56.957]             if (.Platform$OS.type == "windows") {
[16:04:56.957]                 old_names <- names(...future.oldEnvVars)
[16:04:56.957]                 envs <- base::Sys.getenv()
[16:04:56.957]                 names <- names(envs)
[16:04:56.957]                 common <- intersect(names, old_names)
[16:04:56.957]                 added <- setdiff(names, old_names)
[16:04:56.957]                 removed <- setdiff(old_names, names)
[16:04:56.957]                 changed <- common[...future.oldEnvVars[common] != 
[16:04:56.957]                   envs[common]]
[16:04:56.957]                 NAMES <- toupper(changed)
[16:04:56.957]                 args <- list()
[16:04:56.957]                 for (kk in seq_along(NAMES)) {
[16:04:56.957]                   name <- changed[[kk]]
[16:04:56.957]                   NAME <- NAMES[[kk]]
[16:04:56.957]                   if (name != NAME && is.element(NAME, old_names)) 
[16:04:56.957]                     next
[16:04:56.957]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:04:56.957]                 }
[16:04:56.957]                 NAMES <- toupper(added)
[16:04:56.957]                 for (kk in seq_along(NAMES)) {
[16:04:56.957]                   name <- added[[kk]]
[16:04:56.957]                   NAME <- NAMES[[kk]]
[16:04:56.957]                   if (name != NAME && is.element(NAME, old_names)) 
[16:04:56.957]                     next
[16:04:56.957]                   args[[name]] <- ""
[16:04:56.957]                 }
[16:04:56.957]                 NAMES <- toupper(removed)
[16:04:56.957]                 for (kk in seq_along(NAMES)) {
[16:04:56.957]                   name <- removed[[kk]]
[16:04:56.957]                   NAME <- NAMES[[kk]]
[16:04:56.957]                   if (name != NAME && is.element(NAME, old_names)) 
[16:04:56.957]                     next
[16:04:56.957]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:04:56.957]                 }
[16:04:56.957]                 if (length(args) > 0) 
[16:04:56.957]                   base::do.call(base::Sys.setenv, args = args)
[16:04:56.957]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:04:56.957]             }
[16:04:56.957]             else {
[16:04:56.957]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:04:56.957]             }
[16:04:56.957]             {
[16:04:56.957]                 if (base::length(...future.futureOptionsAdded) > 
[16:04:56.957]                   0L) {
[16:04:56.957]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:04:56.957]                   base::names(opts) <- ...future.futureOptionsAdded
[16:04:56.957]                   base::options(opts)
[16:04:56.957]                 }
[16:04:56.957]                 {
[16:04:56.957]                   {
[16:04:56.957]                     base::options(mc.cores = ...future.mc.cores.old)
[16:04:56.957]                     NULL
[16:04:56.957]                   }
[16:04:56.957]                   options(future.plan = NULL)
[16:04:56.957]                   if (is.na(NA_character_)) 
[16:04:56.957]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:04:56.957]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:04:56.957]                   future::plan(list(function (..., workers = availableCores(constraints = "multicore"), 
[16:04:56.957]                     envir = parent.frame()) 
[16:04:56.957]                   {
[16:04:56.957]                     default_workers <- missing(workers)
[16:04:56.957]                     if (is.function(workers)) 
[16:04:56.957]                       workers <- workers()
[16:04:56.957]                     workers <- structure(as.integer(workers), 
[16:04:56.957]                       class = class(workers))
[16:04:56.957]                     stop_if_not(is.finite(workers), workers >= 
[16:04:56.957]                       1L)
[16:04:56.957]                     if ((workers == 1L && !inherits(workers, 
[16:04:56.957]                       "AsIs")) || !supportsMulticore(warn = TRUE)) {
[16:04:56.957]                       if (default_workers) 
[16:04:56.957]                         supportsMulticore(warn = TRUE)
[16:04:56.957]                       return(sequential(..., envir = envir))
[16:04:56.957]                     }
[16:04:56.957]                     oopts <- options(mc.cores = workers)
[16:04:56.957]                     on.exit(options(oopts))
[16:04:56.957]                     future <- MulticoreFuture(..., workers = workers, 
[16:04:56.957]                       envir = envir)
[16:04:56.957]                     if (!future$lazy) 
[16:04:56.957]                       future <- run(future)
[16:04:56.957]                     invisible(future)
[16:04:56.957]                   }), .cleanup = FALSE, .init = FALSE)
[16:04:56.957]                 }
[16:04:56.957]             }
[16:04:56.957]         }
[16:04:56.957]     })
[16:04:56.957]     if (TRUE) {
[16:04:56.957]         base::sink(type = "output", split = FALSE)
[16:04:56.957]         if (TRUE) {
[16:04:56.957]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:04:56.957]         }
[16:04:56.957]         else {
[16:04:56.957]             ...future.result["stdout"] <- base::list(NULL)
[16:04:56.957]         }
[16:04:56.957]         base::close(...future.stdout)
[16:04:56.957]         ...future.stdout <- NULL
[16:04:56.957]     }
[16:04:56.957]     ...future.result$conditions <- ...future.conditions
[16:04:56.957]     ...future.result$finished <- base::Sys.time()
[16:04:56.957]     ...future.result
[16:04:56.957] }
[16:04:56.988]  - Condition #43: ‘simpleMessage’, ‘message’, ‘condition’
[16:04:56.960] assign_globals() ...
[16:04:56.988]  - Condition #44: ‘simpleMessage’, ‘message’, ‘condition’
[16:04:56.960] List of 1
[16:04:56.960]  $ data:'data.frame':	5 obs. of  2 variables:
[16:04:56.960]   ..$ x: int [1:5] 1 2 3 4 5
[16:04:56.960]   ..$ y: int [1:5] 1 2 3 4 5
[16:04:56.960]  - attr(*, "where")=List of 1
[16:04:56.960]   ..$ data:<environment: R_EmptyEnv> 
[16:04:56.960]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[16:04:56.960]  - attr(*, "resolved")= logi FALSE
[16:04:56.960]  - attr(*, "total_size")= num 160
[16:04:56.960]  - attr(*, "already-done")= logi TRUE
[16:04:56.988]  - Condition #45: ‘simpleMessage’, ‘message’, ‘condition’
[16:04:56.963] - copied ‘data’ to environment
[16:04:56.989]  - Condition #46: ‘simpleMessage’, ‘message’, ‘condition’
[16:04:56.963] assign_globals() ... done
[16:04:56.991]  - Condition #47: ‘simpleMessage’, ‘message’, ‘condition’
[16:04:56.963] requestCore(): workers = 2
[16:04:56.991]  - Condition #48: ‘simpleMessage’, ‘message’, ‘condition’
[16:04:56.965] MulticoreFuture started
[16:04:56.991]  - Condition #49: ‘simpleMessage’, ‘message’, ‘condition’
[16:04:56.966] - Launch lazy future ... done
[16:04:56.992]  - Condition #50: ‘simpleMessage’, ‘message’, ‘condition’
[16:04:56.966] run() for ‘MulticoreFuture’ ... done
[16:04:56.992]  - Condition #51: ‘simpleMessage’, ‘message’, ‘condition’
[16:04:56.966] result() for MulticoreFuture ...
[16:04:56.992]  - Condition #52: ‘simpleMessage’, ‘message’, ‘condition’
[16:04:56.976] result() for MulticoreFuture ...
[16:04:56.992]  - Condition #53: ‘simpleMessage’, ‘message’, ‘condition’
[16:04:56.976] result() for MulticoreFuture ... done
[16:04:56.992]  - Condition #54: ‘simpleMessage’, ‘message’, ‘condition’
[16:04:56.976] result() for MulticoreFuture ... done
[16:04:56.993]  - Condition #55: ‘simpleMessage’, ‘message’, ‘condition’
[16:04:56.976] result() for MulticoreFuture ...
[16:04:56.993]  - Condition #56: ‘simpleMessage’, ‘message’, ‘condition’
[16:04:56.977] result() for MulticoreFuture ... done
[16:04:56.993] signalConditions() ... done
- Strategy: multicore ... DONE
- Strategy: multisession ...
[16:04:56.994] plan(): Setting new future strategy stack:
[16:04:56.994] List of future strategies:
[16:04:56.994] 1. multisession:
[16:04:56.994]    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[16:04:56.994]    - tweaked: FALSE
[16:04:56.994]    - call: plan(strategy)
[16:04:56.994] plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ...
[16:04:56.994] multisession:
[16:04:56.994] - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[16:04:56.994] - tweaked: FALSE
[16:04:56.994] - call: plan(strategy)
[16:04:57.001] getGlobalsAndPackages() ...
Warning: R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘ignore’
[16:04:57.001] Not searching for globals
[16:04:57.002] - globals: [0] <none>
[16:04:57.002] getGlobalsAndPackages() ... DONE
[16:04:57.002] [local output] makeClusterPSOCK() ...
[16:04:57.045] [local output] Workers: [n = 2] ‘localhost’, ‘localhost’
[16:04:57.046] [local output] Base port: 11536
[16:04:57.046] [local output] Getting setup options for 2 cluster nodes ...
[16:04:57.046] [local output]  - Node 1 of 2 ...
[16:04:57.047] [local output] localMachine=TRUE => revtunnel=FALSE

[16:04:57.048] Testing if worker's PID can be inferred: ‘'/usr/local/lib/R/bin/Rscript' -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/RtmpDZPjQ0/worker.rank=1.parallelly.parent=84975.14bef2ddd2e79.pid")), silent = TRUE)' -e 'file.exists("/tmp/RtmpDZPjQ0/worker.rank=1.parallelly.parent=84975.14bef2ddd2e79.pid")'’
[16:04:57.235] - Possible to infer worker's PID: TRUE
[16:04:57.235] [local output] Rscript port: 11536

[16:04:57.236] [local output]  - Node 2 of 2 ...
[16:04:57.236] [local output] localMachine=TRUE => revtunnel=FALSE

[16:04:57.237] [local output] Rscript port: 11536

[16:04:57.237] [local output] Getting setup options for 2 cluster nodes ... done
[16:04:57.237] [local output]  - Parallel setup requested for some PSOCK nodes
[16:04:57.237] [local output] Setting up PSOCK nodes in parallel
[16:04:57.238] List of 36
[16:04:57.238]  $ worker          : chr "localhost"
[16:04:57.238]   ..- attr(*, "localhost")= logi TRUE
[16:04:57.238]  $ master          : chr "localhost"
[16:04:57.238]  $ port            : int 11536
[16:04:57.238]  $ connectTimeout  : num 120
[16:04:57.238]  $ timeout         : num 2592000
[16:04:57.238]  $ rscript         : chr "'/usr/local/lib/R/bin/Rscript'"
[16:04:57.238]  $ homogeneous     : logi TRUE
[16:04:57.238]  $ rscript_args    : chr "--default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),fi"| __truncated__
[16:04:57.238]  $ rscript_envs    : NULL
[16:04:57.238]  $ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[16:04:57.238]  $ rscript_startup : NULL
[16:04:57.238]  $ rscript_sh      : chr "sh"
[16:04:57.238]  $ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[16:04:57.238]  $ methods         : logi TRUE
[16:04:57.238]  $ socketOptions   : chr "no-delay"
[16:04:57.238]  $ useXDR          : logi FALSE
[16:04:57.238]  $ outfile         : chr "/dev/null"
[16:04:57.238]  $ renice          : int NA
[16:04:57.238]  $ rshcmd          : NULL
[16:04:57.238]  $ user            : chr(0) 
[16:04:57.238]  $ revtunnel       : logi FALSE
[16:04:57.238]  $ rshlogfile      : NULL
[16:04:57.238]  $ rshopts         : chr(0) 
[16:04:57.238]  $ rank            : int 1
[16:04:57.238]  $ manual          : logi FALSE
[16:04:57.238]  $ dryrun          : logi FALSE
[16:04:57.238]  $ quiet           : logi FALSE
[16:04:57.238]  $ setup_strategy  : chr "parallel"
[16:04:57.238]  $ local_cmd       : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[16:04:57.238]  $ pidfile         : chr "/tmp/RtmpDZPjQ0/worker.rank=1.parallelly.parent=84975.14bef2ddd2e79.pid"
[16:04:57.238]  $ rshcmd_label    : NULL
[16:04:57.238]  $ rsh_call        : NULL
[16:04:57.238]  $ cmd             : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[16:04:57.238]  $ localMachine    : logi TRUE
[16:04:57.238]  $ make_fcn        :function (worker = getOption2("parallelly.localhost.hostname", "localhost"), 
[16:04:57.238]     master = NULL, port, connectTimeout = getOption2("parallelly.makeNodePSOCK.connectTimeout", 
[16:04:57.238]         2 * 60), timeout = getOption2("parallelly.makeNodePSOCK.timeout", 
[16:04:57.238]         30 * 24 * 60 * 60), rscript = NULL, homogeneous = NULL, rscript_args = NULL, 
[16:04:57.238]     rscript_envs = NULL, rscript_libs = NULL, rscript_startup = NULL, rscript_sh = c("auto", 
[16:04:57.238]         "cmd", "sh"), default_packages = c("datasets", "utils", "grDevices", 
[16:04:57.238]         "graphics", "stats", if (methods) "methods"), methods = TRUE, socketOptions = getOption2("parallelly.makeNodePSOCK.socketOptions", 
[16:04:57.238]         "no-delay"), useXDR = getOption2("parallelly.makeNodePSOCK.useXDR", 
[16:04:57.238]         FALSE), outfile = "/dev/null", renice = NA_integer_, rshcmd = getOption2("parallelly.makeNodePSOCK.rshcmd", 
[16:04:57.238]         NULL), user = NULL, revtunnel = NA, rshlogfile = NULL, rshopts = getOption2("parallelly.makeNodePSOCK.rshopts", 
[16:04:57.238]         NULL), rank = 1L, manual = FALSE, dryrun = FALSE, quiet = FALSE, 
[16:04:57.238]     setup_strategy = getOption2("parallelly.makeNodePSOCK.setup_strategy", 
[16:04:57.238]         "parallel"), action = c("launch", "options"), verbose = FALSE)  
[16:04:57.238]  $ arguments       :List of 28
[16:04:57.238]   ..$ worker          : chr "localhost"
[16:04:57.238]   ..$ master          : NULL
[16:04:57.238]   ..$ port            : int 11536
[16:04:57.238]   ..$ connectTimeout  : num 120
[16:04:57.238]   ..$ timeout         : num 2592000
[16:04:57.238]   ..$ rscript         : NULL
[16:04:57.238]   ..$ homogeneous     : NULL
[16:04:57.238]   ..$ rscript_args    : NULL
[16:04:57.238]   ..$ rscript_envs    : NULL
[16:04:57.238]   ..$ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[16:04:57.238]   ..$ rscript_startup : NULL
[16:04:57.238]   ..$ rscript_sh      : chr [1:3] "auto" "cmd" "sh"
[16:04:57.238]   ..$ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[16:04:57.238]   ..$ methods         : logi TRUE
[16:04:57.238]   ..$ socketOptions   : chr "no-delay"
[16:04:57.238]   ..$ useXDR          : logi FALSE
[16:04:57.238]   ..$ outfile         : chr "/dev/null"
[16:04:57.238]   ..$ renice          : int NA
[16:04:57.238]   ..$ rshcmd          : NULL
[16:04:57.238]   ..$ user            : NULL
[16:04:57.238]   ..$ revtunnel       : logi NA
[16:04:57.238]   ..$ rshlogfile      : NULL
[16:04:57.238]   ..$ rshopts         : NULL
[16:04:57.238]   ..$ rank            : int 1
[16:04:57.238]   ..$ manual          : logi FALSE
[16:04:57.238]   ..$ dryrun          : logi FALSE
[16:04:57.238]   ..$ quiet           : logi FALSE
[16:04:57.238]   ..$ setup_strategy  : chr "parallel"
[16:04:57.238]  - attr(*, "class")= chr [1:2] "makeNodePSOCKOptions" "makeNodeOptions"
[16:04:57.254] [local output] System call to launch all workers:
[16:04:57.255] [local output] '/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/RtmpDZPjQ0/worker.rank=1.parallelly.parent=84975.14bef2ddd2e79.pid")), silent = TRUE)' -e 'options(socketOptions = "no-delay")' -e '.libPaths(c("/usr/local/lib/R/site-library","/usr/local/lib/R/library"))' -e 'workRSOCK <- tryCatch(parallel:::.workRSOCK, error=function(e) parallel:::.slaveRSOCK); workRSOCK()' MASTER=localhost PORT=11536 OUT=/dev/null TIMEOUT=2592000 XDR=FALSE SETUPTIMEOUT=120 SETUPSTRATEGY=parallel
[16:04:57.255] [local output] Starting PSOCK main server
[16:04:57.260] [local output] Workers launched
[16:04:57.260] [local output] Waiting for workers to connect back
[16:04:57.261]  - [local output] 0 workers out of 2 ready
[16:04:57.507]  - [local output] 0 workers out of 2 ready
[16:04:57.508]  - [local output] 1 workers out of 2 ready
[16:04:57.508]  - [local output] 2 workers out of 2 ready
[16:04:57.508] [local output] Launching of workers completed
[16:04:57.508] [local output] Collecting session information from workers
[16:04:57.509] [local output]  - Worker #1 of 2
[16:04:57.510] [local output]  - Worker #2 of 2
[16:04:57.510] [local output] makeClusterPSOCK() ... done
[16:04:57.521] Packages needed by the future expression (n = 0): <none>
[16:04:57.521] Packages needed by future strategies (n = 0): <none>
[16:04:57.522] {
[16:04:57.522]     {
[16:04:57.522]         {
[16:04:57.522]             ...future.startTime <- base::Sys.time()
[16:04:57.522]             {
[16:04:57.522]                 {
[16:04:57.522]                   {
[16:04:57.522]                     {
[16:04:57.522]                       base::local({
[16:04:57.522]                         has_future <- base::requireNamespace("future", 
[16:04:57.522]                           quietly = TRUE)
[16:04:57.522]                         if (has_future) {
[16:04:57.522]                           ns <- base::getNamespace("future")
[16:04:57.522]                           version <- ns[[".package"]][["version"]]
[16:04:57.522]                           if (is.null(version)) 
[16:04:57.522]                             version <- utils::packageVersion("future")
[16:04:57.522]                         }
[16:04:57.522]                         else {
[16:04:57.522]                           version <- NULL
[16:04:57.522]                         }
[16:04:57.522]                         if (!has_future || version < "1.8.0") {
[16:04:57.522]                           info <- base::c(r_version = base::gsub("R version ", 
[16:04:57.522]                             "", base::R.version$version.string), 
[16:04:57.522]                             platform = base::sprintf("%s (%s-bit)", 
[16:04:57.522]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:04:57.522]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[16:04:57.522]                               "release", "version")], collapse = " "), 
[16:04:57.522]                             hostname = base::Sys.info()[["nodename"]])
[16:04:57.522]                           info <- base::sprintf("%s: %s", base::names(info), 
[16:04:57.522]                             info)
[16:04:57.522]                           info <- base::paste(info, collapse = "; ")
[16:04:57.522]                           if (!has_future) {
[16:04:57.522]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:04:57.522]                               info)
[16:04:57.522]                           }
[16:04:57.522]                           else {
[16:04:57.522]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:04:57.522]                               info, version)
[16:04:57.522]                           }
[16:04:57.522]                           base::stop(msg)
[16:04:57.522]                         }
[16:04:57.522]                       })
[16:04:57.522]                     }
[16:04:57.522]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[16:04:57.522]                     base::options(mc.cores = 1L)
[16:04:57.522]                   }
[16:04:57.522]                   options(future.plan = NULL)
[16:04:57.522]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:04:57.522]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:04:57.522]                 }
[16:04:57.522]                 ...future.workdir <- getwd()
[16:04:57.522]             }
[16:04:57.522]             ...future.oldOptions <- base::as.list(base::.Options)
[16:04:57.522]             ...future.oldEnvVars <- base::Sys.getenv()
[16:04:57.522]         }
[16:04:57.522]         base::options(future.startup.script = FALSE, future.globals.onMissing = "ignore", 
[16:04:57.522]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:04:57.522]             future.globals.onMissing = "ignore", future.globals.onReference = NULL, 
[16:04:57.522]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:04:57.522]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:04:57.522]             future.stdout.windows.reencode = NULL, width = 80L)
[16:04:57.522]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:04:57.522]             base::names(...future.oldOptions))
[16:04:57.522]     }
[16:04:57.522]     if (FALSE) {
[16:04:57.522]     }
[16:04:57.522]     else {
[16:04:57.522]         if (TRUE) {
[16:04:57.522]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:04:57.522]                 open = "w")
[16:04:57.522]         }
[16:04:57.522]         else {
[16:04:57.522]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:04:57.522]                 windows = "NUL", "/dev/null"), open = "w")
[16:04:57.522]         }
[16:04:57.522]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:04:57.522]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:04:57.522]             base::sink(type = "output", split = FALSE)
[16:04:57.522]             base::close(...future.stdout)
[16:04:57.522]         }, add = TRUE)
[16:04:57.522]     }
[16:04:57.522]     ...future.frame <- base::sys.nframe()
[16:04:57.522]     ...future.conditions <- base::list()
[16:04:57.522]     ...future.rng <- base::globalenv()$.Random.seed
[16:04:57.522]     if (FALSE) {
[16:04:57.522]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:04:57.522]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:04:57.522]     }
[16:04:57.522]     ...future.result <- base::tryCatch({
[16:04:57.522]         base::withCallingHandlers({
[16:04:57.522]             ...future.value <- base::withVisible(base::local({
[16:04:57.522]                 ...future.makeSendCondition <- base::local({
[16:04:57.522]                   sendCondition <- NULL
[16:04:57.522]                   function(frame = 1L) {
[16:04:57.522]                     if (is.function(sendCondition)) 
[16:04:57.522]                       return(sendCondition)
[16:04:57.522]                     ns <- getNamespace("parallel")
[16:04:57.522]                     if (exists("sendData", mode = "function", 
[16:04:57.522]                       envir = ns)) {
[16:04:57.522]                       parallel_sendData <- get("sendData", mode = "function", 
[16:04:57.522]                         envir = ns)
[16:04:57.522]                       envir <- sys.frame(frame)
[16:04:57.522]                       master <- NULL
[16:04:57.522]                       while (!identical(envir, .GlobalEnv) && 
[16:04:57.522]                         !identical(envir, emptyenv())) {
[16:04:57.522]                         if (exists("master", mode = "list", envir = envir, 
[16:04:57.522]                           inherits = FALSE)) {
[16:04:57.522]                           master <- get("master", mode = "list", 
[16:04:57.522]                             envir = envir, inherits = FALSE)
[16:04:57.522]                           if (inherits(master, c("SOCKnode", 
[16:04:57.522]                             "SOCK0node"))) {
[16:04:57.522]                             sendCondition <<- function(cond) {
[16:04:57.522]                               data <- list(type = "VALUE", value = cond, 
[16:04:57.522]                                 success = TRUE)
[16:04:57.522]                               parallel_sendData(master, data)
[16:04:57.522]                             }
[16:04:57.522]                             return(sendCondition)
[16:04:57.522]                           }
[16:04:57.522]                         }
[16:04:57.522]                         frame <- frame + 1L
[16:04:57.522]                         envir <- sys.frame(frame)
[16:04:57.522]                       }
[16:04:57.522]                     }
[16:04:57.522]                     sendCondition <<- function(cond) NULL
[16:04:57.522]                   }
[16:04:57.522]                 })
[16:04:57.522]                 withCallingHandlers({
[16:04:57.522]                   NA
[16:04:57.522]                 }, immediateCondition = function(cond) {
[16:04:57.522]                   sendCondition <- ...future.makeSendCondition()
[16:04:57.522]                   sendCondition(cond)
[16:04:57.522]                   muffleCondition <- function (cond, pattern = "^muffle") 
[16:04:57.522]                   {
[16:04:57.522]                     inherits <- base::inherits
[16:04:57.522]                     invokeRestart <- base::invokeRestart
[16:04:57.522]                     is.null <- base::is.null
[16:04:57.522]                     muffled <- FALSE
[16:04:57.522]                     if (inherits(cond, "message")) {
[16:04:57.522]                       muffled <- grepl(pattern, "muffleMessage")
[16:04:57.522]                       if (muffled) 
[16:04:57.522]                         invokeRestart("muffleMessage")
[16:04:57.522]                     }
[16:04:57.522]                     else if (inherits(cond, "warning")) {
[16:04:57.522]                       muffled <- grepl(pattern, "muffleWarning")
[16:04:57.522]                       if (muffled) 
[16:04:57.522]                         invokeRestart("muffleWarning")
[16:04:57.522]                     }
[16:04:57.522]                     else if (inherits(cond, "condition")) {
[16:04:57.522]                       if (!is.null(pattern)) {
[16:04:57.522]                         computeRestarts <- base::computeRestarts
[16:04:57.522]                         grepl <- base::grepl
[16:04:57.522]                         restarts <- computeRestarts(cond)
[16:04:57.522]                         for (restart in restarts) {
[16:04:57.522]                           name <- restart$name
[16:04:57.522]                           if (is.null(name)) 
[16:04:57.522]                             next
[16:04:57.522]                           if (!grepl(pattern, name)) 
[16:04:57.522]                             next
[16:04:57.522]                           invokeRestart(restart)
[16:04:57.522]                           muffled <- TRUE
[16:04:57.522]                           break
[16:04:57.522]                         }
[16:04:57.522]                       }
[16:04:57.522]                     }
[16:04:57.522]                     invisible(muffled)
[16:04:57.522]                   }
[16:04:57.522]                   muffleCondition(cond)
[16:04:57.522]                 })
[16:04:57.522]             }))
[16:04:57.522]             future::FutureResult(value = ...future.value$value, 
[16:04:57.522]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:04:57.522]                   ...future.rng), globalenv = if (FALSE) 
[16:04:57.522]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:04:57.522]                     ...future.globalenv.names))
[16:04:57.522]                 else NULL, started = ...future.startTime, version = "1.8")
[16:04:57.522]         }, condition = base::local({
[16:04:57.522]             c <- base::c
[16:04:57.522]             inherits <- base::inherits
[16:04:57.522]             invokeRestart <- base::invokeRestart
[16:04:57.522]             length <- base::length
[16:04:57.522]             list <- base::list
[16:04:57.522]             seq.int <- base::seq.int
[16:04:57.522]             signalCondition <- base::signalCondition
[16:04:57.522]             sys.calls <- base::sys.calls
[16:04:57.522]             `[[` <- base::`[[`
[16:04:57.522]             `+` <- base::`+`
[16:04:57.522]             `<<-` <- base::`<<-`
[16:04:57.522]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:04:57.522]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:04:57.522]                   3L)]
[16:04:57.522]             }
[16:04:57.522]             function(cond) {
[16:04:57.522]                 is_error <- inherits(cond, "error")
[16:04:57.522]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:04:57.522]                   NULL)
[16:04:57.522]                 if (is_error) {
[16:04:57.522]                   sessionInformation <- function() {
[16:04:57.522]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:04:57.522]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:04:57.522]                       search = base::search(), system = base::Sys.info())
[16:04:57.522]                   }
[16:04:57.522]                   ...future.conditions[[length(...future.conditions) + 
[16:04:57.522]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:04:57.522]                     cond$call), session = sessionInformation(), 
[16:04:57.522]                     timestamp = base::Sys.time(), signaled = 0L)
[16:04:57.522]                   signalCondition(cond)
[16:04:57.522]                 }
[16:04:57.522]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:04:57.522]                 "immediateCondition"))) {
[16:04:57.522]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:04:57.522]                   ...future.conditions[[length(...future.conditions) + 
[16:04:57.522]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:04:57.522]                   if (TRUE && !signal) {
[16:04:57.522]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:04:57.522]                     {
[16:04:57.522]                       inherits <- base::inherits
[16:04:57.522]                       invokeRestart <- base::invokeRestart
[16:04:57.522]                       is.null <- base::is.null
[16:04:57.522]                       muffled <- FALSE
[16:04:57.522]                       if (inherits(cond, "message")) {
[16:04:57.522]                         muffled <- grepl(pattern, "muffleMessage")
[16:04:57.522]                         if (muffled) 
[16:04:57.522]                           invokeRestart("muffleMessage")
[16:04:57.522]                       }
[16:04:57.522]                       else if (inherits(cond, "warning")) {
[16:04:57.522]                         muffled <- grepl(pattern, "muffleWarning")
[16:04:57.522]                         if (muffled) 
[16:04:57.522]                           invokeRestart("muffleWarning")
[16:04:57.522]                       }
[16:04:57.522]                       else if (inherits(cond, "condition")) {
[16:04:57.522]                         if (!is.null(pattern)) {
[16:04:57.522]                           computeRestarts <- base::computeRestarts
[16:04:57.522]                           grepl <- base::grepl
[16:04:57.522]                           restarts <- computeRestarts(cond)
[16:04:57.522]                           for (restart in restarts) {
[16:04:57.522]                             name <- restart$name
[16:04:57.522]                             if (is.null(name)) 
[16:04:57.522]                               next
[16:04:57.522]                             if (!grepl(pattern, name)) 
[16:04:57.522]                               next
[16:04:57.522]                             invokeRestart(restart)
[16:04:57.522]                             muffled <- TRUE
[16:04:57.522]                             break
[16:04:57.522]                           }
[16:04:57.522]                         }
[16:04:57.522]                       }
[16:04:57.522]                       invisible(muffled)
[16:04:57.522]                     }
[16:04:57.522]                     muffleCondition(cond, pattern = "^muffle")
[16:04:57.522]                   }
[16:04:57.522]                 }
[16:04:57.522]                 else {
[16:04:57.522]                   if (TRUE) {
[16:04:57.522]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:04:57.522]                     {
[16:04:57.522]                       inherits <- base::inherits
[16:04:57.522]                       invokeRestart <- base::invokeRestart
[16:04:57.522]                       is.null <- base::is.null
[16:04:57.522]                       muffled <- FALSE
[16:04:57.522]                       if (inherits(cond, "message")) {
[16:04:57.522]                         muffled <- grepl(pattern, "muffleMessage")
[16:04:57.522]                         if (muffled) 
[16:04:57.522]                           invokeRestart("muffleMessage")
[16:04:57.522]                       }
[16:04:57.522]                       else if (inherits(cond, "warning")) {
[16:04:57.522]                         muffled <- grepl(pattern, "muffleWarning")
[16:04:57.522]                         if (muffled) 
[16:04:57.522]                           invokeRestart("muffleWarning")
[16:04:57.522]                       }
[16:04:57.522]                       else if (inherits(cond, "condition")) {
[16:04:57.522]                         if (!is.null(pattern)) {
[16:04:57.522]                           computeRestarts <- base::computeRestarts
[16:04:57.522]                           grepl <- base::grepl
[16:04:57.522]                           restarts <- computeRestarts(cond)
[16:04:57.522]                           for (restart in restarts) {
[16:04:57.522]                             name <- restart$name
[16:04:57.522]                             if (is.null(name)) 
[16:04:57.522]                               next
[16:04:57.522]                             if (!grepl(pattern, name)) 
[16:04:57.522]                               next
[16:04:57.522]                             invokeRestart(restart)
[16:04:57.522]                             muffled <- TRUE
[16:04:57.522]                             break
[16:04:57.522]                           }
[16:04:57.522]                         }
[16:04:57.522]                       }
[16:04:57.522]                       invisible(muffled)
[16:04:57.522]                     }
[16:04:57.522]                     muffleCondition(cond, pattern = "^muffle")
[16:04:57.522]                   }
[16:04:57.522]                 }
[16:04:57.522]             }
[16:04:57.522]         }))
[16:04:57.522]     }, error = function(ex) {
[16:04:57.522]         base::structure(base::list(value = NULL, visible = NULL, 
[16:04:57.522]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:04:57.522]                 ...future.rng), started = ...future.startTime, 
[16:04:57.522]             finished = Sys.time(), session_uuid = NA_character_, 
[16:04:57.522]             version = "1.8"), class = "FutureResult")
[16:04:57.522]     }, finally = {
[16:04:57.522]         if (!identical(...future.workdir, getwd())) 
[16:04:57.522]             setwd(...future.workdir)
[16:04:57.522]         {
[16:04:57.522]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:04:57.522]                 ...future.oldOptions$nwarnings <- NULL
[16:04:57.522]             }
[16:04:57.522]             base::options(...future.oldOptions)
[16:04:57.522]             if (.Platform$OS.type == "windows") {
[16:04:57.522]                 old_names <- names(...future.oldEnvVars)
[16:04:57.522]                 envs <- base::Sys.getenv()
[16:04:57.522]                 names <- names(envs)
[16:04:57.522]                 common <- intersect(names, old_names)
[16:04:57.522]                 added <- setdiff(names, old_names)
[16:04:57.522]                 removed <- setdiff(old_names, names)
[16:04:57.522]                 changed <- common[...future.oldEnvVars[common] != 
[16:04:57.522]                   envs[common]]
[16:04:57.522]                 NAMES <- toupper(changed)
[16:04:57.522]                 args <- list()
[16:04:57.522]                 for (kk in seq_along(NAMES)) {
[16:04:57.522]                   name <- changed[[kk]]
[16:04:57.522]                   NAME <- NAMES[[kk]]
[16:04:57.522]                   if (name != NAME && is.element(NAME, old_names)) 
[16:04:57.522]                     next
[16:04:57.522]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:04:57.522]                 }
[16:04:57.522]                 NAMES <- toupper(added)
[16:04:57.522]                 for (kk in seq_along(NAMES)) {
[16:04:57.522]                   name <- added[[kk]]
[16:04:57.522]                   NAME <- NAMES[[kk]]
[16:04:57.522]                   if (name != NAME && is.element(NAME, old_names)) 
[16:04:57.522]                     next
[16:04:57.522]                   args[[name]] <- ""
[16:04:57.522]                 }
[16:04:57.522]                 NAMES <- toupper(removed)
[16:04:57.522]                 for (kk in seq_along(NAMES)) {
[16:04:57.522]                   name <- removed[[kk]]
[16:04:57.522]                   NAME <- NAMES[[kk]]
[16:04:57.522]                   if (name != NAME && is.element(NAME, old_names)) 
[16:04:57.522]                     next
[16:04:57.522]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:04:57.522]                 }
[16:04:57.522]                 if (length(args) > 0) 
[16:04:57.522]                   base::do.call(base::Sys.setenv, args = args)
[16:04:57.522]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:04:57.522]             }
[16:04:57.522]             else {
[16:04:57.522]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:04:57.522]             }
[16:04:57.522]             {
[16:04:57.522]                 if (base::length(...future.futureOptionsAdded) > 
[16:04:57.522]                   0L) {
[16:04:57.522]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:04:57.522]                   base::names(opts) <- ...future.futureOptionsAdded
[16:04:57.522]                   base::options(opts)
[16:04:57.522]                 }
[16:04:57.522]                 {
[16:04:57.522]                   {
[16:04:57.522]                     base::options(mc.cores = ...future.mc.cores.old)
[16:04:57.522]                     NULL
[16:04:57.522]                   }
[16:04:57.522]                   options(future.plan = NULL)
[16:04:57.522]                   if (is.na(NA_character_)) 
[16:04:57.522]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:04:57.522]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:04:57.522]                   future::plan(list(function (..., workers = availableCores(), 
[16:04:57.522]                     lazy = FALSE, rscript_libs = .libPaths(), 
[16:04:57.522]                     envir = parent.frame()) 
[16:04:57.522]                   {
[16:04:57.522]                     if (is.function(workers)) 
[16:04:57.522]                       workers <- workers()
[16:04:57.522]                     workers <- structure(as.integer(workers), 
[16:04:57.522]                       class = class(workers))
[16:04:57.522]                     stop_if_not(length(workers) == 1, is.finite(workers), 
[16:04:57.522]                       workers >= 1)
[16:04:57.522]                     if (workers == 1L && !inherits(workers, "AsIs")) {
[16:04:57.522]                       return(sequential(..., lazy = TRUE, envir = envir))
[16:04:57.522]                     }
[16:04:57.522]                     future <- MultisessionFuture(..., workers = workers, 
[16:04:57.522]                       lazy = lazy, rscript_libs = rscript_libs, 
[16:04:57.522]                       envir = envir)
[16:04:57.522]                     if (!future$lazy) 
[16:04:57.522]                       future <- run(future)
[16:04:57.522]                     invisible(future)
[16:04:57.522]                   }), .cleanup = FALSE, .init = FALSE)
[16:04:57.522]                 }
[16:04:57.522]             }
[16:04:57.522]         }
[16:04:57.522]     })
[16:04:57.522]     if (TRUE) {
[16:04:57.522]         base::sink(type = "output", split = FALSE)
[16:04:57.522]         if (TRUE) {
[16:04:57.522]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:04:57.522]         }
[16:04:57.522]         else {
[16:04:57.522]             ...future.result["stdout"] <- base::list(NULL)
[16:04:57.522]         }
[16:04:57.522]         base::close(...future.stdout)
[16:04:57.522]         ...future.stdout <- NULL
[16:04:57.522]     }
[16:04:57.522]     ...future.result$conditions <- ...future.conditions
[16:04:57.522]     ...future.result$finished <- base::Sys.time()
[16:04:57.522]     ...future.result
[16:04:57.522] }
[16:04:57.576] MultisessionFuture started
[16:04:57.577] result() for ClusterFuture ...
[16:04:57.577] receiveMessageFromWorker() for ClusterFuture ...
[16:04:57.578] - Validating connection of MultisessionFuture
[16:04:57.623] - received message: FutureResult
[16:04:57.623] - Received FutureResult
[16:04:57.623] - Erased future from FutureRegistry
[16:04:57.623] result() for ClusterFuture ...
[16:04:57.623] - result already collected: FutureResult
[16:04:57.623] result() for ClusterFuture ... done
[16:04:57.624] receiveMessageFromWorker() for ClusterFuture ... done
[16:04:57.624] result() for ClusterFuture ... done
[16:04:57.624] result() for ClusterFuture ...
[16:04:57.624] - result already collected: FutureResult
[16:04:57.624] result() for ClusterFuture ... done
[16:04:57.624] plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ... DONE
[16:04:57.628] plan(): nbrOfWorkers() = 2
[16:04:57.628] getGlobalsAndPackages() ...
Warning: R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘error’
[16:04:57.629] Searching for globals...
[16:04:57.629] - globals found: [1] ‘getOption’
[16:04:57.630] Searching for globals ... DONE
[16:04:57.630] Resolving globals: FALSE
[16:04:57.630] 
[16:04:57.630] 
[16:04:57.630] getGlobalsAndPackages() ... DONE
[16:04:57.631] run() for ‘Future’ ...
[16:04:57.631] - state: ‘created’
[16:04:57.631] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[16:04:57.646] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[16:04:57.646] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[16:04:57.646]   - Field: ‘node’
[16:04:57.646]   - Field: ‘label’
[16:04:57.646]   - Field: ‘local’
[16:04:57.646]   - Field: ‘owner’
[16:04:57.646]   - Field: ‘envir’
[16:04:57.647]   - Field: ‘workers’
[16:04:57.647]   - Field: ‘packages’
[16:04:57.647]   - Field: ‘gc’
[16:04:57.647]   - Field: ‘conditions’
[16:04:57.647]   - Field: ‘persistent’
[16:04:57.647]   - Field: ‘expr’
[16:04:57.647]   - Field: ‘uuid’
[16:04:57.647]   - Field: ‘seed’
[16:04:57.647]   - Field: ‘version’
[16:04:57.648]   - Field: ‘result’
[16:04:57.648]   - Field: ‘asynchronous’
[16:04:57.648]   - Field: ‘calls’
[16:04:57.648]   - Field: ‘globals’
[16:04:57.648]   - Field: ‘stdout’
[16:04:57.648]   - Field: ‘earlySignal’
[16:04:57.648]   - Field: ‘lazy’
[16:04:57.648]   - Field: ‘state’
[16:04:57.648] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[16:04:57.649] - Launch lazy future ...
[16:04:57.649] Packages needed by the future expression (n = 0): <none>
[16:04:57.649] Packages needed by future strategies (n = 0): <none>
[16:04:57.650] {
[16:04:57.650]     {
[16:04:57.650]         {
[16:04:57.650]             ...future.startTime <- base::Sys.time()
[16:04:57.650]             {
[16:04:57.650]                 {
[16:04:57.650]                   {
[16:04:57.650]                     {
[16:04:57.650]                       base::local({
[16:04:57.650]                         has_future <- base::requireNamespace("future", 
[16:04:57.650]                           quietly = TRUE)
[16:04:57.650]                         if (has_future) {
[16:04:57.650]                           ns <- base::getNamespace("future")
[16:04:57.650]                           version <- ns[[".package"]][["version"]]
[16:04:57.650]                           if (is.null(version)) 
[16:04:57.650]                             version <- utils::packageVersion("future")
[16:04:57.650]                         }
[16:04:57.650]                         else {
[16:04:57.650]                           version <- NULL
[16:04:57.650]                         }
[16:04:57.650]                         if (!has_future || version < "1.8.0") {
[16:04:57.650]                           info <- base::c(r_version = base::gsub("R version ", 
[16:04:57.650]                             "", base::R.version$version.string), 
[16:04:57.650]                             platform = base::sprintf("%s (%s-bit)", 
[16:04:57.650]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:04:57.650]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[16:04:57.650]                               "release", "version")], collapse = " "), 
[16:04:57.650]                             hostname = base::Sys.info()[["nodename"]])
[16:04:57.650]                           info <- base::sprintf("%s: %s", base::names(info), 
[16:04:57.650]                             info)
[16:04:57.650]                           info <- base::paste(info, collapse = "; ")
[16:04:57.650]                           if (!has_future) {
[16:04:57.650]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:04:57.650]                               info)
[16:04:57.650]                           }
[16:04:57.650]                           else {
[16:04:57.650]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:04:57.650]                               info, version)
[16:04:57.650]                           }
[16:04:57.650]                           base::stop(msg)
[16:04:57.650]                         }
[16:04:57.650]                       })
[16:04:57.650]                     }
[16:04:57.650]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[16:04:57.650]                     base::options(mc.cores = 1L)
[16:04:57.650]                   }
[16:04:57.650]                   options(future.plan = NULL)
[16:04:57.650]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:04:57.650]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:04:57.650]                 }
[16:04:57.650]                 ...future.workdir <- getwd()
[16:04:57.650]             }
[16:04:57.650]             ...future.oldOptions <- base::as.list(base::.Options)
[16:04:57.650]             ...future.oldEnvVars <- base::Sys.getenv()
[16:04:57.650]         }
[16:04:57.650]         base::options(future.startup.script = FALSE, future.globals.onMissing = "error", 
[16:04:57.650]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:04:57.650]             future.globals.onMissing = "error", future.globals.onReference = NULL, 
[16:04:57.650]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:04:57.650]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:04:57.650]             future.stdout.windows.reencode = NULL, width = 80L)
[16:04:57.650]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:04:57.650]             base::names(...future.oldOptions))
[16:04:57.650]     }
[16:04:57.650]     if (FALSE) {
[16:04:57.650]     }
[16:04:57.650]     else {
[16:04:57.650]         if (TRUE) {
[16:04:57.650]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:04:57.650]                 open = "w")
[16:04:57.650]         }
[16:04:57.650]         else {
[16:04:57.650]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:04:57.650]                 windows = "NUL", "/dev/null"), open = "w")
[16:04:57.650]         }
[16:04:57.650]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:04:57.650]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:04:57.650]             base::sink(type = "output", split = FALSE)
[16:04:57.650]             base::close(...future.stdout)
[16:04:57.650]         }, add = TRUE)
[16:04:57.650]     }
[16:04:57.650]     ...future.frame <- base::sys.nframe()
[16:04:57.650]     ...future.conditions <- base::list()
[16:04:57.650]     ...future.rng <- base::globalenv()$.Random.seed
[16:04:57.650]     if (FALSE) {
[16:04:57.650]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:04:57.650]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:04:57.650]     }
[16:04:57.650]     ...future.result <- base::tryCatch({
[16:04:57.650]         base::withCallingHandlers({
[16:04:57.650]             ...future.value <- base::withVisible(base::local({
[16:04:57.650]                 ...future.makeSendCondition <- base::local({
[16:04:57.650]                   sendCondition <- NULL
[16:04:57.650]                   function(frame = 1L) {
[16:04:57.650]                     if (is.function(sendCondition)) 
[16:04:57.650]                       return(sendCondition)
[16:04:57.650]                     ns <- getNamespace("parallel")
[16:04:57.650]                     if (exists("sendData", mode = "function", 
[16:04:57.650]                       envir = ns)) {
[16:04:57.650]                       parallel_sendData <- get("sendData", mode = "function", 
[16:04:57.650]                         envir = ns)
[16:04:57.650]                       envir <- sys.frame(frame)
[16:04:57.650]                       master <- NULL
[16:04:57.650]                       while (!identical(envir, .GlobalEnv) && 
[16:04:57.650]                         !identical(envir, emptyenv())) {
[16:04:57.650]                         if (exists("master", mode = "list", envir = envir, 
[16:04:57.650]                           inherits = FALSE)) {
[16:04:57.650]                           master <- get("master", mode = "list", 
[16:04:57.650]                             envir = envir, inherits = FALSE)
[16:04:57.650]                           if (inherits(master, c("SOCKnode", 
[16:04:57.650]                             "SOCK0node"))) {
[16:04:57.650]                             sendCondition <<- function(cond) {
[16:04:57.650]                               data <- list(type = "VALUE", value = cond, 
[16:04:57.650]                                 success = TRUE)
[16:04:57.650]                               parallel_sendData(master, data)
[16:04:57.650]                             }
[16:04:57.650]                             return(sendCondition)
[16:04:57.650]                           }
[16:04:57.650]                         }
[16:04:57.650]                         frame <- frame + 1L
[16:04:57.650]                         envir <- sys.frame(frame)
[16:04:57.650]                       }
[16:04:57.650]                     }
[16:04:57.650]                     sendCondition <<- function(cond) NULL
[16:04:57.650]                   }
[16:04:57.650]                 })
[16:04:57.650]                 withCallingHandlers({
[16:04:57.650]                   getOption("future.globals.onMissing")
[16:04:57.650]                 }, immediateCondition = function(cond) {
[16:04:57.650]                   sendCondition <- ...future.makeSendCondition()
[16:04:57.650]                   sendCondition(cond)
[16:04:57.650]                   muffleCondition <- function (cond, pattern = "^muffle") 
[16:04:57.650]                   {
[16:04:57.650]                     inherits <- base::inherits
[16:04:57.650]                     invokeRestart <- base::invokeRestart
[16:04:57.650]                     is.null <- base::is.null
[16:04:57.650]                     muffled <- FALSE
[16:04:57.650]                     if (inherits(cond, "message")) {
[16:04:57.650]                       muffled <- grepl(pattern, "muffleMessage")
[16:04:57.650]                       if (muffled) 
[16:04:57.650]                         invokeRestart("muffleMessage")
[16:04:57.650]                     }
[16:04:57.650]                     else if (inherits(cond, "warning")) {
[16:04:57.650]                       muffled <- grepl(pattern, "muffleWarning")
[16:04:57.650]                       if (muffled) 
[16:04:57.650]                         invokeRestart("muffleWarning")
[16:04:57.650]                     }
[16:04:57.650]                     else if (inherits(cond, "condition")) {
[16:04:57.650]                       if (!is.null(pattern)) {
[16:04:57.650]                         computeRestarts <- base::computeRestarts
[16:04:57.650]                         grepl <- base::grepl
[16:04:57.650]                         restarts <- computeRestarts(cond)
[16:04:57.650]                         for (restart in restarts) {
[16:04:57.650]                           name <- restart$name
[16:04:57.650]                           if (is.null(name)) 
[16:04:57.650]                             next
[16:04:57.650]                           if (!grepl(pattern, name)) 
[16:04:57.650]                             next
[16:04:57.650]                           invokeRestart(restart)
[16:04:57.650]                           muffled <- TRUE
[16:04:57.650]                           break
[16:04:57.650]                         }
[16:04:57.650]                       }
[16:04:57.650]                     }
[16:04:57.650]                     invisible(muffled)
[16:04:57.650]                   }
[16:04:57.650]                   muffleCondition(cond)
[16:04:57.650]                 })
[16:04:57.650]             }))
[16:04:57.650]             future::FutureResult(value = ...future.value$value, 
[16:04:57.650]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:04:57.650]                   ...future.rng), globalenv = if (FALSE) 
[16:04:57.650]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:04:57.650]                     ...future.globalenv.names))
[16:04:57.650]                 else NULL, started = ...future.startTime, version = "1.8")
[16:04:57.650]         }, condition = base::local({
[16:04:57.650]             c <- base::c
[16:04:57.650]             inherits <- base::inherits
[16:04:57.650]             invokeRestart <- base::invokeRestart
[16:04:57.650]             length <- base::length
[16:04:57.650]             list <- base::list
[16:04:57.650]             seq.int <- base::seq.int
[16:04:57.650]             signalCondition <- base::signalCondition
[16:04:57.650]             sys.calls <- base::sys.calls
[16:04:57.650]             `[[` <- base::`[[`
[16:04:57.650]             `+` <- base::`+`
[16:04:57.650]             `<<-` <- base::`<<-`
[16:04:57.650]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:04:57.650]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:04:57.650]                   3L)]
[16:04:57.650]             }
[16:04:57.650]             function(cond) {
[16:04:57.650]                 is_error <- inherits(cond, "error")
[16:04:57.650]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:04:57.650]                   NULL)
[16:04:57.650]                 if (is_error) {
[16:04:57.650]                   sessionInformation <- function() {
[16:04:57.650]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:04:57.650]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:04:57.650]                       search = base::search(), system = base::Sys.info())
[16:04:57.650]                   }
[16:04:57.650]                   ...future.conditions[[length(...future.conditions) + 
[16:04:57.650]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:04:57.650]                     cond$call), session = sessionInformation(), 
[16:04:57.650]                     timestamp = base::Sys.time(), signaled = 0L)
[16:04:57.650]                   signalCondition(cond)
[16:04:57.650]                 }
[16:04:57.650]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:04:57.650]                 "immediateCondition"))) {
[16:04:57.650]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:04:57.650]                   ...future.conditions[[length(...future.conditions) + 
[16:04:57.650]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:04:57.650]                   if (TRUE && !signal) {
[16:04:57.650]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:04:57.650]                     {
[16:04:57.650]                       inherits <- base::inherits
[16:04:57.650]                       invokeRestart <- base::invokeRestart
[16:04:57.650]                       is.null <- base::is.null
[16:04:57.650]                       muffled <- FALSE
[16:04:57.650]                       if (inherits(cond, "message")) {
[16:04:57.650]                         muffled <- grepl(pattern, "muffleMessage")
[16:04:57.650]                         if (muffled) 
[16:04:57.650]                           invokeRestart("muffleMessage")
[16:04:57.650]                       }
[16:04:57.650]                       else if (inherits(cond, "warning")) {
[16:04:57.650]                         muffled <- grepl(pattern, "muffleWarning")
[16:04:57.650]                         if (muffled) 
[16:04:57.650]                           invokeRestart("muffleWarning")
[16:04:57.650]                       }
[16:04:57.650]                       else if (inherits(cond, "condition")) {
[16:04:57.650]                         if (!is.null(pattern)) {
[16:04:57.650]                           computeRestarts <- base::computeRestarts
[16:04:57.650]                           grepl <- base::grepl
[16:04:57.650]                           restarts <- computeRestarts(cond)
[16:04:57.650]                           for (restart in restarts) {
[16:04:57.650]                             name <- restart$name
[16:04:57.650]                             if (is.null(name)) 
[16:04:57.650]                               next
[16:04:57.650]                             if (!grepl(pattern, name)) 
[16:04:57.650]                               next
[16:04:57.650]                             invokeRestart(restart)
[16:04:57.650]                             muffled <- TRUE
[16:04:57.650]                             break
[16:04:57.650]                           }
[16:04:57.650]                         }
[16:04:57.650]                       }
[16:04:57.650]                       invisible(muffled)
[16:04:57.650]                     }
[16:04:57.650]                     muffleCondition(cond, pattern = "^muffle")
[16:04:57.650]                   }
[16:04:57.650]                 }
[16:04:57.650]                 else {
[16:04:57.650]                   if (TRUE) {
[16:04:57.650]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:04:57.650]                     {
[16:04:57.650]                       inherits <- base::inherits
[16:04:57.650]                       invokeRestart <- base::invokeRestart
[16:04:57.650]                       is.null <- base::is.null
[16:04:57.650]                       muffled <- FALSE
[16:04:57.650]                       if (inherits(cond, "message")) {
[16:04:57.650]                         muffled <- grepl(pattern, "muffleMessage")
[16:04:57.650]                         if (muffled) 
[16:04:57.650]                           invokeRestart("muffleMessage")
[16:04:57.650]                       }
[16:04:57.650]                       else if (inherits(cond, "warning")) {
[16:04:57.650]                         muffled <- grepl(pattern, "muffleWarning")
[16:04:57.650]                         if (muffled) 
[16:04:57.650]                           invokeRestart("muffleWarning")
[16:04:57.650]                       }
[16:04:57.650]                       else if (inherits(cond, "condition")) {
[16:04:57.650]                         if (!is.null(pattern)) {
[16:04:57.650]                           computeRestarts <- base::computeRestarts
[16:04:57.650]                           grepl <- base::grepl
[16:04:57.650]                           restarts <- computeRestarts(cond)
[16:04:57.650]                           for (restart in restarts) {
[16:04:57.650]                             name <- restart$name
[16:04:57.650]                             if (is.null(name)) 
[16:04:57.650]                               next
[16:04:57.650]                             if (!grepl(pattern, name)) 
[16:04:57.650]                               next
[16:04:57.650]                             invokeRestart(restart)
[16:04:57.650]                             muffled <- TRUE
[16:04:57.650]                             break
[16:04:57.650]                           }
[16:04:57.650]                         }
[16:04:57.650]                       }
[16:04:57.650]                       invisible(muffled)
[16:04:57.650]                     }
[16:04:57.650]                     muffleCondition(cond, pattern = "^muffle")
[16:04:57.650]                   }
[16:04:57.650]                 }
[16:04:57.650]             }
[16:04:57.650]         }))
[16:04:57.650]     }, error = function(ex) {
[16:04:57.650]         base::structure(base::list(value = NULL, visible = NULL, 
[16:04:57.650]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:04:57.650]                 ...future.rng), started = ...future.startTime, 
[16:04:57.650]             finished = Sys.time(), session_uuid = NA_character_, 
[16:04:57.650]             version = "1.8"), class = "FutureResult")
[16:04:57.650]     }, finally = {
[16:04:57.650]         if (!identical(...future.workdir, getwd())) 
[16:04:57.650]             setwd(...future.workdir)
[16:04:57.650]         {
[16:04:57.650]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:04:57.650]                 ...future.oldOptions$nwarnings <- NULL
[16:04:57.650]             }
[16:04:57.650]             base::options(...future.oldOptions)
[16:04:57.650]             if (.Platform$OS.type == "windows") {
[16:04:57.650]                 old_names <- names(...future.oldEnvVars)
[16:04:57.650]                 envs <- base::Sys.getenv()
[16:04:57.650]                 names <- names(envs)
[16:04:57.650]                 common <- intersect(names, old_names)
[16:04:57.650]                 added <- setdiff(names, old_names)
[16:04:57.650]                 removed <- setdiff(old_names, names)
[16:04:57.650]                 changed <- common[...future.oldEnvVars[common] != 
[16:04:57.650]                   envs[common]]
[16:04:57.650]                 NAMES <- toupper(changed)
[16:04:57.650]                 args <- list()
[16:04:57.650]                 for (kk in seq_along(NAMES)) {
[16:04:57.650]                   name <- changed[[kk]]
[16:04:57.650]                   NAME <- NAMES[[kk]]
[16:04:57.650]                   if (name != NAME && is.element(NAME, old_names)) 
[16:04:57.650]                     next
[16:04:57.650]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:04:57.650]                 }
[16:04:57.650]                 NAMES <- toupper(added)
[16:04:57.650]                 for (kk in seq_along(NAMES)) {
[16:04:57.650]                   name <- added[[kk]]
[16:04:57.650]                   NAME <- NAMES[[kk]]
[16:04:57.650]                   if (name != NAME && is.element(NAME, old_names)) 
[16:04:57.650]                     next
[16:04:57.650]                   args[[name]] <- ""
[16:04:57.650]                 }
[16:04:57.650]                 NAMES <- toupper(removed)
[16:04:57.650]                 for (kk in seq_along(NAMES)) {
[16:04:57.650]                   name <- removed[[kk]]
[16:04:57.650]                   NAME <- NAMES[[kk]]
[16:04:57.650]                   if (name != NAME && is.element(NAME, old_names)) 
[16:04:57.650]                     next
[16:04:57.650]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:04:57.650]                 }
[16:04:57.650]                 if (length(args) > 0) 
[16:04:57.650]                   base::do.call(base::Sys.setenv, args = args)
[16:04:57.650]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:04:57.650]             }
[16:04:57.650]             else {
[16:04:57.650]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:04:57.650]             }
[16:04:57.650]             {
[16:04:57.650]                 if (base::length(...future.futureOptionsAdded) > 
[16:04:57.650]                   0L) {
[16:04:57.650]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:04:57.650]                   base::names(opts) <- ...future.futureOptionsAdded
[16:04:57.650]                   base::options(opts)
[16:04:57.650]                 }
[16:04:57.650]                 {
[16:04:57.650]                   {
[16:04:57.650]                     base::options(mc.cores = ...future.mc.cores.old)
[16:04:57.650]                     NULL
[16:04:57.650]                   }
[16:04:57.650]                   options(future.plan = NULL)
[16:04:57.650]                   if (is.na(NA_character_)) 
[16:04:57.650]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:04:57.650]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:04:57.650]                   future::plan(list(function (..., workers = availableCores(), 
[16:04:57.650]                     lazy = FALSE, rscript_libs = .libPaths(), 
[16:04:57.650]                     envir = parent.frame()) 
[16:04:57.650]                   {
[16:04:57.650]                     if (is.function(workers)) 
[16:04:57.650]                       workers <- workers()
[16:04:57.650]                     workers <- structure(as.integer(workers), 
[16:04:57.650]                       class = class(workers))
[16:04:57.650]                     stop_if_not(length(workers) == 1, is.finite(workers), 
[16:04:57.650]                       workers >= 1)
[16:04:57.650]                     if (workers == 1L && !inherits(workers, "AsIs")) {
[16:04:57.650]                       return(sequential(..., lazy = TRUE, envir = envir))
[16:04:57.650]                     }
[16:04:57.650]                     future <- MultisessionFuture(..., workers = workers, 
[16:04:57.650]                       lazy = lazy, rscript_libs = rscript_libs, 
[16:04:57.650]                       envir = envir)
[16:04:57.650]                     if (!future$lazy) 
[16:04:57.650]                       future <- run(future)
[16:04:57.650]                     invisible(future)
[16:04:57.650]                   }), .cleanup = FALSE, .init = FALSE)
[16:04:57.650]                 }
[16:04:57.650]             }
[16:04:57.650]         }
[16:04:57.650]     })
[16:04:57.650]     if (TRUE) {
[16:04:57.650]         base::sink(type = "output", split = FALSE)
[16:04:57.650]         if (TRUE) {
[16:04:57.650]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:04:57.650]         }
[16:04:57.650]         else {
[16:04:57.650]             ...future.result["stdout"] <- base::list(NULL)
[16:04:57.650]         }
[16:04:57.650]         base::close(...future.stdout)
[16:04:57.650]         ...future.stdout <- NULL
[16:04:57.650]     }
[16:04:57.650]     ...future.result$conditions <- ...future.conditions
[16:04:57.650]     ...future.result$finished <- base::Sys.time()
[16:04:57.650]     ...future.result
[16:04:57.650] }
[16:04:57.653] MultisessionFuture started
[16:04:57.654] - Launch lazy future ... done
[16:04:57.654] run() for ‘MultisessionFuture’ ... done
[16:04:57.654] result() for ClusterFuture ...
[16:04:57.654] receiveMessageFromWorker() for ClusterFuture ...
[16:04:57.654] - Validating connection of MultisessionFuture
[16:04:57.700] - received message: FutureResult
[16:04:57.701] - Received FutureResult
[16:04:57.701] - Erased future from FutureRegistry
[16:04:57.701] result() for ClusterFuture ...
[16:04:57.701] - result already collected: FutureResult
[16:04:57.701] result() for ClusterFuture ... done
[16:04:57.701] receiveMessageFromWorker() for ClusterFuture ... done
[16:04:57.702] result() for ClusterFuture ... done
[16:04:57.702] result() for ClusterFuture ...
[16:04:57.702] - result already collected: FutureResult
[16:04:57.702] result() for ClusterFuture ... done
[16:04:57.702] getGlobalsAndPackages() ...
Warning: R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘ignore’
[16:04:57.703] Searching for globals...
[16:04:57.703] - globals found: [1] ‘getOption’
[16:04:57.703] Searching for globals ... DONE
[16:04:57.704] Resolving globals: FALSE
[16:04:57.704] 
[16:04:57.704] 
[16:04:57.704] getGlobalsAndPackages() ... DONE
[16:04:57.704] run() for ‘Future’ ...
[16:04:57.705] - state: ‘created’
[16:04:57.705] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[16:04:57.720] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[16:04:57.720] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[16:04:57.720]   - Field: ‘node’
[16:04:57.720]   - Field: ‘label’
[16:04:57.720]   - Field: ‘local’
[16:04:57.720]   - Field: ‘owner’
[16:04:57.720]   - Field: ‘envir’
[16:04:57.720]   - Field: ‘workers’
[16:04:57.720]   - Field: ‘packages’
[16:04:57.721]   - Field: ‘gc’
[16:04:57.721]   - Field: ‘conditions’
[16:04:57.721]   - Field: ‘persistent’
[16:04:57.721]   - Field: ‘expr’
[16:04:57.721]   - Field: ‘uuid’
[16:04:57.721]   - Field: ‘seed’
[16:04:57.721]   - Field: ‘version’
[16:04:57.721]   - Field: ‘result’
[16:04:57.722]   - Field: ‘asynchronous’
[16:04:57.722]   - Field: ‘calls’
[16:04:57.722]   - Field: ‘globals’
[16:04:57.722]   - Field: ‘stdout’
[16:04:57.722]   - Field: ‘earlySignal’
[16:04:57.722]   - Field: ‘lazy’
[16:04:57.722]   - Field: ‘state’
[16:04:57.722] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[16:04:57.723] - Launch lazy future ...
[16:04:57.723] Packages needed by the future expression (n = 0): <none>
[16:04:57.723] Packages needed by future strategies (n = 0): <none>
[16:04:57.724] {
[16:04:57.724]     {
[16:04:57.724]         {
[16:04:57.724]             ...future.startTime <- base::Sys.time()
[16:04:57.724]             {
[16:04:57.724]                 {
[16:04:57.724]                   {
[16:04:57.724]                     {
[16:04:57.724]                       base::local({
[16:04:57.724]                         has_future <- base::requireNamespace("future", 
[16:04:57.724]                           quietly = TRUE)
[16:04:57.724]                         if (has_future) {
[16:04:57.724]                           ns <- base::getNamespace("future")
[16:04:57.724]                           version <- ns[[".package"]][["version"]]
[16:04:57.724]                           if (is.null(version)) 
[16:04:57.724]                             version <- utils::packageVersion("future")
[16:04:57.724]                         }
[16:04:57.724]                         else {
[16:04:57.724]                           version <- NULL
[16:04:57.724]                         }
[16:04:57.724]                         if (!has_future || version < "1.8.0") {
[16:04:57.724]                           info <- base::c(r_version = base::gsub("R version ", 
[16:04:57.724]                             "", base::R.version$version.string), 
[16:04:57.724]                             platform = base::sprintf("%s (%s-bit)", 
[16:04:57.724]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:04:57.724]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[16:04:57.724]                               "release", "version")], collapse = " "), 
[16:04:57.724]                             hostname = base::Sys.info()[["nodename"]])
[16:04:57.724]                           info <- base::sprintf("%s: %s", base::names(info), 
[16:04:57.724]                             info)
[16:04:57.724]                           info <- base::paste(info, collapse = "; ")
[16:04:57.724]                           if (!has_future) {
[16:04:57.724]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:04:57.724]                               info)
[16:04:57.724]                           }
[16:04:57.724]                           else {
[16:04:57.724]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:04:57.724]                               info, version)
[16:04:57.724]                           }
[16:04:57.724]                           base::stop(msg)
[16:04:57.724]                         }
[16:04:57.724]                       })
[16:04:57.724]                     }
[16:04:57.724]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[16:04:57.724]                     base::options(mc.cores = 1L)
[16:04:57.724]                   }
[16:04:57.724]                   options(future.plan = NULL)
[16:04:57.724]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:04:57.724]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:04:57.724]                 }
[16:04:57.724]                 ...future.workdir <- getwd()
[16:04:57.724]             }
[16:04:57.724]             ...future.oldOptions <- base::as.list(base::.Options)
[16:04:57.724]             ...future.oldEnvVars <- base::Sys.getenv()
[16:04:57.724]         }
[16:04:57.724]         base::options(future.startup.script = FALSE, future.globals.onMissing = "ignore", 
[16:04:57.724]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:04:57.724]             future.globals.onMissing = "ignore", future.globals.onReference = NULL, 
[16:04:57.724]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:04:57.724]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:04:57.724]             future.stdout.windows.reencode = NULL, width = 80L)
[16:04:57.724]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:04:57.724]             base::names(...future.oldOptions))
[16:04:57.724]     }
[16:04:57.724]     if (FALSE) {
[16:04:57.724]     }
[16:04:57.724]     else {
[16:04:57.724]         if (TRUE) {
[16:04:57.724]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:04:57.724]                 open = "w")
[16:04:57.724]         }
[16:04:57.724]         else {
[16:04:57.724]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:04:57.724]                 windows = "NUL", "/dev/null"), open = "w")
[16:04:57.724]         }
[16:04:57.724]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:04:57.724]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:04:57.724]             base::sink(type = "output", split = FALSE)
[16:04:57.724]             base::close(...future.stdout)
[16:04:57.724]         }, add = TRUE)
[16:04:57.724]     }
[16:04:57.724]     ...future.frame <- base::sys.nframe()
[16:04:57.724]     ...future.conditions <- base::list()
[16:04:57.724]     ...future.rng <- base::globalenv()$.Random.seed
[16:04:57.724]     if (FALSE) {
[16:04:57.724]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:04:57.724]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:04:57.724]     }
[16:04:57.724]     ...future.result <- base::tryCatch({
[16:04:57.724]         base::withCallingHandlers({
[16:04:57.724]             ...future.value <- base::withVisible(base::local({
[16:04:57.724]                 ...future.makeSendCondition <- base::local({
[16:04:57.724]                   sendCondition <- NULL
[16:04:57.724]                   function(frame = 1L) {
[16:04:57.724]                     if (is.function(sendCondition)) 
[16:04:57.724]                       return(sendCondition)
[16:04:57.724]                     ns <- getNamespace("parallel")
[16:04:57.724]                     if (exists("sendData", mode = "function", 
[16:04:57.724]                       envir = ns)) {
[16:04:57.724]                       parallel_sendData <- get("sendData", mode = "function", 
[16:04:57.724]                         envir = ns)
[16:04:57.724]                       envir <- sys.frame(frame)
[16:04:57.724]                       master <- NULL
[16:04:57.724]                       while (!identical(envir, .GlobalEnv) && 
[16:04:57.724]                         !identical(envir, emptyenv())) {
[16:04:57.724]                         if (exists("master", mode = "list", envir = envir, 
[16:04:57.724]                           inherits = FALSE)) {
[16:04:57.724]                           master <- get("master", mode = "list", 
[16:04:57.724]                             envir = envir, inherits = FALSE)
[16:04:57.724]                           if (inherits(master, c("SOCKnode", 
[16:04:57.724]                             "SOCK0node"))) {
[16:04:57.724]                             sendCondition <<- function(cond) {
[16:04:57.724]                               data <- list(type = "VALUE", value = cond, 
[16:04:57.724]                                 success = TRUE)
[16:04:57.724]                               parallel_sendData(master, data)
[16:04:57.724]                             }
[16:04:57.724]                             return(sendCondition)
[16:04:57.724]                           }
[16:04:57.724]                         }
[16:04:57.724]                         frame <- frame + 1L
[16:04:57.724]                         envir <- sys.frame(frame)
[16:04:57.724]                       }
[16:04:57.724]                     }
[16:04:57.724]                     sendCondition <<- function(cond) NULL
[16:04:57.724]                   }
[16:04:57.724]                 })
[16:04:57.724]                 withCallingHandlers({
[16:04:57.724]                   getOption("future.globals.onMissing")
[16:04:57.724]                 }, immediateCondition = function(cond) {
[16:04:57.724]                   sendCondition <- ...future.makeSendCondition()
[16:04:57.724]                   sendCondition(cond)
[16:04:57.724]                   muffleCondition <- function (cond, pattern = "^muffle") 
[16:04:57.724]                   {
[16:04:57.724]                     inherits <- base::inherits
[16:04:57.724]                     invokeRestart <- base::invokeRestart
[16:04:57.724]                     is.null <- base::is.null
[16:04:57.724]                     muffled <- FALSE
[16:04:57.724]                     if (inherits(cond, "message")) {
[16:04:57.724]                       muffled <- grepl(pattern, "muffleMessage")
[16:04:57.724]                       if (muffled) 
[16:04:57.724]                         invokeRestart("muffleMessage")
[16:04:57.724]                     }
[16:04:57.724]                     else if (inherits(cond, "warning")) {
[16:04:57.724]                       muffled <- grepl(pattern, "muffleWarning")
[16:04:57.724]                       if (muffled) 
[16:04:57.724]                         invokeRestart("muffleWarning")
[16:04:57.724]                     }
[16:04:57.724]                     else if (inherits(cond, "condition")) {
[16:04:57.724]                       if (!is.null(pattern)) {
[16:04:57.724]                         computeRestarts <- base::computeRestarts
[16:04:57.724]                         grepl <- base::grepl
[16:04:57.724]                         restarts <- computeRestarts(cond)
[16:04:57.724]                         for (restart in restarts) {
[16:04:57.724]                           name <- restart$name
[16:04:57.724]                           if (is.null(name)) 
[16:04:57.724]                             next
[16:04:57.724]                           if (!grepl(pattern, name)) 
[16:04:57.724]                             next
[16:04:57.724]                           invokeRestart(restart)
[16:04:57.724]                           muffled <- TRUE
[16:04:57.724]                           break
[16:04:57.724]                         }
[16:04:57.724]                       }
[16:04:57.724]                     }
[16:04:57.724]                     invisible(muffled)
[16:04:57.724]                   }
[16:04:57.724]                   muffleCondition(cond)
[16:04:57.724]                 })
[16:04:57.724]             }))
[16:04:57.724]             future::FutureResult(value = ...future.value$value, 
[16:04:57.724]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:04:57.724]                   ...future.rng), globalenv = if (FALSE) 
[16:04:57.724]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:04:57.724]                     ...future.globalenv.names))
[16:04:57.724]                 else NULL, started = ...future.startTime, version = "1.8")
[16:04:57.724]         }, condition = base::local({
[16:04:57.724]             c <- base::c
[16:04:57.724]             inherits <- base::inherits
[16:04:57.724]             invokeRestart <- base::invokeRestart
[16:04:57.724]             length <- base::length
[16:04:57.724]             list <- base::list
[16:04:57.724]             seq.int <- base::seq.int
[16:04:57.724]             signalCondition <- base::signalCondition
[16:04:57.724]             sys.calls <- base::sys.calls
[16:04:57.724]             `[[` <- base::`[[`
[16:04:57.724]             `+` <- base::`+`
[16:04:57.724]             `<<-` <- base::`<<-`
[16:04:57.724]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:04:57.724]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:04:57.724]                   3L)]
[16:04:57.724]             }
[16:04:57.724]             function(cond) {
[16:04:57.724]                 is_error <- inherits(cond, "error")
[16:04:57.724]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:04:57.724]                   NULL)
[16:04:57.724]                 if (is_error) {
[16:04:57.724]                   sessionInformation <- function() {
[16:04:57.724]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:04:57.724]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:04:57.724]                       search = base::search(), system = base::Sys.info())
[16:04:57.724]                   }
[16:04:57.724]                   ...future.conditions[[length(...future.conditions) + 
[16:04:57.724]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:04:57.724]                     cond$call), session = sessionInformation(), 
[16:04:57.724]                     timestamp = base::Sys.time(), signaled = 0L)
[16:04:57.724]                   signalCondition(cond)
[16:04:57.724]                 }
[16:04:57.724]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:04:57.724]                 "immediateCondition"))) {
[16:04:57.724]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:04:57.724]                   ...future.conditions[[length(...future.conditions) + 
[16:04:57.724]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:04:57.724]                   if (TRUE && !signal) {
[16:04:57.724]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:04:57.724]                     {
[16:04:57.724]                       inherits <- base::inherits
[16:04:57.724]                       invokeRestart <- base::invokeRestart
[16:04:57.724]                       is.null <- base::is.null
[16:04:57.724]                       muffled <- FALSE
[16:04:57.724]                       if (inherits(cond, "message")) {
[16:04:57.724]                         muffled <- grepl(pattern, "muffleMessage")
[16:04:57.724]                         if (muffled) 
[16:04:57.724]                           invokeRestart("muffleMessage")
[16:04:57.724]                       }
[16:04:57.724]                       else if (inherits(cond, "warning")) {
[16:04:57.724]                         muffled <- grepl(pattern, "muffleWarning")
[16:04:57.724]                         if (muffled) 
[16:04:57.724]                           invokeRestart("muffleWarning")
[16:04:57.724]                       }
[16:04:57.724]                       else if (inherits(cond, "condition")) {
[16:04:57.724]                         if (!is.null(pattern)) {
[16:04:57.724]                           computeRestarts <- base::computeRestarts
[16:04:57.724]                           grepl <- base::grepl
[16:04:57.724]                           restarts <- computeRestarts(cond)
[16:04:57.724]                           for (restart in restarts) {
[16:04:57.724]                             name <- restart$name
[16:04:57.724]                             if (is.null(name)) 
[16:04:57.724]                               next
[16:04:57.724]                             if (!grepl(pattern, name)) 
[16:04:57.724]                               next
[16:04:57.724]                             invokeRestart(restart)
[16:04:57.724]                             muffled <- TRUE
[16:04:57.724]                             break
[16:04:57.724]                           }
[16:04:57.724]                         }
[16:04:57.724]                       }
[16:04:57.724]                       invisible(muffled)
[16:04:57.724]                     }
[16:04:57.724]                     muffleCondition(cond, pattern = "^muffle")
[16:04:57.724]                   }
[16:04:57.724]                 }
[16:04:57.724]                 else {
[16:04:57.724]                   if (TRUE) {
[16:04:57.724]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:04:57.724]                     {
[16:04:57.724]                       inherits <- base::inherits
[16:04:57.724]                       invokeRestart <- base::invokeRestart
[16:04:57.724]                       is.null <- base::is.null
[16:04:57.724]                       muffled <- FALSE
[16:04:57.724]                       if (inherits(cond, "message")) {
[16:04:57.724]                         muffled <- grepl(pattern, "muffleMessage")
[16:04:57.724]                         if (muffled) 
[16:04:57.724]                           invokeRestart("muffleMessage")
[16:04:57.724]                       }
[16:04:57.724]                       else if (inherits(cond, "warning")) {
[16:04:57.724]                         muffled <- grepl(pattern, "muffleWarning")
[16:04:57.724]                         if (muffled) 
[16:04:57.724]                           invokeRestart("muffleWarning")
[16:04:57.724]                       }
[16:04:57.724]                       else if (inherits(cond, "condition")) {
[16:04:57.724]                         if (!is.null(pattern)) {
[16:04:57.724]                           computeRestarts <- base::computeRestarts
[16:04:57.724]                           grepl <- base::grepl
[16:04:57.724]                           restarts <- computeRestarts(cond)
[16:04:57.724]                           for (restart in restarts) {
[16:04:57.724]                             name <- restart$name
[16:04:57.724]                             if (is.null(name)) 
[16:04:57.724]                               next
[16:04:57.724]                             if (!grepl(pattern, name)) 
[16:04:57.724]                               next
[16:04:57.724]                             invokeRestart(restart)
[16:04:57.724]                             muffled <- TRUE
[16:04:57.724]                             break
[16:04:57.724]                           }
[16:04:57.724]                         }
[16:04:57.724]                       }
[16:04:57.724]                       invisible(muffled)
[16:04:57.724]                     }
[16:04:57.724]                     muffleCondition(cond, pattern = "^muffle")
[16:04:57.724]                   }
[16:04:57.724]                 }
[16:04:57.724]             }
[16:04:57.724]         }))
[16:04:57.724]     }, error = function(ex) {
[16:04:57.724]         base::structure(base::list(value = NULL, visible = NULL, 
[16:04:57.724]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:04:57.724]                 ...future.rng), started = ...future.startTime, 
[16:04:57.724]             finished = Sys.time(), session_uuid = NA_character_, 
[16:04:57.724]             version = "1.8"), class = "FutureResult")
[16:04:57.724]     }, finally = {
[16:04:57.724]         if (!identical(...future.workdir, getwd())) 
[16:04:57.724]             setwd(...future.workdir)
[16:04:57.724]         {
[16:04:57.724]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:04:57.724]                 ...future.oldOptions$nwarnings <- NULL
[16:04:57.724]             }
[16:04:57.724]             base::options(...future.oldOptions)
[16:04:57.724]             if (.Platform$OS.type == "windows") {
[16:04:57.724]                 old_names <- names(...future.oldEnvVars)
[16:04:57.724]                 envs <- base::Sys.getenv()
[16:04:57.724]                 names <- names(envs)
[16:04:57.724]                 common <- intersect(names, old_names)
[16:04:57.724]                 added <- setdiff(names, old_names)
[16:04:57.724]                 removed <- setdiff(old_names, names)
[16:04:57.724]                 changed <- common[...future.oldEnvVars[common] != 
[16:04:57.724]                   envs[common]]
[16:04:57.724]                 NAMES <- toupper(changed)
[16:04:57.724]                 args <- list()
[16:04:57.724]                 for (kk in seq_along(NAMES)) {
[16:04:57.724]                   name <- changed[[kk]]
[16:04:57.724]                   NAME <- NAMES[[kk]]
[16:04:57.724]                   if (name != NAME && is.element(NAME, old_names)) 
[16:04:57.724]                     next
[16:04:57.724]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:04:57.724]                 }
[16:04:57.724]                 NAMES <- toupper(added)
[16:04:57.724]                 for (kk in seq_along(NAMES)) {
[16:04:57.724]                   name <- added[[kk]]
[16:04:57.724]                   NAME <- NAMES[[kk]]
[16:04:57.724]                   if (name != NAME && is.element(NAME, old_names)) 
[16:04:57.724]                     next
[16:04:57.724]                   args[[name]] <- ""
[16:04:57.724]                 }
[16:04:57.724]                 NAMES <- toupper(removed)
[16:04:57.724]                 for (kk in seq_along(NAMES)) {
[16:04:57.724]                   name <- removed[[kk]]
[16:04:57.724]                   NAME <- NAMES[[kk]]
[16:04:57.724]                   if (name != NAME && is.element(NAME, old_names)) 
[16:04:57.724]                     next
[16:04:57.724]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:04:57.724]                 }
[16:04:57.724]                 if (length(args) > 0) 
[16:04:57.724]                   base::do.call(base::Sys.setenv, args = args)
[16:04:57.724]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:04:57.724]             }
[16:04:57.724]             else {
[16:04:57.724]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:04:57.724]             }
[16:04:57.724]             {
[16:04:57.724]                 if (base::length(...future.futureOptionsAdded) > 
[16:04:57.724]                   0L) {
[16:04:57.724]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:04:57.724]                   base::names(opts) <- ...future.futureOptionsAdded
[16:04:57.724]                   base::options(opts)
[16:04:57.724]                 }
[16:04:57.724]                 {
[16:04:57.724]                   {
[16:04:57.724]                     base::options(mc.cores = ...future.mc.cores.old)
[16:04:57.724]                     NULL
[16:04:57.724]                   }
[16:04:57.724]                   options(future.plan = NULL)
[16:04:57.724]                   if (is.na(NA_character_)) 
[16:04:57.724]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:04:57.724]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:04:57.724]                   future::plan(list(function (..., workers = availableCores(), 
[16:04:57.724]                     lazy = FALSE, rscript_libs = .libPaths(), 
[16:04:57.724]                     envir = parent.frame()) 
[16:04:57.724]                   {
[16:04:57.724]                     if (is.function(workers)) 
[16:04:57.724]                       workers <- workers()
[16:04:57.724]                     workers <- structure(as.integer(workers), 
[16:04:57.724]                       class = class(workers))
[16:04:57.724]                     stop_if_not(length(workers) == 1, is.finite(workers), 
[16:04:57.724]                       workers >= 1)
[16:04:57.724]                     if (workers == 1L && !inherits(workers, "AsIs")) {
[16:04:57.724]                       return(sequential(..., lazy = TRUE, envir = envir))
[16:04:57.724]                     }
[16:04:57.724]                     future <- MultisessionFuture(..., workers = workers, 
[16:04:57.724]                       lazy = lazy, rscript_libs = rscript_libs, 
[16:04:57.724]                       envir = envir)
[16:04:57.724]                     if (!future$lazy) 
[16:04:57.724]                       future <- run(future)
[16:04:57.724]                     invisible(future)
[16:04:57.724]                   }), .cleanup = FALSE, .init = FALSE)
[16:04:57.724]                 }
[16:04:57.724]             }
[16:04:57.724]         }
[16:04:57.724]     })
[16:04:57.724]     if (TRUE) {
[16:04:57.724]         base::sink(type = "output", split = FALSE)
[16:04:57.724]         if (TRUE) {
[16:04:57.724]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:04:57.724]         }
[16:04:57.724]         else {
[16:04:57.724]             ...future.result["stdout"] <- base::list(NULL)
[16:04:57.724]         }
[16:04:57.724]         base::close(...future.stdout)
[16:04:57.724]         ...future.stdout <- NULL
[16:04:57.724]     }
[16:04:57.724]     ...future.result$conditions <- ...future.conditions
[16:04:57.724]     ...future.result$finished <- base::Sys.time()
[16:04:57.724]     ...future.result
[16:04:57.724] }
[16:04:57.727] MultisessionFuture started
[16:04:57.727] - Launch lazy future ... done
[16:04:57.727] run() for ‘MultisessionFuture’ ... done
[16:04:57.728] result() for ClusterFuture ...
[16:04:57.728] receiveMessageFromWorker() for ClusterFuture ...
[16:04:57.728] - Validating connection of MultisessionFuture
[16:04:57.776] - received message: FutureResult
[16:04:57.776] - Received FutureResult
[16:04:57.776] - Erased future from FutureRegistry
[16:04:57.777] result() for ClusterFuture ...
[16:04:57.777] - result already collected: FutureResult
[16:04:57.777] result() for ClusterFuture ... done
[16:04:57.777] receiveMessageFromWorker() for ClusterFuture ... done
[16:04:57.777] result() for ClusterFuture ... done
[16:04:57.777] result() for ClusterFuture ...
[16:04:57.777] - result already collected: FutureResult
[16:04:57.778] result() for ClusterFuture ... done
[16:04:57.778] getGlobalsAndPackages() ...
Warning: R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘error’
[16:04:57.778] Searching for globals...
[16:04:57.780] getGlobalsAndPackages() ...
Warning: R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘ignore’
[16:04:57.780] Searching for globals...
[16:04:57.781] - globals found: [5] ‘$’, ‘subset’, ‘data’, ‘<’, ‘x’
[16:04:57.782] Searching for globals ... DONE
[16:04:57.782] Resolving globals: FALSE
[16:04:57.782] The total size of the 1 globals is 160 bytes (160 bytes)
[16:04:57.783] The total size of the 1 globals exported for future expression (‘subset(data, x < 3)$y’) is 160 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘data’ (160 bytes of class ‘list’)
[16:04:57.783] - globals: [1] ‘data’
[16:04:57.783] 
[16:04:57.783] getGlobalsAndPackages() ... DONE
[16:04:57.784] run() for ‘Future’ ...
[16:04:57.784] - state: ‘created’
[16:04:57.784] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[16:04:57.798] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[16:04:57.799] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[16:04:57.799]   - Field: ‘node’
[16:04:57.799]   - Field: ‘label’
[16:04:57.799]   - Field: ‘local’
[16:04:57.799]   - Field: ‘owner’
[16:04:57.799]   - Field: ‘envir’
[16:04:57.799]   - Field: ‘workers’
[16:04:57.799]   - Field: ‘packages’
[16:04:57.799]   - Field: ‘gc’
[16:04:57.800]   - Field: ‘conditions’
[16:04:57.800]   - Field: ‘persistent’
[16:04:57.800]   - Field: ‘expr’
[16:04:57.800]   - Field: ‘uuid’
[16:04:57.800]   - Field: ‘seed’
[16:04:57.800]   - Field: ‘version’
[16:04:57.800]   - Field: ‘result’
[16:04:57.800]   - Field: ‘asynchronous’
[16:04:57.801]   - Field: ‘calls’
[16:04:57.801]   - Field: ‘globals’
[16:04:57.801]   - Field: ‘stdout’
[16:04:57.801]   - Field: ‘earlySignal’
[16:04:57.801]   - Field: ‘lazy’
[16:04:57.801]   - Field: ‘state’
[16:04:57.801] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[16:04:57.801] - Launch lazy future ...
[16:04:57.802] Packages needed by the future expression (n = 0): <none>
[16:04:57.802] Packages needed by future strategies (n = 0): <none>
[16:04:57.802] {
[16:04:57.802]     {
[16:04:57.802]         {
[16:04:57.802]             ...future.startTime <- base::Sys.time()
[16:04:57.802]             {
[16:04:57.802]                 {
[16:04:57.802]                   {
[16:04:57.802]                     {
[16:04:57.802]                       base::local({
[16:04:57.802]                         has_future <- base::requireNamespace("future", 
[16:04:57.802]                           quietly = TRUE)
[16:04:57.802]                         if (has_future) {
[16:04:57.802]                           ns <- base::getNamespace("future")
[16:04:57.802]                           version <- ns[[".package"]][["version"]]
[16:04:57.802]                           if (is.null(version)) 
[16:04:57.802]                             version <- utils::packageVersion("future")
[16:04:57.802]                         }
[16:04:57.802]                         else {
[16:04:57.802]                           version <- NULL
[16:04:57.802]                         }
[16:04:57.802]                         if (!has_future || version < "1.8.0") {
[16:04:57.802]                           info <- base::c(r_version = base::gsub("R version ", 
[16:04:57.802]                             "", base::R.version$version.string), 
[16:04:57.802]                             platform = base::sprintf("%s (%s-bit)", 
[16:04:57.802]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:04:57.802]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[16:04:57.802]                               "release", "version")], collapse = " "), 
[16:04:57.802]                             hostname = base::Sys.info()[["nodename"]])
[16:04:57.802]                           info <- base::sprintf("%s: %s", base::names(info), 
[16:04:57.802]                             info)
[16:04:57.802]                           info <- base::paste(info, collapse = "; ")
[16:04:57.802]                           if (!has_future) {
[16:04:57.802]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:04:57.802]                               info)
[16:04:57.802]                           }
[16:04:57.802]                           else {
[16:04:57.802]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:04:57.802]                               info, version)
[16:04:57.802]                           }
[16:04:57.802]                           base::stop(msg)
[16:04:57.802]                         }
[16:04:57.802]                       })
[16:04:57.802]                     }
[16:04:57.802]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[16:04:57.802]                     base::options(mc.cores = 1L)
[16:04:57.802]                   }
[16:04:57.802]                   options(future.plan = NULL)
[16:04:57.802]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:04:57.802]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:04:57.802]                 }
[16:04:57.802]                 ...future.workdir <- getwd()
[16:04:57.802]             }
[16:04:57.802]             ...future.oldOptions <- base::as.list(base::.Options)
[16:04:57.802]             ...future.oldEnvVars <- base::Sys.getenv()
[16:04:57.802]         }
[16:04:57.802]         base::options(future.startup.script = FALSE, future.globals.onMissing = "ignore", 
[16:04:57.802]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:04:57.802]             future.globals.onMissing = "ignore", future.globals.onReference = NULL, 
[16:04:57.802]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:04:57.802]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:04:57.802]             future.stdout.windows.reencode = NULL, width = 80L)
[16:04:57.802]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:04:57.802]             base::names(...future.oldOptions))
[16:04:57.802]     }
[16:04:57.802]     if (FALSE) {
[16:04:57.802]     }
[16:04:57.802]     else {
[16:04:57.802]         if (TRUE) {
[16:04:57.802]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:04:57.802]                 open = "w")
[16:04:57.802]         }
[16:04:57.802]         else {
[16:04:57.802]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:04:57.802]                 windows = "NUL", "/dev/null"), open = "w")
[16:04:57.802]         }
[16:04:57.802]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:04:57.802]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:04:57.802]             base::sink(type = "output", split = FALSE)
[16:04:57.802]             base::close(...future.stdout)
[16:04:57.802]         }, add = TRUE)
[16:04:57.802]     }
[16:04:57.802]     ...future.frame <- base::sys.nframe()
[16:04:57.802]     ...future.conditions <- base::list()
[16:04:57.802]     ...future.rng <- base::globalenv()$.Random.seed
[16:04:57.802]     if (FALSE) {
[16:04:57.802]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:04:57.802]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:04:57.802]     }
[16:04:57.802]     ...future.result <- base::tryCatch({
[16:04:57.802]         base::withCallingHandlers({
[16:04:57.802]             ...future.value <- base::withVisible(base::local({
[16:04:57.802]                 ...future.makeSendCondition <- base::local({
[16:04:57.802]                   sendCondition <- NULL
[16:04:57.802]                   function(frame = 1L) {
[16:04:57.802]                     if (is.function(sendCondition)) 
[16:04:57.802]                       return(sendCondition)
[16:04:57.802]                     ns <- getNamespace("parallel")
[16:04:57.802]                     if (exists("sendData", mode = "function", 
[16:04:57.802]                       envir = ns)) {
[16:04:57.802]                       parallel_sendData <- get("sendData", mode = "function", 
[16:04:57.802]                         envir = ns)
[16:04:57.802]                       envir <- sys.frame(frame)
[16:04:57.802]                       master <- NULL
[16:04:57.802]                       while (!identical(envir, .GlobalEnv) && 
[16:04:57.802]                         !identical(envir, emptyenv())) {
[16:04:57.802]                         if (exists("master", mode = "list", envir = envir, 
[16:04:57.802]                           inherits = FALSE)) {
[16:04:57.802]                           master <- get("master", mode = "list", 
[16:04:57.802]                             envir = envir, inherits = FALSE)
[16:04:57.802]                           if (inherits(master, c("SOCKnode", 
[16:04:57.802]                             "SOCK0node"))) {
[16:04:57.802]                             sendCondition <<- function(cond) {
[16:04:57.802]                               data <- list(type = "VALUE", value = cond, 
[16:04:57.802]                                 success = TRUE)
[16:04:57.802]                               parallel_sendData(master, data)
[16:04:57.802]                             }
[16:04:57.802]                             return(sendCondition)
[16:04:57.802]                           }
[16:04:57.802]                         }
[16:04:57.802]                         frame <- frame + 1L
[16:04:57.802]                         envir <- sys.frame(frame)
[16:04:57.802]                       }
[16:04:57.802]                     }
[16:04:57.802]                     sendCondition <<- function(cond) NULL
[16:04:57.802]                   }
[16:04:57.802]                 })
[16:04:57.802]                 withCallingHandlers({
[16:04:57.802]                   subset(data, x < 3)$y
[16:04:57.802]                 }, immediateCondition = function(cond) {
[16:04:57.802]                   sendCondition <- ...future.makeSendCondition()
[16:04:57.802]                   sendCondition(cond)
[16:04:57.802]                   muffleCondition <- function (cond, pattern = "^muffle") 
[16:04:57.802]                   {
[16:04:57.802]                     inherits <- base::inherits
[16:04:57.802]                     invokeRestart <- base::invokeRestart
[16:04:57.802]                     is.null <- base::is.null
[16:04:57.802]                     muffled <- FALSE
[16:04:57.802]                     if (inherits(cond, "message")) {
[16:04:57.802]                       muffled <- grepl(pattern, "muffleMessage")
[16:04:57.802]                       if (muffled) 
[16:04:57.802]                         invokeRestart("muffleMessage")
[16:04:57.802]                     }
[16:04:57.802]                     else if (inherits(cond, "warning")) {
[16:04:57.802]                       muffled <- grepl(pattern, "muffleWarning")
[16:04:57.802]                       if (muffled) 
[16:04:57.802]                         invokeRestart("muffleWarning")
[16:04:57.802]                     }
[16:04:57.802]                     else if (inherits(cond, "condition")) {
[16:04:57.802]                       if (!is.null(pattern)) {
[16:04:57.802]                         computeRestarts <- base::computeRestarts
[16:04:57.802]                         grepl <- base::grepl
[16:04:57.802]                         restarts <- computeRestarts(cond)
[16:04:57.802]                         for (restart in restarts) {
[16:04:57.802]                           name <- restart$name
[16:04:57.802]                           if (is.null(name)) 
[16:04:57.802]                             next
[16:04:57.802]                           if (!grepl(pattern, name)) 
[16:04:57.802]                             next
[16:04:57.802]                           invokeRestart(restart)
[16:04:57.802]                           muffled <- TRUE
[16:04:57.802]                           break
[16:04:57.802]                         }
[16:04:57.802]                       }
[16:04:57.802]                     }
[16:04:57.802]                     invisible(muffled)
[16:04:57.802]                   }
[16:04:57.802]                   muffleCondition(cond)
[16:04:57.802]                 })
[16:04:57.802]             }))
[16:04:57.802]             future::FutureResult(value = ...future.value$value, 
[16:04:57.802]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:04:57.802]                   ...future.rng), globalenv = if (FALSE) 
[16:04:57.802]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:04:57.802]                     ...future.globalenv.names))
[16:04:57.802]                 else NULL, started = ...future.startTime, version = "1.8")
[16:04:57.802]         }, condition = base::local({
[16:04:57.802]             c <- base::c
[16:04:57.802]             inherits <- base::inherits
[16:04:57.802]             invokeRestart <- base::invokeRestart
[16:04:57.802]             length <- base::length
[16:04:57.802]             list <- base::list
[16:04:57.802]             seq.int <- base::seq.int
[16:04:57.802]             signalCondition <- base::signalCondition
[16:04:57.802]             sys.calls <- base::sys.calls
[16:04:57.802]             `[[` <- base::`[[`
[16:04:57.802]             `+` <- base::`+`
[16:04:57.802]             `<<-` <- base::`<<-`
[16:04:57.802]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:04:57.802]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:04:57.802]                   3L)]
[16:04:57.802]             }
[16:04:57.802]             function(cond) {
[16:04:57.802]                 is_error <- inherits(cond, "error")
[16:04:57.802]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:04:57.802]                   NULL)
[16:04:57.802]                 if (is_error) {
[16:04:57.802]                   sessionInformation <- function() {
[16:04:57.802]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:04:57.802]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:04:57.802]                       search = base::search(), system = base::Sys.info())
[16:04:57.802]                   }
[16:04:57.802]                   ...future.conditions[[length(...future.conditions) + 
[16:04:57.802]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:04:57.802]                     cond$call), session = sessionInformation(), 
[16:04:57.802]                     timestamp = base::Sys.time(), signaled = 0L)
[16:04:57.802]                   signalCondition(cond)
[16:04:57.802]                 }
[16:04:57.802]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:04:57.802]                 "immediateCondition"))) {
[16:04:57.802]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:04:57.802]                   ...future.conditions[[length(...future.conditions) + 
[16:04:57.802]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:04:57.802]                   if (TRUE && !signal) {
[16:04:57.802]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:04:57.802]                     {
[16:04:57.802]                       inherits <- base::inherits
[16:04:57.802]                       invokeRestart <- base::invokeRestart
[16:04:57.802]                       is.null <- base::is.null
[16:04:57.802]                       muffled <- FALSE
[16:04:57.802]                       if (inherits(cond, "message")) {
[16:04:57.802]                         muffled <- grepl(pattern, "muffleMessage")
[16:04:57.802]                         if (muffled) 
[16:04:57.802]                           invokeRestart("muffleMessage")
[16:04:57.802]                       }
[16:04:57.802]                       else if (inherits(cond, "warning")) {
[16:04:57.802]                         muffled <- grepl(pattern, "muffleWarning")
[16:04:57.802]                         if (muffled) 
[16:04:57.802]                           invokeRestart("muffleWarning")
[16:04:57.802]                       }
[16:04:57.802]                       else if (inherits(cond, "condition")) {
[16:04:57.802]                         if (!is.null(pattern)) {
[16:04:57.802]                           computeRestarts <- base::computeRestarts
[16:04:57.802]                           grepl <- base::grepl
[16:04:57.802]                           restarts <- computeRestarts(cond)
[16:04:57.802]                           for (restart in restarts) {
[16:04:57.802]                             name <- restart$name
[16:04:57.802]                             if (is.null(name)) 
[16:04:57.802]                               next
[16:04:57.802]                             if (!grepl(pattern, name)) 
[16:04:57.802]                               next
[16:04:57.802]                             invokeRestart(restart)
[16:04:57.802]                             muffled <- TRUE
[16:04:57.802]                             break
[16:04:57.802]                           }
[16:04:57.802]                         }
[16:04:57.802]                       }
[16:04:57.802]                       invisible(muffled)
[16:04:57.802]                     }
[16:04:57.802]                     muffleCondition(cond, pattern = "^muffle")
[16:04:57.802]                   }
[16:04:57.802]                 }
[16:04:57.802]                 else {
[16:04:57.802]                   if (TRUE) {
[16:04:57.802]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:04:57.802]                     {
[16:04:57.802]                       inherits <- base::inherits
[16:04:57.802]                       invokeRestart <- base::invokeRestart
[16:04:57.802]                       is.null <- base::is.null
[16:04:57.802]                       muffled <- FALSE
[16:04:57.802]                       if (inherits(cond, "message")) {
[16:04:57.802]                         muffled <- grepl(pattern, "muffleMessage")
[16:04:57.802]                         if (muffled) 
[16:04:57.802]                           invokeRestart("muffleMessage")
[16:04:57.802]                       }
[16:04:57.802]                       else if (inherits(cond, "warning")) {
[16:04:57.802]                         muffled <- grepl(pattern, "muffleWarning")
[16:04:57.802]                         if (muffled) 
[16:04:57.802]                           invokeRestart("muffleWarning")
[16:04:57.802]                       }
[16:04:57.802]                       else if (inherits(cond, "condition")) {
[16:04:57.802]                         if (!is.null(pattern)) {
[16:04:57.802]                           computeRestarts <- base::computeRestarts
[16:04:57.802]                           grepl <- base::grepl
[16:04:57.802]                           restarts <- computeRestarts(cond)
[16:04:57.802]                           for (restart in restarts) {
[16:04:57.802]                             name <- restart$name
[16:04:57.802]                             if (is.null(name)) 
[16:04:57.802]                               next
[16:04:57.802]                             if (!grepl(pattern, name)) 
[16:04:57.802]                               next
[16:04:57.802]                             invokeRestart(restart)
[16:04:57.802]                             muffled <- TRUE
[16:04:57.802]                             break
[16:04:57.802]                           }
[16:04:57.802]                         }
[16:04:57.802]                       }
[16:04:57.802]                       invisible(muffled)
[16:04:57.802]                     }
[16:04:57.802]                     muffleCondition(cond, pattern = "^muffle")
[16:04:57.802]                   }
[16:04:57.802]                 }
[16:04:57.802]             }
[16:04:57.802]         }))
[16:04:57.802]     }, error = function(ex) {
[16:04:57.802]         base::structure(base::list(value = NULL, visible = NULL, 
[16:04:57.802]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:04:57.802]                 ...future.rng), started = ...future.startTime, 
[16:04:57.802]             finished = Sys.time(), session_uuid = NA_character_, 
[16:04:57.802]             version = "1.8"), class = "FutureResult")
[16:04:57.802]     }, finally = {
[16:04:57.802]         if (!identical(...future.workdir, getwd())) 
[16:04:57.802]             setwd(...future.workdir)
[16:04:57.802]         {
[16:04:57.802]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:04:57.802]                 ...future.oldOptions$nwarnings <- NULL
[16:04:57.802]             }
[16:04:57.802]             base::options(...future.oldOptions)
[16:04:57.802]             if (.Platform$OS.type == "windows") {
[16:04:57.802]                 old_names <- names(...future.oldEnvVars)
[16:04:57.802]                 envs <- base::Sys.getenv()
[16:04:57.802]                 names <- names(envs)
[16:04:57.802]                 common <- intersect(names, old_names)
[16:04:57.802]                 added <- setdiff(names, old_names)
[16:04:57.802]                 removed <- setdiff(old_names, names)
[16:04:57.802]                 changed <- common[...future.oldEnvVars[common] != 
[16:04:57.802]                   envs[common]]
[16:04:57.802]                 NAMES <- toupper(changed)
[16:04:57.802]                 args <- list()
[16:04:57.802]                 for (kk in seq_along(NAMES)) {
[16:04:57.802]                   name <- changed[[kk]]
[16:04:57.802]                   NAME <- NAMES[[kk]]
[16:04:57.802]                   if (name != NAME && is.element(NAME, old_names)) 
[16:04:57.802]                     next
[16:04:57.802]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:04:57.802]                 }
[16:04:57.802]                 NAMES <- toupper(added)
[16:04:57.802]                 for (kk in seq_along(NAMES)) {
[16:04:57.802]                   name <- added[[kk]]
[16:04:57.802]                   NAME <- NAMES[[kk]]
[16:04:57.802]                   if (name != NAME && is.element(NAME, old_names)) 
[16:04:57.802]                     next
[16:04:57.802]                   args[[name]] <- ""
[16:04:57.802]                 }
[16:04:57.802]                 NAMES <- toupper(removed)
[16:04:57.802]                 for (kk in seq_along(NAMES)) {
[16:04:57.802]                   name <- removed[[kk]]
[16:04:57.802]                   NAME <- NAMES[[kk]]
[16:04:57.802]                   if (name != NAME && is.element(NAME, old_names)) 
[16:04:57.802]                     next
[16:04:57.802]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:04:57.802]                 }
[16:04:57.802]                 if (length(args) > 0) 
[16:04:57.802]                   base::do.call(base::Sys.setenv, args = args)
[16:04:57.802]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:04:57.802]             }
[16:04:57.802]             else {
[16:04:57.802]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:04:57.802]             }
[16:04:57.802]             {
[16:04:57.802]                 if (base::length(...future.futureOptionsAdded) > 
[16:04:57.802]                   0L) {
[16:04:57.802]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:04:57.802]                   base::names(opts) <- ...future.futureOptionsAdded
[16:04:57.802]                   base::options(opts)
[16:04:57.802]                 }
[16:04:57.802]                 {
[16:04:57.802]                   {
[16:04:57.802]                     base::options(mc.cores = ...future.mc.cores.old)
[16:04:57.802]                     NULL
[16:04:57.802]                   }
[16:04:57.802]                   options(future.plan = NULL)
[16:04:57.802]                   if (is.na(NA_character_)) 
[16:04:57.802]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:04:57.802]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:04:57.802]                   future::plan(list(function (..., workers = availableCores(), 
[16:04:57.802]                     lazy = FALSE, rscript_libs = .libPaths(), 
[16:04:57.802]                     envir = parent.frame()) 
[16:04:57.802]                   {
[16:04:57.802]                     if (is.function(workers)) 
[16:04:57.802]                       workers <- workers()
[16:04:57.802]                     workers <- structure(as.integer(workers), 
[16:04:57.802]                       class = class(workers))
[16:04:57.802]                     stop_if_not(length(workers) == 1, is.finite(workers), 
[16:04:57.802]                       workers >= 1)
[16:04:57.802]                     if (workers == 1L && !inherits(workers, "AsIs")) {
[16:04:57.802]                       return(sequential(..., lazy = TRUE, envir = envir))
[16:04:57.802]                     }
[16:04:57.802]                     future <- MultisessionFuture(..., workers = workers, 
[16:04:57.802]                       lazy = lazy, rscript_libs = rscript_libs, 
[16:04:57.802]                       envir = envir)
[16:04:57.802]                     if (!future$lazy) 
[16:04:57.802]                       future <- run(future)
[16:04:57.802]                     invisible(future)
[16:04:57.802]                   }), .cleanup = FALSE, .init = FALSE)
[16:04:57.802]                 }
[16:04:57.802]             }
[16:04:57.802]         }
[16:04:57.802]     })
[16:04:57.802]     if (TRUE) {
[16:04:57.802]         base::sink(type = "output", split = FALSE)
[16:04:57.802]         if (TRUE) {
[16:04:57.802]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:04:57.802]         }
[16:04:57.802]         else {
[16:04:57.802]             ...future.result["stdout"] <- base::list(NULL)
[16:04:57.802]         }
[16:04:57.802]         base::close(...future.stdout)
[16:04:57.802]         ...future.stdout <- NULL
[16:04:57.802]     }
[16:04:57.802]     ...future.result$conditions <- ...future.conditions
[16:04:57.802]     ...future.result$finished <- base::Sys.time()
[16:04:57.802]     ...future.result
[16:04:57.802] }
[16:04:57.806] Exporting 1 global objects (160 bytes) to cluster node #1 ...
[16:04:57.806] Exporting ‘data’ (160 bytes) to cluster node #1 ...
[16:04:57.806] Exporting ‘data’ (160 bytes) to cluster node #1 ... DONE
[16:04:57.806] Exporting 1 global objects (160 bytes) to cluster node #1 ... DONE
[16:04:57.807] MultisessionFuture started
[16:04:57.807] - Launch lazy future ... done
[16:04:57.807] run() for ‘MultisessionFuture’ ... done
[16:04:57.808] result() for ClusterFuture ...
[16:04:57.808] receiveMessageFromWorker() for ClusterFuture ...
[16:04:57.808] - Validating connection of MultisessionFuture
[16:04:57.856] - received message: FutureResult
[16:04:57.856] - Received FutureResult
[16:04:57.857] - Erased future from FutureRegistry
[16:04:57.857] result() for ClusterFuture ...
[16:04:57.857] - result already collected: FutureResult
[16:04:57.857] result() for ClusterFuture ... done
[16:04:57.857] receiveMessageFromWorker() for ClusterFuture ... done
[16:04:57.857] result() for ClusterFuture ... done
[16:04:57.857] result() for ClusterFuture ...
[16:04:57.857] - result already collected: FutureResult
[16:04:57.857] result() for ClusterFuture ... done
[16:04:57.858] plan(): Setting new future strategy stack:
[16:04:57.858] List of future strategies:
[16:04:57.858] 1. sequential:
[16:04:57.858]    - args: function (..., envir = parent.frame())
[16:04:57.858]    - tweaked: FALSE
[16:04:57.858]    - call: plan(list(sequential, strategy))
[16:04:57.858] 2. multisession:
[16:04:57.858]    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[16:04:57.858]    - tweaked: FALSE
[16:04:57.858]    - call: plan(list(sequential, strategy))
[16:04:57.859] plan(): nbrOfWorkers() = 1
[16:04:57.859] getGlobalsAndPackages() ...
Warning: R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘ignore’
[16:04:57.860] Searching for globals...
[16:04:57.866] - globals found: [8] ‘{’, ‘<-’, ‘$’, ‘subset’, ‘data’, ‘<’, ‘x’, ‘%<-%’
[16:04:57.866] Searching for globals ... DONE
[16:04:57.866] Resolving globals: FALSE
[16:04:57.867] The total size of the 1 globals is 160 bytes (160 bytes)
[16:04:57.867] The total size of the 1 globals exported for future expression (‘{; a %<-% subset(data, x < 3)$y; a; }’) is 160 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘data’ (160 bytes of class ‘list’)
[16:04:57.868] - globals: [1] ‘data’
[16:04:57.868] - packages: [1] ‘future’
[16:04:57.868] getGlobalsAndPackages() ... DONE
[16:04:57.868] run() for ‘Future’ ...
[16:04:57.868] - state: ‘created’
[16:04:57.868] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[16:04:57.869] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[16:04:57.869] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[16:04:57.869]   - Field: ‘label’
[16:04:57.869]   - Field: ‘local’
[16:04:57.869]   - Field: ‘owner’
[16:04:57.869]   - Field: ‘envir’
[16:04:57.869]   - Field: ‘packages’
[16:04:57.869]   - Field: ‘gc’
[16:04:57.869]   - Field: ‘conditions’
[16:04:57.869]   - Field: ‘expr’
[16:04:57.870]   - Field: ‘uuid’
[16:04:57.870]   - Field: ‘seed’
[16:04:57.870]   - Field: ‘version’
[16:04:57.870]   - Field: ‘result’
[16:04:57.870]   - Field: ‘asynchronous’
[16:04:57.870]   - Field: ‘calls’
[16:04:57.870]   - Field: ‘globals’
[16:04:57.870]   - Field: ‘stdout’
[16:04:57.870]   - Field: ‘earlySignal’
[16:04:57.870]   - Field: ‘lazy’
[16:04:57.870]   - Field: ‘state’
[16:04:57.871] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[16:04:57.871] - Launch lazy future ...
[16:04:57.871] Packages needed by the future expression (n = 1): ‘future’
[16:04:57.871] Packages needed by future strategies (n = 1): ‘future’
[16:04:57.872] {
[16:04:57.872]     {
[16:04:57.872]         {
[16:04:57.872]             ...future.startTime <- base::Sys.time()
[16:04:57.872]             {
[16:04:57.872]                 {
[16:04:57.872]                   {
[16:04:57.872]                     {
[16:04:57.872]                       base::local({
[16:04:57.872]                         has_future <- base::requireNamespace("future", 
[16:04:57.872]                           quietly = TRUE)
[16:04:57.872]                         if (has_future) {
[16:04:57.872]                           ns <- base::getNamespace("future")
[16:04:57.872]                           version <- ns[[".package"]][["version"]]
[16:04:57.872]                           if (is.null(version)) 
[16:04:57.872]                             version <- utils::packageVersion("future")
[16:04:57.872]                         }
[16:04:57.872]                         else {
[16:04:57.872]                           version <- NULL
[16:04:57.872]                         }
[16:04:57.872]                         if (!has_future || version < "1.8.0") {
[16:04:57.872]                           info <- base::c(r_version = base::gsub("R version ", 
[16:04:57.872]                             "", base::R.version$version.string), 
[16:04:57.872]                             platform = base::sprintf("%s (%s-bit)", 
[16:04:57.872]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:04:57.872]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[16:04:57.872]                               "release", "version")], collapse = " "), 
[16:04:57.872]                             hostname = base::Sys.info()[["nodename"]])
[16:04:57.872]                           info <- base::sprintf("%s: %s", base::names(info), 
[16:04:57.872]                             info)
[16:04:57.872]                           info <- base::paste(info, collapse = "; ")
[16:04:57.872]                           if (!has_future) {
[16:04:57.872]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:04:57.872]                               info)
[16:04:57.872]                           }
[16:04:57.872]                           else {
[16:04:57.872]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:04:57.872]                               info, version)
[16:04:57.872]                           }
[16:04:57.872]                           base::stop(msg)
[16:04:57.872]                         }
[16:04:57.872]                       })
[16:04:57.872]                     }
[16:04:57.872]                     base::local({
[16:04:57.872]                       for (pkg in "future") {
[16:04:57.872]                         base::loadNamespace(pkg)
[16:04:57.872]                         base::library(pkg, character.only = TRUE)
[16:04:57.872]                       }
[16:04:57.872]                     })
[16:04:57.872]                   }
[16:04:57.872]                   options(future.plan = NULL)
[16:04:57.872]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:04:57.872]                   future::plan(list(function (..., workers = availableCores(), 
[16:04:57.872]                     lazy = FALSE, rscript_libs = .libPaths(), 
[16:04:57.872]                     envir = parent.frame()) 
[16:04:57.872]                   {
[16:04:57.872]                     if (is.function(workers)) 
[16:04:57.872]                       workers <- workers()
[16:04:57.872]                     workers <- structure(as.integer(workers), 
[16:04:57.872]                       class = class(workers))
[16:04:57.872]                     stop_if_not(length(workers) == 1, is.finite(workers), 
[16:04:57.872]                       workers >= 1)
[16:04:57.872]                     if (workers == 1L && !inherits(workers, "AsIs")) {
[16:04:57.872]                       return(sequential(..., lazy = TRUE, envir = envir))
[16:04:57.872]                     }
[16:04:57.872]                     future <- MultisessionFuture(..., workers = workers, 
[16:04:57.872]                       lazy = lazy, rscript_libs = rscript_libs, 
[16:04:57.872]                       envir = envir)
[16:04:57.872]                     if (!future$lazy) 
[16:04:57.872]                       future <- run(future)
[16:04:57.872]                     invisible(future)
[16:04:57.872]                   }), .cleanup = FALSE, .init = FALSE)
[16:04:57.872]                 }
[16:04:57.872]                 ...future.workdir <- getwd()
[16:04:57.872]             }
[16:04:57.872]             ...future.oldOptions <- base::as.list(base::.Options)
[16:04:57.872]             ...future.oldEnvVars <- base::Sys.getenv()
[16:04:57.872]         }
[16:04:57.872]         base::options(future.startup.script = FALSE, future.globals.onMissing = "ignore", 
[16:04:57.872]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:04:57.872]             future.globals.onMissing = "ignore", future.globals.onReference = NULL, 
[16:04:57.872]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:04:57.872]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:04:57.872]             future.stdout.windows.reencode = NULL, width = 80L)
[16:04:57.872]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:04:57.872]             base::names(...future.oldOptions))
[16:04:57.872]     }
[16:04:57.872]     if (FALSE) {
[16:04:57.872]     }
[16:04:57.872]     else {
[16:04:57.872]         if (TRUE) {
[16:04:57.872]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:04:57.872]                 open = "w")
[16:04:57.872]         }
[16:04:57.872]         else {
[16:04:57.872]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:04:57.872]                 windows = "NUL", "/dev/null"), open = "w")
[16:04:57.872]         }
[16:04:57.872]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:04:57.872]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:04:57.872]             base::sink(type = "output", split = FALSE)
[16:04:57.872]             base::close(...future.stdout)
[16:04:57.872]         }, add = TRUE)
[16:04:57.872]     }
[16:04:57.872]     ...future.frame <- base::sys.nframe()
[16:04:57.872]     ...future.conditions <- base::list()
[16:04:57.872]     ...future.rng <- base::globalenv()$.Random.seed
[16:04:57.872]     if (FALSE) {
[16:04:57.872]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:04:57.872]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:04:57.872]     }
[16:04:57.872]     ...future.result <- base::tryCatch({
[16:04:57.872]         base::withCallingHandlers({
[16:04:57.872]             ...future.value <- base::withVisible(base::local({
[16:04:57.872]                 a %<-% subset(data, x < 3)$y
[16:04:57.872]                 a
[16:04:57.872]             }))
[16:04:57.872]             future::FutureResult(value = ...future.value$value, 
[16:04:57.872]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:04:57.872]                   ...future.rng), globalenv = if (FALSE) 
[16:04:57.872]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:04:57.872]                     ...future.globalenv.names))
[16:04:57.872]                 else NULL, started = ...future.startTime, version = "1.8")
[16:04:57.872]         }, condition = base::local({
[16:04:57.872]             c <- base::c
[16:04:57.872]             inherits <- base::inherits
[16:04:57.872]             invokeRestart <- base::invokeRestart
[16:04:57.872]             length <- base::length
[16:04:57.872]             list <- base::list
[16:04:57.872]             seq.int <- base::seq.int
[16:04:57.872]             signalCondition <- base::signalCondition
[16:04:57.872]             sys.calls <- base::sys.calls
[16:04:57.872]             `[[` <- base::`[[`
[16:04:57.872]             `+` <- base::`+`
[16:04:57.872]             `<<-` <- base::`<<-`
[16:04:57.872]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:04:57.872]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:04:57.872]                   3L)]
[16:04:57.872]             }
[16:04:57.872]             function(cond) {
[16:04:57.872]                 is_error <- inherits(cond, "error")
[16:04:57.872]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:04:57.872]                   NULL)
[16:04:57.872]                 if (is_error) {
[16:04:57.872]                   sessionInformation <- function() {
[16:04:57.872]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:04:57.872]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:04:57.872]                       search = base::search(), system = base::Sys.info())
[16:04:57.872]                   }
[16:04:57.872]                   ...future.conditions[[length(...future.conditions) + 
[16:04:57.872]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:04:57.872]                     cond$call), session = sessionInformation(), 
[16:04:57.872]                     timestamp = base::Sys.time(), signaled = 0L)
[16:04:57.872]                   signalCondition(cond)
[16:04:57.872]                 }
[16:04:57.872]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:04:57.872]                 "immediateCondition"))) {
[16:04:57.872]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:04:57.872]                   ...future.conditions[[length(...future.conditions) + 
[16:04:57.872]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:04:57.872]                   if (TRUE && !signal) {
[16:04:57.872]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:04:57.872]                     {
[16:04:57.872]                       inherits <- base::inherits
[16:04:57.872]                       invokeRestart <- base::invokeRestart
[16:04:57.872]                       is.null <- base::is.null
[16:04:57.872]                       muffled <- FALSE
[16:04:57.872]                       if (inherits(cond, "message")) {
[16:04:57.872]                         muffled <- grepl(pattern, "muffleMessage")
[16:04:57.872]                         if (muffled) 
[16:04:57.872]                           invokeRestart("muffleMessage")
[16:04:57.872]                       }
[16:04:57.872]                       else if (inherits(cond, "warning")) {
[16:04:57.872]                         muffled <- grepl(pattern, "muffleWarning")
[16:04:57.872]                         if (muffled) 
[16:04:57.872]                           invokeRestart("muffleWarning")
[16:04:57.872]                       }
[16:04:57.872]                       else if (inherits(cond, "condition")) {
[16:04:57.872]                         if (!is.null(pattern)) {
[16:04:57.872]                           computeRestarts <- base::computeRestarts
[16:04:57.872]                           grepl <- base::grepl
[16:04:57.872]                           restarts <- computeRestarts(cond)
[16:04:57.872]                           for (restart in restarts) {
[16:04:57.872]                             name <- restart$name
[16:04:57.872]                             if (is.null(name)) 
[16:04:57.872]                               next
[16:04:57.872]                             if (!grepl(pattern, name)) 
[16:04:57.872]                               next
[16:04:57.872]                             invokeRestart(restart)
[16:04:57.872]                             muffled <- TRUE
[16:04:57.872]                             break
[16:04:57.872]                           }
[16:04:57.872]                         }
[16:04:57.872]                       }
[16:04:57.872]                       invisible(muffled)
[16:04:57.872]                     }
[16:04:57.872]                     muffleCondition(cond, pattern = "^muffle")
[16:04:57.872]                   }
[16:04:57.872]                 }
[16:04:57.872]                 else {
[16:04:57.872]                   if (TRUE) {
[16:04:57.872]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:04:57.872]                     {
[16:04:57.872]                       inherits <- base::inherits
[16:04:57.872]                       invokeRestart <- base::invokeRestart
[16:04:57.872]                       is.null <- base::is.null
[16:04:57.872]                       muffled <- FALSE
[16:04:57.872]                       if (inherits(cond, "message")) {
[16:04:57.872]                         muffled <- grepl(pattern, "muffleMessage")
[16:04:57.872]                         if (muffled) 
[16:04:57.872]                           invokeRestart("muffleMessage")
[16:04:57.872]                       }
[16:04:57.872]                       else if (inherits(cond, "warning")) {
[16:04:57.872]                         muffled <- grepl(pattern, "muffleWarning")
[16:04:57.872]                         if (muffled) 
[16:04:57.872]                           invokeRestart("muffleWarning")
[16:04:57.872]                       }
[16:04:57.872]                       else if (inherits(cond, "condition")) {
[16:04:57.872]                         if (!is.null(pattern)) {
[16:04:57.872]                           computeRestarts <- base::computeRestarts
[16:04:57.872]                           grepl <- base::grepl
[16:04:57.872]                           restarts <- computeRestarts(cond)
[16:04:57.872]                           for (restart in restarts) {
[16:04:57.872]                             name <- restart$name
[16:04:57.872]                             if (is.null(name)) 
[16:04:57.872]                               next
[16:04:57.872]                             if (!grepl(pattern, name)) 
[16:04:57.872]                               next
[16:04:57.872]                             invokeRestart(restart)
[16:04:57.872]                             muffled <- TRUE
[16:04:57.872]                             break
[16:04:57.872]                           }
[16:04:57.872]                         }
[16:04:57.872]                       }
[16:04:57.872]                       invisible(muffled)
[16:04:57.872]                     }
[16:04:57.872]                     muffleCondition(cond, pattern = "^muffle")
[16:04:57.872]                   }
[16:04:57.872]                 }
[16:04:57.872]             }
[16:04:57.872]         }))
[16:04:57.872]     }, error = function(ex) {
[16:04:57.872]         base::structure(base::list(value = NULL, visible = NULL, 
[16:04:57.872]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:04:57.872]                 ...future.rng), started = ...future.startTime, 
[16:04:57.872]             finished = Sys.time(), session_uuid = NA_character_, 
[16:04:57.872]             version = "1.8"), class = "FutureResult")
[16:04:57.872]     }, finally = {
[16:04:57.872]         if (!identical(...future.workdir, getwd())) 
[16:04:57.872]             setwd(...future.workdir)
[16:04:57.872]         {
[16:04:57.872]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:04:57.872]                 ...future.oldOptions$nwarnings <- NULL
[16:04:57.872]             }
[16:04:57.872]             base::options(...future.oldOptions)
[16:04:57.872]             if (.Platform$OS.type == "windows") {
[16:04:57.872]                 old_names <- names(...future.oldEnvVars)
[16:04:57.872]                 envs <- base::Sys.getenv()
[16:04:57.872]                 names <- names(envs)
[16:04:57.872]                 common <- intersect(names, old_names)
[16:04:57.872]                 added <- setdiff(names, old_names)
[16:04:57.872]                 removed <- setdiff(old_names, names)
[16:04:57.872]                 changed <- common[...future.oldEnvVars[common] != 
[16:04:57.872]                   envs[common]]
[16:04:57.872]                 NAMES <- toupper(changed)
[16:04:57.872]                 args <- list()
[16:04:57.872]                 for (kk in seq_along(NAMES)) {
[16:04:57.872]                   name <- changed[[kk]]
[16:04:57.872]                   NAME <- NAMES[[kk]]
[16:04:57.872]                   if (name != NAME && is.element(NAME, old_names)) 
[16:04:57.872]                     next
[16:04:57.872]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:04:57.872]                 }
[16:04:57.872]                 NAMES <- toupper(added)
[16:04:57.872]                 for (kk in seq_along(NAMES)) {
[16:04:57.872]                   name <- added[[kk]]
[16:04:57.872]                   NAME <- NAMES[[kk]]
[16:04:57.872]                   if (name != NAME && is.element(NAME, old_names)) 
[16:04:57.872]                     next
[16:04:57.872]                   args[[name]] <- ""
[16:04:57.872]                 }
[16:04:57.872]                 NAMES <- toupper(removed)
[16:04:57.872]                 for (kk in seq_along(NAMES)) {
[16:04:57.872]                   name <- removed[[kk]]
[16:04:57.872]                   NAME <- NAMES[[kk]]
[16:04:57.872]                   if (name != NAME && is.element(NAME, old_names)) 
[16:04:57.872]                     next
[16:04:57.872]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:04:57.872]                 }
[16:04:57.872]                 if (length(args) > 0) 
[16:04:57.872]                   base::do.call(base::Sys.setenv, args = args)
[16:04:57.872]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:04:57.872]             }
[16:04:57.872]             else {
[16:04:57.872]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:04:57.872]             }
[16:04:57.872]             {
[16:04:57.872]                 if (base::length(...future.futureOptionsAdded) > 
[16:04:57.872]                   0L) {
[16:04:57.872]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:04:57.872]                   base::names(opts) <- ...future.futureOptionsAdded
[16:04:57.872]                   base::options(opts)
[16:04:57.872]                 }
[16:04:57.872]                 {
[16:04:57.872]                   {
[16:04:57.872]                     NULL
[16:04:57.872]                     RNGkind("Mersenne-Twister")
[16:04:57.872]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[16:04:57.872]                       inherits = FALSE)
[16:04:57.872]                   }
[16:04:57.872]                   options(future.plan = NULL)
[16:04:57.872]                   if (is.na(NA_character_)) 
[16:04:57.872]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:04:57.872]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:04:57.872]                   future::plan(list(function (..., envir = parent.frame()) 
[16:04:57.872]                   {
[16:04:57.872]                     future <- SequentialFuture(..., envir = envir)
[16:04:57.872]                     if (!future$lazy) 
[16:04:57.872]                       future <- run(future)
[16:04:57.872]                     invisible(future)
[16:04:57.872]                   }, function (..., workers = availableCores(), 
[16:04:57.872]                     lazy = FALSE, rscript_libs = .libPaths(), 
[16:04:57.872]                     envir = parent.frame()) 
[16:04:57.872]                   {
[16:04:57.872]                     if (is.function(workers)) 
[16:04:57.872]                       workers <- workers()
[16:04:57.872]                     workers <- structure(as.integer(workers), 
[16:04:57.872]                       class = class(workers))
[16:04:57.872]                     stop_if_not(length(workers) == 1, is.finite(workers), 
[16:04:57.872]                       workers >= 1)
[16:04:57.872]                     if (workers == 1L && !inherits(workers, "AsIs")) {
[16:04:57.872]                       return(sequential(..., lazy = TRUE, envir = envir))
[16:04:57.872]                     }
[16:04:57.872]                     future <- MultisessionFuture(..., workers = workers, 
[16:04:57.872]                       lazy = lazy, rscript_libs = rscript_libs, 
[16:04:57.872]                       envir = envir)
[16:04:57.872]                     if (!future$lazy) 
[16:04:57.872]                       future <- run(future)
[16:04:57.872]                     invisible(future)
[16:04:57.872]                   }), .cleanup = FALSE, .init = FALSE)
[16:04:57.872]                 }
[16:04:57.872]             }
[16:04:57.872]         }
[16:04:57.872]     })
[16:04:57.872]     if (TRUE) {
[16:04:57.872]         base::sink(type = "output", split = FALSE)
[16:04:57.872]         if (TRUE) {
[16:04:57.872]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:04:57.872]         }
[16:04:57.872]         else {
[16:04:57.872]             ...future.result["stdout"] <- base::list(NULL)
[16:04:57.872]         }
[16:04:57.872]         base::close(...future.stdout)
[16:04:57.872]         ...future.stdout <- NULL
[16:04:57.872]     }
[16:04:57.872]     ...future.result$conditions <- ...future.conditions
[16:04:57.872]     ...future.result$finished <- base::Sys.time()
[16:04:57.872]     ...future.result
[16:04:57.872] }
[16:04:57.873] assign_globals() ...
[16:04:57.874] List of 1
[16:04:57.874]  $ data:'data.frame':	5 obs. of  2 variables:
[16:04:57.874]   ..$ x: int [1:5] 1 2 3 4 5
[16:04:57.874]   ..$ y: int [1:5] 1 2 3 4 5
[16:04:57.874]  - attr(*, "where")=List of 1
[16:04:57.874]   ..$ data:<environment: R_EmptyEnv> 
[16:04:57.874]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[16:04:57.874]  - attr(*, "resolved")= logi FALSE
[16:04:57.874]  - attr(*, "total_size")= num 160
[16:04:57.874]  - attr(*, "already-done")= logi TRUE
[16:04:57.878] - copied ‘data’ to environment
[16:04:57.878] assign_globals() ... done
[16:04:57.878] plan(): Setting new future strategy stack:
[16:04:57.879] List of future strategies:
[16:04:57.879] 1. multisession:
[16:04:57.879]    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[16:04:57.879]    - tweaked: FALSE
[16:04:57.879]    - call: plan(list(sequential, strategy))
[16:04:57.883] plan(): nbrOfWorkers() = 2
[16:04:58.343] plan(): Setting new future strategy stack:
[16:04:58.343] List of future strategies:
[16:04:58.343] 1. sequential:
[16:04:58.343]    - args: function (..., envir = parent.frame())
[16:04:58.343]    - tweaked: FALSE
[16:04:58.343]    - call: plan(list(sequential, strategy))
[16:04:58.343] 2. multisession:
[16:04:58.343]    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[16:04:58.343]    - tweaked: FALSE
[16:04:58.343]    - call: plan(list(sequential, strategy))
[16:04:58.343] plan(): nbrOfWorkers() = 1
[16:04:58.343] SequentialFuture started (and completed)
[16:04:58.344] signalConditions() ...
[16:04:58.344]  - include = ‘immediateCondition’
[16:04:58.344]  - exclude = 
[16:04:58.344]  - resignal = FALSE
[16:04:58.344]  - Number of conditions: 93
[16:04:58.344] signalConditions() ... done
[16:04:58.344] - Launch lazy future ... done
[16:04:58.344] run() for ‘SequentialFuture’ ... done
[16:04:58.344] signalConditions() ...
[16:04:58.344]  - include = ‘immediateCondition’
[16:04:58.345]  - exclude = 
[16:04:58.345]  - resignal = FALSE
[16:04:58.345]  - Number of conditions: 93
[16:04:58.345] signalConditions() ... done
[16:04:58.345] Future state: ‘finished’
[16:04:58.345] signalConditions() ...
[16:04:58.345]  - include = ‘condition’
[16:04:58.345]  - exclude = ‘immediateCondition’
[16:04:58.345]  - resignal = TRUE
[16:04:58.345]  - Number of conditions: 93
[16:04:58.346]  - Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[16:04:57.883] getGlobalsAndPackages() ...
[16:04:58.346]  - Condition #2: ‘deprecatedWarning’, ‘warning’, ‘condition’
Warning: R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘ignore’
[16:04:58.346]  - Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[16:04:57.896] Searching for globals...
[16:04:58.346]  - Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[16:04:57.897] - globals found: [5] ‘$’, ‘subset’, ‘data’, ‘<’, ‘x’
[16:04:58.346]  - Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[16:04:57.898] Searching for globals ... DONE
[16:04:58.346]  - Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[16:04:57.898] Resolving globals: FALSE
[16:04:58.346]  - Condition #7: ‘simpleMessage’, ‘message’, ‘condition’
[16:04:57.898] The total size of the 1 globals is 160 bytes (160 bytes)
[16:04:58.346]  - Condition #8: ‘simpleMessage’, ‘message’, ‘condition’
[16:04:57.899] The total size of the 1 globals exported for future expression (‘subset(data, x < 3)$y’) is 160 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘data’ (160 bytes of class ‘list’)
[16:04:58.347]  - Condition #9: ‘simpleMessage’, ‘message’, ‘condition’
[16:04:57.899] - globals: [1] ‘data’
[16:04:58.347]  - Condition #10: ‘simpleMessage’, ‘message’, ‘condition’
[16:04:57.899] 
[16:04:58.347]  - Condition #11: ‘simpleMessage’, ‘message’, ‘condition’
[16:04:57.899] getGlobalsAndPackages() ... DONE
[16:04:58.347]  - Condition #12: ‘simpleMessage’, ‘message’, ‘condition’
[16:04:57.899] run() for ‘Future’ ...
[16:04:58.347]  - Condition #13: ‘simpleMessage’, ‘message’, ‘condition’
[16:04:57.899] - state: ‘created’
[16:04:58.347]  - Condition #14: ‘simpleMessage’, ‘message’, ‘condition’
[16:04:57.900] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[16:04:58.347]  - Condition #15: ‘simpleMessage’, ‘message’, ‘condition’
[16:04:57.903] [local output] makeClusterPSOCK() ...
[16:04:58.348]  - Condition #16: ‘simpleMessage’, ‘message’, ‘condition’
[16:04:57.907] [local output] Workers: [n = 2] ‘localhost’, ‘localhost’
[16:04:58.348]  - Condition #17: ‘simpleMessage’, ‘message’, ‘condition’
[16:04:57.907] [local output] Base port: 11736
[16:04:58.348]  - Condition #18: ‘simpleMessage’, ‘message’, ‘condition’
[16:04:57.907] [local output] Getting setup options for 2 cluster nodes ...
[16:04:58.348]  - Condition #19: ‘simpleMessage’, ‘message’, ‘condition’
[16:04:57.907] [local output]  - Node 1 of 2 ...
[16:04:58.348]  - Condition #20: ‘simpleMessage’, ‘message’, ‘condition’
[16:04:57.908] [local output] localMachine=TRUE => revtunnel=FALSE

[16:04:58.348]  - Condition #21: ‘simpleMessage’, ‘message’, ‘condition’
[16:04:57.908] [local output] Rscript port: 11736

[16:04:58.348]  - Condition #22: ‘simpleMessage’, ‘message’, ‘condition’
[16:04:57.909] [local output]  - Node 2 of 2 ...
[16:04:58.348]  - Condition #23: ‘simpleMessage’, ‘message’, ‘condition’
[16:04:57.909] [local output] localMachine=TRUE => revtunnel=FALSE

[16:04:58.349]  - Condition #24: ‘simpleMessage’, ‘message’, ‘condition’
[16:04:57.910] [local output] Rscript port: 11736

[16:04:58.349]  - Condition #25: ‘simpleMessage’, ‘message’, ‘condition’
[16:04:57.910] [local output] Getting setup options for 2 cluster nodes ... done
[16:04:58.349]  - Condition #26: ‘simpleMessage’, ‘message’, ‘condition’
[16:04:57.910] [local output]  - Parallel setup requested for some PSOCK nodes
[16:04:58.349]  - Condition #27: ‘simpleMessage’, ‘message’, ‘condition’
[16:04:57.910] [local output] Setting up PSOCK nodes in parallel
[16:04:58.349]  - Condition #28: ‘simpleMessage’, ‘message’, ‘condition’
[16:04:57.910] List of 36
[16:04:57.910]  $ worker          : chr "localhost"
[16:04:57.910]   ..- attr(*, "localhost")= logi TRUE
[16:04:57.910]  $ master          : chr "localhost"
[16:04:57.910]  $ port            : int 11736
[16:04:57.910]  $ connectTimeout  : num 120
[16:04:57.910]  $ timeout         : num 2592000
[16:04:57.910]  $ rscript         : chr "'/usr/local/lib/R/bin/Rscript'"
[16:04:57.910]  $ homogeneous     : logi TRUE
[16:04:57.910]  $ rscript_args    : chr "--default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),fi"| __truncated__
[16:04:57.910]  $ rscript_envs    : NULL
[16:04:57.910]  $ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[16:04:57.910]  $ rscript_startup : NULL
[16:04:57.910]  $ rscript_sh      : chr "sh"
[16:04:57.910]  $ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[16:04:57.910]  $ methods         : logi TRUE
[16:04:57.910]  $ socketOptions   : chr "no-delay"
[16:04:57.910]  $ useXDR          : logi FALSE
[16:04:57.910]  $ outfile         : chr "/dev/null"
[16:04:57.910]  $ renice          : int NA
[16:04:57.910]  $ rshcmd          : NULL
[16:04:57.910]  $ user            : chr(0) 
[16:04:57.910]  $ revtunnel       : logi FALSE
[16:04:57.910]  $ rshlogfile      : NULL
[16:04:57.910]  $ rshopts         : chr(0) 
[16:04:57.910]  $ rank            : int 1
[16:04:57.910]  $ manual          : logi FALSE
[16:04:57.910]  $ dryrun          : logi FALSE
[16:04:57.910]  $ quiet           : logi FALSE
[16:04:57.910]  $ setup_strategy  : chr "parallel"
[16:04:57.910]  $ local_cmd       : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[16:04:57.910]  $ pidfile         : chr "/tmp/RtmpDZPjQ0/worker.rank=1.parallelly.parent=84975.14bef4955a1f7.pid"
[16:04:57.910]  $ rshcmd_label    : NULL
[16:04:57.910]  $ rsh_call        : NULL
[16:04:57.910]  $ cmd             : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[16:04:57.910]  $ localMachine    : logi TRUE
[16:04:57.910]  $ make_fcn        :function (worker = getOption2("parallelly.localhost.hostname", "localhost"), 
[16:04:57.910]     master = NULL, port, connectTimeout = getOption2("parallelly.makeNodePSOCK.connectTimeout", 
[16:04:57.910]         2 * 60), timeout = getOption2("parallelly.makeNodePSOCK.timeout", 
[16:04:57.910]         30 * 24 * 60 * 60), rscript = NULL, homogeneous = NULL, rscript_args = NULL, 
[16:04:57.910]     rscript_envs = NULL, rscript_libs = NULL, rscript_startup = NULL, rscript_sh = c("auto", 
[16:04:57.910]         "cmd", "sh"), default_packages = c("datasets", "utils", "grDevices", 
[16:04:57.910]         "graphics", "stats", if (methods) "methods"), methods = TRUE, socketOptions = getOption2("parallelly.makeNodePSOCK.socketOptions", 
[16:04:57.910]         "no-delay"), useXDR = getOption2("parallelly.makeNodePSOCK.useXDR", 
[16:04:57.910]         FALSE), outfile = "/dev/null", renice = NA_integer_, rshcmd = getOption2("parallelly.makeNodePSOCK.rshcmd", 
[16:04:57.910]         NULL), user = NULL, revtunnel = NA, rshlogfile = NULL, rshopts = getOption2("parallelly.makeNodePSOCK.rshopts", 
[16:04:57.910]         NULL), rank = 1L, manual = FALSE, dryrun = FALSE, quiet = FALSE, 
[16:04:57.910]     setup_strategy = getOption2("parallelly.makeNodePSOCK.setup_strategy", 
[16:04:57.910]         "parallel"), action = c("launch", "options"), verbose = FALSE)  
[16:04:57.910]  $ arguments       :List of 28
[16:04:57.910]   ..$ worker          : chr "localhost"
[16:04:57.910]   ..$ master          : NULL
[16:04:57.910]   ..$ port            : int 11736
[16:04:57.910]   ..$ connectTimeout  : num 120
[16:04:57.910]   ..$ timeout         : num 2592000
[16:04:57.910]   ..$ rscript         : NULL
[16:04:57.910]   ..$ homogeneous     : NULL
[16:04:57.910]   ..$ rscript_args    : NULL
[16:04:57.910]   ..$ rscript_envs    : NULL
[16:04:57.910]   ..$ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[16:04:57.910]   ..$ rscript_startup : NULL
[16:04:57.910]   ..$ rscript_sh      : chr [1:3] "auto" "cmd" "sh"
[16:04:57.910]   ..$ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[16:04:57.910]   ..$ methods         : logi TRUE
[16:04:57.910]   ..$ socketOptions   : chr "no-delay"
[16:04:57.910]   ..$ useXDR          : logi FALSE
[16:04:57.910]   ..$ outfile         : chr "/dev/null"
[16:04:57.910]   ..$ renice          : int NA
[16:04:57.910]   ..$ rshcmd          : NULL
[16:04:57.910]   ..$ user            : NULL
[16:04:57.910]   ..$ revtunnel       : logi NA
[16:04:57.910]   ..$ rshlogfile      : NULL
[16:04:57.910]   ..$ rshopts         : NULL
[16:04:57.910]   ..$ rank            : int 1
[16:04:57.910]   ..$ manual          : logi FALSE
[16:04:57.910]   ..$ dryrun          : logi FALSE
[16:04:57.910]   ..$ quiet           : logi FALSE
[16:04:57.910]   ..$ setup_strategy  : chr "parallel"
[16:04:57.910]  - attr(*, "class")= chr [1:2] "makeNodePSOCKOptions" "makeNodeOptions"
[16:04:58.349]  - Condition #29: ‘simpleMessage’, ‘message’, ‘condition’
[16:04:57.928] [local output] System call to launch all workers:
[16:04:58.349]  - Condition #30: ‘simpleMessage’, ‘message’, ‘condition’
[16:04:57.928] [local output] '/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/RtmpDZPjQ0/worker.rank=1.parallelly.parent=84975.14bef4955a1f7.pid")), silent = TRUE)' -e 'options(socketOptions = "no-delay")' -e '.libPaths(c("/usr/local/lib/R/site-library","/usr/local/lib/R/library"))' -e 'workRSOCK <- tryCatch(parallel:::.workRSOCK, error=function(e) parallel:::.slaveRSOCK); workRSOCK()' MASTER=localhost PORT=11736 OUT=/dev/null TIMEOUT=2592000 XDR=FALSE SETUPTIMEOUT=120 SETUPSTRATEGY=parallel
[16:04:58.349]  - Condition #31: ‘simpleMessage’, ‘message’, ‘condition’
[16:04:57.928] [local output] Starting PSOCK main server
[16:04:58.350]  - Condition #32: ‘simpleMessage’, ‘message’, ‘condition’
[16:04:57.929] [local output] Workers launched
[16:04:58.350]  - Condition #33: ‘simpleMessage’, ‘message’, ‘condition’
[16:04:57.929] [local output] Waiting for workers to connect back
[16:04:58.350]  - Condition #34: ‘simpleMessage’, ‘message’, ‘condition’
[16:04:57.929]  - [local output] 0 workers out of 2 ready
[16:04:58.350]  - Condition #35: ‘simpleMessage’, ‘message’, ‘condition’
[16:04:58.172]  - [local output] 0 workers out of 2 ready
[16:04:58.350]  - Condition #36: ‘simpleMessage’, ‘message’, ‘condition’
[16:04:58.173]  - [local output] 1 workers out of 2 ready
[16:04:58.350]  - Condition #37: ‘simpleMessage’, ‘message’, ‘condition’
[16:04:58.177]  - [local output] 1 workers out of 2 ready
[16:04:58.350]  - Condition #38: ‘simpleMessage’, ‘message’, ‘condition’
[16:04:58.178]  - [local output] 2 workers out of 2 ready
[16:04:58.350]  - Condition #39: ‘simpleMessage’, ‘message’, ‘condition’
[16:04:58.178] [local output] Launching of workers completed
[16:04:58.351]  - Condition #40: ‘simpleMessage’, ‘message’, ‘condition’
[16:04:58.178] [local output] Collecting session information from workers
[16:04:58.351]  - Condition #41: ‘simpleMessage’, ‘message’, ‘condition’
[16:04:58.179] [local output]  - Worker #1 of 2
[16:04:58.351]  - Condition #42: ‘simpleMessage’, ‘message’, ‘condition’
[16:04:58.179] [local output]  - Worker #2 of 2
[16:04:58.351]  - Condition #43: ‘simpleMessage’, ‘message’, ‘condition’
[16:04:58.180] [local output] makeClusterPSOCK() ... done
[16:04:58.351]  - Condition #44: ‘simpleMessage’, ‘message’, ‘condition’
[16:04:58.190] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[16:04:58.351]  - Condition #45: ‘simpleMessage’, ‘message’, ‘condition’
[16:04:58.190] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[16:04:58.351]  - Condition #46: ‘simpleMessage’, ‘message’, ‘condition’
[16:04:58.190]   - Field: ‘node’
[16:04:58.352]  - Condition #47: ‘simpleMessage’, ‘message’, ‘condition’
[16:04:58.190]   - Field: ‘label’
[16:04:58.352]  - Condition #48: ‘simpleMessage’, ‘message’, ‘condition’
[16:04:58.190]   - Field: ‘local’
[16:04:58.352]  - Condition #49: ‘simpleMessage’, ‘message’, ‘condition’
[16:04:58.190]   - Field: ‘owner’
[16:04:58.352]  - Condition #50: ‘simpleMessage’, ‘message’, ‘condition’
[16:04:58.191]   - Field: ‘envir’
[16:04:58.352]  - Condition #51: ‘simpleMessage’, ‘message’, ‘condition’
[16:04:58.191]   - Field: ‘workers’
[16:04:58.352]  - Condition #52: ‘simpleMessage’, ‘message’, ‘condition’
[16:04:58.191]   - Field: ‘packages’
[16:04:58.352]  - Condition #53: ‘simpleMessage’, ‘message’, ‘condition’
[16:04:58.191]   - Field: ‘gc’
[16:04:58.352]  - Condition #54: ‘simpleMessage’, ‘message’, ‘condition’
[16:04:58.191]   - Field: ‘conditions’
[16:04:58.353]  - Condition #55: ‘simpleMessage’, ‘message’, ‘condition’
[16:04:58.191]   - Field: ‘persistent’
[16:04:58.353]  - Condition #56: ‘simpleMessage’, ‘message’, ‘condition’
[16:04:58.191]   - Field: ‘expr’
[16:04:58.353]  - Condition #57: ‘simpleMessage’, ‘message’, ‘condition’
[16:04:58.191]   - Field: ‘uuid’
[16:04:58.353]  - Condition #58: ‘simpleMessage’, ‘message’, ‘condition’
[16:04:58.191]   - Field: ‘seed’
[16:04:58.353]  - Condition #59: ‘simpleMessage’, ‘message’, ‘condition’
[16:04:58.192]   - Field: ‘version’
[16:04:58.353]  - Condition #60: ‘simpleMessage’, ‘message’, ‘condition’
[16:04:58.192]   - Field: ‘result’
[16:04:58.353]  - Condition #61: ‘simpleMessage’, ‘message’, ‘condition’
[16:04:58.192]   - Field: ‘asynchronous’
[16:04:58.353]  - Condition #62: ‘simpleMessage’, ‘message’, ‘condition’
[16:04:58.192]   - Field: ‘calls’
[16:04:58.354]  - Condition #63: ‘simpleMessage’, ‘message’, ‘condition’
[16:04:58.192]   - Field: ‘globals’
[16:04:58.354]  - Condition #64: ‘simpleMessage’, ‘message’, ‘condition’
[16:04:58.192]   - Field: ‘stdout’
[16:04:58.354]  - Condition #65: ‘simpleMessage’, ‘message’, ‘condition’
[16:04:58.192]   - Field: ‘earlySignal’
[16:04:58.354]  - Condition #66: ‘simpleMessage’, ‘message’, ‘condition’
[16:04:58.192]   - Field: ‘lazy’
[16:04:58.354]  - Condition #67: ‘simpleMessage’, ‘message’, ‘condition’
[16:04:58.192]   - Field: ‘state’
[16:04:58.354]  - Condition #68: ‘simpleMessage’, ‘message’, ‘condition’
[16:04:58.193] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[16:04:58.354]  - Condition #69: ‘simpleMessage’, ‘message’, ‘condition’
[16:04:58.193] - Launch lazy future ...
[16:04:58.354]  - Condition #70: ‘simpleMessage’, ‘message’, ‘condition’
[16:04:58.193] Packages needed by the future expression (n = 0): <none>
[16:04:58.355]  - Condition #71: ‘simpleMessage’, ‘message’, ‘condition’
[16:04:58.193] Packages needed by future strategies (n = 0): <none>
[16:04:58.355]  - Condition #72: ‘simpleMessage’, ‘message’, ‘condition’
[16:04:58.194] {
[16:04:58.194]     {
[16:04:58.194]         {
[16:04:58.194]             ...future.startTime <- base::Sys.time()
[16:04:58.194]             {
[16:04:58.194]                 {
[16:04:58.194]                   {
[16:04:58.194]                     {
[16:04:58.194]                       base::local({
[16:04:58.194]                         has_future <- base::requireNamespace("future", 
[16:04:58.194]                           quietly = TRUE)
[16:04:58.194]                         if (has_future) {
[16:04:58.194]                           ns <- base::getNamespace("future")
[16:04:58.194]                           version <- ns[[".package"]][["version"]]
[16:04:58.194]                           if (is.null(version)) 
[16:04:58.194]                             version <- utils::packageVersion("future")
[16:04:58.194]                         }
[16:04:58.194]                         else {
[16:04:58.194]                           version <- NULL
[16:04:58.194]                         }
[16:04:58.194]                         if (!has_future || version < "1.8.0") {
[16:04:58.194]                           info <- base::c(r_version = base::gsub("R version ", 
[16:04:58.194]                             "", base::R.version$version.string), 
[16:04:58.194]                             platform = base::sprintf("%s (%s-bit)", 
[16:04:58.194]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:04:58.194]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[16:04:58.194]                               "release", "version")], collapse = " "), 
[16:04:58.194]                             hostname = base::Sys.info()[["nodename"]])
[16:04:58.194]                           info <- base::sprintf("%s: %s", base::names(info), 
[16:04:58.194]                             info)
[16:04:58.194]                           info <- base::paste(info, collapse = "; ")
[16:04:58.194]                           if (!has_future) {
[16:04:58.194]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:04:58.194]                               info)
[16:04:58.194]                           }
[16:04:58.194]                           else {
[16:04:58.194]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:04:58.194]                               info, version)
[16:04:58.194]                           }
[16:04:58.194]                           base::stop(msg)
[16:04:58.194]                         }
[16:04:58.194]                       })
[16:04:58.194]                     }
[16:04:58.194]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[16:04:58.194]                     base::options(mc.cores = 1L)
[16:04:58.194]                   }
[16:04:58.194]                   options(future.plan = NULL)
[16:04:58.194]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:04:58.194]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:04:58.194]                 }
[16:04:58.194]                 ...future.workdir <- getwd()
[16:04:58.194]             }
[16:04:58.194]             ...future.oldOptions <- base::as.list(base::.Options)
[16:04:58.194]             ...future.oldEnvVars <- base::Sys.getenv()
[16:04:58.194]         }
[16:04:58.194]         base::options(future.startup.script = FALSE, future.globals.onMissing = "ignore", 
[16:04:58.194]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:04:58.194]             future.globals.onMissing = "ignore", future.globals.onReference = NULL, 
[16:04:58.194]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:04:58.194]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:04:58.194]             future.stdout.windows.reencode = NULL, width = 80L)
[16:04:58.194]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:04:58.194]             base::names(...future.oldOptions))
[16:04:58.194]     }
[16:04:58.194]     if (FALSE) {
[16:04:58.194]     }
[16:04:58.194]     else {
[16:04:58.194]         if (TRUE) {
[16:04:58.194]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:04:58.194]                 open = "w")
[16:04:58.194]         }
[16:04:58.194]         else {
[16:04:58.194]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:04:58.194]                 windows = "NUL", "/dev/null"), open = "w")
[16:04:58.194]         }
[16:04:58.194]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:04:58.194]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:04:58.194]             base::sink(type = "output", split = FALSE)
[16:04:58.194]             base::close(...future.stdout)
[16:04:58.194]         }, add = TRUE)
[16:04:58.194]     }
[16:04:58.194]     ...future.frame <- base::sys.nframe()
[16:04:58.194]     ...future.conditions <- base::list()
[16:04:58.194]     ...future.rng <- base::globalenv()$.Random.seed
[16:04:58.194]     if (FALSE) {
[16:04:58.194]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:04:58.194]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:04:58.194]     }
[16:04:58.194]     ...future.result <- base::tryCatch({
[16:04:58.194]         base::withCallingHandlers({
[16:04:58.194]             ...future.value <- base::withVisible(base::local({
[16:04:58.194]                 ...future.makeSendCondition <- base::local({
[16:04:58.194]                   sendCondition <- NULL
[16:04:58.194]                   function(frame = 1L) {
[16:04:58.194]                     if (is.function(sendCondition)) 
[16:04:58.194]                       return(sendCondition)
[16:04:58.194]                     ns <- getNamespace("parallel")
[16:04:58.194]                     if (exists("sendData", mode = "function", 
[16:04:58.194]                       envir = ns)) {
[16:04:58.194]                       parallel_sendData <- get("sendData", mode = "function", 
[16:04:58.194]                         envir = ns)
[16:04:58.194]                       envir <- sys.frame(frame)
[16:04:58.194]                       master <- NULL
[16:04:58.194]                       while (!identical(envir, .GlobalEnv) && 
[16:04:58.194]                         !identical(envir, emptyenv())) {
[16:04:58.194]                         if (exists("master", mode = "list", envir = envir, 
[16:04:58.194]                           inherits = FALSE)) {
[16:04:58.194]                           master <- get("master", mode = "list", 
[16:04:58.194]                             envir = envir, inherits = FALSE)
[16:04:58.194]                           if (inherits(master, c("SOCKnode", 
[16:04:58.194]                             "SOCK0node"))) {
[16:04:58.194]                             sendCondition <<- function(cond) {
[16:04:58.194]                               data <- list(type = "VALUE", value = cond, 
[16:04:58.194]                                 success = TRUE)
[16:04:58.194]                               parallel_sendData(master, data)
[16:04:58.194]                             }
[16:04:58.194]                             return(sendCondition)
[16:04:58.194]                           }
[16:04:58.194]                         }
[16:04:58.194]                         frame <- frame + 1L
[16:04:58.194]                         envir <- sys.frame(frame)
[16:04:58.194]                       }
[16:04:58.194]                     }
[16:04:58.194]                     sendCondition <<- function(cond) NULL
[16:04:58.194]                   }
[16:04:58.194]                 })
[16:04:58.194]                 withCallingHandlers({
[16:04:58.194]                   subset(data, x < 3)$y
[16:04:58.194]                 }, immediateCondition = function(cond) {
[16:04:58.194]                   sendCondition <- ...future.makeSendCondition()
[16:04:58.194]                   sendCondition(cond)
[16:04:58.194]                   muffleCondition <- function (cond, pattern = "^muffle") 
[16:04:58.194]                   {
[16:04:58.194]                     inherits <- base::inherits
[16:04:58.194]                     invokeRestart <- base::invokeRestart
[16:04:58.194]                     is.null <- base::is.null
[16:04:58.194]                     muffled <- FALSE
[16:04:58.194]                     if (inherits(cond, "message")) {
[16:04:58.194]                       muffled <- grepl(pattern, "muffleMessage")
[16:04:58.194]                       if (muffled) 
[16:04:58.194]                         invokeRestart("muffleMessage")
[16:04:58.194]                     }
[16:04:58.194]                     else if (inherits(cond, "warning")) {
[16:04:58.194]                       muffled <- grepl(pattern, "muffleWarning")
[16:04:58.194]                       if (muffled) 
[16:04:58.194]                         invokeRestart("muffleWarning")
[16:04:58.194]                     }
[16:04:58.194]                     else if (inherits(cond, "condition")) {
[16:04:58.194]                       if (!is.null(pattern)) {
[16:04:58.194]                         computeRestarts <- base::computeRestarts
[16:04:58.194]                         grepl <- base::grepl
[16:04:58.194]                         restarts <- computeRestarts(cond)
[16:04:58.194]                         for (restart in restarts) {
[16:04:58.194]                           name <- restart$name
[16:04:58.194]                           if (is.null(name)) 
[16:04:58.194]                             next
[16:04:58.194]                           if (!grepl(pattern, name)) 
[16:04:58.194]                             next
[16:04:58.194]                           invokeRestart(restart)
[16:04:58.194]                           muffled <- TRUE
[16:04:58.194]                           break
[16:04:58.194]                         }
[16:04:58.194]                       }
[16:04:58.194]                     }
[16:04:58.194]                     invisible(muffled)
[16:04:58.194]                   }
[16:04:58.194]                   muffleCondition(cond)
[16:04:58.194]                 })
[16:04:58.194]             }))
[16:04:58.194]             future::FutureResult(value = ...future.value$value, 
[16:04:58.194]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:04:58.194]                   ...future.rng), globalenv = if (FALSE) 
[16:04:58.194]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:04:58.194]                     ...future.globalenv.names))
[16:04:58.194]                 else NULL, started = ...future.startTime, version = "1.8")
[16:04:58.194]         }, condition = base::local({
[16:04:58.194]             c <- base::c
[16:04:58.194]             inherits <- base::inherits
[16:04:58.194]             invokeRestart <- base::invokeRestart
[16:04:58.194]             length <- base::length
[16:04:58.194]             list <- base::list
[16:04:58.194]             seq.int <- base::seq.int
[16:04:58.194]             signalCondition <- base::signalCondition
[16:04:58.194]             sys.calls <- base::sys.calls
[16:04:58.194]             `[[` <- base::`[[`
[16:04:58.194]             `+` <- base::`+`
[16:04:58.194]             `<<-` <- base::`<<-`
[16:04:58.194]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:04:58.194]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:04:58.194]                   3L)]
[16:04:58.194]             }
[16:04:58.194]             function(cond) {
[16:04:58.194]                 is_error <- inherits(cond, "error")
[16:04:58.194]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:04:58.194]                   NULL)
[16:04:58.194]                 if (is_error) {
[16:04:58.194]                   sessionInformation <- function() {
[16:04:58.194]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:04:58.194]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:04:58.194]                       search = base::search(), system = base::Sys.info())
[16:04:58.194]                   }
[16:04:58.194]                   ...future.conditions[[length(...future.conditions) + 
[16:04:58.194]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:04:58.194]                     cond$call), session = sessionInformation(), 
[16:04:58.194]                     timestamp = base::Sys.time(), signaled = 0L)
[16:04:58.194]                   signalCondition(cond)
[16:04:58.194]                 }
[16:04:58.194]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:04:58.194]                 "immediateCondition"))) {
[16:04:58.194]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:04:58.194]                   ...future.conditions[[length(...future.conditions) + 
[16:04:58.194]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:04:58.194]                   if (TRUE && !signal) {
[16:04:58.194]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:04:58.194]                     {
[16:04:58.194]                       inherits <- base::inherits
[16:04:58.194]                       invokeRestart <- base::invokeRestart
[16:04:58.194]                       is.null <- base::is.null
[16:04:58.194]                       muffled <- FALSE
[16:04:58.194]                       if (inherits(cond, "message")) {
[16:04:58.194]                         muffled <- grepl(pattern, "muffleMessage")
[16:04:58.194]                         if (muffled) 
[16:04:58.194]                           invokeRestart("muffleMessage")
[16:04:58.194]                       }
[16:04:58.194]                       else if (inherits(cond, "warning")) {
[16:04:58.194]                         muffled <- grepl(pattern, "muffleWarning")
[16:04:58.194]                         if (muffled) 
[16:04:58.194]                           invokeRestart("muffleWarning")
[16:04:58.194]                       }
[16:04:58.194]                       else if (inherits(cond, "condition")) {
[16:04:58.194]                         if (!is.null(pattern)) {
[16:04:58.194]                           computeRestarts <- base::computeRestarts
[16:04:58.194]                           grepl <- base::grepl
[16:04:58.194]                           restarts <- computeRestarts(cond)
[16:04:58.194]                           for (restart in restarts) {
[16:04:58.194]                             name <- restart$name
[16:04:58.194]                             if (is.null(name)) 
[16:04:58.194]                               next
[16:04:58.194]                             if (!grepl(pattern, name)) 
[16:04:58.194]                               next
[16:04:58.194]                             invokeRestart(restart)
[16:04:58.194]                             muffled <- TRUE
[16:04:58.194]                             break
[16:04:58.194]                           }
[16:04:58.194]                         }
[16:04:58.194]                       }
[16:04:58.194]                       invisible(muffled)
[16:04:58.194]                     }
[16:04:58.194]                     muffleCondition(cond, pattern = "^muffle")
[16:04:58.194]                   }
[16:04:58.194]                 }
[16:04:58.194]                 else {
[16:04:58.194]                   if (TRUE) {
[16:04:58.194]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:04:58.194]                     {
[16:04:58.194]                       inherits <- base::inherits
[16:04:58.194]                       invokeRestart <- base::invokeRestart
[16:04:58.194]                       is.null <- base::is.null
[16:04:58.194]                       muffled <- FALSE
[16:04:58.194]                       if (inherits(cond, "message")) {
[16:04:58.194]                         muffled <- grepl(pattern, "muffleMessage")
[16:04:58.194]                         if (muffled) 
[16:04:58.194]                           invokeRestart("muffleMessage")
[16:04:58.194]                       }
[16:04:58.194]                       else if (inherits(cond, "warning")) {
[16:04:58.194]                         muffled <- grepl(pattern, "muffleWarning")
[16:04:58.194]                         if (muffled) 
[16:04:58.194]                           invokeRestart("muffleWarning")
[16:04:58.194]                       }
[16:04:58.194]                       else if (inherits(cond, "condition")) {
[16:04:58.194]                         if (!is.null(pattern)) {
[16:04:58.194]                           computeRestarts <- base::computeRestarts
[16:04:58.194]                           grepl <- base::grepl
[16:04:58.194]                           restarts <- computeRestarts(cond)
[16:04:58.194]                           for (restart in restarts) {
[16:04:58.194]                             name <- restart$name
[16:04:58.194]                             if (is.null(name)) 
[16:04:58.194]                               next
[16:04:58.194]                             if (!grepl(pattern, name)) 
[16:04:58.194]                               next
[16:04:58.194]                             invokeRestart(restart)
[16:04:58.194]                             muffled <- TRUE
[16:04:58.194]                             break
[16:04:58.194]                           }
[16:04:58.194]                         }
[16:04:58.194]                       }
[16:04:58.194]                       invisible(muffled)
[16:04:58.194]                     }
[16:04:58.194]                     muffleCondition(cond, pattern = "^muffle")
[16:04:58.194]                   }
[16:04:58.194]                 }
[16:04:58.194]             }
[16:04:58.194]         }))
[16:04:58.194]     }, error = function(ex) {
[16:04:58.194]         base::structure(base::list(value = NULL, visible = NULL, 
[16:04:58.194]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:04:58.194]                 ...future.rng), started = ...future.startTime, 
[16:04:58.194]             finished = Sys.time(), session_uuid = NA_character_, 
[16:04:58.194]             version = "1.8"), class = "FutureResult")
[16:04:58.194]     }, finally = {
[16:04:58.194]         if (!identical(...future.workdir, getwd())) 
[16:04:58.194]             setwd(...future.workdir)
[16:04:58.194]         {
[16:04:58.194]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:04:58.194]                 ...future.oldOptions$nwarnings <- NULL
[16:04:58.194]             }
[16:04:58.194]             base::options(...future.oldOptions)
[16:04:58.194]             if (.Platform$OS.type == "windows") {
[16:04:58.194]                 old_names <- names(...future.oldEnvVars)
[16:04:58.194]                 envs <- base::Sys.getenv()
[16:04:58.194]                 names <- names(envs)
[16:04:58.194]                 common <- intersect(names, old_names)
[16:04:58.194]                 added <- setdiff(names, old_names)
[16:04:58.194]                 removed <- setdiff(old_names, names)
[16:04:58.194]                 changed <- common[...future.oldEnvVars[common] != 
[16:04:58.194]                   envs[common]]
[16:04:58.194]                 NAMES <- toupper(changed)
[16:04:58.194]                 args <- list()
[16:04:58.194]                 for (kk in seq_along(NAMES)) {
[16:04:58.194]                   name <- changed[[kk]]
[16:04:58.194]                   NAME <- NAMES[[kk]]
[16:04:58.194]                   if (name != NAME && is.element(NAME, old_names)) 
[16:04:58.194]                     next
[16:04:58.194]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:04:58.194]                 }
[16:04:58.194]                 NAMES <- toupper(added)
[16:04:58.194]                 for (kk in seq_along(NAMES)) {
[16:04:58.194]                   name <- added[[kk]]
[16:04:58.194]                   NAME <- NAMES[[kk]]
[16:04:58.194]                   if (name != NAME && is.element(NAME, old_names)) 
[16:04:58.194]                     next
[16:04:58.194]                   args[[name]] <- ""
[16:04:58.194]                 }
[16:04:58.194]                 NAMES <- toupper(removed)
[16:04:58.194]                 for (kk in seq_along(NAMES)) {
[16:04:58.194]                   name <- removed[[kk]]
[16:04:58.194]                   NAME <- NAMES[[kk]]
[16:04:58.194]                   if (name != NAME && is.element(NAME, old_names)) 
[16:04:58.194]                     next
[16:04:58.194]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:04:58.194]                 }
[16:04:58.194]                 if (length(args) > 0) 
[16:04:58.194]                   base::do.call(base::Sys.setenv, args = args)
[16:04:58.194]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:04:58.194]             }
[16:04:58.194]             else {
[16:04:58.194]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:04:58.194]             }
[16:04:58.194]             {
[16:04:58.194]                 if (base::length(...future.futureOptionsAdded) > 
[16:04:58.194]                   0L) {
[16:04:58.194]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:04:58.194]                   base::names(opts) <- ...future.futureOptionsAdded
[16:04:58.194]                   base::options(opts)
[16:04:58.194]                 }
[16:04:58.194]                 {
[16:04:58.194]                   {
[16:04:58.194]                     base::options(mc.cores = ...future.mc.cores.old)
[16:04:58.194]                     NULL
[16:04:58.194]                   }
[16:04:58.194]                   options(future.plan = NULL)
[16:04:58.194]                   if (is.na(NA_character_)) 
[16:04:58.194]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:04:58.194]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:04:58.194]                   future::plan(list(function (..., workers = availableCores(), 
[16:04:58.194]                     lazy = FALSE, rscript_libs = .libPaths(), 
[16:04:58.194]                     envir = parent.frame()) 
[16:04:58.194]                   {
[16:04:58.194]                     if (is.function(workers)) 
[16:04:58.194]                       workers <- workers()
[16:04:58.194]                     workers <- structure(as.integer(workers), 
[16:04:58.194]                       class = class(workers))
[16:04:58.194]                     stop_if_not(length(workers) == 1, is.finite(workers), 
[16:04:58.194]                       workers >= 1)
[16:04:58.194]                     if (workers == 1L && !inherits(workers, "AsIs")) {
[16:04:58.194]                       return(sequential(..., lazy = TRUE, envir = envir))
[16:04:58.194]                     }
[16:04:58.194]                     future <- MultisessionFuture(..., workers = workers, 
[16:04:58.194]                       lazy = lazy, rscript_libs = rscript_libs, 
[16:04:58.194]                       envir = envir)
[16:04:58.194]                     if (!future$lazy) 
[16:04:58.194]                       future <- run(future)
[16:04:58.194]                     invisible(future)
[16:04:58.194]                   }), .cleanup = FALSE, .init = FALSE)
[16:04:58.194]                 }
[16:04:58.194]             }
[16:04:58.194]         }
[16:04:58.194]     })
[16:04:58.194]     if (TRUE) {
[16:04:58.194]         base::sink(type = "output", split = FALSE)
[16:04:58.194]         if (TRUE) {
[16:04:58.194]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:04:58.194]         }
[16:04:58.194]         else {
[16:04:58.194]             ...future.result["stdout"] <- base::list(NULL)
[16:04:58.194]         }
[16:04:58.194]         base::close(...future.stdout)
[16:04:58.194]         ...future.stdout <- NULL
[16:04:58.194]     }
[16:04:58.194]     ...future.result$conditions <- ...future.conditions
[16:04:58.194]     ...future.result$finished <- base::Sys.time()
[16:04:58.194]     ...future.result
[16:04:58.194] }
[16:04:58.355]  - Condition #73: ‘simpleMessage’, ‘message’, ‘condition’
[16:04:58.248] Exporting 1 global objects (160 bytes) to cluster node #1 ...
[16:04:58.355]  - Condition #74: ‘simpleMessage’, ‘message’, ‘condition’
[16:04:58.250] Exporting ‘data’ (160 bytes) to cluster node #1 ...
[16:04:58.355]  - Condition #75: ‘simpleMessage’, ‘message’, ‘condition’
[16:04:58.251] Exporting ‘data’ (160 bytes) to cluster node #1 ... DONE
[16:04:58.355]  - Condition #76: ‘simpleMessage’, ‘message’, ‘condition’
[16:04:58.251] Exporting 1 global objects (160 bytes) to cluster node #1 ... DONE
[16:04:58.355]  - Condition #77: ‘simpleMessage’, ‘message’, ‘condition’
[16:04:58.251] MultisessionFuture started
[16:04:58.356]  - Condition #78: ‘simpleMessage’, ‘message’, ‘condition’
[16:04:58.252] - Launch lazy future ... done
[16:04:58.356]  - Condition #79: ‘simpleMessage’, ‘message’, ‘condition’
[16:04:58.252] run() for ‘MultisessionFuture’ ... done
[16:04:58.356]  - Condition #80: ‘simpleMessage’, ‘message’, ‘condition’
[16:04:58.252] result() for ClusterFuture ...
[16:04:58.356]  - Condition #81: ‘simpleMessage’, ‘message’, ‘condition’
[16:04:58.252] receiveMessageFromWorker() for ClusterFuture ...
[16:04:58.356]  - Condition #82: ‘simpleMessage’, ‘message’, ‘condition’
[16:04:58.252] - Validating connection of MultisessionFuture
[16:04:58.356]  - Condition #83: ‘simpleMessage’, ‘message’, ‘condition’
[16:04:58.341] - received message: FutureResult
[16:04:58.356]  - Condition #84: ‘simpleMessage’, ‘message’, ‘condition’
[16:04:58.341] - Received FutureResult
[16:04:58.356]  - Condition #85: ‘simpleMessage’, ‘message’, ‘condition’
[16:04:58.341] - Erased future from FutureRegistry
[16:04:58.357]  - Condition #86: ‘simpleMessage’, ‘message’, ‘condition’
[16:04:58.341] result() for ClusterFuture ...
[16:04:58.357]  - Condition #87: ‘simpleMessage’, ‘message’, ‘condition’
[16:04:58.341] - result already collected: FutureResult
[16:04:58.357]  - Condition #88: ‘simpleMessage’, ‘message’, ‘condition’
[16:04:58.341] result() for ClusterFuture ... done
[16:04:58.357]  - Condition #89: ‘simpleMessage’, ‘message’, ‘condition’
[16:04:58.342] receiveMessageFromWorker() for ClusterFuture ... done
[16:04:58.357]  - Condition #90: ‘simpleMessage’, ‘message’, ‘condition’
[16:04:58.342] result() for ClusterFuture ... done
[16:04:58.357]  - Condition #91: ‘simpleMessage’, ‘message’, ‘condition’
[16:04:58.342] result() for ClusterFuture ...
[16:04:58.357]  - Condition #92: ‘simpleMessage’, ‘message’, ‘condition’
[16:04:58.342] - result already collected: FutureResult
[16:04:58.358]  - Condition #93: ‘simpleMessage’, ‘message’, ‘condition’
[16:04:58.342] result() for ClusterFuture ... done
[16:04:58.358] signalConditions() ... done
- Strategy: multisession ... DONE
> 
> 
> message("*** Globals w/ non-standard evaluation (NSE) ... DONE")
*** Globals w/ non-standard evaluation (NSE) ... DONE
> 
> source("incl/end.R")
[16:04:58.358] plan(): Setting new future strategy stack:
[16:04:58.358] List of future strategies:
[16:04:58.358] 1. FutureStrategy:
[16:04:58.358]    - args: function (..., envir = parent.frame())
[16:04:58.358]    - tweaked: FALSE
[16:04:58.358]    - call: future::plan(oplan)
[16:04:58.359] plan(): nbrOfWorkers() = 1
> 
