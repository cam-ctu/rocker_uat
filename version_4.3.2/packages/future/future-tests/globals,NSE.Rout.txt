
R version 4.3.2 (2023-10-31) -- "Eye Holes"
Copyright (C) 2023 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> source("incl/start.R")
[13:23:21.886] plan(): Setting new future strategy stack:
[13:23:21.887] List of future strategies:
[13:23:21.887] 1. sequential:
[13:23:21.887]    - args: function (..., envir = parent.frame())
[13:23:21.887]    - tweaked: FALSE
[13:23:21.887]    - call: future::plan("sequential")
[13:23:21.902] plan(): nbrOfWorkers() = 1
> library("listenv")
> 
> message("*** Globals w/ non-standard evaluation (NSE) ...")
*** Globals w/ non-standard evaluation (NSE) ...
> 
> data <- data.frame(x = 1:5, y = 1:5)
> v0 <- subset(data, x < 3)$y
> 
> for (strategy in supportedStrategies()) {
+   ## Speed up CRAN checks: Skip on CRAN Windows 32-bit
+   if (!fullTest && isWin32) next
+   
+   message(sprintf("- Strategy: %s ...", strategy))
+   
+   plan(strategy)
+ 
+   ## Assert option is passed on to future
+   options(future.globals.onMissing = "error")
+   opt1 %<-% getOption("future.globals.onMissing")
+   stopifnot(identical(opt1, "error"))
+ 
+   options(future.globals.onMissing = "ignore")
+   opt2 %<-% getOption("future.globals.onMissing")
+   stopifnot(identical(opt2, "ignore"))
+ 
+   options(future.globals.onMissing = "error")
+   res <- try({ v1 %<-% subset(data, x < 3)$y }, silent = TRUE)
+   stopifnot(inherits(res, "try-error"))
+ 
+   options(future.globals.onMissing = "ignore")
+   v2 %<-% subset(data, x < 3)$y
+   stopifnot(identical(v2, v0))
+ 
+   ## Nested futures (requires option is passed on to future)
+   plan(list(sequential, strategy))
+   options(future.globals.onMissing = "ignore")
+   v3 %<-% {
+     a %<-% subset(data, x < 3)$y
+     a
+   } %lazy% TRUE
+   stopifnot(identical(v3, v0))
+ 
+   message(sprintf("- Strategy: %s ... DONE", strategy))
+ }
- Strategy: sequential ...
[13:23:21.935] plan(): Setting new future strategy stack:
[13:23:21.935] List of future strategies:
[13:23:21.935] 1. sequential:
[13:23:21.935]    - args: function (..., envir = parent.frame())
[13:23:21.935]    - tweaked: FALSE
[13:23:21.935]    - call: plan(strategy)
[13:23:21.949] plan(): nbrOfWorkers() = 1
[13:23:21.951] getGlobalsAndPackages() ...
Warning: R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘error’
[13:23:21.951] Searching for globals...
[13:23:21.955] - globals found: [1] ‘getOption’
[13:23:21.956] Searching for globals ... DONE
[13:23:21.956] Resolving globals: FALSE
[13:23:21.956] 
[13:23:21.956] 
[13:23:21.957] getGlobalsAndPackages() ... DONE
[13:23:21.957] run() for ‘Future’ ...
[13:23:21.957] - state: ‘created’
[13:23:21.958] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[13:23:21.958] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[13:23:21.958] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[13:23:21.958]   - Field: ‘label’
[13:23:21.958]   - Field: ‘local’
[13:23:21.958]   - Field: ‘owner’
[13:23:21.959]   - Field: ‘envir’
[13:23:21.959]   - Field: ‘packages’
[13:23:21.959]   - Field: ‘gc’
[13:23:21.959]   - Field: ‘conditions’
[13:23:21.959]   - Field: ‘expr’
[13:23:21.959]   - Field: ‘uuid’
[13:23:21.959]   - Field: ‘seed’
[13:23:21.959]   - Field: ‘version’
[13:23:21.959]   - Field: ‘result’
[13:23:21.959]   - Field: ‘asynchronous’
[13:23:21.960]   - Field: ‘calls’
[13:23:21.960]   - Field: ‘globals’
[13:23:21.960]   - Field: ‘stdout’
[13:23:21.960]   - Field: ‘earlySignal’
[13:23:21.960]   - Field: ‘lazy’
[13:23:21.960]   - Field: ‘state’
[13:23:21.960] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[13:23:21.960] - Launch lazy future ...
[13:23:21.961] Packages needed by the future expression (n = 0): <none>
[13:23:21.961] Packages needed by future strategies (n = 0): <none>
[13:23:21.962] {
[13:23:21.962]     {
[13:23:21.962]         {
[13:23:21.962]             ...future.startTime <- base::Sys.time()
[13:23:21.962]             {
[13:23:21.962]                 {
[13:23:21.962]                   {
[13:23:21.962]                     base::local({
[13:23:21.962]                       has_future <- base::requireNamespace("future", 
[13:23:21.962]                         quietly = TRUE)
[13:23:21.962]                       if (has_future) {
[13:23:21.962]                         ns <- base::getNamespace("future")
[13:23:21.962]                         version <- ns[[".package"]][["version"]]
[13:23:21.962]                         if (is.null(version)) 
[13:23:21.962]                           version <- utils::packageVersion("future")
[13:23:21.962]                       }
[13:23:21.962]                       else {
[13:23:21.962]                         version <- NULL
[13:23:21.962]                       }
[13:23:21.962]                       if (!has_future || version < "1.8.0") {
[13:23:21.962]                         info <- base::c(r_version = base::gsub("R version ", 
[13:23:21.962]                           "", base::R.version$version.string), 
[13:23:21.962]                           platform = base::sprintf("%s (%s-bit)", 
[13:23:21.962]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:23:21.962]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[13:23:21.962]                             "release", "version")], collapse = " "), 
[13:23:21.962]                           hostname = base::Sys.info()[["nodename"]])
[13:23:21.962]                         info <- base::sprintf("%s: %s", base::names(info), 
[13:23:21.962]                           info)
[13:23:21.962]                         info <- base::paste(info, collapse = "; ")
[13:23:21.962]                         if (!has_future) {
[13:23:21.962]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:23:21.962]                             info)
[13:23:21.962]                         }
[13:23:21.962]                         else {
[13:23:21.962]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:23:21.962]                             info, version)
[13:23:21.962]                         }
[13:23:21.962]                         base::stop(msg)
[13:23:21.962]                       }
[13:23:21.962]                     })
[13:23:21.962]                   }
[13:23:21.962]                   options(future.plan = NULL)
[13:23:21.962]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:23:21.962]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:23:21.962]                 }
[13:23:21.962]                 ...future.workdir <- getwd()
[13:23:21.962]             }
[13:23:21.962]             ...future.oldOptions <- base::as.list(base::.Options)
[13:23:21.962]             ...future.oldEnvVars <- base::Sys.getenv()
[13:23:21.962]         }
[13:23:21.962]         base::options(future.startup.script = FALSE, future.globals.onMissing = "error", 
[13:23:21.962]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:23:21.962]             future.globals.onMissing = "error", future.globals.onReference = NULL, 
[13:23:21.962]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:23:21.962]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:23:21.962]             future.stdout.windows.reencode = NULL, width = 80L)
[13:23:21.962]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:23:21.962]             base::names(...future.oldOptions))
[13:23:21.962]     }
[13:23:21.962]     if (FALSE) {
[13:23:21.962]     }
[13:23:21.962]     else {
[13:23:21.962]         if (TRUE) {
[13:23:21.962]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:23:21.962]                 open = "w")
[13:23:21.962]         }
[13:23:21.962]         else {
[13:23:21.962]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:23:21.962]                 windows = "NUL", "/dev/null"), open = "w")
[13:23:21.962]         }
[13:23:21.962]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:23:21.962]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:23:21.962]             base::sink(type = "output", split = FALSE)
[13:23:21.962]             base::close(...future.stdout)
[13:23:21.962]         }, add = TRUE)
[13:23:21.962]     }
[13:23:21.962]     ...future.frame <- base::sys.nframe()
[13:23:21.962]     ...future.conditions <- base::list()
[13:23:21.962]     ...future.rng <- base::globalenv()$.Random.seed
[13:23:21.962]     if (FALSE) {
[13:23:21.962]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:23:21.962]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:23:21.962]     }
[13:23:21.962]     ...future.result <- base::tryCatch({
[13:23:21.962]         base::withCallingHandlers({
[13:23:21.962]             ...future.value <- base::withVisible(base::local(getOption("future.globals.onMissing")))
[13:23:21.962]             future::FutureResult(value = ...future.value$value, 
[13:23:21.962]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:23:21.962]                   ...future.rng), globalenv = if (FALSE) 
[13:23:21.962]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:23:21.962]                     ...future.globalenv.names))
[13:23:21.962]                 else NULL, started = ...future.startTime, version = "1.8")
[13:23:21.962]         }, condition = base::local({
[13:23:21.962]             c <- base::c
[13:23:21.962]             inherits <- base::inherits
[13:23:21.962]             invokeRestart <- base::invokeRestart
[13:23:21.962]             length <- base::length
[13:23:21.962]             list <- base::list
[13:23:21.962]             seq.int <- base::seq.int
[13:23:21.962]             signalCondition <- base::signalCondition
[13:23:21.962]             sys.calls <- base::sys.calls
[13:23:21.962]             `[[` <- base::`[[`
[13:23:21.962]             `+` <- base::`+`
[13:23:21.962]             `<<-` <- base::`<<-`
[13:23:21.962]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:23:21.962]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:23:21.962]                   3L)]
[13:23:21.962]             }
[13:23:21.962]             function(cond) {
[13:23:21.962]                 is_error <- inherits(cond, "error")
[13:23:21.962]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:23:21.962]                   NULL)
[13:23:21.962]                 if (is_error) {
[13:23:21.962]                   sessionInformation <- function() {
[13:23:21.962]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:23:21.962]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:23:21.962]                       search = base::search(), system = base::Sys.info())
[13:23:21.962]                   }
[13:23:21.962]                   ...future.conditions[[length(...future.conditions) + 
[13:23:21.962]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:23:21.962]                     cond$call), session = sessionInformation(), 
[13:23:21.962]                     timestamp = base::Sys.time(), signaled = 0L)
[13:23:21.962]                   signalCondition(cond)
[13:23:21.962]                 }
[13:23:21.962]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:23:21.962]                 "immediateCondition"))) {
[13:23:21.962]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:23:21.962]                   ...future.conditions[[length(...future.conditions) + 
[13:23:21.962]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:23:21.962]                   if (TRUE && !signal) {
[13:23:21.962]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:23:21.962]                     {
[13:23:21.962]                       inherits <- base::inherits
[13:23:21.962]                       invokeRestart <- base::invokeRestart
[13:23:21.962]                       is.null <- base::is.null
[13:23:21.962]                       muffled <- FALSE
[13:23:21.962]                       if (inherits(cond, "message")) {
[13:23:21.962]                         muffled <- grepl(pattern, "muffleMessage")
[13:23:21.962]                         if (muffled) 
[13:23:21.962]                           invokeRestart("muffleMessage")
[13:23:21.962]                       }
[13:23:21.962]                       else if (inherits(cond, "warning")) {
[13:23:21.962]                         muffled <- grepl(pattern, "muffleWarning")
[13:23:21.962]                         if (muffled) 
[13:23:21.962]                           invokeRestart("muffleWarning")
[13:23:21.962]                       }
[13:23:21.962]                       else if (inherits(cond, "condition")) {
[13:23:21.962]                         if (!is.null(pattern)) {
[13:23:21.962]                           computeRestarts <- base::computeRestarts
[13:23:21.962]                           grepl <- base::grepl
[13:23:21.962]                           restarts <- computeRestarts(cond)
[13:23:21.962]                           for (restart in restarts) {
[13:23:21.962]                             name <- restart$name
[13:23:21.962]                             if (is.null(name)) 
[13:23:21.962]                               next
[13:23:21.962]                             if (!grepl(pattern, name)) 
[13:23:21.962]                               next
[13:23:21.962]                             invokeRestart(restart)
[13:23:21.962]                             muffled <- TRUE
[13:23:21.962]                             break
[13:23:21.962]                           }
[13:23:21.962]                         }
[13:23:21.962]                       }
[13:23:21.962]                       invisible(muffled)
[13:23:21.962]                     }
[13:23:21.962]                     muffleCondition(cond, pattern = "^muffle")
[13:23:21.962]                   }
[13:23:21.962]                 }
[13:23:21.962]                 else {
[13:23:21.962]                   if (TRUE) {
[13:23:21.962]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:23:21.962]                     {
[13:23:21.962]                       inherits <- base::inherits
[13:23:21.962]                       invokeRestart <- base::invokeRestart
[13:23:21.962]                       is.null <- base::is.null
[13:23:21.962]                       muffled <- FALSE
[13:23:21.962]                       if (inherits(cond, "message")) {
[13:23:21.962]                         muffled <- grepl(pattern, "muffleMessage")
[13:23:21.962]                         if (muffled) 
[13:23:21.962]                           invokeRestart("muffleMessage")
[13:23:21.962]                       }
[13:23:21.962]                       else if (inherits(cond, "warning")) {
[13:23:21.962]                         muffled <- grepl(pattern, "muffleWarning")
[13:23:21.962]                         if (muffled) 
[13:23:21.962]                           invokeRestart("muffleWarning")
[13:23:21.962]                       }
[13:23:21.962]                       else if (inherits(cond, "condition")) {
[13:23:21.962]                         if (!is.null(pattern)) {
[13:23:21.962]                           computeRestarts <- base::computeRestarts
[13:23:21.962]                           grepl <- base::grepl
[13:23:21.962]                           restarts <- computeRestarts(cond)
[13:23:21.962]                           for (restart in restarts) {
[13:23:21.962]                             name <- restart$name
[13:23:21.962]                             if (is.null(name)) 
[13:23:21.962]                               next
[13:23:21.962]                             if (!grepl(pattern, name)) 
[13:23:21.962]                               next
[13:23:21.962]                             invokeRestart(restart)
[13:23:21.962]                             muffled <- TRUE
[13:23:21.962]                             break
[13:23:21.962]                           }
[13:23:21.962]                         }
[13:23:21.962]                       }
[13:23:21.962]                       invisible(muffled)
[13:23:21.962]                     }
[13:23:21.962]                     muffleCondition(cond, pattern = "^muffle")
[13:23:21.962]                   }
[13:23:21.962]                 }
[13:23:21.962]             }
[13:23:21.962]         }))
[13:23:21.962]     }, error = function(ex) {
[13:23:21.962]         base::structure(base::list(value = NULL, visible = NULL, 
[13:23:21.962]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:23:21.962]                 ...future.rng), started = ...future.startTime, 
[13:23:21.962]             finished = Sys.time(), session_uuid = NA_character_, 
[13:23:21.962]             version = "1.8"), class = "FutureResult")
[13:23:21.962]     }, finally = {
[13:23:21.962]         if (!identical(...future.workdir, getwd())) 
[13:23:21.962]             setwd(...future.workdir)
[13:23:21.962]         {
[13:23:21.962]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:23:21.962]                 ...future.oldOptions$nwarnings <- NULL
[13:23:21.962]             }
[13:23:21.962]             base::options(...future.oldOptions)
[13:23:21.962]             if (.Platform$OS.type == "windows") {
[13:23:21.962]                 old_names <- names(...future.oldEnvVars)
[13:23:21.962]                 envs <- base::Sys.getenv()
[13:23:21.962]                 names <- names(envs)
[13:23:21.962]                 common <- intersect(names, old_names)
[13:23:21.962]                 added <- setdiff(names, old_names)
[13:23:21.962]                 removed <- setdiff(old_names, names)
[13:23:21.962]                 changed <- common[...future.oldEnvVars[common] != 
[13:23:21.962]                   envs[common]]
[13:23:21.962]                 NAMES <- toupper(changed)
[13:23:21.962]                 args <- list()
[13:23:21.962]                 for (kk in seq_along(NAMES)) {
[13:23:21.962]                   name <- changed[[kk]]
[13:23:21.962]                   NAME <- NAMES[[kk]]
[13:23:21.962]                   if (name != NAME && is.element(NAME, old_names)) 
[13:23:21.962]                     next
[13:23:21.962]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:23:21.962]                 }
[13:23:21.962]                 NAMES <- toupper(added)
[13:23:21.962]                 for (kk in seq_along(NAMES)) {
[13:23:21.962]                   name <- added[[kk]]
[13:23:21.962]                   NAME <- NAMES[[kk]]
[13:23:21.962]                   if (name != NAME && is.element(NAME, old_names)) 
[13:23:21.962]                     next
[13:23:21.962]                   args[[name]] <- ""
[13:23:21.962]                 }
[13:23:21.962]                 NAMES <- toupper(removed)
[13:23:21.962]                 for (kk in seq_along(NAMES)) {
[13:23:21.962]                   name <- removed[[kk]]
[13:23:21.962]                   NAME <- NAMES[[kk]]
[13:23:21.962]                   if (name != NAME && is.element(NAME, old_names)) 
[13:23:21.962]                     next
[13:23:21.962]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:23:21.962]                 }
[13:23:21.962]                 if (length(args) > 0) 
[13:23:21.962]                   base::do.call(base::Sys.setenv, args = args)
[13:23:21.962]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:23:21.962]             }
[13:23:21.962]             else {
[13:23:21.962]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:23:21.962]             }
[13:23:21.962]             {
[13:23:21.962]                 if (base::length(...future.futureOptionsAdded) > 
[13:23:21.962]                   0L) {
[13:23:21.962]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:23:21.962]                   base::names(opts) <- ...future.futureOptionsAdded
[13:23:21.962]                   base::options(opts)
[13:23:21.962]                 }
[13:23:21.962]                 {
[13:23:21.962]                   {
[13:23:21.962]                     NULL
[13:23:21.962]                     RNGkind("Mersenne-Twister")
[13:23:21.962]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[13:23:21.962]                       inherits = FALSE)
[13:23:21.962]                   }
[13:23:21.962]                   options(future.plan = NULL)
[13:23:21.962]                   if (is.na(NA_character_)) 
[13:23:21.962]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:23:21.962]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:23:21.962]                   future::plan(list(function (..., envir = parent.frame()) 
[13:23:21.962]                   {
[13:23:21.962]                     future <- SequentialFuture(..., envir = envir)
[13:23:21.962]                     if (!future$lazy) 
[13:23:21.962]                       future <- run(future)
[13:23:21.962]                     invisible(future)
[13:23:21.962]                   }), .cleanup = FALSE, .init = FALSE)
[13:23:21.962]                 }
[13:23:21.962]             }
[13:23:21.962]         }
[13:23:21.962]     })
[13:23:21.962]     if (TRUE) {
[13:23:21.962]         base::sink(type = "output", split = FALSE)
[13:23:21.962]         if (TRUE) {
[13:23:21.962]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:23:21.962]         }
[13:23:21.962]         else {
[13:23:21.962]             ...future.result["stdout"] <- base::list(NULL)
[13:23:21.962]         }
[13:23:21.962]         base::close(...future.stdout)
[13:23:21.962]         ...future.stdout <- NULL
[13:23:21.962]     }
[13:23:21.962]     ...future.result$conditions <- ...future.conditions
[13:23:21.962]     ...future.result$finished <- base::Sys.time()
[13:23:21.962]     ...future.result
[13:23:21.962] }
[13:23:21.964] plan(): Setting new future strategy stack:
[13:23:21.964] List of future strategies:
[13:23:21.964] 1. sequential:
[13:23:21.964]    - args: function (..., envir = parent.frame())
[13:23:21.964]    - tweaked: FALSE
[13:23:21.964]    - call: NULL
[13:23:21.965] plan(): nbrOfWorkers() = 1
[13:23:21.966] plan(): Setting new future strategy stack:
[13:23:21.966] List of future strategies:
[13:23:21.966] 1. sequential:
[13:23:21.966]    - args: function (..., envir = parent.frame())
[13:23:21.966]    - tweaked: FALSE
[13:23:21.966]    - call: plan(strategy)
[13:23:21.966] plan(): nbrOfWorkers() = 1
[13:23:21.967] SequentialFuture started (and completed)
[13:23:21.967] - Launch lazy future ... done
[13:23:21.967] run() for ‘SequentialFuture’ ... done
[13:23:21.968] getGlobalsAndPackages() ...
Warning: R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘ignore’
[13:23:21.968] Searching for globals...
[13:23:21.969] - globals found: [1] ‘getOption’
[13:23:21.969] Searching for globals ... DONE
[13:23:21.969] Resolving globals: FALSE
[13:23:21.969] 
[13:23:21.969] 
[13:23:21.969] getGlobalsAndPackages() ... DONE
[13:23:21.970] run() for ‘Future’ ...
[13:23:21.970] - state: ‘created’
[13:23:21.970] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[13:23:21.970] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[13:23:21.970] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[13:23:21.970]   - Field: ‘label’
[13:23:21.971]   - Field: ‘local’
[13:23:21.971]   - Field: ‘owner’
[13:23:21.971]   - Field: ‘envir’
[13:23:21.971]   - Field: ‘packages’
[13:23:21.971]   - Field: ‘gc’
[13:23:21.971]   - Field: ‘conditions’
[13:23:21.971]   - Field: ‘expr’
[13:23:21.971]   - Field: ‘uuid’
[13:23:21.971]   - Field: ‘seed’
[13:23:21.971]   - Field: ‘version’
[13:23:21.971]   - Field: ‘result’
[13:23:21.972]   - Field: ‘asynchronous’
[13:23:21.972]   - Field: ‘calls’
[13:23:21.972]   - Field: ‘globals’
[13:23:21.972]   - Field: ‘stdout’
[13:23:21.972]   - Field: ‘earlySignal’
[13:23:21.972]   - Field: ‘lazy’
[13:23:21.972]   - Field: ‘state’
[13:23:21.972] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[13:23:21.972] - Launch lazy future ...
[13:23:21.973] Packages needed by the future expression (n = 0): <none>
[13:23:21.973] Packages needed by future strategies (n = 0): <none>
[13:23:21.973] {
[13:23:21.973]     {
[13:23:21.973]         {
[13:23:21.973]             ...future.startTime <- base::Sys.time()
[13:23:21.973]             {
[13:23:21.973]                 {
[13:23:21.973]                   {
[13:23:21.973]                     base::local({
[13:23:21.973]                       has_future <- base::requireNamespace("future", 
[13:23:21.973]                         quietly = TRUE)
[13:23:21.973]                       if (has_future) {
[13:23:21.973]                         ns <- base::getNamespace("future")
[13:23:21.973]                         version <- ns[[".package"]][["version"]]
[13:23:21.973]                         if (is.null(version)) 
[13:23:21.973]                           version <- utils::packageVersion("future")
[13:23:21.973]                       }
[13:23:21.973]                       else {
[13:23:21.973]                         version <- NULL
[13:23:21.973]                       }
[13:23:21.973]                       if (!has_future || version < "1.8.0") {
[13:23:21.973]                         info <- base::c(r_version = base::gsub("R version ", 
[13:23:21.973]                           "", base::R.version$version.string), 
[13:23:21.973]                           platform = base::sprintf("%s (%s-bit)", 
[13:23:21.973]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:23:21.973]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[13:23:21.973]                             "release", "version")], collapse = " "), 
[13:23:21.973]                           hostname = base::Sys.info()[["nodename"]])
[13:23:21.973]                         info <- base::sprintf("%s: %s", base::names(info), 
[13:23:21.973]                           info)
[13:23:21.973]                         info <- base::paste(info, collapse = "; ")
[13:23:21.973]                         if (!has_future) {
[13:23:21.973]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:23:21.973]                             info)
[13:23:21.973]                         }
[13:23:21.973]                         else {
[13:23:21.973]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:23:21.973]                             info, version)
[13:23:21.973]                         }
[13:23:21.973]                         base::stop(msg)
[13:23:21.973]                       }
[13:23:21.973]                     })
[13:23:21.973]                   }
[13:23:21.973]                   options(future.plan = NULL)
[13:23:21.973]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:23:21.973]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:23:21.973]                 }
[13:23:21.973]                 ...future.workdir <- getwd()
[13:23:21.973]             }
[13:23:21.973]             ...future.oldOptions <- base::as.list(base::.Options)
[13:23:21.973]             ...future.oldEnvVars <- base::Sys.getenv()
[13:23:21.973]         }
[13:23:21.973]         base::options(future.startup.script = FALSE, future.globals.onMissing = "ignore", 
[13:23:21.973]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:23:21.973]             future.globals.onMissing = "ignore", future.globals.onReference = NULL, 
[13:23:21.973]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:23:21.973]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:23:21.973]             future.stdout.windows.reencode = NULL, width = 80L)
[13:23:21.973]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:23:21.973]             base::names(...future.oldOptions))
[13:23:21.973]     }
[13:23:21.973]     if (FALSE) {
[13:23:21.973]     }
[13:23:21.973]     else {
[13:23:21.973]         if (TRUE) {
[13:23:21.973]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:23:21.973]                 open = "w")
[13:23:21.973]         }
[13:23:21.973]         else {
[13:23:21.973]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:23:21.973]                 windows = "NUL", "/dev/null"), open = "w")
[13:23:21.973]         }
[13:23:21.973]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:23:21.973]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:23:21.973]             base::sink(type = "output", split = FALSE)
[13:23:21.973]             base::close(...future.stdout)
[13:23:21.973]         }, add = TRUE)
[13:23:21.973]     }
[13:23:21.973]     ...future.frame <- base::sys.nframe()
[13:23:21.973]     ...future.conditions <- base::list()
[13:23:21.973]     ...future.rng <- base::globalenv()$.Random.seed
[13:23:21.973]     if (FALSE) {
[13:23:21.973]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:23:21.973]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:23:21.973]     }
[13:23:21.973]     ...future.result <- base::tryCatch({
[13:23:21.973]         base::withCallingHandlers({
[13:23:21.973]             ...future.value <- base::withVisible(base::local(getOption("future.globals.onMissing")))
[13:23:21.973]             future::FutureResult(value = ...future.value$value, 
[13:23:21.973]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:23:21.973]                   ...future.rng), globalenv = if (FALSE) 
[13:23:21.973]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:23:21.973]                     ...future.globalenv.names))
[13:23:21.973]                 else NULL, started = ...future.startTime, version = "1.8")
[13:23:21.973]         }, condition = base::local({
[13:23:21.973]             c <- base::c
[13:23:21.973]             inherits <- base::inherits
[13:23:21.973]             invokeRestart <- base::invokeRestart
[13:23:21.973]             length <- base::length
[13:23:21.973]             list <- base::list
[13:23:21.973]             seq.int <- base::seq.int
[13:23:21.973]             signalCondition <- base::signalCondition
[13:23:21.973]             sys.calls <- base::sys.calls
[13:23:21.973]             `[[` <- base::`[[`
[13:23:21.973]             `+` <- base::`+`
[13:23:21.973]             `<<-` <- base::`<<-`
[13:23:21.973]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:23:21.973]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:23:21.973]                   3L)]
[13:23:21.973]             }
[13:23:21.973]             function(cond) {
[13:23:21.973]                 is_error <- inherits(cond, "error")
[13:23:21.973]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:23:21.973]                   NULL)
[13:23:21.973]                 if (is_error) {
[13:23:21.973]                   sessionInformation <- function() {
[13:23:21.973]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:23:21.973]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:23:21.973]                       search = base::search(), system = base::Sys.info())
[13:23:21.973]                   }
[13:23:21.973]                   ...future.conditions[[length(...future.conditions) + 
[13:23:21.973]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:23:21.973]                     cond$call), session = sessionInformation(), 
[13:23:21.973]                     timestamp = base::Sys.time(), signaled = 0L)
[13:23:21.973]                   signalCondition(cond)
[13:23:21.973]                 }
[13:23:21.973]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:23:21.973]                 "immediateCondition"))) {
[13:23:21.973]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:23:21.973]                   ...future.conditions[[length(...future.conditions) + 
[13:23:21.973]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:23:21.973]                   if (TRUE && !signal) {
[13:23:21.973]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:23:21.973]                     {
[13:23:21.973]                       inherits <- base::inherits
[13:23:21.973]                       invokeRestart <- base::invokeRestart
[13:23:21.973]                       is.null <- base::is.null
[13:23:21.973]                       muffled <- FALSE
[13:23:21.973]                       if (inherits(cond, "message")) {
[13:23:21.973]                         muffled <- grepl(pattern, "muffleMessage")
[13:23:21.973]                         if (muffled) 
[13:23:21.973]                           invokeRestart("muffleMessage")
[13:23:21.973]                       }
[13:23:21.973]                       else if (inherits(cond, "warning")) {
[13:23:21.973]                         muffled <- grepl(pattern, "muffleWarning")
[13:23:21.973]                         if (muffled) 
[13:23:21.973]                           invokeRestart("muffleWarning")
[13:23:21.973]                       }
[13:23:21.973]                       else if (inherits(cond, "condition")) {
[13:23:21.973]                         if (!is.null(pattern)) {
[13:23:21.973]                           computeRestarts <- base::computeRestarts
[13:23:21.973]                           grepl <- base::grepl
[13:23:21.973]                           restarts <- computeRestarts(cond)
[13:23:21.973]                           for (restart in restarts) {
[13:23:21.973]                             name <- restart$name
[13:23:21.973]                             if (is.null(name)) 
[13:23:21.973]                               next
[13:23:21.973]                             if (!grepl(pattern, name)) 
[13:23:21.973]                               next
[13:23:21.973]                             invokeRestart(restart)
[13:23:21.973]                             muffled <- TRUE
[13:23:21.973]                             break
[13:23:21.973]                           }
[13:23:21.973]                         }
[13:23:21.973]                       }
[13:23:21.973]                       invisible(muffled)
[13:23:21.973]                     }
[13:23:21.973]                     muffleCondition(cond, pattern = "^muffle")
[13:23:21.973]                   }
[13:23:21.973]                 }
[13:23:21.973]                 else {
[13:23:21.973]                   if (TRUE) {
[13:23:21.973]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:23:21.973]                     {
[13:23:21.973]                       inherits <- base::inherits
[13:23:21.973]                       invokeRestart <- base::invokeRestart
[13:23:21.973]                       is.null <- base::is.null
[13:23:21.973]                       muffled <- FALSE
[13:23:21.973]                       if (inherits(cond, "message")) {
[13:23:21.973]                         muffled <- grepl(pattern, "muffleMessage")
[13:23:21.973]                         if (muffled) 
[13:23:21.973]                           invokeRestart("muffleMessage")
[13:23:21.973]                       }
[13:23:21.973]                       else if (inherits(cond, "warning")) {
[13:23:21.973]                         muffled <- grepl(pattern, "muffleWarning")
[13:23:21.973]                         if (muffled) 
[13:23:21.973]                           invokeRestart("muffleWarning")
[13:23:21.973]                       }
[13:23:21.973]                       else if (inherits(cond, "condition")) {
[13:23:21.973]                         if (!is.null(pattern)) {
[13:23:21.973]                           computeRestarts <- base::computeRestarts
[13:23:21.973]                           grepl <- base::grepl
[13:23:21.973]                           restarts <- computeRestarts(cond)
[13:23:21.973]                           for (restart in restarts) {
[13:23:21.973]                             name <- restart$name
[13:23:21.973]                             if (is.null(name)) 
[13:23:21.973]                               next
[13:23:21.973]                             if (!grepl(pattern, name)) 
[13:23:21.973]                               next
[13:23:21.973]                             invokeRestart(restart)
[13:23:21.973]                             muffled <- TRUE
[13:23:21.973]                             break
[13:23:21.973]                           }
[13:23:21.973]                         }
[13:23:21.973]                       }
[13:23:21.973]                       invisible(muffled)
[13:23:21.973]                     }
[13:23:21.973]                     muffleCondition(cond, pattern = "^muffle")
[13:23:21.973]                   }
[13:23:21.973]                 }
[13:23:21.973]             }
[13:23:21.973]         }))
[13:23:21.973]     }, error = function(ex) {
[13:23:21.973]         base::structure(base::list(value = NULL, visible = NULL, 
[13:23:21.973]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:23:21.973]                 ...future.rng), started = ...future.startTime, 
[13:23:21.973]             finished = Sys.time(), session_uuid = NA_character_, 
[13:23:21.973]             version = "1.8"), class = "FutureResult")
[13:23:21.973]     }, finally = {
[13:23:21.973]         if (!identical(...future.workdir, getwd())) 
[13:23:21.973]             setwd(...future.workdir)
[13:23:21.973]         {
[13:23:21.973]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:23:21.973]                 ...future.oldOptions$nwarnings <- NULL
[13:23:21.973]             }
[13:23:21.973]             base::options(...future.oldOptions)
[13:23:21.973]             if (.Platform$OS.type == "windows") {
[13:23:21.973]                 old_names <- names(...future.oldEnvVars)
[13:23:21.973]                 envs <- base::Sys.getenv()
[13:23:21.973]                 names <- names(envs)
[13:23:21.973]                 common <- intersect(names, old_names)
[13:23:21.973]                 added <- setdiff(names, old_names)
[13:23:21.973]                 removed <- setdiff(old_names, names)
[13:23:21.973]                 changed <- common[...future.oldEnvVars[common] != 
[13:23:21.973]                   envs[common]]
[13:23:21.973]                 NAMES <- toupper(changed)
[13:23:21.973]                 args <- list()
[13:23:21.973]                 for (kk in seq_along(NAMES)) {
[13:23:21.973]                   name <- changed[[kk]]
[13:23:21.973]                   NAME <- NAMES[[kk]]
[13:23:21.973]                   if (name != NAME && is.element(NAME, old_names)) 
[13:23:21.973]                     next
[13:23:21.973]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:23:21.973]                 }
[13:23:21.973]                 NAMES <- toupper(added)
[13:23:21.973]                 for (kk in seq_along(NAMES)) {
[13:23:21.973]                   name <- added[[kk]]
[13:23:21.973]                   NAME <- NAMES[[kk]]
[13:23:21.973]                   if (name != NAME && is.element(NAME, old_names)) 
[13:23:21.973]                     next
[13:23:21.973]                   args[[name]] <- ""
[13:23:21.973]                 }
[13:23:21.973]                 NAMES <- toupper(removed)
[13:23:21.973]                 for (kk in seq_along(NAMES)) {
[13:23:21.973]                   name <- removed[[kk]]
[13:23:21.973]                   NAME <- NAMES[[kk]]
[13:23:21.973]                   if (name != NAME && is.element(NAME, old_names)) 
[13:23:21.973]                     next
[13:23:21.973]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:23:21.973]                 }
[13:23:21.973]                 if (length(args) > 0) 
[13:23:21.973]                   base::do.call(base::Sys.setenv, args = args)
[13:23:21.973]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:23:21.973]             }
[13:23:21.973]             else {
[13:23:21.973]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:23:21.973]             }
[13:23:21.973]             {
[13:23:21.973]                 if (base::length(...future.futureOptionsAdded) > 
[13:23:21.973]                   0L) {
[13:23:21.973]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:23:21.973]                   base::names(opts) <- ...future.futureOptionsAdded
[13:23:21.973]                   base::options(opts)
[13:23:21.973]                 }
[13:23:21.973]                 {
[13:23:21.973]                   {
[13:23:21.973]                     NULL
[13:23:21.973]                     RNGkind("Mersenne-Twister")
[13:23:21.973]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[13:23:21.973]                       inherits = FALSE)
[13:23:21.973]                   }
[13:23:21.973]                   options(future.plan = NULL)
[13:23:21.973]                   if (is.na(NA_character_)) 
[13:23:21.973]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:23:21.973]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:23:21.973]                   future::plan(list(function (..., envir = parent.frame()) 
[13:23:21.973]                   {
[13:23:21.973]                     future <- SequentialFuture(..., envir = envir)
[13:23:21.973]                     if (!future$lazy) 
[13:23:21.973]                       future <- run(future)
[13:23:21.973]                     invisible(future)
[13:23:21.973]                   }), .cleanup = FALSE, .init = FALSE)
[13:23:21.973]                 }
[13:23:21.973]             }
[13:23:21.973]         }
[13:23:21.973]     })
[13:23:21.973]     if (TRUE) {
[13:23:21.973]         base::sink(type = "output", split = FALSE)
[13:23:21.973]         if (TRUE) {
[13:23:21.973]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:23:21.973]         }
[13:23:21.973]         else {
[13:23:21.973]             ...future.result["stdout"] <- base::list(NULL)
[13:23:21.973]         }
[13:23:21.973]         base::close(...future.stdout)
[13:23:21.973]         ...future.stdout <- NULL
[13:23:21.973]     }
[13:23:21.973]     ...future.result$conditions <- ...future.conditions
[13:23:21.973]     ...future.result$finished <- base::Sys.time()
[13:23:21.973]     ...future.result
[13:23:21.973] }
[13:23:21.975] plan(): Setting new future strategy stack:
[13:23:21.975] List of future strategies:
[13:23:21.975] 1. sequential:
[13:23:21.975]    - args: function (..., envir = parent.frame())
[13:23:21.975]    - tweaked: FALSE
[13:23:21.975]    - call: NULL
[13:23:21.975] plan(): nbrOfWorkers() = 1
[13:23:21.976] plan(): Setting new future strategy stack:
[13:23:21.976] List of future strategies:
[13:23:21.976] 1. sequential:
[13:23:21.976]    - args: function (..., envir = parent.frame())
[13:23:21.976]    - tweaked: FALSE
[13:23:21.976]    - call: plan(strategy)
[13:23:21.977] plan(): nbrOfWorkers() = 1
[13:23:21.977] SequentialFuture started (and completed)
[13:23:21.977] - Launch lazy future ... done
[13:23:21.977] run() for ‘SequentialFuture’ ... done
[13:23:21.977] getGlobalsAndPackages() ...
Warning: R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘error’
[13:23:21.978] Searching for globals...
[13:23:21.979] getGlobalsAndPackages() ...
Warning: R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘ignore’
[13:23:21.979] Searching for globals...
[13:23:21.980] - globals found: [5] ‘$’, ‘subset’, ‘data’, ‘<’, ‘x’
[13:23:21.980] Searching for globals ... DONE
[13:23:21.980] Resolving globals: FALSE
[13:23:21.984] The total size of the 1 globals is 160 bytes (160 bytes)
[13:23:21.985] The total size of the 1 globals exported for future expression (‘subset(data, x < 3)$y’) is 160 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘data’ (160 bytes of class ‘list’)
[13:23:21.985] - globals: [1] ‘data’
[13:23:21.985] 
[13:23:21.985] getGlobalsAndPackages() ... DONE
[13:23:21.986] run() for ‘Future’ ...
[13:23:21.986] - state: ‘created’
[13:23:21.986] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[13:23:21.986] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[13:23:21.986] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[13:23:21.986]   - Field: ‘label’
[13:23:21.986]   - Field: ‘local’
[13:23:21.987]   - Field: ‘owner’
[13:23:21.987]   - Field: ‘envir’
[13:23:21.987]   - Field: ‘packages’
[13:23:21.987]   - Field: ‘gc’
[13:23:21.987]   - Field: ‘conditions’
[13:23:21.987]   - Field: ‘expr’
[13:23:21.987]   - Field: ‘uuid’
[13:23:21.987]   - Field: ‘seed’
[13:23:21.987]   - Field: ‘version’
[13:23:21.987]   - Field: ‘result’
[13:23:21.987]   - Field: ‘asynchronous’
[13:23:21.988]   - Field: ‘calls’
[13:23:21.988]   - Field: ‘globals’
[13:23:21.988]   - Field: ‘stdout’
[13:23:21.988]   - Field: ‘earlySignal’
[13:23:21.988]   - Field: ‘lazy’
[13:23:21.988]   - Field: ‘state’
[13:23:21.988] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[13:23:21.988] - Launch lazy future ...
[13:23:21.988] Packages needed by the future expression (n = 0): <none>
[13:23:21.989] Packages needed by future strategies (n = 0): <none>
[13:23:21.989] {
[13:23:21.989]     {
[13:23:21.989]         {
[13:23:21.989]             ...future.startTime <- base::Sys.time()
[13:23:21.989]             {
[13:23:21.989]                 {
[13:23:21.989]                   {
[13:23:21.989]                     base::local({
[13:23:21.989]                       has_future <- base::requireNamespace("future", 
[13:23:21.989]                         quietly = TRUE)
[13:23:21.989]                       if (has_future) {
[13:23:21.989]                         ns <- base::getNamespace("future")
[13:23:21.989]                         version <- ns[[".package"]][["version"]]
[13:23:21.989]                         if (is.null(version)) 
[13:23:21.989]                           version <- utils::packageVersion("future")
[13:23:21.989]                       }
[13:23:21.989]                       else {
[13:23:21.989]                         version <- NULL
[13:23:21.989]                       }
[13:23:21.989]                       if (!has_future || version < "1.8.0") {
[13:23:21.989]                         info <- base::c(r_version = base::gsub("R version ", 
[13:23:21.989]                           "", base::R.version$version.string), 
[13:23:21.989]                           platform = base::sprintf("%s (%s-bit)", 
[13:23:21.989]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:23:21.989]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[13:23:21.989]                             "release", "version")], collapse = " "), 
[13:23:21.989]                           hostname = base::Sys.info()[["nodename"]])
[13:23:21.989]                         info <- base::sprintf("%s: %s", base::names(info), 
[13:23:21.989]                           info)
[13:23:21.989]                         info <- base::paste(info, collapse = "; ")
[13:23:21.989]                         if (!has_future) {
[13:23:21.989]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:23:21.989]                             info)
[13:23:21.989]                         }
[13:23:21.989]                         else {
[13:23:21.989]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:23:21.989]                             info, version)
[13:23:21.989]                         }
[13:23:21.989]                         base::stop(msg)
[13:23:21.989]                       }
[13:23:21.989]                     })
[13:23:21.989]                   }
[13:23:21.989]                   options(future.plan = NULL)
[13:23:21.989]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:23:21.989]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:23:21.989]                 }
[13:23:21.989]                 ...future.workdir <- getwd()
[13:23:21.989]             }
[13:23:21.989]             ...future.oldOptions <- base::as.list(base::.Options)
[13:23:21.989]             ...future.oldEnvVars <- base::Sys.getenv()
[13:23:21.989]         }
[13:23:21.989]         base::options(future.startup.script = FALSE, future.globals.onMissing = "ignore", 
[13:23:21.989]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:23:21.989]             future.globals.onMissing = "ignore", future.globals.onReference = NULL, 
[13:23:21.989]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:23:21.989]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:23:21.989]             future.stdout.windows.reencode = NULL, width = 80L)
[13:23:21.989]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:23:21.989]             base::names(...future.oldOptions))
[13:23:21.989]     }
[13:23:21.989]     if (FALSE) {
[13:23:21.989]     }
[13:23:21.989]     else {
[13:23:21.989]         if (TRUE) {
[13:23:21.989]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:23:21.989]                 open = "w")
[13:23:21.989]         }
[13:23:21.989]         else {
[13:23:21.989]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:23:21.989]                 windows = "NUL", "/dev/null"), open = "w")
[13:23:21.989]         }
[13:23:21.989]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:23:21.989]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:23:21.989]             base::sink(type = "output", split = FALSE)
[13:23:21.989]             base::close(...future.stdout)
[13:23:21.989]         }, add = TRUE)
[13:23:21.989]     }
[13:23:21.989]     ...future.frame <- base::sys.nframe()
[13:23:21.989]     ...future.conditions <- base::list()
[13:23:21.989]     ...future.rng <- base::globalenv()$.Random.seed
[13:23:21.989]     if (FALSE) {
[13:23:21.989]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:23:21.989]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:23:21.989]     }
[13:23:21.989]     ...future.result <- base::tryCatch({
[13:23:21.989]         base::withCallingHandlers({
[13:23:21.989]             ...future.value <- base::withVisible(base::local(subset(data, 
[13:23:21.989]                 x < 3)$y))
[13:23:21.989]             future::FutureResult(value = ...future.value$value, 
[13:23:21.989]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:23:21.989]                   ...future.rng), globalenv = if (FALSE) 
[13:23:21.989]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:23:21.989]                     ...future.globalenv.names))
[13:23:21.989]                 else NULL, started = ...future.startTime, version = "1.8")
[13:23:21.989]         }, condition = base::local({
[13:23:21.989]             c <- base::c
[13:23:21.989]             inherits <- base::inherits
[13:23:21.989]             invokeRestart <- base::invokeRestart
[13:23:21.989]             length <- base::length
[13:23:21.989]             list <- base::list
[13:23:21.989]             seq.int <- base::seq.int
[13:23:21.989]             signalCondition <- base::signalCondition
[13:23:21.989]             sys.calls <- base::sys.calls
[13:23:21.989]             `[[` <- base::`[[`
[13:23:21.989]             `+` <- base::`+`
[13:23:21.989]             `<<-` <- base::`<<-`
[13:23:21.989]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:23:21.989]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:23:21.989]                   3L)]
[13:23:21.989]             }
[13:23:21.989]             function(cond) {
[13:23:21.989]                 is_error <- inherits(cond, "error")
[13:23:21.989]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:23:21.989]                   NULL)
[13:23:21.989]                 if (is_error) {
[13:23:21.989]                   sessionInformation <- function() {
[13:23:21.989]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:23:21.989]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:23:21.989]                       search = base::search(), system = base::Sys.info())
[13:23:21.989]                   }
[13:23:21.989]                   ...future.conditions[[length(...future.conditions) + 
[13:23:21.989]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:23:21.989]                     cond$call), session = sessionInformation(), 
[13:23:21.989]                     timestamp = base::Sys.time(), signaled = 0L)
[13:23:21.989]                   signalCondition(cond)
[13:23:21.989]                 }
[13:23:21.989]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:23:21.989]                 "immediateCondition"))) {
[13:23:21.989]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:23:21.989]                   ...future.conditions[[length(...future.conditions) + 
[13:23:21.989]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:23:21.989]                   if (TRUE && !signal) {
[13:23:21.989]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:23:21.989]                     {
[13:23:21.989]                       inherits <- base::inherits
[13:23:21.989]                       invokeRestart <- base::invokeRestart
[13:23:21.989]                       is.null <- base::is.null
[13:23:21.989]                       muffled <- FALSE
[13:23:21.989]                       if (inherits(cond, "message")) {
[13:23:21.989]                         muffled <- grepl(pattern, "muffleMessage")
[13:23:21.989]                         if (muffled) 
[13:23:21.989]                           invokeRestart("muffleMessage")
[13:23:21.989]                       }
[13:23:21.989]                       else if (inherits(cond, "warning")) {
[13:23:21.989]                         muffled <- grepl(pattern, "muffleWarning")
[13:23:21.989]                         if (muffled) 
[13:23:21.989]                           invokeRestart("muffleWarning")
[13:23:21.989]                       }
[13:23:21.989]                       else if (inherits(cond, "condition")) {
[13:23:21.989]                         if (!is.null(pattern)) {
[13:23:21.989]                           computeRestarts <- base::computeRestarts
[13:23:21.989]                           grepl <- base::grepl
[13:23:21.989]                           restarts <- computeRestarts(cond)
[13:23:21.989]                           for (restart in restarts) {
[13:23:21.989]                             name <- restart$name
[13:23:21.989]                             if (is.null(name)) 
[13:23:21.989]                               next
[13:23:21.989]                             if (!grepl(pattern, name)) 
[13:23:21.989]                               next
[13:23:21.989]                             invokeRestart(restart)
[13:23:21.989]                             muffled <- TRUE
[13:23:21.989]                             break
[13:23:21.989]                           }
[13:23:21.989]                         }
[13:23:21.989]                       }
[13:23:21.989]                       invisible(muffled)
[13:23:21.989]                     }
[13:23:21.989]                     muffleCondition(cond, pattern = "^muffle")
[13:23:21.989]                   }
[13:23:21.989]                 }
[13:23:21.989]                 else {
[13:23:21.989]                   if (TRUE) {
[13:23:21.989]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:23:21.989]                     {
[13:23:21.989]                       inherits <- base::inherits
[13:23:21.989]                       invokeRestart <- base::invokeRestart
[13:23:21.989]                       is.null <- base::is.null
[13:23:21.989]                       muffled <- FALSE
[13:23:21.989]                       if (inherits(cond, "message")) {
[13:23:21.989]                         muffled <- grepl(pattern, "muffleMessage")
[13:23:21.989]                         if (muffled) 
[13:23:21.989]                           invokeRestart("muffleMessage")
[13:23:21.989]                       }
[13:23:21.989]                       else if (inherits(cond, "warning")) {
[13:23:21.989]                         muffled <- grepl(pattern, "muffleWarning")
[13:23:21.989]                         if (muffled) 
[13:23:21.989]                           invokeRestart("muffleWarning")
[13:23:21.989]                       }
[13:23:21.989]                       else if (inherits(cond, "condition")) {
[13:23:21.989]                         if (!is.null(pattern)) {
[13:23:21.989]                           computeRestarts <- base::computeRestarts
[13:23:21.989]                           grepl <- base::grepl
[13:23:21.989]                           restarts <- computeRestarts(cond)
[13:23:21.989]                           for (restart in restarts) {
[13:23:21.989]                             name <- restart$name
[13:23:21.989]                             if (is.null(name)) 
[13:23:21.989]                               next
[13:23:21.989]                             if (!grepl(pattern, name)) 
[13:23:21.989]                               next
[13:23:21.989]                             invokeRestart(restart)
[13:23:21.989]                             muffled <- TRUE
[13:23:21.989]                             break
[13:23:21.989]                           }
[13:23:21.989]                         }
[13:23:21.989]                       }
[13:23:21.989]                       invisible(muffled)
[13:23:21.989]                     }
[13:23:21.989]                     muffleCondition(cond, pattern = "^muffle")
[13:23:21.989]                   }
[13:23:21.989]                 }
[13:23:21.989]             }
[13:23:21.989]         }))
[13:23:21.989]     }, error = function(ex) {
[13:23:21.989]         base::structure(base::list(value = NULL, visible = NULL, 
[13:23:21.989]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:23:21.989]                 ...future.rng), started = ...future.startTime, 
[13:23:21.989]             finished = Sys.time(), session_uuid = NA_character_, 
[13:23:21.989]             version = "1.8"), class = "FutureResult")
[13:23:21.989]     }, finally = {
[13:23:21.989]         if (!identical(...future.workdir, getwd())) 
[13:23:21.989]             setwd(...future.workdir)
[13:23:21.989]         {
[13:23:21.989]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:23:21.989]                 ...future.oldOptions$nwarnings <- NULL
[13:23:21.989]             }
[13:23:21.989]             base::options(...future.oldOptions)
[13:23:21.989]             if (.Platform$OS.type == "windows") {
[13:23:21.989]                 old_names <- names(...future.oldEnvVars)
[13:23:21.989]                 envs <- base::Sys.getenv()
[13:23:21.989]                 names <- names(envs)
[13:23:21.989]                 common <- intersect(names, old_names)
[13:23:21.989]                 added <- setdiff(names, old_names)
[13:23:21.989]                 removed <- setdiff(old_names, names)
[13:23:21.989]                 changed <- common[...future.oldEnvVars[common] != 
[13:23:21.989]                   envs[common]]
[13:23:21.989]                 NAMES <- toupper(changed)
[13:23:21.989]                 args <- list()
[13:23:21.989]                 for (kk in seq_along(NAMES)) {
[13:23:21.989]                   name <- changed[[kk]]
[13:23:21.989]                   NAME <- NAMES[[kk]]
[13:23:21.989]                   if (name != NAME && is.element(NAME, old_names)) 
[13:23:21.989]                     next
[13:23:21.989]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:23:21.989]                 }
[13:23:21.989]                 NAMES <- toupper(added)
[13:23:21.989]                 for (kk in seq_along(NAMES)) {
[13:23:21.989]                   name <- added[[kk]]
[13:23:21.989]                   NAME <- NAMES[[kk]]
[13:23:21.989]                   if (name != NAME && is.element(NAME, old_names)) 
[13:23:21.989]                     next
[13:23:21.989]                   args[[name]] <- ""
[13:23:21.989]                 }
[13:23:21.989]                 NAMES <- toupper(removed)
[13:23:21.989]                 for (kk in seq_along(NAMES)) {
[13:23:21.989]                   name <- removed[[kk]]
[13:23:21.989]                   NAME <- NAMES[[kk]]
[13:23:21.989]                   if (name != NAME && is.element(NAME, old_names)) 
[13:23:21.989]                     next
[13:23:21.989]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:23:21.989]                 }
[13:23:21.989]                 if (length(args) > 0) 
[13:23:21.989]                   base::do.call(base::Sys.setenv, args = args)
[13:23:21.989]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:23:21.989]             }
[13:23:21.989]             else {
[13:23:21.989]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:23:21.989]             }
[13:23:21.989]             {
[13:23:21.989]                 if (base::length(...future.futureOptionsAdded) > 
[13:23:21.989]                   0L) {
[13:23:21.989]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:23:21.989]                   base::names(opts) <- ...future.futureOptionsAdded
[13:23:21.989]                   base::options(opts)
[13:23:21.989]                 }
[13:23:21.989]                 {
[13:23:21.989]                   {
[13:23:21.989]                     NULL
[13:23:21.989]                     RNGkind("Mersenne-Twister")
[13:23:21.989]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[13:23:21.989]                       inherits = FALSE)
[13:23:21.989]                   }
[13:23:21.989]                   options(future.plan = NULL)
[13:23:21.989]                   if (is.na(NA_character_)) 
[13:23:21.989]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:23:21.989]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:23:21.989]                   future::plan(list(function (..., envir = parent.frame()) 
[13:23:21.989]                   {
[13:23:21.989]                     future <- SequentialFuture(..., envir = envir)
[13:23:21.989]                     if (!future$lazy) 
[13:23:21.989]                       future <- run(future)
[13:23:21.989]                     invisible(future)
[13:23:21.989]                   }), .cleanup = FALSE, .init = FALSE)
[13:23:21.989]                 }
[13:23:21.989]             }
[13:23:21.989]         }
[13:23:21.989]     })
[13:23:21.989]     if (TRUE) {
[13:23:21.989]         base::sink(type = "output", split = FALSE)
[13:23:21.989]         if (TRUE) {
[13:23:21.989]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:23:21.989]         }
[13:23:21.989]         else {
[13:23:21.989]             ...future.result["stdout"] <- base::list(NULL)
[13:23:21.989]         }
[13:23:21.989]         base::close(...future.stdout)
[13:23:21.989]         ...future.stdout <- NULL
[13:23:21.989]     }
[13:23:21.989]     ...future.result$conditions <- ...future.conditions
[13:23:21.989]     ...future.result$finished <- base::Sys.time()
[13:23:21.989]     ...future.result
[13:23:21.989] }
[13:23:21.991] assign_globals() ...
[13:23:21.991] List of 1
[13:23:21.991]  $ data:'data.frame':	5 obs. of  2 variables:
[13:23:21.991]   ..$ x: int [1:5] 1 2 3 4 5
[13:23:21.991]   ..$ y: int [1:5] 1 2 3 4 5
[13:23:21.991]  - attr(*, "where")=List of 1
[13:23:21.991]   ..$ data:<environment: R_EmptyEnv> 
[13:23:21.991]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[13:23:21.991]  - attr(*, "resolved")= logi FALSE
[13:23:21.991]  - attr(*, "total_size")= num 160
[13:23:21.991]  - attr(*, "already-done")= logi TRUE
[13:23:21.997] - copied ‘data’ to environment
[13:23:21.997] assign_globals() ... done
[13:23:21.997] plan(): Setting new future strategy stack:
[13:23:21.997] List of future strategies:
[13:23:21.997] 1. sequential:
[13:23:21.997]    - args: function (..., envir = parent.frame())
[13:23:21.997]    - tweaked: FALSE
[13:23:21.997]    - call: NULL
[13:23:21.998] plan(): nbrOfWorkers() = 1
[13:23:21.999] plan(): Setting new future strategy stack:
[13:23:21.999] List of future strategies:
[13:23:21.999] 1. sequential:
[13:23:21.999]    - args: function (..., envir = parent.frame())
[13:23:21.999]    - tweaked: FALSE
[13:23:21.999]    - call: plan(strategy)
[13:23:21.999] plan(): nbrOfWorkers() = 1
[13:23:21.999] SequentialFuture started (and completed)
[13:23:21.999] - Launch lazy future ... done
[13:23:22.000] run() for ‘SequentialFuture’ ... done
[13:23:22.000] plan(): Setting new future strategy stack:
[13:23:22.000] List of future strategies:
[13:23:22.000] 1. sequential:
[13:23:22.000]    - args: function (..., envir = parent.frame())
[13:23:22.000]    - tweaked: FALSE
[13:23:22.000]    - call: plan(list(sequential, strategy))
[13:23:22.000] 2. sequential:
[13:23:22.000]    - args: function (..., envir = parent.frame())
[13:23:22.000]    - tweaked: FALSE
[13:23:22.000]    - call: plan(list(sequential, strategy))
[13:23:22.001] plan(): nbrOfWorkers() = 1
[13:23:22.001] getGlobalsAndPackages() ...
Warning: R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘ignore’
[13:23:22.001] Searching for globals...
[13:23:22.006] - globals found: [8] ‘{’, ‘<-’, ‘$’, ‘subset’, ‘data’, ‘<’, ‘x’, ‘%<-%’
[13:23:22.007] Searching for globals ... DONE
[13:23:22.007] Resolving globals: FALSE
[13:23:22.007] The total size of the 1 globals is 160 bytes (160 bytes)
[13:23:22.008] The total size of the 1 globals exported for future expression (‘{; a %<-% subset(data, x < 3)$y; a; }’) is 160 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘data’ (160 bytes of class ‘list’)
[13:23:22.008] - globals: [1] ‘data’
[13:23:22.008] - packages: [1] ‘future’
[13:23:22.008] getGlobalsAndPackages() ... DONE
[13:23:22.008] run() for ‘Future’ ...
[13:23:22.009] - state: ‘created’
[13:23:22.009] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[13:23:22.009] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[13:23:22.009] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[13:23:22.009]   - Field: ‘label’
[13:23:22.009]   - Field: ‘local’
[13:23:22.009]   - Field: ‘owner’
[13:23:22.010]   - Field: ‘envir’
[13:23:22.010]   - Field: ‘packages’
[13:23:22.010]   - Field: ‘gc’
[13:23:22.010]   - Field: ‘conditions’
[13:23:22.010]   - Field: ‘expr’
[13:23:22.010]   - Field: ‘uuid’
[13:23:22.010]   - Field: ‘seed’
[13:23:22.010]   - Field: ‘version’
[13:23:22.010]   - Field: ‘result’
[13:23:22.010]   - Field: ‘asynchronous’
[13:23:22.010]   - Field: ‘calls’
[13:23:22.011]   - Field: ‘globals’
[13:23:22.011]   - Field: ‘stdout’
[13:23:22.011]   - Field: ‘earlySignal’
[13:23:22.011]   - Field: ‘lazy’
[13:23:22.011]   - Field: ‘state’
[13:23:22.011] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[13:23:22.011] - Launch lazy future ...
[13:23:22.011] Packages needed by the future expression (n = 1): ‘future’
[13:23:22.011] Packages needed by future strategies (n = 1): ‘future’
[13:23:22.012] {
[13:23:22.012]     {
[13:23:22.012]         {
[13:23:22.012]             ...future.startTime <- base::Sys.time()
[13:23:22.012]             {
[13:23:22.012]                 {
[13:23:22.012]                   {
[13:23:22.012]                     {
[13:23:22.012]                       base::local({
[13:23:22.012]                         has_future <- base::requireNamespace("future", 
[13:23:22.012]                           quietly = TRUE)
[13:23:22.012]                         if (has_future) {
[13:23:22.012]                           ns <- base::getNamespace("future")
[13:23:22.012]                           version <- ns[[".package"]][["version"]]
[13:23:22.012]                           if (is.null(version)) 
[13:23:22.012]                             version <- utils::packageVersion("future")
[13:23:22.012]                         }
[13:23:22.012]                         else {
[13:23:22.012]                           version <- NULL
[13:23:22.012]                         }
[13:23:22.012]                         if (!has_future || version < "1.8.0") {
[13:23:22.012]                           info <- base::c(r_version = base::gsub("R version ", 
[13:23:22.012]                             "", base::R.version$version.string), 
[13:23:22.012]                             platform = base::sprintf("%s (%s-bit)", 
[13:23:22.012]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:23:22.012]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:23:22.012]                               "release", "version")], collapse = " "), 
[13:23:22.012]                             hostname = base::Sys.info()[["nodename"]])
[13:23:22.012]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:23:22.012]                             info)
[13:23:22.012]                           info <- base::paste(info, collapse = "; ")
[13:23:22.012]                           if (!has_future) {
[13:23:22.012]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:23:22.012]                               info)
[13:23:22.012]                           }
[13:23:22.012]                           else {
[13:23:22.012]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:23:22.012]                               info, version)
[13:23:22.012]                           }
[13:23:22.012]                           base::stop(msg)
[13:23:22.012]                         }
[13:23:22.012]                       })
[13:23:22.012]                     }
[13:23:22.012]                     base::local({
[13:23:22.012]                       for (pkg in "future") {
[13:23:22.012]                         base::loadNamespace(pkg)
[13:23:22.012]                         base::library(pkg, character.only = TRUE)
[13:23:22.012]                       }
[13:23:22.012]                     })
[13:23:22.012]                   }
[13:23:22.012]                   options(future.plan = NULL)
[13:23:22.012]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:23:22.012]                   future::plan(list(function (..., envir = parent.frame()) 
[13:23:22.012]                   {
[13:23:22.012]                     future <- SequentialFuture(..., envir = envir)
[13:23:22.012]                     if (!future$lazy) 
[13:23:22.012]                       future <- run(future)
[13:23:22.012]                     invisible(future)
[13:23:22.012]                   }), .cleanup = FALSE, .init = FALSE)
[13:23:22.012]                 }
[13:23:22.012]                 ...future.workdir <- getwd()
[13:23:22.012]             }
[13:23:22.012]             ...future.oldOptions <- base::as.list(base::.Options)
[13:23:22.012]             ...future.oldEnvVars <- base::Sys.getenv()
[13:23:22.012]         }
[13:23:22.012]         base::options(future.startup.script = FALSE, future.globals.onMissing = "ignore", 
[13:23:22.012]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:23:22.012]             future.globals.onMissing = "ignore", future.globals.onReference = NULL, 
[13:23:22.012]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:23:22.012]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:23:22.012]             future.stdout.windows.reencode = NULL, width = 80L)
[13:23:22.012]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:23:22.012]             base::names(...future.oldOptions))
[13:23:22.012]     }
[13:23:22.012]     if (FALSE) {
[13:23:22.012]     }
[13:23:22.012]     else {
[13:23:22.012]         if (TRUE) {
[13:23:22.012]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:23:22.012]                 open = "w")
[13:23:22.012]         }
[13:23:22.012]         else {
[13:23:22.012]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:23:22.012]                 windows = "NUL", "/dev/null"), open = "w")
[13:23:22.012]         }
[13:23:22.012]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:23:22.012]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:23:22.012]             base::sink(type = "output", split = FALSE)
[13:23:22.012]             base::close(...future.stdout)
[13:23:22.012]         }, add = TRUE)
[13:23:22.012]     }
[13:23:22.012]     ...future.frame <- base::sys.nframe()
[13:23:22.012]     ...future.conditions <- base::list()
[13:23:22.012]     ...future.rng <- base::globalenv()$.Random.seed
[13:23:22.012]     if (FALSE) {
[13:23:22.012]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:23:22.012]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:23:22.012]     }
[13:23:22.012]     ...future.result <- base::tryCatch({
[13:23:22.012]         base::withCallingHandlers({
[13:23:22.012]             ...future.value <- base::withVisible(base::local({
[13:23:22.012]                 a %<-% subset(data, x < 3)$y
[13:23:22.012]                 a
[13:23:22.012]             }))
[13:23:22.012]             future::FutureResult(value = ...future.value$value, 
[13:23:22.012]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:23:22.012]                   ...future.rng), globalenv = if (FALSE) 
[13:23:22.012]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:23:22.012]                     ...future.globalenv.names))
[13:23:22.012]                 else NULL, started = ...future.startTime, version = "1.8")
[13:23:22.012]         }, condition = base::local({
[13:23:22.012]             c <- base::c
[13:23:22.012]             inherits <- base::inherits
[13:23:22.012]             invokeRestart <- base::invokeRestart
[13:23:22.012]             length <- base::length
[13:23:22.012]             list <- base::list
[13:23:22.012]             seq.int <- base::seq.int
[13:23:22.012]             signalCondition <- base::signalCondition
[13:23:22.012]             sys.calls <- base::sys.calls
[13:23:22.012]             `[[` <- base::`[[`
[13:23:22.012]             `+` <- base::`+`
[13:23:22.012]             `<<-` <- base::`<<-`
[13:23:22.012]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:23:22.012]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:23:22.012]                   3L)]
[13:23:22.012]             }
[13:23:22.012]             function(cond) {
[13:23:22.012]                 is_error <- inherits(cond, "error")
[13:23:22.012]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:23:22.012]                   NULL)
[13:23:22.012]                 if (is_error) {
[13:23:22.012]                   sessionInformation <- function() {
[13:23:22.012]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:23:22.012]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:23:22.012]                       search = base::search(), system = base::Sys.info())
[13:23:22.012]                   }
[13:23:22.012]                   ...future.conditions[[length(...future.conditions) + 
[13:23:22.012]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:23:22.012]                     cond$call), session = sessionInformation(), 
[13:23:22.012]                     timestamp = base::Sys.time(), signaled = 0L)
[13:23:22.012]                   signalCondition(cond)
[13:23:22.012]                 }
[13:23:22.012]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:23:22.012]                 "immediateCondition"))) {
[13:23:22.012]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:23:22.012]                   ...future.conditions[[length(...future.conditions) + 
[13:23:22.012]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:23:22.012]                   if (TRUE && !signal) {
[13:23:22.012]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:23:22.012]                     {
[13:23:22.012]                       inherits <- base::inherits
[13:23:22.012]                       invokeRestart <- base::invokeRestart
[13:23:22.012]                       is.null <- base::is.null
[13:23:22.012]                       muffled <- FALSE
[13:23:22.012]                       if (inherits(cond, "message")) {
[13:23:22.012]                         muffled <- grepl(pattern, "muffleMessage")
[13:23:22.012]                         if (muffled) 
[13:23:22.012]                           invokeRestart("muffleMessage")
[13:23:22.012]                       }
[13:23:22.012]                       else if (inherits(cond, "warning")) {
[13:23:22.012]                         muffled <- grepl(pattern, "muffleWarning")
[13:23:22.012]                         if (muffled) 
[13:23:22.012]                           invokeRestart("muffleWarning")
[13:23:22.012]                       }
[13:23:22.012]                       else if (inherits(cond, "condition")) {
[13:23:22.012]                         if (!is.null(pattern)) {
[13:23:22.012]                           computeRestarts <- base::computeRestarts
[13:23:22.012]                           grepl <- base::grepl
[13:23:22.012]                           restarts <- computeRestarts(cond)
[13:23:22.012]                           for (restart in restarts) {
[13:23:22.012]                             name <- restart$name
[13:23:22.012]                             if (is.null(name)) 
[13:23:22.012]                               next
[13:23:22.012]                             if (!grepl(pattern, name)) 
[13:23:22.012]                               next
[13:23:22.012]                             invokeRestart(restart)
[13:23:22.012]                             muffled <- TRUE
[13:23:22.012]                             break
[13:23:22.012]                           }
[13:23:22.012]                         }
[13:23:22.012]                       }
[13:23:22.012]                       invisible(muffled)
[13:23:22.012]                     }
[13:23:22.012]                     muffleCondition(cond, pattern = "^muffle")
[13:23:22.012]                   }
[13:23:22.012]                 }
[13:23:22.012]                 else {
[13:23:22.012]                   if (TRUE) {
[13:23:22.012]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:23:22.012]                     {
[13:23:22.012]                       inherits <- base::inherits
[13:23:22.012]                       invokeRestart <- base::invokeRestart
[13:23:22.012]                       is.null <- base::is.null
[13:23:22.012]                       muffled <- FALSE
[13:23:22.012]                       if (inherits(cond, "message")) {
[13:23:22.012]                         muffled <- grepl(pattern, "muffleMessage")
[13:23:22.012]                         if (muffled) 
[13:23:22.012]                           invokeRestart("muffleMessage")
[13:23:22.012]                       }
[13:23:22.012]                       else if (inherits(cond, "warning")) {
[13:23:22.012]                         muffled <- grepl(pattern, "muffleWarning")
[13:23:22.012]                         if (muffled) 
[13:23:22.012]                           invokeRestart("muffleWarning")
[13:23:22.012]                       }
[13:23:22.012]                       else if (inherits(cond, "condition")) {
[13:23:22.012]                         if (!is.null(pattern)) {
[13:23:22.012]                           computeRestarts <- base::computeRestarts
[13:23:22.012]                           grepl <- base::grepl
[13:23:22.012]                           restarts <- computeRestarts(cond)
[13:23:22.012]                           for (restart in restarts) {
[13:23:22.012]                             name <- restart$name
[13:23:22.012]                             if (is.null(name)) 
[13:23:22.012]                               next
[13:23:22.012]                             if (!grepl(pattern, name)) 
[13:23:22.012]                               next
[13:23:22.012]                             invokeRestart(restart)
[13:23:22.012]                             muffled <- TRUE
[13:23:22.012]                             break
[13:23:22.012]                           }
[13:23:22.012]                         }
[13:23:22.012]                       }
[13:23:22.012]                       invisible(muffled)
[13:23:22.012]                     }
[13:23:22.012]                     muffleCondition(cond, pattern = "^muffle")
[13:23:22.012]                   }
[13:23:22.012]                 }
[13:23:22.012]             }
[13:23:22.012]         }))
[13:23:22.012]     }, error = function(ex) {
[13:23:22.012]         base::structure(base::list(value = NULL, visible = NULL, 
[13:23:22.012]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:23:22.012]                 ...future.rng), started = ...future.startTime, 
[13:23:22.012]             finished = Sys.time(), session_uuid = NA_character_, 
[13:23:22.012]             version = "1.8"), class = "FutureResult")
[13:23:22.012]     }, finally = {
[13:23:22.012]         if (!identical(...future.workdir, getwd())) 
[13:23:22.012]             setwd(...future.workdir)
[13:23:22.012]         {
[13:23:22.012]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:23:22.012]                 ...future.oldOptions$nwarnings <- NULL
[13:23:22.012]             }
[13:23:22.012]             base::options(...future.oldOptions)
[13:23:22.012]             if (.Platform$OS.type == "windows") {
[13:23:22.012]                 old_names <- names(...future.oldEnvVars)
[13:23:22.012]                 envs <- base::Sys.getenv()
[13:23:22.012]                 names <- names(envs)
[13:23:22.012]                 common <- intersect(names, old_names)
[13:23:22.012]                 added <- setdiff(names, old_names)
[13:23:22.012]                 removed <- setdiff(old_names, names)
[13:23:22.012]                 changed <- common[...future.oldEnvVars[common] != 
[13:23:22.012]                   envs[common]]
[13:23:22.012]                 NAMES <- toupper(changed)
[13:23:22.012]                 args <- list()
[13:23:22.012]                 for (kk in seq_along(NAMES)) {
[13:23:22.012]                   name <- changed[[kk]]
[13:23:22.012]                   NAME <- NAMES[[kk]]
[13:23:22.012]                   if (name != NAME && is.element(NAME, old_names)) 
[13:23:22.012]                     next
[13:23:22.012]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:23:22.012]                 }
[13:23:22.012]                 NAMES <- toupper(added)
[13:23:22.012]                 for (kk in seq_along(NAMES)) {
[13:23:22.012]                   name <- added[[kk]]
[13:23:22.012]                   NAME <- NAMES[[kk]]
[13:23:22.012]                   if (name != NAME && is.element(NAME, old_names)) 
[13:23:22.012]                     next
[13:23:22.012]                   args[[name]] <- ""
[13:23:22.012]                 }
[13:23:22.012]                 NAMES <- toupper(removed)
[13:23:22.012]                 for (kk in seq_along(NAMES)) {
[13:23:22.012]                   name <- removed[[kk]]
[13:23:22.012]                   NAME <- NAMES[[kk]]
[13:23:22.012]                   if (name != NAME && is.element(NAME, old_names)) 
[13:23:22.012]                     next
[13:23:22.012]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:23:22.012]                 }
[13:23:22.012]                 if (length(args) > 0) 
[13:23:22.012]                   base::do.call(base::Sys.setenv, args = args)
[13:23:22.012]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:23:22.012]             }
[13:23:22.012]             else {
[13:23:22.012]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:23:22.012]             }
[13:23:22.012]             {
[13:23:22.012]                 if (base::length(...future.futureOptionsAdded) > 
[13:23:22.012]                   0L) {
[13:23:22.012]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:23:22.012]                   base::names(opts) <- ...future.futureOptionsAdded
[13:23:22.012]                   base::options(opts)
[13:23:22.012]                 }
[13:23:22.012]                 {
[13:23:22.012]                   {
[13:23:22.012]                     NULL
[13:23:22.012]                     RNGkind("Mersenne-Twister")
[13:23:22.012]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[13:23:22.012]                       inherits = FALSE)
[13:23:22.012]                   }
[13:23:22.012]                   options(future.plan = NULL)
[13:23:22.012]                   if (is.na(NA_character_)) 
[13:23:22.012]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:23:22.012]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:23:22.012]                   future::plan(list(function (..., envir = parent.frame()) 
[13:23:22.012]                   {
[13:23:22.012]                     future <- SequentialFuture(..., envir = envir)
[13:23:22.012]                     if (!future$lazy) 
[13:23:22.012]                       future <- run(future)
[13:23:22.012]                     invisible(future)
[13:23:22.012]                   }, function (..., envir = parent.frame()) 
[13:23:22.012]                   {
[13:23:22.012]                     future <- SequentialFuture(..., envir = envir)
[13:23:22.012]                     if (!future$lazy) 
[13:23:22.012]                       future <- run(future)
[13:23:22.012]                     invisible(future)
[13:23:22.012]                   }), .cleanup = FALSE, .init = FALSE)
[13:23:22.012]                 }
[13:23:22.012]             }
[13:23:22.012]         }
[13:23:22.012]     })
[13:23:22.012]     if (TRUE) {
[13:23:22.012]         base::sink(type = "output", split = FALSE)
[13:23:22.012]         if (TRUE) {
[13:23:22.012]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:23:22.012]         }
[13:23:22.012]         else {
[13:23:22.012]             ...future.result["stdout"] <- base::list(NULL)
[13:23:22.012]         }
[13:23:22.012]         base::close(...future.stdout)
[13:23:22.012]         ...future.stdout <- NULL
[13:23:22.012]     }
[13:23:22.012]     ...future.result$conditions <- ...future.conditions
[13:23:22.012]     ...future.result$finished <- base::Sys.time()
[13:23:22.012]     ...future.result
[13:23:22.012] }
[13:23:22.014] assign_globals() ...
[13:23:22.014] List of 1
[13:23:22.014]  $ data:'data.frame':	5 obs. of  2 variables:
[13:23:22.014]   ..$ x: int [1:5] 1 2 3 4 5
[13:23:22.014]   ..$ y: int [1:5] 1 2 3 4 5
[13:23:22.014]  - attr(*, "where")=List of 1
[13:23:22.014]   ..$ data:<environment: R_EmptyEnv> 
[13:23:22.014]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[13:23:22.014]  - attr(*, "resolved")= logi FALSE
[13:23:22.014]  - attr(*, "total_size")= num 160
[13:23:22.014]  - attr(*, "already-done")= logi TRUE
[13:23:22.020] - copied ‘data’ to environment
[13:23:22.020] assign_globals() ... done
[13:23:22.020] plan(): Setting new future strategy stack:
[13:23:22.020] List of future strategies:
[13:23:22.020] 1. sequential:
[13:23:22.020]    - args: function (..., envir = parent.frame())
[13:23:22.020]    - tweaked: FALSE
[13:23:22.020]    - call: plan(list(sequential, strategy))
[13:23:22.021] plan(): nbrOfWorkers() = 1
[13:23:22.053] plan(): Setting new future strategy stack:
[13:23:22.053] List of future strategies:
[13:23:22.053] 1. sequential:
[13:23:22.053]    - args: function (..., envir = parent.frame())
[13:23:22.053]    - tweaked: FALSE
[13:23:22.053]    - call: plan(list(sequential, strategy))
[13:23:22.053] 2. sequential:
[13:23:22.053]    - args: function (..., envir = parent.frame())
[13:23:22.053]    - tweaked: FALSE
[13:23:22.053]    - call: plan(list(sequential, strategy))
[13:23:22.053] plan(): nbrOfWorkers() = 1
[13:23:22.053] SequentialFuture started (and completed)
[13:23:22.053] signalConditions() ...
[13:23:22.054]  - include = ‘immediateCondition’
[13:23:22.054]  - exclude = 
[13:23:22.054]  - resignal = FALSE
[13:23:22.054]  - Number of conditions: 53
[13:23:22.054] signalConditions() ... done
[13:23:22.054] - Launch lazy future ... done
[13:23:22.054] run() for ‘SequentialFuture’ ... done
[13:23:22.054] signalConditions() ...
[13:23:22.054]  - include = ‘immediateCondition’
[13:23:22.054]  - exclude = 
[13:23:22.055]  - resignal = FALSE
[13:23:22.055]  - Number of conditions: 53
[13:23:22.055] signalConditions() ... done
[13:23:22.055] Future state: ‘finished’
[13:23:22.055] signalConditions() ...
[13:23:22.055]  - include = ‘condition’
[13:23:22.055]  - exclude = ‘immediateCondition’
[13:23:22.055]  - resignal = TRUE
[13:23:22.055]  - Number of conditions: 53
[13:23:22.055]  - Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:22.021] getGlobalsAndPackages() ...
[13:23:22.056]  - Condition #2: ‘deprecatedWarning’, ‘warning’, ‘condition’
Warning: R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘ignore’
[13:23:22.056]  - Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:22.035] Searching for globals...
[13:23:22.056]  - Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:22.037] - globals found: [5] ‘$’, ‘subset’, ‘data’, ‘<’, ‘x’
[13:23:22.056]  - Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:22.037] Searching for globals ... DONE
[13:23:22.056]  - Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:22.037] Resolving globals: FALSE
[13:23:22.056]  - Condition #7: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:22.037] The total size of the 1 globals is 160 bytes (160 bytes)
[13:23:22.056]  - Condition #8: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:22.038] The total size of the 1 globals exported for future expression (‘subset(data, x < 3)$y’) is 160 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘data’ (160 bytes of class ‘list’)
[13:23:22.057]  - Condition #9: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:22.040] - globals: [1] ‘data’
[13:23:22.057]  - Condition #10: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:22.040] 
[13:23:22.057]  - Condition #11: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:22.040] getGlobalsAndPackages() ... DONE
[13:23:22.057]  - Condition #12: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:22.040] run() for ‘Future’ ...
[13:23:22.057]  - Condition #13: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:22.040] - state: ‘created’
[13:23:22.057]  - Condition #14: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:22.041] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[13:23:22.057]  - Condition #15: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:22.041] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[13:23:22.058]  - Condition #16: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:22.041] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[13:23:22.058]  - Condition #17: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:22.041]   - Field: ‘label’
[13:23:22.058]  - Condition #18: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:22.041]   - Field: ‘local’
[13:23:22.058]  - Condition #19: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:22.041]   - Field: ‘owner’
[13:23:22.058]  - Condition #20: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:22.041]   - Field: ‘envir’
[13:23:22.058]  - Condition #21: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:22.041]   - Field: ‘packages’
[13:23:22.058]  - Condition #22: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:22.042]   - Field: ‘gc’
[13:23:22.058]  - Condition #23: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:22.042]   - Field: ‘conditions’
[13:23:22.059]  - Condition #24: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:22.042]   - Field: ‘expr’
[13:23:22.059]  - Condition #25: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:22.042]   - Field: ‘uuid’
[13:23:22.059]  - Condition #26: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:22.042]   - Field: ‘seed’
[13:23:22.059]  - Condition #27: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:22.042]   - Field: ‘version’
[13:23:22.059]  - Condition #28: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:22.042]   - Field: ‘result’
[13:23:22.059]  - Condition #29: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:22.042]   - Field: ‘asynchronous’
[13:23:22.059]  - Condition #30: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:22.042]   - Field: ‘calls’
[13:23:22.059]  - Condition #31: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:22.043]   - Field: ‘globals’
[13:23:22.060]  - Condition #32: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:22.043]   - Field: ‘stdout’
[13:23:22.060]  - Condition #33: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:22.043]   - Field: ‘earlySignal’
[13:23:22.060]  - Condition #34: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:22.043]   - Field: ‘lazy’
[13:23:22.060]  - Condition #35: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:22.043]   - Field: ‘state’
[13:23:22.060]  - Condition #36: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:22.043] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[13:23:22.060]  - Condition #37: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:22.043] - Launch lazy future ...
[13:23:22.060]  - Condition #38: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:22.043] Packages needed by the future expression (n = 0): <none>
[13:23:22.061]  - Condition #39: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:22.044] Packages needed by future strategies (n = 0): <none>
[13:23:22.061]  - Condition #40: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:22.044] {
[13:23:22.044]     {
[13:23:22.044]         {
[13:23:22.044]             ...future.startTime <- base::Sys.time()
[13:23:22.044]             {
[13:23:22.044]                 {
[13:23:22.044]                   {
[13:23:22.044]                     base::local({
[13:23:22.044]                       has_future <- base::requireNamespace("future", 
[13:23:22.044]                         quietly = TRUE)
[13:23:22.044]                       if (has_future) {
[13:23:22.044]                         ns <- base::getNamespace("future")
[13:23:22.044]                         version <- ns[[".package"]][["version"]]
[13:23:22.044]                         if (is.null(version)) 
[13:23:22.044]                           version <- utils::packageVersion("future")
[13:23:22.044]                       }
[13:23:22.044]                       else {
[13:23:22.044]                         version <- NULL
[13:23:22.044]                       }
[13:23:22.044]                       if (!has_future || version < "1.8.0") {
[13:23:22.044]                         info <- base::c(r_version = base::gsub("R version ", 
[13:23:22.044]                           "", base::R.version$version.string), 
[13:23:22.044]                           platform = base::sprintf("%s (%s-bit)", 
[13:23:22.044]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:23:22.044]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[13:23:22.044]                             "release", "version")], collapse = " "), 
[13:23:22.044]                           hostname = base::Sys.info()[["nodename"]])
[13:23:22.044]                         info <- base::sprintf("%s: %s", base::names(info), 
[13:23:22.044]                           info)
[13:23:22.044]                         info <- base::paste(info, collapse = "; ")
[13:23:22.044]                         if (!has_future) {
[13:23:22.044]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:23:22.044]                             info)
[13:23:22.044]                         }
[13:23:22.044]                         else {
[13:23:22.044]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:23:22.044]                             info, version)
[13:23:22.044]                         }
[13:23:22.044]                         base::stop(msg)
[13:23:22.044]                       }
[13:23:22.044]                     })
[13:23:22.044]                   }
[13:23:22.044]                   options(future.plan = NULL)
[13:23:22.044]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:23:22.044]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:23:22.044]                 }
[13:23:22.044]                 ...future.workdir <- getwd()
[13:23:22.044]             }
[13:23:22.044]             ...future.oldOptions <- base::as.list(base::.Options)
[13:23:22.044]             ...future.oldEnvVars <- base::Sys.getenv()
[13:23:22.044]         }
[13:23:22.044]         base::options(future.startup.script = FALSE, future.globals.onMissing = "ignore", 
[13:23:22.044]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:23:22.044]             future.globals.onMissing = "ignore", future.globals.onReference = NULL, 
[13:23:22.044]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:23:22.044]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:23:22.044]             future.stdout.windows.reencode = NULL, width = 80L)
[13:23:22.044]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:23:22.044]             base::names(...future.oldOptions))
[13:23:22.044]     }
[13:23:22.044]     if (FALSE) {
[13:23:22.044]     }
[13:23:22.044]     else {
[13:23:22.044]         if (TRUE) {
[13:23:22.044]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:23:22.044]                 open = "w")
[13:23:22.044]         }
[13:23:22.044]         else {
[13:23:22.044]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:23:22.044]                 windows = "NUL", "/dev/null"), open = "w")
[13:23:22.044]         }
[13:23:22.044]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:23:22.044]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:23:22.044]             base::sink(type = "output", split = FALSE)
[13:23:22.044]             base::close(...future.stdout)
[13:23:22.044]         }, add = TRUE)
[13:23:22.044]     }
[13:23:22.044]     ...future.frame <- base::sys.nframe()
[13:23:22.044]     ...future.conditions <- base::list()
[13:23:22.044]     ...future.rng <- base::globalenv()$.Random.seed
[13:23:22.044]     if (FALSE) {
[13:23:22.044]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:23:22.044]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:23:22.044]     }
[13:23:22.044]     ...future.result <- base::tryCatch({
[13:23:22.044]         base::withCallingHandlers({
[13:23:22.044]             ...future.value <- base::withVisible(base::local(subset(data, 
[13:23:22.044]                 x < 3)$y))
[13:23:22.044]             future::FutureResult(value = ...future.value$value, 
[13:23:22.044]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:23:22.044]                   ...future.rng), globalenv = if (FALSE) 
[13:23:22.044]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:23:22.044]                     ...future.globalenv.names))
[13:23:22.044]                 else NULL, started = ...future.startTime, version = "1.8")
[13:23:22.044]         }, condition = base::local({
[13:23:22.044]             c <- base::c
[13:23:22.044]             inherits <- base::inherits
[13:23:22.044]             invokeRestart <- base::invokeRestart
[13:23:22.044]             length <- base::length
[13:23:22.044]             list <- base::list
[13:23:22.044]             seq.int <- base::seq.int
[13:23:22.044]             signalCondition <- base::signalCondition
[13:23:22.044]             sys.calls <- base::sys.calls
[13:23:22.044]             `[[` <- base::`[[`
[13:23:22.044]             `+` <- base::`+`
[13:23:22.044]             `<<-` <- base::`<<-`
[13:23:22.044]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:23:22.044]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:23:22.044]                   3L)]
[13:23:22.044]             }
[13:23:22.044]             function(cond) {
[13:23:22.044]                 is_error <- inherits(cond, "error")
[13:23:22.044]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:23:22.044]                   NULL)
[13:23:22.044]                 if (is_error) {
[13:23:22.044]                   sessionInformation <- function() {
[13:23:22.044]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:23:22.044]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:23:22.044]                       search = base::search(), system = base::Sys.info())
[13:23:22.044]                   }
[13:23:22.044]                   ...future.conditions[[length(...future.conditions) + 
[13:23:22.044]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:23:22.044]                     cond$call), session = sessionInformation(), 
[13:23:22.044]                     timestamp = base::Sys.time(), signaled = 0L)
[13:23:22.044]                   signalCondition(cond)
[13:23:22.044]                 }
[13:23:22.044]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:23:22.044]                 "immediateCondition"))) {
[13:23:22.044]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:23:22.044]                   ...future.conditions[[length(...future.conditions) + 
[13:23:22.044]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:23:22.044]                   if (TRUE && !signal) {
[13:23:22.044]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:23:22.044]                     {
[13:23:22.044]                       inherits <- base::inherits
[13:23:22.044]                       invokeRestart <- base::invokeRestart
[13:23:22.044]                       is.null <- base::is.null
[13:23:22.044]                       muffled <- FALSE
[13:23:22.044]                       if (inherits(cond, "message")) {
[13:23:22.044]                         muffled <- grepl(pattern, "muffleMessage")
[13:23:22.044]                         if (muffled) 
[13:23:22.044]                           invokeRestart("muffleMessage")
[13:23:22.044]                       }
[13:23:22.044]                       else if (inherits(cond, "warning")) {
[13:23:22.044]                         muffled <- grepl(pattern, "muffleWarning")
[13:23:22.044]                         if (muffled) 
[13:23:22.044]                           invokeRestart("muffleWarning")
[13:23:22.044]                       }
[13:23:22.044]                       else if (inherits(cond, "condition")) {
[13:23:22.044]                         if (!is.null(pattern)) {
[13:23:22.044]                           computeRestarts <- base::computeRestarts
[13:23:22.044]                           grepl <- base::grepl
[13:23:22.044]                           restarts <- computeRestarts(cond)
[13:23:22.044]                           for (restart in restarts) {
[13:23:22.044]                             name <- restart$name
[13:23:22.044]                             if (is.null(name)) 
[13:23:22.044]                               next
[13:23:22.044]                             if (!grepl(pattern, name)) 
[13:23:22.044]                               next
[13:23:22.044]                             invokeRestart(restart)
[13:23:22.044]                             muffled <- TRUE
[13:23:22.044]                             break
[13:23:22.044]                           }
[13:23:22.044]                         }
[13:23:22.044]                       }
[13:23:22.044]                       invisible(muffled)
[13:23:22.044]                     }
[13:23:22.044]                     muffleCondition(cond, pattern = "^muffle")
[13:23:22.044]                   }
[13:23:22.044]                 }
[13:23:22.044]                 else {
[13:23:22.044]                   if (TRUE) {
[13:23:22.044]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:23:22.044]                     {
[13:23:22.044]                       inherits <- base::inherits
[13:23:22.044]                       invokeRestart <- base::invokeRestart
[13:23:22.044]                       is.null <- base::is.null
[13:23:22.044]                       muffled <- FALSE
[13:23:22.044]                       if (inherits(cond, "message")) {
[13:23:22.044]                         muffled <- grepl(pattern, "muffleMessage")
[13:23:22.044]                         if (muffled) 
[13:23:22.044]                           invokeRestart("muffleMessage")
[13:23:22.044]                       }
[13:23:22.044]                       else if (inherits(cond, "warning")) {
[13:23:22.044]                         muffled <- grepl(pattern, "muffleWarning")
[13:23:22.044]                         if (muffled) 
[13:23:22.044]                           invokeRestart("muffleWarning")
[13:23:22.044]                       }
[13:23:22.044]                       else if (inherits(cond, "condition")) {
[13:23:22.044]                         if (!is.null(pattern)) {
[13:23:22.044]                           computeRestarts <- base::computeRestarts
[13:23:22.044]                           grepl <- base::grepl
[13:23:22.044]                           restarts <- computeRestarts(cond)
[13:23:22.044]                           for (restart in restarts) {
[13:23:22.044]                             name <- restart$name
[13:23:22.044]                             if (is.null(name)) 
[13:23:22.044]                               next
[13:23:22.044]                             if (!grepl(pattern, name)) 
[13:23:22.044]                               next
[13:23:22.044]                             invokeRestart(restart)
[13:23:22.044]                             muffled <- TRUE
[13:23:22.044]                             break
[13:23:22.044]                           }
[13:23:22.044]                         }
[13:23:22.044]                       }
[13:23:22.044]                       invisible(muffled)
[13:23:22.044]                     }
[13:23:22.044]                     muffleCondition(cond, pattern = "^muffle")
[13:23:22.044]                   }
[13:23:22.044]                 }
[13:23:22.044]             }
[13:23:22.044]         }))
[13:23:22.044]     }, error = function(ex) {
[13:23:22.044]         base::structure(base::list(value = NULL, visible = NULL, 
[13:23:22.044]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:23:22.044]                 ...future.rng), started = ...future.startTime, 
[13:23:22.044]             finished = Sys.time(), session_uuid = NA_character_, 
[13:23:22.044]             version = "1.8"), class = "FutureResult")
[13:23:22.044]     }, finally = {
[13:23:22.044]         if (!identical(...future.workdir, getwd())) 
[13:23:22.044]             setwd(...future.workdir)
[13:23:22.044]         {
[13:23:22.044]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:23:22.044]                 ...future.oldOptions$nwarnings <- NULL
[13:23:22.044]             }
[13:23:22.044]             base::options(...future.oldOptions)
[13:23:22.044]             if (.Platform$OS.type == "windows") {
[13:23:22.044]                 old_names <- names(...future.oldEnvVars)
[13:23:22.044]                 envs <- base::Sys.getenv()
[13:23:22.044]                 names <- names(envs)
[13:23:22.044]                 common <- intersect(names, old_names)
[13:23:22.044]                 added <- setdiff(names, old_names)
[13:23:22.044]                 removed <- setdiff(old_names, names)
[13:23:22.044]                 changed <- common[...future.oldEnvVars[common] != 
[13:23:22.044]                   envs[common]]
[13:23:22.044]                 NAMES <- toupper(changed)
[13:23:22.044]                 args <- list()
[13:23:22.044]                 for (kk in seq_along(NAMES)) {
[13:23:22.044]                   name <- changed[[kk]]
[13:23:22.044]                   NAME <- NAMES[[kk]]
[13:23:22.044]                   if (name != NAME && is.element(NAME, old_names)) 
[13:23:22.044]                     next
[13:23:22.044]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:23:22.044]                 }
[13:23:22.044]                 NAMES <- toupper(added)
[13:23:22.044]                 for (kk in seq_along(NAMES)) {
[13:23:22.044]                   name <- added[[kk]]
[13:23:22.044]                   NAME <- NAMES[[kk]]
[13:23:22.044]                   if (name != NAME && is.element(NAME, old_names)) 
[13:23:22.044]                     next
[13:23:22.044]                   args[[name]] <- ""
[13:23:22.044]                 }
[13:23:22.044]                 NAMES <- toupper(removed)
[13:23:22.044]                 for (kk in seq_along(NAMES)) {
[13:23:22.044]                   name <- removed[[kk]]
[13:23:22.044]                   NAME <- NAMES[[kk]]
[13:23:22.044]                   if (name != NAME && is.element(NAME, old_names)) 
[13:23:22.044]                     next
[13:23:22.044]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:23:22.044]                 }
[13:23:22.044]                 if (length(args) > 0) 
[13:23:22.044]                   base::do.call(base::Sys.setenv, args = args)
[13:23:22.044]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:23:22.044]             }
[13:23:22.044]             else {
[13:23:22.044]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:23:22.044]             }
[13:23:22.044]             {
[13:23:22.044]                 if (base::length(...future.futureOptionsAdded) > 
[13:23:22.044]                   0L) {
[13:23:22.044]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:23:22.044]                   base::names(opts) <- ...future.futureOptionsAdded
[13:23:22.044]                   base::options(opts)
[13:23:22.044]                 }
[13:23:22.044]                 {
[13:23:22.044]                   {
[13:23:22.044]                     NULL
[13:23:22.044]                     RNGkind("Mersenne-Twister")
[13:23:22.044]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[13:23:22.044]                       inherits = FALSE)
[13:23:22.044]                   }
[13:23:22.044]                   options(future.plan = NULL)
[13:23:22.044]                   if (is.na(NA_character_)) 
[13:23:22.044]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:23:22.044]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:23:22.044]                   future::plan(list(function (..., envir = parent.frame()) 
[13:23:22.044]                   {
[13:23:22.044]                     future <- SequentialFuture(..., envir = envir)
[13:23:22.044]                     if (!future$lazy) 
[13:23:22.044]                       future <- run(future)
[13:23:22.044]                     invisible(future)
[13:23:22.044]                   }), .cleanup = FALSE, .init = FALSE)
[13:23:22.044]                 }
[13:23:22.044]             }
[13:23:22.044]         }
[13:23:22.044]     })
[13:23:22.044]     if (TRUE) {
[13:23:22.044]         base::sink(type = "output", split = FALSE)
[13:23:22.044]         if (TRUE) {
[13:23:22.044]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:23:22.044]         }
[13:23:22.044]         else {
[13:23:22.044]             ...future.result["stdout"] <- base::list(NULL)
[13:23:22.044]         }
[13:23:22.044]         base::close(...future.stdout)
[13:23:22.044]         ...future.stdout <- NULL
[13:23:22.044]     }
[13:23:22.044]     ...future.result$conditions <- ...future.conditions
[13:23:22.044]     ...future.result$finished <- base::Sys.time()
[13:23:22.044]     ...future.result
[13:23:22.044] }
[13:23:22.061]  - Condition #41: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:22.046] assign_globals() ...
[13:23:22.061]  - Condition #42: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:22.046] List of 1
[13:23:22.046]  $ data:'data.frame':	5 obs. of  2 variables:
[13:23:22.046]   ..$ x: int [1:5] 1 2 3 4 5
[13:23:22.046]   ..$ y: int [1:5] 1 2 3 4 5
[13:23:22.046]  - attr(*, "where")=List of 1
[13:23:22.046]   ..$ data:<environment: R_EmptyEnv> 
[13:23:22.046]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[13:23:22.046]  - attr(*, "resolved")= logi FALSE
[13:23:22.046]  - attr(*, "total_size")= num 160
[13:23:22.046]  - attr(*, "already-done")= logi TRUE
[13:23:22.061]  - Condition #43: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:22.049] - copied ‘data’ to environment
[13:23:22.061]  - Condition #44: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:22.049] assign_globals() ... done
[13:23:22.062]  - Condition #45: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:22.050] plan(): Setting new future strategy stack:
[13:23:22.062]  - Condition #46: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:22.050] List of future strategies:
[13:23:22.050] 1. sequential:
[13:23:22.050]    - args: function (..., envir = parent.frame())
[13:23:22.050]    - tweaked: FALSE
[13:23:22.050]    - call: NULL
[13:23:22.062]  - Condition #47: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:22.050] plan(): nbrOfWorkers() = 1
[13:23:22.062]  - Condition #48: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:22.051] plan(): Setting new future strategy stack:
[13:23:22.062]  - Condition #49: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:22.051] List of future strategies:
[13:23:22.051] 1. sequential:
[13:23:22.051]    - args: function (..., envir = parent.frame())
[13:23:22.051]    - tweaked: FALSE
[13:23:22.051]    - call: plan(list(sequential, strategy))
[13:23:22.062]  - Condition #50: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:22.052] plan(): nbrOfWorkers() = 1
[13:23:22.062]  - Condition #51: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:22.052] SequentialFuture started (and completed)
[13:23:22.063]  - Condition #52: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:22.052] - Launch lazy future ... done
[13:23:22.063]  - Condition #53: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:22.052] run() for ‘SequentialFuture’ ... done
[13:23:22.063] signalConditions() ... done
- Strategy: sequential ... DONE
- Strategy: multicore ...
[13:23:22.063] plan(): Setting new future strategy stack:
[13:23:22.063] List of future strategies:
[13:23:22.063] 1. multicore:
[13:23:22.063]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[13:23:22.063]    - tweaked: FALSE
[13:23:22.063]    - call: plan(strategy)
[13:23:22.068] plan(): nbrOfWorkers() = 2
[13:23:22.068] getGlobalsAndPackages() ...
Warning: R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘error’
[13:23:22.068] Searching for globals...
[13:23:22.071] - globals found: [1] ‘getOption’
[13:23:22.071] Searching for globals ... DONE
[13:23:22.071] Resolving globals: FALSE
[13:23:22.071] 
[13:23:22.071] 
[13:23:22.071] getGlobalsAndPackages() ... DONE
[13:23:22.072] run() for ‘Future’ ...
[13:23:22.072] - state: ‘created’
[13:23:22.072] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[13:23:22.076] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:23:22.076] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[13:23:22.076]   - Field: ‘label’
[13:23:22.076]   - Field: ‘local’
[13:23:22.076]   - Field: ‘owner’
[13:23:22.076]   - Field: ‘envir’
[13:23:22.076]   - Field: ‘workers’
[13:23:22.077]   - Field: ‘packages’
[13:23:22.077]   - Field: ‘gc’
[13:23:22.077]   - Field: ‘job’
[13:23:22.077]   - Field: ‘conditions’
[13:23:22.077]   - Field: ‘expr’
[13:23:22.077]   - Field: ‘uuid’
[13:23:22.077]   - Field: ‘seed’
[13:23:22.077]   - Field: ‘version’
[13:23:22.077]   - Field: ‘result’
[13:23:22.077]   - Field: ‘asynchronous’
[13:23:22.078]   - Field: ‘calls’
[13:23:22.078]   - Field: ‘globals’
[13:23:22.078]   - Field: ‘stdout’
[13:23:22.078]   - Field: ‘earlySignal’
[13:23:22.078]   - Field: ‘lazy’
[13:23:22.078]   - Field: ‘state’
[13:23:22.078] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[13:23:22.078] - Launch lazy future ...
[13:23:22.079] Packages needed by the future expression (n = 0): <none>
[13:23:22.080] Packages needed by future strategies (n = 0): <none>
[13:23:22.080] {
[13:23:22.080]     {
[13:23:22.080]         {
[13:23:22.080]             ...future.startTime <- base::Sys.time()
[13:23:22.080]             {
[13:23:22.080]                 {
[13:23:22.080]                   {
[13:23:22.080]                     {
[13:23:22.080]                       base::local({
[13:23:22.080]                         has_future <- base::requireNamespace("future", 
[13:23:22.080]                           quietly = TRUE)
[13:23:22.080]                         if (has_future) {
[13:23:22.080]                           ns <- base::getNamespace("future")
[13:23:22.080]                           version <- ns[[".package"]][["version"]]
[13:23:22.080]                           if (is.null(version)) 
[13:23:22.080]                             version <- utils::packageVersion("future")
[13:23:22.080]                         }
[13:23:22.080]                         else {
[13:23:22.080]                           version <- NULL
[13:23:22.080]                         }
[13:23:22.080]                         if (!has_future || version < "1.8.0") {
[13:23:22.080]                           info <- base::c(r_version = base::gsub("R version ", 
[13:23:22.080]                             "", base::R.version$version.string), 
[13:23:22.080]                             platform = base::sprintf("%s (%s-bit)", 
[13:23:22.080]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:23:22.080]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:23:22.080]                               "release", "version")], collapse = " "), 
[13:23:22.080]                             hostname = base::Sys.info()[["nodename"]])
[13:23:22.080]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:23:22.080]                             info)
[13:23:22.080]                           info <- base::paste(info, collapse = "; ")
[13:23:22.080]                           if (!has_future) {
[13:23:22.080]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:23:22.080]                               info)
[13:23:22.080]                           }
[13:23:22.080]                           else {
[13:23:22.080]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:23:22.080]                               info, version)
[13:23:22.080]                           }
[13:23:22.080]                           base::stop(msg)
[13:23:22.080]                         }
[13:23:22.080]                       })
[13:23:22.080]                     }
[13:23:22.080]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[13:23:22.080]                     base::options(mc.cores = 1L)
[13:23:22.080]                   }
[13:23:22.080]                   options(future.plan = NULL)
[13:23:22.080]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:23:22.080]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:23:22.080]                 }
[13:23:22.080]                 ...future.workdir <- getwd()
[13:23:22.080]             }
[13:23:22.080]             ...future.oldOptions <- base::as.list(base::.Options)
[13:23:22.080]             ...future.oldEnvVars <- base::Sys.getenv()
[13:23:22.080]         }
[13:23:22.080]         base::options(future.startup.script = FALSE, future.globals.onMissing = "error", 
[13:23:22.080]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:23:22.080]             future.globals.onMissing = "error", future.globals.onReference = NULL, 
[13:23:22.080]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:23:22.080]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:23:22.080]             future.stdout.windows.reencode = NULL, width = 80L)
[13:23:22.080]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:23:22.080]             base::names(...future.oldOptions))
[13:23:22.080]     }
[13:23:22.080]     if (FALSE) {
[13:23:22.080]     }
[13:23:22.080]     else {
[13:23:22.080]         if (TRUE) {
[13:23:22.080]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:23:22.080]                 open = "w")
[13:23:22.080]         }
[13:23:22.080]         else {
[13:23:22.080]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:23:22.080]                 windows = "NUL", "/dev/null"), open = "w")
[13:23:22.080]         }
[13:23:22.080]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:23:22.080]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:23:22.080]             base::sink(type = "output", split = FALSE)
[13:23:22.080]             base::close(...future.stdout)
[13:23:22.080]         }, add = TRUE)
[13:23:22.080]     }
[13:23:22.080]     ...future.frame <- base::sys.nframe()
[13:23:22.080]     ...future.conditions <- base::list()
[13:23:22.080]     ...future.rng <- base::globalenv()$.Random.seed
[13:23:22.080]     if (FALSE) {
[13:23:22.080]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:23:22.080]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:23:22.080]     }
[13:23:22.080]     ...future.result <- base::tryCatch({
[13:23:22.080]         base::withCallingHandlers({
[13:23:22.080]             ...future.value <- base::withVisible(base::local({
[13:23:22.080]                 withCallingHandlers({
[13:23:22.080]                   getOption("future.globals.onMissing")
[13:23:22.080]                 }, immediateCondition = function(cond) {
[13:23:22.080]                   save_rds <- function (object, pathname, ...) 
[13:23:22.080]                   {
[13:23:22.080]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[13:23:22.080]                     if (file_test("-f", pathname_tmp)) {
[13:23:22.080]                       fi_tmp <- file.info(pathname_tmp)
[13:23:22.080]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[13:23:22.080]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:23:22.080]                         fi_tmp[["mtime"]])
[13:23:22.080]                     }
[13:23:22.080]                     tryCatch({
[13:23:22.080]                       saveRDS(object, file = pathname_tmp, ...)
[13:23:22.080]                     }, error = function(ex) {
[13:23:22.080]                       msg <- conditionMessage(ex)
[13:23:22.080]                       fi_tmp <- file.info(pathname_tmp)
[13:23:22.080]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[13:23:22.080]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:23:22.080]                         fi_tmp[["mtime"]], msg)
[13:23:22.080]                       ex$message <- msg
[13:23:22.080]                       stop(ex)
[13:23:22.080]                     })
[13:23:22.080]                     stopifnot(file_test("-f", pathname_tmp))
[13:23:22.080]                     res <- file.rename(from = pathname_tmp, to = pathname)
[13:23:22.080]                     if (!res || file_test("-f", pathname_tmp)) {
[13:23:22.080]                       fi_tmp <- file.info(pathname_tmp)
[13:23:22.080]                       fi <- file.info(pathname)
[13:23:22.080]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[13:23:22.080]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:23:22.080]                         fi_tmp[["mtime"]], sQuote(pathname), 
[13:23:22.080]                         fi[["size"]], fi[["mtime"]])
[13:23:22.080]                       stop(msg)
[13:23:22.080]                     }
[13:23:22.080]                     invisible(pathname)
[13:23:22.080]                   }
[13:23:22.080]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[13:23:22.080]                     rootPath = tempdir()) 
[13:23:22.080]                   {
[13:23:22.080]                     obj <- list(time = Sys.time(), condition = cond)
[13:23:22.080]                     file <- tempfile(pattern = class(cond)[1], 
[13:23:22.080]                       tmpdir = path, fileext = ".rds")
[13:23:22.080]                     save_rds(obj, file)
[13:23:22.080]                   }
[13:23:22.080]                   saveImmediateCondition(cond, path = "/tmp/RtmpXByBu8/.future/immediateConditions")
[13:23:22.080]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:23:22.080]                   {
[13:23:22.080]                     inherits <- base::inherits
[13:23:22.080]                     invokeRestart <- base::invokeRestart
[13:23:22.080]                     is.null <- base::is.null
[13:23:22.080]                     muffled <- FALSE
[13:23:22.080]                     if (inherits(cond, "message")) {
[13:23:22.080]                       muffled <- grepl(pattern, "muffleMessage")
[13:23:22.080]                       if (muffled) 
[13:23:22.080]                         invokeRestart("muffleMessage")
[13:23:22.080]                     }
[13:23:22.080]                     else if (inherits(cond, "warning")) {
[13:23:22.080]                       muffled <- grepl(pattern, "muffleWarning")
[13:23:22.080]                       if (muffled) 
[13:23:22.080]                         invokeRestart("muffleWarning")
[13:23:22.080]                     }
[13:23:22.080]                     else if (inherits(cond, "condition")) {
[13:23:22.080]                       if (!is.null(pattern)) {
[13:23:22.080]                         computeRestarts <- base::computeRestarts
[13:23:22.080]                         grepl <- base::grepl
[13:23:22.080]                         restarts <- computeRestarts(cond)
[13:23:22.080]                         for (restart in restarts) {
[13:23:22.080]                           name <- restart$name
[13:23:22.080]                           if (is.null(name)) 
[13:23:22.080]                             next
[13:23:22.080]                           if (!grepl(pattern, name)) 
[13:23:22.080]                             next
[13:23:22.080]                           invokeRestart(restart)
[13:23:22.080]                           muffled <- TRUE
[13:23:22.080]                           break
[13:23:22.080]                         }
[13:23:22.080]                       }
[13:23:22.080]                     }
[13:23:22.080]                     invisible(muffled)
[13:23:22.080]                   }
[13:23:22.080]                   muffleCondition(cond)
[13:23:22.080]                 })
[13:23:22.080]             }))
[13:23:22.080]             future::FutureResult(value = ...future.value$value, 
[13:23:22.080]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:23:22.080]                   ...future.rng), globalenv = if (FALSE) 
[13:23:22.080]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:23:22.080]                     ...future.globalenv.names))
[13:23:22.080]                 else NULL, started = ...future.startTime, version = "1.8")
[13:23:22.080]         }, condition = base::local({
[13:23:22.080]             c <- base::c
[13:23:22.080]             inherits <- base::inherits
[13:23:22.080]             invokeRestart <- base::invokeRestart
[13:23:22.080]             length <- base::length
[13:23:22.080]             list <- base::list
[13:23:22.080]             seq.int <- base::seq.int
[13:23:22.080]             signalCondition <- base::signalCondition
[13:23:22.080]             sys.calls <- base::sys.calls
[13:23:22.080]             `[[` <- base::`[[`
[13:23:22.080]             `+` <- base::`+`
[13:23:22.080]             `<<-` <- base::`<<-`
[13:23:22.080]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:23:22.080]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:23:22.080]                   3L)]
[13:23:22.080]             }
[13:23:22.080]             function(cond) {
[13:23:22.080]                 is_error <- inherits(cond, "error")
[13:23:22.080]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:23:22.080]                   NULL)
[13:23:22.080]                 if (is_error) {
[13:23:22.080]                   sessionInformation <- function() {
[13:23:22.080]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:23:22.080]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:23:22.080]                       search = base::search(), system = base::Sys.info())
[13:23:22.080]                   }
[13:23:22.080]                   ...future.conditions[[length(...future.conditions) + 
[13:23:22.080]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:23:22.080]                     cond$call), session = sessionInformation(), 
[13:23:22.080]                     timestamp = base::Sys.time(), signaled = 0L)
[13:23:22.080]                   signalCondition(cond)
[13:23:22.080]                 }
[13:23:22.080]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:23:22.080]                 "immediateCondition"))) {
[13:23:22.080]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:23:22.080]                   ...future.conditions[[length(...future.conditions) + 
[13:23:22.080]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:23:22.080]                   if (TRUE && !signal) {
[13:23:22.080]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:23:22.080]                     {
[13:23:22.080]                       inherits <- base::inherits
[13:23:22.080]                       invokeRestart <- base::invokeRestart
[13:23:22.080]                       is.null <- base::is.null
[13:23:22.080]                       muffled <- FALSE
[13:23:22.080]                       if (inherits(cond, "message")) {
[13:23:22.080]                         muffled <- grepl(pattern, "muffleMessage")
[13:23:22.080]                         if (muffled) 
[13:23:22.080]                           invokeRestart("muffleMessage")
[13:23:22.080]                       }
[13:23:22.080]                       else if (inherits(cond, "warning")) {
[13:23:22.080]                         muffled <- grepl(pattern, "muffleWarning")
[13:23:22.080]                         if (muffled) 
[13:23:22.080]                           invokeRestart("muffleWarning")
[13:23:22.080]                       }
[13:23:22.080]                       else if (inherits(cond, "condition")) {
[13:23:22.080]                         if (!is.null(pattern)) {
[13:23:22.080]                           computeRestarts <- base::computeRestarts
[13:23:22.080]                           grepl <- base::grepl
[13:23:22.080]                           restarts <- computeRestarts(cond)
[13:23:22.080]                           for (restart in restarts) {
[13:23:22.080]                             name <- restart$name
[13:23:22.080]                             if (is.null(name)) 
[13:23:22.080]                               next
[13:23:22.080]                             if (!grepl(pattern, name)) 
[13:23:22.080]                               next
[13:23:22.080]                             invokeRestart(restart)
[13:23:22.080]                             muffled <- TRUE
[13:23:22.080]                             break
[13:23:22.080]                           }
[13:23:22.080]                         }
[13:23:22.080]                       }
[13:23:22.080]                       invisible(muffled)
[13:23:22.080]                     }
[13:23:22.080]                     muffleCondition(cond, pattern = "^muffle")
[13:23:22.080]                   }
[13:23:22.080]                 }
[13:23:22.080]                 else {
[13:23:22.080]                   if (TRUE) {
[13:23:22.080]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:23:22.080]                     {
[13:23:22.080]                       inherits <- base::inherits
[13:23:22.080]                       invokeRestart <- base::invokeRestart
[13:23:22.080]                       is.null <- base::is.null
[13:23:22.080]                       muffled <- FALSE
[13:23:22.080]                       if (inherits(cond, "message")) {
[13:23:22.080]                         muffled <- grepl(pattern, "muffleMessage")
[13:23:22.080]                         if (muffled) 
[13:23:22.080]                           invokeRestart("muffleMessage")
[13:23:22.080]                       }
[13:23:22.080]                       else if (inherits(cond, "warning")) {
[13:23:22.080]                         muffled <- grepl(pattern, "muffleWarning")
[13:23:22.080]                         if (muffled) 
[13:23:22.080]                           invokeRestart("muffleWarning")
[13:23:22.080]                       }
[13:23:22.080]                       else if (inherits(cond, "condition")) {
[13:23:22.080]                         if (!is.null(pattern)) {
[13:23:22.080]                           computeRestarts <- base::computeRestarts
[13:23:22.080]                           grepl <- base::grepl
[13:23:22.080]                           restarts <- computeRestarts(cond)
[13:23:22.080]                           for (restart in restarts) {
[13:23:22.080]                             name <- restart$name
[13:23:22.080]                             if (is.null(name)) 
[13:23:22.080]                               next
[13:23:22.080]                             if (!grepl(pattern, name)) 
[13:23:22.080]                               next
[13:23:22.080]                             invokeRestart(restart)
[13:23:22.080]                             muffled <- TRUE
[13:23:22.080]                             break
[13:23:22.080]                           }
[13:23:22.080]                         }
[13:23:22.080]                       }
[13:23:22.080]                       invisible(muffled)
[13:23:22.080]                     }
[13:23:22.080]                     muffleCondition(cond, pattern = "^muffle")
[13:23:22.080]                   }
[13:23:22.080]                 }
[13:23:22.080]             }
[13:23:22.080]         }))
[13:23:22.080]     }, error = function(ex) {
[13:23:22.080]         base::structure(base::list(value = NULL, visible = NULL, 
[13:23:22.080]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:23:22.080]                 ...future.rng), started = ...future.startTime, 
[13:23:22.080]             finished = Sys.time(), session_uuid = NA_character_, 
[13:23:22.080]             version = "1.8"), class = "FutureResult")
[13:23:22.080]     }, finally = {
[13:23:22.080]         if (!identical(...future.workdir, getwd())) 
[13:23:22.080]             setwd(...future.workdir)
[13:23:22.080]         {
[13:23:22.080]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:23:22.080]                 ...future.oldOptions$nwarnings <- NULL
[13:23:22.080]             }
[13:23:22.080]             base::options(...future.oldOptions)
[13:23:22.080]             if (.Platform$OS.type == "windows") {
[13:23:22.080]                 old_names <- names(...future.oldEnvVars)
[13:23:22.080]                 envs <- base::Sys.getenv()
[13:23:22.080]                 names <- names(envs)
[13:23:22.080]                 common <- intersect(names, old_names)
[13:23:22.080]                 added <- setdiff(names, old_names)
[13:23:22.080]                 removed <- setdiff(old_names, names)
[13:23:22.080]                 changed <- common[...future.oldEnvVars[common] != 
[13:23:22.080]                   envs[common]]
[13:23:22.080]                 NAMES <- toupper(changed)
[13:23:22.080]                 args <- list()
[13:23:22.080]                 for (kk in seq_along(NAMES)) {
[13:23:22.080]                   name <- changed[[kk]]
[13:23:22.080]                   NAME <- NAMES[[kk]]
[13:23:22.080]                   if (name != NAME && is.element(NAME, old_names)) 
[13:23:22.080]                     next
[13:23:22.080]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:23:22.080]                 }
[13:23:22.080]                 NAMES <- toupper(added)
[13:23:22.080]                 for (kk in seq_along(NAMES)) {
[13:23:22.080]                   name <- added[[kk]]
[13:23:22.080]                   NAME <- NAMES[[kk]]
[13:23:22.080]                   if (name != NAME && is.element(NAME, old_names)) 
[13:23:22.080]                     next
[13:23:22.080]                   args[[name]] <- ""
[13:23:22.080]                 }
[13:23:22.080]                 NAMES <- toupper(removed)
[13:23:22.080]                 for (kk in seq_along(NAMES)) {
[13:23:22.080]                   name <- removed[[kk]]
[13:23:22.080]                   NAME <- NAMES[[kk]]
[13:23:22.080]                   if (name != NAME && is.element(NAME, old_names)) 
[13:23:22.080]                     next
[13:23:22.080]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:23:22.080]                 }
[13:23:22.080]                 if (length(args) > 0) 
[13:23:22.080]                   base::do.call(base::Sys.setenv, args = args)
[13:23:22.080]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:23:22.080]             }
[13:23:22.080]             else {
[13:23:22.080]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:23:22.080]             }
[13:23:22.080]             {
[13:23:22.080]                 if (base::length(...future.futureOptionsAdded) > 
[13:23:22.080]                   0L) {
[13:23:22.080]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:23:22.080]                   base::names(opts) <- ...future.futureOptionsAdded
[13:23:22.080]                   base::options(opts)
[13:23:22.080]                 }
[13:23:22.080]                 {
[13:23:22.080]                   {
[13:23:22.080]                     base::options(mc.cores = ...future.mc.cores.old)
[13:23:22.080]                     NULL
[13:23:22.080]                   }
[13:23:22.080]                   options(future.plan = NULL)
[13:23:22.080]                   if (is.na(NA_character_)) 
[13:23:22.080]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:23:22.080]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:23:22.080]                   future::plan(list(function (..., workers = availableCores(constraints = "multicore"), 
[13:23:22.080]                     envir = parent.frame()) 
[13:23:22.080]                   {
[13:23:22.080]                     default_workers <- missing(workers)
[13:23:22.080]                     if (is.function(workers)) 
[13:23:22.080]                       workers <- workers()
[13:23:22.080]                     workers <- structure(as.integer(workers), 
[13:23:22.080]                       class = class(workers))
[13:23:22.080]                     stop_if_not(is.finite(workers), workers >= 
[13:23:22.080]                       1L)
[13:23:22.080]                     if ((workers == 1L && !inherits(workers, 
[13:23:22.080]                       "AsIs")) || !supportsMulticore(warn = TRUE)) {
[13:23:22.080]                       if (default_workers) 
[13:23:22.080]                         supportsMulticore(warn = TRUE)
[13:23:22.080]                       return(sequential(..., envir = envir))
[13:23:22.080]                     }
[13:23:22.080]                     oopts <- options(mc.cores = workers)
[13:23:22.080]                     on.exit(options(oopts))
[13:23:22.080]                     future <- MulticoreFuture(..., workers = workers, 
[13:23:22.080]                       envir = envir)
[13:23:22.080]                     if (!future$lazy) 
[13:23:22.080]                       future <- run(future)
[13:23:22.080]                     invisible(future)
[13:23:22.080]                   }), .cleanup = FALSE, .init = FALSE)
[13:23:22.080]                 }
[13:23:22.080]             }
[13:23:22.080]         }
[13:23:22.080]     })
[13:23:22.080]     if (TRUE) {
[13:23:22.080]         base::sink(type = "output", split = FALSE)
[13:23:22.080]         if (TRUE) {
[13:23:22.080]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:23:22.080]         }
[13:23:22.080]         else {
[13:23:22.080]             ...future.result["stdout"] <- base::list(NULL)
[13:23:22.080]         }
[13:23:22.080]         base::close(...future.stdout)
[13:23:22.080]         ...future.stdout <- NULL
[13:23:22.080]     }
[13:23:22.080]     ...future.result$conditions <- ...future.conditions
[13:23:22.080]     ...future.result$finished <- base::Sys.time()
[13:23:22.080]     ...future.result
[13:23:22.080] }
[13:23:22.083] requestCore(): workers = 2
[13:23:22.086] MulticoreFuture started
[13:23:22.086] - Launch lazy future ... done
[13:23:22.086] run() for ‘MulticoreFuture’ ... done
[13:23:22.086] plan(): Setting new future strategy stack:
[13:23:22.087] List of future strategies:
[13:23:22.087] 1. sequential:
[13:23:22.087]    - args: function (..., envir = parent.frame())
[13:23:22.087]    - tweaked: FALSE
[13:23:22.087]    - call: NULL
[13:23:22.088] plan(): nbrOfWorkers() = 1
[13:23:22.088] result() for MulticoreFuture ...
[13:23:22.090] plan(): Setting new future strategy stack:
[13:23:22.090] List of future strategies:
[13:23:22.090] 1. multicore:
[13:23:22.090]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[13:23:22.090]    - tweaked: FALSE
[13:23:22.090]    - call: plan(strategy)
[13:23:22.095] plan(): nbrOfWorkers() = 2
[13:23:22.100] result() for MulticoreFuture ...
[13:23:22.100] result() for MulticoreFuture ... done
[13:23:22.100] result() for MulticoreFuture ... done
[13:23:22.100] result() for MulticoreFuture ...
[13:23:22.101] result() for MulticoreFuture ... done
[13:23:22.101] getGlobalsAndPackages() ...
Warning: R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘ignore’
[13:23:22.101] Searching for globals...
[13:23:22.102] - globals found: [1] ‘getOption’
[13:23:22.102] Searching for globals ... DONE
[13:23:22.102] Resolving globals: FALSE
[13:23:22.103] 
[13:23:22.103] 
[13:23:22.103] getGlobalsAndPackages() ... DONE
[13:23:22.103] run() for ‘Future’ ...
[13:23:22.103] - state: ‘created’
[13:23:22.104] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[13:23:22.108] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:23:22.108] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[13:23:22.108]   - Field: ‘label’
[13:23:22.108]   - Field: ‘local’
[13:23:22.108]   - Field: ‘owner’
[13:23:22.109]   - Field: ‘envir’
[13:23:22.109]   - Field: ‘workers’
[13:23:22.109]   - Field: ‘packages’
[13:23:22.109]   - Field: ‘gc’
[13:23:22.109]   - Field: ‘job’
[13:23:22.109]   - Field: ‘conditions’
[13:23:22.109]   - Field: ‘expr’
[13:23:22.109]   - Field: ‘uuid’
[13:23:22.109]   - Field: ‘seed’
[13:23:22.110]   - Field: ‘version’
[13:23:22.110]   - Field: ‘result’
[13:23:22.110]   - Field: ‘asynchronous’
[13:23:22.110]   - Field: ‘calls’
[13:23:22.110]   - Field: ‘globals’
[13:23:22.110]   - Field: ‘stdout’
[13:23:22.110]   - Field: ‘earlySignal’
[13:23:22.110]   - Field: ‘lazy’
[13:23:22.110]   - Field: ‘state’
[13:23:22.111] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[13:23:22.111] - Launch lazy future ...
[13:23:22.111] Packages needed by the future expression (n = 0): <none>
[13:23:22.111] Packages needed by future strategies (n = 0): <none>
[13:23:22.112] {
[13:23:22.112]     {
[13:23:22.112]         {
[13:23:22.112]             ...future.startTime <- base::Sys.time()
[13:23:22.112]             {
[13:23:22.112]                 {
[13:23:22.112]                   {
[13:23:22.112]                     {
[13:23:22.112]                       base::local({
[13:23:22.112]                         has_future <- base::requireNamespace("future", 
[13:23:22.112]                           quietly = TRUE)
[13:23:22.112]                         if (has_future) {
[13:23:22.112]                           ns <- base::getNamespace("future")
[13:23:22.112]                           version <- ns[[".package"]][["version"]]
[13:23:22.112]                           if (is.null(version)) 
[13:23:22.112]                             version <- utils::packageVersion("future")
[13:23:22.112]                         }
[13:23:22.112]                         else {
[13:23:22.112]                           version <- NULL
[13:23:22.112]                         }
[13:23:22.112]                         if (!has_future || version < "1.8.0") {
[13:23:22.112]                           info <- base::c(r_version = base::gsub("R version ", 
[13:23:22.112]                             "", base::R.version$version.string), 
[13:23:22.112]                             platform = base::sprintf("%s (%s-bit)", 
[13:23:22.112]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:23:22.112]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:23:22.112]                               "release", "version")], collapse = " "), 
[13:23:22.112]                             hostname = base::Sys.info()[["nodename"]])
[13:23:22.112]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:23:22.112]                             info)
[13:23:22.112]                           info <- base::paste(info, collapse = "; ")
[13:23:22.112]                           if (!has_future) {
[13:23:22.112]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:23:22.112]                               info)
[13:23:22.112]                           }
[13:23:22.112]                           else {
[13:23:22.112]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:23:22.112]                               info, version)
[13:23:22.112]                           }
[13:23:22.112]                           base::stop(msg)
[13:23:22.112]                         }
[13:23:22.112]                       })
[13:23:22.112]                     }
[13:23:22.112]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[13:23:22.112]                     base::options(mc.cores = 1L)
[13:23:22.112]                   }
[13:23:22.112]                   options(future.plan = NULL)
[13:23:22.112]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:23:22.112]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:23:22.112]                 }
[13:23:22.112]                 ...future.workdir <- getwd()
[13:23:22.112]             }
[13:23:22.112]             ...future.oldOptions <- base::as.list(base::.Options)
[13:23:22.112]             ...future.oldEnvVars <- base::Sys.getenv()
[13:23:22.112]         }
[13:23:22.112]         base::options(future.startup.script = FALSE, future.globals.onMissing = "ignore", 
[13:23:22.112]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:23:22.112]             future.globals.onMissing = "ignore", future.globals.onReference = NULL, 
[13:23:22.112]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:23:22.112]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:23:22.112]             future.stdout.windows.reencode = NULL, width = 80L)
[13:23:22.112]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:23:22.112]             base::names(...future.oldOptions))
[13:23:22.112]     }
[13:23:22.112]     if (FALSE) {
[13:23:22.112]     }
[13:23:22.112]     else {
[13:23:22.112]         if (TRUE) {
[13:23:22.112]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:23:22.112]                 open = "w")
[13:23:22.112]         }
[13:23:22.112]         else {
[13:23:22.112]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:23:22.112]                 windows = "NUL", "/dev/null"), open = "w")
[13:23:22.112]         }
[13:23:22.112]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:23:22.112]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:23:22.112]             base::sink(type = "output", split = FALSE)
[13:23:22.112]             base::close(...future.stdout)
[13:23:22.112]         }, add = TRUE)
[13:23:22.112]     }
[13:23:22.112]     ...future.frame <- base::sys.nframe()
[13:23:22.112]     ...future.conditions <- base::list()
[13:23:22.112]     ...future.rng <- base::globalenv()$.Random.seed
[13:23:22.112]     if (FALSE) {
[13:23:22.112]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:23:22.112]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:23:22.112]     }
[13:23:22.112]     ...future.result <- base::tryCatch({
[13:23:22.112]         base::withCallingHandlers({
[13:23:22.112]             ...future.value <- base::withVisible(base::local({
[13:23:22.112]                 withCallingHandlers({
[13:23:22.112]                   getOption("future.globals.onMissing")
[13:23:22.112]                 }, immediateCondition = function(cond) {
[13:23:22.112]                   save_rds <- function (object, pathname, ...) 
[13:23:22.112]                   {
[13:23:22.112]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[13:23:22.112]                     if (file_test("-f", pathname_tmp)) {
[13:23:22.112]                       fi_tmp <- file.info(pathname_tmp)
[13:23:22.112]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[13:23:22.112]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:23:22.112]                         fi_tmp[["mtime"]])
[13:23:22.112]                     }
[13:23:22.112]                     tryCatch({
[13:23:22.112]                       saveRDS(object, file = pathname_tmp, ...)
[13:23:22.112]                     }, error = function(ex) {
[13:23:22.112]                       msg <- conditionMessage(ex)
[13:23:22.112]                       fi_tmp <- file.info(pathname_tmp)
[13:23:22.112]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[13:23:22.112]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:23:22.112]                         fi_tmp[["mtime"]], msg)
[13:23:22.112]                       ex$message <- msg
[13:23:22.112]                       stop(ex)
[13:23:22.112]                     })
[13:23:22.112]                     stopifnot(file_test("-f", pathname_tmp))
[13:23:22.112]                     res <- file.rename(from = pathname_tmp, to = pathname)
[13:23:22.112]                     if (!res || file_test("-f", pathname_tmp)) {
[13:23:22.112]                       fi_tmp <- file.info(pathname_tmp)
[13:23:22.112]                       fi <- file.info(pathname)
[13:23:22.112]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[13:23:22.112]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:23:22.112]                         fi_tmp[["mtime"]], sQuote(pathname), 
[13:23:22.112]                         fi[["size"]], fi[["mtime"]])
[13:23:22.112]                       stop(msg)
[13:23:22.112]                     }
[13:23:22.112]                     invisible(pathname)
[13:23:22.112]                   }
[13:23:22.112]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[13:23:22.112]                     rootPath = tempdir()) 
[13:23:22.112]                   {
[13:23:22.112]                     obj <- list(time = Sys.time(), condition = cond)
[13:23:22.112]                     file <- tempfile(pattern = class(cond)[1], 
[13:23:22.112]                       tmpdir = path, fileext = ".rds")
[13:23:22.112]                     save_rds(obj, file)
[13:23:22.112]                   }
[13:23:22.112]                   saveImmediateCondition(cond, path = "/tmp/RtmpXByBu8/.future/immediateConditions")
[13:23:22.112]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:23:22.112]                   {
[13:23:22.112]                     inherits <- base::inherits
[13:23:22.112]                     invokeRestart <- base::invokeRestart
[13:23:22.112]                     is.null <- base::is.null
[13:23:22.112]                     muffled <- FALSE
[13:23:22.112]                     if (inherits(cond, "message")) {
[13:23:22.112]                       muffled <- grepl(pattern, "muffleMessage")
[13:23:22.112]                       if (muffled) 
[13:23:22.112]                         invokeRestart("muffleMessage")
[13:23:22.112]                     }
[13:23:22.112]                     else if (inherits(cond, "warning")) {
[13:23:22.112]                       muffled <- grepl(pattern, "muffleWarning")
[13:23:22.112]                       if (muffled) 
[13:23:22.112]                         invokeRestart("muffleWarning")
[13:23:22.112]                     }
[13:23:22.112]                     else if (inherits(cond, "condition")) {
[13:23:22.112]                       if (!is.null(pattern)) {
[13:23:22.112]                         computeRestarts <- base::computeRestarts
[13:23:22.112]                         grepl <- base::grepl
[13:23:22.112]                         restarts <- computeRestarts(cond)
[13:23:22.112]                         for (restart in restarts) {
[13:23:22.112]                           name <- restart$name
[13:23:22.112]                           if (is.null(name)) 
[13:23:22.112]                             next
[13:23:22.112]                           if (!grepl(pattern, name)) 
[13:23:22.112]                             next
[13:23:22.112]                           invokeRestart(restart)
[13:23:22.112]                           muffled <- TRUE
[13:23:22.112]                           break
[13:23:22.112]                         }
[13:23:22.112]                       }
[13:23:22.112]                     }
[13:23:22.112]                     invisible(muffled)
[13:23:22.112]                   }
[13:23:22.112]                   muffleCondition(cond)
[13:23:22.112]                 })
[13:23:22.112]             }))
[13:23:22.112]             future::FutureResult(value = ...future.value$value, 
[13:23:22.112]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:23:22.112]                   ...future.rng), globalenv = if (FALSE) 
[13:23:22.112]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:23:22.112]                     ...future.globalenv.names))
[13:23:22.112]                 else NULL, started = ...future.startTime, version = "1.8")
[13:23:22.112]         }, condition = base::local({
[13:23:22.112]             c <- base::c
[13:23:22.112]             inherits <- base::inherits
[13:23:22.112]             invokeRestart <- base::invokeRestart
[13:23:22.112]             length <- base::length
[13:23:22.112]             list <- base::list
[13:23:22.112]             seq.int <- base::seq.int
[13:23:22.112]             signalCondition <- base::signalCondition
[13:23:22.112]             sys.calls <- base::sys.calls
[13:23:22.112]             `[[` <- base::`[[`
[13:23:22.112]             `+` <- base::`+`
[13:23:22.112]             `<<-` <- base::`<<-`
[13:23:22.112]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:23:22.112]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:23:22.112]                   3L)]
[13:23:22.112]             }
[13:23:22.112]             function(cond) {
[13:23:22.112]                 is_error <- inherits(cond, "error")
[13:23:22.112]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:23:22.112]                   NULL)
[13:23:22.112]                 if (is_error) {
[13:23:22.112]                   sessionInformation <- function() {
[13:23:22.112]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:23:22.112]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:23:22.112]                       search = base::search(), system = base::Sys.info())
[13:23:22.112]                   }
[13:23:22.112]                   ...future.conditions[[length(...future.conditions) + 
[13:23:22.112]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:23:22.112]                     cond$call), session = sessionInformation(), 
[13:23:22.112]                     timestamp = base::Sys.time(), signaled = 0L)
[13:23:22.112]                   signalCondition(cond)
[13:23:22.112]                 }
[13:23:22.112]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:23:22.112]                 "immediateCondition"))) {
[13:23:22.112]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:23:22.112]                   ...future.conditions[[length(...future.conditions) + 
[13:23:22.112]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:23:22.112]                   if (TRUE && !signal) {
[13:23:22.112]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:23:22.112]                     {
[13:23:22.112]                       inherits <- base::inherits
[13:23:22.112]                       invokeRestart <- base::invokeRestart
[13:23:22.112]                       is.null <- base::is.null
[13:23:22.112]                       muffled <- FALSE
[13:23:22.112]                       if (inherits(cond, "message")) {
[13:23:22.112]                         muffled <- grepl(pattern, "muffleMessage")
[13:23:22.112]                         if (muffled) 
[13:23:22.112]                           invokeRestart("muffleMessage")
[13:23:22.112]                       }
[13:23:22.112]                       else if (inherits(cond, "warning")) {
[13:23:22.112]                         muffled <- grepl(pattern, "muffleWarning")
[13:23:22.112]                         if (muffled) 
[13:23:22.112]                           invokeRestart("muffleWarning")
[13:23:22.112]                       }
[13:23:22.112]                       else if (inherits(cond, "condition")) {
[13:23:22.112]                         if (!is.null(pattern)) {
[13:23:22.112]                           computeRestarts <- base::computeRestarts
[13:23:22.112]                           grepl <- base::grepl
[13:23:22.112]                           restarts <- computeRestarts(cond)
[13:23:22.112]                           for (restart in restarts) {
[13:23:22.112]                             name <- restart$name
[13:23:22.112]                             if (is.null(name)) 
[13:23:22.112]                               next
[13:23:22.112]                             if (!grepl(pattern, name)) 
[13:23:22.112]                               next
[13:23:22.112]                             invokeRestart(restart)
[13:23:22.112]                             muffled <- TRUE
[13:23:22.112]                             break
[13:23:22.112]                           }
[13:23:22.112]                         }
[13:23:22.112]                       }
[13:23:22.112]                       invisible(muffled)
[13:23:22.112]                     }
[13:23:22.112]                     muffleCondition(cond, pattern = "^muffle")
[13:23:22.112]                   }
[13:23:22.112]                 }
[13:23:22.112]                 else {
[13:23:22.112]                   if (TRUE) {
[13:23:22.112]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:23:22.112]                     {
[13:23:22.112]                       inherits <- base::inherits
[13:23:22.112]                       invokeRestart <- base::invokeRestart
[13:23:22.112]                       is.null <- base::is.null
[13:23:22.112]                       muffled <- FALSE
[13:23:22.112]                       if (inherits(cond, "message")) {
[13:23:22.112]                         muffled <- grepl(pattern, "muffleMessage")
[13:23:22.112]                         if (muffled) 
[13:23:22.112]                           invokeRestart("muffleMessage")
[13:23:22.112]                       }
[13:23:22.112]                       else if (inherits(cond, "warning")) {
[13:23:22.112]                         muffled <- grepl(pattern, "muffleWarning")
[13:23:22.112]                         if (muffled) 
[13:23:22.112]                           invokeRestart("muffleWarning")
[13:23:22.112]                       }
[13:23:22.112]                       else if (inherits(cond, "condition")) {
[13:23:22.112]                         if (!is.null(pattern)) {
[13:23:22.112]                           computeRestarts <- base::computeRestarts
[13:23:22.112]                           grepl <- base::grepl
[13:23:22.112]                           restarts <- computeRestarts(cond)
[13:23:22.112]                           for (restart in restarts) {
[13:23:22.112]                             name <- restart$name
[13:23:22.112]                             if (is.null(name)) 
[13:23:22.112]                               next
[13:23:22.112]                             if (!grepl(pattern, name)) 
[13:23:22.112]                               next
[13:23:22.112]                             invokeRestart(restart)
[13:23:22.112]                             muffled <- TRUE
[13:23:22.112]                             break
[13:23:22.112]                           }
[13:23:22.112]                         }
[13:23:22.112]                       }
[13:23:22.112]                       invisible(muffled)
[13:23:22.112]                     }
[13:23:22.112]                     muffleCondition(cond, pattern = "^muffle")
[13:23:22.112]                   }
[13:23:22.112]                 }
[13:23:22.112]             }
[13:23:22.112]         }))
[13:23:22.112]     }, error = function(ex) {
[13:23:22.112]         base::structure(base::list(value = NULL, visible = NULL, 
[13:23:22.112]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:23:22.112]                 ...future.rng), started = ...future.startTime, 
[13:23:22.112]             finished = Sys.time(), session_uuid = NA_character_, 
[13:23:22.112]             version = "1.8"), class = "FutureResult")
[13:23:22.112]     }, finally = {
[13:23:22.112]         if (!identical(...future.workdir, getwd())) 
[13:23:22.112]             setwd(...future.workdir)
[13:23:22.112]         {
[13:23:22.112]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:23:22.112]                 ...future.oldOptions$nwarnings <- NULL
[13:23:22.112]             }
[13:23:22.112]             base::options(...future.oldOptions)
[13:23:22.112]             if (.Platform$OS.type == "windows") {
[13:23:22.112]                 old_names <- names(...future.oldEnvVars)
[13:23:22.112]                 envs <- base::Sys.getenv()
[13:23:22.112]                 names <- names(envs)
[13:23:22.112]                 common <- intersect(names, old_names)
[13:23:22.112]                 added <- setdiff(names, old_names)
[13:23:22.112]                 removed <- setdiff(old_names, names)
[13:23:22.112]                 changed <- common[...future.oldEnvVars[common] != 
[13:23:22.112]                   envs[common]]
[13:23:22.112]                 NAMES <- toupper(changed)
[13:23:22.112]                 args <- list()
[13:23:22.112]                 for (kk in seq_along(NAMES)) {
[13:23:22.112]                   name <- changed[[kk]]
[13:23:22.112]                   NAME <- NAMES[[kk]]
[13:23:22.112]                   if (name != NAME && is.element(NAME, old_names)) 
[13:23:22.112]                     next
[13:23:22.112]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:23:22.112]                 }
[13:23:22.112]                 NAMES <- toupper(added)
[13:23:22.112]                 for (kk in seq_along(NAMES)) {
[13:23:22.112]                   name <- added[[kk]]
[13:23:22.112]                   NAME <- NAMES[[kk]]
[13:23:22.112]                   if (name != NAME && is.element(NAME, old_names)) 
[13:23:22.112]                     next
[13:23:22.112]                   args[[name]] <- ""
[13:23:22.112]                 }
[13:23:22.112]                 NAMES <- toupper(removed)
[13:23:22.112]                 for (kk in seq_along(NAMES)) {
[13:23:22.112]                   name <- removed[[kk]]
[13:23:22.112]                   NAME <- NAMES[[kk]]
[13:23:22.112]                   if (name != NAME && is.element(NAME, old_names)) 
[13:23:22.112]                     next
[13:23:22.112]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:23:22.112]                 }
[13:23:22.112]                 if (length(args) > 0) 
[13:23:22.112]                   base::do.call(base::Sys.setenv, args = args)
[13:23:22.112]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:23:22.112]             }
[13:23:22.112]             else {
[13:23:22.112]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:23:22.112]             }
[13:23:22.112]             {
[13:23:22.112]                 if (base::length(...future.futureOptionsAdded) > 
[13:23:22.112]                   0L) {
[13:23:22.112]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:23:22.112]                   base::names(opts) <- ...future.futureOptionsAdded
[13:23:22.112]                   base::options(opts)
[13:23:22.112]                 }
[13:23:22.112]                 {
[13:23:22.112]                   {
[13:23:22.112]                     base::options(mc.cores = ...future.mc.cores.old)
[13:23:22.112]                     NULL
[13:23:22.112]                   }
[13:23:22.112]                   options(future.plan = NULL)
[13:23:22.112]                   if (is.na(NA_character_)) 
[13:23:22.112]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:23:22.112]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:23:22.112]                   future::plan(list(function (..., workers = availableCores(constraints = "multicore"), 
[13:23:22.112]                     envir = parent.frame()) 
[13:23:22.112]                   {
[13:23:22.112]                     default_workers <- missing(workers)
[13:23:22.112]                     if (is.function(workers)) 
[13:23:22.112]                       workers <- workers()
[13:23:22.112]                     workers <- structure(as.integer(workers), 
[13:23:22.112]                       class = class(workers))
[13:23:22.112]                     stop_if_not(is.finite(workers), workers >= 
[13:23:22.112]                       1L)
[13:23:22.112]                     if ((workers == 1L && !inherits(workers, 
[13:23:22.112]                       "AsIs")) || !supportsMulticore(warn = TRUE)) {
[13:23:22.112]                       if (default_workers) 
[13:23:22.112]                         supportsMulticore(warn = TRUE)
[13:23:22.112]                       return(sequential(..., envir = envir))
[13:23:22.112]                     }
[13:23:22.112]                     oopts <- options(mc.cores = workers)
[13:23:22.112]                     on.exit(options(oopts))
[13:23:22.112]                     future <- MulticoreFuture(..., workers = workers, 
[13:23:22.112]                       envir = envir)
[13:23:22.112]                     if (!future$lazy) 
[13:23:22.112]                       future <- run(future)
[13:23:22.112]                     invisible(future)
[13:23:22.112]                   }), .cleanup = FALSE, .init = FALSE)
[13:23:22.112]                 }
[13:23:22.112]             }
[13:23:22.112]         }
[13:23:22.112]     })
[13:23:22.112]     if (TRUE) {
[13:23:22.112]         base::sink(type = "output", split = FALSE)
[13:23:22.112]         if (TRUE) {
[13:23:22.112]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:23:22.112]         }
[13:23:22.112]         else {
[13:23:22.112]             ...future.result["stdout"] <- base::list(NULL)
[13:23:22.112]         }
[13:23:22.112]         base::close(...future.stdout)
[13:23:22.112]         ...future.stdout <- NULL
[13:23:22.112]     }
[13:23:22.112]     ...future.result$conditions <- ...future.conditions
[13:23:22.112]     ...future.result$finished <- base::Sys.time()
[13:23:22.112]     ...future.result
[13:23:22.112] }
[13:23:22.115] requestCore(): workers = 2
[13:23:22.117] MulticoreFuture started
[13:23:22.117] - Launch lazy future ... done
[13:23:22.117] run() for ‘MulticoreFuture’ ... done
[13:23:22.118] result() for MulticoreFuture ...
[13:23:22.118] plan(): Setting new future strategy stack:
[13:23:22.118] List of future strategies:
[13:23:22.118] 1. sequential:
[13:23:22.118]    - args: function (..., envir = parent.frame())
[13:23:22.118]    - tweaked: FALSE
[13:23:22.118]    - call: NULL
[13:23:22.119] plan(): nbrOfWorkers() = 1
[13:23:22.121] plan(): Setting new future strategy stack:
[13:23:22.121] List of future strategies:
[13:23:22.121] 1. multicore:
[13:23:22.121]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[13:23:22.121]    - tweaked: FALSE
[13:23:22.121]    - call: plan(strategy)
[13:23:22.126] plan(): nbrOfWorkers() = 2
[13:23:22.127] result() for MulticoreFuture ...
[13:23:22.127] result() for MulticoreFuture ... done
[13:23:22.128] result() for MulticoreFuture ... done
[13:23:22.128] result() for MulticoreFuture ...
[13:23:22.128] result() for MulticoreFuture ... done
[13:23:22.128] getGlobalsAndPackages() ...
Warning: R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘error’
[13:23:22.129] Searching for globals...
[13:23:22.130] getGlobalsAndPackages() ...
Warning: R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘ignore’
[13:23:22.131] Searching for globals...
[13:23:22.132] - globals found: [5] ‘$’, ‘subset’, ‘data’, ‘<’, ‘x’
[13:23:22.132] Searching for globals ... DONE
[13:23:22.132] Resolving globals: FALSE
[13:23:22.133] The total size of the 1 globals is 160 bytes (160 bytes)
[13:23:22.133] The total size of the 1 globals exported for future expression (‘subset(data, x < 3)$y’) is 160 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘data’ (160 bytes of class ‘list’)
[13:23:22.133] - globals: [1] ‘data’
[13:23:22.134] 
[13:23:22.134] getGlobalsAndPackages() ... DONE
[13:23:22.134] run() for ‘Future’ ...
[13:23:22.137] - state: ‘created’
[13:23:22.137] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[13:23:22.142] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:23:22.143] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[13:23:22.143]   - Field: ‘label’
[13:23:22.143]   - Field: ‘local’
[13:23:22.143]   - Field: ‘owner’
[13:23:22.143]   - Field: ‘envir’
[13:23:22.143]   - Field: ‘workers’
[13:23:22.144]   - Field: ‘packages’
[13:23:22.144]   - Field: ‘gc’
[13:23:22.144]   - Field: ‘job’
[13:23:22.144]   - Field: ‘conditions’
[13:23:22.144]   - Field: ‘expr’
[13:23:22.144]   - Field: ‘uuid’
[13:23:22.144]   - Field: ‘seed’
[13:23:22.144]   - Field: ‘version’
[13:23:22.145]   - Field: ‘result’
[13:23:22.145]   - Field: ‘asynchronous’
[13:23:22.145]   - Field: ‘calls’
[13:23:22.145]   - Field: ‘globals’
[13:23:22.145]   - Field: ‘stdout’
[13:23:22.145]   - Field: ‘earlySignal’
[13:23:22.145]   - Field: ‘lazy’
[13:23:22.145]   - Field: ‘state’
[13:23:22.146] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[13:23:22.146] - Launch lazy future ...
[13:23:22.146] Packages needed by the future expression (n = 0): <none>
[13:23:22.146] Packages needed by future strategies (n = 0): <none>
[13:23:22.147] {
[13:23:22.147]     {
[13:23:22.147]         {
[13:23:22.147]             ...future.startTime <- base::Sys.time()
[13:23:22.147]             {
[13:23:22.147]                 {
[13:23:22.147]                   {
[13:23:22.147]                     {
[13:23:22.147]                       base::local({
[13:23:22.147]                         has_future <- base::requireNamespace("future", 
[13:23:22.147]                           quietly = TRUE)
[13:23:22.147]                         if (has_future) {
[13:23:22.147]                           ns <- base::getNamespace("future")
[13:23:22.147]                           version <- ns[[".package"]][["version"]]
[13:23:22.147]                           if (is.null(version)) 
[13:23:22.147]                             version <- utils::packageVersion("future")
[13:23:22.147]                         }
[13:23:22.147]                         else {
[13:23:22.147]                           version <- NULL
[13:23:22.147]                         }
[13:23:22.147]                         if (!has_future || version < "1.8.0") {
[13:23:22.147]                           info <- base::c(r_version = base::gsub("R version ", 
[13:23:22.147]                             "", base::R.version$version.string), 
[13:23:22.147]                             platform = base::sprintf("%s (%s-bit)", 
[13:23:22.147]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:23:22.147]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:23:22.147]                               "release", "version")], collapse = " "), 
[13:23:22.147]                             hostname = base::Sys.info()[["nodename"]])
[13:23:22.147]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:23:22.147]                             info)
[13:23:22.147]                           info <- base::paste(info, collapse = "; ")
[13:23:22.147]                           if (!has_future) {
[13:23:22.147]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:23:22.147]                               info)
[13:23:22.147]                           }
[13:23:22.147]                           else {
[13:23:22.147]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:23:22.147]                               info, version)
[13:23:22.147]                           }
[13:23:22.147]                           base::stop(msg)
[13:23:22.147]                         }
[13:23:22.147]                       })
[13:23:22.147]                     }
[13:23:22.147]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[13:23:22.147]                     base::options(mc.cores = 1L)
[13:23:22.147]                   }
[13:23:22.147]                   options(future.plan = NULL)
[13:23:22.147]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:23:22.147]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:23:22.147]                 }
[13:23:22.147]                 ...future.workdir <- getwd()
[13:23:22.147]             }
[13:23:22.147]             ...future.oldOptions <- base::as.list(base::.Options)
[13:23:22.147]             ...future.oldEnvVars <- base::Sys.getenv()
[13:23:22.147]         }
[13:23:22.147]         base::options(future.startup.script = FALSE, future.globals.onMissing = "ignore", 
[13:23:22.147]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:23:22.147]             future.globals.onMissing = "ignore", future.globals.onReference = NULL, 
[13:23:22.147]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:23:22.147]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:23:22.147]             future.stdout.windows.reencode = NULL, width = 80L)
[13:23:22.147]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:23:22.147]             base::names(...future.oldOptions))
[13:23:22.147]     }
[13:23:22.147]     if (FALSE) {
[13:23:22.147]     }
[13:23:22.147]     else {
[13:23:22.147]         if (TRUE) {
[13:23:22.147]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:23:22.147]                 open = "w")
[13:23:22.147]         }
[13:23:22.147]         else {
[13:23:22.147]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:23:22.147]                 windows = "NUL", "/dev/null"), open = "w")
[13:23:22.147]         }
[13:23:22.147]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:23:22.147]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:23:22.147]             base::sink(type = "output", split = FALSE)
[13:23:22.147]             base::close(...future.stdout)
[13:23:22.147]         }, add = TRUE)
[13:23:22.147]     }
[13:23:22.147]     ...future.frame <- base::sys.nframe()
[13:23:22.147]     ...future.conditions <- base::list()
[13:23:22.147]     ...future.rng <- base::globalenv()$.Random.seed
[13:23:22.147]     if (FALSE) {
[13:23:22.147]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:23:22.147]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:23:22.147]     }
[13:23:22.147]     ...future.result <- base::tryCatch({
[13:23:22.147]         base::withCallingHandlers({
[13:23:22.147]             ...future.value <- base::withVisible(base::local({
[13:23:22.147]                 withCallingHandlers({
[13:23:22.147]                   subset(data, x < 3)$y
[13:23:22.147]                 }, immediateCondition = function(cond) {
[13:23:22.147]                   save_rds <- function (object, pathname, ...) 
[13:23:22.147]                   {
[13:23:22.147]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[13:23:22.147]                     if (file_test("-f", pathname_tmp)) {
[13:23:22.147]                       fi_tmp <- file.info(pathname_tmp)
[13:23:22.147]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[13:23:22.147]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:23:22.147]                         fi_tmp[["mtime"]])
[13:23:22.147]                     }
[13:23:22.147]                     tryCatch({
[13:23:22.147]                       saveRDS(object, file = pathname_tmp, ...)
[13:23:22.147]                     }, error = function(ex) {
[13:23:22.147]                       msg <- conditionMessage(ex)
[13:23:22.147]                       fi_tmp <- file.info(pathname_tmp)
[13:23:22.147]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[13:23:22.147]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:23:22.147]                         fi_tmp[["mtime"]], msg)
[13:23:22.147]                       ex$message <- msg
[13:23:22.147]                       stop(ex)
[13:23:22.147]                     })
[13:23:22.147]                     stopifnot(file_test("-f", pathname_tmp))
[13:23:22.147]                     res <- file.rename(from = pathname_tmp, to = pathname)
[13:23:22.147]                     if (!res || file_test("-f", pathname_tmp)) {
[13:23:22.147]                       fi_tmp <- file.info(pathname_tmp)
[13:23:22.147]                       fi <- file.info(pathname)
[13:23:22.147]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[13:23:22.147]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:23:22.147]                         fi_tmp[["mtime"]], sQuote(pathname), 
[13:23:22.147]                         fi[["size"]], fi[["mtime"]])
[13:23:22.147]                       stop(msg)
[13:23:22.147]                     }
[13:23:22.147]                     invisible(pathname)
[13:23:22.147]                   }
[13:23:22.147]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[13:23:22.147]                     rootPath = tempdir()) 
[13:23:22.147]                   {
[13:23:22.147]                     obj <- list(time = Sys.time(), condition = cond)
[13:23:22.147]                     file <- tempfile(pattern = class(cond)[1], 
[13:23:22.147]                       tmpdir = path, fileext = ".rds")
[13:23:22.147]                     save_rds(obj, file)
[13:23:22.147]                   }
[13:23:22.147]                   saveImmediateCondition(cond, path = "/tmp/RtmpXByBu8/.future/immediateConditions")
[13:23:22.147]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:23:22.147]                   {
[13:23:22.147]                     inherits <- base::inherits
[13:23:22.147]                     invokeRestart <- base::invokeRestart
[13:23:22.147]                     is.null <- base::is.null
[13:23:22.147]                     muffled <- FALSE
[13:23:22.147]                     if (inherits(cond, "message")) {
[13:23:22.147]                       muffled <- grepl(pattern, "muffleMessage")
[13:23:22.147]                       if (muffled) 
[13:23:22.147]                         invokeRestart("muffleMessage")
[13:23:22.147]                     }
[13:23:22.147]                     else if (inherits(cond, "warning")) {
[13:23:22.147]                       muffled <- grepl(pattern, "muffleWarning")
[13:23:22.147]                       if (muffled) 
[13:23:22.147]                         invokeRestart("muffleWarning")
[13:23:22.147]                     }
[13:23:22.147]                     else if (inherits(cond, "condition")) {
[13:23:22.147]                       if (!is.null(pattern)) {
[13:23:22.147]                         computeRestarts <- base::computeRestarts
[13:23:22.147]                         grepl <- base::grepl
[13:23:22.147]                         restarts <- computeRestarts(cond)
[13:23:22.147]                         for (restart in restarts) {
[13:23:22.147]                           name <- restart$name
[13:23:22.147]                           if (is.null(name)) 
[13:23:22.147]                             next
[13:23:22.147]                           if (!grepl(pattern, name)) 
[13:23:22.147]                             next
[13:23:22.147]                           invokeRestart(restart)
[13:23:22.147]                           muffled <- TRUE
[13:23:22.147]                           break
[13:23:22.147]                         }
[13:23:22.147]                       }
[13:23:22.147]                     }
[13:23:22.147]                     invisible(muffled)
[13:23:22.147]                   }
[13:23:22.147]                   muffleCondition(cond)
[13:23:22.147]                 })
[13:23:22.147]             }))
[13:23:22.147]             future::FutureResult(value = ...future.value$value, 
[13:23:22.147]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:23:22.147]                   ...future.rng), globalenv = if (FALSE) 
[13:23:22.147]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:23:22.147]                     ...future.globalenv.names))
[13:23:22.147]                 else NULL, started = ...future.startTime, version = "1.8")
[13:23:22.147]         }, condition = base::local({
[13:23:22.147]             c <- base::c
[13:23:22.147]             inherits <- base::inherits
[13:23:22.147]             invokeRestart <- base::invokeRestart
[13:23:22.147]             length <- base::length
[13:23:22.147]             list <- base::list
[13:23:22.147]             seq.int <- base::seq.int
[13:23:22.147]             signalCondition <- base::signalCondition
[13:23:22.147]             sys.calls <- base::sys.calls
[13:23:22.147]             `[[` <- base::`[[`
[13:23:22.147]             `+` <- base::`+`
[13:23:22.147]             `<<-` <- base::`<<-`
[13:23:22.147]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:23:22.147]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:23:22.147]                   3L)]
[13:23:22.147]             }
[13:23:22.147]             function(cond) {
[13:23:22.147]                 is_error <- inherits(cond, "error")
[13:23:22.147]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:23:22.147]                   NULL)
[13:23:22.147]                 if (is_error) {
[13:23:22.147]                   sessionInformation <- function() {
[13:23:22.147]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:23:22.147]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:23:22.147]                       search = base::search(), system = base::Sys.info())
[13:23:22.147]                   }
[13:23:22.147]                   ...future.conditions[[length(...future.conditions) + 
[13:23:22.147]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:23:22.147]                     cond$call), session = sessionInformation(), 
[13:23:22.147]                     timestamp = base::Sys.time(), signaled = 0L)
[13:23:22.147]                   signalCondition(cond)
[13:23:22.147]                 }
[13:23:22.147]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:23:22.147]                 "immediateCondition"))) {
[13:23:22.147]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:23:22.147]                   ...future.conditions[[length(...future.conditions) + 
[13:23:22.147]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:23:22.147]                   if (TRUE && !signal) {
[13:23:22.147]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:23:22.147]                     {
[13:23:22.147]                       inherits <- base::inherits
[13:23:22.147]                       invokeRestart <- base::invokeRestart
[13:23:22.147]                       is.null <- base::is.null
[13:23:22.147]                       muffled <- FALSE
[13:23:22.147]                       if (inherits(cond, "message")) {
[13:23:22.147]                         muffled <- grepl(pattern, "muffleMessage")
[13:23:22.147]                         if (muffled) 
[13:23:22.147]                           invokeRestart("muffleMessage")
[13:23:22.147]                       }
[13:23:22.147]                       else if (inherits(cond, "warning")) {
[13:23:22.147]                         muffled <- grepl(pattern, "muffleWarning")
[13:23:22.147]                         if (muffled) 
[13:23:22.147]                           invokeRestart("muffleWarning")
[13:23:22.147]                       }
[13:23:22.147]                       else if (inherits(cond, "condition")) {
[13:23:22.147]                         if (!is.null(pattern)) {
[13:23:22.147]                           computeRestarts <- base::computeRestarts
[13:23:22.147]                           grepl <- base::grepl
[13:23:22.147]                           restarts <- computeRestarts(cond)
[13:23:22.147]                           for (restart in restarts) {
[13:23:22.147]                             name <- restart$name
[13:23:22.147]                             if (is.null(name)) 
[13:23:22.147]                               next
[13:23:22.147]                             if (!grepl(pattern, name)) 
[13:23:22.147]                               next
[13:23:22.147]                             invokeRestart(restart)
[13:23:22.147]                             muffled <- TRUE
[13:23:22.147]                             break
[13:23:22.147]                           }
[13:23:22.147]                         }
[13:23:22.147]                       }
[13:23:22.147]                       invisible(muffled)
[13:23:22.147]                     }
[13:23:22.147]                     muffleCondition(cond, pattern = "^muffle")
[13:23:22.147]                   }
[13:23:22.147]                 }
[13:23:22.147]                 else {
[13:23:22.147]                   if (TRUE) {
[13:23:22.147]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:23:22.147]                     {
[13:23:22.147]                       inherits <- base::inherits
[13:23:22.147]                       invokeRestart <- base::invokeRestart
[13:23:22.147]                       is.null <- base::is.null
[13:23:22.147]                       muffled <- FALSE
[13:23:22.147]                       if (inherits(cond, "message")) {
[13:23:22.147]                         muffled <- grepl(pattern, "muffleMessage")
[13:23:22.147]                         if (muffled) 
[13:23:22.147]                           invokeRestart("muffleMessage")
[13:23:22.147]                       }
[13:23:22.147]                       else if (inherits(cond, "warning")) {
[13:23:22.147]                         muffled <- grepl(pattern, "muffleWarning")
[13:23:22.147]                         if (muffled) 
[13:23:22.147]                           invokeRestart("muffleWarning")
[13:23:22.147]                       }
[13:23:22.147]                       else if (inherits(cond, "condition")) {
[13:23:22.147]                         if (!is.null(pattern)) {
[13:23:22.147]                           computeRestarts <- base::computeRestarts
[13:23:22.147]                           grepl <- base::grepl
[13:23:22.147]                           restarts <- computeRestarts(cond)
[13:23:22.147]                           for (restart in restarts) {
[13:23:22.147]                             name <- restart$name
[13:23:22.147]                             if (is.null(name)) 
[13:23:22.147]                               next
[13:23:22.147]                             if (!grepl(pattern, name)) 
[13:23:22.147]                               next
[13:23:22.147]                             invokeRestart(restart)
[13:23:22.147]                             muffled <- TRUE
[13:23:22.147]                             break
[13:23:22.147]                           }
[13:23:22.147]                         }
[13:23:22.147]                       }
[13:23:22.147]                       invisible(muffled)
[13:23:22.147]                     }
[13:23:22.147]                     muffleCondition(cond, pattern = "^muffle")
[13:23:22.147]                   }
[13:23:22.147]                 }
[13:23:22.147]             }
[13:23:22.147]         }))
[13:23:22.147]     }, error = function(ex) {
[13:23:22.147]         base::structure(base::list(value = NULL, visible = NULL, 
[13:23:22.147]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:23:22.147]                 ...future.rng), started = ...future.startTime, 
[13:23:22.147]             finished = Sys.time(), session_uuid = NA_character_, 
[13:23:22.147]             version = "1.8"), class = "FutureResult")
[13:23:22.147]     }, finally = {
[13:23:22.147]         if (!identical(...future.workdir, getwd())) 
[13:23:22.147]             setwd(...future.workdir)
[13:23:22.147]         {
[13:23:22.147]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:23:22.147]                 ...future.oldOptions$nwarnings <- NULL
[13:23:22.147]             }
[13:23:22.147]             base::options(...future.oldOptions)
[13:23:22.147]             if (.Platform$OS.type == "windows") {
[13:23:22.147]                 old_names <- names(...future.oldEnvVars)
[13:23:22.147]                 envs <- base::Sys.getenv()
[13:23:22.147]                 names <- names(envs)
[13:23:22.147]                 common <- intersect(names, old_names)
[13:23:22.147]                 added <- setdiff(names, old_names)
[13:23:22.147]                 removed <- setdiff(old_names, names)
[13:23:22.147]                 changed <- common[...future.oldEnvVars[common] != 
[13:23:22.147]                   envs[common]]
[13:23:22.147]                 NAMES <- toupper(changed)
[13:23:22.147]                 args <- list()
[13:23:22.147]                 for (kk in seq_along(NAMES)) {
[13:23:22.147]                   name <- changed[[kk]]
[13:23:22.147]                   NAME <- NAMES[[kk]]
[13:23:22.147]                   if (name != NAME && is.element(NAME, old_names)) 
[13:23:22.147]                     next
[13:23:22.147]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:23:22.147]                 }
[13:23:22.147]                 NAMES <- toupper(added)
[13:23:22.147]                 for (kk in seq_along(NAMES)) {
[13:23:22.147]                   name <- added[[kk]]
[13:23:22.147]                   NAME <- NAMES[[kk]]
[13:23:22.147]                   if (name != NAME && is.element(NAME, old_names)) 
[13:23:22.147]                     next
[13:23:22.147]                   args[[name]] <- ""
[13:23:22.147]                 }
[13:23:22.147]                 NAMES <- toupper(removed)
[13:23:22.147]                 for (kk in seq_along(NAMES)) {
[13:23:22.147]                   name <- removed[[kk]]
[13:23:22.147]                   NAME <- NAMES[[kk]]
[13:23:22.147]                   if (name != NAME && is.element(NAME, old_names)) 
[13:23:22.147]                     next
[13:23:22.147]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:23:22.147]                 }
[13:23:22.147]                 if (length(args) > 0) 
[13:23:22.147]                   base::do.call(base::Sys.setenv, args = args)
[13:23:22.147]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:23:22.147]             }
[13:23:22.147]             else {
[13:23:22.147]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:23:22.147]             }
[13:23:22.147]             {
[13:23:22.147]                 if (base::length(...future.futureOptionsAdded) > 
[13:23:22.147]                   0L) {
[13:23:22.147]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:23:22.147]                   base::names(opts) <- ...future.futureOptionsAdded
[13:23:22.147]                   base::options(opts)
[13:23:22.147]                 }
[13:23:22.147]                 {
[13:23:22.147]                   {
[13:23:22.147]                     base::options(mc.cores = ...future.mc.cores.old)
[13:23:22.147]                     NULL
[13:23:22.147]                   }
[13:23:22.147]                   options(future.plan = NULL)
[13:23:22.147]                   if (is.na(NA_character_)) 
[13:23:22.147]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:23:22.147]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:23:22.147]                   future::plan(list(function (..., workers = availableCores(constraints = "multicore"), 
[13:23:22.147]                     envir = parent.frame()) 
[13:23:22.147]                   {
[13:23:22.147]                     default_workers <- missing(workers)
[13:23:22.147]                     if (is.function(workers)) 
[13:23:22.147]                       workers <- workers()
[13:23:22.147]                     workers <- structure(as.integer(workers), 
[13:23:22.147]                       class = class(workers))
[13:23:22.147]                     stop_if_not(is.finite(workers), workers >= 
[13:23:22.147]                       1L)
[13:23:22.147]                     if ((workers == 1L && !inherits(workers, 
[13:23:22.147]                       "AsIs")) || !supportsMulticore(warn = TRUE)) {
[13:23:22.147]                       if (default_workers) 
[13:23:22.147]                         supportsMulticore(warn = TRUE)
[13:23:22.147]                       return(sequential(..., envir = envir))
[13:23:22.147]                     }
[13:23:22.147]                     oopts <- options(mc.cores = workers)
[13:23:22.147]                     on.exit(options(oopts))
[13:23:22.147]                     future <- MulticoreFuture(..., workers = workers, 
[13:23:22.147]                       envir = envir)
[13:23:22.147]                     if (!future$lazy) 
[13:23:22.147]                       future <- run(future)
[13:23:22.147]                     invisible(future)
[13:23:22.147]                   }), .cleanup = FALSE, .init = FALSE)
[13:23:22.147]                 }
[13:23:22.147]             }
[13:23:22.147]         }
[13:23:22.147]     })
[13:23:22.147]     if (TRUE) {
[13:23:22.147]         base::sink(type = "output", split = FALSE)
[13:23:22.147]         if (TRUE) {
[13:23:22.147]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:23:22.147]         }
[13:23:22.147]         else {
[13:23:22.147]             ...future.result["stdout"] <- base::list(NULL)
[13:23:22.147]         }
[13:23:22.147]         base::close(...future.stdout)
[13:23:22.147]         ...future.stdout <- NULL
[13:23:22.147]     }
[13:23:22.147]     ...future.result$conditions <- ...future.conditions
[13:23:22.147]     ...future.result$finished <- base::Sys.time()
[13:23:22.147]     ...future.result
[13:23:22.147] }
[13:23:22.149] assign_globals() ...
[13:23:22.149] List of 1
[13:23:22.149]  $ data:'data.frame':	5 obs. of  2 variables:
[13:23:22.149]   ..$ x: int [1:5] 1 2 3 4 5
[13:23:22.149]   ..$ y: int [1:5] 1 2 3 4 5
[13:23:22.149]  - attr(*, "where")=List of 1
[13:23:22.149]   ..$ data:<environment: R_EmptyEnv> 
[13:23:22.149]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[13:23:22.149]  - attr(*, "resolved")= logi FALSE
[13:23:22.149]  - attr(*, "total_size")= num 160
[13:23:22.149]  - attr(*, "already-done")= logi TRUE
[13:23:22.153] - copied ‘data’ to environment
[13:23:22.154] assign_globals() ... done
[13:23:22.154] requestCore(): workers = 2
[13:23:22.156] MulticoreFuture started
[13:23:22.156] - Launch lazy future ... done
[13:23:22.157] run() for ‘MulticoreFuture’ ... done
[13:23:22.157] result() for MulticoreFuture ...
[13:23:22.157] plan(): Setting new future strategy stack:
[13:23:22.158] List of future strategies:
[13:23:22.158] 1. sequential:
[13:23:22.158]    - args: function (..., envir = parent.frame())
[13:23:22.158]    - tweaked: FALSE
[13:23:22.158]    - call: NULL
[13:23:22.158] plan(): nbrOfWorkers() = 1
[13:23:22.161] plan(): Setting new future strategy stack:
[13:23:22.161] List of future strategies:
[13:23:22.161] 1. multicore:
[13:23:22.161]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[13:23:22.161]    - tweaked: FALSE
[13:23:22.161]    - call: plan(strategy)
[13:23:22.166] plan(): nbrOfWorkers() = 2
[13:23:22.167] result() for MulticoreFuture ...
[13:23:22.167] result() for MulticoreFuture ... done
[13:23:22.168] result() for MulticoreFuture ... done
[13:23:22.168] result() for MulticoreFuture ...
[13:23:22.168] result() for MulticoreFuture ... done
[13:23:22.169] plan(): Setting new future strategy stack:
[13:23:22.169] List of future strategies:
[13:23:22.169] 1. sequential:
[13:23:22.169]    - args: function (..., envir = parent.frame())
[13:23:22.169]    - tweaked: FALSE
[13:23:22.169]    - call: plan(list(sequential, strategy))
[13:23:22.169] 2. multicore:
[13:23:22.169]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[13:23:22.169]    - tweaked: FALSE
[13:23:22.169]    - call: plan(list(sequential, strategy))
[13:23:22.170] plan(): nbrOfWorkers() = 1
[13:23:22.170] getGlobalsAndPackages() ...
Warning: R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘ignore’
[13:23:22.171] Searching for globals...
[13:23:22.174] - globals found: [8] ‘{’, ‘<-’, ‘$’, ‘subset’, ‘data’, ‘<’, ‘x’, ‘%<-%’
[13:23:22.175] Searching for globals ... DONE
[13:23:22.175] Resolving globals: FALSE
[13:23:22.176] The total size of the 1 globals is 160 bytes (160 bytes)
[13:23:22.176] The total size of the 1 globals exported for future expression (‘{; a %<-% subset(data, x < 3)$y; a; }’) is 160 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘data’ (160 bytes of class ‘list’)
[13:23:22.176] - globals: [1] ‘data’
[13:23:22.176] - packages: [1] ‘future’
[13:23:22.177] getGlobalsAndPackages() ... DONE
[13:23:22.177] run() for ‘Future’ ...
[13:23:22.177] - state: ‘created’
[13:23:22.177] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[13:23:22.178] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[13:23:22.178] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[13:23:22.178]   - Field: ‘label’
[13:23:22.178]   - Field: ‘local’
[13:23:22.178]   - Field: ‘owner’
[13:23:22.178]   - Field: ‘envir’
[13:23:22.178]   - Field: ‘packages’
[13:23:22.179]   - Field: ‘gc’
[13:23:22.179]   - Field: ‘conditions’
[13:23:22.179]   - Field: ‘expr’
[13:23:22.179]   - Field: ‘uuid’
[13:23:22.179]   - Field: ‘seed’
[13:23:22.179]   - Field: ‘version’
[13:23:22.179]   - Field: ‘result’
[13:23:22.179]   - Field: ‘asynchronous’
[13:23:22.179]   - Field: ‘calls’
[13:23:22.180]   - Field: ‘globals’
[13:23:22.180]   - Field: ‘stdout’
[13:23:22.180]   - Field: ‘earlySignal’
[13:23:22.180]   - Field: ‘lazy’
[13:23:22.180]   - Field: ‘state’
[13:23:22.180] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[13:23:22.180] - Launch lazy future ...
[13:23:22.180] Packages needed by the future expression (n = 1): ‘future’
[13:23:22.181] Packages needed by future strategies (n = 1): ‘future’
[13:23:22.181] {
[13:23:22.181]     {
[13:23:22.181]         {
[13:23:22.181]             ...future.startTime <- base::Sys.time()
[13:23:22.181]             {
[13:23:22.181]                 {
[13:23:22.181]                   {
[13:23:22.181]                     {
[13:23:22.181]                       base::local({
[13:23:22.181]                         has_future <- base::requireNamespace("future", 
[13:23:22.181]                           quietly = TRUE)
[13:23:22.181]                         if (has_future) {
[13:23:22.181]                           ns <- base::getNamespace("future")
[13:23:22.181]                           version <- ns[[".package"]][["version"]]
[13:23:22.181]                           if (is.null(version)) 
[13:23:22.181]                             version <- utils::packageVersion("future")
[13:23:22.181]                         }
[13:23:22.181]                         else {
[13:23:22.181]                           version <- NULL
[13:23:22.181]                         }
[13:23:22.181]                         if (!has_future || version < "1.8.0") {
[13:23:22.181]                           info <- base::c(r_version = base::gsub("R version ", 
[13:23:22.181]                             "", base::R.version$version.string), 
[13:23:22.181]                             platform = base::sprintf("%s (%s-bit)", 
[13:23:22.181]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:23:22.181]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:23:22.181]                               "release", "version")], collapse = " "), 
[13:23:22.181]                             hostname = base::Sys.info()[["nodename"]])
[13:23:22.181]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:23:22.181]                             info)
[13:23:22.181]                           info <- base::paste(info, collapse = "; ")
[13:23:22.181]                           if (!has_future) {
[13:23:22.181]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:23:22.181]                               info)
[13:23:22.181]                           }
[13:23:22.181]                           else {
[13:23:22.181]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:23:22.181]                               info, version)
[13:23:22.181]                           }
[13:23:22.181]                           base::stop(msg)
[13:23:22.181]                         }
[13:23:22.181]                       })
[13:23:22.181]                     }
[13:23:22.181]                     base::local({
[13:23:22.181]                       for (pkg in "future") {
[13:23:22.181]                         base::loadNamespace(pkg)
[13:23:22.181]                         base::library(pkg, character.only = TRUE)
[13:23:22.181]                       }
[13:23:22.181]                     })
[13:23:22.181]                   }
[13:23:22.181]                   options(future.plan = NULL)
[13:23:22.181]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:23:22.181]                   future::plan(list(function (..., workers = availableCores(constraints = "multicore"), 
[13:23:22.181]                     envir = parent.frame()) 
[13:23:22.181]                   {
[13:23:22.181]                     default_workers <- missing(workers)
[13:23:22.181]                     if (is.function(workers)) 
[13:23:22.181]                       workers <- workers()
[13:23:22.181]                     workers <- structure(as.integer(workers), 
[13:23:22.181]                       class = class(workers))
[13:23:22.181]                     stop_if_not(is.finite(workers), workers >= 
[13:23:22.181]                       1L)
[13:23:22.181]                     if ((workers == 1L && !inherits(workers, 
[13:23:22.181]                       "AsIs")) || !supportsMulticore(warn = TRUE)) {
[13:23:22.181]                       if (default_workers) 
[13:23:22.181]                         supportsMulticore(warn = TRUE)
[13:23:22.181]                       return(sequential(..., envir = envir))
[13:23:22.181]                     }
[13:23:22.181]                     oopts <- options(mc.cores = workers)
[13:23:22.181]                     on.exit(options(oopts))
[13:23:22.181]                     future <- MulticoreFuture(..., workers = workers, 
[13:23:22.181]                       envir = envir)
[13:23:22.181]                     if (!future$lazy) 
[13:23:22.181]                       future <- run(future)
[13:23:22.181]                     invisible(future)
[13:23:22.181]                   }), .cleanup = FALSE, .init = FALSE)
[13:23:22.181]                 }
[13:23:22.181]                 ...future.workdir <- getwd()
[13:23:22.181]             }
[13:23:22.181]             ...future.oldOptions <- base::as.list(base::.Options)
[13:23:22.181]             ...future.oldEnvVars <- base::Sys.getenv()
[13:23:22.181]         }
[13:23:22.181]         base::options(future.startup.script = FALSE, future.globals.onMissing = "ignore", 
[13:23:22.181]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:23:22.181]             future.globals.onMissing = "ignore", future.globals.onReference = NULL, 
[13:23:22.181]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:23:22.181]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:23:22.181]             future.stdout.windows.reencode = NULL, width = 80L)
[13:23:22.181]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:23:22.181]             base::names(...future.oldOptions))
[13:23:22.181]     }
[13:23:22.181]     if (FALSE) {
[13:23:22.181]     }
[13:23:22.181]     else {
[13:23:22.181]         if (TRUE) {
[13:23:22.181]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:23:22.181]                 open = "w")
[13:23:22.181]         }
[13:23:22.181]         else {
[13:23:22.181]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:23:22.181]                 windows = "NUL", "/dev/null"), open = "w")
[13:23:22.181]         }
[13:23:22.181]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:23:22.181]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:23:22.181]             base::sink(type = "output", split = FALSE)
[13:23:22.181]             base::close(...future.stdout)
[13:23:22.181]         }, add = TRUE)
[13:23:22.181]     }
[13:23:22.181]     ...future.frame <- base::sys.nframe()
[13:23:22.181]     ...future.conditions <- base::list()
[13:23:22.181]     ...future.rng <- base::globalenv()$.Random.seed
[13:23:22.181]     if (FALSE) {
[13:23:22.181]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:23:22.181]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:23:22.181]     }
[13:23:22.181]     ...future.result <- base::tryCatch({
[13:23:22.181]         base::withCallingHandlers({
[13:23:22.181]             ...future.value <- base::withVisible(base::local({
[13:23:22.181]                 a %<-% subset(data, x < 3)$y
[13:23:22.181]                 a
[13:23:22.181]             }))
[13:23:22.181]             future::FutureResult(value = ...future.value$value, 
[13:23:22.181]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:23:22.181]                   ...future.rng), globalenv = if (FALSE) 
[13:23:22.181]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:23:22.181]                     ...future.globalenv.names))
[13:23:22.181]                 else NULL, started = ...future.startTime, version = "1.8")
[13:23:22.181]         }, condition = base::local({
[13:23:22.181]             c <- base::c
[13:23:22.181]             inherits <- base::inherits
[13:23:22.181]             invokeRestart <- base::invokeRestart
[13:23:22.181]             length <- base::length
[13:23:22.181]             list <- base::list
[13:23:22.181]             seq.int <- base::seq.int
[13:23:22.181]             signalCondition <- base::signalCondition
[13:23:22.181]             sys.calls <- base::sys.calls
[13:23:22.181]             `[[` <- base::`[[`
[13:23:22.181]             `+` <- base::`+`
[13:23:22.181]             `<<-` <- base::`<<-`
[13:23:22.181]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:23:22.181]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:23:22.181]                   3L)]
[13:23:22.181]             }
[13:23:22.181]             function(cond) {
[13:23:22.181]                 is_error <- inherits(cond, "error")
[13:23:22.181]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:23:22.181]                   NULL)
[13:23:22.181]                 if (is_error) {
[13:23:22.181]                   sessionInformation <- function() {
[13:23:22.181]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:23:22.181]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:23:22.181]                       search = base::search(), system = base::Sys.info())
[13:23:22.181]                   }
[13:23:22.181]                   ...future.conditions[[length(...future.conditions) + 
[13:23:22.181]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:23:22.181]                     cond$call), session = sessionInformation(), 
[13:23:22.181]                     timestamp = base::Sys.time(), signaled = 0L)
[13:23:22.181]                   signalCondition(cond)
[13:23:22.181]                 }
[13:23:22.181]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:23:22.181]                 "immediateCondition"))) {
[13:23:22.181]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:23:22.181]                   ...future.conditions[[length(...future.conditions) + 
[13:23:22.181]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:23:22.181]                   if (TRUE && !signal) {
[13:23:22.181]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:23:22.181]                     {
[13:23:22.181]                       inherits <- base::inherits
[13:23:22.181]                       invokeRestart <- base::invokeRestart
[13:23:22.181]                       is.null <- base::is.null
[13:23:22.181]                       muffled <- FALSE
[13:23:22.181]                       if (inherits(cond, "message")) {
[13:23:22.181]                         muffled <- grepl(pattern, "muffleMessage")
[13:23:22.181]                         if (muffled) 
[13:23:22.181]                           invokeRestart("muffleMessage")
[13:23:22.181]                       }
[13:23:22.181]                       else if (inherits(cond, "warning")) {
[13:23:22.181]                         muffled <- grepl(pattern, "muffleWarning")
[13:23:22.181]                         if (muffled) 
[13:23:22.181]                           invokeRestart("muffleWarning")
[13:23:22.181]                       }
[13:23:22.181]                       else if (inherits(cond, "condition")) {
[13:23:22.181]                         if (!is.null(pattern)) {
[13:23:22.181]                           computeRestarts <- base::computeRestarts
[13:23:22.181]                           grepl <- base::grepl
[13:23:22.181]                           restarts <- computeRestarts(cond)
[13:23:22.181]                           for (restart in restarts) {
[13:23:22.181]                             name <- restart$name
[13:23:22.181]                             if (is.null(name)) 
[13:23:22.181]                               next
[13:23:22.181]                             if (!grepl(pattern, name)) 
[13:23:22.181]                               next
[13:23:22.181]                             invokeRestart(restart)
[13:23:22.181]                             muffled <- TRUE
[13:23:22.181]                             break
[13:23:22.181]                           }
[13:23:22.181]                         }
[13:23:22.181]                       }
[13:23:22.181]                       invisible(muffled)
[13:23:22.181]                     }
[13:23:22.181]                     muffleCondition(cond, pattern = "^muffle")
[13:23:22.181]                   }
[13:23:22.181]                 }
[13:23:22.181]                 else {
[13:23:22.181]                   if (TRUE) {
[13:23:22.181]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:23:22.181]                     {
[13:23:22.181]                       inherits <- base::inherits
[13:23:22.181]                       invokeRestart <- base::invokeRestart
[13:23:22.181]                       is.null <- base::is.null
[13:23:22.181]                       muffled <- FALSE
[13:23:22.181]                       if (inherits(cond, "message")) {
[13:23:22.181]                         muffled <- grepl(pattern, "muffleMessage")
[13:23:22.181]                         if (muffled) 
[13:23:22.181]                           invokeRestart("muffleMessage")
[13:23:22.181]                       }
[13:23:22.181]                       else if (inherits(cond, "warning")) {
[13:23:22.181]                         muffled <- grepl(pattern, "muffleWarning")
[13:23:22.181]                         if (muffled) 
[13:23:22.181]                           invokeRestart("muffleWarning")
[13:23:22.181]                       }
[13:23:22.181]                       else if (inherits(cond, "condition")) {
[13:23:22.181]                         if (!is.null(pattern)) {
[13:23:22.181]                           computeRestarts <- base::computeRestarts
[13:23:22.181]                           grepl <- base::grepl
[13:23:22.181]                           restarts <- computeRestarts(cond)
[13:23:22.181]                           for (restart in restarts) {
[13:23:22.181]                             name <- restart$name
[13:23:22.181]                             if (is.null(name)) 
[13:23:22.181]                               next
[13:23:22.181]                             if (!grepl(pattern, name)) 
[13:23:22.181]                               next
[13:23:22.181]                             invokeRestart(restart)
[13:23:22.181]                             muffled <- TRUE
[13:23:22.181]                             break
[13:23:22.181]                           }
[13:23:22.181]                         }
[13:23:22.181]                       }
[13:23:22.181]                       invisible(muffled)
[13:23:22.181]                     }
[13:23:22.181]                     muffleCondition(cond, pattern = "^muffle")
[13:23:22.181]                   }
[13:23:22.181]                 }
[13:23:22.181]             }
[13:23:22.181]         }))
[13:23:22.181]     }, error = function(ex) {
[13:23:22.181]         base::structure(base::list(value = NULL, visible = NULL, 
[13:23:22.181]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:23:22.181]                 ...future.rng), started = ...future.startTime, 
[13:23:22.181]             finished = Sys.time(), session_uuid = NA_character_, 
[13:23:22.181]             version = "1.8"), class = "FutureResult")
[13:23:22.181]     }, finally = {
[13:23:22.181]         if (!identical(...future.workdir, getwd())) 
[13:23:22.181]             setwd(...future.workdir)
[13:23:22.181]         {
[13:23:22.181]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:23:22.181]                 ...future.oldOptions$nwarnings <- NULL
[13:23:22.181]             }
[13:23:22.181]             base::options(...future.oldOptions)
[13:23:22.181]             if (.Platform$OS.type == "windows") {
[13:23:22.181]                 old_names <- names(...future.oldEnvVars)
[13:23:22.181]                 envs <- base::Sys.getenv()
[13:23:22.181]                 names <- names(envs)
[13:23:22.181]                 common <- intersect(names, old_names)
[13:23:22.181]                 added <- setdiff(names, old_names)
[13:23:22.181]                 removed <- setdiff(old_names, names)
[13:23:22.181]                 changed <- common[...future.oldEnvVars[common] != 
[13:23:22.181]                   envs[common]]
[13:23:22.181]                 NAMES <- toupper(changed)
[13:23:22.181]                 args <- list()
[13:23:22.181]                 for (kk in seq_along(NAMES)) {
[13:23:22.181]                   name <- changed[[kk]]
[13:23:22.181]                   NAME <- NAMES[[kk]]
[13:23:22.181]                   if (name != NAME && is.element(NAME, old_names)) 
[13:23:22.181]                     next
[13:23:22.181]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:23:22.181]                 }
[13:23:22.181]                 NAMES <- toupper(added)
[13:23:22.181]                 for (kk in seq_along(NAMES)) {
[13:23:22.181]                   name <- added[[kk]]
[13:23:22.181]                   NAME <- NAMES[[kk]]
[13:23:22.181]                   if (name != NAME && is.element(NAME, old_names)) 
[13:23:22.181]                     next
[13:23:22.181]                   args[[name]] <- ""
[13:23:22.181]                 }
[13:23:22.181]                 NAMES <- toupper(removed)
[13:23:22.181]                 for (kk in seq_along(NAMES)) {
[13:23:22.181]                   name <- removed[[kk]]
[13:23:22.181]                   NAME <- NAMES[[kk]]
[13:23:22.181]                   if (name != NAME && is.element(NAME, old_names)) 
[13:23:22.181]                     next
[13:23:22.181]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:23:22.181]                 }
[13:23:22.181]                 if (length(args) > 0) 
[13:23:22.181]                   base::do.call(base::Sys.setenv, args = args)
[13:23:22.181]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:23:22.181]             }
[13:23:22.181]             else {
[13:23:22.181]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:23:22.181]             }
[13:23:22.181]             {
[13:23:22.181]                 if (base::length(...future.futureOptionsAdded) > 
[13:23:22.181]                   0L) {
[13:23:22.181]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:23:22.181]                   base::names(opts) <- ...future.futureOptionsAdded
[13:23:22.181]                   base::options(opts)
[13:23:22.181]                 }
[13:23:22.181]                 {
[13:23:22.181]                   {
[13:23:22.181]                     NULL
[13:23:22.181]                     RNGkind("Mersenne-Twister")
[13:23:22.181]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[13:23:22.181]                       inherits = FALSE)
[13:23:22.181]                   }
[13:23:22.181]                   options(future.plan = NULL)
[13:23:22.181]                   if (is.na(NA_character_)) 
[13:23:22.181]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:23:22.181]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:23:22.181]                   future::plan(list(function (..., envir = parent.frame()) 
[13:23:22.181]                   {
[13:23:22.181]                     future <- SequentialFuture(..., envir = envir)
[13:23:22.181]                     if (!future$lazy) 
[13:23:22.181]                       future <- run(future)
[13:23:22.181]                     invisible(future)
[13:23:22.181]                   }, function (..., workers = availableCores(constraints = "multicore"), 
[13:23:22.181]                     envir = parent.frame()) 
[13:23:22.181]                   {
[13:23:22.181]                     default_workers <- missing(workers)
[13:23:22.181]                     if (is.function(workers)) 
[13:23:22.181]                       workers <- workers()
[13:23:22.181]                     workers <- structure(as.integer(workers), 
[13:23:22.181]                       class = class(workers))
[13:23:22.181]                     stop_if_not(is.finite(workers), workers >= 
[13:23:22.181]                       1L)
[13:23:22.181]                     if ((workers == 1L && !inherits(workers, 
[13:23:22.181]                       "AsIs")) || !supportsMulticore(warn = TRUE)) {
[13:23:22.181]                       if (default_workers) 
[13:23:22.181]                         supportsMulticore(warn = TRUE)
[13:23:22.181]                       return(sequential(..., envir = envir))
[13:23:22.181]                     }
[13:23:22.181]                     oopts <- options(mc.cores = workers)
[13:23:22.181]                     on.exit(options(oopts))
[13:23:22.181]                     future <- MulticoreFuture(..., workers = workers, 
[13:23:22.181]                       envir = envir)
[13:23:22.181]                     if (!future$lazy) 
[13:23:22.181]                       future <- run(future)
[13:23:22.181]                     invisible(future)
[13:23:22.181]                   }), .cleanup = FALSE, .init = FALSE)
[13:23:22.181]                 }
[13:23:22.181]             }
[13:23:22.181]         }
[13:23:22.181]     })
[13:23:22.181]     if (TRUE) {
[13:23:22.181]         base::sink(type = "output", split = FALSE)
[13:23:22.181]         if (TRUE) {
[13:23:22.181]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:23:22.181]         }
[13:23:22.181]         else {
[13:23:22.181]             ...future.result["stdout"] <- base::list(NULL)
[13:23:22.181]         }
[13:23:22.181]         base::close(...future.stdout)
[13:23:22.181]         ...future.stdout <- NULL
[13:23:22.181]     }
[13:23:22.181]     ...future.result$conditions <- ...future.conditions
[13:23:22.181]     ...future.result$finished <- base::Sys.time()
[13:23:22.181]     ...future.result
[13:23:22.181] }
[13:23:22.184] assign_globals() ...
[13:23:22.184] List of 1
[13:23:22.184]  $ data:'data.frame':	5 obs. of  2 variables:
[13:23:22.184]   ..$ x: int [1:5] 1 2 3 4 5
[13:23:22.184]   ..$ y: int [1:5] 1 2 3 4 5
[13:23:22.184]  - attr(*, "where")=List of 1
[13:23:22.184]   ..$ data:<environment: R_EmptyEnv> 
[13:23:22.184]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[13:23:22.184]  - attr(*, "resolved")= logi FALSE
[13:23:22.184]  - attr(*, "total_size")= num 160
[13:23:22.184]  - attr(*, "already-done")= logi TRUE
[13:23:22.191] - copied ‘data’ to environment
[13:23:22.191] assign_globals() ... done
[13:23:22.191] plan(): Setting new future strategy stack:
[13:23:22.191] List of future strategies:
[13:23:22.191] 1. multicore:
[13:23:22.191]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[13:23:22.191]    - tweaked: FALSE
[13:23:22.191]    - call: plan(list(sequential, strategy))
[13:23:22.196] plan(): nbrOfWorkers() = 2
[13:23:22.246] plan(): Setting new future strategy stack:
[13:23:22.246] List of future strategies:
[13:23:22.246] 1. sequential:
[13:23:22.246]    - args: function (..., envir = parent.frame())
[13:23:22.246]    - tweaked: FALSE
[13:23:22.246]    - call: plan(list(sequential, strategy))
[13:23:22.246] 2. multicore:
[13:23:22.246]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[13:23:22.246]    - tweaked: FALSE
[13:23:22.246]    - call: plan(list(sequential, strategy))
[13:23:22.247] plan(): nbrOfWorkers() = 1
[13:23:22.247] SequentialFuture started (and completed)
[13:23:22.247] signalConditions() ...
[13:23:22.247]  - include = ‘immediateCondition’
[13:23:22.247]  - exclude = 
[13:23:22.248]  - resignal = FALSE
[13:23:22.248]  - Number of conditions: 56
[13:23:22.248] signalConditions() ... done
[13:23:22.248] - Launch lazy future ... done
[13:23:22.248] run() for ‘SequentialFuture’ ... done
[13:23:22.248] signalConditions() ...
[13:23:22.248]  - include = ‘immediateCondition’
[13:23:22.249]  - exclude = 
[13:23:22.249]  - resignal = FALSE
[13:23:22.249]  - Number of conditions: 56
[13:23:22.249] signalConditions() ... done
[13:23:22.249] Future state: ‘finished’
[13:23:22.249] signalConditions() ...
[13:23:22.249]  - include = ‘condition’
[13:23:22.250]  - exclude = ‘immediateCondition’
[13:23:22.250]  - resignal = TRUE
[13:23:22.250]  - Number of conditions: 56
[13:23:22.250]  - Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:22.196] getGlobalsAndPackages() ...
[13:23:22.250]  - Condition #2: ‘deprecatedWarning’, ‘warning’, ‘condition’
Warning: R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘ignore’
[13:23:22.250]  - Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:22.211] Searching for globals...
[13:23:22.250]  - Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:22.214] - globals found: [5] ‘$’, ‘subset’, ‘data’, ‘<’, ‘x’
[13:23:22.251]  - Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:22.214] Searching for globals ... DONE
[13:23:22.251]  - Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:22.214] Resolving globals: FALSE
[13:23:22.251]  - Condition #7: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:22.215] The total size of the 1 globals is 160 bytes (160 bytes)
[13:23:22.251]  - Condition #8: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:22.215] The total size of the 1 globals exported for future expression (‘subset(data, x < 3)$y’) is 160 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘data’ (160 bytes of class ‘list’)
[13:23:22.251]  - Condition #9: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:22.216] - globals: [1] ‘data’
[13:23:22.251]  - Condition #10: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:22.216] 
[13:23:22.252]  - Condition #11: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:22.216] getGlobalsAndPackages() ... DONE
[13:23:22.252]  - Condition #12: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:22.216] run() for ‘Future’ ...
[13:23:22.252]  - Condition #13: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:22.216] - state: ‘created’
[13:23:22.252]  - Condition #14: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:22.216] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[13:23:22.252]  - Condition #15: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:22.220] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:23:22.252]  - Condition #16: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:22.221] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[13:23:22.253]  - Condition #17: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:22.221]   - Field: ‘label’
[13:23:22.253]  - Condition #18: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:22.221]   - Field: ‘local’
[13:23:22.253]  - Condition #19: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:22.221]   - Field: ‘owner’
[13:23:22.253]  - Condition #20: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:22.221]   - Field: ‘envir’
[13:23:22.253]  - Condition #21: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:22.221]   - Field: ‘workers’
[13:23:22.253]  - Condition #22: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:22.221]   - Field: ‘packages’
[13:23:22.254]  - Condition #23: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:22.221]   - Field: ‘gc’
[13:23:22.254]  - Condition #24: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:22.222]   - Field: ‘job’
[13:23:22.254]  - Condition #25: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:22.222]   - Field: ‘conditions’
[13:23:22.254]  - Condition #26: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:22.222]   - Field: ‘expr’
[13:23:22.254]  - Condition #27: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:22.222]   - Field: ‘uuid’
[13:23:22.254]  - Condition #28: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:22.222]   - Field: ‘seed’
[13:23:22.255]  - Condition #29: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:22.222]   - Field: ‘version’
[13:23:22.255]  - Condition #30: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:22.222]   - Field: ‘result’
[13:23:22.255]  - Condition #31: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:22.222]   - Field: ‘asynchronous’
[13:23:22.255]  - Condition #32: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:22.222]   - Field: ‘calls’
[13:23:22.255]  - Condition #33: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:22.223]   - Field: ‘globals’
[13:23:22.255]  - Condition #34: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:22.223]   - Field: ‘stdout’
[13:23:22.256]  - Condition #35: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:22.223]   - Field: ‘earlySignal’
[13:23:22.256]  - Condition #36: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:22.223]   - Field: ‘lazy’
[13:23:22.256]  - Condition #37: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:22.223]   - Field: ‘state’
[13:23:22.256]  - Condition #38: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:22.223] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[13:23:22.256]  - Condition #39: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:22.223] - Launch lazy future ...
[13:23:22.256]  - Condition #40: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:22.223] Packages needed by the future expression (n = 0): <none>
[13:23:22.257]  - Condition #41: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:22.224] Packages needed by future strategies (n = 0): <none>
[13:23:22.257]  - Condition #42: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:22.224] {
[13:23:22.224]     {
[13:23:22.224]         {
[13:23:22.224]             ...future.startTime <- base::Sys.time()
[13:23:22.224]             {
[13:23:22.224]                 {
[13:23:22.224]                   {
[13:23:22.224]                     {
[13:23:22.224]                       base::local({
[13:23:22.224]                         has_future <- base::requireNamespace("future", 
[13:23:22.224]                           quietly = TRUE)
[13:23:22.224]                         if (has_future) {
[13:23:22.224]                           ns <- base::getNamespace("future")
[13:23:22.224]                           version <- ns[[".package"]][["version"]]
[13:23:22.224]                           if (is.null(version)) 
[13:23:22.224]                             version <- utils::packageVersion("future")
[13:23:22.224]                         }
[13:23:22.224]                         else {
[13:23:22.224]                           version <- NULL
[13:23:22.224]                         }
[13:23:22.224]                         if (!has_future || version < "1.8.0") {
[13:23:22.224]                           info <- base::c(r_version = base::gsub("R version ", 
[13:23:22.224]                             "", base::R.version$version.string), 
[13:23:22.224]                             platform = base::sprintf("%s (%s-bit)", 
[13:23:22.224]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:23:22.224]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:23:22.224]                               "release", "version")], collapse = " "), 
[13:23:22.224]                             hostname = base::Sys.info()[["nodename"]])
[13:23:22.224]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:23:22.224]                             info)
[13:23:22.224]                           info <- base::paste(info, collapse = "; ")
[13:23:22.224]                           if (!has_future) {
[13:23:22.224]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:23:22.224]                               info)
[13:23:22.224]                           }
[13:23:22.224]                           else {
[13:23:22.224]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:23:22.224]                               info, version)
[13:23:22.224]                           }
[13:23:22.224]                           base::stop(msg)
[13:23:22.224]                         }
[13:23:22.224]                       })
[13:23:22.224]                     }
[13:23:22.224]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[13:23:22.224]                     base::options(mc.cores = 1L)
[13:23:22.224]                   }
[13:23:22.224]                   options(future.plan = NULL)
[13:23:22.224]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:23:22.224]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:23:22.224]                 }
[13:23:22.224]                 ...future.workdir <- getwd()
[13:23:22.224]             }
[13:23:22.224]             ...future.oldOptions <- base::as.list(base::.Options)
[13:23:22.224]             ...future.oldEnvVars <- base::Sys.getenv()
[13:23:22.224]         }
[13:23:22.224]         base::options(future.startup.script = FALSE, future.globals.onMissing = "ignore", 
[13:23:22.224]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:23:22.224]             future.globals.onMissing = "ignore", future.globals.onReference = NULL, 
[13:23:22.224]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:23:22.224]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:23:22.224]             future.stdout.windows.reencode = NULL, width = 80L)
[13:23:22.224]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:23:22.224]             base::names(...future.oldOptions))
[13:23:22.224]     }
[13:23:22.224]     if (FALSE) {
[13:23:22.224]     }
[13:23:22.224]     else {
[13:23:22.224]         if (TRUE) {
[13:23:22.224]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:23:22.224]                 open = "w")
[13:23:22.224]         }
[13:23:22.224]         else {
[13:23:22.224]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:23:22.224]                 windows = "NUL", "/dev/null"), open = "w")
[13:23:22.224]         }
[13:23:22.224]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:23:22.224]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:23:22.224]             base::sink(type = "output", split = FALSE)
[13:23:22.224]             base::close(...future.stdout)
[13:23:22.224]         }, add = TRUE)
[13:23:22.224]     }
[13:23:22.224]     ...future.frame <- base::sys.nframe()
[13:23:22.224]     ...future.conditions <- base::list()
[13:23:22.224]     ...future.rng <- base::globalenv()$.Random.seed
[13:23:22.224]     if (FALSE) {
[13:23:22.224]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:23:22.224]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:23:22.224]     }
[13:23:22.224]     ...future.result <- base::tryCatch({
[13:23:22.224]         base::withCallingHandlers({
[13:23:22.224]             ...future.value <- base::withVisible(base::local({
[13:23:22.224]                 withCallingHandlers({
[13:23:22.224]                   subset(data, x < 3)$y
[13:23:22.224]                 }, immediateCondition = function(cond) {
[13:23:22.224]                   save_rds <- function (object, pathname, ...) 
[13:23:22.224]                   {
[13:23:22.224]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[13:23:22.224]                     if (file_test("-f", pathname_tmp)) {
[13:23:22.224]                       fi_tmp <- file.info(pathname_tmp)
[13:23:22.224]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[13:23:22.224]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:23:22.224]                         fi_tmp[["mtime"]])
[13:23:22.224]                     }
[13:23:22.224]                     tryCatch({
[13:23:22.224]                       saveRDS(object, file = pathname_tmp, ...)
[13:23:22.224]                     }, error = function(ex) {
[13:23:22.224]                       msg <- conditionMessage(ex)
[13:23:22.224]                       fi_tmp <- file.info(pathname_tmp)
[13:23:22.224]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[13:23:22.224]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:23:22.224]                         fi_tmp[["mtime"]], msg)
[13:23:22.224]                       ex$message <- msg
[13:23:22.224]                       stop(ex)
[13:23:22.224]                     })
[13:23:22.224]                     stopifnot(file_test("-f", pathname_tmp))
[13:23:22.224]                     res <- file.rename(from = pathname_tmp, to = pathname)
[13:23:22.224]                     if (!res || file_test("-f", pathname_tmp)) {
[13:23:22.224]                       fi_tmp <- file.info(pathname_tmp)
[13:23:22.224]                       fi <- file.info(pathname)
[13:23:22.224]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[13:23:22.224]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:23:22.224]                         fi_tmp[["mtime"]], sQuote(pathname), 
[13:23:22.224]                         fi[["size"]], fi[["mtime"]])
[13:23:22.224]                       stop(msg)
[13:23:22.224]                     }
[13:23:22.224]                     invisible(pathname)
[13:23:22.224]                   }
[13:23:22.224]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[13:23:22.224]                     rootPath = tempdir()) 
[13:23:22.224]                   {
[13:23:22.224]                     obj <- list(time = Sys.time(), condition = cond)
[13:23:22.224]                     file <- tempfile(pattern = class(cond)[1], 
[13:23:22.224]                       tmpdir = path, fileext = ".rds")
[13:23:22.224]                     save_rds(obj, file)
[13:23:22.224]                   }
[13:23:22.224]                   saveImmediateCondition(cond, path = "/tmp/RtmpXByBu8/.future/immediateConditions")
[13:23:22.224]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:23:22.224]                   {
[13:23:22.224]                     inherits <- base::inherits
[13:23:22.224]                     invokeRestart <- base::invokeRestart
[13:23:22.224]                     is.null <- base::is.null
[13:23:22.224]                     muffled <- FALSE
[13:23:22.224]                     if (inherits(cond, "message")) {
[13:23:22.224]                       muffled <- grepl(pattern, "muffleMessage")
[13:23:22.224]                       if (muffled) 
[13:23:22.224]                         invokeRestart("muffleMessage")
[13:23:22.224]                     }
[13:23:22.224]                     else if (inherits(cond, "warning")) {
[13:23:22.224]                       muffled <- grepl(pattern, "muffleWarning")
[13:23:22.224]                       if (muffled) 
[13:23:22.224]                         invokeRestart("muffleWarning")
[13:23:22.224]                     }
[13:23:22.224]                     else if (inherits(cond, "condition")) {
[13:23:22.224]                       if (!is.null(pattern)) {
[13:23:22.224]                         computeRestarts <- base::computeRestarts
[13:23:22.224]                         grepl <- base::grepl
[13:23:22.224]                         restarts <- computeRestarts(cond)
[13:23:22.224]                         for (restart in restarts) {
[13:23:22.224]                           name <- restart$name
[13:23:22.224]                           if (is.null(name)) 
[13:23:22.224]                             next
[13:23:22.224]                           if (!grepl(pattern, name)) 
[13:23:22.224]                             next
[13:23:22.224]                           invokeRestart(restart)
[13:23:22.224]                           muffled <- TRUE
[13:23:22.224]                           break
[13:23:22.224]                         }
[13:23:22.224]                       }
[13:23:22.224]                     }
[13:23:22.224]                     invisible(muffled)
[13:23:22.224]                   }
[13:23:22.224]                   muffleCondition(cond)
[13:23:22.224]                 })
[13:23:22.224]             }))
[13:23:22.224]             future::FutureResult(value = ...future.value$value, 
[13:23:22.224]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:23:22.224]                   ...future.rng), globalenv = if (FALSE) 
[13:23:22.224]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:23:22.224]                     ...future.globalenv.names))
[13:23:22.224]                 else NULL, started = ...future.startTime, version = "1.8")
[13:23:22.224]         }, condition = base::local({
[13:23:22.224]             c <- base::c
[13:23:22.224]             inherits <- base::inherits
[13:23:22.224]             invokeRestart <- base::invokeRestart
[13:23:22.224]             length <- base::length
[13:23:22.224]             list <- base::list
[13:23:22.224]             seq.int <- base::seq.int
[13:23:22.224]             signalCondition <- base::signalCondition
[13:23:22.224]             sys.calls <- base::sys.calls
[13:23:22.224]             `[[` <- base::`[[`
[13:23:22.224]             `+` <- base::`+`
[13:23:22.224]             `<<-` <- base::`<<-`
[13:23:22.224]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:23:22.224]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:23:22.224]                   3L)]
[13:23:22.224]             }
[13:23:22.224]             function(cond) {
[13:23:22.224]                 is_error <- inherits(cond, "error")
[13:23:22.224]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:23:22.224]                   NULL)
[13:23:22.224]                 if (is_error) {
[13:23:22.224]                   sessionInformation <- function() {
[13:23:22.224]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:23:22.224]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:23:22.224]                       search = base::search(), system = base::Sys.info())
[13:23:22.224]                   }
[13:23:22.224]                   ...future.conditions[[length(...future.conditions) + 
[13:23:22.224]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:23:22.224]                     cond$call), session = sessionInformation(), 
[13:23:22.224]                     timestamp = base::Sys.time(), signaled = 0L)
[13:23:22.224]                   signalCondition(cond)
[13:23:22.224]                 }
[13:23:22.224]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:23:22.224]                 "immediateCondition"))) {
[13:23:22.224]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:23:22.224]                   ...future.conditions[[length(...future.conditions) + 
[13:23:22.224]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:23:22.224]                   if (TRUE && !signal) {
[13:23:22.224]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:23:22.224]                     {
[13:23:22.224]                       inherits <- base::inherits
[13:23:22.224]                       invokeRestart <- base::invokeRestart
[13:23:22.224]                       is.null <- base::is.null
[13:23:22.224]                       muffled <- FALSE
[13:23:22.224]                       if (inherits(cond, "message")) {
[13:23:22.224]                         muffled <- grepl(pattern, "muffleMessage")
[13:23:22.224]                         if (muffled) 
[13:23:22.224]                           invokeRestart("muffleMessage")
[13:23:22.224]                       }
[13:23:22.224]                       else if (inherits(cond, "warning")) {
[13:23:22.224]                         muffled <- grepl(pattern, "muffleWarning")
[13:23:22.224]                         if (muffled) 
[13:23:22.224]                           invokeRestart("muffleWarning")
[13:23:22.224]                       }
[13:23:22.224]                       else if (inherits(cond, "condition")) {
[13:23:22.224]                         if (!is.null(pattern)) {
[13:23:22.224]                           computeRestarts <- base::computeRestarts
[13:23:22.224]                           grepl <- base::grepl
[13:23:22.224]                           restarts <- computeRestarts(cond)
[13:23:22.224]                           for (restart in restarts) {
[13:23:22.224]                             name <- restart$name
[13:23:22.224]                             if (is.null(name)) 
[13:23:22.224]                               next
[13:23:22.224]                             if (!grepl(pattern, name)) 
[13:23:22.224]                               next
[13:23:22.224]                             invokeRestart(restart)
[13:23:22.224]                             muffled <- TRUE
[13:23:22.224]                             break
[13:23:22.224]                           }
[13:23:22.224]                         }
[13:23:22.224]                       }
[13:23:22.224]                       invisible(muffled)
[13:23:22.224]                     }
[13:23:22.224]                     muffleCondition(cond, pattern = "^muffle")
[13:23:22.224]                   }
[13:23:22.224]                 }
[13:23:22.224]                 else {
[13:23:22.224]                   if (TRUE) {
[13:23:22.224]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:23:22.224]                     {
[13:23:22.224]                       inherits <- base::inherits
[13:23:22.224]                       invokeRestart <- base::invokeRestart
[13:23:22.224]                       is.null <- base::is.null
[13:23:22.224]                       muffled <- FALSE
[13:23:22.224]                       if (inherits(cond, "message")) {
[13:23:22.224]                         muffled <- grepl(pattern, "muffleMessage")
[13:23:22.224]                         if (muffled) 
[13:23:22.224]                           invokeRestart("muffleMessage")
[13:23:22.224]                       }
[13:23:22.224]                       else if (inherits(cond, "warning")) {
[13:23:22.224]                         muffled <- grepl(pattern, "muffleWarning")
[13:23:22.224]                         if (muffled) 
[13:23:22.224]                           invokeRestart("muffleWarning")
[13:23:22.224]                       }
[13:23:22.224]                       else if (inherits(cond, "condition")) {
[13:23:22.224]                         if (!is.null(pattern)) {
[13:23:22.224]                           computeRestarts <- base::computeRestarts
[13:23:22.224]                           grepl <- base::grepl
[13:23:22.224]                           restarts <- computeRestarts(cond)
[13:23:22.224]                           for (restart in restarts) {
[13:23:22.224]                             name <- restart$name
[13:23:22.224]                             if (is.null(name)) 
[13:23:22.224]                               next
[13:23:22.224]                             if (!grepl(pattern, name)) 
[13:23:22.224]                               next
[13:23:22.224]                             invokeRestart(restart)
[13:23:22.224]                             muffled <- TRUE
[13:23:22.224]                             break
[13:23:22.224]                           }
[13:23:22.224]                         }
[13:23:22.224]                       }
[13:23:22.224]                       invisible(muffled)
[13:23:22.224]                     }
[13:23:22.224]                     muffleCondition(cond, pattern = "^muffle")
[13:23:22.224]                   }
[13:23:22.224]                 }
[13:23:22.224]             }
[13:23:22.224]         }))
[13:23:22.224]     }, error = function(ex) {
[13:23:22.224]         base::structure(base::list(value = NULL, visible = NULL, 
[13:23:22.224]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:23:22.224]                 ...future.rng), started = ...future.startTime, 
[13:23:22.224]             finished = Sys.time(), session_uuid = NA_character_, 
[13:23:22.224]             version = "1.8"), class = "FutureResult")
[13:23:22.224]     }, finally = {
[13:23:22.224]         if (!identical(...future.workdir, getwd())) 
[13:23:22.224]             setwd(...future.workdir)
[13:23:22.224]         {
[13:23:22.224]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:23:22.224]                 ...future.oldOptions$nwarnings <- NULL
[13:23:22.224]             }
[13:23:22.224]             base::options(...future.oldOptions)
[13:23:22.224]             if (.Platform$OS.type == "windows") {
[13:23:22.224]                 old_names <- names(...future.oldEnvVars)
[13:23:22.224]                 envs <- base::Sys.getenv()
[13:23:22.224]                 names <- names(envs)
[13:23:22.224]                 common <- intersect(names, old_names)
[13:23:22.224]                 added <- setdiff(names, old_names)
[13:23:22.224]                 removed <- setdiff(old_names, names)
[13:23:22.224]                 changed <- common[...future.oldEnvVars[common] != 
[13:23:22.224]                   envs[common]]
[13:23:22.224]                 NAMES <- toupper(changed)
[13:23:22.224]                 args <- list()
[13:23:22.224]                 for (kk in seq_along(NAMES)) {
[13:23:22.224]                   name <- changed[[kk]]
[13:23:22.224]                   NAME <- NAMES[[kk]]
[13:23:22.224]                   if (name != NAME && is.element(NAME, old_names)) 
[13:23:22.224]                     next
[13:23:22.224]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:23:22.224]                 }
[13:23:22.224]                 NAMES <- toupper(added)
[13:23:22.224]                 for (kk in seq_along(NAMES)) {
[13:23:22.224]                   name <- added[[kk]]
[13:23:22.224]                   NAME <- NAMES[[kk]]
[13:23:22.224]                   if (name != NAME && is.element(NAME, old_names)) 
[13:23:22.224]                     next
[13:23:22.224]                   args[[name]] <- ""
[13:23:22.224]                 }
[13:23:22.224]                 NAMES <- toupper(removed)
[13:23:22.224]                 for (kk in seq_along(NAMES)) {
[13:23:22.224]                   name <- removed[[kk]]
[13:23:22.224]                   NAME <- NAMES[[kk]]
[13:23:22.224]                   if (name != NAME && is.element(NAME, old_names)) 
[13:23:22.224]                     next
[13:23:22.224]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:23:22.224]                 }
[13:23:22.224]                 if (length(args) > 0) 
[13:23:22.224]                   base::do.call(base::Sys.setenv, args = args)
[13:23:22.224]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:23:22.224]             }
[13:23:22.224]             else {
[13:23:22.224]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:23:22.224]             }
[13:23:22.224]             {
[13:23:22.224]                 if (base::length(...future.futureOptionsAdded) > 
[13:23:22.224]                   0L) {
[13:23:22.224]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:23:22.224]                   base::names(opts) <- ...future.futureOptionsAdded
[13:23:22.224]                   base::options(opts)
[13:23:22.224]                 }
[13:23:22.224]                 {
[13:23:22.224]                   {
[13:23:22.224]                     base::options(mc.cores = ...future.mc.cores.old)
[13:23:22.224]                     NULL
[13:23:22.224]                   }
[13:23:22.224]                   options(future.plan = NULL)
[13:23:22.224]                   if (is.na(NA_character_)) 
[13:23:22.224]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:23:22.224]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:23:22.224]                   future::plan(list(function (..., workers = availableCores(constraints = "multicore"), 
[13:23:22.224]                     envir = parent.frame()) 
[13:23:22.224]                   {
[13:23:22.224]                     default_workers <- missing(workers)
[13:23:22.224]                     if (is.function(workers)) 
[13:23:22.224]                       workers <- workers()
[13:23:22.224]                     workers <- structure(as.integer(workers), 
[13:23:22.224]                       class = class(workers))
[13:23:22.224]                     stop_if_not(is.finite(workers), workers >= 
[13:23:22.224]                       1L)
[13:23:22.224]                     if ((workers == 1L && !inherits(workers, 
[13:23:22.224]                       "AsIs")) || !supportsMulticore(warn = TRUE)) {
[13:23:22.224]                       if (default_workers) 
[13:23:22.224]                         supportsMulticore(warn = TRUE)
[13:23:22.224]                       return(sequential(..., envir = envir))
[13:23:22.224]                     }
[13:23:22.224]                     oopts <- options(mc.cores = workers)
[13:23:22.224]                     on.exit(options(oopts))
[13:23:22.224]                     future <- MulticoreFuture(..., workers = workers, 
[13:23:22.224]                       envir = envir)
[13:23:22.224]                     if (!future$lazy) 
[13:23:22.224]                       future <- run(future)
[13:23:22.224]                     invisible(future)
[13:23:22.224]                   }), .cleanup = FALSE, .init = FALSE)
[13:23:22.224]                 }
[13:23:22.224]             }
[13:23:22.224]         }
[13:23:22.224]     })
[13:23:22.224]     if (TRUE) {
[13:23:22.224]         base::sink(type = "output", split = FALSE)
[13:23:22.224]         if (TRUE) {
[13:23:22.224]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:23:22.224]         }
[13:23:22.224]         else {
[13:23:22.224]             ...future.result["stdout"] <- base::list(NULL)
[13:23:22.224]         }
[13:23:22.224]         base::close(...future.stdout)
[13:23:22.224]         ...future.stdout <- NULL
[13:23:22.224]     }
[13:23:22.224]     ...future.result$conditions <- ...future.conditions
[13:23:22.224]     ...future.result$finished <- base::Sys.time()
[13:23:22.224]     ...future.result
[13:23:22.224] }
[13:23:22.257]  - Condition #43: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:22.226] assign_globals() ...
[13:23:22.257]  - Condition #44: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:22.227] List of 1
[13:23:22.227]  $ data:'data.frame':	5 obs. of  2 variables:
[13:23:22.227]   ..$ x: int [1:5] 1 2 3 4 5
[13:23:22.227]   ..$ y: int [1:5] 1 2 3 4 5
[13:23:22.227]  - attr(*, "where")=List of 1
[13:23:22.227]   ..$ data:<environment: R_EmptyEnv> 
[13:23:22.227]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[13:23:22.227]  - attr(*, "resolved")= logi FALSE
[13:23:22.227]  - attr(*, "total_size")= num 160
[13:23:22.227]  - attr(*, "already-done")= logi TRUE
[13:23:22.257]  - Condition #45: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:22.230] - copied ‘data’ to environment
[13:23:22.257]  - Condition #46: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:22.230] assign_globals() ... done
[13:23:22.260]  - Condition #47: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:22.230] requestCore(): workers = 2
[13:23:22.260]  - Condition #48: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:22.233] MulticoreFuture started
[13:23:22.261]  - Condition #49: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:22.233] - Launch lazy future ... done
[13:23:22.261]  - Condition #50: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:22.233] run() for ‘MulticoreFuture’ ... done
[13:23:22.261]  - Condition #51: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:22.234] result() for MulticoreFuture ...
[13:23:22.261]  - Condition #52: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:22.244] result() for MulticoreFuture ...
[13:23:22.262]  - Condition #53: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:22.244] result() for MulticoreFuture ... done
[13:23:22.262]  - Condition #54: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:22.245] result() for MulticoreFuture ... done
[13:23:22.262]  - Condition #55: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:22.245] result() for MulticoreFuture ...
[13:23:22.262]  - Condition #56: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:22.245] result() for MulticoreFuture ... done
[13:23:22.262] signalConditions() ... done
- Strategy: multicore ... DONE
- Strategy: multisession ...
[13:23:22.263] plan(): Setting new future strategy stack:
[13:23:22.263] List of future strategies:
[13:23:22.263] 1. multisession:
[13:23:22.263]    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[13:23:22.263]    - tweaked: FALSE
[13:23:22.263]    - call: plan(strategy)
[13:23:22.264] plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ...
[13:23:22.264] multisession:
[13:23:22.264] - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[13:23:22.264] - tweaked: FALSE
[13:23:22.264] - call: plan(strategy)
[13:23:22.271] getGlobalsAndPackages() ...
Warning: R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘ignore’
[13:23:22.271] Not searching for globals
[13:23:22.271] - globals: [0] <none>
[13:23:22.271] getGlobalsAndPackages() ... DONE
[13:23:22.272] [local output] makeClusterPSOCK() ...
[13:23:22.320] [local output] Workers: [n = 2] ‘localhost’, ‘localhost’
[13:23:22.321] [local output] Base port: 11801
[13:23:22.321] [local output] Getting setup options for 2 cluster nodes ...
[13:23:22.321] [local output]  - Node 1 of 2 ...
[13:23:22.322] [local output] localMachine=TRUE => revtunnel=FALSE

[13:23:22.322] Testing if worker's PID can be inferred: ‘'/usr/local/lib/R/bin/Rscript' -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/RtmpXByBu8/worker.rank=1.parallelly.parent=86081.1504152394c36.pid")), silent = TRUE)' -e 'file.exists("/tmp/RtmpXByBu8/worker.rank=1.parallelly.parent=86081.1504152394c36.pid")'’
[13:23:22.521] - Possible to infer worker's PID: TRUE
[13:23:22.521] [local output] Rscript port: 11801

[13:23:22.522] [local output]  - Node 2 of 2 ...
[13:23:22.522] [local output] localMachine=TRUE => revtunnel=FALSE

[13:23:22.523] [local output] Rscript port: 11801

[13:23:22.523] [local output] Getting setup options for 2 cluster nodes ... done
[13:23:22.523] [local output]  - Parallel setup requested for some PSOCK nodes
[13:23:22.524] [local output] Setting up PSOCK nodes in parallel
[13:23:22.524] List of 36
[13:23:22.524]  $ worker          : chr "localhost"
[13:23:22.524]   ..- attr(*, "localhost")= logi TRUE
[13:23:22.524]  $ master          : chr "localhost"
[13:23:22.524]  $ port            : int 11801
[13:23:22.524]  $ connectTimeout  : num 120
[13:23:22.524]  $ timeout         : num 2592000
[13:23:22.524]  $ rscript         : chr "'/usr/local/lib/R/bin/Rscript'"
[13:23:22.524]  $ homogeneous     : logi TRUE
[13:23:22.524]  $ rscript_args    : chr "--default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),fi"| __truncated__
[13:23:22.524]  $ rscript_envs    : NULL
[13:23:22.524]  $ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[13:23:22.524]  $ rscript_startup : NULL
[13:23:22.524]  $ rscript_sh      : chr "sh"
[13:23:22.524]  $ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[13:23:22.524]  $ methods         : logi TRUE
[13:23:22.524]  $ socketOptions   : chr "no-delay"
[13:23:22.524]  $ useXDR          : logi FALSE
[13:23:22.524]  $ outfile         : chr "/dev/null"
[13:23:22.524]  $ renice          : int NA
[13:23:22.524]  $ rshcmd          : NULL
[13:23:22.524]  $ user            : chr(0) 
[13:23:22.524]  $ revtunnel       : logi FALSE
[13:23:22.524]  $ rshlogfile      : NULL
[13:23:22.524]  $ rshopts         : chr(0) 
[13:23:22.524]  $ rank            : int 1
[13:23:22.524]  $ manual          : logi FALSE
[13:23:22.524]  $ dryrun          : logi FALSE
[13:23:22.524]  $ quiet           : logi FALSE
[13:23:22.524]  $ setup_strategy  : chr "parallel"
[13:23:22.524]  $ local_cmd       : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[13:23:22.524]  $ pidfile         : chr "/tmp/RtmpXByBu8/worker.rank=1.parallelly.parent=86081.1504152394c36.pid"
[13:23:22.524]  $ rshcmd_label    : NULL
[13:23:22.524]  $ rsh_call        : NULL
[13:23:22.524]  $ cmd             : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[13:23:22.524]  $ localMachine    : logi TRUE
[13:23:22.524]  $ make_fcn        :function (worker = getOption2("parallelly.localhost.hostname", "localhost"), 
[13:23:22.524]     master = NULL, port, connectTimeout = getOption2("parallelly.makeNodePSOCK.connectTimeout", 
[13:23:22.524]         2 * 60), timeout = getOption2("parallelly.makeNodePSOCK.timeout", 
[13:23:22.524]         30 * 24 * 60 * 60), rscript = NULL, homogeneous = NULL, rscript_args = NULL, 
[13:23:22.524]     rscript_envs = NULL, rscript_libs = NULL, rscript_startup = NULL, rscript_sh = c("auto", 
[13:23:22.524]         "cmd", "sh"), default_packages = c("datasets", "utils", "grDevices", 
[13:23:22.524]         "graphics", "stats", if (methods) "methods"), methods = TRUE, socketOptions = getOption2("parallelly.makeNodePSOCK.socketOptions", 
[13:23:22.524]         "no-delay"), useXDR = getOption2("parallelly.makeNodePSOCK.useXDR", 
[13:23:22.524]         FALSE), outfile = "/dev/null", renice = NA_integer_, rshcmd = getOption2("parallelly.makeNodePSOCK.rshcmd", 
[13:23:22.524]         NULL), user = NULL, revtunnel = NA, rshlogfile = NULL, rshopts = getOption2("parallelly.makeNodePSOCK.rshopts", 
[13:23:22.524]         NULL), rank = 1L, manual = FALSE, dryrun = FALSE, quiet = FALSE, 
[13:23:22.524]     setup_strategy = getOption2("parallelly.makeNodePSOCK.setup_strategy", 
[13:23:22.524]         "parallel"), action = c("launch", "options"), verbose = FALSE)  
[13:23:22.524]  $ arguments       :List of 28
[13:23:22.524]   ..$ worker          : chr "localhost"
[13:23:22.524]   ..$ master          : NULL
[13:23:22.524]   ..$ port            : int 11801
[13:23:22.524]   ..$ connectTimeout  : num 120
[13:23:22.524]   ..$ timeout         : num 2592000
[13:23:22.524]   ..$ rscript         : NULL
[13:23:22.524]   ..$ homogeneous     : NULL
[13:23:22.524]   ..$ rscript_args    : NULL
[13:23:22.524]   ..$ rscript_envs    : NULL
[13:23:22.524]   ..$ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[13:23:22.524]   ..$ rscript_startup : NULL
[13:23:22.524]   ..$ rscript_sh      : chr [1:3] "auto" "cmd" "sh"
[13:23:22.524]   ..$ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[13:23:22.524]   ..$ methods         : logi TRUE
[13:23:22.524]   ..$ socketOptions   : chr "no-delay"
[13:23:22.524]   ..$ useXDR          : logi FALSE
[13:23:22.524]   ..$ outfile         : chr "/dev/null"
[13:23:22.524]   ..$ renice          : int NA
[13:23:22.524]   ..$ rshcmd          : NULL
[13:23:22.524]   ..$ user            : NULL
[13:23:22.524]   ..$ revtunnel       : logi NA
[13:23:22.524]   ..$ rshlogfile      : NULL
[13:23:22.524]   ..$ rshopts         : NULL
[13:23:22.524]   ..$ rank            : int 1
[13:23:22.524]   ..$ manual          : logi FALSE
[13:23:22.524]   ..$ dryrun          : logi FALSE
[13:23:22.524]   ..$ quiet           : logi FALSE
[13:23:22.524]   ..$ setup_strategy  : chr "parallel"
[13:23:22.524]  - attr(*, "class")= chr [1:2] "makeNodePSOCKOptions" "makeNodeOptions"
[13:23:22.541] [local output] System call to launch all workers:
[13:23:22.541] [local output] '/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/RtmpXByBu8/worker.rank=1.parallelly.parent=86081.1504152394c36.pid")), silent = TRUE)' -e 'options(socketOptions = "no-delay")' -e '.libPaths(c("/usr/local/lib/R/site-library","/usr/local/lib/R/library"))' -e 'workRSOCK <- tryCatch(parallel:::.workRSOCK, error=function(e) parallel:::.slaveRSOCK); workRSOCK()' MASTER=localhost PORT=11801 OUT=/dev/null TIMEOUT=2592000 XDR=FALSE SETUPTIMEOUT=120 SETUPSTRATEGY=parallel
[13:23:22.541] [local output] Starting PSOCK main server
[13:23:22.547] [local output] Workers launched
[13:23:22.547] [local output] Waiting for workers to connect back
[13:23:22.547]  - [local output] 0 workers out of 2 ready
[13:23:22.803]  - [local output] 0 workers out of 2 ready
[13:23:22.803]  - [local output] 1 workers out of 2 ready
[13:23:22.808]  - [local output] 1 workers out of 2 ready
[13:23:22.808]  - [local output] 2 workers out of 2 ready
[13:23:22.808] [local output] Launching of workers completed
[13:23:22.808] [local output] Collecting session information from workers
[13:23:22.809] [local output]  - Worker #1 of 2
[13:23:22.810] [local output]  - Worker #2 of 2
[13:23:22.810] [local output] makeClusterPSOCK() ... done
[13:23:22.822] Packages needed by the future expression (n = 0): <none>
[13:23:22.822] Packages needed by future strategies (n = 0): <none>
[13:23:22.822] {
[13:23:22.822]     {
[13:23:22.822]         {
[13:23:22.822]             ...future.startTime <- base::Sys.time()
[13:23:22.822]             {
[13:23:22.822]                 {
[13:23:22.822]                   {
[13:23:22.822]                     {
[13:23:22.822]                       base::local({
[13:23:22.822]                         has_future <- base::requireNamespace("future", 
[13:23:22.822]                           quietly = TRUE)
[13:23:22.822]                         if (has_future) {
[13:23:22.822]                           ns <- base::getNamespace("future")
[13:23:22.822]                           version <- ns[[".package"]][["version"]]
[13:23:22.822]                           if (is.null(version)) 
[13:23:22.822]                             version <- utils::packageVersion("future")
[13:23:22.822]                         }
[13:23:22.822]                         else {
[13:23:22.822]                           version <- NULL
[13:23:22.822]                         }
[13:23:22.822]                         if (!has_future || version < "1.8.0") {
[13:23:22.822]                           info <- base::c(r_version = base::gsub("R version ", 
[13:23:22.822]                             "", base::R.version$version.string), 
[13:23:22.822]                             platform = base::sprintf("%s (%s-bit)", 
[13:23:22.822]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:23:22.822]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:23:22.822]                               "release", "version")], collapse = " "), 
[13:23:22.822]                             hostname = base::Sys.info()[["nodename"]])
[13:23:22.822]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:23:22.822]                             info)
[13:23:22.822]                           info <- base::paste(info, collapse = "; ")
[13:23:22.822]                           if (!has_future) {
[13:23:22.822]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:23:22.822]                               info)
[13:23:22.822]                           }
[13:23:22.822]                           else {
[13:23:22.822]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:23:22.822]                               info, version)
[13:23:22.822]                           }
[13:23:22.822]                           base::stop(msg)
[13:23:22.822]                         }
[13:23:22.822]                       })
[13:23:22.822]                     }
[13:23:22.822]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[13:23:22.822]                     base::options(mc.cores = 1L)
[13:23:22.822]                   }
[13:23:22.822]                   options(future.plan = NULL)
[13:23:22.822]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:23:22.822]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:23:22.822]                 }
[13:23:22.822]                 ...future.workdir <- getwd()
[13:23:22.822]             }
[13:23:22.822]             ...future.oldOptions <- base::as.list(base::.Options)
[13:23:22.822]             ...future.oldEnvVars <- base::Sys.getenv()
[13:23:22.822]         }
[13:23:22.822]         base::options(future.startup.script = FALSE, future.globals.onMissing = "ignore", 
[13:23:22.822]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:23:22.822]             future.globals.onMissing = "ignore", future.globals.onReference = NULL, 
[13:23:22.822]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:23:22.822]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:23:22.822]             future.stdout.windows.reencode = NULL, width = 80L)
[13:23:22.822]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:23:22.822]             base::names(...future.oldOptions))
[13:23:22.822]     }
[13:23:22.822]     if (FALSE) {
[13:23:22.822]     }
[13:23:22.822]     else {
[13:23:22.822]         if (TRUE) {
[13:23:22.822]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:23:22.822]                 open = "w")
[13:23:22.822]         }
[13:23:22.822]         else {
[13:23:22.822]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:23:22.822]                 windows = "NUL", "/dev/null"), open = "w")
[13:23:22.822]         }
[13:23:22.822]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:23:22.822]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:23:22.822]             base::sink(type = "output", split = FALSE)
[13:23:22.822]             base::close(...future.stdout)
[13:23:22.822]         }, add = TRUE)
[13:23:22.822]     }
[13:23:22.822]     ...future.frame <- base::sys.nframe()
[13:23:22.822]     ...future.conditions <- base::list()
[13:23:22.822]     ...future.rng <- base::globalenv()$.Random.seed
[13:23:22.822]     if (FALSE) {
[13:23:22.822]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:23:22.822]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:23:22.822]     }
[13:23:22.822]     ...future.result <- base::tryCatch({
[13:23:22.822]         base::withCallingHandlers({
[13:23:22.822]             ...future.value <- base::withVisible(base::local({
[13:23:22.822]                 ...future.makeSendCondition <- base::local({
[13:23:22.822]                   sendCondition <- NULL
[13:23:22.822]                   function(frame = 1L) {
[13:23:22.822]                     if (is.function(sendCondition)) 
[13:23:22.822]                       return(sendCondition)
[13:23:22.822]                     ns <- getNamespace("parallel")
[13:23:22.822]                     if (exists("sendData", mode = "function", 
[13:23:22.822]                       envir = ns)) {
[13:23:22.822]                       parallel_sendData <- get("sendData", mode = "function", 
[13:23:22.822]                         envir = ns)
[13:23:22.822]                       envir <- sys.frame(frame)
[13:23:22.822]                       master <- NULL
[13:23:22.822]                       while (!identical(envir, .GlobalEnv) && 
[13:23:22.822]                         !identical(envir, emptyenv())) {
[13:23:22.822]                         if (exists("master", mode = "list", envir = envir, 
[13:23:22.822]                           inherits = FALSE)) {
[13:23:22.822]                           master <- get("master", mode = "list", 
[13:23:22.822]                             envir = envir, inherits = FALSE)
[13:23:22.822]                           if (inherits(master, c("SOCKnode", 
[13:23:22.822]                             "SOCK0node"))) {
[13:23:22.822]                             sendCondition <<- function(cond) {
[13:23:22.822]                               data <- list(type = "VALUE", value = cond, 
[13:23:22.822]                                 success = TRUE)
[13:23:22.822]                               parallel_sendData(master, data)
[13:23:22.822]                             }
[13:23:22.822]                             return(sendCondition)
[13:23:22.822]                           }
[13:23:22.822]                         }
[13:23:22.822]                         frame <- frame + 1L
[13:23:22.822]                         envir <- sys.frame(frame)
[13:23:22.822]                       }
[13:23:22.822]                     }
[13:23:22.822]                     sendCondition <<- function(cond) NULL
[13:23:22.822]                   }
[13:23:22.822]                 })
[13:23:22.822]                 withCallingHandlers({
[13:23:22.822]                   NA
[13:23:22.822]                 }, immediateCondition = function(cond) {
[13:23:22.822]                   sendCondition <- ...future.makeSendCondition()
[13:23:22.822]                   sendCondition(cond)
[13:23:22.822]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:23:22.822]                   {
[13:23:22.822]                     inherits <- base::inherits
[13:23:22.822]                     invokeRestart <- base::invokeRestart
[13:23:22.822]                     is.null <- base::is.null
[13:23:22.822]                     muffled <- FALSE
[13:23:22.822]                     if (inherits(cond, "message")) {
[13:23:22.822]                       muffled <- grepl(pattern, "muffleMessage")
[13:23:22.822]                       if (muffled) 
[13:23:22.822]                         invokeRestart("muffleMessage")
[13:23:22.822]                     }
[13:23:22.822]                     else if (inherits(cond, "warning")) {
[13:23:22.822]                       muffled <- grepl(pattern, "muffleWarning")
[13:23:22.822]                       if (muffled) 
[13:23:22.822]                         invokeRestart("muffleWarning")
[13:23:22.822]                     }
[13:23:22.822]                     else if (inherits(cond, "condition")) {
[13:23:22.822]                       if (!is.null(pattern)) {
[13:23:22.822]                         computeRestarts <- base::computeRestarts
[13:23:22.822]                         grepl <- base::grepl
[13:23:22.822]                         restarts <- computeRestarts(cond)
[13:23:22.822]                         for (restart in restarts) {
[13:23:22.822]                           name <- restart$name
[13:23:22.822]                           if (is.null(name)) 
[13:23:22.822]                             next
[13:23:22.822]                           if (!grepl(pattern, name)) 
[13:23:22.822]                             next
[13:23:22.822]                           invokeRestart(restart)
[13:23:22.822]                           muffled <- TRUE
[13:23:22.822]                           break
[13:23:22.822]                         }
[13:23:22.822]                       }
[13:23:22.822]                     }
[13:23:22.822]                     invisible(muffled)
[13:23:22.822]                   }
[13:23:22.822]                   muffleCondition(cond)
[13:23:22.822]                 })
[13:23:22.822]             }))
[13:23:22.822]             future::FutureResult(value = ...future.value$value, 
[13:23:22.822]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:23:22.822]                   ...future.rng), globalenv = if (FALSE) 
[13:23:22.822]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:23:22.822]                     ...future.globalenv.names))
[13:23:22.822]                 else NULL, started = ...future.startTime, version = "1.8")
[13:23:22.822]         }, condition = base::local({
[13:23:22.822]             c <- base::c
[13:23:22.822]             inherits <- base::inherits
[13:23:22.822]             invokeRestart <- base::invokeRestart
[13:23:22.822]             length <- base::length
[13:23:22.822]             list <- base::list
[13:23:22.822]             seq.int <- base::seq.int
[13:23:22.822]             signalCondition <- base::signalCondition
[13:23:22.822]             sys.calls <- base::sys.calls
[13:23:22.822]             `[[` <- base::`[[`
[13:23:22.822]             `+` <- base::`+`
[13:23:22.822]             `<<-` <- base::`<<-`
[13:23:22.822]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:23:22.822]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:23:22.822]                   3L)]
[13:23:22.822]             }
[13:23:22.822]             function(cond) {
[13:23:22.822]                 is_error <- inherits(cond, "error")
[13:23:22.822]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:23:22.822]                   NULL)
[13:23:22.822]                 if (is_error) {
[13:23:22.822]                   sessionInformation <- function() {
[13:23:22.822]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:23:22.822]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:23:22.822]                       search = base::search(), system = base::Sys.info())
[13:23:22.822]                   }
[13:23:22.822]                   ...future.conditions[[length(...future.conditions) + 
[13:23:22.822]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:23:22.822]                     cond$call), session = sessionInformation(), 
[13:23:22.822]                     timestamp = base::Sys.time(), signaled = 0L)
[13:23:22.822]                   signalCondition(cond)
[13:23:22.822]                 }
[13:23:22.822]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:23:22.822]                 "immediateCondition"))) {
[13:23:22.822]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:23:22.822]                   ...future.conditions[[length(...future.conditions) + 
[13:23:22.822]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:23:22.822]                   if (TRUE && !signal) {
[13:23:22.822]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:23:22.822]                     {
[13:23:22.822]                       inherits <- base::inherits
[13:23:22.822]                       invokeRestart <- base::invokeRestart
[13:23:22.822]                       is.null <- base::is.null
[13:23:22.822]                       muffled <- FALSE
[13:23:22.822]                       if (inherits(cond, "message")) {
[13:23:22.822]                         muffled <- grepl(pattern, "muffleMessage")
[13:23:22.822]                         if (muffled) 
[13:23:22.822]                           invokeRestart("muffleMessage")
[13:23:22.822]                       }
[13:23:22.822]                       else if (inherits(cond, "warning")) {
[13:23:22.822]                         muffled <- grepl(pattern, "muffleWarning")
[13:23:22.822]                         if (muffled) 
[13:23:22.822]                           invokeRestart("muffleWarning")
[13:23:22.822]                       }
[13:23:22.822]                       else if (inherits(cond, "condition")) {
[13:23:22.822]                         if (!is.null(pattern)) {
[13:23:22.822]                           computeRestarts <- base::computeRestarts
[13:23:22.822]                           grepl <- base::grepl
[13:23:22.822]                           restarts <- computeRestarts(cond)
[13:23:22.822]                           for (restart in restarts) {
[13:23:22.822]                             name <- restart$name
[13:23:22.822]                             if (is.null(name)) 
[13:23:22.822]                               next
[13:23:22.822]                             if (!grepl(pattern, name)) 
[13:23:22.822]                               next
[13:23:22.822]                             invokeRestart(restart)
[13:23:22.822]                             muffled <- TRUE
[13:23:22.822]                             break
[13:23:22.822]                           }
[13:23:22.822]                         }
[13:23:22.822]                       }
[13:23:22.822]                       invisible(muffled)
[13:23:22.822]                     }
[13:23:22.822]                     muffleCondition(cond, pattern = "^muffle")
[13:23:22.822]                   }
[13:23:22.822]                 }
[13:23:22.822]                 else {
[13:23:22.822]                   if (TRUE) {
[13:23:22.822]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:23:22.822]                     {
[13:23:22.822]                       inherits <- base::inherits
[13:23:22.822]                       invokeRestart <- base::invokeRestart
[13:23:22.822]                       is.null <- base::is.null
[13:23:22.822]                       muffled <- FALSE
[13:23:22.822]                       if (inherits(cond, "message")) {
[13:23:22.822]                         muffled <- grepl(pattern, "muffleMessage")
[13:23:22.822]                         if (muffled) 
[13:23:22.822]                           invokeRestart("muffleMessage")
[13:23:22.822]                       }
[13:23:22.822]                       else if (inherits(cond, "warning")) {
[13:23:22.822]                         muffled <- grepl(pattern, "muffleWarning")
[13:23:22.822]                         if (muffled) 
[13:23:22.822]                           invokeRestart("muffleWarning")
[13:23:22.822]                       }
[13:23:22.822]                       else if (inherits(cond, "condition")) {
[13:23:22.822]                         if (!is.null(pattern)) {
[13:23:22.822]                           computeRestarts <- base::computeRestarts
[13:23:22.822]                           grepl <- base::grepl
[13:23:22.822]                           restarts <- computeRestarts(cond)
[13:23:22.822]                           for (restart in restarts) {
[13:23:22.822]                             name <- restart$name
[13:23:22.822]                             if (is.null(name)) 
[13:23:22.822]                               next
[13:23:22.822]                             if (!grepl(pattern, name)) 
[13:23:22.822]                               next
[13:23:22.822]                             invokeRestart(restart)
[13:23:22.822]                             muffled <- TRUE
[13:23:22.822]                             break
[13:23:22.822]                           }
[13:23:22.822]                         }
[13:23:22.822]                       }
[13:23:22.822]                       invisible(muffled)
[13:23:22.822]                     }
[13:23:22.822]                     muffleCondition(cond, pattern = "^muffle")
[13:23:22.822]                   }
[13:23:22.822]                 }
[13:23:22.822]             }
[13:23:22.822]         }))
[13:23:22.822]     }, error = function(ex) {
[13:23:22.822]         base::structure(base::list(value = NULL, visible = NULL, 
[13:23:22.822]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:23:22.822]                 ...future.rng), started = ...future.startTime, 
[13:23:22.822]             finished = Sys.time(), session_uuid = NA_character_, 
[13:23:22.822]             version = "1.8"), class = "FutureResult")
[13:23:22.822]     }, finally = {
[13:23:22.822]         if (!identical(...future.workdir, getwd())) 
[13:23:22.822]             setwd(...future.workdir)
[13:23:22.822]         {
[13:23:22.822]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:23:22.822]                 ...future.oldOptions$nwarnings <- NULL
[13:23:22.822]             }
[13:23:22.822]             base::options(...future.oldOptions)
[13:23:22.822]             if (.Platform$OS.type == "windows") {
[13:23:22.822]                 old_names <- names(...future.oldEnvVars)
[13:23:22.822]                 envs <- base::Sys.getenv()
[13:23:22.822]                 names <- names(envs)
[13:23:22.822]                 common <- intersect(names, old_names)
[13:23:22.822]                 added <- setdiff(names, old_names)
[13:23:22.822]                 removed <- setdiff(old_names, names)
[13:23:22.822]                 changed <- common[...future.oldEnvVars[common] != 
[13:23:22.822]                   envs[common]]
[13:23:22.822]                 NAMES <- toupper(changed)
[13:23:22.822]                 args <- list()
[13:23:22.822]                 for (kk in seq_along(NAMES)) {
[13:23:22.822]                   name <- changed[[kk]]
[13:23:22.822]                   NAME <- NAMES[[kk]]
[13:23:22.822]                   if (name != NAME && is.element(NAME, old_names)) 
[13:23:22.822]                     next
[13:23:22.822]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:23:22.822]                 }
[13:23:22.822]                 NAMES <- toupper(added)
[13:23:22.822]                 for (kk in seq_along(NAMES)) {
[13:23:22.822]                   name <- added[[kk]]
[13:23:22.822]                   NAME <- NAMES[[kk]]
[13:23:22.822]                   if (name != NAME && is.element(NAME, old_names)) 
[13:23:22.822]                     next
[13:23:22.822]                   args[[name]] <- ""
[13:23:22.822]                 }
[13:23:22.822]                 NAMES <- toupper(removed)
[13:23:22.822]                 for (kk in seq_along(NAMES)) {
[13:23:22.822]                   name <- removed[[kk]]
[13:23:22.822]                   NAME <- NAMES[[kk]]
[13:23:22.822]                   if (name != NAME && is.element(NAME, old_names)) 
[13:23:22.822]                     next
[13:23:22.822]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:23:22.822]                 }
[13:23:22.822]                 if (length(args) > 0) 
[13:23:22.822]                   base::do.call(base::Sys.setenv, args = args)
[13:23:22.822]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:23:22.822]             }
[13:23:22.822]             else {
[13:23:22.822]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:23:22.822]             }
[13:23:22.822]             {
[13:23:22.822]                 if (base::length(...future.futureOptionsAdded) > 
[13:23:22.822]                   0L) {
[13:23:22.822]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:23:22.822]                   base::names(opts) <- ...future.futureOptionsAdded
[13:23:22.822]                   base::options(opts)
[13:23:22.822]                 }
[13:23:22.822]                 {
[13:23:22.822]                   {
[13:23:22.822]                     base::options(mc.cores = ...future.mc.cores.old)
[13:23:22.822]                     NULL
[13:23:22.822]                   }
[13:23:22.822]                   options(future.plan = NULL)
[13:23:22.822]                   if (is.na(NA_character_)) 
[13:23:22.822]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:23:22.822]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:23:22.822]                   future::plan(list(function (..., workers = availableCores(), 
[13:23:22.822]                     lazy = FALSE, rscript_libs = .libPaths(), 
[13:23:22.822]                     envir = parent.frame()) 
[13:23:22.822]                   {
[13:23:22.822]                     if (is.function(workers)) 
[13:23:22.822]                       workers <- workers()
[13:23:22.822]                     workers <- structure(as.integer(workers), 
[13:23:22.822]                       class = class(workers))
[13:23:22.822]                     stop_if_not(length(workers) == 1, is.finite(workers), 
[13:23:22.822]                       workers >= 1)
[13:23:22.822]                     if (workers == 1L && !inherits(workers, "AsIs")) {
[13:23:22.822]                       return(sequential(..., lazy = TRUE, envir = envir))
[13:23:22.822]                     }
[13:23:22.822]                     future <- MultisessionFuture(..., workers = workers, 
[13:23:22.822]                       lazy = lazy, rscript_libs = rscript_libs, 
[13:23:22.822]                       envir = envir)
[13:23:22.822]                     if (!future$lazy) 
[13:23:22.822]                       future <- run(future)
[13:23:22.822]                     invisible(future)
[13:23:22.822]                   }), .cleanup = FALSE, .init = FALSE)
[13:23:22.822]                 }
[13:23:22.822]             }
[13:23:22.822]         }
[13:23:22.822]     })
[13:23:22.822]     if (TRUE) {
[13:23:22.822]         base::sink(type = "output", split = FALSE)
[13:23:22.822]         if (TRUE) {
[13:23:22.822]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:23:22.822]         }
[13:23:22.822]         else {
[13:23:22.822]             ...future.result["stdout"] <- base::list(NULL)
[13:23:22.822]         }
[13:23:22.822]         base::close(...future.stdout)
[13:23:22.822]         ...future.stdout <- NULL
[13:23:22.822]     }
[13:23:22.822]     ...future.result$conditions <- ...future.conditions
[13:23:22.822]     ...future.result$finished <- base::Sys.time()
[13:23:22.822]     ...future.result
[13:23:22.822] }
[13:23:22.878] MultisessionFuture started
[13:23:22.879] result() for ClusterFuture ...
[13:23:22.880] receiveMessageFromWorker() for ClusterFuture ...
[13:23:22.880] - Validating connection of MultisessionFuture
[13:23:22.925] - received message: FutureResult
[13:23:22.926] - Received FutureResult
[13:23:22.926] - Erased future from FutureRegistry
[13:23:22.926] result() for ClusterFuture ...
[13:23:22.926] - result already collected: FutureResult
[13:23:22.926] result() for ClusterFuture ... done
[13:23:22.926] receiveMessageFromWorker() for ClusterFuture ... done
[13:23:22.926] result() for ClusterFuture ... done
[13:23:22.927] result() for ClusterFuture ...
[13:23:22.927] - result already collected: FutureResult
[13:23:22.927] result() for ClusterFuture ... done
[13:23:22.927] plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ... DONE
[13:23:22.931] plan(): nbrOfWorkers() = 2
[13:23:22.931] getGlobalsAndPackages() ...
Warning: R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘error’
[13:23:22.931] Searching for globals...
[13:23:22.932] - globals found: [1] ‘getOption’
[13:23:22.932] Searching for globals ... DONE
[13:23:22.932] Resolving globals: FALSE
[13:23:22.933] 
[13:23:22.933] 
[13:23:22.933] getGlobalsAndPackages() ... DONE
[13:23:22.933] run() for ‘Future’ ...
[13:23:22.933] - state: ‘created’
[13:23:22.934] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[13:23:22.948] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:23:22.948] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[13:23:22.948]   - Field: ‘node’
[13:23:22.949]   - Field: ‘label’
[13:23:22.949]   - Field: ‘local’
[13:23:22.949]   - Field: ‘owner’
[13:23:22.949]   - Field: ‘envir’
[13:23:22.949]   - Field: ‘workers’
[13:23:22.949]   - Field: ‘packages’
[13:23:22.949]   - Field: ‘gc’
[13:23:22.949]   - Field: ‘conditions’
[13:23:22.949]   - Field: ‘persistent’
[13:23:22.949]   - Field: ‘expr’
[13:23:22.950]   - Field: ‘uuid’
[13:23:22.950]   - Field: ‘seed’
[13:23:22.950]   - Field: ‘version’
[13:23:22.950]   - Field: ‘result’
[13:23:22.950]   - Field: ‘asynchronous’
[13:23:22.950]   - Field: ‘calls’
[13:23:22.950]   - Field: ‘globals’
[13:23:22.950]   - Field: ‘stdout’
[13:23:22.950]   - Field: ‘earlySignal’
[13:23:22.951]   - Field: ‘lazy’
[13:23:22.951]   - Field: ‘state’
[13:23:22.951] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[13:23:22.951] - Launch lazy future ...
[13:23:22.951] Packages needed by the future expression (n = 0): <none>
[13:23:22.951] Packages needed by future strategies (n = 0): <none>
[13:23:22.952] {
[13:23:22.952]     {
[13:23:22.952]         {
[13:23:22.952]             ...future.startTime <- base::Sys.time()
[13:23:22.952]             {
[13:23:22.952]                 {
[13:23:22.952]                   {
[13:23:22.952]                     {
[13:23:22.952]                       base::local({
[13:23:22.952]                         has_future <- base::requireNamespace("future", 
[13:23:22.952]                           quietly = TRUE)
[13:23:22.952]                         if (has_future) {
[13:23:22.952]                           ns <- base::getNamespace("future")
[13:23:22.952]                           version <- ns[[".package"]][["version"]]
[13:23:22.952]                           if (is.null(version)) 
[13:23:22.952]                             version <- utils::packageVersion("future")
[13:23:22.952]                         }
[13:23:22.952]                         else {
[13:23:22.952]                           version <- NULL
[13:23:22.952]                         }
[13:23:22.952]                         if (!has_future || version < "1.8.0") {
[13:23:22.952]                           info <- base::c(r_version = base::gsub("R version ", 
[13:23:22.952]                             "", base::R.version$version.string), 
[13:23:22.952]                             platform = base::sprintf("%s (%s-bit)", 
[13:23:22.952]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:23:22.952]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:23:22.952]                               "release", "version")], collapse = " "), 
[13:23:22.952]                             hostname = base::Sys.info()[["nodename"]])
[13:23:22.952]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:23:22.952]                             info)
[13:23:22.952]                           info <- base::paste(info, collapse = "; ")
[13:23:22.952]                           if (!has_future) {
[13:23:22.952]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:23:22.952]                               info)
[13:23:22.952]                           }
[13:23:22.952]                           else {
[13:23:22.952]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:23:22.952]                               info, version)
[13:23:22.952]                           }
[13:23:22.952]                           base::stop(msg)
[13:23:22.952]                         }
[13:23:22.952]                       })
[13:23:22.952]                     }
[13:23:22.952]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[13:23:22.952]                     base::options(mc.cores = 1L)
[13:23:22.952]                   }
[13:23:22.952]                   options(future.plan = NULL)
[13:23:22.952]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:23:22.952]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:23:22.952]                 }
[13:23:22.952]                 ...future.workdir <- getwd()
[13:23:22.952]             }
[13:23:22.952]             ...future.oldOptions <- base::as.list(base::.Options)
[13:23:22.952]             ...future.oldEnvVars <- base::Sys.getenv()
[13:23:22.952]         }
[13:23:22.952]         base::options(future.startup.script = FALSE, future.globals.onMissing = "error", 
[13:23:22.952]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:23:22.952]             future.globals.onMissing = "error", future.globals.onReference = NULL, 
[13:23:22.952]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:23:22.952]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:23:22.952]             future.stdout.windows.reencode = NULL, width = 80L)
[13:23:22.952]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:23:22.952]             base::names(...future.oldOptions))
[13:23:22.952]     }
[13:23:22.952]     if (FALSE) {
[13:23:22.952]     }
[13:23:22.952]     else {
[13:23:22.952]         if (TRUE) {
[13:23:22.952]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:23:22.952]                 open = "w")
[13:23:22.952]         }
[13:23:22.952]         else {
[13:23:22.952]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:23:22.952]                 windows = "NUL", "/dev/null"), open = "w")
[13:23:22.952]         }
[13:23:22.952]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:23:22.952]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:23:22.952]             base::sink(type = "output", split = FALSE)
[13:23:22.952]             base::close(...future.stdout)
[13:23:22.952]         }, add = TRUE)
[13:23:22.952]     }
[13:23:22.952]     ...future.frame <- base::sys.nframe()
[13:23:22.952]     ...future.conditions <- base::list()
[13:23:22.952]     ...future.rng <- base::globalenv()$.Random.seed
[13:23:22.952]     if (FALSE) {
[13:23:22.952]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:23:22.952]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:23:22.952]     }
[13:23:22.952]     ...future.result <- base::tryCatch({
[13:23:22.952]         base::withCallingHandlers({
[13:23:22.952]             ...future.value <- base::withVisible(base::local({
[13:23:22.952]                 ...future.makeSendCondition <- base::local({
[13:23:22.952]                   sendCondition <- NULL
[13:23:22.952]                   function(frame = 1L) {
[13:23:22.952]                     if (is.function(sendCondition)) 
[13:23:22.952]                       return(sendCondition)
[13:23:22.952]                     ns <- getNamespace("parallel")
[13:23:22.952]                     if (exists("sendData", mode = "function", 
[13:23:22.952]                       envir = ns)) {
[13:23:22.952]                       parallel_sendData <- get("sendData", mode = "function", 
[13:23:22.952]                         envir = ns)
[13:23:22.952]                       envir <- sys.frame(frame)
[13:23:22.952]                       master <- NULL
[13:23:22.952]                       while (!identical(envir, .GlobalEnv) && 
[13:23:22.952]                         !identical(envir, emptyenv())) {
[13:23:22.952]                         if (exists("master", mode = "list", envir = envir, 
[13:23:22.952]                           inherits = FALSE)) {
[13:23:22.952]                           master <- get("master", mode = "list", 
[13:23:22.952]                             envir = envir, inherits = FALSE)
[13:23:22.952]                           if (inherits(master, c("SOCKnode", 
[13:23:22.952]                             "SOCK0node"))) {
[13:23:22.952]                             sendCondition <<- function(cond) {
[13:23:22.952]                               data <- list(type = "VALUE", value = cond, 
[13:23:22.952]                                 success = TRUE)
[13:23:22.952]                               parallel_sendData(master, data)
[13:23:22.952]                             }
[13:23:22.952]                             return(sendCondition)
[13:23:22.952]                           }
[13:23:22.952]                         }
[13:23:22.952]                         frame <- frame + 1L
[13:23:22.952]                         envir <- sys.frame(frame)
[13:23:22.952]                       }
[13:23:22.952]                     }
[13:23:22.952]                     sendCondition <<- function(cond) NULL
[13:23:22.952]                   }
[13:23:22.952]                 })
[13:23:22.952]                 withCallingHandlers({
[13:23:22.952]                   getOption("future.globals.onMissing")
[13:23:22.952]                 }, immediateCondition = function(cond) {
[13:23:22.952]                   sendCondition <- ...future.makeSendCondition()
[13:23:22.952]                   sendCondition(cond)
[13:23:22.952]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:23:22.952]                   {
[13:23:22.952]                     inherits <- base::inherits
[13:23:22.952]                     invokeRestart <- base::invokeRestart
[13:23:22.952]                     is.null <- base::is.null
[13:23:22.952]                     muffled <- FALSE
[13:23:22.952]                     if (inherits(cond, "message")) {
[13:23:22.952]                       muffled <- grepl(pattern, "muffleMessage")
[13:23:22.952]                       if (muffled) 
[13:23:22.952]                         invokeRestart("muffleMessage")
[13:23:22.952]                     }
[13:23:22.952]                     else if (inherits(cond, "warning")) {
[13:23:22.952]                       muffled <- grepl(pattern, "muffleWarning")
[13:23:22.952]                       if (muffled) 
[13:23:22.952]                         invokeRestart("muffleWarning")
[13:23:22.952]                     }
[13:23:22.952]                     else if (inherits(cond, "condition")) {
[13:23:22.952]                       if (!is.null(pattern)) {
[13:23:22.952]                         computeRestarts <- base::computeRestarts
[13:23:22.952]                         grepl <- base::grepl
[13:23:22.952]                         restarts <- computeRestarts(cond)
[13:23:22.952]                         for (restart in restarts) {
[13:23:22.952]                           name <- restart$name
[13:23:22.952]                           if (is.null(name)) 
[13:23:22.952]                             next
[13:23:22.952]                           if (!grepl(pattern, name)) 
[13:23:22.952]                             next
[13:23:22.952]                           invokeRestart(restart)
[13:23:22.952]                           muffled <- TRUE
[13:23:22.952]                           break
[13:23:22.952]                         }
[13:23:22.952]                       }
[13:23:22.952]                     }
[13:23:22.952]                     invisible(muffled)
[13:23:22.952]                   }
[13:23:22.952]                   muffleCondition(cond)
[13:23:22.952]                 })
[13:23:22.952]             }))
[13:23:22.952]             future::FutureResult(value = ...future.value$value, 
[13:23:22.952]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:23:22.952]                   ...future.rng), globalenv = if (FALSE) 
[13:23:22.952]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:23:22.952]                     ...future.globalenv.names))
[13:23:22.952]                 else NULL, started = ...future.startTime, version = "1.8")
[13:23:22.952]         }, condition = base::local({
[13:23:22.952]             c <- base::c
[13:23:22.952]             inherits <- base::inherits
[13:23:22.952]             invokeRestart <- base::invokeRestart
[13:23:22.952]             length <- base::length
[13:23:22.952]             list <- base::list
[13:23:22.952]             seq.int <- base::seq.int
[13:23:22.952]             signalCondition <- base::signalCondition
[13:23:22.952]             sys.calls <- base::sys.calls
[13:23:22.952]             `[[` <- base::`[[`
[13:23:22.952]             `+` <- base::`+`
[13:23:22.952]             `<<-` <- base::`<<-`
[13:23:22.952]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:23:22.952]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:23:22.952]                   3L)]
[13:23:22.952]             }
[13:23:22.952]             function(cond) {
[13:23:22.952]                 is_error <- inherits(cond, "error")
[13:23:22.952]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:23:22.952]                   NULL)
[13:23:22.952]                 if (is_error) {
[13:23:22.952]                   sessionInformation <- function() {
[13:23:22.952]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:23:22.952]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:23:22.952]                       search = base::search(), system = base::Sys.info())
[13:23:22.952]                   }
[13:23:22.952]                   ...future.conditions[[length(...future.conditions) + 
[13:23:22.952]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:23:22.952]                     cond$call), session = sessionInformation(), 
[13:23:22.952]                     timestamp = base::Sys.time(), signaled = 0L)
[13:23:22.952]                   signalCondition(cond)
[13:23:22.952]                 }
[13:23:22.952]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:23:22.952]                 "immediateCondition"))) {
[13:23:22.952]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:23:22.952]                   ...future.conditions[[length(...future.conditions) + 
[13:23:22.952]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:23:22.952]                   if (TRUE && !signal) {
[13:23:22.952]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:23:22.952]                     {
[13:23:22.952]                       inherits <- base::inherits
[13:23:22.952]                       invokeRestart <- base::invokeRestart
[13:23:22.952]                       is.null <- base::is.null
[13:23:22.952]                       muffled <- FALSE
[13:23:22.952]                       if (inherits(cond, "message")) {
[13:23:22.952]                         muffled <- grepl(pattern, "muffleMessage")
[13:23:22.952]                         if (muffled) 
[13:23:22.952]                           invokeRestart("muffleMessage")
[13:23:22.952]                       }
[13:23:22.952]                       else if (inherits(cond, "warning")) {
[13:23:22.952]                         muffled <- grepl(pattern, "muffleWarning")
[13:23:22.952]                         if (muffled) 
[13:23:22.952]                           invokeRestart("muffleWarning")
[13:23:22.952]                       }
[13:23:22.952]                       else if (inherits(cond, "condition")) {
[13:23:22.952]                         if (!is.null(pattern)) {
[13:23:22.952]                           computeRestarts <- base::computeRestarts
[13:23:22.952]                           grepl <- base::grepl
[13:23:22.952]                           restarts <- computeRestarts(cond)
[13:23:22.952]                           for (restart in restarts) {
[13:23:22.952]                             name <- restart$name
[13:23:22.952]                             if (is.null(name)) 
[13:23:22.952]                               next
[13:23:22.952]                             if (!grepl(pattern, name)) 
[13:23:22.952]                               next
[13:23:22.952]                             invokeRestart(restart)
[13:23:22.952]                             muffled <- TRUE
[13:23:22.952]                             break
[13:23:22.952]                           }
[13:23:22.952]                         }
[13:23:22.952]                       }
[13:23:22.952]                       invisible(muffled)
[13:23:22.952]                     }
[13:23:22.952]                     muffleCondition(cond, pattern = "^muffle")
[13:23:22.952]                   }
[13:23:22.952]                 }
[13:23:22.952]                 else {
[13:23:22.952]                   if (TRUE) {
[13:23:22.952]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:23:22.952]                     {
[13:23:22.952]                       inherits <- base::inherits
[13:23:22.952]                       invokeRestart <- base::invokeRestart
[13:23:22.952]                       is.null <- base::is.null
[13:23:22.952]                       muffled <- FALSE
[13:23:22.952]                       if (inherits(cond, "message")) {
[13:23:22.952]                         muffled <- grepl(pattern, "muffleMessage")
[13:23:22.952]                         if (muffled) 
[13:23:22.952]                           invokeRestart("muffleMessage")
[13:23:22.952]                       }
[13:23:22.952]                       else if (inherits(cond, "warning")) {
[13:23:22.952]                         muffled <- grepl(pattern, "muffleWarning")
[13:23:22.952]                         if (muffled) 
[13:23:22.952]                           invokeRestart("muffleWarning")
[13:23:22.952]                       }
[13:23:22.952]                       else if (inherits(cond, "condition")) {
[13:23:22.952]                         if (!is.null(pattern)) {
[13:23:22.952]                           computeRestarts <- base::computeRestarts
[13:23:22.952]                           grepl <- base::grepl
[13:23:22.952]                           restarts <- computeRestarts(cond)
[13:23:22.952]                           for (restart in restarts) {
[13:23:22.952]                             name <- restart$name
[13:23:22.952]                             if (is.null(name)) 
[13:23:22.952]                               next
[13:23:22.952]                             if (!grepl(pattern, name)) 
[13:23:22.952]                               next
[13:23:22.952]                             invokeRestart(restart)
[13:23:22.952]                             muffled <- TRUE
[13:23:22.952]                             break
[13:23:22.952]                           }
[13:23:22.952]                         }
[13:23:22.952]                       }
[13:23:22.952]                       invisible(muffled)
[13:23:22.952]                     }
[13:23:22.952]                     muffleCondition(cond, pattern = "^muffle")
[13:23:22.952]                   }
[13:23:22.952]                 }
[13:23:22.952]             }
[13:23:22.952]         }))
[13:23:22.952]     }, error = function(ex) {
[13:23:22.952]         base::structure(base::list(value = NULL, visible = NULL, 
[13:23:22.952]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:23:22.952]                 ...future.rng), started = ...future.startTime, 
[13:23:22.952]             finished = Sys.time(), session_uuid = NA_character_, 
[13:23:22.952]             version = "1.8"), class = "FutureResult")
[13:23:22.952]     }, finally = {
[13:23:22.952]         if (!identical(...future.workdir, getwd())) 
[13:23:22.952]             setwd(...future.workdir)
[13:23:22.952]         {
[13:23:22.952]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:23:22.952]                 ...future.oldOptions$nwarnings <- NULL
[13:23:22.952]             }
[13:23:22.952]             base::options(...future.oldOptions)
[13:23:22.952]             if (.Platform$OS.type == "windows") {
[13:23:22.952]                 old_names <- names(...future.oldEnvVars)
[13:23:22.952]                 envs <- base::Sys.getenv()
[13:23:22.952]                 names <- names(envs)
[13:23:22.952]                 common <- intersect(names, old_names)
[13:23:22.952]                 added <- setdiff(names, old_names)
[13:23:22.952]                 removed <- setdiff(old_names, names)
[13:23:22.952]                 changed <- common[...future.oldEnvVars[common] != 
[13:23:22.952]                   envs[common]]
[13:23:22.952]                 NAMES <- toupper(changed)
[13:23:22.952]                 args <- list()
[13:23:22.952]                 for (kk in seq_along(NAMES)) {
[13:23:22.952]                   name <- changed[[kk]]
[13:23:22.952]                   NAME <- NAMES[[kk]]
[13:23:22.952]                   if (name != NAME && is.element(NAME, old_names)) 
[13:23:22.952]                     next
[13:23:22.952]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:23:22.952]                 }
[13:23:22.952]                 NAMES <- toupper(added)
[13:23:22.952]                 for (kk in seq_along(NAMES)) {
[13:23:22.952]                   name <- added[[kk]]
[13:23:22.952]                   NAME <- NAMES[[kk]]
[13:23:22.952]                   if (name != NAME && is.element(NAME, old_names)) 
[13:23:22.952]                     next
[13:23:22.952]                   args[[name]] <- ""
[13:23:22.952]                 }
[13:23:22.952]                 NAMES <- toupper(removed)
[13:23:22.952]                 for (kk in seq_along(NAMES)) {
[13:23:22.952]                   name <- removed[[kk]]
[13:23:22.952]                   NAME <- NAMES[[kk]]
[13:23:22.952]                   if (name != NAME && is.element(NAME, old_names)) 
[13:23:22.952]                     next
[13:23:22.952]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:23:22.952]                 }
[13:23:22.952]                 if (length(args) > 0) 
[13:23:22.952]                   base::do.call(base::Sys.setenv, args = args)
[13:23:22.952]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:23:22.952]             }
[13:23:22.952]             else {
[13:23:22.952]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:23:22.952]             }
[13:23:22.952]             {
[13:23:22.952]                 if (base::length(...future.futureOptionsAdded) > 
[13:23:22.952]                   0L) {
[13:23:22.952]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:23:22.952]                   base::names(opts) <- ...future.futureOptionsAdded
[13:23:22.952]                   base::options(opts)
[13:23:22.952]                 }
[13:23:22.952]                 {
[13:23:22.952]                   {
[13:23:22.952]                     base::options(mc.cores = ...future.mc.cores.old)
[13:23:22.952]                     NULL
[13:23:22.952]                   }
[13:23:22.952]                   options(future.plan = NULL)
[13:23:22.952]                   if (is.na(NA_character_)) 
[13:23:22.952]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:23:22.952]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:23:22.952]                   future::plan(list(function (..., workers = availableCores(), 
[13:23:22.952]                     lazy = FALSE, rscript_libs = .libPaths(), 
[13:23:22.952]                     envir = parent.frame()) 
[13:23:22.952]                   {
[13:23:22.952]                     if (is.function(workers)) 
[13:23:22.952]                       workers <- workers()
[13:23:22.952]                     workers <- structure(as.integer(workers), 
[13:23:22.952]                       class = class(workers))
[13:23:22.952]                     stop_if_not(length(workers) == 1, is.finite(workers), 
[13:23:22.952]                       workers >= 1)
[13:23:22.952]                     if (workers == 1L && !inherits(workers, "AsIs")) {
[13:23:22.952]                       return(sequential(..., lazy = TRUE, envir = envir))
[13:23:22.952]                     }
[13:23:22.952]                     future <- MultisessionFuture(..., workers = workers, 
[13:23:22.952]                       lazy = lazy, rscript_libs = rscript_libs, 
[13:23:22.952]                       envir = envir)
[13:23:22.952]                     if (!future$lazy) 
[13:23:22.952]                       future <- run(future)
[13:23:22.952]                     invisible(future)
[13:23:22.952]                   }), .cleanup = FALSE, .init = FALSE)
[13:23:22.952]                 }
[13:23:22.952]             }
[13:23:22.952]         }
[13:23:22.952]     })
[13:23:22.952]     if (TRUE) {
[13:23:22.952]         base::sink(type = "output", split = FALSE)
[13:23:22.952]         if (TRUE) {
[13:23:22.952]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:23:22.952]         }
[13:23:22.952]         else {
[13:23:22.952]             ...future.result["stdout"] <- base::list(NULL)
[13:23:22.952]         }
[13:23:22.952]         base::close(...future.stdout)
[13:23:22.952]         ...future.stdout <- NULL
[13:23:22.952]     }
[13:23:22.952]     ...future.result$conditions <- ...future.conditions
[13:23:22.952]     ...future.result$finished <- base::Sys.time()
[13:23:22.952]     ...future.result
[13:23:22.952] }
[13:23:22.956] MultisessionFuture started
[13:23:22.956] - Launch lazy future ... done
[13:23:22.956] run() for ‘MultisessionFuture’ ... done
[13:23:22.956] result() for ClusterFuture ...
[13:23:22.957] receiveMessageFromWorker() for ClusterFuture ...
[13:23:22.957] - Validating connection of MultisessionFuture
[13:23:23.001] - received message: FutureResult
[13:23:23.002] - Received FutureResult
[13:23:23.002] - Erased future from FutureRegistry
[13:23:23.002] result() for ClusterFuture ...
[13:23:23.002] - result already collected: FutureResult
[13:23:23.002] result() for ClusterFuture ... done
[13:23:23.002] receiveMessageFromWorker() for ClusterFuture ... done
[13:23:23.002] result() for ClusterFuture ... done
[13:23:23.003] result() for ClusterFuture ...
[13:23:23.003] - result already collected: FutureResult
[13:23:23.003] result() for ClusterFuture ... done
[13:23:23.003] getGlobalsAndPackages() ...
Warning: R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘ignore’
[13:23:23.003] Searching for globals...
[13:23:23.004] - globals found: [1] ‘getOption’
[13:23:23.004] Searching for globals ... DONE
[13:23:23.004] Resolving globals: FALSE
[13:23:23.005] 
[13:23:23.005] 
[13:23:23.005] getGlobalsAndPackages() ... DONE
[13:23:23.005] run() for ‘Future’ ...
[13:23:23.005] - state: ‘created’
[13:23:23.006] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[13:23:23.020] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:23:23.021] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[13:23:23.021]   - Field: ‘node’
[13:23:23.021]   - Field: ‘label’
[13:23:23.021]   - Field: ‘local’
[13:23:23.021]   - Field: ‘owner’
[13:23:23.021]   - Field: ‘envir’
[13:23:23.021]   - Field: ‘workers’
[13:23:23.021]   - Field: ‘packages’
[13:23:23.021]   - Field: ‘gc’
[13:23:23.022]   - Field: ‘conditions’
[13:23:23.022]   - Field: ‘persistent’
[13:23:23.022]   - Field: ‘expr’
[13:23:23.022]   - Field: ‘uuid’
[13:23:23.022]   - Field: ‘seed’
[13:23:23.022]   - Field: ‘version’
[13:23:23.022]   - Field: ‘result’
[13:23:23.022]   - Field: ‘asynchronous’
[13:23:23.022]   - Field: ‘calls’
[13:23:23.023]   - Field: ‘globals’
[13:23:23.023]   - Field: ‘stdout’
[13:23:23.023]   - Field: ‘earlySignal’
[13:23:23.023]   - Field: ‘lazy’
[13:23:23.023]   - Field: ‘state’
[13:23:23.023] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[13:23:23.023] - Launch lazy future ...
[13:23:23.024] Packages needed by the future expression (n = 0): <none>
[13:23:23.024] Packages needed by future strategies (n = 0): <none>
[13:23:23.024] {
[13:23:23.024]     {
[13:23:23.024]         {
[13:23:23.024]             ...future.startTime <- base::Sys.time()
[13:23:23.024]             {
[13:23:23.024]                 {
[13:23:23.024]                   {
[13:23:23.024]                     {
[13:23:23.024]                       base::local({
[13:23:23.024]                         has_future <- base::requireNamespace("future", 
[13:23:23.024]                           quietly = TRUE)
[13:23:23.024]                         if (has_future) {
[13:23:23.024]                           ns <- base::getNamespace("future")
[13:23:23.024]                           version <- ns[[".package"]][["version"]]
[13:23:23.024]                           if (is.null(version)) 
[13:23:23.024]                             version <- utils::packageVersion("future")
[13:23:23.024]                         }
[13:23:23.024]                         else {
[13:23:23.024]                           version <- NULL
[13:23:23.024]                         }
[13:23:23.024]                         if (!has_future || version < "1.8.0") {
[13:23:23.024]                           info <- base::c(r_version = base::gsub("R version ", 
[13:23:23.024]                             "", base::R.version$version.string), 
[13:23:23.024]                             platform = base::sprintf("%s (%s-bit)", 
[13:23:23.024]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:23:23.024]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:23:23.024]                               "release", "version")], collapse = " "), 
[13:23:23.024]                             hostname = base::Sys.info()[["nodename"]])
[13:23:23.024]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:23:23.024]                             info)
[13:23:23.024]                           info <- base::paste(info, collapse = "; ")
[13:23:23.024]                           if (!has_future) {
[13:23:23.024]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:23:23.024]                               info)
[13:23:23.024]                           }
[13:23:23.024]                           else {
[13:23:23.024]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:23:23.024]                               info, version)
[13:23:23.024]                           }
[13:23:23.024]                           base::stop(msg)
[13:23:23.024]                         }
[13:23:23.024]                       })
[13:23:23.024]                     }
[13:23:23.024]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[13:23:23.024]                     base::options(mc.cores = 1L)
[13:23:23.024]                   }
[13:23:23.024]                   options(future.plan = NULL)
[13:23:23.024]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:23:23.024]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:23:23.024]                 }
[13:23:23.024]                 ...future.workdir <- getwd()
[13:23:23.024]             }
[13:23:23.024]             ...future.oldOptions <- base::as.list(base::.Options)
[13:23:23.024]             ...future.oldEnvVars <- base::Sys.getenv()
[13:23:23.024]         }
[13:23:23.024]         base::options(future.startup.script = FALSE, future.globals.onMissing = "ignore", 
[13:23:23.024]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:23:23.024]             future.globals.onMissing = "ignore", future.globals.onReference = NULL, 
[13:23:23.024]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:23:23.024]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:23:23.024]             future.stdout.windows.reencode = NULL, width = 80L)
[13:23:23.024]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:23:23.024]             base::names(...future.oldOptions))
[13:23:23.024]     }
[13:23:23.024]     if (FALSE) {
[13:23:23.024]     }
[13:23:23.024]     else {
[13:23:23.024]         if (TRUE) {
[13:23:23.024]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:23:23.024]                 open = "w")
[13:23:23.024]         }
[13:23:23.024]         else {
[13:23:23.024]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:23:23.024]                 windows = "NUL", "/dev/null"), open = "w")
[13:23:23.024]         }
[13:23:23.024]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:23:23.024]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:23:23.024]             base::sink(type = "output", split = FALSE)
[13:23:23.024]             base::close(...future.stdout)
[13:23:23.024]         }, add = TRUE)
[13:23:23.024]     }
[13:23:23.024]     ...future.frame <- base::sys.nframe()
[13:23:23.024]     ...future.conditions <- base::list()
[13:23:23.024]     ...future.rng <- base::globalenv()$.Random.seed
[13:23:23.024]     if (FALSE) {
[13:23:23.024]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:23:23.024]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:23:23.024]     }
[13:23:23.024]     ...future.result <- base::tryCatch({
[13:23:23.024]         base::withCallingHandlers({
[13:23:23.024]             ...future.value <- base::withVisible(base::local({
[13:23:23.024]                 ...future.makeSendCondition <- base::local({
[13:23:23.024]                   sendCondition <- NULL
[13:23:23.024]                   function(frame = 1L) {
[13:23:23.024]                     if (is.function(sendCondition)) 
[13:23:23.024]                       return(sendCondition)
[13:23:23.024]                     ns <- getNamespace("parallel")
[13:23:23.024]                     if (exists("sendData", mode = "function", 
[13:23:23.024]                       envir = ns)) {
[13:23:23.024]                       parallel_sendData <- get("sendData", mode = "function", 
[13:23:23.024]                         envir = ns)
[13:23:23.024]                       envir <- sys.frame(frame)
[13:23:23.024]                       master <- NULL
[13:23:23.024]                       while (!identical(envir, .GlobalEnv) && 
[13:23:23.024]                         !identical(envir, emptyenv())) {
[13:23:23.024]                         if (exists("master", mode = "list", envir = envir, 
[13:23:23.024]                           inherits = FALSE)) {
[13:23:23.024]                           master <- get("master", mode = "list", 
[13:23:23.024]                             envir = envir, inherits = FALSE)
[13:23:23.024]                           if (inherits(master, c("SOCKnode", 
[13:23:23.024]                             "SOCK0node"))) {
[13:23:23.024]                             sendCondition <<- function(cond) {
[13:23:23.024]                               data <- list(type = "VALUE", value = cond, 
[13:23:23.024]                                 success = TRUE)
[13:23:23.024]                               parallel_sendData(master, data)
[13:23:23.024]                             }
[13:23:23.024]                             return(sendCondition)
[13:23:23.024]                           }
[13:23:23.024]                         }
[13:23:23.024]                         frame <- frame + 1L
[13:23:23.024]                         envir <- sys.frame(frame)
[13:23:23.024]                       }
[13:23:23.024]                     }
[13:23:23.024]                     sendCondition <<- function(cond) NULL
[13:23:23.024]                   }
[13:23:23.024]                 })
[13:23:23.024]                 withCallingHandlers({
[13:23:23.024]                   getOption("future.globals.onMissing")
[13:23:23.024]                 }, immediateCondition = function(cond) {
[13:23:23.024]                   sendCondition <- ...future.makeSendCondition()
[13:23:23.024]                   sendCondition(cond)
[13:23:23.024]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:23:23.024]                   {
[13:23:23.024]                     inherits <- base::inherits
[13:23:23.024]                     invokeRestart <- base::invokeRestart
[13:23:23.024]                     is.null <- base::is.null
[13:23:23.024]                     muffled <- FALSE
[13:23:23.024]                     if (inherits(cond, "message")) {
[13:23:23.024]                       muffled <- grepl(pattern, "muffleMessage")
[13:23:23.024]                       if (muffled) 
[13:23:23.024]                         invokeRestart("muffleMessage")
[13:23:23.024]                     }
[13:23:23.024]                     else if (inherits(cond, "warning")) {
[13:23:23.024]                       muffled <- grepl(pattern, "muffleWarning")
[13:23:23.024]                       if (muffled) 
[13:23:23.024]                         invokeRestart("muffleWarning")
[13:23:23.024]                     }
[13:23:23.024]                     else if (inherits(cond, "condition")) {
[13:23:23.024]                       if (!is.null(pattern)) {
[13:23:23.024]                         computeRestarts <- base::computeRestarts
[13:23:23.024]                         grepl <- base::grepl
[13:23:23.024]                         restarts <- computeRestarts(cond)
[13:23:23.024]                         for (restart in restarts) {
[13:23:23.024]                           name <- restart$name
[13:23:23.024]                           if (is.null(name)) 
[13:23:23.024]                             next
[13:23:23.024]                           if (!grepl(pattern, name)) 
[13:23:23.024]                             next
[13:23:23.024]                           invokeRestart(restart)
[13:23:23.024]                           muffled <- TRUE
[13:23:23.024]                           break
[13:23:23.024]                         }
[13:23:23.024]                       }
[13:23:23.024]                     }
[13:23:23.024]                     invisible(muffled)
[13:23:23.024]                   }
[13:23:23.024]                   muffleCondition(cond)
[13:23:23.024]                 })
[13:23:23.024]             }))
[13:23:23.024]             future::FutureResult(value = ...future.value$value, 
[13:23:23.024]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:23:23.024]                   ...future.rng), globalenv = if (FALSE) 
[13:23:23.024]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:23:23.024]                     ...future.globalenv.names))
[13:23:23.024]                 else NULL, started = ...future.startTime, version = "1.8")
[13:23:23.024]         }, condition = base::local({
[13:23:23.024]             c <- base::c
[13:23:23.024]             inherits <- base::inherits
[13:23:23.024]             invokeRestart <- base::invokeRestart
[13:23:23.024]             length <- base::length
[13:23:23.024]             list <- base::list
[13:23:23.024]             seq.int <- base::seq.int
[13:23:23.024]             signalCondition <- base::signalCondition
[13:23:23.024]             sys.calls <- base::sys.calls
[13:23:23.024]             `[[` <- base::`[[`
[13:23:23.024]             `+` <- base::`+`
[13:23:23.024]             `<<-` <- base::`<<-`
[13:23:23.024]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:23:23.024]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:23:23.024]                   3L)]
[13:23:23.024]             }
[13:23:23.024]             function(cond) {
[13:23:23.024]                 is_error <- inherits(cond, "error")
[13:23:23.024]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:23:23.024]                   NULL)
[13:23:23.024]                 if (is_error) {
[13:23:23.024]                   sessionInformation <- function() {
[13:23:23.024]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:23:23.024]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:23:23.024]                       search = base::search(), system = base::Sys.info())
[13:23:23.024]                   }
[13:23:23.024]                   ...future.conditions[[length(...future.conditions) + 
[13:23:23.024]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:23:23.024]                     cond$call), session = sessionInformation(), 
[13:23:23.024]                     timestamp = base::Sys.time(), signaled = 0L)
[13:23:23.024]                   signalCondition(cond)
[13:23:23.024]                 }
[13:23:23.024]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:23:23.024]                 "immediateCondition"))) {
[13:23:23.024]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:23:23.024]                   ...future.conditions[[length(...future.conditions) + 
[13:23:23.024]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:23:23.024]                   if (TRUE && !signal) {
[13:23:23.024]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:23:23.024]                     {
[13:23:23.024]                       inherits <- base::inherits
[13:23:23.024]                       invokeRestart <- base::invokeRestart
[13:23:23.024]                       is.null <- base::is.null
[13:23:23.024]                       muffled <- FALSE
[13:23:23.024]                       if (inherits(cond, "message")) {
[13:23:23.024]                         muffled <- grepl(pattern, "muffleMessage")
[13:23:23.024]                         if (muffled) 
[13:23:23.024]                           invokeRestart("muffleMessage")
[13:23:23.024]                       }
[13:23:23.024]                       else if (inherits(cond, "warning")) {
[13:23:23.024]                         muffled <- grepl(pattern, "muffleWarning")
[13:23:23.024]                         if (muffled) 
[13:23:23.024]                           invokeRestart("muffleWarning")
[13:23:23.024]                       }
[13:23:23.024]                       else if (inherits(cond, "condition")) {
[13:23:23.024]                         if (!is.null(pattern)) {
[13:23:23.024]                           computeRestarts <- base::computeRestarts
[13:23:23.024]                           grepl <- base::grepl
[13:23:23.024]                           restarts <- computeRestarts(cond)
[13:23:23.024]                           for (restart in restarts) {
[13:23:23.024]                             name <- restart$name
[13:23:23.024]                             if (is.null(name)) 
[13:23:23.024]                               next
[13:23:23.024]                             if (!grepl(pattern, name)) 
[13:23:23.024]                               next
[13:23:23.024]                             invokeRestart(restart)
[13:23:23.024]                             muffled <- TRUE
[13:23:23.024]                             break
[13:23:23.024]                           }
[13:23:23.024]                         }
[13:23:23.024]                       }
[13:23:23.024]                       invisible(muffled)
[13:23:23.024]                     }
[13:23:23.024]                     muffleCondition(cond, pattern = "^muffle")
[13:23:23.024]                   }
[13:23:23.024]                 }
[13:23:23.024]                 else {
[13:23:23.024]                   if (TRUE) {
[13:23:23.024]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:23:23.024]                     {
[13:23:23.024]                       inherits <- base::inherits
[13:23:23.024]                       invokeRestart <- base::invokeRestart
[13:23:23.024]                       is.null <- base::is.null
[13:23:23.024]                       muffled <- FALSE
[13:23:23.024]                       if (inherits(cond, "message")) {
[13:23:23.024]                         muffled <- grepl(pattern, "muffleMessage")
[13:23:23.024]                         if (muffled) 
[13:23:23.024]                           invokeRestart("muffleMessage")
[13:23:23.024]                       }
[13:23:23.024]                       else if (inherits(cond, "warning")) {
[13:23:23.024]                         muffled <- grepl(pattern, "muffleWarning")
[13:23:23.024]                         if (muffled) 
[13:23:23.024]                           invokeRestart("muffleWarning")
[13:23:23.024]                       }
[13:23:23.024]                       else if (inherits(cond, "condition")) {
[13:23:23.024]                         if (!is.null(pattern)) {
[13:23:23.024]                           computeRestarts <- base::computeRestarts
[13:23:23.024]                           grepl <- base::grepl
[13:23:23.024]                           restarts <- computeRestarts(cond)
[13:23:23.024]                           for (restart in restarts) {
[13:23:23.024]                             name <- restart$name
[13:23:23.024]                             if (is.null(name)) 
[13:23:23.024]                               next
[13:23:23.024]                             if (!grepl(pattern, name)) 
[13:23:23.024]                               next
[13:23:23.024]                             invokeRestart(restart)
[13:23:23.024]                             muffled <- TRUE
[13:23:23.024]                             break
[13:23:23.024]                           }
[13:23:23.024]                         }
[13:23:23.024]                       }
[13:23:23.024]                       invisible(muffled)
[13:23:23.024]                     }
[13:23:23.024]                     muffleCondition(cond, pattern = "^muffle")
[13:23:23.024]                   }
[13:23:23.024]                 }
[13:23:23.024]             }
[13:23:23.024]         }))
[13:23:23.024]     }, error = function(ex) {
[13:23:23.024]         base::structure(base::list(value = NULL, visible = NULL, 
[13:23:23.024]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:23:23.024]                 ...future.rng), started = ...future.startTime, 
[13:23:23.024]             finished = Sys.time(), session_uuid = NA_character_, 
[13:23:23.024]             version = "1.8"), class = "FutureResult")
[13:23:23.024]     }, finally = {
[13:23:23.024]         if (!identical(...future.workdir, getwd())) 
[13:23:23.024]             setwd(...future.workdir)
[13:23:23.024]         {
[13:23:23.024]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:23:23.024]                 ...future.oldOptions$nwarnings <- NULL
[13:23:23.024]             }
[13:23:23.024]             base::options(...future.oldOptions)
[13:23:23.024]             if (.Platform$OS.type == "windows") {
[13:23:23.024]                 old_names <- names(...future.oldEnvVars)
[13:23:23.024]                 envs <- base::Sys.getenv()
[13:23:23.024]                 names <- names(envs)
[13:23:23.024]                 common <- intersect(names, old_names)
[13:23:23.024]                 added <- setdiff(names, old_names)
[13:23:23.024]                 removed <- setdiff(old_names, names)
[13:23:23.024]                 changed <- common[...future.oldEnvVars[common] != 
[13:23:23.024]                   envs[common]]
[13:23:23.024]                 NAMES <- toupper(changed)
[13:23:23.024]                 args <- list()
[13:23:23.024]                 for (kk in seq_along(NAMES)) {
[13:23:23.024]                   name <- changed[[kk]]
[13:23:23.024]                   NAME <- NAMES[[kk]]
[13:23:23.024]                   if (name != NAME && is.element(NAME, old_names)) 
[13:23:23.024]                     next
[13:23:23.024]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:23:23.024]                 }
[13:23:23.024]                 NAMES <- toupper(added)
[13:23:23.024]                 for (kk in seq_along(NAMES)) {
[13:23:23.024]                   name <- added[[kk]]
[13:23:23.024]                   NAME <- NAMES[[kk]]
[13:23:23.024]                   if (name != NAME && is.element(NAME, old_names)) 
[13:23:23.024]                     next
[13:23:23.024]                   args[[name]] <- ""
[13:23:23.024]                 }
[13:23:23.024]                 NAMES <- toupper(removed)
[13:23:23.024]                 for (kk in seq_along(NAMES)) {
[13:23:23.024]                   name <- removed[[kk]]
[13:23:23.024]                   NAME <- NAMES[[kk]]
[13:23:23.024]                   if (name != NAME && is.element(NAME, old_names)) 
[13:23:23.024]                     next
[13:23:23.024]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:23:23.024]                 }
[13:23:23.024]                 if (length(args) > 0) 
[13:23:23.024]                   base::do.call(base::Sys.setenv, args = args)
[13:23:23.024]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:23:23.024]             }
[13:23:23.024]             else {
[13:23:23.024]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:23:23.024]             }
[13:23:23.024]             {
[13:23:23.024]                 if (base::length(...future.futureOptionsAdded) > 
[13:23:23.024]                   0L) {
[13:23:23.024]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:23:23.024]                   base::names(opts) <- ...future.futureOptionsAdded
[13:23:23.024]                   base::options(opts)
[13:23:23.024]                 }
[13:23:23.024]                 {
[13:23:23.024]                   {
[13:23:23.024]                     base::options(mc.cores = ...future.mc.cores.old)
[13:23:23.024]                     NULL
[13:23:23.024]                   }
[13:23:23.024]                   options(future.plan = NULL)
[13:23:23.024]                   if (is.na(NA_character_)) 
[13:23:23.024]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:23:23.024]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:23:23.024]                   future::plan(list(function (..., workers = availableCores(), 
[13:23:23.024]                     lazy = FALSE, rscript_libs = .libPaths(), 
[13:23:23.024]                     envir = parent.frame()) 
[13:23:23.024]                   {
[13:23:23.024]                     if (is.function(workers)) 
[13:23:23.024]                       workers <- workers()
[13:23:23.024]                     workers <- structure(as.integer(workers), 
[13:23:23.024]                       class = class(workers))
[13:23:23.024]                     stop_if_not(length(workers) == 1, is.finite(workers), 
[13:23:23.024]                       workers >= 1)
[13:23:23.024]                     if (workers == 1L && !inherits(workers, "AsIs")) {
[13:23:23.024]                       return(sequential(..., lazy = TRUE, envir = envir))
[13:23:23.024]                     }
[13:23:23.024]                     future <- MultisessionFuture(..., workers = workers, 
[13:23:23.024]                       lazy = lazy, rscript_libs = rscript_libs, 
[13:23:23.024]                       envir = envir)
[13:23:23.024]                     if (!future$lazy) 
[13:23:23.024]                       future <- run(future)
[13:23:23.024]                     invisible(future)
[13:23:23.024]                   }), .cleanup = FALSE, .init = FALSE)
[13:23:23.024]                 }
[13:23:23.024]             }
[13:23:23.024]         }
[13:23:23.024]     })
[13:23:23.024]     if (TRUE) {
[13:23:23.024]         base::sink(type = "output", split = FALSE)
[13:23:23.024]         if (TRUE) {
[13:23:23.024]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:23:23.024]         }
[13:23:23.024]         else {
[13:23:23.024]             ...future.result["stdout"] <- base::list(NULL)
[13:23:23.024]         }
[13:23:23.024]         base::close(...future.stdout)
[13:23:23.024]         ...future.stdout <- NULL
[13:23:23.024]     }
[13:23:23.024]     ...future.result$conditions <- ...future.conditions
[13:23:23.024]     ...future.result$finished <- base::Sys.time()
[13:23:23.024]     ...future.result
[13:23:23.024] }
[13:23:23.028] MultisessionFuture started
[13:23:23.028] - Launch lazy future ... done
[13:23:23.028] run() for ‘MultisessionFuture’ ... done
[13:23:23.029] result() for ClusterFuture ...
[13:23:23.029] receiveMessageFromWorker() for ClusterFuture ...
[13:23:23.029] - Validating connection of MultisessionFuture
[13:23:23.077] - received message: FutureResult
[13:23:23.078] - Received FutureResult
[13:23:23.078] - Erased future from FutureRegistry
[13:23:23.078] result() for ClusterFuture ...
[13:23:23.078] - result already collected: FutureResult
[13:23:23.078] result() for ClusterFuture ... done
[13:23:23.078] receiveMessageFromWorker() for ClusterFuture ... done
[13:23:23.078] result() for ClusterFuture ... done
[13:23:23.079] result() for ClusterFuture ...
[13:23:23.079] - result already collected: FutureResult
[13:23:23.079] result() for ClusterFuture ... done
[13:23:23.079] getGlobalsAndPackages() ...
Warning: R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘error’
[13:23:23.079] Searching for globals...
[13:23:23.081] getGlobalsAndPackages() ...
Warning: R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘ignore’
[13:23:23.081] Searching for globals...
[13:23:23.082] - globals found: [5] ‘$’, ‘subset’, ‘data’, ‘<’, ‘x’
[13:23:23.083] Searching for globals ... DONE
[13:23:23.083] Resolving globals: FALSE
[13:23:23.083] The total size of the 1 globals is 160 bytes (160 bytes)
[13:23:23.084] The total size of the 1 globals exported for future expression (‘subset(data, x < 3)$y’) is 160 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘data’ (160 bytes of class ‘list’)
[13:23:23.084] - globals: [1] ‘data’
[13:23:23.084] 
[13:23:23.084] getGlobalsAndPackages() ... DONE
[13:23:23.085] run() for ‘Future’ ...
[13:23:23.085] - state: ‘created’
[13:23:23.085] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[13:23:23.100] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:23:23.100] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[13:23:23.100]   - Field: ‘node’
[13:23:23.100]   - Field: ‘label’
[13:23:23.100]   - Field: ‘local’
[13:23:23.101]   - Field: ‘owner’
[13:23:23.101]   - Field: ‘envir’
[13:23:23.101]   - Field: ‘workers’
[13:23:23.101]   - Field: ‘packages’
[13:23:23.101]   - Field: ‘gc’
[13:23:23.101]   - Field: ‘conditions’
[13:23:23.101]   - Field: ‘persistent’
[13:23:23.101]   - Field: ‘expr’
[13:23:23.101]   - Field: ‘uuid’
[13:23:23.102]   - Field: ‘seed’
[13:23:23.102]   - Field: ‘version’
[13:23:23.102]   - Field: ‘result’
[13:23:23.102]   - Field: ‘asynchronous’
[13:23:23.102]   - Field: ‘calls’
[13:23:23.102]   - Field: ‘globals’
[13:23:23.102]   - Field: ‘stdout’
[13:23:23.102]   - Field: ‘earlySignal’
[13:23:23.103]   - Field: ‘lazy’
[13:23:23.103]   - Field: ‘state’
[13:23:23.103] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[13:23:23.103] - Launch lazy future ...
[13:23:23.103] Packages needed by the future expression (n = 0): <none>
[13:23:23.103] Packages needed by future strategies (n = 0): <none>
[13:23:23.104] {
[13:23:23.104]     {
[13:23:23.104]         {
[13:23:23.104]             ...future.startTime <- base::Sys.time()
[13:23:23.104]             {
[13:23:23.104]                 {
[13:23:23.104]                   {
[13:23:23.104]                     {
[13:23:23.104]                       base::local({
[13:23:23.104]                         has_future <- base::requireNamespace("future", 
[13:23:23.104]                           quietly = TRUE)
[13:23:23.104]                         if (has_future) {
[13:23:23.104]                           ns <- base::getNamespace("future")
[13:23:23.104]                           version <- ns[[".package"]][["version"]]
[13:23:23.104]                           if (is.null(version)) 
[13:23:23.104]                             version <- utils::packageVersion("future")
[13:23:23.104]                         }
[13:23:23.104]                         else {
[13:23:23.104]                           version <- NULL
[13:23:23.104]                         }
[13:23:23.104]                         if (!has_future || version < "1.8.0") {
[13:23:23.104]                           info <- base::c(r_version = base::gsub("R version ", 
[13:23:23.104]                             "", base::R.version$version.string), 
[13:23:23.104]                             platform = base::sprintf("%s (%s-bit)", 
[13:23:23.104]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:23:23.104]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:23:23.104]                               "release", "version")], collapse = " "), 
[13:23:23.104]                             hostname = base::Sys.info()[["nodename"]])
[13:23:23.104]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:23:23.104]                             info)
[13:23:23.104]                           info <- base::paste(info, collapse = "; ")
[13:23:23.104]                           if (!has_future) {
[13:23:23.104]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:23:23.104]                               info)
[13:23:23.104]                           }
[13:23:23.104]                           else {
[13:23:23.104]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:23:23.104]                               info, version)
[13:23:23.104]                           }
[13:23:23.104]                           base::stop(msg)
[13:23:23.104]                         }
[13:23:23.104]                       })
[13:23:23.104]                     }
[13:23:23.104]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[13:23:23.104]                     base::options(mc.cores = 1L)
[13:23:23.104]                   }
[13:23:23.104]                   options(future.plan = NULL)
[13:23:23.104]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:23:23.104]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:23:23.104]                 }
[13:23:23.104]                 ...future.workdir <- getwd()
[13:23:23.104]             }
[13:23:23.104]             ...future.oldOptions <- base::as.list(base::.Options)
[13:23:23.104]             ...future.oldEnvVars <- base::Sys.getenv()
[13:23:23.104]         }
[13:23:23.104]         base::options(future.startup.script = FALSE, future.globals.onMissing = "ignore", 
[13:23:23.104]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:23:23.104]             future.globals.onMissing = "ignore", future.globals.onReference = NULL, 
[13:23:23.104]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:23:23.104]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:23:23.104]             future.stdout.windows.reencode = NULL, width = 80L)
[13:23:23.104]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:23:23.104]             base::names(...future.oldOptions))
[13:23:23.104]     }
[13:23:23.104]     if (FALSE) {
[13:23:23.104]     }
[13:23:23.104]     else {
[13:23:23.104]         if (TRUE) {
[13:23:23.104]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:23:23.104]                 open = "w")
[13:23:23.104]         }
[13:23:23.104]         else {
[13:23:23.104]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:23:23.104]                 windows = "NUL", "/dev/null"), open = "w")
[13:23:23.104]         }
[13:23:23.104]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:23:23.104]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:23:23.104]             base::sink(type = "output", split = FALSE)
[13:23:23.104]             base::close(...future.stdout)
[13:23:23.104]         }, add = TRUE)
[13:23:23.104]     }
[13:23:23.104]     ...future.frame <- base::sys.nframe()
[13:23:23.104]     ...future.conditions <- base::list()
[13:23:23.104]     ...future.rng <- base::globalenv()$.Random.seed
[13:23:23.104]     if (FALSE) {
[13:23:23.104]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:23:23.104]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:23:23.104]     }
[13:23:23.104]     ...future.result <- base::tryCatch({
[13:23:23.104]         base::withCallingHandlers({
[13:23:23.104]             ...future.value <- base::withVisible(base::local({
[13:23:23.104]                 ...future.makeSendCondition <- base::local({
[13:23:23.104]                   sendCondition <- NULL
[13:23:23.104]                   function(frame = 1L) {
[13:23:23.104]                     if (is.function(sendCondition)) 
[13:23:23.104]                       return(sendCondition)
[13:23:23.104]                     ns <- getNamespace("parallel")
[13:23:23.104]                     if (exists("sendData", mode = "function", 
[13:23:23.104]                       envir = ns)) {
[13:23:23.104]                       parallel_sendData <- get("sendData", mode = "function", 
[13:23:23.104]                         envir = ns)
[13:23:23.104]                       envir <- sys.frame(frame)
[13:23:23.104]                       master <- NULL
[13:23:23.104]                       while (!identical(envir, .GlobalEnv) && 
[13:23:23.104]                         !identical(envir, emptyenv())) {
[13:23:23.104]                         if (exists("master", mode = "list", envir = envir, 
[13:23:23.104]                           inherits = FALSE)) {
[13:23:23.104]                           master <- get("master", mode = "list", 
[13:23:23.104]                             envir = envir, inherits = FALSE)
[13:23:23.104]                           if (inherits(master, c("SOCKnode", 
[13:23:23.104]                             "SOCK0node"))) {
[13:23:23.104]                             sendCondition <<- function(cond) {
[13:23:23.104]                               data <- list(type = "VALUE", value = cond, 
[13:23:23.104]                                 success = TRUE)
[13:23:23.104]                               parallel_sendData(master, data)
[13:23:23.104]                             }
[13:23:23.104]                             return(sendCondition)
[13:23:23.104]                           }
[13:23:23.104]                         }
[13:23:23.104]                         frame <- frame + 1L
[13:23:23.104]                         envir <- sys.frame(frame)
[13:23:23.104]                       }
[13:23:23.104]                     }
[13:23:23.104]                     sendCondition <<- function(cond) NULL
[13:23:23.104]                   }
[13:23:23.104]                 })
[13:23:23.104]                 withCallingHandlers({
[13:23:23.104]                   subset(data, x < 3)$y
[13:23:23.104]                 }, immediateCondition = function(cond) {
[13:23:23.104]                   sendCondition <- ...future.makeSendCondition()
[13:23:23.104]                   sendCondition(cond)
[13:23:23.104]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:23:23.104]                   {
[13:23:23.104]                     inherits <- base::inherits
[13:23:23.104]                     invokeRestart <- base::invokeRestart
[13:23:23.104]                     is.null <- base::is.null
[13:23:23.104]                     muffled <- FALSE
[13:23:23.104]                     if (inherits(cond, "message")) {
[13:23:23.104]                       muffled <- grepl(pattern, "muffleMessage")
[13:23:23.104]                       if (muffled) 
[13:23:23.104]                         invokeRestart("muffleMessage")
[13:23:23.104]                     }
[13:23:23.104]                     else if (inherits(cond, "warning")) {
[13:23:23.104]                       muffled <- grepl(pattern, "muffleWarning")
[13:23:23.104]                       if (muffled) 
[13:23:23.104]                         invokeRestart("muffleWarning")
[13:23:23.104]                     }
[13:23:23.104]                     else if (inherits(cond, "condition")) {
[13:23:23.104]                       if (!is.null(pattern)) {
[13:23:23.104]                         computeRestarts <- base::computeRestarts
[13:23:23.104]                         grepl <- base::grepl
[13:23:23.104]                         restarts <- computeRestarts(cond)
[13:23:23.104]                         for (restart in restarts) {
[13:23:23.104]                           name <- restart$name
[13:23:23.104]                           if (is.null(name)) 
[13:23:23.104]                             next
[13:23:23.104]                           if (!grepl(pattern, name)) 
[13:23:23.104]                             next
[13:23:23.104]                           invokeRestart(restart)
[13:23:23.104]                           muffled <- TRUE
[13:23:23.104]                           break
[13:23:23.104]                         }
[13:23:23.104]                       }
[13:23:23.104]                     }
[13:23:23.104]                     invisible(muffled)
[13:23:23.104]                   }
[13:23:23.104]                   muffleCondition(cond)
[13:23:23.104]                 })
[13:23:23.104]             }))
[13:23:23.104]             future::FutureResult(value = ...future.value$value, 
[13:23:23.104]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:23:23.104]                   ...future.rng), globalenv = if (FALSE) 
[13:23:23.104]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:23:23.104]                     ...future.globalenv.names))
[13:23:23.104]                 else NULL, started = ...future.startTime, version = "1.8")
[13:23:23.104]         }, condition = base::local({
[13:23:23.104]             c <- base::c
[13:23:23.104]             inherits <- base::inherits
[13:23:23.104]             invokeRestart <- base::invokeRestart
[13:23:23.104]             length <- base::length
[13:23:23.104]             list <- base::list
[13:23:23.104]             seq.int <- base::seq.int
[13:23:23.104]             signalCondition <- base::signalCondition
[13:23:23.104]             sys.calls <- base::sys.calls
[13:23:23.104]             `[[` <- base::`[[`
[13:23:23.104]             `+` <- base::`+`
[13:23:23.104]             `<<-` <- base::`<<-`
[13:23:23.104]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:23:23.104]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:23:23.104]                   3L)]
[13:23:23.104]             }
[13:23:23.104]             function(cond) {
[13:23:23.104]                 is_error <- inherits(cond, "error")
[13:23:23.104]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:23:23.104]                   NULL)
[13:23:23.104]                 if (is_error) {
[13:23:23.104]                   sessionInformation <- function() {
[13:23:23.104]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:23:23.104]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:23:23.104]                       search = base::search(), system = base::Sys.info())
[13:23:23.104]                   }
[13:23:23.104]                   ...future.conditions[[length(...future.conditions) + 
[13:23:23.104]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:23:23.104]                     cond$call), session = sessionInformation(), 
[13:23:23.104]                     timestamp = base::Sys.time(), signaled = 0L)
[13:23:23.104]                   signalCondition(cond)
[13:23:23.104]                 }
[13:23:23.104]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:23:23.104]                 "immediateCondition"))) {
[13:23:23.104]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:23:23.104]                   ...future.conditions[[length(...future.conditions) + 
[13:23:23.104]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:23:23.104]                   if (TRUE && !signal) {
[13:23:23.104]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:23:23.104]                     {
[13:23:23.104]                       inherits <- base::inherits
[13:23:23.104]                       invokeRestart <- base::invokeRestart
[13:23:23.104]                       is.null <- base::is.null
[13:23:23.104]                       muffled <- FALSE
[13:23:23.104]                       if (inherits(cond, "message")) {
[13:23:23.104]                         muffled <- grepl(pattern, "muffleMessage")
[13:23:23.104]                         if (muffled) 
[13:23:23.104]                           invokeRestart("muffleMessage")
[13:23:23.104]                       }
[13:23:23.104]                       else if (inherits(cond, "warning")) {
[13:23:23.104]                         muffled <- grepl(pattern, "muffleWarning")
[13:23:23.104]                         if (muffled) 
[13:23:23.104]                           invokeRestart("muffleWarning")
[13:23:23.104]                       }
[13:23:23.104]                       else if (inherits(cond, "condition")) {
[13:23:23.104]                         if (!is.null(pattern)) {
[13:23:23.104]                           computeRestarts <- base::computeRestarts
[13:23:23.104]                           grepl <- base::grepl
[13:23:23.104]                           restarts <- computeRestarts(cond)
[13:23:23.104]                           for (restart in restarts) {
[13:23:23.104]                             name <- restart$name
[13:23:23.104]                             if (is.null(name)) 
[13:23:23.104]                               next
[13:23:23.104]                             if (!grepl(pattern, name)) 
[13:23:23.104]                               next
[13:23:23.104]                             invokeRestart(restart)
[13:23:23.104]                             muffled <- TRUE
[13:23:23.104]                             break
[13:23:23.104]                           }
[13:23:23.104]                         }
[13:23:23.104]                       }
[13:23:23.104]                       invisible(muffled)
[13:23:23.104]                     }
[13:23:23.104]                     muffleCondition(cond, pattern = "^muffle")
[13:23:23.104]                   }
[13:23:23.104]                 }
[13:23:23.104]                 else {
[13:23:23.104]                   if (TRUE) {
[13:23:23.104]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:23:23.104]                     {
[13:23:23.104]                       inherits <- base::inherits
[13:23:23.104]                       invokeRestart <- base::invokeRestart
[13:23:23.104]                       is.null <- base::is.null
[13:23:23.104]                       muffled <- FALSE
[13:23:23.104]                       if (inherits(cond, "message")) {
[13:23:23.104]                         muffled <- grepl(pattern, "muffleMessage")
[13:23:23.104]                         if (muffled) 
[13:23:23.104]                           invokeRestart("muffleMessage")
[13:23:23.104]                       }
[13:23:23.104]                       else if (inherits(cond, "warning")) {
[13:23:23.104]                         muffled <- grepl(pattern, "muffleWarning")
[13:23:23.104]                         if (muffled) 
[13:23:23.104]                           invokeRestart("muffleWarning")
[13:23:23.104]                       }
[13:23:23.104]                       else if (inherits(cond, "condition")) {
[13:23:23.104]                         if (!is.null(pattern)) {
[13:23:23.104]                           computeRestarts <- base::computeRestarts
[13:23:23.104]                           grepl <- base::grepl
[13:23:23.104]                           restarts <- computeRestarts(cond)
[13:23:23.104]                           for (restart in restarts) {
[13:23:23.104]                             name <- restart$name
[13:23:23.104]                             if (is.null(name)) 
[13:23:23.104]                               next
[13:23:23.104]                             if (!grepl(pattern, name)) 
[13:23:23.104]                               next
[13:23:23.104]                             invokeRestart(restart)
[13:23:23.104]                             muffled <- TRUE
[13:23:23.104]                             break
[13:23:23.104]                           }
[13:23:23.104]                         }
[13:23:23.104]                       }
[13:23:23.104]                       invisible(muffled)
[13:23:23.104]                     }
[13:23:23.104]                     muffleCondition(cond, pattern = "^muffle")
[13:23:23.104]                   }
[13:23:23.104]                 }
[13:23:23.104]             }
[13:23:23.104]         }))
[13:23:23.104]     }, error = function(ex) {
[13:23:23.104]         base::structure(base::list(value = NULL, visible = NULL, 
[13:23:23.104]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:23:23.104]                 ...future.rng), started = ...future.startTime, 
[13:23:23.104]             finished = Sys.time(), session_uuid = NA_character_, 
[13:23:23.104]             version = "1.8"), class = "FutureResult")
[13:23:23.104]     }, finally = {
[13:23:23.104]         if (!identical(...future.workdir, getwd())) 
[13:23:23.104]             setwd(...future.workdir)
[13:23:23.104]         {
[13:23:23.104]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:23:23.104]                 ...future.oldOptions$nwarnings <- NULL
[13:23:23.104]             }
[13:23:23.104]             base::options(...future.oldOptions)
[13:23:23.104]             if (.Platform$OS.type == "windows") {
[13:23:23.104]                 old_names <- names(...future.oldEnvVars)
[13:23:23.104]                 envs <- base::Sys.getenv()
[13:23:23.104]                 names <- names(envs)
[13:23:23.104]                 common <- intersect(names, old_names)
[13:23:23.104]                 added <- setdiff(names, old_names)
[13:23:23.104]                 removed <- setdiff(old_names, names)
[13:23:23.104]                 changed <- common[...future.oldEnvVars[common] != 
[13:23:23.104]                   envs[common]]
[13:23:23.104]                 NAMES <- toupper(changed)
[13:23:23.104]                 args <- list()
[13:23:23.104]                 for (kk in seq_along(NAMES)) {
[13:23:23.104]                   name <- changed[[kk]]
[13:23:23.104]                   NAME <- NAMES[[kk]]
[13:23:23.104]                   if (name != NAME && is.element(NAME, old_names)) 
[13:23:23.104]                     next
[13:23:23.104]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:23:23.104]                 }
[13:23:23.104]                 NAMES <- toupper(added)
[13:23:23.104]                 for (kk in seq_along(NAMES)) {
[13:23:23.104]                   name <- added[[kk]]
[13:23:23.104]                   NAME <- NAMES[[kk]]
[13:23:23.104]                   if (name != NAME && is.element(NAME, old_names)) 
[13:23:23.104]                     next
[13:23:23.104]                   args[[name]] <- ""
[13:23:23.104]                 }
[13:23:23.104]                 NAMES <- toupper(removed)
[13:23:23.104]                 for (kk in seq_along(NAMES)) {
[13:23:23.104]                   name <- removed[[kk]]
[13:23:23.104]                   NAME <- NAMES[[kk]]
[13:23:23.104]                   if (name != NAME && is.element(NAME, old_names)) 
[13:23:23.104]                     next
[13:23:23.104]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:23:23.104]                 }
[13:23:23.104]                 if (length(args) > 0) 
[13:23:23.104]                   base::do.call(base::Sys.setenv, args = args)
[13:23:23.104]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:23:23.104]             }
[13:23:23.104]             else {
[13:23:23.104]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:23:23.104]             }
[13:23:23.104]             {
[13:23:23.104]                 if (base::length(...future.futureOptionsAdded) > 
[13:23:23.104]                   0L) {
[13:23:23.104]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:23:23.104]                   base::names(opts) <- ...future.futureOptionsAdded
[13:23:23.104]                   base::options(opts)
[13:23:23.104]                 }
[13:23:23.104]                 {
[13:23:23.104]                   {
[13:23:23.104]                     base::options(mc.cores = ...future.mc.cores.old)
[13:23:23.104]                     NULL
[13:23:23.104]                   }
[13:23:23.104]                   options(future.plan = NULL)
[13:23:23.104]                   if (is.na(NA_character_)) 
[13:23:23.104]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:23:23.104]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:23:23.104]                   future::plan(list(function (..., workers = availableCores(), 
[13:23:23.104]                     lazy = FALSE, rscript_libs = .libPaths(), 
[13:23:23.104]                     envir = parent.frame()) 
[13:23:23.104]                   {
[13:23:23.104]                     if (is.function(workers)) 
[13:23:23.104]                       workers <- workers()
[13:23:23.104]                     workers <- structure(as.integer(workers), 
[13:23:23.104]                       class = class(workers))
[13:23:23.104]                     stop_if_not(length(workers) == 1, is.finite(workers), 
[13:23:23.104]                       workers >= 1)
[13:23:23.104]                     if (workers == 1L && !inherits(workers, "AsIs")) {
[13:23:23.104]                       return(sequential(..., lazy = TRUE, envir = envir))
[13:23:23.104]                     }
[13:23:23.104]                     future <- MultisessionFuture(..., workers = workers, 
[13:23:23.104]                       lazy = lazy, rscript_libs = rscript_libs, 
[13:23:23.104]                       envir = envir)
[13:23:23.104]                     if (!future$lazy) 
[13:23:23.104]                       future <- run(future)
[13:23:23.104]                     invisible(future)
[13:23:23.104]                   }), .cleanup = FALSE, .init = FALSE)
[13:23:23.104]                 }
[13:23:23.104]             }
[13:23:23.104]         }
[13:23:23.104]     })
[13:23:23.104]     if (TRUE) {
[13:23:23.104]         base::sink(type = "output", split = FALSE)
[13:23:23.104]         if (TRUE) {
[13:23:23.104]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:23:23.104]         }
[13:23:23.104]         else {
[13:23:23.104]             ...future.result["stdout"] <- base::list(NULL)
[13:23:23.104]         }
[13:23:23.104]         base::close(...future.stdout)
[13:23:23.104]         ...future.stdout <- NULL
[13:23:23.104]     }
[13:23:23.104]     ...future.result$conditions <- ...future.conditions
[13:23:23.104]     ...future.result$finished <- base::Sys.time()
[13:23:23.104]     ...future.result
[13:23:23.104] }
[13:23:23.107] Exporting 1 global objects (160 bytes) to cluster node #1 ...
[13:23:23.108] Exporting ‘data’ (160 bytes) to cluster node #1 ...
[13:23:23.108] Exporting ‘data’ (160 bytes) to cluster node #1 ... DONE
[13:23:23.108] Exporting 1 global objects (160 bytes) to cluster node #1 ... DONE
[13:23:23.109] MultisessionFuture started
[13:23:23.109] - Launch lazy future ... done
[13:23:23.109] run() for ‘MultisessionFuture’ ... done
[13:23:23.110] result() for ClusterFuture ...
[13:23:23.110] receiveMessageFromWorker() for ClusterFuture ...
[13:23:23.110] - Validating connection of MultisessionFuture
[13:23:23.157] - received message: FutureResult
[13:23:23.158] - Received FutureResult
[13:23:23.158] - Erased future from FutureRegistry
[13:23:23.158] result() for ClusterFuture ...
[13:23:23.158] - result already collected: FutureResult
[13:23:23.158] result() for ClusterFuture ... done
[13:23:23.158] receiveMessageFromWorker() for ClusterFuture ... done
[13:23:23.158] result() for ClusterFuture ... done
[13:23:23.159] result() for ClusterFuture ...
[13:23:23.159] - result already collected: FutureResult
[13:23:23.159] result() for ClusterFuture ... done
[13:23:23.159] plan(): Setting new future strategy stack:
[13:23:23.159] List of future strategies:
[13:23:23.159] 1. sequential:
[13:23:23.159]    - args: function (..., envir = parent.frame())
[13:23:23.159]    - tweaked: FALSE
[13:23:23.159]    - call: plan(list(sequential, strategy))
[13:23:23.159] 2. multisession:
[13:23:23.159]    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[13:23:23.159]    - tweaked: FALSE
[13:23:23.159]    - call: plan(list(sequential, strategy))
[13:23:23.160] plan(): nbrOfWorkers() = 1
[13:23:23.161] getGlobalsAndPackages() ...
Warning: R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘ignore’
[13:23:23.161] Searching for globals...
[13:23:23.168] - globals found: [8] ‘{’, ‘<-’, ‘$’, ‘subset’, ‘data’, ‘<’, ‘x’, ‘%<-%’
[13:23:23.168] Searching for globals ... DONE
[13:23:23.168] Resolving globals: FALSE
[13:23:23.169] The total size of the 1 globals is 160 bytes (160 bytes)
[13:23:23.169] The total size of the 1 globals exported for future expression (‘{; a %<-% subset(data, x < 3)$y; a; }’) is 160 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘data’ (160 bytes of class ‘list’)
[13:23:23.169] - globals: [1] ‘data’
[13:23:23.169] - packages: [1] ‘future’
[13:23:23.169] getGlobalsAndPackages() ... DONE
[13:23:23.170] run() for ‘Future’ ...
[13:23:23.170] - state: ‘created’
[13:23:23.170] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[13:23:23.170] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[13:23:23.170] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[13:23:23.170]   - Field: ‘label’
[13:23:23.171]   - Field: ‘local’
[13:23:23.171]   - Field: ‘owner’
[13:23:23.171]   - Field: ‘envir’
[13:23:23.171]   - Field: ‘packages’
[13:23:23.171]   - Field: ‘gc’
[13:23:23.171]   - Field: ‘conditions’
[13:23:23.171]   - Field: ‘expr’
[13:23:23.171]   - Field: ‘uuid’
[13:23:23.171]   - Field: ‘seed’
[13:23:23.171]   - Field: ‘version’
[13:23:23.171]   - Field: ‘result’
[13:23:23.172]   - Field: ‘asynchronous’
[13:23:23.172]   - Field: ‘calls’
[13:23:23.172]   - Field: ‘globals’
[13:23:23.172]   - Field: ‘stdout’
[13:23:23.172]   - Field: ‘earlySignal’
[13:23:23.172]   - Field: ‘lazy’
[13:23:23.172]   - Field: ‘state’
[13:23:23.172] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[13:23:23.172] - Launch lazy future ...
[13:23:23.173] Packages needed by the future expression (n = 1): ‘future’
[13:23:23.173] Packages needed by future strategies (n = 1): ‘future’
[13:23:23.173] {
[13:23:23.173]     {
[13:23:23.173]         {
[13:23:23.173]             ...future.startTime <- base::Sys.time()
[13:23:23.173]             {
[13:23:23.173]                 {
[13:23:23.173]                   {
[13:23:23.173]                     {
[13:23:23.173]                       base::local({
[13:23:23.173]                         has_future <- base::requireNamespace("future", 
[13:23:23.173]                           quietly = TRUE)
[13:23:23.173]                         if (has_future) {
[13:23:23.173]                           ns <- base::getNamespace("future")
[13:23:23.173]                           version <- ns[[".package"]][["version"]]
[13:23:23.173]                           if (is.null(version)) 
[13:23:23.173]                             version <- utils::packageVersion("future")
[13:23:23.173]                         }
[13:23:23.173]                         else {
[13:23:23.173]                           version <- NULL
[13:23:23.173]                         }
[13:23:23.173]                         if (!has_future || version < "1.8.0") {
[13:23:23.173]                           info <- base::c(r_version = base::gsub("R version ", 
[13:23:23.173]                             "", base::R.version$version.string), 
[13:23:23.173]                             platform = base::sprintf("%s (%s-bit)", 
[13:23:23.173]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:23:23.173]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:23:23.173]                               "release", "version")], collapse = " "), 
[13:23:23.173]                             hostname = base::Sys.info()[["nodename"]])
[13:23:23.173]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:23:23.173]                             info)
[13:23:23.173]                           info <- base::paste(info, collapse = "; ")
[13:23:23.173]                           if (!has_future) {
[13:23:23.173]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:23:23.173]                               info)
[13:23:23.173]                           }
[13:23:23.173]                           else {
[13:23:23.173]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:23:23.173]                               info, version)
[13:23:23.173]                           }
[13:23:23.173]                           base::stop(msg)
[13:23:23.173]                         }
[13:23:23.173]                       })
[13:23:23.173]                     }
[13:23:23.173]                     base::local({
[13:23:23.173]                       for (pkg in "future") {
[13:23:23.173]                         base::loadNamespace(pkg)
[13:23:23.173]                         base::library(pkg, character.only = TRUE)
[13:23:23.173]                       }
[13:23:23.173]                     })
[13:23:23.173]                   }
[13:23:23.173]                   options(future.plan = NULL)
[13:23:23.173]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:23:23.173]                   future::plan(list(function (..., workers = availableCores(), 
[13:23:23.173]                     lazy = FALSE, rscript_libs = .libPaths(), 
[13:23:23.173]                     envir = parent.frame()) 
[13:23:23.173]                   {
[13:23:23.173]                     if (is.function(workers)) 
[13:23:23.173]                       workers <- workers()
[13:23:23.173]                     workers <- structure(as.integer(workers), 
[13:23:23.173]                       class = class(workers))
[13:23:23.173]                     stop_if_not(length(workers) == 1, is.finite(workers), 
[13:23:23.173]                       workers >= 1)
[13:23:23.173]                     if (workers == 1L && !inherits(workers, "AsIs")) {
[13:23:23.173]                       return(sequential(..., lazy = TRUE, envir = envir))
[13:23:23.173]                     }
[13:23:23.173]                     future <- MultisessionFuture(..., workers = workers, 
[13:23:23.173]                       lazy = lazy, rscript_libs = rscript_libs, 
[13:23:23.173]                       envir = envir)
[13:23:23.173]                     if (!future$lazy) 
[13:23:23.173]                       future <- run(future)
[13:23:23.173]                     invisible(future)
[13:23:23.173]                   }), .cleanup = FALSE, .init = FALSE)
[13:23:23.173]                 }
[13:23:23.173]                 ...future.workdir <- getwd()
[13:23:23.173]             }
[13:23:23.173]             ...future.oldOptions <- base::as.list(base::.Options)
[13:23:23.173]             ...future.oldEnvVars <- base::Sys.getenv()
[13:23:23.173]         }
[13:23:23.173]         base::options(future.startup.script = FALSE, future.globals.onMissing = "ignore", 
[13:23:23.173]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:23:23.173]             future.globals.onMissing = "ignore", future.globals.onReference = NULL, 
[13:23:23.173]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:23:23.173]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:23:23.173]             future.stdout.windows.reencode = NULL, width = 80L)
[13:23:23.173]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:23:23.173]             base::names(...future.oldOptions))
[13:23:23.173]     }
[13:23:23.173]     if (FALSE) {
[13:23:23.173]     }
[13:23:23.173]     else {
[13:23:23.173]         if (TRUE) {
[13:23:23.173]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:23:23.173]                 open = "w")
[13:23:23.173]         }
[13:23:23.173]         else {
[13:23:23.173]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:23:23.173]                 windows = "NUL", "/dev/null"), open = "w")
[13:23:23.173]         }
[13:23:23.173]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:23:23.173]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:23:23.173]             base::sink(type = "output", split = FALSE)
[13:23:23.173]             base::close(...future.stdout)
[13:23:23.173]         }, add = TRUE)
[13:23:23.173]     }
[13:23:23.173]     ...future.frame <- base::sys.nframe()
[13:23:23.173]     ...future.conditions <- base::list()
[13:23:23.173]     ...future.rng <- base::globalenv()$.Random.seed
[13:23:23.173]     if (FALSE) {
[13:23:23.173]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:23:23.173]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:23:23.173]     }
[13:23:23.173]     ...future.result <- base::tryCatch({
[13:23:23.173]         base::withCallingHandlers({
[13:23:23.173]             ...future.value <- base::withVisible(base::local({
[13:23:23.173]                 a %<-% subset(data, x < 3)$y
[13:23:23.173]                 a
[13:23:23.173]             }))
[13:23:23.173]             future::FutureResult(value = ...future.value$value, 
[13:23:23.173]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:23:23.173]                   ...future.rng), globalenv = if (FALSE) 
[13:23:23.173]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:23:23.173]                     ...future.globalenv.names))
[13:23:23.173]                 else NULL, started = ...future.startTime, version = "1.8")
[13:23:23.173]         }, condition = base::local({
[13:23:23.173]             c <- base::c
[13:23:23.173]             inherits <- base::inherits
[13:23:23.173]             invokeRestart <- base::invokeRestart
[13:23:23.173]             length <- base::length
[13:23:23.173]             list <- base::list
[13:23:23.173]             seq.int <- base::seq.int
[13:23:23.173]             signalCondition <- base::signalCondition
[13:23:23.173]             sys.calls <- base::sys.calls
[13:23:23.173]             `[[` <- base::`[[`
[13:23:23.173]             `+` <- base::`+`
[13:23:23.173]             `<<-` <- base::`<<-`
[13:23:23.173]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:23:23.173]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:23:23.173]                   3L)]
[13:23:23.173]             }
[13:23:23.173]             function(cond) {
[13:23:23.173]                 is_error <- inherits(cond, "error")
[13:23:23.173]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:23:23.173]                   NULL)
[13:23:23.173]                 if (is_error) {
[13:23:23.173]                   sessionInformation <- function() {
[13:23:23.173]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:23:23.173]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:23:23.173]                       search = base::search(), system = base::Sys.info())
[13:23:23.173]                   }
[13:23:23.173]                   ...future.conditions[[length(...future.conditions) + 
[13:23:23.173]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:23:23.173]                     cond$call), session = sessionInformation(), 
[13:23:23.173]                     timestamp = base::Sys.time(), signaled = 0L)
[13:23:23.173]                   signalCondition(cond)
[13:23:23.173]                 }
[13:23:23.173]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:23:23.173]                 "immediateCondition"))) {
[13:23:23.173]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:23:23.173]                   ...future.conditions[[length(...future.conditions) + 
[13:23:23.173]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:23:23.173]                   if (TRUE && !signal) {
[13:23:23.173]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:23:23.173]                     {
[13:23:23.173]                       inherits <- base::inherits
[13:23:23.173]                       invokeRestart <- base::invokeRestart
[13:23:23.173]                       is.null <- base::is.null
[13:23:23.173]                       muffled <- FALSE
[13:23:23.173]                       if (inherits(cond, "message")) {
[13:23:23.173]                         muffled <- grepl(pattern, "muffleMessage")
[13:23:23.173]                         if (muffled) 
[13:23:23.173]                           invokeRestart("muffleMessage")
[13:23:23.173]                       }
[13:23:23.173]                       else if (inherits(cond, "warning")) {
[13:23:23.173]                         muffled <- grepl(pattern, "muffleWarning")
[13:23:23.173]                         if (muffled) 
[13:23:23.173]                           invokeRestart("muffleWarning")
[13:23:23.173]                       }
[13:23:23.173]                       else if (inherits(cond, "condition")) {
[13:23:23.173]                         if (!is.null(pattern)) {
[13:23:23.173]                           computeRestarts <- base::computeRestarts
[13:23:23.173]                           grepl <- base::grepl
[13:23:23.173]                           restarts <- computeRestarts(cond)
[13:23:23.173]                           for (restart in restarts) {
[13:23:23.173]                             name <- restart$name
[13:23:23.173]                             if (is.null(name)) 
[13:23:23.173]                               next
[13:23:23.173]                             if (!grepl(pattern, name)) 
[13:23:23.173]                               next
[13:23:23.173]                             invokeRestart(restart)
[13:23:23.173]                             muffled <- TRUE
[13:23:23.173]                             break
[13:23:23.173]                           }
[13:23:23.173]                         }
[13:23:23.173]                       }
[13:23:23.173]                       invisible(muffled)
[13:23:23.173]                     }
[13:23:23.173]                     muffleCondition(cond, pattern = "^muffle")
[13:23:23.173]                   }
[13:23:23.173]                 }
[13:23:23.173]                 else {
[13:23:23.173]                   if (TRUE) {
[13:23:23.173]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:23:23.173]                     {
[13:23:23.173]                       inherits <- base::inherits
[13:23:23.173]                       invokeRestart <- base::invokeRestart
[13:23:23.173]                       is.null <- base::is.null
[13:23:23.173]                       muffled <- FALSE
[13:23:23.173]                       if (inherits(cond, "message")) {
[13:23:23.173]                         muffled <- grepl(pattern, "muffleMessage")
[13:23:23.173]                         if (muffled) 
[13:23:23.173]                           invokeRestart("muffleMessage")
[13:23:23.173]                       }
[13:23:23.173]                       else if (inherits(cond, "warning")) {
[13:23:23.173]                         muffled <- grepl(pattern, "muffleWarning")
[13:23:23.173]                         if (muffled) 
[13:23:23.173]                           invokeRestart("muffleWarning")
[13:23:23.173]                       }
[13:23:23.173]                       else if (inherits(cond, "condition")) {
[13:23:23.173]                         if (!is.null(pattern)) {
[13:23:23.173]                           computeRestarts <- base::computeRestarts
[13:23:23.173]                           grepl <- base::grepl
[13:23:23.173]                           restarts <- computeRestarts(cond)
[13:23:23.173]                           for (restart in restarts) {
[13:23:23.173]                             name <- restart$name
[13:23:23.173]                             if (is.null(name)) 
[13:23:23.173]                               next
[13:23:23.173]                             if (!grepl(pattern, name)) 
[13:23:23.173]                               next
[13:23:23.173]                             invokeRestart(restart)
[13:23:23.173]                             muffled <- TRUE
[13:23:23.173]                             break
[13:23:23.173]                           }
[13:23:23.173]                         }
[13:23:23.173]                       }
[13:23:23.173]                       invisible(muffled)
[13:23:23.173]                     }
[13:23:23.173]                     muffleCondition(cond, pattern = "^muffle")
[13:23:23.173]                   }
[13:23:23.173]                 }
[13:23:23.173]             }
[13:23:23.173]         }))
[13:23:23.173]     }, error = function(ex) {
[13:23:23.173]         base::structure(base::list(value = NULL, visible = NULL, 
[13:23:23.173]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:23:23.173]                 ...future.rng), started = ...future.startTime, 
[13:23:23.173]             finished = Sys.time(), session_uuid = NA_character_, 
[13:23:23.173]             version = "1.8"), class = "FutureResult")
[13:23:23.173]     }, finally = {
[13:23:23.173]         if (!identical(...future.workdir, getwd())) 
[13:23:23.173]             setwd(...future.workdir)
[13:23:23.173]         {
[13:23:23.173]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:23:23.173]                 ...future.oldOptions$nwarnings <- NULL
[13:23:23.173]             }
[13:23:23.173]             base::options(...future.oldOptions)
[13:23:23.173]             if (.Platform$OS.type == "windows") {
[13:23:23.173]                 old_names <- names(...future.oldEnvVars)
[13:23:23.173]                 envs <- base::Sys.getenv()
[13:23:23.173]                 names <- names(envs)
[13:23:23.173]                 common <- intersect(names, old_names)
[13:23:23.173]                 added <- setdiff(names, old_names)
[13:23:23.173]                 removed <- setdiff(old_names, names)
[13:23:23.173]                 changed <- common[...future.oldEnvVars[common] != 
[13:23:23.173]                   envs[common]]
[13:23:23.173]                 NAMES <- toupper(changed)
[13:23:23.173]                 args <- list()
[13:23:23.173]                 for (kk in seq_along(NAMES)) {
[13:23:23.173]                   name <- changed[[kk]]
[13:23:23.173]                   NAME <- NAMES[[kk]]
[13:23:23.173]                   if (name != NAME && is.element(NAME, old_names)) 
[13:23:23.173]                     next
[13:23:23.173]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:23:23.173]                 }
[13:23:23.173]                 NAMES <- toupper(added)
[13:23:23.173]                 for (kk in seq_along(NAMES)) {
[13:23:23.173]                   name <- added[[kk]]
[13:23:23.173]                   NAME <- NAMES[[kk]]
[13:23:23.173]                   if (name != NAME && is.element(NAME, old_names)) 
[13:23:23.173]                     next
[13:23:23.173]                   args[[name]] <- ""
[13:23:23.173]                 }
[13:23:23.173]                 NAMES <- toupper(removed)
[13:23:23.173]                 for (kk in seq_along(NAMES)) {
[13:23:23.173]                   name <- removed[[kk]]
[13:23:23.173]                   NAME <- NAMES[[kk]]
[13:23:23.173]                   if (name != NAME && is.element(NAME, old_names)) 
[13:23:23.173]                     next
[13:23:23.173]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:23:23.173]                 }
[13:23:23.173]                 if (length(args) > 0) 
[13:23:23.173]                   base::do.call(base::Sys.setenv, args = args)
[13:23:23.173]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:23:23.173]             }
[13:23:23.173]             else {
[13:23:23.173]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:23:23.173]             }
[13:23:23.173]             {
[13:23:23.173]                 if (base::length(...future.futureOptionsAdded) > 
[13:23:23.173]                   0L) {
[13:23:23.173]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:23:23.173]                   base::names(opts) <- ...future.futureOptionsAdded
[13:23:23.173]                   base::options(opts)
[13:23:23.173]                 }
[13:23:23.173]                 {
[13:23:23.173]                   {
[13:23:23.173]                     NULL
[13:23:23.173]                     RNGkind("Mersenne-Twister")
[13:23:23.173]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[13:23:23.173]                       inherits = FALSE)
[13:23:23.173]                   }
[13:23:23.173]                   options(future.plan = NULL)
[13:23:23.173]                   if (is.na(NA_character_)) 
[13:23:23.173]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:23:23.173]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:23:23.173]                   future::plan(list(function (..., envir = parent.frame()) 
[13:23:23.173]                   {
[13:23:23.173]                     future <- SequentialFuture(..., envir = envir)
[13:23:23.173]                     if (!future$lazy) 
[13:23:23.173]                       future <- run(future)
[13:23:23.173]                     invisible(future)
[13:23:23.173]                   }, function (..., workers = availableCores(), 
[13:23:23.173]                     lazy = FALSE, rscript_libs = .libPaths(), 
[13:23:23.173]                     envir = parent.frame()) 
[13:23:23.173]                   {
[13:23:23.173]                     if (is.function(workers)) 
[13:23:23.173]                       workers <- workers()
[13:23:23.173]                     workers <- structure(as.integer(workers), 
[13:23:23.173]                       class = class(workers))
[13:23:23.173]                     stop_if_not(length(workers) == 1, is.finite(workers), 
[13:23:23.173]                       workers >= 1)
[13:23:23.173]                     if (workers == 1L && !inherits(workers, "AsIs")) {
[13:23:23.173]                       return(sequential(..., lazy = TRUE, envir = envir))
[13:23:23.173]                     }
[13:23:23.173]                     future <- MultisessionFuture(..., workers = workers, 
[13:23:23.173]                       lazy = lazy, rscript_libs = rscript_libs, 
[13:23:23.173]                       envir = envir)
[13:23:23.173]                     if (!future$lazy) 
[13:23:23.173]                       future <- run(future)
[13:23:23.173]                     invisible(future)
[13:23:23.173]                   }), .cleanup = FALSE, .init = FALSE)
[13:23:23.173]                 }
[13:23:23.173]             }
[13:23:23.173]         }
[13:23:23.173]     })
[13:23:23.173]     if (TRUE) {
[13:23:23.173]         base::sink(type = "output", split = FALSE)
[13:23:23.173]         if (TRUE) {
[13:23:23.173]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:23:23.173]         }
[13:23:23.173]         else {
[13:23:23.173]             ...future.result["stdout"] <- base::list(NULL)
[13:23:23.173]         }
[13:23:23.173]         base::close(...future.stdout)
[13:23:23.173]         ...future.stdout <- NULL
[13:23:23.173]     }
[13:23:23.173]     ...future.result$conditions <- ...future.conditions
[13:23:23.173]     ...future.result$finished <- base::Sys.time()
[13:23:23.173]     ...future.result
[13:23:23.173] }
[13:23:23.175] assign_globals() ...
[13:23:23.175] List of 1
[13:23:23.175]  $ data:'data.frame':	5 obs. of  2 variables:
[13:23:23.175]   ..$ x: int [1:5] 1 2 3 4 5
[13:23:23.175]   ..$ y: int [1:5] 1 2 3 4 5
[13:23:23.175]  - attr(*, "where")=List of 1
[13:23:23.175]   ..$ data:<environment: R_EmptyEnv> 
[13:23:23.175]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[13:23:23.175]  - attr(*, "resolved")= logi FALSE
[13:23:23.175]  - attr(*, "total_size")= num 160
[13:23:23.175]  - attr(*, "already-done")= logi TRUE
[13:23:23.180] - copied ‘data’ to environment
[13:23:23.180] assign_globals() ... done
[13:23:23.180] plan(): Setting new future strategy stack:
[13:23:23.180] List of future strategies:
[13:23:23.180] 1. multisession:
[13:23:23.180]    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[13:23:23.180]    - tweaked: FALSE
[13:23:23.180]    - call: plan(list(sequential, strategy))
[13:23:23.185] plan(): nbrOfWorkers() = 2
[13:23:23.657] plan(): Setting new future strategy stack:
[13:23:23.658] List of future strategies:
[13:23:23.658] 1. sequential:
[13:23:23.658]    - args: function (..., envir = parent.frame())
[13:23:23.658]    - tweaked: FALSE
[13:23:23.658]    - call: plan(list(sequential, strategy))
[13:23:23.658] 2. multisession:
[13:23:23.658]    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[13:23:23.658]    - tweaked: FALSE
[13:23:23.658]    - call: plan(list(sequential, strategy))
[13:23:23.658] plan(): nbrOfWorkers() = 1
[13:23:23.658] SequentialFuture started (and completed)
[13:23:23.658] signalConditions() ...
[13:23:23.659]  - include = ‘immediateCondition’
[13:23:23.659]  - exclude = 
[13:23:23.659]  - resignal = FALSE
[13:23:23.659]  - Number of conditions: 93
[13:23:23.659] signalConditions() ... done
[13:23:23.659] - Launch lazy future ... done
[13:23:23.659] run() for ‘SequentialFuture’ ... done
[13:23:23.659] signalConditions() ...
[13:23:23.659]  - include = ‘immediateCondition’
[13:23:23.659]  - exclude = 
[13:23:23.660]  - resignal = FALSE
[13:23:23.660]  - Number of conditions: 93
[13:23:23.660] signalConditions() ... done
[13:23:23.660] Future state: ‘finished’
[13:23:23.660] signalConditions() ...
[13:23:23.660]  - include = ‘condition’
[13:23:23.660]  - exclude = ‘immediateCondition’
[13:23:23.660]  - resignal = TRUE
[13:23:23.660]  - Number of conditions: 93
[13:23:23.661]  - Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:23.185] getGlobalsAndPackages() ...
[13:23:23.661]  - Condition #2: ‘deprecatedWarning’, ‘warning’, ‘condition’
Warning: R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘ignore’
[13:23:23.661]  - Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:23.199] Searching for globals...
[13:23:23.661]  - Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:23.200] - globals found: [5] ‘$’, ‘subset’, ‘data’, ‘<’, ‘x’
[13:23:23.661]  - Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:23.200] Searching for globals ... DONE
[13:23:23.661]  - Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:23.200] Resolving globals: FALSE
[13:23:23.661]  - Condition #7: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:23.201] The total size of the 1 globals is 160 bytes (160 bytes)
[13:23:23.661]  - Condition #8: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:23.201] The total size of the 1 globals exported for future expression (‘subset(data, x < 3)$y’) is 160 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘data’ (160 bytes of class ‘list’)
[13:23:23.662]  - Condition #9: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:23.201] - globals: [1] ‘data’
[13:23:23.662]  - Condition #10: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:23.202] 
[13:23:23.662]  - Condition #11: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:23.202] getGlobalsAndPackages() ... DONE
[13:23:23.662]  - Condition #12: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:23.202] run() for ‘Future’ ...
[13:23:23.662]  - Condition #13: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:23.202] - state: ‘created’
[13:23:23.662]  - Condition #14: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:23.202] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[13:23:23.662]  - Condition #15: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:23.206] [local output] makeClusterPSOCK() ...
[13:23:23.663]  - Condition #16: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:23.210] [local output] Workers: [n = 2] ‘localhost’, ‘localhost’
[13:23:23.663]  - Condition #17: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:23.210] [local output] Base port: 11894
[13:23:23.663]  - Condition #18: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:23.210] [local output] Getting setup options for 2 cluster nodes ...
[13:23:23.663]  - Condition #19: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:23.210] [local output]  - Node 1 of 2 ...
[13:23:23.663]  - Condition #20: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:23.211] [local output] localMachine=TRUE => revtunnel=FALSE

[13:23:23.663]  - Condition #21: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:23.211] [local output] Rscript port: 11894

[13:23:23.663]  - Condition #22: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:23.212] [local output]  - Node 2 of 2 ...
[13:23:23.663]  - Condition #23: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:23.212] [local output] localMachine=TRUE => revtunnel=FALSE

[13:23:23.664]  - Condition #24: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:23.213] [local output] Rscript port: 11894

[13:23:23.664]  - Condition #25: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:23.213] [local output] Getting setup options for 2 cluster nodes ... done
[13:23:23.664]  - Condition #26: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:23.213] [local output]  - Parallel setup requested for some PSOCK nodes
[13:23:23.664]  - Condition #27: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:23.213] [local output] Setting up PSOCK nodes in parallel
[13:23:23.664]  - Condition #28: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:23.213] List of 36
[13:23:23.213]  $ worker          : chr "localhost"
[13:23:23.213]   ..- attr(*, "localhost")= logi TRUE
[13:23:23.213]  $ master          : chr "localhost"
[13:23:23.213]  $ port            : int 11894
[13:23:23.213]  $ connectTimeout  : num 120
[13:23:23.213]  $ timeout         : num 2592000
[13:23:23.213]  $ rscript         : chr "'/usr/local/lib/R/bin/Rscript'"
[13:23:23.213]  $ homogeneous     : logi TRUE
[13:23:23.213]  $ rscript_args    : chr "--default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),fi"| __truncated__
[13:23:23.213]  $ rscript_envs    : NULL
[13:23:23.213]  $ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[13:23:23.213]  $ rscript_startup : NULL
[13:23:23.213]  $ rscript_sh      : chr "sh"
[13:23:23.213]  $ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[13:23:23.213]  $ methods         : logi TRUE
[13:23:23.213]  $ socketOptions   : chr "no-delay"
[13:23:23.213]  $ useXDR          : logi FALSE
[13:23:23.213]  $ outfile         : chr "/dev/null"
[13:23:23.213]  $ renice          : int NA
[13:23:23.213]  $ rshcmd          : NULL
[13:23:23.213]  $ user            : chr(0) 
[13:23:23.213]  $ revtunnel       : logi FALSE
[13:23:23.213]  $ rshlogfile      : NULL
[13:23:23.213]  $ rshopts         : chr(0) 
[13:23:23.213]  $ rank            : int 1
[13:23:23.213]  $ manual          : logi FALSE
[13:23:23.213]  $ dryrun          : logi FALSE
[13:23:23.213]  $ quiet           : logi FALSE
[13:23:23.213]  $ setup_strategy  : chr "parallel"
[13:23:23.213]  $ local_cmd       : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[13:23:23.213]  $ pidfile         : chr "/tmp/RtmpXByBu8/worker.rank=1.parallelly.parent=86081.1504129909a43.pid"
[13:23:23.213]  $ rshcmd_label    : NULL
[13:23:23.213]  $ rsh_call        : NULL
[13:23:23.213]  $ cmd             : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[13:23:23.213]  $ localMachine    : logi TRUE
[13:23:23.213]  $ make_fcn        :function (worker = getOption2("parallelly.localhost.hostname", "localhost"), 
[13:23:23.213]     master = NULL, port, connectTimeout = getOption2("parallelly.makeNodePSOCK.connectTimeout", 
[13:23:23.213]         2 * 60), timeout = getOption2("parallelly.makeNodePSOCK.timeout", 
[13:23:23.213]         30 * 24 * 60 * 60), rscript = NULL, homogeneous = NULL, rscript_args = NULL, 
[13:23:23.213]     rscript_envs = NULL, rscript_libs = NULL, rscript_startup = NULL, rscript_sh = c("auto", 
[13:23:23.213]         "cmd", "sh"), default_packages = c("datasets", "utils", "grDevices", 
[13:23:23.213]         "graphics", "stats", if (methods) "methods"), methods = TRUE, socketOptions = getOption2("parallelly.makeNodePSOCK.socketOptions", 
[13:23:23.213]         "no-delay"), useXDR = getOption2("parallelly.makeNodePSOCK.useXDR", 
[13:23:23.213]         FALSE), outfile = "/dev/null", renice = NA_integer_, rshcmd = getOption2("parallelly.makeNodePSOCK.rshcmd", 
[13:23:23.213]         NULL), user = NULL, revtunnel = NA, rshlogfile = NULL, rshopts = getOption2("parallelly.makeNodePSOCK.rshopts", 
[13:23:23.213]         NULL), rank = 1L, manual = FALSE, dryrun = FALSE, quiet = FALSE, 
[13:23:23.213]     setup_strategy = getOption2("parallelly.makeNodePSOCK.setup_strategy", 
[13:23:23.213]         "parallel"), action = c("launch", "options"), verbose = FALSE)  
[13:23:23.213]  $ arguments       :List of 28
[13:23:23.213]   ..$ worker          : chr "localhost"
[13:23:23.213]   ..$ master          : NULL
[13:23:23.213]   ..$ port            : int 11894
[13:23:23.213]   ..$ connectTimeout  : num 120
[13:23:23.213]   ..$ timeout         : num 2592000
[13:23:23.213]   ..$ rscript         : NULL
[13:23:23.213]   ..$ homogeneous     : NULL
[13:23:23.213]   ..$ rscript_args    : NULL
[13:23:23.213]   ..$ rscript_envs    : NULL
[13:23:23.213]   ..$ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[13:23:23.213]   ..$ rscript_startup : NULL
[13:23:23.213]   ..$ rscript_sh      : chr [1:3] "auto" "cmd" "sh"
[13:23:23.213]   ..$ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[13:23:23.213]   ..$ methods         : logi TRUE
[13:23:23.213]   ..$ socketOptions   : chr "no-delay"
[13:23:23.213]   ..$ useXDR          : logi FALSE
[13:23:23.213]   ..$ outfile         : chr "/dev/null"
[13:23:23.213]   ..$ renice          : int NA
[13:23:23.213]   ..$ rshcmd          : NULL
[13:23:23.213]   ..$ user            : NULL
[13:23:23.213]   ..$ revtunnel       : logi NA
[13:23:23.213]   ..$ rshlogfile      : NULL
[13:23:23.213]   ..$ rshopts         : NULL
[13:23:23.213]   ..$ rank            : int 1
[13:23:23.213]   ..$ manual          : logi FALSE
[13:23:23.213]   ..$ dryrun          : logi FALSE
[13:23:23.213]   ..$ quiet           : logi FALSE
[13:23:23.213]   ..$ setup_strategy  : chr "parallel"
[13:23:23.213]  - attr(*, "class")= chr [1:2] "makeNodePSOCKOptions" "makeNodeOptions"
[13:23:23.664]  - Condition #29: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:23.231] [local output] System call to launch all workers:
[13:23:23.665]  - Condition #30: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:23.231] [local output] '/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/RtmpXByBu8/worker.rank=1.parallelly.parent=86081.1504129909a43.pid")), silent = TRUE)' -e 'options(socketOptions = "no-delay")' -e '.libPaths(c("/usr/local/lib/R/site-library","/usr/local/lib/R/library"))' -e 'workRSOCK <- tryCatch(parallel:::.workRSOCK, error=function(e) parallel:::.slaveRSOCK); workRSOCK()' MASTER=localhost PORT=11894 OUT=/dev/null TIMEOUT=2592000 XDR=FALSE SETUPTIMEOUT=120 SETUPSTRATEGY=parallel
[13:23:23.665]  - Condition #31: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:23.231] [local output] Starting PSOCK main server
[13:23:23.665]  - Condition #32: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:23.232] [local output] Workers launched
[13:23:23.665]  - Condition #33: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:23.232] [local output] Waiting for workers to connect back
[13:23:23.665]  - Condition #34: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:23.233]  - [local output] 0 workers out of 2 ready
[13:23:23.665]  - Condition #35: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:23.490]  - [local output] 0 workers out of 2 ready
[13:23:23.665]  - Condition #36: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:23.490]  - [local output] 1 workers out of 2 ready
[13:23:23.665]  - Condition #37: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:23.491]  - [local output] 1 workers out of 2 ready
[13:23:23.666]  - Condition #38: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:23.491]  - [local output] 2 workers out of 2 ready
[13:23:23.666]  - Condition #39: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:23.491] [local output] Launching of workers completed
[13:23:23.666]  - Condition #40: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:23.492] [local output] Collecting session information from workers
[13:23:23.666]  - Condition #41: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:23.492] [local output]  - Worker #1 of 2
[13:23:23.666]  - Condition #42: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:23.493] [local output]  - Worker #2 of 2
[13:23:23.666]  - Condition #43: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:23.493] [local output] makeClusterPSOCK() ... done
[13:23:23.666]  - Condition #44: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:23.503] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:23:23.667]  - Condition #45: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:23.504] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[13:23:23.667]  - Condition #46: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:23.504]   - Field: ‘node’
[13:23:23.667]  - Condition #47: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:23.504]   - Field: ‘label’
[13:23:23.667]  - Condition #48: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:23.504]   - Field: ‘local’
[13:23:23.667]  - Condition #49: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:23.504]   - Field: ‘owner’
[13:23:23.667]  - Condition #50: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:23.504]   - Field: ‘envir’
[13:23:23.667]  - Condition #51: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:23.504]   - Field: ‘workers’
[13:23:23.667]  - Condition #52: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:23.504]   - Field: ‘packages’
[13:23:23.668]  - Condition #53: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:23.505]   - Field: ‘gc’
[13:23:23.668]  - Condition #54: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:23.505]   - Field: ‘conditions’
[13:23:23.668]  - Condition #55: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:23.505]   - Field: ‘persistent’
[13:23:23.668]  - Condition #56: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:23.505]   - Field: ‘expr’
[13:23:23.668]  - Condition #57: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:23.505]   - Field: ‘uuid’
[13:23:23.668]  - Condition #58: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:23.505]   - Field: ‘seed’
[13:23:23.669]  - Condition #59: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:23.505]   - Field: ‘version’
[13:23:23.669]  - Condition #60: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:23.505]   - Field: ‘result’
[13:23:23.669]  - Condition #61: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:23.505]   - Field: ‘asynchronous’
[13:23:23.669]  - Condition #62: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:23.506]   - Field: ‘calls’
[13:23:23.669]  - Condition #63: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:23.506]   - Field: ‘globals’
[13:23:23.669]  - Condition #64: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:23.506]   - Field: ‘stdout’
[13:23:23.669]  - Condition #65: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:23.506]   - Field: ‘earlySignal’
[13:23:23.669]  - Condition #66: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:23.506]   - Field: ‘lazy’
[13:23:23.670]  - Condition #67: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:23.506]   - Field: ‘state’
[13:23:23.670]  - Condition #68: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:23.506] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[13:23:23.670]  - Condition #69: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:23.506] - Launch lazy future ...
[13:23:23.670]  - Condition #70: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:23.507] Packages needed by the future expression (n = 0): <none>
[13:23:23.670]  - Condition #71: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:23.507] Packages needed by future strategies (n = 0): <none>
[13:23:23.670]  - Condition #72: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:23.507] {
[13:23:23.507]     {
[13:23:23.507]         {
[13:23:23.507]             ...future.startTime <- base::Sys.time()
[13:23:23.507]             {
[13:23:23.507]                 {
[13:23:23.507]                   {
[13:23:23.507]                     {
[13:23:23.507]                       base::local({
[13:23:23.507]                         has_future <- base::requireNamespace("future", 
[13:23:23.507]                           quietly = TRUE)
[13:23:23.507]                         if (has_future) {
[13:23:23.507]                           ns <- base::getNamespace("future")
[13:23:23.507]                           version <- ns[[".package"]][["version"]]
[13:23:23.507]                           if (is.null(version)) 
[13:23:23.507]                             version <- utils::packageVersion("future")
[13:23:23.507]                         }
[13:23:23.507]                         else {
[13:23:23.507]                           version <- NULL
[13:23:23.507]                         }
[13:23:23.507]                         if (!has_future || version < "1.8.0") {
[13:23:23.507]                           info <- base::c(r_version = base::gsub("R version ", 
[13:23:23.507]                             "", base::R.version$version.string), 
[13:23:23.507]                             platform = base::sprintf("%s (%s-bit)", 
[13:23:23.507]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:23:23.507]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:23:23.507]                               "release", "version")], collapse = " "), 
[13:23:23.507]                             hostname = base::Sys.info()[["nodename"]])
[13:23:23.507]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:23:23.507]                             info)
[13:23:23.507]                           info <- base::paste(info, collapse = "; ")
[13:23:23.507]                           if (!has_future) {
[13:23:23.507]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:23:23.507]                               info)
[13:23:23.507]                           }
[13:23:23.507]                           else {
[13:23:23.507]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:23:23.507]                               info, version)
[13:23:23.507]                           }
[13:23:23.507]                           base::stop(msg)
[13:23:23.507]                         }
[13:23:23.507]                       })
[13:23:23.507]                     }
[13:23:23.507]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[13:23:23.507]                     base::options(mc.cores = 1L)
[13:23:23.507]                   }
[13:23:23.507]                   options(future.plan = NULL)
[13:23:23.507]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:23:23.507]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:23:23.507]                 }
[13:23:23.507]                 ...future.workdir <- getwd()
[13:23:23.507]             }
[13:23:23.507]             ...future.oldOptions <- base::as.list(base::.Options)
[13:23:23.507]             ...future.oldEnvVars <- base::Sys.getenv()
[13:23:23.507]         }
[13:23:23.507]         base::options(future.startup.script = FALSE, future.globals.onMissing = "ignore", 
[13:23:23.507]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:23:23.507]             future.globals.onMissing = "ignore", future.globals.onReference = NULL, 
[13:23:23.507]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:23:23.507]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:23:23.507]             future.stdout.windows.reencode = NULL, width = 80L)
[13:23:23.507]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:23:23.507]             base::names(...future.oldOptions))
[13:23:23.507]     }
[13:23:23.507]     if (FALSE) {
[13:23:23.507]     }
[13:23:23.507]     else {
[13:23:23.507]         if (TRUE) {
[13:23:23.507]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:23:23.507]                 open = "w")
[13:23:23.507]         }
[13:23:23.507]         else {
[13:23:23.507]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:23:23.507]                 windows = "NUL", "/dev/null"), open = "w")
[13:23:23.507]         }
[13:23:23.507]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:23:23.507]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:23:23.507]             base::sink(type = "output", split = FALSE)
[13:23:23.507]             base::close(...future.stdout)
[13:23:23.507]         }, add = TRUE)
[13:23:23.507]     }
[13:23:23.507]     ...future.frame <- base::sys.nframe()
[13:23:23.507]     ...future.conditions <- base::list()
[13:23:23.507]     ...future.rng <- base::globalenv()$.Random.seed
[13:23:23.507]     if (FALSE) {
[13:23:23.507]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:23:23.507]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:23:23.507]     }
[13:23:23.507]     ...future.result <- base::tryCatch({
[13:23:23.507]         base::withCallingHandlers({
[13:23:23.507]             ...future.value <- base::withVisible(base::local({
[13:23:23.507]                 ...future.makeSendCondition <- base::local({
[13:23:23.507]                   sendCondition <- NULL
[13:23:23.507]                   function(frame = 1L) {
[13:23:23.507]                     if (is.function(sendCondition)) 
[13:23:23.507]                       return(sendCondition)
[13:23:23.507]                     ns <- getNamespace("parallel")
[13:23:23.507]                     if (exists("sendData", mode = "function", 
[13:23:23.507]                       envir = ns)) {
[13:23:23.507]                       parallel_sendData <- get("sendData", mode = "function", 
[13:23:23.507]                         envir = ns)
[13:23:23.507]                       envir <- sys.frame(frame)
[13:23:23.507]                       master <- NULL
[13:23:23.507]                       while (!identical(envir, .GlobalEnv) && 
[13:23:23.507]                         !identical(envir, emptyenv())) {
[13:23:23.507]                         if (exists("master", mode = "list", envir = envir, 
[13:23:23.507]                           inherits = FALSE)) {
[13:23:23.507]                           master <- get("master", mode = "list", 
[13:23:23.507]                             envir = envir, inherits = FALSE)
[13:23:23.507]                           if (inherits(master, c("SOCKnode", 
[13:23:23.507]                             "SOCK0node"))) {
[13:23:23.507]                             sendCondition <<- function(cond) {
[13:23:23.507]                               data <- list(type = "VALUE", value = cond, 
[13:23:23.507]                                 success = TRUE)
[13:23:23.507]                               parallel_sendData(master, data)
[13:23:23.507]                             }
[13:23:23.507]                             return(sendCondition)
[13:23:23.507]                           }
[13:23:23.507]                         }
[13:23:23.507]                         frame <- frame + 1L
[13:23:23.507]                         envir <- sys.frame(frame)
[13:23:23.507]                       }
[13:23:23.507]                     }
[13:23:23.507]                     sendCondition <<- function(cond) NULL
[13:23:23.507]                   }
[13:23:23.507]                 })
[13:23:23.507]                 withCallingHandlers({
[13:23:23.507]                   subset(data, x < 3)$y
[13:23:23.507]                 }, immediateCondition = function(cond) {
[13:23:23.507]                   sendCondition <- ...future.makeSendCondition()
[13:23:23.507]                   sendCondition(cond)
[13:23:23.507]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:23:23.507]                   {
[13:23:23.507]                     inherits <- base::inherits
[13:23:23.507]                     invokeRestart <- base::invokeRestart
[13:23:23.507]                     is.null <- base::is.null
[13:23:23.507]                     muffled <- FALSE
[13:23:23.507]                     if (inherits(cond, "message")) {
[13:23:23.507]                       muffled <- grepl(pattern, "muffleMessage")
[13:23:23.507]                       if (muffled) 
[13:23:23.507]                         invokeRestart("muffleMessage")
[13:23:23.507]                     }
[13:23:23.507]                     else if (inherits(cond, "warning")) {
[13:23:23.507]                       muffled <- grepl(pattern, "muffleWarning")
[13:23:23.507]                       if (muffled) 
[13:23:23.507]                         invokeRestart("muffleWarning")
[13:23:23.507]                     }
[13:23:23.507]                     else if (inherits(cond, "condition")) {
[13:23:23.507]                       if (!is.null(pattern)) {
[13:23:23.507]                         computeRestarts <- base::computeRestarts
[13:23:23.507]                         grepl <- base::grepl
[13:23:23.507]                         restarts <- computeRestarts(cond)
[13:23:23.507]                         for (restart in restarts) {
[13:23:23.507]                           name <- restart$name
[13:23:23.507]                           if (is.null(name)) 
[13:23:23.507]                             next
[13:23:23.507]                           if (!grepl(pattern, name)) 
[13:23:23.507]                             next
[13:23:23.507]                           invokeRestart(restart)
[13:23:23.507]                           muffled <- TRUE
[13:23:23.507]                           break
[13:23:23.507]                         }
[13:23:23.507]                       }
[13:23:23.507]                     }
[13:23:23.507]                     invisible(muffled)
[13:23:23.507]                   }
[13:23:23.507]                   muffleCondition(cond)
[13:23:23.507]                 })
[13:23:23.507]             }))
[13:23:23.507]             future::FutureResult(value = ...future.value$value, 
[13:23:23.507]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:23:23.507]                   ...future.rng), globalenv = if (FALSE) 
[13:23:23.507]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:23:23.507]                     ...future.globalenv.names))
[13:23:23.507]                 else NULL, started = ...future.startTime, version = "1.8")
[13:23:23.507]         }, condition = base::local({
[13:23:23.507]             c <- base::c
[13:23:23.507]             inherits <- base::inherits
[13:23:23.507]             invokeRestart <- base::invokeRestart
[13:23:23.507]             length <- base::length
[13:23:23.507]             list <- base::list
[13:23:23.507]             seq.int <- base::seq.int
[13:23:23.507]             signalCondition <- base::signalCondition
[13:23:23.507]             sys.calls <- base::sys.calls
[13:23:23.507]             `[[` <- base::`[[`
[13:23:23.507]             `+` <- base::`+`
[13:23:23.507]             `<<-` <- base::`<<-`
[13:23:23.507]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:23:23.507]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:23:23.507]                   3L)]
[13:23:23.507]             }
[13:23:23.507]             function(cond) {
[13:23:23.507]                 is_error <- inherits(cond, "error")
[13:23:23.507]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:23:23.507]                   NULL)
[13:23:23.507]                 if (is_error) {
[13:23:23.507]                   sessionInformation <- function() {
[13:23:23.507]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:23:23.507]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:23:23.507]                       search = base::search(), system = base::Sys.info())
[13:23:23.507]                   }
[13:23:23.507]                   ...future.conditions[[length(...future.conditions) + 
[13:23:23.507]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:23:23.507]                     cond$call), session = sessionInformation(), 
[13:23:23.507]                     timestamp = base::Sys.time(), signaled = 0L)
[13:23:23.507]                   signalCondition(cond)
[13:23:23.507]                 }
[13:23:23.507]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:23:23.507]                 "immediateCondition"))) {
[13:23:23.507]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:23:23.507]                   ...future.conditions[[length(...future.conditions) + 
[13:23:23.507]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:23:23.507]                   if (TRUE && !signal) {
[13:23:23.507]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:23:23.507]                     {
[13:23:23.507]                       inherits <- base::inherits
[13:23:23.507]                       invokeRestart <- base::invokeRestart
[13:23:23.507]                       is.null <- base::is.null
[13:23:23.507]                       muffled <- FALSE
[13:23:23.507]                       if (inherits(cond, "message")) {
[13:23:23.507]                         muffled <- grepl(pattern, "muffleMessage")
[13:23:23.507]                         if (muffled) 
[13:23:23.507]                           invokeRestart("muffleMessage")
[13:23:23.507]                       }
[13:23:23.507]                       else if (inherits(cond, "warning")) {
[13:23:23.507]                         muffled <- grepl(pattern, "muffleWarning")
[13:23:23.507]                         if (muffled) 
[13:23:23.507]                           invokeRestart("muffleWarning")
[13:23:23.507]                       }
[13:23:23.507]                       else if (inherits(cond, "condition")) {
[13:23:23.507]                         if (!is.null(pattern)) {
[13:23:23.507]                           computeRestarts <- base::computeRestarts
[13:23:23.507]                           grepl <- base::grepl
[13:23:23.507]                           restarts <- computeRestarts(cond)
[13:23:23.507]                           for (restart in restarts) {
[13:23:23.507]                             name <- restart$name
[13:23:23.507]                             if (is.null(name)) 
[13:23:23.507]                               next
[13:23:23.507]                             if (!grepl(pattern, name)) 
[13:23:23.507]                               next
[13:23:23.507]                             invokeRestart(restart)
[13:23:23.507]                             muffled <- TRUE
[13:23:23.507]                             break
[13:23:23.507]                           }
[13:23:23.507]                         }
[13:23:23.507]                       }
[13:23:23.507]                       invisible(muffled)
[13:23:23.507]                     }
[13:23:23.507]                     muffleCondition(cond, pattern = "^muffle")
[13:23:23.507]                   }
[13:23:23.507]                 }
[13:23:23.507]                 else {
[13:23:23.507]                   if (TRUE) {
[13:23:23.507]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:23:23.507]                     {
[13:23:23.507]                       inherits <- base::inherits
[13:23:23.507]                       invokeRestart <- base::invokeRestart
[13:23:23.507]                       is.null <- base::is.null
[13:23:23.507]                       muffled <- FALSE
[13:23:23.507]                       if (inherits(cond, "message")) {
[13:23:23.507]                         muffled <- grepl(pattern, "muffleMessage")
[13:23:23.507]                         if (muffled) 
[13:23:23.507]                           invokeRestart("muffleMessage")
[13:23:23.507]                       }
[13:23:23.507]                       else if (inherits(cond, "warning")) {
[13:23:23.507]                         muffled <- grepl(pattern, "muffleWarning")
[13:23:23.507]                         if (muffled) 
[13:23:23.507]                           invokeRestart("muffleWarning")
[13:23:23.507]                       }
[13:23:23.507]                       else if (inherits(cond, "condition")) {
[13:23:23.507]                         if (!is.null(pattern)) {
[13:23:23.507]                           computeRestarts <- base::computeRestarts
[13:23:23.507]                           grepl <- base::grepl
[13:23:23.507]                           restarts <- computeRestarts(cond)
[13:23:23.507]                           for (restart in restarts) {
[13:23:23.507]                             name <- restart$name
[13:23:23.507]                             if (is.null(name)) 
[13:23:23.507]                               next
[13:23:23.507]                             if (!grepl(pattern, name)) 
[13:23:23.507]                               next
[13:23:23.507]                             invokeRestart(restart)
[13:23:23.507]                             muffled <- TRUE
[13:23:23.507]                             break
[13:23:23.507]                           }
[13:23:23.507]                         }
[13:23:23.507]                       }
[13:23:23.507]                       invisible(muffled)
[13:23:23.507]                     }
[13:23:23.507]                     muffleCondition(cond, pattern = "^muffle")
[13:23:23.507]                   }
[13:23:23.507]                 }
[13:23:23.507]             }
[13:23:23.507]         }))
[13:23:23.507]     }, error = function(ex) {
[13:23:23.507]         base::structure(base::list(value = NULL, visible = NULL, 
[13:23:23.507]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:23:23.507]                 ...future.rng), started = ...future.startTime, 
[13:23:23.507]             finished = Sys.time(), session_uuid = NA_character_, 
[13:23:23.507]             version = "1.8"), class = "FutureResult")
[13:23:23.507]     }, finally = {
[13:23:23.507]         if (!identical(...future.workdir, getwd())) 
[13:23:23.507]             setwd(...future.workdir)
[13:23:23.507]         {
[13:23:23.507]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:23:23.507]                 ...future.oldOptions$nwarnings <- NULL
[13:23:23.507]             }
[13:23:23.507]             base::options(...future.oldOptions)
[13:23:23.507]             if (.Platform$OS.type == "windows") {
[13:23:23.507]                 old_names <- names(...future.oldEnvVars)
[13:23:23.507]                 envs <- base::Sys.getenv()
[13:23:23.507]                 names <- names(envs)
[13:23:23.507]                 common <- intersect(names, old_names)
[13:23:23.507]                 added <- setdiff(names, old_names)
[13:23:23.507]                 removed <- setdiff(old_names, names)
[13:23:23.507]                 changed <- common[...future.oldEnvVars[common] != 
[13:23:23.507]                   envs[common]]
[13:23:23.507]                 NAMES <- toupper(changed)
[13:23:23.507]                 args <- list()
[13:23:23.507]                 for (kk in seq_along(NAMES)) {
[13:23:23.507]                   name <- changed[[kk]]
[13:23:23.507]                   NAME <- NAMES[[kk]]
[13:23:23.507]                   if (name != NAME && is.element(NAME, old_names)) 
[13:23:23.507]                     next
[13:23:23.507]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:23:23.507]                 }
[13:23:23.507]                 NAMES <- toupper(added)
[13:23:23.507]                 for (kk in seq_along(NAMES)) {
[13:23:23.507]                   name <- added[[kk]]
[13:23:23.507]                   NAME <- NAMES[[kk]]
[13:23:23.507]                   if (name != NAME && is.element(NAME, old_names)) 
[13:23:23.507]                     next
[13:23:23.507]                   args[[name]] <- ""
[13:23:23.507]                 }
[13:23:23.507]                 NAMES <- toupper(removed)
[13:23:23.507]                 for (kk in seq_along(NAMES)) {
[13:23:23.507]                   name <- removed[[kk]]
[13:23:23.507]                   NAME <- NAMES[[kk]]
[13:23:23.507]                   if (name != NAME && is.element(NAME, old_names)) 
[13:23:23.507]                     next
[13:23:23.507]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:23:23.507]                 }
[13:23:23.507]                 if (length(args) > 0) 
[13:23:23.507]                   base::do.call(base::Sys.setenv, args = args)
[13:23:23.507]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:23:23.507]             }
[13:23:23.507]             else {
[13:23:23.507]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:23:23.507]             }
[13:23:23.507]             {
[13:23:23.507]                 if (base::length(...future.futureOptionsAdded) > 
[13:23:23.507]                   0L) {
[13:23:23.507]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:23:23.507]                   base::names(opts) <- ...future.futureOptionsAdded
[13:23:23.507]                   base::options(opts)
[13:23:23.507]                 }
[13:23:23.507]                 {
[13:23:23.507]                   {
[13:23:23.507]                     base::options(mc.cores = ...future.mc.cores.old)
[13:23:23.507]                     NULL
[13:23:23.507]                   }
[13:23:23.507]                   options(future.plan = NULL)
[13:23:23.507]                   if (is.na(NA_character_)) 
[13:23:23.507]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:23:23.507]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:23:23.507]                   future::plan(list(function (..., workers = availableCores(), 
[13:23:23.507]                     lazy = FALSE, rscript_libs = .libPaths(), 
[13:23:23.507]                     envir = parent.frame()) 
[13:23:23.507]                   {
[13:23:23.507]                     if (is.function(workers)) 
[13:23:23.507]                       workers <- workers()
[13:23:23.507]                     workers <- structure(as.integer(workers), 
[13:23:23.507]                       class = class(workers))
[13:23:23.507]                     stop_if_not(length(workers) == 1, is.finite(workers), 
[13:23:23.507]                       workers >= 1)
[13:23:23.507]                     if (workers == 1L && !inherits(workers, "AsIs")) {
[13:23:23.507]                       return(sequential(..., lazy = TRUE, envir = envir))
[13:23:23.507]                     }
[13:23:23.507]                     future <- MultisessionFuture(..., workers = workers, 
[13:23:23.507]                       lazy = lazy, rscript_libs = rscript_libs, 
[13:23:23.507]                       envir = envir)
[13:23:23.507]                     if (!future$lazy) 
[13:23:23.507]                       future <- run(future)
[13:23:23.507]                     invisible(future)
[13:23:23.507]                   }), .cleanup = FALSE, .init = FALSE)
[13:23:23.507]                 }
[13:23:23.507]             }
[13:23:23.507]         }
[13:23:23.507]     })
[13:23:23.507]     if (TRUE) {
[13:23:23.507]         base::sink(type = "output", split = FALSE)
[13:23:23.507]         if (TRUE) {
[13:23:23.507]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:23:23.507]         }
[13:23:23.507]         else {
[13:23:23.507]             ...future.result["stdout"] <- base::list(NULL)
[13:23:23.507]         }
[13:23:23.507]         base::close(...future.stdout)
[13:23:23.507]         ...future.stdout <- NULL
[13:23:23.507]     }
[13:23:23.507]     ...future.result$conditions <- ...future.conditions
[13:23:23.507]     ...future.result$finished <- base::Sys.time()
[13:23:23.507]     ...future.result
[13:23:23.507] }
[13:23:23.670]  - Condition #73: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:23.563] Exporting 1 global objects (160 bytes) to cluster node #1 ...
[13:23:23.671]  - Condition #74: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:23.565] Exporting ‘data’ (160 bytes) to cluster node #1 ...
[13:23:23.671]  - Condition #75: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:23.566] Exporting ‘data’ (160 bytes) to cluster node #1 ... DONE
[13:23:23.671]  - Condition #76: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:23.566] Exporting 1 global objects (160 bytes) to cluster node #1 ... DONE
[13:23:23.671]  - Condition #77: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:23.566] MultisessionFuture started
[13:23:23.671]  - Condition #78: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:23.566] - Launch lazy future ... done
[13:23:23.671]  - Condition #79: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:23.566] run() for ‘MultisessionFuture’ ... done
[13:23:23.671]  - Condition #80: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:23.567] result() for ClusterFuture ...
[13:23:23.671]  - Condition #81: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:23.567] receiveMessageFromWorker() for ClusterFuture ...
[13:23:23.672]  - Condition #82: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:23.567] - Validating connection of MultisessionFuture
[13:23:23.672]  - Condition #83: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:23.656] - received message: FutureResult
[13:23:23.672]  - Condition #84: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:23.656] - Received FutureResult
[13:23:23.672]  - Condition #85: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:23.656] - Erased future from FutureRegistry
[13:23:23.672]  - Condition #86: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:23.656] result() for ClusterFuture ...
[13:23:23.672]  - Condition #87: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:23.656] - result already collected: FutureResult
[13:23:23.672]  - Condition #88: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:23.656] result() for ClusterFuture ... done
[13:23:23.673]  - Condition #89: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:23.656] receiveMessageFromWorker() for ClusterFuture ... done
[13:23:23.673]  - Condition #90: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:23.657] result() for ClusterFuture ... done
[13:23:23.673]  - Condition #91: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:23.657] result() for ClusterFuture ...
[13:23:23.673]  - Condition #92: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:23.657] - result already collected: FutureResult
[13:23:23.673]  - Condition #93: ‘simpleMessage’, ‘message’, ‘condition’
[13:23:23.657] result() for ClusterFuture ... done
[13:23:23.673] signalConditions() ... done
- Strategy: multisession ... DONE
> 
> 
> message("*** Globals w/ non-standard evaluation (NSE) ... DONE")
*** Globals w/ non-standard evaluation (NSE) ... DONE
> 
> source("incl/end.R")
[13:23:23.674] plan(): Setting new future strategy stack:
[13:23:23.674] List of future strategies:
[13:23:23.674] 1. FutureStrategy:
[13:23:23.674]    - args: function (..., envir = parent.frame())
[13:23:23.674]    - tweaked: FALSE
[13:23:23.674]    - call: future::plan(oplan)
[13:23:23.675] plan(): nbrOfWorkers() = 1
> 
