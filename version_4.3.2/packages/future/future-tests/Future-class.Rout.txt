
R version 4.3.2 (2023-10-31) -- "Eye Holes"
Copyright (C) 2023 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> source("incl/start.R")
[16:04:26.737] plan(): Setting new future strategy stack:
[16:04:26.738] List of future strategies:
[16:04:26.738] 1. sequential:
[16:04:26.738]    - args: function (..., envir = parent.frame())
[16:04:26.738]    - tweaked: FALSE
[16:04:26.738]    - call: future::plan("sequential")
[16:04:26.751] plan(): nbrOfWorkers() = 1
> 
> message("*** Future class ...")
*** Future class ...
> 
> message("*** Future class - exception ...")
*** Future class - exception ...
> 
> f <- Future()
[16:04:26.762] getGlobalsAndPackages() ...
[16:04:26.762] 
[16:04:26.762] - globals: [0] <none>
[16:04:26.762] getGlobalsAndPackages() ... DONE
> print(f)
Future:
Label: ‘<none>’
Expression:
NULL
Lazy evaluation: FALSE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: FALSE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: d28260de-1d23-12a3-c9c3-d803e53b2452
Class: ‘Future’, ‘environment’
> 
> res <- tryCatch(value(f), error = identity)
[16:04:26.764] run() for ‘Future’ ...
[16:04:26.764] - state: ‘created’
[16:04:26.764] run() for ‘Future’ ... done
> print(res)
<simpleError: ‘future$lazy’ is not TRUE>
> stopifnot(inherits(res, "error"))
> 
> ## Invalid seed
> res <- tryCatch(f <- Future(42, seed = 1:2), error = identity)
> stopifnot(inherits(res, "error"))
> 
> ## When no packages are exported
> foo <- structure(function(...) { Future(1) }, class = "future")
> plan(foo)
[16:04:26.767] plan(): Setting new future strategy stack:
[16:04:26.767] List of future strategies:
[16:04:26.767] 1. future:
[16:04:26.767]    - args: function (...)
[16:04:26.767]    - tweaked: FALSE
[16:04:26.767]    - call: plan(foo)
[16:04:26.778] plan(): nbrOfWorkers() = Inf
> f <- Future()
[16:04:26.778] getGlobalsAndPackages() ...
[16:04:26.778] 
[16:04:26.778] - globals: [0] <none>
[16:04:26.778] getGlobalsAndPackages() ... DONE
> expr <- getExpression(f)
[16:04:26.779] Packages needed by the future expression (n = 0): <none>
[16:04:26.779] Packages needed by future strategies (n = 0): <none>
[16:04:26.780] {
[16:04:26.780]     {
[16:04:26.780]         {
[16:04:26.780]             ...future.startTime <- base::Sys.time()
[16:04:26.780]             {
[16:04:26.780]                 {
[16:04:26.780]                   {
[16:04:26.780]                     base::local({
[16:04:26.780]                       has_future <- base::requireNamespace("future", 
[16:04:26.780]                         quietly = TRUE)
[16:04:26.780]                       if (has_future) {
[16:04:26.780]                         ns <- base::getNamespace("future")
[16:04:26.780]                         version <- ns[[".package"]][["version"]]
[16:04:26.780]                         if (is.null(version)) 
[16:04:26.780]                           version <- utils::packageVersion("future")
[16:04:26.780]                       }
[16:04:26.780]                       else {
[16:04:26.780]                         version <- NULL
[16:04:26.780]                       }
[16:04:26.780]                       if (!has_future || version < "1.8.0") {
[16:04:26.780]                         info <- base::c(r_version = base::gsub("R version ", 
[16:04:26.780]                           "", base::R.version$version.string), 
[16:04:26.780]                           platform = base::sprintf("%s (%s-bit)", 
[16:04:26.780]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:04:26.780]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[16:04:26.780]                             "release", "version")], collapse = " "), 
[16:04:26.780]                           hostname = base::Sys.info()[["nodename"]])
[16:04:26.780]                         info <- base::sprintf("%s: %s", base::names(info), 
[16:04:26.780]                           info)
[16:04:26.780]                         info <- base::paste(info, collapse = "; ")
[16:04:26.780]                         if (!has_future) {
[16:04:26.780]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:04:26.780]                             info)
[16:04:26.780]                         }
[16:04:26.780]                         else {
[16:04:26.780]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:04:26.780]                             info, version)
[16:04:26.780]                         }
[16:04:26.780]                         base::stop(msg)
[16:04:26.780]                       }
[16:04:26.780]                     })
[16:04:26.780]                   }
[16:04:26.780]                   options(future.plan = NULL)
[16:04:26.780]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:04:26.780]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:04:26.780]                 }
[16:04:26.780]                 ...future.workdir <- getwd()
[16:04:26.780]             }
[16:04:26.780]             ...future.oldOptions <- base::as.list(base::.Options)
[16:04:26.780]             ...future.oldEnvVars <- base::Sys.getenv()
[16:04:26.780]         }
[16:04:26.780]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:04:26.780]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:04:26.780]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:04:26.780]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:04:26.780]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:04:26.780]             future.stdout.windows.reencode = NULL, width = 80L)
[16:04:26.780]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:04:26.780]             base::names(...future.oldOptions))
[16:04:26.780]     }
[16:04:26.780]     if (FALSE) {
[16:04:26.780]     }
[16:04:26.780]     else {
[16:04:26.780]         if (TRUE) {
[16:04:26.780]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:04:26.780]                 open = "w")
[16:04:26.780]         }
[16:04:26.780]         else {
[16:04:26.780]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:04:26.780]                 windows = "NUL", "/dev/null"), open = "w")
[16:04:26.780]         }
[16:04:26.780]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:04:26.780]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:04:26.780]             base::sink(type = "output", split = FALSE)
[16:04:26.780]             base::close(...future.stdout)
[16:04:26.780]         }, add = TRUE)
[16:04:26.780]     }
[16:04:26.780]     ...future.frame <- base::sys.nframe()
[16:04:26.780]     ...future.conditions <- base::list()
[16:04:26.780]     ...future.rng <- base::globalenv()$.Random.seed
[16:04:26.780]     if (FALSE) {
[16:04:26.780]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:04:26.780]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:04:26.780]     }
[16:04:26.780]     ...future.result <- base::tryCatch({
[16:04:26.780]         base::withCallingHandlers({
[16:04:26.780]             ...future.value <- base::withVisible(base::local(NULL))
[16:04:26.780]             future::FutureResult(value = ...future.value$value, 
[16:04:26.780]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:04:26.780]                   ...future.rng), globalenv = if (FALSE) 
[16:04:26.780]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:04:26.780]                     ...future.globalenv.names))
[16:04:26.780]                 else NULL, started = ...future.startTime, version = "1.8")
[16:04:26.780]         }, condition = base::local({
[16:04:26.780]             c <- base::c
[16:04:26.780]             inherits <- base::inherits
[16:04:26.780]             invokeRestart <- base::invokeRestart
[16:04:26.780]             length <- base::length
[16:04:26.780]             list <- base::list
[16:04:26.780]             seq.int <- base::seq.int
[16:04:26.780]             signalCondition <- base::signalCondition
[16:04:26.780]             sys.calls <- base::sys.calls
[16:04:26.780]             `[[` <- base::`[[`
[16:04:26.780]             `+` <- base::`+`
[16:04:26.780]             `<<-` <- base::`<<-`
[16:04:26.780]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:04:26.780]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:04:26.780]                   3L)]
[16:04:26.780]             }
[16:04:26.780]             function(cond) {
[16:04:26.780]                 is_error <- inherits(cond, "error")
[16:04:26.780]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:04:26.780]                   NULL)
[16:04:26.780]                 if (is_error) {
[16:04:26.780]                   sessionInformation <- function() {
[16:04:26.780]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:04:26.780]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:04:26.780]                       search = base::search(), system = base::Sys.info())
[16:04:26.780]                   }
[16:04:26.780]                   ...future.conditions[[length(...future.conditions) + 
[16:04:26.780]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:04:26.780]                     cond$call), session = sessionInformation(), 
[16:04:26.780]                     timestamp = base::Sys.time(), signaled = 0L)
[16:04:26.780]                   signalCondition(cond)
[16:04:26.780]                 }
[16:04:26.780]                 else if (!ignore && TRUE && inherits(cond, "condition")) {
[16:04:26.780]                   signal <- FALSE && inherits(cond, character(0))
[16:04:26.780]                   ...future.conditions[[length(...future.conditions) + 
[16:04:26.780]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:04:26.780]                   if (FALSE && !signal) {
[16:04:26.780]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:04:26.780]                     {
[16:04:26.780]                       inherits <- base::inherits
[16:04:26.780]                       invokeRestart <- base::invokeRestart
[16:04:26.780]                       is.null <- base::is.null
[16:04:26.780]                       muffled <- FALSE
[16:04:26.780]                       if (inherits(cond, "message")) {
[16:04:26.780]                         muffled <- grepl(pattern, "muffleMessage")
[16:04:26.780]                         if (muffled) 
[16:04:26.780]                           invokeRestart("muffleMessage")
[16:04:26.780]                       }
[16:04:26.780]                       else if (inherits(cond, "warning")) {
[16:04:26.780]                         muffled <- grepl(pattern, "muffleWarning")
[16:04:26.780]                         if (muffled) 
[16:04:26.780]                           invokeRestart("muffleWarning")
[16:04:26.780]                       }
[16:04:26.780]                       else if (inherits(cond, "condition")) {
[16:04:26.780]                         if (!is.null(pattern)) {
[16:04:26.780]                           computeRestarts <- base::computeRestarts
[16:04:26.780]                           grepl <- base::grepl
[16:04:26.780]                           restarts <- computeRestarts(cond)
[16:04:26.780]                           for (restart in restarts) {
[16:04:26.780]                             name <- restart$name
[16:04:26.780]                             if (is.null(name)) 
[16:04:26.780]                               next
[16:04:26.780]                             if (!grepl(pattern, name)) 
[16:04:26.780]                               next
[16:04:26.780]                             invokeRestart(restart)
[16:04:26.780]                             muffled <- TRUE
[16:04:26.780]                             break
[16:04:26.780]                           }
[16:04:26.780]                         }
[16:04:26.780]                       }
[16:04:26.780]                       invisible(muffled)
[16:04:26.780]                     }
[16:04:26.780]                     muffleCondition(cond, pattern = "^muffle")
[16:04:26.780]                   }
[16:04:26.780]                 }
[16:04:26.780]                 else {
[16:04:26.780]                   if (TRUE) {
[16:04:26.780]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:04:26.780]                     {
[16:04:26.780]                       inherits <- base::inherits
[16:04:26.780]                       invokeRestart <- base::invokeRestart
[16:04:26.780]                       is.null <- base::is.null
[16:04:26.780]                       muffled <- FALSE
[16:04:26.780]                       if (inherits(cond, "message")) {
[16:04:26.780]                         muffled <- grepl(pattern, "muffleMessage")
[16:04:26.780]                         if (muffled) 
[16:04:26.780]                           invokeRestart("muffleMessage")
[16:04:26.780]                       }
[16:04:26.780]                       else if (inherits(cond, "warning")) {
[16:04:26.780]                         muffled <- grepl(pattern, "muffleWarning")
[16:04:26.780]                         if (muffled) 
[16:04:26.780]                           invokeRestart("muffleWarning")
[16:04:26.780]                       }
[16:04:26.780]                       else if (inherits(cond, "condition")) {
[16:04:26.780]                         if (!is.null(pattern)) {
[16:04:26.780]                           computeRestarts <- base::computeRestarts
[16:04:26.780]                           grepl <- base::grepl
[16:04:26.780]                           restarts <- computeRestarts(cond)
[16:04:26.780]                           for (restart in restarts) {
[16:04:26.780]                             name <- restart$name
[16:04:26.780]                             if (is.null(name)) 
[16:04:26.780]                               next
[16:04:26.780]                             if (!grepl(pattern, name)) 
[16:04:26.780]                               next
[16:04:26.780]                             invokeRestart(restart)
[16:04:26.780]                             muffled <- TRUE
[16:04:26.780]                             break
[16:04:26.780]                           }
[16:04:26.780]                         }
[16:04:26.780]                       }
[16:04:26.780]                       invisible(muffled)
[16:04:26.780]                     }
[16:04:26.780]                     muffleCondition(cond, pattern = "^muffle")
[16:04:26.780]                   }
[16:04:26.780]                 }
[16:04:26.780]             }
[16:04:26.780]         }))
[16:04:26.780]     }, error = function(ex) {
[16:04:26.780]         base::structure(base::list(value = NULL, visible = NULL, 
[16:04:26.780]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:04:26.780]                 ...future.rng), started = ...future.startTime, 
[16:04:26.780]             finished = Sys.time(), session_uuid = NA_character_, 
[16:04:26.780]             version = "1.8"), class = "FutureResult")
[16:04:26.780]     }, finally = {
[16:04:26.780]         if (!identical(...future.workdir, getwd())) 
[16:04:26.780]             setwd(...future.workdir)
[16:04:26.780]         {
[16:04:26.780]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:04:26.780]                 ...future.oldOptions$nwarnings <- NULL
[16:04:26.780]             }
[16:04:26.780]             base::options(...future.oldOptions)
[16:04:26.780]             if (.Platform$OS.type == "windows") {
[16:04:26.780]                 old_names <- names(...future.oldEnvVars)
[16:04:26.780]                 envs <- base::Sys.getenv()
[16:04:26.780]                 names <- names(envs)
[16:04:26.780]                 common <- intersect(names, old_names)
[16:04:26.780]                 added <- setdiff(names, old_names)
[16:04:26.780]                 removed <- setdiff(old_names, names)
[16:04:26.780]                 changed <- common[...future.oldEnvVars[common] != 
[16:04:26.780]                   envs[common]]
[16:04:26.780]                 NAMES <- toupper(changed)
[16:04:26.780]                 args <- list()
[16:04:26.780]                 for (kk in seq_along(NAMES)) {
[16:04:26.780]                   name <- changed[[kk]]
[16:04:26.780]                   NAME <- NAMES[[kk]]
[16:04:26.780]                   if (name != NAME && is.element(NAME, old_names)) 
[16:04:26.780]                     next
[16:04:26.780]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:04:26.780]                 }
[16:04:26.780]                 NAMES <- toupper(added)
[16:04:26.780]                 for (kk in seq_along(NAMES)) {
[16:04:26.780]                   name <- added[[kk]]
[16:04:26.780]                   NAME <- NAMES[[kk]]
[16:04:26.780]                   if (name != NAME && is.element(NAME, old_names)) 
[16:04:26.780]                     next
[16:04:26.780]                   args[[name]] <- ""
[16:04:26.780]                 }
[16:04:26.780]                 NAMES <- toupper(removed)
[16:04:26.780]                 for (kk in seq_along(NAMES)) {
[16:04:26.780]                   name <- removed[[kk]]
[16:04:26.780]                   NAME <- NAMES[[kk]]
[16:04:26.780]                   if (name != NAME && is.element(NAME, old_names)) 
[16:04:26.780]                     next
[16:04:26.780]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:04:26.780]                 }
[16:04:26.780]                 if (length(args) > 0) 
[16:04:26.780]                   base::do.call(base::Sys.setenv, args = args)
[16:04:26.780]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:04:26.780]             }
[16:04:26.780]             else {
[16:04:26.780]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:04:26.780]             }
[16:04:26.780]             {
[16:04:26.780]                 if (base::length(...future.futureOptionsAdded) > 
[16:04:26.780]                   0L) {
[16:04:26.780]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:04:26.780]                   base::names(opts) <- ...future.futureOptionsAdded
[16:04:26.780]                   base::options(opts)
[16:04:26.780]                 }
[16:04:26.780]                 {
[16:04:26.780]                   NULL
[16:04:26.780]                   options(future.plan = NULL)
[16:04:26.780]                   if (is.na(NA_character_)) 
[16:04:26.780]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:04:26.780]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:04:26.780]                   future::plan(list(function (...) 
[16:04:26.780]                   {
[16:04:26.780]                     Future(1)
[16:04:26.780]                   }), .cleanup = FALSE, .init = FALSE)
[16:04:26.780]                 }
[16:04:26.780]             }
[16:04:26.780]         }
[16:04:26.780]     })
[16:04:26.780]     if (TRUE) {
[16:04:26.780]         base::sink(type = "output", split = FALSE)
[16:04:26.780]         if (TRUE) {
[16:04:26.780]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:04:26.780]         }
[16:04:26.780]         else {
[16:04:26.780]             ...future.result["stdout"] <- base::list(NULL)
[16:04:26.780]         }
[16:04:26.780]         base::close(...future.stdout)
[16:04:26.780]         ...future.stdout <- NULL
[16:04:26.780]     }
[16:04:26.780]     ...future.result$conditions <- ...future.conditions
[16:04:26.780]     ...future.result$finished <- base::Sys.time()
[16:04:26.780]     ...future.result
[16:04:26.780] }
> print(expr)
{
    {
        {
            ...future.startTime <- base::Sys.time()
            {
                {
                  {
                    base::local({
                      has_future <- base::requireNamespace("future", 
                        quietly = TRUE)
                      if (has_future) {
                        ns <- base::getNamespace("future")
                        version <- ns[[".package"]][["version"]]
                        if (is.null(version)) 
                          version <- utils::packageVersion("future")
                      }
                      else {
                        version <- NULL
                      }
                      if (!has_future || version < "1.8.0") {
                        info <- base::c(r_version = base::gsub("R version ", 
                          "", base::R.version$version.string), 
                          platform = base::sprintf("%s (%s-bit)", 
                            base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
                          os = base::paste(base::Sys.info()[base::c("sysname", 
                            "release", "version")], collapse = " "), 
                          hostname = base::Sys.info()[["nodename"]])
                        info <- base::sprintf("%s: %s", base::names(info), 
                          info)
                        info <- base::paste(info, collapse = "; ")
                        if (!has_future) {
                          msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
                            info)
                        }
                        else {
                          msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
                            info, version)
                        }
                        base::stop(msg)
                      }
                    })
                  }
                  options(future.plan = NULL)
                  Sys.unsetenv("R_FUTURE_PLAN")
                  future::plan("default", .cleanup = FALSE, .init = FALSE)
                }
                ...future.workdir <- getwd()
            }
            ...future.oldOptions <- base::as.list(base::.Options)
            ...future.oldEnvVars <- base::Sys.getenv()
        }
        base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
            future.globals.maxSize = NULL, future.globals.method = NULL, 
            future.globals.onMissing = NULL, future.globals.onReference = NULL, 
            future.globals.resolve = NULL, future.resolve.recursive = NULL, 
            future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
            future.stdout.windows.reencode = NULL, width = 80L)
        ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
            base::names(...future.oldOptions))
    }
    if (FALSE) {
    }
    else {
        if (TRUE) {
            ...future.stdout <- base::rawConnection(base::raw(0L), 
                open = "w")
        }
        else {
            ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
                windows = "NUL", "/dev/null"), open = "w")
        }
        base::sink(...future.stdout, type = "output", split = FALSE)
        base::on.exit(if (!base::is.null(...future.stdout)) {
            base::sink(type = "output", split = FALSE)
            base::close(...future.stdout)
        }, add = TRUE)
    }
    ...future.frame <- base::sys.nframe()
    ...future.conditions <- base::list()
    ...future.rng <- base::globalenv()$.Random.seed
    if (FALSE) {
        ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
            "...future.value", "...future.globalenv.names", ".Random.seed")
    }
    ...future.result <- base::tryCatch({
        base::withCallingHandlers({
            ...future.value <- base::withVisible(base::local(NULL))
            future::FutureResult(value = ...future.value$value, 
                visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
                  ...future.rng), globalenv = if (FALSE) 
                  list(added = base::setdiff(base::names(base::.GlobalEnv), 
                    ...future.globalenv.names))
                else NULL, started = ...future.startTime, version = "1.8")
        }, condition = base::local({
            c <- base::c
            inherits <- base::inherits
            invokeRestart <- base::invokeRestart
            length <- base::length
            list <- base::list
            seq.int <- base::seq.int
            signalCondition <- base::signalCondition
            sys.calls <- base::sys.calls
            `[[` <- base::`[[`
            `+` <- base::`+`
            `<<-` <- base::`<<-`
            sysCalls <- function(calls = sys.calls(), from = 1L) {
                calls[seq.int(from = from + 12L, to = length(calls) - 
                  3L)]
            }
            function(cond) {
                is_error <- inherits(cond, "error")
                ignore <- !is_error && !is.null(NULL) && inherits(cond, 
                  NULL)
                if (is_error) {
                  sessionInformation <- function() {
                    list(r = base::R.Version(), locale = base::Sys.getlocale(), 
                      rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
                      search = base::search(), system = base::Sys.info())
                  }
                  ...future.conditions[[length(...future.conditions) + 
                    1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
                    cond$call), session = sessionInformation(), 
                    timestamp = base::Sys.time(), signaled = 0L)
                  signalCondition(cond)
                }
                else if (!ignore && TRUE && inherits(cond, "condition")) {
                  signal <- FALSE && inherits(cond, character(0))
                  ...future.conditions[[length(...future.conditions) + 
                    1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
                  if (FALSE && !signal) {
                    muffleCondition <- function (cond, pattern = "^muffle") 
                    {
                      inherits <- base::inherits
                      invokeRestart <- base::invokeRestart
                      is.null <- base::is.null
                      muffled <- FALSE
                      if (inherits(cond, "message")) {
                        muffled <- grepl(pattern, "muffleMessage")
                        if (muffled) 
                          invokeRestart("muffleMessage")
                      }
                      else if (inherits(cond, "warning")) {
                        muffled <- grepl(pattern, "muffleWarning")
                        if (muffled) 
                          invokeRestart("muffleWarning")
                      }
                      else if (inherits(cond, "condition")) {
                        if (!is.null(pattern)) {
                          computeRestarts <- base::computeRestarts
                          grepl <- base::grepl
                          restarts <- computeRestarts(cond)
                          for (restart in restarts) {
                            name <- restart$name
                            if (is.null(name)) 
                              next
                            if (!grepl(pattern, name)) 
                              next
                            invokeRestart(restart)
                            muffled <- TRUE
                            break
                          }
                        }
                      }
                      invisible(muffled)
                    }
                    muffleCondition(cond, pattern = "^muffle")
                  }
                }
                else {
                  if (TRUE) {
                    muffleCondition <- function (cond, pattern = "^muffle") 
                    {
                      inherits <- base::inherits
                      invokeRestart <- base::invokeRestart
                      is.null <- base::is.null
                      muffled <- FALSE
                      if (inherits(cond, "message")) {
                        muffled <- grepl(pattern, "muffleMessage")
                        if (muffled) 
                          invokeRestart("muffleMessage")
                      }
                      else if (inherits(cond, "warning")) {
                        muffled <- grepl(pattern, "muffleWarning")
                        if (muffled) 
                          invokeRestart("muffleWarning")
                      }
                      else if (inherits(cond, "condition")) {
                        if (!is.null(pattern)) {
                          computeRestarts <- base::computeRestarts
                          grepl <- base::grepl
                          restarts <- computeRestarts(cond)
                          for (restart in restarts) {
                            name <- restart$name
                            if (is.null(name)) 
                              next
                            if (!grepl(pattern, name)) 
                              next
                            invokeRestart(restart)
                            muffled <- TRUE
                            break
                          }
                        }
                      }
                      invisible(muffled)
                    }
                    muffleCondition(cond, pattern = "^muffle")
                  }
                }
            }
        }))
    }, error = function(ex) {
        base::structure(base::list(value = NULL, visible = NULL, 
            conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
                ...future.rng), started = ...future.startTime, 
            finished = Sys.time(), session_uuid = NA_character_, 
            version = "1.8"), class = "FutureResult")
    }, finally = {
        if (!identical(...future.workdir, getwd())) 
            setwd(...future.workdir)
        {
            if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
                ...future.oldOptions$nwarnings <- NULL
            }
            base::options(...future.oldOptions)
            if (.Platform$OS.type == "windows") {
                old_names <- names(...future.oldEnvVars)
                envs <- base::Sys.getenv()
                names <- names(envs)
                common <- intersect(names, old_names)
                added <- setdiff(names, old_names)
                removed <- setdiff(old_names, names)
                changed <- common[...future.oldEnvVars[common] != 
                  envs[common]]
                NAMES <- toupper(changed)
                args <- list()
                for (kk in seq_along(NAMES)) {
                  name <- changed[[kk]]
                  NAME <- NAMES[[kk]]
                  if (name != NAME && is.element(NAME, old_names)) 
                    next
                  args[[name]] <- ...future.oldEnvVars[[name]]
                }
                NAMES <- toupper(added)
                for (kk in seq_along(NAMES)) {
                  name <- added[[kk]]
                  NAME <- NAMES[[kk]]
                  if (name != NAME && is.element(NAME, old_names)) 
                    next
                  args[[name]] <- ""
                }
                NAMES <- toupper(removed)
                for (kk in seq_along(NAMES)) {
                  name <- removed[[kk]]
                  NAME <- NAMES[[kk]]
                  if (name != NAME && is.element(NAME, old_names)) 
                    next
                  args[[name]] <- ...future.oldEnvVars[[name]]
                }
                if (length(args) > 0) 
                  base::do.call(base::Sys.setenv, args = args)
                args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
            }
            else {
                base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
            }
            {
                if (base::length(...future.futureOptionsAdded) > 
                  0L) {
                  opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
                  base::names(opts) <- ...future.futureOptionsAdded
                  base::options(opts)
                }
                {
                  NULL
                  options(future.plan = NULL)
                  if (is.na(NA_character_)) 
                    Sys.unsetenv("R_FUTURE_PLAN")
                  else Sys.setenv(R_FUTURE_PLAN = NA_character_)
                  future::plan(list(function (...) 
                  {
                    Future(1)
                  }), .cleanup = FALSE, .init = FALSE)
                }
            }
        }
    })
    if (TRUE) {
        base::sink(type = "output", split = FALSE)
        if (TRUE) {
            ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
        }
        else {
            ...future.result["stdout"] <- base::list(NULL)
        }
        base::close(...future.stdout)
        ...future.stdout <- NULL
    }
    ...future.result$conditions <- ...future.conditions
    ...future.result$finished <- base::Sys.time()
    ...future.result
}
> stopifnot(is.call(expr))
> 
> clazzes <- list(
+   sequential = SequentialFuture,
+   multisession = function(...) MultisessionFuture(..., workers = 2L),
+   sequential = SequentialFuture
+ )
> if (supportsMulticore()) {
+   clazzes$multicore = function(...) MulticoreFuture(..., workers = 2L)
+ }
> 
> for (clazz in clazzes) {
+   ## Calling run() more than once
+   f <- clazz({ 42L })
+   print(f)
+   run(f)
+   res <- tryCatch(run(f), error = identity)
+   stopifnot(inherits(res, "error"))
+   v <- value(f)
+   print(v)
+   stopifnot(v == 42L)
+ 
+   ## Call value() without run()
+   f <- clazz({ 42L })
+   v <- value(f)
+   print(v)
+   stopifnot(v == 42L)
+ }
[16:04:26.792] getGlobalsAndPackages() ...
[16:04:26.792] Searching for globals...
[16:04:26.795] - globals found: [1] ‘{’
[16:04:26.795] Searching for globals ... DONE
[16:04:26.795] Resolving globals: FALSE
[16:04:26.796] 
[16:04:26.796] 
[16:04:26.796] getGlobalsAndPackages() ... DONE
SequentialFuture:
Label: ‘<none>’
Expression:
{
    42L
}
Lazy evaluation: FALSE
Asynchronous evaluation: FALSE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: FALSE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: d28260de-1d23-12a3-c9c3-d803e53b2452
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[16:04:26.797] Packages needed by the future expression (n = 0): <none>
[16:04:26.797] Packages needed by future strategies (n = 0): <none>
[16:04:26.798] {
[16:04:26.798]     {
[16:04:26.798]         {
[16:04:26.798]             ...future.startTime <- base::Sys.time()
[16:04:26.798]             {
[16:04:26.798]                 {
[16:04:26.798]                   {
[16:04:26.798]                     base::local({
[16:04:26.798]                       has_future <- base::requireNamespace("future", 
[16:04:26.798]                         quietly = TRUE)
[16:04:26.798]                       if (has_future) {
[16:04:26.798]                         ns <- base::getNamespace("future")
[16:04:26.798]                         version <- ns[[".package"]][["version"]]
[16:04:26.798]                         if (is.null(version)) 
[16:04:26.798]                           version <- utils::packageVersion("future")
[16:04:26.798]                       }
[16:04:26.798]                       else {
[16:04:26.798]                         version <- NULL
[16:04:26.798]                       }
[16:04:26.798]                       if (!has_future || version < "1.8.0") {
[16:04:26.798]                         info <- base::c(r_version = base::gsub("R version ", 
[16:04:26.798]                           "", base::R.version$version.string), 
[16:04:26.798]                           platform = base::sprintf("%s (%s-bit)", 
[16:04:26.798]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:04:26.798]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[16:04:26.798]                             "release", "version")], collapse = " "), 
[16:04:26.798]                           hostname = base::Sys.info()[["nodename"]])
[16:04:26.798]                         info <- base::sprintf("%s: %s", base::names(info), 
[16:04:26.798]                           info)
[16:04:26.798]                         info <- base::paste(info, collapse = "; ")
[16:04:26.798]                         if (!has_future) {
[16:04:26.798]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:04:26.798]                             info)
[16:04:26.798]                         }
[16:04:26.798]                         else {
[16:04:26.798]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:04:26.798]                             info, version)
[16:04:26.798]                         }
[16:04:26.798]                         base::stop(msg)
[16:04:26.798]                       }
[16:04:26.798]                     })
[16:04:26.798]                   }
[16:04:26.798]                   options(future.plan = NULL)
[16:04:26.798]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:04:26.798]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:04:26.798]                 }
[16:04:26.798]                 ...future.workdir <- getwd()
[16:04:26.798]             }
[16:04:26.798]             ...future.oldOptions <- base::as.list(base::.Options)
[16:04:26.798]             ...future.oldEnvVars <- base::Sys.getenv()
[16:04:26.798]         }
[16:04:26.798]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:04:26.798]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:04:26.798]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:04:26.798]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:04:26.798]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:04:26.798]             future.stdout.windows.reencode = NULL, width = 80L)
[16:04:26.798]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:04:26.798]             base::names(...future.oldOptions))
[16:04:26.798]     }
[16:04:26.798]     if (FALSE) {
[16:04:26.798]     }
[16:04:26.798]     else {
[16:04:26.798]         if (TRUE) {
[16:04:26.798]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:04:26.798]                 open = "w")
[16:04:26.798]         }
[16:04:26.798]         else {
[16:04:26.798]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:04:26.798]                 windows = "NUL", "/dev/null"), open = "w")
[16:04:26.798]         }
[16:04:26.798]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:04:26.798]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:04:26.798]             base::sink(type = "output", split = FALSE)
[16:04:26.798]             base::close(...future.stdout)
[16:04:26.798]         }, add = TRUE)
[16:04:26.798]     }
[16:04:26.798]     ...future.frame <- base::sys.nframe()
[16:04:26.798]     ...future.conditions <- base::list()
[16:04:26.798]     ...future.rng <- base::globalenv()$.Random.seed
[16:04:26.798]     if (FALSE) {
[16:04:26.798]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:04:26.798]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:04:26.798]     }
[16:04:26.798]     ...future.result <- base::tryCatch({
[16:04:26.798]         base::withCallingHandlers({
[16:04:26.798]             ...future.value <- base::withVisible(base::local({
[16:04:26.798]                 42L
[16:04:26.798]             }))
[16:04:26.798]             future::FutureResult(value = ...future.value$value, 
[16:04:26.798]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:04:26.798]                   ...future.rng), globalenv = if (FALSE) 
[16:04:26.798]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:04:26.798]                     ...future.globalenv.names))
[16:04:26.798]                 else NULL, started = ...future.startTime, version = "1.8")
[16:04:26.798]         }, condition = base::local({
[16:04:26.798]             c <- base::c
[16:04:26.798]             inherits <- base::inherits
[16:04:26.798]             invokeRestart <- base::invokeRestart
[16:04:26.798]             length <- base::length
[16:04:26.798]             list <- base::list
[16:04:26.798]             seq.int <- base::seq.int
[16:04:26.798]             signalCondition <- base::signalCondition
[16:04:26.798]             sys.calls <- base::sys.calls
[16:04:26.798]             `[[` <- base::`[[`
[16:04:26.798]             `+` <- base::`+`
[16:04:26.798]             `<<-` <- base::`<<-`
[16:04:26.798]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:04:26.798]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:04:26.798]                   3L)]
[16:04:26.798]             }
[16:04:26.798]             function(cond) {
[16:04:26.798]                 is_error <- inherits(cond, "error")
[16:04:26.798]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:04:26.798]                   NULL)
[16:04:26.798]                 if (is_error) {
[16:04:26.798]                   sessionInformation <- function() {
[16:04:26.798]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:04:26.798]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:04:26.798]                       search = base::search(), system = base::Sys.info())
[16:04:26.798]                   }
[16:04:26.798]                   ...future.conditions[[length(...future.conditions) + 
[16:04:26.798]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:04:26.798]                     cond$call), session = sessionInformation(), 
[16:04:26.798]                     timestamp = base::Sys.time(), signaled = 0L)
[16:04:26.798]                   signalCondition(cond)
[16:04:26.798]                 }
[16:04:26.798]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:04:26.798]                 "immediateCondition"))) {
[16:04:26.798]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:04:26.798]                   ...future.conditions[[length(...future.conditions) + 
[16:04:26.798]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:04:26.798]                   if (TRUE && !signal) {
[16:04:26.798]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:04:26.798]                     {
[16:04:26.798]                       inherits <- base::inherits
[16:04:26.798]                       invokeRestart <- base::invokeRestart
[16:04:26.798]                       is.null <- base::is.null
[16:04:26.798]                       muffled <- FALSE
[16:04:26.798]                       if (inherits(cond, "message")) {
[16:04:26.798]                         muffled <- grepl(pattern, "muffleMessage")
[16:04:26.798]                         if (muffled) 
[16:04:26.798]                           invokeRestart("muffleMessage")
[16:04:26.798]                       }
[16:04:26.798]                       else if (inherits(cond, "warning")) {
[16:04:26.798]                         muffled <- grepl(pattern, "muffleWarning")
[16:04:26.798]                         if (muffled) 
[16:04:26.798]                           invokeRestart("muffleWarning")
[16:04:26.798]                       }
[16:04:26.798]                       else if (inherits(cond, "condition")) {
[16:04:26.798]                         if (!is.null(pattern)) {
[16:04:26.798]                           computeRestarts <- base::computeRestarts
[16:04:26.798]                           grepl <- base::grepl
[16:04:26.798]                           restarts <- computeRestarts(cond)
[16:04:26.798]                           for (restart in restarts) {
[16:04:26.798]                             name <- restart$name
[16:04:26.798]                             if (is.null(name)) 
[16:04:26.798]                               next
[16:04:26.798]                             if (!grepl(pattern, name)) 
[16:04:26.798]                               next
[16:04:26.798]                             invokeRestart(restart)
[16:04:26.798]                             muffled <- TRUE
[16:04:26.798]                             break
[16:04:26.798]                           }
[16:04:26.798]                         }
[16:04:26.798]                       }
[16:04:26.798]                       invisible(muffled)
[16:04:26.798]                     }
[16:04:26.798]                     muffleCondition(cond, pattern = "^muffle")
[16:04:26.798]                   }
[16:04:26.798]                 }
[16:04:26.798]                 else {
[16:04:26.798]                   if (TRUE) {
[16:04:26.798]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:04:26.798]                     {
[16:04:26.798]                       inherits <- base::inherits
[16:04:26.798]                       invokeRestart <- base::invokeRestart
[16:04:26.798]                       is.null <- base::is.null
[16:04:26.798]                       muffled <- FALSE
[16:04:26.798]                       if (inherits(cond, "message")) {
[16:04:26.798]                         muffled <- grepl(pattern, "muffleMessage")
[16:04:26.798]                         if (muffled) 
[16:04:26.798]                           invokeRestart("muffleMessage")
[16:04:26.798]                       }
[16:04:26.798]                       else if (inherits(cond, "warning")) {
[16:04:26.798]                         muffled <- grepl(pattern, "muffleWarning")
[16:04:26.798]                         if (muffled) 
[16:04:26.798]                           invokeRestart("muffleWarning")
[16:04:26.798]                       }
[16:04:26.798]                       else if (inherits(cond, "condition")) {
[16:04:26.798]                         if (!is.null(pattern)) {
[16:04:26.798]                           computeRestarts <- base::computeRestarts
[16:04:26.798]                           grepl <- base::grepl
[16:04:26.798]                           restarts <- computeRestarts(cond)
[16:04:26.798]                           for (restart in restarts) {
[16:04:26.798]                             name <- restart$name
[16:04:26.798]                             if (is.null(name)) 
[16:04:26.798]                               next
[16:04:26.798]                             if (!grepl(pattern, name)) 
[16:04:26.798]                               next
[16:04:26.798]                             invokeRestart(restart)
[16:04:26.798]                             muffled <- TRUE
[16:04:26.798]                             break
[16:04:26.798]                           }
[16:04:26.798]                         }
[16:04:26.798]                       }
[16:04:26.798]                       invisible(muffled)
[16:04:26.798]                     }
[16:04:26.798]                     muffleCondition(cond, pattern = "^muffle")
[16:04:26.798]                   }
[16:04:26.798]                 }
[16:04:26.798]             }
[16:04:26.798]         }))
[16:04:26.798]     }, error = function(ex) {
[16:04:26.798]         base::structure(base::list(value = NULL, visible = NULL, 
[16:04:26.798]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:04:26.798]                 ...future.rng), started = ...future.startTime, 
[16:04:26.798]             finished = Sys.time(), session_uuid = NA_character_, 
[16:04:26.798]             version = "1.8"), class = "FutureResult")
[16:04:26.798]     }, finally = {
[16:04:26.798]         if (!identical(...future.workdir, getwd())) 
[16:04:26.798]             setwd(...future.workdir)
[16:04:26.798]         {
[16:04:26.798]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:04:26.798]                 ...future.oldOptions$nwarnings <- NULL
[16:04:26.798]             }
[16:04:26.798]             base::options(...future.oldOptions)
[16:04:26.798]             if (.Platform$OS.type == "windows") {
[16:04:26.798]                 old_names <- names(...future.oldEnvVars)
[16:04:26.798]                 envs <- base::Sys.getenv()
[16:04:26.798]                 names <- names(envs)
[16:04:26.798]                 common <- intersect(names, old_names)
[16:04:26.798]                 added <- setdiff(names, old_names)
[16:04:26.798]                 removed <- setdiff(old_names, names)
[16:04:26.798]                 changed <- common[...future.oldEnvVars[common] != 
[16:04:26.798]                   envs[common]]
[16:04:26.798]                 NAMES <- toupper(changed)
[16:04:26.798]                 args <- list()
[16:04:26.798]                 for (kk in seq_along(NAMES)) {
[16:04:26.798]                   name <- changed[[kk]]
[16:04:26.798]                   NAME <- NAMES[[kk]]
[16:04:26.798]                   if (name != NAME && is.element(NAME, old_names)) 
[16:04:26.798]                     next
[16:04:26.798]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:04:26.798]                 }
[16:04:26.798]                 NAMES <- toupper(added)
[16:04:26.798]                 for (kk in seq_along(NAMES)) {
[16:04:26.798]                   name <- added[[kk]]
[16:04:26.798]                   NAME <- NAMES[[kk]]
[16:04:26.798]                   if (name != NAME && is.element(NAME, old_names)) 
[16:04:26.798]                     next
[16:04:26.798]                   args[[name]] <- ""
[16:04:26.798]                 }
[16:04:26.798]                 NAMES <- toupper(removed)
[16:04:26.798]                 for (kk in seq_along(NAMES)) {
[16:04:26.798]                   name <- removed[[kk]]
[16:04:26.798]                   NAME <- NAMES[[kk]]
[16:04:26.798]                   if (name != NAME && is.element(NAME, old_names)) 
[16:04:26.798]                     next
[16:04:26.798]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:04:26.798]                 }
[16:04:26.798]                 if (length(args) > 0) 
[16:04:26.798]                   base::do.call(base::Sys.setenv, args = args)
[16:04:26.798]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:04:26.798]             }
[16:04:26.798]             else {
[16:04:26.798]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:04:26.798]             }
[16:04:26.798]             {
[16:04:26.798]                 if (base::length(...future.futureOptionsAdded) > 
[16:04:26.798]                   0L) {
[16:04:26.798]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:04:26.798]                   base::names(opts) <- ...future.futureOptionsAdded
[16:04:26.798]                   base::options(opts)
[16:04:26.798]                 }
[16:04:26.798]                 {
[16:04:26.798]                   {
[16:04:26.798]                     NULL
[16:04:26.798]                     RNGkind("Mersenne-Twister")
[16:04:26.798]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[16:04:26.798]                       inherits = FALSE)
[16:04:26.798]                   }
[16:04:26.798]                   options(future.plan = NULL)
[16:04:26.798]                   if (is.na(NA_character_)) 
[16:04:26.798]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:04:26.798]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:04:26.798]                   future::plan(list(function (...) 
[16:04:26.798]                   {
[16:04:26.798]                     Future(1)
[16:04:26.798]                   }), .cleanup = FALSE, .init = FALSE)
[16:04:26.798]                 }
[16:04:26.798]             }
[16:04:26.798]         }
[16:04:26.798]     })
[16:04:26.798]     if (TRUE) {
[16:04:26.798]         base::sink(type = "output", split = FALSE)
[16:04:26.798]         if (TRUE) {
[16:04:26.798]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:04:26.798]         }
[16:04:26.798]         else {
[16:04:26.798]             ...future.result["stdout"] <- base::list(NULL)
[16:04:26.798]         }
[16:04:26.798]         base::close(...future.stdout)
[16:04:26.798]         ...future.stdout <- NULL
[16:04:26.798]     }
[16:04:26.798]     ...future.result$conditions <- ...future.conditions
[16:04:26.798]     ...future.result$finished <- base::Sys.time()
[16:04:26.798]     ...future.result
[16:04:26.798] }
[16:04:26.799] plan(): Setting new future strategy stack:
[16:04:26.800] List of future strategies:
[16:04:26.800] 1. sequential:
[16:04:26.800]    - args: function (..., envir = parent.frame())
[16:04:26.800]    - tweaked: FALSE
[16:04:26.800]    - call: NULL
[16:04:26.800] plan(): nbrOfWorkers() = 1
[16:04:26.801] plan(): Setting new future strategy stack:
[16:04:26.801] List of future strategies:
[16:04:26.801] 1. future:
[16:04:26.801]    - args: function (...)
[16:04:26.801]    - tweaked: FALSE
[16:04:26.801]    - call: plan(foo)
[16:04:26.801] plan(): nbrOfWorkers() = Inf
[16:04:26.802] SequentialFuture started (and completed)
[1] 42
[16:04:26.802] getGlobalsAndPackages() ...
[16:04:26.802] Searching for globals...
[16:04:26.803] - globals found: [1] ‘{’
[16:04:26.803] Searching for globals ... DONE
[16:04:26.803] Resolving globals: FALSE
[16:04:26.803] 
[16:04:26.804] 
[16:04:26.804] getGlobalsAndPackages() ... DONE
[16:04:26.804] Packages needed by the future expression (n = 0): <none>
[16:04:26.804] Packages needed by future strategies (n = 0): <none>
[16:04:26.804] {
[16:04:26.804]     {
[16:04:26.804]         {
[16:04:26.804]             ...future.startTime <- base::Sys.time()
[16:04:26.804]             {
[16:04:26.804]                 {
[16:04:26.804]                   {
[16:04:26.804]                     base::local({
[16:04:26.804]                       has_future <- base::requireNamespace("future", 
[16:04:26.804]                         quietly = TRUE)
[16:04:26.804]                       if (has_future) {
[16:04:26.804]                         ns <- base::getNamespace("future")
[16:04:26.804]                         version <- ns[[".package"]][["version"]]
[16:04:26.804]                         if (is.null(version)) 
[16:04:26.804]                           version <- utils::packageVersion("future")
[16:04:26.804]                       }
[16:04:26.804]                       else {
[16:04:26.804]                         version <- NULL
[16:04:26.804]                       }
[16:04:26.804]                       if (!has_future || version < "1.8.0") {
[16:04:26.804]                         info <- base::c(r_version = base::gsub("R version ", 
[16:04:26.804]                           "", base::R.version$version.string), 
[16:04:26.804]                           platform = base::sprintf("%s (%s-bit)", 
[16:04:26.804]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:04:26.804]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[16:04:26.804]                             "release", "version")], collapse = " "), 
[16:04:26.804]                           hostname = base::Sys.info()[["nodename"]])
[16:04:26.804]                         info <- base::sprintf("%s: %s", base::names(info), 
[16:04:26.804]                           info)
[16:04:26.804]                         info <- base::paste(info, collapse = "; ")
[16:04:26.804]                         if (!has_future) {
[16:04:26.804]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:04:26.804]                             info)
[16:04:26.804]                         }
[16:04:26.804]                         else {
[16:04:26.804]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:04:26.804]                             info, version)
[16:04:26.804]                         }
[16:04:26.804]                         base::stop(msg)
[16:04:26.804]                       }
[16:04:26.804]                     })
[16:04:26.804]                   }
[16:04:26.804]                   options(future.plan = NULL)
[16:04:26.804]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:04:26.804]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:04:26.804]                 }
[16:04:26.804]                 ...future.workdir <- getwd()
[16:04:26.804]             }
[16:04:26.804]             ...future.oldOptions <- base::as.list(base::.Options)
[16:04:26.804]             ...future.oldEnvVars <- base::Sys.getenv()
[16:04:26.804]         }
[16:04:26.804]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:04:26.804]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:04:26.804]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:04:26.804]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:04:26.804]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:04:26.804]             future.stdout.windows.reencode = NULL, width = 80L)
[16:04:26.804]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:04:26.804]             base::names(...future.oldOptions))
[16:04:26.804]     }
[16:04:26.804]     if (FALSE) {
[16:04:26.804]     }
[16:04:26.804]     else {
[16:04:26.804]         if (TRUE) {
[16:04:26.804]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:04:26.804]                 open = "w")
[16:04:26.804]         }
[16:04:26.804]         else {
[16:04:26.804]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:04:26.804]                 windows = "NUL", "/dev/null"), open = "w")
[16:04:26.804]         }
[16:04:26.804]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:04:26.804]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:04:26.804]             base::sink(type = "output", split = FALSE)
[16:04:26.804]             base::close(...future.stdout)
[16:04:26.804]         }, add = TRUE)
[16:04:26.804]     }
[16:04:26.804]     ...future.frame <- base::sys.nframe()
[16:04:26.804]     ...future.conditions <- base::list()
[16:04:26.804]     ...future.rng <- base::globalenv()$.Random.seed
[16:04:26.804]     if (FALSE) {
[16:04:26.804]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:04:26.804]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:04:26.804]     }
[16:04:26.804]     ...future.result <- base::tryCatch({
[16:04:26.804]         base::withCallingHandlers({
[16:04:26.804]             ...future.value <- base::withVisible(base::local({
[16:04:26.804]                 42L
[16:04:26.804]             }))
[16:04:26.804]             future::FutureResult(value = ...future.value$value, 
[16:04:26.804]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:04:26.804]                   ...future.rng), globalenv = if (FALSE) 
[16:04:26.804]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:04:26.804]                     ...future.globalenv.names))
[16:04:26.804]                 else NULL, started = ...future.startTime, version = "1.8")
[16:04:26.804]         }, condition = base::local({
[16:04:26.804]             c <- base::c
[16:04:26.804]             inherits <- base::inherits
[16:04:26.804]             invokeRestart <- base::invokeRestart
[16:04:26.804]             length <- base::length
[16:04:26.804]             list <- base::list
[16:04:26.804]             seq.int <- base::seq.int
[16:04:26.804]             signalCondition <- base::signalCondition
[16:04:26.804]             sys.calls <- base::sys.calls
[16:04:26.804]             `[[` <- base::`[[`
[16:04:26.804]             `+` <- base::`+`
[16:04:26.804]             `<<-` <- base::`<<-`
[16:04:26.804]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:04:26.804]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:04:26.804]                   3L)]
[16:04:26.804]             }
[16:04:26.804]             function(cond) {
[16:04:26.804]                 is_error <- inherits(cond, "error")
[16:04:26.804]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:04:26.804]                   NULL)
[16:04:26.804]                 if (is_error) {
[16:04:26.804]                   sessionInformation <- function() {
[16:04:26.804]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:04:26.804]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:04:26.804]                       search = base::search(), system = base::Sys.info())
[16:04:26.804]                   }
[16:04:26.804]                   ...future.conditions[[length(...future.conditions) + 
[16:04:26.804]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:04:26.804]                     cond$call), session = sessionInformation(), 
[16:04:26.804]                     timestamp = base::Sys.time(), signaled = 0L)
[16:04:26.804]                   signalCondition(cond)
[16:04:26.804]                 }
[16:04:26.804]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:04:26.804]                 "immediateCondition"))) {
[16:04:26.804]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:04:26.804]                   ...future.conditions[[length(...future.conditions) + 
[16:04:26.804]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:04:26.804]                   if (TRUE && !signal) {
[16:04:26.804]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:04:26.804]                     {
[16:04:26.804]                       inherits <- base::inherits
[16:04:26.804]                       invokeRestart <- base::invokeRestart
[16:04:26.804]                       is.null <- base::is.null
[16:04:26.804]                       muffled <- FALSE
[16:04:26.804]                       if (inherits(cond, "message")) {
[16:04:26.804]                         muffled <- grepl(pattern, "muffleMessage")
[16:04:26.804]                         if (muffled) 
[16:04:26.804]                           invokeRestart("muffleMessage")
[16:04:26.804]                       }
[16:04:26.804]                       else if (inherits(cond, "warning")) {
[16:04:26.804]                         muffled <- grepl(pattern, "muffleWarning")
[16:04:26.804]                         if (muffled) 
[16:04:26.804]                           invokeRestart("muffleWarning")
[16:04:26.804]                       }
[16:04:26.804]                       else if (inherits(cond, "condition")) {
[16:04:26.804]                         if (!is.null(pattern)) {
[16:04:26.804]                           computeRestarts <- base::computeRestarts
[16:04:26.804]                           grepl <- base::grepl
[16:04:26.804]                           restarts <- computeRestarts(cond)
[16:04:26.804]                           for (restart in restarts) {
[16:04:26.804]                             name <- restart$name
[16:04:26.804]                             if (is.null(name)) 
[16:04:26.804]                               next
[16:04:26.804]                             if (!grepl(pattern, name)) 
[16:04:26.804]                               next
[16:04:26.804]                             invokeRestart(restart)
[16:04:26.804]                             muffled <- TRUE
[16:04:26.804]                             break
[16:04:26.804]                           }
[16:04:26.804]                         }
[16:04:26.804]                       }
[16:04:26.804]                       invisible(muffled)
[16:04:26.804]                     }
[16:04:26.804]                     muffleCondition(cond, pattern = "^muffle")
[16:04:26.804]                   }
[16:04:26.804]                 }
[16:04:26.804]                 else {
[16:04:26.804]                   if (TRUE) {
[16:04:26.804]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:04:26.804]                     {
[16:04:26.804]                       inherits <- base::inherits
[16:04:26.804]                       invokeRestart <- base::invokeRestart
[16:04:26.804]                       is.null <- base::is.null
[16:04:26.804]                       muffled <- FALSE
[16:04:26.804]                       if (inherits(cond, "message")) {
[16:04:26.804]                         muffled <- grepl(pattern, "muffleMessage")
[16:04:26.804]                         if (muffled) 
[16:04:26.804]                           invokeRestart("muffleMessage")
[16:04:26.804]                       }
[16:04:26.804]                       else if (inherits(cond, "warning")) {
[16:04:26.804]                         muffled <- grepl(pattern, "muffleWarning")
[16:04:26.804]                         if (muffled) 
[16:04:26.804]                           invokeRestart("muffleWarning")
[16:04:26.804]                       }
[16:04:26.804]                       else if (inherits(cond, "condition")) {
[16:04:26.804]                         if (!is.null(pattern)) {
[16:04:26.804]                           computeRestarts <- base::computeRestarts
[16:04:26.804]                           grepl <- base::grepl
[16:04:26.804]                           restarts <- computeRestarts(cond)
[16:04:26.804]                           for (restart in restarts) {
[16:04:26.804]                             name <- restart$name
[16:04:26.804]                             if (is.null(name)) 
[16:04:26.804]                               next
[16:04:26.804]                             if (!grepl(pattern, name)) 
[16:04:26.804]                               next
[16:04:26.804]                             invokeRestart(restart)
[16:04:26.804]                             muffled <- TRUE
[16:04:26.804]                             break
[16:04:26.804]                           }
[16:04:26.804]                         }
[16:04:26.804]                       }
[16:04:26.804]                       invisible(muffled)
[16:04:26.804]                     }
[16:04:26.804]                     muffleCondition(cond, pattern = "^muffle")
[16:04:26.804]                   }
[16:04:26.804]                 }
[16:04:26.804]             }
[16:04:26.804]         }))
[16:04:26.804]     }, error = function(ex) {
[16:04:26.804]         base::structure(base::list(value = NULL, visible = NULL, 
[16:04:26.804]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:04:26.804]                 ...future.rng), started = ...future.startTime, 
[16:04:26.804]             finished = Sys.time(), session_uuid = NA_character_, 
[16:04:26.804]             version = "1.8"), class = "FutureResult")
[16:04:26.804]     }, finally = {
[16:04:26.804]         if (!identical(...future.workdir, getwd())) 
[16:04:26.804]             setwd(...future.workdir)
[16:04:26.804]         {
[16:04:26.804]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:04:26.804]                 ...future.oldOptions$nwarnings <- NULL
[16:04:26.804]             }
[16:04:26.804]             base::options(...future.oldOptions)
[16:04:26.804]             if (.Platform$OS.type == "windows") {
[16:04:26.804]                 old_names <- names(...future.oldEnvVars)
[16:04:26.804]                 envs <- base::Sys.getenv()
[16:04:26.804]                 names <- names(envs)
[16:04:26.804]                 common <- intersect(names, old_names)
[16:04:26.804]                 added <- setdiff(names, old_names)
[16:04:26.804]                 removed <- setdiff(old_names, names)
[16:04:26.804]                 changed <- common[...future.oldEnvVars[common] != 
[16:04:26.804]                   envs[common]]
[16:04:26.804]                 NAMES <- toupper(changed)
[16:04:26.804]                 args <- list()
[16:04:26.804]                 for (kk in seq_along(NAMES)) {
[16:04:26.804]                   name <- changed[[kk]]
[16:04:26.804]                   NAME <- NAMES[[kk]]
[16:04:26.804]                   if (name != NAME && is.element(NAME, old_names)) 
[16:04:26.804]                     next
[16:04:26.804]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:04:26.804]                 }
[16:04:26.804]                 NAMES <- toupper(added)
[16:04:26.804]                 for (kk in seq_along(NAMES)) {
[16:04:26.804]                   name <- added[[kk]]
[16:04:26.804]                   NAME <- NAMES[[kk]]
[16:04:26.804]                   if (name != NAME && is.element(NAME, old_names)) 
[16:04:26.804]                     next
[16:04:26.804]                   args[[name]] <- ""
[16:04:26.804]                 }
[16:04:26.804]                 NAMES <- toupper(removed)
[16:04:26.804]                 for (kk in seq_along(NAMES)) {
[16:04:26.804]                   name <- removed[[kk]]
[16:04:26.804]                   NAME <- NAMES[[kk]]
[16:04:26.804]                   if (name != NAME && is.element(NAME, old_names)) 
[16:04:26.804]                     next
[16:04:26.804]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:04:26.804]                 }
[16:04:26.804]                 if (length(args) > 0) 
[16:04:26.804]                   base::do.call(base::Sys.setenv, args = args)
[16:04:26.804]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:04:26.804]             }
[16:04:26.804]             else {
[16:04:26.804]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:04:26.804]             }
[16:04:26.804]             {
[16:04:26.804]                 if (base::length(...future.futureOptionsAdded) > 
[16:04:26.804]                   0L) {
[16:04:26.804]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:04:26.804]                   base::names(opts) <- ...future.futureOptionsAdded
[16:04:26.804]                   base::options(opts)
[16:04:26.804]                 }
[16:04:26.804]                 {
[16:04:26.804]                   {
[16:04:26.804]                     NULL
[16:04:26.804]                     RNGkind("Mersenne-Twister")
[16:04:26.804]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[16:04:26.804]                       inherits = FALSE)
[16:04:26.804]                   }
[16:04:26.804]                   options(future.plan = NULL)
[16:04:26.804]                   if (is.na(NA_character_)) 
[16:04:26.804]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:04:26.804]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:04:26.804]                   future::plan(list(function (...) 
[16:04:26.804]                   {
[16:04:26.804]                     Future(1)
[16:04:26.804]                   }), .cleanup = FALSE, .init = FALSE)
[16:04:26.804]                 }
[16:04:26.804]             }
[16:04:26.804]         }
[16:04:26.804]     })
[16:04:26.804]     if (TRUE) {
[16:04:26.804]         base::sink(type = "output", split = FALSE)
[16:04:26.804]         if (TRUE) {
[16:04:26.804]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:04:26.804]         }
[16:04:26.804]         else {
[16:04:26.804]             ...future.result["stdout"] <- base::list(NULL)
[16:04:26.804]         }
[16:04:26.804]         base::close(...future.stdout)
[16:04:26.804]         ...future.stdout <- NULL
[16:04:26.804]     }
[16:04:26.804]     ...future.result$conditions <- ...future.conditions
[16:04:26.804]     ...future.result$finished <- base::Sys.time()
[16:04:26.804]     ...future.result
[16:04:26.804] }
[16:04:26.806] plan(): Setting new future strategy stack:
[16:04:26.806] List of future strategies:
[16:04:26.806] 1. sequential:
[16:04:26.806]    - args: function (..., envir = parent.frame())
[16:04:26.806]    - tweaked: FALSE
[16:04:26.806]    - call: NULL
[16:04:26.806] plan(): nbrOfWorkers() = 1
[16:04:26.807] plan(): Setting new future strategy stack:
[16:04:26.807] List of future strategies:
[16:04:26.807] 1. future:
[16:04:26.807]    - args: function (...)
[16:04:26.807]    - tweaked: FALSE
[16:04:26.807]    - call: plan(foo)
[16:04:26.808] plan(): nbrOfWorkers() = Inf
[16:04:26.808] SequentialFuture started (and completed)
[1] 42
[16:04:26.810] getGlobalsAndPackages() ...
[16:04:26.810] 
[16:04:26.810] - globals: [0] <none>
[16:04:26.810] getGlobalsAndPackages() ... DONE
[16:04:26.811] [local output] makeClusterPSOCK() ...
[16:04:26.841] [local output] Workers: [n = 2] ‘localhost’, ‘localhost’
[16:04:26.842] [local output] Base port: 11974
[16:04:26.842] [local output] Getting setup options for 2 cluster nodes ...
[16:04:26.842] [local output]  - Node 1 of 2 ...
[16:04:26.843] [local output] localMachine=TRUE => revtunnel=FALSE

[16:04:26.843] Testing if worker's PID can be inferred: ‘'/usr/local/lib/R/bin/Rscript' -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/Rtmp12MkJo/worker.rank=1.parallelly.parent=81690.13f1a6b81e969.pid")), silent = TRUE)' -e 'file.exists("/tmp/Rtmp12MkJo/worker.rank=1.parallelly.parent=81690.13f1a6b81e969.pid")'’
[16:04:27.030] - Possible to infer worker's PID: TRUE
[16:04:27.031] [local output] Rscript port: 11974

[16:04:27.031] [local output]  - Node 2 of 2 ...
[16:04:27.031] [local output] localMachine=TRUE => revtunnel=FALSE

[16:04:27.032] [local output] Rscript port: 11974

[16:04:27.032] [local output] Getting setup options for 2 cluster nodes ... done
[16:04:27.032] [local output]  - Parallel setup requested for some PSOCK nodes
[16:04:27.033] [local output] Setting up PSOCK nodes in parallel
[16:04:27.033] List of 36
[16:04:27.033]  $ worker          : chr "localhost"
[16:04:27.033]   ..- attr(*, "localhost")= logi TRUE
[16:04:27.033]  $ master          : chr "localhost"
[16:04:27.033]  $ port            : int 11974
[16:04:27.033]  $ connectTimeout  : num 120
[16:04:27.033]  $ timeout         : num 2592000
[16:04:27.033]  $ rscript         : chr "'/usr/local/lib/R/bin/Rscript'"
[16:04:27.033]  $ homogeneous     : logi TRUE
[16:04:27.033]  $ rscript_args    : chr "--default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),fi"| __truncated__
[16:04:27.033]  $ rscript_envs    : NULL
[16:04:27.033]  $ rscript_libs    : NULL
[16:04:27.033]  $ rscript_startup : NULL
[16:04:27.033]  $ rscript_sh      : chr "sh"
[16:04:27.033]  $ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[16:04:27.033]  $ methods         : logi TRUE
[16:04:27.033]  $ socketOptions   : chr "no-delay"
[16:04:27.033]  $ useXDR          : logi FALSE
[16:04:27.033]  $ outfile         : chr "/dev/null"
[16:04:27.033]  $ renice          : int NA
[16:04:27.033]  $ rshcmd          : NULL
[16:04:27.033]  $ user            : chr(0) 
[16:04:27.033]  $ revtunnel       : logi FALSE
[16:04:27.033]  $ rshlogfile      : NULL
[16:04:27.033]  $ rshopts         : chr(0) 
[16:04:27.033]  $ rank            : int 1
[16:04:27.033]  $ manual          : logi FALSE
[16:04:27.033]  $ dryrun          : logi FALSE
[16:04:27.033]  $ quiet           : logi FALSE
[16:04:27.033]  $ setup_strategy  : chr "parallel"
[16:04:27.033]  $ local_cmd       : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[16:04:27.033]  $ pidfile         : chr "/tmp/Rtmp12MkJo/worker.rank=1.parallelly.parent=81690.13f1a6b81e969.pid"
[16:04:27.033]  $ rshcmd_label    : NULL
[16:04:27.033]  $ rsh_call        : NULL
[16:04:27.033]  $ cmd             : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[16:04:27.033]  $ localMachine    : logi TRUE
[16:04:27.033]  $ make_fcn        :function (worker = getOption2("parallelly.localhost.hostname", "localhost"), 
[16:04:27.033]     master = NULL, port, connectTimeout = getOption2("parallelly.makeNodePSOCK.connectTimeout", 
[16:04:27.033]         2 * 60), timeout = getOption2("parallelly.makeNodePSOCK.timeout", 
[16:04:27.033]         30 * 24 * 60 * 60), rscript = NULL, homogeneous = NULL, rscript_args = NULL, 
[16:04:27.033]     rscript_envs = NULL, rscript_libs = NULL, rscript_startup = NULL, rscript_sh = c("auto", 
[16:04:27.033]         "cmd", "sh"), default_packages = c("datasets", "utils", "grDevices", 
[16:04:27.033]         "graphics", "stats", if (methods) "methods"), methods = TRUE, socketOptions = getOption2("parallelly.makeNodePSOCK.socketOptions", 
[16:04:27.033]         "no-delay"), useXDR = getOption2("parallelly.makeNodePSOCK.useXDR", 
[16:04:27.033]         FALSE), outfile = "/dev/null", renice = NA_integer_, rshcmd = getOption2("parallelly.makeNodePSOCK.rshcmd", 
[16:04:27.033]         NULL), user = NULL, revtunnel = NA, rshlogfile = NULL, rshopts = getOption2("parallelly.makeNodePSOCK.rshopts", 
[16:04:27.033]         NULL), rank = 1L, manual = FALSE, dryrun = FALSE, quiet = FALSE, 
[16:04:27.033]     setup_strategy = getOption2("parallelly.makeNodePSOCK.setup_strategy", 
[16:04:27.033]         "parallel"), action = c("launch", "options"), verbose = FALSE)  
[16:04:27.033]  $ arguments       :List of 28
[16:04:27.033]   ..$ worker          : chr "localhost"
[16:04:27.033]   ..$ master          : NULL
[16:04:27.033]   ..$ port            : int 11974
[16:04:27.033]   ..$ connectTimeout  : num 120
[16:04:27.033]   ..$ timeout         : num 2592000
[16:04:27.033]   ..$ rscript         : NULL
[16:04:27.033]   ..$ homogeneous     : NULL
[16:04:27.033]   ..$ rscript_args    : NULL
[16:04:27.033]   ..$ rscript_envs    : NULL
[16:04:27.033]   ..$ rscript_libs    : NULL
[16:04:27.033]   ..$ rscript_startup : NULL
[16:04:27.033]   ..$ rscript_sh      : chr [1:3] "auto" "cmd" "sh"
[16:04:27.033]   ..$ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[16:04:27.033]   ..$ methods         : logi TRUE
[16:04:27.033]   ..$ socketOptions   : chr "no-delay"
[16:04:27.033]   ..$ useXDR          : logi FALSE
[16:04:27.033]   ..$ outfile         : chr "/dev/null"
[16:04:27.033]   ..$ renice          : int NA
[16:04:27.033]   ..$ rshcmd          : NULL
[16:04:27.033]   ..$ user            : NULL
[16:04:27.033]   ..$ revtunnel       : logi NA
[16:04:27.033]   ..$ rshlogfile      : NULL
[16:04:27.033]   ..$ rshopts         : NULL
[16:04:27.033]   ..$ rank            : int 1
[16:04:27.033]   ..$ manual          : logi FALSE
[16:04:27.033]   ..$ dryrun          : logi FALSE
[16:04:27.033]   ..$ quiet           : logi FALSE
[16:04:27.033]   ..$ setup_strategy  : chr "parallel"
[16:04:27.033]  - attr(*, "class")= chr [1:2] "makeNodePSOCKOptions" "makeNodeOptions"
[16:04:27.049] [local output] System call to launch all workers:
[16:04:27.049] [local output] '/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/Rtmp12MkJo/worker.rank=1.parallelly.parent=81690.13f1a6b81e969.pid")), silent = TRUE)' -e 'options(socketOptions = "no-delay")' -e 'workRSOCK <- tryCatch(parallel:::.workRSOCK, error=function(e) parallel:::.slaveRSOCK); workRSOCK()' MASTER=localhost PORT=11974 OUT=/dev/null TIMEOUT=2592000 XDR=FALSE SETUPTIMEOUT=120 SETUPSTRATEGY=parallel
[16:04:27.050] [local output] Starting PSOCK main server
[16:04:27.055] [local output] Workers launched
[16:04:27.055] [local output] Waiting for workers to connect back
[16:04:27.055]  - [local output] 0 workers out of 2 ready
[16:04:27.293]  - [local output] 0 workers out of 2 ready
[16:04:27.293]  - [local output] 1 workers out of 2 ready
[16:04:27.296]  - [local output] 1 workers out of 2 ready
[16:04:27.296]  - [local output] 2 workers out of 2 ready
[16:04:27.296] [local output] Launching of workers completed
[16:04:27.296] [local output] Collecting session information from workers
[16:04:27.297] [local output]  - Worker #1 of 2
[16:04:27.298] [local output]  - Worker #2 of 2
[16:04:27.298] [local output] makeClusterPSOCK() ... done
MultisessionFuture:
Label: ‘<none>’
Expression:
{
    42L
}
Lazy evaluation: FALSE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: 0x55c277cf27d8
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: FALSE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: d28260de-1d23-12a3-c9c3-d803e53b2452
Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[16:04:27.311] Packages needed by the future expression (n = 0): <none>
[16:04:27.311] Packages needed by future strategies (n = 0): <none>
[16:04:27.312] {
[16:04:27.312]     {
[16:04:27.312]         {
[16:04:27.312]             ...future.startTime <- base::Sys.time()
[16:04:27.312]             {
[16:04:27.312]                 {
[16:04:27.312]                   {
[16:04:27.312]                     {
[16:04:27.312]                       base::local({
[16:04:27.312]                         has_future <- base::requireNamespace("future", 
[16:04:27.312]                           quietly = TRUE)
[16:04:27.312]                         if (has_future) {
[16:04:27.312]                           ns <- base::getNamespace("future")
[16:04:27.312]                           version <- ns[[".package"]][["version"]]
[16:04:27.312]                           if (is.null(version)) 
[16:04:27.312]                             version <- utils::packageVersion("future")
[16:04:27.312]                         }
[16:04:27.312]                         else {
[16:04:27.312]                           version <- NULL
[16:04:27.312]                         }
[16:04:27.312]                         if (!has_future || version < "1.8.0") {
[16:04:27.312]                           info <- base::c(r_version = base::gsub("R version ", 
[16:04:27.312]                             "", base::R.version$version.string), 
[16:04:27.312]                             platform = base::sprintf("%s (%s-bit)", 
[16:04:27.312]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:04:27.312]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[16:04:27.312]                               "release", "version")], collapse = " "), 
[16:04:27.312]                             hostname = base::Sys.info()[["nodename"]])
[16:04:27.312]                           info <- base::sprintf("%s: %s", base::names(info), 
[16:04:27.312]                             info)
[16:04:27.312]                           info <- base::paste(info, collapse = "; ")
[16:04:27.312]                           if (!has_future) {
[16:04:27.312]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:04:27.312]                               info)
[16:04:27.312]                           }
[16:04:27.312]                           else {
[16:04:27.312]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:04:27.312]                               info, version)
[16:04:27.312]                           }
[16:04:27.312]                           base::stop(msg)
[16:04:27.312]                         }
[16:04:27.312]                       })
[16:04:27.312]                     }
[16:04:27.312]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[16:04:27.312]                     base::options(mc.cores = 1L)
[16:04:27.312]                   }
[16:04:27.312]                   options(future.plan = NULL)
[16:04:27.312]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:04:27.312]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:04:27.312]                 }
[16:04:27.312]                 ...future.workdir <- getwd()
[16:04:27.312]             }
[16:04:27.312]             ...future.oldOptions <- base::as.list(base::.Options)
[16:04:27.312]             ...future.oldEnvVars <- base::Sys.getenv()
[16:04:27.312]         }
[16:04:27.312]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:04:27.312]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:04:27.312]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:04:27.312]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:04:27.312]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:04:27.312]             future.stdout.windows.reencode = NULL, width = 80L)
[16:04:27.312]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:04:27.312]             base::names(...future.oldOptions))
[16:04:27.312]     }
[16:04:27.312]     if (FALSE) {
[16:04:27.312]     }
[16:04:27.312]     else {
[16:04:27.312]         if (TRUE) {
[16:04:27.312]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:04:27.312]                 open = "w")
[16:04:27.312]         }
[16:04:27.312]         else {
[16:04:27.312]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:04:27.312]                 windows = "NUL", "/dev/null"), open = "w")
[16:04:27.312]         }
[16:04:27.312]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:04:27.312]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:04:27.312]             base::sink(type = "output", split = FALSE)
[16:04:27.312]             base::close(...future.stdout)
[16:04:27.312]         }, add = TRUE)
[16:04:27.312]     }
[16:04:27.312]     ...future.frame <- base::sys.nframe()
[16:04:27.312]     ...future.conditions <- base::list()
[16:04:27.312]     ...future.rng <- base::globalenv()$.Random.seed
[16:04:27.312]     if (FALSE) {
[16:04:27.312]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:04:27.312]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:04:27.312]     }
[16:04:27.312]     ...future.result <- base::tryCatch({
[16:04:27.312]         base::withCallingHandlers({
[16:04:27.312]             ...future.value <- base::withVisible(base::local({
[16:04:27.312]                 ...future.makeSendCondition <- base::local({
[16:04:27.312]                   sendCondition <- NULL
[16:04:27.312]                   function(frame = 1L) {
[16:04:27.312]                     if (is.function(sendCondition)) 
[16:04:27.312]                       return(sendCondition)
[16:04:27.312]                     ns <- getNamespace("parallel")
[16:04:27.312]                     if (exists("sendData", mode = "function", 
[16:04:27.312]                       envir = ns)) {
[16:04:27.312]                       parallel_sendData <- get("sendData", mode = "function", 
[16:04:27.312]                         envir = ns)
[16:04:27.312]                       envir <- sys.frame(frame)
[16:04:27.312]                       master <- NULL
[16:04:27.312]                       while (!identical(envir, .GlobalEnv) && 
[16:04:27.312]                         !identical(envir, emptyenv())) {
[16:04:27.312]                         if (exists("master", mode = "list", envir = envir, 
[16:04:27.312]                           inherits = FALSE)) {
[16:04:27.312]                           master <- get("master", mode = "list", 
[16:04:27.312]                             envir = envir, inherits = FALSE)
[16:04:27.312]                           if (inherits(master, c("SOCKnode", 
[16:04:27.312]                             "SOCK0node"))) {
[16:04:27.312]                             sendCondition <<- function(cond) {
[16:04:27.312]                               data <- list(type = "VALUE", value = cond, 
[16:04:27.312]                                 success = TRUE)
[16:04:27.312]                               parallel_sendData(master, data)
[16:04:27.312]                             }
[16:04:27.312]                             return(sendCondition)
[16:04:27.312]                           }
[16:04:27.312]                         }
[16:04:27.312]                         frame <- frame + 1L
[16:04:27.312]                         envir <- sys.frame(frame)
[16:04:27.312]                       }
[16:04:27.312]                     }
[16:04:27.312]                     sendCondition <<- function(cond) NULL
[16:04:27.312]                   }
[16:04:27.312]                 })
[16:04:27.312]                 withCallingHandlers({
[16:04:27.312]                   {
[16:04:27.312]                     42L
[16:04:27.312]                   }
[16:04:27.312]                 }, immediateCondition = function(cond) {
[16:04:27.312]                   sendCondition <- ...future.makeSendCondition()
[16:04:27.312]                   sendCondition(cond)
[16:04:27.312]                   muffleCondition <- function (cond, pattern = "^muffle") 
[16:04:27.312]                   {
[16:04:27.312]                     inherits <- base::inherits
[16:04:27.312]                     invokeRestart <- base::invokeRestart
[16:04:27.312]                     is.null <- base::is.null
[16:04:27.312]                     muffled <- FALSE
[16:04:27.312]                     if (inherits(cond, "message")) {
[16:04:27.312]                       muffled <- grepl(pattern, "muffleMessage")
[16:04:27.312]                       if (muffled) 
[16:04:27.312]                         invokeRestart("muffleMessage")
[16:04:27.312]                     }
[16:04:27.312]                     else if (inherits(cond, "warning")) {
[16:04:27.312]                       muffled <- grepl(pattern, "muffleWarning")
[16:04:27.312]                       if (muffled) 
[16:04:27.312]                         invokeRestart("muffleWarning")
[16:04:27.312]                     }
[16:04:27.312]                     else if (inherits(cond, "condition")) {
[16:04:27.312]                       if (!is.null(pattern)) {
[16:04:27.312]                         computeRestarts <- base::computeRestarts
[16:04:27.312]                         grepl <- base::grepl
[16:04:27.312]                         restarts <- computeRestarts(cond)
[16:04:27.312]                         for (restart in restarts) {
[16:04:27.312]                           name <- restart$name
[16:04:27.312]                           if (is.null(name)) 
[16:04:27.312]                             next
[16:04:27.312]                           if (!grepl(pattern, name)) 
[16:04:27.312]                             next
[16:04:27.312]                           invokeRestart(restart)
[16:04:27.312]                           muffled <- TRUE
[16:04:27.312]                           break
[16:04:27.312]                         }
[16:04:27.312]                       }
[16:04:27.312]                     }
[16:04:27.312]                     invisible(muffled)
[16:04:27.312]                   }
[16:04:27.312]                   muffleCondition(cond)
[16:04:27.312]                 })
[16:04:27.312]             }))
[16:04:27.312]             future::FutureResult(value = ...future.value$value, 
[16:04:27.312]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:04:27.312]                   ...future.rng), globalenv = if (FALSE) 
[16:04:27.312]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:04:27.312]                     ...future.globalenv.names))
[16:04:27.312]                 else NULL, started = ...future.startTime, version = "1.8")
[16:04:27.312]         }, condition = base::local({
[16:04:27.312]             c <- base::c
[16:04:27.312]             inherits <- base::inherits
[16:04:27.312]             invokeRestart <- base::invokeRestart
[16:04:27.312]             length <- base::length
[16:04:27.312]             list <- base::list
[16:04:27.312]             seq.int <- base::seq.int
[16:04:27.312]             signalCondition <- base::signalCondition
[16:04:27.312]             sys.calls <- base::sys.calls
[16:04:27.312]             `[[` <- base::`[[`
[16:04:27.312]             `+` <- base::`+`
[16:04:27.312]             `<<-` <- base::`<<-`
[16:04:27.312]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:04:27.312]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:04:27.312]                   3L)]
[16:04:27.312]             }
[16:04:27.312]             function(cond) {
[16:04:27.312]                 is_error <- inherits(cond, "error")
[16:04:27.312]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:04:27.312]                   NULL)
[16:04:27.312]                 if (is_error) {
[16:04:27.312]                   sessionInformation <- function() {
[16:04:27.312]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:04:27.312]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:04:27.312]                       search = base::search(), system = base::Sys.info())
[16:04:27.312]                   }
[16:04:27.312]                   ...future.conditions[[length(...future.conditions) + 
[16:04:27.312]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:04:27.312]                     cond$call), session = sessionInformation(), 
[16:04:27.312]                     timestamp = base::Sys.time(), signaled = 0L)
[16:04:27.312]                   signalCondition(cond)
[16:04:27.312]                 }
[16:04:27.312]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:04:27.312]                 "immediateCondition"))) {
[16:04:27.312]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:04:27.312]                   ...future.conditions[[length(...future.conditions) + 
[16:04:27.312]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:04:27.312]                   if (TRUE && !signal) {
[16:04:27.312]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:04:27.312]                     {
[16:04:27.312]                       inherits <- base::inherits
[16:04:27.312]                       invokeRestart <- base::invokeRestart
[16:04:27.312]                       is.null <- base::is.null
[16:04:27.312]                       muffled <- FALSE
[16:04:27.312]                       if (inherits(cond, "message")) {
[16:04:27.312]                         muffled <- grepl(pattern, "muffleMessage")
[16:04:27.312]                         if (muffled) 
[16:04:27.312]                           invokeRestart("muffleMessage")
[16:04:27.312]                       }
[16:04:27.312]                       else if (inherits(cond, "warning")) {
[16:04:27.312]                         muffled <- grepl(pattern, "muffleWarning")
[16:04:27.312]                         if (muffled) 
[16:04:27.312]                           invokeRestart("muffleWarning")
[16:04:27.312]                       }
[16:04:27.312]                       else if (inherits(cond, "condition")) {
[16:04:27.312]                         if (!is.null(pattern)) {
[16:04:27.312]                           computeRestarts <- base::computeRestarts
[16:04:27.312]                           grepl <- base::grepl
[16:04:27.312]                           restarts <- computeRestarts(cond)
[16:04:27.312]                           for (restart in restarts) {
[16:04:27.312]                             name <- restart$name
[16:04:27.312]                             if (is.null(name)) 
[16:04:27.312]                               next
[16:04:27.312]                             if (!grepl(pattern, name)) 
[16:04:27.312]                               next
[16:04:27.312]                             invokeRestart(restart)
[16:04:27.312]                             muffled <- TRUE
[16:04:27.312]                             break
[16:04:27.312]                           }
[16:04:27.312]                         }
[16:04:27.312]                       }
[16:04:27.312]                       invisible(muffled)
[16:04:27.312]                     }
[16:04:27.312]                     muffleCondition(cond, pattern = "^muffle")
[16:04:27.312]                   }
[16:04:27.312]                 }
[16:04:27.312]                 else {
[16:04:27.312]                   if (TRUE) {
[16:04:27.312]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:04:27.312]                     {
[16:04:27.312]                       inherits <- base::inherits
[16:04:27.312]                       invokeRestart <- base::invokeRestart
[16:04:27.312]                       is.null <- base::is.null
[16:04:27.312]                       muffled <- FALSE
[16:04:27.312]                       if (inherits(cond, "message")) {
[16:04:27.312]                         muffled <- grepl(pattern, "muffleMessage")
[16:04:27.312]                         if (muffled) 
[16:04:27.312]                           invokeRestart("muffleMessage")
[16:04:27.312]                       }
[16:04:27.312]                       else if (inherits(cond, "warning")) {
[16:04:27.312]                         muffled <- grepl(pattern, "muffleWarning")
[16:04:27.312]                         if (muffled) 
[16:04:27.312]                           invokeRestart("muffleWarning")
[16:04:27.312]                       }
[16:04:27.312]                       else if (inherits(cond, "condition")) {
[16:04:27.312]                         if (!is.null(pattern)) {
[16:04:27.312]                           computeRestarts <- base::computeRestarts
[16:04:27.312]                           grepl <- base::grepl
[16:04:27.312]                           restarts <- computeRestarts(cond)
[16:04:27.312]                           for (restart in restarts) {
[16:04:27.312]                             name <- restart$name
[16:04:27.312]                             if (is.null(name)) 
[16:04:27.312]                               next
[16:04:27.312]                             if (!grepl(pattern, name)) 
[16:04:27.312]                               next
[16:04:27.312]                             invokeRestart(restart)
[16:04:27.312]                             muffled <- TRUE
[16:04:27.312]                             break
[16:04:27.312]                           }
[16:04:27.312]                         }
[16:04:27.312]                       }
[16:04:27.312]                       invisible(muffled)
[16:04:27.312]                     }
[16:04:27.312]                     muffleCondition(cond, pattern = "^muffle")
[16:04:27.312]                   }
[16:04:27.312]                 }
[16:04:27.312]             }
[16:04:27.312]         }))
[16:04:27.312]     }, error = function(ex) {
[16:04:27.312]         base::structure(base::list(value = NULL, visible = NULL, 
[16:04:27.312]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:04:27.312]                 ...future.rng), started = ...future.startTime, 
[16:04:27.312]             finished = Sys.time(), session_uuid = NA_character_, 
[16:04:27.312]             version = "1.8"), class = "FutureResult")
[16:04:27.312]     }, finally = {
[16:04:27.312]         if (!identical(...future.workdir, getwd())) 
[16:04:27.312]             setwd(...future.workdir)
[16:04:27.312]         {
[16:04:27.312]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:04:27.312]                 ...future.oldOptions$nwarnings <- NULL
[16:04:27.312]             }
[16:04:27.312]             base::options(...future.oldOptions)
[16:04:27.312]             if (.Platform$OS.type == "windows") {
[16:04:27.312]                 old_names <- names(...future.oldEnvVars)
[16:04:27.312]                 envs <- base::Sys.getenv()
[16:04:27.312]                 names <- names(envs)
[16:04:27.312]                 common <- intersect(names, old_names)
[16:04:27.312]                 added <- setdiff(names, old_names)
[16:04:27.312]                 removed <- setdiff(old_names, names)
[16:04:27.312]                 changed <- common[...future.oldEnvVars[common] != 
[16:04:27.312]                   envs[common]]
[16:04:27.312]                 NAMES <- toupper(changed)
[16:04:27.312]                 args <- list()
[16:04:27.312]                 for (kk in seq_along(NAMES)) {
[16:04:27.312]                   name <- changed[[kk]]
[16:04:27.312]                   NAME <- NAMES[[kk]]
[16:04:27.312]                   if (name != NAME && is.element(NAME, old_names)) 
[16:04:27.312]                     next
[16:04:27.312]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:04:27.312]                 }
[16:04:27.312]                 NAMES <- toupper(added)
[16:04:27.312]                 for (kk in seq_along(NAMES)) {
[16:04:27.312]                   name <- added[[kk]]
[16:04:27.312]                   NAME <- NAMES[[kk]]
[16:04:27.312]                   if (name != NAME && is.element(NAME, old_names)) 
[16:04:27.312]                     next
[16:04:27.312]                   args[[name]] <- ""
[16:04:27.312]                 }
[16:04:27.312]                 NAMES <- toupper(removed)
[16:04:27.312]                 for (kk in seq_along(NAMES)) {
[16:04:27.312]                   name <- removed[[kk]]
[16:04:27.312]                   NAME <- NAMES[[kk]]
[16:04:27.312]                   if (name != NAME && is.element(NAME, old_names)) 
[16:04:27.312]                     next
[16:04:27.312]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:04:27.312]                 }
[16:04:27.312]                 if (length(args) > 0) 
[16:04:27.312]                   base::do.call(base::Sys.setenv, args = args)
[16:04:27.312]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:04:27.312]             }
[16:04:27.312]             else {
[16:04:27.312]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:04:27.312]             }
[16:04:27.312]             {
[16:04:27.312]                 if (base::length(...future.futureOptionsAdded) > 
[16:04:27.312]                   0L) {
[16:04:27.312]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:04:27.312]                   base::names(opts) <- ...future.futureOptionsAdded
[16:04:27.312]                   base::options(opts)
[16:04:27.312]                 }
[16:04:27.312]                 {
[16:04:27.312]                   {
[16:04:27.312]                     base::options(mc.cores = ...future.mc.cores.old)
[16:04:27.312]                     NULL
[16:04:27.312]                   }
[16:04:27.312]                   options(future.plan = NULL)
[16:04:27.312]                   if (is.na(NA_character_)) 
[16:04:27.312]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:04:27.312]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:04:27.312]                   future::plan(list(function (...) 
[16:04:27.312]                   {
[16:04:27.312]                     Future(1)
[16:04:27.312]                   }), .cleanup = FALSE, .init = FALSE)
[16:04:27.312]                 }
[16:04:27.312]             }
[16:04:27.312]         }
[16:04:27.312]     })
[16:04:27.312]     if (TRUE) {
[16:04:27.312]         base::sink(type = "output", split = FALSE)
[16:04:27.312]         if (TRUE) {
[16:04:27.312]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:04:27.312]         }
[16:04:27.312]         else {
[16:04:27.312]             ...future.result["stdout"] <- base::list(NULL)
[16:04:27.312]         }
[16:04:27.312]         base::close(...future.stdout)
[16:04:27.312]         ...future.stdout <- NULL
[16:04:27.312]     }
[16:04:27.312]     ...future.result$conditions <- ...future.conditions
[16:04:27.312]     ...future.result$finished <- base::Sys.time()
[16:04:27.312]     ...future.result
[16:04:27.312] }
[16:04:27.364] MultisessionFuture started
[16:04:27.364] result() for ClusterFuture ...
[16:04:27.365] receiveMessageFromWorker() for ClusterFuture ...
[16:04:27.365] - Validating connection of MultisessionFuture
[16:04:27.397] - received message: FutureResult
[16:04:27.397] - Received FutureResult
[16:04:27.400] - Erased future from FutureRegistry
[16:04:27.401] result() for ClusterFuture ...
[16:04:27.401] - result already collected: FutureResult
[16:04:27.401] result() for ClusterFuture ... done
[16:04:27.401] receiveMessageFromWorker() for ClusterFuture ... done
[16:04:27.401] result() for ClusterFuture ... done
[16:04:27.401] result() for ClusterFuture ...
[16:04:27.401] - result already collected: FutureResult
[16:04:27.401] result() for ClusterFuture ... done
[1] 42
[16:04:27.403] getGlobalsAndPackages() ...
[16:04:27.403] 
[16:04:27.403] - globals: [0] <none>
[16:04:27.403] getGlobalsAndPackages() ... DONE
[16:04:27.414] Packages needed by the future expression (n = 0): <none>
[16:04:27.414] Packages needed by future strategies (n = 0): <none>
[16:04:27.415] {
[16:04:27.415]     {
[16:04:27.415]         {
[16:04:27.415]             ...future.startTime <- base::Sys.time()
[16:04:27.415]             {
[16:04:27.415]                 {
[16:04:27.415]                   {
[16:04:27.415]                     {
[16:04:27.415]                       base::local({
[16:04:27.415]                         has_future <- base::requireNamespace("future", 
[16:04:27.415]                           quietly = TRUE)
[16:04:27.415]                         if (has_future) {
[16:04:27.415]                           ns <- base::getNamespace("future")
[16:04:27.415]                           version <- ns[[".package"]][["version"]]
[16:04:27.415]                           if (is.null(version)) 
[16:04:27.415]                             version <- utils::packageVersion("future")
[16:04:27.415]                         }
[16:04:27.415]                         else {
[16:04:27.415]                           version <- NULL
[16:04:27.415]                         }
[16:04:27.415]                         if (!has_future || version < "1.8.0") {
[16:04:27.415]                           info <- base::c(r_version = base::gsub("R version ", 
[16:04:27.415]                             "", base::R.version$version.string), 
[16:04:27.415]                             platform = base::sprintf("%s (%s-bit)", 
[16:04:27.415]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:04:27.415]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[16:04:27.415]                               "release", "version")], collapse = " "), 
[16:04:27.415]                             hostname = base::Sys.info()[["nodename"]])
[16:04:27.415]                           info <- base::sprintf("%s: %s", base::names(info), 
[16:04:27.415]                             info)
[16:04:27.415]                           info <- base::paste(info, collapse = "; ")
[16:04:27.415]                           if (!has_future) {
[16:04:27.415]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:04:27.415]                               info)
[16:04:27.415]                           }
[16:04:27.415]                           else {
[16:04:27.415]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:04:27.415]                               info, version)
[16:04:27.415]                           }
[16:04:27.415]                           base::stop(msg)
[16:04:27.415]                         }
[16:04:27.415]                       })
[16:04:27.415]                     }
[16:04:27.415]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[16:04:27.415]                     base::options(mc.cores = 1L)
[16:04:27.415]                   }
[16:04:27.415]                   options(future.plan = NULL)
[16:04:27.415]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:04:27.415]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:04:27.415]                 }
[16:04:27.415]                 ...future.workdir <- getwd()
[16:04:27.415]             }
[16:04:27.415]             ...future.oldOptions <- base::as.list(base::.Options)
[16:04:27.415]             ...future.oldEnvVars <- base::Sys.getenv()
[16:04:27.415]         }
[16:04:27.415]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:04:27.415]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:04:27.415]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:04:27.415]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:04:27.415]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:04:27.415]             future.stdout.windows.reencode = NULL, width = 80L)
[16:04:27.415]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:04:27.415]             base::names(...future.oldOptions))
[16:04:27.415]     }
[16:04:27.415]     if (FALSE) {
[16:04:27.415]     }
[16:04:27.415]     else {
[16:04:27.415]         if (TRUE) {
[16:04:27.415]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:04:27.415]                 open = "w")
[16:04:27.415]         }
[16:04:27.415]         else {
[16:04:27.415]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:04:27.415]                 windows = "NUL", "/dev/null"), open = "w")
[16:04:27.415]         }
[16:04:27.415]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:04:27.415]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:04:27.415]             base::sink(type = "output", split = FALSE)
[16:04:27.415]             base::close(...future.stdout)
[16:04:27.415]         }, add = TRUE)
[16:04:27.415]     }
[16:04:27.415]     ...future.frame <- base::sys.nframe()
[16:04:27.415]     ...future.conditions <- base::list()
[16:04:27.415]     ...future.rng <- base::globalenv()$.Random.seed
[16:04:27.415]     if (FALSE) {
[16:04:27.415]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:04:27.415]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:04:27.415]     }
[16:04:27.415]     ...future.result <- base::tryCatch({
[16:04:27.415]         base::withCallingHandlers({
[16:04:27.415]             ...future.value <- base::withVisible(base::local({
[16:04:27.415]                 ...future.makeSendCondition <- base::local({
[16:04:27.415]                   sendCondition <- NULL
[16:04:27.415]                   function(frame = 1L) {
[16:04:27.415]                     if (is.function(sendCondition)) 
[16:04:27.415]                       return(sendCondition)
[16:04:27.415]                     ns <- getNamespace("parallel")
[16:04:27.415]                     if (exists("sendData", mode = "function", 
[16:04:27.415]                       envir = ns)) {
[16:04:27.415]                       parallel_sendData <- get("sendData", mode = "function", 
[16:04:27.415]                         envir = ns)
[16:04:27.415]                       envir <- sys.frame(frame)
[16:04:27.415]                       master <- NULL
[16:04:27.415]                       while (!identical(envir, .GlobalEnv) && 
[16:04:27.415]                         !identical(envir, emptyenv())) {
[16:04:27.415]                         if (exists("master", mode = "list", envir = envir, 
[16:04:27.415]                           inherits = FALSE)) {
[16:04:27.415]                           master <- get("master", mode = "list", 
[16:04:27.415]                             envir = envir, inherits = FALSE)
[16:04:27.415]                           if (inherits(master, c("SOCKnode", 
[16:04:27.415]                             "SOCK0node"))) {
[16:04:27.415]                             sendCondition <<- function(cond) {
[16:04:27.415]                               data <- list(type = "VALUE", value = cond, 
[16:04:27.415]                                 success = TRUE)
[16:04:27.415]                               parallel_sendData(master, data)
[16:04:27.415]                             }
[16:04:27.415]                             return(sendCondition)
[16:04:27.415]                           }
[16:04:27.415]                         }
[16:04:27.415]                         frame <- frame + 1L
[16:04:27.415]                         envir <- sys.frame(frame)
[16:04:27.415]                       }
[16:04:27.415]                     }
[16:04:27.415]                     sendCondition <<- function(cond) NULL
[16:04:27.415]                   }
[16:04:27.415]                 })
[16:04:27.415]                 withCallingHandlers({
[16:04:27.415]                   {
[16:04:27.415]                     42L
[16:04:27.415]                   }
[16:04:27.415]                 }, immediateCondition = function(cond) {
[16:04:27.415]                   sendCondition <- ...future.makeSendCondition()
[16:04:27.415]                   sendCondition(cond)
[16:04:27.415]                   muffleCondition <- function (cond, pattern = "^muffle") 
[16:04:27.415]                   {
[16:04:27.415]                     inherits <- base::inherits
[16:04:27.415]                     invokeRestart <- base::invokeRestart
[16:04:27.415]                     is.null <- base::is.null
[16:04:27.415]                     muffled <- FALSE
[16:04:27.415]                     if (inherits(cond, "message")) {
[16:04:27.415]                       muffled <- grepl(pattern, "muffleMessage")
[16:04:27.415]                       if (muffled) 
[16:04:27.415]                         invokeRestart("muffleMessage")
[16:04:27.415]                     }
[16:04:27.415]                     else if (inherits(cond, "warning")) {
[16:04:27.415]                       muffled <- grepl(pattern, "muffleWarning")
[16:04:27.415]                       if (muffled) 
[16:04:27.415]                         invokeRestart("muffleWarning")
[16:04:27.415]                     }
[16:04:27.415]                     else if (inherits(cond, "condition")) {
[16:04:27.415]                       if (!is.null(pattern)) {
[16:04:27.415]                         computeRestarts <- base::computeRestarts
[16:04:27.415]                         grepl <- base::grepl
[16:04:27.415]                         restarts <- computeRestarts(cond)
[16:04:27.415]                         for (restart in restarts) {
[16:04:27.415]                           name <- restart$name
[16:04:27.415]                           if (is.null(name)) 
[16:04:27.415]                             next
[16:04:27.415]                           if (!grepl(pattern, name)) 
[16:04:27.415]                             next
[16:04:27.415]                           invokeRestart(restart)
[16:04:27.415]                           muffled <- TRUE
[16:04:27.415]                           break
[16:04:27.415]                         }
[16:04:27.415]                       }
[16:04:27.415]                     }
[16:04:27.415]                     invisible(muffled)
[16:04:27.415]                   }
[16:04:27.415]                   muffleCondition(cond)
[16:04:27.415]                 })
[16:04:27.415]             }))
[16:04:27.415]             future::FutureResult(value = ...future.value$value, 
[16:04:27.415]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:04:27.415]                   ...future.rng), globalenv = if (FALSE) 
[16:04:27.415]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:04:27.415]                     ...future.globalenv.names))
[16:04:27.415]                 else NULL, started = ...future.startTime, version = "1.8")
[16:04:27.415]         }, condition = base::local({
[16:04:27.415]             c <- base::c
[16:04:27.415]             inherits <- base::inherits
[16:04:27.415]             invokeRestart <- base::invokeRestart
[16:04:27.415]             length <- base::length
[16:04:27.415]             list <- base::list
[16:04:27.415]             seq.int <- base::seq.int
[16:04:27.415]             signalCondition <- base::signalCondition
[16:04:27.415]             sys.calls <- base::sys.calls
[16:04:27.415]             `[[` <- base::`[[`
[16:04:27.415]             `+` <- base::`+`
[16:04:27.415]             `<<-` <- base::`<<-`
[16:04:27.415]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:04:27.415]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:04:27.415]                   3L)]
[16:04:27.415]             }
[16:04:27.415]             function(cond) {
[16:04:27.415]                 is_error <- inherits(cond, "error")
[16:04:27.415]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:04:27.415]                   NULL)
[16:04:27.415]                 if (is_error) {
[16:04:27.415]                   sessionInformation <- function() {
[16:04:27.415]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:04:27.415]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:04:27.415]                       search = base::search(), system = base::Sys.info())
[16:04:27.415]                   }
[16:04:27.415]                   ...future.conditions[[length(...future.conditions) + 
[16:04:27.415]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:04:27.415]                     cond$call), session = sessionInformation(), 
[16:04:27.415]                     timestamp = base::Sys.time(), signaled = 0L)
[16:04:27.415]                   signalCondition(cond)
[16:04:27.415]                 }
[16:04:27.415]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:04:27.415]                 "immediateCondition"))) {
[16:04:27.415]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:04:27.415]                   ...future.conditions[[length(...future.conditions) + 
[16:04:27.415]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:04:27.415]                   if (TRUE && !signal) {
[16:04:27.415]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:04:27.415]                     {
[16:04:27.415]                       inherits <- base::inherits
[16:04:27.415]                       invokeRestart <- base::invokeRestart
[16:04:27.415]                       is.null <- base::is.null
[16:04:27.415]                       muffled <- FALSE
[16:04:27.415]                       if (inherits(cond, "message")) {
[16:04:27.415]                         muffled <- grepl(pattern, "muffleMessage")
[16:04:27.415]                         if (muffled) 
[16:04:27.415]                           invokeRestart("muffleMessage")
[16:04:27.415]                       }
[16:04:27.415]                       else if (inherits(cond, "warning")) {
[16:04:27.415]                         muffled <- grepl(pattern, "muffleWarning")
[16:04:27.415]                         if (muffled) 
[16:04:27.415]                           invokeRestart("muffleWarning")
[16:04:27.415]                       }
[16:04:27.415]                       else if (inherits(cond, "condition")) {
[16:04:27.415]                         if (!is.null(pattern)) {
[16:04:27.415]                           computeRestarts <- base::computeRestarts
[16:04:27.415]                           grepl <- base::grepl
[16:04:27.415]                           restarts <- computeRestarts(cond)
[16:04:27.415]                           for (restart in restarts) {
[16:04:27.415]                             name <- restart$name
[16:04:27.415]                             if (is.null(name)) 
[16:04:27.415]                               next
[16:04:27.415]                             if (!grepl(pattern, name)) 
[16:04:27.415]                               next
[16:04:27.415]                             invokeRestart(restart)
[16:04:27.415]                             muffled <- TRUE
[16:04:27.415]                             break
[16:04:27.415]                           }
[16:04:27.415]                         }
[16:04:27.415]                       }
[16:04:27.415]                       invisible(muffled)
[16:04:27.415]                     }
[16:04:27.415]                     muffleCondition(cond, pattern = "^muffle")
[16:04:27.415]                   }
[16:04:27.415]                 }
[16:04:27.415]                 else {
[16:04:27.415]                   if (TRUE) {
[16:04:27.415]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:04:27.415]                     {
[16:04:27.415]                       inherits <- base::inherits
[16:04:27.415]                       invokeRestart <- base::invokeRestart
[16:04:27.415]                       is.null <- base::is.null
[16:04:27.415]                       muffled <- FALSE
[16:04:27.415]                       if (inherits(cond, "message")) {
[16:04:27.415]                         muffled <- grepl(pattern, "muffleMessage")
[16:04:27.415]                         if (muffled) 
[16:04:27.415]                           invokeRestart("muffleMessage")
[16:04:27.415]                       }
[16:04:27.415]                       else if (inherits(cond, "warning")) {
[16:04:27.415]                         muffled <- grepl(pattern, "muffleWarning")
[16:04:27.415]                         if (muffled) 
[16:04:27.415]                           invokeRestart("muffleWarning")
[16:04:27.415]                       }
[16:04:27.415]                       else if (inherits(cond, "condition")) {
[16:04:27.415]                         if (!is.null(pattern)) {
[16:04:27.415]                           computeRestarts <- base::computeRestarts
[16:04:27.415]                           grepl <- base::grepl
[16:04:27.415]                           restarts <- computeRestarts(cond)
[16:04:27.415]                           for (restart in restarts) {
[16:04:27.415]                             name <- restart$name
[16:04:27.415]                             if (is.null(name)) 
[16:04:27.415]                               next
[16:04:27.415]                             if (!grepl(pattern, name)) 
[16:04:27.415]                               next
[16:04:27.415]                             invokeRestart(restart)
[16:04:27.415]                             muffled <- TRUE
[16:04:27.415]                             break
[16:04:27.415]                           }
[16:04:27.415]                         }
[16:04:27.415]                       }
[16:04:27.415]                       invisible(muffled)
[16:04:27.415]                     }
[16:04:27.415]                     muffleCondition(cond, pattern = "^muffle")
[16:04:27.415]                   }
[16:04:27.415]                 }
[16:04:27.415]             }
[16:04:27.415]         }))
[16:04:27.415]     }, error = function(ex) {
[16:04:27.415]         base::structure(base::list(value = NULL, visible = NULL, 
[16:04:27.415]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:04:27.415]                 ...future.rng), started = ...future.startTime, 
[16:04:27.415]             finished = Sys.time(), session_uuid = NA_character_, 
[16:04:27.415]             version = "1.8"), class = "FutureResult")
[16:04:27.415]     }, finally = {
[16:04:27.415]         if (!identical(...future.workdir, getwd())) 
[16:04:27.415]             setwd(...future.workdir)
[16:04:27.415]         {
[16:04:27.415]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:04:27.415]                 ...future.oldOptions$nwarnings <- NULL
[16:04:27.415]             }
[16:04:27.415]             base::options(...future.oldOptions)
[16:04:27.415]             if (.Platform$OS.type == "windows") {
[16:04:27.415]                 old_names <- names(...future.oldEnvVars)
[16:04:27.415]                 envs <- base::Sys.getenv()
[16:04:27.415]                 names <- names(envs)
[16:04:27.415]                 common <- intersect(names, old_names)
[16:04:27.415]                 added <- setdiff(names, old_names)
[16:04:27.415]                 removed <- setdiff(old_names, names)
[16:04:27.415]                 changed <- common[...future.oldEnvVars[common] != 
[16:04:27.415]                   envs[common]]
[16:04:27.415]                 NAMES <- toupper(changed)
[16:04:27.415]                 args <- list()
[16:04:27.415]                 for (kk in seq_along(NAMES)) {
[16:04:27.415]                   name <- changed[[kk]]
[16:04:27.415]                   NAME <- NAMES[[kk]]
[16:04:27.415]                   if (name != NAME && is.element(NAME, old_names)) 
[16:04:27.415]                     next
[16:04:27.415]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:04:27.415]                 }
[16:04:27.415]                 NAMES <- toupper(added)
[16:04:27.415]                 for (kk in seq_along(NAMES)) {
[16:04:27.415]                   name <- added[[kk]]
[16:04:27.415]                   NAME <- NAMES[[kk]]
[16:04:27.415]                   if (name != NAME && is.element(NAME, old_names)) 
[16:04:27.415]                     next
[16:04:27.415]                   args[[name]] <- ""
[16:04:27.415]                 }
[16:04:27.415]                 NAMES <- toupper(removed)
[16:04:27.415]                 for (kk in seq_along(NAMES)) {
[16:04:27.415]                   name <- removed[[kk]]
[16:04:27.415]                   NAME <- NAMES[[kk]]
[16:04:27.415]                   if (name != NAME && is.element(NAME, old_names)) 
[16:04:27.415]                     next
[16:04:27.415]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:04:27.415]                 }
[16:04:27.415]                 if (length(args) > 0) 
[16:04:27.415]                   base::do.call(base::Sys.setenv, args = args)
[16:04:27.415]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:04:27.415]             }
[16:04:27.415]             else {
[16:04:27.415]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:04:27.415]             }
[16:04:27.415]             {
[16:04:27.415]                 if (base::length(...future.futureOptionsAdded) > 
[16:04:27.415]                   0L) {
[16:04:27.415]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:04:27.415]                   base::names(opts) <- ...future.futureOptionsAdded
[16:04:27.415]                   base::options(opts)
[16:04:27.415]                 }
[16:04:27.415]                 {
[16:04:27.415]                   {
[16:04:27.415]                     base::options(mc.cores = ...future.mc.cores.old)
[16:04:27.415]                     NULL
[16:04:27.415]                   }
[16:04:27.415]                   options(future.plan = NULL)
[16:04:27.415]                   if (is.na(NA_character_)) 
[16:04:27.415]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:04:27.415]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:04:27.415]                   future::plan(list(function (...) 
[16:04:27.415]                   {
[16:04:27.415]                     Future(1)
[16:04:27.415]                   }), .cleanup = FALSE, .init = FALSE)
[16:04:27.415]                 }
[16:04:27.415]             }
[16:04:27.415]         }
[16:04:27.415]     })
[16:04:27.415]     if (TRUE) {
[16:04:27.415]         base::sink(type = "output", split = FALSE)
[16:04:27.415]         if (TRUE) {
[16:04:27.415]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:04:27.415]         }
[16:04:27.415]         else {
[16:04:27.415]             ...future.result["stdout"] <- base::list(NULL)
[16:04:27.415]         }
[16:04:27.415]         base::close(...future.stdout)
[16:04:27.415]         ...future.stdout <- NULL
[16:04:27.415]     }
[16:04:27.415]     ...future.result$conditions <- ...future.conditions
[16:04:27.415]     ...future.result$finished <- base::Sys.time()
[16:04:27.415]     ...future.result
[16:04:27.415] }
[16:04:27.418] MultisessionFuture started
[16:04:27.418] result() for ClusterFuture ...
[16:04:27.418] receiveMessageFromWorker() for ClusterFuture ...
[16:04:27.418] - Validating connection of MultisessionFuture
[16:04:27.422] - received message: FutureResult
[16:04:27.422] - Received FutureResult
[16:04:27.422] - Erased future from FutureRegistry
[16:04:27.423] result() for ClusterFuture ...
[16:04:27.423] - result already collected: FutureResult
[16:04:27.423] result() for ClusterFuture ... done
[16:04:27.423] receiveMessageFromWorker() for ClusterFuture ... done
[16:04:27.423] result() for ClusterFuture ... done
[16:04:27.423] result() for ClusterFuture ...
[16:04:27.423] - result already collected: FutureResult
[16:04:27.423] result() for ClusterFuture ... done
[1] 42
[16:04:27.424] getGlobalsAndPackages() ...
[16:04:27.424] Searching for globals...
[16:04:27.424] - globals found: [1] ‘{’
[16:04:27.425] Searching for globals ... DONE
[16:04:27.425] Resolving globals: FALSE
[16:04:27.425] 
[16:04:27.425] 
[16:04:27.425] getGlobalsAndPackages() ... DONE
SequentialFuture:
Label: ‘<none>’
Expression:
{
    42L
}
Lazy evaluation: FALSE
Asynchronous evaluation: FALSE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: FALSE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: d28260de-1d23-12a3-c9c3-d803e53b2452
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[16:04:27.426] Packages needed by the future expression (n = 0): <none>
[16:04:27.426] Packages needed by future strategies (n = 0): <none>
[16:04:27.427] {
[16:04:27.427]     {
[16:04:27.427]         {
[16:04:27.427]             ...future.startTime <- base::Sys.time()
[16:04:27.427]             {
[16:04:27.427]                 {
[16:04:27.427]                   {
[16:04:27.427]                     base::local({
[16:04:27.427]                       has_future <- base::requireNamespace("future", 
[16:04:27.427]                         quietly = TRUE)
[16:04:27.427]                       if (has_future) {
[16:04:27.427]                         ns <- base::getNamespace("future")
[16:04:27.427]                         version <- ns[[".package"]][["version"]]
[16:04:27.427]                         if (is.null(version)) 
[16:04:27.427]                           version <- utils::packageVersion("future")
[16:04:27.427]                       }
[16:04:27.427]                       else {
[16:04:27.427]                         version <- NULL
[16:04:27.427]                       }
[16:04:27.427]                       if (!has_future || version < "1.8.0") {
[16:04:27.427]                         info <- base::c(r_version = base::gsub("R version ", 
[16:04:27.427]                           "", base::R.version$version.string), 
[16:04:27.427]                           platform = base::sprintf("%s (%s-bit)", 
[16:04:27.427]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:04:27.427]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[16:04:27.427]                             "release", "version")], collapse = " "), 
[16:04:27.427]                           hostname = base::Sys.info()[["nodename"]])
[16:04:27.427]                         info <- base::sprintf("%s: %s", base::names(info), 
[16:04:27.427]                           info)
[16:04:27.427]                         info <- base::paste(info, collapse = "; ")
[16:04:27.427]                         if (!has_future) {
[16:04:27.427]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:04:27.427]                             info)
[16:04:27.427]                         }
[16:04:27.427]                         else {
[16:04:27.427]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:04:27.427]                             info, version)
[16:04:27.427]                         }
[16:04:27.427]                         base::stop(msg)
[16:04:27.427]                       }
[16:04:27.427]                     })
[16:04:27.427]                   }
[16:04:27.427]                   options(future.plan = NULL)
[16:04:27.427]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:04:27.427]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:04:27.427]                 }
[16:04:27.427]                 ...future.workdir <- getwd()
[16:04:27.427]             }
[16:04:27.427]             ...future.oldOptions <- base::as.list(base::.Options)
[16:04:27.427]             ...future.oldEnvVars <- base::Sys.getenv()
[16:04:27.427]         }
[16:04:27.427]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:04:27.427]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:04:27.427]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:04:27.427]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:04:27.427]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:04:27.427]             future.stdout.windows.reencode = NULL, width = 80L)
[16:04:27.427]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:04:27.427]             base::names(...future.oldOptions))
[16:04:27.427]     }
[16:04:27.427]     if (FALSE) {
[16:04:27.427]     }
[16:04:27.427]     else {
[16:04:27.427]         if (TRUE) {
[16:04:27.427]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:04:27.427]                 open = "w")
[16:04:27.427]         }
[16:04:27.427]         else {
[16:04:27.427]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:04:27.427]                 windows = "NUL", "/dev/null"), open = "w")
[16:04:27.427]         }
[16:04:27.427]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:04:27.427]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:04:27.427]             base::sink(type = "output", split = FALSE)
[16:04:27.427]             base::close(...future.stdout)
[16:04:27.427]         }, add = TRUE)
[16:04:27.427]     }
[16:04:27.427]     ...future.frame <- base::sys.nframe()
[16:04:27.427]     ...future.conditions <- base::list()
[16:04:27.427]     ...future.rng <- base::globalenv()$.Random.seed
[16:04:27.427]     if (FALSE) {
[16:04:27.427]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:04:27.427]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:04:27.427]     }
[16:04:27.427]     ...future.result <- base::tryCatch({
[16:04:27.427]         base::withCallingHandlers({
[16:04:27.427]             ...future.value <- base::withVisible(base::local({
[16:04:27.427]                 42L
[16:04:27.427]             }))
[16:04:27.427]             future::FutureResult(value = ...future.value$value, 
[16:04:27.427]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:04:27.427]                   ...future.rng), globalenv = if (FALSE) 
[16:04:27.427]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:04:27.427]                     ...future.globalenv.names))
[16:04:27.427]                 else NULL, started = ...future.startTime, version = "1.8")
[16:04:27.427]         }, condition = base::local({
[16:04:27.427]             c <- base::c
[16:04:27.427]             inherits <- base::inherits
[16:04:27.427]             invokeRestart <- base::invokeRestart
[16:04:27.427]             length <- base::length
[16:04:27.427]             list <- base::list
[16:04:27.427]             seq.int <- base::seq.int
[16:04:27.427]             signalCondition <- base::signalCondition
[16:04:27.427]             sys.calls <- base::sys.calls
[16:04:27.427]             `[[` <- base::`[[`
[16:04:27.427]             `+` <- base::`+`
[16:04:27.427]             `<<-` <- base::`<<-`
[16:04:27.427]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:04:27.427]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:04:27.427]                   3L)]
[16:04:27.427]             }
[16:04:27.427]             function(cond) {
[16:04:27.427]                 is_error <- inherits(cond, "error")
[16:04:27.427]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:04:27.427]                   NULL)
[16:04:27.427]                 if (is_error) {
[16:04:27.427]                   sessionInformation <- function() {
[16:04:27.427]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:04:27.427]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:04:27.427]                       search = base::search(), system = base::Sys.info())
[16:04:27.427]                   }
[16:04:27.427]                   ...future.conditions[[length(...future.conditions) + 
[16:04:27.427]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:04:27.427]                     cond$call), session = sessionInformation(), 
[16:04:27.427]                     timestamp = base::Sys.time(), signaled = 0L)
[16:04:27.427]                   signalCondition(cond)
[16:04:27.427]                 }
[16:04:27.427]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:04:27.427]                 "immediateCondition"))) {
[16:04:27.427]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:04:27.427]                   ...future.conditions[[length(...future.conditions) + 
[16:04:27.427]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:04:27.427]                   if (TRUE && !signal) {
[16:04:27.427]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:04:27.427]                     {
[16:04:27.427]                       inherits <- base::inherits
[16:04:27.427]                       invokeRestart <- base::invokeRestart
[16:04:27.427]                       is.null <- base::is.null
[16:04:27.427]                       muffled <- FALSE
[16:04:27.427]                       if (inherits(cond, "message")) {
[16:04:27.427]                         muffled <- grepl(pattern, "muffleMessage")
[16:04:27.427]                         if (muffled) 
[16:04:27.427]                           invokeRestart("muffleMessage")
[16:04:27.427]                       }
[16:04:27.427]                       else if (inherits(cond, "warning")) {
[16:04:27.427]                         muffled <- grepl(pattern, "muffleWarning")
[16:04:27.427]                         if (muffled) 
[16:04:27.427]                           invokeRestart("muffleWarning")
[16:04:27.427]                       }
[16:04:27.427]                       else if (inherits(cond, "condition")) {
[16:04:27.427]                         if (!is.null(pattern)) {
[16:04:27.427]                           computeRestarts <- base::computeRestarts
[16:04:27.427]                           grepl <- base::grepl
[16:04:27.427]                           restarts <- computeRestarts(cond)
[16:04:27.427]                           for (restart in restarts) {
[16:04:27.427]                             name <- restart$name
[16:04:27.427]                             if (is.null(name)) 
[16:04:27.427]                               next
[16:04:27.427]                             if (!grepl(pattern, name)) 
[16:04:27.427]                               next
[16:04:27.427]                             invokeRestart(restart)
[16:04:27.427]                             muffled <- TRUE
[16:04:27.427]                             break
[16:04:27.427]                           }
[16:04:27.427]                         }
[16:04:27.427]                       }
[16:04:27.427]                       invisible(muffled)
[16:04:27.427]                     }
[16:04:27.427]                     muffleCondition(cond, pattern = "^muffle")
[16:04:27.427]                   }
[16:04:27.427]                 }
[16:04:27.427]                 else {
[16:04:27.427]                   if (TRUE) {
[16:04:27.427]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:04:27.427]                     {
[16:04:27.427]                       inherits <- base::inherits
[16:04:27.427]                       invokeRestart <- base::invokeRestart
[16:04:27.427]                       is.null <- base::is.null
[16:04:27.427]                       muffled <- FALSE
[16:04:27.427]                       if (inherits(cond, "message")) {
[16:04:27.427]                         muffled <- grepl(pattern, "muffleMessage")
[16:04:27.427]                         if (muffled) 
[16:04:27.427]                           invokeRestart("muffleMessage")
[16:04:27.427]                       }
[16:04:27.427]                       else if (inherits(cond, "warning")) {
[16:04:27.427]                         muffled <- grepl(pattern, "muffleWarning")
[16:04:27.427]                         if (muffled) 
[16:04:27.427]                           invokeRestart("muffleWarning")
[16:04:27.427]                       }
[16:04:27.427]                       else if (inherits(cond, "condition")) {
[16:04:27.427]                         if (!is.null(pattern)) {
[16:04:27.427]                           computeRestarts <- base::computeRestarts
[16:04:27.427]                           grepl <- base::grepl
[16:04:27.427]                           restarts <- computeRestarts(cond)
[16:04:27.427]                           for (restart in restarts) {
[16:04:27.427]                             name <- restart$name
[16:04:27.427]                             if (is.null(name)) 
[16:04:27.427]                               next
[16:04:27.427]                             if (!grepl(pattern, name)) 
[16:04:27.427]                               next
[16:04:27.427]                             invokeRestart(restart)
[16:04:27.427]                             muffled <- TRUE
[16:04:27.427]                             break
[16:04:27.427]                           }
[16:04:27.427]                         }
[16:04:27.427]                       }
[16:04:27.427]                       invisible(muffled)
[16:04:27.427]                     }
[16:04:27.427]                     muffleCondition(cond, pattern = "^muffle")
[16:04:27.427]                   }
[16:04:27.427]                 }
[16:04:27.427]             }
[16:04:27.427]         }))
[16:04:27.427]     }, error = function(ex) {
[16:04:27.427]         base::structure(base::list(value = NULL, visible = NULL, 
[16:04:27.427]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:04:27.427]                 ...future.rng), started = ...future.startTime, 
[16:04:27.427]             finished = Sys.time(), session_uuid = NA_character_, 
[16:04:27.427]             version = "1.8"), class = "FutureResult")
[16:04:27.427]     }, finally = {
[16:04:27.427]         if (!identical(...future.workdir, getwd())) 
[16:04:27.427]             setwd(...future.workdir)
[16:04:27.427]         {
[16:04:27.427]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:04:27.427]                 ...future.oldOptions$nwarnings <- NULL
[16:04:27.427]             }
[16:04:27.427]             base::options(...future.oldOptions)
[16:04:27.427]             if (.Platform$OS.type == "windows") {
[16:04:27.427]                 old_names <- names(...future.oldEnvVars)
[16:04:27.427]                 envs <- base::Sys.getenv()
[16:04:27.427]                 names <- names(envs)
[16:04:27.427]                 common <- intersect(names, old_names)
[16:04:27.427]                 added <- setdiff(names, old_names)
[16:04:27.427]                 removed <- setdiff(old_names, names)
[16:04:27.427]                 changed <- common[...future.oldEnvVars[common] != 
[16:04:27.427]                   envs[common]]
[16:04:27.427]                 NAMES <- toupper(changed)
[16:04:27.427]                 args <- list()
[16:04:27.427]                 for (kk in seq_along(NAMES)) {
[16:04:27.427]                   name <- changed[[kk]]
[16:04:27.427]                   NAME <- NAMES[[kk]]
[16:04:27.427]                   if (name != NAME && is.element(NAME, old_names)) 
[16:04:27.427]                     next
[16:04:27.427]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:04:27.427]                 }
[16:04:27.427]                 NAMES <- toupper(added)
[16:04:27.427]                 for (kk in seq_along(NAMES)) {
[16:04:27.427]                   name <- added[[kk]]
[16:04:27.427]                   NAME <- NAMES[[kk]]
[16:04:27.427]                   if (name != NAME && is.element(NAME, old_names)) 
[16:04:27.427]                     next
[16:04:27.427]                   args[[name]] <- ""
[16:04:27.427]                 }
[16:04:27.427]                 NAMES <- toupper(removed)
[16:04:27.427]                 for (kk in seq_along(NAMES)) {
[16:04:27.427]                   name <- removed[[kk]]
[16:04:27.427]                   NAME <- NAMES[[kk]]
[16:04:27.427]                   if (name != NAME && is.element(NAME, old_names)) 
[16:04:27.427]                     next
[16:04:27.427]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:04:27.427]                 }
[16:04:27.427]                 if (length(args) > 0) 
[16:04:27.427]                   base::do.call(base::Sys.setenv, args = args)
[16:04:27.427]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:04:27.427]             }
[16:04:27.427]             else {
[16:04:27.427]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:04:27.427]             }
[16:04:27.427]             {
[16:04:27.427]                 if (base::length(...future.futureOptionsAdded) > 
[16:04:27.427]                   0L) {
[16:04:27.427]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:04:27.427]                   base::names(opts) <- ...future.futureOptionsAdded
[16:04:27.427]                   base::options(opts)
[16:04:27.427]                 }
[16:04:27.427]                 {
[16:04:27.427]                   {
[16:04:27.427]                     NULL
[16:04:27.427]                     RNGkind("Mersenne-Twister")
[16:04:27.427]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[16:04:27.427]                       inherits = FALSE)
[16:04:27.427]                   }
[16:04:27.427]                   options(future.plan = NULL)
[16:04:27.427]                   if (is.na(NA_character_)) 
[16:04:27.427]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:04:27.427]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:04:27.427]                   future::plan(list(function (...) 
[16:04:27.427]                   {
[16:04:27.427]                     Future(1)
[16:04:27.427]                   }), .cleanup = FALSE, .init = FALSE)
[16:04:27.427]                 }
[16:04:27.427]             }
[16:04:27.427]         }
[16:04:27.427]     })
[16:04:27.427]     if (TRUE) {
[16:04:27.427]         base::sink(type = "output", split = FALSE)
[16:04:27.427]         if (TRUE) {
[16:04:27.427]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:04:27.427]         }
[16:04:27.427]         else {
[16:04:27.427]             ...future.result["stdout"] <- base::list(NULL)
[16:04:27.427]         }
[16:04:27.427]         base::close(...future.stdout)
[16:04:27.427]         ...future.stdout <- NULL
[16:04:27.427]     }
[16:04:27.427]     ...future.result$conditions <- ...future.conditions
[16:04:27.427]     ...future.result$finished <- base::Sys.time()
[16:04:27.427]     ...future.result
[16:04:27.427] }
[16:04:27.429] plan(): Setting new future strategy stack:
[16:04:27.429] List of future strategies:
[16:04:27.429] 1. sequential:
[16:04:27.429]    - args: function (..., envir = parent.frame())
[16:04:27.429]    - tweaked: FALSE
[16:04:27.429]    - call: NULL
[16:04:27.429] plan(): nbrOfWorkers() = 1
[16:04:27.430] plan(): Setting new future strategy stack:
[16:04:27.430] List of future strategies:
[16:04:27.430] 1. future:
[16:04:27.430]    - args: function (...)
[16:04:27.430]    - tweaked: FALSE
[16:04:27.430]    - call: plan(foo)
[16:04:27.431] plan(): nbrOfWorkers() = Inf
[16:04:27.431] SequentialFuture started (and completed)
[1] 42
[16:04:27.431] getGlobalsAndPackages() ...
[16:04:27.431] Searching for globals...
[16:04:27.432] - globals found: [1] ‘{’
[16:04:27.432] Searching for globals ... DONE
[16:04:27.432] Resolving globals: FALSE
[16:04:27.433] 
[16:04:27.433] 
[16:04:27.433] getGlobalsAndPackages() ... DONE
[16:04:27.433] Packages needed by the future expression (n = 0): <none>
[16:04:27.433] Packages needed by future strategies (n = 0): <none>
[16:04:27.434] {
[16:04:27.434]     {
[16:04:27.434]         {
[16:04:27.434]             ...future.startTime <- base::Sys.time()
[16:04:27.434]             {
[16:04:27.434]                 {
[16:04:27.434]                   {
[16:04:27.434]                     base::local({
[16:04:27.434]                       has_future <- base::requireNamespace("future", 
[16:04:27.434]                         quietly = TRUE)
[16:04:27.434]                       if (has_future) {
[16:04:27.434]                         ns <- base::getNamespace("future")
[16:04:27.434]                         version <- ns[[".package"]][["version"]]
[16:04:27.434]                         if (is.null(version)) 
[16:04:27.434]                           version <- utils::packageVersion("future")
[16:04:27.434]                       }
[16:04:27.434]                       else {
[16:04:27.434]                         version <- NULL
[16:04:27.434]                       }
[16:04:27.434]                       if (!has_future || version < "1.8.0") {
[16:04:27.434]                         info <- base::c(r_version = base::gsub("R version ", 
[16:04:27.434]                           "", base::R.version$version.string), 
[16:04:27.434]                           platform = base::sprintf("%s (%s-bit)", 
[16:04:27.434]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:04:27.434]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[16:04:27.434]                             "release", "version")], collapse = " "), 
[16:04:27.434]                           hostname = base::Sys.info()[["nodename"]])
[16:04:27.434]                         info <- base::sprintf("%s: %s", base::names(info), 
[16:04:27.434]                           info)
[16:04:27.434]                         info <- base::paste(info, collapse = "; ")
[16:04:27.434]                         if (!has_future) {
[16:04:27.434]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:04:27.434]                             info)
[16:04:27.434]                         }
[16:04:27.434]                         else {
[16:04:27.434]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:04:27.434]                             info, version)
[16:04:27.434]                         }
[16:04:27.434]                         base::stop(msg)
[16:04:27.434]                       }
[16:04:27.434]                     })
[16:04:27.434]                   }
[16:04:27.434]                   options(future.plan = NULL)
[16:04:27.434]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:04:27.434]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:04:27.434]                 }
[16:04:27.434]                 ...future.workdir <- getwd()
[16:04:27.434]             }
[16:04:27.434]             ...future.oldOptions <- base::as.list(base::.Options)
[16:04:27.434]             ...future.oldEnvVars <- base::Sys.getenv()
[16:04:27.434]         }
[16:04:27.434]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:04:27.434]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:04:27.434]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:04:27.434]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:04:27.434]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:04:27.434]             future.stdout.windows.reencode = NULL, width = 80L)
[16:04:27.434]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:04:27.434]             base::names(...future.oldOptions))
[16:04:27.434]     }
[16:04:27.434]     if (FALSE) {
[16:04:27.434]     }
[16:04:27.434]     else {
[16:04:27.434]         if (TRUE) {
[16:04:27.434]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:04:27.434]                 open = "w")
[16:04:27.434]         }
[16:04:27.434]         else {
[16:04:27.434]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:04:27.434]                 windows = "NUL", "/dev/null"), open = "w")
[16:04:27.434]         }
[16:04:27.434]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:04:27.434]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:04:27.434]             base::sink(type = "output", split = FALSE)
[16:04:27.434]             base::close(...future.stdout)
[16:04:27.434]         }, add = TRUE)
[16:04:27.434]     }
[16:04:27.434]     ...future.frame <- base::sys.nframe()
[16:04:27.434]     ...future.conditions <- base::list()
[16:04:27.434]     ...future.rng <- base::globalenv()$.Random.seed
[16:04:27.434]     if (FALSE) {
[16:04:27.434]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:04:27.434]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:04:27.434]     }
[16:04:27.434]     ...future.result <- base::tryCatch({
[16:04:27.434]         base::withCallingHandlers({
[16:04:27.434]             ...future.value <- base::withVisible(base::local({
[16:04:27.434]                 42L
[16:04:27.434]             }))
[16:04:27.434]             future::FutureResult(value = ...future.value$value, 
[16:04:27.434]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:04:27.434]                   ...future.rng), globalenv = if (FALSE) 
[16:04:27.434]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:04:27.434]                     ...future.globalenv.names))
[16:04:27.434]                 else NULL, started = ...future.startTime, version = "1.8")
[16:04:27.434]         }, condition = base::local({
[16:04:27.434]             c <- base::c
[16:04:27.434]             inherits <- base::inherits
[16:04:27.434]             invokeRestart <- base::invokeRestart
[16:04:27.434]             length <- base::length
[16:04:27.434]             list <- base::list
[16:04:27.434]             seq.int <- base::seq.int
[16:04:27.434]             signalCondition <- base::signalCondition
[16:04:27.434]             sys.calls <- base::sys.calls
[16:04:27.434]             `[[` <- base::`[[`
[16:04:27.434]             `+` <- base::`+`
[16:04:27.434]             `<<-` <- base::`<<-`
[16:04:27.434]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:04:27.434]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:04:27.434]                   3L)]
[16:04:27.434]             }
[16:04:27.434]             function(cond) {
[16:04:27.434]                 is_error <- inherits(cond, "error")
[16:04:27.434]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:04:27.434]                   NULL)
[16:04:27.434]                 if (is_error) {
[16:04:27.434]                   sessionInformation <- function() {
[16:04:27.434]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:04:27.434]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:04:27.434]                       search = base::search(), system = base::Sys.info())
[16:04:27.434]                   }
[16:04:27.434]                   ...future.conditions[[length(...future.conditions) + 
[16:04:27.434]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:04:27.434]                     cond$call), session = sessionInformation(), 
[16:04:27.434]                     timestamp = base::Sys.time(), signaled = 0L)
[16:04:27.434]                   signalCondition(cond)
[16:04:27.434]                 }
[16:04:27.434]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:04:27.434]                 "immediateCondition"))) {
[16:04:27.434]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:04:27.434]                   ...future.conditions[[length(...future.conditions) + 
[16:04:27.434]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:04:27.434]                   if (TRUE && !signal) {
[16:04:27.434]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:04:27.434]                     {
[16:04:27.434]                       inherits <- base::inherits
[16:04:27.434]                       invokeRestart <- base::invokeRestart
[16:04:27.434]                       is.null <- base::is.null
[16:04:27.434]                       muffled <- FALSE
[16:04:27.434]                       if (inherits(cond, "message")) {
[16:04:27.434]                         muffled <- grepl(pattern, "muffleMessage")
[16:04:27.434]                         if (muffled) 
[16:04:27.434]                           invokeRestart("muffleMessage")
[16:04:27.434]                       }
[16:04:27.434]                       else if (inherits(cond, "warning")) {
[16:04:27.434]                         muffled <- grepl(pattern, "muffleWarning")
[16:04:27.434]                         if (muffled) 
[16:04:27.434]                           invokeRestart("muffleWarning")
[16:04:27.434]                       }
[16:04:27.434]                       else if (inherits(cond, "condition")) {
[16:04:27.434]                         if (!is.null(pattern)) {
[16:04:27.434]                           computeRestarts <- base::computeRestarts
[16:04:27.434]                           grepl <- base::grepl
[16:04:27.434]                           restarts <- computeRestarts(cond)
[16:04:27.434]                           for (restart in restarts) {
[16:04:27.434]                             name <- restart$name
[16:04:27.434]                             if (is.null(name)) 
[16:04:27.434]                               next
[16:04:27.434]                             if (!grepl(pattern, name)) 
[16:04:27.434]                               next
[16:04:27.434]                             invokeRestart(restart)
[16:04:27.434]                             muffled <- TRUE
[16:04:27.434]                             break
[16:04:27.434]                           }
[16:04:27.434]                         }
[16:04:27.434]                       }
[16:04:27.434]                       invisible(muffled)
[16:04:27.434]                     }
[16:04:27.434]                     muffleCondition(cond, pattern = "^muffle")
[16:04:27.434]                   }
[16:04:27.434]                 }
[16:04:27.434]                 else {
[16:04:27.434]                   if (TRUE) {
[16:04:27.434]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:04:27.434]                     {
[16:04:27.434]                       inherits <- base::inherits
[16:04:27.434]                       invokeRestart <- base::invokeRestart
[16:04:27.434]                       is.null <- base::is.null
[16:04:27.434]                       muffled <- FALSE
[16:04:27.434]                       if (inherits(cond, "message")) {
[16:04:27.434]                         muffled <- grepl(pattern, "muffleMessage")
[16:04:27.434]                         if (muffled) 
[16:04:27.434]                           invokeRestart("muffleMessage")
[16:04:27.434]                       }
[16:04:27.434]                       else if (inherits(cond, "warning")) {
[16:04:27.434]                         muffled <- grepl(pattern, "muffleWarning")
[16:04:27.434]                         if (muffled) 
[16:04:27.434]                           invokeRestart("muffleWarning")
[16:04:27.434]                       }
[16:04:27.434]                       else if (inherits(cond, "condition")) {
[16:04:27.434]                         if (!is.null(pattern)) {
[16:04:27.434]                           computeRestarts <- base::computeRestarts
[16:04:27.434]                           grepl <- base::grepl
[16:04:27.434]                           restarts <- computeRestarts(cond)
[16:04:27.434]                           for (restart in restarts) {
[16:04:27.434]                             name <- restart$name
[16:04:27.434]                             if (is.null(name)) 
[16:04:27.434]                               next
[16:04:27.434]                             if (!grepl(pattern, name)) 
[16:04:27.434]                               next
[16:04:27.434]                             invokeRestart(restart)
[16:04:27.434]                             muffled <- TRUE
[16:04:27.434]                             break
[16:04:27.434]                           }
[16:04:27.434]                         }
[16:04:27.434]                       }
[16:04:27.434]                       invisible(muffled)
[16:04:27.434]                     }
[16:04:27.434]                     muffleCondition(cond, pattern = "^muffle")
[16:04:27.434]                   }
[16:04:27.434]                 }
[16:04:27.434]             }
[16:04:27.434]         }))
[16:04:27.434]     }, error = function(ex) {
[16:04:27.434]         base::structure(base::list(value = NULL, visible = NULL, 
[16:04:27.434]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:04:27.434]                 ...future.rng), started = ...future.startTime, 
[16:04:27.434]             finished = Sys.time(), session_uuid = NA_character_, 
[16:04:27.434]             version = "1.8"), class = "FutureResult")
[16:04:27.434]     }, finally = {
[16:04:27.434]         if (!identical(...future.workdir, getwd())) 
[16:04:27.434]             setwd(...future.workdir)
[16:04:27.434]         {
[16:04:27.434]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:04:27.434]                 ...future.oldOptions$nwarnings <- NULL
[16:04:27.434]             }
[16:04:27.434]             base::options(...future.oldOptions)
[16:04:27.434]             if (.Platform$OS.type == "windows") {
[16:04:27.434]                 old_names <- names(...future.oldEnvVars)
[16:04:27.434]                 envs <- base::Sys.getenv()
[16:04:27.434]                 names <- names(envs)
[16:04:27.434]                 common <- intersect(names, old_names)
[16:04:27.434]                 added <- setdiff(names, old_names)
[16:04:27.434]                 removed <- setdiff(old_names, names)
[16:04:27.434]                 changed <- common[...future.oldEnvVars[common] != 
[16:04:27.434]                   envs[common]]
[16:04:27.434]                 NAMES <- toupper(changed)
[16:04:27.434]                 args <- list()
[16:04:27.434]                 for (kk in seq_along(NAMES)) {
[16:04:27.434]                   name <- changed[[kk]]
[16:04:27.434]                   NAME <- NAMES[[kk]]
[16:04:27.434]                   if (name != NAME && is.element(NAME, old_names)) 
[16:04:27.434]                     next
[16:04:27.434]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:04:27.434]                 }
[16:04:27.434]                 NAMES <- toupper(added)
[16:04:27.434]                 for (kk in seq_along(NAMES)) {
[16:04:27.434]                   name <- added[[kk]]
[16:04:27.434]                   NAME <- NAMES[[kk]]
[16:04:27.434]                   if (name != NAME && is.element(NAME, old_names)) 
[16:04:27.434]                     next
[16:04:27.434]                   args[[name]] <- ""
[16:04:27.434]                 }
[16:04:27.434]                 NAMES <- toupper(removed)
[16:04:27.434]                 for (kk in seq_along(NAMES)) {
[16:04:27.434]                   name <- removed[[kk]]
[16:04:27.434]                   NAME <- NAMES[[kk]]
[16:04:27.434]                   if (name != NAME && is.element(NAME, old_names)) 
[16:04:27.434]                     next
[16:04:27.434]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:04:27.434]                 }
[16:04:27.434]                 if (length(args) > 0) 
[16:04:27.434]                   base::do.call(base::Sys.setenv, args = args)
[16:04:27.434]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:04:27.434]             }
[16:04:27.434]             else {
[16:04:27.434]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:04:27.434]             }
[16:04:27.434]             {
[16:04:27.434]                 if (base::length(...future.futureOptionsAdded) > 
[16:04:27.434]                   0L) {
[16:04:27.434]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:04:27.434]                   base::names(opts) <- ...future.futureOptionsAdded
[16:04:27.434]                   base::options(opts)
[16:04:27.434]                 }
[16:04:27.434]                 {
[16:04:27.434]                   {
[16:04:27.434]                     NULL
[16:04:27.434]                     RNGkind("Mersenne-Twister")
[16:04:27.434]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[16:04:27.434]                       inherits = FALSE)
[16:04:27.434]                   }
[16:04:27.434]                   options(future.plan = NULL)
[16:04:27.434]                   if (is.na(NA_character_)) 
[16:04:27.434]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:04:27.434]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:04:27.434]                   future::plan(list(function (...) 
[16:04:27.434]                   {
[16:04:27.434]                     Future(1)
[16:04:27.434]                   }), .cleanup = FALSE, .init = FALSE)
[16:04:27.434]                 }
[16:04:27.434]             }
[16:04:27.434]         }
[16:04:27.434]     })
[16:04:27.434]     if (TRUE) {
[16:04:27.434]         base::sink(type = "output", split = FALSE)
[16:04:27.434]         if (TRUE) {
[16:04:27.434]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:04:27.434]         }
[16:04:27.434]         else {
[16:04:27.434]             ...future.result["stdout"] <- base::list(NULL)
[16:04:27.434]         }
[16:04:27.434]         base::close(...future.stdout)
[16:04:27.434]         ...future.stdout <- NULL
[16:04:27.434]     }
[16:04:27.434]     ...future.result$conditions <- ...future.conditions
[16:04:27.434]     ...future.result$finished <- base::Sys.time()
[16:04:27.434]     ...future.result
[16:04:27.434] }
[16:04:27.436] plan(): Setting new future strategy stack:
[16:04:27.436] List of future strategies:
[16:04:27.436] 1. sequential:
[16:04:27.436]    - args: function (..., envir = parent.frame())
[16:04:27.436]    - tweaked: FALSE
[16:04:27.436]    - call: NULL
[16:04:27.436] plan(): nbrOfWorkers() = 1
[16:04:27.437] plan(): Setting new future strategy stack:
[16:04:27.437] List of future strategies:
[16:04:27.437] 1. future:
[16:04:27.437]    - args: function (...)
[16:04:27.437]    - tweaked: FALSE
[16:04:27.437]    - call: plan(foo)
[16:04:27.438] plan(): nbrOfWorkers() = Inf
[16:04:27.438] SequentialFuture started (and completed)
[1] 42
[16:04:27.438] getGlobalsAndPackages() ...
[16:04:27.438] 
[16:04:27.439] - globals: [0] <none>
[16:04:27.439] getGlobalsAndPackages() ... DONE
MulticoreFuture:
Label: ‘<none>’
Expression:
{
    42L
}
Lazy evaluation: FALSE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: 0x55c27983f128
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: FALSE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: d28260de-1d23-12a3-c9c3-d803e53b2452
Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[16:04:27.441] Packages needed by the future expression (n = 0): <none>
[16:04:27.441] Packages needed by future strategies (n = 0): <none>
[16:04:27.441] {
[16:04:27.441]     {
[16:04:27.441]         {
[16:04:27.441]             ...future.startTime <- base::Sys.time()
[16:04:27.441]             {
[16:04:27.441]                 {
[16:04:27.441]                   {
[16:04:27.441]                     {
[16:04:27.441]                       base::local({
[16:04:27.441]                         has_future <- base::requireNamespace("future", 
[16:04:27.441]                           quietly = TRUE)
[16:04:27.441]                         if (has_future) {
[16:04:27.441]                           ns <- base::getNamespace("future")
[16:04:27.441]                           version <- ns[[".package"]][["version"]]
[16:04:27.441]                           if (is.null(version)) 
[16:04:27.441]                             version <- utils::packageVersion("future")
[16:04:27.441]                         }
[16:04:27.441]                         else {
[16:04:27.441]                           version <- NULL
[16:04:27.441]                         }
[16:04:27.441]                         if (!has_future || version < "1.8.0") {
[16:04:27.441]                           info <- base::c(r_version = base::gsub("R version ", 
[16:04:27.441]                             "", base::R.version$version.string), 
[16:04:27.441]                             platform = base::sprintf("%s (%s-bit)", 
[16:04:27.441]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:04:27.441]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[16:04:27.441]                               "release", "version")], collapse = " "), 
[16:04:27.441]                             hostname = base::Sys.info()[["nodename"]])
[16:04:27.441]                           info <- base::sprintf("%s: %s", base::names(info), 
[16:04:27.441]                             info)
[16:04:27.441]                           info <- base::paste(info, collapse = "; ")
[16:04:27.441]                           if (!has_future) {
[16:04:27.441]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:04:27.441]                               info)
[16:04:27.441]                           }
[16:04:27.441]                           else {
[16:04:27.441]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:04:27.441]                               info, version)
[16:04:27.441]                           }
[16:04:27.441]                           base::stop(msg)
[16:04:27.441]                         }
[16:04:27.441]                       })
[16:04:27.441]                     }
[16:04:27.441]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[16:04:27.441]                     base::options(mc.cores = 1L)
[16:04:27.441]                   }
[16:04:27.441]                   options(future.plan = NULL)
[16:04:27.441]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:04:27.441]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:04:27.441]                 }
[16:04:27.441]                 ...future.workdir <- getwd()
[16:04:27.441]             }
[16:04:27.441]             ...future.oldOptions <- base::as.list(base::.Options)
[16:04:27.441]             ...future.oldEnvVars <- base::Sys.getenv()
[16:04:27.441]         }
[16:04:27.441]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:04:27.441]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:04:27.441]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:04:27.441]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:04:27.441]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:04:27.441]             future.stdout.windows.reencode = NULL, width = 80L)
[16:04:27.441]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:04:27.441]             base::names(...future.oldOptions))
[16:04:27.441]     }
[16:04:27.441]     if (FALSE) {
[16:04:27.441]     }
[16:04:27.441]     else {
[16:04:27.441]         if (TRUE) {
[16:04:27.441]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:04:27.441]                 open = "w")
[16:04:27.441]         }
[16:04:27.441]         else {
[16:04:27.441]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:04:27.441]                 windows = "NUL", "/dev/null"), open = "w")
[16:04:27.441]         }
[16:04:27.441]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:04:27.441]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:04:27.441]             base::sink(type = "output", split = FALSE)
[16:04:27.441]             base::close(...future.stdout)
[16:04:27.441]         }, add = TRUE)
[16:04:27.441]     }
[16:04:27.441]     ...future.frame <- base::sys.nframe()
[16:04:27.441]     ...future.conditions <- base::list()
[16:04:27.441]     ...future.rng <- base::globalenv()$.Random.seed
[16:04:27.441]     if (FALSE) {
[16:04:27.441]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:04:27.441]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:04:27.441]     }
[16:04:27.441]     ...future.result <- base::tryCatch({
[16:04:27.441]         base::withCallingHandlers({
[16:04:27.441]             ...future.value <- base::withVisible(base::local({
[16:04:27.441]                 withCallingHandlers({
[16:04:27.441]                   {
[16:04:27.441]                     42L
[16:04:27.441]                   }
[16:04:27.441]                 }, immediateCondition = function(cond) {
[16:04:27.441]                   save_rds <- function (object, pathname, ...) 
[16:04:27.441]                   {
[16:04:27.441]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[16:04:27.441]                     if (file_test("-f", pathname_tmp)) {
[16:04:27.441]                       fi_tmp <- file.info(pathname_tmp)
[16:04:27.441]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[16:04:27.441]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:04:27.441]                         fi_tmp[["mtime"]])
[16:04:27.441]                     }
[16:04:27.441]                     tryCatch({
[16:04:27.441]                       saveRDS(object, file = pathname_tmp, ...)
[16:04:27.441]                     }, error = function(ex) {
[16:04:27.441]                       msg <- conditionMessage(ex)
[16:04:27.441]                       fi_tmp <- file.info(pathname_tmp)
[16:04:27.441]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[16:04:27.441]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:04:27.441]                         fi_tmp[["mtime"]], msg)
[16:04:27.441]                       ex$message <- msg
[16:04:27.441]                       stop(ex)
[16:04:27.441]                     })
[16:04:27.441]                     stopifnot(file_test("-f", pathname_tmp))
[16:04:27.441]                     res <- file.rename(from = pathname_tmp, to = pathname)
[16:04:27.441]                     if (!res || file_test("-f", pathname_tmp)) {
[16:04:27.441]                       fi_tmp <- file.info(pathname_tmp)
[16:04:27.441]                       fi <- file.info(pathname)
[16:04:27.441]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[16:04:27.441]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:04:27.441]                         fi_tmp[["mtime"]], sQuote(pathname), 
[16:04:27.441]                         fi[["size"]], fi[["mtime"]])
[16:04:27.441]                       stop(msg)
[16:04:27.441]                     }
[16:04:27.441]                     invisible(pathname)
[16:04:27.441]                   }
[16:04:27.441]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[16:04:27.441]                     rootPath = tempdir()) 
[16:04:27.441]                   {
[16:04:27.441]                     obj <- list(time = Sys.time(), condition = cond)
[16:04:27.441]                     file <- tempfile(pattern = class(cond)[1], 
[16:04:27.441]                       tmpdir = path, fileext = ".rds")
[16:04:27.441]                     save_rds(obj, file)
[16:04:27.441]                   }
[16:04:27.441]                   saveImmediateCondition(cond, path = "/tmp/Rtmp12MkJo/.future/immediateConditions")
[16:04:27.441]                   muffleCondition <- function (cond, pattern = "^muffle") 
[16:04:27.441]                   {
[16:04:27.441]                     inherits <- base::inherits
[16:04:27.441]                     invokeRestart <- base::invokeRestart
[16:04:27.441]                     is.null <- base::is.null
[16:04:27.441]                     muffled <- FALSE
[16:04:27.441]                     if (inherits(cond, "message")) {
[16:04:27.441]                       muffled <- grepl(pattern, "muffleMessage")
[16:04:27.441]                       if (muffled) 
[16:04:27.441]                         invokeRestart("muffleMessage")
[16:04:27.441]                     }
[16:04:27.441]                     else if (inherits(cond, "warning")) {
[16:04:27.441]                       muffled <- grepl(pattern, "muffleWarning")
[16:04:27.441]                       if (muffled) 
[16:04:27.441]                         invokeRestart("muffleWarning")
[16:04:27.441]                     }
[16:04:27.441]                     else if (inherits(cond, "condition")) {
[16:04:27.441]                       if (!is.null(pattern)) {
[16:04:27.441]                         computeRestarts <- base::computeRestarts
[16:04:27.441]                         grepl <- base::grepl
[16:04:27.441]                         restarts <- computeRestarts(cond)
[16:04:27.441]                         for (restart in restarts) {
[16:04:27.441]                           name <- restart$name
[16:04:27.441]                           if (is.null(name)) 
[16:04:27.441]                             next
[16:04:27.441]                           if (!grepl(pattern, name)) 
[16:04:27.441]                             next
[16:04:27.441]                           invokeRestart(restart)
[16:04:27.441]                           muffled <- TRUE
[16:04:27.441]                           break
[16:04:27.441]                         }
[16:04:27.441]                       }
[16:04:27.441]                     }
[16:04:27.441]                     invisible(muffled)
[16:04:27.441]                   }
[16:04:27.441]                   muffleCondition(cond)
[16:04:27.441]                 })
[16:04:27.441]             }))
[16:04:27.441]             future::FutureResult(value = ...future.value$value, 
[16:04:27.441]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:04:27.441]                   ...future.rng), globalenv = if (FALSE) 
[16:04:27.441]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:04:27.441]                     ...future.globalenv.names))
[16:04:27.441]                 else NULL, started = ...future.startTime, version = "1.8")
[16:04:27.441]         }, condition = base::local({
[16:04:27.441]             c <- base::c
[16:04:27.441]             inherits <- base::inherits
[16:04:27.441]             invokeRestart <- base::invokeRestart
[16:04:27.441]             length <- base::length
[16:04:27.441]             list <- base::list
[16:04:27.441]             seq.int <- base::seq.int
[16:04:27.441]             signalCondition <- base::signalCondition
[16:04:27.441]             sys.calls <- base::sys.calls
[16:04:27.441]             `[[` <- base::`[[`
[16:04:27.441]             `+` <- base::`+`
[16:04:27.441]             `<<-` <- base::`<<-`
[16:04:27.441]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:04:27.441]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:04:27.441]                   3L)]
[16:04:27.441]             }
[16:04:27.441]             function(cond) {
[16:04:27.441]                 is_error <- inherits(cond, "error")
[16:04:27.441]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:04:27.441]                   NULL)
[16:04:27.441]                 if (is_error) {
[16:04:27.441]                   sessionInformation <- function() {
[16:04:27.441]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:04:27.441]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:04:27.441]                       search = base::search(), system = base::Sys.info())
[16:04:27.441]                   }
[16:04:27.441]                   ...future.conditions[[length(...future.conditions) + 
[16:04:27.441]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:04:27.441]                     cond$call), session = sessionInformation(), 
[16:04:27.441]                     timestamp = base::Sys.time(), signaled = 0L)
[16:04:27.441]                   signalCondition(cond)
[16:04:27.441]                 }
[16:04:27.441]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:04:27.441]                 "immediateCondition"))) {
[16:04:27.441]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:04:27.441]                   ...future.conditions[[length(...future.conditions) + 
[16:04:27.441]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:04:27.441]                   if (TRUE && !signal) {
[16:04:27.441]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:04:27.441]                     {
[16:04:27.441]                       inherits <- base::inherits
[16:04:27.441]                       invokeRestart <- base::invokeRestart
[16:04:27.441]                       is.null <- base::is.null
[16:04:27.441]                       muffled <- FALSE
[16:04:27.441]                       if (inherits(cond, "message")) {
[16:04:27.441]                         muffled <- grepl(pattern, "muffleMessage")
[16:04:27.441]                         if (muffled) 
[16:04:27.441]                           invokeRestart("muffleMessage")
[16:04:27.441]                       }
[16:04:27.441]                       else if (inherits(cond, "warning")) {
[16:04:27.441]                         muffled <- grepl(pattern, "muffleWarning")
[16:04:27.441]                         if (muffled) 
[16:04:27.441]                           invokeRestart("muffleWarning")
[16:04:27.441]                       }
[16:04:27.441]                       else if (inherits(cond, "condition")) {
[16:04:27.441]                         if (!is.null(pattern)) {
[16:04:27.441]                           computeRestarts <- base::computeRestarts
[16:04:27.441]                           grepl <- base::grepl
[16:04:27.441]                           restarts <- computeRestarts(cond)
[16:04:27.441]                           for (restart in restarts) {
[16:04:27.441]                             name <- restart$name
[16:04:27.441]                             if (is.null(name)) 
[16:04:27.441]                               next
[16:04:27.441]                             if (!grepl(pattern, name)) 
[16:04:27.441]                               next
[16:04:27.441]                             invokeRestart(restart)
[16:04:27.441]                             muffled <- TRUE
[16:04:27.441]                             break
[16:04:27.441]                           }
[16:04:27.441]                         }
[16:04:27.441]                       }
[16:04:27.441]                       invisible(muffled)
[16:04:27.441]                     }
[16:04:27.441]                     muffleCondition(cond, pattern = "^muffle")
[16:04:27.441]                   }
[16:04:27.441]                 }
[16:04:27.441]                 else {
[16:04:27.441]                   if (TRUE) {
[16:04:27.441]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:04:27.441]                     {
[16:04:27.441]                       inherits <- base::inherits
[16:04:27.441]                       invokeRestart <- base::invokeRestart
[16:04:27.441]                       is.null <- base::is.null
[16:04:27.441]                       muffled <- FALSE
[16:04:27.441]                       if (inherits(cond, "message")) {
[16:04:27.441]                         muffled <- grepl(pattern, "muffleMessage")
[16:04:27.441]                         if (muffled) 
[16:04:27.441]                           invokeRestart("muffleMessage")
[16:04:27.441]                       }
[16:04:27.441]                       else if (inherits(cond, "warning")) {
[16:04:27.441]                         muffled <- grepl(pattern, "muffleWarning")
[16:04:27.441]                         if (muffled) 
[16:04:27.441]                           invokeRestart("muffleWarning")
[16:04:27.441]                       }
[16:04:27.441]                       else if (inherits(cond, "condition")) {
[16:04:27.441]                         if (!is.null(pattern)) {
[16:04:27.441]                           computeRestarts <- base::computeRestarts
[16:04:27.441]                           grepl <- base::grepl
[16:04:27.441]                           restarts <- computeRestarts(cond)
[16:04:27.441]                           for (restart in restarts) {
[16:04:27.441]                             name <- restart$name
[16:04:27.441]                             if (is.null(name)) 
[16:04:27.441]                               next
[16:04:27.441]                             if (!grepl(pattern, name)) 
[16:04:27.441]                               next
[16:04:27.441]                             invokeRestart(restart)
[16:04:27.441]                             muffled <- TRUE
[16:04:27.441]                             break
[16:04:27.441]                           }
[16:04:27.441]                         }
[16:04:27.441]                       }
[16:04:27.441]                       invisible(muffled)
[16:04:27.441]                     }
[16:04:27.441]                     muffleCondition(cond, pattern = "^muffle")
[16:04:27.441]                   }
[16:04:27.441]                 }
[16:04:27.441]             }
[16:04:27.441]         }))
[16:04:27.441]     }, error = function(ex) {
[16:04:27.441]         base::structure(base::list(value = NULL, visible = NULL, 
[16:04:27.441]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:04:27.441]                 ...future.rng), started = ...future.startTime, 
[16:04:27.441]             finished = Sys.time(), session_uuid = NA_character_, 
[16:04:27.441]             version = "1.8"), class = "FutureResult")
[16:04:27.441]     }, finally = {
[16:04:27.441]         if (!identical(...future.workdir, getwd())) 
[16:04:27.441]             setwd(...future.workdir)
[16:04:27.441]         {
[16:04:27.441]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:04:27.441]                 ...future.oldOptions$nwarnings <- NULL
[16:04:27.441]             }
[16:04:27.441]             base::options(...future.oldOptions)
[16:04:27.441]             if (.Platform$OS.type == "windows") {
[16:04:27.441]                 old_names <- names(...future.oldEnvVars)
[16:04:27.441]                 envs <- base::Sys.getenv()
[16:04:27.441]                 names <- names(envs)
[16:04:27.441]                 common <- intersect(names, old_names)
[16:04:27.441]                 added <- setdiff(names, old_names)
[16:04:27.441]                 removed <- setdiff(old_names, names)
[16:04:27.441]                 changed <- common[...future.oldEnvVars[common] != 
[16:04:27.441]                   envs[common]]
[16:04:27.441]                 NAMES <- toupper(changed)
[16:04:27.441]                 args <- list()
[16:04:27.441]                 for (kk in seq_along(NAMES)) {
[16:04:27.441]                   name <- changed[[kk]]
[16:04:27.441]                   NAME <- NAMES[[kk]]
[16:04:27.441]                   if (name != NAME && is.element(NAME, old_names)) 
[16:04:27.441]                     next
[16:04:27.441]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:04:27.441]                 }
[16:04:27.441]                 NAMES <- toupper(added)
[16:04:27.441]                 for (kk in seq_along(NAMES)) {
[16:04:27.441]                   name <- added[[kk]]
[16:04:27.441]                   NAME <- NAMES[[kk]]
[16:04:27.441]                   if (name != NAME && is.element(NAME, old_names)) 
[16:04:27.441]                     next
[16:04:27.441]                   args[[name]] <- ""
[16:04:27.441]                 }
[16:04:27.441]                 NAMES <- toupper(removed)
[16:04:27.441]                 for (kk in seq_along(NAMES)) {
[16:04:27.441]                   name <- removed[[kk]]
[16:04:27.441]                   NAME <- NAMES[[kk]]
[16:04:27.441]                   if (name != NAME && is.element(NAME, old_names)) 
[16:04:27.441]                     next
[16:04:27.441]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:04:27.441]                 }
[16:04:27.441]                 if (length(args) > 0) 
[16:04:27.441]                   base::do.call(base::Sys.setenv, args = args)
[16:04:27.441]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:04:27.441]             }
[16:04:27.441]             else {
[16:04:27.441]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:04:27.441]             }
[16:04:27.441]             {
[16:04:27.441]                 if (base::length(...future.futureOptionsAdded) > 
[16:04:27.441]                   0L) {
[16:04:27.441]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:04:27.441]                   base::names(opts) <- ...future.futureOptionsAdded
[16:04:27.441]                   base::options(opts)
[16:04:27.441]                 }
[16:04:27.441]                 {
[16:04:27.441]                   {
[16:04:27.441]                     base::options(mc.cores = ...future.mc.cores.old)
[16:04:27.441]                     NULL
[16:04:27.441]                   }
[16:04:27.441]                   options(future.plan = NULL)
[16:04:27.441]                   if (is.na(NA_character_)) 
[16:04:27.441]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:04:27.441]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:04:27.441]                   future::plan(list(function (...) 
[16:04:27.441]                   {
[16:04:27.441]                     Future(1)
[16:04:27.441]                   }), .cleanup = FALSE, .init = FALSE)
[16:04:27.441]                 }
[16:04:27.441]             }
[16:04:27.441]         }
[16:04:27.441]     })
[16:04:27.441]     if (TRUE) {
[16:04:27.441]         base::sink(type = "output", split = FALSE)
[16:04:27.441]         if (TRUE) {
[16:04:27.441]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:04:27.441]         }
[16:04:27.441]         else {
[16:04:27.441]             ...future.result["stdout"] <- base::list(NULL)
[16:04:27.441]         }
[16:04:27.441]         base::close(...future.stdout)
[16:04:27.441]         ...future.stdout <- NULL
[16:04:27.441]     }
[16:04:27.441]     ...future.result$conditions <- ...future.conditions
[16:04:27.441]     ...future.result$finished <- base::Sys.time()
[16:04:27.441]     ...future.result
[16:04:27.441] }
[16:04:27.444] requestCore(): workers = 2
[16:04:27.447] MulticoreFuture started
[16:04:27.448] plan(): Setting new future strategy stack:
[16:04:27.448] List of future strategies:
[16:04:27.448] 1. sequential:
[16:04:27.448]    - args: function (..., envir = parent.frame())
[16:04:27.448]    - tweaked: FALSE
[16:04:27.448]    - call: NULL
[16:04:27.448] result() for MulticoreFuture ...
[16:04:27.449] plan(): nbrOfWorkers() = 1
[16:04:27.450] plan(): Setting new future strategy stack:
[16:04:27.450] List of future strategies:
[16:04:27.450] 1. future:
[16:04:27.450]    - args: function (...)
[16:04:27.450]    - tweaked: FALSE
[16:04:27.450]    - call: plan(foo)
[16:04:27.451] plan(): nbrOfWorkers() = Inf
[16:04:27.452] result() for MulticoreFuture ...
[16:04:27.452] result() for MulticoreFuture ... done
[16:04:27.452] result() for MulticoreFuture ... done
[16:04:27.453] result() for MulticoreFuture ...
[16:04:27.453] result() for MulticoreFuture ... done
[1] 42
[16:04:27.454] getGlobalsAndPackages() ...
[16:04:27.454] 
[16:04:27.454] - globals: [0] <none>
[16:04:27.455] getGlobalsAndPackages() ... DONE
[16:04:27.455] Packages needed by the future expression (n = 0): <none>
[16:04:27.455] Packages needed by future strategies (n = 0): <none>
[16:04:27.456] {
[16:04:27.456]     {
[16:04:27.456]         {
[16:04:27.456]             ...future.startTime <- base::Sys.time()
[16:04:27.456]             {
[16:04:27.456]                 {
[16:04:27.456]                   {
[16:04:27.456]                     {
[16:04:27.456]                       base::local({
[16:04:27.456]                         has_future <- base::requireNamespace("future", 
[16:04:27.456]                           quietly = TRUE)
[16:04:27.456]                         if (has_future) {
[16:04:27.456]                           ns <- base::getNamespace("future")
[16:04:27.456]                           version <- ns[[".package"]][["version"]]
[16:04:27.456]                           if (is.null(version)) 
[16:04:27.456]                             version <- utils::packageVersion("future")
[16:04:27.456]                         }
[16:04:27.456]                         else {
[16:04:27.456]                           version <- NULL
[16:04:27.456]                         }
[16:04:27.456]                         if (!has_future || version < "1.8.0") {
[16:04:27.456]                           info <- base::c(r_version = base::gsub("R version ", 
[16:04:27.456]                             "", base::R.version$version.string), 
[16:04:27.456]                             platform = base::sprintf("%s (%s-bit)", 
[16:04:27.456]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:04:27.456]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[16:04:27.456]                               "release", "version")], collapse = " "), 
[16:04:27.456]                             hostname = base::Sys.info()[["nodename"]])
[16:04:27.456]                           info <- base::sprintf("%s: %s", base::names(info), 
[16:04:27.456]                             info)
[16:04:27.456]                           info <- base::paste(info, collapse = "; ")
[16:04:27.456]                           if (!has_future) {
[16:04:27.456]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:04:27.456]                               info)
[16:04:27.456]                           }
[16:04:27.456]                           else {
[16:04:27.456]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:04:27.456]                               info, version)
[16:04:27.456]                           }
[16:04:27.456]                           base::stop(msg)
[16:04:27.456]                         }
[16:04:27.456]                       })
[16:04:27.456]                     }
[16:04:27.456]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[16:04:27.456]                     base::options(mc.cores = 1L)
[16:04:27.456]                   }
[16:04:27.456]                   options(future.plan = NULL)
[16:04:27.456]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:04:27.456]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:04:27.456]                 }
[16:04:27.456]                 ...future.workdir <- getwd()
[16:04:27.456]             }
[16:04:27.456]             ...future.oldOptions <- base::as.list(base::.Options)
[16:04:27.456]             ...future.oldEnvVars <- base::Sys.getenv()
[16:04:27.456]         }
[16:04:27.456]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:04:27.456]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:04:27.456]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:04:27.456]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:04:27.456]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:04:27.456]             future.stdout.windows.reencode = NULL, width = 80L)
[16:04:27.456]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:04:27.456]             base::names(...future.oldOptions))
[16:04:27.456]     }
[16:04:27.456]     if (FALSE) {
[16:04:27.456]     }
[16:04:27.456]     else {
[16:04:27.456]         if (TRUE) {
[16:04:27.456]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:04:27.456]                 open = "w")
[16:04:27.456]         }
[16:04:27.456]         else {
[16:04:27.456]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:04:27.456]                 windows = "NUL", "/dev/null"), open = "w")
[16:04:27.456]         }
[16:04:27.456]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:04:27.456]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:04:27.456]             base::sink(type = "output", split = FALSE)
[16:04:27.456]             base::close(...future.stdout)
[16:04:27.456]         }, add = TRUE)
[16:04:27.456]     }
[16:04:27.456]     ...future.frame <- base::sys.nframe()
[16:04:27.456]     ...future.conditions <- base::list()
[16:04:27.456]     ...future.rng <- base::globalenv()$.Random.seed
[16:04:27.456]     if (FALSE) {
[16:04:27.456]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:04:27.456]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:04:27.456]     }
[16:04:27.456]     ...future.result <- base::tryCatch({
[16:04:27.456]         base::withCallingHandlers({
[16:04:27.456]             ...future.value <- base::withVisible(base::local({
[16:04:27.456]                 withCallingHandlers({
[16:04:27.456]                   {
[16:04:27.456]                     42L
[16:04:27.456]                   }
[16:04:27.456]                 }, immediateCondition = function(cond) {
[16:04:27.456]                   save_rds <- function (object, pathname, ...) 
[16:04:27.456]                   {
[16:04:27.456]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[16:04:27.456]                     if (file_test("-f", pathname_tmp)) {
[16:04:27.456]                       fi_tmp <- file.info(pathname_tmp)
[16:04:27.456]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[16:04:27.456]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:04:27.456]                         fi_tmp[["mtime"]])
[16:04:27.456]                     }
[16:04:27.456]                     tryCatch({
[16:04:27.456]                       saveRDS(object, file = pathname_tmp, ...)
[16:04:27.456]                     }, error = function(ex) {
[16:04:27.456]                       msg <- conditionMessage(ex)
[16:04:27.456]                       fi_tmp <- file.info(pathname_tmp)
[16:04:27.456]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[16:04:27.456]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:04:27.456]                         fi_tmp[["mtime"]], msg)
[16:04:27.456]                       ex$message <- msg
[16:04:27.456]                       stop(ex)
[16:04:27.456]                     })
[16:04:27.456]                     stopifnot(file_test("-f", pathname_tmp))
[16:04:27.456]                     res <- file.rename(from = pathname_tmp, to = pathname)
[16:04:27.456]                     if (!res || file_test("-f", pathname_tmp)) {
[16:04:27.456]                       fi_tmp <- file.info(pathname_tmp)
[16:04:27.456]                       fi <- file.info(pathname)
[16:04:27.456]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[16:04:27.456]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:04:27.456]                         fi_tmp[["mtime"]], sQuote(pathname), 
[16:04:27.456]                         fi[["size"]], fi[["mtime"]])
[16:04:27.456]                       stop(msg)
[16:04:27.456]                     }
[16:04:27.456]                     invisible(pathname)
[16:04:27.456]                   }
[16:04:27.456]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[16:04:27.456]                     rootPath = tempdir()) 
[16:04:27.456]                   {
[16:04:27.456]                     obj <- list(time = Sys.time(), condition = cond)
[16:04:27.456]                     file <- tempfile(pattern = class(cond)[1], 
[16:04:27.456]                       tmpdir = path, fileext = ".rds")
[16:04:27.456]                     save_rds(obj, file)
[16:04:27.456]                   }
[16:04:27.456]                   saveImmediateCondition(cond, path = "/tmp/Rtmp12MkJo/.future/immediateConditions")
[16:04:27.456]                   muffleCondition <- function (cond, pattern = "^muffle") 
[16:04:27.456]                   {
[16:04:27.456]                     inherits <- base::inherits
[16:04:27.456]                     invokeRestart <- base::invokeRestart
[16:04:27.456]                     is.null <- base::is.null
[16:04:27.456]                     muffled <- FALSE
[16:04:27.456]                     if (inherits(cond, "message")) {
[16:04:27.456]                       muffled <- grepl(pattern, "muffleMessage")
[16:04:27.456]                       if (muffled) 
[16:04:27.456]                         invokeRestart("muffleMessage")
[16:04:27.456]                     }
[16:04:27.456]                     else if (inherits(cond, "warning")) {
[16:04:27.456]                       muffled <- grepl(pattern, "muffleWarning")
[16:04:27.456]                       if (muffled) 
[16:04:27.456]                         invokeRestart("muffleWarning")
[16:04:27.456]                     }
[16:04:27.456]                     else if (inherits(cond, "condition")) {
[16:04:27.456]                       if (!is.null(pattern)) {
[16:04:27.456]                         computeRestarts <- base::computeRestarts
[16:04:27.456]                         grepl <- base::grepl
[16:04:27.456]                         restarts <- computeRestarts(cond)
[16:04:27.456]                         for (restart in restarts) {
[16:04:27.456]                           name <- restart$name
[16:04:27.456]                           if (is.null(name)) 
[16:04:27.456]                             next
[16:04:27.456]                           if (!grepl(pattern, name)) 
[16:04:27.456]                             next
[16:04:27.456]                           invokeRestart(restart)
[16:04:27.456]                           muffled <- TRUE
[16:04:27.456]                           break
[16:04:27.456]                         }
[16:04:27.456]                       }
[16:04:27.456]                     }
[16:04:27.456]                     invisible(muffled)
[16:04:27.456]                   }
[16:04:27.456]                   muffleCondition(cond)
[16:04:27.456]                 })
[16:04:27.456]             }))
[16:04:27.456]             future::FutureResult(value = ...future.value$value, 
[16:04:27.456]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:04:27.456]                   ...future.rng), globalenv = if (FALSE) 
[16:04:27.456]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:04:27.456]                     ...future.globalenv.names))
[16:04:27.456]                 else NULL, started = ...future.startTime, version = "1.8")
[16:04:27.456]         }, condition = base::local({
[16:04:27.456]             c <- base::c
[16:04:27.456]             inherits <- base::inherits
[16:04:27.456]             invokeRestart <- base::invokeRestart
[16:04:27.456]             length <- base::length
[16:04:27.456]             list <- base::list
[16:04:27.456]             seq.int <- base::seq.int
[16:04:27.456]             signalCondition <- base::signalCondition
[16:04:27.456]             sys.calls <- base::sys.calls
[16:04:27.456]             `[[` <- base::`[[`
[16:04:27.456]             `+` <- base::`+`
[16:04:27.456]             `<<-` <- base::`<<-`
[16:04:27.456]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:04:27.456]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:04:27.456]                   3L)]
[16:04:27.456]             }
[16:04:27.456]             function(cond) {
[16:04:27.456]                 is_error <- inherits(cond, "error")
[16:04:27.456]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:04:27.456]                   NULL)
[16:04:27.456]                 if (is_error) {
[16:04:27.456]                   sessionInformation <- function() {
[16:04:27.456]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:04:27.456]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:04:27.456]                       search = base::search(), system = base::Sys.info())
[16:04:27.456]                   }
[16:04:27.456]                   ...future.conditions[[length(...future.conditions) + 
[16:04:27.456]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:04:27.456]                     cond$call), session = sessionInformation(), 
[16:04:27.456]                     timestamp = base::Sys.time(), signaled = 0L)
[16:04:27.456]                   signalCondition(cond)
[16:04:27.456]                 }
[16:04:27.456]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:04:27.456]                 "immediateCondition"))) {
[16:04:27.456]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:04:27.456]                   ...future.conditions[[length(...future.conditions) + 
[16:04:27.456]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:04:27.456]                   if (TRUE && !signal) {
[16:04:27.456]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:04:27.456]                     {
[16:04:27.456]                       inherits <- base::inherits
[16:04:27.456]                       invokeRestart <- base::invokeRestart
[16:04:27.456]                       is.null <- base::is.null
[16:04:27.456]                       muffled <- FALSE
[16:04:27.456]                       if (inherits(cond, "message")) {
[16:04:27.456]                         muffled <- grepl(pattern, "muffleMessage")
[16:04:27.456]                         if (muffled) 
[16:04:27.456]                           invokeRestart("muffleMessage")
[16:04:27.456]                       }
[16:04:27.456]                       else if (inherits(cond, "warning")) {
[16:04:27.456]                         muffled <- grepl(pattern, "muffleWarning")
[16:04:27.456]                         if (muffled) 
[16:04:27.456]                           invokeRestart("muffleWarning")
[16:04:27.456]                       }
[16:04:27.456]                       else if (inherits(cond, "condition")) {
[16:04:27.456]                         if (!is.null(pattern)) {
[16:04:27.456]                           computeRestarts <- base::computeRestarts
[16:04:27.456]                           grepl <- base::grepl
[16:04:27.456]                           restarts <- computeRestarts(cond)
[16:04:27.456]                           for (restart in restarts) {
[16:04:27.456]                             name <- restart$name
[16:04:27.456]                             if (is.null(name)) 
[16:04:27.456]                               next
[16:04:27.456]                             if (!grepl(pattern, name)) 
[16:04:27.456]                               next
[16:04:27.456]                             invokeRestart(restart)
[16:04:27.456]                             muffled <- TRUE
[16:04:27.456]                             break
[16:04:27.456]                           }
[16:04:27.456]                         }
[16:04:27.456]                       }
[16:04:27.456]                       invisible(muffled)
[16:04:27.456]                     }
[16:04:27.456]                     muffleCondition(cond, pattern = "^muffle")
[16:04:27.456]                   }
[16:04:27.456]                 }
[16:04:27.456]                 else {
[16:04:27.456]                   if (TRUE) {
[16:04:27.456]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:04:27.456]                     {
[16:04:27.456]                       inherits <- base::inherits
[16:04:27.456]                       invokeRestart <- base::invokeRestart
[16:04:27.456]                       is.null <- base::is.null
[16:04:27.456]                       muffled <- FALSE
[16:04:27.456]                       if (inherits(cond, "message")) {
[16:04:27.456]                         muffled <- grepl(pattern, "muffleMessage")
[16:04:27.456]                         if (muffled) 
[16:04:27.456]                           invokeRestart("muffleMessage")
[16:04:27.456]                       }
[16:04:27.456]                       else if (inherits(cond, "warning")) {
[16:04:27.456]                         muffled <- grepl(pattern, "muffleWarning")
[16:04:27.456]                         if (muffled) 
[16:04:27.456]                           invokeRestart("muffleWarning")
[16:04:27.456]                       }
[16:04:27.456]                       else if (inherits(cond, "condition")) {
[16:04:27.456]                         if (!is.null(pattern)) {
[16:04:27.456]                           computeRestarts <- base::computeRestarts
[16:04:27.456]                           grepl <- base::grepl
[16:04:27.456]                           restarts <- computeRestarts(cond)
[16:04:27.456]                           for (restart in restarts) {
[16:04:27.456]                             name <- restart$name
[16:04:27.456]                             if (is.null(name)) 
[16:04:27.456]                               next
[16:04:27.456]                             if (!grepl(pattern, name)) 
[16:04:27.456]                               next
[16:04:27.456]                             invokeRestart(restart)
[16:04:27.456]                             muffled <- TRUE
[16:04:27.456]                             break
[16:04:27.456]                           }
[16:04:27.456]                         }
[16:04:27.456]                       }
[16:04:27.456]                       invisible(muffled)
[16:04:27.456]                     }
[16:04:27.456]                     muffleCondition(cond, pattern = "^muffle")
[16:04:27.456]                   }
[16:04:27.456]                 }
[16:04:27.456]             }
[16:04:27.456]         }))
[16:04:27.456]     }, error = function(ex) {
[16:04:27.456]         base::structure(base::list(value = NULL, visible = NULL, 
[16:04:27.456]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:04:27.456]                 ...future.rng), started = ...future.startTime, 
[16:04:27.456]             finished = Sys.time(), session_uuid = NA_character_, 
[16:04:27.456]             version = "1.8"), class = "FutureResult")
[16:04:27.456]     }, finally = {
[16:04:27.456]         if (!identical(...future.workdir, getwd())) 
[16:04:27.456]             setwd(...future.workdir)
[16:04:27.456]         {
[16:04:27.456]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:04:27.456]                 ...future.oldOptions$nwarnings <- NULL
[16:04:27.456]             }
[16:04:27.456]             base::options(...future.oldOptions)
[16:04:27.456]             if (.Platform$OS.type == "windows") {
[16:04:27.456]                 old_names <- names(...future.oldEnvVars)
[16:04:27.456]                 envs <- base::Sys.getenv()
[16:04:27.456]                 names <- names(envs)
[16:04:27.456]                 common <- intersect(names, old_names)
[16:04:27.456]                 added <- setdiff(names, old_names)
[16:04:27.456]                 removed <- setdiff(old_names, names)
[16:04:27.456]                 changed <- common[...future.oldEnvVars[common] != 
[16:04:27.456]                   envs[common]]
[16:04:27.456]                 NAMES <- toupper(changed)
[16:04:27.456]                 args <- list()
[16:04:27.456]                 for (kk in seq_along(NAMES)) {
[16:04:27.456]                   name <- changed[[kk]]
[16:04:27.456]                   NAME <- NAMES[[kk]]
[16:04:27.456]                   if (name != NAME && is.element(NAME, old_names)) 
[16:04:27.456]                     next
[16:04:27.456]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:04:27.456]                 }
[16:04:27.456]                 NAMES <- toupper(added)
[16:04:27.456]                 for (kk in seq_along(NAMES)) {
[16:04:27.456]                   name <- added[[kk]]
[16:04:27.456]                   NAME <- NAMES[[kk]]
[16:04:27.456]                   if (name != NAME && is.element(NAME, old_names)) 
[16:04:27.456]                     next
[16:04:27.456]                   args[[name]] <- ""
[16:04:27.456]                 }
[16:04:27.456]                 NAMES <- toupper(removed)
[16:04:27.456]                 for (kk in seq_along(NAMES)) {
[16:04:27.456]                   name <- removed[[kk]]
[16:04:27.456]                   NAME <- NAMES[[kk]]
[16:04:27.456]                   if (name != NAME && is.element(NAME, old_names)) 
[16:04:27.456]                     next
[16:04:27.456]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:04:27.456]                 }
[16:04:27.456]                 if (length(args) > 0) 
[16:04:27.456]                   base::do.call(base::Sys.setenv, args = args)
[16:04:27.456]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:04:27.456]             }
[16:04:27.456]             else {
[16:04:27.456]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:04:27.456]             }
[16:04:27.456]             {
[16:04:27.456]                 if (base::length(...future.futureOptionsAdded) > 
[16:04:27.456]                   0L) {
[16:04:27.456]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:04:27.456]                   base::names(opts) <- ...future.futureOptionsAdded
[16:04:27.456]                   base::options(opts)
[16:04:27.456]                 }
[16:04:27.456]                 {
[16:04:27.456]                   {
[16:04:27.456]                     base::options(mc.cores = ...future.mc.cores.old)
[16:04:27.456]                     NULL
[16:04:27.456]                   }
[16:04:27.456]                   options(future.plan = NULL)
[16:04:27.456]                   if (is.na(NA_character_)) 
[16:04:27.456]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:04:27.456]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:04:27.456]                   future::plan(list(function (...) 
[16:04:27.456]                   {
[16:04:27.456]                     Future(1)
[16:04:27.456]                   }), .cleanup = FALSE, .init = FALSE)
[16:04:27.456]                 }
[16:04:27.456]             }
[16:04:27.456]         }
[16:04:27.456]     })
[16:04:27.456]     if (TRUE) {
[16:04:27.456]         base::sink(type = "output", split = FALSE)
[16:04:27.456]         if (TRUE) {
[16:04:27.456]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:04:27.456]         }
[16:04:27.456]         else {
[16:04:27.456]             ...future.result["stdout"] <- base::list(NULL)
[16:04:27.456]         }
[16:04:27.456]         base::close(...future.stdout)
[16:04:27.456]         ...future.stdout <- NULL
[16:04:27.456]     }
[16:04:27.456]     ...future.result$conditions <- ...future.conditions
[16:04:27.456]     ...future.result$finished <- base::Sys.time()
[16:04:27.456]     ...future.result
[16:04:27.456] }
[16:04:27.458] requestCore(): workers = 2
[16:04:27.460] MulticoreFuture started
[16:04:27.461] result() for MulticoreFuture ...
[16:04:27.461] plan(): Setting new future strategy stack:
[16:04:27.462] List of future strategies:
[16:04:27.462] 1. sequential:
[16:04:27.462]    - args: function (..., envir = parent.frame())
[16:04:27.462]    - tweaked: FALSE
[16:04:27.462]    - call: NULL
[16:04:27.462] plan(): nbrOfWorkers() = 1
[16:04:27.464] plan(): Setting new future strategy stack:
[16:04:27.464] List of future strategies:
[16:04:27.464] 1. future:
[16:04:27.464]    - args: function (...)
[16:04:27.464]    - tweaked: FALSE
[16:04:27.464]    - call: plan(foo)
[16:04:27.465] plan(): nbrOfWorkers() = Inf
[16:04:27.466] result() for MulticoreFuture ...
[16:04:27.466] result() for MulticoreFuture ... done
[16:04:27.466] result() for MulticoreFuture ... done
[16:04:27.466] result() for MulticoreFuture ...
[16:04:27.466] result() for MulticoreFuture ... done
[1] 42
> 
> message("*** Future class - exception ... DONE")
*** Future class - exception ... DONE
> 
> message("*** Future class ... DONE")
*** Future class ... DONE
> 
> source("incl/end.R")
[16:04:27.467] plan(): Setting new future strategy stack:
[16:04:27.467] List of future strategies:
[16:04:27.467] 1. FutureStrategy:
[16:04:27.467]    - args: function (..., envir = parent.frame())
[16:04:27.467]    - tweaked: FALSE
[16:04:27.467]    - call: future::plan(oplan)
[16:04:27.468] plan(): nbrOfWorkers() = 1
> 
