
R version 4.3.2 (2023-10-31) -- "Eye Holes"
Copyright (C) 2023 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> source("incl/start.R")
[10:25:31.591] plan(): Setting new future strategy stack:
[10:25:31.591] List of future strategies:
[10:25:31.591] 1. sequential:
[10:25:31.591]    - args: function (..., envir = parent.frame())
[10:25:31.591]    - tweaked: FALSE
[10:25:31.591]    - call: future::plan("sequential")
[10:25:31.605] plan(): nbrOfWorkers() = 1
> 
> message("*** Future class ...")
*** Future class ...
> 
> message("*** Future class - exception ...")
*** Future class - exception ...
> 
> f <- Future()
[10:25:31.615] getGlobalsAndPackages() ...
[10:25:31.615] 
[10:25:31.616] - globals: [0] <none>
[10:25:31.616] getGlobalsAndPackages() ... DONE
> print(f)
Future:
Label: ‘<none>’
Expression:
NULL
Lazy evaluation: FALSE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: FALSE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: 2bbaacb8-02e9-4075-ca46-5f7529a3bde4
Class: ‘Future’, ‘environment’
> 
> res <- tryCatch(value(f), error = identity)
[10:25:31.617] run() for ‘Future’ ...
[10:25:31.617] - state: ‘created’
[10:25:31.618] run() for ‘Future’ ... done
> print(res)
<simpleError: ‘future$lazy’ is not TRUE>
> stopifnot(inherits(res, "error"))
> 
> ## Invalid seed
> res <- tryCatch(f <- Future(42, seed = 1:2), error = identity)
> stopifnot(inherits(res, "error"))
> 
> ## When no packages are exported
> foo <- structure(function(...) { Future(1) }, class = "future")
> plan(foo)
[10:25:31.621] plan(): Setting new future strategy stack:
[10:25:31.621] List of future strategies:
[10:25:31.621] 1. future:
[10:25:31.621]    - args: function (...)
[10:25:31.621]    - tweaked: FALSE
[10:25:31.621]    - call: plan(foo)
[10:25:31.631] plan(): nbrOfWorkers() = Inf
> f <- Future()
[10:25:31.631] getGlobalsAndPackages() ...
[10:25:31.631] 
[10:25:31.632] - globals: [0] <none>
[10:25:31.632] getGlobalsAndPackages() ... DONE
> expr <- getExpression(f)
[10:25:31.632] Packages needed by the future expression (n = 0): <none>
[10:25:31.632] Packages needed by future strategies (n = 0): <none>
[10:25:31.633] {
[10:25:31.633]     {
[10:25:31.633]         {
[10:25:31.633]             ...future.startTime <- base::Sys.time()
[10:25:31.633]             {
[10:25:31.633]                 {
[10:25:31.633]                   {
[10:25:31.633]                     base::local({
[10:25:31.633]                       has_future <- base::requireNamespace("future", 
[10:25:31.633]                         quietly = TRUE)
[10:25:31.633]                       if (has_future) {
[10:25:31.633]                         ns <- base::getNamespace("future")
[10:25:31.633]                         version <- ns[[".package"]][["version"]]
[10:25:31.633]                         if (is.null(version)) 
[10:25:31.633]                           version <- utils::packageVersion("future")
[10:25:31.633]                       }
[10:25:31.633]                       else {
[10:25:31.633]                         version <- NULL
[10:25:31.633]                       }
[10:25:31.633]                       if (!has_future || version < "1.8.0") {
[10:25:31.633]                         info <- base::c(r_version = base::gsub("R version ", 
[10:25:31.633]                           "", base::R.version$version.string), 
[10:25:31.633]                           platform = base::sprintf("%s (%s-bit)", 
[10:25:31.633]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:25:31.633]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[10:25:31.633]                             "release", "version")], collapse = " "), 
[10:25:31.633]                           hostname = base::Sys.info()[["nodename"]])
[10:25:31.633]                         info <- base::sprintf("%s: %s", base::names(info), 
[10:25:31.633]                           info)
[10:25:31.633]                         info <- base::paste(info, collapse = "; ")
[10:25:31.633]                         if (!has_future) {
[10:25:31.633]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:25:31.633]                             info)
[10:25:31.633]                         }
[10:25:31.633]                         else {
[10:25:31.633]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:25:31.633]                             info, version)
[10:25:31.633]                         }
[10:25:31.633]                         base::stop(msg)
[10:25:31.633]                       }
[10:25:31.633]                     })
[10:25:31.633]                   }
[10:25:31.633]                   options(future.plan = NULL)
[10:25:31.633]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:25:31.633]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:25:31.633]                 }
[10:25:31.633]                 ...future.workdir <- getwd()
[10:25:31.633]             }
[10:25:31.633]             ...future.oldOptions <- base::as.list(base::.Options)
[10:25:31.633]             ...future.oldEnvVars <- base::Sys.getenv()
[10:25:31.633]         }
[10:25:31.633]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:25:31.633]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[10:25:31.633]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:25:31.633]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:25:31.633]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:25:31.633]             future.stdout.windows.reencode = NULL, width = 80L)
[10:25:31.633]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:25:31.633]             base::names(...future.oldOptions))
[10:25:31.633]     }
[10:25:31.633]     if (FALSE) {
[10:25:31.633]     }
[10:25:31.633]     else {
[10:25:31.633]         if (TRUE) {
[10:25:31.633]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:25:31.633]                 open = "w")
[10:25:31.633]         }
[10:25:31.633]         else {
[10:25:31.633]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:25:31.633]                 windows = "NUL", "/dev/null"), open = "w")
[10:25:31.633]         }
[10:25:31.633]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:25:31.633]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:25:31.633]             base::sink(type = "output", split = FALSE)
[10:25:31.633]             base::close(...future.stdout)
[10:25:31.633]         }, add = TRUE)
[10:25:31.633]     }
[10:25:31.633]     ...future.frame <- base::sys.nframe()
[10:25:31.633]     ...future.conditions <- base::list()
[10:25:31.633]     ...future.rng <- base::globalenv()$.Random.seed
[10:25:31.633]     if (FALSE) {
[10:25:31.633]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:25:31.633]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:25:31.633]     }
[10:25:31.633]     ...future.result <- base::tryCatch({
[10:25:31.633]         base::withCallingHandlers({
[10:25:31.633]             ...future.value <- base::withVisible(base::local(NULL))
[10:25:31.633]             future::FutureResult(value = ...future.value$value, 
[10:25:31.633]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:25:31.633]                   ...future.rng), globalenv = if (FALSE) 
[10:25:31.633]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:25:31.633]                     ...future.globalenv.names))
[10:25:31.633]                 else NULL, started = ...future.startTime, version = "1.8")
[10:25:31.633]         }, condition = base::local({
[10:25:31.633]             c <- base::c
[10:25:31.633]             inherits <- base::inherits
[10:25:31.633]             invokeRestart <- base::invokeRestart
[10:25:31.633]             length <- base::length
[10:25:31.633]             list <- base::list
[10:25:31.633]             seq.int <- base::seq.int
[10:25:31.633]             signalCondition <- base::signalCondition
[10:25:31.633]             sys.calls <- base::sys.calls
[10:25:31.633]             `[[` <- base::`[[`
[10:25:31.633]             `+` <- base::`+`
[10:25:31.633]             `<<-` <- base::`<<-`
[10:25:31.633]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:25:31.633]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:25:31.633]                   3L)]
[10:25:31.633]             }
[10:25:31.633]             function(cond) {
[10:25:31.633]                 is_error <- inherits(cond, "error")
[10:25:31.633]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:25:31.633]                   NULL)
[10:25:31.633]                 if (is_error) {
[10:25:31.633]                   sessionInformation <- function() {
[10:25:31.633]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:25:31.633]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:25:31.633]                       search = base::search(), system = base::Sys.info())
[10:25:31.633]                   }
[10:25:31.633]                   ...future.conditions[[length(...future.conditions) + 
[10:25:31.633]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:25:31.633]                     cond$call), session = sessionInformation(), 
[10:25:31.633]                     timestamp = base::Sys.time(), signaled = 0L)
[10:25:31.633]                   signalCondition(cond)
[10:25:31.633]                 }
[10:25:31.633]                 else if (!ignore && TRUE && inherits(cond, "condition")) {
[10:25:31.633]                   signal <- FALSE && inherits(cond, character(0))
[10:25:31.633]                   ...future.conditions[[length(...future.conditions) + 
[10:25:31.633]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:25:31.633]                   if (FALSE && !signal) {
[10:25:31.633]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:25:31.633]                     {
[10:25:31.633]                       inherits <- base::inherits
[10:25:31.633]                       invokeRestart <- base::invokeRestart
[10:25:31.633]                       is.null <- base::is.null
[10:25:31.633]                       muffled <- FALSE
[10:25:31.633]                       if (inherits(cond, "message")) {
[10:25:31.633]                         muffled <- grepl(pattern, "muffleMessage")
[10:25:31.633]                         if (muffled) 
[10:25:31.633]                           invokeRestart("muffleMessage")
[10:25:31.633]                       }
[10:25:31.633]                       else if (inherits(cond, "warning")) {
[10:25:31.633]                         muffled <- grepl(pattern, "muffleWarning")
[10:25:31.633]                         if (muffled) 
[10:25:31.633]                           invokeRestart("muffleWarning")
[10:25:31.633]                       }
[10:25:31.633]                       else if (inherits(cond, "condition")) {
[10:25:31.633]                         if (!is.null(pattern)) {
[10:25:31.633]                           computeRestarts <- base::computeRestarts
[10:25:31.633]                           grepl <- base::grepl
[10:25:31.633]                           restarts <- computeRestarts(cond)
[10:25:31.633]                           for (restart in restarts) {
[10:25:31.633]                             name <- restart$name
[10:25:31.633]                             if (is.null(name)) 
[10:25:31.633]                               next
[10:25:31.633]                             if (!grepl(pattern, name)) 
[10:25:31.633]                               next
[10:25:31.633]                             invokeRestart(restart)
[10:25:31.633]                             muffled <- TRUE
[10:25:31.633]                             break
[10:25:31.633]                           }
[10:25:31.633]                         }
[10:25:31.633]                       }
[10:25:31.633]                       invisible(muffled)
[10:25:31.633]                     }
[10:25:31.633]                     muffleCondition(cond, pattern = "^muffle")
[10:25:31.633]                   }
[10:25:31.633]                 }
[10:25:31.633]                 else {
[10:25:31.633]                   if (TRUE) {
[10:25:31.633]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:25:31.633]                     {
[10:25:31.633]                       inherits <- base::inherits
[10:25:31.633]                       invokeRestart <- base::invokeRestart
[10:25:31.633]                       is.null <- base::is.null
[10:25:31.633]                       muffled <- FALSE
[10:25:31.633]                       if (inherits(cond, "message")) {
[10:25:31.633]                         muffled <- grepl(pattern, "muffleMessage")
[10:25:31.633]                         if (muffled) 
[10:25:31.633]                           invokeRestart("muffleMessage")
[10:25:31.633]                       }
[10:25:31.633]                       else if (inherits(cond, "warning")) {
[10:25:31.633]                         muffled <- grepl(pattern, "muffleWarning")
[10:25:31.633]                         if (muffled) 
[10:25:31.633]                           invokeRestart("muffleWarning")
[10:25:31.633]                       }
[10:25:31.633]                       else if (inherits(cond, "condition")) {
[10:25:31.633]                         if (!is.null(pattern)) {
[10:25:31.633]                           computeRestarts <- base::computeRestarts
[10:25:31.633]                           grepl <- base::grepl
[10:25:31.633]                           restarts <- computeRestarts(cond)
[10:25:31.633]                           for (restart in restarts) {
[10:25:31.633]                             name <- restart$name
[10:25:31.633]                             if (is.null(name)) 
[10:25:31.633]                               next
[10:25:31.633]                             if (!grepl(pattern, name)) 
[10:25:31.633]                               next
[10:25:31.633]                             invokeRestart(restart)
[10:25:31.633]                             muffled <- TRUE
[10:25:31.633]                             break
[10:25:31.633]                           }
[10:25:31.633]                         }
[10:25:31.633]                       }
[10:25:31.633]                       invisible(muffled)
[10:25:31.633]                     }
[10:25:31.633]                     muffleCondition(cond, pattern = "^muffle")
[10:25:31.633]                   }
[10:25:31.633]                 }
[10:25:31.633]             }
[10:25:31.633]         }))
[10:25:31.633]     }, error = function(ex) {
[10:25:31.633]         base::structure(base::list(value = NULL, visible = NULL, 
[10:25:31.633]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:25:31.633]                 ...future.rng), started = ...future.startTime, 
[10:25:31.633]             finished = Sys.time(), session_uuid = NA_character_, 
[10:25:31.633]             version = "1.8"), class = "FutureResult")
[10:25:31.633]     }, finally = {
[10:25:31.633]         if (!identical(...future.workdir, getwd())) 
[10:25:31.633]             setwd(...future.workdir)
[10:25:31.633]         {
[10:25:31.633]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:25:31.633]                 ...future.oldOptions$nwarnings <- NULL
[10:25:31.633]             }
[10:25:31.633]             base::options(...future.oldOptions)
[10:25:31.633]             if (.Platform$OS.type == "windows") {
[10:25:31.633]                 old_names <- names(...future.oldEnvVars)
[10:25:31.633]                 envs <- base::Sys.getenv()
[10:25:31.633]                 names <- names(envs)
[10:25:31.633]                 common <- intersect(names, old_names)
[10:25:31.633]                 added <- setdiff(names, old_names)
[10:25:31.633]                 removed <- setdiff(old_names, names)
[10:25:31.633]                 changed <- common[...future.oldEnvVars[common] != 
[10:25:31.633]                   envs[common]]
[10:25:31.633]                 NAMES <- toupper(changed)
[10:25:31.633]                 args <- list()
[10:25:31.633]                 for (kk in seq_along(NAMES)) {
[10:25:31.633]                   name <- changed[[kk]]
[10:25:31.633]                   NAME <- NAMES[[kk]]
[10:25:31.633]                   if (name != NAME && is.element(NAME, old_names)) 
[10:25:31.633]                     next
[10:25:31.633]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:25:31.633]                 }
[10:25:31.633]                 NAMES <- toupper(added)
[10:25:31.633]                 for (kk in seq_along(NAMES)) {
[10:25:31.633]                   name <- added[[kk]]
[10:25:31.633]                   NAME <- NAMES[[kk]]
[10:25:31.633]                   if (name != NAME && is.element(NAME, old_names)) 
[10:25:31.633]                     next
[10:25:31.633]                   args[[name]] <- ""
[10:25:31.633]                 }
[10:25:31.633]                 NAMES <- toupper(removed)
[10:25:31.633]                 for (kk in seq_along(NAMES)) {
[10:25:31.633]                   name <- removed[[kk]]
[10:25:31.633]                   NAME <- NAMES[[kk]]
[10:25:31.633]                   if (name != NAME && is.element(NAME, old_names)) 
[10:25:31.633]                     next
[10:25:31.633]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:25:31.633]                 }
[10:25:31.633]                 if (length(args) > 0) 
[10:25:31.633]                   base::do.call(base::Sys.setenv, args = args)
[10:25:31.633]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:25:31.633]             }
[10:25:31.633]             else {
[10:25:31.633]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:25:31.633]             }
[10:25:31.633]             {
[10:25:31.633]                 if (base::length(...future.futureOptionsAdded) > 
[10:25:31.633]                   0L) {
[10:25:31.633]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:25:31.633]                   base::names(opts) <- ...future.futureOptionsAdded
[10:25:31.633]                   base::options(opts)
[10:25:31.633]                 }
[10:25:31.633]                 {
[10:25:31.633]                   NULL
[10:25:31.633]                   options(future.plan = NULL)
[10:25:31.633]                   if (is.na(NA_character_)) 
[10:25:31.633]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:25:31.633]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:25:31.633]                   future::plan(list(function (...) 
[10:25:31.633]                   {
[10:25:31.633]                     Future(1)
[10:25:31.633]                   }), .cleanup = FALSE, .init = FALSE)
[10:25:31.633]                 }
[10:25:31.633]             }
[10:25:31.633]         }
[10:25:31.633]     })
[10:25:31.633]     if (TRUE) {
[10:25:31.633]         base::sink(type = "output", split = FALSE)
[10:25:31.633]         if (TRUE) {
[10:25:31.633]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:25:31.633]         }
[10:25:31.633]         else {
[10:25:31.633]             ...future.result["stdout"] <- base::list(NULL)
[10:25:31.633]         }
[10:25:31.633]         base::close(...future.stdout)
[10:25:31.633]         ...future.stdout <- NULL
[10:25:31.633]     }
[10:25:31.633]     ...future.result$conditions <- ...future.conditions
[10:25:31.633]     ...future.result$finished <- base::Sys.time()
[10:25:31.633]     ...future.result
[10:25:31.633] }
> print(expr)
{
    {
        {
            ...future.startTime <- base::Sys.time()
            {
                {
                  {
                    base::local({
                      has_future <- base::requireNamespace("future", 
                        quietly = TRUE)
                      if (has_future) {
                        ns <- base::getNamespace("future")
                        version <- ns[[".package"]][["version"]]
                        if (is.null(version)) 
                          version <- utils::packageVersion("future")
                      }
                      else {
                        version <- NULL
                      }
                      if (!has_future || version < "1.8.0") {
                        info <- base::c(r_version = base::gsub("R version ", 
                          "", base::R.version$version.string), 
                          platform = base::sprintf("%s (%s-bit)", 
                            base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
                          os = base::paste(base::Sys.info()[base::c("sysname", 
                            "release", "version")], collapse = " "), 
                          hostname = base::Sys.info()[["nodename"]])
                        info <- base::sprintf("%s: %s", base::names(info), 
                          info)
                        info <- base::paste(info, collapse = "; ")
                        if (!has_future) {
                          msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
                            info)
                        }
                        else {
                          msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
                            info, version)
                        }
                        base::stop(msg)
                      }
                    })
                  }
                  options(future.plan = NULL)
                  Sys.unsetenv("R_FUTURE_PLAN")
                  future::plan("default", .cleanup = FALSE, .init = FALSE)
                }
                ...future.workdir <- getwd()
            }
            ...future.oldOptions <- base::as.list(base::.Options)
            ...future.oldEnvVars <- base::Sys.getenv()
        }
        base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
            future.globals.maxSize = NULL, future.globals.method = NULL, 
            future.globals.onMissing = NULL, future.globals.onReference = NULL, 
            future.globals.resolve = NULL, future.resolve.recursive = NULL, 
            future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
            future.stdout.windows.reencode = NULL, width = 80L)
        ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
            base::names(...future.oldOptions))
    }
    if (FALSE) {
    }
    else {
        if (TRUE) {
            ...future.stdout <- base::rawConnection(base::raw(0L), 
                open = "w")
        }
        else {
            ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
                windows = "NUL", "/dev/null"), open = "w")
        }
        base::sink(...future.stdout, type = "output", split = FALSE)
        base::on.exit(if (!base::is.null(...future.stdout)) {
            base::sink(type = "output", split = FALSE)
            base::close(...future.stdout)
        }, add = TRUE)
    }
    ...future.frame <- base::sys.nframe()
    ...future.conditions <- base::list()
    ...future.rng <- base::globalenv()$.Random.seed
    if (FALSE) {
        ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
            "...future.value", "...future.globalenv.names", ".Random.seed")
    }
    ...future.result <- base::tryCatch({
        base::withCallingHandlers({
            ...future.value <- base::withVisible(base::local(NULL))
            future::FutureResult(value = ...future.value$value, 
                visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
                  ...future.rng), globalenv = if (FALSE) 
                  list(added = base::setdiff(base::names(base::.GlobalEnv), 
                    ...future.globalenv.names))
                else NULL, started = ...future.startTime, version = "1.8")
        }, condition = base::local({
            c <- base::c
            inherits <- base::inherits
            invokeRestart <- base::invokeRestart
            length <- base::length
            list <- base::list
            seq.int <- base::seq.int
            signalCondition <- base::signalCondition
            sys.calls <- base::sys.calls
            `[[` <- base::`[[`
            `+` <- base::`+`
            `<<-` <- base::`<<-`
            sysCalls <- function(calls = sys.calls(), from = 1L) {
                calls[seq.int(from = from + 12L, to = length(calls) - 
                  3L)]
            }
            function(cond) {
                is_error <- inherits(cond, "error")
                ignore <- !is_error && !is.null(NULL) && inherits(cond, 
                  NULL)
                if (is_error) {
                  sessionInformation <- function() {
                    list(r = base::R.Version(), locale = base::Sys.getlocale(), 
                      rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
                      search = base::search(), system = base::Sys.info())
                  }
                  ...future.conditions[[length(...future.conditions) + 
                    1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
                    cond$call), session = sessionInformation(), 
                    timestamp = base::Sys.time(), signaled = 0L)
                  signalCondition(cond)
                }
                else if (!ignore && TRUE && inherits(cond, "condition")) {
                  signal <- FALSE && inherits(cond, character(0))
                  ...future.conditions[[length(...future.conditions) + 
                    1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
                  if (FALSE && !signal) {
                    muffleCondition <- function (cond, pattern = "^muffle") 
                    {
                      inherits <- base::inherits
                      invokeRestart <- base::invokeRestart
                      is.null <- base::is.null
                      muffled <- FALSE
                      if (inherits(cond, "message")) {
                        muffled <- grepl(pattern, "muffleMessage")
                        if (muffled) 
                          invokeRestart("muffleMessage")
                      }
                      else if (inherits(cond, "warning")) {
                        muffled <- grepl(pattern, "muffleWarning")
                        if (muffled) 
                          invokeRestart("muffleWarning")
                      }
                      else if (inherits(cond, "condition")) {
                        if (!is.null(pattern)) {
                          computeRestarts <- base::computeRestarts
                          grepl <- base::grepl
                          restarts <- computeRestarts(cond)
                          for (restart in restarts) {
                            name <- restart$name
                            if (is.null(name)) 
                              next
                            if (!grepl(pattern, name)) 
                              next
                            invokeRestart(restart)
                            muffled <- TRUE
                            break
                          }
                        }
                      }
                      invisible(muffled)
                    }
                    muffleCondition(cond, pattern = "^muffle")
                  }
                }
                else {
                  if (TRUE) {
                    muffleCondition <- function (cond, pattern = "^muffle") 
                    {
                      inherits <- base::inherits
                      invokeRestart <- base::invokeRestart
                      is.null <- base::is.null
                      muffled <- FALSE
                      if (inherits(cond, "message")) {
                        muffled <- grepl(pattern, "muffleMessage")
                        if (muffled) 
                          invokeRestart("muffleMessage")
                      }
                      else if (inherits(cond, "warning")) {
                        muffled <- grepl(pattern, "muffleWarning")
                        if (muffled) 
                          invokeRestart("muffleWarning")
                      }
                      else if (inherits(cond, "condition")) {
                        if (!is.null(pattern)) {
                          computeRestarts <- base::computeRestarts
                          grepl <- base::grepl
                          restarts <- computeRestarts(cond)
                          for (restart in restarts) {
                            name <- restart$name
                            if (is.null(name)) 
                              next
                            if (!grepl(pattern, name)) 
                              next
                            invokeRestart(restart)
                            muffled <- TRUE
                            break
                          }
                        }
                      }
                      invisible(muffled)
                    }
                    muffleCondition(cond, pattern = "^muffle")
                  }
                }
            }
        }))
    }, error = function(ex) {
        base::structure(base::list(value = NULL, visible = NULL, 
            conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
                ...future.rng), started = ...future.startTime, 
            finished = Sys.time(), session_uuid = NA_character_, 
            version = "1.8"), class = "FutureResult")
    }, finally = {
        if (!identical(...future.workdir, getwd())) 
            setwd(...future.workdir)
        {
            if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
                ...future.oldOptions$nwarnings <- NULL
            }
            base::options(...future.oldOptions)
            if (.Platform$OS.type == "windows") {
                old_names <- names(...future.oldEnvVars)
                envs <- base::Sys.getenv()
                names <- names(envs)
                common <- intersect(names, old_names)
                added <- setdiff(names, old_names)
                removed <- setdiff(old_names, names)
                changed <- common[...future.oldEnvVars[common] != 
                  envs[common]]
                NAMES <- toupper(changed)
                args <- list()
                for (kk in seq_along(NAMES)) {
                  name <- changed[[kk]]
                  NAME <- NAMES[[kk]]
                  if (name != NAME && is.element(NAME, old_names)) 
                    next
                  args[[name]] <- ...future.oldEnvVars[[name]]
                }
                NAMES <- toupper(added)
                for (kk in seq_along(NAMES)) {
                  name <- added[[kk]]
                  NAME <- NAMES[[kk]]
                  if (name != NAME && is.element(NAME, old_names)) 
                    next
                  args[[name]] <- ""
                }
                NAMES <- toupper(removed)
                for (kk in seq_along(NAMES)) {
                  name <- removed[[kk]]
                  NAME <- NAMES[[kk]]
                  if (name != NAME && is.element(NAME, old_names)) 
                    next
                  args[[name]] <- ...future.oldEnvVars[[name]]
                }
                if (length(args) > 0) 
                  base::do.call(base::Sys.setenv, args = args)
                args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
            }
            else {
                base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
            }
            {
                if (base::length(...future.futureOptionsAdded) > 
                  0L) {
                  opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
                  base::names(opts) <- ...future.futureOptionsAdded
                  base::options(opts)
                }
                {
                  NULL
                  options(future.plan = NULL)
                  if (is.na(NA_character_)) 
                    Sys.unsetenv("R_FUTURE_PLAN")
                  else Sys.setenv(R_FUTURE_PLAN = NA_character_)
                  future::plan(list(function (...) 
                  {
                    Future(1)
                  }), .cleanup = FALSE, .init = FALSE)
                }
            }
        }
    })
    if (TRUE) {
        base::sink(type = "output", split = FALSE)
        if (TRUE) {
            ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
        }
        else {
            ...future.result["stdout"] <- base::list(NULL)
        }
        base::close(...future.stdout)
        ...future.stdout <- NULL
    }
    ...future.result$conditions <- ...future.conditions
    ...future.result$finished <- base::Sys.time()
    ...future.result
}
> stopifnot(is.call(expr))
> 
> clazzes <- list(
+   sequential = SequentialFuture,
+   multisession = function(...) MultisessionFuture(..., workers = 2L),
+   sequential = SequentialFuture
+ )
> if (supportsMulticore()) {
+   clazzes$multicore = function(...) MulticoreFuture(..., workers = 2L)
+ }
> 
> for (clazz in clazzes) {
+   ## Calling run() more than once
+   f <- clazz({ 42L })
+   print(f)
+   run(f)
+   res <- tryCatch(run(f), error = identity)
+   stopifnot(inherits(res, "error"))
+   v <- value(f)
+   print(v)
+   stopifnot(v == 42L)
+ 
+   ## Call value() without run()
+   f <- clazz({ 42L })
+   v <- value(f)
+   print(v)
+   stopifnot(v == 42L)
+ }
[10:25:31.645] getGlobalsAndPackages() ...
[10:25:31.645] Searching for globals...
[10:25:31.648] - globals found: [1] ‘{’
[10:25:31.648] Searching for globals ... DONE
[10:25:31.648] Resolving globals: FALSE
[10:25:31.649] 
[10:25:31.649] 
[10:25:31.649] getGlobalsAndPackages() ... DONE
SequentialFuture:
Label: ‘<none>’
Expression:
{
    42L
}
Lazy evaluation: FALSE
Asynchronous evaluation: FALSE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: FALSE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: 2bbaacb8-02e9-4075-ca46-5f7529a3bde4
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[10:25:31.650] Packages needed by the future expression (n = 0): <none>
[10:25:31.650] Packages needed by future strategies (n = 0): <none>
[10:25:31.650] {
[10:25:31.650]     {
[10:25:31.650]         {
[10:25:31.650]             ...future.startTime <- base::Sys.time()
[10:25:31.650]             {
[10:25:31.650]                 {
[10:25:31.650]                   {
[10:25:31.650]                     base::local({
[10:25:31.650]                       has_future <- base::requireNamespace("future", 
[10:25:31.650]                         quietly = TRUE)
[10:25:31.650]                       if (has_future) {
[10:25:31.650]                         ns <- base::getNamespace("future")
[10:25:31.650]                         version <- ns[[".package"]][["version"]]
[10:25:31.650]                         if (is.null(version)) 
[10:25:31.650]                           version <- utils::packageVersion("future")
[10:25:31.650]                       }
[10:25:31.650]                       else {
[10:25:31.650]                         version <- NULL
[10:25:31.650]                       }
[10:25:31.650]                       if (!has_future || version < "1.8.0") {
[10:25:31.650]                         info <- base::c(r_version = base::gsub("R version ", 
[10:25:31.650]                           "", base::R.version$version.string), 
[10:25:31.650]                           platform = base::sprintf("%s (%s-bit)", 
[10:25:31.650]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:25:31.650]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[10:25:31.650]                             "release", "version")], collapse = " "), 
[10:25:31.650]                           hostname = base::Sys.info()[["nodename"]])
[10:25:31.650]                         info <- base::sprintf("%s: %s", base::names(info), 
[10:25:31.650]                           info)
[10:25:31.650]                         info <- base::paste(info, collapse = "; ")
[10:25:31.650]                         if (!has_future) {
[10:25:31.650]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:25:31.650]                             info)
[10:25:31.650]                         }
[10:25:31.650]                         else {
[10:25:31.650]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:25:31.650]                             info, version)
[10:25:31.650]                         }
[10:25:31.650]                         base::stop(msg)
[10:25:31.650]                       }
[10:25:31.650]                     })
[10:25:31.650]                   }
[10:25:31.650]                   options(future.plan = NULL)
[10:25:31.650]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:25:31.650]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:25:31.650]                 }
[10:25:31.650]                 ...future.workdir <- getwd()
[10:25:31.650]             }
[10:25:31.650]             ...future.oldOptions <- base::as.list(base::.Options)
[10:25:31.650]             ...future.oldEnvVars <- base::Sys.getenv()
[10:25:31.650]         }
[10:25:31.650]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:25:31.650]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[10:25:31.650]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:25:31.650]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:25:31.650]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:25:31.650]             future.stdout.windows.reencode = NULL, width = 80L)
[10:25:31.650]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:25:31.650]             base::names(...future.oldOptions))
[10:25:31.650]     }
[10:25:31.650]     if (FALSE) {
[10:25:31.650]     }
[10:25:31.650]     else {
[10:25:31.650]         if (TRUE) {
[10:25:31.650]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:25:31.650]                 open = "w")
[10:25:31.650]         }
[10:25:31.650]         else {
[10:25:31.650]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:25:31.650]                 windows = "NUL", "/dev/null"), open = "w")
[10:25:31.650]         }
[10:25:31.650]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:25:31.650]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:25:31.650]             base::sink(type = "output", split = FALSE)
[10:25:31.650]             base::close(...future.stdout)
[10:25:31.650]         }, add = TRUE)
[10:25:31.650]     }
[10:25:31.650]     ...future.frame <- base::sys.nframe()
[10:25:31.650]     ...future.conditions <- base::list()
[10:25:31.650]     ...future.rng <- base::globalenv()$.Random.seed
[10:25:31.650]     if (FALSE) {
[10:25:31.650]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:25:31.650]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:25:31.650]     }
[10:25:31.650]     ...future.result <- base::tryCatch({
[10:25:31.650]         base::withCallingHandlers({
[10:25:31.650]             ...future.value <- base::withVisible(base::local({
[10:25:31.650]                 42L
[10:25:31.650]             }))
[10:25:31.650]             future::FutureResult(value = ...future.value$value, 
[10:25:31.650]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:25:31.650]                   ...future.rng), globalenv = if (FALSE) 
[10:25:31.650]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:25:31.650]                     ...future.globalenv.names))
[10:25:31.650]                 else NULL, started = ...future.startTime, version = "1.8")
[10:25:31.650]         }, condition = base::local({
[10:25:31.650]             c <- base::c
[10:25:31.650]             inherits <- base::inherits
[10:25:31.650]             invokeRestart <- base::invokeRestart
[10:25:31.650]             length <- base::length
[10:25:31.650]             list <- base::list
[10:25:31.650]             seq.int <- base::seq.int
[10:25:31.650]             signalCondition <- base::signalCondition
[10:25:31.650]             sys.calls <- base::sys.calls
[10:25:31.650]             `[[` <- base::`[[`
[10:25:31.650]             `+` <- base::`+`
[10:25:31.650]             `<<-` <- base::`<<-`
[10:25:31.650]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:25:31.650]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:25:31.650]                   3L)]
[10:25:31.650]             }
[10:25:31.650]             function(cond) {
[10:25:31.650]                 is_error <- inherits(cond, "error")
[10:25:31.650]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:25:31.650]                   NULL)
[10:25:31.650]                 if (is_error) {
[10:25:31.650]                   sessionInformation <- function() {
[10:25:31.650]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:25:31.650]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:25:31.650]                       search = base::search(), system = base::Sys.info())
[10:25:31.650]                   }
[10:25:31.650]                   ...future.conditions[[length(...future.conditions) + 
[10:25:31.650]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:25:31.650]                     cond$call), session = sessionInformation(), 
[10:25:31.650]                     timestamp = base::Sys.time(), signaled = 0L)
[10:25:31.650]                   signalCondition(cond)
[10:25:31.650]                 }
[10:25:31.650]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:25:31.650]                 "immediateCondition"))) {
[10:25:31.650]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:25:31.650]                   ...future.conditions[[length(...future.conditions) + 
[10:25:31.650]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:25:31.650]                   if (TRUE && !signal) {
[10:25:31.650]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:25:31.650]                     {
[10:25:31.650]                       inherits <- base::inherits
[10:25:31.650]                       invokeRestart <- base::invokeRestart
[10:25:31.650]                       is.null <- base::is.null
[10:25:31.650]                       muffled <- FALSE
[10:25:31.650]                       if (inherits(cond, "message")) {
[10:25:31.650]                         muffled <- grepl(pattern, "muffleMessage")
[10:25:31.650]                         if (muffled) 
[10:25:31.650]                           invokeRestart("muffleMessage")
[10:25:31.650]                       }
[10:25:31.650]                       else if (inherits(cond, "warning")) {
[10:25:31.650]                         muffled <- grepl(pattern, "muffleWarning")
[10:25:31.650]                         if (muffled) 
[10:25:31.650]                           invokeRestart("muffleWarning")
[10:25:31.650]                       }
[10:25:31.650]                       else if (inherits(cond, "condition")) {
[10:25:31.650]                         if (!is.null(pattern)) {
[10:25:31.650]                           computeRestarts <- base::computeRestarts
[10:25:31.650]                           grepl <- base::grepl
[10:25:31.650]                           restarts <- computeRestarts(cond)
[10:25:31.650]                           for (restart in restarts) {
[10:25:31.650]                             name <- restart$name
[10:25:31.650]                             if (is.null(name)) 
[10:25:31.650]                               next
[10:25:31.650]                             if (!grepl(pattern, name)) 
[10:25:31.650]                               next
[10:25:31.650]                             invokeRestart(restart)
[10:25:31.650]                             muffled <- TRUE
[10:25:31.650]                             break
[10:25:31.650]                           }
[10:25:31.650]                         }
[10:25:31.650]                       }
[10:25:31.650]                       invisible(muffled)
[10:25:31.650]                     }
[10:25:31.650]                     muffleCondition(cond, pattern = "^muffle")
[10:25:31.650]                   }
[10:25:31.650]                 }
[10:25:31.650]                 else {
[10:25:31.650]                   if (TRUE) {
[10:25:31.650]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:25:31.650]                     {
[10:25:31.650]                       inherits <- base::inherits
[10:25:31.650]                       invokeRestart <- base::invokeRestart
[10:25:31.650]                       is.null <- base::is.null
[10:25:31.650]                       muffled <- FALSE
[10:25:31.650]                       if (inherits(cond, "message")) {
[10:25:31.650]                         muffled <- grepl(pattern, "muffleMessage")
[10:25:31.650]                         if (muffled) 
[10:25:31.650]                           invokeRestart("muffleMessage")
[10:25:31.650]                       }
[10:25:31.650]                       else if (inherits(cond, "warning")) {
[10:25:31.650]                         muffled <- grepl(pattern, "muffleWarning")
[10:25:31.650]                         if (muffled) 
[10:25:31.650]                           invokeRestart("muffleWarning")
[10:25:31.650]                       }
[10:25:31.650]                       else if (inherits(cond, "condition")) {
[10:25:31.650]                         if (!is.null(pattern)) {
[10:25:31.650]                           computeRestarts <- base::computeRestarts
[10:25:31.650]                           grepl <- base::grepl
[10:25:31.650]                           restarts <- computeRestarts(cond)
[10:25:31.650]                           for (restart in restarts) {
[10:25:31.650]                             name <- restart$name
[10:25:31.650]                             if (is.null(name)) 
[10:25:31.650]                               next
[10:25:31.650]                             if (!grepl(pattern, name)) 
[10:25:31.650]                               next
[10:25:31.650]                             invokeRestart(restart)
[10:25:31.650]                             muffled <- TRUE
[10:25:31.650]                             break
[10:25:31.650]                           }
[10:25:31.650]                         }
[10:25:31.650]                       }
[10:25:31.650]                       invisible(muffled)
[10:25:31.650]                     }
[10:25:31.650]                     muffleCondition(cond, pattern = "^muffle")
[10:25:31.650]                   }
[10:25:31.650]                 }
[10:25:31.650]             }
[10:25:31.650]         }))
[10:25:31.650]     }, error = function(ex) {
[10:25:31.650]         base::structure(base::list(value = NULL, visible = NULL, 
[10:25:31.650]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:25:31.650]                 ...future.rng), started = ...future.startTime, 
[10:25:31.650]             finished = Sys.time(), session_uuid = NA_character_, 
[10:25:31.650]             version = "1.8"), class = "FutureResult")
[10:25:31.650]     }, finally = {
[10:25:31.650]         if (!identical(...future.workdir, getwd())) 
[10:25:31.650]             setwd(...future.workdir)
[10:25:31.650]         {
[10:25:31.650]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:25:31.650]                 ...future.oldOptions$nwarnings <- NULL
[10:25:31.650]             }
[10:25:31.650]             base::options(...future.oldOptions)
[10:25:31.650]             if (.Platform$OS.type == "windows") {
[10:25:31.650]                 old_names <- names(...future.oldEnvVars)
[10:25:31.650]                 envs <- base::Sys.getenv()
[10:25:31.650]                 names <- names(envs)
[10:25:31.650]                 common <- intersect(names, old_names)
[10:25:31.650]                 added <- setdiff(names, old_names)
[10:25:31.650]                 removed <- setdiff(old_names, names)
[10:25:31.650]                 changed <- common[...future.oldEnvVars[common] != 
[10:25:31.650]                   envs[common]]
[10:25:31.650]                 NAMES <- toupper(changed)
[10:25:31.650]                 args <- list()
[10:25:31.650]                 for (kk in seq_along(NAMES)) {
[10:25:31.650]                   name <- changed[[kk]]
[10:25:31.650]                   NAME <- NAMES[[kk]]
[10:25:31.650]                   if (name != NAME && is.element(NAME, old_names)) 
[10:25:31.650]                     next
[10:25:31.650]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:25:31.650]                 }
[10:25:31.650]                 NAMES <- toupper(added)
[10:25:31.650]                 for (kk in seq_along(NAMES)) {
[10:25:31.650]                   name <- added[[kk]]
[10:25:31.650]                   NAME <- NAMES[[kk]]
[10:25:31.650]                   if (name != NAME && is.element(NAME, old_names)) 
[10:25:31.650]                     next
[10:25:31.650]                   args[[name]] <- ""
[10:25:31.650]                 }
[10:25:31.650]                 NAMES <- toupper(removed)
[10:25:31.650]                 for (kk in seq_along(NAMES)) {
[10:25:31.650]                   name <- removed[[kk]]
[10:25:31.650]                   NAME <- NAMES[[kk]]
[10:25:31.650]                   if (name != NAME && is.element(NAME, old_names)) 
[10:25:31.650]                     next
[10:25:31.650]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:25:31.650]                 }
[10:25:31.650]                 if (length(args) > 0) 
[10:25:31.650]                   base::do.call(base::Sys.setenv, args = args)
[10:25:31.650]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:25:31.650]             }
[10:25:31.650]             else {
[10:25:31.650]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:25:31.650]             }
[10:25:31.650]             {
[10:25:31.650]                 if (base::length(...future.futureOptionsAdded) > 
[10:25:31.650]                   0L) {
[10:25:31.650]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:25:31.650]                   base::names(opts) <- ...future.futureOptionsAdded
[10:25:31.650]                   base::options(opts)
[10:25:31.650]                 }
[10:25:31.650]                 {
[10:25:31.650]                   {
[10:25:31.650]                     NULL
[10:25:31.650]                     RNGkind("Mersenne-Twister")
[10:25:31.650]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[10:25:31.650]                       inherits = FALSE)
[10:25:31.650]                   }
[10:25:31.650]                   options(future.plan = NULL)
[10:25:31.650]                   if (is.na(NA_character_)) 
[10:25:31.650]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:25:31.650]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:25:31.650]                   future::plan(list(function (...) 
[10:25:31.650]                   {
[10:25:31.650]                     Future(1)
[10:25:31.650]                   }), .cleanup = FALSE, .init = FALSE)
[10:25:31.650]                 }
[10:25:31.650]             }
[10:25:31.650]         }
[10:25:31.650]     })
[10:25:31.650]     if (TRUE) {
[10:25:31.650]         base::sink(type = "output", split = FALSE)
[10:25:31.650]         if (TRUE) {
[10:25:31.650]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:25:31.650]         }
[10:25:31.650]         else {
[10:25:31.650]             ...future.result["stdout"] <- base::list(NULL)
[10:25:31.650]         }
[10:25:31.650]         base::close(...future.stdout)
[10:25:31.650]         ...future.stdout <- NULL
[10:25:31.650]     }
[10:25:31.650]     ...future.result$conditions <- ...future.conditions
[10:25:31.650]     ...future.result$finished <- base::Sys.time()
[10:25:31.650]     ...future.result
[10:25:31.650] }
[10:25:31.652] plan(): Setting new future strategy stack:
[10:25:31.652] List of future strategies:
[10:25:31.652] 1. sequential:
[10:25:31.652]    - args: function (..., envir = parent.frame())
[10:25:31.652]    - tweaked: FALSE
[10:25:31.652]    - call: NULL
[10:25:31.653] plan(): nbrOfWorkers() = 1
[10:25:31.654] plan(): Setting new future strategy stack:
[10:25:31.654] List of future strategies:
[10:25:31.654] 1. future:
[10:25:31.654]    - args: function (...)
[10:25:31.654]    - tweaked: FALSE
[10:25:31.654]    - call: plan(foo)
[10:25:31.654] plan(): nbrOfWorkers() = Inf
[10:25:31.654] SequentialFuture started (and completed)
[1] 42
[10:25:31.655] getGlobalsAndPackages() ...
[10:25:31.655] Searching for globals...
[10:25:31.656] - globals found: [1] ‘{’
[10:25:31.656] Searching for globals ... DONE
[10:25:31.656] Resolving globals: FALSE
[10:25:31.656] 
[10:25:31.656] 
[10:25:31.656] getGlobalsAndPackages() ... DONE
[10:25:31.657] Packages needed by the future expression (n = 0): <none>
[10:25:31.657] Packages needed by future strategies (n = 0): <none>
[10:25:31.657] {
[10:25:31.657]     {
[10:25:31.657]         {
[10:25:31.657]             ...future.startTime <- base::Sys.time()
[10:25:31.657]             {
[10:25:31.657]                 {
[10:25:31.657]                   {
[10:25:31.657]                     base::local({
[10:25:31.657]                       has_future <- base::requireNamespace("future", 
[10:25:31.657]                         quietly = TRUE)
[10:25:31.657]                       if (has_future) {
[10:25:31.657]                         ns <- base::getNamespace("future")
[10:25:31.657]                         version <- ns[[".package"]][["version"]]
[10:25:31.657]                         if (is.null(version)) 
[10:25:31.657]                           version <- utils::packageVersion("future")
[10:25:31.657]                       }
[10:25:31.657]                       else {
[10:25:31.657]                         version <- NULL
[10:25:31.657]                       }
[10:25:31.657]                       if (!has_future || version < "1.8.0") {
[10:25:31.657]                         info <- base::c(r_version = base::gsub("R version ", 
[10:25:31.657]                           "", base::R.version$version.string), 
[10:25:31.657]                           platform = base::sprintf("%s (%s-bit)", 
[10:25:31.657]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:25:31.657]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[10:25:31.657]                             "release", "version")], collapse = " "), 
[10:25:31.657]                           hostname = base::Sys.info()[["nodename"]])
[10:25:31.657]                         info <- base::sprintf("%s: %s", base::names(info), 
[10:25:31.657]                           info)
[10:25:31.657]                         info <- base::paste(info, collapse = "; ")
[10:25:31.657]                         if (!has_future) {
[10:25:31.657]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:25:31.657]                             info)
[10:25:31.657]                         }
[10:25:31.657]                         else {
[10:25:31.657]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:25:31.657]                             info, version)
[10:25:31.657]                         }
[10:25:31.657]                         base::stop(msg)
[10:25:31.657]                       }
[10:25:31.657]                     })
[10:25:31.657]                   }
[10:25:31.657]                   options(future.plan = NULL)
[10:25:31.657]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:25:31.657]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:25:31.657]                 }
[10:25:31.657]                 ...future.workdir <- getwd()
[10:25:31.657]             }
[10:25:31.657]             ...future.oldOptions <- base::as.list(base::.Options)
[10:25:31.657]             ...future.oldEnvVars <- base::Sys.getenv()
[10:25:31.657]         }
[10:25:31.657]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:25:31.657]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[10:25:31.657]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:25:31.657]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:25:31.657]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:25:31.657]             future.stdout.windows.reencode = NULL, width = 80L)
[10:25:31.657]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:25:31.657]             base::names(...future.oldOptions))
[10:25:31.657]     }
[10:25:31.657]     if (FALSE) {
[10:25:31.657]     }
[10:25:31.657]     else {
[10:25:31.657]         if (TRUE) {
[10:25:31.657]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:25:31.657]                 open = "w")
[10:25:31.657]         }
[10:25:31.657]         else {
[10:25:31.657]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:25:31.657]                 windows = "NUL", "/dev/null"), open = "w")
[10:25:31.657]         }
[10:25:31.657]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:25:31.657]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:25:31.657]             base::sink(type = "output", split = FALSE)
[10:25:31.657]             base::close(...future.stdout)
[10:25:31.657]         }, add = TRUE)
[10:25:31.657]     }
[10:25:31.657]     ...future.frame <- base::sys.nframe()
[10:25:31.657]     ...future.conditions <- base::list()
[10:25:31.657]     ...future.rng <- base::globalenv()$.Random.seed
[10:25:31.657]     if (FALSE) {
[10:25:31.657]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:25:31.657]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:25:31.657]     }
[10:25:31.657]     ...future.result <- base::tryCatch({
[10:25:31.657]         base::withCallingHandlers({
[10:25:31.657]             ...future.value <- base::withVisible(base::local({
[10:25:31.657]                 42L
[10:25:31.657]             }))
[10:25:31.657]             future::FutureResult(value = ...future.value$value, 
[10:25:31.657]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:25:31.657]                   ...future.rng), globalenv = if (FALSE) 
[10:25:31.657]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:25:31.657]                     ...future.globalenv.names))
[10:25:31.657]                 else NULL, started = ...future.startTime, version = "1.8")
[10:25:31.657]         }, condition = base::local({
[10:25:31.657]             c <- base::c
[10:25:31.657]             inherits <- base::inherits
[10:25:31.657]             invokeRestart <- base::invokeRestart
[10:25:31.657]             length <- base::length
[10:25:31.657]             list <- base::list
[10:25:31.657]             seq.int <- base::seq.int
[10:25:31.657]             signalCondition <- base::signalCondition
[10:25:31.657]             sys.calls <- base::sys.calls
[10:25:31.657]             `[[` <- base::`[[`
[10:25:31.657]             `+` <- base::`+`
[10:25:31.657]             `<<-` <- base::`<<-`
[10:25:31.657]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:25:31.657]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:25:31.657]                   3L)]
[10:25:31.657]             }
[10:25:31.657]             function(cond) {
[10:25:31.657]                 is_error <- inherits(cond, "error")
[10:25:31.657]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:25:31.657]                   NULL)
[10:25:31.657]                 if (is_error) {
[10:25:31.657]                   sessionInformation <- function() {
[10:25:31.657]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:25:31.657]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:25:31.657]                       search = base::search(), system = base::Sys.info())
[10:25:31.657]                   }
[10:25:31.657]                   ...future.conditions[[length(...future.conditions) + 
[10:25:31.657]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:25:31.657]                     cond$call), session = sessionInformation(), 
[10:25:31.657]                     timestamp = base::Sys.time(), signaled = 0L)
[10:25:31.657]                   signalCondition(cond)
[10:25:31.657]                 }
[10:25:31.657]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:25:31.657]                 "immediateCondition"))) {
[10:25:31.657]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:25:31.657]                   ...future.conditions[[length(...future.conditions) + 
[10:25:31.657]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:25:31.657]                   if (TRUE && !signal) {
[10:25:31.657]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:25:31.657]                     {
[10:25:31.657]                       inherits <- base::inherits
[10:25:31.657]                       invokeRestart <- base::invokeRestart
[10:25:31.657]                       is.null <- base::is.null
[10:25:31.657]                       muffled <- FALSE
[10:25:31.657]                       if (inherits(cond, "message")) {
[10:25:31.657]                         muffled <- grepl(pattern, "muffleMessage")
[10:25:31.657]                         if (muffled) 
[10:25:31.657]                           invokeRestart("muffleMessage")
[10:25:31.657]                       }
[10:25:31.657]                       else if (inherits(cond, "warning")) {
[10:25:31.657]                         muffled <- grepl(pattern, "muffleWarning")
[10:25:31.657]                         if (muffled) 
[10:25:31.657]                           invokeRestart("muffleWarning")
[10:25:31.657]                       }
[10:25:31.657]                       else if (inherits(cond, "condition")) {
[10:25:31.657]                         if (!is.null(pattern)) {
[10:25:31.657]                           computeRestarts <- base::computeRestarts
[10:25:31.657]                           grepl <- base::grepl
[10:25:31.657]                           restarts <- computeRestarts(cond)
[10:25:31.657]                           for (restart in restarts) {
[10:25:31.657]                             name <- restart$name
[10:25:31.657]                             if (is.null(name)) 
[10:25:31.657]                               next
[10:25:31.657]                             if (!grepl(pattern, name)) 
[10:25:31.657]                               next
[10:25:31.657]                             invokeRestart(restart)
[10:25:31.657]                             muffled <- TRUE
[10:25:31.657]                             break
[10:25:31.657]                           }
[10:25:31.657]                         }
[10:25:31.657]                       }
[10:25:31.657]                       invisible(muffled)
[10:25:31.657]                     }
[10:25:31.657]                     muffleCondition(cond, pattern = "^muffle")
[10:25:31.657]                   }
[10:25:31.657]                 }
[10:25:31.657]                 else {
[10:25:31.657]                   if (TRUE) {
[10:25:31.657]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:25:31.657]                     {
[10:25:31.657]                       inherits <- base::inherits
[10:25:31.657]                       invokeRestart <- base::invokeRestart
[10:25:31.657]                       is.null <- base::is.null
[10:25:31.657]                       muffled <- FALSE
[10:25:31.657]                       if (inherits(cond, "message")) {
[10:25:31.657]                         muffled <- grepl(pattern, "muffleMessage")
[10:25:31.657]                         if (muffled) 
[10:25:31.657]                           invokeRestart("muffleMessage")
[10:25:31.657]                       }
[10:25:31.657]                       else if (inherits(cond, "warning")) {
[10:25:31.657]                         muffled <- grepl(pattern, "muffleWarning")
[10:25:31.657]                         if (muffled) 
[10:25:31.657]                           invokeRestart("muffleWarning")
[10:25:31.657]                       }
[10:25:31.657]                       else if (inherits(cond, "condition")) {
[10:25:31.657]                         if (!is.null(pattern)) {
[10:25:31.657]                           computeRestarts <- base::computeRestarts
[10:25:31.657]                           grepl <- base::grepl
[10:25:31.657]                           restarts <- computeRestarts(cond)
[10:25:31.657]                           for (restart in restarts) {
[10:25:31.657]                             name <- restart$name
[10:25:31.657]                             if (is.null(name)) 
[10:25:31.657]                               next
[10:25:31.657]                             if (!grepl(pattern, name)) 
[10:25:31.657]                               next
[10:25:31.657]                             invokeRestart(restart)
[10:25:31.657]                             muffled <- TRUE
[10:25:31.657]                             break
[10:25:31.657]                           }
[10:25:31.657]                         }
[10:25:31.657]                       }
[10:25:31.657]                       invisible(muffled)
[10:25:31.657]                     }
[10:25:31.657]                     muffleCondition(cond, pattern = "^muffle")
[10:25:31.657]                   }
[10:25:31.657]                 }
[10:25:31.657]             }
[10:25:31.657]         }))
[10:25:31.657]     }, error = function(ex) {
[10:25:31.657]         base::structure(base::list(value = NULL, visible = NULL, 
[10:25:31.657]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:25:31.657]                 ...future.rng), started = ...future.startTime, 
[10:25:31.657]             finished = Sys.time(), session_uuid = NA_character_, 
[10:25:31.657]             version = "1.8"), class = "FutureResult")
[10:25:31.657]     }, finally = {
[10:25:31.657]         if (!identical(...future.workdir, getwd())) 
[10:25:31.657]             setwd(...future.workdir)
[10:25:31.657]         {
[10:25:31.657]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:25:31.657]                 ...future.oldOptions$nwarnings <- NULL
[10:25:31.657]             }
[10:25:31.657]             base::options(...future.oldOptions)
[10:25:31.657]             if (.Platform$OS.type == "windows") {
[10:25:31.657]                 old_names <- names(...future.oldEnvVars)
[10:25:31.657]                 envs <- base::Sys.getenv()
[10:25:31.657]                 names <- names(envs)
[10:25:31.657]                 common <- intersect(names, old_names)
[10:25:31.657]                 added <- setdiff(names, old_names)
[10:25:31.657]                 removed <- setdiff(old_names, names)
[10:25:31.657]                 changed <- common[...future.oldEnvVars[common] != 
[10:25:31.657]                   envs[common]]
[10:25:31.657]                 NAMES <- toupper(changed)
[10:25:31.657]                 args <- list()
[10:25:31.657]                 for (kk in seq_along(NAMES)) {
[10:25:31.657]                   name <- changed[[kk]]
[10:25:31.657]                   NAME <- NAMES[[kk]]
[10:25:31.657]                   if (name != NAME && is.element(NAME, old_names)) 
[10:25:31.657]                     next
[10:25:31.657]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:25:31.657]                 }
[10:25:31.657]                 NAMES <- toupper(added)
[10:25:31.657]                 for (kk in seq_along(NAMES)) {
[10:25:31.657]                   name <- added[[kk]]
[10:25:31.657]                   NAME <- NAMES[[kk]]
[10:25:31.657]                   if (name != NAME && is.element(NAME, old_names)) 
[10:25:31.657]                     next
[10:25:31.657]                   args[[name]] <- ""
[10:25:31.657]                 }
[10:25:31.657]                 NAMES <- toupper(removed)
[10:25:31.657]                 for (kk in seq_along(NAMES)) {
[10:25:31.657]                   name <- removed[[kk]]
[10:25:31.657]                   NAME <- NAMES[[kk]]
[10:25:31.657]                   if (name != NAME && is.element(NAME, old_names)) 
[10:25:31.657]                     next
[10:25:31.657]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:25:31.657]                 }
[10:25:31.657]                 if (length(args) > 0) 
[10:25:31.657]                   base::do.call(base::Sys.setenv, args = args)
[10:25:31.657]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:25:31.657]             }
[10:25:31.657]             else {
[10:25:31.657]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:25:31.657]             }
[10:25:31.657]             {
[10:25:31.657]                 if (base::length(...future.futureOptionsAdded) > 
[10:25:31.657]                   0L) {
[10:25:31.657]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:25:31.657]                   base::names(opts) <- ...future.futureOptionsAdded
[10:25:31.657]                   base::options(opts)
[10:25:31.657]                 }
[10:25:31.657]                 {
[10:25:31.657]                   {
[10:25:31.657]                     NULL
[10:25:31.657]                     RNGkind("Mersenne-Twister")
[10:25:31.657]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[10:25:31.657]                       inherits = FALSE)
[10:25:31.657]                   }
[10:25:31.657]                   options(future.plan = NULL)
[10:25:31.657]                   if (is.na(NA_character_)) 
[10:25:31.657]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:25:31.657]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:25:31.657]                   future::plan(list(function (...) 
[10:25:31.657]                   {
[10:25:31.657]                     Future(1)
[10:25:31.657]                   }), .cleanup = FALSE, .init = FALSE)
[10:25:31.657]                 }
[10:25:31.657]             }
[10:25:31.657]         }
[10:25:31.657]     })
[10:25:31.657]     if (TRUE) {
[10:25:31.657]         base::sink(type = "output", split = FALSE)
[10:25:31.657]         if (TRUE) {
[10:25:31.657]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:25:31.657]         }
[10:25:31.657]         else {
[10:25:31.657]             ...future.result["stdout"] <- base::list(NULL)
[10:25:31.657]         }
[10:25:31.657]         base::close(...future.stdout)
[10:25:31.657]         ...future.stdout <- NULL
[10:25:31.657]     }
[10:25:31.657]     ...future.result$conditions <- ...future.conditions
[10:25:31.657]     ...future.result$finished <- base::Sys.time()
[10:25:31.657]     ...future.result
[10:25:31.657] }
[10:25:31.659] plan(): Setting new future strategy stack:
[10:25:31.659] List of future strategies:
[10:25:31.659] 1. sequential:
[10:25:31.659]    - args: function (..., envir = parent.frame())
[10:25:31.659]    - tweaked: FALSE
[10:25:31.659]    - call: NULL
[10:25:31.659] plan(): nbrOfWorkers() = 1
[10:25:31.660] plan(): Setting new future strategy stack:
[10:25:31.660] List of future strategies:
[10:25:31.660] 1. future:
[10:25:31.660]    - args: function (...)
[10:25:31.660]    - tweaked: FALSE
[10:25:31.660]    - call: plan(foo)
[10:25:31.660] plan(): nbrOfWorkers() = Inf
[10:25:31.660] SequentialFuture started (and completed)
[1] 42
[10:25:31.662] getGlobalsAndPackages() ...
[10:25:31.663] 
[10:25:31.663] - globals: [0] <none>
[10:25:31.663] getGlobalsAndPackages() ... DONE
[10:25:31.663] [local output] makeClusterPSOCK() ...
[10:25:31.694] [local output] Workers: [n = 2] ‘localhost’, ‘localhost’
[10:25:31.695] [local output] Base port: 11227
[10:25:31.695] [local output] Getting setup options for 2 cluster nodes ...
[10:25:31.695] [local output]  - Node 1 of 2 ...
[10:25:31.696] [local output] localMachine=TRUE => revtunnel=FALSE

[10:25:31.697] Testing if worker's PID can be inferred: ‘'/usr/local/lib/R/bin/Rscript' -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/RtmpUMc0ts/worker.rank=1.parallelly.parent=81953.1402130196de.pid")), silent = TRUE)' -e 'file.exists("/tmp/RtmpUMc0ts/worker.rank=1.parallelly.parent=81953.1402130196de.pid")'’
[10:25:31.884] - Possible to infer worker's PID: TRUE
[10:25:31.885] [local output] Rscript port: 11227

[10:25:31.885] [local output]  - Node 2 of 2 ...
[10:25:31.885] [local output] localMachine=TRUE => revtunnel=FALSE

[10:25:31.886] [local output] Rscript port: 11227

[10:25:31.886] [local output] Getting setup options for 2 cluster nodes ... done
[10:25:31.886] [local output]  - Parallel setup requested for some PSOCK nodes
[10:25:31.887] [local output] Setting up PSOCK nodes in parallel
[10:25:31.887] List of 36
[10:25:31.887]  $ worker          : chr "localhost"
[10:25:31.887]   ..- attr(*, "localhost")= logi TRUE
[10:25:31.887]  $ master          : chr "localhost"
[10:25:31.887]  $ port            : int 11227
[10:25:31.887]  $ connectTimeout  : num 120
[10:25:31.887]  $ timeout         : num 2592000
[10:25:31.887]  $ rscript         : chr "'/usr/local/lib/R/bin/Rscript'"
[10:25:31.887]  $ homogeneous     : logi TRUE
[10:25:31.887]  $ rscript_args    : chr "--default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),fi"| __truncated__
[10:25:31.887]  $ rscript_envs    : NULL
[10:25:31.887]  $ rscript_libs    : NULL
[10:25:31.887]  $ rscript_startup : NULL
[10:25:31.887]  $ rscript_sh      : chr "sh"
[10:25:31.887]  $ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[10:25:31.887]  $ methods         : logi TRUE
[10:25:31.887]  $ socketOptions   : chr "no-delay"
[10:25:31.887]  $ useXDR          : logi FALSE
[10:25:31.887]  $ outfile         : chr "/dev/null"
[10:25:31.887]  $ renice          : int NA
[10:25:31.887]  $ rshcmd          : NULL
[10:25:31.887]  $ user            : chr(0) 
[10:25:31.887]  $ revtunnel       : logi FALSE
[10:25:31.887]  $ rshlogfile      : NULL
[10:25:31.887]  $ rshopts         : chr(0) 
[10:25:31.887]  $ rank            : int 1
[10:25:31.887]  $ manual          : logi FALSE
[10:25:31.887]  $ dryrun          : logi FALSE
[10:25:31.887]  $ quiet           : logi FALSE
[10:25:31.887]  $ setup_strategy  : chr "parallel"
[10:25:31.887]  $ local_cmd       : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[10:25:31.887]  $ pidfile         : chr "/tmp/RtmpUMc0ts/worker.rank=1.parallelly.parent=81953.1402130196de.pid"
[10:25:31.887]  $ rshcmd_label    : NULL
[10:25:31.887]  $ rsh_call        : NULL
[10:25:31.887]  $ cmd             : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[10:25:31.887]  $ localMachine    : logi TRUE
[10:25:31.887]  $ make_fcn        :function (worker = getOption2("parallelly.localhost.hostname", "localhost"), 
[10:25:31.887]     master = NULL, port, connectTimeout = getOption2("parallelly.makeNodePSOCK.connectTimeout", 
[10:25:31.887]         2 * 60), timeout = getOption2("parallelly.makeNodePSOCK.timeout", 
[10:25:31.887]         30 * 24 * 60 * 60), rscript = NULL, homogeneous = NULL, rscript_args = NULL, 
[10:25:31.887]     rscript_envs = NULL, rscript_libs = NULL, rscript_startup = NULL, rscript_sh = c("auto", 
[10:25:31.887]         "cmd", "sh"), default_packages = c("datasets", "utils", "grDevices", 
[10:25:31.887]         "graphics", "stats", if (methods) "methods"), methods = TRUE, socketOptions = getOption2("parallelly.makeNodePSOCK.socketOptions", 
[10:25:31.887]         "no-delay"), useXDR = getOption2("parallelly.makeNodePSOCK.useXDR", 
[10:25:31.887]         FALSE), outfile = "/dev/null", renice = NA_integer_, rshcmd = getOption2("parallelly.makeNodePSOCK.rshcmd", 
[10:25:31.887]         NULL), user = NULL, revtunnel = NA, rshlogfile = NULL, rshopts = getOption2("parallelly.makeNodePSOCK.rshopts", 
[10:25:31.887]         NULL), rank = 1L, manual = FALSE, dryrun = FALSE, quiet = FALSE, 
[10:25:31.887]     setup_strategy = getOption2("parallelly.makeNodePSOCK.setup_strategy", 
[10:25:31.887]         "parallel"), action = c("launch", "options"), verbose = FALSE)  
[10:25:31.887]  $ arguments       :List of 28
[10:25:31.887]   ..$ worker          : chr "localhost"
[10:25:31.887]   ..$ master          : NULL
[10:25:31.887]   ..$ port            : int 11227
[10:25:31.887]   ..$ connectTimeout  : num 120
[10:25:31.887]   ..$ timeout         : num 2592000
[10:25:31.887]   ..$ rscript         : NULL
[10:25:31.887]   ..$ homogeneous     : NULL
[10:25:31.887]   ..$ rscript_args    : NULL
[10:25:31.887]   ..$ rscript_envs    : NULL
[10:25:31.887]   ..$ rscript_libs    : NULL
[10:25:31.887]   ..$ rscript_startup : NULL
[10:25:31.887]   ..$ rscript_sh      : chr [1:3] "auto" "cmd" "sh"
[10:25:31.887]   ..$ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[10:25:31.887]   ..$ methods         : logi TRUE
[10:25:31.887]   ..$ socketOptions   : chr "no-delay"
[10:25:31.887]   ..$ useXDR          : logi FALSE
[10:25:31.887]   ..$ outfile         : chr "/dev/null"
[10:25:31.887]   ..$ renice          : int NA
[10:25:31.887]   ..$ rshcmd          : NULL
[10:25:31.887]   ..$ user            : NULL
[10:25:31.887]   ..$ revtunnel       : logi NA
[10:25:31.887]   ..$ rshlogfile      : NULL
[10:25:31.887]   ..$ rshopts         : NULL
[10:25:31.887]   ..$ rank            : int 1
[10:25:31.887]   ..$ manual          : logi FALSE
[10:25:31.887]   ..$ dryrun          : logi FALSE
[10:25:31.887]   ..$ quiet           : logi FALSE
[10:25:31.887]   ..$ setup_strategy  : chr "parallel"
[10:25:31.887]  - attr(*, "class")= chr [1:2] "makeNodePSOCKOptions" "makeNodeOptions"
[10:25:31.904] [local output] System call to launch all workers:
[10:25:31.904] [local output] '/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/RtmpUMc0ts/worker.rank=1.parallelly.parent=81953.1402130196de.pid")), silent = TRUE)' -e 'options(socketOptions = "no-delay")' -e 'workRSOCK <- tryCatch(parallel:::.workRSOCK, error=function(e) parallel:::.slaveRSOCK); workRSOCK()' MASTER=localhost PORT=11227 OUT=/dev/null TIMEOUT=2592000 XDR=FALSE SETUPTIMEOUT=120 SETUPSTRATEGY=parallel
[10:25:31.904] [local output] Starting PSOCK main server
[10:25:31.910] [local output] Workers launched
[10:25:31.910] [local output] Waiting for workers to connect back
[10:25:31.910]  - [local output] 0 workers out of 2 ready
[10:25:32.148]  - [local output] 0 workers out of 2 ready
[10:25:32.149]  - [local output] 1 workers out of 2 ready
[10:25:32.152]  - [local output] 1 workers out of 2 ready
[10:25:32.153]  - [local output] 2 workers out of 2 ready
[10:25:32.153] [local output] Launching of workers completed
[10:25:32.153] [local output] Collecting session information from workers
[10:25:32.154] [local output]  - Worker #1 of 2
[10:25:32.155] [local output]  - Worker #2 of 2
[10:25:32.155] [local output] makeClusterPSOCK() ... done
MultisessionFuture:
Label: ‘<none>’
Expression:
{
    42L
}
Lazy evaluation: FALSE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: 0x55d2e2ca66f8
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: FALSE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: 2bbaacb8-02e9-4075-ca46-5f7529a3bde4
Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[10:25:32.168] Packages needed by the future expression (n = 0): <none>
[10:25:32.168] Packages needed by future strategies (n = 0): <none>
[10:25:32.169] {
[10:25:32.169]     {
[10:25:32.169]         {
[10:25:32.169]             ...future.startTime <- base::Sys.time()
[10:25:32.169]             {
[10:25:32.169]                 {
[10:25:32.169]                   {
[10:25:32.169]                     {
[10:25:32.169]                       base::local({
[10:25:32.169]                         has_future <- base::requireNamespace("future", 
[10:25:32.169]                           quietly = TRUE)
[10:25:32.169]                         if (has_future) {
[10:25:32.169]                           ns <- base::getNamespace("future")
[10:25:32.169]                           version <- ns[[".package"]][["version"]]
[10:25:32.169]                           if (is.null(version)) 
[10:25:32.169]                             version <- utils::packageVersion("future")
[10:25:32.169]                         }
[10:25:32.169]                         else {
[10:25:32.169]                           version <- NULL
[10:25:32.169]                         }
[10:25:32.169]                         if (!has_future || version < "1.8.0") {
[10:25:32.169]                           info <- base::c(r_version = base::gsub("R version ", 
[10:25:32.169]                             "", base::R.version$version.string), 
[10:25:32.169]                             platform = base::sprintf("%s (%s-bit)", 
[10:25:32.169]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:25:32.169]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[10:25:32.169]                               "release", "version")], collapse = " "), 
[10:25:32.169]                             hostname = base::Sys.info()[["nodename"]])
[10:25:32.169]                           info <- base::sprintf("%s: %s", base::names(info), 
[10:25:32.169]                             info)
[10:25:32.169]                           info <- base::paste(info, collapse = "; ")
[10:25:32.169]                           if (!has_future) {
[10:25:32.169]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:25:32.169]                               info)
[10:25:32.169]                           }
[10:25:32.169]                           else {
[10:25:32.169]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:25:32.169]                               info, version)
[10:25:32.169]                           }
[10:25:32.169]                           base::stop(msg)
[10:25:32.169]                         }
[10:25:32.169]                       })
[10:25:32.169]                     }
[10:25:32.169]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[10:25:32.169]                     base::options(mc.cores = 1L)
[10:25:32.169]                   }
[10:25:32.169]                   options(future.plan = NULL)
[10:25:32.169]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:25:32.169]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:25:32.169]                 }
[10:25:32.169]                 ...future.workdir <- getwd()
[10:25:32.169]             }
[10:25:32.169]             ...future.oldOptions <- base::as.list(base::.Options)
[10:25:32.169]             ...future.oldEnvVars <- base::Sys.getenv()
[10:25:32.169]         }
[10:25:32.169]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:25:32.169]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[10:25:32.169]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:25:32.169]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:25:32.169]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:25:32.169]             future.stdout.windows.reencode = NULL, width = 80L)
[10:25:32.169]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:25:32.169]             base::names(...future.oldOptions))
[10:25:32.169]     }
[10:25:32.169]     if (FALSE) {
[10:25:32.169]     }
[10:25:32.169]     else {
[10:25:32.169]         if (TRUE) {
[10:25:32.169]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:25:32.169]                 open = "w")
[10:25:32.169]         }
[10:25:32.169]         else {
[10:25:32.169]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:25:32.169]                 windows = "NUL", "/dev/null"), open = "w")
[10:25:32.169]         }
[10:25:32.169]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:25:32.169]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:25:32.169]             base::sink(type = "output", split = FALSE)
[10:25:32.169]             base::close(...future.stdout)
[10:25:32.169]         }, add = TRUE)
[10:25:32.169]     }
[10:25:32.169]     ...future.frame <- base::sys.nframe()
[10:25:32.169]     ...future.conditions <- base::list()
[10:25:32.169]     ...future.rng <- base::globalenv()$.Random.seed
[10:25:32.169]     if (FALSE) {
[10:25:32.169]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:25:32.169]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:25:32.169]     }
[10:25:32.169]     ...future.result <- base::tryCatch({
[10:25:32.169]         base::withCallingHandlers({
[10:25:32.169]             ...future.value <- base::withVisible(base::local({
[10:25:32.169]                 ...future.makeSendCondition <- base::local({
[10:25:32.169]                   sendCondition <- NULL
[10:25:32.169]                   function(frame = 1L) {
[10:25:32.169]                     if (is.function(sendCondition)) 
[10:25:32.169]                       return(sendCondition)
[10:25:32.169]                     ns <- getNamespace("parallel")
[10:25:32.169]                     if (exists("sendData", mode = "function", 
[10:25:32.169]                       envir = ns)) {
[10:25:32.169]                       parallel_sendData <- get("sendData", mode = "function", 
[10:25:32.169]                         envir = ns)
[10:25:32.169]                       envir <- sys.frame(frame)
[10:25:32.169]                       master <- NULL
[10:25:32.169]                       while (!identical(envir, .GlobalEnv) && 
[10:25:32.169]                         !identical(envir, emptyenv())) {
[10:25:32.169]                         if (exists("master", mode = "list", envir = envir, 
[10:25:32.169]                           inherits = FALSE)) {
[10:25:32.169]                           master <- get("master", mode = "list", 
[10:25:32.169]                             envir = envir, inherits = FALSE)
[10:25:32.169]                           if (inherits(master, c("SOCKnode", 
[10:25:32.169]                             "SOCK0node"))) {
[10:25:32.169]                             sendCondition <<- function(cond) {
[10:25:32.169]                               data <- list(type = "VALUE", value = cond, 
[10:25:32.169]                                 success = TRUE)
[10:25:32.169]                               parallel_sendData(master, data)
[10:25:32.169]                             }
[10:25:32.169]                             return(sendCondition)
[10:25:32.169]                           }
[10:25:32.169]                         }
[10:25:32.169]                         frame <- frame + 1L
[10:25:32.169]                         envir <- sys.frame(frame)
[10:25:32.169]                       }
[10:25:32.169]                     }
[10:25:32.169]                     sendCondition <<- function(cond) NULL
[10:25:32.169]                   }
[10:25:32.169]                 })
[10:25:32.169]                 withCallingHandlers({
[10:25:32.169]                   {
[10:25:32.169]                     42L
[10:25:32.169]                   }
[10:25:32.169]                 }, immediateCondition = function(cond) {
[10:25:32.169]                   sendCondition <- ...future.makeSendCondition()
[10:25:32.169]                   sendCondition(cond)
[10:25:32.169]                   muffleCondition <- function (cond, pattern = "^muffle") 
[10:25:32.169]                   {
[10:25:32.169]                     inherits <- base::inherits
[10:25:32.169]                     invokeRestart <- base::invokeRestart
[10:25:32.169]                     is.null <- base::is.null
[10:25:32.169]                     muffled <- FALSE
[10:25:32.169]                     if (inherits(cond, "message")) {
[10:25:32.169]                       muffled <- grepl(pattern, "muffleMessage")
[10:25:32.169]                       if (muffled) 
[10:25:32.169]                         invokeRestart("muffleMessage")
[10:25:32.169]                     }
[10:25:32.169]                     else if (inherits(cond, "warning")) {
[10:25:32.169]                       muffled <- grepl(pattern, "muffleWarning")
[10:25:32.169]                       if (muffled) 
[10:25:32.169]                         invokeRestart("muffleWarning")
[10:25:32.169]                     }
[10:25:32.169]                     else if (inherits(cond, "condition")) {
[10:25:32.169]                       if (!is.null(pattern)) {
[10:25:32.169]                         computeRestarts <- base::computeRestarts
[10:25:32.169]                         grepl <- base::grepl
[10:25:32.169]                         restarts <- computeRestarts(cond)
[10:25:32.169]                         for (restart in restarts) {
[10:25:32.169]                           name <- restart$name
[10:25:32.169]                           if (is.null(name)) 
[10:25:32.169]                             next
[10:25:32.169]                           if (!grepl(pattern, name)) 
[10:25:32.169]                             next
[10:25:32.169]                           invokeRestart(restart)
[10:25:32.169]                           muffled <- TRUE
[10:25:32.169]                           break
[10:25:32.169]                         }
[10:25:32.169]                       }
[10:25:32.169]                     }
[10:25:32.169]                     invisible(muffled)
[10:25:32.169]                   }
[10:25:32.169]                   muffleCondition(cond)
[10:25:32.169]                 })
[10:25:32.169]             }))
[10:25:32.169]             future::FutureResult(value = ...future.value$value, 
[10:25:32.169]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:25:32.169]                   ...future.rng), globalenv = if (FALSE) 
[10:25:32.169]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:25:32.169]                     ...future.globalenv.names))
[10:25:32.169]                 else NULL, started = ...future.startTime, version = "1.8")
[10:25:32.169]         }, condition = base::local({
[10:25:32.169]             c <- base::c
[10:25:32.169]             inherits <- base::inherits
[10:25:32.169]             invokeRestart <- base::invokeRestart
[10:25:32.169]             length <- base::length
[10:25:32.169]             list <- base::list
[10:25:32.169]             seq.int <- base::seq.int
[10:25:32.169]             signalCondition <- base::signalCondition
[10:25:32.169]             sys.calls <- base::sys.calls
[10:25:32.169]             `[[` <- base::`[[`
[10:25:32.169]             `+` <- base::`+`
[10:25:32.169]             `<<-` <- base::`<<-`
[10:25:32.169]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:25:32.169]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:25:32.169]                   3L)]
[10:25:32.169]             }
[10:25:32.169]             function(cond) {
[10:25:32.169]                 is_error <- inherits(cond, "error")
[10:25:32.169]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:25:32.169]                   NULL)
[10:25:32.169]                 if (is_error) {
[10:25:32.169]                   sessionInformation <- function() {
[10:25:32.169]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:25:32.169]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:25:32.169]                       search = base::search(), system = base::Sys.info())
[10:25:32.169]                   }
[10:25:32.169]                   ...future.conditions[[length(...future.conditions) + 
[10:25:32.169]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:25:32.169]                     cond$call), session = sessionInformation(), 
[10:25:32.169]                     timestamp = base::Sys.time(), signaled = 0L)
[10:25:32.169]                   signalCondition(cond)
[10:25:32.169]                 }
[10:25:32.169]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:25:32.169]                 "immediateCondition"))) {
[10:25:32.169]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:25:32.169]                   ...future.conditions[[length(...future.conditions) + 
[10:25:32.169]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:25:32.169]                   if (TRUE && !signal) {
[10:25:32.169]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:25:32.169]                     {
[10:25:32.169]                       inherits <- base::inherits
[10:25:32.169]                       invokeRestart <- base::invokeRestart
[10:25:32.169]                       is.null <- base::is.null
[10:25:32.169]                       muffled <- FALSE
[10:25:32.169]                       if (inherits(cond, "message")) {
[10:25:32.169]                         muffled <- grepl(pattern, "muffleMessage")
[10:25:32.169]                         if (muffled) 
[10:25:32.169]                           invokeRestart("muffleMessage")
[10:25:32.169]                       }
[10:25:32.169]                       else if (inherits(cond, "warning")) {
[10:25:32.169]                         muffled <- grepl(pattern, "muffleWarning")
[10:25:32.169]                         if (muffled) 
[10:25:32.169]                           invokeRestart("muffleWarning")
[10:25:32.169]                       }
[10:25:32.169]                       else if (inherits(cond, "condition")) {
[10:25:32.169]                         if (!is.null(pattern)) {
[10:25:32.169]                           computeRestarts <- base::computeRestarts
[10:25:32.169]                           grepl <- base::grepl
[10:25:32.169]                           restarts <- computeRestarts(cond)
[10:25:32.169]                           for (restart in restarts) {
[10:25:32.169]                             name <- restart$name
[10:25:32.169]                             if (is.null(name)) 
[10:25:32.169]                               next
[10:25:32.169]                             if (!grepl(pattern, name)) 
[10:25:32.169]                               next
[10:25:32.169]                             invokeRestart(restart)
[10:25:32.169]                             muffled <- TRUE
[10:25:32.169]                             break
[10:25:32.169]                           }
[10:25:32.169]                         }
[10:25:32.169]                       }
[10:25:32.169]                       invisible(muffled)
[10:25:32.169]                     }
[10:25:32.169]                     muffleCondition(cond, pattern = "^muffle")
[10:25:32.169]                   }
[10:25:32.169]                 }
[10:25:32.169]                 else {
[10:25:32.169]                   if (TRUE) {
[10:25:32.169]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:25:32.169]                     {
[10:25:32.169]                       inherits <- base::inherits
[10:25:32.169]                       invokeRestart <- base::invokeRestart
[10:25:32.169]                       is.null <- base::is.null
[10:25:32.169]                       muffled <- FALSE
[10:25:32.169]                       if (inherits(cond, "message")) {
[10:25:32.169]                         muffled <- grepl(pattern, "muffleMessage")
[10:25:32.169]                         if (muffled) 
[10:25:32.169]                           invokeRestart("muffleMessage")
[10:25:32.169]                       }
[10:25:32.169]                       else if (inherits(cond, "warning")) {
[10:25:32.169]                         muffled <- grepl(pattern, "muffleWarning")
[10:25:32.169]                         if (muffled) 
[10:25:32.169]                           invokeRestart("muffleWarning")
[10:25:32.169]                       }
[10:25:32.169]                       else if (inherits(cond, "condition")) {
[10:25:32.169]                         if (!is.null(pattern)) {
[10:25:32.169]                           computeRestarts <- base::computeRestarts
[10:25:32.169]                           grepl <- base::grepl
[10:25:32.169]                           restarts <- computeRestarts(cond)
[10:25:32.169]                           for (restart in restarts) {
[10:25:32.169]                             name <- restart$name
[10:25:32.169]                             if (is.null(name)) 
[10:25:32.169]                               next
[10:25:32.169]                             if (!grepl(pattern, name)) 
[10:25:32.169]                               next
[10:25:32.169]                             invokeRestart(restart)
[10:25:32.169]                             muffled <- TRUE
[10:25:32.169]                             break
[10:25:32.169]                           }
[10:25:32.169]                         }
[10:25:32.169]                       }
[10:25:32.169]                       invisible(muffled)
[10:25:32.169]                     }
[10:25:32.169]                     muffleCondition(cond, pattern = "^muffle")
[10:25:32.169]                   }
[10:25:32.169]                 }
[10:25:32.169]             }
[10:25:32.169]         }))
[10:25:32.169]     }, error = function(ex) {
[10:25:32.169]         base::structure(base::list(value = NULL, visible = NULL, 
[10:25:32.169]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:25:32.169]                 ...future.rng), started = ...future.startTime, 
[10:25:32.169]             finished = Sys.time(), session_uuid = NA_character_, 
[10:25:32.169]             version = "1.8"), class = "FutureResult")
[10:25:32.169]     }, finally = {
[10:25:32.169]         if (!identical(...future.workdir, getwd())) 
[10:25:32.169]             setwd(...future.workdir)
[10:25:32.169]         {
[10:25:32.169]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:25:32.169]                 ...future.oldOptions$nwarnings <- NULL
[10:25:32.169]             }
[10:25:32.169]             base::options(...future.oldOptions)
[10:25:32.169]             if (.Platform$OS.type == "windows") {
[10:25:32.169]                 old_names <- names(...future.oldEnvVars)
[10:25:32.169]                 envs <- base::Sys.getenv()
[10:25:32.169]                 names <- names(envs)
[10:25:32.169]                 common <- intersect(names, old_names)
[10:25:32.169]                 added <- setdiff(names, old_names)
[10:25:32.169]                 removed <- setdiff(old_names, names)
[10:25:32.169]                 changed <- common[...future.oldEnvVars[common] != 
[10:25:32.169]                   envs[common]]
[10:25:32.169]                 NAMES <- toupper(changed)
[10:25:32.169]                 args <- list()
[10:25:32.169]                 for (kk in seq_along(NAMES)) {
[10:25:32.169]                   name <- changed[[kk]]
[10:25:32.169]                   NAME <- NAMES[[kk]]
[10:25:32.169]                   if (name != NAME && is.element(NAME, old_names)) 
[10:25:32.169]                     next
[10:25:32.169]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:25:32.169]                 }
[10:25:32.169]                 NAMES <- toupper(added)
[10:25:32.169]                 for (kk in seq_along(NAMES)) {
[10:25:32.169]                   name <- added[[kk]]
[10:25:32.169]                   NAME <- NAMES[[kk]]
[10:25:32.169]                   if (name != NAME && is.element(NAME, old_names)) 
[10:25:32.169]                     next
[10:25:32.169]                   args[[name]] <- ""
[10:25:32.169]                 }
[10:25:32.169]                 NAMES <- toupper(removed)
[10:25:32.169]                 for (kk in seq_along(NAMES)) {
[10:25:32.169]                   name <- removed[[kk]]
[10:25:32.169]                   NAME <- NAMES[[kk]]
[10:25:32.169]                   if (name != NAME && is.element(NAME, old_names)) 
[10:25:32.169]                     next
[10:25:32.169]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:25:32.169]                 }
[10:25:32.169]                 if (length(args) > 0) 
[10:25:32.169]                   base::do.call(base::Sys.setenv, args = args)
[10:25:32.169]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:25:32.169]             }
[10:25:32.169]             else {
[10:25:32.169]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:25:32.169]             }
[10:25:32.169]             {
[10:25:32.169]                 if (base::length(...future.futureOptionsAdded) > 
[10:25:32.169]                   0L) {
[10:25:32.169]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:25:32.169]                   base::names(opts) <- ...future.futureOptionsAdded
[10:25:32.169]                   base::options(opts)
[10:25:32.169]                 }
[10:25:32.169]                 {
[10:25:32.169]                   {
[10:25:32.169]                     base::options(mc.cores = ...future.mc.cores.old)
[10:25:32.169]                     NULL
[10:25:32.169]                   }
[10:25:32.169]                   options(future.plan = NULL)
[10:25:32.169]                   if (is.na(NA_character_)) 
[10:25:32.169]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:25:32.169]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:25:32.169]                   future::plan(list(function (...) 
[10:25:32.169]                   {
[10:25:32.169]                     Future(1)
[10:25:32.169]                   }), .cleanup = FALSE, .init = FALSE)
[10:25:32.169]                 }
[10:25:32.169]             }
[10:25:32.169]         }
[10:25:32.169]     })
[10:25:32.169]     if (TRUE) {
[10:25:32.169]         base::sink(type = "output", split = FALSE)
[10:25:32.169]         if (TRUE) {
[10:25:32.169]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:25:32.169]         }
[10:25:32.169]         else {
[10:25:32.169]             ...future.result["stdout"] <- base::list(NULL)
[10:25:32.169]         }
[10:25:32.169]         base::close(...future.stdout)
[10:25:32.169]         ...future.stdout <- NULL
[10:25:32.169]     }
[10:25:32.169]     ...future.result$conditions <- ...future.conditions
[10:25:32.169]     ...future.result$finished <- base::Sys.time()
[10:25:32.169]     ...future.result
[10:25:32.169] }
[10:25:32.223] MultisessionFuture started
[10:25:32.223] result() for ClusterFuture ...
[10:25:32.223] receiveMessageFromWorker() for ClusterFuture ...
[10:25:32.224] - Validating connection of MultisessionFuture
[10:25:32.256] - received message: FutureResult
[10:25:32.256] - Received FutureResult
[10:25:32.260] - Erased future from FutureRegistry
[10:25:32.260] result() for ClusterFuture ...
[10:25:32.260] - result already collected: FutureResult
[10:25:32.260] result() for ClusterFuture ... done
[10:25:32.260] receiveMessageFromWorker() for ClusterFuture ... done
[10:25:32.260] result() for ClusterFuture ... done
[10:25:32.261] result() for ClusterFuture ...
[10:25:32.261] - result already collected: FutureResult
[10:25:32.261] result() for ClusterFuture ... done
[1] 42
[10:25:32.262] getGlobalsAndPackages() ...
[10:25:32.262] 
[10:25:32.262] - globals: [0] <none>
[10:25:32.262] getGlobalsAndPackages() ... DONE
[10:25:32.273] Packages needed by the future expression (n = 0): <none>
[10:25:32.274] Packages needed by future strategies (n = 0): <none>
[10:25:32.274] {
[10:25:32.274]     {
[10:25:32.274]         {
[10:25:32.274]             ...future.startTime <- base::Sys.time()
[10:25:32.274]             {
[10:25:32.274]                 {
[10:25:32.274]                   {
[10:25:32.274]                     {
[10:25:32.274]                       base::local({
[10:25:32.274]                         has_future <- base::requireNamespace("future", 
[10:25:32.274]                           quietly = TRUE)
[10:25:32.274]                         if (has_future) {
[10:25:32.274]                           ns <- base::getNamespace("future")
[10:25:32.274]                           version <- ns[[".package"]][["version"]]
[10:25:32.274]                           if (is.null(version)) 
[10:25:32.274]                             version <- utils::packageVersion("future")
[10:25:32.274]                         }
[10:25:32.274]                         else {
[10:25:32.274]                           version <- NULL
[10:25:32.274]                         }
[10:25:32.274]                         if (!has_future || version < "1.8.0") {
[10:25:32.274]                           info <- base::c(r_version = base::gsub("R version ", 
[10:25:32.274]                             "", base::R.version$version.string), 
[10:25:32.274]                             platform = base::sprintf("%s (%s-bit)", 
[10:25:32.274]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:25:32.274]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[10:25:32.274]                               "release", "version")], collapse = " "), 
[10:25:32.274]                             hostname = base::Sys.info()[["nodename"]])
[10:25:32.274]                           info <- base::sprintf("%s: %s", base::names(info), 
[10:25:32.274]                             info)
[10:25:32.274]                           info <- base::paste(info, collapse = "; ")
[10:25:32.274]                           if (!has_future) {
[10:25:32.274]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:25:32.274]                               info)
[10:25:32.274]                           }
[10:25:32.274]                           else {
[10:25:32.274]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:25:32.274]                               info, version)
[10:25:32.274]                           }
[10:25:32.274]                           base::stop(msg)
[10:25:32.274]                         }
[10:25:32.274]                       })
[10:25:32.274]                     }
[10:25:32.274]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[10:25:32.274]                     base::options(mc.cores = 1L)
[10:25:32.274]                   }
[10:25:32.274]                   options(future.plan = NULL)
[10:25:32.274]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:25:32.274]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:25:32.274]                 }
[10:25:32.274]                 ...future.workdir <- getwd()
[10:25:32.274]             }
[10:25:32.274]             ...future.oldOptions <- base::as.list(base::.Options)
[10:25:32.274]             ...future.oldEnvVars <- base::Sys.getenv()
[10:25:32.274]         }
[10:25:32.274]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:25:32.274]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[10:25:32.274]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:25:32.274]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:25:32.274]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:25:32.274]             future.stdout.windows.reencode = NULL, width = 80L)
[10:25:32.274]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:25:32.274]             base::names(...future.oldOptions))
[10:25:32.274]     }
[10:25:32.274]     if (FALSE) {
[10:25:32.274]     }
[10:25:32.274]     else {
[10:25:32.274]         if (TRUE) {
[10:25:32.274]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:25:32.274]                 open = "w")
[10:25:32.274]         }
[10:25:32.274]         else {
[10:25:32.274]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:25:32.274]                 windows = "NUL", "/dev/null"), open = "w")
[10:25:32.274]         }
[10:25:32.274]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:25:32.274]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:25:32.274]             base::sink(type = "output", split = FALSE)
[10:25:32.274]             base::close(...future.stdout)
[10:25:32.274]         }, add = TRUE)
[10:25:32.274]     }
[10:25:32.274]     ...future.frame <- base::sys.nframe()
[10:25:32.274]     ...future.conditions <- base::list()
[10:25:32.274]     ...future.rng <- base::globalenv()$.Random.seed
[10:25:32.274]     if (FALSE) {
[10:25:32.274]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:25:32.274]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:25:32.274]     }
[10:25:32.274]     ...future.result <- base::tryCatch({
[10:25:32.274]         base::withCallingHandlers({
[10:25:32.274]             ...future.value <- base::withVisible(base::local({
[10:25:32.274]                 ...future.makeSendCondition <- base::local({
[10:25:32.274]                   sendCondition <- NULL
[10:25:32.274]                   function(frame = 1L) {
[10:25:32.274]                     if (is.function(sendCondition)) 
[10:25:32.274]                       return(sendCondition)
[10:25:32.274]                     ns <- getNamespace("parallel")
[10:25:32.274]                     if (exists("sendData", mode = "function", 
[10:25:32.274]                       envir = ns)) {
[10:25:32.274]                       parallel_sendData <- get("sendData", mode = "function", 
[10:25:32.274]                         envir = ns)
[10:25:32.274]                       envir <- sys.frame(frame)
[10:25:32.274]                       master <- NULL
[10:25:32.274]                       while (!identical(envir, .GlobalEnv) && 
[10:25:32.274]                         !identical(envir, emptyenv())) {
[10:25:32.274]                         if (exists("master", mode = "list", envir = envir, 
[10:25:32.274]                           inherits = FALSE)) {
[10:25:32.274]                           master <- get("master", mode = "list", 
[10:25:32.274]                             envir = envir, inherits = FALSE)
[10:25:32.274]                           if (inherits(master, c("SOCKnode", 
[10:25:32.274]                             "SOCK0node"))) {
[10:25:32.274]                             sendCondition <<- function(cond) {
[10:25:32.274]                               data <- list(type = "VALUE", value = cond, 
[10:25:32.274]                                 success = TRUE)
[10:25:32.274]                               parallel_sendData(master, data)
[10:25:32.274]                             }
[10:25:32.274]                             return(sendCondition)
[10:25:32.274]                           }
[10:25:32.274]                         }
[10:25:32.274]                         frame <- frame + 1L
[10:25:32.274]                         envir <- sys.frame(frame)
[10:25:32.274]                       }
[10:25:32.274]                     }
[10:25:32.274]                     sendCondition <<- function(cond) NULL
[10:25:32.274]                   }
[10:25:32.274]                 })
[10:25:32.274]                 withCallingHandlers({
[10:25:32.274]                   {
[10:25:32.274]                     42L
[10:25:32.274]                   }
[10:25:32.274]                 }, immediateCondition = function(cond) {
[10:25:32.274]                   sendCondition <- ...future.makeSendCondition()
[10:25:32.274]                   sendCondition(cond)
[10:25:32.274]                   muffleCondition <- function (cond, pattern = "^muffle") 
[10:25:32.274]                   {
[10:25:32.274]                     inherits <- base::inherits
[10:25:32.274]                     invokeRestart <- base::invokeRestart
[10:25:32.274]                     is.null <- base::is.null
[10:25:32.274]                     muffled <- FALSE
[10:25:32.274]                     if (inherits(cond, "message")) {
[10:25:32.274]                       muffled <- grepl(pattern, "muffleMessage")
[10:25:32.274]                       if (muffled) 
[10:25:32.274]                         invokeRestart("muffleMessage")
[10:25:32.274]                     }
[10:25:32.274]                     else if (inherits(cond, "warning")) {
[10:25:32.274]                       muffled <- grepl(pattern, "muffleWarning")
[10:25:32.274]                       if (muffled) 
[10:25:32.274]                         invokeRestart("muffleWarning")
[10:25:32.274]                     }
[10:25:32.274]                     else if (inherits(cond, "condition")) {
[10:25:32.274]                       if (!is.null(pattern)) {
[10:25:32.274]                         computeRestarts <- base::computeRestarts
[10:25:32.274]                         grepl <- base::grepl
[10:25:32.274]                         restarts <- computeRestarts(cond)
[10:25:32.274]                         for (restart in restarts) {
[10:25:32.274]                           name <- restart$name
[10:25:32.274]                           if (is.null(name)) 
[10:25:32.274]                             next
[10:25:32.274]                           if (!grepl(pattern, name)) 
[10:25:32.274]                             next
[10:25:32.274]                           invokeRestart(restart)
[10:25:32.274]                           muffled <- TRUE
[10:25:32.274]                           break
[10:25:32.274]                         }
[10:25:32.274]                       }
[10:25:32.274]                     }
[10:25:32.274]                     invisible(muffled)
[10:25:32.274]                   }
[10:25:32.274]                   muffleCondition(cond)
[10:25:32.274]                 })
[10:25:32.274]             }))
[10:25:32.274]             future::FutureResult(value = ...future.value$value, 
[10:25:32.274]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:25:32.274]                   ...future.rng), globalenv = if (FALSE) 
[10:25:32.274]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:25:32.274]                     ...future.globalenv.names))
[10:25:32.274]                 else NULL, started = ...future.startTime, version = "1.8")
[10:25:32.274]         }, condition = base::local({
[10:25:32.274]             c <- base::c
[10:25:32.274]             inherits <- base::inherits
[10:25:32.274]             invokeRestart <- base::invokeRestart
[10:25:32.274]             length <- base::length
[10:25:32.274]             list <- base::list
[10:25:32.274]             seq.int <- base::seq.int
[10:25:32.274]             signalCondition <- base::signalCondition
[10:25:32.274]             sys.calls <- base::sys.calls
[10:25:32.274]             `[[` <- base::`[[`
[10:25:32.274]             `+` <- base::`+`
[10:25:32.274]             `<<-` <- base::`<<-`
[10:25:32.274]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:25:32.274]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:25:32.274]                   3L)]
[10:25:32.274]             }
[10:25:32.274]             function(cond) {
[10:25:32.274]                 is_error <- inherits(cond, "error")
[10:25:32.274]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:25:32.274]                   NULL)
[10:25:32.274]                 if (is_error) {
[10:25:32.274]                   sessionInformation <- function() {
[10:25:32.274]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:25:32.274]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:25:32.274]                       search = base::search(), system = base::Sys.info())
[10:25:32.274]                   }
[10:25:32.274]                   ...future.conditions[[length(...future.conditions) + 
[10:25:32.274]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:25:32.274]                     cond$call), session = sessionInformation(), 
[10:25:32.274]                     timestamp = base::Sys.time(), signaled = 0L)
[10:25:32.274]                   signalCondition(cond)
[10:25:32.274]                 }
[10:25:32.274]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:25:32.274]                 "immediateCondition"))) {
[10:25:32.274]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:25:32.274]                   ...future.conditions[[length(...future.conditions) + 
[10:25:32.274]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:25:32.274]                   if (TRUE && !signal) {
[10:25:32.274]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:25:32.274]                     {
[10:25:32.274]                       inherits <- base::inherits
[10:25:32.274]                       invokeRestart <- base::invokeRestart
[10:25:32.274]                       is.null <- base::is.null
[10:25:32.274]                       muffled <- FALSE
[10:25:32.274]                       if (inherits(cond, "message")) {
[10:25:32.274]                         muffled <- grepl(pattern, "muffleMessage")
[10:25:32.274]                         if (muffled) 
[10:25:32.274]                           invokeRestart("muffleMessage")
[10:25:32.274]                       }
[10:25:32.274]                       else if (inherits(cond, "warning")) {
[10:25:32.274]                         muffled <- grepl(pattern, "muffleWarning")
[10:25:32.274]                         if (muffled) 
[10:25:32.274]                           invokeRestart("muffleWarning")
[10:25:32.274]                       }
[10:25:32.274]                       else if (inherits(cond, "condition")) {
[10:25:32.274]                         if (!is.null(pattern)) {
[10:25:32.274]                           computeRestarts <- base::computeRestarts
[10:25:32.274]                           grepl <- base::grepl
[10:25:32.274]                           restarts <- computeRestarts(cond)
[10:25:32.274]                           for (restart in restarts) {
[10:25:32.274]                             name <- restart$name
[10:25:32.274]                             if (is.null(name)) 
[10:25:32.274]                               next
[10:25:32.274]                             if (!grepl(pattern, name)) 
[10:25:32.274]                               next
[10:25:32.274]                             invokeRestart(restart)
[10:25:32.274]                             muffled <- TRUE
[10:25:32.274]                             break
[10:25:32.274]                           }
[10:25:32.274]                         }
[10:25:32.274]                       }
[10:25:32.274]                       invisible(muffled)
[10:25:32.274]                     }
[10:25:32.274]                     muffleCondition(cond, pattern = "^muffle")
[10:25:32.274]                   }
[10:25:32.274]                 }
[10:25:32.274]                 else {
[10:25:32.274]                   if (TRUE) {
[10:25:32.274]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:25:32.274]                     {
[10:25:32.274]                       inherits <- base::inherits
[10:25:32.274]                       invokeRestart <- base::invokeRestart
[10:25:32.274]                       is.null <- base::is.null
[10:25:32.274]                       muffled <- FALSE
[10:25:32.274]                       if (inherits(cond, "message")) {
[10:25:32.274]                         muffled <- grepl(pattern, "muffleMessage")
[10:25:32.274]                         if (muffled) 
[10:25:32.274]                           invokeRestart("muffleMessage")
[10:25:32.274]                       }
[10:25:32.274]                       else if (inherits(cond, "warning")) {
[10:25:32.274]                         muffled <- grepl(pattern, "muffleWarning")
[10:25:32.274]                         if (muffled) 
[10:25:32.274]                           invokeRestart("muffleWarning")
[10:25:32.274]                       }
[10:25:32.274]                       else if (inherits(cond, "condition")) {
[10:25:32.274]                         if (!is.null(pattern)) {
[10:25:32.274]                           computeRestarts <- base::computeRestarts
[10:25:32.274]                           grepl <- base::grepl
[10:25:32.274]                           restarts <- computeRestarts(cond)
[10:25:32.274]                           for (restart in restarts) {
[10:25:32.274]                             name <- restart$name
[10:25:32.274]                             if (is.null(name)) 
[10:25:32.274]                               next
[10:25:32.274]                             if (!grepl(pattern, name)) 
[10:25:32.274]                               next
[10:25:32.274]                             invokeRestart(restart)
[10:25:32.274]                             muffled <- TRUE
[10:25:32.274]                             break
[10:25:32.274]                           }
[10:25:32.274]                         }
[10:25:32.274]                       }
[10:25:32.274]                       invisible(muffled)
[10:25:32.274]                     }
[10:25:32.274]                     muffleCondition(cond, pattern = "^muffle")
[10:25:32.274]                   }
[10:25:32.274]                 }
[10:25:32.274]             }
[10:25:32.274]         }))
[10:25:32.274]     }, error = function(ex) {
[10:25:32.274]         base::structure(base::list(value = NULL, visible = NULL, 
[10:25:32.274]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:25:32.274]                 ...future.rng), started = ...future.startTime, 
[10:25:32.274]             finished = Sys.time(), session_uuid = NA_character_, 
[10:25:32.274]             version = "1.8"), class = "FutureResult")
[10:25:32.274]     }, finally = {
[10:25:32.274]         if (!identical(...future.workdir, getwd())) 
[10:25:32.274]             setwd(...future.workdir)
[10:25:32.274]         {
[10:25:32.274]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:25:32.274]                 ...future.oldOptions$nwarnings <- NULL
[10:25:32.274]             }
[10:25:32.274]             base::options(...future.oldOptions)
[10:25:32.274]             if (.Platform$OS.type == "windows") {
[10:25:32.274]                 old_names <- names(...future.oldEnvVars)
[10:25:32.274]                 envs <- base::Sys.getenv()
[10:25:32.274]                 names <- names(envs)
[10:25:32.274]                 common <- intersect(names, old_names)
[10:25:32.274]                 added <- setdiff(names, old_names)
[10:25:32.274]                 removed <- setdiff(old_names, names)
[10:25:32.274]                 changed <- common[...future.oldEnvVars[common] != 
[10:25:32.274]                   envs[common]]
[10:25:32.274]                 NAMES <- toupper(changed)
[10:25:32.274]                 args <- list()
[10:25:32.274]                 for (kk in seq_along(NAMES)) {
[10:25:32.274]                   name <- changed[[kk]]
[10:25:32.274]                   NAME <- NAMES[[kk]]
[10:25:32.274]                   if (name != NAME && is.element(NAME, old_names)) 
[10:25:32.274]                     next
[10:25:32.274]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:25:32.274]                 }
[10:25:32.274]                 NAMES <- toupper(added)
[10:25:32.274]                 for (kk in seq_along(NAMES)) {
[10:25:32.274]                   name <- added[[kk]]
[10:25:32.274]                   NAME <- NAMES[[kk]]
[10:25:32.274]                   if (name != NAME && is.element(NAME, old_names)) 
[10:25:32.274]                     next
[10:25:32.274]                   args[[name]] <- ""
[10:25:32.274]                 }
[10:25:32.274]                 NAMES <- toupper(removed)
[10:25:32.274]                 for (kk in seq_along(NAMES)) {
[10:25:32.274]                   name <- removed[[kk]]
[10:25:32.274]                   NAME <- NAMES[[kk]]
[10:25:32.274]                   if (name != NAME && is.element(NAME, old_names)) 
[10:25:32.274]                     next
[10:25:32.274]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:25:32.274]                 }
[10:25:32.274]                 if (length(args) > 0) 
[10:25:32.274]                   base::do.call(base::Sys.setenv, args = args)
[10:25:32.274]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:25:32.274]             }
[10:25:32.274]             else {
[10:25:32.274]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:25:32.274]             }
[10:25:32.274]             {
[10:25:32.274]                 if (base::length(...future.futureOptionsAdded) > 
[10:25:32.274]                   0L) {
[10:25:32.274]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:25:32.274]                   base::names(opts) <- ...future.futureOptionsAdded
[10:25:32.274]                   base::options(opts)
[10:25:32.274]                 }
[10:25:32.274]                 {
[10:25:32.274]                   {
[10:25:32.274]                     base::options(mc.cores = ...future.mc.cores.old)
[10:25:32.274]                     NULL
[10:25:32.274]                   }
[10:25:32.274]                   options(future.plan = NULL)
[10:25:32.274]                   if (is.na(NA_character_)) 
[10:25:32.274]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:25:32.274]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:25:32.274]                   future::plan(list(function (...) 
[10:25:32.274]                   {
[10:25:32.274]                     Future(1)
[10:25:32.274]                   }), .cleanup = FALSE, .init = FALSE)
[10:25:32.274]                 }
[10:25:32.274]             }
[10:25:32.274]         }
[10:25:32.274]     })
[10:25:32.274]     if (TRUE) {
[10:25:32.274]         base::sink(type = "output", split = FALSE)
[10:25:32.274]         if (TRUE) {
[10:25:32.274]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:25:32.274]         }
[10:25:32.274]         else {
[10:25:32.274]             ...future.result["stdout"] <- base::list(NULL)
[10:25:32.274]         }
[10:25:32.274]         base::close(...future.stdout)
[10:25:32.274]         ...future.stdout <- NULL
[10:25:32.274]     }
[10:25:32.274]     ...future.result$conditions <- ...future.conditions
[10:25:32.274]     ...future.result$finished <- base::Sys.time()
[10:25:32.274]     ...future.result
[10:25:32.274] }
[10:25:32.277] MultisessionFuture started
[10:25:32.277] result() for ClusterFuture ...
[10:25:32.277] receiveMessageFromWorker() for ClusterFuture ...
[10:25:32.278] - Validating connection of MultisessionFuture
[10:25:32.282] - received message: FutureResult
[10:25:32.282] - Received FutureResult
[10:25:32.282] - Erased future from FutureRegistry
[10:25:32.282] result() for ClusterFuture ...
[10:25:32.282] - result already collected: FutureResult
[10:25:32.282] result() for ClusterFuture ... done
[10:25:32.283] receiveMessageFromWorker() for ClusterFuture ... done
[10:25:32.283] result() for ClusterFuture ... done
[10:25:32.283] result() for ClusterFuture ...
[10:25:32.283] - result already collected: FutureResult
[10:25:32.283] result() for ClusterFuture ... done
[1] 42
[10:25:32.283] getGlobalsAndPackages() ...
[10:25:32.283] Searching for globals...
[10:25:32.284] - globals found: [1] ‘{’
[10:25:32.284] Searching for globals ... DONE
[10:25:32.284] Resolving globals: FALSE
[10:25:32.285] 
[10:25:32.285] 
[10:25:32.285] getGlobalsAndPackages() ... DONE
SequentialFuture:
Label: ‘<none>’
Expression:
{
    42L
}
Lazy evaluation: FALSE
Asynchronous evaluation: FALSE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: FALSE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: 2bbaacb8-02e9-4075-ca46-5f7529a3bde4
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[10:25:32.286] Packages needed by the future expression (n = 0): <none>
[10:25:32.286] Packages needed by future strategies (n = 0): <none>
[10:25:32.286] {
[10:25:32.286]     {
[10:25:32.286]         {
[10:25:32.286]             ...future.startTime <- base::Sys.time()
[10:25:32.286]             {
[10:25:32.286]                 {
[10:25:32.286]                   {
[10:25:32.286]                     base::local({
[10:25:32.286]                       has_future <- base::requireNamespace("future", 
[10:25:32.286]                         quietly = TRUE)
[10:25:32.286]                       if (has_future) {
[10:25:32.286]                         ns <- base::getNamespace("future")
[10:25:32.286]                         version <- ns[[".package"]][["version"]]
[10:25:32.286]                         if (is.null(version)) 
[10:25:32.286]                           version <- utils::packageVersion("future")
[10:25:32.286]                       }
[10:25:32.286]                       else {
[10:25:32.286]                         version <- NULL
[10:25:32.286]                       }
[10:25:32.286]                       if (!has_future || version < "1.8.0") {
[10:25:32.286]                         info <- base::c(r_version = base::gsub("R version ", 
[10:25:32.286]                           "", base::R.version$version.string), 
[10:25:32.286]                           platform = base::sprintf("%s (%s-bit)", 
[10:25:32.286]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:25:32.286]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[10:25:32.286]                             "release", "version")], collapse = " "), 
[10:25:32.286]                           hostname = base::Sys.info()[["nodename"]])
[10:25:32.286]                         info <- base::sprintf("%s: %s", base::names(info), 
[10:25:32.286]                           info)
[10:25:32.286]                         info <- base::paste(info, collapse = "; ")
[10:25:32.286]                         if (!has_future) {
[10:25:32.286]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:25:32.286]                             info)
[10:25:32.286]                         }
[10:25:32.286]                         else {
[10:25:32.286]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:25:32.286]                             info, version)
[10:25:32.286]                         }
[10:25:32.286]                         base::stop(msg)
[10:25:32.286]                       }
[10:25:32.286]                     })
[10:25:32.286]                   }
[10:25:32.286]                   options(future.plan = NULL)
[10:25:32.286]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:25:32.286]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:25:32.286]                 }
[10:25:32.286]                 ...future.workdir <- getwd()
[10:25:32.286]             }
[10:25:32.286]             ...future.oldOptions <- base::as.list(base::.Options)
[10:25:32.286]             ...future.oldEnvVars <- base::Sys.getenv()
[10:25:32.286]         }
[10:25:32.286]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:25:32.286]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[10:25:32.286]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:25:32.286]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:25:32.286]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:25:32.286]             future.stdout.windows.reencode = NULL, width = 80L)
[10:25:32.286]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:25:32.286]             base::names(...future.oldOptions))
[10:25:32.286]     }
[10:25:32.286]     if (FALSE) {
[10:25:32.286]     }
[10:25:32.286]     else {
[10:25:32.286]         if (TRUE) {
[10:25:32.286]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:25:32.286]                 open = "w")
[10:25:32.286]         }
[10:25:32.286]         else {
[10:25:32.286]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:25:32.286]                 windows = "NUL", "/dev/null"), open = "w")
[10:25:32.286]         }
[10:25:32.286]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:25:32.286]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:25:32.286]             base::sink(type = "output", split = FALSE)
[10:25:32.286]             base::close(...future.stdout)
[10:25:32.286]         }, add = TRUE)
[10:25:32.286]     }
[10:25:32.286]     ...future.frame <- base::sys.nframe()
[10:25:32.286]     ...future.conditions <- base::list()
[10:25:32.286]     ...future.rng <- base::globalenv()$.Random.seed
[10:25:32.286]     if (FALSE) {
[10:25:32.286]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:25:32.286]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:25:32.286]     }
[10:25:32.286]     ...future.result <- base::tryCatch({
[10:25:32.286]         base::withCallingHandlers({
[10:25:32.286]             ...future.value <- base::withVisible(base::local({
[10:25:32.286]                 42L
[10:25:32.286]             }))
[10:25:32.286]             future::FutureResult(value = ...future.value$value, 
[10:25:32.286]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:25:32.286]                   ...future.rng), globalenv = if (FALSE) 
[10:25:32.286]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:25:32.286]                     ...future.globalenv.names))
[10:25:32.286]                 else NULL, started = ...future.startTime, version = "1.8")
[10:25:32.286]         }, condition = base::local({
[10:25:32.286]             c <- base::c
[10:25:32.286]             inherits <- base::inherits
[10:25:32.286]             invokeRestart <- base::invokeRestart
[10:25:32.286]             length <- base::length
[10:25:32.286]             list <- base::list
[10:25:32.286]             seq.int <- base::seq.int
[10:25:32.286]             signalCondition <- base::signalCondition
[10:25:32.286]             sys.calls <- base::sys.calls
[10:25:32.286]             `[[` <- base::`[[`
[10:25:32.286]             `+` <- base::`+`
[10:25:32.286]             `<<-` <- base::`<<-`
[10:25:32.286]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:25:32.286]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:25:32.286]                   3L)]
[10:25:32.286]             }
[10:25:32.286]             function(cond) {
[10:25:32.286]                 is_error <- inherits(cond, "error")
[10:25:32.286]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:25:32.286]                   NULL)
[10:25:32.286]                 if (is_error) {
[10:25:32.286]                   sessionInformation <- function() {
[10:25:32.286]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:25:32.286]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:25:32.286]                       search = base::search(), system = base::Sys.info())
[10:25:32.286]                   }
[10:25:32.286]                   ...future.conditions[[length(...future.conditions) + 
[10:25:32.286]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:25:32.286]                     cond$call), session = sessionInformation(), 
[10:25:32.286]                     timestamp = base::Sys.time(), signaled = 0L)
[10:25:32.286]                   signalCondition(cond)
[10:25:32.286]                 }
[10:25:32.286]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:25:32.286]                 "immediateCondition"))) {
[10:25:32.286]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:25:32.286]                   ...future.conditions[[length(...future.conditions) + 
[10:25:32.286]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:25:32.286]                   if (TRUE && !signal) {
[10:25:32.286]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:25:32.286]                     {
[10:25:32.286]                       inherits <- base::inherits
[10:25:32.286]                       invokeRestart <- base::invokeRestart
[10:25:32.286]                       is.null <- base::is.null
[10:25:32.286]                       muffled <- FALSE
[10:25:32.286]                       if (inherits(cond, "message")) {
[10:25:32.286]                         muffled <- grepl(pattern, "muffleMessage")
[10:25:32.286]                         if (muffled) 
[10:25:32.286]                           invokeRestart("muffleMessage")
[10:25:32.286]                       }
[10:25:32.286]                       else if (inherits(cond, "warning")) {
[10:25:32.286]                         muffled <- grepl(pattern, "muffleWarning")
[10:25:32.286]                         if (muffled) 
[10:25:32.286]                           invokeRestart("muffleWarning")
[10:25:32.286]                       }
[10:25:32.286]                       else if (inherits(cond, "condition")) {
[10:25:32.286]                         if (!is.null(pattern)) {
[10:25:32.286]                           computeRestarts <- base::computeRestarts
[10:25:32.286]                           grepl <- base::grepl
[10:25:32.286]                           restarts <- computeRestarts(cond)
[10:25:32.286]                           for (restart in restarts) {
[10:25:32.286]                             name <- restart$name
[10:25:32.286]                             if (is.null(name)) 
[10:25:32.286]                               next
[10:25:32.286]                             if (!grepl(pattern, name)) 
[10:25:32.286]                               next
[10:25:32.286]                             invokeRestart(restart)
[10:25:32.286]                             muffled <- TRUE
[10:25:32.286]                             break
[10:25:32.286]                           }
[10:25:32.286]                         }
[10:25:32.286]                       }
[10:25:32.286]                       invisible(muffled)
[10:25:32.286]                     }
[10:25:32.286]                     muffleCondition(cond, pattern = "^muffle")
[10:25:32.286]                   }
[10:25:32.286]                 }
[10:25:32.286]                 else {
[10:25:32.286]                   if (TRUE) {
[10:25:32.286]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:25:32.286]                     {
[10:25:32.286]                       inherits <- base::inherits
[10:25:32.286]                       invokeRestart <- base::invokeRestart
[10:25:32.286]                       is.null <- base::is.null
[10:25:32.286]                       muffled <- FALSE
[10:25:32.286]                       if (inherits(cond, "message")) {
[10:25:32.286]                         muffled <- grepl(pattern, "muffleMessage")
[10:25:32.286]                         if (muffled) 
[10:25:32.286]                           invokeRestart("muffleMessage")
[10:25:32.286]                       }
[10:25:32.286]                       else if (inherits(cond, "warning")) {
[10:25:32.286]                         muffled <- grepl(pattern, "muffleWarning")
[10:25:32.286]                         if (muffled) 
[10:25:32.286]                           invokeRestart("muffleWarning")
[10:25:32.286]                       }
[10:25:32.286]                       else if (inherits(cond, "condition")) {
[10:25:32.286]                         if (!is.null(pattern)) {
[10:25:32.286]                           computeRestarts <- base::computeRestarts
[10:25:32.286]                           grepl <- base::grepl
[10:25:32.286]                           restarts <- computeRestarts(cond)
[10:25:32.286]                           for (restart in restarts) {
[10:25:32.286]                             name <- restart$name
[10:25:32.286]                             if (is.null(name)) 
[10:25:32.286]                               next
[10:25:32.286]                             if (!grepl(pattern, name)) 
[10:25:32.286]                               next
[10:25:32.286]                             invokeRestart(restart)
[10:25:32.286]                             muffled <- TRUE
[10:25:32.286]                             break
[10:25:32.286]                           }
[10:25:32.286]                         }
[10:25:32.286]                       }
[10:25:32.286]                       invisible(muffled)
[10:25:32.286]                     }
[10:25:32.286]                     muffleCondition(cond, pattern = "^muffle")
[10:25:32.286]                   }
[10:25:32.286]                 }
[10:25:32.286]             }
[10:25:32.286]         }))
[10:25:32.286]     }, error = function(ex) {
[10:25:32.286]         base::structure(base::list(value = NULL, visible = NULL, 
[10:25:32.286]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:25:32.286]                 ...future.rng), started = ...future.startTime, 
[10:25:32.286]             finished = Sys.time(), session_uuid = NA_character_, 
[10:25:32.286]             version = "1.8"), class = "FutureResult")
[10:25:32.286]     }, finally = {
[10:25:32.286]         if (!identical(...future.workdir, getwd())) 
[10:25:32.286]             setwd(...future.workdir)
[10:25:32.286]         {
[10:25:32.286]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:25:32.286]                 ...future.oldOptions$nwarnings <- NULL
[10:25:32.286]             }
[10:25:32.286]             base::options(...future.oldOptions)
[10:25:32.286]             if (.Platform$OS.type == "windows") {
[10:25:32.286]                 old_names <- names(...future.oldEnvVars)
[10:25:32.286]                 envs <- base::Sys.getenv()
[10:25:32.286]                 names <- names(envs)
[10:25:32.286]                 common <- intersect(names, old_names)
[10:25:32.286]                 added <- setdiff(names, old_names)
[10:25:32.286]                 removed <- setdiff(old_names, names)
[10:25:32.286]                 changed <- common[...future.oldEnvVars[common] != 
[10:25:32.286]                   envs[common]]
[10:25:32.286]                 NAMES <- toupper(changed)
[10:25:32.286]                 args <- list()
[10:25:32.286]                 for (kk in seq_along(NAMES)) {
[10:25:32.286]                   name <- changed[[kk]]
[10:25:32.286]                   NAME <- NAMES[[kk]]
[10:25:32.286]                   if (name != NAME && is.element(NAME, old_names)) 
[10:25:32.286]                     next
[10:25:32.286]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:25:32.286]                 }
[10:25:32.286]                 NAMES <- toupper(added)
[10:25:32.286]                 for (kk in seq_along(NAMES)) {
[10:25:32.286]                   name <- added[[kk]]
[10:25:32.286]                   NAME <- NAMES[[kk]]
[10:25:32.286]                   if (name != NAME && is.element(NAME, old_names)) 
[10:25:32.286]                     next
[10:25:32.286]                   args[[name]] <- ""
[10:25:32.286]                 }
[10:25:32.286]                 NAMES <- toupper(removed)
[10:25:32.286]                 for (kk in seq_along(NAMES)) {
[10:25:32.286]                   name <- removed[[kk]]
[10:25:32.286]                   NAME <- NAMES[[kk]]
[10:25:32.286]                   if (name != NAME && is.element(NAME, old_names)) 
[10:25:32.286]                     next
[10:25:32.286]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:25:32.286]                 }
[10:25:32.286]                 if (length(args) > 0) 
[10:25:32.286]                   base::do.call(base::Sys.setenv, args = args)
[10:25:32.286]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:25:32.286]             }
[10:25:32.286]             else {
[10:25:32.286]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:25:32.286]             }
[10:25:32.286]             {
[10:25:32.286]                 if (base::length(...future.futureOptionsAdded) > 
[10:25:32.286]                   0L) {
[10:25:32.286]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:25:32.286]                   base::names(opts) <- ...future.futureOptionsAdded
[10:25:32.286]                   base::options(opts)
[10:25:32.286]                 }
[10:25:32.286]                 {
[10:25:32.286]                   {
[10:25:32.286]                     NULL
[10:25:32.286]                     RNGkind("Mersenne-Twister")
[10:25:32.286]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[10:25:32.286]                       inherits = FALSE)
[10:25:32.286]                   }
[10:25:32.286]                   options(future.plan = NULL)
[10:25:32.286]                   if (is.na(NA_character_)) 
[10:25:32.286]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:25:32.286]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:25:32.286]                   future::plan(list(function (...) 
[10:25:32.286]                   {
[10:25:32.286]                     Future(1)
[10:25:32.286]                   }), .cleanup = FALSE, .init = FALSE)
[10:25:32.286]                 }
[10:25:32.286]             }
[10:25:32.286]         }
[10:25:32.286]     })
[10:25:32.286]     if (TRUE) {
[10:25:32.286]         base::sink(type = "output", split = FALSE)
[10:25:32.286]         if (TRUE) {
[10:25:32.286]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:25:32.286]         }
[10:25:32.286]         else {
[10:25:32.286]             ...future.result["stdout"] <- base::list(NULL)
[10:25:32.286]         }
[10:25:32.286]         base::close(...future.stdout)
[10:25:32.286]         ...future.stdout <- NULL
[10:25:32.286]     }
[10:25:32.286]     ...future.result$conditions <- ...future.conditions
[10:25:32.286]     ...future.result$finished <- base::Sys.time()
[10:25:32.286]     ...future.result
[10:25:32.286] }
[10:25:32.288] plan(): Setting new future strategy stack:
[10:25:32.289] List of future strategies:
[10:25:32.289] 1. sequential:
[10:25:32.289]    - args: function (..., envir = parent.frame())
[10:25:32.289]    - tweaked: FALSE
[10:25:32.289]    - call: NULL
[10:25:32.289] plan(): nbrOfWorkers() = 1
[10:25:32.290] plan(): Setting new future strategy stack:
[10:25:32.290] List of future strategies:
[10:25:32.290] 1. future:
[10:25:32.290]    - args: function (...)
[10:25:32.290]    - tweaked: FALSE
[10:25:32.290]    - call: plan(foo)
[10:25:32.290] plan(): nbrOfWorkers() = Inf
[10:25:32.291] SequentialFuture started (and completed)
[1] 42
[10:25:32.291] getGlobalsAndPackages() ...
[10:25:32.291] Searching for globals...
[10:25:32.292] - globals found: [1] ‘{’
[10:25:32.292] Searching for globals ... DONE
[10:25:32.292] Resolving globals: FALSE
[10:25:32.292] 
[10:25:32.293] 
[10:25:32.293] getGlobalsAndPackages() ... DONE
[10:25:32.293] Packages needed by the future expression (n = 0): <none>
[10:25:32.293] Packages needed by future strategies (n = 0): <none>
[10:25:32.294] {
[10:25:32.294]     {
[10:25:32.294]         {
[10:25:32.294]             ...future.startTime <- base::Sys.time()
[10:25:32.294]             {
[10:25:32.294]                 {
[10:25:32.294]                   {
[10:25:32.294]                     base::local({
[10:25:32.294]                       has_future <- base::requireNamespace("future", 
[10:25:32.294]                         quietly = TRUE)
[10:25:32.294]                       if (has_future) {
[10:25:32.294]                         ns <- base::getNamespace("future")
[10:25:32.294]                         version <- ns[[".package"]][["version"]]
[10:25:32.294]                         if (is.null(version)) 
[10:25:32.294]                           version <- utils::packageVersion("future")
[10:25:32.294]                       }
[10:25:32.294]                       else {
[10:25:32.294]                         version <- NULL
[10:25:32.294]                       }
[10:25:32.294]                       if (!has_future || version < "1.8.0") {
[10:25:32.294]                         info <- base::c(r_version = base::gsub("R version ", 
[10:25:32.294]                           "", base::R.version$version.string), 
[10:25:32.294]                           platform = base::sprintf("%s (%s-bit)", 
[10:25:32.294]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:25:32.294]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[10:25:32.294]                             "release", "version")], collapse = " "), 
[10:25:32.294]                           hostname = base::Sys.info()[["nodename"]])
[10:25:32.294]                         info <- base::sprintf("%s: %s", base::names(info), 
[10:25:32.294]                           info)
[10:25:32.294]                         info <- base::paste(info, collapse = "; ")
[10:25:32.294]                         if (!has_future) {
[10:25:32.294]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:25:32.294]                             info)
[10:25:32.294]                         }
[10:25:32.294]                         else {
[10:25:32.294]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:25:32.294]                             info, version)
[10:25:32.294]                         }
[10:25:32.294]                         base::stop(msg)
[10:25:32.294]                       }
[10:25:32.294]                     })
[10:25:32.294]                   }
[10:25:32.294]                   options(future.plan = NULL)
[10:25:32.294]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:25:32.294]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:25:32.294]                 }
[10:25:32.294]                 ...future.workdir <- getwd()
[10:25:32.294]             }
[10:25:32.294]             ...future.oldOptions <- base::as.list(base::.Options)
[10:25:32.294]             ...future.oldEnvVars <- base::Sys.getenv()
[10:25:32.294]         }
[10:25:32.294]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:25:32.294]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[10:25:32.294]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:25:32.294]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:25:32.294]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:25:32.294]             future.stdout.windows.reencode = NULL, width = 80L)
[10:25:32.294]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:25:32.294]             base::names(...future.oldOptions))
[10:25:32.294]     }
[10:25:32.294]     if (FALSE) {
[10:25:32.294]     }
[10:25:32.294]     else {
[10:25:32.294]         if (TRUE) {
[10:25:32.294]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:25:32.294]                 open = "w")
[10:25:32.294]         }
[10:25:32.294]         else {
[10:25:32.294]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:25:32.294]                 windows = "NUL", "/dev/null"), open = "w")
[10:25:32.294]         }
[10:25:32.294]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:25:32.294]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:25:32.294]             base::sink(type = "output", split = FALSE)
[10:25:32.294]             base::close(...future.stdout)
[10:25:32.294]         }, add = TRUE)
[10:25:32.294]     }
[10:25:32.294]     ...future.frame <- base::sys.nframe()
[10:25:32.294]     ...future.conditions <- base::list()
[10:25:32.294]     ...future.rng <- base::globalenv()$.Random.seed
[10:25:32.294]     if (FALSE) {
[10:25:32.294]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:25:32.294]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:25:32.294]     }
[10:25:32.294]     ...future.result <- base::tryCatch({
[10:25:32.294]         base::withCallingHandlers({
[10:25:32.294]             ...future.value <- base::withVisible(base::local({
[10:25:32.294]                 42L
[10:25:32.294]             }))
[10:25:32.294]             future::FutureResult(value = ...future.value$value, 
[10:25:32.294]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:25:32.294]                   ...future.rng), globalenv = if (FALSE) 
[10:25:32.294]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:25:32.294]                     ...future.globalenv.names))
[10:25:32.294]                 else NULL, started = ...future.startTime, version = "1.8")
[10:25:32.294]         }, condition = base::local({
[10:25:32.294]             c <- base::c
[10:25:32.294]             inherits <- base::inherits
[10:25:32.294]             invokeRestart <- base::invokeRestart
[10:25:32.294]             length <- base::length
[10:25:32.294]             list <- base::list
[10:25:32.294]             seq.int <- base::seq.int
[10:25:32.294]             signalCondition <- base::signalCondition
[10:25:32.294]             sys.calls <- base::sys.calls
[10:25:32.294]             `[[` <- base::`[[`
[10:25:32.294]             `+` <- base::`+`
[10:25:32.294]             `<<-` <- base::`<<-`
[10:25:32.294]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:25:32.294]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:25:32.294]                   3L)]
[10:25:32.294]             }
[10:25:32.294]             function(cond) {
[10:25:32.294]                 is_error <- inherits(cond, "error")
[10:25:32.294]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:25:32.294]                   NULL)
[10:25:32.294]                 if (is_error) {
[10:25:32.294]                   sessionInformation <- function() {
[10:25:32.294]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:25:32.294]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:25:32.294]                       search = base::search(), system = base::Sys.info())
[10:25:32.294]                   }
[10:25:32.294]                   ...future.conditions[[length(...future.conditions) + 
[10:25:32.294]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:25:32.294]                     cond$call), session = sessionInformation(), 
[10:25:32.294]                     timestamp = base::Sys.time(), signaled = 0L)
[10:25:32.294]                   signalCondition(cond)
[10:25:32.294]                 }
[10:25:32.294]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:25:32.294]                 "immediateCondition"))) {
[10:25:32.294]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:25:32.294]                   ...future.conditions[[length(...future.conditions) + 
[10:25:32.294]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:25:32.294]                   if (TRUE && !signal) {
[10:25:32.294]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:25:32.294]                     {
[10:25:32.294]                       inherits <- base::inherits
[10:25:32.294]                       invokeRestart <- base::invokeRestart
[10:25:32.294]                       is.null <- base::is.null
[10:25:32.294]                       muffled <- FALSE
[10:25:32.294]                       if (inherits(cond, "message")) {
[10:25:32.294]                         muffled <- grepl(pattern, "muffleMessage")
[10:25:32.294]                         if (muffled) 
[10:25:32.294]                           invokeRestart("muffleMessage")
[10:25:32.294]                       }
[10:25:32.294]                       else if (inherits(cond, "warning")) {
[10:25:32.294]                         muffled <- grepl(pattern, "muffleWarning")
[10:25:32.294]                         if (muffled) 
[10:25:32.294]                           invokeRestart("muffleWarning")
[10:25:32.294]                       }
[10:25:32.294]                       else if (inherits(cond, "condition")) {
[10:25:32.294]                         if (!is.null(pattern)) {
[10:25:32.294]                           computeRestarts <- base::computeRestarts
[10:25:32.294]                           grepl <- base::grepl
[10:25:32.294]                           restarts <- computeRestarts(cond)
[10:25:32.294]                           for (restart in restarts) {
[10:25:32.294]                             name <- restart$name
[10:25:32.294]                             if (is.null(name)) 
[10:25:32.294]                               next
[10:25:32.294]                             if (!grepl(pattern, name)) 
[10:25:32.294]                               next
[10:25:32.294]                             invokeRestart(restart)
[10:25:32.294]                             muffled <- TRUE
[10:25:32.294]                             break
[10:25:32.294]                           }
[10:25:32.294]                         }
[10:25:32.294]                       }
[10:25:32.294]                       invisible(muffled)
[10:25:32.294]                     }
[10:25:32.294]                     muffleCondition(cond, pattern = "^muffle")
[10:25:32.294]                   }
[10:25:32.294]                 }
[10:25:32.294]                 else {
[10:25:32.294]                   if (TRUE) {
[10:25:32.294]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:25:32.294]                     {
[10:25:32.294]                       inherits <- base::inherits
[10:25:32.294]                       invokeRestart <- base::invokeRestart
[10:25:32.294]                       is.null <- base::is.null
[10:25:32.294]                       muffled <- FALSE
[10:25:32.294]                       if (inherits(cond, "message")) {
[10:25:32.294]                         muffled <- grepl(pattern, "muffleMessage")
[10:25:32.294]                         if (muffled) 
[10:25:32.294]                           invokeRestart("muffleMessage")
[10:25:32.294]                       }
[10:25:32.294]                       else if (inherits(cond, "warning")) {
[10:25:32.294]                         muffled <- grepl(pattern, "muffleWarning")
[10:25:32.294]                         if (muffled) 
[10:25:32.294]                           invokeRestart("muffleWarning")
[10:25:32.294]                       }
[10:25:32.294]                       else if (inherits(cond, "condition")) {
[10:25:32.294]                         if (!is.null(pattern)) {
[10:25:32.294]                           computeRestarts <- base::computeRestarts
[10:25:32.294]                           grepl <- base::grepl
[10:25:32.294]                           restarts <- computeRestarts(cond)
[10:25:32.294]                           for (restart in restarts) {
[10:25:32.294]                             name <- restart$name
[10:25:32.294]                             if (is.null(name)) 
[10:25:32.294]                               next
[10:25:32.294]                             if (!grepl(pattern, name)) 
[10:25:32.294]                               next
[10:25:32.294]                             invokeRestart(restart)
[10:25:32.294]                             muffled <- TRUE
[10:25:32.294]                             break
[10:25:32.294]                           }
[10:25:32.294]                         }
[10:25:32.294]                       }
[10:25:32.294]                       invisible(muffled)
[10:25:32.294]                     }
[10:25:32.294]                     muffleCondition(cond, pattern = "^muffle")
[10:25:32.294]                   }
[10:25:32.294]                 }
[10:25:32.294]             }
[10:25:32.294]         }))
[10:25:32.294]     }, error = function(ex) {
[10:25:32.294]         base::structure(base::list(value = NULL, visible = NULL, 
[10:25:32.294]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:25:32.294]                 ...future.rng), started = ...future.startTime, 
[10:25:32.294]             finished = Sys.time(), session_uuid = NA_character_, 
[10:25:32.294]             version = "1.8"), class = "FutureResult")
[10:25:32.294]     }, finally = {
[10:25:32.294]         if (!identical(...future.workdir, getwd())) 
[10:25:32.294]             setwd(...future.workdir)
[10:25:32.294]         {
[10:25:32.294]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:25:32.294]                 ...future.oldOptions$nwarnings <- NULL
[10:25:32.294]             }
[10:25:32.294]             base::options(...future.oldOptions)
[10:25:32.294]             if (.Platform$OS.type == "windows") {
[10:25:32.294]                 old_names <- names(...future.oldEnvVars)
[10:25:32.294]                 envs <- base::Sys.getenv()
[10:25:32.294]                 names <- names(envs)
[10:25:32.294]                 common <- intersect(names, old_names)
[10:25:32.294]                 added <- setdiff(names, old_names)
[10:25:32.294]                 removed <- setdiff(old_names, names)
[10:25:32.294]                 changed <- common[...future.oldEnvVars[common] != 
[10:25:32.294]                   envs[common]]
[10:25:32.294]                 NAMES <- toupper(changed)
[10:25:32.294]                 args <- list()
[10:25:32.294]                 for (kk in seq_along(NAMES)) {
[10:25:32.294]                   name <- changed[[kk]]
[10:25:32.294]                   NAME <- NAMES[[kk]]
[10:25:32.294]                   if (name != NAME && is.element(NAME, old_names)) 
[10:25:32.294]                     next
[10:25:32.294]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:25:32.294]                 }
[10:25:32.294]                 NAMES <- toupper(added)
[10:25:32.294]                 for (kk in seq_along(NAMES)) {
[10:25:32.294]                   name <- added[[kk]]
[10:25:32.294]                   NAME <- NAMES[[kk]]
[10:25:32.294]                   if (name != NAME && is.element(NAME, old_names)) 
[10:25:32.294]                     next
[10:25:32.294]                   args[[name]] <- ""
[10:25:32.294]                 }
[10:25:32.294]                 NAMES <- toupper(removed)
[10:25:32.294]                 for (kk in seq_along(NAMES)) {
[10:25:32.294]                   name <- removed[[kk]]
[10:25:32.294]                   NAME <- NAMES[[kk]]
[10:25:32.294]                   if (name != NAME && is.element(NAME, old_names)) 
[10:25:32.294]                     next
[10:25:32.294]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:25:32.294]                 }
[10:25:32.294]                 if (length(args) > 0) 
[10:25:32.294]                   base::do.call(base::Sys.setenv, args = args)
[10:25:32.294]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:25:32.294]             }
[10:25:32.294]             else {
[10:25:32.294]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:25:32.294]             }
[10:25:32.294]             {
[10:25:32.294]                 if (base::length(...future.futureOptionsAdded) > 
[10:25:32.294]                   0L) {
[10:25:32.294]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:25:32.294]                   base::names(opts) <- ...future.futureOptionsAdded
[10:25:32.294]                   base::options(opts)
[10:25:32.294]                 }
[10:25:32.294]                 {
[10:25:32.294]                   {
[10:25:32.294]                     NULL
[10:25:32.294]                     RNGkind("Mersenne-Twister")
[10:25:32.294]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[10:25:32.294]                       inherits = FALSE)
[10:25:32.294]                   }
[10:25:32.294]                   options(future.plan = NULL)
[10:25:32.294]                   if (is.na(NA_character_)) 
[10:25:32.294]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:25:32.294]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:25:32.294]                   future::plan(list(function (...) 
[10:25:32.294]                   {
[10:25:32.294]                     Future(1)
[10:25:32.294]                   }), .cleanup = FALSE, .init = FALSE)
[10:25:32.294]                 }
[10:25:32.294]             }
[10:25:32.294]         }
[10:25:32.294]     })
[10:25:32.294]     if (TRUE) {
[10:25:32.294]         base::sink(type = "output", split = FALSE)
[10:25:32.294]         if (TRUE) {
[10:25:32.294]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:25:32.294]         }
[10:25:32.294]         else {
[10:25:32.294]             ...future.result["stdout"] <- base::list(NULL)
[10:25:32.294]         }
[10:25:32.294]         base::close(...future.stdout)
[10:25:32.294]         ...future.stdout <- NULL
[10:25:32.294]     }
[10:25:32.294]     ...future.result$conditions <- ...future.conditions
[10:25:32.294]     ...future.result$finished <- base::Sys.time()
[10:25:32.294]     ...future.result
[10:25:32.294] }
[10:25:32.296] plan(): Setting new future strategy stack:
[10:25:32.296] List of future strategies:
[10:25:32.296] 1. sequential:
[10:25:32.296]    - args: function (..., envir = parent.frame())
[10:25:32.296]    - tweaked: FALSE
[10:25:32.296]    - call: NULL
[10:25:32.296] plan(): nbrOfWorkers() = 1
[10:25:32.297] plan(): Setting new future strategy stack:
[10:25:32.297] List of future strategies:
[10:25:32.297] 1. future:
[10:25:32.297]    - args: function (...)
[10:25:32.297]    - tweaked: FALSE
[10:25:32.297]    - call: plan(foo)
[10:25:32.298] plan(): nbrOfWorkers() = Inf
[10:25:32.298] SequentialFuture started (and completed)
[1] 42
[10:25:32.298] getGlobalsAndPackages() ...
[10:25:32.298] 
[10:25:32.298] - globals: [0] <none>
[10:25:32.298] getGlobalsAndPackages() ... DONE
MulticoreFuture:
Label: ‘<none>’
Expression:
{
    42L
}
Lazy evaluation: FALSE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: 0x55d2e47f3478
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: FALSE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: 2bbaacb8-02e9-4075-ca46-5f7529a3bde4
Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[10:25:32.300] Packages needed by the future expression (n = 0): <none>
[10:25:32.300] Packages needed by future strategies (n = 0): <none>
[10:25:32.301] {
[10:25:32.301]     {
[10:25:32.301]         {
[10:25:32.301]             ...future.startTime <- base::Sys.time()
[10:25:32.301]             {
[10:25:32.301]                 {
[10:25:32.301]                   {
[10:25:32.301]                     {
[10:25:32.301]                       base::local({
[10:25:32.301]                         has_future <- base::requireNamespace("future", 
[10:25:32.301]                           quietly = TRUE)
[10:25:32.301]                         if (has_future) {
[10:25:32.301]                           ns <- base::getNamespace("future")
[10:25:32.301]                           version <- ns[[".package"]][["version"]]
[10:25:32.301]                           if (is.null(version)) 
[10:25:32.301]                             version <- utils::packageVersion("future")
[10:25:32.301]                         }
[10:25:32.301]                         else {
[10:25:32.301]                           version <- NULL
[10:25:32.301]                         }
[10:25:32.301]                         if (!has_future || version < "1.8.0") {
[10:25:32.301]                           info <- base::c(r_version = base::gsub("R version ", 
[10:25:32.301]                             "", base::R.version$version.string), 
[10:25:32.301]                             platform = base::sprintf("%s (%s-bit)", 
[10:25:32.301]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:25:32.301]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[10:25:32.301]                               "release", "version")], collapse = " "), 
[10:25:32.301]                             hostname = base::Sys.info()[["nodename"]])
[10:25:32.301]                           info <- base::sprintf("%s: %s", base::names(info), 
[10:25:32.301]                             info)
[10:25:32.301]                           info <- base::paste(info, collapse = "; ")
[10:25:32.301]                           if (!has_future) {
[10:25:32.301]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:25:32.301]                               info)
[10:25:32.301]                           }
[10:25:32.301]                           else {
[10:25:32.301]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:25:32.301]                               info, version)
[10:25:32.301]                           }
[10:25:32.301]                           base::stop(msg)
[10:25:32.301]                         }
[10:25:32.301]                       })
[10:25:32.301]                     }
[10:25:32.301]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[10:25:32.301]                     base::options(mc.cores = 1L)
[10:25:32.301]                   }
[10:25:32.301]                   options(future.plan = NULL)
[10:25:32.301]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:25:32.301]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:25:32.301]                 }
[10:25:32.301]                 ...future.workdir <- getwd()
[10:25:32.301]             }
[10:25:32.301]             ...future.oldOptions <- base::as.list(base::.Options)
[10:25:32.301]             ...future.oldEnvVars <- base::Sys.getenv()
[10:25:32.301]         }
[10:25:32.301]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:25:32.301]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[10:25:32.301]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:25:32.301]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:25:32.301]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:25:32.301]             future.stdout.windows.reencode = NULL, width = 80L)
[10:25:32.301]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:25:32.301]             base::names(...future.oldOptions))
[10:25:32.301]     }
[10:25:32.301]     if (FALSE) {
[10:25:32.301]     }
[10:25:32.301]     else {
[10:25:32.301]         if (TRUE) {
[10:25:32.301]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:25:32.301]                 open = "w")
[10:25:32.301]         }
[10:25:32.301]         else {
[10:25:32.301]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:25:32.301]                 windows = "NUL", "/dev/null"), open = "w")
[10:25:32.301]         }
[10:25:32.301]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:25:32.301]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:25:32.301]             base::sink(type = "output", split = FALSE)
[10:25:32.301]             base::close(...future.stdout)
[10:25:32.301]         }, add = TRUE)
[10:25:32.301]     }
[10:25:32.301]     ...future.frame <- base::sys.nframe()
[10:25:32.301]     ...future.conditions <- base::list()
[10:25:32.301]     ...future.rng <- base::globalenv()$.Random.seed
[10:25:32.301]     if (FALSE) {
[10:25:32.301]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:25:32.301]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:25:32.301]     }
[10:25:32.301]     ...future.result <- base::tryCatch({
[10:25:32.301]         base::withCallingHandlers({
[10:25:32.301]             ...future.value <- base::withVisible(base::local({
[10:25:32.301]                 withCallingHandlers({
[10:25:32.301]                   {
[10:25:32.301]                     42L
[10:25:32.301]                   }
[10:25:32.301]                 }, immediateCondition = function(cond) {
[10:25:32.301]                   save_rds <- function (object, pathname, ...) 
[10:25:32.301]                   {
[10:25:32.301]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[10:25:32.301]                     if (file_test("-f", pathname_tmp)) {
[10:25:32.301]                       fi_tmp <- file.info(pathname_tmp)
[10:25:32.301]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[10:25:32.301]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[10:25:32.301]                         fi_tmp[["mtime"]])
[10:25:32.301]                     }
[10:25:32.301]                     tryCatch({
[10:25:32.301]                       saveRDS(object, file = pathname_tmp, ...)
[10:25:32.301]                     }, error = function(ex) {
[10:25:32.301]                       msg <- conditionMessage(ex)
[10:25:32.301]                       fi_tmp <- file.info(pathname_tmp)
[10:25:32.301]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[10:25:32.301]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[10:25:32.301]                         fi_tmp[["mtime"]], msg)
[10:25:32.301]                       ex$message <- msg
[10:25:32.301]                       stop(ex)
[10:25:32.301]                     })
[10:25:32.301]                     stopifnot(file_test("-f", pathname_tmp))
[10:25:32.301]                     res <- file.rename(from = pathname_tmp, to = pathname)
[10:25:32.301]                     if (!res || file_test("-f", pathname_tmp)) {
[10:25:32.301]                       fi_tmp <- file.info(pathname_tmp)
[10:25:32.301]                       fi <- file.info(pathname)
[10:25:32.301]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[10:25:32.301]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[10:25:32.301]                         fi_tmp[["mtime"]], sQuote(pathname), 
[10:25:32.301]                         fi[["size"]], fi[["mtime"]])
[10:25:32.301]                       stop(msg)
[10:25:32.301]                     }
[10:25:32.301]                     invisible(pathname)
[10:25:32.301]                   }
[10:25:32.301]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[10:25:32.301]                     rootPath = tempdir()) 
[10:25:32.301]                   {
[10:25:32.301]                     obj <- list(time = Sys.time(), condition = cond)
[10:25:32.301]                     file <- tempfile(pattern = class(cond)[1], 
[10:25:32.301]                       tmpdir = path, fileext = ".rds")
[10:25:32.301]                     save_rds(obj, file)
[10:25:32.301]                   }
[10:25:32.301]                   saveImmediateCondition(cond, path = "/tmp/RtmpUMc0ts/.future/immediateConditions")
[10:25:32.301]                   muffleCondition <- function (cond, pattern = "^muffle") 
[10:25:32.301]                   {
[10:25:32.301]                     inherits <- base::inherits
[10:25:32.301]                     invokeRestart <- base::invokeRestart
[10:25:32.301]                     is.null <- base::is.null
[10:25:32.301]                     muffled <- FALSE
[10:25:32.301]                     if (inherits(cond, "message")) {
[10:25:32.301]                       muffled <- grepl(pattern, "muffleMessage")
[10:25:32.301]                       if (muffled) 
[10:25:32.301]                         invokeRestart("muffleMessage")
[10:25:32.301]                     }
[10:25:32.301]                     else if (inherits(cond, "warning")) {
[10:25:32.301]                       muffled <- grepl(pattern, "muffleWarning")
[10:25:32.301]                       if (muffled) 
[10:25:32.301]                         invokeRestart("muffleWarning")
[10:25:32.301]                     }
[10:25:32.301]                     else if (inherits(cond, "condition")) {
[10:25:32.301]                       if (!is.null(pattern)) {
[10:25:32.301]                         computeRestarts <- base::computeRestarts
[10:25:32.301]                         grepl <- base::grepl
[10:25:32.301]                         restarts <- computeRestarts(cond)
[10:25:32.301]                         for (restart in restarts) {
[10:25:32.301]                           name <- restart$name
[10:25:32.301]                           if (is.null(name)) 
[10:25:32.301]                             next
[10:25:32.301]                           if (!grepl(pattern, name)) 
[10:25:32.301]                             next
[10:25:32.301]                           invokeRestart(restart)
[10:25:32.301]                           muffled <- TRUE
[10:25:32.301]                           break
[10:25:32.301]                         }
[10:25:32.301]                       }
[10:25:32.301]                     }
[10:25:32.301]                     invisible(muffled)
[10:25:32.301]                   }
[10:25:32.301]                   muffleCondition(cond)
[10:25:32.301]                 })
[10:25:32.301]             }))
[10:25:32.301]             future::FutureResult(value = ...future.value$value, 
[10:25:32.301]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:25:32.301]                   ...future.rng), globalenv = if (FALSE) 
[10:25:32.301]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:25:32.301]                     ...future.globalenv.names))
[10:25:32.301]                 else NULL, started = ...future.startTime, version = "1.8")
[10:25:32.301]         }, condition = base::local({
[10:25:32.301]             c <- base::c
[10:25:32.301]             inherits <- base::inherits
[10:25:32.301]             invokeRestart <- base::invokeRestart
[10:25:32.301]             length <- base::length
[10:25:32.301]             list <- base::list
[10:25:32.301]             seq.int <- base::seq.int
[10:25:32.301]             signalCondition <- base::signalCondition
[10:25:32.301]             sys.calls <- base::sys.calls
[10:25:32.301]             `[[` <- base::`[[`
[10:25:32.301]             `+` <- base::`+`
[10:25:32.301]             `<<-` <- base::`<<-`
[10:25:32.301]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:25:32.301]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:25:32.301]                   3L)]
[10:25:32.301]             }
[10:25:32.301]             function(cond) {
[10:25:32.301]                 is_error <- inherits(cond, "error")
[10:25:32.301]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:25:32.301]                   NULL)
[10:25:32.301]                 if (is_error) {
[10:25:32.301]                   sessionInformation <- function() {
[10:25:32.301]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:25:32.301]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:25:32.301]                       search = base::search(), system = base::Sys.info())
[10:25:32.301]                   }
[10:25:32.301]                   ...future.conditions[[length(...future.conditions) + 
[10:25:32.301]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:25:32.301]                     cond$call), session = sessionInformation(), 
[10:25:32.301]                     timestamp = base::Sys.time(), signaled = 0L)
[10:25:32.301]                   signalCondition(cond)
[10:25:32.301]                 }
[10:25:32.301]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:25:32.301]                 "immediateCondition"))) {
[10:25:32.301]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:25:32.301]                   ...future.conditions[[length(...future.conditions) + 
[10:25:32.301]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:25:32.301]                   if (TRUE && !signal) {
[10:25:32.301]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:25:32.301]                     {
[10:25:32.301]                       inherits <- base::inherits
[10:25:32.301]                       invokeRestart <- base::invokeRestart
[10:25:32.301]                       is.null <- base::is.null
[10:25:32.301]                       muffled <- FALSE
[10:25:32.301]                       if (inherits(cond, "message")) {
[10:25:32.301]                         muffled <- grepl(pattern, "muffleMessage")
[10:25:32.301]                         if (muffled) 
[10:25:32.301]                           invokeRestart("muffleMessage")
[10:25:32.301]                       }
[10:25:32.301]                       else if (inherits(cond, "warning")) {
[10:25:32.301]                         muffled <- grepl(pattern, "muffleWarning")
[10:25:32.301]                         if (muffled) 
[10:25:32.301]                           invokeRestart("muffleWarning")
[10:25:32.301]                       }
[10:25:32.301]                       else if (inherits(cond, "condition")) {
[10:25:32.301]                         if (!is.null(pattern)) {
[10:25:32.301]                           computeRestarts <- base::computeRestarts
[10:25:32.301]                           grepl <- base::grepl
[10:25:32.301]                           restarts <- computeRestarts(cond)
[10:25:32.301]                           for (restart in restarts) {
[10:25:32.301]                             name <- restart$name
[10:25:32.301]                             if (is.null(name)) 
[10:25:32.301]                               next
[10:25:32.301]                             if (!grepl(pattern, name)) 
[10:25:32.301]                               next
[10:25:32.301]                             invokeRestart(restart)
[10:25:32.301]                             muffled <- TRUE
[10:25:32.301]                             break
[10:25:32.301]                           }
[10:25:32.301]                         }
[10:25:32.301]                       }
[10:25:32.301]                       invisible(muffled)
[10:25:32.301]                     }
[10:25:32.301]                     muffleCondition(cond, pattern = "^muffle")
[10:25:32.301]                   }
[10:25:32.301]                 }
[10:25:32.301]                 else {
[10:25:32.301]                   if (TRUE) {
[10:25:32.301]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:25:32.301]                     {
[10:25:32.301]                       inherits <- base::inherits
[10:25:32.301]                       invokeRestart <- base::invokeRestart
[10:25:32.301]                       is.null <- base::is.null
[10:25:32.301]                       muffled <- FALSE
[10:25:32.301]                       if (inherits(cond, "message")) {
[10:25:32.301]                         muffled <- grepl(pattern, "muffleMessage")
[10:25:32.301]                         if (muffled) 
[10:25:32.301]                           invokeRestart("muffleMessage")
[10:25:32.301]                       }
[10:25:32.301]                       else if (inherits(cond, "warning")) {
[10:25:32.301]                         muffled <- grepl(pattern, "muffleWarning")
[10:25:32.301]                         if (muffled) 
[10:25:32.301]                           invokeRestart("muffleWarning")
[10:25:32.301]                       }
[10:25:32.301]                       else if (inherits(cond, "condition")) {
[10:25:32.301]                         if (!is.null(pattern)) {
[10:25:32.301]                           computeRestarts <- base::computeRestarts
[10:25:32.301]                           grepl <- base::grepl
[10:25:32.301]                           restarts <- computeRestarts(cond)
[10:25:32.301]                           for (restart in restarts) {
[10:25:32.301]                             name <- restart$name
[10:25:32.301]                             if (is.null(name)) 
[10:25:32.301]                               next
[10:25:32.301]                             if (!grepl(pattern, name)) 
[10:25:32.301]                               next
[10:25:32.301]                             invokeRestart(restart)
[10:25:32.301]                             muffled <- TRUE
[10:25:32.301]                             break
[10:25:32.301]                           }
[10:25:32.301]                         }
[10:25:32.301]                       }
[10:25:32.301]                       invisible(muffled)
[10:25:32.301]                     }
[10:25:32.301]                     muffleCondition(cond, pattern = "^muffle")
[10:25:32.301]                   }
[10:25:32.301]                 }
[10:25:32.301]             }
[10:25:32.301]         }))
[10:25:32.301]     }, error = function(ex) {
[10:25:32.301]         base::structure(base::list(value = NULL, visible = NULL, 
[10:25:32.301]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:25:32.301]                 ...future.rng), started = ...future.startTime, 
[10:25:32.301]             finished = Sys.time(), session_uuid = NA_character_, 
[10:25:32.301]             version = "1.8"), class = "FutureResult")
[10:25:32.301]     }, finally = {
[10:25:32.301]         if (!identical(...future.workdir, getwd())) 
[10:25:32.301]             setwd(...future.workdir)
[10:25:32.301]         {
[10:25:32.301]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:25:32.301]                 ...future.oldOptions$nwarnings <- NULL
[10:25:32.301]             }
[10:25:32.301]             base::options(...future.oldOptions)
[10:25:32.301]             if (.Platform$OS.type == "windows") {
[10:25:32.301]                 old_names <- names(...future.oldEnvVars)
[10:25:32.301]                 envs <- base::Sys.getenv()
[10:25:32.301]                 names <- names(envs)
[10:25:32.301]                 common <- intersect(names, old_names)
[10:25:32.301]                 added <- setdiff(names, old_names)
[10:25:32.301]                 removed <- setdiff(old_names, names)
[10:25:32.301]                 changed <- common[...future.oldEnvVars[common] != 
[10:25:32.301]                   envs[common]]
[10:25:32.301]                 NAMES <- toupper(changed)
[10:25:32.301]                 args <- list()
[10:25:32.301]                 for (kk in seq_along(NAMES)) {
[10:25:32.301]                   name <- changed[[kk]]
[10:25:32.301]                   NAME <- NAMES[[kk]]
[10:25:32.301]                   if (name != NAME && is.element(NAME, old_names)) 
[10:25:32.301]                     next
[10:25:32.301]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:25:32.301]                 }
[10:25:32.301]                 NAMES <- toupper(added)
[10:25:32.301]                 for (kk in seq_along(NAMES)) {
[10:25:32.301]                   name <- added[[kk]]
[10:25:32.301]                   NAME <- NAMES[[kk]]
[10:25:32.301]                   if (name != NAME && is.element(NAME, old_names)) 
[10:25:32.301]                     next
[10:25:32.301]                   args[[name]] <- ""
[10:25:32.301]                 }
[10:25:32.301]                 NAMES <- toupper(removed)
[10:25:32.301]                 for (kk in seq_along(NAMES)) {
[10:25:32.301]                   name <- removed[[kk]]
[10:25:32.301]                   NAME <- NAMES[[kk]]
[10:25:32.301]                   if (name != NAME && is.element(NAME, old_names)) 
[10:25:32.301]                     next
[10:25:32.301]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:25:32.301]                 }
[10:25:32.301]                 if (length(args) > 0) 
[10:25:32.301]                   base::do.call(base::Sys.setenv, args = args)
[10:25:32.301]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:25:32.301]             }
[10:25:32.301]             else {
[10:25:32.301]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:25:32.301]             }
[10:25:32.301]             {
[10:25:32.301]                 if (base::length(...future.futureOptionsAdded) > 
[10:25:32.301]                   0L) {
[10:25:32.301]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:25:32.301]                   base::names(opts) <- ...future.futureOptionsAdded
[10:25:32.301]                   base::options(opts)
[10:25:32.301]                 }
[10:25:32.301]                 {
[10:25:32.301]                   {
[10:25:32.301]                     base::options(mc.cores = ...future.mc.cores.old)
[10:25:32.301]                     NULL
[10:25:32.301]                   }
[10:25:32.301]                   options(future.plan = NULL)
[10:25:32.301]                   if (is.na(NA_character_)) 
[10:25:32.301]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:25:32.301]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:25:32.301]                   future::plan(list(function (...) 
[10:25:32.301]                   {
[10:25:32.301]                     Future(1)
[10:25:32.301]                   }), .cleanup = FALSE, .init = FALSE)
[10:25:32.301]                 }
[10:25:32.301]             }
[10:25:32.301]         }
[10:25:32.301]     })
[10:25:32.301]     if (TRUE) {
[10:25:32.301]         base::sink(type = "output", split = FALSE)
[10:25:32.301]         if (TRUE) {
[10:25:32.301]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:25:32.301]         }
[10:25:32.301]         else {
[10:25:32.301]             ...future.result["stdout"] <- base::list(NULL)
[10:25:32.301]         }
[10:25:32.301]         base::close(...future.stdout)
[10:25:32.301]         ...future.stdout <- NULL
[10:25:32.301]     }
[10:25:32.301]     ...future.result$conditions <- ...future.conditions
[10:25:32.301]     ...future.result$finished <- base::Sys.time()
[10:25:32.301]     ...future.result
[10:25:32.301] }
[10:25:32.303] requestCore(): workers = 2
[10:25:32.307] MulticoreFuture started
[10:25:32.308] plan(): Setting new future strategy stack:
[10:25:32.308] List of future strategies:
[10:25:32.308] 1. sequential:
[10:25:32.308]    - args: function (..., envir = parent.frame())
[10:25:32.308]    - tweaked: FALSE
[10:25:32.308]    - call: NULL
[10:25:32.309] result() for MulticoreFuture ...
[10:25:32.309] plan(): nbrOfWorkers() = 1
[10:25:32.310] plan(): Setting new future strategy stack:
[10:25:32.311] List of future strategies:
[10:25:32.311] 1. future:
[10:25:32.311]    - args: function (...)
[10:25:32.311]    - tweaked: FALSE
[10:25:32.311]    - call: plan(foo)
[10:25:32.311] plan(): nbrOfWorkers() = Inf
[10:25:32.312] result() for MulticoreFuture ...
[10:25:32.313] result() for MulticoreFuture ... done
[10:25:32.313] result() for MulticoreFuture ... done
[10:25:32.313] result() for MulticoreFuture ...
[10:25:32.313] result() for MulticoreFuture ... done
[1] 42
[10:25:32.314] getGlobalsAndPackages() ...
[10:25:32.315] 
[10:25:32.315] - globals: [0] <none>
[10:25:32.315] getGlobalsAndPackages() ... DONE
[10:25:32.315] Packages needed by the future expression (n = 0): <none>
[10:25:32.316] Packages needed by future strategies (n = 0): <none>
[10:25:32.316] {
[10:25:32.316]     {
[10:25:32.316]         {
[10:25:32.316]             ...future.startTime <- base::Sys.time()
[10:25:32.316]             {
[10:25:32.316]                 {
[10:25:32.316]                   {
[10:25:32.316]                     {
[10:25:32.316]                       base::local({
[10:25:32.316]                         has_future <- base::requireNamespace("future", 
[10:25:32.316]                           quietly = TRUE)
[10:25:32.316]                         if (has_future) {
[10:25:32.316]                           ns <- base::getNamespace("future")
[10:25:32.316]                           version <- ns[[".package"]][["version"]]
[10:25:32.316]                           if (is.null(version)) 
[10:25:32.316]                             version <- utils::packageVersion("future")
[10:25:32.316]                         }
[10:25:32.316]                         else {
[10:25:32.316]                           version <- NULL
[10:25:32.316]                         }
[10:25:32.316]                         if (!has_future || version < "1.8.0") {
[10:25:32.316]                           info <- base::c(r_version = base::gsub("R version ", 
[10:25:32.316]                             "", base::R.version$version.string), 
[10:25:32.316]                             platform = base::sprintf("%s (%s-bit)", 
[10:25:32.316]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:25:32.316]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[10:25:32.316]                               "release", "version")], collapse = " "), 
[10:25:32.316]                             hostname = base::Sys.info()[["nodename"]])
[10:25:32.316]                           info <- base::sprintf("%s: %s", base::names(info), 
[10:25:32.316]                             info)
[10:25:32.316]                           info <- base::paste(info, collapse = "; ")
[10:25:32.316]                           if (!has_future) {
[10:25:32.316]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:25:32.316]                               info)
[10:25:32.316]                           }
[10:25:32.316]                           else {
[10:25:32.316]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:25:32.316]                               info, version)
[10:25:32.316]                           }
[10:25:32.316]                           base::stop(msg)
[10:25:32.316]                         }
[10:25:32.316]                       })
[10:25:32.316]                     }
[10:25:32.316]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[10:25:32.316]                     base::options(mc.cores = 1L)
[10:25:32.316]                   }
[10:25:32.316]                   options(future.plan = NULL)
[10:25:32.316]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:25:32.316]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:25:32.316]                 }
[10:25:32.316]                 ...future.workdir <- getwd()
[10:25:32.316]             }
[10:25:32.316]             ...future.oldOptions <- base::as.list(base::.Options)
[10:25:32.316]             ...future.oldEnvVars <- base::Sys.getenv()
[10:25:32.316]         }
[10:25:32.316]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:25:32.316]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[10:25:32.316]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:25:32.316]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:25:32.316]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:25:32.316]             future.stdout.windows.reencode = NULL, width = 80L)
[10:25:32.316]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:25:32.316]             base::names(...future.oldOptions))
[10:25:32.316]     }
[10:25:32.316]     if (FALSE) {
[10:25:32.316]     }
[10:25:32.316]     else {
[10:25:32.316]         if (TRUE) {
[10:25:32.316]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:25:32.316]                 open = "w")
[10:25:32.316]         }
[10:25:32.316]         else {
[10:25:32.316]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:25:32.316]                 windows = "NUL", "/dev/null"), open = "w")
[10:25:32.316]         }
[10:25:32.316]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:25:32.316]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:25:32.316]             base::sink(type = "output", split = FALSE)
[10:25:32.316]             base::close(...future.stdout)
[10:25:32.316]         }, add = TRUE)
[10:25:32.316]     }
[10:25:32.316]     ...future.frame <- base::sys.nframe()
[10:25:32.316]     ...future.conditions <- base::list()
[10:25:32.316]     ...future.rng <- base::globalenv()$.Random.seed
[10:25:32.316]     if (FALSE) {
[10:25:32.316]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:25:32.316]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:25:32.316]     }
[10:25:32.316]     ...future.result <- base::tryCatch({
[10:25:32.316]         base::withCallingHandlers({
[10:25:32.316]             ...future.value <- base::withVisible(base::local({
[10:25:32.316]                 withCallingHandlers({
[10:25:32.316]                   {
[10:25:32.316]                     42L
[10:25:32.316]                   }
[10:25:32.316]                 }, immediateCondition = function(cond) {
[10:25:32.316]                   save_rds <- function (object, pathname, ...) 
[10:25:32.316]                   {
[10:25:32.316]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[10:25:32.316]                     if (file_test("-f", pathname_tmp)) {
[10:25:32.316]                       fi_tmp <- file.info(pathname_tmp)
[10:25:32.316]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[10:25:32.316]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[10:25:32.316]                         fi_tmp[["mtime"]])
[10:25:32.316]                     }
[10:25:32.316]                     tryCatch({
[10:25:32.316]                       saveRDS(object, file = pathname_tmp, ...)
[10:25:32.316]                     }, error = function(ex) {
[10:25:32.316]                       msg <- conditionMessage(ex)
[10:25:32.316]                       fi_tmp <- file.info(pathname_tmp)
[10:25:32.316]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[10:25:32.316]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[10:25:32.316]                         fi_tmp[["mtime"]], msg)
[10:25:32.316]                       ex$message <- msg
[10:25:32.316]                       stop(ex)
[10:25:32.316]                     })
[10:25:32.316]                     stopifnot(file_test("-f", pathname_tmp))
[10:25:32.316]                     res <- file.rename(from = pathname_tmp, to = pathname)
[10:25:32.316]                     if (!res || file_test("-f", pathname_tmp)) {
[10:25:32.316]                       fi_tmp <- file.info(pathname_tmp)
[10:25:32.316]                       fi <- file.info(pathname)
[10:25:32.316]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[10:25:32.316]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[10:25:32.316]                         fi_tmp[["mtime"]], sQuote(pathname), 
[10:25:32.316]                         fi[["size"]], fi[["mtime"]])
[10:25:32.316]                       stop(msg)
[10:25:32.316]                     }
[10:25:32.316]                     invisible(pathname)
[10:25:32.316]                   }
[10:25:32.316]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[10:25:32.316]                     rootPath = tempdir()) 
[10:25:32.316]                   {
[10:25:32.316]                     obj <- list(time = Sys.time(), condition = cond)
[10:25:32.316]                     file <- tempfile(pattern = class(cond)[1], 
[10:25:32.316]                       tmpdir = path, fileext = ".rds")
[10:25:32.316]                     save_rds(obj, file)
[10:25:32.316]                   }
[10:25:32.316]                   saveImmediateCondition(cond, path = "/tmp/RtmpUMc0ts/.future/immediateConditions")
[10:25:32.316]                   muffleCondition <- function (cond, pattern = "^muffle") 
[10:25:32.316]                   {
[10:25:32.316]                     inherits <- base::inherits
[10:25:32.316]                     invokeRestart <- base::invokeRestart
[10:25:32.316]                     is.null <- base::is.null
[10:25:32.316]                     muffled <- FALSE
[10:25:32.316]                     if (inherits(cond, "message")) {
[10:25:32.316]                       muffled <- grepl(pattern, "muffleMessage")
[10:25:32.316]                       if (muffled) 
[10:25:32.316]                         invokeRestart("muffleMessage")
[10:25:32.316]                     }
[10:25:32.316]                     else if (inherits(cond, "warning")) {
[10:25:32.316]                       muffled <- grepl(pattern, "muffleWarning")
[10:25:32.316]                       if (muffled) 
[10:25:32.316]                         invokeRestart("muffleWarning")
[10:25:32.316]                     }
[10:25:32.316]                     else if (inherits(cond, "condition")) {
[10:25:32.316]                       if (!is.null(pattern)) {
[10:25:32.316]                         computeRestarts <- base::computeRestarts
[10:25:32.316]                         grepl <- base::grepl
[10:25:32.316]                         restarts <- computeRestarts(cond)
[10:25:32.316]                         for (restart in restarts) {
[10:25:32.316]                           name <- restart$name
[10:25:32.316]                           if (is.null(name)) 
[10:25:32.316]                             next
[10:25:32.316]                           if (!grepl(pattern, name)) 
[10:25:32.316]                             next
[10:25:32.316]                           invokeRestart(restart)
[10:25:32.316]                           muffled <- TRUE
[10:25:32.316]                           break
[10:25:32.316]                         }
[10:25:32.316]                       }
[10:25:32.316]                     }
[10:25:32.316]                     invisible(muffled)
[10:25:32.316]                   }
[10:25:32.316]                   muffleCondition(cond)
[10:25:32.316]                 })
[10:25:32.316]             }))
[10:25:32.316]             future::FutureResult(value = ...future.value$value, 
[10:25:32.316]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:25:32.316]                   ...future.rng), globalenv = if (FALSE) 
[10:25:32.316]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:25:32.316]                     ...future.globalenv.names))
[10:25:32.316]                 else NULL, started = ...future.startTime, version = "1.8")
[10:25:32.316]         }, condition = base::local({
[10:25:32.316]             c <- base::c
[10:25:32.316]             inherits <- base::inherits
[10:25:32.316]             invokeRestart <- base::invokeRestart
[10:25:32.316]             length <- base::length
[10:25:32.316]             list <- base::list
[10:25:32.316]             seq.int <- base::seq.int
[10:25:32.316]             signalCondition <- base::signalCondition
[10:25:32.316]             sys.calls <- base::sys.calls
[10:25:32.316]             `[[` <- base::`[[`
[10:25:32.316]             `+` <- base::`+`
[10:25:32.316]             `<<-` <- base::`<<-`
[10:25:32.316]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:25:32.316]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:25:32.316]                   3L)]
[10:25:32.316]             }
[10:25:32.316]             function(cond) {
[10:25:32.316]                 is_error <- inherits(cond, "error")
[10:25:32.316]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:25:32.316]                   NULL)
[10:25:32.316]                 if (is_error) {
[10:25:32.316]                   sessionInformation <- function() {
[10:25:32.316]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:25:32.316]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:25:32.316]                       search = base::search(), system = base::Sys.info())
[10:25:32.316]                   }
[10:25:32.316]                   ...future.conditions[[length(...future.conditions) + 
[10:25:32.316]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:25:32.316]                     cond$call), session = sessionInformation(), 
[10:25:32.316]                     timestamp = base::Sys.time(), signaled = 0L)
[10:25:32.316]                   signalCondition(cond)
[10:25:32.316]                 }
[10:25:32.316]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:25:32.316]                 "immediateCondition"))) {
[10:25:32.316]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:25:32.316]                   ...future.conditions[[length(...future.conditions) + 
[10:25:32.316]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:25:32.316]                   if (TRUE && !signal) {
[10:25:32.316]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:25:32.316]                     {
[10:25:32.316]                       inherits <- base::inherits
[10:25:32.316]                       invokeRestart <- base::invokeRestart
[10:25:32.316]                       is.null <- base::is.null
[10:25:32.316]                       muffled <- FALSE
[10:25:32.316]                       if (inherits(cond, "message")) {
[10:25:32.316]                         muffled <- grepl(pattern, "muffleMessage")
[10:25:32.316]                         if (muffled) 
[10:25:32.316]                           invokeRestart("muffleMessage")
[10:25:32.316]                       }
[10:25:32.316]                       else if (inherits(cond, "warning")) {
[10:25:32.316]                         muffled <- grepl(pattern, "muffleWarning")
[10:25:32.316]                         if (muffled) 
[10:25:32.316]                           invokeRestart("muffleWarning")
[10:25:32.316]                       }
[10:25:32.316]                       else if (inherits(cond, "condition")) {
[10:25:32.316]                         if (!is.null(pattern)) {
[10:25:32.316]                           computeRestarts <- base::computeRestarts
[10:25:32.316]                           grepl <- base::grepl
[10:25:32.316]                           restarts <- computeRestarts(cond)
[10:25:32.316]                           for (restart in restarts) {
[10:25:32.316]                             name <- restart$name
[10:25:32.316]                             if (is.null(name)) 
[10:25:32.316]                               next
[10:25:32.316]                             if (!grepl(pattern, name)) 
[10:25:32.316]                               next
[10:25:32.316]                             invokeRestart(restart)
[10:25:32.316]                             muffled <- TRUE
[10:25:32.316]                             break
[10:25:32.316]                           }
[10:25:32.316]                         }
[10:25:32.316]                       }
[10:25:32.316]                       invisible(muffled)
[10:25:32.316]                     }
[10:25:32.316]                     muffleCondition(cond, pattern = "^muffle")
[10:25:32.316]                   }
[10:25:32.316]                 }
[10:25:32.316]                 else {
[10:25:32.316]                   if (TRUE) {
[10:25:32.316]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:25:32.316]                     {
[10:25:32.316]                       inherits <- base::inherits
[10:25:32.316]                       invokeRestart <- base::invokeRestart
[10:25:32.316]                       is.null <- base::is.null
[10:25:32.316]                       muffled <- FALSE
[10:25:32.316]                       if (inherits(cond, "message")) {
[10:25:32.316]                         muffled <- grepl(pattern, "muffleMessage")
[10:25:32.316]                         if (muffled) 
[10:25:32.316]                           invokeRestart("muffleMessage")
[10:25:32.316]                       }
[10:25:32.316]                       else if (inherits(cond, "warning")) {
[10:25:32.316]                         muffled <- grepl(pattern, "muffleWarning")
[10:25:32.316]                         if (muffled) 
[10:25:32.316]                           invokeRestart("muffleWarning")
[10:25:32.316]                       }
[10:25:32.316]                       else if (inherits(cond, "condition")) {
[10:25:32.316]                         if (!is.null(pattern)) {
[10:25:32.316]                           computeRestarts <- base::computeRestarts
[10:25:32.316]                           grepl <- base::grepl
[10:25:32.316]                           restarts <- computeRestarts(cond)
[10:25:32.316]                           for (restart in restarts) {
[10:25:32.316]                             name <- restart$name
[10:25:32.316]                             if (is.null(name)) 
[10:25:32.316]                               next
[10:25:32.316]                             if (!grepl(pattern, name)) 
[10:25:32.316]                               next
[10:25:32.316]                             invokeRestart(restart)
[10:25:32.316]                             muffled <- TRUE
[10:25:32.316]                             break
[10:25:32.316]                           }
[10:25:32.316]                         }
[10:25:32.316]                       }
[10:25:32.316]                       invisible(muffled)
[10:25:32.316]                     }
[10:25:32.316]                     muffleCondition(cond, pattern = "^muffle")
[10:25:32.316]                   }
[10:25:32.316]                 }
[10:25:32.316]             }
[10:25:32.316]         }))
[10:25:32.316]     }, error = function(ex) {
[10:25:32.316]         base::structure(base::list(value = NULL, visible = NULL, 
[10:25:32.316]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:25:32.316]                 ...future.rng), started = ...future.startTime, 
[10:25:32.316]             finished = Sys.time(), session_uuid = NA_character_, 
[10:25:32.316]             version = "1.8"), class = "FutureResult")
[10:25:32.316]     }, finally = {
[10:25:32.316]         if (!identical(...future.workdir, getwd())) 
[10:25:32.316]             setwd(...future.workdir)
[10:25:32.316]         {
[10:25:32.316]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:25:32.316]                 ...future.oldOptions$nwarnings <- NULL
[10:25:32.316]             }
[10:25:32.316]             base::options(...future.oldOptions)
[10:25:32.316]             if (.Platform$OS.type == "windows") {
[10:25:32.316]                 old_names <- names(...future.oldEnvVars)
[10:25:32.316]                 envs <- base::Sys.getenv()
[10:25:32.316]                 names <- names(envs)
[10:25:32.316]                 common <- intersect(names, old_names)
[10:25:32.316]                 added <- setdiff(names, old_names)
[10:25:32.316]                 removed <- setdiff(old_names, names)
[10:25:32.316]                 changed <- common[...future.oldEnvVars[common] != 
[10:25:32.316]                   envs[common]]
[10:25:32.316]                 NAMES <- toupper(changed)
[10:25:32.316]                 args <- list()
[10:25:32.316]                 for (kk in seq_along(NAMES)) {
[10:25:32.316]                   name <- changed[[kk]]
[10:25:32.316]                   NAME <- NAMES[[kk]]
[10:25:32.316]                   if (name != NAME && is.element(NAME, old_names)) 
[10:25:32.316]                     next
[10:25:32.316]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:25:32.316]                 }
[10:25:32.316]                 NAMES <- toupper(added)
[10:25:32.316]                 for (kk in seq_along(NAMES)) {
[10:25:32.316]                   name <- added[[kk]]
[10:25:32.316]                   NAME <- NAMES[[kk]]
[10:25:32.316]                   if (name != NAME && is.element(NAME, old_names)) 
[10:25:32.316]                     next
[10:25:32.316]                   args[[name]] <- ""
[10:25:32.316]                 }
[10:25:32.316]                 NAMES <- toupper(removed)
[10:25:32.316]                 for (kk in seq_along(NAMES)) {
[10:25:32.316]                   name <- removed[[kk]]
[10:25:32.316]                   NAME <- NAMES[[kk]]
[10:25:32.316]                   if (name != NAME && is.element(NAME, old_names)) 
[10:25:32.316]                     next
[10:25:32.316]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:25:32.316]                 }
[10:25:32.316]                 if (length(args) > 0) 
[10:25:32.316]                   base::do.call(base::Sys.setenv, args = args)
[10:25:32.316]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:25:32.316]             }
[10:25:32.316]             else {
[10:25:32.316]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:25:32.316]             }
[10:25:32.316]             {
[10:25:32.316]                 if (base::length(...future.futureOptionsAdded) > 
[10:25:32.316]                   0L) {
[10:25:32.316]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:25:32.316]                   base::names(opts) <- ...future.futureOptionsAdded
[10:25:32.316]                   base::options(opts)
[10:25:32.316]                 }
[10:25:32.316]                 {
[10:25:32.316]                   {
[10:25:32.316]                     base::options(mc.cores = ...future.mc.cores.old)
[10:25:32.316]                     NULL
[10:25:32.316]                   }
[10:25:32.316]                   options(future.plan = NULL)
[10:25:32.316]                   if (is.na(NA_character_)) 
[10:25:32.316]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:25:32.316]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:25:32.316]                   future::plan(list(function (...) 
[10:25:32.316]                   {
[10:25:32.316]                     Future(1)
[10:25:32.316]                   }), .cleanup = FALSE, .init = FALSE)
[10:25:32.316]                 }
[10:25:32.316]             }
[10:25:32.316]         }
[10:25:32.316]     })
[10:25:32.316]     if (TRUE) {
[10:25:32.316]         base::sink(type = "output", split = FALSE)
[10:25:32.316]         if (TRUE) {
[10:25:32.316]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:25:32.316]         }
[10:25:32.316]         else {
[10:25:32.316]             ...future.result["stdout"] <- base::list(NULL)
[10:25:32.316]         }
[10:25:32.316]         base::close(...future.stdout)
[10:25:32.316]         ...future.stdout <- NULL
[10:25:32.316]     }
[10:25:32.316]     ...future.result$conditions <- ...future.conditions
[10:25:32.316]     ...future.result$finished <- base::Sys.time()
[10:25:32.316]     ...future.result
[10:25:32.316] }
[10:25:32.319] requestCore(): workers = 2
[10:25:32.321] MulticoreFuture started
[10:25:32.321] result() for MulticoreFuture ...
[10:25:32.322] plan(): Setting new future strategy stack:
[10:25:32.322] List of future strategies:
[10:25:32.322] 1. sequential:
[10:25:32.322]    - args: function (..., envir = parent.frame())
[10:25:32.322]    - tweaked: FALSE
[10:25:32.322]    - call: NULL
[10:25:32.323] plan(): nbrOfWorkers() = 1
[10:25:32.324] plan(): Setting new future strategy stack:
[10:25:32.325] List of future strategies:
[10:25:32.325] 1. future:
[10:25:32.325]    - args: function (...)
[10:25:32.325]    - tweaked: FALSE
[10:25:32.325]    - call: plan(foo)
[10:25:32.325] plan(): nbrOfWorkers() = Inf
[10:25:32.326] result() for MulticoreFuture ...
[10:25:32.326] result() for MulticoreFuture ... done
[10:25:32.326] result() for MulticoreFuture ... done
[10:25:32.326] result() for MulticoreFuture ...
[10:25:32.327] result() for MulticoreFuture ... done
[1] 42
> 
> message("*** Future class - exception ... DONE")
*** Future class - exception ... DONE
> 
> message("*** Future class ... DONE")
*** Future class ... DONE
> 
> source("incl/end.R")
[10:25:32.328] plan(): Setting new future strategy stack:
[10:25:32.328] List of future strategies:
[10:25:32.328] 1. FutureStrategy:
[10:25:32.328]    - args: function (..., envir = parent.frame())
[10:25:32.328]    - tweaked: FALSE
[10:25:32.328]    - call: future::plan(oplan)
[10:25:32.329] plan(): nbrOfWorkers() = 1
> 
