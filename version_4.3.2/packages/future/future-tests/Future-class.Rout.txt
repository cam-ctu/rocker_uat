
R version 4.3.2 (2023-10-31) -- "Eye Holes"
Copyright (C) 2023 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> source("incl/start.R")
[13:22:49.865] plan(): Setting new future strategy stack:
[13:22:49.866] List of future strategies:
[13:22:49.866] 1. sequential:
[13:22:49.866]    - args: function (..., envir = parent.frame())
[13:22:49.866]    - tweaked: FALSE
[13:22:49.866]    - call: future::plan("sequential")
[13:22:49.881] plan(): nbrOfWorkers() = 1
> 
> message("*** Future class ...")
*** Future class ...
> 
> message("*** Future class - exception ...")
*** Future class - exception ...
> 
> f <- Future()
[13:22:49.892] getGlobalsAndPackages() ...
[13:22:49.892] 
[13:22:49.892] - globals: [0] <none>
[13:22:49.893] getGlobalsAndPackages() ... DONE
> print(f)
Future:
Label: ‘<none>’
Expression:
NULL
Lazy evaluation: FALSE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: FALSE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: 4632995a-8f11-57ca-3a63-45d8ba943a34
Class: ‘Future’, ‘environment’
> 
> res <- tryCatch(value(f), error = identity)
[13:22:49.894] run() for ‘Future’ ...
[13:22:49.894] - state: ‘created’
[13:22:49.894] run() for ‘Future’ ... done
> print(res)
<simpleError: ‘future$lazy’ is not TRUE>
> stopifnot(inherits(res, "error"))
> 
> ## Invalid seed
> res <- tryCatch(f <- Future(42, seed = 1:2), error = identity)
> stopifnot(inherits(res, "error"))
> 
> ## When no packages are exported
> foo <- structure(function(...) { Future(1) }, class = "future")
> plan(foo)
[13:22:49.898] plan(): Setting new future strategy stack:
[13:22:49.898] List of future strategies:
[13:22:49.898] 1. future:
[13:22:49.898]    - args: function (...)
[13:22:49.898]    - tweaked: FALSE
[13:22:49.898]    - call: plan(foo)
[13:22:49.909] plan(): nbrOfWorkers() = Inf
> f <- Future()
[13:22:49.909] getGlobalsAndPackages() ...
[13:22:49.909] 
[13:22:49.909] - globals: [0] <none>
[13:22:49.910] getGlobalsAndPackages() ... DONE
> expr <- getExpression(f)
[13:22:49.910] Packages needed by the future expression (n = 0): <none>
[13:22:49.910] Packages needed by future strategies (n = 0): <none>
[13:22:49.911] {
[13:22:49.911]     {
[13:22:49.911]         {
[13:22:49.911]             ...future.startTime <- base::Sys.time()
[13:22:49.911]             {
[13:22:49.911]                 {
[13:22:49.911]                   {
[13:22:49.911]                     base::local({
[13:22:49.911]                       has_future <- base::requireNamespace("future", 
[13:22:49.911]                         quietly = TRUE)
[13:22:49.911]                       if (has_future) {
[13:22:49.911]                         ns <- base::getNamespace("future")
[13:22:49.911]                         version <- ns[[".package"]][["version"]]
[13:22:49.911]                         if (is.null(version)) 
[13:22:49.911]                           version <- utils::packageVersion("future")
[13:22:49.911]                       }
[13:22:49.911]                       else {
[13:22:49.911]                         version <- NULL
[13:22:49.911]                       }
[13:22:49.911]                       if (!has_future || version < "1.8.0") {
[13:22:49.911]                         info <- base::c(r_version = base::gsub("R version ", 
[13:22:49.911]                           "", base::R.version$version.string), 
[13:22:49.911]                           platform = base::sprintf("%s (%s-bit)", 
[13:22:49.911]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:22:49.911]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[13:22:49.911]                             "release", "version")], collapse = " "), 
[13:22:49.911]                           hostname = base::Sys.info()[["nodename"]])
[13:22:49.911]                         info <- base::sprintf("%s: %s", base::names(info), 
[13:22:49.911]                           info)
[13:22:49.911]                         info <- base::paste(info, collapse = "; ")
[13:22:49.911]                         if (!has_future) {
[13:22:49.911]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:22:49.911]                             info)
[13:22:49.911]                         }
[13:22:49.911]                         else {
[13:22:49.911]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:22:49.911]                             info, version)
[13:22:49.911]                         }
[13:22:49.911]                         base::stop(msg)
[13:22:49.911]                       }
[13:22:49.911]                     })
[13:22:49.911]                   }
[13:22:49.911]                   options(future.plan = NULL)
[13:22:49.911]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:22:49.911]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:22:49.911]                 }
[13:22:49.911]                 ...future.workdir <- getwd()
[13:22:49.911]             }
[13:22:49.911]             ...future.oldOptions <- base::as.list(base::.Options)
[13:22:49.911]             ...future.oldEnvVars <- base::Sys.getenv()
[13:22:49.911]         }
[13:22:49.911]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:22:49.911]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:22:49.911]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:22:49.911]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:22:49.911]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:22:49.911]             future.stdout.windows.reencode = NULL, width = 80L)
[13:22:49.911]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:22:49.911]             base::names(...future.oldOptions))
[13:22:49.911]     }
[13:22:49.911]     if (FALSE) {
[13:22:49.911]     }
[13:22:49.911]     else {
[13:22:49.911]         if (TRUE) {
[13:22:49.911]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:22:49.911]                 open = "w")
[13:22:49.911]         }
[13:22:49.911]         else {
[13:22:49.911]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:22:49.911]                 windows = "NUL", "/dev/null"), open = "w")
[13:22:49.911]         }
[13:22:49.911]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:22:49.911]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:22:49.911]             base::sink(type = "output", split = FALSE)
[13:22:49.911]             base::close(...future.stdout)
[13:22:49.911]         }, add = TRUE)
[13:22:49.911]     }
[13:22:49.911]     ...future.frame <- base::sys.nframe()
[13:22:49.911]     ...future.conditions <- base::list()
[13:22:49.911]     ...future.rng <- base::globalenv()$.Random.seed
[13:22:49.911]     if (FALSE) {
[13:22:49.911]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:22:49.911]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:22:49.911]     }
[13:22:49.911]     ...future.result <- base::tryCatch({
[13:22:49.911]         base::withCallingHandlers({
[13:22:49.911]             ...future.value <- base::withVisible(base::local(NULL))
[13:22:49.911]             future::FutureResult(value = ...future.value$value, 
[13:22:49.911]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:22:49.911]                   ...future.rng), globalenv = if (FALSE) 
[13:22:49.911]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:22:49.911]                     ...future.globalenv.names))
[13:22:49.911]                 else NULL, started = ...future.startTime, version = "1.8")
[13:22:49.911]         }, condition = base::local({
[13:22:49.911]             c <- base::c
[13:22:49.911]             inherits <- base::inherits
[13:22:49.911]             invokeRestart <- base::invokeRestart
[13:22:49.911]             length <- base::length
[13:22:49.911]             list <- base::list
[13:22:49.911]             seq.int <- base::seq.int
[13:22:49.911]             signalCondition <- base::signalCondition
[13:22:49.911]             sys.calls <- base::sys.calls
[13:22:49.911]             `[[` <- base::`[[`
[13:22:49.911]             `+` <- base::`+`
[13:22:49.911]             `<<-` <- base::`<<-`
[13:22:49.911]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:22:49.911]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:22:49.911]                   3L)]
[13:22:49.911]             }
[13:22:49.911]             function(cond) {
[13:22:49.911]                 is_error <- inherits(cond, "error")
[13:22:49.911]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:22:49.911]                   NULL)
[13:22:49.911]                 if (is_error) {
[13:22:49.911]                   sessionInformation <- function() {
[13:22:49.911]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:22:49.911]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:22:49.911]                       search = base::search(), system = base::Sys.info())
[13:22:49.911]                   }
[13:22:49.911]                   ...future.conditions[[length(...future.conditions) + 
[13:22:49.911]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:22:49.911]                     cond$call), session = sessionInformation(), 
[13:22:49.911]                     timestamp = base::Sys.time(), signaled = 0L)
[13:22:49.911]                   signalCondition(cond)
[13:22:49.911]                 }
[13:22:49.911]                 else if (!ignore && TRUE && inherits(cond, "condition")) {
[13:22:49.911]                   signal <- FALSE && inherits(cond, character(0))
[13:22:49.911]                   ...future.conditions[[length(...future.conditions) + 
[13:22:49.911]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:22:49.911]                   if (FALSE && !signal) {
[13:22:49.911]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:22:49.911]                     {
[13:22:49.911]                       inherits <- base::inherits
[13:22:49.911]                       invokeRestart <- base::invokeRestart
[13:22:49.911]                       is.null <- base::is.null
[13:22:49.911]                       muffled <- FALSE
[13:22:49.911]                       if (inherits(cond, "message")) {
[13:22:49.911]                         muffled <- grepl(pattern, "muffleMessage")
[13:22:49.911]                         if (muffled) 
[13:22:49.911]                           invokeRestart("muffleMessage")
[13:22:49.911]                       }
[13:22:49.911]                       else if (inherits(cond, "warning")) {
[13:22:49.911]                         muffled <- grepl(pattern, "muffleWarning")
[13:22:49.911]                         if (muffled) 
[13:22:49.911]                           invokeRestart("muffleWarning")
[13:22:49.911]                       }
[13:22:49.911]                       else if (inherits(cond, "condition")) {
[13:22:49.911]                         if (!is.null(pattern)) {
[13:22:49.911]                           computeRestarts <- base::computeRestarts
[13:22:49.911]                           grepl <- base::grepl
[13:22:49.911]                           restarts <- computeRestarts(cond)
[13:22:49.911]                           for (restart in restarts) {
[13:22:49.911]                             name <- restart$name
[13:22:49.911]                             if (is.null(name)) 
[13:22:49.911]                               next
[13:22:49.911]                             if (!grepl(pattern, name)) 
[13:22:49.911]                               next
[13:22:49.911]                             invokeRestart(restart)
[13:22:49.911]                             muffled <- TRUE
[13:22:49.911]                             break
[13:22:49.911]                           }
[13:22:49.911]                         }
[13:22:49.911]                       }
[13:22:49.911]                       invisible(muffled)
[13:22:49.911]                     }
[13:22:49.911]                     muffleCondition(cond, pattern = "^muffle")
[13:22:49.911]                   }
[13:22:49.911]                 }
[13:22:49.911]                 else {
[13:22:49.911]                   if (TRUE) {
[13:22:49.911]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:22:49.911]                     {
[13:22:49.911]                       inherits <- base::inherits
[13:22:49.911]                       invokeRestart <- base::invokeRestart
[13:22:49.911]                       is.null <- base::is.null
[13:22:49.911]                       muffled <- FALSE
[13:22:49.911]                       if (inherits(cond, "message")) {
[13:22:49.911]                         muffled <- grepl(pattern, "muffleMessage")
[13:22:49.911]                         if (muffled) 
[13:22:49.911]                           invokeRestart("muffleMessage")
[13:22:49.911]                       }
[13:22:49.911]                       else if (inherits(cond, "warning")) {
[13:22:49.911]                         muffled <- grepl(pattern, "muffleWarning")
[13:22:49.911]                         if (muffled) 
[13:22:49.911]                           invokeRestart("muffleWarning")
[13:22:49.911]                       }
[13:22:49.911]                       else if (inherits(cond, "condition")) {
[13:22:49.911]                         if (!is.null(pattern)) {
[13:22:49.911]                           computeRestarts <- base::computeRestarts
[13:22:49.911]                           grepl <- base::grepl
[13:22:49.911]                           restarts <- computeRestarts(cond)
[13:22:49.911]                           for (restart in restarts) {
[13:22:49.911]                             name <- restart$name
[13:22:49.911]                             if (is.null(name)) 
[13:22:49.911]                               next
[13:22:49.911]                             if (!grepl(pattern, name)) 
[13:22:49.911]                               next
[13:22:49.911]                             invokeRestart(restart)
[13:22:49.911]                             muffled <- TRUE
[13:22:49.911]                             break
[13:22:49.911]                           }
[13:22:49.911]                         }
[13:22:49.911]                       }
[13:22:49.911]                       invisible(muffled)
[13:22:49.911]                     }
[13:22:49.911]                     muffleCondition(cond, pattern = "^muffle")
[13:22:49.911]                   }
[13:22:49.911]                 }
[13:22:49.911]             }
[13:22:49.911]         }))
[13:22:49.911]     }, error = function(ex) {
[13:22:49.911]         base::structure(base::list(value = NULL, visible = NULL, 
[13:22:49.911]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:22:49.911]                 ...future.rng), started = ...future.startTime, 
[13:22:49.911]             finished = Sys.time(), session_uuid = NA_character_, 
[13:22:49.911]             version = "1.8"), class = "FutureResult")
[13:22:49.911]     }, finally = {
[13:22:49.911]         if (!identical(...future.workdir, getwd())) 
[13:22:49.911]             setwd(...future.workdir)
[13:22:49.911]         {
[13:22:49.911]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:22:49.911]                 ...future.oldOptions$nwarnings <- NULL
[13:22:49.911]             }
[13:22:49.911]             base::options(...future.oldOptions)
[13:22:49.911]             if (.Platform$OS.type == "windows") {
[13:22:49.911]                 old_names <- names(...future.oldEnvVars)
[13:22:49.911]                 envs <- base::Sys.getenv()
[13:22:49.911]                 names <- names(envs)
[13:22:49.911]                 common <- intersect(names, old_names)
[13:22:49.911]                 added <- setdiff(names, old_names)
[13:22:49.911]                 removed <- setdiff(old_names, names)
[13:22:49.911]                 changed <- common[...future.oldEnvVars[common] != 
[13:22:49.911]                   envs[common]]
[13:22:49.911]                 NAMES <- toupper(changed)
[13:22:49.911]                 args <- list()
[13:22:49.911]                 for (kk in seq_along(NAMES)) {
[13:22:49.911]                   name <- changed[[kk]]
[13:22:49.911]                   NAME <- NAMES[[kk]]
[13:22:49.911]                   if (name != NAME && is.element(NAME, old_names)) 
[13:22:49.911]                     next
[13:22:49.911]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:22:49.911]                 }
[13:22:49.911]                 NAMES <- toupper(added)
[13:22:49.911]                 for (kk in seq_along(NAMES)) {
[13:22:49.911]                   name <- added[[kk]]
[13:22:49.911]                   NAME <- NAMES[[kk]]
[13:22:49.911]                   if (name != NAME && is.element(NAME, old_names)) 
[13:22:49.911]                     next
[13:22:49.911]                   args[[name]] <- ""
[13:22:49.911]                 }
[13:22:49.911]                 NAMES <- toupper(removed)
[13:22:49.911]                 for (kk in seq_along(NAMES)) {
[13:22:49.911]                   name <- removed[[kk]]
[13:22:49.911]                   NAME <- NAMES[[kk]]
[13:22:49.911]                   if (name != NAME && is.element(NAME, old_names)) 
[13:22:49.911]                     next
[13:22:49.911]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:22:49.911]                 }
[13:22:49.911]                 if (length(args) > 0) 
[13:22:49.911]                   base::do.call(base::Sys.setenv, args = args)
[13:22:49.911]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:22:49.911]             }
[13:22:49.911]             else {
[13:22:49.911]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:22:49.911]             }
[13:22:49.911]             {
[13:22:49.911]                 if (base::length(...future.futureOptionsAdded) > 
[13:22:49.911]                   0L) {
[13:22:49.911]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:22:49.911]                   base::names(opts) <- ...future.futureOptionsAdded
[13:22:49.911]                   base::options(opts)
[13:22:49.911]                 }
[13:22:49.911]                 {
[13:22:49.911]                   NULL
[13:22:49.911]                   options(future.plan = NULL)
[13:22:49.911]                   if (is.na(NA_character_)) 
[13:22:49.911]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:22:49.911]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:22:49.911]                   future::plan(list(function (...) 
[13:22:49.911]                   {
[13:22:49.911]                     Future(1)
[13:22:49.911]                   }), .cleanup = FALSE, .init = FALSE)
[13:22:49.911]                 }
[13:22:49.911]             }
[13:22:49.911]         }
[13:22:49.911]     })
[13:22:49.911]     if (TRUE) {
[13:22:49.911]         base::sink(type = "output", split = FALSE)
[13:22:49.911]         if (TRUE) {
[13:22:49.911]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:22:49.911]         }
[13:22:49.911]         else {
[13:22:49.911]             ...future.result["stdout"] <- base::list(NULL)
[13:22:49.911]         }
[13:22:49.911]         base::close(...future.stdout)
[13:22:49.911]         ...future.stdout <- NULL
[13:22:49.911]     }
[13:22:49.911]     ...future.result$conditions <- ...future.conditions
[13:22:49.911]     ...future.result$finished <- base::Sys.time()
[13:22:49.911]     ...future.result
[13:22:49.911] }
> print(expr)
{
    {
        {
            ...future.startTime <- base::Sys.time()
            {
                {
                  {
                    base::local({
                      has_future <- base::requireNamespace("future", 
                        quietly = TRUE)
                      if (has_future) {
                        ns <- base::getNamespace("future")
                        version <- ns[[".package"]][["version"]]
                        if (is.null(version)) 
                          version <- utils::packageVersion("future")
                      }
                      else {
                        version <- NULL
                      }
                      if (!has_future || version < "1.8.0") {
                        info <- base::c(r_version = base::gsub("R version ", 
                          "", base::R.version$version.string), 
                          platform = base::sprintf("%s (%s-bit)", 
                            base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
                          os = base::paste(base::Sys.info()[base::c("sysname", 
                            "release", "version")], collapse = " "), 
                          hostname = base::Sys.info()[["nodename"]])
                        info <- base::sprintf("%s: %s", base::names(info), 
                          info)
                        info <- base::paste(info, collapse = "; ")
                        if (!has_future) {
                          msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
                            info)
                        }
                        else {
                          msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
                            info, version)
                        }
                        base::stop(msg)
                      }
                    })
                  }
                  options(future.plan = NULL)
                  Sys.unsetenv("R_FUTURE_PLAN")
                  future::plan("default", .cleanup = FALSE, .init = FALSE)
                }
                ...future.workdir <- getwd()
            }
            ...future.oldOptions <- base::as.list(base::.Options)
            ...future.oldEnvVars <- base::Sys.getenv()
        }
        base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
            future.globals.maxSize = NULL, future.globals.method = NULL, 
            future.globals.onMissing = NULL, future.globals.onReference = NULL, 
            future.globals.resolve = NULL, future.resolve.recursive = NULL, 
            future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
            future.stdout.windows.reencode = NULL, width = 80L)
        ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
            base::names(...future.oldOptions))
    }
    if (FALSE) {
    }
    else {
        if (TRUE) {
            ...future.stdout <- base::rawConnection(base::raw(0L), 
                open = "w")
        }
        else {
            ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
                windows = "NUL", "/dev/null"), open = "w")
        }
        base::sink(...future.stdout, type = "output", split = FALSE)
        base::on.exit(if (!base::is.null(...future.stdout)) {
            base::sink(type = "output", split = FALSE)
            base::close(...future.stdout)
        }, add = TRUE)
    }
    ...future.frame <- base::sys.nframe()
    ...future.conditions <- base::list()
    ...future.rng <- base::globalenv()$.Random.seed
    if (FALSE) {
        ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
            "...future.value", "...future.globalenv.names", ".Random.seed")
    }
    ...future.result <- base::tryCatch({
        base::withCallingHandlers({
            ...future.value <- base::withVisible(base::local(NULL))
            future::FutureResult(value = ...future.value$value, 
                visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
                  ...future.rng), globalenv = if (FALSE) 
                  list(added = base::setdiff(base::names(base::.GlobalEnv), 
                    ...future.globalenv.names))
                else NULL, started = ...future.startTime, version = "1.8")
        }, condition = base::local({
            c <- base::c
            inherits <- base::inherits
            invokeRestart <- base::invokeRestart
            length <- base::length
            list <- base::list
            seq.int <- base::seq.int
            signalCondition <- base::signalCondition
            sys.calls <- base::sys.calls
            `[[` <- base::`[[`
            `+` <- base::`+`
            `<<-` <- base::`<<-`
            sysCalls <- function(calls = sys.calls(), from = 1L) {
                calls[seq.int(from = from + 12L, to = length(calls) - 
                  3L)]
            }
            function(cond) {
                is_error <- inherits(cond, "error")
                ignore <- !is_error && !is.null(NULL) && inherits(cond, 
                  NULL)
                if (is_error) {
                  sessionInformation <- function() {
                    list(r = base::R.Version(), locale = base::Sys.getlocale(), 
                      rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
                      search = base::search(), system = base::Sys.info())
                  }
                  ...future.conditions[[length(...future.conditions) + 
                    1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
                    cond$call), session = sessionInformation(), 
                    timestamp = base::Sys.time(), signaled = 0L)
                  signalCondition(cond)
                }
                else if (!ignore && TRUE && inherits(cond, "condition")) {
                  signal <- FALSE && inherits(cond, character(0))
                  ...future.conditions[[length(...future.conditions) + 
                    1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
                  if (FALSE && !signal) {
                    muffleCondition <- function (cond, pattern = "^muffle") 
                    {
                      inherits <- base::inherits
                      invokeRestart <- base::invokeRestart
                      is.null <- base::is.null
                      muffled <- FALSE
                      if (inherits(cond, "message")) {
                        muffled <- grepl(pattern, "muffleMessage")
                        if (muffled) 
                          invokeRestart("muffleMessage")
                      }
                      else if (inherits(cond, "warning")) {
                        muffled <- grepl(pattern, "muffleWarning")
                        if (muffled) 
                          invokeRestart("muffleWarning")
                      }
                      else if (inherits(cond, "condition")) {
                        if (!is.null(pattern)) {
                          computeRestarts <- base::computeRestarts
                          grepl <- base::grepl
                          restarts <- computeRestarts(cond)
                          for (restart in restarts) {
                            name <- restart$name
                            if (is.null(name)) 
                              next
                            if (!grepl(pattern, name)) 
                              next
                            invokeRestart(restart)
                            muffled <- TRUE
                            break
                          }
                        }
                      }
                      invisible(muffled)
                    }
                    muffleCondition(cond, pattern = "^muffle")
                  }
                }
                else {
                  if (TRUE) {
                    muffleCondition <- function (cond, pattern = "^muffle") 
                    {
                      inherits <- base::inherits
                      invokeRestart <- base::invokeRestart
                      is.null <- base::is.null
                      muffled <- FALSE
                      if (inherits(cond, "message")) {
                        muffled <- grepl(pattern, "muffleMessage")
                        if (muffled) 
                          invokeRestart("muffleMessage")
                      }
                      else if (inherits(cond, "warning")) {
                        muffled <- grepl(pattern, "muffleWarning")
                        if (muffled) 
                          invokeRestart("muffleWarning")
                      }
                      else if (inherits(cond, "condition")) {
                        if (!is.null(pattern)) {
                          computeRestarts <- base::computeRestarts
                          grepl <- base::grepl
                          restarts <- computeRestarts(cond)
                          for (restart in restarts) {
                            name <- restart$name
                            if (is.null(name)) 
                              next
                            if (!grepl(pattern, name)) 
                              next
                            invokeRestart(restart)
                            muffled <- TRUE
                            break
                          }
                        }
                      }
                      invisible(muffled)
                    }
                    muffleCondition(cond, pattern = "^muffle")
                  }
                }
            }
        }))
    }, error = function(ex) {
        base::structure(base::list(value = NULL, visible = NULL, 
            conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
                ...future.rng), started = ...future.startTime, 
            finished = Sys.time(), session_uuid = NA_character_, 
            version = "1.8"), class = "FutureResult")
    }, finally = {
        if (!identical(...future.workdir, getwd())) 
            setwd(...future.workdir)
        {
            if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
                ...future.oldOptions$nwarnings <- NULL
            }
            base::options(...future.oldOptions)
            if (.Platform$OS.type == "windows") {
                old_names <- names(...future.oldEnvVars)
                envs <- base::Sys.getenv()
                names <- names(envs)
                common <- intersect(names, old_names)
                added <- setdiff(names, old_names)
                removed <- setdiff(old_names, names)
                changed <- common[...future.oldEnvVars[common] != 
                  envs[common]]
                NAMES <- toupper(changed)
                args <- list()
                for (kk in seq_along(NAMES)) {
                  name <- changed[[kk]]
                  NAME <- NAMES[[kk]]
                  if (name != NAME && is.element(NAME, old_names)) 
                    next
                  args[[name]] <- ...future.oldEnvVars[[name]]
                }
                NAMES <- toupper(added)
                for (kk in seq_along(NAMES)) {
                  name <- added[[kk]]
                  NAME <- NAMES[[kk]]
                  if (name != NAME && is.element(NAME, old_names)) 
                    next
                  args[[name]] <- ""
                }
                NAMES <- toupper(removed)
                for (kk in seq_along(NAMES)) {
                  name <- removed[[kk]]
                  NAME <- NAMES[[kk]]
                  if (name != NAME && is.element(NAME, old_names)) 
                    next
                  args[[name]] <- ...future.oldEnvVars[[name]]
                }
                if (length(args) > 0) 
                  base::do.call(base::Sys.setenv, args = args)
                args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
            }
            else {
                base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
            }
            {
                if (base::length(...future.futureOptionsAdded) > 
                  0L) {
                  opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
                  base::names(opts) <- ...future.futureOptionsAdded
                  base::options(opts)
                }
                {
                  NULL
                  options(future.plan = NULL)
                  if (is.na(NA_character_)) 
                    Sys.unsetenv("R_FUTURE_PLAN")
                  else Sys.setenv(R_FUTURE_PLAN = NA_character_)
                  future::plan(list(function (...) 
                  {
                    Future(1)
                  }), .cleanup = FALSE, .init = FALSE)
                }
            }
        }
    })
    if (TRUE) {
        base::sink(type = "output", split = FALSE)
        if (TRUE) {
            ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
        }
        else {
            ...future.result["stdout"] <- base::list(NULL)
        }
        base::close(...future.stdout)
        ...future.stdout <- NULL
    }
    ...future.result$conditions <- ...future.conditions
    ...future.result$finished <- base::Sys.time()
    ...future.result
}
> stopifnot(is.call(expr))
> 
> clazzes <- list(
+   sequential = SequentialFuture,
+   multisession = function(...) MultisessionFuture(..., workers = 2L),
+   sequential = SequentialFuture
+ )
> if (supportsMulticore()) {
+   clazzes$multicore = function(...) MulticoreFuture(..., workers = 2L)
+ }
> 
> for (clazz in clazzes) {
+   ## Calling run() more than once
+   f <- clazz({ 42L })
+   print(f)
+   run(f)
+   res <- tryCatch(run(f), error = identity)
+   stopifnot(inherits(res, "error"))
+   v <- value(f)
+   print(v)
+   stopifnot(v == 42L)
+ 
+   ## Call value() without run()
+   f <- clazz({ 42L })
+   v <- value(f)
+   print(v)
+   stopifnot(v == 42L)
+ }
[13:22:49.924] getGlobalsAndPackages() ...
[13:22:49.924] Searching for globals...
[13:22:49.928] - globals found: [1] ‘{’
[13:22:49.928] Searching for globals ... DONE
[13:22:49.928] Resolving globals: FALSE
[13:22:49.928] 
[13:22:49.928] 
[13:22:49.929] getGlobalsAndPackages() ... DONE
SequentialFuture:
Label: ‘<none>’
Expression:
{
    42L
}
Lazy evaluation: FALSE
Asynchronous evaluation: FALSE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: FALSE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: 4632995a-8f11-57ca-3a63-45d8ba943a34
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[13:22:49.930] Packages needed by the future expression (n = 0): <none>
[13:22:49.930] Packages needed by future strategies (n = 0): <none>
[13:22:49.930] {
[13:22:49.930]     {
[13:22:49.930]         {
[13:22:49.930]             ...future.startTime <- base::Sys.time()
[13:22:49.930]             {
[13:22:49.930]                 {
[13:22:49.930]                   {
[13:22:49.930]                     base::local({
[13:22:49.930]                       has_future <- base::requireNamespace("future", 
[13:22:49.930]                         quietly = TRUE)
[13:22:49.930]                       if (has_future) {
[13:22:49.930]                         ns <- base::getNamespace("future")
[13:22:49.930]                         version <- ns[[".package"]][["version"]]
[13:22:49.930]                         if (is.null(version)) 
[13:22:49.930]                           version <- utils::packageVersion("future")
[13:22:49.930]                       }
[13:22:49.930]                       else {
[13:22:49.930]                         version <- NULL
[13:22:49.930]                       }
[13:22:49.930]                       if (!has_future || version < "1.8.0") {
[13:22:49.930]                         info <- base::c(r_version = base::gsub("R version ", 
[13:22:49.930]                           "", base::R.version$version.string), 
[13:22:49.930]                           platform = base::sprintf("%s (%s-bit)", 
[13:22:49.930]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:22:49.930]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[13:22:49.930]                             "release", "version")], collapse = " "), 
[13:22:49.930]                           hostname = base::Sys.info()[["nodename"]])
[13:22:49.930]                         info <- base::sprintf("%s: %s", base::names(info), 
[13:22:49.930]                           info)
[13:22:49.930]                         info <- base::paste(info, collapse = "; ")
[13:22:49.930]                         if (!has_future) {
[13:22:49.930]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:22:49.930]                             info)
[13:22:49.930]                         }
[13:22:49.930]                         else {
[13:22:49.930]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:22:49.930]                             info, version)
[13:22:49.930]                         }
[13:22:49.930]                         base::stop(msg)
[13:22:49.930]                       }
[13:22:49.930]                     })
[13:22:49.930]                   }
[13:22:49.930]                   options(future.plan = NULL)
[13:22:49.930]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:22:49.930]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:22:49.930]                 }
[13:22:49.930]                 ...future.workdir <- getwd()
[13:22:49.930]             }
[13:22:49.930]             ...future.oldOptions <- base::as.list(base::.Options)
[13:22:49.930]             ...future.oldEnvVars <- base::Sys.getenv()
[13:22:49.930]         }
[13:22:49.930]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:22:49.930]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:22:49.930]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:22:49.930]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:22:49.930]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:22:49.930]             future.stdout.windows.reencode = NULL, width = 80L)
[13:22:49.930]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:22:49.930]             base::names(...future.oldOptions))
[13:22:49.930]     }
[13:22:49.930]     if (FALSE) {
[13:22:49.930]     }
[13:22:49.930]     else {
[13:22:49.930]         if (TRUE) {
[13:22:49.930]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:22:49.930]                 open = "w")
[13:22:49.930]         }
[13:22:49.930]         else {
[13:22:49.930]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:22:49.930]                 windows = "NUL", "/dev/null"), open = "w")
[13:22:49.930]         }
[13:22:49.930]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:22:49.930]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:22:49.930]             base::sink(type = "output", split = FALSE)
[13:22:49.930]             base::close(...future.stdout)
[13:22:49.930]         }, add = TRUE)
[13:22:49.930]     }
[13:22:49.930]     ...future.frame <- base::sys.nframe()
[13:22:49.930]     ...future.conditions <- base::list()
[13:22:49.930]     ...future.rng <- base::globalenv()$.Random.seed
[13:22:49.930]     if (FALSE) {
[13:22:49.930]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:22:49.930]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:22:49.930]     }
[13:22:49.930]     ...future.result <- base::tryCatch({
[13:22:49.930]         base::withCallingHandlers({
[13:22:49.930]             ...future.value <- base::withVisible(base::local({
[13:22:49.930]                 42L
[13:22:49.930]             }))
[13:22:49.930]             future::FutureResult(value = ...future.value$value, 
[13:22:49.930]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:22:49.930]                   ...future.rng), globalenv = if (FALSE) 
[13:22:49.930]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:22:49.930]                     ...future.globalenv.names))
[13:22:49.930]                 else NULL, started = ...future.startTime, version = "1.8")
[13:22:49.930]         }, condition = base::local({
[13:22:49.930]             c <- base::c
[13:22:49.930]             inherits <- base::inherits
[13:22:49.930]             invokeRestart <- base::invokeRestart
[13:22:49.930]             length <- base::length
[13:22:49.930]             list <- base::list
[13:22:49.930]             seq.int <- base::seq.int
[13:22:49.930]             signalCondition <- base::signalCondition
[13:22:49.930]             sys.calls <- base::sys.calls
[13:22:49.930]             `[[` <- base::`[[`
[13:22:49.930]             `+` <- base::`+`
[13:22:49.930]             `<<-` <- base::`<<-`
[13:22:49.930]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:22:49.930]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:22:49.930]                   3L)]
[13:22:49.930]             }
[13:22:49.930]             function(cond) {
[13:22:49.930]                 is_error <- inherits(cond, "error")
[13:22:49.930]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:22:49.930]                   NULL)
[13:22:49.930]                 if (is_error) {
[13:22:49.930]                   sessionInformation <- function() {
[13:22:49.930]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:22:49.930]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:22:49.930]                       search = base::search(), system = base::Sys.info())
[13:22:49.930]                   }
[13:22:49.930]                   ...future.conditions[[length(...future.conditions) + 
[13:22:49.930]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:22:49.930]                     cond$call), session = sessionInformation(), 
[13:22:49.930]                     timestamp = base::Sys.time(), signaled = 0L)
[13:22:49.930]                   signalCondition(cond)
[13:22:49.930]                 }
[13:22:49.930]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:22:49.930]                 "immediateCondition"))) {
[13:22:49.930]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:22:49.930]                   ...future.conditions[[length(...future.conditions) + 
[13:22:49.930]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:22:49.930]                   if (TRUE && !signal) {
[13:22:49.930]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:22:49.930]                     {
[13:22:49.930]                       inherits <- base::inherits
[13:22:49.930]                       invokeRestart <- base::invokeRestart
[13:22:49.930]                       is.null <- base::is.null
[13:22:49.930]                       muffled <- FALSE
[13:22:49.930]                       if (inherits(cond, "message")) {
[13:22:49.930]                         muffled <- grepl(pattern, "muffleMessage")
[13:22:49.930]                         if (muffled) 
[13:22:49.930]                           invokeRestart("muffleMessage")
[13:22:49.930]                       }
[13:22:49.930]                       else if (inherits(cond, "warning")) {
[13:22:49.930]                         muffled <- grepl(pattern, "muffleWarning")
[13:22:49.930]                         if (muffled) 
[13:22:49.930]                           invokeRestart("muffleWarning")
[13:22:49.930]                       }
[13:22:49.930]                       else if (inherits(cond, "condition")) {
[13:22:49.930]                         if (!is.null(pattern)) {
[13:22:49.930]                           computeRestarts <- base::computeRestarts
[13:22:49.930]                           grepl <- base::grepl
[13:22:49.930]                           restarts <- computeRestarts(cond)
[13:22:49.930]                           for (restart in restarts) {
[13:22:49.930]                             name <- restart$name
[13:22:49.930]                             if (is.null(name)) 
[13:22:49.930]                               next
[13:22:49.930]                             if (!grepl(pattern, name)) 
[13:22:49.930]                               next
[13:22:49.930]                             invokeRestart(restart)
[13:22:49.930]                             muffled <- TRUE
[13:22:49.930]                             break
[13:22:49.930]                           }
[13:22:49.930]                         }
[13:22:49.930]                       }
[13:22:49.930]                       invisible(muffled)
[13:22:49.930]                     }
[13:22:49.930]                     muffleCondition(cond, pattern = "^muffle")
[13:22:49.930]                   }
[13:22:49.930]                 }
[13:22:49.930]                 else {
[13:22:49.930]                   if (TRUE) {
[13:22:49.930]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:22:49.930]                     {
[13:22:49.930]                       inherits <- base::inherits
[13:22:49.930]                       invokeRestart <- base::invokeRestart
[13:22:49.930]                       is.null <- base::is.null
[13:22:49.930]                       muffled <- FALSE
[13:22:49.930]                       if (inherits(cond, "message")) {
[13:22:49.930]                         muffled <- grepl(pattern, "muffleMessage")
[13:22:49.930]                         if (muffled) 
[13:22:49.930]                           invokeRestart("muffleMessage")
[13:22:49.930]                       }
[13:22:49.930]                       else if (inherits(cond, "warning")) {
[13:22:49.930]                         muffled <- grepl(pattern, "muffleWarning")
[13:22:49.930]                         if (muffled) 
[13:22:49.930]                           invokeRestart("muffleWarning")
[13:22:49.930]                       }
[13:22:49.930]                       else if (inherits(cond, "condition")) {
[13:22:49.930]                         if (!is.null(pattern)) {
[13:22:49.930]                           computeRestarts <- base::computeRestarts
[13:22:49.930]                           grepl <- base::grepl
[13:22:49.930]                           restarts <- computeRestarts(cond)
[13:22:49.930]                           for (restart in restarts) {
[13:22:49.930]                             name <- restart$name
[13:22:49.930]                             if (is.null(name)) 
[13:22:49.930]                               next
[13:22:49.930]                             if (!grepl(pattern, name)) 
[13:22:49.930]                               next
[13:22:49.930]                             invokeRestart(restart)
[13:22:49.930]                             muffled <- TRUE
[13:22:49.930]                             break
[13:22:49.930]                           }
[13:22:49.930]                         }
[13:22:49.930]                       }
[13:22:49.930]                       invisible(muffled)
[13:22:49.930]                     }
[13:22:49.930]                     muffleCondition(cond, pattern = "^muffle")
[13:22:49.930]                   }
[13:22:49.930]                 }
[13:22:49.930]             }
[13:22:49.930]         }))
[13:22:49.930]     }, error = function(ex) {
[13:22:49.930]         base::structure(base::list(value = NULL, visible = NULL, 
[13:22:49.930]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:22:49.930]                 ...future.rng), started = ...future.startTime, 
[13:22:49.930]             finished = Sys.time(), session_uuid = NA_character_, 
[13:22:49.930]             version = "1.8"), class = "FutureResult")
[13:22:49.930]     }, finally = {
[13:22:49.930]         if (!identical(...future.workdir, getwd())) 
[13:22:49.930]             setwd(...future.workdir)
[13:22:49.930]         {
[13:22:49.930]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:22:49.930]                 ...future.oldOptions$nwarnings <- NULL
[13:22:49.930]             }
[13:22:49.930]             base::options(...future.oldOptions)
[13:22:49.930]             if (.Platform$OS.type == "windows") {
[13:22:49.930]                 old_names <- names(...future.oldEnvVars)
[13:22:49.930]                 envs <- base::Sys.getenv()
[13:22:49.930]                 names <- names(envs)
[13:22:49.930]                 common <- intersect(names, old_names)
[13:22:49.930]                 added <- setdiff(names, old_names)
[13:22:49.930]                 removed <- setdiff(old_names, names)
[13:22:49.930]                 changed <- common[...future.oldEnvVars[common] != 
[13:22:49.930]                   envs[common]]
[13:22:49.930]                 NAMES <- toupper(changed)
[13:22:49.930]                 args <- list()
[13:22:49.930]                 for (kk in seq_along(NAMES)) {
[13:22:49.930]                   name <- changed[[kk]]
[13:22:49.930]                   NAME <- NAMES[[kk]]
[13:22:49.930]                   if (name != NAME && is.element(NAME, old_names)) 
[13:22:49.930]                     next
[13:22:49.930]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:22:49.930]                 }
[13:22:49.930]                 NAMES <- toupper(added)
[13:22:49.930]                 for (kk in seq_along(NAMES)) {
[13:22:49.930]                   name <- added[[kk]]
[13:22:49.930]                   NAME <- NAMES[[kk]]
[13:22:49.930]                   if (name != NAME && is.element(NAME, old_names)) 
[13:22:49.930]                     next
[13:22:49.930]                   args[[name]] <- ""
[13:22:49.930]                 }
[13:22:49.930]                 NAMES <- toupper(removed)
[13:22:49.930]                 for (kk in seq_along(NAMES)) {
[13:22:49.930]                   name <- removed[[kk]]
[13:22:49.930]                   NAME <- NAMES[[kk]]
[13:22:49.930]                   if (name != NAME && is.element(NAME, old_names)) 
[13:22:49.930]                     next
[13:22:49.930]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:22:49.930]                 }
[13:22:49.930]                 if (length(args) > 0) 
[13:22:49.930]                   base::do.call(base::Sys.setenv, args = args)
[13:22:49.930]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:22:49.930]             }
[13:22:49.930]             else {
[13:22:49.930]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:22:49.930]             }
[13:22:49.930]             {
[13:22:49.930]                 if (base::length(...future.futureOptionsAdded) > 
[13:22:49.930]                   0L) {
[13:22:49.930]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:22:49.930]                   base::names(opts) <- ...future.futureOptionsAdded
[13:22:49.930]                   base::options(opts)
[13:22:49.930]                 }
[13:22:49.930]                 {
[13:22:49.930]                   {
[13:22:49.930]                     NULL
[13:22:49.930]                     RNGkind("Mersenne-Twister")
[13:22:49.930]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[13:22:49.930]                       inherits = FALSE)
[13:22:49.930]                   }
[13:22:49.930]                   options(future.plan = NULL)
[13:22:49.930]                   if (is.na(NA_character_)) 
[13:22:49.930]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:22:49.930]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:22:49.930]                   future::plan(list(function (...) 
[13:22:49.930]                   {
[13:22:49.930]                     Future(1)
[13:22:49.930]                   }), .cleanup = FALSE, .init = FALSE)
[13:22:49.930]                 }
[13:22:49.930]             }
[13:22:49.930]         }
[13:22:49.930]     })
[13:22:49.930]     if (TRUE) {
[13:22:49.930]         base::sink(type = "output", split = FALSE)
[13:22:49.930]         if (TRUE) {
[13:22:49.930]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:22:49.930]         }
[13:22:49.930]         else {
[13:22:49.930]             ...future.result["stdout"] <- base::list(NULL)
[13:22:49.930]         }
[13:22:49.930]         base::close(...future.stdout)
[13:22:49.930]         ...future.stdout <- NULL
[13:22:49.930]     }
[13:22:49.930]     ...future.result$conditions <- ...future.conditions
[13:22:49.930]     ...future.result$finished <- base::Sys.time()
[13:22:49.930]     ...future.result
[13:22:49.930] }
[13:22:49.932] plan(): Setting new future strategy stack:
[13:22:49.932] List of future strategies:
[13:22:49.932] 1. sequential:
[13:22:49.932]    - args: function (..., envir = parent.frame())
[13:22:49.932]    - tweaked: FALSE
[13:22:49.932]    - call: NULL
[13:22:49.933] plan(): nbrOfWorkers() = 1
[13:22:49.934] plan(): Setting new future strategy stack:
[13:22:49.934] List of future strategies:
[13:22:49.934] 1. future:
[13:22:49.934]    - args: function (...)
[13:22:49.934]    - tweaked: FALSE
[13:22:49.934]    - call: plan(foo)
[13:22:49.934] plan(): nbrOfWorkers() = Inf
[13:22:49.934] SequentialFuture started (and completed)
[1] 42
[13:22:49.935] getGlobalsAndPackages() ...
[13:22:49.935] Searching for globals...
[13:22:49.936] - globals found: [1] ‘{’
[13:22:49.936] Searching for globals ... DONE
[13:22:49.936] Resolving globals: FALSE
[13:22:49.936] 
[13:22:49.937] 
[13:22:49.937] getGlobalsAndPackages() ... DONE
[13:22:49.937] Packages needed by the future expression (n = 0): <none>
[13:22:49.937] Packages needed by future strategies (n = 0): <none>
[13:22:49.937] {
[13:22:49.937]     {
[13:22:49.937]         {
[13:22:49.937]             ...future.startTime <- base::Sys.time()
[13:22:49.937]             {
[13:22:49.937]                 {
[13:22:49.937]                   {
[13:22:49.937]                     base::local({
[13:22:49.937]                       has_future <- base::requireNamespace("future", 
[13:22:49.937]                         quietly = TRUE)
[13:22:49.937]                       if (has_future) {
[13:22:49.937]                         ns <- base::getNamespace("future")
[13:22:49.937]                         version <- ns[[".package"]][["version"]]
[13:22:49.937]                         if (is.null(version)) 
[13:22:49.937]                           version <- utils::packageVersion("future")
[13:22:49.937]                       }
[13:22:49.937]                       else {
[13:22:49.937]                         version <- NULL
[13:22:49.937]                       }
[13:22:49.937]                       if (!has_future || version < "1.8.0") {
[13:22:49.937]                         info <- base::c(r_version = base::gsub("R version ", 
[13:22:49.937]                           "", base::R.version$version.string), 
[13:22:49.937]                           platform = base::sprintf("%s (%s-bit)", 
[13:22:49.937]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:22:49.937]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[13:22:49.937]                             "release", "version")], collapse = " "), 
[13:22:49.937]                           hostname = base::Sys.info()[["nodename"]])
[13:22:49.937]                         info <- base::sprintf("%s: %s", base::names(info), 
[13:22:49.937]                           info)
[13:22:49.937]                         info <- base::paste(info, collapse = "; ")
[13:22:49.937]                         if (!has_future) {
[13:22:49.937]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:22:49.937]                             info)
[13:22:49.937]                         }
[13:22:49.937]                         else {
[13:22:49.937]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:22:49.937]                             info, version)
[13:22:49.937]                         }
[13:22:49.937]                         base::stop(msg)
[13:22:49.937]                       }
[13:22:49.937]                     })
[13:22:49.937]                   }
[13:22:49.937]                   options(future.plan = NULL)
[13:22:49.937]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:22:49.937]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:22:49.937]                 }
[13:22:49.937]                 ...future.workdir <- getwd()
[13:22:49.937]             }
[13:22:49.937]             ...future.oldOptions <- base::as.list(base::.Options)
[13:22:49.937]             ...future.oldEnvVars <- base::Sys.getenv()
[13:22:49.937]         }
[13:22:49.937]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:22:49.937]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:22:49.937]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:22:49.937]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:22:49.937]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:22:49.937]             future.stdout.windows.reencode = NULL, width = 80L)
[13:22:49.937]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:22:49.937]             base::names(...future.oldOptions))
[13:22:49.937]     }
[13:22:49.937]     if (FALSE) {
[13:22:49.937]     }
[13:22:49.937]     else {
[13:22:49.937]         if (TRUE) {
[13:22:49.937]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:22:49.937]                 open = "w")
[13:22:49.937]         }
[13:22:49.937]         else {
[13:22:49.937]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:22:49.937]                 windows = "NUL", "/dev/null"), open = "w")
[13:22:49.937]         }
[13:22:49.937]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:22:49.937]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:22:49.937]             base::sink(type = "output", split = FALSE)
[13:22:49.937]             base::close(...future.stdout)
[13:22:49.937]         }, add = TRUE)
[13:22:49.937]     }
[13:22:49.937]     ...future.frame <- base::sys.nframe()
[13:22:49.937]     ...future.conditions <- base::list()
[13:22:49.937]     ...future.rng <- base::globalenv()$.Random.seed
[13:22:49.937]     if (FALSE) {
[13:22:49.937]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:22:49.937]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:22:49.937]     }
[13:22:49.937]     ...future.result <- base::tryCatch({
[13:22:49.937]         base::withCallingHandlers({
[13:22:49.937]             ...future.value <- base::withVisible(base::local({
[13:22:49.937]                 42L
[13:22:49.937]             }))
[13:22:49.937]             future::FutureResult(value = ...future.value$value, 
[13:22:49.937]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:22:49.937]                   ...future.rng), globalenv = if (FALSE) 
[13:22:49.937]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:22:49.937]                     ...future.globalenv.names))
[13:22:49.937]                 else NULL, started = ...future.startTime, version = "1.8")
[13:22:49.937]         }, condition = base::local({
[13:22:49.937]             c <- base::c
[13:22:49.937]             inherits <- base::inherits
[13:22:49.937]             invokeRestart <- base::invokeRestart
[13:22:49.937]             length <- base::length
[13:22:49.937]             list <- base::list
[13:22:49.937]             seq.int <- base::seq.int
[13:22:49.937]             signalCondition <- base::signalCondition
[13:22:49.937]             sys.calls <- base::sys.calls
[13:22:49.937]             `[[` <- base::`[[`
[13:22:49.937]             `+` <- base::`+`
[13:22:49.937]             `<<-` <- base::`<<-`
[13:22:49.937]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:22:49.937]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:22:49.937]                   3L)]
[13:22:49.937]             }
[13:22:49.937]             function(cond) {
[13:22:49.937]                 is_error <- inherits(cond, "error")
[13:22:49.937]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:22:49.937]                   NULL)
[13:22:49.937]                 if (is_error) {
[13:22:49.937]                   sessionInformation <- function() {
[13:22:49.937]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:22:49.937]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:22:49.937]                       search = base::search(), system = base::Sys.info())
[13:22:49.937]                   }
[13:22:49.937]                   ...future.conditions[[length(...future.conditions) + 
[13:22:49.937]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:22:49.937]                     cond$call), session = sessionInformation(), 
[13:22:49.937]                     timestamp = base::Sys.time(), signaled = 0L)
[13:22:49.937]                   signalCondition(cond)
[13:22:49.937]                 }
[13:22:49.937]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:22:49.937]                 "immediateCondition"))) {
[13:22:49.937]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:22:49.937]                   ...future.conditions[[length(...future.conditions) + 
[13:22:49.937]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:22:49.937]                   if (TRUE && !signal) {
[13:22:49.937]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:22:49.937]                     {
[13:22:49.937]                       inherits <- base::inherits
[13:22:49.937]                       invokeRestart <- base::invokeRestart
[13:22:49.937]                       is.null <- base::is.null
[13:22:49.937]                       muffled <- FALSE
[13:22:49.937]                       if (inherits(cond, "message")) {
[13:22:49.937]                         muffled <- grepl(pattern, "muffleMessage")
[13:22:49.937]                         if (muffled) 
[13:22:49.937]                           invokeRestart("muffleMessage")
[13:22:49.937]                       }
[13:22:49.937]                       else if (inherits(cond, "warning")) {
[13:22:49.937]                         muffled <- grepl(pattern, "muffleWarning")
[13:22:49.937]                         if (muffled) 
[13:22:49.937]                           invokeRestart("muffleWarning")
[13:22:49.937]                       }
[13:22:49.937]                       else if (inherits(cond, "condition")) {
[13:22:49.937]                         if (!is.null(pattern)) {
[13:22:49.937]                           computeRestarts <- base::computeRestarts
[13:22:49.937]                           grepl <- base::grepl
[13:22:49.937]                           restarts <- computeRestarts(cond)
[13:22:49.937]                           for (restart in restarts) {
[13:22:49.937]                             name <- restart$name
[13:22:49.937]                             if (is.null(name)) 
[13:22:49.937]                               next
[13:22:49.937]                             if (!grepl(pattern, name)) 
[13:22:49.937]                               next
[13:22:49.937]                             invokeRestart(restart)
[13:22:49.937]                             muffled <- TRUE
[13:22:49.937]                             break
[13:22:49.937]                           }
[13:22:49.937]                         }
[13:22:49.937]                       }
[13:22:49.937]                       invisible(muffled)
[13:22:49.937]                     }
[13:22:49.937]                     muffleCondition(cond, pattern = "^muffle")
[13:22:49.937]                   }
[13:22:49.937]                 }
[13:22:49.937]                 else {
[13:22:49.937]                   if (TRUE) {
[13:22:49.937]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:22:49.937]                     {
[13:22:49.937]                       inherits <- base::inherits
[13:22:49.937]                       invokeRestart <- base::invokeRestart
[13:22:49.937]                       is.null <- base::is.null
[13:22:49.937]                       muffled <- FALSE
[13:22:49.937]                       if (inherits(cond, "message")) {
[13:22:49.937]                         muffled <- grepl(pattern, "muffleMessage")
[13:22:49.937]                         if (muffled) 
[13:22:49.937]                           invokeRestart("muffleMessage")
[13:22:49.937]                       }
[13:22:49.937]                       else if (inherits(cond, "warning")) {
[13:22:49.937]                         muffled <- grepl(pattern, "muffleWarning")
[13:22:49.937]                         if (muffled) 
[13:22:49.937]                           invokeRestart("muffleWarning")
[13:22:49.937]                       }
[13:22:49.937]                       else if (inherits(cond, "condition")) {
[13:22:49.937]                         if (!is.null(pattern)) {
[13:22:49.937]                           computeRestarts <- base::computeRestarts
[13:22:49.937]                           grepl <- base::grepl
[13:22:49.937]                           restarts <- computeRestarts(cond)
[13:22:49.937]                           for (restart in restarts) {
[13:22:49.937]                             name <- restart$name
[13:22:49.937]                             if (is.null(name)) 
[13:22:49.937]                               next
[13:22:49.937]                             if (!grepl(pattern, name)) 
[13:22:49.937]                               next
[13:22:49.937]                             invokeRestart(restart)
[13:22:49.937]                             muffled <- TRUE
[13:22:49.937]                             break
[13:22:49.937]                           }
[13:22:49.937]                         }
[13:22:49.937]                       }
[13:22:49.937]                       invisible(muffled)
[13:22:49.937]                     }
[13:22:49.937]                     muffleCondition(cond, pattern = "^muffle")
[13:22:49.937]                   }
[13:22:49.937]                 }
[13:22:49.937]             }
[13:22:49.937]         }))
[13:22:49.937]     }, error = function(ex) {
[13:22:49.937]         base::structure(base::list(value = NULL, visible = NULL, 
[13:22:49.937]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:22:49.937]                 ...future.rng), started = ...future.startTime, 
[13:22:49.937]             finished = Sys.time(), session_uuid = NA_character_, 
[13:22:49.937]             version = "1.8"), class = "FutureResult")
[13:22:49.937]     }, finally = {
[13:22:49.937]         if (!identical(...future.workdir, getwd())) 
[13:22:49.937]             setwd(...future.workdir)
[13:22:49.937]         {
[13:22:49.937]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:22:49.937]                 ...future.oldOptions$nwarnings <- NULL
[13:22:49.937]             }
[13:22:49.937]             base::options(...future.oldOptions)
[13:22:49.937]             if (.Platform$OS.type == "windows") {
[13:22:49.937]                 old_names <- names(...future.oldEnvVars)
[13:22:49.937]                 envs <- base::Sys.getenv()
[13:22:49.937]                 names <- names(envs)
[13:22:49.937]                 common <- intersect(names, old_names)
[13:22:49.937]                 added <- setdiff(names, old_names)
[13:22:49.937]                 removed <- setdiff(old_names, names)
[13:22:49.937]                 changed <- common[...future.oldEnvVars[common] != 
[13:22:49.937]                   envs[common]]
[13:22:49.937]                 NAMES <- toupper(changed)
[13:22:49.937]                 args <- list()
[13:22:49.937]                 for (kk in seq_along(NAMES)) {
[13:22:49.937]                   name <- changed[[kk]]
[13:22:49.937]                   NAME <- NAMES[[kk]]
[13:22:49.937]                   if (name != NAME && is.element(NAME, old_names)) 
[13:22:49.937]                     next
[13:22:49.937]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:22:49.937]                 }
[13:22:49.937]                 NAMES <- toupper(added)
[13:22:49.937]                 for (kk in seq_along(NAMES)) {
[13:22:49.937]                   name <- added[[kk]]
[13:22:49.937]                   NAME <- NAMES[[kk]]
[13:22:49.937]                   if (name != NAME && is.element(NAME, old_names)) 
[13:22:49.937]                     next
[13:22:49.937]                   args[[name]] <- ""
[13:22:49.937]                 }
[13:22:49.937]                 NAMES <- toupper(removed)
[13:22:49.937]                 for (kk in seq_along(NAMES)) {
[13:22:49.937]                   name <- removed[[kk]]
[13:22:49.937]                   NAME <- NAMES[[kk]]
[13:22:49.937]                   if (name != NAME && is.element(NAME, old_names)) 
[13:22:49.937]                     next
[13:22:49.937]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:22:49.937]                 }
[13:22:49.937]                 if (length(args) > 0) 
[13:22:49.937]                   base::do.call(base::Sys.setenv, args = args)
[13:22:49.937]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:22:49.937]             }
[13:22:49.937]             else {
[13:22:49.937]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:22:49.937]             }
[13:22:49.937]             {
[13:22:49.937]                 if (base::length(...future.futureOptionsAdded) > 
[13:22:49.937]                   0L) {
[13:22:49.937]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:22:49.937]                   base::names(opts) <- ...future.futureOptionsAdded
[13:22:49.937]                   base::options(opts)
[13:22:49.937]                 }
[13:22:49.937]                 {
[13:22:49.937]                   {
[13:22:49.937]                     NULL
[13:22:49.937]                     RNGkind("Mersenne-Twister")
[13:22:49.937]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[13:22:49.937]                       inherits = FALSE)
[13:22:49.937]                   }
[13:22:49.937]                   options(future.plan = NULL)
[13:22:49.937]                   if (is.na(NA_character_)) 
[13:22:49.937]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:22:49.937]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:22:49.937]                   future::plan(list(function (...) 
[13:22:49.937]                   {
[13:22:49.937]                     Future(1)
[13:22:49.937]                   }), .cleanup = FALSE, .init = FALSE)
[13:22:49.937]                 }
[13:22:49.937]             }
[13:22:49.937]         }
[13:22:49.937]     })
[13:22:49.937]     if (TRUE) {
[13:22:49.937]         base::sink(type = "output", split = FALSE)
[13:22:49.937]         if (TRUE) {
[13:22:49.937]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:22:49.937]         }
[13:22:49.937]         else {
[13:22:49.937]             ...future.result["stdout"] <- base::list(NULL)
[13:22:49.937]         }
[13:22:49.937]         base::close(...future.stdout)
[13:22:49.937]         ...future.stdout <- NULL
[13:22:49.937]     }
[13:22:49.937]     ...future.result$conditions <- ...future.conditions
[13:22:49.937]     ...future.result$finished <- base::Sys.time()
[13:22:49.937]     ...future.result
[13:22:49.937] }
[13:22:49.939] plan(): Setting new future strategy stack:
[13:22:49.939] List of future strategies:
[13:22:49.939] 1. sequential:
[13:22:49.939]    - args: function (..., envir = parent.frame())
[13:22:49.939]    - tweaked: FALSE
[13:22:49.939]    - call: NULL
[13:22:49.940] plan(): nbrOfWorkers() = 1
[13:22:49.940] plan(): Setting new future strategy stack:
[13:22:49.941] List of future strategies:
[13:22:49.941] 1. future:
[13:22:49.941]    - args: function (...)
[13:22:49.941]    - tweaked: FALSE
[13:22:49.941]    - call: plan(foo)
[13:22:49.941] plan(): nbrOfWorkers() = Inf
[13:22:49.941] SequentialFuture started (and completed)
[1] 42
[13:22:49.943] getGlobalsAndPackages() ...
[13:22:49.943] 
[13:22:49.944] - globals: [0] <none>
[13:22:49.944] getGlobalsAndPackages() ... DONE
[13:22:49.944] [local output] makeClusterPSOCK() ...
[13:22:49.983] [local output] Workers: [n = 2] ‘localhost’, ‘localhost’
[13:22:49.984] [local output] Base port: 11166
[13:22:49.984] [local output] Getting setup options for 2 cluster nodes ...
[13:22:49.984] [local output]  - Node 1 of 2 ...
[13:22:49.985] [local output] localMachine=TRUE => revtunnel=FALSE

[13:22:49.986] Testing if worker's PID can be inferred: ‘'/usr/local/lib/R/bin/Rscript' -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/RtmpYwRlSa/worker.rank=1.parallelly.parent=82796.1436c717ea875.pid")), silent = TRUE)' -e 'file.exists("/tmp/RtmpYwRlSa/worker.rank=1.parallelly.parent=82796.1436c717ea875.pid")'’
[13:22:50.179] - Possible to infer worker's PID: TRUE
[13:22:50.179] [local output] Rscript port: 11166

[13:22:50.179] [local output]  - Node 2 of 2 ...
[13:22:50.180] [local output] localMachine=TRUE => revtunnel=FALSE

[13:22:50.180] [local output] Rscript port: 11166

[13:22:50.181] [local output] Getting setup options for 2 cluster nodes ... done
[13:22:50.181] [local output]  - Parallel setup requested for some PSOCK nodes
[13:22:50.181] [local output] Setting up PSOCK nodes in parallel
[13:22:50.181] List of 36
[13:22:50.181]  $ worker          : chr "localhost"
[13:22:50.181]   ..- attr(*, "localhost")= logi TRUE
[13:22:50.181]  $ master          : chr "localhost"
[13:22:50.181]  $ port            : int 11166
[13:22:50.181]  $ connectTimeout  : num 120
[13:22:50.181]  $ timeout         : num 2592000
[13:22:50.181]  $ rscript         : chr "'/usr/local/lib/R/bin/Rscript'"
[13:22:50.181]  $ homogeneous     : logi TRUE
[13:22:50.181]  $ rscript_args    : chr "--default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),fi"| __truncated__
[13:22:50.181]  $ rscript_envs    : NULL
[13:22:50.181]  $ rscript_libs    : NULL
[13:22:50.181]  $ rscript_startup : NULL
[13:22:50.181]  $ rscript_sh      : chr "sh"
[13:22:50.181]  $ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[13:22:50.181]  $ methods         : logi TRUE
[13:22:50.181]  $ socketOptions   : chr "no-delay"
[13:22:50.181]  $ useXDR          : logi FALSE
[13:22:50.181]  $ outfile         : chr "/dev/null"
[13:22:50.181]  $ renice          : int NA
[13:22:50.181]  $ rshcmd          : NULL
[13:22:50.181]  $ user            : chr(0) 
[13:22:50.181]  $ revtunnel       : logi FALSE
[13:22:50.181]  $ rshlogfile      : NULL
[13:22:50.181]  $ rshopts         : chr(0) 
[13:22:50.181]  $ rank            : int 1
[13:22:50.181]  $ manual          : logi FALSE
[13:22:50.181]  $ dryrun          : logi FALSE
[13:22:50.181]  $ quiet           : logi FALSE
[13:22:50.181]  $ setup_strategy  : chr "parallel"
[13:22:50.181]  $ local_cmd       : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[13:22:50.181]  $ pidfile         : chr "/tmp/RtmpYwRlSa/worker.rank=1.parallelly.parent=82796.1436c717ea875.pid"
[13:22:50.181]  $ rshcmd_label    : NULL
[13:22:50.181]  $ rsh_call        : NULL
[13:22:50.181]  $ cmd             : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[13:22:50.181]  $ localMachine    : logi TRUE
[13:22:50.181]  $ make_fcn        :function (worker = getOption2("parallelly.localhost.hostname", "localhost"), 
[13:22:50.181]     master = NULL, port, connectTimeout = getOption2("parallelly.makeNodePSOCK.connectTimeout", 
[13:22:50.181]         2 * 60), timeout = getOption2("parallelly.makeNodePSOCK.timeout", 
[13:22:50.181]         30 * 24 * 60 * 60), rscript = NULL, homogeneous = NULL, rscript_args = NULL, 
[13:22:50.181]     rscript_envs = NULL, rscript_libs = NULL, rscript_startup = NULL, rscript_sh = c("auto", 
[13:22:50.181]         "cmd", "sh"), default_packages = c("datasets", "utils", "grDevices", 
[13:22:50.181]         "graphics", "stats", if (methods) "methods"), methods = TRUE, socketOptions = getOption2("parallelly.makeNodePSOCK.socketOptions", 
[13:22:50.181]         "no-delay"), useXDR = getOption2("parallelly.makeNodePSOCK.useXDR", 
[13:22:50.181]         FALSE), outfile = "/dev/null", renice = NA_integer_, rshcmd = getOption2("parallelly.makeNodePSOCK.rshcmd", 
[13:22:50.181]         NULL), user = NULL, revtunnel = NA, rshlogfile = NULL, rshopts = getOption2("parallelly.makeNodePSOCK.rshopts", 
[13:22:50.181]         NULL), rank = 1L, manual = FALSE, dryrun = FALSE, quiet = FALSE, 
[13:22:50.181]     setup_strategy = getOption2("parallelly.makeNodePSOCK.setup_strategy", 
[13:22:50.181]         "parallel"), action = c("launch", "options"), verbose = FALSE)  
[13:22:50.181]  $ arguments       :List of 28
[13:22:50.181]   ..$ worker          : chr "localhost"
[13:22:50.181]   ..$ master          : NULL
[13:22:50.181]   ..$ port            : int 11166
[13:22:50.181]   ..$ connectTimeout  : num 120
[13:22:50.181]   ..$ timeout         : num 2592000
[13:22:50.181]   ..$ rscript         : NULL
[13:22:50.181]   ..$ homogeneous     : NULL
[13:22:50.181]   ..$ rscript_args    : NULL
[13:22:50.181]   ..$ rscript_envs    : NULL
[13:22:50.181]   ..$ rscript_libs    : NULL
[13:22:50.181]   ..$ rscript_startup : NULL
[13:22:50.181]   ..$ rscript_sh      : chr [1:3] "auto" "cmd" "sh"
[13:22:50.181]   ..$ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[13:22:50.181]   ..$ methods         : logi TRUE
[13:22:50.181]   ..$ socketOptions   : chr "no-delay"
[13:22:50.181]   ..$ useXDR          : logi FALSE
[13:22:50.181]   ..$ outfile         : chr "/dev/null"
[13:22:50.181]   ..$ renice          : int NA
[13:22:50.181]   ..$ rshcmd          : NULL
[13:22:50.181]   ..$ user            : NULL
[13:22:50.181]   ..$ revtunnel       : logi NA
[13:22:50.181]   ..$ rshlogfile      : NULL
[13:22:50.181]   ..$ rshopts         : NULL
[13:22:50.181]   ..$ rank            : int 1
[13:22:50.181]   ..$ manual          : logi FALSE
[13:22:50.181]   ..$ dryrun          : logi FALSE
[13:22:50.181]   ..$ quiet           : logi FALSE
[13:22:50.181]   ..$ setup_strategy  : chr "parallel"
[13:22:50.181]  - attr(*, "class")= chr [1:2] "makeNodePSOCKOptions" "makeNodeOptions"
[13:22:50.199] [local output] System call to launch all workers:
[13:22:50.199] [local output] '/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/RtmpYwRlSa/worker.rank=1.parallelly.parent=82796.1436c717ea875.pid")), silent = TRUE)' -e 'options(socketOptions = "no-delay")' -e 'workRSOCK <- tryCatch(parallel:::.workRSOCK, error=function(e) parallel:::.slaveRSOCK); workRSOCK()' MASTER=localhost PORT=11166 OUT=/dev/null TIMEOUT=2592000 XDR=FALSE SETUPTIMEOUT=120 SETUPSTRATEGY=parallel
[13:22:50.199] [local output] Starting PSOCK main server
[13:22:50.205] [local output] Workers launched
[13:22:50.205] [local output] Waiting for workers to connect back
[13:22:50.205]  - [local output] 0 workers out of 2 ready
[13:22:50.449]  - [local output] 0 workers out of 2 ready
[13:22:50.450]  - [local output] 1 workers out of 2 ready
[13:22:50.453]  - [local output] 1 workers out of 2 ready
[13:22:50.453]  - [local output] 2 workers out of 2 ready
[13:22:50.453] [local output] Launching of workers completed
[13:22:50.454] [local output] Collecting session information from workers
[13:22:50.454] [local output]  - Worker #1 of 2
[13:22:50.455] [local output]  - Worker #2 of 2
[13:22:50.455] [local output] makeClusterPSOCK() ... done
MultisessionFuture:
Label: ‘<none>’
Expression:
{
    42L
}
Lazy evaluation: FALSE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: 0x55c28bb616f8
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: FALSE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: 4632995a-8f11-57ca-3a63-45d8ba943a34
Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:22:50.469] Packages needed by the future expression (n = 0): <none>
[13:22:50.469] Packages needed by future strategies (n = 0): <none>
[13:22:50.469] {
[13:22:50.469]     {
[13:22:50.469]         {
[13:22:50.469]             ...future.startTime <- base::Sys.time()
[13:22:50.469]             {
[13:22:50.469]                 {
[13:22:50.469]                   {
[13:22:50.469]                     {
[13:22:50.469]                       base::local({
[13:22:50.469]                         has_future <- base::requireNamespace("future", 
[13:22:50.469]                           quietly = TRUE)
[13:22:50.469]                         if (has_future) {
[13:22:50.469]                           ns <- base::getNamespace("future")
[13:22:50.469]                           version <- ns[[".package"]][["version"]]
[13:22:50.469]                           if (is.null(version)) 
[13:22:50.469]                             version <- utils::packageVersion("future")
[13:22:50.469]                         }
[13:22:50.469]                         else {
[13:22:50.469]                           version <- NULL
[13:22:50.469]                         }
[13:22:50.469]                         if (!has_future || version < "1.8.0") {
[13:22:50.469]                           info <- base::c(r_version = base::gsub("R version ", 
[13:22:50.469]                             "", base::R.version$version.string), 
[13:22:50.469]                             platform = base::sprintf("%s (%s-bit)", 
[13:22:50.469]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:22:50.469]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:22:50.469]                               "release", "version")], collapse = " "), 
[13:22:50.469]                             hostname = base::Sys.info()[["nodename"]])
[13:22:50.469]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:22:50.469]                             info)
[13:22:50.469]                           info <- base::paste(info, collapse = "; ")
[13:22:50.469]                           if (!has_future) {
[13:22:50.469]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:22:50.469]                               info)
[13:22:50.469]                           }
[13:22:50.469]                           else {
[13:22:50.469]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:22:50.469]                               info, version)
[13:22:50.469]                           }
[13:22:50.469]                           base::stop(msg)
[13:22:50.469]                         }
[13:22:50.469]                       })
[13:22:50.469]                     }
[13:22:50.469]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[13:22:50.469]                     base::options(mc.cores = 1L)
[13:22:50.469]                   }
[13:22:50.469]                   options(future.plan = NULL)
[13:22:50.469]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:22:50.469]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:22:50.469]                 }
[13:22:50.469]                 ...future.workdir <- getwd()
[13:22:50.469]             }
[13:22:50.469]             ...future.oldOptions <- base::as.list(base::.Options)
[13:22:50.469]             ...future.oldEnvVars <- base::Sys.getenv()
[13:22:50.469]         }
[13:22:50.469]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:22:50.469]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:22:50.469]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:22:50.469]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:22:50.469]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:22:50.469]             future.stdout.windows.reencode = NULL, width = 80L)
[13:22:50.469]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:22:50.469]             base::names(...future.oldOptions))
[13:22:50.469]     }
[13:22:50.469]     if (FALSE) {
[13:22:50.469]     }
[13:22:50.469]     else {
[13:22:50.469]         if (TRUE) {
[13:22:50.469]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:22:50.469]                 open = "w")
[13:22:50.469]         }
[13:22:50.469]         else {
[13:22:50.469]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:22:50.469]                 windows = "NUL", "/dev/null"), open = "w")
[13:22:50.469]         }
[13:22:50.469]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:22:50.469]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:22:50.469]             base::sink(type = "output", split = FALSE)
[13:22:50.469]             base::close(...future.stdout)
[13:22:50.469]         }, add = TRUE)
[13:22:50.469]     }
[13:22:50.469]     ...future.frame <- base::sys.nframe()
[13:22:50.469]     ...future.conditions <- base::list()
[13:22:50.469]     ...future.rng <- base::globalenv()$.Random.seed
[13:22:50.469]     if (FALSE) {
[13:22:50.469]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:22:50.469]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:22:50.469]     }
[13:22:50.469]     ...future.result <- base::tryCatch({
[13:22:50.469]         base::withCallingHandlers({
[13:22:50.469]             ...future.value <- base::withVisible(base::local({
[13:22:50.469]                 ...future.makeSendCondition <- base::local({
[13:22:50.469]                   sendCondition <- NULL
[13:22:50.469]                   function(frame = 1L) {
[13:22:50.469]                     if (is.function(sendCondition)) 
[13:22:50.469]                       return(sendCondition)
[13:22:50.469]                     ns <- getNamespace("parallel")
[13:22:50.469]                     if (exists("sendData", mode = "function", 
[13:22:50.469]                       envir = ns)) {
[13:22:50.469]                       parallel_sendData <- get("sendData", mode = "function", 
[13:22:50.469]                         envir = ns)
[13:22:50.469]                       envir <- sys.frame(frame)
[13:22:50.469]                       master <- NULL
[13:22:50.469]                       while (!identical(envir, .GlobalEnv) && 
[13:22:50.469]                         !identical(envir, emptyenv())) {
[13:22:50.469]                         if (exists("master", mode = "list", envir = envir, 
[13:22:50.469]                           inherits = FALSE)) {
[13:22:50.469]                           master <- get("master", mode = "list", 
[13:22:50.469]                             envir = envir, inherits = FALSE)
[13:22:50.469]                           if (inherits(master, c("SOCKnode", 
[13:22:50.469]                             "SOCK0node"))) {
[13:22:50.469]                             sendCondition <<- function(cond) {
[13:22:50.469]                               data <- list(type = "VALUE", value = cond, 
[13:22:50.469]                                 success = TRUE)
[13:22:50.469]                               parallel_sendData(master, data)
[13:22:50.469]                             }
[13:22:50.469]                             return(sendCondition)
[13:22:50.469]                           }
[13:22:50.469]                         }
[13:22:50.469]                         frame <- frame + 1L
[13:22:50.469]                         envir <- sys.frame(frame)
[13:22:50.469]                       }
[13:22:50.469]                     }
[13:22:50.469]                     sendCondition <<- function(cond) NULL
[13:22:50.469]                   }
[13:22:50.469]                 })
[13:22:50.469]                 withCallingHandlers({
[13:22:50.469]                   {
[13:22:50.469]                     42L
[13:22:50.469]                   }
[13:22:50.469]                 }, immediateCondition = function(cond) {
[13:22:50.469]                   sendCondition <- ...future.makeSendCondition()
[13:22:50.469]                   sendCondition(cond)
[13:22:50.469]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:22:50.469]                   {
[13:22:50.469]                     inherits <- base::inherits
[13:22:50.469]                     invokeRestart <- base::invokeRestart
[13:22:50.469]                     is.null <- base::is.null
[13:22:50.469]                     muffled <- FALSE
[13:22:50.469]                     if (inherits(cond, "message")) {
[13:22:50.469]                       muffled <- grepl(pattern, "muffleMessage")
[13:22:50.469]                       if (muffled) 
[13:22:50.469]                         invokeRestart("muffleMessage")
[13:22:50.469]                     }
[13:22:50.469]                     else if (inherits(cond, "warning")) {
[13:22:50.469]                       muffled <- grepl(pattern, "muffleWarning")
[13:22:50.469]                       if (muffled) 
[13:22:50.469]                         invokeRestart("muffleWarning")
[13:22:50.469]                     }
[13:22:50.469]                     else if (inherits(cond, "condition")) {
[13:22:50.469]                       if (!is.null(pattern)) {
[13:22:50.469]                         computeRestarts <- base::computeRestarts
[13:22:50.469]                         grepl <- base::grepl
[13:22:50.469]                         restarts <- computeRestarts(cond)
[13:22:50.469]                         for (restart in restarts) {
[13:22:50.469]                           name <- restart$name
[13:22:50.469]                           if (is.null(name)) 
[13:22:50.469]                             next
[13:22:50.469]                           if (!grepl(pattern, name)) 
[13:22:50.469]                             next
[13:22:50.469]                           invokeRestart(restart)
[13:22:50.469]                           muffled <- TRUE
[13:22:50.469]                           break
[13:22:50.469]                         }
[13:22:50.469]                       }
[13:22:50.469]                     }
[13:22:50.469]                     invisible(muffled)
[13:22:50.469]                   }
[13:22:50.469]                   muffleCondition(cond)
[13:22:50.469]                 })
[13:22:50.469]             }))
[13:22:50.469]             future::FutureResult(value = ...future.value$value, 
[13:22:50.469]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:22:50.469]                   ...future.rng), globalenv = if (FALSE) 
[13:22:50.469]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:22:50.469]                     ...future.globalenv.names))
[13:22:50.469]                 else NULL, started = ...future.startTime, version = "1.8")
[13:22:50.469]         }, condition = base::local({
[13:22:50.469]             c <- base::c
[13:22:50.469]             inherits <- base::inherits
[13:22:50.469]             invokeRestart <- base::invokeRestart
[13:22:50.469]             length <- base::length
[13:22:50.469]             list <- base::list
[13:22:50.469]             seq.int <- base::seq.int
[13:22:50.469]             signalCondition <- base::signalCondition
[13:22:50.469]             sys.calls <- base::sys.calls
[13:22:50.469]             `[[` <- base::`[[`
[13:22:50.469]             `+` <- base::`+`
[13:22:50.469]             `<<-` <- base::`<<-`
[13:22:50.469]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:22:50.469]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:22:50.469]                   3L)]
[13:22:50.469]             }
[13:22:50.469]             function(cond) {
[13:22:50.469]                 is_error <- inherits(cond, "error")
[13:22:50.469]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:22:50.469]                   NULL)
[13:22:50.469]                 if (is_error) {
[13:22:50.469]                   sessionInformation <- function() {
[13:22:50.469]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:22:50.469]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:22:50.469]                       search = base::search(), system = base::Sys.info())
[13:22:50.469]                   }
[13:22:50.469]                   ...future.conditions[[length(...future.conditions) + 
[13:22:50.469]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:22:50.469]                     cond$call), session = sessionInformation(), 
[13:22:50.469]                     timestamp = base::Sys.time(), signaled = 0L)
[13:22:50.469]                   signalCondition(cond)
[13:22:50.469]                 }
[13:22:50.469]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:22:50.469]                 "immediateCondition"))) {
[13:22:50.469]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:22:50.469]                   ...future.conditions[[length(...future.conditions) + 
[13:22:50.469]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:22:50.469]                   if (TRUE && !signal) {
[13:22:50.469]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:22:50.469]                     {
[13:22:50.469]                       inherits <- base::inherits
[13:22:50.469]                       invokeRestart <- base::invokeRestart
[13:22:50.469]                       is.null <- base::is.null
[13:22:50.469]                       muffled <- FALSE
[13:22:50.469]                       if (inherits(cond, "message")) {
[13:22:50.469]                         muffled <- grepl(pattern, "muffleMessage")
[13:22:50.469]                         if (muffled) 
[13:22:50.469]                           invokeRestart("muffleMessage")
[13:22:50.469]                       }
[13:22:50.469]                       else if (inherits(cond, "warning")) {
[13:22:50.469]                         muffled <- grepl(pattern, "muffleWarning")
[13:22:50.469]                         if (muffled) 
[13:22:50.469]                           invokeRestart("muffleWarning")
[13:22:50.469]                       }
[13:22:50.469]                       else if (inherits(cond, "condition")) {
[13:22:50.469]                         if (!is.null(pattern)) {
[13:22:50.469]                           computeRestarts <- base::computeRestarts
[13:22:50.469]                           grepl <- base::grepl
[13:22:50.469]                           restarts <- computeRestarts(cond)
[13:22:50.469]                           for (restart in restarts) {
[13:22:50.469]                             name <- restart$name
[13:22:50.469]                             if (is.null(name)) 
[13:22:50.469]                               next
[13:22:50.469]                             if (!grepl(pattern, name)) 
[13:22:50.469]                               next
[13:22:50.469]                             invokeRestart(restart)
[13:22:50.469]                             muffled <- TRUE
[13:22:50.469]                             break
[13:22:50.469]                           }
[13:22:50.469]                         }
[13:22:50.469]                       }
[13:22:50.469]                       invisible(muffled)
[13:22:50.469]                     }
[13:22:50.469]                     muffleCondition(cond, pattern = "^muffle")
[13:22:50.469]                   }
[13:22:50.469]                 }
[13:22:50.469]                 else {
[13:22:50.469]                   if (TRUE) {
[13:22:50.469]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:22:50.469]                     {
[13:22:50.469]                       inherits <- base::inherits
[13:22:50.469]                       invokeRestart <- base::invokeRestart
[13:22:50.469]                       is.null <- base::is.null
[13:22:50.469]                       muffled <- FALSE
[13:22:50.469]                       if (inherits(cond, "message")) {
[13:22:50.469]                         muffled <- grepl(pattern, "muffleMessage")
[13:22:50.469]                         if (muffled) 
[13:22:50.469]                           invokeRestart("muffleMessage")
[13:22:50.469]                       }
[13:22:50.469]                       else if (inherits(cond, "warning")) {
[13:22:50.469]                         muffled <- grepl(pattern, "muffleWarning")
[13:22:50.469]                         if (muffled) 
[13:22:50.469]                           invokeRestart("muffleWarning")
[13:22:50.469]                       }
[13:22:50.469]                       else if (inherits(cond, "condition")) {
[13:22:50.469]                         if (!is.null(pattern)) {
[13:22:50.469]                           computeRestarts <- base::computeRestarts
[13:22:50.469]                           grepl <- base::grepl
[13:22:50.469]                           restarts <- computeRestarts(cond)
[13:22:50.469]                           for (restart in restarts) {
[13:22:50.469]                             name <- restart$name
[13:22:50.469]                             if (is.null(name)) 
[13:22:50.469]                               next
[13:22:50.469]                             if (!grepl(pattern, name)) 
[13:22:50.469]                               next
[13:22:50.469]                             invokeRestart(restart)
[13:22:50.469]                             muffled <- TRUE
[13:22:50.469]                             break
[13:22:50.469]                           }
[13:22:50.469]                         }
[13:22:50.469]                       }
[13:22:50.469]                       invisible(muffled)
[13:22:50.469]                     }
[13:22:50.469]                     muffleCondition(cond, pattern = "^muffle")
[13:22:50.469]                   }
[13:22:50.469]                 }
[13:22:50.469]             }
[13:22:50.469]         }))
[13:22:50.469]     }, error = function(ex) {
[13:22:50.469]         base::structure(base::list(value = NULL, visible = NULL, 
[13:22:50.469]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:22:50.469]                 ...future.rng), started = ...future.startTime, 
[13:22:50.469]             finished = Sys.time(), session_uuid = NA_character_, 
[13:22:50.469]             version = "1.8"), class = "FutureResult")
[13:22:50.469]     }, finally = {
[13:22:50.469]         if (!identical(...future.workdir, getwd())) 
[13:22:50.469]             setwd(...future.workdir)
[13:22:50.469]         {
[13:22:50.469]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:22:50.469]                 ...future.oldOptions$nwarnings <- NULL
[13:22:50.469]             }
[13:22:50.469]             base::options(...future.oldOptions)
[13:22:50.469]             if (.Platform$OS.type == "windows") {
[13:22:50.469]                 old_names <- names(...future.oldEnvVars)
[13:22:50.469]                 envs <- base::Sys.getenv()
[13:22:50.469]                 names <- names(envs)
[13:22:50.469]                 common <- intersect(names, old_names)
[13:22:50.469]                 added <- setdiff(names, old_names)
[13:22:50.469]                 removed <- setdiff(old_names, names)
[13:22:50.469]                 changed <- common[...future.oldEnvVars[common] != 
[13:22:50.469]                   envs[common]]
[13:22:50.469]                 NAMES <- toupper(changed)
[13:22:50.469]                 args <- list()
[13:22:50.469]                 for (kk in seq_along(NAMES)) {
[13:22:50.469]                   name <- changed[[kk]]
[13:22:50.469]                   NAME <- NAMES[[kk]]
[13:22:50.469]                   if (name != NAME && is.element(NAME, old_names)) 
[13:22:50.469]                     next
[13:22:50.469]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:22:50.469]                 }
[13:22:50.469]                 NAMES <- toupper(added)
[13:22:50.469]                 for (kk in seq_along(NAMES)) {
[13:22:50.469]                   name <- added[[kk]]
[13:22:50.469]                   NAME <- NAMES[[kk]]
[13:22:50.469]                   if (name != NAME && is.element(NAME, old_names)) 
[13:22:50.469]                     next
[13:22:50.469]                   args[[name]] <- ""
[13:22:50.469]                 }
[13:22:50.469]                 NAMES <- toupper(removed)
[13:22:50.469]                 for (kk in seq_along(NAMES)) {
[13:22:50.469]                   name <- removed[[kk]]
[13:22:50.469]                   NAME <- NAMES[[kk]]
[13:22:50.469]                   if (name != NAME && is.element(NAME, old_names)) 
[13:22:50.469]                     next
[13:22:50.469]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:22:50.469]                 }
[13:22:50.469]                 if (length(args) > 0) 
[13:22:50.469]                   base::do.call(base::Sys.setenv, args = args)
[13:22:50.469]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:22:50.469]             }
[13:22:50.469]             else {
[13:22:50.469]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:22:50.469]             }
[13:22:50.469]             {
[13:22:50.469]                 if (base::length(...future.futureOptionsAdded) > 
[13:22:50.469]                   0L) {
[13:22:50.469]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:22:50.469]                   base::names(opts) <- ...future.futureOptionsAdded
[13:22:50.469]                   base::options(opts)
[13:22:50.469]                 }
[13:22:50.469]                 {
[13:22:50.469]                   {
[13:22:50.469]                     base::options(mc.cores = ...future.mc.cores.old)
[13:22:50.469]                     NULL
[13:22:50.469]                   }
[13:22:50.469]                   options(future.plan = NULL)
[13:22:50.469]                   if (is.na(NA_character_)) 
[13:22:50.469]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:22:50.469]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:22:50.469]                   future::plan(list(function (...) 
[13:22:50.469]                   {
[13:22:50.469]                     Future(1)
[13:22:50.469]                   }), .cleanup = FALSE, .init = FALSE)
[13:22:50.469]                 }
[13:22:50.469]             }
[13:22:50.469]         }
[13:22:50.469]     })
[13:22:50.469]     if (TRUE) {
[13:22:50.469]         base::sink(type = "output", split = FALSE)
[13:22:50.469]         if (TRUE) {
[13:22:50.469]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:22:50.469]         }
[13:22:50.469]         else {
[13:22:50.469]             ...future.result["stdout"] <- base::list(NULL)
[13:22:50.469]         }
[13:22:50.469]         base::close(...future.stdout)
[13:22:50.469]         ...future.stdout <- NULL
[13:22:50.469]     }
[13:22:50.469]     ...future.result$conditions <- ...future.conditions
[13:22:50.469]     ...future.result$finished <- base::Sys.time()
[13:22:50.469]     ...future.result
[13:22:50.469] }
[13:22:50.525] MultisessionFuture started
[13:22:50.525] result() for ClusterFuture ...
[13:22:50.526] receiveMessageFromWorker() for ClusterFuture ...
[13:22:50.526] - Validating connection of MultisessionFuture
[13:22:50.560] - received message: FutureResult
[13:22:50.560] - Received FutureResult
[13:22:50.563] - Erased future from FutureRegistry
[13:22:50.563] result() for ClusterFuture ...
[13:22:50.563] - result already collected: FutureResult
[13:22:50.564] result() for ClusterFuture ... done
[13:22:50.564] receiveMessageFromWorker() for ClusterFuture ... done
[13:22:50.564] result() for ClusterFuture ... done
[13:22:50.564] result() for ClusterFuture ...
[13:22:50.564] - result already collected: FutureResult
[13:22:50.564] result() for ClusterFuture ... done
[1] 42
[13:22:50.565] getGlobalsAndPackages() ...
[13:22:50.565] 
[13:22:50.566] - globals: [0] <none>
[13:22:50.566] getGlobalsAndPackages() ... DONE
[13:22:50.577] Packages needed by the future expression (n = 0): <none>
[13:22:50.577] Packages needed by future strategies (n = 0): <none>
[13:22:50.578] {
[13:22:50.578]     {
[13:22:50.578]         {
[13:22:50.578]             ...future.startTime <- base::Sys.time()
[13:22:50.578]             {
[13:22:50.578]                 {
[13:22:50.578]                   {
[13:22:50.578]                     {
[13:22:50.578]                       base::local({
[13:22:50.578]                         has_future <- base::requireNamespace("future", 
[13:22:50.578]                           quietly = TRUE)
[13:22:50.578]                         if (has_future) {
[13:22:50.578]                           ns <- base::getNamespace("future")
[13:22:50.578]                           version <- ns[[".package"]][["version"]]
[13:22:50.578]                           if (is.null(version)) 
[13:22:50.578]                             version <- utils::packageVersion("future")
[13:22:50.578]                         }
[13:22:50.578]                         else {
[13:22:50.578]                           version <- NULL
[13:22:50.578]                         }
[13:22:50.578]                         if (!has_future || version < "1.8.0") {
[13:22:50.578]                           info <- base::c(r_version = base::gsub("R version ", 
[13:22:50.578]                             "", base::R.version$version.string), 
[13:22:50.578]                             platform = base::sprintf("%s (%s-bit)", 
[13:22:50.578]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:22:50.578]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:22:50.578]                               "release", "version")], collapse = " "), 
[13:22:50.578]                             hostname = base::Sys.info()[["nodename"]])
[13:22:50.578]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:22:50.578]                             info)
[13:22:50.578]                           info <- base::paste(info, collapse = "; ")
[13:22:50.578]                           if (!has_future) {
[13:22:50.578]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:22:50.578]                               info)
[13:22:50.578]                           }
[13:22:50.578]                           else {
[13:22:50.578]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:22:50.578]                               info, version)
[13:22:50.578]                           }
[13:22:50.578]                           base::stop(msg)
[13:22:50.578]                         }
[13:22:50.578]                       })
[13:22:50.578]                     }
[13:22:50.578]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[13:22:50.578]                     base::options(mc.cores = 1L)
[13:22:50.578]                   }
[13:22:50.578]                   options(future.plan = NULL)
[13:22:50.578]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:22:50.578]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:22:50.578]                 }
[13:22:50.578]                 ...future.workdir <- getwd()
[13:22:50.578]             }
[13:22:50.578]             ...future.oldOptions <- base::as.list(base::.Options)
[13:22:50.578]             ...future.oldEnvVars <- base::Sys.getenv()
[13:22:50.578]         }
[13:22:50.578]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:22:50.578]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:22:50.578]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:22:50.578]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:22:50.578]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:22:50.578]             future.stdout.windows.reencode = NULL, width = 80L)
[13:22:50.578]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:22:50.578]             base::names(...future.oldOptions))
[13:22:50.578]     }
[13:22:50.578]     if (FALSE) {
[13:22:50.578]     }
[13:22:50.578]     else {
[13:22:50.578]         if (TRUE) {
[13:22:50.578]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:22:50.578]                 open = "w")
[13:22:50.578]         }
[13:22:50.578]         else {
[13:22:50.578]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:22:50.578]                 windows = "NUL", "/dev/null"), open = "w")
[13:22:50.578]         }
[13:22:50.578]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:22:50.578]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:22:50.578]             base::sink(type = "output", split = FALSE)
[13:22:50.578]             base::close(...future.stdout)
[13:22:50.578]         }, add = TRUE)
[13:22:50.578]     }
[13:22:50.578]     ...future.frame <- base::sys.nframe()
[13:22:50.578]     ...future.conditions <- base::list()
[13:22:50.578]     ...future.rng <- base::globalenv()$.Random.seed
[13:22:50.578]     if (FALSE) {
[13:22:50.578]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:22:50.578]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:22:50.578]     }
[13:22:50.578]     ...future.result <- base::tryCatch({
[13:22:50.578]         base::withCallingHandlers({
[13:22:50.578]             ...future.value <- base::withVisible(base::local({
[13:22:50.578]                 ...future.makeSendCondition <- base::local({
[13:22:50.578]                   sendCondition <- NULL
[13:22:50.578]                   function(frame = 1L) {
[13:22:50.578]                     if (is.function(sendCondition)) 
[13:22:50.578]                       return(sendCondition)
[13:22:50.578]                     ns <- getNamespace("parallel")
[13:22:50.578]                     if (exists("sendData", mode = "function", 
[13:22:50.578]                       envir = ns)) {
[13:22:50.578]                       parallel_sendData <- get("sendData", mode = "function", 
[13:22:50.578]                         envir = ns)
[13:22:50.578]                       envir <- sys.frame(frame)
[13:22:50.578]                       master <- NULL
[13:22:50.578]                       while (!identical(envir, .GlobalEnv) && 
[13:22:50.578]                         !identical(envir, emptyenv())) {
[13:22:50.578]                         if (exists("master", mode = "list", envir = envir, 
[13:22:50.578]                           inherits = FALSE)) {
[13:22:50.578]                           master <- get("master", mode = "list", 
[13:22:50.578]                             envir = envir, inherits = FALSE)
[13:22:50.578]                           if (inherits(master, c("SOCKnode", 
[13:22:50.578]                             "SOCK0node"))) {
[13:22:50.578]                             sendCondition <<- function(cond) {
[13:22:50.578]                               data <- list(type = "VALUE", value = cond, 
[13:22:50.578]                                 success = TRUE)
[13:22:50.578]                               parallel_sendData(master, data)
[13:22:50.578]                             }
[13:22:50.578]                             return(sendCondition)
[13:22:50.578]                           }
[13:22:50.578]                         }
[13:22:50.578]                         frame <- frame + 1L
[13:22:50.578]                         envir <- sys.frame(frame)
[13:22:50.578]                       }
[13:22:50.578]                     }
[13:22:50.578]                     sendCondition <<- function(cond) NULL
[13:22:50.578]                   }
[13:22:50.578]                 })
[13:22:50.578]                 withCallingHandlers({
[13:22:50.578]                   {
[13:22:50.578]                     42L
[13:22:50.578]                   }
[13:22:50.578]                 }, immediateCondition = function(cond) {
[13:22:50.578]                   sendCondition <- ...future.makeSendCondition()
[13:22:50.578]                   sendCondition(cond)
[13:22:50.578]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:22:50.578]                   {
[13:22:50.578]                     inherits <- base::inherits
[13:22:50.578]                     invokeRestart <- base::invokeRestart
[13:22:50.578]                     is.null <- base::is.null
[13:22:50.578]                     muffled <- FALSE
[13:22:50.578]                     if (inherits(cond, "message")) {
[13:22:50.578]                       muffled <- grepl(pattern, "muffleMessage")
[13:22:50.578]                       if (muffled) 
[13:22:50.578]                         invokeRestart("muffleMessage")
[13:22:50.578]                     }
[13:22:50.578]                     else if (inherits(cond, "warning")) {
[13:22:50.578]                       muffled <- grepl(pattern, "muffleWarning")
[13:22:50.578]                       if (muffled) 
[13:22:50.578]                         invokeRestart("muffleWarning")
[13:22:50.578]                     }
[13:22:50.578]                     else if (inherits(cond, "condition")) {
[13:22:50.578]                       if (!is.null(pattern)) {
[13:22:50.578]                         computeRestarts <- base::computeRestarts
[13:22:50.578]                         grepl <- base::grepl
[13:22:50.578]                         restarts <- computeRestarts(cond)
[13:22:50.578]                         for (restart in restarts) {
[13:22:50.578]                           name <- restart$name
[13:22:50.578]                           if (is.null(name)) 
[13:22:50.578]                             next
[13:22:50.578]                           if (!grepl(pattern, name)) 
[13:22:50.578]                             next
[13:22:50.578]                           invokeRestart(restart)
[13:22:50.578]                           muffled <- TRUE
[13:22:50.578]                           break
[13:22:50.578]                         }
[13:22:50.578]                       }
[13:22:50.578]                     }
[13:22:50.578]                     invisible(muffled)
[13:22:50.578]                   }
[13:22:50.578]                   muffleCondition(cond)
[13:22:50.578]                 })
[13:22:50.578]             }))
[13:22:50.578]             future::FutureResult(value = ...future.value$value, 
[13:22:50.578]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:22:50.578]                   ...future.rng), globalenv = if (FALSE) 
[13:22:50.578]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:22:50.578]                     ...future.globalenv.names))
[13:22:50.578]                 else NULL, started = ...future.startTime, version = "1.8")
[13:22:50.578]         }, condition = base::local({
[13:22:50.578]             c <- base::c
[13:22:50.578]             inherits <- base::inherits
[13:22:50.578]             invokeRestart <- base::invokeRestart
[13:22:50.578]             length <- base::length
[13:22:50.578]             list <- base::list
[13:22:50.578]             seq.int <- base::seq.int
[13:22:50.578]             signalCondition <- base::signalCondition
[13:22:50.578]             sys.calls <- base::sys.calls
[13:22:50.578]             `[[` <- base::`[[`
[13:22:50.578]             `+` <- base::`+`
[13:22:50.578]             `<<-` <- base::`<<-`
[13:22:50.578]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:22:50.578]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:22:50.578]                   3L)]
[13:22:50.578]             }
[13:22:50.578]             function(cond) {
[13:22:50.578]                 is_error <- inherits(cond, "error")
[13:22:50.578]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:22:50.578]                   NULL)
[13:22:50.578]                 if (is_error) {
[13:22:50.578]                   sessionInformation <- function() {
[13:22:50.578]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:22:50.578]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:22:50.578]                       search = base::search(), system = base::Sys.info())
[13:22:50.578]                   }
[13:22:50.578]                   ...future.conditions[[length(...future.conditions) + 
[13:22:50.578]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:22:50.578]                     cond$call), session = sessionInformation(), 
[13:22:50.578]                     timestamp = base::Sys.time(), signaled = 0L)
[13:22:50.578]                   signalCondition(cond)
[13:22:50.578]                 }
[13:22:50.578]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:22:50.578]                 "immediateCondition"))) {
[13:22:50.578]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:22:50.578]                   ...future.conditions[[length(...future.conditions) + 
[13:22:50.578]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:22:50.578]                   if (TRUE && !signal) {
[13:22:50.578]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:22:50.578]                     {
[13:22:50.578]                       inherits <- base::inherits
[13:22:50.578]                       invokeRestart <- base::invokeRestart
[13:22:50.578]                       is.null <- base::is.null
[13:22:50.578]                       muffled <- FALSE
[13:22:50.578]                       if (inherits(cond, "message")) {
[13:22:50.578]                         muffled <- grepl(pattern, "muffleMessage")
[13:22:50.578]                         if (muffled) 
[13:22:50.578]                           invokeRestart("muffleMessage")
[13:22:50.578]                       }
[13:22:50.578]                       else if (inherits(cond, "warning")) {
[13:22:50.578]                         muffled <- grepl(pattern, "muffleWarning")
[13:22:50.578]                         if (muffled) 
[13:22:50.578]                           invokeRestart("muffleWarning")
[13:22:50.578]                       }
[13:22:50.578]                       else if (inherits(cond, "condition")) {
[13:22:50.578]                         if (!is.null(pattern)) {
[13:22:50.578]                           computeRestarts <- base::computeRestarts
[13:22:50.578]                           grepl <- base::grepl
[13:22:50.578]                           restarts <- computeRestarts(cond)
[13:22:50.578]                           for (restart in restarts) {
[13:22:50.578]                             name <- restart$name
[13:22:50.578]                             if (is.null(name)) 
[13:22:50.578]                               next
[13:22:50.578]                             if (!grepl(pattern, name)) 
[13:22:50.578]                               next
[13:22:50.578]                             invokeRestart(restart)
[13:22:50.578]                             muffled <- TRUE
[13:22:50.578]                             break
[13:22:50.578]                           }
[13:22:50.578]                         }
[13:22:50.578]                       }
[13:22:50.578]                       invisible(muffled)
[13:22:50.578]                     }
[13:22:50.578]                     muffleCondition(cond, pattern = "^muffle")
[13:22:50.578]                   }
[13:22:50.578]                 }
[13:22:50.578]                 else {
[13:22:50.578]                   if (TRUE) {
[13:22:50.578]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:22:50.578]                     {
[13:22:50.578]                       inherits <- base::inherits
[13:22:50.578]                       invokeRestart <- base::invokeRestart
[13:22:50.578]                       is.null <- base::is.null
[13:22:50.578]                       muffled <- FALSE
[13:22:50.578]                       if (inherits(cond, "message")) {
[13:22:50.578]                         muffled <- grepl(pattern, "muffleMessage")
[13:22:50.578]                         if (muffled) 
[13:22:50.578]                           invokeRestart("muffleMessage")
[13:22:50.578]                       }
[13:22:50.578]                       else if (inherits(cond, "warning")) {
[13:22:50.578]                         muffled <- grepl(pattern, "muffleWarning")
[13:22:50.578]                         if (muffled) 
[13:22:50.578]                           invokeRestart("muffleWarning")
[13:22:50.578]                       }
[13:22:50.578]                       else if (inherits(cond, "condition")) {
[13:22:50.578]                         if (!is.null(pattern)) {
[13:22:50.578]                           computeRestarts <- base::computeRestarts
[13:22:50.578]                           grepl <- base::grepl
[13:22:50.578]                           restarts <- computeRestarts(cond)
[13:22:50.578]                           for (restart in restarts) {
[13:22:50.578]                             name <- restart$name
[13:22:50.578]                             if (is.null(name)) 
[13:22:50.578]                               next
[13:22:50.578]                             if (!grepl(pattern, name)) 
[13:22:50.578]                               next
[13:22:50.578]                             invokeRestart(restart)
[13:22:50.578]                             muffled <- TRUE
[13:22:50.578]                             break
[13:22:50.578]                           }
[13:22:50.578]                         }
[13:22:50.578]                       }
[13:22:50.578]                       invisible(muffled)
[13:22:50.578]                     }
[13:22:50.578]                     muffleCondition(cond, pattern = "^muffle")
[13:22:50.578]                   }
[13:22:50.578]                 }
[13:22:50.578]             }
[13:22:50.578]         }))
[13:22:50.578]     }, error = function(ex) {
[13:22:50.578]         base::structure(base::list(value = NULL, visible = NULL, 
[13:22:50.578]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:22:50.578]                 ...future.rng), started = ...future.startTime, 
[13:22:50.578]             finished = Sys.time(), session_uuid = NA_character_, 
[13:22:50.578]             version = "1.8"), class = "FutureResult")
[13:22:50.578]     }, finally = {
[13:22:50.578]         if (!identical(...future.workdir, getwd())) 
[13:22:50.578]             setwd(...future.workdir)
[13:22:50.578]         {
[13:22:50.578]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:22:50.578]                 ...future.oldOptions$nwarnings <- NULL
[13:22:50.578]             }
[13:22:50.578]             base::options(...future.oldOptions)
[13:22:50.578]             if (.Platform$OS.type == "windows") {
[13:22:50.578]                 old_names <- names(...future.oldEnvVars)
[13:22:50.578]                 envs <- base::Sys.getenv()
[13:22:50.578]                 names <- names(envs)
[13:22:50.578]                 common <- intersect(names, old_names)
[13:22:50.578]                 added <- setdiff(names, old_names)
[13:22:50.578]                 removed <- setdiff(old_names, names)
[13:22:50.578]                 changed <- common[...future.oldEnvVars[common] != 
[13:22:50.578]                   envs[common]]
[13:22:50.578]                 NAMES <- toupper(changed)
[13:22:50.578]                 args <- list()
[13:22:50.578]                 for (kk in seq_along(NAMES)) {
[13:22:50.578]                   name <- changed[[kk]]
[13:22:50.578]                   NAME <- NAMES[[kk]]
[13:22:50.578]                   if (name != NAME && is.element(NAME, old_names)) 
[13:22:50.578]                     next
[13:22:50.578]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:22:50.578]                 }
[13:22:50.578]                 NAMES <- toupper(added)
[13:22:50.578]                 for (kk in seq_along(NAMES)) {
[13:22:50.578]                   name <- added[[kk]]
[13:22:50.578]                   NAME <- NAMES[[kk]]
[13:22:50.578]                   if (name != NAME && is.element(NAME, old_names)) 
[13:22:50.578]                     next
[13:22:50.578]                   args[[name]] <- ""
[13:22:50.578]                 }
[13:22:50.578]                 NAMES <- toupper(removed)
[13:22:50.578]                 for (kk in seq_along(NAMES)) {
[13:22:50.578]                   name <- removed[[kk]]
[13:22:50.578]                   NAME <- NAMES[[kk]]
[13:22:50.578]                   if (name != NAME && is.element(NAME, old_names)) 
[13:22:50.578]                     next
[13:22:50.578]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:22:50.578]                 }
[13:22:50.578]                 if (length(args) > 0) 
[13:22:50.578]                   base::do.call(base::Sys.setenv, args = args)
[13:22:50.578]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:22:50.578]             }
[13:22:50.578]             else {
[13:22:50.578]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:22:50.578]             }
[13:22:50.578]             {
[13:22:50.578]                 if (base::length(...future.futureOptionsAdded) > 
[13:22:50.578]                   0L) {
[13:22:50.578]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:22:50.578]                   base::names(opts) <- ...future.futureOptionsAdded
[13:22:50.578]                   base::options(opts)
[13:22:50.578]                 }
[13:22:50.578]                 {
[13:22:50.578]                   {
[13:22:50.578]                     base::options(mc.cores = ...future.mc.cores.old)
[13:22:50.578]                     NULL
[13:22:50.578]                   }
[13:22:50.578]                   options(future.plan = NULL)
[13:22:50.578]                   if (is.na(NA_character_)) 
[13:22:50.578]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:22:50.578]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:22:50.578]                   future::plan(list(function (...) 
[13:22:50.578]                   {
[13:22:50.578]                     Future(1)
[13:22:50.578]                   }), .cleanup = FALSE, .init = FALSE)
[13:22:50.578]                 }
[13:22:50.578]             }
[13:22:50.578]         }
[13:22:50.578]     })
[13:22:50.578]     if (TRUE) {
[13:22:50.578]         base::sink(type = "output", split = FALSE)
[13:22:50.578]         if (TRUE) {
[13:22:50.578]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:22:50.578]         }
[13:22:50.578]         else {
[13:22:50.578]             ...future.result["stdout"] <- base::list(NULL)
[13:22:50.578]         }
[13:22:50.578]         base::close(...future.stdout)
[13:22:50.578]         ...future.stdout <- NULL
[13:22:50.578]     }
[13:22:50.578]     ...future.result$conditions <- ...future.conditions
[13:22:50.578]     ...future.result$finished <- base::Sys.time()
[13:22:50.578]     ...future.result
[13:22:50.578] }
[13:22:50.581] MultisessionFuture started
[13:22:50.581] result() for ClusterFuture ...
[13:22:50.581] receiveMessageFromWorker() for ClusterFuture ...
[13:22:50.581] - Validating connection of MultisessionFuture
[13:22:50.586] - received message: FutureResult
[13:22:50.586] - Received FutureResult
[13:22:50.587] - Erased future from FutureRegistry
[13:22:50.587] result() for ClusterFuture ...
[13:22:50.587] - result already collected: FutureResult
[13:22:50.587] result() for ClusterFuture ... done
[13:22:50.587] receiveMessageFromWorker() for ClusterFuture ... done
[13:22:50.587] result() for ClusterFuture ... done
[13:22:50.587] result() for ClusterFuture ...
[13:22:50.587] - result already collected: FutureResult
[13:22:50.587] result() for ClusterFuture ... done
[1] 42
[13:22:50.588] getGlobalsAndPackages() ...
[13:22:50.588] Searching for globals...
[13:22:50.589] - globals found: [1] ‘{’
[13:22:50.589] Searching for globals ... DONE
[13:22:50.589] Resolving globals: FALSE
[13:22:50.589] 
[13:22:50.590] 
[13:22:50.590] getGlobalsAndPackages() ... DONE
SequentialFuture:
Label: ‘<none>’
Expression:
{
    42L
}
Lazy evaluation: FALSE
Asynchronous evaluation: FALSE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: FALSE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: 4632995a-8f11-57ca-3a63-45d8ba943a34
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[13:22:50.590] Packages needed by the future expression (n = 0): <none>
[13:22:50.591] Packages needed by future strategies (n = 0): <none>
[13:22:50.591] {
[13:22:50.591]     {
[13:22:50.591]         {
[13:22:50.591]             ...future.startTime <- base::Sys.time()
[13:22:50.591]             {
[13:22:50.591]                 {
[13:22:50.591]                   {
[13:22:50.591]                     base::local({
[13:22:50.591]                       has_future <- base::requireNamespace("future", 
[13:22:50.591]                         quietly = TRUE)
[13:22:50.591]                       if (has_future) {
[13:22:50.591]                         ns <- base::getNamespace("future")
[13:22:50.591]                         version <- ns[[".package"]][["version"]]
[13:22:50.591]                         if (is.null(version)) 
[13:22:50.591]                           version <- utils::packageVersion("future")
[13:22:50.591]                       }
[13:22:50.591]                       else {
[13:22:50.591]                         version <- NULL
[13:22:50.591]                       }
[13:22:50.591]                       if (!has_future || version < "1.8.0") {
[13:22:50.591]                         info <- base::c(r_version = base::gsub("R version ", 
[13:22:50.591]                           "", base::R.version$version.string), 
[13:22:50.591]                           platform = base::sprintf("%s (%s-bit)", 
[13:22:50.591]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:22:50.591]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[13:22:50.591]                             "release", "version")], collapse = " "), 
[13:22:50.591]                           hostname = base::Sys.info()[["nodename"]])
[13:22:50.591]                         info <- base::sprintf("%s: %s", base::names(info), 
[13:22:50.591]                           info)
[13:22:50.591]                         info <- base::paste(info, collapse = "; ")
[13:22:50.591]                         if (!has_future) {
[13:22:50.591]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:22:50.591]                             info)
[13:22:50.591]                         }
[13:22:50.591]                         else {
[13:22:50.591]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:22:50.591]                             info, version)
[13:22:50.591]                         }
[13:22:50.591]                         base::stop(msg)
[13:22:50.591]                       }
[13:22:50.591]                     })
[13:22:50.591]                   }
[13:22:50.591]                   options(future.plan = NULL)
[13:22:50.591]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:22:50.591]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:22:50.591]                 }
[13:22:50.591]                 ...future.workdir <- getwd()
[13:22:50.591]             }
[13:22:50.591]             ...future.oldOptions <- base::as.list(base::.Options)
[13:22:50.591]             ...future.oldEnvVars <- base::Sys.getenv()
[13:22:50.591]         }
[13:22:50.591]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:22:50.591]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:22:50.591]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:22:50.591]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:22:50.591]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:22:50.591]             future.stdout.windows.reencode = NULL, width = 80L)
[13:22:50.591]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:22:50.591]             base::names(...future.oldOptions))
[13:22:50.591]     }
[13:22:50.591]     if (FALSE) {
[13:22:50.591]     }
[13:22:50.591]     else {
[13:22:50.591]         if (TRUE) {
[13:22:50.591]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:22:50.591]                 open = "w")
[13:22:50.591]         }
[13:22:50.591]         else {
[13:22:50.591]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:22:50.591]                 windows = "NUL", "/dev/null"), open = "w")
[13:22:50.591]         }
[13:22:50.591]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:22:50.591]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:22:50.591]             base::sink(type = "output", split = FALSE)
[13:22:50.591]             base::close(...future.stdout)
[13:22:50.591]         }, add = TRUE)
[13:22:50.591]     }
[13:22:50.591]     ...future.frame <- base::sys.nframe()
[13:22:50.591]     ...future.conditions <- base::list()
[13:22:50.591]     ...future.rng <- base::globalenv()$.Random.seed
[13:22:50.591]     if (FALSE) {
[13:22:50.591]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:22:50.591]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:22:50.591]     }
[13:22:50.591]     ...future.result <- base::tryCatch({
[13:22:50.591]         base::withCallingHandlers({
[13:22:50.591]             ...future.value <- base::withVisible(base::local({
[13:22:50.591]                 42L
[13:22:50.591]             }))
[13:22:50.591]             future::FutureResult(value = ...future.value$value, 
[13:22:50.591]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:22:50.591]                   ...future.rng), globalenv = if (FALSE) 
[13:22:50.591]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:22:50.591]                     ...future.globalenv.names))
[13:22:50.591]                 else NULL, started = ...future.startTime, version = "1.8")
[13:22:50.591]         }, condition = base::local({
[13:22:50.591]             c <- base::c
[13:22:50.591]             inherits <- base::inherits
[13:22:50.591]             invokeRestart <- base::invokeRestart
[13:22:50.591]             length <- base::length
[13:22:50.591]             list <- base::list
[13:22:50.591]             seq.int <- base::seq.int
[13:22:50.591]             signalCondition <- base::signalCondition
[13:22:50.591]             sys.calls <- base::sys.calls
[13:22:50.591]             `[[` <- base::`[[`
[13:22:50.591]             `+` <- base::`+`
[13:22:50.591]             `<<-` <- base::`<<-`
[13:22:50.591]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:22:50.591]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:22:50.591]                   3L)]
[13:22:50.591]             }
[13:22:50.591]             function(cond) {
[13:22:50.591]                 is_error <- inherits(cond, "error")
[13:22:50.591]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:22:50.591]                   NULL)
[13:22:50.591]                 if (is_error) {
[13:22:50.591]                   sessionInformation <- function() {
[13:22:50.591]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:22:50.591]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:22:50.591]                       search = base::search(), system = base::Sys.info())
[13:22:50.591]                   }
[13:22:50.591]                   ...future.conditions[[length(...future.conditions) + 
[13:22:50.591]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:22:50.591]                     cond$call), session = sessionInformation(), 
[13:22:50.591]                     timestamp = base::Sys.time(), signaled = 0L)
[13:22:50.591]                   signalCondition(cond)
[13:22:50.591]                 }
[13:22:50.591]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:22:50.591]                 "immediateCondition"))) {
[13:22:50.591]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:22:50.591]                   ...future.conditions[[length(...future.conditions) + 
[13:22:50.591]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:22:50.591]                   if (TRUE && !signal) {
[13:22:50.591]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:22:50.591]                     {
[13:22:50.591]                       inherits <- base::inherits
[13:22:50.591]                       invokeRestart <- base::invokeRestart
[13:22:50.591]                       is.null <- base::is.null
[13:22:50.591]                       muffled <- FALSE
[13:22:50.591]                       if (inherits(cond, "message")) {
[13:22:50.591]                         muffled <- grepl(pattern, "muffleMessage")
[13:22:50.591]                         if (muffled) 
[13:22:50.591]                           invokeRestart("muffleMessage")
[13:22:50.591]                       }
[13:22:50.591]                       else if (inherits(cond, "warning")) {
[13:22:50.591]                         muffled <- grepl(pattern, "muffleWarning")
[13:22:50.591]                         if (muffled) 
[13:22:50.591]                           invokeRestart("muffleWarning")
[13:22:50.591]                       }
[13:22:50.591]                       else if (inherits(cond, "condition")) {
[13:22:50.591]                         if (!is.null(pattern)) {
[13:22:50.591]                           computeRestarts <- base::computeRestarts
[13:22:50.591]                           grepl <- base::grepl
[13:22:50.591]                           restarts <- computeRestarts(cond)
[13:22:50.591]                           for (restart in restarts) {
[13:22:50.591]                             name <- restart$name
[13:22:50.591]                             if (is.null(name)) 
[13:22:50.591]                               next
[13:22:50.591]                             if (!grepl(pattern, name)) 
[13:22:50.591]                               next
[13:22:50.591]                             invokeRestart(restart)
[13:22:50.591]                             muffled <- TRUE
[13:22:50.591]                             break
[13:22:50.591]                           }
[13:22:50.591]                         }
[13:22:50.591]                       }
[13:22:50.591]                       invisible(muffled)
[13:22:50.591]                     }
[13:22:50.591]                     muffleCondition(cond, pattern = "^muffle")
[13:22:50.591]                   }
[13:22:50.591]                 }
[13:22:50.591]                 else {
[13:22:50.591]                   if (TRUE) {
[13:22:50.591]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:22:50.591]                     {
[13:22:50.591]                       inherits <- base::inherits
[13:22:50.591]                       invokeRestart <- base::invokeRestart
[13:22:50.591]                       is.null <- base::is.null
[13:22:50.591]                       muffled <- FALSE
[13:22:50.591]                       if (inherits(cond, "message")) {
[13:22:50.591]                         muffled <- grepl(pattern, "muffleMessage")
[13:22:50.591]                         if (muffled) 
[13:22:50.591]                           invokeRestart("muffleMessage")
[13:22:50.591]                       }
[13:22:50.591]                       else if (inherits(cond, "warning")) {
[13:22:50.591]                         muffled <- grepl(pattern, "muffleWarning")
[13:22:50.591]                         if (muffled) 
[13:22:50.591]                           invokeRestart("muffleWarning")
[13:22:50.591]                       }
[13:22:50.591]                       else if (inherits(cond, "condition")) {
[13:22:50.591]                         if (!is.null(pattern)) {
[13:22:50.591]                           computeRestarts <- base::computeRestarts
[13:22:50.591]                           grepl <- base::grepl
[13:22:50.591]                           restarts <- computeRestarts(cond)
[13:22:50.591]                           for (restart in restarts) {
[13:22:50.591]                             name <- restart$name
[13:22:50.591]                             if (is.null(name)) 
[13:22:50.591]                               next
[13:22:50.591]                             if (!grepl(pattern, name)) 
[13:22:50.591]                               next
[13:22:50.591]                             invokeRestart(restart)
[13:22:50.591]                             muffled <- TRUE
[13:22:50.591]                             break
[13:22:50.591]                           }
[13:22:50.591]                         }
[13:22:50.591]                       }
[13:22:50.591]                       invisible(muffled)
[13:22:50.591]                     }
[13:22:50.591]                     muffleCondition(cond, pattern = "^muffle")
[13:22:50.591]                   }
[13:22:50.591]                 }
[13:22:50.591]             }
[13:22:50.591]         }))
[13:22:50.591]     }, error = function(ex) {
[13:22:50.591]         base::structure(base::list(value = NULL, visible = NULL, 
[13:22:50.591]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:22:50.591]                 ...future.rng), started = ...future.startTime, 
[13:22:50.591]             finished = Sys.time(), session_uuid = NA_character_, 
[13:22:50.591]             version = "1.8"), class = "FutureResult")
[13:22:50.591]     }, finally = {
[13:22:50.591]         if (!identical(...future.workdir, getwd())) 
[13:22:50.591]             setwd(...future.workdir)
[13:22:50.591]         {
[13:22:50.591]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:22:50.591]                 ...future.oldOptions$nwarnings <- NULL
[13:22:50.591]             }
[13:22:50.591]             base::options(...future.oldOptions)
[13:22:50.591]             if (.Platform$OS.type == "windows") {
[13:22:50.591]                 old_names <- names(...future.oldEnvVars)
[13:22:50.591]                 envs <- base::Sys.getenv()
[13:22:50.591]                 names <- names(envs)
[13:22:50.591]                 common <- intersect(names, old_names)
[13:22:50.591]                 added <- setdiff(names, old_names)
[13:22:50.591]                 removed <- setdiff(old_names, names)
[13:22:50.591]                 changed <- common[...future.oldEnvVars[common] != 
[13:22:50.591]                   envs[common]]
[13:22:50.591]                 NAMES <- toupper(changed)
[13:22:50.591]                 args <- list()
[13:22:50.591]                 for (kk in seq_along(NAMES)) {
[13:22:50.591]                   name <- changed[[kk]]
[13:22:50.591]                   NAME <- NAMES[[kk]]
[13:22:50.591]                   if (name != NAME && is.element(NAME, old_names)) 
[13:22:50.591]                     next
[13:22:50.591]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:22:50.591]                 }
[13:22:50.591]                 NAMES <- toupper(added)
[13:22:50.591]                 for (kk in seq_along(NAMES)) {
[13:22:50.591]                   name <- added[[kk]]
[13:22:50.591]                   NAME <- NAMES[[kk]]
[13:22:50.591]                   if (name != NAME && is.element(NAME, old_names)) 
[13:22:50.591]                     next
[13:22:50.591]                   args[[name]] <- ""
[13:22:50.591]                 }
[13:22:50.591]                 NAMES <- toupper(removed)
[13:22:50.591]                 for (kk in seq_along(NAMES)) {
[13:22:50.591]                   name <- removed[[kk]]
[13:22:50.591]                   NAME <- NAMES[[kk]]
[13:22:50.591]                   if (name != NAME && is.element(NAME, old_names)) 
[13:22:50.591]                     next
[13:22:50.591]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:22:50.591]                 }
[13:22:50.591]                 if (length(args) > 0) 
[13:22:50.591]                   base::do.call(base::Sys.setenv, args = args)
[13:22:50.591]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:22:50.591]             }
[13:22:50.591]             else {
[13:22:50.591]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:22:50.591]             }
[13:22:50.591]             {
[13:22:50.591]                 if (base::length(...future.futureOptionsAdded) > 
[13:22:50.591]                   0L) {
[13:22:50.591]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:22:50.591]                   base::names(opts) <- ...future.futureOptionsAdded
[13:22:50.591]                   base::options(opts)
[13:22:50.591]                 }
[13:22:50.591]                 {
[13:22:50.591]                   {
[13:22:50.591]                     NULL
[13:22:50.591]                     RNGkind("Mersenne-Twister")
[13:22:50.591]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[13:22:50.591]                       inherits = FALSE)
[13:22:50.591]                   }
[13:22:50.591]                   options(future.plan = NULL)
[13:22:50.591]                   if (is.na(NA_character_)) 
[13:22:50.591]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:22:50.591]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:22:50.591]                   future::plan(list(function (...) 
[13:22:50.591]                   {
[13:22:50.591]                     Future(1)
[13:22:50.591]                   }), .cleanup = FALSE, .init = FALSE)
[13:22:50.591]                 }
[13:22:50.591]             }
[13:22:50.591]         }
[13:22:50.591]     })
[13:22:50.591]     if (TRUE) {
[13:22:50.591]         base::sink(type = "output", split = FALSE)
[13:22:50.591]         if (TRUE) {
[13:22:50.591]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:22:50.591]         }
[13:22:50.591]         else {
[13:22:50.591]             ...future.result["stdout"] <- base::list(NULL)
[13:22:50.591]         }
[13:22:50.591]         base::close(...future.stdout)
[13:22:50.591]         ...future.stdout <- NULL
[13:22:50.591]     }
[13:22:50.591]     ...future.result$conditions <- ...future.conditions
[13:22:50.591]     ...future.result$finished <- base::Sys.time()
[13:22:50.591]     ...future.result
[13:22:50.591] }
[13:22:50.593] plan(): Setting new future strategy stack:
[13:22:50.593] List of future strategies:
[13:22:50.593] 1. sequential:
[13:22:50.593]    - args: function (..., envir = parent.frame())
[13:22:50.593]    - tweaked: FALSE
[13:22:50.593]    - call: NULL
[13:22:50.594] plan(): nbrOfWorkers() = 1
[13:22:50.595] plan(): Setting new future strategy stack:
[13:22:50.595] List of future strategies:
[13:22:50.595] 1. future:
[13:22:50.595]    - args: function (...)
[13:22:50.595]    - tweaked: FALSE
[13:22:50.595]    - call: plan(foo)
[13:22:50.595] plan(): nbrOfWorkers() = Inf
[13:22:50.596] SequentialFuture started (and completed)
[1] 42
[13:22:50.596] getGlobalsAndPackages() ...
[13:22:50.596] Searching for globals...
[13:22:50.597] - globals found: [1] ‘{’
[13:22:50.597] Searching for globals ... DONE
[13:22:50.597] Resolving globals: FALSE
[13:22:50.598] 
[13:22:50.598] 
[13:22:50.598] getGlobalsAndPackages() ... DONE
[13:22:50.598] Packages needed by the future expression (n = 0): <none>
[13:22:50.598] Packages needed by future strategies (n = 0): <none>
[13:22:50.599] {
[13:22:50.599]     {
[13:22:50.599]         {
[13:22:50.599]             ...future.startTime <- base::Sys.time()
[13:22:50.599]             {
[13:22:50.599]                 {
[13:22:50.599]                   {
[13:22:50.599]                     base::local({
[13:22:50.599]                       has_future <- base::requireNamespace("future", 
[13:22:50.599]                         quietly = TRUE)
[13:22:50.599]                       if (has_future) {
[13:22:50.599]                         ns <- base::getNamespace("future")
[13:22:50.599]                         version <- ns[[".package"]][["version"]]
[13:22:50.599]                         if (is.null(version)) 
[13:22:50.599]                           version <- utils::packageVersion("future")
[13:22:50.599]                       }
[13:22:50.599]                       else {
[13:22:50.599]                         version <- NULL
[13:22:50.599]                       }
[13:22:50.599]                       if (!has_future || version < "1.8.0") {
[13:22:50.599]                         info <- base::c(r_version = base::gsub("R version ", 
[13:22:50.599]                           "", base::R.version$version.string), 
[13:22:50.599]                           platform = base::sprintf("%s (%s-bit)", 
[13:22:50.599]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:22:50.599]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[13:22:50.599]                             "release", "version")], collapse = " "), 
[13:22:50.599]                           hostname = base::Sys.info()[["nodename"]])
[13:22:50.599]                         info <- base::sprintf("%s: %s", base::names(info), 
[13:22:50.599]                           info)
[13:22:50.599]                         info <- base::paste(info, collapse = "; ")
[13:22:50.599]                         if (!has_future) {
[13:22:50.599]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:22:50.599]                             info)
[13:22:50.599]                         }
[13:22:50.599]                         else {
[13:22:50.599]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:22:50.599]                             info, version)
[13:22:50.599]                         }
[13:22:50.599]                         base::stop(msg)
[13:22:50.599]                       }
[13:22:50.599]                     })
[13:22:50.599]                   }
[13:22:50.599]                   options(future.plan = NULL)
[13:22:50.599]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:22:50.599]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:22:50.599]                 }
[13:22:50.599]                 ...future.workdir <- getwd()
[13:22:50.599]             }
[13:22:50.599]             ...future.oldOptions <- base::as.list(base::.Options)
[13:22:50.599]             ...future.oldEnvVars <- base::Sys.getenv()
[13:22:50.599]         }
[13:22:50.599]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:22:50.599]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:22:50.599]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:22:50.599]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:22:50.599]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:22:50.599]             future.stdout.windows.reencode = NULL, width = 80L)
[13:22:50.599]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:22:50.599]             base::names(...future.oldOptions))
[13:22:50.599]     }
[13:22:50.599]     if (FALSE) {
[13:22:50.599]     }
[13:22:50.599]     else {
[13:22:50.599]         if (TRUE) {
[13:22:50.599]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:22:50.599]                 open = "w")
[13:22:50.599]         }
[13:22:50.599]         else {
[13:22:50.599]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:22:50.599]                 windows = "NUL", "/dev/null"), open = "w")
[13:22:50.599]         }
[13:22:50.599]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:22:50.599]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:22:50.599]             base::sink(type = "output", split = FALSE)
[13:22:50.599]             base::close(...future.stdout)
[13:22:50.599]         }, add = TRUE)
[13:22:50.599]     }
[13:22:50.599]     ...future.frame <- base::sys.nframe()
[13:22:50.599]     ...future.conditions <- base::list()
[13:22:50.599]     ...future.rng <- base::globalenv()$.Random.seed
[13:22:50.599]     if (FALSE) {
[13:22:50.599]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:22:50.599]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:22:50.599]     }
[13:22:50.599]     ...future.result <- base::tryCatch({
[13:22:50.599]         base::withCallingHandlers({
[13:22:50.599]             ...future.value <- base::withVisible(base::local({
[13:22:50.599]                 42L
[13:22:50.599]             }))
[13:22:50.599]             future::FutureResult(value = ...future.value$value, 
[13:22:50.599]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:22:50.599]                   ...future.rng), globalenv = if (FALSE) 
[13:22:50.599]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:22:50.599]                     ...future.globalenv.names))
[13:22:50.599]                 else NULL, started = ...future.startTime, version = "1.8")
[13:22:50.599]         }, condition = base::local({
[13:22:50.599]             c <- base::c
[13:22:50.599]             inherits <- base::inherits
[13:22:50.599]             invokeRestart <- base::invokeRestart
[13:22:50.599]             length <- base::length
[13:22:50.599]             list <- base::list
[13:22:50.599]             seq.int <- base::seq.int
[13:22:50.599]             signalCondition <- base::signalCondition
[13:22:50.599]             sys.calls <- base::sys.calls
[13:22:50.599]             `[[` <- base::`[[`
[13:22:50.599]             `+` <- base::`+`
[13:22:50.599]             `<<-` <- base::`<<-`
[13:22:50.599]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:22:50.599]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:22:50.599]                   3L)]
[13:22:50.599]             }
[13:22:50.599]             function(cond) {
[13:22:50.599]                 is_error <- inherits(cond, "error")
[13:22:50.599]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:22:50.599]                   NULL)
[13:22:50.599]                 if (is_error) {
[13:22:50.599]                   sessionInformation <- function() {
[13:22:50.599]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:22:50.599]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:22:50.599]                       search = base::search(), system = base::Sys.info())
[13:22:50.599]                   }
[13:22:50.599]                   ...future.conditions[[length(...future.conditions) + 
[13:22:50.599]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:22:50.599]                     cond$call), session = sessionInformation(), 
[13:22:50.599]                     timestamp = base::Sys.time(), signaled = 0L)
[13:22:50.599]                   signalCondition(cond)
[13:22:50.599]                 }
[13:22:50.599]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:22:50.599]                 "immediateCondition"))) {
[13:22:50.599]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:22:50.599]                   ...future.conditions[[length(...future.conditions) + 
[13:22:50.599]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:22:50.599]                   if (TRUE && !signal) {
[13:22:50.599]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:22:50.599]                     {
[13:22:50.599]                       inherits <- base::inherits
[13:22:50.599]                       invokeRestart <- base::invokeRestart
[13:22:50.599]                       is.null <- base::is.null
[13:22:50.599]                       muffled <- FALSE
[13:22:50.599]                       if (inherits(cond, "message")) {
[13:22:50.599]                         muffled <- grepl(pattern, "muffleMessage")
[13:22:50.599]                         if (muffled) 
[13:22:50.599]                           invokeRestart("muffleMessage")
[13:22:50.599]                       }
[13:22:50.599]                       else if (inherits(cond, "warning")) {
[13:22:50.599]                         muffled <- grepl(pattern, "muffleWarning")
[13:22:50.599]                         if (muffled) 
[13:22:50.599]                           invokeRestart("muffleWarning")
[13:22:50.599]                       }
[13:22:50.599]                       else if (inherits(cond, "condition")) {
[13:22:50.599]                         if (!is.null(pattern)) {
[13:22:50.599]                           computeRestarts <- base::computeRestarts
[13:22:50.599]                           grepl <- base::grepl
[13:22:50.599]                           restarts <- computeRestarts(cond)
[13:22:50.599]                           for (restart in restarts) {
[13:22:50.599]                             name <- restart$name
[13:22:50.599]                             if (is.null(name)) 
[13:22:50.599]                               next
[13:22:50.599]                             if (!grepl(pattern, name)) 
[13:22:50.599]                               next
[13:22:50.599]                             invokeRestart(restart)
[13:22:50.599]                             muffled <- TRUE
[13:22:50.599]                             break
[13:22:50.599]                           }
[13:22:50.599]                         }
[13:22:50.599]                       }
[13:22:50.599]                       invisible(muffled)
[13:22:50.599]                     }
[13:22:50.599]                     muffleCondition(cond, pattern = "^muffle")
[13:22:50.599]                   }
[13:22:50.599]                 }
[13:22:50.599]                 else {
[13:22:50.599]                   if (TRUE) {
[13:22:50.599]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:22:50.599]                     {
[13:22:50.599]                       inherits <- base::inherits
[13:22:50.599]                       invokeRestart <- base::invokeRestart
[13:22:50.599]                       is.null <- base::is.null
[13:22:50.599]                       muffled <- FALSE
[13:22:50.599]                       if (inherits(cond, "message")) {
[13:22:50.599]                         muffled <- grepl(pattern, "muffleMessage")
[13:22:50.599]                         if (muffled) 
[13:22:50.599]                           invokeRestart("muffleMessage")
[13:22:50.599]                       }
[13:22:50.599]                       else if (inherits(cond, "warning")) {
[13:22:50.599]                         muffled <- grepl(pattern, "muffleWarning")
[13:22:50.599]                         if (muffled) 
[13:22:50.599]                           invokeRestart("muffleWarning")
[13:22:50.599]                       }
[13:22:50.599]                       else if (inherits(cond, "condition")) {
[13:22:50.599]                         if (!is.null(pattern)) {
[13:22:50.599]                           computeRestarts <- base::computeRestarts
[13:22:50.599]                           grepl <- base::grepl
[13:22:50.599]                           restarts <- computeRestarts(cond)
[13:22:50.599]                           for (restart in restarts) {
[13:22:50.599]                             name <- restart$name
[13:22:50.599]                             if (is.null(name)) 
[13:22:50.599]                               next
[13:22:50.599]                             if (!grepl(pattern, name)) 
[13:22:50.599]                               next
[13:22:50.599]                             invokeRestart(restart)
[13:22:50.599]                             muffled <- TRUE
[13:22:50.599]                             break
[13:22:50.599]                           }
[13:22:50.599]                         }
[13:22:50.599]                       }
[13:22:50.599]                       invisible(muffled)
[13:22:50.599]                     }
[13:22:50.599]                     muffleCondition(cond, pattern = "^muffle")
[13:22:50.599]                   }
[13:22:50.599]                 }
[13:22:50.599]             }
[13:22:50.599]         }))
[13:22:50.599]     }, error = function(ex) {
[13:22:50.599]         base::structure(base::list(value = NULL, visible = NULL, 
[13:22:50.599]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:22:50.599]                 ...future.rng), started = ...future.startTime, 
[13:22:50.599]             finished = Sys.time(), session_uuid = NA_character_, 
[13:22:50.599]             version = "1.8"), class = "FutureResult")
[13:22:50.599]     }, finally = {
[13:22:50.599]         if (!identical(...future.workdir, getwd())) 
[13:22:50.599]             setwd(...future.workdir)
[13:22:50.599]         {
[13:22:50.599]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:22:50.599]                 ...future.oldOptions$nwarnings <- NULL
[13:22:50.599]             }
[13:22:50.599]             base::options(...future.oldOptions)
[13:22:50.599]             if (.Platform$OS.type == "windows") {
[13:22:50.599]                 old_names <- names(...future.oldEnvVars)
[13:22:50.599]                 envs <- base::Sys.getenv()
[13:22:50.599]                 names <- names(envs)
[13:22:50.599]                 common <- intersect(names, old_names)
[13:22:50.599]                 added <- setdiff(names, old_names)
[13:22:50.599]                 removed <- setdiff(old_names, names)
[13:22:50.599]                 changed <- common[...future.oldEnvVars[common] != 
[13:22:50.599]                   envs[common]]
[13:22:50.599]                 NAMES <- toupper(changed)
[13:22:50.599]                 args <- list()
[13:22:50.599]                 for (kk in seq_along(NAMES)) {
[13:22:50.599]                   name <- changed[[kk]]
[13:22:50.599]                   NAME <- NAMES[[kk]]
[13:22:50.599]                   if (name != NAME && is.element(NAME, old_names)) 
[13:22:50.599]                     next
[13:22:50.599]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:22:50.599]                 }
[13:22:50.599]                 NAMES <- toupper(added)
[13:22:50.599]                 for (kk in seq_along(NAMES)) {
[13:22:50.599]                   name <- added[[kk]]
[13:22:50.599]                   NAME <- NAMES[[kk]]
[13:22:50.599]                   if (name != NAME && is.element(NAME, old_names)) 
[13:22:50.599]                     next
[13:22:50.599]                   args[[name]] <- ""
[13:22:50.599]                 }
[13:22:50.599]                 NAMES <- toupper(removed)
[13:22:50.599]                 for (kk in seq_along(NAMES)) {
[13:22:50.599]                   name <- removed[[kk]]
[13:22:50.599]                   NAME <- NAMES[[kk]]
[13:22:50.599]                   if (name != NAME && is.element(NAME, old_names)) 
[13:22:50.599]                     next
[13:22:50.599]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:22:50.599]                 }
[13:22:50.599]                 if (length(args) > 0) 
[13:22:50.599]                   base::do.call(base::Sys.setenv, args = args)
[13:22:50.599]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:22:50.599]             }
[13:22:50.599]             else {
[13:22:50.599]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:22:50.599]             }
[13:22:50.599]             {
[13:22:50.599]                 if (base::length(...future.futureOptionsAdded) > 
[13:22:50.599]                   0L) {
[13:22:50.599]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:22:50.599]                   base::names(opts) <- ...future.futureOptionsAdded
[13:22:50.599]                   base::options(opts)
[13:22:50.599]                 }
[13:22:50.599]                 {
[13:22:50.599]                   {
[13:22:50.599]                     NULL
[13:22:50.599]                     RNGkind("Mersenne-Twister")
[13:22:50.599]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[13:22:50.599]                       inherits = FALSE)
[13:22:50.599]                   }
[13:22:50.599]                   options(future.plan = NULL)
[13:22:50.599]                   if (is.na(NA_character_)) 
[13:22:50.599]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:22:50.599]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:22:50.599]                   future::plan(list(function (...) 
[13:22:50.599]                   {
[13:22:50.599]                     Future(1)
[13:22:50.599]                   }), .cleanup = FALSE, .init = FALSE)
[13:22:50.599]                 }
[13:22:50.599]             }
[13:22:50.599]         }
[13:22:50.599]     })
[13:22:50.599]     if (TRUE) {
[13:22:50.599]         base::sink(type = "output", split = FALSE)
[13:22:50.599]         if (TRUE) {
[13:22:50.599]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:22:50.599]         }
[13:22:50.599]         else {
[13:22:50.599]             ...future.result["stdout"] <- base::list(NULL)
[13:22:50.599]         }
[13:22:50.599]         base::close(...future.stdout)
[13:22:50.599]         ...future.stdout <- NULL
[13:22:50.599]     }
[13:22:50.599]     ...future.result$conditions <- ...future.conditions
[13:22:50.599]     ...future.result$finished <- base::Sys.time()
[13:22:50.599]     ...future.result
[13:22:50.599] }
[13:22:50.601] plan(): Setting new future strategy stack:
[13:22:50.601] List of future strategies:
[13:22:50.601] 1. sequential:
[13:22:50.601]    - args: function (..., envir = parent.frame())
[13:22:50.601]    - tweaked: FALSE
[13:22:50.601]    - call: NULL
[13:22:50.601] plan(): nbrOfWorkers() = 1
[13:22:50.602] plan(): Setting new future strategy stack:
[13:22:50.602] List of future strategies:
[13:22:50.602] 1. future:
[13:22:50.602]    - args: function (...)
[13:22:50.602]    - tweaked: FALSE
[13:22:50.602]    - call: plan(foo)
[13:22:50.603] plan(): nbrOfWorkers() = Inf
[13:22:50.603] SequentialFuture started (and completed)
[1] 42
[13:22:50.603] getGlobalsAndPackages() ...
[13:22:50.604] 
[13:22:50.604] - globals: [0] <none>
[13:22:50.604] getGlobalsAndPackages() ... DONE
MulticoreFuture:
Label: ‘<none>’
Expression:
{
    42L
}
Lazy evaluation: FALSE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: 0x55c28d6add68
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: FALSE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: 4632995a-8f11-57ca-3a63-45d8ba943a34
Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:22:50.606] Packages needed by the future expression (n = 0): <none>
[13:22:50.606] Packages needed by future strategies (n = 0): <none>
[13:22:50.606] {
[13:22:50.606]     {
[13:22:50.606]         {
[13:22:50.606]             ...future.startTime <- base::Sys.time()
[13:22:50.606]             {
[13:22:50.606]                 {
[13:22:50.606]                   {
[13:22:50.606]                     {
[13:22:50.606]                       base::local({
[13:22:50.606]                         has_future <- base::requireNamespace("future", 
[13:22:50.606]                           quietly = TRUE)
[13:22:50.606]                         if (has_future) {
[13:22:50.606]                           ns <- base::getNamespace("future")
[13:22:50.606]                           version <- ns[[".package"]][["version"]]
[13:22:50.606]                           if (is.null(version)) 
[13:22:50.606]                             version <- utils::packageVersion("future")
[13:22:50.606]                         }
[13:22:50.606]                         else {
[13:22:50.606]                           version <- NULL
[13:22:50.606]                         }
[13:22:50.606]                         if (!has_future || version < "1.8.0") {
[13:22:50.606]                           info <- base::c(r_version = base::gsub("R version ", 
[13:22:50.606]                             "", base::R.version$version.string), 
[13:22:50.606]                             platform = base::sprintf("%s (%s-bit)", 
[13:22:50.606]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:22:50.606]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:22:50.606]                               "release", "version")], collapse = " "), 
[13:22:50.606]                             hostname = base::Sys.info()[["nodename"]])
[13:22:50.606]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:22:50.606]                             info)
[13:22:50.606]                           info <- base::paste(info, collapse = "; ")
[13:22:50.606]                           if (!has_future) {
[13:22:50.606]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:22:50.606]                               info)
[13:22:50.606]                           }
[13:22:50.606]                           else {
[13:22:50.606]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:22:50.606]                               info, version)
[13:22:50.606]                           }
[13:22:50.606]                           base::stop(msg)
[13:22:50.606]                         }
[13:22:50.606]                       })
[13:22:50.606]                     }
[13:22:50.606]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[13:22:50.606]                     base::options(mc.cores = 1L)
[13:22:50.606]                   }
[13:22:50.606]                   options(future.plan = NULL)
[13:22:50.606]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:22:50.606]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:22:50.606]                 }
[13:22:50.606]                 ...future.workdir <- getwd()
[13:22:50.606]             }
[13:22:50.606]             ...future.oldOptions <- base::as.list(base::.Options)
[13:22:50.606]             ...future.oldEnvVars <- base::Sys.getenv()
[13:22:50.606]         }
[13:22:50.606]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:22:50.606]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:22:50.606]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:22:50.606]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:22:50.606]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:22:50.606]             future.stdout.windows.reencode = NULL, width = 80L)
[13:22:50.606]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:22:50.606]             base::names(...future.oldOptions))
[13:22:50.606]     }
[13:22:50.606]     if (FALSE) {
[13:22:50.606]     }
[13:22:50.606]     else {
[13:22:50.606]         if (TRUE) {
[13:22:50.606]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:22:50.606]                 open = "w")
[13:22:50.606]         }
[13:22:50.606]         else {
[13:22:50.606]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:22:50.606]                 windows = "NUL", "/dev/null"), open = "w")
[13:22:50.606]         }
[13:22:50.606]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:22:50.606]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:22:50.606]             base::sink(type = "output", split = FALSE)
[13:22:50.606]             base::close(...future.stdout)
[13:22:50.606]         }, add = TRUE)
[13:22:50.606]     }
[13:22:50.606]     ...future.frame <- base::sys.nframe()
[13:22:50.606]     ...future.conditions <- base::list()
[13:22:50.606]     ...future.rng <- base::globalenv()$.Random.seed
[13:22:50.606]     if (FALSE) {
[13:22:50.606]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:22:50.606]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:22:50.606]     }
[13:22:50.606]     ...future.result <- base::tryCatch({
[13:22:50.606]         base::withCallingHandlers({
[13:22:50.606]             ...future.value <- base::withVisible(base::local({
[13:22:50.606]                 withCallingHandlers({
[13:22:50.606]                   {
[13:22:50.606]                     42L
[13:22:50.606]                   }
[13:22:50.606]                 }, immediateCondition = function(cond) {
[13:22:50.606]                   save_rds <- function (object, pathname, ...) 
[13:22:50.606]                   {
[13:22:50.606]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[13:22:50.606]                     if (file_test("-f", pathname_tmp)) {
[13:22:50.606]                       fi_tmp <- file.info(pathname_tmp)
[13:22:50.606]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[13:22:50.606]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:22:50.606]                         fi_tmp[["mtime"]])
[13:22:50.606]                     }
[13:22:50.606]                     tryCatch({
[13:22:50.606]                       saveRDS(object, file = pathname_tmp, ...)
[13:22:50.606]                     }, error = function(ex) {
[13:22:50.606]                       msg <- conditionMessage(ex)
[13:22:50.606]                       fi_tmp <- file.info(pathname_tmp)
[13:22:50.606]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[13:22:50.606]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:22:50.606]                         fi_tmp[["mtime"]], msg)
[13:22:50.606]                       ex$message <- msg
[13:22:50.606]                       stop(ex)
[13:22:50.606]                     })
[13:22:50.606]                     stopifnot(file_test("-f", pathname_tmp))
[13:22:50.606]                     res <- file.rename(from = pathname_tmp, to = pathname)
[13:22:50.606]                     if (!res || file_test("-f", pathname_tmp)) {
[13:22:50.606]                       fi_tmp <- file.info(pathname_tmp)
[13:22:50.606]                       fi <- file.info(pathname)
[13:22:50.606]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[13:22:50.606]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:22:50.606]                         fi_tmp[["mtime"]], sQuote(pathname), 
[13:22:50.606]                         fi[["size"]], fi[["mtime"]])
[13:22:50.606]                       stop(msg)
[13:22:50.606]                     }
[13:22:50.606]                     invisible(pathname)
[13:22:50.606]                   }
[13:22:50.606]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[13:22:50.606]                     rootPath = tempdir()) 
[13:22:50.606]                   {
[13:22:50.606]                     obj <- list(time = Sys.time(), condition = cond)
[13:22:50.606]                     file <- tempfile(pattern = class(cond)[1], 
[13:22:50.606]                       tmpdir = path, fileext = ".rds")
[13:22:50.606]                     save_rds(obj, file)
[13:22:50.606]                   }
[13:22:50.606]                   saveImmediateCondition(cond, path = "/tmp/RtmpYwRlSa/.future/immediateConditions")
[13:22:50.606]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:22:50.606]                   {
[13:22:50.606]                     inherits <- base::inherits
[13:22:50.606]                     invokeRestart <- base::invokeRestart
[13:22:50.606]                     is.null <- base::is.null
[13:22:50.606]                     muffled <- FALSE
[13:22:50.606]                     if (inherits(cond, "message")) {
[13:22:50.606]                       muffled <- grepl(pattern, "muffleMessage")
[13:22:50.606]                       if (muffled) 
[13:22:50.606]                         invokeRestart("muffleMessage")
[13:22:50.606]                     }
[13:22:50.606]                     else if (inherits(cond, "warning")) {
[13:22:50.606]                       muffled <- grepl(pattern, "muffleWarning")
[13:22:50.606]                       if (muffled) 
[13:22:50.606]                         invokeRestart("muffleWarning")
[13:22:50.606]                     }
[13:22:50.606]                     else if (inherits(cond, "condition")) {
[13:22:50.606]                       if (!is.null(pattern)) {
[13:22:50.606]                         computeRestarts <- base::computeRestarts
[13:22:50.606]                         grepl <- base::grepl
[13:22:50.606]                         restarts <- computeRestarts(cond)
[13:22:50.606]                         for (restart in restarts) {
[13:22:50.606]                           name <- restart$name
[13:22:50.606]                           if (is.null(name)) 
[13:22:50.606]                             next
[13:22:50.606]                           if (!grepl(pattern, name)) 
[13:22:50.606]                             next
[13:22:50.606]                           invokeRestart(restart)
[13:22:50.606]                           muffled <- TRUE
[13:22:50.606]                           break
[13:22:50.606]                         }
[13:22:50.606]                       }
[13:22:50.606]                     }
[13:22:50.606]                     invisible(muffled)
[13:22:50.606]                   }
[13:22:50.606]                   muffleCondition(cond)
[13:22:50.606]                 })
[13:22:50.606]             }))
[13:22:50.606]             future::FutureResult(value = ...future.value$value, 
[13:22:50.606]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:22:50.606]                   ...future.rng), globalenv = if (FALSE) 
[13:22:50.606]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:22:50.606]                     ...future.globalenv.names))
[13:22:50.606]                 else NULL, started = ...future.startTime, version = "1.8")
[13:22:50.606]         }, condition = base::local({
[13:22:50.606]             c <- base::c
[13:22:50.606]             inherits <- base::inherits
[13:22:50.606]             invokeRestart <- base::invokeRestart
[13:22:50.606]             length <- base::length
[13:22:50.606]             list <- base::list
[13:22:50.606]             seq.int <- base::seq.int
[13:22:50.606]             signalCondition <- base::signalCondition
[13:22:50.606]             sys.calls <- base::sys.calls
[13:22:50.606]             `[[` <- base::`[[`
[13:22:50.606]             `+` <- base::`+`
[13:22:50.606]             `<<-` <- base::`<<-`
[13:22:50.606]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:22:50.606]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:22:50.606]                   3L)]
[13:22:50.606]             }
[13:22:50.606]             function(cond) {
[13:22:50.606]                 is_error <- inherits(cond, "error")
[13:22:50.606]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:22:50.606]                   NULL)
[13:22:50.606]                 if (is_error) {
[13:22:50.606]                   sessionInformation <- function() {
[13:22:50.606]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:22:50.606]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:22:50.606]                       search = base::search(), system = base::Sys.info())
[13:22:50.606]                   }
[13:22:50.606]                   ...future.conditions[[length(...future.conditions) + 
[13:22:50.606]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:22:50.606]                     cond$call), session = sessionInformation(), 
[13:22:50.606]                     timestamp = base::Sys.time(), signaled = 0L)
[13:22:50.606]                   signalCondition(cond)
[13:22:50.606]                 }
[13:22:50.606]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:22:50.606]                 "immediateCondition"))) {
[13:22:50.606]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:22:50.606]                   ...future.conditions[[length(...future.conditions) + 
[13:22:50.606]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:22:50.606]                   if (TRUE && !signal) {
[13:22:50.606]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:22:50.606]                     {
[13:22:50.606]                       inherits <- base::inherits
[13:22:50.606]                       invokeRestart <- base::invokeRestart
[13:22:50.606]                       is.null <- base::is.null
[13:22:50.606]                       muffled <- FALSE
[13:22:50.606]                       if (inherits(cond, "message")) {
[13:22:50.606]                         muffled <- grepl(pattern, "muffleMessage")
[13:22:50.606]                         if (muffled) 
[13:22:50.606]                           invokeRestart("muffleMessage")
[13:22:50.606]                       }
[13:22:50.606]                       else if (inherits(cond, "warning")) {
[13:22:50.606]                         muffled <- grepl(pattern, "muffleWarning")
[13:22:50.606]                         if (muffled) 
[13:22:50.606]                           invokeRestart("muffleWarning")
[13:22:50.606]                       }
[13:22:50.606]                       else if (inherits(cond, "condition")) {
[13:22:50.606]                         if (!is.null(pattern)) {
[13:22:50.606]                           computeRestarts <- base::computeRestarts
[13:22:50.606]                           grepl <- base::grepl
[13:22:50.606]                           restarts <- computeRestarts(cond)
[13:22:50.606]                           for (restart in restarts) {
[13:22:50.606]                             name <- restart$name
[13:22:50.606]                             if (is.null(name)) 
[13:22:50.606]                               next
[13:22:50.606]                             if (!grepl(pattern, name)) 
[13:22:50.606]                               next
[13:22:50.606]                             invokeRestart(restart)
[13:22:50.606]                             muffled <- TRUE
[13:22:50.606]                             break
[13:22:50.606]                           }
[13:22:50.606]                         }
[13:22:50.606]                       }
[13:22:50.606]                       invisible(muffled)
[13:22:50.606]                     }
[13:22:50.606]                     muffleCondition(cond, pattern = "^muffle")
[13:22:50.606]                   }
[13:22:50.606]                 }
[13:22:50.606]                 else {
[13:22:50.606]                   if (TRUE) {
[13:22:50.606]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:22:50.606]                     {
[13:22:50.606]                       inherits <- base::inherits
[13:22:50.606]                       invokeRestart <- base::invokeRestart
[13:22:50.606]                       is.null <- base::is.null
[13:22:50.606]                       muffled <- FALSE
[13:22:50.606]                       if (inherits(cond, "message")) {
[13:22:50.606]                         muffled <- grepl(pattern, "muffleMessage")
[13:22:50.606]                         if (muffled) 
[13:22:50.606]                           invokeRestart("muffleMessage")
[13:22:50.606]                       }
[13:22:50.606]                       else if (inherits(cond, "warning")) {
[13:22:50.606]                         muffled <- grepl(pattern, "muffleWarning")
[13:22:50.606]                         if (muffled) 
[13:22:50.606]                           invokeRestart("muffleWarning")
[13:22:50.606]                       }
[13:22:50.606]                       else if (inherits(cond, "condition")) {
[13:22:50.606]                         if (!is.null(pattern)) {
[13:22:50.606]                           computeRestarts <- base::computeRestarts
[13:22:50.606]                           grepl <- base::grepl
[13:22:50.606]                           restarts <- computeRestarts(cond)
[13:22:50.606]                           for (restart in restarts) {
[13:22:50.606]                             name <- restart$name
[13:22:50.606]                             if (is.null(name)) 
[13:22:50.606]                               next
[13:22:50.606]                             if (!grepl(pattern, name)) 
[13:22:50.606]                               next
[13:22:50.606]                             invokeRestart(restart)
[13:22:50.606]                             muffled <- TRUE
[13:22:50.606]                             break
[13:22:50.606]                           }
[13:22:50.606]                         }
[13:22:50.606]                       }
[13:22:50.606]                       invisible(muffled)
[13:22:50.606]                     }
[13:22:50.606]                     muffleCondition(cond, pattern = "^muffle")
[13:22:50.606]                   }
[13:22:50.606]                 }
[13:22:50.606]             }
[13:22:50.606]         }))
[13:22:50.606]     }, error = function(ex) {
[13:22:50.606]         base::structure(base::list(value = NULL, visible = NULL, 
[13:22:50.606]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:22:50.606]                 ...future.rng), started = ...future.startTime, 
[13:22:50.606]             finished = Sys.time(), session_uuid = NA_character_, 
[13:22:50.606]             version = "1.8"), class = "FutureResult")
[13:22:50.606]     }, finally = {
[13:22:50.606]         if (!identical(...future.workdir, getwd())) 
[13:22:50.606]             setwd(...future.workdir)
[13:22:50.606]         {
[13:22:50.606]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:22:50.606]                 ...future.oldOptions$nwarnings <- NULL
[13:22:50.606]             }
[13:22:50.606]             base::options(...future.oldOptions)
[13:22:50.606]             if (.Platform$OS.type == "windows") {
[13:22:50.606]                 old_names <- names(...future.oldEnvVars)
[13:22:50.606]                 envs <- base::Sys.getenv()
[13:22:50.606]                 names <- names(envs)
[13:22:50.606]                 common <- intersect(names, old_names)
[13:22:50.606]                 added <- setdiff(names, old_names)
[13:22:50.606]                 removed <- setdiff(old_names, names)
[13:22:50.606]                 changed <- common[...future.oldEnvVars[common] != 
[13:22:50.606]                   envs[common]]
[13:22:50.606]                 NAMES <- toupper(changed)
[13:22:50.606]                 args <- list()
[13:22:50.606]                 for (kk in seq_along(NAMES)) {
[13:22:50.606]                   name <- changed[[kk]]
[13:22:50.606]                   NAME <- NAMES[[kk]]
[13:22:50.606]                   if (name != NAME && is.element(NAME, old_names)) 
[13:22:50.606]                     next
[13:22:50.606]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:22:50.606]                 }
[13:22:50.606]                 NAMES <- toupper(added)
[13:22:50.606]                 for (kk in seq_along(NAMES)) {
[13:22:50.606]                   name <- added[[kk]]
[13:22:50.606]                   NAME <- NAMES[[kk]]
[13:22:50.606]                   if (name != NAME && is.element(NAME, old_names)) 
[13:22:50.606]                     next
[13:22:50.606]                   args[[name]] <- ""
[13:22:50.606]                 }
[13:22:50.606]                 NAMES <- toupper(removed)
[13:22:50.606]                 for (kk in seq_along(NAMES)) {
[13:22:50.606]                   name <- removed[[kk]]
[13:22:50.606]                   NAME <- NAMES[[kk]]
[13:22:50.606]                   if (name != NAME && is.element(NAME, old_names)) 
[13:22:50.606]                     next
[13:22:50.606]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:22:50.606]                 }
[13:22:50.606]                 if (length(args) > 0) 
[13:22:50.606]                   base::do.call(base::Sys.setenv, args = args)
[13:22:50.606]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:22:50.606]             }
[13:22:50.606]             else {
[13:22:50.606]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:22:50.606]             }
[13:22:50.606]             {
[13:22:50.606]                 if (base::length(...future.futureOptionsAdded) > 
[13:22:50.606]                   0L) {
[13:22:50.606]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:22:50.606]                   base::names(opts) <- ...future.futureOptionsAdded
[13:22:50.606]                   base::options(opts)
[13:22:50.606]                 }
[13:22:50.606]                 {
[13:22:50.606]                   {
[13:22:50.606]                     base::options(mc.cores = ...future.mc.cores.old)
[13:22:50.606]                     NULL
[13:22:50.606]                   }
[13:22:50.606]                   options(future.plan = NULL)
[13:22:50.606]                   if (is.na(NA_character_)) 
[13:22:50.606]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:22:50.606]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:22:50.606]                   future::plan(list(function (...) 
[13:22:50.606]                   {
[13:22:50.606]                     Future(1)
[13:22:50.606]                   }), .cleanup = FALSE, .init = FALSE)
[13:22:50.606]                 }
[13:22:50.606]             }
[13:22:50.606]         }
[13:22:50.606]     })
[13:22:50.606]     if (TRUE) {
[13:22:50.606]         base::sink(type = "output", split = FALSE)
[13:22:50.606]         if (TRUE) {
[13:22:50.606]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:22:50.606]         }
[13:22:50.606]         else {
[13:22:50.606]             ...future.result["stdout"] <- base::list(NULL)
[13:22:50.606]         }
[13:22:50.606]         base::close(...future.stdout)
[13:22:50.606]         ...future.stdout <- NULL
[13:22:50.606]     }
[13:22:50.606]     ...future.result$conditions <- ...future.conditions
[13:22:50.606]     ...future.result$finished <- base::Sys.time()
[13:22:50.606]     ...future.result
[13:22:50.606] }
[13:22:50.609] requestCore(): workers = 2
[13:22:50.612] MulticoreFuture started
[13:22:50.613] plan(): Setting new future strategy stack:
[13:22:50.613] List of future strategies:
[13:22:50.613] 1. sequential:
[13:22:50.613]    - args: function (..., envir = parent.frame())
[13:22:50.613]    - tweaked: FALSE
[13:22:50.613]    - call: NULL
[13:22:50.614] result() for MulticoreFuture ...
[13:22:50.614] plan(): nbrOfWorkers() = 1
[13:22:50.616] plan(): Setting new future strategy stack:
[13:22:50.616] List of future strategies:
[13:22:50.616] 1. future:
[13:22:50.616]    - args: function (...)
[13:22:50.616]    - tweaked: FALSE
[13:22:50.616]    - call: plan(foo)
[13:22:50.617] plan(): nbrOfWorkers() = Inf
[13:22:50.618] result() for MulticoreFuture ...
[13:22:50.618] result() for MulticoreFuture ... done
[13:22:50.618] result() for MulticoreFuture ... done
[13:22:50.618] result() for MulticoreFuture ...
[13:22:50.619] result() for MulticoreFuture ... done
[1] 42
[13:22:50.620] getGlobalsAndPackages() ...
[13:22:50.620] 
[13:22:50.620] - globals: [0] <none>
[13:22:50.620] getGlobalsAndPackages() ... DONE
[13:22:50.621] Packages needed by the future expression (n = 0): <none>
[13:22:50.621] Packages needed by future strategies (n = 0): <none>
[13:22:50.622] {
[13:22:50.622]     {
[13:22:50.622]         {
[13:22:50.622]             ...future.startTime <- base::Sys.time()
[13:22:50.622]             {
[13:22:50.622]                 {
[13:22:50.622]                   {
[13:22:50.622]                     {
[13:22:50.622]                       base::local({
[13:22:50.622]                         has_future <- base::requireNamespace("future", 
[13:22:50.622]                           quietly = TRUE)
[13:22:50.622]                         if (has_future) {
[13:22:50.622]                           ns <- base::getNamespace("future")
[13:22:50.622]                           version <- ns[[".package"]][["version"]]
[13:22:50.622]                           if (is.null(version)) 
[13:22:50.622]                             version <- utils::packageVersion("future")
[13:22:50.622]                         }
[13:22:50.622]                         else {
[13:22:50.622]                           version <- NULL
[13:22:50.622]                         }
[13:22:50.622]                         if (!has_future || version < "1.8.0") {
[13:22:50.622]                           info <- base::c(r_version = base::gsub("R version ", 
[13:22:50.622]                             "", base::R.version$version.string), 
[13:22:50.622]                             platform = base::sprintf("%s (%s-bit)", 
[13:22:50.622]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:22:50.622]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:22:50.622]                               "release", "version")], collapse = " "), 
[13:22:50.622]                             hostname = base::Sys.info()[["nodename"]])
[13:22:50.622]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:22:50.622]                             info)
[13:22:50.622]                           info <- base::paste(info, collapse = "; ")
[13:22:50.622]                           if (!has_future) {
[13:22:50.622]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:22:50.622]                               info)
[13:22:50.622]                           }
[13:22:50.622]                           else {
[13:22:50.622]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:22:50.622]                               info, version)
[13:22:50.622]                           }
[13:22:50.622]                           base::stop(msg)
[13:22:50.622]                         }
[13:22:50.622]                       })
[13:22:50.622]                     }
[13:22:50.622]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[13:22:50.622]                     base::options(mc.cores = 1L)
[13:22:50.622]                   }
[13:22:50.622]                   options(future.plan = NULL)
[13:22:50.622]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:22:50.622]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:22:50.622]                 }
[13:22:50.622]                 ...future.workdir <- getwd()
[13:22:50.622]             }
[13:22:50.622]             ...future.oldOptions <- base::as.list(base::.Options)
[13:22:50.622]             ...future.oldEnvVars <- base::Sys.getenv()
[13:22:50.622]         }
[13:22:50.622]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:22:50.622]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:22:50.622]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:22:50.622]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:22:50.622]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:22:50.622]             future.stdout.windows.reencode = NULL, width = 80L)
[13:22:50.622]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:22:50.622]             base::names(...future.oldOptions))
[13:22:50.622]     }
[13:22:50.622]     if (FALSE) {
[13:22:50.622]     }
[13:22:50.622]     else {
[13:22:50.622]         if (TRUE) {
[13:22:50.622]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:22:50.622]                 open = "w")
[13:22:50.622]         }
[13:22:50.622]         else {
[13:22:50.622]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:22:50.622]                 windows = "NUL", "/dev/null"), open = "w")
[13:22:50.622]         }
[13:22:50.622]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:22:50.622]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:22:50.622]             base::sink(type = "output", split = FALSE)
[13:22:50.622]             base::close(...future.stdout)
[13:22:50.622]         }, add = TRUE)
[13:22:50.622]     }
[13:22:50.622]     ...future.frame <- base::sys.nframe()
[13:22:50.622]     ...future.conditions <- base::list()
[13:22:50.622]     ...future.rng <- base::globalenv()$.Random.seed
[13:22:50.622]     if (FALSE) {
[13:22:50.622]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:22:50.622]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:22:50.622]     }
[13:22:50.622]     ...future.result <- base::tryCatch({
[13:22:50.622]         base::withCallingHandlers({
[13:22:50.622]             ...future.value <- base::withVisible(base::local({
[13:22:50.622]                 withCallingHandlers({
[13:22:50.622]                   {
[13:22:50.622]                     42L
[13:22:50.622]                   }
[13:22:50.622]                 }, immediateCondition = function(cond) {
[13:22:50.622]                   save_rds <- function (object, pathname, ...) 
[13:22:50.622]                   {
[13:22:50.622]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[13:22:50.622]                     if (file_test("-f", pathname_tmp)) {
[13:22:50.622]                       fi_tmp <- file.info(pathname_tmp)
[13:22:50.622]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[13:22:50.622]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:22:50.622]                         fi_tmp[["mtime"]])
[13:22:50.622]                     }
[13:22:50.622]                     tryCatch({
[13:22:50.622]                       saveRDS(object, file = pathname_tmp, ...)
[13:22:50.622]                     }, error = function(ex) {
[13:22:50.622]                       msg <- conditionMessage(ex)
[13:22:50.622]                       fi_tmp <- file.info(pathname_tmp)
[13:22:50.622]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[13:22:50.622]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:22:50.622]                         fi_tmp[["mtime"]], msg)
[13:22:50.622]                       ex$message <- msg
[13:22:50.622]                       stop(ex)
[13:22:50.622]                     })
[13:22:50.622]                     stopifnot(file_test("-f", pathname_tmp))
[13:22:50.622]                     res <- file.rename(from = pathname_tmp, to = pathname)
[13:22:50.622]                     if (!res || file_test("-f", pathname_tmp)) {
[13:22:50.622]                       fi_tmp <- file.info(pathname_tmp)
[13:22:50.622]                       fi <- file.info(pathname)
[13:22:50.622]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[13:22:50.622]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:22:50.622]                         fi_tmp[["mtime"]], sQuote(pathname), 
[13:22:50.622]                         fi[["size"]], fi[["mtime"]])
[13:22:50.622]                       stop(msg)
[13:22:50.622]                     }
[13:22:50.622]                     invisible(pathname)
[13:22:50.622]                   }
[13:22:50.622]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[13:22:50.622]                     rootPath = tempdir()) 
[13:22:50.622]                   {
[13:22:50.622]                     obj <- list(time = Sys.time(), condition = cond)
[13:22:50.622]                     file <- tempfile(pattern = class(cond)[1], 
[13:22:50.622]                       tmpdir = path, fileext = ".rds")
[13:22:50.622]                     save_rds(obj, file)
[13:22:50.622]                   }
[13:22:50.622]                   saveImmediateCondition(cond, path = "/tmp/RtmpYwRlSa/.future/immediateConditions")
[13:22:50.622]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:22:50.622]                   {
[13:22:50.622]                     inherits <- base::inherits
[13:22:50.622]                     invokeRestart <- base::invokeRestart
[13:22:50.622]                     is.null <- base::is.null
[13:22:50.622]                     muffled <- FALSE
[13:22:50.622]                     if (inherits(cond, "message")) {
[13:22:50.622]                       muffled <- grepl(pattern, "muffleMessage")
[13:22:50.622]                       if (muffled) 
[13:22:50.622]                         invokeRestart("muffleMessage")
[13:22:50.622]                     }
[13:22:50.622]                     else if (inherits(cond, "warning")) {
[13:22:50.622]                       muffled <- grepl(pattern, "muffleWarning")
[13:22:50.622]                       if (muffled) 
[13:22:50.622]                         invokeRestart("muffleWarning")
[13:22:50.622]                     }
[13:22:50.622]                     else if (inherits(cond, "condition")) {
[13:22:50.622]                       if (!is.null(pattern)) {
[13:22:50.622]                         computeRestarts <- base::computeRestarts
[13:22:50.622]                         grepl <- base::grepl
[13:22:50.622]                         restarts <- computeRestarts(cond)
[13:22:50.622]                         for (restart in restarts) {
[13:22:50.622]                           name <- restart$name
[13:22:50.622]                           if (is.null(name)) 
[13:22:50.622]                             next
[13:22:50.622]                           if (!grepl(pattern, name)) 
[13:22:50.622]                             next
[13:22:50.622]                           invokeRestart(restart)
[13:22:50.622]                           muffled <- TRUE
[13:22:50.622]                           break
[13:22:50.622]                         }
[13:22:50.622]                       }
[13:22:50.622]                     }
[13:22:50.622]                     invisible(muffled)
[13:22:50.622]                   }
[13:22:50.622]                   muffleCondition(cond)
[13:22:50.622]                 })
[13:22:50.622]             }))
[13:22:50.622]             future::FutureResult(value = ...future.value$value, 
[13:22:50.622]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:22:50.622]                   ...future.rng), globalenv = if (FALSE) 
[13:22:50.622]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:22:50.622]                     ...future.globalenv.names))
[13:22:50.622]                 else NULL, started = ...future.startTime, version = "1.8")
[13:22:50.622]         }, condition = base::local({
[13:22:50.622]             c <- base::c
[13:22:50.622]             inherits <- base::inherits
[13:22:50.622]             invokeRestart <- base::invokeRestart
[13:22:50.622]             length <- base::length
[13:22:50.622]             list <- base::list
[13:22:50.622]             seq.int <- base::seq.int
[13:22:50.622]             signalCondition <- base::signalCondition
[13:22:50.622]             sys.calls <- base::sys.calls
[13:22:50.622]             `[[` <- base::`[[`
[13:22:50.622]             `+` <- base::`+`
[13:22:50.622]             `<<-` <- base::`<<-`
[13:22:50.622]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:22:50.622]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:22:50.622]                   3L)]
[13:22:50.622]             }
[13:22:50.622]             function(cond) {
[13:22:50.622]                 is_error <- inherits(cond, "error")
[13:22:50.622]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:22:50.622]                   NULL)
[13:22:50.622]                 if (is_error) {
[13:22:50.622]                   sessionInformation <- function() {
[13:22:50.622]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:22:50.622]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:22:50.622]                       search = base::search(), system = base::Sys.info())
[13:22:50.622]                   }
[13:22:50.622]                   ...future.conditions[[length(...future.conditions) + 
[13:22:50.622]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:22:50.622]                     cond$call), session = sessionInformation(), 
[13:22:50.622]                     timestamp = base::Sys.time(), signaled = 0L)
[13:22:50.622]                   signalCondition(cond)
[13:22:50.622]                 }
[13:22:50.622]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:22:50.622]                 "immediateCondition"))) {
[13:22:50.622]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:22:50.622]                   ...future.conditions[[length(...future.conditions) + 
[13:22:50.622]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:22:50.622]                   if (TRUE && !signal) {
[13:22:50.622]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:22:50.622]                     {
[13:22:50.622]                       inherits <- base::inherits
[13:22:50.622]                       invokeRestart <- base::invokeRestart
[13:22:50.622]                       is.null <- base::is.null
[13:22:50.622]                       muffled <- FALSE
[13:22:50.622]                       if (inherits(cond, "message")) {
[13:22:50.622]                         muffled <- grepl(pattern, "muffleMessage")
[13:22:50.622]                         if (muffled) 
[13:22:50.622]                           invokeRestart("muffleMessage")
[13:22:50.622]                       }
[13:22:50.622]                       else if (inherits(cond, "warning")) {
[13:22:50.622]                         muffled <- grepl(pattern, "muffleWarning")
[13:22:50.622]                         if (muffled) 
[13:22:50.622]                           invokeRestart("muffleWarning")
[13:22:50.622]                       }
[13:22:50.622]                       else if (inherits(cond, "condition")) {
[13:22:50.622]                         if (!is.null(pattern)) {
[13:22:50.622]                           computeRestarts <- base::computeRestarts
[13:22:50.622]                           grepl <- base::grepl
[13:22:50.622]                           restarts <- computeRestarts(cond)
[13:22:50.622]                           for (restart in restarts) {
[13:22:50.622]                             name <- restart$name
[13:22:50.622]                             if (is.null(name)) 
[13:22:50.622]                               next
[13:22:50.622]                             if (!grepl(pattern, name)) 
[13:22:50.622]                               next
[13:22:50.622]                             invokeRestart(restart)
[13:22:50.622]                             muffled <- TRUE
[13:22:50.622]                             break
[13:22:50.622]                           }
[13:22:50.622]                         }
[13:22:50.622]                       }
[13:22:50.622]                       invisible(muffled)
[13:22:50.622]                     }
[13:22:50.622]                     muffleCondition(cond, pattern = "^muffle")
[13:22:50.622]                   }
[13:22:50.622]                 }
[13:22:50.622]                 else {
[13:22:50.622]                   if (TRUE) {
[13:22:50.622]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:22:50.622]                     {
[13:22:50.622]                       inherits <- base::inherits
[13:22:50.622]                       invokeRestart <- base::invokeRestart
[13:22:50.622]                       is.null <- base::is.null
[13:22:50.622]                       muffled <- FALSE
[13:22:50.622]                       if (inherits(cond, "message")) {
[13:22:50.622]                         muffled <- grepl(pattern, "muffleMessage")
[13:22:50.622]                         if (muffled) 
[13:22:50.622]                           invokeRestart("muffleMessage")
[13:22:50.622]                       }
[13:22:50.622]                       else if (inherits(cond, "warning")) {
[13:22:50.622]                         muffled <- grepl(pattern, "muffleWarning")
[13:22:50.622]                         if (muffled) 
[13:22:50.622]                           invokeRestart("muffleWarning")
[13:22:50.622]                       }
[13:22:50.622]                       else if (inherits(cond, "condition")) {
[13:22:50.622]                         if (!is.null(pattern)) {
[13:22:50.622]                           computeRestarts <- base::computeRestarts
[13:22:50.622]                           grepl <- base::grepl
[13:22:50.622]                           restarts <- computeRestarts(cond)
[13:22:50.622]                           for (restart in restarts) {
[13:22:50.622]                             name <- restart$name
[13:22:50.622]                             if (is.null(name)) 
[13:22:50.622]                               next
[13:22:50.622]                             if (!grepl(pattern, name)) 
[13:22:50.622]                               next
[13:22:50.622]                             invokeRestart(restart)
[13:22:50.622]                             muffled <- TRUE
[13:22:50.622]                             break
[13:22:50.622]                           }
[13:22:50.622]                         }
[13:22:50.622]                       }
[13:22:50.622]                       invisible(muffled)
[13:22:50.622]                     }
[13:22:50.622]                     muffleCondition(cond, pattern = "^muffle")
[13:22:50.622]                   }
[13:22:50.622]                 }
[13:22:50.622]             }
[13:22:50.622]         }))
[13:22:50.622]     }, error = function(ex) {
[13:22:50.622]         base::structure(base::list(value = NULL, visible = NULL, 
[13:22:50.622]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:22:50.622]                 ...future.rng), started = ...future.startTime, 
[13:22:50.622]             finished = Sys.time(), session_uuid = NA_character_, 
[13:22:50.622]             version = "1.8"), class = "FutureResult")
[13:22:50.622]     }, finally = {
[13:22:50.622]         if (!identical(...future.workdir, getwd())) 
[13:22:50.622]             setwd(...future.workdir)
[13:22:50.622]         {
[13:22:50.622]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:22:50.622]                 ...future.oldOptions$nwarnings <- NULL
[13:22:50.622]             }
[13:22:50.622]             base::options(...future.oldOptions)
[13:22:50.622]             if (.Platform$OS.type == "windows") {
[13:22:50.622]                 old_names <- names(...future.oldEnvVars)
[13:22:50.622]                 envs <- base::Sys.getenv()
[13:22:50.622]                 names <- names(envs)
[13:22:50.622]                 common <- intersect(names, old_names)
[13:22:50.622]                 added <- setdiff(names, old_names)
[13:22:50.622]                 removed <- setdiff(old_names, names)
[13:22:50.622]                 changed <- common[...future.oldEnvVars[common] != 
[13:22:50.622]                   envs[common]]
[13:22:50.622]                 NAMES <- toupper(changed)
[13:22:50.622]                 args <- list()
[13:22:50.622]                 for (kk in seq_along(NAMES)) {
[13:22:50.622]                   name <- changed[[kk]]
[13:22:50.622]                   NAME <- NAMES[[kk]]
[13:22:50.622]                   if (name != NAME && is.element(NAME, old_names)) 
[13:22:50.622]                     next
[13:22:50.622]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:22:50.622]                 }
[13:22:50.622]                 NAMES <- toupper(added)
[13:22:50.622]                 for (kk in seq_along(NAMES)) {
[13:22:50.622]                   name <- added[[kk]]
[13:22:50.622]                   NAME <- NAMES[[kk]]
[13:22:50.622]                   if (name != NAME && is.element(NAME, old_names)) 
[13:22:50.622]                     next
[13:22:50.622]                   args[[name]] <- ""
[13:22:50.622]                 }
[13:22:50.622]                 NAMES <- toupper(removed)
[13:22:50.622]                 for (kk in seq_along(NAMES)) {
[13:22:50.622]                   name <- removed[[kk]]
[13:22:50.622]                   NAME <- NAMES[[kk]]
[13:22:50.622]                   if (name != NAME && is.element(NAME, old_names)) 
[13:22:50.622]                     next
[13:22:50.622]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:22:50.622]                 }
[13:22:50.622]                 if (length(args) > 0) 
[13:22:50.622]                   base::do.call(base::Sys.setenv, args = args)
[13:22:50.622]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:22:50.622]             }
[13:22:50.622]             else {
[13:22:50.622]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:22:50.622]             }
[13:22:50.622]             {
[13:22:50.622]                 if (base::length(...future.futureOptionsAdded) > 
[13:22:50.622]                   0L) {
[13:22:50.622]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:22:50.622]                   base::names(opts) <- ...future.futureOptionsAdded
[13:22:50.622]                   base::options(opts)
[13:22:50.622]                 }
[13:22:50.622]                 {
[13:22:50.622]                   {
[13:22:50.622]                     base::options(mc.cores = ...future.mc.cores.old)
[13:22:50.622]                     NULL
[13:22:50.622]                   }
[13:22:50.622]                   options(future.plan = NULL)
[13:22:50.622]                   if (is.na(NA_character_)) 
[13:22:50.622]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:22:50.622]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:22:50.622]                   future::plan(list(function (...) 
[13:22:50.622]                   {
[13:22:50.622]                     Future(1)
[13:22:50.622]                   }), .cleanup = FALSE, .init = FALSE)
[13:22:50.622]                 }
[13:22:50.622]             }
[13:22:50.622]         }
[13:22:50.622]     })
[13:22:50.622]     if (TRUE) {
[13:22:50.622]         base::sink(type = "output", split = FALSE)
[13:22:50.622]         if (TRUE) {
[13:22:50.622]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:22:50.622]         }
[13:22:50.622]         else {
[13:22:50.622]             ...future.result["stdout"] <- base::list(NULL)
[13:22:50.622]         }
[13:22:50.622]         base::close(...future.stdout)
[13:22:50.622]         ...future.stdout <- NULL
[13:22:50.622]     }
[13:22:50.622]     ...future.result$conditions <- ...future.conditions
[13:22:50.622]     ...future.result$finished <- base::Sys.time()
[13:22:50.622]     ...future.result
[13:22:50.622] }
[13:22:50.624] requestCore(): workers = 2
[13:22:50.627] MulticoreFuture started
[13:22:50.628] result() for MulticoreFuture ...
[13:22:50.628] plan(): Setting new future strategy stack:
[13:22:50.628] List of future strategies:
[13:22:50.628] 1. sequential:
[13:22:50.628]    - args: function (..., envir = parent.frame())
[13:22:50.628]    - tweaked: FALSE
[13:22:50.628]    - call: NULL
[13:22:50.629] plan(): nbrOfWorkers() = 1
[13:22:50.631] plan(): Setting new future strategy stack:
[13:22:50.631] List of future strategies:
[13:22:50.631] 1. future:
[13:22:50.631]    - args: function (...)
[13:22:50.631]    - tweaked: FALSE
[13:22:50.631]    - call: plan(foo)
[13:22:50.632] plan(): nbrOfWorkers() = Inf
[13:22:50.633] result() for MulticoreFuture ...
[13:22:50.633] result() for MulticoreFuture ... done
[13:22:50.633] result() for MulticoreFuture ... done
[13:22:50.633] result() for MulticoreFuture ...
[13:22:50.633] result() for MulticoreFuture ... done
[1] 42
> 
> message("*** Future class - exception ... DONE")
*** Future class - exception ... DONE
> 
> message("*** Future class ... DONE")
*** Future class ... DONE
> 
> source("incl/end.R")
[13:22:50.634] plan(): Setting new future strategy stack:
[13:22:50.635] List of future strategies:
[13:22:50.635] 1. FutureStrategy:
[13:22:50.635]    - args: function (..., envir = parent.frame())
[13:22:50.635]    - tweaked: FALSE
[13:22:50.635]    - call: future::plan(oplan)
[13:22:50.636] plan(): nbrOfWorkers() = 1
> 
