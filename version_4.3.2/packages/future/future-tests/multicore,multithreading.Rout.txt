
R version 4.3.2 (2023-10-31) -- "Eye Holes"
Copyright (C) 2023 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> source("incl/start.R")
[16:05:18.541] plan(): Setting new future strategy stack:
[16:05:18.542] List of future strategies:
[16:05:18.542] 1. sequential:
[16:05:18.542]    - args: function (..., envir = parent.frame())
[16:05:18.542]    - tweaked: FALSE
[16:05:18.542]    - call: future::plan("sequential")
[16:05:18.556] plan(): nbrOfWorkers() = 1
> library("listenv")
> plan(multicore)
[16:05:18.568] plan(): Setting new future strategy stack:
[16:05:18.568] List of future strategies:
[16:05:18.568] 1. multicore:
[16:05:18.568]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[16:05:18.568]    - tweaked: FALSE
[16:05:18.568]    - call: plan(multicore)
[16:05:18.582] plan(): nbrOfWorkers() = 2
> 
> message("*** multicore() and multi-threading ...")
*** multicore() and multi-threading ...
> 
> message("supportsMulticore(): ", sQuote(supportsMulticore()))
supportsMulticore(): ‘TRUE’
> message("availableCores('multicore'): ", sQuote(availableCores("multicore")))
availableCores('multicore'): ‘2’
> message("supports_omp_threads(): ", sQuote(supports_omp_threads()))
[16:05:18.587] supports_omp_threads() = TRUE
supports_omp_threads(): ‘TRUE’
> 
> if (requireNamespace("RhpcBLASctl", quietly = TRUE)) {
+   message("Checking RhpcBLASctl capabilities ...")
+   nthreads_0 <- RhpcBLASctl::omp_get_max_threads()
+   utils::str(list(nthreads_0 = nthreads_0))
+   message("- Number of OpenMP threads: ", sQuote(nthreads_0))
+   
+   message("- Trying to set number of OpenMP threads to one")
+   try(RhpcBLASctl::omp_set_num_threads(1L))
+   nthreads_1 <- RhpcBLASctl::omp_get_max_threads()
+   utils::str(list(nthreads_1 = nthreads_1))
+   message("  - Number of OpenMP threads: ", sQuote(nthreads_1))
+   try(RhpcBLASctl::omp_set_num_threads(nthreads_0))
+ 
+   f <- future(RhpcBLASctl::omp_get_max_threads())
+   nthreads_child <- value(f)
+   utils::str(list(nthreads_child = nthreads_child))
+   message(sprintf("  - Number of OpenMP threads in %s future: %s", sQuote(class(f)[1]), sQuote(nthreads_child)))
+ 
+   nthreads_children <- parallel::mclapply(1:2, FUN = function(x) {
+     RhpcBLASctl::omp_get_max_threads()
+   })
+   utils::str(list(nthreads_children = nthreads_children))
+   message("  - Number of OpenMP threads in mclapply(): ", sQuote(nthreads_children[[1]]))
+ 
+   message("- Trying to reset number of OpenMP threads")
+   nthreads_2 <- RhpcBLASctl::omp_get_max_threads()
+   utils::str(list(nthreads_2 = nthreads_2))
+   message("  - Number of OpenMP threads: ", sQuote(nthreads_2))
+   stopifnot(identical(nthreads_2, nthreads_0))
+   message("Checking RhpcBLASctl capabilities ... done")
+ }
Checking RhpcBLASctl capabilities ...
List of 1
 $ nthreads_0: int 4
- Number of OpenMP threads: ‘4’
- Trying to set number of OpenMP threads to one
List of 1
 $ nthreads_1: int 1
  - Number of OpenMP threads: ‘1’
[16:05:18.593] getGlobalsAndPackages() ...
[16:05:18.593] Searching for globals...
[16:05:18.597] - globals found: [1] ‘::’
[16:05:18.597] Searching for globals ... DONE
[16:05:18.597] Resolving globals: FALSE
[16:05:18.598] 
[16:05:18.598] 
[16:05:18.598] getGlobalsAndPackages() ... DONE
[16:05:18.599] run() for ‘Future’ ...
[16:05:18.599] - state: ‘created’
[16:05:18.599] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[16:05:18.602] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[16:05:18.603] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[16:05:18.603]   - Field: ‘label’
[16:05:18.603]   - Field: ‘local’
[16:05:18.603]   - Field: ‘owner’
[16:05:18.603]   - Field: ‘envir’
[16:05:18.603]   - Field: ‘workers’
[16:05:18.603]   - Field: ‘packages’
[16:05:18.603]   - Field: ‘gc’
[16:05:18.603]   - Field: ‘job’
[16:05:18.603]   - Field: ‘conditions’
[16:05:18.604]   - Field: ‘expr’
[16:05:18.604]   - Field: ‘uuid’
[16:05:18.604]   - Field: ‘seed’
[16:05:18.606]   - Field: ‘version’
[16:05:18.606]   - Field: ‘result’
[16:05:18.606]   - Field: ‘asynchronous’
[16:05:18.606]   - Field: ‘calls’
[16:05:18.606]   - Field: ‘globals’
[16:05:18.606]   - Field: ‘stdout’
[16:05:18.606]   - Field: ‘earlySignal’
[16:05:18.606]   - Field: ‘lazy’
[16:05:18.607]   - Field: ‘state’
[16:05:18.607] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[16:05:18.607] - Launch lazy future ...
[16:05:18.608] Packages needed by the future expression (n = 0): <none>
[16:05:18.608] Packages needed by future strategies (n = 0): <none>
[16:05:18.609] {
[16:05:18.609]     {
[16:05:18.609]         {
[16:05:18.609]             ...future.startTime <- base::Sys.time()
[16:05:18.609]             {
[16:05:18.609]                 {
[16:05:18.609]                   {
[16:05:18.609]                     {
[16:05:18.609]                       base::local({
[16:05:18.609]                         has_future <- base::requireNamespace("future", 
[16:05:18.609]                           quietly = TRUE)
[16:05:18.609]                         if (has_future) {
[16:05:18.609]                           ns <- base::getNamespace("future")
[16:05:18.609]                           version <- ns[[".package"]][["version"]]
[16:05:18.609]                           if (is.null(version)) 
[16:05:18.609]                             version <- utils::packageVersion("future")
[16:05:18.609]                         }
[16:05:18.609]                         else {
[16:05:18.609]                           version <- NULL
[16:05:18.609]                         }
[16:05:18.609]                         if (!has_future || version < "1.8.0") {
[16:05:18.609]                           info <- base::c(r_version = base::gsub("R version ", 
[16:05:18.609]                             "", base::R.version$version.string), 
[16:05:18.609]                             platform = base::sprintf("%s (%s-bit)", 
[16:05:18.609]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:05:18.609]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[16:05:18.609]                               "release", "version")], collapse = " "), 
[16:05:18.609]                             hostname = base::Sys.info()[["nodename"]])
[16:05:18.609]                           info <- base::sprintf("%s: %s", base::names(info), 
[16:05:18.609]                             info)
[16:05:18.609]                           info <- base::paste(info, collapse = "; ")
[16:05:18.609]                           if (!has_future) {
[16:05:18.609]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:05:18.609]                               info)
[16:05:18.609]                           }
[16:05:18.609]                           else {
[16:05:18.609]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:05:18.609]                               info, version)
[16:05:18.609]                           }
[16:05:18.609]                           base::stop(msg)
[16:05:18.609]                         }
[16:05:18.609]                       })
[16:05:18.609]                     }
[16:05:18.609]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[16:05:18.609]                     base::options(mc.cores = 1L)
[16:05:18.609]                   }
[16:05:18.609]                   options(future.plan = NULL)
[16:05:18.609]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:05:18.609]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:05:18.609]                 }
[16:05:18.609]                 ...future.workdir <- getwd()
[16:05:18.609]             }
[16:05:18.609]             ...future.oldOptions <- base::as.list(base::.Options)
[16:05:18.609]             ...future.oldEnvVars <- base::Sys.getenv()
[16:05:18.609]         }
[16:05:18.609]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:05:18.609]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:05:18.609]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:05:18.609]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:05:18.609]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:05:18.609]             future.stdout.windows.reencode = NULL, width = 80L)
[16:05:18.609]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:05:18.609]             base::names(...future.oldOptions))
[16:05:18.609]     }
[16:05:18.609]     if (FALSE) {
[16:05:18.609]     }
[16:05:18.609]     else {
[16:05:18.609]         if (TRUE) {
[16:05:18.609]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:05:18.609]                 open = "w")
[16:05:18.609]         }
[16:05:18.609]         else {
[16:05:18.609]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:05:18.609]                 windows = "NUL", "/dev/null"), open = "w")
[16:05:18.609]         }
[16:05:18.609]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:05:18.609]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:05:18.609]             base::sink(type = "output", split = FALSE)
[16:05:18.609]             base::close(...future.stdout)
[16:05:18.609]         }, add = TRUE)
[16:05:18.609]     }
[16:05:18.609]     ...future.frame <- base::sys.nframe()
[16:05:18.609]     ...future.conditions <- base::list()
[16:05:18.609]     ...future.rng <- base::globalenv()$.Random.seed
[16:05:18.609]     if (FALSE) {
[16:05:18.609]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:05:18.609]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:05:18.609]     }
[16:05:18.609]     ...future.result <- base::tryCatch({
[16:05:18.609]         base::withCallingHandlers({
[16:05:18.609]             ...future.value <- base::withVisible(base::local({
[16:05:18.609]                 withCallingHandlers({
[16:05:18.609]                   RhpcBLASctl::omp_get_max_threads()
[16:05:18.609]                 }, immediateCondition = function(cond) {
[16:05:18.609]                   save_rds <- function (object, pathname, ...) 
[16:05:18.609]                   {
[16:05:18.609]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[16:05:18.609]                     if (file_test("-f", pathname_tmp)) {
[16:05:18.609]                       fi_tmp <- file.info(pathname_tmp)
[16:05:18.609]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[16:05:18.609]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:05:18.609]                         fi_tmp[["mtime"]])
[16:05:18.609]                     }
[16:05:18.609]                     tryCatch({
[16:05:18.609]                       saveRDS(object, file = pathname_tmp, ...)
[16:05:18.609]                     }, error = function(ex) {
[16:05:18.609]                       msg <- conditionMessage(ex)
[16:05:18.609]                       fi_tmp <- file.info(pathname_tmp)
[16:05:18.609]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[16:05:18.609]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:05:18.609]                         fi_tmp[["mtime"]], msg)
[16:05:18.609]                       ex$message <- msg
[16:05:18.609]                       stop(ex)
[16:05:18.609]                     })
[16:05:18.609]                     stopifnot(file_test("-f", pathname_tmp))
[16:05:18.609]                     res <- file.rename(from = pathname_tmp, to = pathname)
[16:05:18.609]                     if (!res || file_test("-f", pathname_tmp)) {
[16:05:18.609]                       fi_tmp <- file.info(pathname_tmp)
[16:05:18.609]                       fi <- file.info(pathname)
[16:05:18.609]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[16:05:18.609]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:05:18.609]                         fi_tmp[["mtime"]], sQuote(pathname), 
[16:05:18.609]                         fi[["size"]], fi[["mtime"]])
[16:05:18.609]                       stop(msg)
[16:05:18.609]                     }
[16:05:18.609]                     invisible(pathname)
[16:05:18.609]                   }
[16:05:18.609]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[16:05:18.609]                     rootPath = tempdir()) 
[16:05:18.609]                   {
[16:05:18.609]                     obj <- list(time = Sys.time(), condition = cond)
[16:05:18.609]                     file <- tempfile(pattern = class(cond)[1], 
[16:05:18.609]                       tmpdir = path, fileext = ".rds")
[16:05:18.609]                     save_rds(obj, file)
[16:05:18.609]                   }
[16:05:18.609]                   saveImmediateCondition(cond, path = "/tmp/RtmpCqPaVf/.future/immediateConditions")
[16:05:18.609]                   muffleCondition <- function (cond, pattern = "^muffle") 
[16:05:18.609]                   {
[16:05:18.609]                     inherits <- base::inherits
[16:05:18.609]                     invokeRestart <- base::invokeRestart
[16:05:18.609]                     is.null <- base::is.null
[16:05:18.609]                     muffled <- FALSE
[16:05:18.609]                     if (inherits(cond, "message")) {
[16:05:18.609]                       muffled <- grepl(pattern, "muffleMessage")
[16:05:18.609]                       if (muffled) 
[16:05:18.609]                         invokeRestart("muffleMessage")
[16:05:18.609]                     }
[16:05:18.609]                     else if (inherits(cond, "warning")) {
[16:05:18.609]                       muffled <- grepl(pattern, "muffleWarning")
[16:05:18.609]                       if (muffled) 
[16:05:18.609]                         invokeRestart("muffleWarning")
[16:05:18.609]                     }
[16:05:18.609]                     else if (inherits(cond, "condition")) {
[16:05:18.609]                       if (!is.null(pattern)) {
[16:05:18.609]                         computeRestarts <- base::computeRestarts
[16:05:18.609]                         grepl <- base::grepl
[16:05:18.609]                         restarts <- computeRestarts(cond)
[16:05:18.609]                         for (restart in restarts) {
[16:05:18.609]                           name <- restart$name
[16:05:18.609]                           if (is.null(name)) 
[16:05:18.609]                             next
[16:05:18.609]                           if (!grepl(pattern, name)) 
[16:05:18.609]                             next
[16:05:18.609]                           invokeRestart(restart)
[16:05:18.609]                           muffled <- TRUE
[16:05:18.609]                           break
[16:05:18.609]                         }
[16:05:18.609]                       }
[16:05:18.609]                     }
[16:05:18.609]                     invisible(muffled)
[16:05:18.609]                   }
[16:05:18.609]                   muffleCondition(cond)
[16:05:18.609]                 })
[16:05:18.609]             }))
[16:05:18.609]             future::FutureResult(value = ...future.value$value, 
[16:05:18.609]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:05:18.609]                   ...future.rng), globalenv = if (FALSE) 
[16:05:18.609]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:05:18.609]                     ...future.globalenv.names))
[16:05:18.609]                 else NULL, started = ...future.startTime, version = "1.8")
[16:05:18.609]         }, condition = base::local({
[16:05:18.609]             c <- base::c
[16:05:18.609]             inherits <- base::inherits
[16:05:18.609]             invokeRestart <- base::invokeRestart
[16:05:18.609]             length <- base::length
[16:05:18.609]             list <- base::list
[16:05:18.609]             seq.int <- base::seq.int
[16:05:18.609]             signalCondition <- base::signalCondition
[16:05:18.609]             sys.calls <- base::sys.calls
[16:05:18.609]             `[[` <- base::`[[`
[16:05:18.609]             `+` <- base::`+`
[16:05:18.609]             `<<-` <- base::`<<-`
[16:05:18.609]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:05:18.609]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:05:18.609]                   3L)]
[16:05:18.609]             }
[16:05:18.609]             function(cond) {
[16:05:18.609]                 is_error <- inherits(cond, "error")
[16:05:18.609]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:05:18.609]                   NULL)
[16:05:18.609]                 if (is_error) {
[16:05:18.609]                   sessionInformation <- function() {
[16:05:18.609]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:05:18.609]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:05:18.609]                       search = base::search(), system = base::Sys.info())
[16:05:18.609]                   }
[16:05:18.609]                   ...future.conditions[[length(...future.conditions) + 
[16:05:18.609]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:05:18.609]                     cond$call), session = sessionInformation(), 
[16:05:18.609]                     timestamp = base::Sys.time(), signaled = 0L)
[16:05:18.609]                   signalCondition(cond)
[16:05:18.609]                 }
[16:05:18.609]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:05:18.609]                 "immediateCondition"))) {
[16:05:18.609]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:05:18.609]                   ...future.conditions[[length(...future.conditions) + 
[16:05:18.609]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:05:18.609]                   if (TRUE && !signal) {
[16:05:18.609]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:05:18.609]                     {
[16:05:18.609]                       inherits <- base::inherits
[16:05:18.609]                       invokeRestart <- base::invokeRestart
[16:05:18.609]                       is.null <- base::is.null
[16:05:18.609]                       muffled <- FALSE
[16:05:18.609]                       if (inherits(cond, "message")) {
[16:05:18.609]                         muffled <- grepl(pattern, "muffleMessage")
[16:05:18.609]                         if (muffled) 
[16:05:18.609]                           invokeRestart("muffleMessage")
[16:05:18.609]                       }
[16:05:18.609]                       else if (inherits(cond, "warning")) {
[16:05:18.609]                         muffled <- grepl(pattern, "muffleWarning")
[16:05:18.609]                         if (muffled) 
[16:05:18.609]                           invokeRestart("muffleWarning")
[16:05:18.609]                       }
[16:05:18.609]                       else if (inherits(cond, "condition")) {
[16:05:18.609]                         if (!is.null(pattern)) {
[16:05:18.609]                           computeRestarts <- base::computeRestarts
[16:05:18.609]                           grepl <- base::grepl
[16:05:18.609]                           restarts <- computeRestarts(cond)
[16:05:18.609]                           for (restart in restarts) {
[16:05:18.609]                             name <- restart$name
[16:05:18.609]                             if (is.null(name)) 
[16:05:18.609]                               next
[16:05:18.609]                             if (!grepl(pattern, name)) 
[16:05:18.609]                               next
[16:05:18.609]                             invokeRestart(restart)
[16:05:18.609]                             muffled <- TRUE
[16:05:18.609]                             break
[16:05:18.609]                           }
[16:05:18.609]                         }
[16:05:18.609]                       }
[16:05:18.609]                       invisible(muffled)
[16:05:18.609]                     }
[16:05:18.609]                     muffleCondition(cond, pattern = "^muffle")
[16:05:18.609]                   }
[16:05:18.609]                 }
[16:05:18.609]                 else {
[16:05:18.609]                   if (TRUE) {
[16:05:18.609]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:05:18.609]                     {
[16:05:18.609]                       inherits <- base::inherits
[16:05:18.609]                       invokeRestart <- base::invokeRestart
[16:05:18.609]                       is.null <- base::is.null
[16:05:18.609]                       muffled <- FALSE
[16:05:18.609]                       if (inherits(cond, "message")) {
[16:05:18.609]                         muffled <- grepl(pattern, "muffleMessage")
[16:05:18.609]                         if (muffled) 
[16:05:18.609]                           invokeRestart("muffleMessage")
[16:05:18.609]                       }
[16:05:18.609]                       else if (inherits(cond, "warning")) {
[16:05:18.609]                         muffled <- grepl(pattern, "muffleWarning")
[16:05:18.609]                         if (muffled) 
[16:05:18.609]                           invokeRestart("muffleWarning")
[16:05:18.609]                       }
[16:05:18.609]                       else if (inherits(cond, "condition")) {
[16:05:18.609]                         if (!is.null(pattern)) {
[16:05:18.609]                           computeRestarts <- base::computeRestarts
[16:05:18.609]                           grepl <- base::grepl
[16:05:18.609]                           restarts <- computeRestarts(cond)
[16:05:18.609]                           for (restart in restarts) {
[16:05:18.609]                             name <- restart$name
[16:05:18.609]                             if (is.null(name)) 
[16:05:18.609]                               next
[16:05:18.609]                             if (!grepl(pattern, name)) 
[16:05:18.609]                               next
[16:05:18.609]                             invokeRestart(restart)
[16:05:18.609]                             muffled <- TRUE
[16:05:18.609]                             break
[16:05:18.609]                           }
[16:05:18.609]                         }
[16:05:18.609]                       }
[16:05:18.609]                       invisible(muffled)
[16:05:18.609]                     }
[16:05:18.609]                     muffleCondition(cond, pattern = "^muffle")
[16:05:18.609]                   }
[16:05:18.609]                 }
[16:05:18.609]             }
[16:05:18.609]         }))
[16:05:18.609]     }, error = function(ex) {
[16:05:18.609]         base::structure(base::list(value = NULL, visible = NULL, 
[16:05:18.609]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:05:18.609]                 ...future.rng), started = ...future.startTime, 
[16:05:18.609]             finished = Sys.time(), session_uuid = NA_character_, 
[16:05:18.609]             version = "1.8"), class = "FutureResult")
[16:05:18.609]     }, finally = {
[16:05:18.609]         if (!identical(...future.workdir, getwd())) 
[16:05:18.609]             setwd(...future.workdir)
[16:05:18.609]         {
[16:05:18.609]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:05:18.609]                 ...future.oldOptions$nwarnings <- NULL
[16:05:18.609]             }
[16:05:18.609]             base::options(...future.oldOptions)
[16:05:18.609]             if (.Platform$OS.type == "windows") {
[16:05:18.609]                 old_names <- names(...future.oldEnvVars)
[16:05:18.609]                 envs <- base::Sys.getenv()
[16:05:18.609]                 names <- names(envs)
[16:05:18.609]                 common <- intersect(names, old_names)
[16:05:18.609]                 added <- setdiff(names, old_names)
[16:05:18.609]                 removed <- setdiff(old_names, names)
[16:05:18.609]                 changed <- common[...future.oldEnvVars[common] != 
[16:05:18.609]                   envs[common]]
[16:05:18.609]                 NAMES <- toupper(changed)
[16:05:18.609]                 args <- list()
[16:05:18.609]                 for (kk in seq_along(NAMES)) {
[16:05:18.609]                   name <- changed[[kk]]
[16:05:18.609]                   NAME <- NAMES[[kk]]
[16:05:18.609]                   if (name != NAME && is.element(NAME, old_names)) 
[16:05:18.609]                     next
[16:05:18.609]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:05:18.609]                 }
[16:05:18.609]                 NAMES <- toupper(added)
[16:05:18.609]                 for (kk in seq_along(NAMES)) {
[16:05:18.609]                   name <- added[[kk]]
[16:05:18.609]                   NAME <- NAMES[[kk]]
[16:05:18.609]                   if (name != NAME && is.element(NAME, old_names)) 
[16:05:18.609]                     next
[16:05:18.609]                   args[[name]] <- ""
[16:05:18.609]                 }
[16:05:18.609]                 NAMES <- toupper(removed)
[16:05:18.609]                 for (kk in seq_along(NAMES)) {
[16:05:18.609]                   name <- removed[[kk]]
[16:05:18.609]                   NAME <- NAMES[[kk]]
[16:05:18.609]                   if (name != NAME && is.element(NAME, old_names)) 
[16:05:18.609]                     next
[16:05:18.609]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:05:18.609]                 }
[16:05:18.609]                 if (length(args) > 0) 
[16:05:18.609]                   base::do.call(base::Sys.setenv, args = args)
[16:05:18.609]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:05:18.609]             }
[16:05:18.609]             else {
[16:05:18.609]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:05:18.609]             }
[16:05:18.609]             {
[16:05:18.609]                 if (base::length(...future.futureOptionsAdded) > 
[16:05:18.609]                   0L) {
[16:05:18.609]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:05:18.609]                   base::names(opts) <- ...future.futureOptionsAdded
[16:05:18.609]                   base::options(opts)
[16:05:18.609]                 }
[16:05:18.609]                 {
[16:05:18.609]                   {
[16:05:18.609]                     base::options(mc.cores = ...future.mc.cores.old)
[16:05:18.609]                     NULL
[16:05:18.609]                   }
[16:05:18.609]                   options(future.plan = NULL)
[16:05:18.609]                   if (is.na(NA_character_)) 
[16:05:18.609]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:05:18.609]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:05:18.609]                   future::plan(list(function (..., workers = availableCores(constraints = "multicore"), 
[16:05:18.609]                     envir = parent.frame()) 
[16:05:18.609]                   {
[16:05:18.609]                     default_workers <- missing(workers)
[16:05:18.609]                     if (is.function(workers)) 
[16:05:18.609]                       workers <- workers()
[16:05:18.609]                     workers <- structure(as.integer(workers), 
[16:05:18.609]                       class = class(workers))
[16:05:18.609]                     stop_if_not(is.finite(workers), workers >= 
[16:05:18.609]                       1L)
[16:05:18.609]                     if ((workers == 1L && !inherits(workers, 
[16:05:18.609]                       "AsIs")) || !supportsMulticore(warn = TRUE)) {
[16:05:18.609]                       if (default_workers) 
[16:05:18.609]                         supportsMulticore(warn = TRUE)
[16:05:18.609]                       return(sequential(..., envir = envir))
[16:05:18.609]                     }
[16:05:18.609]                     oopts <- options(mc.cores = workers)
[16:05:18.609]                     on.exit(options(oopts))
[16:05:18.609]                     future <- MulticoreFuture(..., workers = workers, 
[16:05:18.609]                       envir = envir)
[16:05:18.609]                     if (!future$lazy) 
[16:05:18.609]                       future <- run(future)
[16:05:18.609]                     invisible(future)
[16:05:18.609]                   }), .cleanup = FALSE, .init = FALSE)
[16:05:18.609]                 }
[16:05:18.609]             }
[16:05:18.609]         }
[16:05:18.609]     })
[16:05:18.609]     if (TRUE) {
[16:05:18.609]         base::sink(type = "output", split = FALSE)
[16:05:18.609]         if (TRUE) {
[16:05:18.609]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:05:18.609]         }
[16:05:18.609]         else {
[16:05:18.609]             ...future.result["stdout"] <- base::list(NULL)
[16:05:18.609]         }
[16:05:18.609]         base::close(...future.stdout)
[16:05:18.609]         ...future.stdout <- NULL
[16:05:18.609]     }
[16:05:18.609]     ...future.result$conditions <- ...future.conditions
[16:05:18.609]     ...future.result$finished <- base::Sys.time()
[16:05:18.609]     ...future.result
[16:05:18.609] }
[16:05:18.612] requestCore(): workers = 2
[16:05:18.615] MulticoreFuture started
[16:05:18.615] - Launch lazy future ... done
[16:05:18.615] plan(): Setting new future strategy stack:
[16:05:18.615] run() for ‘MulticoreFuture’ ... done
[16:05:18.616] List of future strategies:
[16:05:18.616] 1. sequential:
[16:05:18.616]    - args: function (..., envir = parent.frame())
[16:05:18.616]    - tweaked: FALSE
[16:05:18.616]    - call: NULL
[16:05:18.616] plan(): nbrOfWorkers() = 1
[16:05:18.617] result() for MulticoreFuture ...
[16:05:18.619] plan(): Setting new future strategy stack:
[16:05:18.619] List of future strategies:
[16:05:18.619] 1. multicore:
[16:05:18.619]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[16:05:18.619]    - tweaked: FALSE
[16:05:18.619]    - call: plan(multicore)
[16:05:18.624] plan(): nbrOfWorkers() = 2
[16:05:18.629] result() for MulticoreFuture ...
[16:05:18.629] result() for MulticoreFuture ... done
[16:05:18.629] result() for MulticoreFuture ... done
[16:05:18.629] result() for MulticoreFuture ...
[16:05:18.629] result() for MulticoreFuture ... done
List of 1
 $ nthreads_child: int 4
  - Number of OpenMP threads in ‘MulticoreFuture’ future: ‘4’
List of 1
 $ nthreads_children:List of 2
  ..$ : int 4
  ..$ : int 4
  - Number of OpenMP threads in mclapply(): ‘4’
- Trying to reset number of OpenMP threads
List of 1
 $ nthreads_2: int 4
  - Number of OpenMP threads: ‘4’
Checking RhpcBLASctl capabilities ... done
> 
> if (supportsMulticore() && availableCores("multicore") >= 2L && supports_omp_threads()) {
+   nthreads_0 <- RhpcBLASctl::omp_get_max_threads()
+   
+   for (enable in c(TRUE, FALSE)) {
+     options(future.fork.multithreading.enable = enable)
+ 
+     message(sprintf("'future.fork.multithreading.enable' = %s ...", enable))
+ 
+     f <- future(list(nthreads = RhpcBLASctl::omp_get_max_threads()))
+     nthreads <- value(f)$nthreads
+     cat(sprintf("Number of OpenMP threads in %s future: %d\n", sQuote(class(f)[1]), nthreads))
+ 
+     ## Assert that single-threading was set?
+     if (enable) {
+       stopifnot(enable && nthreads >= nthreads_0)
+     } else {
+       ## FIXME: On CRAN r-devel-linux-x86_64-fedora-clang (2020-01-17):
+       ## Number of OpenMP threads in 'MulticoreFuture' future: 24
+       ## Error: !enable && nthreads == 1L is not TRUE
+       stopifnot(!enable && nthreads == 1L)
+     }
+       
+     message(sprintf("'future.fork.multithreading.enable' = %s ... DONE", enable))
+   } ## for (enable ...)
+ } ## if (requireNamespace("RhpcBLASctl", ...)) {
[16:05:18.642] supports_omp_threads() = TRUE
'future.fork.multithreading.enable' = TRUE ...
[16:05:18.652] getGlobalsAndPackages() ...
[16:05:18.653] Searching for globals...
[16:05:18.653] - globals found: [2] ‘list’, ‘::’
[16:05:18.654] Searching for globals ... DONE
[16:05:18.654] Resolving globals: FALSE
[16:05:18.654] 
[16:05:18.654] 
[16:05:18.654] getGlobalsAndPackages() ... DONE
[16:05:18.655] run() for ‘Future’ ...
[16:05:18.655] - state: ‘created’
[16:05:18.655] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[16:05:18.659] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[16:05:18.659] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[16:05:18.659]   - Field: ‘label’
[16:05:18.659]   - Field: ‘local’
[16:05:18.659]   - Field: ‘owner’
[16:05:18.659]   - Field: ‘envir’
[16:05:18.660]   - Field: ‘workers’
[16:05:18.660]   - Field: ‘packages’
[16:05:18.660]   - Field: ‘gc’
[16:05:18.660]   - Field: ‘job’
[16:05:18.663]   - Field: ‘conditions’
[16:05:18.663]   - Field: ‘expr’
[16:05:18.663]   - Field: ‘uuid’
[16:05:18.663]   - Field: ‘seed’
[16:05:18.663]   - Field: ‘version’
[16:05:18.663]   - Field: ‘result’
[16:05:18.663]   - Field: ‘asynchronous’
[16:05:18.664]   - Field: ‘calls’
[16:05:18.664]   - Field: ‘globals’
[16:05:18.664]   - Field: ‘stdout’
[16:05:18.664]   - Field: ‘earlySignal’
[16:05:18.664]   - Field: ‘lazy’
[16:05:18.664]   - Field: ‘state’
[16:05:18.664] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[16:05:18.665] - Launch lazy future ...
[16:05:18.665] Packages needed by the future expression (n = 0): <none>
[16:05:18.665] Packages needed by future strategies (n = 0): <none>
[16:05:18.665] {
[16:05:18.665]     {
[16:05:18.665]         {
[16:05:18.665]             ...future.startTime <- base::Sys.time()
[16:05:18.665]             {
[16:05:18.665]                 {
[16:05:18.665]                   {
[16:05:18.665]                     {
[16:05:18.665]                       base::local({
[16:05:18.665]                         has_future <- base::requireNamespace("future", 
[16:05:18.665]                           quietly = TRUE)
[16:05:18.665]                         if (has_future) {
[16:05:18.665]                           ns <- base::getNamespace("future")
[16:05:18.665]                           version <- ns[[".package"]][["version"]]
[16:05:18.665]                           if (is.null(version)) 
[16:05:18.665]                             version <- utils::packageVersion("future")
[16:05:18.665]                         }
[16:05:18.665]                         else {
[16:05:18.665]                           version <- NULL
[16:05:18.665]                         }
[16:05:18.665]                         if (!has_future || version < "1.8.0") {
[16:05:18.665]                           info <- base::c(r_version = base::gsub("R version ", 
[16:05:18.665]                             "", base::R.version$version.string), 
[16:05:18.665]                             platform = base::sprintf("%s (%s-bit)", 
[16:05:18.665]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:05:18.665]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[16:05:18.665]                               "release", "version")], collapse = " "), 
[16:05:18.665]                             hostname = base::Sys.info()[["nodename"]])
[16:05:18.665]                           info <- base::sprintf("%s: %s", base::names(info), 
[16:05:18.665]                             info)
[16:05:18.665]                           info <- base::paste(info, collapse = "; ")
[16:05:18.665]                           if (!has_future) {
[16:05:18.665]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:05:18.665]                               info)
[16:05:18.665]                           }
[16:05:18.665]                           else {
[16:05:18.665]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:05:18.665]                               info, version)
[16:05:18.665]                           }
[16:05:18.665]                           base::stop(msg)
[16:05:18.665]                         }
[16:05:18.665]                       })
[16:05:18.665]                     }
[16:05:18.665]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[16:05:18.665]                     base::options(mc.cores = 1L)
[16:05:18.665]                   }
[16:05:18.665]                   options(future.plan = NULL)
[16:05:18.665]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:05:18.665]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:05:18.665]                 }
[16:05:18.665]                 ...future.workdir <- getwd()
[16:05:18.665]             }
[16:05:18.665]             ...future.oldOptions <- base::as.list(base::.Options)
[16:05:18.665]             ...future.oldEnvVars <- base::Sys.getenv()
[16:05:18.665]         }
[16:05:18.665]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:05:18.665]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:05:18.665]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:05:18.665]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:05:18.665]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:05:18.665]             future.stdout.windows.reencode = NULL, width = 80L)
[16:05:18.665]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:05:18.665]             base::names(...future.oldOptions))
[16:05:18.665]     }
[16:05:18.665]     if (FALSE) {
[16:05:18.665]     }
[16:05:18.665]     else {
[16:05:18.665]         if (TRUE) {
[16:05:18.665]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:05:18.665]                 open = "w")
[16:05:18.665]         }
[16:05:18.665]         else {
[16:05:18.665]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:05:18.665]                 windows = "NUL", "/dev/null"), open = "w")
[16:05:18.665]         }
[16:05:18.665]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:05:18.665]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:05:18.665]             base::sink(type = "output", split = FALSE)
[16:05:18.665]             base::close(...future.stdout)
[16:05:18.665]         }, add = TRUE)
[16:05:18.665]     }
[16:05:18.665]     ...future.frame <- base::sys.nframe()
[16:05:18.665]     ...future.conditions <- base::list()
[16:05:18.665]     ...future.rng <- base::globalenv()$.Random.seed
[16:05:18.665]     if (FALSE) {
[16:05:18.665]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:05:18.665]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:05:18.665]     }
[16:05:18.665]     ...future.result <- base::tryCatch({
[16:05:18.665]         base::withCallingHandlers({
[16:05:18.665]             ...future.value <- base::withVisible(base::local({
[16:05:18.665]                 withCallingHandlers({
[16:05:18.665]                   list(nthreads = RhpcBLASctl::omp_get_max_threads())
[16:05:18.665]                 }, immediateCondition = function(cond) {
[16:05:18.665]                   save_rds <- function (object, pathname, ...) 
[16:05:18.665]                   {
[16:05:18.665]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[16:05:18.665]                     if (file_test("-f", pathname_tmp)) {
[16:05:18.665]                       fi_tmp <- file.info(pathname_tmp)
[16:05:18.665]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[16:05:18.665]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:05:18.665]                         fi_tmp[["mtime"]])
[16:05:18.665]                     }
[16:05:18.665]                     tryCatch({
[16:05:18.665]                       saveRDS(object, file = pathname_tmp, ...)
[16:05:18.665]                     }, error = function(ex) {
[16:05:18.665]                       msg <- conditionMessage(ex)
[16:05:18.665]                       fi_tmp <- file.info(pathname_tmp)
[16:05:18.665]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[16:05:18.665]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:05:18.665]                         fi_tmp[["mtime"]], msg)
[16:05:18.665]                       ex$message <- msg
[16:05:18.665]                       stop(ex)
[16:05:18.665]                     })
[16:05:18.665]                     stopifnot(file_test("-f", pathname_tmp))
[16:05:18.665]                     res <- file.rename(from = pathname_tmp, to = pathname)
[16:05:18.665]                     if (!res || file_test("-f", pathname_tmp)) {
[16:05:18.665]                       fi_tmp <- file.info(pathname_tmp)
[16:05:18.665]                       fi <- file.info(pathname)
[16:05:18.665]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[16:05:18.665]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:05:18.665]                         fi_tmp[["mtime"]], sQuote(pathname), 
[16:05:18.665]                         fi[["size"]], fi[["mtime"]])
[16:05:18.665]                       stop(msg)
[16:05:18.665]                     }
[16:05:18.665]                     invisible(pathname)
[16:05:18.665]                   }
[16:05:18.665]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[16:05:18.665]                     rootPath = tempdir()) 
[16:05:18.665]                   {
[16:05:18.665]                     obj <- list(time = Sys.time(), condition = cond)
[16:05:18.665]                     file <- tempfile(pattern = class(cond)[1], 
[16:05:18.665]                       tmpdir = path, fileext = ".rds")
[16:05:18.665]                     save_rds(obj, file)
[16:05:18.665]                   }
[16:05:18.665]                   saveImmediateCondition(cond, path = "/tmp/RtmpCqPaVf/.future/immediateConditions")
[16:05:18.665]                   muffleCondition <- function (cond, pattern = "^muffle") 
[16:05:18.665]                   {
[16:05:18.665]                     inherits <- base::inherits
[16:05:18.665]                     invokeRestart <- base::invokeRestart
[16:05:18.665]                     is.null <- base::is.null
[16:05:18.665]                     muffled <- FALSE
[16:05:18.665]                     if (inherits(cond, "message")) {
[16:05:18.665]                       muffled <- grepl(pattern, "muffleMessage")
[16:05:18.665]                       if (muffled) 
[16:05:18.665]                         invokeRestart("muffleMessage")
[16:05:18.665]                     }
[16:05:18.665]                     else if (inherits(cond, "warning")) {
[16:05:18.665]                       muffled <- grepl(pattern, "muffleWarning")
[16:05:18.665]                       if (muffled) 
[16:05:18.665]                         invokeRestart("muffleWarning")
[16:05:18.665]                     }
[16:05:18.665]                     else if (inherits(cond, "condition")) {
[16:05:18.665]                       if (!is.null(pattern)) {
[16:05:18.665]                         computeRestarts <- base::computeRestarts
[16:05:18.665]                         grepl <- base::grepl
[16:05:18.665]                         restarts <- computeRestarts(cond)
[16:05:18.665]                         for (restart in restarts) {
[16:05:18.665]                           name <- restart$name
[16:05:18.665]                           if (is.null(name)) 
[16:05:18.665]                             next
[16:05:18.665]                           if (!grepl(pattern, name)) 
[16:05:18.665]                             next
[16:05:18.665]                           invokeRestart(restart)
[16:05:18.665]                           muffled <- TRUE
[16:05:18.665]                           break
[16:05:18.665]                         }
[16:05:18.665]                       }
[16:05:18.665]                     }
[16:05:18.665]                     invisible(muffled)
[16:05:18.665]                   }
[16:05:18.665]                   muffleCondition(cond)
[16:05:18.665]                 })
[16:05:18.665]             }))
[16:05:18.665]             future::FutureResult(value = ...future.value$value, 
[16:05:18.665]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:05:18.665]                   ...future.rng), globalenv = if (FALSE) 
[16:05:18.665]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:05:18.665]                     ...future.globalenv.names))
[16:05:18.665]                 else NULL, started = ...future.startTime, version = "1.8")
[16:05:18.665]         }, condition = base::local({
[16:05:18.665]             c <- base::c
[16:05:18.665]             inherits <- base::inherits
[16:05:18.665]             invokeRestart <- base::invokeRestart
[16:05:18.665]             length <- base::length
[16:05:18.665]             list <- base::list
[16:05:18.665]             seq.int <- base::seq.int
[16:05:18.665]             signalCondition <- base::signalCondition
[16:05:18.665]             sys.calls <- base::sys.calls
[16:05:18.665]             `[[` <- base::`[[`
[16:05:18.665]             `+` <- base::`+`
[16:05:18.665]             `<<-` <- base::`<<-`
[16:05:18.665]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:05:18.665]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:05:18.665]                   3L)]
[16:05:18.665]             }
[16:05:18.665]             function(cond) {
[16:05:18.665]                 is_error <- inherits(cond, "error")
[16:05:18.665]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:05:18.665]                   NULL)
[16:05:18.665]                 if (is_error) {
[16:05:18.665]                   sessionInformation <- function() {
[16:05:18.665]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:05:18.665]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:05:18.665]                       search = base::search(), system = base::Sys.info())
[16:05:18.665]                   }
[16:05:18.665]                   ...future.conditions[[length(...future.conditions) + 
[16:05:18.665]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:05:18.665]                     cond$call), session = sessionInformation(), 
[16:05:18.665]                     timestamp = base::Sys.time(), signaled = 0L)
[16:05:18.665]                   signalCondition(cond)
[16:05:18.665]                 }
[16:05:18.665]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:05:18.665]                 "immediateCondition"))) {
[16:05:18.665]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:05:18.665]                   ...future.conditions[[length(...future.conditions) + 
[16:05:18.665]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:05:18.665]                   if (TRUE && !signal) {
[16:05:18.665]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:05:18.665]                     {
[16:05:18.665]                       inherits <- base::inherits
[16:05:18.665]                       invokeRestart <- base::invokeRestart
[16:05:18.665]                       is.null <- base::is.null
[16:05:18.665]                       muffled <- FALSE
[16:05:18.665]                       if (inherits(cond, "message")) {
[16:05:18.665]                         muffled <- grepl(pattern, "muffleMessage")
[16:05:18.665]                         if (muffled) 
[16:05:18.665]                           invokeRestart("muffleMessage")
[16:05:18.665]                       }
[16:05:18.665]                       else if (inherits(cond, "warning")) {
[16:05:18.665]                         muffled <- grepl(pattern, "muffleWarning")
[16:05:18.665]                         if (muffled) 
[16:05:18.665]                           invokeRestart("muffleWarning")
[16:05:18.665]                       }
[16:05:18.665]                       else if (inherits(cond, "condition")) {
[16:05:18.665]                         if (!is.null(pattern)) {
[16:05:18.665]                           computeRestarts <- base::computeRestarts
[16:05:18.665]                           grepl <- base::grepl
[16:05:18.665]                           restarts <- computeRestarts(cond)
[16:05:18.665]                           for (restart in restarts) {
[16:05:18.665]                             name <- restart$name
[16:05:18.665]                             if (is.null(name)) 
[16:05:18.665]                               next
[16:05:18.665]                             if (!grepl(pattern, name)) 
[16:05:18.665]                               next
[16:05:18.665]                             invokeRestart(restart)
[16:05:18.665]                             muffled <- TRUE
[16:05:18.665]                             break
[16:05:18.665]                           }
[16:05:18.665]                         }
[16:05:18.665]                       }
[16:05:18.665]                       invisible(muffled)
[16:05:18.665]                     }
[16:05:18.665]                     muffleCondition(cond, pattern = "^muffle")
[16:05:18.665]                   }
[16:05:18.665]                 }
[16:05:18.665]                 else {
[16:05:18.665]                   if (TRUE) {
[16:05:18.665]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:05:18.665]                     {
[16:05:18.665]                       inherits <- base::inherits
[16:05:18.665]                       invokeRestart <- base::invokeRestart
[16:05:18.665]                       is.null <- base::is.null
[16:05:18.665]                       muffled <- FALSE
[16:05:18.665]                       if (inherits(cond, "message")) {
[16:05:18.665]                         muffled <- grepl(pattern, "muffleMessage")
[16:05:18.665]                         if (muffled) 
[16:05:18.665]                           invokeRestart("muffleMessage")
[16:05:18.665]                       }
[16:05:18.665]                       else if (inherits(cond, "warning")) {
[16:05:18.665]                         muffled <- grepl(pattern, "muffleWarning")
[16:05:18.665]                         if (muffled) 
[16:05:18.665]                           invokeRestart("muffleWarning")
[16:05:18.665]                       }
[16:05:18.665]                       else if (inherits(cond, "condition")) {
[16:05:18.665]                         if (!is.null(pattern)) {
[16:05:18.665]                           computeRestarts <- base::computeRestarts
[16:05:18.665]                           grepl <- base::grepl
[16:05:18.665]                           restarts <- computeRestarts(cond)
[16:05:18.665]                           for (restart in restarts) {
[16:05:18.665]                             name <- restart$name
[16:05:18.665]                             if (is.null(name)) 
[16:05:18.665]                               next
[16:05:18.665]                             if (!grepl(pattern, name)) 
[16:05:18.665]                               next
[16:05:18.665]                             invokeRestart(restart)
[16:05:18.665]                             muffled <- TRUE
[16:05:18.665]                             break
[16:05:18.665]                           }
[16:05:18.665]                         }
[16:05:18.665]                       }
[16:05:18.665]                       invisible(muffled)
[16:05:18.665]                     }
[16:05:18.665]                     muffleCondition(cond, pattern = "^muffle")
[16:05:18.665]                   }
[16:05:18.665]                 }
[16:05:18.665]             }
[16:05:18.665]         }))
[16:05:18.665]     }, error = function(ex) {
[16:05:18.665]         base::structure(base::list(value = NULL, visible = NULL, 
[16:05:18.665]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:05:18.665]                 ...future.rng), started = ...future.startTime, 
[16:05:18.665]             finished = Sys.time(), session_uuid = NA_character_, 
[16:05:18.665]             version = "1.8"), class = "FutureResult")
[16:05:18.665]     }, finally = {
[16:05:18.665]         if (!identical(...future.workdir, getwd())) 
[16:05:18.665]             setwd(...future.workdir)
[16:05:18.665]         {
[16:05:18.665]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:05:18.665]                 ...future.oldOptions$nwarnings <- NULL
[16:05:18.665]             }
[16:05:18.665]             base::options(...future.oldOptions)
[16:05:18.665]             if (.Platform$OS.type == "windows") {
[16:05:18.665]                 old_names <- names(...future.oldEnvVars)
[16:05:18.665]                 envs <- base::Sys.getenv()
[16:05:18.665]                 names <- names(envs)
[16:05:18.665]                 common <- intersect(names, old_names)
[16:05:18.665]                 added <- setdiff(names, old_names)
[16:05:18.665]                 removed <- setdiff(old_names, names)
[16:05:18.665]                 changed <- common[...future.oldEnvVars[common] != 
[16:05:18.665]                   envs[common]]
[16:05:18.665]                 NAMES <- toupper(changed)
[16:05:18.665]                 args <- list()
[16:05:18.665]                 for (kk in seq_along(NAMES)) {
[16:05:18.665]                   name <- changed[[kk]]
[16:05:18.665]                   NAME <- NAMES[[kk]]
[16:05:18.665]                   if (name != NAME && is.element(NAME, old_names)) 
[16:05:18.665]                     next
[16:05:18.665]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:05:18.665]                 }
[16:05:18.665]                 NAMES <- toupper(added)
[16:05:18.665]                 for (kk in seq_along(NAMES)) {
[16:05:18.665]                   name <- added[[kk]]
[16:05:18.665]                   NAME <- NAMES[[kk]]
[16:05:18.665]                   if (name != NAME && is.element(NAME, old_names)) 
[16:05:18.665]                     next
[16:05:18.665]                   args[[name]] <- ""
[16:05:18.665]                 }
[16:05:18.665]                 NAMES <- toupper(removed)
[16:05:18.665]                 for (kk in seq_along(NAMES)) {
[16:05:18.665]                   name <- removed[[kk]]
[16:05:18.665]                   NAME <- NAMES[[kk]]
[16:05:18.665]                   if (name != NAME && is.element(NAME, old_names)) 
[16:05:18.665]                     next
[16:05:18.665]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:05:18.665]                 }
[16:05:18.665]                 if (length(args) > 0) 
[16:05:18.665]                   base::do.call(base::Sys.setenv, args = args)
[16:05:18.665]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:05:18.665]             }
[16:05:18.665]             else {
[16:05:18.665]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:05:18.665]             }
[16:05:18.665]             {
[16:05:18.665]                 if (base::length(...future.futureOptionsAdded) > 
[16:05:18.665]                   0L) {
[16:05:18.665]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:05:18.665]                   base::names(opts) <- ...future.futureOptionsAdded
[16:05:18.665]                   base::options(opts)
[16:05:18.665]                 }
[16:05:18.665]                 {
[16:05:18.665]                   {
[16:05:18.665]                     base::options(mc.cores = ...future.mc.cores.old)
[16:05:18.665]                     NULL
[16:05:18.665]                   }
[16:05:18.665]                   options(future.plan = NULL)
[16:05:18.665]                   if (is.na(NA_character_)) 
[16:05:18.665]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:05:18.665]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:05:18.665]                   future::plan(list(function (..., workers = availableCores(constraints = "multicore"), 
[16:05:18.665]                     envir = parent.frame()) 
[16:05:18.665]                   {
[16:05:18.665]                     default_workers <- missing(workers)
[16:05:18.665]                     if (is.function(workers)) 
[16:05:18.665]                       workers <- workers()
[16:05:18.665]                     workers <- structure(as.integer(workers), 
[16:05:18.665]                       class = class(workers))
[16:05:18.665]                     stop_if_not(is.finite(workers), workers >= 
[16:05:18.665]                       1L)
[16:05:18.665]                     if ((workers == 1L && !inherits(workers, 
[16:05:18.665]                       "AsIs")) || !supportsMulticore(warn = TRUE)) {
[16:05:18.665]                       if (default_workers) 
[16:05:18.665]                         supportsMulticore(warn = TRUE)
[16:05:18.665]                       return(sequential(..., envir = envir))
[16:05:18.665]                     }
[16:05:18.665]                     oopts <- options(mc.cores = workers)
[16:05:18.665]                     on.exit(options(oopts))
[16:05:18.665]                     future <- MulticoreFuture(..., workers = workers, 
[16:05:18.665]                       envir = envir)
[16:05:18.665]                     if (!future$lazy) 
[16:05:18.665]                       future <- run(future)
[16:05:18.665]                     invisible(future)
[16:05:18.665]                   }), .cleanup = FALSE, .init = FALSE)
[16:05:18.665]                 }
[16:05:18.665]             }
[16:05:18.665]         }
[16:05:18.665]     })
[16:05:18.665]     if (TRUE) {
[16:05:18.665]         base::sink(type = "output", split = FALSE)
[16:05:18.665]         if (TRUE) {
[16:05:18.665]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:05:18.665]         }
[16:05:18.665]         else {
[16:05:18.665]             ...future.result["stdout"] <- base::list(NULL)
[16:05:18.665]         }
[16:05:18.665]         base::close(...future.stdout)
[16:05:18.665]         ...future.stdout <- NULL
[16:05:18.665]     }
[16:05:18.665]     ...future.result$conditions <- ...future.conditions
[16:05:18.665]     ...future.result$finished <- base::Sys.time()
[16:05:18.665]     ...future.result
[16:05:18.665] }
[16:05:18.668] requestCore(): workers = 2
[16:05:18.670] MulticoreFuture started
[16:05:18.670] - Launch lazy future ... done
[16:05:18.670] run() for ‘MulticoreFuture’ ... done
[16:05:18.671] result() for MulticoreFuture ...
[16:05:18.671] plan(): Setting new future strategy stack:
[16:05:18.671] List of future strategies:
[16:05:18.671] 1. sequential:
[16:05:18.671]    - args: function (..., envir = parent.frame())
[16:05:18.671]    - tweaked: FALSE
[16:05:18.671]    - call: NULL
[16:05:18.672] plan(): nbrOfWorkers() = 1
[16:05:18.675] plan(): Setting new future strategy stack:
[16:05:18.675] List of future strategies:
[16:05:18.675] 1. multicore:
[16:05:18.675]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[16:05:18.675]    - tweaked: FALSE
[16:05:18.675]    - call: plan(multicore)
[16:05:18.680] plan(): nbrOfWorkers() = 2
[16:05:18.681] result() for MulticoreFuture ...
[16:05:18.681] result() for MulticoreFuture ... done
[16:05:18.681] result() for MulticoreFuture ... done
[16:05:18.682] result() for MulticoreFuture ...
[16:05:18.682] result() for MulticoreFuture ... done
Number of OpenMP threads in ‘MulticoreFuture’ future: 4
'future.fork.multithreading.enable' = TRUE ... DONE
'future.fork.multithreading.enable' = FALSE ...
[16:05:18.682] getGlobalsAndPackages() ...
[16:05:18.682] Searching for globals...
[16:05:18.683] - globals found: [2] ‘list’, ‘::’
[16:05:18.683] Searching for globals ... DONE
[16:05:18.684] Resolving globals: FALSE
[16:05:18.684] 
[16:05:18.684] 
[16:05:18.684] getGlobalsAndPackages() ... DONE
[16:05:18.685] run() for ‘Future’ ...
[16:05:18.685] - state: ‘created’
[16:05:18.685] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[16:05:18.689] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[16:05:18.689] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[16:05:18.689]   - Field: ‘label’
[16:05:18.689]   - Field: ‘local’
[16:05:18.689]   - Field: ‘owner’
[16:05:18.689]   - Field: ‘envir’
[16:05:18.690]   - Field: ‘workers’
[16:05:18.690]   - Field: ‘packages’
[16:05:18.690]   - Field: ‘gc’
[16:05:18.690]   - Field: ‘job’
[16:05:18.690]   - Field: ‘conditions’
[16:05:18.690]   - Field: ‘expr’
[16:05:18.690]   - Field: ‘uuid’
[16:05:18.690]   - Field: ‘seed’
[16:05:18.691]   - Field: ‘version’
[16:05:18.691]   - Field: ‘result’
[16:05:18.691]   - Field: ‘asynchronous’
[16:05:18.691]   - Field: ‘calls’
[16:05:18.691]   - Field: ‘globals’
[16:05:18.691]   - Field: ‘stdout’
[16:05:18.691]   - Field: ‘earlySignal’
[16:05:18.691]   - Field: ‘lazy’
[16:05:18.691]   - Field: ‘state’
[16:05:18.692] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[16:05:18.692] - Launch lazy future ...
[16:05:18.692] supports_omp_threads() = TRUE
[16:05:18.692] - Updated expression to force single-threaded (OpenMP and RcppParallel) processing
[16:05:18.692] Packages needed by the future expression (n = 0): <none>
[16:05:18.692] Packages needed by future strategies (n = 0): <none>
[16:05:18.693] {
[16:05:18.693]     {
[16:05:18.693]         {
[16:05:18.693]             ...future.startTime <- base::Sys.time()
[16:05:18.693]             {
[16:05:18.693]                 {
[16:05:18.693]                   {
[16:05:18.693]                     {
[16:05:18.693]                       base::local({
[16:05:18.693]                         has_future <- base::requireNamespace("future", 
[16:05:18.693]                           quietly = TRUE)
[16:05:18.693]                         if (has_future) {
[16:05:18.693]                           ns <- base::getNamespace("future")
[16:05:18.693]                           version <- ns[[".package"]][["version"]]
[16:05:18.693]                           if (is.null(version)) 
[16:05:18.693]                             version <- utils::packageVersion("future")
[16:05:18.693]                         }
[16:05:18.693]                         else {
[16:05:18.693]                           version <- NULL
[16:05:18.693]                         }
[16:05:18.693]                         if (!has_future || version < "1.8.0") {
[16:05:18.693]                           info <- base::c(r_version = base::gsub("R version ", 
[16:05:18.693]                             "", base::R.version$version.string), 
[16:05:18.693]                             platform = base::sprintf("%s (%s-bit)", 
[16:05:18.693]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:05:18.693]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[16:05:18.693]                               "release", "version")], collapse = " "), 
[16:05:18.693]                             hostname = base::Sys.info()[["nodename"]])
[16:05:18.693]                           info <- base::sprintf("%s: %s", base::names(info), 
[16:05:18.693]                             info)
[16:05:18.693]                           info <- base::paste(info, collapse = "; ")
[16:05:18.693]                           if (!has_future) {
[16:05:18.693]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:05:18.693]                               info)
[16:05:18.693]                           }
[16:05:18.693]                           else {
[16:05:18.693]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:05:18.693]                               info, version)
[16:05:18.693]                           }
[16:05:18.693]                           base::stop(msg)
[16:05:18.693]                         }
[16:05:18.693]                       })
[16:05:18.693]                     }
[16:05:18.693]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[16:05:18.693]                     base::options(mc.cores = 1L)
[16:05:18.693]                   }
[16:05:18.693]                   options(future.plan = NULL)
[16:05:18.693]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:05:18.693]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:05:18.693]                 }
[16:05:18.693]                 ...future.workdir <- getwd()
[16:05:18.693]             }
[16:05:18.693]             ...future.oldOptions <- base::as.list(base::.Options)
[16:05:18.693]             ...future.oldEnvVars <- base::Sys.getenv()
[16:05:18.693]         }
[16:05:18.693]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:05:18.693]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:05:18.693]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:05:18.693]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:05:18.693]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:05:18.693]             future.stdout.windows.reencode = NULL, width = 80L)
[16:05:18.693]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:05:18.693]             base::names(...future.oldOptions))
[16:05:18.693]     }
[16:05:18.693]     if (FALSE) {
[16:05:18.693]     }
[16:05:18.693]     else {
[16:05:18.693]         if (TRUE) {
[16:05:18.693]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:05:18.693]                 open = "w")
[16:05:18.693]         }
[16:05:18.693]         else {
[16:05:18.693]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:05:18.693]                 windows = "NUL", "/dev/null"), open = "w")
[16:05:18.693]         }
[16:05:18.693]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:05:18.693]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:05:18.693]             base::sink(type = "output", split = FALSE)
[16:05:18.693]             base::close(...future.stdout)
[16:05:18.693]         }, add = TRUE)
[16:05:18.693]     }
[16:05:18.693]     ...future.frame <- base::sys.nframe()
[16:05:18.693]     ...future.conditions <- base::list()
[16:05:18.693]     ...future.rng <- base::globalenv()$.Random.seed
[16:05:18.693]     if (FALSE) {
[16:05:18.693]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:05:18.693]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:05:18.693]     }
[16:05:18.693]     ...future.result <- base::tryCatch({
[16:05:18.693]         base::withCallingHandlers({
[16:05:18.693]             ...future.value <- base::withVisible(base::local({
[16:05:18.693]                 withCallingHandlers({
[16:05:18.693]                   {
[16:05:18.693]                     old_omp_threads <- RhpcBLASctl::omp_get_max_threads()
[16:05:18.693]                     if (old_omp_threads > 1L) {
[16:05:18.693]                       RhpcBLASctl::omp_set_num_threads(1L)
[16:05:18.693]                       base::on.exit(RhpcBLASctl::omp_set_num_threads(old_omp_threads), 
[16:05:18.693]                         add = TRUE)
[16:05:18.693]                       new_omp_threads <- RhpcBLASctl::omp_get_max_threads()
[16:05:18.693]                       if (!is.numeric(new_omp_threads) || is.na(new_omp_threads) || 
[16:05:18.693]                         new_omp_threads != 1L) {
[16:05:18.693]                         label <- future$label
[16:05:18.693]                         if (is.null(label)) 
[16:05:18.693]                           label <- "<none>"
[16:05:18.693]                         warning(future::FutureWarning(sprintf("Failed to force a single OMP thread on this system. Number of threads used: %s", 
[16:05:18.693]                           new_omp_threads), future = future))
[16:05:18.693]                       }
[16:05:18.693]                     }
[16:05:18.693]                     old_rcppparallel_threads <- Sys.getenv("RCPP_PARALLEL_NUM_THREADS", 
[16:05:18.693]                       "")
[16:05:18.693]                     if (old_rcppparallel_threads != "1") {
[16:05:18.693]                       Sys.setenv(RCPP_PARALLEL_NUM_THREADS = "1")
[16:05:18.693]                       if (old_rcppparallel_threads == "") {
[16:05:18.693]                         base::on.exit(Sys.unsetenv("RCPP_PARALLEL_NUM_THREADS"), 
[16:05:18.693]                           add = TRUE)
[16:05:18.693]                       }
[16:05:18.693]                       else {
[16:05:18.693]                         base::on.exit(Sys.setenv(RCPP_PARALLEL_NUM_THREADS = old_rcppparallel_threads), 
[16:05:18.693]                           add = TRUE)
[16:05:18.693]                       }
[16:05:18.693]                     }
[16:05:18.693]                     list(nthreads = RhpcBLASctl::omp_get_max_threads())
[16:05:18.693]                   }
[16:05:18.693]                 }, immediateCondition = function(cond) {
[16:05:18.693]                   save_rds <- function (object, pathname, ...) 
[16:05:18.693]                   {
[16:05:18.693]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[16:05:18.693]                     if (file_test("-f", pathname_tmp)) {
[16:05:18.693]                       fi_tmp <- file.info(pathname_tmp)
[16:05:18.693]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[16:05:18.693]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:05:18.693]                         fi_tmp[["mtime"]])
[16:05:18.693]                     }
[16:05:18.693]                     tryCatch({
[16:05:18.693]                       saveRDS(object, file = pathname_tmp, ...)
[16:05:18.693]                     }, error = function(ex) {
[16:05:18.693]                       msg <- conditionMessage(ex)
[16:05:18.693]                       fi_tmp <- file.info(pathname_tmp)
[16:05:18.693]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[16:05:18.693]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:05:18.693]                         fi_tmp[["mtime"]], msg)
[16:05:18.693]                       ex$message <- msg
[16:05:18.693]                       stop(ex)
[16:05:18.693]                     })
[16:05:18.693]                     stopifnot(file_test("-f", pathname_tmp))
[16:05:18.693]                     res <- file.rename(from = pathname_tmp, to = pathname)
[16:05:18.693]                     if (!res || file_test("-f", pathname_tmp)) {
[16:05:18.693]                       fi_tmp <- file.info(pathname_tmp)
[16:05:18.693]                       fi <- file.info(pathname)
[16:05:18.693]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[16:05:18.693]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:05:18.693]                         fi_tmp[["mtime"]], sQuote(pathname), 
[16:05:18.693]                         fi[["size"]], fi[["mtime"]])
[16:05:18.693]                       stop(msg)
[16:05:18.693]                     }
[16:05:18.693]                     invisible(pathname)
[16:05:18.693]                   }
[16:05:18.693]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[16:05:18.693]                     rootPath = tempdir()) 
[16:05:18.693]                   {
[16:05:18.693]                     obj <- list(time = Sys.time(), condition = cond)
[16:05:18.693]                     file <- tempfile(pattern = class(cond)[1], 
[16:05:18.693]                       tmpdir = path, fileext = ".rds")
[16:05:18.693]                     save_rds(obj, file)
[16:05:18.693]                   }
[16:05:18.693]                   saveImmediateCondition(cond, path = "/tmp/RtmpCqPaVf/.future/immediateConditions")
[16:05:18.693]                   muffleCondition <- function (cond, pattern = "^muffle") 
[16:05:18.693]                   {
[16:05:18.693]                     inherits <- base::inherits
[16:05:18.693]                     invokeRestart <- base::invokeRestart
[16:05:18.693]                     is.null <- base::is.null
[16:05:18.693]                     muffled <- FALSE
[16:05:18.693]                     if (inherits(cond, "message")) {
[16:05:18.693]                       muffled <- grepl(pattern, "muffleMessage")
[16:05:18.693]                       if (muffled) 
[16:05:18.693]                         invokeRestart("muffleMessage")
[16:05:18.693]                     }
[16:05:18.693]                     else if (inherits(cond, "warning")) {
[16:05:18.693]                       muffled <- grepl(pattern, "muffleWarning")
[16:05:18.693]                       if (muffled) 
[16:05:18.693]                         invokeRestart("muffleWarning")
[16:05:18.693]                     }
[16:05:18.693]                     else if (inherits(cond, "condition")) {
[16:05:18.693]                       if (!is.null(pattern)) {
[16:05:18.693]                         computeRestarts <- base::computeRestarts
[16:05:18.693]                         grepl <- base::grepl
[16:05:18.693]                         restarts <- computeRestarts(cond)
[16:05:18.693]                         for (restart in restarts) {
[16:05:18.693]                           name <- restart$name
[16:05:18.693]                           if (is.null(name)) 
[16:05:18.693]                             next
[16:05:18.693]                           if (!grepl(pattern, name)) 
[16:05:18.693]                             next
[16:05:18.693]                           invokeRestart(restart)
[16:05:18.693]                           muffled <- TRUE
[16:05:18.693]                           break
[16:05:18.693]                         }
[16:05:18.693]                       }
[16:05:18.693]                     }
[16:05:18.693]                     invisible(muffled)
[16:05:18.693]                   }
[16:05:18.693]                   muffleCondition(cond)
[16:05:18.693]                 })
[16:05:18.693]             }))
[16:05:18.693]             future::FutureResult(value = ...future.value$value, 
[16:05:18.693]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:05:18.693]                   ...future.rng), globalenv = if (FALSE) 
[16:05:18.693]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:05:18.693]                     ...future.globalenv.names))
[16:05:18.693]                 else NULL, started = ...future.startTime, version = "1.8")
[16:05:18.693]         }, condition = base::local({
[16:05:18.693]             c <- base::c
[16:05:18.693]             inherits <- base::inherits
[16:05:18.693]             invokeRestart <- base::invokeRestart
[16:05:18.693]             length <- base::length
[16:05:18.693]             list <- base::list
[16:05:18.693]             seq.int <- base::seq.int
[16:05:18.693]             signalCondition <- base::signalCondition
[16:05:18.693]             sys.calls <- base::sys.calls
[16:05:18.693]             `[[` <- base::`[[`
[16:05:18.693]             `+` <- base::`+`
[16:05:18.693]             `<<-` <- base::`<<-`
[16:05:18.693]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:05:18.693]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:05:18.693]                   3L)]
[16:05:18.693]             }
[16:05:18.693]             function(cond) {
[16:05:18.693]                 is_error <- inherits(cond, "error")
[16:05:18.693]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:05:18.693]                   NULL)
[16:05:18.693]                 if (is_error) {
[16:05:18.693]                   sessionInformation <- function() {
[16:05:18.693]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:05:18.693]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:05:18.693]                       search = base::search(), system = base::Sys.info())
[16:05:18.693]                   }
[16:05:18.693]                   ...future.conditions[[length(...future.conditions) + 
[16:05:18.693]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:05:18.693]                     cond$call), session = sessionInformation(), 
[16:05:18.693]                     timestamp = base::Sys.time(), signaled = 0L)
[16:05:18.693]                   signalCondition(cond)
[16:05:18.693]                 }
[16:05:18.693]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:05:18.693]                 "immediateCondition"))) {
[16:05:18.693]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:05:18.693]                   ...future.conditions[[length(...future.conditions) + 
[16:05:18.693]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:05:18.693]                   if (TRUE && !signal) {
[16:05:18.693]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:05:18.693]                     {
[16:05:18.693]                       inherits <- base::inherits
[16:05:18.693]                       invokeRestart <- base::invokeRestart
[16:05:18.693]                       is.null <- base::is.null
[16:05:18.693]                       muffled <- FALSE
[16:05:18.693]                       if (inherits(cond, "message")) {
[16:05:18.693]                         muffled <- grepl(pattern, "muffleMessage")
[16:05:18.693]                         if (muffled) 
[16:05:18.693]                           invokeRestart("muffleMessage")
[16:05:18.693]                       }
[16:05:18.693]                       else if (inherits(cond, "warning")) {
[16:05:18.693]                         muffled <- grepl(pattern, "muffleWarning")
[16:05:18.693]                         if (muffled) 
[16:05:18.693]                           invokeRestart("muffleWarning")
[16:05:18.693]                       }
[16:05:18.693]                       else if (inherits(cond, "condition")) {
[16:05:18.693]                         if (!is.null(pattern)) {
[16:05:18.693]                           computeRestarts <- base::computeRestarts
[16:05:18.693]                           grepl <- base::grepl
[16:05:18.693]                           restarts <- computeRestarts(cond)
[16:05:18.693]                           for (restart in restarts) {
[16:05:18.693]                             name <- restart$name
[16:05:18.693]                             if (is.null(name)) 
[16:05:18.693]                               next
[16:05:18.693]                             if (!grepl(pattern, name)) 
[16:05:18.693]                               next
[16:05:18.693]                             invokeRestart(restart)
[16:05:18.693]                             muffled <- TRUE
[16:05:18.693]                             break
[16:05:18.693]                           }
[16:05:18.693]                         }
[16:05:18.693]                       }
[16:05:18.693]                       invisible(muffled)
[16:05:18.693]                     }
[16:05:18.693]                     muffleCondition(cond, pattern = "^muffle")
[16:05:18.693]                   }
[16:05:18.693]                 }
[16:05:18.693]                 else {
[16:05:18.693]                   if (TRUE) {
[16:05:18.693]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:05:18.693]                     {
[16:05:18.693]                       inherits <- base::inherits
[16:05:18.693]                       invokeRestart <- base::invokeRestart
[16:05:18.693]                       is.null <- base::is.null
[16:05:18.693]                       muffled <- FALSE
[16:05:18.693]                       if (inherits(cond, "message")) {
[16:05:18.693]                         muffled <- grepl(pattern, "muffleMessage")
[16:05:18.693]                         if (muffled) 
[16:05:18.693]                           invokeRestart("muffleMessage")
[16:05:18.693]                       }
[16:05:18.693]                       else if (inherits(cond, "warning")) {
[16:05:18.693]                         muffled <- grepl(pattern, "muffleWarning")
[16:05:18.693]                         if (muffled) 
[16:05:18.693]                           invokeRestart("muffleWarning")
[16:05:18.693]                       }
[16:05:18.693]                       else if (inherits(cond, "condition")) {
[16:05:18.693]                         if (!is.null(pattern)) {
[16:05:18.693]                           computeRestarts <- base::computeRestarts
[16:05:18.693]                           grepl <- base::grepl
[16:05:18.693]                           restarts <- computeRestarts(cond)
[16:05:18.693]                           for (restart in restarts) {
[16:05:18.693]                             name <- restart$name
[16:05:18.693]                             if (is.null(name)) 
[16:05:18.693]                               next
[16:05:18.693]                             if (!grepl(pattern, name)) 
[16:05:18.693]                               next
[16:05:18.693]                             invokeRestart(restart)
[16:05:18.693]                             muffled <- TRUE
[16:05:18.693]                             break
[16:05:18.693]                           }
[16:05:18.693]                         }
[16:05:18.693]                       }
[16:05:18.693]                       invisible(muffled)
[16:05:18.693]                     }
[16:05:18.693]                     muffleCondition(cond, pattern = "^muffle")
[16:05:18.693]                   }
[16:05:18.693]                 }
[16:05:18.693]             }
[16:05:18.693]         }))
[16:05:18.693]     }, error = function(ex) {
[16:05:18.693]         base::structure(base::list(value = NULL, visible = NULL, 
[16:05:18.693]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:05:18.693]                 ...future.rng), started = ...future.startTime, 
[16:05:18.693]             finished = Sys.time(), session_uuid = NA_character_, 
[16:05:18.693]             version = "1.8"), class = "FutureResult")
[16:05:18.693]     }, finally = {
[16:05:18.693]         if (!identical(...future.workdir, getwd())) 
[16:05:18.693]             setwd(...future.workdir)
[16:05:18.693]         {
[16:05:18.693]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:05:18.693]                 ...future.oldOptions$nwarnings <- NULL
[16:05:18.693]             }
[16:05:18.693]             base::options(...future.oldOptions)
[16:05:18.693]             if (.Platform$OS.type == "windows") {
[16:05:18.693]                 old_names <- names(...future.oldEnvVars)
[16:05:18.693]                 envs <- base::Sys.getenv()
[16:05:18.693]                 names <- names(envs)
[16:05:18.693]                 common <- intersect(names, old_names)
[16:05:18.693]                 added <- setdiff(names, old_names)
[16:05:18.693]                 removed <- setdiff(old_names, names)
[16:05:18.693]                 changed <- common[...future.oldEnvVars[common] != 
[16:05:18.693]                   envs[common]]
[16:05:18.693]                 NAMES <- toupper(changed)
[16:05:18.693]                 args <- list()
[16:05:18.693]                 for (kk in seq_along(NAMES)) {
[16:05:18.693]                   name <- changed[[kk]]
[16:05:18.693]                   NAME <- NAMES[[kk]]
[16:05:18.693]                   if (name != NAME && is.element(NAME, old_names)) 
[16:05:18.693]                     next
[16:05:18.693]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:05:18.693]                 }
[16:05:18.693]                 NAMES <- toupper(added)
[16:05:18.693]                 for (kk in seq_along(NAMES)) {
[16:05:18.693]                   name <- added[[kk]]
[16:05:18.693]                   NAME <- NAMES[[kk]]
[16:05:18.693]                   if (name != NAME && is.element(NAME, old_names)) 
[16:05:18.693]                     next
[16:05:18.693]                   args[[name]] <- ""
[16:05:18.693]                 }
[16:05:18.693]                 NAMES <- toupper(removed)
[16:05:18.693]                 for (kk in seq_along(NAMES)) {
[16:05:18.693]                   name <- removed[[kk]]
[16:05:18.693]                   NAME <- NAMES[[kk]]
[16:05:18.693]                   if (name != NAME && is.element(NAME, old_names)) 
[16:05:18.693]                     next
[16:05:18.693]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:05:18.693]                 }
[16:05:18.693]                 if (length(args) > 0) 
[16:05:18.693]                   base::do.call(base::Sys.setenv, args = args)
[16:05:18.693]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:05:18.693]             }
[16:05:18.693]             else {
[16:05:18.693]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:05:18.693]             }
[16:05:18.693]             {
[16:05:18.693]                 if (base::length(...future.futureOptionsAdded) > 
[16:05:18.693]                   0L) {
[16:05:18.693]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:05:18.693]                   base::names(opts) <- ...future.futureOptionsAdded
[16:05:18.693]                   base::options(opts)
[16:05:18.693]                 }
[16:05:18.693]                 {
[16:05:18.693]                   {
[16:05:18.693]                     base::options(mc.cores = ...future.mc.cores.old)
[16:05:18.693]                     NULL
[16:05:18.693]                   }
[16:05:18.693]                   options(future.plan = NULL)
[16:05:18.693]                   if (is.na(NA_character_)) 
[16:05:18.693]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:05:18.693]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:05:18.693]                   future::plan(list(function (..., workers = availableCores(constraints = "multicore"), 
[16:05:18.693]                     envir = parent.frame()) 
[16:05:18.693]                   {
[16:05:18.693]                     default_workers <- missing(workers)
[16:05:18.693]                     if (is.function(workers)) 
[16:05:18.693]                       workers <- workers()
[16:05:18.693]                     workers <- structure(as.integer(workers), 
[16:05:18.693]                       class = class(workers))
[16:05:18.693]                     stop_if_not(is.finite(workers), workers >= 
[16:05:18.693]                       1L)
[16:05:18.693]                     if ((workers == 1L && !inherits(workers, 
[16:05:18.693]                       "AsIs")) || !supportsMulticore(warn = TRUE)) {
[16:05:18.693]                       if (default_workers) 
[16:05:18.693]                         supportsMulticore(warn = TRUE)
[16:05:18.693]                       return(sequential(..., envir = envir))
[16:05:18.693]                     }
[16:05:18.693]                     oopts <- options(mc.cores = workers)
[16:05:18.693]                     on.exit(options(oopts))
[16:05:18.693]                     future <- MulticoreFuture(..., workers = workers, 
[16:05:18.693]                       envir = envir)
[16:05:18.693]                     if (!future$lazy) 
[16:05:18.693]                       future <- run(future)
[16:05:18.693]                     invisible(future)
[16:05:18.693]                   }), .cleanup = FALSE, .init = FALSE)
[16:05:18.693]                 }
[16:05:18.693]             }
[16:05:18.693]         }
[16:05:18.693]     })
[16:05:18.693]     if (TRUE) {
[16:05:18.693]         base::sink(type = "output", split = FALSE)
[16:05:18.693]         if (TRUE) {
[16:05:18.693]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:05:18.693]         }
[16:05:18.693]         else {
[16:05:18.693]             ...future.result["stdout"] <- base::list(NULL)
[16:05:18.693]         }
[16:05:18.693]         base::close(...future.stdout)
[16:05:18.693]         ...future.stdout <- NULL
[16:05:18.693]     }
[16:05:18.693]     ...future.result$conditions <- ...future.conditions
[16:05:18.693]     ...future.result$finished <- base::Sys.time()
[16:05:18.693]     ...future.result
[16:05:18.693] }
[16:05:18.696] requestCore(): workers = 2
[16:05:18.698] MulticoreFuture started
[16:05:18.698] - Launch lazy future ... done
[16:05:18.698] run() for ‘MulticoreFuture’ ... done
[16:05:18.699] result() for MulticoreFuture ...
[16:05:18.699] plan(): Setting new future strategy stack:
[16:05:18.699] List of future strategies:
[16:05:18.699] 1. sequential:
[16:05:18.699]    - args: function (..., envir = parent.frame())
[16:05:18.699]    - tweaked: FALSE
[16:05:18.699]    - call: NULL
[16:05:18.700] plan(): nbrOfWorkers() = 1
[16:05:18.703] plan(): Setting new future strategy stack:
[16:05:18.703] List of future strategies:
[16:05:18.703] 1. multicore:
[16:05:18.703]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[16:05:18.703]    - tweaked: FALSE
[16:05:18.703]    - call: plan(multicore)
[16:05:18.708] plan(): nbrOfWorkers() = 2
[16:05:18.709] result() for MulticoreFuture ...
[16:05:18.709] result() for MulticoreFuture ... done
[16:05:18.709] result() for MulticoreFuture ... done
[16:05:18.709] result() for MulticoreFuture ...
[16:05:18.709] result() for MulticoreFuture ... done
Number of OpenMP threads in ‘MulticoreFuture’ future: 1
'future.fork.multithreading.enable' = FALSE ... DONE
> 
> message("*** multicore() and multi-threading ... DONE")
*** multicore() and multi-threading ... DONE
> 
> source("incl/end.R")
[16:05:18.710] plan(): Setting new future strategy stack:
[16:05:18.711] List of future strategies:
[16:05:18.711] 1. FutureStrategy:
[16:05:18.711]    - args: function (..., envir = parent.frame())
[16:05:18.711]    - tweaked: FALSE
[16:05:18.711]    - call: future::plan(oplan)
[16:05:18.711] plan(): nbrOfWorkers() = 1
> 
