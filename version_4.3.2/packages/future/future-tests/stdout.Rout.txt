
R version 4.3.2 (2023-10-31) -- "Eye Holes"
Copyright (C) 2023 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> source("incl/start.R")
[13:25:11.251] plan(): Setting new future strategy stack:
[13:25:11.252] List of future strategies:
[13:25:11.252] 1. sequential:
[13:25:11.252]    - args: function (..., envir = parent.frame())
[13:25:11.252]    - tweaked: FALSE
[13:25:11.252]    - call: future::plan("sequential")
[13:25:11.267] plan(): nbrOfWorkers() = 1
> 
> message("*** Standard output ...")
*** Standard output ...
> 
> truth_rows <- utils::capture.output({
+   print(1:50)
+   str(1:50)
+   cat(letters, sep = "-")
+   cat(1:6, collapse = "\n")
+   write.table(datasets::iris[1:10,], sep = "\t")
+ })
> truth <- paste0(paste(truth_rows, collapse = "\n"), "\n")
> print(truth)
[1] " [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25\n[26] 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50\n int [1:50] 1 2 3 4 5 6 7 8 9 10 ...\na-b-c-d-e-f-g-h-i-j-k-l-m-n-o-p-q-r-s-t-u-v-w-x-y-z1 2 3 4 5 6 \n\"Sepal.Length\"\t\"Sepal.Width\"\t\"Petal.Length\"\t\"Petal.Width\"\t\"Species\"\n\"1\"\t5.1\t3.5\t1.4\t0.2\t\"setosa\"\n\"2\"\t4.9\t3\t1.4\t0.2\t\"setosa\"\n\"3\"\t4.7\t3.2\t1.3\t0.2\t\"setosa\"\n\"4\"\t4.6\t3.1\t1.5\t0.2\t\"setosa\"\n\"5\"\t5\t3.6\t1.4\t0.2\t\"setosa\"\n\"6\"\t5.4\t3.9\t1.7\t0.4\t\"setosa\"\n\"7\"\t4.6\t3.4\t1.4\t0.3\t\"setosa\"\n\"8\"\t5\t3.4\t1.5\t0.2\t\"setosa\"\n\"9\"\t4.4\t2.9\t1.4\t0.2\t\"setosa\"\n\"10\"\t4.9\t3.1\t1.5\t0.1\t\"setosa\"\n"
> 
> for (cores in seq_len(min(2L, availCores))) {
+   message(sprintf("Testing with %d cores ...", cores))
+   options(mc.cores = cores)
+ 
+   for (strategy in supportedStrategies(cores)) {
+     message(sprintf("%s ...", strategy))
+     plan(strategy)
+ 
+     for (stdout in c(TRUE, FALSE, NA)) {
+       message(sprintf("- stdout = %s", stdout))
+ 
+       f <- future({
+         print(1:50)
+         str(1:50)
+         cat(letters, sep = "-")
+         cat(1:6, collapse = "\n")
+         write.table(datasets::iris[1:10,], sep = "\t")
+         42L
+       }, stdout = stdout)
+       r <- result(f)
+       str(r)
+       stopifnot(value(f) == 42L)
+       if (is.na(stdout)) {
+         stopifnot(is.null(r$stdout) || r$stdout == "")
+       } else if (stdout) {
+         print(r)
+         stopifnot(identical(r$stdout, truth))
+       } else {
+         stopifnot(is.null(r$stdout))
+       }
+ 
+       v %<-% {
+         print(1:50)
+         str(1:50)
+         cat(letters, sep = "-")
+         cat(1:6, collapse = "\n")
+         write.table(datasets::iris[1:10,], sep = "\t")
+         42L
+       } %stdout% stdout
+       out <- utils::capture.output(y <- v)
+       stopifnot(y == 42L)
+       if (is.na(stdout)) {
+         ## Single-core multisession => sequential
+         if (cores > 1L || strategy != "multisession") {
+           stopifnot(out == "")
+         }
+       } else if (stdout) {
+         print(out)
+         stopifnot(identical(out, truth_rows))
+       } else {
+         stopifnot(out == "")
+       }
+ 
+       message("- stdout = structure(TRUE, drop = TRUE)")
+       f <- future(print(42), stdout = structure(TRUE, drop = TRUE))
+       r <- result(f)
+       stopifnot(inherits(r$stdout, "character"))
+       v <- value(f)
+       r <- result(f)
+       stopifnot(is.null(r$stdout))
+     } ## for (stdout ...)
+ 
+     message(sprintf("%s ... done", strategy))
+   } ## for (strategy ...)
+ 
+   message(sprintf("Testing with %d cores ... done", cores))
+ } ## for (cores ...)
Testing with 1 cores ...
sequential ...
[13:25:11.315] plan(): Setting new future strategy stack:
[13:25:11.315] List of future strategies:
[13:25:11.315] 1. sequential:
[13:25:11.315]    - args: function (..., envir = parent.frame())
[13:25:11.315]    - tweaked: FALSE
[13:25:11.315]    - call: plan(strategy)
[13:25:11.326] plan(): nbrOfWorkers() = 1
- stdout = TRUE
[13:25:11.327] getGlobalsAndPackages() ...
[13:25:11.327] Searching for globals...
[13:25:11.338] - globals found: [9] ‘{’, ‘print’, ‘:’, ‘str’, ‘cat’, ‘letters’, ‘write.table’, ‘[’, ‘::’
[13:25:11.338] Searching for globals ... DONE
[13:25:11.338] Resolving globals: FALSE
[13:25:11.339] 
[13:25:11.339] - packages: [1] ‘utils’
[13:25:11.339] getGlobalsAndPackages() ... DONE
[13:25:11.340] run() for ‘Future’ ...
[13:25:11.340] - state: ‘created’
[13:25:11.340] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[13:25:11.341] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[13:25:11.341] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[13:25:11.341]   - Field: ‘label’
[13:25:11.341]   - Field: ‘local’
[13:25:11.341]   - Field: ‘owner’
[13:25:11.341]   - Field: ‘envir’
[13:25:11.341]   - Field: ‘packages’
[13:25:11.341]   - Field: ‘gc’
[13:25:11.341]   - Field: ‘conditions’
[13:25:11.341]   - Field: ‘expr’
[13:25:11.342]   - Field: ‘uuid’
[13:25:11.342]   - Field: ‘seed’
[13:25:11.342]   - Field: ‘version’
[13:25:11.342]   - Field: ‘result’
[13:25:11.342]   - Field: ‘asynchronous’
[13:25:11.342]   - Field: ‘calls’
[13:25:11.342]   - Field: ‘globals’
[13:25:11.342]   - Field: ‘stdout’
[13:25:11.342]   - Field: ‘earlySignal’
[13:25:11.342]   - Field: ‘lazy’
[13:25:11.342]   - Field: ‘state’
[13:25:11.343] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[13:25:11.343] - Launch lazy future ...
[13:25:11.343] Packages needed by the future expression (n = 1): ‘utils’
[13:25:11.344] Packages needed by future strategies (n = 0): <none>
[13:25:11.344] {
[13:25:11.344]     {
[13:25:11.344]         {
[13:25:11.344]             ...future.startTime <- base::Sys.time()
[13:25:11.344]             {
[13:25:11.344]                 {
[13:25:11.344]                   {
[13:25:11.344]                     {
[13:25:11.344]                       base::local({
[13:25:11.344]                         has_future <- base::requireNamespace("future", 
[13:25:11.344]                           quietly = TRUE)
[13:25:11.344]                         if (has_future) {
[13:25:11.344]                           ns <- base::getNamespace("future")
[13:25:11.344]                           version <- ns[[".package"]][["version"]]
[13:25:11.344]                           if (is.null(version)) 
[13:25:11.344]                             version <- utils::packageVersion("future")
[13:25:11.344]                         }
[13:25:11.344]                         else {
[13:25:11.344]                           version <- NULL
[13:25:11.344]                         }
[13:25:11.344]                         if (!has_future || version < "1.8.0") {
[13:25:11.344]                           info <- base::c(r_version = base::gsub("R version ", 
[13:25:11.344]                             "", base::R.version$version.string), 
[13:25:11.344]                             platform = base::sprintf("%s (%s-bit)", 
[13:25:11.344]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:25:11.344]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:25:11.344]                               "release", "version")], collapse = " "), 
[13:25:11.344]                             hostname = base::Sys.info()[["nodename"]])
[13:25:11.344]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:25:11.344]                             info)
[13:25:11.344]                           info <- base::paste(info, collapse = "; ")
[13:25:11.344]                           if (!has_future) {
[13:25:11.344]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:25:11.344]                               info)
[13:25:11.344]                           }
[13:25:11.344]                           else {
[13:25:11.344]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:25:11.344]                               info, version)
[13:25:11.344]                           }
[13:25:11.344]                           base::stop(msg)
[13:25:11.344]                         }
[13:25:11.344]                       })
[13:25:11.344]                     }
[13:25:11.344]                     base::local({
[13:25:11.344]                       for (pkg in "utils") {
[13:25:11.344]                         base::loadNamespace(pkg)
[13:25:11.344]                         base::library(pkg, character.only = TRUE)
[13:25:11.344]                       }
[13:25:11.344]                     })
[13:25:11.344]                   }
[13:25:11.344]                   options(future.plan = NULL)
[13:25:11.344]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:25:11.344]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:25:11.344]                 }
[13:25:11.344]                 ...future.workdir <- getwd()
[13:25:11.344]             }
[13:25:11.344]             ...future.oldOptions <- base::as.list(base::.Options)
[13:25:11.344]             ...future.oldEnvVars <- base::Sys.getenv()
[13:25:11.344]         }
[13:25:11.344]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:25:11.344]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:25:11.344]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:25:11.344]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:25:11.344]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:25:11.344]             future.stdout.windows.reencode = NULL, width = 80L)
[13:25:11.344]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:25:11.344]             base::names(...future.oldOptions))
[13:25:11.344]     }
[13:25:11.344]     if (FALSE) {
[13:25:11.344]     }
[13:25:11.344]     else {
[13:25:11.344]         if (TRUE) {
[13:25:11.344]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:25:11.344]                 open = "w")
[13:25:11.344]         }
[13:25:11.344]         else {
[13:25:11.344]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:25:11.344]                 windows = "NUL", "/dev/null"), open = "w")
[13:25:11.344]         }
[13:25:11.344]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:25:11.344]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:25:11.344]             base::sink(type = "output", split = FALSE)
[13:25:11.344]             base::close(...future.stdout)
[13:25:11.344]         }, add = TRUE)
[13:25:11.344]     }
[13:25:11.344]     ...future.frame <- base::sys.nframe()
[13:25:11.344]     ...future.conditions <- base::list()
[13:25:11.344]     ...future.rng <- base::globalenv()$.Random.seed
[13:25:11.344]     if (FALSE) {
[13:25:11.344]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:25:11.344]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:25:11.344]     }
[13:25:11.344]     ...future.result <- base::tryCatch({
[13:25:11.344]         base::withCallingHandlers({
[13:25:11.344]             ...future.value <- base::withVisible(base::local({
[13:25:11.344]                 print(1:50)
[13:25:11.344]                 str(1:50)
[13:25:11.344]                 cat(letters, sep = "-")
[13:25:11.344]                 cat(1:6, collapse = "\n")
[13:25:11.344]                 write.table(datasets::iris[1:10, ], sep = "\t")
[13:25:11.344]                 42L
[13:25:11.344]             }))
[13:25:11.344]             future::FutureResult(value = ...future.value$value, 
[13:25:11.344]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:25:11.344]                   ...future.rng), globalenv = if (FALSE) 
[13:25:11.344]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:25:11.344]                     ...future.globalenv.names))
[13:25:11.344]                 else NULL, started = ...future.startTime, version = "1.8")
[13:25:11.344]         }, condition = base::local({
[13:25:11.344]             c <- base::c
[13:25:11.344]             inherits <- base::inherits
[13:25:11.344]             invokeRestart <- base::invokeRestart
[13:25:11.344]             length <- base::length
[13:25:11.344]             list <- base::list
[13:25:11.344]             seq.int <- base::seq.int
[13:25:11.344]             signalCondition <- base::signalCondition
[13:25:11.344]             sys.calls <- base::sys.calls
[13:25:11.344]             `[[` <- base::`[[`
[13:25:11.344]             `+` <- base::`+`
[13:25:11.344]             `<<-` <- base::`<<-`
[13:25:11.344]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:25:11.344]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:25:11.344]                   3L)]
[13:25:11.344]             }
[13:25:11.344]             function(cond) {
[13:25:11.344]                 is_error <- inherits(cond, "error")
[13:25:11.344]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:25:11.344]                   NULL)
[13:25:11.344]                 if (is_error) {
[13:25:11.344]                   sessionInformation <- function() {
[13:25:11.344]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:25:11.344]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:25:11.344]                       search = base::search(), system = base::Sys.info())
[13:25:11.344]                   }
[13:25:11.344]                   ...future.conditions[[length(...future.conditions) + 
[13:25:11.344]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:25:11.344]                     cond$call), session = sessionInformation(), 
[13:25:11.344]                     timestamp = base::Sys.time(), signaled = 0L)
[13:25:11.344]                   signalCondition(cond)
[13:25:11.344]                 }
[13:25:11.344]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:25:11.344]                 "immediateCondition"))) {
[13:25:11.344]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:25:11.344]                   ...future.conditions[[length(...future.conditions) + 
[13:25:11.344]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:25:11.344]                   if (TRUE && !signal) {
[13:25:11.344]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:25:11.344]                     {
[13:25:11.344]                       inherits <- base::inherits
[13:25:11.344]                       invokeRestart <- base::invokeRestart
[13:25:11.344]                       is.null <- base::is.null
[13:25:11.344]                       muffled <- FALSE
[13:25:11.344]                       if (inherits(cond, "message")) {
[13:25:11.344]                         muffled <- grepl(pattern, "muffleMessage")
[13:25:11.344]                         if (muffled) 
[13:25:11.344]                           invokeRestart("muffleMessage")
[13:25:11.344]                       }
[13:25:11.344]                       else if (inherits(cond, "warning")) {
[13:25:11.344]                         muffled <- grepl(pattern, "muffleWarning")
[13:25:11.344]                         if (muffled) 
[13:25:11.344]                           invokeRestart("muffleWarning")
[13:25:11.344]                       }
[13:25:11.344]                       else if (inherits(cond, "condition")) {
[13:25:11.344]                         if (!is.null(pattern)) {
[13:25:11.344]                           computeRestarts <- base::computeRestarts
[13:25:11.344]                           grepl <- base::grepl
[13:25:11.344]                           restarts <- computeRestarts(cond)
[13:25:11.344]                           for (restart in restarts) {
[13:25:11.344]                             name <- restart$name
[13:25:11.344]                             if (is.null(name)) 
[13:25:11.344]                               next
[13:25:11.344]                             if (!grepl(pattern, name)) 
[13:25:11.344]                               next
[13:25:11.344]                             invokeRestart(restart)
[13:25:11.344]                             muffled <- TRUE
[13:25:11.344]                             break
[13:25:11.344]                           }
[13:25:11.344]                         }
[13:25:11.344]                       }
[13:25:11.344]                       invisible(muffled)
[13:25:11.344]                     }
[13:25:11.344]                     muffleCondition(cond, pattern = "^muffle")
[13:25:11.344]                   }
[13:25:11.344]                 }
[13:25:11.344]                 else {
[13:25:11.344]                   if (TRUE) {
[13:25:11.344]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:25:11.344]                     {
[13:25:11.344]                       inherits <- base::inherits
[13:25:11.344]                       invokeRestart <- base::invokeRestart
[13:25:11.344]                       is.null <- base::is.null
[13:25:11.344]                       muffled <- FALSE
[13:25:11.344]                       if (inherits(cond, "message")) {
[13:25:11.344]                         muffled <- grepl(pattern, "muffleMessage")
[13:25:11.344]                         if (muffled) 
[13:25:11.344]                           invokeRestart("muffleMessage")
[13:25:11.344]                       }
[13:25:11.344]                       else if (inherits(cond, "warning")) {
[13:25:11.344]                         muffled <- grepl(pattern, "muffleWarning")
[13:25:11.344]                         if (muffled) 
[13:25:11.344]                           invokeRestart("muffleWarning")
[13:25:11.344]                       }
[13:25:11.344]                       else if (inherits(cond, "condition")) {
[13:25:11.344]                         if (!is.null(pattern)) {
[13:25:11.344]                           computeRestarts <- base::computeRestarts
[13:25:11.344]                           grepl <- base::grepl
[13:25:11.344]                           restarts <- computeRestarts(cond)
[13:25:11.344]                           for (restart in restarts) {
[13:25:11.344]                             name <- restart$name
[13:25:11.344]                             if (is.null(name)) 
[13:25:11.344]                               next
[13:25:11.344]                             if (!grepl(pattern, name)) 
[13:25:11.344]                               next
[13:25:11.344]                             invokeRestart(restart)
[13:25:11.344]                             muffled <- TRUE
[13:25:11.344]                             break
[13:25:11.344]                           }
[13:25:11.344]                         }
[13:25:11.344]                       }
[13:25:11.344]                       invisible(muffled)
[13:25:11.344]                     }
[13:25:11.344]                     muffleCondition(cond, pattern = "^muffle")
[13:25:11.344]                   }
[13:25:11.344]                 }
[13:25:11.344]             }
[13:25:11.344]         }))
[13:25:11.344]     }, error = function(ex) {
[13:25:11.344]         base::structure(base::list(value = NULL, visible = NULL, 
[13:25:11.344]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:25:11.344]                 ...future.rng), started = ...future.startTime, 
[13:25:11.344]             finished = Sys.time(), session_uuid = NA_character_, 
[13:25:11.344]             version = "1.8"), class = "FutureResult")
[13:25:11.344]     }, finally = {
[13:25:11.344]         if (!identical(...future.workdir, getwd())) 
[13:25:11.344]             setwd(...future.workdir)
[13:25:11.344]         {
[13:25:11.344]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:25:11.344]                 ...future.oldOptions$nwarnings <- NULL
[13:25:11.344]             }
[13:25:11.344]             base::options(...future.oldOptions)
[13:25:11.344]             if (.Platform$OS.type == "windows") {
[13:25:11.344]                 old_names <- names(...future.oldEnvVars)
[13:25:11.344]                 envs <- base::Sys.getenv()
[13:25:11.344]                 names <- names(envs)
[13:25:11.344]                 common <- intersect(names, old_names)
[13:25:11.344]                 added <- setdiff(names, old_names)
[13:25:11.344]                 removed <- setdiff(old_names, names)
[13:25:11.344]                 changed <- common[...future.oldEnvVars[common] != 
[13:25:11.344]                   envs[common]]
[13:25:11.344]                 NAMES <- toupper(changed)
[13:25:11.344]                 args <- list()
[13:25:11.344]                 for (kk in seq_along(NAMES)) {
[13:25:11.344]                   name <- changed[[kk]]
[13:25:11.344]                   NAME <- NAMES[[kk]]
[13:25:11.344]                   if (name != NAME && is.element(NAME, old_names)) 
[13:25:11.344]                     next
[13:25:11.344]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:25:11.344]                 }
[13:25:11.344]                 NAMES <- toupper(added)
[13:25:11.344]                 for (kk in seq_along(NAMES)) {
[13:25:11.344]                   name <- added[[kk]]
[13:25:11.344]                   NAME <- NAMES[[kk]]
[13:25:11.344]                   if (name != NAME && is.element(NAME, old_names)) 
[13:25:11.344]                     next
[13:25:11.344]                   args[[name]] <- ""
[13:25:11.344]                 }
[13:25:11.344]                 NAMES <- toupper(removed)
[13:25:11.344]                 for (kk in seq_along(NAMES)) {
[13:25:11.344]                   name <- removed[[kk]]
[13:25:11.344]                   NAME <- NAMES[[kk]]
[13:25:11.344]                   if (name != NAME && is.element(NAME, old_names)) 
[13:25:11.344]                     next
[13:25:11.344]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:25:11.344]                 }
[13:25:11.344]                 if (length(args) > 0) 
[13:25:11.344]                   base::do.call(base::Sys.setenv, args = args)
[13:25:11.344]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:25:11.344]             }
[13:25:11.344]             else {
[13:25:11.344]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:25:11.344]             }
[13:25:11.344]             {
[13:25:11.344]                 if (base::length(...future.futureOptionsAdded) > 
[13:25:11.344]                   0L) {
[13:25:11.344]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:25:11.344]                   base::names(opts) <- ...future.futureOptionsAdded
[13:25:11.344]                   base::options(opts)
[13:25:11.344]                 }
[13:25:11.344]                 {
[13:25:11.344]                   {
[13:25:11.344]                     NULL
[13:25:11.344]                     RNGkind("Mersenne-Twister")
[13:25:11.344]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[13:25:11.344]                       inherits = FALSE)
[13:25:11.344]                   }
[13:25:11.344]                   options(future.plan = NULL)
[13:25:11.344]                   if (is.na(NA_character_)) 
[13:25:11.344]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:25:11.344]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:25:11.344]                   future::plan(list(function (..., envir = parent.frame()) 
[13:25:11.344]                   {
[13:25:11.344]                     future <- SequentialFuture(..., envir = envir)
[13:25:11.344]                     if (!future$lazy) 
[13:25:11.344]                       future <- run(future)
[13:25:11.344]                     invisible(future)
[13:25:11.344]                   }), .cleanup = FALSE, .init = FALSE)
[13:25:11.344]                 }
[13:25:11.344]             }
[13:25:11.344]         }
[13:25:11.344]     })
[13:25:11.344]     if (TRUE) {
[13:25:11.344]         base::sink(type = "output", split = FALSE)
[13:25:11.344]         if (TRUE) {
[13:25:11.344]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:25:11.344]         }
[13:25:11.344]         else {
[13:25:11.344]             ...future.result["stdout"] <- base::list(NULL)
[13:25:11.344]         }
[13:25:11.344]         base::close(...future.stdout)
[13:25:11.344]         ...future.stdout <- NULL
[13:25:11.344]     }
[13:25:11.344]     ...future.result$conditions <- ...future.conditions
[13:25:11.344]     ...future.result$finished <- base::Sys.time()
[13:25:11.344]     ...future.result
[13:25:11.344] }
[13:25:11.347] plan(): Setting new future strategy stack:
[13:25:11.347] List of future strategies:
[13:25:11.347] 1. sequential:
[13:25:11.347]    - args: function (..., envir = parent.frame())
[13:25:11.347]    - tweaked: FALSE
[13:25:11.347]    - call: NULL
[13:25:11.347] plan(): nbrOfWorkers() = 1
[13:25:11.349] plan(): Setting new future strategy stack:
[13:25:11.349] List of future strategies:
[13:25:11.349] 1. sequential:
[13:25:11.349]    - args: function (..., envir = parent.frame())
[13:25:11.349]    - tweaked: FALSE
[13:25:11.349]    - call: plan(strategy)
[13:25:11.349] plan(): nbrOfWorkers() = 1
[13:25:11.350] SequentialFuture started (and completed)
[13:25:11.350] - Launch lazy future ... done
[13:25:11.350] run() for ‘SequentialFuture’ ... done
List of 11
 $ value       : int 42
 $ visible     : logi TRUE
 $ stdout      : chr " [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25\n[26] 26 27 28 29 30 31 32 33 3"| __truncated__
 $ conditions  : list()
 $ rng         : logi FALSE
 $ globalenv   : NULL
 $ started     : POSIXct[1:1], format: "2025-01-07 13:25:11"
 $ finished    : POSIXct[1:1], format: "2025-01-07 13:25:11"
 $ session_uuid: chr "21b4b08a-5b62-ff51-4ba1-f9f5689a9c0b"
  ..- attr(*, "source")=List of 5
  .. ..$ host  : Named chr "47b98e4ec3a9"
  .. .. ..- attr(*, "names")= chr "HOSTNAME"
  .. ..$ info  : Named chr [1:8] "Linux" "6.5.0-1025-azure" "#26~22.04.1-Ubuntu SMP Thu Jul 11 22:33:04 UTC 2024" "47b98e4ec3a9" ...
  .. .. ..- attr(*, "names")= chr [1:8] "sysname" "release" "version" "nodename" ...
  .. ..$ pid   : int 93492
  .. ..$ time  : POSIXct[1:1], format: "2025-01-07 13:25:11"
  .. ..$ random: int 2147483647
 $ r_info      :List of 4
  ..$ version      :Classes 'R_system_version', 'package_version', 'numeric_version'  hidden list of 1
  .. ..$ : int [1:3] 4 3 2
  ..$ os           : chr "unix"
  ..$ os_name      : chr "Linux"
  ..$ captures_utf8: logi TRUE
 $ version     : chr "1.8"
 - attr(*, "class")= chr "FutureResult"
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25
[26] 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50
 int [1:50] 1 2 3 4 5 6 7 8 9 10 ...
a-b-c-d-e-f-g-h-i-j-k-l-m-n-o-p-q-r-s-t-u-v-w-x-y-z1 2 3 4 5 6 
"Sepal.Length"	"Sepal.Width"	"Petal.Length"	"Petal.Width"	"Species"
"1"	5.1	3.5	1.4	0.2	"setosa"
"2"	4.9	3	1.4	0.2	"setosa"
"3"	4.7	3.2	1.3	0.2	"setosa"
"4"	4.6	3.1	1.5	0.2	"setosa"
"5"	5	3.6	1.4	0.2	"setosa"
"6"	5.4	3.9	1.7	0.4	"setosa"
"7"	4.6	3.4	1.4	0.3	"setosa"
"8"	5	3.4	1.5	0.2	"setosa"
"9"	4.4	2.9	1.4	0.2	"setosa"
"10"	4.9	3.1	1.5	0.1	"setosa"
FutureResult:
value: ‘integer’
visible: TRUE
stdout: character
conditions: [n = 0] 
RNG used: FALSE
duration: 0.003255606 secs (started 2025-01-07 13:25:11.346822)
version: 1.8
[13:25:11.360] getGlobalsAndPackages() ...
[13:25:11.360] Searching for globals...
[13:25:11.366] - globals found: [9] ‘{’, ‘print’, ‘:’, ‘str’, ‘cat’, ‘letters’, ‘write.table’, ‘[’, ‘::’
[13:25:11.366] Searching for globals ... DONE
[13:25:11.366] Resolving globals: FALSE
[13:25:11.366] 
[13:25:11.366] - packages: [1] ‘utils’
[13:25:11.367] getGlobalsAndPackages() ... DONE
[13:25:11.367] run() for ‘Future’ ...
[13:25:11.367] - state: ‘created’
[13:25:11.367] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[13:25:11.367] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[13:25:11.367] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[13:25:11.367]   - Field: ‘label’
[13:25:11.368]   - Field: ‘local’
[13:25:11.368]   - Field: ‘owner’
[13:25:11.368]   - Field: ‘envir’
[13:25:11.368]   - Field: ‘packages’
[13:25:11.368]   - Field: ‘gc’
[13:25:11.368]   - Field: ‘conditions’
[13:25:11.368]   - Field: ‘expr’
[13:25:11.368]   - Field: ‘uuid’
[13:25:11.368]   - Field: ‘seed’
[13:25:11.368]   - Field: ‘version’
[13:25:11.369]   - Field: ‘result’
[13:25:11.369]   - Field: ‘asynchronous’
[13:25:11.369]   - Field: ‘calls’
[13:25:11.369]   - Field: ‘globals’
[13:25:11.369]   - Field: ‘stdout’
[13:25:11.369]   - Field: ‘earlySignal’
[13:25:11.369]   - Field: ‘lazy’
[13:25:11.369]   - Field: ‘state’
[13:25:11.369] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[13:25:11.369] - Launch lazy future ...
[13:25:11.370] Packages needed by the future expression (n = 1): ‘utils’
[13:25:11.370] Packages needed by future strategies (n = 0): <none>
[13:25:11.370] {
[13:25:11.370]     {
[13:25:11.370]         {
[13:25:11.370]             ...future.startTime <- base::Sys.time()
[13:25:11.370]             {
[13:25:11.370]                 {
[13:25:11.370]                   {
[13:25:11.370]                     {
[13:25:11.370]                       base::local({
[13:25:11.370]                         has_future <- base::requireNamespace("future", 
[13:25:11.370]                           quietly = TRUE)
[13:25:11.370]                         if (has_future) {
[13:25:11.370]                           ns <- base::getNamespace("future")
[13:25:11.370]                           version <- ns[[".package"]][["version"]]
[13:25:11.370]                           if (is.null(version)) 
[13:25:11.370]                             version <- utils::packageVersion("future")
[13:25:11.370]                         }
[13:25:11.370]                         else {
[13:25:11.370]                           version <- NULL
[13:25:11.370]                         }
[13:25:11.370]                         if (!has_future || version < "1.8.0") {
[13:25:11.370]                           info <- base::c(r_version = base::gsub("R version ", 
[13:25:11.370]                             "", base::R.version$version.string), 
[13:25:11.370]                             platform = base::sprintf("%s (%s-bit)", 
[13:25:11.370]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:25:11.370]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:25:11.370]                               "release", "version")], collapse = " "), 
[13:25:11.370]                             hostname = base::Sys.info()[["nodename"]])
[13:25:11.370]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:25:11.370]                             info)
[13:25:11.370]                           info <- base::paste(info, collapse = "; ")
[13:25:11.370]                           if (!has_future) {
[13:25:11.370]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:25:11.370]                               info)
[13:25:11.370]                           }
[13:25:11.370]                           else {
[13:25:11.370]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:25:11.370]                               info, version)
[13:25:11.370]                           }
[13:25:11.370]                           base::stop(msg)
[13:25:11.370]                         }
[13:25:11.370]                       })
[13:25:11.370]                     }
[13:25:11.370]                     base::local({
[13:25:11.370]                       for (pkg in "utils") {
[13:25:11.370]                         base::loadNamespace(pkg)
[13:25:11.370]                         base::library(pkg, character.only = TRUE)
[13:25:11.370]                       }
[13:25:11.370]                     })
[13:25:11.370]                   }
[13:25:11.370]                   options(future.plan = NULL)
[13:25:11.370]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:25:11.370]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:25:11.370]                 }
[13:25:11.370]                 ...future.workdir <- getwd()
[13:25:11.370]             }
[13:25:11.370]             ...future.oldOptions <- base::as.list(base::.Options)
[13:25:11.370]             ...future.oldEnvVars <- base::Sys.getenv()
[13:25:11.370]         }
[13:25:11.370]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:25:11.370]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:25:11.370]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:25:11.370]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:25:11.370]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:25:11.370]             future.stdout.windows.reencode = NULL, width = 80L)
[13:25:11.370]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:25:11.370]             base::names(...future.oldOptions))
[13:25:11.370]     }
[13:25:11.370]     if (FALSE) {
[13:25:11.370]     }
[13:25:11.370]     else {
[13:25:11.370]         if (TRUE) {
[13:25:11.370]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:25:11.370]                 open = "w")
[13:25:11.370]         }
[13:25:11.370]         else {
[13:25:11.370]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:25:11.370]                 windows = "NUL", "/dev/null"), open = "w")
[13:25:11.370]         }
[13:25:11.370]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:25:11.370]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:25:11.370]             base::sink(type = "output", split = FALSE)
[13:25:11.370]             base::close(...future.stdout)
[13:25:11.370]         }, add = TRUE)
[13:25:11.370]     }
[13:25:11.370]     ...future.frame <- base::sys.nframe()
[13:25:11.370]     ...future.conditions <- base::list()
[13:25:11.370]     ...future.rng <- base::globalenv()$.Random.seed
[13:25:11.370]     if (FALSE) {
[13:25:11.370]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:25:11.370]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:25:11.370]     }
[13:25:11.370]     ...future.result <- base::tryCatch({
[13:25:11.370]         base::withCallingHandlers({
[13:25:11.370]             ...future.value <- base::withVisible(base::local({
[13:25:11.370]                 print(1:50)
[13:25:11.370]                 str(1:50)
[13:25:11.370]                 cat(letters, sep = "-")
[13:25:11.370]                 cat(1:6, collapse = "\n")
[13:25:11.370]                 write.table(datasets::iris[1:10, ], sep = "\t")
[13:25:11.370]                 42L
[13:25:11.370]             }))
[13:25:11.370]             future::FutureResult(value = ...future.value$value, 
[13:25:11.370]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:25:11.370]                   ...future.rng), globalenv = if (FALSE) 
[13:25:11.370]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:25:11.370]                     ...future.globalenv.names))
[13:25:11.370]                 else NULL, started = ...future.startTime, version = "1.8")
[13:25:11.370]         }, condition = base::local({
[13:25:11.370]             c <- base::c
[13:25:11.370]             inherits <- base::inherits
[13:25:11.370]             invokeRestart <- base::invokeRestart
[13:25:11.370]             length <- base::length
[13:25:11.370]             list <- base::list
[13:25:11.370]             seq.int <- base::seq.int
[13:25:11.370]             signalCondition <- base::signalCondition
[13:25:11.370]             sys.calls <- base::sys.calls
[13:25:11.370]             `[[` <- base::`[[`
[13:25:11.370]             `+` <- base::`+`
[13:25:11.370]             `<<-` <- base::`<<-`
[13:25:11.370]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:25:11.370]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:25:11.370]                   3L)]
[13:25:11.370]             }
[13:25:11.370]             function(cond) {
[13:25:11.370]                 is_error <- inherits(cond, "error")
[13:25:11.370]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:25:11.370]                   NULL)
[13:25:11.370]                 if (is_error) {
[13:25:11.370]                   sessionInformation <- function() {
[13:25:11.370]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:25:11.370]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:25:11.370]                       search = base::search(), system = base::Sys.info())
[13:25:11.370]                   }
[13:25:11.370]                   ...future.conditions[[length(...future.conditions) + 
[13:25:11.370]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:25:11.370]                     cond$call), session = sessionInformation(), 
[13:25:11.370]                     timestamp = base::Sys.time(), signaled = 0L)
[13:25:11.370]                   signalCondition(cond)
[13:25:11.370]                 }
[13:25:11.370]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:25:11.370]                 "immediateCondition"))) {
[13:25:11.370]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:25:11.370]                   ...future.conditions[[length(...future.conditions) + 
[13:25:11.370]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:25:11.370]                   if (TRUE && !signal) {
[13:25:11.370]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:25:11.370]                     {
[13:25:11.370]                       inherits <- base::inherits
[13:25:11.370]                       invokeRestart <- base::invokeRestart
[13:25:11.370]                       is.null <- base::is.null
[13:25:11.370]                       muffled <- FALSE
[13:25:11.370]                       if (inherits(cond, "message")) {
[13:25:11.370]                         muffled <- grepl(pattern, "muffleMessage")
[13:25:11.370]                         if (muffled) 
[13:25:11.370]                           invokeRestart("muffleMessage")
[13:25:11.370]                       }
[13:25:11.370]                       else if (inherits(cond, "warning")) {
[13:25:11.370]                         muffled <- grepl(pattern, "muffleWarning")
[13:25:11.370]                         if (muffled) 
[13:25:11.370]                           invokeRestart("muffleWarning")
[13:25:11.370]                       }
[13:25:11.370]                       else if (inherits(cond, "condition")) {
[13:25:11.370]                         if (!is.null(pattern)) {
[13:25:11.370]                           computeRestarts <- base::computeRestarts
[13:25:11.370]                           grepl <- base::grepl
[13:25:11.370]                           restarts <- computeRestarts(cond)
[13:25:11.370]                           for (restart in restarts) {
[13:25:11.370]                             name <- restart$name
[13:25:11.370]                             if (is.null(name)) 
[13:25:11.370]                               next
[13:25:11.370]                             if (!grepl(pattern, name)) 
[13:25:11.370]                               next
[13:25:11.370]                             invokeRestart(restart)
[13:25:11.370]                             muffled <- TRUE
[13:25:11.370]                             break
[13:25:11.370]                           }
[13:25:11.370]                         }
[13:25:11.370]                       }
[13:25:11.370]                       invisible(muffled)
[13:25:11.370]                     }
[13:25:11.370]                     muffleCondition(cond, pattern = "^muffle")
[13:25:11.370]                   }
[13:25:11.370]                 }
[13:25:11.370]                 else {
[13:25:11.370]                   if (TRUE) {
[13:25:11.370]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:25:11.370]                     {
[13:25:11.370]                       inherits <- base::inherits
[13:25:11.370]                       invokeRestart <- base::invokeRestart
[13:25:11.370]                       is.null <- base::is.null
[13:25:11.370]                       muffled <- FALSE
[13:25:11.370]                       if (inherits(cond, "message")) {
[13:25:11.370]                         muffled <- grepl(pattern, "muffleMessage")
[13:25:11.370]                         if (muffled) 
[13:25:11.370]                           invokeRestart("muffleMessage")
[13:25:11.370]                       }
[13:25:11.370]                       else if (inherits(cond, "warning")) {
[13:25:11.370]                         muffled <- grepl(pattern, "muffleWarning")
[13:25:11.370]                         if (muffled) 
[13:25:11.370]                           invokeRestart("muffleWarning")
[13:25:11.370]                       }
[13:25:11.370]                       else if (inherits(cond, "condition")) {
[13:25:11.370]                         if (!is.null(pattern)) {
[13:25:11.370]                           computeRestarts <- base::computeRestarts
[13:25:11.370]                           grepl <- base::grepl
[13:25:11.370]                           restarts <- computeRestarts(cond)
[13:25:11.370]                           for (restart in restarts) {
[13:25:11.370]                             name <- restart$name
[13:25:11.370]                             if (is.null(name)) 
[13:25:11.370]                               next
[13:25:11.370]                             if (!grepl(pattern, name)) 
[13:25:11.370]                               next
[13:25:11.370]                             invokeRestart(restart)
[13:25:11.370]                             muffled <- TRUE
[13:25:11.370]                             break
[13:25:11.370]                           }
[13:25:11.370]                         }
[13:25:11.370]                       }
[13:25:11.370]                       invisible(muffled)
[13:25:11.370]                     }
[13:25:11.370]                     muffleCondition(cond, pattern = "^muffle")
[13:25:11.370]                   }
[13:25:11.370]                 }
[13:25:11.370]             }
[13:25:11.370]         }))
[13:25:11.370]     }, error = function(ex) {
[13:25:11.370]         base::structure(base::list(value = NULL, visible = NULL, 
[13:25:11.370]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:25:11.370]                 ...future.rng), started = ...future.startTime, 
[13:25:11.370]             finished = Sys.time(), session_uuid = NA_character_, 
[13:25:11.370]             version = "1.8"), class = "FutureResult")
[13:25:11.370]     }, finally = {
[13:25:11.370]         if (!identical(...future.workdir, getwd())) 
[13:25:11.370]             setwd(...future.workdir)
[13:25:11.370]         {
[13:25:11.370]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:25:11.370]                 ...future.oldOptions$nwarnings <- NULL
[13:25:11.370]             }
[13:25:11.370]             base::options(...future.oldOptions)
[13:25:11.370]             if (.Platform$OS.type == "windows") {
[13:25:11.370]                 old_names <- names(...future.oldEnvVars)
[13:25:11.370]                 envs <- base::Sys.getenv()
[13:25:11.370]                 names <- names(envs)
[13:25:11.370]                 common <- intersect(names, old_names)
[13:25:11.370]                 added <- setdiff(names, old_names)
[13:25:11.370]                 removed <- setdiff(old_names, names)
[13:25:11.370]                 changed <- common[...future.oldEnvVars[common] != 
[13:25:11.370]                   envs[common]]
[13:25:11.370]                 NAMES <- toupper(changed)
[13:25:11.370]                 args <- list()
[13:25:11.370]                 for (kk in seq_along(NAMES)) {
[13:25:11.370]                   name <- changed[[kk]]
[13:25:11.370]                   NAME <- NAMES[[kk]]
[13:25:11.370]                   if (name != NAME && is.element(NAME, old_names)) 
[13:25:11.370]                     next
[13:25:11.370]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:25:11.370]                 }
[13:25:11.370]                 NAMES <- toupper(added)
[13:25:11.370]                 for (kk in seq_along(NAMES)) {
[13:25:11.370]                   name <- added[[kk]]
[13:25:11.370]                   NAME <- NAMES[[kk]]
[13:25:11.370]                   if (name != NAME && is.element(NAME, old_names)) 
[13:25:11.370]                     next
[13:25:11.370]                   args[[name]] <- ""
[13:25:11.370]                 }
[13:25:11.370]                 NAMES <- toupper(removed)
[13:25:11.370]                 for (kk in seq_along(NAMES)) {
[13:25:11.370]                   name <- removed[[kk]]
[13:25:11.370]                   NAME <- NAMES[[kk]]
[13:25:11.370]                   if (name != NAME && is.element(NAME, old_names)) 
[13:25:11.370]                     next
[13:25:11.370]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:25:11.370]                 }
[13:25:11.370]                 if (length(args) > 0) 
[13:25:11.370]                   base::do.call(base::Sys.setenv, args = args)
[13:25:11.370]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:25:11.370]             }
[13:25:11.370]             else {
[13:25:11.370]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:25:11.370]             }
[13:25:11.370]             {
[13:25:11.370]                 if (base::length(...future.futureOptionsAdded) > 
[13:25:11.370]                   0L) {
[13:25:11.370]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:25:11.370]                   base::names(opts) <- ...future.futureOptionsAdded
[13:25:11.370]                   base::options(opts)
[13:25:11.370]                 }
[13:25:11.370]                 {
[13:25:11.370]                   {
[13:25:11.370]                     NULL
[13:25:11.370]                     RNGkind("Mersenne-Twister")
[13:25:11.370]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[13:25:11.370]                       inherits = FALSE)
[13:25:11.370]                   }
[13:25:11.370]                   options(future.plan = NULL)
[13:25:11.370]                   if (is.na(NA_character_)) 
[13:25:11.370]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:25:11.370]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:25:11.370]                   future::plan(list(function (..., envir = parent.frame()) 
[13:25:11.370]                   {
[13:25:11.370]                     future <- SequentialFuture(..., envir = envir)
[13:25:11.370]                     if (!future$lazy) 
[13:25:11.370]                       future <- run(future)
[13:25:11.370]                     invisible(future)
[13:25:11.370]                   }), .cleanup = FALSE, .init = FALSE)
[13:25:11.370]                 }
[13:25:11.370]             }
[13:25:11.370]         }
[13:25:11.370]     })
[13:25:11.370]     if (TRUE) {
[13:25:11.370]         base::sink(type = "output", split = FALSE)
[13:25:11.370]         if (TRUE) {
[13:25:11.370]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:25:11.370]         }
[13:25:11.370]         else {
[13:25:11.370]             ...future.result["stdout"] <- base::list(NULL)
[13:25:11.370]         }
[13:25:11.370]         base::close(...future.stdout)
[13:25:11.370]         ...future.stdout <- NULL
[13:25:11.370]     }
[13:25:11.370]     ...future.result$conditions <- ...future.conditions
[13:25:11.370]     ...future.result$finished <- base::Sys.time()
[13:25:11.370]     ...future.result
[13:25:11.370] }
[13:25:11.372] plan(): Setting new future strategy stack:
[13:25:11.372] List of future strategies:
[13:25:11.372] 1. sequential:
[13:25:11.372]    - args: function (..., envir = parent.frame())
[13:25:11.372]    - tweaked: FALSE
[13:25:11.372]    - call: NULL
[13:25:11.373] plan(): nbrOfWorkers() = 1
[13:25:11.374] plan(): Setting new future strategy stack:
[13:25:11.374] List of future strategies:
[13:25:11.374] 1. sequential:
[13:25:11.374]    - args: function (..., envir = parent.frame())
[13:25:11.374]    - tweaked: FALSE
[13:25:11.374]    - call: plan(strategy)
[13:25:11.374] plan(): nbrOfWorkers() = 1
[13:25:11.375] SequentialFuture started (and completed)
[13:25:11.375] - Launch lazy future ... done
[13:25:11.375] run() for ‘SequentialFuture’ ... done
 [1] " [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25"  
 [2] "[26] 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50"  
 [3] " int [1:50] 1 2 3 4 5 6 7 8 9 10 ..."                                             
 [4] "a-b-c-d-e-f-g-h-i-j-k-l-m-n-o-p-q-r-s-t-u-v-w-x-y-z1 2 3 4 5 6 "                  
 [5] "\"Sepal.Length\"\t\"Sepal.Width\"\t\"Petal.Length\"\t\"Petal.Width\"\t\"Species\""
 [6] "\"1\"\t5.1\t3.5\t1.4\t0.2\t\"setosa\""                                            
 [7] "\"2\"\t4.9\t3\t1.4\t0.2\t\"setosa\""                                              
 [8] "\"3\"\t4.7\t3.2\t1.3\t0.2\t\"setosa\""                                            
 [9] "\"4\"\t4.6\t3.1\t1.5\t0.2\t\"setosa\""                                            
[10] "\"5\"\t5\t3.6\t1.4\t0.2\t\"setosa\""                                              
[11] "\"6\"\t5.4\t3.9\t1.7\t0.4\t\"setosa\""                                            
[12] "\"7\"\t4.6\t3.4\t1.4\t0.3\t\"setosa\""                                            
[13] "\"8\"\t5\t3.4\t1.5\t0.2\t\"setosa\""                                              
[14] "\"9\"\t4.4\t2.9\t1.4\t0.2\t\"setosa\""                                            
[15] "\"10\"\t4.9\t3.1\t1.5\t0.1\t\"setosa\""                                           
- stdout = structure(TRUE, drop = TRUE)
[13:25:11.375] getGlobalsAndPackages() ...
[13:25:11.376] Searching for globals...
[13:25:11.376] - globals found: [1] ‘print’
[13:25:11.376] Searching for globals ... DONE
[13:25:11.376] Resolving globals: FALSE
[13:25:11.376] 
[13:25:11.377] 
[13:25:11.377] getGlobalsAndPackages() ... DONE
[13:25:11.377] run() for ‘Future’ ...
[13:25:11.377] - state: ‘created’
[13:25:11.377] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[13:25:11.377] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[13:25:11.377] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[13:25:11.378]   - Field: ‘label’
[13:25:11.378]   - Field: ‘local’
[13:25:11.378]   - Field: ‘owner’
[13:25:11.378]   - Field: ‘envir’
[13:25:11.378]   - Field: ‘packages’
[13:25:11.378]   - Field: ‘gc’
[13:25:11.378]   - Field: ‘conditions’
[13:25:11.378]   - Field: ‘expr’
[13:25:11.378]   - Field: ‘uuid’
[13:25:11.378]   - Field: ‘seed’
[13:25:11.379]   - Field: ‘version’
[13:25:11.379]   - Field: ‘result’
[13:25:11.379]   - Field: ‘asynchronous’
[13:25:11.379]   - Field: ‘calls’
[13:25:11.379]   - Field: ‘globals’
[13:25:11.379]   - Field: ‘stdout’
[13:25:11.379]   - Field: ‘earlySignal’
[13:25:11.379]   - Field: ‘lazy’
[13:25:11.379]   - Field: ‘state’
[13:25:11.379] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[13:25:11.379] - Launch lazy future ...
[13:25:11.380] Packages needed by the future expression (n = 0): <none>
[13:25:11.380] Packages needed by future strategies (n = 0): <none>
[13:25:11.380] {
[13:25:11.380]     {
[13:25:11.380]         {
[13:25:11.380]             ...future.startTime <- base::Sys.time()
[13:25:11.380]             {
[13:25:11.380]                 {
[13:25:11.380]                   {
[13:25:11.380]                     base::local({
[13:25:11.380]                       has_future <- base::requireNamespace("future", 
[13:25:11.380]                         quietly = TRUE)
[13:25:11.380]                       if (has_future) {
[13:25:11.380]                         ns <- base::getNamespace("future")
[13:25:11.380]                         version <- ns[[".package"]][["version"]]
[13:25:11.380]                         if (is.null(version)) 
[13:25:11.380]                           version <- utils::packageVersion("future")
[13:25:11.380]                       }
[13:25:11.380]                       else {
[13:25:11.380]                         version <- NULL
[13:25:11.380]                       }
[13:25:11.380]                       if (!has_future || version < "1.8.0") {
[13:25:11.380]                         info <- base::c(r_version = base::gsub("R version ", 
[13:25:11.380]                           "", base::R.version$version.string), 
[13:25:11.380]                           platform = base::sprintf("%s (%s-bit)", 
[13:25:11.380]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:25:11.380]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[13:25:11.380]                             "release", "version")], collapse = " "), 
[13:25:11.380]                           hostname = base::Sys.info()[["nodename"]])
[13:25:11.380]                         info <- base::sprintf("%s: %s", base::names(info), 
[13:25:11.380]                           info)
[13:25:11.380]                         info <- base::paste(info, collapse = "; ")
[13:25:11.380]                         if (!has_future) {
[13:25:11.380]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:25:11.380]                             info)
[13:25:11.380]                         }
[13:25:11.380]                         else {
[13:25:11.380]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:25:11.380]                             info, version)
[13:25:11.380]                         }
[13:25:11.380]                         base::stop(msg)
[13:25:11.380]                       }
[13:25:11.380]                     })
[13:25:11.380]                   }
[13:25:11.380]                   options(future.plan = NULL)
[13:25:11.380]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:25:11.380]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:25:11.380]                 }
[13:25:11.380]                 ...future.workdir <- getwd()
[13:25:11.380]             }
[13:25:11.380]             ...future.oldOptions <- base::as.list(base::.Options)
[13:25:11.380]             ...future.oldEnvVars <- base::Sys.getenv()
[13:25:11.380]         }
[13:25:11.380]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:25:11.380]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:25:11.380]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:25:11.380]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:25:11.380]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:25:11.380]             future.stdout.windows.reencode = NULL, width = 80L)
[13:25:11.380]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:25:11.380]             base::names(...future.oldOptions))
[13:25:11.380]     }
[13:25:11.380]     if (FALSE) {
[13:25:11.380]     }
[13:25:11.380]     else {
[13:25:11.380]         if (TRUE) {
[13:25:11.380]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:25:11.380]                 open = "w")
[13:25:11.380]         }
[13:25:11.380]         else {
[13:25:11.380]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:25:11.380]                 windows = "NUL", "/dev/null"), open = "w")
[13:25:11.380]         }
[13:25:11.380]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:25:11.380]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:25:11.380]             base::sink(type = "output", split = FALSE)
[13:25:11.380]             base::close(...future.stdout)
[13:25:11.380]         }, add = TRUE)
[13:25:11.380]     }
[13:25:11.380]     ...future.frame <- base::sys.nframe()
[13:25:11.380]     ...future.conditions <- base::list()
[13:25:11.380]     ...future.rng <- base::globalenv()$.Random.seed
[13:25:11.380]     if (FALSE) {
[13:25:11.380]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:25:11.380]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:25:11.380]     }
[13:25:11.380]     ...future.result <- base::tryCatch({
[13:25:11.380]         base::withCallingHandlers({
[13:25:11.380]             ...future.value <- base::withVisible(base::local(print(42)))
[13:25:11.380]             future::FutureResult(value = ...future.value$value, 
[13:25:11.380]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:25:11.380]                   ...future.rng), globalenv = if (FALSE) 
[13:25:11.380]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:25:11.380]                     ...future.globalenv.names))
[13:25:11.380]                 else NULL, started = ...future.startTime, version = "1.8")
[13:25:11.380]         }, condition = base::local({
[13:25:11.380]             c <- base::c
[13:25:11.380]             inherits <- base::inherits
[13:25:11.380]             invokeRestart <- base::invokeRestart
[13:25:11.380]             length <- base::length
[13:25:11.380]             list <- base::list
[13:25:11.380]             seq.int <- base::seq.int
[13:25:11.380]             signalCondition <- base::signalCondition
[13:25:11.380]             sys.calls <- base::sys.calls
[13:25:11.380]             `[[` <- base::`[[`
[13:25:11.380]             `+` <- base::`+`
[13:25:11.380]             `<<-` <- base::`<<-`
[13:25:11.380]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:25:11.380]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:25:11.380]                   3L)]
[13:25:11.380]             }
[13:25:11.380]             function(cond) {
[13:25:11.380]                 is_error <- inherits(cond, "error")
[13:25:11.380]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:25:11.380]                   NULL)
[13:25:11.380]                 if (is_error) {
[13:25:11.380]                   sessionInformation <- function() {
[13:25:11.380]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:25:11.380]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:25:11.380]                       search = base::search(), system = base::Sys.info())
[13:25:11.380]                   }
[13:25:11.380]                   ...future.conditions[[length(...future.conditions) + 
[13:25:11.380]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:25:11.380]                     cond$call), session = sessionInformation(), 
[13:25:11.380]                     timestamp = base::Sys.time(), signaled = 0L)
[13:25:11.380]                   signalCondition(cond)
[13:25:11.380]                 }
[13:25:11.380]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:25:11.380]                 "immediateCondition"))) {
[13:25:11.380]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:25:11.380]                   ...future.conditions[[length(...future.conditions) + 
[13:25:11.380]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:25:11.380]                   if (TRUE && !signal) {
[13:25:11.380]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:25:11.380]                     {
[13:25:11.380]                       inherits <- base::inherits
[13:25:11.380]                       invokeRestart <- base::invokeRestart
[13:25:11.380]                       is.null <- base::is.null
[13:25:11.380]                       muffled <- FALSE
[13:25:11.380]                       if (inherits(cond, "message")) {
[13:25:11.380]                         muffled <- grepl(pattern, "muffleMessage")
[13:25:11.380]                         if (muffled) 
[13:25:11.380]                           invokeRestart("muffleMessage")
[13:25:11.380]                       }
[13:25:11.380]                       else if (inherits(cond, "warning")) {
[13:25:11.380]                         muffled <- grepl(pattern, "muffleWarning")
[13:25:11.380]                         if (muffled) 
[13:25:11.380]                           invokeRestart("muffleWarning")
[13:25:11.380]                       }
[13:25:11.380]                       else if (inherits(cond, "condition")) {
[13:25:11.380]                         if (!is.null(pattern)) {
[13:25:11.380]                           computeRestarts <- base::computeRestarts
[13:25:11.380]                           grepl <- base::grepl
[13:25:11.380]                           restarts <- computeRestarts(cond)
[13:25:11.380]                           for (restart in restarts) {
[13:25:11.380]                             name <- restart$name
[13:25:11.380]                             if (is.null(name)) 
[13:25:11.380]                               next
[13:25:11.380]                             if (!grepl(pattern, name)) 
[13:25:11.380]                               next
[13:25:11.380]                             invokeRestart(restart)
[13:25:11.380]                             muffled <- TRUE
[13:25:11.380]                             break
[13:25:11.380]                           }
[13:25:11.380]                         }
[13:25:11.380]                       }
[13:25:11.380]                       invisible(muffled)
[13:25:11.380]                     }
[13:25:11.380]                     muffleCondition(cond, pattern = "^muffle")
[13:25:11.380]                   }
[13:25:11.380]                 }
[13:25:11.380]                 else {
[13:25:11.380]                   if (TRUE) {
[13:25:11.380]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:25:11.380]                     {
[13:25:11.380]                       inherits <- base::inherits
[13:25:11.380]                       invokeRestart <- base::invokeRestart
[13:25:11.380]                       is.null <- base::is.null
[13:25:11.380]                       muffled <- FALSE
[13:25:11.380]                       if (inherits(cond, "message")) {
[13:25:11.380]                         muffled <- grepl(pattern, "muffleMessage")
[13:25:11.380]                         if (muffled) 
[13:25:11.380]                           invokeRestart("muffleMessage")
[13:25:11.380]                       }
[13:25:11.380]                       else if (inherits(cond, "warning")) {
[13:25:11.380]                         muffled <- grepl(pattern, "muffleWarning")
[13:25:11.380]                         if (muffled) 
[13:25:11.380]                           invokeRestart("muffleWarning")
[13:25:11.380]                       }
[13:25:11.380]                       else if (inherits(cond, "condition")) {
[13:25:11.380]                         if (!is.null(pattern)) {
[13:25:11.380]                           computeRestarts <- base::computeRestarts
[13:25:11.380]                           grepl <- base::grepl
[13:25:11.380]                           restarts <- computeRestarts(cond)
[13:25:11.380]                           for (restart in restarts) {
[13:25:11.380]                             name <- restart$name
[13:25:11.380]                             if (is.null(name)) 
[13:25:11.380]                               next
[13:25:11.380]                             if (!grepl(pattern, name)) 
[13:25:11.380]                               next
[13:25:11.380]                             invokeRestart(restart)
[13:25:11.380]                             muffled <- TRUE
[13:25:11.380]                             break
[13:25:11.380]                           }
[13:25:11.380]                         }
[13:25:11.380]                       }
[13:25:11.380]                       invisible(muffled)
[13:25:11.380]                     }
[13:25:11.380]                     muffleCondition(cond, pattern = "^muffle")
[13:25:11.380]                   }
[13:25:11.380]                 }
[13:25:11.380]             }
[13:25:11.380]         }))
[13:25:11.380]     }, error = function(ex) {
[13:25:11.380]         base::structure(base::list(value = NULL, visible = NULL, 
[13:25:11.380]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:25:11.380]                 ...future.rng), started = ...future.startTime, 
[13:25:11.380]             finished = Sys.time(), session_uuid = NA_character_, 
[13:25:11.380]             version = "1.8"), class = "FutureResult")
[13:25:11.380]     }, finally = {
[13:25:11.380]         if (!identical(...future.workdir, getwd())) 
[13:25:11.380]             setwd(...future.workdir)
[13:25:11.380]         {
[13:25:11.380]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:25:11.380]                 ...future.oldOptions$nwarnings <- NULL
[13:25:11.380]             }
[13:25:11.380]             base::options(...future.oldOptions)
[13:25:11.380]             if (.Platform$OS.type == "windows") {
[13:25:11.380]                 old_names <- names(...future.oldEnvVars)
[13:25:11.380]                 envs <- base::Sys.getenv()
[13:25:11.380]                 names <- names(envs)
[13:25:11.380]                 common <- intersect(names, old_names)
[13:25:11.380]                 added <- setdiff(names, old_names)
[13:25:11.380]                 removed <- setdiff(old_names, names)
[13:25:11.380]                 changed <- common[...future.oldEnvVars[common] != 
[13:25:11.380]                   envs[common]]
[13:25:11.380]                 NAMES <- toupper(changed)
[13:25:11.380]                 args <- list()
[13:25:11.380]                 for (kk in seq_along(NAMES)) {
[13:25:11.380]                   name <- changed[[kk]]
[13:25:11.380]                   NAME <- NAMES[[kk]]
[13:25:11.380]                   if (name != NAME && is.element(NAME, old_names)) 
[13:25:11.380]                     next
[13:25:11.380]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:25:11.380]                 }
[13:25:11.380]                 NAMES <- toupper(added)
[13:25:11.380]                 for (kk in seq_along(NAMES)) {
[13:25:11.380]                   name <- added[[kk]]
[13:25:11.380]                   NAME <- NAMES[[kk]]
[13:25:11.380]                   if (name != NAME && is.element(NAME, old_names)) 
[13:25:11.380]                     next
[13:25:11.380]                   args[[name]] <- ""
[13:25:11.380]                 }
[13:25:11.380]                 NAMES <- toupper(removed)
[13:25:11.380]                 for (kk in seq_along(NAMES)) {
[13:25:11.380]                   name <- removed[[kk]]
[13:25:11.380]                   NAME <- NAMES[[kk]]
[13:25:11.380]                   if (name != NAME && is.element(NAME, old_names)) 
[13:25:11.380]                     next
[13:25:11.380]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:25:11.380]                 }
[13:25:11.380]                 if (length(args) > 0) 
[13:25:11.380]                   base::do.call(base::Sys.setenv, args = args)
[13:25:11.380]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:25:11.380]             }
[13:25:11.380]             else {
[13:25:11.380]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:25:11.380]             }
[13:25:11.380]             {
[13:25:11.380]                 if (base::length(...future.futureOptionsAdded) > 
[13:25:11.380]                   0L) {
[13:25:11.380]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:25:11.380]                   base::names(opts) <- ...future.futureOptionsAdded
[13:25:11.380]                   base::options(opts)
[13:25:11.380]                 }
[13:25:11.380]                 {
[13:25:11.380]                   {
[13:25:11.380]                     NULL
[13:25:11.380]                     RNGkind("Mersenne-Twister")
[13:25:11.380]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[13:25:11.380]                       inherits = FALSE)
[13:25:11.380]                   }
[13:25:11.380]                   options(future.plan = NULL)
[13:25:11.380]                   if (is.na(NA_character_)) 
[13:25:11.380]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:25:11.380]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:25:11.380]                   future::plan(list(function (..., envir = parent.frame()) 
[13:25:11.380]                   {
[13:25:11.380]                     future <- SequentialFuture(..., envir = envir)
[13:25:11.380]                     if (!future$lazy) 
[13:25:11.380]                       future <- run(future)
[13:25:11.380]                     invisible(future)
[13:25:11.380]                   }), .cleanup = FALSE, .init = FALSE)
[13:25:11.380]                 }
[13:25:11.380]             }
[13:25:11.380]         }
[13:25:11.380]     })
[13:25:11.380]     if (TRUE) {
[13:25:11.380]         base::sink(type = "output", split = FALSE)
[13:25:11.380]         if (TRUE) {
[13:25:11.380]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:25:11.380]         }
[13:25:11.380]         else {
[13:25:11.380]             ...future.result["stdout"] <- base::list(NULL)
[13:25:11.380]         }
[13:25:11.380]         base::close(...future.stdout)
[13:25:11.380]         ...future.stdout <- NULL
[13:25:11.380]     }
[13:25:11.380]     ...future.result$conditions <- ...future.conditions
[13:25:11.380]     ...future.result$finished <- base::Sys.time()
[13:25:11.380]     ...future.result
[13:25:11.380] }
[13:25:11.382] plan(): Setting new future strategy stack:
[13:25:11.382] List of future strategies:
[13:25:11.382] 1. sequential:
[13:25:11.382]    - args: function (..., envir = parent.frame())
[13:25:11.382]    - tweaked: FALSE
[13:25:11.382]    - call: NULL
[13:25:11.382] plan(): nbrOfWorkers() = 1
[13:25:11.383] plan(): Setting new future strategy stack:
[13:25:11.383] List of future strategies:
[13:25:11.383] 1. sequential:
[13:25:11.383]    - args: function (..., envir = parent.frame())
[13:25:11.383]    - tweaked: FALSE
[13:25:11.383]    - call: plan(strategy)
[13:25:11.383] plan(): nbrOfWorkers() = 1
[13:25:11.384] SequentialFuture started (and completed)
[13:25:11.384] - Launch lazy future ... done
[13:25:11.384] run() for ‘SequentialFuture’ ... done
[1] 42
- stdout = FALSE
[13:25:11.384] getGlobalsAndPackages() ...
[13:25:11.384] Searching for globals...
[13:25:11.387] - globals found: [9] ‘{’, ‘print’, ‘:’, ‘str’, ‘cat’, ‘letters’, ‘write.table’, ‘[’, ‘::’
[13:25:11.387] Searching for globals ... DONE
[13:25:11.387] Resolving globals: FALSE
[13:25:11.388] 
[13:25:11.388] - packages: [1] ‘utils’
[13:25:11.388] getGlobalsAndPackages() ... DONE
[13:25:11.388] run() for ‘Future’ ...
[13:25:11.388] - state: ‘created’
[13:25:11.388] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[13:25:11.389] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[13:25:11.389] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[13:25:11.389]   - Field: ‘label’
[13:25:11.389]   - Field: ‘local’
[13:25:11.389]   - Field: ‘owner’
[13:25:11.389]   - Field: ‘envir’
[13:25:11.389]   - Field: ‘packages’
[13:25:11.389]   - Field: ‘gc’
[13:25:11.390]   - Field: ‘conditions’
[13:25:11.390]   - Field: ‘expr’
[13:25:11.390]   - Field: ‘uuid’
[13:25:11.390]   - Field: ‘seed’
[13:25:11.390]   - Field: ‘version’
[13:25:11.390]   - Field: ‘result’
[13:25:11.390]   - Field: ‘asynchronous’
[13:25:11.390]   - Field: ‘calls’
[13:25:11.390]   - Field: ‘globals’
[13:25:11.390]   - Field: ‘stdout’
[13:25:11.390]   - Field: ‘earlySignal’
[13:25:11.391]   - Field: ‘lazy’
[13:25:11.391]   - Field: ‘state’
[13:25:11.391] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[13:25:11.391] - Launch lazy future ...
[13:25:11.391] Packages needed by the future expression (n = 1): ‘utils’
[13:25:11.391] Packages needed by future strategies (n = 0): <none>
[13:25:11.393] {
[13:25:11.393]     {
[13:25:11.393]         {
[13:25:11.393]             ...future.startTime <- base::Sys.time()
[13:25:11.393]             {
[13:25:11.393]                 {
[13:25:11.393]                   {
[13:25:11.393]                     {
[13:25:11.393]                       base::local({
[13:25:11.393]                         has_future <- base::requireNamespace("future", 
[13:25:11.393]                           quietly = TRUE)
[13:25:11.393]                         if (has_future) {
[13:25:11.393]                           ns <- base::getNamespace("future")
[13:25:11.393]                           version <- ns[[".package"]][["version"]]
[13:25:11.393]                           if (is.null(version)) 
[13:25:11.393]                             version <- utils::packageVersion("future")
[13:25:11.393]                         }
[13:25:11.393]                         else {
[13:25:11.393]                           version <- NULL
[13:25:11.393]                         }
[13:25:11.393]                         if (!has_future || version < "1.8.0") {
[13:25:11.393]                           info <- base::c(r_version = base::gsub("R version ", 
[13:25:11.393]                             "", base::R.version$version.string), 
[13:25:11.393]                             platform = base::sprintf("%s (%s-bit)", 
[13:25:11.393]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:25:11.393]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:25:11.393]                               "release", "version")], collapse = " "), 
[13:25:11.393]                             hostname = base::Sys.info()[["nodename"]])
[13:25:11.393]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:25:11.393]                             info)
[13:25:11.393]                           info <- base::paste(info, collapse = "; ")
[13:25:11.393]                           if (!has_future) {
[13:25:11.393]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:25:11.393]                               info)
[13:25:11.393]                           }
[13:25:11.393]                           else {
[13:25:11.393]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:25:11.393]                               info, version)
[13:25:11.393]                           }
[13:25:11.393]                           base::stop(msg)
[13:25:11.393]                         }
[13:25:11.393]                       })
[13:25:11.393]                     }
[13:25:11.393]                     base::local({
[13:25:11.393]                       for (pkg in "utils") {
[13:25:11.393]                         base::loadNamespace(pkg)
[13:25:11.393]                         base::library(pkg, character.only = TRUE)
[13:25:11.393]                       }
[13:25:11.393]                     })
[13:25:11.393]                   }
[13:25:11.393]                   options(future.plan = NULL)
[13:25:11.393]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:25:11.393]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:25:11.393]                 }
[13:25:11.393]                 ...future.workdir <- getwd()
[13:25:11.393]             }
[13:25:11.393]             ...future.oldOptions <- base::as.list(base::.Options)
[13:25:11.393]             ...future.oldEnvVars <- base::Sys.getenv()
[13:25:11.393]         }
[13:25:11.393]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:25:11.393]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:25:11.393]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:25:11.393]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:25:11.393]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:25:11.393]             future.stdout.windows.reencode = NULL, width = 80L)
[13:25:11.393]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:25:11.393]             base::names(...future.oldOptions))
[13:25:11.393]     }
[13:25:11.393]     if (FALSE) {
[13:25:11.393]     }
[13:25:11.393]     else {
[13:25:11.393]         if (FALSE) {
[13:25:11.393]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:25:11.393]                 open = "w")
[13:25:11.393]         }
[13:25:11.393]         else {
[13:25:11.393]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:25:11.393]                 windows = "NUL", "/dev/null"), open = "w")
[13:25:11.393]         }
[13:25:11.393]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:25:11.393]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:25:11.393]             base::sink(type = "output", split = FALSE)
[13:25:11.393]             base::close(...future.stdout)
[13:25:11.393]         }, add = TRUE)
[13:25:11.393]     }
[13:25:11.393]     ...future.frame <- base::sys.nframe()
[13:25:11.393]     ...future.conditions <- base::list()
[13:25:11.393]     ...future.rng <- base::globalenv()$.Random.seed
[13:25:11.393]     if (FALSE) {
[13:25:11.393]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:25:11.393]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:25:11.393]     }
[13:25:11.393]     ...future.result <- base::tryCatch({
[13:25:11.393]         base::withCallingHandlers({
[13:25:11.393]             ...future.value <- base::withVisible(base::local({
[13:25:11.393]                 print(1:50)
[13:25:11.393]                 str(1:50)
[13:25:11.393]                 cat(letters, sep = "-")
[13:25:11.393]                 cat(1:6, collapse = "\n")
[13:25:11.393]                 write.table(datasets::iris[1:10, ], sep = "\t")
[13:25:11.393]                 42L
[13:25:11.393]             }))
[13:25:11.393]             future::FutureResult(value = ...future.value$value, 
[13:25:11.393]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:25:11.393]                   ...future.rng), globalenv = if (FALSE) 
[13:25:11.393]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:25:11.393]                     ...future.globalenv.names))
[13:25:11.393]                 else NULL, started = ...future.startTime, version = "1.8")
[13:25:11.393]         }, condition = base::local({
[13:25:11.393]             c <- base::c
[13:25:11.393]             inherits <- base::inherits
[13:25:11.393]             invokeRestart <- base::invokeRestart
[13:25:11.393]             length <- base::length
[13:25:11.393]             list <- base::list
[13:25:11.393]             seq.int <- base::seq.int
[13:25:11.393]             signalCondition <- base::signalCondition
[13:25:11.393]             sys.calls <- base::sys.calls
[13:25:11.393]             `[[` <- base::`[[`
[13:25:11.393]             `+` <- base::`+`
[13:25:11.393]             `<<-` <- base::`<<-`
[13:25:11.393]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:25:11.393]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:25:11.393]                   3L)]
[13:25:11.393]             }
[13:25:11.393]             function(cond) {
[13:25:11.393]                 is_error <- inherits(cond, "error")
[13:25:11.393]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:25:11.393]                   NULL)
[13:25:11.393]                 if (is_error) {
[13:25:11.393]                   sessionInformation <- function() {
[13:25:11.393]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:25:11.393]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:25:11.393]                       search = base::search(), system = base::Sys.info())
[13:25:11.393]                   }
[13:25:11.393]                   ...future.conditions[[length(...future.conditions) + 
[13:25:11.393]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:25:11.393]                     cond$call), session = sessionInformation(), 
[13:25:11.393]                     timestamp = base::Sys.time(), signaled = 0L)
[13:25:11.393]                   signalCondition(cond)
[13:25:11.393]                 }
[13:25:11.393]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:25:11.393]                 "immediateCondition"))) {
[13:25:11.393]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:25:11.393]                   ...future.conditions[[length(...future.conditions) + 
[13:25:11.393]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:25:11.393]                   if (TRUE && !signal) {
[13:25:11.393]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:25:11.393]                     {
[13:25:11.393]                       inherits <- base::inherits
[13:25:11.393]                       invokeRestart <- base::invokeRestart
[13:25:11.393]                       is.null <- base::is.null
[13:25:11.393]                       muffled <- FALSE
[13:25:11.393]                       if (inherits(cond, "message")) {
[13:25:11.393]                         muffled <- grepl(pattern, "muffleMessage")
[13:25:11.393]                         if (muffled) 
[13:25:11.393]                           invokeRestart("muffleMessage")
[13:25:11.393]                       }
[13:25:11.393]                       else if (inherits(cond, "warning")) {
[13:25:11.393]                         muffled <- grepl(pattern, "muffleWarning")
[13:25:11.393]                         if (muffled) 
[13:25:11.393]                           invokeRestart("muffleWarning")
[13:25:11.393]                       }
[13:25:11.393]                       else if (inherits(cond, "condition")) {
[13:25:11.393]                         if (!is.null(pattern)) {
[13:25:11.393]                           computeRestarts <- base::computeRestarts
[13:25:11.393]                           grepl <- base::grepl
[13:25:11.393]                           restarts <- computeRestarts(cond)
[13:25:11.393]                           for (restart in restarts) {
[13:25:11.393]                             name <- restart$name
[13:25:11.393]                             if (is.null(name)) 
[13:25:11.393]                               next
[13:25:11.393]                             if (!grepl(pattern, name)) 
[13:25:11.393]                               next
[13:25:11.393]                             invokeRestart(restart)
[13:25:11.393]                             muffled <- TRUE
[13:25:11.393]                             break
[13:25:11.393]                           }
[13:25:11.393]                         }
[13:25:11.393]                       }
[13:25:11.393]                       invisible(muffled)
[13:25:11.393]                     }
[13:25:11.393]                     muffleCondition(cond, pattern = "^muffle")
[13:25:11.393]                   }
[13:25:11.393]                 }
[13:25:11.393]                 else {
[13:25:11.393]                   if (TRUE) {
[13:25:11.393]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:25:11.393]                     {
[13:25:11.393]                       inherits <- base::inherits
[13:25:11.393]                       invokeRestart <- base::invokeRestart
[13:25:11.393]                       is.null <- base::is.null
[13:25:11.393]                       muffled <- FALSE
[13:25:11.393]                       if (inherits(cond, "message")) {
[13:25:11.393]                         muffled <- grepl(pattern, "muffleMessage")
[13:25:11.393]                         if (muffled) 
[13:25:11.393]                           invokeRestart("muffleMessage")
[13:25:11.393]                       }
[13:25:11.393]                       else if (inherits(cond, "warning")) {
[13:25:11.393]                         muffled <- grepl(pattern, "muffleWarning")
[13:25:11.393]                         if (muffled) 
[13:25:11.393]                           invokeRestart("muffleWarning")
[13:25:11.393]                       }
[13:25:11.393]                       else if (inherits(cond, "condition")) {
[13:25:11.393]                         if (!is.null(pattern)) {
[13:25:11.393]                           computeRestarts <- base::computeRestarts
[13:25:11.393]                           grepl <- base::grepl
[13:25:11.393]                           restarts <- computeRestarts(cond)
[13:25:11.393]                           for (restart in restarts) {
[13:25:11.393]                             name <- restart$name
[13:25:11.393]                             if (is.null(name)) 
[13:25:11.393]                               next
[13:25:11.393]                             if (!grepl(pattern, name)) 
[13:25:11.393]                               next
[13:25:11.393]                             invokeRestart(restart)
[13:25:11.393]                             muffled <- TRUE
[13:25:11.393]                             break
[13:25:11.393]                           }
[13:25:11.393]                         }
[13:25:11.393]                       }
[13:25:11.393]                       invisible(muffled)
[13:25:11.393]                     }
[13:25:11.393]                     muffleCondition(cond, pattern = "^muffle")
[13:25:11.393]                   }
[13:25:11.393]                 }
[13:25:11.393]             }
[13:25:11.393]         }))
[13:25:11.393]     }, error = function(ex) {
[13:25:11.393]         base::structure(base::list(value = NULL, visible = NULL, 
[13:25:11.393]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:25:11.393]                 ...future.rng), started = ...future.startTime, 
[13:25:11.393]             finished = Sys.time(), session_uuid = NA_character_, 
[13:25:11.393]             version = "1.8"), class = "FutureResult")
[13:25:11.393]     }, finally = {
[13:25:11.393]         if (!identical(...future.workdir, getwd())) 
[13:25:11.393]             setwd(...future.workdir)
[13:25:11.393]         {
[13:25:11.393]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:25:11.393]                 ...future.oldOptions$nwarnings <- NULL
[13:25:11.393]             }
[13:25:11.393]             base::options(...future.oldOptions)
[13:25:11.393]             if (.Platform$OS.type == "windows") {
[13:25:11.393]                 old_names <- names(...future.oldEnvVars)
[13:25:11.393]                 envs <- base::Sys.getenv()
[13:25:11.393]                 names <- names(envs)
[13:25:11.393]                 common <- intersect(names, old_names)
[13:25:11.393]                 added <- setdiff(names, old_names)
[13:25:11.393]                 removed <- setdiff(old_names, names)
[13:25:11.393]                 changed <- common[...future.oldEnvVars[common] != 
[13:25:11.393]                   envs[common]]
[13:25:11.393]                 NAMES <- toupper(changed)
[13:25:11.393]                 args <- list()
[13:25:11.393]                 for (kk in seq_along(NAMES)) {
[13:25:11.393]                   name <- changed[[kk]]
[13:25:11.393]                   NAME <- NAMES[[kk]]
[13:25:11.393]                   if (name != NAME && is.element(NAME, old_names)) 
[13:25:11.393]                     next
[13:25:11.393]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:25:11.393]                 }
[13:25:11.393]                 NAMES <- toupper(added)
[13:25:11.393]                 for (kk in seq_along(NAMES)) {
[13:25:11.393]                   name <- added[[kk]]
[13:25:11.393]                   NAME <- NAMES[[kk]]
[13:25:11.393]                   if (name != NAME && is.element(NAME, old_names)) 
[13:25:11.393]                     next
[13:25:11.393]                   args[[name]] <- ""
[13:25:11.393]                 }
[13:25:11.393]                 NAMES <- toupper(removed)
[13:25:11.393]                 for (kk in seq_along(NAMES)) {
[13:25:11.393]                   name <- removed[[kk]]
[13:25:11.393]                   NAME <- NAMES[[kk]]
[13:25:11.393]                   if (name != NAME && is.element(NAME, old_names)) 
[13:25:11.393]                     next
[13:25:11.393]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:25:11.393]                 }
[13:25:11.393]                 if (length(args) > 0) 
[13:25:11.393]                   base::do.call(base::Sys.setenv, args = args)
[13:25:11.393]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:25:11.393]             }
[13:25:11.393]             else {
[13:25:11.393]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:25:11.393]             }
[13:25:11.393]             {
[13:25:11.393]                 if (base::length(...future.futureOptionsAdded) > 
[13:25:11.393]                   0L) {
[13:25:11.393]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:25:11.393]                   base::names(opts) <- ...future.futureOptionsAdded
[13:25:11.393]                   base::options(opts)
[13:25:11.393]                 }
[13:25:11.393]                 {
[13:25:11.393]                   {
[13:25:11.393]                     NULL
[13:25:11.393]                     RNGkind("Mersenne-Twister")
[13:25:11.393]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[13:25:11.393]                       inherits = FALSE)
[13:25:11.393]                   }
[13:25:11.393]                   options(future.plan = NULL)
[13:25:11.393]                   if (is.na(NA_character_)) 
[13:25:11.393]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:25:11.393]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:25:11.393]                   future::plan(list(function (..., envir = parent.frame()) 
[13:25:11.393]                   {
[13:25:11.393]                     future <- SequentialFuture(..., envir = envir)
[13:25:11.393]                     if (!future$lazy) 
[13:25:11.393]                       future <- run(future)
[13:25:11.393]                     invisible(future)
[13:25:11.393]                   }), .cleanup = FALSE, .init = FALSE)
[13:25:11.393]                 }
[13:25:11.393]             }
[13:25:11.393]         }
[13:25:11.393]     })
[13:25:11.393]     if (TRUE) {
[13:25:11.393]         base::sink(type = "output", split = FALSE)
[13:25:11.393]         if (FALSE) {
[13:25:11.393]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:25:11.393]         }
[13:25:11.393]         else {
[13:25:11.393]             ...future.result["stdout"] <- base::list(NULL)
[13:25:11.393]         }
[13:25:11.393]         base::close(...future.stdout)
[13:25:11.393]         ...future.stdout <- NULL
[13:25:11.393]     }
[13:25:11.393]     ...future.result$conditions <- ...future.conditions
[13:25:11.393]     ...future.result$finished <- base::Sys.time()
[13:25:11.393]     ...future.result
[13:25:11.393] }
[13:25:11.395] plan(): Setting new future strategy stack:
[13:25:11.395] List of future strategies:
[13:25:11.395] 1. sequential:
[13:25:11.395]    - args: function (..., envir = parent.frame())
[13:25:11.395]    - tweaked: FALSE
[13:25:11.395]    - call: NULL
[13:25:11.396] plan(): nbrOfWorkers() = 1
[13:25:11.397] plan(): Setting new future strategy stack:
[13:25:11.397] List of future strategies:
[13:25:11.397] 1. sequential:
[13:25:11.397]    - args: function (..., envir = parent.frame())
[13:25:11.397]    - tweaked: FALSE
[13:25:11.397]    - call: plan(strategy)
[13:25:11.398] plan(): nbrOfWorkers() = 1
[13:25:11.398] SequentialFuture started (and completed)
[13:25:11.398] - Launch lazy future ... done
[13:25:11.398] run() for ‘SequentialFuture’ ... done
List of 11
 $ value       : int 42
 $ visible     : logi TRUE
 $ stdout      : NULL
 $ conditions  : list()
 $ rng         : logi FALSE
 $ globalenv   : NULL
 $ started     : POSIXct[1:1], format: "2025-01-07 13:25:11"
 $ finished    : POSIXct[1:1], format: "2025-01-07 13:25:11"
 $ session_uuid: chr "21b4b08a-5b62-ff51-4ba1-f9f5689a9c0b"
  ..- attr(*, "source")=List of 5
  .. ..$ host  : Named chr "47b98e4ec3a9"
  .. .. ..- attr(*, "names")= chr "HOSTNAME"
  .. ..$ info  : Named chr [1:8] "Linux" "6.5.0-1025-azure" "#26~22.04.1-Ubuntu SMP Thu Jul 11 22:33:04 UTC 2024" "47b98e4ec3a9" ...
  .. .. ..- attr(*, "names")= chr [1:8] "sysname" "release" "version" "nodename" ...
  .. ..$ pid   : int 93492
  .. ..$ time  : POSIXct[1:1], format: "2025-01-07 13:25:11"
  .. ..$ random: int 2147483647
 $ r_info      :List of 4
  ..$ version      :Classes 'R_system_version', 'package_version', 'numeric_version'  hidden list of 1
  .. ..$ : int [1:3] 4 3 2
  ..$ os           : chr "unix"
  ..$ os_name      : chr "Linux"
  ..$ captures_utf8: logi TRUE
 $ version     : chr "1.8"
 - attr(*, "class")= chr "FutureResult"
[13:25:11.406] getGlobalsAndPackages() ...
[13:25:11.406] Searching for globals...
[13:25:11.409] - globals found: [9] ‘{’, ‘print’, ‘:’, ‘str’, ‘cat’, ‘letters’, ‘write.table’, ‘[’, ‘::’
[13:25:11.409] Searching for globals ... DONE
[13:25:11.409] Resolving globals: FALSE
[13:25:11.410] 
[13:25:11.410] - packages: [1] ‘utils’
[13:25:11.410] getGlobalsAndPackages() ... DONE
[13:25:11.410] run() for ‘Future’ ...
[13:25:11.410] - state: ‘created’
[13:25:11.411] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[13:25:11.411] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[13:25:11.411] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[13:25:11.411]   - Field: ‘label’
[13:25:11.411]   - Field: ‘local’
[13:25:11.411]   - Field: ‘owner’
[13:25:11.411]   - Field: ‘envir’
[13:25:11.411]   - Field: ‘packages’
[13:25:11.412]   - Field: ‘gc’
[13:25:11.412]   - Field: ‘conditions’
[13:25:11.412]   - Field: ‘expr’
[13:25:11.412]   - Field: ‘uuid’
[13:25:11.412]   - Field: ‘seed’
[13:25:11.412]   - Field: ‘version’
[13:25:11.412]   - Field: ‘result’
[13:25:11.412]   - Field: ‘asynchronous’
[13:25:11.412]   - Field: ‘calls’
[13:25:11.412]   - Field: ‘globals’
[13:25:11.413]   - Field: ‘stdout’
[13:25:11.413]   - Field: ‘earlySignal’
[13:25:11.413]   - Field: ‘lazy’
[13:25:11.413]   - Field: ‘state’
[13:25:11.413] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[13:25:11.413] - Launch lazy future ...
[13:25:11.413] Packages needed by the future expression (n = 1): ‘utils’
[13:25:11.413] Packages needed by future strategies (n = 0): <none>
[13:25:11.414] {
[13:25:11.414]     {
[13:25:11.414]         {
[13:25:11.414]             ...future.startTime <- base::Sys.time()
[13:25:11.414]             {
[13:25:11.414]                 {
[13:25:11.414]                   {
[13:25:11.414]                     {
[13:25:11.414]                       base::local({
[13:25:11.414]                         has_future <- base::requireNamespace("future", 
[13:25:11.414]                           quietly = TRUE)
[13:25:11.414]                         if (has_future) {
[13:25:11.414]                           ns <- base::getNamespace("future")
[13:25:11.414]                           version <- ns[[".package"]][["version"]]
[13:25:11.414]                           if (is.null(version)) 
[13:25:11.414]                             version <- utils::packageVersion("future")
[13:25:11.414]                         }
[13:25:11.414]                         else {
[13:25:11.414]                           version <- NULL
[13:25:11.414]                         }
[13:25:11.414]                         if (!has_future || version < "1.8.0") {
[13:25:11.414]                           info <- base::c(r_version = base::gsub("R version ", 
[13:25:11.414]                             "", base::R.version$version.string), 
[13:25:11.414]                             platform = base::sprintf("%s (%s-bit)", 
[13:25:11.414]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:25:11.414]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:25:11.414]                               "release", "version")], collapse = " "), 
[13:25:11.414]                             hostname = base::Sys.info()[["nodename"]])
[13:25:11.414]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:25:11.414]                             info)
[13:25:11.414]                           info <- base::paste(info, collapse = "; ")
[13:25:11.414]                           if (!has_future) {
[13:25:11.414]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:25:11.414]                               info)
[13:25:11.414]                           }
[13:25:11.414]                           else {
[13:25:11.414]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:25:11.414]                               info, version)
[13:25:11.414]                           }
[13:25:11.414]                           base::stop(msg)
[13:25:11.414]                         }
[13:25:11.414]                       })
[13:25:11.414]                     }
[13:25:11.414]                     base::local({
[13:25:11.414]                       for (pkg in "utils") {
[13:25:11.414]                         base::loadNamespace(pkg)
[13:25:11.414]                         base::library(pkg, character.only = TRUE)
[13:25:11.414]                       }
[13:25:11.414]                     })
[13:25:11.414]                   }
[13:25:11.414]                   options(future.plan = NULL)
[13:25:11.414]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:25:11.414]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:25:11.414]                 }
[13:25:11.414]                 ...future.workdir <- getwd()
[13:25:11.414]             }
[13:25:11.414]             ...future.oldOptions <- base::as.list(base::.Options)
[13:25:11.414]             ...future.oldEnvVars <- base::Sys.getenv()
[13:25:11.414]         }
[13:25:11.414]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:25:11.414]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:25:11.414]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:25:11.414]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:25:11.414]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:25:11.414]             future.stdout.windows.reencode = NULL, width = 80L)
[13:25:11.414]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:25:11.414]             base::names(...future.oldOptions))
[13:25:11.414]     }
[13:25:11.414]     if (FALSE) {
[13:25:11.414]     }
[13:25:11.414]     else {
[13:25:11.414]         if (FALSE) {
[13:25:11.414]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:25:11.414]                 open = "w")
[13:25:11.414]         }
[13:25:11.414]         else {
[13:25:11.414]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:25:11.414]                 windows = "NUL", "/dev/null"), open = "w")
[13:25:11.414]         }
[13:25:11.414]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:25:11.414]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:25:11.414]             base::sink(type = "output", split = FALSE)
[13:25:11.414]             base::close(...future.stdout)
[13:25:11.414]         }, add = TRUE)
[13:25:11.414]     }
[13:25:11.414]     ...future.frame <- base::sys.nframe()
[13:25:11.414]     ...future.conditions <- base::list()
[13:25:11.414]     ...future.rng <- base::globalenv()$.Random.seed
[13:25:11.414]     if (FALSE) {
[13:25:11.414]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:25:11.414]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:25:11.414]     }
[13:25:11.414]     ...future.result <- base::tryCatch({
[13:25:11.414]         base::withCallingHandlers({
[13:25:11.414]             ...future.value <- base::withVisible(base::local({
[13:25:11.414]                 print(1:50)
[13:25:11.414]                 str(1:50)
[13:25:11.414]                 cat(letters, sep = "-")
[13:25:11.414]                 cat(1:6, collapse = "\n")
[13:25:11.414]                 write.table(datasets::iris[1:10, ], sep = "\t")
[13:25:11.414]                 42L
[13:25:11.414]             }))
[13:25:11.414]             future::FutureResult(value = ...future.value$value, 
[13:25:11.414]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:25:11.414]                   ...future.rng), globalenv = if (FALSE) 
[13:25:11.414]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:25:11.414]                     ...future.globalenv.names))
[13:25:11.414]                 else NULL, started = ...future.startTime, version = "1.8")
[13:25:11.414]         }, condition = base::local({
[13:25:11.414]             c <- base::c
[13:25:11.414]             inherits <- base::inherits
[13:25:11.414]             invokeRestart <- base::invokeRestart
[13:25:11.414]             length <- base::length
[13:25:11.414]             list <- base::list
[13:25:11.414]             seq.int <- base::seq.int
[13:25:11.414]             signalCondition <- base::signalCondition
[13:25:11.414]             sys.calls <- base::sys.calls
[13:25:11.414]             `[[` <- base::`[[`
[13:25:11.414]             `+` <- base::`+`
[13:25:11.414]             `<<-` <- base::`<<-`
[13:25:11.414]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:25:11.414]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:25:11.414]                   3L)]
[13:25:11.414]             }
[13:25:11.414]             function(cond) {
[13:25:11.414]                 is_error <- inherits(cond, "error")
[13:25:11.414]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:25:11.414]                   NULL)
[13:25:11.414]                 if (is_error) {
[13:25:11.414]                   sessionInformation <- function() {
[13:25:11.414]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:25:11.414]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:25:11.414]                       search = base::search(), system = base::Sys.info())
[13:25:11.414]                   }
[13:25:11.414]                   ...future.conditions[[length(...future.conditions) + 
[13:25:11.414]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:25:11.414]                     cond$call), session = sessionInformation(), 
[13:25:11.414]                     timestamp = base::Sys.time(), signaled = 0L)
[13:25:11.414]                   signalCondition(cond)
[13:25:11.414]                 }
[13:25:11.414]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:25:11.414]                 "immediateCondition"))) {
[13:25:11.414]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:25:11.414]                   ...future.conditions[[length(...future.conditions) + 
[13:25:11.414]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:25:11.414]                   if (TRUE && !signal) {
[13:25:11.414]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:25:11.414]                     {
[13:25:11.414]                       inherits <- base::inherits
[13:25:11.414]                       invokeRestart <- base::invokeRestart
[13:25:11.414]                       is.null <- base::is.null
[13:25:11.414]                       muffled <- FALSE
[13:25:11.414]                       if (inherits(cond, "message")) {
[13:25:11.414]                         muffled <- grepl(pattern, "muffleMessage")
[13:25:11.414]                         if (muffled) 
[13:25:11.414]                           invokeRestart("muffleMessage")
[13:25:11.414]                       }
[13:25:11.414]                       else if (inherits(cond, "warning")) {
[13:25:11.414]                         muffled <- grepl(pattern, "muffleWarning")
[13:25:11.414]                         if (muffled) 
[13:25:11.414]                           invokeRestart("muffleWarning")
[13:25:11.414]                       }
[13:25:11.414]                       else if (inherits(cond, "condition")) {
[13:25:11.414]                         if (!is.null(pattern)) {
[13:25:11.414]                           computeRestarts <- base::computeRestarts
[13:25:11.414]                           grepl <- base::grepl
[13:25:11.414]                           restarts <- computeRestarts(cond)
[13:25:11.414]                           for (restart in restarts) {
[13:25:11.414]                             name <- restart$name
[13:25:11.414]                             if (is.null(name)) 
[13:25:11.414]                               next
[13:25:11.414]                             if (!grepl(pattern, name)) 
[13:25:11.414]                               next
[13:25:11.414]                             invokeRestart(restart)
[13:25:11.414]                             muffled <- TRUE
[13:25:11.414]                             break
[13:25:11.414]                           }
[13:25:11.414]                         }
[13:25:11.414]                       }
[13:25:11.414]                       invisible(muffled)
[13:25:11.414]                     }
[13:25:11.414]                     muffleCondition(cond, pattern = "^muffle")
[13:25:11.414]                   }
[13:25:11.414]                 }
[13:25:11.414]                 else {
[13:25:11.414]                   if (TRUE) {
[13:25:11.414]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:25:11.414]                     {
[13:25:11.414]                       inherits <- base::inherits
[13:25:11.414]                       invokeRestart <- base::invokeRestart
[13:25:11.414]                       is.null <- base::is.null
[13:25:11.414]                       muffled <- FALSE
[13:25:11.414]                       if (inherits(cond, "message")) {
[13:25:11.414]                         muffled <- grepl(pattern, "muffleMessage")
[13:25:11.414]                         if (muffled) 
[13:25:11.414]                           invokeRestart("muffleMessage")
[13:25:11.414]                       }
[13:25:11.414]                       else if (inherits(cond, "warning")) {
[13:25:11.414]                         muffled <- grepl(pattern, "muffleWarning")
[13:25:11.414]                         if (muffled) 
[13:25:11.414]                           invokeRestart("muffleWarning")
[13:25:11.414]                       }
[13:25:11.414]                       else if (inherits(cond, "condition")) {
[13:25:11.414]                         if (!is.null(pattern)) {
[13:25:11.414]                           computeRestarts <- base::computeRestarts
[13:25:11.414]                           grepl <- base::grepl
[13:25:11.414]                           restarts <- computeRestarts(cond)
[13:25:11.414]                           for (restart in restarts) {
[13:25:11.414]                             name <- restart$name
[13:25:11.414]                             if (is.null(name)) 
[13:25:11.414]                               next
[13:25:11.414]                             if (!grepl(pattern, name)) 
[13:25:11.414]                               next
[13:25:11.414]                             invokeRestart(restart)
[13:25:11.414]                             muffled <- TRUE
[13:25:11.414]                             break
[13:25:11.414]                           }
[13:25:11.414]                         }
[13:25:11.414]                       }
[13:25:11.414]                       invisible(muffled)
[13:25:11.414]                     }
[13:25:11.414]                     muffleCondition(cond, pattern = "^muffle")
[13:25:11.414]                   }
[13:25:11.414]                 }
[13:25:11.414]             }
[13:25:11.414]         }))
[13:25:11.414]     }, error = function(ex) {
[13:25:11.414]         base::structure(base::list(value = NULL, visible = NULL, 
[13:25:11.414]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:25:11.414]                 ...future.rng), started = ...future.startTime, 
[13:25:11.414]             finished = Sys.time(), session_uuid = NA_character_, 
[13:25:11.414]             version = "1.8"), class = "FutureResult")
[13:25:11.414]     }, finally = {
[13:25:11.414]         if (!identical(...future.workdir, getwd())) 
[13:25:11.414]             setwd(...future.workdir)
[13:25:11.414]         {
[13:25:11.414]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:25:11.414]                 ...future.oldOptions$nwarnings <- NULL
[13:25:11.414]             }
[13:25:11.414]             base::options(...future.oldOptions)
[13:25:11.414]             if (.Platform$OS.type == "windows") {
[13:25:11.414]                 old_names <- names(...future.oldEnvVars)
[13:25:11.414]                 envs <- base::Sys.getenv()
[13:25:11.414]                 names <- names(envs)
[13:25:11.414]                 common <- intersect(names, old_names)
[13:25:11.414]                 added <- setdiff(names, old_names)
[13:25:11.414]                 removed <- setdiff(old_names, names)
[13:25:11.414]                 changed <- common[...future.oldEnvVars[common] != 
[13:25:11.414]                   envs[common]]
[13:25:11.414]                 NAMES <- toupper(changed)
[13:25:11.414]                 args <- list()
[13:25:11.414]                 for (kk in seq_along(NAMES)) {
[13:25:11.414]                   name <- changed[[kk]]
[13:25:11.414]                   NAME <- NAMES[[kk]]
[13:25:11.414]                   if (name != NAME && is.element(NAME, old_names)) 
[13:25:11.414]                     next
[13:25:11.414]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:25:11.414]                 }
[13:25:11.414]                 NAMES <- toupper(added)
[13:25:11.414]                 for (kk in seq_along(NAMES)) {
[13:25:11.414]                   name <- added[[kk]]
[13:25:11.414]                   NAME <- NAMES[[kk]]
[13:25:11.414]                   if (name != NAME && is.element(NAME, old_names)) 
[13:25:11.414]                     next
[13:25:11.414]                   args[[name]] <- ""
[13:25:11.414]                 }
[13:25:11.414]                 NAMES <- toupper(removed)
[13:25:11.414]                 for (kk in seq_along(NAMES)) {
[13:25:11.414]                   name <- removed[[kk]]
[13:25:11.414]                   NAME <- NAMES[[kk]]
[13:25:11.414]                   if (name != NAME && is.element(NAME, old_names)) 
[13:25:11.414]                     next
[13:25:11.414]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:25:11.414]                 }
[13:25:11.414]                 if (length(args) > 0) 
[13:25:11.414]                   base::do.call(base::Sys.setenv, args = args)
[13:25:11.414]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:25:11.414]             }
[13:25:11.414]             else {
[13:25:11.414]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:25:11.414]             }
[13:25:11.414]             {
[13:25:11.414]                 if (base::length(...future.futureOptionsAdded) > 
[13:25:11.414]                   0L) {
[13:25:11.414]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:25:11.414]                   base::names(opts) <- ...future.futureOptionsAdded
[13:25:11.414]                   base::options(opts)
[13:25:11.414]                 }
[13:25:11.414]                 {
[13:25:11.414]                   {
[13:25:11.414]                     NULL
[13:25:11.414]                     RNGkind("Mersenne-Twister")
[13:25:11.414]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[13:25:11.414]                       inherits = FALSE)
[13:25:11.414]                   }
[13:25:11.414]                   options(future.plan = NULL)
[13:25:11.414]                   if (is.na(NA_character_)) 
[13:25:11.414]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:25:11.414]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:25:11.414]                   future::plan(list(function (..., envir = parent.frame()) 
[13:25:11.414]                   {
[13:25:11.414]                     future <- SequentialFuture(..., envir = envir)
[13:25:11.414]                     if (!future$lazy) 
[13:25:11.414]                       future <- run(future)
[13:25:11.414]                     invisible(future)
[13:25:11.414]                   }), .cleanup = FALSE, .init = FALSE)
[13:25:11.414]                 }
[13:25:11.414]             }
[13:25:11.414]         }
[13:25:11.414]     })
[13:25:11.414]     if (TRUE) {
[13:25:11.414]         base::sink(type = "output", split = FALSE)
[13:25:11.414]         if (FALSE) {
[13:25:11.414]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:25:11.414]         }
[13:25:11.414]         else {
[13:25:11.414]             ...future.result["stdout"] <- base::list(NULL)
[13:25:11.414]         }
[13:25:11.414]         base::close(...future.stdout)
[13:25:11.414]         ...future.stdout <- NULL
[13:25:11.414]     }
[13:25:11.414]     ...future.result$conditions <- ...future.conditions
[13:25:11.414]     ...future.result$finished <- base::Sys.time()
[13:25:11.414]     ...future.result
[13:25:11.414] }
[13:25:11.416] plan(): Setting new future strategy stack:
[13:25:11.416] List of future strategies:
[13:25:11.416] 1. sequential:
[13:25:11.416]    - args: function (..., envir = parent.frame())
[13:25:11.416]    - tweaked: FALSE
[13:25:11.416]    - call: NULL
[13:25:11.417] plan(): nbrOfWorkers() = 1
[13:25:11.418] plan(): Setting new future strategy stack:
[13:25:11.418] List of future strategies:
[13:25:11.418] 1. sequential:
[13:25:11.418]    - args: function (..., envir = parent.frame())
[13:25:11.418]    - tweaked: FALSE
[13:25:11.418]    - call: plan(strategy)
[13:25:11.419] plan(): nbrOfWorkers() = 1
[13:25:11.419] SequentialFuture started (and completed)
[13:25:11.419] - Launch lazy future ... done
[13:25:11.419] run() for ‘SequentialFuture’ ... done
- stdout = structure(TRUE, drop = TRUE)
[13:25:11.419] getGlobalsAndPackages() ...
[13:25:11.420] Searching for globals...
[13:25:11.420] - globals found: [1] ‘print’
[13:25:11.420] Searching for globals ... DONE
[13:25:11.420] Resolving globals: FALSE
[13:25:11.421] 
[13:25:11.421] 
[13:25:11.421] getGlobalsAndPackages() ... DONE
[13:25:11.421] run() for ‘Future’ ...
[13:25:11.421] - state: ‘created’
[13:25:11.421] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[13:25:11.423] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[13:25:11.423] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[13:25:11.423]   - Field: ‘label’
[13:25:11.424]   - Field: ‘local’
[13:25:11.424]   - Field: ‘owner’
[13:25:11.424]   - Field: ‘envir’
[13:25:11.424]   - Field: ‘packages’
[13:25:11.424]   - Field: ‘gc’
[13:25:11.424]   - Field: ‘conditions’
[13:25:11.424]   - Field: ‘expr’
[13:25:11.424]   - Field: ‘uuid’
[13:25:11.424]   - Field: ‘seed’
[13:25:11.425]   - Field: ‘version’
[13:25:11.425]   - Field: ‘result’
[13:25:11.425]   - Field: ‘asynchronous’
[13:25:11.425]   - Field: ‘calls’
[13:25:11.425]   - Field: ‘globals’
[13:25:11.425]   - Field: ‘stdout’
[13:25:11.425]   - Field: ‘earlySignal’
[13:25:11.425]   - Field: ‘lazy’
[13:25:11.425]   - Field: ‘state’
[13:25:11.425] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[13:25:11.425] - Launch lazy future ...
[13:25:11.426] Packages needed by the future expression (n = 0): <none>
[13:25:11.426] Packages needed by future strategies (n = 0): <none>
[13:25:11.426] {
[13:25:11.426]     {
[13:25:11.426]         {
[13:25:11.426]             ...future.startTime <- base::Sys.time()
[13:25:11.426]             {
[13:25:11.426]                 {
[13:25:11.426]                   {
[13:25:11.426]                     base::local({
[13:25:11.426]                       has_future <- base::requireNamespace("future", 
[13:25:11.426]                         quietly = TRUE)
[13:25:11.426]                       if (has_future) {
[13:25:11.426]                         ns <- base::getNamespace("future")
[13:25:11.426]                         version <- ns[[".package"]][["version"]]
[13:25:11.426]                         if (is.null(version)) 
[13:25:11.426]                           version <- utils::packageVersion("future")
[13:25:11.426]                       }
[13:25:11.426]                       else {
[13:25:11.426]                         version <- NULL
[13:25:11.426]                       }
[13:25:11.426]                       if (!has_future || version < "1.8.0") {
[13:25:11.426]                         info <- base::c(r_version = base::gsub("R version ", 
[13:25:11.426]                           "", base::R.version$version.string), 
[13:25:11.426]                           platform = base::sprintf("%s (%s-bit)", 
[13:25:11.426]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:25:11.426]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[13:25:11.426]                             "release", "version")], collapse = " "), 
[13:25:11.426]                           hostname = base::Sys.info()[["nodename"]])
[13:25:11.426]                         info <- base::sprintf("%s: %s", base::names(info), 
[13:25:11.426]                           info)
[13:25:11.426]                         info <- base::paste(info, collapse = "; ")
[13:25:11.426]                         if (!has_future) {
[13:25:11.426]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:25:11.426]                             info)
[13:25:11.426]                         }
[13:25:11.426]                         else {
[13:25:11.426]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:25:11.426]                             info, version)
[13:25:11.426]                         }
[13:25:11.426]                         base::stop(msg)
[13:25:11.426]                       }
[13:25:11.426]                     })
[13:25:11.426]                   }
[13:25:11.426]                   options(future.plan = NULL)
[13:25:11.426]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:25:11.426]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:25:11.426]                 }
[13:25:11.426]                 ...future.workdir <- getwd()
[13:25:11.426]             }
[13:25:11.426]             ...future.oldOptions <- base::as.list(base::.Options)
[13:25:11.426]             ...future.oldEnvVars <- base::Sys.getenv()
[13:25:11.426]         }
[13:25:11.426]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:25:11.426]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:25:11.426]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:25:11.426]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:25:11.426]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:25:11.426]             future.stdout.windows.reencode = NULL, width = 80L)
[13:25:11.426]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:25:11.426]             base::names(...future.oldOptions))
[13:25:11.426]     }
[13:25:11.426]     if (FALSE) {
[13:25:11.426]     }
[13:25:11.426]     else {
[13:25:11.426]         if (TRUE) {
[13:25:11.426]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:25:11.426]                 open = "w")
[13:25:11.426]         }
[13:25:11.426]         else {
[13:25:11.426]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:25:11.426]                 windows = "NUL", "/dev/null"), open = "w")
[13:25:11.426]         }
[13:25:11.426]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:25:11.426]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:25:11.426]             base::sink(type = "output", split = FALSE)
[13:25:11.426]             base::close(...future.stdout)
[13:25:11.426]         }, add = TRUE)
[13:25:11.426]     }
[13:25:11.426]     ...future.frame <- base::sys.nframe()
[13:25:11.426]     ...future.conditions <- base::list()
[13:25:11.426]     ...future.rng <- base::globalenv()$.Random.seed
[13:25:11.426]     if (FALSE) {
[13:25:11.426]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:25:11.426]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:25:11.426]     }
[13:25:11.426]     ...future.result <- base::tryCatch({
[13:25:11.426]         base::withCallingHandlers({
[13:25:11.426]             ...future.value <- base::withVisible(base::local(print(42)))
[13:25:11.426]             future::FutureResult(value = ...future.value$value, 
[13:25:11.426]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:25:11.426]                   ...future.rng), globalenv = if (FALSE) 
[13:25:11.426]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:25:11.426]                     ...future.globalenv.names))
[13:25:11.426]                 else NULL, started = ...future.startTime, version = "1.8")
[13:25:11.426]         }, condition = base::local({
[13:25:11.426]             c <- base::c
[13:25:11.426]             inherits <- base::inherits
[13:25:11.426]             invokeRestart <- base::invokeRestart
[13:25:11.426]             length <- base::length
[13:25:11.426]             list <- base::list
[13:25:11.426]             seq.int <- base::seq.int
[13:25:11.426]             signalCondition <- base::signalCondition
[13:25:11.426]             sys.calls <- base::sys.calls
[13:25:11.426]             `[[` <- base::`[[`
[13:25:11.426]             `+` <- base::`+`
[13:25:11.426]             `<<-` <- base::`<<-`
[13:25:11.426]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:25:11.426]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:25:11.426]                   3L)]
[13:25:11.426]             }
[13:25:11.426]             function(cond) {
[13:25:11.426]                 is_error <- inherits(cond, "error")
[13:25:11.426]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:25:11.426]                   NULL)
[13:25:11.426]                 if (is_error) {
[13:25:11.426]                   sessionInformation <- function() {
[13:25:11.426]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:25:11.426]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:25:11.426]                       search = base::search(), system = base::Sys.info())
[13:25:11.426]                   }
[13:25:11.426]                   ...future.conditions[[length(...future.conditions) + 
[13:25:11.426]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:25:11.426]                     cond$call), session = sessionInformation(), 
[13:25:11.426]                     timestamp = base::Sys.time(), signaled = 0L)
[13:25:11.426]                   signalCondition(cond)
[13:25:11.426]                 }
[13:25:11.426]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:25:11.426]                 "immediateCondition"))) {
[13:25:11.426]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:25:11.426]                   ...future.conditions[[length(...future.conditions) + 
[13:25:11.426]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:25:11.426]                   if (TRUE && !signal) {
[13:25:11.426]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:25:11.426]                     {
[13:25:11.426]                       inherits <- base::inherits
[13:25:11.426]                       invokeRestart <- base::invokeRestart
[13:25:11.426]                       is.null <- base::is.null
[13:25:11.426]                       muffled <- FALSE
[13:25:11.426]                       if (inherits(cond, "message")) {
[13:25:11.426]                         muffled <- grepl(pattern, "muffleMessage")
[13:25:11.426]                         if (muffled) 
[13:25:11.426]                           invokeRestart("muffleMessage")
[13:25:11.426]                       }
[13:25:11.426]                       else if (inherits(cond, "warning")) {
[13:25:11.426]                         muffled <- grepl(pattern, "muffleWarning")
[13:25:11.426]                         if (muffled) 
[13:25:11.426]                           invokeRestart("muffleWarning")
[13:25:11.426]                       }
[13:25:11.426]                       else if (inherits(cond, "condition")) {
[13:25:11.426]                         if (!is.null(pattern)) {
[13:25:11.426]                           computeRestarts <- base::computeRestarts
[13:25:11.426]                           grepl <- base::grepl
[13:25:11.426]                           restarts <- computeRestarts(cond)
[13:25:11.426]                           for (restart in restarts) {
[13:25:11.426]                             name <- restart$name
[13:25:11.426]                             if (is.null(name)) 
[13:25:11.426]                               next
[13:25:11.426]                             if (!grepl(pattern, name)) 
[13:25:11.426]                               next
[13:25:11.426]                             invokeRestart(restart)
[13:25:11.426]                             muffled <- TRUE
[13:25:11.426]                             break
[13:25:11.426]                           }
[13:25:11.426]                         }
[13:25:11.426]                       }
[13:25:11.426]                       invisible(muffled)
[13:25:11.426]                     }
[13:25:11.426]                     muffleCondition(cond, pattern = "^muffle")
[13:25:11.426]                   }
[13:25:11.426]                 }
[13:25:11.426]                 else {
[13:25:11.426]                   if (TRUE) {
[13:25:11.426]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:25:11.426]                     {
[13:25:11.426]                       inherits <- base::inherits
[13:25:11.426]                       invokeRestart <- base::invokeRestart
[13:25:11.426]                       is.null <- base::is.null
[13:25:11.426]                       muffled <- FALSE
[13:25:11.426]                       if (inherits(cond, "message")) {
[13:25:11.426]                         muffled <- grepl(pattern, "muffleMessage")
[13:25:11.426]                         if (muffled) 
[13:25:11.426]                           invokeRestart("muffleMessage")
[13:25:11.426]                       }
[13:25:11.426]                       else if (inherits(cond, "warning")) {
[13:25:11.426]                         muffled <- grepl(pattern, "muffleWarning")
[13:25:11.426]                         if (muffled) 
[13:25:11.426]                           invokeRestart("muffleWarning")
[13:25:11.426]                       }
[13:25:11.426]                       else if (inherits(cond, "condition")) {
[13:25:11.426]                         if (!is.null(pattern)) {
[13:25:11.426]                           computeRestarts <- base::computeRestarts
[13:25:11.426]                           grepl <- base::grepl
[13:25:11.426]                           restarts <- computeRestarts(cond)
[13:25:11.426]                           for (restart in restarts) {
[13:25:11.426]                             name <- restart$name
[13:25:11.426]                             if (is.null(name)) 
[13:25:11.426]                               next
[13:25:11.426]                             if (!grepl(pattern, name)) 
[13:25:11.426]                               next
[13:25:11.426]                             invokeRestart(restart)
[13:25:11.426]                             muffled <- TRUE
[13:25:11.426]                             break
[13:25:11.426]                           }
[13:25:11.426]                         }
[13:25:11.426]                       }
[13:25:11.426]                       invisible(muffled)
[13:25:11.426]                     }
[13:25:11.426]                     muffleCondition(cond, pattern = "^muffle")
[13:25:11.426]                   }
[13:25:11.426]                 }
[13:25:11.426]             }
[13:25:11.426]         }))
[13:25:11.426]     }, error = function(ex) {
[13:25:11.426]         base::structure(base::list(value = NULL, visible = NULL, 
[13:25:11.426]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:25:11.426]                 ...future.rng), started = ...future.startTime, 
[13:25:11.426]             finished = Sys.time(), session_uuid = NA_character_, 
[13:25:11.426]             version = "1.8"), class = "FutureResult")
[13:25:11.426]     }, finally = {
[13:25:11.426]         if (!identical(...future.workdir, getwd())) 
[13:25:11.426]             setwd(...future.workdir)
[13:25:11.426]         {
[13:25:11.426]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:25:11.426]                 ...future.oldOptions$nwarnings <- NULL
[13:25:11.426]             }
[13:25:11.426]             base::options(...future.oldOptions)
[13:25:11.426]             if (.Platform$OS.type == "windows") {
[13:25:11.426]                 old_names <- names(...future.oldEnvVars)
[13:25:11.426]                 envs <- base::Sys.getenv()
[13:25:11.426]                 names <- names(envs)
[13:25:11.426]                 common <- intersect(names, old_names)
[13:25:11.426]                 added <- setdiff(names, old_names)
[13:25:11.426]                 removed <- setdiff(old_names, names)
[13:25:11.426]                 changed <- common[...future.oldEnvVars[common] != 
[13:25:11.426]                   envs[common]]
[13:25:11.426]                 NAMES <- toupper(changed)
[13:25:11.426]                 args <- list()
[13:25:11.426]                 for (kk in seq_along(NAMES)) {
[13:25:11.426]                   name <- changed[[kk]]
[13:25:11.426]                   NAME <- NAMES[[kk]]
[13:25:11.426]                   if (name != NAME && is.element(NAME, old_names)) 
[13:25:11.426]                     next
[13:25:11.426]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:25:11.426]                 }
[13:25:11.426]                 NAMES <- toupper(added)
[13:25:11.426]                 for (kk in seq_along(NAMES)) {
[13:25:11.426]                   name <- added[[kk]]
[13:25:11.426]                   NAME <- NAMES[[kk]]
[13:25:11.426]                   if (name != NAME && is.element(NAME, old_names)) 
[13:25:11.426]                     next
[13:25:11.426]                   args[[name]] <- ""
[13:25:11.426]                 }
[13:25:11.426]                 NAMES <- toupper(removed)
[13:25:11.426]                 for (kk in seq_along(NAMES)) {
[13:25:11.426]                   name <- removed[[kk]]
[13:25:11.426]                   NAME <- NAMES[[kk]]
[13:25:11.426]                   if (name != NAME && is.element(NAME, old_names)) 
[13:25:11.426]                     next
[13:25:11.426]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:25:11.426]                 }
[13:25:11.426]                 if (length(args) > 0) 
[13:25:11.426]                   base::do.call(base::Sys.setenv, args = args)
[13:25:11.426]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:25:11.426]             }
[13:25:11.426]             else {
[13:25:11.426]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:25:11.426]             }
[13:25:11.426]             {
[13:25:11.426]                 if (base::length(...future.futureOptionsAdded) > 
[13:25:11.426]                   0L) {
[13:25:11.426]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:25:11.426]                   base::names(opts) <- ...future.futureOptionsAdded
[13:25:11.426]                   base::options(opts)
[13:25:11.426]                 }
[13:25:11.426]                 {
[13:25:11.426]                   {
[13:25:11.426]                     NULL
[13:25:11.426]                     RNGkind("Mersenne-Twister")
[13:25:11.426]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[13:25:11.426]                       inherits = FALSE)
[13:25:11.426]                   }
[13:25:11.426]                   options(future.plan = NULL)
[13:25:11.426]                   if (is.na(NA_character_)) 
[13:25:11.426]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:25:11.426]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:25:11.426]                   future::plan(list(function (..., envir = parent.frame()) 
[13:25:11.426]                   {
[13:25:11.426]                     future <- SequentialFuture(..., envir = envir)
[13:25:11.426]                     if (!future$lazy) 
[13:25:11.426]                       future <- run(future)
[13:25:11.426]                     invisible(future)
[13:25:11.426]                   }), .cleanup = FALSE, .init = FALSE)
[13:25:11.426]                 }
[13:25:11.426]             }
[13:25:11.426]         }
[13:25:11.426]     })
[13:25:11.426]     if (TRUE) {
[13:25:11.426]         base::sink(type = "output", split = FALSE)
[13:25:11.426]         if (TRUE) {
[13:25:11.426]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:25:11.426]         }
[13:25:11.426]         else {
[13:25:11.426]             ...future.result["stdout"] <- base::list(NULL)
[13:25:11.426]         }
[13:25:11.426]         base::close(...future.stdout)
[13:25:11.426]         ...future.stdout <- NULL
[13:25:11.426]     }
[13:25:11.426]     ...future.result$conditions <- ...future.conditions
[13:25:11.426]     ...future.result$finished <- base::Sys.time()
[13:25:11.426]     ...future.result
[13:25:11.426] }
[13:25:11.428] plan(): Setting new future strategy stack:
[13:25:11.428] List of future strategies:
[13:25:11.428] 1. sequential:
[13:25:11.428]    - args: function (..., envir = parent.frame())
[13:25:11.428]    - tweaked: FALSE
[13:25:11.428]    - call: NULL
[13:25:11.429] plan(): nbrOfWorkers() = 1
[13:25:11.429] plan(): Setting new future strategy stack:
[13:25:11.429] List of future strategies:
[13:25:11.429] 1. sequential:
[13:25:11.429]    - args: function (..., envir = parent.frame())
[13:25:11.429]    - tweaked: FALSE
[13:25:11.429]    - call: plan(strategy)
[13:25:11.430] plan(): nbrOfWorkers() = 1
[13:25:11.430] SequentialFuture started (and completed)
[13:25:11.430] - Launch lazy future ... done
[13:25:11.430] run() for ‘SequentialFuture’ ... done
[1] 42
- stdout = NA
[13:25:11.431] getGlobalsAndPackages() ...
[13:25:11.431] Searching for globals...
[13:25:11.434] - globals found: [9] ‘{’, ‘print’, ‘:’, ‘str’, ‘cat’, ‘letters’, ‘write.table’, ‘[’, ‘::’
[13:25:11.434] Searching for globals ... DONE
[13:25:11.434] Resolving globals: FALSE
[13:25:11.434] 
[13:25:11.434] - packages: [1] ‘utils’
[13:25:11.435] getGlobalsAndPackages() ... DONE
[13:25:11.435] run() for ‘Future’ ...
[13:25:11.435] - state: ‘created’
[13:25:11.435] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[13:25:11.435] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[13:25:11.435] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[13:25:11.436]   - Field: ‘label’
[13:25:11.436]   - Field: ‘local’
[13:25:11.436]   - Field: ‘owner’
[13:25:11.436]   - Field: ‘envir’
[13:25:11.436]   - Field: ‘packages’
[13:25:11.436]   - Field: ‘gc’
[13:25:11.436]   - Field: ‘conditions’
[13:25:11.436]   - Field: ‘expr’
[13:25:11.436]   - Field: ‘uuid’
[13:25:11.436]   - Field: ‘seed’
[13:25:11.437]   - Field: ‘version’
[13:25:11.437]   - Field: ‘result’
[13:25:11.437]   - Field: ‘asynchronous’
[13:25:11.437]   - Field: ‘calls’
[13:25:11.437]   - Field: ‘globals’
[13:25:11.437]   - Field: ‘stdout’
[13:25:11.437]   - Field: ‘earlySignal’
[13:25:11.437]   - Field: ‘lazy’
[13:25:11.437]   - Field: ‘state’
[13:25:11.437] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[13:25:11.437] - Launch lazy future ...
[13:25:11.438] Packages needed by the future expression (n = 1): ‘utils’
[13:25:11.438] Packages needed by future strategies (n = 0): <none>
[13:25:11.438] {
[13:25:11.438]     {
[13:25:11.438]         {
[13:25:11.438]             ...future.startTime <- base::Sys.time()
[13:25:11.438]             {
[13:25:11.438]                 {
[13:25:11.438]                   {
[13:25:11.438]                     {
[13:25:11.438]                       base::local({
[13:25:11.438]                         has_future <- base::requireNamespace("future", 
[13:25:11.438]                           quietly = TRUE)
[13:25:11.438]                         if (has_future) {
[13:25:11.438]                           ns <- base::getNamespace("future")
[13:25:11.438]                           version <- ns[[".package"]][["version"]]
[13:25:11.438]                           if (is.null(version)) 
[13:25:11.438]                             version <- utils::packageVersion("future")
[13:25:11.438]                         }
[13:25:11.438]                         else {
[13:25:11.438]                           version <- NULL
[13:25:11.438]                         }
[13:25:11.438]                         if (!has_future || version < "1.8.0") {
[13:25:11.438]                           info <- base::c(r_version = base::gsub("R version ", 
[13:25:11.438]                             "", base::R.version$version.string), 
[13:25:11.438]                             platform = base::sprintf("%s (%s-bit)", 
[13:25:11.438]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:25:11.438]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:25:11.438]                               "release", "version")], collapse = " "), 
[13:25:11.438]                             hostname = base::Sys.info()[["nodename"]])
[13:25:11.438]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:25:11.438]                             info)
[13:25:11.438]                           info <- base::paste(info, collapse = "; ")
[13:25:11.438]                           if (!has_future) {
[13:25:11.438]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:25:11.438]                               info)
[13:25:11.438]                           }
[13:25:11.438]                           else {
[13:25:11.438]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:25:11.438]                               info, version)
[13:25:11.438]                           }
[13:25:11.438]                           base::stop(msg)
[13:25:11.438]                         }
[13:25:11.438]                       })
[13:25:11.438]                     }
[13:25:11.438]                     base::local({
[13:25:11.438]                       for (pkg in "utils") {
[13:25:11.438]                         base::loadNamespace(pkg)
[13:25:11.438]                         base::library(pkg, character.only = TRUE)
[13:25:11.438]                       }
[13:25:11.438]                     })
[13:25:11.438]                   }
[13:25:11.438]                   options(future.plan = NULL)
[13:25:11.438]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:25:11.438]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:25:11.438]                 }
[13:25:11.438]                 ...future.workdir <- getwd()
[13:25:11.438]             }
[13:25:11.438]             ...future.oldOptions <- base::as.list(base::.Options)
[13:25:11.438]             ...future.oldEnvVars <- base::Sys.getenv()
[13:25:11.438]         }
[13:25:11.438]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:25:11.438]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:25:11.438]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:25:11.438]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:25:11.438]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:25:11.438]             future.stdout.windows.reencode = NULL, width = 80L)
[13:25:11.438]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:25:11.438]             base::names(...future.oldOptions))
[13:25:11.438]     }
[13:25:11.438]     if (TRUE) {
[13:25:11.438]     }
[13:25:11.438]     else {
[13:25:11.438]         if (NA) {
[13:25:11.438]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:25:11.438]                 open = "w")
[13:25:11.438]         }
[13:25:11.438]         else {
[13:25:11.438]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:25:11.438]                 windows = "NUL", "/dev/null"), open = "w")
[13:25:11.438]         }
[13:25:11.438]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:25:11.438]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:25:11.438]             base::sink(type = "output", split = FALSE)
[13:25:11.438]             base::close(...future.stdout)
[13:25:11.438]         }, add = TRUE)
[13:25:11.438]     }
[13:25:11.438]     ...future.frame <- base::sys.nframe()
[13:25:11.438]     ...future.conditions <- base::list()
[13:25:11.438]     ...future.rng <- base::globalenv()$.Random.seed
[13:25:11.438]     if (FALSE) {
[13:25:11.438]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:25:11.438]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:25:11.438]     }
[13:25:11.438]     ...future.result <- base::tryCatch({
[13:25:11.438]         base::withCallingHandlers({
[13:25:11.438]             ...future.value <- base::withVisible(base::local({
[13:25:11.438]                 print(1:50)
[13:25:11.438]                 str(1:50)
[13:25:11.438]                 cat(letters, sep = "-")
[13:25:11.438]                 cat(1:6, collapse = "\n")
[13:25:11.438]                 write.table(datasets::iris[1:10, ], sep = "\t")
[13:25:11.438]                 42L
[13:25:11.438]             }))
[13:25:11.438]             future::FutureResult(value = ...future.value$value, 
[13:25:11.438]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:25:11.438]                   ...future.rng), globalenv = if (FALSE) 
[13:25:11.438]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:25:11.438]                     ...future.globalenv.names))
[13:25:11.438]                 else NULL, started = ...future.startTime, version = "1.8")
[13:25:11.438]         }, condition = base::local({
[13:25:11.438]             c <- base::c
[13:25:11.438]             inherits <- base::inherits
[13:25:11.438]             invokeRestart <- base::invokeRestart
[13:25:11.438]             length <- base::length
[13:25:11.438]             list <- base::list
[13:25:11.438]             seq.int <- base::seq.int
[13:25:11.438]             signalCondition <- base::signalCondition
[13:25:11.438]             sys.calls <- base::sys.calls
[13:25:11.438]             `[[` <- base::`[[`
[13:25:11.438]             `+` <- base::`+`
[13:25:11.438]             `<<-` <- base::`<<-`
[13:25:11.438]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:25:11.438]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:25:11.438]                   3L)]
[13:25:11.438]             }
[13:25:11.438]             function(cond) {
[13:25:11.438]                 is_error <- inherits(cond, "error")
[13:25:11.438]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:25:11.438]                   NULL)
[13:25:11.438]                 if (is_error) {
[13:25:11.438]                   sessionInformation <- function() {
[13:25:11.438]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:25:11.438]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:25:11.438]                       search = base::search(), system = base::Sys.info())
[13:25:11.438]                   }
[13:25:11.438]                   ...future.conditions[[length(...future.conditions) + 
[13:25:11.438]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:25:11.438]                     cond$call), session = sessionInformation(), 
[13:25:11.438]                     timestamp = base::Sys.time(), signaled = 0L)
[13:25:11.438]                   signalCondition(cond)
[13:25:11.438]                 }
[13:25:11.438]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:25:11.438]                 "immediateCondition"))) {
[13:25:11.438]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:25:11.438]                   ...future.conditions[[length(...future.conditions) + 
[13:25:11.438]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:25:11.438]                   if (TRUE && !signal) {
[13:25:11.438]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:25:11.438]                     {
[13:25:11.438]                       inherits <- base::inherits
[13:25:11.438]                       invokeRestart <- base::invokeRestart
[13:25:11.438]                       is.null <- base::is.null
[13:25:11.438]                       muffled <- FALSE
[13:25:11.438]                       if (inherits(cond, "message")) {
[13:25:11.438]                         muffled <- grepl(pattern, "muffleMessage")
[13:25:11.438]                         if (muffled) 
[13:25:11.438]                           invokeRestart("muffleMessage")
[13:25:11.438]                       }
[13:25:11.438]                       else if (inherits(cond, "warning")) {
[13:25:11.438]                         muffled <- grepl(pattern, "muffleWarning")
[13:25:11.438]                         if (muffled) 
[13:25:11.438]                           invokeRestart("muffleWarning")
[13:25:11.438]                       }
[13:25:11.438]                       else if (inherits(cond, "condition")) {
[13:25:11.438]                         if (!is.null(pattern)) {
[13:25:11.438]                           computeRestarts <- base::computeRestarts
[13:25:11.438]                           grepl <- base::grepl
[13:25:11.438]                           restarts <- computeRestarts(cond)
[13:25:11.438]                           for (restart in restarts) {
[13:25:11.438]                             name <- restart$name
[13:25:11.438]                             if (is.null(name)) 
[13:25:11.438]                               next
[13:25:11.438]                             if (!grepl(pattern, name)) 
[13:25:11.438]                               next
[13:25:11.438]                             invokeRestart(restart)
[13:25:11.438]                             muffled <- TRUE
[13:25:11.438]                             break
[13:25:11.438]                           }
[13:25:11.438]                         }
[13:25:11.438]                       }
[13:25:11.438]                       invisible(muffled)
[13:25:11.438]                     }
[13:25:11.438]                     muffleCondition(cond, pattern = "^muffle")
[13:25:11.438]                   }
[13:25:11.438]                 }
[13:25:11.438]                 else {
[13:25:11.438]                   if (TRUE) {
[13:25:11.438]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:25:11.438]                     {
[13:25:11.438]                       inherits <- base::inherits
[13:25:11.438]                       invokeRestart <- base::invokeRestart
[13:25:11.438]                       is.null <- base::is.null
[13:25:11.438]                       muffled <- FALSE
[13:25:11.438]                       if (inherits(cond, "message")) {
[13:25:11.438]                         muffled <- grepl(pattern, "muffleMessage")
[13:25:11.438]                         if (muffled) 
[13:25:11.438]                           invokeRestart("muffleMessage")
[13:25:11.438]                       }
[13:25:11.438]                       else if (inherits(cond, "warning")) {
[13:25:11.438]                         muffled <- grepl(pattern, "muffleWarning")
[13:25:11.438]                         if (muffled) 
[13:25:11.438]                           invokeRestart("muffleWarning")
[13:25:11.438]                       }
[13:25:11.438]                       else if (inherits(cond, "condition")) {
[13:25:11.438]                         if (!is.null(pattern)) {
[13:25:11.438]                           computeRestarts <- base::computeRestarts
[13:25:11.438]                           grepl <- base::grepl
[13:25:11.438]                           restarts <- computeRestarts(cond)
[13:25:11.438]                           for (restart in restarts) {
[13:25:11.438]                             name <- restart$name
[13:25:11.438]                             if (is.null(name)) 
[13:25:11.438]                               next
[13:25:11.438]                             if (!grepl(pattern, name)) 
[13:25:11.438]                               next
[13:25:11.438]                             invokeRestart(restart)
[13:25:11.438]                             muffled <- TRUE
[13:25:11.438]                             break
[13:25:11.438]                           }
[13:25:11.438]                         }
[13:25:11.438]                       }
[13:25:11.438]                       invisible(muffled)
[13:25:11.438]                     }
[13:25:11.438]                     muffleCondition(cond, pattern = "^muffle")
[13:25:11.438]                   }
[13:25:11.438]                 }
[13:25:11.438]             }
[13:25:11.438]         }))
[13:25:11.438]     }, error = function(ex) {
[13:25:11.438]         base::structure(base::list(value = NULL, visible = NULL, 
[13:25:11.438]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:25:11.438]                 ...future.rng), started = ...future.startTime, 
[13:25:11.438]             finished = Sys.time(), session_uuid = NA_character_, 
[13:25:11.438]             version = "1.8"), class = "FutureResult")
[13:25:11.438]     }, finally = {
[13:25:11.438]         if (!identical(...future.workdir, getwd())) 
[13:25:11.438]             setwd(...future.workdir)
[13:25:11.438]         {
[13:25:11.438]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:25:11.438]                 ...future.oldOptions$nwarnings <- NULL
[13:25:11.438]             }
[13:25:11.438]             base::options(...future.oldOptions)
[13:25:11.438]             if (.Platform$OS.type == "windows") {
[13:25:11.438]                 old_names <- names(...future.oldEnvVars)
[13:25:11.438]                 envs <- base::Sys.getenv()
[13:25:11.438]                 names <- names(envs)
[13:25:11.438]                 common <- intersect(names, old_names)
[13:25:11.438]                 added <- setdiff(names, old_names)
[13:25:11.438]                 removed <- setdiff(old_names, names)
[13:25:11.438]                 changed <- common[...future.oldEnvVars[common] != 
[13:25:11.438]                   envs[common]]
[13:25:11.438]                 NAMES <- toupper(changed)
[13:25:11.438]                 args <- list()
[13:25:11.438]                 for (kk in seq_along(NAMES)) {
[13:25:11.438]                   name <- changed[[kk]]
[13:25:11.438]                   NAME <- NAMES[[kk]]
[13:25:11.438]                   if (name != NAME && is.element(NAME, old_names)) 
[13:25:11.438]                     next
[13:25:11.438]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:25:11.438]                 }
[13:25:11.438]                 NAMES <- toupper(added)
[13:25:11.438]                 for (kk in seq_along(NAMES)) {
[13:25:11.438]                   name <- added[[kk]]
[13:25:11.438]                   NAME <- NAMES[[kk]]
[13:25:11.438]                   if (name != NAME && is.element(NAME, old_names)) 
[13:25:11.438]                     next
[13:25:11.438]                   args[[name]] <- ""
[13:25:11.438]                 }
[13:25:11.438]                 NAMES <- toupper(removed)
[13:25:11.438]                 for (kk in seq_along(NAMES)) {
[13:25:11.438]                   name <- removed[[kk]]
[13:25:11.438]                   NAME <- NAMES[[kk]]
[13:25:11.438]                   if (name != NAME && is.element(NAME, old_names)) 
[13:25:11.438]                     next
[13:25:11.438]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:25:11.438]                 }
[13:25:11.438]                 if (length(args) > 0) 
[13:25:11.438]                   base::do.call(base::Sys.setenv, args = args)
[13:25:11.438]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:25:11.438]             }
[13:25:11.438]             else {
[13:25:11.438]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:25:11.438]             }
[13:25:11.438]             {
[13:25:11.438]                 if (base::length(...future.futureOptionsAdded) > 
[13:25:11.438]                   0L) {
[13:25:11.438]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:25:11.438]                   base::names(opts) <- ...future.futureOptionsAdded
[13:25:11.438]                   base::options(opts)
[13:25:11.438]                 }
[13:25:11.438]                 {
[13:25:11.438]                   {
[13:25:11.438]                     NULL
[13:25:11.438]                     RNGkind("Mersenne-Twister")
[13:25:11.438]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[13:25:11.438]                       inherits = FALSE)
[13:25:11.438]                   }
[13:25:11.438]                   options(future.plan = NULL)
[13:25:11.438]                   if (is.na(NA_character_)) 
[13:25:11.438]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:25:11.438]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:25:11.438]                   future::plan(list(function (..., envir = parent.frame()) 
[13:25:11.438]                   {
[13:25:11.438]                     future <- SequentialFuture(..., envir = envir)
[13:25:11.438]                     if (!future$lazy) 
[13:25:11.438]                       future <- run(future)
[13:25:11.438]                     invisible(future)
[13:25:11.438]                   }), .cleanup = FALSE, .init = FALSE)
[13:25:11.438]                 }
[13:25:11.438]             }
[13:25:11.438]         }
[13:25:11.438]     })
[13:25:11.438]     if (FALSE) {
[13:25:11.438]         base::sink(type = "output", split = FALSE)
[13:25:11.438]         if (NA) {
[13:25:11.438]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:25:11.438]         }
[13:25:11.438]         else {
[13:25:11.438]             ...future.result["stdout"] <- base::list(NULL)
[13:25:11.438]         }
[13:25:11.438]         base::close(...future.stdout)
[13:25:11.438]         ...future.stdout <- NULL
[13:25:11.438]     }
[13:25:11.438]     ...future.result$conditions <- ...future.conditions
[13:25:11.438]     ...future.result$finished <- base::Sys.time()
[13:25:11.438]     ...future.result
[13:25:11.438] }
[13:25:11.440] plan(): Setting new future strategy stack:
[13:25:11.440] List of future strategies:
[13:25:11.440] 1. sequential:
[13:25:11.440]    - args: function (..., envir = parent.frame())
[13:25:11.440]    - tweaked: FALSE
[13:25:11.440]    - call: NULL
[13:25:11.441] plan(): nbrOfWorkers() = 1
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25
[26] 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50
 int [1:50] 1 2 3 4 5 6 7 8 9 10 ...
a-b-c-d-e-f-g-h-i-j-k-l-m-n-o-p-q-r-s-t-u-v-w-x-y-z1 2 3 4 5 6 
"Sepal.Length"	"Sepal.Width"	"Petal.Length"	"Petal.Width"	"Species"
"1"	5.1	3.5	1.4	0.2	"setosa"
"2"	4.9	3	1.4	0.2	"setosa"
"3"	4.7	3.2	1.3	0.2	"setosa"
"4"	4.6	3.1	1.5	0.2	"setosa"
"5"	5	3.6	1.4	0.2	"setosa"
"6"	5.4	3.9	1.7	0.4	"setosa"
"7"	4.6	3.4	1.4	0.3	"setosa"
"8"	5	3.4	1.5	0.2	"setosa"
"9"	4.4	2.9	1.4	0.2	"setosa"
"10"	4.9	3.1	1.5	0.1	"setosa"
[13:25:11.442] plan(): Setting new future strategy stack:
[13:25:11.443] List of future strategies:
[13:25:11.443] 1. sequential:
[13:25:11.443]    - args: function (..., envir = parent.frame())
[13:25:11.443]    - tweaked: FALSE
[13:25:11.443]    - call: plan(strategy)
[13:25:11.443] plan(): nbrOfWorkers() = 1
[13:25:11.443] SequentialFuture started (and completed)
[13:25:11.443] - Launch lazy future ... done
[13:25:11.443] run() for ‘SequentialFuture’ ... done
List of 11
 $ value       : int 42
 $ visible     : logi TRUE
 $ stdout      : NULL
 $ conditions  : list()
 $ rng         : logi FALSE
 $ globalenv   : NULL
 $ started     : POSIXct[1:1], format: "2025-01-07 13:25:11"
 $ finished    : POSIXct[1:1], format: "2025-01-07 13:25:11"
 $ session_uuid: chr "21b4b08a-5b62-ff51-4ba1-f9f5689a9c0b"
  ..- attr(*, "source")=List of 5
  .. ..$ host  : Named chr "47b98e4ec3a9"
  .. .. ..- attr(*, "names")= chr "HOSTNAME"
  .. ..$ info  : Named chr [1:8] "Linux" "6.5.0-1025-azure" "#26~22.04.1-Ubuntu SMP Thu Jul 11 22:33:04 UTC 2024" "47b98e4ec3a9" ...
  .. .. ..- attr(*, "names")= chr [1:8] "sysname" "release" "version" "nodename" ...
  .. ..$ pid   : int 93492
  .. ..$ time  : POSIXct[1:1], format: "2025-01-07 13:25:11"
  .. ..$ random: int 2147483647
 $ r_info      :List of 4
  ..$ version      :Classes 'R_system_version', 'package_version', 'numeric_version'  hidden list of 1
  .. ..$ : int [1:3] 4 3 2
  ..$ os           : chr "unix"
  ..$ os_name      : chr "Linux"
  ..$ captures_utf8: logi TRUE
 $ version     : chr "1.8"
 - attr(*, "class")= chr "FutureResult"
[13:25:11.453] getGlobalsAndPackages() ...
[13:25:11.453] Searching for globals...
[13:25:11.456] - globals found: [9] ‘{’, ‘print’, ‘:’, ‘str’, ‘cat’, ‘letters’, ‘write.table’, ‘[’, ‘::’
[13:25:11.456] Searching for globals ... DONE
[13:25:11.456] Resolving globals: FALSE
[13:25:11.457] 
[13:25:11.457] - packages: [1] ‘utils’
[13:25:11.457] getGlobalsAndPackages() ... DONE
[13:25:11.457] run() for ‘Future’ ...
[13:25:11.457] - state: ‘created’
[13:25:11.458] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[13:25:11.458] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[13:25:11.458] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[13:25:11.458]   - Field: ‘label’
[13:25:11.458]   - Field: ‘local’
[13:25:11.458]   - Field: ‘owner’
[13:25:11.458]   - Field: ‘envir’
[13:25:11.458]   - Field: ‘packages’
[13:25:11.459]   - Field: ‘gc’
[13:25:11.459]   - Field: ‘conditions’
[13:25:11.459]   - Field: ‘expr’
[13:25:11.459]   - Field: ‘uuid’
[13:25:11.459]   - Field: ‘seed’
[13:25:11.459]   - Field: ‘version’
[13:25:11.459]   - Field: ‘result’
[13:25:11.459]   - Field: ‘asynchronous’
[13:25:11.459]   - Field: ‘calls’
[13:25:11.459]   - Field: ‘globals’
[13:25:11.459]   - Field: ‘stdout’
[13:25:11.460]   - Field: ‘earlySignal’
[13:25:11.460]   - Field: ‘lazy’
[13:25:11.460]   - Field: ‘state’
[13:25:11.460] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[13:25:11.460] - Launch lazy future ...
[13:25:11.460] Packages needed by the future expression (n = 1): ‘utils’
[13:25:11.460] Packages needed by future strategies (n = 0): <none>
[13:25:11.461] {
[13:25:11.461]     {
[13:25:11.461]         {
[13:25:11.461]             ...future.startTime <- base::Sys.time()
[13:25:11.461]             {
[13:25:11.461]                 {
[13:25:11.461]                   {
[13:25:11.461]                     {
[13:25:11.461]                       base::local({
[13:25:11.461]                         has_future <- base::requireNamespace("future", 
[13:25:11.461]                           quietly = TRUE)
[13:25:11.461]                         if (has_future) {
[13:25:11.461]                           ns <- base::getNamespace("future")
[13:25:11.461]                           version <- ns[[".package"]][["version"]]
[13:25:11.461]                           if (is.null(version)) 
[13:25:11.461]                             version <- utils::packageVersion("future")
[13:25:11.461]                         }
[13:25:11.461]                         else {
[13:25:11.461]                           version <- NULL
[13:25:11.461]                         }
[13:25:11.461]                         if (!has_future || version < "1.8.0") {
[13:25:11.461]                           info <- base::c(r_version = base::gsub("R version ", 
[13:25:11.461]                             "", base::R.version$version.string), 
[13:25:11.461]                             platform = base::sprintf("%s (%s-bit)", 
[13:25:11.461]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:25:11.461]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:25:11.461]                               "release", "version")], collapse = " "), 
[13:25:11.461]                             hostname = base::Sys.info()[["nodename"]])
[13:25:11.461]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:25:11.461]                             info)
[13:25:11.461]                           info <- base::paste(info, collapse = "; ")
[13:25:11.461]                           if (!has_future) {
[13:25:11.461]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:25:11.461]                               info)
[13:25:11.461]                           }
[13:25:11.461]                           else {
[13:25:11.461]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:25:11.461]                               info, version)
[13:25:11.461]                           }
[13:25:11.461]                           base::stop(msg)
[13:25:11.461]                         }
[13:25:11.461]                       })
[13:25:11.461]                     }
[13:25:11.461]                     base::local({
[13:25:11.461]                       for (pkg in "utils") {
[13:25:11.461]                         base::loadNamespace(pkg)
[13:25:11.461]                         base::library(pkg, character.only = TRUE)
[13:25:11.461]                       }
[13:25:11.461]                     })
[13:25:11.461]                   }
[13:25:11.461]                   options(future.plan = NULL)
[13:25:11.461]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:25:11.461]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:25:11.461]                 }
[13:25:11.461]                 ...future.workdir <- getwd()
[13:25:11.461]             }
[13:25:11.461]             ...future.oldOptions <- base::as.list(base::.Options)
[13:25:11.461]             ...future.oldEnvVars <- base::Sys.getenv()
[13:25:11.461]         }
[13:25:11.461]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:25:11.461]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:25:11.461]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:25:11.461]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:25:11.461]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:25:11.461]             future.stdout.windows.reencode = NULL, width = 80L)
[13:25:11.461]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:25:11.461]             base::names(...future.oldOptions))
[13:25:11.461]     }
[13:25:11.461]     if (TRUE) {
[13:25:11.461]     }
[13:25:11.461]     else {
[13:25:11.461]         if (NA) {
[13:25:11.461]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:25:11.461]                 open = "w")
[13:25:11.461]         }
[13:25:11.461]         else {
[13:25:11.461]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:25:11.461]                 windows = "NUL", "/dev/null"), open = "w")
[13:25:11.461]         }
[13:25:11.461]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:25:11.461]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:25:11.461]             base::sink(type = "output", split = FALSE)
[13:25:11.461]             base::close(...future.stdout)
[13:25:11.461]         }, add = TRUE)
[13:25:11.461]     }
[13:25:11.461]     ...future.frame <- base::sys.nframe()
[13:25:11.461]     ...future.conditions <- base::list()
[13:25:11.461]     ...future.rng <- base::globalenv()$.Random.seed
[13:25:11.461]     if (FALSE) {
[13:25:11.461]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:25:11.461]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:25:11.461]     }
[13:25:11.461]     ...future.result <- base::tryCatch({
[13:25:11.461]         base::withCallingHandlers({
[13:25:11.461]             ...future.value <- base::withVisible(base::local({
[13:25:11.461]                 print(1:50)
[13:25:11.461]                 str(1:50)
[13:25:11.461]                 cat(letters, sep = "-")
[13:25:11.461]                 cat(1:6, collapse = "\n")
[13:25:11.461]                 write.table(datasets::iris[1:10, ], sep = "\t")
[13:25:11.461]                 42L
[13:25:11.461]             }))
[13:25:11.461]             future::FutureResult(value = ...future.value$value, 
[13:25:11.461]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:25:11.461]                   ...future.rng), globalenv = if (FALSE) 
[13:25:11.461]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:25:11.461]                     ...future.globalenv.names))
[13:25:11.461]                 else NULL, started = ...future.startTime, version = "1.8")
[13:25:11.461]         }, condition = base::local({
[13:25:11.461]             c <- base::c
[13:25:11.461]             inherits <- base::inherits
[13:25:11.461]             invokeRestart <- base::invokeRestart
[13:25:11.461]             length <- base::length
[13:25:11.461]             list <- base::list
[13:25:11.461]             seq.int <- base::seq.int
[13:25:11.461]             signalCondition <- base::signalCondition
[13:25:11.461]             sys.calls <- base::sys.calls
[13:25:11.461]             `[[` <- base::`[[`
[13:25:11.461]             `+` <- base::`+`
[13:25:11.461]             `<<-` <- base::`<<-`
[13:25:11.461]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:25:11.461]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:25:11.461]                   3L)]
[13:25:11.461]             }
[13:25:11.461]             function(cond) {
[13:25:11.461]                 is_error <- inherits(cond, "error")
[13:25:11.461]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:25:11.461]                   NULL)
[13:25:11.461]                 if (is_error) {
[13:25:11.461]                   sessionInformation <- function() {
[13:25:11.461]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:25:11.461]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:25:11.461]                       search = base::search(), system = base::Sys.info())
[13:25:11.461]                   }
[13:25:11.461]                   ...future.conditions[[length(...future.conditions) + 
[13:25:11.461]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:25:11.461]                     cond$call), session = sessionInformation(), 
[13:25:11.461]                     timestamp = base::Sys.time(), signaled = 0L)
[13:25:11.461]                   signalCondition(cond)
[13:25:11.461]                 }
[13:25:11.461]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:25:11.461]                 "immediateCondition"))) {
[13:25:11.461]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:25:11.461]                   ...future.conditions[[length(...future.conditions) + 
[13:25:11.461]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:25:11.461]                   if (TRUE && !signal) {
[13:25:11.461]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:25:11.461]                     {
[13:25:11.461]                       inherits <- base::inherits
[13:25:11.461]                       invokeRestart <- base::invokeRestart
[13:25:11.461]                       is.null <- base::is.null
[13:25:11.461]                       muffled <- FALSE
[13:25:11.461]                       if (inherits(cond, "message")) {
[13:25:11.461]                         muffled <- grepl(pattern, "muffleMessage")
[13:25:11.461]                         if (muffled) 
[13:25:11.461]                           invokeRestart("muffleMessage")
[13:25:11.461]                       }
[13:25:11.461]                       else if (inherits(cond, "warning")) {
[13:25:11.461]                         muffled <- grepl(pattern, "muffleWarning")
[13:25:11.461]                         if (muffled) 
[13:25:11.461]                           invokeRestart("muffleWarning")
[13:25:11.461]                       }
[13:25:11.461]                       else if (inherits(cond, "condition")) {
[13:25:11.461]                         if (!is.null(pattern)) {
[13:25:11.461]                           computeRestarts <- base::computeRestarts
[13:25:11.461]                           grepl <- base::grepl
[13:25:11.461]                           restarts <- computeRestarts(cond)
[13:25:11.461]                           for (restart in restarts) {
[13:25:11.461]                             name <- restart$name
[13:25:11.461]                             if (is.null(name)) 
[13:25:11.461]                               next
[13:25:11.461]                             if (!grepl(pattern, name)) 
[13:25:11.461]                               next
[13:25:11.461]                             invokeRestart(restart)
[13:25:11.461]                             muffled <- TRUE
[13:25:11.461]                             break
[13:25:11.461]                           }
[13:25:11.461]                         }
[13:25:11.461]                       }
[13:25:11.461]                       invisible(muffled)
[13:25:11.461]                     }
[13:25:11.461]                     muffleCondition(cond, pattern = "^muffle")
[13:25:11.461]                   }
[13:25:11.461]                 }
[13:25:11.461]                 else {
[13:25:11.461]                   if (TRUE) {
[13:25:11.461]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:25:11.461]                     {
[13:25:11.461]                       inherits <- base::inherits
[13:25:11.461]                       invokeRestart <- base::invokeRestart
[13:25:11.461]                       is.null <- base::is.null
[13:25:11.461]                       muffled <- FALSE
[13:25:11.461]                       if (inherits(cond, "message")) {
[13:25:11.461]                         muffled <- grepl(pattern, "muffleMessage")
[13:25:11.461]                         if (muffled) 
[13:25:11.461]                           invokeRestart("muffleMessage")
[13:25:11.461]                       }
[13:25:11.461]                       else if (inherits(cond, "warning")) {
[13:25:11.461]                         muffled <- grepl(pattern, "muffleWarning")
[13:25:11.461]                         if (muffled) 
[13:25:11.461]                           invokeRestart("muffleWarning")
[13:25:11.461]                       }
[13:25:11.461]                       else if (inherits(cond, "condition")) {
[13:25:11.461]                         if (!is.null(pattern)) {
[13:25:11.461]                           computeRestarts <- base::computeRestarts
[13:25:11.461]                           grepl <- base::grepl
[13:25:11.461]                           restarts <- computeRestarts(cond)
[13:25:11.461]                           for (restart in restarts) {
[13:25:11.461]                             name <- restart$name
[13:25:11.461]                             if (is.null(name)) 
[13:25:11.461]                               next
[13:25:11.461]                             if (!grepl(pattern, name)) 
[13:25:11.461]                               next
[13:25:11.461]                             invokeRestart(restart)
[13:25:11.461]                             muffled <- TRUE
[13:25:11.461]                             break
[13:25:11.461]                           }
[13:25:11.461]                         }
[13:25:11.461]                       }
[13:25:11.461]                       invisible(muffled)
[13:25:11.461]                     }
[13:25:11.461]                     muffleCondition(cond, pattern = "^muffle")
[13:25:11.461]                   }
[13:25:11.461]                 }
[13:25:11.461]             }
[13:25:11.461]         }))
[13:25:11.461]     }, error = function(ex) {
[13:25:11.461]         base::structure(base::list(value = NULL, visible = NULL, 
[13:25:11.461]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:25:11.461]                 ...future.rng), started = ...future.startTime, 
[13:25:11.461]             finished = Sys.time(), session_uuid = NA_character_, 
[13:25:11.461]             version = "1.8"), class = "FutureResult")
[13:25:11.461]     }, finally = {
[13:25:11.461]         if (!identical(...future.workdir, getwd())) 
[13:25:11.461]             setwd(...future.workdir)
[13:25:11.461]         {
[13:25:11.461]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:25:11.461]                 ...future.oldOptions$nwarnings <- NULL
[13:25:11.461]             }
[13:25:11.461]             base::options(...future.oldOptions)
[13:25:11.461]             if (.Platform$OS.type == "windows") {
[13:25:11.461]                 old_names <- names(...future.oldEnvVars)
[13:25:11.461]                 envs <- base::Sys.getenv()
[13:25:11.461]                 names <- names(envs)
[13:25:11.461]                 common <- intersect(names, old_names)
[13:25:11.461]                 added <- setdiff(names, old_names)
[13:25:11.461]                 removed <- setdiff(old_names, names)
[13:25:11.461]                 changed <- common[...future.oldEnvVars[common] != 
[13:25:11.461]                   envs[common]]
[13:25:11.461]                 NAMES <- toupper(changed)
[13:25:11.461]                 args <- list()
[13:25:11.461]                 for (kk in seq_along(NAMES)) {
[13:25:11.461]                   name <- changed[[kk]]
[13:25:11.461]                   NAME <- NAMES[[kk]]
[13:25:11.461]                   if (name != NAME && is.element(NAME, old_names)) 
[13:25:11.461]                     next
[13:25:11.461]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:25:11.461]                 }
[13:25:11.461]                 NAMES <- toupper(added)
[13:25:11.461]                 for (kk in seq_along(NAMES)) {
[13:25:11.461]                   name <- added[[kk]]
[13:25:11.461]                   NAME <- NAMES[[kk]]
[13:25:11.461]                   if (name != NAME && is.element(NAME, old_names)) 
[13:25:11.461]                     next
[13:25:11.461]                   args[[name]] <- ""
[13:25:11.461]                 }
[13:25:11.461]                 NAMES <- toupper(removed)
[13:25:11.461]                 for (kk in seq_along(NAMES)) {
[13:25:11.461]                   name <- removed[[kk]]
[13:25:11.461]                   NAME <- NAMES[[kk]]
[13:25:11.461]                   if (name != NAME && is.element(NAME, old_names)) 
[13:25:11.461]                     next
[13:25:11.461]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:25:11.461]                 }
[13:25:11.461]                 if (length(args) > 0) 
[13:25:11.461]                   base::do.call(base::Sys.setenv, args = args)
[13:25:11.461]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:25:11.461]             }
[13:25:11.461]             else {
[13:25:11.461]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:25:11.461]             }
[13:25:11.461]             {
[13:25:11.461]                 if (base::length(...future.futureOptionsAdded) > 
[13:25:11.461]                   0L) {
[13:25:11.461]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:25:11.461]                   base::names(opts) <- ...future.futureOptionsAdded
[13:25:11.461]                   base::options(opts)
[13:25:11.461]                 }
[13:25:11.461]                 {
[13:25:11.461]                   {
[13:25:11.461]                     NULL
[13:25:11.461]                     RNGkind("Mersenne-Twister")
[13:25:11.461]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[13:25:11.461]                       inherits = FALSE)
[13:25:11.461]                   }
[13:25:11.461]                   options(future.plan = NULL)
[13:25:11.461]                   if (is.na(NA_character_)) 
[13:25:11.461]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:25:11.461]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:25:11.461]                   future::plan(list(function (..., envir = parent.frame()) 
[13:25:11.461]                   {
[13:25:11.461]                     future <- SequentialFuture(..., envir = envir)
[13:25:11.461]                     if (!future$lazy) 
[13:25:11.461]                       future <- run(future)
[13:25:11.461]                     invisible(future)
[13:25:11.461]                   }), .cleanup = FALSE, .init = FALSE)
[13:25:11.461]                 }
[13:25:11.461]             }
[13:25:11.461]         }
[13:25:11.461]     })
[13:25:11.461]     if (FALSE) {
[13:25:11.461]         base::sink(type = "output", split = FALSE)
[13:25:11.461]         if (NA) {
[13:25:11.461]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:25:11.461]         }
[13:25:11.461]         else {
[13:25:11.461]             ...future.result["stdout"] <- base::list(NULL)
[13:25:11.461]         }
[13:25:11.461]         base::close(...future.stdout)
[13:25:11.461]         ...future.stdout <- NULL
[13:25:11.461]     }
[13:25:11.461]     ...future.result$conditions <- ...future.conditions
[13:25:11.461]     ...future.result$finished <- base::Sys.time()
[13:25:11.461]     ...future.result
[13:25:11.461] }
[13:25:11.463] plan(): Setting new future strategy stack:
[13:25:11.463] List of future strategies:
[13:25:11.463] 1. sequential:
[13:25:11.463]    - args: function (..., envir = parent.frame())
[13:25:11.463]    - tweaked: FALSE
[13:25:11.463]    - call: NULL
[13:25:11.463] plan(): nbrOfWorkers() = 1
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25
[26] 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50
 int [1:50] 1 2 3 4 5 6 7 8 9 10 ...
a-b-c-d-e-f-g-h-i-j-k-l-m-n-o-p-q-r-s-t-u-v-w-x-y-z1 2 3 4 5 6 
"Sepal.Length"	"Sepal.Width"	"Petal.Length"	"Petal.Width"	"Species"
"1"	5.1	3.5	1.4	0.2	"setosa"
"2"	4.9	3	1.4	0.2	"setosa"
"3"	4.7	3.2	1.3	0.2	"setosa"
"4"	4.6	3.1	1.5	0.2	"setosa"
"5"	5	3.6	1.4	0.2	"setosa"
"6"	5.4	3.9	1.7	0.4	"setosa"
"7"	4.6	3.4	1.4	0.3	"setosa"
"8"	5	3.4	1.5	0.2	"setosa"
"9"	4.4	2.9	1.4	0.2	"setosa"
"10"	4.9	3.1	1.5	0.1	"setosa"
[13:25:11.465] plan(): Setting new future strategy stack:
[13:25:11.465] List of future strategies:
[13:25:11.465] 1. sequential:
[13:25:11.465]    - args: function (..., envir = parent.frame())
[13:25:11.465]    - tweaked: FALSE
[13:25:11.465]    - call: plan(strategy)
[13:25:11.465] plan(): nbrOfWorkers() = 1
[13:25:11.466] SequentialFuture started (and completed)
[13:25:11.466] - Launch lazy future ... done
[13:25:11.466] run() for ‘SequentialFuture’ ... done
- stdout = structure(TRUE, drop = TRUE)
[13:25:11.466] getGlobalsAndPackages() ...
[13:25:11.466] Searching for globals...
[13:25:11.467] - globals found: [1] ‘print’
[13:25:11.467] Searching for globals ... DONE
[13:25:11.467] Resolving globals: FALSE
[13:25:11.467] 
[13:25:11.467] 
[13:25:11.467] getGlobalsAndPackages() ... DONE
[13:25:11.468] run() for ‘Future’ ...
[13:25:11.468] - state: ‘created’
[13:25:11.468] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[13:25:11.468] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[13:25:11.468] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[13:25:11.468]   - Field: ‘label’
[13:25:11.468]   - Field: ‘local’
[13:25:11.468]   - Field: ‘owner’
[13:25:11.469]   - Field: ‘envir’
[13:25:11.469]   - Field: ‘packages’
[13:25:11.469]   - Field: ‘gc’
[13:25:11.469]   - Field: ‘conditions’
[13:25:11.469]   - Field: ‘expr’
[13:25:11.469]   - Field: ‘uuid’
[13:25:11.469]   - Field: ‘seed’
[13:25:11.469]   - Field: ‘version’
[13:25:11.469]   - Field: ‘result’
[13:25:11.469]   - Field: ‘asynchronous’
[13:25:11.469]   - Field: ‘calls’
[13:25:11.470]   - Field: ‘globals’
[13:25:11.470]   - Field: ‘stdout’
[13:25:11.470]   - Field: ‘earlySignal’
[13:25:11.470]   - Field: ‘lazy’
[13:25:11.470]   - Field: ‘state’
[13:25:11.470] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[13:25:11.470] - Launch lazy future ...
[13:25:11.470] Packages needed by the future expression (n = 0): <none>
[13:25:11.470] Packages needed by future strategies (n = 0): <none>
[13:25:11.471] {
[13:25:11.471]     {
[13:25:11.471]         {
[13:25:11.471]             ...future.startTime <- base::Sys.time()
[13:25:11.471]             {
[13:25:11.471]                 {
[13:25:11.471]                   {
[13:25:11.471]                     base::local({
[13:25:11.471]                       has_future <- base::requireNamespace("future", 
[13:25:11.471]                         quietly = TRUE)
[13:25:11.471]                       if (has_future) {
[13:25:11.471]                         ns <- base::getNamespace("future")
[13:25:11.471]                         version <- ns[[".package"]][["version"]]
[13:25:11.471]                         if (is.null(version)) 
[13:25:11.471]                           version <- utils::packageVersion("future")
[13:25:11.471]                       }
[13:25:11.471]                       else {
[13:25:11.471]                         version <- NULL
[13:25:11.471]                       }
[13:25:11.471]                       if (!has_future || version < "1.8.0") {
[13:25:11.471]                         info <- base::c(r_version = base::gsub("R version ", 
[13:25:11.471]                           "", base::R.version$version.string), 
[13:25:11.471]                           platform = base::sprintf("%s (%s-bit)", 
[13:25:11.471]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:25:11.471]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[13:25:11.471]                             "release", "version")], collapse = " "), 
[13:25:11.471]                           hostname = base::Sys.info()[["nodename"]])
[13:25:11.471]                         info <- base::sprintf("%s: %s", base::names(info), 
[13:25:11.471]                           info)
[13:25:11.471]                         info <- base::paste(info, collapse = "; ")
[13:25:11.471]                         if (!has_future) {
[13:25:11.471]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:25:11.471]                             info)
[13:25:11.471]                         }
[13:25:11.471]                         else {
[13:25:11.471]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:25:11.471]                             info, version)
[13:25:11.471]                         }
[13:25:11.471]                         base::stop(msg)
[13:25:11.471]                       }
[13:25:11.471]                     })
[13:25:11.471]                   }
[13:25:11.471]                   options(future.plan = NULL)
[13:25:11.471]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:25:11.471]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:25:11.471]                 }
[13:25:11.471]                 ...future.workdir <- getwd()
[13:25:11.471]             }
[13:25:11.471]             ...future.oldOptions <- base::as.list(base::.Options)
[13:25:11.471]             ...future.oldEnvVars <- base::Sys.getenv()
[13:25:11.471]         }
[13:25:11.471]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:25:11.471]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:25:11.471]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:25:11.471]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:25:11.471]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:25:11.471]             future.stdout.windows.reencode = NULL, width = 80L)
[13:25:11.471]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:25:11.471]             base::names(...future.oldOptions))
[13:25:11.471]     }
[13:25:11.471]     if (FALSE) {
[13:25:11.471]     }
[13:25:11.471]     else {
[13:25:11.471]         if (TRUE) {
[13:25:11.471]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:25:11.471]                 open = "w")
[13:25:11.471]         }
[13:25:11.471]         else {
[13:25:11.471]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:25:11.471]                 windows = "NUL", "/dev/null"), open = "w")
[13:25:11.471]         }
[13:25:11.471]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:25:11.471]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:25:11.471]             base::sink(type = "output", split = FALSE)
[13:25:11.471]             base::close(...future.stdout)
[13:25:11.471]         }, add = TRUE)
[13:25:11.471]     }
[13:25:11.471]     ...future.frame <- base::sys.nframe()
[13:25:11.471]     ...future.conditions <- base::list()
[13:25:11.471]     ...future.rng <- base::globalenv()$.Random.seed
[13:25:11.471]     if (FALSE) {
[13:25:11.471]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:25:11.471]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:25:11.471]     }
[13:25:11.471]     ...future.result <- base::tryCatch({
[13:25:11.471]         base::withCallingHandlers({
[13:25:11.471]             ...future.value <- base::withVisible(base::local(print(42)))
[13:25:11.471]             future::FutureResult(value = ...future.value$value, 
[13:25:11.471]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:25:11.471]                   ...future.rng), globalenv = if (FALSE) 
[13:25:11.471]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:25:11.471]                     ...future.globalenv.names))
[13:25:11.471]                 else NULL, started = ...future.startTime, version = "1.8")
[13:25:11.471]         }, condition = base::local({
[13:25:11.471]             c <- base::c
[13:25:11.471]             inherits <- base::inherits
[13:25:11.471]             invokeRestart <- base::invokeRestart
[13:25:11.471]             length <- base::length
[13:25:11.471]             list <- base::list
[13:25:11.471]             seq.int <- base::seq.int
[13:25:11.471]             signalCondition <- base::signalCondition
[13:25:11.471]             sys.calls <- base::sys.calls
[13:25:11.471]             `[[` <- base::`[[`
[13:25:11.471]             `+` <- base::`+`
[13:25:11.471]             `<<-` <- base::`<<-`
[13:25:11.471]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:25:11.471]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:25:11.471]                   3L)]
[13:25:11.471]             }
[13:25:11.471]             function(cond) {
[13:25:11.471]                 is_error <- inherits(cond, "error")
[13:25:11.471]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:25:11.471]                   NULL)
[13:25:11.471]                 if (is_error) {
[13:25:11.471]                   sessionInformation <- function() {
[13:25:11.471]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:25:11.471]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:25:11.471]                       search = base::search(), system = base::Sys.info())
[13:25:11.471]                   }
[13:25:11.471]                   ...future.conditions[[length(...future.conditions) + 
[13:25:11.471]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:25:11.471]                     cond$call), session = sessionInformation(), 
[13:25:11.471]                     timestamp = base::Sys.time(), signaled = 0L)
[13:25:11.471]                   signalCondition(cond)
[13:25:11.471]                 }
[13:25:11.471]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:25:11.471]                 "immediateCondition"))) {
[13:25:11.471]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:25:11.471]                   ...future.conditions[[length(...future.conditions) + 
[13:25:11.471]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:25:11.471]                   if (TRUE && !signal) {
[13:25:11.471]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:25:11.471]                     {
[13:25:11.471]                       inherits <- base::inherits
[13:25:11.471]                       invokeRestart <- base::invokeRestart
[13:25:11.471]                       is.null <- base::is.null
[13:25:11.471]                       muffled <- FALSE
[13:25:11.471]                       if (inherits(cond, "message")) {
[13:25:11.471]                         muffled <- grepl(pattern, "muffleMessage")
[13:25:11.471]                         if (muffled) 
[13:25:11.471]                           invokeRestart("muffleMessage")
[13:25:11.471]                       }
[13:25:11.471]                       else if (inherits(cond, "warning")) {
[13:25:11.471]                         muffled <- grepl(pattern, "muffleWarning")
[13:25:11.471]                         if (muffled) 
[13:25:11.471]                           invokeRestart("muffleWarning")
[13:25:11.471]                       }
[13:25:11.471]                       else if (inherits(cond, "condition")) {
[13:25:11.471]                         if (!is.null(pattern)) {
[13:25:11.471]                           computeRestarts <- base::computeRestarts
[13:25:11.471]                           grepl <- base::grepl
[13:25:11.471]                           restarts <- computeRestarts(cond)
[13:25:11.471]                           for (restart in restarts) {
[13:25:11.471]                             name <- restart$name
[13:25:11.471]                             if (is.null(name)) 
[13:25:11.471]                               next
[13:25:11.471]                             if (!grepl(pattern, name)) 
[13:25:11.471]                               next
[13:25:11.471]                             invokeRestart(restart)
[13:25:11.471]                             muffled <- TRUE
[13:25:11.471]                             break
[13:25:11.471]                           }
[13:25:11.471]                         }
[13:25:11.471]                       }
[13:25:11.471]                       invisible(muffled)
[13:25:11.471]                     }
[13:25:11.471]                     muffleCondition(cond, pattern = "^muffle")
[13:25:11.471]                   }
[13:25:11.471]                 }
[13:25:11.471]                 else {
[13:25:11.471]                   if (TRUE) {
[13:25:11.471]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:25:11.471]                     {
[13:25:11.471]                       inherits <- base::inherits
[13:25:11.471]                       invokeRestart <- base::invokeRestart
[13:25:11.471]                       is.null <- base::is.null
[13:25:11.471]                       muffled <- FALSE
[13:25:11.471]                       if (inherits(cond, "message")) {
[13:25:11.471]                         muffled <- grepl(pattern, "muffleMessage")
[13:25:11.471]                         if (muffled) 
[13:25:11.471]                           invokeRestart("muffleMessage")
[13:25:11.471]                       }
[13:25:11.471]                       else if (inherits(cond, "warning")) {
[13:25:11.471]                         muffled <- grepl(pattern, "muffleWarning")
[13:25:11.471]                         if (muffled) 
[13:25:11.471]                           invokeRestart("muffleWarning")
[13:25:11.471]                       }
[13:25:11.471]                       else if (inherits(cond, "condition")) {
[13:25:11.471]                         if (!is.null(pattern)) {
[13:25:11.471]                           computeRestarts <- base::computeRestarts
[13:25:11.471]                           grepl <- base::grepl
[13:25:11.471]                           restarts <- computeRestarts(cond)
[13:25:11.471]                           for (restart in restarts) {
[13:25:11.471]                             name <- restart$name
[13:25:11.471]                             if (is.null(name)) 
[13:25:11.471]                               next
[13:25:11.471]                             if (!grepl(pattern, name)) 
[13:25:11.471]                               next
[13:25:11.471]                             invokeRestart(restart)
[13:25:11.471]                             muffled <- TRUE
[13:25:11.471]                             break
[13:25:11.471]                           }
[13:25:11.471]                         }
[13:25:11.471]                       }
[13:25:11.471]                       invisible(muffled)
[13:25:11.471]                     }
[13:25:11.471]                     muffleCondition(cond, pattern = "^muffle")
[13:25:11.471]                   }
[13:25:11.471]                 }
[13:25:11.471]             }
[13:25:11.471]         }))
[13:25:11.471]     }, error = function(ex) {
[13:25:11.471]         base::structure(base::list(value = NULL, visible = NULL, 
[13:25:11.471]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:25:11.471]                 ...future.rng), started = ...future.startTime, 
[13:25:11.471]             finished = Sys.time(), session_uuid = NA_character_, 
[13:25:11.471]             version = "1.8"), class = "FutureResult")
[13:25:11.471]     }, finally = {
[13:25:11.471]         if (!identical(...future.workdir, getwd())) 
[13:25:11.471]             setwd(...future.workdir)
[13:25:11.471]         {
[13:25:11.471]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:25:11.471]                 ...future.oldOptions$nwarnings <- NULL
[13:25:11.471]             }
[13:25:11.471]             base::options(...future.oldOptions)
[13:25:11.471]             if (.Platform$OS.type == "windows") {
[13:25:11.471]                 old_names <- names(...future.oldEnvVars)
[13:25:11.471]                 envs <- base::Sys.getenv()
[13:25:11.471]                 names <- names(envs)
[13:25:11.471]                 common <- intersect(names, old_names)
[13:25:11.471]                 added <- setdiff(names, old_names)
[13:25:11.471]                 removed <- setdiff(old_names, names)
[13:25:11.471]                 changed <- common[...future.oldEnvVars[common] != 
[13:25:11.471]                   envs[common]]
[13:25:11.471]                 NAMES <- toupper(changed)
[13:25:11.471]                 args <- list()
[13:25:11.471]                 for (kk in seq_along(NAMES)) {
[13:25:11.471]                   name <- changed[[kk]]
[13:25:11.471]                   NAME <- NAMES[[kk]]
[13:25:11.471]                   if (name != NAME && is.element(NAME, old_names)) 
[13:25:11.471]                     next
[13:25:11.471]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:25:11.471]                 }
[13:25:11.471]                 NAMES <- toupper(added)
[13:25:11.471]                 for (kk in seq_along(NAMES)) {
[13:25:11.471]                   name <- added[[kk]]
[13:25:11.471]                   NAME <- NAMES[[kk]]
[13:25:11.471]                   if (name != NAME && is.element(NAME, old_names)) 
[13:25:11.471]                     next
[13:25:11.471]                   args[[name]] <- ""
[13:25:11.471]                 }
[13:25:11.471]                 NAMES <- toupper(removed)
[13:25:11.471]                 for (kk in seq_along(NAMES)) {
[13:25:11.471]                   name <- removed[[kk]]
[13:25:11.471]                   NAME <- NAMES[[kk]]
[13:25:11.471]                   if (name != NAME && is.element(NAME, old_names)) 
[13:25:11.471]                     next
[13:25:11.471]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:25:11.471]                 }
[13:25:11.471]                 if (length(args) > 0) 
[13:25:11.471]                   base::do.call(base::Sys.setenv, args = args)
[13:25:11.471]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:25:11.471]             }
[13:25:11.471]             else {
[13:25:11.471]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:25:11.471]             }
[13:25:11.471]             {
[13:25:11.471]                 if (base::length(...future.futureOptionsAdded) > 
[13:25:11.471]                   0L) {
[13:25:11.471]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:25:11.471]                   base::names(opts) <- ...future.futureOptionsAdded
[13:25:11.471]                   base::options(opts)
[13:25:11.471]                 }
[13:25:11.471]                 {
[13:25:11.471]                   {
[13:25:11.471]                     NULL
[13:25:11.471]                     RNGkind("Mersenne-Twister")
[13:25:11.471]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[13:25:11.471]                       inherits = FALSE)
[13:25:11.471]                   }
[13:25:11.471]                   options(future.plan = NULL)
[13:25:11.471]                   if (is.na(NA_character_)) 
[13:25:11.471]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:25:11.471]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:25:11.471]                   future::plan(list(function (..., envir = parent.frame()) 
[13:25:11.471]                   {
[13:25:11.471]                     future <- SequentialFuture(..., envir = envir)
[13:25:11.471]                     if (!future$lazy) 
[13:25:11.471]                       future <- run(future)
[13:25:11.471]                     invisible(future)
[13:25:11.471]                   }), .cleanup = FALSE, .init = FALSE)
[13:25:11.471]                 }
[13:25:11.471]             }
[13:25:11.471]         }
[13:25:11.471]     })
[13:25:11.471]     if (TRUE) {
[13:25:11.471]         base::sink(type = "output", split = FALSE)
[13:25:11.471]         if (TRUE) {
[13:25:11.471]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:25:11.471]         }
[13:25:11.471]         else {
[13:25:11.471]             ...future.result["stdout"] <- base::list(NULL)
[13:25:11.471]         }
[13:25:11.471]         base::close(...future.stdout)
[13:25:11.471]         ...future.stdout <- NULL
[13:25:11.471]     }
[13:25:11.471]     ...future.result$conditions <- ...future.conditions
[13:25:11.471]     ...future.result$finished <- base::Sys.time()
[13:25:11.471]     ...future.result
[13:25:11.471] }
[13:25:11.473] plan(): Setting new future strategy stack:
[13:25:11.473] List of future strategies:
[13:25:11.473] 1. sequential:
[13:25:11.473]    - args: function (..., envir = parent.frame())
[13:25:11.473]    - tweaked: FALSE
[13:25:11.473]    - call: NULL
[13:25:11.473] plan(): nbrOfWorkers() = 1
[13:25:11.474] plan(): Setting new future strategy stack:
[13:25:11.474] List of future strategies:
[13:25:11.474] 1. sequential:
[13:25:11.474]    - args: function (..., envir = parent.frame())
[13:25:11.474]    - tweaked: FALSE
[13:25:11.474]    - call: plan(strategy)
[13:25:11.474] plan(): nbrOfWorkers() = 1
[13:25:11.474] SequentialFuture started (and completed)
[13:25:11.474] - Launch lazy future ... done
[13:25:11.475] run() for ‘SequentialFuture’ ... done
[1] 42
sequential ... done
Testing with 1 cores ... done
Testing with 2 cores ...
multicore ...
[13:25:11.482] plan(): Setting new future strategy stack:
[13:25:11.482] List of future strategies:
[13:25:11.482] 1. multicore:
[13:25:11.482]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[13:25:11.482]    - tweaked: FALSE
[13:25:11.482]    - call: plan(strategy)
[13:25:11.486] plan(): nbrOfWorkers() = 2
- stdout = TRUE
[13:25:11.486] getGlobalsAndPackages() ...
[13:25:11.486] Searching for globals...
[13:25:11.489] - globals found: [9] ‘{’, ‘print’, ‘:’, ‘str’, ‘cat’, ‘letters’, ‘write.table’, ‘[’, ‘::’
[13:25:11.489] Searching for globals ... DONE
[13:25:11.489] Resolving globals: FALSE
[13:25:11.490] 
[13:25:11.490] - packages: [1] ‘utils’
[13:25:11.490] getGlobalsAndPackages() ... DONE
[13:25:11.490] run() for ‘Future’ ...
[13:25:11.490] - state: ‘created’
[13:25:11.490] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[13:25:11.494] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:25:11.494] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[13:25:11.494]   - Field: ‘label’
[13:25:11.494]   - Field: ‘local’
[13:25:11.494]   - Field: ‘owner’
[13:25:11.495]   - Field: ‘envir’
[13:25:11.495]   - Field: ‘workers’
[13:25:11.495]   - Field: ‘packages’
[13:25:11.495]   - Field: ‘gc’
[13:25:11.495]   - Field: ‘job’
[13:25:11.495]   - Field: ‘conditions’
[13:25:11.495]   - Field: ‘expr’
[13:25:11.495]   - Field: ‘uuid’
[13:25:11.495]   - Field: ‘seed’
[13:25:11.495]   - Field: ‘version’
[13:25:11.495]   - Field: ‘result’
[13:25:11.496]   - Field: ‘asynchronous’
[13:25:11.496]   - Field: ‘calls’
[13:25:11.496]   - Field: ‘globals’
[13:25:11.496]   - Field: ‘stdout’
[13:25:11.496]   - Field: ‘earlySignal’
[13:25:11.496]   - Field: ‘lazy’
[13:25:11.496]   - Field: ‘state’
[13:25:11.496] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[13:25:11.496] - Launch lazy future ...
[13:25:11.497] Packages needed by the future expression (n = 1): ‘utils’
[13:25:11.498] Packages needed by future strategies (n = 0): <none>
[13:25:11.498] {
[13:25:11.498]     {
[13:25:11.498]         {
[13:25:11.498]             ...future.startTime <- base::Sys.time()
[13:25:11.498]             {
[13:25:11.498]                 {
[13:25:11.498]                   {
[13:25:11.498]                     {
[13:25:11.498]                       {
[13:25:11.498]                         base::local({
[13:25:11.498]                           has_future <- base::requireNamespace("future", 
[13:25:11.498]                             quietly = TRUE)
[13:25:11.498]                           if (has_future) {
[13:25:11.498]                             ns <- base::getNamespace("future")
[13:25:11.498]                             version <- ns[[".package"]][["version"]]
[13:25:11.498]                             if (is.null(version)) 
[13:25:11.498]                               version <- utils::packageVersion("future")
[13:25:11.498]                           }
[13:25:11.498]                           else {
[13:25:11.498]                             version <- NULL
[13:25:11.498]                           }
[13:25:11.498]                           if (!has_future || version < "1.8.0") {
[13:25:11.498]                             info <- base::c(r_version = base::gsub("R version ", 
[13:25:11.498]                               "", base::R.version$version.string), 
[13:25:11.498]                               platform = base::sprintf("%s (%s-bit)", 
[13:25:11.498]                                 base::R.version$platform, 8 * 
[13:25:11.498]                                   base::.Machine$sizeof.pointer), 
[13:25:11.498]                               os = base::paste(base::Sys.info()[base::c("sysname", 
[13:25:11.498]                                 "release", "version")], collapse = " "), 
[13:25:11.498]                               hostname = base::Sys.info()[["nodename"]])
[13:25:11.498]                             info <- base::sprintf("%s: %s", base::names(info), 
[13:25:11.498]                               info)
[13:25:11.498]                             info <- base::paste(info, collapse = "; ")
[13:25:11.498]                             if (!has_future) {
[13:25:11.498]                               msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:25:11.498]                                 info)
[13:25:11.498]                             }
[13:25:11.498]                             else {
[13:25:11.498]                               msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:25:11.498]                                 info, version)
[13:25:11.498]                             }
[13:25:11.498]                             base::stop(msg)
[13:25:11.498]                           }
[13:25:11.498]                         })
[13:25:11.498]                       }
[13:25:11.498]                       ...future.mc.cores.old <- base::getOption("mc.cores")
[13:25:11.498]                       base::options(mc.cores = 1L)
[13:25:11.498]                     }
[13:25:11.498]                     base::local({
[13:25:11.498]                       for (pkg in "utils") {
[13:25:11.498]                         base::loadNamespace(pkg)
[13:25:11.498]                         base::library(pkg, character.only = TRUE)
[13:25:11.498]                       }
[13:25:11.498]                     })
[13:25:11.498]                   }
[13:25:11.498]                   options(future.plan = NULL)
[13:25:11.498]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:25:11.498]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:25:11.498]                 }
[13:25:11.498]                 ...future.workdir <- getwd()
[13:25:11.498]             }
[13:25:11.498]             ...future.oldOptions <- base::as.list(base::.Options)
[13:25:11.498]             ...future.oldEnvVars <- base::Sys.getenv()
[13:25:11.498]         }
[13:25:11.498]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:25:11.498]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:25:11.498]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:25:11.498]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:25:11.498]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:25:11.498]             future.stdout.windows.reencode = NULL, width = 80L)
[13:25:11.498]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:25:11.498]             base::names(...future.oldOptions))
[13:25:11.498]     }
[13:25:11.498]     if (FALSE) {
[13:25:11.498]     }
[13:25:11.498]     else {
[13:25:11.498]         if (TRUE) {
[13:25:11.498]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:25:11.498]                 open = "w")
[13:25:11.498]         }
[13:25:11.498]         else {
[13:25:11.498]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:25:11.498]                 windows = "NUL", "/dev/null"), open = "w")
[13:25:11.498]         }
[13:25:11.498]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:25:11.498]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:25:11.498]             base::sink(type = "output", split = FALSE)
[13:25:11.498]             base::close(...future.stdout)
[13:25:11.498]         }, add = TRUE)
[13:25:11.498]     }
[13:25:11.498]     ...future.frame <- base::sys.nframe()
[13:25:11.498]     ...future.conditions <- base::list()
[13:25:11.498]     ...future.rng <- base::globalenv()$.Random.seed
[13:25:11.498]     if (FALSE) {
[13:25:11.498]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:25:11.498]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:25:11.498]     }
[13:25:11.498]     ...future.result <- base::tryCatch({
[13:25:11.498]         base::withCallingHandlers({
[13:25:11.498]             ...future.value <- base::withVisible(base::local({
[13:25:11.498]                 withCallingHandlers({
[13:25:11.498]                   {
[13:25:11.498]                     print(1:50)
[13:25:11.498]                     str(1:50)
[13:25:11.498]                     cat(letters, sep = "-")
[13:25:11.498]                     cat(1:6, collapse = "\n")
[13:25:11.498]                     write.table(datasets::iris[1:10, ], sep = "\t")
[13:25:11.498]                     42L
[13:25:11.498]                   }
[13:25:11.498]                 }, immediateCondition = function(cond) {
[13:25:11.498]                   save_rds <- function (object, pathname, ...) 
[13:25:11.498]                   {
[13:25:11.498]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[13:25:11.498]                     if (file_test("-f", pathname_tmp)) {
[13:25:11.498]                       fi_tmp <- file.info(pathname_tmp)
[13:25:11.498]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[13:25:11.498]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:25:11.498]                         fi_tmp[["mtime"]])
[13:25:11.498]                     }
[13:25:11.498]                     tryCatch({
[13:25:11.498]                       saveRDS(object, file = pathname_tmp, ...)
[13:25:11.498]                     }, error = function(ex) {
[13:25:11.498]                       msg <- conditionMessage(ex)
[13:25:11.498]                       fi_tmp <- file.info(pathname_tmp)
[13:25:11.498]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[13:25:11.498]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:25:11.498]                         fi_tmp[["mtime"]], msg)
[13:25:11.498]                       ex$message <- msg
[13:25:11.498]                       stop(ex)
[13:25:11.498]                     })
[13:25:11.498]                     stopifnot(file_test("-f", pathname_tmp))
[13:25:11.498]                     res <- file.rename(from = pathname_tmp, to = pathname)
[13:25:11.498]                     if (!res || file_test("-f", pathname_tmp)) {
[13:25:11.498]                       fi_tmp <- file.info(pathname_tmp)
[13:25:11.498]                       fi <- file.info(pathname)
[13:25:11.498]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[13:25:11.498]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:25:11.498]                         fi_tmp[["mtime"]], sQuote(pathname), 
[13:25:11.498]                         fi[["size"]], fi[["mtime"]])
[13:25:11.498]                       stop(msg)
[13:25:11.498]                     }
[13:25:11.498]                     invisible(pathname)
[13:25:11.498]                   }
[13:25:11.498]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[13:25:11.498]                     rootPath = tempdir()) 
[13:25:11.498]                   {
[13:25:11.498]                     obj <- list(time = Sys.time(), condition = cond)
[13:25:11.498]                     file <- tempfile(pattern = class(cond)[1], 
[13:25:11.498]                       tmpdir = path, fileext = ".rds")
[13:25:11.498]                     save_rds(obj, file)
[13:25:11.498]                   }
[13:25:11.498]                   saveImmediateCondition(cond, path = "/tmp/Rtmp2TLbxL/.future/immediateConditions")
[13:25:11.498]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:25:11.498]                   {
[13:25:11.498]                     inherits <- base::inherits
[13:25:11.498]                     invokeRestart <- base::invokeRestart
[13:25:11.498]                     is.null <- base::is.null
[13:25:11.498]                     muffled <- FALSE
[13:25:11.498]                     if (inherits(cond, "message")) {
[13:25:11.498]                       muffled <- grepl(pattern, "muffleMessage")
[13:25:11.498]                       if (muffled) 
[13:25:11.498]                         invokeRestart("muffleMessage")
[13:25:11.498]                     }
[13:25:11.498]                     else if (inherits(cond, "warning")) {
[13:25:11.498]                       muffled <- grepl(pattern, "muffleWarning")
[13:25:11.498]                       if (muffled) 
[13:25:11.498]                         invokeRestart("muffleWarning")
[13:25:11.498]                     }
[13:25:11.498]                     else if (inherits(cond, "condition")) {
[13:25:11.498]                       if (!is.null(pattern)) {
[13:25:11.498]                         computeRestarts <- base::computeRestarts
[13:25:11.498]                         grepl <- base::grepl
[13:25:11.498]                         restarts <- computeRestarts(cond)
[13:25:11.498]                         for (restart in restarts) {
[13:25:11.498]                           name <- restart$name
[13:25:11.498]                           if (is.null(name)) 
[13:25:11.498]                             next
[13:25:11.498]                           if (!grepl(pattern, name)) 
[13:25:11.498]                             next
[13:25:11.498]                           invokeRestart(restart)
[13:25:11.498]                           muffled <- TRUE
[13:25:11.498]                           break
[13:25:11.498]                         }
[13:25:11.498]                       }
[13:25:11.498]                     }
[13:25:11.498]                     invisible(muffled)
[13:25:11.498]                   }
[13:25:11.498]                   muffleCondition(cond)
[13:25:11.498]                 })
[13:25:11.498]             }))
[13:25:11.498]             future::FutureResult(value = ...future.value$value, 
[13:25:11.498]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:25:11.498]                   ...future.rng), globalenv = if (FALSE) 
[13:25:11.498]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:25:11.498]                     ...future.globalenv.names))
[13:25:11.498]                 else NULL, started = ...future.startTime, version = "1.8")
[13:25:11.498]         }, condition = base::local({
[13:25:11.498]             c <- base::c
[13:25:11.498]             inherits <- base::inherits
[13:25:11.498]             invokeRestart <- base::invokeRestart
[13:25:11.498]             length <- base::length
[13:25:11.498]             list <- base::list
[13:25:11.498]             seq.int <- base::seq.int
[13:25:11.498]             signalCondition <- base::signalCondition
[13:25:11.498]             sys.calls <- base::sys.calls
[13:25:11.498]             `[[` <- base::`[[`
[13:25:11.498]             `+` <- base::`+`
[13:25:11.498]             `<<-` <- base::`<<-`
[13:25:11.498]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:25:11.498]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:25:11.498]                   3L)]
[13:25:11.498]             }
[13:25:11.498]             function(cond) {
[13:25:11.498]                 is_error <- inherits(cond, "error")
[13:25:11.498]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:25:11.498]                   NULL)
[13:25:11.498]                 if (is_error) {
[13:25:11.498]                   sessionInformation <- function() {
[13:25:11.498]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:25:11.498]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:25:11.498]                       search = base::search(), system = base::Sys.info())
[13:25:11.498]                   }
[13:25:11.498]                   ...future.conditions[[length(...future.conditions) + 
[13:25:11.498]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:25:11.498]                     cond$call), session = sessionInformation(), 
[13:25:11.498]                     timestamp = base::Sys.time(), signaled = 0L)
[13:25:11.498]                   signalCondition(cond)
[13:25:11.498]                 }
[13:25:11.498]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:25:11.498]                 "immediateCondition"))) {
[13:25:11.498]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:25:11.498]                   ...future.conditions[[length(...future.conditions) + 
[13:25:11.498]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:25:11.498]                   if (TRUE && !signal) {
[13:25:11.498]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:25:11.498]                     {
[13:25:11.498]                       inherits <- base::inherits
[13:25:11.498]                       invokeRestart <- base::invokeRestart
[13:25:11.498]                       is.null <- base::is.null
[13:25:11.498]                       muffled <- FALSE
[13:25:11.498]                       if (inherits(cond, "message")) {
[13:25:11.498]                         muffled <- grepl(pattern, "muffleMessage")
[13:25:11.498]                         if (muffled) 
[13:25:11.498]                           invokeRestart("muffleMessage")
[13:25:11.498]                       }
[13:25:11.498]                       else if (inherits(cond, "warning")) {
[13:25:11.498]                         muffled <- grepl(pattern, "muffleWarning")
[13:25:11.498]                         if (muffled) 
[13:25:11.498]                           invokeRestart("muffleWarning")
[13:25:11.498]                       }
[13:25:11.498]                       else if (inherits(cond, "condition")) {
[13:25:11.498]                         if (!is.null(pattern)) {
[13:25:11.498]                           computeRestarts <- base::computeRestarts
[13:25:11.498]                           grepl <- base::grepl
[13:25:11.498]                           restarts <- computeRestarts(cond)
[13:25:11.498]                           for (restart in restarts) {
[13:25:11.498]                             name <- restart$name
[13:25:11.498]                             if (is.null(name)) 
[13:25:11.498]                               next
[13:25:11.498]                             if (!grepl(pattern, name)) 
[13:25:11.498]                               next
[13:25:11.498]                             invokeRestart(restart)
[13:25:11.498]                             muffled <- TRUE
[13:25:11.498]                             break
[13:25:11.498]                           }
[13:25:11.498]                         }
[13:25:11.498]                       }
[13:25:11.498]                       invisible(muffled)
[13:25:11.498]                     }
[13:25:11.498]                     muffleCondition(cond, pattern = "^muffle")
[13:25:11.498]                   }
[13:25:11.498]                 }
[13:25:11.498]                 else {
[13:25:11.498]                   if (TRUE) {
[13:25:11.498]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:25:11.498]                     {
[13:25:11.498]                       inherits <- base::inherits
[13:25:11.498]                       invokeRestart <- base::invokeRestart
[13:25:11.498]                       is.null <- base::is.null
[13:25:11.498]                       muffled <- FALSE
[13:25:11.498]                       if (inherits(cond, "message")) {
[13:25:11.498]                         muffled <- grepl(pattern, "muffleMessage")
[13:25:11.498]                         if (muffled) 
[13:25:11.498]                           invokeRestart("muffleMessage")
[13:25:11.498]                       }
[13:25:11.498]                       else if (inherits(cond, "warning")) {
[13:25:11.498]                         muffled <- grepl(pattern, "muffleWarning")
[13:25:11.498]                         if (muffled) 
[13:25:11.498]                           invokeRestart("muffleWarning")
[13:25:11.498]                       }
[13:25:11.498]                       else if (inherits(cond, "condition")) {
[13:25:11.498]                         if (!is.null(pattern)) {
[13:25:11.498]                           computeRestarts <- base::computeRestarts
[13:25:11.498]                           grepl <- base::grepl
[13:25:11.498]                           restarts <- computeRestarts(cond)
[13:25:11.498]                           for (restart in restarts) {
[13:25:11.498]                             name <- restart$name
[13:25:11.498]                             if (is.null(name)) 
[13:25:11.498]                               next
[13:25:11.498]                             if (!grepl(pattern, name)) 
[13:25:11.498]                               next
[13:25:11.498]                             invokeRestart(restart)
[13:25:11.498]                             muffled <- TRUE
[13:25:11.498]                             break
[13:25:11.498]                           }
[13:25:11.498]                         }
[13:25:11.498]                       }
[13:25:11.498]                       invisible(muffled)
[13:25:11.498]                     }
[13:25:11.498]                     muffleCondition(cond, pattern = "^muffle")
[13:25:11.498]                   }
[13:25:11.498]                 }
[13:25:11.498]             }
[13:25:11.498]         }))
[13:25:11.498]     }, error = function(ex) {
[13:25:11.498]         base::structure(base::list(value = NULL, visible = NULL, 
[13:25:11.498]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:25:11.498]                 ...future.rng), started = ...future.startTime, 
[13:25:11.498]             finished = Sys.time(), session_uuid = NA_character_, 
[13:25:11.498]             version = "1.8"), class = "FutureResult")
[13:25:11.498]     }, finally = {
[13:25:11.498]         if (!identical(...future.workdir, getwd())) 
[13:25:11.498]             setwd(...future.workdir)
[13:25:11.498]         {
[13:25:11.498]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:25:11.498]                 ...future.oldOptions$nwarnings <- NULL
[13:25:11.498]             }
[13:25:11.498]             base::options(...future.oldOptions)
[13:25:11.498]             if (.Platform$OS.type == "windows") {
[13:25:11.498]                 old_names <- names(...future.oldEnvVars)
[13:25:11.498]                 envs <- base::Sys.getenv()
[13:25:11.498]                 names <- names(envs)
[13:25:11.498]                 common <- intersect(names, old_names)
[13:25:11.498]                 added <- setdiff(names, old_names)
[13:25:11.498]                 removed <- setdiff(old_names, names)
[13:25:11.498]                 changed <- common[...future.oldEnvVars[common] != 
[13:25:11.498]                   envs[common]]
[13:25:11.498]                 NAMES <- toupper(changed)
[13:25:11.498]                 args <- list()
[13:25:11.498]                 for (kk in seq_along(NAMES)) {
[13:25:11.498]                   name <- changed[[kk]]
[13:25:11.498]                   NAME <- NAMES[[kk]]
[13:25:11.498]                   if (name != NAME && is.element(NAME, old_names)) 
[13:25:11.498]                     next
[13:25:11.498]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:25:11.498]                 }
[13:25:11.498]                 NAMES <- toupper(added)
[13:25:11.498]                 for (kk in seq_along(NAMES)) {
[13:25:11.498]                   name <- added[[kk]]
[13:25:11.498]                   NAME <- NAMES[[kk]]
[13:25:11.498]                   if (name != NAME && is.element(NAME, old_names)) 
[13:25:11.498]                     next
[13:25:11.498]                   args[[name]] <- ""
[13:25:11.498]                 }
[13:25:11.498]                 NAMES <- toupper(removed)
[13:25:11.498]                 for (kk in seq_along(NAMES)) {
[13:25:11.498]                   name <- removed[[kk]]
[13:25:11.498]                   NAME <- NAMES[[kk]]
[13:25:11.498]                   if (name != NAME && is.element(NAME, old_names)) 
[13:25:11.498]                     next
[13:25:11.498]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:25:11.498]                 }
[13:25:11.498]                 if (length(args) > 0) 
[13:25:11.498]                   base::do.call(base::Sys.setenv, args = args)
[13:25:11.498]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:25:11.498]             }
[13:25:11.498]             else {
[13:25:11.498]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:25:11.498]             }
[13:25:11.498]             {
[13:25:11.498]                 if (base::length(...future.futureOptionsAdded) > 
[13:25:11.498]                   0L) {
[13:25:11.498]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:25:11.498]                   base::names(opts) <- ...future.futureOptionsAdded
[13:25:11.498]                   base::options(opts)
[13:25:11.498]                 }
[13:25:11.498]                 {
[13:25:11.498]                   {
[13:25:11.498]                     base::options(mc.cores = ...future.mc.cores.old)
[13:25:11.498]                     NULL
[13:25:11.498]                   }
[13:25:11.498]                   options(future.plan = NULL)
[13:25:11.498]                   if (is.na(NA_character_)) 
[13:25:11.498]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:25:11.498]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:25:11.498]                   future::plan(list(function (..., workers = availableCores(constraints = "multicore"), 
[13:25:11.498]                     envir = parent.frame()) 
[13:25:11.498]                   {
[13:25:11.498]                     default_workers <- missing(workers)
[13:25:11.498]                     if (is.function(workers)) 
[13:25:11.498]                       workers <- workers()
[13:25:11.498]                     workers <- structure(as.integer(workers), 
[13:25:11.498]                       class = class(workers))
[13:25:11.498]                     stop_if_not(is.finite(workers), workers >= 
[13:25:11.498]                       1L)
[13:25:11.498]                     if ((workers == 1L && !inherits(workers, 
[13:25:11.498]                       "AsIs")) || !supportsMulticore(warn = TRUE)) {
[13:25:11.498]                       if (default_workers) 
[13:25:11.498]                         supportsMulticore(warn = TRUE)
[13:25:11.498]                       return(sequential(..., envir = envir))
[13:25:11.498]                     }
[13:25:11.498]                     oopts <- options(mc.cores = workers)
[13:25:11.498]                     on.exit(options(oopts))
[13:25:11.498]                     future <- MulticoreFuture(..., workers = workers, 
[13:25:11.498]                       envir = envir)
[13:25:11.498]                     if (!future$lazy) 
[13:25:11.498]                       future <- run(future)
[13:25:11.498]                     invisible(future)
[13:25:11.498]                   }), .cleanup = FALSE, .init = FALSE)
[13:25:11.498]                 }
[13:25:11.498]             }
[13:25:11.498]         }
[13:25:11.498]     })
[13:25:11.498]     if (TRUE) {
[13:25:11.498]         base::sink(type = "output", split = FALSE)
[13:25:11.498]         if (TRUE) {
[13:25:11.498]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:25:11.498]         }
[13:25:11.498]         else {
[13:25:11.498]             ...future.result["stdout"] <- base::list(NULL)
[13:25:11.498]         }
[13:25:11.498]         base::close(...future.stdout)
[13:25:11.498]         ...future.stdout <- NULL
[13:25:11.498]     }
[13:25:11.498]     ...future.result$conditions <- ...future.conditions
[13:25:11.498]     ...future.result$finished <- base::Sys.time()
[13:25:11.498]     ...future.result
[13:25:11.498] }
[13:25:11.501] requestCore(): workers = 2
[13:25:11.503] MulticoreFuture started
[13:25:11.504] - Launch lazy future ... done
[13:25:11.504] run() for ‘MulticoreFuture’ ... done
[13:25:11.505] plan(): Setting new future strategy stack:
[13:25:11.505] result() for MulticoreFuture ...
[13:25:11.505] List of future strategies:
[13:25:11.505] 1. sequential:
[13:25:11.505]    - args: function (..., envir = parent.frame())
[13:25:11.505]    - tweaked: FALSE
[13:25:11.505]    - call: NULL
[13:25:11.506] plan(): nbrOfWorkers() = 1
[13:25:11.509] plan(): Setting new future strategy stack:
[13:25:11.509] List of future strategies:
[13:25:11.509] 1. multicore:
[13:25:11.509]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[13:25:11.509]    - tweaked: FALSE
[13:25:11.509]    - call: plan(strategy)
[13:25:11.514] plan(): nbrOfWorkers() = 2
[13:25:11.518] result() for MulticoreFuture ...
[13:25:11.519] result() for MulticoreFuture ... done
[13:25:11.519] result() for MulticoreFuture ... done
List of 11
 $ value       : int 42
 $ visible     : logi TRUE
 $ stdout      : chr " [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25\n[26] 26 27 28 29 30 31 32 33 3"| __truncated__
 $ conditions  : list()
 $ rng         : logi FALSE
 $ globalenv   : NULL
 $ started     : POSIXct[1:1], format: "2025-01-07 13:25:11"
 $ finished    : POSIXct[1:1], format: "2025-01-07 13:25:11"
 $ session_uuid: chr "6ecc3708-bba1-a3fd-8b0d-0de2367f910d"
  ..- attr(*, "source")=List of 5
  .. ..$ host  : Named chr "47b98e4ec3a9"
  .. .. ..- attr(*, "names")= chr "HOSTNAME"
  .. ..$ info  : Named chr [1:8] "Linux" "6.5.0-1025-azure" "#26~22.04.1-Ubuntu SMP Thu Jul 11 22:33:04 UTC 2024" "47b98e4ec3a9" ...
  .. .. ..- attr(*, "names")= chr [1:8] "sysname" "release" "version" "nodename" ...
  .. ..$ pid   : int 93516
  .. ..$ time  : POSIXct[1:1], format: "2025-01-07 13:25:11"
  .. ..$ random: int 2147483647
 $ r_info      :List of 4
  ..$ version      :Classes 'R_system_version', 'package_version', 'numeric_version'  hidden list of 1
  .. ..$ : int [1:3] 4 3 2
  ..$ os           : chr "unix"
  ..$ os_name      : chr "Linux"
  ..$ captures_utf8: logi TRUE
 $ version     : chr "1.8"
 - attr(*, "class")= chr "FutureResult"
[13:25:11.531] result() for MulticoreFuture ...
[13:25:11.531] result() for MulticoreFuture ... done
[13:25:11.531] result() for MulticoreFuture ...
[13:25:11.531] result() for MulticoreFuture ... done
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25
[26] 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50
 int [1:50] 1 2 3 4 5 6 7 8 9 10 ...
a-b-c-d-e-f-g-h-i-j-k-l-m-n-o-p-q-r-s-t-u-v-w-x-y-z1 2 3 4 5 6 
"Sepal.Length"	"Sepal.Width"	"Petal.Length"	"Petal.Width"	"Species"
"1"	5.1	3.5	1.4	0.2	"setosa"
"2"	4.9	3	1.4	0.2	"setosa"
"3"	4.7	3.2	1.3	0.2	"setosa"
"4"	4.6	3.1	1.5	0.2	"setosa"
"5"	5	3.6	1.4	0.2	"setosa"
"6"	5.4	3.9	1.7	0.4	"setosa"
"7"	4.6	3.4	1.4	0.3	"setosa"
"8"	5	3.4	1.5	0.2	"setosa"
"9"	4.4	2.9	1.4	0.2	"setosa"
"10"	4.9	3.1	1.5	0.1	"setosa"
FutureResult:
value: ‘integer’
visible: TRUE
stdout: character
conditions: [n = 0] 
RNG used: FALSE
duration: 0.01060367 secs (started 2025-01-07 13:25:11.504089)
version: 1.8
[13:25:11.532] getGlobalsAndPackages() ...
[13:25:11.532] Searching for globals...
[13:25:11.536] - globals found: [9] ‘{’, ‘print’, ‘:’, ‘str’, ‘cat’, ‘letters’, ‘write.table’, ‘[’, ‘::’
[13:25:11.536] Searching for globals ... DONE
[13:25:11.536] Resolving globals: FALSE
[13:25:11.537] 
[13:25:11.537] - packages: [1] ‘utils’
[13:25:11.537] getGlobalsAndPackages() ... DONE
[13:25:11.537] run() for ‘Future’ ...
[13:25:11.537] - state: ‘created’
[13:25:11.538] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[13:25:11.542] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:25:11.542] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[13:25:11.542]   - Field: ‘label’
[13:25:11.542]   - Field: ‘local’
[13:25:11.542]   - Field: ‘owner’
[13:25:11.542]   - Field: ‘envir’
[13:25:11.542]   - Field: ‘workers’
[13:25:11.542]   - Field: ‘packages’
[13:25:11.542]   - Field: ‘gc’
[13:25:11.543]   - Field: ‘job’
[13:25:11.543]   - Field: ‘conditions’
[13:25:11.543]   - Field: ‘expr’
[13:25:11.543]   - Field: ‘uuid’
[13:25:11.543]   - Field: ‘seed’
[13:25:11.543]   - Field: ‘version’
[13:25:11.543]   - Field: ‘result’
[13:25:11.543]   - Field: ‘asynchronous’
[13:25:11.543]   - Field: ‘calls’
[13:25:11.544]   - Field: ‘globals’
[13:25:11.544]   - Field: ‘stdout’
[13:25:11.544]   - Field: ‘earlySignal’
[13:25:11.544]   - Field: ‘lazy’
[13:25:11.544]   - Field: ‘state’
[13:25:11.544] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[13:25:11.544] - Launch lazy future ...
[13:25:11.545] Packages needed by the future expression (n = 1): ‘utils’
[13:25:11.545] Packages needed by future strategies (n = 0): <none>
[13:25:11.545] {
[13:25:11.545]     {
[13:25:11.545]         {
[13:25:11.545]             ...future.startTime <- base::Sys.time()
[13:25:11.545]             {
[13:25:11.545]                 {
[13:25:11.545]                   {
[13:25:11.545]                     {
[13:25:11.545]                       {
[13:25:11.545]                         base::local({
[13:25:11.545]                           has_future <- base::requireNamespace("future", 
[13:25:11.545]                             quietly = TRUE)
[13:25:11.545]                           if (has_future) {
[13:25:11.545]                             ns <- base::getNamespace("future")
[13:25:11.545]                             version <- ns[[".package"]][["version"]]
[13:25:11.545]                             if (is.null(version)) 
[13:25:11.545]                               version <- utils::packageVersion("future")
[13:25:11.545]                           }
[13:25:11.545]                           else {
[13:25:11.545]                             version <- NULL
[13:25:11.545]                           }
[13:25:11.545]                           if (!has_future || version < "1.8.0") {
[13:25:11.545]                             info <- base::c(r_version = base::gsub("R version ", 
[13:25:11.545]                               "", base::R.version$version.string), 
[13:25:11.545]                               platform = base::sprintf("%s (%s-bit)", 
[13:25:11.545]                                 base::R.version$platform, 8 * 
[13:25:11.545]                                   base::.Machine$sizeof.pointer), 
[13:25:11.545]                               os = base::paste(base::Sys.info()[base::c("sysname", 
[13:25:11.545]                                 "release", "version")], collapse = " "), 
[13:25:11.545]                               hostname = base::Sys.info()[["nodename"]])
[13:25:11.545]                             info <- base::sprintf("%s: %s", base::names(info), 
[13:25:11.545]                               info)
[13:25:11.545]                             info <- base::paste(info, collapse = "; ")
[13:25:11.545]                             if (!has_future) {
[13:25:11.545]                               msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:25:11.545]                                 info)
[13:25:11.545]                             }
[13:25:11.545]                             else {
[13:25:11.545]                               msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:25:11.545]                                 info, version)
[13:25:11.545]                             }
[13:25:11.545]                             base::stop(msg)
[13:25:11.545]                           }
[13:25:11.545]                         })
[13:25:11.545]                       }
[13:25:11.545]                       ...future.mc.cores.old <- base::getOption("mc.cores")
[13:25:11.545]                       base::options(mc.cores = 1L)
[13:25:11.545]                     }
[13:25:11.545]                     base::local({
[13:25:11.545]                       for (pkg in "utils") {
[13:25:11.545]                         base::loadNamespace(pkg)
[13:25:11.545]                         base::library(pkg, character.only = TRUE)
[13:25:11.545]                       }
[13:25:11.545]                     })
[13:25:11.545]                   }
[13:25:11.545]                   options(future.plan = NULL)
[13:25:11.545]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:25:11.545]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:25:11.545]                 }
[13:25:11.545]                 ...future.workdir <- getwd()
[13:25:11.545]             }
[13:25:11.545]             ...future.oldOptions <- base::as.list(base::.Options)
[13:25:11.545]             ...future.oldEnvVars <- base::Sys.getenv()
[13:25:11.545]         }
[13:25:11.545]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:25:11.545]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:25:11.545]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:25:11.545]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:25:11.545]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:25:11.545]             future.stdout.windows.reencode = NULL, width = 80L)
[13:25:11.545]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:25:11.545]             base::names(...future.oldOptions))
[13:25:11.545]     }
[13:25:11.545]     if (FALSE) {
[13:25:11.545]     }
[13:25:11.545]     else {
[13:25:11.545]         if (TRUE) {
[13:25:11.545]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:25:11.545]                 open = "w")
[13:25:11.545]         }
[13:25:11.545]         else {
[13:25:11.545]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:25:11.545]                 windows = "NUL", "/dev/null"), open = "w")
[13:25:11.545]         }
[13:25:11.545]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:25:11.545]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:25:11.545]             base::sink(type = "output", split = FALSE)
[13:25:11.545]             base::close(...future.stdout)
[13:25:11.545]         }, add = TRUE)
[13:25:11.545]     }
[13:25:11.545]     ...future.frame <- base::sys.nframe()
[13:25:11.545]     ...future.conditions <- base::list()
[13:25:11.545]     ...future.rng <- base::globalenv()$.Random.seed
[13:25:11.545]     if (FALSE) {
[13:25:11.545]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:25:11.545]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:25:11.545]     }
[13:25:11.545]     ...future.result <- base::tryCatch({
[13:25:11.545]         base::withCallingHandlers({
[13:25:11.545]             ...future.value <- base::withVisible(base::local({
[13:25:11.545]                 withCallingHandlers({
[13:25:11.545]                   {
[13:25:11.545]                     print(1:50)
[13:25:11.545]                     str(1:50)
[13:25:11.545]                     cat(letters, sep = "-")
[13:25:11.545]                     cat(1:6, collapse = "\n")
[13:25:11.545]                     write.table(datasets::iris[1:10, ], sep = "\t")
[13:25:11.545]                     42L
[13:25:11.545]                   }
[13:25:11.545]                 }, immediateCondition = function(cond) {
[13:25:11.545]                   save_rds <- function (object, pathname, ...) 
[13:25:11.545]                   {
[13:25:11.545]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[13:25:11.545]                     if (file_test("-f", pathname_tmp)) {
[13:25:11.545]                       fi_tmp <- file.info(pathname_tmp)
[13:25:11.545]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[13:25:11.545]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:25:11.545]                         fi_tmp[["mtime"]])
[13:25:11.545]                     }
[13:25:11.545]                     tryCatch({
[13:25:11.545]                       saveRDS(object, file = pathname_tmp, ...)
[13:25:11.545]                     }, error = function(ex) {
[13:25:11.545]                       msg <- conditionMessage(ex)
[13:25:11.545]                       fi_tmp <- file.info(pathname_tmp)
[13:25:11.545]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[13:25:11.545]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:25:11.545]                         fi_tmp[["mtime"]], msg)
[13:25:11.545]                       ex$message <- msg
[13:25:11.545]                       stop(ex)
[13:25:11.545]                     })
[13:25:11.545]                     stopifnot(file_test("-f", pathname_tmp))
[13:25:11.545]                     res <- file.rename(from = pathname_tmp, to = pathname)
[13:25:11.545]                     if (!res || file_test("-f", pathname_tmp)) {
[13:25:11.545]                       fi_tmp <- file.info(pathname_tmp)
[13:25:11.545]                       fi <- file.info(pathname)
[13:25:11.545]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[13:25:11.545]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:25:11.545]                         fi_tmp[["mtime"]], sQuote(pathname), 
[13:25:11.545]                         fi[["size"]], fi[["mtime"]])
[13:25:11.545]                       stop(msg)
[13:25:11.545]                     }
[13:25:11.545]                     invisible(pathname)
[13:25:11.545]                   }
[13:25:11.545]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[13:25:11.545]                     rootPath = tempdir()) 
[13:25:11.545]                   {
[13:25:11.545]                     obj <- list(time = Sys.time(), condition = cond)
[13:25:11.545]                     file <- tempfile(pattern = class(cond)[1], 
[13:25:11.545]                       tmpdir = path, fileext = ".rds")
[13:25:11.545]                     save_rds(obj, file)
[13:25:11.545]                   }
[13:25:11.545]                   saveImmediateCondition(cond, path = "/tmp/Rtmp2TLbxL/.future/immediateConditions")
[13:25:11.545]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:25:11.545]                   {
[13:25:11.545]                     inherits <- base::inherits
[13:25:11.545]                     invokeRestart <- base::invokeRestart
[13:25:11.545]                     is.null <- base::is.null
[13:25:11.545]                     muffled <- FALSE
[13:25:11.545]                     if (inherits(cond, "message")) {
[13:25:11.545]                       muffled <- grepl(pattern, "muffleMessage")
[13:25:11.545]                       if (muffled) 
[13:25:11.545]                         invokeRestart("muffleMessage")
[13:25:11.545]                     }
[13:25:11.545]                     else if (inherits(cond, "warning")) {
[13:25:11.545]                       muffled <- grepl(pattern, "muffleWarning")
[13:25:11.545]                       if (muffled) 
[13:25:11.545]                         invokeRestart("muffleWarning")
[13:25:11.545]                     }
[13:25:11.545]                     else if (inherits(cond, "condition")) {
[13:25:11.545]                       if (!is.null(pattern)) {
[13:25:11.545]                         computeRestarts <- base::computeRestarts
[13:25:11.545]                         grepl <- base::grepl
[13:25:11.545]                         restarts <- computeRestarts(cond)
[13:25:11.545]                         for (restart in restarts) {
[13:25:11.545]                           name <- restart$name
[13:25:11.545]                           if (is.null(name)) 
[13:25:11.545]                             next
[13:25:11.545]                           if (!grepl(pattern, name)) 
[13:25:11.545]                             next
[13:25:11.545]                           invokeRestart(restart)
[13:25:11.545]                           muffled <- TRUE
[13:25:11.545]                           break
[13:25:11.545]                         }
[13:25:11.545]                       }
[13:25:11.545]                     }
[13:25:11.545]                     invisible(muffled)
[13:25:11.545]                   }
[13:25:11.545]                   muffleCondition(cond)
[13:25:11.545]                 })
[13:25:11.545]             }))
[13:25:11.545]             future::FutureResult(value = ...future.value$value, 
[13:25:11.545]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:25:11.545]                   ...future.rng), globalenv = if (FALSE) 
[13:25:11.545]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:25:11.545]                     ...future.globalenv.names))
[13:25:11.545]                 else NULL, started = ...future.startTime, version = "1.8")
[13:25:11.545]         }, condition = base::local({
[13:25:11.545]             c <- base::c
[13:25:11.545]             inherits <- base::inherits
[13:25:11.545]             invokeRestart <- base::invokeRestart
[13:25:11.545]             length <- base::length
[13:25:11.545]             list <- base::list
[13:25:11.545]             seq.int <- base::seq.int
[13:25:11.545]             signalCondition <- base::signalCondition
[13:25:11.545]             sys.calls <- base::sys.calls
[13:25:11.545]             `[[` <- base::`[[`
[13:25:11.545]             `+` <- base::`+`
[13:25:11.545]             `<<-` <- base::`<<-`
[13:25:11.545]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:25:11.545]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:25:11.545]                   3L)]
[13:25:11.545]             }
[13:25:11.545]             function(cond) {
[13:25:11.545]                 is_error <- inherits(cond, "error")
[13:25:11.545]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:25:11.545]                   NULL)
[13:25:11.545]                 if (is_error) {
[13:25:11.545]                   sessionInformation <- function() {
[13:25:11.545]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:25:11.545]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:25:11.545]                       search = base::search(), system = base::Sys.info())
[13:25:11.545]                   }
[13:25:11.545]                   ...future.conditions[[length(...future.conditions) + 
[13:25:11.545]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:25:11.545]                     cond$call), session = sessionInformation(), 
[13:25:11.545]                     timestamp = base::Sys.time(), signaled = 0L)
[13:25:11.545]                   signalCondition(cond)
[13:25:11.545]                 }
[13:25:11.545]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:25:11.545]                 "immediateCondition"))) {
[13:25:11.545]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:25:11.545]                   ...future.conditions[[length(...future.conditions) + 
[13:25:11.545]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:25:11.545]                   if (TRUE && !signal) {
[13:25:11.545]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:25:11.545]                     {
[13:25:11.545]                       inherits <- base::inherits
[13:25:11.545]                       invokeRestart <- base::invokeRestart
[13:25:11.545]                       is.null <- base::is.null
[13:25:11.545]                       muffled <- FALSE
[13:25:11.545]                       if (inherits(cond, "message")) {
[13:25:11.545]                         muffled <- grepl(pattern, "muffleMessage")
[13:25:11.545]                         if (muffled) 
[13:25:11.545]                           invokeRestart("muffleMessage")
[13:25:11.545]                       }
[13:25:11.545]                       else if (inherits(cond, "warning")) {
[13:25:11.545]                         muffled <- grepl(pattern, "muffleWarning")
[13:25:11.545]                         if (muffled) 
[13:25:11.545]                           invokeRestart("muffleWarning")
[13:25:11.545]                       }
[13:25:11.545]                       else if (inherits(cond, "condition")) {
[13:25:11.545]                         if (!is.null(pattern)) {
[13:25:11.545]                           computeRestarts <- base::computeRestarts
[13:25:11.545]                           grepl <- base::grepl
[13:25:11.545]                           restarts <- computeRestarts(cond)
[13:25:11.545]                           for (restart in restarts) {
[13:25:11.545]                             name <- restart$name
[13:25:11.545]                             if (is.null(name)) 
[13:25:11.545]                               next
[13:25:11.545]                             if (!grepl(pattern, name)) 
[13:25:11.545]                               next
[13:25:11.545]                             invokeRestart(restart)
[13:25:11.545]                             muffled <- TRUE
[13:25:11.545]                             break
[13:25:11.545]                           }
[13:25:11.545]                         }
[13:25:11.545]                       }
[13:25:11.545]                       invisible(muffled)
[13:25:11.545]                     }
[13:25:11.545]                     muffleCondition(cond, pattern = "^muffle")
[13:25:11.545]                   }
[13:25:11.545]                 }
[13:25:11.545]                 else {
[13:25:11.545]                   if (TRUE) {
[13:25:11.545]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:25:11.545]                     {
[13:25:11.545]                       inherits <- base::inherits
[13:25:11.545]                       invokeRestart <- base::invokeRestart
[13:25:11.545]                       is.null <- base::is.null
[13:25:11.545]                       muffled <- FALSE
[13:25:11.545]                       if (inherits(cond, "message")) {
[13:25:11.545]                         muffled <- grepl(pattern, "muffleMessage")
[13:25:11.545]                         if (muffled) 
[13:25:11.545]                           invokeRestart("muffleMessage")
[13:25:11.545]                       }
[13:25:11.545]                       else if (inherits(cond, "warning")) {
[13:25:11.545]                         muffled <- grepl(pattern, "muffleWarning")
[13:25:11.545]                         if (muffled) 
[13:25:11.545]                           invokeRestart("muffleWarning")
[13:25:11.545]                       }
[13:25:11.545]                       else if (inherits(cond, "condition")) {
[13:25:11.545]                         if (!is.null(pattern)) {
[13:25:11.545]                           computeRestarts <- base::computeRestarts
[13:25:11.545]                           grepl <- base::grepl
[13:25:11.545]                           restarts <- computeRestarts(cond)
[13:25:11.545]                           for (restart in restarts) {
[13:25:11.545]                             name <- restart$name
[13:25:11.545]                             if (is.null(name)) 
[13:25:11.545]                               next
[13:25:11.545]                             if (!grepl(pattern, name)) 
[13:25:11.545]                               next
[13:25:11.545]                             invokeRestart(restart)
[13:25:11.545]                             muffled <- TRUE
[13:25:11.545]                             break
[13:25:11.545]                           }
[13:25:11.545]                         }
[13:25:11.545]                       }
[13:25:11.545]                       invisible(muffled)
[13:25:11.545]                     }
[13:25:11.545]                     muffleCondition(cond, pattern = "^muffle")
[13:25:11.545]                   }
[13:25:11.545]                 }
[13:25:11.545]             }
[13:25:11.545]         }))
[13:25:11.545]     }, error = function(ex) {
[13:25:11.545]         base::structure(base::list(value = NULL, visible = NULL, 
[13:25:11.545]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:25:11.545]                 ...future.rng), started = ...future.startTime, 
[13:25:11.545]             finished = Sys.time(), session_uuid = NA_character_, 
[13:25:11.545]             version = "1.8"), class = "FutureResult")
[13:25:11.545]     }, finally = {
[13:25:11.545]         if (!identical(...future.workdir, getwd())) 
[13:25:11.545]             setwd(...future.workdir)
[13:25:11.545]         {
[13:25:11.545]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:25:11.545]                 ...future.oldOptions$nwarnings <- NULL
[13:25:11.545]             }
[13:25:11.545]             base::options(...future.oldOptions)
[13:25:11.545]             if (.Platform$OS.type == "windows") {
[13:25:11.545]                 old_names <- names(...future.oldEnvVars)
[13:25:11.545]                 envs <- base::Sys.getenv()
[13:25:11.545]                 names <- names(envs)
[13:25:11.545]                 common <- intersect(names, old_names)
[13:25:11.545]                 added <- setdiff(names, old_names)
[13:25:11.545]                 removed <- setdiff(old_names, names)
[13:25:11.545]                 changed <- common[...future.oldEnvVars[common] != 
[13:25:11.545]                   envs[common]]
[13:25:11.545]                 NAMES <- toupper(changed)
[13:25:11.545]                 args <- list()
[13:25:11.545]                 for (kk in seq_along(NAMES)) {
[13:25:11.545]                   name <- changed[[kk]]
[13:25:11.545]                   NAME <- NAMES[[kk]]
[13:25:11.545]                   if (name != NAME && is.element(NAME, old_names)) 
[13:25:11.545]                     next
[13:25:11.545]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:25:11.545]                 }
[13:25:11.545]                 NAMES <- toupper(added)
[13:25:11.545]                 for (kk in seq_along(NAMES)) {
[13:25:11.545]                   name <- added[[kk]]
[13:25:11.545]                   NAME <- NAMES[[kk]]
[13:25:11.545]                   if (name != NAME && is.element(NAME, old_names)) 
[13:25:11.545]                     next
[13:25:11.545]                   args[[name]] <- ""
[13:25:11.545]                 }
[13:25:11.545]                 NAMES <- toupper(removed)
[13:25:11.545]                 for (kk in seq_along(NAMES)) {
[13:25:11.545]                   name <- removed[[kk]]
[13:25:11.545]                   NAME <- NAMES[[kk]]
[13:25:11.545]                   if (name != NAME && is.element(NAME, old_names)) 
[13:25:11.545]                     next
[13:25:11.545]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:25:11.545]                 }
[13:25:11.545]                 if (length(args) > 0) 
[13:25:11.545]                   base::do.call(base::Sys.setenv, args = args)
[13:25:11.545]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:25:11.545]             }
[13:25:11.545]             else {
[13:25:11.545]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:25:11.545]             }
[13:25:11.545]             {
[13:25:11.545]                 if (base::length(...future.futureOptionsAdded) > 
[13:25:11.545]                   0L) {
[13:25:11.545]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:25:11.545]                   base::names(opts) <- ...future.futureOptionsAdded
[13:25:11.545]                   base::options(opts)
[13:25:11.545]                 }
[13:25:11.545]                 {
[13:25:11.545]                   {
[13:25:11.545]                     base::options(mc.cores = ...future.mc.cores.old)
[13:25:11.545]                     NULL
[13:25:11.545]                   }
[13:25:11.545]                   options(future.plan = NULL)
[13:25:11.545]                   if (is.na(NA_character_)) 
[13:25:11.545]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:25:11.545]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:25:11.545]                   future::plan(list(function (..., workers = availableCores(constraints = "multicore"), 
[13:25:11.545]                     envir = parent.frame()) 
[13:25:11.545]                   {
[13:25:11.545]                     default_workers <- missing(workers)
[13:25:11.545]                     if (is.function(workers)) 
[13:25:11.545]                       workers <- workers()
[13:25:11.545]                     workers <- structure(as.integer(workers), 
[13:25:11.545]                       class = class(workers))
[13:25:11.545]                     stop_if_not(is.finite(workers), workers >= 
[13:25:11.545]                       1L)
[13:25:11.545]                     if ((workers == 1L && !inherits(workers, 
[13:25:11.545]                       "AsIs")) || !supportsMulticore(warn = TRUE)) {
[13:25:11.545]                       if (default_workers) 
[13:25:11.545]                         supportsMulticore(warn = TRUE)
[13:25:11.545]                       return(sequential(..., envir = envir))
[13:25:11.545]                     }
[13:25:11.545]                     oopts <- options(mc.cores = workers)
[13:25:11.545]                     on.exit(options(oopts))
[13:25:11.545]                     future <- MulticoreFuture(..., workers = workers, 
[13:25:11.545]                       envir = envir)
[13:25:11.545]                     if (!future$lazy) 
[13:25:11.545]                       future <- run(future)
[13:25:11.545]                     invisible(future)
[13:25:11.545]                   }), .cleanup = FALSE, .init = FALSE)
[13:25:11.545]                 }
[13:25:11.545]             }
[13:25:11.545]         }
[13:25:11.545]     })
[13:25:11.545]     if (TRUE) {
[13:25:11.545]         base::sink(type = "output", split = FALSE)
[13:25:11.545]         if (TRUE) {
[13:25:11.545]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:25:11.545]         }
[13:25:11.545]         else {
[13:25:11.545]             ...future.result["stdout"] <- base::list(NULL)
[13:25:11.545]         }
[13:25:11.545]         base::close(...future.stdout)
[13:25:11.545]         ...future.stdout <- NULL
[13:25:11.545]     }
[13:25:11.545]     ...future.result$conditions <- ...future.conditions
[13:25:11.545]     ...future.result$finished <- base::Sys.time()
[13:25:11.545]     ...future.result
[13:25:11.545] }
[13:25:11.548] requestCore(): workers = 2
[13:25:11.550] MulticoreFuture started
[13:25:11.550] - Launch lazy future ... done
[13:25:11.551] run() for ‘MulticoreFuture’ ... done
[13:25:11.551] result() for MulticoreFuture ...
[13:25:11.551] plan(): Setting new future strategy stack:
[13:25:11.552] List of future strategies:
[13:25:11.552] 1. sequential:
[13:25:11.552]    - args: function (..., envir = parent.frame())
[13:25:11.552]    - tweaked: FALSE
[13:25:11.552]    - call: NULL
[13:25:11.552] plan(): nbrOfWorkers() = 1
[13:25:11.556] plan(): Setting new future strategy stack:
[13:25:11.556] List of future strategies:
[13:25:11.556] 1. multicore:
[13:25:11.556]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[13:25:11.556]    - tweaked: FALSE
[13:25:11.556]    - call: plan(strategy)
[13:25:11.561] plan(): nbrOfWorkers() = 2
[13:25:11.562] result() for MulticoreFuture ...
[13:25:11.563] result() for MulticoreFuture ... done
[13:25:11.563] result() for MulticoreFuture ... done
[13:25:11.563] result() for MulticoreFuture ...
[13:25:11.563] result() for MulticoreFuture ... done
 [1] " [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25"  
 [2] "[26] 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50"  
 [3] " int [1:50] 1 2 3 4 5 6 7 8 9 10 ..."                                             
 [4] "a-b-c-d-e-f-g-h-i-j-k-l-m-n-o-p-q-r-s-t-u-v-w-x-y-z1 2 3 4 5 6 "                  
 [5] "\"Sepal.Length\"\t\"Sepal.Width\"\t\"Petal.Length\"\t\"Petal.Width\"\t\"Species\""
 [6] "\"1\"\t5.1\t3.5\t1.4\t0.2\t\"setosa\""                                            
 [7] "\"2\"\t4.9\t3\t1.4\t0.2\t\"setosa\""                                              
 [8] "\"3\"\t4.7\t3.2\t1.3\t0.2\t\"setosa\""                                            
 [9] "\"4\"\t4.6\t3.1\t1.5\t0.2\t\"setosa\""                                            
[10] "\"5\"\t5\t3.6\t1.4\t0.2\t\"setosa\""                                              
[11] "\"6\"\t5.4\t3.9\t1.7\t0.4\t\"setosa\""                                            
[12] "\"7\"\t4.6\t3.4\t1.4\t0.3\t\"setosa\""                                            
[13] "\"8\"\t5\t3.4\t1.5\t0.2\t\"setosa\""                                              
[14] "\"9\"\t4.4\t2.9\t1.4\t0.2\t\"setosa\""                                            
[15] "\"10\"\t4.9\t3.1\t1.5\t0.1\t\"setosa\""                                           
- stdout = structure(TRUE, drop = TRUE)
[13:25:11.564] getGlobalsAndPackages() ...
[13:25:11.564] Searching for globals...
[13:25:11.565] - globals found: [1] ‘print’
[13:25:11.565] Searching for globals ... DONE
[13:25:11.566] Resolving globals: FALSE
[13:25:11.566] 
[13:25:11.566] 
[13:25:11.566] getGlobalsAndPackages() ... DONE
[13:25:11.567] run() for ‘Future’ ...
[13:25:11.567] - state: ‘created’
[13:25:11.567] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[13:25:11.572] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:25:11.573] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[13:25:11.573]   - Field: ‘label’
[13:25:11.573]   - Field: ‘local’
[13:25:11.573]   - Field: ‘owner’
[13:25:11.573]   - Field: ‘envir’
[13:25:11.574]   - Field: ‘workers’
[13:25:11.574]   - Field: ‘packages’
[13:25:11.574]   - Field: ‘gc’
[13:25:11.574]   - Field: ‘job’
[13:25:11.574]   - Field: ‘conditions’
[13:25:11.574]   - Field: ‘expr’
[13:25:11.575]   - Field: ‘uuid’
[13:25:11.575]   - Field: ‘seed’
[13:25:11.575]   - Field: ‘version’
[13:25:11.575]   - Field: ‘result’
[13:25:11.575]   - Field: ‘asynchronous’
[13:25:11.575]   - Field: ‘calls’
[13:25:11.575]   - Field: ‘globals’
[13:25:11.576]   - Field: ‘stdout’
[13:25:11.576]   - Field: ‘earlySignal’
[13:25:11.576]   - Field: ‘lazy’
[13:25:11.576]   - Field: ‘state’
[13:25:11.576] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[13:25:11.576] - Launch lazy future ...
[13:25:11.577] Packages needed by the future expression (n = 0): <none>
[13:25:11.577] Packages needed by future strategies (n = 0): <none>
[13:25:11.578] {
[13:25:11.578]     {
[13:25:11.578]         {
[13:25:11.578]             ...future.startTime <- base::Sys.time()
[13:25:11.578]             {
[13:25:11.578]                 {
[13:25:11.578]                   {
[13:25:11.578]                     {
[13:25:11.578]                       base::local({
[13:25:11.578]                         has_future <- base::requireNamespace("future", 
[13:25:11.578]                           quietly = TRUE)
[13:25:11.578]                         if (has_future) {
[13:25:11.578]                           ns <- base::getNamespace("future")
[13:25:11.578]                           version <- ns[[".package"]][["version"]]
[13:25:11.578]                           if (is.null(version)) 
[13:25:11.578]                             version <- utils::packageVersion("future")
[13:25:11.578]                         }
[13:25:11.578]                         else {
[13:25:11.578]                           version <- NULL
[13:25:11.578]                         }
[13:25:11.578]                         if (!has_future || version < "1.8.0") {
[13:25:11.578]                           info <- base::c(r_version = base::gsub("R version ", 
[13:25:11.578]                             "", base::R.version$version.string), 
[13:25:11.578]                             platform = base::sprintf("%s (%s-bit)", 
[13:25:11.578]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:25:11.578]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:25:11.578]                               "release", "version")], collapse = " "), 
[13:25:11.578]                             hostname = base::Sys.info()[["nodename"]])
[13:25:11.578]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:25:11.578]                             info)
[13:25:11.578]                           info <- base::paste(info, collapse = "; ")
[13:25:11.578]                           if (!has_future) {
[13:25:11.578]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:25:11.578]                               info)
[13:25:11.578]                           }
[13:25:11.578]                           else {
[13:25:11.578]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:25:11.578]                               info, version)
[13:25:11.578]                           }
[13:25:11.578]                           base::stop(msg)
[13:25:11.578]                         }
[13:25:11.578]                       })
[13:25:11.578]                     }
[13:25:11.578]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[13:25:11.578]                     base::options(mc.cores = 1L)
[13:25:11.578]                   }
[13:25:11.578]                   options(future.plan = NULL)
[13:25:11.578]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:25:11.578]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:25:11.578]                 }
[13:25:11.578]                 ...future.workdir <- getwd()
[13:25:11.578]             }
[13:25:11.578]             ...future.oldOptions <- base::as.list(base::.Options)
[13:25:11.578]             ...future.oldEnvVars <- base::Sys.getenv()
[13:25:11.578]         }
[13:25:11.578]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:25:11.578]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:25:11.578]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:25:11.578]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:25:11.578]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:25:11.578]             future.stdout.windows.reencode = NULL, width = 80L)
[13:25:11.578]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:25:11.578]             base::names(...future.oldOptions))
[13:25:11.578]     }
[13:25:11.578]     if (FALSE) {
[13:25:11.578]     }
[13:25:11.578]     else {
[13:25:11.578]         if (TRUE) {
[13:25:11.578]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:25:11.578]                 open = "w")
[13:25:11.578]         }
[13:25:11.578]         else {
[13:25:11.578]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:25:11.578]                 windows = "NUL", "/dev/null"), open = "w")
[13:25:11.578]         }
[13:25:11.578]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:25:11.578]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:25:11.578]             base::sink(type = "output", split = FALSE)
[13:25:11.578]             base::close(...future.stdout)
[13:25:11.578]         }, add = TRUE)
[13:25:11.578]     }
[13:25:11.578]     ...future.frame <- base::sys.nframe()
[13:25:11.578]     ...future.conditions <- base::list()
[13:25:11.578]     ...future.rng <- base::globalenv()$.Random.seed
[13:25:11.578]     if (FALSE) {
[13:25:11.578]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:25:11.578]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:25:11.578]     }
[13:25:11.578]     ...future.result <- base::tryCatch({
[13:25:11.578]         base::withCallingHandlers({
[13:25:11.578]             ...future.value <- base::withVisible(base::local({
[13:25:11.578]                 withCallingHandlers({
[13:25:11.578]                   print(42)
[13:25:11.578]                 }, immediateCondition = function(cond) {
[13:25:11.578]                   save_rds <- function (object, pathname, ...) 
[13:25:11.578]                   {
[13:25:11.578]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[13:25:11.578]                     if (file_test("-f", pathname_tmp)) {
[13:25:11.578]                       fi_tmp <- file.info(pathname_tmp)
[13:25:11.578]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[13:25:11.578]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:25:11.578]                         fi_tmp[["mtime"]])
[13:25:11.578]                     }
[13:25:11.578]                     tryCatch({
[13:25:11.578]                       saveRDS(object, file = pathname_tmp, ...)
[13:25:11.578]                     }, error = function(ex) {
[13:25:11.578]                       msg <- conditionMessage(ex)
[13:25:11.578]                       fi_tmp <- file.info(pathname_tmp)
[13:25:11.578]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[13:25:11.578]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:25:11.578]                         fi_tmp[["mtime"]], msg)
[13:25:11.578]                       ex$message <- msg
[13:25:11.578]                       stop(ex)
[13:25:11.578]                     })
[13:25:11.578]                     stopifnot(file_test("-f", pathname_tmp))
[13:25:11.578]                     res <- file.rename(from = pathname_tmp, to = pathname)
[13:25:11.578]                     if (!res || file_test("-f", pathname_tmp)) {
[13:25:11.578]                       fi_tmp <- file.info(pathname_tmp)
[13:25:11.578]                       fi <- file.info(pathname)
[13:25:11.578]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[13:25:11.578]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:25:11.578]                         fi_tmp[["mtime"]], sQuote(pathname), 
[13:25:11.578]                         fi[["size"]], fi[["mtime"]])
[13:25:11.578]                       stop(msg)
[13:25:11.578]                     }
[13:25:11.578]                     invisible(pathname)
[13:25:11.578]                   }
[13:25:11.578]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[13:25:11.578]                     rootPath = tempdir()) 
[13:25:11.578]                   {
[13:25:11.578]                     obj <- list(time = Sys.time(), condition = cond)
[13:25:11.578]                     file <- tempfile(pattern = class(cond)[1], 
[13:25:11.578]                       tmpdir = path, fileext = ".rds")
[13:25:11.578]                     save_rds(obj, file)
[13:25:11.578]                   }
[13:25:11.578]                   saveImmediateCondition(cond, path = "/tmp/Rtmp2TLbxL/.future/immediateConditions")
[13:25:11.578]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:25:11.578]                   {
[13:25:11.578]                     inherits <- base::inherits
[13:25:11.578]                     invokeRestart <- base::invokeRestart
[13:25:11.578]                     is.null <- base::is.null
[13:25:11.578]                     muffled <- FALSE
[13:25:11.578]                     if (inherits(cond, "message")) {
[13:25:11.578]                       muffled <- grepl(pattern, "muffleMessage")
[13:25:11.578]                       if (muffled) 
[13:25:11.578]                         invokeRestart("muffleMessage")
[13:25:11.578]                     }
[13:25:11.578]                     else if (inherits(cond, "warning")) {
[13:25:11.578]                       muffled <- grepl(pattern, "muffleWarning")
[13:25:11.578]                       if (muffled) 
[13:25:11.578]                         invokeRestart("muffleWarning")
[13:25:11.578]                     }
[13:25:11.578]                     else if (inherits(cond, "condition")) {
[13:25:11.578]                       if (!is.null(pattern)) {
[13:25:11.578]                         computeRestarts <- base::computeRestarts
[13:25:11.578]                         grepl <- base::grepl
[13:25:11.578]                         restarts <- computeRestarts(cond)
[13:25:11.578]                         for (restart in restarts) {
[13:25:11.578]                           name <- restart$name
[13:25:11.578]                           if (is.null(name)) 
[13:25:11.578]                             next
[13:25:11.578]                           if (!grepl(pattern, name)) 
[13:25:11.578]                             next
[13:25:11.578]                           invokeRestart(restart)
[13:25:11.578]                           muffled <- TRUE
[13:25:11.578]                           break
[13:25:11.578]                         }
[13:25:11.578]                       }
[13:25:11.578]                     }
[13:25:11.578]                     invisible(muffled)
[13:25:11.578]                   }
[13:25:11.578]                   muffleCondition(cond)
[13:25:11.578]                 })
[13:25:11.578]             }))
[13:25:11.578]             future::FutureResult(value = ...future.value$value, 
[13:25:11.578]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:25:11.578]                   ...future.rng), globalenv = if (FALSE) 
[13:25:11.578]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:25:11.578]                     ...future.globalenv.names))
[13:25:11.578]                 else NULL, started = ...future.startTime, version = "1.8")
[13:25:11.578]         }, condition = base::local({
[13:25:11.578]             c <- base::c
[13:25:11.578]             inherits <- base::inherits
[13:25:11.578]             invokeRestart <- base::invokeRestart
[13:25:11.578]             length <- base::length
[13:25:11.578]             list <- base::list
[13:25:11.578]             seq.int <- base::seq.int
[13:25:11.578]             signalCondition <- base::signalCondition
[13:25:11.578]             sys.calls <- base::sys.calls
[13:25:11.578]             `[[` <- base::`[[`
[13:25:11.578]             `+` <- base::`+`
[13:25:11.578]             `<<-` <- base::`<<-`
[13:25:11.578]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:25:11.578]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:25:11.578]                   3L)]
[13:25:11.578]             }
[13:25:11.578]             function(cond) {
[13:25:11.578]                 is_error <- inherits(cond, "error")
[13:25:11.578]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:25:11.578]                   NULL)
[13:25:11.578]                 if (is_error) {
[13:25:11.578]                   sessionInformation <- function() {
[13:25:11.578]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:25:11.578]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:25:11.578]                       search = base::search(), system = base::Sys.info())
[13:25:11.578]                   }
[13:25:11.578]                   ...future.conditions[[length(...future.conditions) + 
[13:25:11.578]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:25:11.578]                     cond$call), session = sessionInformation(), 
[13:25:11.578]                     timestamp = base::Sys.time(), signaled = 0L)
[13:25:11.578]                   signalCondition(cond)
[13:25:11.578]                 }
[13:25:11.578]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:25:11.578]                 "immediateCondition"))) {
[13:25:11.578]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:25:11.578]                   ...future.conditions[[length(...future.conditions) + 
[13:25:11.578]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:25:11.578]                   if (TRUE && !signal) {
[13:25:11.578]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:25:11.578]                     {
[13:25:11.578]                       inherits <- base::inherits
[13:25:11.578]                       invokeRestart <- base::invokeRestart
[13:25:11.578]                       is.null <- base::is.null
[13:25:11.578]                       muffled <- FALSE
[13:25:11.578]                       if (inherits(cond, "message")) {
[13:25:11.578]                         muffled <- grepl(pattern, "muffleMessage")
[13:25:11.578]                         if (muffled) 
[13:25:11.578]                           invokeRestart("muffleMessage")
[13:25:11.578]                       }
[13:25:11.578]                       else if (inherits(cond, "warning")) {
[13:25:11.578]                         muffled <- grepl(pattern, "muffleWarning")
[13:25:11.578]                         if (muffled) 
[13:25:11.578]                           invokeRestart("muffleWarning")
[13:25:11.578]                       }
[13:25:11.578]                       else if (inherits(cond, "condition")) {
[13:25:11.578]                         if (!is.null(pattern)) {
[13:25:11.578]                           computeRestarts <- base::computeRestarts
[13:25:11.578]                           grepl <- base::grepl
[13:25:11.578]                           restarts <- computeRestarts(cond)
[13:25:11.578]                           for (restart in restarts) {
[13:25:11.578]                             name <- restart$name
[13:25:11.578]                             if (is.null(name)) 
[13:25:11.578]                               next
[13:25:11.578]                             if (!grepl(pattern, name)) 
[13:25:11.578]                               next
[13:25:11.578]                             invokeRestart(restart)
[13:25:11.578]                             muffled <- TRUE
[13:25:11.578]                             break
[13:25:11.578]                           }
[13:25:11.578]                         }
[13:25:11.578]                       }
[13:25:11.578]                       invisible(muffled)
[13:25:11.578]                     }
[13:25:11.578]                     muffleCondition(cond, pattern = "^muffle")
[13:25:11.578]                   }
[13:25:11.578]                 }
[13:25:11.578]                 else {
[13:25:11.578]                   if (TRUE) {
[13:25:11.578]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:25:11.578]                     {
[13:25:11.578]                       inherits <- base::inherits
[13:25:11.578]                       invokeRestart <- base::invokeRestart
[13:25:11.578]                       is.null <- base::is.null
[13:25:11.578]                       muffled <- FALSE
[13:25:11.578]                       if (inherits(cond, "message")) {
[13:25:11.578]                         muffled <- grepl(pattern, "muffleMessage")
[13:25:11.578]                         if (muffled) 
[13:25:11.578]                           invokeRestart("muffleMessage")
[13:25:11.578]                       }
[13:25:11.578]                       else if (inherits(cond, "warning")) {
[13:25:11.578]                         muffled <- grepl(pattern, "muffleWarning")
[13:25:11.578]                         if (muffled) 
[13:25:11.578]                           invokeRestart("muffleWarning")
[13:25:11.578]                       }
[13:25:11.578]                       else if (inherits(cond, "condition")) {
[13:25:11.578]                         if (!is.null(pattern)) {
[13:25:11.578]                           computeRestarts <- base::computeRestarts
[13:25:11.578]                           grepl <- base::grepl
[13:25:11.578]                           restarts <- computeRestarts(cond)
[13:25:11.578]                           for (restart in restarts) {
[13:25:11.578]                             name <- restart$name
[13:25:11.578]                             if (is.null(name)) 
[13:25:11.578]                               next
[13:25:11.578]                             if (!grepl(pattern, name)) 
[13:25:11.578]                               next
[13:25:11.578]                             invokeRestart(restart)
[13:25:11.578]                             muffled <- TRUE
[13:25:11.578]                             break
[13:25:11.578]                           }
[13:25:11.578]                         }
[13:25:11.578]                       }
[13:25:11.578]                       invisible(muffled)
[13:25:11.578]                     }
[13:25:11.578]                     muffleCondition(cond, pattern = "^muffle")
[13:25:11.578]                   }
[13:25:11.578]                 }
[13:25:11.578]             }
[13:25:11.578]         }))
[13:25:11.578]     }, error = function(ex) {
[13:25:11.578]         base::structure(base::list(value = NULL, visible = NULL, 
[13:25:11.578]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:25:11.578]                 ...future.rng), started = ...future.startTime, 
[13:25:11.578]             finished = Sys.time(), session_uuid = NA_character_, 
[13:25:11.578]             version = "1.8"), class = "FutureResult")
[13:25:11.578]     }, finally = {
[13:25:11.578]         if (!identical(...future.workdir, getwd())) 
[13:25:11.578]             setwd(...future.workdir)
[13:25:11.578]         {
[13:25:11.578]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:25:11.578]                 ...future.oldOptions$nwarnings <- NULL
[13:25:11.578]             }
[13:25:11.578]             base::options(...future.oldOptions)
[13:25:11.578]             if (.Platform$OS.type == "windows") {
[13:25:11.578]                 old_names <- names(...future.oldEnvVars)
[13:25:11.578]                 envs <- base::Sys.getenv()
[13:25:11.578]                 names <- names(envs)
[13:25:11.578]                 common <- intersect(names, old_names)
[13:25:11.578]                 added <- setdiff(names, old_names)
[13:25:11.578]                 removed <- setdiff(old_names, names)
[13:25:11.578]                 changed <- common[...future.oldEnvVars[common] != 
[13:25:11.578]                   envs[common]]
[13:25:11.578]                 NAMES <- toupper(changed)
[13:25:11.578]                 args <- list()
[13:25:11.578]                 for (kk in seq_along(NAMES)) {
[13:25:11.578]                   name <- changed[[kk]]
[13:25:11.578]                   NAME <- NAMES[[kk]]
[13:25:11.578]                   if (name != NAME && is.element(NAME, old_names)) 
[13:25:11.578]                     next
[13:25:11.578]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:25:11.578]                 }
[13:25:11.578]                 NAMES <- toupper(added)
[13:25:11.578]                 for (kk in seq_along(NAMES)) {
[13:25:11.578]                   name <- added[[kk]]
[13:25:11.578]                   NAME <- NAMES[[kk]]
[13:25:11.578]                   if (name != NAME && is.element(NAME, old_names)) 
[13:25:11.578]                     next
[13:25:11.578]                   args[[name]] <- ""
[13:25:11.578]                 }
[13:25:11.578]                 NAMES <- toupper(removed)
[13:25:11.578]                 for (kk in seq_along(NAMES)) {
[13:25:11.578]                   name <- removed[[kk]]
[13:25:11.578]                   NAME <- NAMES[[kk]]
[13:25:11.578]                   if (name != NAME && is.element(NAME, old_names)) 
[13:25:11.578]                     next
[13:25:11.578]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:25:11.578]                 }
[13:25:11.578]                 if (length(args) > 0) 
[13:25:11.578]                   base::do.call(base::Sys.setenv, args = args)
[13:25:11.578]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:25:11.578]             }
[13:25:11.578]             else {
[13:25:11.578]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:25:11.578]             }
[13:25:11.578]             {
[13:25:11.578]                 if (base::length(...future.futureOptionsAdded) > 
[13:25:11.578]                   0L) {
[13:25:11.578]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:25:11.578]                   base::names(opts) <- ...future.futureOptionsAdded
[13:25:11.578]                   base::options(opts)
[13:25:11.578]                 }
[13:25:11.578]                 {
[13:25:11.578]                   {
[13:25:11.578]                     base::options(mc.cores = ...future.mc.cores.old)
[13:25:11.578]                     NULL
[13:25:11.578]                   }
[13:25:11.578]                   options(future.plan = NULL)
[13:25:11.578]                   if (is.na(NA_character_)) 
[13:25:11.578]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:25:11.578]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:25:11.578]                   future::plan(list(function (..., workers = availableCores(constraints = "multicore"), 
[13:25:11.578]                     envir = parent.frame()) 
[13:25:11.578]                   {
[13:25:11.578]                     default_workers <- missing(workers)
[13:25:11.578]                     if (is.function(workers)) 
[13:25:11.578]                       workers <- workers()
[13:25:11.578]                     workers <- structure(as.integer(workers), 
[13:25:11.578]                       class = class(workers))
[13:25:11.578]                     stop_if_not(is.finite(workers), workers >= 
[13:25:11.578]                       1L)
[13:25:11.578]                     if ((workers == 1L && !inherits(workers, 
[13:25:11.578]                       "AsIs")) || !supportsMulticore(warn = TRUE)) {
[13:25:11.578]                       if (default_workers) 
[13:25:11.578]                         supportsMulticore(warn = TRUE)
[13:25:11.578]                       return(sequential(..., envir = envir))
[13:25:11.578]                     }
[13:25:11.578]                     oopts <- options(mc.cores = workers)
[13:25:11.578]                     on.exit(options(oopts))
[13:25:11.578]                     future <- MulticoreFuture(..., workers = workers, 
[13:25:11.578]                       envir = envir)
[13:25:11.578]                     if (!future$lazy) 
[13:25:11.578]                       future <- run(future)
[13:25:11.578]                     invisible(future)
[13:25:11.578]                   }), .cleanup = FALSE, .init = FALSE)
[13:25:11.578]                 }
[13:25:11.578]             }
[13:25:11.578]         }
[13:25:11.578]     })
[13:25:11.578]     if (TRUE) {
[13:25:11.578]         base::sink(type = "output", split = FALSE)
[13:25:11.578]         if (TRUE) {
[13:25:11.578]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:25:11.578]         }
[13:25:11.578]         else {
[13:25:11.578]             ...future.result["stdout"] <- base::list(NULL)
[13:25:11.578]         }
[13:25:11.578]         base::close(...future.stdout)
[13:25:11.578]         ...future.stdout <- NULL
[13:25:11.578]     }
[13:25:11.578]     ...future.result$conditions <- ...future.conditions
[13:25:11.578]     ...future.result$finished <- base::Sys.time()
[13:25:11.578]     ...future.result
[13:25:11.578] }
[13:25:11.582] requestCore(): workers = 2
[13:25:11.585] MulticoreFuture started
[13:25:11.585] - Launch lazy future ... done
[13:25:11.585] run() for ‘MulticoreFuture’ ... done
[13:25:11.586] plan(): Setting new future strategy stack:
[13:25:11.586] result() for MulticoreFuture ...
[13:25:11.586] List of future strategies:
[13:25:11.586] 1. sequential:
[13:25:11.586]    - args: function (..., envir = parent.frame())
[13:25:11.586]    - tweaked: FALSE
[13:25:11.586]    - call: NULL
[13:25:11.587] plan(): nbrOfWorkers() = 1
[13:25:11.594] plan(): Setting new future strategy stack:
[13:25:11.594] List of future strategies:
[13:25:11.594] 1. multicore:
[13:25:11.594]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[13:25:11.594]    - tweaked: FALSE
[13:25:11.594]    - call: plan(strategy)
[13:25:11.600] plan(): nbrOfWorkers() = 2
[13:25:11.604] result() for MulticoreFuture ...
[13:25:11.604] result() for MulticoreFuture ... done
[13:25:11.605] result() for MulticoreFuture ... done
[13:25:11.605] result() for MulticoreFuture ...
[13:25:11.605] result() for MulticoreFuture ... done
[13:25:11.605] result() for MulticoreFuture ...
[13:25:11.605] result() for MulticoreFuture ... done
[1] 42
[13:25:11.605] result() for MulticoreFuture ...
[13:25:11.606] result() for MulticoreFuture ... done
- stdout = FALSE
[13:25:11.606] getGlobalsAndPackages() ...
[13:25:11.606] Searching for globals...
[13:25:11.610] - globals found: [9] ‘{’, ‘print’, ‘:’, ‘str’, ‘cat’, ‘letters’, ‘write.table’, ‘[’, ‘::’
[13:25:11.610] Searching for globals ... DONE
[13:25:11.610] Resolving globals: FALSE
[13:25:11.611] 
[13:25:11.611] - packages: [1] ‘utils’
[13:25:11.611] getGlobalsAndPackages() ... DONE
[13:25:11.612] run() for ‘Future’ ...
[13:25:11.612] - state: ‘created’
[13:25:11.612] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[13:25:11.616] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:25:11.616] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[13:25:11.616]   - Field: ‘label’
[13:25:11.616]   - Field: ‘local’
[13:25:11.616]   - Field: ‘owner’
[13:25:11.617]   - Field: ‘envir’
[13:25:11.617]   - Field: ‘workers’
[13:25:11.617]   - Field: ‘packages’
[13:25:11.617]   - Field: ‘gc’
[13:25:11.617]   - Field: ‘job’
[13:25:11.617]   - Field: ‘conditions’
[13:25:11.618]   - Field: ‘expr’
[13:25:11.618]   - Field: ‘uuid’
[13:25:11.618]   - Field: ‘seed’
[13:25:11.618]   - Field: ‘version’
[13:25:11.618]   - Field: ‘result’
[13:25:11.619]   - Field: ‘asynchronous’
[13:25:11.619]   - Field: ‘calls’
[13:25:11.619]   - Field: ‘globals’
[13:25:11.619]   - Field: ‘stdout’
[13:25:11.619]   - Field: ‘earlySignal’
[13:25:11.619]   - Field: ‘lazy’
[13:25:11.619]   - Field: ‘state’
[13:25:11.620] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[13:25:11.620] - Launch lazy future ...
[13:25:11.620] Packages needed by the future expression (n = 1): ‘utils’
[13:25:11.620] Packages needed by future strategies (n = 0): <none>
[13:25:11.621] {
[13:25:11.621]     {
[13:25:11.621]         {
[13:25:11.621]             ...future.startTime <- base::Sys.time()
[13:25:11.621]             {
[13:25:11.621]                 {
[13:25:11.621]                   {
[13:25:11.621]                     {
[13:25:11.621]                       {
[13:25:11.621]                         base::local({
[13:25:11.621]                           has_future <- base::requireNamespace("future", 
[13:25:11.621]                             quietly = TRUE)
[13:25:11.621]                           if (has_future) {
[13:25:11.621]                             ns <- base::getNamespace("future")
[13:25:11.621]                             version <- ns[[".package"]][["version"]]
[13:25:11.621]                             if (is.null(version)) 
[13:25:11.621]                               version <- utils::packageVersion("future")
[13:25:11.621]                           }
[13:25:11.621]                           else {
[13:25:11.621]                             version <- NULL
[13:25:11.621]                           }
[13:25:11.621]                           if (!has_future || version < "1.8.0") {
[13:25:11.621]                             info <- base::c(r_version = base::gsub("R version ", 
[13:25:11.621]                               "", base::R.version$version.string), 
[13:25:11.621]                               platform = base::sprintf("%s (%s-bit)", 
[13:25:11.621]                                 base::R.version$platform, 8 * 
[13:25:11.621]                                   base::.Machine$sizeof.pointer), 
[13:25:11.621]                               os = base::paste(base::Sys.info()[base::c("sysname", 
[13:25:11.621]                                 "release", "version")], collapse = " "), 
[13:25:11.621]                               hostname = base::Sys.info()[["nodename"]])
[13:25:11.621]                             info <- base::sprintf("%s: %s", base::names(info), 
[13:25:11.621]                               info)
[13:25:11.621]                             info <- base::paste(info, collapse = "; ")
[13:25:11.621]                             if (!has_future) {
[13:25:11.621]                               msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:25:11.621]                                 info)
[13:25:11.621]                             }
[13:25:11.621]                             else {
[13:25:11.621]                               msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:25:11.621]                                 info, version)
[13:25:11.621]                             }
[13:25:11.621]                             base::stop(msg)
[13:25:11.621]                           }
[13:25:11.621]                         })
[13:25:11.621]                       }
[13:25:11.621]                       ...future.mc.cores.old <- base::getOption("mc.cores")
[13:25:11.621]                       base::options(mc.cores = 1L)
[13:25:11.621]                     }
[13:25:11.621]                     base::local({
[13:25:11.621]                       for (pkg in "utils") {
[13:25:11.621]                         base::loadNamespace(pkg)
[13:25:11.621]                         base::library(pkg, character.only = TRUE)
[13:25:11.621]                       }
[13:25:11.621]                     })
[13:25:11.621]                   }
[13:25:11.621]                   options(future.plan = NULL)
[13:25:11.621]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:25:11.621]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:25:11.621]                 }
[13:25:11.621]                 ...future.workdir <- getwd()
[13:25:11.621]             }
[13:25:11.621]             ...future.oldOptions <- base::as.list(base::.Options)
[13:25:11.621]             ...future.oldEnvVars <- base::Sys.getenv()
[13:25:11.621]         }
[13:25:11.621]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:25:11.621]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:25:11.621]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:25:11.621]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:25:11.621]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:25:11.621]             future.stdout.windows.reencode = NULL, width = 80L)
[13:25:11.621]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:25:11.621]             base::names(...future.oldOptions))
[13:25:11.621]     }
[13:25:11.621]     if (FALSE) {
[13:25:11.621]     }
[13:25:11.621]     else {
[13:25:11.621]         if (FALSE) {
[13:25:11.621]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:25:11.621]                 open = "w")
[13:25:11.621]         }
[13:25:11.621]         else {
[13:25:11.621]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:25:11.621]                 windows = "NUL", "/dev/null"), open = "w")
[13:25:11.621]         }
[13:25:11.621]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:25:11.621]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:25:11.621]             base::sink(type = "output", split = FALSE)
[13:25:11.621]             base::close(...future.stdout)
[13:25:11.621]         }, add = TRUE)
[13:25:11.621]     }
[13:25:11.621]     ...future.frame <- base::sys.nframe()
[13:25:11.621]     ...future.conditions <- base::list()
[13:25:11.621]     ...future.rng <- base::globalenv()$.Random.seed
[13:25:11.621]     if (FALSE) {
[13:25:11.621]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:25:11.621]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:25:11.621]     }
[13:25:11.621]     ...future.result <- base::tryCatch({
[13:25:11.621]         base::withCallingHandlers({
[13:25:11.621]             ...future.value <- base::withVisible(base::local({
[13:25:11.621]                 withCallingHandlers({
[13:25:11.621]                   {
[13:25:11.621]                     print(1:50)
[13:25:11.621]                     str(1:50)
[13:25:11.621]                     cat(letters, sep = "-")
[13:25:11.621]                     cat(1:6, collapse = "\n")
[13:25:11.621]                     write.table(datasets::iris[1:10, ], sep = "\t")
[13:25:11.621]                     42L
[13:25:11.621]                   }
[13:25:11.621]                 }, immediateCondition = function(cond) {
[13:25:11.621]                   save_rds <- function (object, pathname, ...) 
[13:25:11.621]                   {
[13:25:11.621]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[13:25:11.621]                     if (file_test("-f", pathname_tmp)) {
[13:25:11.621]                       fi_tmp <- file.info(pathname_tmp)
[13:25:11.621]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[13:25:11.621]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:25:11.621]                         fi_tmp[["mtime"]])
[13:25:11.621]                     }
[13:25:11.621]                     tryCatch({
[13:25:11.621]                       saveRDS(object, file = pathname_tmp, ...)
[13:25:11.621]                     }, error = function(ex) {
[13:25:11.621]                       msg <- conditionMessage(ex)
[13:25:11.621]                       fi_tmp <- file.info(pathname_tmp)
[13:25:11.621]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[13:25:11.621]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:25:11.621]                         fi_tmp[["mtime"]], msg)
[13:25:11.621]                       ex$message <- msg
[13:25:11.621]                       stop(ex)
[13:25:11.621]                     })
[13:25:11.621]                     stopifnot(file_test("-f", pathname_tmp))
[13:25:11.621]                     res <- file.rename(from = pathname_tmp, to = pathname)
[13:25:11.621]                     if (!res || file_test("-f", pathname_tmp)) {
[13:25:11.621]                       fi_tmp <- file.info(pathname_tmp)
[13:25:11.621]                       fi <- file.info(pathname)
[13:25:11.621]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[13:25:11.621]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:25:11.621]                         fi_tmp[["mtime"]], sQuote(pathname), 
[13:25:11.621]                         fi[["size"]], fi[["mtime"]])
[13:25:11.621]                       stop(msg)
[13:25:11.621]                     }
[13:25:11.621]                     invisible(pathname)
[13:25:11.621]                   }
[13:25:11.621]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[13:25:11.621]                     rootPath = tempdir()) 
[13:25:11.621]                   {
[13:25:11.621]                     obj <- list(time = Sys.time(), condition = cond)
[13:25:11.621]                     file <- tempfile(pattern = class(cond)[1], 
[13:25:11.621]                       tmpdir = path, fileext = ".rds")
[13:25:11.621]                     save_rds(obj, file)
[13:25:11.621]                   }
[13:25:11.621]                   saveImmediateCondition(cond, path = "/tmp/Rtmp2TLbxL/.future/immediateConditions")
[13:25:11.621]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:25:11.621]                   {
[13:25:11.621]                     inherits <- base::inherits
[13:25:11.621]                     invokeRestart <- base::invokeRestart
[13:25:11.621]                     is.null <- base::is.null
[13:25:11.621]                     muffled <- FALSE
[13:25:11.621]                     if (inherits(cond, "message")) {
[13:25:11.621]                       muffled <- grepl(pattern, "muffleMessage")
[13:25:11.621]                       if (muffled) 
[13:25:11.621]                         invokeRestart("muffleMessage")
[13:25:11.621]                     }
[13:25:11.621]                     else if (inherits(cond, "warning")) {
[13:25:11.621]                       muffled <- grepl(pattern, "muffleWarning")
[13:25:11.621]                       if (muffled) 
[13:25:11.621]                         invokeRestart("muffleWarning")
[13:25:11.621]                     }
[13:25:11.621]                     else if (inherits(cond, "condition")) {
[13:25:11.621]                       if (!is.null(pattern)) {
[13:25:11.621]                         computeRestarts <- base::computeRestarts
[13:25:11.621]                         grepl <- base::grepl
[13:25:11.621]                         restarts <- computeRestarts(cond)
[13:25:11.621]                         for (restart in restarts) {
[13:25:11.621]                           name <- restart$name
[13:25:11.621]                           if (is.null(name)) 
[13:25:11.621]                             next
[13:25:11.621]                           if (!grepl(pattern, name)) 
[13:25:11.621]                             next
[13:25:11.621]                           invokeRestart(restart)
[13:25:11.621]                           muffled <- TRUE
[13:25:11.621]                           break
[13:25:11.621]                         }
[13:25:11.621]                       }
[13:25:11.621]                     }
[13:25:11.621]                     invisible(muffled)
[13:25:11.621]                   }
[13:25:11.621]                   muffleCondition(cond)
[13:25:11.621]                 })
[13:25:11.621]             }))
[13:25:11.621]             future::FutureResult(value = ...future.value$value, 
[13:25:11.621]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:25:11.621]                   ...future.rng), globalenv = if (FALSE) 
[13:25:11.621]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:25:11.621]                     ...future.globalenv.names))
[13:25:11.621]                 else NULL, started = ...future.startTime, version = "1.8")
[13:25:11.621]         }, condition = base::local({
[13:25:11.621]             c <- base::c
[13:25:11.621]             inherits <- base::inherits
[13:25:11.621]             invokeRestart <- base::invokeRestart
[13:25:11.621]             length <- base::length
[13:25:11.621]             list <- base::list
[13:25:11.621]             seq.int <- base::seq.int
[13:25:11.621]             signalCondition <- base::signalCondition
[13:25:11.621]             sys.calls <- base::sys.calls
[13:25:11.621]             `[[` <- base::`[[`
[13:25:11.621]             `+` <- base::`+`
[13:25:11.621]             `<<-` <- base::`<<-`
[13:25:11.621]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:25:11.621]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:25:11.621]                   3L)]
[13:25:11.621]             }
[13:25:11.621]             function(cond) {
[13:25:11.621]                 is_error <- inherits(cond, "error")
[13:25:11.621]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:25:11.621]                   NULL)
[13:25:11.621]                 if (is_error) {
[13:25:11.621]                   sessionInformation <- function() {
[13:25:11.621]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:25:11.621]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:25:11.621]                       search = base::search(), system = base::Sys.info())
[13:25:11.621]                   }
[13:25:11.621]                   ...future.conditions[[length(...future.conditions) + 
[13:25:11.621]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:25:11.621]                     cond$call), session = sessionInformation(), 
[13:25:11.621]                     timestamp = base::Sys.time(), signaled = 0L)
[13:25:11.621]                   signalCondition(cond)
[13:25:11.621]                 }
[13:25:11.621]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:25:11.621]                 "immediateCondition"))) {
[13:25:11.621]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:25:11.621]                   ...future.conditions[[length(...future.conditions) + 
[13:25:11.621]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:25:11.621]                   if (TRUE && !signal) {
[13:25:11.621]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:25:11.621]                     {
[13:25:11.621]                       inherits <- base::inherits
[13:25:11.621]                       invokeRestart <- base::invokeRestart
[13:25:11.621]                       is.null <- base::is.null
[13:25:11.621]                       muffled <- FALSE
[13:25:11.621]                       if (inherits(cond, "message")) {
[13:25:11.621]                         muffled <- grepl(pattern, "muffleMessage")
[13:25:11.621]                         if (muffled) 
[13:25:11.621]                           invokeRestart("muffleMessage")
[13:25:11.621]                       }
[13:25:11.621]                       else if (inherits(cond, "warning")) {
[13:25:11.621]                         muffled <- grepl(pattern, "muffleWarning")
[13:25:11.621]                         if (muffled) 
[13:25:11.621]                           invokeRestart("muffleWarning")
[13:25:11.621]                       }
[13:25:11.621]                       else if (inherits(cond, "condition")) {
[13:25:11.621]                         if (!is.null(pattern)) {
[13:25:11.621]                           computeRestarts <- base::computeRestarts
[13:25:11.621]                           grepl <- base::grepl
[13:25:11.621]                           restarts <- computeRestarts(cond)
[13:25:11.621]                           for (restart in restarts) {
[13:25:11.621]                             name <- restart$name
[13:25:11.621]                             if (is.null(name)) 
[13:25:11.621]                               next
[13:25:11.621]                             if (!grepl(pattern, name)) 
[13:25:11.621]                               next
[13:25:11.621]                             invokeRestart(restart)
[13:25:11.621]                             muffled <- TRUE
[13:25:11.621]                             break
[13:25:11.621]                           }
[13:25:11.621]                         }
[13:25:11.621]                       }
[13:25:11.621]                       invisible(muffled)
[13:25:11.621]                     }
[13:25:11.621]                     muffleCondition(cond, pattern = "^muffle")
[13:25:11.621]                   }
[13:25:11.621]                 }
[13:25:11.621]                 else {
[13:25:11.621]                   if (TRUE) {
[13:25:11.621]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:25:11.621]                     {
[13:25:11.621]                       inherits <- base::inherits
[13:25:11.621]                       invokeRestart <- base::invokeRestart
[13:25:11.621]                       is.null <- base::is.null
[13:25:11.621]                       muffled <- FALSE
[13:25:11.621]                       if (inherits(cond, "message")) {
[13:25:11.621]                         muffled <- grepl(pattern, "muffleMessage")
[13:25:11.621]                         if (muffled) 
[13:25:11.621]                           invokeRestart("muffleMessage")
[13:25:11.621]                       }
[13:25:11.621]                       else if (inherits(cond, "warning")) {
[13:25:11.621]                         muffled <- grepl(pattern, "muffleWarning")
[13:25:11.621]                         if (muffled) 
[13:25:11.621]                           invokeRestart("muffleWarning")
[13:25:11.621]                       }
[13:25:11.621]                       else if (inherits(cond, "condition")) {
[13:25:11.621]                         if (!is.null(pattern)) {
[13:25:11.621]                           computeRestarts <- base::computeRestarts
[13:25:11.621]                           grepl <- base::grepl
[13:25:11.621]                           restarts <- computeRestarts(cond)
[13:25:11.621]                           for (restart in restarts) {
[13:25:11.621]                             name <- restart$name
[13:25:11.621]                             if (is.null(name)) 
[13:25:11.621]                               next
[13:25:11.621]                             if (!grepl(pattern, name)) 
[13:25:11.621]                               next
[13:25:11.621]                             invokeRestart(restart)
[13:25:11.621]                             muffled <- TRUE
[13:25:11.621]                             break
[13:25:11.621]                           }
[13:25:11.621]                         }
[13:25:11.621]                       }
[13:25:11.621]                       invisible(muffled)
[13:25:11.621]                     }
[13:25:11.621]                     muffleCondition(cond, pattern = "^muffle")
[13:25:11.621]                   }
[13:25:11.621]                 }
[13:25:11.621]             }
[13:25:11.621]         }))
[13:25:11.621]     }, error = function(ex) {
[13:25:11.621]         base::structure(base::list(value = NULL, visible = NULL, 
[13:25:11.621]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:25:11.621]                 ...future.rng), started = ...future.startTime, 
[13:25:11.621]             finished = Sys.time(), session_uuid = NA_character_, 
[13:25:11.621]             version = "1.8"), class = "FutureResult")
[13:25:11.621]     }, finally = {
[13:25:11.621]         if (!identical(...future.workdir, getwd())) 
[13:25:11.621]             setwd(...future.workdir)
[13:25:11.621]         {
[13:25:11.621]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:25:11.621]                 ...future.oldOptions$nwarnings <- NULL
[13:25:11.621]             }
[13:25:11.621]             base::options(...future.oldOptions)
[13:25:11.621]             if (.Platform$OS.type == "windows") {
[13:25:11.621]                 old_names <- names(...future.oldEnvVars)
[13:25:11.621]                 envs <- base::Sys.getenv()
[13:25:11.621]                 names <- names(envs)
[13:25:11.621]                 common <- intersect(names, old_names)
[13:25:11.621]                 added <- setdiff(names, old_names)
[13:25:11.621]                 removed <- setdiff(old_names, names)
[13:25:11.621]                 changed <- common[...future.oldEnvVars[common] != 
[13:25:11.621]                   envs[common]]
[13:25:11.621]                 NAMES <- toupper(changed)
[13:25:11.621]                 args <- list()
[13:25:11.621]                 for (kk in seq_along(NAMES)) {
[13:25:11.621]                   name <- changed[[kk]]
[13:25:11.621]                   NAME <- NAMES[[kk]]
[13:25:11.621]                   if (name != NAME && is.element(NAME, old_names)) 
[13:25:11.621]                     next
[13:25:11.621]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:25:11.621]                 }
[13:25:11.621]                 NAMES <- toupper(added)
[13:25:11.621]                 for (kk in seq_along(NAMES)) {
[13:25:11.621]                   name <- added[[kk]]
[13:25:11.621]                   NAME <- NAMES[[kk]]
[13:25:11.621]                   if (name != NAME && is.element(NAME, old_names)) 
[13:25:11.621]                     next
[13:25:11.621]                   args[[name]] <- ""
[13:25:11.621]                 }
[13:25:11.621]                 NAMES <- toupper(removed)
[13:25:11.621]                 for (kk in seq_along(NAMES)) {
[13:25:11.621]                   name <- removed[[kk]]
[13:25:11.621]                   NAME <- NAMES[[kk]]
[13:25:11.621]                   if (name != NAME && is.element(NAME, old_names)) 
[13:25:11.621]                     next
[13:25:11.621]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:25:11.621]                 }
[13:25:11.621]                 if (length(args) > 0) 
[13:25:11.621]                   base::do.call(base::Sys.setenv, args = args)
[13:25:11.621]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:25:11.621]             }
[13:25:11.621]             else {
[13:25:11.621]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:25:11.621]             }
[13:25:11.621]             {
[13:25:11.621]                 if (base::length(...future.futureOptionsAdded) > 
[13:25:11.621]                   0L) {
[13:25:11.621]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:25:11.621]                   base::names(opts) <- ...future.futureOptionsAdded
[13:25:11.621]                   base::options(opts)
[13:25:11.621]                 }
[13:25:11.621]                 {
[13:25:11.621]                   {
[13:25:11.621]                     base::options(mc.cores = ...future.mc.cores.old)
[13:25:11.621]                     NULL
[13:25:11.621]                   }
[13:25:11.621]                   options(future.plan = NULL)
[13:25:11.621]                   if (is.na(NA_character_)) 
[13:25:11.621]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:25:11.621]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:25:11.621]                   future::plan(list(function (..., workers = availableCores(constraints = "multicore"), 
[13:25:11.621]                     envir = parent.frame()) 
[13:25:11.621]                   {
[13:25:11.621]                     default_workers <- missing(workers)
[13:25:11.621]                     if (is.function(workers)) 
[13:25:11.621]                       workers <- workers()
[13:25:11.621]                     workers <- structure(as.integer(workers), 
[13:25:11.621]                       class = class(workers))
[13:25:11.621]                     stop_if_not(is.finite(workers), workers >= 
[13:25:11.621]                       1L)
[13:25:11.621]                     if ((workers == 1L && !inherits(workers, 
[13:25:11.621]                       "AsIs")) || !supportsMulticore(warn = TRUE)) {
[13:25:11.621]                       if (default_workers) 
[13:25:11.621]                         supportsMulticore(warn = TRUE)
[13:25:11.621]                       return(sequential(..., envir = envir))
[13:25:11.621]                     }
[13:25:11.621]                     oopts <- options(mc.cores = workers)
[13:25:11.621]                     on.exit(options(oopts))
[13:25:11.621]                     future <- MulticoreFuture(..., workers = workers, 
[13:25:11.621]                       envir = envir)
[13:25:11.621]                     if (!future$lazy) 
[13:25:11.621]                       future <- run(future)
[13:25:11.621]                     invisible(future)
[13:25:11.621]                   }), .cleanup = FALSE, .init = FALSE)
[13:25:11.621]                 }
[13:25:11.621]             }
[13:25:11.621]         }
[13:25:11.621]     })
[13:25:11.621]     if (TRUE) {
[13:25:11.621]         base::sink(type = "output", split = FALSE)
[13:25:11.621]         if (FALSE) {
[13:25:11.621]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:25:11.621]         }
[13:25:11.621]         else {
[13:25:11.621]             ...future.result["stdout"] <- base::list(NULL)
[13:25:11.621]         }
[13:25:11.621]         base::close(...future.stdout)
[13:25:11.621]         ...future.stdout <- NULL
[13:25:11.621]     }
[13:25:11.621]     ...future.result$conditions <- ...future.conditions
[13:25:11.621]     ...future.result$finished <- base::Sys.time()
[13:25:11.621]     ...future.result
[13:25:11.621] }
[13:25:11.625] requestCore(): workers = 2
[13:25:11.628] MulticoreFuture started
[13:25:11.628] - Launch lazy future ... done
[13:25:11.629] run() for ‘MulticoreFuture’ ... done
[13:25:11.629] result() for MulticoreFuture ...
[13:25:11.629] plan(): Setting new future strategy stack:
[13:25:11.629] List of future strategies:
[13:25:11.629] 1. sequential:
[13:25:11.629]    - args: function (..., envir = parent.frame())
[13:25:11.629]    - tweaked: FALSE
[13:25:11.629]    - call: NULL
[13:25:11.630] plan(): nbrOfWorkers() = 1
[13:25:11.634] plan(): Setting new future strategy stack:
[13:25:11.634] List of future strategies:
[13:25:11.634] 1. multicore:
[13:25:11.634]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[13:25:11.634]    - tweaked: FALSE
[13:25:11.634]    - call: plan(strategy)
[13:25:11.640] plan(): nbrOfWorkers() = 2
[13:25:11.641] result() for MulticoreFuture ...
[13:25:11.641] result() for MulticoreFuture ... done
[13:25:11.641] result() for MulticoreFuture ... done
List of 11
 $ value       : int 42
 $ visible     : logi TRUE
 $ stdout      : NULL
 $ conditions  : list()
 $ rng         : logi FALSE
 $ globalenv   : NULL
 $ started     : POSIXct[1:1], format: "2025-01-07 13:25:11"
 $ finished    : POSIXct[1:1], format: "2025-01-07 13:25:11"
 $ session_uuid: chr "4330c4ee-c728-3b41-f5fd-120569db41f5"
  ..- attr(*, "source")=List of 5
  .. ..$ host  : Named chr "47b98e4ec3a9"
  .. .. ..- attr(*, "names")= chr "HOSTNAME"
  .. ..$ info  : Named chr [1:8] "Linux" "6.5.0-1025-azure" "#26~22.04.1-Ubuntu SMP Thu Jul 11 22:33:04 UTC 2024" "47b98e4ec3a9" ...
  .. .. ..- attr(*, "names")= chr [1:8] "sysname" "release" "version" "nodename" ...
  .. ..$ pid   : int 93531
  .. ..$ time  : POSIXct[1:1], format: "2025-01-07 13:25:11"
  .. ..$ random: int 2147483647
 $ r_info      :List of 4
  ..$ version      :Classes 'R_system_version', 'package_version', 'numeric_version'  hidden list of 1
  .. ..$ : int [1:3] 4 3 2
  ..$ os           : chr "unix"
  ..$ os_name      : chr "Linux"
  ..$ captures_utf8: logi TRUE
 $ version     : chr "1.8"
 - attr(*, "class")= chr "FutureResult"
[13:25:11.651] result() for MulticoreFuture ...
[13:25:11.651] result() for MulticoreFuture ... done
[13:25:11.652] result() for MulticoreFuture ...
[13:25:11.652] result() for MulticoreFuture ... done
[13:25:11.652] getGlobalsAndPackages() ...
[13:25:11.652] Searching for globals...
[13:25:11.659] - globals found: [9] ‘{’, ‘print’, ‘:’, ‘str’, ‘cat’, ‘letters’, ‘write.table’, ‘[’, ‘::’
[13:25:11.659] Searching for globals ... DONE
[13:25:11.659] Resolving globals: FALSE
[13:25:11.660] 
[13:25:11.660] - packages: [1] ‘utils’
[13:25:11.660] getGlobalsAndPackages() ... DONE
[13:25:11.660] run() for ‘Future’ ...
[13:25:11.660] - state: ‘created’
[13:25:11.661] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[13:25:11.665] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:25:11.665] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[13:25:11.665]   - Field: ‘label’
[13:25:11.665]   - Field: ‘local’
[13:25:11.665]   - Field: ‘owner’
[13:25:11.665]   - Field: ‘envir’
[13:25:11.666]   - Field: ‘workers’
[13:25:11.666]   - Field: ‘packages’
[13:25:11.666]   - Field: ‘gc’
[13:25:11.666]   - Field: ‘job’
[13:25:11.666]   - Field: ‘conditions’
[13:25:11.666]   - Field: ‘expr’
[13:25:11.666]   - Field: ‘uuid’
[13:25:11.666]   - Field: ‘seed’
[13:25:11.666]   - Field: ‘version’
[13:25:11.667]   - Field: ‘result’
[13:25:11.667]   - Field: ‘asynchronous’
[13:25:11.667]   - Field: ‘calls’
[13:25:11.667]   - Field: ‘globals’
[13:25:11.667]   - Field: ‘stdout’
[13:25:11.667]   - Field: ‘earlySignal’
[13:25:11.667]   - Field: ‘lazy’
[13:25:11.667]   - Field: ‘state’
[13:25:11.667] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[13:25:11.668] - Launch lazy future ...
[13:25:11.668] Packages needed by the future expression (n = 1): ‘utils’
[13:25:11.668] Packages needed by future strategies (n = 0): <none>
[13:25:11.669] {
[13:25:11.669]     {
[13:25:11.669]         {
[13:25:11.669]             ...future.startTime <- base::Sys.time()
[13:25:11.669]             {
[13:25:11.669]                 {
[13:25:11.669]                   {
[13:25:11.669]                     {
[13:25:11.669]                       {
[13:25:11.669]                         base::local({
[13:25:11.669]                           has_future <- base::requireNamespace("future", 
[13:25:11.669]                             quietly = TRUE)
[13:25:11.669]                           if (has_future) {
[13:25:11.669]                             ns <- base::getNamespace("future")
[13:25:11.669]                             version <- ns[[".package"]][["version"]]
[13:25:11.669]                             if (is.null(version)) 
[13:25:11.669]                               version <- utils::packageVersion("future")
[13:25:11.669]                           }
[13:25:11.669]                           else {
[13:25:11.669]                             version <- NULL
[13:25:11.669]                           }
[13:25:11.669]                           if (!has_future || version < "1.8.0") {
[13:25:11.669]                             info <- base::c(r_version = base::gsub("R version ", 
[13:25:11.669]                               "", base::R.version$version.string), 
[13:25:11.669]                               platform = base::sprintf("%s (%s-bit)", 
[13:25:11.669]                                 base::R.version$platform, 8 * 
[13:25:11.669]                                   base::.Machine$sizeof.pointer), 
[13:25:11.669]                               os = base::paste(base::Sys.info()[base::c("sysname", 
[13:25:11.669]                                 "release", "version")], collapse = " "), 
[13:25:11.669]                               hostname = base::Sys.info()[["nodename"]])
[13:25:11.669]                             info <- base::sprintf("%s: %s", base::names(info), 
[13:25:11.669]                               info)
[13:25:11.669]                             info <- base::paste(info, collapse = "; ")
[13:25:11.669]                             if (!has_future) {
[13:25:11.669]                               msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:25:11.669]                                 info)
[13:25:11.669]                             }
[13:25:11.669]                             else {
[13:25:11.669]                               msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:25:11.669]                                 info, version)
[13:25:11.669]                             }
[13:25:11.669]                             base::stop(msg)
[13:25:11.669]                           }
[13:25:11.669]                         })
[13:25:11.669]                       }
[13:25:11.669]                       ...future.mc.cores.old <- base::getOption("mc.cores")
[13:25:11.669]                       base::options(mc.cores = 1L)
[13:25:11.669]                     }
[13:25:11.669]                     base::local({
[13:25:11.669]                       for (pkg in "utils") {
[13:25:11.669]                         base::loadNamespace(pkg)
[13:25:11.669]                         base::library(pkg, character.only = TRUE)
[13:25:11.669]                       }
[13:25:11.669]                     })
[13:25:11.669]                   }
[13:25:11.669]                   options(future.plan = NULL)
[13:25:11.669]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:25:11.669]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:25:11.669]                 }
[13:25:11.669]                 ...future.workdir <- getwd()
[13:25:11.669]             }
[13:25:11.669]             ...future.oldOptions <- base::as.list(base::.Options)
[13:25:11.669]             ...future.oldEnvVars <- base::Sys.getenv()
[13:25:11.669]         }
[13:25:11.669]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:25:11.669]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:25:11.669]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:25:11.669]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:25:11.669]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:25:11.669]             future.stdout.windows.reencode = NULL, width = 80L)
[13:25:11.669]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:25:11.669]             base::names(...future.oldOptions))
[13:25:11.669]     }
[13:25:11.669]     if (FALSE) {
[13:25:11.669]     }
[13:25:11.669]     else {
[13:25:11.669]         if (FALSE) {
[13:25:11.669]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:25:11.669]                 open = "w")
[13:25:11.669]         }
[13:25:11.669]         else {
[13:25:11.669]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:25:11.669]                 windows = "NUL", "/dev/null"), open = "w")
[13:25:11.669]         }
[13:25:11.669]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:25:11.669]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:25:11.669]             base::sink(type = "output", split = FALSE)
[13:25:11.669]             base::close(...future.stdout)
[13:25:11.669]         }, add = TRUE)
[13:25:11.669]     }
[13:25:11.669]     ...future.frame <- base::sys.nframe()
[13:25:11.669]     ...future.conditions <- base::list()
[13:25:11.669]     ...future.rng <- base::globalenv()$.Random.seed
[13:25:11.669]     if (FALSE) {
[13:25:11.669]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:25:11.669]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:25:11.669]     }
[13:25:11.669]     ...future.result <- base::tryCatch({
[13:25:11.669]         base::withCallingHandlers({
[13:25:11.669]             ...future.value <- base::withVisible(base::local({
[13:25:11.669]                 withCallingHandlers({
[13:25:11.669]                   {
[13:25:11.669]                     print(1:50)
[13:25:11.669]                     str(1:50)
[13:25:11.669]                     cat(letters, sep = "-")
[13:25:11.669]                     cat(1:6, collapse = "\n")
[13:25:11.669]                     write.table(datasets::iris[1:10, ], sep = "\t")
[13:25:11.669]                     42L
[13:25:11.669]                   }
[13:25:11.669]                 }, immediateCondition = function(cond) {
[13:25:11.669]                   save_rds <- function (object, pathname, ...) 
[13:25:11.669]                   {
[13:25:11.669]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[13:25:11.669]                     if (file_test("-f", pathname_tmp)) {
[13:25:11.669]                       fi_tmp <- file.info(pathname_tmp)
[13:25:11.669]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[13:25:11.669]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:25:11.669]                         fi_tmp[["mtime"]])
[13:25:11.669]                     }
[13:25:11.669]                     tryCatch({
[13:25:11.669]                       saveRDS(object, file = pathname_tmp, ...)
[13:25:11.669]                     }, error = function(ex) {
[13:25:11.669]                       msg <- conditionMessage(ex)
[13:25:11.669]                       fi_tmp <- file.info(pathname_tmp)
[13:25:11.669]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[13:25:11.669]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:25:11.669]                         fi_tmp[["mtime"]], msg)
[13:25:11.669]                       ex$message <- msg
[13:25:11.669]                       stop(ex)
[13:25:11.669]                     })
[13:25:11.669]                     stopifnot(file_test("-f", pathname_tmp))
[13:25:11.669]                     res <- file.rename(from = pathname_tmp, to = pathname)
[13:25:11.669]                     if (!res || file_test("-f", pathname_tmp)) {
[13:25:11.669]                       fi_tmp <- file.info(pathname_tmp)
[13:25:11.669]                       fi <- file.info(pathname)
[13:25:11.669]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[13:25:11.669]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:25:11.669]                         fi_tmp[["mtime"]], sQuote(pathname), 
[13:25:11.669]                         fi[["size"]], fi[["mtime"]])
[13:25:11.669]                       stop(msg)
[13:25:11.669]                     }
[13:25:11.669]                     invisible(pathname)
[13:25:11.669]                   }
[13:25:11.669]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[13:25:11.669]                     rootPath = tempdir()) 
[13:25:11.669]                   {
[13:25:11.669]                     obj <- list(time = Sys.time(), condition = cond)
[13:25:11.669]                     file <- tempfile(pattern = class(cond)[1], 
[13:25:11.669]                       tmpdir = path, fileext = ".rds")
[13:25:11.669]                     save_rds(obj, file)
[13:25:11.669]                   }
[13:25:11.669]                   saveImmediateCondition(cond, path = "/tmp/Rtmp2TLbxL/.future/immediateConditions")
[13:25:11.669]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:25:11.669]                   {
[13:25:11.669]                     inherits <- base::inherits
[13:25:11.669]                     invokeRestart <- base::invokeRestart
[13:25:11.669]                     is.null <- base::is.null
[13:25:11.669]                     muffled <- FALSE
[13:25:11.669]                     if (inherits(cond, "message")) {
[13:25:11.669]                       muffled <- grepl(pattern, "muffleMessage")
[13:25:11.669]                       if (muffled) 
[13:25:11.669]                         invokeRestart("muffleMessage")
[13:25:11.669]                     }
[13:25:11.669]                     else if (inherits(cond, "warning")) {
[13:25:11.669]                       muffled <- grepl(pattern, "muffleWarning")
[13:25:11.669]                       if (muffled) 
[13:25:11.669]                         invokeRestart("muffleWarning")
[13:25:11.669]                     }
[13:25:11.669]                     else if (inherits(cond, "condition")) {
[13:25:11.669]                       if (!is.null(pattern)) {
[13:25:11.669]                         computeRestarts <- base::computeRestarts
[13:25:11.669]                         grepl <- base::grepl
[13:25:11.669]                         restarts <- computeRestarts(cond)
[13:25:11.669]                         for (restart in restarts) {
[13:25:11.669]                           name <- restart$name
[13:25:11.669]                           if (is.null(name)) 
[13:25:11.669]                             next
[13:25:11.669]                           if (!grepl(pattern, name)) 
[13:25:11.669]                             next
[13:25:11.669]                           invokeRestart(restart)
[13:25:11.669]                           muffled <- TRUE
[13:25:11.669]                           break
[13:25:11.669]                         }
[13:25:11.669]                       }
[13:25:11.669]                     }
[13:25:11.669]                     invisible(muffled)
[13:25:11.669]                   }
[13:25:11.669]                   muffleCondition(cond)
[13:25:11.669]                 })
[13:25:11.669]             }))
[13:25:11.669]             future::FutureResult(value = ...future.value$value, 
[13:25:11.669]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:25:11.669]                   ...future.rng), globalenv = if (FALSE) 
[13:25:11.669]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:25:11.669]                     ...future.globalenv.names))
[13:25:11.669]                 else NULL, started = ...future.startTime, version = "1.8")
[13:25:11.669]         }, condition = base::local({
[13:25:11.669]             c <- base::c
[13:25:11.669]             inherits <- base::inherits
[13:25:11.669]             invokeRestart <- base::invokeRestart
[13:25:11.669]             length <- base::length
[13:25:11.669]             list <- base::list
[13:25:11.669]             seq.int <- base::seq.int
[13:25:11.669]             signalCondition <- base::signalCondition
[13:25:11.669]             sys.calls <- base::sys.calls
[13:25:11.669]             `[[` <- base::`[[`
[13:25:11.669]             `+` <- base::`+`
[13:25:11.669]             `<<-` <- base::`<<-`
[13:25:11.669]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:25:11.669]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:25:11.669]                   3L)]
[13:25:11.669]             }
[13:25:11.669]             function(cond) {
[13:25:11.669]                 is_error <- inherits(cond, "error")
[13:25:11.669]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:25:11.669]                   NULL)
[13:25:11.669]                 if (is_error) {
[13:25:11.669]                   sessionInformation <- function() {
[13:25:11.669]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:25:11.669]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:25:11.669]                       search = base::search(), system = base::Sys.info())
[13:25:11.669]                   }
[13:25:11.669]                   ...future.conditions[[length(...future.conditions) + 
[13:25:11.669]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:25:11.669]                     cond$call), session = sessionInformation(), 
[13:25:11.669]                     timestamp = base::Sys.time(), signaled = 0L)
[13:25:11.669]                   signalCondition(cond)
[13:25:11.669]                 }
[13:25:11.669]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:25:11.669]                 "immediateCondition"))) {
[13:25:11.669]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:25:11.669]                   ...future.conditions[[length(...future.conditions) + 
[13:25:11.669]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:25:11.669]                   if (TRUE && !signal) {
[13:25:11.669]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:25:11.669]                     {
[13:25:11.669]                       inherits <- base::inherits
[13:25:11.669]                       invokeRestart <- base::invokeRestart
[13:25:11.669]                       is.null <- base::is.null
[13:25:11.669]                       muffled <- FALSE
[13:25:11.669]                       if (inherits(cond, "message")) {
[13:25:11.669]                         muffled <- grepl(pattern, "muffleMessage")
[13:25:11.669]                         if (muffled) 
[13:25:11.669]                           invokeRestart("muffleMessage")
[13:25:11.669]                       }
[13:25:11.669]                       else if (inherits(cond, "warning")) {
[13:25:11.669]                         muffled <- grepl(pattern, "muffleWarning")
[13:25:11.669]                         if (muffled) 
[13:25:11.669]                           invokeRestart("muffleWarning")
[13:25:11.669]                       }
[13:25:11.669]                       else if (inherits(cond, "condition")) {
[13:25:11.669]                         if (!is.null(pattern)) {
[13:25:11.669]                           computeRestarts <- base::computeRestarts
[13:25:11.669]                           grepl <- base::grepl
[13:25:11.669]                           restarts <- computeRestarts(cond)
[13:25:11.669]                           for (restart in restarts) {
[13:25:11.669]                             name <- restart$name
[13:25:11.669]                             if (is.null(name)) 
[13:25:11.669]                               next
[13:25:11.669]                             if (!grepl(pattern, name)) 
[13:25:11.669]                               next
[13:25:11.669]                             invokeRestart(restart)
[13:25:11.669]                             muffled <- TRUE
[13:25:11.669]                             break
[13:25:11.669]                           }
[13:25:11.669]                         }
[13:25:11.669]                       }
[13:25:11.669]                       invisible(muffled)
[13:25:11.669]                     }
[13:25:11.669]                     muffleCondition(cond, pattern = "^muffle")
[13:25:11.669]                   }
[13:25:11.669]                 }
[13:25:11.669]                 else {
[13:25:11.669]                   if (TRUE) {
[13:25:11.669]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:25:11.669]                     {
[13:25:11.669]                       inherits <- base::inherits
[13:25:11.669]                       invokeRestart <- base::invokeRestart
[13:25:11.669]                       is.null <- base::is.null
[13:25:11.669]                       muffled <- FALSE
[13:25:11.669]                       if (inherits(cond, "message")) {
[13:25:11.669]                         muffled <- grepl(pattern, "muffleMessage")
[13:25:11.669]                         if (muffled) 
[13:25:11.669]                           invokeRestart("muffleMessage")
[13:25:11.669]                       }
[13:25:11.669]                       else if (inherits(cond, "warning")) {
[13:25:11.669]                         muffled <- grepl(pattern, "muffleWarning")
[13:25:11.669]                         if (muffled) 
[13:25:11.669]                           invokeRestart("muffleWarning")
[13:25:11.669]                       }
[13:25:11.669]                       else if (inherits(cond, "condition")) {
[13:25:11.669]                         if (!is.null(pattern)) {
[13:25:11.669]                           computeRestarts <- base::computeRestarts
[13:25:11.669]                           grepl <- base::grepl
[13:25:11.669]                           restarts <- computeRestarts(cond)
[13:25:11.669]                           for (restart in restarts) {
[13:25:11.669]                             name <- restart$name
[13:25:11.669]                             if (is.null(name)) 
[13:25:11.669]                               next
[13:25:11.669]                             if (!grepl(pattern, name)) 
[13:25:11.669]                               next
[13:25:11.669]                             invokeRestart(restart)
[13:25:11.669]                             muffled <- TRUE
[13:25:11.669]                             break
[13:25:11.669]                           }
[13:25:11.669]                         }
[13:25:11.669]                       }
[13:25:11.669]                       invisible(muffled)
[13:25:11.669]                     }
[13:25:11.669]                     muffleCondition(cond, pattern = "^muffle")
[13:25:11.669]                   }
[13:25:11.669]                 }
[13:25:11.669]             }
[13:25:11.669]         }))
[13:25:11.669]     }, error = function(ex) {
[13:25:11.669]         base::structure(base::list(value = NULL, visible = NULL, 
[13:25:11.669]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:25:11.669]                 ...future.rng), started = ...future.startTime, 
[13:25:11.669]             finished = Sys.time(), session_uuid = NA_character_, 
[13:25:11.669]             version = "1.8"), class = "FutureResult")
[13:25:11.669]     }, finally = {
[13:25:11.669]         if (!identical(...future.workdir, getwd())) 
[13:25:11.669]             setwd(...future.workdir)
[13:25:11.669]         {
[13:25:11.669]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:25:11.669]                 ...future.oldOptions$nwarnings <- NULL
[13:25:11.669]             }
[13:25:11.669]             base::options(...future.oldOptions)
[13:25:11.669]             if (.Platform$OS.type == "windows") {
[13:25:11.669]                 old_names <- names(...future.oldEnvVars)
[13:25:11.669]                 envs <- base::Sys.getenv()
[13:25:11.669]                 names <- names(envs)
[13:25:11.669]                 common <- intersect(names, old_names)
[13:25:11.669]                 added <- setdiff(names, old_names)
[13:25:11.669]                 removed <- setdiff(old_names, names)
[13:25:11.669]                 changed <- common[...future.oldEnvVars[common] != 
[13:25:11.669]                   envs[common]]
[13:25:11.669]                 NAMES <- toupper(changed)
[13:25:11.669]                 args <- list()
[13:25:11.669]                 for (kk in seq_along(NAMES)) {
[13:25:11.669]                   name <- changed[[kk]]
[13:25:11.669]                   NAME <- NAMES[[kk]]
[13:25:11.669]                   if (name != NAME && is.element(NAME, old_names)) 
[13:25:11.669]                     next
[13:25:11.669]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:25:11.669]                 }
[13:25:11.669]                 NAMES <- toupper(added)
[13:25:11.669]                 for (kk in seq_along(NAMES)) {
[13:25:11.669]                   name <- added[[kk]]
[13:25:11.669]                   NAME <- NAMES[[kk]]
[13:25:11.669]                   if (name != NAME && is.element(NAME, old_names)) 
[13:25:11.669]                     next
[13:25:11.669]                   args[[name]] <- ""
[13:25:11.669]                 }
[13:25:11.669]                 NAMES <- toupper(removed)
[13:25:11.669]                 for (kk in seq_along(NAMES)) {
[13:25:11.669]                   name <- removed[[kk]]
[13:25:11.669]                   NAME <- NAMES[[kk]]
[13:25:11.669]                   if (name != NAME && is.element(NAME, old_names)) 
[13:25:11.669]                     next
[13:25:11.669]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:25:11.669]                 }
[13:25:11.669]                 if (length(args) > 0) 
[13:25:11.669]                   base::do.call(base::Sys.setenv, args = args)
[13:25:11.669]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:25:11.669]             }
[13:25:11.669]             else {
[13:25:11.669]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:25:11.669]             }
[13:25:11.669]             {
[13:25:11.669]                 if (base::length(...future.futureOptionsAdded) > 
[13:25:11.669]                   0L) {
[13:25:11.669]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:25:11.669]                   base::names(opts) <- ...future.futureOptionsAdded
[13:25:11.669]                   base::options(opts)
[13:25:11.669]                 }
[13:25:11.669]                 {
[13:25:11.669]                   {
[13:25:11.669]                     base::options(mc.cores = ...future.mc.cores.old)
[13:25:11.669]                     NULL
[13:25:11.669]                   }
[13:25:11.669]                   options(future.plan = NULL)
[13:25:11.669]                   if (is.na(NA_character_)) 
[13:25:11.669]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:25:11.669]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:25:11.669]                   future::plan(list(function (..., workers = availableCores(constraints = "multicore"), 
[13:25:11.669]                     envir = parent.frame()) 
[13:25:11.669]                   {
[13:25:11.669]                     default_workers <- missing(workers)
[13:25:11.669]                     if (is.function(workers)) 
[13:25:11.669]                       workers <- workers()
[13:25:11.669]                     workers <- structure(as.integer(workers), 
[13:25:11.669]                       class = class(workers))
[13:25:11.669]                     stop_if_not(is.finite(workers), workers >= 
[13:25:11.669]                       1L)
[13:25:11.669]                     if ((workers == 1L && !inherits(workers, 
[13:25:11.669]                       "AsIs")) || !supportsMulticore(warn = TRUE)) {
[13:25:11.669]                       if (default_workers) 
[13:25:11.669]                         supportsMulticore(warn = TRUE)
[13:25:11.669]                       return(sequential(..., envir = envir))
[13:25:11.669]                     }
[13:25:11.669]                     oopts <- options(mc.cores = workers)
[13:25:11.669]                     on.exit(options(oopts))
[13:25:11.669]                     future <- MulticoreFuture(..., workers = workers, 
[13:25:11.669]                       envir = envir)
[13:25:11.669]                     if (!future$lazy) 
[13:25:11.669]                       future <- run(future)
[13:25:11.669]                     invisible(future)
[13:25:11.669]                   }), .cleanup = FALSE, .init = FALSE)
[13:25:11.669]                 }
[13:25:11.669]             }
[13:25:11.669]         }
[13:25:11.669]     })
[13:25:11.669]     if (TRUE) {
[13:25:11.669]         base::sink(type = "output", split = FALSE)
[13:25:11.669]         if (FALSE) {
[13:25:11.669]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:25:11.669]         }
[13:25:11.669]         else {
[13:25:11.669]             ...future.result["stdout"] <- base::list(NULL)
[13:25:11.669]         }
[13:25:11.669]         base::close(...future.stdout)
[13:25:11.669]         ...future.stdout <- NULL
[13:25:11.669]     }
[13:25:11.669]     ...future.result$conditions <- ...future.conditions
[13:25:11.669]     ...future.result$finished <- base::Sys.time()
[13:25:11.669]     ...future.result
[13:25:11.669] }
[13:25:11.671] requestCore(): workers = 2
[13:25:11.673] MulticoreFuture started
[13:25:11.674] - Launch lazy future ... done
[13:25:11.674] run() for ‘MulticoreFuture’ ... done
[13:25:11.675] result() for MulticoreFuture ...
[13:25:11.675] plan(): Setting new future strategy stack:
[13:25:11.675] List of future strategies:
[13:25:11.675] 1. sequential:
[13:25:11.675]    - args: function (..., envir = parent.frame())
[13:25:11.675]    - tweaked: FALSE
[13:25:11.675]    - call: NULL
[13:25:11.676] plan(): nbrOfWorkers() = 1
[13:25:11.679] plan(): Setting new future strategy stack:
[13:25:11.679] List of future strategies:
[13:25:11.679] 1. multicore:
[13:25:11.679]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[13:25:11.679]    - tweaked: FALSE
[13:25:11.679]    - call: plan(strategy)
[13:25:11.685] plan(): nbrOfWorkers() = 2
[13:25:11.685] result() for MulticoreFuture ...
[13:25:11.686] result() for MulticoreFuture ... done
[13:25:11.686] result() for MulticoreFuture ... done
[13:25:11.686] result() for MulticoreFuture ...
[13:25:11.686] result() for MulticoreFuture ... done
- stdout = structure(TRUE, drop = TRUE)
[13:25:11.686] getGlobalsAndPackages() ...
[13:25:11.687] Searching for globals...
[13:25:11.687] - globals found: [1] ‘print’
[13:25:11.688] Searching for globals ... DONE
[13:25:11.688] Resolving globals: FALSE
[13:25:11.688] 
[13:25:11.688] 
[13:25:11.688] getGlobalsAndPackages() ... DONE
[13:25:11.689] run() for ‘Future’ ...
[13:25:11.689] - state: ‘created’
[13:25:11.689] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[13:25:11.693] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:25:11.693] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[13:25:11.693]   - Field: ‘label’
[13:25:11.694]   - Field: ‘local’
[13:25:11.694]   - Field: ‘owner’
[13:25:11.694]   - Field: ‘envir’
[13:25:11.694]   - Field: ‘workers’
[13:25:11.694]   - Field: ‘packages’
[13:25:11.694]   - Field: ‘gc’
[13:25:11.694]   - Field: ‘job’
[13:25:11.694]   - Field: ‘conditions’
[13:25:11.695]   - Field: ‘expr’
[13:25:11.695]   - Field: ‘uuid’
[13:25:11.695]   - Field: ‘seed’
[13:25:11.695]   - Field: ‘version’
[13:25:11.695]   - Field: ‘result’
[13:25:11.695]   - Field: ‘asynchronous’
[13:25:11.695]   - Field: ‘calls’
[13:25:11.695]   - Field: ‘globals’
[13:25:11.695]   - Field: ‘stdout’
[13:25:11.696]   - Field: ‘earlySignal’
[13:25:11.696]   - Field: ‘lazy’
[13:25:11.696]   - Field: ‘state’
[13:25:11.696] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[13:25:11.696] - Launch lazy future ...
[13:25:11.696] Packages needed by the future expression (n = 0): <none>
[13:25:11.697] Packages needed by future strategies (n = 0): <none>
[13:25:11.697] {
[13:25:11.697]     {
[13:25:11.697]         {
[13:25:11.697]             ...future.startTime <- base::Sys.time()
[13:25:11.697]             {
[13:25:11.697]                 {
[13:25:11.697]                   {
[13:25:11.697]                     {
[13:25:11.697]                       base::local({
[13:25:11.697]                         has_future <- base::requireNamespace("future", 
[13:25:11.697]                           quietly = TRUE)
[13:25:11.697]                         if (has_future) {
[13:25:11.697]                           ns <- base::getNamespace("future")
[13:25:11.697]                           version <- ns[[".package"]][["version"]]
[13:25:11.697]                           if (is.null(version)) 
[13:25:11.697]                             version <- utils::packageVersion("future")
[13:25:11.697]                         }
[13:25:11.697]                         else {
[13:25:11.697]                           version <- NULL
[13:25:11.697]                         }
[13:25:11.697]                         if (!has_future || version < "1.8.0") {
[13:25:11.697]                           info <- base::c(r_version = base::gsub("R version ", 
[13:25:11.697]                             "", base::R.version$version.string), 
[13:25:11.697]                             platform = base::sprintf("%s (%s-bit)", 
[13:25:11.697]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:25:11.697]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:25:11.697]                               "release", "version")], collapse = " "), 
[13:25:11.697]                             hostname = base::Sys.info()[["nodename"]])
[13:25:11.697]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:25:11.697]                             info)
[13:25:11.697]                           info <- base::paste(info, collapse = "; ")
[13:25:11.697]                           if (!has_future) {
[13:25:11.697]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:25:11.697]                               info)
[13:25:11.697]                           }
[13:25:11.697]                           else {
[13:25:11.697]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:25:11.697]                               info, version)
[13:25:11.697]                           }
[13:25:11.697]                           base::stop(msg)
[13:25:11.697]                         }
[13:25:11.697]                       })
[13:25:11.697]                     }
[13:25:11.697]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[13:25:11.697]                     base::options(mc.cores = 1L)
[13:25:11.697]                   }
[13:25:11.697]                   options(future.plan = NULL)
[13:25:11.697]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:25:11.697]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:25:11.697]                 }
[13:25:11.697]                 ...future.workdir <- getwd()
[13:25:11.697]             }
[13:25:11.697]             ...future.oldOptions <- base::as.list(base::.Options)
[13:25:11.697]             ...future.oldEnvVars <- base::Sys.getenv()
[13:25:11.697]         }
[13:25:11.697]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:25:11.697]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:25:11.697]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:25:11.697]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:25:11.697]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:25:11.697]             future.stdout.windows.reencode = NULL, width = 80L)
[13:25:11.697]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:25:11.697]             base::names(...future.oldOptions))
[13:25:11.697]     }
[13:25:11.697]     if (FALSE) {
[13:25:11.697]     }
[13:25:11.697]     else {
[13:25:11.697]         if (TRUE) {
[13:25:11.697]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:25:11.697]                 open = "w")
[13:25:11.697]         }
[13:25:11.697]         else {
[13:25:11.697]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:25:11.697]                 windows = "NUL", "/dev/null"), open = "w")
[13:25:11.697]         }
[13:25:11.697]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:25:11.697]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:25:11.697]             base::sink(type = "output", split = FALSE)
[13:25:11.697]             base::close(...future.stdout)
[13:25:11.697]         }, add = TRUE)
[13:25:11.697]     }
[13:25:11.697]     ...future.frame <- base::sys.nframe()
[13:25:11.697]     ...future.conditions <- base::list()
[13:25:11.697]     ...future.rng <- base::globalenv()$.Random.seed
[13:25:11.697]     if (FALSE) {
[13:25:11.697]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:25:11.697]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:25:11.697]     }
[13:25:11.697]     ...future.result <- base::tryCatch({
[13:25:11.697]         base::withCallingHandlers({
[13:25:11.697]             ...future.value <- base::withVisible(base::local({
[13:25:11.697]                 withCallingHandlers({
[13:25:11.697]                   print(42)
[13:25:11.697]                 }, immediateCondition = function(cond) {
[13:25:11.697]                   save_rds <- function (object, pathname, ...) 
[13:25:11.697]                   {
[13:25:11.697]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[13:25:11.697]                     if (file_test("-f", pathname_tmp)) {
[13:25:11.697]                       fi_tmp <- file.info(pathname_tmp)
[13:25:11.697]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[13:25:11.697]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:25:11.697]                         fi_tmp[["mtime"]])
[13:25:11.697]                     }
[13:25:11.697]                     tryCatch({
[13:25:11.697]                       saveRDS(object, file = pathname_tmp, ...)
[13:25:11.697]                     }, error = function(ex) {
[13:25:11.697]                       msg <- conditionMessage(ex)
[13:25:11.697]                       fi_tmp <- file.info(pathname_tmp)
[13:25:11.697]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[13:25:11.697]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:25:11.697]                         fi_tmp[["mtime"]], msg)
[13:25:11.697]                       ex$message <- msg
[13:25:11.697]                       stop(ex)
[13:25:11.697]                     })
[13:25:11.697]                     stopifnot(file_test("-f", pathname_tmp))
[13:25:11.697]                     res <- file.rename(from = pathname_tmp, to = pathname)
[13:25:11.697]                     if (!res || file_test("-f", pathname_tmp)) {
[13:25:11.697]                       fi_tmp <- file.info(pathname_tmp)
[13:25:11.697]                       fi <- file.info(pathname)
[13:25:11.697]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[13:25:11.697]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:25:11.697]                         fi_tmp[["mtime"]], sQuote(pathname), 
[13:25:11.697]                         fi[["size"]], fi[["mtime"]])
[13:25:11.697]                       stop(msg)
[13:25:11.697]                     }
[13:25:11.697]                     invisible(pathname)
[13:25:11.697]                   }
[13:25:11.697]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[13:25:11.697]                     rootPath = tempdir()) 
[13:25:11.697]                   {
[13:25:11.697]                     obj <- list(time = Sys.time(), condition = cond)
[13:25:11.697]                     file <- tempfile(pattern = class(cond)[1], 
[13:25:11.697]                       tmpdir = path, fileext = ".rds")
[13:25:11.697]                     save_rds(obj, file)
[13:25:11.697]                   }
[13:25:11.697]                   saveImmediateCondition(cond, path = "/tmp/Rtmp2TLbxL/.future/immediateConditions")
[13:25:11.697]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:25:11.697]                   {
[13:25:11.697]                     inherits <- base::inherits
[13:25:11.697]                     invokeRestart <- base::invokeRestart
[13:25:11.697]                     is.null <- base::is.null
[13:25:11.697]                     muffled <- FALSE
[13:25:11.697]                     if (inherits(cond, "message")) {
[13:25:11.697]                       muffled <- grepl(pattern, "muffleMessage")
[13:25:11.697]                       if (muffled) 
[13:25:11.697]                         invokeRestart("muffleMessage")
[13:25:11.697]                     }
[13:25:11.697]                     else if (inherits(cond, "warning")) {
[13:25:11.697]                       muffled <- grepl(pattern, "muffleWarning")
[13:25:11.697]                       if (muffled) 
[13:25:11.697]                         invokeRestart("muffleWarning")
[13:25:11.697]                     }
[13:25:11.697]                     else if (inherits(cond, "condition")) {
[13:25:11.697]                       if (!is.null(pattern)) {
[13:25:11.697]                         computeRestarts <- base::computeRestarts
[13:25:11.697]                         grepl <- base::grepl
[13:25:11.697]                         restarts <- computeRestarts(cond)
[13:25:11.697]                         for (restart in restarts) {
[13:25:11.697]                           name <- restart$name
[13:25:11.697]                           if (is.null(name)) 
[13:25:11.697]                             next
[13:25:11.697]                           if (!grepl(pattern, name)) 
[13:25:11.697]                             next
[13:25:11.697]                           invokeRestart(restart)
[13:25:11.697]                           muffled <- TRUE
[13:25:11.697]                           break
[13:25:11.697]                         }
[13:25:11.697]                       }
[13:25:11.697]                     }
[13:25:11.697]                     invisible(muffled)
[13:25:11.697]                   }
[13:25:11.697]                   muffleCondition(cond)
[13:25:11.697]                 })
[13:25:11.697]             }))
[13:25:11.697]             future::FutureResult(value = ...future.value$value, 
[13:25:11.697]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:25:11.697]                   ...future.rng), globalenv = if (FALSE) 
[13:25:11.697]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:25:11.697]                     ...future.globalenv.names))
[13:25:11.697]                 else NULL, started = ...future.startTime, version = "1.8")
[13:25:11.697]         }, condition = base::local({
[13:25:11.697]             c <- base::c
[13:25:11.697]             inherits <- base::inherits
[13:25:11.697]             invokeRestart <- base::invokeRestart
[13:25:11.697]             length <- base::length
[13:25:11.697]             list <- base::list
[13:25:11.697]             seq.int <- base::seq.int
[13:25:11.697]             signalCondition <- base::signalCondition
[13:25:11.697]             sys.calls <- base::sys.calls
[13:25:11.697]             `[[` <- base::`[[`
[13:25:11.697]             `+` <- base::`+`
[13:25:11.697]             `<<-` <- base::`<<-`
[13:25:11.697]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:25:11.697]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:25:11.697]                   3L)]
[13:25:11.697]             }
[13:25:11.697]             function(cond) {
[13:25:11.697]                 is_error <- inherits(cond, "error")
[13:25:11.697]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:25:11.697]                   NULL)
[13:25:11.697]                 if (is_error) {
[13:25:11.697]                   sessionInformation <- function() {
[13:25:11.697]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:25:11.697]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:25:11.697]                       search = base::search(), system = base::Sys.info())
[13:25:11.697]                   }
[13:25:11.697]                   ...future.conditions[[length(...future.conditions) + 
[13:25:11.697]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:25:11.697]                     cond$call), session = sessionInformation(), 
[13:25:11.697]                     timestamp = base::Sys.time(), signaled = 0L)
[13:25:11.697]                   signalCondition(cond)
[13:25:11.697]                 }
[13:25:11.697]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:25:11.697]                 "immediateCondition"))) {
[13:25:11.697]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:25:11.697]                   ...future.conditions[[length(...future.conditions) + 
[13:25:11.697]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:25:11.697]                   if (TRUE && !signal) {
[13:25:11.697]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:25:11.697]                     {
[13:25:11.697]                       inherits <- base::inherits
[13:25:11.697]                       invokeRestart <- base::invokeRestart
[13:25:11.697]                       is.null <- base::is.null
[13:25:11.697]                       muffled <- FALSE
[13:25:11.697]                       if (inherits(cond, "message")) {
[13:25:11.697]                         muffled <- grepl(pattern, "muffleMessage")
[13:25:11.697]                         if (muffled) 
[13:25:11.697]                           invokeRestart("muffleMessage")
[13:25:11.697]                       }
[13:25:11.697]                       else if (inherits(cond, "warning")) {
[13:25:11.697]                         muffled <- grepl(pattern, "muffleWarning")
[13:25:11.697]                         if (muffled) 
[13:25:11.697]                           invokeRestart("muffleWarning")
[13:25:11.697]                       }
[13:25:11.697]                       else if (inherits(cond, "condition")) {
[13:25:11.697]                         if (!is.null(pattern)) {
[13:25:11.697]                           computeRestarts <- base::computeRestarts
[13:25:11.697]                           grepl <- base::grepl
[13:25:11.697]                           restarts <- computeRestarts(cond)
[13:25:11.697]                           for (restart in restarts) {
[13:25:11.697]                             name <- restart$name
[13:25:11.697]                             if (is.null(name)) 
[13:25:11.697]                               next
[13:25:11.697]                             if (!grepl(pattern, name)) 
[13:25:11.697]                               next
[13:25:11.697]                             invokeRestart(restart)
[13:25:11.697]                             muffled <- TRUE
[13:25:11.697]                             break
[13:25:11.697]                           }
[13:25:11.697]                         }
[13:25:11.697]                       }
[13:25:11.697]                       invisible(muffled)
[13:25:11.697]                     }
[13:25:11.697]                     muffleCondition(cond, pattern = "^muffle")
[13:25:11.697]                   }
[13:25:11.697]                 }
[13:25:11.697]                 else {
[13:25:11.697]                   if (TRUE) {
[13:25:11.697]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:25:11.697]                     {
[13:25:11.697]                       inherits <- base::inherits
[13:25:11.697]                       invokeRestart <- base::invokeRestart
[13:25:11.697]                       is.null <- base::is.null
[13:25:11.697]                       muffled <- FALSE
[13:25:11.697]                       if (inherits(cond, "message")) {
[13:25:11.697]                         muffled <- grepl(pattern, "muffleMessage")
[13:25:11.697]                         if (muffled) 
[13:25:11.697]                           invokeRestart("muffleMessage")
[13:25:11.697]                       }
[13:25:11.697]                       else if (inherits(cond, "warning")) {
[13:25:11.697]                         muffled <- grepl(pattern, "muffleWarning")
[13:25:11.697]                         if (muffled) 
[13:25:11.697]                           invokeRestart("muffleWarning")
[13:25:11.697]                       }
[13:25:11.697]                       else if (inherits(cond, "condition")) {
[13:25:11.697]                         if (!is.null(pattern)) {
[13:25:11.697]                           computeRestarts <- base::computeRestarts
[13:25:11.697]                           grepl <- base::grepl
[13:25:11.697]                           restarts <- computeRestarts(cond)
[13:25:11.697]                           for (restart in restarts) {
[13:25:11.697]                             name <- restart$name
[13:25:11.697]                             if (is.null(name)) 
[13:25:11.697]                               next
[13:25:11.697]                             if (!grepl(pattern, name)) 
[13:25:11.697]                               next
[13:25:11.697]                             invokeRestart(restart)
[13:25:11.697]                             muffled <- TRUE
[13:25:11.697]                             break
[13:25:11.697]                           }
[13:25:11.697]                         }
[13:25:11.697]                       }
[13:25:11.697]                       invisible(muffled)
[13:25:11.697]                     }
[13:25:11.697]                     muffleCondition(cond, pattern = "^muffle")
[13:25:11.697]                   }
[13:25:11.697]                 }
[13:25:11.697]             }
[13:25:11.697]         }))
[13:25:11.697]     }, error = function(ex) {
[13:25:11.697]         base::structure(base::list(value = NULL, visible = NULL, 
[13:25:11.697]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:25:11.697]                 ...future.rng), started = ...future.startTime, 
[13:25:11.697]             finished = Sys.time(), session_uuid = NA_character_, 
[13:25:11.697]             version = "1.8"), class = "FutureResult")
[13:25:11.697]     }, finally = {
[13:25:11.697]         if (!identical(...future.workdir, getwd())) 
[13:25:11.697]             setwd(...future.workdir)
[13:25:11.697]         {
[13:25:11.697]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:25:11.697]                 ...future.oldOptions$nwarnings <- NULL
[13:25:11.697]             }
[13:25:11.697]             base::options(...future.oldOptions)
[13:25:11.697]             if (.Platform$OS.type == "windows") {
[13:25:11.697]                 old_names <- names(...future.oldEnvVars)
[13:25:11.697]                 envs <- base::Sys.getenv()
[13:25:11.697]                 names <- names(envs)
[13:25:11.697]                 common <- intersect(names, old_names)
[13:25:11.697]                 added <- setdiff(names, old_names)
[13:25:11.697]                 removed <- setdiff(old_names, names)
[13:25:11.697]                 changed <- common[...future.oldEnvVars[common] != 
[13:25:11.697]                   envs[common]]
[13:25:11.697]                 NAMES <- toupper(changed)
[13:25:11.697]                 args <- list()
[13:25:11.697]                 for (kk in seq_along(NAMES)) {
[13:25:11.697]                   name <- changed[[kk]]
[13:25:11.697]                   NAME <- NAMES[[kk]]
[13:25:11.697]                   if (name != NAME && is.element(NAME, old_names)) 
[13:25:11.697]                     next
[13:25:11.697]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:25:11.697]                 }
[13:25:11.697]                 NAMES <- toupper(added)
[13:25:11.697]                 for (kk in seq_along(NAMES)) {
[13:25:11.697]                   name <- added[[kk]]
[13:25:11.697]                   NAME <- NAMES[[kk]]
[13:25:11.697]                   if (name != NAME && is.element(NAME, old_names)) 
[13:25:11.697]                     next
[13:25:11.697]                   args[[name]] <- ""
[13:25:11.697]                 }
[13:25:11.697]                 NAMES <- toupper(removed)
[13:25:11.697]                 for (kk in seq_along(NAMES)) {
[13:25:11.697]                   name <- removed[[kk]]
[13:25:11.697]                   NAME <- NAMES[[kk]]
[13:25:11.697]                   if (name != NAME && is.element(NAME, old_names)) 
[13:25:11.697]                     next
[13:25:11.697]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:25:11.697]                 }
[13:25:11.697]                 if (length(args) > 0) 
[13:25:11.697]                   base::do.call(base::Sys.setenv, args = args)
[13:25:11.697]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:25:11.697]             }
[13:25:11.697]             else {
[13:25:11.697]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:25:11.697]             }
[13:25:11.697]             {
[13:25:11.697]                 if (base::length(...future.futureOptionsAdded) > 
[13:25:11.697]                   0L) {
[13:25:11.697]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:25:11.697]                   base::names(opts) <- ...future.futureOptionsAdded
[13:25:11.697]                   base::options(opts)
[13:25:11.697]                 }
[13:25:11.697]                 {
[13:25:11.697]                   {
[13:25:11.697]                     base::options(mc.cores = ...future.mc.cores.old)
[13:25:11.697]                     NULL
[13:25:11.697]                   }
[13:25:11.697]                   options(future.plan = NULL)
[13:25:11.697]                   if (is.na(NA_character_)) 
[13:25:11.697]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:25:11.697]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:25:11.697]                   future::plan(list(function (..., workers = availableCores(constraints = "multicore"), 
[13:25:11.697]                     envir = parent.frame()) 
[13:25:11.697]                   {
[13:25:11.697]                     default_workers <- missing(workers)
[13:25:11.697]                     if (is.function(workers)) 
[13:25:11.697]                       workers <- workers()
[13:25:11.697]                     workers <- structure(as.integer(workers), 
[13:25:11.697]                       class = class(workers))
[13:25:11.697]                     stop_if_not(is.finite(workers), workers >= 
[13:25:11.697]                       1L)
[13:25:11.697]                     if ((workers == 1L && !inherits(workers, 
[13:25:11.697]                       "AsIs")) || !supportsMulticore(warn = TRUE)) {
[13:25:11.697]                       if (default_workers) 
[13:25:11.697]                         supportsMulticore(warn = TRUE)
[13:25:11.697]                       return(sequential(..., envir = envir))
[13:25:11.697]                     }
[13:25:11.697]                     oopts <- options(mc.cores = workers)
[13:25:11.697]                     on.exit(options(oopts))
[13:25:11.697]                     future <- MulticoreFuture(..., workers = workers, 
[13:25:11.697]                       envir = envir)
[13:25:11.697]                     if (!future$lazy) 
[13:25:11.697]                       future <- run(future)
[13:25:11.697]                     invisible(future)
[13:25:11.697]                   }), .cleanup = FALSE, .init = FALSE)
[13:25:11.697]                 }
[13:25:11.697]             }
[13:25:11.697]         }
[13:25:11.697]     })
[13:25:11.697]     if (TRUE) {
[13:25:11.697]         base::sink(type = "output", split = FALSE)
[13:25:11.697]         if (TRUE) {
[13:25:11.697]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:25:11.697]         }
[13:25:11.697]         else {
[13:25:11.697]             ...future.result["stdout"] <- base::list(NULL)
[13:25:11.697]         }
[13:25:11.697]         base::close(...future.stdout)
[13:25:11.697]         ...future.stdout <- NULL
[13:25:11.697]     }
[13:25:11.697]     ...future.result$conditions <- ...future.conditions
[13:25:11.697]     ...future.result$finished <- base::Sys.time()
[13:25:11.697]     ...future.result
[13:25:11.697] }
[13:25:11.700] requestCore(): workers = 2
[13:25:11.702] MulticoreFuture started
[13:25:11.702] - Launch lazy future ... done
[13:25:11.702] run() for ‘MulticoreFuture’ ... done
[13:25:11.703] result() for MulticoreFuture ...
[13:25:11.703] plan(): Setting new future strategy stack:
[13:25:11.703] List of future strategies:
[13:25:11.703] 1. sequential:
[13:25:11.703]    - args: function (..., envir = parent.frame())
[13:25:11.703]    - tweaked: FALSE
[13:25:11.703]    - call: NULL
[13:25:11.704] plan(): nbrOfWorkers() = 1
[13:25:11.706] plan(): Setting new future strategy stack:
[13:25:11.706] List of future strategies:
[13:25:11.706] 1. multicore:
[13:25:11.706]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[13:25:11.706]    - tweaked: FALSE
[13:25:11.706]    - call: plan(strategy)
[13:25:11.712] plan(): nbrOfWorkers() = 2
[13:25:11.712] result() for MulticoreFuture ...
[13:25:11.713] result() for MulticoreFuture ... done
[13:25:11.713] result() for MulticoreFuture ... done
[13:25:11.713] result() for MulticoreFuture ...
[13:25:11.713] result() for MulticoreFuture ... done
[13:25:11.713] result() for MulticoreFuture ...
[13:25:11.713] result() for MulticoreFuture ... done
[1] 42
[13:25:11.714] result() for MulticoreFuture ...
[13:25:11.714] result() for MulticoreFuture ... done
- stdout = NA
[13:25:11.714] getGlobalsAndPackages() ...
[13:25:11.714] Searching for globals...
[13:25:11.721] - globals found: [9] ‘{’, ‘print’, ‘:’, ‘str’, ‘cat’, ‘letters’, ‘write.table’, ‘[’, ‘::’
[13:25:11.721] Searching for globals ... DONE
[13:25:11.721] Resolving globals: FALSE
[13:25:11.722] 
[13:25:11.722] - packages: [1] ‘utils’
[13:25:11.722] getGlobalsAndPackages() ... DONE
[13:25:11.723] run() for ‘Future’ ...
[13:25:11.723] - state: ‘created’
[13:25:11.723] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[13:25:11.728] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:25:11.728] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[13:25:11.728]   - Field: ‘label’
[13:25:11.728]   - Field: ‘local’
[13:25:11.728]   - Field: ‘owner’
[13:25:11.728]   - Field: ‘envir’
[13:25:11.728]   - Field: ‘workers’
[13:25:11.728]   - Field: ‘packages’
[13:25:11.729]   - Field: ‘gc’
[13:25:11.729]   - Field: ‘job’
[13:25:11.729]   - Field: ‘conditions’
[13:25:11.729]   - Field: ‘expr’
[13:25:11.729]   - Field: ‘uuid’
[13:25:11.729]   - Field: ‘seed’
[13:25:11.729]   - Field: ‘version’
[13:25:11.729]   - Field: ‘result’
[13:25:11.730]   - Field: ‘asynchronous’
[13:25:11.730]   - Field: ‘calls’
[13:25:11.730]   - Field: ‘globals’
[13:25:11.730]   - Field: ‘stdout’
[13:25:11.730]   - Field: ‘earlySignal’
[13:25:11.730]   - Field: ‘lazy’
[13:25:11.730]   - Field: ‘state’
[13:25:11.730] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[13:25:11.730] - Launch lazy future ...
[13:25:11.731] Packages needed by the future expression (n = 1): ‘utils’
[13:25:11.731] Packages needed by future strategies (n = 0): <none>
[13:25:11.732] {
[13:25:11.732]     {
[13:25:11.732]         {
[13:25:11.732]             ...future.startTime <- base::Sys.time()
[13:25:11.732]             {
[13:25:11.732]                 {
[13:25:11.732]                   {
[13:25:11.732]                     {
[13:25:11.732]                       {
[13:25:11.732]                         base::local({
[13:25:11.732]                           has_future <- base::requireNamespace("future", 
[13:25:11.732]                             quietly = TRUE)
[13:25:11.732]                           if (has_future) {
[13:25:11.732]                             ns <- base::getNamespace("future")
[13:25:11.732]                             version <- ns[[".package"]][["version"]]
[13:25:11.732]                             if (is.null(version)) 
[13:25:11.732]                               version <- utils::packageVersion("future")
[13:25:11.732]                           }
[13:25:11.732]                           else {
[13:25:11.732]                             version <- NULL
[13:25:11.732]                           }
[13:25:11.732]                           if (!has_future || version < "1.8.0") {
[13:25:11.732]                             info <- base::c(r_version = base::gsub("R version ", 
[13:25:11.732]                               "", base::R.version$version.string), 
[13:25:11.732]                               platform = base::sprintf("%s (%s-bit)", 
[13:25:11.732]                                 base::R.version$platform, 8 * 
[13:25:11.732]                                   base::.Machine$sizeof.pointer), 
[13:25:11.732]                               os = base::paste(base::Sys.info()[base::c("sysname", 
[13:25:11.732]                                 "release", "version")], collapse = " "), 
[13:25:11.732]                               hostname = base::Sys.info()[["nodename"]])
[13:25:11.732]                             info <- base::sprintf("%s: %s", base::names(info), 
[13:25:11.732]                               info)
[13:25:11.732]                             info <- base::paste(info, collapse = "; ")
[13:25:11.732]                             if (!has_future) {
[13:25:11.732]                               msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:25:11.732]                                 info)
[13:25:11.732]                             }
[13:25:11.732]                             else {
[13:25:11.732]                               msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:25:11.732]                                 info, version)
[13:25:11.732]                             }
[13:25:11.732]                             base::stop(msg)
[13:25:11.732]                           }
[13:25:11.732]                         })
[13:25:11.732]                       }
[13:25:11.732]                       ...future.mc.cores.old <- base::getOption("mc.cores")
[13:25:11.732]                       base::options(mc.cores = 1L)
[13:25:11.732]                     }
[13:25:11.732]                     base::local({
[13:25:11.732]                       for (pkg in "utils") {
[13:25:11.732]                         base::loadNamespace(pkg)
[13:25:11.732]                         base::library(pkg, character.only = TRUE)
[13:25:11.732]                       }
[13:25:11.732]                     })
[13:25:11.732]                   }
[13:25:11.732]                   options(future.plan = NULL)
[13:25:11.732]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:25:11.732]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:25:11.732]                 }
[13:25:11.732]                 ...future.workdir <- getwd()
[13:25:11.732]             }
[13:25:11.732]             ...future.oldOptions <- base::as.list(base::.Options)
[13:25:11.732]             ...future.oldEnvVars <- base::Sys.getenv()
[13:25:11.732]         }
[13:25:11.732]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:25:11.732]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:25:11.732]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:25:11.732]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:25:11.732]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:25:11.732]             future.stdout.windows.reencode = NULL, width = 80L)
[13:25:11.732]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:25:11.732]             base::names(...future.oldOptions))
[13:25:11.732]     }
[13:25:11.732]     if (TRUE) {
[13:25:11.732]     }
[13:25:11.732]     else {
[13:25:11.732]         if (NA) {
[13:25:11.732]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:25:11.732]                 open = "w")
[13:25:11.732]         }
[13:25:11.732]         else {
[13:25:11.732]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:25:11.732]                 windows = "NUL", "/dev/null"), open = "w")
[13:25:11.732]         }
[13:25:11.732]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:25:11.732]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:25:11.732]             base::sink(type = "output", split = FALSE)
[13:25:11.732]             base::close(...future.stdout)
[13:25:11.732]         }, add = TRUE)
[13:25:11.732]     }
[13:25:11.732]     ...future.frame <- base::sys.nframe()
[13:25:11.732]     ...future.conditions <- base::list()
[13:25:11.732]     ...future.rng <- base::globalenv()$.Random.seed
[13:25:11.732]     if (FALSE) {
[13:25:11.732]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:25:11.732]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:25:11.732]     }
[13:25:11.732]     ...future.result <- base::tryCatch({
[13:25:11.732]         base::withCallingHandlers({
[13:25:11.732]             ...future.value <- base::withVisible(base::local({
[13:25:11.732]                 withCallingHandlers({
[13:25:11.732]                   {
[13:25:11.732]                     print(1:50)
[13:25:11.732]                     str(1:50)
[13:25:11.732]                     cat(letters, sep = "-")
[13:25:11.732]                     cat(1:6, collapse = "\n")
[13:25:11.732]                     write.table(datasets::iris[1:10, ], sep = "\t")
[13:25:11.732]                     42L
[13:25:11.732]                   }
[13:25:11.732]                 }, immediateCondition = function(cond) {
[13:25:11.732]                   save_rds <- function (object, pathname, ...) 
[13:25:11.732]                   {
[13:25:11.732]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[13:25:11.732]                     if (file_test("-f", pathname_tmp)) {
[13:25:11.732]                       fi_tmp <- file.info(pathname_tmp)
[13:25:11.732]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[13:25:11.732]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:25:11.732]                         fi_tmp[["mtime"]])
[13:25:11.732]                     }
[13:25:11.732]                     tryCatch({
[13:25:11.732]                       saveRDS(object, file = pathname_tmp, ...)
[13:25:11.732]                     }, error = function(ex) {
[13:25:11.732]                       msg <- conditionMessage(ex)
[13:25:11.732]                       fi_tmp <- file.info(pathname_tmp)
[13:25:11.732]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[13:25:11.732]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:25:11.732]                         fi_tmp[["mtime"]], msg)
[13:25:11.732]                       ex$message <- msg
[13:25:11.732]                       stop(ex)
[13:25:11.732]                     })
[13:25:11.732]                     stopifnot(file_test("-f", pathname_tmp))
[13:25:11.732]                     res <- file.rename(from = pathname_tmp, to = pathname)
[13:25:11.732]                     if (!res || file_test("-f", pathname_tmp)) {
[13:25:11.732]                       fi_tmp <- file.info(pathname_tmp)
[13:25:11.732]                       fi <- file.info(pathname)
[13:25:11.732]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[13:25:11.732]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:25:11.732]                         fi_tmp[["mtime"]], sQuote(pathname), 
[13:25:11.732]                         fi[["size"]], fi[["mtime"]])
[13:25:11.732]                       stop(msg)
[13:25:11.732]                     }
[13:25:11.732]                     invisible(pathname)
[13:25:11.732]                   }
[13:25:11.732]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[13:25:11.732]                     rootPath = tempdir()) 
[13:25:11.732]                   {
[13:25:11.732]                     obj <- list(time = Sys.time(), condition = cond)
[13:25:11.732]                     file <- tempfile(pattern = class(cond)[1], 
[13:25:11.732]                       tmpdir = path, fileext = ".rds")
[13:25:11.732]                     save_rds(obj, file)
[13:25:11.732]                   }
[13:25:11.732]                   saveImmediateCondition(cond, path = "/tmp/Rtmp2TLbxL/.future/immediateConditions")
[13:25:11.732]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:25:11.732]                   {
[13:25:11.732]                     inherits <- base::inherits
[13:25:11.732]                     invokeRestart <- base::invokeRestart
[13:25:11.732]                     is.null <- base::is.null
[13:25:11.732]                     muffled <- FALSE
[13:25:11.732]                     if (inherits(cond, "message")) {
[13:25:11.732]                       muffled <- grepl(pattern, "muffleMessage")
[13:25:11.732]                       if (muffled) 
[13:25:11.732]                         invokeRestart("muffleMessage")
[13:25:11.732]                     }
[13:25:11.732]                     else if (inherits(cond, "warning")) {
[13:25:11.732]                       muffled <- grepl(pattern, "muffleWarning")
[13:25:11.732]                       if (muffled) 
[13:25:11.732]                         invokeRestart("muffleWarning")
[13:25:11.732]                     }
[13:25:11.732]                     else if (inherits(cond, "condition")) {
[13:25:11.732]                       if (!is.null(pattern)) {
[13:25:11.732]                         computeRestarts <- base::computeRestarts
[13:25:11.732]                         grepl <- base::grepl
[13:25:11.732]                         restarts <- computeRestarts(cond)
[13:25:11.732]                         for (restart in restarts) {
[13:25:11.732]                           name <- restart$name
[13:25:11.732]                           if (is.null(name)) 
[13:25:11.732]                             next
[13:25:11.732]                           if (!grepl(pattern, name)) 
[13:25:11.732]                             next
[13:25:11.732]                           invokeRestart(restart)
[13:25:11.732]                           muffled <- TRUE
[13:25:11.732]                           break
[13:25:11.732]                         }
[13:25:11.732]                       }
[13:25:11.732]                     }
[13:25:11.732]                     invisible(muffled)
[13:25:11.732]                   }
[13:25:11.732]                   muffleCondition(cond)
[13:25:11.732]                 })
[13:25:11.732]             }))
[13:25:11.732]             future::FutureResult(value = ...future.value$value, 
[13:25:11.732]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:25:11.732]                   ...future.rng), globalenv = if (FALSE) 
[13:25:11.732]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:25:11.732]                     ...future.globalenv.names))
[13:25:11.732]                 else NULL, started = ...future.startTime, version = "1.8")
[13:25:11.732]         }, condition = base::local({
[13:25:11.732]             c <- base::c
[13:25:11.732]             inherits <- base::inherits
[13:25:11.732]             invokeRestart <- base::invokeRestart
[13:25:11.732]             length <- base::length
[13:25:11.732]             list <- base::list
[13:25:11.732]             seq.int <- base::seq.int
[13:25:11.732]             signalCondition <- base::signalCondition
[13:25:11.732]             sys.calls <- base::sys.calls
[13:25:11.732]             `[[` <- base::`[[`
[13:25:11.732]             `+` <- base::`+`
[13:25:11.732]             `<<-` <- base::`<<-`
[13:25:11.732]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:25:11.732]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:25:11.732]                   3L)]
[13:25:11.732]             }
[13:25:11.732]             function(cond) {
[13:25:11.732]                 is_error <- inherits(cond, "error")
[13:25:11.732]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:25:11.732]                   NULL)
[13:25:11.732]                 if (is_error) {
[13:25:11.732]                   sessionInformation <- function() {
[13:25:11.732]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:25:11.732]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:25:11.732]                       search = base::search(), system = base::Sys.info())
[13:25:11.732]                   }
[13:25:11.732]                   ...future.conditions[[length(...future.conditions) + 
[13:25:11.732]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:25:11.732]                     cond$call), session = sessionInformation(), 
[13:25:11.732]                     timestamp = base::Sys.time(), signaled = 0L)
[13:25:11.732]                   signalCondition(cond)
[13:25:11.732]                 }
[13:25:11.732]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:25:11.732]                 "immediateCondition"))) {
[13:25:11.732]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:25:11.732]                   ...future.conditions[[length(...future.conditions) + 
[13:25:11.732]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:25:11.732]                   if (TRUE && !signal) {
[13:25:11.732]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:25:11.732]                     {
[13:25:11.732]                       inherits <- base::inherits
[13:25:11.732]                       invokeRestart <- base::invokeRestart
[13:25:11.732]                       is.null <- base::is.null
[13:25:11.732]                       muffled <- FALSE
[13:25:11.732]                       if (inherits(cond, "message")) {
[13:25:11.732]                         muffled <- grepl(pattern, "muffleMessage")
[13:25:11.732]                         if (muffled) 
[13:25:11.732]                           invokeRestart("muffleMessage")
[13:25:11.732]                       }
[13:25:11.732]                       else if (inherits(cond, "warning")) {
[13:25:11.732]                         muffled <- grepl(pattern, "muffleWarning")
[13:25:11.732]                         if (muffled) 
[13:25:11.732]                           invokeRestart("muffleWarning")
[13:25:11.732]                       }
[13:25:11.732]                       else if (inherits(cond, "condition")) {
[13:25:11.732]                         if (!is.null(pattern)) {
[13:25:11.732]                           computeRestarts <- base::computeRestarts
[13:25:11.732]                           grepl <- base::grepl
[13:25:11.732]                           restarts <- computeRestarts(cond)
[13:25:11.732]                           for (restart in restarts) {
[13:25:11.732]                             name <- restart$name
[13:25:11.732]                             if (is.null(name)) 
[13:25:11.732]                               next
[13:25:11.732]                             if (!grepl(pattern, name)) 
[13:25:11.732]                               next
[13:25:11.732]                             invokeRestart(restart)
[13:25:11.732]                             muffled <- TRUE
[13:25:11.732]                             break
[13:25:11.732]                           }
[13:25:11.732]                         }
[13:25:11.732]                       }
[13:25:11.732]                       invisible(muffled)
[13:25:11.732]                     }
[13:25:11.732]                     muffleCondition(cond, pattern = "^muffle")
[13:25:11.732]                   }
[13:25:11.732]                 }
[13:25:11.732]                 else {
[13:25:11.732]                   if (TRUE) {
[13:25:11.732]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:25:11.732]                     {
[13:25:11.732]                       inherits <- base::inherits
[13:25:11.732]                       invokeRestart <- base::invokeRestart
[13:25:11.732]                       is.null <- base::is.null
[13:25:11.732]                       muffled <- FALSE
[13:25:11.732]                       if (inherits(cond, "message")) {
[13:25:11.732]                         muffled <- grepl(pattern, "muffleMessage")
[13:25:11.732]                         if (muffled) 
[13:25:11.732]                           invokeRestart("muffleMessage")
[13:25:11.732]                       }
[13:25:11.732]                       else if (inherits(cond, "warning")) {
[13:25:11.732]                         muffled <- grepl(pattern, "muffleWarning")
[13:25:11.732]                         if (muffled) 
[13:25:11.732]                           invokeRestart("muffleWarning")
[13:25:11.732]                       }
[13:25:11.732]                       else if (inherits(cond, "condition")) {
[13:25:11.732]                         if (!is.null(pattern)) {
[13:25:11.732]                           computeRestarts <- base::computeRestarts
[13:25:11.732]                           grepl <- base::grepl
[13:25:11.732]                           restarts <- computeRestarts(cond)
[13:25:11.732]                           for (restart in restarts) {
[13:25:11.732]                             name <- restart$name
[13:25:11.732]                             if (is.null(name)) 
[13:25:11.732]                               next
[13:25:11.732]                             if (!grepl(pattern, name)) 
[13:25:11.732]                               next
[13:25:11.732]                             invokeRestart(restart)
[13:25:11.732]                             muffled <- TRUE
[13:25:11.732]                             break
[13:25:11.732]                           }
[13:25:11.732]                         }
[13:25:11.732]                       }
[13:25:11.732]                       invisible(muffled)
[13:25:11.732]                     }
[13:25:11.732]                     muffleCondition(cond, pattern = "^muffle")
[13:25:11.732]                   }
[13:25:11.732]                 }
[13:25:11.732]             }
[13:25:11.732]         }))
[13:25:11.732]     }, error = function(ex) {
[13:25:11.732]         base::structure(base::list(value = NULL, visible = NULL, 
[13:25:11.732]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:25:11.732]                 ...future.rng), started = ...future.startTime, 
[13:25:11.732]             finished = Sys.time(), session_uuid = NA_character_, 
[13:25:11.732]             version = "1.8"), class = "FutureResult")
[13:25:11.732]     }, finally = {
[13:25:11.732]         if (!identical(...future.workdir, getwd())) 
[13:25:11.732]             setwd(...future.workdir)
[13:25:11.732]         {
[13:25:11.732]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:25:11.732]                 ...future.oldOptions$nwarnings <- NULL
[13:25:11.732]             }
[13:25:11.732]             base::options(...future.oldOptions)
[13:25:11.732]             if (.Platform$OS.type == "windows") {
[13:25:11.732]                 old_names <- names(...future.oldEnvVars)
[13:25:11.732]                 envs <- base::Sys.getenv()
[13:25:11.732]                 names <- names(envs)
[13:25:11.732]                 common <- intersect(names, old_names)
[13:25:11.732]                 added <- setdiff(names, old_names)
[13:25:11.732]                 removed <- setdiff(old_names, names)
[13:25:11.732]                 changed <- common[...future.oldEnvVars[common] != 
[13:25:11.732]                   envs[common]]
[13:25:11.732]                 NAMES <- toupper(changed)
[13:25:11.732]                 args <- list()
[13:25:11.732]                 for (kk in seq_along(NAMES)) {
[13:25:11.732]                   name <- changed[[kk]]
[13:25:11.732]                   NAME <- NAMES[[kk]]
[13:25:11.732]                   if (name != NAME && is.element(NAME, old_names)) 
[13:25:11.732]                     next
[13:25:11.732]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:25:11.732]                 }
[13:25:11.732]                 NAMES <- toupper(added)
[13:25:11.732]                 for (kk in seq_along(NAMES)) {
[13:25:11.732]                   name <- added[[kk]]
[13:25:11.732]                   NAME <- NAMES[[kk]]
[13:25:11.732]                   if (name != NAME && is.element(NAME, old_names)) 
[13:25:11.732]                     next
[13:25:11.732]                   args[[name]] <- ""
[13:25:11.732]                 }
[13:25:11.732]                 NAMES <- toupper(removed)
[13:25:11.732]                 for (kk in seq_along(NAMES)) {
[13:25:11.732]                   name <- removed[[kk]]
[13:25:11.732]                   NAME <- NAMES[[kk]]
[13:25:11.732]                   if (name != NAME && is.element(NAME, old_names)) 
[13:25:11.732]                     next
[13:25:11.732]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:25:11.732]                 }
[13:25:11.732]                 if (length(args) > 0) 
[13:25:11.732]                   base::do.call(base::Sys.setenv, args = args)
[13:25:11.732]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:25:11.732]             }
[13:25:11.732]             else {
[13:25:11.732]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:25:11.732]             }
[13:25:11.732]             {
[13:25:11.732]                 if (base::length(...future.futureOptionsAdded) > 
[13:25:11.732]                   0L) {
[13:25:11.732]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:25:11.732]                   base::names(opts) <- ...future.futureOptionsAdded
[13:25:11.732]                   base::options(opts)
[13:25:11.732]                 }
[13:25:11.732]                 {
[13:25:11.732]                   {
[13:25:11.732]                     base::options(mc.cores = ...future.mc.cores.old)
[13:25:11.732]                     NULL
[13:25:11.732]                   }
[13:25:11.732]                   options(future.plan = NULL)
[13:25:11.732]                   if (is.na(NA_character_)) 
[13:25:11.732]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:25:11.732]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:25:11.732]                   future::plan(list(function (..., workers = availableCores(constraints = "multicore"), 
[13:25:11.732]                     envir = parent.frame()) 
[13:25:11.732]                   {
[13:25:11.732]                     default_workers <- missing(workers)
[13:25:11.732]                     if (is.function(workers)) 
[13:25:11.732]                       workers <- workers()
[13:25:11.732]                     workers <- structure(as.integer(workers), 
[13:25:11.732]                       class = class(workers))
[13:25:11.732]                     stop_if_not(is.finite(workers), workers >= 
[13:25:11.732]                       1L)
[13:25:11.732]                     if ((workers == 1L && !inherits(workers, 
[13:25:11.732]                       "AsIs")) || !supportsMulticore(warn = TRUE)) {
[13:25:11.732]                       if (default_workers) 
[13:25:11.732]                         supportsMulticore(warn = TRUE)
[13:25:11.732]                       return(sequential(..., envir = envir))
[13:25:11.732]                     }
[13:25:11.732]                     oopts <- options(mc.cores = workers)
[13:25:11.732]                     on.exit(options(oopts))
[13:25:11.732]                     future <- MulticoreFuture(..., workers = workers, 
[13:25:11.732]                       envir = envir)
[13:25:11.732]                     if (!future$lazy) 
[13:25:11.732]                       future <- run(future)
[13:25:11.732]                     invisible(future)
[13:25:11.732]                   }), .cleanup = FALSE, .init = FALSE)
[13:25:11.732]                 }
[13:25:11.732]             }
[13:25:11.732]         }
[13:25:11.732]     })
[13:25:11.732]     if (FALSE) {
[13:25:11.732]         base::sink(type = "output", split = FALSE)
[13:25:11.732]         if (NA) {
[13:25:11.732]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:25:11.732]         }
[13:25:11.732]         else {
[13:25:11.732]             ...future.result["stdout"] <- base::list(NULL)
[13:25:11.732]         }
[13:25:11.732]         base::close(...future.stdout)
[13:25:11.732]         ...future.stdout <- NULL
[13:25:11.732]     }
[13:25:11.732]     ...future.result$conditions <- ...future.conditions
[13:25:11.732]     ...future.result$finished <- base::Sys.time()
[13:25:11.732]     ...future.result
[13:25:11.732] }
[13:25:11.734] requestCore(): workers = 2
[13:25:11.736] MulticoreFuture started
[13:25:11.737] - Launch lazy future ... done
[13:25:11.737] run() for ‘MulticoreFuture’ ... done
[13:25:11.737] result() for MulticoreFuture ...
[13:25:11.738] plan(): Setting new future strategy stack:
[13:25:11.738] List of future strategies:
[13:25:11.738] 1. sequential:
[13:25:11.738]    - args: function (..., envir = parent.frame())
[13:25:11.738]    - tweaked: FALSE
[13:25:11.738]    - call: NULL
[13:25:11.739] plan(): nbrOfWorkers() = 1
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25
[26] 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50
 int [1:50] 1 2 3 4 5 6 7 8 9 10 ...
a-b-c-d-e-f-g-h-i-j-k-l-m-n-o-p-q-r-s-t-u-v-w-x-y-z1 2 3 4 5 6 
"Sepal.Length"	"Sepal.Width"	"Petal.Length"	"Petal.Width"	"Species"
"1"	5.1	3.5	1.4	0.2	"setosa"
"2"	4.9	3	1.4	0.2	"setosa"
"3"	4.7	3.2	1.3	0.2	"setosa"
"4"	4.6	3.1	1.5	0.2	"setosa"
"5"	5	3.6	1.4	0.2	"setosa"
"6"	5.4	3.9	1.7	0.4	"setosa"
"7"	4.6	3.4	1.4	0.3	"setosa"
"8"	5	3.4	1.5	0.2	"setosa"
"9"	4.4	2.9	1.4	0.2	"setosa"
"10"	4.9	3.1	1.5	0.1	"setosa"
[13:25:11.743] plan(): Setting new future strategy stack:
[13:25:11.743] List of future strategies:
[13:25:11.743] 1. multicore:
[13:25:11.743]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[13:25:11.743]    - tweaked: FALSE
[13:25:11.743]    - call: plan(strategy)
[13:25:11.748] plan(): nbrOfWorkers() = 2
[13:25:11.749] result() for MulticoreFuture ...
[13:25:11.749] result() for MulticoreFuture ... done
[13:25:11.749] result() for MulticoreFuture ... done
List of 11
 $ value       : int 42
 $ visible     : logi TRUE
 $ stdout      : NULL
 $ conditions  : list()
 $ rng         : logi FALSE
 $ globalenv   : NULL
 $ started     : POSIXct[1:1], format: "2025-01-07 13:25:11"
 $ finished    : POSIXct[1:1], format: "2025-01-07 13:25:11"
 $ session_uuid: chr "94b71733-bf9e-56fe-6617-68d0098963ad"
  ..- attr(*, "source")=List of 5
  .. ..$ host  : Named chr "47b98e4ec3a9"
  .. .. ..- attr(*, "names")= chr "HOSTNAME"
  .. ..$ info  : Named chr [1:8] "Linux" "6.5.0-1025-azure" "#26~22.04.1-Ubuntu SMP Thu Jul 11 22:33:04 UTC 2024" "47b98e4ec3a9" ...
  .. .. ..- attr(*, "names")= chr [1:8] "sysname" "release" "version" "nodename" ...
  .. ..$ pid   : int 93546
  .. ..$ time  : POSIXct[1:1], format: "2025-01-07 13:25:11"
  .. ..$ random: int 2147483647
 $ r_info      :List of 4
  ..$ version      :Classes 'R_system_version', 'package_version', 'numeric_version'  hidden list of 1
  .. ..$ : int [1:3] 4 3 2
  ..$ os           : chr "unix"
  ..$ os_name      : chr "Linux"
  ..$ captures_utf8: logi TRUE
 $ version     : chr "1.8"
 - attr(*, "class")= chr "FutureResult"
[13:25:11.759] result() for MulticoreFuture ...
[13:25:11.759] result() for MulticoreFuture ... done
[13:25:11.759] result() for MulticoreFuture ...
[13:25:11.759] result() for MulticoreFuture ... done
[13:25:11.759] getGlobalsAndPackages() ...
[13:25:11.760] Searching for globals...
[13:25:11.763] - globals found: [9] ‘{’, ‘print’, ‘:’, ‘str’, ‘cat’, ‘letters’, ‘write.table’, ‘[’, ‘::’
[13:25:11.764] Searching for globals ... DONE
[13:25:11.764] Resolving globals: FALSE
[13:25:11.764] 
[13:25:11.764] - packages: [1] ‘utils’
[13:25:11.765] getGlobalsAndPackages() ... DONE
[13:25:11.765] run() for ‘Future’ ...
[13:25:11.765] - state: ‘created’
[13:25:11.765] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[13:25:11.771] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:25:11.772] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[13:25:11.772]   - Field: ‘label’
[13:25:11.772]   - Field: ‘local’
[13:25:11.772]   - Field: ‘owner’
[13:25:11.772]   - Field: ‘envir’
[13:25:11.772]   - Field: ‘workers’
[13:25:11.773]   - Field: ‘packages’
[13:25:11.773]   - Field: ‘gc’
[13:25:11.773]   - Field: ‘job’
[13:25:11.773]   - Field: ‘conditions’
[13:25:11.773]   - Field: ‘expr’
[13:25:11.773]   - Field: ‘uuid’
[13:25:11.773]   - Field: ‘seed’
[13:25:11.773]   - Field: ‘version’
[13:25:11.773]   - Field: ‘result’
[13:25:11.774]   - Field: ‘asynchronous’
[13:25:11.774]   - Field: ‘calls’
[13:25:11.774]   - Field: ‘globals’
[13:25:11.774]   - Field: ‘stdout’
[13:25:11.774]   - Field: ‘earlySignal’
[13:25:11.774]   - Field: ‘lazy’
[13:25:11.774]   - Field: ‘state’
[13:25:11.774] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[13:25:11.775] - Launch lazy future ...
[13:25:11.775] Packages needed by the future expression (n = 1): ‘utils’
[13:25:11.775] Packages needed by future strategies (n = 0): <none>
[13:25:11.776] {
[13:25:11.776]     {
[13:25:11.776]         {
[13:25:11.776]             ...future.startTime <- base::Sys.time()
[13:25:11.776]             {
[13:25:11.776]                 {
[13:25:11.776]                   {
[13:25:11.776]                     {
[13:25:11.776]                       {
[13:25:11.776]                         base::local({
[13:25:11.776]                           has_future <- base::requireNamespace("future", 
[13:25:11.776]                             quietly = TRUE)
[13:25:11.776]                           if (has_future) {
[13:25:11.776]                             ns <- base::getNamespace("future")
[13:25:11.776]                             version <- ns[[".package"]][["version"]]
[13:25:11.776]                             if (is.null(version)) 
[13:25:11.776]                               version <- utils::packageVersion("future")
[13:25:11.776]                           }
[13:25:11.776]                           else {
[13:25:11.776]                             version <- NULL
[13:25:11.776]                           }
[13:25:11.776]                           if (!has_future || version < "1.8.0") {
[13:25:11.776]                             info <- base::c(r_version = base::gsub("R version ", 
[13:25:11.776]                               "", base::R.version$version.string), 
[13:25:11.776]                               platform = base::sprintf("%s (%s-bit)", 
[13:25:11.776]                                 base::R.version$platform, 8 * 
[13:25:11.776]                                   base::.Machine$sizeof.pointer), 
[13:25:11.776]                               os = base::paste(base::Sys.info()[base::c("sysname", 
[13:25:11.776]                                 "release", "version")], collapse = " "), 
[13:25:11.776]                               hostname = base::Sys.info()[["nodename"]])
[13:25:11.776]                             info <- base::sprintf("%s: %s", base::names(info), 
[13:25:11.776]                               info)
[13:25:11.776]                             info <- base::paste(info, collapse = "; ")
[13:25:11.776]                             if (!has_future) {
[13:25:11.776]                               msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:25:11.776]                                 info)
[13:25:11.776]                             }
[13:25:11.776]                             else {
[13:25:11.776]                               msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:25:11.776]                                 info, version)
[13:25:11.776]                             }
[13:25:11.776]                             base::stop(msg)
[13:25:11.776]                           }
[13:25:11.776]                         })
[13:25:11.776]                       }
[13:25:11.776]                       ...future.mc.cores.old <- base::getOption("mc.cores")
[13:25:11.776]                       base::options(mc.cores = 1L)
[13:25:11.776]                     }
[13:25:11.776]                     base::local({
[13:25:11.776]                       for (pkg in "utils") {
[13:25:11.776]                         base::loadNamespace(pkg)
[13:25:11.776]                         base::library(pkg, character.only = TRUE)
[13:25:11.776]                       }
[13:25:11.776]                     })
[13:25:11.776]                   }
[13:25:11.776]                   options(future.plan = NULL)
[13:25:11.776]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:25:11.776]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:25:11.776]                 }
[13:25:11.776]                 ...future.workdir <- getwd()
[13:25:11.776]             }
[13:25:11.776]             ...future.oldOptions <- base::as.list(base::.Options)
[13:25:11.776]             ...future.oldEnvVars <- base::Sys.getenv()
[13:25:11.776]         }
[13:25:11.776]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:25:11.776]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:25:11.776]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:25:11.776]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:25:11.776]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:25:11.776]             future.stdout.windows.reencode = NULL, width = 80L)
[13:25:11.776]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:25:11.776]             base::names(...future.oldOptions))
[13:25:11.776]     }
[13:25:11.776]     if (TRUE) {
[13:25:11.776]     }
[13:25:11.776]     else {
[13:25:11.776]         if (NA) {
[13:25:11.776]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:25:11.776]                 open = "w")
[13:25:11.776]         }
[13:25:11.776]         else {
[13:25:11.776]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:25:11.776]                 windows = "NUL", "/dev/null"), open = "w")
[13:25:11.776]         }
[13:25:11.776]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:25:11.776]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:25:11.776]             base::sink(type = "output", split = FALSE)
[13:25:11.776]             base::close(...future.stdout)
[13:25:11.776]         }, add = TRUE)
[13:25:11.776]     }
[13:25:11.776]     ...future.frame <- base::sys.nframe()
[13:25:11.776]     ...future.conditions <- base::list()
[13:25:11.776]     ...future.rng <- base::globalenv()$.Random.seed
[13:25:11.776]     if (FALSE) {
[13:25:11.776]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:25:11.776]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:25:11.776]     }
[13:25:11.776]     ...future.result <- base::tryCatch({
[13:25:11.776]         base::withCallingHandlers({
[13:25:11.776]             ...future.value <- base::withVisible(base::local({
[13:25:11.776]                 withCallingHandlers({
[13:25:11.776]                   {
[13:25:11.776]                     print(1:50)
[13:25:11.776]                     str(1:50)
[13:25:11.776]                     cat(letters, sep = "-")
[13:25:11.776]                     cat(1:6, collapse = "\n")
[13:25:11.776]                     write.table(datasets::iris[1:10, ], sep = "\t")
[13:25:11.776]                     42L
[13:25:11.776]                   }
[13:25:11.776]                 }, immediateCondition = function(cond) {
[13:25:11.776]                   save_rds <- function (object, pathname, ...) 
[13:25:11.776]                   {
[13:25:11.776]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[13:25:11.776]                     if (file_test("-f", pathname_tmp)) {
[13:25:11.776]                       fi_tmp <- file.info(pathname_tmp)
[13:25:11.776]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[13:25:11.776]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:25:11.776]                         fi_tmp[["mtime"]])
[13:25:11.776]                     }
[13:25:11.776]                     tryCatch({
[13:25:11.776]                       saveRDS(object, file = pathname_tmp, ...)
[13:25:11.776]                     }, error = function(ex) {
[13:25:11.776]                       msg <- conditionMessage(ex)
[13:25:11.776]                       fi_tmp <- file.info(pathname_tmp)
[13:25:11.776]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[13:25:11.776]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:25:11.776]                         fi_tmp[["mtime"]], msg)
[13:25:11.776]                       ex$message <- msg
[13:25:11.776]                       stop(ex)
[13:25:11.776]                     })
[13:25:11.776]                     stopifnot(file_test("-f", pathname_tmp))
[13:25:11.776]                     res <- file.rename(from = pathname_tmp, to = pathname)
[13:25:11.776]                     if (!res || file_test("-f", pathname_tmp)) {
[13:25:11.776]                       fi_tmp <- file.info(pathname_tmp)
[13:25:11.776]                       fi <- file.info(pathname)
[13:25:11.776]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[13:25:11.776]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:25:11.776]                         fi_tmp[["mtime"]], sQuote(pathname), 
[13:25:11.776]                         fi[["size"]], fi[["mtime"]])
[13:25:11.776]                       stop(msg)
[13:25:11.776]                     }
[13:25:11.776]                     invisible(pathname)
[13:25:11.776]                   }
[13:25:11.776]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[13:25:11.776]                     rootPath = tempdir()) 
[13:25:11.776]                   {
[13:25:11.776]                     obj <- list(time = Sys.time(), condition = cond)
[13:25:11.776]                     file <- tempfile(pattern = class(cond)[1], 
[13:25:11.776]                       tmpdir = path, fileext = ".rds")
[13:25:11.776]                     save_rds(obj, file)
[13:25:11.776]                   }
[13:25:11.776]                   saveImmediateCondition(cond, path = "/tmp/Rtmp2TLbxL/.future/immediateConditions")
[13:25:11.776]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:25:11.776]                   {
[13:25:11.776]                     inherits <- base::inherits
[13:25:11.776]                     invokeRestart <- base::invokeRestart
[13:25:11.776]                     is.null <- base::is.null
[13:25:11.776]                     muffled <- FALSE
[13:25:11.776]                     if (inherits(cond, "message")) {
[13:25:11.776]                       muffled <- grepl(pattern, "muffleMessage")
[13:25:11.776]                       if (muffled) 
[13:25:11.776]                         invokeRestart("muffleMessage")
[13:25:11.776]                     }
[13:25:11.776]                     else if (inherits(cond, "warning")) {
[13:25:11.776]                       muffled <- grepl(pattern, "muffleWarning")
[13:25:11.776]                       if (muffled) 
[13:25:11.776]                         invokeRestart("muffleWarning")
[13:25:11.776]                     }
[13:25:11.776]                     else if (inherits(cond, "condition")) {
[13:25:11.776]                       if (!is.null(pattern)) {
[13:25:11.776]                         computeRestarts <- base::computeRestarts
[13:25:11.776]                         grepl <- base::grepl
[13:25:11.776]                         restarts <- computeRestarts(cond)
[13:25:11.776]                         for (restart in restarts) {
[13:25:11.776]                           name <- restart$name
[13:25:11.776]                           if (is.null(name)) 
[13:25:11.776]                             next
[13:25:11.776]                           if (!grepl(pattern, name)) 
[13:25:11.776]                             next
[13:25:11.776]                           invokeRestart(restart)
[13:25:11.776]                           muffled <- TRUE
[13:25:11.776]                           break
[13:25:11.776]                         }
[13:25:11.776]                       }
[13:25:11.776]                     }
[13:25:11.776]                     invisible(muffled)
[13:25:11.776]                   }
[13:25:11.776]                   muffleCondition(cond)
[13:25:11.776]                 })
[13:25:11.776]             }))
[13:25:11.776]             future::FutureResult(value = ...future.value$value, 
[13:25:11.776]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:25:11.776]                   ...future.rng), globalenv = if (FALSE) 
[13:25:11.776]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:25:11.776]                     ...future.globalenv.names))
[13:25:11.776]                 else NULL, started = ...future.startTime, version = "1.8")
[13:25:11.776]         }, condition = base::local({
[13:25:11.776]             c <- base::c
[13:25:11.776]             inherits <- base::inherits
[13:25:11.776]             invokeRestart <- base::invokeRestart
[13:25:11.776]             length <- base::length
[13:25:11.776]             list <- base::list
[13:25:11.776]             seq.int <- base::seq.int
[13:25:11.776]             signalCondition <- base::signalCondition
[13:25:11.776]             sys.calls <- base::sys.calls
[13:25:11.776]             `[[` <- base::`[[`
[13:25:11.776]             `+` <- base::`+`
[13:25:11.776]             `<<-` <- base::`<<-`
[13:25:11.776]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:25:11.776]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:25:11.776]                   3L)]
[13:25:11.776]             }
[13:25:11.776]             function(cond) {
[13:25:11.776]                 is_error <- inherits(cond, "error")
[13:25:11.776]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:25:11.776]                   NULL)
[13:25:11.776]                 if (is_error) {
[13:25:11.776]                   sessionInformation <- function() {
[13:25:11.776]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:25:11.776]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:25:11.776]                       search = base::search(), system = base::Sys.info())
[13:25:11.776]                   }
[13:25:11.776]                   ...future.conditions[[length(...future.conditions) + 
[13:25:11.776]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:25:11.776]                     cond$call), session = sessionInformation(), 
[13:25:11.776]                     timestamp = base::Sys.time(), signaled = 0L)
[13:25:11.776]                   signalCondition(cond)
[13:25:11.776]                 }
[13:25:11.776]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:25:11.776]                 "immediateCondition"))) {
[13:25:11.776]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:25:11.776]                   ...future.conditions[[length(...future.conditions) + 
[13:25:11.776]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:25:11.776]                   if (TRUE && !signal) {
[13:25:11.776]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:25:11.776]                     {
[13:25:11.776]                       inherits <- base::inherits
[13:25:11.776]                       invokeRestart <- base::invokeRestart
[13:25:11.776]                       is.null <- base::is.null
[13:25:11.776]                       muffled <- FALSE
[13:25:11.776]                       if (inherits(cond, "message")) {
[13:25:11.776]                         muffled <- grepl(pattern, "muffleMessage")
[13:25:11.776]                         if (muffled) 
[13:25:11.776]                           invokeRestart("muffleMessage")
[13:25:11.776]                       }
[13:25:11.776]                       else if (inherits(cond, "warning")) {
[13:25:11.776]                         muffled <- grepl(pattern, "muffleWarning")
[13:25:11.776]                         if (muffled) 
[13:25:11.776]                           invokeRestart("muffleWarning")
[13:25:11.776]                       }
[13:25:11.776]                       else if (inherits(cond, "condition")) {
[13:25:11.776]                         if (!is.null(pattern)) {
[13:25:11.776]                           computeRestarts <- base::computeRestarts
[13:25:11.776]                           grepl <- base::grepl
[13:25:11.776]                           restarts <- computeRestarts(cond)
[13:25:11.776]                           for (restart in restarts) {
[13:25:11.776]                             name <- restart$name
[13:25:11.776]                             if (is.null(name)) 
[13:25:11.776]                               next
[13:25:11.776]                             if (!grepl(pattern, name)) 
[13:25:11.776]                               next
[13:25:11.776]                             invokeRestart(restart)
[13:25:11.776]                             muffled <- TRUE
[13:25:11.776]                             break
[13:25:11.776]                           }
[13:25:11.776]                         }
[13:25:11.776]                       }
[13:25:11.776]                       invisible(muffled)
[13:25:11.776]                     }
[13:25:11.776]                     muffleCondition(cond, pattern = "^muffle")
[13:25:11.776]                   }
[13:25:11.776]                 }
[13:25:11.776]                 else {
[13:25:11.776]                   if (TRUE) {
[13:25:11.776]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:25:11.776]                     {
[13:25:11.776]                       inherits <- base::inherits
[13:25:11.776]                       invokeRestart <- base::invokeRestart
[13:25:11.776]                       is.null <- base::is.null
[13:25:11.776]                       muffled <- FALSE
[13:25:11.776]                       if (inherits(cond, "message")) {
[13:25:11.776]                         muffled <- grepl(pattern, "muffleMessage")
[13:25:11.776]                         if (muffled) 
[13:25:11.776]                           invokeRestart("muffleMessage")
[13:25:11.776]                       }
[13:25:11.776]                       else if (inherits(cond, "warning")) {
[13:25:11.776]                         muffled <- grepl(pattern, "muffleWarning")
[13:25:11.776]                         if (muffled) 
[13:25:11.776]                           invokeRestart("muffleWarning")
[13:25:11.776]                       }
[13:25:11.776]                       else if (inherits(cond, "condition")) {
[13:25:11.776]                         if (!is.null(pattern)) {
[13:25:11.776]                           computeRestarts <- base::computeRestarts
[13:25:11.776]                           grepl <- base::grepl
[13:25:11.776]                           restarts <- computeRestarts(cond)
[13:25:11.776]                           for (restart in restarts) {
[13:25:11.776]                             name <- restart$name
[13:25:11.776]                             if (is.null(name)) 
[13:25:11.776]                               next
[13:25:11.776]                             if (!grepl(pattern, name)) 
[13:25:11.776]                               next
[13:25:11.776]                             invokeRestart(restart)
[13:25:11.776]                             muffled <- TRUE
[13:25:11.776]                             break
[13:25:11.776]                           }
[13:25:11.776]                         }
[13:25:11.776]                       }
[13:25:11.776]                       invisible(muffled)
[13:25:11.776]                     }
[13:25:11.776]                     muffleCondition(cond, pattern = "^muffle")
[13:25:11.776]                   }
[13:25:11.776]                 }
[13:25:11.776]             }
[13:25:11.776]         }))
[13:25:11.776]     }, error = function(ex) {
[13:25:11.776]         base::structure(base::list(value = NULL, visible = NULL, 
[13:25:11.776]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:25:11.776]                 ...future.rng), started = ...future.startTime, 
[13:25:11.776]             finished = Sys.time(), session_uuid = NA_character_, 
[13:25:11.776]             version = "1.8"), class = "FutureResult")
[13:25:11.776]     }, finally = {
[13:25:11.776]         if (!identical(...future.workdir, getwd())) 
[13:25:11.776]             setwd(...future.workdir)
[13:25:11.776]         {
[13:25:11.776]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:25:11.776]                 ...future.oldOptions$nwarnings <- NULL
[13:25:11.776]             }
[13:25:11.776]             base::options(...future.oldOptions)
[13:25:11.776]             if (.Platform$OS.type == "windows") {
[13:25:11.776]                 old_names <- names(...future.oldEnvVars)
[13:25:11.776]                 envs <- base::Sys.getenv()
[13:25:11.776]                 names <- names(envs)
[13:25:11.776]                 common <- intersect(names, old_names)
[13:25:11.776]                 added <- setdiff(names, old_names)
[13:25:11.776]                 removed <- setdiff(old_names, names)
[13:25:11.776]                 changed <- common[...future.oldEnvVars[common] != 
[13:25:11.776]                   envs[common]]
[13:25:11.776]                 NAMES <- toupper(changed)
[13:25:11.776]                 args <- list()
[13:25:11.776]                 for (kk in seq_along(NAMES)) {
[13:25:11.776]                   name <- changed[[kk]]
[13:25:11.776]                   NAME <- NAMES[[kk]]
[13:25:11.776]                   if (name != NAME && is.element(NAME, old_names)) 
[13:25:11.776]                     next
[13:25:11.776]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:25:11.776]                 }
[13:25:11.776]                 NAMES <- toupper(added)
[13:25:11.776]                 for (kk in seq_along(NAMES)) {
[13:25:11.776]                   name <- added[[kk]]
[13:25:11.776]                   NAME <- NAMES[[kk]]
[13:25:11.776]                   if (name != NAME && is.element(NAME, old_names)) 
[13:25:11.776]                     next
[13:25:11.776]                   args[[name]] <- ""
[13:25:11.776]                 }
[13:25:11.776]                 NAMES <- toupper(removed)
[13:25:11.776]                 for (kk in seq_along(NAMES)) {
[13:25:11.776]                   name <- removed[[kk]]
[13:25:11.776]                   NAME <- NAMES[[kk]]
[13:25:11.776]                   if (name != NAME && is.element(NAME, old_names)) 
[13:25:11.776]                     next
[13:25:11.776]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:25:11.776]                 }
[13:25:11.776]                 if (length(args) > 0) 
[13:25:11.776]                   base::do.call(base::Sys.setenv, args = args)
[13:25:11.776]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:25:11.776]             }
[13:25:11.776]             else {
[13:25:11.776]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:25:11.776]             }
[13:25:11.776]             {
[13:25:11.776]                 if (base::length(...future.futureOptionsAdded) > 
[13:25:11.776]                   0L) {
[13:25:11.776]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:25:11.776]                   base::names(opts) <- ...future.futureOptionsAdded
[13:25:11.776]                   base::options(opts)
[13:25:11.776]                 }
[13:25:11.776]                 {
[13:25:11.776]                   {
[13:25:11.776]                     base::options(mc.cores = ...future.mc.cores.old)
[13:25:11.776]                     NULL
[13:25:11.776]                   }
[13:25:11.776]                   options(future.plan = NULL)
[13:25:11.776]                   if (is.na(NA_character_)) 
[13:25:11.776]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:25:11.776]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:25:11.776]                   future::plan(list(function (..., workers = availableCores(constraints = "multicore"), 
[13:25:11.776]                     envir = parent.frame()) 
[13:25:11.776]                   {
[13:25:11.776]                     default_workers <- missing(workers)
[13:25:11.776]                     if (is.function(workers)) 
[13:25:11.776]                       workers <- workers()
[13:25:11.776]                     workers <- structure(as.integer(workers), 
[13:25:11.776]                       class = class(workers))
[13:25:11.776]                     stop_if_not(is.finite(workers), workers >= 
[13:25:11.776]                       1L)
[13:25:11.776]                     if ((workers == 1L && !inherits(workers, 
[13:25:11.776]                       "AsIs")) || !supportsMulticore(warn = TRUE)) {
[13:25:11.776]                       if (default_workers) 
[13:25:11.776]                         supportsMulticore(warn = TRUE)
[13:25:11.776]                       return(sequential(..., envir = envir))
[13:25:11.776]                     }
[13:25:11.776]                     oopts <- options(mc.cores = workers)
[13:25:11.776]                     on.exit(options(oopts))
[13:25:11.776]                     future <- MulticoreFuture(..., workers = workers, 
[13:25:11.776]                       envir = envir)
[13:25:11.776]                     if (!future$lazy) 
[13:25:11.776]                       future <- run(future)
[13:25:11.776]                     invisible(future)
[13:25:11.776]                   }), .cleanup = FALSE, .init = FALSE)
[13:25:11.776]                 }
[13:25:11.776]             }
[13:25:11.776]         }
[13:25:11.776]     })
[13:25:11.776]     if (FALSE) {
[13:25:11.776]         base::sink(type = "output", split = FALSE)
[13:25:11.776]         if (NA) {
[13:25:11.776]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:25:11.776]         }
[13:25:11.776]         else {
[13:25:11.776]             ...future.result["stdout"] <- base::list(NULL)
[13:25:11.776]         }
[13:25:11.776]         base::close(...future.stdout)
[13:25:11.776]         ...future.stdout <- NULL
[13:25:11.776]     }
[13:25:11.776]     ...future.result$conditions <- ...future.conditions
[13:25:11.776]     ...future.result$finished <- base::Sys.time()
[13:25:11.776]     ...future.result
[13:25:11.776] }
[13:25:11.778] requestCore(): workers = 2
[13:25:11.780] MulticoreFuture started
[13:25:11.780] - Launch lazy future ... done
[13:25:11.781] run() for ‘MulticoreFuture’ ... done
[13:25:11.781] result() for MulticoreFuture ...
[13:25:11.781] plan(): Setting new future strategy stack:
[13:25:11.782] List of future strategies:
[13:25:11.782] 1. sequential:
[13:25:11.782]    - args: function (..., envir = parent.frame())
[13:25:11.782]    - tweaked: FALSE
[13:25:11.782]    - call: NULL
[13:25:11.782] plan(): nbrOfWorkers() = 1
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25
[26] 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50
 int [1:50] 1 2 3 4 5 6 7 8 9 10 ...
a-b-c-d-e-f-g-h-i-j-k-l-m-n-o-p-q-r-s-t-u-v-w-x-y-z1 2 3 4 5 6 
"Sepal.Length"	"Sepal.Width"	"Petal.Length"	"Petal.Width"	"Species"
"1"	5.1	3.5	1.4	0.2	"setosa"
"2"	4.9	3	1.4	0.2	"setosa"
"3"	4.7	3.2	1.3	0.2	"setosa"
"4"	4.6	3.1	1.5	0.2	"setosa"
"5"	5	3.6	1.4	0.2	"setosa"
"6"	5.4	3.9	1.7	0.4	"setosa"
"7"	4.6	3.4	1.4	0.3	"setosa"
"8"	5	3.4	1.5	0.2	"setosa"
"9"	4.4	2.9	1.4	0.2	"setosa"
"10"	4.9	3.1	1.5	0.1	"setosa"
[13:25:11.786] plan(): Setting new future strategy stack:
[13:25:11.786] List of future strategies:
[13:25:11.786] 1. multicore:
[13:25:11.786]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[13:25:11.786]    - tweaked: FALSE
[13:25:11.786]    - call: plan(strategy)
[13:25:11.791] plan(): nbrOfWorkers() = 2
[13:25:11.792] result() for MulticoreFuture ...
[13:25:11.792] result() for MulticoreFuture ... done
[13:25:11.792] result() for MulticoreFuture ... done
[13:25:11.793] result() for MulticoreFuture ...
[13:25:11.793] result() for MulticoreFuture ... done
- stdout = structure(TRUE, drop = TRUE)
[13:25:11.793] getGlobalsAndPackages() ...
[13:25:11.793] Searching for globals...
[13:25:11.794] - globals found: [1] ‘print’
[13:25:11.794] Searching for globals ... DONE
[13:25:11.794] Resolving globals: FALSE
[13:25:11.795] 
[13:25:11.795] 
[13:25:11.795] getGlobalsAndPackages() ... DONE
[13:25:11.795] run() for ‘Future’ ...
[13:25:11.795] - state: ‘created’
[13:25:11.796] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[13:25:11.800] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:25:11.800] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[13:25:11.800]   - Field: ‘label’
[13:25:11.800]   - Field: ‘local’
[13:25:11.800]   - Field: ‘owner’
[13:25:11.801]   - Field: ‘envir’
[13:25:11.801]   - Field: ‘workers’
[13:25:11.801]   - Field: ‘packages’
[13:25:11.801]   - Field: ‘gc’
[13:25:11.801]   - Field: ‘job’
[13:25:11.801]   - Field: ‘conditions’
[13:25:11.801]   - Field: ‘expr’
[13:25:11.801]   - Field: ‘uuid’
[13:25:11.801]   - Field: ‘seed’
[13:25:11.802]   - Field: ‘version’
[13:25:11.802]   - Field: ‘result’
[13:25:11.802]   - Field: ‘asynchronous’
[13:25:11.802]   - Field: ‘calls’
[13:25:11.802]   - Field: ‘globals’
[13:25:11.802]   - Field: ‘stdout’
[13:25:11.802]   - Field: ‘earlySignal’
[13:25:11.802]   - Field: ‘lazy’
[13:25:11.802]   - Field: ‘state’
[13:25:11.803] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[13:25:11.803] - Launch lazy future ...
[13:25:11.803] Packages needed by the future expression (n = 0): <none>
[13:25:11.803] Packages needed by future strategies (n = 0): <none>
[13:25:11.804] {
[13:25:11.804]     {
[13:25:11.804]         {
[13:25:11.804]             ...future.startTime <- base::Sys.time()
[13:25:11.804]             {
[13:25:11.804]                 {
[13:25:11.804]                   {
[13:25:11.804]                     {
[13:25:11.804]                       base::local({
[13:25:11.804]                         has_future <- base::requireNamespace("future", 
[13:25:11.804]                           quietly = TRUE)
[13:25:11.804]                         if (has_future) {
[13:25:11.804]                           ns <- base::getNamespace("future")
[13:25:11.804]                           version <- ns[[".package"]][["version"]]
[13:25:11.804]                           if (is.null(version)) 
[13:25:11.804]                             version <- utils::packageVersion("future")
[13:25:11.804]                         }
[13:25:11.804]                         else {
[13:25:11.804]                           version <- NULL
[13:25:11.804]                         }
[13:25:11.804]                         if (!has_future || version < "1.8.0") {
[13:25:11.804]                           info <- base::c(r_version = base::gsub("R version ", 
[13:25:11.804]                             "", base::R.version$version.string), 
[13:25:11.804]                             platform = base::sprintf("%s (%s-bit)", 
[13:25:11.804]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:25:11.804]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:25:11.804]                               "release", "version")], collapse = " "), 
[13:25:11.804]                             hostname = base::Sys.info()[["nodename"]])
[13:25:11.804]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:25:11.804]                             info)
[13:25:11.804]                           info <- base::paste(info, collapse = "; ")
[13:25:11.804]                           if (!has_future) {
[13:25:11.804]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:25:11.804]                               info)
[13:25:11.804]                           }
[13:25:11.804]                           else {
[13:25:11.804]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:25:11.804]                               info, version)
[13:25:11.804]                           }
[13:25:11.804]                           base::stop(msg)
[13:25:11.804]                         }
[13:25:11.804]                       })
[13:25:11.804]                     }
[13:25:11.804]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[13:25:11.804]                     base::options(mc.cores = 1L)
[13:25:11.804]                   }
[13:25:11.804]                   options(future.plan = NULL)
[13:25:11.804]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:25:11.804]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:25:11.804]                 }
[13:25:11.804]                 ...future.workdir <- getwd()
[13:25:11.804]             }
[13:25:11.804]             ...future.oldOptions <- base::as.list(base::.Options)
[13:25:11.804]             ...future.oldEnvVars <- base::Sys.getenv()
[13:25:11.804]         }
[13:25:11.804]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:25:11.804]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:25:11.804]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:25:11.804]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:25:11.804]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:25:11.804]             future.stdout.windows.reencode = NULL, width = 80L)
[13:25:11.804]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:25:11.804]             base::names(...future.oldOptions))
[13:25:11.804]     }
[13:25:11.804]     if (FALSE) {
[13:25:11.804]     }
[13:25:11.804]     else {
[13:25:11.804]         if (TRUE) {
[13:25:11.804]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:25:11.804]                 open = "w")
[13:25:11.804]         }
[13:25:11.804]         else {
[13:25:11.804]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:25:11.804]                 windows = "NUL", "/dev/null"), open = "w")
[13:25:11.804]         }
[13:25:11.804]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:25:11.804]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:25:11.804]             base::sink(type = "output", split = FALSE)
[13:25:11.804]             base::close(...future.stdout)
[13:25:11.804]         }, add = TRUE)
[13:25:11.804]     }
[13:25:11.804]     ...future.frame <- base::sys.nframe()
[13:25:11.804]     ...future.conditions <- base::list()
[13:25:11.804]     ...future.rng <- base::globalenv()$.Random.seed
[13:25:11.804]     if (FALSE) {
[13:25:11.804]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:25:11.804]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:25:11.804]     }
[13:25:11.804]     ...future.result <- base::tryCatch({
[13:25:11.804]         base::withCallingHandlers({
[13:25:11.804]             ...future.value <- base::withVisible(base::local({
[13:25:11.804]                 withCallingHandlers({
[13:25:11.804]                   print(42)
[13:25:11.804]                 }, immediateCondition = function(cond) {
[13:25:11.804]                   save_rds <- function (object, pathname, ...) 
[13:25:11.804]                   {
[13:25:11.804]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[13:25:11.804]                     if (file_test("-f", pathname_tmp)) {
[13:25:11.804]                       fi_tmp <- file.info(pathname_tmp)
[13:25:11.804]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[13:25:11.804]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:25:11.804]                         fi_tmp[["mtime"]])
[13:25:11.804]                     }
[13:25:11.804]                     tryCatch({
[13:25:11.804]                       saveRDS(object, file = pathname_tmp, ...)
[13:25:11.804]                     }, error = function(ex) {
[13:25:11.804]                       msg <- conditionMessage(ex)
[13:25:11.804]                       fi_tmp <- file.info(pathname_tmp)
[13:25:11.804]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[13:25:11.804]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:25:11.804]                         fi_tmp[["mtime"]], msg)
[13:25:11.804]                       ex$message <- msg
[13:25:11.804]                       stop(ex)
[13:25:11.804]                     })
[13:25:11.804]                     stopifnot(file_test("-f", pathname_tmp))
[13:25:11.804]                     res <- file.rename(from = pathname_tmp, to = pathname)
[13:25:11.804]                     if (!res || file_test("-f", pathname_tmp)) {
[13:25:11.804]                       fi_tmp <- file.info(pathname_tmp)
[13:25:11.804]                       fi <- file.info(pathname)
[13:25:11.804]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[13:25:11.804]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:25:11.804]                         fi_tmp[["mtime"]], sQuote(pathname), 
[13:25:11.804]                         fi[["size"]], fi[["mtime"]])
[13:25:11.804]                       stop(msg)
[13:25:11.804]                     }
[13:25:11.804]                     invisible(pathname)
[13:25:11.804]                   }
[13:25:11.804]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[13:25:11.804]                     rootPath = tempdir()) 
[13:25:11.804]                   {
[13:25:11.804]                     obj <- list(time = Sys.time(), condition = cond)
[13:25:11.804]                     file <- tempfile(pattern = class(cond)[1], 
[13:25:11.804]                       tmpdir = path, fileext = ".rds")
[13:25:11.804]                     save_rds(obj, file)
[13:25:11.804]                   }
[13:25:11.804]                   saveImmediateCondition(cond, path = "/tmp/Rtmp2TLbxL/.future/immediateConditions")
[13:25:11.804]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:25:11.804]                   {
[13:25:11.804]                     inherits <- base::inherits
[13:25:11.804]                     invokeRestart <- base::invokeRestart
[13:25:11.804]                     is.null <- base::is.null
[13:25:11.804]                     muffled <- FALSE
[13:25:11.804]                     if (inherits(cond, "message")) {
[13:25:11.804]                       muffled <- grepl(pattern, "muffleMessage")
[13:25:11.804]                       if (muffled) 
[13:25:11.804]                         invokeRestart("muffleMessage")
[13:25:11.804]                     }
[13:25:11.804]                     else if (inherits(cond, "warning")) {
[13:25:11.804]                       muffled <- grepl(pattern, "muffleWarning")
[13:25:11.804]                       if (muffled) 
[13:25:11.804]                         invokeRestart("muffleWarning")
[13:25:11.804]                     }
[13:25:11.804]                     else if (inherits(cond, "condition")) {
[13:25:11.804]                       if (!is.null(pattern)) {
[13:25:11.804]                         computeRestarts <- base::computeRestarts
[13:25:11.804]                         grepl <- base::grepl
[13:25:11.804]                         restarts <- computeRestarts(cond)
[13:25:11.804]                         for (restart in restarts) {
[13:25:11.804]                           name <- restart$name
[13:25:11.804]                           if (is.null(name)) 
[13:25:11.804]                             next
[13:25:11.804]                           if (!grepl(pattern, name)) 
[13:25:11.804]                             next
[13:25:11.804]                           invokeRestart(restart)
[13:25:11.804]                           muffled <- TRUE
[13:25:11.804]                           break
[13:25:11.804]                         }
[13:25:11.804]                       }
[13:25:11.804]                     }
[13:25:11.804]                     invisible(muffled)
[13:25:11.804]                   }
[13:25:11.804]                   muffleCondition(cond)
[13:25:11.804]                 })
[13:25:11.804]             }))
[13:25:11.804]             future::FutureResult(value = ...future.value$value, 
[13:25:11.804]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:25:11.804]                   ...future.rng), globalenv = if (FALSE) 
[13:25:11.804]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:25:11.804]                     ...future.globalenv.names))
[13:25:11.804]                 else NULL, started = ...future.startTime, version = "1.8")
[13:25:11.804]         }, condition = base::local({
[13:25:11.804]             c <- base::c
[13:25:11.804]             inherits <- base::inherits
[13:25:11.804]             invokeRestart <- base::invokeRestart
[13:25:11.804]             length <- base::length
[13:25:11.804]             list <- base::list
[13:25:11.804]             seq.int <- base::seq.int
[13:25:11.804]             signalCondition <- base::signalCondition
[13:25:11.804]             sys.calls <- base::sys.calls
[13:25:11.804]             `[[` <- base::`[[`
[13:25:11.804]             `+` <- base::`+`
[13:25:11.804]             `<<-` <- base::`<<-`
[13:25:11.804]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:25:11.804]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:25:11.804]                   3L)]
[13:25:11.804]             }
[13:25:11.804]             function(cond) {
[13:25:11.804]                 is_error <- inherits(cond, "error")
[13:25:11.804]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:25:11.804]                   NULL)
[13:25:11.804]                 if (is_error) {
[13:25:11.804]                   sessionInformation <- function() {
[13:25:11.804]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:25:11.804]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:25:11.804]                       search = base::search(), system = base::Sys.info())
[13:25:11.804]                   }
[13:25:11.804]                   ...future.conditions[[length(...future.conditions) + 
[13:25:11.804]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:25:11.804]                     cond$call), session = sessionInformation(), 
[13:25:11.804]                     timestamp = base::Sys.time(), signaled = 0L)
[13:25:11.804]                   signalCondition(cond)
[13:25:11.804]                 }
[13:25:11.804]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:25:11.804]                 "immediateCondition"))) {
[13:25:11.804]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:25:11.804]                   ...future.conditions[[length(...future.conditions) + 
[13:25:11.804]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:25:11.804]                   if (TRUE && !signal) {
[13:25:11.804]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:25:11.804]                     {
[13:25:11.804]                       inherits <- base::inherits
[13:25:11.804]                       invokeRestart <- base::invokeRestart
[13:25:11.804]                       is.null <- base::is.null
[13:25:11.804]                       muffled <- FALSE
[13:25:11.804]                       if (inherits(cond, "message")) {
[13:25:11.804]                         muffled <- grepl(pattern, "muffleMessage")
[13:25:11.804]                         if (muffled) 
[13:25:11.804]                           invokeRestart("muffleMessage")
[13:25:11.804]                       }
[13:25:11.804]                       else if (inherits(cond, "warning")) {
[13:25:11.804]                         muffled <- grepl(pattern, "muffleWarning")
[13:25:11.804]                         if (muffled) 
[13:25:11.804]                           invokeRestart("muffleWarning")
[13:25:11.804]                       }
[13:25:11.804]                       else if (inherits(cond, "condition")) {
[13:25:11.804]                         if (!is.null(pattern)) {
[13:25:11.804]                           computeRestarts <- base::computeRestarts
[13:25:11.804]                           grepl <- base::grepl
[13:25:11.804]                           restarts <- computeRestarts(cond)
[13:25:11.804]                           for (restart in restarts) {
[13:25:11.804]                             name <- restart$name
[13:25:11.804]                             if (is.null(name)) 
[13:25:11.804]                               next
[13:25:11.804]                             if (!grepl(pattern, name)) 
[13:25:11.804]                               next
[13:25:11.804]                             invokeRestart(restart)
[13:25:11.804]                             muffled <- TRUE
[13:25:11.804]                             break
[13:25:11.804]                           }
[13:25:11.804]                         }
[13:25:11.804]                       }
[13:25:11.804]                       invisible(muffled)
[13:25:11.804]                     }
[13:25:11.804]                     muffleCondition(cond, pattern = "^muffle")
[13:25:11.804]                   }
[13:25:11.804]                 }
[13:25:11.804]                 else {
[13:25:11.804]                   if (TRUE) {
[13:25:11.804]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:25:11.804]                     {
[13:25:11.804]                       inherits <- base::inherits
[13:25:11.804]                       invokeRestart <- base::invokeRestart
[13:25:11.804]                       is.null <- base::is.null
[13:25:11.804]                       muffled <- FALSE
[13:25:11.804]                       if (inherits(cond, "message")) {
[13:25:11.804]                         muffled <- grepl(pattern, "muffleMessage")
[13:25:11.804]                         if (muffled) 
[13:25:11.804]                           invokeRestart("muffleMessage")
[13:25:11.804]                       }
[13:25:11.804]                       else if (inherits(cond, "warning")) {
[13:25:11.804]                         muffled <- grepl(pattern, "muffleWarning")
[13:25:11.804]                         if (muffled) 
[13:25:11.804]                           invokeRestart("muffleWarning")
[13:25:11.804]                       }
[13:25:11.804]                       else if (inherits(cond, "condition")) {
[13:25:11.804]                         if (!is.null(pattern)) {
[13:25:11.804]                           computeRestarts <- base::computeRestarts
[13:25:11.804]                           grepl <- base::grepl
[13:25:11.804]                           restarts <- computeRestarts(cond)
[13:25:11.804]                           for (restart in restarts) {
[13:25:11.804]                             name <- restart$name
[13:25:11.804]                             if (is.null(name)) 
[13:25:11.804]                               next
[13:25:11.804]                             if (!grepl(pattern, name)) 
[13:25:11.804]                               next
[13:25:11.804]                             invokeRestart(restart)
[13:25:11.804]                             muffled <- TRUE
[13:25:11.804]                             break
[13:25:11.804]                           }
[13:25:11.804]                         }
[13:25:11.804]                       }
[13:25:11.804]                       invisible(muffled)
[13:25:11.804]                     }
[13:25:11.804]                     muffleCondition(cond, pattern = "^muffle")
[13:25:11.804]                   }
[13:25:11.804]                 }
[13:25:11.804]             }
[13:25:11.804]         }))
[13:25:11.804]     }, error = function(ex) {
[13:25:11.804]         base::structure(base::list(value = NULL, visible = NULL, 
[13:25:11.804]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:25:11.804]                 ...future.rng), started = ...future.startTime, 
[13:25:11.804]             finished = Sys.time(), session_uuid = NA_character_, 
[13:25:11.804]             version = "1.8"), class = "FutureResult")
[13:25:11.804]     }, finally = {
[13:25:11.804]         if (!identical(...future.workdir, getwd())) 
[13:25:11.804]             setwd(...future.workdir)
[13:25:11.804]         {
[13:25:11.804]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:25:11.804]                 ...future.oldOptions$nwarnings <- NULL
[13:25:11.804]             }
[13:25:11.804]             base::options(...future.oldOptions)
[13:25:11.804]             if (.Platform$OS.type == "windows") {
[13:25:11.804]                 old_names <- names(...future.oldEnvVars)
[13:25:11.804]                 envs <- base::Sys.getenv()
[13:25:11.804]                 names <- names(envs)
[13:25:11.804]                 common <- intersect(names, old_names)
[13:25:11.804]                 added <- setdiff(names, old_names)
[13:25:11.804]                 removed <- setdiff(old_names, names)
[13:25:11.804]                 changed <- common[...future.oldEnvVars[common] != 
[13:25:11.804]                   envs[common]]
[13:25:11.804]                 NAMES <- toupper(changed)
[13:25:11.804]                 args <- list()
[13:25:11.804]                 for (kk in seq_along(NAMES)) {
[13:25:11.804]                   name <- changed[[kk]]
[13:25:11.804]                   NAME <- NAMES[[kk]]
[13:25:11.804]                   if (name != NAME && is.element(NAME, old_names)) 
[13:25:11.804]                     next
[13:25:11.804]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:25:11.804]                 }
[13:25:11.804]                 NAMES <- toupper(added)
[13:25:11.804]                 for (kk in seq_along(NAMES)) {
[13:25:11.804]                   name <- added[[kk]]
[13:25:11.804]                   NAME <- NAMES[[kk]]
[13:25:11.804]                   if (name != NAME && is.element(NAME, old_names)) 
[13:25:11.804]                     next
[13:25:11.804]                   args[[name]] <- ""
[13:25:11.804]                 }
[13:25:11.804]                 NAMES <- toupper(removed)
[13:25:11.804]                 for (kk in seq_along(NAMES)) {
[13:25:11.804]                   name <- removed[[kk]]
[13:25:11.804]                   NAME <- NAMES[[kk]]
[13:25:11.804]                   if (name != NAME && is.element(NAME, old_names)) 
[13:25:11.804]                     next
[13:25:11.804]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:25:11.804]                 }
[13:25:11.804]                 if (length(args) > 0) 
[13:25:11.804]                   base::do.call(base::Sys.setenv, args = args)
[13:25:11.804]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:25:11.804]             }
[13:25:11.804]             else {
[13:25:11.804]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:25:11.804]             }
[13:25:11.804]             {
[13:25:11.804]                 if (base::length(...future.futureOptionsAdded) > 
[13:25:11.804]                   0L) {
[13:25:11.804]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:25:11.804]                   base::names(opts) <- ...future.futureOptionsAdded
[13:25:11.804]                   base::options(opts)
[13:25:11.804]                 }
[13:25:11.804]                 {
[13:25:11.804]                   {
[13:25:11.804]                     base::options(mc.cores = ...future.mc.cores.old)
[13:25:11.804]                     NULL
[13:25:11.804]                   }
[13:25:11.804]                   options(future.plan = NULL)
[13:25:11.804]                   if (is.na(NA_character_)) 
[13:25:11.804]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:25:11.804]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:25:11.804]                   future::plan(list(function (..., workers = availableCores(constraints = "multicore"), 
[13:25:11.804]                     envir = parent.frame()) 
[13:25:11.804]                   {
[13:25:11.804]                     default_workers <- missing(workers)
[13:25:11.804]                     if (is.function(workers)) 
[13:25:11.804]                       workers <- workers()
[13:25:11.804]                     workers <- structure(as.integer(workers), 
[13:25:11.804]                       class = class(workers))
[13:25:11.804]                     stop_if_not(is.finite(workers), workers >= 
[13:25:11.804]                       1L)
[13:25:11.804]                     if ((workers == 1L && !inherits(workers, 
[13:25:11.804]                       "AsIs")) || !supportsMulticore(warn = TRUE)) {
[13:25:11.804]                       if (default_workers) 
[13:25:11.804]                         supportsMulticore(warn = TRUE)
[13:25:11.804]                       return(sequential(..., envir = envir))
[13:25:11.804]                     }
[13:25:11.804]                     oopts <- options(mc.cores = workers)
[13:25:11.804]                     on.exit(options(oopts))
[13:25:11.804]                     future <- MulticoreFuture(..., workers = workers, 
[13:25:11.804]                       envir = envir)
[13:25:11.804]                     if (!future$lazy) 
[13:25:11.804]                       future <- run(future)
[13:25:11.804]                     invisible(future)
[13:25:11.804]                   }), .cleanup = FALSE, .init = FALSE)
[13:25:11.804]                 }
[13:25:11.804]             }
[13:25:11.804]         }
[13:25:11.804]     })
[13:25:11.804]     if (TRUE) {
[13:25:11.804]         base::sink(type = "output", split = FALSE)
[13:25:11.804]         if (TRUE) {
[13:25:11.804]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:25:11.804]         }
[13:25:11.804]         else {
[13:25:11.804]             ...future.result["stdout"] <- base::list(NULL)
[13:25:11.804]         }
[13:25:11.804]         base::close(...future.stdout)
[13:25:11.804]         ...future.stdout <- NULL
[13:25:11.804]     }
[13:25:11.804]     ...future.result$conditions <- ...future.conditions
[13:25:11.804]     ...future.result$finished <- base::Sys.time()
[13:25:11.804]     ...future.result
[13:25:11.804] }
[13:25:11.807] requestCore(): workers = 2
[13:25:11.808] MulticoreFuture started
[13:25:11.809] - Launch lazy future ... done
[13:25:11.809] run() for ‘MulticoreFuture’ ... done
[13:25:11.809] result() for MulticoreFuture ...
[13:25:11.810] plan(): Setting new future strategy stack:
[13:25:11.810] List of future strategies:
[13:25:11.810] 1. sequential:
[13:25:11.810]    - args: function (..., envir = parent.frame())
[13:25:11.810]    - tweaked: FALSE
[13:25:11.810]    - call: NULL
[13:25:11.811] plan(): nbrOfWorkers() = 1
[13:25:11.813] plan(): Setting new future strategy stack:
[13:25:11.813] List of future strategies:
[13:25:11.813] 1. multicore:
[13:25:11.813]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[13:25:11.813]    - tweaked: FALSE
[13:25:11.813]    - call: plan(strategy)
[13:25:11.818] plan(): nbrOfWorkers() = 2
[13:25:11.819] result() for MulticoreFuture ...
[13:25:11.819] result() for MulticoreFuture ... done
[13:25:11.819] result() for MulticoreFuture ... done
[13:25:11.819] result() for MulticoreFuture ...
[13:25:11.819] result() for MulticoreFuture ... done
[13:25:11.819] result() for MulticoreFuture ...
[13:25:11.820] result() for MulticoreFuture ... done
[1] 42
[13:25:11.820] result() for MulticoreFuture ...
[13:25:11.820] result() for MulticoreFuture ... done
multicore ... done
multisession ...
[13:25:11.821] plan(): Setting new future strategy stack:
[13:25:11.821] List of future strategies:
[13:25:11.821] 1. multisession:
[13:25:11.821]    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[13:25:11.821]    - tweaked: FALSE
[13:25:11.821]    - call: plan(strategy)
[13:25:11.821] plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ...
[13:25:11.821] multisession:
[13:25:11.821] - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[13:25:11.821] - tweaked: FALSE
[13:25:11.821] - call: plan(strategy)
[13:25:11.828] getGlobalsAndPackages() ...
[13:25:11.828] Not searching for globals
[13:25:11.829] - globals: [0] <none>
[13:25:11.829] getGlobalsAndPackages() ... DONE
[13:25:11.829] [local output] makeClusterPSOCK() ...
[13:25:11.872] [local output] Workers: [n = 2] ‘localhost’, ‘localhost’
[13:25:11.873] [local output] Base port: 11599
[13:25:11.873] [local output] Getting setup options for 2 cluster nodes ...
[13:25:11.873] [local output]  - Node 1 of 2 ...
[13:25:11.874] [local output] localMachine=TRUE => revtunnel=FALSE

[13:25:11.874] Testing if worker's PID can be inferred: ‘'/usr/local/lib/R/bin/Rscript' -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/Rtmp2TLbxL/worker.rank=1.parallelly.parent=93492.16d345b1cb3fa.pid")), silent = TRUE)' -e 'file.exists("/tmp/Rtmp2TLbxL/worker.rank=1.parallelly.parent=93492.16d345b1cb3fa.pid")'’
[13:25:12.064] - Possible to infer worker's PID: TRUE
[13:25:12.064] [local output] Rscript port: 11599

[13:25:12.064] [local output]  - Node 2 of 2 ...
[13:25:12.065] [local output] localMachine=TRUE => revtunnel=FALSE

[13:25:12.065] [local output] Rscript port: 11599

[13:25:12.066] [local output] Getting setup options for 2 cluster nodes ... done
[13:25:12.066] [local output]  - Parallel setup requested for some PSOCK nodes
[13:25:12.066] [local output] Setting up PSOCK nodes in parallel
[13:25:12.066] List of 36
[13:25:12.066]  $ worker          : chr "localhost"
[13:25:12.066]   ..- attr(*, "localhost")= logi TRUE
[13:25:12.066]  $ master          : chr "localhost"
[13:25:12.066]  $ port            : int 11599
[13:25:12.066]  $ connectTimeout  : num 120
[13:25:12.066]  $ timeout         : num 2592000
[13:25:12.066]  $ rscript         : chr "'/usr/local/lib/R/bin/Rscript'"
[13:25:12.066]  $ homogeneous     : logi TRUE
[13:25:12.066]  $ rscript_args    : chr "--default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),fi"| __truncated__
[13:25:12.066]  $ rscript_envs    : NULL
[13:25:12.066]  $ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[13:25:12.066]  $ rscript_startup : NULL
[13:25:12.066]  $ rscript_sh      : chr "sh"
[13:25:12.066]  $ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[13:25:12.066]  $ methods         : logi TRUE
[13:25:12.066]  $ socketOptions   : chr "no-delay"
[13:25:12.066]  $ useXDR          : logi FALSE
[13:25:12.066]  $ outfile         : chr "/dev/null"
[13:25:12.066]  $ renice          : int NA
[13:25:12.066]  $ rshcmd          : NULL
[13:25:12.066]  $ user            : chr(0) 
[13:25:12.066]  $ revtunnel       : logi FALSE
[13:25:12.066]  $ rshlogfile      : NULL
[13:25:12.066]  $ rshopts         : chr(0) 
[13:25:12.066]  $ rank            : int 1
[13:25:12.066]  $ manual          : logi FALSE
[13:25:12.066]  $ dryrun          : logi FALSE
[13:25:12.066]  $ quiet           : logi FALSE
[13:25:12.066]  $ setup_strategy  : chr "parallel"
[13:25:12.066]  $ local_cmd       : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[13:25:12.066]  $ pidfile         : chr "/tmp/Rtmp2TLbxL/worker.rank=1.parallelly.parent=93492.16d345b1cb3fa.pid"
[13:25:12.066]  $ rshcmd_label    : NULL
[13:25:12.066]  $ rsh_call        : NULL
[13:25:12.066]  $ cmd             : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[13:25:12.066]  $ localMachine    : logi TRUE
[13:25:12.066]  $ make_fcn        :function (worker = getOption2("parallelly.localhost.hostname", "localhost"), 
[13:25:12.066]     master = NULL, port, connectTimeout = getOption2("parallelly.makeNodePSOCK.connectTimeout", 
[13:25:12.066]         2 * 60), timeout = getOption2("parallelly.makeNodePSOCK.timeout", 
[13:25:12.066]         30 * 24 * 60 * 60), rscript = NULL, homogeneous = NULL, rscript_args = NULL, 
[13:25:12.066]     rscript_envs = NULL, rscript_libs = NULL, rscript_startup = NULL, rscript_sh = c("auto", 
[13:25:12.066]         "cmd", "sh"), default_packages = c("datasets", "utils", "grDevices", 
[13:25:12.066]         "graphics", "stats", if (methods) "methods"), methods = TRUE, socketOptions = getOption2("parallelly.makeNodePSOCK.socketOptions", 
[13:25:12.066]         "no-delay"), useXDR = getOption2("parallelly.makeNodePSOCK.useXDR", 
[13:25:12.066]         FALSE), outfile = "/dev/null", renice = NA_integer_, rshcmd = getOption2("parallelly.makeNodePSOCK.rshcmd", 
[13:25:12.066]         NULL), user = NULL, revtunnel = NA, rshlogfile = NULL, rshopts = getOption2("parallelly.makeNodePSOCK.rshopts", 
[13:25:12.066]         NULL), rank = 1L, manual = FALSE, dryrun = FALSE, quiet = FALSE, 
[13:25:12.066]     setup_strategy = getOption2("parallelly.makeNodePSOCK.setup_strategy", 
[13:25:12.066]         "parallel"), action = c("launch", "options"), verbose = FALSE)  
[13:25:12.066]  $ arguments       :List of 28
[13:25:12.066]   ..$ worker          : chr "localhost"
[13:25:12.066]   ..$ master          : NULL
[13:25:12.066]   ..$ port            : int 11599
[13:25:12.066]   ..$ connectTimeout  : num 120
[13:25:12.066]   ..$ timeout         : num 2592000
[13:25:12.066]   ..$ rscript         : NULL
[13:25:12.066]   ..$ homogeneous     : NULL
[13:25:12.066]   ..$ rscript_args    : NULL
[13:25:12.066]   ..$ rscript_envs    : NULL
[13:25:12.066]   ..$ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[13:25:12.066]   ..$ rscript_startup : NULL
[13:25:12.066]   ..$ rscript_sh      : chr [1:3] "auto" "cmd" "sh"
[13:25:12.066]   ..$ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[13:25:12.066]   ..$ methods         : logi TRUE
[13:25:12.066]   ..$ socketOptions   : chr "no-delay"
[13:25:12.066]   ..$ useXDR          : logi FALSE
[13:25:12.066]   ..$ outfile         : chr "/dev/null"
[13:25:12.066]   ..$ renice          : int NA
[13:25:12.066]   ..$ rshcmd          : NULL
[13:25:12.066]   ..$ user            : NULL
[13:25:12.066]   ..$ revtunnel       : logi NA
[13:25:12.066]   ..$ rshlogfile      : NULL
[13:25:12.066]   ..$ rshopts         : NULL
[13:25:12.066]   ..$ rank            : int 1
[13:25:12.066]   ..$ manual          : logi FALSE
[13:25:12.066]   ..$ dryrun          : logi FALSE
[13:25:12.066]   ..$ quiet           : logi FALSE
[13:25:12.066]   ..$ setup_strategy  : chr "parallel"
[13:25:12.066]  - attr(*, "class")= chr [1:2] "makeNodePSOCKOptions" "makeNodeOptions"
[13:25:12.083] [local output] System call to launch all workers:
[13:25:12.083] [local output] '/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/Rtmp2TLbxL/worker.rank=1.parallelly.parent=93492.16d345b1cb3fa.pid")), silent = TRUE)' -e 'options(socketOptions = "no-delay")' -e '.libPaths(c("/usr/local/lib/R/site-library","/usr/local/lib/R/library"))' -e 'workRSOCK <- tryCatch(parallel:::.workRSOCK, error=function(e) parallel:::.slaveRSOCK); workRSOCK()' MASTER=localhost PORT=11599 OUT=/dev/null TIMEOUT=2592000 XDR=FALSE SETUPTIMEOUT=120 SETUPSTRATEGY=parallel
[13:25:12.083] [local output] Starting PSOCK main server
[13:25:12.089] [local output] Workers launched
[13:25:12.089] [local output] Waiting for workers to connect back
[13:25:12.090]  - [local output] 0 workers out of 2 ready
[13:25:12.349]  - [local output] 0 workers out of 2 ready
[13:25:12.349]  - [local output] 1 workers out of 2 ready
[13:25:12.363]  - [local output] 1 workers out of 2 ready
[13:25:12.363]  - [local output] 2 workers out of 2 ready
[13:25:12.363] [local output] Launching of workers completed
[13:25:12.363] [local output] Collecting session information from workers
[13:25:12.364] [local output]  - Worker #1 of 2
[13:25:12.365] [local output]  - Worker #2 of 2
[13:25:12.365] [local output] makeClusterPSOCK() ... done
[13:25:12.376] Packages needed by the future expression (n = 0): <none>
[13:25:12.376] Packages needed by future strategies (n = 0): <none>
[13:25:12.377] {
[13:25:12.377]     {
[13:25:12.377]         {
[13:25:12.377]             ...future.startTime <- base::Sys.time()
[13:25:12.377]             {
[13:25:12.377]                 {
[13:25:12.377]                   {
[13:25:12.377]                     {
[13:25:12.377]                       base::local({
[13:25:12.377]                         has_future <- base::requireNamespace("future", 
[13:25:12.377]                           quietly = TRUE)
[13:25:12.377]                         if (has_future) {
[13:25:12.377]                           ns <- base::getNamespace("future")
[13:25:12.377]                           version <- ns[[".package"]][["version"]]
[13:25:12.377]                           if (is.null(version)) 
[13:25:12.377]                             version <- utils::packageVersion("future")
[13:25:12.377]                         }
[13:25:12.377]                         else {
[13:25:12.377]                           version <- NULL
[13:25:12.377]                         }
[13:25:12.377]                         if (!has_future || version < "1.8.0") {
[13:25:12.377]                           info <- base::c(r_version = base::gsub("R version ", 
[13:25:12.377]                             "", base::R.version$version.string), 
[13:25:12.377]                             platform = base::sprintf("%s (%s-bit)", 
[13:25:12.377]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:25:12.377]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:25:12.377]                               "release", "version")], collapse = " "), 
[13:25:12.377]                             hostname = base::Sys.info()[["nodename"]])
[13:25:12.377]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:25:12.377]                             info)
[13:25:12.377]                           info <- base::paste(info, collapse = "; ")
[13:25:12.377]                           if (!has_future) {
[13:25:12.377]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:25:12.377]                               info)
[13:25:12.377]                           }
[13:25:12.377]                           else {
[13:25:12.377]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:25:12.377]                               info, version)
[13:25:12.377]                           }
[13:25:12.377]                           base::stop(msg)
[13:25:12.377]                         }
[13:25:12.377]                       })
[13:25:12.377]                     }
[13:25:12.377]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[13:25:12.377]                     base::options(mc.cores = 1L)
[13:25:12.377]                   }
[13:25:12.377]                   options(future.plan = NULL)
[13:25:12.377]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:25:12.377]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:25:12.377]                 }
[13:25:12.377]                 ...future.workdir <- getwd()
[13:25:12.377]             }
[13:25:12.377]             ...future.oldOptions <- base::as.list(base::.Options)
[13:25:12.377]             ...future.oldEnvVars <- base::Sys.getenv()
[13:25:12.377]         }
[13:25:12.377]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:25:12.377]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:25:12.377]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:25:12.377]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:25:12.377]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:25:12.377]             future.stdout.windows.reencode = NULL, width = 80L)
[13:25:12.377]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:25:12.377]             base::names(...future.oldOptions))
[13:25:12.377]     }
[13:25:12.377]     if (FALSE) {
[13:25:12.377]     }
[13:25:12.377]     else {
[13:25:12.377]         if (TRUE) {
[13:25:12.377]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:25:12.377]                 open = "w")
[13:25:12.377]         }
[13:25:12.377]         else {
[13:25:12.377]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:25:12.377]                 windows = "NUL", "/dev/null"), open = "w")
[13:25:12.377]         }
[13:25:12.377]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:25:12.377]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:25:12.377]             base::sink(type = "output", split = FALSE)
[13:25:12.377]             base::close(...future.stdout)
[13:25:12.377]         }, add = TRUE)
[13:25:12.377]     }
[13:25:12.377]     ...future.frame <- base::sys.nframe()
[13:25:12.377]     ...future.conditions <- base::list()
[13:25:12.377]     ...future.rng <- base::globalenv()$.Random.seed
[13:25:12.377]     if (FALSE) {
[13:25:12.377]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:25:12.377]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:25:12.377]     }
[13:25:12.377]     ...future.result <- base::tryCatch({
[13:25:12.377]         base::withCallingHandlers({
[13:25:12.377]             ...future.value <- base::withVisible(base::local({
[13:25:12.377]                 ...future.makeSendCondition <- base::local({
[13:25:12.377]                   sendCondition <- NULL
[13:25:12.377]                   function(frame = 1L) {
[13:25:12.377]                     if (is.function(sendCondition)) 
[13:25:12.377]                       return(sendCondition)
[13:25:12.377]                     ns <- getNamespace("parallel")
[13:25:12.377]                     if (exists("sendData", mode = "function", 
[13:25:12.377]                       envir = ns)) {
[13:25:12.377]                       parallel_sendData <- get("sendData", mode = "function", 
[13:25:12.377]                         envir = ns)
[13:25:12.377]                       envir <- sys.frame(frame)
[13:25:12.377]                       master <- NULL
[13:25:12.377]                       while (!identical(envir, .GlobalEnv) && 
[13:25:12.377]                         !identical(envir, emptyenv())) {
[13:25:12.377]                         if (exists("master", mode = "list", envir = envir, 
[13:25:12.377]                           inherits = FALSE)) {
[13:25:12.377]                           master <- get("master", mode = "list", 
[13:25:12.377]                             envir = envir, inherits = FALSE)
[13:25:12.377]                           if (inherits(master, c("SOCKnode", 
[13:25:12.377]                             "SOCK0node"))) {
[13:25:12.377]                             sendCondition <<- function(cond) {
[13:25:12.377]                               data <- list(type = "VALUE", value = cond, 
[13:25:12.377]                                 success = TRUE)
[13:25:12.377]                               parallel_sendData(master, data)
[13:25:12.377]                             }
[13:25:12.377]                             return(sendCondition)
[13:25:12.377]                           }
[13:25:12.377]                         }
[13:25:12.377]                         frame <- frame + 1L
[13:25:12.377]                         envir <- sys.frame(frame)
[13:25:12.377]                       }
[13:25:12.377]                     }
[13:25:12.377]                     sendCondition <<- function(cond) NULL
[13:25:12.377]                   }
[13:25:12.377]                 })
[13:25:12.377]                 withCallingHandlers({
[13:25:12.377]                   NA
[13:25:12.377]                 }, immediateCondition = function(cond) {
[13:25:12.377]                   sendCondition <- ...future.makeSendCondition()
[13:25:12.377]                   sendCondition(cond)
[13:25:12.377]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:25:12.377]                   {
[13:25:12.377]                     inherits <- base::inherits
[13:25:12.377]                     invokeRestart <- base::invokeRestart
[13:25:12.377]                     is.null <- base::is.null
[13:25:12.377]                     muffled <- FALSE
[13:25:12.377]                     if (inherits(cond, "message")) {
[13:25:12.377]                       muffled <- grepl(pattern, "muffleMessage")
[13:25:12.377]                       if (muffled) 
[13:25:12.377]                         invokeRestart("muffleMessage")
[13:25:12.377]                     }
[13:25:12.377]                     else if (inherits(cond, "warning")) {
[13:25:12.377]                       muffled <- grepl(pattern, "muffleWarning")
[13:25:12.377]                       if (muffled) 
[13:25:12.377]                         invokeRestart("muffleWarning")
[13:25:12.377]                     }
[13:25:12.377]                     else if (inherits(cond, "condition")) {
[13:25:12.377]                       if (!is.null(pattern)) {
[13:25:12.377]                         computeRestarts <- base::computeRestarts
[13:25:12.377]                         grepl <- base::grepl
[13:25:12.377]                         restarts <- computeRestarts(cond)
[13:25:12.377]                         for (restart in restarts) {
[13:25:12.377]                           name <- restart$name
[13:25:12.377]                           if (is.null(name)) 
[13:25:12.377]                             next
[13:25:12.377]                           if (!grepl(pattern, name)) 
[13:25:12.377]                             next
[13:25:12.377]                           invokeRestart(restart)
[13:25:12.377]                           muffled <- TRUE
[13:25:12.377]                           break
[13:25:12.377]                         }
[13:25:12.377]                       }
[13:25:12.377]                     }
[13:25:12.377]                     invisible(muffled)
[13:25:12.377]                   }
[13:25:12.377]                   muffleCondition(cond)
[13:25:12.377]                 })
[13:25:12.377]             }))
[13:25:12.377]             future::FutureResult(value = ...future.value$value, 
[13:25:12.377]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:25:12.377]                   ...future.rng), globalenv = if (FALSE) 
[13:25:12.377]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:25:12.377]                     ...future.globalenv.names))
[13:25:12.377]                 else NULL, started = ...future.startTime, version = "1.8")
[13:25:12.377]         }, condition = base::local({
[13:25:12.377]             c <- base::c
[13:25:12.377]             inherits <- base::inherits
[13:25:12.377]             invokeRestart <- base::invokeRestart
[13:25:12.377]             length <- base::length
[13:25:12.377]             list <- base::list
[13:25:12.377]             seq.int <- base::seq.int
[13:25:12.377]             signalCondition <- base::signalCondition
[13:25:12.377]             sys.calls <- base::sys.calls
[13:25:12.377]             `[[` <- base::`[[`
[13:25:12.377]             `+` <- base::`+`
[13:25:12.377]             `<<-` <- base::`<<-`
[13:25:12.377]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:25:12.377]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:25:12.377]                   3L)]
[13:25:12.377]             }
[13:25:12.377]             function(cond) {
[13:25:12.377]                 is_error <- inherits(cond, "error")
[13:25:12.377]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:25:12.377]                   NULL)
[13:25:12.377]                 if (is_error) {
[13:25:12.377]                   sessionInformation <- function() {
[13:25:12.377]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:25:12.377]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:25:12.377]                       search = base::search(), system = base::Sys.info())
[13:25:12.377]                   }
[13:25:12.377]                   ...future.conditions[[length(...future.conditions) + 
[13:25:12.377]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:25:12.377]                     cond$call), session = sessionInformation(), 
[13:25:12.377]                     timestamp = base::Sys.time(), signaled = 0L)
[13:25:12.377]                   signalCondition(cond)
[13:25:12.377]                 }
[13:25:12.377]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:25:12.377]                 "immediateCondition"))) {
[13:25:12.377]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:25:12.377]                   ...future.conditions[[length(...future.conditions) + 
[13:25:12.377]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:25:12.377]                   if (TRUE && !signal) {
[13:25:12.377]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:25:12.377]                     {
[13:25:12.377]                       inherits <- base::inherits
[13:25:12.377]                       invokeRestart <- base::invokeRestart
[13:25:12.377]                       is.null <- base::is.null
[13:25:12.377]                       muffled <- FALSE
[13:25:12.377]                       if (inherits(cond, "message")) {
[13:25:12.377]                         muffled <- grepl(pattern, "muffleMessage")
[13:25:12.377]                         if (muffled) 
[13:25:12.377]                           invokeRestart("muffleMessage")
[13:25:12.377]                       }
[13:25:12.377]                       else if (inherits(cond, "warning")) {
[13:25:12.377]                         muffled <- grepl(pattern, "muffleWarning")
[13:25:12.377]                         if (muffled) 
[13:25:12.377]                           invokeRestart("muffleWarning")
[13:25:12.377]                       }
[13:25:12.377]                       else if (inherits(cond, "condition")) {
[13:25:12.377]                         if (!is.null(pattern)) {
[13:25:12.377]                           computeRestarts <- base::computeRestarts
[13:25:12.377]                           grepl <- base::grepl
[13:25:12.377]                           restarts <- computeRestarts(cond)
[13:25:12.377]                           for (restart in restarts) {
[13:25:12.377]                             name <- restart$name
[13:25:12.377]                             if (is.null(name)) 
[13:25:12.377]                               next
[13:25:12.377]                             if (!grepl(pattern, name)) 
[13:25:12.377]                               next
[13:25:12.377]                             invokeRestart(restart)
[13:25:12.377]                             muffled <- TRUE
[13:25:12.377]                             break
[13:25:12.377]                           }
[13:25:12.377]                         }
[13:25:12.377]                       }
[13:25:12.377]                       invisible(muffled)
[13:25:12.377]                     }
[13:25:12.377]                     muffleCondition(cond, pattern = "^muffle")
[13:25:12.377]                   }
[13:25:12.377]                 }
[13:25:12.377]                 else {
[13:25:12.377]                   if (TRUE) {
[13:25:12.377]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:25:12.377]                     {
[13:25:12.377]                       inherits <- base::inherits
[13:25:12.377]                       invokeRestart <- base::invokeRestart
[13:25:12.377]                       is.null <- base::is.null
[13:25:12.377]                       muffled <- FALSE
[13:25:12.377]                       if (inherits(cond, "message")) {
[13:25:12.377]                         muffled <- grepl(pattern, "muffleMessage")
[13:25:12.377]                         if (muffled) 
[13:25:12.377]                           invokeRestart("muffleMessage")
[13:25:12.377]                       }
[13:25:12.377]                       else if (inherits(cond, "warning")) {
[13:25:12.377]                         muffled <- grepl(pattern, "muffleWarning")
[13:25:12.377]                         if (muffled) 
[13:25:12.377]                           invokeRestart("muffleWarning")
[13:25:12.377]                       }
[13:25:12.377]                       else if (inherits(cond, "condition")) {
[13:25:12.377]                         if (!is.null(pattern)) {
[13:25:12.377]                           computeRestarts <- base::computeRestarts
[13:25:12.377]                           grepl <- base::grepl
[13:25:12.377]                           restarts <- computeRestarts(cond)
[13:25:12.377]                           for (restart in restarts) {
[13:25:12.377]                             name <- restart$name
[13:25:12.377]                             if (is.null(name)) 
[13:25:12.377]                               next
[13:25:12.377]                             if (!grepl(pattern, name)) 
[13:25:12.377]                               next
[13:25:12.377]                             invokeRestart(restart)
[13:25:12.377]                             muffled <- TRUE
[13:25:12.377]                             break
[13:25:12.377]                           }
[13:25:12.377]                         }
[13:25:12.377]                       }
[13:25:12.377]                       invisible(muffled)
[13:25:12.377]                     }
[13:25:12.377]                     muffleCondition(cond, pattern = "^muffle")
[13:25:12.377]                   }
[13:25:12.377]                 }
[13:25:12.377]             }
[13:25:12.377]         }))
[13:25:12.377]     }, error = function(ex) {
[13:25:12.377]         base::structure(base::list(value = NULL, visible = NULL, 
[13:25:12.377]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:25:12.377]                 ...future.rng), started = ...future.startTime, 
[13:25:12.377]             finished = Sys.time(), session_uuid = NA_character_, 
[13:25:12.377]             version = "1.8"), class = "FutureResult")
[13:25:12.377]     }, finally = {
[13:25:12.377]         if (!identical(...future.workdir, getwd())) 
[13:25:12.377]             setwd(...future.workdir)
[13:25:12.377]         {
[13:25:12.377]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:25:12.377]                 ...future.oldOptions$nwarnings <- NULL
[13:25:12.377]             }
[13:25:12.377]             base::options(...future.oldOptions)
[13:25:12.377]             if (.Platform$OS.type == "windows") {
[13:25:12.377]                 old_names <- names(...future.oldEnvVars)
[13:25:12.377]                 envs <- base::Sys.getenv()
[13:25:12.377]                 names <- names(envs)
[13:25:12.377]                 common <- intersect(names, old_names)
[13:25:12.377]                 added <- setdiff(names, old_names)
[13:25:12.377]                 removed <- setdiff(old_names, names)
[13:25:12.377]                 changed <- common[...future.oldEnvVars[common] != 
[13:25:12.377]                   envs[common]]
[13:25:12.377]                 NAMES <- toupper(changed)
[13:25:12.377]                 args <- list()
[13:25:12.377]                 for (kk in seq_along(NAMES)) {
[13:25:12.377]                   name <- changed[[kk]]
[13:25:12.377]                   NAME <- NAMES[[kk]]
[13:25:12.377]                   if (name != NAME && is.element(NAME, old_names)) 
[13:25:12.377]                     next
[13:25:12.377]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:25:12.377]                 }
[13:25:12.377]                 NAMES <- toupper(added)
[13:25:12.377]                 for (kk in seq_along(NAMES)) {
[13:25:12.377]                   name <- added[[kk]]
[13:25:12.377]                   NAME <- NAMES[[kk]]
[13:25:12.377]                   if (name != NAME && is.element(NAME, old_names)) 
[13:25:12.377]                     next
[13:25:12.377]                   args[[name]] <- ""
[13:25:12.377]                 }
[13:25:12.377]                 NAMES <- toupper(removed)
[13:25:12.377]                 for (kk in seq_along(NAMES)) {
[13:25:12.377]                   name <- removed[[kk]]
[13:25:12.377]                   NAME <- NAMES[[kk]]
[13:25:12.377]                   if (name != NAME && is.element(NAME, old_names)) 
[13:25:12.377]                     next
[13:25:12.377]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:25:12.377]                 }
[13:25:12.377]                 if (length(args) > 0) 
[13:25:12.377]                   base::do.call(base::Sys.setenv, args = args)
[13:25:12.377]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:25:12.377]             }
[13:25:12.377]             else {
[13:25:12.377]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:25:12.377]             }
[13:25:12.377]             {
[13:25:12.377]                 if (base::length(...future.futureOptionsAdded) > 
[13:25:12.377]                   0L) {
[13:25:12.377]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:25:12.377]                   base::names(opts) <- ...future.futureOptionsAdded
[13:25:12.377]                   base::options(opts)
[13:25:12.377]                 }
[13:25:12.377]                 {
[13:25:12.377]                   {
[13:25:12.377]                     base::options(mc.cores = ...future.mc.cores.old)
[13:25:12.377]                     NULL
[13:25:12.377]                   }
[13:25:12.377]                   options(future.plan = NULL)
[13:25:12.377]                   if (is.na(NA_character_)) 
[13:25:12.377]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:25:12.377]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:25:12.377]                   future::plan(list(function (..., workers = availableCores(), 
[13:25:12.377]                     lazy = FALSE, rscript_libs = .libPaths(), 
[13:25:12.377]                     envir = parent.frame()) 
[13:25:12.377]                   {
[13:25:12.377]                     if (is.function(workers)) 
[13:25:12.377]                       workers <- workers()
[13:25:12.377]                     workers <- structure(as.integer(workers), 
[13:25:12.377]                       class = class(workers))
[13:25:12.377]                     stop_if_not(length(workers) == 1, is.finite(workers), 
[13:25:12.377]                       workers >= 1)
[13:25:12.377]                     if (workers == 1L && !inherits(workers, "AsIs")) {
[13:25:12.377]                       return(sequential(..., lazy = TRUE, envir = envir))
[13:25:12.377]                     }
[13:25:12.377]                     future <- MultisessionFuture(..., workers = workers, 
[13:25:12.377]                       lazy = lazy, rscript_libs = rscript_libs, 
[13:25:12.377]                       envir = envir)
[13:25:12.377]                     if (!future$lazy) 
[13:25:12.377]                       future <- run(future)
[13:25:12.377]                     invisible(future)
[13:25:12.377]                   }), .cleanup = FALSE, .init = FALSE)
[13:25:12.377]                 }
[13:25:12.377]             }
[13:25:12.377]         }
[13:25:12.377]     })
[13:25:12.377]     if (TRUE) {
[13:25:12.377]         base::sink(type = "output", split = FALSE)
[13:25:12.377]         if (TRUE) {
[13:25:12.377]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:25:12.377]         }
[13:25:12.377]         else {
[13:25:12.377]             ...future.result["stdout"] <- base::list(NULL)
[13:25:12.377]         }
[13:25:12.377]         base::close(...future.stdout)
[13:25:12.377]         ...future.stdout <- NULL
[13:25:12.377]     }
[13:25:12.377]     ...future.result$conditions <- ...future.conditions
[13:25:12.377]     ...future.result$finished <- base::Sys.time()
[13:25:12.377]     ...future.result
[13:25:12.377] }
[13:25:12.430] MultisessionFuture started
[13:25:12.431] result() for ClusterFuture ...
[13:25:12.432] receiveMessageFromWorker() for ClusterFuture ...
[13:25:12.432] - Validating connection of MultisessionFuture
[13:25:12.476] - received message: FutureResult
[13:25:12.476] - Received FutureResult
[13:25:12.476] - Erased future from FutureRegistry
[13:25:12.477] result() for ClusterFuture ...
[13:25:12.477] - result already collected: FutureResult
[13:25:12.477] result() for ClusterFuture ... done
[13:25:12.477] receiveMessageFromWorker() for ClusterFuture ... done
[13:25:12.477] result() for ClusterFuture ... done
[13:25:12.477] result() for ClusterFuture ...
[13:25:12.477] - result already collected: FutureResult
[13:25:12.477] result() for ClusterFuture ... done
[13:25:12.477] plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ... DONE
[13:25:12.481] plan(): nbrOfWorkers() = 2
- stdout = TRUE
[13:25:12.482] getGlobalsAndPackages() ...
[13:25:12.482] Searching for globals...
[13:25:12.486] - globals found: [9] ‘{’, ‘print’, ‘:’, ‘str’, ‘cat’, ‘letters’, ‘write.table’, ‘[’, ‘::’
[13:25:12.486] Searching for globals ... DONE
[13:25:12.486] Resolving globals: FALSE
[13:25:12.487] 
[13:25:12.487] - packages: [1] ‘utils’
[13:25:12.487] getGlobalsAndPackages() ... DONE
[13:25:12.487] run() for ‘Future’ ...
[13:25:12.487] - state: ‘created’
[13:25:12.487] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[13:25:12.502] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:25:12.502] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[13:25:12.502]   - Field: ‘node’
[13:25:12.502]   - Field: ‘label’
[13:25:12.502]   - Field: ‘local’
[13:25:12.502]   - Field: ‘owner’
[13:25:12.503]   - Field: ‘envir’
[13:25:12.503]   - Field: ‘workers’
[13:25:12.503]   - Field: ‘packages’
[13:25:12.503]   - Field: ‘gc’
[13:25:12.503]   - Field: ‘conditions’
[13:25:12.503]   - Field: ‘persistent’
[13:25:12.503]   - Field: ‘expr’
[13:25:12.503]   - Field: ‘uuid’
[13:25:12.504]   - Field: ‘seed’
[13:25:12.504]   - Field: ‘version’
[13:25:12.504]   - Field: ‘result’
[13:25:12.504]   - Field: ‘asynchronous’
[13:25:12.504]   - Field: ‘calls’
[13:25:12.504]   - Field: ‘globals’
[13:25:12.504]   - Field: ‘stdout’
[13:25:12.504]   - Field: ‘earlySignal’
[13:25:12.505]   - Field: ‘lazy’
[13:25:12.505]   - Field: ‘state’
[13:25:12.505] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[13:25:12.505] - Launch lazy future ...
[13:25:12.505] Packages needed by the future expression (n = 1): ‘utils’
[13:25:12.505] Packages needed by future strategies (n = 0): <none>
[13:25:12.506] {
[13:25:12.506]     {
[13:25:12.506]         {
[13:25:12.506]             ...future.startTime <- base::Sys.time()
[13:25:12.506]             {
[13:25:12.506]                 {
[13:25:12.506]                   {
[13:25:12.506]                     {
[13:25:12.506]                       {
[13:25:12.506]                         base::local({
[13:25:12.506]                           has_future <- base::requireNamespace("future", 
[13:25:12.506]                             quietly = TRUE)
[13:25:12.506]                           if (has_future) {
[13:25:12.506]                             ns <- base::getNamespace("future")
[13:25:12.506]                             version <- ns[[".package"]][["version"]]
[13:25:12.506]                             if (is.null(version)) 
[13:25:12.506]                               version <- utils::packageVersion("future")
[13:25:12.506]                           }
[13:25:12.506]                           else {
[13:25:12.506]                             version <- NULL
[13:25:12.506]                           }
[13:25:12.506]                           if (!has_future || version < "1.8.0") {
[13:25:12.506]                             info <- base::c(r_version = base::gsub("R version ", 
[13:25:12.506]                               "", base::R.version$version.string), 
[13:25:12.506]                               platform = base::sprintf("%s (%s-bit)", 
[13:25:12.506]                                 base::R.version$platform, 8 * 
[13:25:12.506]                                   base::.Machine$sizeof.pointer), 
[13:25:12.506]                               os = base::paste(base::Sys.info()[base::c("sysname", 
[13:25:12.506]                                 "release", "version")], collapse = " "), 
[13:25:12.506]                               hostname = base::Sys.info()[["nodename"]])
[13:25:12.506]                             info <- base::sprintf("%s: %s", base::names(info), 
[13:25:12.506]                               info)
[13:25:12.506]                             info <- base::paste(info, collapse = "; ")
[13:25:12.506]                             if (!has_future) {
[13:25:12.506]                               msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:25:12.506]                                 info)
[13:25:12.506]                             }
[13:25:12.506]                             else {
[13:25:12.506]                               msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:25:12.506]                                 info, version)
[13:25:12.506]                             }
[13:25:12.506]                             base::stop(msg)
[13:25:12.506]                           }
[13:25:12.506]                         })
[13:25:12.506]                       }
[13:25:12.506]                       ...future.mc.cores.old <- base::getOption("mc.cores")
[13:25:12.506]                       base::options(mc.cores = 1L)
[13:25:12.506]                     }
[13:25:12.506]                     base::local({
[13:25:12.506]                       for (pkg in "utils") {
[13:25:12.506]                         base::loadNamespace(pkg)
[13:25:12.506]                         base::library(pkg, character.only = TRUE)
[13:25:12.506]                       }
[13:25:12.506]                     })
[13:25:12.506]                   }
[13:25:12.506]                   options(future.plan = NULL)
[13:25:12.506]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:25:12.506]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:25:12.506]                 }
[13:25:12.506]                 ...future.workdir <- getwd()
[13:25:12.506]             }
[13:25:12.506]             ...future.oldOptions <- base::as.list(base::.Options)
[13:25:12.506]             ...future.oldEnvVars <- base::Sys.getenv()
[13:25:12.506]         }
[13:25:12.506]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:25:12.506]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:25:12.506]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:25:12.506]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:25:12.506]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:25:12.506]             future.stdout.windows.reencode = NULL, width = 80L)
[13:25:12.506]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:25:12.506]             base::names(...future.oldOptions))
[13:25:12.506]     }
[13:25:12.506]     if (FALSE) {
[13:25:12.506]     }
[13:25:12.506]     else {
[13:25:12.506]         if (TRUE) {
[13:25:12.506]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:25:12.506]                 open = "w")
[13:25:12.506]         }
[13:25:12.506]         else {
[13:25:12.506]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:25:12.506]                 windows = "NUL", "/dev/null"), open = "w")
[13:25:12.506]         }
[13:25:12.506]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:25:12.506]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:25:12.506]             base::sink(type = "output", split = FALSE)
[13:25:12.506]             base::close(...future.stdout)
[13:25:12.506]         }, add = TRUE)
[13:25:12.506]     }
[13:25:12.506]     ...future.frame <- base::sys.nframe()
[13:25:12.506]     ...future.conditions <- base::list()
[13:25:12.506]     ...future.rng <- base::globalenv()$.Random.seed
[13:25:12.506]     if (FALSE) {
[13:25:12.506]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:25:12.506]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:25:12.506]     }
[13:25:12.506]     ...future.result <- base::tryCatch({
[13:25:12.506]         base::withCallingHandlers({
[13:25:12.506]             ...future.value <- base::withVisible(base::local({
[13:25:12.506]                 ...future.makeSendCondition <- base::local({
[13:25:12.506]                   sendCondition <- NULL
[13:25:12.506]                   function(frame = 1L) {
[13:25:12.506]                     if (is.function(sendCondition)) 
[13:25:12.506]                       return(sendCondition)
[13:25:12.506]                     ns <- getNamespace("parallel")
[13:25:12.506]                     if (exists("sendData", mode = "function", 
[13:25:12.506]                       envir = ns)) {
[13:25:12.506]                       parallel_sendData <- get("sendData", mode = "function", 
[13:25:12.506]                         envir = ns)
[13:25:12.506]                       envir <- sys.frame(frame)
[13:25:12.506]                       master <- NULL
[13:25:12.506]                       while (!identical(envir, .GlobalEnv) && 
[13:25:12.506]                         !identical(envir, emptyenv())) {
[13:25:12.506]                         if (exists("master", mode = "list", envir = envir, 
[13:25:12.506]                           inherits = FALSE)) {
[13:25:12.506]                           master <- get("master", mode = "list", 
[13:25:12.506]                             envir = envir, inherits = FALSE)
[13:25:12.506]                           if (inherits(master, c("SOCKnode", 
[13:25:12.506]                             "SOCK0node"))) {
[13:25:12.506]                             sendCondition <<- function(cond) {
[13:25:12.506]                               data <- list(type = "VALUE", value = cond, 
[13:25:12.506]                                 success = TRUE)
[13:25:12.506]                               parallel_sendData(master, data)
[13:25:12.506]                             }
[13:25:12.506]                             return(sendCondition)
[13:25:12.506]                           }
[13:25:12.506]                         }
[13:25:12.506]                         frame <- frame + 1L
[13:25:12.506]                         envir <- sys.frame(frame)
[13:25:12.506]                       }
[13:25:12.506]                     }
[13:25:12.506]                     sendCondition <<- function(cond) NULL
[13:25:12.506]                   }
[13:25:12.506]                 })
[13:25:12.506]                 withCallingHandlers({
[13:25:12.506]                   {
[13:25:12.506]                     print(1:50)
[13:25:12.506]                     str(1:50)
[13:25:12.506]                     cat(letters, sep = "-")
[13:25:12.506]                     cat(1:6, collapse = "\n")
[13:25:12.506]                     write.table(datasets::iris[1:10, ], sep = "\t")
[13:25:12.506]                     42L
[13:25:12.506]                   }
[13:25:12.506]                 }, immediateCondition = function(cond) {
[13:25:12.506]                   sendCondition <- ...future.makeSendCondition()
[13:25:12.506]                   sendCondition(cond)
[13:25:12.506]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:25:12.506]                   {
[13:25:12.506]                     inherits <- base::inherits
[13:25:12.506]                     invokeRestart <- base::invokeRestart
[13:25:12.506]                     is.null <- base::is.null
[13:25:12.506]                     muffled <- FALSE
[13:25:12.506]                     if (inherits(cond, "message")) {
[13:25:12.506]                       muffled <- grepl(pattern, "muffleMessage")
[13:25:12.506]                       if (muffled) 
[13:25:12.506]                         invokeRestart("muffleMessage")
[13:25:12.506]                     }
[13:25:12.506]                     else if (inherits(cond, "warning")) {
[13:25:12.506]                       muffled <- grepl(pattern, "muffleWarning")
[13:25:12.506]                       if (muffled) 
[13:25:12.506]                         invokeRestart("muffleWarning")
[13:25:12.506]                     }
[13:25:12.506]                     else if (inherits(cond, "condition")) {
[13:25:12.506]                       if (!is.null(pattern)) {
[13:25:12.506]                         computeRestarts <- base::computeRestarts
[13:25:12.506]                         grepl <- base::grepl
[13:25:12.506]                         restarts <- computeRestarts(cond)
[13:25:12.506]                         for (restart in restarts) {
[13:25:12.506]                           name <- restart$name
[13:25:12.506]                           if (is.null(name)) 
[13:25:12.506]                             next
[13:25:12.506]                           if (!grepl(pattern, name)) 
[13:25:12.506]                             next
[13:25:12.506]                           invokeRestart(restart)
[13:25:12.506]                           muffled <- TRUE
[13:25:12.506]                           break
[13:25:12.506]                         }
[13:25:12.506]                       }
[13:25:12.506]                     }
[13:25:12.506]                     invisible(muffled)
[13:25:12.506]                   }
[13:25:12.506]                   muffleCondition(cond)
[13:25:12.506]                 })
[13:25:12.506]             }))
[13:25:12.506]             future::FutureResult(value = ...future.value$value, 
[13:25:12.506]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:25:12.506]                   ...future.rng), globalenv = if (FALSE) 
[13:25:12.506]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:25:12.506]                     ...future.globalenv.names))
[13:25:12.506]                 else NULL, started = ...future.startTime, version = "1.8")
[13:25:12.506]         }, condition = base::local({
[13:25:12.506]             c <- base::c
[13:25:12.506]             inherits <- base::inherits
[13:25:12.506]             invokeRestart <- base::invokeRestart
[13:25:12.506]             length <- base::length
[13:25:12.506]             list <- base::list
[13:25:12.506]             seq.int <- base::seq.int
[13:25:12.506]             signalCondition <- base::signalCondition
[13:25:12.506]             sys.calls <- base::sys.calls
[13:25:12.506]             `[[` <- base::`[[`
[13:25:12.506]             `+` <- base::`+`
[13:25:12.506]             `<<-` <- base::`<<-`
[13:25:12.506]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:25:12.506]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:25:12.506]                   3L)]
[13:25:12.506]             }
[13:25:12.506]             function(cond) {
[13:25:12.506]                 is_error <- inherits(cond, "error")
[13:25:12.506]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:25:12.506]                   NULL)
[13:25:12.506]                 if (is_error) {
[13:25:12.506]                   sessionInformation <- function() {
[13:25:12.506]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:25:12.506]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:25:12.506]                       search = base::search(), system = base::Sys.info())
[13:25:12.506]                   }
[13:25:12.506]                   ...future.conditions[[length(...future.conditions) + 
[13:25:12.506]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:25:12.506]                     cond$call), session = sessionInformation(), 
[13:25:12.506]                     timestamp = base::Sys.time(), signaled = 0L)
[13:25:12.506]                   signalCondition(cond)
[13:25:12.506]                 }
[13:25:12.506]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:25:12.506]                 "immediateCondition"))) {
[13:25:12.506]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:25:12.506]                   ...future.conditions[[length(...future.conditions) + 
[13:25:12.506]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:25:12.506]                   if (TRUE && !signal) {
[13:25:12.506]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:25:12.506]                     {
[13:25:12.506]                       inherits <- base::inherits
[13:25:12.506]                       invokeRestart <- base::invokeRestart
[13:25:12.506]                       is.null <- base::is.null
[13:25:12.506]                       muffled <- FALSE
[13:25:12.506]                       if (inherits(cond, "message")) {
[13:25:12.506]                         muffled <- grepl(pattern, "muffleMessage")
[13:25:12.506]                         if (muffled) 
[13:25:12.506]                           invokeRestart("muffleMessage")
[13:25:12.506]                       }
[13:25:12.506]                       else if (inherits(cond, "warning")) {
[13:25:12.506]                         muffled <- grepl(pattern, "muffleWarning")
[13:25:12.506]                         if (muffled) 
[13:25:12.506]                           invokeRestart("muffleWarning")
[13:25:12.506]                       }
[13:25:12.506]                       else if (inherits(cond, "condition")) {
[13:25:12.506]                         if (!is.null(pattern)) {
[13:25:12.506]                           computeRestarts <- base::computeRestarts
[13:25:12.506]                           grepl <- base::grepl
[13:25:12.506]                           restarts <- computeRestarts(cond)
[13:25:12.506]                           for (restart in restarts) {
[13:25:12.506]                             name <- restart$name
[13:25:12.506]                             if (is.null(name)) 
[13:25:12.506]                               next
[13:25:12.506]                             if (!grepl(pattern, name)) 
[13:25:12.506]                               next
[13:25:12.506]                             invokeRestart(restart)
[13:25:12.506]                             muffled <- TRUE
[13:25:12.506]                             break
[13:25:12.506]                           }
[13:25:12.506]                         }
[13:25:12.506]                       }
[13:25:12.506]                       invisible(muffled)
[13:25:12.506]                     }
[13:25:12.506]                     muffleCondition(cond, pattern = "^muffle")
[13:25:12.506]                   }
[13:25:12.506]                 }
[13:25:12.506]                 else {
[13:25:12.506]                   if (TRUE) {
[13:25:12.506]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:25:12.506]                     {
[13:25:12.506]                       inherits <- base::inherits
[13:25:12.506]                       invokeRestart <- base::invokeRestart
[13:25:12.506]                       is.null <- base::is.null
[13:25:12.506]                       muffled <- FALSE
[13:25:12.506]                       if (inherits(cond, "message")) {
[13:25:12.506]                         muffled <- grepl(pattern, "muffleMessage")
[13:25:12.506]                         if (muffled) 
[13:25:12.506]                           invokeRestart("muffleMessage")
[13:25:12.506]                       }
[13:25:12.506]                       else if (inherits(cond, "warning")) {
[13:25:12.506]                         muffled <- grepl(pattern, "muffleWarning")
[13:25:12.506]                         if (muffled) 
[13:25:12.506]                           invokeRestart("muffleWarning")
[13:25:12.506]                       }
[13:25:12.506]                       else if (inherits(cond, "condition")) {
[13:25:12.506]                         if (!is.null(pattern)) {
[13:25:12.506]                           computeRestarts <- base::computeRestarts
[13:25:12.506]                           grepl <- base::grepl
[13:25:12.506]                           restarts <- computeRestarts(cond)
[13:25:12.506]                           for (restart in restarts) {
[13:25:12.506]                             name <- restart$name
[13:25:12.506]                             if (is.null(name)) 
[13:25:12.506]                               next
[13:25:12.506]                             if (!grepl(pattern, name)) 
[13:25:12.506]                               next
[13:25:12.506]                             invokeRestart(restart)
[13:25:12.506]                             muffled <- TRUE
[13:25:12.506]                             break
[13:25:12.506]                           }
[13:25:12.506]                         }
[13:25:12.506]                       }
[13:25:12.506]                       invisible(muffled)
[13:25:12.506]                     }
[13:25:12.506]                     muffleCondition(cond, pattern = "^muffle")
[13:25:12.506]                   }
[13:25:12.506]                 }
[13:25:12.506]             }
[13:25:12.506]         }))
[13:25:12.506]     }, error = function(ex) {
[13:25:12.506]         base::structure(base::list(value = NULL, visible = NULL, 
[13:25:12.506]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:25:12.506]                 ...future.rng), started = ...future.startTime, 
[13:25:12.506]             finished = Sys.time(), session_uuid = NA_character_, 
[13:25:12.506]             version = "1.8"), class = "FutureResult")
[13:25:12.506]     }, finally = {
[13:25:12.506]         if (!identical(...future.workdir, getwd())) 
[13:25:12.506]             setwd(...future.workdir)
[13:25:12.506]         {
[13:25:12.506]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:25:12.506]                 ...future.oldOptions$nwarnings <- NULL
[13:25:12.506]             }
[13:25:12.506]             base::options(...future.oldOptions)
[13:25:12.506]             if (.Platform$OS.type == "windows") {
[13:25:12.506]                 old_names <- names(...future.oldEnvVars)
[13:25:12.506]                 envs <- base::Sys.getenv()
[13:25:12.506]                 names <- names(envs)
[13:25:12.506]                 common <- intersect(names, old_names)
[13:25:12.506]                 added <- setdiff(names, old_names)
[13:25:12.506]                 removed <- setdiff(old_names, names)
[13:25:12.506]                 changed <- common[...future.oldEnvVars[common] != 
[13:25:12.506]                   envs[common]]
[13:25:12.506]                 NAMES <- toupper(changed)
[13:25:12.506]                 args <- list()
[13:25:12.506]                 for (kk in seq_along(NAMES)) {
[13:25:12.506]                   name <- changed[[kk]]
[13:25:12.506]                   NAME <- NAMES[[kk]]
[13:25:12.506]                   if (name != NAME && is.element(NAME, old_names)) 
[13:25:12.506]                     next
[13:25:12.506]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:25:12.506]                 }
[13:25:12.506]                 NAMES <- toupper(added)
[13:25:12.506]                 for (kk in seq_along(NAMES)) {
[13:25:12.506]                   name <- added[[kk]]
[13:25:12.506]                   NAME <- NAMES[[kk]]
[13:25:12.506]                   if (name != NAME && is.element(NAME, old_names)) 
[13:25:12.506]                     next
[13:25:12.506]                   args[[name]] <- ""
[13:25:12.506]                 }
[13:25:12.506]                 NAMES <- toupper(removed)
[13:25:12.506]                 for (kk in seq_along(NAMES)) {
[13:25:12.506]                   name <- removed[[kk]]
[13:25:12.506]                   NAME <- NAMES[[kk]]
[13:25:12.506]                   if (name != NAME && is.element(NAME, old_names)) 
[13:25:12.506]                     next
[13:25:12.506]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:25:12.506]                 }
[13:25:12.506]                 if (length(args) > 0) 
[13:25:12.506]                   base::do.call(base::Sys.setenv, args = args)
[13:25:12.506]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:25:12.506]             }
[13:25:12.506]             else {
[13:25:12.506]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:25:12.506]             }
[13:25:12.506]             {
[13:25:12.506]                 if (base::length(...future.futureOptionsAdded) > 
[13:25:12.506]                   0L) {
[13:25:12.506]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:25:12.506]                   base::names(opts) <- ...future.futureOptionsAdded
[13:25:12.506]                   base::options(opts)
[13:25:12.506]                 }
[13:25:12.506]                 {
[13:25:12.506]                   {
[13:25:12.506]                     base::options(mc.cores = ...future.mc.cores.old)
[13:25:12.506]                     NULL
[13:25:12.506]                   }
[13:25:12.506]                   options(future.plan = NULL)
[13:25:12.506]                   if (is.na(NA_character_)) 
[13:25:12.506]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:25:12.506]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:25:12.506]                   future::plan(list(function (..., workers = availableCores(), 
[13:25:12.506]                     lazy = FALSE, rscript_libs = .libPaths(), 
[13:25:12.506]                     envir = parent.frame()) 
[13:25:12.506]                   {
[13:25:12.506]                     if (is.function(workers)) 
[13:25:12.506]                       workers <- workers()
[13:25:12.506]                     workers <- structure(as.integer(workers), 
[13:25:12.506]                       class = class(workers))
[13:25:12.506]                     stop_if_not(length(workers) == 1, is.finite(workers), 
[13:25:12.506]                       workers >= 1)
[13:25:12.506]                     if (workers == 1L && !inherits(workers, "AsIs")) {
[13:25:12.506]                       return(sequential(..., lazy = TRUE, envir = envir))
[13:25:12.506]                     }
[13:25:12.506]                     future <- MultisessionFuture(..., workers = workers, 
[13:25:12.506]                       lazy = lazy, rscript_libs = rscript_libs, 
[13:25:12.506]                       envir = envir)
[13:25:12.506]                     if (!future$lazy) 
[13:25:12.506]                       future <- run(future)
[13:25:12.506]                     invisible(future)
[13:25:12.506]                   }), .cleanup = FALSE, .init = FALSE)
[13:25:12.506]                 }
[13:25:12.506]             }
[13:25:12.506]         }
[13:25:12.506]     })
[13:25:12.506]     if (TRUE) {
[13:25:12.506]         base::sink(type = "output", split = FALSE)
[13:25:12.506]         if (TRUE) {
[13:25:12.506]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:25:12.506]         }
[13:25:12.506]         else {
[13:25:12.506]             ...future.result["stdout"] <- base::list(NULL)
[13:25:12.506]         }
[13:25:12.506]         base::close(...future.stdout)
[13:25:12.506]         ...future.stdout <- NULL
[13:25:12.506]     }
[13:25:12.506]     ...future.result$conditions <- ...future.conditions
[13:25:12.506]     ...future.result$finished <- base::Sys.time()
[13:25:12.506]     ...future.result
[13:25:12.506] }
[13:25:12.510] MultisessionFuture started
[13:25:12.510] - Launch lazy future ... done
[13:25:12.510] run() for ‘MultisessionFuture’ ... done
[13:25:12.510] result() for ClusterFuture ...
[13:25:12.510] receiveMessageFromWorker() for ClusterFuture ...
[13:25:12.510] - Validating connection of MultisessionFuture
[13:25:12.561] - received message: FutureResult
[13:25:12.561] - Received FutureResult
[13:25:12.561] - Erased future from FutureRegistry
[13:25:12.561] result() for ClusterFuture ...
[13:25:12.562] - result already collected: FutureResult
[13:25:12.562] result() for ClusterFuture ... done
[13:25:12.562] receiveMessageFromWorker() for ClusterFuture ... done
[13:25:12.562] result() for ClusterFuture ... done
List of 11
 $ value       : int 42
 $ visible     : logi TRUE
 $ stdout      : chr " [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25\n[26] 26 27 28 29 30 31 32 33 3"| __truncated__
 $ conditions  : list()
 $ rng         : logi FALSE
 $ globalenv   : NULL
 $ started     : POSIXct[1:1], format: "2025-01-07 13:25:12"
 $ finished    : POSIXct[1:1], format: "2025-01-07 13:25:12"
 $ session_uuid: chr "c8f3ba03-05d2-c7fc-368c-7fdfc4734650"
  ..- attr(*, "source")=List of 5
  .. ..$ host  : Named chr "47b98e4ec3a9"
  .. .. ..- attr(*, "names")= chr "HOSTNAME"
  .. ..$ info  : Named chr [1:8] "Linux" "6.5.0-1025-azure" "#26~22.04.1-Ubuntu SMP Thu Jul 11 22:33:04 UTC 2024" "47b98e4ec3a9" ...
  .. .. ..- attr(*, "names")= chr [1:8] "sysname" "release" "version" "nodename" ...
  .. ..$ pid   : int 93595
  .. ..$ time  : POSIXct[1:1], format: "2025-01-07 13:25:12"
  .. ..$ random: int 2147483647
 $ r_info      :List of 4
  ..$ version      :Classes 'R_system_version', 'package_version', 'numeric_version'  hidden list of 1
  .. ..$ : int [1:3] 4 3 2
  ..$ os           : chr "unix"
  ..$ os_name      : chr "Linux"
  ..$ captures_utf8: logi TRUE
 $ version     : chr "1.8"
 - attr(*, "class")= chr "FutureResult"
[13:25:12.572] result() for ClusterFuture ...
[13:25:12.572] - result already collected: FutureResult
[13:25:12.572] result() for ClusterFuture ... done
[13:25:12.572] result() for ClusterFuture ...
[13:25:12.572] - result already collected: FutureResult
[13:25:12.572] result() for ClusterFuture ... done
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25
[26] 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50
 int [1:50] 1 2 3 4 5 6 7 8 9 10 ...
a-b-c-d-e-f-g-h-i-j-k-l-m-n-o-p-q-r-s-t-u-v-w-x-y-z1 2 3 4 5 6 
"Sepal.Length"	"Sepal.Width"	"Petal.Length"	"Petal.Width"	"Species"
"1"	5.1	3.5	1.4	0.2	"setosa"
"2"	4.9	3	1.4	0.2	"setosa"
"3"	4.7	3.2	1.3	0.2	"setosa"
"4"	4.6	3.1	1.5	0.2	"setosa"
"5"	5	3.6	1.4	0.2	"setosa"
"6"	5.4	3.9	1.7	0.4	"setosa"
"7"	4.6	3.4	1.4	0.3	"setosa"
"8"	5	3.4	1.5	0.2	"setosa"
"9"	4.4	2.9	1.4	0.2	"setosa"
"10"	4.9	3.1	1.5	0.1	"setosa"
FutureResult:
value: ‘integer’
visible: TRUE
stdout: character
conditions: [n = 0] 
RNG used: FALSE
duration: 0.008765697 secs (started 2025-01-07 13:25:12.552473)
version: 1.8
[13:25:12.573] getGlobalsAndPackages() ...
[13:25:12.573] Searching for globals...
[13:25:12.577] - globals found: [9] ‘{’, ‘print’, ‘:’, ‘str’, ‘cat’, ‘letters’, ‘write.table’, ‘[’, ‘::’
[13:25:12.577] Searching for globals ... DONE
[13:25:12.577] Resolving globals: FALSE
[13:25:12.578] 
[13:25:12.578] - packages: [1] ‘utils’
[13:25:12.578] getGlobalsAndPackages() ... DONE
[13:25:12.578] run() for ‘Future’ ...
[13:25:12.578] - state: ‘created’
[13:25:12.579] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[13:25:12.593] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:25:12.593] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[13:25:12.593]   - Field: ‘node’
[13:25:12.594]   - Field: ‘label’
[13:25:12.594]   - Field: ‘local’
[13:25:12.594]   - Field: ‘owner’
[13:25:12.594]   - Field: ‘envir’
[13:25:12.594]   - Field: ‘workers’
[13:25:12.594]   - Field: ‘packages’
[13:25:12.594]   - Field: ‘gc’
[13:25:12.594]   - Field: ‘conditions’
[13:25:12.594]   - Field: ‘persistent’
[13:25:12.594]   - Field: ‘expr’
[13:25:12.595]   - Field: ‘uuid’
[13:25:12.595]   - Field: ‘seed’
[13:25:12.595]   - Field: ‘version’
[13:25:12.595]   - Field: ‘result’
[13:25:12.595]   - Field: ‘asynchronous’
[13:25:12.595]   - Field: ‘calls’
[13:25:12.595]   - Field: ‘globals’
[13:25:12.595]   - Field: ‘stdout’
[13:25:12.596]   - Field: ‘earlySignal’
[13:25:12.596]   - Field: ‘lazy’
[13:25:12.596]   - Field: ‘state’
[13:25:12.596] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[13:25:12.596] - Launch lazy future ...
[13:25:12.596] Packages needed by the future expression (n = 1): ‘utils’
[13:25:12.597] Packages needed by future strategies (n = 0): <none>
[13:25:12.597] {
[13:25:12.597]     {
[13:25:12.597]         {
[13:25:12.597]             ...future.startTime <- base::Sys.time()
[13:25:12.597]             {
[13:25:12.597]                 {
[13:25:12.597]                   {
[13:25:12.597]                     {
[13:25:12.597]                       {
[13:25:12.597]                         base::local({
[13:25:12.597]                           has_future <- base::requireNamespace("future", 
[13:25:12.597]                             quietly = TRUE)
[13:25:12.597]                           if (has_future) {
[13:25:12.597]                             ns <- base::getNamespace("future")
[13:25:12.597]                             version <- ns[[".package"]][["version"]]
[13:25:12.597]                             if (is.null(version)) 
[13:25:12.597]                               version <- utils::packageVersion("future")
[13:25:12.597]                           }
[13:25:12.597]                           else {
[13:25:12.597]                             version <- NULL
[13:25:12.597]                           }
[13:25:12.597]                           if (!has_future || version < "1.8.0") {
[13:25:12.597]                             info <- base::c(r_version = base::gsub("R version ", 
[13:25:12.597]                               "", base::R.version$version.string), 
[13:25:12.597]                               platform = base::sprintf("%s (%s-bit)", 
[13:25:12.597]                                 base::R.version$platform, 8 * 
[13:25:12.597]                                   base::.Machine$sizeof.pointer), 
[13:25:12.597]                               os = base::paste(base::Sys.info()[base::c("sysname", 
[13:25:12.597]                                 "release", "version")], collapse = " "), 
[13:25:12.597]                               hostname = base::Sys.info()[["nodename"]])
[13:25:12.597]                             info <- base::sprintf("%s: %s", base::names(info), 
[13:25:12.597]                               info)
[13:25:12.597]                             info <- base::paste(info, collapse = "; ")
[13:25:12.597]                             if (!has_future) {
[13:25:12.597]                               msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:25:12.597]                                 info)
[13:25:12.597]                             }
[13:25:12.597]                             else {
[13:25:12.597]                               msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:25:12.597]                                 info, version)
[13:25:12.597]                             }
[13:25:12.597]                             base::stop(msg)
[13:25:12.597]                           }
[13:25:12.597]                         })
[13:25:12.597]                       }
[13:25:12.597]                       ...future.mc.cores.old <- base::getOption("mc.cores")
[13:25:12.597]                       base::options(mc.cores = 1L)
[13:25:12.597]                     }
[13:25:12.597]                     base::local({
[13:25:12.597]                       for (pkg in "utils") {
[13:25:12.597]                         base::loadNamespace(pkg)
[13:25:12.597]                         base::library(pkg, character.only = TRUE)
[13:25:12.597]                       }
[13:25:12.597]                     })
[13:25:12.597]                   }
[13:25:12.597]                   options(future.plan = NULL)
[13:25:12.597]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:25:12.597]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:25:12.597]                 }
[13:25:12.597]                 ...future.workdir <- getwd()
[13:25:12.597]             }
[13:25:12.597]             ...future.oldOptions <- base::as.list(base::.Options)
[13:25:12.597]             ...future.oldEnvVars <- base::Sys.getenv()
[13:25:12.597]         }
[13:25:12.597]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:25:12.597]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:25:12.597]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:25:12.597]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:25:12.597]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:25:12.597]             future.stdout.windows.reencode = NULL, width = 80L)
[13:25:12.597]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:25:12.597]             base::names(...future.oldOptions))
[13:25:12.597]     }
[13:25:12.597]     if (FALSE) {
[13:25:12.597]     }
[13:25:12.597]     else {
[13:25:12.597]         if (TRUE) {
[13:25:12.597]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:25:12.597]                 open = "w")
[13:25:12.597]         }
[13:25:12.597]         else {
[13:25:12.597]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:25:12.597]                 windows = "NUL", "/dev/null"), open = "w")
[13:25:12.597]         }
[13:25:12.597]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:25:12.597]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:25:12.597]             base::sink(type = "output", split = FALSE)
[13:25:12.597]             base::close(...future.stdout)
[13:25:12.597]         }, add = TRUE)
[13:25:12.597]     }
[13:25:12.597]     ...future.frame <- base::sys.nframe()
[13:25:12.597]     ...future.conditions <- base::list()
[13:25:12.597]     ...future.rng <- base::globalenv()$.Random.seed
[13:25:12.597]     if (FALSE) {
[13:25:12.597]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:25:12.597]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:25:12.597]     }
[13:25:12.597]     ...future.result <- base::tryCatch({
[13:25:12.597]         base::withCallingHandlers({
[13:25:12.597]             ...future.value <- base::withVisible(base::local({
[13:25:12.597]                 ...future.makeSendCondition <- base::local({
[13:25:12.597]                   sendCondition <- NULL
[13:25:12.597]                   function(frame = 1L) {
[13:25:12.597]                     if (is.function(sendCondition)) 
[13:25:12.597]                       return(sendCondition)
[13:25:12.597]                     ns <- getNamespace("parallel")
[13:25:12.597]                     if (exists("sendData", mode = "function", 
[13:25:12.597]                       envir = ns)) {
[13:25:12.597]                       parallel_sendData <- get("sendData", mode = "function", 
[13:25:12.597]                         envir = ns)
[13:25:12.597]                       envir <- sys.frame(frame)
[13:25:12.597]                       master <- NULL
[13:25:12.597]                       while (!identical(envir, .GlobalEnv) && 
[13:25:12.597]                         !identical(envir, emptyenv())) {
[13:25:12.597]                         if (exists("master", mode = "list", envir = envir, 
[13:25:12.597]                           inherits = FALSE)) {
[13:25:12.597]                           master <- get("master", mode = "list", 
[13:25:12.597]                             envir = envir, inherits = FALSE)
[13:25:12.597]                           if (inherits(master, c("SOCKnode", 
[13:25:12.597]                             "SOCK0node"))) {
[13:25:12.597]                             sendCondition <<- function(cond) {
[13:25:12.597]                               data <- list(type = "VALUE", value = cond, 
[13:25:12.597]                                 success = TRUE)
[13:25:12.597]                               parallel_sendData(master, data)
[13:25:12.597]                             }
[13:25:12.597]                             return(sendCondition)
[13:25:12.597]                           }
[13:25:12.597]                         }
[13:25:12.597]                         frame <- frame + 1L
[13:25:12.597]                         envir <- sys.frame(frame)
[13:25:12.597]                       }
[13:25:12.597]                     }
[13:25:12.597]                     sendCondition <<- function(cond) NULL
[13:25:12.597]                   }
[13:25:12.597]                 })
[13:25:12.597]                 withCallingHandlers({
[13:25:12.597]                   {
[13:25:12.597]                     print(1:50)
[13:25:12.597]                     str(1:50)
[13:25:12.597]                     cat(letters, sep = "-")
[13:25:12.597]                     cat(1:6, collapse = "\n")
[13:25:12.597]                     write.table(datasets::iris[1:10, ], sep = "\t")
[13:25:12.597]                     42L
[13:25:12.597]                   }
[13:25:12.597]                 }, immediateCondition = function(cond) {
[13:25:12.597]                   sendCondition <- ...future.makeSendCondition()
[13:25:12.597]                   sendCondition(cond)
[13:25:12.597]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:25:12.597]                   {
[13:25:12.597]                     inherits <- base::inherits
[13:25:12.597]                     invokeRestart <- base::invokeRestart
[13:25:12.597]                     is.null <- base::is.null
[13:25:12.597]                     muffled <- FALSE
[13:25:12.597]                     if (inherits(cond, "message")) {
[13:25:12.597]                       muffled <- grepl(pattern, "muffleMessage")
[13:25:12.597]                       if (muffled) 
[13:25:12.597]                         invokeRestart("muffleMessage")
[13:25:12.597]                     }
[13:25:12.597]                     else if (inherits(cond, "warning")) {
[13:25:12.597]                       muffled <- grepl(pattern, "muffleWarning")
[13:25:12.597]                       if (muffled) 
[13:25:12.597]                         invokeRestart("muffleWarning")
[13:25:12.597]                     }
[13:25:12.597]                     else if (inherits(cond, "condition")) {
[13:25:12.597]                       if (!is.null(pattern)) {
[13:25:12.597]                         computeRestarts <- base::computeRestarts
[13:25:12.597]                         grepl <- base::grepl
[13:25:12.597]                         restarts <- computeRestarts(cond)
[13:25:12.597]                         for (restart in restarts) {
[13:25:12.597]                           name <- restart$name
[13:25:12.597]                           if (is.null(name)) 
[13:25:12.597]                             next
[13:25:12.597]                           if (!grepl(pattern, name)) 
[13:25:12.597]                             next
[13:25:12.597]                           invokeRestart(restart)
[13:25:12.597]                           muffled <- TRUE
[13:25:12.597]                           break
[13:25:12.597]                         }
[13:25:12.597]                       }
[13:25:12.597]                     }
[13:25:12.597]                     invisible(muffled)
[13:25:12.597]                   }
[13:25:12.597]                   muffleCondition(cond)
[13:25:12.597]                 })
[13:25:12.597]             }))
[13:25:12.597]             future::FutureResult(value = ...future.value$value, 
[13:25:12.597]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:25:12.597]                   ...future.rng), globalenv = if (FALSE) 
[13:25:12.597]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:25:12.597]                     ...future.globalenv.names))
[13:25:12.597]                 else NULL, started = ...future.startTime, version = "1.8")
[13:25:12.597]         }, condition = base::local({
[13:25:12.597]             c <- base::c
[13:25:12.597]             inherits <- base::inherits
[13:25:12.597]             invokeRestart <- base::invokeRestart
[13:25:12.597]             length <- base::length
[13:25:12.597]             list <- base::list
[13:25:12.597]             seq.int <- base::seq.int
[13:25:12.597]             signalCondition <- base::signalCondition
[13:25:12.597]             sys.calls <- base::sys.calls
[13:25:12.597]             `[[` <- base::`[[`
[13:25:12.597]             `+` <- base::`+`
[13:25:12.597]             `<<-` <- base::`<<-`
[13:25:12.597]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:25:12.597]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:25:12.597]                   3L)]
[13:25:12.597]             }
[13:25:12.597]             function(cond) {
[13:25:12.597]                 is_error <- inherits(cond, "error")
[13:25:12.597]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:25:12.597]                   NULL)
[13:25:12.597]                 if (is_error) {
[13:25:12.597]                   sessionInformation <- function() {
[13:25:12.597]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:25:12.597]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:25:12.597]                       search = base::search(), system = base::Sys.info())
[13:25:12.597]                   }
[13:25:12.597]                   ...future.conditions[[length(...future.conditions) + 
[13:25:12.597]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:25:12.597]                     cond$call), session = sessionInformation(), 
[13:25:12.597]                     timestamp = base::Sys.time(), signaled = 0L)
[13:25:12.597]                   signalCondition(cond)
[13:25:12.597]                 }
[13:25:12.597]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:25:12.597]                 "immediateCondition"))) {
[13:25:12.597]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:25:12.597]                   ...future.conditions[[length(...future.conditions) + 
[13:25:12.597]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:25:12.597]                   if (TRUE && !signal) {
[13:25:12.597]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:25:12.597]                     {
[13:25:12.597]                       inherits <- base::inherits
[13:25:12.597]                       invokeRestart <- base::invokeRestart
[13:25:12.597]                       is.null <- base::is.null
[13:25:12.597]                       muffled <- FALSE
[13:25:12.597]                       if (inherits(cond, "message")) {
[13:25:12.597]                         muffled <- grepl(pattern, "muffleMessage")
[13:25:12.597]                         if (muffled) 
[13:25:12.597]                           invokeRestart("muffleMessage")
[13:25:12.597]                       }
[13:25:12.597]                       else if (inherits(cond, "warning")) {
[13:25:12.597]                         muffled <- grepl(pattern, "muffleWarning")
[13:25:12.597]                         if (muffled) 
[13:25:12.597]                           invokeRestart("muffleWarning")
[13:25:12.597]                       }
[13:25:12.597]                       else if (inherits(cond, "condition")) {
[13:25:12.597]                         if (!is.null(pattern)) {
[13:25:12.597]                           computeRestarts <- base::computeRestarts
[13:25:12.597]                           grepl <- base::grepl
[13:25:12.597]                           restarts <- computeRestarts(cond)
[13:25:12.597]                           for (restart in restarts) {
[13:25:12.597]                             name <- restart$name
[13:25:12.597]                             if (is.null(name)) 
[13:25:12.597]                               next
[13:25:12.597]                             if (!grepl(pattern, name)) 
[13:25:12.597]                               next
[13:25:12.597]                             invokeRestart(restart)
[13:25:12.597]                             muffled <- TRUE
[13:25:12.597]                             break
[13:25:12.597]                           }
[13:25:12.597]                         }
[13:25:12.597]                       }
[13:25:12.597]                       invisible(muffled)
[13:25:12.597]                     }
[13:25:12.597]                     muffleCondition(cond, pattern = "^muffle")
[13:25:12.597]                   }
[13:25:12.597]                 }
[13:25:12.597]                 else {
[13:25:12.597]                   if (TRUE) {
[13:25:12.597]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:25:12.597]                     {
[13:25:12.597]                       inherits <- base::inherits
[13:25:12.597]                       invokeRestart <- base::invokeRestart
[13:25:12.597]                       is.null <- base::is.null
[13:25:12.597]                       muffled <- FALSE
[13:25:12.597]                       if (inherits(cond, "message")) {
[13:25:12.597]                         muffled <- grepl(pattern, "muffleMessage")
[13:25:12.597]                         if (muffled) 
[13:25:12.597]                           invokeRestart("muffleMessage")
[13:25:12.597]                       }
[13:25:12.597]                       else if (inherits(cond, "warning")) {
[13:25:12.597]                         muffled <- grepl(pattern, "muffleWarning")
[13:25:12.597]                         if (muffled) 
[13:25:12.597]                           invokeRestart("muffleWarning")
[13:25:12.597]                       }
[13:25:12.597]                       else if (inherits(cond, "condition")) {
[13:25:12.597]                         if (!is.null(pattern)) {
[13:25:12.597]                           computeRestarts <- base::computeRestarts
[13:25:12.597]                           grepl <- base::grepl
[13:25:12.597]                           restarts <- computeRestarts(cond)
[13:25:12.597]                           for (restart in restarts) {
[13:25:12.597]                             name <- restart$name
[13:25:12.597]                             if (is.null(name)) 
[13:25:12.597]                               next
[13:25:12.597]                             if (!grepl(pattern, name)) 
[13:25:12.597]                               next
[13:25:12.597]                             invokeRestart(restart)
[13:25:12.597]                             muffled <- TRUE
[13:25:12.597]                             break
[13:25:12.597]                           }
[13:25:12.597]                         }
[13:25:12.597]                       }
[13:25:12.597]                       invisible(muffled)
[13:25:12.597]                     }
[13:25:12.597]                     muffleCondition(cond, pattern = "^muffle")
[13:25:12.597]                   }
[13:25:12.597]                 }
[13:25:12.597]             }
[13:25:12.597]         }))
[13:25:12.597]     }, error = function(ex) {
[13:25:12.597]         base::structure(base::list(value = NULL, visible = NULL, 
[13:25:12.597]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:25:12.597]                 ...future.rng), started = ...future.startTime, 
[13:25:12.597]             finished = Sys.time(), session_uuid = NA_character_, 
[13:25:12.597]             version = "1.8"), class = "FutureResult")
[13:25:12.597]     }, finally = {
[13:25:12.597]         if (!identical(...future.workdir, getwd())) 
[13:25:12.597]             setwd(...future.workdir)
[13:25:12.597]         {
[13:25:12.597]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:25:12.597]                 ...future.oldOptions$nwarnings <- NULL
[13:25:12.597]             }
[13:25:12.597]             base::options(...future.oldOptions)
[13:25:12.597]             if (.Platform$OS.type == "windows") {
[13:25:12.597]                 old_names <- names(...future.oldEnvVars)
[13:25:12.597]                 envs <- base::Sys.getenv()
[13:25:12.597]                 names <- names(envs)
[13:25:12.597]                 common <- intersect(names, old_names)
[13:25:12.597]                 added <- setdiff(names, old_names)
[13:25:12.597]                 removed <- setdiff(old_names, names)
[13:25:12.597]                 changed <- common[...future.oldEnvVars[common] != 
[13:25:12.597]                   envs[common]]
[13:25:12.597]                 NAMES <- toupper(changed)
[13:25:12.597]                 args <- list()
[13:25:12.597]                 for (kk in seq_along(NAMES)) {
[13:25:12.597]                   name <- changed[[kk]]
[13:25:12.597]                   NAME <- NAMES[[kk]]
[13:25:12.597]                   if (name != NAME && is.element(NAME, old_names)) 
[13:25:12.597]                     next
[13:25:12.597]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:25:12.597]                 }
[13:25:12.597]                 NAMES <- toupper(added)
[13:25:12.597]                 for (kk in seq_along(NAMES)) {
[13:25:12.597]                   name <- added[[kk]]
[13:25:12.597]                   NAME <- NAMES[[kk]]
[13:25:12.597]                   if (name != NAME && is.element(NAME, old_names)) 
[13:25:12.597]                     next
[13:25:12.597]                   args[[name]] <- ""
[13:25:12.597]                 }
[13:25:12.597]                 NAMES <- toupper(removed)
[13:25:12.597]                 for (kk in seq_along(NAMES)) {
[13:25:12.597]                   name <- removed[[kk]]
[13:25:12.597]                   NAME <- NAMES[[kk]]
[13:25:12.597]                   if (name != NAME && is.element(NAME, old_names)) 
[13:25:12.597]                     next
[13:25:12.597]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:25:12.597]                 }
[13:25:12.597]                 if (length(args) > 0) 
[13:25:12.597]                   base::do.call(base::Sys.setenv, args = args)
[13:25:12.597]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:25:12.597]             }
[13:25:12.597]             else {
[13:25:12.597]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:25:12.597]             }
[13:25:12.597]             {
[13:25:12.597]                 if (base::length(...future.futureOptionsAdded) > 
[13:25:12.597]                   0L) {
[13:25:12.597]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:25:12.597]                   base::names(opts) <- ...future.futureOptionsAdded
[13:25:12.597]                   base::options(opts)
[13:25:12.597]                 }
[13:25:12.597]                 {
[13:25:12.597]                   {
[13:25:12.597]                     base::options(mc.cores = ...future.mc.cores.old)
[13:25:12.597]                     NULL
[13:25:12.597]                   }
[13:25:12.597]                   options(future.plan = NULL)
[13:25:12.597]                   if (is.na(NA_character_)) 
[13:25:12.597]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:25:12.597]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:25:12.597]                   future::plan(list(function (..., workers = availableCores(), 
[13:25:12.597]                     lazy = FALSE, rscript_libs = .libPaths(), 
[13:25:12.597]                     envir = parent.frame()) 
[13:25:12.597]                   {
[13:25:12.597]                     if (is.function(workers)) 
[13:25:12.597]                       workers <- workers()
[13:25:12.597]                     workers <- structure(as.integer(workers), 
[13:25:12.597]                       class = class(workers))
[13:25:12.597]                     stop_if_not(length(workers) == 1, is.finite(workers), 
[13:25:12.597]                       workers >= 1)
[13:25:12.597]                     if (workers == 1L && !inherits(workers, "AsIs")) {
[13:25:12.597]                       return(sequential(..., lazy = TRUE, envir = envir))
[13:25:12.597]                     }
[13:25:12.597]                     future <- MultisessionFuture(..., workers = workers, 
[13:25:12.597]                       lazy = lazy, rscript_libs = rscript_libs, 
[13:25:12.597]                       envir = envir)
[13:25:12.597]                     if (!future$lazy) 
[13:25:12.597]                       future <- run(future)
[13:25:12.597]                     invisible(future)
[13:25:12.597]                   }), .cleanup = FALSE, .init = FALSE)
[13:25:12.597]                 }
[13:25:12.597]             }
[13:25:12.597]         }
[13:25:12.597]     })
[13:25:12.597]     if (TRUE) {
[13:25:12.597]         base::sink(type = "output", split = FALSE)
[13:25:12.597]         if (TRUE) {
[13:25:12.597]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:25:12.597]         }
[13:25:12.597]         else {
[13:25:12.597]             ...future.result["stdout"] <- base::list(NULL)
[13:25:12.597]         }
[13:25:12.597]         base::close(...future.stdout)
[13:25:12.597]         ...future.stdout <- NULL
[13:25:12.597]     }
[13:25:12.597]     ...future.result$conditions <- ...future.conditions
[13:25:12.597]     ...future.result$finished <- base::Sys.time()
[13:25:12.597]     ...future.result
[13:25:12.597] }
[13:25:12.601] MultisessionFuture started
[13:25:12.601] - Launch lazy future ... done
[13:25:12.601] run() for ‘MultisessionFuture’ ... done
[13:25:12.602] result() for ClusterFuture ...
[13:25:12.602] receiveMessageFromWorker() for ClusterFuture ...
[13:25:12.602] - Validating connection of MultisessionFuture
[13:25:12.652] - received message: FutureResult
[13:25:12.652] - Received FutureResult
[13:25:12.652] - Erased future from FutureRegistry
[13:25:12.652] result() for ClusterFuture ...
[13:25:12.652] - result already collected: FutureResult
[13:25:12.652] result() for ClusterFuture ... done
[13:25:12.652] receiveMessageFromWorker() for ClusterFuture ... done
[13:25:12.652] result() for ClusterFuture ... done
[13:25:12.652] result() for ClusterFuture ...
[13:25:12.653] - result already collected: FutureResult
[13:25:12.653] result() for ClusterFuture ... done
 [1] " [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25"  
 [2] "[26] 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50"  
 [3] " int [1:50] 1 2 3 4 5 6 7 8 9 10 ..."                                             
 [4] "a-b-c-d-e-f-g-h-i-j-k-l-m-n-o-p-q-r-s-t-u-v-w-x-y-z1 2 3 4 5 6 "                  
 [5] "\"Sepal.Length\"\t\"Sepal.Width\"\t\"Petal.Length\"\t\"Petal.Width\"\t\"Species\""
 [6] "\"1\"\t5.1\t3.5\t1.4\t0.2\t\"setosa\""                                            
 [7] "\"2\"\t4.9\t3\t1.4\t0.2\t\"setosa\""                                              
 [8] "\"3\"\t4.7\t3.2\t1.3\t0.2\t\"setosa\""                                            
 [9] "\"4\"\t4.6\t3.1\t1.5\t0.2\t\"setosa\""                                            
[10] "\"5\"\t5\t3.6\t1.4\t0.2\t\"setosa\""                                              
[11] "\"6\"\t5.4\t3.9\t1.7\t0.4\t\"setosa\""                                            
[12] "\"7\"\t4.6\t3.4\t1.4\t0.3\t\"setosa\""                                            
[13] "\"8\"\t5\t3.4\t1.5\t0.2\t\"setosa\""                                              
[14] "\"9\"\t4.4\t2.9\t1.4\t0.2\t\"setosa\""                                            
[15] "\"10\"\t4.9\t3.1\t1.5\t0.1\t\"setosa\""                                           
- stdout = structure(TRUE, drop = TRUE)
[13:25:12.653] getGlobalsAndPackages() ...
[13:25:12.653] Searching for globals...
[13:25:12.654] - globals found: [1] ‘print’
[13:25:12.654] Searching for globals ... DONE
[13:25:12.654] Resolving globals: FALSE
[13:25:12.654] 
[13:25:12.654] 
[13:25:12.654] getGlobalsAndPackages() ... DONE
[13:25:12.655] run() for ‘Future’ ...
[13:25:12.655] - state: ‘created’
[13:25:12.655] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[13:25:12.669] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:25:12.669] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[13:25:12.669]   - Field: ‘node’
[13:25:12.669]   - Field: ‘label’
[13:25:12.669]   - Field: ‘local’
[13:25:12.670]   - Field: ‘owner’
[13:25:12.670]   - Field: ‘envir’
[13:25:12.670]   - Field: ‘workers’
[13:25:12.670]   - Field: ‘packages’
[13:25:12.670]   - Field: ‘gc’
[13:25:12.670]   - Field: ‘conditions’
[13:25:12.670]   - Field: ‘persistent’
[13:25:12.670]   - Field: ‘expr’
[13:25:12.670]   - Field: ‘uuid’
[13:25:12.670]   - Field: ‘seed’
[13:25:12.670]   - Field: ‘version’
[13:25:12.670]   - Field: ‘result’
[13:25:12.671]   - Field: ‘asynchronous’
[13:25:12.671]   - Field: ‘calls’
[13:25:12.671]   - Field: ‘globals’
[13:25:12.671]   - Field: ‘stdout’
[13:25:12.671]   - Field: ‘earlySignal’
[13:25:12.671]   - Field: ‘lazy’
[13:25:12.671]   - Field: ‘state’
[13:25:12.671] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[13:25:12.671] - Launch lazy future ...
[13:25:12.672] Packages needed by the future expression (n = 0): <none>
[13:25:12.672] Packages needed by future strategies (n = 0): <none>
[13:25:12.672] {
[13:25:12.672]     {
[13:25:12.672]         {
[13:25:12.672]             ...future.startTime <- base::Sys.time()
[13:25:12.672]             {
[13:25:12.672]                 {
[13:25:12.672]                   {
[13:25:12.672]                     {
[13:25:12.672]                       base::local({
[13:25:12.672]                         has_future <- base::requireNamespace("future", 
[13:25:12.672]                           quietly = TRUE)
[13:25:12.672]                         if (has_future) {
[13:25:12.672]                           ns <- base::getNamespace("future")
[13:25:12.672]                           version <- ns[[".package"]][["version"]]
[13:25:12.672]                           if (is.null(version)) 
[13:25:12.672]                             version <- utils::packageVersion("future")
[13:25:12.672]                         }
[13:25:12.672]                         else {
[13:25:12.672]                           version <- NULL
[13:25:12.672]                         }
[13:25:12.672]                         if (!has_future || version < "1.8.0") {
[13:25:12.672]                           info <- base::c(r_version = base::gsub("R version ", 
[13:25:12.672]                             "", base::R.version$version.string), 
[13:25:12.672]                             platform = base::sprintf("%s (%s-bit)", 
[13:25:12.672]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:25:12.672]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:25:12.672]                               "release", "version")], collapse = " "), 
[13:25:12.672]                             hostname = base::Sys.info()[["nodename"]])
[13:25:12.672]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:25:12.672]                             info)
[13:25:12.672]                           info <- base::paste(info, collapse = "; ")
[13:25:12.672]                           if (!has_future) {
[13:25:12.672]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:25:12.672]                               info)
[13:25:12.672]                           }
[13:25:12.672]                           else {
[13:25:12.672]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:25:12.672]                               info, version)
[13:25:12.672]                           }
[13:25:12.672]                           base::stop(msg)
[13:25:12.672]                         }
[13:25:12.672]                       })
[13:25:12.672]                     }
[13:25:12.672]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[13:25:12.672]                     base::options(mc.cores = 1L)
[13:25:12.672]                   }
[13:25:12.672]                   options(future.plan = NULL)
[13:25:12.672]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:25:12.672]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:25:12.672]                 }
[13:25:12.672]                 ...future.workdir <- getwd()
[13:25:12.672]             }
[13:25:12.672]             ...future.oldOptions <- base::as.list(base::.Options)
[13:25:12.672]             ...future.oldEnvVars <- base::Sys.getenv()
[13:25:12.672]         }
[13:25:12.672]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:25:12.672]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:25:12.672]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:25:12.672]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:25:12.672]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:25:12.672]             future.stdout.windows.reencode = NULL, width = 80L)
[13:25:12.672]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:25:12.672]             base::names(...future.oldOptions))
[13:25:12.672]     }
[13:25:12.672]     if (FALSE) {
[13:25:12.672]     }
[13:25:12.672]     else {
[13:25:12.672]         if (TRUE) {
[13:25:12.672]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:25:12.672]                 open = "w")
[13:25:12.672]         }
[13:25:12.672]         else {
[13:25:12.672]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:25:12.672]                 windows = "NUL", "/dev/null"), open = "w")
[13:25:12.672]         }
[13:25:12.672]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:25:12.672]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:25:12.672]             base::sink(type = "output", split = FALSE)
[13:25:12.672]             base::close(...future.stdout)
[13:25:12.672]         }, add = TRUE)
[13:25:12.672]     }
[13:25:12.672]     ...future.frame <- base::sys.nframe()
[13:25:12.672]     ...future.conditions <- base::list()
[13:25:12.672]     ...future.rng <- base::globalenv()$.Random.seed
[13:25:12.672]     if (FALSE) {
[13:25:12.672]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:25:12.672]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:25:12.672]     }
[13:25:12.672]     ...future.result <- base::tryCatch({
[13:25:12.672]         base::withCallingHandlers({
[13:25:12.672]             ...future.value <- base::withVisible(base::local({
[13:25:12.672]                 ...future.makeSendCondition <- base::local({
[13:25:12.672]                   sendCondition <- NULL
[13:25:12.672]                   function(frame = 1L) {
[13:25:12.672]                     if (is.function(sendCondition)) 
[13:25:12.672]                       return(sendCondition)
[13:25:12.672]                     ns <- getNamespace("parallel")
[13:25:12.672]                     if (exists("sendData", mode = "function", 
[13:25:12.672]                       envir = ns)) {
[13:25:12.672]                       parallel_sendData <- get("sendData", mode = "function", 
[13:25:12.672]                         envir = ns)
[13:25:12.672]                       envir <- sys.frame(frame)
[13:25:12.672]                       master <- NULL
[13:25:12.672]                       while (!identical(envir, .GlobalEnv) && 
[13:25:12.672]                         !identical(envir, emptyenv())) {
[13:25:12.672]                         if (exists("master", mode = "list", envir = envir, 
[13:25:12.672]                           inherits = FALSE)) {
[13:25:12.672]                           master <- get("master", mode = "list", 
[13:25:12.672]                             envir = envir, inherits = FALSE)
[13:25:12.672]                           if (inherits(master, c("SOCKnode", 
[13:25:12.672]                             "SOCK0node"))) {
[13:25:12.672]                             sendCondition <<- function(cond) {
[13:25:12.672]                               data <- list(type = "VALUE", value = cond, 
[13:25:12.672]                                 success = TRUE)
[13:25:12.672]                               parallel_sendData(master, data)
[13:25:12.672]                             }
[13:25:12.672]                             return(sendCondition)
[13:25:12.672]                           }
[13:25:12.672]                         }
[13:25:12.672]                         frame <- frame + 1L
[13:25:12.672]                         envir <- sys.frame(frame)
[13:25:12.672]                       }
[13:25:12.672]                     }
[13:25:12.672]                     sendCondition <<- function(cond) NULL
[13:25:12.672]                   }
[13:25:12.672]                 })
[13:25:12.672]                 withCallingHandlers({
[13:25:12.672]                   print(42)
[13:25:12.672]                 }, immediateCondition = function(cond) {
[13:25:12.672]                   sendCondition <- ...future.makeSendCondition()
[13:25:12.672]                   sendCondition(cond)
[13:25:12.672]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:25:12.672]                   {
[13:25:12.672]                     inherits <- base::inherits
[13:25:12.672]                     invokeRestart <- base::invokeRestart
[13:25:12.672]                     is.null <- base::is.null
[13:25:12.672]                     muffled <- FALSE
[13:25:12.672]                     if (inherits(cond, "message")) {
[13:25:12.672]                       muffled <- grepl(pattern, "muffleMessage")
[13:25:12.672]                       if (muffled) 
[13:25:12.672]                         invokeRestart("muffleMessage")
[13:25:12.672]                     }
[13:25:12.672]                     else if (inherits(cond, "warning")) {
[13:25:12.672]                       muffled <- grepl(pattern, "muffleWarning")
[13:25:12.672]                       if (muffled) 
[13:25:12.672]                         invokeRestart("muffleWarning")
[13:25:12.672]                     }
[13:25:12.672]                     else if (inherits(cond, "condition")) {
[13:25:12.672]                       if (!is.null(pattern)) {
[13:25:12.672]                         computeRestarts <- base::computeRestarts
[13:25:12.672]                         grepl <- base::grepl
[13:25:12.672]                         restarts <- computeRestarts(cond)
[13:25:12.672]                         for (restart in restarts) {
[13:25:12.672]                           name <- restart$name
[13:25:12.672]                           if (is.null(name)) 
[13:25:12.672]                             next
[13:25:12.672]                           if (!grepl(pattern, name)) 
[13:25:12.672]                             next
[13:25:12.672]                           invokeRestart(restart)
[13:25:12.672]                           muffled <- TRUE
[13:25:12.672]                           break
[13:25:12.672]                         }
[13:25:12.672]                       }
[13:25:12.672]                     }
[13:25:12.672]                     invisible(muffled)
[13:25:12.672]                   }
[13:25:12.672]                   muffleCondition(cond)
[13:25:12.672]                 })
[13:25:12.672]             }))
[13:25:12.672]             future::FutureResult(value = ...future.value$value, 
[13:25:12.672]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:25:12.672]                   ...future.rng), globalenv = if (FALSE) 
[13:25:12.672]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:25:12.672]                     ...future.globalenv.names))
[13:25:12.672]                 else NULL, started = ...future.startTime, version = "1.8")
[13:25:12.672]         }, condition = base::local({
[13:25:12.672]             c <- base::c
[13:25:12.672]             inherits <- base::inherits
[13:25:12.672]             invokeRestart <- base::invokeRestart
[13:25:12.672]             length <- base::length
[13:25:12.672]             list <- base::list
[13:25:12.672]             seq.int <- base::seq.int
[13:25:12.672]             signalCondition <- base::signalCondition
[13:25:12.672]             sys.calls <- base::sys.calls
[13:25:12.672]             `[[` <- base::`[[`
[13:25:12.672]             `+` <- base::`+`
[13:25:12.672]             `<<-` <- base::`<<-`
[13:25:12.672]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:25:12.672]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:25:12.672]                   3L)]
[13:25:12.672]             }
[13:25:12.672]             function(cond) {
[13:25:12.672]                 is_error <- inherits(cond, "error")
[13:25:12.672]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:25:12.672]                   NULL)
[13:25:12.672]                 if (is_error) {
[13:25:12.672]                   sessionInformation <- function() {
[13:25:12.672]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:25:12.672]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:25:12.672]                       search = base::search(), system = base::Sys.info())
[13:25:12.672]                   }
[13:25:12.672]                   ...future.conditions[[length(...future.conditions) + 
[13:25:12.672]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:25:12.672]                     cond$call), session = sessionInformation(), 
[13:25:12.672]                     timestamp = base::Sys.time(), signaled = 0L)
[13:25:12.672]                   signalCondition(cond)
[13:25:12.672]                 }
[13:25:12.672]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:25:12.672]                 "immediateCondition"))) {
[13:25:12.672]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:25:12.672]                   ...future.conditions[[length(...future.conditions) + 
[13:25:12.672]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:25:12.672]                   if (TRUE && !signal) {
[13:25:12.672]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:25:12.672]                     {
[13:25:12.672]                       inherits <- base::inherits
[13:25:12.672]                       invokeRestart <- base::invokeRestart
[13:25:12.672]                       is.null <- base::is.null
[13:25:12.672]                       muffled <- FALSE
[13:25:12.672]                       if (inherits(cond, "message")) {
[13:25:12.672]                         muffled <- grepl(pattern, "muffleMessage")
[13:25:12.672]                         if (muffled) 
[13:25:12.672]                           invokeRestart("muffleMessage")
[13:25:12.672]                       }
[13:25:12.672]                       else if (inherits(cond, "warning")) {
[13:25:12.672]                         muffled <- grepl(pattern, "muffleWarning")
[13:25:12.672]                         if (muffled) 
[13:25:12.672]                           invokeRestart("muffleWarning")
[13:25:12.672]                       }
[13:25:12.672]                       else if (inherits(cond, "condition")) {
[13:25:12.672]                         if (!is.null(pattern)) {
[13:25:12.672]                           computeRestarts <- base::computeRestarts
[13:25:12.672]                           grepl <- base::grepl
[13:25:12.672]                           restarts <- computeRestarts(cond)
[13:25:12.672]                           for (restart in restarts) {
[13:25:12.672]                             name <- restart$name
[13:25:12.672]                             if (is.null(name)) 
[13:25:12.672]                               next
[13:25:12.672]                             if (!grepl(pattern, name)) 
[13:25:12.672]                               next
[13:25:12.672]                             invokeRestart(restart)
[13:25:12.672]                             muffled <- TRUE
[13:25:12.672]                             break
[13:25:12.672]                           }
[13:25:12.672]                         }
[13:25:12.672]                       }
[13:25:12.672]                       invisible(muffled)
[13:25:12.672]                     }
[13:25:12.672]                     muffleCondition(cond, pattern = "^muffle")
[13:25:12.672]                   }
[13:25:12.672]                 }
[13:25:12.672]                 else {
[13:25:12.672]                   if (TRUE) {
[13:25:12.672]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:25:12.672]                     {
[13:25:12.672]                       inherits <- base::inherits
[13:25:12.672]                       invokeRestart <- base::invokeRestart
[13:25:12.672]                       is.null <- base::is.null
[13:25:12.672]                       muffled <- FALSE
[13:25:12.672]                       if (inherits(cond, "message")) {
[13:25:12.672]                         muffled <- grepl(pattern, "muffleMessage")
[13:25:12.672]                         if (muffled) 
[13:25:12.672]                           invokeRestart("muffleMessage")
[13:25:12.672]                       }
[13:25:12.672]                       else if (inherits(cond, "warning")) {
[13:25:12.672]                         muffled <- grepl(pattern, "muffleWarning")
[13:25:12.672]                         if (muffled) 
[13:25:12.672]                           invokeRestart("muffleWarning")
[13:25:12.672]                       }
[13:25:12.672]                       else if (inherits(cond, "condition")) {
[13:25:12.672]                         if (!is.null(pattern)) {
[13:25:12.672]                           computeRestarts <- base::computeRestarts
[13:25:12.672]                           grepl <- base::grepl
[13:25:12.672]                           restarts <- computeRestarts(cond)
[13:25:12.672]                           for (restart in restarts) {
[13:25:12.672]                             name <- restart$name
[13:25:12.672]                             if (is.null(name)) 
[13:25:12.672]                               next
[13:25:12.672]                             if (!grepl(pattern, name)) 
[13:25:12.672]                               next
[13:25:12.672]                             invokeRestart(restart)
[13:25:12.672]                             muffled <- TRUE
[13:25:12.672]                             break
[13:25:12.672]                           }
[13:25:12.672]                         }
[13:25:12.672]                       }
[13:25:12.672]                       invisible(muffled)
[13:25:12.672]                     }
[13:25:12.672]                     muffleCondition(cond, pattern = "^muffle")
[13:25:12.672]                   }
[13:25:12.672]                 }
[13:25:12.672]             }
[13:25:12.672]         }))
[13:25:12.672]     }, error = function(ex) {
[13:25:12.672]         base::structure(base::list(value = NULL, visible = NULL, 
[13:25:12.672]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:25:12.672]                 ...future.rng), started = ...future.startTime, 
[13:25:12.672]             finished = Sys.time(), session_uuid = NA_character_, 
[13:25:12.672]             version = "1.8"), class = "FutureResult")
[13:25:12.672]     }, finally = {
[13:25:12.672]         if (!identical(...future.workdir, getwd())) 
[13:25:12.672]             setwd(...future.workdir)
[13:25:12.672]         {
[13:25:12.672]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:25:12.672]                 ...future.oldOptions$nwarnings <- NULL
[13:25:12.672]             }
[13:25:12.672]             base::options(...future.oldOptions)
[13:25:12.672]             if (.Platform$OS.type == "windows") {
[13:25:12.672]                 old_names <- names(...future.oldEnvVars)
[13:25:12.672]                 envs <- base::Sys.getenv()
[13:25:12.672]                 names <- names(envs)
[13:25:12.672]                 common <- intersect(names, old_names)
[13:25:12.672]                 added <- setdiff(names, old_names)
[13:25:12.672]                 removed <- setdiff(old_names, names)
[13:25:12.672]                 changed <- common[...future.oldEnvVars[common] != 
[13:25:12.672]                   envs[common]]
[13:25:12.672]                 NAMES <- toupper(changed)
[13:25:12.672]                 args <- list()
[13:25:12.672]                 for (kk in seq_along(NAMES)) {
[13:25:12.672]                   name <- changed[[kk]]
[13:25:12.672]                   NAME <- NAMES[[kk]]
[13:25:12.672]                   if (name != NAME && is.element(NAME, old_names)) 
[13:25:12.672]                     next
[13:25:12.672]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:25:12.672]                 }
[13:25:12.672]                 NAMES <- toupper(added)
[13:25:12.672]                 for (kk in seq_along(NAMES)) {
[13:25:12.672]                   name <- added[[kk]]
[13:25:12.672]                   NAME <- NAMES[[kk]]
[13:25:12.672]                   if (name != NAME && is.element(NAME, old_names)) 
[13:25:12.672]                     next
[13:25:12.672]                   args[[name]] <- ""
[13:25:12.672]                 }
[13:25:12.672]                 NAMES <- toupper(removed)
[13:25:12.672]                 for (kk in seq_along(NAMES)) {
[13:25:12.672]                   name <- removed[[kk]]
[13:25:12.672]                   NAME <- NAMES[[kk]]
[13:25:12.672]                   if (name != NAME && is.element(NAME, old_names)) 
[13:25:12.672]                     next
[13:25:12.672]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:25:12.672]                 }
[13:25:12.672]                 if (length(args) > 0) 
[13:25:12.672]                   base::do.call(base::Sys.setenv, args = args)
[13:25:12.672]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:25:12.672]             }
[13:25:12.672]             else {
[13:25:12.672]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:25:12.672]             }
[13:25:12.672]             {
[13:25:12.672]                 if (base::length(...future.futureOptionsAdded) > 
[13:25:12.672]                   0L) {
[13:25:12.672]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:25:12.672]                   base::names(opts) <- ...future.futureOptionsAdded
[13:25:12.672]                   base::options(opts)
[13:25:12.672]                 }
[13:25:12.672]                 {
[13:25:12.672]                   {
[13:25:12.672]                     base::options(mc.cores = ...future.mc.cores.old)
[13:25:12.672]                     NULL
[13:25:12.672]                   }
[13:25:12.672]                   options(future.plan = NULL)
[13:25:12.672]                   if (is.na(NA_character_)) 
[13:25:12.672]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:25:12.672]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:25:12.672]                   future::plan(list(function (..., workers = availableCores(), 
[13:25:12.672]                     lazy = FALSE, rscript_libs = .libPaths(), 
[13:25:12.672]                     envir = parent.frame()) 
[13:25:12.672]                   {
[13:25:12.672]                     if (is.function(workers)) 
[13:25:12.672]                       workers <- workers()
[13:25:12.672]                     workers <- structure(as.integer(workers), 
[13:25:12.672]                       class = class(workers))
[13:25:12.672]                     stop_if_not(length(workers) == 1, is.finite(workers), 
[13:25:12.672]                       workers >= 1)
[13:25:12.672]                     if (workers == 1L && !inherits(workers, "AsIs")) {
[13:25:12.672]                       return(sequential(..., lazy = TRUE, envir = envir))
[13:25:12.672]                     }
[13:25:12.672]                     future <- MultisessionFuture(..., workers = workers, 
[13:25:12.672]                       lazy = lazy, rscript_libs = rscript_libs, 
[13:25:12.672]                       envir = envir)
[13:25:12.672]                     if (!future$lazy) 
[13:25:12.672]                       future <- run(future)
[13:25:12.672]                     invisible(future)
[13:25:12.672]                   }), .cleanup = FALSE, .init = FALSE)
[13:25:12.672]                 }
[13:25:12.672]             }
[13:25:12.672]         }
[13:25:12.672]     })
[13:25:12.672]     if (TRUE) {
[13:25:12.672]         base::sink(type = "output", split = FALSE)
[13:25:12.672]         if (TRUE) {
[13:25:12.672]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:25:12.672]         }
[13:25:12.672]         else {
[13:25:12.672]             ...future.result["stdout"] <- base::list(NULL)
[13:25:12.672]         }
[13:25:12.672]         base::close(...future.stdout)
[13:25:12.672]         ...future.stdout <- NULL
[13:25:12.672]     }
[13:25:12.672]     ...future.result$conditions <- ...future.conditions
[13:25:12.672]     ...future.result$finished <- base::Sys.time()
[13:25:12.672]     ...future.result
[13:25:12.672] }
[13:25:12.675] MultisessionFuture started
[13:25:12.675] - Launch lazy future ... done
[13:25:12.675] run() for ‘MultisessionFuture’ ... done
[13:25:12.675] result() for ClusterFuture ...
[13:25:12.676] receiveMessageFromWorker() for ClusterFuture ...
[13:25:12.676] - Validating connection of MultisessionFuture
[13:25:12.721] - received message: FutureResult
[13:25:12.721] - Received FutureResult
[13:25:12.721] - Erased future from FutureRegistry
[13:25:12.721] result() for ClusterFuture ...
[13:25:12.721] - result already collected: FutureResult
[13:25:12.721] result() for ClusterFuture ... done
[13:25:12.721] receiveMessageFromWorker() for ClusterFuture ... done
[13:25:12.721] result() for ClusterFuture ... done
[13:25:12.721] result() for ClusterFuture ...
[13:25:12.721] - result already collected: FutureResult
[13:25:12.722] result() for ClusterFuture ... done
[13:25:12.722] result() for ClusterFuture ...
[13:25:12.722] - result already collected: FutureResult
[13:25:12.722] result() for ClusterFuture ... done
[1] 42
[13:25:12.722] result() for ClusterFuture ...
[13:25:12.722] - result already collected: FutureResult
[13:25:12.722] result() for ClusterFuture ... done
- stdout = FALSE
[13:25:12.722] getGlobalsAndPackages() ...
[13:25:12.722] Searching for globals...
[13:25:12.725] - globals found: [9] ‘{’, ‘print’, ‘:’, ‘str’, ‘cat’, ‘letters’, ‘write.table’, ‘[’, ‘::’
[13:25:12.725] Searching for globals ... DONE
[13:25:12.725] Resolving globals: FALSE
[13:25:12.726] 
[13:25:12.726] - packages: [1] ‘utils’
[13:25:12.726] getGlobalsAndPackages() ... DONE
[13:25:12.726] run() for ‘Future’ ...
[13:25:12.726] - state: ‘created’
[13:25:12.727] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[13:25:12.740] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:25:12.740] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[13:25:12.740]   - Field: ‘node’
[13:25:12.740]   - Field: ‘label’
[13:25:12.741]   - Field: ‘local’
[13:25:12.741]   - Field: ‘owner’
[13:25:12.741]   - Field: ‘envir’
[13:25:12.741]   - Field: ‘workers’
[13:25:12.741]   - Field: ‘packages’
[13:25:12.741]   - Field: ‘gc’
[13:25:12.741]   - Field: ‘conditions’
[13:25:12.741]   - Field: ‘persistent’
[13:25:12.741]   - Field: ‘expr’
[13:25:12.741]   - Field: ‘uuid’
[13:25:12.741]   - Field: ‘seed’
[13:25:12.742]   - Field: ‘version’
[13:25:12.742]   - Field: ‘result’
[13:25:12.742]   - Field: ‘asynchronous’
[13:25:12.742]   - Field: ‘calls’
[13:25:12.742]   - Field: ‘globals’
[13:25:12.742]   - Field: ‘stdout’
[13:25:12.742]   - Field: ‘earlySignal’
[13:25:12.742]   - Field: ‘lazy’
[13:25:12.742]   - Field: ‘state’
[13:25:12.742] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[13:25:12.742] - Launch lazy future ...
[13:25:12.743] Packages needed by the future expression (n = 1): ‘utils’
[13:25:12.743] Packages needed by future strategies (n = 0): <none>
[13:25:12.743] {
[13:25:12.743]     {
[13:25:12.743]         {
[13:25:12.743]             ...future.startTime <- base::Sys.time()
[13:25:12.743]             {
[13:25:12.743]                 {
[13:25:12.743]                   {
[13:25:12.743]                     {
[13:25:12.743]                       {
[13:25:12.743]                         base::local({
[13:25:12.743]                           has_future <- base::requireNamespace("future", 
[13:25:12.743]                             quietly = TRUE)
[13:25:12.743]                           if (has_future) {
[13:25:12.743]                             ns <- base::getNamespace("future")
[13:25:12.743]                             version <- ns[[".package"]][["version"]]
[13:25:12.743]                             if (is.null(version)) 
[13:25:12.743]                               version <- utils::packageVersion("future")
[13:25:12.743]                           }
[13:25:12.743]                           else {
[13:25:12.743]                             version <- NULL
[13:25:12.743]                           }
[13:25:12.743]                           if (!has_future || version < "1.8.0") {
[13:25:12.743]                             info <- base::c(r_version = base::gsub("R version ", 
[13:25:12.743]                               "", base::R.version$version.string), 
[13:25:12.743]                               platform = base::sprintf("%s (%s-bit)", 
[13:25:12.743]                                 base::R.version$platform, 8 * 
[13:25:12.743]                                   base::.Machine$sizeof.pointer), 
[13:25:12.743]                               os = base::paste(base::Sys.info()[base::c("sysname", 
[13:25:12.743]                                 "release", "version")], collapse = " "), 
[13:25:12.743]                               hostname = base::Sys.info()[["nodename"]])
[13:25:12.743]                             info <- base::sprintf("%s: %s", base::names(info), 
[13:25:12.743]                               info)
[13:25:12.743]                             info <- base::paste(info, collapse = "; ")
[13:25:12.743]                             if (!has_future) {
[13:25:12.743]                               msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:25:12.743]                                 info)
[13:25:12.743]                             }
[13:25:12.743]                             else {
[13:25:12.743]                               msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:25:12.743]                                 info, version)
[13:25:12.743]                             }
[13:25:12.743]                             base::stop(msg)
[13:25:12.743]                           }
[13:25:12.743]                         })
[13:25:12.743]                       }
[13:25:12.743]                       ...future.mc.cores.old <- base::getOption("mc.cores")
[13:25:12.743]                       base::options(mc.cores = 1L)
[13:25:12.743]                     }
[13:25:12.743]                     base::local({
[13:25:12.743]                       for (pkg in "utils") {
[13:25:12.743]                         base::loadNamespace(pkg)
[13:25:12.743]                         base::library(pkg, character.only = TRUE)
[13:25:12.743]                       }
[13:25:12.743]                     })
[13:25:12.743]                   }
[13:25:12.743]                   options(future.plan = NULL)
[13:25:12.743]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:25:12.743]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:25:12.743]                 }
[13:25:12.743]                 ...future.workdir <- getwd()
[13:25:12.743]             }
[13:25:12.743]             ...future.oldOptions <- base::as.list(base::.Options)
[13:25:12.743]             ...future.oldEnvVars <- base::Sys.getenv()
[13:25:12.743]         }
[13:25:12.743]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:25:12.743]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:25:12.743]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:25:12.743]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:25:12.743]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:25:12.743]             future.stdout.windows.reencode = NULL, width = 80L)
[13:25:12.743]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:25:12.743]             base::names(...future.oldOptions))
[13:25:12.743]     }
[13:25:12.743]     if (FALSE) {
[13:25:12.743]     }
[13:25:12.743]     else {
[13:25:12.743]         if (FALSE) {
[13:25:12.743]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:25:12.743]                 open = "w")
[13:25:12.743]         }
[13:25:12.743]         else {
[13:25:12.743]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:25:12.743]                 windows = "NUL", "/dev/null"), open = "w")
[13:25:12.743]         }
[13:25:12.743]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:25:12.743]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:25:12.743]             base::sink(type = "output", split = FALSE)
[13:25:12.743]             base::close(...future.stdout)
[13:25:12.743]         }, add = TRUE)
[13:25:12.743]     }
[13:25:12.743]     ...future.frame <- base::sys.nframe()
[13:25:12.743]     ...future.conditions <- base::list()
[13:25:12.743]     ...future.rng <- base::globalenv()$.Random.seed
[13:25:12.743]     if (FALSE) {
[13:25:12.743]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:25:12.743]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:25:12.743]     }
[13:25:12.743]     ...future.result <- base::tryCatch({
[13:25:12.743]         base::withCallingHandlers({
[13:25:12.743]             ...future.value <- base::withVisible(base::local({
[13:25:12.743]                 ...future.makeSendCondition <- base::local({
[13:25:12.743]                   sendCondition <- NULL
[13:25:12.743]                   function(frame = 1L) {
[13:25:12.743]                     if (is.function(sendCondition)) 
[13:25:12.743]                       return(sendCondition)
[13:25:12.743]                     ns <- getNamespace("parallel")
[13:25:12.743]                     if (exists("sendData", mode = "function", 
[13:25:12.743]                       envir = ns)) {
[13:25:12.743]                       parallel_sendData <- get("sendData", mode = "function", 
[13:25:12.743]                         envir = ns)
[13:25:12.743]                       envir <- sys.frame(frame)
[13:25:12.743]                       master <- NULL
[13:25:12.743]                       while (!identical(envir, .GlobalEnv) && 
[13:25:12.743]                         !identical(envir, emptyenv())) {
[13:25:12.743]                         if (exists("master", mode = "list", envir = envir, 
[13:25:12.743]                           inherits = FALSE)) {
[13:25:12.743]                           master <- get("master", mode = "list", 
[13:25:12.743]                             envir = envir, inherits = FALSE)
[13:25:12.743]                           if (inherits(master, c("SOCKnode", 
[13:25:12.743]                             "SOCK0node"))) {
[13:25:12.743]                             sendCondition <<- function(cond) {
[13:25:12.743]                               data <- list(type = "VALUE", value = cond, 
[13:25:12.743]                                 success = TRUE)
[13:25:12.743]                               parallel_sendData(master, data)
[13:25:12.743]                             }
[13:25:12.743]                             return(sendCondition)
[13:25:12.743]                           }
[13:25:12.743]                         }
[13:25:12.743]                         frame <- frame + 1L
[13:25:12.743]                         envir <- sys.frame(frame)
[13:25:12.743]                       }
[13:25:12.743]                     }
[13:25:12.743]                     sendCondition <<- function(cond) NULL
[13:25:12.743]                   }
[13:25:12.743]                 })
[13:25:12.743]                 withCallingHandlers({
[13:25:12.743]                   {
[13:25:12.743]                     print(1:50)
[13:25:12.743]                     str(1:50)
[13:25:12.743]                     cat(letters, sep = "-")
[13:25:12.743]                     cat(1:6, collapse = "\n")
[13:25:12.743]                     write.table(datasets::iris[1:10, ], sep = "\t")
[13:25:12.743]                     42L
[13:25:12.743]                   }
[13:25:12.743]                 }, immediateCondition = function(cond) {
[13:25:12.743]                   sendCondition <- ...future.makeSendCondition()
[13:25:12.743]                   sendCondition(cond)
[13:25:12.743]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:25:12.743]                   {
[13:25:12.743]                     inherits <- base::inherits
[13:25:12.743]                     invokeRestart <- base::invokeRestart
[13:25:12.743]                     is.null <- base::is.null
[13:25:12.743]                     muffled <- FALSE
[13:25:12.743]                     if (inherits(cond, "message")) {
[13:25:12.743]                       muffled <- grepl(pattern, "muffleMessage")
[13:25:12.743]                       if (muffled) 
[13:25:12.743]                         invokeRestart("muffleMessage")
[13:25:12.743]                     }
[13:25:12.743]                     else if (inherits(cond, "warning")) {
[13:25:12.743]                       muffled <- grepl(pattern, "muffleWarning")
[13:25:12.743]                       if (muffled) 
[13:25:12.743]                         invokeRestart("muffleWarning")
[13:25:12.743]                     }
[13:25:12.743]                     else if (inherits(cond, "condition")) {
[13:25:12.743]                       if (!is.null(pattern)) {
[13:25:12.743]                         computeRestarts <- base::computeRestarts
[13:25:12.743]                         grepl <- base::grepl
[13:25:12.743]                         restarts <- computeRestarts(cond)
[13:25:12.743]                         for (restart in restarts) {
[13:25:12.743]                           name <- restart$name
[13:25:12.743]                           if (is.null(name)) 
[13:25:12.743]                             next
[13:25:12.743]                           if (!grepl(pattern, name)) 
[13:25:12.743]                             next
[13:25:12.743]                           invokeRestart(restart)
[13:25:12.743]                           muffled <- TRUE
[13:25:12.743]                           break
[13:25:12.743]                         }
[13:25:12.743]                       }
[13:25:12.743]                     }
[13:25:12.743]                     invisible(muffled)
[13:25:12.743]                   }
[13:25:12.743]                   muffleCondition(cond)
[13:25:12.743]                 })
[13:25:12.743]             }))
[13:25:12.743]             future::FutureResult(value = ...future.value$value, 
[13:25:12.743]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:25:12.743]                   ...future.rng), globalenv = if (FALSE) 
[13:25:12.743]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:25:12.743]                     ...future.globalenv.names))
[13:25:12.743]                 else NULL, started = ...future.startTime, version = "1.8")
[13:25:12.743]         }, condition = base::local({
[13:25:12.743]             c <- base::c
[13:25:12.743]             inherits <- base::inherits
[13:25:12.743]             invokeRestart <- base::invokeRestart
[13:25:12.743]             length <- base::length
[13:25:12.743]             list <- base::list
[13:25:12.743]             seq.int <- base::seq.int
[13:25:12.743]             signalCondition <- base::signalCondition
[13:25:12.743]             sys.calls <- base::sys.calls
[13:25:12.743]             `[[` <- base::`[[`
[13:25:12.743]             `+` <- base::`+`
[13:25:12.743]             `<<-` <- base::`<<-`
[13:25:12.743]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:25:12.743]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:25:12.743]                   3L)]
[13:25:12.743]             }
[13:25:12.743]             function(cond) {
[13:25:12.743]                 is_error <- inherits(cond, "error")
[13:25:12.743]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:25:12.743]                   NULL)
[13:25:12.743]                 if (is_error) {
[13:25:12.743]                   sessionInformation <- function() {
[13:25:12.743]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:25:12.743]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:25:12.743]                       search = base::search(), system = base::Sys.info())
[13:25:12.743]                   }
[13:25:12.743]                   ...future.conditions[[length(...future.conditions) + 
[13:25:12.743]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:25:12.743]                     cond$call), session = sessionInformation(), 
[13:25:12.743]                     timestamp = base::Sys.time(), signaled = 0L)
[13:25:12.743]                   signalCondition(cond)
[13:25:12.743]                 }
[13:25:12.743]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:25:12.743]                 "immediateCondition"))) {
[13:25:12.743]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:25:12.743]                   ...future.conditions[[length(...future.conditions) + 
[13:25:12.743]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:25:12.743]                   if (TRUE && !signal) {
[13:25:12.743]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:25:12.743]                     {
[13:25:12.743]                       inherits <- base::inherits
[13:25:12.743]                       invokeRestart <- base::invokeRestart
[13:25:12.743]                       is.null <- base::is.null
[13:25:12.743]                       muffled <- FALSE
[13:25:12.743]                       if (inherits(cond, "message")) {
[13:25:12.743]                         muffled <- grepl(pattern, "muffleMessage")
[13:25:12.743]                         if (muffled) 
[13:25:12.743]                           invokeRestart("muffleMessage")
[13:25:12.743]                       }
[13:25:12.743]                       else if (inherits(cond, "warning")) {
[13:25:12.743]                         muffled <- grepl(pattern, "muffleWarning")
[13:25:12.743]                         if (muffled) 
[13:25:12.743]                           invokeRestart("muffleWarning")
[13:25:12.743]                       }
[13:25:12.743]                       else if (inherits(cond, "condition")) {
[13:25:12.743]                         if (!is.null(pattern)) {
[13:25:12.743]                           computeRestarts <- base::computeRestarts
[13:25:12.743]                           grepl <- base::grepl
[13:25:12.743]                           restarts <- computeRestarts(cond)
[13:25:12.743]                           for (restart in restarts) {
[13:25:12.743]                             name <- restart$name
[13:25:12.743]                             if (is.null(name)) 
[13:25:12.743]                               next
[13:25:12.743]                             if (!grepl(pattern, name)) 
[13:25:12.743]                               next
[13:25:12.743]                             invokeRestart(restart)
[13:25:12.743]                             muffled <- TRUE
[13:25:12.743]                             break
[13:25:12.743]                           }
[13:25:12.743]                         }
[13:25:12.743]                       }
[13:25:12.743]                       invisible(muffled)
[13:25:12.743]                     }
[13:25:12.743]                     muffleCondition(cond, pattern = "^muffle")
[13:25:12.743]                   }
[13:25:12.743]                 }
[13:25:12.743]                 else {
[13:25:12.743]                   if (TRUE) {
[13:25:12.743]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:25:12.743]                     {
[13:25:12.743]                       inherits <- base::inherits
[13:25:12.743]                       invokeRestart <- base::invokeRestart
[13:25:12.743]                       is.null <- base::is.null
[13:25:12.743]                       muffled <- FALSE
[13:25:12.743]                       if (inherits(cond, "message")) {
[13:25:12.743]                         muffled <- grepl(pattern, "muffleMessage")
[13:25:12.743]                         if (muffled) 
[13:25:12.743]                           invokeRestart("muffleMessage")
[13:25:12.743]                       }
[13:25:12.743]                       else if (inherits(cond, "warning")) {
[13:25:12.743]                         muffled <- grepl(pattern, "muffleWarning")
[13:25:12.743]                         if (muffled) 
[13:25:12.743]                           invokeRestart("muffleWarning")
[13:25:12.743]                       }
[13:25:12.743]                       else if (inherits(cond, "condition")) {
[13:25:12.743]                         if (!is.null(pattern)) {
[13:25:12.743]                           computeRestarts <- base::computeRestarts
[13:25:12.743]                           grepl <- base::grepl
[13:25:12.743]                           restarts <- computeRestarts(cond)
[13:25:12.743]                           for (restart in restarts) {
[13:25:12.743]                             name <- restart$name
[13:25:12.743]                             if (is.null(name)) 
[13:25:12.743]                               next
[13:25:12.743]                             if (!grepl(pattern, name)) 
[13:25:12.743]                               next
[13:25:12.743]                             invokeRestart(restart)
[13:25:12.743]                             muffled <- TRUE
[13:25:12.743]                             break
[13:25:12.743]                           }
[13:25:12.743]                         }
[13:25:12.743]                       }
[13:25:12.743]                       invisible(muffled)
[13:25:12.743]                     }
[13:25:12.743]                     muffleCondition(cond, pattern = "^muffle")
[13:25:12.743]                   }
[13:25:12.743]                 }
[13:25:12.743]             }
[13:25:12.743]         }))
[13:25:12.743]     }, error = function(ex) {
[13:25:12.743]         base::structure(base::list(value = NULL, visible = NULL, 
[13:25:12.743]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:25:12.743]                 ...future.rng), started = ...future.startTime, 
[13:25:12.743]             finished = Sys.time(), session_uuid = NA_character_, 
[13:25:12.743]             version = "1.8"), class = "FutureResult")
[13:25:12.743]     }, finally = {
[13:25:12.743]         if (!identical(...future.workdir, getwd())) 
[13:25:12.743]             setwd(...future.workdir)
[13:25:12.743]         {
[13:25:12.743]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:25:12.743]                 ...future.oldOptions$nwarnings <- NULL
[13:25:12.743]             }
[13:25:12.743]             base::options(...future.oldOptions)
[13:25:12.743]             if (.Platform$OS.type == "windows") {
[13:25:12.743]                 old_names <- names(...future.oldEnvVars)
[13:25:12.743]                 envs <- base::Sys.getenv()
[13:25:12.743]                 names <- names(envs)
[13:25:12.743]                 common <- intersect(names, old_names)
[13:25:12.743]                 added <- setdiff(names, old_names)
[13:25:12.743]                 removed <- setdiff(old_names, names)
[13:25:12.743]                 changed <- common[...future.oldEnvVars[common] != 
[13:25:12.743]                   envs[common]]
[13:25:12.743]                 NAMES <- toupper(changed)
[13:25:12.743]                 args <- list()
[13:25:12.743]                 for (kk in seq_along(NAMES)) {
[13:25:12.743]                   name <- changed[[kk]]
[13:25:12.743]                   NAME <- NAMES[[kk]]
[13:25:12.743]                   if (name != NAME && is.element(NAME, old_names)) 
[13:25:12.743]                     next
[13:25:12.743]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:25:12.743]                 }
[13:25:12.743]                 NAMES <- toupper(added)
[13:25:12.743]                 for (kk in seq_along(NAMES)) {
[13:25:12.743]                   name <- added[[kk]]
[13:25:12.743]                   NAME <- NAMES[[kk]]
[13:25:12.743]                   if (name != NAME && is.element(NAME, old_names)) 
[13:25:12.743]                     next
[13:25:12.743]                   args[[name]] <- ""
[13:25:12.743]                 }
[13:25:12.743]                 NAMES <- toupper(removed)
[13:25:12.743]                 for (kk in seq_along(NAMES)) {
[13:25:12.743]                   name <- removed[[kk]]
[13:25:12.743]                   NAME <- NAMES[[kk]]
[13:25:12.743]                   if (name != NAME && is.element(NAME, old_names)) 
[13:25:12.743]                     next
[13:25:12.743]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:25:12.743]                 }
[13:25:12.743]                 if (length(args) > 0) 
[13:25:12.743]                   base::do.call(base::Sys.setenv, args = args)
[13:25:12.743]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:25:12.743]             }
[13:25:12.743]             else {
[13:25:12.743]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:25:12.743]             }
[13:25:12.743]             {
[13:25:12.743]                 if (base::length(...future.futureOptionsAdded) > 
[13:25:12.743]                   0L) {
[13:25:12.743]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:25:12.743]                   base::names(opts) <- ...future.futureOptionsAdded
[13:25:12.743]                   base::options(opts)
[13:25:12.743]                 }
[13:25:12.743]                 {
[13:25:12.743]                   {
[13:25:12.743]                     base::options(mc.cores = ...future.mc.cores.old)
[13:25:12.743]                     NULL
[13:25:12.743]                   }
[13:25:12.743]                   options(future.plan = NULL)
[13:25:12.743]                   if (is.na(NA_character_)) 
[13:25:12.743]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:25:12.743]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:25:12.743]                   future::plan(list(function (..., workers = availableCores(), 
[13:25:12.743]                     lazy = FALSE, rscript_libs = .libPaths(), 
[13:25:12.743]                     envir = parent.frame()) 
[13:25:12.743]                   {
[13:25:12.743]                     if (is.function(workers)) 
[13:25:12.743]                       workers <- workers()
[13:25:12.743]                     workers <- structure(as.integer(workers), 
[13:25:12.743]                       class = class(workers))
[13:25:12.743]                     stop_if_not(length(workers) == 1, is.finite(workers), 
[13:25:12.743]                       workers >= 1)
[13:25:12.743]                     if (workers == 1L && !inherits(workers, "AsIs")) {
[13:25:12.743]                       return(sequential(..., lazy = TRUE, envir = envir))
[13:25:12.743]                     }
[13:25:12.743]                     future <- MultisessionFuture(..., workers = workers, 
[13:25:12.743]                       lazy = lazy, rscript_libs = rscript_libs, 
[13:25:12.743]                       envir = envir)
[13:25:12.743]                     if (!future$lazy) 
[13:25:12.743]                       future <- run(future)
[13:25:12.743]                     invisible(future)
[13:25:12.743]                   }), .cleanup = FALSE, .init = FALSE)
[13:25:12.743]                 }
[13:25:12.743]             }
[13:25:12.743]         }
[13:25:12.743]     })
[13:25:12.743]     if (TRUE) {
[13:25:12.743]         base::sink(type = "output", split = FALSE)
[13:25:12.743]         if (FALSE) {
[13:25:12.743]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:25:12.743]         }
[13:25:12.743]         else {
[13:25:12.743]             ...future.result["stdout"] <- base::list(NULL)
[13:25:12.743]         }
[13:25:12.743]         base::close(...future.stdout)
[13:25:12.743]         ...future.stdout <- NULL
[13:25:12.743]     }
[13:25:12.743]     ...future.result$conditions <- ...future.conditions
[13:25:12.743]     ...future.result$finished <- base::Sys.time()
[13:25:12.743]     ...future.result
[13:25:12.743] }
[13:25:12.746] MultisessionFuture started
[13:25:12.747] - Launch lazy future ... done
[13:25:12.747] run() for ‘MultisessionFuture’ ... done
[13:25:12.747] result() for ClusterFuture ...
[13:25:12.747] receiveMessageFromWorker() for ClusterFuture ...
[13:25:12.747] - Validating connection of MultisessionFuture
[13:25:12.793] - received message: FutureResult
[13:25:12.793] - Received FutureResult
[13:25:12.794] - Erased future from FutureRegistry
[13:25:12.794] result() for ClusterFuture ...
[13:25:12.794] - result already collected: FutureResult
[13:25:12.794] result() for ClusterFuture ... done
[13:25:12.794] receiveMessageFromWorker() for ClusterFuture ... done
[13:25:12.794] result() for ClusterFuture ... done
List of 11
 $ value       : int 42
 $ visible     : logi TRUE
 $ stdout      : NULL
 $ conditions  : list()
 $ rng         : logi FALSE
 $ globalenv   : NULL
 $ started     : POSIXct[1:1], format: "2025-01-07 13:25:12"
 $ finished    : POSIXct[1:1], format: "2025-01-07 13:25:12"
 $ session_uuid: chr "c8f3ba03-05d2-c7fc-368c-7fdfc4734650"
  ..- attr(*, "source")=List of 5
  .. ..$ host  : Named chr "47b98e4ec3a9"
  .. .. ..- attr(*, "names")= chr "HOSTNAME"
  .. ..$ info  : Named chr [1:8] "Linux" "6.5.0-1025-azure" "#26~22.04.1-Ubuntu SMP Thu Jul 11 22:33:04 UTC 2024" "47b98e4ec3a9" ...
  .. .. ..- attr(*, "names")= chr [1:8] "sysname" "release" "version" "nodename" ...
  .. ..$ pid   : int 93595
  .. ..$ time  : POSIXct[1:1], format: "2025-01-07 13:25:12"
  .. ..$ random: int 2147483647
 $ r_info      :List of 4
  ..$ version      :Classes 'R_system_version', 'package_version', 'numeric_version'  hidden list of 1
  .. ..$ : int [1:3] 4 3 2
  ..$ os           : chr "unix"
  ..$ os_name      : chr "Linux"
  ..$ captures_utf8: logi TRUE
 $ version     : chr "1.8"
 - attr(*, "class")= chr "FutureResult"
[13:25:12.802] result() for ClusterFuture ...
[13:25:12.802] - result already collected: FutureResult
[13:25:12.802] result() for ClusterFuture ... done
[13:25:12.802] result() for ClusterFuture ...
[13:25:12.802] - result already collected: FutureResult
[13:25:12.802] result() for ClusterFuture ... done
[13:25:12.803] getGlobalsAndPackages() ...
[13:25:12.803] Searching for globals...
[13:25:12.805] - globals found: [9] ‘{’, ‘print’, ‘:’, ‘str’, ‘cat’, ‘letters’, ‘write.table’, ‘[’, ‘::’
[13:25:12.806] Searching for globals ... DONE
[13:25:12.806] Resolving globals: FALSE
[13:25:12.806] 
[13:25:12.806] - packages: [1] ‘utils’
[13:25:12.806] getGlobalsAndPackages() ... DONE
[13:25:12.807] run() for ‘Future’ ...
[13:25:12.807] - state: ‘created’
[13:25:12.807] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[13:25:12.820] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:25:12.820] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[13:25:12.820]   - Field: ‘node’
[13:25:12.821]   - Field: ‘label’
[13:25:12.821]   - Field: ‘local’
[13:25:12.821]   - Field: ‘owner’
[13:25:12.821]   - Field: ‘envir’
[13:25:12.821]   - Field: ‘workers’
[13:25:12.821]   - Field: ‘packages’
[13:25:12.821]   - Field: ‘gc’
[13:25:12.821]   - Field: ‘conditions’
[13:25:12.821]   - Field: ‘persistent’
[13:25:12.821]   - Field: ‘expr’
[13:25:12.822]   - Field: ‘uuid’
[13:25:12.822]   - Field: ‘seed’
[13:25:12.822]   - Field: ‘version’
[13:25:12.822]   - Field: ‘result’
[13:25:12.822]   - Field: ‘asynchronous’
[13:25:12.822]   - Field: ‘calls’
[13:25:12.822]   - Field: ‘globals’
[13:25:12.822]   - Field: ‘stdout’
[13:25:12.822]   - Field: ‘earlySignal’
[13:25:12.822]   - Field: ‘lazy’
[13:25:12.822]   - Field: ‘state’
[13:25:12.822] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[13:25:12.823] - Launch lazy future ...
[13:25:12.823] Packages needed by the future expression (n = 1): ‘utils’
[13:25:12.823] Packages needed by future strategies (n = 0): <none>
[13:25:12.823] {
[13:25:12.823]     {
[13:25:12.823]         {
[13:25:12.823]             ...future.startTime <- base::Sys.time()
[13:25:12.823]             {
[13:25:12.823]                 {
[13:25:12.823]                   {
[13:25:12.823]                     {
[13:25:12.823]                       {
[13:25:12.823]                         base::local({
[13:25:12.823]                           has_future <- base::requireNamespace("future", 
[13:25:12.823]                             quietly = TRUE)
[13:25:12.823]                           if (has_future) {
[13:25:12.823]                             ns <- base::getNamespace("future")
[13:25:12.823]                             version <- ns[[".package"]][["version"]]
[13:25:12.823]                             if (is.null(version)) 
[13:25:12.823]                               version <- utils::packageVersion("future")
[13:25:12.823]                           }
[13:25:12.823]                           else {
[13:25:12.823]                             version <- NULL
[13:25:12.823]                           }
[13:25:12.823]                           if (!has_future || version < "1.8.0") {
[13:25:12.823]                             info <- base::c(r_version = base::gsub("R version ", 
[13:25:12.823]                               "", base::R.version$version.string), 
[13:25:12.823]                               platform = base::sprintf("%s (%s-bit)", 
[13:25:12.823]                                 base::R.version$platform, 8 * 
[13:25:12.823]                                   base::.Machine$sizeof.pointer), 
[13:25:12.823]                               os = base::paste(base::Sys.info()[base::c("sysname", 
[13:25:12.823]                                 "release", "version")], collapse = " "), 
[13:25:12.823]                               hostname = base::Sys.info()[["nodename"]])
[13:25:12.823]                             info <- base::sprintf("%s: %s", base::names(info), 
[13:25:12.823]                               info)
[13:25:12.823]                             info <- base::paste(info, collapse = "; ")
[13:25:12.823]                             if (!has_future) {
[13:25:12.823]                               msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:25:12.823]                                 info)
[13:25:12.823]                             }
[13:25:12.823]                             else {
[13:25:12.823]                               msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:25:12.823]                                 info, version)
[13:25:12.823]                             }
[13:25:12.823]                             base::stop(msg)
[13:25:12.823]                           }
[13:25:12.823]                         })
[13:25:12.823]                       }
[13:25:12.823]                       ...future.mc.cores.old <- base::getOption("mc.cores")
[13:25:12.823]                       base::options(mc.cores = 1L)
[13:25:12.823]                     }
[13:25:12.823]                     base::local({
[13:25:12.823]                       for (pkg in "utils") {
[13:25:12.823]                         base::loadNamespace(pkg)
[13:25:12.823]                         base::library(pkg, character.only = TRUE)
[13:25:12.823]                       }
[13:25:12.823]                     })
[13:25:12.823]                   }
[13:25:12.823]                   options(future.plan = NULL)
[13:25:12.823]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:25:12.823]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:25:12.823]                 }
[13:25:12.823]                 ...future.workdir <- getwd()
[13:25:12.823]             }
[13:25:12.823]             ...future.oldOptions <- base::as.list(base::.Options)
[13:25:12.823]             ...future.oldEnvVars <- base::Sys.getenv()
[13:25:12.823]         }
[13:25:12.823]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:25:12.823]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:25:12.823]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:25:12.823]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:25:12.823]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:25:12.823]             future.stdout.windows.reencode = NULL, width = 80L)
[13:25:12.823]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:25:12.823]             base::names(...future.oldOptions))
[13:25:12.823]     }
[13:25:12.823]     if (FALSE) {
[13:25:12.823]     }
[13:25:12.823]     else {
[13:25:12.823]         if (FALSE) {
[13:25:12.823]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:25:12.823]                 open = "w")
[13:25:12.823]         }
[13:25:12.823]         else {
[13:25:12.823]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:25:12.823]                 windows = "NUL", "/dev/null"), open = "w")
[13:25:12.823]         }
[13:25:12.823]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:25:12.823]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:25:12.823]             base::sink(type = "output", split = FALSE)
[13:25:12.823]             base::close(...future.stdout)
[13:25:12.823]         }, add = TRUE)
[13:25:12.823]     }
[13:25:12.823]     ...future.frame <- base::sys.nframe()
[13:25:12.823]     ...future.conditions <- base::list()
[13:25:12.823]     ...future.rng <- base::globalenv()$.Random.seed
[13:25:12.823]     if (FALSE) {
[13:25:12.823]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:25:12.823]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:25:12.823]     }
[13:25:12.823]     ...future.result <- base::tryCatch({
[13:25:12.823]         base::withCallingHandlers({
[13:25:12.823]             ...future.value <- base::withVisible(base::local({
[13:25:12.823]                 ...future.makeSendCondition <- base::local({
[13:25:12.823]                   sendCondition <- NULL
[13:25:12.823]                   function(frame = 1L) {
[13:25:12.823]                     if (is.function(sendCondition)) 
[13:25:12.823]                       return(sendCondition)
[13:25:12.823]                     ns <- getNamespace("parallel")
[13:25:12.823]                     if (exists("sendData", mode = "function", 
[13:25:12.823]                       envir = ns)) {
[13:25:12.823]                       parallel_sendData <- get("sendData", mode = "function", 
[13:25:12.823]                         envir = ns)
[13:25:12.823]                       envir <- sys.frame(frame)
[13:25:12.823]                       master <- NULL
[13:25:12.823]                       while (!identical(envir, .GlobalEnv) && 
[13:25:12.823]                         !identical(envir, emptyenv())) {
[13:25:12.823]                         if (exists("master", mode = "list", envir = envir, 
[13:25:12.823]                           inherits = FALSE)) {
[13:25:12.823]                           master <- get("master", mode = "list", 
[13:25:12.823]                             envir = envir, inherits = FALSE)
[13:25:12.823]                           if (inherits(master, c("SOCKnode", 
[13:25:12.823]                             "SOCK0node"))) {
[13:25:12.823]                             sendCondition <<- function(cond) {
[13:25:12.823]                               data <- list(type = "VALUE", value = cond, 
[13:25:12.823]                                 success = TRUE)
[13:25:12.823]                               parallel_sendData(master, data)
[13:25:12.823]                             }
[13:25:12.823]                             return(sendCondition)
[13:25:12.823]                           }
[13:25:12.823]                         }
[13:25:12.823]                         frame <- frame + 1L
[13:25:12.823]                         envir <- sys.frame(frame)
[13:25:12.823]                       }
[13:25:12.823]                     }
[13:25:12.823]                     sendCondition <<- function(cond) NULL
[13:25:12.823]                   }
[13:25:12.823]                 })
[13:25:12.823]                 withCallingHandlers({
[13:25:12.823]                   {
[13:25:12.823]                     print(1:50)
[13:25:12.823]                     str(1:50)
[13:25:12.823]                     cat(letters, sep = "-")
[13:25:12.823]                     cat(1:6, collapse = "\n")
[13:25:12.823]                     write.table(datasets::iris[1:10, ], sep = "\t")
[13:25:12.823]                     42L
[13:25:12.823]                   }
[13:25:12.823]                 }, immediateCondition = function(cond) {
[13:25:12.823]                   sendCondition <- ...future.makeSendCondition()
[13:25:12.823]                   sendCondition(cond)
[13:25:12.823]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:25:12.823]                   {
[13:25:12.823]                     inherits <- base::inherits
[13:25:12.823]                     invokeRestart <- base::invokeRestart
[13:25:12.823]                     is.null <- base::is.null
[13:25:12.823]                     muffled <- FALSE
[13:25:12.823]                     if (inherits(cond, "message")) {
[13:25:12.823]                       muffled <- grepl(pattern, "muffleMessage")
[13:25:12.823]                       if (muffled) 
[13:25:12.823]                         invokeRestart("muffleMessage")
[13:25:12.823]                     }
[13:25:12.823]                     else if (inherits(cond, "warning")) {
[13:25:12.823]                       muffled <- grepl(pattern, "muffleWarning")
[13:25:12.823]                       if (muffled) 
[13:25:12.823]                         invokeRestart("muffleWarning")
[13:25:12.823]                     }
[13:25:12.823]                     else if (inherits(cond, "condition")) {
[13:25:12.823]                       if (!is.null(pattern)) {
[13:25:12.823]                         computeRestarts <- base::computeRestarts
[13:25:12.823]                         grepl <- base::grepl
[13:25:12.823]                         restarts <- computeRestarts(cond)
[13:25:12.823]                         for (restart in restarts) {
[13:25:12.823]                           name <- restart$name
[13:25:12.823]                           if (is.null(name)) 
[13:25:12.823]                             next
[13:25:12.823]                           if (!grepl(pattern, name)) 
[13:25:12.823]                             next
[13:25:12.823]                           invokeRestart(restart)
[13:25:12.823]                           muffled <- TRUE
[13:25:12.823]                           break
[13:25:12.823]                         }
[13:25:12.823]                       }
[13:25:12.823]                     }
[13:25:12.823]                     invisible(muffled)
[13:25:12.823]                   }
[13:25:12.823]                   muffleCondition(cond)
[13:25:12.823]                 })
[13:25:12.823]             }))
[13:25:12.823]             future::FutureResult(value = ...future.value$value, 
[13:25:12.823]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:25:12.823]                   ...future.rng), globalenv = if (FALSE) 
[13:25:12.823]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:25:12.823]                     ...future.globalenv.names))
[13:25:12.823]                 else NULL, started = ...future.startTime, version = "1.8")
[13:25:12.823]         }, condition = base::local({
[13:25:12.823]             c <- base::c
[13:25:12.823]             inherits <- base::inherits
[13:25:12.823]             invokeRestart <- base::invokeRestart
[13:25:12.823]             length <- base::length
[13:25:12.823]             list <- base::list
[13:25:12.823]             seq.int <- base::seq.int
[13:25:12.823]             signalCondition <- base::signalCondition
[13:25:12.823]             sys.calls <- base::sys.calls
[13:25:12.823]             `[[` <- base::`[[`
[13:25:12.823]             `+` <- base::`+`
[13:25:12.823]             `<<-` <- base::`<<-`
[13:25:12.823]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:25:12.823]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:25:12.823]                   3L)]
[13:25:12.823]             }
[13:25:12.823]             function(cond) {
[13:25:12.823]                 is_error <- inherits(cond, "error")
[13:25:12.823]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:25:12.823]                   NULL)
[13:25:12.823]                 if (is_error) {
[13:25:12.823]                   sessionInformation <- function() {
[13:25:12.823]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:25:12.823]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:25:12.823]                       search = base::search(), system = base::Sys.info())
[13:25:12.823]                   }
[13:25:12.823]                   ...future.conditions[[length(...future.conditions) + 
[13:25:12.823]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:25:12.823]                     cond$call), session = sessionInformation(), 
[13:25:12.823]                     timestamp = base::Sys.time(), signaled = 0L)
[13:25:12.823]                   signalCondition(cond)
[13:25:12.823]                 }
[13:25:12.823]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:25:12.823]                 "immediateCondition"))) {
[13:25:12.823]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:25:12.823]                   ...future.conditions[[length(...future.conditions) + 
[13:25:12.823]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:25:12.823]                   if (TRUE && !signal) {
[13:25:12.823]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:25:12.823]                     {
[13:25:12.823]                       inherits <- base::inherits
[13:25:12.823]                       invokeRestart <- base::invokeRestart
[13:25:12.823]                       is.null <- base::is.null
[13:25:12.823]                       muffled <- FALSE
[13:25:12.823]                       if (inherits(cond, "message")) {
[13:25:12.823]                         muffled <- grepl(pattern, "muffleMessage")
[13:25:12.823]                         if (muffled) 
[13:25:12.823]                           invokeRestart("muffleMessage")
[13:25:12.823]                       }
[13:25:12.823]                       else if (inherits(cond, "warning")) {
[13:25:12.823]                         muffled <- grepl(pattern, "muffleWarning")
[13:25:12.823]                         if (muffled) 
[13:25:12.823]                           invokeRestart("muffleWarning")
[13:25:12.823]                       }
[13:25:12.823]                       else if (inherits(cond, "condition")) {
[13:25:12.823]                         if (!is.null(pattern)) {
[13:25:12.823]                           computeRestarts <- base::computeRestarts
[13:25:12.823]                           grepl <- base::grepl
[13:25:12.823]                           restarts <- computeRestarts(cond)
[13:25:12.823]                           for (restart in restarts) {
[13:25:12.823]                             name <- restart$name
[13:25:12.823]                             if (is.null(name)) 
[13:25:12.823]                               next
[13:25:12.823]                             if (!grepl(pattern, name)) 
[13:25:12.823]                               next
[13:25:12.823]                             invokeRestart(restart)
[13:25:12.823]                             muffled <- TRUE
[13:25:12.823]                             break
[13:25:12.823]                           }
[13:25:12.823]                         }
[13:25:12.823]                       }
[13:25:12.823]                       invisible(muffled)
[13:25:12.823]                     }
[13:25:12.823]                     muffleCondition(cond, pattern = "^muffle")
[13:25:12.823]                   }
[13:25:12.823]                 }
[13:25:12.823]                 else {
[13:25:12.823]                   if (TRUE) {
[13:25:12.823]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:25:12.823]                     {
[13:25:12.823]                       inherits <- base::inherits
[13:25:12.823]                       invokeRestart <- base::invokeRestart
[13:25:12.823]                       is.null <- base::is.null
[13:25:12.823]                       muffled <- FALSE
[13:25:12.823]                       if (inherits(cond, "message")) {
[13:25:12.823]                         muffled <- grepl(pattern, "muffleMessage")
[13:25:12.823]                         if (muffled) 
[13:25:12.823]                           invokeRestart("muffleMessage")
[13:25:12.823]                       }
[13:25:12.823]                       else if (inherits(cond, "warning")) {
[13:25:12.823]                         muffled <- grepl(pattern, "muffleWarning")
[13:25:12.823]                         if (muffled) 
[13:25:12.823]                           invokeRestart("muffleWarning")
[13:25:12.823]                       }
[13:25:12.823]                       else if (inherits(cond, "condition")) {
[13:25:12.823]                         if (!is.null(pattern)) {
[13:25:12.823]                           computeRestarts <- base::computeRestarts
[13:25:12.823]                           grepl <- base::grepl
[13:25:12.823]                           restarts <- computeRestarts(cond)
[13:25:12.823]                           for (restart in restarts) {
[13:25:12.823]                             name <- restart$name
[13:25:12.823]                             if (is.null(name)) 
[13:25:12.823]                               next
[13:25:12.823]                             if (!grepl(pattern, name)) 
[13:25:12.823]                               next
[13:25:12.823]                             invokeRestart(restart)
[13:25:12.823]                             muffled <- TRUE
[13:25:12.823]                             break
[13:25:12.823]                           }
[13:25:12.823]                         }
[13:25:12.823]                       }
[13:25:12.823]                       invisible(muffled)
[13:25:12.823]                     }
[13:25:12.823]                     muffleCondition(cond, pattern = "^muffle")
[13:25:12.823]                   }
[13:25:12.823]                 }
[13:25:12.823]             }
[13:25:12.823]         }))
[13:25:12.823]     }, error = function(ex) {
[13:25:12.823]         base::structure(base::list(value = NULL, visible = NULL, 
[13:25:12.823]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:25:12.823]                 ...future.rng), started = ...future.startTime, 
[13:25:12.823]             finished = Sys.time(), session_uuid = NA_character_, 
[13:25:12.823]             version = "1.8"), class = "FutureResult")
[13:25:12.823]     }, finally = {
[13:25:12.823]         if (!identical(...future.workdir, getwd())) 
[13:25:12.823]             setwd(...future.workdir)
[13:25:12.823]         {
[13:25:12.823]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:25:12.823]                 ...future.oldOptions$nwarnings <- NULL
[13:25:12.823]             }
[13:25:12.823]             base::options(...future.oldOptions)
[13:25:12.823]             if (.Platform$OS.type == "windows") {
[13:25:12.823]                 old_names <- names(...future.oldEnvVars)
[13:25:12.823]                 envs <- base::Sys.getenv()
[13:25:12.823]                 names <- names(envs)
[13:25:12.823]                 common <- intersect(names, old_names)
[13:25:12.823]                 added <- setdiff(names, old_names)
[13:25:12.823]                 removed <- setdiff(old_names, names)
[13:25:12.823]                 changed <- common[...future.oldEnvVars[common] != 
[13:25:12.823]                   envs[common]]
[13:25:12.823]                 NAMES <- toupper(changed)
[13:25:12.823]                 args <- list()
[13:25:12.823]                 for (kk in seq_along(NAMES)) {
[13:25:12.823]                   name <- changed[[kk]]
[13:25:12.823]                   NAME <- NAMES[[kk]]
[13:25:12.823]                   if (name != NAME && is.element(NAME, old_names)) 
[13:25:12.823]                     next
[13:25:12.823]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:25:12.823]                 }
[13:25:12.823]                 NAMES <- toupper(added)
[13:25:12.823]                 for (kk in seq_along(NAMES)) {
[13:25:12.823]                   name <- added[[kk]]
[13:25:12.823]                   NAME <- NAMES[[kk]]
[13:25:12.823]                   if (name != NAME && is.element(NAME, old_names)) 
[13:25:12.823]                     next
[13:25:12.823]                   args[[name]] <- ""
[13:25:12.823]                 }
[13:25:12.823]                 NAMES <- toupper(removed)
[13:25:12.823]                 for (kk in seq_along(NAMES)) {
[13:25:12.823]                   name <- removed[[kk]]
[13:25:12.823]                   NAME <- NAMES[[kk]]
[13:25:12.823]                   if (name != NAME && is.element(NAME, old_names)) 
[13:25:12.823]                     next
[13:25:12.823]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:25:12.823]                 }
[13:25:12.823]                 if (length(args) > 0) 
[13:25:12.823]                   base::do.call(base::Sys.setenv, args = args)
[13:25:12.823]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:25:12.823]             }
[13:25:12.823]             else {
[13:25:12.823]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:25:12.823]             }
[13:25:12.823]             {
[13:25:12.823]                 if (base::length(...future.futureOptionsAdded) > 
[13:25:12.823]                   0L) {
[13:25:12.823]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:25:12.823]                   base::names(opts) <- ...future.futureOptionsAdded
[13:25:12.823]                   base::options(opts)
[13:25:12.823]                 }
[13:25:12.823]                 {
[13:25:12.823]                   {
[13:25:12.823]                     base::options(mc.cores = ...future.mc.cores.old)
[13:25:12.823]                     NULL
[13:25:12.823]                   }
[13:25:12.823]                   options(future.plan = NULL)
[13:25:12.823]                   if (is.na(NA_character_)) 
[13:25:12.823]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:25:12.823]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:25:12.823]                   future::plan(list(function (..., workers = availableCores(), 
[13:25:12.823]                     lazy = FALSE, rscript_libs = .libPaths(), 
[13:25:12.823]                     envir = parent.frame()) 
[13:25:12.823]                   {
[13:25:12.823]                     if (is.function(workers)) 
[13:25:12.823]                       workers <- workers()
[13:25:12.823]                     workers <- structure(as.integer(workers), 
[13:25:12.823]                       class = class(workers))
[13:25:12.823]                     stop_if_not(length(workers) == 1, is.finite(workers), 
[13:25:12.823]                       workers >= 1)
[13:25:12.823]                     if (workers == 1L && !inherits(workers, "AsIs")) {
[13:25:12.823]                       return(sequential(..., lazy = TRUE, envir = envir))
[13:25:12.823]                     }
[13:25:12.823]                     future <- MultisessionFuture(..., workers = workers, 
[13:25:12.823]                       lazy = lazy, rscript_libs = rscript_libs, 
[13:25:12.823]                       envir = envir)
[13:25:12.823]                     if (!future$lazy) 
[13:25:12.823]                       future <- run(future)
[13:25:12.823]                     invisible(future)
[13:25:12.823]                   }), .cleanup = FALSE, .init = FALSE)
[13:25:12.823]                 }
[13:25:12.823]             }
[13:25:12.823]         }
[13:25:12.823]     })
[13:25:12.823]     if (TRUE) {
[13:25:12.823]         base::sink(type = "output", split = FALSE)
[13:25:12.823]         if (FALSE) {
[13:25:12.823]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:25:12.823]         }
[13:25:12.823]         else {
[13:25:12.823]             ...future.result["stdout"] <- base::list(NULL)
[13:25:12.823]         }
[13:25:12.823]         base::close(...future.stdout)
[13:25:12.823]         ...future.stdout <- NULL
[13:25:12.823]     }
[13:25:12.823]     ...future.result$conditions <- ...future.conditions
[13:25:12.823]     ...future.result$finished <- base::Sys.time()
[13:25:12.823]     ...future.result
[13:25:12.823] }
[13:25:12.827] MultisessionFuture started
[13:25:12.827] - Launch lazy future ... done
[13:25:12.827] run() for ‘MultisessionFuture’ ... done
[13:25:12.827] result() for ClusterFuture ...
[13:25:12.827] receiveMessageFromWorker() for ClusterFuture ...
[13:25:12.827] - Validating connection of MultisessionFuture
[13:25:12.874] - received message: FutureResult
[13:25:12.874] - Received FutureResult
[13:25:12.874] - Erased future from FutureRegistry
[13:25:12.874] result() for ClusterFuture ...
[13:25:12.874] - result already collected: FutureResult
[13:25:12.874] result() for ClusterFuture ... done
[13:25:12.874] receiveMessageFromWorker() for ClusterFuture ... done
[13:25:12.875] result() for ClusterFuture ... done
[13:25:12.875] result() for ClusterFuture ...
[13:25:12.875] - result already collected: FutureResult
[13:25:12.875] result() for ClusterFuture ... done
- stdout = structure(TRUE, drop = TRUE)
[13:25:12.875] getGlobalsAndPackages() ...
[13:25:12.875] Searching for globals...
[13:25:12.876] - globals found: [1] ‘print’
[13:25:12.876] Searching for globals ... DONE
[13:25:12.876] Resolving globals: FALSE
[13:25:12.876] 
[13:25:12.876] 
[13:25:12.876] getGlobalsAndPackages() ... DONE
[13:25:12.877] run() for ‘Future’ ...
[13:25:12.877] - state: ‘created’
[13:25:12.877] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[13:25:12.890] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:25:12.890] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[13:25:12.891]   - Field: ‘node’
[13:25:12.891]   - Field: ‘label’
[13:25:12.891]   - Field: ‘local’
[13:25:12.891]   - Field: ‘owner’
[13:25:12.891]   - Field: ‘envir’
[13:25:12.891]   - Field: ‘workers’
[13:25:12.891]   - Field: ‘packages’
[13:25:12.891]   - Field: ‘gc’
[13:25:12.891]   - Field: ‘conditions’
[13:25:12.891]   - Field: ‘persistent’
[13:25:12.892]   - Field: ‘expr’
[13:25:12.892]   - Field: ‘uuid’
[13:25:12.892]   - Field: ‘seed’
[13:25:12.892]   - Field: ‘version’
[13:25:12.892]   - Field: ‘result’
[13:25:12.892]   - Field: ‘asynchronous’
[13:25:12.892]   - Field: ‘calls’
[13:25:12.892]   - Field: ‘globals’
[13:25:12.892]   - Field: ‘stdout’
[13:25:12.892]   - Field: ‘earlySignal’
[13:25:12.892]   - Field: ‘lazy’
[13:25:12.893]   - Field: ‘state’
[13:25:12.893] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[13:25:12.893] - Launch lazy future ...
[13:25:12.893] Packages needed by the future expression (n = 0): <none>
[13:25:12.893] Packages needed by future strategies (n = 0): <none>
[13:25:12.894] {
[13:25:12.894]     {
[13:25:12.894]         {
[13:25:12.894]             ...future.startTime <- base::Sys.time()
[13:25:12.894]             {
[13:25:12.894]                 {
[13:25:12.894]                   {
[13:25:12.894]                     {
[13:25:12.894]                       base::local({
[13:25:12.894]                         has_future <- base::requireNamespace("future", 
[13:25:12.894]                           quietly = TRUE)
[13:25:12.894]                         if (has_future) {
[13:25:12.894]                           ns <- base::getNamespace("future")
[13:25:12.894]                           version <- ns[[".package"]][["version"]]
[13:25:12.894]                           if (is.null(version)) 
[13:25:12.894]                             version <- utils::packageVersion("future")
[13:25:12.894]                         }
[13:25:12.894]                         else {
[13:25:12.894]                           version <- NULL
[13:25:12.894]                         }
[13:25:12.894]                         if (!has_future || version < "1.8.0") {
[13:25:12.894]                           info <- base::c(r_version = base::gsub("R version ", 
[13:25:12.894]                             "", base::R.version$version.string), 
[13:25:12.894]                             platform = base::sprintf("%s (%s-bit)", 
[13:25:12.894]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:25:12.894]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:25:12.894]                               "release", "version")], collapse = " "), 
[13:25:12.894]                             hostname = base::Sys.info()[["nodename"]])
[13:25:12.894]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:25:12.894]                             info)
[13:25:12.894]                           info <- base::paste(info, collapse = "; ")
[13:25:12.894]                           if (!has_future) {
[13:25:12.894]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:25:12.894]                               info)
[13:25:12.894]                           }
[13:25:12.894]                           else {
[13:25:12.894]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:25:12.894]                               info, version)
[13:25:12.894]                           }
[13:25:12.894]                           base::stop(msg)
[13:25:12.894]                         }
[13:25:12.894]                       })
[13:25:12.894]                     }
[13:25:12.894]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[13:25:12.894]                     base::options(mc.cores = 1L)
[13:25:12.894]                   }
[13:25:12.894]                   options(future.plan = NULL)
[13:25:12.894]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:25:12.894]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:25:12.894]                 }
[13:25:12.894]                 ...future.workdir <- getwd()
[13:25:12.894]             }
[13:25:12.894]             ...future.oldOptions <- base::as.list(base::.Options)
[13:25:12.894]             ...future.oldEnvVars <- base::Sys.getenv()
[13:25:12.894]         }
[13:25:12.894]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:25:12.894]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:25:12.894]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:25:12.894]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:25:12.894]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:25:12.894]             future.stdout.windows.reencode = NULL, width = 80L)
[13:25:12.894]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:25:12.894]             base::names(...future.oldOptions))
[13:25:12.894]     }
[13:25:12.894]     if (FALSE) {
[13:25:12.894]     }
[13:25:12.894]     else {
[13:25:12.894]         if (TRUE) {
[13:25:12.894]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:25:12.894]                 open = "w")
[13:25:12.894]         }
[13:25:12.894]         else {
[13:25:12.894]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:25:12.894]                 windows = "NUL", "/dev/null"), open = "w")
[13:25:12.894]         }
[13:25:12.894]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:25:12.894]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:25:12.894]             base::sink(type = "output", split = FALSE)
[13:25:12.894]             base::close(...future.stdout)
[13:25:12.894]         }, add = TRUE)
[13:25:12.894]     }
[13:25:12.894]     ...future.frame <- base::sys.nframe()
[13:25:12.894]     ...future.conditions <- base::list()
[13:25:12.894]     ...future.rng <- base::globalenv()$.Random.seed
[13:25:12.894]     if (FALSE) {
[13:25:12.894]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:25:12.894]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:25:12.894]     }
[13:25:12.894]     ...future.result <- base::tryCatch({
[13:25:12.894]         base::withCallingHandlers({
[13:25:12.894]             ...future.value <- base::withVisible(base::local({
[13:25:12.894]                 ...future.makeSendCondition <- base::local({
[13:25:12.894]                   sendCondition <- NULL
[13:25:12.894]                   function(frame = 1L) {
[13:25:12.894]                     if (is.function(sendCondition)) 
[13:25:12.894]                       return(sendCondition)
[13:25:12.894]                     ns <- getNamespace("parallel")
[13:25:12.894]                     if (exists("sendData", mode = "function", 
[13:25:12.894]                       envir = ns)) {
[13:25:12.894]                       parallel_sendData <- get("sendData", mode = "function", 
[13:25:12.894]                         envir = ns)
[13:25:12.894]                       envir <- sys.frame(frame)
[13:25:12.894]                       master <- NULL
[13:25:12.894]                       while (!identical(envir, .GlobalEnv) && 
[13:25:12.894]                         !identical(envir, emptyenv())) {
[13:25:12.894]                         if (exists("master", mode = "list", envir = envir, 
[13:25:12.894]                           inherits = FALSE)) {
[13:25:12.894]                           master <- get("master", mode = "list", 
[13:25:12.894]                             envir = envir, inherits = FALSE)
[13:25:12.894]                           if (inherits(master, c("SOCKnode", 
[13:25:12.894]                             "SOCK0node"))) {
[13:25:12.894]                             sendCondition <<- function(cond) {
[13:25:12.894]                               data <- list(type = "VALUE", value = cond, 
[13:25:12.894]                                 success = TRUE)
[13:25:12.894]                               parallel_sendData(master, data)
[13:25:12.894]                             }
[13:25:12.894]                             return(sendCondition)
[13:25:12.894]                           }
[13:25:12.894]                         }
[13:25:12.894]                         frame <- frame + 1L
[13:25:12.894]                         envir <- sys.frame(frame)
[13:25:12.894]                       }
[13:25:12.894]                     }
[13:25:12.894]                     sendCondition <<- function(cond) NULL
[13:25:12.894]                   }
[13:25:12.894]                 })
[13:25:12.894]                 withCallingHandlers({
[13:25:12.894]                   print(42)
[13:25:12.894]                 }, immediateCondition = function(cond) {
[13:25:12.894]                   sendCondition <- ...future.makeSendCondition()
[13:25:12.894]                   sendCondition(cond)
[13:25:12.894]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:25:12.894]                   {
[13:25:12.894]                     inherits <- base::inherits
[13:25:12.894]                     invokeRestart <- base::invokeRestart
[13:25:12.894]                     is.null <- base::is.null
[13:25:12.894]                     muffled <- FALSE
[13:25:12.894]                     if (inherits(cond, "message")) {
[13:25:12.894]                       muffled <- grepl(pattern, "muffleMessage")
[13:25:12.894]                       if (muffled) 
[13:25:12.894]                         invokeRestart("muffleMessage")
[13:25:12.894]                     }
[13:25:12.894]                     else if (inherits(cond, "warning")) {
[13:25:12.894]                       muffled <- grepl(pattern, "muffleWarning")
[13:25:12.894]                       if (muffled) 
[13:25:12.894]                         invokeRestart("muffleWarning")
[13:25:12.894]                     }
[13:25:12.894]                     else if (inherits(cond, "condition")) {
[13:25:12.894]                       if (!is.null(pattern)) {
[13:25:12.894]                         computeRestarts <- base::computeRestarts
[13:25:12.894]                         grepl <- base::grepl
[13:25:12.894]                         restarts <- computeRestarts(cond)
[13:25:12.894]                         for (restart in restarts) {
[13:25:12.894]                           name <- restart$name
[13:25:12.894]                           if (is.null(name)) 
[13:25:12.894]                             next
[13:25:12.894]                           if (!grepl(pattern, name)) 
[13:25:12.894]                             next
[13:25:12.894]                           invokeRestart(restart)
[13:25:12.894]                           muffled <- TRUE
[13:25:12.894]                           break
[13:25:12.894]                         }
[13:25:12.894]                       }
[13:25:12.894]                     }
[13:25:12.894]                     invisible(muffled)
[13:25:12.894]                   }
[13:25:12.894]                   muffleCondition(cond)
[13:25:12.894]                 })
[13:25:12.894]             }))
[13:25:12.894]             future::FutureResult(value = ...future.value$value, 
[13:25:12.894]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:25:12.894]                   ...future.rng), globalenv = if (FALSE) 
[13:25:12.894]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:25:12.894]                     ...future.globalenv.names))
[13:25:12.894]                 else NULL, started = ...future.startTime, version = "1.8")
[13:25:12.894]         }, condition = base::local({
[13:25:12.894]             c <- base::c
[13:25:12.894]             inherits <- base::inherits
[13:25:12.894]             invokeRestart <- base::invokeRestart
[13:25:12.894]             length <- base::length
[13:25:12.894]             list <- base::list
[13:25:12.894]             seq.int <- base::seq.int
[13:25:12.894]             signalCondition <- base::signalCondition
[13:25:12.894]             sys.calls <- base::sys.calls
[13:25:12.894]             `[[` <- base::`[[`
[13:25:12.894]             `+` <- base::`+`
[13:25:12.894]             `<<-` <- base::`<<-`
[13:25:12.894]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:25:12.894]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:25:12.894]                   3L)]
[13:25:12.894]             }
[13:25:12.894]             function(cond) {
[13:25:12.894]                 is_error <- inherits(cond, "error")
[13:25:12.894]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:25:12.894]                   NULL)
[13:25:12.894]                 if (is_error) {
[13:25:12.894]                   sessionInformation <- function() {
[13:25:12.894]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:25:12.894]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:25:12.894]                       search = base::search(), system = base::Sys.info())
[13:25:12.894]                   }
[13:25:12.894]                   ...future.conditions[[length(...future.conditions) + 
[13:25:12.894]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:25:12.894]                     cond$call), session = sessionInformation(), 
[13:25:12.894]                     timestamp = base::Sys.time(), signaled = 0L)
[13:25:12.894]                   signalCondition(cond)
[13:25:12.894]                 }
[13:25:12.894]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:25:12.894]                 "immediateCondition"))) {
[13:25:12.894]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:25:12.894]                   ...future.conditions[[length(...future.conditions) + 
[13:25:12.894]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:25:12.894]                   if (TRUE && !signal) {
[13:25:12.894]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:25:12.894]                     {
[13:25:12.894]                       inherits <- base::inherits
[13:25:12.894]                       invokeRestart <- base::invokeRestart
[13:25:12.894]                       is.null <- base::is.null
[13:25:12.894]                       muffled <- FALSE
[13:25:12.894]                       if (inherits(cond, "message")) {
[13:25:12.894]                         muffled <- grepl(pattern, "muffleMessage")
[13:25:12.894]                         if (muffled) 
[13:25:12.894]                           invokeRestart("muffleMessage")
[13:25:12.894]                       }
[13:25:12.894]                       else if (inherits(cond, "warning")) {
[13:25:12.894]                         muffled <- grepl(pattern, "muffleWarning")
[13:25:12.894]                         if (muffled) 
[13:25:12.894]                           invokeRestart("muffleWarning")
[13:25:12.894]                       }
[13:25:12.894]                       else if (inherits(cond, "condition")) {
[13:25:12.894]                         if (!is.null(pattern)) {
[13:25:12.894]                           computeRestarts <- base::computeRestarts
[13:25:12.894]                           grepl <- base::grepl
[13:25:12.894]                           restarts <- computeRestarts(cond)
[13:25:12.894]                           for (restart in restarts) {
[13:25:12.894]                             name <- restart$name
[13:25:12.894]                             if (is.null(name)) 
[13:25:12.894]                               next
[13:25:12.894]                             if (!grepl(pattern, name)) 
[13:25:12.894]                               next
[13:25:12.894]                             invokeRestart(restart)
[13:25:12.894]                             muffled <- TRUE
[13:25:12.894]                             break
[13:25:12.894]                           }
[13:25:12.894]                         }
[13:25:12.894]                       }
[13:25:12.894]                       invisible(muffled)
[13:25:12.894]                     }
[13:25:12.894]                     muffleCondition(cond, pattern = "^muffle")
[13:25:12.894]                   }
[13:25:12.894]                 }
[13:25:12.894]                 else {
[13:25:12.894]                   if (TRUE) {
[13:25:12.894]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:25:12.894]                     {
[13:25:12.894]                       inherits <- base::inherits
[13:25:12.894]                       invokeRestart <- base::invokeRestart
[13:25:12.894]                       is.null <- base::is.null
[13:25:12.894]                       muffled <- FALSE
[13:25:12.894]                       if (inherits(cond, "message")) {
[13:25:12.894]                         muffled <- grepl(pattern, "muffleMessage")
[13:25:12.894]                         if (muffled) 
[13:25:12.894]                           invokeRestart("muffleMessage")
[13:25:12.894]                       }
[13:25:12.894]                       else if (inherits(cond, "warning")) {
[13:25:12.894]                         muffled <- grepl(pattern, "muffleWarning")
[13:25:12.894]                         if (muffled) 
[13:25:12.894]                           invokeRestart("muffleWarning")
[13:25:12.894]                       }
[13:25:12.894]                       else if (inherits(cond, "condition")) {
[13:25:12.894]                         if (!is.null(pattern)) {
[13:25:12.894]                           computeRestarts <- base::computeRestarts
[13:25:12.894]                           grepl <- base::grepl
[13:25:12.894]                           restarts <- computeRestarts(cond)
[13:25:12.894]                           for (restart in restarts) {
[13:25:12.894]                             name <- restart$name
[13:25:12.894]                             if (is.null(name)) 
[13:25:12.894]                               next
[13:25:12.894]                             if (!grepl(pattern, name)) 
[13:25:12.894]                               next
[13:25:12.894]                             invokeRestart(restart)
[13:25:12.894]                             muffled <- TRUE
[13:25:12.894]                             break
[13:25:12.894]                           }
[13:25:12.894]                         }
[13:25:12.894]                       }
[13:25:12.894]                       invisible(muffled)
[13:25:12.894]                     }
[13:25:12.894]                     muffleCondition(cond, pattern = "^muffle")
[13:25:12.894]                   }
[13:25:12.894]                 }
[13:25:12.894]             }
[13:25:12.894]         }))
[13:25:12.894]     }, error = function(ex) {
[13:25:12.894]         base::structure(base::list(value = NULL, visible = NULL, 
[13:25:12.894]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:25:12.894]                 ...future.rng), started = ...future.startTime, 
[13:25:12.894]             finished = Sys.time(), session_uuid = NA_character_, 
[13:25:12.894]             version = "1.8"), class = "FutureResult")
[13:25:12.894]     }, finally = {
[13:25:12.894]         if (!identical(...future.workdir, getwd())) 
[13:25:12.894]             setwd(...future.workdir)
[13:25:12.894]         {
[13:25:12.894]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:25:12.894]                 ...future.oldOptions$nwarnings <- NULL
[13:25:12.894]             }
[13:25:12.894]             base::options(...future.oldOptions)
[13:25:12.894]             if (.Platform$OS.type == "windows") {
[13:25:12.894]                 old_names <- names(...future.oldEnvVars)
[13:25:12.894]                 envs <- base::Sys.getenv()
[13:25:12.894]                 names <- names(envs)
[13:25:12.894]                 common <- intersect(names, old_names)
[13:25:12.894]                 added <- setdiff(names, old_names)
[13:25:12.894]                 removed <- setdiff(old_names, names)
[13:25:12.894]                 changed <- common[...future.oldEnvVars[common] != 
[13:25:12.894]                   envs[common]]
[13:25:12.894]                 NAMES <- toupper(changed)
[13:25:12.894]                 args <- list()
[13:25:12.894]                 for (kk in seq_along(NAMES)) {
[13:25:12.894]                   name <- changed[[kk]]
[13:25:12.894]                   NAME <- NAMES[[kk]]
[13:25:12.894]                   if (name != NAME && is.element(NAME, old_names)) 
[13:25:12.894]                     next
[13:25:12.894]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:25:12.894]                 }
[13:25:12.894]                 NAMES <- toupper(added)
[13:25:12.894]                 for (kk in seq_along(NAMES)) {
[13:25:12.894]                   name <- added[[kk]]
[13:25:12.894]                   NAME <- NAMES[[kk]]
[13:25:12.894]                   if (name != NAME && is.element(NAME, old_names)) 
[13:25:12.894]                     next
[13:25:12.894]                   args[[name]] <- ""
[13:25:12.894]                 }
[13:25:12.894]                 NAMES <- toupper(removed)
[13:25:12.894]                 for (kk in seq_along(NAMES)) {
[13:25:12.894]                   name <- removed[[kk]]
[13:25:12.894]                   NAME <- NAMES[[kk]]
[13:25:12.894]                   if (name != NAME && is.element(NAME, old_names)) 
[13:25:12.894]                     next
[13:25:12.894]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:25:12.894]                 }
[13:25:12.894]                 if (length(args) > 0) 
[13:25:12.894]                   base::do.call(base::Sys.setenv, args = args)
[13:25:12.894]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:25:12.894]             }
[13:25:12.894]             else {
[13:25:12.894]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:25:12.894]             }
[13:25:12.894]             {
[13:25:12.894]                 if (base::length(...future.futureOptionsAdded) > 
[13:25:12.894]                   0L) {
[13:25:12.894]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:25:12.894]                   base::names(opts) <- ...future.futureOptionsAdded
[13:25:12.894]                   base::options(opts)
[13:25:12.894]                 }
[13:25:12.894]                 {
[13:25:12.894]                   {
[13:25:12.894]                     base::options(mc.cores = ...future.mc.cores.old)
[13:25:12.894]                     NULL
[13:25:12.894]                   }
[13:25:12.894]                   options(future.plan = NULL)
[13:25:12.894]                   if (is.na(NA_character_)) 
[13:25:12.894]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:25:12.894]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:25:12.894]                   future::plan(list(function (..., workers = availableCores(), 
[13:25:12.894]                     lazy = FALSE, rscript_libs = .libPaths(), 
[13:25:12.894]                     envir = parent.frame()) 
[13:25:12.894]                   {
[13:25:12.894]                     if (is.function(workers)) 
[13:25:12.894]                       workers <- workers()
[13:25:12.894]                     workers <- structure(as.integer(workers), 
[13:25:12.894]                       class = class(workers))
[13:25:12.894]                     stop_if_not(length(workers) == 1, is.finite(workers), 
[13:25:12.894]                       workers >= 1)
[13:25:12.894]                     if (workers == 1L && !inherits(workers, "AsIs")) {
[13:25:12.894]                       return(sequential(..., lazy = TRUE, envir = envir))
[13:25:12.894]                     }
[13:25:12.894]                     future <- MultisessionFuture(..., workers = workers, 
[13:25:12.894]                       lazy = lazy, rscript_libs = rscript_libs, 
[13:25:12.894]                       envir = envir)
[13:25:12.894]                     if (!future$lazy) 
[13:25:12.894]                       future <- run(future)
[13:25:12.894]                     invisible(future)
[13:25:12.894]                   }), .cleanup = FALSE, .init = FALSE)
[13:25:12.894]                 }
[13:25:12.894]             }
[13:25:12.894]         }
[13:25:12.894]     })
[13:25:12.894]     if (TRUE) {
[13:25:12.894]         base::sink(type = "output", split = FALSE)
[13:25:12.894]         if (TRUE) {
[13:25:12.894]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:25:12.894]         }
[13:25:12.894]         else {
[13:25:12.894]             ...future.result["stdout"] <- base::list(NULL)
[13:25:12.894]         }
[13:25:12.894]         base::close(...future.stdout)
[13:25:12.894]         ...future.stdout <- NULL
[13:25:12.894]     }
[13:25:12.894]     ...future.result$conditions <- ...future.conditions
[13:25:12.894]     ...future.result$finished <- base::Sys.time()
[13:25:12.894]     ...future.result
[13:25:12.894] }
[13:25:12.897] MultisessionFuture started
[13:25:12.897] - Launch lazy future ... done
[13:25:12.897] run() for ‘MultisessionFuture’ ... done
[13:25:12.897] result() for ClusterFuture ...
[13:25:12.897] receiveMessageFromWorker() for ClusterFuture ...
[13:25:12.897] - Validating connection of MultisessionFuture
[13:25:12.945] - received message: FutureResult
[13:25:12.945] - Received FutureResult
[13:25:12.945] - Erased future from FutureRegistry
[13:25:12.945] result() for ClusterFuture ...
[13:25:12.945] - result already collected: FutureResult
[13:25:12.945] result() for ClusterFuture ... done
[13:25:12.945] receiveMessageFromWorker() for ClusterFuture ... done
[13:25:12.945] result() for ClusterFuture ... done
[13:25:12.945] result() for ClusterFuture ...
[13:25:12.945] - result already collected: FutureResult
[13:25:12.946] result() for ClusterFuture ... done
[13:25:12.946] result() for ClusterFuture ...
[13:25:12.946] - result already collected: FutureResult
[13:25:12.946] result() for ClusterFuture ... done
[1] 42
[13:25:12.946] result() for ClusterFuture ...
[13:25:12.946] - result already collected: FutureResult
[13:25:12.946] result() for ClusterFuture ... done
- stdout = NA
[13:25:12.946] getGlobalsAndPackages() ...
[13:25:12.946] Searching for globals...
[13:25:12.949] - globals found: [9] ‘{’, ‘print’, ‘:’, ‘str’, ‘cat’, ‘letters’, ‘write.table’, ‘[’, ‘::’
[13:25:12.950] Searching for globals ... DONE
[13:25:12.950] Resolving globals: FALSE
[13:25:12.950] 
[13:25:12.950] - packages: [1] ‘utils’
[13:25:12.950] getGlobalsAndPackages() ... DONE
[13:25:12.951] run() for ‘Future’ ...
[13:25:12.951] - state: ‘created’
[13:25:12.951] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[13:25:12.965] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:25:12.965] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[13:25:12.965]   - Field: ‘node’
[13:25:12.965]   - Field: ‘label’
[13:25:12.965]   - Field: ‘local’
[13:25:12.965]   - Field: ‘owner’
[13:25:12.966]   - Field: ‘envir’
[13:25:12.966]   - Field: ‘workers’
[13:25:12.966]   - Field: ‘packages’
[13:25:12.966]   - Field: ‘gc’
[13:25:12.968]   - Field: ‘conditions’
[13:25:12.968]   - Field: ‘persistent’
[13:25:12.968]   - Field: ‘expr’
[13:25:12.968]   - Field: ‘uuid’
[13:25:12.968]   - Field: ‘seed’
[13:25:12.968]   - Field: ‘version’
[13:25:12.968]   - Field: ‘result’
[13:25:12.968]   - Field: ‘asynchronous’
[13:25:12.968]   - Field: ‘calls’
[13:25:12.969]   - Field: ‘globals’
[13:25:12.969]   - Field: ‘stdout’
[13:25:12.969]   - Field: ‘earlySignal’
[13:25:12.969]   - Field: ‘lazy’
[13:25:12.969]   - Field: ‘state’
[13:25:12.969] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[13:25:12.969] - Launch lazy future ...
[13:25:12.969] Packages needed by the future expression (n = 1): ‘utils’
[13:25:12.969] Packages needed by future strategies (n = 0): <none>
[13:25:12.970] {
[13:25:12.970]     {
[13:25:12.970]         {
[13:25:12.970]             ...future.startTime <- base::Sys.time()
[13:25:12.970]             {
[13:25:12.970]                 {
[13:25:12.970]                   {
[13:25:12.970]                     {
[13:25:12.970]                       {
[13:25:12.970]                         base::local({
[13:25:12.970]                           has_future <- base::requireNamespace("future", 
[13:25:12.970]                             quietly = TRUE)
[13:25:12.970]                           if (has_future) {
[13:25:12.970]                             ns <- base::getNamespace("future")
[13:25:12.970]                             version <- ns[[".package"]][["version"]]
[13:25:12.970]                             if (is.null(version)) 
[13:25:12.970]                               version <- utils::packageVersion("future")
[13:25:12.970]                           }
[13:25:12.970]                           else {
[13:25:12.970]                             version <- NULL
[13:25:12.970]                           }
[13:25:12.970]                           if (!has_future || version < "1.8.0") {
[13:25:12.970]                             info <- base::c(r_version = base::gsub("R version ", 
[13:25:12.970]                               "", base::R.version$version.string), 
[13:25:12.970]                               platform = base::sprintf("%s (%s-bit)", 
[13:25:12.970]                                 base::R.version$platform, 8 * 
[13:25:12.970]                                   base::.Machine$sizeof.pointer), 
[13:25:12.970]                               os = base::paste(base::Sys.info()[base::c("sysname", 
[13:25:12.970]                                 "release", "version")], collapse = " "), 
[13:25:12.970]                               hostname = base::Sys.info()[["nodename"]])
[13:25:12.970]                             info <- base::sprintf("%s: %s", base::names(info), 
[13:25:12.970]                               info)
[13:25:12.970]                             info <- base::paste(info, collapse = "; ")
[13:25:12.970]                             if (!has_future) {
[13:25:12.970]                               msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:25:12.970]                                 info)
[13:25:12.970]                             }
[13:25:12.970]                             else {
[13:25:12.970]                               msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:25:12.970]                                 info, version)
[13:25:12.970]                             }
[13:25:12.970]                             base::stop(msg)
[13:25:12.970]                           }
[13:25:12.970]                         })
[13:25:12.970]                       }
[13:25:12.970]                       ...future.mc.cores.old <- base::getOption("mc.cores")
[13:25:12.970]                       base::options(mc.cores = 1L)
[13:25:12.970]                     }
[13:25:12.970]                     base::local({
[13:25:12.970]                       for (pkg in "utils") {
[13:25:12.970]                         base::loadNamespace(pkg)
[13:25:12.970]                         base::library(pkg, character.only = TRUE)
[13:25:12.970]                       }
[13:25:12.970]                     })
[13:25:12.970]                   }
[13:25:12.970]                   options(future.plan = NULL)
[13:25:12.970]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:25:12.970]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:25:12.970]                 }
[13:25:12.970]                 ...future.workdir <- getwd()
[13:25:12.970]             }
[13:25:12.970]             ...future.oldOptions <- base::as.list(base::.Options)
[13:25:12.970]             ...future.oldEnvVars <- base::Sys.getenv()
[13:25:12.970]         }
[13:25:12.970]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:25:12.970]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:25:12.970]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:25:12.970]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:25:12.970]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:25:12.970]             future.stdout.windows.reencode = NULL, width = 80L)
[13:25:12.970]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:25:12.970]             base::names(...future.oldOptions))
[13:25:12.970]     }
[13:25:12.970]     if (TRUE) {
[13:25:12.970]     }
[13:25:12.970]     else {
[13:25:12.970]         if (NA) {
[13:25:12.970]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:25:12.970]                 open = "w")
[13:25:12.970]         }
[13:25:12.970]         else {
[13:25:12.970]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:25:12.970]                 windows = "NUL", "/dev/null"), open = "w")
[13:25:12.970]         }
[13:25:12.970]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:25:12.970]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:25:12.970]             base::sink(type = "output", split = FALSE)
[13:25:12.970]             base::close(...future.stdout)
[13:25:12.970]         }, add = TRUE)
[13:25:12.970]     }
[13:25:12.970]     ...future.frame <- base::sys.nframe()
[13:25:12.970]     ...future.conditions <- base::list()
[13:25:12.970]     ...future.rng <- base::globalenv()$.Random.seed
[13:25:12.970]     if (FALSE) {
[13:25:12.970]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:25:12.970]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:25:12.970]     }
[13:25:12.970]     ...future.result <- base::tryCatch({
[13:25:12.970]         base::withCallingHandlers({
[13:25:12.970]             ...future.value <- base::withVisible(base::local({
[13:25:12.970]                 ...future.makeSendCondition <- base::local({
[13:25:12.970]                   sendCondition <- NULL
[13:25:12.970]                   function(frame = 1L) {
[13:25:12.970]                     if (is.function(sendCondition)) 
[13:25:12.970]                       return(sendCondition)
[13:25:12.970]                     ns <- getNamespace("parallel")
[13:25:12.970]                     if (exists("sendData", mode = "function", 
[13:25:12.970]                       envir = ns)) {
[13:25:12.970]                       parallel_sendData <- get("sendData", mode = "function", 
[13:25:12.970]                         envir = ns)
[13:25:12.970]                       envir <- sys.frame(frame)
[13:25:12.970]                       master <- NULL
[13:25:12.970]                       while (!identical(envir, .GlobalEnv) && 
[13:25:12.970]                         !identical(envir, emptyenv())) {
[13:25:12.970]                         if (exists("master", mode = "list", envir = envir, 
[13:25:12.970]                           inherits = FALSE)) {
[13:25:12.970]                           master <- get("master", mode = "list", 
[13:25:12.970]                             envir = envir, inherits = FALSE)
[13:25:12.970]                           if (inherits(master, c("SOCKnode", 
[13:25:12.970]                             "SOCK0node"))) {
[13:25:12.970]                             sendCondition <<- function(cond) {
[13:25:12.970]                               data <- list(type = "VALUE", value = cond, 
[13:25:12.970]                                 success = TRUE)
[13:25:12.970]                               parallel_sendData(master, data)
[13:25:12.970]                             }
[13:25:12.970]                             return(sendCondition)
[13:25:12.970]                           }
[13:25:12.970]                         }
[13:25:12.970]                         frame <- frame + 1L
[13:25:12.970]                         envir <- sys.frame(frame)
[13:25:12.970]                       }
[13:25:12.970]                     }
[13:25:12.970]                     sendCondition <<- function(cond) NULL
[13:25:12.970]                   }
[13:25:12.970]                 })
[13:25:12.970]                 withCallingHandlers({
[13:25:12.970]                   {
[13:25:12.970]                     print(1:50)
[13:25:12.970]                     str(1:50)
[13:25:12.970]                     cat(letters, sep = "-")
[13:25:12.970]                     cat(1:6, collapse = "\n")
[13:25:12.970]                     write.table(datasets::iris[1:10, ], sep = "\t")
[13:25:12.970]                     42L
[13:25:12.970]                   }
[13:25:12.970]                 }, immediateCondition = function(cond) {
[13:25:12.970]                   sendCondition <- ...future.makeSendCondition()
[13:25:12.970]                   sendCondition(cond)
[13:25:12.970]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:25:12.970]                   {
[13:25:12.970]                     inherits <- base::inherits
[13:25:12.970]                     invokeRestart <- base::invokeRestart
[13:25:12.970]                     is.null <- base::is.null
[13:25:12.970]                     muffled <- FALSE
[13:25:12.970]                     if (inherits(cond, "message")) {
[13:25:12.970]                       muffled <- grepl(pattern, "muffleMessage")
[13:25:12.970]                       if (muffled) 
[13:25:12.970]                         invokeRestart("muffleMessage")
[13:25:12.970]                     }
[13:25:12.970]                     else if (inherits(cond, "warning")) {
[13:25:12.970]                       muffled <- grepl(pattern, "muffleWarning")
[13:25:12.970]                       if (muffled) 
[13:25:12.970]                         invokeRestart("muffleWarning")
[13:25:12.970]                     }
[13:25:12.970]                     else if (inherits(cond, "condition")) {
[13:25:12.970]                       if (!is.null(pattern)) {
[13:25:12.970]                         computeRestarts <- base::computeRestarts
[13:25:12.970]                         grepl <- base::grepl
[13:25:12.970]                         restarts <- computeRestarts(cond)
[13:25:12.970]                         for (restart in restarts) {
[13:25:12.970]                           name <- restart$name
[13:25:12.970]                           if (is.null(name)) 
[13:25:12.970]                             next
[13:25:12.970]                           if (!grepl(pattern, name)) 
[13:25:12.970]                             next
[13:25:12.970]                           invokeRestart(restart)
[13:25:12.970]                           muffled <- TRUE
[13:25:12.970]                           break
[13:25:12.970]                         }
[13:25:12.970]                       }
[13:25:12.970]                     }
[13:25:12.970]                     invisible(muffled)
[13:25:12.970]                   }
[13:25:12.970]                   muffleCondition(cond)
[13:25:12.970]                 })
[13:25:12.970]             }))
[13:25:12.970]             future::FutureResult(value = ...future.value$value, 
[13:25:12.970]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:25:12.970]                   ...future.rng), globalenv = if (FALSE) 
[13:25:12.970]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:25:12.970]                     ...future.globalenv.names))
[13:25:12.970]                 else NULL, started = ...future.startTime, version = "1.8")
[13:25:12.970]         }, condition = base::local({
[13:25:12.970]             c <- base::c
[13:25:12.970]             inherits <- base::inherits
[13:25:12.970]             invokeRestart <- base::invokeRestart
[13:25:12.970]             length <- base::length
[13:25:12.970]             list <- base::list
[13:25:12.970]             seq.int <- base::seq.int
[13:25:12.970]             signalCondition <- base::signalCondition
[13:25:12.970]             sys.calls <- base::sys.calls
[13:25:12.970]             `[[` <- base::`[[`
[13:25:12.970]             `+` <- base::`+`
[13:25:12.970]             `<<-` <- base::`<<-`
[13:25:12.970]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:25:12.970]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:25:12.970]                   3L)]
[13:25:12.970]             }
[13:25:12.970]             function(cond) {
[13:25:12.970]                 is_error <- inherits(cond, "error")
[13:25:12.970]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:25:12.970]                   NULL)
[13:25:12.970]                 if (is_error) {
[13:25:12.970]                   sessionInformation <- function() {
[13:25:12.970]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:25:12.970]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:25:12.970]                       search = base::search(), system = base::Sys.info())
[13:25:12.970]                   }
[13:25:12.970]                   ...future.conditions[[length(...future.conditions) + 
[13:25:12.970]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:25:12.970]                     cond$call), session = sessionInformation(), 
[13:25:12.970]                     timestamp = base::Sys.time(), signaled = 0L)
[13:25:12.970]                   signalCondition(cond)
[13:25:12.970]                 }
[13:25:12.970]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:25:12.970]                 "immediateCondition"))) {
[13:25:12.970]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:25:12.970]                   ...future.conditions[[length(...future.conditions) + 
[13:25:12.970]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:25:12.970]                   if (TRUE && !signal) {
[13:25:12.970]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:25:12.970]                     {
[13:25:12.970]                       inherits <- base::inherits
[13:25:12.970]                       invokeRestart <- base::invokeRestart
[13:25:12.970]                       is.null <- base::is.null
[13:25:12.970]                       muffled <- FALSE
[13:25:12.970]                       if (inherits(cond, "message")) {
[13:25:12.970]                         muffled <- grepl(pattern, "muffleMessage")
[13:25:12.970]                         if (muffled) 
[13:25:12.970]                           invokeRestart("muffleMessage")
[13:25:12.970]                       }
[13:25:12.970]                       else if (inherits(cond, "warning")) {
[13:25:12.970]                         muffled <- grepl(pattern, "muffleWarning")
[13:25:12.970]                         if (muffled) 
[13:25:12.970]                           invokeRestart("muffleWarning")
[13:25:12.970]                       }
[13:25:12.970]                       else if (inherits(cond, "condition")) {
[13:25:12.970]                         if (!is.null(pattern)) {
[13:25:12.970]                           computeRestarts <- base::computeRestarts
[13:25:12.970]                           grepl <- base::grepl
[13:25:12.970]                           restarts <- computeRestarts(cond)
[13:25:12.970]                           for (restart in restarts) {
[13:25:12.970]                             name <- restart$name
[13:25:12.970]                             if (is.null(name)) 
[13:25:12.970]                               next
[13:25:12.970]                             if (!grepl(pattern, name)) 
[13:25:12.970]                               next
[13:25:12.970]                             invokeRestart(restart)
[13:25:12.970]                             muffled <- TRUE
[13:25:12.970]                             break
[13:25:12.970]                           }
[13:25:12.970]                         }
[13:25:12.970]                       }
[13:25:12.970]                       invisible(muffled)
[13:25:12.970]                     }
[13:25:12.970]                     muffleCondition(cond, pattern = "^muffle")
[13:25:12.970]                   }
[13:25:12.970]                 }
[13:25:12.970]                 else {
[13:25:12.970]                   if (TRUE) {
[13:25:12.970]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:25:12.970]                     {
[13:25:12.970]                       inherits <- base::inherits
[13:25:12.970]                       invokeRestart <- base::invokeRestart
[13:25:12.970]                       is.null <- base::is.null
[13:25:12.970]                       muffled <- FALSE
[13:25:12.970]                       if (inherits(cond, "message")) {
[13:25:12.970]                         muffled <- grepl(pattern, "muffleMessage")
[13:25:12.970]                         if (muffled) 
[13:25:12.970]                           invokeRestart("muffleMessage")
[13:25:12.970]                       }
[13:25:12.970]                       else if (inherits(cond, "warning")) {
[13:25:12.970]                         muffled <- grepl(pattern, "muffleWarning")
[13:25:12.970]                         if (muffled) 
[13:25:12.970]                           invokeRestart("muffleWarning")
[13:25:12.970]                       }
[13:25:12.970]                       else if (inherits(cond, "condition")) {
[13:25:12.970]                         if (!is.null(pattern)) {
[13:25:12.970]                           computeRestarts <- base::computeRestarts
[13:25:12.970]                           grepl <- base::grepl
[13:25:12.970]                           restarts <- computeRestarts(cond)
[13:25:12.970]                           for (restart in restarts) {
[13:25:12.970]                             name <- restart$name
[13:25:12.970]                             if (is.null(name)) 
[13:25:12.970]                               next
[13:25:12.970]                             if (!grepl(pattern, name)) 
[13:25:12.970]                               next
[13:25:12.970]                             invokeRestart(restart)
[13:25:12.970]                             muffled <- TRUE
[13:25:12.970]                             break
[13:25:12.970]                           }
[13:25:12.970]                         }
[13:25:12.970]                       }
[13:25:12.970]                       invisible(muffled)
[13:25:12.970]                     }
[13:25:12.970]                     muffleCondition(cond, pattern = "^muffle")
[13:25:12.970]                   }
[13:25:12.970]                 }
[13:25:12.970]             }
[13:25:12.970]         }))
[13:25:12.970]     }, error = function(ex) {
[13:25:12.970]         base::structure(base::list(value = NULL, visible = NULL, 
[13:25:12.970]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:25:12.970]                 ...future.rng), started = ...future.startTime, 
[13:25:12.970]             finished = Sys.time(), session_uuid = NA_character_, 
[13:25:12.970]             version = "1.8"), class = "FutureResult")
[13:25:12.970]     }, finally = {
[13:25:12.970]         if (!identical(...future.workdir, getwd())) 
[13:25:12.970]             setwd(...future.workdir)
[13:25:12.970]         {
[13:25:12.970]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:25:12.970]                 ...future.oldOptions$nwarnings <- NULL
[13:25:12.970]             }
[13:25:12.970]             base::options(...future.oldOptions)
[13:25:12.970]             if (.Platform$OS.type == "windows") {
[13:25:12.970]                 old_names <- names(...future.oldEnvVars)
[13:25:12.970]                 envs <- base::Sys.getenv()
[13:25:12.970]                 names <- names(envs)
[13:25:12.970]                 common <- intersect(names, old_names)
[13:25:12.970]                 added <- setdiff(names, old_names)
[13:25:12.970]                 removed <- setdiff(old_names, names)
[13:25:12.970]                 changed <- common[...future.oldEnvVars[common] != 
[13:25:12.970]                   envs[common]]
[13:25:12.970]                 NAMES <- toupper(changed)
[13:25:12.970]                 args <- list()
[13:25:12.970]                 for (kk in seq_along(NAMES)) {
[13:25:12.970]                   name <- changed[[kk]]
[13:25:12.970]                   NAME <- NAMES[[kk]]
[13:25:12.970]                   if (name != NAME && is.element(NAME, old_names)) 
[13:25:12.970]                     next
[13:25:12.970]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:25:12.970]                 }
[13:25:12.970]                 NAMES <- toupper(added)
[13:25:12.970]                 for (kk in seq_along(NAMES)) {
[13:25:12.970]                   name <- added[[kk]]
[13:25:12.970]                   NAME <- NAMES[[kk]]
[13:25:12.970]                   if (name != NAME && is.element(NAME, old_names)) 
[13:25:12.970]                     next
[13:25:12.970]                   args[[name]] <- ""
[13:25:12.970]                 }
[13:25:12.970]                 NAMES <- toupper(removed)
[13:25:12.970]                 for (kk in seq_along(NAMES)) {
[13:25:12.970]                   name <- removed[[kk]]
[13:25:12.970]                   NAME <- NAMES[[kk]]
[13:25:12.970]                   if (name != NAME && is.element(NAME, old_names)) 
[13:25:12.970]                     next
[13:25:12.970]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:25:12.970]                 }
[13:25:12.970]                 if (length(args) > 0) 
[13:25:12.970]                   base::do.call(base::Sys.setenv, args = args)
[13:25:12.970]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:25:12.970]             }
[13:25:12.970]             else {
[13:25:12.970]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:25:12.970]             }
[13:25:12.970]             {
[13:25:12.970]                 if (base::length(...future.futureOptionsAdded) > 
[13:25:12.970]                   0L) {
[13:25:12.970]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:25:12.970]                   base::names(opts) <- ...future.futureOptionsAdded
[13:25:12.970]                   base::options(opts)
[13:25:12.970]                 }
[13:25:12.970]                 {
[13:25:12.970]                   {
[13:25:12.970]                     base::options(mc.cores = ...future.mc.cores.old)
[13:25:12.970]                     NULL
[13:25:12.970]                   }
[13:25:12.970]                   options(future.plan = NULL)
[13:25:12.970]                   if (is.na(NA_character_)) 
[13:25:12.970]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:25:12.970]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:25:12.970]                   future::plan(list(function (..., workers = availableCores(), 
[13:25:12.970]                     lazy = FALSE, rscript_libs = .libPaths(), 
[13:25:12.970]                     envir = parent.frame()) 
[13:25:12.970]                   {
[13:25:12.970]                     if (is.function(workers)) 
[13:25:12.970]                       workers <- workers()
[13:25:12.970]                     workers <- structure(as.integer(workers), 
[13:25:12.970]                       class = class(workers))
[13:25:12.970]                     stop_if_not(length(workers) == 1, is.finite(workers), 
[13:25:12.970]                       workers >= 1)
[13:25:12.970]                     if (workers == 1L && !inherits(workers, "AsIs")) {
[13:25:12.970]                       return(sequential(..., lazy = TRUE, envir = envir))
[13:25:12.970]                     }
[13:25:12.970]                     future <- MultisessionFuture(..., workers = workers, 
[13:25:12.970]                       lazy = lazy, rscript_libs = rscript_libs, 
[13:25:12.970]                       envir = envir)
[13:25:12.970]                     if (!future$lazy) 
[13:25:12.970]                       future <- run(future)
[13:25:12.970]                     invisible(future)
[13:25:12.970]                   }), .cleanup = FALSE, .init = FALSE)
[13:25:12.970]                 }
[13:25:12.970]             }
[13:25:12.970]         }
[13:25:12.970]     })
[13:25:12.970]     if (FALSE) {
[13:25:12.970]         base::sink(type = "output", split = FALSE)
[13:25:12.970]         if (NA) {
[13:25:12.970]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:25:12.970]         }
[13:25:12.970]         else {
[13:25:12.970]             ...future.result["stdout"] <- base::list(NULL)
[13:25:12.970]         }
[13:25:12.970]         base::close(...future.stdout)
[13:25:12.970]         ...future.stdout <- NULL
[13:25:12.970]     }
[13:25:12.970]     ...future.result$conditions <- ...future.conditions
[13:25:12.970]     ...future.result$finished <- base::Sys.time()
[13:25:12.970]     ...future.result
[13:25:12.970] }
[13:25:12.973] MultisessionFuture started
[13:25:12.973] - Launch lazy future ... done
[13:25:12.973] run() for ‘MultisessionFuture’ ... done
[13:25:12.973] result() for ClusterFuture ...
[13:25:12.974] receiveMessageFromWorker() for ClusterFuture ...
[13:25:12.974] - Validating connection of MultisessionFuture
[13:25:13.022] - received message: FutureResult
[13:25:13.022] - Received FutureResult
[13:25:13.023] - Erased future from FutureRegistry
[13:25:13.023] result() for ClusterFuture ...
[13:25:13.023] - result already collected: FutureResult
[13:25:13.023] result() for ClusterFuture ... done
[13:25:13.023] receiveMessageFromWorker() for ClusterFuture ... done
[13:25:13.023] result() for ClusterFuture ... done
List of 11
 $ value       : int 42
 $ visible     : logi TRUE
 $ stdout      : NULL
 $ conditions  : list()
 $ rng         : logi FALSE
 $ globalenv   : NULL
 $ started     : POSIXct[1:1], format: "2025-01-07 13:25:13"
 $ finished    : POSIXct[1:1], format: "2025-01-07 13:25:13"
 $ session_uuid: chr "c8f3ba03-05d2-c7fc-368c-7fdfc4734650"
  ..- attr(*, "source")=List of 5
  .. ..$ host  : Named chr "47b98e4ec3a9"
  .. .. ..- attr(*, "names")= chr "HOSTNAME"
  .. ..$ info  : Named chr [1:8] "Linux" "6.5.0-1025-azure" "#26~22.04.1-Ubuntu SMP Thu Jul 11 22:33:04 UTC 2024" "47b98e4ec3a9" ...
  .. .. ..- attr(*, "names")= chr [1:8] "sysname" "release" "version" "nodename" ...
  .. ..$ pid   : int 93595
  .. ..$ time  : POSIXct[1:1], format: "2025-01-07 13:25:12"
  .. ..$ random: int 2147483647
 $ r_info      :List of 4
  ..$ version      :Classes 'R_system_version', 'package_version', 'numeric_version'  hidden list of 1
  .. ..$ : int [1:3] 4 3 2
  ..$ os           : chr "unix"
  ..$ os_name      : chr "Linux"
  ..$ captures_utf8: logi TRUE
 $ version     : chr "1.8"
 - attr(*, "class")= chr "FutureResult"
[13:25:13.031] result() for ClusterFuture ...
[13:25:13.031] - result already collected: FutureResult
[13:25:13.031] result() for ClusterFuture ... done
[13:25:13.031] result() for ClusterFuture ...
[13:25:13.031] - result already collected: FutureResult
[13:25:13.031] result() for ClusterFuture ... done
[13:25:13.031] getGlobalsAndPackages() ...
[13:25:13.032] Searching for globals...
[13:25:13.034] - globals found: [9] ‘{’, ‘print’, ‘:’, ‘str’, ‘cat’, ‘letters’, ‘write.table’, ‘[’, ‘::’
[13:25:13.034] Searching for globals ... DONE
[13:25:13.035] Resolving globals: FALSE
[13:25:13.035] 
[13:25:13.035] - packages: [1] ‘utils’
[13:25:13.035] getGlobalsAndPackages() ... DONE
[13:25:13.036] run() for ‘Future’ ...
[13:25:13.036] - state: ‘created’
[13:25:13.036] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[13:25:13.050] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:25:13.050] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[13:25:13.050]   - Field: ‘node’
[13:25:13.050]   - Field: ‘label’
[13:25:13.050]   - Field: ‘local’
[13:25:13.050]   - Field: ‘owner’
[13:25:13.050]   - Field: ‘envir’
[13:25:13.050]   - Field: ‘workers’
[13:25:13.050]   - Field: ‘packages’
[13:25:13.050]   - Field: ‘gc’
[13:25:13.051]   - Field: ‘conditions’
[13:25:13.051]   - Field: ‘persistent’
[13:25:13.051]   - Field: ‘expr’
[13:25:13.051]   - Field: ‘uuid’
[13:25:13.051]   - Field: ‘seed’
[13:25:13.051]   - Field: ‘version’
[13:25:13.051]   - Field: ‘result’
[13:25:13.051]   - Field: ‘asynchronous’
[13:25:13.051]   - Field: ‘calls’
[13:25:13.051]   - Field: ‘globals’
[13:25:13.051]   - Field: ‘stdout’
[13:25:13.052]   - Field: ‘earlySignal’
[13:25:13.052]   - Field: ‘lazy’
[13:25:13.052]   - Field: ‘state’
[13:25:13.052] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[13:25:13.052] - Launch lazy future ...
[13:25:13.052] Packages needed by the future expression (n = 1): ‘utils’
[13:25:13.052] Packages needed by future strategies (n = 0): <none>
[13:25:13.053] {
[13:25:13.053]     {
[13:25:13.053]         {
[13:25:13.053]             ...future.startTime <- base::Sys.time()
[13:25:13.053]             {
[13:25:13.053]                 {
[13:25:13.053]                   {
[13:25:13.053]                     {
[13:25:13.053]                       {
[13:25:13.053]                         base::local({
[13:25:13.053]                           has_future <- base::requireNamespace("future", 
[13:25:13.053]                             quietly = TRUE)
[13:25:13.053]                           if (has_future) {
[13:25:13.053]                             ns <- base::getNamespace("future")
[13:25:13.053]                             version <- ns[[".package"]][["version"]]
[13:25:13.053]                             if (is.null(version)) 
[13:25:13.053]                               version <- utils::packageVersion("future")
[13:25:13.053]                           }
[13:25:13.053]                           else {
[13:25:13.053]                             version <- NULL
[13:25:13.053]                           }
[13:25:13.053]                           if (!has_future || version < "1.8.0") {
[13:25:13.053]                             info <- base::c(r_version = base::gsub("R version ", 
[13:25:13.053]                               "", base::R.version$version.string), 
[13:25:13.053]                               platform = base::sprintf("%s (%s-bit)", 
[13:25:13.053]                                 base::R.version$platform, 8 * 
[13:25:13.053]                                   base::.Machine$sizeof.pointer), 
[13:25:13.053]                               os = base::paste(base::Sys.info()[base::c("sysname", 
[13:25:13.053]                                 "release", "version")], collapse = " "), 
[13:25:13.053]                               hostname = base::Sys.info()[["nodename"]])
[13:25:13.053]                             info <- base::sprintf("%s: %s", base::names(info), 
[13:25:13.053]                               info)
[13:25:13.053]                             info <- base::paste(info, collapse = "; ")
[13:25:13.053]                             if (!has_future) {
[13:25:13.053]                               msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:25:13.053]                                 info)
[13:25:13.053]                             }
[13:25:13.053]                             else {
[13:25:13.053]                               msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:25:13.053]                                 info, version)
[13:25:13.053]                             }
[13:25:13.053]                             base::stop(msg)
[13:25:13.053]                           }
[13:25:13.053]                         })
[13:25:13.053]                       }
[13:25:13.053]                       ...future.mc.cores.old <- base::getOption("mc.cores")
[13:25:13.053]                       base::options(mc.cores = 1L)
[13:25:13.053]                     }
[13:25:13.053]                     base::local({
[13:25:13.053]                       for (pkg in "utils") {
[13:25:13.053]                         base::loadNamespace(pkg)
[13:25:13.053]                         base::library(pkg, character.only = TRUE)
[13:25:13.053]                       }
[13:25:13.053]                     })
[13:25:13.053]                   }
[13:25:13.053]                   options(future.plan = NULL)
[13:25:13.053]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:25:13.053]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:25:13.053]                 }
[13:25:13.053]                 ...future.workdir <- getwd()
[13:25:13.053]             }
[13:25:13.053]             ...future.oldOptions <- base::as.list(base::.Options)
[13:25:13.053]             ...future.oldEnvVars <- base::Sys.getenv()
[13:25:13.053]         }
[13:25:13.053]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:25:13.053]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:25:13.053]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:25:13.053]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:25:13.053]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:25:13.053]             future.stdout.windows.reencode = NULL, width = 80L)
[13:25:13.053]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:25:13.053]             base::names(...future.oldOptions))
[13:25:13.053]     }
[13:25:13.053]     if (TRUE) {
[13:25:13.053]     }
[13:25:13.053]     else {
[13:25:13.053]         if (NA) {
[13:25:13.053]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:25:13.053]                 open = "w")
[13:25:13.053]         }
[13:25:13.053]         else {
[13:25:13.053]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:25:13.053]                 windows = "NUL", "/dev/null"), open = "w")
[13:25:13.053]         }
[13:25:13.053]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:25:13.053]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:25:13.053]             base::sink(type = "output", split = FALSE)
[13:25:13.053]             base::close(...future.stdout)
[13:25:13.053]         }, add = TRUE)
[13:25:13.053]     }
[13:25:13.053]     ...future.frame <- base::sys.nframe()
[13:25:13.053]     ...future.conditions <- base::list()
[13:25:13.053]     ...future.rng <- base::globalenv()$.Random.seed
[13:25:13.053]     if (FALSE) {
[13:25:13.053]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:25:13.053]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:25:13.053]     }
[13:25:13.053]     ...future.result <- base::tryCatch({
[13:25:13.053]         base::withCallingHandlers({
[13:25:13.053]             ...future.value <- base::withVisible(base::local({
[13:25:13.053]                 ...future.makeSendCondition <- base::local({
[13:25:13.053]                   sendCondition <- NULL
[13:25:13.053]                   function(frame = 1L) {
[13:25:13.053]                     if (is.function(sendCondition)) 
[13:25:13.053]                       return(sendCondition)
[13:25:13.053]                     ns <- getNamespace("parallel")
[13:25:13.053]                     if (exists("sendData", mode = "function", 
[13:25:13.053]                       envir = ns)) {
[13:25:13.053]                       parallel_sendData <- get("sendData", mode = "function", 
[13:25:13.053]                         envir = ns)
[13:25:13.053]                       envir <- sys.frame(frame)
[13:25:13.053]                       master <- NULL
[13:25:13.053]                       while (!identical(envir, .GlobalEnv) && 
[13:25:13.053]                         !identical(envir, emptyenv())) {
[13:25:13.053]                         if (exists("master", mode = "list", envir = envir, 
[13:25:13.053]                           inherits = FALSE)) {
[13:25:13.053]                           master <- get("master", mode = "list", 
[13:25:13.053]                             envir = envir, inherits = FALSE)
[13:25:13.053]                           if (inherits(master, c("SOCKnode", 
[13:25:13.053]                             "SOCK0node"))) {
[13:25:13.053]                             sendCondition <<- function(cond) {
[13:25:13.053]                               data <- list(type = "VALUE", value = cond, 
[13:25:13.053]                                 success = TRUE)
[13:25:13.053]                               parallel_sendData(master, data)
[13:25:13.053]                             }
[13:25:13.053]                             return(sendCondition)
[13:25:13.053]                           }
[13:25:13.053]                         }
[13:25:13.053]                         frame <- frame + 1L
[13:25:13.053]                         envir <- sys.frame(frame)
[13:25:13.053]                       }
[13:25:13.053]                     }
[13:25:13.053]                     sendCondition <<- function(cond) NULL
[13:25:13.053]                   }
[13:25:13.053]                 })
[13:25:13.053]                 withCallingHandlers({
[13:25:13.053]                   {
[13:25:13.053]                     print(1:50)
[13:25:13.053]                     str(1:50)
[13:25:13.053]                     cat(letters, sep = "-")
[13:25:13.053]                     cat(1:6, collapse = "\n")
[13:25:13.053]                     write.table(datasets::iris[1:10, ], sep = "\t")
[13:25:13.053]                     42L
[13:25:13.053]                   }
[13:25:13.053]                 }, immediateCondition = function(cond) {
[13:25:13.053]                   sendCondition <- ...future.makeSendCondition()
[13:25:13.053]                   sendCondition(cond)
[13:25:13.053]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:25:13.053]                   {
[13:25:13.053]                     inherits <- base::inherits
[13:25:13.053]                     invokeRestart <- base::invokeRestart
[13:25:13.053]                     is.null <- base::is.null
[13:25:13.053]                     muffled <- FALSE
[13:25:13.053]                     if (inherits(cond, "message")) {
[13:25:13.053]                       muffled <- grepl(pattern, "muffleMessage")
[13:25:13.053]                       if (muffled) 
[13:25:13.053]                         invokeRestart("muffleMessage")
[13:25:13.053]                     }
[13:25:13.053]                     else if (inherits(cond, "warning")) {
[13:25:13.053]                       muffled <- grepl(pattern, "muffleWarning")
[13:25:13.053]                       if (muffled) 
[13:25:13.053]                         invokeRestart("muffleWarning")
[13:25:13.053]                     }
[13:25:13.053]                     else if (inherits(cond, "condition")) {
[13:25:13.053]                       if (!is.null(pattern)) {
[13:25:13.053]                         computeRestarts <- base::computeRestarts
[13:25:13.053]                         grepl <- base::grepl
[13:25:13.053]                         restarts <- computeRestarts(cond)
[13:25:13.053]                         for (restart in restarts) {
[13:25:13.053]                           name <- restart$name
[13:25:13.053]                           if (is.null(name)) 
[13:25:13.053]                             next
[13:25:13.053]                           if (!grepl(pattern, name)) 
[13:25:13.053]                             next
[13:25:13.053]                           invokeRestart(restart)
[13:25:13.053]                           muffled <- TRUE
[13:25:13.053]                           break
[13:25:13.053]                         }
[13:25:13.053]                       }
[13:25:13.053]                     }
[13:25:13.053]                     invisible(muffled)
[13:25:13.053]                   }
[13:25:13.053]                   muffleCondition(cond)
[13:25:13.053]                 })
[13:25:13.053]             }))
[13:25:13.053]             future::FutureResult(value = ...future.value$value, 
[13:25:13.053]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:25:13.053]                   ...future.rng), globalenv = if (FALSE) 
[13:25:13.053]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:25:13.053]                     ...future.globalenv.names))
[13:25:13.053]                 else NULL, started = ...future.startTime, version = "1.8")
[13:25:13.053]         }, condition = base::local({
[13:25:13.053]             c <- base::c
[13:25:13.053]             inherits <- base::inherits
[13:25:13.053]             invokeRestart <- base::invokeRestart
[13:25:13.053]             length <- base::length
[13:25:13.053]             list <- base::list
[13:25:13.053]             seq.int <- base::seq.int
[13:25:13.053]             signalCondition <- base::signalCondition
[13:25:13.053]             sys.calls <- base::sys.calls
[13:25:13.053]             `[[` <- base::`[[`
[13:25:13.053]             `+` <- base::`+`
[13:25:13.053]             `<<-` <- base::`<<-`
[13:25:13.053]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:25:13.053]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:25:13.053]                   3L)]
[13:25:13.053]             }
[13:25:13.053]             function(cond) {
[13:25:13.053]                 is_error <- inherits(cond, "error")
[13:25:13.053]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:25:13.053]                   NULL)
[13:25:13.053]                 if (is_error) {
[13:25:13.053]                   sessionInformation <- function() {
[13:25:13.053]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:25:13.053]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:25:13.053]                       search = base::search(), system = base::Sys.info())
[13:25:13.053]                   }
[13:25:13.053]                   ...future.conditions[[length(...future.conditions) + 
[13:25:13.053]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:25:13.053]                     cond$call), session = sessionInformation(), 
[13:25:13.053]                     timestamp = base::Sys.time(), signaled = 0L)
[13:25:13.053]                   signalCondition(cond)
[13:25:13.053]                 }
[13:25:13.053]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:25:13.053]                 "immediateCondition"))) {
[13:25:13.053]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:25:13.053]                   ...future.conditions[[length(...future.conditions) + 
[13:25:13.053]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:25:13.053]                   if (TRUE && !signal) {
[13:25:13.053]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:25:13.053]                     {
[13:25:13.053]                       inherits <- base::inherits
[13:25:13.053]                       invokeRestart <- base::invokeRestart
[13:25:13.053]                       is.null <- base::is.null
[13:25:13.053]                       muffled <- FALSE
[13:25:13.053]                       if (inherits(cond, "message")) {
[13:25:13.053]                         muffled <- grepl(pattern, "muffleMessage")
[13:25:13.053]                         if (muffled) 
[13:25:13.053]                           invokeRestart("muffleMessage")
[13:25:13.053]                       }
[13:25:13.053]                       else if (inherits(cond, "warning")) {
[13:25:13.053]                         muffled <- grepl(pattern, "muffleWarning")
[13:25:13.053]                         if (muffled) 
[13:25:13.053]                           invokeRestart("muffleWarning")
[13:25:13.053]                       }
[13:25:13.053]                       else if (inherits(cond, "condition")) {
[13:25:13.053]                         if (!is.null(pattern)) {
[13:25:13.053]                           computeRestarts <- base::computeRestarts
[13:25:13.053]                           grepl <- base::grepl
[13:25:13.053]                           restarts <- computeRestarts(cond)
[13:25:13.053]                           for (restart in restarts) {
[13:25:13.053]                             name <- restart$name
[13:25:13.053]                             if (is.null(name)) 
[13:25:13.053]                               next
[13:25:13.053]                             if (!grepl(pattern, name)) 
[13:25:13.053]                               next
[13:25:13.053]                             invokeRestart(restart)
[13:25:13.053]                             muffled <- TRUE
[13:25:13.053]                             break
[13:25:13.053]                           }
[13:25:13.053]                         }
[13:25:13.053]                       }
[13:25:13.053]                       invisible(muffled)
[13:25:13.053]                     }
[13:25:13.053]                     muffleCondition(cond, pattern = "^muffle")
[13:25:13.053]                   }
[13:25:13.053]                 }
[13:25:13.053]                 else {
[13:25:13.053]                   if (TRUE) {
[13:25:13.053]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:25:13.053]                     {
[13:25:13.053]                       inherits <- base::inherits
[13:25:13.053]                       invokeRestart <- base::invokeRestart
[13:25:13.053]                       is.null <- base::is.null
[13:25:13.053]                       muffled <- FALSE
[13:25:13.053]                       if (inherits(cond, "message")) {
[13:25:13.053]                         muffled <- grepl(pattern, "muffleMessage")
[13:25:13.053]                         if (muffled) 
[13:25:13.053]                           invokeRestart("muffleMessage")
[13:25:13.053]                       }
[13:25:13.053]                       else if (inherits(cond, "warning")) {
[13:25:13.053]                         muffled <- grepl(pattern, "muffleWarning")
[13:25:13.053]                         if (muffled) 
[13:25:13.053]                           invokeRestart("muffleWarning")
[13:25:13.053]                       }
[13:25:13.053]                       else if (inherits(cond, "condition")) {
[13:25:13.053]                         if (!is.null(pattern)) {
[13:25:13.053]                           computeRestarts <- base::computeRestarts
[13:25:13.053]                           grepl <- base::grepl
[13:25:13.053]                           restarts <- computeRestarts(cond)
[13:25:13.053]                           for (restart in restarts) {
[13:25:13.053]                             name <- restart$name
[13:25:13.053]                             if (is.null(name)) 
[13:25:13.053]                               next
[13:25:13.053]                             if (!grepl(pattern, name)) 
[13:25:13.053]                               next
[13:25:13.053]                             invokeRestart(restart)
[13:25:13.053]                             muffled <- TRUE
[13:25:13.053]                             break
[13:25:13.053]                           }
[13:25:13.053]                         }
[13:25:13.053]                       }
[13:25:13.053]                       invisible(muffled)
[13:25:13.053]                     }
[13:25:13.053]                     muffleCondition(cond, pattern = "^muffle")
[13:25:13.053]                   }
[13:25:13.053]                 }
[13:25:13.053]             }
[13:25:13.053]         }))
[13:25:13.053]     }, error = function(ex) {
[13:25:13.053]         base::structure(base::list(value = NULL, visible = NULL, 
[13:25:13.053]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:25:13.053]                 ...future.rng), started = ...future.startTime, 
[13:25:13.053]             finished = Sys.time(), session_uuid = NA_character_, 
[13:25:13.053]             version = "1.8"), class = "FutureResult")
[13:25:13.053]     }, finally = {
[13:25:13.053]         if (!identical(...future.workdir, getwd())) 
[13:25:13.053]             setwd(...future.workdir)
[13:25:13.053]         {
[13:25:13.053]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:25:13.053]                 ...future.oldOptions$nwarnings <- NULL
[13:25:13.053]             }
[13:25:13.053]             base::options(...future.oldOptions)
[13:25:13.053]             if (.Platform$OS.type == "windows") {
[13:25:13.053]                 old_names <- names(...future.oldEnvVars)
[13:25:13.053]                 envs <- base::Sys.getenv()
[13:25:13.053]                 names <- names(envs)
[13:25:13.053]                 common <- intersect(names, old_names)
[13:25:13.053]                 added <- setdiff(names, old_names)
[13:25:13.053]                 removed <- setdiff(old_names, names)
[13:25:13.053]                 changed <- common[...future.oldEnvVars[common] != 
[13:25:13.053]                   envs[common]]
[13:25:13.053]                 NAMES <- toupper(changed)
[13:25:13.053]                 args <- list()
[13:25:13.053]                 for (kk in seq_along(NAMES)) {
[13:25:13.053]                   name <- changed[[kk]]
[13:25:13.053]                   NAME <- NAMES[[kk]]
[13:25:13.053]                   if (name != NAME && is.element(NAME, old_names)) 
[13:25:13.053]                     next
[13:25:13.053]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:25:13.053]                 }
[13:25:13.053]                 NAMES <- toupper(added)
[13:25:13.053]                 for (kk in seq_along(NAMES)) {
[13:25:13.053]                   name <- added[[kk]]
[13:25:13.053]                   NAME <- NAMES[[kk]]
[13:25:13.053]                   if (name != NAME && is.element(NAME, old_names)) 
[13:25:13.053]                     next
[13:25:13.053]                   args[[name]] <- ""
[13:25:13.053]                 }
[13:25:13.053]                 NAMES <- toupper(removed)
[13:25:13.053]                 for (kk in seq_along(NAMES)) {
[13:25:13.053]                   name <- removed[[kk]]
[13:25:13.053]                   NAME <- NAMES[[kk]]
[13:25:13.053]                   if (name != NAME && is.element(NAME, old_names)) 
[13:25:13.053]                     next
[13:25:13.053]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:25:13.053]                 }
[13:25:13.053]                 if (length(args) > 0) 
[13:25:13.053]                   base::do.call(base::Sys.setenv, args = args)
[13:25:13.053]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:25:13.053]             }
[13:25:13.053]             else {
[13:25:13.053]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:25:13.053]             }
[13:25:13.053]             {
[13:25:13.053]                 if (base::length(...future.futureOptionsAdded) > 
[13:25:13.053]                   0L) {
[13:25:13.053]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:25:13.053]                   base::names(opts) <- ...future.futureOptionsAdded
[13:25:13.053]                   base::options(opts)
[13:25:13.053]                 }
[13:25:13.053]                 {
[13:25:13.053]                   {
[13:25:13.053]                     base::options(mc.cores = ...future.mc.cores.old)
[13:25:13.053]                     NULL
[13:25:13.053]                   }
[13:25:13.053]                   options(future.plan = NULL)
[13:25:13.053]                   if (is.na(NA_character_)) 
[13:25:13.053]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:25:13.053]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:25:13.053]                   future::plan(list(function (..., workers = availableCores(), 
[13:25:13.053]                     lazy = FALSE, rscript_libs = .libPaths(), 
[13:25:13.053]                     envir = parent.frame()) 
[13:25:13.053]                   {
[13:25:13.053]                     if (is.function(workers)) 
[13:25:13.053]                       workers <- workers()
[13:25:13.053]                     workers <- structure(as.integer(workers), 
[13:25:13.053]                       class = class(workers))
[13:25:13.053]                     stop_if_not(length(workers) == 1, is.finite(workers), 
[13:25:13.053]                       workers >= 1)
[13:25:13.053]                     if (workers == 1L && !inherits(workers, "AsIs")) {
[13:25:13.053]                       return(sequential(..., lazy = TRUE, envir = envir))
[13:25:13.053]                     }
[13:25:13.053]                     future <- MultisessionFuture(..., workers = workers, 
[13:25:13.053]                       lazy = lazy, rscript_libs = rscript_libs, 
[13:25:13.053]                       envir = envir)
[13:25:13.053]                     if (!future$lazy) 
[13:25:13.053]                       future <- run(future)
[13:25:13.053]                     invisible(future)
[13:25:13.053]                   }), .cleanup = FALSE, .init = FALSE)
[13:25:13.053]                 }
[13:25:13.053]             }
[13:25:13.053]         }
[13:25:13.053]     })
[13:25:13.053]     if (FALSE) {
[13:25:13.053]         base::sink(type = "output", split = FALSE)
[13:25:13.053]         if (NA) {
[13:25:13.053]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:25:13.053]         }
[13:25:13.053]         else {
[13:25:13.053]             ...future.result["stdout"] <- base::list(NULL)
[13:25:13.053]         }
[13:25:13.053]         base::close(...future.stdout)
[13:25:13.053]         ...future.stdout <- NULL
[13:25:13.053]     }
[13:25:13.053]     ...future.result$conditions <- ...future.conditions
[13:25:13.053]     ...future.result$finished <- base::Sys.time()
[13:25:13.053]     ...future.result
[13:25:13.053] }
[13:25:13.056] MultisessionFuture started
[13:25:13.056] - Launch lazy future ... done
[13:25:13.057] run() for ‘MultisessionFuture’ ... done
[13:25:13.057] result() for ClusterFuture ...
[13:25:13.057] receiveMessageFromWorker() for ClusterFuture ...
[13:25:13.057] - Validating connection of MultisessionFuture
[13:25:13.106] - received message: FutureResult
[13:25:13.107] - Received FutureResult
[13:25:13.107] - Erased future from FutureRegistry
[13:25:13.107] result() for ClusterFuture ...
[13:25:13.107] - result already collected: FutureResult
[13:25:13.107] result() for ClusterFuture ... done
[13:25:13.107] receiveMessageFromWorker() for ClusterFuture ... done
[13:25:13.107] result() for ClusterFuture ... done
[13:25:13.108] result() for ClusterFuture ...
[13:25:13.108] - result already collected: FutureResult
[13:25:13.108] result() for ClusterFuture ... done
- stdout = structure(TRUE, drop = TRUE)
[13:25:13.108] getGlobalsAndPackages() ...
[13:25:13.108] Searching for globals...
[13:25:13.109] - globals found: [1] ‘print’
[13:25:13.109] Searching for globals ... DONE
[13:25:13.109] Resolving globals: FALSE
[13:25:13.109] 
[13:25:13.109] 
[13:25:13.109] getGlobalsAndPackages() ... DONE
[13:25:13.110] run() for ‘Future’ ...
[13:25:13.110] - state: ‘created’
[13:25:13.110] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[13:25:13.124] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:25:13.124] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[13:25:13.124]   - Field: ‘node’
[13:25:13.124]   - Field: ‘label’
[13:25:13.124]   - Field: ‘local’
[13:25:13.124]   - Field: ‘owner’
[13:25:13.125]   - Field: ‘envir’
[13:25:13.125]   - Field: ‘workers’
[13:25:13.125]   - Field: ‘packages’
[13:25:13.125]   - Field: ‘gc’
[13:25:13.125]   - Field: ‘conditions’
[13:25:13.125]   - Field: ‘persistent’
[13:25:13.125]   - Field: ‘expr’
[13:25:13.125]   - Field: ‘uuid’
[13:25:13.125]   - Field: ‘seed’
[13:25:13.125]   - Field: ‘version’
[13:25:13.125]   - Field: ‘result’
[13:25:13.126]   - Field: ‘asynchronous’
[13:25:13.126]   - Field: ‘calls’
[13:25:13.126]   - Field: ‘globals’
[13:25:13.126]   - Field: ‘stdout’
[13:25:13.126]   - Field: ‘earlySignal’
[13:25:13.126]   - Field: ‘lazy’
[13:25:13.126]   - Field: ‘state’
[13:25:13.126] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[13:25:13.126] - Launch lazy future ...
[13:25:13.126] Packages needed by the future expression (n = 0): <none>
[13:25:13.127] Packages needed by future strategies (n = 0): <none>
[13:25:13.127] {
[13:25:13.127]     {
[13:25:13.127]         {
[13:25:13.127]             ...future.startTime <- base::Sys.time()
[13:25:13.127]             {
[13:25:13.127]                 {
[13:25:13.127]                   {
[13:25:13.127]                     {
[13:25:13.127]                       base::local({
[13:25:13.127]                         has_future <- base::requireNamespace("future", 
[13:25:13.127]                           quietly = TRUE)
[13:25:13.127]                         if (has_future) {
[13:25:13.127]                           ns <- base::getNamespace("future")
[13:25:13.127]                           version <- ns[[".package"]][["version"]]
[13:25:13.127]                           if (is.null(version)) 
[13:25:13.127]                             version <- utils::packageVersion("future")
[13:25:13.127]                         }
[13:25:13.127]                         else {
[13:25:13.127]                           version <- NULL
[13:25:13.127]                         }
[13:25:13.127]                         if (!has_future || version < "1.8.0") {
[13:25:13.127]                           info <- base::c(r_version = base::gsub("R version ", 
[13:25:13.127]                             "", base::R.version$version.string), 
[13:25:13.127]                             platform = base::sprintf("%s (%s-bit)", 
[13:25:13.127]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:25:13.127]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:25:13.127]                               "release", "version")], collapse = " "), 
[13:25:13.127]                             hostname = base::Sys.info()[["nodename"]])
[13:25:13.127]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:25:13.127]                             info)
[13:25:13.127]                           info <- base::paste(info, collapse = "; ")
[13:25:13.127]                           if (!has_future) {
[13:25:13.127]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:25:13.127]                               info)
[13:25:13.127]                           }
[13:25:13.127]                           else {
[13:25:13.127]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:25:13.127]                               info, version)
[13:25:13.127]                           }
[13:25:13.127]                           base::stop(msg)
[13:25:13.127]                         }
[13:25:13.127]                       })
[13:25:13.127]                     }
[13:25:13.127]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[13:25:13.127]                     base::options(mc.cores = 1L)
[13:25:13.127]                   }
[13:25:13.127]                   options(future.plan = NULL)
[13:25:13.127]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:25:13.127]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:25:13.127]                 }
[13:25:13.127]                 ...future.workdir <- getwd()
[13:25:13.127]             }
[13:25:13.127]             ...future.oldOptions <- base::as.list(base::.Options)
[13:25:13.127]             ...future.oldEnvVars <- base::Sys.getenv()
[13:25:13.127]         }
[13:25:13.127]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:25:13.127]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:25:13.127]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:25:13.127]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:25:13.127]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:25:13.127]             future.stdout.windows.reencode = NULL, width = 80L)
[13:25:13.127]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:25:13.127]             base::names(...future.oldOptions))
[13:25:13.127]     }
[13:25:13.127]     if (FALSE) {
[13:25:13.127]     }
[13:25:13.127]     else {
[13:25:13.127]         if (TRUE) {
[13:25:13.127]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:25:13.127]                 open = "w")
[13:25:13.127]         }
[13:25:13.127]         else {
[13:25:13.127]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:25:13.127]                 windows = "NUL", "/dev/null"), open = "w")
[13:25:13.127]         }
[13:25:13.127]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:25:13.127]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:25:13.127]             base::sink(type = "output", split = FALSE)
[13:25:13.127]             base::close(...future.stdout)
[13:25:13.127]         }, add = TRUE)
[13:25:13.127]     }
[13:25:13.127]     ...future.frame <- base::sys.nframe()
[13:25:13.127]     ...future.conditions <- base::list()
[13:25:13.127]     ...future.rng <- base::globalenv()$.Random.seed
[13:25:13.127]     if (FALSE) {
[13:25:13.127]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:25:13.127]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:25:13.127]     }
[13:25:13.127]     ...future.result <- base::tryCatch({
[13:25:13.127]         base::withCallingHandlers({
[13:25:13.127]             ...future.value <- base::withVisible(base::local({
[13:25:13.127]                 ...future.makeSendCondition <- base::local({
[13:25:13.127]                   sendCondition <- NULL
[13:25:13.127]                   function(frame = 1L) {
[13:25:13.127]                     if (is.function(sendCondition)) 
[13:25:13.127]                       return(sendCondition)
[13:25:13.127]                     ns <- getNamespace("parallel")
[13:25:13.127]                     if (exists("sendData", mode = "function", 
[13:25:13.127]                       envir = ns)) {
[13:25:13.127]                       parallel_sendData <- get("sendData", mode = "function", 
[13:25:13.127]                         envir = ns)
[13:25:13.127]                       envir <- sys.frame(frame)
[13:25:13.127]                       master <- NULL
[13:25:13.127]                       while (!identical(envir, .GlobalEnv) && 
[13:25:13.127]                         !identical(envir, emptyenv())) {
[13:25:13.127]                         if (exists("master", mode = "list", envir = envir, 
[13:25:13.127]                           inherits = FALSE)) {
[13:25:13.127]                           master <- get("master", mode = "list", 
[13:25:13.127]                             envir = envir, inherits = FALSE)
[13:25:13.127]                           if (inherits(master, c("SOCKnode", 
[13:25:13.127]                             "SOCK0node"))) {
[13:25:13.127]                             sendCondition <<- function(cond) {
[13:25:13.127]                               data <- list(type = "VALUE", value = cond, 
[13:25:13.127]                                 success = TRUE)
[13:25:13.127]                               parallel_sendData(master, data)
[13:25:13.127]                             }
[13:25:13.127]                             return(sendCondition)
[13:25:13.127]                           }
[13:25:13.127]                         }
[13:25:13.127]                         frame <- frame + 1L
[13:25:13.127]                         envir <- sys.frame(frame)
[13:25:13.127]                       }
[13:25:13.127]                     }
[13:25:13.127]                     sendCondition <<- function(cond) NULL
[13:25:13.127]                   }
[13:25:13.127]                 })
[13:25:13.127]                 withCallingHandlers({
[13:25:13.127]                   print(42)
[13:25:13.127]                 }, immediateCondition = function(cond) {
[13:25:13.127]                   sendCondition <- ...future.makeSendCondition()
[13:25:13.127]                   sendCondition(cond)
[13:25:13.127]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:25:13.127]                   {
[13:25:13.127]                     inherits <- base::inherits
[13:25:13.127]                     invokeRestart <- base::invokeRestart
[13:25:13.127]                     is.null <- base::is.null
[13:25:13.127]                     muffled <- FALSE
[13:25:13.127]                     if (inherits(cond, "message")) {
[13:25:13.127]                       muffled <- grepl(pattern, "muffleMessage")
[13:25:13.127]                       if (muffled) 
[13:25:13.127]                         invokeRestart("muffleMessage")
[13:25:13.127]                     }
[13:25:13.127]                     else if (inherits(cond, "warning")) {
[13:25:13.127]                       muffled <- grepl(pattern, "muffleWarning")
[13:25:13.127]                       if (muffled) 
[13:25:13.127]                         invokeRestart("muffleWarning")
[13:25:13.127]                     }
[13:25:13.127]                     else if (inherits(cond, "condition")) {
[13:25:13.127]                       if (!is.null(pattern)) {
[13:25:13.127]                         computeRestarts <- base::computeRestarts
[13:25:13.127]                         grepl <- base::grepl
[13:25:13.127]                         restarts <- computeRestarts(cond)
[13:25:13.127]                         for (restart in restarts) {
[13:25:13.127]                           name <- restart$name
[13:25:13.127]                           if (is.null(name)) 
[13:25:13.127]                             next
[13:25:13.127]                           if (!grepl(pattern, name)) 
[13:25:13.127]                             next
[13:25:13.127]                           invokeRestart(restart)
[13:25:13.127]                           muffled <- TRUE
[13:25:13.127]                           break
[13:25:13.127]                         }
[13:25:13.127]                       }
[13:25:13.127]                     }
[13:25:13.127]                     invisible(muffled)
[13:25:13.127]                   }
[13:25:13.127]                   muffleCondition(cond)
[13:25:13.127]                 })
[13:25:13.127]             }))
[13:25:13.127]             future::FutureResult(value = ...future.value$value, 
[13:25:13.127]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:25:13.127]                   ...future.rng), globalenv = if (FALSE) 
[13:25:13.127]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:25:13.127]                     ...future.globalenv.names))
[13:25:13.127]                 else NULL, started = ...future.startTime, version = "1.8")
[13:25:13.127]         }, condition = base::local({
[13:25:13.127]             c <- base::c
[13:25:13.127]             inherits <- base::inherits
[13:25:13.127]             invokeRestart <- base::invokeRestart
[13:25:13.127]             length <- base::length
[13:25:13.127]             list <- base::list
[13:25:13.127]             seq.int <- base::seq.int
[13:25:13.127]             signalCondition <- base::signalCondition
[13:25:13.127]             sys.calls <- base::sys.calls
[13:25:13.127]             `[[` <- base::`[[`
[13:25:13.127]             `+` <- base::`+`
[13:25:13.127]             `<<-` <- base::`<<-`
[13:25:13.127]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:25:13.127]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:25:13.127]                   3L)]
[13:25:13.127]             }
[13:25:13.127]             function(cond) {
[13:25:13.127]                 is_error <- inherits(cond, "error")
[13:25:13.127]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:25:13.127]                   NULL)
[13:25:13.127]                 if (is_error) {
[13:25:13.127]                   sessionInformation <- function() {
[13:25:13.127]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:25:13.127]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:25:13.127]                       search = base::search(), system = base::Sys.info())
[13:25:13.127]                   }
[13:25:13.127]                   ...future.conditions[[length(...future.conditions) + 
[13:25:13.127]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:25:13.127]                     cond$call), session = sessionInformation(), 
[13:25:13.127]                     timestamp = base::Sys.time(), signaled = 0L)
[13:25:13.127]                   signalCondition(cond)
[13:25:13.127]                 }
[13:25:13.127]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:25:13.127]                 "immediateCondition"))) {
[13:25:13.127]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:25:13.127]                   ...future.conditions[[length(...future.conditions) + 
[13:25:13.127]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:25:13.127]                   if (TRUE && !signal) {
[13:25:13.127]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:25:13.127]                     {
[13:25:13.127]                       inherits <- base::inherits
[13:25:13.127]                       invokeRestart <- base::invokeRestart
[13:25:13.127]                       is.null <- base::is.null
[13:25:13.127]                       muffled <- FALSE
[13:25:13.127]                       if (inherits(cond, "message")) {
[13:25:13.127]                         muffled <- grepl(pattern, "muffleMessage")
[13:25:13.127]                         if (muffled) 
[13:25:13.127]                           invokeRestart("muffleMessage")
[13:25:13.127]                       }
[13:25:13.127]                       else if (inherits(cond, "warning")) {
[13:25:13.127]                         muffled <- grepl(pattern, "muffleWarning")
[13:25:13.127]                         if (muffled) 
[13:25:13.127]                           invokeRestart("muffleWarning")
[13:25:13.127]                       }
[13:25:13.127]                       else if (inherits(cond, "condition")) {
[13:25:13.127]                         if (!is.null(pattern)) {
[13:25:13.127]                           computeRestarts <- base::computeRestarts
[13:25:13.127]                           grepl <- base::grepl
[13:25:13.127]                           restarts <- computeRestarts(cond)
[13:25:13.127]                           for (restart in restarts) {
[13:25:13.127]                             name <- restart$name
[13:25:13.127]                             if (is.null(name)) 
[13:25:13.127]                               next
[13:25:13.127]                             if (!grepl(pattern, name)) 
[13:25:13.127]                               next
[13:25:13.127]                             invokeRestart(restart)
[13:25:13.127]                             muffled <- TRUE
[13:25:13.127]                             break
[13:25:13.127]                           }
[13:25:13.127]                         }
[13:25:13.127]                       }
[13:25:13.127]                       invisible(muffled)
[13:25:13.127]                     }
[13:25:13.127]                     muffleCondition(cond, pattern = "^muffle")
[13:25:13.127]                   }
[13:25:13.127]                 }
[13:25:13.127]                 else {
[13:25:13.127]                   if (TRUE) {
[13:25:13.127]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:25:13.127]                     {
[13:25:13.127]                       inherits <- base::inherits
[13:25:13.127]                       invokeRestart <- base::invokeRestart
[13:25:13.127]                       is.null <- base::is.null
[13:25:13.127]                       muffled <- FALSE
[13:25:13.127]                       if (inherits(cond, "message")) {
[13:25:13.127]                         muffled <- grepl(pattern, "muffleMessage")
[13:25:13.127]                         if (muffled) 
[13:25:13.127]                           invokeRestart("muffleMessage")
[13:25:13.127]                       }
[13:25:13.127]                       else if (inherits(cond, "warning")) {
[13:25:13.127]                         muffled <- grepl(pattern, "muffleWarning")
[13:25:13.127]                         if (muffled) 
[13:25:13.127]                           invokeRestart("muffleWarning")
[13:25:13.127]                       }
[13:25:13.127]                       else if (inherits(cond, "condition")) {
[13:25:13.127]                         if (!is.null(pattern)) {
[13:25:13.127]                           computeRestarts <- base::computeRestarts
[13:25:13.127]                           grepl <- base::grepl
[13:25:13.127]                           restarts <- computeRestarts(cond)
[13:25:13.127]                           for (restart in restarts) {
[13:25:13.127]                             name <- restart$name
[13:25:13.127]                             if (is.null(name)) 
[13:25:13.127]                               next
[13:25:13.127]                             if (!grepl(pattern, name)) 
[13:25:13.127]                               next
[13:25:13.127]                             invokeRestart(restart)
[13:25:13.127]                             muffled <- TRUE
[13:25:13.127]                             break
[13:25:13.127]                           }
[13:25:13.127]                         }
[13:25:13.127]                       }
[13:25:13.127]                       invisible(muffled)
[13:25:13.127]                     }
[13:25:13.127]                     muffleCondition(cond, pattern = "^muffle")
[13:25:13.127]                   }
[13:25:13.127]                 }
[13:25:13.127]             }
[13:25:13.127]         }))
[13:25:13.127]     }, error = function(ex) {
[13:25:13.127]         base::structure(base::list(value = NULL, visible = NULL, 
[13:25:13.127]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:25:13.127]                 ...future.rng), started = ...future.startTime, 
[13:25:13.127]             finished = Sys.time(), session_uuid = NA_character_, 
[13:25:13.127]             version = "1.8"), class = "FutureResult")
[13:25:13.127]     }, finally = {
[13:25:13.127]         if (!identical(...future.workdir, getwd())) 
[13:25:13.127]             setwd(...future.workdir)
[13:25:13.127]         {
[13:25:13.127]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:25:13.127]                 ...future.oldOptions$nwarnings <- NULL
[13:25:13.127]             }
[13:25:13.127]             base::options(...future.oldOptions)
[13:25:13.127]             if (.Platform$OS.type == "windows") {
[13:25:13.127]                 old_names <- names(...future.oldEnvVars)
[13:25:13.127]                 envs <- base::Sys.getenv()
[13:25:13.127]                 names <- names(envs)
[13:25:13.127]                 common <- intersect(names, old_names)
[13:25:13.127]                 added <- setdiff(names, old_names)
[13:25:13.127]                 removed <- setdiff(old_names, names)
[13:25:13.127]                 changed <- common[...future.oldEnvVars[common] != 
[13:25:13.127]                   envs[common]]
[13:25:13.127]                 NAMES <- toupper(changed)
[13:25:13.127]                 args <- list()
[13:25:13.127]                 for (kk in seq_along(NAMES)) {
[13:25:13.127]                   name <- changed[[kk]]
[13:25:13.127]                   NAME <- NAMES[[kk]]
[13:25:13.127]                   if (name != NAME && is.element(NAME, old_names)) 
[13:25:13.127]                     next
[13:25:13.127]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:25:13.127]                 }
[13:25:13.127]                 NAMES <- toupper(added)
[13:25:13.127]                 for (kk in seq_along(NAMES)) {
[13:25:13.127]                   name <- added[[kk]]
[13:25:13.127]                   NAME <- NAMES[[kk]]
[13:25:13.127]                   if (name != NAME && is.element(NAME, old_names)) 
[13:25:13.127]                     next
[13:25:13.127]                   args[[name]] <- ""
[13:25:13.127]                 }
[13:25:13.127]                 NAMES <- toupper(removed)
[13:25:13.127]                 for (kk in seq_along(NAMES)) {
[13:25:13.127]                   name <- removed[[kk]]
[13:25:13.127]                   NAME <- NAMES[[kk]]
[13:25:13.127]                   if (name != NAME && is.element(NAME, old_names)) 
[13:25:13.127]                     next
[13:25:13.127]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:25:13.127]                 }
[13:25:13.127]                 if (length(args) > 0) 
[13:25:13.127]                   base::do.call(base::Sys.setenv, args = args)
[13:25:13.127]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:25:13.127]             }
[13:25:13.127]             else {
[13:25:13.127]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:25:13.127]             }
[13:25:13.127]             {
[13:25:13.127]                 if (base::length(...future.futureOptionsAdded) > 
[13:25:13.127]                   0L) {
[13:25:13.127]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:25:13.127]                   base::names(opts) <- ...future.futureOptionsAdded
[13:25:13.127]                   base::options(opts)
[13:25:13.127]                 }
[13:25:13.127]                 {
[13:25:13.127]                   {
[13:25:13.127]                     base::options(mc.cores = ...future.mc.cores.old)
[13:25:13.127]                     NULL
[13:25:13.127]                   }
[13:25:13.127]                   options(future.plan = NULL)
[13:25:13.127]                   if (is.na(NA_character_)) 
[13:25:13.127]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:25:13.127]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:25:13.127]                   future::plan(list(function (..., workers = availableCores(), 
[13:25:13.127]                     lazy = FALSE, rscript_libs = .libPaths(), 
[13:25:13.127]                     envir = parent.frame()) 
[13:25:13.127]                   {
[13:25:13.127]                     if (is.function(workers)) 
[13:25:13.127]                       workers <- workers()
[13:25:13.127]                     workers <- structure(as.integer(workers), 
[13:25:13.127]                       class = class(workers))
[13:25:13.127]                     stop_if_not(length(workers) == 1, is.finite(workers), 
[13:25:13.127]                       workers >= 1)
[13:25:13.127]                     if (workers == 1L && !inherits(workers, "AsIs")) {
[13:25:13.127]                       return(sequential(..., lazy = TRUE, envir = envir))
[13:25:13.127]                     }
[13:25:13.127]                     future <- MultisessionFuture(..., workers = workers, 
[13:25:13.127]                       lazy = lazy, rscript_libs = rscript_libs, 
[13:25:13.127]                       envir = envir)
[13:25:13.127]                     if (!future$lazy) 
[13:25:13.127]                       future <- run(future)
[13:25:13.127]                     invisible(future)
[13:25:13.127]                   }), .cleanup = FALSE, .init = FALSE)
[13:25:13.127]                 }
[13:25:13.127]             }
[13:25:13.127]         }
[13:25:13.127]     })
[13:25:13.127]     if (TRUE) {
[13:25:13.127]         base::sink(type = "output", split = FALSE)
[13:25:13.127]         if (TRUE) {
[13:25:13.127]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:25:13.127]         }
[13:25:13.127]         else {
[13:25:13.127]             ...future.result["stdout"] <- base::list(NULL)
[13:25:13.127]         }
[13:25:13.127]         base::close(...future.stdout)
[13:25:13.127]         ...future.stdout <- NULL
[13:25:13.127]     }
[13:25:13.127]     ...future.result$conditions <- ...future.conditions
[13:25:13.127]     ...future.result$finished <- base::Sys.time()
[13:25:13.127]     ...future.result
[13:25:13.127] }
[13:25:13.130] MultisessionFuture started
[13:25:13.130] - Launch lazy future ... done
[13:25:13.130] run() for ‘MultisessionFuture’ ... done
[13:25:13.130] result() for ClusterFuture ...
[13:25:13.130] receiveMessageFromWorker() for ClusterFuture ...
[13:25:13.131] - Validating connection of MultisessionFuture
[13:25:13.176] - received message: FutureResult
[13:25:13.177] - Received FutureResult
[13:25:13.177] - Erased future from FutureRegistry
[13:25:13.177] result() for ClusterFuture ...
[13:25:13.177] - result already collected: FutureResult
[13:25:13.177] result() for ClusterFuture ... done
[13:25:13.177] receiveMessageFromWorker() for ClusterFuture ... done
[13:25:13.177] result() for ClusterFuture ... done
[13:25:13.177] result() for ClusterFuture ...
[13:25:13.177] - result already collected: FutureResult
[13:25:13.177] result() for ClusterFuture ... done
[13:25:13.178] result() for ClusterFuture ...
[13:25:13.178] - result already collected: FutureResult
[13:25:13.178] result() for ClusterFuture ... done
[1] 42
[13:25:13.178] result() for ClusterFuture ...
[13:25:13.178] - result already collected: FutureResult
[13:25:13.178] result() for ClusterFuture ... done
multisession ... done
Testing with 2 cores ... done
> 
> message("*** Standard output ... DONE")
*** Standard output ... DONE
> 
> source("incl/end.R")
[13:25:13.179] plan(): Setting new future strategy stack:
[13:25:13.179] List of future strategies:
[13:25:13.179] 1. FutureStrategy:
[13:25:13.179]    - args: function (..., envir = parent.frame())
[13:25:13.179]    - tweaked: FALSE
[13:25:13.179]    - call: future::plan(oplan)
[13:25:13.180] plan(): nbrOfWorkers() = 1
> 
