
R version 4.3.2 (2023-10-31) -- "Eye Holes"
Copyright (C) 2023 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> source("incl/start.R")
[13:23:23.967] plan(): Setting new future strategy stack:
[13:23:23.967] List of future strategies:
[13:23:23.967] 1. sequential:
[13:23:23.967]    - args: function (..., envir = parent.frame())
[13:23:23.967]    - tweaked: FALSE
[13:23:23.967]    - call: future::plan("sequential")
[13:23:23.983] plan(): nbrOfWorkers() = 1
> library("listenv")
> 
> oopts <- c(oopts, options(future.globals.resolve = TRUE))
> setTimeLimit(cpu = 10, elapsed = 10, transient = TRUE)
> 
> message("*** Tricky use cases related to globals (part 2) ...")
*** Tricky use cases related to globals (part 2) ...
> 
> ## Allow for two background processes
> plan(multisession, workers = 2L)
[13:23:24.000] plan(): Setting new future strategy stack:
[13:23:24.000] List of future strategies:
[13:23:24.000] 1. multisession:
[13:23:24.000]    - args: function (..., workers = 2L, envir = parent.frame())
[13:23:24.000]    - tweaked: TRUE
[13:23:24.000]    - call: plan(multisession, workers = 2L)
[13:23:24.011] plan(): plan_init() of ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ...
[13:23:24.011] multisession:
[13:23:24.011] - args: function (..., workers = 2L, envir = parent.frame())
[13:23:24.011] - tweaked: TRUE
[13:23:24.011] - call: plan(multisession, workers = 2L)
Warning: R option ‘future.globals.resolve’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘TRUE’
[13:23:24.013] getGlobalsAndPackages() ...
[13:23:24.013] Not searching for globals
[13:23:24.014] - globals: [0] <none>
[13:23:24.014] getGlobalsAndPackages() ... DONE
[13:23:24.014] [local output] makeClusterPSOCK() ...
[13:23:24.052] [local output] Workers: [n = 2] ‘localhost’, ‘localhost’
[13:23:24.053] [local output] Base port: 11587
[13:23:24.053] [local output] Getting setup options for 2 cluster nodes ...
[13:23:24.053] [local output]  - Node 1 of 2 ...
[13:23:24.054] [local output] localMachine=TRUE => revtunnel=FALSE

[13:23:24.054] Testing if worker's PID can be inferred: ‘'/usr/local/lib/R/bin/Rscript' -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/Rtmp0FELLk/worker.rank=1.parallelly.parent=86370.151624f8ac03d.pid")), silent = TRUE)' -e 'file.exists("/tmp/Rtmp0FELLk/worker.rank=1.parallelly.parent=86370.151624f8ac03d.pid")'’
[13:23:24.250] - Possible to infer worker's PID: TRUE
[13:23:24.250] [local output] Rscript port: 11587

[13:23:24.251] [local output]  - Node 2 of 2 ...
[13:23:24.251] [local output] localMachine=TRUE => revtunnel=FALSE

[13:23:24.252] [local output] Rscript port: 11587

[13:23:24.252] [local output] Getting setup options for 2 cluster nodes ... done
[13:23:24.252] [local output]  - Parallel setup requested for some PSOCK nodes
[13:23:24.253] [local output] Setting up PSOCK nodes in parallel
[13:23:24.253] List of 36
[13:23:24.253]  $ worker          : chr "localhost"
[13:23:24.253]   ..- attr(*, "localhost")= logi TRUE
[13:23:24.253]  $ master          : chr "localhost"
[13:23:24.253]  $ port            : int 11587
[13:23:24.253]  $ connectTimeout  : num 120
[13:23:24.253]  $ timeout         : num 2592000
[13:23:24.253]  $ rscript         : chr "'/usr/local/lib/R/bin/Rscript'"
[13:23:24.253]  $ homogeneous     : logi TRUE
[13:23:24.253]  $ rscript_args    : chr "--default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),fi"| __truncated__
[13:23:24.253]  $ rscript_envs    : NULL
[13:23:24.253]  $ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[13:23:24.253]  $ rscript_startup : NULL
[13:23:24.253]  $ rscript_sh      : chr "sh"
[13:23:24.253]  $ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[13:23:24.253]  $ methods         : logi TRUE
[13:23:24.253]  $ socketOptions   : chr "no-delay"
[13:23:24.253]  $ useXDR          : logi FALSE
[13:23:24.253]  $ outfile         : chr "/dev/null"
[13:23:24.253]  $ renice          : int NA
[13:23:24.253]  $ rshcmd          : NULL
[13:23:24.253]  $ user            : chr(0) 
[13:23:24.253]  $ revtunnel       : logi FALSE
[13:23:24.253]  $ rshlogfile      : NULL
[13:23:24.253]  $ rshopts         : chr(0) 
[13:23:24.253]  $ rank            : int 1
[13:23:24.253]  $ manual          : logi FALSE
[13:23:24.253]  $ dryrun          : logi FALSE
[13:23:24.253]  $ quiet           : logi FALSE
[13:23:24.253]  $ setup_strategy  : chr "parallel"
[13:23:24.253]  $ local_cmd       : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[13:23:24.253]  $ pidfile         : chr "/tmp/Rtmp0FELLk/worker.rank=1.parallelly.parent=86370.151624f8ac03d.pid"
[13:23:24.253]  $ rshcmd_label    : NULL
[13:23:24.253]  $ rsh_call        : NULL
[13:23:24.253]  $ cmd             : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[13:23:24.253]  $ localMachine    : logi TRUE
[13:23:24.253]  $ make_fcn        :function (worker = getOption2("parallelly.localhost.hostname", "localhost"), 
[13:23:24.253]     master = NULL, port, connectTimeout = getOption2("parallelly.makeNodePSOCK.connectTimeout", 
[13:23:24.253]         2 * 60), timeout = getOption2("parallelly.makeNodePSOCK.timeout", 
[13:23:24.253]         30 * 24 * 60 * 60), rscript = NULL, homogeneous = NULL, rscript_args = NULL, 
[13:23:24.253]     rscript_envs = NULL, rscript_libs = NULL, rscript_startup = NULL, rscript_sh = c("auto", 
[13:23:24.253]         "cmd", "sh"), default_packages = c("datasets", "utils", "grDevices", 
[13:23:24.253]         "graphics", "stats", if (methods) "methods"), methods = TRUE, socketOptions = getOption2("parallelly.makeNodePSOCK.socketOptions", 
[13:23:24.253]         "no-delay"), useXDR = getOption2("parallelly.makeNodePSOCK.useXDR", 
[13:23:24.253]         FALSE), outfile = "/dev/null", renice = NA_integer_, rshcmd = getOption2("parallelly.makeNodePSOCK.rshcmd", 
[13:23:24.253]         NULL), user = NULL, revtunnel = NA, rshlogfile = NULL, rshopts = getOption2("parallelly.makeNodePSOCK.rshopts", 
[13:23:24.253]         NULL), rank = 1L, manual = FALSE, dryrun = FALSE, quiet = FALSE, 
[13:23:24.253]     setup_strategy = getOption2("parallelly.makeNodePSOCK.setup_strategy", 
[13:23:24.253]         "parallel"), action = c("launch", "options"), verbose = FALSE)  
[13:23:24.253]  $ arguments       :List of 28
[13:23:24.253]   ..$ worker          : chr "localhost"
[13:23:24.253]   ..$ master          : NULL
[13:23:24.253]   ..$ port            : int 11587
[13:23:24.253]   ..$ connectTimeout  : num 120
[13:23:24.253]   ..$ timeout         : num 2592000
[13:23:24.253]   ..$ rscript         : NULL
[13:23:24.253]   ..$ homogeneous     : NULL
[13:23:24.253]   ..$ rscript_args    : NULL
[13:23:24.253]   ..$ rscript_envs    : NULL
[13:23:24.253]   ..$ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[13:23:24.253]   ..$ rscript_startup : NULL
[13:23:24.253]   ..$ rscript_sh      : chr [1:3] "auto" "cmd" "sh"
[13:23:24.253]   ..$ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[13:23:24.253]   ..$ methods         : logi TRUE
[13:23:24.253]   ..$ socketOptions   : chr "no-delay"
[13:23:24.253]   ..$ useXDR          : logi FALSE
[13:23:24.253]   ..$ outfile         : chr "/dev/null"
[13:23:24.253]   ..$ renice          : int NA
[13:23:24.253]   ..$ rshcmd          : NULL
[13:23:24.253]   ..$ user            : NULL
[13:23:24.253]   ..$ revtunnel       : logi NA
[13:23:24.253]   ..$ rshlogfile      : NULL
[13:23:24.253]   ..$ rshopts         : NULL
[13:23:24.253]   ..$ rank            : int 1
[13:23:24.253]   ..$ manual          : logi FALSE
[13:23:24.253]   ..$ dryrun          : logi FALSE
[13:23:24.253]   ..$ quiet           : logi FALSE
[13:23:24.253]   ..$ setup_strategy  : chr "parallel"
[13:23:24.253]  - attr(*, "class")= chr [1:2] "makeNodePSOCKOptions" "makeNodeOptions"
[13:23:24.272] [local output] System call to launch all workers:
[13:23:24.272] [local output] '/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/Rtmp0FELLk/worker.rank=1.parallelly.parent=86370.151624f8ac03d.pid")), silent = TRUE)' -e 'options(socketOptions = "no-delay")' -e '.libPaths(c("/usr/local/lib/R/site-library","/usr/local/lib/R/library"))' -e 'workRSOCK <- tryCatch(parallel:::.workRSOCK, error=function(e) parallel:::.slaveRSOCK); workRSOCK()' MASTER=localhost PORT=11587 OUT=/dev/null TIMEOUT=2592000 XDR=FALSE SETUPTIMEOUT=120 SETUPSTRATEGY=parallel
[13:23:24.273] [local output] Starting PSOCK main server
[13:23:24.278] [local output] Workers launched
[13:23:24.279] [local output] Waiting for workers to connect back
[13:23:24.279]  - [local output] 0 workers out of 2 ready
[13:23:24.531]  - [local output] 0 workers out of 2 ready
[13:23:24.532]  - [local output] 1 workers out of 2 ready
[13:23:24.532]  - [local output] 2 workers out of 2 ready
[13:23:24.532] [local output] Launching of workers completed
[13:23:24.532] [local output] Collecting session information from workers
[13:23:24.533] [local output]  - Worker #1 of 2
[13:23:24.534] [local output]  - Worker #2 of 2
[13:23:24.534] [local output] makeClusterPSOCK() ... done
[13:23:24.547] Packages needed by the future expression (n = 0): <none>
[13:23:24.547] Packages needed by future strategies (n = 0): <none>
[13:23:24.548] {
[13:23:24.548]     {
[13:23:24.548]         {
[13:23:24.548]             ...future.startTime <- base::Sys.time()
[13:23:24.548]             {
[13:23:24.548]                 {
[13:23:24.548]                   {
[13:23:24.548]                     {
[13:23:24.548]                       base::local({
[13:23:24.548]                         has_future <- base::requireNamespace("future", 
[13:23:24.548]                           quietly = TRUE)
[13:23:24.548]                         if (has_future) {
[13:23:24.548]                           ns <- base::getNamespace("future")
[13:23:24.548]                           version <- ns[[".package"]][["version"]]
[13:23:24.548]                           if (is.null(version)) 
[13:23:24.548]                             version <- utils::packageVersion("future")
[13:23:24.548]                         }
[13:23:24.548]                         else {
[13:23:24.548]                           version <- NULL
[13:23:24.548]                         }
[13:23:24.548]                         if (!has_future || version < "1.8.0") {
[13:23:24.548]                           info <- base::c(r_version = base::gsub("R version ", 
[13:23:24.548]                             "", base::R.version$version.string), 
[13:23:24.548]                             platform = base::sprintf("%s (%s-bit)", 
[13:23:24.548]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:23:24.548]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:23:24.548]                               "release", "version")], collapse = " "), 
[13:23:24.548]                             hostname = base::Sys.info()[["nodename"]])
[13:23:24.548]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:23:24.548]                             info)
[13:23:24.548]                           info <- base::paste(info, collapse = "; ")
[13:23:24.548]                           if (!has_future) {
[13:23:24.548]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:23:24.548]                               info)
[13:23:24.548]                           }
[13:23:24.548]                           else {
[13:23:24.548]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:23:24.548]                               info, version)
[13:23:24.548]                           }
[13:23:24.548]                           base::stop(msg)
[13:23:24.548]                         }
[13:23:24.548]                       })
[13:23:24.548]                     }
[13:23:24.548]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[13:23:24.548]                     base::options(mc.cores = 1L)
[13:23:24.548]                   }
[13:23:24.548]                   options(future.plan = NULL)
[13:23:24.548]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:23:24.548]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:23:24.548]                 }
[13:23:24.548]                 ...future.workdir <- getwd()
[13:23:24.548]             }
[13:23:24.548]             ...future.oldOptions <- base::as.list(base::.Options)
[13:23:24.548]             ...future.oldEnvVars <- base::Sys.getenv()
[13:23:24.548]         }
[13:23:24.548]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:23:24.548]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:23:24.548]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:23:24.548]             future.globals.resolve = TRUE, future.resolve.recursive = NULL, 
[13:23:24.548]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:23:24.548]             future.stdout.windows.reencode = NULL, width = 80L)
[13:23:24.548]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:23:24.548]             base::names(...future.oldOptions))
[13:23:24.548]     }
[13:23:24.548]     if (FALSE) {
[13:23:24.548]     }
[13:23:24.548]     else {
[13:23:24.548]         if (TRUE) {
[13:23:24.548]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:23:24.548]                 open = "w")
[13:23:24.548]         }
[13:23:24.548]         else {
[13:23:24.548]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:23:24.548]                 windows = "NUL", "/dev/null"), open = "w")
[13:23:24.548]         }
[13:23:24.548]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:23:24.548]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:23:24.548]             base::sink(type = "output", split = FALSE)
[13:23:24.548]             base::close(...future.stdout)
[13:23:24.548]         }, add = TRUE)
[13:23:24.548]     }
[13:23:24.548]     ...future.frame <- base::sys.nframe()
[13:23:24.548]     ...future.conditions <- base::list()
[13:23:24.548]     ...future.rng <- base::globalenv()$.Random.seed
[13:23:24.548]     if (FALSE) {
[13:23:24.548]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:23:24.548]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:23:24.548]     }
[13:23:24.548]     ...future.result <- base::tryCatch({
[13:23:24.548]         base::withCallingHandlers({
[13:23:24.548]             ...future.value <- base::withVisible(base::local({
[13:23:24.548]                 ...future.makeSendCondition <- base::local({
[13:23:24.548]                   sendCondition <- NULL
[13:23:24.548]                   function(frame = 1L) {
[13:23:24.548]                     if (is.function(sendCondition)) 
[13:23:24.548]                       return(sendCondition)
[13:23:24.548]                     ns <- getNamespace("parallel")
[13:23:24.548]                     if (exists("sendData", mode = "function", 
[13:23:24.548]                       envir = ns)) {
[13:23:24.548]                       parallel_sendData <- get("sendData", mode = "function", 
[13:23:24.548]                         envir = ns)
[13:23:24.548]                       envir <- sys.frame(frame)
[13:23:24.548]                       master <- NULL
[13:23:24.548]                       while (!identical(envir, .GlobalEnv) && 
[13:23:24.548]                         !identical(envir, emptyenv())) {
[13:23:24.548]                         if (exists("master", mode = "list", envir = envir, 
[13:23:24.548]                           inherits = FALSE)) {
[13:23:24.548]                           master <- get("master", mode = "list", 
[13:23:24.548]                             envir = envir, inherits = FALSE)
[13:23:24.548]                           if (inherits(master, c("SOCKnode", 
[13:23:24.548]                             "SOCK0node"))) {
[13:23:24.548]                             sendCondition <<- function(cond) {
[13:23:24.548]                               data <- list(type = "VALUE", value = cond, 
[13:23:24.548]                                 success = TRUE)
[13:23:24.548]                               parallel_sendData(master, data)
[13:23:24.548]                             }
[13:23:24.548]                             return(sendCondition)
[13:23:24.548]                           }
[13:23:24.548]                         }
[13:23:24.548]                         frame <- frame + 1L
[13:23:24.548]                         envir <- sys.frame(frame)
[13:23:24.548]                       }
[13:23:24.548]                     }
[13:23:24.548]                     sendCondition <<- function(cond) NULL
[13:23:24.548]                   }
[13:23:24.548]                 })
[13:23:24.548]                 withCallingHandlers({
[13:23:24.548]                   NA
[13:23:24.548]                 }, immediateCondition = function(cond) {
[13:23:24.548]                   sendCondition <- ...future.makeSendCondition()
[13:23:24.548]                   sendCondition(cond)
[13:23:24.548]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:23:24.548]                   {
[13:23:24.548]                     inherits <- base::inherits
[13:23:24.548]                     invokeRestart <- base::invokeRestart
[13:23:24.548]                     is.null <- base::is.null
[13:23:24.548]                     muffled <- FALSE
[13:23:24.548]                     if (inherits(cond, "message")) {
[13:23:24.548]                       muffled <- grepl(pattern, "muffleMessage")
[13:23:24.548]                       if (muffled) 
[13:23:24.548]                         invokeRestart("muffleMessage")
[13:23:24.548]                     }
[13:23:24.548]                     else if (inherits(cond, "warning")) {
[13:23:24.548]                       muffled <- grepl(pattern, "muffleWarning")
[13:23:24.548]                       if (muffled) 
[13:23:24.548]                         invokeRestart("muffleWarning")
[13:23:24.548]                     }
[13:23:24.548]                     else if (inherits(cond, "condition")) {
[13:23:24.548]                       if (!is.null(pattern)) {
[13:23:24.548]                         computeRestarts <- base::computeRestarts
[13:23:24.548]                         grepl <- base::grepl
[13:23:24.548]                         restarts <- computeRestarts(cond)
[13:23:24.548]                         for (restart in restarts) {
[13:23:24.548]                           name <- restart$name
[13:23:24.548]                           if (is.null(name)) 
[13:23:24.548]                             next
[13:23:24.548]                           if (!grepl(pattern, name)) 
[13:23:24.548]                             next
[13:23:24.548]                           invokeRestart(restart)
[13:23:24.548]                           muffled <- TRUE
[13:23:24.548]                           break
[13:23:24.548]                         }
[13:23:24.548]                       }
[13:23:24.548]                     }
[13:23:24.548]                     invisible(muffled)
[13:23:24.548]                   }
[13:23:24.548]                   muffleCondition(cond)
[13:23:24.548]                 })
[13:23:24.548]             }))
[13:23:24.548]             future::FutureResult(value = ...future.value$value, 
[13:23:24.548]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:23:24.548]                   ...future.rng), globalenv = if (FALSE) 
[13:23:24.548]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:23:24.548]                     ...future.globalenv.names))
[13:23:24.548]                 else NULL, started = ...future.startTime, version = "1.8")
[13:23:24.548]         }, condition = base::local({
[13:23:24.548]             c <- base::c
[13:23:24.548]             inherits <- base::inherits
[13:23:24.548]             invokeRestart <- base::invokeRestart
[13:23:24.548]             length <- base::length
[13:23:24.548]             list <- base::list
[13:23:24.548]             seq.int <- base::seq.int
[13:23:24.548]             signalCondition <- base::signalCondition
[13:23:24.548]             sys.calls <- base::sys.calls
[13:23:24.548]             `[[` <- base::`[[`
[13:23:24.548]             `+` <- base::`+`
[13:23:24.548]             `<<-` <- base::`<<-`
[13:23:24.548]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:23:24.548]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:23:24.548]                   3L)]
[13:23:24.548]             }
[13:23:24.548]             function(cond) {
[13:23:24.548]                 is_error <- inherits(cond, "error")
[13:23:24.548]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:23:24.548]                   NULL)
[13:23:24.548]                 if (is_error) {
[13:23:24.548]                   sessionInformation <- function() {
[13:23:24.548]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:23:24.548]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:23:24.548]                       search = base::search(), system = base::Sys.info())
[13:23:24.548]                   }
[13:23:24.548]                   ...future.conditions[[length(...future.conditions) + 
[13:23:24.548]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:23:24.548]                     cond$call), session = sessionInformation(), 
[13:23:24.548]                     timestamp = base::Sys.time(), signaled = 0L)
[13:23:24.548]                   signalCondition(cond)
[13:23:24.548]                 }
[13:23:24.548]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:23:24.548]                 "immediateCondition"))) {
[13:23:24.548]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:23:24.548]                   ...future.conditions[[length(...future.conditions) + 
[13:23:24.548]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:23:24.548]                   if (TRUE && !signal) {
[13:23:24.548]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:23:24.548]                     {
[13:23:24.548]                       inherits <- base::inherits
[13:23:24.548]                       invokeRestart <- base::invokeRestart
[13:23:24.548]                       is.null <- base::is.null
[13:23:24.548]                       muffled <- FALSE
[13:23:24.548]                       if (inherits(cond, "message")) {
[13:23:24.548]                         muffled <- grepl(pattern, "muffleMessage")
[13:23:24.548]                         if (muffled) 
[13:23:24.548]                           invokeRestart("muffleMessage")
[13:23:24.548]                       }
[13:23:24.548]                       else if (inherits(cond, "warning")) {
[13:23:24.548]                         muffled <- grepl(pattern, "muffleWarning")
[13:23:24.548]                         if (muffled) 
[13:23:24.548]                           invokeRestart("muffleWarning")
[13:23:24.548]                       }
[13:23:24.548]                       else if (inherits(cond, "condition")) {
[13:23:24.548]                         if (!is.null(pattern)) {
[13:23:24.548]                           computeRestarts <- base::computeRestarts
[13:23:24.548]                           grepl <- base::grepl
[13:23:24.548]                           restarts <- computeRestarts(cond)
[13:23:24.548]                           for (restart in restarts) {
[13:23:24.548]                             name <- restart$name
[13:23:24.548]                             if (is.null(name)) 
[13:23:24.548]                               next
[13:23:24.548]                             if (!grepl(pattern, name)) 
[13:23:24.548]                               next
[13:23:24.548]                             invokeRestart(restart)
[13:23:24.548]                             muffled <- TRUE
[13:23:24.548]                             break
[13:23:24.548]                           }
[13:23:24.548]                         }
[13:23:24.548]                       }
[13:23:24.548]                       invisible(muffled)
[13:23:24.548]                     }
[13:23:24.548]                     muffleCondition(cond, pattern = "^muffle")
[13:23:24.548]                   }
[13:23:24.548]                 }
[13:23:24.548]                 else {
[13:23:24.548]                   if (TRUE) {
[13:23:24.548]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:23:24.548]                     {
[13:23:24.548]                       inherits <- base::inherits
[13:23:24.548]                       invokeRestart <- base::invokeRestart
[13:23:24.548]                       is.null <- base::is.null
[13:23:24.548]                       muffled <- FALSE
[13:23:24.548]                       if (inherits(cond, "message")) {
[13:23:24.548]                         muffled <- grepl(pattern, "muffleMessage")
[13:23:24.548]                         if (muffled) 
[13:23:24.548]                           invokeRestart("muffleMessage")
[13:23:24.548]                       }
[13:23:24.548]                       else if (inherits(cond, "warning")) {
[13:23:24.548]                         muffled <- grepl(pattern, "muffleWarning")
[13:23:24.548]                         if (muffled) 
[13:23:24.548]                           invokeRestart("muffleWarning")
[13:23:24.548]                       }
[13:23:24.548]                       else if (inherits(cond, "condition")) {
[13:23:24.548]                         if (!is.null(pattern)) {
[13:23:24.548]                           computeRestarts <- base::computeRestarts
[13:23:24.548]                           grepl <- base::grepl
[13:23:24.548]                           restarts <- computeRestarts(cond)
[13:23:24.548]                           for (restart in restarts) {
[13:23:24.548]                             name <- restart$name
[13:23:24.548]                             if (is.null(name)) 
[13:23:24.548]                               next
[13:23:24.548]                             if (!grepl(pattern, name)) 
[13:23:24.548]                               next
[13:23:24.548]                             invokeRestart(restart)
[13:23:24.548]                             muffled <- TRUE
[13:23:24.548]                             break
[13:23:24.548]                           }
[13:23:24.548]                         }
[13:23:24.548]                       }
[13:23:24.548]                       invisible(muffled)
[13:23:24.548]                     }
[13:23:24.548]                     muffleCondition(cond, pattern = "^muffle")
[13:23:24.548]                   }
[13:23:24.548]                 }
[13:23:24.548]             }
[13:23:24.548]         }))
[13:23:24.548]     }, error = function(ex) {
[13:23:24.548]         base::structure(base::list(value = NULL, visible = NULL, 
[13:23:24.548]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:23:24.548]                 ...future.rng), started = ...future.startTime, 
[13:23:24.548]             finished = Sys.time(), session_uuid = NA_character_, 
[13:23:24.548]             version = "1.8"), class = "FutureResult")
[13:23:24.548]     }, finally = {
[13:23:24.548]         if (!identical(...future.workdir, getwd())) 
[13:23:24.548]             setwd(...future.workdir)
[13:23:24.548]         {
[13:23:24.548]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:23:24.548]                 ...future.oldOptions$nwarnings <- NULL
[13:23:24.548]             }
[13:23:24.548]             base::options(...future.oldOptions)
[13:23:24.548]             if (.Platform$OS.type == "windows") {
[13:23:24.548]                 old_names <- names(...future.oldEnvVars)
[13:23:24.548]                 envs <- base::Sys.getenv()
[13:23:24.548]                 names <- names(envs)
[13:23:24.548]                 common <- intersect(names, old_names)
[13:23:24.548]                 added <- setdiff(names, old_names)
[13:23:24.548]                 removed <- setdiff(old_names, names)
[13:23:24.548]                 changed <- common[...future.oldEnvVars[common] != 
[13:23:24.548]                   envs[common]]
[13:23:24.548]                 NAMES <- toupper(changed)
[13:23:24.548]                 args <- list()
[13:23:24.548]                 for (kk in seq_along(NAMES)) {
[13:23:24.548]                   name <- changed[[kk]]
[13:23:24.548]                   NAME <- NAMES[[kk]]
[13:23:24.548]                   if (name != NAME && is.element(NAME, old_names)) 
[13:23:24.548]                     next
[13:23:24.548]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:23:24.548]                 }
[13:23:24.548]                 NAMES <- toupper(added)
[13:23:24.548]                 for (kk in seq_along(NAMES)) {
[13:23:24.548]                   name <- added[[kk]]
[13:23:24.548]                   NAME <- NAMES[[kk]]
[13:23:24.548]                   if (name != NAME && is.element(NAME, old_names)) 
[13:23:24.548]                     next
[13:23:24.548]                   args[[name]] <- ""
[13:23:24.548]                 }
[13:23:24.548]                 NAMES <- toupper(removed)
[13:23:24.548]                 for (kk in seq_along(NAMES)) {
[13:23:24.548]                   name <- removed[[kk]]
[13:23:24.548]                   NAME <- NAMES[[kk]]
[13:23:24.548]                   if (name != NAME && is.element(NAME, old_names)) 
[13:23:24.548]                     next
[13:23:24.548]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:23:24.548]                 }
[13:23:24.548]                 if (length(args) > 0) 
[13:23:24.548]                   base::do.call(base::Sys.setenv, args = args)
[13:23:24.548]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:23:24.548]             }
[13:23:24.548]             else {
[13:23:24.548]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:23:24.548]             }
[13:23:24.548]             {
[13:23:24.548]                 if (base::length(...future.futureOptionsAdded) > 
[13:23:24.548]                   0L) {
[13:23:24.548]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:23:24.548]                   base::names(opts) <- ...future.futureOptionsAdded
[13:23:24.548]                   base::options(opts)
[13:23:24.548]                 }
[13:23:24.548]                 {
[13:23:24.548]                   {
[13:23:24.548]                     base::options(mc.cores = ...future.mc.cores.old)
[13:23:24.548]                     NULL
[13:23:24.548]                   }
[13:23:24.548]                   options(future.plan = NULL)
[13:23:24.548]                   if (is.na(NA_character_)) 
[13:23:24.548]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:23:24.548]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:23:24.548]                   future::plan(list(function (..., workers = 2L, 
[13:23:24.548]                     envir = parent.frame()) 
[13:23:24.548]                   strategy(..., workers = workers, envir = envir)), 
[13:23:24.548]                     .cleanup = FALSE, .init = FALSE)
[13:23:24.548]                 }
[13:23:24.548]             }
[13:23:24.548]         }
[13:23:24.548]     })
[13:23:24.548]     if (TRUE) {
[13:23:24.548]         base::sink(type = "output", split = FALSE)
[13:23:24.548]         if (TRUE) {
[13:23:24.548]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:23:24.548]         }
[13:23:24.548]         else {
[13:23:24.548]             ...future.result["stdout"] <- base::list(NULL)
[13:23:24.548]         }
[13:23:24.548]         base::close(...future.stdout)
[13:23:24.548]         ...future.stdout <- NULL
[13:23:24.548]     }
[13:23:24.548]     ...future.result$conditions <- ...future.conditions
[13:23:24.548]     ...future.result$finished <- base::Sys.time()
[13:23:24.548]     ...future.result
[13:23:24.548] }
[13:23:24.604] MultisessionFuture started
[13:23:24.605] result() for ClusterFuture ...
[13:23:24.605] receiveMessageFromWorker() for ClusterFuture ...
[13:23:24.606] - Validating connection of MultisessionFuture
[13:23:24.639] - received message: FutureResult
[13:23:24.640] - Received FutureResult
[13:23:24.643] - Erased future from FutureRegistry
[13:23:24.643] result() for ClusterFuture ...
[13:23:24.643] - result already collected: FutureResult
[13:23:24.643] result() for ClusterFuture ... done
[13:23:24.643] receiveMessageFromWorker() for ClusterFuture ... done
[13:23:24.643] result() for ClusterFuture ... done
[13:23:24.644] result() for ClusterFuture ...
[13:23:24.644] - result already collected: FutureResult
[13:23:24.644] result() for ClusterFuture ... done
[13:23:24.644] plan(): plan_init() of ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ... DONE
[13:23:24.644] plan(): nbrOfWorkers() = 2
> 
> env <- new.env()
> 
> ## Create future #1 (consumes background process #1)
> env$a %<-% { 5 }
Warning: R option ‘future.globals.resolve’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘TRUE’
[13:23:24.646] getGlobalsAndPackages() ...
[13:23:24.646] Searching for globals...
[13:23:24.650] - globals found: [1] ‘{’
[13:23:24.650] Searching for globals ... DONE
[13:23:24.650] Resolving globals: TRUE
[13:23:24.651] Resolving any globals that are futures ...
[13:23:24.651] - globals: [1] ‘{’
[13:23:24.651] Resolving any globals that are futures ... DONE
[13:23:24.651] 
[13:23:24.651] 
[13:23:24.652] getGlobalsAndPackages() ... DONE
[13:23:24.652] run() for ‘Future’ ...
[13:23:24.652] - state: ‘created’
[13:23:24.653] - Future backend: ‘FutureStrategy’, ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[13:23:24.664] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:23:24.664] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[13:23:24.664]   - Field: ‘node’
[13:23:24.664]   - Field: ‘label’
[13:23:24.664]   - Field: ‘local’
[13:23:24.664]   - Field: ‘owner’
[13:23:24.664]   - Field: ‘envir’
[13:23:24.664]   - Field: ‘workers’
[13:23:24.665]   - Field: ‘packages’
[13:23:24.665]   - Field: ‘gc’
[13:23:24.665]   - Field: ‘conditions’
[13:23:24.665]   - Field: ‘persistent’
[13:23:24.665]   - Field: ‘expr’
[13:23:24.665]   - Field: ‘uuid’
[13:23:24.665]   - Field: ‘seed’
[13:23:24.665]   - Field: ‘version’
[13:23:24.665]   - Field: ‘result’
[13:23:24.666]   - Field: ‘asynchronous’
[13:23:24.666]   - Field: ‘calls’
[13:23:24.666]   - Field: ‘globals’
[13:23:24.666]   - Field: ‘stdout’
[13:23:24.666]   - Field: ‘earlySignal’
[13:23:24.666]   - Field: ‘lazy’
[13:23:24.666]   - Field: ‘state’
[13:23:24.666] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[13:23:24.667] - Launch lazy future ...
[13:23:24.667] Packages needed by the future expression (n = 0): <none>
[13:23:24.667] Packages needed by future strategies (n = 0): <none>
[13:23:24.668] {
[13:23:24.668]     {
[13:23:24.668]         {
[13:23:24.668]             ...future.startTime <- base::Sys.time()
[13:23:24.668]             {
[13:23:24.668]                 {
[13:23:24.668]                   {
[13:23:24.668]                     {
[13:23:24.668]                       base::local({
[13:23:24.668]                         has_future <- base::requireNamespace("future", 
[13:23:24.668]                           quietly = TRUE)
[13:23:24.668]                         if (has_future) {
[13:23:24.668]                           ns <- base::getNamespace("future")
[13:23:24.668]                           version <- ns[[".package"]][["version"]]
[13:23:24.668]                           if (is.null(version)) 
[13:23:24.668]                             version <- utils::packageVersion("future")
[13:23:24.668]                         }
[13:23:24.668]                         else {
[13:23:24.668]                           version <- NULL
[13:23:24.668]                         }
[13:23:24.668]                         if (!has_future || version < "1.8.0") {
[13:23:24.668]                           info <- base::c(r_version = base::gsub("R version ", 
[13:23:24.668]                             "", base::R.version$version.string), 
[13:23:24.668]                             platform = base::sprintf("%s (%s-bit)", 
[13:23:24.668]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:23:24.668]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:23:24.668]                               "release", "version")], collapse = " "), 
[13:23:24.668]                             hostname = base::Sys.info()[["nodename"]])
[13:23:24.668]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:23:24.668]                             info)
[13:23:24.668]                           info <- base::paste(info, collapse = "; ")
[13:23:24.668]                           if (!has_future) {
[13:23:24.668]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:23:24.668]                               info)
[13:23:24.668]                           }
[13:23:24.668]                           else {
[13:23:24.668]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:23:24.668]                               info, version)
[13:23:24.668]                           }
[13:23:24.668]                           base::stop(msg)
[13:23:24.668]                         }
[13:23:24.668]                       })
[13:23:24.668]                     }
[13:23:24.668]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[13:23:24.668]                     base::options(mc.cores = 1L)
[13:23:24.668]                   }
[13:23:24.668]                   options(future.plan = NULL)
[13:23:24.668]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:23:24.668]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:23:24.668]                 }
[13:23:24.668]                 ...future.workdir <- getwd()
[13:23:24.668]             }
[13:23:24.668]             ...future.oldOptions <- base::as.list(base::.Options)
[13:23:24.668]             ...future.oldEnvVars <- base::Sys.getenv()
[13:23:24.668]         }
[13:23:24.668]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:23:24.668]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:23:24.668]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:23:24.668]             future.globals.resolve = TRUE, future.resolve.recursive = NULL, 
[13:23:24.668]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:23:24.668]             future.stdout.windows.reencode = NULL, width = 80L)
[13:23:24.668]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:23:24.668]             base::names(...future.oldOptions))
[13:23:24.668]     }
[13:23:24.668]     if (FALSE) {
[13:23:24.668]     }
[13:23:24.668]     else {
[13:23:24.668]         if (TRUE) {
[13:23:24.668]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:23:24.668]                 open = "w")
[13:23:24.668]         }
[13:23:24.668]         else {
[13:23:24.668]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:23:24.668]                 windows = "NUL", "/dev/null"), open = "w")
[13:23:24.668]         }
[13:23:24.668]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:23:24.668]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:23:24.668]             base::sink(type = "output", split = FALSE)
[13:23:24.668]             base::close(...future.stdout)
[13:23:24.668]         }, add = TRUE)
[13:23:24.668]     }
[13:23:24.668]     ...future.frame <- base::sys.nframe()
[13:23:24.668]     ...future.conditions <- base::list()
[13:23:24.668]     ...future.rng <- base::globalenv()$.Random.seed
[13:23:24.668]     if (FALSE) {
[13:23:24.668]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:23:24.668]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:23:24.668]     }
[13:23:24.668]     ...future.result <- base::tryCatch({
[13:23:24.668]         base::withCallingHandlers({
[13:23:24.668]             ...future.value <- base::withVisible(base::local({
[13:23:24.668]                 ...future.makeSendCondition <- base::local({
[13:23:24.668]                   sendCondition <- NULL
[13:23:24.668]                   function(frame = 1L) {
[13:23:24.668]                     if (is.function(sendCondition)) 
[13:23:24.668]                       return(sendCondition)
[13:23:24.668]                     ns <- getNamespace("parallel")
[13:23:24.668]                     if (exists("sendData", mode = "function", 
[13:23:24.668]                       envir = ns)) {
[13:23:24.668]                       parallel_sendData <- get("sendData", mode = "function", 
[13:23:24.668]                         envir = ns)
[13:23:24.668]                       envir <- sys.frame(frame)
[13:23:24.668]                       master <- NULL
[13:23:24.668]                       while (!identical(envir, .GlobalEnv) && 
[13:23:24.668]                         !identical(envir, emptyenv())) {
[13:23:24.668]                         if (exists("master", mode = "list", envir = envir, 
[13:23:24.668]                           inherits = FALSE)) {
[13:23:24.668]                           master <- get("master", mode = "list", 
[13:23:24.668]                             envir = envir, inherits = FALSE)
[13:23:24.668]                           if (inherits(master, c("SOCKnode", 
[13:23:24.668]                             "SOCK0node"))) {
[13:23:24.668]                             sendCondition <<- function(cond) {
[13:23:24.668]                               data <- list(type = "VALUE", value = cond, 
[13:23:24.668]                                 success = TRUE)
[13:23:24.668]                               parallel_sendData(master, data)
[13:23:24.668]                             }
[13:23:24.668]                             return(sendCondition)
[13:23:24.668]                           }
[13:23:24.668]                         }
[13:23:24.668]                         frame <- frame + 1L
[13:23:24.668]                         envir <- sys.frame(frame)
[13:23:24.668]                       }
[13:23:24.668]                     }
[13:23:24.668]                     sendCondition <<- function(cond) NULL
[13:23:24.668]                   }
[13:23:24.668]                 })
[13:23:24.668]                 withCallingHandlers({
[13:23:24.668]                   {
[13:23:24.668]                     5
[13:23:24.668]                   }
[13:23:24.668]                 }, immediateCondition = function(cond) {
[13:23:24.668]                   sendCondition <- ...future.makeSendCondition()
[13:23:24.668]                   sendCondition(cond)
[13:23:24.668]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:23:24.668]                   {
[13:23:24.668]                     inherits <- base::inherits
[13:23:24.668]                     invokeRestart <- base::invokeRestart
[13:23:24.668]                     is.null <- base::is.null
[13:23:24.668]                     muffled <- FALSE
[13:23:24.668]                     if (inherits(cond, "message")) {
[13:23:24.668]                       muffled <- grepl(pattern, "muffleMessage")
[13:23:24.668]                       if (muffled) 
[13:23:24.668]                         invokeRestart("muffleMessage")
[13:23:24.668]                     }
[13:23:24.668]                     else if (inherits(cond, "warning")) {
[13:23:24.668]                       muffled <- grepl(pattern, "muffleWarning")
[13:23:24.668]                       if (muffled) 
[13:23:24.668]                         invokeRestart("muffleWarning")
[13:23:24.668]                     }
[13:23:24.668]                     else if (inherits(cond, "condition")) {
[13:23:24.668]                       if (!is.null(pattern)) {
[13:23:24.668]                         computeRestarts <- base::computeRestarts
[13:23:24.668]                         grepl <- base::grepl
[13:23:24.668]                         restarts <- computeRestarts(cond)
[13:23:24.668]                         for (restart in restarts) {
[13:23:24.668]                           name <- restart$name
[13:23:24.668]                           if (is.null(name)) 
[13:23:24.668]                             next
[13:23:24.668]                           if (!grepl(pattern, name)) 
[13:23:24.668]                             next
[13:23:24.668]                           invokeRestart(restart)
[13:23:24.668]                           muffled <- TRUE
[13:23:24.668]                           break
[13:23:24.668]                         }
[13:23:24.668]                       }
[13:23:24.668]                     }
[13:23:24.668]                     invisible(muffled)
[13:23:24.668]                   }
[13:23:24.668]                   muffleCondition(cond)
[13:23:24.668]                 })
[13:23:24.668]             }))
[13:23:24.668]             future::FutureResult(value = ...future.value$value, 
[13:23:24.668]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:23:24.668]                   ...future.rng), globalenv = if (FALSE) 
[13:23:24.668]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:23:24.668]                     ...future.globalenv.names))
[13:23:24.668]                 else NULL, started = ...future.startTime, version = "1.8")
[13:23:24.668]         }, condition = base::local({
[13:23:24.668]             c <- base::c
[13:23:24.668]             inherits <- base::inherits
[13:23:24.668]             invokeRestart <- base::invokeRestart
[13:23:24.668]             length <- base::length
[13:23:24.668]             list <- base::list
[13:23:24.668]             seq.int <- base::seq.int
[13:23:24.668]             signalCondition <- base::signalCondition
[13:23:24.668]             sys.calls <- base::sys.calls
[13:23:24.668]             `[[` <- base::`[[`
[13:23:24.668]             `+` <- base::`+`
[13:23:24.668]             `<<-` <- base::`<<-`
[13:23:24.668]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:23:24.668]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:23:24.668]                   3L)]
[13:23:24.668]             }
[13:23:24.668]             function(cond) {
[13:23:24.668]                 is_error <- inherits(cond, "error")
[13:23:24.668]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:23:24.668]                   NULL)
[13:23:24.668]                 if (is_error) {
[13:23:24.668]                   sessionInformation <- function() {
[13:23:24.668]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:23:24.668]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:23:24.668]                       search = base::search(), system = base::Sys.info())
[13:23:24.668]                   }
[13:23:24.668]                   ...future.conditions[[length(...future.conditions) + 
[13:23:24.668]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:23:24.668]                     cond$call), session = sessionInformation(), 
[13:23:24.668]                     timestamp = base::Sys.time(), signaled = 0L)
[13:23:24.668]                   signalCondition(cond)
[13:23:24.668]                 }
[13:23:24.668]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:23:24.668]                 "immediateCondition"))) {
[13:23:24.668]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:23:24.668]                   ...future.conditions[[length(...future.conditions) + 
[13:23:24.668]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:23:24.668]                   if (TRUE && !signal) {
[13:23:24.668]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:23:24.668]                     {
[13:23:24.668]                       inherits <- base::inherits
[13:23:24.668]                       invokeRestart <- base::invokeRestart
[13:23:24.668]                       is.null <- base::is.null
[13:23:24.668]                       muffled <- FALSE
[13:23:24.668]                       if (inherits(cond, "message")) {
[13:23:24.668]                         muffled <- grepl(pattern, "muffleMessage")
[13:23:24.668]                         if (muffled) 
[13:23:24.668]                           invokeRestart("muffleMessage")
[13:23:24.668]                       }
[13:23:24.668]                       else if (inherits(cond, "warning")) {
[13:23:24.668]                         muffled <- grepl(pattern, "muffleWarning")
[13:23:24.668]                         if (muffled) 
[13:23:24.668]                           invokeRestart("muffleWarning")
[13:23:24.668]                       }
[13:23:24.668]                       else if (inherits(cond, "condition")) {
[13:23:24.668]                         if (!is.null(pattern)) {
[13:23:24.668]                           computeRestarts <- base::computeRestarts
[13:23:24.668]                           grepl <- base::grepl
[13:23:24.668]                           restarts <- computeRestarts(cond)
[13:23:24.668]                           for (restart in restarts) {
[13:23:24.668]                             name <- restart$name
[13:23:24.668]                             if (is.null(name)) 
[13:23:24.668]                               next
[13:23:24.668]                             if (!grepl(pattern, name)) 
[13:23:24.668]                               next
[13:23:24.668]                             invokeRestart(restart)
[13:23:24.668]                             muffled <- TRUE
[13:23:24.668]                             break
[13:23:24.668]                           }
[13:23:24.668]                         }
[13:23:24.668]                       }
[13:23:24.668]                       invisible(muffled)
[13:23:24.668]                     }
[13:23:24.668]                     muffleCondition(cond, pattern = "^muffle")
[13:23:24.668]                   }
[13:23:24.668]                 }
[13:23:24.668]                 else {
[13:23:24.668]                   if (TRUE) {
[13:23:24.668]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:23:24.668]                     {
[13:23:24.668]                       inherits <- base::inherits
[13:23:24.668]                       invokeRestart <- base::invokeRestart
[13:23:24.668]                       is.null <- base::is.null
[13:23:24.668]                       muffled <- FALSE
[13:23:24.668]                       if (inherits(cond, "message")) {
[13:23:24.668]                         muffled <- grepl(pattern, "muffleMessage")
[13:23:24.668]                         if (muffled) 
[13:23:24.668]                           invokeRestart("muffleMessage")
[13:23:24.668]                       }
[13:23:24.668]                       else if (inherits(cond, "warning")) {
[13:23:24.668]                         muffled <- grepl(pattern, "muffleWarning")
[13:23:24.668]                         if (muffled) 
[13:23:24.668]                           invokeRestart("muffleWarning")
[13:23:24.668]                       }
[13:23:24.668]                       else if (inherits(cond, "condition")) {
[13:23:24.668]                         if (!is.null(pattern)) {
[13:23:24.668]                           computeRestarts <- base::computeRestarts
[13:23:24.668]                           grepl <- base::grepl
[13:23:24.668]                           restarts <- computeRestarts(cond)
[13:23:24.668]                           for (restart in restarts) {
[13:23:24.668]                             name <- restart$name
[13:23:24.668]                             if (is.null(name)) 
[13:23:24.668]                               next
[13:23:24.668]                             if (!grepl(pattern, name)) 
[13:23:24.668]                               next
[13:23:24.668]                             invokeRestart(restart)
[13:23:24.668]                             muffled <- TRUE
[13:23:24.668]                             break
[13:23:24.668]                           }
[13:23:24.668]                         }
[13:23:24.668]                       }
[13:23:24.668]                       invisible(muffled)
[13:23:24.668]                     }
[13:23:24.668]                     muffleCondition(cond, pattern = "^muffle")
[13:23:24.668]                   }
[13:23:24.668]                 }
[13:23:24.668]             }
[13:23:24.668]         }))
[13:23:24.668]     }, error = function(ex) {
[13:23:24.668]         base::structure(base::list(value = NULL, visible = NULL, 
[13:23:24.668]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:23:24.668]                 ...future.rng), started = ...future.startTime, 
[13:23:24.668]             finished = Sys.time(), session_uuid = NA_character_, 
[13:23:24.668]             version = "1.8"), class = "FutureResult")
[13:23:24.668]     }, finally = {
[13:23:24.668]         if (!identical(...future.workdir, getwd())) 
[13:23:24.668]             setwd(...future.workdir)
[13:23:24.668]         {
[13:23:24.668]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:23:24.668]                 ...future.oldOptions$nwarnings <- NULL
[13:23:24.668]             }
[13:23:24.668]             base::options(...future.oldOptions)
[13:23:24.668]             if (.Platform$OS.type == "windows") {
[13:23:24.668]                 old_names <- names(...future.oldEnvVars)
[13:23:24.668]                 envs <- base::Sys.getenv()
[13:23:24.668]                 names <- names(envs)
[13:23:24.668]                 common <- intersect(names, old_names)
[13:23:24.668]                 added <- setdiff(names, old_names)
[13:23:24.668]                 removed <- setdiff(old_names, names)
[13:23:24.668]                 changed <- common[...future.oldEnvVars[common] != 
[13:23:24.668]                   envs[common]]
[13:23:24.668]                 NAMES <- toupper(changed)
[13:23:24.668]                 args <- list()
[13:23:24.668]                 for (kk in seq_along(NAMES)) {
[13:23:24.668]                   name <- changed[[kk]]
[13:23:24.668]                   NAME <- NAMES[[kk]]
[13:23:24.668]                   if (name != NAME && is.element(NAME, old_names)) 
[13:23:24.668]                     next
[13:23:24.668]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:23:24.668]                 }
[13:23:24.668]                 NAMES <- toupper(added)
[13:23:24.668]                 for (kk in seq_along(NAMES)) {
[13:23:24.668]                   name <- added[[kk]]
[13:23:24.668]                   NAME <- NAMES[[kk]]
[13:23:24.668]                   if (name != NAME && is.element(NAME, old_names)) 
[13:23:24.668]                     next
[13:23:24.668]                   args[[name]] <- ""
[13:23:24.668]                 }
[13:23:24.668]                 NAMES <- toupper(removed)
[13:23:24.668]                 for (kk in seq_along(NAMES)) {
[13:23:24.668]                   name <- removed[[kk]]
[13:23:24.668]                   NAME <- NAMES[[kk]]
[13:23:24.668]                   if (name != NAME && is.element(NAME, old_names)) 
[13:23:24.668]                     next
[13:23:24.668]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:23:24.668]                 }
[13:23:24.668]                 if (length(args) > 0) 
[13:23:24.668]                   base::do.call(base::Sys.setenv, args = args)
[13:23:24.668]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:23:24.668]             }
[13:23:24.668]             else {
[13:23:24.668]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:23:24.668]             }
[13:23:24.668]             {
[13:23:24.668]                 if (base::length(...future.futureOptionsAdded) > 
[13:23:24.668]                   0L) {
[13:23:24.668]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:23:24.668]                   base::names(opts) <- ...future.futureOptionsAdded
[13:23:24.668]                   base::options(opts)
[13:23:24.668]                 }
[13:23:24.668]                 {
[13:23:24.668]                   {
[13:23:24.668]                     base::options(mc.cores = ...future.mc.cores.old)
[13:23:24.668]                     NULL
[13:23:24.668]                   }
[13:23:24.668]                   options(future.plan = NULL)
[13:23:24.668]                   if (is.na(NA_character_)) 
[13:23:24.668]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:23:24.668]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:23:24.668]                   future::plan(list(function (..., workers = 2L, 
[13:23:24.668]                     envir = parent.frame()) 
[13:23:24.668]                   strategy(..., workers = workers, envir = envir)), 
[13:23:24.668]                     .cleanup = FALSE, .init = FALSE)
[13:23:24.668]                 }
[13:23:24.668]             }
[13:23:24.668]         }
[13:23:24.668]     })
[13:23:24.668]     if (TRUE) {
[13:23:24.668]         base::sink(type = "output", split = FALSE)
[13:23:24.668]         if (TRUE) {
[13:23:24.668]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:23:24.668]         }
[13:23:24.668]         else {
[13:23:24.668]             ...future.result["stdout"] <- base::list(NULL)
[13:23:24.668]         }
[13:23:24.668]         base::close(...future.stdout)
[13:23:24.668]         ...future.stdout <- NULL
[13:23:24.668]     }
[13:23:24.668]     ...future.result$conditions <- ...future.conditions
[13:23:24.668]     ...future.result$finished <- base::Sys.time()
[13:23:24.668]     ...future.result
[13:23:24.668] }
[13:23:24.671] MultisessionFuture started
[13:23:24.671] - Launch lazy future ... done
[13:23:24.672] run() for ‘MultisessionFuture’ ... done
> 
> ## Create future #2 (consumes background process #2)
> b %<-% { "a" }
Warning: R option ‘future.globals.resolve’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘TRUE’
[13:23:24.672] getGlobalsAndPackages() ...
[13:23:24.672] Searching for globals...
[13:23:24.673] - globals found: [1] ‘{’
[13:23:24.673] Searching for globals ... DONE
[13:23:24.673] Resolving globals: TRUE
[13:23:24.674] Resolving any globals that are futures ...
[13:23:24.674] - globals: [1] ‘{’
[13:23:24.674] Resolving any globals that are futures ... DONE
[13:23:24.674] 
[13:23:24.674] 
[13:23:24.674] getGlobalsAndPackages() ... DONE
[13:23:24.675] run() for ‘Future’ ...
[13:23:24.675] - state: ‘created’
[13:23:24.675] - Future backend: ‘FutureStrategy’, ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[13:23:24.686] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:23:24.686] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[13:23:24.686]   - Field: ‘node’
[13:23:24.686]   - Field: ‘label’
[13:23:24.686]   - Field: ‘local’
[13:23:24.686]   - Field: ‘owner’
[13:23:24.687]   - Field: ‘envir’
[13:23:24.687]   - Field: ‘workers’
[13:23:24.687]   - Field: ‘packages’
[13:23:24.687]   - Field: ‘gc’
[13:23:24.687]   - Field: ‘conditions’
[13:23:24.687]   - Field: ‘persistent’
[13:23:24.687]   - Field: ‘expr’
[13:23:24.687]   - Field: ‘uuid’
[13:23:24.687]   - Field: ‘seed’
[13:23:24.688]   - Field: ‘version’
[13:23:24.688]   - Field: ‘result’
[13:23:24.688]   - Field: ‘asynchronous’
[13:23:24.688]   - Field: ‘calls’
[13:23:24.688]   - Field: ‘globals’
[13:23:24.688]   - Field: ‘stdout’
[13:23:24.688]   - Field: ‘earlySignal’
[13:23:24.688]   - Field: ‘lazy’
[13:23:24.689]   - Field: ‘state’
[13:23:24.689] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[13:23:24.689] - Launch lazy future ...
[13:23:24.689] Packages needed by the future expression (n = 0): <none>
[13:23:24.689] Packages needed by future strategies (n = 0): <none>
[13:23:24.690] {
[13:23:24.690]     {
[13:23:24.690]         {
[13:23:24.690]             ...future.startTime <- base::Sys.time()
[13:23:24.690]             {
[13:23:24.690]                 {
[13:23:24.690]                   {
[13:23:24.690]                     {
[13:23:24.690]                       base::local({
[13:23:24.690]                         has_future <- base::requireNamespace("future", 
[13:23:24.690]                           quietly = TRUE)
[13:23:24.690]                         if (has_future) {
[13:23:24.690]                           ns <- base::getNamespace("future")
[13:23:24.690]                           version <- ns[[".package"]][["version"]]
[13:23:24.690]                           if (is.null(version)) 
[13:23:24.690]                             version <- utils::packageVersion("future")
[13:23:24.690]                         }
[13:23:24.690]                         else {
[13:23:24.690]                           version <- NULL
[13:23:24.690]                         }
[13:23:24.690]                         if (!has_future || version < "1.8.0") {
[13:23:24.690]                           info <- base::c(r_version = base::gsub("R version ", 
[13:23:24.690]                             "", base::R.version$version.string), 
[13:23:24.690]                             platform = base::sprintf("%s (%s-bit)", 
[13:23:24.690]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:23:24.690]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:23:24.690]                               "release", "version")], collapse = " "), 
[13:23:24.690]                             hostname = base::Sys.info()[["nodename"]])
[13:23:24.690]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:23:24.690]                             info)
[13:23:24.690]                           info <- base::paste(info, collapse = "; ")
[13:23:24.690]                           if (!has_future) {
[13:23:24.690]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:23:24.690]                               info)
[13:23:24.690]                           }
[13:23:24.690]                           else {
[13:23:24.690]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:23:24.690]                               info, version)
[13:23:24.690]                           }
[13:23:24.690]                           base::stop(msg)
[13:23:24.690]                         }
[13:23:24.690]                       })
[13:23:24.690]                     }
[13:23:24.690]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[13:23:24.690]                     base::options(mc.cores = 1L)
[13:23:24.690]                   }
[13:23:24.690]                   options(future.plan = NULL)
[13:23:24.690]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:23:24.690]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:23:24.690]                 }
[13:23:24.690]                 ...future.workdir <- getwd()
[13:23:24.690]             }
[13:23:24.690]             ...future.oldOptions <- base::as.list(base::.Options)
[13:23:24.690]             ...future.oldEnvVars <- base::Sys.getenv()
[13:23:24.690]         }
[13:23:24.690]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:23:24.690]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:23:24.690]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:23:24.690]             future.globals.resolve = TRUE, future.resolve.recursive = NULL, 
[13:23:24.690]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:23:24.690]             future.stdout.windows.reencode = NULL, width = 80L)
[13:23:24.690]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:23:24.690]             base::names(...future.oldOptions))
[13:23:24.690]     }
[13:23:24.690]     if (FALSE) {
[13:23:24.690]     }
[13:23:24.690]     else {
[13:23:24.690]         if (TRUE) {
[13:23:24.690]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:23:24.690]                 open = "w")
[13:23:24.690]         }
[13:23:24.690]         else {
[13:23:24.690]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:23:24.690]                 windows = "NUL", "/dev/null"), open = "w")
[13:23:24.690]         }
[13:23:24.690]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:23:24.690]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:23:24.690]             base::sink(type = "output", split = FALSE)
[13:23:24.690]             base::close(...future.stdout)
[13:23:24.690]         }, add = TRUE)
[13:23:24.690]     }
[13:23:24.690]     ...future.frame <- base::sys.nframe()
[13:23:24.690]     ...future.conditions <- base::list()
[13:23:24.690]     ...future.rng <- base::globalenv()$.Random.seed
[13:23:24.690]     if (FALSE) {
[13:23:24.690]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:23:24.690]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:23:24.690]     }
[13:23:24.690]     ...future.result <- base::tryCatch({
[13:23:24.690]         base::withCallingHandlers({
[13:23:24.690]             ...future.value <- base::withVisible(base::local({
[13:23:24.690]                 ...future.makeSendCondition <- base::local({
[13:23:24.690]                   sendCondition <- NULL
[13:23:24.690]                   function(frame = 1L) {
[13:23:24.690]                     if (is.function(sendCondition)) 
[13:23:24.690]                       return(sendCondition)
[13:23:24.690]                     ns <- getNamespace("parallel")
[13:23:24.690]                     if (exists("sendData", mode = "function", 
[13:23:24.690]                       envir = ns)) {
[13:23:24.690]                       parallel_sendData <- get("sendData", mode = "function", 
[13:23:24.690]                         envir = ns)
[13:23:24.690]                       envir <- sys.frame(frame)
[13:23:24.690]                       master <- NULL
[13:23:24.690]                       while (!identical(envir, .GlobalEnv) && 
[13:23:24.690]                         !identical(envir, emptyenv())) {
[13:23:24.690]                         if (exists("master", mode = "list", envir = envir, 
[13:23:24.690]                           inherits = FALSE)) {
[13:23:24.690]                           master <- get("master", mode = "list", 
[13:23:24.690]                             envir = envir, inherits = FALSE)
[13:23:24.690]                           if (inherits(master, c("SOCKnode", 
[13:23:24.690]                             "SOCK0node"))) {
[13:23:24.690]                             sendCondition <<- function(cond) {
[13:23:24.690]                               data <- list(type = "VALUE", value = cond, 
[13:23:24.690]                                 success = TRUE)
[13:23:24.690]                               parallel_sendData(master, data)
[13:23:24.690]                             }
[13:23:24.690]                             return(sendCondition)
[13:23:24.690]                           }
[13:23:24.690]                         }
[13:23:24.690]                         frame <- frame + 1L
[13:23:24.690]                         envir <- sys.frame(frame)
[13:23:24.690]                       }
[13:23:24.690]                     }
[13:23:24.690]                     sendCondition <<- function(cond) NULL
[13:23:24.690]                   }
[13:23:24.690]                 })
[13:23:24.690]                 withCallingHandlers({
[13:23:24.690]                   {
[13:23:24.690]                     "a"
[13:23:24.690]                   }
[13:23:24.690]                 }, immediateCondition = function(cond) {
[13:23:24.690]                   sendCondition <- ...future.makeSendCondition()
[13:23:24.690]                   sendCondition(cond)
[13:23:24.690]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:23:24.690]                   {
[13:23:24.690]                     inherits <- base::inherits
[13:23:24.690]                     invokeRestart <- base::invokeRestart
[13:23:24.690]                     is.null <- base::is.null
[13:23:24.690]                     muffled <- FALSE
[13:23:24.690]                     if (inherits(cond, "message")) {
[13:23:24.690]                       muffled <- grepl(pattern, "muffleMessage")
[13:23:24.690]                       if (muffled) 
[13:23:24.690]                         invokeRestart("muffleMessage")
[13:23:24.690]                     }
[13:23:24.690]                     else if (inherits(cond, "warning")) {
[13:23:24.690]                       muffled <- grepl(pattern, "muffleWarning")
[13:23:24.690]                       if (muffled) 
[13:23:24.690]                         invokeRestart("muffleWarning")
[13:23:24.690]                     }
[13:23:24.690]                     else if (inherits(cond, "condition")) {
[13:23:24.690]                       if (!is.null(pattern)) {
[13:23:24.690]                         computeRestarts <- base::computeRestarts
[13:23:24.690]                         grepl <- base::grepl
[13:23:24.690]                         restarts <- computeRestarts(cond)
[13:23:24.690]                         for (restart in restarts) {
[13:23:24.690]                           name <- restart$name
[13:23:24.690]                           if (is.null(name)) 
[13:23:24.690]                             next
[13:23:24.690]                           if (!grepl(pattern, name)) 
[13:23:24.690]                             next
[13:23:24.690]                           invokeRestart(restart)
[13:23:24.690]                           muffled <- TRUE
[13:23:24.690]                           break
[13:23:24.690]                         }
[13:23:24.690]                       }
[13:23:24.690]                     }
[13:23:24.690]                     invisible(muffled)
[13:23:24.690]                   }
[13:23:24.690]                   muffleCondition(cond)
[13:23:24.690]                 })
[13:23:24.690]             }))
[13:23:24.690]             future::FutureResult(value = ...future.value$value, 
[13:23:24.690]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:23:24.690]                   ...future.rng), globalenv = if (FALSE) 
[13:23:24.690]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:23:24.690]                     ...future.globalenv.names))
[13:23:24.690]                 else NULL, started = ...future.startTime, version = "1.8")
[13:23:24.690]         }, condition = base::local({
[13:23:24.690]             c <- base::c
[13:23:24.690]             inherits <- base::inherits
[13:23:24.690]             invokeRestart <- base::invokeRestart
[13:23:24.690]             length <- base::length
[13:23:24.690]             list <- base::list
[13:23:24.690]             seq.int <- base::seq.int
[13:23:24.690]             signalCondition <- base::signalCondition
[13:23:24.690]             sys.calls <- base::sys.calls
[13:23:24.690]             `[[` <- base::`[[`
[13:23:24.690]             `+` <- base::`+`
[13:23:24.690]             `<<-` <- base::`<<-`
[13:23:24.690]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:23:24.690]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:23:24.690]                   3L)]
[13:23:24.690]             }
[13:23:24.690]             function(cond) {
[13:23:24.690]                 is_error <- inherits(cond, "error")
[13:23:24.690]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:23:24.690]                   NULL)
[13:23:24.690]                 if (is_error) {
[13:23:24.690]                   sessionInformation <- function() {
[13:23:24.690]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:23:24.690]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:23:24.690]                       search = base::search(), system = base::Sys.info())
[13:23:24.690]                   }
[13:23:24.690]                   ...future.conditions[[length(...future.conditions) + 
[13:23:24.690]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:23:24.690]                     cond$call), session = sessionInformation(), 
[13:23:24.690]                     timestamp = base::Sys.time(), signaled = 0L)
[13:23:24.690]                   signalCondition(cond)
[13:23:24.690]                 }
[13:23:24.690]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:23:24.690]                 "immediateCondition"))) {
[13:23:24.690]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:23:24.690]                   ...future.conditions[[length(...future.conditions) + 
[13:23:24.690]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:23:24.690]                   if (TRUE && !signal) {
[13:23:24.690]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:23:24.690]                     {
[13:23:24.690]                       inherits <- base::inherits
[13:23:24.690]                       invokeRestart <- base::invokeRestart
[13:23:24.690]                       is.null <- base::is.null
[13:23:24.690]                       muffled <- FALSE
[13:23:24.690]                       if (inherits(cond, "message")) {
[13:23:24.690]                         muffled <- grepl(pattern, "muffleMessage")
[13:23:24.690]                         if (muffled) 
[13:23:24.690]                           invokeRestart("muffleMessage")
[13:23:24.690]                       }
[13:23:24.690]                       else if (inherits(cond, "warning")) {
[13:23:24.690]                         muffled <- grepl(pattern, "muffleWarning")
[13:23:24.690]                         if (muffled) 
[13:23:24.690]                           invokeRestart("muffleWarning")
[13:23:24.690]                       }
[13:23:24.690]                       else if (inherits(cond, "condition")) {
[13:23:24.690]                         if (!is.null(pattern)) {
[13:23:24.690]                           computeRestarts <- base::computeRestarts
[13:23:24.690]                           grepl <- base::grepl
[13:23:24.690]                           restarts <- computeRestarts(cond)
[13:23:24.690]                           for (restart in restarts) {
[13:23:24.690]                             name <- restart$name
[13:23:24.690]                             if (is.null(name)) 
[13:23:24.690]                               next
[13:23:24.690]                             if (!grepl(pattern, name)) 
[13:23:24.690]                               next
[13:23:24.690]                             invokeRestart(restart)
[13:23:24.690]                             muffled <- TRUE
[13:23:24.690]                             break
[13:23:24.690]                           }
[13:23:24.690]                         }
[13:23:24.690]                       }
[13:23:24.690]                       invisible(muffled)
[13:23:24.690]                     }
[13:23:24.690]                     muffleCondition(cond, pattern = "^muffle")
[13:23:24.690]                   }
[13:23:24.690]                 }
[13:23:24.690]                 else {
[13:23:24.690]                   if (TRUE) {
[13:23:24.690]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:23:24.690]                     {
[13:23:24.690]                       inherits <- base::inherits
[13:23:24.690]                       invokeRestart <- base::invokeRestart
[13:23:24.690]                       is.null <- base::is.null
[13:23:24.690]                       muffled <- FALSE
[13:23:24.690]                       if (inherits(cond, "message")) {
[13:23:24.690]                         muffled <- grepl(pattern, "muffleMessage")
[13:23:24.690]                         if (muffled) 
[13:23:24.690]                           invokeRestart("muffleMessage")
[13:23:24.690]                       }
[13:23:24.690]                       else if (inherits(cond, "warning")) {
[13:23:24.690]                         muffled <- grepl(pattern, "muffleWarning")
[13:23:24.690]                         if (muffled) 
[13:23:24.690]                           invokeRestart("muffleWarning")
[13:23:24.690]                       }
[13:23:24.690]                       else if (inherits(cond, "condition")) {
[13:23:24.690]                         if (!is.null(pattern)) {
[13:23:24.690]                           computeRestarts <- base::computeRestarts
[13:23:24.690]                           grepl <- base::grepl
[13:23:24.690]                           restarts <- computeRestarts(cond)
[13:23:24.690]                           for (restart in restarts) {
[13:23:24.690]                             name <- restart$name
[13:23:24.690]                             if (is.null(name)) 
[13:23:24.690]                               next
[13:23:24.690]                             if (!grepl(pattern, name)) 
[13:23:24.690]                               next
[13:23:24.690]                             invokeRestart(restart)
[13:23:24.690]                             muffled <- TRUE
[13:23:24.690]                             break
[13:23:24.690]                           }
[13:23:24.690]                         }
[13:23:24.690]                       }
[13:23:24.690]                       invisible(muffled)
[13:23:24.690]                     }
[13:23:24.690]                     muffleCondition(cond, pattern = "^muffle")
[13:23:24.690]                   }
[13:23:24.690]                 }
[13:23:24.690]             }
[13:23:24.690]         }))
[13:23:24.690]     }, error = function(ex) {
[13:23:24.690]         base::structure(base::list(value = NULL, visible = NULL, 
[13:23:24.690]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:23:24.690]                 ...future.rng), started = ...future.startTime, 
[13:23:24.690]             finished = Sys.time(), session_uuid = NA_character_, 
[13:23:24.690]             version = "1.8"), class = "FutureResult")
[13:23:24.690]     }, finally = {
[13:23:24.690]         if (!identical(...future.workdir, getwd())) 
[13:23:24.690]             setwd(...future.workdir)
[13:23:24.690]         {
[13:23:24.690]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:23:24.690]                 ...future.oldOptions$nwarnings <- NULL
[13:23:24.690]             }
[13:23:24.690]             base::options(...future.oldOptions)
[13:23:24.690]             if (.Platform$OS.type == "windows") {
[13:23:24.690]                 old_names <- names(...future.oldEnvVars)
[13:23:24.690]                 envs <- base::Sys.getenv()
[13:23:24.690]                 names <- names(envs)
[13:23:24.690]                 common <- intersect(names, old_names)
[13:23:24.690]                 added <- setdiff(names, old_names)
[13:23:24.690]                 removed <- setdiff(old_names, names)
[13:23:24.690]                 changed <- common[...future.oldEnvVars[common] != 
[13:23:24.690]                   envs[common]]
[13:23:24.690]                 NAMES <- toupper(changed)
[13:23:24.690]                 args <- list()
[13:23:24.690]                 for (kk in seq_along(NAMES)) {
[13:23:24.690]                   name <- changed[[kk]]
[13:23:24.690]                   NAME <- NAMES[[kk]]
[13:23:24.690]                   if (name != NAME && is.element(NAME, old_names)) 
[13:23:24.690]                     next
[13:23:24.690]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:23:24.690]                 }
[13:23:24.690]                 NAMES <- toupper(added)
[13:23:24.690]                 for (kk in seq_along(NAMES)) {
[13:23:24.690]                   name <- added[[kk]]
[13:23:24.690]                   NAME <- NAMES[[kk]]
[13:23:24.690]                   if (name != NAME && is.element(NAME, old_names)) 
[13:23:24.690]                     next
[13:23:24.690]                   args[[name]] <- ""
[13:23:24.690]                 }
[13:23:24.690]                 NAMES <- toupper(removed)
[13:23:24.690]                 for (kk in seq_along(NAMES)) {
[13:23:24.690]                   name <- removed[[kk]]
[13:23:24.690]                   NAME <- NAMES[[kk]]
[13:23:24.690]                   if (name != NAME && is.element(NAME, old_names)) 
[13:23:24.690]                     next
[13:23:24.690]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:23:24.690]                 }
[13:23:24.690]                 if (length(args) > 0) 
[13:23:24.690]                   base::do.call(base::Sys.setenv, args = args)
[13:23:24.690]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:23:24.690]             }
[13:23:24.690]             else {
[13:23:24.690]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:23:24.690]             }
[13:23:24.690]             {
[13:23:24.690]                 if (base::length(...future.futureOptionsAdded) > 
[13:23:24.690]                   0L) {
[13:23:24.690]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:23:24.690]                   base::names(opts) <- ...future.futureOptionsAdded
[13:23:24.690]                   base::options(opts)
[13:23:24.690]                 }
[13:23:24.690]                 {
[13:23:24.690]                   {
[13:23:24.690]                     base::options(mc.cores = ...future.mc.cores.old)
[13:23:24.690]                     NULL
[13:23:24.690]                   }
[13:23:24.690]                   options(future.plan = NULL)
[13:23:24.690]                   if (is.na(NA_character_)) 
[13:23:24.690]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:23:24.690]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:23:24.690]                   future::plan(list(function (..., workers = 2L, 
[13:23:24.690]                     envir = parent.frame()) 
[13:23:24.690]                   strategy(..., workers = workers, envir = envir)), 
[13:23:24.690]                     .cleanup = FALSE, .init = FALSE)
[13:23:24.690]                 }
[13:23:24.690]             }
[13:23:24.690]         }
[13:23:24.690]     })
[13:23:24.690]     if (TRUE) {
[13:23:24.690]         base::sink(type = "output", split = FALSE)
[13:23:24.690]         if (TRUE) {
[13:23:24.690]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:23:24.690]         }
[13:23:24.690]         else {
[13:23:24.690]             ...future.result["stdout"] <- base::list(NULL)
[13:23:24.690]         }
[13:23:24.690]         base::close(...future.stdout)
[13:23:24.690]         ...future.stdout <- NULL
[13:23:24.690]     }
[13:23:24.690]     ...future.result$conditions <- ...future.conditions
[13:23:24.690]     ...future.result$finished <- base::Sys.time()
[13:23:24.690]     ...future.result
[13:23:24.690] }
[13:23:24.745] MultisessionFuture started
[13:23:24.745] - Launch lazy future ... done
[13:23:24.746] run() for ‘MultisessionFuture’ ... done
> 
> ## Resolve future #2 (frees up background process #2)
> message(sprintf("b = %s\n", sQuote(b)))
[13:23:24.746] result() for ClusterFuture ...
[13:23:24.746] receiveMessageFromWorker() for ClusterFuture ...
[13:23:24.746] - Validating connection of MultisessionFuture
[13:23:24.780] - received message: FutureResult
[13:23:24.781] - Received FutureResult
[13:23:24.784] - Erased future from FutureRegistry
[13:23:24.784] result() for ClusterFuture ...
[13:23:24.784] - result already collected: FutureResult
[13:23:24.784] result() for ClusterFuture ... done
[13:23:24.784] receiveMessageFromWorker() for ClusterFuture ... done
[13:23:24.784] result() for ClusterFuture ... done
[13:23:24.785] result() for ClusterFuture ...
[13:23:24.785] - result already collected: FutureResult
[13:23:24.785] result() for ClusterFuture ... done
b = ‘a’

> 
> ## Create future #3 (consumes background process #2)
> ## THIS IS THE TRICKY PART:
> ## Two globals are identified `env` and `b` and both are resolved.
> ## However, object `env[[b]]` (here element `a` of environment `env`)
> ## is not touched and therefore not resolved (since it is a future)
> ## unless environment `env` is resolved recursively. (Issue #49)
> y %<-% { env[[b]] }
Warning: R option ‘future.globals.resolve’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘TRUE’
[13:23:24.785] getGlobalsAndPackages() ...
[13:23:24.785] Searching for globals...
[13:23:24.789] - globals found: [4] ‘{’, ‘[[’, ‘env’, ‘b’
[13:23:24.789] Searching for globals ... DONE
[13:23:24.790] Resolving globals: TRUE
[13:23:24.790] Resolving any globals that are futures ...
[13:23:24.790] - globals: [4] ‘{’, ‘[[’, ‘env’, ‘b’
[13:23:24.790] Resolving any globals that are futures ... DONE
[13:23:24.790] Resolving futures part of globals (recursively) ...
[13:23:24.791] resolve() on list ...
[13:23:24.791]  recursive: 99
[13:23:24.791]  length: 2
[13:23:24.792]  elements: ‘env’, ‘b’
[13:23:24.792] resolve() on environment ...
[13:23:24.792]  recursive: 98
[13:23:24.793]  elements: [1] ‘.future_a’, ‘a’
[13:23:24.793] receiveMessageFromWorker() for ClusterFuture ...
[13:23:24.793] - Validating connection of MultisessionFuture
[13:23:24.794] - received message: FutureResult
[13:23:24.794] - Received FutureResult
[13:23:24.794] - Erased future from FutureRegistry
[13:23:24.794] result() for ClusterFuture ...
[13:23:24.794] - result already collected: FutureResult
[13:23:24.794] result() for ClusterFuture ... done
[13:23:24.794] receiveMessageFromWorker() for ClusterFuture ... done
[13:23:24.794] Future #1
[13:23:24.794] result() for ClusterFuture ...
[13:23:24.795] - result already collected: FutureResult
[13:23:24.795] result() for ClusterFuture ... done
[13:23:24.795] result() for ClusterFuture ...
[13:23:24.795] - result already collected: FutureResult
[13:23:24.795] result() for ClusterFuture ... done
[13:23:24.795] A MultisessionFuture was resolved
[13:23:24.795]  length: 0 (resolved future 1)
[13:23:24.795] resolve() on environment ... DONE
[13:23:24.795]  length: 1 (resolved future 1)
[13:23:24.796]  length: 0 (resolved future 2)
[13:23:24.796] resolve() on list ... DONE
[13:23:24.796] - globals: [2] ‘env’, ‘b’
[13:23:24.796] Resolving futures part of globals (recursively) ... DONE
[13:23:24.797] The total size of the 2 globals is 4.29 KiB (4392 bytes)
[13:23:24.797] The total size of the 2 globals exported for future expression (‘{; env[[b]]; }’) is 4.29 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘env’ (4.18 KiB of class ‘environment’) and ‘b’ (112 bytes of class ‘character’)
[13:23:24.797] - globals: [2] ‘env’, ‘b’
[13:23:24.798] 
[13:23:24.798] getGlobalsAndPackages() ... DONE
[13:23:24.798] run() for ‘Future’ ...
[13:23:24.798] - state: ‘created’
[13:23:24.798] - Future backend: ‘FutureStrategy’, ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[13:23:24.810] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:23:24.810] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[13:23:24.810]   - Field: ‘node’
[13:23:24.810]   - Field: ‘label’
[13:23:24.810]   - Field: ‘local’
[13:23:24.811]   - Field: ‘owner’
[13:23:24.811]   - Field: ‘envir’
[13:23:24.811]   - Field: ‘workers’
[13:23:24.811]   - Field: ‘packages’
[13:23:24.811]   - Field: ‘gc’
[13:23:24.811]   - Field: ‘conditions’
[13:23:24.811]   - Field: ‘persistent’
[13:23:24.811]   - Field: ‘expr’
[13:23:24.811]   - Field: ‘uuid’
[13:23:24.811]   - Field: ‘seed’
[13:23:24.811]   - Field: ‘version’
[13:23:24.812]   - Field: ‘result’
[13:23:24.812]   - Field: ‘asynchronous’
[13:23:24.812]   - Field: ‘calls’
[13:23:24.812]   - Field: ‘globals’
[13:23:24.812]   - Field: ‘stdout’
[13:23:24.812]   - Field: ‘earlySignal’
[13:23:24.812]   - Field: ‘lazy’
[13:23:24.812]   - Field: ‘state’
[13:23:24.812] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[13:23:24.812] - Launch lazy future ...
[13:23:24.813] Packages needed by the future expression (n = 0): <none>
[13:23:24.813] Packages needed by future strategies (n = 0): <none>
[13:23:24.813] {
[13:23:24.813]     {
[13:23:24.813]         {
[13:23:24.813]             ...future.startTime <- base::Sys.time()
[13:23:24.813]             {
[13:23:24.813]                 {
[13:23:24.813]                   {
[13:23:24.813]                     {
[13:23:24.813]                       base::local({
[13:23:24.813]                         has_future <- base::requireNamespace("future", 
[13:23:24.813]                           quietly = TRUE)
[13:23:24.813]                         if (has_future) {
[13:23:24.813]                           ns <- base::getNamespace("future")
[13:23:24.813]                           version <- ns[[".package"]][["version"]]
[13:23:24.813]                           if (is.null(version)) 
[13:23:24.813]                             version <- utils::packageVersion("future")
[13:23:24.813]                         }
[13:23:24.813]                         else {
[13:23:24.813]                           version <- NULL
[13:23:24.813]                         }
[13:23:24.813]                         if (!has_future || version < "1.8.0") {
[13:23:24.813]                           info <- base::c(r_version = base::gsub("R version ", 
[13:23:24.813]                             "", base::R.version$version.string), 
[13:23:24.813]                             platform = base::sprintf("%s (%s-bit)", 
[13:23:24.813]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:23:24.813]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:23:24.813]                               "release", "version")], collapse = " "), 
[13:23:24.813]                             hostname = base::Sys.info()[["nodename"]])
[13:23:24.813]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:23:24.813]                             info)
[13:23:24.813]                           info <- base::paste(info, collapse = "; ")
[13:23:24.813]                           if (!has_future) {
[13:23:24.813]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:23:24.813]                               info)
[13:23:24.813]                           }
[13:23:24.813]                           else {
[13:23:24.813]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:23:24.813]                               info, version)
[13:23:24.813]                           }
[13:23:24.813]                           base::stop(msg)
[13:23:24.813]                         }
[13:23:24.813]                       })
[13:23:24.813]                     }
[13:23:24.813]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[13:23:24.813]                     base::options(mc.cores = 1L)
[13:23:24.813]                   }
[13:23:24.813]                   options(future.plan = NULL)
[13:23:24.813]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:23:24.813]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:23:24.813]                 }
[13:23:24.813]                 ...future.workdir <- getwd()
[13:23:24.813]             }
[13:23:24.813]             ...future.oldOptions <- base::as.list(base::.Options)
[13:23:24.813]             ...future.oldEnvVars <- base::Sys.getenv()
[13:23:24.813]         }
[13:23:24.813]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:23:24.813]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:23:24.813]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:23:24.813]             future.globals.resolve = TRUE, future.resolve.recursive = NULL, 
[13:23:24.813]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:23:24.813]             future.stdout.windows.reencode = NULL, width = 80L)
[13:23:24.813]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:23:24.813]             base::names(...future.oldOptions))
[13:23:24.813]     }
[13:23:24.813]     if (FALSE) {
[13:23:24.813]     }
[13:23:24.813]     else {
[13:23:24.813]         if (TRUE) {
[13:23:24.813]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:23:24.813]                 open = "w")
[13:23:24.813]         }
[13:23:24.813]         else {
[13:23:24.813]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:23:24.813]                 windows = "NUL", "/dev/null"), open = "w")
[13:23:24.813]         }
[13:23:24.813]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:23:24.813]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:23:24.813]             base::sink(type = "output", split = FALSE)
[13:23:24.813]             base::close(...future.stdout)
[13:23:24.813]         }, add = TRUE)
[13:23:24.813]     }
[13:23:24.813]     ...future.frame <- base::sys.nframe()
[13:23:24.813]     ...future.conditions <- base::list()
[13:23:24.813]     ...future.rng <- base::globalenv()$.Random.seed
[13:23:24.813]     if (FALSE) {
[13:23:24.813]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:23:24.813]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:23:24.813]     }
[13:23:24.813]     ...future.result <- base::tryCatch({
[13:23:24.813]         base::withCallingHandlers({
[13:23:24.813]             ...future.value <- base::withVisible(base::local({
[13:23:24.813]                 ...future.makeSendCondition <- base::local({
[13:23:24.813]                   sendCondition <- NULL
[13:23:24.813]                   function(frame = 1L) {
[13:23:24.813]                     if (is.function(sendCondition)) 
[13:23:24.813]                       return(sendCondition)
[13:23:24.813]                     ns <- getNamespace("parallel")
[13:23:24.813]                     if (exists("sendData", mode = "function", 
[13:23:24.813]                       envir = ns)) {
[13:23:24.813]                       parallel_sendData <- get("sendData", mode = "function", 
[13:23:24.813]                         envir = ns)
[13:23:24.813]                       envir <- sys.frame(frame)
[13:23:24.813]                       master <- NULL
[13:23:24.813]                       while (!identical(envir, .GlobalEnv) && 
[13:23:24.813]                         !identical(envir, emptyenv())) {
[13:23:24.813]                         if (exists("master", mode = "list", envir = envir, 
[13:23:24.813]                           inherits = FALSE)) {
[13:23:24.813]                           master <- get("master", mode = "list", 
[13:23:24.813]                             envir = envir, inherits = FALSE)
[13:23:24.813]                           if (inherits(master, c("SOCKnode", 
[13:23:24.813]                             "SOCK0node"))) {
[13:23:24.813]                             sendCondition <<- function(cond) {
[13:23:24.813]                               data <- list(type = "VALUE", value = cond, 
[13:23:24.813]                                 success = TRUE)
[13:23:24.813]                               parallel_sendData(master, data)
[13:23:24.813]                             }
[13:23:24.813]                             return(sendCondition)
[13:23:24.813]                           }
[13:23:24.813]                         }
[13:23:24.813]                         frame <- frame + 1L
[13:23:24.813]                         envir <- sys.frame(frame)
[13:23:24.813]                       }
[13:23:24.813]                     }
[13:23:24.813]                     sendCondition <<- function(cond) NULL
[13:23:24.813]                   }
[13:23:24.813]                 })
[13:23:24.813]                 withCallingHandlers({
[13:23:24.813]                   {
[13:23:24.813]                     env[[b]]
[13:23:24.813]                   }
[13:23:24.813]                 }, immediateCondition = function(cond) {
[13:23:24.813]                   sendCondition <- ...future.makeSendCondition()
[13:23:24.813]                   sendCondition(cond)
[13:23:24.813]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:23:24.813]                   {
[13:23:24.813]                     inherits <- base::inherits
[13:23:24.813]                     invokeRestart <- base::invokeRestart
[13:23:24.813]                     is.null <- base::is.null
[13:23:24.813]                     muffled <- FALSE
[13:23:24.813]                     if (inherits(cond, "message")) {
[13:23:24.813]                       muffled <- grepl(pattern, "muffleMessage")
[13:23:24.813]                       if (muffled) 
[13:23:24.813]                         invokeRestart("muffleMessage")
[13:23:24.813]                     }
[13:23:24.813]                     else if (inherits(cond, "warning")) {
[13:23:24.813]                       muffled <- grepl(pattern, "muffleWarning")
[13:23:24.813]                       if (muffled) 
[13:23:24.813]                         invokeRestart("muffleWarning")
[13:23:24.813]                     }
[13:23:24.813]                     else if (inherits(cond, "condition")) {
[13:23:24.813]                       if (!is.null(pattern)) {
[13:23:24.813]                         computeRestarts <- base::computeRestarts
[13:23:24.813]                         grepl <- base::grepl
[13:23:24.813]                         restarts <- computeRestarts(cond)
[13:23:24.813]                         for (restart in restarts) {
[13:23:24.813]                           name <- restart$name
[13:23:24.813]                           if (is.null(name)) 
[13:23:24.813]                             next
[13:23:24.813]                           if (!grepl(pattern, name)) 
[13:23:24.813]                             next
[13:23:24.813]                           invokeRestart(restart)
[13:23:24.813]                           muffled <- TRUE
[13:23:24.813]                           break
[13:23:24.813]                         }
[13:23:24.813]                       }
[13:23:24.813]                     }
[13:23:24.813]                     invisible(muffled)
[13:23:24.813]                   }
[13:23:24.813]                   muffleCondition(cond)
[13:23:24.813]                 })
[13:23:24.813]             }))
[13:23:24.813]             future::FutureResult(value = ...future.value$value, 
[13:23:24.813]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:23:24.813]                   ...future.rng), globalenv = if (FALSE) 
[13:23:24.813]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:23:24.813]                     ...future.globalenv.names))
[13:23:24.813]                 else NULL, started = ...future.startTime, version = "1.8")
[13:23:24.813]         }, condition = base::local({
[13:23:24.813]             c <- base::c
[13:23:24.813]             inherits <- base::inherits
[13:23:24.813]             invokeRestart <- base::invokeRestart
[13:23:24.813]             length <- base::length
[13:23:24.813]             list <- base::list
[13:23:24.813]             seq.int <- base::seq.int
[13:23:24.813]             signalCondition <- base::signalCondition
[13:23:24.813]             sys.calls <- base::sys.calls
[13:23:24.813]             `[[` <- base::`[[`
[13:23:24.813]             `+` <- base::`+`
[13:23:24.813]             `<<-` <- base::`<<-`
[13:23:24.813]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:23:24.813]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:23:24.813]                   3L)]
[13:23:24.813]             }
[13:23:24.813]             function(cond) {
[13:23:24.813]                 is_error <- inherits(cond, "error")
[13:23:24.813]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:23:24.813]                   NULL)
[13:23:24.813]                 if (is_error) {
[13:23:24.813]                   sessionInformation <- function() {
[13:23:24.813]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:23:24.813]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:23:24.813]                       search = base::search(), system = base::Sys.info())
[13:23:24.813]                   }
[13:23:24.813]                   ...future.conditions[[length(...future.conditions) + 
[13:23:24.813]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:23:24.813]                     cond$call), session = sessionInformation(), 
[13:23:24.813]                     timestamp = base::Sys.time(), signaled = 0L)
[13:23:24.813]                   signalCondition(cond)
[13:23:24.813]                 }
[13:23:24.813]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:23:24.813]                 "immediateCondition"))) {
[13:23:24.813]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:23:24.813]                   ...future.conditions[[length(...future.conditions) + 
[13:23:24.813]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:23:24.813]                   if (TRUE && !signal) {
[13:23:24.813]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:23:24.813]                     {
[13:23:24.813]                       inherits <- base::inherits
[13:23:24.813]                       invokeRestart <- base::invokeRestart
[13:23:24.813]                       is.null <- base::is.null
[13:23:24.813]                       muffled <- FALSE
[13:23:24.813]                       if (inherits(cond, "message")) {
[13:23:24.813]                         muffled <- grepl(pattern, "muffleMessage")
[13:23:24.813]                         if (muffled) 
[13:23:24.813]                           invokeRestart("muffleMessage")
[13:23:24.813]                       }
[13:23:24.813]                       else if (inherits(cond, "warning")) {
[13:23:24.813]                         muffled <- grepl(pattern, "muffleWarning")
[13:23:24.813]                         if (muffled) 
[13:23:24.813]                           invokeRestart("muffleWarning")
[13:23:24.813]                       }
[13:23:24.813]                       else if (inherits(cond, "condition")) {
[13:23:24.813]                         if (!is.null(pattern)) {
[13:23:24.813]                           computeRestarts <- base::computeRestarts
[13:23:24.813]                           grepl <- base::grepl
[13:23:24.813]                           restarts <- computeRestarts(cond)
[13:23:24.813]                           for (restart in restarts) {
[13:23:24.813]                             name <- restart$name
[13:23:24.813]                             if (is.null(name)) 
[13:23:24.813]                               next
[13:23:24.813]                             if (!grepl(pattern, name)) 
[13:23:24.813]                               next
[13:23:24.813]                             invokeRestart(restart)
[13:23:24.813]                             muffled <- TRUE
[13:23:24.813]                             break
[13:23:24.813]                           }
[13:23:24.813]                         }
[13:23:24.813]                       }
[13:23:24.813]                       invisible(muffled)
[13:23:24.813]                     }
[13:23:24.813]                     muffleCondition(cond, pattern = "^muffle")
[13:23:24.813]                   }
[13:23:24.813]                 }
[13:23:24.813]                 else {
[13:23:24.813]                   if (TRUE) {
[13:23:24.813]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:23:24.813]                     {
[13:23:24.813]                       inherits <- base::inherits
[13:23:24.813]                       invokeRestart <- base::invokeRestart
[13:23:24.813]                       is.null <- base::is.null
[13:23:24.813]                       muffled <- FALSE
[13:23:24.813]                       if (inherits(cond, "message")) {
[13:23:24.813]                         muffled <- grepl(pattern, "muffleMessage")
[13:23:24.813]                         if (muffled) 
[13:23:24.813]                           invokeRestart("muffleMessage")
[13:23:24.813]                       }
[13:23:24.813]                       else if (inherits(cond, "warning")) {
[13:23:24.813]                         muffled <- grepl(pattern, "muffleWarning")
[13:23:24.813]                         if (muffled) 
[13:23:24.813]                           invokeRestart("muffleWarning")
[13:23:24.813]                       }
[13:23:24.813]                       else if (inherits(cond, "condition")) {
[13:23:24.813]                         if (!is.null(pattern)) {
[13:23:24.813]                           computeRestarts <- base::computeRestarts
[13:23:24.813]                           grepl <- base::grepl
[13:23:24.813]                           restarts <- computeRestarts(cond)
[13:23:24.813]                           for (restart in restarts) {
[13:23:24.813]                             name <- restart$name
[13:23:24.813]                             if (is.null(name)) 
[13:23:24.813]                               next
[13:23:24.813]                             if (!grepl(pattern, name)) 
[13:23:24.813]                               next
[13:23:24.813]                             invokeRestart(restart)
[13:23:24.813]                             muffled <- TRUE
[13:23:24.813]                             break
[13:23:24.813]                           }
[13:23:24.813]                         }
[13:23:24.813]                       }
[13:23:24.813]                       invisible(muffled)
[13:23:24.813]                     }
[13:23:24.813]                     muffleCondition(cond, pattern = "^muffle")
[13:23:24.813]                   }
[13:23:24.813]                 }
[13:23:24.813]             }
[13:23:24.813]         }))
[13:23:24.813]     }, error = function(ex) {
[13:23:24.813]         base::structure(base::list(value = NULL, visible = NULL, 
[13:23:24.813]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:23:24.813]                 ...future.rng), started = ...future.startTime, 
[13:23:24.813]             finished = Sys.time(), session_uuid = NA_character_, 
[13:23:24.813]             version = "1.8"), class = "FutureResult")
[13:23:24.813]     }, finally = {
[13:23:24.813]         if (!identical(...future.workdir, getwd())) 
[13:23:24.813]             setwd(...future.workdir)
[13:23:24.813]         {
[13:23:24.813]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:23:24.813]                 ...future.oldOptions$nwarnings <- NULL
[13:23:24.813]             }
[13:23:24.813]             base::options(...future.oldOptions)
[13:23:24.813]             if (.Platform$OS.type == "windows") {
[13:23:24.813]                 old_names <- names(...future.oldEnvVars)
[13:23:24.813]                 envs <- base::Sys.getenv()
[13:23:24.813]                 names <- names(envs)
[13:23:24.813]                 common <- intersect(names, old_names)
[13:23:24.813]                 added <- setdiff(names, old_names)
[13:23:24.813]                 removed <- setdiff(old_names, names)
[13:23:24.813]                 changed <- common[...future.oldEnvVars[common] != 
[13:23:24.813]                   envs[common]]
[13:23:24.813]                 NAMES <- toupper(changed)
[13:23:24.813]                 args <- list()
[13:23:24.813]                 for (kk in seq_along(NAMES)) {
[13:23:24.813]                   name <- changed[[kk]]
[13:23:24.813]                   NAME <- NAMES[[kk]]
[13:23:24.813]                   if (name != NAME && is.element(NAME, old_names)) 
[13:23:24.813]                     next
[13:23:24.813]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:23:24.813]                 }
[13:23:24.813]                 NAMES <- toupper(added)
[13:23:24.813]                 for (kk in seq_along(NAMES)) {
[13:23:24.813]                   name <- added[[kk]]
[13:23:24.813]                   NAME <- NAMES[[kk]]
[13:23:24.813]                   if (name != NAME && is.element(NAME, old_names)) 
[13:23:24.813]                     next
[13:23:24.813]                   args[[name]] <- ""
[13:23:24.813]                 }
[13:23:24.813]                 NAMES <- toupper(removed)
[13:23:24.813]                 for (kk in seq_along(NAMES)) {
[13:23:24.813]                   name <- removed[[kk]]
[13:23:24.813]                   NAME <- NAMES[[kk]]
[13:23:24.813]                   if (name != NAME && is.element(NAME, old_names)) 
[13:23:24.813]                     next
[13:23:24.813]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:23:24.813]                 }
[13:23:24.813]                 if (length(args) > 0) 
[13:23:24.813]                   base::do.call(base::Sys.setenv, args = args)
[13:23:24.813]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:23:24.813]             }
[13:23:24.813]             else {
[13:23:24.813]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:23:24.813]             }
[13:23:24.813]             {
[13:23:24.813]                 if (base::length(...future.futureOptionsAdded) > 
[13:23:24.813]                   0L) {
[13:23:24.813]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:23:24.813]                   base::names(opts) <- ...future.futureOptionsAdded
[13:23:24.813]                   base::options(opts)
[13:23:24.813]                 }
[13:23:24.813]                 {
[13:23:24.813]                   {
[13:23:24.813]                     base::options(mc.cores = ...future.mc.cores.old)
[13:23:24.813]                     NULL
[13:23:24.813]                   }
[13:23:24.813]                   options(future.plan = NULL)
[13:23:24.813]                   if (is.na(NA_character_)) 
[13:23:24.813]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:23:24.813]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:23:24.813]                   future::plan(list(function (..., workers = 2L, 
[13:23:24.813]                     envir = parent.frame()) 
[13:23:24.813]                   strategy(..., workers = workers, envir = envir)), 
[13:23:24.813]                     .cleanup = FALSE, .init = FALSE)
[13:23:24.813]                 }
[13:23:24.813]             }
[13:23:24.813]         }
[13:23:24.813]     })
[13:23:24.813]     if (TRUE) {
[13:23:24.813]         base::sink(type = "output", split = FALSE)
[13:23:24.813]         if (TRUE) {
[13:23:24.813]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:23:24.813]         }
[13:23:24.813]         else {
[13:23:24.813]             ...future.result["stdout"] <- base::list(NULL)
[13:23:24.813]         }
[13:23:24.813]         base::close(...future.stdout)
[13:23:24.813]         ...future.stdout <- NULL
[13:23:24.813]     }
[13:23:24.813]     ...future.result$conditions <- ...future.conditions
[13:23:24.813]     ...future.result$finished <- base::Sys.time()
[13:23:24.813]     ...future.result
[13:23:24.813] }
[13:23:24.816] Exporting 2 global objects (4.29 KiB) to cluster node #1 ...
[13:23:24.817] Exporting ‘env’ (4.18 KiB) to cluster node #1 ...
[13:23:24.827] Exporting ‘env’ (4.18 KiB) to cluster node #1 ... DONE
[13:23:24.827] Exporting ‘b’ (112 bytes) to cluster node #1 ...
[13:23:24.828] Exporting ‘b’ (112 bytes) to cluster node #1 ... DONE
[13:23:24.828] Exporting 2 global objects (4.29 KiB) to cluster node #1 ... DONE
[13:23:24.828] MultisessionFuture started
[13:23:24.829] - Launch lazy future ... done
[13:23:24.829] run() for ‘MultisessionFuture’ ... done
> 
> ## Resolve future #3
> message(sprintf("y = %s\n", y))
[13:23:24.829] result() for ClusterFuture ...
[13:23:24.829] receiveMessageFromWorker() for ClusterFuture ...
[13:23:24.829] - Validating connection of MultisessionFuture
[13:23:24.875] - received message: FutureResult
[13:23:24.875] - Received FutureResult
[13:23:24.875] - Erased future from FutureRegistry
[13:23:24.875] result() for ClusterFuture ...
[13:23:24.875] - result already collected: FutureResult
[13:23:24.875] result() for ClusterFuture ... done
[13:23:24.876] receiveMessageFromWorker() for ClusterFuture ... done
[13:23:24.876] result() for ClusterFuture ... done
[13:23:24.876] result() for ClusterFuture ...
[13:23:24.876] - result already collected: FutureResult
[13:23:24.876] result() for ClusterFuture ... done
y = 5

> 
> ## Resolve future #1 if not already done
> str(as.list(env))
[13:23:24.876] result() for ClusterFuture ...
[13:23:24.876] - result already collected: FutureResult
[13:23:24.876] result() for ClusterFuture ... done
[13:23:24.877] result() for ClusterFuture ...
[13:23:24.877] - result already collected: FutureResult
[13:23:24.877] result() for ClusterFuture ... done
List of 1
 $ a: num 5
> 
> ## Create future #4
> ## Since future #1 is resolved it will work at this point
> y %<-% { env[[b]] }
Warning: R option ‘future.globals.resolve’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘TRUE’
[13:23:24.878] getGlobalsAndPackages() ...
[13:23:24.878] Searching for globals...
[13:23:24.879] - globals found: [4] ‘{’, ‘[[’, ‘env’, ‘b’
[13:23:24.879] Searching for globals ... DONE
[13:23:24.879] Resolving globals: TRUE
[13:23:24.879] Resolving any globals that are futures ...
[13:23:24.879] - globals: [4] ‘{’, ‘[[’, ‘env’, ‘b’
[13:23:24.879] Resolving any globals that are futures ... DONE
[13:23:24.880] Resolving futures part of globals (recursively) ...
[13:23:24.880] resolve() on list ...
[13:23:24.880]  recursive: 99
[13:23:24.880]  length: 2
[13:23:24.880]  elements: ‘env’, ‘b’
[13:23:24.881] resolve() on environment ...
[13:23:24.881]  recursive: 98
[13:23:24.881]  elements: [1] ‘a’
[13:23:24.881]  length: 0 (resolved future 1)
[13:23:24.881] resolve() on environment ... DONE
[13:23:24.881]  length: 1 (resolved future 1)
[13:23:24.881]  length: 0 (resolved future 2)
[13:23:24.882] resolve() on list ... DONE
[13:23:24.882] - globals: [2] ‘env’, ‘b’
[13:23:24.882] Resolving futures part of globals (recursively) ... DONE
[13:23:24.882] The total size of the 2 globals is 168 bytes (168 bytes)
[13:23:24.882] The total size of the 2 globals exported for future expression (‘{; env[[b]]; }’) is 168 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘b’ (112 bytes of class ‘character’) and ‘env’ (56 bytes of class ‘environment’)
[13:23:24.882] - globals: [2] ‘env’, ‘b’
[13:23:24.883] 
[13:23:24.883] getGlobalsAndPackages() ... DONE
[13:23:24.883] run() for ‘Future’ ...
[13:23:24.883] - state: ‘created’
[13:23:24.883] - Future backend: ‘FutureStrategy’, ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[13:23:24.895] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:23:24.895] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[13:23:24.895]   - Field: ‘node’
[13:23:24.895]   - Field: ‘label’
[13:23:24.895]   - Field: ‘local’
[13:23:24.895]   - Field: ‘owner’
[13:23:24.896]   - Field: ‘envir’
[13:23:24.896]   - Field: ‘workers’
[13:23:24.896]   - Field: ‘packages’
[13:23:24.896]   - Field: ‘gc’
[13:23:24.896]   - Field: ‘conditions’
[13:23:24.896]   - Field: ‘persistent’
[13:23:24.896]   - Field: ‘expr’
[13:23:24.896]   - Field: ‘uuid’
[13:23:24.896]   - Field: ‘seed’
[13:23:24.896]   - Field: ‘version’
[13:23:24.897]   - Field: ‘result’
[13:23:24.897]   - Field: ‘asynchronous’
[13:23:24.897]   - Field: ‘calls’
[13:23:24.897]   - Field: ‘globals’
[13:23:24.897]   - Field: ‘stdout’
[13:23:24.897]   - Field: ‘earlySignal’
[13:23:24.897]   - Field: ‘lazy’
[13:23:24.897]   - Field: ‘state’
[13:23:24.897] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[13:23:24.897] - Launch lazy future ...
[13:23:24.898] Packages needed by the future expression (n = 0): <none>
[13:23:24.898] Packages needed by future strategies (n = 0): <none>
[13:23:24.898] {
[13:23:24.898]     {
[13:23:24.898]         {
[13:23:24.898]             ...future.startTime <- base::Sys.time()
[13:23:24.898]             {
[13:23:24.898]                 {
[13:23:24.898]                   {
[13:23:24.898]                     {
[13:23:24.898]                       base::local({
[13:23:24.898]                         has_future <- base::requireNamespace("future", 
[13:23:24.898]                           quietly = TRUE)
[13:23:24.898]                         if (has_future) {
[13:23:24.898]                           ns <- base::getNamespace("future")
[13:23:24.898]                           version <- ns[[".package"]][["version"]]
[13:23:24.898]                           if (is.null(version)) 
[13:23:24.898]                             version <- utils::packageVersion("future")
[13:23:24.898]                         }
[13:23:24.898]                         else {
[13:23:24.898]                           version <- NULL
[13:23:24.898]                         }
[13:23:24.898]                         if (!has_future || version < "1.8.0") {
[13:23:24.898]                           info <- base::c(r_version = base::gsub("R version ", 
[13:23:24.898]                             "", base::R.version$version.string), 
[13:23:24.898]                             platform = base::sprintf("%s (%s-bit)", 
[13:23:24.898]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:23:24.898]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:23:24.898]                               "release", "version")], collapse = " "), 
[13:23:24.898]                             hostname = base::Sys.info()[["nodename"]])
[13:23:24.898]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:23:24.898]                             info)
[13:23:24.898]                           info <- base::paste(info, collapse = "; ")
[13:23:24.898]                           if (!has_future) {
[13:23:24.898]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:23:24.898]                               info)
[13:23:24.898]                           }
[13:23:24.898]                           else {
[13:23:24.898]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:23:24.898]                               info, version)
[13:23:24.898]                           }
[13:23:24.898]                           base::stop(msg)
[13:23:24.898]                         }
[13:23:24.898]                       })
[13:23:24.898]                     }
[13:23:24.898]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[13:23:24.898]                     base::options(mc.cores = 1L)
[13:23:24.898]                   }
[13:23:24.898]                   options(future.plan = NULL)
[13:23:24.898]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:23:24.898]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:23:24.898]                 }
[13:23:24.898]                 ...future.workdir <- getwd()
[13:23:24.898]             }
[13:23:24.898]             ...future.oldOptions <- base::as.list(base::.Options)
[13:23:24.898]             ...future.oldEnvVars <- base::Sys.getenv()
[13:23:24.898]         }
[13:23:24.898]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:23:24.898]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:23:24.898]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:23:24.898]             future.globals.resolve = TRUE, future.resolve.recursive = NULL, 
[13:23:24.898]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:23:24.898]             future.stdout.windows.reencode = NULL, width = 80L)
[13:23:24.898]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:23:24.898]             base::names(...future.oldOptions))
[13:23:24.898]     }
[13:23:24.898]     if (FALSE) {
[13:23:24.898]     }
[13:23:24.898]     else {
[13:23:24.898]         if (TRUE) {
[13:23:24.898]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:23:24.898]                 open = "w")
[13:23:24.898]         }
[13:23:24.898]         else {
[13:23:24.898]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:23:24.898]                 windows = "NUL", "/dev/null"), open = "w")
[13:23:24.898]         }
[13:23:24.898]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:23:24.898]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:23:24.898]             base::sink(type = "output", split = FALSE)
[13:23:24.898]             base::close(...future.stdout)
[13:23:24.898]         }, add = TRUE)
[13:23:24.898]     }
[13:23:24.898]     ...future.frame <- base::sys.nframe()
[13:23:24.898]     ...future.conditions <- base::list()
[13:23:24.898]     ...future.rng <- base::globalenv()$.Random.seed
[13:23:24.898]     if (FALSE) {
[13:23:24.898]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:23:24.898]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:23:24.898]     }
[13:23:24.898]     ...future.result <- base::tryCatch({
[13:23:24.898]         base::withCallingHandlers({
[13:23:24.898]             ...future.value <- base::withVisible(base::local({
[13:23:24.898]                 ...future.makeSendCondition <- base::local({
[13:23:24.898]                   sendCondition <- NULL
[13:23:24.898]                   function(frame = 1L) {
[13:23:24.898]                     if (is.function(sendCondition)) 
[13:23:24.898]                       return(sendCondition)
[13:23:24.898]                     ns <- getNamespace("parallel")
[13:23:24.898]                     if (exists("sendData", mode = "function", 
[13:23:24.898]                       envir = ns)) {
[13:23:24.898]                       parallel_sendData <- get("sendData", mode = "function", 
[13:23:24.898]                         envir = ns)
[13:23:24.898]                       envir <- sys.frame(frame)
[13:23:24.898]                       master <- NULL
[13:23:24.898]                       while (!identical(envir, .GlobalEnv) && 
[13:23:24.898]                         !identical(envir, emptyenv())) {
[13:23:24.898]                         if (exists("master", mode = "list", envir = envir, 
[13:23:24.898]                           inherits = FALSE)) {
[13:23:24.898]                           master <- get("master", mode = "list", 
[13:23:24.898]                             envir = envir, inherits = FALSE)
[13:23:24.898]                           if (inherits(master, c("SOCKnode", 
[13:23:24.898]                             "SOCK0node"))) {
[13:23:24.898]                             sendCondition <<- function(cond) {
[13:23:24.898]                               data <- list(type = "VALUE", value = cond, 
[13:23:24.898]                                 success = TRUE)
[13:23:24.898]                               parallel_sendData(master, data)
[13:23:24.898]                             }
[13:23:24.898]                             return(sendCondition)
[13:23:24.898]                           }
[13:23:24.898]                         }
[13:23:24.898]                         frame <- frame + 1L
[13:23:24.898]                         envir <- sys.frame(frame)
[13:23:24.898]                       }
[13:23:24.898]                     }
[13:23:24.898]                     sendCondition <<- function(cond) NULL
[13:23:24.898]                   }
[13:23:24.898]                 })
[13:23:24.898]                 withCallingHandlers({
[13:23:24.898]                   {
[13:23:24.898]                     env[[b]]
[13:23:24.898]                   }
[13:23:24.898]                 }, immediateCondition = function(cond) {
[13:23:24.898]                   sendCondition <- ...future.makeSendCondition()
[13:23:24.898]                   sendCondition(cond)
[13:23:24.898]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:23:24.898]                   {
[13:23:24.898]                     inherits <- base::inherits
[13:23:24.898]                     invokeRestart <- base::invokeRestart
[13:23:24.898]                     is.null <- base::is.null
[13:23:24.898]                     muffled <- FALSE
[13:23:24.898]                     if (inherits(cond, "message")) {
[13:23:24.898]                       muffled <- grepl(pattern, "muffleMessage")
[13:23:24.898]                       if (muffled) 
[13:23:24.898]                         invokeRestart("muffleMessage")
[13:23:24.898]                     }
[13:23:24.898]                     else if (inherits(cond, "warning")) {
[13:23:24.898]                       muffled <- grepl(pattern, "muffleWarning")
[13:23:24.898]                       if (muffled) 
[13:23:24.898]                         invokeRestart("muffleWarning")
[13:23:24.898]                     }
[13:23:24.898]                     else if (inherits(cond, "condition")) {
[13:23:24.898]                       if (!is.null(pattern)) {
[13:23:24.898]                         computeRestarts <- base::computeRestarts
[13:23:24.898]                         grepl <- base::grepl
[13:23:24.898]                         restarts <- computeRestarts(cond)
[13:23:24.898]                         for (restart in restarts) {
[13:23:24.898]                           name <- restart$name
[13:23:24.898]                           if (is.null(name)) 
[13:23:24.898]                             next
[13:23:24.898]                           if (!grepl(pattern, name)) 
[13:23:24.898]                             next
[13:23:24.898]                           invokeRestart(restart)
[13:23:24.898]                           muffled <- TRUE
[13:23:24.898]                           break
[13:23:24.898]                         }
[13:23:24.898]                       }
[13:23:24.898]                     }
[13:23:24.898]                     invisible(muffled)
[13:23:24.898]                   }
[13:23:24.898]                   muffleCondition(cond)
[13:23:24.898]                 })
[13:23:24.898]             }))
[13:23:24.898]             future::FutureResult(value = ...future.value$value, 
[13:23:24.898]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:23:24.898]                   ...future.rng), globalenv = if (FALSE) 
[13:23:24.898]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:23:24.898]                     ...future.globalenv.names))
[13:23:24.898]                 else NULL, started = ...future.startTime, version = "1.8")
[13:23:24.898]         }, condition = base::local({
[13:23:24.898]             c <- base::c
[13:23:24.898]             inherits <- base::inherits
[13:23:24.898]             invokeRestart <- base::invokeRestart
[13:23:24.898]             length <- base::length
[13:23:24.898]             list <- base::list
[13:23:24.898]             seq.int <- base::seq.int
[13:23:24.898]             signalCondition <- base::signalCondition
[13:23:24.898]             sys.calls <- base::sys.calls
[13:23:24.898]             `[[` <- base::`[[`
[13:23:24.898]             `+` <- base::`+`
[13:23:24.898]             `<<-` <- base::`<<-`
[13:23:24.898]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:23:24.898]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:23:24.898]                   3L)]
[13:23:24.898]             }
[13:23:24.898]             function(cond) {
[13:23:24.898]                 is_error <- inherits(cond, "error")
[13:23:24.898]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:23:24.898]                   NULL)
[13:23:24.898]                 if (is_error) {
[13:23:24.898]                   sessionInformation <- function() {
[13:23:24.898]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:23:24.898]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:23:24.898]                       search = base::search(), system = base::Sys.info())
[13:23:24.898]                   }
[13:23:24.898]                   ...future.conditions[[length(...future.conditions) + 
[13:23:24.898]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:23:24.898]                     cond$call), session = sessionInformation(), 
[13:23:24.898]                     timestamp = base::Sys.time(), signaled = 0L)
[13:23:24.898]                   signalCondition(cond)
[13:23:24.898]                 }
[13:23:24.898]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:23:24.898]                 "immediateCondition"))) {
[13:23:24.898]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:23:24.898]                   ...future.conditions[[length(...future.conditions) + 
[13:23:24.898]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:23:24.898]                   if (TRUE && !signal) {
[13:23:24.898]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:23:24.898]                     {
[13:23:24.898]                       inherits <- base::inherits
[13:23:24.898]                       invokeRestart <- base::invokeRestart
[13:23:24.898]                       is.null <- base::is.null
[13:23:24.898]                       muffled <- FALSE
[13:23:24.898]                       if (inherits(cond, "message")) {
[13:23:24.898]                         muffled <- grepl(pattern, "muffleMessage")
[13:23:24.898]                         if (muffled) 
[13:23:24.898]                           invokeRestart("muffleMessage")
[13:23:24.898]                       }
[13:23:24.898]                       else if (inherits(cond, "warning")) {
[13:23:24.898]                         muffled <- grepl(pattern, "muffleWarning")
[13:23:24.898]                         if (muffled) 
[13:23:24.898]                           invokeRestart("muffleWarning")
[13:23:24.898]                       }
[13:23:24.898]                       else if (inherits(cond, "condition")) {
[13:23:24.898]                         if (!is.null(pattern)) {
[13:23:24.898]                           computeRestarts <- base::computeRestarts
[13:23:24.898]                           grepl <- base::grepl
[13:23:24.898]                           restarts <- computeRestarts(cond)
[13:23:24.898]                           for (restart in restarts) {
[13:23:24.898]                             name <- restart$name
[13:23:24.898]                             if (is.null(name)) 
[13:23:24.898]                               next
[13:23:24.898]                             if (!grepl(pattern, name)) 
[13:23:24.898]                               next
[13:23:24.898]                             invokeRestart(restart)
[13:23:24.898]                             muffled <- TRUE
[13:23:24.898]                             break
[13:23:24.898]                           }
[13:23:24.898]                         }
[13:23:24.898]                       }
[13:23:24.898]                       invisible(muffled)
[13:23:24.898]                     }
[13:23:24.898]                     muffleCondition(cond, pattern = "^muffle")
[13:23:24.898]                   }
[13:23:24.898]                 }
[13:23:24.898]                 else {
[13:23:24.898]                   if (TRUE) {
[13:23:24.898]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:23:24.898]                     {
[13:23:24.898]                       inherits <- base::inherits
[13:23:24.898]                       invokeRestart <- base::invokeRestart
[13:23:24.898]                       is.null <- base::is.null
[13:23:24.898]                       muffled <- FALSE
[13:23:24.898]                       if (inherits(cond, "message")) {
[13:23:24.898]                         muffled <- grepl(pattern, "muffleMessage")
[13:23:24.898]                         if (muffled) 
[13:23:24.898]                           invokeRestart("muffleMessage")
[13:23:24.898]                       }
[13:23:24.898]                       else if (inherits(cond, "warning")) {
[13:23:24.898]                         muffled <- grepl(pattern, "muffleWarning")
[13:23:24.898]                         if (muffled) 
[13:23:24.898]                           invokeRestart("muffleWarning")
[13:23:24.898]                       }
[13:23:24.898]                       else if (inherits(cond, "condition")) {
[13:23:24.898]                         if (!is.null(pattern)) {
[13:23:24.898]                           computeRestarts <- base::computeRestarts
[13:23:24.898]                           grepl <- base::grepl
[13:23:24.898]                           restarts <- computeRestarts(cond)
[13:23:24.898]                           for (restart in restarts) {
[13:23:24.898]                             name <- restart$name
[13:23:24.898]                             if (is.null(name)) 
[13:23:24.898]                               next
[13:23:24.898]                             if (!grepl(pattern, name)) 
[13:23:24.898]                               next
[13:23:24.898]                             invokeRestart(restart)
[13:23:24.898]                             muffled <- TRUE
[13:23:24.898]                             break
[13:23:24.898]                           }
[13:23:24.898]                         }
[13:23:24.898]                       }
[13:23:24.898]                       invisible(muffled)
[13:23:24.898]                     }
[13:23:24.898]                     muffleCondition(cond, pattern = "^muffle")
[13:23:24.898]                   }
[13:23:24.898]                 }
[13:23:24.898]             }
[13:23:24.898]         }))
[13:23:24.898]     }, error = function(ex) {
[13:23:24.898]         base::structure(base::list(value = NULL, visible = NULL, 
[13:23:24.898]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:23:24.898]                 ...future.rng), started = ...future.startTime, 
[13:23:24.898]             finished = Sys.time(), session_uuid = NA_character_, 
[13:23:24.898]             version = "1.8"), class = "FutureResult")
[13:23:24.898]     }, finally = {
[13:23:24.898]         if (!identical(...future.workdir, getwd())) 
[13:23:24.898]             setwd(...future.workdir)
[13:23:24.898]         {
[13:23:24.898]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:23:24.898]                 ...future.oldOptions$nwarnings <- NULL
[13:23:24.898]             }
[13:23:24.898]             base::options(...future.oldOptions)
[13:23:24.898]             if (.Platform$OS.type == "windows") {
[13:23:24.898]                 old_names <- names(...future.oldEnvVars)
[13:23:24.898]                 envs <- base::Sys.getenv()
[13:23:24.898]                 names <- names(envs)
[13:23:24.898]                 common <- intersect(names, old_names)
[13:23:24.898]                 added <- setdiff(names, old_names)
[13:23:24.898]                 removed <- setdiff(old_names, names)
[13:23:24.898]                 changed <- common[...future.oldEnvVars[common] != 
[13:23:24.898]                   envs[common]]
[13:23:24.898]                 NAMES <- toupper(changed)
[13:23:24.898]                 args <- list()
[13:23:24.898]                 for (kk in seq_along(NAMES)) {
[13:23:24.898]                   name <- changed[[kk]]
[13:23:24.898]                   NAME <- NAMES[[kk]]
[13:23:24.898]                   if (name != NAME && is.element(NAME, old_names)) 
[13:23:24.898]                     next
[13:23:24.898]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:23:24.898]                 }
[13:23:24.898]                 NAMES <- toupper(added)
[13:23:24.898]                 for (kk in seq_along(NAMES)) {
[13:23:24.898]                   name <- added[[kk]]
[13:23:24.898]                   NAME <- NAMES[[kk]]
[13:23:24.898]                   if (name != NAME && is.element(NAME, old_names)) 
[13:23:24.898]                     next
[13:23:24.898]                   args[[name]] <- ""
[13:23:24.898]                 }
[13:23:24.898]                 NAMES <- toupper(removed)
[13:23:24.898]                 for (kk in seq_along(NAMES)) {
[13:23:24.898]                   name <- removed[[kk]]
[13:23:24.898]                   NAME <- NAMES[[kk]]
[13:23:24.898]                   if (name != NAME && is.element(NAME, old_names)) 
[13:23:24.898]                     next
[13:23:24.898]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:23:24.898]                 }
[13:23:24.898]                 if (length(args) > 0) 
[13:23:24.898]                   base::do.call(base::Sys.setenv, args = args)
[13:23:24.898]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:23:24.898]             }
[13:23:24.898]             else {
[13:23:24.898]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:23:24.898]             }
[13:23:24.898]             {
[13:23:24.898]                 if (base::length(...future.futureOptionsAdded) > 
[13:23:24.898]                   0L) {
[13:23:24.898]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:23:24.898]                   base::names(opts) <- ...future.futureOptionsAdded
[13:23:24.898]                   base::options(opts)
[13:23:24.898]                 }
[13:23:24.898]                 {
[13:23:24.898]                   {
[13:23:24.898]                     base::options(mc.cores = ...future.mc.cores.old)
[13:23:24.898]                     NULL
[13:23:24.898]                   }
[13:23:24.898]                   options(future.plan = NULL)
[13:23:24.898]                   if (is.na(NA_character_)) 
[13:23:24.898]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:23:24.898]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:23:24.898]                   future::plan(list(function (..., workers = 2L, 
[13:23:24.898]                     envir = parent.frame()) 
[13:23:24.898]                   strategy(..., workers = workers, envir = envir)), 
[13:23:24.898]                     .cleanup = FALSE, .init = FALSE)
[13:23:24.898]                 }
[13:23:24.898]             }
[13:23:24.898]         }
[13:23:24.898]     })
[13:23:24.898]     if (TRUE) {
[13:23:24.898]         base::sink(type = "output", split = FALSE)
[13:23:24.898]         if (TRUE) {
[13:23:24.898]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:23:24.898]         }
[13:23:24.898]         else {
[13:23:24.898]             ...future.result["stdout"] <- base::list(NULL)
[13:23:24.898]         }
[13:23:24.898]         base::close(...future.stdout)
[13:23:24.898]         ...future.stdout <- NULL
[13:23:24.898]     }
[13:23:24.898]     ...future.result$conditions <- ...future.conditions
[13:23:24.898]     ...future.result$finished <- base::Sys.time()
[13:23:24.898]     ...future.result
[13:23:24.898] }
[13:23:24.901] Exporting 2 global objects (168 bytes) to cluster node #1 ...
[13:23:24.901] Exporting ‘env’ (56 bytes) to cluster node #1 ...
[13:23:24.902] Exporting ‘env’ (56 bytes) to cluster node #1 ... DONE
[13:23:24.902] Exporting ‘b’ (112 bytes) to cluster node #1 ...
[13:23:24.902] Exporting ‘b’ (112 bytes) to cluster node #1 ... DONE
[13:23:24.902] Exporting 2 global objects (168 bytes) to cluster node #1 ... DONE
[13:23:24.903] MultisessionFuture started
[13:23:24.903] - Launch lazy future ... done
[13:23:24.903] run() for ‘MultisessionFuture’ ... done
> ## Resolve future #4
> message(sprintf("y = %s\n", y))
[13:23:24.903] result() for ClusterFuture ...
[13:23:24.903] receiveMessageFromWorker() for ClusterFuture ...
[13:23:24.904] - Validating connection of MultisessionFuture
[13:23:24.946] - received message: FutureResult
[13:23:24.946] - Received FutureResult
[13:23:24.946] - Erased future from FutureRegistry
[13:23:24.946] result() for ClusterFuture ...
[13:23:24.947] - result already collected: FutureResult
[13:23:24.947] result() for ClusterFuture ... done
[13:23:24.947] receiveMessageFromWorker() for ClusterFuture ... done
[13:23:24.947] result() for ClusterFuture ... done
[13:23:24.947] result() for ClusterFuture ...
[13:23:24.947] - result already collected: FutureResult
[13:23:24.947] result() for ClusterFuture ... done
y = 5

> 
> message("*** Tricky use cases related to globals (part 2) ... DONE")
*** Tricky use cases related to globals (part 2) ... DONE
> 
> ## Cleanup
> setTimeLimit()
> source("incl/end.R")
[13:23:24.948] plan(): Setting new future strategy stack:
[13:23:24.948] List of future strategies:
[13:23:24.948] 1. FutureStrategy:
[13:23:24.948]    - args: function (..., envir = parent.frame())
[13:23:24.948]    - tweaked: FALSE
[13:23:24.948]    - call: future::plan(oplan)
[13:23:24.949] plan(): nbrOfWorkers() = 1
> 
