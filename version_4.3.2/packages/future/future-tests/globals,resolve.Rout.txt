
R version 4.3.2 (2023-10-31) -- "Eye Holes"
Copyright (C) 2023 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> source("incl/start.R")
[10:26:03.674] plan(): Setting new future strategy stack:
[10:26:03.675] List of future strategies:
[10:26:03.675] 1. sequential:
[10:26:03.675]    - args: function (..., envir = parent.frame())
[10:26:03.675]    - tweaked: FALSE
[10:26:03.675]    - call: future::plan("sequential")
[10:26:03.688] plan(): nbrOfWorkers() = 1
> library("listenv")
> 
> oopts <- c(oopts, options(future.globals.resolve = TRUE))
> setTimeLimit(cpu = 10, elapsed = 10, transient = TRUE)
> 
> message("*** Tricky use cases related to globals (part 2) ...")
*** Tricky use cases related to globals (part 2) ...
> 
> ## Allow for two background processes
> plan(multisession, workers = 2L)
[10:26:03.703] plan(): Setting new future strategy stack:
[10:26:03.703] List of future strategies:
[10:26:03.703] 1. multisession:
[10:26:03.703]    - args: function (..., workers = 2L, envir = parent.frame())
[10:26:03.703]    - tweaked: TRUE
[10:26:03.703]    - call: plan(multisession, workers = 2L)
[10:26:03.713] plan(): plan_init() of ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ...
[10:26:03.713] multisession:
[10:26:03.713] - args: function (..., workers = 2L, envir = parent.frame())
[10:26:03.713] - tweaked: TRUE
[10:26:03.713] - call: plan(multisession, workers = 2L)
Warning: R option ‘future.globals.resolve’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘TRUE’
[10:26:03.715] getGlobalsAndPackages() ...
[10:26:03.715] Not searching for globals
[10:26:03.715] - globals: [0] <none>
[10:26:03.715] getGlobalsAndPackages() ... DONE
[10:26:03.716] [local output] makeClusterPSOCK() ...
[10:26:03.745] [local output] Workers: [n = 2] ‘localhost’, ‘localhost’
[10:26:03.746] [local output] Base port: 11835
[10:26:03.746] [local output] Getting setup options for 2 cluster nodes ...
[10:26:03.746] [local output]  - Node 1 of 2 ...
[10:26:03.747] [local output] localMachine=TRUE => revtunnel=FALSE

[10:26:03.748] Testing if worker's PID can be inferred: ‘'/usr/local/lib/R/bin/Rscript' -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/Rtmp14g4nu/worker.rank=1.parallelly.parent=85527.14e1777045b0b.pid")), silent = TRUE)' -e 'file.exists("/tmp/Rtmp14g4nu/worker.rank=1.parallelly.parent=85527.14e1777045b0b.pid")'’
[10:26:03.935] - Possible to infer worker's PID: TRUE
[10:26:03.936] [local output] Rscript port: 11835

[10:26:03.936] [local output]  - Node 2 of 2 ...
[10:26:03.937] [local output] localMachine=TRUE => revtunnel=FALSE

[10:26:03.937] [local output] Rscript port: 11835

[10:26:03.938] [local output] Getting setup options for 2 cluster nodes ... done
[10:26:03.938] [local output]  - Parallel setup requested for some PSOCK nodes
[10:26:03.938] [local output] Setting up PSOCK nodes in parallel
[10:26:03.938] List of 36
[10:26:03.938]  $ worker          : chr "localhost"
[10:26:03.938]   ..- attr(*, "localhost")= logi TRUE
[10:26:03.938]  $ master          : chr "localhost"
[10:26:03.938]  $ port            : int 11835
[10:26:03.938]  $ connectTimeout  : num 120
[10:26:03.938]  $ timeout         : num 2592000
[10:26:03.938]  $ rscript         : chr "'/usr/local/lib/R/bin/Rscript'"
[10:26:03.938]  $ homogeneous     : logi TRUE
[10:26:03.938]  $ rscript_args    : chr "--default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),fi"| __truncated__
[10:26:03.938]  $ rscript_envs    : NULL
[10:26:03.938]  $ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[10:26:03.938]  $ rscript_startup : NULL
[10:26:03.938]  $ rscript_sh      : chr "sh"
[10:26:03.938]  $ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[10:26:03.938]  $ methods         : logi TRUE
[10:26:03.938]  $ socketOptions   : chr "no-delay"
[10:26:03.938]  $ useXDR          : logi FALSE
[10:26:03.938]  $ outfile         : chr "/dev/null"
[10:26:03.938]  $ renice          : int NA
[10:26:03.938]  $ rshcmd          : NULL
[10:26:03.938]  $ user            : chr(0) 
[10:26:03.938]  $ revtunnel       : logi FALSE
[10:26:03.938]  $ rshlogfile      : NULL
[10:26:03.938]  $ rshopts         : chr(0) 
[10:26:03.938]  $ rank            : int 1
[10:26:03.938]  $ manual          : logi FALSE
[10:26:03.938]  $ dryrun          : logi FALSE
[10:26:03.938]  $ quiet           : logi FALSE
[10:26:03.938]  $ setup_strategy  : chr "parallel"
[10:26:03.938]  $ local_cmd       : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[10:26:03.938]  $ pidfile         : chr "/tmp/Rtmp14g4nu/worker.rank=1.parallelly.parent=85527.14e1777045b0b.pid"
[10:26:03.938]  $ rshcmd_label    : NULL
[10:26:03.938]  $ rsh_call        : NULL
[10:26:03.938]  $ cmd             : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[10:26:03.938]  $ localMachine    : logi TRUE
[10:26:03.938]  $ make_fcn        :function (worker = getOption2("parallelly.localhost.hostname", "localhost"), 
[10:26:03.938]     master = NULL, port, connectTimeout = getOption2("parallelly.makeNodePSOCK.connectTimeout", 
[10:26:03.938]         2 * 60), timeout = getOption2("parallelly.makeNodePSOCK.timeout", 
[10:26:03.938]         30 * 24 * 60 * 60), rscript = NULL, homogeneous = NULL, rscript_args = NULL, 
[10:26:03.938]     rscript_envs = NULL, rscript_libs = NULL, rscript_startup = NULL, rscript_sh = c("auto", 
[10:26:03.938]         "cmd", "sh"), default_packages = c("datasets", "utils", "grDevices", 
[10:26:03.938]         "graphics", "stats", if (methods) "methods"), methods = TRUE, socketOptions = getOption2("parallelly.makeNodePSOCK.socketOptions", 
[10:26:03.938]         "no-delay"), useXDR = getOption2("parallelly.makeNodePSOCK.useXDR", 
[10:26:03.938]         FALSE), outfile = "/dev/null", renice = NA_integer_, rshcmd = getOption2("parallelly.makeNodePSOCK.rshcmd", 
[10:26:03.938]         NULL), user = NULL, revtunnel = NA, rshlogfile = NULL, rshopts = getOption2("parallelly.makeNodePSOCK.rshopts", 
[10:26:03.938]         NULL), rank = 1L, manual = FALSE, dryrun = FALSE, quiet = FALSE, 
[10:26:03.938]     setup_strategy = getOption2("parallelly.makeNodePSOCK.setup_strategy", 
[10:26:03.938]         "parallel"), action = c("launch", "options"), verbose = FALSE)  
[10:26:03.938]  $ arguments       :List of 28
[10:26:03.938]   ..$ worker          : chr "localhost"
[10:26:03.938]   ..$ master          : NULL
[10:26:03.938]   ..$ port            : int 11835
[10:26:03.938]   ..$ connectTimeout  : num 120
[10:26:03.938]   ..$ timeout         : num 2592000
[10:26:03.938]   ..$ rscript         : NULL
[10:26:03.938]   ..$ homogeneous     : NULL
[10:26:03.938]   ..$ rscript_args    : NULL
[10:26:03.938]   ..$ rscript_envs    : NULL
[10:26:03.938]   ..$ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[10:26:03.938]   ..$ rscript_startup : NULL
[10:26:03.938]   ..$ rscript_sh      : chr [1:3] "auto" "cmd" "sh"
[10:26:03.938]   ..$ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[10:26:03.938]   ..$ methods         : logi TRUE
[10:26:03.938]   ..$ socketOptions   : chr "no-delay"
[10:26:03.938]   ..$ useXDR          : logi FALSE
[10:26:03.938]   ..$ outfile         : chr "/dev/null"
[10:26:03.938]   ..$ renice          : int NA
[10:26:03.938]   ..$ rshcmd          : NULL
[10:26:03.938]   ..$ user            : NULL
[10:26:03.938]   ..$ revtunnel       : logi NA
[10:26:03.938]   ..$ rshlogfile      : NULL
[10:26:03.938]   ..$ rshopts         : NULL
[10:26:03.938]   ..$ rank            : int 1
[10:26:03.938]   ..$ manual          : logi FALSE
[10:26:03.938]   ..$ dryrun          : logi FALSE
[10:26:03.938]   ..$ quiet           : logi FALSE
[10:26:03.938]   ..$ setup_strategy  : chr "parallel"
[10:26:03.938]  - attr(*, "class")= chr [1:2] "makeNodePSOCKOptions" "makeNodeOptions"
[10:26:03.958] [local output] System call to launch all workers:
[10:26:03.958] [local output] '/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/Rtmp14g4nu/worker.rank=1.parallelly.parent=85527.14e1777045b0b.pid")), silent = TRUE)' -e 'options(socketOptions = "no-delay")' -e '.libPaths(c("/usr/local/lib/R/site-library","/usr/local/lib/R/library"))' -e 'workRSOCK <- tryCatch(parallel:::.workRSOCK, error=function(e) parallel:::.slaveRSOCK); workRSOCK()' MASTER=localhost PORT=11835 OUT=/dev/null TIMEOUT=2592000 XDR=FALSE SETUPTIMEOUT=120 SETUPSTRATEGY=parallel
[10:26:03.958] [local output] Starting PSOCK main server
[10:26:03.964] [local output] Workers launched
[10:26:03.964] [local output] Waiting for workers to connect back
[10:26:03.964]  - [local output] 0 workers out of 2 ready
[10:26:04.209]  - [local output] 0 workers out of 2 ready
[10:26:04.209]  - [local output] 1 workers out of 2 ready
[10:26:04.209]  - [local output] 2 workers out of 2 ready
[10:26:04.210] [local output] Launching of workers completed
[10:26:04.210] [local output] Collecting session information from workers
[10:26:04.211] [local output]  - Worker #1 of 2
[10:26:04.211] [local output]  - Worker #2 of 2
[10:26:04.211] [local output] makeClusterPSOCK() ... done
[10:26:04.225] Packages needed by the future expression (n = 0): <none>
[10:26:04.225] Packages needed by future strategies (n = 0): <none>
[10:26:04.226] {
[10:26:04.226]     {
[10:26:04.226]         {
[10:26:04.226]             ...future.startTime <- base::Sys.time()
[10:26:04.226]             {
[10:26:04.226]                 {
[10:26:04.226]                   {
[10:26:04.226]                     {
[10:26:04.226]                       base::local({
[10:26:04.226]                         has_future <- base::requireNamespace("future", 
[10:26:04.226]                           quietly = TRUE)
[10:26:04.226]                         if (has_future) {
[10:26:04.226]                           ns <- base::getNamespace("future")
[10:26:04.226]                           version <- ns[[".package"]][["version"]]
[10:26:04.226]                           if (is.null(version)) 
[10:26:04.226]                             version <- utils::packageVersion("future")
[10:26:04.226]                         }
[10:26:04.226]                         else {
[10:26:04.226]                           version <- NULL
[10:26:04.226]                         }
[10:26:04.226]                         if (!has_future || version < "1.8.0") {
[10:26:04.226]                           info <- base::c(r_version = base::gsub("R version ", 
[10:26:04.226]                             "", base::R.version$version.string), 
[10:26:04.226]                             platform = base::sprintf("%s (%s-bit)", 
[10:26:04.226]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:26:04.226]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[10:26:04.226]                               "release", "version")], collapse = " "), 
[10:26:04.226]                             hostname = base::Sys.info()[["nodename"]])
[10:26:04.226]                           info <- base::sprintf("%s: %s", base::names(info), 
[10:26:04.226]                             info)
[10:26:04.226]                           info <- base::paste(info, collapse = "; ")
[10:26:04.226]                           if (!has_future) {
[10:26:04.226]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:26:04.226]                               info)
[10:26:04.226]                           }
[10:26:04.226]                           else {
[10:26:04.226]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:26:04.226]                               info, version)
[10:26:04.226]                           }
[10:26:04.226]                           base::stop(msg)
[10:26:04.226]                         }
[10:26:04.226]                       })
[10:26:04.226]                     }
[10:26:04.226]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[10:26:04.226]                     base::options(mc.cores = 1L)
[10:26:04.226]                   }
[10:26:04.226]                   options(future.plan = NULL)
[10:26:04.226]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:26:04.226]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:26:04.226]                 }
[10:26:04.226]                 ...future.workdir <- getwd()
[10:26:04.226]             }
[10:26:04.226]             ...future.oldOptions <- base::as.list(base::.Options)
[10:26:04.226]             ...future.oldEnvVars <- base::Sys.getenv()
[10:26:04.226]         }
[10:26:04.226]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:26:04.226]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[10:26:04.226]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:26:04.226]             future.globals.resolve = TRUE, future.resolve.recursive = NULL, 
[10:26:04.226]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:26:04.226]             future.stdout.windows.reencode = NULL, width = 80L)
[10:26:04.226]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:26:04.226]             base::names(...future.oldOptions))
[10:26:04.226]     }
[10:26:04.226]     if (FALSE) {
[10:26:04.226]     }
[10:26:04.226]     else {
[10:26:04.226]         if (TRUE) {
[10:26:04.226]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:26:04.226]                 open = "w")
[10:26:04.226]         }
[10:26:04.226]         else {
[10:26:04.226]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:26:04.226]                 windows = "NUL", "/dev/null"), open = "w")
[10:26:04.226]         }
[10:26:04.226]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:26:04.226]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:26:04.226]             base::sink(type = "output", split = FALSE)
[10:26:04.226]             base::close(...future.stdout)
[10:26:04.226]         }, add = TRUE)
[10:26:04.226]     }
[10:26:04.226]     ...future.frame <- base::sys.nframe()
[10:26:04.226]     ...future.conditions <- base::list()
[10:26:04.226]     ...future.rng <- base::globalenv()$.Random.seed
[10:26:04.226]     if (FALSE) {
[10:26:04.226]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:26:04.226]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:26:04.226]     }
[10:26:04.226]     ...future.result <- base::tryCatch({
[10:26:04.226]         base::withCallingHandlers({
[10:26:04.226]             ...future.value <- base::withVisible(base::local({
[10:26:04.226]                 ...future.makeSendCondition <- base::local({
[10:26:04.226]                   sendCondition <- NULL
[10:26:04.226]                   function(frame = 1L) {
[10:26:04.226]                     if (is.function(sendCondition)) 
[10:26:04.226]                       return(sendCondition)
[10:26:04.226]                     ns <- getNamespace("parallel")
[10:26:04.226]                     if (exists("sendData", mode = "function", 
[10:26:04.226]                       envir = ns)) {
[10:26:04.226]                       parallel_sendData <- get("sendData", mode = "function", 
[10:26:04.226]                         envir = ns)
[10:26:04.226]                       envir <- sys.frame(frame)
[10:26:04.226]                       master <- NULL
[10:26:04.226]                       while (!identical(envir, .GlobalEnv) && 
[10:26:04.226]                         !identical(envir, emptyenv())) {
[10:26:04.226]                         if (exists("master", mode = "list", envir = envir, 
[10:26:04.226]                           inherits = FALSE)) {
[10:26:04.226]                           master <- get("master", mode = "list", 
[10:26:04.226]                             envir = envir, inherits = FALSE)
[10:26:04.226]                           if (inherits(master, c("SOCKnode", 
[10:26:04.226]                             "SOCK0node"))) {
[10:26:04.226]                             sendCondition <<- function(cond) {
[10:26:04.226]                               data <- list(type = "VALUE", value = cond, 
[10:26:04.226]                                 success = TRUE)
[10:26:04.226]                               parallel_sendData(master, data)
[10:26:04.226]                             }
[10:26:04.226]                             return(sendCondition)
[10:26:04.226]                           }
[10:26:04.226]                         }
[10:26:04.226]                         frame <- frame + 1L
[10:26:04.226]                         envir <- sys.frame(frame)
[10:26:04.226]                       }
[10:26:04.226]                     }
[10:26:04.226]                     sendCondition <<- function(cond) NULL
[10:26:04.226]                   }
[10:26:04.226]                 })
[10:26:04.226]                 withCallingHandlers({
[10:26:04.226]                   NA
[10:26:04.226]                 }, immediateCondition = function(cond) {
[10:26:04.226]                   sendCondition <- ...future.makeSendCondition()
[10:26:04.226]                   sendCondition(cond)
[10:26:04.226]                   muffleCondition <- function (cond, pattern = "^muffle") 
[10:26:04.226]                   {
[10:26:04.226]                     inherits <- base::inherits
[10:26:04.226]                     invokeRestart <- base::invokeRestart
[10:26:04.226]                     is.null <- base::is.null
[10:26:04.226]                     muffled <- FALSE
[10:26:04.226]                     if (inherits(cond, "message")) {
[10:26:04.226]                       muffled <- grepl(pattern, "muffleMessage")
[10:26:04.226]                       if (muffled) 
[10:26:04.226]                         invokeRestart("muffleMessage")
[10:26:04.226]                     }
[10:26:04.226]                     else if (inherits(cond, "warning")) {
[10:26:04.226]                       muffled <- grepl(pattern, "muffleWarning")
[10:26:04.226]                       if (muffled) 
[10:26:04.226]                         invokeRestart("muffleWarning")
[10:26:04.226]                     }
[10:26:04.226]                     else if (inherits(cond, "condition")) {
[10:26:04.226]                       if (!is.null(pattern)) {
[10:26:04.226]                         computeRestarts <- base::computeRestarts
[10:26:04.226]                         grepl <- base::grepl
[10:26:04.226]                         restarts <- computeRestarts(cond)
[10:26:04.226]                         for (restart in restarts) {
[10:26:04.226]                           name <- restart$name
[10:26:04.226]                           if (is.null(name)) 
[10:26:04.226]                             next
[10:26:04.226]                           if (!grepl(pattern, name)) 
[10:26:04.226]                             next
[10:26:04.226]                           invokeRestart(restart)
[10:26:04.226]                           muffled <- TRUE
[10:26:04.226]                           break
[10:26:04.226]                         }
[10:26:04.226]                       }
[10:26:04.226]                     }
[10:26:04.226]                     invisible(muffled)
[10:26:04.226]                   }
[10:26:04.226]                   muffleCondition(cond)
[10:26:04.226]                 })
[10:26:04.226]             }))
[10:26:04.226]             future::FutureResult(value = ...future.value$value, 
[10:26:04.226]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:26:04.226]                   ...future.rng), globalenv = if (FALSE) 
[10:26:04.226]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:26:04.226]                     ...future.globalenv.names))
[10:26:04.226]                 else NULL, started = ...future.startTime, version = "1.8")
[10:26:04.226]         }, condition = base::local({
[10:26:04.226]             c <- base::c
[10:26:04.226]             inherits <- base::inherits
[10:26:04.226]             invokeRestart <- base::invokeRestart
[10:26:04.226]             length <- base::length
[10:26:04.226]             list <- base::list
[10:26:04.226]             seq.int <- base::seq.int
[10:26:04.226]             signalCondition <- base::signalCondition
[10:26:04.226]             sys.calls <- base::sys.calls
[10:26:04.226]             `[[` <- base::`[[`
[10:26:04.226]             `+` <- base::`+`
[10:26:04.226]             `<<-` <- base::`<<-`
[10:26:04.226]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:26:04.226]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:26:04.226]                   3L)]
[10:26:04.226]             }
[10:26:04.226]             function(cond) {
[10:26:04.226]                 is_error <- inherits(cond, "error")
[10:26:04.226]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:26:04.226]                   NULL)
[10:26:04.226]                 if (is_error) {
[10:26:04.226]                   sessionInformation <- function() {
[10:26:04.226]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:26:04.226]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:26:04.226]                       search = base::search(), system = base::Sys.info())
[10:26:04.226]                   }
[10:26:04.226]                   ...future.conditions[[length(...future.conditions) + 
[10:26:04.226]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:26:04.226]                     cond$call), session = sessionInformation(), 
[10:26:04.226]                     timestamp = base::Sys.time(), signaled = 0L)
[10:26:04.226]                   signalCondition(cond)
[10:26:04.226]                 }
[10:26:04.226]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:26:04.226]                 "immediateCondition"))) {
[10:26:04.226]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:26:04.226]                   ...future.conditions[[length(...future.conditions) + 
[10:26:04.226]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:26:04.226]                   if (TRUE && !signal) {
[10:26:04.226]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:26:04.226]                     {
[10:26:04.226]                       inherits <- base::inherits
[10:26:04.226]                       invokeRestart <- base::invokeRestart
[10:26:04.226]                       is.null <- base::is.null
[10:26:04.226]                       muffled <- FALSE
[10:26:04.226]                       if (inherits(cond, "message")) {
[10:26:04.226]                         muffled <- grepl(pattern, "muffleMessage")
[10:26:04.226]                         if (muffled) 
[10:26:04.226]                           invokeRestart("muffleMessage")
[10:26:04.226]                       }
[10:26:04.226]                       else if (inherits(cond, "warning")) {
[10:26:04.226]                         muffled <- grepl(pattern, "muffleWarning")
[10:26:04.226]                         if (muffled) 
[10:26:04.226]                           invokeRestart("muffleWarning")
[10:26:04.226]                       }
[10:26:04.226]                       else if (inherits(cond, "condition")) {
[10:26:04.226]                         if (!is.null(pattern)) {
[10:26:04.226]                           computeRestarts <- base::computeRestarts
[10:26:04.226]                           grepl <- base::grepl
[10:26:04.226]                           restarts <- computeRestarts(cond)
[10:26:04.226]                           for (restart in restarts) {
[10:26:04.226]                             name <- restart$name
[10:26:04.226]                             if (is.null(name)) 
[10:26:04.226]                               next
[10:26:04.226]                             if (!grepl(pattern, name)) 
[10:26:04.226]                               next
[10:26:04.226]                             invokeRestart(restart)
[10:26:04.226]                             muffled <- TRUE
[10:26:04.226]                             break
[10:26:04.226]                           }
[10:26:04.226]                         }
[10:26:04.226]                       }
[10:26:04.226]                       invisible(muffled)
[10:26:04.226]                     }
[10:26:04.226]                     muffleCondition(cond, pattern = "^muffle")
[10:26:04.226]                   }
[10:26:04.226]                 }
[10:26:04.226]                 else {
[10:26:04.226]                   if (TRUE) {
[10:26:04.226]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:26:04.226]                     {
[10:26:04.226]                       inherits <- base::inherits
[10:26:04.226]                       invokeRestart <- base::invokeRestart
[10:26:04.226]                       is.null <- base::is.null
[10:26:04.226]                       muffled <- FALSE
[10:26:04.226]                       if (inherits(cond, "message")) {
[10:26:04.226]                         muffled <- grepl(pattern, "muffleMessage")
[10:26:04.226]                         if (muffled) 
[10:26:04.226]                           invokeRestart("muffleMessage")
[10:26:04.226]                       }
[10:26:04.226]                       else if (inherits(cond, "warning")) {
[10:26:04.226]                         muffled <- grepl(pattern, "muffleWarning")
[10:26:04.226]                         if (muffled) 
[10:26:04.226]                           invokeRestart("muffleWarning")
[10:26:04.226]                       }
[10:26:04.226]                       else if (inherits(cond, "condition")) {
[10:26:04.226]                         if (!is.null(pattern)) {
[10:26:04.226]                           computeRestarts <- base::computeRestarts
[10:26:04.226]                           grepl <- base::grepl
[10:26:04.226]                           restarts <- computeRestarts(cond)
[10:26:04.226]                           for (restart in restarts) {
[10:26:04.226]                             name <- restart$name
[10:26:04.226]                             if (is.null(name)) 
[10:26:04.226]                               next
[10:26:04.226]                             if (!grepl(pattern, name)) 
[10:26:04.226]                               next
[10:26:04.226]                             invokeRestart(restart)
[10:26:04.226]                             muffled <- TRUE
[10:26:04.226]                             break
[10:26:04.226]                           }
[10:26:04.226]                         }
[10:26:04.226]                       }
[10:26:04.226]                       invisible(muffled)
[10:26:04.226]                     }
[10:26:04.226]                     muffleCondition(cond, pattern = "^muffle")
[10:26:04.226]                   }
[10:26:04.226]                 }
[10:26:04.226]             }
[10:26:04.226]         }))
[10:26:04.226]     }, error = function(ex) {
[10:26:04.226]         base::structure(base::list(value = NULL, visible = NULL, 
[10:26:04.226]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:26:04.226]                 ...future.rng), started = ...future.startTime, 
[10:26:04.226]             finished = Sys.time(), session_uuid = NA_character_, 
[10:26:04.226]             version = "1.8"), class = "FutureResult")
[10:26:04.226]     }, finally = {
[10:26:04.226]         if (!identical(...future.workdir, getwd())) 
[10:26:04.226]             setwd(...future.workdir)
[10:26:04.226]         {
[10:26:04.226]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:26:04.226]                 ...future.oldOptions$nwarnings <- NULL
[10:26:04.226]             }
[10:26:04.226]             base::options(...future.oldOptions)
[10:26:04.226]             if (.Platform$OS.type == "windows") {
[10:26:04.226]                 old_names <- names(...future.oldEnvVars)
[10:26:04.226]                 envs <- base::Sys.getenv()
[10:26:04.226]                 names <- names(envs)
[10:26:04.226]                 common <- intersect(names, old_names)
[10:26:04.226]                 added <- setdiff(names, old_names)
[10:26:04.226]                 removed <- setdiff(old_names, names)
[10:26:04.226]                 changed <- common[...future.oldEnvVars[common] != 
[10:26:04.226]                   envs[common]]
[10:26:04.226]                 NAMES <- toupper(changed)
[10:26:04.226]                 args <- list()
[10:26:04.226]                 for (kk in seq_along(NAMES)) {
[10:26:04.226]                   name <- changed[[kk]]
[10:26:04.226]                   NAME <- NAMES[[kk]]
[10:26:04.226]                   if (name != NAME && is.element(NAME, old_names)) 
[10:26:04.226]                     next
[10:26:04.226]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:26:04.226]                 }
[10:26:04.226]                 NAMES <- toupper(added)
[10:26:04.226]                 for (kk in seq_along(NAMES)) {
[10:26:04.226]                   name <- added[[kk]]
[10:26:04.226]                   NAME <- NAMES[[kk]]
[10:26:04.226]                   if (name != NAME && is.element(NAME, old_names)) 
[10:26:04.226]                     next
[10:26:04.226]                   args[[name]] <- ""
[10:26:04.226]                 }
[10:26:04.226]                 NAMES <- toupper(removed)
[10:26:04.226]                 for (kk in seq_along(NAMES)) {
[10:26:04.226]                   name <- removed[[kk]]
[10:26:04.226]                   NAME <- NAMES[[kk]]
[10:26:04.226]                   if (name != NAME && is.element(NAME, old_names)) 
[10:26:04.226]                     next
[10:26:04.226]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:26:04.226]                 }
[10:26:04.226]                 if (length(args) > 0) 
[10:26:04.226]                   base::do.call(base::Sys.setenv, args = args)
[10:26:04.226]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:26:04.226]             }
[10:26:04.226]             else {
[10:26:04.226]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:26:04.226]             }
[10:26:04.226]             {
[10:26:04.226]                 if (base::length(...future.futureOptionsAdded) > 
[10:26:04.226]                   0L) {
[10:26:04.226]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:26:04.226]                   base::names(opts) <- ...future.futureOptionsAdded
[10:26:04.226]                   base::options(opts)
[10:26:04.226]                 }
[10:26:04.226]                 {
[10:26:04.226]                   {
[10:26:04.226]                     base::options(mc.cores = ...future.mc.cores.old)
[10:26:04.226]                     NULL
[10:26:04.226]                   }
[10:26:04.226]                   options(future.plan = NULL)
[10:26:04.226]                   if (is.na(NA_character_)) 
[10:26:04.226]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:26:04.226]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:26:04.226]                   future::plan(list(function (..., workers = 2L, 
[10:26:04.226]                     envir = parent.frame()) 
[10:26:04.226]                   strategy(..., workers = workers, envir = envir)), 
[10:26:04.226]                     .cleanup = FALSE, .init = FALSE)
[10:26:04.226]                 }
[10:26:04.226]             }
[10:26:04.226]         }
[10:26:04.226]     })
[10:26:04.226]     if (TRUE) {
[10:26:04.226]         base::sink(type = "output", split = FALSE)
[10:26:04.226]         if (TRUE) {
[10:26:04.226]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:26:04.226]         }
[10:26:04.226]         else {
[10:26:04.226]             ...future.result["stdout"] <- base::list(NULL)
[10:26:04.226]         }
[10:26:04.226]         base::close(...future.stdout)
[10:26:04.226]         ...future.stdout <- NULL
[10:26:04.226]     }
[10:26:04.226]     ...future.result$conditions <- ...future.conditions
[10:26:04.226]     ...future.result$finished <- base::Sys.time()
[10:26:04.226]     ...future.result
[10:26:04.226] }
[10:26:04.279] MultisessionFuture started
[10:26:04.279] result() for ClusterFuture ...
[10:26:04.280] receiveMessageFromWorker() for ClusterFuture ...
[10:26:04.280] - Validating connection of MultisessionFuture
[10:26:04.313] - received message: FutureResult
[10:26:04.313] - Received FutureResult
[10:26:04.316] - Erased future from FutureRegistry
[10:26:04.317] result() for ClusterFuture ...
[10:26:04.317] - result already collected: FutureResult
[10:26:04.317] result() for ClusterFuture ... done
[10:26:04.317] receiveMessageFromWorker() for ClusterFuture ... done
[10:26:04.317] result() for ClusterFuture ... done
[10:26:04.317] result() for ClusterFuture ...
[10:26:04.317] - result already collected: FutureResult
[10:26:04.317] result() for ClusterFuture ... done
[10:26:04.318] plan(): plan_init() of ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ... DONE
[10:26:04.318] plan(): nbrOfWorkers() = 2
> 
> env <- new.env()
> 
> ## Create future #1 (consumes background process #1)
> env$a %<-% { 5 }
Warning: R option ‘future.globals.resolve’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘TRUE’
[10:26:04.320] getGlobalsAndPackages() ...
[10:26:04.320] Searching for globals...
[10:26:04.324] - globals found: [1] ‘{’
[10:26:04.324] Searching for globals ... DONE
[10:26:04.324] Resolving globals: TRUE
[10:26:04.324] Resolving any globals that are futures ...
[10:26:04.324] - globals: [1] ‘{’
[10:26:04.324] Resolving any globals that are futures ... DONE
[10:26:04.325] 
[10:26:04.325] 
[10:26:04.325] getGlobalsAndPackages() ... DONE
[10:26:04.326] run() for ‘Future’ ...
[10:26:04.326] - state: ‘created’
[10:26:04.326] - Future backend: ‘FutureStrategy’, ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[10:26:04.337] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[10:26:04.337] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[10:26:04.337]   - Field: ‘node’
[10:26:04.338]   - Field: ‘label’
[10:26:04.338]   - Field: ‘local’
[10:26:04.338]   - Field: ‘owner’
[10:26:04.338]   - Field: ‘envir’
[10:26:04.338]   - Field: ‘workers’
[10:26:04.338]   - Field: ‘packages’
[10:26:04.338]   - Field: ‘gc’
[10:26:04.338]   - Field: ‘conditions’
[10:26:04.338]   - Field: ‘persistent’
[10:26:04.339]   - Field: ‘expr’
[10:26:04.339]   - Field: ‘uuid’
[10:26:04.339]   - Field: ‘seed’
[10:26:04.339]   - Field: ‘version’
[10:26:04.339]   - Field: ‘result’
[10:26:04.339]   - Field: ‘asynchronous’
[10:26:04.339]   - Field: ‘calls’
[10:26:04.339]   - Field: ‘globals’
[10:26:04.339]   - Field: ‘stdout’
[10:26:04.340]   - Field: ‘earlySignal’
[10:26:04.340]   - Field: ‘lazy’
[10:26:04.340]   - Field: ‘state’
[10:26:04.340] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[10:26:04.340] - Launch lazy future ...
[10:26:04.340] Packages needed by the future expression (n = 0): <none>
[10:26:04.340] Packages needed by future strategies (n = 0): <none>
[10:26:04.341] {
[10:26:04.341]     {
[10:26:04.341]         {
[10:26:04.341]             ...future.startTime <- base::Sys.time()
[10:26:04.341]             {
[10:26:04.341]                 {
[10:26:04.341]                   {
[10:26:04.341]                     {
[10:26:04.341]                       base::local({
[10:26:04.341]                         has_future <- base::requireNamespace("future", 
[10:26:04.341]                           quietly = TRUE)
[10:26:04.341]                         if (has_future) {
[10:26:04.341]                           ns <- base::getNamespace("future")
[10:26:04.341]                           version <- ns[[".package"]][["version"]]
[10:26:04.341]                           if (is.null(version)) 
[10:26:04.341]                             version <- utils::packageVersion("future")
[10:26:04.341]                         }
[10:26:04.341]                         else {
[10:26:04.341]                           version <- NULL
[10:26:04.341]                         }
[10:26:04.341]                         if (!has_future || version < "1.8.0") {
[10:26:04.341]                           info <- base::c(r_version = base::gsub("R version ", 
[10:26:04.341]                             "", base::R.version$version.string), 
[10:26:04.341]                             platform = base::sprintf("%s (%s-bit)", 
[10:26:04.341]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:26:04.341]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[10:26:04.341]                               "release", "version")], collapse = " "), 
[10:26:04.341]                             hostname = base::Sys.info()[["nodename"]])
[10:26:04.341]                           info <- base::sprintf("%s: %s", base::names(info), 
[10:26:04.341]                             info)
[10:26:04.341]                           info <- base::paste(info, collapse = "; ")
[10:26:04.341]                           if (!has_future) {
[10:26:04.341]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:26:04.341]                               info)
[10:26:04.341]                           }
[10:26:04.341]                           else {
[10:26:04.341]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:26:04.341]                               info, version)
[10:26:04.341]                           }
[10:26:04.341]                           base::stop(msg)
[10:26:04.341]                         }
[10:26:04.341]                       })
[10:26:04.341]                     }
[10:26:04.341]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[10:26:04.341]                     base::options(mc.cores = 1L)
[10:26:04.341]                   }
[10:26:04.341]                   options(future.plan = NULL)
[10:26:04.341]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:26:04.341]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:26:04.341]                 }
[10:26:04.341]                 ...future.workdir <- getwd()
[10:26:04.341]             }
[10:26:04.341]             ...future.oldOptions <- base::as.list(base::.Options)
[10:26:04.341]             ...future.oldEnvVars <- base::Sys.getenv()
[10:26:04.341]         }
[10:26:04.341]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:26:04.341]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[10:26:04.341]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:26:04.341]             future.globals.resolve = TRUE, future.resolve.recursive = NULL, 
[10:26:04.341]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:26:04.341]             future.stdout.windows.reencode = NULL, width = 80L)
[10:26:04.341]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:26:04.341]             base::names(...future.oldOptions))
[10:26:04.341]     }
[10:26:04.341]     if (FALSE) {
[10:26:04.341]     }
[10:26:04.341]     else {
[10:26:04.341]         if (TRUE) {
[10:26:04.341]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:26:04.341]                 open = "w")
[10:26:04.341]         }
[10:26:04.341]         else {
[10:26:04.341]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:26:04.341]                 windows = "NUL", "/dev/null"), open = "w")
[10:26:04.341]         }
[10:26:04.341]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:26:04.341]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:26:04.341]             base::sink(type = "output", split = FALSE)
[10:26:04.341]             base::close(...future.stdout)
[10:26:04.341]         }, add = TRUE)
[10:26:04.341]     }
[10:26:04.341]     ...future.frame <- base::sys.nframe()
[10:26:04.341]     ...future.conditions <- base::list()
[10:26:04.341]     ...future.rng <- base::globalenv()$.Random.seed
[10:26:04.341]     if (FALSE) {
[10:26:04.341]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:26:04.341]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:26:04.341]     }
[10:26:04.341]     ...future.result <- base::tryCatch({
[10:26:04.341]         base::withCallingHandlers({
[10:26:04.341]             ...future.value <- base::withVisible(base::local({
[10:26:04.341]                 ...future.makeSendCondition <- base::local({
[10:26:04.341]                   sendCondition <- NULL
[10:26:04.341]                   function(frame = 1L) {
[10:26:04.341]                     if (is.function(sendCondition)) 
[10:26:04.341]                       return(sendCondition)
[10:26:04.341]                     ns <- getNamespace("parallel")
[10:26:04.341]                     if (exists("sendData", mode = "function", 
[10:26:04.341]                       envir = ns)) {
[10:26:04.341]                       parallel_sendData <- get("sendData", mode = "function", 
[10:26:04.341]                         envir = ns)
[10:26:04.341]                       envir <- sys.frame(frame)
[10:26:04.341]                       master <- NULL
[10:26:04.341]                       while (!identical(envir, .GlobalEnv) && 
[10:26:04.341]                         !identical(envir, emptyenv())) {
[10:26:04.341]                         if (exists("master", mode = "list", envir = envir, 
[10:26:04.341]                           inherits = FALSE)) {
[10:26:04.341]                           master <- get("master", mode = "list", 
[10:26:04.341]                             envir = envir, inherits = FALSE)
[10:26:04.341]                           if (inherits(master, c("SOCKnode", 
[10:26:04.341]                             "SOCK0node"))) {
[10:26:04.341]                             sendCondition <<- function(cond) {
[10:26:04.341]                               data <- list(type = "VALUE", value = cond, 
[10:26:04.341]                                 success = TRUE)
[10:26:04.341]                               parallel_sendData(master, data)
[10:26:04.341]                             }
[10:26:04.341]                             return(sendCondition)
[10:26:04.341]                           }
[10:26:04.341]                         }
[10:26:04.341]                         frame <- frame + 1L
[10:26:04.341]                         envir <- sys.frame(frame)
[10:26:04.341]                       }
[10:26:04.341]                     }
[10:26:04.341]                     sendCondition <<- function(cond) NULL
[10:26:04.341]                   }
[10:26:04.341]                 })
[10:26:04.341]                 withCallingHandlers({
[10:26:04.341]                   {
[10:26:04.341]                     5
[10:26:04.341]                   }
[10:26:04.341]                 }, immediateCondition = function(cond) {
[10:26:04.341]                   sendCondition <- ...future.makeSendCondition()
[10:26:04.341]                   sendCondition(cond)
[10:26:04.341]                   muffleCondition <- function (cond, pattern = "^muffle") 
[10:26:04.341]                   {
[10:26:04.341]                     inherits <- base::inherits
[10:26:04.341]                     invokeRestart <- base::invokeRestart
[10:26:04.341]                     is.null <- base::is.null
[10:26:04.341]                     muffled <- FALSE
[10:26:04.341]                     if (inherits(cond, "message")) {
[10:26:04.341]                       muffled <- grepl(pattern, "muffleMessage")
[10:26:04.341]                       if (muffled) 
[10:26:04.341]                         invokeRestart("muffleMessage")
[10:26:04.341]                     }
[10:26:04.341]                     else if (inherits(cond, "warning")) {
[10:26:04.341]                       muffled <- grepl(pattern, "muffleWarning")
[10:26:04.341]                       if (muffled) 
[10:26:04.341]                         invokeRestart("muffleWarning")
[10:26:04.341]                     }
[10:26:04.341]                     else if (inherits(cond, "condition")) {
[10:26:04.341]                       if (!is.null(pattern)) {
[10:26:04.341]                         computeRestarts <- base::computeRestarts
[10:26:04.341]                         grepl <- base::grepl
[10:26:04.341]                         restarts <- computeRestarts(cond)
[10:26:04.341]                         for (restart in restarts) {
[10:26:04.341]                           name <- restart$name
[10:26:04.341]                           if (is.null(name)) 
[10:26:04.341]                             next
[10:26:04.341]                           if (!grepl(pattern, name)) 
[10:26:04.341]                             next
[10:26:04.341]                           invokeRestart(restart)
[10:26:04.341]                           muffled <- TRUE
[10:26:04.341]                           break
[10:26:04.341]                         }
[10:26:04.341]                       }
[10:26:04.341]                     }
[10:26:04.341]                     invisible(muffled)
[10:26:04.341]                   }
[10:26:04.341]                   muffleCondition(cond)
[10:26:04.341]                 })
[10:26:04.341]             }))
[10:26:04.341]             future::FutureResult(value = ...future.value$value, 
[10:26:04.341]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:26:04.341]                   ...future.rng), globalenv = if (FALSE) 
[10:26:04.341]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:26:04.341]                     ...future.globalenv.names))
[10:26:04.341]                 else NULL, started = ...future.startTime, version = "1.8")
[10:26:04.341]         }, condition = base::local({
[10:26:04.341]             c <- base::c
[10:26:04.341]             inherits <- base::inherits
[10:26:04.341]             invokeRestart <- base::invokeRestart
[10:26:04.341]             length <- base::length
[10:26:04.341]             list <- base::list
[10:26:04.341]             seq.int <- base::seq.int
[10:26:04.341]             signalCondition <- base::signalCondition
[10:26:04.341]             sys.calls <- base::sys.calls
[10:26:04.341]             `[[` <- base::`[[`
[10:26:04.341]             `+` <- base::`+`
[10:26:04.341]             `<<-` <- base::`<<-`
[10:26:04.341]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:26:04.341]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:26:04.341]                   3L)]
[10:26:04.341]             }
[10:26:04.341]             function(cond) {
[10:26:04.341]                 is_error <- inherits(cond, "error")
[10:26:04.341]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:26:04.341]                   NULL)
[10:26:04.341]                 if (is_error) {
[10:26:04.341]                   sessionInformation <- function() {
[10:26:04.341]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:26:04.341]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:26:04.341]                       search = base::search(), system = base::Sys.info())
[10:26:04.341]                   }
[10:26:04.341]                   ...future.conditions[[length(...future.conditions) + 
[10:26:04.341]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:26:04.341]                     cond$call), session = sessionInformation(), 
[10:26:04.341]                     timestamp = base::Sys.time(), signaled = 0L)
[10:26:04.341]                   signalCondition(cond)
[10:26:04.341]                 }
[10:26:04.341]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:26:04.341]                 "immediateCondition"))) {
[10:26:04.341]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:26:04.341]                   ...future.conditions[[length(...future.conditions) + 
[10:26:04.341]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:26:04.341]                   if (TRUE && !signal) {
[10:26:04.341]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:26:04.341]                     {
[10:26:04.341]                       inherits <- base::inherits
[10:26:04.341]                       invokeRestart <- base::invokeRestart
[10:26:04.341]                       is.null <- base::is.null
[10:26:04.341]                       muffled <- FALSE
[10:26:04.341]                       if (inherits(cond, "message")) {
[10:26:04.341]                         muffled <- grepl(pattern, "muffleMessage")
[10:26:04.341]                         if (muffled) 
[10:26:04.341]                           invokeRestart("muffleMessage")
[10:26:04.341]                       }
[10:26:04.341]                       else if (inherits(cond, "warning")) {
[10:26:04.341]                         muffled <- grepl(pattern, "muffleWarning")
[10:26:04.341]                         if (muffled) 
[10:26:04.341]                           invokeRestart("muffleWarning")
[10:26:04.341]                       }
[10:26:04.341]                       else if (inherits(cond, "condition")) {
[10:26:04.341]                         if (!is.null(pattern)) {
[10:26:04.341]                           computeRestarts <- base::computeRestarts
[10:26:04.341]                           grepl <- base::grepl
[10:26:04.341]                           restarts <- computeRestarts(cond)
[10:26:04.341]                           for (restart in restarts) {
[10:26:04.341]                             name <- restart$name
[10:26:04.341]                             if (is.null(name)) 
[10:26:04.341]                               next
[10:26:04.341]                             if (!grepl(pattern, name)) 
[10:26:04.341]                               next
[10:26:04.341]                             invokeRestart(restart)
[10:26:04.341]                             muffled <- TRUE
[10:26:04.341]                             break
[10:26:04.341]                           }
[10:26:04.341]                         }
[10:26:04.341]                       }
[10:26:04.341]                       invisible(muffled)
[10:26:04.341]                     }
[10:26:04.341]                     muffleCondition(cond, pattern = "^muffle")
[10:26:04.341]                   }
[10:26:04.341]                 }
[10:26:04.341]                 else {
[10:26:04.341]                   if (TRUE) {
[10:26:04.341]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:26:04.341]                     {
[10:26:04.341]                       inherits <- base::inherits
[10:26:04.341]                       invokeRestart <- base::invokeRestart
[10:26:04.341]                       is.null <- base::is.null
[10:26:04.341]                       muffled <- FALSE
[10:26:04.341]                       if (inherits(cond, "message")) {
[10:26:04.341]                         muffled <- grepl(pattern, "muffleMessage")
[10:26:04.341]                         if (muffled) 
[10:26:04.341]                           invokeRestart("muffleMessage")
[10:26:04.341]                       }
[10:26:04.341]                       else if (inherits(cond, "warning")) {
[10:26:04.341]                         muffled <- grepl(pattern, "muffleWarning")
[10:26:04.341]                         if (muffled) 
[10:26:04.341]                           invokeRestart("muffleWarning")
[10:26:04.341]                       }
[10:26:04.341]                       else if (inherits(cond, "condition")) {
[10:26:04.341]                         if (!is.null(pattern)) {
[10:26:04.341]                           computeRestarts <- base::computeRestarts
[10:26:04.341]                           grepl <- base::grepl
[10:26:04.341]                           restarts <- computeRestarts(cond)
[10:26:04.341]                           for (restart in restarts) {
[10:26:04.341]                             name <- restart$name
[10:26:04.341]                             if (is.null(name)) 
[10:26:04.341]                               next
[10:26:04.341]                             if (!grepl(pattern, name)) 
[10:26:04.341]                               next
[10:26:04.341]                             invokeRestart(restart)
[10:26:04.341]                             muffled <- TRUE
[10:26:04.341]                             break
[10:26:04.341]                           }
[10:26:04.341]                         }
[10:26:04.341]                       }
[10:26:04.341]                       invisible(muffled)
[10:26:04.341]                     }
[10:26:04.341]                     muffleCondition(cond, pattern = "^muffle")
[10:26:04.341]                   }
[10:26:04.341]                 }
[10:26:04.341]             }
[10:26:04.341]         }))
[10:26:04.341]     }, error = function(ex) {
[10:26:04.341]         base::structure(base::list(value = NULL, visible = NULL, 
[10:26:04.341]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:26:04.341]                 ...future.rng), started = ...future.startTime, 
[10:26:04.341]             finished = Sys.time(), session_uuid = NA_character_, 
[10:26:04.341]             version = "1.8"), class = "FutureResult")
[10:26:04.341]     }, finally = {
[10:26:04.341]         if (!identical(...future.workdir, getwd())) 
[10:26:04.341]             setwd(...future.workdir)
[10:26:04.341]         {
[10:26:04.341]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:26:04.341]                 ...future.oldOptions$nwarnings <- NULL
[10:26:04.341]             }
[10:26:04.341]             base::options(...future.oldOptions)
[10:26:04.341]             if (.Platform$OS.type == "windows") {
[10:26:04.341]                 old_names <- names(...future.oldEnvVars)
[10:26:04.341]                 envs <- base::Sys.getenv()
[10:26:04.341]                 names <- names(envs)
[10:26:04.341]                 common <- intersect(names, old_names)
[10:26:04.341]                 added <- setdiff(names, old_names)
[10:26:04.341]                 removed <- setdiff(old_names, names)
[10:26:04.341]                 changed <- common[...future.oldEnvVars[common] != 
[10:26:04.341]                   envs[common]]
[10:26:04.341]                 NAMES <- toupper(changed)
[10:26:04.341]                 args <- list()
[10:26:04.341]                 for (kk in seq_along(NAMES)) {
[10:26:04.341]                   name <- changed[[kk]]
[10:26:04.341]                   NAME <- NAMES[[kk]]
[10:26:04.341]                   if (name != NAME && is.element(NAME, old_names)) 
[10:26:04.341]                     next
[10:26:04.341]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:26:04.341]                 }
[10:26:04.341]                 NAMES <- toupper(added)
[10:26:04.341]                 for (kk in seq_along(NAMES)) {
[10:26:04.341]                   name <- added[[kk]]
[10:26:04.341]                   NAME <- NAMES[[kk]]
[10:26:04.341]                   if (name != NAME && is.element(NAME, old_names)) 
[10:26:04.341]                     next
[10:26:04.341]                   args[[name]] <- ""
[10:26:04.341]                 }
[10:26:04.341]                 NAMES <- toupper(removed)
[10:26:04.341]                 for (kk in seq_along(NAMES)) {
[10:26:04.341]                   name <- removed[[kk]]
[10:26:04.341]                   NAME <- NAMES[[kk]]
[10:26:04.341]                   if (name != NAME && is.element(NAME, old_names)) 
[10:26:04.341]                     next
[10:26:04.341]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:26:04.341]                 }
[10:26:04.341]                 if (length(args) > 0) 
[10:26:04.341]                   base::do.call(base::Sys.setenv, args = args)
[10:26:04.341]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:26:04.341]             }
[10:26:04.341]             else {
[10:26:04.341]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:26:04.341]             }
[10:26:04.341]             {
[10:26:04.341]                 if (base::length(...future.futureOptionsAdded) > 
[10:26:04.341]                   0L) {
[10:26:04.341]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:26:04.341]                   base::names(opts) <- ...future.futureOptionsAdded
[10:26:04.341]                   base::options(opts)
[10:26:04.341]                 }
[10:26:04.341]                 {
[10:26:04.341]                   {
[10:26:04.341]                     base::options(mc.cores = ...future.mc.cores.old)
[10:26:04.341]                     NULL
[10:26:04.341]                   }
[10:26:04.341]                   options(future.plan = NULL)
[10:26:04.341]                   if (is.na(NA_character_)) 
[10:26:04.341]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:26:04.341]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:26:04.341]                   future::plan(list(function (..., workers = 2L, 
[10:26:04.341]                     envir = parent.frame()) 
[10:26:04.341]                   strategy(..., workers = workers, envir = envir)), 
[10:26:04.341]                     .cleanup = FALSE, .init = FALSE)
[10:26:04.341]                 }
[10:26:04.341]             }
[10:26:04.341]         }
[10:26:04.341]     })
[10:26:04.341]     if (TRUE) {
[10:26:04.341]         base::sink(type = "output", split = FALSE)
[10:26:04.341]         if (TRUE) {
[10:26:04.341]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:26:04.341]         }
[10:26:04.341]         else {
[10:26:04.341]             ...future.result["stdout"] <- base::list(NULL)
[10:26:04.341]         }
[10:26:04.341]         base::close(...future.stdout)
[10:26:04.341]         ...future.stdout <- NULL
[10:26:04.341]     }
[10:26:04.341]     ...future.result$conditions <- ...future.conditions
[10:26:04.341]     ...future.result$finished <- base::Sys.time()
[10:26:04.341]     ...future.result
[10:26:04.341] }
[10:26:04.344] MultisessionFuture started
[10:26:04.345] - Launch lazy future ... done
[10:26:04.345] run() for ‘MultisessionFuture’ ... done
> 
> ## Create future #2 (consumes background process #2)
> b %<-% { "a" }
Warning: R option ‘future.globals.resolve’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘TRUE’
[10:26:04.345] getGlobalsAndPackages() ...
[10:26:04.346] Searching for globals...
[10:26:04.346] - globals found: [1] ‘{’
[10:26:04.346] Searching for globals ... DONE
[10:26:04.347] Resolving globals: TRUE
[10:26:04.347] Resolving any globals that are futures ...
[10:26:04.347] - globals: [1] ‘{’
[10:26:04.347] Resolving any globals that are futures ... DONE
[10:26:04.347] 
[10:26:04.347] 
[10:26:04.347] getGlobalsAndPackages() ... DONE
[10:26:04.348] run() for ‘Future’ ...
[10:26:04.348] - state: ‘created’
[10:26:04.348] - Future backend: ‘FutureStrategy’, ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[10:26:04.359] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[10:26:04.359] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[10:26:04.359]   - Field: ‘node’
[10:26:04.359]   - Field: ‘label’
[10:26:04.359]   - Field: ‘local’
[10:26:04.359]   - Field: ‘owner’
[10:26:04.359]   - Field: ‘envir’
[10:26:04.359]   - Field: ‘workers’
[10:26:04.360]   - Field: ‘packages’
[10:26:04.360]   - Field: ‘gc’
[10:26:04.360]   - Field: ‘conditions’
[10:26:04.360]   - Field: ‘persistent’
[10:26:04.360]   - Field: ‘expr’
[10:26:04.360]   - Field: ‘uuid’
[10:26:04.360]   - Field: ‘seed’
[10:26:04.360]   - Field: ‘version’
[10:26:04.360]   - Field: ‘result’
[10:26:04.361]   - Field: ‘asynchronous’
[10:26:04.361]   - Field: ‘calls’
[10:26:04.361]   - Field: ‘globals’
[10:26:04.361]   - Field: ‘stdout’
[10:26:04.361]   - Field: ‘earlySignal’
[10:26:04.361]   - Field: ‘lazy’
[10:26:04.361]   - Field: ‘state’
[10:26:04.361] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[10:26:04.362] - Launch lazy future ...
[10:26:04.362] Packages needed by the future expression (n = 0): <none>
[10:26:04.362] Packages needed by future strategies (n = 0): <none>
[10:26:04.362] {
[10:26:04.362]     {
[10:26:04.362]         {
[10:26:04.362]             ...future.startTime <- base::Sys.time()
[10:26:04.362]             {
[10:26:04.362]                 {
[10:26:04.362]                   {
[10:26:04.362]                     {
[10:26:04.362]                       base::local({
[10:26:04.362]                         has_future <- base::requireNamespace("future", 
[10:26:04.362]                           quietly = TRUE)
[10:26:04.362]                         if (has_future) {
[10:26:04.362]                           ns <- base::getNamespace("future")
[10:26:04.362]                           version <- ns[[".package"]][["version"]]
[10:26:04.362]                           if (is.null(version)) 
[10:26:04.362]                             version <- utils::packageVersion("future")
[10:26:04.362]                         }
[10:26:04.362]                         else {
[10:26:04.362]                           version <- NULL
[10:26:04.362]                         }
[10:26:04.362]                         if (!has_future || version < "1.8.0") {
[10:26:04.362]                           info <- base::c(r_version = base::gsub("R version ", 
[10:26:04.362]                             "", base::R.version$version.string), 
[10:26:04.362]                             platform = base::sprintf("%s (%s-bit)", 
[10:26:04.362]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:26:04.362]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[10:26:04.362]                               "release", "version")], collapse = " "), 
[10:26:04.362]                             hostname = base::Sys.info()[["nodename"]])
[10:26:04.362]                           info <- base::sprintf("%s: %s", base::names(info), 
[10:26:04.362]                             info)
[10:26:04.362]                           info <- base::paste(info, collapse = "; ")
[10:26:04.362]                           if (!has_future) {
[10:26:04.362]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:26:04.362]                               info)
[10:26:04.362]                           }
[10:26:04.362]                           else {
[10:26:04.362]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:26:04.362]                               info, version)
[10:26:04.362]                           }
[10:26:04.362]                           base::stop(msg)
[10:26:04.362]                         }
[10:26:04.362]                       })
[10:26:04.362]                     }
[10:26:04.362]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[10:26:04.362]                     base::options(mc.cores = 1L)
[10:26:04.362]                   }
[10:26:04.362]                   options(future.plan = NULL)
[10:26:04.362]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:26:04.362]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:26:04.362]                 }
[10:26:04.362]                 ...future.workdir <- getwd()
[10:26:04.362]             }
[10:26:04.362]             ...future.oldOptions <- base::as.list(base::.Options)
[10:26:04.362]             ...future.oldEnvVars <- base::Sys.getenv()
[10:26:04.362]         }
[10:26:04.362]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:26:04.362]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[10:26:04.362]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:26:04.362]             future.globals.resolve = TRUE, future.resolve.recursive = NULL, 
[10:26:04.362]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:26:04.362]             future.stdout.windows.reencode = NULL, width = 80L)
[10:26:04.362]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:26:04.362]             base::names(...future.oldOptions))
[10:26:04.362]     }
[10:26:04.362]     if (FALSE) {
[10:26:04.362]     }
[10:26:04.362]     else {
[10:26:04.362]         if (TRUE) {
[10:26:04.362]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:26:04.362]                 open = "w")
[10:26:04.362]         }
[10:26:04.362]         else {
[10:26:04.362]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:26:04.362]                 windows = "NUL", "/dev/null"), open = "w")
[10:26:04.362]         }
[10:26:04.362]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:26:04.362]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:26:04.362]             base::sink(type = "output", split = FALSE)
[10:26:04.362]             base::close(...future.stdout)
[10:26:04.362]         }, add = TRUE)
[10:26:04.362]     }
[10:26:04.362]     ...future.frame <- base::sys.nframe()
[10:26:04.362]     ...future.conditions <- base::list()
[10:26:04.362]     ...future.rng <- base::globalenv()$.Random.seed
[10:26:04.362]     if (FALSE) {
[10:26:04.362]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:26:04.362]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:26:04.362]     }
[10:26:04.362]     ...future.result <- base::tryCatch({
[10:26:04.362]         base::withCallingHandlers({
[10:26:04.362]             ...future.value <- base::withVisible(base::local({
[10:26:04.362]                 ...future.makeSendCondition <- base::local({
[10:26:04.362]                   sendCondition <- NULL
[10:26:04.362]                   function(frame = 1L) {
[10:26:04.362]                     if (is.function(sendCondition)) 
[10:26:04.362]                       return(sendCondition)
[10:26:04.362]                     ns <- getNamespace("parallel")
[10:26:04.362]                     if (exists("sendData", mode = "function", 
[10:26:04.362]                       envir = ns)) {
[10:26:04.362]                       parallel_sendData <- get("sendData", mode = "function", 
[10:26:04.362]                         envir = ns)
[10:26:04.362]                       envir <- sys.frame(frame)
[10:26:04.362]                       master <- NULL
[10:26:04.362]                       while (!identical(envir, .GlobalEnv) && 
[10:26:04.362]                         !identical(envir, emptyenv())) {
[10:26:04.362]                         if (exists("master", mode = "list", envir = envir, 
[10:26:04.362]                           inherits = FALSE)) {
[10:26:04.362]                           master <- get("master", mode = "list", 
[10:26:04.362]                             envir = envir, inherits = FALSE)
[10:26:04.362]                           if (inherits(master, c("SOCKnode", 
[10:26:04.362]                             "SOCK0node"))) {
[10:26:04.362]                             sendCondition <<- function(cond) {
[10:26:04.362]                               data <- list(type = "VALUE", value = cond, 
[10:26:04.362]                                 success = TRUE)
[10:26:04.362]                               parallel_sendData(master, data)
[10:26:04.362]                             }
[10:26:04.362]                             return(sendCondition)
[10:26:04.362]                           }
[10:26:04.362]                         }
[10:26:04.362]                         frame <- frame + 1L
[10:26:04.362]                         envir <- sys.frame(frame)
[10:26:04.362]                       }
[10:26:04.362]                     }
[10:26:04.362]                     sendCondition <<- function(cond) NULL
[10:26:04.362]                   }
[10:26:04.362]                 })
[10:26:04.362]                 withCallingHandlers({
[10:26:04.362]                   {
[10:26:04.362]                     "a"
[10:26:04.362]                   }
[10:26:04.362]                 }, immediateCondition = function(cond) {
[10:26:04.362]                   sendCondition <- ...future.makeSendCondition()
[10:26:04.362]                   sendCondition(cond)
[10:26:04.362]                   muffleCondition <- function (cond, pattern = "^muffle") 
[10:26:04.362]                   {
[10:26:04.362]                     inherits <- base::inherits
[10:26:04.362]                     invokeRestart <- base::invokeRestart
[10:26:04.362]                     is.null <- base::is.null
[10:26:04.362]                     muffled <- FALSE
[10:26:04.362]                     if (inherits(cond, "message")) {
[10:26:04.362]                       muffled <- grepl(pattern, "muffleMessage")
[10:26:04.362]                       if (muffled) 
[10:26:04.362]                         invokeRestart("muffleMessage")
[10:26:04.362]                     }
[10:26:04.362]                     else if (inherits(cond, "warning")) {
[10:26:04.362]                       muffled <- grepl(pattern, "muffleWarning")
[10:26:04.362]                       if (muffled) 
[10:26:04.362]                         invokeRestart("muffleWarning")
[10:26:04.362]                     }
[10:26:04.362]                     else if (inherits(cond, "condition")) {
[10:26:04.362]                       if (!is.null(pattern)) {
[10:26:04.362]                         computeRestarts <- base::computeRestarts
[10:26:04.362]                         grepl <- base::grepl
[10:26:04.362]                         restarts <- computeRestarts(cond)
[10:26:04.362]                         for (restart in restarts) {
[10:26:04.362]                           name <- restart$name
[10:26:04.362]                           if (is.null(name)) 
[10:26:04.362]                             next
[10:26:04.362]                           if (!grepl(pattern, name)) 
[10:26:04.362]                             next
[10:26:04.362]                           invokeRestart(restart)
[10:26:04.362]                           muffled <- TRUE
[10:26:04.362]                           break
[10:26:04.362]                         }
[10:26:04.362]                       }
[10:26:04.362]                     }
[10:26:04.362]                     invisible(muffled)
[10:26:04.362]                   }
[10:26:04.362]                   muffleCondition(cond)
[10:26:04.362]                 })
[10:26:04.362]             }))
[10:26:04.362]             future::FutureResult(value = ...future.value$value, 
[10:26:04.362]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:26:04.362]                   ...future.rng), globalenv = if (FALSE) 
[10:26:04.362]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:26:04.362]                     ...future.globalenv.names))
[10:26:04.362]                 else NULL, started = ...future.startTime, version = "1.8")
[10:26:04.362]         }, condition = base::local({
[10:26:04.362]             c <- base::c
[10:26:04.362]             inherits <- base::inherits
[10:26:04.362]             invokeRestart <- base::invokeRestart
[10:26:04.362]             length <- base::length
[10:26:04.362]             list <- base::list
[10:26:04.362]             seq.int <- base::seq.int
[10:26:04.362]             signalCondition <- base::signalCondition
[10:26:04.362]             sys.calls <- base::sys.calls
[10:26:04.362]             `[[` <- base::`[[`
[10:26:04.362]             `+` <- base::`+`
[10:26:04.362]             `<<-` <- base::`<<-`
[10:26:04.362]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:26:04.362]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:26:04.362]                   3L)]
[10:26:04.362]             }
[10:26:04.362]             function(cond) {
[10:26:04.362]                 is_error <- inherits(cond, "error")
[10:26:04.362]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:26:04.362]                   NULL)
[10:26:04.362]                 if (is_error) {
[10:26:04.362]                   sessionInformation <- function() {
[10:26:04.362]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:26:04.362]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:26:04.362]                       search = base::search(), system = base::Sys.info())
[10:26:04.362]                   }
[10:26:04.362]                   ...future.conditions[[length(...future.conditions) + 
[10:26:04.362]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:26:04.362]                     cond$call), session = sessionInformation(), 
[10:26:04.362]                     timestamp = base::Sys.time(), signaled = 0L)
[10:26:04.362]                   signalCondition(cond)
[10:26:04.362]                 }
[10:26:04.362]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:26:04.362]                 "immediateCondition"))) {
[10:26:04.362]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:26:04.362]                   ...future.conditions[[length(...future.conditions) + 
[10:26:04.362]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:26:04.362]                   if (TRUE && !signal) {
[10:26:04.362]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:26:04.362]                     {
[10:26:04.362]                       inherits <- base::inherits
[10:26:04.362]                       invokeRestart <- base::invokeRestart
[10:26:04.362]                       is.null <- base::is.null
[10:26:04.362]                       muffled <- FALSE
[10:26:04.362]                       if (inherits(cond, "message")) {
[10:26:04.362]                         muffled <- grepl(pattern, "muffleMessage")
[10:26:04.362]                         if (muffled) 
[10:26:04.362]                           invokeRestart("muffleMessage")
[10:26:04.362]                       }
[10:26:04.362]                       else if (inherits(cond, "warning")) {
[10:26:04.362]                         muffled <- grepl(pattern, "muffleWarning")
[10:26:04.362]                         if (muffled) 
[10:26:04.362]                           invokeRestart("muffleWarning")
[10:26:04.362]                       }
[10:26:04.362]                       else if (inherits(cond, "condition")) {
[10:26:04.362]                         if (!is.null(pattern)) {
[10:26:04.362]                           computeRestarts <- base::computeRestarts
[10:26:04.362]                           grepl <- base::grepl
[10:26:04.362]                           restarts <- computeRestarts(cond)
[10:26:04.362]                           for (restart in restarts) {
[10:26:04.362]                             name <- restart$name
[10:26:04.362]                             if (is.null(name)) 
[10:26:04.362]                               next
[10:26:04.362]                             if (!grepl(pattern, name)) 
[10:26:04.362]                               next
[10:26:04.362]                             invokeRestart(restart)
[10:26:04.362]                             muffled <- TRUE
[10:26:04.362]                             break
[10:26:04.362]                           }
[10:26:04.362]                         }
[10:26:04.362]                       }
[10:26:04.362]                       invisible(muffled)
[10:26:04.362]                     }
[10:26:04.362]                     muffleCondition(cond, pattern = "^muffle")
[10:26:04.362]                   }
[10:26:04.362]                 }
[10:26:04.362]                 else {
[10:26:04.362]                   if (TRUE) {
[10:26:04.362]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:26:04.362]                     {
[10:26:04.362]                       inherits <- base::inherits
[10:26:04.362]                       invokeRestart <- base::invokeRestart
[10:26:04.362]                       is.null <- base::is.null
[10:26:04.362]                       muffled <- FALSE
[10:26:04.362]                       if (inherits(cond, "message")) {
[10:26:04.362]                         muffled <- grepl(pattern, "muffleMessage")
[10:26:04.362]                         if (muffled) 
[10:26:04.362]                           invokeRestart("muffleMessage")
[10:26:04.362]                       }
[10:26:04.362]                       else if (inherits(cond, "warning")) {
[10:26:04.362]                         muffled <- grepl(pattern, "muffleWarning")
[10:26:04.362]                         if (muffled) 
[10:26:04.362]                           invokeRestart("muffleWarning")
[10:26:04.362]                       }
[10:26:04.362]                       else if (inherits(cond, "condition")) {
[10:26:04.362]                         if (!is.null(pattern)) {
[10:26:04.362]                           computeRestarts <- base::computeRestarts
[10:26:04.362]                           grepl <- base::grepl
[10:26:04.362]                           restarts <- computeRestarts(cond)
[10:26:04.362]                           for (restart in restarts) {
[10:26:04.362]                             name <- restart$name
[10:26:04.362]                             if (is.null(name)) 
[10:26:04.362]                               next
[10:26:04.362]                             if (!grepl(pattern, name)) 
[10:26:04.362]                               next
[10:26:04.362]                             invokeRestart(restart)
[10:26:04.362]                             muffled <- TRUE
[10:26:04.362]                             break
[10:26:04.362]                           }
[10:26:04.362]                         }
[10:26:04.362]                       }
[10:26:04.362]                       invisible(muffled)
[10:26:04.362]                     }
[10:26:04.362]                     muffleCondition(cond, pattern = "^muffle")
[10:26:04.362]                   }
[10:26:04.362]                 }
[10:26:04.362]             }
[10:26:04.362]         }))
[10:26:04.362]     }, error = function(ex) {
[10:26:04.362]         base::structure(base::list(value = NULL, visible = NULL, 
[10:26:04.362]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:26:04.362]                 ...future.rng), started = ...future.startTime, 
[10:26:04.362]             finished = Sys.time(), session_uuid = NA_character_, 
[10:26:04.362]             version = "1.8"), class = "FutureResult")
[10:26:04.362]     }, finally = {
[10:26:04.362]         if (!identical(...future.workdir, getwd())) 
[10:26:04.362]             setwd(...future.workdir)
[10:26:04.362]         {
[10:26:04.362]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:26:04.362]                 ...future.oldOptions$nwarnings <- NULL
[10:26:04.362]             }
[10:26:04.362]             base::options(...future.oldOptions)
[10:26:04.362]             if (.Platform$OS.type == "windows") {
[10:26:04.362]                 old_names <- names(...future.oldEnvVars)
[10:26:04.362]                 envs <- base::Sys.getenv()
[10:26:04.362]                 names <- names(envs)
[10:26:04.362]                 common <- intersect(names, old_names)
[10:26:04.362]                 added <- setdiff(names, old_names)
[10:26:04.362]                 removed <- setdiff(old_names, names)
[10:26:04.362]                 changed <- common[...future.oldEnvVars[common] != 
[10:26:04.362]                   envs[common]]
[10:26:04.362]                 NAMES <- toupper(changed)
[10:26:04.362]                 args <- list()
[10:26:04.362]                 for (kk in seq_along(NAMES)) {
[10:26:04.362]                   name <- changed[[kk]]
[10:26:04.362]                   NAME <- NAMES[[kk]]
[10:26:04.362]                   if (name != NAME && is.element(NAME, old_names)) 
[10:26:04.362]                     next
[10:26:04.362]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:26:04.362]                 }
[10:26:04.362]                 NAMES <- toupper(added)
[10:26:04.362]                 for (kk in seq_along(NAMES)) {
[10:26:04.362]                   name <- added[[kk]]
[10:26:04.362]                   NAME <- NAMES[[kk]]
[10:26:04.362]                   if (name != NAME && is.element(NAME, old_names)) 
[10:26:04.362]                     next
[10:26:04.362]                   args[[name]] <- ""
[10:26:04.362]                 }
[10:26:04.362]                 NAMES <- toupper(removed)
[10:26:04.362]                 for (kk in seq_along(NAMES)) {
[10:26:04.362]                   name <- removed[[kk]]
[10:26:04.362]                   NAME <- NAMES[[kk]]
[10:26:04.362]                   if (name != NAME && is.element(NAME, old_names)) 
[10:26:04.362]                     next
[10:26:04.362]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:26:04.362]                 }
[10:26:04.362]                 if (length(args) > 0) 
[10:26:04.362]                   base::do.call(base::Sys.setenv, args = args)
[10:26:04.362]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:26:04.362]             }
[10:26:04.362]             else {
[10:26:04.362]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:26:04.362]             }
[10:26:04.362]             {
[10:26:04.362]                 if (base::length(...future.futureOptionsAdded) > 
[10:26:04.362]                   0L) {
[10:26:04.362]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:26:04.362]                   base::names(opts) <- ...future.futureOptionsAdded
[10:26:04.362]                   base::options(opts)
[10:26:04.362]                 }
[10:26:04.362]                 {
[10:26:04.362]                   {
[10:26:04.362]                     base::options(mc.cores = ...future.mc.cores.old)
[10:26:04.362]                     NULL
[10:26:04.362]                   }
[10:26:04.362]                   options(future.plan = NULL)
[10:26:04.362]                   if (is.na(NA_character_)) 
[10:26:04.362]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:26:04.362]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:26:04.362]                   future::plan(list(function (..., workers = 2L, 
[10:26:04.362]                     envir = parent.frame()) 
[10:26:04.362]                   strategy(..., workers = workers, envir = envir)), 
[10:26:04.362]                     .cleanup = FALSE, .init = FALSE)
[10:26:04.362]                 }
[10:26:04.362]             }
[10:26:04.362]         }
[10:26:04.362]     })
[10:26:04.362]     if (TRUE) {
[10:26:04.362]         base::sink(type = "output", split = FALSE)
[10:26:04.362]         if (TRUE) {
[10:26:04.362]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:26:04.362]         }
[10:26:04.362]         else {
[10:26:04.362]             ...future.result["stdout"] <- base::list(NULL)
[10:26:04.362]         }
[10:26:04.362]         base::close(...future.stdout)
[10:26:04.362]         ...future.stdout <- NULL
[10:26:04.362]     }
[10:26:04.362]     ...future.result$conditions <- ...future.conditions
[10:26:04.362]     ...future.result$finished <- base::Sys.time()
[10:26:04.362]     ...future.result
[10:26:04.362] }
[10:26:04.418] MultisessionFuture started
[10:26:04.418] - Launch lazy future ... done
[10:26:04.418] run() for ‘MultisessionFuture’ ... done
> 
> ## Resolve future #2 (frees up background process #2)
> message(sprintf("b = %s\n", sQuote(b)))
[10:26:04.418] result() for ClusterFuture ...
[10:26:04.418] receiveMessageFromWorker() for ClusterFuture ...
[10:26:04.418] - Validating connection of MultisessionFuture
[10:26:04.451] - received message: FutureResult
[10:26:04.451] - Received FutureResult
[10:26:04.455] - Erased future from FutureRegistry
[10:26:04.455] result() for ClusterFuture ...
[10:26:04.455] - result already collected: FutureResult
[10:26:04.455] result() for ClusterFuture ... done
[10:26:04.455] receiveMessageFromWorker() for ClusterFuture ... done
[10:26:04.455] result() for ClusterFuture ... done
[10:26:04.455] result() for ClusterFuture ...
[10:26:04.455] - result already collected: FutureResult
[10:26:04.455] result() for ClusterFuture ... done
b = ‘a’

> 
> ## Create future #3 (consumes background process #2)
> ## THIS IS THE TRICKY PART:
> ## Two globals are identified `env` and `b` and both are resolved.
> ## However, object `env[[b]]` (here element `a` of environment `env`)
> ## is not touched and therefore not resolved (since it is a future)
> ## unless environment `env` is resolved recursively. (Issue #49)
> y %<-% { env[[b]] }
Warning: R option ‘future.globals.resolve’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘TRUE’
[10:26:04.456] getGlobalsAndPackages() ...
[10:26:04.456] Searching for globals...
[10:26:04.460] - globals found: [4] ‘{’, ‘[[’, ‘env’, ‘b’
[10:26:04.460] Searching for globals ... DONE
[10:26:04.460] Resolving globals: TRUE
[10:26:04.460] Resolving any globals that are futures ...
[10:26:04.460] - globals: [4] ‘{’, ‘[[’, ‘env’, ‘b’
[10:26:04.460] Resolving any globals that are futures ... DONE
[10:26:04.461] Resolving futures part of globals (recursively) ...
[10:26:04.461] resolve() on list ...
[10:26:04.462]  recursive: 99
[10:26:04.462]  length: 2
[10:26:04.462]  elements: ‘env’, ‘b’
[10:26:04.462] resolve() on environment ...
[10:26:04.462]  recursive: 98
[10:26:04.463]  elements: [1] ‘.future_a’, ‘a’
[10:26:04.464] receiveMessageFromWorker() for ClusterFuture ...
[10:26:04.464] - Validating connection of MultisessionFuture
[10:26:04.464] - received message: FutureResult
[10:26:04.464] - Received FutureResult
[10:26:04.464] - Erased future from FutureRegistry
[10:26:04.464] result() for ClusterFuture ...
[10:26:04.464] - result already collected: FutureResult
[10:26:04.464] result() for ClusterFuture ... done
[10:26:04.464] receiveMessageFromWorker() for ClusterFuture ... done
[10:26:04.465] Future #1
[10:26:04.465] result() for ClusterFuture ...
[10:26:04.465] - result already collected: FutureResult
[10:26:04.465] result() for ClusterFuture ... done
[10:26:04.465] result() for ClusterFuture ...
[10:26:04.465] - result already collected: FutureResult
[10:26:04.465] result() for ClusterFuture ... done
[10:26:04.465] A MultisessionFuture was resolved
[10:26:04.465]  length: 0 (resolved future 1)
[10:26:04.466] resolve() on environment ... DONE
[10:26:04.466]  length: 1 (resolved future 1)
[10:26:04.466]  length: 0 (resolved future 2)
[10:26:04.466] resolve() on list ... DONE
[10:26:04.466] - globals: [2] ‘env’, ‘b’
[10:26:04.466] Resolving futures part of globals (recursively) ... DONE
[10:26:04.467] The total size of the 2 globals is 4.29 KiB (4392 bytes)
[10:26:04.467] The total size of the 2 globals exported for future expression (‘{; env[[b]]; }’) is 4.29 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘env’ (4.18 KiB of class ‘environment’) and ‘b’ (112 bytes of class ‘character’)
[10:26:04.467] - globals: [2] ‘env’, ‘b’
[10:26:04.468] 
[10:26:04.468] getGlobalsAndPackages() ... DONE
[10:26:04.468] run() for ‘Future’ ...
[10:26:04.468] - state: ‘created’
[10:26:04.468] - Future backend: ‘FutureStrategy’, ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[10:26:04.480] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[10:26:04.480] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[10:26:04.480]   - Field: ‘node’
[10:26:04.480]   - Field: ‘label’
[10:26:04.480]   - Field: ‘local’
[10:26:04.480]   - Field: ‘owner’
[10:26:04.480]   - Field: ‘envir’
[10:26:04.480]   - Field: ‘workers’
[10:26:04.480]   - Field: ‘packages’
[10:26:04.480]   - Field: ‘gc’
[10:26:04.481]   - Field: ‘conditions’
[10:26:04.481]   - Field: ‘persistent’
[10:26:04.481]   - Field: ‘expr’
[10:26:04.481]   - Field: ‘uuid’
[10:26:04.481]   - Field: ‘seed’
[10:26:04.481]   - Field: ‘version’
[10:26:04.481]   - Field: ‘result’
[10:26:04.481]   - Field: ‘asynchronous’
[10:26:04.481]   - Field: ‘calls’
[10:26:04.481]   - Field: ‘globals’
[10:26:04.481]   - Field: ‘stdout’
[10:26:04.482]   - Field: ‘earlySignal’
[10:26:04.482]   - Field: ‘lazy’
[10:26:04.482]   - Field: ‘state’
[10:26:04.482] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[10:26:04.482] - Launch lazy future ...
[10:26:04.482] Packages needed by the future expression (n = 0): <none>
[10:26:04.482] Packages needed by future strategies (n = 0): <none>
[10:26:04.483] {
[10:26:04.483]     {
[10:26:04.483]         {
[10:26:04.483]             ...future.startTime <- base::Sys.time()
[10:26:04.483]             {
[10:26:04.483]                 {
[10:26:04.483]                   {
[10:26:04.483]                     {
[10:26:04.483]                       base::local({
[10:26:04.483]                         has_future <- base::requireNamespace("future", 
[10:26:04.483]                           quietly = TRUE)
[10:26:04.483]                         if (has_future) {
[10:26:04.483]                           ns <- base::getNamespace("future")
[10:26:04.483]                           version <- ns[[".package"]][["version"]]
[10:26:04.483]                           if (is.null(version)) 
[10:26:04.483]                             version <- utils::packageVersion("future")
[10:26:04.483]                         }
[10:26:04.483]                         else {
[10:26:04.483]                           version <- NULL
[10:26:04.483]                         }
[10:26:04.483]                         if (!has_future || version < "1.8.0") {
[10:26:04.483]                           info <- base::c(r_version = base::gsub("R version ", 
[10:26:04.483]                             "", base::R.version$version.string), 
[10:26:04.483]                             platform = base::sprintf("%s (%s-bit)", 
[10:26:04.483]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:26:04.483]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[10:26:04.483]                               "release", "version")], collapse = " "), 
[10:26:04.483]                             hostname = base::Sys.info()[["nodename"]])
[10:26:04.483]                           info <- base::sprintf("%s: %s", base::names(info), 
[10:26:04.483]                             info)
[10:26:04.483]                           info <- base::paste(info, collapse = "; ")
[10:26:04.483]                           if (!has_future) {
[10:26:04.483]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:26:04.483]                               info)
[10:26:04.483]                           }
[10:26:04.483]                           else {
[10:26:04.483]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:26:04.483]                               info, version)
[10:26:04.483]                           }
[10:26:04.483]                           base::stop(msg)
[10:26:04.483]                         }
[10:26:04.483]                       })
[10:26:04.483]                     }
[10:26:04.483]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[10:26:04.483]                     base::options(mc.cores = 1L)
[10:26:04.483]                   }
[10:26:04.483]                   options(future.plan = NULL)
[10:26:04.483]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:26:04.483]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:26:04.483]                 }
[10:26:04.483]                 ...future.workdir <- getwd()
[10:26:04.483]             }
[10:26:04.483]             ...future.oldOptions <- base::as.list(base::.Options)
[10:26:04.483]             ...future.oldEnvVars <- base::Sys.getenv()
[10:26:04.483]         }
[10:26:04.483]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:26:04.483]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[10:26:04.483]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:26:04.483]             future.globals.resolve = TRUE, future.resolve.recursive = NULL, 
[10:26:04.483]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:26:04.483]             future.stdout.windows.reencode = NULL, width = 80L)
[10:26:04.483]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:26:04.483]             base::names(...future.oldOptions))
[10:26:04.483]     }
[10:26:04.483]     if (FALSE) {
[10:26:04.483]     }
[10:26:04.483]     else {
[10:26:04.483]         if (TRUE) {
[10:26:04.483]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:26:04.483]                 open = "w")
[10:26:04.483]         }
[10:26:04.483]         else {
[10:26:04.483]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:26:04.483]                 windows = "NUL", "/dev/null"), open = "w")
[10:26:04.483]         }
[10:26:04.483]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:26:04.483]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:26:04.483]             base::sink(type = "output", split = FALSE)
[10:26:04.483]             base::close(...future.stdout)
[10:26:04.483]         }, add = TRUE)
[10:26:04.483]     }
[10:26:04.483]     ...future.frame <- base::sys.nframe()
[10:26:04.483]     ...future.conditions <- base::list()
[10:26:04.483]     ...future.rng <- base::globalenv()$.Random.seed
[10:26:04.483]     if (FALSE) {
[10:26:04.483]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:26:04.483]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:26:04.483]     }
[10:26:04.483]     ...future.result <- base::tryCatch({
[10:26:04.483]         base::withCallingHandlers({
[10:26:04.483]             ...future.value <- base::withVisible(base::local({
[10:26:04.483]                 ...future.makeSendCondition <- base::local({
[10:26:04.483]                   sendCondition <- NULL
[10:26:04.483]                   function(frame = 1L) {
[10:26:04.483]                     if (is.function(sendCondition)) 
[10:26:04.483]                       return(sendCondition)
[10:26:04.483]                     ns <- getNamespace("parallel")
[10:26:04.483]                     if (exists("sendData", mode = "function", 
[10:26:04.483]                       envir = ns)) {
[10:26:04.483]                       parallel_sendData <- get("sendData", mode = "function", 
[10:26:04.483]                         envir = ns)
[10:26:04.483]                       envir <- sys.frame(frame)
[10:26:04.483]                       master <- NULL
[10:26:04.483]                       while (!identical(envir, .GlobalEnv) && 
[10:26:04.483]                         !identical(envir, emptyenv())) {
[10:26:04.483]                         if (exists("master", mode = "list", envir = envir, 
[10:26:04.483]                           inherits = FALSE)) {
[10:26:04.483]                           master <- get("master", mode = "list", 
[10:26:04.483]                             envir = envir, inherits = FALSE)
[10:26:04.483]                           if (inherits(master, c("SOCKnode", 
[10:26:04.483]                             "SOCK0node"))) {
[10:26:04.483]                             sendCondition <<- function(cond) {
[10:26:04.483]                               data <- list(type = "VALUE", value = cond, 
[10:26:04.483]                                 success = TRUE)
[10:26:04.483]                               parallel_sendData(master, data)
[10:26:04.483]                             }
[10:26:04.483]                             return(sendCondition)
[10:26:04.483]                           }
[10:26:04.483]                         }
[10:26:04.483]                         frame <- frame + 1L
[10:26:04.483]                         envir <- sys.frame(frame)
[10:26:04.483]                       }
[10:26:04.483]                     }
[10:26:04.483]                     sendCondition <<- function(cond) NULL
[10:26:04.483]                   }
[10:26:04.483]                 })
[10:26:04.483]                 withCallingHandlers({
[10:26:04.483]                   {
[10:26:04.483]                     env[[b]]
[10:26:04.483]                   }
[10:26:04.483]                 }, immediateCondition = function(cond) {
[10:26:04.483]                   sendCondition <- ...future.makeSendCondition()
[10:26:04.483]                   sendCondition(cond)
[10:26:04.483]                   muffleCondition <- function (cond, pattern = "^muffle") 
[10:26:04.483]                   {
[10:26:04.483]                     inherits <- base::inherits
[10:26:04.483]                     invokeRestart <- base::invokeRestart
[10:26:04.483]                     is.null <- base::is.null
[10:26:04.483]                     muffled <- FALSE
[10:26:04.483]                     if (inherits(cond, "message")) {
[10:26:04.483]                       muffled <- grepl(pattern, "muffleMessage")
[10:26:04.483]                       if (muffled) 
[10:26:04.483]                         invokeRestart("muffleMessage")
[10:26:04.483]                     }
[10:26:04.483]                     else if (inherits(cond, "warning")) {
[10:26:04.483]                       muffled <- grepl(pattern, "muffleWarning")
[10:26:04.483]                       if (muffled) 
[10:26:04.483]                         invokeRestart("muffleWarning")
[10:26:04.483]                     }
[10:26:04.483]                     else if (inherits(cond, "condition")) {
[10:26:04.483]                       if (!is.null(pattern)) {
[10:26:04.483]                         computeRestarts <- base::computeRestarts
[10:26:04.483]                         grepl <- base::grepl
[10:26:04.483]                         restarts <- computeRestarts(cond)
[10:26:04.483]                         for (restart in restarts) {
[10:26:04.483]                           name <- restart$name
[10:26:04.483]                           if (is.null(name)) 
[10:26:04.483]                             next
[10:26:04.483]                           if (!grepl(pattern, name)) 
[10:26:04.483]                             next
[10:26:04.483]                           invokeRestart(restart)
[10:26:04.483]                           muffled <- TRUE
[10:26:04.483]                           break
[10:26:04.483]                         }
[10:26:04.483]                       }
[10:26:04.483]                     }
[10:26:04.483]                     invisible(muffled)
[10:26:04.483]                   }
[10:26:04.483]                   muffleCondition(cond)
[10:26:04.483]                 })
[10:26:04.483]             }))
[10:26:04.483]             future::FutureResult(value = ...future.value$value, 
[10:26:04.483]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:26:04.483]                   ...future.rng), globalenv = if (FALSE) 
[10:26:04.483]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:26:04.483]                     ...future.globalenv.names))
[10:26:04.483]                 else NULL, started = ...future.startTime, version = "1.8")
[10:26:04.483]         }, condition = base::local({
[10:26:04.483]             c <- base::c
[10:26:04.483]             inherits <- base::inherits
[10:26:04.483]             invokeRestart <- base::invokeRestart
[10:26:04.483]             length <- base::length
[10:26:04.483]             list <- base::list
[10:26:04.483]             seq.int <- base::seq.int
[10:26:04.483]             signalCondition <- base::signalCondition
[10:26:04.483]             sys.calls <- base::sys.calls
[10:26:04.483]             `[[` <- base::`[[`
[10:26:04.483]             `+` <- base::`+`
[10:26:04.483]             `<<-` <- base::`<<-`
[10:26:04.483]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:26:04.483]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:26:04.483]                   3L)]
[10:26:04.483]             }
[10:26:04.483]             function(cond) {
[10:26:04.483]                 is_error <- inherits(cond, "error")
[10:26:04.483]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:26:04.483]                   NULL)
[10:26:04.483]                 if (is_error) {
[10:26:04.483]                   sessionInformation <- function() {
[10:26:04.483]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:26:04.483]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:26:04.483]                       search = base::search(), system = base::Sys.info())
[10:26:04.483]                   }
[10:26:04.483]                   ...future.conditions[[length(...future.conditions) + 
[10:26:04.483]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:26:04.483]                     cond$call), session = sessionInformation(), 
[10:26:04.483]                     timestamp = base::Sys.time(), signaled = 0L)
[10:26:04.483]                   signalCondition(cond)
[10:26:04.483]                 }
[10:26:04.483]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:26:04.483]                 "immediateCondition"))) {
[10:26:04.483]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:26:04.483]                   ...future.conditions[[length(...future.conditions) + 
[10:26:04.483]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:26:04.483]                   if (TRUE && !signal) {
[10:26:04.483]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:26:04.483]                     {
[10:26:04.483]                       inherits <- base::inherits
[10:26:04.483]                       invokeRestart <- base::invokeRestart
[10:26:04.483]                       is.null <- base::is.null
[10:26:04.483]                       muffled <- FALSE
[10:26:04.483]                       if (inherits(cond, "message")) {
[10:26:04.483]                         muffled <- grepl(pattern, "muffleMessage")
[10:26:04.483]                         if (muffled) 
[10:26:04.483]                           invokeRestart("muffleMessage")
[10:26:04.483]                       }
[10:26:04.483]                       else if (inherits(cond, "warning")) {
[10:26:04.483]                         muffled <- grepl(pattern, "muffleWarning")
[10:26:04.483]                         if (muffled) 
[10:26:04.483]                           invokeRestart("muffleWarning")
[10:26:04.483]                       }
[10:26:04.483]                       else if (inherits(cond, "condition")) {
[10:26:04.483]                         if (!is.null(pattern)) {
[10:26:04.483]                           computeRestarts <- base::computeRestarts
[10:26:04.483]                           grepl <- base::grepl
[10:26:04.483]                           restarts <- computeRestarts(cond)
[10:26:04.483]                           for (restart in restarts) {
[10:26:04.483]                             name <- restart$name
[10:26:04.483]                             if (is.null(name)) 
[10:26:04.483]                               next
[10:26:04.483]                             if (!grepl(pattern, name)) 
[10:26:04.483]                               next
[10:26:04.483]                             invokeRestart(restart)
[10:26:04.483]                             muffled <- TRUE
[10:26:04.483]                             break
[10:26:04.483]                           }
[10:26:04.483]                         }
[10:26:04.483]                       }
[10:26:04.483]                       invisible(muffled)
[10:26:04.483]                     }
[10:26:04.483]                     muffleCondition(cond, pattern = "^muffle")
[10:26:04.483]                   }
[10:26:04.483]                 }
[10:26:04.483]                 else {
[10:26:04.483]                   if (TRUE) {
[10:26:04.483]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:26:04.483]                     {
[10:26:04.483]                       inherits <- base::inherits
[10:26:04.483]                       invokeRestart <- base::invokeRestart
[10:26:04.483]                       is.null <- base::is.null
[10:26:04.483]                       muffled <- FALSE
[10:26:04.483]                       if (inherits(cond, "message")) {
[10:26:04.483]                         muffled <- grepl(pattern, "muffleMessage")
[10:26:04.483]                         if (muffled) 
[10:26:04.483]                           invokeRestart("muffleMessage")
[10:26:04.483]                       }
[10:26:04.483]                       else if (inherits(cond, "warning")) {
[10:26:04.483]                         muffled <- grepl(pattern, "muffleWarning")
[10:26:04.483]                         if (muffled) 
[10:26:04.483]                           invokeRestart("muffleWarning")
[10:26:04.483]                       }
[10:26:04.483]                       else if (inherits(cond, "condition")) {
[10:26:04.483]                         if (!is.null(pattern)) {
[10:26:04.483]                           computeRestarts <- base::computeRestarts
[10:26:04.483]                           grepl <- base::grepl
[10:26:04.483]                           restarts <- computeRestarts(cond)
[10:26:04.483]                           for (restart in restarts) {
[10:26:04.483]                             name <- restart$name
[10:26:04.483]                             if (is.null(name)) 
[10:26:04.483]                               next
[10:26:04.483]                             if (!grepl(pattern, name)) 
[10:26:04.483]                               next
[10:26:04.483]                             invokeRestart(restart)
[10:26:04.483]                             muffled <- TRUE
[10:26:04.483]                             break
[10:26:04.483]                           }
[10:26:04.483]                         }
[10:26:04.483]                       }
[10:26:04.483]                       invisible(muffled)
[10:26:04.483]                     }
[10:26:04.483]                     muffleCondition(cond, pattern = "^muffle")
[10:26:04.483]                   }
[10:26:04.483]                 }
[10:26:04.483]             }
[10:26:04.483]         }))
[10:26:04.483]     }, error = function(ex) {
[10:26:04.483]         base::structure(base::list(value = NULL, visible = NULL, 
[10:26:04.483]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:26:04.483]                 ...future.rng), started = ...future.startTime, 
[10:26:04.483]             finished = Sys.time(), session_uuid = NA_character_, 
[10:26:04.483]             version = "1.8"), class = "FutureResult")
[10:26:04.483]     }, finally = {
[10:26:04.483]         if (!identical(...future.workdir, getwd())) 
[10:26:04.483]             setwd(...future.workdir)
[10:26:04.483]         {
[10:26:04.483]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:26:04.483]                 ...future.oldOptions$nwarnings <- NULL
[10:26:04.483]             }
[10:26:04.483]             base::options(...future.oldOptions)
[10:26:04.483]             if (.Platform$OS.type == "windows") {
[10:26:04.483]                 old_names <- names(...future.oldEnvVars)
[10:26:04.483]                 envs <- base::Sys.getenv()
[10:26:04.483]                 names <- names(envs)
[10:26:04.483]                 common <- intersect(names, old_names)
[10:26:04.483]                 added <- setdiff(names, old_names)
[10:26:04.483]                 removed <- setdiff(old_names, names)
[10:26:04.483]                 changed <- common[...future.oldEnvVars[common] != 
[10:26:04.483]                   envs[common]]
[10:26:04.483]                 NAMES <- toupper(changed)
[10:26:04.483]                 args <- list()
[10:26:04.483]                 for (kk in seq_along(NAMES)) {
[10:26:04.483]                   name <- changed[[kk]]
[10:26:04.483]                   NAME <- NAMES[[kk]]
[10:26:04.483]                   if (name != NAME && is.element(NAME, old_names)) 
[10:26:04.483]                     next
[10:26:04.483]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:26:04.483]                 }
[10:26:04.483]                 NAMES <- toupper(added)
[10:26:04.483]                 for (kk in seq_along(NAMES)) {
[10:26:04.483]                   name <- added[[kk]]
[10:26:04.483]                   NAME <- NAMES[[kk]]
[10:26:04.483]                   if (name != NAME && is.element(NAME, old_names)) 
[10:26:04.483]                     next
[10:26:04.483]                   args[[name]] <- ""
[10:26:04.483]                 }
[10:26:04.483]                 NAMES <- toupper(removed)
[10:26:04.483]                 for (kk in seq_along(NAMES)) {
[10:26:04.483]                   name <- removed[[kk]]
[10:26:04.483]                   NAME <- NAMES[[kk]]
[10:26:04.483]                   if (name != NAME && is.element(NAME, old_names)) 
[10:26:04.483]                     next
[10:26:04.483]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:26:04.483]                 }
[10:26:04.483]                 if (length(args) > 0) 
[10:26:04.483]                   base::do.call(base::Sys.setenv, args = args)
[10:26:04.483]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:26:04.483]             }
[10:26:04.483]             else {
[10:26:04.483]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:26:04.483]             }
[10:26:04.483]             {
[10:26:04.483]                 if (base::length(...future.futureOptionsAdded) > 
[10:26:04.483]                   0L) {
[10:26:04.483]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:26:04.483]                   base::names(opts) <- ...future.futureOptionsAdded
[10:26:04.483]                   base::options(opts)
[10:26:04.483]                 }
[10:26:04.483]                 {
[10:26:04.483]                   {
[10:26:04.483]                     base::options(mc.cores = ...future.mc.cores.old)
[10:26:04.483]                     NULL
[10:26:04.483]                   }
[10:26:04.483]                   options(future.plan = NULL)
[10:26:04.483]                   if (is.na(NA_character_)) 
[10:26:04.483]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:26:04.483]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:26:04.483]                   future::plan(list(function (..., workers = 2L, 
[10:26:04.483]                     envir = parent.frame()) 
[10:26:04.483]                   strategy(..., workers = workers, envir = envir)), 
[10:26:04.483]                     .cleanup = FALSE, .init = FALSE)
[10:26:04.483]                 }
[10:26:04.483]             }
[10:26:04.483]         }
[10:26:04.483]     })
[10:26:04.483]     if (TRUE) {
[10:26:04.483]         base::sink(type = "output", split = FALSE)
[10:26:04.483]         if (TRUE) {
[10:26:04.483]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:26:04.483]         }
[10:26:04.483]         else {
[10:26:04.483]             ...future.result["stdout"] <- base::list(NULL)
[10:26:04.483]         }
[10:26:04.483]         base::close(...future.stdout)
[10:26:04.483]         ...future.stdout <- NULL
[10:26:04.483]     }
[10:26:04.483]     ...future.result$conditions <- ...future.conditions
[10:26:04.483]     ...future.result$finished <- base::Sys.time()
[10:26:04.483]     ...future.result
[10:26:04.483] }
[10:26:04.485] Exporting 2 global objects (4.29 KiB) to cluster node #1 ...
[10:26:04.486] Exporting ‘env’ (4.18 KiB) to cluster node #1 ...
[10:26:04.496] Exporting ‘env’ (4.18 KiB) to cluster node #1 ... DONE
[10:26:04.497] Exporting ‘b’ (112 bytes) to cluster node #1 ...
[10:26:04.497] Exporting ‘b’ (112 bytes) to cluster node #1 ... DONE
[10:26:04.497] Exporting 2 global objects (4.29 KiB) to cluster node #1 ... DONE
[10:26:04.498] MultisessionFuture started
[10:26:04.498] - Launch lazy future ... done
[10:26:04.498] run() for ‘MultisessionFuture’ ... done
> 
> ## Resolve future #3
> message(sprintf("y = %s\n", y))
[10:26:04.498] result() for ClusterFuture ...
[10:26:04.498] receiveMessageFromWorker() for ClusterFuture ...
[10:26:04.498] - Validating connection of MultisessionFuture
[10:26:04.544] - received message: FutureResult
[10:26:04.544] - Received FutureResult
[10:26:04.544] - Erased future from FutureRegistry
[10:26:04.544] result() for ClusterFuture ...
[10:26:04.545] - result already collected: FutureResult
[10:26:04.545] result() for ClusterFuture ... done
[10:26:04.545] receiveMessageFromWorker() for ClusterFuture ... done
[10:26:04.545] result() for ClusterFuture ... done
[10:26:04.545] result() for ClusterFuture ...
[10:26:04.545] - result already collected: FutureResult
[10:26:04.545] result() for ClusterFuture ... done
y = 5

> 
> ## Resolve future #1 if not already done
> str(as.list(env))
[10:26:04.545] result() for ClusterFuture ...
[10:26:04.546] - result already collected: FutureResult
[10:26:04.546] result() for ClusterFuture ... done
[10:26:04.546] result() for ClusterFuture ...
[10:26:04.546] - result already collected: FutureResult
[10:26:04.546] result() for ClusterFuture ... done
List of 1
 $ a: num 5
> 
> ## Create future #4
> ## Since future #1 is resolved it will work at this point
> y %<-% { env[[b]] }
Warning: R option ‘future.globals.resolve’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘TRUE’
[10:26:04.547] getGlobalsAndPackages() ...
[10:26:04.547] Searching for globals...
[10:26:04.548] - globals found: [4] ‘{’, ‘[[’, ‘env’, ‘b’
[10:26:04.548] Searching for globals ... DONE
[10:26:04.548] Resolving globals: TRUE
[10:26:04.548] Resolving any globals that are futures ...
[10:26:04.548] - globals: [4] ‘{’, ‘[[’, ‘env’, ‘b’
[10:26:04.548] Resolving any globals that are futures ... DONE
[10:26:04.549] Resolving futures part of globals (recursively) ...
[10:26:04.549] resolve() on list ...
[10:26:04.549]  recursive: 99
[10:26:04.549]  length: 2
[10:26:04.549]  elements: ‘env’, ‘b’
[10:26:04.549] resolve() on environment ...
[10:26:04.550]  recursive: 98
[10:26:04.550]  elements: [1] ‘a’
[10:26:04.550]  length: 0 (resolved future 1)
[10:26:04.550] resolve() on environment ... DONE
[10:26:04.550]  length: 1 (resolved future 1)
[10:26:04.550]  length: 0 (resolved future 2)
[10:26:04.550] resolve() on list ... DONE
[10:26:04.550] - globals: [2] ‘env’, ‘b’
[10:26:04.551] Resolving futures part of globals (recursively) ... DONE
[10:26:04.551] The total size of the 2 globals is 168 bytes (168 bytes)
[10:26:04.551] The total size of the 2 globals exported for future expression (‘{; env[[b]]; }’) is 168 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘b’ (112 bytes of class ‘character’) and ‘env’ (56 bytes of class ‘environment’)
[10:26:04.551] - globals: [2] ‘env’, ‘b’
[10:26:04.551] 
[10:26:04.551] getGlobalsAndPackages() ... DONE
[10:26:04.552] run() for ‘Future’ ...
[10:26:04.552] - state: ‘created’
[10:26:04.552] - Future backend: ‘FutureStrategy’, ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[10:26:04.563] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[10:26:04.564] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[10:26:04.564]   - Field: ‘node’
[10:26:04.564]   - Field: ‘label’
[10:26:04.564]   - Field: ‘local’
[10:26:04.564]   - Field: ‘owner’
[10:26:04.564]   - Field: ‘envir’
[10:26:04.564]   - Field: ‘workers’
[10:26:04.564]   - Field: ‘packages’
[10:26:04.564]   - Field: ‘gc’
[10:26:04.564]   - Field: ‘conditions’
[10:26:04.565]   - Field: ‘persistent’
[10:26:04.565]   - Field: ‘expr’
[10:26:04.565]   - Field: ‘uuid’
[10:26:04.565]   - Field: ‘seed’
[10:26:04.565]   - Field: ‘version’
[10:26:04.565]   - Field: ‘result’
[10:26:04.565]   - Field: ‘asynchronous’
[10:26:04.565]   - Field: ‘calls’
[10:26:04.565]   - Field: ‘globals’
[10:26:04.565]   - Field: ‘stdout’
[10:26:04.566]   - Field: ‘earlySignal’
[10:26:04.566]   - Field: ‘lazy’
[10:26:04.566]   - Field: ‘state’
[10:26:04.566] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[10:26:04.566] - Launch lazy future ...
[10:26:04.566] Packages needed by the future expression (n = 0): <none>
[10:26:04.566] Packages needed by future strategies (n = 0): <none>
[10:26:04.567] {
[10:26:04.567]     {
[10:26:04.567]         {
[10:26:04.567]             ...future.startTime <- base::Sys.time()
[10:26:04.567]             {
[10:26:04.567]                 {
[10:26:04.567]                   {
[10:26:04.567]                     {
[10:26:04.567]                       base::local({
[10:26:04.567]                         has_future <- base::requireNamespace("future", 
[10:26:04.567]                           quietly = TRUE)
[10:26:04.567]                         if (has_future) {
[10:26:04.567]                           ns <- base::getNamespace("future")
[10:26:04.567]                           version <- ns[[".package"]][["version"]]
[10:26:04.567]                           if (is.null(version)) 
[10:26:04.567]                             version <- utils::packageVersion("future")
[10:26:04.567]                         }
[10:26:04.567]                         else {
[10:26:04.567]                           version <- NULL
[10:26:04.567]                         }
[10:26:04.567]                         if (!has_future || version < "1.8.0") {
[10:26:04.567]                           info <- base::c(r_version = base::gsub("R version ", 
[10:26:04.567]                             "", base::R.version$version.string), 
[10:26:04.567]                             platform = base::sprintf("%s (%s-bit)", 
[10:26:04.567]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:26:04.567]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[10:26:04.567]                               "release", "version")], collapse = " "), 
[10:26:04.567]                             hostname = base::Sys.info()[["nodename"]])
[10:26:04.567]                           info <- base::sprintf("%s: %s", base::names(info), 
[10:26:04.567]                             info)
[10:26:04.567]                           info <- base::paste(info, collapse = "; ")
[10:26:04.567]                           if (!has_future) {
[10:26:04.567]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:26:04.567]                               info)
[10:26:04.567]                           }
[10:26:04.567]                           else {
[10:26:04.567]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:26:04.567]                               info, version)
[10:26:04.567]                           }
[10:26:04.567]                           base::stop(msg)
[10:26:04.567]                         }
[10:26:04.567]                       })
[10:26:04.567]                     }
[10:26:04.567]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[10:26:04.567]                     base::options(mc.cores = 1L)
[10:26:04.567]                   }
[10:26:04.567]                   options(future.plan = NULL)
[10:26:04.567]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:26:04.567]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:26:04.567]                 }
[10:26:04.567]                 ...future.workdir <- getwd()
[10:26:04.567]             }
[10:26:04.567]             ...future.oldOptions <- base::as.list(base::.Options)
[10:26:04.567]             ...future.oldEnvVars <- base::Sys.getenv()
[10:26:04.567]         }
[10:26:04.567]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:26:04.567]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[10:26:04.567]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:26:04.567]             future.globals.resolve = TRUE, future.resolve.recursive = NULL, 
[10:26:04.567]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:26:04.567]             future.stdout.windows.reencode = NULL, width = 80L)
[10:26:04.567]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:26:04.567]             base::names(...future.oldOptions))
[10:26:04.567]     }
[10:26:04.567]     if (FALSE) {
[10:26:04.567]     }
[10:26:04.567]     else {
[10:26:04.567]         if (TRUE) {
[10:26:04.567]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:26:04.567]                 open = "w")
[10:26:04.567]         }
[10:26:04.567]         else {
[10:26:04.567]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:26:04.567]                 windows = "NUL", "/dev/null"), open = "w")
[10:26:04.567]         }
[10:26:04.567]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:26:04.567]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:26:04.567]             base::sink(type = "output", split = FALSE)
[10:26:04.567]             base::close(...future.stdout)
[10:26:04.567]         }, add = TRUE)
[10:26:04.567]     }
[10:26:04.567]     ...future.frame <- base::sys.nframe()
[10:26:04.567]     ...future.conditions <- base::list()
[10:26:04.567]     ...future.rng <- base::globalenv()$.Random.seed
[10:26:04.567]     if (FALSE) {
[10:26:04.567]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:26:04.567]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:26:04.567]     }
[10:26:04.567]     ...future.result <- base::tryCatch({
[10:26:04.567]         base::withCallingHandlers({
[10:26:04.567]             ...future.value <- base::withVisible(base::local({
[10:26:04.567]                 ...future.makeSendCondition <- base::local({
[10:26:04.567]                   sendCondition <- NULL
[10:26:04.567]                   function(frame = 1L) {
[10:26:04.567]                     if (is.function(sendCondition)) 
[10:26:04.567]                       return(sendCondition)
[10:26:04.567]                     ns <- getNamespace("parallel")
[10:26:04.567]                     if (exists("sendData", mode = "function", 
[10:26:04.567]                       envir = ns)) {
[10:26:04.567]                       parallel_sendData <- get("sendData", mode = "function", 
[10:26:04.567]                         envir = ns)
[10:26:04.567]                       envir <- sys.frame(frame)
[10:26:04.567]                       master <- NULL
[10:26:04.567]                       while (!identical(envir, .GlobalEnv) && 
[10:26:04.567]                         !identical(envir, emptyenv())) {
[10:26:04.567]                         if (exists("master", mode = "list", envir = envir, 
[10:26:04.567]                           inherits = FALSE)) {
[10:26:04.567]                           master <- get("master", mode = "list", 
[10:26:04.567]                             envir = envir, inherits = FALSE)
[10:26:04.567]                           if (inherits(master, c("SOCKnode", 
[10:26:04.567]                             "SOCK0node"))) {
[10:26:04.567]                             sendCondition <<- function(cond) {
[10:26:04.567]                               data <- list(type = "VALUE", value = cond, 
[10:26:04.567]                                 success = TRUE)
[10:26:04.567]                               parallel_sendData(master, data)
[10:26:04.567]                             }
[10:26:04.567]                             return(sendCondition)
[10:26:04.567]                           }
[10:26:04.567]                         }
[10:26:04.567]                         frame <- frame + 1L
[10:26:04.567]                         envir <- sys.frame(frame)
[10:26:04.567]                       }
[10:26:04.567]                     }
[10:26:04.567]                     sendCondition <<- function(cond) NULL
[10:26:04.567]                   }
[10:26:04.567]                 })
[10:26:04.567]                 withCallingHandlers({
[10:26:04.567]                   {
[10:26:04.567]                     env[[b]]
[10:26:04.567]                   }
[10:26:04.567]                 }, immediateCondition = function(cond) {
[10:26:04.567]                   sendCondition <- ...future.makeSendCondition()
[10:26:04.567]                   sendCondition(cond)
[10:26:04.567]                   muffleCondition <- function (cond, pattern = "^muffle") 
[10:26:04.567]                   {
[10:26:04.567]                     inherits <- base::inherits
[10:26:04.567]                     invokeRestart <- base::invokeRestart
[10:26:04.567]                     is.null <- base::is.null
[10:26:04.567]                     muffled <- FALSE
[10:26:04.567]                     if (inherits(cond, "message")) {
[10:26:04.567]                       muffled <- grepl(pattern, "muffleMessage")
[10:26:04.567]                       if (muffled) 
[10:26:04.567]                         invokeRestart("muffleMessage")
[10:26:04.567]                     }
[10:26:04.567]                     else if (inherits(cond, "warning")) {
[10:26:04.567]                       muffled <- grepl(pattern, "muffleWarning")
[10:26:04.567]                       if (muffled) 
[10:26:04.567]                         invokeRestart("muffleWarning")
[10:26:04.567]                     }
[10:26:04.567]                     else if (inherits(cond, "condition")) {
[10:26:04.567]                       if (!is.null(pattern)) {
[10:26:04.567]                         computeRestarts <- base::computeRestarts
[10:26:04.567]                         grepl <- base::grepl
[10:26:04.567]                         restarts <- computeRestarts(cond)
[10:26:04.567]                         for (restart in restarts) {
[10:26:04.567]                           name <- restart$name
[10:26:04.567]                           if (is.null(name)) 
[10:26:04.567]                             next
[10:26:04.567]                           if (!grepl(pattern, name)) 
[10:26:04.567]                             next
[10:26:04.567]                           invokeRestart(restart)
[10:26:04.567]                           muffled <- TRUE
[10:26:04.567]                           break
[10:26:04.567]                         }
[10:26:04.567]                       }
[10:26:04.567]                     }
[10:26:04.567]                     invisible(muffled)
[10:26:04.567]                   }
[10:26:04.567]                   muffleCondition(cond)
[10:26:04.567]                 })
[10:26:04.567]             }))
[10:26:04.567]             future::FutureResult(value = ...future.value$value, 
[10:26:04.567]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:26:04.567]                   ...future.rng), globalenv = if (FALSE) 
[10:26:04.567]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:26:04.567]                     ...future.globalenv.names))
[10:26:04.567]                 else NULL, started = ...future.startTime, version = "1.8")
[10:26:04.567]         }, condition = base::local({
[10:26:04.567]             c <- base::c
[10:26:04.567]             inherits <- base::inherits
[10:26:04.567]             invokeRestart <- base::invokeRestart
[10:26:04.567]             length <- base::length
[10:26:04.567]             list <- base::list
[10:26:04.567]             seq.int <- base::seq.int
[10:26:04.567]             signalCondition <- base::signalCondition
[10:26:04.567]             sys.calls <- base::sys.calls
[10:26:04.567]             `[[` <- base::`[[`
[10:26:04.567]             `+` <- base::`+`
[10:26:04.567]             `<<-` <- base::`<<-`
[10:26:04.567]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:26:04.567]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:26:04.567]                   3L)]
[10:26:04.567]             }
[10:26:04.567]             function(cond) {
[10:26:04.567]                 is_error <- inherits(cond, "error")
[10:26:04.567]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:26:04.567]                   NULL)
[10:26:04.567]                 if (is_error) {
[10:26:04.567]                   sessionInformation <- function() {
[10:26:04.567]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:26:04.567]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:26:04.567]                       search = base::search(), system = base::Sys.info())
[10:26:04.567]                   }
[10:26:04.567]                   ...future.conditions[[length(...future.conditions) + 
[10:26:04.567]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:26:04.567]                     cond$call), session = sessionInformation(), 
[10:26:04.567]                     timestamp = base::Sys.time(), signaled = 0L)
[10:26:04.567]                   signalCondition(cond)
[10:26:04.567]                 }
[10:26:04.567]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:26:04.567]                 "immediateCondition"))) {
[10:26:04.567]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:26:04.567]                   ...future.conditions[[length(...future.conditions) + 
[10:26:04.567]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:26:04.567]                   if (TRUE && !signal) {
[10:26:04.567]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:26:04.567]                     {
[10:26:04.567]                       inherits <- base::inherits
[10:26:04.567]                       invokeRestart <- base::invokeRestart
[10:26:04.567]                       is.null <- base::is.null
[10:26:04.567]                       muffled <- FALSE
[10:26:04.567]                       if (inherits(cond, "message")) {
[10:26:04.567]                         muffled <- grepl(pattern, "muffleMessage")
[10:26:04.567]                         if (muffled) 
[10:26:04.567]                           invokeRestart("muffleMessage")
[10:26:04.567]                       }
[10:26:04.567]                       else if (inherits(cond, "warning")) {
[10:26:04.567]                         muffled <- grepl(pattern, "muffleWarning")
[10:26:04.567]                         if (muffled) 
[10:26:04.567]                           invokeRestart("muffleWarning")
[10:26:04.567]                       }
[10:26:04.567]                       else if (inherits(cond, "condition")) {
[10:26:04.567]                         if (!is.null(pattern)) {
[10:26:04.567]                           computeRestarts <- base::computeRestarts
[10:26:04.567]                           grepl <- base::grepl
[10:26:04.567]                           restarts <- computeRestarts(cond)
[10:26:04.567]                           for (restart in restarts) {
[10:26:04.567]                             name <- restart$name
[10:26:04.567]                             if (is.null(name)) 
[10:26:04.567]                               next
[10:26:04.567]                             if (!grepl(pattern, name)) 
[10:26:04.567]                               next
[10:26:04.567]                             invokeRestart(restart)
[10:26:04.567]                             muffled <- TRUE
[10:26:04.567]                             break
[10:26:04.567]                           }
[10:26:04.567]                         }
[10:26:04.567]                       }
[10:26:04.567]                       invisible(muffled)
[10:26:04.567]                     }
[10:26:04.567]                     muffleCondition(cond, pattern = "^muffle")
[10:26:04.567]                   }
[10:26:04.567]                 }
[10:26:04.567]                 else {
[10:26:04.567]                   if (TRUE) {
[10:26:04.567]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:26:04.567]                     {
[10:26:04.567]                       inherits <- base::inherits
[10:26:04.567]                       invokeRestart <- base::invokeRestart
[10:26:04.567]                       is.null <- base::is.null
[10:26:04.567]                       muffled <- FALSE
[10:26:04.567]                       if (inherits(cond, "message")) {
[10:26:04.567]                         muffled <- grepl(pattern, "muffleMessage")
[10:26:04.567]                         if (muffled) 
[10:26:04.567]                           invokeRestart("muffleMessage")
[10:26:04.567]                       }
[10:26:04.567]                       else if (inherits(cond, "warning")) {
[10:26:04.567]                         muffled <- grepl(pattern, "muffleWarning")
[10:26:04.567]                         if (muffled) 
[10:26:04.567]                           invokeRestart("muffleWarning")
[10:26:04.567]                       }
[10:26:04.567]                       else if (inherits(cond, "condition")) {
[10:26:04.567]                         if (!is.null(pattern)) {
[10:26:04.567]                           computeRestarts <- base::computeRestarts
[10:26:04.567]                           grepl <- base::grepl
[10:26:04.567]                           restarts <- computeRestarts(cond)
[10:26:04.567]                           for (restart in restarts) {
[10:26:04.567]                             name <- restart$name
[10:26:04.567]                             if (is.null(name)) 
[10:26:04.567]                               next
[10:26:04.567]                             if (!grepl(pattern, name)) 
[10:26:04.567]                               next
[10:26:04.567]                             invokeRestart(restart)
[10:26:04.567]                             muffled <- TRUE
[10:26:04.567]                             break
[10:26:04.567]                           }
[10:26:04.567]                         }
[10:26:04.567]                       }
[10:26:04.567]                       invisible(muffled)
[10:26:04.567]                     }
[10:26:04.567]                     muffleCondition(cond, pattern = "^muffle")
[10:26:04.567]                   }
[10:26:04.567]                 }
[10:26:04.567]             }
[10:26:04.567]         }))
[10:26:04.567]     }, error = function(ex) {
[10:26:04.567]         base::structure(base::list(value = NULL, visible = NULL, 
[10:26:04.567]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:26:04.567]                 ...future.rng), started = ...future.startTime, 
[10:26:04.567]             finished = Sys.time(), session_uuid = NA_character_, 
[10:26:04.567]             version = "1.8"), class = "FutureResult")
[10:26:04.567]     }, finally = {
[10:26:04.567]         if (!identical(...future.workdir, getwd())) 
[10:26:04.567]             setwd(...future.workdir)
[10:26:04.567]         {
[10:26:04.567]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:26:04.567]                 ...future.oldOptions$nwarnings <- NULL
[10:26:04.567]             }
[10:26:04.567]             base::options(...future.oldOptions)
[10:26:04.567]             if (.Platform$OS.type == "windows") {
[10:26:04.567]                 old_names <- names(...future.oldEnvVars)
[10:26:04.567]                 envs <- base::Sys.getenv()
[10:26:04.567]                 names <- names(envs)
[10:26:04.567]                 common <- intersect(names, old_names)
[10:26:04.567]                 added <- setdiff(names, old_names)
[10:26:04.567]                 removed <- setdiff(old_names, names)
[10:26:04.567]                 changed <- common[...future.oldEnvVars[common] != 
[10:26:04.567]                   envs[common]]
[10:26:04.567]                 NAMES <- toupper(changed)
[10:26:04.567]                 args <- list()
[10:26:04.567]                 for (kk in seq_along(NAMES)) {
[10:26:04.567]                   name <- changed[[kk]]
[10:26:04.567]                   NAME <- NAMES[[kk]]
[10:26:04.567]                   if (name != NAME && is.element(NAME, old_names)) 
[10:26:04.567]                     next
[10:26:04.567]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:26:04.567]                 }
[10:26:04.567]                 NAMES <- toupper(added)
[10:26:04.567]                 for (kk in seq_along(NAMES)) {
[10:26:04.567]                   name <- added[[kk]]
[10:26:04.567]                   NAME <- NAMES[[kk]]
[10:26:04.567]                   if (name != NAME && is.element(NAME, old_names)) 
[10:26:04.567]                     next
[10:26:04.567]                   args[[name]] <- ""
[10:26:04.567]                 }
[10:26:04.567]                 NAMES <- toupper(removed)
[10:26:04.567]                 for (kk in seq_along(NAMES)) {
[10:26:04.567]                   name <- removed[[kk]]
[10:26:04.567]                   NAME <- NAMES[[kk]]
[10:26:04.567]                   if (name != NAME && is.element(NAME, old_names)) 
[10:26:04.567]                     next
[10:26:04.567]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:26:04.567]                 }
[10:26:04.567]                 if (length(args) > 0) 
[10:26:04.567]                   base::do.call(base::Sys.setenv, args = args)
[10:26:04.567]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:26:04.567]             }
[10:26:04.567]             else {
[10:26:04.567]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:26:04.567]             }
[10:26:04.567]             {
[10:26:04.567]                 if (base::length(...future.futureOptionsAdded) > 
[10:26:04.567]                   0L) {
[10:26:04.567]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:26:04.567]                   base::names(opts) <- ...future.futureOptionsAdded
[10:26:04.567]                   base::options(opts)
[10:26:04.567]                 }
[10:26:04.567]                 {
[10:26:04.567]                   {
[10:26:04.567]                     base::options(mc.cores = ...future.mc.cores.old)
[10:26:04.567]                     NULL
[10:26:04.567]                   }
[10:26:04.567]                   options(future.plan = NULL)
[10:26:04.567]                   if (is.na(NA_character_)) 
[10:26:04.567]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:26:04.567]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:26:04.567]                   future::plan(list(function (..., workers = 2L, 
[10:26:04.567]                     envir = parent.frame()) 
[10:26:04.567]                   strategy(..., workers = workers, envir = envir)), 
[10:26:04.567]                     .cleanup = FALSE, .init = FALSE)
[10:26:04.567]                 }
[10:26:04.567]             }
[10:26:04.567]         }
[10:26:04.567]     })
[10:26:04.567]     if (TRUE) {
[10:26:04.567]         base::sink(type = "output", split = FALSE)
[10:26:04.567]         if (TRUE) {
[10:26:04.567]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:26:04.567]         }
[10:26:04.567]         else {
[10:26:04.567]             ...future.result["stdout"] <- base::list(NULL)
[10:26:04.567]         }
[10:26:04.567]         base::close(...future.stdout)
[10:26:04.567]         ...future.stdout <- NULL
[10:26:04.567]     }
[10:26:04.567]     ...future.result$conditions <- ...future.conditions
[10:26:04.567]     ...future.result$finished <- base::Sys.time()
[10:26:04.567]     ...future.result
[10:26:04.567] }
[10:26:04.569] Exporting 2 global objects (168 bytes) to cluster node #1 ...
[10:26:04.570] Exporting ‘env’ (56 bytes) to cluster node #1 ...
[10:26:04.570] Exporting ‘env’ (56 bytes) to cluster node #1 ... DONE
[10:26:04.570] Exporting ‘b’ (112 bytes) to cluster node #1 ...
[10:26:04.570] Exporting ‘b’ (112 bytes) to cluster node #1 ... DONE
[10:26:04.571] Exporting 2 global objects (168 bytes) to cluster node #1 ... DONE
[10:26:04.571] MultisessionFuture started
[10:26:04.571] - Launch lazy future ... done
[10:26:04.571] run() for ‘MultisessionFuture’ ... done
> ## Resolve future #4
> message(sprintf("y = %s\n", y))
[10:26:04.572] result() for ClusterFuture ...
[10:26:04.572] receiveMessageFromWorker() for ClusterFuture ...
[10:26:04.572] - Validating connection of MultisessionFuture
[10:26:04.615] - received message: FutureResult
[10:26:04.616] - Received FutureResult
[10:26:04.616] - Erased future from FutureRegistry
[10:26:04.616] result() for ClusterFuture ...
[10:26:04.616] - result already collected: FutureResult
[10:26:04.616] result() for ClusterFuture ... done
[10:26:04.616] receiveMessageFromWorker() for ClusterFuture ... done
[10:26:04.616] result() for ClusterFuture ... done
[10:26:04.616] result() for ClusterFuture ...
[10:26:04.617] - result already collected: FutureResult
[10:26:04.617] result() for ClusterFuture ... done
y = 5

> 
> message("*** Tricky use cases related to globals (part 2) ... DONE")
*** Tricky use cases related to globals (part 2) ... DONE
> 
> ## Cleanup
> setTimeLimit()
> source("incl/end.R")
[10:26:04.617] plan(): Setting new future strategy stack:
[10:26:04.618] List of future strategies:
[10:26:04.618] 1. FutureStrategy:
[10:26:04.618]    - args: function (..., envir = parent.frame())
[10:26:04.618]    - tweaked: FALSE
[10:26:04.618]    - call: future::plan(oplan)
[10:26:04.618] plan(): nbrOfWorkers() = 1
> 
