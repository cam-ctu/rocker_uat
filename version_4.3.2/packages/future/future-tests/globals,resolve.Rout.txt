
R version 4.3.2 (2023-10-31) -- "Eye Holes"
Copyright (C) 2023 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> source("incl/start.R")
[16:04:58.634] plan(): Setting new future strategy stack:
[16:04:58.634] List of future strategies:
[16:04:58.634] 1. sequential:
[16:04:58.634]    - args: function (..., envir = parent.frame())
[16:04:58.634]    - tweaked: FALSE
[16:04:58.634]    - call: future::plan("sequential")
[16:04:58.648] plan(): nbrOfWorkers() = 1
> library("listenv")
> 
> oopts <- c(oopts, options(future.globals.resolve = TRUE))
> setTimeLimit(cpu = 10, elapsed = 10, transient = TRUE)
> 
> message("*** Tricky use cases related to globals (part 2) ...")
*** Tricky use cases related to globals (part 2) ...
> 
> ## Allow for two background processes
> plan(multisession, workers = 2L)
[16:04:58.663] plan(): Setting new future strategy stack:
[16:04:58.663] List of future strategies:
[16:04:58.663] 1. multisession:
[16:04:58.663]    - args: function (..., workers = 2L, envir = parent.frame())
[16:04:58.663]    - tweaked: TRUE
[16:04:58.663]    - call: plan(multisession, workers = 2L)
[16:04:58.674] plan(): plan_init() of ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ...
[16:04:58.674] multisession:
[16:04:58.674] - args: function (..., workers = 2L, envir = parent.frame())
[16:04:58.674] - tweaked: TRUE
[16:04:58.674] - call: plan(multisession, workers = 2L)
Warning: R option ‘future.globals.resolve’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘TRUE’
[16:04:58.676] getGlobalsAndPackages() ...
[16:04:58.676] Not searching for globals
[16:04:58.676] - globals: [0] <none>
[16:04:58.676] getGlobalsAndPackages() ... DONE
[16:04:58.677] [local output] makeClusterPSOCK() ...
[16:04:58.707] [local output] Workers: [n = 2] ‘localhost’, ‘localhost’
[16:04:58.709] [local output] Base port: 11383
[16:04:58.709] [local output] Getting setup options for 2 cluster nodes ...
[16:04:58.709] [local output]  - Node 1 of 2 ...
[16:04:58.709] [local output] localMachine=TRUE => revtunnel=FALSE

[16:04:58.710] Testing if worker's PID can be inferred: ‘'/usr/local/lib/R/bin/Rscript' -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/RtmprSu0qs/worker.rank=1.parallelly.parent=85264.14d102ff53241.pid")), silent = TRUE)' -e 'file.exists("/tmp/RtmprSu0qs/worker.rank=1.parallelly.parent=85264.14d102ff53241.pid")'’
[16:04:58.895] - Possible to infer worker's PID: TRUE
[16:04:58.895] [local output] Rscript port: 11383

[16:04:58.896] [local output]  - Node 2 of 2 ...
[16:04:58.896] [local output] localMachine=TRUE => revtunnel=FALSE

[16:04:58.897] [local output] Rscript port: 11383

[16:04:58.897] [local output] Getting setup options for 2 cluster nodes ... done
[16:04:58.897] [local output]  - Parallel setup requested for some PSOCK nodes
[16:04:58.898] [local output] Setting up PSOCK nodes in parallel
[16:04:58.898] List of 36
[16:04:58.898]  $ worker          : chr "localhost"
[16:04:58.898]   ..- attr(*, "localhost")= logi TRUE
[16:04:58.898]  $ master          : chr "localhost"
[16:04:58.898]  $ port            : int 11383
[16:04:58.898]  $ connectTimeout  : num 120
[16:04:58.898]  $ timeout         : num 2592000
[16:04:58.898]  $ rscript         : chr "'/usr/local/lib/R/bin/Rscript'"
[16:04:58.898]  $ homogeneous     : logi TRUE
[16:04:58.898]  $ rscript_args    : chr "--default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),fi"| __truncated__
[16:04:58.898]  $ rscript_envs    : NULL
[16:04:58.898]  $ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[16:04:58.898]  $ rscript_startup : NULL
[16:04:58.898]  $ rscript_sh      : chr "sh"
[16:04:58.898]  $ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[16:04:58.898]  $ methods         : logi TRUE
[16:04:58.898]  $ socketOptions   : chr "no-delay"
[16:04:58.898]  $ useXDR          : logi FALSE
[16:04:58.898]  $ outfile         : chr "/dev/null"
[16:04:58.898]  $ renice          : int NA
[16:04:58.898]  $ rshcmd          : NULL
[16:04:58.898]  $ user            : chr(0) 
[16:04:58.898]  $ revtunnel       : logi FALSE
[16:04:58.898]  $ rshlogfile      : NULL
[16:04:58.898]  $ rshopts         : chr(0) 
[16:04:58.898]  $ rank            : int 1
[16:04:58.898]  $ manual          : logi FALSE
[16:04:58.898]  $ dryrun          : logi FALSE
[16:04:58.898]  $ quiet           : logi FALSE
[16:04:58.898]  $ setup_strategy  : chr "parallel"
[16:04:58.898]  $ local_cmd       : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[16:04:58.898]  $ pidfile         : chr "/tmp/RtmprSu0qs/worker.rank=1.parallelly.parent=85264.14d102ff53241.pid"
[16:04:58.898]  $ rshcmd_label    : NULL
[16:04:58.898]  $ rsh_call        : NULL
[16:04:58.898]  $ cmd             : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[16:04:58.898]  $ localMachine    : logi TRUE
[16:04:58.898]  $ make_fcn        :function (worker = getOption2("parallelly.localhost.hostname", "localhost"), 
[16:04:58.898]     master = NULL, port, connectTimeout = getOption2("parallelly.makeNodePSOCK.connectTimeout", 
[16:04:58.898]         2 * 60), timeout = getOption2("parallelly.makeNodePSOCK.timeout", 
[16:04:58.898]         30 * 24 * 60 * 60), rscript = NULL, homogeneous = NULL, rscript_args = NULL, 
[16:04:58.898]     rscript_envs = NULL, rscript_libs = NULL, rscript_startup = NULL, rscript_sh = c("auto", 
[16:04:58.898]         "cmd", "sh"), default_packages = c("datasets", "utils", "grDevices", 
[16:04:58.898]         "graphics", "stats", if (methods) "methods"), methods = TRUE, socketOptions = getOption2("parallelly.makeNodePSOCK.socketOptions", 
[16:04:58.898]         "no-delay"), useXDR = getOption2("parallelly.makeNodePSOCK.useXDR", 
[16:04:58.898]         FALSE), outfile = "/dev/null", renice = NA_integer_, rshcmd = getOption2("parallelly.makeNodePSOCK.rshcmd", 
[16:04:58.898]         NULL), user = NULL, revtunnel = NA, rshlogfile = NULL, rshopts = getOption2("parallelly.makeNodePSOCK.rshopts", 
[16:04:58.898]         NULL), rank = 1L, manual = FALSE, dryrun = FALSE, quiet = FALSE, 
[16:04:58.898]     setup_strategy = getOption2("parallelly.makeNodePSOCK.setup_strategy", 
[16:04:58.898]         "parallel"), action = c("launch", "options"), verbose = FALSE)  
[16:04:58.898]  $ arguments       :List of 28
[16:04:58.898]   ..$ worker          : chr "localhost"
[16:04:58.898]   ..$ master          : NULL
[16:04:58.898]   ..$ port            : int 11383
[16:04:58.898]   ..$ connectTimeout  : num 120
[16:04:58.898]   ..$ timeout         : num 2592000
[16:04:58.898]   ..$ rscript         : NULL
[16:04:58.898]   ..$ homogeneous     : NULL
[16:04:58.898]   ..$ rscript_args    : NULL
[16:04:58.898]   ..$ rscript_envs    : NULL
[16:04:58.898]   ..$ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[16:04:58.898]   ..$ rscript_startup : NULL
[16:04:58.898]   ..$ rscript_sh      : chr [1:3] "auto" "cmd" "sh"
[16:04:58.898]   ..$ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[16:04:58.898]   ..$ methods         : logi TRUE
[16:04:58.898]   ..$ socketOptions   : chr "no-delay"
[16:04:58.898]   ..$ useXDR          : logi FALSE
[16:04:58.898]   ..$ outfile         : chr "/dev/null"
[16:04:58.898]   ..$ renice          : int NA
[16:04:58.898]   ..$ rshcmd          : NULL
[16:04:58.898]   ..$ user            : NULL
[16:04:58.898]   ..$ revtunnel       : logi NA
[16:04:58.898]   ..$ rshlogfile      : NULL
[16:04:58.898]   ..$ rshopts         : NULL
[16:04:58.898]   ..$ rank            : int 1
[16:04:58.898]   ..$ manual          : logi FALSE
[16:04:58.898]   ..$ dryrun          : logi FALSE
[16:04:58.898]   ..$ quiet           : logi FALSE
[16:04:58.898]   ..$ setup_strategy  : chr "parallel"
[16:04:58.898]  - attr(*, "class")= chr [1:2] "makeNodePSOCKOptions" "makeNodeOptions"
[16:04:58.917] [local output] System call to launch all workers:
[16:04:58.917] [local output] '/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/RtmprSu0qs/worker.rank=1.parallelly.parent=85264.14d102ff53241.pid")), silent = TRUE)' -e 'options(socketOptions = "no-delay")' -e '.libPaths(c("/usr/local/lib/R/site-library","/usr/local/lib/R/library"))' -e 'workRSOCK <- tryCatch(parallel:::.workRSOCK, error=function(e) parallel:::.slaveRSOCK); workRSOCK()' MASTER=localhost PORT=11383 OUT=/dev/null TIMEOUT=2592000 XDR=FALSE SETUPTIMEOUT=120 SETUPSTRATEGY=parallel
[16:04:58.917] [local output] Starting PSOCK main server
[16:04:58.922] [local output] Workers launched
[16:04:58.922] [local output] Waiting for workers to connect back
[16:04:58.923]  - [local output] 0 workers out of 2 ready
[16:04:59.151]  - [local output] 0 workers out of 2 ready
[16:04:59.152]  - [local output] 1 workers out of 2 ready
[16:04:59.173]  - [local output] 1 workers out of 2 ready
[16:04:59.173]  - [local output] 2 workers out of 2 ready
[16:04:59.173] [local output] Launching of workers completed
[16:04:59.174] [local output] Collecting session information from workers
[16:04:59.174] [local output]  - Worker #1 of 2
[16:04:59.175] [local output]  - Worker #2 of 2
[16:04:59.175] [local output] makeClusterPSOCK() ... done
[16:04:59.189] Packages needed by the future expression (n = 0): <none>
[16:04:59.189] Packages needed by future strategies (n = 0): <none>
[16:04:59.190] {
[16:04:59.190]     {
[16:04:59.190]         {
[16:04:59.190]             ...future.startTime <- base::Sys.time()
[16:04:59.190]             {
[16:04:59.190]                 {
[16:04:59.190]                   {
[16:04:59.190]                     {
[16:04:59.190]                       base::local({
[16:04:59.190]                         has_future <- base::requireNamespace("future", 
[16:04:59.190]                           quietly = TRUE)
[16:04:59.190]                         if (has_future) {
[16:04:59.190]                           ns <- base::getNamespace("future")
[16:04:59.190]                           version <- ns[[".package"]][["version"]]
[16:04:59.190]                           if (is.null(version)) 
[16:04:59.190]                             version <- utils::packageVersion("future")
[16:04:59.190]                         }
[16:04:59.190]                         else {
[16:04:59.190]                           version <- NULL
[16:04:59.190]                         }
[16:04:59.190]                         if (!has_future || version < "1.8.0") {
[16:04:59.190]                           info <- base::c(r_version = base::gsub("R version ", 
[16:04:59.190]                             "", base::R.version$version.string), 
[16:04:59.190]                             platform = base::sprintf("%s (%s-bit)", 
[16:04:59.190]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:04:59.190]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[16:04:59.190]                               "release", "version")], collapse = " "), 
[16:04:59.190]                             hostname = base::Sys.info()[["nodename"]])
[16:04:59.190]                           info <- base::sprintf("%s: %s", base::names(info), 
[16:04:59.190]                             info)
[16:04:59.190]                           info <- base::paste(info, collapse = "; ")
[16:04:59.190]                           if (!has_future) {
[16:04:59.190]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:04:59.190]                               info)
[16:04:59.190]                           }
[16:04:59.190]                           else {
[16:04:59.190]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:04:59.190]                               info, version)
[16:04:59.190]                           }
[16:04:59.190]                           base::stop(msg)
[16:04:59.190]                         }
[16:04:59.190]                       })
[16:04:59.190]                     }
[16:04:59.190]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[16:04:59.190]                     base::options(mc.cores = 1L)
[16:04:59.190]                   }
[16:04:59.190]                   options(future.plan = NULL)
[16:04:59.190]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:04:59.190]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:04:59.190]                 }
[16:04:59.190]                 ...future.workdir <- getwd()
[16:04:59.190]             }
[16:04:59.190]             ...future.oldOptions <- base::as.list(base::.Options)
[16:04:59.190]             ...future.oldEnvVars <- base::Sys.getenv()
[16:04:59.190]         }
[16:04:59.190]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:04:59.190]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:04:59.190]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:04:59.190]             future.globals.resolve = TRUE, future.resolve.recursive = NULL, 
[16:04:59.190]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:04:59.190]             future.stdout.windows.reencode = NULL, width = 80L)
[16:04:59.190]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:04:59.190]             base::names(...future.oldOptions))
[16:04:59.190]     }
[16:04:59.190]     if (FALSE) {
[16:04:59.190]     }
[16:04:59.190]     else {
[16:04:59.190]         if (TRUE) {
[16:04:59.190]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:04:59.190]                 open = "w")
[16:04:59.190]         }
[16:04:59.190]         else {
[16:04:59.190]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:04:59.190]                 windows = "NUL", "/dev/null"), open = "w")
[16:04:59.190]         }
[16:04:59.190]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:04:59.190]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:04:59.190]             base::sink(type = "output", split = FALSE)
[16:04:59.190]             base::close(...future.stdout)
[16:04:59.190]         }, add = TRUE)
[16:04:59.190]     }
[16:04:59.190]     ...future.frame <- base::sys.nframe()
[16:04:59.190]     ...future.conditions <- base::list()
[16:04:59.190]     ...future.rng <- base::globalenv()$.Random.seed
[16:04:59.190]     if (FALSE) {
[16:04:59.190]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:04:59.190]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:04:59.190]     }
[16:04:59.190]     ...future.result <- base::tryCatch({
[16:04:59.190]         base::withCallingHandlers({
[16:04:59.190]             ...future.value <- base::withVisible(base::local({
[16:04:59.190]                 ...future.makeSendCondition <- base::local({
[16:04:59.190]                   sendCondition <- NULL
[16:04:59.190]                   function(frame = 1L) {
[16:04:59.190]                     if (is.function(sendCondition)) 
[16:04:59.190]                       return(sendCondition)
[16:04:59.190]                     ns <- getNamespace("parallel")
[16:04:59.190]                     if (exists("sendData", mode = "function", 
[16:04:59.190]                       envir = ns)) {
[16:04:59.190]                       parallel_sendData <- get("sendData", mode = "function", 
[16:04:59.190]                         envir = ns)
[16:04:59.190]                       envir <- sys.frame(frame)
[16:04:59.190]                       master <- NULL
[16:04:59.190]                       while (!identical(envir, .GlobalEnv) && 
[16:04:59.190]                         !identical(envir, emptyenv())) {
[16:04:59.190]                         if (exists("master", mode = "list", envir = envir, 
[16:04:59.190]                           inherits = FALSE)) {
[16:04:59.190]                           master <- get("master", mode = "list", 
[16:04:59.190]                             envir = envir, inherits = FALSE)
[16:04:59.190]                           if (inherits(master, c("SOCKnode", 
[16:04:59.190]                             "SOCK0node"))) {
[16:04:59.190]                             sendCondition <<- function(cond) {
[16:04:59.190]                               data <- list(type = "VALUE", value = cond, 
[16:04:59.190]                                 success = TRUE)
[16:04:59.190]                               parallel_sendData(master, data)
[16:04:59.190]                             }
[16:04:59.190]                             return(sendCondition)
[16:04:59.190]                           }
[16:04:59.190]                         }
[16:04:59.190]                         frame <- frame + 1L
[16:04:59.190]                         envir <- sys.frame(frame)
[16:04:59.190]                       }
[16:04:59.190]                     }
[16:04:59.190]                     sendCondition <<- function(cond) NULL
[16:04:59.190]                   }
[16:04:59.190]                 })
[16:04:59.190]                 withCallingHandlers({
[16:04:59.190]                   NA
[16:04:59.190]                 }, immediateCondition = function(cond) {
[16:04:59.190]                   sendCondition <- ...future.makeSendCondition()
[16:04:59.190]                   sendCondition(cond)
[16:04:59.190]                   muffleCondition <- function (cond, pattern = "^muffle") 
[16:04:59.190]                   {
[16:04:59.190]                     inherits <- base::inherits
[16:04:59.190]                     invokeRestart <- base::invokeRestart
[16:04:59.190]                     is.null <- base::is.null
[16:04:59.190]                     muffled <- FALSE
[16:04:59.190]                     if (inherits(cond, "message")) {
[16:04:59.190]                       muffled <- grepl(pattern, "muffleMessage")
[16:04:59.190]                       if (muffled) 
[16:04:59.190]                         invokeRestart("muffleMessage")
[16:04:59.190]                     }
[16:04:59.190]                     else if (inherits(cond, "warning")) {
[16:04:59.190]                       muffled <- grepl(pattern, "muffleWarning")
[16:04:59.190]                       if (muffled) 
[16:04:59.190]                         invokeRestart("muffleWarning")
[16:04:59.190]                     }
[16:04:59.190]                     else if (inherits(cond, "condition")) {
[16:04:59.190]                       if (!is.null(pattern)) {
[16:04:59.190]                         computeRestarts <- base::computeRestarts
[16:04:59.190]                         grepl <- base::grepl
[16:04:59.190]                         restarts <- computeRestarts(cond)
[16:04:59.190]                         for (restart in restarts) {
[16:04:59.190]                           name <- restart$name
[16:04:59.190]                           if (is.null(name)) 
[16:04:59.190]                             next
[16:04:59.190]                           if (!grepl(pattern, name)) 
[16:04:59.190]                             next
[16:04:59.190]                           invokeRestart(restart)
[16:04:59.190]                           muffled <- TRUE
[16:04:59.190]                           break
[16:04:59.190]                         }
[16:04:59.190]                       }
[16:04:59.190]                     }
[16:04:59.190]                     invisible(muffled)
[16:04:59.190]                   }
[16:04:59.190]                   muffleCondition(cond)
[16:04:59.190]                 })
[16:04:59.190]             }))
[16:04:59.190]             future::FutureResult(value = ...future.value$value, 
[16:04:59.190]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:04:59.190]                   ...future.rng), globalenv = if (FALSE) 
[16:04:59.190]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:04:59.190]                     ...future.globalenv.names))
[16:04:59.190]                 else NULL, started = ...future.startTime, version = "1.8")
[16:04:59.190]         }, condition = base::local({
[16:04:59.190]             c <- base::c
[16:04:59.190]             inherits <- base::inherits
[16:04:59.190]             invokeRestart <- base::invokeRestart
[16:04:59.190]             length <- base::length
[16:04:59.190]             list <- base::list
[16:04:59.190]             seq.int <- base::seq.int
[16:04:59.190]             signalCondition <- base::signalCondition
[16:04:59.190]             sys.calls <- base::sys.calls
[16:04:59.190]             `[[` <- base::`[[`
[16:04:59.190]             `+` <- base::`+`
[16:04:59.190]             `<<-` <- base::`<<-`
[16:04:59.190]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:04:59.190]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:04:59.190]                   3L)]
[16:04:59.190]             }
[16:04:59.190]             function(cond) {
[16:04:59.190]                 is_error <- inherits(cond, "error")
[16:04:59.190]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:04:59.190]                   NULL)
[16:04:59.190]                 if (is_error) {
[16:04:59.190]                   sessionInformation <- function() {
[16:04:59.190]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:04:59.190]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:04:59.190]                       search = base::search(), system = base::Sys.info())
[16:04:59.190]                   }
[16:04:59.190]                   ...future.conditions[[length(...future.conditions) + 
[16:04:59.190]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:04:59.190]                     cond$call), session = sessionInformation(), 
[16:04:59.190]                     timestamp = base::Sys.time(), signaled = 0L)
[16:04:59.190]                   signalCondition(cond)
[16:04:59.190]                 }
[16:04:59.190]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:04:59.190]                 "immediateCondition"))) {
[16:04:59.190]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:04:59.190]                   ...future.conditions[[length(...future.conditions) + 
[16:04:59.190]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:04:59.190]                   if (TRUE && !signal) {
[16:04:59.190]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:04:59.190]                     {
[16:04:59.190]                       inherits <- base::inherits
[16:04:59.190]                       invokeRestart <- base::invokeRestart
[16:04:59.190]                       is.null <- base::is.null
[16:04:59.190]                       muffled <- FALSE
[16:04:59.190]                       if (inherits(cond, "message")) {
[16:04:59.190]                         muffled <- grepl(pattern, "muffleMessage")
[16:04:59.190]                         if (muffled) 
[16:04:59.190]                           invokeRestart("muffleMessage")
[16:04:59.190]                       }
[16:04:59.190]                       else if (inherits(cond, "warning")) {
[16:04:59.190]                         muffled <- grepl(pattern, "muffleWarning")
[16:04:59.190]                         if (muffled) 
[16:04:59.190]                           invokeRestart("muffleWarning")
[16:04:59.190]                       }
[16:04:59.190]                       else if (inherits(cond, "condition")) {
[16:04:59.190]                         if (!is.null(pattern)) {
[16:04:59.190]                           computeRestarts <- base::computeRestarts
[16:04:59.190]                           grepl <- base::grepl
[16:04:59.190]                           restarts <- computeRestarts(cond)
[16:04:59.190]                           for (restart in restarts) {
[16:04:59.190]                             name <- restart$name
[16:04:59.190]                             if (is.null(name)) 
[16:04:59.190]                               next
[16:04:59.190]                             if (!grepl(pattern, name)) 
[16:04:59.190]                               next
[16:04:59.190]                             invokeRestart(restart)
[16:04:59.190]                             muffled <- TRUE
[16:04:59.190]                             break
[16:04:59.190]                           }
[16:04:59.190]                         }
[16:04:59.190]                       }
[16:04:59.190]                       invisible(muffled)
[16:04:59.190]                     }
[16:04:59.190]                     muffleCondition(cond, pattern = "^muffle")
[16:04:59.190]                   }
[16:04:59.190]                 }
[16:04:59.190]                 else {
[16:04:59.190]                   if (TRUE) {
[16:04:59.190]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:04:59.190]                     {
[16:04:59.190]                       inherits <- base::inherits
[16:04:59.190]                       invokeRestart <- base::invokeRestart
[16:04:59.190]                       is.null <- base::is.null
[16:04:59.190]                       muffled <- FALSE
[16:04:59.190]                       if (inherits(cond, "message")) {
[16:04:59.190]                         muffled <- grepl(pattern, "muffleMessage")
[16:04:59.190]                         if (muffled) 
[16:04:59.190]                           invokeRestart("muffleMessage")
[16:04:59.190]                       }
[16:04:59.190]                       else if (inherits(cond, "warning")) {
[16:04:59.190]                         muffled <- grepl(pattern, "muffleWarning")
[16:04:59.190]                         if (muffled) 
[16:04:59.190]                           invokeRestart("muffleWarning")
[16:04:59.190]                       }
[16:04:59.190]                       else if (inherits(cond, "condition")) {
[16:04:59.190]                         if (!is.null(pattern)) {
[16:04:59.190]                           computeRestarts <- base::computeRestarts
[16:04:59.190]                           grepl <- base::grepl
[16:04:59.190]                           restarts <- computeRestarts(cond)
[16:04:59.190]                           for (restart in restarts) {
[16:04:59.190]                             name <- restart$name
[16:04:59.190]                             if (is.null(name)) 
[16:04:59.190]                               next
[16:04:59.190]                             if (!grepl(pattern, name)) 
[16:04:59.190]                               next
[16:04:59.190]                             invokeRestart(restart)
[16:04:59.190]                             muffled <- TRUE
[16:04:59.190]                             break
[16:04:59.190]                           }
[16:04:59.190]                         }
[16:04:59.190]                       }
[16:04:59.190]                       invisible(muffled)
[16:04:59.190]                     }
[16:04:59.190]                     muffleCondition(cond, pattern = "^muffle")
[16:04:59.190]                   }
[16:04:59.190]                 }
[16:04:59.190]             }
[16:04:59.190]         }))
[16:04:59.190]     }, error = function(ex) {
[16:04:59.190]         base::structure(base::list(value = NULL, visible = NULL, 
[16:04:59.190]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:04:59.190]                 ...future.rng), started = ...future.startTime, 
[16:04:59.190]             finished = Sys.time(), session_uuid = NA_character_, 
[16:04:59.190]             version = "1.8"), class = "FutureResult")
[16:04:59.190]     }, finally = {
[16:04:59.190]         if (!identical(...future.workdir, getwd())) 
[16:04:59.190]             setwd(...future.workdir)
[16:04:59.190]         {
[16:04:59.190]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:04:59.190]                 ...future.oldOptions$nwarnings <- NULL
[16:04:59.190]             }
[16:04:59.190]             base::options(...future.oldOptions)
[16:04:59.190]             if (.Platform$OS.type == "windows") {
[16:04:59.190]                 old_names <- names(...future.oldEnvVars)
[16:04:59.190]                 envs <- base::Sys.getenv()
[16:04:59.190]                 names <- names(envs)
[16:04:59.190]                 common <- intersect(names, old_names)
[16:04:59.190]                 added <- setdiff(names, old_names)
[16:04:59.190]                 removed <- setdiff(old_names, names)
[16:04:59.190]                 changed <- common[...future.oldEnvVars[common] != 
[16:04:59.190]                   envs[common]]
[16:04:59.190]                 NAMES <- toupper(changed)
[16:04:59.190]                 args <- list()
[16:04:59.190]                 for (kk in seq_along(NAMES)) {
[16:04:59.190]                   name <- changed[[kk]]
[16:04:59.190]                   NAME <- NAMES[[kk]]
[16:04:59.190]                   if (name != NAME && is.element(NAME, old_names)) 
[16:04:59.190]                     next
[16:04:59.190]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:04:59.190]                 }
[16:04:59.190]                 NAMES <- toupper(added)
[16:04:59.190]                 for (kk in seq_along(NAMES)) {
[16:04:59.190]                   name <- added[[kk]]
[16:04:59.190]                   NAME <- NAMES[[kk]]
[16:04:59.190]                   if (name != NAME && is.element(NAME, old_names)) 
[16:04:59.190]                     next
[16:04:59.190]                   args[[name]] <- ""
[16:04:59.190]                 }
[16:04:59.190]                 NAMES <- toupper(removed)
[16:04:59.190]                 for (kk in seq_along(NAMES)) {
[16:04:59.190]                   name <- removed[[kk]]
[16:04:59.190]                   NAME <- NAMES[[kk]]
[16:04:59.190]                   if (name != NAME && is.element(NAME, old_names)) 
[16:04:59.190]                     next
[16:04:59.190]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:04:59.190]                 }
[16:04:59.190]                 if (length(args) > 0) 
[16:04:59.190]                   base::do.call(base::Sys.setenv, args = args)
[16:04:59.190]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:04:59.190]             }
[16:04:59.190]             else {
[16:04:59.190]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:04:59.190]             }
[16:04:59.190]             {
[16:04:59.190]                 if (base::length(...future.futureOptionsAdded) > 
[16:04:59.190]                   0L) {
[16:04:59.190]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:04:59.190]                   base::names(opts) <- ...future.futureOptionsAdded
[16:04:59.190]                   base::options(opts)
[16:04:59.190]                 }
[16:04:59.190]                 {
[16:04:59.190]                   {
[16:04:59.190]                     base::options(mc.cores = ...future.mc.cores.old)
[16:04:59.190]                     NULL
[16:04:59.190]                   }
[16:04:59.190]                   options(future.plan = NULL)
[16:04:59.190]                   if (is.na(NA_character_)) 
[16:04:59.190]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:04:59.190]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:04:59.190]                   future::plan(list(function (..., workers = 2L, 
[16:04:59.190]                     envir = parent.frame()) 
[16:04:59.190]                   strategy(..., workers = workers, envir = envir)), 
[16:04:59.190]                     .cleanup = FALSE, .init = FALSE)
[16:04:59.190]                 }
[16:04:59.190]             }
[16:04:59.190]         }
[16:04:59.190]     })
[16:04:59.190]     if (TRUE) {
[16:04:59.190]         base::sink(type = "output", split = FALSE)
[16:04:59.190]         if (TRUE) {
[16:04:59.190]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:04:59.190]         }
[16:04:59.190]         else {
[16:04:59.190]             ...future.result["stdout"] <- base::list(NULL)
[16:04:59.190]         }
[16:04:59.190]         base::close(...future.stdout)
[16:04:59.190]         ...future.stdout <- NULL
[16:04:59.190]     }
[16:04:59.190]     ...future.result$conditions <- ...future.conditions
[16:04:59.190]     ...future.result$finished <- base::Sys.time()
[16:04:59.190]     ...future.result
[16:04:59.190] }
[16:04:59.245] MultisessionFuture started
[16:04:59.245] result() for ClusterFuture ...
[16:04:59.246] receiveMessageFromWorker() for ClusterFuture ...
[16:04:59.246] - Validating connection of MultisessionFuture
[16:04:59.279] - received message: FutureResult
[16:04:59.279] - Received FutureResult
[16:04:59.282] - Erased future from FutureRegistry
[16:04:59.282] result() for ClusterFuture ...
[16:04:59.283] - result already collected: FutureResult
[16:04:59.283] result() for ClusterFuture ... done
[16:04:59.283] receiveMessageFromWorker() for ClusterFuture ... done
[16:04:59.283] result() for ClusterFuture ... done
[16:04:59.283] result() for ClusterFuture ...
[16:04:59.283] - result already collected: FutureResult
[16:04:59.283] result() for ClusterFuture ... done
[16:04:59.284] plan(): plan_init() of ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ... DONE
[16:04:59.284] plan(): nbrOfWorkers() = 2
> 
> env <- new.env()
> 
> ## Create future #1 (consumes background process #1)
> env$a %<-% { 5 }
Warning: R option ‘future.globals.resolve’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘TRUE’
[16:04:59.285] getGlobalsAndPackages() ...
[16:04:59.286] Searching for globals...
[16:04:59.290] - globals found: [1] ‘{’
[16:04:59.290] Searching for globals ... DONE
[16:04:59.290] Resolving globals: TRUE
[16:04:59.290] Resolving any globals that are futures ...
[16:04:59.290] - globals: [1] ‘{’
[16:04:59.290] Resolving any globals that are futures ... DONE
[16:04:59.291] 
[16:04:59.291] 
[16:04:59.291] getGlobalsAndPackages() ... DONE
[16:04:59.292] run() for ‘Future’ ...
[16:04:59.292] - state: ‘created’
[16:04:59.292] - Future backend: ‘FutureStrategy’, ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[16:04:59.303] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[16:04:59.303] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[16:04:59.303]   - Field: ‘node’
[16:04:59.304]   - Field: ‘label’
[16:04:59.304]   - Field: ‘local’
[16:04:59.304]   - Field: ‘owner’
[16:04:59.304]   - Field: ‘envir’
[16:04:59.304]   - Field: ‘workers’
[16:04:59.304]   - Field: ‘packages’
[16:04:59.304]   - Field: ‘gc’
[16:04:59.304]   - Field: ‘conditions’
[16:04:59.304]   - Field: ‘persistent’
[16:04:59.304]   - Field: ‘expr’
[16:04:59.305]   - Field: ‘uuid’
[16:04:59.305]   - Field: ‘seed’
[16:04:59.305]   - Field: ‘version’
[16:04:59.305]   - Field: ‘result’
[16:04:59.305]   - Field: ‘asynchronous’
[16:04:59.305]   - Field: ‘calls’
[16:04:59.305]   - Field: ‘globals’
[16:04:59.305]   - Field: ‘stdout’
[16:04:59.306]   - Field: ‘earlySignal’
[16:04:59.306]   - Field: ‘lazy’
[16:04:59.306]   - Field: ‘state’
[16:04:59.306] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[16:04:59.306] - Launch lazy future ...
[16:04:59.306] Packages needed by the future expression (n = 0): <none>
[16:04:59.306] Packages needed by future strategies (n = 0): <none>
[16:04:59.307] {
[16:04:59.307]     {
[16:04:59.307]         {
[16:04:59.307]             ...future.startTime <- base::Sys.time()
[16:04:59.307]             {
[16:04:59.307]                 {
[16:04:59.307]                   {
[16:04:59.307]                     {
[16:04:59.307]                       base::local({
[16:04:59.307]                         has_future <- base::requireNamespace("future", 
[16:04:59.307]                           quietly = TRUE)
[16:04:59.307]                         if (has_future) {
[16:04:59.307]                           ns <- base::getNamespace("future")
[16:04:59.307]                           version <- ns[[".package"]][["version"]]
[16:04:59.307]                           if (is.null(version)) 
[16:04:59.307]                             version <- utils::packageVersion("future")
[16:04:59.307]                         }
[16:04:59.307]                         else {
[16:04:59.307]                           version <- NULL
[16:04:59.307]                         }
[16:04:59.307]                         if (!has_future || version < "1.8.0") {
[16:04:59.307]                           info <- base::c(r_version = base::gsub("R version ", 
[16:04:59.307]                             "", base::R.version$version.string), 
[16:04:59.307]                             platform = base::sprintf("%s (%s-bit)", 
[16:04:59.307]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:04:59.307]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[16:04:59.307]                               "release", "version")], collapse = " "), 
[16:04:59.307]                             hostname = base::Sys.info()[["nodename"]])
[16:04:59.307]                           info <- base::sprintf("%s: %s", base::names(info), 
[16:04:59.307]                             info)
[16:04:59.307]                           info <- base::paste(info, collapse = "; ")
[16:04:59.307]                           if (!has_future) {
[16:04:59.307]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:04:59.307]                               info)
[16:04:59.307]                           }
[16:04:59.307]                           else {
[16:04:59.307]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:04:59.307]                               info, version)
[16:04:59.307]                           }
[16:04:59.307]                           base::stop(msg)
[16:04:59.307]                         }
[16:04:59.307]                       })
[16:04:59.307]                     }
[16:04:59.307]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[16:04:59.307]                     base::options(mc.cores = 1L)
[16:04:59.307]                   }
[16:04:59.307]                   options(future.plan = NULL)
[16:04:59.307]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:04:59.307]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:04:59.307]                 }
[16:04:59.307]                 ...future.workdir <- getwd()
[16:04:59.307]             }
[16:04:59.307]             ...future.oldOptions <- base::as.list(base::.Options)
[16:04:59.307]             ...future.oldEnvVars <- base::Sys.getenv()
[16:04:59.307]         }
[16:04:59.307]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:04:59.307]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:04:59.307]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:04:59.307]             future.globals.resolve = TRUE, future.resolve.recursive = NULL, 
[16:04:59.307]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:04:59.307]             future.stdout.windows.reencode = NULL, width = 80L)
[16:04:59.307]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:04:59.307]             base::names(...future.oldOptions))
[16:04:59.307]     }
[16:04:59.307]     if (FALSE) {
[16:04:59.307]     }
[16:04:59.307]     else {
[16:04:59.307]         if (TRUE) {
[16:04:59.307]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:04:59.307]                 open = "w")
[16:04:59.307]         }
[16:04:59.307]         else {
[16:04:59.307]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:04:59.307]                 windows = "NUL", "/dev/null"), open = "w")
[16:04:59.307]         }
[16:04:59.307]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:04:59.307]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:04:59.307]             base::sink(type = "output", split = FALSE)
[16:04:59.307]             base::close(...future.stdout)
[16:04:59.307]         }, add = TRUE)
[16:04:59.307]     }
[16:04:59.307]     ...future.frame <- base::sys.nframe()
[16:04:59.307]     ...future.conditions <- base::list()
[16:04:59.307]     ...future.rng <- base::globalenv()$.Random.seed
[16:04:59.307]     if (FALSE) {
[16:04:59.307]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:04:59.307]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:04:59.307]     }
[16:04:59.307]     ...future.result <- base::tryCatch({
[16:04:59.307]         base::withCallingHandlers({
[16:04:59.307]             ...future.value <- base::withVisible(base::local({
[16:04:59.307]                 ...future.makeSendCondition <- base::local({
[16:04:59.307]                   sendCondition <- NULL
[16:04:59.307]                   function(frame = 1L) {
[16:04:59.307]                     if (is.function(sendCondition)) 
[16:04:59.307]                       return(sendCondition)
[16:04:59.307]                     ns <- getNamespace("parallel")
[16:04:59.307]                     if (exists("sendData", mode = "function", 
[16:04:59.307]                       envir = ns)) {
[16:04:59.307]                       parallel_sendData <- get("sendData", mode = "function", 
[16:04:59.307]                         envir = ns)
[16:04:59.307]                       envir <- sys.frame(frame)
[16:04:59.307]                       master <- NULL
[16:04:59.307]                       while (!identical(envir, .GlobalEnv) && 
[16:04:59.307]                         !identical(envir, emptyenv())) {
[16:04:59.307]                         if (exists("master", mode = "list", envir = envir, 
[16:04:59.307]                           inherits = FALSE)) {
[16:04:59.307]                           master <- get("master", mode = "list", 
[16:04:59.307]                             envir = envir, inherits = FALSE)
[16:04:59.307]                           if (inherits(master, c("SOCKnode", 
[16:04:59.307]                             "SOCK0node"))) {
[16:04:59.307]                             sendCondition <<- function(cond) {
[16:04:59.307]                               data <- list(type = "VALUE", value = cond, 
[16:04:59.307]                                 success = TRUE)
[16:04:59.307]                               parallel_sendData(master, data)
[16:04:59.307]                             }
[16:04:59.307]                             return(sendCondition)
[16:04:59.307]                           }
[16:04:59.307]                         }
[16:04:59.307]                         frame <- frame + 1L
[16:04:59.307]                         envir <- sys.frame(frame)
[16:04:59.307]                       }
[16:04:59.307]                     }
[16:04:59.307]                     sendCondition <<- function(cond) NULL
[16:04:59.307]                   }
[16:04:59.307]                 })
[16:04:59.307]                 withCallingHandlers({
[16:04:59.307]                   {
[16:04:59.307]                     5
[16:04:59.307]                   }
[16:04:59.307]                 }, immediateCondition = function(cond) {
[16:04:59.307]                   sendCondition <- ...future.makeSendCondition()
[16:04:59.307]                   sendCondition(cond)
[16:04:59.307]                   muffleCondition <- function (cond, pattern = "^muffle") 
[16:04:59.307]                   {
[16:04:59.307]                     inherits <- base::inherits
[16:04:59.307]                     invokeRestart <- base::invokeRestart
[16:04:59.307]                     is.null <- base::is.null
[16:04:59.307]                     muffled <- FALSE
[16:04:59.307]                     if (inherits(cond, "message")) {
[16:04:59.307]                       muffled <- grepl(pattern, "muffleMessage")
[16:04:59.307]                       if (muffled) 
[16:04:59.307]                         invokeRestart("muffleMessage")
[16:04:59.307]                     }
[16:04:59.307]                     else if (inherits(cond, "warning")) {
[16:04:59.307]                       muffled <- grepl(pattern, "muffleWarning")
[16:04:59.307]                       if (muffled) 
[16:04:59.307]                         invokeRestart("muffleWarning")
[16:04:59.307]                     }
[16:04:59.307]                     else if (inherits(cond, "condition")) {
[16:04:59.307]                       if (!is.null(pattern)) {
[16:04:59.307]                         computeRestarts <- base::computeRestarts
[16:04:59.307]                         grepl <- base::grepl
[16:04:59.307]                         restarts <- computeRestarts(cond)
[16:04:59.307]                         for (restart in restarts) {
[16:04:59.307]                           name <- restart$name
[16:04:59.307]                           if (is.null(name)) 
[16:04:59.307]                             next
[16:04:59.307]                           if (!grepl(pattern, name)) 
[16:04:59.307]                             next
[16:04:59.307]                           invokeRestart(restart)
[16:04:59.307]                           muffled <- TRUE
[16:04:59.307]                           break
[16:04:59.307]                         }
[16:04:59.307]                       }
[16:04:59.307]                     }
[16:04:59.307]                     invisible(muffled)
[16:04:59.307]                   }
[16:04:59.307]                   muffleCondition(cond)
[16:04:59.307]                 })
[16:04:59.307]             }))
[16:04:59.307]             future::FutureResult(value = ...future.value$value, 
[16:04:59.307]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:04:59.307]                   ...future.rng), globalenv = if (FALSE) 
[16:04:59.307]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:04:59.307]                     ...future.globalenv.names))
[16:04:59.307]                 else NULL, started = ...future.startTime, version = "1.8")
[16:04:59.307]         }, condition = base::local({
[16:04:59.307]             c <- base::c
[16:04:59.307]             inherits <- base::inherits
[16:04:59.307]             invokeRestart <- base::invokeRestart
[16:04:59.307]             length <- base::length
[16:04:59.307]             list <- base::list
[16:04:59.307]             seq.int <- base::seq.int
[16:04:59.307]             signalCondition <- base::signalCondition
[16:04:59.307]             sys.calls <- base::sys.calls
[16:04:59.307]             `[[` <- base::`[[`
[16:04:59.307]             `+` <- base::`+`
[16:04:59.307]             `<<-` <- base::`<<-`
[16:04:59.307]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:04:59.307]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:04:59.307]                   3L)]
[16:04:59.307]             }
[16:04:59.307]             function(cond) {
[16:04:59.307]                 is_error <- inherits(cond, "error")
[16:04:59.307]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:04:59.307]                   NULL)
[16:04:59.307]                 if (is_error) {
[16:04:59.307]                   sessionInformation <- function() {
[16:04:59.307]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:04:59.307]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:04:59.307]                       search = base::search(), system = base::Sys.info())
[16:04:59.307]                   }
[16:04:59.307]                   ...future.conditions[[length(...future.conditions) + 
[16:04:59.307]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:04:59.307]                     cond$call), session = sessionInformation(), 
[16:04:59.307]                     timestamp = base::Sys.time(), signaled = 0L)
[16:04:59.307]                   signalCondition(cond)
[16:04:59.307]                 }
[16:04:59.307]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:04:59.307]                 "immediateCondition"))) {
[16:04:59.307]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:04:59.307]                   ...future.conditions[[length(...future.conditions) + 
[16:04:59.307]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:04:59.307]                   if (TRUE && !signal) {
[16:04:59.307]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:04:59.307]                     {
[16:04:59.307]                       inherits <- base::inherits
[16:04:59.307]                       invokeRestart <- base::invokeRestart
[16:04:59.307]                       is.null <- base::is.null
[16:04:59.307]                       muffled <- FALSE
[16:04:59.307]                       if (inherits(cond, "message")) {
[16:04:59.307]                         muffled <- grepl(pattern, "muffleMessage")
[16:04:59.307]                         if (muffled) 
[16:04:59.307]                           invokeRestart("muffleMessage")
[16:04:59.307]                       }
[16:04:59.307]                       else if (inherits(cond, "warning")) {
[16:04:59.307]                         muffled <- grepl(pattern, "muffleWarning")
[16:04:59.307]                         if (muffled) 
[16:04:59.307]                           invokeRestart("muffleWarning")
[16:04:59.307]                       }
[16:04:59.307]                       else if (inherits(cond, "condition")) {
[16:04:59.307]                         if (!is.null(pattern)) {
[16:04:59.307]                           computeRestarts <- base::computeRestarts
[16:04:59.307]                           grepl <- base::grepl
[16:04:59.307]                           restarts <- computeRestarts(cond)
[16:04:59.307]                           for (restart in restarts) {
[16:04:59.307]                             name <- restart$name
[16:04:59.307]                             if (is.null(name)) 
[16:04:59.307]                               next
[16:04:59.307]                             if (!grepl(pattern, name)) 
[16:04:59.307]                               next
[16:04:59.307]                             invokeRestart(restart)
[16:04:59.307]                             muffled <- TRUE
[16:04:59.307]                             break
[16:04:59.307]                           }
[16:04:59.307]                         }
[16:04:59.307]                       }
[16:04:59.307]                       invisible(muffled)
[16:04:59.307]                     }
[16:04:59.307]                     muffleCondition(cond, pattern = "^muffle")
[16:04:59.307]                   }
[16:04:59.307]                 }
[16:04:59.307]                 else {
[16:04:59.307]                   if (TRUE) {
[16:04:59.307]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:04:59.307]                     {
[16:04:59.307]                       inherits <- base::inherits
[16:04:59.307]                       invokeRestart <- base::invokeRestart
[16:04:59.307]                       is.null <- base::is.null
[16:04:59.307]                       muffled <- FALSE
[16:04:59.307]                       if (inherits(cond, "message")) {
[16:04:59.307]                         muffled <- grepl(pattern, "muffleMessage")
[16:04:59.307]                         if (muffled) 
[16:04:59.307]                           invokeRestart("muffleMessage")
[16:04:59.307]                       }
[16:04:59.307]                       else if (inherits(cond, "warning")) {
[16:04:59.307]                         muffled <- grepl(pattern, "muffleWarning")
[16:04:59.307]                         if (muffled) 
[16:04:59.307]                           invokeRestart("muffleWarning")
[16:04:59.307]                       }
[16:04:59.307]                       else if (inherits(cond, "condition")) {
[16:04:59.307]                         if (!is.null(pattern)) {
[16:04:59.307]                           computeRestarts <- base::computeRestarts
[16:04:59.307]                           grepl <- base::grepl
[16:04:59.307]                           restarts <- computeRestarts(cond)
[16:04:59.307]                           for (restart in restarts) {
[16:04:59.307]                             name <- restart$name
[16:04:59.307]                             if (is.null(name)) 
[16:04:59.307]                               next
[16:04:59.307]                             if (!grepl(pattern, name)) 
[16:04:59.307]                               next
[16:04:59.307]                             invokeRestart(restart)
[16:04:59.307]                             muffled <- TRUE
[16:04:59.307]                             break
[16:04:59.307]                           }
[16:04:59.307]                         }
[16:04:59.307]                       }
[16:04:59.307]                       invisible(muffled)
[16:04:59.307]                     }
[16:04:59.307]                     muffleCondition(cond, pattern = "^muffle")
[16:04:59.307]                   }
[16:04:59.307]                 }
[16:04:59.307]             }
[16:04:59.307]         }))
[16:04:59.307]     }, error = function(ex) {
[16:04:59.307]         base::structure(base::list(value = NULL, visible = NULL, 
[16:04:59.307]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:04:59.307]                 ...future.rng), started = ...future.startTime, 
[16:04:59.307]             finished = Sys.time(), session_uuid = NA_character_, 
[16:04:59.307]             version = "1.8"), class = "FutureResult")
[16:04:59.307]     }, finally = {
[16:04:59.307]         if (!identical(...future.workdir, getwd())) 
[16:04:59.307]             setwd(...future.workdir)
[16:04:59.307]         {
[16:04:59.307]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:04:59.307]                 ...future.oldOptions$nwarnings <- NULL
[16:04:59.307]             }
[16:04:59.307]             base::options(...future.oldOptions)
[16:04:59.307]             if (.Platform$OS.type == "windows") {
[16:04:59.307]                 old_names <- names(...future.oldEnvVars)
[16:04:59.307]                 envs <- base::Sys.getenv()
[16:04:59.307]                 names <- names(envs)
[16:04:59.307]                 common <- intersect(names, old_names)
[16:04:59.307]                 added <- setdiff(names, old_names)
[16:04:59.307]                 removed <- setdiff(old_names, names)
[16:04:59.307]                 changed <- common[...future.oldEnvVars[common] != 
[16:04:59.307]                   envs[common]]
[16:04:59.307]                 NAMES <- toupper(changed)
[16:04:59.307]                 args <- list()
[16:04:59.307]                 for (kk in seq_along(NAMES)) {
[16:04:59.307]                   name <- changed[[kk]]
[16:04:59.307]                   NAME <- NAMES[[kk]]
[16:04:59.307]                   if (name != NAME && is.element(NAME, old_names)) 
[16:04:59.307]                     next
[16:04:59.307]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:04:59.307]                 }
[16:04:59.307]                 NAMES <- toupper(added)
[16:04:59.307]                 for (kk in seq_along(NAMES)) {
[16:04:59.307]                   name <- added[[kk]]
[16:04:59.307]                   NAME <- NAMES[[kk]]
[16:04:59.307]                   if (name != NAME && is.element(NAME, old_names)) 
[16:04:59.307]                     next
[16:04:59.307]                   args[[name]] <- ""
[16:04:59.307]                 }
[16:04:59.307]                 NAMES <- toupper(removed)
[16:04:59.307]                 for (kk in seq_along(NAMES)) {
[16:04:59.307]                   name <- removed[[kk]]
[16:04:59.307]                   NAME <- NAMES[[kk]]
[16:04:59.307]                   if (name != NAME && is.element(NAME, old_names)) 
[16:04:59.307]                     next
[16:04:59.307]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:04:59.307]                 }
[16:04:59.307]                 if (length(args) > 0) 
[16:04:59.307]                   base::do.call(base::Sys.setenv, args = args)
[16:04:59.307]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:04:59.307]             }
[16:04:59.307]             else {
[16:04:59.307]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:04:59.307]             }
[16:04:59.307]             {
[16:04:59.307]                 if (base::length(...future.futureOptionsAdded) > 
[16:04:59.307]                   0L) {
[16:04:59.307]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:04:59.307]                   base::names(opts) <- ...future.futureOptionsAdded
[16:04:59.307]                   base::options(opts)
[16:04:59.307]                 }
[16:04:59.307]                 {
[16:04:59.307]                   {
[16:04:59.307]                     base::options(mc.cores = ...future.mc.cores.old)
[16:04:59.307]                     NULL
[16:04:59.307]                   }
[16:04:59.307]                   options(future.plan = NULL)
[16:04:59.307]                   if (is.na(NA_character_)) 
[16:04:59.307]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:04:59.307]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:04:59.307]                   future::plan(list(function (..., workers = 2L, 
[16:04:59.307]                     envir = parent.frame()) 
[16:04:59.307]                   strategy(..., workers = workers, envir = envir)), 
[16:04:59.307]                     .cleanup = FALSE, .init = FALSE)
[16:04:59.307]                 }
[16:04:59.307]             }
[16:04:59.307]         }
[16:04:59.307]     })
[16:04:59.307]     if (TRUE) {
[16:04:59.307]         base::sink(type = "output", split = FALSE)
[16:04:59.307]         if (TRUE) {
[16:04:59.307]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:04:59.307]         }
[16:04:59.307]         else {
[16:04:59.307]             ...future.result["stdout"] <- base::list(NULL)
[16:04:59.307]         }
[16:04:59.307]         base::close(...future.stdout)
[16:04:59.307]         ...future.stdout <- NULL
[16:04:59.307]     }
[16:04:59.307]     ...future.result$conditions <- ...future.conditions
[16:04:59.307]     ...future.result$finished <- base::Sys.time()
[16:04:59.307]     ...future.result
[16:04:59.307] }
[16:04:59.310] MultisessionFuture started
[16:04:59.311] - Launch lazy future ... done
[16:04:59.311] run() for ‘MultisessionFuture’ ... done
> 
> ## Create future #2 (consumes background process #2)
> b %<-% { "a" }
Warning: R option ‘future.globals.resolve’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘TRUE’
[16:04:59.311] getGlobalsAndPackages() ...
[16:04:59.312] Searching for globals...
[16:04:59.312] - globals found: [1] ‘{’
[16:04:59.312] Searching for globals ... DONE
[16:04:59.313] Resolving globals: TRUE
[16:04:59.313] Resolving any globals that are futures ...
[16:04:59.313] - globals: [1] ‘{’
[16:04:59.313] Resolving any globals that are futures ... DONE
[16:04:59.313] 
[16:04:59.313] 
[16:04:59.313] getGlobalsAndPackages() ... DONE
[16:04:59.314] run() for ‘Future’ ...
[16:04:59.314] - state: ‘created’
[16:04:59.314] - Future backend: ‘FutureStrategy’, ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[16:04:59.325] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[16:04:59.325] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[16:04:59.325]   - Field: ‘node’
[16:04:59.325]   - Field: ‘label’
[16:04:59.325]   - Field: ‘local’
[16:04:59.325]   - Field: ‘owner’
[16:04:59.326]   - Field: ‘envir’
[16:04:59.326]   - Field: ‘workers’
[16:04:59.326]   - Field: ‘packages’
[16:04:59.326]   - Field: ‘gc’
[16:04:59.326]   - Field: ‘conditions’
[16:04:59.326]   - Field: ‘persistent’
[16:04:59.326]   - Field: ‘expr’
[16:04:59.326]   - Field: ‘uuid’
[16:04:59.326]   - Field: ‘seed’
[16:04:59.327]   - Field: ‘version’
[16:04:59.327]   - Field: ‘result’
[16:04:59.327]   - Field: ‘asynchronous’
[16:04:59.327]   - Field: ‘calls’
[16:04:59.327]   - Field: ‘globals’
[16:04:59.327]   - Field: ‘stdout’
[16:04:59.327]   - Field: ‘earlySignal’
[16:04:59.327]   - Field: ‘lazy’
[16:04:59.328]   - Field: ‘state’
[16:04:59.328] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[16:04:59.328] - Launch lazy future ...
[16:04:59.328] Packages needed by the future expression (n = 0): <none>
[16:04:59.328] Packages needed by future strategies (n = 0): <none>
[16:04:59.329] {
[16:04:59.329]     {
[16:04:59.329]         {
[16:04:59.329]             ...future.startTime <- base::Sys.time()
[16:04:59.329]             {
[16:04:59.329]                 {
[16:04:59.329]                   {
[16:04:59.329]                     {
[16:04:59.329]                       base::local({
[16:04:59.329]                         has_future <- base::requireNamespace("future", 
[16:04:59.329]                           quietly = TRUE)
[16:04:59.329]                         if (has_future) {
[16:04:59.329]                           ns <- base::getNamespace("future")
[16:04:59.329]                           version <- ns[[".package"]][["version"]]
[16:04:59.329]                           if (is.null(version)) 
[16:04:59.329]                             version <- utils::packageVersion("future")
[16:04:59.329]                         }
[16:04:59.329]                         else {
[16:04:59.329]                           version <- NULL
[16:04:59.329]                         }
[16:04:59.329]                         if (!has_future || version < "1.8.0") {
[16:04:59.329]                           info <- base::c(r_version = base::gsub("R version ", 
[16:04:59.329]                             "", base::R.version$version.string), 
[16:04:59.329]                             platform = base::sprintf("%s (%s-bit)", 
[16:04:59.329]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:04:59.329]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[16:04:59.329]                               "release", "version")], collapse = " "), 
[16:04:59.329]                             hostname = base::Sys.info()[["nodename"]])
[16:04:59.329]                           info <- base::sprintf("%s: %s", base::names(info), 
[16:04:59.329]                             info)
[16:04:59.329]                           info <- base::paste(info, collapse = "; ")
[16:04:59.329]                           if (!has_future) {
[16:04:59.329]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:04:59.329]                               info)
[16:04:59.329]                           }
[16:04:59.329]                           else {
[16:04:59.329]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:04:59.329]                               info, version)
[16:04:59.329]                           }
[16:04:59.329]                           base::stop(msg)
[16:04:59.329]                         }
[16:04:59.329]                       })
[16:04:59.329]                     }
[16:04:59.329]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[16:04:59.329]                     base::options(mc.cores = 1L)
[16:04:59.329]                   }
[16:04:59.329]                   options(future.plan = NULL)
[16:04:59.329]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:04:59.329]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:04:59.329]                 }
[16:04:59.329]                 ...future.workdir <- getwd()
[16:04:59.329]             }
[16:04:59.329]             ...future.oldOptions <- base::as.list(base::.Options)
[16:04:59.329]             ...future.oldEnvVars <- base::Sys.getenv()
[16:04:59.329]         }
[16:04:59.329]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:04:59.329]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:04:59.329]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:04:59.329]             future.globals.resolve = TRUE, future.resolve.recursive = NULL, 
[16:04:59.329]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:04:59.329]             future.stdout.windows.reencode = NULL, width = 80L)
[16:04:59.329]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:04:59.329]             base::names(...future.oldOptions))
[16:04:59.329]     }
[16:04:59.329]     if (FALSE) {
[16:04:59.329]     }
[16:04:59.329]     else {
[16:04:59.329]         if (TRUE) {
[16:04:59.329]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:04:59.329]                 open = "w")
[16:04:59.329]         }
[16:04:59.329]         else {
[16:04:59.329]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:04:59.329]                 windows = "NUL", "/dev/null"), open = "w")
[16:04:59.329]         }
[16:04:59.329]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:04:59.329]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:04:59.329]             base::sink(type = "output", split = FALSE)
[16:04:59.329]             base::close(...future.stdout)
[16:04:59.329]         }, add = TRUE)
[16:04:59.329]     }
[16:04:59.329]     ...future.frame <- base::sys.nframe()
[16:04:59.329]     ...future.conditions <- base::list()
[16:04:59.329]     ...future.rng <- base::globalenv()$.Random.seed
[16:04:59.329]     if (FALSE) {
[16:04:59.329]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:04:59.329]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:04:59.329]     }
[16:04:59.329]     ...future.result <- base::tryCatch({
[16:04:59.329]         base::withCallingHandlers({
[16:04:59.329]             ...future.value <- base::withVisible(base::local({
[16:04:59.329]                 ...future.makeSendCondition <- base::local({
[16:04:59.329]                   sendCondition <- NULL
[16:04:59.329]                   function(frame = 1L) {
[16:04:59.329]                     if (is.function(sendCondition)) 
[16:04:59.329]                       return(sendCondition)
[16:04:59.329]                     ns <- getNamespace("parallel")
[16:04:59.329]                     if (exists("sendData", mode = "function", 
[16:04:59.329]                       envir = ns)) {
[16:04:59.329]                       parallel_sendData <- get("sendData", mode = "function", 
[16:04:59.329]                         envir = ns)
[16:04:59.329]                       envir <- sys.frame(frame)
[16:04:59.329]                       master <- NULL
[16:04:59.329]                       while (!identical(envir, .GlobalEnv) && 
[16:04:59.329]                         !identical(envir, emptyenv())) {
[16:04:59.329]                         if (exists("master", mode = "list", envir = envir, 
[16:04:59.329]                           inherits = FALSE)) {
[16:04:59.329]                           master <- get("master", mode = "list", 
[16:04:59.329]                             envir = envir, inherits = FALSE)
[16:04:59.329]                           if (inherits(master, c("SOCKnode", 
[16:04:59.329]                             "SOCK0node"))) {
[16:04:59.329]                             sendCondition <<- function(cond) {
[16:04:59.329]                               data <- list(type = "VALUE", value = cond, 
[16:04:59.329]                                 success = TRUE)
[16:04:59.329]                               parallel_sendData(master, data)
[16:04:59.329]                             }
[16:04:59.329]                             return(sendCondition)
[16:04:59.329]                           }
[16:04:59.329]                         }
[16:04:59.329]                         frame <- frame + 1L
[16:04:59.329]                         envir <- sys.frame(frame)
[16:04:59.329]                       }
[16:04:59.329]                     }
[16:04:59.329]                     sendCondition <<- function(cond) NULL
[16:04:59.329]                   }
[16:04:59.329]                 })
[16:04:59.329]                 withCallingHandlers({
[16:04:59.329]                   {
[16:04:59.329]                     "a"
[16:04:59.329]                   }
[16:04:59.329]                 }, immediateCondition = function(cond) {
[16:04:59.329]                   sendCondition <- ...future.makeSendCondition()
[16:04:59.329]                   sendCondition(cond)
[16:04:59.329]                   muffleCondition <- function (cond, pattern = "^muffle") 
[16:04:59.329]                   {
[16:04:59.329]                     inherits <- base::inherits
[16:04:59.329]                     invokeRestart <- base::invokeRestart
[16:04:59.329]                     is.null <- base::is.null
[16:04:59.329]                     muffled <- FALSE
[16:04:59.329]                     if (inherits(cond, "message")) {
[16:04:59.329]                       muffled <- grepl(pattern, "muffleMessage")
[16:04:59.329]                       if (muffled) 
[16:04:59.329]                         invokeRestart("muffleMessage")
[16:04:59.329]                     }
[16:04:59.329]                     else if (inherits(cond, "warning")) {
[16:04:59.329]                       muffled <- grepl(pattern, "muffleWarning")
[16:04:59.329]                       if (muffled) 
[16:04:59.329]                         invokeRestart("muffleWarning")
[16:04:59.329]                     }
[16:04:59.329]                     else if (inherits(cond, "condition")) {
[16:04:59.329]                       if (!is.null(pattern)) {
[16:04:59.329]                         computeRestarts <- base::computeRestarts
[16:04:59.329]                         grepl <- base::grepl
[16:04:59.329]                         restarts <- computeRestarts(cond)
[16:04:59.329]                         for (restart in restarts) {
[16:04:59.329]                           name <- restart$name
[16:04:59.329]                           if (is.null(name)) 
[16:04:59.329]                             next
[16:04:59.329]                           if (!grepl(pattern, name)) 
[16:04:59.329]                             next
[16:04:59.329]                           invokeRestart(restart)
[16:04:59.329]                           muffled <- TRUE
[16:04:59.329]                           break
[16:04:59.329]                         }
[16:04:59.329]                       }
[16:04:59.329]                     }
[16:04:59.329]                     invisible(muffled)
[16:04:59.329]                   }
[16:04:59.329]                   muffleCondition(cond)
[16:04:59.329]                 })
[16:04:59.329]             }))
[16:04:59.329]             future::FutureResult(value = ...future.value$value, 
[16:04:59.329]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:04:59.329]                   ...future.rng), globalenv = if (FALSE) 
[16:04:59.329]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:04:59.329]                     ...future.globalenv.names))
[16:04:59.329]                 else NULL, started = ...future.startTime, version = "1.8")
[16:04:59.329]         }, condition = base::local({
[16:04:59.329]             c <- base::c
[16:04:59.329]             inherits <- base::inherits
[16:04:59.329]             invokeRestart <- base::invokeRestart
[16:04:59.329]             length <- base::length
[16:04:59.329]             list <- base::list
[16:04:59.329]             seq.int <- base::seq.int
[16:04:59.329]             signalCondition <- base::signalCondition
[16:04:59.329]             sys.calls <- base::sys.calls
[16:04:59.329]             `[[` <- base::`[[`
[16:04:59.329]             `+` <- base::`+`
[16:04:59.329]             `<<-` <- base::`<<-`
[16:04:59.329]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:04:59.329]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:04:59.329]                   3L)]
[16:04:59.329]             }
[16:04:59.329]             function(cond) {
[16:04:59.329]                 is_error <- inherits(cond, "error")
[16:04:59.329]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:04:59.329]                   NULL)
[16:04:59.329]                 if (is_error) {
[16:04:59.329]                   sessionInformation <- function() {
[16:04:59.329]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:04:59.329]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:04:59.329]                       search = base::search(), system = base::Sys.info())
[16:04:59.329]                   }
[16:04:59.329]                   ...future.conditions[[length(...future.conditions) + 
[16:04:59.329]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:04:59.329]                     cond$call), session = sessionInformation(), 
[16:04:59.329]                     timestamp = base::Sys.time(), signaled = 0L)
[16:04:59.329]                   signalCondition(cond)
[16:04:59.329]                 }
[16:04:59.329]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:04:59.329]                 "immediateCondition"))) {
[16:04:59.329]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:04:59.329]                   ...future.conditions[[length(...future.conditions) + 
[16:04:59.329]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:04:59.329]                   if (TRUE && !signal) {
[16:04:59.329]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:04:59.329]                     {
[16:04:59.329]                       inherits <- base::inherits
[16:04:59.329]                       invokeRestart <- base::invokeRestart
[16:04:59.329]                       is.null <- base::is.null
[16:04:59.329]                       muffled <- FALSE
[16:04:59.329]                       if (inherits(cond, "message")) {
[16:04:59.329]                         muffled <- grepl(pattern, "muffleMessage")
[16:04:59.329]                         if (muffled) 
[16:04:59.329]                           invokeRestart("muffleMessage")
[16:04:59.329]                       }
[16:04:59.329]                       else if (inherits(cond, "warning")) {
[16:04:59.329]                         muffled <- grepl(pattern, "muffleWarning")
[16:04:59.329]                         if (muffled) 
[16:04:59.329]                           invokeRestart("muffleWarning")
[16:04:59.329]                       }
[16:04:59.329]                       else if (inherits(cond, "condition")) {
[16:04:59.329]                         if (!is.null(pattern)) {
[16:04:59.329]                           computeRestarts <- base::computeRestarts
[16:04:59.329]                           grepl <- base::grepl
[16:04:59.329]                           restarts <- computeRestarts(cond)
[16:04:59.329]                           for (restart in restarts) {
[16:04:59.329]                             name <- restart$name
[16:04:59.329]                             if (is.null(name)) 
[16:04:59.329]                               next
[16:04:59.329]                             if (!grepl(pattern, name)) 
[16:04:59.329]                               next
[16:04:59.329]                             invokeRestart(restart)
[16:04:59.329]                             muffled <- TRUE
[16:04:59.329]                             break
[16:04:59.329]                           }
[16:04:59.329]                         }
[16:04:59.329]                       }
[16:04:59.329]                       invisible(muffled)
[16:04:59.329]                     }
[16:04:59.329]                     muffleCondition(cond, pattern = "^muffle")
[16:04:59.329]                   }
[16:04:59.329]                 }
[16:04:59.329]                 else {
[16:04:59.329]                   if (TRUE) {
[16:04:59.329]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:04:59.329]                     {
[16:04:59.329]                       inherits <- base::inherits
[16:04:59.329]                       invokeRestart <- base::invokeRestart
[16:04:59.329]                       is.null <- base::is.null
[16:04:59.329]                       muffled <- FALSE
[16:04:59.329]                       if (inherits(cond, "message")) {
[16:04:59.329]                         muffled <- grepl(pattern, "muffleMessage")
[16:04:59.329]                         if (muffled) 
[16:04:59.329]                           invokeRestart("muffleMessage")
[16:04:59.329]                       }
[16:04:59.329]                       else if (inherits(cond, "warning")) {
[16:04:59.329]                         muffled <- grepl(pattern, "muffleWarning")
[16:04:59.329]                         if (muffled) 
[16:04:59.329]                           invokeRestart("muffleWarning")
[16:04:59.329]                       }
[16:04:59.329]                       else if (inherits(cond, "condition")) {
[16:04:59.329]                         if (!is.null(pattern)) {
[16:04:59.329]                           computeRestarts <- base::computeRestarts
[16:04:59.329]                           grepl <- base::grepl
[16:04:59.329]                           restarts <- computeRestarts(cond)
[16:04:59.329]                           for (restart in restarts) {
[16:04:59.329]                             name <- restart$name
[16:04:59.329]                             if (is.null(name)) 
[16:04:59.329]                               next
[16:04:59.329]                             if (!grepl(pattern, name)) 
[16:04:59.329]                               next
[16:04:59.329]                             invokeRestart(restart)
[16:04:59.329]                             muffled <- TRUE
[16:04:59.329]                             break
[16:04:59.329]                           }
[16:04:59.329]                         }
[16:04:59.329]                       }
[16:04:59.329]                       invisible(muffled)
[16:04:59.329]                     }
[16:04:59.329]                     muffleCondition(cond, pattern = "^muffle")
[16:04:59.329]                   }
[16:04:59.329]                 }
[16:04:59.329]             }
[16:04:59.329]         }))
[16:04:59.329]     }, error = function(ex) {
[16:04:59.329]         base::structure(base::list(value = NULL, visible = NULL, 
[16:04:59.329]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:04:59.329]                 ...future.rng), started = ...future.startTime, 
[16:04:59.329]             finished = Sys.time(), session_uuid = NA_character_, 
[16:04:59.329]             version = "1.8"), class = "FutureResult")
[16:04:59.329]     }, finally = {
[16:04:59.329]         if (!identical(...future.workdir, getwd())) 
[16:04:59.329]             setwd(...future.workdir)
[16:04:59.329]         {
[16:04:59.329]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:04:59.329]                 ...future.oldOptions$nwarnings <- NULL
[16:04:59.329]             }
[16:04:59.329]             base::options(...future.oldOptions)
[16:04:59.329]             if (.Platform$OS.type == "windows") {
[16:04:59.329]                 old_names <- names(...future.oldEnvVars)
[16:04:59.329]                 envs <- base::Sys.getenv()
[16:04:59.329]                 names <- names(envs)
[16:04:59.329]                 common <- intersect(names, old_names)
[16:04:59.329]                 added <- setdiff(names, old_names)
[16:04:59.329]                 removed <- setdiff(old_names, names)
[16:04:59.329]                 changed <- common[...future.oldEnvVars[common] != 
[16:04:59.329]                   envs[common]]
[16:04:59.329]                 NAMES <- toupper(changed)
[16:04:59.329]                 args <- list()
[16:04:59.329]                 for (kk in seq_along(NAMES)) {
[16:04:59.329]                   name <- changed[[kk]]
[16:04:59.329]                   NAME <- NAMES[[kk]]
[16:04:59.329]                   if (name != NAME && is.element(NAME, old_names)) 
[16:04:59.329]                     next
[16:04:59.329]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:04:59.329]                 }
[16:04:59.329]                 NAMES <- toupper(added)
[16:04:59.329]                 for (kk in seq_along(NAMES)) {
[16:04:59.329]                   name <- added[[kk]]
[16:04:59.329]                   NAME <- NAMES[[kk]]
[16:04:59.329]                   if (name != NAME && is.element(NAME, old_names)) 
[16:04:59.329]                     next
[16:04:59.329]                   args[[name]] <- ""
[16:04:59.329]                 }
[16:04:59.329]                 NAMES <- toupper(removed)
[16:04:59.329]                 for (kk in seq_along(NAMES)) {
[16:04:59.329]                   name <- removed[[kk]]
[16:04:59.329]                   NAME <- NAMES[[kk]]
[16:04:59.329]                   if (name != NAME && is.element(NAME, old_names)) 
[16:04:59.329]                     next
[16:04:59.329]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:04:59.329]                 }
[16:04:59.329]                 if (length(args) > 0) 
[16:04:59.329]                   base::do.call(base::Sys.setenv, args = args)
[16:04:59.329]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:04:59.329]             }
[16:04:59.329]             else {
[16:04:59.329]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:04:59.329]             }
[16:04:59.329]             {
[16:04:59.329]                 if (base::length(...future.futureOptionsAdded) > 
[16:04:59.329]                   0L) {
[16:04:59.329]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:04:59.329]                   base::names(opts) <- ...future.futureOptionsAdded
[16:04:59.329]                   base::options(opts)
[16:04:59.329]                 }
[16:04:59.329]                 {
[16:04:59.329]                   {
[16:04:59.329]                     base::options(mc.cores = ...future.mc.cores.old)
[16:04:59.329]                     NULL
[16:04:59.329]                   }
[16:04:59.329]                   options(future.plan = NULL)
[16:04:59.329]                   if (is.na(NA_character_)) 
[16:04:59.329]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:04:59.329]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:04:59.329]                   future::plan(list(function (..., workers = 2L, 
[16:04:59.329]                     envir = parent.frame()) 
[16:04:59.329]                   strategy(..., workers = workers, envir = envir)), 
[16:04:59.329]                     .cleanup = FALSE, .init = FALSE)
[16:04:59.329]                 }
[16:04:59.329]             }
[16:04:59.329]         }
[16:04:59.329]     })
[16:04:59.329]     if (TRUE) {
[16:04:59.329]         base::sink(type = "output", split = FALSE)
[16:04:59.329]         if (TRUE) {
[16:04:59.329]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:04:59.329]         }
[16:04:59.329]         else {
[16:04:59.329]             ...future.result["stdout"] <- base::list(NULL)
[16:04:59.329]         }
[16:04:59.329]         base::close(...future.stdout)
[16:04:59.329]         ...future.stdout <- NULL
[16:04:59.329]     }
[16:04:59.329]     ...future.result$conditions <- ...future.conditions
[16:04:59.329]     ...future.result$finished <- base::Sys.time()
[16:04:59.329]     ...future.result
[16:04:59.329] }
[16:04:59.383] MultisessionFuture started
[16:04:59.383] - Launch lazy future ... done
[16:04:59.383] run() for ‘MultisessionFuture’ ... done
> 
> ## Resolve future #2 (frees up background process #2)
> message(sprintf("b = %s\n", sQuote(b)))
[16:04:59.384] result() for ClusterFuture ...
[16:04:59.384] receiveMessageFromWorker() for ClusterFuture ...
[16:04:59.384] - Validating connection of MultisessionFuture
[16:04:59.416] - received message: FutureResult
[16:04:59.420] - Received FutureResult
[16:04:59.420] - Erased future from FutureRegistry
[16:04:59.420] result() for ClusterFuture ...
[16:04:59.420] - result already collected: FutureResult
[16:04:59.420] result() for ClusterFuture ... done
[16:04:59.420] receiveMessageFromWorker() for ClusterFuture ... done
[16:04:59.420] result() for ClusterFuture ... done
[16:04:59.421] result() for ClusterFuture ...
[16:04:59.421] - result already collected: FutureResult
[16:04:59.421] result() for ClusterFuture ... done
b = ‘a’

> 
> ## Create future #3 (consumes background process #2)
> ## THIS IS THE TRICKY PART:
> ## Two globals are identified `env` and `b` and both are resolved.
> ## However, object `env[[b]]` (here element `a` of environment `env`)
> ## is not touched and therefore not resolved (since it is a future)
> ## unless environment `env` is resolved recursively. (Issue #49)
> y %<-% { env[[b]] }
Warning: R option ‘future.globals.resolve’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘TRUE’
[16:04:59.421] getGlobalsAndPackages() ...
[16:04:59.421] Searching for globals...
[16:04:59.425] - globals found: [4] ‘{’, ‘[[’, ‘env’, ‘b’
[16:04:59.426] Searching for globals ... DONE
[16:04:59.426] Resolving globals: TRUE
[16:04:59.426] Resolving any globals that are futures ...
[16:04:59.426] - globals: [4] ‘{’, ‘[[’, ‘env’, ‘b’
[16:04:59.426] Resolving any globals that are futures ... DONE
[16:04:59.426] Resolving futures part of globals (recursively) ...
[16:04:59.427] resolve() on list ...
[16:04:59.427]  recursive: 99
[16:04:59.428]  length: 2
[16:04:59.428]  elements: ‘env’, ‘b’
[16:04:59.428] resolve() on environment ...
[16:04:59.428]  recursive: 98
[16:04:59.429]  elements: [1] ‘.future_a’, ‘a’
[16:04:59.429] receiveMessageFromWorker() for ClusterFuture ...
[16:04:59.430] - Validating connection of MultisessionFuture
[16:04:59.430] - received message: FutureResult
[16:04:59.430] - Received FutureResult
[16:04:59.430] - Erased future from FutureRegistry
[16:04:59.430] result() for ClusterFuture ...
[16:04:59.430] - result already collected: FutureResult
[16:04:59.430] result() for ClusterFuture ... done
[16:04:59.430] receiveMessageFromWorker() for ClusterFuture ... done
[16:04:59.430] Future #1
[16:04:59.431] result() for ClusterFuture ...
[16:04:59.431] - result already collected: FutureResult
[16:04:59.431] result() for ClusterFuture ... done
[16:04:59.431] result() for ClusterFuture ...
[16:04:59.431] - result already collected: FutureResult
[16:04:59.431] result() for ClusterFuture ... done
[16:04:59.431] A MultisessionFuture was resolved
[16:04:59.431]  length: 0 (resolved future 1)
[16:04:59.431] resolve() on environment ... DONE
[16:04:59.432]  length: 1 (resolved future 1)
[16:04:59.432]  length: 0 (resolved future 2)
[16:04:59.432] resolve() on list ... DONE
[16:04:59.432] - globals: [2] ‘env’, ‘b’
[16:04:59.432] Resolving futures part of globals (recursively) ... DONE
[16:04:59.433] The total size of the 2 globals is 4.29 KiB (4392 bytes)
[16:04:59.433] The total size of the 2 globals exported for future expression (‘{; env[[b]]; }’) is 4.29 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘env’ (4.18 KiB of class ‘environment’) and ‘b’ (112 bytes of class ‘character’)
[16:04:59.433] - globals: [2] ‘env’, ‘b’
[16:04:59.434] 
[16:04:59.434] getGlobalsAndPackages() ... DONE
[16:04:59.434] run() for ‘Future’ ...
[16:04:59.434] - state: ‘created’
[16:04:59.434] - Future backend: ‘FutureStrategy’, ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[16:04:59.445] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[16:04:59.445] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[16:04:59.445]   - Field: ‘node’
[16:04:59.445]   - Field: ‘label’
[16:04:59.445]   - Field: ‘local’
[16:04:59.445]   - Field: ‘owner’
[16:04:59.445]   - Field: ‘envir’
[16:04:59.445]   - Field: ‘workers’
[16:04:59.445]   - Field: ‘packages’
[16:04:59.445]   - Field: ‘gc’
[16:04:59.446]   - Field: ‘conditions’
[16:04:59.446]   - Field: ‘persistent’
[16:04:59.446]   - Field: ‘expr’
[16:04:59.446]   - Field: ‘uuid’
[16:04:59.446]   - Field: ‘seed’
[16:04:59.446]   - Field: ‘version’
[16:04:59.446]   - Field: ‘result’
[16:04:59.446]   - Field: ‘asynchronous’
[16:04:59.446]   - Field: ‘calls’
[16:04:59.446]   - Field: ‘globals’
[16:04:59.446]   - Field: ‘stdout’
[16:04:59.447]   - Field: ‘earlySignal’
[16:04:59.447]   - Field: ‘lazy’
[16:04:59.447]   - Field: ‘state’
[16:04:59.447] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[16:04:59.447] - Launch lazy future ...
[16:04:59.447] Packages needed by the future expression (n = 0): <none>
[16:04:59.447] Packages needed by future strategies (n = 0): <none>
[16:04:59.448] {
[16:04:59.448]     {
[16:04:59.448]         {
[16:04:59.448]             ...future.startTime <- base::Sys.time()
[16:04:59.448]             {
[16:04:59.448]                 {
[16:04:59.448]                   {
[16:04:59.448]                     {
[16:04:59.448]                       base::local({
[16:04:59.448]                         has_future <- base::requireNamespace("future", 
[16:04:59.448]                           quietly = TRUE)
[16:04:59.448]                         if (has_future) {
[16:04:59.448]                           ns <- base::getNamespace("future")
[16:04:59.448]                           version <- ns[[".package"]][["version"]]
[16:04:59.448]                           if (is.null(version)) 
[16:04:59.448]                             version <- utils::packageVersion("future")
[16:04:59.448]                         }
[16:04:59.448]                         else {
[16:04:59.448]                           version <- NULL
[16:04:59.448]                         }
[16:04:59.448]                         if (!has_future || version < "1.8.0") {
[16:04:59.448]                           info <- base::c(r_version = base::gsub("R version ", 
[16:04:59.448]                             "", base::R.version$version.string), 
[16:04:59.448]                             platform = base::sprintf("%s (%s-bit)", 
[16:04:59.448]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:04:59.448]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[16:04:59.448]                               "release", "version")], collapse = " "), 
[16:04:59.448]                             hostname = base::Sys.info()[["nodename"]])
[16:04:59.448]                           info <- base::sprintf("%s: %s", base::names(info), 
[16:04:59.448]                             info)
[16:04:59.448]                           info <- base::paste(info, collapse = "; ")
[16:04:59.448]                           if (!has_future) {
[16:04:59.448]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:04:59.448]                               info)
[16:04:59.448]                           }
[16:04:59.448]                           else {
[16:04:59.448]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:04:59.448]                               info, version)
[16:04:59.448]                           }
[16:04:59.448]                           base::stop(msg)
[16:04:59.448]                         }
[16:04:59.448]                       })
[16:04:59.448]                     }
[16:04:59.448]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[16:04:59.448]                     base::options(mc.cores = 1L)
[16:04:59.448]                   }
[16:04:59.448]                   options(future.plan = NULL)
[16:04:59.448]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:04:59.448]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:04:59.448]                 }
[16:04:59.448]                 ...future.workdir <- getwd()
[16:04:59.448]             }
[16:04:59.448]             ...future.oldOptions <- base::as.list(base::.Options)
[16:04:59.448]             ...future.oldEnvVars <- base::Sys.getenv()
[16:04:59.448]         }
[16:04:59.448]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:04:59.448]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:04:59.448]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:04:59.448]             future.globals.resolve = TRUE, future.resolve.recursive = NULL, 
[16:04:59.448]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:04:59.448]             future.stdout.windows.reencode = NULL, width = 80L)
[16:04:59.448]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:04:59.448]             base::names(...future.oldOptions))
[16:04:59.448]     }
[16:04:59.448]     if (FALSE) {
[16:04:59.448]     }
[16:04:59.448]     else {
[16:04:59.448]         if (TRUE) {
[16:04:59.448]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:04:59.448]                 open = "w")
[16:04:59.448]         }
[16:04:59.448]         else {
[16:04:59.448]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:04:59.448]                 windows = "NUL", "/dev/null"), open = "w")
[16:04:59.448]         }
[16:04:59.448]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:04:59.448]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:04:59.448]             base::sink(type = "output", split = FALSE)
[16:04:59.448]             base::close(...future.stdout)
[16:04:59.448]         }, add = TRUE)
[16:04:59.448]     }
[16:04:59.448]     ...future.frame <- base::sys.nframe()
[16:04:59.448]     ...future.conditions <- base::list()
[16:04:59.448]     ...future.rng <- base::globalenv()$.Random.seed
[16:04:59.448]     if (FALSE) {
[16:04:59.448]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:04:59.448]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:04:59.448]     }
[16:04:59.448]     ...future.result <- base::tryCatch({
[16:04:59.448]         base::withCallingHandlers({
[16:04:59.448]             ...future.value <- base::withVisible(base::local({
[16:04:59.448]                 ...future.makeSendCondition <- base::local({
[16:04:59.448]                   sendCondition <- NULL
[16:04:59.448]                   function(frame = 1L) {
[16:04:59.448]                     if (is.function(sendCondition)) 
[16:04:59.448]                       return(sendCondition)
[16:04:59.448]                     ns <- getNamespace("parallel")
[16:04:59.448]                     if (exists("sendData", mode = "function", 
[16:04:59.448]                       envir = ns)) {
[16:04:59.448]                       parallel_sendData <- get("sendData", mode = "function", 
[16:04:59.448]                         envir = ns)
[16:04:59.448]                       envir <- sys.frame(frame)
[16:04:59.448]                       master <- NULL
[16:04:59.448]                       while (!identical(envir, .GlobalEnv) && 
[16:04:59.448]                         !identical(envir, emptyenv())) {
[16:04:59.448]                         if (exists("master", mode = "list", envir = envir, 
[16:04:59.448]                           inherits = FALSE)) {
[16:04:59.448]                           master <- get("master", mode = "list", 
[16:04:59.448]                             envir = envir, inherits = FALSE)
[16:04:59.448]                           if (inherits(master, c("SOCKnode", 
[16:04:59.448]                             "SOCK0node"))) {
[16:04:59.448]                             sendCondition <<- function(cond) {
[16:04:59.448]                               data <- list(type = "VALUE", value = cond, 
[16:04:59.448]                                 success = TRUE)
[16:04:59.448]                               parallel_sendData(master, data)
[16:04:59.448]                             }
[16:04:59.448]                             return(sendCondition)
[16:04:59.448]                           }
[16:04:59.448]                         }
[16:04:59.448]                         frame <- frame + 1L
[16:04:59.448]                         envir <- sys.frame(frame)
[16:04:59.448]                       }
[16:04:59.448]                     }
[16:04:59.448]                     sendCondition <<- function(cond) NULL
[16:04:59.448]                   }
[16:04:59.448]                 })
[16:04:59.448]                 withCallingHandlers({
[16:04:59.448]                   {
[16:04:59.448]                     env[[b]]
[16:04:59.448]                   }
[16:04:59.448]                 }, immediateCondition = function(cond) {
[16:04:59.448]                   sendCondition <- ...future.makeSendCondition()
[16:04:59.448]                   sendCondition(cond)
[16:04:59.448]                   muffleCondition <- function (cond, pattern = "^muffle") 
[16:04:59.448]                   {
[16:04:59.448]                     inherits <- base::inherits
[16:04:59.448]                     invokeRestart <- base::invokeRestart
[16:04:59.448]                     is.null <- base::is.null
[16:04:59.448]                     muffled <- FALSE
[16:04:59.448]                     if (inherits(cond, "message")) {
[16:04:59.448]                       muffled <- grepl(pattern, "muffleMessage")
[16:04:59.448]                       if (muffled) 
[16:04:59.448]                         invokeRestart("muffleMessage")
[16:04:59.448]                     }
[16:04:59.448]                     else if (inherits(cond, "warning")) {
[16:04:59.448]                       muffled <- grepl(pattern, "muffleWarning")
[16:04:59.448]                       if (muffled) 
[16:04:59.448]                         invokeRestart("muffleWarning")
[16:04:59.448]                     }
[16:04:59.448]                     else if (inherits(cond, "condition")) {
[16:04:59.448]                       if (!is.null(pattern)) {
[16:04:59.448]                         computeRestarts <- base::computeRestarts
[16:04:59.448]                         grepl <- base::grepl
[16:04:59.448]                         restarts <- computeRestarts(cond)
[16:04:59.448]                         for (restart in restarts) {
[16:04:59.448]                           name <- restart$name
[16:04:59.448]                           if (is.null(name)) 
[16:04:59.448]                             next
[16:04:59.448]                           if (!grepl(pattern, name)) 
[16:04:59.448]                             next
[16:04:59.448]                           invokeRestart(restart)
[16:04:59.448]                           muffled <- TRUE
[16:04:59.448]                           break
[16:04:59.448]                         }
[16:04:59.448]                       }
[16:04:59.448]                     }
[16:04:59.448]                     invisible(muffled)
[16:04:59.448]                   }
[16:04:59.448]                   muffleCondition(cond)
[16:04:59.448]                 })
[16:04:59.448]             }))
[16:04:59.448]             future::FutureResult(value = ...future.value$value, 
[16:04:59.448]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:04:59.448]                   ...future.rng), globalenv = if (FALSE) 
[16:04:59.448]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:04:59.448]                     ...future.globalenv.names))
[16:04:59.448]                 else NULL, started = ...future.startTime, version = "1.8")
[16:04:59.448]         }, condition = base::local({
[16:04:59.448]             c <- base::c
[16:04:59.448]             inherits <- base::inherits
[16:04:59.448]             invokeRestart <- base::invokeRestart
[16:04:59.448]             length <- base::length
[16:04:59.448]             list <- base::list
[16:04:59.448]             seq.int <- base::seq.int
[16:04:59.448]             signalCondition <- base::signalCondition
[16:04:59.448]             sys.calls <- base::sys.calls
[16:04:59.448]             `[[` <- base::`[[`
[16:04:59.448]             `+` <- base::`+`
[16:04:59.448]             `<<-` <- base::`<<-`
[16:04:59.448]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:04:59.448]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:04:59.448]                   3L)]
[16:04:59.448]             }
[16:04:59.448]             function(cond) {
[16:04:59.448]                 is_error <- inherits(cond, "error")
[16:04:59.448]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:04:59.448]                   NULL)
[16:04:59.448]                 if (is_error) {
[16:04:59.448]                   sessionInformation <- function() {
[16:04:59.448]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:04:59.448]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:04:59.448]                       search = base::search(), system = base::Sys.info())
[16:04:59.448]                   }
[16:04:59.448]                   ...future.conditions[[length(...future.conditions) + 
[16:04:59.448]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:04:59.448]                     cond$call), session = sessionInformation(), 
[16:04:59.448]                     timestamp = base::Sys.time(), signaled = 0L)
[16:04:59.448]                   signalCondition(cond)
[16:04:59.448]                 }
[16:04:59.448]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:04:59.448]                 "immediateCondition"))) {
[16:04:59.448]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:04:59.448]                   ...future.conditions[[length(...future.conditions) + 
[16:04:59.448]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:04:59.448]                   if (TRUE && !signal) {
[16:04:59.448]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:04:59.448]                     {
[16:04:59.448]                       inherits <- base::inherits
[16:04:59.448]                       invokeRestart <- base::invokeRestart
[16:04:59.448]                       is.null <- base::is.null
[16:04:59.448]                       muffled <- FALSE
[16:04:59.448]                       if (inherits(cond, "message")) {
[16:04:59.448]                         muffled <- grepl(pattern, "muffleMessage")
[16:04:59.448]                         if (muffled) 
[16:04:59.448]                           invokeRestart("muffleMessage")
[16:04:59.448]                       }
[16:04:59.448]                       else if (inherits(cond, "warning")) {
[16:04:59.448]                         muffled <- grepl(pattern, "muffleWarning")
[16:04:59.448]                         if (muffled) 
[16:04:59.448]                           invokeRestart("muffleWarning")
[16:04:59.448]                       }
[16:04:59.448]                       else if (inherits(cond, "condition")) {
[16:04:59.448]                         if (!is.null(pattern)) {
[16:04:59.448]                           computeRestarts <- base::computeRestarts
[16:04:59.448]                           grepl <- base::grepl
[16:04:59.448]                           restarts <- computeRestarts(cond)
[16:04:59.448]                           for (restart in restarts) {
[16:04:59.448]                             name <- restart$name
[16:04:59.448]                             if (is.null(name)) 
[16:04:59.448]                               next
[16:04:59.448]                             if (!grepl(pattern, name)) 
[16:04:59.448]                               next
[16:04:59.448]                             invokeRestart(restart)
[16:04:59.448]                             muffled <- TRUE
[16:04:59.448]                             break
[16:04:59.448]                           }
[16:04:59.448]                         }
[16:04:59.448]                       }
[16:04:59.448]                       invisible(muffled)
[16:04:59.448]                     }
[16:04:59.448]                     muffleCondition(cond, pattern = "^muffle")
[16:04:59.448]                   }
[16:04:59.448]                 }
[16:04:59.448]                 else {
[16:04:59.448]                   if (TRUE) {
[16:04:59.448]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:04:59.448]                     {
[16:04:59.448]                       inherits <- base::inherits
[16:04:59.448]                       invokeRestart <- base::invokeRestart
[16:04:59.448]                       is.null <- base::is.null
[16:04:59.448]                       muffled <- FALSE
[16:04:59.448]                       if (inherits(cond, "message")) {
[16:04:59.448]                         muffled <- grepl(pattern, "muffleMessage")
[16:04:59.448]                         if (muffled) 
[16:04:59.448]                           invokeRestart("muffleMessage")
[16:04:59.448]                       }
[16:04:59.448]                       else if (inherits(cond, "warning")) {
[16:04:59.448]                         muffled <- grepl(pattern, "muffleWarning")
[16:04:59.448]                         if (muffled) 
[16:04:59.448]                           invokeRestart("muffleWarning")
[16:04:59.448]                       }
[16:04:59.448]                       else if (inherits(cond, "condition")) {
[16:04:59.448]                         if (!is.null(pattern)) {
[16:04:59.448]                           computeRestarts <- base::computeRestarts
[16:04:59.448]                           grepl <- base::grepl
[16:04:59.448]                           restarts <- computeRestarts(cond)
[16:04:59.448]                           for (restart in restarts) {
[16:04:59.448]                             name <- restart$name
[16:04:59.448]                             if (is.null(name)) 
[16:04:59.448]                               next
[16:04:59.448]                             if (!grepl(pattern, name)) 
[16:04:59.448]                               next
[16:04:59.448]                             invokeRestart(restart)
[16:04:59.448]                             muffled <- TRUE
[16:04:59.448]                             break
[16:04:59.448]                           }
[16:04:59.448]                         }
[16:04:59.448]                       }
[16:04:59.448]                       invisible(muffled)
[16:04:59.448]                     }
[16:04:59.448]                     muffleCondition(cond, pattern = "^muffle")
[16:04:59.448]                   }
[16:04:59.448]                 }
[16:04:59.448]             }
[16:04:59.448]         }))
[16:04:59.448]     }, error = function(ex) {
[16:04:59.448]         base::structure(base::list(value = NULL, visible = NULL, 
[16:04:59.448]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:04:59.448]                 ...future.rng), started = ...future.startTime, 
[16:04:59.448]             finished = Sys.time(), session_uuid = NA_character_, 
[16:04:59.448]             version = "1.8"), class = "FutureResult")
[16:04:59.448]     }, finally = {
[16:04:59.448]         if (!identical(...future.workdir, getwd())) 
[16:04:59.448]             setwd(...future.workdir)
[16:04:59.448]         {
[16:04:59.448]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:04:59.448]                 ...future.oldOptions$nwarnings <- NULL
[16:04:59.448]             }
[16:04:59.448]             base::options(...future.oldOptions)
[16:04:59.448]             if (.Platform$OS.type == "windows") {
[16:04:59.448]                 old_names <- names(...future.oldEnvVars)
[16:04:59.448]                 envs <- base::Sys.getenv()
[16:04:59.448]                 names <- names(envs)
[16:04:59.448]                 common <- intersect(names, old_names)
[16:04:59.448]                 added <- setdiff(names, old_names)
[16:04:59.448]                 removed <- setdiff(old_names, names)
[16:04:59.448]                 changed <- common[...future.oldEnvVars[common] != 
[16:04:59.448]                   envs[common]]
[16:04:59.448]                 NAMES <- toupper(changed)
[16:04:59.448]                 args <- list()
[16:04:59.448]                 for (kk in seq_along(NAMES)) {
[16:04:59.448]                   name <- changed[[kk]]
[16:04:59.448]                   NAME <- NAMES[[kk]]
[16:04:59.448]                   if (name != NAME && is.element(NAME, old_names)) 
[16:04:59.448]                     next
[16:04:59.448]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:04:59.448]                 }
[16:04:59.448]                 NAMES <- toupper(added)
[16:04:59.448]                 for (kk in seq_along(NAMES)) {
[16:04:59.448]                   name <- added[[kk]]
[16:04:59.448]                   NAME <- NAMES[[kk]]
[16:04:59.448]                   if (name != NAME && is.element(NAME, old_names)) 
[16:04:59.448]                     next
[16:04:59.448]                   args[[name]] <- ""
[16:04:59.448]                 }
[16:04:59.448]                 NAMES <- toupper(removed)
[16:04:59.448]                 for (kk in seq_along(NAMES)) {
[16:04:59.448]                   name <- removed[[kk]]
[16:04:59.448]                   NAME <- NAMES[[kk]]
[16:04:59.448]                   if (name != NAME && is.element(NAME, old_names)) 
[16:04:59.448]                     next
[16:04:59.448]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:04:59.448]                 }
[16:04:59.448]                 if (length(args) > 0) 
[16:04:59.448]                   base::do.call(base::Sys.setenv, args = args)
[16:04:59.448]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:04:59.448]             }
[16:04:59.448]             else {
[16:04:59.448]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:04:59.448]             }
[16:04:59.448]             {
[16:04:59.448]                 if (base::length(...future.futureOptionsAdded) > 
[16:04:59.448]                   0L) {
[16:04:59.448]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:04:59.448]                   base::names(opts) <- ...future.futureOptionsAdded
[16:04:59.448]                   base::options(opts)
[16:04:59.448]                 }
[16:04:59.448]                 {
[16:04:59.448]                   {
[16:04:59.448]                     base::options(mc.cores = ...future.mc.cores.old)
[16:04:59.448]                     NULL
[16:04:59.448]                   }
[16:04:59.448]                   options(future.plan = NULL)
[16:04:59.448]                   if (is.na(NA_character_)) 
[16:04:59.448]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:04:59.448]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:04:59.448]                   future::plan(list(function (..., workers = 2L, 
[16:04:59.448]                     envir = parent.frame()) 
[16:04:59.448]                   strategy(..., workers = workers, envir = envir)), 
[16:04:59.448]                     .cleanup = FALSE, .init = FALSE)
[16:04:59.448]                 }
[16:04:59.448]             }
[16:04:59.448]         }
[16:04:59.448]     })
[16:04:59.448]     if (TRUE) {
[16:04:59.448]         base::sink(type = "output", split = FALSE)
[16:04:59.448]         if (TRUE) {
[16:04:59.448]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:04:59.448]         }
[16:04:59.448]         else {
[16:04:59.448]             ...future.result["stdout"] <- base::list(NULL)
[16:04:59.448]         }
[16:04:59.448]         base::close(...future.stdout)
[16:04:59.448]         ...future.stdout <- NULL
[16:04:59.448]     }
[16:04:59.448]     ...future.result$conditions <- ...future.conditions
[16:04:59.448]     ...future.result$finished <- base::Sys.time()
[16:04:59.448]     ...future.result
[16:04:59.448] }
[16:04:59.450] Exporting 2 global objects (4.29 KiB) to cluster node #1 ...
[16:04:59.451] Exporting ‘env’ (4.18 KiB) to cluster node #1 ...
[16:04:59.462] Exporting ‘env’ (4.18 KiB) to cluster node #1 ... DONE
[16:04:59.462] Exporting ‘b’ (112 bytes) to cluster node #1 ...
[16:04:59.462] Exporting ‘b’ (112 bytes) to cluster node #1 ... DONE
[16:04:59.463] Exporting 2 global objects (4.29 KiB) to cluster node #1 ... DONE
[16:04:59.463] MultisessionFuture started
[16:04:59.463] - Launch lazy future ... done
[16:04:59.463] run() for ‘MultisessionFuture’ ... done
> 
> ## Resolve future #3
> message(sprintf("y = %s\n", y))
[16:04:59.464] result() for ClusterFuture ...
[16:04:59.464] receiveMessageFromWorker() for ClusterFuture ...
[16:04:59.464] - Validating connection of MultisessionFuture
[16:04:59.506] - received message: FutureResult
[16:04:59.506] - Received FutureResult
[16:04:59.506] - Erased future from FutureRegistry
[16:04:59.506] result() for ClusterFuture ...
[16:04:59.506] - result already collected: FutureResult
[16:04:59.506] result() for ClusterFuture ... done
[16:04:59.506] receiveMessageFromWorker() for ClusterFuture ... done
[16:04:59.506] result() for ClusterFuture ... done
[16:04:59.507] result() for ClusterFuture ...
[16:04:59.507] - result already collected: FutureResult
[16:04:59.507] result() for ClusterFuture ... done
y = 5

> 
> ## Resolve future #1 if not already done
> str(as.list(env))
[16:04:59.507] result() for ClusterFuture ...
[16:04:59.507] - result already collected: FutureResult
[16:04:59.507] result() for ClusterFuture ... done
[16:04:59.507] result() for ClusterFuture ...
[16:04:59.507] - result already collected: FutureResult
[16:04:59.508] result() for ClusterFuture ... done
List of 1
 $ a: num 5
> 
> ## Create future #4
> ## Since future #1 is resolved it will work at this point
> y %<-% { env[[b]] }
Warning: R option ‘future.globals.resolve’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘TRUE’
[16:04:59.509] getGlobalsAndPackages() ...
[16:04:59.509] Searching for globals...
[16:04:59.510] - globals found: [4] ‘{’, ‘[[’, ‘env’, ‘b’
[16:04:59.510] Searching for globals ... DONE
[16:04:59.510] Resolving globals: TRUE
[16:04:59.510] Resolving any globals that are futures ...
[16:04:59.510] - globals: [4] ‘{’, ‘[[’, ‘env’, ‘b’
[16:04:59.510] Resolving any globals that are futures ... DONE
[16:04:59.511] Resolving futures part of globals (recursively) ...
[16:04:59.511] resolve() on list ...
[16:04:59.511]  recursive: 99
[16:04:59.511]  length: 2
[16:04:59.511]  elements: ‘env’, ‘b’
[16:04:59.511] resolve() on environment ...
[16:04:59.511]  recursive: 98
[16:04:59.512]  elements: [1] ‘a’
[16:04:59.512]  length: 0 (resolved future 1)
[16:04:59.512] resolve() on environment ... DONE
[16:04:59.512]  length: 1 (resolved future 1)
[16:04:59.512]  length: 0 (resolved future 2)
[16:04:59.512] resolve() on list ... DONE
[16:04:59.512] - globals: [2] ‘env’, ‘b’
[16:04:59.512] Resolving futures part of globals (recursively) ... DONE
[16:04:59.513] The total size of the 2 globals is 168 bytes (168 bytes)
[16:04:59.513] The total size of the 2 globals exported for future expression (‘{; env[[b]]; }’) is 168 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘b’ (112 bytes of class ‘character’) and ‘env’ (56 bytes of class ‘environment’)
[16:04:59.513] - globals: [2] ‘env’, ‘b’
[16:04:59.513] 
[16:04:59.513] getGlobalsAndPackages() ... DONE
[16:04:59.514] run() for ‘Future’ ...
[16:04:59.514] - state: ‘created’
[16:04:59.514] - Future backend: ‘FutureStrategy’, ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[16:04:59.526] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[16:04:59.526] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[16:04:59.526]   - Field: ‘node’
[16:04:59.526]   - Field: ‘label’
[16:04:59.526]   - Field: ‘local’
[16:04:59.526]   - Field: ‘owner’
[16:04:59.526]   - Field: ‘envir’
[16:04:59.526]   - Field: ‘workers’
[16:04:59.526]   - Field: ‘packages’
[16:04:59.526]   - Field: ‘gc’
[16:04:59.527]   - Field: ‘conditions’
[16:04:59.527]   - Field: ‘persistent’
[16:04:59.527]   - Field: ‘expr’
[16:04:59.527]   - Field: ‘uuid’
[16:04:59.527]   - Field: ‘seed’
[16:04:59.527]   - Field: ‘version’
[16:04:59.527]   - Field: ‘result’
[16:04:59.527]   - Field: ‘asynchronous’
[16:04:59.527]   - Field: ‘calls’
[16:04:59.527]   - Field: ‘globals’
[16:04:59.528]   - Field: ‘stdout’
[16:04:59.528]   - Field: ‘earlySignal’
[16:04:59.528]   - Field: ‘lazy’
[16:04:59.528]   - Field: ‘state’
[16:04:59.528] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[16:04:59.528] - Launch lazy future ...
[16:04:59.528] Packages needed by the future expression (n = 0): <none>
[16:04:59.528] Packages needed by future strategies (n = 0): <none>
[16:04:59.529] {
[16:04:59.529]     {
[16:04:59.529]         {
[16:04:59.529]             ...future.startTime <- base::Sys.time()
[16:04:59.529]             {
[16:04:59.529]                 {
[16:04:59.529]                   {
[16:04:59.529]                     {
[16:04:59.529]                       base::local({
[16:04:59.529]                         has_future <- base::requireNamespace("future", 
[16:04:59.529]                           quietly = TRUE)
[16:04:59.529]                         if (has_future) {
[16:04:59.529]                           ns <- base::getNamespace("future")
[16:04:59.529]                           version <- ns[[".package"]][["version"]]
[16:04:59.529]                           if (is.null(version)) 
[16:04:59.529]                             version <- utils::packageVersion("future")
[16:04:59.529]                         }
[16:04:59.529]                         else {
[16:04:59.529]                           version <- NULL
[16:04:59.529]                         }
[16:04:59.529]                         if (!has_future || version < "1.8.0") {
[16:04:59.529]                           info <- base::c(r_version = base::gsub("R version ", 
[16:04:59.529]                             "", base::R.version$version.string), 
[16:04:59.529]                             platform = base::sprintf("%s (%s-bit)", 
[16:04:59.529]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:04:59.529]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[16:04:59.529]                               "release", "version")], collapse = " "), 
[16:04:59.529]                             hostname = base::Sys.info()[["nodename"]])
[16:04:59.529]                           info <- base::sprintf("%s: %s", base::names(info), 
[16:04:59.529]                             info)
[16:04:59.529]                           info <- base::paste(info, collapse = "; ")
[16:04:59.529]                           if (!has_future) {
[16:04:59.529]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:04:59.529]                               info)
[16:04:59.529]                           }
[16:04:59.529]                           else {
[16:04:59.529]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:04:59.529]                               info, version)
[16:04:59.529]                           }
[16:04:59.529]                           base::stop(msg)
[16:04:59.529]                         }
[16:04:59.529]                       })
[16:04:59.529]                     }
[16:04:59.529]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[16:04:59.529]                     base::options(mc.cores = 1L)
[16:04:59.529]                   }
[16:04:59.529]                   options(future.plan = NULL)
[16:04:59.529]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:04:59.529]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:04:59.529]                 }
[16:04:59.529]                 ...future.workdir <- getwd()
[16:04:59.529]             }
[16:04:59.529]             ...future.oldOptions <- base::as.list(base::.Options)
[16:04:59.529]             ...future.oldEnvVars <- base::Sys.getenv()
[16:04:59.529]         }
[16:04:59.529]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:04:59.529]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:04:59.529]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:04:59.529]             future.globals.resolve = TRUE, future.resolve.recursive = NULL, 
[16:04:59.529]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:04:59.529]             future.stdout.windows.reencode = NULL, width = 80L)
[16:04:59.529]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:04:59.529]             base::names(...future.oldOptions))
[16:04:59.529]     }
[16:04:59.529]     if (FALSE) {
[16:04:59.529]     }
[16:04:59.529]     else {
[16:04:59.529]         if (TRUE) {
[16:04:59.529]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:04:59.529]                 open = "w")
[16:04:59.529]         }
[16:04:59.529]         else {
[16:04:59.529]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:04:59.529]                 windows = "NUL", "/dev/null"), open = "w")
[16:04:59.529]         }
[16:04:59.529]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:04:59.529]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:04:59.529]             base::sink(type = "output", split = FALSE)
[16:04:59.529]             base::close(...future.stdout)
[16:04:59.529]         }, add = TRUE)
[16:04:59.529]     }
[16:04:59.529]     ...future.frame <- base::sys.nframe()
[16:04:59.529]     ...future.conditions <- base::list()
[16:04:59.529]     ...future.rng <- base::globalenv()$.Random.seed
[16:04:59.529]     if (FALSE) {
[16:04:59.529]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:04:59.529]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:04:59.529]     }
[16:04:59.529]     ...future.result <- base::tryCatch({
[16:04:59.529]         base::withCallingHandlers({
[16:04:59.529]             ...future.value <- base::withVisible(base::local({
[16:04:59.529]                 ...future.makeSendCondition <- base::local({
[16:04:59.529]                   sendCondition <- NULL
[16:04:59.529]                   function(frame = 1L) {
[16:04:59.529]                     if (is.function(sendCondition)) 
[16:04:59.529]                       return(sendCondition)
[16:04:59.529]                     ns <- getNamespace("parallel")
[16:04:59.529]                     if (exists("sendData", mode = "function", 
[16:04:59.529]                       envir = ns)) {
[16:04:59.529]                       parallel_sendData <- get("sendData", mode = "function", 
[16:04:59.529]                         envir = ns)
[16:04:59.529]                       envir <- sys.frame(frame)
[16:04:59.529]                       master <- NULL
[16:04:59.529]                       while (!identical(envir, .GlobalEnv) && 
[16:04:59.529]                         !identical(envir, emptyenv())) {
[16:04:59.529]                         if (exists("master", mode = "list", envir = envir, 
[16:04:59.529]                           inherits = FALSE)) {
[16:04:59.529]                           master <- get("master", mode = "list", 
[16:04:59.529]                             envir = envir, inherits = FALSE)
[16:04:59.529]                           if (inherits(master, c("SOCKnode", 
[16:04:59.529]                             "SOCK0node"))) {
[16:04:59.529]                             sendCondition <<- function(cond) {
[16:04:59.529]                               data <- list(type = "VALUE", value = cond, 
[16:04:59.529]                                 success = TRUE)
[16:04:59.529]                               parallel_sendData(master, data)
[16:04:59.529]                             }
[16:04:59.529]                             return(sendCondition)
[16:04:59.529]                           }
[16:04:59.529]                         }
[16:04:59.529]                         frame <- frame + 1L
[16:04:59.529]                         envir <- sys.frame(frame)
[16:04:59.529]                       }
[16:04:59.529]                     }
[16:04:59.529]                     sendCondition <<- function(cond) NULL
[16:04:59.529]                   }
[16:04:59.529]                 })
[16:04:59.529]                 withCallingHandlers({
[16:04:59.529]                   {
[16:04:59.529]                     env[[b]]
[16:04:59.529]                   }
[16:04:59.529]                 }, immediateCondition = function(cond) {
[16:04:59.529]                   sendCondition <- ...future.makeSendCondition()
[16:04:59.529]                   sendCondition(cond)
[16:04:59.529]                   muffleCondition <- function (cond, pattern = "^muffle") 
[16:04:59.529]                   {
[16:04:59.529]                     inherits <- base::inherits
[16:04:59.529]                     invokeRestart <- base::invokeRestart
[16:04:59.529]                     is.null <- base::is.null
[16:04:59.529]                     muffled <- FALSE
[16:04:59.529]                     if (inherits(cond, "message")) {
[16:04:59.529]                       muffled <- grepl(pattern, "muffleMessage")
[16:04:59.529]                       if (muffled) 
[16:04:59.529]                         invokeRestart("muffleMessage")
[16:04:59.529]                     }
[16:04:59.529]                     else if (inherits(cond, "warning")) {
[16:04:59.529]                       muffled <- grepl(pattern, "muffleWarning")
[16:04:59.529]                       if (muffled) 
[16:04:59.529]                         invokeRestart("muffleWarning")
[16:04:59.529]                     }
[16:04:59.529]                     else if (inherits(cond, "condition")) {
[16:04:59.529]                       if (!is.null(pattern)) {
[16:04:59.529]                         computeRestarts <- base::computeRestarts
[16:04:59.529]                         grepl <- base::grepl
[16:04:59.529]                         restarts <- computeRestarts(cond)
[16:04:59.529]                         for (restart in restarts) {
[16:04:59.529]                           name <- restart$name
[16:04:59.529]                           if (is.null(name)) 
[16:04:59.529]                             next
[16:04:59.529]                           if (!grepl(pattern, name)) 
[16:04:59.529]                             next
[16:04:59.529]                           invokeRestart(restart)
[16:04:59.529]                           muffled <- TRUE
[16:04:59.529]                           break
[16:04:59.529]                         }
[16:04:59.529]                       }
[16:04:59.529]                     }
[16:04:59.529]                     invisible(muffled)
[16:04:59.529]                   }
[16:04:59.529]                   muffleCondition(cond)
[16:04:59.529]                 })
[16:04:59.529]             }))
[16:04:59.529]             future::FutureResult(value = ...future.value$value, 
[16:04:59.529]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:04:59.529]                   ...future.rng), globalenv = if (FALSE) 
[16:04:59.529]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:04:59.529]                     ...future.globalenv.names))
[16:04:59.529]                 else NULL, started = ...future.startTime, version = "1.8")
[16:04:59.529]         }, condition = base::local({
[16:04:59.529]             c <- base::c
[16:04:59.529]             inherits <- base::inherits
[16:04:59.529]             invokeRestart <- base::invokeRestart
[16:04:59.529]             length <- base::length
[16:04:59.529]             list <- base::list
[16:04:59.529]             seq.int <- base::seq.int
[16:04:59.529]             signalCondition <- base::signalCondition
[16:04:59.529]             sys.calls <- base::sys.calls
[16:04:59.529]             `[[` <- base::`[[`
[16:04:59.529]             `+` <- base::`+`
[16:04:59.529]             `<<-` <- base::`<<-`
[16:04:59.529]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:04:59.529]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:04:59.529]                   3L)]
[16:04:59.529]             }
[16:04:59.529]             function(cond) {
[16:04:59.529]                 is_error <- inherits(cond, "error")
[16:04:59.529]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:04:59.529]                   NULL)
[16:04:59.529]                 if (is_error) {
[16:04:59.529]                   sessionInformation <- function() {
[16:04:59.529]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:04:59.529]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:04:59.529]                       search = base::search(), system = base::Sys.info())
[16:04:59.529]                   }
[16:04:59.529]                   ...future.conditions[[length(...future.conditions) + 
[16:04:59.529]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:04:59.529]                     cond$call), session = sessionInformation(), 
[16:04:59.529]                     timestamp = base::Sys.time(), signaled = 0L)
[16:04:59.529]                   signalCondition(cond)
[16:04:59.529]                 }
[16:04:59.529]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:04:59.529]                 "immediateCondition"))) {
[16:04:59.529]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:04:59.529]                   ...future.conditions[[length(...future.conditions) + 
[16:04:59.529]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:04:59.529]                   if (TRUE && !signal) {
[16:04:59.529]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:04:59.529]                     {
[16:04:59.529]                       inherits <- base::inherits
[16:04:59.529]                       invokeRestart <- base::invokeRestart
[16:04:59.529]                       is.null <- base::is.null
[16:04:59.529]                       muffled <- FALSE
[16:04:59.529]                       if (inherits(cond, "message")) {
[16:04:59.529]                         muffled <- grepl(pattern, "muffleMessage")
[16:04:59.529]                         if (muffled) 
[16:04:59.529]                           invokeRestart("muffleMessage")
[16:04:59.529]                       }
[16:04:59.529]                       else if (inherits(cond, "warning")) {
[16:04:59.529]                         muffled <- grepl(pattern, "muffleWarning")
[16:04:59.529]                         if (muffled) 
[16:04:59.529]                           invokeRestart("muffleWarning")
[16:04:59.529]                       }
[16:04:59.529]                       else if (inherits(cond, "condition")) {
[16:04:59.529]                         if (!is.null(pattern)) {
[16:04:59.529]                           computeRestarts <- base::computeRestarts
[16:04:59.529]                           grepl <- base::grepl
[16:04:59.529]                           restarts <- computeRestarts(cond)
[16:04:59.529]                           for (restart in restarts) {
[16:04:59.529]                             name <- restart$name
[16:04:59.529]                             if (is.null(name)) 
[16:04:59.529]                               next
[16:04:59.529]                             if (!grepl(pattern, name)) 
[16:04:59.529]                               next
[16:04:59.529]                             invokeRestart(restart)
[16:04:59.529]                             muffled <- TRUE
[16:04:59.529]                             break
[16:04:59.529]                           }
[16:04:59.529]                         }
[16:04:59.529]                       }
[16:04:59.529]                       invisible(muffled)
[16:04:59.529]                     }
[16:04:59.529]                     muffleCondition(cond, pattern = "^muffle")
[16:04:59.529]                   }
[16:04:59.529]                 }
[16:04:59.529]                 else {
[16:04:59.529]                   if (TRUE) {
[16:04:59.529]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:04:59.529]                     {
[16:04:59.529]                       inherits <- base::inherits
[16:04:59.529]                       invokeRestart <- base::invokeRestart
[16:04:59.529]                       is.null <- base::is.null
[16:04:59.529]                       muffled <- FALSE
[16:04:59.529]                       if (inherits(cond, "message")) {
[16:04:59.529]                         muffled <- grepl(pattern, "muffleMessage")
[16:04:59.529]                         if (muffled) 
[16:04:59.529]                           invokeRestart("muffleMessage")
[16:04:59.529]                       }
[16:04:59.529]                       else if (inherits(cond, "warning")) {
[16:04:59.529]                         muffled <- grepl(pattern, "muffleWarning")
[16:04:59.529]                         if (muffled) 
[16:04:59.529]                           invokeRestart("muffleWarning")
[16:04:59.529]                       }
[16:04:59.529]                       else if (inherits(cond, "condition")) {
[16:04:59.529]                         if (!is.null(pattern)) {
[16:04:59.529]                           computeRestarts <- base::computeRestarts
[16:04:59.529]                           grepl <- base::grepl
[16:04:59.529]                           restarts <- computeRestarts(cond)
[16:04:59.529]                           for (restart in restarts) {
[16:04:59.529]                             name <- restart$name
[16:04:59.529]                             if (is.null(name)) 
[16:04:59.529]                               next
[16:04:59.529]                             if (!grepl(pattern, name)) 
[16:04:59.529]                               next
[16:04:59.529]                             invokeRestart(restart)
[16:04:59.529]                             muffled <- TRUE
[16:04:59.529]                             break
[16:04:59.529]                           }
[16:04:59.529]                         }
[16:04:59.529]                       }
[16:04:59.529]                       invisible(muffled)
[16:04:59.529]                     }
[16:04:59.529]                     muffleCondition(cond, pattern = "^muffle")
[16:04:59.529]                   }
[16:04:59.529]                 }
[16:04:59.529]             }
[16:04:59.529]         }))
[16:04:59.529]     }, error = function(ex) {
[16:04:59.529]         base::structure(base::list(value = NULL, visible = NULL, 
[16:04:59.529]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:04:59.529]                 ...future.rng), started = ...future.startTime, 
[16:04:59.529]             finished = Sys.time(), session_uuid = NA_character_, 
[16:04:59.529]             version = "1.8"), class = "FutureResult")
[16:04:59.529]     }, finally = {
[16:04:59.529]         if (!identical(...future.workdir, getwd())) 
[16:04:59.529]             setwd(...future.workdir)
[16:04:59.529]         {
[16:04:59.529]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:04:59.529]                 ...future.oldOptions$nwarnings <- NULL
[16:04:59.529]             }
[16:04:59.529]             base::options(...future.oldOptions)
[16:04:59.529]             if (.Platform$OS.type == "windows") {
[16:04:59.529]                 old_names <- names(...future.oldEnvVars)
[16:04:59.529]                 envs <- base::Sys.getenv()
[16:04:59.529]                 names <- names(envs)
[16:04:59.529]                 common <- intersect(names, old_names)
[16:04:59.529]                 added <- setdiff(names, old_names)
[16:04:59.529]                 removed <- setdiff(old_names, names)
[16:04:59.529]                 changed <- common[...future.oldEnvVars[common] != 
[16:04:59.529]                   envs[common]]
[16:04:59.529]                 NAMES <- toupper(changed)
[16:04:59.529]                 args <- list()
[16:04:59.529]                 for (kk in seq_along(NAMES)) {
[16:04:59.529]                   name <- changed[[kk]]
[16:04:59.529]                   NAME <- NAMES[[kk]]
[16:04:59.529]                   if (name != NAME && is.element(NAME, old_names)) 
[16:04:59.529]                     next
[16:04:59.529]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:04:59.529]                 }
[16:04:59.529]                 NAMES <- toupper(added)
[16:04:59.529]                 for (kk in seq_along(NAMES)) {
[16:04:59.529]                   name <- added[[kk]]
[16:04:59.529]                   NAME <- NAMES[[kk]]
[16:04:59.529]                   if (name != NAME && is.element(NAME, old_names)) 
[16:04:59.529]                     next
[16:04:59.529]                   args[[name]] <- ""
[16:04:59.529]                 }
[16:04:59.529]                 NAMES <- toupper(removed)
[16:04:59.529]                 for (kk in seq_along(NAMES)) {
[16:04:59.529]                   name <- removed[[kk]]
[16:04:59.529]                   NAME <- NAMES[[kk]]
[16:04:59.529]                   if (name != NAME && is.element(NAME, old_names)) 
[16:04:59.529]                     next
[16:04:59.529]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:04:59.529]                 }
[16:04:59.529]                 if (length(args) > 0) 
[16:04:59.529]                   base::do.call(base::Sys.setenv, args = args)
[16:04:59.529]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:04:59.529]             }
[16:04:59.529]             else {
[16:04:59.529]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:04:59.529]             }
[16:04:59.529]             {
[16:04:59.529]                 if (base::length(...future.futureOptionsAdded) > 
[16:04:59.529]                   0L) {
[16:04:59.529]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:04:59.529]                   base::names(opts) <- ...future.futureOptionsAdded
[16:04:59.529]                   base::options(opts)
[16:04:59.529]                 }
[16:04:59.529]                 {
[16:04:59.529]                   {
[16:04:59.529]                     base::options(mc.cores = ...future.mc.cores.old)
[16:04:59.529]                     NULL
[16:04:59.529]                   }
[16:04:59.529]                   options(future.plan = NULL)
[16:04:59.529]                   if (is.na(NA_character_)) 
[16:04:59.529]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:04:59.529]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:04:59.529]                   future::plan(list(function (..., workers = 2L, 
[16:04:59.529]                     envir = parent.frame()) 
[16:04:59.529]                   strategy(..., workers = workers, envir = envir)), 
[16:04:59.529]                     .cleanup = FALSE, .init = FALSE)
[16:04:59.529]                 }
[16:04:59.529]             }
[16:04:59.529]         }
[16:04:59.529]     })
[16:04:59.529]     if (TRUE) {
[16:04:59.529]         base::sink(type = "output", split = FALSE)
[16:04:59.529]         if (TRUE) {
[16:04:59.529]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:04:59.529]         }
[16:04:59.529]         else {
[16:04:59.529]             ...future.result["stdout"] <- base::list(NULL)
[16:04:59.529]         }
[16:04:59.529]         base::close(...future.stdout)
[16:04:59.529]         ...future.stdout <- NULL
[16:04:59.529]     }
[16:04:59.529]     ...future.result$conditions <- ...future.conditions
[16:04:59.529]     ...future.result$finished <- base::Sys.time()
[16:04:59.529]     ...future.result
[16:04:59.529] }
[16:04:59.531] Exporting 2 global objects (168 bytes) to cluster node #1 ...
[16:04:59.532] Exporting ‘env’ (56 bytes) to cluster node #1 ...
[16:04:59.532] Exporting ‘env’ (56 bytes) to cluster node #1 ... DONE
[16:04:59.532] Exporting ‘b’ (112 bytes) to cluster node #1 ...
[16:04:59.533] Exporting ‘b’ (112 bytes) to cluster node #1 ... DONE
[16:04:59.533] Exporting 2 global objects (168 bytes) to cluster node #1 ... DONE
[16:04:59.533] MultisessionFuture started
[16:04:59.533] - Launch lazy future ... done
[16:04:59.533] run() for ‘MultisessionFuture’ ... done
> ## Resolve future #4
> message(sprintf("y = %s\n", y))
[16:04:59.534] result() for ClusterFuture ...
[16:04:59.534] receiveMessageFromWorker() for ClusterFuture ...
[16:04:59.534] - Validating connection of MultisessionFuture
[16:04:59.577] - received message: FutureResult
[16:04:59.577] - Received FutureResult
[16:04:59.577] - Erased future from FutureRegistry
[16:04:59.577] result() for ClusterFuture ...
[16:04:59.577] - result already collected: FutureResult
[16:04:59.577] result() for ClusterFuture ... done
[16:04:59.577] receiveMessageFromWorker() for ClusterFuture ... done
[16:04:59.577] result() for ClusterFuture ... done
[16:04:59.577] result() for ClusterFuture ...
[16:04:59.577] - result already collected: FutureResult
[16:04:59.578] result() for ClusterFuture ... done
y = 5

> 
> message("*** Tricky use cases related to globals (part 2) ... DONE")
*** Tricky use cases related to globals (part 2) ... DONE
> 
> ## Cleanup
> setTimeLimit()
> source("incl/end.R")
[16:04:59.578] plan(): Setting new future strategy stack:
[16:04:59.578] List of future strategies:
[16:04:59.578] 1. FutureStrategy:
[16:04:59.578]    - args: function (..., envir = parent.frame())
[16:04:59.578]    - tweaked: FALSE
[16:04:59.578]    - call: future::plan(oplan)
[16:04:59.579] plan(): nbrOfWorkers() = 1
> 
