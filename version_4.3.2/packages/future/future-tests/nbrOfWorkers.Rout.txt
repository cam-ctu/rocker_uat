
R version 4.3.2 (2023-10-31) -- "Eye Holes"
Copyright (C) 2023 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> source("incl/start.R")
[13:23:49.512] plan(): Setting new future strategy stack:
[13:23:49.513] List of future strategies:
[13:23:49.513] 1. sequential:
[13:23:49.513]    - args: function (..., envir = parent.frame())
[13:23:49.513]    - tweaked: FALSE
[13:23:49.513]    - call: future::plan("sequential")
[13:23:49.528] plan(): nbrOfWorkers() = 1
> 
> message("*** nbrOfWorkers() ...")
*** nbrOfWorkers() ...
> 
> strategies <- c("sequential")
> for (strategy in strategies) {
+   message("Type of future: ", strategy)
+ 
+   evaluator <- get(strategy, mode = "function")
+   n <- nbrOfWorkers(evaluator)
+   message(sprintf("nbrOfWorkers: %d", n))
+   stopifnot(n == 1L)
+ 
+   plan(strategy)
+   n <- nbrOfWorkers()
+   message(sprintf("nbrOfWorkers: %d", n))
+   stopifnot(n == 1L)
+ 
+   n <- nbrOfFreeWorkers()
+   message(sprintf("nbrOfFreeWorkers: %d", n))
+   stopifnot(n == 1L)
+   
+   n <- nbrOfFreeWorkers(background = TRUE)
+   message(sprintf("nbrOfFreeWorkers(background = TRUE): %d", n))
+   stopifnot(n == 0L)
+ } ## for (strategy ...)
Type of future: sequential
nbrOfWorkers: 1
[13:23:49.546] plan(): Setting new future strategy stack:
[13:23:49.546] List of future strategies:
[13:23:49.546] 1. sequential:
[13:23:49.546]    - args: function (..., envir = parent.frame())
[13:23:49.546]    - tweaked: FALSE
[13:23:49.546]    - call: plan(strategy)
[13:23:49.557] plan(): nbrOfWorkers() = 1
nbrOfWorkers: 1
nbrOfFreeWorkers: 1
nbrOfFreeWorkers(background = TRUE): 0
> 
> 
> strategies <- c("cluster", "multisession", "multicore")
> strategies <- intersect(strategies, supportedStrategies())
> cores <- availableCores()
> message("Number of available cores: ", cores)
Number of available cores: 2
> workers <- availableWorkers()
> nworkers <- length(workers)
> message(sprintf("Available workers: [n = %d] %s", nworkers, hpaste(sQuote(workers))))
Available workers: [n = 2] ‘localhost’, ‘localhost’
> 
> allButOneCore <- function() max(1L, future::availableCores() - 1L)
> allButOneWorker <- function() {
+   w <- future::availableWorkers()
+   if (length(w) > 1) w[-1] else w
+ }
> 
> for (strategy in strategies) {
+   ## Speed up CRAN checks: Skip on CRAN Windows 32-bit
+   if (!fullTest && isWin32) next
+ 
+   message("Type of future: ", strategy)
+ 
+   evaluator <- get(strategy, mode = "function")
+   n <- nbrOfWorkers(evaluator)
+   message(sprintf("nbrOfWorkers: %d", n))
+   stopifnot(n == nworkers)
+ 
+   plan(strategy)
+   n <- nbrOfWorkers()
+   message(sprintf("nbrOfWorkers: %d", n))
+   stopifnot(n == nworkers)
+ 
+   n <- nbrOfFreeWorkers()
+   message(sprintf("nbrOfFreeWorkers: %d", n))
+   stopifnot(n == nworkers)
+   
+   n <- nbrOfFreeWorkers(background = TRUE)
+   message(sprintf("nbrOfFreeWorkers(background = TRUE): %d", n))
+ # FIXME  stopifnot(n == 0L)
+ 
+   plan(strategy, workers = 1L)
+   n <- nbrOfWorkers()
+   message(sprintf("nbrOfWorkers: %d", n))
+   stopifnot(n == max(1L, nworkers - 1L))
+   
+   n <- nbrOfFreeWorkers()
+   message(sprintf("nbrOfFreeWorkers: %d", n))
+   stopifnot(n == max(1L, nworkers - 1L))
+   
+   n <- nbrOfFreeWorkers(background = TRUE)
+   message(sprintf("nbrOfFreeWorkers(background = TRUE): %d", n))
+ # FIXME  stopifnot(n == 0L)
+ 
+   plan(strategy, workers = allButOneCore)
+   n <- nbrOfWorkers()
+   message(sprintf("nbrOfWorkers: %d", n))
+   stopifnot(n == max(1L, nworkers - 1L))
+   
+   n <- nbrOfFreeWorkers()
+   message(sprintf("nbrOfFreeWorkers: %d", n))
+   stopifnot(n == max(1L, nworkers - 1L))
+   
+   n <- nbrOfFreeWorkers(background = TRUE)
+   message(sprintf("nbrOfFreeWorkers(background = TRUE): %d", n))
+ # FIXME  stopifnot(n == 0L)
+ } ## for (strategy ...)
Type of future: multisession
nbrOfWorkers: 2
[13:23:49.591] plan(): Setting new future strategy stack:
[13:23:49.591] List of future strategies:
[13:23:49.591] 1. multisession:
[13:23:49.591]    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[13:23:49.591]    - tweaked: FALSE
[13:23:49.591]    - call: plan(strategy)
[13:23:49.592] plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ...
[13:23:49.592] multisession:
[13:23:49.592] - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[13:23:49.592] - tweaked: FALSE
[13:23:49.592] - call: plan(strategy)
[13:23:49.598] getGlobalsAndPackages() ...
[13:23:49.598] Not searching for globals
[13:23:49.599] - globals: [0] <none>
[13:23:49.599] getGlobalsAndPackages() ... DONE
[13:23:49.599] [local output] makeClusterPSOCK() ...
[13:23:49.634] [local output] Workers: [n = 2] ‘localhost’, ‘localhost’
[13:23:49.635] [local output] Base port: 11889
[13:23:49.635] [local output] Getting setup options for 2 cluster nodes ...
[13:23:49.635] [local output]  - Node 1 of 2 ...
[13:23:49.636] [local output] localMachine=TRUE => revtunnel=FALSE

[13:23:49.636] Testing if worker's PID can be inferred: ‘'/usr/local/lib/R/bin/Rscript' -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/RtmpJ16al6/worker.rank=1.parallelly.parent=88644.15a441bab868b.pid")), silent = TRUE)' -e 'file.exists("/tmp/RtmpJ16al6/worker.rank=1.parallelly.parent=88644.15a441bab868b.pid")'’
[13:23:49.828] - Possible to infer worker's PID: TRUE
[13:23:49.829] [local output] Rscript port: 11889

[13:23:49.829] [local output]  - Node 2 of 2 ...
[13:23:49.829] [local output] localMachine=TRUE => revtunnel=FALSE

[13:23:49.830] [local output] Rscript port: 11889

[13:23:49.830] [local output] Getting setup options for 2 cluster nodes ... done
[13:23:49.830] [local output]  - Parallel setup requested for some PSOCK nodes
[13:23:49.831] [local output] Setting up PSOCK nodes in parallel
[13:23:49.831] List of 36
[13:23:49.831]  $ worker          : chr "localhost"
[13:23:49.831]   ..- attr(*, "localhost")= logi TRUE
[13:23:49.831]  $ master          : chr "localhost"
[13:23:49.831]  $ port            : int 11889
[13:23:49.831]  $ connectTimeout  : num 120
[13:23:49.831]  $ timeout         : num 2592000
[13:23:49.831]  $ rscript         : chr "'/usr/local/lib/R/bin/Rscript'"
[13:23:49.831]  $ homogeneous     : logi TRUE
[13:23:49.831]  $ rscript_args    : chr "--default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),fi"| __truncated__
[13:23:49.831]  $ rscript_envs    : NULL
[13:23:49.831]  $ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[13:23:49.831]  $ rscript_startup : NULL
[13:23:49.831]  $ rscript_sh      : chr "sh"
[13:23:49.831]  $ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[13:23:49.831]  $ methods         : logi TRUE
[13:23:49.831]  $ socketOptions   : chr "no-delay"
[13:23:49.831]  $ useXDR          : logi FALSE
[13:23:49.831]  $ outfile         : chr "/dev/null"
[13:23:49.831]  $ renice          : int NA
[13:23:49.831]  $ rshcmd          : NULL
[13:23:49.831]  $ user            : chr(0) 
[13:23:49.831]  $ revtunnel       : logi FALSE
[13:23:49.831]  $ rshlogfile      : NULL
[13:23:49.831]  $ rshopts         : chr(0) 
[13:23:49.831]  $ rank            : int 1
[13:23:49.831]  $ manual          : logi FALSE
[13:23:49.831]  $ dryrun          : logi FALSE
[13:23:49.831]  $ quiet           : logi FALSE
[13:23:49.831]  $ setup_strategy  : chr "parallel"
[13:23:49.831]  $ local_cmd       : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[13:23:49.831]  $ pidfile         : chr "/tmp/RtmpJ16al6/worker.rank=1.parallelly.parent=88644.15a441bab868b.pid"
[13:23:49.831]  $ rshcmd_label    : NULL
[13:23:49.831]  $ rsh_call        : NULL
[13:23:49.831]  $ cmd             : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[13:23:49.831]  $ localMachine    : logi TRUE
[13:23:49.831]  $ make_fcn        :function (worker = getOption2("parallelly.localhost.hostname", "localhost"), 
[13:23:49.831]     master = NULL, port, connectTimeout = getOption2("parallelly.makeNodePSOCK.connectTimeout", 
[13:23:49.831]         2 * 60), timeout = getOption2("parallelly.makeNodePSOCK.timeout", 
[13:23:49.831]         30 * 24 * 60 * 60), rscript = NULL, homogeneous = NULL, rscript_args = NULL, 
[13:23:49.831]     rscript_envs = NULL, rscript_libs = NULL, rscript_startup = NULL, rscript_sh = c("auto", 
[13:23:49.831]         "cmd", "sh"), default_packages = c("datasets", "utils", "grDevices", 
[13:23:49.831]         "graphics", "stats", if (methods) "methods"), methods = TRUE, socketOptions = getOption2("parallelly.makeNodePSOCK.socketOptions", 
[13:23:49.831]         "no-delay"), useXDR = getOption2("parallelly.makeNodePSOCK.useXDR", 
[13:23:49.831]         FALSE), outfile = "/dev/null", renice = NA_integer_, rshcmd = getOption2("parallelly.makeNodePSOCK.rshcmd", 
[13:23:49.831]         NULL), user = NULL, revtunnel = NA, rshlogfile = NULL, rshopts = getOption2("parallelly.makeNodePSOCK.rshopts", 
[13:23:49.831]         NULL), rank = 1L, manual = FALSE, dryrun = FALSE, quiet = FALSE, 
[13:23:49.831]     setup_strategy = getOption2("parallelly.makeNodePSOCK.setup_strategy", 
[13:23:49.831]         "parallel"), action = c("launch", "options"), verbose = FALSE)  
[13:23:49.831]  $ arguments       :List of 28
[13:23:49.831]   ..$ worker          : chr "localhost"
[13:23:49.831]   ..$ master          : NULL
[13:23:49.831]   ..$ port            : int 11889
[13:23:49.831]   ..$ connectTimeout  : num 120
[13:23:49.831]   ..$ timeout         : num 2592000
[13:23:49.831]   ..$ rscript         : NULL
[13:23:49.831]   ..$ homogeneous     : NULL
[13:23:49.831]   ..$ rscript_args    : NULL
[13:23:49.831]   ..$ rscript_envs    : NULL
[13:23:49.831]   ..$ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[13:23:49.831]   ..$ rscript_startup : NULL
[13:23:49.831]   ..$ rscript_sh      : chr [1:3] "auto" "cmd" "sh"
[13:23:49.831]   ..$ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[13:23:49.831]   ..$ methods         : logi TRUE
[13:23:49.831]   ..$ socketOptions   : chr "no-delay"
[13:23:49.831]   ..$ useXDR          : logi FALSE
[13:23:49.831]   ..$ outfile         : chr "/dev/null"
[13:23:49.831]   ..$ renice          : int NA
[13:23:49.831]   ..$ rshcmd          : NULL
[13:23:49.831]   ..$ user            : NULL
[13:23:49.831]   ..$ revtunnel       : logi NA
[13:23:49.831]   ..$ rshlogfile      : NULL
[13:23:49.831]   ..$ rshopts         : NULL
[13:23:49.831]   ..$ rank            : int 1
[13:23:49.831]   ..$ manual          : logi FALSE
[13:23:49.831]   ..$ dryrun          : logi FALSE
[13:23:49.831]   ..$ quiet           : logi FALSE
[13:23:49.831]   ..$ setup_strategy  : chr "parallel"
[13:23:49.831]  - attr(*, "class")= chr [1:2] "makeNodePSOCKOptions" "makeNodeOptions"
[13:23:49.850] [local output] System call to launch all workers:
[13:23:49.850] [local output] '/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/RtmpJ16al6/worker.rank=1.parallelly.parent=88644.15a441bab868b.pid")), silent = TRUE)' -e 'options(socketOptions = "no-delay")' -e '.libPaths(c("/usr/local/lib/R/site-library","/usr/local/lib/R/library"))' -e 'workRSOCK <- tryCatch(parallel:::.workRSOCK, error=function(e) parallel:::.slaveRSOCK); workRSOCK()' MASTER=localhost PORT=11889 OUT=/dev/null TIMEOUT=2592000 XDR=FALSE SETUPTIMEOUT=120 SETUPSTRATEGY=parallel
[13:23:49.850] [local output] Starting PSOCK main server
[13:23:49.856] [local output] Workers launched
[13:23:49.857] [local output] Waiting for workers to connect back
[13:23:49.857]  - [local output] 0 workers out of 2 ready
[13:23:50.109]  - [local output] 0 workers out of 2 ready
[13:23:50.109]  - [local output] 1 workers out of 2 ready
[13:23:50.109]  - [local output] 2 workers out of 2 ready
[13:23:50.110] [local output] Launching of workers completed
[13:23:50.110] [local output] Collecting session information from workers
[13:23:50.111] [local output]  - Worker #1 of 2
[13:23:50.111] [local output]  - Worker #2 of 2
[13:23:50.111] [local output] makeClusterPSOCK() ... done
[13:23:50.125] Packages needed by the future expression (n = 0): <none>
[13:23:50.125] Packages needed by future strategies (n = 0): <none>
[13:23:50.126] {
[13:23:50.126]     {
[13:23:50.126]         {
[13:23:50.126]             ...future.startTime <- base::Sys.time()
[13:23:50.126]             {
[13:23:50.126]                 {
[13:23:50.126]                   {
[13:23:50.126]                     {
[13:23:50.126]                       base::local({
[13:23:50.126]                         has_future <- base::requireNamespace("future", 
[13:23:50.126]                           quietly = TRUE)
[13:23:50.126]                         if (has_future) {
[13:23:50.126]                           ns <- base::getNamespace("future")
[13:23:50.126]                           version <- ns[[".package"]][["version"]]
[13:23:50.126]                           if (is.null(version)) 
[13:23:50.126]                             version <- utils::packageVersion("future")
[13:23:50.126]                         }
[13:23:50.126]                         else {
[13:23:50.126]                           version <- NULL
[13:23:50.126]                         }
[13:23:50.126]                         if (!has_future || version < "1.8.0") {
[13:23:50.126]                           info <- base::c(r_version = base::gsub("R version ", 
[13:23:50.126]                             "", base::R.version$version.string), 
[13:23:50.126]                             platform = base::sprintf("%s (%s-bit)", 
[13:23:50.126]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:23:50.126]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:23:50.126]                               "release", "version")], collapse = " "), 
[13:23:50.126]                             hostname = base::Sys.info()[["nodename"]])
[13:23:50.126]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:23:50.126]                             info)
[13:23:50.126]                           info <- base::paste(info, collapse = "; ")
[13:23:50.126]                           if (!has_future) {
[13:23:50.126]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:23:50.126]                               info)
[13:23:50.126]                           }
[13:23:50.126]                           else {
[13:23:50.126]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:23:50.126]                               info, version)
[13:23:50.126]                           }
[13:23:50.126]                           base::stop(msg)
[13:23:50.126]                         }
[13:23:50.126]                       })
[13:23:50.126]                     }
[13:23:50.126]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[13:23:50.126]                     base::options(mc.cores = 1L)
[13:23:50.126]                   }
[13:23:50.126]                   options(future.plan = NULL)
[13:23:50.126]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:23:50.126]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:23:50.126]                 }
[13:23:50.126]                 ...future.workdir <- getwd()
[13:23:50.126]             }
[13:23:50.126]             ...future.oldOptions <- base::as.list(base::.Options)
[13:23:50.126]             ...future.oldEnvVars <- base::Sys.getenv()
[13:23:50.126]         }
[13:23:50.126]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:23:50.126]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:23:50.126]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:23:50.126]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:23:50.126]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:23:50.126]             future.stdout.windows.reencode = NULL, width = 80L)
[13:23:50.126]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:23:50.126]             base::names(...future.oldOptions))
[13:23:50.126]     }
[13:23:50.126]     if (FALSE) {
[13:23:50.126]     }
[13:23:50.126]     else {
[13:23:50.126]         if (TRUE) {
[13:23:50.126]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:23:50.126]                 open = "w")
[13:23:50.126]         }
[13:23:50.126]         else {
[13:23:50.126]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:23:50.126]                 windows = "NUL", "/dev/null"), open = "w")
[13:23:50.126]         }
[13:23:50.126]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:23:50.126]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:23:50.126]             base::sink(type = "output", split = FALSE)
[13:23:50.126]             base::close(...future.stdout)
[13:23:50.126]         }, add = TRUE)
[13:23:50.126]     }
[13:23:50.126]     ...future.frame <- base::sys.nframe()
[13:23:50.126]     ...future.conditions <- base::list()
[13:23:50.126]     ...future.rng <- base::globalenv()$.Random.seed
[13:23:50.126]     if (FALSE) {
[13:23:50.126]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:23:50.126]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:23:50.126]     }
[13:23:50.126]     ...future.result <- base::tryCatch({
[13:23:50.126]         base::withCallingHandlers({
[13:23:50.126]             ...future.value <- base::withVisible(base::local({
[13:23:50.126]                 ...future.makeSendCondition <- base::local({
[13:23:50.126]                   sendCondition <- NULL
[13:23:50.126]                   function(frame = 1L) {
[13:23:50.126]                     if (is.function(sendCondition)) 
[13:23:50.126]                       return(sendCondition)
[13:23:50.126]                     ns <- getNamespace("parallel")
[13:23:50.126]                     if (exists("sendData", mode = "function", 
[13:23:50.126]                       envir = ns)) {
[13:23:50.126]                       parallel_sendData <- get("sendData", mode = "function", 
[13:23:50.126]                         envir = ns)
[13:23:50.126]                       envir <- sys.frame(frame)
[13:23:50.126]                       master <- NULL
[13:23:50.126]                       while (!identical(envir, .GlobalEnv) && 
[13:23:50.126]                         !identical(envir, emptyenv())) {
[13:23:50.126]                         if (exists("master", mode = "list", envir = envir, 
[13:23:50.126]                           inherits = FALSE)) {
[13:23:50.126]                           master <- get("master", mode = "list", 
[13:23:50.126]                             envir = envir, inherits = FALSE)
[13:23:50.126]                           if (inherits(master, c("SOCKnode", 
[13:23:50.126]                             "SOCK0node"))) {
[13:23:50.126]                             sendCondition <<- function(cond) {
[13:23:50.126]                               data <- list(type = "VALUE", value = cond, 
[13:23:50.126]                                 success = TRUE)
[13:23:50.126]                               parallel_sendData(master, data)
[13:23:50.126]                             }
[13:23:50.126]                             return(sendCondition)
[13:23:50.126]                           }
[13:23:50.126]                         }
[13:23:50.126]                         frame <- frame + 1L
[13:23:50.126]                         envir <- sys.frame(frame)
[13:23:50.126]                       }
[13:23:50.126]                     }
[13:23:50.126]                     sendCondition <<- function(cond) NULL
[13:23:50.126]                   }
[13:23:50.126]                 })
[13:23:50.126]                 withCallingHandlers({
[13:23:50.126]                   NA
[13:23:50.126]                 }, immediateCondition = function(cond) {
[13:23:50.126]                   sendCondition <- ...future.makeSendCondition()
[13:23:50.126]                   sendCondition(cond)
[13:23:50.126]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:23:50.126]                   {
[13:23:50.126]                     inherits <- base::inherits
[13:23:50.126]                     invokeRestart <- base::invokeRestart
[13:23:50.126]                     is.null <- base::is.null
[13:23:50.126]                     muffled <- FALSE
[13:23:50.126]                     if (inherits(cond, "message")) {
[13:23:50.126]                       muffled <- grepl(pattern, "muffleMessage")
[13:23:50.126]                       if (muffled) 
[13:23:50.126]                         invokeRestart("muffleMessage")
[13:23:50.126]                     }
[13:23:50.126]                     else if (inherits(cond, "warning")) {
[13:23:50.126]                       muffled <- grepl(pattern, "muffleWarning")
[13:23:50.126]                       if (muffled) 
[13:23:50.126]                         invokeRestart("muffleWarning")
[13:23:50.126]                     }
[13:23:50.126]                     else if (inherits(cond, "condition")) {
[13:23:50.126]                       if (!is.null(pattern)) {
[13:23:50.126]                         computeRestarts <- base::computeRestarts
[13:23:50.126]                         grepl <- base::grepl
[13:23:50.126]                         restarts <- computeRestarts(cond)
[13:23:50.126]                         for (restart in restarts) {
[13:23:50.126]                           name <- restart$name
[13:23:50.126]                           if (is.null(name)) 
[13:23:50.126]                             next
[13:23:50.126]                           if (!grepl(pattern, name)) 
[13:23:50.126]                             next
[13:23:50.126]                           invokeRestart(restart)
[13:23:50.126]                           muffled <- TRUE
[13:23:50.126]                           break
[13:23:50.126]                         }
[13:23:50.126]                       }
[13:23:50.126]                     }
[13:23:50.126]                     invisible(muffled)
[13:23:50.126]                   }
[13:23:50.126]                   muffleCondition(cond)
[13:23:50.126]                 })
[13:23:50.126]             }))
[13:23:50.126]             future::FutureResult(value = ...future.value$value, 
[13:23:50.126]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:23:50.126]                   ...future.rng), globalenv = if (FALSE) 
[13:23:50.126]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:23:50.126]                     ...future.globalenv.names))
[13:23:50.126]                 else NULL, started = ...future.startTime, version = "1.8")
[13:23:50.126]         }, condition = base::local({
[13:23:50.126]             c <- base::c
[13:23:50.126]             inherits <- base::inherits
[13:23:50.126]             invokeRestart <- base::invokeRestart
[13:23:50.126]             length <- base::length
[13:23:50.126]             list <- base::list
[13:23:50.126]             seq.int <- base::seq.int
[13:23:50.126]             signalCondition <- base::signalCondition
[13:23:50.126]             sys.calls <- base::sys.calls
[13:23:50.126]             `[[` <- base::`[[`
[13:23:50.126]             `+` <- base::`+`
[13:23:50.126]             `<<-` <- base::`<<-`
[13:23:50.126]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:23:50.126]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:23:50.126]                   3L)]
[13:23:50.126]             }
[13:23:50.126]             function(cond) {
[13:23:50.126]                 is_error <- inherits(cond, "error")
[13:23:50.126]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:23:50.126]                   NULL)
[13:23:50.126]                 if (is_error) {
[13:23:50.126]                   sessionInformation <- function() {
[13:23:50.126]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:23:50.126]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:23:50.126]                       search = base::search(), system = base::Sys.info())
[13:23:50.126]                   }
[13:23:50.126]                   ...future.conditions[[length(...future.conditions) + 
[13:23:50.126]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:23:50.126]                     cond$call), session = sessionInformation(), 
[13:23:50.126]                     timestamp = base::Sys.time(), signaled = 0L)
[13:23:50.126]                   signalCondition(cond)
[13:23:50.126]                 }
[13:23:50.126]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:23:50.126]                 "immediateCondition"))) {
[13:23:50.126]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:23:50.126]                   ...future.conditions[[length(...future.conditions) + 
[13:23:50.126]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:23:50.126]                   if (TRUE && !signal) {
[13:23:50.126]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:23:50.126]                     {
[13:23:50.126]                       inherits <- base::inherits
[13:23:50.126]                       invokeRestart <- base::invokeRestart
[13:23:50.126]                       is.null <- base::is.null
[13:23:50.126]                       muffled <- FALSE
[13:23:50.126]                       if (inherits(cond, "message")) {
[13:23:50.126]                         muffled <- grepl(pattern, "muffleMessage")
[13:23:50.126]                         if (muffled) 
[13:23:50.126]                           invokeRestart("muffleMessage")
[13:23:50.126]                       }
[13:23:50.126]                       else if (inherits(cond, "warning")) {
[13:23:50.126]                         muffled <- grepl(pattern, "muffleWarning")
[13:23:50.126]                         if (muffled) 
[13:23:50.126]                           invokeRestart("muffleWarning")
[13:23:50.126]                       }
[13:23:50.126]                       else if (inherits(cond, "condition")) {
[13:23:50.126]                         if (!is.null(pattern)) {
[13:23:50.126]                           computeRestarts <- base::computeRestarts
[13:23:50.126]                           grepl <- base::grepl
[13:23:50.126]                           restarts <- computeRestarts(cond)
[13:23:50.126]                           for (restart in restarts) {
[13:23:50.126]                             name <- restart$name
[13:23:50.126]                             if (is.null(name)) 
[13:23:50.126]                               next
[13:23:50.126]                             if (!grepl(pattern, name)) 
[13:23:50.126]                               next
[13:23:50.126]                             invokeRestart(restart)
[13:23:50.126]                             muffled <- TRUE
[13:23:50.126]                             break
[13:23:50.126]                           }
[13:23:50.126]                         }
[13:23:50.126]                       }
[13:23:50.126]                       invisible(muffled)
[13:23:50.126]                     }
[13:23:50.126]                     muffleCondition(cond, pattern = "^muffle")
[13:23:50.126]                   }
[13:23:50.126]                 }
[13:23:50.126]                 else {
[13:23:50.126]                   if (TRUE) {
[13:23:50.126]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:23:50.126]                     {
[13:23:50.126]                       inherits <- base::inherits
[13:23:50.126]                       invokeRestart <- base::invokeRestart
[13:23:50.126]                       is.null <- base::is.null
[13:23:50.126]                       muffled <- FALSE
[13:23:50.126]                       if (inherits(cond, "message")) {
[13:23:50.126]                         muffled <- grepl(pattern, "muffleMessage")
[13:23:50.126]                         if (muffled) 
[13:23:50.126]                           invokeRestart("muffleMessage")
[13:23:50.126]                       }
[13:23:50.126]                       else if (inherits(cond, "warning")) {
[13:23:50.126]                         muffled <- grepl(pattern, "muffleWarning")
[13:23:50.126]                         if (muffled) 
[13:23:50.126]                           invokeRestart("muffleWarning")
[13:23:50.126]                       }
[13:23:50.126]                       else if (inherits(cond, "condition")) {
[13:23:50.126]                         if (!is.null(pattern)) {
[13:23:50.126]                           computeRestarts <- base::computeRestarts
[13:23:50.126]                           grepl <- base::grepl
[13:23:50.126]                           restarts <- computeRestarts(cond)
[13:23:50.126]                           for (restart in restarts) {
[13:23:50.126]                             name <- restart$name
[13:23:50.126]                             if (is.null(name)) 
[13:23:50.126]                               next
[13:23:50.126]                             if (!grepl(pattern, name)) 
[13:23:50.126]                               next
[13:23:50.126]                             invokeRestart(restart)
[13:23:50.126]                             muffled <- TRUE
[13:23:50.126]                             break
[13:23:50.126]                           }
[13:23:50.126]                         }
[13:23:50.126]                       }
[13:23:50.126]                       invisible(muffled)
[13:23:50.126]                     }
[13:23:50.126]                     muffleCondition(cond, pattern = "^muffle")
[13:23:50.126]                   }
[13:23:50.126]                 }
[13:23:50.126]             }
[13:23:50.126]         }))
[13:23:50.126]     }, error = function(ex) {
[13:23:50.126]         base::structure(base::list(value = NULL, visible = NULL, 
[13:23:50.126]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:23:50.126]                 ...future.rng), started = ...future.startTime, 
[13:23:50.126]             finished = Sys.time(), session_uuid = NA_character_, 
[13:23:50.126]             version = "1.8"), class = "FutureResult")
[13:23:50.126]     }, finally = {
[13:23:50.126]         if (!identical(...future.workdir, getwd())) 
[13:23:50.126]             setwd(...future.workdir)
[13:23:50.126]         {
[13:23:50.126]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:23:50.126]                 ...future.oldOptions$nwarnings <- NULL
[13:23:50.126]             }
[13:23:50.126]             base::options(...future.oldOptions)
[13:23:50.126]             if (.Platform$OS.type == "windows") {
[13:23:50.126]                 old_names <- names(...future.oldEnvVars)
[13:23:50.126]                 envs <- base::Sys.getenv()
[13:23:50.126]                 names <- names(envs)
[13:23:50.126]                 common <- intersect(names, old_names)
[13:23:50.126]                 added <- setdiff(names, old_names)
[13:23:50.126]                 removed <- setdiff(old_names, names)
[13:23:50.126]                 changed <- common[...future.oldEnvVars[common] != 
[13:23:50.126]                   envs[common]]
[13:23:50.126]                 NAMES <- toupper(changed)
[13:23:50.126]                 args <- list()
[13:23:50.126]                 for (kk in seq_along(NAMES)) {
[13:23:50.126]                   name <- changed[[kk]]
[13:23:50.126]                   NAME <- NAMES[[kk]]
[13:23:50.126]                   if (name != NAME && is.element(NAME, old_names)) 
[13:23:50.126]                     next
[13:23:50.126]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:23:50.126]                 }
[13:23:50.126]                 NAMES <- toupper(added)
[13:23:50.126]                 for (kk in seq_along(NAMES)) {
[13:23:50.126]                   name <- added[[kk]]
[13:23:50.126]                   NAME <- NAMES[[kk]]
[13:23:50.126]                   if (name != NAME && is.element(NAME, old_names)) 
[13:23:50.126]                     next
[13:23:50.126]                   args[[name]] <- ""
[13:23:50.126]                 }
[13:23:50.126]                 NAMES <- toupper(removed)
[13:23:50.126]                 for (kk in seq_along(NAMES)) {
[13:23:50.126]                   name <- removed[[kk]]
[13:23:50.126]                   NAME <- NAMES[[kk]]
[13:23:50.126]                   if (name != NAME && is.element(NAME, old_names)) 
[13:23:50.126]                     next
[13:23:50.126]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:23:50.126]                 }
[13:23:50.126]                 if (length(args) > 0) 
[13:23:50.126]                   base::do.call(base::Sys.setenv, args = args)
[13:23:50.126]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:23:50.126]             }
[13:23:50.126]             else {
[13:23:50.126]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:23:50.126]             }
[13:23:50.126]             {
[13:23:50.126]                 if (base::length(...future.futureOptionsAdded) > 
[13:23:50.126]                   0L) {
[13:23:50.126]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:23:50.126]                   base::names(opts) <- ...future.futureOptionsAdded
[13:23:50.126]                   base::options(opts)
[13:23:50.126]                 }
[13:23:50.126]                 {
[13:23:50.126]                   {
[13:23:50.126]                     base::options(mc.cores = ...future.mc.cores.old)
[13:23:50.126]                     NULL
[13:23:50.126]                   }
[13:23:50.126]                   options(future.plan = NULL)
[13:23:50.126]                   if (is.na(NA_character_)) 
[13:23:50.126]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:23:50.126]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:23:50.126]                   future::plan(list(function (..., workers = availableCores(), 
[13:23:50.126]                     lazy = FALSE, rscript_libs = .libPaths(), 
[13:23:50.126]                     envir = parent.frame()) 
[13:23:50.126]                   {
[13:23:50.126]                     if (is.function(workers)) 
[13:23:50.126]                       workers <- workers()
[13:23:50.126]                     workers <- structure(as.integer(workers), 
[13:23:50.126]                       class = class(workers))
[13:23:50.126]                     stop_if_not(length(workers) == 1, is.finite(workers), 
[13:23:50.126]                       workers >= 1)
[13:23:50.126]                     if (workers == 1L && !inherits(workers, "AsIs")) {
[13:23:50.126]                       return(sequential(..., lazy = TRUE, envir = envir))
[13:23:50.126]                     }
[13:23:50.126]                     future <- MultisessionFuture(..., workers = workers, 
[13:23:50.126]                       lazy = lazy, rscript_libs = rscript_libs, 
[13:23:50.126]                       envir = envir)
[13:23:50.126]                     if (!future$lazy) 
[13:23:50.126]                       future <- run(future)
[13:23:50.126]                     invisible(future)
[13:23:50.126]                   }), .cleanup = FALSE, .init = FALSE)
[13:23:50.126]                 }
[13:23:50.126]             }
[13:23:50.126]         }
[13:23:50.126]     })
[13:23:50.126]     if (TRUE) {
[13:23:50.126]         base::sink(type = "output", split = FALSE)
[13:23:50.126]         if (TRUE) {
[13:23:50.126]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:23:50.126]         }
[13:23:50.126]         else {
[13:23:50.126]             ...future.result["stdout"] <- base::list(NULL)
[13:23:50.126]         }
[13:23:50.126]         base::close(...future.stdout)
[13:23:50.126]         ...future.stdout <- NULL
[13:23:50.126]     }
[13:23:50.126]     ...future.result$conditions <- ...future.conditions
[13:23:50.126]     ...future.result$finished <- base::Sys.time()
[13:23:50.126]     ...future.result
[13:23:50.126] }
[13:23:50.181] MultisessionFuture started
[13:23:50.181] result() for ClusterFuture ...
[13:23:50.182] receiveMessageFromWorker() for ClusterFuture ...
[13:23:50.182] - Validating connection of MultisessionFuture
[13:23:50.227] - received message: FutureResult
[13:23:50.227] - Received FutureResult
[13:23:50.230] - Erased future from FutureRegistry
[13:23:50.230] result() for ClusterFuture ...
[13:23:50.231] - result already collected: FutureResult
[13:23:50.231] result() for ClusterFuture ... done
[13:23:50.231] receiveMessageFromWorker() for ClusterFuture ... done
[13:23:50.231] result() for ClusterFuture ... done
[13:23:50.231] result() for ClusterFuture ...
[13:23:50.231] - result already collected: FutureResult
[13:23:50.231] result() for ClusterFuture ... done
[13:23:50.231] plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ... DONE
[13:23:50.235] plan(): nbrOfWorkers() = 2
nbrOfWorkers: 2
[13:23:50.245] getGlobalsAndPackages() ...
[13:23:50.245] 
[13:23:50.246] - globals: [0] <none>
[13:23:50.246] getGlobalsAndPackages() ... DONE
nbrOfFreeWorkers: 2
[13:23:50.264] getGlobalsAndPackages() ...
[13:23:50.264] 
[13:23:50.264] - globals: [0] <none>
[13:23:50.264] getGlobalsAndPackages() ... DONE
nbrOfFreeWorkers(background = TRUE): 2
[13:23:50.276] plan(): Setting new future strategy stack:
[13:23:50.276] List of future strategies:
[13:23:50.276] 1. multisession:
[13:23:50.276]    - args: function (..., workers = 1L, envir = parent.frame())
[13:23:50.276]    - tweaked: TRUE
[13:23:50.276]    - call: plan(strategy, workers = 1L)
[13:23:50.277] plan(): plan_init() of ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ...
[13:23:50.277] multisession:
[13:23:50.277] - args: function (..., workers = 1L, envir = parent.frame())
[13:23:50.277] - tweaked: TRUE
[13:23:50.277] - call: plan(strategy, workers = 1L)
[13:23:50.278] getGlobalsAndPackages() ...
[13:23:50.278] Not searching for globals
[13:23:50.278] - globals: [0] <none>
[13:23:50.278] getGlobalsAndPackages() ... DONE
[13:23:50.280] Packages needed by the future expression (n = 0): <none>
[13:23:50.280] Packages needed by future strategies (n = 0): <none>
[13:23:50.281] {
[13:23:50.281]     {
[13:23:50.281]         {
[13:23:50.281]             ...future.startTime <- base::Sys.time()
[13:23:50.281]             {
[13:23:50.281]                 {
[13:23:50.281]                   {
[13:23:50.281]                     base::local({
[13:23:50.281]                       has_future <- base::requireNamespace("future", 
[13:23:50.281]                         quietly = TRUE)
[13:23:50.281]                       if (has_future) {
[13:23:50.281]                         ns <- base::getNamespace("future")
[13:23:50.281]                         version <- ns[[".package"]][["version"]]
[13:23:50.281]                         if (is.null(version)) 
[13:23:50.281]                           version <- utils::packageVersion("future")
[13:23:50.281]                       }
[13:23:50.281]                       else {
[13:23:50.281]                         version <- NULL
[13:23:50.281]                       }
[13:23:50.281]                       if (!has_future || version < "1.8.0") {
[13:23:50.281]                         info <- base::c(r_version = base::gsub("R version ", 
[13:23:50.281]                           "", base::R.version$version.string), 
[13:23:50.281]                           platform = base::sprintf("%s (%s-bit)", 
[13:23:50.281]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:23:50.281]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[13:23:50.281]                             "release", "version")], collapse = " "), 
[13:23:50.281]                           hostname = base::Sys.info()[["nodename"]])
[13:23:50.281]                         info <- base::sprintf("%s: %s", base::names(info), 
[13:23:50.281]                           info)
[13:23:50.281]                         info <- base::paste(info, collapse = "; ")
[13:23:50.281]                         if (!has_future) {
[13:23:50.281]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:23:50.281]                             info)
[13:23:50.281]                         }
[13:23:50.281]                         else {
[13:23:50.281]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:23:50.281]                             info, version)
[13:23:50.281]                         }
[13:23:50.281]                         base::stop(msg)
[13:23:50.281]                       }
[13:23:50.281]                     })
[13:23:50.281]                   }
[13:23:50.281]                   options(future.plan = NULL)
[13:23:50.281]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:23:50.281]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:23:50.281]                 }
[13:23:50.281]                 ...future.workdir <- getwd()
[13:23:50.281]             }
[13:23:50.281]             ...future.oldOptions <- base::as.list(base::.Options)
[13:23:50.281]             ...future.oldEnvVars <- base::Sys.getenv()
[13:23:50.281]         }
[13:23:50.281]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:23:50.281]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:23:50.281]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:23:50.281]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:23:50.281]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:23:50.281]             future.stdout.windows.reencode = NULL, width = 80L)
[13:23:50.281]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:23:50.281]             base::names(...future.oldOptions))
[13:23:50.281]     }
[13:23:50.281]     if (FALSE) {
[13:23:50.281]     }
[13:23:50.281]     else {
[13:23:50.281]         if (TRUE) {
[13:23:50.281]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:23:50.281]                 open = "w")
[13:23:50.281]         }
[13:23:50.281]         else {
[13:23:50.281]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:23:50.281]                 windows = "NUL", "/dev/null"), open = "w")
[13:23:50.281]         }
[13:23:50.281]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:23:50.281]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:23:50.281]             base::sink(type = "output", split = FALSE)
[13:23:50.281]             base::close(...future.stdout)
[13:23:50.281]         }, add = TRUE)
[13:23:50.281]     }
[13:23:50.281]     ...future.frame <- base::sys.nframe()
[13:23:50.281]     ...future.conditions <- base::list()
[13:23:50.281]     ...future.rng <- base::globalenv()$.Random.seed
[13:23:50.281]     if (FALSE) {
[13:23:50.281]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:23:50.281]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:23:50.281]     }
[13:23:50.281]     ...future.result <- base::tryCatch({
[13:23:50.281]         base::withCallingHandlers({
[13:23:50.281]             ...future.value <- base::withVisible(base::local(NA))
[13:23:50.281]             future::FutureResult(value = ...future.value$value, 
[13:23:50.281]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:23:50.281]                   ...future.rng), globalenv = if (FALSE) 
[13:23:50.281]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:23:50.281]                     ...future.globalenv.names))
[13:23:50.281]                 else NULL, started = ...future.startTime, version = "1.8")
[13:23:50.281]         }, condition = base::local({
[13:23:50.281]             c <- base::c
[13:23:50.281]             inherits <- base::inherits
[13:23:50.281]             invokeRestart <- base::invokeRestart
[13:23:50.281]             length <- base::length
[13:23:50.281]             list <- base::list
[13:23:50.281]             seq.int <- base::seq.int
[13:23:50.281]             signalCondition <- base::signalCondition
[13:23:50.281]             sys.calls <- base::sys.calls
[13:23:50.281]             `[[` <- base::`[[`
[13:23:50.281]             `+` <- base::`+`
[13:23:50.281]             `<<-` <- base::`<<-`
[13:23:50.281]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:23:50.281]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:23:50.281]                   3L)]
[13:23:50.281]             }
[13:23:50.281]             function(cond) {
[13:23:50.281]                 is_error <- inherits(cond, "error")
[13:23:50.281]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:23:50.281]                   NULL)
[13:23:50.281]                 if (is_error) {
[13:23:50.281]                   sessionInformation <- function() {
[13:23:50.281]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:23:50.281]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:23:50.281]                       search = base::search(), system = base::Sys.info())
[13:23:50.281]                   }
[13:23:50.281]                   ...future.conditions[[length(...future.conditions) + 
[13:23:50.281]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:23:50.281]                     cond$call), session = sessionInformation(), 
[13:23:50.281]                     timestamp = base::Sys.time(), signaled = 0L)
[13:23:50.281]                   signalCondition(cond)
[13:23:50.281]                 }
[13:23:50.281]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:23:50.281]                 "immediateCondition"))) {
[13:23:50.281]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:23:50.281]                   ...future.conditions[[length(...future.conditions) + 
[13:23:50.281]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:23:50.281]                   if (TRUE && !signal) {
[13:23:50.281]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:23:50.281]                     {
[13:23:50.281]                       inherits <- base::inherits
[13:23:50.281]                       invokeRestart <- base::invokeRestart
[13:23:50.281]                       is.null <- base::is.null
[13:23:50.281]                       muffled <- FALSE
[13:23:50.281]                       if (inherits(cond, "message")) {
[13:23:50.281]                         muffled <- grepl(pattern, "muffleMessage")
[13:23:50.281]                         if (muffled) 
[13:23:50.281]                           invokeRestart("muffleMessage")
[13:23:50.281]                       }
[13:23:50.281]                       else if (inherits(cond, "warning")) {
[13:23:50.281]                         muffled <- grepl(pattern, "muffleWarning")
[13:23:50.281]                         if (muffled) 
[13:23:50.281]                           invokeRestart("muffleWarning")
[13:23:50.281]                       }
[13:23:50.281]                       else if (inherits(cond, "condition")) {
[13:23:50.281]                         if (!is.null(pattern)) {
[13:23:50.281]                           computeRestarts <- base::computeRestarts
[13:23:50.281]                           grepl <- base::grepl
[13:23:50.281]                           restarts <- computeRestarts(cond)
[13:23:50.281]                           for (restart in restarts) {
[13:23:50.281]                             name <- restart$name
[13:23:50.281]                             if (is.null(name)) 
[13:23:50.281]                               next
[13:23:50.281]                             if (!grepl(pattern, name)) 
[13:23:50.281]                               next
[13:23:50.281]                             invokeRestart(restart)
[13:23:50.281]                             muffled <- TRUE
[13:23:50.281]                             break
[13:23:50.281]                           }
[13:23:50.281]                         }
[13:23:50.281]                       }
[13:23:50.281]                       invisible(muffled)
[13:23:50.281]                     }
[13:23:50.281]                     muffleCondition(cond, pattern = "^muffle")
[13:23:50.281]                   }
[13:23:50.281]                 }
[13:23:50.281]                 else {
[13:23:50.281]                   if (TRUE) {
[13:23:50.281]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:23:50.281]                     {
[13:23:50.281]                       inherits <- base::inherits
[13:23:50.281]                       invokeRestart <- base::invokeRestart
[13:23:50.281]                       is.null <- base::is.null
[13:23:50.281]                       muffled <- FALSE
[13:23:50.281]                       if (inherits(cond, "message")) {
[13:23:50.281]                         muffled <- grepl(pattern, "muffleMessage")
[13:23:50.281]                         if (muffled) 
[13:23:50.281]                           invokeRestart("muffleMessage")
[13:23:50.281]                       }
[13:23:50.281]                       else if (inherits(cond, "warning")) {
[13:23:50.281]                         muffled <- grepl(pattern, "muffleWarning")
[13:23:50.281]                         if (muffled) 
[13:23:50.281]                           invokeRestart("muffleWarning")
[13:23:50.281]                       }
[13:23:50.281]                       else if (inherits(cond, "condition")) {
[13:23:50.281]                         if (!is.null(pattern)) {
[13:23:50.281]                           computeRestarts <- base::computeRestarts
[13:23:50.281]                           grepl <- base::grepl
[13:23:50.281]                           restarts <- computeRestarts(cond)
[13:23:50.281]                           for (restart in restarts) {
[13:23:50.281]                             name <- restart$name
[13:23:50.281]                             if (is.null(name)) 
[13:23:50.281]                               next
[13:23:50.281]                             if (!grepl(pattern, name)) 
[13:23:50.281]                               next
[13:23:50.281]                             invokeRestart(restart)
[13:23:50.281]                             muffled <- TRUE
[13:23:50.281]                             break
[13:23:50.281]                           }
[13:23:50.281]                         }
[13:23:50.281]                       }
[13:23:50.281]                       invisible(muffled)
[13:23:50.281]                     }
[13:23:50.281]                     muffleCondition(cond, pattern = "^muffle")
[13:23:50.281]                   }
[13:23:50.281]                 }
[13:23:50.281]             }
[13:23:50.281]         }))
[13:23:50.281]     }, error = function(ex) {
[13:23:50.281]         base::structure(base::list(value = NULL, visible = NULL, 
[13:23:50.281]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:23:50.281]                 ...future.rng), started = ...future.startTime, 
[13:23:50.281]             finished = Sys.time(), session_uuid = NA_character_, 
[13:23:50.281]             version = "1.8"), class = "FutureResult")
[13:23:50.281]     }, finally = {
[13:23:50.281]         if (!identical(...future.workdir, getwd())) 
[13:23:50.281]             setwd(...future.workdir)
[13:23:50.281]         {
[13:23:50.281]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:23:50.281]                 ...future.oldOptions$nwarnings <- NULL
[13:23:50.281]             }
[13:23:50.281]             base::options(...future.oldOptions)
[13:23:50.281]             if (.Platform$OS.type == "windows") {
[13:23:50.281]                 old_names <- names(...future.oldEnvVars)
[13:23:50.281]                 envs <- base::Sys.getenv()
[13:23:50.281]                 names <- names(envs)
[13:23:50.281]                 common <- intersect(names, old_names)
[13:23:50.281]                 added <- setdiff(names, old_names)
[13:23:50.281]                 removed <- setdiff(old_names, names)
[13:23:50.281]                 changed <- common[...future.oldEnvVars[common] != 
[13:23:50.281]                   envs[common]]
[13:23:50.281]                 NAMES <- toupper(changed)
[13:23:50.281]                 args <- list()
[13:23:50.281]                 for (kk in seq_along(NAMES)) {
[13:23:50.281]                   name <- changed[[kk]]
[13:23:50.281]                   NAME <- NAMES[[kk]]
[13:23:50.281]                   if (name != NAME && is.element(NAME, old_names)) 
[13:23:50.281]                     next
[13:23:50.281]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:23:50.281]                 }
[13:23:50.281]                 NAMES <- toupper(added)
[13:23:50.281]                 for (kk in seq_along(NAMES)) {
[13:23:50.281]                   name <- added[[kk]]
[13:23:50.281]                   NAME <- NAMES[[kk]]
[13:23:50.281]                   if (name != NAME && is.element(NAME, old_names)) 
[13:23:50.281]                     next
[13:23:50.281]                   args[[name]] <- ""
[13:23:50.281]                 }
[13:23:50.281]                 NAMES <- toupper(removed)
[13:23:50.281]                 for (kk in seq_along(NAMES)) {
[13:23:50.281]                   name <- removed[[kk]]
[13:23:50.281]                   NAME <- NAMES[[kk]]
[13:23:50.281]                   if (name != NAME && is.element(NAME, old_names)) 
[13:23:50.281]                     next
[13:23:50.281]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:23:50.281]                 }
[13:23:50.281]                 if (length(args) > 0) 
[13:23:50.281]                   base::do.call(base::Sys.setenv, args = args)
[13:23:50.281]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:23:50.281]             }
[13:23:50.281]             else {
[13:23:50.281]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:23:50.281]             }
[13:23:50.281]             {
[13:23:50.281]                 if (base::length(...future.futureOptionsAdded) > 
[13:23:50.281]                   0L) {
[13:23:50.281]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:23:50.281]                   base::names(opts) <- ...future.futureOptionsAdded
[13:23:50.281]                   base::options(opts)
[13:23:50.281]                 }
[13:23:50.281]                 {
[13:23:50.281]                   {
[13:23:50.281]                     NULL
[13:23:50.281]                     RNGkind("Mersenne-Twister")
[13:23:50.281]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[13:23:50.281]                       inherits = FALSE)
[13:23:50.281]                   }
[13:23:50.281]                   options(future.plan = NULL)
[13:23:50.281]                   if (is.na(NA_character_)) 
[13:23:50.281]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:23:50.281]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:23:50.281]                   future::plan(list(function (..., workers = 1L, 
[13:23:50.281]                     envir = parent.frame()) 
[13:23:50.281]                   strategy(..., workers = workers, envir = envir)), 
[13:23:50.281]                     .cleanup = FALSE, .init = FALSE)
[13:23:50.281]                 }
[13:23:50.281]             }
[13:23:50.281]         }
[13:23:50.281]     })
[13:23:50.281]     if (TRUE) {
[13:23:50.281]         base::sink(type = "output", split = FALSE)
[13:23:50.281]         if (TRUE) {
[13:23:50.281]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:23:50.281]         }
[13:23:50.281]         else {
[13:23:50.281]             ...future.result["stdout"] <- base::list(NULL)
[13:23:50.281]         }
[13:23:50.281]         base::close(...future.stdout)
[13:23:50.281]         ...future.stdout <- NULL
[13:23:50.281]     }
[13:23:50.281]     ...future.result$conditions <- ...future.conditions
[13:23:50.281]     ...future.result$finished <- base::Sys.time()
[13:23:50.281]     ...future.result
[13:23:50.281] }
[13:23:50.283] plan(): Setting new future strategy stack:
[13:23:50.283] List of future strategies:
[13:23:50.283] 1. sequential:
[13:23:50.283]    - args: function (..., envir = parent.frame())
[13:23:50.283]    - tweaked: FALSE
[13:23:50.283]    - call: NULL
[13:23:50.283] plan(): nbrOfWorkers() = 1
[13:23:50.285] plan(): Setting new future strategy stack:
[13:23:50.285] List of future strategies:
[13:23:50.285] 1. multisession:
[13:23:50.285]    - args: function (..., workers = 1L, envir = parent.frame())
[13:23:50.285]    - tweaked: TRUE
[13:23:50.285]    - call: plan(strategy, workers = 1L)
[13:23:50.285] plan(): nbrOfWorkers() = 1
[13:23:50.286] SequentialFuture started (and completed)
[13:23:50.286] plan(): plan_init() of ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ... DONE
[13:23:50.286] plan(): nbrOfWorkers() = 1
nbrOfWorkers: 1
[13:23:50.287] getGlobalsAndPackages() ...
[13:23:50.287] Searching for globals...
[13:23:50.290] 
[13:23:50.290] Searching for globals ... DONE
[13:23:50.290] - globals: [0] <none>
[13:23:50.290] getGlobalsAndPackages() ... DONE
nbrOfFreeWorkers: 1
[13:23:50.291] getGlobalsAndPackages() ...
[13:23:50.291] Searching for globals...
[13:23:50.291] 
[13:23:50.291] Searching for globals ... DONE
[13:23:50.291] - globals: [0] <none>
[13:23:50.292] getGlobalsAndPackages() ... DONE
nbrOfFreeWorkers(background = TRUE): 0
[13:23:50.292] plan(): Setting new future strategy stack:
[13:23:50.292] List of future strategies:
[13:23:50.292] 1. multisession:
[13:23:50.292]    - args: function (..., workers = "<function () ; max(1L, future::availableCores() - 1L)>", envir = parent.frame())
[13:23:50.292]    - tweaked: TRUE
[13:23:50.292]    - call: plan(strategy, workers = allButOneCore)
[13:23:50.293] plan(): plan_init() of ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ...
[13:23:50.293] multisession:
[13:23:50.293] - args: function (..., workers = "<function () ; max(1L, future::availableCores() - 1L)>", envir = parent.frame())
[13:23:50.293] - tweaked: TRUE
[13:23:50.293] - call: plan(strategy, workers = allButOneCore)
[13:23:50.301] getGlobalsAndPackages() ...
[13:23:50.301] Not searching for globals
[13:23:50.301] - globals: [0] <none>
[13:23:50.301] getGlobalsAndPackages() ... DONE
[13:23:50.302] Packages needed by the future expression (n = 0): <none>
[13:23:50.302] Packages needed by future strategies (n = 0): <none>
[13:23:50.302] {
[13:23:50.302]     {
[13:23:50.302]         {
[13:23:50.302]             ...future.startTime <- base::Sys.time()
[13:23:50.302]             {
[13:23:50.302]                 {
[13:23:50.302]                   {
[13:23:50.302]                     base::local({
[13:23:50.302]                       has_future <- base::requireNamespace("future", 
[13:23:50.302]                         quietly = TRUE)
[13:23:50.302]                       if (has_future) {
[13:23:50.302]                         ns <- base::getNamespace("future")
[13:23:50.302]                         version <- ns[[".package"]][["version"]]
[13:23:50.302]                         if (is.null(version)) 
[13:23:50.302]                           version <- utils::packageVersion("future")
[13:23:50.302]                       }
[13:23:50.302]                       else {
[13:23:50.302]                         version <- NULL
[13:23:50.302]                       }
[13:23:50.302]                       if (!has_future || version < "1.8.0") {
[13:23:50.302]                         info <- base::c(r_version = base::gsub("R version ", 
[13:23:50.302]                           "", base::R.version$version.string), 
[13:23:50.302]                           platform = base::sprintf("%s (%s-bit)", 
[13:23:50.302]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:23:50.302]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[13:23:50.302]                             "release", "version")], collapse = " "), 
[13:23:50.302]                           hostname = base::Sys.info()[["nodename"]])
[13:23:50.302]                         info <- base::sprintf("%s: %s", base::names(info), 
[13:23:50.302]                           info)
[13:23:50.302]                         info <- base::paste(info, collapse = "; ")
[13:23:50.302]                         if (!has_future) {
[13:23:50.302]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:23:50.302]                             info)
[13:23:50.302]                         }
[13:23:50.302]                         else {
[13:23:50.302]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:23:50.302]                             info, version)
[13:23:50.302]                         }
[13:23:50.302]                         base::stop(msg)
[13:23:50.302]                       }
[13:23:50.302]                     })
[13:23:50.302]                   }
[13:23:50.302]                   options(future.plan = NULL)
[13:23:50.302]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:23:50.302]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:23:50.302]                 }
[13:23:50.302]                 ...future.workdir <- getwd()
[13:23:50.302]             }
[13:23:50.302]             ...future.oldOptions <- base::as.list(base::.Options)
[13:23:50.302]             ...future.oldEnvVars <- base::Sys.getenv()
[13:23:50.302]         }
[13:23:50.302]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:23:50.302]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:23:50.302]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:23:50.302]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:23:50.302]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:23:50.302]             future.stdout.windows.reencode = NULL, width = 80L)
[13:23:50.302]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:23:50.302]             base::names(...future.oldOptions))
[13:23:50.302]     }
[13:23:50.302]     if (FALSE) {
[13:23:50.302]     }
[13:23:50.302]     else {
[13:23:50.302]         if (TRUE) {
[13:23:50.302]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:23:50.302]                 open = "w")
[13:23:50.302]         }
[13:23:50.302]         else {
[13:23:50.302]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:23:50.302]                 windows = "NUL", "/dev/null"), open = "w")
[13:23:50.302]         }
[13:23:50.302]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:23:50.302]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:23:50.302]             base::sink(type = "output", split = FALSE)
[13:23:50.302]             base::close(...future.stdout)
[13:23:50.302]         }, add = TRUE)
[13:23:50.302]     }
[13:23:50.302]     ...future.frame <- base::sys.nframe()
[13:23:50.302]     ...future.conditions <- base::list()
[13:23:50.302]     ...future.rng <- base::globalenv()$.Random.seed
[13:23:50.302]     if (FALSE) {
[13:23:50.302]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:23:50.302]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:23:50.302]     }
[13:23:50.302]     ...future.result <- base::tryCatch({
[13:23:50.302]         base::withCallingHandlers({
[13:23:50.302]             ...future.value <- base::withVisible(base::local(NA))
[13:23:50.302]             future::FutureResult(value = ...future.value$value, 
[13:23:50.302]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:23:50.302]                   ...future.rng), globalenv = if (FALSE) 
[13:23:50.302]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:23:50.302]                     ...future.globalenv.names))
[13:23:50.302]                 else NULL, started = ...future.startTime, version = "1.8")
[13:23:50.302]         }, condition = base::local({
[13:23:50.302]             c <- base::c
[13:23:50.302]             inherits <- base::inherits
[13:23:50.302]             invokeRestart <- base::invokeRestart
[13:23:50.302]             length <- base::length
[13:23:50.302]             list <- base::list
[13:23:50.302]             seq.int <- base::seq.int
[13:23:50.302]             signalCondition <- base::signalCondition
[13:23:50.302]             sys.calls <- base::sys.calls
[13:23:50.302]             `[[` <- base::`[[`
[13:23:50.302]             `+` <- base::`+`
[13:23:50.302]             `<<-` <- base::`<<-`
[13:23:50.302]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:23:50.302]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:23:50.302]                   3L)]
[13:23:50.302]             }
[13:23:50.302]             function(cond) {
[13:23:50.302]                 is_error <- inherits(cond, "error")
[13:23:50.302]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:23:50.302]                   NULL)
[13:23:50.302]                 if (is_error) {
[13:23:50.302]                   sessionInformation <- function() {
[13:23:50.302]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:23:50.302]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:23:50.302]                       search = base::search(), system = base::Sys.info())
[13:23:50.302]                   }
[13:23:50.302]                   ...future.conditions[[length(...future.conditions) + 
[13:23:50.302]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:23:50.302]                     cond$call), session = sessionInformation(), 
[13:23:50.302]                     timestamp = base::Sys.time(), signaled = 0L)
[13:23:50.302]                   signalCondition(cond)
[13:23:50.302]                 }
[13:23:50.302]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:23:50.302]                 "immediateCondition"))) {
[13:23:50.302]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:23:50.302]                   ...future.conditions[[length(...future.conditions) + 
[13:23:50.302]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:23:50.302]                   if (TRUE && !signal) {
[13:23:50.302]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:23:50.302]                     {
[13:23:50.302]                       inherits <- base::inherits
[13:23:50.302]                       invokeRestart <- base::invokeRestart
[13:23:50.302]                       is.null <- base::is.null
[13:23:50.302]                       muffled <- FALSE
[13:23:50.302]                       if (inherits(cond, "message")) {
[13:23:50.302]                         muffled <- grepl(pattern, "muffleMessage")
[13:23:50.302]                         if (muffled) 
[13:23:50.302]                           invokeRestart("muffleMessage")
[13:23:50.302]                       }
[13:23:50.302]                       else if (inherits(cond, "warning")) {
[13:23:50.302]                         muffled <- grepl(pattern, "muffleWarning")
[13:23:50.302]                         if (muffled) 
[13:23:50.302]                           invokeRestart("muffleWarning")
[13:23:50.302]                       }
[13:23:50.302]                       else if (inherits(cond, "condition")) {
[13:23:50.302]                         if (!is.null(pattern)) {
[13:23:50.302]                           computeRestarts <- base::computeRestarts
[13:23:50.302]                           grepl <- base::grepl
[13:23:50.302]                           restarts <- computeRestarts(cond)
[13:23:50.302]                           for (restart in restarts) {
[13:23:50.302]                             name <- restart$name
[13:23:50.302]                             if (is.null(name)) 
[13:23:50.302]                               next
[13:23:50.302]                             if (!grepl(pattern, name)) 
[13:23:50.302]                               next
[13:23:50.302]                             invokeRestart(restart)
[13:23:50.302]                             muffled <- TRUE
[13:23:50.302]                             break
[13:23:50.302]                           }
[13:23:50.302]                         }
[13:23:50.302]                       }
[13:23:50.302]                       invisible(muffled)
[13:23:50.302]                     }
[13:23:50.302]                     muffleCondition(cond, pattern = "^muffle")
[13:23:50.302]                   }
[13:23:50.302]                 }
[13:23:50.302]                 else {
[13:23:50.302]                   if (TRUE) {
[13:23:50.302]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:23:50.302]                     {
[13:23:50.302]                       inherits <- base::inherits
[13:23:50.302]                       invokeRestart <- base::invokeRestart
[13:23:50.302]                       is.null <- base::is.null
[13:23:50.302]                       muffled <- FALSE
[13:23:50.302]                       if (inherits(cond, "message")) {
[13:23:50.302]                         muffled <- grepl(pattern, "muffleMessage")
[13:23:50.302]                         if (muffled) 
[13:23:50.302]                           invokeRestart("muffleMessage")
[13:23:50.302]                       }
[13:23:50.302]                       else if (inherits(cond, "warning")) {
[13:23:50.302]                         muffled <- grepl(pattern, "muffleWarning")
[13:23:50.302]                         if (muffled) 
[13:23:50.302]                           invokeRestart("muffleWarning")
[13:23:50.302]                       }
[13:23:50.302]                       else if (inherits(cond, "condition")) {
[13:23:50.302]                         if (!is.null(pattern)) {
[13:23:50.302]                           computeRestarts <- base::computeRestarts
[13:23:50.302]                           grepl <- base::grepl
[13:23:50.302]                           restarts <- computeRestarts(cond)
[13:23:50.302]                           for (restart in restarts) {
[13:23:50.302]                             name <- restart$name
[13:23:50.302]                             if (is.null(name)) 
[13:23:50.302]                               next
[13:23:50.302]                             if (!grepl(pattern, name)) 
[13:23:50.302]                               next
[13:23:50.302]                             invokeRestart(restart)
[13:23:50.302]                             muffled <- TRUE
[13:23:50.302]                             break
[13:23:50.302]                           }
[13:23:50.302]                         }
[13:23:50.302]                       }
[13:23:50.302]                       invisible(muffled)
[13:23:50.302]                     }
[13:23:50.302]                     muffleCondition(cond, pattern = "^muffle")
[13:23:50.302]                   }
[13:23:50.302]                 }
[13:23:50.302]             }
[13:23:50.302]         }))
[13:23:50.302]     }, error = function(ex) {
[13:23:50.302]         base::structure(base::list(value = NULL, visible = NULL, 
[13:23:50.302]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:23:50.302]                 ...future.rng), started = ...future.startTime, 
[13:23:50.302]             finished = Sys.time(), session_uuid = NA_character_, 
[13:23:50.302]             version = "1.8"), class = "FutureResult")
[13:23:50.302]     }, finally = {
[13:23:50.302]         if (!identical(...future.workdir, getwd())) 
[13:23:50.302]             setwd(...future.workdir)
[13:23:50.302]         {
[13:23:50.302]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:23:50.302]                 ...future.oldOptions$nwarnings <- NULL
[13:23:50.302]             }
[13:23:50.302]             base::options(...future.oldOptions)
[13:23:50.302]             if (.Platform$OS.type == "windows") {
[13:23:50.302]                 old_names <- names(...future.oldEnvVars)
[13:23:50.302]                 envs <- base::Sys.getenv()
[13:23:50.302]                 names <- names(envs)
[13:23:50.302]                 common <- intersect(names, old_names)
[13:23:50.302]                 added <- setdiff(names, old_names)
[13:23:50.302]                 removed <- setdiff(old_names, names)
[13:23:50.302]                 changed <- common[...future.oldEnvVars[common] != 
[13:23:50.302]                   envs[common]]
[13:23:50.302]                 NAMES <- toupper(changed)
[13:23:50.302]                 args <- list()
[13:23:50.302]                 for (kk in seq_along(NAMES)) {
[13:23:50.302]                   name <- changed[[kk]]
[13:23:50.302]                   NAME <- NAMES[[kk]]
[13:23:50.302]                   if (name != NAME && is.element(NAME, old_names)) 
[13:23:50.302]                     next
[13:23:50.302]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:23:50.302]                 }
[13:23:50.302]                 NAMES <- toupper(added)
[13:23:50.302]                 for (kk in seq_along(NAMES)) {
[13:23:50.302]                   name <- added[[kk]]
[13:23:50.302]                   NAME <- NAMES[[kk]]
[13:23:50.302]                   if (name != NAME && is.element(NAME, old_names)) 
[13:23:50.302]                     next
[13:23:50.302]                   args[[name]] <- ""
[13:23:50.302]                 }
[13:23:50.302]                 NAMES <- toupper(removed)
[13:23:50.302]                 for (kk in seq_along(NAMES)) {
[13:23:50.302]                   name <- removed[[kk]]
[13:23:50.302]                   NAME <- NAMES[[kk]]
[13:23:50.302]                   if (name != NAME && is.element(NAME, old_names)) 
[13:23:50.302]                     next
[13:23:50.302]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:23:50.302]                 }
[13:23:50.302]                 if (length(args) > 0) 
[13:23:50.302]                   base::do.call(base::Sys.setenv, args = args)
[13:23:50.302]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:23:50.302]             }
[13:23:50.302]             else {
[13:23:50.302]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:23:50.302]             }
[13:23:50.302]             {
[13:23:50.302]                 if (base::length(...future.futureOptionsAdded) > 
[13:23:50.302]                   0L) {
[13:23:50.302]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:23:50.302]                   base::names(opts) <- ...future.futureOptionsAdded
[13:23:50.302]                   base::options(opts)
[13:23:50.302]                 }
[13:23:50.302]                 {
[13:23:50.302]                   {
[13:23:50.302]                     NULL
[13:23:50.302]                     RNGkind("Mersenne-Twister")
[13:23:50.302]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[13:23:50.302]                       inherits = FALSE)
[13:23:50.302]                   }
[13:23:50.302]                   options(future.plan = NULL)
[13:23:50.302]                   if (is.na(NA_character_)) 
[13:23:50.302]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:23:50.302]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:23:50.302]                   future::plan(list(function (..., workers = function () 
[13:23:50.302]                   max(1L, future::availableCores() - 1L), envir = parent.frame()) 
[13:23:50.302]                   strategy(..., workers = workers, envir = envir)), 
[13:23:50.302]                     .cleanup = FALSE, .init = FALSE)
[13:23:50.302]                 }
[13:23:50.302]             }
[13:23:50.302]         }
[13:23:50.302]     })
[13:23:50.302]     if (TRUE) {
[13:23:50.302]         base::sink(type = "output", split = FALSE)
[13:23:50.302]         if (TRUE) {
[13:23:50.302]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:23:50.302]         }
[13:23:50.302]         else {
[13:23:50.302]             ...future.result["stdout"] <- base::list(NULL)
[13:23:50.302]         }
[13:23:50.302]         base::close(...future.stdout)
[13:23:50.302]         ...future.stdout <- NULL
[13:23:50.302]     }
[13:23:50.302]     ...future.result$conditions <- ...future.conditions
[13:23:50.302]     ...future.result$finished <- base::Sys.time()
[13:23:50.302]     ...future.result
[13:23:50.302] }
[13:23:50.304] plan(): Setting new future strategy stack:
[13:23:50.304] List of future strategies:
[13:23:50.304] 1. sequential:
[13:23:50.304]    - args: function (..., envir = parent.frame())
[13:23:50.304]    - tweaked: FALSE
[13:23:50.304]    - call: NULL
[13:23:50.305] plan(): nbrOfWorkers() = 1
[13:23:50.305] plan(): Setting new future strategy stack:
[13:23:50.305] List of future strategies:
[13:23:50.305] 1. multisession:
[13:23:50.305]    - args: function (..., workers = "<function () ; max(1L, future::availableCores() - 1L)>", envir = parent.frame())
[13:23:50.305]    - tweaked: TRUE
[13:23:50.305]    - call: plan(strategy, workers = allButOneCore)
[13:23:50.310] plan(): nbrOfWorkers() = 1
[13:23:50.311] SequentialFuture started (and completed)
[13:23:50.311] plan(): plan_init() of ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ... DONE
[13:23:50.314] plan(): nbrOfWorkers() = 1
nbrOfWorkers: 1
[13:23:50.323] getGlobalsAndPackages() ...
[13:23:50.323] Searching for globals...
[13:23:50.323] 
[13:23:50.323] Searching for globals ... DONE
[13:23:50.323] - globals: [0] <none>
[13:23:50.324] getGlobalsAndPackages() ... DONE
nbrOfFreeWorkers: 1
[13:23:50.330] getGlobalsAndPackages() ...
[13:23:50.330] Searching for globals...
[13:23:50.330] 
[13:23:50.330] Searching for globals ... DONE
[13:23:50.330] - globals: [0] <none>
[13:23:50.330] getGlobalsAndPackages() ... DONE
nbrOfFreeWorkers(background = TRUE): 0
Type of future: multicore
nbrOfWorkers: 2
[13:23:50.334] plan(): Setting new future strategy stack:
[13:23:50.334] List of future strategies:
[13:23:50.334] 1. multicore:
[13:23:50.334]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[13:23:50.334]    - tweaked: FALSE
[13:23:50.334]    - call: plan(strategy)
[13:23:50.338] plan(): nbrOfWorkers() = 2
nbrOfWorkers: 2
nbrOfFreeWorkers: 2
nbrOfFreeWorkers(background = TRUE): 2
[13:23:50.348] plan(): Setting new future strategy stack:
[13:23:50.348] List of future strategies:
[13:23:50.348] 1. multicore:
[13:23:50.348]    - args: function (..., workers = 1L, envir = parent.frame())
[13:23:50.348]    - tweaked: TRUE
[13:23:50.348]    - call: plan(strategy, workers = 1L)
[13:23:50.349] plan(): nbrOfWorkers() = 1
nbrOfWorkers: 1
nbrOfFreeWorkers: 1
nbrOfFreeWorkers(background = TRUE): 1
[13:23:50.350] plan(): Setting new future strategy stack:
[13:23:50.350] List of future strategies:
[13:23:50.350] 1. multicore:
[13:23:50.350]    - args: function (..., workers = "<function () ; max(1L, future::availableCores() - 1L); <bytecode: 0x55f967bdd0f8>>", envir = parent.frame())
[13:23:50.350]    - tweaked: TRUE
[13:23:50.350]    - call: plan(strategy, workers = allButOneCore)
[13:23:50.353] plan(): nbrOfWorkers() = 1
nbrOfWorkers: 1
nbrOfFreeWorkers: 1
nbrOfFreeWorkers(background = TRUE): 1
> 
> 
> message("Type of future: cluster")
Type of future: cluster
> workers <- rep("localhost", times = 2L)
> plan(cluster, workers = workers)
[13:23:50.363] plan(): Setting new future strategy stack:
[13:23:50.363] List of future strategies:
[13:23:50.363] 1. cluster:
[13:23:50.363]    - args: function (..., workers = c("localhost", "localhost"), envir = parent.frame())
[13:23:50.363]    - tweaked: TRUE
[13:23:50.363]    - call: plan(cluster, workers = workers)
[13:23:50.364] plan(): plan_init() of ‘tweaked’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ...
[13:23:50.364] cluster:
[13:23:50.364] - args: function (..., workers = c("localhost", "localhost"), envir = parent.frame())
[13:23:50.364] - tweaked: TRUE
[13:23:50.364] - call: plan(cluster, workers = workers)
[13:23:50.364] getGlobalsAndPackages() ...
[13:23:50.365] Not searching for globals
[13:23:50.365] - globals: [0] <none>
[13:23:50.365] getGlobalsAndPackages() ... DONE
[13:23:50.365] [local output] makeClusterPSOCK() ...
[13:23:50.366] [local output] Workers: [n = 2] ‘localhost’, ‘localhost’
[13:23:50.366] [local output] Base port: 11050
[13:23:50.366] [local output] Getting setup options for 2 cluster nodes ...
[13:23:50.367] [local output]  - Node 1 of 2 ...
[13:23:50.367] [local output] localMachine=TRUE => revtunnel=FALSE

[13:23:50.367] [local output] Rscript port: 11050

[13:23:50.368] [local output]  - Node 2 of 2 ...
[13:23:50.368] [local output] localMachine=TRUE => revtunnel=FALSE

[13:23:50.369] [local output] Rscript port: 11050

[13:23:50.369] [local output] Getting setup options for 2 cluster nodes ... done
[13:23:50.369] [local output]  - Parallel setup requested for some PSOCK nodes
[13:23:50.369] [local output] Setting up PSOCK nodes in parallel
[13:23:50.369] List of 36
[13:23:50.369]  $ worker          : chr "localhost"
[13:23:50.369]   ..- attr(*, "localhost")= logi TRUE
[13:23:50.369]  $ master          : chr "localhost"
[13:23:50.369]  $ port            : int 11050
[13:23:50.369]  $ connectTimeout  : num 120
[13:23:50.369]  $ timeout         : num 2592000
[13:23:50.369]  $ rscript         : chr "'/usr/local/lib/R/bin/Rscript'"
[13:23:50.369]  $ homogeneous     : logi TRUE
[13:23:50.369]  $ rscript_args    : chr "--default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),fi"| __truncated__
[13:23:50.369]  $ rscript_envs    : NULL
[13:23:50.369]  $ rscript_libs    : NULL
[13:23:50.369]  $ rscript_startup : NULL
[13:23:50.369]  $ rscript_sh      : chr "sh"
[13:23:50.369]  $ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[13:23:50.369]  $ methods         : logi TRUE
[13:23:50.369]  $ socketOptions   : chr "no-delay"
[13:23:50.369]  $ useXDR          : logi FALSE
[13:23:50.369]  $ outfile         : chr "/dev/null"
[13:23:50.369]  $ renice          : int NA
[13:23:50.369]  $ rshcmd          : NULL
[13:23:50.369]  $ user            : chr(0) 
[13:23:50.369]  $ revtunnel       : logi FALSE
[13:23:50.369]  $ rshlogfile      : NULL
[13:23:50.369]  $ rshopts         : chr(0) 
[13:23:50.369]  $ rank            : int 1
[13:23:50.369]  $ manual          : logi FALSE
[13:23:50.369]  $ dryrun          : logi FALSE
[13:23:50.369]  $ quiet           : logi FALSE
[13:23:50.369]  $ setup_strategy  : chr "parallel"
[13:23:50.369]  $ local_cmd       : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[13:23:50.369]  $ pidfile         : chr "/tmp/RtmpJ16al6/worker.rank=1.parallelly.parent=88644.15a44263262f3.pid"
[13:23:50.369]  $ rshcmd_label    : NULL
[13:23:50.369]  $ rsh_call        : NULL
[13:23:50.369]  $ cmd             : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[13:23:50.369]  $ localMachine    : logi TRUE
[13:23:50.369]  $ make_fcn        :function (worker = getOption2("parallelly.localhost.hostname", "localhost"), 
[13:23:50.369]     master = NULL, port, connectTimeout = getOption2("parallelly.makeNodePSOCK.connectTimeout", 
[13:23:50.369]         2 * 60), timeout = getOption2("parallelly.makeNodePSOCK.timeout", 
[13:23:50.369]         30 * 24 * 60 * 60), rscript = NULL, homogeneous = NULL, rscript_args = NULL, 
[13:23:50.369]     rscript_envs = NULL, rscript_libs = NULL, rscript_startup = NULL, rscript_sh = c("auto", 
[13:23:50.369]         "cmd", "sh"), default_packages = c("datasets", "utils", "grDevices", 
[13:23:50.369]         "graphics", "stats", if (methods) "methods"), methods = TRUE, socketOptions = getOption2("parallelly.makeNodePSOCK.socketOptions", 
[13:23:50.369]         "no-delay"), useXDR = getOption2("parallelly.makeNodePSOCK.useXDR", 
[13:23:50.369]         FALSE), outfile = "/dev/null", renice = NA_integer_, rshcmd = getOption2("parallelly.makeNodePSOCK.rshcmd", 
[13:23:50.369]         NULL), user = NULL, revtunnel = NA, rshlogfile = NULL, rshopts = getOption2("parallelly.makeNodePSOCK.rshopts", 
[13:23:50.369]         NULL), rank = 1L, manual = FALSE, dryrun = FALSE, quiet = FALSE, 
[13:23:50.369]     setup_strategy = getOption2("parallelly.makeNodePSOCK.setup_strategy", 
[13:23:50.369]         "parallel"), action = c("launch", "options"), verbose = FALSE)  
[13:23:50.369]  $ arguments       :List of 28
[13:23:50.369]   ..$ worker          : chr "localhost"
[13:23:50.369]   ..$ master          : NULL
[13:23:50.369]   ..$ port            : int 11050
[13:23:50.369]   ..$ connectTimeout  : num 120
[13:23:50.369]   ..$ timeout         : num 2592000
[13:23:50.369]   ..$ rscript         : NULL
[13:23:50.369]   ..$ homogeneous     : NULL
[13:23:50.369]   ..$ rscript_args    : NULL
[13:23:50.369]   ..$ rscript_envs    : NULL
[13:23:50.369]   ..$ rscript_libs    : NULL
[13:23:50.369]   ..$ rscript_startup : NULL
[13:23:50.369]   ..$ rscript_sh      : chr [1:3] "auto" "cmd" "sh"
[13:23:50.369]   ..$ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[13:23:50.369]   ..$ methods         : logi TRUE
[13:23:50.369]   ..$ socketOptions   : chr "no-delay"
[13:23:50.369]   ..$ useXDR          : logi FALSE
[13:23:50.369]   ..$ outfile         : chr "/dev/null"
[13:23:50.369]   ..$ renice          : int NA
[13:23:50.369]   ..$ rshcmd          : NULL
[13:23:50.369]   ..$ user            : NULL
[13:23:50.369]   ..$ revtunnel       : logi NA
[13:23:50.369]   ..$ rshlogfile      : NULL
[13:23:50.369]   ..$ rshopts         : NULL
[13:23:50.369]   ..$ rank            : int 1
[13:23:50.369]   ..$ manual          : logi FALSE
[13:23:50.369]   ..$ dryrun          : logi FALSE
[13:23:50.369]   ..$ quiet           : logi FALSE
[13:23:50.369]   ..$ setup_strategy  : chr "parallel"
[13:23:50.369]  - attr(*, "class")= chr [1:2] "makeNodePSOCKOptions" "makeNodeOptions"
[13:23:50.387] [local output] System call to launch all workers:
[13:23:50.387] [local output] '/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/RtmpJ16al6/worker.rank=1.parallelly.parent=88644.15a44263262f3.pid")), silent = TRUE)' -e 'options(socketOptions = "no-delay")' -e 'workRSOCK <- tryCatch(parallel:::.workRSOCK, error=function(e) parallel:::.slaveRSOCK); workRSOCK()' MASTER=localhost PORT=11050 OUT=/dev/null TIMEOUT=2592000 XDR=FALSE SETUPTIMEOUT=120 SETUPSTRATEGY=parallel
[13:23:50.387] [local output] Starting PSOCK main server
[13:23:50.388] [local output] Workers launched
[13:23:50.389] [local output] Waiting for workers to connect back
[13:23:50.389]  - [local output] 0 workers out of 2 ready
[13:23:50.654]  - [local output] 0 workers out of 2 ready
[13:23:50.655]  - [local output] 1 workers out of 2 ready
[13:23:50.665]  - [local output] 1 workers out of 2 ready
[13:23:50.665]  - [local output] 2 workers out of 2 ready
[13:23:50.665] [local output] Launching of workers completed
[13:23:50.665] [local output] Collecting session information from workers
[13:23:50.666] [local output]  - Worker #1 of 2
[13:23:50.667] [local output]  - Worker #2 of 2
[13:23:50.667] [local output] makeClusterPSOCK() ... done
[13:23:50.680] Packages needed by the future expression (n = 0): <none>
[13:23:50.680] Packages needed by future strategies (n = 0): <none>
[13:23:50.680] {
[13:23:50.680]     {
[13:23:50.680]         {
[13:23:50.680]             ...future.startTime <- base::Sys.time()
[13:23:50.680]             {
[13:23:50.680]                 {
[13:23:50.680]                   {
[13:23:50.680]                     base::local({
[13:23:50.680]                       has_future <- base::requireNamespace("future", 
[13:23:50.680]                         quietly = TRUE)
[13:23:50.680]                       if (has_future) {
[13:23:50.680]                         ns <- base::getNamespace("future")
[13:23:50.680]                         version <- ns[[".package"]][["version"]]
[13:23:50.680]                         if (is.null(version)) 
[13:23:50.680]                           version <- utils::packageVersion("future")
[13:23:50.680]                       }
[13:23:50.680]                       else {
[13:23:50.680]                         version <- NULL
[13:23:50.680]                       }
[13:23:50.680]                       if (!has_future || version < "1.8.0") {
[13:23:50.680]                         info <- base::c(r_version = base::gsub("R version ", 
[13:23:50.680]                           "", base::R.version$version.string), 
[13:23:50.680]                           platform = base::sprintf("%s (%s-bit)", 
[13:23:50.680]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:23:50.680]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[13:23:50.680]                             "release", "version")], collapse = " "), 
[13:23:50.680]                           hostname = base::Sys.info()[["nodename"]])
[13:23:50.680]                         info <- base::sprintf("%s: %s", base::names(info), 
[13:23:50.680]                           info)
[13:23:50.680]                         info <- base::paste(info, collapse = "; ")
[13:23:50.680]                         if (!has_future) {
[13:23:50.680]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:23:50.680]                             info)
[13:23:50.680]                         }
[13:23:50.680]                         else {
[13:23:50.680]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:23:50.680]                             info, version)
[13:23:50.680]                         }
[13:23:50.680]                         base::stop(msg)
[13:23:50.680]                       }
[13:23:50.680]                     })
[13:23:50.680]                   }
[13:23:50.680]                   options(future.plan = NULL)
[13:23:50.680]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:23:50.680]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:23:50.680]                 }
[13:23:50.680]                 ...future.workdir <- getwd()
[13:23:50.680]             }
[13:23:50.680]             ...future.oldOptions <- base::as.list(base::.Options)
[13:23:50.680]             ...future.oldEnvVars <- base::Sys.getenv()
[13:23:50.680]         }
[13:23:50.680]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:23:50.680]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:23:50.680]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:23:50.680]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:23:50.680]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:23:50.680]             future.stdout.windows.reencode = NULL, width = 80L)
[13:23:50.680]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:23:50.680]             base::names(...future.oldOptions))
[13:23:50.680]     }
[13:23:50.680]     if (FALSE) {
[13:23:50.680]     }
[13:23:50.680]     else {
[13:23:50.680]         if (TRUE) {
[13:23:50.680]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:23:50.680]                 open = "w")
[13:23:50.680]         }
[13:23:50.680]         else {
[13:23:50.680]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:23:50.680]                 windows = "NUL", "/dev/null"), open = "w")
[13:23:50.680]         }
[13:23:50.680]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:23:50.680]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:23:50.680]             base::sink(type = "output", split = FALSE)
[13:23:50.680]             base::close(...future.stdout)
[13:23:50.680]         }, add = TRUE)
[13:23:50.680]     }
[13:23:50.680]     ...future.frame <- base::sys.nframe()
[13:23:50.680]     ...future.conditions <- base::list()
[13:23:50.680]     ...future.rng <- base::globalenv()$.Random.seed
[13:23:50.680]     if (FALSE) {
[13:23:50.680]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:23:50.680]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:23:50.680]     }
[13:23:50.680]     ...future.result <- base::tryCatch({
[13:23:50.680]         base::withCallingHandlers({
[13:23:50.680]             ...future.value <- base::withVisible(base::local({
[13:23:50.680]                 ...future.makeSendCondition <- base::local({
[13:23:50.680]                   sendCondition <- NULL
[13:23:50.680]                   function(frame = 1L) {
[13:23:50.680]                     if (is.function(sendCondition)) 
[13:23:50.680]                       return(sendCondition)
[13:23:50.680]                     ns <- getNamespace("parallel")
[13:23:50.680]                     if (exists("sendData", mode = "function", 
[13:23:50.680]                       envir = ns)) {
[13:23:50.680]                       parallel_sendData <- get("sendData", mode = "function", 
[13:23:50.680]                         envir = ns)
[13:23:50.680]                       envir <- sys.frame(frame)
[13:23:50.680]                       master <- NULL
[13:23:50.680]                       while (!identical(envir, .GlobalEnv) && 
[13:23:50.680]                         !identical(envir, emptyenv())) {
[13:23:50.680]                         if (exists("master", mode = "list", envir = envir, 
[13:23:50.680]                           inherits = FALSE)) {
[13:23:50.680]                           master <- get("master", mode = "list", 
[13:23:50.680]                             envir = envir, inherits = FALSE)
[13:23:50.680]                           if (inherits(master, c("SOCKnode", 
[13:23:50.680]                             "SOCK0node"))) {
[13:23:50.680]                             sendCondition <<- function(cond) {
[13:23:50.680]                               data <- list(type = "VALUE", value = cond, 
[13:23:50.680]                                 success = TRUE)
[13:23:50.680]                               parallel_sendData(master, data)
[13:23:50.680]                             }
[13:23:50.680]                             return(sendCondition)
[13:23:50.680]                           }
[13:23:50.680]                         }
[13:23:50.680]                         frame <- frame + 1L
[13:23:50.680]                         envir <- sys.frame(frame)
[13:23:50.680]                       }
[13:23:50.680]                     }
[13:23:50.680]                     sendCondition <<- function(cond) NULL
[13:23:50.680]                   }
[13:23:50.680]                 })
[13:23:50.680]                 withCallingHandlers({
[13:23:50.680]                   NA
[13:23:50.680]                 }, immediateCondition = function(cond) {
[13:23:50.680]                   sendCondition <- ...future.makeSendCondition()
[13:23:50.680]                   sendCondition(cond)
[13:23:50.680]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:23:50.680]                   {
[13:23:50.680]                     inherits <- base::inherits
[13:23:50.680]                     invokeRestart <- base::invokeRestart
[13:23:50.680]                     is.null <- base::is.null
[13:23:50.680]                     muffled <- FALSE
[13:23:50.680]                     if (inherits(cond, "message")) {
[13:23:50.680]                       muffled <- grepl(pattern, "muffleMessage")
[13:23:50.680]                       if (muffled) 
[13:23:50.680]                         invokeRestart("muffleMessage")
[13:23:50.680]                     }
[13:23:50.680]                     else if (inherits(cond, "warning")) {
[13:23:50.680]                       muffled <- grepl(pattern, "muffleWarning")
[13:23:50.680]                       if (muffled) 
[13:23:50.680]                         invokeRestart("muffleWarning")
[13:23:50.680]                     }
[13:23:50.680]                     else if (inherits(cond, "condition")) {
[13:23:50.680]                       if (!is.null(pattern)) {
[13:23:50.680]                         computeRestarts <- base::computeRestarts
[13:23:50.680]                         grepl <- base::grepl
[13:23:50.680]                         restarts <- computeRestarts(cond)
[13:23:50.680]                         for (restart in restarts) {
[13:23:50.680]                           name <- restart$name
[13:23:50.680]                           if (is.null(name)) 
[13:23:50.680]                             next
[13:23:50.680]                           if (!grepl(pattern, name)) 
[13:23:50.680]                             next
[13:23:50.680]                           invokeRestart(restart)
[13:23:50.680]                           muffled <- TRUE
[13:23:50.680]                           break
[13:23:50.680]                         }
[13:23:50.680]                       }
[13:23:50.680]                     }
[13:23:50.680]                     invisible(muffled)
[13:23:50.680]                   }
[13:23:50.680]                   muffleCondition(cond)
[13:23:50.680]                 })
[13:23:50.680]             }))
[13:23:50.680]             future::FutureResult(value = ...future.value$value, 
[13:23:50.680]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:23:50.680]                   ...future.rng), globalenv = if (FALSE) 
[13:23:50.680]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:23:50.680]                     ...future.globalenv.names))
[13:23:50.680]                 else NULL, started = ...future.startTime, version = "1.8")
[13:23:50.680]         }, condition = base::local({
[13:23:50.680]             c <- base::c
[13:23:50.680]             inherits <- base::inherits
[13:23:50.680]             invokeRestart <- base::invokeRestart
[13:23:50.680]             length <- base::length
[13:23:50.680]             list <- base::list
[13:23:50.680]             seq.int <- base::seq.int
[13:23:50.680]             signalCondition <- base::signalCondition
[13:23:50.680]             sys.calls <- base::sys.calls
[13:23:50.680]             `[[` <- base::`[[`
[13:23:50.680]             `+` <- base::`+`
[13:23:50.680]             `<<-` <- base::`<<-`
[13:23:50.680]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:23:50.680]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:23:50.680]                   3L)]
[13:23:50.680]             }
[13:23:50.680]             function(cond) {
[13:23:50.680]                 is_error <- inherits(cond, "error")
[13:23:50.680]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:23:50.680]                   NULL)
[13:23:50.680]                 if (is_error) {
[13:23:50.680]                   sessionInformation <- function() {
[13:23:50.680]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:23:50.680]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:23:50.680]                       search = base::search(), system = base::Sys.info())
[13:23:50.680]                   }
[13:23:50.680]                   ...future.conditions[[length(...future.conditions) + 
[13:23:50.680]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:23:50.680]                     cond$call), session = sessionInformation(), 
[13:23:50.680]                     timestamp = base::Sys.time(), signaled = 0L)
[13:23:50.680]                   signalCondition(cond)
[13:23:50.680]                 }
[13:23:50.680]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:23:50.680]                 "immediateCondition"))) {
[13:23:50.680]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:23:50.680]                   ...future.conditions[[length(...future.conditions) + 
[13:23:50.680]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:23:50.680]                   if (TRUE && !signal) {
[13:23:50.680]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:23:50.680]                     {
[13:23:50.680]                       inherits <- base::inherits
[13:23:50.680]                       invokeRestart <- base::invokeRestart
[13:23:50.680]                       is.null <- base::is.null
[13:23:50.680]                       muffled <- FALSE
[13:23:50.680]                       if (inherits(cond, "message")) {
[13:23:50.680]                         muffled <- grepl(pattern, "muffleMessage")
[13:23:50.680]                         if (muffled) 
[13:23:50.680]                           invokeRestart("muffleMessage")
[13:23:50.680]                       }
[13:23:50.680]                       else if (inherits(cond, "warning")) {
[13:23:50.680]                         muffled <- grepl(pattern, "muffleWarning")
[13:23:50.680]                         if (muffled) 
[13:23:50.680]                           invokeRestart("muffleWarning")
[13:23:50.680]                       }
[13:23:50.680]                       else if (inherits(cond, "condition")) {
[13:23:50.680]                         if (!is.null(pattern)) {
[13:23:50.680]                           computeRestarts <- base::computeRestarts
[13:23:50.680]                           grepl <- base::grepl
[13:23:50.680]                           restarts <- computeRestarts(cond)
[13:23:50.680]                           for (restart in restarts) {
[13:23:50.680]                             name <- restart$name
[13:23:50.680]                             if (is.null(name)) 
[13:23:50.680]                               next
[13:23:50.680]                             if (!grepl(pattern, name)) 
[13:23:50.680]                               next
[13:23:50.680]                             invokeRestart(restart)
[13:23:50.680]                             muffled <- TRUE
[13:23:50.680]                             break
[13:23:50.680]                           }
[13:23:50.680]                         }
[13:23:50.680]                       }
[13:23:50.680]                       invisible(muffled)
[13:23:50.680]                     }
[13:23:50.680]                     muffleCondition(cond, pattern = "^muffle")
[13:23:50.680]                   }
[13:23:50.680]                 }
[13:23:50.680]                 else {
[13:23:50.680]                   if (TRUE) {
[13:23:50.680]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:23:50.680]                     {
[13:23:50.680]                       inherits <- base::inherits
[13:23:50.680]                       invokeRestart <- base::invokeRestart
[13:23:50.680]                       is.null <- base::is.null
[13:23:50.680]                       muffled <- FALSE
[13:23:50.680]                       if (inherits(cond, "message")) {
[13:23:50.680]                         muffled <- grepl(pattern, "muffleMessage")
[13:23:50.680]                         if (muffled) 
[13:23:50.680]                           invokeRestart("muffleMessage")
[13:23:50.680]                       }
[13:23:50.680]                       else if (inherits(cond, "warning")) {
[13:23:50.680]                         muffled <- grepl(pattern, "muffleWarning")
[13:23:50.680]                         if (muffled) 
[13:23:50.680]                           invokeRestart("muffleWarning")
[13:23:50.680]                       }
[13:23:50.680]                       else if (inherits(cond, "condition")) {
[13:23:50.680]                         if (!is.null(pattern)) {
[13:23:50.680]                           computeRestarts <- base::computeRestarts
[13:23:50.680]                           grepl <- base::grepl
[13:23:50.680]                           restarts <- computeRestarts(cond)
[13:23:50.680]                           for (restart in restarts) {
[13:23:50.680]                             name <- restart$name
[13:23:50.680]                             if (is.null(name)) 
[13:23:50.680]                               next
[13:23:50.680]                             if (!grepl(pattern, name)) 
[13:23:50.680]                               next
[13:23:50.680]                             invokeRestart(restart)
[13:23:50.680]                             muffled <- TRUE
[13:23:50.680]                             break
[13:23:50.680]                           }
[13:23:50.680]                         }
[13:23:50.680]                       }
[13:23:50.680]                       invisible(muffled)
[13:23:50.680]                     }
[13:23:50.680]                     muffleCondition(cond, pattern = "^muffle")
[13:23:50.680]                   }
[13:23:50.680]                 }
[13:23:50.680]             }
[13:23:50.680]         }))
[13:23:50.680]     }, error = function(ex) {
[13:23:50.680]         base::structure(base::list(value = NULL, visible = NULL, 
[13:23:50.680]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:23:50.680]                 ...future.rng), started = ...future.startTime, 
[13:23:50.680]             finished = Sys.time(), session_uuid = NA_character_, 
[13:23:50.680]             version = "1.8"), class = "FutureResult")
[13:23:50.680]     }, finally = {
[13:23:50.680]         if (!identical(...future.workdir, getwd())) 
[13:23:50.680]             setwd(...future.workdir)
[13:23:50.680]         {
[13:23:50.680]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:23:50.680]                 ...future.oldOptions$nwarnings <- NULL
[13:23:50.680]             }
[13:23:50.680]             base::options(...future.oldOptions)
[13:23:50.680]             if (.Platform$OS.type == "windows") {
[13:23:50.680]                 old_names <- names(...future.oldEnvVars)
[13:23:50.680]                 envs <- base::Sys.getenv()
[13:23:50.680]                 names <- names(envs)
[13:23:50.680]                 common <- intersect(names, old_names)
[13:23:50.680]                 added <- setdiff(names, old_names)
[13:23:50.680]                 removed <- setdiff(old_names, names)
[13:23:50.680]                 changed <- common[...future.oldEnvVars[common] != 
[13:23:50.680]                   envs[common]]
[13:23:50.680]                 NAMES <- toupper(changed)
[13:23:50.680]                 args <- list()
[13:23:50.680]                 for (kk in seq_along(NAMES)) {
[13:23:50.680]                   name <- changed[[kk]]
[13:23:50.680]                   NAME <- NAMES[[kk]]
[13:23:50.680]                   if (name != NAME && is.element(NAME, old_names)) 
[13:23:50.680]                     next
[13:23:50.680]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:23:50.680]                 }
[13:23:50.680]                 NAMES <- toupper(added)
[13:23:50.680]                 for (kk in seq_along(NAMES)) {
[13:23:50.680]                   name <- added[[kk]]
[13:23:50.680]                   NAME <- NAMES[[kk]]
[13:23:50.680]                   if (name != NAME && is.element(NAME, old_names)) 
[13:23:50.680]                     next
[13:23:50.680]                   args[[name]] <- ""
[13:23:50.680]                 }
[13:23:50.680]                 NAMES <- toupper(removed)
[13:23:50.680]                 for (kk in seq_along(NAMES)) {
[13:23:50.680]                   name <- removed[[kk]]
[13:23:50.680]                   NAME <- NAMES[[kk]]
[13:23:50.680]                   if (name != NAME && is.element(NAME, old_names)) 
[13:23:50.680]                     next
[13:23:50.680]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:23:50.680]                 }
[13:23:50.680]                 if (length(args) > 0) 
[13:23:50.680]                   base::do.call(base::Sys.setenv, args = args)
[13:23:50.680]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:23:50.680]             }
[13:23:50.680]             else {
[13:23:50.680]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:23:50.680]             }
[13:23:50.680]             {
[13:23:50.680]                 if (base::length(...future.futureOptionsAdded) > 
[13:23:50.680]                   0L) {
[13:23:50.680]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:23:50.680]                   base::names(opts) <- ...future.futureOptionsAdded
[13:23:50.680]                   base::options(opts)
[13:23:50.680]                 }
[13:23:50.680]                 {
[13:23:50.680]                   NULL
[13:23:50.680]                   options(future.plan = NULL)
[13:23:50.680]                   if (is.na(NA_character_)) 
[13:23:50.680]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:23:50.680]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:23:50.680]                   future::plan(list(function (..., workers = c("localhost", 
[13:23:50.680]                   "localhost"), envir = parent.frame()) 
[13:23:50.680]                   strategy(..., workers = workers, envir = envir)), 
[13:23:50.680]                     .cleanup = FALSE, .init = FALSE)
[13:23:50.680]                 }
[13:23:50.680]             }
[13:23:50.680]         }
[13:23:50.680]     })
[13:23:50.680]     if (TRUE) {
[13:23:50.680]         base::sink(type = "output", split = FALSE)
[13:23:50.680]         if (TRUE) {
[13:23:50.680]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:23:50.680]         }
[13:23:50.680]         else {
[13:23:50.680]             ...future.result["stdout"] <- base::list(NULL)
[13:23:50.680]         }
[13:23:50.680]         base::close(...future.stdout)
[13:23:50.680]         ...future.stdout <- NULL
[13:23:50.680]     }
[13:23:50.680]     ...future.result$conditions <- ...future.conditions
[13:23:50.680]     ...future.result$finished <- base::Sys.time()
[13:23:50.680]     ...future.result
[13:23:50.680] }
[13:23:50.735] ClusterFuture started
[13:23:50.736] result() for ClusterFuture ...
[13:23:50.736] receiveMessageFromWorker() for ClusterFuture ...
[13:23:50.736] - Validating connection of ClusterFuture
[13:23:50.770] - received message: FutureResult
[13:23:50.771] - Received FutureResult
[13:23:50.771] - Erased future from FutureRegistry
[13:23:50.771] result() for ClusterFuture ...
[13:23:50.771] - result already collected: FutureResult
[13:23:50.771] result() for ClusterFuture ... done
[13:23:50.771] receiveMessageFromWorker() for ClusterFuture ... done
[13:23:50.771] result() for ClusterFuture ... done
[13:23:50.771] result() for ClusterFuture ...
[13:23:50.771] - result already collected: FutureResult
[13:23:50.772] result() for ClusterFuture ... done
[13:23:50.772] plan(): plan_init() of ‘tweaked’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ... DONE
[13:23:50.772] plan(): nbrOfWorkers() = 2
> n <- nbrOfWorkers()
> message(sprintf("nbrOfWorkers: %d", n))
nbrOfWorkers: 2
> stopifnot(n == length(workers))
> plan(cluster, workers = allButOneWorker)
[13:23:50.773] plan(): Setting new future strategy stack:
[13:23:50.773] List of future strategies:
[13:23:50.773] 1. cluster:
[13:23:50.773]    - args: function (..., workers = "<function ()  >", envir = parent.frame())
[13:23:50.773]    - tweaked: TRUE
[13:23:50.773]    - call: plan(cluster, workers = allButOneWorker)
[13:23:50.774] plan(): plan_init() of ‘tweaked’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ...
[13:23:50.774] cluster:
[13:23:50.774] - args: function (..., workers = "<function ()  >", envir = parent.frame())
[13:23:50.774] - tweaked: TRUE
[13:23:50.774] - call: plan(cluster, workers = allButOneWorker)
[13:23:50.775] getGlobalsAndPackages() ...
[13:23:50.775] Not searching for globals
[13:23:50.775] - globals: [0] <none>
[13:23:50.775] getGlobalsAndPackages() ... DONE
[13:23:50.781] [local output] makeClusterPSOCK() ...
[13:23:50.781] [local output] Workers: [n = 1] ‘localhost’
[13:23:50.782] [local output] Base port: 11211
[13:23:50.782] [local output] Getting setup options for 1 cluster nodes ...
[13:23:50.782] [local output]  - Node 1 of 1 ...
[13:23:50.782] [local output] localMachine=TRUE => revtunnel=FALSE

[13:23:50.783] [local output] Rscript port: 11211

[13:23:50.784] [local output] Getting setup options for 1 cluster nodes ... done
[13:23:50.784] [local output]  - Parallel setup requested for some PSOCK nodes
[13:23:50.784] [local output] Setting up PSOCK nodes in parallel
[13:23:50.784] List of 36
[13:23:50.784]  $ worker          : chr "localhost"
[13:23:50.784]   ..- attr(*, "localhost")= logi TRUE
[13:23:50.784]  $ master          : chr "localhost"
[13:23:50.784]  $ port            : int 11211
[13:23:50.784]  $ connectTimeout  : num 120
[13:23:50.784]  $ timeout         : num 2592000
[13:23:50.784]  $ rscript         : chr "'/usr/local/lib/R/bin/Rscript'"
[13:23:50.784]  $ homogeneous     : logi TRUE
[13:23:50.784]  $ rscript_args    : chr "--default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),fi"| __truncated__
[13:23:50.784]  $ rscript_envs    : NULL
[13:23:50.784]  $ rscript_libs    : NULL
[13:23:50.784]  $ rscript_startup : NULL
[13:23:50.784]  $ rscript_sh      : chr "sh"
[13:23:50.784]  $ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[13:23:50.784]  $ methods         : logi TRUE
[13:23:50.784]  $ socketOptions   : chr "no-delay"
[13:23:50.784]  $ useXDR          : logi FALSE
[13:23:50.784]  $ outfile         : chr "/dev/null"
[13:23:50.784]  $ renice          : int NA
[13:23:50.784]  $ rshcmd          : NULL
[13:23:50.784]  $ user            : chr(0) 
[13:23:50.784]  $ revtunnel       : logi FALSE
[13:23:50.784]  $ rshlogfile      : NULL
[13:23:50.784]  $ rshopts         : chr(0) 
[13:23:50.784]  $ rank            : int 1
[13:23:50.784]  $ manual          : logi FALSE
[13:23:50.784]  $ dryrun          : logi FALSE
[13:23:50.784]  $ quiet           : logi FALSE
[13:23:50.784]  $ setup_strategy  : chr "parallel"
[13:23:50.784]  $ local_cmd       : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[13:23:50.784]  $ pidfile         : chr "/tmp/RtmpJ16al6/worker.rank=1.parallelly.parent=88644.15a4472b88baa.pid"
[13:23:50.784]  $ rshcmd_label    : NULL
[13:23:50.784]  $ rsh_call        : NULL
[13:23:50.784]  $ cmd             : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[13:23:50.784]  $ localMachine    : logi TRUE
[13:23:50.784]  $ make_fcn        :function (worker = getOption2("parallelly.localhost.hostname", "localhost"), 
[13:23:50.784]     master = NULL, port, connectTimeout = getOption2("parallelly.makeNodePSOCK.connectTimeout", 
[13:23:50.784]         2 * 60), timeout = getOption2("parallelly.makeNodePSOCK.timeout", 
[13:23:50.784]         30 * 24 * 60 * 60), rscript = NULL, homogeneous = NULL, rscript_args = NULL, 
[13:23:50.784]     rscript_envs = NULL, rscript_libs = NULL, rscript_startup = NULL, rscript_sh = c("auto", 
[13:23:50.784]         "cmd", "sh"), default_packages = c("datasets", "utils", "grDevices", 
[13:23:50.784]         "graphics", "stats", if (methods) "methods"), methods = TRUE, socketOptions = getOption2("parallelly.makeNodePSOCK.socketOptions", 
[13:23:50.784]         "no-delay"), useXDR = getOption2("parallelly.makeNodePSOCK.useXDR", 
[13:23:50.784]         FALSE), outfile = "/dev/null", renice = NA_integer_, rshcmd = getOption2("parallelly.makeNodePSOCK.rshcmd", 
[13:23:50.784]         NULL), user = NULL, revtunnel = NA, rshlogfile = NULL, rshopts = getOption2("parallelly.makeNodePSOCK.rshopts", 
[13:23:50.784]         NULL), rank = 1L, manual = FALSE, dryrun = FALSE, quiet = FALSE, 
[13:23:50.784]     setup_strategy = getOption2("parallelly.makeNodePSOCK.setup_strategy", 
[13:23:50.784]         "parallel"), action = c("launch", "options"), verbose = FALSE)  
[13:23:50.784]  $ arguments       :List of 28
[13:23:50.784]   ..$ worker          : chr "localhost"
[13:23:50.784]   ..$ master          : NULL
[13:23:50.784]   ..$ port            : int 11211
[13:23:50.784]   ..$ connectTimeout  : num 120
[13:23:50.784]   ..$ timeout         : num 2592000
[13:23:50.784]   ..$ rscript         : NULL
[13:23:50.784]   ..$ homogeneous     : NULL
[13:23:50.784]   ..$ rscript_args    : NULL
[13:23:50.784]   ..$ rscript_envs    : NULL
[13:23:50.784]   ..$ rscript_libs    : NULL
[13:23:50.784]   ..$ rscript_startup : NULL
[13:23:50.784]   ..$ rscript_sh      : chr [1:3] "auto" "cmd" "sh"
[13:23:50.784]   ..$ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[13:23:50.784]   ..$ methods         : logi TRUE
[13:23:50.784]   ..$ socketOptions   : chr "no-delay"
[13:23:50.784]   ..$ useXDR          : logi FALSE
[13:23:50.784]   ..$ outfile         : chr "/dev/null"
[13:23:50.784]   ..$ renice          : int NA
[13:23:50.784]   ..$ rshcmd          : NULL
[13:23:50.784]   ..$ user            : NULL
[13:23:50.784]   ..$ revtunnel       : logi NA
[13:23:50.784]   ..$ rshlogfile      : NULL
[13:23:50.784]   ..$ rshopts         : NULL
[13:23:50.784]   ..$ rank            : int 1
[13:23:50.784]   ..$ manual          : logi FALSE
[13:23:50.784]   ..$ dryrun          : logi FALSE
[13:23:50.784]   ..$ quiet           : logi FALSE
[13:23:50.784]   ..$ setup_strategy  : chr "parallel"
[13:23:50.784]  - attr(*, "class")= chr [1:2] "makeNodePSOCKOptions" "makeNodeOptions"
[13:23:50.803] [local output] System call to launch all workers:
[13:23:50.803] [local output] '/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/RtmpJ16al6/worker.rank=1.parallelly.parent=88644.15a4472b88baa.pid")), silent = TRUE)' -e 'options(socketOptions = "no-delay")' -e 'workRSOCK <- tryCatch(parallel:::.workRSOCK, error=function(e) parallel:::.slaveRSOCK); workRSOCK()' MASTER=localhost PORT=11211 OUT=/dev/null TIMEOUT=2592000 XDR=FALSE SETUPTIMEOUT=120 SETUPSTRATEGY=parallel
[13:23:50.803] [local output] Starting PSOCK main server
[13:23:50.805] [local output] Workers launched
[13:23:50.805] [local output] Waiting for workers to connect back
[13:23:50.805]  - [local output] 0 workers out of 1 ready
[13:23:51.005]  - [local output] 0 workers out of 1 ready
[13:23:51.005]  - [local output] 1 workers out of 1 ready
[13:23:51.006] [local output] Launching of workers completed
[13:23:51.006] [local output] Collecting session information from workers
[13:23:51.006] [local output]  - Worker #1 of 1
[13:23:51.007] [local output] makeClusterPSOCK() ... done
[13:23:51.012] Packages needed by the future expression (n = 0): <none>
[13:23:51.012] Packages needed by future strategies (n = 0): <none>
[13:23:51.013] {
[13:23:51.013]     {
[13:23:51.013]         {
[13:23:51.013]             ...future.startTime <- base::Sys.time()
[13:23:51.013]             {
[13:23:51.013]                 {
[13:23:51.013]                   {
[13:23:51.013]                     base::local({
[13:23:51.013]                       has_future <- base::requireNamespace("future", 
[13:23:51.013]                         quietly = TRUE)
[13:23:51.013]                       if (has_future) {
[13:23:51.013]                         ns <- base::getNamespace("future")
[13:23:51.013]                         version <- ns[[".package"]][["version"]]
[13:23:51.013]                         if (is.null(version)) 
[13:23:51.013]                           version <- utils::packageVersion("future")
[13:23:51.013]                       }
[13:23:51.013]                       else {
[13:23:51.013]                         version <- NULL
[13:23:51.013]                       }
[13:23:51.013]                       if (!has_future || version < "1.8.0") {
[13:23:51.013]                         info <- base::c(r_version = base::gsub("R version ", 
[13:23:51.013]                           "", base::R.version$version.string), 
[13:23:51.013]                           platform = base::sprintf("%s (%s-bit)", 
[13:23:51.013]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:23:51.013]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[13:23:51.013]                             "release", "version")], collapse = " "), 
[13:23:51.013]                           hostname = base::Sys.info()[["nodename"]])
[13:23:51.013]                         info <- base::sprintf("%s: %s", base::names(info), 
[13:23:51.013]                           info)
[13:23:51.013]                         info <- base::paste(info, collapse = "; ")
[13:23:51.013]                         if (!has_future) {
[13:23:51.013]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:23:51.013]                             info)
[13:23:51.013]                         }
[13:23:51.013]                         else {
[13:23:51.013]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:23:51.013]                             info, version)
[13:23:51.013]                         }
[13:23:51.013]                         base::stop(msg)
[13:23:51.013]                       }
[13:23:51.013]                     })
[13:23:51.013]                   }
[13:23:51.013]                   options(future.plan = NULL)
[13:23:51.013]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:23:51.013]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:23:51.013]                 }
[13:23:51.013]                 ...future.workdir <- getwd()
[13:23:51.013]             }
[13:23:51.013]             ...future.oldOptions <- base::as.list(base::.Options)
[13:23:51.013]             ...future.oldEnvVars <- base::Sys.getenv()
[13:23:51.013]         }
[13:23:51.013]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:23:51.013]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:23:51.013]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:23:51.013]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:23:51.013]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:23:51.013]             future.stdout.windows.reencode = NULL, width = 80L)
[13:23:51.013]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:23:51.013]             base::names(...future.oldOptions))
[13:23:51.013]     }
[13:23:51.013]     if (FALSE) {
[13:23:51.013]     }
[13:23:51.013]     else {
[13:23:51.013]         if (TRUE) {
[13:23:51.013]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:23:51.013]                 open = "w")
[13:23:51.013]         }
[13:23:51.013]         else {
[13:23:51.013]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:23:51.013]                 windows = "NUL", "/dev/null"), open = "w")
[13:23:51.013]         }
[13:23:51.013]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:23:51.013]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:23:51.013]             base::sink(type = "output", split = FALSE)
[13:23:51.013]             base::close(...future.stdout)
[13:23:51.013]         }, add = TRUE)
[13:23:51.013]     }
[13:23:51.013]     ...future.frame <- base::sys.nframe()
[13:23:51.013]     ...future.conditions <- base::list()
[13:23:51.013]     ...future.rng <- base::globalenv()$.Random.seed
[13:23:51.013]     if (FALSE) {
[13:23:51.013]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:23:51.013]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:23:51.013]     }
[13:23:51.013]     ...future.result <- base::tryCatch({
[13:23:51.013]         base::withCallingHandlers({
[13:23:51.013]             ...future.value <- base::withVisible(base::local({
[13:23:51.013]                 ...future.makeSendCondition <- base::local({
[13:23:51.013]                   sendCondition <- NULL
[13:23:51.013]                   function(frame = 1L) {
[13:23:51.013]                     if (is.function(sendCondition)) 
[13:23:51.013]                       return(sendCondition)
[13:23:51.013]                     ns <- getNamespace("parallel")
[13:23:51.013]                     if (exists("sendData", mode = "function", 
[13:23:51.013]                       envir = ns)) {
[13:23:51.013]                       parallel_sendData <- get("sendData", mode = "function", 
[13:23:51.013]                         envir = ns)
[13:23:51.013]                       envir <- sys.frame(frame)
[13:23:51.013]                       master <- NULL
[13:23:51.013]                       while (!identical(envir, .GlobalEnv) && 
[13:23:51.013]                         !identical(envir, emptyenv())) {
[13:23:51.013]                         if (exists("master", mode = "list", envir = envir, 
[13:23:51.013]                           inherits = FALSE)) {
[13:23:51.013]                           master <- get("master", mode = "list", 
[13:23:51.013]                             envir = envir, inherits = FALSE)
[13:23:51.013]                           if (inherits(master, c("SOCKnode", 
[13:23:51.013]                             "SOCK0node"))) {
[13:23:51.013]                             sendCondition <<- function(cond) {
[13:23:51.013]                               data <- list(type = "VALUE", value = cond, 
[13:23:51.013]                                 success = TRUE)
[13:23:51.013]                               parallel_sendData(master, data)
[13:23:51.013]                             }
[13:23:51.013]                             return(sendCondition)
[13:23:51.013]                           }
[13:23:51.013]                         }
[13:23:51.013]                         frame <- frame + 1L
[13:23:51.013]                         envir <- sys.frame(frame)
[13:23:51.013]                       }
[13:23:51.013]                     }
[13:23:51.013]                     sendCondition <<- function(cond) NULL
[13:23:51.013]                   }
[13:23:51.013]                 })
[13:23:51.013]                 withCallingHandlers({
[13:23:51.013]                   NA
[13:23:51.013]                 }, immediateCondition = function(cond) {
[13:23:51.013]                   sendCondition <- ...future.makeSendCondition()
[13:23:51.013]                   sendCondition(cond)
[13:23:51.013]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:23:51.013]                   {
[13:23:51.013]                     inherits <- base::inherits
[13:23:51.013]                     invokeRestart <- base::invokeRestart
[13:23:51.013]                     is.null <- base::is.null
[13:23:51.013]                     muffled <- FALSE
[13:23:51.013]                     if (inherits(cond, "message")) {
[13:23:51.013]                       muffled <- grepl(pattern, "muffleMessage")
[13:23:51.013]                       if (muffled) 
[13:23:51.013]                         invokeRestart("muffleMessage")
[13:23:51.013]                     }
[13:23:51.013]                     else if (inherits(cond, "warning")) {
[13:23:51.013]                       muffled <- grepl(pattern, "muffleWarning")
[13:23:51.013]                       if (muffled) 
[13:23:51.013]                         invokeRestart("muffleWarning")
[13:23:51.013]                     }
[13:23:51.013]                     else if (inherits(cond, "condition")) {
[13:23:51.013]                       if (!is.null(pattern)) {
[13:23:51.013]                         computeRestarts <- base::computeRestarts
[13:23:51.013]                         grepl <- base::grepl
[13:23:51.013]                         restarts <- computeRestarts(cond)
[13:23:51.013]                         for (restart in restarts) {
[13:23:51.013]                           name <- restart$name
[13:23:51.013]                           if (is.null(name)) 
[13:23:51.013]                             next
[13:23:51.013]                           if (!grepl(pattern, name)) 
[13:23:51.013]                             next
[13:23:51.013]                           invokeRestart(restart)
[13:23:51.013]                           muffled <- TRUE
[13:23:51.013]                           break
[13:23:51.013]                         }
[13:23:51.013]                       }
[13:23:51.013]                     }
[13:23:51.013]                     invisible(muffled)
[13:23:51.013]                   }
[13:23:51.013]                   muffleCondition(cond)
[13:23:51.013]                 })
[13:23:51.013]             }))
[13:23:51.013]             future::FutureResult(value = ...future.value$value, 
[13:23:51.013]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:23:51.013]                   ...future.rng), globalenv = if (FALSE) 
[13:23:51.013]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:23:51.013]                     ...future.globalenv.names))
[13:23:51.013]                 else NULL, started = ...future.startTime, version = "1.8")
[13:23:51.013]         }, condition = base::local({
[13:23:51.013]             c <- base::c
[13:23:51.013]             inherits <- base::inherits
[13:23:51.013]             invokeRestart <- base::invokeRestart
[13:23:51.013]             length <- base::length
[13:23:51.013]             list <- base::list
[13:23:51.013]             seq.int <- base::seq.int
[13:23:51.013]             signalCondition <- base::signalCondition
[13:23:51.013]             sys.calls <- base::sys.calls
[13:23:51.013]             `[[` <- base::`[[`
[13:23:51.013]             `+` <- base::`+`
[13:23:51.013]             `<<-` <- base::`<<-`
[13:23:51.013]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:23:51.013]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:23:51.013]                   3L)]
[13:23:51.013]             }
[13:23:51.013]             function(cond) {
[13:23:51.013]                 is_error <- inherits(cond, "error")
[13:23:51.013]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:23:51.013]                   NULL)
[13:23:51.013]                 if (is_error) {
[13:23:51.013]                   sessionInformation <- function() {
[13:23:51.013]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:23:51.013]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:23:51.013]                       search = base::search(), system = base::Sys.info())
[13:23:51.013]                   }
[13:23:51.013]                   ...future.conditions[[length(...future.conditions) + 
[13:23:51.013]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:23:51.013]                     cond$call), session = sessionInformation(), 
[13:23:51.013]                     timestamp = base::Sys.time(), signaled = 0L)
[13:23:51.013]                   signalCondition(cond)
[13:23:51.013]                 }
[13:23:51.013]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:23:51.013]                 "immediateCondition"))) {
[13:23:51.013]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:23:51.013]                   ...future.conditions[[length(...future.conditions) + 
[13:23:51.013]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:23:51.013]                   if (TRUE && !signal) {
[13:23:51.013]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:23:51.013]                     {
[13:23:51.013]                       inherits <- base::inherits
[13:23:51.013]                       invokeRestart <- base::invokeRestart
[13:23:51.013]                       is.null <- base::is.null
[13:23:51.013]                       muffled <- FALSE
[13:23:51.013]                       if (inherits(cond, "message")) {
[13:23:51.013]                         muffled <- grepl(pattern, "muffleMessage")
[13:23:51.013]                         if (muffled) 
[13:23:51.013]                           invokeRestart("muffleMessage")
[13:23:51.013]                       }
[13:23:51.013]                       else if (inherits(cond, "warning")) {
[13:23:51.013]                         muffled <- grepl(pattern, "muffleWarning")
[13:23:51.013]                         if (muffled) 
[13:23:51.013]                           invokeRestart("muffleWarning")
[13:23:51.013]                       }
[13:23:51.013]                       else if (inherits(cond, "condition")) {
[13:23:51.013]                         if (!is.null(pattern)) {
[13:23:51.013]                           computeRestarts <- base::computeRestarts
[13:23:51.013]                           grepl <- base::grepl
[13:23:51.013]                           restarts <- computeRestarts(cond)
[13:23:51.013]                           for (restart in restarts) {
[13:23:51.013]                             name <- restart$name
[13:23:51.013]                             if (is.null(name)) 
[13:23:51.013]                               next
[13:23:51.013]                             if (!grepl(pattern, name)) 
[13:23:51.013]                               next
[13:23:51.013]                             invokeRestart(restart)
[13:23:51.013]                             muffled <- TRUE
[13:23:51.013]                             break
[13:23:51.013]                           }
[13:23:51.013]                         }
[13:23:51.013]                       }
[13:23:51.013]                       invisible(muffled)
[13:23:51.013]                     }
[13:23:51.013]                     muffleCondition(cond, pattern = "^muffle")
[13:23:51.013]                   }
[13:23:51.013]                 }
[13:23:51.013]                 else {
[13:23:51.013]                   if (TRUE) {
[13:23:51.013]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:23:51.013]                     {
[13:23:51.013]                       inherits <- base::inherits
[13:23:51.013]                       invokeRestart <- base::invokeRestart
[13:23:51.013]                       is.null <- base::is.null
[13:23:51.013]                       muffled <- FALSE
[13:23:51.013]                       if (inherits(cond, "message")) {
[13:23:51.013]                         muffled <- grepl(pattern, "muffleMessage")
[13:23:51.013]                         if (muffled) 
[13:23:51.013]                           invokeRestart("muffleMessage")
[13:23:51.013]                       }
[13:23:51.013]                       else if (inherits(cond, "warning")) {
[13:23:51.013]                         muffled <- grepl(pattern, "muffleWarning")
[13:23:51.013]                         if (muffled) 
[13:23:51.013]                           invokeRestart("muffleWarning")
[13:23:51.013]                       }
[13:23:51.013]                       else if (inherits(cond, "condition")) {
[13:23:51.013]                         if (!is.null(pattern)) {
[13:23:51.013]                           computeRestarts <- base::computeRestarts
[13:23:51.013]                           grepl <- base::grepl
[13:23:51.013]                           restarts <- computeRestarts(cond)
[13:23:51.013]                           for (restart in restarts) {
[13:23:51.013]                             name <- restart$name
[13:23:51.013]                             if (is.null(name)) 
[13:23:51.013]                               next
[13:23:51.013]                             if (!grepl(pattern, name)) 
[13:23:51.013]                               next
[13:23:51.013]                             invokeRestart(restart)
[13:23:51.013]                             muffled <- TRUE
[13:23:51.013]                             break
[13:23:51.013]                           }
[13:23:51.013]                         }
[13:23:51.013]                       }
[13:23:51.013]                       invisible(muffled)
[13:23:51.013]                     }
[13:23:51.013]                     muffleCondition(cond, pattern = "^muffle")
[13:23:51.013]                   }
[13:23:51.013]                 }
[13:23:51.013]             }
[13:23:51.013]         }))
[13:23:51.013]     }, error = function(ex) {
[13:23:51.013]         base::structure(base::list(value = NULL, visible = NULL, 
[13:23:51.013]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:23:51.013]                 ...future.rng), started = ...future.startTime, 
[13:23:51.013]             finished = Sys.time(), session_uuid = NA_character_, 
[13:23:51.013]             version = "1.8"), class = "FutureResult")
[13:23:51.013]     }, finally = {
[13:23:51.013]         if (!identical(...future.workdir, getwd())) 
[13:23:51.013]             setwd(...future.workdir)
[13:23:51.013]         {
[13:23:51.013]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:23:51.013]                 ...future.oldOptions$nwarnings <- NULL
[13:23:51.013]             }
[13:23:51.013]             base::options(...future.oldOptions)
[13:23:51.013]             if (.Platform$OS.type == "windows") {
[13:23:51.013]                 old_names <- names(...future.oldEnvVars)
[13:23:51.013]                 envs <- base::Sys.getenv()
[13:23:51.013]                 names <- names(envs)
[13:23:51.013]                 common <- intersect(names, old_names)
[13:23:51.013]                 added <- setdiff(names, old_names)
[13:23:51.013]                 removed <- setdiff(old_names, names)
[13:23:51.013]                 changed <- common[...future.oldEnvVars[common] != 
[13:23:51.013]                   envs[common]]
[13:23:51.013]                 NAMES <- toupper(changed)
[13:23:51.013]                 args <- list()
[13:23:51.013]                 for (kk in seq_along(NAMES)) {
[13:23:51.013]                   name <- changed[[kk]]
[13:23:51.013]                   NAME <- NAMES[[kk]]
[13:23:51.013]                   if (name != NAME && is.element(NAME, old_names)) 
[13:23:51.013]                     next
[13:23:51.013]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:23:51.013]                 }
[13:23:51.013]                 NAMES <- toupper(added)
[13:23:51.013]                 for (kk in seq_along(NAMES)) {
[13:23:51.013]                   name <- added[[kk]]
[13:23:51.013]                   NAME <- NAMES[[kk]]
[13:23:51.013]                   if (name != NAME && is.element(NAME, old_names)) 
[13:23:51.013]                     next
[13:23:51.013]                   args[[name]] <- ""
[13:23:51.013]                 }
[13:23:51.013]                 NAMES <- toupper(removed)
[13:23:51.013]                 for (kk in seq_along(NAMES)) {
[13:23:51.013]                   name <- removed[[kk]]
[13:23:51.013]                   NAME <- NAMES[[kk]]
[13:23:51.013]                   if (name != NAME && is.element(NAME, old_names)) 
[13:23:51.013]                     next
[13:23:51.013]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:23:51.013]                 }
[13:23:51.013]                 if (length(args) > 0) 
[13:23:51.013]                   base::do.call(base::Sys.setenv, args = args)
[13:23:51.013]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:23:51.013]             }
[13:23:51.013]             else {
[13:23:51.013]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:23:51.013]             }
[13:23:51.013]             {
[13:23:51.013]                 if (base::length(...future.futureOptionsAdded) > 
[13:23:51.013]                   0L) {
[13:23:51.013]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:23:51.013]                   base::names(opts) <- ...future.futureOptionsAdded
[13:23:51.013]                   base::options(opts)
[13:23:51.013]                 }
[13:23:51.013]                 {
[13:23:51.013]                   NULL
[13:23:51.013]                   options(future.plan = NULL)
[13:23:51.013]                   if (is.na(NA_character_)) 
[13:23:51.013]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:23:51.013]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:23:51.013]                   future::plan(list(function (..., workers = function () 
[13:23:51.013]                   {
[13:23:51.013]                     w <- future::availableWorkers()
[13:23:51.013]                     if (length(w) > 1) 
[13:23:51.013]                       w[-1]
[13:23:51.013]                     else w
[13:23:51.013]                   }, envir = parent.frame()) 
[13:23:51.013]                   strategy(..., workers = workers, envir = envir)), 
[13:23:51.013]                     .cleanup = FALSE, .init = FALSE)
[13:23:51.013]                 }
[13:23:51.013]             }
[13:23:51.013]         }
[13:23:51.013]     })
[13:23:51.013]     if (TRUE) {
[13:23:51.013]         base::sink(type = "output", split = FALSE)
[13:23:51.013]         if (TRUE) {
[13:23:51.013]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:23:51.013]         }
[13:23:51.013]         else {
[13:23:51.013]             ...future.result["stdout"] <- base::list(NULL)
[13:23:51.013]         }
[13:23:51.013]         base::close(...future.stdout)
[13:23:51.013]         ...future.stdout <- NULL
[13:23:51.013]     }
[13:23:51.013]     ...future.result$conditions <- ...future.conditions
[13:23:51.013]     ...future.result$finished <- base::Sys.time()
[13:23:51.013]     ...future.result
[13:23:51.013] }
[13:23:51.069] ClusterFuture started
[13:23:51.070] result() for ClusterFuture ...
[13:23:51.070] receiveMessageFromWorker() for ClusterFuture ...
[13:23:51.070] - Validating connection of ClusterFuture
[13:23:51.120] - received message: FutureResult
[13:23:51.120] - Received FutureResult
[13:23:51.120] - Erased future from FutureRegistry
[13:23:51.120] result() for ClusterFuture ...
[13:23:51.120] - result already collected: FutureResult
[13:23:51.120] result() for ClusterFuture ... done
[13:23:51.120] receiveMessageFromWorker() for ClusterFuture ... done
[13:23:51.121] result() for ClusterFuture ... done
[13:23:51.121] result() for ClusterFuture ...
[13:23:51.121] - result already collected: FutureResult
[13:23:51.121] result() for ClusterFuture ... done
[13:23:51.121] plan(): plan_init() of ‘tweaked’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ... DONE
[13:23:51.127] plan(): nbrOfWorkers() = 1
> n <- nbrOfWorkers()
> message(sprintf("nbrOfWorkers: %d", n))
nbrOfWorkers: 1
> stopifnot(n == max(1L, nworkers - 1L))
> 
> message("Type of future: constant")
Type of future: constant
> n <- nbrOfWorkers(constant)
> message(sprintf("nbrOfWorkers: %d", n))
nbrOfWorkers: 1
> stopifnot(n == 1)
> 
> message("Type of future: <future>")
Type of future: <future>
> foo <- structure(function(...) NULL, class = c("future"))
> n <- nbrOfWorkers(foo)
> message(sprintf("nbrOfWorkers: %g", n))
nbrOfWorkers: Inf
> stopifnot(n >= 0, is.infinite(n))
> 
> 
> message("Type of future: cluster with workers = <cluster object>")
Type of future: cluster with workers = <cluster object>
> 
> workers <- makeClusterPSOCK(2L)
[13:23:51.132] [local output] makeClusterPSOCK() ...
[13:23:51.135] [local output] Workers: [n = 2] ‘localhost’, ‘localhost’
[13:23:51.136] [local output] Base port: 11821
[13:23:51.136] [local output] Getting setup options for 2 cluster nodes ...
[13:23:51.136] [local output]  - Node 1 of 2 ...
[13:23:51.137] [local output] localMachine=TRUE => revtunnel=FALSE

[13:23:51.137] [local output] Rscript port: 11821

[13:23:51.137] [local output]  - Node 2 of 2 ...
[13:23:51.138] [local output] localMachine=TRUE => revtunnel=FALSE

[13:23:51.138] [local output] Rscript port: 11821

[13:23:51.138] [local output] Getting setup options for 2 cluster nodes ... done
[13:23:51.139] [local output]  - Parallel setup requested for some PSOCK nodes
[13:23:51.139] [local output] Setting up PSOCK nodes in parallel
[13:23:51.139] List of 36
[13:23:51.139]  $ worker          : chr "localhost"
[13:23:51.139]   ..- attr(*, "localhost")= logi TRUE
[13:23:51.139]  $ master          : chr "localhost"
[13:23:51.139]  $ port            : int 11821
[13:23:51.139]  $ connectTimeout  : num 120
[13:23:51.139]  $ timeout         : num 2592000
[13:23:51.139]  $ rscript         : chr "'/usr/local/lib/R/bin/Rscript'"
[13:23:51.139]  $ homogeneous     : logi TRUE
[13:23:51.139]  $ rscript_args    : chr "--default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),fi"| __truncated__
[13:23:51.139]  $ rscript_envs    : NULL
[13:23:51.139]  $ rscript_libs    : NULL
[13:23:51.139]  $ rscript_startup : NULL
[13:23:51.139]  $ rscript_sh      : chr "sh"
[13:23:51.139]  $ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[13:23:51.139]  $ methods         : logi TRUE
[13:23:51.139]  $ socketOptions   : chr "no-delay"
[13:23:51.139]  $ useXDR          : logi FALSE
[13:23:51.139]  $ outfile         : chr "/dev/null"
[13:23:51.139]  $ renice          : int NA
[13:23:51.139]  $ rshcmd          : NULL
[13:23:51.139]  $ user            : chr(0) 
[13:23:51.139]  $ revtunnel       : logi FALSE
[13:23:51.139]  $ rshlogfile      : NULL
[13:23:51.139]  $ rshopts         : chr(0) 
[13:23:51.139]  $ rank            : int 1
[13:23:51.139]  $ manual          : logi FALSE
[13:23:51.139]  $ dryrun          : logi FALSE
[13:23:51.139]  $ quiet           : logi FALSE
[13:23:51.139]  $ setup_strategy  : chr "parallel"
[13:23:51.139]  $ local_cmd       : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[13:23:51.139]  $ pidfile         : chr "/tmp/RtmpJ16al6/worker.rank=1.parallelly.parent=88644.15a443ff026b9.pid"
[13:23:51.139]  $ rshcmd_label    : NULL
[13:23:51.139]  $ rsh_call        : NULL
[13:23:51.139]  $ cmd             : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[13:23:51.139]  $ localMachine    : logi TRUE
[13:23:51.139]  $ make_fcn        :function (worker = getOption2("parallelly.localhost.hostname", "localhost"), 
[13:23:51.139]     master = NULL, port, connectTimeout = getOption2("parallelly.makeNodePSOCK.connectTimeout", 
[13:23:51.139]         2 * 60), timeout = getOption2("parallelly.makeNodePSOCK.timeout", 
[13:23:51.139]         30 * 24 * 60 * 60), rscript = NULL, homogeneous = NULL, rscript_args = NULL, 
[13:23:51.139]     rscript_envs = NULL, rscript_libs = NULL, rscript_startup = NULL, rscript_sh = c("auto", 
[13:23:51.139]         "cmd", "sh"), default_packages = c("datasets", "utils", "grDevices", 
[13:23:51.139]         "graphics", "stats", if (methods) "methods"), methods = TRUE, socketOptions = getOption2("parallelly.makeNodePSOCK.socketOptions", 
[13:23:51.139]         "no-delay"), useXDR = getOption2("parallelly.makeNodePSOCK.useXDR", 
[13:23:51.139]         FALSE), outfile = "/dev/null", renice = NA_integer_, rshcmd = getOption2("parallelly.makeNodePSOCK.rshcmd", 
[13:23:51.139]         NULL), user = NULL, revtunnel = NA, rshlogfile = NULL, rshopts = getOption2("parallelly.makeNodePSOCK.rshopts", 
[13:23:51.139]         NULL), rank = 1L, manual = FALSE, dryrun = FALSE, quiet = FALSE, 
[13:23:51.139]     setup_strategy = getOption2("parallelly.makeNodePSOCK.setup_strategy", 
[13:23:51.139]         "parallel"), action = c("launch", "options"), verbose = FALSE)  
[13:23:51.139]  $ arguments       :List of 28
[13:23:51.139]   ..$ worker          : chr "localhost"
[13:23:51.139]   ..$ master          : NULL
[13:23:51.139]   ..$ port            : int 11821
[13:23:51.139]   ..$ connectTimeout  : num 120
[13:23:51.139]   ..$ timeout         : num 2592000
[13:23:51.139]   ..$ rscript         : NULL
[13:23:51.139]   ..$ homogeneous     : NULL
[13:23:51.139]   ..$ rscript_args    : NULL
[13:23:51.139]   ..$ rscript_envs    : NULL
[13:23:51.139]   ..$ rscript_libs    : NULL
[13:23:51.139]   ..$ rscript_startup : NULL
[13:23:51.139]   ..$ rscript_sh      : chr [1:3] "auto" "cmd" "sh"
[13:23:51.139]   ..$ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[13:23:51.139]   ..$ methods         : logi TRUE
[13:23:51.139]   ..$ socketOptions   : chr "no-delay"
[13:23:51.139]   ..$ useXDR          : logi FALSE
[13:23:51.139]   ..$ outfile         : chr "/dev/null"
[13:23:51.139]   ..$ renice          : int NA
[13:23:51.139]   ..$ rshcmd          : NULL
[13:23:51.139]   ..$ user            : NULL
[13:23:51.139]   ..$ revtunnel       : logi NA
[13:23:51.139]   ..$ rshlogfile      : NULL
[13:23:51.139]   ..$ rshopts         : NULL
[13:23:51.139]   ..$ rank            : int 1
[13:23:51.139]   ..$ manual          : logi FALSE
[13:23:51.139]   ..$ dryrun          : logi FALSE
[13:23:51.139]   ..$ quiet           : logi FALSE
[13:23:51.139]   ..$ setup_strategy  : chr "parallel"
[13:23:51.139]  - attr(*, "class")= chr [1:2] "makeNodePSOCKOptions" "makeNodeOptions"
[13:23:51.158] [local output] System call to launch all workers:
[13:23:51.158] [local output] '/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/RtmpJ16al6/worker.rank=1.parallelly.parent=88644.15a443ff026b9.pid")), silent = TRUE)' -e 'options(socketOptions = "no-delay")' -e 'workRSOCK <- tryCatch(parallel:::.workRSOCK, error=function(e) parallel:::.slaveRSOCK); workRSOCK()' MASTER=localhost PORT=11821 OUT=/dev/null TIMEOUT=2592000 XDR=FALSE SETUPTIMEOUT=120 SETUPSTRATEGY=parallel
[13:23:51.158] [local output] Starting PSOCK main server
[13:23:51.159] [local output] Workers launched
[13:23:51.160] [local output] Waiting for workers to connect back
[13:23:51.160]  - [local output] 0 workers out of 2 ready
[13:23:51.405]  - [local output] 0 workers out of 2 ready
[13:23:51.405]  - [local output] 1 workers out of 2 ready
[13:23:51.406]  - [local output] 1 workers out of 2 ready
[13:23:51.406]  - [local output] 2 workers out of 2 ready
[13:23:51.406] [local output] Launching of workers completed
[13:23:51.407] [local output] Collecting session information from workers
[13:23:51.407] [local output]  - Worker #1 of 2
[13:23:51.408] [local output]  - Worker #2 of 2
[13:23:51.408] [local output] makeClusterPSOCK() ... done
> print(workers)
Socket cluster with 2 nodes where 2 nodes are on host ‘localhost’ (R version 4.3.2 (2023-10-31), platform x86_64-pc-linux-gnu)
> plan(cluster, workers = workers)
[13:23:51.412] plan(): Setting new future strategy stack:
[13:23:51.412] List of future strategies:
[13:23:51.412] 1. cluster:
[13:23:51.412]    - args: function (..., workers = "<Socket cluster with 2 nodes where 2 nodes are on host ‘localhost’ (R version 4.3.2 (2023-10-31), platform x86_64-pc-linux-gnu)>", envir = parent.frame())
[13:23:51.412]    - tweaked: TRUE
[13:23:51.412]    - call: plan(cluster, workers = workers)
[13:23:51.414] plan(): plan_init() of ‘tweaked’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ...
[13:23:51.414] cluster:
[13:23:51.414] - args: function (..., workers = "<Socket cluster with 2 nodes where 2 nodes are on host ‘localhost’ (R version 4.3.2 (2023-10-31), platform x86_64-pc-linux-gnu)>", envir = parent.frame())
[13:23:51.414] - tweaked: TRUE
[13:23:51.414] - call: plan(cluster, workers = workers)
[13:23:51.417] getGlobalsAndPackages() ...
[13:23:51.417] Not searching for globals
[13:23:51.417] - globals: [0] <none>
[13:23:51.417] getGlobalsAndPackages() ... DONE
[13:23:51.429] Packages needed by the future expression (n = 0): <none>
[13:23:51.429] Packages needed by future strategies (n = 0): <none>
[13:23:51.430] {
[13:23:51.430]     {
[13:23:51.430]         {
[13:23:51.430]             ...future.startTime <- base::Sys.time()
[13:23:51.430]             {
[13:23:51.430]                 {
[13:23:51.430]                   {
[13:23:51.430]                     base::local({
[13:23:51.430]                       has_future <- base::requireNamespace("future", 
[13:23:51.430]                         quietly = TRUE)
[13:23:51.430]                       if (has_future) {
[13:23:51.430]                         ns <- base::getNamespace("future")
[13:23:51.430]                         version <- ns[[".package"]][["version"]]
[13:23:51.430]                         if (is.null(version)) 
[13:23:51.430]                           version <- utils::packageVersion("future")
[13:23:51.430]                       }
[13:23:51.430]                       else {
[13:23:51.430]                         version <- NULL
[13:23:51.430]                       }
[13:23:51.430]                       if (!has_future || version < "1.8.0") {
[13:23:51.430]                         info <- base::c(r_version = base::gsub("R version ", 
[13:23:51.430]                           "", base::R.version$version.string), 
[13:23:51.430]                           platform = base::sprintf("%s (%s-bit)", 
[13:23:51.430]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:23:51.430]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[13:23:51.430]                             "release", "version")], collapse = " "), 
[13:23:51.430]                           hostname = base::Sys.info()[["nodename"]])
[13:23:51.430]                         info <- base::sprintf("%s: %s", base::names(info), 
[13:23:51.430]                           info)
[13:23:51.430]                         info <- base::paste(info, collapse = "; ")
[13:23:51.430]                         if (!has_future) {
[13:23:51.430]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:23:51.430]                             info)
[13:23:51.430]                         }
[13:23:51.430]                         else {
[13:23:51.430]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:23:51.430]                             info, version)
[13:23:51.430]                         }
[13:23:51.430]                         base::stop(msg)
[13:23:51.430]                       }
[13:23:51.430]                     })
[13:23:51.430]                   }
[13:23:51.430]                   options(future.plan = NULL)
[13:23:51.430]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:23:51.430]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:23:51.430]                 }
[13:23:51.430]                 ...future.workdir <- getwd()
[13:23:51.430]             }
[13:23:51.430]             ...future.oldOptions <- base::as.list(base::.Options)
[13:23:51.430]             ...future.oldEnvVars <- base::Sys.getenv()
[13:23:51.430]         }
[13:23:51.430]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:23:51.430]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:23:51.430]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:23:51.430]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:23:51.430]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:23:51.430]             future.stdout.windows.reencode = NULL, width = 80L)
[13:23:51.430]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:23:51.430]             base::names(...future.oldOptions))
[13:23:51.430]     }
[13:23:51.430]     if (FALSE) {
[13:23:51.430]     }
[13:23:51.430]     else {
[13:23:51.430]         if (TRUE) {
[13:23:51.430]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:23:51.430]                 open = "w")
[13:23:51.430]         }
[13:23:51.430]         else {
[13:23:51.430]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:23:51.430]                 windows = "NUL", "/dev/null"), open = "w")
[13:23:51.430]         }
[13:23:51.430]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:23:51.430]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:23:51.430]             base::sink(type = "output", split = FALSE)
[13:23:51.430]             base::close(...future.stdout)
[13:23:51.430]         }, add = TRUE)
[13:23:51.430]     }
[13:23:51.430]     ...future.frame <- base::sys.nframe()
[13:23:51.430]     ...future.conditions <- base::list()
[13:23:51.430]     ...future.rng <- base::globalenv()$.Random.seed
[13:23:51.430]     if (FALSE) {
[13:23:51.430]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:23:51.430]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:23:51.430]     }
[13:23:51.430]     ...future.result <- base::tryCatch({
[13:23:51.430]         base::withCallingHandlers({
[13:23:51.430]             ...future.value <- base::withVisible(base::local({
[13:23:51.430]                 ...future.makeSendCondition <- base::local({
[13:23:51.430]                   sendCondition <- NULL
[13:23:51.430]                   function(frame = 1L) {
[13:23:51.430]                     if (is.function(sendCondition)) 
[13:23:51.430]                       return(sendCondition)
[13:23:51.430]                     ns <- getNamespace("parallel")
[13:23:51.430]                     if (exists("sendData", mode = "function", 
[13:23:51.430]                       envir = ns)) {
[13:23:51.430]                       parallel_sendData <- get("sendData", mode = "function", 
[13:23:51.430]                         envir = ns)
[13:23:51.430]                       envir <- sys.frame(frame)
[13:23:51.430]                       master <- NULL
[13:23:51.430]                       while (!identical(envir, .GlobalEnv) && 
[13:23:51.430]                         !identical(envir, emptyenv())) {
[13:23:51.430]                         if (exists("master", mode = "list", envir = envir, 
[13:23:51.430]                           inherits = FALSE)) {
[13:23:51.430]                           master <- get("master", mode = "list", 
[13:23:51.430]                             envir = envir, inherits = FALSE)
[13:23:51.430]                           if (inherits(master, c("SOCKnode", 
[13:23:51.430]                             "SOCK0node"))) {
[13:23:51.430]                             sendCondition <<- function(cond) {
[13:23:51.430]                               data <- list(type = "VALUE", value = cond, 
[13:23:51.430]                                 success = TRUE)
[13:23:51.430]                               parallel_sendData(master, data)
[13:23:51.430]                             }
[13:23:51.430]                             return(sendCondition)
[13:23:51.430]                           }
[13:23:51.430]                         }
[13:23:51.430]                         frame <- frame + 1L
[13:23:51.430]                         envir <- sys.frame(frame)
[13:23:51.430]                       }
[13:23:51.430]                     }
[13:23:51.430]                     sendCondition <<- function(cond) NULL
[13:23:51.430]                   }
[13:23:51.430]                 })
[13:23:51.430]                 withCallingHandlers({
[13:23:51.430]                   NA
[13:23:51.430]                 }, immediateCondition = function(cond) {
[13:23:51.430]                   sendCondition <- ...future.makeSendCondition()
[13:23:51.430]                   sendCondition(cond)
[13:23:51.430]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:23:51.430]                   {
[13:23:51.430]                     inherits <- base::inherits
[13:23:51.430]                     invokeRestart <- base::invokeRestart
[13:23:51.430]                     is.null <- base::is.null
[13:23:51.430]                     muffled <- FALSE
[13:23:51.430]                     if (inherits(cond, "message")) {
[13:23:51.430]                       muffled <- grepl(pattern, "muffleMessage")
[13:23:51.430]                       if (muffled) 
[13:23:51.430]                         invokeRestart("muffleMessage")
[13:23:51.430]                     }
[13:23:51.430]                     else if (inherits(cond, "warning")) {
[13:23:51.430]                       muffled <- grepl(pattern, "muffleWarning")
[13:23:51.430]                       if (muffled) 
[13:23:51.430]                         invokeRestart("muffleWarning")
[13:23:51.430]                     }
[13:23:51.430]                     else if (inherits(cond, "condition")) {
[13:23:51.430]                       if (!is.null(pattern)) {
[13:23:51.430]                         computeRestarts <- base::computeRestarts
[13:23:51.430]                         grepl <- base::grepl
[13:23:51.430]                         restarts <- computeRestarts(cond)
[13:23:51.430]                         for (restart in restarts) {
[13:23:51.430]                           name <- restart$name
[13:23:51.430]                           if (is.null(name)) 
[13:23:51.430]                             next
[13:23:51.430]                           if (!grepl(pattern, name)) 
[13:23:51.430]                             next
[13:23:51.430]                           invokeRestart(restart)
[13:23:51.430]                           muffled <- TRUE
[13:23:51.430]                           break
[13:23:51.430]                         }
[13:23:51.430]                       }
[13:23:51.430]                     }
[13:23:51.430]                     invisible(muffled)
[13:23:51.430]                   }
[13:23:51.430]                   muffleCondition(cond)
[13:23:51.430]                 })
[13:23:51.430]             }))
[13:23:51.430]             future::FutureResult(value = ...future.value$value, 
[13:23:51.430]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:23:51.430]                   ...future.rng), globalenv = if (FALSE) 
[13:23:51.430]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:23:51.430]                     ...future.globalenv.names))
[13:23:51.430]                 else NULL, started = ...future.startTime, version = "1.8")
[13:23:51.430]         }, condition = base::local({
[13:23:51.430]             c <- base::c
[13:23:51.430]             inherits <- base::inherits
[13:23:51.430]             invokeRestart <- base::invokeRestart
[13:23:51.430]             length <- base::length
[13:23:51.430]             list <- base::list
[13:23:51.430]             seq.int <- base::seq.int
[13:23:51.430]             signalCondition <- base::signalCondition
[13:23:51.430]             sys.calls <- base::sys.calls
[13:23:51.430]             `[[` <- base::`[[`
[13:23:51.430]             `+` <- base::`+`
[13:23:51.430]             `<<-` <- base::`<<-`
[13:23:51.430]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:23:51.430]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:23:51.430]                   3L)]
[13:23:51.430]             }
[13:23:51.430]             function(cond) {
[13:23:51.430]                 is_error <- inherits(cond, "error")
[13:23:51.430]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:23:51.430]                   NULL)
[13:23:51.430]                 if (is_error) {
[13:23:51.430]                   sessionInformation <- function() {
[13:23:51.430]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:23:51.430]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:23:51.430]                       search = base::search(), system = base::Sys.info())
[13:23:51.430]                   }
[13:23:51.430]                   ...future.conditions[[length(...future.conditions) + 
[13:23:51.430]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:23:51.430]                     cond$call), session = sessionInformation(), 
[13:23:51.430]                     timestamp = base::Sys.time(), signaled = 0L)
[13:23:51.430]                   signalCondition(cond)
[13:23:51.430]                 }
[13:23:51.430]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:23:51.430]                 "immediateCondition"))) {
[13:23:51.430]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:23:51.430]                   ...future.conditions[[length(...future.conditions) + 
[13:23:51.430]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:23:51.430]                   if (TRUE && !signal) {
[13:23:51.430]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:23:51.430]                     {
[13:23:51.430]                       inherits <- base::inherits
[13:23:51.430]                       invokeRestart <- base::invokeRestart
[13:23:51.430]                       is.null <- base::is.null
[13:23:51.430]                       muffled <- FALSE
[13:23:51.430]                       if (inherits(cond, "message")) {
[13:23:51.430]                         muffled <- grepl(pattern, "muffleMessage")
[13:23:51.430]                         if (muffled) 
[13:23:51.430]                           invokeRestart("muffleMessage")
[13:23:51.430]                       }
[13:23:51.430]                       else if (inherits(cond, "warning")) {
[13:23:51.430]                         muffled <- grepl(pattern, "muffleWarning")
[13:23:51.430]                         if (muffled) 
[13:23:51.430]                           invokeRestart("muffleWarning")
[13:23:51.430]                       }
[13:23:51.430]                       else if (inherits(cond, "condition")) {
[13:23:51.430]                         if (!is.null(pattern)) {
[13:23:51.430]                           computeRestarts <- base::computeRestarts
[13:23:51.430]                           grepl <- base::grepl
[13:23:51.430]                           restarts <- computeRestarts(cond)
[13:23:51.430]                           for (restart in restarts) {
[13:23:51.430]                             name <- restart$name
[13:23:51.430]                             if (is.null(name)) 
[13:23:51.430]                               next
[13:23:51.430]                             if (!grepl(pattern, name)) 
[13:23:51.430]                               next
[13:23:51.430]                             invokeRestart(restart)
[13:23:51.430]                             muffled <- TRUE
[13:23:51.430]                             break
[13:23:51.430]                           }
[13:23:51.430]                         }
[13:23:51.430]                       }
[13:23:51.430]                       invisible(muffled)
[13:23:51.430]                     }
[13:23:51.430]                     muffleCondition(cond, pattern = "^muffle")
[13:23:51.430]                   }
[13:23:51.430]                 }
[13:23:51.430]                 else {
[13:23:51.430]                   if (TRUE) {
[13:23:51.430]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:23:51.430]                     {
[13:23:51.430]                       inherits <- base::inherits
[13:23:51.430]                       invokeRestart <- base::invokeRestart
[13:23:51.430]                       is.null <- base::is.null
[13:23:51.430]                       muffled <- FALSE
[13:23:51.430]                       if (inherits(cond, "message")) {
[13:23:51.430]                         muffled <- grepl(pattern, "muffleMessage")
[13:23:51.430]                         if (muffled) 
[13:23:51.430]                           invokeRestart("muffleMessage")
[13:23:51.430]                       }
[13:23:51.430]                       else if (inherits(cond, "warning")) {
[13:23:51.430]                         muffled <- grepl(pattern, "muffleWarning")
[13:23:51.430]                         if (muffled) 
[13:23:51.430]                           invokeRestart("muffleWarning")
[13:23:51.430]                       }
[13:23:51.430]                       else if (inherits(cond, "condition")) {
[13:23:51.430]                         if (!is.null(pattern)) {
[13:23:51.430]                           computeRestarts <- base::computeRestarts
[13:23:51.430]                           grepl <- base::grepl
[13:23:51.430]                           restarts <- computeRestarts(cond)
[13:23:51.430]                           for (restart in restarts) {
[13:23:51.430]                             name <- restart$name
[13:23:51.430]                             if (is.null(name)) 
[13:23:51.430]                               next
[13:23:51.430]                             if (!grepl(pattern, name)) 
[13:23:51.430]                               next
[13:23:51.430]                             invokeRestart(restart)
[13:23:51.430]                             muffled <- TRUE
[13:23:51.430]                             break
[13:23:51.430]                           }
[13:23:51.430]                         }
[13:23:51.430]                       }
[13:23:51.430]                       invisible(muffled)
[13:23:51.430]                     }
[13:23:51.430]                     muffleCondition(cond, pattern = "^muffle")
[13:23:51.430]                   }
[13:23:51.430]                 }
[13:23:51.430]             }
[13:23:51.430]         }))
[13:23:51.430]     }, error = function(ex) {
[13:23:51.430]         base::structure(base::list(value = NULL, visible = NULL, 
[13:23:51.430]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:23:51.430]                 ...future.rng), started = ...future.startTime, 
[13:23:51.430]             finished = Sys.time(), session_uuid = NA_character_, 
[13:23:51.430]             version = "1.8"), class = "FutureResult")
[13:23:51.430]     }, finally = {
[13:23:51.430]         if (!identical(...future.workdir, getwd())) 
[13:23:51.430]             setwd(...future.workdir)
[13:23:51.430]         {
[13:23:51.430]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:23:51.430]                 ...future.oldOptions$nwarnings <- NULL
[13:23:51.430]             }
[13:23:51.430]             base::options(...future.oldOptions)
[13:23:51.430]             if (.Platform$OS.type == "windows") {
[13:23:51.430]                 old_names <- names(...future.oldEnvVars)
[13:23:51.430]                 envs <- base::Sys.getenv()
[13:23:51.430]                 names <- names(envs)
[13:23:51.430]                 common <- intersect(names, old_names)
[13:23:51.430]                 added <- setdiff(names, old_names)
[13:23:51.430]                 removed <- setdiff(old_names, names)
[13:23:51.430]                 changed <- common[...future.oldEnvVars[common] != 
[13:23:51.430]                   envs[common]]
[13:23:51.430]                 NAMES <- toupper(changed)
[13:23:51.430]                 args <- list()
[13:23:51.430]                 for (kk in seq_along(NAMES)) {
[13:23:51.430]                   name <- changed[[kk]]
[13:23:51.430]                   NAME <- NAMES[[kk]]
[13:23:51.430]                   if (name != NAME && is.element(NAME, old_names)) 
[13:23:51.430]                     next
[13:23:51.430]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:23:51.430]                 }
[13:23:51.430]                 NAMES <- toupper(added)
[13:23:51.430]                 for (kk in seq_along(NAMES)) {
[13:23:51.430]                   name <- added[[kk]]
[13:23:51.430]                   NAME <- NAMES[[kk]]
[13:23:51.430]                   if (name != NAME && is.element(NAME, old_names)) 
[13:23:51.430]                     next
[13:23:51.430]                   args[[name]] <- ""
[13:23:51.430]                 }
[13:23:51.430]                 NAMES <- toupper(removed)
[13:23:51.430]                 for (kk in seq_along(NAMES)) {
[13:23:51.430]                   name <- removed[[kk]]
[13:23:51.430]                   NAME <- NAMES[[kk]]
[13:23:51.430]                   if (name != NAME && is.element(NAME, old_names)) 
[13:23:51.430]                     next
[13:23:51.430]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:23:51.430]                 }
[13:23:51.430]                 if (length(args) > 0) 
[13:23:51.430]                   base::do.call(base::Sys.setenv, args = args)
[13:23:51.430]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:23:51.430]             }
[13:23:51.430]             else {
[13:23:51.430]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:23:51.430]             }
[13:23:51.430]             {
[13:23:51.430]                 if (base::length(...future.futureOptionsAdded) > 
[13:23:51.430]                   0L) {
[13:23:51.430]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:23:51.430]                   base::names(opts) <- ...future.futureOptionsAdded
[13:23:51.430]                   base::options(opts)
[13:23:51.430]                 }
[13:23:51.430]                 {
[13:23:51.430]                   NULL
[13:23:51.430]                   options(future.plan = NULL)
[13:23:51.430]                   if (is.na(NA_character_)) 
[13:23:51.430]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:23:51.430]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:23:51.430]                   future::plan(list(function (..., workers = list(
[13:23:51.430]                     list(con = 5L, host = "localhost", rank = 0L, 
[13:23:51.430]                       session_info = list(r = list(platform = "x86_64-pc-linux-gnu", 
[13:23:51.430]                         arch = "x86_64", os = "linux-gnu", system = "x86_64, linux-gnu", 
[13:23:51.430]                         status = "", major = "4", minor = "3.2", 
[13:23:51.430]                         year = "2023", month = "10", day = "31", 
[13:23:51.430]                         `svn rev` = "85441", language = "R", 
[13:23:51.430]                         version.string = "R version 4.3.2 (2023-10-31)", 
[13:23:51.430]                         nickname = "Eye Holes", os.type = "unix"), 
[13:23:51.430]                         system = list(sysname = "Linux", release = "6.5.0-1025-azure", 
[13:23:51.430]                           version = "#26~22.04.1-Ubuntu SMP Thu Jul 11 22:33:04 UTC 2024", 
[13:23:51.430]                           nodename = "47b98e4ec3a9", machine = "x86_64", 
[13:23:51.430]                           login = "unknown", user = "root", effective_user = "root"), 
[13:23:51.430]                         libs = c("/usr/local/lib/R/site-library", 
[13:23:51.430]                         "/usr/local/lib/R/library"), pkgs = NULL, 
[13:23:51.430]                         pwd = "/__w/rocker_uat/rocker_uat/packages/future/future-tests", 
[13:23:51.430]                         process = list(pid = 88962L))), list(
[13:23:51.430]                       con = 6L, host = "localhost", rank = 1L, 
[13:23:51.430]                       session_info = list(r = list(platform = "x86_64-pc-linux-gnu", 
[13:23:51.430]                         arch = "x86_64", os = "linux-gnu", system = "x86_64, linux-gnu", 
[13:23:51.430]                         status = "", major = "4", minor = "3.2", 
[13:23:51.430]                         year = "2023", month = "10", day = "31", 
[13:23:51.430]                         `svn rev` = "85441", language = "R", 
[13:23:51.430]                         version.string = "R version 4.3.2 (2023-10-31)", 
[13:23:51.430]                         nickname = "Eye Holes", os.type = "unix"), 
[13:23:51.430]                         system = list(sysname = "Linux", release = "6.5.0-1025-azure", 
[13:23:51.430]                           version = "#26~22.04.1-Ubuntu SMP Thu Jul 11 22:33:04 UTC 2024", 
[13:23:51.430]                           nodename = "47b98e4ec3a9", machine = "x86_64", 
[13:23:51.430]                           login = "unknown", user = "root", effective_user = "root"), 
[13:23:51.430]                         libs = c("/usr/local/lib/R/site-library", 
[13:23:51.430]                         "/usr/local/lib/R/library"), pkgs = NULL, 
[13:23:51.430]                         pwd = "/__w/rocker_uat/rocker_uat/packages/future/future-tests", 
[13:23:51.430]                         process = list(pid = 88961L)))), envir = parent.frame()) 
[13:23:51.430]                   strategy(..., workers = workers, envir = envir)), 
[13:23:51.430]                     .cleanup = FALSE, .init = FALSE)
[13:23:51.430]                 }
[13:23:51.430]             }
[13:23:51.430]         }
[13:23:51.430]     })
[13:23:51.430]     if (TRUE) {
[13:23:51.430]         base::sink(type = "output", split = FALSE)
[13:23:51.430]         if (TRUE) {
[13:23:51.430]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:23:51.430]         }
[13:23:51.430]         else {
[13:23:51.430]             ...future.result["stdout"] <- base::list(NULL)
[13:23:51.430]         }
[13:23:51.430]         base::close(...future.stdout)
[13:23:51.430]         ...future.stdout <- NULL
[13:23:51.430]     }
[13:23:51.430]     ...future.result$conditions <- ...future.conditions
[13:23:51.430]     ...future.result$finished <- base::Sys.time()
[13:23:51.430]     ...future.result
[13:23:51.430] }
[13:23:51.496] ClusterFuture started
[13:23:51.496] result() for ClusterFuture ...
[13:23:51.496] receiveMessageFromWorker() for ClusterFuture ...
[13:23:51.497] - Validating connection of ClusterFuture
[13:23:51.575] - received message: FutureResult
[13:23:51.575] - Received FutureResult
[13:23:51.575] - Erased future from FutureRegistry
[13:23:51.575] result() for ClusterFuture ...
[13:23:51.575] - result already collected: FutureResult
[13:23:51.575] result() for ClusterFuture ... done
[13:23:51.575] receiveMessageFromWorker() for ClusterFuture ... done
[13:23:51.575] result() for ClusterFuture ... done
[13:23:51.576] result() for ClusterFuture ...
[13:23:51.576] - result already collected: FutureResult
[13:23:51.576] result() for ClusterFuture ... done
[13:23:51.576] plan(): plan_init() of ‘tweaked’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ... DONE
[13:23:51.576] plan(): nbrOfWorkers() = 2
> n <- nbrOfWorkers()
> message(sprintf("nbrOfWorkers: %g", n))
nbrOfWorkers: 2
> stopifnot(n == length(workers))
> parallel::stopCluster(workers)
> 
> message("*** nbrOfWorkers() ... DONE")
*** nbrOfWorkers() ... DONE
> 
> source("incl/end.R")
[13:23:51.577] plan(): Setting new future strategy stack:
[13:23:51.577] List of future strategies:
[13:23:51.577] 1. FutureStrategy:
[13:23:51.577]    - args: function (..., envir = parent.frame())
[13:23:51.577]    - tweaked: FALSE
[13:23:51.577]    - call: future::plan(oplan)
[13:23:51.578] plan(): nbrOfWorkers() = 1
> 
