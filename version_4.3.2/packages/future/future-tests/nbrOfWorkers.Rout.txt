
R version 4.3.2 (2023-10-31) -- "Eye Holes"
Copyright (C) 2023 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> source("incl/start.R")
[10:26:28.253] plan(): Setting new future strategy stack:
[10:26:28.254] List of future strategies:
[10:26:28.254] 1. sequential:
[10:26:28.254]    - args: function (..., envir = parent.frame())
[10:26:28.254]    - tweaked: FALSE
[10:26:28.254]    - call: future::plan("sequential")
[10:26:28.268] plan(): nbrOfWorkers() = 1
> 
> message("*** nbrOfWorkers() ...")
*** nbrOfWorkers() ...
> 
> strategies <- c("sequential")
> for (strategy in strategies) {
+   message("Type of future: ", strategy)
+ 
+   evaluator <- get(strategy, mode = "function")
+   n <- nbrOfWorkers(evaluator)
+   message(sprintf("nbrOfWorkers: %d", n))
+   stopifnot(n == 1L)
+ 
+   plan(strategy)
+   n <- nbrOfWorkers()
+   message(sprintf("nbrOfWorkers: %d", n))
+   stopifnot(n == 1L)
+ 
+   n <- nbrOfFreeWorkers()
+   message(sprintf("nbrOfFreeWorkers: %d", n))
+   stopifnot(n == 1L)
+   
+   n <- nbrOfFreeWorkers(background = TRUE)
+   message(sprintf("nbrOfFreeWorkers(background = TRUE): %d", n))
+   stopifnot(n == 0L)
+ } ## for (strategy ...)
Type of future: sequential
nbrOfWorkers: 1
[10:26:28.287] plan(): Setting new future strategy stack:
[10:26:28.287] List of future strategies:
[10:26:28.287] 1. sequential:
[10:26:28.287]    - args: function (..., envir = parent.frame())
[10:26:28.287]    - tweaked: FALSE
[10:26:28.287]    - call: plan(strategy)
[10:26:28.297] plan(): nbrOfWorkers() = 1
nbrOfWorkers: 1
nbrOfFreeWorkers: 1
nbrOfFreeWorkers(background = TRUE): 0
> 
> 
> strategies <- c("cluster", "multisession", "multicore")
> strategies <- intersect(strategies, supportedStrategies())
> cores <- availableCores()
> message("Number of available cores: ", cores)
Number of available cores: 2
> workers <- availableWorkers()
> nworkers <- length(workers)
> message(sprintf("Available workers: [n = %d] %s", nworkers, hpaste(sQuote(workers))))
Available workers: [n = 2] ‘localhost’, ‘localhost’
> 
> allButOneCore <- function() max(1L, future::availableCores() - 1L)
> allButOneWorker <- function() {
+   w <- future::availableWorkers()
+   if (length(w) > 1) w[-1] else w
+ }
> 
> for (strategy in strategies) {
+   ## Speed up CRAN checks: Skip on CRAN Windows 32-bit
+   if (!fullTest && isWin32) next
+ 
+   message("Type of future: ", strategy)
+ 
+   evaluator <- get(strategy, mode = "function")
+   n <- nbrOfWorkers(evaluator)
+   message(sprintf("nbrOfWorkers: %d", n))
+   stopifnot(n == nworkers)
+ 
+   plan(strategy)
+   n <- nbrOfWorkers()
+   message(sprintf("nbrOfWorkers: %d", n))
+   stopifnot(n == nworkers)
+ 
+   n <- nbrOfFreeWorkers()
+   message(sprintf("nbrOfFreeWorkers: %d", n))
+   stopifnot(n == nworkers)
+   
+   n <- nbrOfFreeWorkers(background = TRUE)
+   message(sprintf("nbrOfFreeWorkers(background = TRUE): %d", n))
+ # FIXME  stopifnot(n == 0L)
+ 
+   plan(strategy, workers = 1L)
+   n <- nbrOfWorkers()
+   message(sprintf("nbrOfWorkers: %d", n))
+   stopifnot(n == max(1L, nworkers - 1L))
+   
+   n <- nbrOfFreeWorkers()
+   message(sprintf("nbrOfFreeWorkers: %d", n))
+   stopifnot(n == max(1L, nworkers - 1L))
+   
+   n <- nbrOfFreeWorkers(background = TRUE)
+   message(sprintf("nbrOfFreeWorkers(background = TRUE): %d", n))
+ # FIXME  stopifnot(n == 0L)
+ 
+   plan(strategy, workers = allButOneCore)
+   n <- nbrOfWorkers()
+   message(sprintf("nbrOfWorkers: %d", n))
+   stopifnot(n == max(1L, nworkers - 1L))
+   
+   n <- nbrOfFreeWorkers()
+   message(sprintf("nbrOfFreeWorkers: %d", n))
+   stopifnot(n == max(1L, nworkers - 1L))
+   
+   n <- nbrOfFreeWorkers(background = TRUE)
+   message(sprintf("nbrOfFreeWorkers(background = TRUE): %d", n))
+ # FIXME  stopifnot(n == 0L)
+ } ## for (strategy ...)
Type of future: multisession
nbrOfWorkers: 2
[10:26:28.330] plan(): Setting new future strategy stack:
[10:26:28.330] List of future strategies:
[10:26:28.330] 1. multisession:
[10:26:28.330]    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[10:26:28.330]    - tweaked: FALSE
[10:26:28.330]    - call: plan(strategy)
[10:26:28.331] plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ...
[10:26:28.331] multisession:
[10:26:28.331] - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[10:26:28.331] - tweaked: FALSE
[10:26:28.331] - call: plan(strategy)
[10:26:28.337] getGlobalsAndPackages() ...
[10:26:28.337] Not searching for globals
[10:26:28.338] - globals: [0] <none>
[10:26:28.338] getGlobalsAndPackages() ... DONE
[10:26:28.338] [local output] makeClusterPSOCK() ...
[10:26:28.371] [local output] Workers: [n = 2] ‘localhost’, ‘localhost’
[10:26:28.373] [local output] Base port: 11007
[10:26:28.373] [local output] Getting setup options for 2 cluster nodes ...
[10:26:28.373] [local output]  - Node 1 of 2 ...
[10:26:28.373] [local output] localMachine=TRUE => revtunnel=FALSE

[10:26:28.374] Testing if worker's PID can be inferred: ‘'/usr/local/lib/R/bin/Rscript' -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/RtmpmWgxb3/worker.rank=1.parallelly.parent=87801.156f949ba168b.pid")), silent = TRUE)' -e 'file.exists("/tmp/RtmpmWgxb3/worker.rank=1.parallelly.parent=87801.156f949ba168b.pid")'’
[10:26:28.564] - Possible to infer worker's PID: TRUE
[10:26:28.564] [local output] Rscript port: 11007

[10:26:28.565] [local output]  - Node 2 of 2 ...
[10:26:28.565] [local output] localMachine=TRUE => revtunnel=FALSE

[10:26:28.566] [local output] Rscript port: 11007

[10:26:28.566] [local output] Getting setup options for 2 cluster nodes ... done
[10:26:28.566] [local output]  - Parallel setup requested for some PSOCK nodes
[10:26:28.567] [local output] Setting up PSOCK nodes in parallel
[10:26:28.567] List of 36
[10:26:28.567]  $ worker          : chr "localhost"
[10:26:28.567]   ..- attr(*, "localhost")= logi TRUE
[10:26:28.567]  $ master          : chr "localhost"
[10:26:28.567]  $ port            : int 11007
[10:26:28.567]  $ connectTimeout  : num 120
[10:26:28.567]  $ timeout         : num 2592000
[10:26:28.567]  $ rscript         : chr "'/usr/local/lib/R/bin/Rscript'"
[10:26:28.567]  $ homogeneous     : logi TRUE
[10:26:28.567]  $ rscript_args    : chr "--default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),fi"| __truncated__
[10:26:28.567]  $ rscript_envs    : NULL
[10:26:28.567]  $ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[10:26:28.567]  $ rscript_startup : NULL
[10:26:28.567]  $ rscript_sh      : chr "sh"
[10:26:28.567]  $ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[10:26:28.567]  $ methods         : logi TRUE
[10:26:28.567]  $ socketOptions   : chr "no-delay"
[10:26:28.567]  $ useXDR          : logi FALSE
[10:26:28.567]  $ outfile         : chr "/dev/null"
[10:26:28.567]  $ renice          : int NA
[10:26:28.567]  $ rshcmd          : NULL
[10:26:28.567]  $ user            : chr(0) 
[10:26:28.567]  $ revtunnel       : logi FALSE
[10:26:28.567]  $ rshlogfile      : NULL
[10:26:28.567]  $ rshopts         : chr(0) 
[10:26:28.567]  $ rank            : int 1
[10:26:28.567]  $ manual          : logi FALSE
[10:26:28.567]  $ dryrun          : logi FALSE
[10:26:28.567]  $ quiet           : logi FALSE
[10:26:28.567]  $ setup_strategy  : chr "parallel"
[10:26:28.567]  $ local_cmd       : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[10:26:28.567]  $ pidfile         : chr "/tmp/RtmpmWgxb3/worker.rank=1.parallelly.parent=87801.156f949ba168b.pid"
[10:26:28.567]  $ rshcmd_label    : NULL
[10:26:28.567]  $ rsh_call        : NULL
[10:26:28.567]  $ cmd             : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[10:26:28.567]  $ localMachine    : logi TRUE
[10:26:28.567]  $ make_fcn        :function (worker = getOption2("parallelly.localhost.hostname", "localhost"), 
[10:26:28.567]     master = NULL, port, connectTimeout = getOption2("parallelly.makeNodePSOCK.connectTimeout", 
[10:26:28.567]         2 * 60), timeout = getOption2("parallelly.makeNodePSOCK.timeout", 
[10:26:28.567]         30 * 24 * 60 * 60), rscript = NULL, homogeneous = NULL, rscript_args = NULL, 
[10:26:28.567]     rscript_envs = NULL, rscript_libs = NULL, rscript_startup = NULL, rscript_sh = c("auto", 
[10:26:28.567]         "cmd", "sh"), default_packages = c("datasets", "utils", "grDevices", 
[10:26:28.567]         "graphics", "stats", if (methods) "methods"), methods = TRUE, socketOptions = getOption2("parallelly.makeNodePSOCK.socketOptions", 
[10:26:28.567]         "no-delay"), useXDR = getOption2("parallelly.makeNodePSOCK.useXDR", 
[10:26:28.567]         FALSE), outfile = "/dev/null", renice = NA_integer_, rshcmd = getOption2("parallelly.makeNodePSOCK.rshcmd", 
[10:26:28.567]         NULL), user = NULL, revtunnel = NA, rshlogfile = NULL, rshopts = getOption2("parallelly.makeNodePSOCK.rshopts", 
[10:26:28.567]         NULL), rank = 1L, manual = FALSE, dryrun = FALSE, quiet = FALSE, 
[10:26:28.567]     setup_strategy = getOption2("parallelly.makeNodePSOCK.setup_strategy", 
[10:26:28.567]         "parallel"), action = c("launch", "options"), verbose = FALSE)  
[10:26:28.567]  $ arguments       :List of 28
[10:26:28.567]   ..$ worker          : chr "localhost"
[10:26:28.567]   ..$ master          : NULL
[10:26:28.567]   ..$ port            : int 11007
[10:26:28.567]   ..$ connectTimeout  : num 120
[10:26:28.567]   ..$ timeout         : num 2592000
[10:26:28.567]   ..$ rscript         : NULL
[10:26:28.567]   ..$ homogeneous     : NULL
[10:26:28.567]   ..$ rscript_args    : NULL
[10:26:28.567]   ..$ rscript_envs    : NULL
[10:26:28.567]   ..$ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[10:26:28.567]   ..$ rscript_startup : NULL
[10:26:28.567]   ..$ rscript_sh      : chr [1:3] "auto" "cmd" "sh"
[10:26:28.567]   ..$ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[10:26:28.567]   ..$ methods         : logi TRUE
[10:26:28.567]   ..$ socketOptions   : chr "no-delay"
[10:26:28.567]   ..$ useXDR          : logi FALSE
[10:26:28.567]   ..$ outfile         : chr "/dev/null"
[10:26:28.567]   ..$ renice          : int NA
[10:26:28.567]   ..$ rshcmd          : NULL
[10:26:28.567]   ..$ user            : NULL
[10:26:28.567]   ..$ revtunnel       : logi NA
[10:26:28.567]   ..$ rshlogfile      : NULL
[10:26:28.567]   ..$ rshopts         : NULL
[10:26:28.567]   ..$ rank            : int 1
[10:26:28.567]   ..$ manual          : logi FALSE
[10:26:28.567]   ..$ dryrun          : logi FALSE
[10:26:28.567]   ..$ quiet           : logi FALSE
[10:26:28.567]   ..$ setup_strategy  : chr "parallel"
[10:26:28.567]  - attr(*, "class")= chr [1:2] "makeNodePSOCKOptions" "makeNodeOptions"
[10:26:28.586] [local output] System call to launch all workers:
[10:26:28.586] [local output] '/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/RtmpmWgxb3/worker.rank=1.parallelly.parent=87801.156f949ba168b.pid")), silent = TRUE)' -e 'options(socketOptions = "no-delay")' -e '.libPaths(c("/usr/local/lib/R/site-library","/usr/local/lib/R/library"))' -e 'workRSOCK <- tryCatch(parallel:::.workRSOCK, error=function(e) parallel:::.slaveRSOCK); workRSOCK()' MASTER=localhost PORT=11007 OUT=/dev/null TIMEOUT=2592000 XDR=FALSE SETUPTIMEOUT=120 SETUPSTRATEGY=parallel
[10:26:28.586] [local output] Starting PSOCK main server
[10:26:28.592] [local output] Workers launched
[10:26:28.592] [local output] Waiting for workers to connect back
[10:26:28.592]  - [local output] 0 workers out of 2 ready
[10:26:28.850]  - [local output] 0 workers out of 2 ready
[10:26:28.851]  - [local output] 1 workers out of 2 ready
[10:26:28.870]  - [local output] 1 workers out of 2 ready
[10:26:28.870]  - [local output] 2 workers out of 2 ready
[10:26:28.871] [local output] Launching of workers completed
[10:26:28.871] [local output] Collecting session information from workers
[10:26:28.872] [local output]  - Worker #1 of 2
[10:26:28.873] [local output]  - Worker #2 of 2
[10:26:28.873] [local output] makeClusterPSOCK() ... done
[10:26:28.890] Packages needed by the future expression (n = 0): <none>
[10:26:28.890] Packages needed by future strategies (n = 0): <none>
[10:26:28.892] {
[10:26:28.892]     {
[10:26:28.892]         {
[10:26:28.892]             ...future.startTime <- base::Sys.time()
[10:26:28.892]             {
[10:26:28.892]                 {
[10:26:28.892]                   {
[10:26:28.892]                     {
[10:26:28.892]                       base::local({
[10:26:28.892]                         has_future <- base::requireNamespace("future", 
[10:26:28.892]                           quietly = TRUE)
[10:26:28.892]                         if (has_future) {
[10:26:28.892]                           ns <- base::getNamespace("future")
[10:26:28.892]                           version <- ns[[".package"]][["version"]]
[10:26:28.892]                           if (is.null(version)) 
[10:26:28.892]                             version <- utils::packageVersion("future")
[10:26:28.892]                         }
[10:26:28.892]                         else {
[10:26:28.892]                           version <- NULL
[10:26:28.892]                         }
[10:26:28.892]                         if (!has_future || version < "1.8.0") {
[10:26:28.892]                           info <- base::c(r_version = base::gsub("R version ", 
[10:26:28.892]                             "", base::R.version$version.string), 
[10:26:28.892]                             platform = base::sprintf("%s (%s-bit)", 
[10:26:28.892]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:26:28.892]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[10:26:28.892]                               "release", "version")], collapse = " "), 
[10:26:28.892]                             hostname = base::Sys.info()[["nodename"]])
[10:26:28.892]                           info <- base::sprintf("%s: %s", base::names(info), 
[10:26:28.892]                             info)
[10:26:28.892]                           info <- base::paste(info, collapse = "; ")
[10:26:28.892]                           if (!has_future) {
[10:26:28.892]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:26:28.892]                               info)
[10:26:28.892]                           }
[10:26:28.892]                           else {
[10:26:28.892]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:26:28.892]                               info, version)
[10:26:28.892]                           }
[10:26:28.892]                           base::stop(msg)
[10:26:28.892]                         }
[10:26:28.892]                       })
[10:26:28.892]                     }
[10:26:28.892]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[10:26:28.892]                     base::options(mc.cores = 1L)
[10:26:28.892]                   }
[10:26:28.892]                   options(future.plan = NULL)
[10:26:28.892]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:26:28.892]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:26:28.892]                 }
[10:26:28.892]                 ...future.workdir <- getwd()
[10:26:28.892]             }
[10:26:28.892]             ...future.oldOptions <- base::as.list(base::.Options)
[10:26:28.892]             ...future.oldEnvVars <- base::Sys.getenv()
[10:26:28.892]         }
[10:26:28.892]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:26:28.892]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[10:26:28.892]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:26:28.892]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:26:28.892]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:26:28.892]             future.stdout.windows.reencode = NULL, width = 80L)
[10:26:28.892]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:26:28.892]             base::names(...future.oldOptions))
[10:26:28.892]     }
[10:26:28.892]     if (FALSE) {
[10:26:28.892]     }
[10:26:28.892]     else {
[10:26:28.892]         if (TRUE) {
[10:26:28.892]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:26:28.892]                 open = "w")
[10:26:28.892]         }
[10:26:28.892]         else {
[10:26:28.892]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:26:28.892]                 windows = "NUL", "/dev/null"), open = "w")
[10:26:28.892]         }
[10:26:28.892]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:26:28.892]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:26:28.892]             base::sink(type = "output", split = FALSE)
[10:26:28.892]             base::close(...future.stdout)
[10:26:28.892]         }, add = TRUE)
[10:26:28.892]     }
[10:26:28.892]     ...future.frame <- base::sys.nframe()
[10:26:28.892]     ...future.conditions <- base::list()
[10:26:28.892]     ...future.rng <- base::globalenv()$.Random.seed
[10:26:28.892]     if (FALSE) {
[10:26:28.892]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:26:28.892]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:26:28.892]     }
[10:26:28.892]     ...future.result <- base::tryCatch({
[10:26:28.892]         base::withCallingHandlers({
[10:26:28.892]             ...future.value <- base::withVisible(base::local({
[10:26:28.892]                 ...future.makeSendCondition <- base::local({
[10:26:28.892]                   sendCondition <- NULL
[10:26:28.892]                   function(frame = 1L) {
[10:26:28.892]                     if (is.function(sendCondition)) 
[10:26:28.892]                       return(sendCondition)
[10:26:28.892]                     ns <- getNamespace("parallel")
[10:26:28.892]                     if (exists("sendData", mode = "function", 
[10:26:28.892]                       envir = ns)) {
[10:26:28.892]                       parallel_sendData <- get("sendData", mode = "function", 
[10:26:28.892]                         envir = ns)
[10:26:28.892]                       envir <- sys.frame(frame)
[10:26:28.892]                       master <- NULL
[10:26:28.892]                       while (!identical(envir, .GlobalEnv) && 
[10:26:28.892]                         !identical(envir, emptyenv())) {
[10:26:28.892]                         if (exists("master", mode = "list", envir = envir, 
[10:26:28.892]                           inherits = FALSE)) {
[10:26:28.892]                           master <- get("master", mode = "list", 
[10:26:28.892]                             envir = envir, inherits = FALSE)
[10:26:28.892]                           if (inherits(master, c("SOCKnode", 
[10:26:28.892]                             "SOCK0node"))) {
[10:26:28.892]                             sendCondition <<- function(cond) {
[10:26:28.892]                               data <- list(type = "VALUE", value = cond, 
[10:26:28.892]                                 success = TRUE)
[10:26:28.892]                               parallel_sendData(master, data)
[10:26:28.892]                             }
[10:26:28.892]                             return(sendCondition)
[10:26:28.892]                           }
[10:26:28.892]                         }
[10:26:28.892]                         frame <- frame + 1L
[10:26:28.892]                         envir <- sys.frame(frame)
[10:26:28.892]                       }
[10:26:28.892]                     }
[10:26:28.892]                     sendCondition <<- function(cond) NULL
[10:26:28.892]                   }
[10:26:28.892]                 })
[10:26:28.892]                 withCallingHandlers({
[10:26:28.892]                   NA
[10:26:28.892]                 }, immediateCondition = function(cond) {
[10:26:28.892]                   sendCondition <- ...future.makeSendCondition()
[10:26:28.892]                   sendCondition(cond)
[10:26:28.892]                   muffleCondition <- function (cond, pattern = "^muffle") 
[10:26:28.892]                   {
[10:26:28.892]                     inherits <- base::inherits
[10:26:28.892]                     invokeRestart <- base::invokeRestart
[10:26:28.892]                     is.null <- base::is.null
[10:26:28.892]                     muffled <- FALSE
[10:26:28.892]                     if (inherits(cond, "message")) {
[10:26:28.892]                       muffled <- grepl(pattern, "muffleMessage")
[10:26:28.892]                       if (muffled) 
[10:26:28.892]                         invokeRestart("muffleMessage")
[10:26:28.892]                     }
[10:26:28.892]                     else if (inherits(cond, "warning")) {
[10:26:28.892]                       muffled <- grepl(pattern, "muffleWarning")
[10:26:28.892]                       if (muffled) 
[10:26:28.892]                         invokeRestart("muffleWarning")
[10:26:28.892]                     }
[10:26:28.892]                     else if (inherits(cond, "condition")) {
[10:26:28.892]                       if (!is.null(pattern)) {
[10:26:28.892]                         computeRestarts <- base::computeRestarts
[10:26:28.892]                         grepl <- base::grepl
[10:26:28.892]                         restarts <- computeRestarts(cond)
[10:26:28.892]                         for (restart in restarts) {
[10:26:28.892]                           name <- restart$name
[10:26:28.892]                           if (is.null(name)) 
[10:26:28.892]                             next
[10:26:28.892]                           if (!grepl(pattern, name)) 
[10:26:28.892]                             next
[10:26:28.892]                           invokeRestart(restart)
[10:26:28.892]                           muffled <- TRUE
[10:26:28.892]                           break
[10:26:28.892]                         }
[10:26:28.892]                       }
[10:26:28.892]                     }
[10:26:28.892]                     invisible(muffled)
[10:26:28.892]                   }
[10:26:28.892]                   muffleCondition(cond)
[10:26:28.892]                 })
[10:26:28.892]             }))
[10:26:28.892]             future::FutureResult(value = ...future.value$value, 
[10:26:28.892]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:26:28.892]                   ...future.rng), globalenv = if (FALSE) 
[10:26:28.892]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:26:28.892]                     ...future.globalenv.names))
[10:26:28.892]                 else NULL, started = ...future.startTime, version = "1.8")
[10:26:28.892]         }, condition = base::local({
[10:26:28.892]             c <- base::c
[10:26:28.892]             inherits <- base::inherits
[10:26:28.892]             invokeRestart <- base::invokeRestart
[10:26:28.892]             length <- base::length
[10:26:28.892]             list <- base::list
[10:26:28.892]             seq.int <- base::seq.int
[10:26:28.892]             signalCondition <- base::signalCondition
[10:26:28.892]             sys.calls <- base::sys.calls
[10:26:28.892]             `[[` <- base::`[[`
[10:26:28.892]             `+` <- base::`+`
[10:26:28.892]             `<<-` <- base::`<<-`
[10:26:28.892]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:26:28.892]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:26:28.892]                   3L)]
[10:26:28.892]             }
[10:26:28.892]             function(cond) {
[10:26:28.892]                 is_error <- inherits(cond, "error")
[10:26:28.892]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:26:28.892]                   NULL)
[10:26:28.892]                 if (is_error) {
[10:26:28.892]                   sessionInformation <- function() {
[10:26:28.892]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:26:28.892]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:26:28.892]                       search = base::search(), system = base::Sys.info())
[10:26:28.892]                   }
[10:26:28.892]                   ...future.conditions[[length(...future.conditions) + 
[10:26:28.892]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:26:28.892]                     cond$call), session = sessionInformation(), 
[10:26:28.892]                     timestamp = base::Sys.time(), signaled = 0L)
[10:26:28.892]                   signalCondition(cond)
[10:26:28.892]                 }
[10:26:28.892]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:26:28.892]                 "immediateCondition"))) {
[10:26:28.892]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:26:28.892]                   ...future.conditions[[length(...future.conditions) + 
[10:26:28.892]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:26:28.892]                   if (TRUE && !signal) {
[10:26:28.892]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:26:28.892]                     {
[10:26:28.892]                       inherits <- base::inherits
[10:26:28.892]                       invokeRestart <- base::invokeRestart
[10:26:28.892]                       is.null <- base::is.null
[10:26:28.892]                       muffled <- FALSE
[10:26:28.892]                       if (inherits(cond, "message")) {
[10:26:28.892]                         muffled <- grepl(pattern, "muffleMessage")
[10:26:28.892]                         if (muffled) 
[10:26:28.892]                           invokeRestart("muffleMessage")
[10:26:28.892]                       }
[10:26:28.892]                       else if (inherits(cond, "warning")) {
[10:26:28.892]                         muffled <- grepl(pattern, "muffleWarning")
[10:26:28.892]                         if (muffled) 
[10:26:28.892]                           invokeRestart("muffleWarning")
[10:26:28.892]                       }
[10:26:28.892]                       else if (inherits(cond, "condition")) {
[10:26:28.892]                         if (!is.null(pattern)) {
[10:26:28.892]                           computeRestarts <- base::computeRestarts
[10:26:28.892]                           grepl <- base::grepl
[10:26:28.892]                           restarts <- computeRestarts(cond)
[10:26:28.892]                           for (restart in restarts) {
[10:26:28.892]                             name <- restart$name
[10:26:28.892]                             if (is.null(name)) 
[10:26:28.892]                               next
[10:26:28.892]                             if (!grepl(pattern, name)) 
[10:26:28.892]                               next
[10:26:28.892]                             invokeRestart(restart)
[10:26:28.892]                             muffled <- TRUE
[10:26:28.892]                             break
[10:26:28.892]                           }
[10:26:28.892]                         }
[10:26:28.892]                       }
[10:26:28.892]                       invisible(muffled)
[10:26:28.892]                     }
[10:26:28.892]                     muffleCondition(cond, pattern = "^muffle")
[10:26:28.892]                   }
[10:26:28.892]                 }
[10:26:28.892]                 else {
[10:26:28.892]                   if (TRUE) {
[10:26:28.892]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:26:28.892]                     {
[10:26:28.892]                       inherits <- base::inherits
[10:26:28.892]                       invokeRestart <- base::invokeRestart
[10:26:28.892]                       is.null <- base::is.null
[10:26:28.892]                       muffled <- FALSE
[10:26:28.892]                       if (inherits(cond, "message")) {
[10:26:28.892]                         muffled <- grepl(pattern, "muffleMessage")
[10:26:28.892]                         if (muffled) 
[10:26:28.892]                           invokeRestart("muffleMessage")
[10:26:28.892]                       }
[10:26:28.892]                       else if (inherits(cond, "warning")) {
[10:26:28.892]                         muffled <- grepl(pattern, "muffleWarning")
[10:26:28.892]                         if (muffled) 
[10:26:28.892]                           invokeRestart("muffleWarning")
[10:26:28.892]                       }
[10:26:28.892]                       else if (inherits(cond, "condition")) {
[10:26:28.892]                         if (!is.null(pattern)) {
[10:26:28.892]                           computeRestarts <- base::computeRestarts
[10:26:28.892]                           grepl <- base::grepl
[10:26:28.892]                           restarts <- computeRestarts(cond)
[10:26:28.892]                           for (restart in restarts) {
[10:26:28.892]                             name <- restart$name
[10:26:28.892]                             if (is.null(name)) 
[10:26:28.892]                               next
[10:26:28.892]                             if (!grepl(pattern, name)) 
[10:26:28.892]                               next
[10:26:28.892]                             invokeRestart(restart)
[10:26:28.892]                             muffled <- TRUE
[10:26:28.892]                             break
[10:26:28.892]                           }
[10:26:28.892]                         }
[10:26:28.892]                       }
[10:26:28.892]                       invisible(muffled)
[10:26:28.892]                     }
[10:26:28.892]                     muffleCondition(cond, pattern = "^muffle")
[10:26:28.892]                   }
[10:26:28.892]                 }
[10:26:28.892]             }
[10:26:28.892]         }))
[10:26:28.892]     }, error = function(ex) {
[10:26:28.892]         base::structure(base::list(value = NULL, visible = NULL, 
[10:26:28.892]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:26:28.892]                 ...future.rng), started = ...future.startTime, 
[10:26:28.892]             finished = Sys.time(), session_uuid = NA_character_, 
[10:26:28.892]             version = "1.8"), class = "FutureResult")
[10:26:28.892]     }, finally = {
[10:26:28.892]         if (!identical(...future.workdir, getwd())) 
[10:26:28.892]             setwd(...future.workdir)
[10:26:28.892]         {
[10:26:28.892]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:26:28.892]                 ...future.oldOptions$nwarnings <- NULL
[10:26:28.892]             }
[10:26:28.892]             base::options(...future.oldOptions)
[10:26:28.892]             if (.Platform$OS.type == "windows") {
[10:26:28.892]                 old_names <- names(...future.oldEnvVars)
[10:26:28.892]                 envs <- base::Sys.getenv()
[10:26:28.892]                 names <- names(envs)
[10:26:28.892]                 common <- intersect(names, old_names)
[10:26:28.892]                 added <- setdiff(names, old_names)
[10:26:28.892]                 removed <- setdiff(old_names, names)
[10:26:28.892]                 changed <- common[...future.oldEnvVars[common] != 
[10:26:28.892]                   envs[common]]
[10:26:28.892]                 NAMES <- toupper(changed)
[10:26:28.892]                 args <- list()
[10:26:28.892]                 for (kk in seq_along(NAMES)) {
[10:26:28.892]                   name <- changed[[kk]]
[10:26:28.892]                   NAME <- NAMES[[kk]]
[10:26:28.892]                   if (name != NAME && is.element(NAME, old_names)) 
[10:26:28.892]                     next
[10:26:28.892]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:26:28.892]                 }
[10:26:28.892]                 NAMES <- toupper(added)
[10:26:28.892]                 for (kk in seq_along(NAMES)) {
[10:26:28.892]                   name <- added[[kk]]
[10:26:28.892]                   NAME <- NAMES[[kk]]
[10:26:28.892]                   if (name != NAME && is.element(NAME, old_names)) 
[10:26:28.892]                     next
[10:26:28.892]                   args[[name]] <- ""
[10:26:28.892]                 }
[10:26:28.892]                 NAMES <- toupper(removed)
[10:26:28.892]                 for (kk in seq_along(NAMES)) {
[10:26:28.892]                   name <- removed[[kk]]
[10:26:28.892]                   NAME <- NAMES[[kk]]
[10:26:28.892]                   if (name != NAME && is.element(NAME, old_names)) 
[10:26:28.892]                     next
[10:26:28.892]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:26:28.892]                 }
[10:26:28.892]                 if (length(args) > 0) 
[10:26:28.892]                   base::do.call(base::Sys.setenv, args = args)
[10:26:28.892]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:26:28.892]             }
[10:26:28.892]             else {
[10:26:28.892]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:26:28.892]             }
[10:26:28.892]             {
[10:26:28.892]                 if (base::length(...future.futureOptionsAdded) > 
[10:26:28.892]                   0L) {
[10:26:28.892]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:26:28.892]                   base::names(opts) <- ...future.futureOptionsAdded
[10:26:28.892]                   base::options(opts)
[10:26:28.892]                 }
[10:26:28.892]                 {
[10:26:28.892]                   {
[10:26:28.892]                     base::options(mc.cores = ...future.mc.cores.old)
[10:26:28.892]                     NULL
[10:26:28.892]                   }
[10:26:28.892]                   options(future.plan = NULL)
[10:26:28.892]                   if (is.na(NA_character_)) 
[10:26:28.892]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:26:28.892]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:26:28.892]                   future::plan(list(function (..., workers = availableCores(), 
[10:26:28.892]                     lazy = FALSE, rscript_libs = .libPaths(), 
[10:26:28.892]                     envir = parent.frame()) 
[10:26:28.892]                   {
[10:26:28.892]                     if (is.function(workers)) 
[10:26:28.892]                       workers <- workers()
[10:26:28.892]                     workers <- structure(as.integer(workers), 
[10:26:28.892]                       class = class(workers))
[10:26:28.892]                     stop_if_not(length(workers) == 1, is.finite(workers), 
[10:26:28.892]                       workers >= 1)
[10:26:28.892]                     if (workers == 1L && !inherits(workers, "AsIs")) {
[10:26:28.892]                       return(sequential(..., lazy = TRUE, envir = envir))
[10:26:28.892]                     }
[10:26:28.892]                     future <- MultisessionFuture(..., workers = workers, 
[10:26:28.892]                       lazy = lazy, rscript_libs = rscript_libs, 
[10:26:28.892]                       envir = envir)
[10:26:28.892]                     if (!future$lazy) 
[10:26:28.892]                       future <- run(future)
[10:26:28.892]                     invisible(future)
[10:26:28.892]                   }), .cleanup = FALSE, .init = FALSE)
[10:26:28.892]                 }
[10:26:28.892]             }
[10:26:28.892]         }
[10:26:28.892]     })
[10:26:28.892]     if (TRUE) {
[10:26:28.892]         base::sink(type = "output", split = FALSE)
[10:26:28.892]         if (TRUE) {
[10:26:28.892]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:26:28.892]         }
[10:26:28.892]         else {
[10:26:28.892]             ...future.result["stdout"] <- base::list(NULL)
[10:26:28.892]         }
[10:26:28.892]         base::close(...future.stdout)
[10:26:28.892]         ...future.stdout <- NULL
[10:26:28.892]     }
[10:26:28.892]     ...future.result$conditions <- ...future.conditions
[10:26:28.892]     ...future.result$finished <- base::Sys.time()
[10:26:28.892]     ...future.result
[10:26:28.892] }
[10:26:28.948] MultisessionFuture started
[10:26:28.948] result() for ClusterFuture ...
[10:26:28.949] receiveMessageFromWorker() for ClusterFuture ...
[10:26:28.949] - Validating connection of MultisessionFuture
[10:26:28.992] - received message: FutureResult
[10:26:28.992] - Received FutureResult
[10:26:28.995] - Erased future from FutureRegistry
[10:26:28.996] result() for ClusterFuture ...
[10:26:28.996] - result already collected: FutureResult
[10:26:28.996] result() for ClusterFuture ... done
[10:26:28.996] receiveMessageFromWorker() for ClusterFuture ... done
[10:26:28.996] result() for ClusterFuture ... done
[10:26:28.996] result() for ClusterFuture ...
[10:26:28.997] - result already collected: FutureResult
[10:26:28.997] result() for ClusterFuture ... done
[10:26:28.997] plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ... DONE
[10:26:29.001] plan(): nbrOfWorkers() = 2
nbrOfWorkers: 2
[10:26:29.010] getGlobalsAndPackages() ...
[10:26:29.011] 
[10:26:29.011] - globals: [0] <none>
[10:26:29.011] getGlobalsAndPackages() ... DONE
nbrOfFreeWorkers: 2
[10:26:29.029] getGlobalsAndPackages() ...
[10:26:29.029] 
[10:26:29.029] - globals: [0] <none>
[10:26:29.029] getGlobalsAndPackages() ... DONE
nbrOfFreeWorkers(background = TRUE): 2
[10:26:29.041] plan(): Setting new future strategy stack:
[10:26:29.041] List of future strategies:
[10:26:29.041] 1. multisession:
[10:26:29.041]    - args: function (..., workers = 1L, envir = parent.frame())
[10:26:29.041]    - tweaked: TRUE
[10:26:29.041]    - call: plan(strategy, workers = 1L)
[10:26:29.042] plan(): plan_init() of ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ...
[10:26:29.042] multisession:
[10:26:29.042] - args: function (..., workers = 1L, envir = parent.frame())
[10:26:29.042] - tweaked: TRUE
[10:26:29.042] - call: plan(strategy, workers = 1L)
[10:26:29.043] getGlobalsAndPackages() ...
[10:26:29.043] Not searching for globals
[10:26:29.043] - globals: [0] <none>
[10:26:29.043] getGlobalsAndPackages() ... DONE
[10:26:29.044] Packages needed by the future expression (n = 0): <none>
[10:26:29.045] Packages needed by future strategies (n = 0): <none>
[10:26:29.045] {
[10:26:29.045]     {
[10:26:29.045]         {
[10:26:29.045]             ...future.startTime <- base::Sys.time()
[10:26:29.045]             {
[10:26:29.045]                 {
[10:26:29.045]                   {
[10:26:29.045]                     base::local({
[10:26:29.045]                       has_future <- base::requireNamespace("future", 
[10:26:29.045]                         quietly = TRUE)
[10:26:29.045]                       if (has_future) {
[10:26:29.045]                         ns <- base::getNamespace("future")
[10:26:29.045]                         version <- ns[[".package"]][["version"]]
[10:26:29.045]                         if (is.null(version)) 
[10:26:29.045]                           version <- utils::packageVersion("future")
[10:26:29.045]                       }
[10:26:29.045]                       else {
[10:26:29.045]                         version <- NULL
[10:26:29.045]                       }
[10:26:29.045]                       if (!has_future || version < "1.8.0") {
[10:26:29.045]                         info <- base::c(r_version = base::gsub("R version ", 
[10:26:29.045]                           "", base::R.version$version.string), 
[10:26:29.045]                           platform = base::sprintf("%s (%s-bit)", 
[10:26:29.045]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:26:29.045]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[10:26:29.045]                             "release", "version")], collapse = " "), 
[10:26:29.045]                           hostname = base::Sys.info()[["nodename"]])
[10:26:29.045]                         info <- base::sprintf("%s: %s", base::names(info), 
[10:26:29.045]                           info)
[10:26:29.045]                         info <- base::paste(info, collapse = "; ")
[10:26:29.045]                         if (!has_future) {
[10:26:29.045]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:26:29.045]                             info)
[10:26:29.045]                         }
[10:26:29.045]                         else {
[10:26:29.045]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:26:29.045]                             info, version)
[10:26:29.045]                         }
[10:26:29.045]                         base::stop(msg)
[10:26:29.045]                       }
[10:26:29.045]                     })
[10:26:29.045]                   }
[10:26:29.045]                   options(future.plan = NULL)
[10:26:29.045]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:26:29.045]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:26:29.045]                 }
[10:26:29.045]                 ...future.workdir <- getwd()
[10:26:29.045]             }
[10:26:29.045]             ...future.oldOptions <- base::as.list(base::.Options)
[10:26:29.045]             ...future.oldEnvVars <- base::Sys.getenv()
[10:26:29.045]         }
[10:26:29.045]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:26:29.045]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[10:26:29.045]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:26:29.045]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:26:29.045]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:26:29.045]             future.stdout.windows.reencode = NULL, width = 80L)
[10:26:29.045]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:26:29.045]             base::names(...future.oldOptions))
[10:26:29.045]     }
[10:26:29.045]     if (FALSE) {
[10:26:29.045]     }
[10:26:29.045]     else {
[10:26:29.045]         if (TRUE) {
[10:26:29.045]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:26:29.045]                 open = "w")
[10:26:29.045]         }
[10:26:29.045]         else {
[10:26:29.045]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:26:29.045]                 windows = "NUL", "/dev/null"), open = "w")
[10:26:29.045]         }
[10:26:29.045]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:26:29.045]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:26:29.045]             base::sink(type = "output", split = FALSE)
[10:26:29.045]             base::close(...future.stdout)
[10:26:29.045]         }, add = TRUE)
[10:26:29.045]     }
[10:26:29.045]     ...future.frame <- base::sys.nframe()
[10:26:29.045]     ...future.conditions <- base::list()
[10:26:29.045]     ...future.rng <- base::globalenv()$.Random.seed
[10:26:29.045]     if (FALSE) {
[10:26:29.045]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:26:29.045]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:26:29.045]     }
[10:26:29.045]     ...future.result <- base::tryCatch({
[10:26:29.045]         base::withCallingHandlers({
[10:26:29.045]             ...future.value <- base::withVisible(base::local(NA))
[10:26:29.045]             future::FutureResult(value = ...future.value$value, 
[10:26:29.045]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:26:29.045]                   ...future.rng), globalenv = if (FALSE) 
[10:26:29.045]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:26:29.045]                     ...future.globalenv.names))
[10:26:29.045]                 else NULL, started = ...future.startTime, version = "1.8")
[10:26:29.045]         }, condition = base::local({
[10:26:29.045]             c <- base::c
[10:26:29.045]             inherits <- base::inherits
[10:26:29.045]             invokeRestart <- base::invokeRestart
[10:26:29.045]             length <- base::length
[10:26:29.045]             list <- base::list
[10:26:29.045]             seq.int <- base::seq.int
[10:26:29.045]             signalCondition <- base::signalCondition
[10:26:29.045]             sys.calls <- base::sys.calls
[10:26:29.045]             `[[` <- base::`[[`
[10:26:29.045]             `+` <- base::`+`
[10:26:29.045]             `<<-` <- base::`<<-`
[10:26:29.045]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:26:29.045]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:26:29.045]                   3L)]
[10:26:29.045]             }
[10:26:29.045]             function(cond) {
[10:26:29.045]                 is_error <- inherits(cond, "error")
[10:26:29.045]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:26:29.045]                   NULL)
[10:26:29.045]                 if (is_error) {
[10:26:29.045]                   sessionInformation <- function() {
[10:26:29.045]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:26:29.045]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:26:29.045]                       search = base::search(), system = base::Sys.info())
[10:26:29.045]                   }
[10:26:29.045]                   ...future.conditions[[length(...future.conditions) + 
[10:26:29.045]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:26:29.045]                     cond$call), session = sessionInformation(), 
[10:26:29.045]                     timestamp = base::Sys.time(), signaled = 0L)
[10:26:29.045]                   signalCondition(cond)
[10:26:29.045]                 }
[10:26:29.045]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:26:29.045]                 "immediateCondition"))) {
[10:26:29.045]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:26:29.045]                   ...future.conditions[[length(...future.conditions) + 
[10:26:29.045]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:26:29.045]                   if (TRUE && !signal) {
[10:26:29.045]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:26:29.045]                     {
[10:26:29.045]                       inherits <- base::inherits
[10:26:29.045]                       invokeRestart <- base::invokeRestart
[10:26:29.045]                       is.null <- base::is.null
[10:26:29.045]                       muffled <- FALSE
[10:26:29.045]                       if (inherits(cond, "message")) {
[10:26:29.045]                         muffled <- grepl(pattern, "muffleMessage")
[10:26:29.045]                         if (muffled) 
[10:26:29.045]                           invokeRestart("muffleMessage")
[10:26:29.045]                       }
[10:26:29.045]                       else if (inherits(cond, "warning")) {
[10:26:29.045]                         muffled <- grepl(pattern, "muffleWarning")
[10:26:29.045]                         if (muffled) 
[10:26:29.045]                           invokeRestart("muffleWarning")
[10:26:29.045]                       }
[10:26:29.045]                       else if (inherits(cond, "condition")) {
[10:26:29.045]                         if (!is.null(pattern)) {
[10:26:29.045]                           computeRestarts <- base::computeRestarts
[10:26:29.045]                           grepl <- base::grepl
[10:26:29.045]                           restarts <- computeRestarts(cond)
[10:26:29.045]                           for (restart in restarts) {
[10:26:29.045]                             name <- restart$name
[10:26:29.045]                             if (is.null(name)) 
[10:26:29.045]                               next
[10:26:29.045]                             if (!grepl(pattern, name)) 
[10:26:29.045]                               next
[10:26:29.045]                             invokeRestart(restart)
[10:26:29.045]                             muffled <- TRUE
[10:26:29.045]                             break
[10:26:29.045]                           }
[10:26:29.045]                         }
[10:26:29.045]                       }
[10:26:29.045]                       invisible(muffled)
[10:26:29.045]                     }
[10:26:29.045]                     muffleCondition(cond, pattern = "^muffle")
[10:26:29.045]                   }
[10:26:29.045]                 }
[10:26:29.045]                 else {
[10:26:29.045]                   if (TRUE) {
[10:26:29.045]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:26:29.045]                     {
[10:26:29.045]                       inherits <- base::inherits
[10:26:29.045]                       invokeRestart <- base::invokeRestart
[10:26:29.045]                       is.null <- base::is.null
[10:26:29.045]                       muffled <- FALSE
[10:26:29.045]                       if (inherits(cond, "message")) {
[10:26:29.045]                         muffled <- grepl(pattern, "muffleMessage")
[10:26:29.045]                         if (muffled) 
[10:26:29.045]                           invokeRestart("muffleMessage")
[10:26:29.045]                       }
[10:26:29.045]                       else if (inherits(cond, "warning")) {
[10:26:29.045]                         muffled <- grepl(pattern, "muffleWarning")
[10:26:29.045]                         if (muffled) 
[10:26:29.045]                           invokeRestart("muffleWarning")
[10:26:29.045]                       }
[10:26:29.045]                       else if (inherits(cond, "condition")) {
[10:26:29.045]                         if (!is.null(pattern)) {
[10:26:29.045]                           computeRestarts <- base::computeRestarts
[10:26:29.045]                           grepl <- base::grepl
[10:26:29.045]                           restarts <- computeRestarts(cond)
[10:26:29.045]                           for (restart in restarts) {
[10:26:29.045]                             name <- restart$name
[10:26:29.045]                             if (is.null(name)) 
[10:26:29.045]                               next
[10:26:29.045]                             if (!grepl(pattern, name)) 
[10:26:29.045]                               next
[10:26:29.045]                             invokeRestart(restart)
[10:26:29.045]                             muffled <- TRUE
[10:26:29.045]                             break
[10:26:29.045]                           }
[10:26:29.045]                         }
[10:26:29.045]                       }
[10:26:29.045]                       invisible(muffled)
[10:26:29.045]                     }
[10:26:29.045]                     muffleCondition(cond, pattern = "^muffle")
[10:26:29.045]                   }
[10:26:29.045]                 }
[10:26:29.045]             }
[10:26:29.045]         }))
[10:26:29.045]     }, error = function(ex) {
[10:26:29.045]         base::structure(base::list(value = NULL, visible = NULL, 
[10:26:29.045]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:26:29.045]                 ...future.rng), started = ...future.startTime, 
[10:26:29.045]             finished = Sys.time(), session_uuid = NA_character_, 
[10:26:29.045]             version = "1.8"), class = "FutureResult")
[10:26:29.045]     }, finally = {
[10:26:29.045]         if (!identical(...future.workdir, getwd())) 
[10:26:29.045]             setwd(...future.workdir)
[10:26:29.045]         {
[10:26:29.045]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:26:29.045]                 ...future.oldOptions$nwarnings <- NULL
[10:26:29.045]             }
[10:26:29.045]             base::options(...future.oldOptions)
[10:26:29.045]             if (.Platform$OS.type == "windows") {
[10:26:29.045]                 old_names <- names(...future.oldEnvVars)
[10:26:29.045]                 envs <- base::Sys.getenv()
[10:26:29.045]                 names <- names(envs)
[10:26:29.045]                 common <- intersect(names, old_names)
[10:26:29.045]                 added <- setdiff(names, old_names)
[10:26:29.045]                 removed <- setdiff(old_names, names)
[10:26:29.045]                 changed <- common[...future.oldEnvVars[common] != 
[10:26:29.045]                   envs[common]]
[10:26:29.045]                 NAMES <- toupper(changed)
[10:26:29.045]                 args <- list()
[10:26:29.045]                 for (kk in seq_along(NAMES)) {
[10:26:29.045]                   name <- changed[[kk]]
[10:26:29.045]                   NAME <- NAMES[[kk]]
[10:26:29.045]                   if (name != NAME && is.element(NAME, old_names)) 
[10:26:29.045]                     next
[10:26:29.045]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:26:29.045]                 }
[10:26:29.045]                 NAMES <- toupper(added)
[10:26:29.045]                 for (kk in seq_along(NAMES)) {
[10:26:29.045]                   name <- added[[kk]]
[10:26:29.045]                   NAME <- NAMES[[kk]]
[10:26:29.045]                   if (name != NAME && is.element(NAME, old_names)) 
[10:26:29.045]                     next
[10:26:29.045]                   args[[name]] <- ""
[10:26:29.045]                 }
[10:26:29.045]                 NAMES <- toupper(removed)
[10:26:29.045]                 for (kk in seq_along(NAMES)) {
[10:26:29.045]                   name <- removed[[kk]]
[10:26:29.045]                   NAME <- NAMES[[kk]]
[10:26:29.045]                   if (name != NAME && is.element(NAME, old_names)) 
[10:26:29.045]                     next
[10:26:29.045]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:26:29.045]                 }
[10:26:29.045]                 if (length(args) > 0) 
[10:26:29.045]                   base::do.call(base::Sys.setenv, args = args)
[10:26:29.045]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:26:29.045]             }
[10:26:29.045]             else {
[10:26:29.045]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:26:29.045]             }
[10:26:29.045]             {
[10:26:29.045]                 if (base::length(...future.futureOptionsAdded) > 
[10:26:29.045]                   0L) {
[10:26:29.045]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:26:29.045]                   base::names(opts) <- ...future.futureOptionsAdded
[10:26:29.045]                   base::options(opts)
[10:26:29.045]                 }
[10:26:29.045]                 {
[10:26:29.045]                   {
[10:26:29.045]                     NULL
[10:26:29.045]                     RNGkind("Mersenne-Twister")
[10:26:29.045]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[10:26:29.045]                       inherits = FALSE)
[10:26:29.045]                   }
[10:26:29.045]                   options(future.plan = NULL)
[10:26:29.045]                   if (is.na(NA_character_)) 
[10:26:29.045]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:26:29.045]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:26:29.045]                   future::plan(list(function (..., workers = 1L, 
[10:26:29.045]                     envir = parent.frame()) 
[10:26:29.045]                   strategy(..., workers = workers, envir = envir)), 
[10:26:29.045]                     .cleanup = FALSE, .init = FALSE)
[10:26:29.045]                 }
[10:26:29.045]             }
[10:26:29.045]         }
[10:26:29.045]     })
[10:26:29.045]     if (TRUE) {
[10:26:29.045]         base::sink(type = "output", split = FALSE)
[10:26:29.045]         if (TRUE) {
[10:26:29.045]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:26:29.045]         }
[10:26:29.045]         else {
[10:26:29.045]             ...future.result["stdout"] <- base::list(NULL)
[10:26:29.045]         }
[10:26:29.045]         base::close(...future.stdout)
[10:26:29.045]         ...future.stdout <- NULL
[10:26:29.045]     }
[10:26:29.045]     ...future.result$conditions <- ...future.conditions
[10:26:29.045]     ...future.result$finished <- base::Sys.time()
[10:26:29.045]     ...future.result
[10:26:29.045] }
[10:26:29.049] plan(): Setting new future strategy stack:
[10:26:29.049] List of future strategies:
[10:26:29.049] 1. sequential:
[10:26:29.049]    - args: function (..., envir = parent.frame())
[10:26:29.049]    - tweaked: FALSE
[10:26:29.049]    - call: NULL
[10:26:29.050] plan(): nbrOfWorkers() = 1
[10:26:29.052] plan(): Setting new future strategy stack:
[10:26:29.052] List of future strategies:
[10:26:29.052] 1. multisession:
[10:26:29.052]    - args: function (..., workers = 1L, envir = parent.frame())
[10:26:29.052]    - tweaked: TRUE
[10:26:29.052]    - call: plan(strategy, workers = 1L)
[10:26:29.053] plan(): nbrOfWorkers() = 1
[10:26:29.053] SequentialFuture started (and completed)
[10:26:29.054] plan(): plan_init() of ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ... DONE
[10:26:29.054] plan(): nbrOfWorkers() = 1
nbrOfWorkers: 1
[10:26:29.055] getGlobalsAndPackages() ...
[10:26:29.055] Searching for globals...
[10:26:29.059] 
[10:26:29.059] Searching for globals ... DONE
[10:26:29.059] - globals: [0] <none>
[10:26:29.059] getGlobalsAndPackages() ... DONE
nbrOfFreeWorkers: 1
[10:26:29.060] getGlobalsAndPackages() ...
[10:26:29.060] Searching for globals...
[10:26:29.061] 
[10:26:29.061] Searching for globals ... DONE
[10:26:29.061] - globals: [0] <none>
[10:26:29.061] getGlobalsAndPackages() ... DONE
nbrOfFreeWorkers(background = TRUE): 0
[10:26:29.062] plan(): Setting new future strategy stack:
[10:26:29.062] List of future strategies:
[10:26:29.062] 1. multisession:
[10:26:29.062]    - args: function (..., workers = "<function () ; max(1L, future::availableCores() - 1L)>", envir = parent.frame())
[10:26:29.062]    - tweaked: TRUE
[10:26:29.062]    - call: plan(strategy, workers = allButOneCore)
[10:26:29.063] plan(): plan_init() of ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ...
[10:26:29.063] multisession:
[10:26:29.063] - args: function (..., workers = "<function () ; max(1L, future::availableCores() - 1L)>", envir = parent.frame())
[10:26:29.063] - tweaked: TRUE
[10:26:29.063] - call: plan(strategy, workers = allButOneCore)
[10:26:29.071] getGlobalsAndPackages() ...
[10:26:29.071] Not searching for globals
[10:26:29.071] - globals: [0] <none>
[10:26:29.071] getGlobalsAndPackages() ... DONE
[10:26:29.072] Packages needed by the future expression (n = 0): <none>
[10:26:29.072] Packages needed by future strategies (n = 0): <none>
[10:26:29.072] {
[10:26:29.072]     {
[10:26:29.072]         {
[10:26:29.072]             ...future.startTime <- base::Sys.time()
[10:26:29.072]             {
[10:26:29.072]                 {
[10:26:29.072]                   {
[10:26:29.072]                     base::local({
[10:26:29.072]                       has_future <- base::requireNamespace("future", 
[10:26:29.072]                         quietly = TRUE)
[10:26:29.072]                       if (has_future) {
[10:26:29.072]                         ns <- base::getNamespace("future")
[10:26:29.072]                         version <- ns[[".package"]][["version"]]
[10:26:29.072]                         if (is.null(version)) 
[10:26:29.072]                           version <- utils::packageVersion("future")
[10:26:29.072]                       }
[10:26:29.072]                       else {
[10:26:29.072]                         version <- NULL
[10:26:29.072]                       }
[10:26:29.072]                       if (!has_future || version < "1.8.0") {
[10:26:29.072]                         info <- base::c(r_version = base::gsub("R version ", 
[10:26:29.072]                           "", base::R.version$version.string), 
[10:26:29.072]                           platform = base::sprintf("%s (%s-bit)", 
[10:26:29.072]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:26:29.072]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[10:26:29.072]                             "release", "version")], collapse = " "), 
[10:26:29.072]                           hostname = base::Sys.info()[["nodename"]])
[10:26:29.072]                         info <- base::sprintf("%s: %s", base::names(info), 
[10:26:29.072]                           info)
[10:26:29.072]                         info <- base::paste(info, collapse = "; ")
[10:26:29.072]                         if (!has_future) {
[10:26:29.072]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:26:29.072]                             info)
[10:26:29.072]                         }
[10:26:29.072]                         else {
[10:26:29.072]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:26:29.072]                             info, version)
[10:26:29.072]                         }
[10:26:29.072]                         base::stop(msg)
[10:26:29.072]                       }
[10:26:29.072]                     })
[10:26:29.072]                   }
[10:26:29.072]                   options(future.plan = NULL)
[10:26:29.072]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:26:29.072]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:26:29.072]                 }
[10:26:29.072]                 ...future.workdir <- getwd()
[10:26:29.072]             }
[10:26:29.072]             ...future.oldOptions <- base::as.list(base::.Options)
[10:26:29.072]             ...future.oldEnvVars <- base::Sys.getenv()
[10:26:29.072]         }
[10:26:29.072]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:26:29.072]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[10:26:29.072]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:26:29.072]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:26:29.072]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:26:29.072]             future.stdout.windows.reencode = NULL, width = 80L)
[10:26:29.072]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:26:29.072]             base::names(...future.oldOptions))
[10:26:29.072]     }
[10:26:29.072]     if (FALSE) {
[10:26:29.072]     }
[10:26:29.072]     else {
[10:26:29.072]         if (TRUE) {
[10:26:29.072]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:26:29.072]                 open = "w")
[10:26:29.072]         }
[10:26:29.072]         else {
[10:26:29.072]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:26:29.072]                 windows = "NUL", "/dev/null"), open = "w")
[10:26:29.072]         }
[10:26:29.072]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:26:29.072]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:26:29.072]             base::sink(type = "output", split = FALSE)
[10:26:29.072]             base::close(...future.stdout)
[10:26:29.072]         }, add = TRUE)
[10:26:29.072]     }
[10:26:29.072]     ...future.frame <- base::sys.nframe()
[10:26:29.072]     ...future.conditions <- base::list()
[10:26:29.072]     ...future.rng <- base::globalenv()$.Random.seed
[10:26:29.072]     if (FALSE) {
[10:26:29.072]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:26:29.072]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:26:29.072]     }
[10:26:29.072]     ...future.result <- base::tryCatch({
[10:26:29.072]         base::withCallingHandlers({
[10:26:29.072]             ...future.value <- base::withVisible(base::local(NA))
[10:26:29.072]             future::FutureResult(value = ...future.value$value, 
[10:26:29.072]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:26:29.072]                   ...future.rng), globalenv = if (FALSE) 
[10:26:29.072]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:26:29.072]                     ...future.globalenv.names))
[10:26:29.072]                 else NULL, started = ...future.startTime, version = "1.8")
[10:26:29.072]         }, condition = base::local({
[10:26:29.072]             c <- base::c
[10:26:29.072]             inherits <- base::inherits
[10:26:29.072]             invokeRestart <- base::invokeRestart
[10:26:29.072]             length <- base::length
[10:26:29.072]             list <- base::list
[10:26:29.072]             seq.int <- base::seq.int
[10:26:29.072]             signalCondition <- base::signalCondition
[10:26:29.072]             sys.calls <- base::sys.calls
[10:26:29.072]             `[[` <- base::`[[`
[10:26:29.072]             `+` <- base::`+`
[10:26:29.072]             `<<-` <- base::`<<-`
[10:26:29.072]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:26:29.072]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:26:29.072]                   3L)]
[10:26:29.072]             }
[10:26:29.072]             function(cond) {
[10:26:29.072]                 is_error <- inherits(cond, "error")
[10:26:29.072]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:26:29.072]                   NULL)
[10:26:29.072]                 if (is_error) {
[10:26:29.072]                   sessionInformation <- function() {
[10:26:29.072]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:26:29.072]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:26:29.072]                       search = base::search(), system = base::Sys.info())
[10:26:29.072]                   }
[10:26:29.072]                   ...future.conditions[[length(...future.conditions) + 
[10:26:29.072]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:26:29.072]                     cond$call), session = sessionInformation(), 
[10:26:29.072]                     timestamp = base::Sys.time(), signaled = 0L)
[10:26:29.072]                   signalCondition(cond)
[10:26:29.072]                 }
[10:26:29.072]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:26:29.072]                 "immediateCondition"))) {
[10:26:29.072]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:26:29.072]                   ...future.conditions[[length(...future.conditions) + 
[10:26:29.072]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:26:29.072]                   if (TRUE && !signal) {
[10:26:29.072]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:26:29.072]                     {
[10:26:29.072]                       inherits <- base::inherits
[10:26:29.072]                       invokeRestart <- base::invokeRestart
[10:26:29.072]                       is.null <- base::is.null
[10:26:29.072]                       muffled <- FALSE
[10:26:29.072]                       if (inherits(cond, "message")) {
[10:26:29.072]                         muffled <- grepl(pattern, "muffleMessage")
[10:26:29.072]                         if (muffled) 
[10:26:29.072]                           invokeRestart("muffleMessage")
[10:26:29.072]                       }
[10:26:29.072]                       else if (inherits(cond, "warning")) {
[10:26:29.072]                         muffled <- grepl(pattern, "muffleWarning")
[10:26:29.072]                         if (muffled) 
[10:26:29.072]                           invokeRestart("muffleWarning")
[10:26:29.072]                       }
[10:26:29.072]                       else if (inherits(cond, "condition")) {
[10:26:29.072]                         if (!is.null(pattern)) {
[10:26:29.072]                           computeRestarts <- base::computeRestarts
[10:26:29.072]                           grepl <- base::grepl
[10:26:29.072]                           restarts <- computeRestarts(cond)
[10:26:29.072]                           for (restart in restarts) {
[10:26:29.072]                             name <- restart$name
[10:26:29.072]                             if (is.null(name)) 
[10:26:29.072]                               next
[10:26:29.072]                             if (!grepl(pattern, name)) 
[10:26:29.072]                               next
[10:26:29.072]                             invokeRestart(restart)
[10:26:29.072]                             muffled <- TRUE
[10:26:29.072]                             break
[10:26:29.072]                           }
[10:26:29.072]                         }
[10:26:29.072]                       }
[10:26:29.072]                       invisible(muffled)
[10:26:29.072]                     }
[10:26:29.072]                     muffleCondition(cond, pattern = "^muffle")
[10:26:29.072]                   }
[10:26:29.072]                 }
[10:26:29.072]                 else {
[10:26:29.072]                   if (TRUE) {
[10:26:29.072]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:26:29.072]                     {
[10:26:29.072]                       inherits <- base::inherits
[10:26:29.072]                       invokeRestart <- base::invokeRestart
[10:26:29.072]                       is.null <- base::is.null
[10:26:29.072]                       muffled <- FALSE
[10:26:29.072]                       if (inherits(cond, "message")) {
[10:26:29.072]                         muffled <- grepl(pattern, "muffleMessage")
[10:26:29.072]                         if (muffled) 
[10:26:29.072]                           invokeRestart("muffleMessage")
[10:26:29.072]                       }
[10:26:29.072]                       else if (inherits(cond, "warning")) {
[10:26:29.072]                         muffled <- grepl(pattern, "muffleWarning")
[10:26:29.072]                         if (muffled) 
[10:26:29.072]                           invokeRestart("muffleWarning")
[10:26:29.072]                       }
[10:26:29.072]                       else if (inherits(cond, "condition")) {
[10:26:29.072]                         if (!is.null(pattern)) {
[10:26:29.072]                           computeRestarts <- base::computeRestarts
[10:26:29.072]                           grepl <- base::grepl
[10:26:29.072]                           restarts <- computeRestarts(cond)
[10:26:29.072]                           for (restart in restarts) {
[10:26:29.072]                             name <- restart$name
[10:26:29.072]                             if (is.null(name)) 
[10:26:29.072]                               next
[10:26:29.072]                             if (!grepl(pattern, name)) 
[10:26:29.072]                               next
[10:26:29.072]                             invokeRestart(restart)
[10:26:29.072]                             muffled <- TRUE
[10:26:29.072]                             break
[10:26:29.072]                           }
[10:26:29.072]                         }
[10:26:29.072]                       }
[10:26:29.072]                       invisible(muffled)
[10:26:29.072]                     }
[10:26:29.072]                     muffleCondition(cond, pattern = "^muffle")
[10:26:29.072]                   }
[10:26:29.072]                 }
[10:26:29.072]             }
[10:26:29.072]         }))
[10:26:29.072]     }, error = function(ex) {
[10:26:29.072]         base::structure(base::list(value = NULL, visible = NULL, 
[10:26:29.072]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:26:29.072]                 ...future.rng), started = ...future.startTime, 
[10:26:29.072]             finished = Sys.time(), session_uuid = NA_character_, 
[10:26:29.072]             version = "1.8"), class = "FutureResult")
[10:26:29.072]     }, finally = {
[10:26:29.072]         if (!identical(...future.workdir, getwd())) 
[10:26:29.072]             setwd(...future.workdir)
[10:26:29.072]         {
[10:26:29.072]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:26:29.072]                 ...future.oldOptions$nwarnings <- NULL
[10:26:29.072]             }
[10:26:29.072]             base::options(...future.oldOptions)
[10:26:29.072]             if (.Platform$OS.type == "windows") {
[10:26:29.072]                 old_names <- names(...future.oldEnvVars)
[10:26:29.072]                 envs <- base::Sys.getenv()
[10:26:29.072]                 names <- names(envs)
[10:26:29.072]                 common <- intersect(names, old_names)
[10:26:29.072]                 added <- setdiff(names, old_names)
[10:26:29.072]                 removed <- setdiff(old_names, names)
[10:26:29.072]                 changed <- common[...future.oldEnvVars[common] != 
[10:26:29.072]                   envs[common]]
[10:26:29.072]                 NAMES <- toupper(changed)
[10:26:29.072]                 args <- list()
[10:26:29.072]                 for (kk in seq_along(NAMES)) {
[10:26:29.072]                   name <- changed[[kk]]
[10:26:29.072]                   NAME <- NAMES[[kk]]
[10:26:29.072]                   if (name != NAME && is.element(NAME, old_names)) 
[10:26:29.072]                     next
[10:26:29.072]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:26:29.072]                 }
[10:26:29.072]                 NAMES <- toupper(added)
[10:26:29.072]                 for (kk in seq_along(NAMES)) {
[10:26:29.072]                   name <- added[[kk]]
[10:26:29.072]                   NAME <- NAMES[[kk]]
[10:26:29.072]                   if (name != NAME && is.element(NAME, old_names)) 
[10:26:29.072]                     next
[10:26:29.072]                   args[[name]] <- ""
[10:26:29.072]                 }
[10:26:29.072]                 NAMES <- toupper(removed)
[10:26:29.072]                 for (kk in seq_along(NAMES)) {
[10:26:29.072]                   name <- removed[[kk]]
[10:26:29.072]                   NAME <- NAMES[[kk]]
[10:26:29.072]                   if (name != NAME && is.element(NAME, old_names)) 
[10:26:29.072]                     next
[10:26:29.072]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:26:29.072]                 }
[10:26:29.072]                 if (length(args) > 0) 
[10:26:29.072]                   base::do.call(base::Sys.setenv, args = args)
[10:26:29.072]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:26:29.072]             }
[10:26:29.072]             else {
[10:26:29.072]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:26:29.072]             }
[10:26:29.072]             {
[10:26:29.072]                 if (base::length(...future.futureOptionsAdded) > 
[10:26:29.072]                   0L) {
[10:26:29.072]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:26:29.072]                   base::names(opts) <- ...future.futureOptionsAdded
[10:26:29.072]                   base::options(opts)
[10:26:29.072]                 }
[10:26:29.072]                 {
[10:26:29.072]                   {
[10:26:29.072]                     NULL
[10:26:29.072]                     RNGkind("Mersenne-Twister")
[10:26:29.072]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[10:26:29.072]                       inherits = FALSE)
[10:26:29.072]                   }
[10:26:29.072]                   options(future.plan = NULL)
[10:26:29.072]                   if (is.na(NA_character_)) 
[10:26:29.072]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:26:29.072]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:26:29.072]                   future::plan(list(function (..., workers = function () 
[10:26:29.072]                   max(1L, future::availableCores() - 1L), envir = parent.frame()) 
[10:26:29.072]                   strategy(..., workers = workers, envir = envir)), 
[10:26:29.072]                     .cleanup = FALSE, .init = FALSE)
[10:26:29.072]                 }
[10:26:29.072]             }
[10:26:29.072]         }
[10:26:29.072]     })
[10:26:29.072]     if (TRUE) {
[10:26:29.072]         base::sink(type = "output", split = FALSE)
[10:26:29.072]         if (TRUE) {
[10:26:29.072]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:26:29.072]         }
[10:26:29.072]         else {
[10:26:29.072]             ...future.result["stdout"] <- base::list(NULL)
[10:26:29.072]         }
[10:26:29.072]         base::close(...future.stdout)
[10:26:29.072]         ...future.stdout <- NULL
[10:26:29.072]     }
[10:26:29.072]     ...future.result$conditions <- ...future.conditions
[10:26:29.072]     ...future.result$finished <- base::Sys.time()
[10:26:29.072]     ...future.result
[10:26:29.072] }
[10:26:29.074] plan(): Setting new future strategy stack:
[10:26:29.074] List of future strategies:
[10:26:29.074] 1. sequential:
[10:26:29.074]    - args: function (..., envir = parent.frame())
[10:26:29.074]    - tweaked: FALSE
[10:26:29.074]    - call: NULL
[10:26:29.075] plan(): nbrOfWorkers() = 1
[10:26:29.075] plan(): Setting new future strategy stack:
[10:26:29.076] List of future strategies:
[10:26:29.076] 1. multisession:
[10:26:29.076]    - args: function (..., workers = "<function () ; max(1L, future::availableCores() - 1L)>", envir = parent.frame())
[10:26:29.076]    - tweaked: TRUE
[10:26:29.076]    - call: plan(strategy, workers = allButOneCore)
[10:26:29.080] plan(): nbrOfWorkers() = 1
[10:26:29.080] SequentialFuture started (and completed)
[10:26:29.081] plan(): plan_init() of ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ... DONE
[10:26:29.084] plan(): nbrOfWorkers() = 1
nbrOfWorkers: 1
[10:26:29.093] getGlobalsAndPackages() ...
[10:26:29.093] Searching for globals...
[10:26:29.093] 
[10:26:29.093] Searching for globals ... DONE
[10:26:29.093] - globals: [0] <none>
[10:26:29.093] getGlobalsAndPackages() ... DONE
nbrOfFreeWorkers: 1
[10:26:29.099] getGlobalsAndPackages() ...
[10:26:29.100] Searching for globals...
[10:26:29.100] 
[10:26:29.100] Searching for globals ... DONE
[10:26:29.100] - globals: [0] <none>
[10:26:29.100] getGlobalsAndPackages() ... DONE
nbrOfFreeWorkers(background = TRUE): 0
Type of future: multicore
nbrOfWorkers: 2
[10:26:29.104] plan(): Setting new future strategy stack:
[10:26:29.104] List of future strategies:
[10:26:29.104] 1. multicore:
[10:26:29.104]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[10:26:29.104]    - tweaked: FALSE
[10:26:29.104]    - call: plan(strategy)
[10:26:29.107] plan(): nbrOfWorkers() = 2
nbrOfWorkers: 2
nbrOfFreeWorkers: 2
nbrOfFreeWorkers(background = TRUE): 2
[10:26:29.117] plan(): Setting new future strategy stack:
[10:26:29.117] List of future strategies:
[10:26:29.117] 1. multicore:
[10:26:29.117]    - args: function (..., workers = 1L, envir = parent.frame())
[10:26:29.117]    - tweaked: TRUE
[10:26:29.117]    - call: plan(strategy, workers = 1L)
[10:26:29.118] plan(): nbrOfWorkers() = 1
nbrOfWorkers: 1
nbrOfFreeWorkers: 1
nbrOfFreeWorkers(background = TRUE): 1
[10:26:29.119] plan(): Setting new future strategy stack:
[10:26:29.119] List of future strategies:
[10:26:29.119] 1. multicore:
[10:26:29.119]    - args: function (..., workers = "<function () ; max(1L, future::availableCores() - 1L); <bytecode: 0x5602de300040>>", envir = parent.frame())
[10:26:29.119]    - tweaked: TRUE
[10:26:29.119]    - call: plan(strategy, workers = allButOneCore)
[10:26:29.122] plan(): nbrOfWorkers() = 1
nbrOfWorkers: 1
nbrOfFreeWorkers: 1
nbrOfFreeWorkers(background = TRUE): 1
> 
> 
> message("Type of future: cluster")
Type of future: cluster
> workers <- rep("localhost", times = 2L)
> plan(cluster, workers = workers)
[10:26:29.132] plan(): Setting new future strategy stack:
[10:26:29.132] List of future strategies:
[10:26:29.132] 1. cluster:
[10:26:29.132]    - args: function (..., workers = c("localhost", "localhost"), envir = parent.frame())
[10:26:29.132]    - tweaked: TRUE
[10:26:29.132]    - call: plan(cluster, workers = workers)
[10:26:29.132] plan(): plan_init() of ‘tweaked’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ...
[10:26:29.133] cluster:
[10:26:29.133] - args: function (..., workers = c("localhost", "localhost"), envir = parent.frame())
[10:26:29.133] - tweaked: TRUE
[10:26:29.133] - call: plan(cluster, workers = workers)
[10:26:29.133] getGlobalsAndPackages() ...
[10:26:29.133] Not searching for globals
[10:26:29.133] - globals: [0] <none>
[10:26:29.133] getGlobalsAndPackages() ... DONE
[10:26:29.134] [local output] makeClusterPSOCK() ...
[10:26:29.134] [local output] Workers: [n = 2] ‘localhost’, ‘localhost’
[10:26:29.135] [local output] Base port: 11267
[10:26:29.135] [local output] Getting setup options for 2 cluster nodes ...
[10:26:29.135] [local output]  - Node 1 of 2 ...
[10:26:29.135] [local output] localMachine=TRUE => revtunnel=FALSE

[10:26:29.136] [local output] Rscript port: 11267

[10:26:29.136] [local output]  - Node 2 of 2 ...
[10:26:29.137] [local output] localMachine=TRUE => revtunnel=FALSE

[10:26:29.137] [local output] Rscript port: 11267

[10:26:29.137] [local output] Getting setup options for 2 cluster nodes ... done
[10:26:29.138] [local output]  - Parallel setup requested for some PSOCK nodes
[10:26:29.138] [local output] Setting up PSOCK nodes in parallel
[10:26:29.138] List of 36
[10:26:29.138]  $ worker          : chr "localhost"
[10:26:29.138]   ..- attr(*, "localhost")= logi TRUE
[10:26:29.138]  $ master          : chr "localhost"
[10:26:29.138]  $ port            : int 11267
[10:26:29.138]  $ connectTimeout  : num 120
[10:26:29.138]  $ timeout         : num 2592000
[10:26:29.138]  $ rscript         : chr "'/usr/local/lib/R/bin/Rscript'"
[10:26:29.138]  $ homogeneous     : logi TRUE
[10:26:29.138]  $ rscript_args    : chr "--default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),fi"| __truncated__
[10:26:29.138]  $ rscript_envs    : NULL
[10:26:29.138]  $ rscript_libs    : NULL
[10:26:29.138]  $ rscript_startup : NULL
[10:26:29.138]  $ rscript_sh      : chr "sh"
[10:26:29.138]  $ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[10:26:29.138]  $ methods         : logi TRUE
[10:26:29.138]  $ socketOptions   : chr "no-delay"
[10:26:29.138]  $ useXDR          : logi FALSE
[10:26:29.138]  $ outfile         : chr "/dev/null"
[10:26:29.138]  $ renice          : int NA
[10:26:29.138]  $ rshcmd          : NULL
[10:26:29.138]  $ user            : chr(0) 
[10:26:29.138]  $ revtunnel       : logi FALSE
[10:26:29.138]  $ rshlogfile      : NULL
[10:26:29.138]  $ rshopts         : chr(0) 
[10:26:29.138]  $ rank            : int 1
[10:26:29.138]  $ manual          : logi FALSE
[10:26:29.138]  $ dryrun          : logi FALSE
[10:26:29.138]  $ quiet           : logi FALSE
[10:26:29.138]  $ setup_strategy  : chr "parallel"
[10:26:29.138]  $ local_cmd       : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[10:26:29.138]  $ pidfile         : chr "/tmp/RtmpmWgxb3/worker.rank=1.parallelly.parent=87801.156f97c266af3.pid"
[10:26:29.138]  $ rshcmd_label    : NULL
[10:26:29.138]  $ rsh_call        : NULL
[10:26:29.138]  $ cmd             : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[10:26:29.138]  $ localMachine    : logi TRUE
[10:26:29.138]  $ make_fcn        :function (worker = getOption2("parallelly.localhost.hostname", "localhost"), 
[10:26:29.138]     master = NULL, port, connectTimeout = getOption2("parallelly.makeNodePSOCK.connectTimeout", 
[10:26:29.138]         2 * 60), timeout = getOption2("parallelly.makeNodePSOCK.timeout", 
[10:26:29.138]         30 * 24 * 60 * 60), rscript = NULL, homogeneous = NULL, rscript_args = NULL, 
[10:26:29.138]     rscript_envs = NULL, rscript_libs = NULL, rscript_startup = NULL, rscript_sh = c("auto", 
[10:26:29.138]         "cmd", "sh"), default_packages = c("datasets", "utils", "grDevices", 
[10:26:29.138]         "graphics", "stats", if (methods) "methods"), methods = TRUE, socketOptions = getOption2("parallelly.makeNodePSOCK.socketOptions", 
[10:26:29.138]         "no-delay"), useXDR = getOption2("parallelly.makeNodePSOCK.useXDR", 
[10:26:29.138]         FALSE), outfile = "/dev/null", renice = NA_integer_, rshcmd = getOption2("parallelly.makeNodePSOCK.rshcmd", 
[10:26:29.138]         NULL), user = NULL, revtunnel = NA, rshlogfile = NULL, rshopts = getOption2("parallelly.makeNodePSOCK.rshopts", 
[10:26:29.138]         NULL), rank = 1L, manual = FALSE, dryrun = FALSE, quiet = FALSE, 
[10:26:29.138]     setup_strategy = getOption2("parallelly.makeNodePSOCK.setup_strategy", 
[10:26:29.138]         "parallel"), action = c("launch", "options"), verbose = FALSE)  
[10:26:29.138]  $ arguments       :List of 28
[10:26:29.138]   ..$ worker          : chr "localhost"
[10:26:29.138]   ..$ master          : NULL
[10:26:29.138]   ..$ port            : int 11267
[10:26:29.138]   ..$ connectTimeout  : num 120
[10:26:29.138]   ..$ timeout         : num 2592000
[10:26:29.138]   ..$ rscript         : NULL
[10:26:29.138]   ..$ homogeneous     : NULL
[10:26:29.138]   ..$ rscript_args    : NULL
[10:26:29.138]   ..$ rscript_envs    : NULL
[10:26:29.138]   ..$ rscript_libs    : NULL
[10:26:29.138]   ..$ rscript_startup : NULL
[10:26:29.138]   ..$ rscript_sh      : chr [1:3] "auto" "cmd" "sh"
[10:26:29.138]   ..$ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[10:26:29.138]   ..$ methods         : logi TRUE
[10:26:29.138]   ..$ socketOptions   : chr "no-delay"
[10:26:29.138]   ..$ useXDR          : logi FALSE
[10:26:29.138]   ..$ outfile         : chr "/dev/null"
[10:26:29.138]   ..$ renice          : int NA
[10:26:29.138]   ..$ rshcmd          : NULL
[10:26:29.138]   ..$ user            : NULL
[10:26:29.138]   ..$ revtunnel       : logi NA
[10:26:29.138]   ..$ rshlogfile      : NULL
[10:26:29.138]   ..$ rshopts         : NULL
[10:26:29.138]   ..$ rank            : int 1
[10:26:29.138]   ..$ manual          : logi FALSE
[10:26:29.138]   ..$ dryrun          : logi FALSE
[10:26:29.138]   ..$ quiet           : logi FALSE
[10:26:29.138]   ..$ setup_strategy  : chr "parallel"
[10:26:29.138]  - attr(*, "class")= chr [1:2] "makeNodePSOCKOptions" "makeNodeOptions"
[10:26:29.155] [local output] System call to launch all workers:
[10:26:29.155] [local output] '/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/RtmpmWgxb3/worker.rank=1.parallelly.parent=87801.156f97c266af3.pid")), silent = TRUE)' -e 'options(socketOptions = "no-delay")' -e 'workRSOCK <- tryCatch(parallel:::.workRSOCK, error=function(e) parallel:::.slaveRSOCK); workRSOCK()' MASTER=localhost PORT=11267 OUT=/dev/null TIMEOUT=2592000 XDR=FALSE SETUPTIMEOUT=120 SETUPSTRATEGY=parallel
[10:26:29.155] [local output] Starting PSOCK main server
[10:26:29.157] [local output] Workers launched
[10:26:29.157] [local output] Waiting for workers to connect back
[10:26:29.157]  - [local output] 0 workers out of 2 ready
[10:26:29.391]  - [local output] 0 workers out of 2 ready
[10:26:29.392]  - [local output] 1 workers out of 2 ready
[10:26:29.406]  - [local output] 1 workers out of 2 ready
[10:26:29.406]  - [local output] 2 workers out of 2 ready
[10:26:29.406] [local output] Launching of workers completed
[10:26:29.406] [local output] Collecting session information from workers
[10:26:29.407] [local output]  - Worker #1 of 2
[10:26:29.407] [local output]  - Worker #2 of 2
[10:26:29.408] [local output] makeClusterPSOCK() ... done
[10:26:29.420] Packages needed by the future expression (n = 0): <none>
[10:26:29.420] Packages needed by future strategies (n = 0): <none>
[10:26:29.420] {
[10:26:29.420]     {
[10:26:29.420]         {
[10:26:29.420]             ...future.startTime <- base::Sys.time()
[10:26:29.420]             {
[10:26:29.420]                 {
[10:26:29.420]                   {
[10:26:29.420]                     base::local({
[10:26:29.420]                       has_future <- base::requireNamespace("future", 
[10:26:29.420]                         quietly = TRUE)
[10:26:29.420]                       if (has_future) {
[10:26:29.420]                         ns <- base::getNamespace("future")
[10:26:29.420]                         version <- ns[[".package"]][["version"]]
[10:26:29.420]                         if (is.null(version)) 
[10:26:29.420]                           version <- utils::packageVersion("future")
[10:26:29.420]                       }
[10:26:29.420]                       else {
[10:26:29.420]                         version <- NULL
[10:26:29.420]                       }
[10:26:29.420]                       if (!has_future || version < "1.8.0") {
[10:26:29.420]                         info <- base::c(r_version = base::gsub("R version ", 
[10:26:29.420]                           "", base::R.version$version.string), 
[10:26:29.420]                           platform = base::sprintf("%s (%s-bit)", 
[10:26:29.420]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:26:29.420]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[10:26:29.420]                             "release", "version")], collapse = " "), 
[10:26:29.420]                           hostname = base::Sys.info()[["nodename"]])
[10:26:29.420]                         info <- base::sprintf("%s: %s", base::names(info), 
[10:26:29.420]                           info)
[10:26:29.420]                         info <- base::paste(info, collapse = "; ")
[10:26:29.420]                         if (!has_future) {
[10:26:29.420]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:26:29.420]                             info)
[10:26:29.420]                         }
[10:26:29.420]                         else {
[10:26:29.420]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:26:29.420]                             info, version)
[10:26:29.420]                         }
[10:26:29.420]                         base::stop(msg)
[10:26:29.420]                       }
[10:26:29.420]                     })
[10:26:29.420]                   }
[10:26:29.420]                   options(future.plan = NULL)
[10:26:29.420]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:26:29.420]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:26:29.420]                 }
[10:26:29.420]                 ...future.workdir <- getwd()
[10:26:29.420]             }
[10:26:29.420]             ...future.oldOptions <- base::as.list(base::.Options)
[10:26:29.420]             ...future.oldEnvVars <- base::Sys.getenv()
[10:26:29.420]         }
[10:26:29.420]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:26:29.420]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[10:26:29.420]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:26:29.420]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:26:29.420]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:26:29.420]             future.stdout.windows.reencode = NULL, width = 80L)
[10:26:29.420]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:26:29.420]             base::names(...future.oldOptions))
[10:26:29.420]     }
[10:26:29.420]     if (FALSE) {
[10:26:29.420]     }
[10:26:29.420]     else {
[10:26:29.420]         if (TRUE) {
[10:26:29.420]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:26:29.420]                 open = "w")
[10:26:29.420]         }
[10:26:29.420]         else {
[10:26:29.420]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:26:29.420]                 windows = "NUL", "/dev/null"), open = "w")
[10:26:29.420]         }
[10:26:29.420]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:26:29.420]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:26:29.420]             base::sink(type = "output", split = FALSE)
[10:26:29.420]             base::close(...future.stdout)
[10:26:29.420]         }, add = TRUE)
[10:26:29.420]     }
[10:26:29.420]     ...future.frame <- base::sys.nframe()
[10:26:29.420]     ...future.conditions <- base::list()
[10:26:29.420]     ...future.rng <- base::globalenv()$.Random.seed
[10:26:29.420]     if (FALSE) {
[10:26:29.420]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:26:29.420]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:26:29.420]     }
[10:26:29.420]     ...future.result <- base::tryCatch({
[10:26:29.420]         base::withCallingHandlers({
[10:26:29.420]             ...future.value <- base::withVisible(base::local({
[10:26:29.420]                 ...future.makeSendCondition <- base::local({
[10:26:29.420]                   sendCondition <- NULL
[10:26:29.420]                   function(frame = 1L) {
[10:26:29.420]                     if (is.function(sendCondition)) 
[10:26:29.420]                       return(sendCondition)
[10:26:29.420]                     ns <- getNamespace("parallel")
[10:26:29.420]                     if (exists("sendData", mode = "function", 
[10:26:29.420]                       envir = ns)) {
[10:26:29.420]                       parallel_sendData <- get("sendData", mode = "function", 
[10:26:29.420]                         envir = ns)
[10:26:29.420]                       envir <- sys.frame(frame)
[10:26:29.420]                       master <- NULL
[10:26:29.420]                       while (!identical(envir, .GlobalEnv) && 
[10:26:29.420]                         !identical(envir, emptyenv())) {
[10:26:29.420]                         if (exists("master", mode = "list", envir = envir, 
[10:26:29.420]                           inherits = FALSE)) {
[10:26:29.420]                           master <- get("master", mode = "list", 
[10:26:29.420]                             envir = envir, inherits = FALSE)
[10:26:29.420]                           if (inherits(master, c("SOCKnode", 
[10:26:29.420]                             "SOCK0node"))) {
[10:26:29.420]                             sendCondition <<- function(cond) {
[10:26:29.420]                               data <- list(type = "VALUE", value = cond, 
[10:26:29.420]                                 success = TRUE)
[10:26:29.420]                               parallel_sendData(master, data)
[10:26:29.420]                             }
[10:26:29.420]                             return(sendCondition)
[10:26:29.420]                           }
[10:26:29.420]                         }
[10:26:29.420]                         frame <- frame + 1L
[10:26:29.420]                         envir <- sys.frame(frame)
[10:26:29.420]                       }
[10:26:29.420]                     }
[10:26:29.420]                     sendCondition <<- function(cond) NULL
[10:26:29.420]                   }
[10:26:29.420]                 })
[10:26:29.420]                 withCallingHandlers({
[10:26:29.420]                   NA
[10:26:29.420]                 }, immediateCondition = function(cond) {
[10:26:29.420]                   sendCondition <- ...future.makeSendCondition()
[10:26:29.420]                   sendCondition(cond)
[10:26:29.420]                   muffleCondition <- function (cond, pattern = "^muffle") 
[10:26:29.420]                   {
[10:26:29.420]                     inherits <- base::inherits
[10:26:29.420]                     invokeRestart <- base::invokeRestart
[10:26:29.420]                     is.null <- base::is.null
[10:26:29.420]                     muffled <- FALSE
[10:26:29.420]                     if (inherits(cond, "message")) {
[10:26:29.420]                       muffled <- grepl(pattern, "muffleMessage")
[10:26:29.420]                       if (muffled) 
[10:26:29.420]                         invokeRestart("muffleMessage")
[10:26:29.420]                     }
[10:26:29.420]                     else if (inherits(cond, "warning")) {
[10:26:29.420]                       muffled <- grepl(pattern, "muffleWarning")
[10:26:29.420]                       if (muffled) 
[10:26:29.420]                         invokeRestart("muffleWarning")
[10:26:29.420]                     }
[10:26:29.420]                     else if (inherits(cond, "condition")) {
[10:26:29.420]                       if (!is.null(pattern)) {
[10:26:29.420]                         computeRestarts <- base::computeRestarts
[10:26:29.420]                         grepl <- base::grepl
[10:26:29.420]                         restarts <- computeRestarts(cond)
[10:26:29.420]                         for (restart in restarts) {
[10:26:29.420]                           name <- restart$name
[10:26:29.420]                           if (is.null(name)) 
[10:26:29.420]                             next
[10:26:29.420]                           if (!grepl(pattern, name)) 
[10:26:29.420]                             next
[10:26:29.420]                           invokeRestart(restart)
[10:26:29.420]                           muffled <- TRUE
[10:26:29.420]                           break
[10:26:29.420]                         }
[10:26:29.420]                       }
[10:26:29.420]                     }
[10:26:29.420]                     invisible(muffled)
[10:26:29.420]                   }
[10:26:29.420]                   muffleCondition(cond)
[10:26:29.420]                 })
[10:26:29.420]             }))
[10:26:29.420]             future::FutureResult(value = ...future.value$value, 
[10:26:29.420]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:26:29.420]                   ...future.rng), globalenv = if (FALSE) 
[10:26:29.420]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:26:29.420]                     ...future.globalenv.names))
[10:26:29.420]                 else NULL, started = ...future.startTime, version = "1.8")
[10:26:29.420]         }, condition = base::local({
[10:26:29.420]             c <- base::c
[10:26:29.420]             inherits <- base::inherits
[10:26:29.420]             invokeRestart <- base::invokeRestart
[10:26:29.420]             length <- base::length
[10:26:29.420]             list <- base::list
[10:26:29.420]             seq.int <- base::seq.int
[10:26:29.420]             signalCondition <- base::signalCondition
[10:26:29.420]             sys.calls <- base::sys.calls
[10:26:29.420]             `[[` <- base::`[[`
[10:26:29.420]             `+` <- base::`+`
[10:26:29.420]             `<<-` <- base::`<<-`
[10:26:29.420]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:26:29.420]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:26:29.420]                   3L)]
[10:26:29.420]             }
[10:26:29.420]             function(cond) {
[10:26:29.420]                 is_error <- inherits(cond, "error")
[10:26:29.420]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:26:29.420]                   NULL)
[10:26:29.420]                 if (is_error) {
[10:26:29.420]                   sessionInformation <- function() {
[10:26:29.420]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:26:29.420]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:26:29.420]                       search = base::search(), system = base::Sys.info())
[10:26:29.420]                   }
[10:26:29.420]                   ...future.conditions[[length(...future.conditions) + 
[10:26:29.420]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:26:29.420]                     cond$call), session = sessionInformation(), 
[10:26:29.420]                     timestamp = base::Sys.time(), signaled = 0L)
[10:26:29.420]                   signalCondition(cond)
[10:26:29.420]                 }
[10:26:29.420]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:26:29.420]                 "immediateCondition"))) {
[10:26:29.420]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:26:29.420]                   ...future.conditions[[length(...future.conditions) + 
[10:26:29.420]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:26:29.420]                   if (TRUE && !signal) {
[10:26:29.420]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:26:29.420]                     {
[10:26:29.420]                       inherits <- base::inherits
[10:26:29.420]                       invokeRestart <- base::invokeRestart
[10:26:29.420]                       is.null <- base::is.null
[10:26:29.420]                       muffled <- FALSE
[10:26:29.420]                       if (inherits(cond, "message")) {
[10:26:29.420]                         muffled <- grepl(pattern, "muffleMessage")
[10:26:29.420]                         if (muffled) 
[10:26:29.420]                           invokeRestart("muffleMessage")
[10:26:29.420]                       }
[10:26:29.420]                       else if (inherits(cond, "warning")) {
[10:26:29.420]                         muffled <- grepl(pattern, "muffleWarning")
[10:26:29.420]                         if (muffled) 
[10:26:29.420]                           invokeRestart("muffleWarning")
[10:26:29.420]                       }
[10:26:29.420]                       else if (inherits(cond, "condition")) {
[10:26:29.420]                         if (!is.null(pattern)) {
[10:26:29.420]                           computeRestarts <- base::computeRestarts
[10:26:29.420]                           grepl <- base::grepl
[10:26:29.420]                           restarts <- computeRestarts(cond)
[10:26:29.420]                           for (restart in restarts) {
[10:26:29.420]                             name <- restart$name
[10:26:29.420]                             if (is.null(name)) 
[10:26:29.420]                               next
[10:26:29.420]                             if (!grepl(pattern, name)) 
[10:26:29.420]                               next
[10:26:29.420]                             invokeRestart(restart)
[10:26:29.420]                             muffled <- TRUE
[10:26:29.420]                             break
[10:26:29.420]                           }
[10:26:29.420]                         }
[10:26:29.420]                       }
[10:26:29.420]                       invisible(muffled)
[10:26:29.420]                     }
[10:26:29.420]                     muffleCondition(cond, pattern = "^muffle")
[10:26:29.420]                   }
[10:26:29.420]                 }
[10:26:29.420]                 else {
[10:26:29.420]                   if (TRUE) {
[10:26:29.420]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:26:29.420]                     {
[10:26:29.420]                       inherits <- base::inherits
[10:26:29.420]                       invokeRestart <- base::invokeRestart
[10:26:29.420]                       is.null <- base::is.null
[10:26:29.420]                       muffled <- FALSE
[10:26:29.420]                       if (inherits(cond, "message")) {
[10:26:29.420]                         muffled <- grepl(pattern, "muffleMessage")
[10:26:29.420]                         if (muffled) 
[10:26:29.420]                           invokeRestart("muffleMessage")
[10:26:29.420]                       }
[10:26:29.420]                       else if (inherits(cond, "warning")) {
[10:26:29.420]                         muffled <- grepl(pattern, "muffleWarning")
[10:26:29.420]                         if (muffled) 
[10:26:29.420]                           invokeRestart("muffleWarning")
[10:26:29.420]                       }
[10:26:29.420]                       else if (inherits(cond, "condition")) {
[10:26:29.420]                         if (!is.null(pattern)) {
[10:26:29.420]                           computeRestarts <- base::computeRestarts
[10:26:29.420]                           grepl <- base::grepl
[10:26:29.420]                           restarts <- computeRestarts(cond)
[10:26:29.420]                           for (restart in restarts) {
[10:26:29.420]                             name <- restart$name
[10:26:29.420]                             if (is.null(name)) 
[10:26:29.420]                               next
[10:26:29.420]                             if (!grepl(pattern, name)) 
[10:26:29.420]                               next
[10:26:29.420]                             invokeRestart(restart)
[10:26:29.420]                             muffled <- TRUE
[10:26:29.420]                             break
[10:26:29.420]                           }
[10:26:29.420]                         }
[10:26:29.420]                       }
[10:26:29.420]                       invisible(muffled)
[10:26:29.420]                     }
[10:26:29.420]                     muffleCondition(cond, pattern = "^muffle")
[10:26:29.420]                   }
[10:26:29.420]                 }
[10:26:29.420]             }
[10:26:29.420]         }))
[10:26:29.420]     }, error = function(ex) {
[10:26:29.420]         base::structure(base::list(value = NULL, visible = NULL, 
[10:26:29.420]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:26:29.420]                 ...future.rng), started = ...future.startTime, 
[10:26:29.420]             finished = Sys.time(), session_uuid = NA_character_, 
[10:26:29.420]             version = "1.8"), class = "FutureResult")
[10:26:29.420]     }, finally = {
[10:26:29.420]         if (!identical(...future.workdir, getwd())) 
[10:26:29.420]             setwd(...future.workdir)
[10:26:29.420]         {
[10:26:29.420]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:26:29.420]                 ...future.oldOptions$nwarnings <- NULL
[10:26:29.420]             }
[10:26:29.420]             base::options(...future.oldOptions)
[10:26:29.420]             if (.Platform$OS.type == "windows") {
[10:26:29.420]                 old_names <- names(...future.oldEnvVars)
[10:26:29.420]                 envs <- base::Sys.getenv()
[10:26:29.420]                 names <- names(envs)
[10:26:29.420]                 common <- intersect(names, old_names)
[10:26:29.420]                 added <- setdiff(names, old_names)
[10:26:29.420]                 removed <- setdiff(old_names, names)
[10:26:29.420]                 changed <- common[...future.oldEnvVars[common] != 
[10:26:29.420]                   envs[common]]
[10:26:29.420]                 NAMES <- toupper(changed)
[10:26:29.420]                 args <- list()
[10:26:29.420]                 for (kk in seq_along(NAMES)) {
[10:26:29.420]                   name <- changed[[kk]]
[10:26:29.420]                   NAME <- NAMES[[kk]]
[10:26:29.420]                   if (name != NAME && is.element(NAME, old_names)) 
[10:26:29.420]                     next
[10:26:29.420]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:26:29.420]                 }
[10:26:29.420]                 NAMES <- toupper(added)
[10:26:29.420]                 for (kk in seq_along(NAMES)) {
[10:26:29.420]                   name <- added[[kk]]
[10:26:29.420]                   NAME <- NAMES[[kk]]
[10:26:29.420]                   if (name != NAME && is.element(NAME, old_names)) 
[10:26:29.420]                     next
[10:26:29.420]                   args[[name]] <- ""
[10:26:29.420]                 }
[10:26:29.420]                 NAMES <- toupper(removed)
[10:26:29.420]                 for (kk in seq_along(NAMES)) {
[10:26:29.420]                   name <- removed[[kk]]
[10:26:29.420]                   NAME <- NAMES[[kk]]
[10:26:29.420]                   if (name != NAME && is.element(NAME, old_names)) 
[10:26:29.420]                     next
[10:26:29.420]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:26:29.420]                 }
[10:26:29.420]                 if (length(args) > 0) 
[10:26:29.420]                   base::do.call(base::Sys.setenv, args = args)
[10:26:29.420]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:26:29.420]             }
[10:26:29.420]             else {
[10:26:29.420]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:26:29.420]             }
[10:26:29.420]             {
[10:26:29.420]                 if (base::length(...future.futureOptionsAdded) > 
[10:26:29.420]                   0L) {
[10:26:29.420]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:26:29.420]                   base::names(opts) <- ...future.futureOptionsAdded
[10:26:29.420]                   base::options(opts)
[10:26:29.420]                 }
[10:26:29.420]                 {
[10:26:29.420]                   NULL
[10:26:29.420]                   options(future.plan = NULL)
[10:26:29.420]                   if (is.na(NA_character_)) 
[10:26:29.420]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:26:29.420]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:26:29.420]                   future::plan(list(function (..., workers = c("localhost", 
[10:26:29.420]                   "localhost"), envir = parent.frame()) 
[10:26:29.420]                   strategy(..., workers = workers, envir = envir)), 
[10:26:29.420]                     .cleanup = FALSE, .init = FALSE)
[10:26:29.420]                 }
[10:26:29.420]             }
[10:26:29.420]         }
[10:26:29.420]     })
[10:26:29.420]     if (TRUE) {
[10:26:29.420]         base::sink(type = "output", split = FALSE)
[10:26:29.420]         if (TRUE) {
[10:26:29.420]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:26:29.420]         }
[10:26:29.420]         else {
[10:26:29.420]             ...future.result["stdout"] <- base::list(NULL)
[10:26:29.420]         }
[10:26:29.420]         base::close(...future.stdout)
[10:26:29.420]         ...future.stdout <- NULL
[10:26:29.420]     }
[10:26:29.420]     ...future.result$conditions <- ...future.conditions
[10:26:29.420]     ...future.result$finished <- base::Sys.time()
[10:26:29.420]     ...future.result
[10:26:29.420] }
[10:26:29.474] ClusterFuture started
[10:26:29.474] result() for ClusterFuture ...
[10:26:29.474] receiveMessageFromWorker() for ClusterFuture ...
[10:26:29.475] - Validating connection of ClusterFuture
[10:26:29.508] - received message: FutureResult
[10:26:29.508] - Received FutureResult
[10:26:29.509] - Erased future from FutureRegistry
[10:26:29.509] result() for ClusterFuture ...
[10:26:29.509] - result already collected: FutureResult
[10:26:29.509] result() for ClusterFuture ... done
[10:26:29.509] receiveMessageFromWorker() for ClusterFuture ... done
[10:26:29.509] result() for ClusterFuture ... done
[10:26:29.509] result() for ClusterFuture ...
[10:26:29.509] - result already collected: FutureResult
[10:26:29.509] result() for ClusterFuture ... done
[10:26:29.509] plan(): plan_init() of ‘tweaked’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ... DONE
[10:26:29.510] plan(): nbrOfWorkers() = 2
> n <- nbrOfWorkers()
> message(sprintf("nbrOfWorkers: %d", n))
nbrOfWorkers: 2
> stopifnot(n == length(workers))
> plan(cluster, workers = allButOneWorker)
[10:26:29.510] plan(): Setting new future strategy stack:
[10:26:29.510] List of future strategies:
[10:26:29.510] 1. cluster:
[10:26:29.510]    - args: function (..., workers = "<function ()  >", envir = parent.frame())
[10:26:29.510]    - tweaked: TRUE
[10:26:29.510]    - call: plan(cluster, workers = allButOneWorker)
[10:26:29.511] plan(): plan_init() of ‘tweaked’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ...
[10:26:29.512] cluster:
[10:26:29.512] - args: function (..., workers = "<function ()  >", envir = parent.frame())
[10:26:29.512] - tweaked: TRUE
[10:26:29.512] - call: plan(cluster, workers = allButOneWorker)
[10:26:29.512] getGlobalsAndPackages() ...
[10:26:29.512] Not searching for globals
[10:26:29.513] - globals: [0] <none>
[10:26:29.513] getGlobalsAndPackages() ... DONE
[10:26:29.517] [local output] makeClusterPSOCK() ...
[10:26:29.518] [local output] Workers: [n = 1] ‘localhost’
[10:26:29.518] [local output] Base port: 11186
[10:26:29.518] [local output] Getting setup options for 1 cluster nodes ...
[10:26:29.518] [local output]  - Node 1 of 1 ...
[10:26:29.519] [local output] localMachine=TRUE => revtunnel=FALSE

[10:26:29.519] [local output] Rscript port: 11186

[10:26:29.520] [local output] Getting setup options for 1 cluster nodes ... done
[10:26:29.520] [local output]  - Parallel setup requested for some PSOCK nodes
[10:26:29.520] [local output] Setting up PSOCK nodes in parallel
[10:26:29.520] List of 36
[10:26:29.520]  $ worker          : chr "localhost"
[10:26:29.520]   ..- attr(*, "localhost")= logi TRUE
[10:26:29.520]  $ master          : chr "localhost"
[10:26:29.520]  $ port            : int 11186
[10:26:29.520]  $ connectTimeout  : num 120
[10:26:29.520]  $ timeout         : num 2592000
[10:26:29.520]  $ rscript         : chr "'/usr/local/lib/R/bin/Rscript'"
[10:26:29.520]  $ homogeneous     : logi TRUE
[10:26:29.520]  $ rscript_args    : chr "--default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),fi"| __truncated__
[10:26:29.520]  $ rscript_envs    : NULL
[10:26:29.520]  $ rscript_libs    : NULL
[10:26:29.520]  $ rscript_startup : NULL
[10:26:29.520]  $ rscript_sh      : chr "sh"
[10:26:29.520]  $ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[10:26:29.520]  $ methods         : logi TRUE
[10:26:29.520]  $ socketOptions   : chr "no-delay"
[10:26:29.520]  $ useXDR          : logi FALSE
[10:26:29.520]  $ outfile         : chr "/dev/null"
[10:26:29.520]  $ renice          : int NA
[10:26:29.520]  $ rshcmd          : NULL
[10:26:29.520]  $ user            : chr(0) 
[10:26:29.520]  $ revtunnel       : logi FALSE
[10:26:29.520]  $ rshlogfile      : NULL
[10:26:29.520]  $ rshopts         : chr(0) 
[10:26:29.520]  $ rank            : int 1
[10:26:29.520]  $ manual          : logi FALSE
[10:26:29.520]  $ dryrun          : logi FALSE
[10:26:29.520]  $ quiet           : logi FALSE
[10:26:29.520]  $ setup_strategy  : chr "parallel"
[10:26:29.520]  $ local_cmd       : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[10:26:29.520]  $ pidfile         : chr "/tmp/RtmpmWgxb3/worker.rank=1.parallelly.parent=87801.156f95760ac64.pid"
[10:26:29.520]  $ rshcmd_label    : NULL
[10:26:29.520]  $ rsh_call        : NULL
[10:26:29.520]  $ cmd             : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[10:26:29.520]  $ localMachine    : logi TRUE
[10:26:29.520]  $ make_fcn        :function (worker = getOption2("parallelly.localhost.hostname", "localhost"), 
[10:26:29.520]     master = NULL, port, connectTimeout = getOption2("parallelly.makeNodePSOCK.connectTimeout", 
[10:26:29.520]         2 * 60), timeout = getOption2("parallelly.makeNodePSOCK.timeout", 
[10:26:29.520]         30 * 24 * 60 * 60), rscript = NULL, homogeneous = NULL, rscript_args = NULL, 
[10:26:29.520]     rscript_envs = NULL, rscript_libs = NULL, rscript_startup = NULL, rscript_sh = c("auto", 
[10:26:29.520]         "cmd", "sh"), default_packages = c("datasets", "utils", "grDevices", 
[10:26:29.520]         "graphics", "stats", if (methods) "methods"), methods = TRUE, socketOptions = getOption2("parallelly.makeNodePSOCK.socketOptions", 
[10:26:29.520]         "no-delay"), useXDR = getOption2("parallelly.makeNodePSOCK.useXDR", 
[10:26:29.520]         FALSE), outfile = "/dev/null", renice = NA_integer_, rshcmd = getOption2("parallelly.makeNodePSOCK.rshcmd", 
[10:26:29.520]         NULL), user = NULL, revtunnel = NA, rshlogfile = NULL, rshopts = getOption2("parallelly.makeNodePSOCK.rshopts", 
[10:26:29.520]         NULL), rank = 1L, manual = FALSE, dryrun = FALSE, quiet = FALSE, 
[10:26:29.520]     setup_strategy = getOption2("parallelly.makeNodePSOCK.setup_strategy", 
[10:26:29.520]         "parallel"), action = c("launch", "options"), verbose = FALSE)  
[10:26:29.520]  $ arguments       :List of 28
[10:26:29.520]   ..$ worker          : chr "localhost"
[10:26:29.520]   ..$ master          : NULL
[10:26:29.520]   ..$ port            : int 11186
[10:26:29.520]   ..$ connectTimeout  : num 120
[10:26:29.520]   ..$ timeout         : num 2592000
[10:26:29.520]   ..$ rscript         : NULL
[10:26:29.520]   ..$ homogeneous     : NULL
[10:26:29.520]   ..$ rscript_args    : NULL
[10:26:29.520]   ..$ rscript_envs    : NULL
[10:26:29.520]   ..$ rscript_libs    : NULL
[10:26:29.520]   ..$ rscript_startup : NULL
[10:26:29.520]   ..$ rscript_sh      : chr [1:3] "auto" "cmd" "sh"
[10:26:29.520]   ..$ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[10:26:29.520]   ..$ methods         : logi TRUE
[10:26:29.520]   ..$ socketOptions   : chr "no-delay"
[10:26:29.520]   ..$ useXDR          : logi FALSE
[10:26:29.520]   ..$ outfile         : chr "/dev/null"
[10:26:29.520]   ..$ renice          : int NA
[10:26:29.520]   ..$ rshcmd          : NULL
[10:26:29.520]   ..$ user            : NULL
[10:26:29.520]   ..$ revtunnel       : logi NA
[10:26:29.520]   ..$ rshlogfile      : NULL
[10:26:29.520]   ..$ rshopts         : NULL
[10:26:29.520]   ..$ rank            : int 1
[10:26:29.520]   ..$ manual          : logi FALSE
[10:26:29.520]   ..$ dryrun          : logi FALSE
[10:26:29.520]   ..$ quiet           : logi FALSE
[10:26:29.520]   ..$ setup_strategy  : chr "parallel"
[10:26:29.520]  - attr(*, "class")= chr [1:2] "makeNodePSOCKOptions" "makeNodeOptions"
[10:26:29.539] [local output] System call to launch all workers:
[10:26:29.539] [local output] '/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/RtmpmWgxb3/worker.rank=1.parallelly.parent=87801.156f95760ac64.pid")), silent = TRUE)' -e 'options(socketOptions = "no-delay")' -e 'workRSOCK <- tryCatch(parallel:::.workRSOCK, error=function(e) parallel:::.slaveRSOCK); workRSOCK()' MASTER=localhost PORT=11186 OUT=/dev/null TIMEOUT=2592000 XDR=FALSE SETUPTIMEOUT=120 SETUPSTRATEGY=parallel
[10:26:29.540] [local output] Starting PSOCK main server
[10:26:29.541] [local output] Workers launched
[10:26:29.541] [local output] Waiting for workers to connect back
[10:26:29.541]  - [local output] 0 workers out of 1 ready
[10:26:29.736]  - [local output] 0 workers out of 1 ready
[10:26:29.737]  - [local output] 1 workers out of 1 ready
[10:26:29.737] [local output] Launching of workers completed
[10:26:29.737] [local output] Collecting session information from workers
[10:26:29.738] [local output]  - Worker #1 of 1
[10:26:29.738] [local output] makeClusterPSOCK() ... done
[10:26:29.743] Packages needed by the future expression (n = 0): <none>
[10:26:29.743] Packages needed by future strategies (n = 0): <none>
[10:26:29.744] {
[10:26:29.744]     {
[10:26:29.744]         {
[10:26:29.744]             ...future.startTime <- base::Sys.time()
[10:26:29.744]             {
[10:26:29.744]                 {
[10:26:29.744]                   {
[10:26:29.744]                     base::local({
[10:26:29.744]                       has_future <- base::requireNamespace("future", 
[10:26:29.744]                         quietly = TRUE)
[10:26:29.744]                       if (has_future) {
[10:26:29.744]                         ns <- base::getNamespace("future")
[10:26:29.744]                         version <- ns[[".package"]][["version"]]
[10:26:29.744]                         if (is.null(version)) 
[10:26:29.744]                           version <- utils::packageVersion("future")
[10:26:29.744]                       }
[10:26:29.744]                       else {
[10:26:29.744]                         version <- NULL
[10:26:29.744]                       }
[10:26:29.744]                       if (!has_future || version < "1.8.0") {
[10:26:29.744]                         info <- base::c(r_version = base::gsub("R version ", 
[10:26:29.744]                           "", base::R.version$version.string), 
[10:26:29.744]                           platform = base::sprintf("%s (%s-bit)", 
[10:26:29.744]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:26:29.744]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[10:26:29.744]                             "release", "version")], collapse = " "), 
[10:26:29.744]                           hostname = base::Sys.info()[["nodename"]])
[10:26:29.744]                         info <- base::sprintf("%s: %s", base::names(info), 
[10:26:29.744]                           info)
[10:26:29.744]                         info <- base::paste(info, collapse = "; ")
[10:26:29.744]                         if (!has_future) {
[10:26:29.744]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:26:29.744]                             info)
[10:26:29.744]                         }
[10:26:29.744]                         else {
[10:26:29.744]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:26:29.744]                             info, version)
[10:26:29.744]                         }
[10:26:29.744]                         base::stop(msg)
[10:26:29.744]                       }
[10:26:29.744]                     })
[10:26:29.744]                   }
[10:26:29.744]                   options(future.plan = NULL)
[10:26:29.744]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:26:29.744]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:26:29.744]                 }
[10:26:29.744]                 ...future.workdir <- getwd()
[10:26:29.744]             }
[10:26:29.744]             ...future.oldOptions <- base::as.list(base::.Options)
[10:26:29.744]             ...future.oldEnvVars <- base::Sys.getenv()
[10:26:29.744]         }
[10:26:29.744]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:26:29.744]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[10:26:29.744]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:26:29.744]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:26:29.744]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:26:29.744]             future.stdout.windows.reencode = NULL, width = 80L)
[10:26:29.744]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:26:29.744]             base::names(...future.oldOptions))
[10:26:29.744]     }
[10:26:29.744]     if (FALSE) {
[10:26:29.744]     }
[10:26:29.744]     else {
[10:26:29.744]         if (TRUE) {
[10:26:29.744]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:26:29.744]                 open = "w")
[10:26:29.744]         }
[10:26:29.744]         else {
[10:26:29.744]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:26:29.744]                 windows = "NUL", "/dev/null"), open = "w")
[10:26:29.744]         }
[10:26:29.744]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:26:29.744]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:26:29.744]             base::sink(type = "output", split = FALSE)
[10:26:29.744]             base::close(...future.stdout)
[10:26:29.744]         }, add = TRUE)
[10:26:29.744]     }
[10:26:29.744]     ...future.frame <- base::sys.nframe()
[10:26:29.744]     ...future.conditions <- base::list()
[10:26:29.744]     ...future.rng <- base::globalenv()$.Random.seed
[10:26:29.744]     if (FALSE) {
[10:26:29.744]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:26:29.744]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:26:29.744]     }
[10:26:29.744]     ...future.result <- base::tryCatch({
[10:26:29.744]         base::withCallingHandlers({
[10:26:29.744]             ...future.value <- base::withVisible(base::local({
[10:26:29.744]                 ...future.makeSendCondition <- base::local({
[10:26:29.744]                   sendCondition <- NULL
[10:26:29.744]                   function(frame = 1L) {
[10:26:29.744]                     if (is.function(sendCondition)) 
[10:26:29.744]                       return(sendCondition)
[10:26:29.744]                     ns <- getNamespace("parallel")
[10:26:29.744]                     if (exists("sendData", mode = "function", 
[10:26:29.744]                       envir = ns)) {
[10:26:29.744]                       parallel_sendData <- get("sendData", mode = "function", 
[10:26:29.744]                         envir = ns)
[10:26:29.744]                       envir <- sys.frame(frame)
[10:26:29.744]                       master <- NULL
[10:26:29.744]                       while (!identical(envir, .GlobalEnv) && 
[10:26:29.744]                         !identical(envir, emptyenv())) {
[10:26:29.744]                         if (exists("master", mode = "list", envir = envir, 
[10:26:29.744]                           inherits = FALSE)) {
[10:26:29.744]                           master <- get("master", mode = "list", 
[10:26:29.744]                             envir = envir, inherits = FALSE)
[10:26:29.744]                           if (inherits(master, c("SOCKnode", 
[10:26:29.744]                             "SOCK0node"))) {
[10:26:29.744]                             sendCondition <<- function(cond) {
[10:26:29.744]                               data <- list(type = "VALUE", value = cond, 
[10:26:29.744]                                 success = TRUE)
[10:26:29.744]                               parallel_sendData(master, data)
[10:26:29.744]                             }
[10:26:29.744]                             return(sendCondition)
[10:26:29.744]                           }
[10:26:29.744]                         }
[10:26:29.744]                         frame <- frame + 1L
[10:26:29.744]                         envir <- sys.frame(frame)
[10:26:29.744]                       }
[10:26:29.744]                     }
[10:26:29.744]                     sendCondition <<- function(cond) NULL
[10:26:29.744]                   }
[10:26:29.744]                 })
[10:26:29.744]                 withCallingHandlers({
[10:26:29.744]                   NA
[10:26:29.744]                 }, immediateCondition = function(cond) {
[10:26:29.744]                   sendCondition <- ...future.makeSendCondition()
[10:26:29.744]                   sendCondition(cond)
[10:26:29.744]                   muffleCondition <- function (cond, pattern = "^muffle") 
[10:26:29.744]                   {
[10:26:29.744]                     inherits <- base::inherits
[10:26:29.744]                     invokeRestart <- base::invokeRestart
[10:26:29.744]                     is.null <- base::is.null
[10:26:29.744]                     muffled <- FALSE
[10:26:29.744]                     if (inherits(cond, "message")) {
[10:26:29.744]                       muffled <- grepl(pattern, "muffleMessage")
[10:26:29.744]                       if (muffled) 
[10:26:29.744]                         invokeRestart("muffleMessage")
[10:26:29.744]                     }
[10:26:29.744]                     else if (inherits(cond, "warning")) {
[10:26:29.744]                       muffled <- grepl(pattern, "muffleWarning")
[10:26:29.744]                       if (muffled) 
[10:26:29.744]                         invokeRestart("muffleWarning")
[10:26:29.744]                     }
[10:26:29.744]                     else if (inherits(cond, "condition")) {
[10:26:29.744]                       if (!is.null(pattern)) {
[10:26:29.744]                         computeRestarts <- base::computeRestarts
[10:26:29.744]                         grepl <- base::grepl
[10:26:29.744]                         restarts <- computeRestarts(cond)
[10:26:29.744]                         for (restart in restarts) {
[10:26:29.744]                           name <- restart$name
[10:26:29.744]                           if (is.null(name)) 
[10:26:29.744]                             next
[10:26:29.744]                           if (!grepl(pattern, name)) 
[10:26:29.744]                             next
[10:26:29.744]                           invokeRestart(restart)
[10:26:29.744]                           muffled <- TRUE
[10:26:29.744]                           break
[10:26:29.744]                         }
[10:26:29.744]                       }
[10:26:29.744]                     }
[10:26:29.744]                     invisible(muffled)
[10:26:29.744]                   }
[10:26:29.744]                   muffleCondition(cond)
[10:26:29.744]                 })
[10:26:29.744]             }))
[10:26:29.744]             future::FutureResult(value = ...future.value$value, 
[10:26:29.744]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:26:29.744]                   ...future.rng), globalenv = if (FALSE) 
[10:26:29.744]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:26:29.744]                     ...future.globalenv.names))
[10:26:29.744]                 else NULL, started = ...future.startTime, version = "1.8")
[10:26:29.744]         }, condition = base::local({
[10:26:29.744]             c <- base::c
[10:26:29.744]             inherits <- base::inherits
[10:26:29.744]             invokeRestart <- base::invokeRestart
[10:26:29.744]             length <- base::length
[10:26:29.744]             list <- base::list
[10:26:29.744]             seq.int <- base::seq.int
[10:26:29.744]             signalCondition <- base::signalCondition
[10:26:29.744]             sys.calls <- base::sys.calls
[10:26:29.744]             `[[` <- base::`[[`
[10:26:29.744]             `+` <- base::`+`
[10:26:29.744]             `<<-` <- base::`<<-`
[10:26:29.744]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:26:29.744]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:26:29.744]                   3L)]
[10:26:29.744]             }
[10:26:29.744]             function(cond) {
[10:26:29.744]                 is_error <- inherits(cond, "error")
[10:26:29.744]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:26:29.744]                   NULL)
[10:26:29.744]                 if (is_error) {
[10:26:29.744]                   sessionInformation <- function() {
[10:26:29.744]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:26:29.744]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:26:29.744]                       search = base::search(), system = base::Sys.info())
[10:26:29.744]                   }
[10:26:29.744]                   ...future.conditions[[length(...future.conditions) + 
[10:26:29.744]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:26:29.744]                     cond$call), session = sessionInformation(), 
[10:26:29.744]                     timestamp = base::Sys.time(), signaled = 0L)
[10:26:29.744]                   signalCondition(cond)
[10:26:29.744]                 }
[10:26:29.744]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:26:29.744]                 "immediateCondition"))) {
[10:26:29.744]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:26:29.744]                   ...future.conditions[[length(...future.conditions) + 
[10:26:29.744]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:26:29.744]                   if (TRUE && !signal) {
[10:26:29.744]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:26:29.744]                     {
[10:26:29.744]                       inherits <- base::inherits
[10:26:29.744]                       invokeRestart <- base::invokeRestart
[10:26:29.744]                       is.null <- base::is.null
[10:26:29.744]                       muffled <- FALSE
[10:26:29.744]                       if (inherits(cond, "message")) {
[10:26:29.744]                         muffled <- grepl(pattern, "muffleMessage")
[10:26:29.744]                         if (muffled) 
[10:26:29.744]                           invokeRestart("muffleMessage")
[10:26:29.744]                       }
[10:26:29.744]                       else if (inherits(cond, "warning")) {
[10:26:29.744]                         muffled <- grepl(pattern, "muffleWarning")
[10:26:29.744]                         if (muffled) 
[10:26:29.744]                           invokeRestart("muffleWarning")
[10:26:29.744]                       }
[10:26:29.744]                       else if (inherits(cond, "condition")) {
[10:26:29.744]                         if (!is.null(pattern)) {
[10:26:29.744]                           computeRestarts <- base::computeRestarts
[10:26:29.744]                           grepl <- base::grepl
[10:26:29.744]                           restarts <- computeRestarts(cond)
[10:26:29.744]                           for (restart in restarts) {
[10:26:29.744]                             name <- restart$name
[10:26:29.744]                             if (is.null(name)) 
[10:26:29.744]                               next
[10:26:29.744]                             if (!grepl(pattern, name)) 
[10:26:29.744]                               next
[10:26:29.744]                             invokeRestart(restart)
[10:26:29.744]                             muffled <- TRUE
[10:26:29.744]                             break
[10:26:29.744]                           }
[10:26:29.744]                         }
[10:26:29.744]                       }
[10:26:29.744]                       invisible(muffled)
[10:26:29.744]                     }
[10:26:29.744]                     muffleCondition(cond, pattern = "^muffle")
[10:26:29.744]                   }
[10:26:29.744]                 }
[10:26:29.744]                 else {
[10:26:29.744]                   if (TRUE) {
[10:26:29.744]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:26:29.744]                     {
[10:26:29.744]                       inherits <- base::inherits
[10:26:29.744]                       invokeRestart <- base::invokeRestart
[10:26:29.744]                       is.null <- base::is.null
[10:26:29.744]                       muffled <- FALSE
[10:26:29.744]                       if (inherits(cond, "message")) {
[10:26:29.744]                         muffled <- grepl(pattern, "muffleMessage")
[10:26:29.744]                         if (muffled) 
[10:26:29.744]                           invokeRestart("muffleMessage")
[10:26:29.744]                       }
[10:26:29.744]                       else if (inherits(cond, "warning")) {
[10:26:29.744]                         muffled <- grepl(pattern, "muffleWarning")
[10:26:29.744]                         if (muffled) 
[10:26:29.744]                           invokeRestart("muffleWarning")
[10:26:29.744]                       }
[10:26:29.744]                       else if (inherits(cond, "condition")) {
[10:26:29.744]                         if (!is.null(pattern)) {
[10:26:29.744]                           computeRestarts <- base::computeRestarts
[10:26:29.744]                           grepl <- base::grepl
[10:26:29.744]                           restarts <- computeRestarts(cond)
[10:26:29.744]                           for (restart in restarts) {
[10:26:29.744]                             name <- restart$name
[10:26:29.744]                             if (is.null(name)) 
[10:26:29.744]                               next
[10:26:29.744]                             if (!grepl(pattern, name)) 
[10:26:29.744]                               next
[10:26:29.744]                             invokeRestart(restart)
[10:26:29.744]                             muffled <- TRUE
[10:26:29.744]                             break
[10:26:29.744]                           }
[10:26:29.744]                         }
[10:26:29.744]                       }
[10:26:29.744]                       invisible(muffled)
[10:26:29.744]                     }
[10:26:29.744]                     muffleCondition(cond, pattern = "^muffle")
[10:26:29.744]                   }
[10:26:29.744]                 }
[10:26:29.744]             }
[10:26:29.744]         }))
[10:26:29.744]     }, error = function(ex) {
[10:26:29.744]         base::structure(base::list(value = NULL, visible = NULL, 
[10:26:29.744]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:26:29.744]                 ...future.rng), started = ...future.startTime, 
[10:26:29.744]             finished = Sys.time(), session_uuid = NA_character_, 
[10:26:29.744]             version = "1.8"), class = "FutureResult")
[10:26:29.744]     }, finally = {
[10:26:29.744]         if (!identical(...future.workdir, getwd())) 
[10:26:29.744]             setwd(...future.workdir)
[10:26:29.744]         {
[10:26:29.744]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:26:29.744]                 ...future.oldOptions$nwarnings <- NULL
[10:26:29.744]             }
[10:26:29.744]             base::options(...future.oldOptions)
[10:26:29.744]             if (.Platform$OS.type == "windows") {
[10:26:29.744]                 old_names <- names(...future.oldEnvVars)
[10:26:29.744]                 envs <- base::Sys.getenv()
[10:26:29.744]                 names <- names(envs)
[10:26:29.744]                 common <- intersect(names, old_names)
[10:26:29.744]                 added <- setdiff(names, old_names)
[10:26:29.744]                 removed <- setdiff(old_names, names)
[10:26:29.744]                 changed <- common[...future.oldEnvVars[common] != 
[10:26:29.744]                   envs[common]]
[10:26:29.744]                 NAMES <- toupper(changed)
[10:26:29.744]                 args <- list()
[10:26:29.744]                 for (kk in seq_along(NAMES)) {
[10:26:29.744]                   name <- changed[[kk]]
[10:26:29.744]                   NAME <- NAMES[[kk]]
[10:26:29.744]                   if (name != NAME && is.element(NAME, old_names)) 
[10:26:29.744]                     next
[10:26:29.744]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:26:29.744]                 }
[10:26:29.744]                 NAMES <- toupper(added)
[10:26:29.744]                 for (kk in seq_along(NAMES)) {
[10:26:29.744]                   name <- added[[kk]]
[10:26:29.744]                   NAME <- NAMES[[kk]]
[10:26:29.744]                   if (name != NAME && is.element(NAME, old_names)) 
[10:26:29.744]                     next
[10:26:29.744]                   args[[name]] <- ""
[10:26:29.744]                 }
[10:26:29.744]                 NAMES <- toupper(removed)
[10:26:29.744]                 for (kk in seq_along(NAMES)) {
[10:26:29.744]                   name <- removed[[kk]]
[10:26:29.744]                   NAME <- NAMES[[kk]]
[10:26:29.744]                   if (name != NAME && is.element(NAME, old_names)) 
[10:26:29.744]                     next
[10:26:29.744]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:26:29.744]                 }
[10:26:29.744]                 if (length(args) > 0) 
[10:26:29.744]                   base::do.call(base::Sys.setenv, args = args)
[10:26:29.744]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:26:29.744]             }
[10:26:29.744]             else {
[10:26:29.744]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:26:29.744]             }
[10:26:29.744]             {
[10:26:29.744]                 if (base::length(...future.futureOptionsAdded) > 
[10:26:29.744]                   0L) {
[10:26:29.744]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:26:29.744]                   base::names(opts) <- ...future.futureOptionsAdded
[10:26:29.744]                   base::options(opts)
[10:26:29.744]                 }
[10:26:29.744]                 {
[10:26:29.744]                   NULL
[10:26:29.744]                   options(future.plan = NULL)
[10:26:29.744]                   if (is.na(NA_character_)) 
[10:26:29.744]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:26:29.744]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:26:29.744]                   future::plan(list(function (..., workers = function () 
[10:26:29.744]                   {
[10:26:29.744]                     w <- future::availableWorkers()
[10:26:29.744]                     if (length(w) > 1) 
[10:26:29.744]                       w[-1]
[10:26:29.744]                     else w
[10:26:29.744]                   }, envir = parent.frame()) 
[10:26:29.744]                   strategy(..., workers = workers, envir = envir)), 
[10:26:29.744]                     .cleanup = FALSE, .init = FALSE)
[10:26:29.744]                 }
[10:26:29.744]             }
[10:26:29.744]         }
[10:26:29.744]     })
[10:26:29.744]     if (TRUE) {
[10:26:29.744]         base::sink(type = "output", split = FALSE)
[10:26:29.744]         if (TRUE) {
[10:26:29.744]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:26:29.744]         }
[10:26:29.744]         else {
[10:26:29.744]             ...future.result["stdout"] <- base::list(NULL)
[10:26:29.744]         }
[10:26:29.744]         base::close(...future.stdout)
[10:26:29.744]         ...future.stdout <- NULL
[10:26:29.744]     }
[10:26:29.744]     ...future.result$conditions <- ...future.conditions
[10:26:29.744]     ...future.result$finished <- base::Sys.time()
[10:26:29.744]     ...future.result
[10:26:29.744] }
[10:26:29.797] ClusterFuture started
[10:26:29.797] result() for ClusterFuture ...
[10:26:29.797] receiveMessageFromWorker() for ClusterFuture ...
[10:26:29.797] - Validating connection of ClusterFuture
[10:26:29.844] - received message: FutureResult
[10:26:29.844] - Received FutureResult
[10:26:29.844] - Erased future from FutureRegistry
[10:26:29.844] result() for ClusterFuture ...
[10:26:29.844] - result already collected: FutureResult
[10:26:29.844] result() for ClusterFuture ... done
[10:26:29.845] receiveMessageFromWorker() for ClusterFuture ... done
[10:26:29.845] result() for ClusterFuture ... done
[10:26:29.845] result() for ClusterFuture ...
[10:26:29.845] - result already collected: FutureResult
[10:26:29.845] result() for ClusterFuture ... done
[10:26:29.845] plan(): plan_init() of ‘tweaked’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ... DONE
[10:26:29.851] plan(): nbrOfWorkers() = 1
> n <- nbrOfWorkers()
> message(sprintf("nbrOfWorkers: %d", n))
nbrOfWorkers: 1
> stopifnot(n == max(1L, nworkers - 1L))
> 
> message("Type of future: constant")
Type of future: constant
> n <- nbrOfWorkers(constant)
> message(sprintf("nbrOfWorkers: %d", n))
nbrOfWorkers: 1
> stopifnot(n == 1)
> 
> message("Type of future: <future>")
Type of future: <future>
> foo <- structure(function(...) NULL, class = c("future"))
> n <- nbrOfWorkers(foo)
> message(sprintf("nbrOfWorkers: %g", n))
nbrOfWorkers: Inf
> stopifnot(n >= 0, is.infinite(n))
> 
> 
> message("Type of future: cluster with workers = <cluster object>")
Type of future: cluster with workers = <cluster object>
> 
> workers <- makeClusterPSOCK(2L)
[10:26:29.856] [local output] makeClusterPSOCK() ...
[10:26:29.859] [local output] Workers: [n = 2] ‘localhost’, ‘localhost’
[10:26:29.860] [local output] Base port: 11632
[10:26:29.860] [local output] Getting setup options for 2 cluster nodes ...
[10:26:29.860] [local output]  - Node 1 of 2 ...
[10:26:29.860] [local output] localMachine=TRUE => revtunnel=FALSE

[10:26:29.861] [local output] Rscript port: 11632

[10:26:29.861] [local output]  - Node 2 of 2 ...
[10:26:29.862] [local output] localMachine=TRUE => revtunnel=FALSE

[10:26:29.862] [local output] Rscript port: 11632

[10:26:29.862] [local output] Getting setup options for 2 cluster nodes ... done
[10:26:29.863] [local output]  - Parallel setup requested for some PSOCK nodes
[10:26:29.863] [local output] Setting up PSOCK nodes in parallel
[10:26:29.863] List of 36
[10:26:29.863]  $ worker          : chr "localhost"
[10:26:29.863]   ..- attr(*, "localhost")= logi TRUE
[10:26:29.863]  $ master          : chr "localhost"
[10:26:29.863]  $ port            : int 11632
[10:26:29.863]  $ connectTimeout  : num 120
[10:26:29.863]  $ timeout         : num 2592000
[10:26:29.863]  $ rscript         : chr "'/usr/local/lib/R/bin/Rscript'"
[10:26:29.863]  $ homogeneous     : logi TRUE
[10:26:29.863]  $ rscript_args    : chr "--default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),fi"| __truncated__
[10:26:29.863]  $ rscript_envs    : NULL
[10:26:29.863]  $ rscript_libs    : NULL
[10:26:29.863]  $ rscript_startup : NULL
[10:26:29.863]  $ rscript_sh      : chr "sh"
[10:26:29.863]  $ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[10:26:29.863]  $ methods         : logi TRUE
[10:26:29.863]  $ socketOptions   : chr "no-delay"
[10:26:29.863]  $ useXDR          : logi FALSE
[10:26:29.863]  $ outfile         : chr "/dev/null"
[10:26:29.863]  $ renice          : int NA
[10:26:29.863]  $ rshcmd          : NULL
[10:26:29.863]  $ user            : chr(0) 
[10:26:29.863]  $ revtunnel       : logi FALSE
[10:26:29.863]  $ rshlogfile      : NULL
[10:26:29.863]  $ rshopts         : chr(0) 
[10:26:29.863]  $ rank            : int 1
[10:26:29.863]  $ manual          : logi FALSE
[10:26:29.863]  $ dryrun          : logi FALSE
[10:26:29.863]  $ quiet           : logi FALSE
[10:26:29.863]  $ setup_strategy  : chr "parallel"
[10:26:29.863]  $ local_cmd       : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[10:26:29.863]  $ pidfile         : chr "/tmp/RtmpmWgxb3/worker.rank=1.parallelly.parent=87801.156f91cbabba3.pid"
[10:26:29.863]  $ rshcmd_label    : NULL
[10:26:29.863]  $ rsh_call        : NULL
[10:26:29.863]  $ cmd             : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[10:26:29.863]  $ localMachine    : logi TRUE
[10:26:29.863]  $ make_fcn        :function (worker = getOption2("parallelly.localhost.hostname", "localhost"), 
[10:26:29.863]     master = NULL, port, connectTimeout = getOption2("parallelly.makeNodePSOCK.connectTimeout", 
[10:26:29.863]         2 * 60), timeout = getOption2("parallelly.makeNodePSOCK.timeout", 
[10:26:29.863]         30 * 24 * 60 * 60), rscript = NULL, homogeneous = NULL, rscript_args = NULL, 
[10:26:29.863]     rscript_envs = NULL, rscript_libs = NULL, rscript_startup = NULL, rscript_sh = c("auto", 
[10:26:29.863]         "cmd", "sh"), default_packages = c("datasets", "utils", "grDevices", 
[10:26:29.863]         "graphics", "stats", if (methods) "methods"), methods = TRUE, socketOptions = getOption2("parallelly.makeNodePSOCK.socketOptions", 
[10:26:29.863]         "no-delay"), useXDR = getOption2("parallelly.makeNodePSOCK.useXDR", 
[10:26:29.863]         FALSE), outfile = "/dev/null", renice = NA_integer_, rshcmd = getOption2("parallelly.makeNodePSOCK.rshcmd", 
[10:26:29.863]         NULL), user = NULL, revtunnel = NA, rshlogfile = NULL, rshopts = getOption2("parallelly.makeNodePSOCK.rshopts", 
[10:26:29.863]         NULL), rank = 1L, manual = FALSE, dryrun = FALSE, quiet = FALSE, 
[10:26:29.863]     setup_strategy = getOption2("parallelly.makeNodePSOCK.setup_strategy", 
[10:26:29.863]         "parallel"), action = c("launch", "options"), verbose = FALSE)  
[10:26:29.863]  $ arguments       :List of 28
[10:26:29.863]   ..$ worker          : chr "localhost"
[10:26:29.863]   ..$ master          : NULL
[10:26:29.863]   ..$ port            : int 11632
[10:26:29.863]   ..$ connectTimeout  : num 120
[10:26:29.863]   ..$ timeout         : num 2592000
[10:26:29.863]   ..$ rscript         : NULL
[10:26:29.863]   ..$ homogeneous     : NULL
[10:26:29.863]   ..$ rscript_args    : NULL
[10:26:29.863]   ..$ rscript_envs    : NULL
[10:26:29.863]   ..$ rscript_libs    : NULL
[10:26:29.863]   ..$ rscript_startup : NULL
[10:26:29.863]   ..$ rscript_sh      : chr [1:3] "auto" "cmd" "sh"
[10:26:29.863]   ..$ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[10:26:29.863]   ..$ methods         : logi TRUE
[10:26:29.863]   ..$ socketOptions   : chr "no-delay"
[10:26:29.863]   ..$ useXDR          : logi FALSE
[10:26:29.863]   ..$ outfile         : chr "/dev/null"
[10:26:29.863]   ..$ renice          : int NA
[10:26:29.863]   ..$ rshcmd          : NULL
[10:26:29.863]   ..$ user            : NULL
[10:26:29.863]   ..$ revtunnel       : logi NA
[10:26:29.863]   ..$ rshlogfile      : NULL
[10:26:29.863]   ..$ rshopts         : NULL
[10:26:29.863]   ..$ rank            : int 1
[10:26:29.863]   ..$ manual          : logi FALSE
[10:26:29.863]   ..$ dryrun          : logi FALSE
[10:26:29.863]   ..$ quiet           : logi FALSE
[10:26:29.863]   ..$ setup_strategy  : chr "parallel"
[10:26:29.863]  - attr(*, "class")= chr [1:2] "makeNodePSOCKOptions" "makeNodeOptions"
[10:26:29.882] [local output] System call to launch all workers:
[10:26:29.882] [local output] '/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/RtmpmWgxb3/worker.rank=1.parallelly.parent=87801.156f91cbabba3.pid")), silent = TRUE)' -e 'options(socketOptions = "no-delay")' -e 'workRSOCK <- tryCatch(parallel:::.workRSOCK, error=function(e) parallel:::.slaveRSOCK); workRSOCK()' MASTER=localhost PORT=11632 OUT=/dev/null TIMEOUT=2592000 XDR=FALSE SETUPTIMEOUT=120 SETUPSTRATEGY=parallel
[10:26:29.882] [local output] Starting PSOCK main server
[10:26:29.883] [local output] Workers launched
[10:26:29.884] [local output] Waiting for workers to connect back
[10:26:29.884]  - [local output] 0 workers out of 2 ready
[10:26:30.125]  - [local output] 0 workers out of 2 ready
[10:26:30.125]  - [local output] 1 workers out of 2 ready
[10:26:30.138]  - [local output] 1 workers out of 2 ready
[10:26:30.138]  - [local output] 2 workers out of 2 ready
[10:26:30.138] [local output] Launching of workers completed
[10:26:30.138] [local output] Collecting session information from workers
[10:26:30.139] [local output]  - Worker #1 of 2
[10:26:30.140] [local output]  - Worker #2 of 2
[10:26:30.140] [local output] makeClusterPSOCK() ... done
> print(workers)
Socket cluster with 2 nodes where 2 nodes are on host ‘localhost’ (R version 4.3.2 (2023-10-31), platform x86_64-pc-linux-gnu)
> plan(cluster, workers = workers)
[10:26:30.144] plan(): Setting new future strategy stack:
[10:26:30.144] List of future strategies:
[10:26:30.144] 1. cluster:
[10:26:30.144]    - args: function (..., workers = "<Socket cluster with 2 nodes where 2 nodes are on host ‘localhost’ (R version 4.3.2 (2023-10-31), platform x86_64-pc-linux-gnu)>", envir = parent.frame())
[10:26:30.144]    - tweaked: TRUE
[10:26:30.144]    - call: plan(cluster, workers = workers)
[10:26:30.146] plan(): plan_init() of ‘tweaked’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ...
[10:26:30.146] cluster:
[10:26:30.146] - args: function (..., workers = "<Socket cluster with 2 nodes where 2 nodes are on host ‘localhost’ (R version 4.3.2 (2023-10-31), platform x86_64-pc-linux-gnu)>", envir = parent.frame())
[10:26:30.146] - tweaked: TRUE
[10:26:30.146] - call: plan(cluster, workers = workers)
[10:26:30.148] getGlobalsAndPackages() ...
[10:26:30.148] Not searching for globals
[10:26:30.148] - globals: [0] <none>
[10:26:30.148] getGlobalsAndPackages() ... DONE
[10:26:30.159] Packages needed by the future expression (n = 0): <none>
[10:26:30.159] Packages needed by future strategies (n = 0): <none>
[10:26:30.160] {
[10:26:30.160]     {
[10:26:30.160]         {
[10:26:30.160]             ...future.startTime <- base::Sys.time()
[10:26:30.160]             {
[10:26:30.160]                 {
[10:26:30.160]                   {
[10:26:30.160]                     base::local({
[10:26:30.160]                       has_future <- base::requireNamespace("future", 
[10:26:30.160]                         quietly = TRUE)
[10:26:30.160]                       if (has_future) {
[10:26:30.160]                         ns <- base::getNamespace("future")
[10:26:30.160]                         version <- ns[[".package"]][["version"]]
[10:26:30.160]                         if (is.null(version)) 
[10:26:30.160]                           version <- utils::packageVersion("future")
[10:26:30.160]                       }
[10:26:30.160]                       else {
[10:26:30.160]                         version <- NULL
[10:26:30.160]                       }
[10:26:30.160]                       if (!has_future || version < "1.8.0") {
[10:26:30.160]                         info <- base::c(r_version = base::gsub("R version ", 
[10:26:30.160]                           "", base::R.version$version.string), 
[10:26:30.160]                           platform = base::sprintf("%s (%s-bit)", 
[10:26:30.160]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:26:30.160]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[10:26:30.160]                             "release", "version")], collapse = " "), 
[10:26:30.160]                           hostname = base::Sys.info()[["nodename"]])
[10:26:30.160]                         info <- base::sprintf("%s: %s", base::names(info), 
[10:26:30.160]                           info)
[10:26:30.160]                         info <- base::paste(info, collapse = "; ")
[10:26:30.160]                         if (!has_future) {
[10:26:30.160]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:26:30.160]                             info)
[10:26:30.160]                         }
[10:26:30.160]                         else {
[10:26:30.160]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:26:30.160]                             info, version)
[10:26:30.160]                         }
[10:26:30.160]                         base::stop(msg)
[10:26:30.160]                       }
[10:26:30.160]                     })
[10:26:30.160]                   }
[10:26:30.160]                   options(future.plan = NULL)
[10:26:30.160]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:26:30.160]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:26:30.160]                 }
[10:26:30.160]                 ...future.workdir <- getwd()
[10:26:30.160]             }
[10:26:30.160]             ...future.oldOptions <- base::as.list(base::.Options)
[10:26:30.160]             ...future.oldEnvVars <- base::Sys.getenv()
[10:26:30.160]         }
[10:26:30.160]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:26:30.160]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[10:26:30.160]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:26:30.160]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:26:30.160]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:26:30.160]             future.stdout.windows.reencode = NULL, width = 80L)
[10:26:30.160]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:26:30.160]             base::names(...future.oldOptions))
[10:26:30.160]     }
[10:26:30.160]     if (FALSE) {
[10:26:30.160]     }
[10:26:30.160]     else {
[10:26:30.160]         if (TRUE) {
[10:26:30.160]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:26:30.160]                 open = "w")
[10:26:30.160]         }
[10:26:30.160]         else {
[10:26:30.160]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:26:30.160]                 windows = "NUL", "/dev/null"), open = "w")
[10:26:30.160]         }
[10:26:30.160]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:26:30.160]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:26:30.160]             base::sink(type = "output", split = FALSE)
[10:26:30.160]             base::close(...future.stdout)
[10:26:30.160]         }, add = TRUE)
[10:26:30.160]     }
[10:26:30.160]     ...future.frame <- base::sys.nframe()
[10:26:30.160]     ...future.conditions <- base::list()
[10:26:30.160]     ...future.rng <- base::globalenv()$.Random.seed
[10:26:30.160]     if (FALSE) {
[10:26:30.160]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:26:30.160]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:26:30.160]     }
[10:26:30.160]     ...future.result <- base::tryCatch({
[10:26:30.160]         base::withCallingHandlers({
[10:26:30.160]             ...future.value <- base::withVisible(base::local({
[10:26:30.160]                 ...future.makeSendCondition <- base::local({
[10:26:30.160]                   sendCondition <- NULL
[10:26:30.160]                   function(frame = 1L) {
[10:26:30.160]                     if (is.function(sendCondition)) 
[10:26:30.160]                       return(sendCondition)
[10:26:30.160]                     ns <- getNamespace("parallel")
[10:26:30.160]                     if (exists("sendData", mode = "function", 
[10:26:30.160]                       envir = ns)) {
[10:26:30.160]                       parallel_sendData <- get("sendData", mode = "function", 
[10:26:30.160]                         envir = ns)
[10:26:30.160]                       envir <- sys.frame(frame)
[10:26:30.160]                       master <- NULL
[10:26:30.160]                       while (!identical(envir, .GlobalEnv) && 
[10:26:30.160]                         !identical(envir, emptyenv())) {
[10:26:30.160]                         if (exists("master", mode = "list", envir = envir, 
[10:26:30.160]                           inherits = FALSE)) {
[10:26:30.160]                           master <- get("master", mode = "list", 
[10:26:30.160]                             envir = envir, inherits = FALSE)
[10:26:30.160]                           if (inherits(master, c("SOCKnode", 
[10:26:30.160]                             "SOCK0node"))) {
[10:26:30.160]                             sendCondition <<- function(cond) {
[10:26:30.160]                               data <- list(type = "VALUE", value = cond, 
[10:26:30.160]                                 success = TRUE)
[10:26:30.160]                               parallel_sendData(master, data)
[10:26:30.160]                             }
[10:26:30.160]                             return(sendCondition)
[10:26:30.160]                           }
[10:26:30.160]                         }
[10:26:30.160]                         frame <- frame + 1L
[10:26:30.160]                         envir <- sys.frame(frame)
[10:26:30.160]                       }
[10:26:30.160]                     }
[10:26:30.160]                     sendCondition <<- function(cond) NULL
[10:26:30.160]                   }
[10:26:30.160]                 })
[10:26:30.160]                 withCallingHandlers({
[10:26:30.160]                   NA
[10:26:30.160]                 }, immediateCondition = function(cond) {
[10:26:30.160]                   sendCondition <- ...future.makeSendCondition()
[10:26:30.160]                   sendCondition(cond)
[10:26:30.160]                   muffleCondition <- function (cond, pattern = "^muffle") 
[10:26:30.160]                   {
[10:26:30.160]                     inherits <- base::inherits
[10:26:30.160]                     invokeRestart <- base::invokeRestart
[10:26:30.160]                     is.null <- base::is.null
[10:26:30.160]                     muffled <- FALSE
[10:26:30.160]                     if (inherits(cond, "message")) {
[10:26:30.160]                       muffled <- grepl(pattern, "muffleMessage")
[10:26:30.160]                       if (muffled) 
[10:26:30.160]                         invokeRestart("muffleMessage")
[10:26:30.160]                     }
[10:26:30.160]                     else if (inherits(cond, "warning")) {
[10:26:30.160]                       muffled <- grepl(pattern, "muffleWarning")
[10:26:30.160]                       if (muffled) 
[10:26:30.160]                         invokeRestart("muffleWarning")
[10:26:30.160]                     }
[10:26:30.160]                     else if (inherits(cond, "condition")) {
[10:26:30.160]                       if (!is.null(pattern)) {
[10:26:30.160]                         computeRestarts <- base::computeRestarts
[10:26:30.160]                         grepl <- base::grepl
[10:26:30.160]                         restarts <- computeRestarts(cond)
[10:26:30.160]                         for (restart in restarts) {
[10:26:30.160]                           name <- restart$name
[10:26:30.160]                           if (is.null(name)) 
[10:26:30.160]                             next
[10:26:30.160]                           if (!grepl(pattern, name)) 
[10:26:30.160]                             next
[10:26:30.160]                           invokeRestart(restart)
[10:26:30.160]                           muffled <- TRUE
[10:26:30.160]                           break
[10:26:30.160]                         }
[10:26:30.160]                       }
[10:26:30.160]                     }
[10:26:30.160]                     invisible(muffled)
[10:26:30.160]                   }
[10:26:30.160]                   muffleCondition(cond)
[10:26:30.160]                 })
[10:26:30.160]             }))
[10:26:30.160]             future::FutureResult(value = ...future.value$value, 
[10:26:30.160]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:26:30.160]                   ...future.rng), globalenv = if (FALSE) 
[10:26:30.160]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:26:30.160]                     ...future.globalenv.names))
[10:26:30.160]                 else NULL, started = ...future.startTime, version = "1.8")
[10:26:30.160]         }, condition = base::local({
[10:26:30.160]             c <- base::c
[10:26:30.160]             inherits <- base::inherits
[10:26:30.160]             invokeRestart <- base::invokeRestart
[10:26:30.160]             length <- base::length
[10:26:30.160]             list <- base::list
[10:26:30.160]             seq.int <- base::seq.int
[10:26:30.160]             signalCondition <- base::signalCondition
[10:26:30.160]             sys.calls <- base::sys.calls
[10:26:30.160]             `[[` <- base::`[[`
[10:26:30.160]             `+` <- base::`+`
[10:26:30.160]             `<<-` <- base::`<<-`
[10:26:30.160]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:26:30.160]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:26:30.160]                   3L)]
[10:26:30.160]             }
[10:26:30.160]             function(cond) {
[10:26:30.160]                 is_error <- inherits(cond, "error")
[10:26:30.160]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:26:30.160]                   NULL)
[10:26:30.160]                 if (is_error) {
[10:26:30.160]                   sessionInformation <- function() {
[10:26:30.160]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:26:30.160]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:26:30.160]                       search = base::search(), system = base::Sys.info())
[10:26:30.160]                   }
[10:26:30.160]                   ...future.conditions[[length(...future.conditions) + 
[10:26:30.160]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:26:30.160]                     cond$call), session = sessionInformation(), 
[10:26:30.160]                     timestamp = base::Sys.time(), signaled = 0L)
[10:26:30.160]                   signalCondition(cond)
[10:26:30.160]                 }
[10:26:30.160]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:26:30.160]                 "immediateCondition"))) {
[10:26:30.160]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:26:30.160]                   ...future.conditions[[length(...future.conditions) + 
[10:26:30.160]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:26:30.160]                   if (TRUE && !signal) {
[10:26:30.160]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:26:30.160]                     {
[10:26:30.160]                       inherits <- base::inherits
[10:26:30.160]                       invokeRestart <- base::invokeRestart
[10:26:30.160]                       is.null <- base::is.null
[10:26:30.160]                       muffled <- FALSE
[10:26:30.160]                       if (inherits(cond, "message")) {
[10:26:30.160]                         muffled <- grepl(pattern, "muffleMessage")
[10:26:30.160]                         if (muffled) 
[10:26:30.160]                           invokeRestart("muffleMessage")
[10:26:30.160]                       }
[10:26:30.160]                       else if (inherits(cond, "warning")) {
[10:26:30.160]                         muffled <- grepl(pattern, "muffleWarning")
[10:26:30.160]                         if (muffled) 
[10:26:30.160]                           invokeRestart("muffleWarning")
[10:26:30.160]                       }
[10:26:30.160]                       else if (inherits(cond, "condition")) {
[10:26:30.160]                         if (!is.null(pattern)) {
[10:26:30.160]                           computeRestarts <- base::computeRestarts
[10:26:30.160]                           grepl <- base::grepl
[10:26:30.160]                           restarts <- computeRestarts(cond)
[10:26:30.160]                           for (restart in restarts) {
[10:26:30.160]                             name <- restart$name
[10:26:30.160]                             if (is.null(name)) 
[10:26:30.160]                               next
[10:26:30.160]                             if (!grepl(pattern, name)) 
[10:26:30.160]                               next
[10:26:30.160]                             invokeRestart(restart)
[10:26:30.160]                             muffled <- TRUE
[10:26:30.160]                             break
[10:26:30.160]                           }
[10:26:30.160]                         }
[10:26:30.160]                       }
[10:26:30.160]                       invisible(muffled)
[10:26:30.160]                     }
[10:26:30.160]                     muffleCondition(cond, pattern = "^muffle")
[10:26:30.160]                   }
[10:26:30.160]                 }
[10:26:30.160]                 else {
[10:26:30.160]                   if (TRUE) {
[10:26:30.160]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:26:30.160]                     {
[10:26:30.160]                       inherits <- base::inherits
[10:26:30.160]                       invokeRestart <- base::invokeRestart
[10:26:30.160]                       is.null <- base::is.null
[10:26:30.160]                       muffled <- FALSE
[10:26:30.160]                       if (inherits(cond, "message")) {
[10:26:30.160]                         muffled <- grepl(pattern, "muffleMessage")
[10:26:30.160]                         if (muffled) 
[10:26:30.160]                           invokeRestart("muffleMessage")
[10:26:30.160]                       }
[10:26:30.160]                       else if (inherits(cond, "warning")) {
[10:26:30.160]                         muffled <- grepl(pattern, "muffleWarning")
[10:26:30.160]                         if (muffled) 
[10:26:30.160]                           invokeRestart("muffleWarning")
[10:26:30.160]                       }
[10:26:30.160]                       else if (inherits(cond, "condition")) {
[10:26:30.160]                         if (!is.null(pattern)) {
[10:26:30.160]                           computeRestarts <- base::computeRestarts
[10:26:30.160]                           grepl <- base::grepl
[10:26:30.160]                           restarts <- computeRestarts(cond)
[10:26:30.160]                           for (restart in restarts) {
[10:26:30.160]                             name <- restart$name
[10:26:30.160]                             if (is.null(name)) 
[10:26:30.160]                               next
[10:26:30.160]                             if (!grepl(pattern, name)) 
[10:26:30.160]                               next
[10:26:30.160]                             invokeRestart(restart)
[10:26:30.160]                             muffled <- TRUE
[10:26:30.160]                             break
[10:26:30.160]                           }
[10:26:30.160]                         }
[10:26:30.160]                       }
[10:26:30.160]                       invisible(muffled)
[10:26:30.160]                     }
[10:26:30.160]                     muffleCondition(cond, pattern = "^muffle")
[10:26:30.160]                   }
[10:26:30.160]                 }
[10:26:30.160]             }
[10:26:30.160]         }))
[10:26:30.160]     }, error = function(ex) {
[10:26:30.160]         base::structure(base::list(value = NULL, visible = NULL, 
[10:26:30.160]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:26:30.160]                 ...future.rng), started = ...future.startTime, 
[10:26:30.160]             finished = Sys.time(), session_uuid = NA_character_, 
[10:26:30.160]             version = "1.8"), class = "FutureResult")
[10:26:30.160]     }, finally = {
[10:26:30.160]         if (!identical(...future.workdir, getwd())) 
[10:26:30.160]             setwd(...future.workdir)
[10:26:30.160]         {
[10:26:30.160]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:26:30.160]                 ...future.oldOptions$nwarnings <- NULL
[10:26:30.160]             }
[10:26:30.160]             base::options(...future.oldOptions)
[10:26:30.160]             if (.Platform$OS.type == "windows") {
[10:26:30.160]                 old_names <- names(...future.oldEnvVars)
[10:26:30.160]                 envs <- base::Sys.getenv()
[10:26:30.160]                 names <- names(envs)
[10:26:30.160]                 common <- intersect(names, old_names)
[10:26:30.160]                 added <- setdiff(names, old_names)
[10:26:30.160]                 removed <- setdiff(old_names, names)
[10:26:30.160]                 changed <- common[...future.oldEnvVars[common] != 
[10:26:30.160]                   envs[common]]
[10:26:30.160]                 NAMES <- toupper(changed)
[10:26:30.160]                 args <- list()
[10:26:30.160]                 for (kk in seq_along(NAMES)) {
[10:26:30.160]                   name <- changed[[kk]]
[10:26:30.160]                   NAME <- NAMES[[kk]]
[10:26:30.160]                   if (name != NAME && is.element(NAME, old_names)) 
[10:26:30.160]                     next
[10:26:30.160]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:26:30.160]                 }
[10:26:30.160]                 NAMES <- toupper(added)
[10:26:30.160]                 for (kk in seq_along(NAMES)) {
[10:26:30.160]                   name <- added[[kk]]
[10:26:30.160]                   NAME <- NAMES[[kk]]
[10:26:30.160]                   if (name != NAME && is.element(NAME, old_names)) 
[10:26:30.160]                     next
[10:26:30.160]                   args[[name]] <- ""
[10:26:30.160]                 }
[10:26:30.160]                 NAMES <- toupper(removed)
[10:26:30.160]                 for (kk in seq_along(NAMES)) {
[10:26:30.160]                   name <- removed[[kk]]
[10:26:30.160]                   NAME <- NAMES[[kk]]
[10:26:30.160]                   if (name != NAME && is.element(NAME, old_names)) 
[10:26:30.160]                     next
[10:26:30.160]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:26:30.160]                 }
[10:26:30.160]                 if (length(args) > 0) 
[10:26:30.160]                   base::do.call(base::Sys.setenv, args = args)
[10:26:30.160]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:26:30.160]             }
[10:26:30.160]             else {
[10:26:30.160]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:26:30.160]             }
[10:26:30.160]             {
[10:26:30.160]                 if (base::length(...future.futureOptionsAdded) > 
[10:26:30.160]                   0L) {
[10:26:30.160]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:26:30.160]                   base::names(opts) <- ...future.futureOptionsAdded
[10:26:30.160]                   base::options(opts)
[10:26:30.160]                 }
[10:26:30.160]                 {
[10:26:30.160]                   NULL
[10:26:30.160]                   options(future.plan = NULL)
[10:26:30.160]                   if (is.na(NA_character_)) 
[10:26:30.160]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:26:30.160]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:26:30.160]                   future::plan(list(function (..., workers = list(
[10:26:30.160]                     list(con = 5L, host = "localhost", rank = 0L, 
[10:26:30.160]                       session_info = list(r = list(platform = "x86_64-pc-linux-gnu", 
[10:26:30.160]                         arch = "x86_64", os = "linux-gnu", system = "x86_64, linux-gnu", 
[10:26:30.160]                         status = "", major = "4", minor = "3.2", 
[10:26:30.160]                         year = "2023", month = "10", day = "31", 
[10:26:30.160]                         `svn rev` = "85441", language = "R", 
[10:26:30.160]                         version.string = "R version 4.3.2 (2023-10-31)", 
[10:26:30.160]                         nickname = "Eye Holes", os.type = "unix"), 
[10:26:30.160]                         system = list(sysname = "Linux", release = "6.5.0-1025-azure", 
[10:26:30.160]                           version = "#26~22.04.1-Ubuntu SMP Thu Jul 11 22:33:04 UTC 2024", 
[10:26:30.160]                           nodename = "3e863ac79bce", machine = "x86_64", 
[10:26:30.160]                           login = "unknown", user = "root", effective_user = "root"), 
[10:26:30.160]                         libs = c("/usr/local/lib/R/site-library", 
[10:26:30.160]                         "/usr/local/lib/R/library"), pkgs = NULL, 
[10:26:30.160]                         pwd = "/__w/rocker_uat/rocker_uat/packages/future/future-tests", 
[10:26:30.160]                         process = list(pid = 88119L))), list(
[10:26:30.160]                       con = 6L, host = "localhost", rank = 1L, 
[10:26:30.160]                       session_info = list(r = list(platform = "x86_64-pc-linux-gnu", 
[10:26:30.160]                         arch = "x86_64", os = "linux-gnu", system = "x86_64, linux-gnu", 
[10:26:30.160]                         status = "", major = "4", minor = "3.2", 
[10:26:30.160]                         year = "2023", month = "10", day = "31", 
[10:26:30.160]                         `svn rev` = "85441", language = "R", 
[10:26:30.160]                         version.string = "R version 4.3.2 (2023-10-31)", 
[10:26:30.160]                         nickname = "Eye Holes", os.type = "unix"), 
[10:26:30.160]                         system = list(sysname = "Linux", release = "6.5.0-1025-azure", 
[10:26:30.160]                           version = "#26~22.04.1-Ubuntu SMP Thu Jul 11 22:33:04 UTC 2024", 
[10:26:30.160]                           nodename = "3e863ac79bce", machine = "x86_64", 
[10:26:30.160]                           login = "unknown", user = "root", effective_user = "root"), 
[10:26:30.160]                         libs = c("/usr/local/lib/R/site-library", 
[10:26:30.160]                         "/usr/local/lib/R/library"), pkgs = NULL, 
[10:26:30.160]                         pwd = "/__w/rocker_uat/rocker_uat/packages/future/future-tests", 
[10:26:30.160]                         process = list(pid = 88118L)))), envir = parent.frame()) 
[10:26:30.160]                   strategy(..., workers = workers, envir = envir)), 
[10:26:30.160]                     .cleanup = FALSE, .init = FALSE)
[10:26:30.160]                 }
[10:26:30.160]             }
[10:26:30.160]         }
[10:26:30.160]     })
[10:26:30.160]     if (TRUE) {
[10:26:30.160]         base::sink(type = "output", split = FALSE)
[10:26:30.160]         if (TRUE) {
[10:26:30.160]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:26:30.160]         }
[10:26:30.160]         else {
[10:26:30.160]             ...future.result["stdout"] <- base::list(NULL)
[10:26:30.160]         }
[10:26:30.160]         base::close(...future.stdout)
[10:26:30.160]         ...future.stdout <- NULL
[10:26:30.160]     }
[10:26:30.160]     ...future.result$conditions <- ...future.conditions
[10:26:30.160]     ...future.result$finished <- base::Sys.time()
[10:26:30.160]     ...future.result
[10:26:30.160] }
[10:26:30.224] ClusterFuture started
[10:26:30.224] result() for ClusterFuture ...
[10:26:30.225] receiveMessageFromWorker() for ClusterFuture ...
[10:26:30.225] - Validating connection of ClusterFuture
[10:26:30.304] - received message: FutureResult
[10:26:30.304] - Received FutureResult
[10:26:30.304] - Erased future from FutureRegistry
[10:26:30.304] result() for ClusterFuture ...
[10:26:30.304] - result already collected: FutureResult
[10:26:30.304] result() for ClusterFuture ... done
[10:26:30.305] receiveMessageFromWorker() for ClusterFuture ... done
[10:26:30.305] result() for ClusterFuture ... done
[10:26:30.305] result() for ClusterFuture ...
[10:26:30.305] - result already collected: FutureResult
[10:26:30.305] result() for ClusterFuture ... done
[10:26:30.305] plan(): plan_init() of ‘tweaked’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ... DONE
[10:26:30.305] plan(): nbrOfWorkers() = 2
> n <- nbrOfWorkers()
> message(sprintf("nbrOfWorkers: %g", n))
nbrOfWorkers: 2
> stopifnot(n == length(workers))
> parallel::stopCluster(workers)
> 
> message("*** nbrOfWorkers() ... DONE")
*** nbrOfWorkers() ... DONE
> 
> source("incl/end.R")
[10:26:30.307] plan(): Setting new future strategy stack:
[10:26:30.307] List of future strategies:
[10:26:30.307] 1. FutureStrategy:
[10:26:30.307]    - args: function (..., envir = parent.frame())
[10:26:30.307]    - tweaked: FALSE
[10:26:30.307]    - call: future::plan(oplan)
[10:26:30.308] plan(): nbrOfWorkers() = 1
> 
