
R version 4.3.2 (2023-10-31) -- "Eye Holes"
Copyright (C) 2023 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> source("incl/start.R")
[16:06:41.195] plan(): Setting new future strategy stack:
[16:06:41.195] List of future strategies:
[16:06:41.195] 1. sequential:
[16:06:41.195]    - args: function (..., envir = parent.frame())
[16:06:41.195]    - tweaked: FALSE
[16:06:41.195]    - call: future::plan("sequential")
[16:06:41.209] plan(): nbrOfWorkers() = 1
> 
> message("*** sequential() ...")
*** sequential() ...
> 
> message("- sequential() w/ required packages ...")
- sequential() w/ required packages ...
> 
> f <- future(median(1:3), lazy = TRUE)
[16:06:41.220] getGlobalsAndPackages() ...
[16:06:41.220] Searching for globals...
[16:06:41.224] - globals found: [2] ‘median’, ‘:’
[16:06:41.225] Searching for globals ... DONE
[16:06:41.225] Resolving globals: FALSE
[16:06:41.225] 
[16:06:41.225] - packages: [1] ‘stats’
[16:06:41.225] getGlobalsAndPackages() ... DONE
> print(f)
Future:
Label: ‘<none>’
Expression:
median(1:3)
Lazy evaluation: TRUE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: 1 packages (‘stats’)
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: FALSE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: 8c4e33f3-c558-f5c0-3d61-3a74933396a8
Class: ‘Future’, ‘environment’
> 
> ## Doesn't work if covr that depends on stats is loaded
> try(unloadNamespace("stats"))
> 
> v <- value(f)
[16:06:41.228] run() for ‘Future’ ...
[16:06:41.229] - state: ‘created’
[16:06:41.229] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[16:06:41.229] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[16:06:41.229] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[16:06:41.229]   - Field: ‘label’
[16:06:41.229]   - Field: ‘local’
[16:06:41.230]   - Field: ‘owner’
[16:06:41.230]   - Field: ‘envir’
[16:06:41.230]   - Field: ‘packages’
[16:06:41.230]   - Field: ‘gc’
[16:06:41.230]   - Field: ‘conditions’
[16:06:41.230]   - Field: ‘expr’
[16:06:41.230]   - Field: ‘uuid’
[16:06:41.230]   - Field: ‘seed’
[16:06:41.230]   - Field: ‘version’
[16:06:41.230]   - Field: ‘result’
[16:06:41.230]   - Field: ‘asynchronous’
[16:06:41.231]   - Field: ‘calls’
[16:06:41.231]   - Field: ‘globals’
[16:06:41.231]   - Field: ‘stdout’
[16:06:41.231]   - Field: ‘earlySignal’
[16:06:41.231]   - Field: ‘lazy’
[16:06:41.231]   - Field: ‘state’
[16:06:41.231] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[16:06:41.231] - Launch lazy future ...
[16:06:41.232] Packages needed by the future expression (n = 1): ‘stats’
[16:06:41.232] Packages needed by future strategies (n = 0): <none>
[16:06:41.276] {
[16:06:41.276]     {
[16:06:41.276]         {
[16:06:41.276]             ...future.startTime <- base::Sys.time()
[16:06:41.276]             {
[16:06:41.276]                 {
[16:06:41.276]                   {
[16:06:41.276]                     {
[16:06:41.276]                       base::local({
[16:06:41.276]                         has_future <- base::requireNamespace("future", 
[16:06:41.276]                           quietly = TRUE)
[16:06:41.276]                         if (has_future) {
[16:06:41.276]                           ns <- base::getNamespace("future")
[16:06:41.276]                           version <- ns[[".package"]][["version"]]
[16:06:41.276]                           if (is.null(version)) 
[16:06:41.276]                             version <- utils::packageVersion("future")
[16:06:41.276]                         }
[16:06:41.276]                         else {
[16:06:41.276]                           version <- NULL
[16:06:41.276]                         }
[16:06:41.276]                         if (!has_future || version < "1.8.0") {
[16:06:41.276]                           info <- base::c(r_version = base::gsub("R version ", 
[16:06:41.276]                             "", base::R.version$version.string), 
[16:06:41.276]                             platform = base::sprintf("%s (%s-bit)", 
[16:06:41.276]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:06:41.276]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[16:06:41.276]                               "release", "version")], collapse = " "), 
[16:06:41.276]                             hostname = base::Sys.info()[["nodename"]])
[16:06:41.276]                           info <- base::sprintf("%s: %s", base::names(info), 
[16:06:41.276]                             info)
[16:06:41.276]                           info <- base::paste(info, collapse = "; ")
[16:06:41.276]                           if (!has_future) {
[16:06:41.276]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:06:41.276]                               info)
[16:06:41.276]                           }
[16:06:41.276]                           else {
[16:06:41.276]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:06:41.276]                               info, version)
[16:06:41.276]                           }
[16:06:41.276]                           base::stop(msg)
[16:06:41.276]                         }
[16:06:41.276]                       })
[16:06:41.276]                     }
[16:06:41.276]                     base::local({
[16:06:41.276]                       for (pkg in "stats") {
[16:06:41.276]                         base::loadNamespace(pkg)
[16:06:41.276]                         base::library(pkg, character.only = TRUE)
[16:06:41.276]                       }
[16:06:41.276]                     })
[16:06:41.276]                   }
[16:06:41.276]                   options(future.plan = NULL)
[16:06:41.276]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:06:41.276]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:06:41.276]                 }
[16:06:41.276]                 ...future.workdir <- getwd()
[16:06:41.276]             }
[16:06:41.276]             ...future.oldOptions <- base::as.list(base::.Options)
[16:06:41.276]             ...future.oldEnvVars <- base::Sys.getenv()
[16:06:41.276]         }
[16:06:41.276]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:06:41.276]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:06:41.276]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:06:41.276]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:06:41.276]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:06:41.276]             future.stdout.windows.reencode = NULL, width = 80L)
[16:06:41.276]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:06:41.276]             base::names(...future.oldOptions))
[16:06:41.276]     }
[16:06:41.276]     if (FALSE) {
[16:06:41.276]     }
[16:06:41.276]     else {
[16:06:41.276]         if (TRUE) {
[16:06:41.276]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:06:41.276]                 open = "w")
[16:06:41.276]         }
[16:06:41.276]         else {
[16:06:41.276]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:06:41.276]                 windows = "NUL", "/dev/null"), open = "w")
[16:06:41.276]         }
[16:06:41.276]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:06:41.276]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:06:41.276]             base::sink(type = "output", split = FALSE)
[16:06:41.276]             base::close(...future.stdout)
[16:06:41.276]         }, add = TRUE)
[16:06:41.276]     }
[16:06:41.276]     ...future.frame <- base::sys.nframe()
[16:06:41.276]     ...future.conditions <- base::list()
[16:06:41.276]     ...future.rng <- base::globalenv()$.Random.seed
[16:06:41.276]     if (FALSE) {
[16:06:41.276]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:06:41.276]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:06:41.276]     }
[16:06:41.276]     ...future.result <- base::tryCatch({
[16:06:41.276]         base::withCallingHandlers({
[16:06:41.276]             ...future.value <- base::withVisible(base::local(median(1:3)))
[16:06:41.276]             future::FutureResult(value = ...future.value$value, 
[16:06:41.276]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:06:41.276]                   ...future.rng), globalenv = if (FALSE) 
[16:06:41.276]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:06:41.276]                     ...future.globalenv.names))
[16:06:41.276]                 else NULL, started = ...future.startTime, version = "1.8")
[16:06:41.276]         }, condition = base::local({
[16:06:41.276]             c <- base::c
[16:06:41.276]             inherits <- base::inherits
[16:06:41.276]             invokeRestart <- base::invokeRestart
[16:06:41.276]             length <- base::length
[16:06:41.276]             list <- base::list
[16:06:41.276]             seq.int <- base::seq.int
[16:06:41.276]             signalCondition <- base::signalCondition
[16:06:41.276]             sys.calls <- base::sys.calls
[16:06:41.276]             `[[` <- base::`[[`
[16:06:41.276]             `+` <- base::`+`
[16:06:41.276]             `<<-` <- base::`<<-`
[16:06:41.276]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:06:41.276]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:06:41.276]                   3L)]
[16:06:41.276]             }
[16:06:41.276]             function(cond) {
[16:06:41.276]                 is_error <- inherits(cond, "error")
[16:06:41.276]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:06:41.276]                   NULL)
[16:06:41.276]                 if (is_error) {
[16:06:41.276]                   sessionInformation <- function() {
[16:06:41.276]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:06:41.276]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:06:41.276]                       search = base::search(), system = base::Sys.info())
[16:06:41.276]                   }
[16:06:41.276]                   ...future.conditions[[length(...future.conditions) + 
[16:06:41.276]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:06:41.276]                     cond$call), session = sessionInformation(), 
[16:06:41.276]                     timestamp = base::Sys.time(), signaled = 0L)
[16:06:41.276]                   signalCondition(cond)
[16:06:41.276]                 }
[16:06:41.276]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:06:41.276]                 "immediateCondition"))) {
[16:06:41.276]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:06:41.276]                   ...future.conditions[[length(...future.conditions) + 
[16:06:41.276]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:06:41.276]                   if (TRUE && !signal) {
[16:06:41.276]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:06:41.276]                     {
[16:06:41.276]                       inherits <- base::inherits
[16:06:41.276]                       invokeRestart <- base::invokeRestart
[16:06:41.276]                       is.null <- base::is.null
[16:06:41.276]                       muffled <- FALSE
[16:06:41.276]                       if (inherits(cond, "message")) {
[16:06:41.276]                         muffled <- grepl(pattern, "muffleMessage")
[16:06:41.276]                         if (muffled) 
[16:06:41.276]                           invokeRestart("muffleMessage")
[16:06:41.276]                       }
[16:06:41.276]                       else if (inherits(cond, "warning")) {
[16:06:41.276]                         muffled <- grepl(pattern, "muffleWarning")
[16:06:41.276]                         if (muffled) 
[16:06:41.276]                           invokeRestart("muffleWarning")
[16:06:41.276]                       }
[16:06:41.276]                       else if (inherits(cond, "condition")) {
[16:06:41.276]                         if (!is.null(pattern)) {
[16:06:41.276]                           computeRestarts <- base::computeRestarts
[16:06:41.276]                           grepl <- base::grepl
[16:06:41.276]                           restarts <- computeRestarts(cond)
[16:06:41.276]                           for (restart in restarts) {
[16:06:41.276]                             name <- restart$name
[16:06:41.276]                             if (is.null(name)) 
[16:06:41.276]                               next
[16:06:41.276]                             if (!grepl(pattern, name)) 
[16:06:41.276]                               next
[16:06:41.276]                             invokeRestart(restart)
[16:06:41.276]                             muffled <- TRUE
[16:06:41.276]                             break
[16:06:41.276]                           }
[16:06:41.276]                         }
[16:06:41.276]                       }
[16:06:41.276]                       invisible(muffled)
[16:06:41.276]                     }
[16:06:41.276]                     muffleCondition(cond, pattern = "^muffle")
[16:06:41.276]                   }
[16:06:41.276]                 }
[16:06:41.276]                 else {
[16:06:41.276]                   if (TRUE) {
[16:06:41.276]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:06:41.276]                     {
[16:06:41.276]                       inherits <- base::inherits
[16:06:41.276]                       invokeRestart <- base::invokeRestart
[16:06:41.276]                       is.null <- base::is.null
[16:06:41.276]                       muffled <- FALSE
[16:06:41.276]                       if (inherits(cond, "message")) {
[16:06:41.276]                         muffled <- grepl(pattern, "muffleMessage")
[16:06:41.276]                         if (muffled) 
[16:06:41.276]                           invokeRestart("muffleMessage")
[16:06:41.276]                       }
[16:06:41.276]                       else if (inherits(cond, "warning")) {
[16:06:41.276]                         muffled <- grepl(pattern, "muffleWarning")
[16:06:41.276]                         if (muffled) 
[16:06:41.276]                           invokeRestart("muffleWarning")
[16:06:41.276]                       }
[16:06:41.276]                       else if (inherits(cond, "condition")) {
[16:06:41.276]                         if (!is.null(pattern)) {
[16:06:41.276]                           computeRestarts <- base::computeRestarts
[16:06:41.276]                           grepl <- base::grepl
[16:06:41.276]                           restarts <- computeRestarts(cond)
[16:06:41.276]                           for (restart in restarts) {
[16:06:41.276]                             name <- restart$name
[16:06:41.276]                             if (is.null(name)) 
[16:06:41.276]                               next
[16:06:41.276]                             if (!grepl(pattern, name)) 
[16:06:41.276]                               next
[16:06:41.276]                             invokeRestart(restart)
[16:06:41.276]                             muffled <- TRUE
[16:06:41.276]                             break
[16:06:41.276]                           }
[16:06:41.276]                         }
[16:06:41.276]                       }
[16:06:41.276]                       invisible(muffled)
[16:06:41.276]                     }
[16:06:41.276]                     muffleCondition(cond, pattern = "^muffle")
[16:06:41.276]                   }
[16:06:41.276]                 }
[16:06:41.276]             }
[16:06:41.276]         }))
[16:06:41.276]     }, error = function(ex) {
[16:06:41.276]         base::structure(base::list(value = NULL, visible = NULL, 
[16:06:41.276]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:06:41.276]                 ...future.rng), started = ...future.startTime, 
[16:06:41.276]             finished = Sys.time(), session_uuid = NA_character_, 
[16:06:41.276]             version = "1.8"), class = "FutureResult")
[16:06:41.276]     }, finally = {
[16:06:41.276]         if (!identical(...future.workdir, getwd())) 
[16:06:41.276]             setwd(...future.workdir)
[16:06:41.276]         {
[16:06:41.276]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:06:41.276]                 ...future.oldOptions$nwarnings <- NULL
[16:06:41.276]             }
[16:06:41.276]             base::options(...future.oldOptions)
[16:06:41.276]             if (.Platform$OS.type == "windows") {
[16:06:41.276]                 old_names <- names(...future.oldEnvVars)
[16:06:41.276]                 envs <- base::Sys.getenv()
[16:06:41.276]                 names <- names(envs)
[16:06:41.276]                 common <- intersect(names, old_names)
[16:06:41.276]                 added <- setdiff(names, old_names)
[16:06:41.276]                 removed <- setdiff(old_names, names)
[16:06:41.276]                 changed <- common[...future.oldEnvVars[common] != 
[16:06:41.276]                   envs[common]]
[16:06:41.276]                 NAMES <- toupper(changed)
[16:06:41.276]                 args <- list()
[16:06:41.276]                 for (kk in seq_along(NAMES)) {
[16:06:41.276]                   name <- changed[[kk]]
[16:06:41.276]                   NAME <- NAMES[[kk]]
[16:06:41.276]                   if (name != NAME && is.element(NAME, old_names)) 
[16:06:41.276]                     next
[16:06:41.276]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:06:41.276]                 }
[16:06:41.276]                 NAMES <- toupper(added)
[16:06:41.276]                 for (kk in seq_along(NAMES)) {
[16:06:41.276]                   name <- added[[kk]]
[16:06:41.276]                   NAME <- NAMES[[kk]]
[16:06:41.276]                   if (name != NAME && is.element(NAME, old_names)) 
[16:06:41.276]                     next
[16:06:41.276]                   args[[name]] <- ""
[16:06:41.276]                 }
[16:06:41.276]                 NAMES <- toupper(removed)
[16:06:41.276]                 for (kk in seq_along(NAMES)) {
[16:06:41.276]                   name <- removed[[kk]]
[16:06:41.276]                   NAME <- NAMES[[kk]]
[16:06:41.276]                   if (name != NAME && is.element(NAME, old_names)) 
[16:06:41.276]                     next
[16:06:41.276]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:06:41.276]                 }
[16:06:41.276]                 if (length(args) > 0) 
[16:06:41.276]                   base::do.call(base::Sys.setenv, args = args)
[16:06:41.276]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:06:41.276]             }
[16:06:41.276]             else {
[16:06:41.276]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:06:41.276]             }
[16:06:41.276]             {
[16:06:41.276]                 if (base::length(...future.futureOptionsAdded) > 
[16:06:41.276]                   0L) {
[16:06:41.276]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:06:41.276]                   base::names(opts) <- ...future.futureOptionsAdded
[16:06:41.276]                   base::options(opts)
[16:06:41.276]                 }
[16:06:41.276]                 {
[16:06:41.276]                   {
[16:06:41.276]                     NULL
[16:06:41.276]                     RNGkind("Mersenne-Twister")
[16:06:41.276]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[16:06:41.276]                       inherits = FALSE)
[16:06:41.276]                   }
[16:06:41.276]                   options(future.plan = NULL)
[16:06:41.276]                   if (is.na(NA_character_)) 
[16:06:41.276]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:06:41.276]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:06:41.276]                   future::plan(list(function (..., envir = parent.frame()) 
[16:06:41.276]                   {
[16:06:41.276]                     future <- SequentialFuture(..., envir = envir)
[16:06:41.276]                     if (!future$lazy) 
[16:06:41.276]                       future <- run(future)
[16:06:41.276]                     invisible(future)
[16:06:41.276]                   }), .cleanup = FALSE, .init = FALSE)
[16:06:41.276]                 }
[16:06:41.276]             }
[16:06:41.276]         }
[16:06:41.276]     })
[16:06:41.276]     if (TRUE) {
[16:06:41.276]         base::sink(type = "output", split = FALSE)
[16:06:41.276]         if (TRUE) {
[16:06:41.276]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:06:41.276]         }
[16:06:41.276]         else {
[16:06:41.276]             ...future.result["stdout"] <- base::list(NULL)
[16:06:41.276]         }
[16:06:41.276]         base::close(...future.stdout)
[16:06:41.276]         ...future.stdout <- NULL
[16:06:41.276]     }
[16:06:41.276]     ...future.result$conditions <- ...future.conditions
[16:06:41.276]     ...future.result$finished <- base::Sys.time()
[16:06:41.276]     ...future.result
[16:06:41.276] }
[16:06:41.281] plan(): Setting new future strategy stack:
[16:06:41.281] List of future strategies:
[16:06:41.281] 1. sequential:
[16:06:41.281]    - args: function (..., envir = parent.frame())
[16:06:41.281]    - tweaked: FALSE
[16:06:41.281]    - call: NULL
[16:06:41.281] plan(): nbrOfWorkers() = 1
[16:06:41.283] plan(): Setting new future strategy stack:
[16:06:41.283] List of future strategies:
[16:06:41.283] 1. sequential:
[16:06:41.283]    - args: function (..., envir = parent.frame())
[16:06:41.283]    - tweaked: FALSE
[16:06:41.283]    - call: future::plan("sequential")
[16:06:41.283] plan(): nbrOfWorkers() = 1
[16:06:41.283] SequentialFuture started (and completed)
[16:06:41.284] - Launch lazy future ... done
[16:06:41.284] run() for ‘SequentialFuture’ ... done
> print(v)
[1] 2
> stopifnot(identical(v, 2L))
> 
> stopifnot("stats" %in% loadedNamespaces())
> 
> message("- SequentialFuture() - 'local = FALSE' is defunct ...")
- SequentialFuture() - 'local = FALSE' is defunct ...
> 
> res <- tryCatch({
+   f <- SequentialFuture(42, local = FALSE)
+ }, error = identity)
[16:06:41.287] getGlobalsAndPackages() ...
[16:06:41.287] Searching for globals...
[16:06:41.287] 
[16:06:41.287] Searching for globals ... DONE
[16:06:41.287] - globals: [0] <none>
[16:06:41.287] getGlobalsAndPackages() ... DONE
> stopifnot(inherits(res, "error"))
> 
> message("*** sequential() ... DONE")
*** sequential() ... DONE
> 
> source("incl/end.R")
[16:06:41.288] plan(): Setting new future strategy stack:
[16:06:41.288] List of future strategies:
[16:06:41.288] 1. FutureStrategy:
[16:06:41.288]    - args: function (..., envir = parent.frame())
[16:06:41.288]    - tweaked: FALSE
[16:06:41.288]    - call: future::plan(oplan)
[16:06:41.323] plan(): nbrOfWorkers() = 1
> 
