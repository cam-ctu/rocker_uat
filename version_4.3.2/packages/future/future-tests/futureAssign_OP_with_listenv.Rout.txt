
R version 4.3.2 (2023-10-31) -- "Eye Holes"
Copyright (C) 2023 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> source("incl/start.R")
[16:04:31.020] plan(): Setting new future strategy stack:
[16:04:31.021] List of future strategies:
[16:04:31.021] 1. sequential:
[16:04:31.021]    - args: function (..., envir = parent.frame())
[16:04:31.021]    - tweaked: FALSE
[16:04:31.021]    - call: future::plan("sequential")
[16:04:31.034] plan(): nbrOfWorkers() = 1
> library("listenv")
> 
> message("*** %<-% to listenv ...")
*** %<-% to listenv ...
> 
> ## - - - - - - - - - - - - - - - - - - - - - - - - - - - -
> ## Future assignment via infix operator
> ## - - - - - - - - - - - - - - - - - - - - - - - - - - - -
> z <- listenv()
> stopifnot(length(names(z)) == 0)
> 
> message("*** %<-% to listenv: Assign by index")
*** %<-% to listenv: Assign by index
> z[[1]] %<-% { 2 } %lazy% TRUE
[16:04:31.048] getGlobalsAndPackages() ...
[16:04:31.048] Searching for globals...
[16:04:31.051] - globals found: [1] ‘{’
[16:04:31.051] Searching for globals ... DONE
[16:04:31.052] Resolving globals: FALSE
[16:04:31.052] 
[16:04:31.052] 
[16:04:31.052] getGlobalsAndPackages() ... DONE
> stopifnot(length(z) == 1)
> stopifnot(length(names(z)) == 0)
> 
> z[[1]] %<-% { 2 } %lazy% TRUE
[16:04:31.053] getGlobalsAndPackages() ...
[16:04:31.053] Searching for globals...
[16:04:31.054] - globals found: [1] ‘{’
[16:04:31.054] Searching for globals ... DONE
[16:04:31.054] Resolving globals: FALSE
[16:04:31.054] 
[16:04:31.054] 
[16:04:31.054] getGlobalsAndPackages() ... DONE
> stopifnot(length(z) == 1)
> stopifnot(length(names(z)) == 0)
> 
> z[[4]] %<-% { "async!" } %lazy% TRUE
[16:04:31.055] getGlobalsAndPackages() ...
[16:04:31.055] Searching for globals...
[16:04:31.055] - globals found: [1] ‘{’
[16:04:31.055] Searching for globals ... DONE
[16:04:31.056] Resolving globals: FALSE
[16:04:31.056] 
[16:04:31.056] 
[16:04:31.056] getGlobalsAndPackages() ... DONE
> stopifnot(length(z) == 4)
> stopifnot(length(names(z)) == 0)
> 
> message("*** %<-% to listenv: Update names")
*** %<-% to listenv: Update names
> names(z) <- c("A", "B", "C", "D")
> stopifnot(identical(names(z), c("A", "B", "C", "D")))
> 
> 
> message("*** %<-% to listenv: Assign by name (existing)")
*** %<-% to listenv: Assign by name (existing)
> z$B %<-% { TRUE } %lazy% TRUE
[16:04:31.057] getGlobalsAndPackages() ...
[16:04:31.057] Searching for globals...
[16:04:31.057] - globals found: [1] ‘{’
[16:04:31.057] Searching for globals ... DONE
[16:04:31.058] Resolving globals: FALSE
[16:04:31.058] 
[16:04:31.058] 
[16:04:31.058] getGlobalsAndPackages() ... DONE
> stopifnot(length(z) == 4)
> stopifnot(identical(names(z), c("A", "B", "C", "D")))
> 
> y <- as.list(z)
[16:04:31.059] run() for ‘Future’ ...
[16:04:31.059] - state: ‘created’
[16:04:31.059] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[16:04:31.060] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[16:04:31.060] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[16:04:31.060]   - Field: ‘label’
[16:04:31.060]   - Field: ‘local’
[16:04:31.060]   - Field: ‘owner’
[16:04:31.060]   - Field: ‘envir’
[16:04:31.060]   - Field: ‘packages’
[16:04:31.060]   - Field: ‘gc’
[16:04:31.060]   - Field: ‘conditions’
[16:04:31.060]   - Field: ‘expr’
[16:04:31.061]   - Field: ‘uuid’
[16:04:31.061]   - Field: ‘seed’
[16:04:31.061]   - Field: ‘version’
[16:04:31.061]   - Field: ‘result’
[16:04:31.061]   - Field: ‘asynchronous’
[16:04:31.061]   - Field: ‘calls’
[16:04:31.061]   - Field: ‘globals’
[16:04:31.061]   - Field: ‘stdout’
[16:04:31.061]   - Field: ‘earlySignal’
[16:04:31.061]   - Field: ‘lazy’
[16:04:31.061]   - Field: ‘state’
[16:04:31.061] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[16:04:31.062] - Launch lazy future ...
[16:04:31.062] Packages needed by the future expression (n = 0): <none>
[16:04:31.062] Packages needed by future strategies (n = 0): <none>
[16:04:31.063] {
[16:04:31.063]     {
[16:04:31.063]         {
[16:04:31.063]             ...future.startTime <- base::Sys.time()
[16:04:31.063]             {
[16:04:31.063]                 {
[16:04:31.063]                   {
[16:04:31.063]                     base::local({
[16:04:31.063]                       has_future <- base::requireNamespace("future", 
[16:04:31.063]                         quietly = TRUE)
[16:04:31.063]                       if (has_future) {
[16:04:31.063]                         ns <- base::getNamespace("future")
[16:04:31.063]                         version <- ns[[".package"]][["version"]]
[16:04:31.063]                         if (is.null(version)) 
[16:04:31.063]                           version <- utils::packageVersion("future")
[16:04:31.063]                       }
[16:04:31.063]                       else {
[16:04:31.063]                         version <- NULL
[16:04:31.063]                       }
[16:04:31.063]                       if (!has_future || version < "1.8.0") {
[16:04:31.063]                         info <- base::c(r_version = base::gsub("R version ", 
[16:04:31.063]                           "", base::R.version$version.string), 
[16:04:31.063]                           platform = base::sprintf("%s (%s-bit)", 
[16:04:31.063]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:04:31.063]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[16:04:31.063]                             "release", "version")], collapse = " "), 
[16:04:31.063]                           hostname = base::Sys.info()[["nodename"]])
[16:04:31.063]                         info <- base::sprintf("%s: %s", base::names(info), 
[16:04:31.063]                           info)
[16:04:31.063]                         info <- base::paste(info, collapse = "; ")
[16:04:31.063]                         if (!has_future) {
[16:04:31.063]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:04:31.063]                             info)
[16:04:31.063]                         }
[16:04:31.063]                         else {
[16:04:31.063]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:04:31.063]                             info, version)
[16:04:31.063]                         }
[16:04:31.063]                         base::stop(msg)
[16:04:31.063]                       }
[16:04:31.063]                     })
[16:04:31.063]                   }
[16:04:31.063]                   options(future.plan = NULL)
[16:04:31.063]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:04:31.063]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:04:31.063]                 }
[16:04:31.063]                 ...future.workdir <- getwd()
[16:04:31.063]             }
[16:04:31.063]             ...future.oldOptions <- base::as.list(base::.Options)
[16:04:31.063]             ...future.oldEnvVars <- base::Sys.getenv()
[16:04:31.063]         }
[16:04:31.063]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:04:31.063]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:04:31.063]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:04:31.063]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:04:31.063]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:04:31.063]             future.stdout.windows.reencode = NULL, width = 80L)
[16:04:31.063]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:04:31.063]             base::names(...future.oldOptions))
[16:04:31.063]     }
[16:04:31.063]     if (FALSE) {
[16:04:31.063]     }
[16:04:31.063]     else {
[16:04:31.063]         if (TRUE) {
[16:04:31.063]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:04:31.063]                 open = "w")
[16:04:31.063]         }
[16:04:31.063]         else {
[16:04:31.063]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:04:31.063]                 windows = "NUL", "/dev/null"), open = "w")
[16:04:31.063]         }
[16:04:31.063]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:04:31.063]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:04:31.063]             base::sink(type = "output", split = FALSE)
[16:04:31.063]             base::close(...future.stdout)
[16:04:31.063]         }, add = TRUE)
[16:04:31.063]     }
[16:04:31.063]     ...future.frame <- base::sys.nframe()
[16:04:31.063]     ...future.conditions <- base::list()
[16:04:31.063]     ...future.rng <- base::globalenv()$.Random.seed
[16:04:31.063]     if (FALSE) {
[16:04:31.063]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:04:31.063]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:04:31.063]     }
[16:04:31.063]     ...future.result <- base::tryCatch({
[16:04:31.063]         base::withCallingHandlers({
[16:04:31.063]             ...future.value <- base::withVisible(base::local({
[16:04:31.063]                 2
[16:04:31.063]             }))
[16:04:31.063]             future::FutureResult(value = ...future.value$value, 
[16:04:31.063]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:04:31.063]                   ...future.rng), globalenv = if (FALSE) 
[16:04:31.063]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:04:31.063]                     ...future.globalenv.names))
[16:04:31.063]                 else NULL, started = ...future.startTime, version = "1.8")
[16:04:31.063]         }, condition = base::local({
[16:04:31.063]             c <- base::c
[16:04:31.063]             inherits <- base::inherits
[16:04:31.063]             invokeRestart <- base::invokeRestart
[16:04:31.063]             length <- base::length
[16:04:31.063]             list <- base::list
[16:04:31.063]             seq.int <- base::seq.int
[16:04:31.063]             signalCondition <- base::signalCondition
[16:04:31.063]             sys.calls <- base::sys.calls
[16:04:31.063]             `[[` <- base::`[[`
[16:04:31.063]             `+` <- base::`+`
[16:04:31.063]             `<<-` <- base::`<<-`
[16:04:31.063]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:04:31.063]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:04:31.063]                   3L)]
[16:04:31.063]             }
[16:04:31.063]             function(cond) {
[16:04:31.063]                 is_error <- inherits(cond, "error")
[16:04:31.063]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:04:31.063]                   NULL)
[16:04:31.063]                 if (is_error) {
[16:04:31.063]                   sessionInformation <- function() {
[16:04:31.063]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:04:31.063]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:04:31.063]                       search = base::search(), system = base::Sys.info())
[16:04:31.063]                   }
[16:04:31.063]                   ...future.conditions[[length(...future.conditions) + 
[16:04:31.063]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:04:31.063]                     cond$call), session = sessionInformation(), 
[16:04:31.063]                     timestamp = base::Sys.time(), signaled = 0L)
[16:04:31.063]                   signalCondition(cond)
[16:04:31.063]                 }
[16:04:31.063]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:04:31.063]                 "immediateCondition"))) {
[16:04:31.063]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:04:31.063]                   ...future.conditions[[length(...future.conditions) + 
[16:04:31.063]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:04:31.063]                   if (TRUE && !signal) {
[16:04:31.063]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:04:31.063]                     {
[16:04:31.063]                       inherits <- base::inherits
[16:04:31.063]                       invokeRestart <- base::invokeRestart
[16:04:31.063]                       is.null <- base::is.null
[16:04:31.063]                       muffled <- FALSE
[16:04:31.063]                       if (inherits(cond, "message")) {
[16:04:31.063]                         muffled <- grepl(pattern, "muffleMessage")
[16:04:31.063]                         if (muffled) 
[16:04:31.063]                           invokeRestart("muffleMessage")
[16:04:31.063]                       }
[16:04:31.063]                       else if (inherits(cond, "warning")) {
[16:04:31.063]                         muffled <- grepl(pattern, "muffleWarning")
[16:04:31.063]                         if (muffled) 
[16:04:31.063]                           invokeRestart("muffleWarning")
[16:04:31.063]                       }
[16:04:31.063]                       else if (inherits(cond, "condition")) {
[16:04:31.063]                         if (!is.null(pattern)) {
[16:04:31.063]                           computeRestarts <- base::computeRestarts
[16:04:31.063]                           grepl <- base::grepl
[16:04:31.063]                           restarts <- computeRestarts(cond)
[16:04:31.063]                           for (restart in restarts) {
[16:04:31.063]                             name <- restart$name
[16:04:31.063]                             if (is.null(name)) 
[16:04:31.063]                               next
[16:04:31.063]                             if (!grepl(pattern, name)) 
[16:04:31.063]                               next
[16:04:31.063]                             invokeRestart(restart)
[16:04:31.063]                             muffled <- TRUE
[16:04:31.063]                             break
[16:04:31.063]                           }
[16:04:31.063]                         }
[16:04:31.063]                       }
[16:04:31.063]                       invisible(muffled)
[16:04:31.063]                     }
[16:04:31.063]                     muffleCondition(cond, pattern = "^muffle")
[16:04:31.063]                   }
[16:04:31.063]                 }
[16:04:31.063]                 else {
[16:04:31.063]                   if (TRUE) {
[16:04:31.063]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:04:31.063]                     {
[16:04:31.063]                       inherits <- base::inherits
[16:04:31.063]                       invokeRestart <- base::invokeRestart
[16:04:31.063]                       is.null <- base::is.null
[16:04:31.063]                       muffled <- FALSE
[16:04:31.063]                       if (inherits(cond, "message")) {
[16:04:31.063]                         muffled <- grepl(pattern, "muffleMessage")
[16:04:31.063]                         if (muffled) 
[16:04:31.063]                           invokeRestart("muffleMessage")
[16:04:31.063]                       }
[16:04:31.063]                       else if (inherits(cond, "warning")) {
[16:04:31.063]                         muffled <- grepl(pattern, "muffleWarning")
[16:04:31.063]                         if (muffled) 
[16:04:31.063]                           invokeRestart("muffleWarning")
[16:04:31.063]                       }
[16:04:31.063]                       else if (inherits(cond, "condition")) {
[16:04:31.063]                         if (!is.null(pattern)) {
[16:04:31.063]                           computeRestarts <- base::computeRestarts
[16:04:31.063]                           grepl <- base::grepl
[16:04:31.063]                           restarts <- computeRestarts(cond)
[16:04:31.063]                           for (restart in restarts) {
[16:04:31.063]                             name <- restart$name
[16:04:31.063]                             if (is.null(name)) 
[16:04:31.063]                               next
[16:04:31.063]                             if (!grepl(pattern, name)) 
[16:04:31.063]                               next
[16:04:31.063]                             invokeRestart(restart)
[16:04:31.063]                             muffled <- TRUE
[16:04:31.063]                             break
[16:04:31.063]                           }
[16:04:31.063]                         }
[16:04:31.063]                       }
[16:04:31.063]                       invisible(muffled)
[16:04:31.063]                     }
[16:04:31.063]                     muffleCondition(cond, pattern = "^muffle")
[16:04:31.063]                   }
[16:04:31.063]                 }
[16:04:31.063]             }
[16:04:31.063]         }))
[16:04:31.063]     }, error = function(ex) {
[16:04:31.063]         base::structure(base::list(value = NULL, visible = NULL, 
[16:04:31.063]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:04:31.063]                 ...future.rng), started = ...future.startTime, 
[16:04:31.063]             finished = Sys.time(), session_uuid = NA_character_, 
[16:04:31.063]             version = "1.8"), class = "FutureResult")
[16:04:31.063]     }, finally = {
[16:04:31.063]         if (!identical(...future.workdir, getwd())) 
[16:04:31.063]             setwd(...future.workdir)
[16:04:31.063]         {
[16:04:31.063]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:04:31.063]                 ...future.oldOptions$nwarnings <- NULL
[16:04:31.063]             }
[16:04:31.063]             base::options(...future.oldOptions)
[16:04:31.063]             if (.Platform$OS.type == "windows") {
[16:04:31.063]                 old_names <- names(...future.oldEnvVars)
[16:04:31.063]                 envs <- base::Sys.getenv()
[16:04:31.063]                 names <- names(envs)
[16:04:31.063]                 common <- intersect(names, old_names)
[16:04:31.063]                 added <- setdiff(names, old_names)
[16:04:31.063]                 removed <- setdiff(old_names, names)
[16:04:31.063]                 changed <- common[...future.oldEnvVars[common] != 
[16:04:31.063]                   envs[common]]
[16:04:31.063]                 NAMES <- toupper(changed)
[16:04:31.063]                 args <- list()
[16:04:31.063]                 for (kk in seq_along(NAMES)) {
[16:04:31.063]                   name <- changed[[kk]]
[16:04:31.063]                   NAME <- NAMES[[kk]]
[16:04:31.063]                   if (name != NAME && is.element(NAME, old_names)) 
[16:04:31.063]                     next
[16:04:31.063]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:04:31.063]                 }
[16:04:31.063]                 NAMES <- toupper(added)
[16:04:31.063]                 for (kk in seq_along(NAMES)) {
[16:04:31.063]                   name <- added[[kk]]
[16:04:31.063]                   NAME <- NAMES[[kk]]
[16:04:31.063]                   if (name != NAME && is.element(NAME, old_names)) 
[16:04:31.063]                     next
[16:04:31.063]                   args[[name]] <- ""
[16:04:31.063]                 }
[16:04:31.063]                 NAMES <- toupper(removed)
[16:04:31.063]                 for (kk in seq_along(NAMES)) {
[16:04:31.063]                   name <- removed[[kk]]
[16:04:31.063]                   NAME <- NAMES[[kk]]
[16:04:31.063]                   if (name != NAME && is.element(NAME, old_names)) 
[16:04:31.063]                     next
[16:04:31.063]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:04:31.063]                 }
[16:04:31.063]                 if (length(args) > 0) 
[16:04:31.063]                   base::do.call(base::Sys.setenv, args = args)
[16:04:31.063]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:04:31.063]             }
[16:04:31.063]             else {
[16:04:31.063]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:04:31.063]             }
[16:04:31.063]             {
[16:04:31.063]                 if (base::length(...future.futureOptionsAdded) > 
[16:04:31.063]                   0L) {
[16:04:31.063]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:04:31.063]                   base::names(opts) <- ...future.futureOptionsAdded
[16:04:31.063]                   base::options(opts)
[16:04:31.063]                 }
[16:04:31.063]                 {
[16:04:31.063]                   {
[16:04:31.063]                     NULL
[16:04:31.063]                     RNGkind("Mersenne-Twister")
[16:04:31.063]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[16:04:31.063]                       inherits = FALSE)
[16:04:31.063]                   }
[16:04:31.063]                   options(future.plan = NULL)
[16:04:31.063]                   if (is.na(NA_character_)) 
[16:04:31.063]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:04:31.063]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:04:31.063]                   future::plan(list(function (..., envir = parent.frame()) 
[16:04:31.063]                   {
[16:04:31.063]                     future <- SequentialFuture(..., envir = envir)
[16:04:31.063]                     if (!future$lazy) 
[16:04:31.063]                       future <- run(future)
[16:04:31.063]                     invisible(future)
[16:04:31.063]                   }), .cleanup = FALSE, .init = FALSE)
[16:04:31.063]                 }
[16:04:31.063]             }
[16:04:31.063]         }
[16:04:31.063]     })
[16:04:31.063]     if (TRUE) {
[16:04:31.063]         base::sink(type = "output", split = FALSE)
[16:04:31.063]         if (TRUE) {
[16:04:31.063]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:04:31.063]         }
[16:04:31.063]         else {
[16:04:31.063]             ...future.result["stdout"] <- base::list(NULL)
[16:04:31.063]         }
[16:04:31.063]         base::close(...future.stdout)
[16:04:31.063]         ...future.stdout <- NULL
[16:04:31.063]     }
[16:04:31.063]     ...future.result$conditions <- ...future.conditions
[16:04:31.063]     ...future.result$finished <- base::Sys.time()
[16:04:31.063]     ...future.result
[16:04:31.063] }
[16:04:31.065] plan(): Setting new future strategy stack:
[16:04:31.065] List of future strategies:
[16:04:31.065] 1. sequential:
[16:04:31.065]    - args: function (..., envir = parent.frame())
[16:04:31.065]    - tweaked: FALSE
[16:04:31.065]    - call: NULL
[16:04:31.066] plan(): nbrOfWorkers() = 1
[16:04:31.067] plan(): Setting new future strategy stack:
[16:04:31.067] List of future strategies:
[16:04:31.067] 1. sequential:
[16:04:31.067]    - args: function (..., envir = parent.frame())
[16:04:31.067]    - tweaked: FALSE
[16:04:31.067]    - call: future::plan("sequential")
[16:04:31.067] plan(): nbrOfWorkers() = 1
[16:04:31.067] SequentialFuture started (and completed)
[16:04:31.068] - Launch lazy future ... done
[16:04:31.068] run() for ‘SequentialFuture’ ... done
[16:04:31.068] run() for ‘Future’ ...
[16:04:31.068] - state: ‘created’
[16:04:31.068] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[16:04:31.069] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[16:04:31.069] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[16:04:31.069]   - Field: ‘label’
[16:04:31.069]   - Field: ‘local’
[16:04:31.069]   - Field: ‘owner’
[16:04:31.069]   - Field: ‘envir’
[16:04:31.069]   - Field: ‘packages’
[16:04:31.069]   - Field: ‘gc’
[16:04:31.069]   - Field: ‘conditions’
[16:04:31.069]   - Field: ‘expr’
[16:04:31.070]   - Field: ‘uuid’
[16:04:31.070]   - Field: ‘seed’
[16:04:31.070]   - Field: ‘version’
[16:04:31.070]   - Field: ‘result’
[16:04:31.070]   - Field: ‘asynchronous’
[16:04:31.070]   - Field: ‘calls’
[16:04:31.070]   - Field: ‘globals’
[16:04:31.070]   - Field: ‘stdout’
[16:04:31.070]   - Field: ‘earlySignal’
[16:04:31.070]   - Field: ‘lazy’
[16:04:31.070]   - Field: ‘state’
[16:04:31.071] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[16:04:31.071] - Launch lazy future ...
[16:04:31.071] Packages needed by the future expression (n = 0): <none>
[16:04:31.071] Packages needed by future strategies (n = 0): <none>
[16:04:31.071] {
[16:04:31.071]     {
[16:04:31.071]         {
[16:04:31.071]             ...future.startTime <- base::Sys.time()
[16:04:31.071]             {
[16:04:31.071]                 {
[16:04:31.071]                   {
[16:04:31.071]                     base::local({
[16:04:31.071]                       has_future <- base::requireNamespace("future", 
[16:04:31.071]                         quietly = TRUE)
[16:04:31.071]                       if (has_future) {
[16:04:31.071]                         ns <- base::getNamespace("future")
[16:04:31.071]                         version <- ns[[".package"]][["version"]]
[16:04:31.071]                         if (is.null(version)) 
[16:04:31.071]                           version <- utils::packageVersion("future")
[16:04:31.071]                       }
[16:04:31.071]                       else {
[16:04:31.071]                         version <- NULL
[16:04:31.071]                       }
[16:04:31.071]                       if (!has_future || version < "1.8.0") {
[16:04:31.071]                         info <- base::c(r_version = base::gsub("R version ", 
[16:04:31.071]                           "", base::R.version$version.string), 
[16:04:31.071]                           platform = base::sprintf("%s (%s-bit)", 
[16:04:31.071]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:04:31.071]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[16:04:31.071]                             "release", "version")], collapse = " "), 
[16:04:31.071]                           hostname = base::Sys.info()[["nodename"]])
[16:04:31.071]                         info <- base::sprintf("%s: %s", base::names(info), 
[16:04:31.071]                           info)
[16:04:31.071]                         info <- base::paste(info, collapse = "; ")
[16:04:31.071]                         if (!has_future) {
[16:04:31.071]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:04:31.071]                             info)
[16:04:31.071]                         }
[16:04:31.071]                         else {
[16:04:31.071]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:04:31.071]                             info, version)
[16:04:31.071]                         }
[16:04:31.071]                         base::stop(msg)
[16:04:31.071]                       }
[16:04:31.071]                     })
[16:04:31.071]                   }
[16:04:31.071]                   options(future.plan = NULL)
[16:04:31.071]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:04:31.071]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:04:31.071]                 }
[16:04:31.071]                 ...future.workdir <- getwd()
[16:04:31.071]             }
[16:04:31.071]             ...future.oldOptions <- base::as.list(base::.Options)
[16:04:31.071]             ...future.oldEnvVars <- base::Sys.getenv()
[16:04:31.071]         }
[16:04:31.071]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:04:31.071]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:04:31.071]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:04:31.071]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:04:31.071]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:04:31.071]             future.stdout.windows.reencode = NULL, width = 80L)
[16:04:31.071]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:04:31.071]             base::names(...future.oldOptions))
[16:04:31.071]     }
[16:04:31.071]     if (FALSE) {
[16:04:31.071]     }
[16:04:31.071]     else {
[16:04:31.071]         if (TRUE) {
[16:04:31.071]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:04:31.071]                 open = "w")
[16:04:31.071]         }
[16:04:31.071]         else {
[16:04:31.071]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:04:31.071]                 windows = "NUL", "/dev/null"), open = "w")
[16:04:31.071]         }
[16:04:31.071]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:04:31.071]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:04:31.071]             base::sink(type = "output", split = FALSE)
[16:04:31.071]             base::close(...future.stdout)
[16:04:31.071]         }, add = TRUE)
[16:04:31.071]     }
[16:04:31.071]     ...future.frame <- base::sys.nframe()
[16:04:31.071]     ...future.conditions <- base::list()
[16:04:31.071]     ...future.rng <- base::globalenv()$.Random.seed
[16:04:31.071]     if (FALSE) {
[16:04:31.071]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:04:31.071]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:04:31.071]     }
[16:04:31.071]     ...future.result <- base::tryCatch({
[16:04:31.071]         base::withCallingHandlers({
[16:04:31.071]             ...future.value <- base::withVisible(base::local({
[16:04:31.071]                 "async!"
[16:04:31.071]             }))
[16:04:31.071]             future::FutureResult(value = ...future.value$value, 
[16:04:31.071]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:04:31.071]                   ...future.rng), globalenv = if (FALSE) 
[16:04:31.071]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:04:31.071]                     ...future.globalenv.names))
[16:04:31.071]                 else NULL, started = ...future.startTime, version = "1.8")
[16:04:31.071]         }, condition = base::local({
[16:04:31.071]             c <- base::c
[16:04:31.071]             inherits <- base::inherits
[16:04:31.071]             invokeRestart <- base::invokeRestart
[16:04:31.071]             length <- base::length
[16:04:31.071]             list <- base::list
[16:04:31.071]             seq.int <- base::seq.int
[16:04:31.071]             signalCondition <- base::signalCondition
[16:04:31.071]             sys.calls <- base::sys.calls
[16:04:31.071]             `[[` <- base::`[[`
[16:04:31.071]             `+` <- base::`+`
[16:04:31.071]             `<<-` <- base::`<<-`
[16:04:31.071]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:04:31.071]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:04:31.071]                   3L)]
[16:04:31.071]             }
[16:04:31.071]             function(cond) {
[16:04:31.071]                 is_error <- inherits(cond, "error")
[16:04:31.071]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:04:31.071]                   NULL)
[16:04:31.071]                 if (is_error) {
[16:04:31.071]                   sessionInformation <- function() {
[16:04:31.071]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:04:31.071]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:04:31.071]                       search = base::search(), system = base::Sys.info())
[16:04:31.071]                   }
[16:04:31.071]                   ...future.conditions[[length(...future.conditions) + 
[16:04:31.071]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:04:31.071]                     cond$call), session = sessionInformation(), 
[16:04:31.071]                     timestamp = base::Sys.time(), signaled = 0L)
[16:04:31.071]                   signalCondition(cond)
[16:04:31.071]                 }
[16:04:31.071]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:04:31.071]                 "immediateCondition"))) {
[16:04:31.071]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:04:31.071]                   ...future.conditions[[length(...future.conditions) + 
[16:04:31.071]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:04:31.071]                   if (TRUE && !signal) {
[16:04:31.071]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:04:31.071]                     {
[16:04:31.071]                       inherits <- base::inherits
[16:04:31.071]                       invokeRestart <- base::invokeRestart
[16:04:31.071]                       is.null <- base::is.null
[16:04:31.071]                       muffled <- FALSE
[16:04:31.071]                       if (inherits(cond, "message")) {
[16:04:31.071]                         muffled <- grepl(pattern, "muffleMessage")
[16:04:31.071]                         if (muffled) 
[16:04:31.071]                           invokeRestart("muffleMessage")
[16:04:31.071]                       }
[16:04:31.071]                       else if (inherits(cond, "warning")) {
[16:04:31.071]                         muffled <- grepl(pattern, "muffleWarning")
[16:04:31.071]                         if (muffled) 
[16:04:31.071]                           invokeRestart("muffleWarning")
[16:04:31.071]                       }
[16:04:31.071]                       else if (inherits(cond, "condition")) {
[16:04:31.071]                         if (!is.null(pattern)) {
[16:04:31.071]                           computeRestarts <- base::computeRestarts
[16:04:31.071]                           grepl <- base::grepl
[16:04:31.071]                           restarts <- computeRestarts(cond)
[16:04:31.071]                           for (restart in restarts) {
[16:04:31.071]                             name <- restart$name
[16:04:31.071]                             if (is.null(name)) 
[16:04:31.071]                               next
[16:04:31.071]                             if (!grepl(pattern, name)) 
[16:04:31.071]                               next
[16:04:31.071]                             invokeRestart(restart)
[16:04:31.071]                             muffled <- TRUE
[16:04:31.071]                             break
[16:04:31.071]                           }
[16:04:31.071]                         }
[16:04:31.071]                       }
[16:04:31.071]                       invisible(muffled)
[16:04:31.071]                     }
[16:04:31.071]                     muffleCondition(cond, pattern = "^muffle")
[16:04:31.071]                   }
[16:04:31.071]                 }
[16:04:31.071]                 else {
[16:04:31.071]                   if (TRUE) {
[16:04:31.071]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:04:31.071]                     {
[16:04:31.071]                       inherits <- base::inherits
[16:04:31.071]                       invokeRestart <- base::invokeRestart
[16:04:31.071]                       is.null <- base::is.null
[16:04:31.071]                       muffled <- FALSE
[16:04:31.071]                       if (inherits(cond, "message")) {
[16:04:31.071]                         muffled <- grepl(pattern, "muffleMessage")
[16:04:31.071]                         if (muffled) 
[16:04:31.071]                           invokeRestart("muffleMessage")
[16:04:31.071]                       }
[16:04:31.071]                       else if (inherits(cond, "warning")) {
[16:04:31.071]                         muffled <- grepl(pattern, "muffleWarning")
[16:04:31.071]                         if (muffled) 
[16:04:31.071]                           invokeRestart("muffleWarning")
[16:04:31.071]                       }
[16:04:31.071]                       else if (inherits(cond, "condition")) {
[16:04:31.071]                         if (!is.null(pattern)) {
[16:04:31.071]                           computeRestarts <- base::computeRestarts
[16:04:31.071]                           grepl <- base::grepl
[16:04:31.071]                           restarts <- computeRestarts(cond)
[16:04:31.071]                           for (restart in restarts) {
[16:04:31.071]                             name <- restart$name
[16:04:31.071]                             if (is.null(name)) 
[16:04:31.071]                               next
[16:04:31.071]                             if (!grepl(pattern, name)) 
[16:04:31.071]                               next
[16:04:31.071]                             invokeRestart(restart)
[16:04:31.071]                             muffled <- TRUE
[16:04:31.071]                             break
[16:04:31.071]                           }
[16:04:31.071]                         }
[16:04:31.071]                       }
[16:04:31.071]                       invisible(muffled)
[16:04:31.071]                     }
[16:04:31.071]                     muffleCondition(cond, pattern = "^muffle")
[16:04:31.071]                   }
[16:04:31.071]                 }
[16:04:31.071]             }
[16:04:31.071]         }))
[16:04:31.071]     }, error = function(ex) {
[16:04:31.071]         base::structure(base::list(value = NULL, visible = NULL, 
[16:04:31.071]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:04:31.071]                 ...future.rng), started = ...future.startTime, 
[16:04:31.071]             finished = Sys.time(), session_uuid = NA_character_, 
[16:04:31.071]             version = "1.8"), class = "FutureResult")
[16:04:31.071]     }, finally = {
[16:04:31.071]         if (!identical(...future.workdir, getwd())) 
[16:04:31.071]             setwd(...future.workdir)
[16:04:31.071]         {
[16:04:31.071]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:04:31.071]                 ...future.oldOptions$nwarnings <- NULL
[16:04:31.071]             }
[16:04:31.071]             base::options(...future.oldOptions)
[16:04:31.071]             if (.Platform$OS.type == "windows") {
[16:04:31.071]                 old_names <- names(...future.oldEnvVars)
[16:04:31.071]                 envs <- base::Sys.getenv()
[16:04:31.071]                 names <- names(envs)
[16:04:31.071]                 common <- intersect(names, old_names)
[16:04:31.071]                 added <- setdiff(names, old_names)
[16:04:31.071]                 removed <- setdiff(old_names, names)
[16:04:31.071]                 changed <- common[...future.oldEnvVars[common] != 
[16:04:31.071]                   envs[common]]
[16:04:31.071]                 NAMES <- toupper(changed)
[16:04:31.071]                 args <- list()
[16:04:31.071]                 for (kk in seq_along(NAMES)) {
[16:04:31.071]                   name <- changed[[kk]]
[16:04:31.071]                   NAME <- NAMES[[kk]]
[16:04:31.071]                   if (name != NAME && is.element(NAME, old_names)) 
[16:04:31.071]                     next
[16:04:31.071]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:04:31.071]                 }
[16:04:31.071]                 NAMES <- toupper(added)
[16:04:31.071]                 for (kk in seq_along(NAMES)) {
[16:04:31.071]                   name <- added[[kk]]
[16:04:31.071]                   NAME <- NAMES[[kk]]
[16:04:31.071]                   if (name != NAME && is.element(NAME, old_names)) 
[16:04:31.071]                     next
[16:04:31.071]                   args[[name]] <- ""
[16:04:31.071]                 }
[16:04:31.071]                 NAMES <- toupper(removed)
[16:04:31.071]                 for (kk in seq_along(NAMES)) {
[16:04:31.071]                   name <- removed[[kk]]
[16:04:31.071]                   NAME <- NAMES[[kk]]
[16:04:31.071]                   if (name != NAME && is.element(NAME, old_names)) 
[16:04:31.071]                     next
[16:04:31.071]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:04:31.071]                 }
[16:04:31.071]                 if (length(args) > 0) 
[16:04:31.071]                   base::do.call(base::Sys.setenv, args = args)
[16:04:31.071]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:04:31.071]             }
[16:04:31.071]             else {
[16:04:31.071]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:04:31.071]             }
[16:04:31.071]             {
[16:04:31.071]                 if (base::length(...future.futureOptionsAdded) > 
[16:04:31.071]                   0L) {
[16:04:31.071]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:04:31.071]                   base::names(opts) <- ...future.futureOptionsAdded
[16:04:31.071]                   base::options(opts)
[16:04:31.071]                 }
[16:04:31.071]                 {
[16:04:31.071]                   {
[16:04:31.071]                     NULL
[16:04:31.071]                     RNGkind("Mersenne-Twister")
[16:04:31.071]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[16:04:31.071]                       inherits = FALSE)
[16:04:31.071]                   }
[16:04:31.071]                   options(future.plan = NULL)
[16:04:31.071]                   if (is.na(NA_character_)) 
[16:04:31.071]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:04:31.071]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:04:31.071]                   future::plan(list(function (..., envir = parent.frame()) 
[16:04:31.071]                   {
[16:04:31.071]                     future <- SequentialFuture(..., envir = envir)
[16:04:31.071]                     if (!future$lazy) 
[16:04:31.071]                       future <- run(future)
[16:04:31.071]                     invisible(future)
[16:04:31.071]                   }), .cleanup = FALSE, .init = FALSE)
[16:04:31.071]                 }
[16:04:31.071]             }
[16:04:31.071]         }
[16:04:31.071]     })
[16:04:31.071]     if (TRUE) {
[16:04:31.071]         base::sink(type = "output", split = FALSE)
[16:04:31.071]         if (TRUE) {
[16:04:31.071]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:04:31.071]         }
[16:04:31.071]         else {
[16:04:31.071]             ...future.result["stdout"] <- base::list(NULL)
[16:04:31.071]         }
[16:04:31.071]         base::close(...future.stdout)
[16:04:31.071]         ...future.stdout <- NULL
[16:04:31.071]     }
[16:04:31.071]     ...future.result$conditions <- ...future.conditions
[16:04:31.071]     ...future.result$finished <- base::Sys.time()
[16:04:31.071]     ...future.result
[16:04:31.071] }
[16:04:31.073] plan(): Setting new future strategy stack:
[16:04:31.073] List of future strategies:
[16:04:31.073] 1. sequential:
[16:04:31.073]    - args: function (..., envir = parent.frame())
[16:04:31.073]    - tweaked: FALSE
[16:04:31.073]    - call: NULL
[16:04:31.073] plan(): nbrOfWorkers() = 1
[16:04:31.074] plan(): Setting new future strategy stack:
[16:04:31.074] List of future strategies:
[16:04:31.074] 1. sequential:
[16:04:31.074]    - args: function (..., envir = parent.frame())
[16:04:31.074]    - tweaked: FALSE
[16:04:31.074]    - call: future::plan("sequential")
[16:04:31.075] plan(): nbrOfWorkers() = 1
[16:04:31.075] SequentialFuture started (and completed)
[16:04:31.075] - Launch lazy future ... done
[16:04:31.075] run() for ‘SequentialFuture’ ... done
> str(y)
List of 4
 $ A: num 2
 $ B: NULL
 $ C: NULL
 $ D: chr "async!"
> stopifnot(length(y) == 4)
> stopifnot(identical(names(y), c("A", "B", "C", "D")))
> 
> 
> message("*** %<-% to listenv: Asserting no name clashes among futures")
*** %<-% to listenv: Asserting no name clashes among futures
> u <- listenv()
> u$a %<-% { 1 } %lazy% TRUE
[16:04:31.079] getGlobalsAndPackages() ...
[16:04:31.079] Searching for globals...
[16:04:31.080] - globals found: [1] ‘{’
[16:04:31.080] Searching for globals ... DONE
[16:04:31.080] Resolving globals: FALSE
[16:04:31.081] 
[16:04:31.081] 
[16:04:31.081] getGlobalsAndPackages() ... DONE
> stopifnot(identical(names(u), "a"))
> fu <- futureOf(u$a)
> 
> v <- listenv()
> v$a %<-% { 2 } %lazy% TRUE
[16:04:31.084] getGlobalsAndPackages() ...
[16:04:31.084] Searching for globals...
[16:04:31.084] - globals found: [1] ‘{’
[16:04:31.084] Searching for globals ... DONE
[16:04:31.084] Resolving globals: FALSE
[16:04:31.085] 
[16:04:31.085] 
[16:04:31.085] getGlobalsAndPackages() ... DONE
> stopifnot(identical(names(v), "a"))
> fv <- futureOf(v$a)
> stopifnot(!identical(fu, fv))
> 
> fu <- futureOf(u$a)
> stopifnot(!identical(fu, fv))
> 
> stopifnot(identical(u$a, 1))
[16:04:31.086] run() for ‘Future’ ...
[16:04:31.086] - state: ‘created’
[16:04:31.086] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[16:04:31.086] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[16:04:31.086] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[16:04:31.086]   - Field: ‘label’
[16:04:31.086]   - Field: ‘local’
[16:04:31.086]   - Field: ‘owner’
[16:04:31.087]   - Field: ‘envir’
[16:04:31.087]   - Field: ‘packages’
[16:04:31.087]   - Field: ‘gc’
[16:04:31.087]   - Field: ‘conditions’
[16:04:31.087]   - Field: ‘expr’
[16:04:31.087]   - Field: ‘uuid’
[16:04:31.087]   - Field: ‘seed’
[16:04:31.087]   - Field: ‘version’
[16:04:31.087]   - Field: ‘result’
[16:04:31.087]   - Field: ‘asynchronous’
[16:04:31.087]   - Field: ‘calls’
[16:04:31.088]   - Field: ‘globals’
[16:04:31.088]   - Field: ‘stdout’
[16:04:31.088]   - Field: ‘earlySignal’
[16:04:31.088]   - Field: ‘lazy’
[16:04:31.088]   - Field: ‘state’
[16:04:31.088] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[16:04:31.088] - Launch lazy future ...
[16:04:31.088] Packages needed by the future expression (n = 0): <none>
[16:04:31.088] Packages needed by future strategies (n = 0): <none>
[16:04:31.089] {
[16:04:31.089]     {
[16:04:31.089]         {
[16:04:31.089]             ...future.startTime <- base::Sys.time()
[16:04:31.089]             {
[16:04:31.089]                 {
[16:04:31.089]                   {
[16:04:31.089]                     base::local({
[16:04:31.089]                       has_future <- base::requireNamespace("future", 
[16:04:31.089]                         quietly = TRUE)
[16:04:31.089]                       if (has_future) {
[16:04:31.089]                         ns <- base::getNamespace("future")
[16:04:31.089]                         version <- ns[[".package"]][["version"]]
[16:04:31.089]                         if (is.null(version)) 
[16:04:31.089]                           version <- utils::packageVersion("future")
[16:04:31.089]                       }
[16:04:31.089]                       else {
[16:04:31.089]                         version <- NULL
[16:04:31.089]                       }
[16:04:31.089]                       if (!has_future || version < "1.8.0") {
[16:04:31.089]                         info <- base::c(r_version = base::gsub("R version ", 
[16:04:31.089]                           "", base::R.version$version.string), 
[16:04:31.089]                           platform = base::sprintf("%s (%s-bit)", 
[16:04:31.089]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:04:31.089]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[16:04:31.089]                             "release", "version")], collapse = " "), 
[16:04:31.089]                           hostname = base::Sys.info()[["nodename"]])
[16:04:31.089]                         info <- base::sprintf("%s: %s", base::names(info), 
[16:04:31.089]                           info)
[16:04:31.089]                         info <- base::paste(info, collapse = "; ")
[16:04:31.089]                         if (!has_future) {
[16:04:31.089]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:04:31.089]                             info)
[16:04:31.089]                         }
[16:04:31.089]                         else {
[16:04:31.089]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:04:31.089]                             info, version)
[16:04:31.089]                         }
[16:04:31.089]                         base::stop(msg)
[16:04:31.089]                       }
[16:04:31.089]                     })
[16:04:31.089]                   }
[16:04:31.089]                   options(future.plan = NULL)
[16:04:31.089]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:04:31.089]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:04:31.089]                 }
[16:04:31.089]                 ...future.workdir <- getwd()
[16:04:31.089]             }
[16:04:31.089]             ...future.oldOptions <- base::as.list(base::.Options)
[16:04:31.089]             ...future.oldEnvVars <- base::Sys.getenv()
[16:04:31.089]         }
[16:04:31.089]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:04:31.089]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:04:31.089]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:04:31.089]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:04:31.089]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:04:31.089]             future.stdout.windows.reencode = NULL, width = 80L)
[16:04:31.089]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:04:31.089]             base::names(...future.oldOptions))
[16:04:31.089]     }
[16:04:31.089]     if (FALSE) {
[16:04:31.089]     }
[16:04:31.089]     else {
[16:04:31.089]         if (TRUE) {
[16:04:31.089]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:04:31.089]                 open = "w")
[16:04:31.089]         }
[16:04:31.089]         else {
[16:04:31.089]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:04:31.089]                 windows = "NUL", "/dev/null"), open = "w")
[16:04:31.089]         }
[16:04:31.089]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:04:31.089]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:04:31.089]             base::sink(type = "output", split = FALSE)
[16:04:31.089]             base::close(...future.stdout)
[16:04:31.089]         }, add = TRUE)
[16:04:31.089]     }
[16:04:31.089]     ...future.frame <- base::sys.nframe()
[16:04:31.089]     ...future.conditions <- base::list()
[16:04:31.089]     ...future.rng <- base::globalenv()$.Random.seed
[16:04:31.089]     if (FALSE) {
[16:04:31.089]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:04:31.089]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:04:31.089]     }
[16:04:31.089]     ...future.result <- base::tryCatch({
[16:04:31.089]         base::withCallingHandlers({
[16:04:31.089]             ...future.value <- base::withVisible(base::local({
[16:04:31.089]                 1
[16:04:31.089]             }))
[16:04:31.089]             future::FutureResult(value = ...future.value$value, 
[16:04:31.089]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:04:31.089]                   ...future.rng), globalenv = if (FALSE) 
[16:04:31.089]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:04:31.089]                     ...future.globalenv.names))
[16:04:31.089]                 else NULL, started = ...future.startTime, version = "1.8")
[16:04:31.089]         }, condition = base::local({
[16:04:31.089]             c <- base::c
[16:04:31.089]             inherits <- base::inherits
[16:04:31.089]             invokeRestart <- base::invokeRestart
[16:04:31.089]             length <- base::length
[16:04:31.089]             list <- base::list
[16:04:31.089]             seq.int <- base::seq.int
[16:04:31.089]             signalCondition <- base::signalCondition
[16:04:31.089]             sys.calls <- base::sys.calls
[16:04:31.089]             `[[` <- base::`[[`
[16:04:31.089]             `+` <- base::`+`
[16:04:31.089]             `<<-` <- base::`<<-`
[16:04:31.089]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:04:31.089]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:04:31.089]                   3L)]
[16:04:31.089]             }
[16:04:31.089]             function(cond) {
[16:04:31.089]                 is_error <- inherits(cond, "error")
[16:04:31.089]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:04:31.089]                   NULL)
[16:04:31.089]                 if (is_error) {
[16:04:31.089]                   sessionInformation <- function() {
[16:04:31.089]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:04:31.089]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:04:31.089]                       search = base::search(), system = base::Sys.info())
[16:04:31.089]                   }
[16:04:31.089]                   ...future.conditions[[length(...future.conditions) + 
[16:04:31.089]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:04:31.089]                     cond$call), session = sessionInformation(), 
[16:04:31.089]                     timestamp = base::Sys.time(), signaled = 0L)
[16:04:31.089]                   signalCondition(cond)
[16:04:31.089]                 }
[16:04:31.089]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:04:31.089]                 "immediateCondition"))) {
[16:04:31.089]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:04:31.089]                   ...future.conditions[[length(...future.conditions) + 
[16:04:31.089]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:04:31.089]                   if (TRUE && !signal) {
[16:04:31.089]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:04:31.089]                     {
[16:04:31.089]                       inherits <- base::inherits
[16:04:31.089]                       invokeRestart <- base::invokeRestart
[16:04:31.089]                       is.null <- base::is.null
[16:04:31.089]                       muffled <- FALSE
[16:04:31.089]                       if (inherits(cond, "message")) {
[16:04:31.089]                         muffled <- grepl(pattern, "muffleMessage")
[16:04:31.089]                         if (muffled) 
[16:04:31.089]                           invokeRestart("muffleMessage")
[16:04:31.089]                       }
[16:04:31.089]                       else if (inherits(cond, "warning")) {
[16:04:31.089]                         muffled <- grepl(pattern, "muffleWarning")
[16:04:31.089]                         if (muffled) 
[16:04:31.089]                           invokeRestart("muffleWarning")
[16:04:31.089]                       }
[16:04:31.089]                       else if (inherits(cond, "condition")) {
[16:04:31.089]                         if (!is.null(pattern)) {
[16:04:31.089]                           computeRestarts <- base::computeRestarts
[16:04:31.089]                           grepl <- base::grepl
[16:04:31.089]                           restarts <- computeRestarts(cond)
[16:04:31.089]                           for (restart in restarts) {
[16:04:31.089]                             name <- restart$name
[16:04:31.089]                             if (is.null(name)) 
[16:04:31.089]                               next
[16:04:31.089]                             if (!grepl(pattern, name)) 
[16:04:31.089]                               next
[16:04:31.089]                             invokeRestart(restart)
[16:04:31.089]                             muffled <- TRUE
[16:04:31.089]                             break
[16:04:31.089]                           }
[16:04:31.089]                         }
[16:04:31.089]                       }
[16:04:31.089]                       invisible(muffled)
[16:04:31.089]                     }
[16:04:31.089]                     muffleCondition(cond, pattern = "^muffle")
[16:04:31.089]                   }
[16:04:31.089]                 }
[16:04:31.089]                 else {
[16:04:31.089]                   if (TRUE) {
[16:04:31.089]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:04:31.089]                     {
[16:04:31.089]                       inherits <- base::inherits
[16:04:31.089]                       invokeRestart <- base::invokeRestart
[16:04:31.089]                       is.null <- base::is.null
[16:04:31.089]                       muffled <- FALSE
[16:04:31.089]                       if (inherits(cond, "message")) {
[16:04:31.089]                         muffled <- grepl(pattern, "muffleMessage")
[16:04:31.089]                         if (muffled) 
[16:04:31.089]                           invokeRestart("muffleMessage")
[16:04:31.089]                       }
[16:04:31.089]                       else if (inherits(cond, "warning")) {
[16:04:31.089]                         muffled <- grepl(pattern, "muffleWarning")
[16:04:31.089]                         if (muffled) 
[16:04:31.089]                           invokeRestart("muffleWarning")
[16:04:31.089]                       }
[16:04:31.089]                       else if (inherits(cond, "condition")) {
[16:04:31.089]                         if (!is.null(pattern)) {
[16:04:31.089]                           computeRestarts <- base::computeRestarts
[16:04:31.089]                           grepl <- base::grepl
[16:04:31.089]                           restarts <- computeRestarts(cond)
[16:04:31.089]                           for (restart in restarts) {
[16:04:31.089]                             name <- restart$name
[16:04:31.089]                             if (is.null(name)) 
[16:04:31.089]                               next
[16:04:31.089]                             if (!grepl(pattern, name)) 
[16:04:31.089]                               next
[16:04:31.089]                             invokeRestart(restart)
[16:04:31.089]                             muffled <- TRUE
[16:04:31.089]                             break
[16:04:31.089]                           }
[16:04:31.089]                         }
[16:04:31.089]                       }
[16:04:31.089]                       invisible(muffled)
[16:04:31.089]                     }
[16:04:31.089]                     muffleCondition(cond, pattern = "^muffle")
[16:04:31.089]                   }
[16:04:31.089]                 }
[16:04:31.089]             }
[16:04:31.089]         }))
[16:04:31.089]     }, error = function(ex) {
[16:04:31.089]         base::structure(base::list(value = NULL, visible = NULL, 
[16:04:31.089]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:04:31.089]                 ...future.rng), started = ...future.startTime, 
[16:04:31.089]             finished = Sys.time(), session_uuid = NA_character_, 
[16:04:31.089]             version = "1.8"), class = "FutureResult")
[16:04:31.089]     }, finally = {
[16:04:31.089]         if (!identical(...future.workdir, getwd())) 
[16:04:31.089]             setwd(...future.workdir)
[16:04:31.089]         {
[16:04:31.089]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:04:31.089]                 ...future.oldOptions$nwarnings <- NULL
[16:04:31.089]             }
[16:04:31.089]             base::options(...future.oldOptions)
[16:04:31.089]             if (.Platform$OS.type == "windows") {
[16:04:31.089]                 old_names <- names(...future.oldEnvVars)
[16:04:31.089]                 envs <- base::Sys.getenv()
[16:04:31.089]                 names <- names(envs)
[16:04:31.089]                 common <- intersect(names, old_names)
[16:04:31.089]                 added <- setdiff(names, old_names)
[16:04:31.089]                 removed <- setdiff(old_names, names)
[16:04:31.089]                 changed <- common[...future.oldEnvVars[common] != 
[16:04:31.089]                   envs[common]]
[16:04:31.089]                 NAMES <- toupper(changed)
[16:04:31.089]                 args <- list()
[16:04:31.089]                 for (kk in seq_along(NAMES)) {
[16:04:31.089]                   name <- changed[[kk]]
[16:04:31.089]                   NAME <- NAMES[[kk]]
[16:04:31.089]                   if (name != NAME && is.element(NAME, old_names)) 
[16:04:31.089]                     next
[16:04:31.089]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:04:31.089]                 }
[16:04:31.089]                 NAMES <- toupper(added)
[16:04:31.089]                 for (kk in seq_along(NAMES)) {
[16:04:31.089]                   name <- added[[kk]]
[16:04:31.089]                   NAME <- NAMES[[kk]]
[16:04:31.089]                   if (name != NAME && is.element(NAME, old_names)) 
[16:04:31.089]                     next
[16:04:31.089]                   args[[name]] <- ""
[16:04:31.089]                 }
[16:04:31.089]                 NAMES <- toupper(removed)
[16:04:31.089]                 for (kk in seq_along(NAMES)) {
[16:04:31.089]                   name <- removed[[kk]]
[16:04:31.089]                   NAME <- NAMES[[kk]]
[16:04:31.089]                   if (name != NAME && is.element(NAME, old_names)) 
[16:04:31.089]                     next
[16:04:31.089]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:04:31.089]                 }
[16:04:31.089]                 if (length(args) > 0) 
[16:04:31.089]                   base::do.call(base::Sys.setenv, args = args)
[16:04:31.089]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:04:31.089]             }
[16:04:31.089]             else {
[16:04:31.089]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:04:31.089]             }
[16:04:31.089]             {
[16:04:31.089]                 if (base::length(...future.futureOptionsAdded) > 
[16:04:31.089]                   0L) {
[16:04:31.089]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:04:31.089]                   base::names(opts) <- ...future.futureOptionsAdded
[16:04:31.089]                   base::options(opts)
[16:04:31.089]                 }
[16:04:31.089]                 {
[16:04:31.089]                   {
[16:04:31.089]                     NULL
[16:04:31.089]                     RNGkind("Mersenne-Twister")
[16:04:31.089]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[16:04:31.089]                       inherits = FALSE)
[16:04:31.089]                   }
[16:04:31.089]                   options(future.plan = NULL)
[16:04:31.089]                   if (is.na(NA_character_)) 
[16:04:31.089]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:04:31.089]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:04:31.089]                   future::plan(list(function (..., envir = parent.frame()) 
[16:04:31.089]                   {
[16:04:31.089]                     future <- SequentialFuture(..., envir = envir)
[16:04:31.089]                     if (!future$lazy) 
[16:04:31.089]                       future <- run(future)
[16:04:31.089]                     invisible(future)
[16:04:31.089]                   }), .cleanup = FALSE, .init = FALSE)
[16:04:31.089]                 }
[16:04:31.089]             }
[16:04:31.089]         }
[16:04:31.089]     })
[16:04:31.089]     if (TRUE) {
[16:04:31.089]         base::sink(type = "output", split = FALSE)
[16:04:31.089]         if (TRUE) {
[16:04:31.089]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:04:31.089]         }
[16:04:31.089]         else {
[16:04:31.089]             ...future.result["stdout"] <- base::list(NULL)
[16:04:31.089]         }
[16:04:31.089]         base::close(...future.stdout)
[16:04:31.089]         ...future.stdout <- NULL
[16:04:31.089]     }
[16:04:31.089]     ...future.result$conditions <- ...future.conditions
[16:04:31.089]     ...future.result$finished <- base::Sys.time()
[16:04:31.089]     ...future.result
[16:04:31.089] }
[16:04:31.090] plan(): Setting new future strategy stack:
[16:04:31.090] List of future strategies:
[16:04:31.090] 1. sequential:
[16:04:31.090]    - args: function (..., envir = parent.frame())
[16:04:31.090]    - tweaked: FALSE
[16:04:31.090]    - call: NULL
[16:04:31.091] plan(): nbrOfWorkers() = 1
[16:04:31.092] plan(): Setting new future strategy stack:
[16:04:31.092] List of future strategies:
[16:04:31.092] 1. sequential:
[16:04:31.092]    - args: function (..., envir = parent.frame())
[16:04:31.092]    - tweaked: FALSE
[16:04:31.092]    - call: future::plan("sequential")
[16:04:31.092] plan(): nbrOfWorkers() = 1
[16:04:31.092] SequentialFuture started (and completed)
[16:04:31.092] - Launch lazy future ... done
[16:04:31.092] run() for ‘SequentialFuture’ ... done
> stopifnot(identical(v$a, 2))
[16:04:31.093] run() for ‘Future’ ...
[16:04:31.093] - state: ‘created’
[16:04:31.093] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[16:04:31.093] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[16:04:31.093] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[16:04:31.093]   - Field: ‘label’
[16:04:31.093]   - Field: ‘local’
[16:04:31.093]   - Field: ‘owner’
[16:04:31.093]   - Field: ‘envir’
[16:04:31.094]   - Field: ‘packages’
[16:04:31.094]   - Field: ‘gc’
[16:04:31.094]   - Field: ‘conditions’
[16:04:31.094]   - Field: ‘expr’
[16:04:31.094]   - Field: ‘uuid’
[16:04:31.094]   - Field: ‘seed’
[16:04:31.094]   - Field: ‘version’
[16:04:31.094]   - Field: ‘result’
[16:04:31.094]   - Field: ‘asynchronous’
[16:04:31.094]   - Field: ‘calls’
[16:04:31.094]   - Field: ‘globals’
[16:04:31.095]   - Field: ‘stdout’
[16:04:31.095]   - Field: ‘earlySignal’
[16:04:31.095]   - Field: ‘lazy’
[16:04:31.095]   - Field: ‘state’
[16:04:31.095] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[16:04:31.095] - Launch lazy future ...
[16:04:31.095] Packages needed by the future expression (n = 0): <none>
[16:04:31.095] Packages needed by future strategies (n = 0): <none>
[16:04:31.096] {
[16:04:31.096]     {
[16:04:31.096]         {
[16:04:31.096]             ...future.startTime <- base::Sys.time()
[16:04:31.096]             {
[16:04:31.096]                 {
[16:04:31.096]                   {
[16:04:31.096]                     base::local({
[16:04:31.096]                       has_future <- base::requireNamespace("future", 
[16:04:31.096]                         quietly = TRUE)
[16:04:31.096]                       if (has_future) {
[16:04:31.096]                         ns <- base::getNamespace("future")
[16:04:31.096]                         version <- ns[[".package"]][["version"]]
[16:04:31.096]                         if (is.null(version)) 
[16:04:31.096]                           version <- utils::packageVersion("future")
[16:04:31.096]                       }
[16:04:31.096]                       else {
[16:04:31.096]                         version <- NULL
[16:04:31.096]                       }
[16:04:31.096]                       if (!has_future || version < "1.8.0") {
[16:04:31.096]                         info <- base::c(r_version = base::gsub("R version ", 
[16:04:31.096]                           "", base::R.version$version.string), 
[16:04:31.096]                           platform = base::sprintf("%s (%s-bit)", 
[16:04:31.096]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:04:31.096]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[16:04:31.096]                             "release", "version")], collapse = " "), 
[16:04:31.096]                           hostname = base::Sys.info()[["nodename"]])
[16:04:31.096]                         info <- base::sprintf("%s: %s", base::names(info), 
[16:04:31.096]                           info)
[16:04:31.096]                         info <- base::paste(info, collapse = "; ")
[16:04:31.096]                         if (!has_future) {
[16:04:31.096]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:04:31.096]                             info)
[16:04:31.096]                         }
[16:04:31.096]                         else {
[16:04:31.096]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:04:31.096]                             info, version)
[16:04:31.096]                         }
[16:04:31.096]                         base::stop(msg)
[16:04:31.096]                       }
[16:04:31.096]                     })
[16:04:31.096]                   }
[16:04:31.096]                   options(future.plan = NULL)
[16:04:31.096]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:04:31.096]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:04:31.096]                 }
[16:04:31.096]                 ...future.workdir <- getwd()
[16:04:31.096]             }
[16:04:31.096]             ...future.oldOptions <- base::as.list(base::.Options)
[16:04:31.096]             ...future.oldEnvVars <- base::Sys.getenv()
[16:04:31.096]         }
[16:04:31.096]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:04:31.096]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:04:31.096]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:04:31.096]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:04:31.096]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:04:31.096]             future.stdout.windows.reencode = NULL, width = 80L)
[16:04:31.096]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:04:31.096]             base::names(...future.oldOptions))
[16:04:31.096]     }
[16:04:31.096]     if (FALSE) {
[16:04:31.096]     }
[16:04:31.096]     else {
[16:04:31.096]         if (TRUE) {
[16:04:31.096]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:04:31.096]                 open = "w")
[16:04:31.096]         }
[16:04:31.096]         else {
[16:04:31.096]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:04:31.096]                 windows = "NUL", "/dev/null"), open = "w")
[16:04:31.096]         }
[16:04:31.096]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:04:31.096]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:04:31.096]             base::sink(type = "output", split = FALSE)
[16:04:31.096]             base::close(...future.stdout)
[16:04:31.096]         }, add = TRUE)
[16:04:31.096]     }
[16:04:31.096]     ...future.frame <- base::sys.nframe()
[16:04:31.096]     ...future.conditions <- base::list()
[16:04:31.096]     ...future.rng <- base::globalenv()$.Random.seed
[16:04:31.096]     if (FALSE) {
[16:04:31.096]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:04:31.096]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:04:31.096]     }
[16:04:31.096]     ...future.result <- base::tryCatch({
[16:04:31.096]         base::withCallingHandlers({
[16:04:31.096]             ...future.value <- base::withVisible(base::local({
[16:04:31.096]                 2
[16:04:31.096]             }))
[16:04:31.096]             future::FutureResult(value = ...future.value$value, 
[16:04:31.096]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:04:31.096]                   ...future.rng), globalenv = if (FALSE) 
[16:04:31.096]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:04:31.096]                     ...future.globalenv.names))
[16:04:31.096]                 else NULL, started = ...future.startTime, version = "1.8")
[16:04:31.096]         }, condition = base::local({
[16:04:31.096]             c <- base::c
[16:04:31.096]             inherits <- base::inherits
[16:04:31.096]             invokeRestart <- base::invokeRestart
[16:04:31.096]             length <- base::length
[16:04:31.096]             list <- base::list
[16:04:31.096]             seq.int <- base::seq.int
[16:04:31.096]             signalCondition <- base::signalCondition
[16:04:31.096]             sys.calls <- base::sys.calls
[16:04:31.096]             `[[` <- base::`[[`
[16:04:31.096]             `+` <- base::`+`
[16:04:31.096]             `<<-` <- base::`<<-`
[16:04:31.096]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:04:31.096]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:04:31.096]                   3L)]
[16:04:31.096]             }
[16:04:31.096]             function(cond) {
[16:04:31.096]                 is_error <- inherits(cond, "error")
[16:04:31.096]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:04:31.096]                   NULL)
[16:04:31.096]                 if (is_error) {
[16:04:31.096]                   sessionInformation <- function() {
[16:04:31.096]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:04:31.096]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:04:31.096]                       search = base::search(), system = base::Sys.info())
[16:04:31.096]                   }
[16:04:31.096]                   ...future.conditions[[length(...future.conditions) + 
[16:04:31.096]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:04:31.096]                     cond$call), session = sessionInformation(), 
[16:04:31.096]                     timestamp = base::Sys.time(), signaled = 0L)
[16:04:31.096]                   signalCondition(cond)
[16:04:31.096]                 }
[16:04:31.096]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:04:31.096]                 "immediateCondition"))) {
[16:04:31.096]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:04:31.096]                   ...future.conditions[[length(...future.conditions) + 
[16:04:31.096]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:04:31.096]                   if (TRUE && !signal) {
[16:04:31.096]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:04:31.096]                     {
[16:04:31.096]                       inherits <- base::inherits
[16:04:31.096]                       invokeRestart <- base::invokeRestart
[16:04:31.096]                       is.null <- base::is.null
[16:04:31.096]                       muffled <- FALSE
[16:04:31.096]                       if (inherits(cond, "message")) {
[16:04:31.096]                         muffled <- grepl(pattern, "muffleMessage")
[16:04:31.096]                         if (muffled) 
[16:04:31.096]                           invokeRestart("muffleMessage")
[16:04:31.096]                       }
[16:04:31.096]                       else if (inherits(cond, "warning")) {
[16:04:31.096]                         muffled <- grepl(pattern, "muffleWarning")
[16:04:31.096]                         if (muffled) 
[16:04:31.096]                           invokeRestart("muffleWarning")
[16:04:31.096]                       }
[16:04:31.096]                       else if (inherits(cond, "condition")) {
[16:04:31.096]                         if (!is.null(pattern)) {
[16:04:31.096]                           computeRestarts <- base::computeRestarts
[16:04:31.096]                           grepl <- base::grepl
[16:04:31.096]                           restarts <- computeRestarts(cond)
[16:04:31.096]                           for (restart in restarts) {
[16:04:31.096]                             name <- restart$name
[16:04:31.096]                             if (is.null(name)) 
[16:04:31.096]                               next
[16:04:31.096]                             if (!grepl(pattern, name)) 
[16:04:31.096]                               next
[16:04:31.096]                             invokeRestart(restart)
[16:04:31.096]                             muffled <- TRUE
[16:04:31.096]                             break
[16:04:31.096]                           }
[16:04:31.096]                         }
[16:04:31.096]                       }
[16:04:31.096]                       invisible(muffled)
[16:04:31.096]                     }
[16:04:31.096]                     muffleCondition(cond, pattern = "^muffle")
[16:04:31.096]                   }
[16:04:31.096]                 }
[16:04:31.096]                 else {
[16:04:31.096]                   if (TRUE) {
[16:04:31.096]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:04:31.096]                     {
[16:04:31.096]                       inherits <- base::inherits
[16:04:31.096]                       invokeRestart <- base::invokeRestart
[16:04:31.096]                       is.null <- base::is.null
[16:04:31.096]                       muffled <- FALSE
[16:04:31.096]                       if (inherits(cond, "message")) {
[16:04:31.096]                         muffled <- grepl(pattern, "muffleMessage")
[16:04:31.096]                         if (muffled) 
[16:04:31.096]                           invokeRestart("muffleMessage")
[16:04:31.096]                       }
[16:04:31.096]                       else if (inherits(cond, "warning")) {
[16:04:31.096]                         muffled <- grepl(pattern, "muffleWarning")
[16:04:31.096]                         if (muffled) 
[16:04:31.096]                           invokeRestart("muffleWarning")
[16:04:31.096]                       }
[16:04:31.096]                       else if (inherits(cond, "condition")) {
[16:04:31.096]                         if (!is.null(pattern)) {
[16:04:31.096]                           computeRestarts <- base::computeRestarts
[16:04:31.096]                           grepl <- base::grepl
[16:04:31.096]                           restarts <- computeRestarts(cond)
[16:04:31.096]                           for (restart in restarts) {
[16:04:31.096]                             name <- restart$name
[16:04:31.096]                             if (is.null(name)) 
[16:04:31.096]                               next
[16:04:31.096]                             if (!grepl(pattern, name)) 
[16:04:31.096]                               next
[16:04:31.096]                             invokeRestart(restart)
[16:04:31.096]                             muffled <- TRUE
[16:04:31.096]                             break
[16:04:31.096]                           }
[16:04:31.096]                         }
[16:04:31.096]                       }
[16:04:31.096]                       invisible(muffled)
[16:04:31.096]                     }
[16:04:31.096]                     muffleCondition(cond, pattern = "^muffle")
[16:04:31.096]                   }
[16:04:31.096]                 }
[16:04:31.096]             }
[16:04:31.096]         }))
[16:04:31.096]     }, error = function(ex) {
[16:04:31.096]         base::structure(base::list(value = NULL, visible = NULL, 
[16:04:31.096]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:04:31.096]                 ...future.rng), started = ...future.startTime, 
[16:04:31.096]             finished = Sys.time(), session_uuid = NA_character_, 
[16:04:31.096]             version = "1.8"), class = "FutureResult")
[16:04:31.096]     }, finally = {
[16:04:31.096]         if (!identical(...future.workdir, getwd())) 
[16:04:31.096]             setwd(...future.workdir)
[16:04:31.096]         {
[16:04:31.096]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:04:31.096]                 ...future.oldOptions$nwarnings <- NULL
[16:04:31.096]             }
[16:04:31.096]             base::options(...future.oldOptions)
[16:04:31.096]             if (.Platform$OS.type == "windows") {
[16:04:31.096]                 old_names <- names(...future.oldEnvVars)
[16:04:31.096]                 envs <- base::Sys.getenv()
[16:04:31.096]                 names <- names(envs)
[16:04:31.096]                 common <- intersect(names, old_names)
[16:04:31.096]                 added <- setdiff(names, old_names)
[16:04:31.096]                 removed <- setdiff(old_names, names)
[16:04:31.096]                 changed <- common[...future.oldEnvVars[common] != 
[16:04:31.096]                   envs[common]]
[16:04:31.096]                 NAMES <- toupper(changed)
[16:04:31.096]                 args <- list()
[16:04:31.096]                 for (kk in seq_along(NAMES)) {
[16:04:31.096]                   name <- changed[[kk]]
[16:04:31.096]                   NAME <- NAMES[[kk]]
[16:04:31.096]                   if (name != NAME && is.element(NAME, old_names)) 
[16:04:31.096]                     next
[16:04:31.096]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:04:31.096]                 }
[16:04:31.096]                 NAMES <- toupper(added)
[16:04:31.096]                 for (kk in seq_along(NAMES)) {
[16:04:31.096]                   name <- added[[kk]]
[16:04:31.096]                   NAME <- NAMES[[kk]]
[16:04:31.096]                   if (name != NAME && is.element(NAME, old_names)) 
[16:04:31.096]                     next
[16:04:31.096]                   args[[name]] <- ""
[16:04:31.096]                 }
[16:04:31.096]                 NAMES <- toupper(removed)
[16:04:31.096]                 for (kk in seq_along(NAMES)) {
[16:04:31.096]                   name <- removed[[kk]]
[16:04:31.096]                   NAME <- NAMES[[kk]]
[16:04:31.096]                   if (name != NAME && is.element(NAME, old_names)) 
[16:04:31.096]                     next
[16:04:31.096]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:04:31.096]                 }
[16:04:31.096]                 if (length(args) > 0) 
[16:04:31.096]                   base::do.call(base::Sys.setenv, args = args)
[16:04:31.096]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:04:31.096]             }
[16:04:31.096]             else {
[16:04:31.096]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:04:31.096]             }
[16:04:31.096]             {
[16:04:31.096]                 if (base::length(...future.futureOptionsAdded) > 
[16:04:31.096]                   0L) {
[16:04:31.096]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:04:31.096]                   base::names(opts) <- ...future.futureOptionsAdded
[16:04:31.096]                   base::options(opts)
[16:04:31.096]                 }
[16:04:31.096]                 {
[16:04:31.096]                   {
[16:04:31.096]                     NULL
[16:04:31.096]                     RNGkind("Mersenne-Twister")
[16:04:31.096]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[16:04:31.096]                       inherits = FALSE)
[16:04:31.096]                   }
[16:04:31.096]                   options(future.plan = NULL)
[16:04:31.096]                   if (is.na(NA_character_)) 
[16:04:31.096]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:04:31.096]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:04:31.096]                   future::plan(list(function (..., envir = parent.frame()) 
[16:04:31.096]                   {
[16:04:31.096]                     future <- SequentialFuture(..., envir = envir)
[16:04:31.096]                     if (!future$lazy) 
[16:04:31.096]                       future <- run(future)
[16:04:31.096]                     invisible(future)
[16:04:31.096]                   }), .cleanup = FALSE, .init = FALSE)
[16:04:31.096]                 }
[16:04:31.096]             }
[16:04:31.096]         }
[16:04:31.096]     })
[16:04:31.096]     if (TRUE) {
[16:04:31.096]         base::sink(type = "output", split = FALSE)
[16:04:31.096]         if (TRUE) {
[16:04:31.096]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:04:31.096]         }
[16:04:31.096]         else {
[16:04:31.096]             ...future.result["stdout"] <- base::list(NULL)
[16:04:31.096]         }
[16:04:31.096]         base::close(...future.stdout)
[16:04:31.096]         ...future.stdout <- NULL
[16:04:31.096]     }
[16:04:31.096]     ...future.result$conditions <- ...future.conditions
[16:04:31.096]     ...future.result$finished <- base::Sys.time()
[16:04:31.096]     ...future.result
[16:04:31.096] }
[16:04:31.097] plan(): Setting new future strategy stack:
[16:04:31.097] List of future strategies:
[16:04:31.097] 1. sequential:
[16:04:31.097]    - args: function (..., envir = parent.frame())
[16:04:31.097]    - tweaked: FALSE
[16:04:31.097]    - call: NULL
[16:04:31.098] plan(): nbrOfWorkers() = 1
[16:04:31.098] plan(): Setting new future strategy stack:
[16:04:31.098] List of future strategies:
[16:04:31.098] 1. sequential:
[16:04:31.098]    - args: function (..., envir = parent.frame())
[16:04:31.098]    - tweaked: FALSE
[16:04:31.098]    - call: future::plan("sequential")
[16:04:31.099] plan(): nbrOfWorkers() = 1
[16:04:31.099] SequentialFuture started (and completed)
[16:04:31.099] - Launch lazy future ... done
[16:04:31.099] run() for ‘SequentialFuture’ ... done
> 
> 
> message("*** %<-% to listenv: multiple dimensions ...")
*** %<-% to listenv: multiple dimensions ...
> 
> x0 <- list()
> length(x0) <- 6
> dim(x0) <- c(3, 2)
> 
> x <- listenv()
> length(x) <- 6
> dim(x) <- c(3, 2)
> 
> for (cc in 1:ncol(x)) {
+   for (rr in 1:nrow(x)) {
+     x0[[rr, cc]] <- sprintf("(%s, %s)", rr, cc)
+     x[[rr, cc]] %<-% sprintf("(%s, %s)", rr, cc) %lazy% TRUE
+   }
+ }
[16:04:31.104] getGlobalsAndPackages() ...
[16:04:31.105] Searching for globals...
[16:04:31.106] - globals found: [3] ‘sprintf’, ‘rr’, ‘cc’
[16:04:31.106] Searching for globals ... DONE
[16:04:31.106] Resolving globals: FALSE
[16:04:31.107] The total size of the 2 globals is 112 bytes (112 bytes)
[16:04:31.108] The total size of the 2 globals exported for future expression (‘sprintf("(%s, %s)", rr, cc)’) is 112 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘rr’ (56 bytes of class ‘numeric’) and ‘cc’ (56 bytes of class ‘numeric’)
[16:04:31.108] - globals: [2] ‘rr’, ‘cc’
[16:04:31.108] 
[16:04:31.108] getGlobalsAndPackages() ... DONE
[16:04:31.108] getGlobalsAndPackages() ...
[16:04:31.109] Searching for globals...
[16:04:31.109] - globals found: [3] ‘sprintf’, ‘rr’, ‘cc’
[16:04:31.109] Searching for globals ... DONE
[16:04:31.109] Resolving globals: FALSE
[16:04:31.110] The total size of the 2 globals is 112 bytes (112 bytes)
[16:04:31.110] The total size of the 2 globals exported for future expression (‘sprintf("(%s, %s)", rr, cc)’) is 112 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘rr’ (56 bytes of class ‘numeric’) and ‘cc’ (56 bytes of class ‘numeric’)
[16:04:31.110] - globals: [2] ‘rr’, ‘cc’
[16:04:31.110] 
[16:04:31.110] getGlobalsAndPackages() ... DONE
[16:04:31.111] getGlobalsAndPackages() ...
[16:04:31.111] Searching for globals...
[16:04:31.112] - globals found: [3] ‘sprintf’, ‘rr’, ‘cc’
[16:04:31.112] Searching for globals ... DONE
[16:04:31.113] Resolving globals: FALSE
[16:04:31.113] The total size of the 2 globals is 112 bytes (112 bytes)
[16:04:31.113] The total size of the 2 globals exported for future expression (‘sprintf("(%s, %s)", rr, cc)’) is 112 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘rr’ (56 bytes of class ‘numeric’) and ‘cc’ (56 bytes of class ‘numeric’)
[16:04:31.113] - globals: [2] ‘rr’, ‘cc’
[16:04:31.113] 
[16:04:31.114] getGlobalsAndPackages() ... DONE
[16:04:31.114] getGlobalsAndPackages() ...
[16:04:31.114] Searching for globals...
[16:04:31.115] - globals found: [3] ‘sprintf’, ‘rr’, ‘cc’
[16:04:31.115] Searching for globals ... DONE
[16:04:31.115] Resolving globals: FALSE
[16:04:31.115] The total size of the 2 globals is 112 bytes (112 bytes)
[16:04:31.116] The total size of the 2 globals exported for future expression (‘sprintf("(%s, %s)", rr, cc)’) is 112 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘rr’ (56 bytes of class ‘numeric’) and ‘cc’ (56 bytes of class ‘numeric’)
[16:04:31.116] - globals: [2] ‘rr’, ‘cc’
[16:04:31.116] 
[16:04:31.116] getGlobalsAndPackages() ... DONE
[16:04:31.116] getGlobalsAndPackages() ...
[16:04:31.116] Searching for globals...
[16:04:31.117] - globals found: [3] ‘sprintf’, ‘rr’, ‘cc’
[16:04:31.117] Searching for globals ... DONE
[16:04:31.117] Resolving globals: FALSE
[16:04:31.117] The total size of the 2 globals is 112 bytes (112 bytes)
[16:04:31.118] The total size of the 2 globals exported for future expression (‘sprintf("(%s, %s)", rr, cc)’) is 112 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘rr’ (56 bytes of class ‘numeric’) and ‘cc’ (56 bytes of class ‘numeric’)
[16:04:31.118] - globals: [2] ‘rr’, ‘cc’
[16:04:31.118] 
[16:04:31.118] getGlobalsAndPackages() ... DONE
[16:04:31.119] getGlobalsAndPackages() ...
[16:04:31.119] Searching for globals...
[16:04:31.119] - globals found: [3] ‘sprintf’, ‘rr’, ‘cc’
[16:04:31.119] Searching for globals ... DONE
[16:04:31.119] Resolving globals: FALSE
[16:04:31.120] The total size of the 2 globals is 112 bytes (112 bytes)
[16:04:31.120] The total size of the 2 globals exported for future expression (‘sprintf("(%s, %s)", rr, cc)’) is 112 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘rr’ (56 bytes of class ‘numeric’) and ‘cc’ (56 bytes of class ‘numeric’)
[16:04:31.120] - globals: [2] ‘rr’, ‘cc’
[16:04:31.120] 
[16:04:31.120] getGlobalsAndPackages() ... DONE
> 
> y <- as.list(x)
[16:04:31.121] run() for ‘Future’ ...
[16:04:31.121] - state: ‘created’
[16:04:31.121] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[16:04:31.121] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[16:04:31.121] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[16:04:31.121]   - Field: ‘label’
[16:04:31.121]   - Field: ‘local’
[16:04:31.122]   - Field: ‘owner’
[16:04:31.122]   - Field: ‘envir’
[16:04:31.122]   - Field: ‘packages’
[16:04:31.122]   - Field: ‘gc’
[16:04:31.122]   - Field: ‘conditions’
[16:04:31.122]   - Field: ‘expr’
[16:04:31.122]   - Field: ‘uuid’
[16:04:31.122]   - Field: ‘seed’
[16:04:31.122]   - Field: ‘version’
[16:04:31.122]   - Field: ‘result’
[16:04:31.122]   - Field: ‘asynchronous’
[16:04:31.123]   - Field: ‘calls’
[16:04:31.123]   - Field: ‘globals’
[16:04:31.123]   - Field: ‘stdout’
[16:04:31.123]   - Field: ‘earlySignal’
[16:04:31.123]   - Field: ‘lazy’
[16:04:31.123]   - Field: ‘state’
[16:04:31.123] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[16:04:31.123] - Launch lazy future ...
[16:04:31.123] Packages needed by the future expression (n = 0): <none>
[16:04:31.123] Packages needed by future strategies (n = 0): <none>
[16:04:31.124] {
[16:04:31.124]     {
[16:04:31.124]         {
[16:04:31.124]             ...future.startTime <- base::Sys.time()
[16:04:31.124]             {
[16:04:31.124]                 {
[16:04:31.124]                   {
[16:04:31.124]                     base::local({
[16:04:31.124]                       has_future <- base::requireNamespace("future", 
[16:04:31.124]                         quietly = TRUE)
[16:04:31.124]                       if (has_future) {
[16:04:31.124]                         ns <- base::getNamespace("future")
[16:04:31.124]                         version <- ns[[".package"]][["version"]]
[16:04:31.124]                         if (is.null(version)) 
[16:04:31.124]                           version <- utils::packageVersion("future")
[16:04:31.124]                       }
[16:04:31.124]                       else {
[16:04:31.124]                         version <- NULL
[16:04:31.124]                       }
[16:04:31.124]                       if (!has_future || version < "1.8.0") {
[16:04:31.124]                         info <- base::c(r_version = base::gsub("R version ", 
[16:04:31.124]                           "", base::R.version$version.string), 
[16:04:31.124]                           platform = base::sprintf("%s (%s-bit)", 
[16:04:31.124]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:04:31.124]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[16:04:31.124]                             "release", "version")], collapse = " "), 
[16:04:31.124]                           hostname = base::Sys.info()[["nodename"]])
[16:04:31.124]                         info <- base::sprintf("%s: %s", base::names(info), 
[16:04:31.124]                           info)
[16:04:31.124]                         info <- base::paste(info, collapse = "; ")
[16:04:31.124]                         if (!has_future) {
[16:04:31.124]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:04:31.124]                             info)
[16:04:31.124]                         }
[16:04:31.124]                         else {
[16:04:31.124]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:04:31.124]                             info, version)
[16:04:31.124]                         }
[16:04:31.124]                         base::stop(msg)
[16:04:31.124]                       }
[16:04:31.124]                     })
[16:04:31.124]                   }
[16:04:31.124]                   options(future.plan = NULL)
[16:04:31.124]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:04:31.124]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:04:31.124]                 }
[16:04:31.124]                 ...future.workdir <- getwd()
[16:04:31.124]             }
[16:04:31.124]             ...future.oldOptions <- base::as.list(base::.Options)
[16:04:31.124]             ...future.oldEnvVars <- base::Sys.getenv()
[16:04:31.124]         }
[16:04:31.124]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:04:31.124]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:04:31.124]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:04:31.124]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:04:31.124]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:04:31.124]             future.stdout.windows.reencode = NULL, width = 80L)
[16:04:31.124]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:04:31.124]             base::names(...future.oldOptions))
[16:04:31.124]     }
[16:04:31.124]     if (FALSE) {
[16:04:31.124]     }
[16:04:31.124]     else {
[16:04:31.124]         if (TRUE) {
[16:04:31.124]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:04:31.124]                 open = "w")
[16:04:31.124]         }
[16:04:31.124]         else {
[16:04:31.124]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:04:31.124]                 windows = "NUL", "/dev/null"), open = "w")
[16:04:31.124]         }
[16:04:31.124]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:04:31.124]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:04:31.124]             base::sink(type = "output", split = FALSE)
[16:04:31.124]             base::close(...future.stdout)
[16:04:31.124]         }, add = TRUE)
[16:04:31.124]     }
[16:04:31.124]     ...future.frame <- base::sys.nframe()
[16:04:31.124]     ...future.conditions <- base::list()
[16:04:31.124]     ...future.rng <- base::globalenv()$.Random.seed
[16:04:31.124]     if (FALSE) {
[16:04:31.124]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:04:31.124]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:04:31.124]     }
[16:04:31.124]     ...future.result <- base::tryCatch({
[16:04:31.124]         base::withCallingHandlers({
[16:04:31.124]             ...future.value <- base::withVisible(base::local(sprintf("(%s, %s)", 
[16:04:31.124]                 rr, cc)))
[16:04:31.124]             future::FutureResult(value = ...future.value$value, 
[16:04:31.124]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:04:31.124]                   ...future.rng), globalenv = if (FALSE) 
[16:04:31.124]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:04:31.124]                     ...future.globalenv.names))
[16:04:31.124]                 else NULL, started = ...future.startTime, version = "1.8")
[16:04:31.124]         }, condition = base::local({
[16:04:31.124]             c <- base::c
[16:04:31.124]             inherits <- base::inherits
[16:04:31.124]             invokeRestart <- base::invokeRestart
[16:04:31.124]             length <- base::length
[16:04:31.124]             list <- base::list
[16:04:31.124]             seq.int <- base::seq.int
[16:04:31.124]             signalCondition <- base::signalCondition
[16:04:31.124]             sys.calls <- base::sys.calls
[16:04:31.124]             `[[` <- base::`[[`
[16:04:31.124]             `+` <- base::`+`
[16:04:31.124]             `<<-` <- base::`<<-`
[16:04:31.124]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:04:31.124]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:04:31.124]                   3L)]
[16:04:31.124]             }
[16:04:31.124]             function(cond) {
[16:04:31.124]                 is_error <- inherits(cond, "error")
[16:04:31.124]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:04:31.124]                   NULL)
[16:04:31.124]                 if (is_error) {
[16:04:31.124]                   sessionInformation <- function() {
[16:04:31.124]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:04:31.124]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:04:31.124]                       search = base::search(), system = base::Sys.info())
[16:04:31.124]                   }
[16:04:31.124]                   ...future.conditions[[length(...future.conditions) + 
[16:04:31.124]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:04:31.124]                     cond$call), session = sessionInformation(), 
[16:04:31.124]                     timestamp = base::Sys.time(), signaled = 0L)
[16:04:31.124]                   signalCondition(cond)
[16:04:31.124]                 }
[16:04:31.124]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:04:31.124]                 "immediateCondition"))) {
[16:04:31.124]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:04:31.124]                   ...future.conditions[[length(...future.conditions) + 
[16:04:31.124]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:04:31.124]                   if (TRUE && !signal) {
[16:04:31.124]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:04:31.124]                     {
[16:04:31.124]                       inherits <- base::inherits
[16:04:31.124]                       invokeRestart <- base::invokeRestart
[16:04:31.124]                       is.null <- base::is.null
[16:04:31.124]                       muffled <- FALSE
[16:04:31.124]                       if (inherits(cond, "message")) {
[16:04:31.124]                         muffled <- grepl(pattern, "muffleMessage")
[16:04:31.124]                         if (muffled) 
[16:04:31.124]                           invokeRestart("muffleMessage")
[16:04:31.124]                       }
[16:04:31.124]                       else if (inherits(cond, "warning")) {
[16:04:31.124]                         muffled <- grepl(pattern, "muffleWarning")
[16:04:31.124]                         if (muffled) 
[16:04:31.124]                           invokeRestart("muffleWarning")
[16:04:31.124]                       }
[16:04:31.124]                       else if (inherits(cond, "condition")) {
[16:04:31.124]                         if (!is.null(pattern)) {
[16:04:31.124]                           computeRestarts <- base::computeRestarts
[16:04:31.124]                           grepl <- base::grepl
[16:04:31.124]                           restarts <- computeRestarts(cond)
[16:04:31.124]                           for (restart in restarts) {
[16:04:31.124]                             name <- restart$name
[16:04:31.124]                             if (is.null(name)) 
[16:04:31.124]                               next
[16:04:31.124]                             if (!grepl(pattern, name)) 
[16:04:31.124]                               next
[16:04:31.124]                             invokeRestart(restart)
[16:04:31.124]                             muffled <- TRUE
[16:04:31.124]                             break
[16:04:31.124]                           }
[16:04:31.124]                         }
[16:04:31.124]                       }
[16:04:31.124]                       invisible(muffled)
[16:04:31.124]                     }
[16:04:31.124]                     muffleCondition(cond, pattern = "^muffle")
[16:04:31.124]                   }
[16:04:31.124]                 }
[16:04:31.124]                 else {
[16:04:31.124]                   if (TRUE) {
[16:04:31.124]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:04:31.124]                     {
[16:04:31.124]                       inherits <- base::inherits
[16:04:31.124]                       invokeRestart <- base::invokeRestart
[16:04:31.124]                       is.null <- base::is.null
[16:04:31.124]                       muffled <- FALSE
[16:04:31.124]                       if (inherits(cond, "message")) {
[16:04:31.124]                         muffled <- grepl(pattern, "muffleMessage")
[16:04:31.124]                         if (muffled) 
[16:04:31.124]                           invokeRestart("muffleMessage")
[16:04:31.124]                       }
[16:04:31.124]                       else if (inherits(cond, "warning")) {
[16:04:31.124]                         muffled <- grepl(pattern, "muffleWarning")
[16:04:31.124]                         if (muffled) 
[16:04:31.124]                           invokeRestart("muffleWarning")
[16:04:31.124]                       }
[16:04:31.124]                       else if (inherits(cond, "condition")) {
[16:04:31.124]                         if (!is.null(pattern)) {
[16:04:31.124]                           computeRestarts <- base::computeRestarts
[16:04:31.124]                           grepl <- base::grepl
[16:04:31.124]                           restarts <- computeRestarts(cond)
[16:04:31.124]                           for (restart in restarts) {
[16:04:31.124]                             name <- restart$name
[16:04:31.124]                             if (is.null(name)) 
[16:04:31.124]                               next
[16:04:31.124]                             if (!grepl(pattern, name)) 
[16:04:31.124]                               next
[16:04:31.124]                             invokeRestart(restart)
[16:04:31.124]                             muffled <- TRUE
[16:04:31.124]                             break
[16:04:31.124]                           }
[16:04:31.124]                         }
[16:04:31.124]                       }
[16:04:31.124]                       invisible(muffled)
[16:04:31.124]                     }
[16:04:31.124]                     muffleCondition(cond, pattern = "^muffle")
[16:04:31.124]                   }
[16:04:31.124]                 }
[16:04:31.124]             }
[16:04:31.124]         }))
[16:04:31.124]     }, error = function(ex) {
[16:04:31.124]         base::structure(base::list(value = NULL, visible = NULL, 
[16:04:31.124]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:04:31.124]                 ...future.rng), started = ...future.startTime, 
[16:04:31.124]             finished = Sys.time(), session_uuid = NA_character_, 
[16:04:31.124]             version = "1.8"), class = "FutureResult")
[16:04:31.124]     }, finally = {
[16:04:31.124]         if (!identical(...future.workdir, getwd())) 
[16:04:31.124]             setwd(...future.workdir)
[16:04:31.124]         {
[16:04:31.124]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:04:31.124]                 ...future.oldOptions$nwarnings <- NULL
[16:04:31.124]             }
[16:04:31.124]             base::options(...future.oldOptions)
[16:04:31.124]             if (.Platform$OS.type == "windows") {
[16:04:31.124]                 old_names <- names(...future.oldEnvVars)
[16:04:31.124]                 envs <- base::Sys.getenv()
[16:04:31.124]                 names <- names(envs)
[16:04:31.124]                 common <- intersect(names, old_names)
[16:04:31.124]                 added <- setdiff(names, old_names)
[16:04:31.124]                 removed <- setdiff(old_names, names)
[16:04:31.124]                 changed <- common[...future.oldEnvVars[common] != 
[16:04:31.124]                   envs[common]]
[16:04:31.124]                 NAMES <- toupper(changed)
[16:04:31.124]                 args <- list()
[16:04:31.124]                 for (kk in seq_along(NAMES)) {
[16:04:31.124]                   name <- changed[[kk]]
[16:04:31.124]                   NAME <- NAMES[[kk]]
[16:04:31.124]                   if (name != NAME && is.element(NAME, old_names)) 
[16:04:31.124]                     next
[16:04:31.124]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:04:31.124]                 }
[16:04:31.124]                 NAMES <- toupper(added)
[16:04:31.124]                 for (kk in seq_along(NAMES)) {
[16:04:31.124]                   name <- added[[kk]]
[16:04:31.124]                   NAME <- NAMES[[kk]]
[16:04:31.124]                   if (name != NAME && is.element(NAME, old_names)) 
[16:04:31.124]                     next
[16:04:31.124]                   args[[name]] <- ""
[16:04:31.124]                 }
[16:04:31.124]                 NAMES <- toupper(removed)
[16:04:31.124]                 for (kk in seq_along(NAMES)) {
[16:04:31.124]                   name <- removed[[kk]]
[16:04:31.124]                   NAME <- NAMES[[kk]]
[16:04:31.124]                   if (name != NAME && is.element(NAME, old_names)) 
[16:04:31.124]                     next
[16:04:31.124]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:04:31.124]                 }
[16:04:31.124]                 if (length(args) > 0) 
[16:04:31.124]                   base::do.call(base::Sys.setenv, args = args)
[16:04:31.124]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:04:31.124]             }
[16:04:31.124]             else {
[16:04:31.124]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:04:31.124]             }
[16:04:31.124]             {
[16:04:31.124]                 if (base::length(...future.futureOptionsAdded) > 
[16:04:31.124]                   0L) {
[16:04:31.124]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:04:31.124]                   base::names(opts) <- ...future.futureOptionsAdded
[16:04:31.124]                   base::options(opts)
[16:04:31.124]                 }
[16:04:31.124]                 {
[16:04:31.124]                   {
[16:04:31.124]                     NULL
[16:04:31.124]                     RNGkind("Mersenne-Twister")
[16:04:31.124]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[16:04:31.124]                       inherits = FALSE)
[16:04:31.124]                   }
[16:04:31.124]                   options(future.plan = NULL)
[16:04:31.124]                   if (is.na(NA_character_)) 
[16:04:31.124]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:04:31.124]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:04:31.124]                   future::plan(list(function (..., envir = parent.frame()) 
[16:04:31.124]                   {
[16:04:31.124]                     future <- SequentialFuture(..., envir = envir)
[16:04:31.124]                     if (!future$lazy) 
[16:04:31.124]                       future <- run(future)
[16:04:31.124]                     invisible(future)
[16:04:31.124]                   }), .cleanup = FALSE, .init = FALSE)
[16:04:31.124]                 }
[16:04:31.124]             }
[16:04:31.124]         }
[16:04:31.124]     })
[16:04:31.124]     if (TRUE) {
[16:04:31.124]         base::sink(type = "output", split = FALSE)
[16:04:31.124]         if (TRUE) {
[16:04:31.124]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:04:31.124]         }
[16:04:31.124]         else {
[16:04:31.124]             ...future.result["stdout"] <- base::list(NULL)
[16:04:31.124]         }
[16:04:31.124]         base::close(...future.stdout)
[16:04:31.124]         ...future.stdout <- NULL
[16:04:31.124]     }
[16:04:31.124]     ...future.result$conditions <- ...future.conditions
[16:04:31.124]     ...future.result$finished <- base::Sys.time()
[16:04:31.124]     ...future.result
[16:04:31.124] }
[16:04:31.125] assign_globals() ...
[16:04:31.126] List of 2
[16:04:31.126]  $ rr: int 1
[16:04:31.126]  $ cc: int 1
[16:04:31.126]  - attr(*, "where")=List of 2
[16:04:31.126]   ..$ rr:<environment: R_EmptyEnv> 
[16:04:31.126]   ..$ cc:<environment: R_EmptyEnv> 
[16:04:31.126]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[16:04:31.126]  - attr(*, "resolved")= logi FALSE
[16:04:31.126]  - attr(*, "total_size")= num 112
[16:04:31.126]  - attr(*, "already-done")= logi TRUE
[16:04:31.128] - copied ‘rr’ to environment
[16:04:31.129] - copied ‘cc’ to environment
[16:04:31.129] assign_globals() ... done
[16:04:31.129] plan(): Setting new future strategy stack:
[16:04:31.129] List of future strategies:
[16:04:31.129] 1. sequential:
[16:04:31.129]    - args: function (..., envir = parent.frame())
[16:04:31.129]    - tweaked: FALSE
[16:04:31.129]    - call: NULL
[16:04:31.129] plan(): nbrOfWorkers() = 1
[16:04:31.130] plan(): Setting new future strategy stack:
[16:04:31.130] List of future strategies:
[16:04:31.130] 1. sequential:
[16:04:31.130]    - args: function (..., envir = parent.frame())
[16:04:31.130]    - tweaked: FALSE
[16:04:31.130]    - call: future::plan("sequential")
[16:04:31.130] plan(): nbrOfWorkers() = 1
[16:04:31.130] SequentialFuture started (and completed)
[16:04:31.131] - Launch lazy future ... done
[16:04:31.131] run() for ‘SequentialFuture’ ... done
[16:04:31.131] run() for ‘Future’ ...
[16:04:31.131] - state: ‘created’
[16:04:31.131] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[16:04:31.131] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[16:04:31.131] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[16:04:31.132]   - Field: ‘label’
[16:04:31.132]   - Field: ‘local’
[16:04:31.132]   - Field: ‘owner’
[16:04:31.132]   - Field: ‘envir’
[16:04:31.132]   - Field: ‘packages’
[16:04:31.132]   - Field: ‘gc’
[16:04:31.132]   - Field: ‘conditions’
[16:04:31.132]   - Field: ‘expr’
[16:04:31.132]   - Field: ‘uuid’
[16:04:31.132]   - Field: ‘seed’
[16:04:31.132]   - Field: ‘version’
[16:04:31.133]   - Field: ‘result’
[16:04:31.133]   - Field: ‘asynchronous’
[16:04:31.133]   - Field: ‘calls’
[16:04:31.133]   - Field: ‘globals’
[16:04:31.133]   - Field: ‘stdout’
[16:04:31.133]   - Field: ‘earlySignal’
[16:04:31.133]   - Field: ‘lazy’
[16:04:31.133]   - Field: ‘state’
[16:04:31.133] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[16:04:31.133] - Launch lazy future ...
[16:04:31.133] Packages needed by the future expression (n = 0): <none>
[16:04:31.134] Packages needed by future strategies (n = 0): <none>
[16:04:31.134] {
[16:04:31.134]     {
[16:04:31.134]         {
[16:04:31.134]             ...future.startTime <- base::Sys.time()
[16:04:31.134]             {
[16:04:31.134]                 {
[16:04:31.134]                   {
[16:04:31.134]                     base::local({
[16:04:31.134]                       has_future <- base::requireNamespace("future", 
[16:04:31.134]                         quietly = TRUE)
[16:04:31.134]                       if (has_future) {
[16:04:31.134]                         ns <- base::getNamespace("future")
[16:04:31.134]                         version <- ns[[".package"]][["version"]]
[16:04:31.134]                         if (is.null(version)) 
[16:04:31.134]                           version <- utils::packageVersion("future")
[16:04:31.134]                       }
[16:04:31.134]                       else {
[16:04:31.134]                         version <- NULL
[16:04:31.134]                       }
[16:04:31.134]                       if (!has_future || version < "1.8.0") {
[16:04:31.134]                         info <- base::c(r_version = base::gsub("R version ", 
[16:04:31.134]                           "", base::R.version$version.string), 
[16:04:31.134]                           platform = base::sprintf("%s (%s-bit)", 
[16:04:31.134]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:04:31.134]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[16:04:31.134]                             "release", "version")], collapse = " "), 
[16:04:31.134]                           hostname = base::Sys.info()[["nodename"]])
[16:04:31.134]                         info <- base::sprintf("%s: %s", base::names(info), 
[16:04:31.134]                           info)
[16:04:31.134]                         info <- base::paste(info, collapse = "; ")
[16:04:31.134]                         if (!has_future) {
[16:04:31.134]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:04:31.134]                             info)
[16:04:31.134]                         }
[16:04:31.134]                         else {
[16:04:31.134]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:04:31.134]                             info, version)
[16:04:31.134]                         }
[16:04:31.134]                         base::stop(msg)
[16:04:31.134]                       }
[16:04:31.134]                     })
[16:04:31.134]                   }
[16:04:31.134]                   options(future.plan = NULL)
[16:04:31.134]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:04:31.134]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:04:31.134]                 }
[16:04:31.134]                 ...future.workdir <- getwd()
[16:04:31.134]             }
[16:04:31.134]             ...future.oldOptions <- base::as.list(base::.Options)
[16:04:31.134]             ...future.oldEnvVars <- base::Sys.getenv()
[16:04:31.134]         }
[16:04:31.134]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:04:31.134]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:04:31.134]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:04:31.134]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:04:31.134]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:04:31.134]             future.stdout.windows.reencode = NULL, width = 80L)
[16:04:31.134]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:04:31.134]             base::names(...future.oldOptions))
[16:04:31.134]     }
[16:04:31.134]     if (FALSE) {
[16:04:31.134]     }
[16:04:31.134]     else {
[16:04:31.134]         if (TRUE) {
[16:04:31.134]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:04:31.134]                 open = "w")
[16:04:31.134]         }
[16:04:31.134]         else {
[16:04:31.134]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:04:31.134]                 windows = "NUL", "/dev/null"), open = "w")
[16:04:31.134]         }
[16:04:31.134]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:04:31.134]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:04:31.134]             base::sink(type = "output", split = FALSE)
[16:04:31.134]             base::close(...future.stdout)
[16:04:31.134]         }, add = TRUE)
[16:04:31.134]     }
[16:04:31.134]     ...future.frame <- base::sys.nframe()
[16:04:31.134]     ...future.conditions <- base::list()
[16:04:31.134]     ...future.rng <- base::globalenv()$.Random.seed
[16:04:31.134]     if (FALSE) {
[16:04:31.134]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:04:31.134]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:04:31.134]     }
[16:04:31.134]     ...future.result <- base::tryCatch({
[16:04:31.134]         base::withCallingHandlers({
[16:04:31.134]             ...future.value <- base::withVisible(base::local(sprintf("(%s, %s)", 
[16:04:31.134]                 rr, cc)))
[16:04:31.134]             future::FutureResult(value = ...future.value$value, 
[16:04:31.134]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:04:31.134]                   ...future.rng), globalenv = if (FALSE) 
[16:04:31.134]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:04:31.134]                     ...future.globalenv.names))
[16:04:31.134]                 else NULL, started = ...future.startTime, version = "1.8")
[16:04:31.134]         }, condition = base::local({
[16:04:31.134]             c <- base::c
[16:04:31.134]             inherits <- base::inherits
[16:04:31.134]             invokeRestart <- base::invokeRestart
[16:04:31.134]             length <- base::length
[16:04:31.134]             list <- base::list
[16:04:31.134]             seq.int <- base::seq.int
[16:04:31.134]             signalCondition <- base::signalCondition
[16:04:31.134]             sys.calls <- base::sys.calls
[16:04:31.134]             `[[` <- base::`[[`
[16:04:31.134]             `+` <- base::`+`
[16:04:31.134]             `<<-` <- base::`<<-`
[16:04:31.134]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:04:31.134]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:04:31.134]                   3L)]
[16:04:31.134]             }
[16:04:31.134]             function(cond) {
[16:04:31.134]                 is_error <- inherits(cond, "error")
[16:04:31.134]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:04:31.134]                   NULL)
[16:04:31.134]                 if (is_error) {
[16:04:31.134]                   sessionInformation <- function() {
[16:04:31.134]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:04:31.134]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:04:31.134]                       search = base::search(), system = base::Sys.info())
[16:04:31.134]                   }
[16:04:31.134]                   ...future.conditions[[length(...future.conditions) + 
[16:04:31.134]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:04:31.134]                     cond$call), session = sessionInformation(), 
[16:04:31.134]                     timestamp = base::Sys.time(), signaled = 0L)
[16:04:31.134]                   signalCondition(cond)
[16:04:31.134]                 }
[16:04:31.134]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:04:31.134]                 "immediateCondition"))) {
[16:04:31.134]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:04:31.134]                   ...future.conditions[[length(...future.conditions) + 
[16:04:31.134]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:04:31.134]                   if (TRUE && !signal) {
[16:04:31.134]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:04:31.134]                     {
[16:04:31.134]                       inherits <- base::inherits
[16:04:31.134]                       invokeRestart <- base::invokeRestart
[16:04:31.134]                       is.null <- base::is.null
[16:04:31.134]                       muffled <- FALSE
[16:04:31.134]                       if (inherits(cond, "message")) {
[16:04:31.134]                         muffled <- grepl(pattern, "muffleMessage")
[16:04:31.134]                         if (muffled) 
[16:04:31.134]                           invokeRestart("muffleMessage")
[16:04:31.134]                       }
[16:04:31.134]                       else if (inherits(cond, "warning")) {
[16:04:31.134]                         muffled <- grepl(pattern, "muffleWarning")
[16:04:31.134]                         if (muffled) 
[16:04:31.134]                           invokeRestart("muffleWarning")
[16:04:31.134]                       }
[16:04:31.134]                       else if (inherits(cond, "condition")) {
[16:04:31.134]                         if (!is.null(pattern)) {
[16:04:31.134]                           computeRestarts <- base::computeRestarts
[16:04:31.134]                           grepl <- base::grepl
[16:04:31.134]                           restarts <- computeRestarts(cond)
[16:04:31.134]                           for (restart in restarts) {
[16:04:31.134]                             name <- restart$name
[16:04:31.134]                             if (is.null(name)) 
[16:04:31.134]                               next
[16:04:31.134]                             if (!grepl(pattern, name)) 
[16:04:31.134]                               next
[16:04:31.134]                             invokeRestart(restart)
[16:04:31.134]                             muffled <- TRUE
[16:04:31.134]                             break
[16:04:31.134]                           }
[16:04:31.134]                         }
[16:04:31.134]                       }
[16:04:31.134]                       invisible(muffled)
[16:04:31.134]                     }
[16:04:31.134]                     muffleCondition(cond, pattern = "^muffle")
[16:04:31.134]                   }
[16:04:31.134]                 }
[16:04:31.134]                 else {
[16:04:31.134]                   if (TRUE) {
[16:04:31.134]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:04:31.134]                     {
[16:04:31.134]                       inherits <- base::inherits
[16:04:31.134]                       invokeRestart <- base::invokeRestart
[16:04:31.134]                       is.null <- base::is.null
[16:04:31.134]                       muffled <- FALSE
[16:04:31.134]                       if (inherits(cond, "message")) {
[16:04:31.134]                         muffled <- grepl(pattern, "muffleMessage")
[16:04:31.134]                         if (muffled) 
[16:04:31.134]                           invokeRestart("muffleMessage")
[16:04:31.134]                       }
[16:04:31.134]                       else if (inherits(cond, "warning")) {
[16:04:31.134]                         muffled <- grepl(pattern, "muffleWarning")
[16:04:31.134]                         if (muffled) 
[16:04:31.134]                           invokeRestart("muffleWarning")
[16:04:31.134]                       }
[16:04:31.134]                       else if (inherits(cond, "condition")) {
[16:04:31.134]                         if (!is.null(pattern)) {
[16:04:31.134]                           computeRestarts <- base::computeRestarts
[16:04:31.134]                           grepl <- base::grepl
[16:04:31.134]                           restarts <- computeRestarts(cond)
[16:04:31.134]                           for (restart in restarts) {
[16:04:31.134]                             name <- restart$name
[16:04:31.134]                             if (is.null(name)) 
[16:04:31.134]                               next
[16:04:31.134]                             if (!grepl(pattern, name)) 
[16:04:31.134]                               next
[16:04:31.134]                             invokeRestart(restart)
[16:04:31.134]                             muffled <- TRUE
[16:04:31.134]                             break
[16:04:31.134]                           }
[16:04:31.134]                         }
[16:04:31.134]                       }
[16:04:31.134]                       invisible(muffled)
[16:04:31.134]                     }
[16:04:31.134]                     muffleCondition(cond, pattern = "^muffle")
[16:04:31.134]                   }
[16:04:31.134]                 }
[16:04:31.134]             }
[16:04:31.134]         }))
[16:04:31.134]     }, error = function(ex) {
[16:04:31.134]         base::structure(base::list(value = NULL, visible = NULL, 
[16:04:31.134]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:04:31.134]                 ...future.rng), started = ...future.startTime, 
[16:04:31.134]             finished = Sys.time(), session_uuid = NA_character_, 
[16:04:31.134]             version = "1.8"), class = "FutureResult")
[16:04:31.134]     }, finally = {
[16:04:31.134]         if (!identical(...future.workdir, getwd())) 
[16:04:31.134]             setwd(...future.workdir)
[16:04:31.134]         {
[16:04:31.134]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:04:31.134]                 ...future.oldOptions$nwarnings <- NULL
[16:04:31.134]             }
[16:04:31.134]             base::options(...future.oldOptions)
[16:04:31.134]             if (.Platform$OS.type == "windows") {
[16:04:31.134]                 old_names <- names(...future.oldEnvVars)
[16:04:31.134]                 envs <- base::Sys.getenv()
[16:04:31.134]                 names <- names(envs)
[16:04:31.134]                 common <- intersect(names, old_names)
[16:04:31.134]                 added <- setdiff(names, old_names)
[16:04:31.134]                 removed <- setdiff(old_names, names)
[16:04:31.134]                 changed <- common[...future.oldEnvVars[common] != 
[16:04:31.134]                   envs[common]]
[16:04:31.134]                 NAMES <- toupper(changed)
[16:04:31.134]                 args <- list()
[16:04:31.134]                 for (kk in seq_along(NAMES)) {
[16:04:31.134]                   name <- changed[[kk]]
[16:04:31.134]                   NAME <- NAMES[[kk]]
[16:04:31.134]                   if (name != NAME && is.element(NAME, old_names)) 
[16:04:31.134]                     next
[16:04:31.134]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:04:31.134]                 }
[16:04:31.134]                 NAMES <- toupper(added)
[16:04:31.134]                 for (kk in seq_along(NAMES)) {
[16:04:31.134]                   name <- added[[kk]]
[16:04:31.134]                   NAME <- NAMES[[kk]]
[16:04:31.134]                   if (name != NAME && is.element(NAME, old_names)) 
[16:04:31.134]                     next
[16:04:31.134]                   args[[name]] <- ""
[16:04:31.134]                 }
[16:04:31.134]                 NAMES <- toupper(removed)
[16:04:31.134]                 for (kk in seq_along(NAMES)) {
[16:04:31.134]                   name <- removed[[kk]]
[16:04:31.134]                   NAME <- NAMES[[kk]]
[16:04:31.134]                   if (name != NAME && is.element(NAME, old_names)) 
[16:04:31.134]                     next
[16:04:31.134]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:04:31.134]                 }
[16:04:31.134]                 if (length(args) > 0) 
[16:04:31.134]                   base::do.call(base::Sys.setenv, args = args)
[16:04:31.134]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:04:31.134]             }
[16:04:31.134]             else {
[16:04:31.134]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:04:31.134]             }
[16:04:31.134]             {
[16:04:31.134]                 if (base::length(...future.futureOptionsAdded) > 
[16:04:31.134]                   0L) {
[16:04:31.134]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:04:31.134]                   base::names(opts) <- ...future.futureOptionsAdded
[16:04:31.134]                   base::options(opts)
[16:04:31.134]                 }
[16:04:31.134]                 {
[16:04:31.134]                   {
[16:04:31.134]                     NULL
[16:04:31.134]                     RNGkind("Mersenne-Twister")
[16:04:31.134]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[16:04:31.134]                       inherits = FALSE)
[16:04:31.134]                   }
[16:04:31.134]                   options(future.plan = NULL)
[16:04:31.134]                   if (is.na(NA_character_)) 
[16:04:31.134]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:04:31.134]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:04:31.134]                   future::plan(list(function (..., envir = parent.frame()) 
[16:04:31.134]                   {
[16:04:31.134]                     future <- SequentialFuture(..., envir = envir)
[16:04:31.134]                     if (!future$lazy) 
[16:04:31.134]                       future <- run(future)
[16:04:31.134]                     invisible(future)
[16:04:31.134]                   }), .cleanup = FALSE, .init = FALSE)
[16:04:31.134]                 }
[16:04:31.134]             }
[16:04:31.134]         }
[16:04:31.134]     })
[16:04:31.134]     if (TRUE) {
[16:04:31.134]         base::sink(type = "output", split = FALSE)
[16:04:31.134]         if (TRUE) {
[16:04:31.134]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:04:31.134]         }
[16:04:31.134]         else {
[16:04:31.134]             ...future.result["stdout"] <- base::list(NULL)
[16:04:31.134]         }
[16:04:31.134]         base::close(...future.stdout)
[16:04:31.134]         ...future.stdout <- NULL
[16:04:31.134]     }
[16:04:31.134]     ...future.result$conditions <- ...future.conditions
[16:04:31.134]     ...future.result$finished <- base::Sys.time()
[16:04:31.134]     ...future.result
[16:04:31.134] }
[16:04:31.135] assign_globals() ...
[16:04:31.136] List of 2
[16:04:31.136]  $ rr: int 2
[16:04:31.136]  $ cc: int 1
[16:04:31.136]  - attr(*, "where")=List of 2
[16:04:31.136]   ..$ rr:<environment: R_EmptyEnv> 
[16:04:31.136]   ..$ cc:<environment: R_EmptyEnv> 
[16:04:31.136]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[16:04:31.136]  - attr(*, "resolved")= logi FALSE
[16:04:31.136]  - attr(*, "total_size")= num 112
[16:04:31.136]  - attr(*, "already-done")= logi TRUE
[16:04:31.139] - copied ‘rr’ to environment
[16:04:31.139] - copied ‘cc’ to environment
[16:04:31.139] assign_globals() ... done
[16:04:31.140] plan(): Setting new future strategy stack:
[16:04:31.140] List of future strategies:
[16:04:31.140] 1. sequential:
[16:04:31.140]    - args: function (..., envir = parent.frame())
[16:04:31.140]    - tweaked: FALSE
[16:04:31.140]    - call: NULL
[16:04:31.140] plan(): nbrOfWorkers() = 1
[16:04:31.141] plan(): Setting new future strategy stack:
[16:04:31.141] List of future strategies:
[16:04:31.141] 1. sequential:
[16:04:31.141]    - args: function (..., envir = parent.frame())
[16:04:31.141]    - tweaked: FALSE
[16:04:31.141]    - call: future::plan("sequential")
[16:04:31.141] plan(): nbrOfWorkers() = 1
[16:04:31.141] SequentialFuture started (and completed)
[16:04:31.141] - Launch lazy future ... done
[16:04:31.141] run() for ‘SequentialFuture’ ... done
[16:04:31.142] run() for ‘Future’ ...
[16:04:31.142] - state: ‘created’
[16:04:31.142] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[16:04:31.142] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[16:04:31.142] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[16:04:31.142]   - Field: ‘label’
[16:04:31.142]   - Field: ‘local’
[16:04:31.142]   - Field: ‘owner’
[16:04:31.143]   - Field: ‘envir’
[16:04:31.143]   - Field: ‘packages’
[16:04:31.143]   - Field: ‘gc’
[16:04:31.143]   - Field: ‘conditions’
[16:04:31.143]   - Field: ‘expr’
[16:04:31.143]   - Field: ‘uuid’
[16:04:31.143]   - Field: ‘seed’
[16:04:31.143]   - Field: ‘version’
[16:04:31.143]   - Field: ‘result’
[16:04:31.143]   - Field: ‘asynchronous’
[16:04:31.143]   - Field: ‘calls’
[16:04:31.144]   - Field: ‘globals’
[16:04:31.144]   - Field: ‘stdout’
[16:04:31.144]   - Field: ‘earlySignal’
[16:04:31.144]   - Field: ‘lazy’
[16:04:31.144]   - Field: ‘state’
[16:04:31.144] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[16:04:31.144] - Launch lazy future ...
[16:04:31.144] Packages needed by the future expression (n = 0): <none>
[16:04:31.144] Packages needed by future strategies (n = 0): <none>
[16:04:31.145] {
[16:04:31.145]     {
[16:04:31.145]         {
[16:04:31.145]             ...future.startTime <- base::Sys.time()
[16:04:31.145]             {
[16:04:31.145]                 {
[16:04:31.145]                   {
[16:04:31.145]                     base::local({
[16:04:31.145]                       has_future <- base::requireNamespace("future", 
[16:04:31.145]                         quietly = TRUE)
[16:04:31.145]                       if (has_future) {
[16:04:31.145]                         ns <- base::getNamespace("future")
[16:04:31.145]                         version <- ns[[".package"]][["version"]]
[16:04:31.145]                         if (is.null(version)) 
[16:04:31.145]                           version <- utils::packageVersion("future")
[16:04:31.145]                       }
[16:04:31.145]                       else {
[16:04:31.145]                         version <- NULL
[16:04:31.145]                       }
[16:04:31.145]                       if (!has_future || version < "1.8.0") {
[16:04:31.145]                         info <- base::c(r_version = base::gsub("R version ", 
[16:04:31.145]                           "", base::R.version$version.string), 
[16:04:31.145]                           platform = base::sprintf("%s (%s-bit)", 
[16:04:31.145]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:04:31.145]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[16:04:31.145]                             "release", "version")], collapse = " "), 
[16:04:31.145]                           hostname = base::Sys.info()[["nodename"]])
[16:04:31.145]                         info <- base::sprintf("%s: %s", base::names(info), 
[16:04:31.145]                           info)
[16:04:31.145]                         info <- base::paste(info, collapse = "; ")
[16:04:31.145]                         if (!has_future) {
[16:04:31.145]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:04:31.145]                             info)
[16:04:31.145]                         }
[16:04:31.145]                         else {
[16:04:31.145]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:04:31.145]                             info, version)
[16:04:31.145]                         }
[16:04:31.145]                         base::stop(msg)
[16:04:31.145]                       }
[16:04:31.145]                     })
[16:04:31.145]                   }
[16:04:31.145]                   options(future.plan = NULL)
[16:04:31.145]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:04:31.145]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:04:31.145]                 }
[16:04:31.145]                 ...future.workdir <- getwd()
[16:04:31.145]             }
[16:04:31.145]             ...future.oldOptions <- base::as.list(base::.Options)
[16:04:31.145]             ...future.oldEnvVars <- base::Sys.getenv()
[16:04:31.145]         }
[16:04:31.145]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:04:31.145]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:04:31.145]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:04:31.145]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:04:31.145]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:04:31.145]             future.stdout.windows.reencode = NULL, width = 80L)
[16:04:31.145]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:04:31.145]             base::names(...future.oldOptions))
[16:04:31.145]     }
[16:04:31.145]     if (FALSE) {
[16:04:31.145]     }
[16:04:31.145]     else {
[16:04:31.145]         if (TRUE) {
[16:04:31.145]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:04:31.145]                 open = "w")
[16:04:31.145]         }
[16:04:31.145]         else {
[16:04:31.145]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:04:31.145]                 windows = "NUL", "/dev/null"), open = "w")
[16:04:31.145]         }
[16:04:31.145]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:04:31.145]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:04:31.145]             base::sink(type = "output", split = FALSE)
[16:04:31.145]             base::close(...future.stdout)
[16:04:31.145]         }, add = TRUE)
[16:04:31.145]     }
[16:04:31.145]     ...future.frame <- base::sys.nframe()
[16:04:31.145]     ...future.conditions <- base::list()
[16:04:31.145]     ...future.rng <- base::globalenv()$.Random.seed
[16:04:31.145]     if (FALSE) {
[16:04:31.145]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:04:31.145]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:04:31.145]     }
[16:04:31.145]     ...future.result <- base::tryCatch({
[16:04:31.145]         base::withCallingHandlers({
[16:04:31.145]             ...future.value <- base::withVisible(base::local(sprintf("(%s, %s)", 
[16:04:31.145]                 rr, cc)))
[16:04:31.145]             future::FutureResult(value = ...future.value$value, 
[16:04:31.145]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:04:31.145]                   ...future.rng), globalenv = if (FALSE) 
[16:04:31.145]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:04:31.145]                     ...future.globalenv.names))
[16:04:31.145]                 else NULL, started = ...future.startTime, version = "1.8")
[16:04:31.145]         }, condition = base::local({
[16:04:31.145]             c <- base::c
[16:04:31.145]             inherits <- base::inherits
[16:04:31.145]             invokeRestart <- base::invokeRestart
[16:04:31.145]             length <- base::length
[16:04:31.145]             list <- base::list
[16:04:31.145]             seq.int <- base::seq.int
[16:04:31.145]             signalCondition <- base::signalCondition
[16:04:31.145]             sys.calls <- base::sys.calls
[16:04:31.145]             `[[` <- base::`[[`
[16:04:31.145]             `+` <- base::`+`
[16:04:31.145]             `<<-` <- base::`<<-`
[16:04:31.145]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:04:31.145]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:04:31.145]                   3L)]
[16:04:31.145]             }
[16:04:31.145]             function(cond) {
[16:04:31.145]                 is_error <- inherits(cond, "error")
[16:04:31.145]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:04:31.145]                   NULL)
[16:04:31.145]                 if (is_error) {
[16:04:31.145]                   sessionInformation <- function() {
[16:04:31.145]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:04:31.145]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:04:31.145]                       search = base::search(), system = base::Sys.info())
[16:04:31.145]                   }
[16:04:31.145]                   ...future.conditions[[length(...future.conditions) + 
[16:04:31.145]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:04:31.145]                     cond$call), session = sessionInformation(), 
[16:04:31.145]                     timestamp = base::Sys.time(), signaled = 0L)
[16:04:31.145]                   signalCondition(cond)
[16:04:31.145]                 }
[16:04:31.145]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:04:31.145]                 "immediateCondition"))) {
[16:04:31.145]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:04:31.145]                   ...future.conditions[[length(...future.conditions) + 
[16:04:31.145]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:04:31.145]                   if (TRUE && !signal) {
[16:04:31.145]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:04:31.145]                     {
[16:04:31.145]                       inherits <- base::inherits
[16:04:31.145]                       invokeRestart <- base::invokeRestart
[16:04:31.145]                       is.null <- base::is.null
[16:04:31.145]                       muffled <- FALSE
[16:04:31.145]                       if (inherits(cond, "message")) {
[16:04:31.145]                         muffled <- grepl(pattern, "muffleMessage")
[16:04:31.145]                         if (muffled) 
[16:04:31.145]                           invokeRestart("muffleMessage")
[16:04:31.145]                       }
[16:04:31.145]                       else if (inherits(cond, "warning")) {
[16:04:31.145]                         muffled <- grepl(pattern, "muffleWarning")
[16:04:31.145]                         if (muffled) 
[16:04:31.145]                           invokeRestart("muffleWarning")
[16:04:31.145]                       }
[16:04:31.145]                       else if (inherits(cond, "condition")) {
[16:04:31.145]                         if (!is.null(pattern)) {
[16:04:31.145]                           computeRestarts <- base::computeRestarts
[16:04:31.145]                           grepl <- base::grepl
[16:04:31.145]                           restarts <- computeRestarts(cond)
[16:04:31.145]                           for (restart in restarts) {
[16:04:31.145]                             name <- restart$name
[16:04:31.145]                             if (is.null(name)) 
[16:04:31.145]                               next
[16:04:31.145]                             if (!grepl(pattern, name)) 
[16:04:31.145]                               next
[16:04:31.145]                             invokeRestart(restart)
[16:04:31.145]                             muffled <- TRUE
[16:04:31.145]                             break
[16:04:31.145]                           }
[16:04:31.145]                         }
[16:04:31.145]                       }
[16:04:31.145]                       invisible(muffled)
[16:04:31.145]                     }
[16:04:31.145]                     muffleCondition(cond, pattern = "^muffle")
[16:04:31.145]                   }
[16:04:31.145]                 }
[16:04:31.145]                 else {
[16:04:31.145]                   if (TRUE) {
[16:04:31.145]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:04:31.145]                     {
[16:04:31.145]                       inherits <- base::inherits
[16:04:31.145]                       invokeRestart <- base::invokeRestart
[16:04:31.145]                       is.null <- base::is.null
[16:04:31.145]                       muffled <- FALSE
[16:04:31.145]                       if (inherits(cond, "message")) {
[16:04:31.145]                         muffled <- grepl(pattern, "muffleMessage")
[16:04:31.145]                         if (muffled) 
[16:04:31.145]                           invokeRestart("muffleMessage")
[16:04:31.145]                       }
[16:04:31.145]                       else if (inherits(cond, "warning")) {
[16:04:31.145]                         muffled <- grepl(pattern, "muffleWarning")
[16:04:31.145]                         if (muffled) 
[16:04:31.145]                           invokeRestart("muffleWarning")
[16:04:31.145]                       }
[16:04:31.145]                       else if (inherits(cond, "condition")) {
[16:04:31.145]                         if (!is.null(pattern)) {
[16:04:31.145]                           computeRestarts <- base::computeRestarts
[16:04:31.145]                           grepl <- base::grepl
[16:04:31.145]                           restarts <- computeRestarts(cond)
[16:04:31.145]                           for (restart in restarts) {
[16:04:31.145]                             name <- restart$name
[16:04:31.145]                             if (is.null(name)) 
[16:04:31.145]                               next
[16:04:31.145]                             if (!grepl(pattern, name)) 
[16:04:31.145]                               next
[16:04:31.145]                             invokeRestart(restart)
[16:04:31.145]                             muffled <- TRUE
[16:04:31.145]                             break
[16:04:31.145]                           }
[16:04:31.145]                         }
[16:04:31.145]                       }
[16:04:31.145]                       invisible(muffled)
[16:04:31.145]                     }
[16:04:31.145]                     muffleCondition(cond, pattern = "^muffle")
[16:04:31.145]                   }
[16:04:31.145]                 }
[16:04:31.145]             }
[16:04:31.145]         }))
[16:04:31.145]     }, error = function(ex) {
[16:04:31.145]         base::structure(base::list(value = NULL, visible = NULL, 
[16:04:31.145]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:04:31.145]                 ...future.rng), started = ...future.startTime, 
[16:04:31.145]             finished = Sys.time(), session_uuid = NA_character_, 
[16:04:31.145]             version = "1.8"), class = "FutureResult")
[16:04:31.145]     }, finally = {
[16:04:31.145]         if (!identical(...future.workdir, getwd())) 
[16:04:31.145]             setwd(...future.workdir)
[16:04:31.145]         {
[16:04:31.145]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:04:31.145]                 ...future.oldOptions$nwarnings <- NULL
[16:04:31.145]             }
[16:04:31.145]             base::options(...future.oldOptions)
[16:04:31.145]             if (.Platform$OS.type == "windows") {
[16:04:31.145]                 old_names <- names(...future.oldEnvVars)
[16:04:31.145]                 envs <- base::Sys.getenv()
[16:04:31.145]                 names <- names(envs)
[16:04:31.145]                 common <- intersect(names, old_names)
[16:04:31.145]                 added <- setdiff(names, old_names)
[16:04:31.145]                 removed <- setdiff(old_names, names)
[16:04:31.145]                 changed <- common[...future.oldEnvVars[common] != 
[16:04:31.145]                   envs[common]]
[16:04:31.145]                 NAMES <- toupper(changed)
[16:04:31.145]                 args <- list()
[16:04:31.145]                 for (kk in seq_along(NAMES)) {
[16:04:31.145]                   name <- changed[[kk]]
[16:04:31.145]                   NAME <- NAMES[[kk]]
[16:04:31.145]                   if (name != NAME && is.element(NAME, old_names)) 
[16:04:31.145]                     next
[16:04:31.145]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:04:31.145]                 }
[16:04:31.145]                 NAMES <- toupper(added)
[16:04:31.145]                 for (kk in seq_along(NAMES)) {
[16:04:31.145]                   name <- added[[kk]]
[16:04:31.145]                   NAME <- NAMES[[kk]]
[16:04:31.145]                   if (name != NAME && is.element(NAME, old_names)) 
[16:04:31.145]                     next
[16:04:31.145]                   args[[name]] <- ""
[16:04:31.145]                 }
[16:04:31.145]                 NAMES <- toupper(removed)
[16:04:31.145]                 for (kk in seq_along(NAMES)) {
[16:04:31.145]                   name <- removed[[kk]]
[16:04:31.145]                   NAME <- NAMES[[kk]]
[16:04:31.145]                   if (name != NAME && is.element(NAME, old_names)) 
[16:04:31.145]                     next
[16:04:31.145]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:04:31.145]                 }
[16:04:31.145]                 if (length(args) > 0) 
[16:04:31.145]                   base::do.call(base::Sys.setenv, args = args)
[16:04:31.145]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:04:31.145]             }
[16:04:31.145]             else {
[16:04:31.145]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:04:31.145]             }
[16:04:31.145]             {
[16:04:31.145]                 if (base::length(...future.futureOptionsAdded) > 
[16:04:31.145]                   0L) {
[16:04:31.145]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:04:31.145]                   base::names(opts) <- ...future.futureOptionsAdded
[16:04:31.145]                   base::options(opts)
[16:04:31.145]                 }
[16:04:31.145]                 {
[16:04:31.145]                   {
[16:04:31.145]                     NULL
[16:04:31.145]                     RNGkind("Mersenne-Twister")
[16:04:31.145]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[16:04:31.145]                       inherits = FALSE)
[16:04:31.145]                   }
[16:04:31.145]                   options(future.plan = NULL)
[16:04:31.145]                   if (is.na(NA_character_)) 
[16:04:31.145]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:04:31.145]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:04:31.145]                   future::plan(list(function (..., envir = parent.frame()) 
[16:04:31.145]                   {
[16:04:31.145]                     future <- SequentialFuture(..., envir = envir)
[16:04:31.145]                     if (!future$lazy) 
[16:04:31.145]                       future <- run(future)
[16:04:31.145]                     invisible(future)
[16:04:31.145]                   }), .cleanup = FALSE, .init = FALSE)
[16:04:31.145]                 }
[16:04:31.145]             }
[16:04:31.145]         }
[16:04:31.145]     })
[16:04:31.145]     if (TRUE) {
[16:04:31.145]         base::sink(type = "output", split = FALSE)
[16:04:31.145]         if (TRUE) {
[16:04:31.145]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:04:31.145]         }
[16:04:31.145]         else {
[16:04:31.145]             ...future.result["stdout"] <- base::list(NULL)
[16:04:31.145]         }
[16:04:31.145]         base::close(...future.stdout)
[16:04:31.145]         ...future.stdout <- NULL
[16:04:31.145]     }
[16:04:31.145]     ...future.result$conditions <- ...future.conditions
[16:04:31.145]     ...future.result$finished <- base::Sys.time()
[16:04:31.145]     ...future.result
[16:04:31.145] }
[16:04:31.146] assign_globals() ...
[16:04:31.146] List of 2
[16:04:31.146]  $ rr: int 3
[16:04:31.146]  $ cc: int 1
[16:04:31.146]  - attr(*, "where")=List of 2
[16:04:31.146]   ..$ rr:<environment: R_EmptyEnv> 
[16:04:31.146]   ..$ cc:<environment: R_EmptyEnv> 
[16:04:31.146]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[16:04:31.146]  - attr(*, "resolved")= logi FALSE
[16:04:31.146]  - attr(*, "total_size")= num 112
[16:04:31.146]  - attr(*, "already-done")= logi TRUE
[16:04:31.149] - copied ‘rr’ to environment
[16:04:31.149] - copied ‘cc’ to environment
[16:04:31.149] assign_globals() ... done
[16:04:31.149] plan(): Setting new future strategy stack:
[16:04:31.150] List of future strategies:
[16:04:31.150] 1. sequential:
[16:04:31.150]    - args: function (..., envir = parent.frame())
[16:04:31.150]    - tweaked: FALSE
[16:04:31.150]    - call: NULL
[16:04:31.150] plan(): nbrOfWorkers() = 1
[16:04:31.150] plan(): Setting new future strategy stack:
[16:04:31.151] List of future strategies:
[16:04:31.151] 1. sequential:
[16:04:31.151]    - args: function (..., envir = parent.frame())
[16:04:31.151]    - tweaked: FALSE
[16:04:31.151]    - call: future::plan("sequential")
[16:04:31.151] plan(): nbrOfWorkers() = 1
[16:04:31.151] SequentialFuture started (and completed)
[16:04:31.151] - Launch lazy future ... done
[16:04:31.151] run() for ‘SequentialFuture’ ... done
[16:04:31.151] run() for ‘Future’ ...
[16:04:31.152] - state: ‘created’
[16:04:31.152] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[16:04:31.152] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[16:04:31.152] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[16:04:31.152]   - Field: ‘label’
[16:04:31.152]   - Field: ‘local’
[16:04:31.152]   - Field: ‘owner’
[16:04:31.152]   - Field: ‘envir’
[16:04:31.152]   - Field: ‘packages’
[16:04:31.153]   - Field: ‘gc’
[16:04:31.153]   - Field: ‘conditions’
[16:04:31.153]   - Field: ‘expr’
[16:04:31.153]   - Field: ‘uuid’
[16:04:31.153]   - Field: ‘seed’
[16:04:31.153]   - Field: ‘version’
[16:04:31.153]   - Field: ‘result’
[16:04:31.153]   - Field: ‘asynchronous’
[16:04:31.153]   - Field: ‘calls’
[16:04:31.153]   - Field: ‘globals’
[16:04:31.153]   - Field: ‘stdout’
[16:04:31.154]   - Field: ‘earlySignal’
[16:04:31.154]   - Field: ‘lazy’
[16:04:31.154]   - Field: ‘state’
[16:04:31.154] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[16:04:31.154] - Launch lazy future ...
[16:04:31.154] Packages needed by the future expression (n = 0): <none>
[16:04:31.154] Packages needed by future strategies (n = 0): <none>
[16:04:31.154] {
[16:04:31.154]     {
[16:04:31.154]         {
[16:04:31.154]             ...future.startTime <- base::Sys.time()
[16:04:31.154]             {
[16:04:31.154]                 {
[16:04:31.154]                   {
[16:04:31.154]                     base::local({
[16:04:31.154]                       has_future <- base::requireNamespace("future", 
[16:04:31.154]                         quietly = TRUE)
[16:04:31.154]                       if (has_future) {
[16:04:31.154]                         ns <- base::getNamespace("future")
[16:04:31.154]                         version <- ns[[".package"]][["version"]]
[16:04:31.154]                         if (is.null(version)) 
[16:04:31.154]                           version <- utils::packageVersion("future")
[16:04:31.154]                       }
[16:04:31.154]                       else {
[16:04:31.154]                         version <- NULL
[16:04:31.154]                       }
[16:04:31.154]                       if (!has_future || version < "1.8.0") {
[16:04:31.154]                         info <- base::c(r_version = base::gsub("R version ", 
[16:04:31.154]                           "", base::R.version$version.string), 
[16:04:31.154]                           platform = base::sprintf("%s (%s-bit)", 
[16:04:31.154]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:04:31.154]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[16:04:31.154]                             "release", "version")], collapse = " "), 
[16:04:31.154]                           hostname = base::Sys.info()[["nodename"]])
[16:04:31.154]                         info <- base::sprintf("%s: %s", base::names(info), 
[16:04:31.154]                           info)
[16:04:31.154]                         info <- base::paste(info, collapse = "; ")
[16:04:31.154]                         if (!has_future) {
[16:04:31.154]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:04:31.154]                             info)
[16:04:31.154]                         }
[16:04:31.154]                         else {
[16:04:31.154]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:04:31.154]                             info, version)
[16:04:31.154]                         }
[16:04:31.154]                         base::stop(msg)
[16:04:31.154]                       }
[16:04:31.154]                     })
[16:04:31.154]                   }
[16:04:31.154]                   options(future.plan = NULL)
[16:04:31.154]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:04:31.154]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:04:31.154]                 }
[16:04:31.154]                 ...future.workdir <- getwd()
[16:04:31.154]             }
[16:04:31.154]             ...future.oldOptions <- base::as.list(base::.Options)
[16:04:31.154]             ...future.oldEnvVars <- base::Sys.getenv()
[16:04:31.154]         }
[16:04:31.154]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:04:31.154]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:04:31.154]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:04:31.154]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:04:31.154]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:04:31.154]             future.stdout.windows.reencode = NULL, width = 80L)
[16:04:31.154]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:04:31.154]             base::names(...future.oldOptions))
[16:04:31.154]     }
[16:04:31.154]     if (FALSE) {
[16:04:31.154]     }
[16:04:31.154]     else {
[16:04:31.154]         if (TRUE) {
[16:04:31.154]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:04:31.154]                 open = "w")
[16:04:31.154]         }
[16:04:31.154]         else {
[16:04:31.154]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:04:31.154]                 windows = "NUL", "/dev/null"), open = "w")
[16:04:31.154]         }
[16:04:31.154]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:04:31.154]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:04:31.154]             base::sink(type = "output", split = FALSE)
[16:04:31.154]             base::close(...future.stdout)
[16:04:31.154]         }, add = TRUE)
[16:04:31.154]     }
[16:04:31.154]     ...future.frame <- base::sys.nframe()
[16:04:31.154]     ...future.conditions <- base::list()
[16:04:31.154]     ...future.rng <- base::globalenv()$.Random.seed
[16:04:31.154]     if (FALSE) {
[16:04:31.154]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:04:31.154]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:04:31.154]     }
[16:04:31.154]     ...future.result <- base::tryCatch({
[16:04:31.154]         base::withCallingHandlers({
[16:04:31.154]             ...future.value <- base::withVisible(base::local(sprintf("(%s, %s)", 
[16:04:31.154]                 rr, cc)))
[16:04:31.154]             future::FutureResult(value = ...future.value$value, 
[16:04:31.154]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:04:31.154]                   ...future.rng), globalenv = if (FALSE) 
[16:04:31.154]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:04:31.154]                     ...future.globalenv.names))
[16:04:31.154]                 else NULL, started = ...future.startTime, version = "1.8")
[16:04:31.154]         }, condition = base::local({
[16:04:31.154]             c <- base::c
[16:04:31.154]             inherits <- base::inherits
[16:04:31.154]             invokeRestart <- base::invokeRestart
[16:04:31.154]             length <- base::length
[16:04:31.154]             list <- base::list
[16:04:31.154]             seq.int <- base::seq.int
[16:04:31.154]             signalCondition <- base::signalCondition
[16:04:31.154]             sys.calls <- base::sys.calls
[16:04:31.154]             `[[` <- base::`[[`
[16:04:31.154]             `+` <- base::`+`
[16:04:31.154]             `<<-` <- base::`<<-`
[16:04:31.154]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:04:31.154]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:04:31.154]                   3L)]
[16:04:31.154]             }
[16:04:31.154]             function(cond) {
[16:04:31.154]                 is_error <- inherits(cond, "error")
[16:04:31.154]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:04:31.154]                   NULL)
[16:04:31.154]                 if (is_error) {
[16:04:31.154]                   sessionInformation <- function() {
[16:04:31.154]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:04:31.154]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:04:31.154]                       search = base::search(), system = base::Sys.info())
[16:04:31.154]                   }
[16:04:31.154]                   ...future.conditions[[length(...future.conditions) + 
[16:04:31.154]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:04:31.154]                     cond$call), session = sessionInformation(), 
[16:04:31.154]                     timestamp = base::Sys.time(), signaled = 0L)
[16:04:31.154]                   signalCondition(cond)
[16:04:31.154]                 }
[16:04:31.154]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:04:31.154]                 "immediateCondition"))) {
[16:04:31.154]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:04:31.154]                   ...future.conditions[[length(...future.conditions) + 
[16:04:31.154]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:04:31.154]                   if (TRUE && !signal) {
[16:04:31.154]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:04:31.154]                     {
[16:04:31.154]                       inherits <- base::inherits
[16:04:31.154]                       invokeRestart <- base::invokeRestart
[16:04:31.154]                       is.null <- base::is.null
[16:04:31.154]                       muffled <- FALSE
[16:04:31.154]                       if (inherits(cond, "message")) {
[16:04:31.154]                         muffled <- grepl(pattern, "muffleMessage")
[16:04:31.154]                         if (muffled) 
[16:04:31.154]                           invokeRestart("muffleMessage")
[16:04:31.154]                       }
[16:04:31.154]                       else if (inherits(cond, "warning")) {
[16:04:31.154]                         muffled <- grepl(pattern, "muffleWarning")
[16:04:31.154]                         if (muffled) 
[16:04:31.154]                           invokeRestart("muffleWarning")
[16:04:31.154]                       }
[16:04:31.154]                       else if (inherits(cond, "condition")) {
[16:04:31.154]                         if (!is.null(pattern)) {
[16:04:31.154]                           computeRestarts <- base::computeRestarts
[16:04:31.154]                           grepl <- base::grepl
[16:04:31.154]                           restarts <- computeRestarts(cond)
[16:04:31.154]                           for (restart in restarts) {
[16:04:31.154]                             name <- restart$name
[16:04:31.154]                             if (is.null(name)) 
[16:04:31.154]                               next
[16:04:31.154]                             if (!grepl(pattern, name)) 
[16:04:31.154]                               next
[16:04:31.154]                             invokeRestart(restart)
[16:04:31.154]                             muffled <- TRUE
[16:04:31.154]                             break
[16:04:31.154]                           }
[16:04:31.154]                         }
[16:04:31.154]                       }
[16:04:31.154]                       invisible(muffled)
[16:04:31.154]                     }
[16:04:31.154]                     muffleCondition(cond, pattern = "^muffle")
[16:04:31.154]                   }
[16:04:31.154]                 }
[16:04:31.154]                 else {
[16:04:31.154]                   if (TRUE) {
[16:04:31.154]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:04:31.154]                     {
[16:04:31.154]                       inherits <- base::inherits
[16:04:31.154]                       invokeRestart <- base::invokeRestart
[16:04:31.154]                       is.null <- base::is.null
[16:04:31.154]                       muffled <- FALSE
[16:04:31.154]                       if (inherits(cond, "message")) {
[16:04:31.154]                         muffled <- grepl(pattern, "muffleMessage")
[16:04:31.154]                         if (muffled) 
[16:04:31.154]                           invokeRestart("muffleMessage")
[16:04:31.154]                       }
[16:04:31.154]                       else if (inherits(cond, "warning")) {
[16:04:31.154]                         muffled <- grepl(pattern, "muffleWarning")
[16:04:31.154]                         if (muffled) 
[16:04:31.154]                           invokeRestart("muffleWarning")
[16:04:31.154]                       }
[16:04:31.154]                       else if (inherits(cond, "condition")) {
[16:04:31.154]                         if (!is.null(pattern)) {
[16:04:31.154]                           computeRestarts <- base::computeRestarts
[16:04:31.154]                           grepl <- base::grepl
[16:04:31.154]                           restarts <- computeRestarts(cond)
[16:04:31.154]                           for (restart in restarts) {
[16:04:31.154]                             name <- restart$name
[16:04:31.154]                             if (is.null(name)) 
[16:04:31.154]                               next
[16:04:31.154]                             if (!grepl(pattern, name)) 
[16:04:31.154]                               next
[16:04:31.154]                             invokeRestart(restart)
[16:04:31.154]                             muffled <- TRUE
[16:04:31.154]                             break
[16:04:31.154]                           }
[16:04:31.154]                         }
[16:04:31.154]                       }
[16:04:31.154]                       invisible(muffled)
[16:04:31.154]                     }
[16:04:31.154]                     muffleCondition(cond, pattern = "^muffle")
[16:04:31.154]                   }
[16:04:31.154]                 }
[16:04:31.154]             }
[16:04:31.154]         }))
[16:04:31.154]     }, error = function(ex) {
[16:04:31.154]         base::structure(base::list(value = NULL, visible = NULL, 
[16:04:31.154]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:04:31.154]                 ...future.rng), started = ...future.startTime, 
[16:04:31.154]             finished = Sys.time(), session_uuid = NA_character_, 
[16:04:31.154]             version = "1.8"), class = "FutureResult")
[16:04:31.154]     }, finally = {
[16:04:31.154]         if (!identical(...future.workdir, getwd())) 
[16:04:31.154]             setwd(...future.workdir)
[16:04:31.154]         {
[16:04:31.154]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:04:31.154]                 ...future.oldOptions$nwarnings <- NULL
[16:04:31.154]             }
[16:04:31.154]             base::options(...future.oldOptions)
[16:04:31.154]             if (.Platform$OS.type == "windows") {
[16:04:31.154]                 old_names <- names(...future.oldEnvVars)
[16:04:31.154]                 envs <- base::Sys.getenv()
[16:04:31.154]                 names <- names(envs)
[16:04:31.154]                 common <- intersect(names, old_names)
[16:04:31.154]                 added <- setdiff(names, old_names)
[16:04:31.154]                 removed <- setdiff(old_names, names)
[16:04:31.154]                 changed <- common[...future.oldEnvVars[common] != 
[16:04:31.154]                   envs[common]]
[16:04:31.154]                 NAMES <- toupper(changed)
[16:04:31.154]                 args <- list()
[16:04:31.154]                 for (kk in seq_along(NAMES)) {
[16:04:31.154]                   name <- changed[[kk]]
[16:04:31.154]                   NAME <- NAMES[[kk]]
[16:04:31.154]                   if (name != NAME && is.element(NAME, old_names)) 
[16:04:31.154]                     next
[16:04:31.154]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:04:31.154]                 }
[16:04:31.154]                 NAMES <- toupper(added)
[16:04:31.154]                 for (kk in seq_along(NAMES)) {
[16:04:31.154]                   name <- added[[kk]]
[16:04:31.154]                   NAME <- NAMES[[kk]]
[16:04:31.154]                   if (name != NAME && is.element(NAME, old_names)) 
[16:04:31.154]                     next
[16:04:31.154]                   args[[name]] <- ""
[16:04:31.154]                 }
[16:04:31.154]                 NAMES <- toupper(removed)
[16:04:31.154]                 for (kk in seq_along(NAMES)) {
[16:04:31.154]                   name <- removed[[kk]]
[16:04:31.154]                   NAME <- NAMES[[kk]]
[16:04:31.154]                   if (name != NAME && is.element(NAME, old_names)) 
[16:04:31.154]                     next
[16:04:31.154]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:04:31.154]                 }
[16:04:31.154]                 if (length(args) > 0) 
[16:04:31.154]                   base::do.call(base::Sys.setenv, args = args)
[16:04:31.154]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:04:31.154]             }
[16:04:31.154]             else {
[16:04:31.154]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:04:31.154]             }
[16:04:31.154]             {
[16:04:31.154]                 if (base::length(...future.futureOptionsAdded) > 
[16:04:31.154]                   0L) {
[16:04:31.154]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:04:31.154]                   base::names(opts) <- ...future.futureOptionsAdded
[16:04:31.154]                   base::options(opts)
[16:04:31.154]                 }
[16:04:31.154]                 {
[16:04:31.154]                   {
[16:04:31.154]                     NULL
[16:04:31.154]                     RNGkind("Mersenne-Twister")
[16:04:31.154]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[16:04:31.154]                       inherits = FALSE)
[16:04:31.154]                   }
[16:04:31.154]                   options(future.plan = NULL)
[16:04:31.154]                   if (is.na(NA_character_)) 
[16:04:31.154]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:04:31.154]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:04:31.154]                   future::plan(list(function (..., envir = parent.frame()) 
[16:04:31.154]                   {
[16:04:31.154]                     future <- SequentialFuture(..., envir = envir)
[16:04:31.154]                     if (!future$lazy) 
[16:04:31.154]                       future <- run(future)
[16:04:31.154]                     invisible(future)
[16:04:31.154]                   }), .cleanup = FALSE, .init = FALSE)
[16:04:31.154]                 }
[16:04:31.154]             }
[16:04:31.154]         }
[16:04:31.154]     })
[16:04:31.154]     if (TRUE) {
[16:04:31.154]         base::sink(type = "output", split = FALSE)
[16:04:31.154]         if (TRUE) {
[16:04:31.154]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:04:31.154]         }
[16:04:31.154]         else {
[16:04:31.154]             ...future.result["stdout"] <- base::list(NULL)
[16:04:31.154]         }
[16:04:31.154]         base::close(...future.stdout)
[16:04:31.154]         ...future.stdout <- NULL
[16:04:31.154]     }
[16:04:31.154]     ...future.result$conditions <- ...future.conditions
[16:04:31.154]     ...future.result$finished <- base::Sys.time()
[16:04:31.154]     ...future.result
[16:04:31.154] }
[16:04:31.156] assign_globals() ...
[16:04:31.156] List of 2
[16:04:31.156]  $ rr: int 1
[16:04:31.156]  $ cc: int 2
[16:04:31.156]  - attr(*, "where")=List of 2
[16:04:31.156]   ..$ rr:<environment: R_EmptyEnv> 
[16:04:31.156]   ..$ cc:<environment: R_EmptyEnv> 
[16:04:31.156]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[16:04:31.156]  - attr(*, "resolved")= logi FALSE
[16:04:31.156]  - attr(*, "total_size")= num 112
[16:04:31.156]  - attr(*, "already-done")= logi TRUE
[16:04:31.159] - copied ‘rr’ to environment
[16:04:31.159] - copied ‘cc’ to environment
[16:04:31.159] assign_globals() ... done
[16:04:31.159] plan(): Setting new future strategy stack:
[16:04:31.159] List of future strategies:
[16:04:31.159] 1. sequential:
[16:04:31.159]    - args: function (..., envir = parent.frame())
[16:04:31.159]    - tweaked: FALSE
[16:04:31.159]    - call: NULL
[16:04:31.160] plan(): nbrOfWorkers() = 1
[16:04:31.160] plan(): Setting new future strategy stack:
[16:04:31.160] List of future strategies:
[16:04:31.160] 1. sequential:
[16:04:31.160]    - args: function (..., envir = parent.frame())
[16:04:31.160]    - tweaked: FALSE
[16:04:31.160]    - call: future::plan("sequential")
[16:04:31.161] plan(): nbrOfWorkers() = 1
[16:04:31.161] SequentialFuture started (and completed)
[16:04:31.161] - Launch lazy future ... done
[16:04:31.161] run() for ‘SequentialFuture’ ... done
[16:04:31.161] run() for ‘Future’ ...
[16:04:31.161] - state: ‘created’
[16:04:31.162] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[16:04:31.162] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[16:04:31.162] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[16:04:31.162]   - Field: ‘label’
[16:04:31.162]   - Field: ‘local’
[16:04:31.162]   - Field: ‘owner’
[16:04:31.162]   - Field: ‘envir’
[16:04:31.162]   - Field: ‘packages’
[16:04:31.162]   - Field: ‘gc’
[16:04:31.163]   - Field: ‘conditions’
[16:04:31.163]   - Field: ‘expr’
[16:04:31.163]   - Field: ‘uuid’
[16:04:31.163]   - Field: ‘seed’
[16:04:31.163]   - Field: ‘version’
[16:04:31.163]   - Field: ‘result’
[16:04:31.163]   - Field: ‘asynchronous’
[16:04:31.163]   - Field: ‘calls’
[16:04:31.163]   - Field: ‘globals’
[16:04:31.163]   - Field: ‘stdout’
[16:04:31.163]   - Field: ‘earlySignal’
[16:04:31.163]   - Field: ‘lazy’
[16:04:31.164]   - Field: ‘state’
[16:04:31.164] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[16:04:31.164] - Launch lazy future ...
[16:04:31.164] Packages needed by the future expression (n = 0): <none>
[16:04:31.164] Packages needed by future strategies (n = 0): <none>
[16:04:31.165] {
[16:04:31.165]     {
[16:04:31.165]         {
[16:04:31.165]             ...future.startTime <- base::Sys.time()
[16:04:31.165]             {
[16:04:31.165]                 {
[16:04:31.165]                   {
[16:04:31.165]                     base::local({
[16:04:31.165]                       has_future <- base::requireNamespace("future", 
[16:04:31.165]                         quietly = TRUE)
[16:04:31.165]                       if (has_future) {
[16:04:31.165]                         ns <- base::getNamespace("future")
[16:04:31.165]                         version <- ns[[".package"]][["version"]]
[16:04:31.165]                         if (is.null(version)) 
[16:04:31.165]                           version <- utils::packageVersion("future")
[16:04:31.165]                       }
[16:04:31.165]                       else {
[16:04:31.165]                         version <- NULL
[16:04:31.165]                       }
[16:04:31.165]                       if (!has_future || version < "1.8.0") {
[16:04:31.165]                         info <- base::c(r_version = base::gsub("R version ", 
[16:04:31.165]                           "", base::R.version$version.string), 
[16:04:31.165]                           platform = base::sprintf("%s (%s-bit)", 
[16:04:31.165]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:04:31.165]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[16:04:31.165]                             "release", "version")], collapse = " "), 
[16:04:31.165]                           hostname = base::Sys.info()[["nodename"]])
[16:04:31.165]                         info <- base::sprintf("%s: %s", base::names(info), 
[16:04:31.165]                           info)
[16:04:31.165]                         info <- base::paste(info, collapse = "; ")
[16:04:31.165]                         if (!has_future) {
[16:04:31.165]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:04:31.165]                             info)
[16:04:31.165]                         }
[16:04:31.165]                         else {
[16:04:31.165]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:04:31.165]                             info, version)
[16:04:31.165]                         }
[16:04:31.165]                         base::stop(msg)
[16:04:31.165]                       }
[16:04:31.165]                     })
[16:04:31.165]                   }
[16:04:31.165]                   options(future.plan = NULL)
[16:04:31.165]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:04:31.165]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:04:31.165]                 }
[16:04:31.165]                 ...future.workdir <- getwd()
[16:04:31.165]             }
[16:04:31.165]             ...future.oldOptions <- base::as.list(base::.Options)
[16:04:31.165]             ...future.oldEnvVars <- base::Sys.getenv()
[16:04:31.165]         }
[16:04:31.165]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:04:31.165]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:04:31.165]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:04:31.165]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:04:31.165]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:04:31.165]             future.stdout.windows.reencode = NULL, width = 80L)
[16:04:31.165]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:04:31.165]             base::names(...future.oldOptions))
[16:04:31.165]     }
[16:04:31.165]     if (FALSE) {
[16:04:31.165]     }
[16:04:31.165]     else {
[16:04:31.165]         if (TRUE) {
[16:04:31.165]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:04:31.165]                 open = "w")
[16:04:31.165]         }
[16:04:31.165]         else {
[16:04:31.165]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:04:31.165]                 windows = "NUL", "/dev/null"), open = "w")
[16:04:31.165]         }
[16:04:31.165]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:04:31.165]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:04:31.165]             base::sink(type = "output", split = FALSE)
[16:04:31.165]             base::close(...future.stdout)
[16:04:31.165]         }, add = TRUE)
[16:04:31.165]     }
[16:04:31.165]     ...future.frame <- base::sys.nframe()
[16:04:31.165]     ...future.conditions <- base::list()
[16:04:31.165]     ...future.rng <- base::globalenv()$.Random.seed
[16:04:31.165]     if (FALSE) {
[16:04:31.165]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:04:31.165]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:04:31.165]     }
[16:04:31.165]     ...future.result <- base::tryCatch({
[16:04:31.165]         base::withCallingHandlers({
[16:04:31.165]             ...future.value <- base::withVisible(base::local(sprintf("(%s, %s)", 
[16:04:31.165]                 rr, cc)))
[16:04:31.165]             future::FutureResult(value = ...future.value$value, 
[16:04:31.165]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:04:31.165]                   ...future.rng), globalenv = if (FALSE) 
[16:04:31.165]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:04:31.165]                     ...future.globalenv.names))
[16:04:31.165]                 else NULL, started = ...future.startTime, version = "1.8")
[16:04:31.165]         }, condition = base::local({
[16:04:31.165]             c <- base::c
[16:04:31.165]             inherits <- base::inherits
[16:04:31.165]             invokeRestart <- base::invokeRestart
[16:04:31.165]             length <- base::length
[16:04:31.165]             list <- base::list
[16:04:31.165]             seq.int <- base::seq.int
[16:04:31.165]             signalCondition <- base::signalCondition
[16:04:31.165]             sys.calls <- base::sys.calls
[16:04:31.165]             `[[` <- base::`[[`
[16:04:31.165]             `+` <- base::`+`
[16:04:31.165]             `<<-` <- base::`<<-`
[16:04:31.165]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:04:31.165]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:04:31.165]                   3L)]
[16:04:31.165]             }
[16:04:31.165]             function(cond) {
[16:04:31.165]                 is_error <- inherits(cond, "error")
[16:04:31.165]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:04:31.165]                   NULL)
[16:04:31.165]                 if (is_error) {
[16:04:31.165]                   sessionInformation <- function() {
[16:04:31.165]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:04:31.165]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:04:31.165]                       search = base::search(), system = base::Sys.info())
[16:04:31.165]                   }
[16:04:31.165]                   ...future.conditions[[length(...future.conditions) + 
[16:04:31.165]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:04:31.165]                     cond$call), session = sessionInformation(), 
[16:04:31.165]                     timestamp = base::Sys.time(), signaled = 0L)
[16:04:31.165]                   signalCondition(cond)
[16:04:31.165]                 }
[16:04:31.165]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:04:31.165]                 "immediateCondition"))) {
[16:04:31.165]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:04:31.165]                   ...future.conditions[[length(...future.conditions) + 
[16:04:31.165]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:04:31.165]                   if (TRUE && !signal) {
[16:04:31.165]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:04:31.165]                     {
[16:04:31.165]                       inherits <- base::inherits
[16:04:31.165]                       invokeRestart <- base::invokeRestart
[16:04:31.165]                       is.null <- base::is.null
[16:04:31.165]                       muffled <- FALSE
[16:04:31.165]                       if (inherits(cond, "message")) {
[16:04:31.165]                         muffled <- grepl(pattern, "muffleMessage")
[16:04:31.165]                         if (muffled) 
[16:04:31.165]                           invokeRestart("muffleMessage")
[16:04:31.165]                       }
[16:04:31.165]                       else if (inherits(cond, "warning")) {
[16:04:31.165]                         muffled <- grepl(pattern, "muffleWarning")
[16:04:31.165]                         if (muffled) 
[16:04:31.165]                           invokeRestart("muffleWarning")
[16:04:31.165]                       }
[16:04:31.165]                       else if (inherits(cond, "condition")) {
[16:04:31.165]                         if (!is.null(pattern)) {
[16:04:31.165]                           computeRestarts <- base::computeRestarts
[16:04:31.165]                           grepl <- base::grepl
[16:04:31.165]                           restarts <- computeRestarts(cond)
[16:04:31.165]                           for (restart in restarts) {
[16:04:31.165]                             name <- restart$name
[16:04:31.165]                             if (is.null(name)) 
[16:04:31.165]                               next
[16:04:31.165]                             if (!grepl(pattern, name)) 
[16:04:31.165]                               next
[16:04:31.165]                             invokeRestart(restart)
[16:04:31.165]                             muffled <- TRUE
[16:04:31.165]                             break
[16:04:31.165]                           }
[16:04:31.165]                         }
[16:04:31.165]                       }
[16:04:31.165]                       invisible(muffled)
[16:04:31.165]                     }
[16:04:31.165]                     muffleCondition(cond, pattern = "^muffle")
[16:04:31.165]                   }
[16:04:31.165]                 }
[16:04:31.165]                 else {
[16:04:31.165]                   if (TRUE) {
[16:04:31.165]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:04:31.165]                     {
[16:04:31.165]                       inherits <- base::inherits
[16:04:31.165]                       invokeRestart <- base::invokeRestart
[16:04:31.165]                       is.null <- base::is.null
[16:04:31.165]                       muffled <- FALSE
[16:04:31.165]                       if (inherits(cond, "message")) {
[16:04:31.165]                         muffled <- grepl(pattern, "muffleMessage")
[16:04:31.165]                         if (muffled) 
[16:04:31.165]                           invokeRestart("muffleMessage")
[16:04:31.165]                       }
[16:04:31.165]                       else if (inherits(cond, "warning")) {
[16:04:31.165]                         muffled <- grepl(pattern, "muffleWarning")
[16:04:31.165]                         if (muffled) 
[16:04:31.165]                           invokeRestart("muffleWarning")
[16:04:31.165]                       }
[16:04:31.165]                       else if (inherits(cond, "condition")) {
[16:04:31.165]                         if (!is.null(pattern)) {
[16:04:31.165]                           computeRestarts <- base::computeRestarts
[16:04:31.165]                           grepl <- base::grepl
[16:04:31.165]                           restarts <- computeRestarts(cond)
[16:04:31.165]                           for (restart in restarts) {
[16:04:31.165]                             name <- restart$name
[16:04:31.165]                             if (is.null(name)) 
[16:04:31.165]                               next
[16:04:31.165]                             if (!grepl(pattern, name)) 
[16:04:31.165]                               next
[16:04:31.165]                             invokeRestart(restart)
[16:04:31.165]                             muffled <- TRUE
[16:04:31.165]                             break
[16:04:31.165]                           }
[16:04:31.165]                         }
[16:04:31.165]                       }
[16:04:31.165]                       invisible(muffled)
[16:04:31.165]                     }
[16:04:31.165]                     muffleCondition(cond, pattern = "^muffle")
[16:04:31.165]                   }
[16:04:31.165]                 }
[16:04:31.165]             }
[16:04:31.165]         }))
[16:04:31.165]     }, error = function(ex) {
[16:04:31.165]         base::structure(base::list(value = NULL, visible = NULL, 
[16:04:31.165]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:04:31.165]                 ...future.rng), started = ...future.startTime, 
[16:04:31.165]             finished = Sys.time(), session_uuid = NA_character_, 
[16:04:31.165]             version = "1.8"), class = "FutureResult")
[16:04:31.165]     }, finally = {
[16:04:31.165]         if (!identical(...future.workdir, getwd())) 
[16:04:31.165]             setwd(...future.workdir)
[16:04:31.165]         {
[16:04:31.165]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:04:31.165]                 ...future.oldOptions$nwarnings <- NULL
[16:04:31.165]             }
[16:04:31.165]             base::options(...future.oldOptions)
[16:04:31.165]             if (.Platform$OS.type == "windows") {
[16:04:31.165]                 old_names <- names(...future.oldEnvVars)
[16:04:31.165]                 envs <- base::Sys.getenv()
[16:04:31.165]                 names <- names(envs)
[16:04:31.165]                 common <- intersect(names, old_names)
[16:04:31.165]                 added <- setdiff(names, old_names)
[16:04:31.165]                 removed <- setdiff(old_names, names)
[16:04:31.165]                 changed <- common[...future.oldEnvVars[common] != 
[16:04:31.165]                   envs[common]]
[16:04:31.165]                 NAMES <- toupper(changed)
[16:04:31.165]                 args <- list()
[16:04:31.165]                 for (kk in seq_along(NAMES)) {
[16:04:31.165]                   name <- changed[[kk]]
[16:04:31.165]                   NAME <- NAMES[[kk]]
[16:04:31.165]                   if (name != NAME && is.element(NAME, old_names)) 
[16:04:31.165]                     next
[16:04:31.165]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:04:31.165]                 }
[16:04:31.165]                 NAMES <- toupper(added)
[16:04:31.165]                 for (kk in seq_along(NAMES)) {
[16:04:31.165]                   name <- added[[kk]]
[16:04:31.165]                   NAME <- NAMES[[kk]]
[16:04:31.165]                   if (name != NAME && is.element(NAME, old_names)) 
[16:04:31.165]                     next
[16:04:31.165]                   args[[name]] <- ""
[16:04:31.165]                 }
[16:04:31.165]                 NAMES <- toupper(removed)
[16:04:31.165]                 for (kk in seq_along(NAMES)) {
[16:04:31.165]                   name <- removed[[kk]]
[16:04:31.165]                   NAME <- NAMES[[kk]]
[16:04:31.165]                   if (name != NAME && is.element(NAME, old_names)) 
[16:04:31.165]                     next
[16:04:31.165]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:04:31.165]                 }
[16:04:31.165]                 if (length(args) > 0) 
[16:04:31.165]                   base::do.call(base::Sys.setenv, args = args)
[16:04:31.165]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:04:31.165]             }
[16:04:31.165]             else {
[16:04:31.165]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:04:31.165]             }
[16:04:31.165]             {
[16:04:31.165]                 if (base::length(...future.futureOptionsAdded) > 
[16:04:31.165]                   0L) {
[16:04:31.165]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:04:31.165]                   base::names(opts) <- ...future.futureOptionsAdded
[16:04:31.165]                   base::options(opts)
[16:04:31.165]                 }
[16:04:31.165]                 {
[16:04:31.165]                   {
[16:04:31.165]                     NULL
[16:04:31.165]                     RNGkind("Mersenne-Twister")
[16:04:31.165]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[16:04:31.165]                       inherits = FALSE)
[16:04:31.165]                   }
[16:04:31.165]                   options(future.plan = NULL)
[16:04:31.165]                   if (is.na(NA_character_)) 
[16:04:31.165]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:04:31.165]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:04:31.165]                   future::plan(list(function (..., envir = parent.frame()) 
[16:04:31.165]                   {
[16:04:31.165]                     future <- SequentialFuture(..., envir = envir)
[16:04:31.165]                     if (!future$lazy) 
[16:04:31.165]                       future <- run(future)
[16:04:31.165]                     invisible(future)
[16:04:31.165]                   }), .cleanup = FALSE, .init = FALSE)
[16:04:31.165]                 }
[16:04:31.165]             }
[16:04:31.165]         }
[16:04:31.165]     })
[16:04:31.165]     if (TRUE) {
[16:04:31.165]         base::sink(type = "output", split = FALSE)
[16:04:31.165]         if (TRUE) {
[16:04:31.165]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:04:31.165]         }
[16:04:31.165]         else {
[16:04:31.165]             ...future.result["stdout"] <- base::list(NULL)
[16:04:31.165]         }
[16:04:31.165]         base::close(...future.stdout)
[16:04:31.165]         ...future.stdout <- NULL
[16:04:31.165]     }
[16:04:31.165]     ...future.result$conditions <- ...future.conditions
[16:04:31.165]     ...future.result$finished <- base::Sys.time()
[16:04:31.165]     ...future.result
[16:04:31.165] }
[16:04:31.167] assign_globals() ...
[16:04:31.167] List of 2
[16:04:31.167]  $ rr: int 2
[16:04:31.167]  $ cc: int 2
[16:04:31.167]  - attr(*, "where")=List of 2
[16:04:31.167]   ..$ rr:<environment: R_EmptyEnv> 
[16:04:31.167]   ..$ cc:<environment: R_EmptyEnv> 
[16:04:31.167]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[16:04:31.167]  - attr(*, "resolved")= logi FALSE
[16:04:31.167]  - attr(*, "total_size")= num 112
[16:04:31.167]  - attr(*, "already-done")= logi TRUE
[16:04:31.170] - copied ‘rr’ to environment
[16:04:31.170] - copied ‘cc’ to environment
[16:04:31.170] assign_globals() ... done
[16:04:31.170] plan(): Setting new future strategy stack:
[16:04:31.170] List of future strategies:
[16:04:31.170] 1. sequential:
[16:04:31.170]    - args: function (..., envir = parent.frame())
[16:04:31.170]    - tweaked: FALSE
[16:04:31.170]    - call: NULL
[16:04:31.170] plan(): nbrOfWorkers() = 1
[16:04:31.171] plan(): Setting new future strategy stack:
[16:04:31.171] List of future strategies:
[16:04:31.171] 1. sequential:
[16:04:31.171]    - args: function (..., envir = parent.frame())
[16:04:31.171]    - tweaked: FALSE
[16:04:31.171]    - call: future::plan("sequential")
[16:04:31.171] plan(): nbrOfWorkers() = 1
[16:04:31.172] SequentialFuture started (and completed)
[16:04:31.172] - Launch lazy future ... done
[16:04:31.172] run() for ‘SequentialFuture’ ... done
[16:04:31.172] run() for ‘Future’ ...
[16:04:31.172] - state: ‘created’
[16:04:31.172] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[16:04:31.172] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[16:04:31.173] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[16:04:31.173]   - Field: ‘label’
[16:04:31.173]   - Field: ‘local’
[16:04:31.173]   - Field: ‘owner’
[16:04:31.173]   - Field: ‘envir’
[16:04:31.173]   - Field: ‘packages’
[16:04:31.173]   - Field: ‘gc’
[16:04:31.173]   - Field: ‘conditions’
[16:04:31.173]   - Field: ‘expr’
[16:04:31.173]   - Field: ‘uuid’
[16:04:31.173]   - Field: ‘seed’
[16:04:31.174]   - Field: ‘version’
[16:04:31.174]   - Field: ‘result’
[16:04:31.174]   - Field: ‘asynchronous’
[16:04:31.174]   - Field: ‘calls’
[16:04:31.174]   - Field: ‘globals’
[16:04:31.174]   - Field: ‘stdout’
[16:04:31.174]   - Field: ‘earlySignal’
[16:04:31.174]   - Field: ‘lazy’
[16:04:31.174]   - Field: ‘state’
[16:04:31.174] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[16:04:31.174] - Launch lazy future ...
[16:04:31.175] Packages needed by the future expression (n = 0): <none>
[16:04:31.175] Packages needed by future strategies (n = 0): <none>
[16:04:31.175] {
[16:04:31.175]     {
[16:04:31.175]         {
[16:04:31.175]             ...future.startTime <- base::Sys.time()
[16:04:31.175]             {
[16:04:31.175]                 {
[16:04:31.175]                   {
[16:04:31.175]                     base::local({
[16:04:31.175]                       has_future <- base::requireNamespace("future", 
[16:04:31.175]                         quietly = TRUE)
[16:04:31.175]                       if (has_future) {
[16:04:31.175]                         ns <- base::getNamespace("future")
[16:04:31.175]                         version <- ns[[".package"]][["version"]]
[16:04:31.175]                         if (is.null(version)) 
[16:04:31.175]                           version <- utils::packageVersion("future")
[16:04:31.175]                       }
[16:04:31.175]                       else {
[16:04:31.175]                         version <- NULL
[16:04:31.175]                       }
[16:04:31.175]                       if (!has_future || version < "1.8.0") {
[16:04:31.175]                         info <- base::c(r_version = base::gsub("R version ", 
[16:04:31.175]                           "", base::R.version$version.string), 
[16:04:31.175]                           platform = base::sprintf("%s (%s-bit)", 
[16:04:31.175]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:04:31.175]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[16:04:31.175]                             "release", "version")], collapse = " "), 
[16:04:31.175]                           hostname = base::Sys.info()[["nodename"]])
[16:04:31.175]                         info <- base::sprintf("%s: %s", base::names(info), 
[16:04:31.175]                           info)
[16:04:31.175]                         info <- base::paste(info, collapse = "; ")
[16:04:31.175]                         if (!has_future) {
[16:04:31.175]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:04:31.175]                             info)
[16:04:31.175]                         }
[16:04:31.175]                         else {
[16:04:31.175]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:04:31.175]                             info, version)
[16:04:31.175]                         }
[16:04:31.175]                         base::stop(msg)
[16:04:31.175]                       }
[16:04:31.175]                     })
[16:04:31.175]                   }
[16:04:31.175]                   options(future.plan = NULL)
[16:04:31.175]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:04:31.175]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:04:31.175]                 }
[16:04:31.175]                 ...future.workdir <- getwd()
[16:04:31.175]             }
[16:04:31.175]             ...future.oldOptions <- base::as.list(base::.Options)
[16:04:31.175]             ...future.oldEnvVars <- base::Sys.getenv()
[16:04:31.175]         }
[16:04:31.175]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:04:31.175]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:04:31.175]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:04:31.175]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:04:31.175]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:04:31.175]             future.stdout.windows.reencode = NULL, width = 80L)
[16:04:31.175]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:04:31.175]             base::names(...future.oldOptions))
[16:04:31.175]     }
[16:04:31.175]     if (FALSE) {
[16:04:31.175]     }
[16:04:31.175]     else {
[16:04:31.175]         if (TRUE) {
[16:04:31.175]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:04:31.175]                 open = "w")
[16:04:31.175]         }
[16:04:31.175]         else {
[16:04:31.175]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:04:31.175]                 windows = "NUL", "/dev/null"), open = "w")
[16:04:31.175]         }
[16:04:31.175]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:04:31.175]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:04:31.175]             base::sink(type = "output", split = FALSE)
[16:04:31.175]             base::close(...future.stdout)
[16:04:31.175]         }, add = TRUE)
[16:04:31.175]     }
[16:04:31.175]     ...future.frame <- base::sys.nframe()
[16:04:31.175]     ...future.conditions <- base::list()
[16:04:31.175]     ...future.rng <- base::globalenv()$.Random.seed
[16:04:31.175]     if (FALSE) {
[16:04:31.175]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:04:31.175]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:04:31.175]     }
[16:04:31.175]     ...future.result <- base::tryCatch({
[16:04:31.175]         base::withCallingHandlers({
[16:04:31.175]             ...future.value <- base::withVisible(base::local(sprintf("(%s, %s)", 
[16:04:31.175]                 rr, cc)))
[16:04:31.175]             future::FutureResult(value = ...future.value$value, 
[16:04:31.175]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:04:31.175]                   ...future.rng), globalenv = if (FALSE) 
[16:04:31.175]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:04:31.175]                     ...future.globalenv.names))
[16:04:31.175]                 else NULL, started = ...future.startTime, version = "1.8")
[16:04:31.175]         }, condition = base::local({
[16:04:31.175]             c <- base::c
[16:04:31.175]             inherits <- base::inherits
[16:04:31.175]             invokeRestart <- base::invokeRestart
[16:04:31.175]             length <- base::length
[16:04:31.175]             list <- base::list
[16:04:31.175]             seq.int <- base::seq.int
[16:04:31.175]             signalCondition <- base::signalCondition
[16:04:31.175]             sys.calls <- base::sys.calls
[16:04:31.175]             `[[` <- base::`[[`
[16:04:31.175]             `+` <- base::`+`
[16:04:31.175]             `<<-` <- base::`<<-`
[16:04:31.175]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:04:31.175]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:04:31.175]                   3L)]
[16:04:31.175]             }
[16:04:31.175]             function(cond) {
[16:04:31.175]                 is_error <- inherits(cond, "error")
[16:04:31.175]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:04:31.175]                   NULL)
[16:04:31.175]                 if (is_error) {
[16:04:31.175]                   sessionInformation <- function() {
[16:04:31.175]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:04:31.175]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:04:31.175]                       search = base::search(), system = base::Sys.info())
[16:04:31.175]                   }
[16:04:31.175]                   ...future.conditions[[length(...future.conditions) + 
[16:04:31.175]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:04:31.175]                     cond$call), session = sessionInformation(), 
[16:04:31.175]                     timestamp = base::Sys.time(), signaled = 0L)
[16:04:31.175]                   signalCondition(cond)
[16:04:31.175]                 }
[16:04:31.175]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:04:31.175]                 "immediateCondition"))) {
[16:04:31.175]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:04:31.175]                   ...future.conditions[[length(...future.conditions) + 
[16:04:31.175]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:04:31.175]                   if (TRUE && !signal) {
[16:04:31.175]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:04:31.175]                     {
[16:04:31.175]                       inherits <- base::inherits
[16:04:31.175]                       invokeRestart <- base::invokeRestart
[16:04:31.175]                       is.null <- base::is.null
[16:04:31.175]                       muffled <- FALSE
[16:04:31.175]                       if (inherits(cond, "message")) {
[16:04:31.175]                         muffled <- grepl(pattern, "muffleMessage")
[16:04:31.175]                         if (muffled) 
[16:04:31.175]                           invokeRestart("muffleMessage")
[16:04:31.175]                       }
[16:04:31.175]                       else if (inherits(cond, "warning")) {
[16:04:31.175]                         muffled <- grepl(pattern, "muffleWarning")
[16:04:31.175]                         if (muffled) 
[16:04:31.175]                           invokeRestart("muffleWarning")
[16:04:31.175]                       }
[16:04:31.175]                       else if (inherits(cond, "condition")) {
[16:04:31.175]                         if (!is.null(pattern)) {
[16:04:31.175]                           computeRestarts <- base::computeRestarts
[16:04:31.175]                           grepl <- base::grepl
[16:04:31.175]                           restarts <- computeRestarts(cond)
[16:04:31.175]                           for (restart in restarts) {
[16:04:31.175]                             name <- restart$name
[16:04:31.175]                             if (is.null(name)) 
[16:04:31.175]                               next
[16:04:31.175]                             if (!grepl(pattern, name)) 
[16:04:31.175]                               next
[16:04:31.175]                             invokeRestart(restart)
[16:04:31.175]                             muffled <- TRUE
[16:04:31.175]                             break
[16:04:31.175]                           }
[16:04:31.175]                         }
[16:04:31.175]                       }
[16:04:31.175]                       invisible(muffled)
[16:04:31.175]                     }
[16:04:31.175]                     muffleCondition(cond, pattern = "^muffle")
[16:04:31.175]                   }
[16:04:31.175]                 }
[16:04:31.175]                 else {
[16:04:31.175]                   if (TRUE) {
[16:04:31.175]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:04:31.175]                     {
[16:04:31.175]                       inherits <- base::inherits
[16:04:31.175]                       invokeRestart <- base::invokeRestart
[16:04:31.175]                       is.null <- base::is.null
[16:04:31.175]                       muffled <- FALSE
[16:04:31.175]                       if (inherits(cond, "message")) {
[16:04:31.175]                         muffled <- grepl(pattern, "muffleMessage")
[16:04:31.175]                         if (muffled) 
[16:04:31.175]                           invokeRestart("muffleMessage")
[16:04:31.175]                       }
[16:04:31.175]                       else if (inherits(cond, "warning")) {
[16:04:31.175]                         muffled <- grepl(pattern, "muffleWarning")
[16:04:31.175]                         if (muffled) 
[16:04:31.175]                           invokeRestart("muffleWarning")
[16:04:31.175]                       }
[16:04:31.175]                       else if (inherits(cond, "condition")) {
[16:04:31.175]                         if (!is.null(pattern)) {
[16:04:31.175]                           computeRestarts <- base::computeRestarts
[16:04:31.175]                           grepl <- base::grepl
[16:04:31.175]                           restarts <- computeRestarts(cond)
[16:04:31.175]                           for (restart in restarts) {
[16:04:31.175]                             name <- restart$name
[16:04:31.175]                             if (is.null(name)) 
[16:04:31.175]                               next
[16:04:31.175]                             if (!grepl(pattern, name)) 
[16:04:31.175]                               next
[16:04:31.175]                             invokeRestart(restart)
[16:04:31.175]                             muffled <- TRUE
[16:04:31.175]                             break
[16:04:31.175]                           }
[16:04:31.175]                         }
[16:04:31.175]                       }
[16:04:31.175]                       invisible(muffled)
[16:04:31.175]                     }
[16:04:31.175]                     muffleCondition(cond, pattern = "^muffle")
[16:04:31.175]                   }
[16:04:31.175]                 }
[16:04:31.175]             }
[16:04:31.175]         }))
[16:04:31.175]     }, error = function(ex) {
[16:04:31.175]         base::structure(base::list(value = NULL, visible = NULL, 
[16:04:31.175]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:04:31.175]                 ...future.rng), started = ...future.startTime, 
[16:04:31.175]             finished = Sys.time(), session_uuid = NA_character_, 
[16:04:31.175]             version = "1.8"), class = "FutureResult")
[16:04:31.175]     }, finally = {
[16:04:31.175]         if (!identical(...future.workdir, getwd())) 
[16:04:31.175]             setwd(...future.workdir)
[16:04:31.175]         {
[16:04:31.175]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:04:31.175]                 ...future.oldOptions$nwarnings <- NULL
[16:04:31.175]             }
[16:04:31.175]             base::options(...future.oldOptions)
[16:04:31.175]             if (.Platform$OS.type == "windows") {
[16:04:31.175]                 old_names <- names(...future.oldEnvVars)
[16:04:31.175]                 envs <- base::Sys.getenv()
[16:04:31.175]                 names <- names(envs)
[16:04:31.175]                 common <- intersect(names, old_names)
[16:04:31.175]                 added <- setdiff(names, old_names)
[16:04:31.175]                 removed <- setdiff(old_names, names)
[16:04:31.175]                 changed <- common[...future.oldEnvVars[common] != 
[16:04:31.175]                   envs[common]]
[16:04:31.175]                 NAMES <- toupper(changed)
[16:04:31.175]                 args <- list()
[16:04:31.175]                 for (kk in seq_along(NAMES)) {
[16:04:31.175]                   name <- changed[[kk]]
[16:04:31.175]                   NAME <- NAMES[[kk]]
[16:04:31.175]                   if (name != NAME && is.element(NAME, old_names)) 
[16:04:31.175]                     next
[16:04:31.175]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:04:31.175]                 }
[16:04:31.175]                 NAMES <- toupper(added)
[16:04:31.175]                 for (kk in seq_along(NAMES)) {
[16:04:31.175]                   name <- added[[kk]]
[16:04:31.175]                   NAME <- NAMES[[kk]]
[16:04:31.175]                   if (name != NAME && is.element(NAME, old_names)) 
[16:04:31.175]                     next
[16:04:31.175]                   args[[name]] <- ""
[16:04:31.175]                 }
[16:04:31.175]                 NAMES <- toupper(removed)
[16:04:31.175]                 for (kk in seq_along(NAMES)) {
[16:04:31.175]                   name <- removed[[kk]]
[16:04:31.175]                   NAME <- NAMES[[kk]]
[16:04:31.175]                   if (name != NAME && is.element(NAME, old_names)) 
[16:04:31.175]                     next
[16:04:31.175]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:04:31.175]                 }
[16:04:31.175]                 if (length(args) > 0) 
[16:04:31.175]                   base::do.call(base::Sys.setenv, args = args)
[16:04:31.175]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:04:31.175]             }
[16:04:31.175]             else {
[16:04:31.175]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:04:31.175]             }
[16:04:31.175]             {
[16:04:31.175]                 if (base::length(...future.futureOptionsAdded) > 
[16:04:31.175]                   0L) {
[16:04:31.175]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:04:31.175]                   base::names(opts) <- ...future.futureOptionsAdded
[16:04:31.175]                   base::options(opts)
[16:04:31.175]                 }
[16:04:31.175]                 {
[16:04:31.175]                   {
[16:04:31.175]                     NULL
[16:04:31.175]                     RNGkind("Mersenne-Twister")
[16:04:31.175]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[16:04:31.175]                       inherits = FALSE)
[16:04:31.175]                   }
[16:04:31.175]                   options(future.plan = NULL)
[16:04:31.175]                   if (is.na(NA_character_)) 
[16:04:31.175]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:04:31.175]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:04:31.175]                   future::plan(list(function (..., envir = parent.frame()) 
[16:04:31.175]                   {
[16:04:31.175]                     future <- SequentialFuture(..., envir = envir)
[16:04:31.175]                     if (!future$lazy) 
[16:04:31.175]                       future <- run(future)
[16:04:31.175]                     invisible(future)
[16:04:31.175]                   }), .cleanup = FALSE, .init = FALSE)
[16:04:31.175]                 }
[16:04:31.175]             }
[16:04:31.175]         }
[16:04:31.175]     })
[16:04:31.175]     if (TRUE) {
[16:04:31.175]         base::sink(type = "output", split = FALSE)
[16:04:31.175]         if (TRUE) {
[16:04:31.175]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:04:31.175]         }
[16:04:31.175]         else {
[16:04:31.175]             ...future.result["stdout"] <- base::list(NULL)
[16:04:31.175]         }
[16:04:31.175]         base::close(...future.stdout)
[16:04:31.175]         ...future.stdout <- NULL
[16:04:31.175]     }
[16:04:31.175]     ...future.result$conditions <- ...future.conditions
[16:04:31.175]     ...future.result$finished <- base::Sys.time()
[16:04:31.175]     ...future.result
[16:04:31.175] }
[16:04:31.177] assign_globals() ...
[16:04:31.177] List of 2
[16:04:31.177]  $ rr: int 3
[16:04:31.177]  $ cc: int 2
[16:04:31.177]  - attr(*, "where")=List of 2
[16:04:31.177]   ..$ rr:<environment: R_EmptyEnv> 
[16:04:31.177]   ..$ cc:<environment: R_EmptyEnv> 
[16:04:31.177]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[16:04:31.177]  - attr(*, "resolved")= logi FALSE
[16:04:31.177]  - attr(*, "total_size")= num 112
[16:04:31.177]  - attr(*, "already-done")= logi TRUE
[16:04:31.179] - copied ‘rr’ to environment
[16:04:31.179] - copied ‘cc’ to environment
[16:04:31.180] assign_globals() ... done
[16:04:31.180] plan(): Setting new future strategy stack:
[16:04:31.180] List of future strategies:
[16:04:31.180] 1. sequential:
[16:04:31.180]    - args: function (..., envir = parent.frame())
[16:04:31.180]    - tweaked: FALSE
[16:04:31.180]    - call: NULL
[16:04:31.180] plan(): nbrOfWorkers() = 1
[16:04:31.181] plan(): Setting new future strategy stack:
[16:04:31.181] List of future strategies:
[16:04:31.181] 1. sequential:
[16:04:31.181]    - args: function (..., envir = parent.frame())
[16:04:31.181]    - tweaked: FALSE
[16:04:31.181]    - call: future::plan("sequential")
[16:04:31.181] plan(): nbrOfWorkers() = 1
[16:04:31.181] SequentialFuture started (and completed)
[16:04:31.182] - Launch lazy future ... done
[16:04:31.182] run() for ‘SequentialFuture’ ... done
> dim(y) <- dim(x)
> stopifnot(identical(y, x0))
> 
> message("*** %<-% to listenv: multiple dimensions ... DONE")
*** %<-% to listenv: multiple dimensions ... DONE
> 
> message("*** %<-% to listenv ... DONE")
*** %<-% to listenv ... DONE
> 
> source("incl/end.R")
[16:04:31.182] plan(): Setting new future strategy stack:
[16:04:31.182] List of future strategies:
[16:04:31.182] 1. FutureStrategy:
[16:04:31.182]    - args: function (..., envir = parent.frame())
[16:04:31.182]    - tweaked: FALSE
[16:04:31.182]    - call: future::plan(oplan)
[16:04:31.193] plan(): nbrOfWorkers() = 1
> 
