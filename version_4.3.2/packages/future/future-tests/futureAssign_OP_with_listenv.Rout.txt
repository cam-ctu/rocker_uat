
R version 4.3.2 (2023-10-31) -- "Eye Holes"
Copyright (C) 2023 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> source("incl/start.R")
[13:22:54.443] plan(): Setting new future strategy stack:
[13:22:54.444] List of future strategies:
[13:22:54.444] 1. sequential:
[13:22:54.444]    - args: function (..., envir = parent.frame())
[13:22:54.444]    - tweaked: FALSE
[13:22:54.444]    - call: future::plan("sequential")
[13:22:54.459] plan(): nbrOfWorkers() = 1
> library("listenv")
> 
> message("*** %<-% to listenv ...")
*** %<-% to listenv ...
> 
> ## - - - - - - - - - - - - - - - - - - - - - - - - - - - -
> ## Future assignment via infix operator
> ## - - - - - - - - - - - - - - - - - - - - - - - - - - - -
> z <- listenv()
> stopifnot(length(names(z)) == 0)
> 
> message("*** %<-% to listenv: Assign by index")
*** %<-% to listenv: Assign by index
> z[[1]] %<-% { 2 } %lazy% TRUE
[13:22:54.474] getGlobalsAndPackages() ...
[13:22:54.475] Searching for globals...
[13:22:54.478] - globals found: [1] ‘{’
[13:22:54.478] Searching for globals ... DONE
[13:22:54.478] Resolving globals: FALSE
[13:22:54.479] 
[13:22:54.479] 
[13:22:54.479] getGlobalsAndPackages() ... DONE
> stopifnot(length(z) == 1)
> stopifnot(length(names(z)) == 0)
> 
> z[[1]] %<-% { 2 } %lazy% TRUE
[13:22:54.480] getGlobalsAndPackages() ...
[13:22:54.480] Searching for globals...
[13:22:54.480] - globals found: [1] ‘{’
[13:22:54.481] Searching for globals ... DONE
[13:22:54.481] Resolving globals: FALSE
[13:22:54.481] 
[13:22:54.481] 
[13:22:54.481] getGlobalsAndPackages() ... DONE
> stopifnot(length(z) == 1)
> stopifnot(length(names(z)) == 0)
> 
> z[[4]] %<-% { "async!" } %lazy% TRUE
[13:22:54.482] getGlobalsAndPackages() ...
[13:22:54.482] Searching for globals...
[13:22:54.482] - globals found: [1] ‘{’
[13:22:54.482] Searching for globals ... DONE
[13:22:54.482] Resolving globals: FALSE
[13:22:54.483] 
[13:22:54.483] 
[13:22:54.483] getGlobalsAndPackages() ... DONE
> stopifnot(length(z) == 4)
> stopifnot(length(names(z)) == 0)
> 
> message("*** %<-% to listenv: Update names")
*** %<-% to listenv: Update names
> names(z) <- c("A", "B", "C", "D")
> stopifnot(identical(names(z), c("A", "B", "C", "D")))
> 
> 
> message("*** %<-% to listenv: Assign by name (existing)")
*** %<-% to listenv: Assign by name (existing)
> z$B %<-% { TRUE } %lazy% TRUE
[13:22:54.484] getGlobalsAndPackages() ...
[13:22:54.484] Searching for globals...
[13:22:54.484] - globals found: [1] ‘{’
[13:22:54.485] Searching for globals ... DONE
[13:22:54.485] Resolving globals: FALSE
[13:22:54.485] 
[13:22:54.485] 
[13:22:54.485] getGlobalsAndPackages() ... DONE
> stopifnot(length(z) == 4)
> stopifnot(identical(names(z), c("A", "B", "C", "D")))
> 
> y <- as.list(z)
[13:22:54.486] run() for ‘Future’ ...
[13:22:54.486] - state: ‘created’
[13:22:54.486] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[13:22:54.487] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[13:22:54.487] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[13:22:54.487]   - Field: ‘label’
[13:22:54.487]   - Field: ‘local’
[13:22:54.487]   - Field: ‘owner’
[13:22:54.487]   - Field: ‘envir’
[13:22:54.487]   - Field: ‘packages’
[13:22:54.487]   - Field: ‘gc’
[13:22:54.488]   - Field: ‘conditions’
[13:22:54.488]   - Field: ‘expr’
[13:22:54.488]   - Field: ‘uuid’
[13:22:54.488]   - Field: ‘seed’
[13:22:54.488]   - Field: ‘version’
[13:22:54.488]   - Field: ‘result’
[13:22:54.488]   - Field: ‘asynchronous’
[13:22:54.488]   - Field: ‘calls’
[13:22:54.488]   - Field: ‘globals’
[13:22:54.488]   - Field: ‘stdout’
[13:22:54.489]   - Field: ‘earlySignal’
[13:22:54.489]   - Field: ‘lazy’
[13:22:54.489]   - Field: ‘state’
[13:22:54.489] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[13:22:54.489] - Launch lazy future ...
[13:22:54.490] Packages needed by the future expression (n = 0): <none>
[13:22:54.490] Packages needed by future strategies (n = 0): <none>
[13:22:54.491] {
[13:22:54.491]     {
[13:22:54.491]         {
[13:22:54.491]             ...future.startTime <- base::Sys.time()
[13:22:54.491]             {
[13:22:54.491]                 {
[13:22:54.491]                   {
[13:22:54.491]                     base::local({
[13:22:54.491]                       has_future <- base::requireNamespace("future", 
[13:22:54.491]                         quietly = TRUE)
[13:22:54.491]                       if (has_future) {
[13:22:54.491]                         ns <- base::getNamespace("future")
[13:22:54.491]                         version <- ns[[".package"]][["version"]]
[13:22:54.491]                         if (is.null(version)) 
[13:22:54.491]                           version <- utils::packageVersion("future")
[13:22:54.491]                       }
[13:22:54.491]                       else {
[13:22:54.491]                         version <- NULL
[13:22:54.491]                       }
[13:22:54.491]                       if (!has_future || version < "1.8.0") {
[13:22:54.491]                         info <- base::c(r_version = base::gsub("R version ", 
[13:22:54.491]                           "", base::R.version$version.string), 
[13:22:54.491]                           platform = base::sprintf("%s (%s-bit)", 
[13:22:54.491]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:22:54.491]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[13:22:54.491]                             "release", "version")], collapse = " "), 
[13:22:54.491]                           hostname = base::Sys.info()[["nodename"]])
[13:22:54.491]                         info <- base::sprintf("%s: %s", base::names(info), 
[13:22:54.491]                           info)
[13:22:54.491]                         info <- base::paste(info, collapse = "; ")
[13:22:54.491]                         if (!has_future) {
[13:22:54.491]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:22:54.491]                             info)
[13:22:54.491]                         }
[13:22:54.491]                         else {
[13:22:54.491]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:22:54.491]                             info, version)
[13:22:54.491]                         }
[13:22:54.491]                         base::stop(msg)
[13:22:54.491]                       }
[13:22:54.491]                     })
[13:22:54.491]                   }
[13:22:54.491]                   options(future.plan = NULL)
[13:22:54.491]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:22:54.491]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:22:54.491]                 }
[13:22:54.491]                 ...future.workdir <- getwd()
[13:22:54.491]             }
[13:22:54.491]             ...future.oldOptions <- base::as.list(base::.Options)
[13:22:54.491]             ...future.oldEnvVars <- base::Sys.getenv()
[13:22:54.491]         }
[13:22:54.491]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:22:54.491]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:22:54.491]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:22:54.491]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:22:54.491]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:22:54.491]             future.stdout.windows.reencode = NULL, width = 80L)
[13:22:54.491]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:22:54.491]             base::names(...future.oldOptions))
[13:22:54.491]     }
[13:22:54.491]     if (FALSE) {
[13:22:54.491]     }
[13:22:54.491]     else {
[13:22:54.491]         if (TRUE) {
[13:22:54.491]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:22:54.491]                 open = "w")
[13:22:54.491]         }
[13:22:54.491]         else {
[13:22:54.491]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:22:54.491]                 windows = "NUL", "/dev/null"), open = "w")
[13:22:54.491]         }
[13:22:54.491]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:22:54.491]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:22:54.491]             base::sink(type = "output", split = FALSE)
[13:22:54.491]             base::close(...future.stdout)
[13:22:54.491]         }, add = TRUE)
[13:22:54.491]     }
[13:22:54.491]     ...future.frame <- base::sys.nframe()
[13:22:54.491]     ...future.conditions <- base::list()
[13:22:54.491]     ...future.rng <- base::globalenv()$.Random.seed
[13:22:54.491]     if (FALSE) {
[13:22:54.491]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:22:54.491]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:22:54.491]     }
[13:22:54.491]     ...future.result <- base::tryCatch({
[13:22:54.491]         base::withCallingHandlers({
[13:22:54.491]             ...future.value <- base::withVisible(base::local({
[13:22:54.491]                 2
[13:22:54.491]             }))
[13:22:54.491]             future::FutureResult(value = ...future.value$value, 
[13:22:54.491]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:22:54.491]                   ...future.rng), globalenv = if (FALSE) 
[13:22:54.491]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:22:54.491]                     ...future.globalenv.names))
[13:22:54.491]                 else NULL, started = ...future.startTime, version = "1.8")
[13:22:54.491]         }, condition = base::local({
[13:22:54.491]             c <- base::c
[13:22:54.491]             inherits <- base::inherits
[13:22:54.491]             invokeRestart <- base::invokeRestart
[13:22:54.491]             length <- base::length
[13:22:54.491]             list <- base::list
[13:22:54.491]             seq.int <- base::seq.int
[13:22:54.491]             signalCondition <- base::signalCondition
[13:22:54.491]             sys.calls <- base::sys.calls
[13:22:54.491]             `[[` <- base::`[[`
[13:22:54.491]             `+` <- base::`+`
[13:22:54.491]             `<<-` <- base::`<<-`
[13:22:54.491]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:22:54.491]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:22:54.491]                   3L)]
[13:22:54.491]             }
[13:22:54.491]             function(cond) {
[13:22:54.491]                 is_error <- inherits(cond, "error")
[13:22:54.491]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:22:54.491]                   NULL)
[13:22:54.491]                 if (is_error) {
[13:22:54.491]                   sessionInformation <- function() {
[13:22:54.491]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:22:54.491]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:22:54.491]                       search = base::search(), system = base::Sys.info())
[13:22:54.491]                   }
[13:22:54.491]                   ...future.conditions[[length(...future.conditions) + 
[13:22:54.491]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:22:54.491]                     cond$call), session = sessionInformation(), 
[13:22:54.491]                     timestamp = base::Sys.time(), signaled = 0L)
[13:22:54.491]                   signalCondition(cond)
[13:22:54.491]                 }
[13:22:54.491]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:22:54.491]                 "immediateCondition"))) {
[13:22:54.491]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:22:54.491]                   ...future.conditions[[length(...future.conditions) + 
[13:22:54.491]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:22:54.491]                   if (TRUE && !signal) {
[13:22:54.491]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:22:54.491]                     {
[13:22:54.491]                       inherits <- base::inherits
[13:22:54.491]                       invokeRestart <- base::invokeRestart
[13:22:54.491]                       is.null <- base::is.null
[13:22:54.491]                       muffled <- FALSE
[13:22:54.491]                       if (inherits(cond, "message")) {
[13:22:54.491]                         muffled <- grepl(pattern, "muffleMessage")
[13:22:54.491]                         if (muffled) 
[13:22:54.491]                           invokeRestart("muffleMessage")
[13:22:54.491]                       }
[13:22:54.491]                       else if (inherits(cond, "warning")) {
[13:22:54.491]                         muffled <- grepl(pattern, "muffleWarning")
[13:22:54.491]                         if (muffled) 
[13:22:54.491]                           invokeRestart("muffleWarning")
[13:22:54.491]                       }
[13:22:54.491]                       else if (inherits(cond, "condition")) {
[13:22:54.491]                         if (!is.null(pattern)) {
[13:22:54.491]                           computeRestarts <- base::computeRestarts
[13:22:54.491]                           grepl <- base::grepl
[13:22:54.491]                           restarts <- computeRestarts(cond)
[13:22:54.491]                           for (restart in restarts) {
[13:22:54.491]                             name <- restart$name
[13:22:54.491]                             if (is.null(name)) 
[13:22:54.491]                               next
[13:22:54.491]                             if (!grepl(pattern, name)) 
[13:22:54.491]                               next
[13:22:54.491]                             invokeRestart(restart)
[13:22:54.491]                             muffled <- TRUE
[13:22:54.491]                             break
[13:22:54.491]                           }
[13:22:54.491]                         }
[13:22:54.491]                       }
[13:22:54.491]                       invisible(muffled)
[13:22:54.491]                     }
[13:22:54.491]                     muffleCondition(cond, pattern = "^muffle")
[13:22:54.491]                   }
[13:22:54.491]                 }
[13:22:54.491]                 else {
[13:22:54.491]                   if (TRUE) {
[13:22:54.491]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:22:54.491]                     {
[13:22:54.491]                       inherits <- base::inherits
[13:22:54.491]                       invokeRestart <- base::invokeRestart
[13:22:54.491]                       is.null <- base::is.null
[13:22:54.491]                       muffled <- FALSE
[13:22:54.491]                       if (inherits(cond, "message")) {
[13:22:54.491]                         muffled <- grepl(pattern, "muffleMessage")
[13:22:54.491]                         if (muffled) 
[13:22:54.491]                           invokeRestart("muffleMessage")
[13:22:54.491]                       }
[13:22:54.491]                       else if (inherits(cond, "warning")) {
[13:22:54.491]                         muffled <- grepl(pattern, "muffleWarning")
[13:22:54.491]                         if (muffled) 
[13:22:54.491]                           invokeRestart("muffleWarning")
[13:22:54.491]                       }
[13:22:54.491]                       else if (inherits(cond, "condition")) {
[13:22:54.491]                         if (!is.null(pattern)) {
[13:22:54.491]                           computeRestarts <- base::computeRestarts
[13:22:54.491]                           grepl <- base::grepl
[13:22:54.491]                           restarts <- computeRestarts(cond)
[13:22:54.491]                           for (restart in restarts) {
[13:22:54.491]                             name <- restart$name
[13:22:54.491]                             if (is.null(name)) 
[13:22:54.491]                               next
[13:22:54.491]                             if (!grepl(pattern, name)) 
[13:22:54.491]                               next
[13:22:54.491]                             invokeRestart(restart)
[13:22:54.491]                             muffled <- TRUE
[13:22:54.491]                             break
[13:22:54.491]                           }
[13:22:54.491]                         }
[13:22:54.491]                       }
[13:22:54.491]                       invisible(muffled)
[13:22:54.491]                     }
[13:22:54.491]                     muffleCondition(cond, pattern = "^muffle")
[13:22:54.491]                   }
[13:22:54.491]                 }
[13:22:54.491]             }
[13:22:54.491]         }))
[13:22:54.491]     }, error = function(ex) {
[13:22:54.491]         base::structure(base::list(value = NULL, visible = NULL, 
[13:22:54.491]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:22:54.491]                 ...future.rng), started = ...future.startTime, 
[13:22:54.491]             finished = Sys.time(), session_uuid = NA_character_, 
[13:22:54.491]             version = "1.8"), class = "FutureResult")
[13:22:54.491]     }, finally = {
[13:22:54.491]         if (!identical(...future.workdir, getwd())) 
[13:22:54.491]             setwd(...future.workdir)
[13:22:54.491]         {
[13:22:54.491]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:22:54.491]                 ...future.oldOptions$nwarnings <- NULL
[13:22:54.491]             }
[13:22:54.491]             base::options(...future.oldOptions)
[13:22:54.491]             if (.Platform$OS.type == "windows") {
[13:22:54.491]                 old_names <- names(...future.oldEnvVars)
[13:22:54.491]                 envs <- base::Sys.getenv()
[13:22:54.491]                 names <- names(envs)
[13:22:54.491]                 common <- intersect(names, old_names)
[13:22:54.491]                 added <- setdiff(names, old_names)
[13:22:54.491]                 removed <- setdiff(old_names, names)
[13:22:54.491]                 changed <- common[...future.oldEnvVars[common] != 
[13:22:54.491]                   envs[common]]
[13:22:54.491]                 NAMES <- toupper(changed)
[13:22:54.491]                 args <- list()
[13:22:54.491]                 for (kk in seq_along(NAMES)) {
[13:22:54.491]                   name <- changed[[kk]]
[13:22:54.491]                   NAME <- NAMES[[kk]]
[13:22:54.491]                   if (name != NAME && is.element(NAME, old_names)) 
[13:22:54.491]                     next
[13:22:54.491]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:22:54.491]                 }
[13:22:54.491]                 NAMES <- toupper(added)
[13:22:54.491]                 for (kk in seq_along(NAMES)) {
[13:22:54.491]                   name <- added[[kk]]
[13:22:54.491]                   NAME <- NAMES[[kk]]
[13:22:54.491]                   if (name != NAME && is.element(NAME, old_names)) 
[13:22:54.491]                     next
[13:22:54.491]                   args[[name]] <- ""
[13:22:54.491]                 }
[13:22:54.491]                 NAMES <- toupper(removed)
[13:22:54.491]                 for (kk in seq_along(NAMES)) {
[13:22:54.491]                   name <- removed[[kk]]
[13:22:54.491]                   NAME <- NAMES[[kk]]
[13:22:54.491]                   if (name != NAME && is.element(NAME, old_names)) 
[13:22:54.491]                     next
[13:22:54.491]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:22:54.491]                 }
[13:22:54.491]                 if (length(args) > 0) 
[13:22:54.491]                   base::do.call(base::Sys.setenv, args = args)
[13:22:54.491]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:22:54.491]             }
[13:22:54.491]             else {
[13:22:54.491]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:22:54.491]             }
[13:22:54.491]             {
[13:22:54.491]                 if (base::length(...future.futureOptionsAdded) > 
[13:22:54.491]                   0L) {
[13:22:54.491]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:22:54.491]                   base::names(opts) <- ...future.futureOptionsAdded
[13:22:54.491]                   base::options(opts)
[13:22:54.491]                 }
[13:22:54.491]                 {
[13:22:54.491]                   {
[13:22:54.491]                     NULL
[13:22:54.491]                     RNGkind("Mersenne-Twister")
[13:22:54.491]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[13:22:54.491]                       inherits = FALSE)
[13:22:54.491]                   }
[13:22:54.491]                   options(future.plan = NULL)
[13:22:54.491]                   if (is.na(NA_character_)) 
[13:22:54.491]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:22:54.491]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:22:54.491]                   future::plan(list(function (..., envir = parent.frame()) 
[13:22:54.491]                   {
[13:22:54.491]                     future <- SequentialFuture(..., envir = envir)
[13:22:54.491]                     if (!future$lazy) 
[13:22:54.491]                       future <- run(future)
[13:22:54.491]                     invisible(future)
[13:22:54.491]                   }), .cleanup = FALSE, .init = FALSE)
[13:22:54.491]                 }
[13:22:54.491]             }
[13:22:54.491]         }
[13:22:54.491]     })
[13:22:54.491]     if (TRUE) {
[13:22:54.491]         base::sink(type = "output", split = FALSE)
[13:22:54.491]         if (TRUE) {
[13:22:54.491]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:22:54.491]         }
[13:22:54.491]         else {
[13:22:54.491]             ...future.result["stdout"] <- base::list(NULL)
[13:22:54.491]         }
[13:22:54.491]         base::close(...future.stdout)
[13:22:54.491]         ...future.stdout <- NULL
[13:22:54.491]     }
[13:22:54.491]     ...future.result$conditions <- ...future.conditions
[13:22:54.491]     ...future.result$finished <- base::Sys.time()
[13:22:54.491]     ...future.result
[13:22:54.491] }
[13:22:54.493] plan(): Setting new future strategy stack:
[13:22:54.493] List of future strategies:
[13:22:54.493] 1. sequential:
[13:22:54.493]    - args: function (..., envir = parent.frame())
[13:22:54.493]    - tweaked: FALSE
[13:22:54.493]    - call: NULL
[13:22:54.493] plan(): nbrOfWorkers() = 1
[13:22:54.494] plan(): Setting new future strategy stack:
[13:22:54.495] List of future strategies:
[13:22:54.495] 1. sequential:
[13:22:54.495]    - args: function (..., envir = parent.frame())
[13:22:54.495]    - tweaked: FALSE
[13:22:54.495]    - call: future::plan("sequential")
[13:22:54.495] plan(): nbrOfWorkers() = 1
[13:22:54.495] SequentialFuture started (and completed)
[13:22:54.496] - Launch lazy future ... done
[13:22:54.496] run() for ‘SequentialFuture’ ... done
[13:22:54.496] run() for ‘Future’ ...
[13:22:54.496] - state: ‘created’
[13:22:54.496] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[13:22:54.496] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[13:22:54.497] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[13:22:54.497]   - Field: ‘label’
[13:22:54.497]   - Field: ‘local’
[13:22:54.497]   - Field: ‘owner’
[13:22:54.497]   - Field: ‘envir’
[13:22:54.497]   - Field: ‘packages’
[13:22:54.497]   - Field: ‘gc’
[13:22:54.497]   - Field: ‘conditions’
[13:22:54.497]   - Field: ‘expr’
[13:22:54.497]   - Field: ‘uuid’
[13:22:54.498]   - Field: ‘seed’
[13:22:54.498]   - Field: ‘version’
[13:22:54.498]   - Field: ‘result’
[13:22:54.498]   - Field: ‘asynchronous’
[13:22:54.498]   - Field: ‘calls’
[13:22:54.498]   - Field: ‘globals’
[13:22:54.498]   - Field: ‘stdout’
[13:22:54.498]   - Field: ‘earlySignal’
[13:22:54.498]   - Field: ‘lazy’
[13:22:54.498]   - Field: ‘state’
[13:22:54.498] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[13:22:54.499] - Launch lazy future ...
[13:22:54.499] Packages needed by the future expression (n = 0): <none>
[13:22:54.499] Packages needed by future strategies (n = 0): <none>
[13:22:54.499] {
[13:22:54.499]     {
[13:22:54.499]         {
[13:22:54.499]             ...future.startTime <- base::Sys.time()
[13:22:54.499]             {
[13:22:54.499]                 {
[13:22:54.499]                   {
[13:22:54.499]                     base::local({
[13:22:54.499]                       has_future <- base::requireNamespace("future", 
[13:22:54.499]                         quietly = TRUE)
[13:22:54.499]                       if (has_future) {
[13:22:54.499]                         ns <- base::getNamespace("future")
[13:22:54.499]                         version <- ns[[".package"]][["version"]]
[13:22:54.499]                         if (is.null(version)) 
[13:22:54.499]                           version <- utils::packageVersion("future")
[13:22:54.499]                       }
[13:22:54.499]                       else {
[13:22:54.499]                         version <- NULL
[13:22:54.499]                       }
[13:22:54.499]                       if (!has_future || version < "1.8.0") {
[13:22:54.499]                         info <- base::c(r_version = base::gsub("R version ", 
[13:22:54.499]                           "", base::R.version$version.string), 
[13:22:54.499]                           platform = base::sprintf("%s (%s-bit)", 
[13:22:54.499]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:22:54.499]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[13:22:54.499]                             "release", "version")], collapse = " "), 
[13:22:54.499]                           hostname = base::Sys.info()[["nodename"]])
[13:22:54.499]                         info <- base::sprintf("%s: %s", base::names(info), 
[13:22:54.499]                           info)
[13:22:54.499]                         info <- base::paste(info, collapse = "; ")
[13:22:54.499]                         if (!has_future) {
[13:22:54.499]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:22:54.499]                             info)
[13:22:54.499]                         }
[13:22:54.499]                         else {
[13:22:54.499]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:22:54.499]                             info, version)
[13:22:54.499]                         }
[13:22:54.499]                         base::stop(msg)
[13:22:54.499]                       }
[13:22:54.499]                     })
[13:22:54.499]                   }
[13:22:54.499]                   options(future.plan = NULL)
[13:22:54.499]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:22:54.499]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:22:54.499]                 }
[13:22:54.499]                 ...future.workdir <- getwd()
[13:22:54.499]             }
[13:22:54.499]             ...future.oldOptions <- base::as.list(base::.Options)
[13:22:54.499]             ...future.oldEnvVars <- base::Sys.getenv()
[13:22:54.499]         }
[13:22:54.499]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:22:54.499]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:22:54.499]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:22:54.499]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:22:54.499]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:22:54.499]             future.stdout.windows.reencode = NULL, width = 80L)
[13:22:54.499]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:22:54.499]             base::names(...future.oldOptions))
[13:22:54.499]     }
[13:22:54.499]     if (FALSE) {
[13:22:54.499]     }
[13:22:54.499]     else {
[13:22:54.499]         if (TRUE) {
[13:22:54.499]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:22:54.499]                 open = "w")
[13:22:54.499]         }
[13:22:54.499]         else {
[13:22:54.499]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:22:54.499]                 windows = "NUL", "/dev/null"), open = "w")
[13:22:54.499]         }
[13:22:54.499]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:22:54.499]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:22:54.499]             base::sink(type = "output", split = FALSE)
[13:22:54.499]             base::close(...future.stdout)
[13:22:54.499]         }, add = TRUE)
[13:22:54.499]     }
[13:22:54.499]     ...future.frame <- base::sys.nframe()
[13:22:54.499]     ...future.conditions <- base::list()
[13:22:54.499]     ...future.rng <- base::globalenv()$.Random.seed
[13:22:54.499]     if (FALSE) {
[13:22:54.499]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:22:54.499]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:22:54.499]     }
[13:22:54.499]     ...future.result <- base::tryCatch({
[13:22:54.499]         base::withCallingHandlers({
[13:22:54.499]             ...future.value <- base::withVisible(base::local({
[13:22:54.499]                 "async!"
[13:22:54.499]             }))
[13:22:54.499]             future::FutureResult(value = ...future.value$value, 
[13:22:54.499]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:22:54.499]                   ...future.rng), globalenv = if (FALSE) 
[13:22:54.499]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:22:54.499]                     ...future.globalenv.names))
[13:22:54.499]                 else NULL, started = ...future.startTime, version = "1.8")
[13:22:54.499]         }, condition = base::local({
[13:22:54.499]             c <- base::c
[13:22:54.499]             inherits <- base::inherits
[13:22:54.499]             invokeRestart <- base::invokeRestart
[13:22:54.499]             length <- base::length
[13:22:54.499]             list <- base::list
[13:22:54.499]             seq.int <- base::seq.int
[13:22:54.499]             signalCondition <- base::signalCondition
[13:22:54.499]             sys.calls <- base::sys.calls
[13:22:54.499]             `[[` <- base::`[[`
[13:22:54.499]             `+` <- base::`+`
[13:22:54.499]             `<<-` <- base::`<<-`
[13:22:54.499]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:22:54.499]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:22:54.499]                   3L)]
[13:22:54.499]             }
[13:22:54.499]             function(cond) {
[13:22:54.499]                 is_error <- inherits(cond, "error")
[13:22:54.499]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:22:54.499]                   NULL)
[13:22:54.499]                 if (is_error) {
[13:22:54.499]                   sessionInformation <- function() {
[13:22:54.499]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:22:54.499]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:22:54.499]                       search = base::search(), system = base::Sys.info())
[13:22:54.499]                   }
[13:22:54.499]                   ...future.conditions[[length(...future.conditions) + 
[13:22:54.499]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:22:54.499]                     cond$call), session = sessionInformation(), 
[13:22:54.499]                     timestamp = base::Sys.time(), signaled = 0L)
[13:22:54.499]                   signalCondition(cond)
[13:22:54.499]                 }
[13:22:54.499]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:22:54.499]                 "immediateCondition"))) {
[13:22:54.499]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:22:54.499]                   ...future.conditions[[length(...future.conditions) + 
[13:22:54.499]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:22:54.499]                   if (TRUE && !signal) {
[13:22:54.499]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:22:54.499]                     {
[13:22:54.499]                       inherits <- base::inherits
[13:22:54.499]                       invokeRestart <- base::invokeRestart
[13:22:54.499]                       is.null <- base::is.null
[13:22:54.499]                       muffled <- FALSE
[13:22:54.499]                       if (inherits(cond, "message")) {
[13:22:54.499]                         muffled <- grepl(pattern, "muffleMessage")
[13:22:54.499]                         if (muffled) 
[13:22:54.499]                           invokeRestart("muffleMessage")
[13:22:54.499]                       }
[13:22:54.499]                       else if (inherits(cond, "warning")) {
[13:22:54.499]                         muffled <- grepl(pattern, "muffleWarning")
[13:22:54.499]                         if (muffled) 
[13:22:54.499]                           invokeRestart("muffleWarning")
[13:22:54.499]                       }
[13:22:54.499]                       else if (inherits(cond, "condition")) {
[13:22:54.499]                         if (!is.null(pattern)) {
[13:22:54.499]                           computeRestarts <- base::computeRestarts
[13:22:54.499]                           grepl <- base::grepl
[13:22:54.499]                           restarts <- computeRestarts(cond)
[13:22:54.499]                           for (restart in restarts) {
[13:22:54.499]                             name <- restart$name
[13:22:54.499]                             if (is.null(name)) 
[13:22:54.499]                               next
[13:22:54.499]                             if (!grepl(pattern, name)) 
[13:22:54.499]                               next
[13:22:54.499]                             invokeRestart(restart)
[13:22:54.499]                             muffled <- TRUE
[13:22:54.499]                             break
[13:22:54.499]                           }
[13:22:54.499]                         }
[13:22:54.499]                       }
[13:22:54.499]                       invisible(muffled)
[13:22:54.499]                     }
[13:22:54.499]                     muffleCondition(cond, pattern = "^muffle")
[13:22:54.499]                   }
[13:22:54.499]                 }
[13:22:54.499]                 else {
[13:22:54.499]                   if (TRUE) {
[13:22:54.499]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:22:54.499]                     {
[13:22:54.499]                       inherits <- base::inherits
[13:22:54.499]                       invokeRestart <- base::invokeRestart
[13:22:54.499]                       is.null <- base::is.null
[13:22:54.499]                       muffled <- FALSE
[13:22:54.499]                       if (inherits(cond, "message")) {
[13:22:54.499]                         muffled <- grepl(pattern, "muffleMessage")
[13:22:54.499]                         if (muffled) 
[13:22:54.499]                           invokeRestart("muffleMessage")
[13:22:54.499]                       }
[13:22:54.499]                       else if (inherits(cond, "warning")) {
[13:22:54.499]                         muffled <- grepl(pattern, "muffleWarning")
[13:22:54.499]                         if (muffled) 
[13:22:54.499]                           invokeRestart("muffleWarning")
[13:22:54.499]                       }
[13:22:54.499]                       else if (inherits(cond, "condition")) {
[13:22:54.499]                         if (!is.null(pattern)) {
[13:22:54.499]                           computeRestarts <- base::computeRestarts
[13:22:54.499]                           grepl <- base::grepl
[13:22:54.499]                           restarts <- computeRestarts(cond)
[13:22:54.499]                           for (restart in restarts) {
[13:22:54.499]                             name <- restart$name
[13:22:54.499]                             if (is.null(name)) 
[13:22:54.499]                               next
[13:22:54.499]                             if (!grepl(pattern, name)) 
[13:22:54.499]                               next
[13:22:54.499]                             invokeRestart(restart)
[13:22:54.499]                             muffled <- TRUE
[13:22:54.499]                             break
[13:22:54.499]                           }
[13:22:54.499]                         }
[13:22:54.499]                       }
[13:22:54.499]                       invisible(muffled)
[13:22:54.499]                     }
[13:22:54.499]                     muffleCondition(cond, pattern = "^muffle")
[13:22:54.499]                   }
[13:22:54.499]                 }
[13:22:54.499]             }
[13:22:54.499]         }))
[13:22:54.499]     }, error = function(ex) {
[13:22:54.499]         base::structure(base::list(value = NULL, visible = NULL, 
[13:22:54.499]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:22:54.499]                 ...future.rng), started = ...future.startTime, 
[13:22:54.499]             finished = Sys.time(), session_uuid = NA_character_, 
[13:22:54.499]             version = "1.8"), class = "FutureResult")
[13:22:54.499]     }, finally = {
[13:22:54.499]         if (!identical(...future.workdir, getwd())) 
[13:22:54.499]             setwd(...future.workdir)
[13:22:54.499]         {
[13:22:54.499]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:22:54.499]                 ...future.oldOptions$nwarnings <- NULL
[13:22:54.499]             }
[13:22:54.499]             base::options(...future.oldOptions)
[13:22:54.499]             if (.Platform$OS.type == "windows") {
[13:22:54.499]                 old_names <- names(...future.oldEnvVars)
[13:22:54.499]                 envs <- base::Sys.getenv()
[13:22:54.499]                 names <- names(envs)
[13:22:54.499]                 common <- intersect(names, old_names)
[13:22:54.499]                 added <- setdiff(names, old_names)
[13:22:54.499]                 removed <- setdiff(old_names, names)
[13:22:54.499]                 changed <- common[...future.oldEnvVars[common] != 
[13:22:54.499]                   envs[common]]
[13:22:54.499]                 NAMES <- toupper(changed)
[13:22:54.499]                 args <- list()
[13:22:54.499]                 for (kk in seq_along(NAMES)) {
[13:22:54.499]                   name <- changed[[kk]]
[13:22:54.499]                   NAME <- NAMES[[kk]]
[13:22:54.499]                   if (name != NAME && is.element(NAME, old_names)) 
[13:22:54.499]                     next
[13:22:54.499]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:22:54.499]                 }
[13:22:54.499]                 NAMES <- toupper(added)
[13:22:54.499]                 for (kk in seq_along(NAMES)) {
[13:22:54.499]                   name <- added[[kk]]
[13:22:54.499]                   NAME <- NAMES[[kk]]
[13:22:54.499]                   if (name != NAME && is.element(NAME, old_names)) 
[13:22:54.499]                     next
[13:22:54.499]                   args[[name]] <- ""
[13:22:54.499]                 }
[13:22:54.499]                 NAMES <- toupper(removed)
[13:22:54.499]                 for (kk in seq_along(NAMES)) {
[13:22:54.499]                   name <- removed[[kk]]
[13:22:54.499]                   NAME <- NAMES[[kk]]
[13:22:54.499]                   if (name != NAME && is.element(NAME, old_names)) 
[13:22:54.499]                     next
[13:22:54.499]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:22:54.499]                 }
[13:22:54.499]                 if (length(args) > 0) 
[13:22:54.499]                   base::do.call(base::Sys.setenv, args = args)
[13:22:54.499]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:22:54.499]             }
[13:22:54.499]             else {
[13:22:54.499]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:22:54.499]             }
[13:22:54.499]             {
[13:22:54.499]                 if (base::length(...future.futureOptionsAdded) > 
[13:22:54.499]                   0L) {
[13:22:54.499]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:22:54.499]                   base::names(opts) <- ...future.futureOptionsAdded
[13:22:54.499]                   base::options(opts)
[13:22:54.499]                 }
[13:22:54.499]                 {
[13:22:54.499]                   {
[13:22:54.499]                     NULL
[13:22:54.499]                     RNGkind("Mersenne-Twister")
[13:22:54.499]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[13:22:54.499]                       inherits = FALSE)
[13:22:54.499]                   }
[13:22:54.499]                   options(future.plan = NULL)
[13:22:54.499]                   if (is.na(NA_character_)) 
[13:22:54.499]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:22:54.499]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:22:54.499]                   future::plan(list(function (..., envir = parent.frame()) 
[13:22:54.499]                   {
[13:22:54.499]                     future <- SequentialFuture(..., envir = envir)
[13:22:54.499]                     if (!future$lazy) 
[13:22:54.499]                       future <- run(future)
[13:22:54.499]                     invisible(future)
[13:22:54.499]                   }), .cleanup = FALSE, .init = FALSE)
[13:22:54.499]                 }
[13:22:54.499]             }
[13:22:54.499]         }
[13:22:54.499]     })
[13:22:54.499]     if (TRUE) {
[13:22:54.499]         base::sink(type = "output", split = FALSE)
[13:22:54.499]         if (TRUE) {
[13:22:54.499]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:22:54.499]         }
[13:22:54.499]         else {
[13:22:54.499]             ...future.result["stdout"] <- base::list(NULL)
[13:22:54.499]         }
[13:22:54.499]         base::close(...future.stdout)
[13:22:54.499]         ...future.stdout <- NULL
[13:22:54.499]     }
[13:22:54.499]     ...future.result$conditions <- ...future.conditions
[13:22:54.499]     ...future.result$finished <- base::Sys.time()
[13:22:54.499]     ...future.result
[13:22:54.499] }
[13:22:54.501] plan(): Setting new future strategy stack:
[13:22:54.501] List of future strategies:
[13:22:54.501] 1. sequential:
[13:22:54.501]    - args: function (..., envir = parent.frame())
[13:22:54.501]    - tweaked: FALSE
[13:22:54.501]    - call: NULL
[13:22:54.501] plan(): nbrOfWorkers() = 1
[13:22:54.502] plan(): Setting new future strategy stack:
[13:22:54.502] List of future strategies:
[13:22:54.502] 1. sequential:
[13:22:54.502]    - args: function (..., envir = parent.frame())
[13:22:54.502]    - tweaked: FALSE
[13:22:54.502]    - call: future::plan("sequential")
[13:22:54.503] plan(): nbrOfWorkers() = 1
[13:22:54.503] SequentialFuture started (and completed)
[13:22:54.503] - Launch lazy future ... done
[13:22:54.503] run() for ‘SequentialFuture’ ... done
> str(y)
List of 4
 $ A: num 2
 $ B: NULL
 $ C: NULL
 $ D: chr "async!"
> stopifnot(length(y) == 4)
> stopifnot(identical(names(y), c("A", "B", "C", "D")))
> 
> 
> message("*** %<-% to listenv: Asserting no name clashes among futures")
*** %<-% to listenv: Asserting no name clashes among futures
> u <- listenv()
> u$a %<-% { 1 } %lazy% TRUE
[13:22:54.508] getGlobalsAndPackages() ...
[13:22:54.508] Searching for globals...
[13:22:54.509] - globals found: [1] ‘{’
[13:22:54.509] Searching for globals ... DONE
[13:22:54.509] Resolving globals: FALSE
[13:22:54.509] 
[13:22:54.509] 
[13:22:54.509] getGlobalsAndPackages() ... DONE
> stopifnot(identical(names(u), "a"))
> fu <- futureOf(u$a)
> 
> v <- listenv()
> v$a %<-% { 2 } %lazy% TRUE
[13:22:54.513] getGlobalsAndPackages() ...
[13:22:54.513] Searching for globals...
[13:22:54.514] - globals found: [1] ‘{’
[13:22:54.514] Searching for globals ... DONE
[13:22:54.514] Resolving globals: FALSE
[13:22:54.514] 
[13:22:54.515] 
[13:22:54.515] getGlobalsAndPackages() ... DONE
> stopifnot(identical(names(v), "a"))
> fv <- futureOf(v$a)
> stopifnot(!identical(fu, fv))
> 
> fu <- futureOf(u$a)
> stopifnot(!identical(fu, fv))
> 
> stopifnot(identical(u$a, 1))
[13:22:54.515] run() for ‘Future’ ...
[13:22:54.516] - state: ‘created’
[13:22:54.516] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[13:22:54.516] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[13:22:54.516] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[13:22:54.516]   - Field: ‘label’
[13:22:54.516]   - Field: ‘local’
[13:22:54.516]   - Field: ‘owner’
[13:22:54.517]   - Field: ‘envir’
[13:22:54.517]   - Field: ‘packages’
[13:22:54.517]   - Field: ‘gc’
[13:22:54.517]   - Field: ‘conditions’
[13:22:54.517]   - Field: ‘expr’
[13:22:54.517]   - Field: ‘uuid’
[13:22:54.517]   - Field: ‘seed’
[13:22:54.517]   - Field: ‘version’
[13:22:54.517]   - Field: ‘result’
[13:22:54.517]   - Field: ‘asynchronous’
[13:22:54.517]   - Field: ‘calls’
[13:22:54.518]   - Field: ‘globals’
[13:22:54.518]   - Field: ‘stdout’
[13:22:54.518]   - Field: ‘earlySignal’
[13:22:54.518]   - Field: ‘lazy’
[13:22:54.518]   - Field: ‘state’
[13:22:54.518] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[13:22:54.518] - Launch lazy future ...
[13:22:54.518] Packages needed by the future expression (n = 0): <none>
[13:22:54.518] Packages needed by future strategies (n = 0): <none>
[13:22:54.519] {
[13:22:54.519]     {
[13:22:54.519]         {
[13:22:54.519]             ...future.startTime <- base::Sys.time()
[13:22:54.519]             {
[13:22:54.519]                 {
[13:22:54.519]                   {
[13:22:54.519]                     base::local({
[13:22:54.519]                       has_future <- base::requireNamespace("future", 
[13:22:54.519]                         quietly = TRUE)
[13:22:54.519]                       if (has_future) {
[13:22:54.519]                         ns <- base::getNamespace("future")
[13:22:54.519]                         version <- ns[[".package"]][["version"]]
[13:22:54.519]                         if (is.null(version)) 
[13:22:54.519]                           version <- utils::packageVersion("future")
[13:22:54.519]                       }
[13:22:54.519]                       else {
[13:22:54.519]                         version <- NULL
[13:22:54.519]                       }
[13:22:54.519]                       if (!has_future || version < "1.8.0") {
[13:22:54.519]                         info <- base::c(r_version = base::gsub("R version ", 
[13:22:54.519]                           "", base::R.version$version.string), 
[13:22:54.519]                           platform = base::sprintf("%s (%s-bit)", 
[13:22:54.519]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:22:54.519]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[13:22:54.519]                             "release", "version")], collapse = " "), 
[13:22:54.519]                           hostname = base::Sys.info()[["nodename"]])
[13:22:54.519]                         info <- base::sprintf("%s: %s", base::names(info), 
[13:22:54.519]                           info)
[13:22:54.519]                         info <- base::paste(info, collapse = "; ")
[13:22:54.519]                         if (!has_future) {
[13:22:54.519]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:22:54.519]                             info)
[13:22:54.519]                         }
[13:22:54.519]                         else {
[13:22:54.519]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:22:54.519]                             info, version)
[13:22:54.519]                         }
[13:22:54.519]                         base::stop(msg)
[13:22:54.519]                       }
[13:22:54.519]                     })
[13:22:54.519]                   }
[13:22:54.519]                   options(future.plan = NULL)
[13:22:54.519]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:22:54.519]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:22:54.519]                 }
[13:22:54.519]                 ...future.workdir <- getwd()
[13:22:54.519]             }
[13:22:54.519]             ...future.oldOptions <- base::as.list(base::.Options)
[13:22:54.519]             ...future.oldEnvVars <- base::Sys.getenv()
[13:22:54.519]         }
[13:22:54.519]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:22:54.519]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:22:54.519]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:22:54.519]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:22:54.519]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:22:54.519]             future.stdout.windows.reencode = NULL, width = 80L)
[13:22:54.519]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:22:54.519]             base::names(...future.oldOptions))
[13:22:54.519]     }
[13:22:54.519]     if (FALSE) {
[13:22:54.519]     }
[13:22:54.519]     else {
[13:22:54.519]         if (TRUE) {
[13:22:54.519]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:22:54.519]                 open = "w")
[13:22:54.519]         }
[13:22:54.519]         else {
[13:22:54.519]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:22:54.519]                 windows = "NUL", "/dev/null"), open = "w")
[13:22:54.519]         }
[13:22:54.519]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:22:54.519]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:22:54.519]             base::sink(type = "output", split = FALSE)
[13:22:54.519]             base::close(...future.stdout)
[13:22:54.519]         }, add = TRUE)
[13:22:54.519]     }
[13:22:54.519]     ...future.frame <- base::sys.nframe()
[13:22:54.519]     ...future.conditions <- base::list()
[13:22:54.519]     ...future.rng <- base::globalenv()$.Random.seed
[13:22:54.519]     if (FALSE) {
[13:22:54.519]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:22:54.519]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:22:54.519]     }
[13:22:54.519]     ...future.result <- base::tryCatch({
[13:22:54.519]         base::withCallingHandlers({
[13:22:54.519]             ...future.value <- base::withVisible(base::local({
[13:22:54.519]                 1
[13:22:54.519]             }))
[13:22:54.519]             future::FutureResult(value = ...future.value$value, 
[13:22:54.519]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:22:54.519]                   ...future.rng), globalenv = if (FALSE) 
[13:22:54.519]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:22:54.519]                     ...future.globalenv.names))
[13:22:54.519]                 else NULL, started = ...future.startTime, version = "1.8")
[13:22:54.519]         }, condition = base::local({
[13:22:54.519]             c <- base::c
[13:22:54.519]             inherits <- base::inherits
[13:22:54.519]             invokeRestart <- base::invokeRestart
[13:22:54.519]             length <- base::length
[13:22:54.519]             list <- base::list
[13:22:54.519]             seq.int <- base::seq.int
[13:22:54.519]             signalCondition <- base::signalCondition
[13:22:54.519]             sys.calls <- base::sys.calls
[13:22:54.519]             `[[` <- base::`[[`
[13:22:54.519]             `+` <- base::`+`
[13:22:54.519]             `<<-` <- base::`<<-`
[13:22:54.519]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:22:54.519]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:22:54.519]                   3L)]
[13:22:54.519]             }
[13:22:54.519]             function(cond) {
[13:22:54.519]                 is_error <- inherits(cond, "error")
[13:22:54.519]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:22:54.519]                   NULL)
[13:22:54.519]                 if (is_error) {
[13:22:54.519]                   sessionInformation <- function() {
[13:22:54.519]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:22:54.519]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:22:54.519]                       search = base::search(), system = base::Sys.info())
[13:22:54.519]                   }
[13:22:54.519]                   ...future.conditions[[length(...future.conditions) + 
[13:22:54.519]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:22:54.519]                     cond$call), session = sessionInformation(), 
[13:22:54.519]                     timestamp = base::Sys.time(), signaled = 0L)
[13:22:54.519]                   signalCondition(cond)
[13:22:54.519]                 }
[13:22:54.519]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:22:54.519]                 "immediateCondition"))) {
[13:22:54.519]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:22:54.519]                   ...future.conditions[[length(...future.conditions) + 
[13:22:54.519]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:22:54.519]                   if (TRUE && !signal) {
[13:22:54.519]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:22:54.519]                     {
[13:22:54.519]                       inherits <- base::inherits
[13:22:54.519]                       invokeRestart <- base::invokeRestart
[13:22:54.519]                       is.null <- base::is.null
[13:22:54.519]                       muffled <- FALSE
[13:22:54.519]                       if (inherits(cond, "message")) {
[13:22:54.519]                         muffled <- grepl(pattern, "muffleMessage")
[13:22:54.519]                         if (muffled) 
[13:22:54.519]                           invokeRestart("muffleMessage")
[13:22:54.519]                       }
[13:22:54.519]                       else if (inherits(cond, "warning")) {
[13:22:54.519]                         muffled <- grepl(pattern, "muffleWarning")
[13:22:54.519]                         if (muffled) 
[13:22:54.519]                           invokeRestart("muffleWarning")
[13:22:54.519]                       }
[13:22:54.519]                       else if (inherits(cond, "condition")) {
[13:22:54.519]                         if (!is.null(pattern)) {
[13:22:54.519]                           computeRestarts <- base::computeRestarts
[13:22:54.519]                           grepl <- base::grepl
[13:22:54.519]                           restarts <- computeRestarts(cond)
[13:22:54.519]                           for (restart in restarts) {
[13:22:54.519]                             name <- restart$name
[13:22:54.519]                             if (is.null(name)) 
[13:22:54.519]                               next
[13:22:54.519]                             if (!grepl(pattern, name)) 
[13:22:54.519]                               next
[13:22:54.519]                             invokeRestart(restart)
[13:22:54.519]                             muffled <- TRUE
[13:22:54.519]                             break
[13:22:54.519]                           }
[13:22:54.519]                         }
[13:22:54.519]                       }
[13:22:54.519]                       invisible(muffled)
[13:22:54.519]                     }
[13:22:54.519]                     muffleCondition(cond, pattern = "^muffle")
[13:22:54.519]                   }
[13:22:54.519]                 }
[13:22:54.519]                 else {
[13:22:54.519]                   if (TRUE) {
[13:22:54.519]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:22:54.519]                     {
[13:22:54.519]                       inherits <- base::inherits
[13:22:54.519]                       invokeRestart <- base::invokeRestart
[13:22:54.519]                       is.null <- base::is.null
[13:22:54.519]                       muffled <- FALSE
[13:22:54.519]                       if (inherits(cond, "message")) {
[13:22:54.519]                         muffled <- grepl(pattern, "muffleMessage")
[13:22:54.519]                         if (muffled) 
[13:22:54.519]                           invokeRestart("muffleMessage")
[13:22:54.519]                       }
[13:22:54.519]                       else if (inherits(cond, "warning")) {
[13:22:54.519]                         muffled <- grepl(pattern, "muffleWarning")
[13:22:54.519]                         if (muffled) 
[13:22:54.519]                           invokeRestart("muffleWarning")
[13:22:54.519]                       }
[13:22:54.519]                       else if (inherits(cond, "condition")) {
[13:22:54.519]                         if (!is.null(pattern)) {
[13:22:54.519]                           computeRestarts <- base::computeRestarts
[13:22:54.519]                           grepl <- base::grepl
[13:22:54.519]                           restarts <- computeRestarts(cond)
[13:22:54.519]                           for (restart in restarts) {
[13:22:54.519]                             name <- restart$name
[13:22:54.519]                             if (is.null(name)) 
[13:22:54.519]                               next
[13:22:54.519]                             if (!grepl(pattern, name)) 
[13:22:54.519]                               next
[13:22:54.519]                             invokeRestart(restart)
[13:22:54.519]                             muffled <- TRUE
[13:22:54.519]                             break
[13:22:54.519]                           }
[13:22:54.519]                         }
[13:22:54.519]                       }
[13:22:54.519]                       invisible(muffled)
[13:22:54.519]                     }
[13:22:54.519]                     muffleCondition(cond, pattern = "^muffle")
[13:22:54.519]                   }
[13:22:54.519]                 }
[13:22:54.519]             }
[13:22:54.519]         }))
[13:22:54.519]     }, error = function(ex) {
[13:22:54.519]         base::structure(base::list(value = NULL, visible = NULL, 
[13:22:54.519]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:22:54.519]                 ...future.rng), started = ...future.startTime, 
[13:22:54.519]             finished = Sys.time(), session_uuid = NA_character_, 
[13:22:54.519]             version = "1.8"), class = "FutureResult")
[13:22:54.519]     }, finally = {
[13:22:54.519]         if (!identical(...future.workdir, getwd())) 
[13:22:54.519]             setwd(...future.workdir)
[13:22:54.519]         {
[13:22:54.519]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:22:54.519]                 ...future.oldOptions$nwarnings <- NULL
[13:22:54.519]             }
[13:22:54.519]             base::options(...future.oldOptions)
[13:22:54.519]             if (.Platform$OS.type == "windows") {
[13:22:54.519]                 old_names <- names(...future.oldEnvVars)
[13:22:54.519]                 envs <- base::Sys.getenv()
[13:22:54.519]                 names <- names(envs)
[13:22:54.519]                 common <- intersect(names, old_names)
[13:22:54.519]                 added <- setdiff(names, old_names)
[13:22:54.519]                 removed <- setdiff(old_names, names)
[13:22:54.519]                 changed <- common[...future.oldEnvVars[common] != 
[13:22:54.519]                   envs[common]]
[13:22:54.519]                 NAMES <- toupper(changed)
[13:22:54.519]                 args <- list()
[13:22:54.519]                 for (kk in seq_along(NAMES)) {
[13:22:54.519]                   name <- changed[[kk]]
[13:22:54.519]                   NAME <- NAMES[[kk]]
[13:22:54.519]                   if (name != NAME && is.element(NAME, old_names)) 
[13:22:54.519]                     next
[13:22:54.519]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:22:54.519]                 }
[13:22:54.519]                 NAMES <- toupper(added)
[13:22:54.519]                 for (kk in seq_along(NAMES)) {
[13:22:54.519]                   name <- added[[kk]]
[13:22:54.519]                   NAME <- NAMES[[kk]]
[13:22:54.519]                   if (name != NAME && is.element(NAME, old_names)) 
[13:22:54.519]                     next
[13:22:54.519]                   args[[name]] <- ""
[13:22:54.519]                 }
[13:22:54.519]                 NAMES <- toupper(removed)
[13:22:54.519]                 for (kk in seq_along(NAMES)) {
[13:22:54.519]                   name <- removed[[kk]]
[13:22:54.519]                   NAME <- NAMES[[kk]]
[13:22:54.519]                   if (name != NAME && is.element(NAME, old_names)) 
[13:22:54.519]                     next
[13:22:54.519]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:22:54.519]                 }
[13:22:54.519]                 if (length(args) > 0) 
[13:22:54.519]                   base::do.call(base::Sys.setenv, args = args)
[13:22:54.519]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:22:54.519]             }
[13:22:54.519]             else {
[13:22:54.519]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:22:54.519]             }
[13:22:54.519]             {
[13:22:54.519]                 if (base::length(...future.futureOptionsAdded) > 
[13:22:54.519]                   0L) {
[13:22:54.519]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:22:54.519]                   base::names(opts) <- ...future.futureOptionsAdded
[13:22:54.519]                   base::options(opts)
[13:22:54.519]                 }
[13:22:54.519]                 {
[13:22:54.519]                   {
[13:22:54.519]                     NULL
[13:22:54.519]                     RNGkind("Mersenne-Twister")
[13:22:54.519]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[13:22:54.519]                       inherits = FALSE)
[13:22:54.519]                   }
[13:22:54.519]                   options(future.plan = NULL)
[13:22:54.519]                   if (is.na(NA_character_)) 
[13:22:54.519]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:22:54.519]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:22:54.519]                   future::plan(list(function (..., envir = parent.frame()) 
[13:22:54.519]                   {
[13:22:54.519]                     future <- SequentialFuture(..., envir = envir)
[13:22:54.519]                     if (!future$lazy) 
[13:22:54.519]                       future <- run(future)
[13:22:54.519]                     invisible(future)
[13:22:54.519]                   }), .cleanup = FALSE, .init = FALSE)
[13:22:54.519]                 }
[13:22:54.519]             }
[13:22:54.519]         }
[13:22:54.519]     })
[13:22:54.519]     if (TRUE) {
[13:22:54.519]         base::sink(type = "output", split = FALSE)
[13:22:54.519]         if (TRUE) {
[13:22:54.519]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:22:54.519]         }
[13:22:54.519]         else {
[13:22:54.519]             ...future.result["stdout"] <- base::list(NULL)
[13:22:54.519]         }
[13:22:54.519]         base::close(...future.stdout)
[13:22:54.519]         ...future.stdout <- NULL
[13:22:54.519]     }
[13:22:54.519]     ...future.result$conditions <- ...future.conditions
[13:22:54.519]     ...future.result$finished <- base::Sys.time()
[13:22:54.519]     ...future.result
[13:22:54.519] }
[13:22:54.521] plan(): Setting new future strategy stack:
[13:22:54.521] List of future strategies:
[13:22:54.521] 1. sequential:
[13:22:54.521]    - args: function (..., envir = parent.frame())
[13:22:54.521]    - tweaked: FALSE
[13:22:54.521]    - call: NULL
[13:22:54.521] plan(): nbrOfWorkers() = 1
[13:22:54.522] plan(): Setting new future strategy stack:
[13:22:54.522] List of future strategies:
[13:22:54.522] 1. sequential:
[13:22:54.522]    - args: function (..., envir = parent.frame())
[13:22:54.522]    - tweaked: FALSE
[13:22:54.522]    - call: future::plan("sequential")
[13:22:54.522] plan(): nbrOfWorkers() = 1
[13:22:54.523] SequentialFuture started (and completed)
[13:22:54.523] - Launch lazy future ... done
[13:22:54.523] run() for ‘SequentialFuture’ ... done
> stopifnot(identical(v$a, 2))
[13:22:54.523] run() for ‘Future’ ...
[13:22:54.523] - state: ‘created’
[13:22:54.523] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[13:22:54.524] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[13:22:54.524] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[13:22:54.524]   - Field: ‘label’
[13:22:54.524]   - Field: ‘local’
[13:22:54.524]   - Field: ‘owner’
[13:22:54.524]   - Field: ‘envir’
[13:22:54.524]   - Field: ‘packages’
[13:22:54.524]   - Field: ‘gc’
[13:22:54.524]   - Field: ‘conditions’
[13:22:54.525]   - Field: ‘expr’
[13:22:54.525]   - Field: ‘uuid’
[13:22:54.525]   - Field: ‘seed’
[13:22:54.525]   - Field: ‘version’
[13:22:54.525]   - Field: ‘result’
[13:22:54.525]   - Field: ‘asynchronous’
[13:22:54.525]   - Field: ‘calls’
[13:22:54.525]   - Field: ‘globals’
[13:22:54.525]   - Field: ‘stdout’
[13:22:54.525]   - Field: ‘earlySignal’
[13:22:54.525]   - Field: ‘lazy’
[13:22:54.526]   - Field: ‘state’
[13:22:54.526] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[13:22:54.526] - Launch lazy future ...
[13:22:54.526] Packages needed by the future expression (n = 0): <none>
[13:22:54.526] Packages needed by future strategies (n = 0): <none>
[13:22:54.527] {
[13:22:54.527]     {
[13:22:54.527]         {
[13:22:54.527]             ...future.startTime <- base::Sys.time()
[13:22:54.527]             {
[13:22:54.527]                 {
[13:22:54.527]                   {
[13:22:54.527]                     base::local({
[13:22:54.527]                       has_future <- base::requireNamespace("future", 
[13:22:54.527]                         quietly = TRUE)
[13:22:54.527]                       if (has_future) {
[13:22:54.527]                         ns <- base::getNamespace("future")
[13:22:54.527]                         version <- ns[[".package"]][["version"]]
[13:22:54.527]                         if (is.null(version)) 
[13:22:54.527]                           version <- utils::packageVersion("future")
[13:22:54.527]                       }
[13:22:54.527]                       else {
[13:22:54.527]                         version <- NULL
[13:22:54.527]                       }
[13:22:54.527]                       if (!has_future || version < "1.8.0") {
[13:22:54.527]                         info <- base::c(r_version = base::gsub("R version ", 
[13:22:54.527]                           "", base::R.version$version.string), 
[13:22:54.527]                           platform = base::sprintf("%s (%s-bit)", 
[13:22:54.527]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:22:54.527]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[13:22:54.527]                             "release", "version")], collapse = " "), 
[13:22:54.527]                           hostname = base::Sys.info()[["nodename"]])
[13:22:54.527]                         info <- base::sprintf("%s: %s", base::names(info), 
[13:22:54.527]                           info)
[13:22:54.527]                         info <- base::paste(info, collapse = "; ")
[13:22:54.527]                         if (!has_future) {
[13:22:54.527]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:22:54.527]                             info)
[13:22:54.527]                         }
[13:22:54.527]                         else {
[13:22:54.527]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:22:54.527]                             info, version)
[13:22:54.527]                         }
[13:22:54.527]                         base::stop(msg)
[13:22:54.527]                       }
[13:22:54.527]                     })
[13:22:54.527]                   }
[13:22:54.527]                   options(future.plan = NULL)
[13:22:54.527]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:22:54.527]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:22:54.527]                 }
[13:22:54.527]                 ...future.workdir <- getwd()
[13:22:54.527]             }
[13:22:54.527]             ...future.oldOptions <- base::as.list(base::.Options)
[13:22:54.527]             ...future.oldEnvVars <- base::Sys.getenv()
[13:22:54.527]         }
[13:22:54.527]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:22:54.527]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:22:54.527]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:22:54.527]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:22:54.527]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:22:54.527]             future.stdout.windows.reencode = NULL, width = 80L)
[13:22:54.527]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:22:54.527]             base::names(...future.oldOptions))
[13:22:54.527]     }
[13:22:54.527]     if (FALSE) {
[13:22:54.527]     }
[13:22:54.527]     else {
[13:22:54.527]         if (TRUE) {
[13:22:54.527]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:22:54.527]                 open = "w")
[13:22:54.527]         }
[13:22:54.527]         else {
[13:22:54.527]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:22:54.527]                 windows = "NUL", "/dev/null"), open = "w")
[13:22:54.527]         }
[13:22:54.527]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:22:54.527]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:22:54.527]             base::sink(type = "output", split = FALSE)
[13:22:54.527]             base::close(...future.stdout)
[13:22:54.527]         }, add = TRUE)
[13:22:54.527]     }
[13:22:54.527]     ...future.frame <- base::sys.nframe()
[13:22:54.527]     ...future.conditions <- base::list()
[13:22:54.527]     ...future.rng <- base::globalenv()$.Random.seed
[13:22:54.527]     if (FALSE) {
[13:22:54.527]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:22:54.527]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:22:54.527]     }
[13:22:54.527]     ...future.result <- base::tryCatch({
[13:22:54.527]         base::withCallingHandlers({
[13:22:54.527]             ...future.value <- base::withVisible(base::local({
[13:22:54.527]                 2
[13:22:54.527]             }))
[13:22:54.527]             future::FutureResult(value = ...future.value$value, 
[13:22:54.527]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:22:54.527]                   ...future.rng), globalenv = if (FALSE) 
[13:22:54.527]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:22:54.527]                     ...future.globalenv.names))
[13:22:54.527]                 else NULL, started = ...future.startTime, version = "1.8")
[13:22:54.527]         }, condition = base::local({
[13:22:54.527]             c <- base::c
[13:22:54.527]             inherits <- base::inherits
[13:22:54.527]             invokeRestart <- base::invokeRestart
[13:22:54.527]             length <- base::length
[13:22:54.527]             list <- base::list
[13:22:54.527]             seq.int <- base::seq.int
[13:22:54.527]             signalCondition <- base::signalCondition
[13:22:54.527]             sys.calls <- base::sys.calls
[13:22:54.527]             `[[` <- base::`[[`
[13:22:54.527]             `+` <- base::`+`
[13:22:54.527]             `<<-` <- base::`<<-`
[13:22:54.527]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:22:54.527]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:22:54.527]                   3L)]
[13:22:54.527]             }
[13:22:54.527]             function(cond) {
[13:22:54.527]                 is_error <- inherits(cond, "error")
[13:22:54.527]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:22:54.527]                   NULL)
[13:22:54.527]                 if (is_error) {
[13:22:54.527]                   sessionInformation <- function() {
[13:22:54.527]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:22:54.527]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:22:54.527]                       search = base::search(), system = base::Sys.info())
[13:22:54.527]                   }
[13:22:54.527]                   ...future.conditions[[length(...future.conditions) + 
[13:22:54.527]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:22:54.527]                     cond$call), session = sessionInformation(), 
[13:22:54.527]                     timestamp = base::Sys.time(), signaled = 0L)
[13:22:54.527]                   signalCondition(cond)
[13:22:54.527]                 }
[13:22:54.527]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:22:54.527]                 "immediateCondition"))) {
[13:22:54.527]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:22:54.527]                   ...future.conditions[[length(...future.conditions) + 
[13:22:54.527]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:22:54.527]                   if (TRUE && !signal) {
[13:22:54.527]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:22:54.527]                     {
[13:22:54.527]                       inherits <- base::inherits
[13:22:54.527]                       invokeRestart <- base::invokeRestart
[13:22:54.527]                       is.null <- base::is.null
[13:22:54.527]                       muffled <- FALSE
[13:22:54.527]                       if (inherits(cond, "message")) {
[13:22:54.527]                         muffled <- grepl(pattern, "muffleMessage")
[13:22:54.527]                         if (muffled) 
[13:22:54.527]                           invokeRestart("muffleMessage")
[13:22:54.527]                       }
[13:22:54.527]                       else if (inherits(cond, "warning")) {
[13:22:54.527]                         muffled <- grepl(pattern, "muffleWarning")
[13:22:54.527]                         if (muffled) 
[13:22:54.527]                           invokeRestart("muffleWarning")
[13:22:54.527]                       }
[13:22:54.527]                       else if (inherits(cond, "condition")) {
[13:22:54.527]                         if (!is.null(pattern)) {
[13:22:54.527]                           computeRestarts <- base::computeRestarts
[13:22:54.527]                           grepl <- base::grepl
[13:22:54.527]                           restarts <- computeRestarts(cond)
[13:22:54.527]                           for (restart in restarts) {
[13:22:54.527]                             name <- restart$name
[13:22:54.527]                             if (is.null(name)) 
[13:22:54.527]                               next
[13:22:54.527]                             if (!grepl(pattern, name)) 
[13:22:54.527]                               next
[13:22:54.527]                             invokeRestart(restart)
[13:22:54.527]                             muffled <- TRUE
[13:22:54.527]                             break
[13:22:54.527]                           }
[13:22:54.527]                         }
[13:22:54.527]                       }
[13:22:54.527]                       invisible(muffled)
[13:22:54.527]                     }
[13:22:54.527]                     muffleCondition(cond, pattern = "^muffle")
[13:22:54.527]                   }
[13:22:54.527]                 }
[13:22:54.527]                 else {
[13:22:54.527]                   if (TRUE) {
[13:22:54.527]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:22:54.527]                     {
[13:22:54.527]                       inherits <- base::inherits
[13:22:54.527]                       invokeRestart <- base::invokeRestart
[13:22:54.527]                       is.null <- base::is.null
[13:22:54.527]                       muffled <- FALSE
[13:22:54.527]                       if (inherits(cond, "message")) {
[13:22:54.527]                         muffled <- grepl(pattern, "muffleMessage")
[13:22:54.527]                         if (muffled) 
[13:22:54.527]                           invokeRestart("muffleMessage")
[13:22:54.527]                       }
[13:22:54.527]                       else if (inherits(cond, "warning")) {
[13:22:54.527]                         muffled <- grepl(pattern, "muffleWarning")
[13:22:54.527]                         if (muffled) 
[13:22:54.527]                           invokeRestart("muffleWarning")
[13:22:54.527]                       }
[13:22:54.527]                       else if (inherits(cond, "condition")) {
[13:22:54.527]                         if (!is.null(pattern)) {
[13:22:54.527]                           computeRestarts <- base::computeRestarts
[13:22:54.527]                           grepl <- base::grepl
[13:22:54.527]                           restarts <- computeRestarts(cond)
[13:22:54.527]                           for (restart in restarts) {
[13:22:54.527]                             name <- restart$name
[13:22:54.527]                             if (is.null(name)) 
[13:22:54.527]                               next
[13:22:54.527]                             if (!grepl(pattern, name)) 
[13:22:54.527]                               next
[13:22:54.527]                             invokeRestart(restart)
[13:22:54.527]                             muffled <- TRUE
[13:22:54.527]                             break
[13:22:54.527]                           }
[13:22:54.527]                         }
[13:22:54.527]                       }
[13:22:54.527]                       invisible(muffled)
[13:22:54.527]                     }
[13:22:54.527]                     muffleCondition(cond, pattern = "^muffle")
[13:22:54.527]                   }
[13:22:54.527]                 }
[13:22:54.527]             }
[13:22:54.527]         }))
[13:22:54.527]     }, error = function(ex) {
[13:22:54.527]         base::structure(base::list(value = NULL, visible = NULL, 
[13:22:54.527]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:22:54.527]                 ...future.rng), started = ...future.startTime, 
[13:22:54.527]             finished = Sys.time(), session_uuid = NA_character_, 
[13:22:54.527]             version = "1.8"), class = "FutureResult")
[13:22:54.527]     }, finally = {
[13:22:54.527]         if (!identical(...future.workdir, getwd())) 
[13:22:54.527]             setwd(...future.workdir)
[13:22:54.527]         {
[13:22:54.527]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:22:54.527]                 ...future.oldOptions$nwarnings <- NULL
[13:22:54.527]             }
[13:22:54.527]             base::options(...future.oldOptions)
[13:22:54.527]             if (.Platform$OS.type == "windows") {
[13:22:54.527]                 old_names <- names(...future.oldEnvVars)
[13:22:54.527]                 envs <- base::Sys.getenv()
[13:22:54.527]                 names <- names(envs)
[13:22:54.527]                 common <- intersect(names, old_names)
[13:22:54.527]                 added <- setdiff(names, old_names)
[13:22:54.527]                 removed <- setdiff(old_names, names)
[13:22:54.527]                 changed <- common[...future.oldEnvVars[common] != 
[13:22:54.527]                   envs[common]]
[13:22:54.527]                 NAMES <- toupper(changed)
[13:22:54.527]                 args <- list()
[13:22:54.527]                 for (kk in seq_along(NAMES)) {
[13:22:54.527]                   name <- changed[[kk]]
[13:22:54.527]                   NAME <- NAMES[[kk]]
[13:22:54.527]                   if (name != NAME && is.element(NAME, old_names)) 
[13:22:54.527]                     next
[13:22:54.527]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:22:54.527]                 }
[13:22:54.527]                 NAMES <- toupper(added)
[13:22:54.527]                 for (kk in seq_along(NAMES)) {
[13:22:54.527]                   name <- added[[kk]]
[13:22:54.527]                   NAME <- NAMES[[kk]]
[13:22:54.527]                   if (name != NAME && is.element(NAME, old_names)) 
[13:22:54.527]                     next
[13:22:54.527]                   args[[name]] <- ""
[13:22:54.527]                 }
[13:22:54.527]                 NAMES <- toupper(removed)
[13:22:54.527]                 for (kk in seq_along(NAMES)) {
[13:22:54.527]                   name <- removed[[kk]]
[13:22:54.527]                   NAME <- NAMES[[kk]]
[13:22:54.527]                   if (name != NAME && is.element(NAME, old_names)) 
[13:22:54.527]                     next
[13:22:54.527]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:22:54.527]                 }
[13:22:54.527]                 if (length(args) > 0) 
[13:22:54.527]                   base::do.call(base::Sys.setenv, args = args)
[13:22:54.527]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:22:54.527]             }
[13:22:54.527]             else {
[13:22:54.527]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:22:54.527]             }
[13:22:54.527]             {
[13:22:54.527]                 if (base::length(...future.futureOptionsAdded) > 
[13:22:54.527]                   0L) {
[13:22:54.527]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:22:54.527]                   base::names(opts) <- ...future.futureOptionsAdded
[13:22:54.527]                   base::options(opts)
[13:22:54.527]                 }
[13:22:54.527]                 {
[13:22:54.527]                   {
[13:22:54.527]                     NULL
[13:22:54.527]                     RNGkind("Mersenne-Twister")
[13:22:54.527]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[13:22:54.527]                       inherits = FALSE)
[13:22:54.527]                   }
[13:22:54.527]                   options(future.plan = NULL)
[13:22:54.527]                   if (is.na(NA_character_)) 
[13:22:54.527]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:22:54.527]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:22:54.527]                   future::plan(list(function (..., envir = parent.frame()) 
[13:22:54.527]                   {
[13:22:54.527]                     future <- SequentialFuture(..., envir = envir)
[13:22:54.527]                     if (!future$lazy) 
[13:22:54.527]                       future <- run(future)
[13:22:54.527]                     invisible(future)
[13:22:54.527]                   }), .cleanup = FALSE, .init = FALSE)
[13:22:54.527]                 }
[13:22:54.527]             }
[13:22:54.527]         }
[13:22:54.527]     })
[13:22:54.527]     if (TRUE) {
[13:22:54.527]         base::sink(type = "output", split = FALSE)
[13:22:54.527]         if (TRUE) {
[13:22:54.527]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:22:54.527]         }
[13:22:54.527]         else {
[13:22:54.527]             ...future.result["stdout"] <- base::list(NULL)
[13:22:54.527]         }
[13:22:54.527]         base::close(...future.stdout)
[13:22:54.527]         ...future.stdout <- NULL
[13:22:54.527]     }
[13:22:54.527]     ...future.result$conditions <- ...future.conditions
[13:22:54.527]     ...future.result$finished <- base::Sys.time()
[13:22:54.527]     ...future.result
[13:22:54.527] }
[13:22:54.528] plan(): Setting new future strategy stack:
[13:22:54.528] List of future strategies:
[13:22:54.528] 1. sequential:
[13:22:54.528]    - args: function (..., envir = parent.frame())
[13:22:54.528]    - tweaked: FALSE
[13:22:54.528]    - call: NULL
[13:22:54.529] plan(): nbrOfWorkers() = 1
[13:22:54.530] plan(): Setting new future strategy stack:
[13:22:54.530] List of future strategies:
[13:22:54.530] 1. sequential:
[13:22:54.530]    - args: function (..., envir = parent.frame())
[13:22:54.530]    - tweaked: FALSE
[13:22:54.530]    - call: future::plan("sequential")
[13:22:54.530] plan(): nbrOfWorkers() = 1
[13:22:54.530] SequentialFuture started (and completed)
[13:22:54.530] - Launch lazy future ... done
[13:22:54.530] run() for ‘SequentialFuture’ ... done
> 
> 
> message("*** %<-% to listenv: multiple dimensions ...")
*** %<-% to listenv: multiple dimensions ...
> 
> x0 <- list()
> length(x0) <- 6
> dim(x0) <- c(3, 2)
> 
> x <- listenv()
> length(x) <- 6
> dim(x) <- c(3, 2)
> 
> for (cc in 1:ncol(x)) {
+   for (rr in 1:nrow(x)) {
+     x0[[rr, cc]] <- sprintf("(%s, %s)", rr, cc)
+     x[[rr, cc]] %<-% sprintf("(%s, %s)", rr, cc) %lazy% TRUE
+   }
+ }
[13:22:54.536] getGlobalsAndPackages() ...
[13:22:54.536] Searching for globals...
[13:22:54.538] - globals found: [3] ‘sprintf’, ‘rr’, ‘cc’
[13:22:54.538] Searching for globals ... DONE
[13:22:54.538] Resolving globals: FALSE
[13:22:54.539] The total size of the 2 globals is 112 bytes (112 bytes)
[13:22:54.540] The total size of the 2 globals exported for future expression (‘sprintf("(%s, %s)", rr, cc)’) is 112 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘rr’ (56 bytes of class ‘numeric’) and ‘cc’ (56 bytes of class ‘numeric’)
[13:22:54.540] - globals: [2] ‘rr’, ‘cc’
[13:22:54.540] 
[13:22:54.540] getGlobalsAndPackages() ... DONE
[13:22:54.541] getGlobalsAndPackages() ...
[13:22:54.541] Searching for globals...
[13:22:54.541] - globals found: [3] ‘sprintf’, ‘rr’, ‘cc’
[13:22:54.542] Searching for globals ... DONE
[13:22:54.542] Resolving globals: FALSE
[13:22:54.542] The total size of the 2 globals is 112 bytes (112 bytes)
[13:22:54.542] The total size of the 2 globals exported for future expression (‘sprintf("(%s, %s)", rr, cc)’) is 112 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘rr’ (56 bytes of class ‘numeric’) and ‘cc’ (56 bytes of class ‘numeric’)
[13:22:54.542] - globals: [2] ‘rr’, ‘cc’
[13:22:54.543] 
[13:22:54.543] getGlobalsAndPackages() ... DONE
[13:22:54.543] getGlobalsAndPackages() ...
[13:22:54.543] Searching for globals...
[13:22:54.546] - globals found: [3] ‘sprintf’, ‘rr’, ‘cc’
[13:22:54.546] Searching for globals ... DONE
[13:22:54.546] Resolving globals: FALSE
[13:22:54.547] The total size of the 2 globals is 112 bytes (112 bytes)
[13:22:54.547] The total size of the 2 globals exported for future expression (‘sprintf("(%s, %s)", rr, cc)’) is 112 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘rr’ (56 bytes of class ‘numeric’) and ‘cc’ (56 bytes of class ‘numeric’)
[13:22:54.547] - globals: [2] ‘rr’, ‘cc’
[13:22:54.547] 
[13:22:54.547] getGlobalsAndPackages() ... DONE
[13:22:54.548] getGlobalsAndPackages() ...
[13:22:54.548] Searching for globals...
[13:22:54.548] - globals found: [3] ‘sprintf’, ‘rr’, ‘cc’
[13:22:54.549] Searching for globals ... DONE
[13:22:54.549] Resolving globals: FALSE
[13:22:54.549] The total size of the 2 globals is 112 bytes (112 bytes)
[13:22:54.549] The total size of the 2 globals exported for future expression (‘sprintf("(%s, %s)", rr, cc)’) is 112 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘rr’ (56 bytes of class ‘numeric’) and ‘cc’ (56 bytes of class ‘numeric’)
[13:22:54.550] - globals: [2] ‘rr’, ‘cc’
[13:22:54.550] 
[13:22:54.550] getGlobalsAndPackages() ... DONE
[13:22:54.550] getGlobalsAndPackages() ...
[13:22:54.550] Searching for globals...
[13:22:54.551] - globals found: [3] ‘sprintf’, ‘rr’, ‘cc’
[13:22:54.551] Searching for globals ... DONE
[13:22:54.551] Resolving globals: FALSE
[13:22:54.552] The total size of the 2 globals is 112 bytes (112 bytes)
[13:22:54.552] The total size of the 2 globals exported for future expression (‘sprintf("(%s, %s)", rr, cc)’) is 112 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘rr’ (56 bytes of class ‘numeric’) and ‘cc’ (56 bytes of class ‘numeric’)
[13:22:54.552] - globals: [2] ‘rr’, ‘cc’
[13:22:54.552] 
[13:22:54.552] getGlobalsAndPackages() ... DONE
[13:22:54.553] getGlobalsAndPackages() ...
[13:22:54.553] Searching for globals...
[13:22:54.553] - globals found: [3] ‘sprintf’, ‘rr’, ‘cc’
[13:22:54.554] Searching for globals ... DONE
[13:22:54.554] Resolving globals: FALSE
[13:22:54.554] The total size of the 2 globals is 112 bytes (112 bytes)
[13:22:54.554] The total size of the 2 globals exported for future expression (‘sprintf("(%s, %s)", rr, cc)’) is 112 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘rr’ (56 bytes of class ‘numeric’) and ‘cc’ (56 bytes of class ‘numeric’)
[13:22:54.554] - globals: [2] ‘rr’, ‘cc’
[13:22:54.555] 
[13:22:54.555] getGlobalsAndPackages() ... DONE
> 
> y <- as.list(x)
[13:22:54.555] run() for ‘Future’ ...
[13:22:54.555] - state: ‘created’
[13:22:54.555] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[13:22:54.555] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[13:22:54.556] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[13:22:54.556]   - Field: ‘label’
[13:22:54.556]   - Field: ‘local’
[13:22:54.556]   - Field: ‘owner’
[13:22:54.556]   - Field: ‘envir’
[13:22:54.556]   - Field: ‘packages’
[13:22:54.556]   - Field: ‘gc’
[13:22:54.556]   - Field: ‘conditions’
[13:22:54.556]   - Field: ‘expr’
[13:22:54.556]   - Field: ‘uuid’
[13:22:54.557]   - Field: ‘seed’
[13:22:54.557]   - Field: ‘version’
[13:22:54.557]   - Field: ‘result’
[13:22:54.557]   - Field: ‘asynchronous’
[13:22:54.557]   - Field: ‘calls’
[13:22:54.557]   - Field: ‘globals’
[13:22:54.557]   - Field: ‘stdout’
[13:22:54.557]   - Field: ‘earlySignal’
[13:22:54.557]   - Field: ‘lazy’
[13:22:54.557]   - Field: ‘state’
[13:22:54.558] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[13:22:54.558] - Launch lazy future ...
[13:22:54.558] Packages needed by the future expression (n = 0): <none>
[13:22:54.558] Packages needed by future strategies (n = 0): <none>
[13:22:54.558] {
[13:22:54.558]     {
[13:22:54.558]         {
[13:22:54.558]             ...future.startTime <- base::Sys.time()
[13:22:54.558]             {
[13:22:54.558]                 {
[13:22:54.558]                   {
[13:22:54.558]                     base::local({
[13:22:54.558]                       has_future <- base::requireNamespace("future", 
[13:22:54.558]                         quietly = TRUE)
[13:22:54.558]                       if (has_future) {
[13:22:54.558]                         ns <- base::getNamespace("future")
[13:22:54.558]                         version <- ns[[".package"]][["version"]]
[13:22:54.558]                         if (is.null(version)) 
[13:22:54.558]                           version <- utils::packageVersion("future")
[13:22:54.558]                       }
[13:22:54.558]                       else {
[13:22:54.558]                         version <- NULL
[13:22:54.558]                       }
[13:22:54.558]                       if (!has_future || version < "1.8.0") {
[13:22:54.558]                         info <- base::c(r_version = base::gsub("R version ", 
[13:22:54.558]                           "", base::R.version$version.string), 
[13:22:54.558]                           platform = base::sprintf("%s (%s-bit)", 
[13:22:54.558]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:22:54.558]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[13:22:54.558]                             "release", "version")], collapse = " "), 
[13:22:54.558]                           hostname = base::Sys.info()[["nodename"]])
[13:22:54.558]                         info <- base::sprintf("%s: %s", base::names(info), 
[13:22:54.558]                           info)
[13:22:54.558]                         info <- base::paste(info, collapse = "; ")
[13:22:54.558]                         if (!has_future) {
[13:22:54.558]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:22:54.558]                             info)
[13:22:54.558]                         }
[13:22:54.558]                         else {
[13:22:54.558]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:22:54.558]                             info, version)
[13:22:54.558]                         }
[13:22:54.558]                         base::stop(msg)
[13:22:54.558]                       }
[13:22:54.558]                     })
[13:22:54.558]                   }
[13:22:54.558]                   options(future.plan = NULL)
[13:22:54.558]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:22:54.558]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:22:54.558]                 }
[13:22:54.558]                 ...future.workdir <- getwd()
[13:22:54.558]             }
[13:22:54.558]             ...future.oldOptions <- base::as.list(base::.Options)
[13:22:54.558]             ...future.oldEnvVars <- base::Sys.getenv()
[13:22:54.558]         }
[13:22:54.558]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:22:54.558]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:22:54.558]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:22:54.558]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:22:54.558]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:22:54.558]             future.stdout.windows.reencode = NULL, width = 80L)
[13:22:54.558]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:22:54.558]             base::names(...future.oldOptions))
[13:22:54.558]     }
[13:22:54.558]     if (FALSE) {
[13:22:54.558]     }
[13:22:54.558]     else {
[13:22:54.558]         if (TRUE) {
[13:22:54.558]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:22:54.558]                 open = "w")
[13:22:54.558]         }
[13:22:54.558]         else {
[13:22:54.558]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:22:54.558]                 windows = "NUL", "/dev/null"), open = "w")
[13:22:54.558]         }
[13:22:54.558]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:22:54.558]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:22:54.558]             base::sink(type = "output", split = FALSE)
[13:22:54.558]             base::close(...future.stdout)
[13:22:54.558]         }, add = TRUE)
[13:22:54.558]     }
[13:22:54.558]     ...future.frame <- base::sys.nframe()
[13:22:54.558]     ...future.conditions <- base::list()
[13:22:54.558]     ...future.rng <- base::globalenv()$.Random.seed
[13:22:54.558]     if (FALSE) {
[13:22:54.558]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:22:54.558]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:22:54.558]     }
[13:22:54.558]     ...future.result <- base::tryCatch({
[13:22:54.558]         base::withCallingHandlers({
[13:22:54.558]             ...future.value <- base::withVisible(base::local(sprintf("(%s, %s)", 
[13:22:54.558]                 rr, cc)))
[13:22:54.558]             future::FutureResult(value = ...future.value$value, 
[13:22:54.558]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:22:54.558]                   ...future.rng), globalenv = if (FALSE) 
[13:22:54.558]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:22:54.558]                     ...future.globalenv.names))
[13:22:54.558]                 else NULL, started = ...future.startTime, version = "1.8")
[13:22:54.558]         }, condition = base::local({
[13:22:54.558]             c <- base::c
[13:22:54.558]             inherits <- base::inherits
[13:22:54.558]             invokeRestart <- base::invokeRestart
[13:22:54.558]             length <- base::length
[13:22:54.558]             list <- base::list
[13:22:54.558]             seq.int <- base::seq.int
[13:22:54.558]             signalCondition <- base::signalCondition
[13:22:54.558]             sys.calls <- base::sys.calls
[13:22:54.558]             `[[` <- base::`[[`
[13:22:54.558]             `+` <- base::`+`
[13:22:54.558]             `<<-` <- base::`<<-`
[13:22:54.558]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:22:54.558]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:22:54.558]                   3L)]
[13:22:54.558]             }
[13:22:54.558]             function(cond) {
[13:22:54.558]                 is_error <- inherits(cond, "error")
[13:22:54.558]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:22:54.558]                   NULL)
[13:22:54.558]                 if (is_error) {
[13:22:54.558]                   sessionInformation <- function() {
[13:22:54.558]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:22:54.558]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:22:54.558]                       search = base::search(), system = base::Sys.info())
[13:22:54.558]                   }
[13:22:54.558]                   ...future.conditions[[length(...future.conditions) + 
[13:22:54.558]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:22:54.558]                     cond$call), session = sessionInformation(), 
[13:22:54.558]                     timestamp = base::Sys.time(), signaled = 0L)
[13:22:54.558]                   signalCondition(cond)
[13:22:54.558]                 }
[13:22:54.558]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:22:54.558]                 "immediateCondition"))) {
[13:22:54.558]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:22:54.558]                   ...future.conditions[[length(...future.conditions) + 
[13:22:54.558]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:22:54.558]                   if (TRUE && !signal) {
[13:22:54.558]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:22:54.558]                     {
[13:22:54.558]                       inherits <- base::inherits
[13:22:54.558]                       invokeRestart <- base::invokeRestart
[13:22:54.558]                       is.null <- base::is.null
[13:22:54.558]                       muffled <- FALSE
[13:22:54.558]                       if (inherits(cond, "message")) {
[13:22:54.558]                         muffled <- grepl(pattern, "muffleMessage")
[13:22:54.558]                         if (muffled) 
[13:22:54.558]                           invokeRestart("muffleMessage")
[13:22:54.558]                       }
[13:22:54.558]                       else if (inherits(cond, "warning")) {
[13:22:54.558]                         muffled <- grepl(pattern, "muffleWarning")
[13:22:54.558]                         if (muffled) 
[13:22:54.558]                           invokeRestart("muffleWarning")
[13:22:54.558]                       }
[13:22:54.558]                       else if (inherits(cond, "condition")) {
[13:22:54.558]                         if (!is.null(pattern)) {
[13:22:54.558]                           computeRestarts <- base::computeRestarts
[13:22:54.558]                           grepl <- base::grepl
[13:22:54.558]                           restarts <- computeRestarts(cond)
[13:22:54.558]                           for (restart in restarts) {
[13:22:54.558]                             name <- restart$name
[13:22:54.558]                             if (is.null(name)) 
[13:22:54.558]                               next
[13:22:54.558]                             if (!grepl(pattern, name)) 
[13:22:54.558]                               next
[13:22:54.558]                             invokeRestart(restart)
[13:22:54.558]                             muffled <- TRUE
[13:22:54.558]                             break
[13:22:54.558]                           }
[13:22:54.558]                         }
[13:22:54.558]                       }
[13:22:54.558]                       invisible(muffled)
[13:22:54.558]                     }
[13:22:54.558]                     muffleCondition(cond, pattern = "^muffle")
[13:22:54.558]                   }
[13:22:54.558]                 }
[13:22:54.558]                 else {
[13:22:54.558]                   if (TRUE) {
[13:22:54.558]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:22:54.558]                     {
[13:22:54.558]                       inherits <- base::inherits
[13:22:54.558]                       invokeRestart <- base::invokeRestart
[13:22:54.558]                       is.null <- base::is.null
[13:22:54.558]                       muffled <- FALSE
[13:22:54.558]                       if (inherits(cond, "message")) {
[13:22:54.558]                         muffled <- grepl(pattern, "muffleMessage")
[13:22:54.558]                         if (muffled) 
[13:22:54.558]                           invokeRestart("muffleMessage")
[13:22:54.558]                       }
[13:22:54.558]                       else if (inherits(cond, "warning")) {
[13:22:54.558]                         muffled <- grepl(pattern, "muffleWarning")
[13:22:54.558]                         if (muffled) 
[13:22:54.558]                           invokeRestart("muffleWarning")
[13:22:54.558]                       }
[13:22:54.558]                       else if (inherits(cond, "condition")) {
[13:22:54.558]                         if (!is.null(pattern)) {
[13:22:54.558]                           computeRestarts <- base::computeRestarts
[13:22:54.558]                           grepl <- base::grepl
[13:22:54.558]                           restarts <- computeRestarts(cond)
[13:22:54.558]                           for (restart in restarts) {
[13:22:54.558]                             name <- restart$name
[13:22:54.558]                             if (is.null(name)) 
[13:22:54.558]                               next
[13:22:54.558]                             if (!grepl(pattern, name)) 
[13:22:54.558]                               next
[13:22:54.558]                             invokeRestart(restart)
[13:22:54.558]                             muffled <- TRUE
[13:22:54.558]                             break
[13:22:54.558]                           }
[13:22:54.558]                         }
[13:22:54.558]                       }
[13:22:54.558]                       invisible(muffled)
[13:22:54.558]                     }
[13:22:54.558]                     muffleCondition(cond, pattern = "^muffle")
[13:22:54.558]                   }
[13:22:54.558]                 }
[13:22:54.558]             }
[13:22:54.558]         }))
[13:22:54.558]     }, error = function(ex) {
[13:22:54.558]         base::structure(base::list(value = NULL, visible = NULL, 
[13:22:54.558]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:22:54.558]                 ...future.rng), started = ...future.startTime, 
[13:22:54.558]             finished = Sys.time(), session_uuid = NA_character_, 
[13:22:54.558]             version = "1.8"), class = "FutureResult")
[13:22:54.558]     }, finally = {
[13:22:54.558]         if (!identical(...future.workdir, getwd())) 
[13:22:54.558]             setwd(...future.workdir)
[13:22:54.558]         {
[13:22:54.558]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:22:54.558]                 ...future.oldOptions$nwarnings <- NULL
[13:22:54.558]             }
[13:22:54.558]             base::options(...future.oldOptions)
[13:22:54.558]             if (.Platform$OS.type == "windows") {
[13:22:54.558]                 old_names <- names(...future.oldEnvVars)
[13:22:54.558]                 envs <- base::Sys.getenv()
[13:22:54.558]                 names <- names(envs)
[13:22:54.558]                 common <- intersect(names, old_names)
[13:22:54.558]                 added <- setdiff(names, old_names)
[13:22:54.558]                 removed <- setdiff(old_names, names)
[13:22:54.558]                 changed <- common[...future.oldEnvVars[common] != 
[13:22:54.558]                   envs[common]]
[13:22:54.558]                 NAMES <- toupper(changed)
[13:22:54.558]                 args <- list()
[13:22:54.558]                 for (kk in seq_along(NAMES)) {
[13:22:54.558]                   name <- changed[[kk]]
[13:22:54.558]                   NAME <- NAMES[[kk]]
[13:22:54.558]                   if (name != NAME && is.element(NAME, old_names)) 
[13:22:54.558]                     next
[13:22:54.558]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:22:54.558]                 }
[13:22:54.558]                 NAMES <- toupper(added)
[13:22:54.558]                 for (kk in seq_along(NAMES)) {
[13:22:54.558]                   name <- added[[kk]]
[13:22:54.558]                   NAME <- NAMES[[kk]]
[13:22:54.558]                   if (name != NAME && is.element(NAME, old_names)) 
[13:22:54.558]                     next
[13:22:54.558]                   args[[name]] <- ""
[13:22:54.558]                 }
[13:22:54.558]                 NAMES <- toupper(removed)
[13:22:54.558]                 for (kk in seq_along(NAMES)) {
[13:22:54.558]                   name <- removed[[kk]]
[13:22:54.558]                   NAME <- NAMES[[kk]]
[13:22:54.558]                   if (name != NAME && is.element(NAME, old_names)) 
[13:22:54.558]                     next
[13:22:54.558]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:22:54.558]                 }
[13:22:54.558]                 if (length(args) > 0) 
[13:22:54.558]                   base::do.call(base::Sys.setenv, args = args)
[13:22:54.558]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:22:54.558]             }
[13:22:54.558]             else {
[13:22:54.558]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:22:54.558]             }
[13:22:54.558]             {
[13:22:54.558]                 if (base::length(...future.futureOptionsAdded) > 
[13:22:54.558]                   0L) {
[13:22:54.558]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:22:54.558]                   base::names(opts) <- ...future.futureOptionsAdded
[13:22:54.558]                   base::options(opts)
[13:22:54.558]                 }
[13:22:54.558]                 {
[13:22:54.558]                   {
[13:22:54.558]                     NULL
[13:22:54.558]                     RNGkind("Mersenne-Twister")
[13:22:54.558]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[13:22:54.558]                       inherits = FALSE)
[13:22:54.558]                   }
[13:22:54.558]                   options(future.plan = NULL)
[13:22:54.558]                   if (is.na(NA_character_)) 
[13:22:54.558]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:22:54.558]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:22:54.558]                   future::plan(list(function (..., envir = parent.frame()) 
[13:22:54.558]                   {
[13:22:54.558]                     future <- SequentialFuture(..., envir = envir)
[13:22:54.558]                     if (!future$lazy) 
[13:22:54.558]                       future <- run(future)
[13:22:54.558]                     invisible(future)
[13:22:54.558]                   }), .cleanup = FALSE, .init = FALSE)
[13:22:54.558]                 }
[13:22:54.558]             }
[13:22:54.558]         }
[13:22:54.558]     })
[13:22:54.558]     if (TRUE) {
[13:22:54.558]         base::sink(type = "output", split = FALSE)
[13:22:54.558]         if (TRUE) {
[13:22:54.558]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:22:54.558]         }
[13:22:54.558]         else {
[13:22:54.558]             ...future.result["stdout"] <- base::list(NULL)
[13:22:54.558]         }
[13:22:54.558]         base::close(...future.stdout)
[13:22:54.558]         ...future.stdout <- NULL
[13:22:54.558]     }
[13:22:54.558]     ...future.result$conditions <- ...future.conditions
[13:22:54.558]     ...future.result$finished <- base::Sys.time()
[13:22:54.558]     ...future.result
[13:22:54.558] }
[13:22:54.560] assign_globals() ...
[13:22:54.560] List of 2
[13:22:54.560]  $ rr: int 1
[13:22:54.560]  $ cc: int 1
[13:22:54.560]  - attr(*, "where")=List of 2
[13:22:54.560]   ..$ rr:<environment: R_EmptyEnv> 
[13:22:54.560]   ..$ cc:<environment: R_EmptyEnv> 
[13:22:54.560]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[13:22:54.560]  - attr(*, "resolved")= logi FALSE
[13:22:54.560]  - attr(*, "total_size")= num 112
[13:22:54.560]  - attr(*, "already-done")= logi TRUE
[13:22:54.563] - copied ‘rr’ to environment
[13:22:54.564] - copied ‘cc’ to environment
[13:22:54.564] assign_globals() ... done
[13:22:54.564] plan(): Setting new future strategy stack:
[13:22:54.564] List of future strategies:
[13:22:54.564] 1. sequential:
[13:22:54.564]    - args: function (..., envir = parent.frame())
[13:22:54.564]    - tweaked: FALSE
[13:22:54.564]    - call: NULL
[13:22:54.564] plan(): nbrOfWorkers() = 1
[13:22:54.565] plan(): Setting new future strategy stack:
[13:22:54.565] List of future strategies:
[13:22:54.565] 1. sequential:
[13:22:54.565]    - args: function (..., envir = parent.frame())
[13:22:54.565]    - tweaked: FALSE
[13:22:54.565]    - call: future::plan("sequential")
[13:22:54.566] plan(): nbrOfWorkers() = 1
[13:22:54.566] SequentialFuture started (and completed)
[13:22:54.566] - Launch lazy future ... done
[13:22:54.566] run() for ‘SequentialFuture’ ... done
[13:22:54.566] run() for ‘Future’ ...
[13:22:54.566] - state: ‘created’
[13:22:54.567] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[13:22:54.567] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[13:22:54.567] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[13:22:54.567]   - Field: ‘label’
[13:22:54.567]   - Field: ‘local’
[13:22:54.567]   - Field: ‘owner’
[13:22:54.567]   - Field: ‘envir’
[13:22:54.567]   - Field: ‘packages’
[13:22:54.568]   - Field: ‘gc’
[13:22:54.568]   - Field: ‘conditions’
[13:22:54.568]   - Field: ‘expr’
[13:22:54.568]   - Field: ‘uuid’
[13:22:54.568]   - Field: ‘seed’
[13:22:54.568]   - Field: ‘version’
[13:22:54.568]   - Field: ‘result’
[13:22:54.568]   - Field: ‘asynchronous’
[13:22:54.568]   - Field: ‘calls’
[13:22:54.568]   - Field: ‘globals’
[13:22:54.569]   - Field: ‘stdout’
[13:22:54.569]   - Field: ‘earlySignal’
[13:22:54.569]   - Field: ‘lazy’
[13:22:54.569]   - Field: ‘state’
[13:22:54.569] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[13:22:54.569] - Launch lazy future ...
[13:22:54.569] Packages needed by the future expression (n = 0): <none>
[13:22:54.569] Packages needed by future strategies (n = 0): <none>
[13:22:54.570] {
[13:22:54.570]     {
[13:22:54.570]         {
[13:22:54.570]             ...future.startTime <- base::Sys.time()
[13:22:54.570]             {
[13:22:54.570]                 {
[13:22:54.570]                   {
[13:22:54.570]                     base::local({
[13:22:54.570]                       has_future <- base::requireNamespace("future", 
[13:22:54.570]                         quietly = TRUE)
[13:22:54.570]                       if (has_future) {
[13:22:54.570]                         ns <- base::getNamespace("future")
[13:22:54.570]                         version <- ns[[".package"]][["version"]]
[13:22:54.570]                         if (is.null(version)) 
[13:22:54.570]                           version <- utils::packageVersion("future")
[13:22:54.570]                       }
[13:22:54.570]                       else {
[13:22:54.570]                         version <- NULL
[13:22:54.570]                       }
[13:22:54.570]                       if (!has_future || version < "1.8.0") {
[13:22:54.570]                         info <- base::c(r_version = base::gsub("R version ", 
[13:22:54.570]                           "", base::R.version$version.string), 
[13:22:54.570]                           platform = base::sprintf("%s (%s-bit)", 
[13:22:54.570]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:22:54.570]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[13:22:54.570]                             "release", "version")], collapse = " "), 
[13:22:54.570]                           hostname = base::Sys.info()[["nodename"]])
[13:22:54.570]                         info <- base::sprintf("%s: %s", base::names(info), 
[13:22:54.570]                           info)
[13:22:54.570]                         info <- base::paste(info, collapse = "; ")
[13:22:54.570]                         if (!has_future) {
[13:22:54.570]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:22:54.570]                             info)
[13:22:54.570]                         }
[13:22:54.570]                         else {
[13:22:54.570]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:22:54.570]                             info, version)
[13:22:54.570]                         }
[13:22:54.570]                         base::stop(msg)
[13:22:54.570]                       }
[13:22:54.570]                     })
[13:22:54.570]                   }
[13:22:54.570]                   options(future.plan = NULL)
[13:22:54.570]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:22:54.570]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:22:54.570]                 }
[13:22:54.570]                 ...future.workdir <- getwd()
[13:22:54.570]             }
[13:22:54.570]             ...future.oldOptions <- base::as.list(base::.Options)
[13:22:54.570]             ...future.oldEnvVars <- base::Sys.getenv()
[13:22:54.570]         }
[13:22:54.570]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:22:54.570]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:22:54.570]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:22:54.570]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:22:54.570]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:22:54.570]             future.stdout.windows.reencode = NULL, width = 80L)
[13:22:54.570]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:22:54.570]             base::names(...future.oldOptions))
[13:22:54.570]     }
[13:22:54.570]     if (FALSE) {
[13:22:54.570]     }
[13:22:54.570]     else {
[13:22:54.570]         if (TRUE) {
[13:22:54.570]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:22:54.570]                 open = "w")
[13:22:54.570]         }
[13:22:54.570]         else {
[13:22:54.570]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:22:54.570]                 windows = "NUL", "/dev/null"), open = "w")
[13:22:54.570]         }
[13:22:54.570]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:22:54.570]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:22:54.570]             base::sink(type = "output", split = FALSE)
[13:22:54.570]             base::close(...future.stdout)
[13:22:54.570]         }, add = TRUE)
[13:22:54.570]     }
[13:22:54.570]     ...future.frame <- base::sys.nframe()
[13:22:54.570]     ...future.conditions <- base::list()
[13:22:54.570]     ...future.rng <- base::globalenv()$.Random.seed
[13:22:54.570]     if (FALSE) {
[13:22:54.570]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:22:54.570]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:22:54.570]     }
[13:22:54.570]     ...future.result <- base::tryCatch({
[13:22:54.570]         base::withCallingHandlers({
[13:22:54.570]             ...future.value <- base::withVisible(base::local(sprintf("(%s, %s)", 
[13:22:54.570]                 rr, cc)))
[13:22:54.570]             future::FutureResult(value = ...future.value$value, 
[13:22:54.570]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:22:54.570]                   ...future.rng), globalenv = if (FALSE) 
[13:22:54.570]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:22:54.570]                     ...future.globalenv.names))
[13:22:54.570]                 else NULL, started = ...future.startTime, version = "1.8")
[13:22:54.570]         }, condition = base::local({
[13:22:54.570]             c <- base::c
[13:22:54.570]             inherits <- base::inherits
[13:22:54.570]             invokeRestart <- base::invokeRestart
[13:22:54.570]             length <- base::length
[13:22:54.570]             list <- base::list
[13:22:54.570]             seq.int <- base::seq.int
[13:22:54.570]             signalCondition <- base::signalCondition
[13:22:54.570]             sys.calls <- base::sys.calls
[13:22:54.570]             `[[` <- base::`[[`
[13:22:54.570]             `+` <- base::`+`
[13:22:54.570]             `<<-` <- base::`<<-`
[13:22:54.570]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:22:54.570]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:22:54.570]                   3L)]
[13:22:54.570]             }
[13:22:54.570]             function(cond) {
[13:22:54.570]                 is_error <- inherits(cond, "error")
[13:22:54.570]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:22:54.570]                   NULL)
[13:22:54.570]                 if (is_error) {
[13:22:54.570]                   sessionInformation <- function() {
[13:22:54.570]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:22:54.570]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:22:54.570]                       search = base::search(), system = base::Sys.info())
[13:22:54.570]                   }
[13:22:54.570]                   ...future.conditions[[length(...future.conditions) + 
[13:22:54.570]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:22:54.570]                     cond$call), session = sessionInformation(), 
[13:22:54.570]                     timestamp = base::Sys.time(), signaled = 0L)
[13:22:54.570]                   signalCondition(cond)
[13:22:54.570]                 }
[13:22:54.570]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:22:54.570]                 "immediateCondition"))) {
[13:22:54.570]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:22:54.570]                   ...future.conditions[[length(...future.conditions) + 
[13:22:54.570]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:22:54.570]                   if (TRUE && !signal) {
[13:22:54.570]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:22:54.570]                     {
[13:22:54.570]                       inherits <- base::inherits
[13:22:54.570]                       invokeRestart <- base::invokeRestart
[13:22:54.570]                       is.null <- base::is.null
[13:22:54.570]                       muffled <- FALSE
[13:22:54.570]                       if (inherits(cond, "message")) {
[13:22:54.570]                         muffled <- grepl(pattern, "muffleMessage")
[13:22:54.570]                         if (muffled) 
[13:22:54.570]                           invokeRestart("muffleMessage")
[13:22:54.570]                       }
[13:22:54.570]                       else if (inherits(cond, "warning")) {
[13:22:54.570]                         muffled <- grepl(pattern, "muffleWarning")
[13:22:54.570]                         if (muffled) 
[13:22:54.570]                           invokeRestart("muffleWarning")
[13:22:54.570]                       }
[13:22:54.570]                       else if (inherits(cond, "condition")) {
[13:22:54.570]                         if (!is.null(pattern)) {
[13:22:54.570]                           computeRestarts <- base::computeRestarts
[13:22:54.570]                           grepl <- base::grepl
[13:22:54.570]                           restarts <- computeRestarts(cond)
[13:22:54.570]                           for (restart in restarts) {
[13:22:54.570]                             name <- restart$name
[13:22:54.570]                             if (is.null(name)) 
[13:22:54.570]                               next
[13:22:54.570]                             if (!grepl(pattern, name)) 
[13:22:54.570]                               next
[13:22:54.570]                             invokeRestart(restart)
[13:22:54.570]                             muffled <- TRUE
[13:22:54.570]                             break
[13:22:54.570]                           }
[13:22:54.570]                         }
[13:22:54.570]                       }
[13:22:54.570]                       invisible(muffled)
[13:22:54.570]                     }
[13:22:54.570]                     muffleCondition(cond, pattern = "^muffle")
[13:22:54.570]                   }
[13:22:54.570]                 }
[13:22:54.570]                 else {
[13:22:54.570]                   if (TRUE) {
[13:22:54.570]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:22:54.570]                     {
[13:22:54.570]                       inherits <- base::inherits
[13:22:54.570]                       invokeRestart <- base::invokeRestart
[13:22:54.570]                       is.null <- base::is.null
[13:22:54.570]                       muffled <- FALSE
[13:22:54.570]                       if (inherits(cond, "message")) {
[13:22:54.570]                         muffled <- grepl(pattern, "muffleMessage")
[13:22:54.570]                         if (muffled) 
[13:22:54.570]                           invokeRestart("muffleMessage")
[13:22:54.570]                       }
[13:22:54.570]                       else if (inherits(cond, "warning")) {
[13:22:54.570]                         muffled <- grepl(pattern, "muffleWarning")
[13:22:54.570]                         if (muffled) 
[13:22:54.570]                           invokeRestart("muffleWarning")
[13:22:54.570]                       }
[13:22:54.570]                       else if (inherits(cond, "condition")) {
[13:22:54.570]                         if (!is.null(pattern)) {
[13:22:54.570]                           computeRestarts <- base::computeRestarts
[13:22:54.570]                           grepl <- base::grepl
[13:22:54.570]                           restarts <- computeRestarts(cond)
[13:22:54.570]                           for (restart in restarts) {
[13:22:54.570]                             name <- restart$name
[13:22:54.570]                             if (is.null(name)) 
[13:22:54.570]                               next
[13:22:54.570]                             if (!grepl(pattern, name)) 
[13:22:54.570]                               next
[13:22:54.570]                             invokeRestart(restart)
[13:22:54.570]                             muffled <- TRUE
[13:22:54.570]                             break
[13:22:54.570]                           }
[13:22:54.570]                         }
[13:22:54.570]                       }
[13:22:54.570]                       invisible(muffled)
[13:22:54.570]                     }
[13:22:54.570]                     muffleCondition(cond, pattern = "^muffle")
[13:22:54.570]                   }
[13:22:54.570]                 }
[13:22:54.570]             }
[13:22:54.570]         }))
[13:22:54.570]     }, error = function(ex) {
[13:22:54.570]         base::structure(base::list(value = NULL, visible = NULL, 
[13:22:54.570]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:22:54.570]                 ...future.rng), started = ...future.startTime, 
[13:22:54.570]             finished = Sys.time(), session_uuid = NA_character_, 
[13:22:54.570]             version = "1.8"), class = "FutureResult")
[13:22:54.570]     }, finally = {
[13:22:54.570]         if (!identical(...future.workdir, getwd())) 
[13:22:54.570]             setwd(...future.workdir)
[13:22:54.570]         {
[13:22:54.570]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:22:54.570]                 ...future.oldOptions$nwarnings <- NULL
[13:22:54.570]             }
[13:22:54.570]             base::options(...future.oldOptions)
[13:22:54.570]             if (.Platform$OS.type == "windows") {
[13:22:54.570]                 old_names <- names(...future.oldEnvVars)
[13:22:54.570]                 envs <- base::Sys.getenv()
[13:22:54.570]                 names <- names(envs)
[13:22:54.570]                 common <- intersect(names, old_names)
[13:22:54.570]                 added <- setdiff(names, old_names)
[13:22:54.570]                 removed <- setdiff(old_names, names)
[13:22:54.570]                 changed <- common[...future.oldEnvVars[common] != 
[13:22:54.570]                   envs[common]]
[13:22:54.570]                 NAMES <- toupper(changed)
[13:22:54.570]                 args <- list()
[13:22:54.570]                 for (kk in seq_along(NAMES)) {
[13:22:54.570]                   name <- changed[[kk]]
[13:22:54.570]                   NAME <- NAMES[[kk]]
[13:22:54.570]                   if (name != NAME && is.element(NAME, old_names)) 
[13:22:54.570]                     next
[13:22:54.570]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:22:54.570]                 }
[13:22:54.570]                 NAMES <- toupper(added)
[13:22:54.570]                 for (kk in seq_along(NAMES)) {
[13:22:54.570]                   name <- added[[kk]]
[13:22:54.570]                   NAME <- NAMES[[kk]]
[13:22:54.570]                   if (name != NAME && is.element(NAME, old_names)) 
[13:22:54.570]                     next
[13:22:54.570]                   args[[name]] <- ""
[13:22:54.570]                 }
[13:22:54.570]                 NAMES <- toupper(removed)
[13:22:54.570]                 for (kk in seq_along(NAMES)) {
[13:22:54.570]                   name <- removed[[kk]]
[13:22:54.570]                   NAME <- NAMES[[kk]]
[13:22:54.570]                   if (name != NAME && is.element(NAME, old_names)) 
[13:22:54.570]                     next
[13:22:54.570]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:22:54.570]                 }
[13:22:54.570]                 if (length(args) > 0) 
[13:22:54.570]                   base::do.call(base::Sys.setenv, args = args)
[13:22:54.570]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:22:54.570]             }
[13:22:54.570]             else {
[13:22:54.570]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:22:54.570]             }
[13:22:54.570]             {
[13:22:54.570]                 if (base::length(...future.futureOptionsAdded) > 
[13:22:54.570]                   0L) {
[13:22:54.570]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:22:54.570]                   base::names(opts) <- ...future.futureOptionsAdded
[13:22:54.570]                   base::options(opts)
[13:22:54.570]                 }
[13:22:54.570]                 {
[13:22:54.570]                   {
[13:22:54.570]                     NULL
[13:22:54.570]                     RNGkind("Mersenne-Twister")
[13:22:54.570]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[13:22:54.570]                       inherits = FALSE)
[13:22:54.570]                   }
[13:22:54.570]                   options(future.plan = NULL)
[13:22:54.570]                   if (is.na(NA_character_)) 
[13:22:54.570]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:22:54.570]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:22:54.570]                   future::plan(list(function (..., envir = parent.frame()) 
[13:22:54.570]                   {
[13:22:54.570]                     future <- SequentialFuture(..., envir = envir)
[13:22:54.570]                     if (!future$lazy) 
[13:22:54.570]                       future <- run(future)
[13:22:54.570]                     invisible(future)
[13:22:54.570]                   }), .cleanup = FALSE, .init = FALSE)
[13:22:54.570]                 }
[13:22:54.570]             }
[13:22:54.570]         }
[13:22:54.570]     })
[13:22:54.570]     if (TRUE) {
[13:22:54.570]         base::sink(type = "output", split = FALSE)
[13:22:54.570]         if (TRUE) {
[13:22:54.570]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:22:54.570]         }
[13:22:54.570]         else {
[13:22:54.570]             ...future.result["stdout"] <- base::list(NULL)
[13:22:54.570]         }
[13:22:54.570]         base::close(...future.stdout)
[13:22:54.570]         ...future.stdout <- NULL
[13:22:54.570]     }
[13:22:54.570]     ...future.result$conditions <- ...future.conditions
[13:22:54.570]     ...future.result$finished <- base::Sys.time()
[13:22:54.570]     ...future.result
[13:22:54.570] }
[13:22:54.571] assign_globals() ...
[13:22:54.572] List of 2
[13:22:54.572]  $ rr: int 2
[13:22:54.572]  $ cc: int 1
[13:22:54.572]  - attr(*, "where")=List of 2
[13:22:54.572]   ..$ rr:<environment: R_EmptyEnv> 
[13:22:54.572]   ..$ cc:<environment: R_EmptyEnv> 
[13:22:54.572]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[13:22:54.572]  - attr(*, "resolved")= logi FALSE
[13:22:54.572]  - attr(*, "total_size")= num 112
[13:22:54.572]  - attr(*, "already-done")= logi TRUE
[13:22:54.576] - copied ‘rr’ to environment
[13:22:54.577] - copied ‘cc’ to environment
[13:22:54.577] assign_globals() ... done
[13:22:54.577] plan(): Setting new future strategy stack:
[13:22:54.578] List of future strategies:
[13:22:54.578] 1. sequential:
[13:22:54.578]    - args: function (..., envir = parent.frame())
[13:22:54.578]    - tweaked: FALSE
[13:22:54.578]    - call: NULL
[13:22:54.578] plan(): nbrOfWorkers() = 1
[13:22:54.579] plan(): Setting new future strategy stack:
[13:22:54.579] List of future strategies:
[13:22:54.579] 1. sequential:
[13:22:54.579]    - args: function (..., envir = parent.frame())
[13:22:54.579]    - tweaked: FALSE
[13:22:54.579]    - call: future::plan("sequential")
[13:22:54.579] plan(): nbrOfWorkers() = 1
[13:22:54.579] SequentialFuture started (and completed)
[13:22:54.580] - Launch lazy future ... done
[13:22:54.580] run() for ‘SequentialFuture’ ... done
[13:22:54.580] run() for ‘Future’ ...
[13:22:54.580] - state: ‘created’
[13:22:54.580] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[13:22:54.581] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[13:22:54.581] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[13:22:54.581]   - Field: ‘label’
[13:22:54.581]   - Field: ‘local’
[13:22:54.581]   - Field: ‘owner’
[13:22:54.581]   - Field: ‘envir’
[13:22:54.581]   - Field: ‘packages’
[13:22:54.581]   - Field: ‘gc’
[13:22:54.581]   - Field: ‘conditions’
[13:22:54.581]   - Field: ‘expr’
[13:22:54.582]   - Field: ‘uuid’
[13:22:54.582]   - Field: ‘seed’
[13:22:54.582]   - Field: ‘version’
[13:22:54.582]   - Field: ‘result’
[13:22:54.582]   - Field: ‘asynchronous’
[13:22:54.582]   - Field: ‘calls’
[13:22:54.582]   - Field: ‘globals’
[13:22:54.582]   - Field: ‘stdout’
[13:22:54.582]   - Field: ‘earlySignal’
[13:22:54.583]   - Field: ‘lazy’
[13:22:54.583]   - Field: ‘state’
[13:22:54.583] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[13:22:54.583] - Launch lazy future ...
[13:22:54.583] Packages needed by the future expression (n = 0): <none>
[13:22:54.583] Packages needed by future strategies (n = 0): <none>
[13:22:54.584] {
[13:22:54.584]     {
[13:22:54.584]         {
[13:22:54.584]             ...future.startTime <- base::Sys.time()
[13:22:54.584]             {
[13:22:54.584]                 {
[13:22:54.584]                   {
[13:22:54.584]                     base::local({
[13:22:54.584]                       has_future <- base::requireNamespace("future", 
[13:22:54.584]                         quietly = TRUE)
[13:22:54.584]                       if (has_future) {
[13:22:54.584]                         ns <- base::getNamespace("future")
[13:22:54.584]                         version <- ns[[".package"]][["version"]]
[13:22:54.584]                         if (is.null(version)) 
[13:22:54.584]                           version <- utils::packageVersion("future")
[13:22:54.584]                       }
[13:22:54.584]                       else {
[13:22:54.584]                         version <- NULL
[13:22:54.584]                       }
[13:22:54.584]                       if (!has_future || version < "1.8.0") {
[13:22:54.584]                         info <- base::c(r_version = base::gsub("R version ", 
[13:22:54.584]                           "", base::R.version$version.string), 
[13:22:54.584]                           platform = base::sprintf("%s (%s-bit)", 
[13:22:54.584]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:22:54.584]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[13:22:54.584]                             "release", "version")], collapse = " "), 
[13:22:54.584]                           hostname = base::Sys.info()[["nodename"]])
[13:22:54.584]                         info <- base::sprintf("%s: %s", base::names(info), 
[13:22:54.584]                           info)
[13:22:54.584]                         info <- base::paste(info, collapse = "; ")
[13:22:54.584]                         if (!has_future) {
[13:22:54.584]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:22:54.584]                             info)
[13:22:54.584]                         }
[13:22:54.584]                         else {
[13:22:54.584]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:22:54.584]                             info, version)
[13:22:54.584]                         }
[13:22:54.584]                         base::stop(msg)
[13:22:54.584]                       }
[13:22:54.584]                     })
[13:22:54.584]                   }
[13:22:54.584]                   options(future.plan = NULL)
[13:22:54.584]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:22:54.584]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:22:54.584]                 }
[13:22:54.584]                 ...future.workdir <- getwd()
[13:22:54.584]             }
[13:22:54.584]             ...future.oldOptions <- base::as.list(base::.Options)
[13:22:54.584]             ...future.oldEnvVars <- base::Sys.getenv()
[13:22:54.584]         }
[13:22:54.584]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:22:54.584]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:22:54.584]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:22:54.584]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:22:54.584]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:22:54.584]             future.stdout.windows.reencode = NULL, width = 80L)
[13:22:54.584]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:22:54.584]             base::names(...future.oldOptions))
[13:22:54.584]     }
[13:22:54.584]     if (FALSE) {
[13:22:54.584]     }
[13:22:54.584]     else {
[13:22:54.584]         if (TRUE) {
[13:22:54.584]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:22:54.584]                 open = "w")
[13:22:54.584]         }
[13:22:54.584]         else {
[13:22:54.584]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:22:54.584]                 windows = "NUL", "/dev/null"), open = "w")
[13:22:54.584]         }
[13:22:54.584]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:22:54.584]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:22:54.584]             base::sink(type = "output", split = FALSE)
[13:22:54.584]             base::close(...future.stdout)
[13:22:54.584]         }, add = TRUE)
[13:22:54.584]     }
[13:22:54.584]     ...future.frame <- base::sys.nframe()
[13:22:54.584]     ...future.conditions <- base::list()
[13:22:54.584]     ...future.rng <- base::globalenv()$.Random.seed
[13:22:54.584]     if (FALSE) {
[13:22:54.584]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:22:54.584]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:22:54.584]     }
[13:22:54.584]     ...future.result <- base::tryCatch({
[13:22:54.584]         base::withCallingHandlers({
[13:22:54.584]             ...future.value <- base::withVisible(base::local(sprintf("(%s, %s)", 
[13:22:54.584]                 rr, cc)))
[13:22:54.584]             future::FutureResult(value = ...future.value$value, 
[13:22:54.584]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:22:54.584]                   ...future.rng), globalenv = if (FALSE) 
[13:22:54.584]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:22:54.584]                     ...future.globalenv.names))
[13:22:54.584]                 else NULL, started = ...future.startTime, version = "1.8")
[13:22:54.584]         }, condition = base::local({
[13:22:54.584]             c <- base::c
[13:22:54.584]             inherits <- base::inherits
[13:22:54.584]             invokeRestart <- base::invokeRestart
[13:22:54.584]             length <- base::length
[13:22:54.584]             list <- base::list
[13:22:54.584]             seq.int <- base::seq.int
[13:22:54.584]             signalCondition <- base::signalCondition
[13:22:54.584]             sys.calls <- base::sys.calls
[13:22:54.584]             `[[` <- base::`[[`
[13:22:54.584]             `+` <- base::`+`
[13:22:54.584]             `<<-` <- base::`<<-`
[13:22:54.584]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:22:54.584]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:22:54.584]                   3L)]
[13:22:54.584]             }
[13:22:54.584]             function(cond) {
[13:22:54.584]                 is_error <- inherits(cond, "error")
[13:22:54.584]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:22:54.584]                   NULL)
[13:22:54.584]                 if (is_error) {
[13:22:54.584]                   sessionInformation <- function() {
[13:22:54.584]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:22:54.584]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:22:54.584]                       search = base::search(), system = base::Sys.info())
[13:22:54.584]                   }
[13:22:54.584]                   ...future.conditions[[length(...future.conditions) + 
[13:22:54.584]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:22:54.584]                     cond$call), session = sessionInformation(), 
[13:22:54.584]                     timestamp = base::Sys.time(), signaled = 0L)
[13:22:54.584]                   signalCondition(cond)
[13:22:54.584]                 }
[13:22:54.584]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:22:54.584]                 "immediateCondition"))) {
[13:22:54.584]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:22:54.584]                   ...future.conditions[[length(...future.conditions) + 
[13:22:54.584]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:22:54.584]                   if (TRUE && !signal) {
[13:22:54.584]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:22:54.584]                     {
[13:22:54.584]                       inherits <- base::inherits
[13:22:54.584]                       invokeRestart <- base::invokeRestart
[13:22:54.584]                       is.null <- base::is.null
[13:22:54.584]                       muffled <- FALSE
[13:22:54.584]                       if (inherits(cond, "message")) {
[13:22:54.584]                         muffled <- grepl(pattern, "muffleMessage")
[13:22:54.584]                         if (muffled) 
[13:22:54.584]                           invokeRestart("muffleMessage")
[13:22:54.584]                       }
[13:22:54.584]                       else if (inherits(cond, "warning")) {
[13:22:54.584]                         muffled <- grepl(pattern, "muffleWarning")
[13:22:54.584]                         if (muffled) 
[13:22:54.584]                           invokeRestart("muffleWarning")
[13:22:54.584]                       }
[13:22:54.584]                       else if (inherits(cond, "condition")) {
[13:22:54.584]                         if (!is.null(pattern)) {
[13:22:54.584]                           computeRestarts <- base::computeRestarts
[13:22:54.584]                           grepl <- base::grepl
[13:22:54.584]                           restarts <- computeRestarts(cond)
[13:22:54.584]                           for (restart in restarts) {
[13:22:54.584]                             name <- restart$name
[13:22:54.584]                             if (is.null(name)) 
[13:22:54.584]                               next
[13:22:54.584]                             if (!grepl(pattern, name)) 
[13:22:54.584]                               next
[13:22:54.584]                             invokeRestart(restart)
[13:22:54.584]                             muffled <- TRUE
[13:22:54.584]                             break
[13:22:54.584]                           }
[13:22:54.584]                         }
[13:22:54.584]                       }
[13:22:54.584]                       invisible(muffled)
[13:22:54.584]                     }
[13:22:54.584]                     muffleCondition(cond, pattern = "^muffle")
[13:22:54.584]                   }
[13:22:54.584]                 }
[13:22:54.584]                 else {
[13:22:54.584]                   if (TRUE) {
[13:22:54.584]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:22:54.584]                     {
[13:22:54.584]                       inherits <- base::inherits
[13:22:54.584]                       invokeRestart <- base::invokeRestart
[13:22:54.584]                       is.null <- base::is.null
[13:22:54.584]                       muffled <- FALSE
[13:22:54.584]                       if (inherits(cond, "message")) {
[13:22:54.584]                         muffled <- grepl(pattern, "muffleMessage")
[13:22:54.584]                         if (muffled) 
[13:22:54.584]                           invokeRestart("muffleMessage")
[13:22:54.584]                       }
[13:22:54.584]                       else if (inherits(cond, "warning")) {
[13:22:54.584]                         muffled <- grepl(pattern, "muffleWarning")
[13:22:54.584]                         if (muffled) 
[13:22:54.584]                           invokeRestart("muffleWarning")
[13:22:54.584]                       }
[13:22:54.584]                       else if (inherits(cond, "condition")) {
[13:22:54.584]                         if (!is.null(pattern)) {
[13:22:54.584]                           computeRestarts <- base::computeRestarts
[13:22:54.584]                           grepl <- base::grepl
[13:22:54.584]                           restarts <- computeRestarts(cond)
[13:22:54.584]                           for (restart in restarts) {
[13:22:54.584]                             name <- restart$name
[13:22:54.584]                             if (is.null(name)) 
[13:22:54.584]                               next
[13:22:54.584]                             if (!grepl(pattern, name)) 
[13:22:54.584]                               next
[13:22:54.584]                             invokeRestart(restart)
[13:22:54.584]                             muffled <- TRUE
[13:22:54.584]                             break
[13:22:54.584]                           }
[13:22:54.584]                         }
[13:22:54.584]                       }
[13:22:54.584]                       invisible(muffled)
[13:22:54.584]                     }
[13:22:54.584]                     muffleCondition(cond, pattern = "^muffle")
[13:22:54.584]                   }
[13:22:54.584]                 }
[13:22:54.584]             }
[13:22:54.584]         }))
[13:22:54.584]     }, error = function(ex) {
[13:22:54.584]         base::structure(base::list(value = NULL, visible = NULL, 
[13:22:54.584]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:22:54.584]                 ...future.rng), started = ...future.startTime, 
[13:22:54.584]             finished = Sys.time(), session_uuid = NA_character_, 
[13:22:54.584]             version = "1.8"), class = "FutureResult")
[13:22:54.584]     }, finally = {
[13:22:54.584]         if (!identical(...future.workdir, getwd())) 
[13:22:54.584]             setwd(...future.workdir)
[13:22:54.584]         {
[13:22:54.584]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:22:54.584]                 ...future.oldOptions$nwarnings <- NULL
[13:22:54.584]             }
[13:22:54.584]             base::options(...future.oldOptions)
[13:22:54.584]             if (.Platform$OS.type == "windows") {
[13:22:54.584]                 old_names <- names(...future.oldEnvVars)
[13:22:54.584]                 envs <- base::Sys.getenv()
[13:22:54.584]                 names <- names(envs)
[13:22:54.584]                 common <- intersect(names, old_names)
[13:22:54.584]                 added <- setdiff(names, old_names)
[13:22:54.584]                 removed <- setdiff(old_names, names)
[13:22:54.584]                 changed <- common[...future.oldEnvVars[common] != 
[13:22:54.584]                   envs[common]]
[13:22:54.584]                 NAMES <- toupper(changed)
[13:22:54.584]                 args <- list()
[13:22:54.584]                 for (kk in seq_along(NAMES)) {
[13:22:54.584]                   name <- changed[[kk]]
[13:22:54.584]                   NAME <- NAMES[[kk]]
[13:22:54.584]                   if (name != NAME && is.element(NAME, old_names)) 
[13:22:54.584]                     next
[13:22:54.584]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:22:54.584]                 }
[13:22:54.584]                 NAMES <- toupper(added)
[13:22:54.584]                 for (kk in seq_along(NAMES)) {
[13:22:54.584]                   name <- added[[kk]]
[13:22:54.584]                   NAME <- NAMES[[kk]]
[13:22:54.584]                   if (name != NAME && is.element(NAME, old_names)) 
[13:22:54.584]                     next
[13:22:54.584]                   args[[name]] <- ""
[13:22:54.584]                 }
[13:22:54.584]                 NAMES <- toupper(removed)
[13:22:54.584]                 for (kk in seq_along(NAMES)) {
[13:22:54.584]                   name <- removed[[kk]]
[13:22:54.584]                   NAME <- NAMES[[kk]]
[13:22:54.584]                   if (name != NAME && is.element(NAME, old_names)) 
[13:22:54.584]                     next
[13:22:54.584]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:22:54.584]                 }
[13:22:54.584]                 if (length(args) > 0) 
[13:22:54.584]                   base::do.call(base::Sys.setenv, args = args)
[13:22:54.584]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:22:54.584]             }
[13:22:54.584]             else {
[13:22:54.584]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:22:54.584]             }
[13:22:54.584]             {
[13:22:54.584]                 if (base::length(...future.futureOptionsAdded) > 
[13:22:54.584]                   0L) {
[13:22:54.584]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:22:54.584]                   base::names(opts) <- ...future.futureOptionsAdded
[13:22:54.584]                   base::options(opts)
[13:22:54.584]                 }
[13:22:54.584]                 {
[13:22:54.584]                   {
[13:22:54.584]                     NULL
[13:22:54.584]                     RNGkind("Mersenne-Twister")
[13:22:54.584]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[13:22:54.584]                       inherits = FALSE)
[13:22:54.584]                   }
[13:22:54.584]                   options(future.plan = NULL)
[13:22:54.584]                   if (is.na(NA_character_)) 
[13:22:54.584]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:22:54.584]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:22:54.584]                   future::plan(list(function (..., envir = parent.frame()) 
[13:22:54.584]                   {
[13:22:54.584]                     future <- SequentialFuture(..., envir = envir)
[13:22:54.584]                     if (!future$lazy) 
[13:22:54.584]                       future <- run(future)
[13:22:54.584]                     invisible(future)
[13:22:54.584]                   }), .cleanup = FALSE, .init = FALSE)
[13:22:54.584]                 }
[13:22:54.584]             }
[13:22:54.584]         }
[13:22:54.584]     })
[13:22:54.584]     if (TRUE) {
[13:22:54.584]         base::sink(type = "output", split = FALSE)
[13:22:54.584]         if (TRUE) {
[13:22:54.584]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:22:54.584]         }
[13:22:54.584]         else {
[13:22:54.584]             ...future.result["stdout"] <- base::list(NULL)
[13:22:54.584]         }
[13:22:54.584]         base::close(...future.stdout)
[13:22:54.584]         ...future.stdout <- NULL
[13:22:54.584]     }
[13:22:54.584]     ...future.result$conditions <- ...future.conditions
[13:22:54.584]     ...future.result$finished <- base::Sys.time()
[13:22:54.584]     ...future.result
[13:22:54.584] }
[13:22:54.585] assign_globals() ...
[13:22:54.585] List of 2
[13:22:54.585]  $ rr: int 3
[13:22:54.585]  $ cc: int 1
[13:22:54.585]  - attr(*, "where")=List of 2
[13:22:54.585]   ..$ rr:<environment: R_EmptyEnv> 
[13:22:54.585]   ..$ cc:<environment: R_EmptyEnv> 
[13:22:54.585]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[13:22:54.585]  - attr(*, "resolved")= logi FALSE
[13:22:54.585]  - attr(*, "total_size")= num 112
[13:22:54.585]  - attr(*, "already-done")= logi TRUE
[13:22:54.589] - copied ‘rr’ to environment
[13:22:54.589] - copied ‘cc’ to environment
[13:22:54.589] assign_globals() ... done
[13:22:54.589] plan(): Setting new future strategy stack:
[13:22:54.589] List of future strategies:
[13:22:54.589] 1. sequential:
[13:22:54.589]    - args: function (..., envir = parent.frame())
[13:22:54.589]    - tweaked: FALSE
[13:22:54.589]    - call: NULL
[13:22:54.590] plan(): nbrOfWorkers() = 1
[13:22:54.590] plan(): Setting new future strategy stack:
[13:22:54.590] List of future strategies:
[13:22:54.590] 1. sequential:
[13:22:54.590]    - args: function (..., envir = parent.frame())
[13:22:54.590]    - tweaked: FALSE
[13:22:54.590]    - call: future::plan("sequential")
[13:22:54.591] plan(): nbrOfWorkers() = 1
[13:22:54.591] SequentialFuture started (and completed)
[13:22:54.591] - Launch lazy future ... done
[13:22:54.591] run() for ‘SequentialFuture’ ... done
[13:22:54.591] run() for ‘Future’ ...
[13:22:54.591] - state: ‘created’
[13:22:54.592] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[13:22:54.592] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[13:22:54.592] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[13:22:54.592]   - Field: ‘label’
[13:22:54.592]   - Field: ‘local’
[13:22:54.592]   - Field: ‘owner’
[13:22:54.592]   - Field: ‘envir’
[13:22:54.593]   - Field: ‘packages’
[13:22:54.593]   - Field: ‘gc’
[13:22:54.593]   - Field: ‘conditions’
[13:22:54.593]   - Field: ‘expr’
[13:22:54.593]   - Field: ‘uuid’
[13:22:54.593]   - Field: ‘seed’
[13:22:54.593]   - Field: ‘version’
[13:22:54.593]   - Field: ‘result’
[13:22:54.593]   - Field: ‘asynchronous’
[13:22:54.593]   - Field: ‘calls’
[13:22:54.594]   - Field: ‘globals’
[13:22:54.594]   - Field: ‘stdout’
[13:22:54.594]   - Field: ‘earlySignal’
[13:22:54.594]   - Field: ‘lazy’
[13:22:54.594]   - Field: ‘state’
[13:22:54.594] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[13:22:54.594] - Launch lazy future ...
[13:22:54.594] Packages needed by the future expression (n = 0): <none>
[13:22:54.594] Packages needed by future strategies (n = 0): <none>
[13:22:54.595] {
[13:22:54.595]     {
[13:22:54.595]         {
[13:22:54.595]             ...future.startTime <- base::Sys.time()
[13:22:54.595]             {
[13:22:54.595]                 {
[13:22:54.595]                   {
[13:22:54.595]                     base::local({
[13:22:54.595]                       has_future <- base::requireNamespace("future", 
[13:22:54.595]                         quietly = TRUE)
[13:22:54.595]                       if (has_future) {
[13:22:54.595]                         ns <- base::getNamespace("future")
[13:22:54.595]                         version <- ns[[".package"]][["version"]]
[13:22:54.595]                         if (is.null(version)) 
[13:22:54.595]                           version <- utils::packageVersion("future")
[13:22:54.595]                       }
[13:22:54.595]                       else {
[13:22:54.595]                         version <- NULL
[13:22:54.595]                       }
[13:22:54.595]                       if (!has_future || version < "1.8.0") {
[13:22:54.595]                         info <- base::c(r_version = base::gsub("R version ", 
[13:22:54.595]                           "", base::R.version$version.string), 
[13:22:54.595]                           platform = base::sprintf("%s (%s-bit)", 
[13:22:54.595]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:22:54.595]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[13:22:54.595]                             "release", "version")], collapse = " "), 
[13:22:54.595]                           hostname = base::Sys.info()[["nodename"]])
[13:22:54.595]                         info <- base::sprintf("%s: %s", base::names(info), 
[13:22:54.595]                           info)
[13:22:54.595]                         info <- base::paste(info, collapse = "; ")
[13:22:54.595]                         if (!has_future) {
[13:22:54.595]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:22:54.595]                             info)
[13:22:54.595]                         }
[13:22:54.595]                         else {
[13:22:54.595]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:22:54.595]                             info, version)
[13:22:54.595]                         }
[13:22:54.595]                         base::stop(msg)
[13:22:54.595]                       }
[13:22:54.595]                     })
[13:22:54.595]                   }
[13:22:54.595]                   options(future.plan = NULL)
[13:22:54.595]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:22:54.595]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:22:54.595]                 }
[13:22:54.595]                 ...future.workdir <- getwd()
[13:22:54.595]             }
[13:22:54.595]             ...future.oldOptions <- base::as.list(base::.Options)
[13:22:54.595]             ...future.oldEnvVars <- base::Sys.getenv()
[13:22:54.595]         }
[13:22:54.595]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:22:54.595]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:22:54.595]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:22:54.595]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:22:54.595]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:22:54.595]             future.stdout.windows.reencode = NULL, width = 80L)
[13:22:54.595]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:22:54.595]             base::names(...future.oldOptions))
[13:22:54.595]     }
[13:22:54.595]     if (FALSE) {
[13:22:54.595]     }
[13:22:54.595]     else {
[13:22:54.595]         if (TRUE) {
[13:22:54.595]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:22:54.595]                 open = "w")
[13:22:54.595]         }
[13:22:54.595]         else {
[13:22:54.595]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:22:54.595]                 windows = "NUL", "/dev/null"), open = "w")
[13:22:54.595]         }
[13:22:54.595]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:22:54.595]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:22:54.595]             base::sink(type = "output", split = FALSE)
[13:22:54.595]             base::close(...future.stdout)
[13:22:54.595]         }, add = TRUE)
[13:22:54.595]     }
[13:22:54.595]     ...future.frame <- base::sys.nframe()
[13:22:54.595]     ...future.conditions <- base::list()
[13:22:54.595]     ...future.rng <- base::globalenv()$.Random.seed
[13:22:54.595]     if (FALSE) {
[13:22:54.595]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:22:54.595]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:22:54.595]     }
[13:22:54.595]     ...future.result <- base::tryCatch({
[13:22:54.595]         base::withCallingHandlers({
[13:22:54.595]             ...future.value <- base::withVisible(base::local(sprintf("(%s, %s)", 
[13:22:54.595]                 rr, cc)))
[13:22:54.595]             future::FutureResult(value = ...future.value$value, 
[13:22:54.595]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:22:54.595]                   ...future.rng), globalenv = if (FALSE) 
[13:22:54.595]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:22:54.595]                     ...future.globalenv.names))
[13:22:54.595]                 else NULL, started = ...future.startTime, version = "1.8")
[13:22:54.595]         }, condition = base::local({
[13:22:54.595]             c <- base::c
[13:22:54.595]             inherits <- base::inherits
[13:22:54.595]             invokeRestart <- base::invokeRestart
[13:22:54.595]             length <- base::length
[13:22:54.595]             list <- base::list
[13:22:54.595]             seq.int <- base::seq.int
[13:22:54.595]             signalCondition <- base::signalCondition
[13:22:54.595]             sys.calls <- base::sys.calls
[13:22:54.595]             `[[` <- base::`[[`
[13:22:54.595]             `+` <- base::`+`
[13:22:54.595]             `<<-` <- base::`<<-`
[13:22:54.595]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:22:54.595]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:22:54.595]                   3L)]
[13:22:54.595]             }
[13:22:54.595]             function(cond) {
[13:22:54.595]                 is_error <- inherits(cond, "error")
[13:22:54.595]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:22:54.595]                   NULL)
[13:22:54.595]                 if (is_error) {
[13:22:54.595]                   sessionInformation <- function() {
[13:22:54.595]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:22:54.595]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:22:54.595]                       search = base::search(), system = base::Sys.info())
[13:22:54.595]                   }
[13:22:54.595]                   ...future.conditions[[length(...future.conditions) + 
[13:22:54.595]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:22:54.595]                     cond$call), session = sessionInformation(), 
[13:22:54.595]                     timestamp = base::Sys.time(), signaled = 0L)
[13:22:54.595]                   signalCondition(cond)
[13:22:54.595]                 }
[13:22:54.595]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:22:54.595]                 "immediateCondition"))) {
[13:22:54.595]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:22:54.595]                   ...future.conditions[[length(...future.conditions) + 
[13:22:54.595]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:22:54.595]                   if (TRUE && !signal) {
[13:22:54.595]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:22:54.595]                     {
[13:22:54.595]                       inherits <- base::inherits
[13:22:54.595]                       invokeRestart <- base::invokeRestart
[13:22:54.595]                       is.null <- base::is.null
[13:22:54.595]                       muffled <- FALSE
[13:22:54.595]                       if (inherits(cond, "message")) {
[13:22:54.595]                         muffled <- grepl(pattern, "muffleMessage")
[13:22:54.595]                         if (muffled) 
[13:22:54.595]                           invokeRestart("muffleMessage")
[13:22:54.595]                       }
[13:22:54.595]                       else if (inherits(cond, "warning")) {
[13:22:54.595]                         muffled <- grepl(pattern, "muffleWarning")
[13:22:54.595]                         if (muffled) 
[13:22:54.595]                           invokeRestart("muffleWarning")
[13:22:54.595]                       }
[13:22:54.595]                       else if (inherits(cond, "condition")) {
[13:22:54.595]                         if (!is.null(pattern)) {
[13:22:54.595]                           computeRestarts <- base::computeRestarts
[13:22:54.595]                           grepl <- base::grepl
[13:22:54.595]                           restarts <- computeRestarts(cond)
[13:22:54.595]                           for (restart in restarts) {
[13:22:54.595]                             name <- restart$name
[13:22:54.595]                             if (is.null(name)) 
[13:22:54.595]                               next
[13:22:54.595]                             if (!grepl(pattern, name)) 
[13:22:54.595]                               next
[13:22:54.595]                             invokeRestart(restart)
[13:22:54.595]                             muffled <- TRUE
[13:22:54.595]                             break
[13:22:54.595]                           }
[13:22:54.595]                         }
[13:22:54.595]                       }
[13:22:54.595]                       invisible(muffled)
[13:22:54.595]                     }
[13:22:54.595]                     muffleCondition(cond, pattern = "^muffle")
[13:22:54.595]                   }
[13:22:54.595]                 }
[13:22:54.595]                 else {
[13:22:54.595]                   if (TRUE) {
[13:22:54.595]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:22:54.595]                     {
[13:22:54.595]                       inherits <- base::inherits
[13:22:54.595]                       invokeRestart <- base::invokeRestart
[13:22:54.595]                       is.null <- base::is.null
[13:22:54.595]                       muffled <- FALSE
[13:22:54.595]                       if (inherits(cond, "message")) {
[13:22:54.595]                         muffled <- grepl(pattern, "muffleMessage")
[13:22:54.595]                         if (muffled) 
[13:22:54.595]                           invokeRestart("muffleMessage")
[13:22:54.595]                       }
[13:22:54.595]                       else if (inherits(cond, "warning")) {
[13:22:54.595]                         muffled <- grepl(pattern, "muffleWarning")
[13:22:54.595]                         if (muffled) 
[13:22:54.595]                           invokeRestart("muffleWarning")
[13:22:54.595]                       }
[13:22:54.595]                       else if (inherits(cond, "condition")) {
[13:22:54.595]                         if (!is.null(pattern)) {
[13:22:54.595]                           computeRestarts <- base::computeRestarts
[13:22:54.595]                           grepl <- base::grepl
[13:22:54.595]                           restarts <- computeRestarts(cond)
[13:22:54.595]                           for (restart in restarts) {
[13:22:54.595]                             name <- restart$name
[13:22:54.595]                             if (is.null(name)) 
[13:22:54.595]                               next
[13:22:54.595]                             if (!grepl(pattern, name)) 
[13:22:54.595]                               next
[13:22:54.595]                             invokeRestart(restart)
[13:22:54.595]                             muffled <- TRUE
[13:22:54.595]                             break
[13:22:54.595]                           }
[13:22:54.595]                         }
[13:22:54.595]                       }
[13:22:54.595]                       invisible(muffled)
[13:22:54.595]                     }
[13:22:54.595]                     muffleCondition(cond, pattern = "^muffle")
[13:22:54.595]                   }
[13:22:54.595]                 }
[13:22:54.595]             }
[13:22:54.595]         }))
[13:22:54.595]     }, error = function(ex) {
[13:22:54.595]         base::structure(base::list(value = NULL, visible = NULL, 
[13:22:54.595]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:22:54.595]                 ...future.rng), started = ...future.startTime, 
[13:22:54.595]             finished = Sys.time(), session_uuid = NA_character_, 
[13:22:54.595]             version = "1.8"), class = "FutureResult")
[13:22:54.595]     }, finally = {
[13:22:54.595]         if (!identical(...future.workdir, getwd())) 
[13:22:54.595]             setwd(...future.workdir)
[13:22:54.595]         {
[13:22:54.595]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:22:54.595]                 ...future.oldOptions$nwarnings <- NULL
[13:22:54.595]             }
[13:22:54.595]             base::options(...future.oldOptions)
[13:22:54.595]             if (.Platform$OS.type == "windows") {
[13:22:54.595]                 old_names <- names(...future.oldEnvVars)
[13:22:54.595]                 envs <- base::Sys.getenv()
[13:22:54.595]                 names <- names(envs)
[13:22:54.595]                 common <- intersect(names, old_names)
[13:22:54.595]                 added <- setdiff(names, old_names)
[13:22:54.595]                 removed <- setdiff(old_names, names)
[13:22:54.595]                 changed <- common[...future.oldEnvVars[common] != 
[13:22:54.595]                   envs[common]]
[13:22:54.595]                 NAMES <- toupper(changed)
[13:22:54.595]                 args <- list()
[13:22:54.595]                 for (kk in seq_along(NAMES)) {
[13:22:54.595]                   name <- changed[[kk]]
[13:22:54.595]                   NAME <- NAMES[[kk]]
[13:22:54.595]                   if (name != NAME && is.element(NAME, old_names)) 
[13:22:54.595]                     next
[13:22:54.595]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:22:54.595]                 }
[13:22:54.595]                 NAMES <- toupper(added)
[13:22:54.595]                 for (kk in seq_along(NAMES)) {
[13:22:54.595]                   name <- added[[kk]]
[13:22:54.595]                   NAME <- NAMES[[kk]]
[13:22:54.595]                   if (name != NAME && is.element(NAME, old_names)) 
[13:22:54.595]                     next
[13:22:54.595]                   args[[name]] <- ""
[13:22:54.595]                 }
[13:22:54.595]                 NAMES <- toupper(removed)
[13:22:54.595]                 for (kk in seq_along(NAMES)) {
[13:22:54.595]                   name <- removed[[kk]]
[13:22:54.595]                   NAME <- NAMES[[kk]]
[13:22:54.595]                   if (name != NAME && is.element(NAME, old_names)) 
[13:22:54.595]                     next
[13:22:54.595]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:22:54.595]                 }
[13:22:54.595]                 if (length(args) > 0) 
[13:22:54.595]                   base::do.call(base::Sys.setenv, args = args)
[13:22:54.595]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:22:54.595]             }
[13:22:54.595]             else {
[13:22:54.595]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:22:54.595]             }
[13:22:54.595]             {
[13:22:54.595]                 if (base::length(...future.futureOptionsAdded) > 
[13:22:54.595]                   0L) {
[13:22:54.595]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:22:54.595]                   base::names(opts) <- ...future.futureOptionsAdded
[13:22:54.595]                   base::options(opts)
[13:22:54.595]                 }
[13:22:54.595]                 {
[13:22:54.595]                   {
[13:22:54.595]                     NULL
[13:22:54.595]                     RNGkind("Mersenne-Twister")
[13:22:54.595]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[13:22:54.595]                       inherits = FALSE)
[13:22:54.595]                   }
[13:22:54.595]                   options(future.plan = NULL)
[13:22:54.595]                   if (is.na(NA_character_)) 
[13:22:54.595]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:22:54.595]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:22:54.595]                   future::plan(list(function (..., envir = parent.frame()) 
[13:22:54.595]                   {
[13:22:54.595]                     future <- SequentialFuture(..., envir = envir)
[13:22:54.595]                     if (!future$lazy) 
[13:22:54.595]                       future <- run(future)
[13:22:54.595]                     invisible(future)
[13:22:54.595]                   }), .cleanup = FALSE, .init = FALSE)
[13:22:54.595]                 }
[13:22:54.595]             }
[13:22:54.595]         }
[13:22:54.595]     })
[13:22:54.595]     if (TRUE) {
[13:22:54.595]         base::sink(type = "output", split = FALSE)
[13:22:54.595]         if (TRUE) {
[13:22:54.595]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:22:54.595]         }
[13:22:54.595]         else {
[13:22:54.595]             ...future.result["stdout"] <- base::list(NULL)
[13:22:54.595]         }
[13:22:54.595]         base::close(...future.stdout)
[13:22:54.595]         ...future.stdout <- NULL
[13:22:54.595]     }
[13:22:54.595]     ...future.result$conditions <- ...future.conditions
[13:22:54.595]     ...future.result$finished <- base::Sys.time()
[13:22:54.595]     ...future.result
[13:22:54.595] }
[13:22:54.597] assign_globals() ...
[13:22:54.597] List of 2
[13:22:54.597]  $ rr: int 1
[13:22:54.597]  $ cc: int 2
[13:22:54.597]  - attr(*, "where")=List of 2
[13:22:54.597]   ..$ rr:<environment: R_EmptyEnv> 
[13:22:54.597]   ..$ cc:<environment: R_EmptyEnv> 
[13:22:54.597]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[13:22:54.597]  - attr(*, "resolved")= logi FALSE
[13:22:54.597]  - attr(*, "total_size")= num 112
[13:22:54.597]  - attr(*, "already-done")= logi TRUE
[13:22:54.600] - copied ‘rr’ to environment
[13:22:54.600] - copied ‘cc’ to environment
[13:22:54.600] assign_globals() ... done
[13:22:54.600] plan(): Setting new future strategy stack:
[13:22:54.600] List of future strategies:
[13:22:54.600] 1. sequential:
[13:22:54.600]    - args: function (..., envir = parent.frame())
[13:22:54.600]    - tweaked: FALSE
[13:22:54.600]    - call: NULL
[13:22:54.601] plan(): nbrOfWorkers() = 1
[13:22:54.602] plan(): Setting new future strategy stack:
[13:22:54.602] List of future strategies:
[13:22:54.602] 1. sequential:
[13:22:54.602]    - args: function (..., envir = parent.frame())
[13:22:54.602]    - tweaked: FALSE
[13:22:54.602]    - call: future::plan("sequential")
[13:22:54.602] plan(): nbrOfWorkers() = 1
[13:22:54.602] SequentialFuture started (and completed)
[13:22:54.602] - Launch lazy future ... done
[13:22:54.602] run() for ‘SequentialFuture’ ... done
[13:22:54.603] run() for ‘Future’ ...
[13:22:54.603] - state: ‘created’
[13:22:54.603] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[13:22:54.603] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[13:22:54.603] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[13:22:54.603]   - Field: ‘label’
[13:22:54.604]   - Field: ‘local’
[13:22:54.604]   - Field: ‘owner’
[13:22:54.604]   - Field: ‘envir’
[13:22:54.604]   - Field: ‘packages’
[13:22:54.604]   - Field: ‘gc’
[13:22:54.604]   - Field: ‘conditions’
[13:22:54.604]   - Field: ‘expr’
[13:22:54.604]   - Field: ‘uuid’
[13:22:54.604]   - Field: ‘seed’
[13:22:54.604]   - Field: ‘version’
[13:22:54.605]   - Field: ‘result’
[13:22:54.605]   - Field: ‘asynchronous’
[13:22:54.605]   - Field: ‘calls’
[13:22:54.605]   - Field: ‘globals’
[13:22:54.605]   - Field: ‘stdout’
[13:22:54.605]   - Field: ‘earlySignal’
[13:22:54.605]   - Field: ‘lazy’
[13:22:54.605]   - Field: ‘state’
[13:22:54.605] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[13:22:54.605] - Launch lazy future ...
[13:22:54.606] Packages needed by the future expression (n = 0): <none>
[13:22:54.606] Packages needed by future strategies (n = 0): <none>
[13:22:54.608] {
[13:22:54.608]     {
[13:22:54.608]         {
[13:22:54.608]             ...future.startTime <- base::Sys.time()
[13:22:54.608]             {
[13:22:54.608]                 {
[13:22:54.608]                   {
[13:22:54.608]                     base::local({
[13:22:54.608]                       has_future <- base::requireNamespace("future", 
[13:22:54.608]                         quietly = TRUE)
[13:22:54.608]                       if (has_future) {
[13:22:54.608]                         ns <- base::getNamespace("future")
[13:22:54.608]                         version <- ns[[".package"]][["version"]]
[13:22:54.608]                         if (is.null(version)) 
[13:22:54.608]                           version <- utils::packageVersion("future")
[13:22:54.608]                       }
[13:22:54.608]                       else {
[13:22:54.608]                         version <- NULL
[13:22:54.608]                       }
[13:22:54.608]                       if (!has_future || version < "1.8.0") {
[13:22:54.608]                         info <- base::c(r_version = base::gsub("R version ", 
[13:22:54.608]                           "", base::R.version$version.string), 
[13:22:54.608]                           platform = base::sprintf("%s (%s-bit)", 
[13:22:54.608]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:22:54.608]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[13:22:54.608]                             "release", "version")], collapse = " "), 
[13:22:54.608]                           hostname = base::Sys.info()[["nodename"]])
[13:22:54.608]                         info <- base::sprintf("%s: %s", base::names(info), 
[13:22:54.608]                           info)
[13:22:54.608]                         info <- base::paste(info, collapse = "; ")
[13:22:54.608]                         if (!has_future) {
[13:22:54.608]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:22:54.608]                             info)
[13:22:54.608]                         }
[13:22:54.608]                         else {
[13:22:54.608]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:22:54.608]                             info, version)
[13:22:54.608]                         }
[13:22:54.608]                         base::stop(msg)
[13:22:54.608]                       }
[13:22:54.608]                     })
[13:22:54.608]                   }
[13:22:54.608]                   options(future.plan = NULL)
[13:22:54.608]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:22:54.608]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:22:54.608]                 }
[13:22:54.608]                 ...future.workdir <- getwd()
[13:22:54.608]             }
[13:22:54.608]             ...future.oldOptions <- base::as.list(base::.Options)
[13:22:54.608]             ...future.oldEnvVars <- base::Sys.getenv()
[13:22:54.608]         }
[13:22:54.608]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:22:54.608]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:22:54.608]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:22:54.608]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:22:54.608]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:22:54.608]             future.stdout.windows.reencode = NULL, width = 80L)
[13:22:54.608]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:22:54.608]             base::names(...future.oldOptions))
[13:22:54.608]     }
[13:22:54.608]     if (FALSE) {
[13:22:54.608]     }
[13:22:54.608]     else {
[13:22:54.608]         if (TRUE) {
[13:22:54.608]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:22:54.608]                 open = "w")
[13:22:54.608]         }
[13:22:54.608]         else {
[13:22:54.608]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:22:54.608]                 windows = "NUL", "/dev/null"), open = "w")
[13:22:54.608]         }
[13:22:54.608]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:22:54.608]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:22:54.608]             base::sink(type = "output", split = FALSE)
[13:22:54.608]             base::close(...future.stdout)
[13:22:54.608]         }, add = TRUE)
[13:22:54.608]     }
[13:22:54.608]     ...future.frame <- base::sys.nframe()
[13:22:54.608]     ...future.conditions <- base::list()
[13:22:54.608]     ...future.rng <- base::globalenv()$.Random.seed
[13:22:54.608]     if (FALSE) {
[13:22:54.608]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:22:54.608]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:22:54.608]     }
[13:22:54.608]     ...future.result <- base::tryCatch({
[13:22:54.608]         base::withCallingHandlers({
[13:22:54.608]             ...future.value <- base::withVisible(base::local(sprintf("(%s, %s)", 
[13:22:54.608]                 rr, cc)))
[13:22:54.608]             future::FutureResult(value = ...future.value$value, 
[13:22:54.608]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:22:54.608]                   ...future.rng), globalenv = if (FALSE) 
[13:22:54.608]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:22:54.608]                     ...future.globalenv.names))
[13:22:54.608]                 else NULL, started = ...future.startTime, version = "1.8")
[13:22:54.608]         }, condition = base::local({
[13:22:54.608]             c <- base::c
[13:22:54.608]             inherits <- base::inherits
[13:22:54.608]             invokeRestart <- base::invokeRestart
[13:22:54.608]             length <- base::length
[13:22:54.608]             list <- base::list
[13:22:54.608]             seq.int <- base::seq.int
[13:22:54.608]             signalCondition <- base::signalCondition
[13:22:54.608]             sys.calls <- base::sys.calls
[13:22:54.608]             `[[` <- base::`[[`
[13:22:54.608]             `+` <- base::`+`
[13:22:54.608]             `<<-` <- base::`<<-`
[13:22:54.608]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:22:54.608]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:22:54.608]                   3L)]
[13:22:54.608]             }
[13:22:54.608]             function(cond) {
[13:22:54.608]                 is_error <- inherits(cond, "error")
[13:22:54.608]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:22:54.608]                   NULL)
[13:22:54.608]                 if (is_error) {
[13:22:54.608]                   sessionInformation <- function() {
[13:22:54.608]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:22:54.608]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:22:54.608]                       search = base::search(), system = base::Sys.info())
[13:22:54.608]                   }
[13:22:54.608]                   ...future.conditions[[length(...future.conditions) + 
[13:22:54.608]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:22:54.608]                     cond$call), session = sessionInformation(), 
[13:22:54.608]                     timestamp = base::Sys.time(), signaled = 0L)
[13:22:54.608]                   signalCondition(cond)
[13:22:54.608]                 }
[13:22:54.608]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:22:54.608]                 "immediateCondition"))) {
[13:22:54.608]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:22:54.608]                   ...future.conditions[[length(...future.conditions) + 
[13:22:54.608]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:22:54.608]                   if (TRUE && !signal) {
[13:22:54.608]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:22:54.608]                     {
[13:22:54.608]                       inherits <- base::inherits
[13:22:54.608]                       invokeRestart <- base::invokeRestart
[13:22:54.608]                       is.null <- base::is.null
[13:22:54.608]                       muffled <- FALSE
[13:22:54.608]                       if (inherits(cond, "message")) {
[13:22:54.608]                         muffled <- grepl(pattern, "muffleMessage")
[13:22:54.608]                         if (muffled) 
[13:22:54.608]                           invokeRestart("muffleMessage")
[13:22:54.608]                       }
[13:22:54.608]                       else if (inherits(cond, "warning")) {
[13:22:54.608]                         muffled <- grepl(pattern, "muffleWarning")
[13:22:54.608]                         if (muffled) 
[13:22:54.608]                           invokeRestart("muffleWarning")
[13:22:54.608]                       }
[13:22:54.608]                       else if (inherits(cond, "condition")) {
[13:22:54.608]                         if (!is.null(pattern)) {
[13:22:54.608]                           computeRestarts <- base::computeRestarts
[13:22:54.608]                           grepl <- base::grepl
[13:22:54.608]                           restarts <- computeRestarts(cond)
[13:22:54.608]                           for (restart in restarts) {
[13:22:54.608]                             name <- restart$name
[13:22:54.608]                             if (is.null(name)) 
[13:22:54.608]                               next
[13:22:54.608]                             if (!grepl(pattern, name)) 
[13:22:54.608]                               next
[13:22:54.608]                             invokeRestart(restart)
[13:22:54.608]                             muffled <- TRUE
[13:22:54.608]                             break
[13:22:54.608]                           }
[13:22:54.608]                         }
[13:22:54.608]                       }
[13:22:54.608]                       invisible(muffled)
[13:22:54.608]                     }
[13:22:54.608]                     muffleCondition(cond, pattern = "^muffle")
[13:22:54.608]                   }
[13:22:54.608]                 }
[13:22:54.608]                 else {
[13:22:54.608]                   if (TRUE) {
[13:22:54.608]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:22:54.608]                     {
[13:22:54.608]                       inherits <- base::inherits
[13:22:54.608]                       invokeRestart <- base::invokeRestart
[13:22:54.608]                       is.null <- base::is.null
[13:22:54.608]                       muffled <- FALSE
[13:22:54.608]                       if (inherits(cond, "message")) {
[13:22:54.608]                         muffled <- grepl(pattern, "muffleMessage")
[13:22:54.608]                         if (muffled) 
[13:22:54.608]                           invokeRestart("muffleMessage")
[13:22:54.608]                       }
[13:22:54.608]                       else if (inherits(cond, "warning")) {
[13:22:54.608]                         muffled <- grepl(pattern, "muffleWarning")
[13:22:54.608]                         if (muffled) 
[13:22:54.608]                           invokeRestart("muffleWarning")
[13:22:54.608]                       }
[13:22:54.608]                       else if (inherits(cond, "condition")) {
[13:22:54.608]                         if (!is.null(pattern)) {
[13:22:54.608]                           computeRestarts <- base::computeRestarts
[13:22:54.608]                           grepl <- base::grepl
[13:22:54.608]                           restarts <- computeRestarts(cond)
[13:22:54.608]                           for (restart in restarts) {
[13:22:54.608]                             name <- restart$name
[13:22:54.608]                             if (is.null(name)) 
[13:22:54.608]                               next
[13:22:54.608]                             if (!grepl(pattern, name)) 
[13:22:54.608]                               next
[13:22:54.608]                             invokeRestart(restart)
[13:22:54.608]                             muffled <- TRUE
[13:22:54.608]                             break
[13:22:54.608]                           }
[13:22:54.608]                         }
[13:22:54.608]                       }
[13:22:54.608]                       invisible(muffled)
[13:22:54.608]                     }
[13:22:54.608]                     muffleCondition(cond, pattern = "^muffle")
[13:22:54.608]                   }
[13:22:54.608]                 }
[13:22:54.608]             }
[13:22:54.608]         }))
[13:22:54.608]     }, error = function(ex) {
[13:22:54.608]         base::structure(base::list(value = NULL, visible = NULL, 
[13:22:54.608]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:22:54.608]                 ...future.rng), started = ...future.startTime, 
[13:22:54.608]             finished = Sys.time(), session_uuid = NA_character_, 
[13:22:54.608]             version = "1.8"), class = "FutureResult")
[13:22:54.608]     }, finally = {
[13:22:54.608]         if (!identical(...future.workdir, getwd())) 
[13:22:54.608]             setwd(...future.workdir)
[13:22:54.608]         {
[13:22:54.608]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:22:54.608]                 ...future.oldOptions$nwarnings <- NULL
[13:22:54.608]             }
[13:22:54.608]             base::options(...future.oldOptions)
[13:22:54.608]             if (.Platform$OS.type == "windows") {
[13:22:54.608]                 old_names <- names(...future.oldEnvVars)
[13:22:54.608]                 envs <- base::Sys.getenv()
[13:22:54.608]                 names <- names(envs)
[13:22:54.608]                 common <- intersect(names, old_names)
[13:22:54.608]                 added <- setdiff(names, old_names)
[13:22:54.608]                 removed <- setdiff(old_names, names)
[13:22:54.608]                 changed <- common[...future.oldEnvVars[common] != 
[13:22:54.608]                   envs[common]]
[13:22:54.608]                 NAMES <- toupper(changed)
[13:22:54.608]                 args <- list()
[13:22:54.608]                 for (kk in seq_along(NAMES)) {
[13:22:54.608]                   name <- changed[[kk]]
[13:22:54.608]                   NAME <- NAMES[[kk]]
[13:22:54.608]                   if (name != NAME && is.element(NAME, old_names)) 
[13:22:54.608]                     next
[13:22:54.608]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:22:54.608]                 }
[13:22:54.608]                 NAMES <- toupper(added)
[13:22:54.608]                 for (kk in seq_along(NAMES)) {
[13:22:54.608]                   name <- added[[kk]]
[13:22:54.608]                   NAME <- NAMES[[kk]]
[13:22:54.608]                   if (name != NAME && is.element(NAME, old_names)) 
[13:22:54.608]                     next
[13:22:54.608]                   args[[name]] <- ""
[13:22:54.608]                 }
[13:22:54.608]                 NAMES <- toupper(removed)
[13:22:54.608]                 for (kk in seq_along(NAMES)) {
[13:22:54.608]                   name <- removed[[kk]]
[13:22:54.608]                   NAME <- NAMES[[kk]]
[13:22:54.608]                   if (name != NAME && is.element(NAME, old_names)) 
[13:22:54.608]                     next
[13:22:54.608]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:22:54.608]                 }
[13:22:54.608]                 if (length(args) > 0) 
[13:22:54.608]                   base::do.call(base::Sys.setenv, args = args)
[13:22:54.608]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:22:54.608]             }
[13:22:54.608]             else {
[13:22:54.608]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:22:54.608]             }
[13:22:54.608]             {
[13:22:54.608]                 if (base::length(...future.futureOptionsAdded) > 
[13:22:54.608]                   0L) {
[13:22:54.608]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:22:54.608]                   base::names(opts) <- ...future.futureOptionsAdded
[13:22:54.608]                   base::options(opts)
[13:22:54.608]                 }
[13:22:54.608]                 {
[13:22:54.608]                   {
[13:22:54.608]                     NULL
[13:22:54.608]                     RNGkind("Mersenne-Twister")
[13:22:54.608]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[13:22:54.608]                       inherits = FALSE)
[13:22:54.608]                   }
[13:22:54.608]                   options(future.plan = NULL)
[13:22:54.608]                   if (is.na(NA_character_)) 
[13:22:54.608]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:22:54.608]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:22:54.608]                   future::plan(list(function (..., envir = parent.frame()) 
[13:22:54.608]                   {
[13:22:54.608]                     future <- SequentialFuture(..., envir = envir)
[13:22:54.608]                     if (!future$lazy) 
[13:22:54.608]                       future <- run(future)
[13:22:54.608]                     invisible(future)
[13:22:54.608]                   }), .cleanup = FALSE, .init = FALSE)
[13:22:54.608]                 }
[13:22:54.608]             }
[13:22:54.608]         }
[13:22:54.608]     })
[13:22:54.608]     if (TRUE) {
[13:22:54.608]         base::sink(type = "output", split = FALSE)
[13:22:54.608]         if (TRUE) {
[13:22:54.608]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:22:54.608]         }
[13:22:54.608]         else {
[13:22:54.608]             ...future.result["stdout"] <- base::list(NULL)
[13:22:54.608]         }
[13:22:54.608]         base::close(...future.stdout)
[13:22:54.608]         ...future.stdout <- NULL
[13:22:54.608]     }
[13:22:54.608]     ...future.result$conditions <- ...future.conditions
[13:22:54.608]     ...future.result$finished <- base::Sys.time()
[13:22:54.608]     ...future.result
[13:22:54.608] }
[13:22:54.610] assign_globals() ...
[13:22:54.610] List of 2
[13:22:54.610]  $ rr: int 2
[13:22:54.610]  $ cc: int 2
[13:22:54.610]  - attr(*, "where")=List of 2
[13:22:54.610]   ..$ rr:<environment: R_EmptyEnv> 
[13:22:54.610]   ..$ cc:<environment: R_EmptyEnv> 
[13:22:54.610]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[13:22:54.610]  - attr(*, "resolved")= logi FALSE
[13:22:54.610]  - attr(*, "total_size")= num 112
[13:22:54.610]  - attr(*, "already-done")= logi TRUE
[13:22:54.613] - copied ‘rr’ to environment
[13:22:54.613] - copied ‘cc’ to environment
[13:22:54.613] assign_globals() ... done
[13:22:54.613] plan(): Setting new future strategy stack:
[13:22:54.613] List of future strategies:
[13:22:54.613] 1. sequential:
[13:22:54.613]    - args: function (..., envir = parent.frame())
[13:22:54.613]    - tweaked: FALSE
[13:22:54.613]    - call: NULL
[13:22:54.614] plan(): nbrOfWorkers() = 1
[13:22:54.615] plan(): Setting new future strategy stack:
[13:22:54.615] List of future strategies:
[13:22:54.615] 1. sequential:
[13:22:54.615]    - args: function (..., envir = parent.frame())
[13:22:54.615]    - tweaked: FALSE
[13:22:54.615]    - call: future::plan("sequential")
[13:22:54.615] plan(): nbrOfWorkers() = 1
[13:22:54.615] SequentialFuture started (and completed)
[13:22:54.615] - Launch lazy future ... done
[13:22:54.615] run() for ‘SequentialFuture’ ... done
[13:22:54.616] run() for ‘Future’ ...
[13:22:54.616] - state: ‘created’
[13:22:54.616] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[13:22:54.616] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[13:22:54.616] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[13:22:54.616]   - Field: ‘label’
[13:22:54.617]   - Field: ‘local’
[13:22:54.617]   - Field: ‘owner’
[13:22:54.617]   - Field: ‘envir’
[13:22:54.617]   - Field: ‘packages’
[13:22:54.617]   - Field: ‘gc’
[13:22:54.617]   - Field: ‘conditions’
[13:22:54.617]   - Field: ‘expr’
[13:22:54.617]   - Field: ‘uuid’
[13:22:54.617]   - Field: ‘seed’
[13:22:54.617]   - Field: ‘version’
[13:22:54.618]   - Field: ‘result’
[13:22:54.618]   - Field: ‘asynchronous’
[13:22:54.618]   - Field: ‘calls’
[13:22:54.618]   - Field: ‘globals’
[13:22:54.618]   - Field: ‘stdout’
[13:22:54.618]   - Field: ‘earlySignal’
[13:22:54.618]   - Field: ‘lazy’
[13:22:54.618]   - Field: ‘state’
[13:22:54.618] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[13:22:54.618] - Launch lazy future ...
[13:22:54.619] Packages needed by the future expression (n = 0): <none>
[13:22:54.619] Packages needed by future strategies (n = 0): <none>
[13:22:54.619] {
[13:22:54.619]     {
[13:22:54.619]         {
[13:22:54.619]             ...future.startTime <- base::Sys.time()
[13:22:54.619]             {
[13:22:54.619]                 {
[13:22:54.619]                   {
[13:22:54.619]                     base::local({
[13:22:54.619]                       has_future <- base::requireNamespace("future", 
[13:22:54.619]                         quietly = TRUE)
[13:22:54.619]                       if (has_future) {
[13:22:54.619]                         ns <- base::getNamespace("future")
[13:22:54.619]                         version <- ns[[".package"]][["version"]]
[13:22:54.619]                         if (is.null(version)) 
[13:22:54.619]                           version <- utils::packageVersion("future")
[13:22:54.619]                       }
[13:22:54.619]                       else {
[13:22:54.619]                         version <- NULL
[13:22:54.619]                       }
[13:22:54.619]                       if (!has_future || version < "1.8.0") {
[13:22:54.619]                         info <- base::c(r_version = base::gsub("R version ", 
[13:22:54.619]                           "", base::R.version$version.string), 
[13:22:54.619]                           platform = base::sprintf("%s (%s-bit)", 
[13:22:54.619]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:22:54.619]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[13:22:54.619]                             "release", "version")], collapse = " "), 
[13:22:54.619]                           hostname = base::Sys.info()[["nodename"]])
[13:22:54.619]                         info <- base::sprintf("%s: %s", base::names(info), 
[13:22:54.619]                           info)
[13:22:54.619]                         info <- base::paste(info, collapse = "; ")
[13:22:54.619]                         if (!has_future) {
[13:22:54.619]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:22:54.619]                             info)
[13:22:54.619]                         }
[13:22:54.619]                         else {
[13:22:54.619]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:22:54.619]                             info, version)
[13:22:54.619]                         }
[13:22:54.619]                         base::stop(msg)
[13:22:54.619]                       }
[13:22:54.619]                     })
[13:22:54.619]                   }
[13:22:54.619]                   options(future.plan = NULL)
[13:22:54.619]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:22:54.619]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:22:54.619]                 }
[13:22:54.619]                 ...future.workdir <- getwd()
[13:22:54.619]             }
[13:22:54.619]             ...future.oldOptions <- base::as.list(base::.Options)
[13:22:54.619]             ...future.oldEnvVars <- base::Sys.getenv()
[13:22:54.619]         }
[13:22:54.619]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:22:54.619]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:22:54.619]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:22:54.619]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:22:54.619]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:22:54.619]             future.stdout.windows.reencode = NULL, width = 80L)
[13:22:54.619]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:22:54.619]             base::names(...future.oldOptions))
[13:22:54.619]     }
[13:22:54.619]     if (FALSE) {
[13:22:54.619]     }
[13:22:54.619]     else {
[13:22:54.619]         if (TRUE) {
[13:22:54.619]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:22:54.619]                 open = "w")
[13:22:54.619]         }
[13:22:54.619]         else {
[13:22:54.619]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:22:54.619]                 windows = "NUL", "/dev/null"), open = "w")
[13:22:54.619]         }
[13:22:54.619]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:22:54.619]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:22:54.619]             base::sink(type = "output", split = FALSE)
[13:22:54.619]             base::close(...future.stdout)
[13:22:54.619]         }, add = TRUE)
[13:22:54.619]     }
[13:22:54.619]     ...future.frame <- base::sys.nframe()
[13:22:54.619]     ...future.conditions <- base::list()
[13:22:54.619]     ...future.rng <- base::globalenv()$.Random.seed
[13:22:54.619]     if (FALSE) {
[13:22:54.619]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:22:54.619]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:22:54.619]     }
[13:22:54.619]     ...future.result <- base::tryCatch({
[13:22:54.619]         base::withCallingHandlers({
[13:22:54.619]             ...future.value <- base::withVisible(base::local(sprintf("(%s, %s)", 
[13:22:54.619]                 rr, cc)))
[13:22:54.619]             future::FutureResult(value = ...future.value$value, 
[13:22:54.619]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:22:54.619]                   ...future.rng), globalenv = if (FALSE) 
[13:22:54.619]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:22:54.619]                     ...future.globalenv.names))
[13:22:54.619]                 else NULL, started = ...future.startTime, version = "1.8")
[13:22:54.619]         }, condition = base::local({
[13:22:54.619]             c <- base::c
[13:22:54.619]             inherits <- base::inherits
[13:22:54.619]             invokeRestart <- base::invokeRestart
[13:22:54.619]             length <- base::length
[13:22:54.619]             list <- base::list
[13:22:54.619]             seq.int <- base::seq.int
[13:22:54.619]             signalCondition <- base::signalCondition
[13:22:54.619]             sys.calls <- base::sys.calls
[13:22:54.619]             `[[` <- base::`[[`
[13:22:54.619]             `+` <- base::`+`
[13:22:54.619]             `<<-` <- base::`<<-`
[13:22:54.619]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:22:54.619]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:22:54.619]                   3L)]
[13:22:54.619]             }
[13:22:54.619]             function(cond) {
[13:22:54.619]                 is_error <- inherits(cond, "error")
[13:22:54.619]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:22:54.619]                   NULL)
[13:22:54.619]                 if (is_error) {
[13:22:54.619]                   sessionInformation <- function() {
[13:22:54.619]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:22:54.619]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:22:54.619]                       search = base::search(), system = base::Sys.info())
[13:22:54.619]                   }
[13:22:54.619]                   ...future.conditions[[length(...future.conditions) + 
[13:22:54.619]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:22:54.619]                     cond$call), session = sessionInformation(), 
[13:22:54.619]                     timestamp = base::Sys.time(), signaled = 0L)
[13:22:54.619]                   signalCondition(cond)
[13:22:54.619]                 }
[13:22:54.619]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:22:54.619]                 "immediateCondition"))) {
[13:22:54.619]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:22:54.619]                   ...future.conditions[[length(...future.conditions) + 
[13:22:54.619]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:22:54.619]                   if (TRUE && !signal) {
[13:22:54.619]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:22:54.619]                     {
[13:22:54.619]                       inherits <- base::inherits
[13:22:54.619]                       invokeRestart <- base::invokeRestart
[13:22:54.619]                       is.null <- base::is.null
[13:22:54.619]                       muffled <- FALSE
[13:22:54.619]                       if (inherits(cond, "message")) {
[13:22:54.619]                         muffled <- grepl(pattern, "muffleMessage")
[13:22:54.619]                         if (muffled) 
[13:22:54.619]                           invokeRestart("muffleMessage")
[13:22:54.619]                       }
[13:22:54.619]                       else if (inherits(cond, "warning")) {
[13:22:54.619]                         muffled <- grepl(pattern, "muffleWarning")
[13:22:54.619]                         if (muffled) 
[13:22:54.619]                           invokeRestart("muffleWarning")
[13:22:54.619]                       }
[13:22:54.619]                       else if (inherits(cond, "condition")) {
[13:22:54.619]                         if (!is.null(pattern)) {
[13:22:54.619]                           computeRestarts <- base::computeRestarts
[13:22:54.619]                           grepl <- base::grepl
[13:22:54.619]                           restarts <- computeRestarts(cond)
[13:22:54.619]                           for (restart in restarts) {
[13:22:54.619]                             name <- restart$name
[13:22:54.619]                             if (is.null(name)) 
[13:22:54.619]                               next
[13:22:54.619]                             if (!grepl(pattern, name)) 
[13:22:54.619]                               next
[13:22:54.619]                             invokeRestart(restart)
[13:22:54.619]                             muffled <- TRUE
[13:22:54.619]                             break
[13:22:54.619]                           }
[13:22:54.619]                         }
[13:22:54.619]                       }
[13:22:54.619]                       invisible(muffled)
[13:22:54.619]                     }
[13:22:54.619]                     muffleCondition(cond, pattern = "^muffle")
[13:22:54.619]                   }
[13:22:54.619]                 }
[13:22:54.619]                 else {
[13:22:54.619]                   if (TRUE) {
[13:22:54.619]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:22:54.619]                     {
[13:22:54.619]                       inherits <- base::inherits
[13:22:54.619]                       invokeRestart <- base::invokeRestart
[13:22:54.619]                       is.null <- base::is.null
[13:22:54.619]                       muffled <- FALSE
[13:22:54.619]                       if (inherits(cond, "message")) {
[13:22:54.619]                         muffled <- grepl(pattern, "muffleMessage")
[13:22:54.619]                         if (muffled) 
[13:22:54.619]                           invokeRestart("muffleMessage")
[13:22:54.619]                       }
[13:22:54.619]                       else if (inherits(cond, "warning")) {
[13:22:54.619]                         muffled <- grepl(pattern, "muffleWarning")
[13:22:54.619]                         if (muffled) 
[13:22:54.619]                           invokeRestart("muffleWarning")
[13:22:54.619]                       }
[13:22:54.619]                       else if (inherits(cond, "condition")) {
[13:22:54.619]                         if (!is.null(pattern)) {
[13:22:54.619]                           computeRestarts <- base::computeRestarts
[13:22:54.619]                           grepl <- base::grepl
[13:22:54.619]                           restarts <- computeRestarts(cond)
[13:22:54.619]                           for (restart in restarts) {
[13:22:54.619]                             name <- restart$name
[13:22:54.619]                             if (is.null(name)) 
[13:22:54.619]                               next
[13:22:54.619]                             if (!grepl(pattern, name)) 
[13:22:54.619]                               next
[13:22:54.619]                             invokeRestart(restart)
[13:22:54.619]                             muffled <- TRUE
[13:22:54.619]                             break
[13:22:54.619]                           }
[13:22:54.619]                         }
[13:22:54.619]                       }
[13:22:54.619]                       invisible(muffled)
[13:22:54.619]                     }
[13:22:54.619]                     muffleCondition(cond, pattern = "^muffle")
[13:22:54.619]                   }
[13:22:54.619]                 }
[13:22:54.619]             }
[13:22:54.619]         }))
[13:22:54.619]     }, error = function(ex) {
[13:22:54.619]         base::structure(base::list(value = NULL, visible = NULL, 
[13:22:54.619]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:22:54.619]                 ...future.rng), started = ...future.startTime, 
[13:22:54.619]             finished = Sys.time(), session_uuid = NA_character_, 
[13:22:54.619]             version = "1.8"), class = "FutureResult")
[13:22:54.619]     }, finally = {
[13:22:54.619]         if (!identical(...future.workdir, getwd())) 
[13:22:54.619]             setwd(...future.workdir)
[13:22:54.619]         {
[13:22:54.619]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:22:54.619]                 ...future.oldOptions$nwarnings <- NULL
[13:22:54.619]             }
[13:22:54.619]             base::options(...future.oldOptions)
[13:22:54.619]             if (.Platform$OS.type == "windows") {
[13:22:54.619]                 old_names <- names(...future.oldEnvVars)
[13:22:54.619]                 envs <- base::Sys.getenv()
[13:22:54.619]                 names <- names(envs)
[13:22:54.619]                 common <- intersect(names, old_names)
[13:22:54.619]                 added <- setdiff(names, old_names)
[13:22:54.619]                 removed <- setdiff(old_names, names)
[13:22:54.619]                 changed <- common[...future.oldEnvVars[common] != 
[13:22:54.619]                   envs[common]]
[13:22:54.619]                 NAMES <- toupper(changed)
[13:22:54.619]                 args <- list()
[13:22:54.619]                 for (kk in seq_along(NAMES)) {
[13:22:54.619]                   name <- changed[[kk]]
[13:22:54.619]                   NAME <- NAMES[[kk]]
[13:22:54.619]                   if (name != NAME && is.element(NAME, old_names)) 
[13:22:54.619]                     next
[13:22:54.619]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:22:54.619]                 }
[13:22:54.619]                 NAMES <- toupper(added)
[13:22:54.619]                 for (kk in seq_along(NAMES)) {
[13:22:54.619]                   name <- added[[kk]]
[13:22:54.619]                   NAME <- NAMES[[kk]]
[13:22:54.619]                   if (name != NAME && is.element(NAME, old_names)) 
[13:22:54.619]                     next
[13:22:54.619]                   args[[name]] <- ""
[13:22:54.619]                 }
[13:22:54.619]                 NAMES <- toupper(removed)
[13:22:54.619]                 for (kk in seq_along(NAMES)) {
[13:22:54.619]                   name <- removed[[kk]]
[13:22:54.619]                   NAME <- NAMES[[kk]]
[13:22:54.619]                   if (name != NAME && is.element(NAME, old_names)) 
[13:22:54.619]                     next
[13:22:54.619]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:22:54.619]                 }
[13:22:54.619]                 if (length(args) > 0) 
[13:22:54.619]                   base::do.call(base::Sys.setenv, args = args)
[13:22:54.619]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:22:54.619]             }
[13:22:54.619]             else {
[13:22:54.619]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:22:54.619]             }
[13:22:54.619]             {
[13:22:54.619]                 if (base::length(...future.futureOptionsAdded) > 
[13:22:54.619]                   0L) {
[13:22:54.619]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:22:54.619]                   base::names(opts) <- ...future.futureOptionsAdded
[13:22:54.619]                   base::options(opts)
[13:22:54.619]                 }
[13:22:54.619]                 {
[13:22:54.619]                   {
[13:22:54.619]                     NULL
[13:22:54.619]                     RNGkind("Mersenne-Twister")
[13:22:54.619]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[13:22:54.619]                       inherits = FALSE)
[13:22:54.619]                   }
[13:22:54.619]                   options(future.plan = NULL)
[13:22:54.619]                   if (is.na(NA_character_)) 
[13:22:54.619]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:22:54.619]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:22:54.619]                   future::plan(list(function (..., envir = parent.frame()) 
[13:22:54.619]                   {
[13:22:54.619]                     future <- SequentialFuture(..., envir = envir)
[13:22:54.619]                     if (!future$lazy) 
[13:22:54.619]                       future <- run(future)
[13:22:54.619]                     invisible(future)
[13:22:54.619]                   }), .cleanup = FALSE, .init = FALSE)
[13:22:54.619]                 }
[13:22:54.619]             }
[13:22:54.619]         }
[13:22:54.619]     })
[13:22:54.619]     if (TRUE) {
[13:22:54.619]         base::sink(type = "output", split = FALSE)
[13:22:54.619]         if (TRUE) {
[13:22:54.619]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:22:54.619]         }
[13:22:54.619]         else {
[13:22:54.619]             ...future.result["stdout"] <- base::list(NULL)
[13:22:54.619]         }
[13:22:54.619]         base::close(...future.stdout)
[13:22:54.619]         ...future.stdout <- NULL
[13:22:54.619]     }
[13:22:54.619]     ...future.result$conditions <- ...future.conditions
[13:22:54.619]     ...future.result$finished <- base::Sys.time()
[13:22:54.619]     ...future.result
[13:22:54.619] }
[13:22:54.621] assign_globals() ...
[13:22:54.621] List of 2
[13:22:54.621]  $ rr: int 3
[13:22:54.621]  $ cc: int 2
[13:22:54.621]  - attr(*, "where")=List of 2
[13:22:54.621]   ..$ rr:<environment: R_EmptyEnv> 
[13:22:54.621]   ..$ cc:<environment: R_EmptyEnv> 
[13:22:54.621]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[13:22:54.621]  - attr(*, "resolved")= logi FALSE
[13:22:54.621]  - attr(*, "total_size")= num 112
[13:22:54.621]  - attr(*, "already-done")= logi TRUE
[13:22:54.624] - copied ‘rr’ to environment
[13:22:54.624] - copied ‘cc’ to environment
[13:22:54.624] assign_globals() ... done
[13:22:54.624] plan(): Setting new future strategy stack:
[13:22:54.624] List of future strategies:
[13:22:54.624] 1. sequential:
[13:22:54.624]    - args: function (..., envir = parent.frame())
[13:22:54.624]    - tweaked: FALSE
[13:22:54.624]    - call: NULL
[13:22:54.625] plan(): nbrOfWorkers() = 1
[13:22:54.626] plan(): Setting new future strategy stack:
[13:22:54.626] List of future strategies:
[13:22:54.626] 1. sequential:
[13:22:54.626]    - args: function (..., envir = parent.frame())
[13:22:54.626]    - tweaked: FALSE
[13:22:54.626]    - call: future::plan("sequential")
[13:22:54.626] plan(): nbrOfWorkers() = 1
[13:22:54.626] SequentialFuture started (and completed)
[13:22:54.626] - Launch lazy future ... done
[13:22:54.627] run() for ‘SequentialFuture’ ... done
> dim(y) <- dim(x)
> stopifnot(identical(y, x0))
> 
> message("*** %<-% to listenv: multiple dimensions ... DONE")
*** %<-% to listenv: multiple dimensions ... DONE
> 
> message("*** %<-% to listenv ... DONE")
*** %<-% to listenv ... DONE
> 
> source("incl/end.R")
[13:22:54.627] plan(): Setting new future strategy stack:
[13:22:54.627] List of future strategies:
[13:22:54.627] 1. FutureStrategy:
[13:22:54.627]    - args: function (..., envir = parent.frame())
[13:22:54.627]    - tweaked: FALSE
[13:22:54.627]    - call: future::plan(oplan)
[13:22:54.641] plan(): nbrOfWorkers() = 1
> 
