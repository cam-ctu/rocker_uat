
R version 4.3.2 (2023-10-31) -- "Eye Holes"
Copyright (C) 2023 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> source("incl/start.R")
[10:25:32.603] plan(): Setting new future strategy stack:
[10:25:32.603] List of future strategies:
[10:25:32.603] 1. sequential:
[10:25:32.603]    - args: function (..., envir = parent.frame())
[10:25:32.603]    - tweaked: FALSE
[10:25:32.603]    - call: future::plan("sequential")
[10:25:32.617] plan(): nbrOfWorkers() = 1
> 
> message("*** Futures - labels ...")
*** Futures - labels ...
> 
> strategies <- supportedStrategies()
> 
> ## Speed up CRAN checks: Skip on CRAN Windows 32-bit
> if (!fullTest && isWin32) strategies <- NULL
> 
> for (strategy in strategies) {
+   message(sprintf("- plan('%s') ...", strategy))
+   plan(strategy)
+ 
+   for (label in list(NULL, sprintf("strategy = %s", strategy))) {
+     fcn <- get(strategy, mode = "function")
+     stopifnot(inherits(fcn, strategy))
+     f <- fcn(42, label = label)
+     print(f)
+     stopifnot(identical(f$label, label))
+     v <- value(f)
+     stopifnot(v == 42)
+     
+     f <- future(42, label = label)
+     print(f)
+     stopifnot(identical(f$label, label))
+     v <- value(f)
+     stopifnot(v == 42)
+ 
+     v %<-% { 42 } %label% label
+     f <- futureOf(v)
+     print(f)
+     stopifnot(identical(f$label, label))
+     stopifnot(v == 42)
+ 
+   } ## for (label ...)
+ 
+   message(sprintf("- plan('%s') ... DONE", strategy))
+ } ## for (strategy ...)
- plan('sequential') ...
[10:25:32.640] plan(): Setting new future strategy stack:
[10:25:32.640] List of future strategies:
[10:25:32.640] 1. sequential:
[10:25:32.640]    - args: function (..., envir = parent.frame())
[10:25:32.640]    - tweaked: FALSE
[10:25:32.640]    - call: plan(strategy)
[10:25:32.652] plan(): nbrOfWorkers() = 1
[10:25:32.653] getGlobalsAndPackages() ...
[10:25:32.653] Searching for globals...
[10:25:32.655] 
[10:25:32.655] Searching for globals ... DONE
[10:25:32.655] - globals: [0] <none>
[10:25:32.655] getGlobalsAndPackages() ... DONE
[10:25:32.656] Packages needed by the future expression (n = 0): <none>
[10:25:32.656] Packages needed by future strategies (n = 0): <none>
[10:25:32.657] {
[10:25:32.657]     {
[10:25:32.657]         {
[10:25:32.657]             ...future.startTime <- base::Sys.time()
[10:25:32.657]             {
[10:25:32.657]                 {
[10:25:32.657]                   {
[10:25:32.657]                     base::local({
[10:25:32.657]                       has_future <- base::requireNamespace("future", 
[10:25:32.657]                         quietly = TRUE)
[10:25:32.657]                       if (has_future) {
[10:25:32.657]                         ns <- base::getNamespace("future")
[10:25:32.657]                         version <- ns[[".package"]][["version"]]
[10:25:32.657]                         if (is.null(version)) 
[10:25:32.657]                           version <- utils::packageVersion("future")
[10:25:32.657]                       }
[10:25:32.657]                       else {
[10:25:32.657]                         version <- NULL
[10:25:32.657]                       }
[10:25:32.657]                       if (!has_future || version < "1.8.0") {
[10:25:32.657]                         info <- base::c(r_version = base::gsub("R version ", 
[10:25:32.657]                           "", base::R.version$version.string), 
[10:25:32.657]                           platform = base::sprintf("%s (%s-bit)", 
[10:25:32.657]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:25:32.657]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[10:25:32.657]                             "release", "version")], collapse = " "), 
[10:25:32.657]                           hostname = base::Sys.info()[["nodename"]])
[10:25:32.657]                         info <- base::sprintf("%s: %s", base::names(info), 
[10:25:32.657]                           info)
[10:25:32.657]                         info <- base::paste(info, collapse = "; ")
[10:25:32.657]                         if (!has_future) {
[10:25:32.657]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:25:32.657]                             info)
[10:25:32.657]                         }
[10:25:32.657]                         else {
[10:25:32.657]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:25:32.657]                             info, version)
[10:25:32.657]                         }
[10:25:32.657]                         base::stop(msg)
[10:25:32.657]                       }
[10:25:32.657]                     })
[10:25:32.657]                   }
[10:25:32.657]                   options(future.plan = NULL)
[10:25:32.657]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:25:32.657]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:25:32.657]                 }
[10:25:32.657]                 ...future.workdir <- getwd()
[10:25:32.657]             }
[10:25:32.657]             ...future.oldOptions <- base::as.list(base::.Options)
[10:25:32.657]             ...future.oldEnvVars <- base::Sys.getenv()
[10:25:32.657]         }
[10:25:32.657]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:25:32.657]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[10:25:32.657]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:25:32.657]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:25:32.657]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:25:32.657]             future.stdout.windows.reencode = NULL, width = 80L)
[10:25:32.657]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:25:32.657]             base::names(...future.oldOptions))
[10:25:32.657]     }
[10:25:32.657]     if (FALSE) {
[10:25:32.657]     }
[10:25:32.657]     else {
[10:25:32.657]         if (TRUE) {
[10:25:32.657]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:25:32.657]                 open = "w")
[10:25:32.657]         }
[10:25:32.657]         else {
[10:25:32.657]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:25:32.657]                 windows = "NUL", "/dev/null"), open = "w")
[10:25:32.657]         }
[10:25:32.657]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:25:32.657]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:25:32.657]             base::sink(type = "output", split = FALSE)
[10:25:32.657]             base::close(...future.stdout)
[10:25:32.657]         }, add = TRUE)
[10:25:32.657]     }
[10:25:32.657]     ...future.frame <- base::sys.nframe()
[10:25:32.657]     ...future.conditions <- base::list()
[10:25:32.657]     ...future.rng <- base::globalenv()$.Random.seed
[10:25:32.657]     if (FALSE) {
[10:25:32.657]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:25:32.657]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:25:32.657]     }
[10:25:32.657]     ...future.result <- base::tryCatch({
[10:25:32.657]         base::withCallingHandlers({
[10:25:32.657]             ...future.value <- base::withVisible(base::local(42))
[10:25:32.657]             future::FutureResult(value = ...future.value$value, 
[10:25:32.657]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:25:32.657]                   ...future.rng), globalenv = if (FALSE) 
[10:25:32.657]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:25:32.657]                     ...future.globalenv.names))
[10:25:32.657]                 else NULL, started = ...future.startTime, version = "1.8")
[10:25:32.657]         }, condition = base::local({
[10:25:32.657]             c <- base::c
[10:25:32.657]             inherits <- base::inherits
[10:25:32.657]             invokeRestart <- base::invokeRestart
[10:25:32.657]             length <- base::length
[10:25:32.657]             list <- base::list
[10:25:32.657]             seq.int <- base::seq.int
[10:25:32.657]             signalCondition <- base::signalCondition
[10:25:32.657]             sys.calls <- base::sys.calls
[10:25:32.657]             `[[` <- base::`[[`
[10:25:32.657]             `+` <- base::`+`
[10:25:32.657]             `<<-` <- base::`<<-`
[10:25:32.657]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:25:32.657]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:25:32.657]                   3L)]
[10:25:32.657]             }
[10:25:32.657]             function(cond) {
[10:25:32.657]                 is_error <- inherits(cond, "error")
[10:25:32.657]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:25:32.657]                   NULL)
[10:25:32.657]                 if (is_error) {
[10:25:32.657]                   sessionInformation <- function() {
[10:25:32.657]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:25:32.657]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:25:32.657]                       search = base::search(), system = base::Sys.info())
[10:25:32.657]                   }
[10:25:32.657]                   ...future.conditions[[length(...future.conditions) + 
[10:25:32.657]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:25:32.657]                     cond$call), session = sessionInformation(), 
[10:25:32.657]                     timestamp = base::Sys.time(), signaled = 0L)
[10:25:32.657]                   signalCondition(cond)
[10:25:32.657]                 }
[10:25:32.657]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:25:32.657]                 "immediateCondition"))) {
[10:25:32.657]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:25:32.657]                   ...future.conditions[[length(...future.conditions) + 
[10:25:32.657]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:25:32.657]                   if (TRUE && !signal) {
[10:25:32.657]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:25:32.657]                     {
[10:25:32.657]                       inherits <- base::inherits
[10:25:32.657]                       invokeRestart <- base::invokeRestart
[10:25:32.657]                       is.null <- base::is.null
[10:25:32.657]                       muffled <- FALSE
[10:25:32.657]                       if (inherits(cond, "message")) {
[10:25:32.657]                         muffled <- grepl(pattern, "muffleMessage")
[10:25:32.657]                         if (muffled) 
[10:25:32.657]                           invokeRestart("muffleMessage")
[10:25:32.657]                       }
[10:25:32.657]                       else if (inherits(cond, "warning")) {
[10:25:32.657]                         muffled <- grepl(pattern, "muffleWarning")
[10:25:32.657]                         if (muffled) 
[10:25:32.657]                           invokeRestart("muffleWarning")
[10:25:32.657]                       }
[10:25:32.657]                       else if (inherits(cond, "condition")) {
[10:25:32.657]                         if (!is.null(pattern)) {
[10:25:32.657]                           computeRestarts <- base::computeRestarts
[10:25:32.657]                           grepl <- base::grepl
[10:25:32.657]                           restarts <- computeRestarts(cond)
[10:25:32.657]                           for (restart in restarts) {
[10:25:32.657]                             name <- restart$name
[10:25:32.657]                             if (is.null(name)) 
[10:25:32.657]                               next
[10:25:32.657]                             if (!grepl(pattern, name)) 
[10:25:32.657]                               next
[10:25:32.657]                             invokeRestart(restart)
[10:25:32.657]                             muffled <- TRUE
[10:25:32.657]                             break
[10:25:32.657]                           }
[10:25:32.657]                         }
[10:25:32.657]                       }
[10:25:32.657]                       invisible(muffled)
[10:25:32.657]                     }
[10:25:32.657]                     muffleCondition(cond, pattern = "^muffle")
[10:25:32.657]                   }
[10:25:32.657]                 }
[10:25:32.657]                 else {
[10:25:32.657]                   if (TRUE) {
[10:25:32.657]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:25:32.657]                     {
[10:25:32.657]                       inherits <- base::inherits
[10:25:32.657]                       invokeRestart <- base::invokeRestart
[10:25:32.657]                       is.null <- base::is.null
[10:25:32.657]                       muffled <- FALSE
[10:25:32.657]                       if (inherits(cond, "message")) {
[10:25:32.657]                         muffled <- grepl(pattern, "muffleMessage")
[10:25:32.657]                         if (muffled) 
[10:25:32.657]                           invokeRestart("muffleMessage")
[10:25:32.657]                       }
[10:25:32.657]                       else if (inherits(cond, "warning")) {
[10:25:32.657]                         muffled <- grepl(pattern, "muffleWarning")
[10:25:32.657]                         if (muffled) 
[10:25:32.657]                           invokeRestart("muffleWarning")
[10:25:32.657]                       }
[10:25:32.657]                       else if (inherits(cond, "condition")) {
[10:25:32.657]                         if (!is.null(pattern)) {
[10:25:32.657]                           computeRestarts <- base::computeRestarts
[10:25:32.657]                           grepl <- base::grepl
[10:25:32.657]                           restarts <- computeRestarts(cond)
[10:25:32.657]                           for (restart in restarts) {
[10:25:32.657]                             name <- restart$name
[10:25:32.657]                             if (is.null(name)) 
[10:25:32.657]                               next
[10:25:32.657]                             if (!grepl(pattern, name)) 
[10:25:32.657]                               next
[10:25:32.657]                             invokeRestart(restart)
[10:25:32.657]                             muffled <- TRUE
[10:25:32.657]                             break
[10:25:32.657]                           }
[10:25:32.657]                         }
[10:25:32.657]                       }
[10:25:32.657]                       invisible(muffled)
[10:25:32.657]                     }
[10:25:32.657]                     muffleCondition(cond, pattern = "^muffle")
[10:25:32.657]                   }
[10:25:32.657]                 }
[10:25:32.657]             }
[10:25:32.657]         }))
[10:25:32.657]     }, error = function(ex) {
[10:25:32.657]         base::structure(base::list(value = NULL, visible = NULL, 
[10:25:32.657]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:25:32.657]                 ...future.rng), started = ...future.startTime, 
[10:25:32.657]             finished = Sys.time(), session_uuid = NA_character_, 
[10:25:32.657]             version = "1.8"), class = "FutureResult")
[10:25:32.657]     }, finally = {
[10:25:32.657]         if (!identical(...future.workdir, getwd())) 
[10:25:32.657]             setwd(...future.workdir)
[10:25:32.657]         {
[10:25:32.657]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:25:32.657]                 ...future.oldOptions$nwarnings <- NULL
[10:25:32.657]             }
[10:25:32.657]             base::options(...future.oldOptions)
[10:25:32.657]             if (.Platform$OS.type == "windows") {
[10:25:32.657]                 old_names <- names(...future.oldEnvVars)
[10:25:32.657]                 envs <- base::Sys.getenv()
[10:25:32.657]                 names <- names(envs)
[10:25:32.657]                 common <- intersect(names, old_names)
[10:25:32.657]                 added <- setdiff(names, old_names)
[10:25:32.657]                 removed <- setdiff(old_names, names)
[10:25:32.657]                 changed <- common[...future.oldEnvVars[common] != 
[10:25:32.657]                   envs[common]]
[10:25:32.657]                 NAMES <- toupper(changed)
[10:25:32.657]                 args <- list()
[10:25:32.657]                 for (kk in seq_along(NAMES)) {
[10:25:32.657]                   name <- changed[[kk]]
[10:25:32.657]                   NAME <- NAMES[[kk]]
[10:25:32.657]                   if (name != NAME && is.element(NAME, old_names)) 
[10:25:32.657]                     next
[10:25:32.657]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:25:32.657]                 }
[10:25:32.657]                 NAMES <- toupper(added)
[10:25:32.657]                 for (kk in seq_along(NAMES)) {
[10:25:32.657]                   name <- added[[kk]]
[10:25:32.657]                   NAME <- NAMES[[kk]]
[10:25:32.657]                   if (name != NAME && is.element(NAME, old_names)) 
[10:25:32.657]                     next
[10:25:32.657]                   args[[name]] <- ""
[10:25:32.657]                 }
[10:25:32.657]                 NAMES <- toupper(removed)
[10:25:32.657]                 for (kk in seq_along(NAMES)) {
[10:25:32.657]                   name <- removed[[kk]]
[10:25:32.657]                   NAME <- NAMES[[kk]]
[10:25:32.657]                   if (name != NAME && is.element(NAME, old_names)) 
[10:25:32.657]                     next
[10:25:32.657]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:25:32.657]                 }
[10:25:32.657]                 if (length(args) > 0) 
[10:25:32.657]                   base::do.call(base::Sys.setenv, args = args)
[10:25:32.657]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:25:32.657]             }
[10:25:32.657]             else {
[10:25:32.657]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:25:32.657]             }
[10:25:32.657]             {
[10:25:32.657]                 if (base::length(...future.futureOptionsAdded) > 
[10:25:32.657]                   0L) {
[10:25:32.657]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:25:32.657]                   base::names(opts) <- ...future.futureOptionsAdded
[10:25:32.657]                   base::options(opts)
[10:25:32.657]                 }
[10:25:32.657]                 {
[10:25:32.657]                   {
[10:25:32.657]                     NULL
[10:25:32.657]                     RNGkind("Mersenne-Twister")
[10:25:32.657]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[10:25:32.657]                       inherits = FALSE)
[10:25:32.657]                   }
[10:25:32.657]                   options(future.plan = NULL)
[10:25:32.657]                   if (is.na(NA_character_)) 
[10:25:32.657]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:25:32.657]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:25:32.657]                   future::plan(list(function (..., envir = parent.frame()) 
[10:25:32.657]                   {
[10:25:32.657]                     future <- SequentialFuture(..., envir = envir)
[10:25:32.657]                     if (!future$lazy) 
[10:25:32.657]                       future <- run(future)
[10:25:32.657]                     invisible(future)
[10:25:32.657]                   }), .cleanup = FALSE, .init = FALSE)
[10:25:32.657]                 }
[10:25:32.657]             }
[10:25:32.657]         }
[10:25:32.657]     })
[10:25:32.657]     if (TRUE) {
[10:25:32.657]         base::sink(type = "output", split = FALSE)
[10:25:32.657]         if (TRUE) {
[10:25:32.657]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:25:32.657]         }
[10:25:32.657]         else {
[10:25:32.657]             ...future.result["stdout"] <- base::list(NULL)
[10:25:32.657]         }
[10:25:32.657]         base::close(...future.stdout)
[10:25:32.657]         ...future.stdout <- NULL
[10:25:32.657]     }
[10:25:32.657]     ...future.result$conditions <- ...future.conditions
[10:25:32.657]     ...future.result$finished <- base::Sys.time()
[10:25:32.657]     ...future.result
[10:25:32.657] }
[10:25:32.659] plan(): Setting new future strategy stack:
[10:25:32.659] List of future strategies:
[10:25:32.659] 1. sequential:
[10:25:32.659]    - args: function (..., envir = parent.frame())
[10:25:32.659]    - tweaked: FALSE
[10:25:32.659]    - call: NULL
[10:25:32.660] plan(): nbrOfWorkers() = 1
[10:25:32.661] plan(): Setting new future strategy stack:
[10:25:32.661] List of future strategies:
[10:25:32.661] 1. sequential:
[10:25:32.661]    - args: function (..., envir = parent.frame())
[10:25:32.661]    - tweaked: FALSE
[10:25:32.661]    - call: plan(strategy)
[10:25:32.661] plan(): nbrOfWorkers() = 1
[10:25:32.661] SequentialFuture started (and completed)
SequentialFuture:
Label: ‘<none>’
Expression:
[1] 42
Lazy evaluation: FALSE
Asynchronous evaluation: FALSE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: TRUE
Value: 56 bytes of class ‘numeric’
Early signaling: FALSE
Owner process: 378a73a7-17bc-11e5-cdc3-65eb29aceac6
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[10:25:32.663] getGlobalsAndPackages() ...
[10:25:32.663] Searching for globals...
[10:25:32.663] 
[10:25:32.664] Searching for globals ... DONE
[10:25:32.664] - globals: [0] <none>
[10:25:32.664] getGlobalsAndPackages() ... DONE
[10:25:32.664] run() for ‘Future’ ...
[10:25:32.664] - state: ‘created’
[10:25:32.664] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:25:32.665] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[10:25:32.665] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[10:25:32.665]   - Field: ‘label’
[10:25:32.665]   - Field: ‘local’
[10:25:32.665]   - Field: ‘owner’
[10:25:32.665]   - Field: ‘envir’
[10:25:32.665]   - Field: ‘packages’
[10:25:32.665]   - Field: ‘gc’
[10:25:32.665]   - Field: ‘conditions’
[10:25:32.666]   - Field: ‘expr’
[10:25:32.666]   - Field: ‘uuid’
[10:25:32.666]   - Field: ‘seed’
[10:25:32.666]   - Field: ‘version’
[10:25:32.666]   - Field: ‘result’
[10:25:32.666]   - Field: ‘asynchronous’
[10:25:32.666]   - Field: ‘calls’
[10:25:32.666]   - Field: ‘globals’
[10:25:32.666]   - Field: ‘stdout’
[10:25:32.666]   - Field: ‘earlySignal’
[10:25:32.666]   - Field: ‘lazy’
[10:25:32.666]   - Field: ‘state’
[10:25:32.667] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[10:25:32.667] - Launch lazy future ...
[10:25:32.667] Packages needed by the future expression (n = 0): <none>
[10:25:32.667] Packages needed by future strategies (n = 0): <none>
[10:25:32.667] {
[10:25:32.667]     {
[10:25:32.667]         {
[10:25:32.667]             ...future.startTime <- base::Sys.time()
[10:25:32.667]             {
[10:25:32.667]                 {
[10:25:32.667]                   {
[10:25:32.667]                     base::local({
[10:25:32.667]                       has_future <- base::requireNamespace("future", 
[10:25:32.667]                         quietly = TRUE)
[10:25:32.667]                       if (has_future) {
[10:25:32.667]                         ns <- base::getNamespace("future")
[10:25:32.667]                         version <- ns[[".package"]][["version"]]
[10:25:32.667]                         if (is.null(version)) 
[10:25:32.667]                           version <- utils::packageVersion("future")
[10:25:32.667]                       }
[10:25:32.667]                       else {
[10:25:32.667]                         version <- NULL
[10:25:32.667]                       }
[10:25:32.667]                       if (!has_future || version < "1.8.0") {
[10:25:32.667]                         info <- base::c(r_version = base::gsub("R version ", 
[10:25:32.667]                           "", base::R.version$version.string), 
[10:25:32.667]                           platform = base::sprintf("%s (%s-bit)", 
[10:25:32.667]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:25:32.667]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[10:25:32.667]                             "release", "version")], collapse = " "), 
[10:25:32.667]                           hostname = base::Sys.info()[["nodename"]])
[10:25:32.667]                         info <- base::sprintf("%s: %s", base::names(info), 
[10:25:32.667]                           info)
[10:25:32.667]                         info <- base::paste(info, collapse = "; ")
[10:25:32.667]                         if (!has_future) {
[10:25:32.667]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:25:32.667]                             info)
[10:25:32.667]                         }
[10:25:32.667]                         else {
[10:25:32.667]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:25:32.667]                             info, version)
[10:25:32.667]                         }
[10:25:32.667]                         base::stop(msg)
[10:25:32.667]                       }
[10:25:32.667]                     })
[10:25:32.667]                   }
[10:25:32.667]                   options(future.plan = NULL)
[10:25:32.667]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:25:32.667]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:25:32.667]                 }
[10:25:32.667]                 ...future.workdir <- getwd()
[10:25:32.667]             }
[10:25:32.667]             ...future.oldOptions <- base::as.list(base::.Options)
[10:25:32.667]             ...future.oldEnvVars <- base::Sys.getenv()
[10:25:32.667]         }
[10:25:32.667]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:25:32.667]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[10:25:32.667]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:25:32.667]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:25:32.667]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:25:32.667]             future.stdout.windows.reencode = NULL, width = 80L)
[10:25:32.667]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:25:32.667]             base::names(...future.oldOptions))
[10:25:32.667]     }
[10:25:32.667]     if (FALSE) {
[10:25:32.667]     }
[10:25:32.667]     else {
[10:25:32.667]         if (TRUE) {
[10:25:32.667]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:25:32.667]                 open = "w")
[10:25:32.667]         }
[10:25:32.667]         else {
[10:25:32.667]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:25:32.667]                 windows = "NUL", "/dev/null"), open = "w")
[10:25:32.667]         }
[10:25:32.667]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:25:32.667]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:25:32.667]             base::sink(type = "output", split = FALSE)
[10:25:32.667]             base::close(...future.stdout)
[10:25:32.667]         }, add = TRUE)
[10:25:32.667]     }
[10:25:32.667]     ...future.frame <- base::sys.nframe()
[10:25:32.667]     ...future.conditions <- base::list()
[10:25:32.667]     ...future.rng <- base::globalenv()$.Random.seed
[10:25:32.667]     if (FALSE) {
[10:25:32.667]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:25:32.667]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:25:32.667]     }
[10:25:32.667]     ...future.result <- base::tryCatch({
[10:25:32.667]         base::withCallingHandlers({
[10:25:32.667]             ...future.value <- base::withVisible(base::local(42))
[10:25:32.667]             future::FutureResult(value = ...future.value$value, 
[10:25:32.667]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:25:32.667]                   ...future.rng), globalenv = if (FALSE) 
[10:25:32.667]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:25:32.667]                     ...future.globalenv.names))
[10:25:32.667]                 else NULL, started = ...future.startTime, version = "1.8")
[10:25:32.667]         }, condition = base::local({
[10:25:32.667]             c <- base::c
[10:25:32.667]             inherits <- base::inherits
[10:25:32.667]             invokeRestart <- base::invokeRestart
[10:25:32.667]             length <- base::length
[10:25:32.667]             list <- base::list
[10:25:32.667]             seq.int <- base::seq.int
[10:25:32.667]             signalCondition <- base::signalCondition
[10:25:32.667]             sys.calls <- base::sys.calls
[10:25:32.667]             `[[` <- base::`[[`
[10:25:32.667]             `+` <- base::`+`
[10:25:32.667]             `<<-` <- base::`<<-`
[10:25:32.667]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:25:32.667]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:25:32.667]                   3L)]
[10:25:32.667]             }
[10:25:32.667]             function(cond) {
[10:25:32.667]                 is_error <- inherits(cond, "error")
[10:25:32.667]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:25:32.667]                   NULL)
[10:25:32.667]                 if (is_error) {
[10:25:32.667]                   sessionInformation <- function() {
[10:25:32.667]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:25:32.667]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:25:32.667]                       search = base::search(), system = base::Sys.info())
[10:25:32.667]                   }
[10:25:32.667]                   ...future.conditions[[length(...future.conditions) + 
[10:25:32.667]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:25:32.667]                     cond$call), session = sessionInformation(), 
[10:25:32.667]                     timestamp = base::Sys.time(), signaled = 0L)
[10:25:32.667]                   signalCondition(cond)
[10:25:32.667]                 }
[10:25:32.667]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:25:32.667]                 "immediateCondition"))) {
[10:25:32.667]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:25:32.667]                   ...future.conditions[[length(...future.conditions) + 
[10:25:32.667]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:25:32.667]                   if (TRUE && !signal) {
[10:25:32.667]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:25:32.667]                     {
[10:25:32.667]                       inherits <- base::inherits
[10:25:32.667]                       invokeRestart <- base::invokeRestart
[10:25:32.667]                       is.null <- base::is.null
[10:25:32.667]                       muffled <- FALSE
[10:25:32.667]                       if (inherits(cond, "message")) {
[10:25:32.667]                         muffled <- grepl(pattern, "muffleMessage")
[10:25:32.667]                         if (muffled) 
[10:25:32.667]                           invokeRestart("muffleMessage")
[10:25:32.667]                       }
[10:25:32.667]                       else if (inherits(cond, "warning")) {
[10:25:32.667]                         muffled <- grepl(pattern, "muffleWarning")
[10:25:32.667]                         if (muffled) 
[10:25:32.667]                           invokeRestart("muffleWarning")
[10:25:32.667]                       }
[10:25:32.667]                       else if (inherits(cond, "condition")) {
[10:25:32.667]                         if (!is.null(pattern)) {
[10:25:32.667]                           computeRestarts <- base::computeRestarts
[10:25:32.667]                           grepl <- base::grepl
[10:25:32.667]                           restarts <- computeRestarts(cond)
[10:25:32.667]                           for (restart in restarts) {
[10:25:32.667]                             name <- restart$name
[10:25:32.667]                             if (is.null(name)) 
[10:25:32.667]                               next
[10:25:32.667]                             if (!grepl(pattern, name)) 
[10:25:32.667]                               next
[10:25:32.667]                             invokeRestart(restart)
[10:25:32.667]                             muffled <- TRUE
[10:25:32.667]                             break
[10:25:32.667]                           }
[10:25:32.667]                         }
[10:25:32.667]                       }
[10:25:32.667]                       invisible(muffled)
[10:25:32.667]                     }
[10:25:32.667]                     muffleCondition(cond, pattern = "^muffle")
[10:25:32.667]                   }
[10:25:32.667]                 }
[10:25:32.667]                 else {
[10:25:32.667]                   if (TRUE) {
[10:25:32.667]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:25:32.667]                     {
[10:25:32.667]                       inherits <- base::inherits
[10:25:32.667]                       invokeRestart <- base::invokeRestart
[10:25:32.667]                       is.null <- base::is.null
[10:25:32.667]                       muffled <- FALSE
[10:25:32.667]                       if (inherits(cond, "message")) {
[10:25:32.667]                         muffled <- grepl(pattern, "muffleMessage")
[10:25:32.667]                         if (muffled) 
[10:25:32.667]                           invokeRestart("muffleMessage")
[10:25:32.667]                       }
[10:25:32.667]                       else if (inherits(cond, "warning")) {
[10:25:32.667]                         muffled <- grepl(pattern, "muffleWarning")
[10:25:32.667]                         if (muffled) 
[10:25:32.667]                           invokeRestart("muffleWarning")
[10:25:32.667]                       }
[10:25:32.667]                       else if (inherits(cond, "condition")) {
[10:25:32.667]                         if (!is.null(pattern)) {
[10:25:32.667]                           computeRestarts <- base::computeRestarts
[10:25:32.667]                           grepl <- base::grepl
[10:25:32.667]                           restarts <- computeRestarts(cond)
[10:25:32.667]                           for (restart in restarts) {
[10:25:32.667]                             name <- restart$name
[10:25:32.667]                             if (is.null(name)) 
[10:25:32.667]                               next
[10:25:32.667]                             if (!grepl(pattern, name)) 
[10:25:32.667]                               next
[10:25:32.667]                             invokeRestart(restart)
[10:25:32.667]                             muffled <- TRUE
[10:25:32.667]                             break
[10:25:32.667]                           }
[10:25:32.667]                         }
[10:25:32.667]                       }
[10:25:32.667]                       invisible(muffled)
[10:25:32.667]                     }
[10:25:32.667]                     muffleCondition(cond, pattern = "^muffle")
[10:25:32.667]                   }
[10:25:32.667]                 }
[10:25:32.667]             }
[10:25:32.667]         }))
[10:25:32.667]     }, error = function(ex) {
[10:25:32.667]         base::structure(base::list(value = NULL, visible = NULL, 
[10:25:32.667]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:25:32.667]                 ...future.rng), started = ...future.startTime, 
[10:25:32.667]             finished = Sys.time(), session_uuid = NA_character_, 
[10:25:32.667]             version = "1.8"), class = "FutureResult")
[10:25:32.667]     }, finally = {
[10:25:32.667]         if (!identical(...future.workdir, getwd())) 
[10:25:32.667]             setwd(...future.workdir)
[10:25:32.667]         {
[10:25:32.667]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:25:32.667]                 ...future.oldOptions$nwarnings <- NULL
[10:25:32.667]             }
[10:25:32.667]             base::options(...future.oldOptions)
[10:25:32.667]             if (.Platform$OS.type == "windows") {
[10:25:32.667]                 old_names <- names(...future.oldEnvVars)
[10:25:32.667]                 envs <- base::Sys.getenv()
[10:25:32.667]                 names <- names(envs)
[10:25:32.667]                 common <- intersect(names, old_names)
[10:25:32.667]                 added <- setdiff(names, old_names)
[10:25:32.667]                 removed <- setdiff(old_names, names)
[10:25:32.667]                 changed <- common[...future.oldEnvVars[common] != 
[10:25:32.667]                   envs[common]]
[10:25:32.667]                 NAMES <- toupper(changed)
[10:25:32.667]                 args <- list()
[10:25:32.667]                 for (kk in seq_along(NAMES)) {
[10:25:32.667]                   name <- changed[[kk]]
[10:25:32.667]                   NAME <- NAMES[[kk]]
[10:25:32.667]                   if (name != NAME && is.element(NAME, old_names)) 
[10:25:32.667]                     next
[10:25:32.667]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:25:32.667]                 }
[10:25:32.667]                 NAMES <- toupper(added)
[10:25:32.667]                 for (kk in seq_along(NAMES)) {
[10:25:32.667]                   name <- added[[kk]]
[10:25:32.667]                   NAME <- NAMES[[kk]]
[10:25:32.667]                   if (name != NAME && is.element(NAME, old_names)) 
[10:25:32.667]                     next
[10:25:32.667]                   args[[name]] <- ""
[10:25:32.667]                 }
[10:25:32.667]                 NAMES <- toupper(removed)
[10:25:32.667]                 for (kk in seq_along(NAMES)) {
[10:25:32.667]                   name <- removed[[kk]]
[10:25:32.667]                   NAME <- NAMES[[kk]]
[10:25:32.667]                   if (name != NAME && is.element(NAME, old_names)) 
[10:25:32.667]                     next
[10:25:32.667]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:25:32.667]                 }
[10:25:32.667]                 if (length(args) > 0) 
[10:25:32.667]                   base::do.call(base::Sys.setenv, args = args)
[10:25:32.667]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:25:32.667]             }
[10:25:32.667]             else {
[10:25:32.667]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:25:32.667]             }
[10:25:32.667]             {
[10:25:32.667]                 if (base::length(...future.futureOptionsAdded) > 
[10:25:32.667]                   0L) {
[10:25:32.667]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:25:32.667]                   base::names(opts) <- ...future.futureOptionsAdded
[10:25:32.667]                   base::options(opts)
[10:25:32.667]                 }
[10:25:32.667]                 {
[10:25:32.667]                   {
[10:25:32.667]                     NULL
[10:25:32.667]                     RNGkind("Mersenne-Twister")
[10:25:32.667]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[10:25:32.667]                       inherits = FALSE)
[10:25:32.667]                   }
[10:25:32.667]                   options(future.plan = NULL)
[10:25:32.667]                   if (is.na(NA_character_)) 
[10:25:32.667]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:25:32.667]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:25:32.667]                   future::plan(list(function (..., envir = parent.frame()) 
[10:25:32.667]                   {
[10:25:32.667]                     future <- SequentialFuture(..., envir = envir)
[10:25:32.667]                     if (!future$lazy) 
[10:25:32.667]                       future <- run(future)
[10:25:32.667]                     invisible(future)
[10:25:32.667]                   }), .cleanup = FALSE, .init = FALSE)
[10:25:32.667]                 }
[10:25:32.667]             }
[10:25:32.667]         }
[10:25:32.667]     })
[10:25:32.667]     if (TRUE) {
[10:25:32.667]         base::sink(type = "output", split = FALSE)
[10:25:32.667]         if (TRUE) {
[10:25:32.667]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:25:32.667]         }
[10:25:32.667]         else {
[10:25:32.667]             ...future.result["stdout"] <- base::list(NULL)
[10:25:32.667]         }
[10:25:32.667]         base::close(...future.stdout)
[10:25:32.667]         ...future.stdout <- NULL
[10:25:32.667]     }
[10:25:32.667]     ...future.result$conditions <- ...future.conditions
[10:25:32.667]     ...future.result$finished <- base::Sys.time()
[10:25:32.667]     ...future.result
[10:25:32.667] }
[10:25:32.669] plan(): Setting new future strategy stack:
[10:25:32.669] List of future strategies:
[10:25:32.669] 1. sequential:
[10:25:32.669]    - args: function (..., envir = parent.frame())
[10:25:32.669]    - tweaked: FALSE
[10:25:32.669]    - call: NULL
[10:25:32.669] plan(): nbrOfWorkers() = 1
[10:25:32.670] plan(): Setting new future strategy stack:
[10:25:32.670] List of future strategies:
[10:25:32.670] 1. sequential:
[10:25:32.670]    - args: function (..., envir = parent.frame())
[10:25:32.670]    - tweaked: FALSE
[10:25:32.670]    - call: plan(strategy)
[10:25:32.671] plan(): nbrOfWorkers() = 1
[10:25:32.671] SequentialFuture started (and completed)
[10:25:32.671] - Launch lazy future ... done
[10:25:32.671] run() for ‘SequentialFuture’ ... done
SequentialFuture:
Label: ‘<none>’
Expression:
[1] 42
Lazy evaluation: FALSE
Asynchronous evaluation: FALSE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: TRUE
Value: 56 bytes of class ‘numeric’
Early signaling: FALSE
Owner process: 378a73a7-17bc-11e5-cdc3-65eb29aceac6
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[10:25:32.672] getGlobalsAndPackages() ...
[10:25:32.673] Searching for globals...
[10:25:32.674] - globals found: [1] ‘{’
[10:25:32.674] Searching for globals ... DONE
[10:25:32.674] Resolving globals: FALSE
[10:25:32.674] 
[10:25:32.675] 
[10:25:32.675] getGlobalsAndPackages() ... DONE
[10:25:32.675] run() for ‘Future’ ...
[10:25:32.675] - state: ‘created’
[10:25:32.675] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:25:32.675] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[10:25:32.675] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[10:25:32.676]   - Field: ‘label’
[10:25:32.676]   - Field: ‘local’
[10:25:32.676]   - Field: ‘owner’
[10:25:32.676]   - Field: ‘envir’
[10:25:32.676]   - Field: ‘packages’
[10:25:32.676]   - Field: ‘gc’
[10:25:32.676]   - Field: ‘conditions’
[10:25:32.676]   - Field: ‘expr’
[10:25:32.676]   - Field: ‘uuid’
[10:25:32.676]   - Field: ‘seed’
[10:25:32.676]   - Field: ‘version’
[10:25:32.677]   - Field: ‘result’
[10:25:32.677]   - Field: ‘asynchronous’
[10:25:32.677]   - Field: ‘calls’
[10:25:32.677]   - Field: ‘globals’
[10:25:32.677]   - Field: ‘stdout’
[10:25:32.677]   - Field: ‘earlySignal’
[10:25:32.677]   - Field: ‘lazy’
[10:25:32.677]   - Field: ‘state’
[10:25:32.677] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[10:25:32.677] - Launch lazy future ...
[10:25:32.678] Packages needed by the future expression (n = 0): <none>
[10:25:32.678] Packages needed by future strategies (n = 0): <none>
[10:25:32.678] {
[10:25:32.678]     {
[10:25:32.678]         {
[10:25:32.678]             ...future.startTime <- base::Sys.time()
[10:25:32.678]             {
[10:25:32.678]                 {
[10:25:32.678]                   {
[10:25:32.678]                     base::local({
[10:25:32.678]                       has_future <- base::requireNamespace("future", 
[10:25:32.678]                         quietly = TRUE)
[10:25:32.678]                       if (has_future) {
[10:25:32.678]                         ns <- base::getNamespace("future")
[10:25:32.678]                         version <- ns[[".package"]][["version"]]
[10:25:32.678]                         if (is.null(version)) 
[10:25:32.678]                           version <- utils::packageVersion("future")
[10:25:32.678]                       }
[10:25:32.678]                       else {
[10:25:32.678]                         version <- NULL
[10:25:32.678]                       }
[10:25:32.678]                       if (!has_future || version < "1.8.0") {
[10:25:32.678]                         info <- base::c(r_version = base::gsub("R version ", 
[10:25:32.678]                           "", base::R.version$version.string), 
[10:25:32.678]                           platform = base::sprintf("%s (%s-bit)", 
[10:25:32.678]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:25:32.678]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[10:25:32.678]                             "release", "version")], collapse = " "), 
[10:25:32.678]                           hostname = base::Sys.info()[["nodename"]])
[10:25:32.678]                         info <- base::sprintf("%s: %s", base::names(info), 
[10:25:32.678]                           info)
[10:25:32.678]                         info <- base::paste(info, collapse = "; ")
[10:25:32.678]                         if (!has_future) {
[10:25:32.678]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:25:32.678]                             info)
[10:25:32.678]                         }
[10:25:32.678]                         else {
[10:25:32.678]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:25:32.678]                             info, version)
[10:25:32.678]                         }
[10:25:32.678]                         base::stop(msg)
[10:25:32.678]                       }
[10:25:32.678]                     })
[10:25:32.678]                   }
[10:25:32.678]                   options(future.plan = NULL)
[10:25:32.678]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:25:32.678]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:25:32.678]                 }
[10:25:32.678]                 ...future.workdir <- getwd()
[10:25:32.678]             }
[10:25:32.678]             ...future.oldOptions <- base::as.list(base::.Options)
[10:25:32.678]             ...future.oldEnvVars <- base::Sys.getenv()
[10:25:32.678]         }
[10:25:32.678]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:25:32.678]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[10:25:32.678]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:25:32.678]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:25:32.678]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:25:32.678]             future.stdout.windows.reencode = NULL, width = 80L)
[10:25:32.678]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:25:32.678]             base::names(...future.oldOptions))
[10:25:32.678]     }
[10:25:32.678]     if (FALSE) {
[10:25:32.678]     }
[10:25:32.678]     else {
[10:25:32.678]         if (TRUE) {
[10:25:32.678]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:25:32.678]                 open = "w")
[10:25:32.678]         }
[10:25:32.678]         else {
[10:25:32.678]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:25:32.678]                 windows = "NUL", "/dev/null"), open = "w")
[10:25:32.678]         }
[10:25:32.678]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:25:32.678]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:25:32.678]             base::sink(type = "output", split = FALSE)
[10:25:32.678]             base::close(...future.stdout)
[10:25:32.678]         }, add = TRUE)
[10:25:32.678]     }
[10:25:32.678]     ...future.frame <- base::sys.nframe()
[10:25:32.678]     ...future.conditions <- base::list()
[10:25:32.678]     ...future.rng <- base::globalenv()$.Random.seed
[10:25:32.678]     if (FALSE) {
[10:25:32.678]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:25:32.678]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:25:32.678]     }
[10:25:32.678]     ...future.result <- base::tryCatch({
[10:25:32.678]         base::withCallingHandlers({
[10:25:32.678]             ...future.value <- base::withVisible(base::local({
[10:25:32.678]                 42
[10:25:32.678]             }))
[10:25:32.678]             future::FutureResult(value = ...future.value$value, 
[10:25:32.678]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:25:32.678]                   ...future.rng), globalenv = if (FALSE) 
[10:25:32.678]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:25:32.678]                     ...future.globalenv.names))
[10:25:32.678]                 else NULL, started = ...future.startTime, version = "1.8")
[10:25:32.678]         }, condition = base::local({
[10:25:32.678]             c <- base::c
[10:25:32.678]             inherits <- base::inherits
[10:25:32.678]             invokeRestart <- base::invokeRestart
[10:25:32.678]             length <- base::length
[10:25:32.678]             list <- base::list
[10:25:32.678]             seq.int <- base::seq.int
[10:25:32.678]             signalCondition <- base::signalCondition
[10:25:32.678]             sys.calls <- base::sys.calls
[10:25:32.678]             `[[` <- base::`[[`
[10:25:32.678]             `+` <- base::`+`
[10:25:32.678]             `<<-` <- base::`<<-`
[10:25:32.678]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:25:32.678]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:25:32.678]                   3L)]
[10:25:32.678]             }
[10:25:32.678]             function(cond) {
[10:25:32.678]                 is_error <- inherits(cond, "error")
[10:25:32.678]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:25:32.678]                   NULL)
[10:25:32.678]                 if (is_error) {
[10:25:32.678]                   sessionInformation <- function() {
[10:25:32.678]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:25:32.678]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:25:32.678]                       search = base::search(), system = base::Sys.info())
[10:25:32.678]                   }
[10:25:32.678]                   ...future.conditions[[length(...future.conditions) + 
[10:25:32.678]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:25:32.678]                     cond$call), session = sessionInformation(), 
[10:25:32.678]                     timestamp = base::Sys.time(), signaled = 0L)
[10:25:32.678]                   signalCondition(cond)
[10:25:32.678]                 }
[10:25:32.678]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:25:32.678]                 "immediateCondition"))) {
[10:25:32.678]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:25:32.678]                   ...future.conditions[[length(...future.conditions) + 
[10:25:32.678]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:25:32.678]                   if (TRUE && !signal) {
[10:25:32.678]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:25:32.678]                     {
[10:25:32.678]                       inherits <- base::inherits
[10:25:32.678]                       invokeRestart <- base::invokeRestart
[10:25:32.678]                       is.null <- base::is.null
[10:25:32.678]                       muffled <- FALSE
[10:25:32.678]                       if (inherits(cond, "message")) {
[10:25:32.678]                         muffled <- grepl(pattern, "muffleMessage")
[10:25:32.678]                         if (muffled) 
[10:25:32.678]                           invokeRestart("muffleMessage")
[10:25:32.678]                       }
[10:25:32.678]                       else if (inherits(cond, "warning")) {
[10:25:32.678]                         muffled <- grepl(pattern, "muffleWarning")
[10:25:32.678]                         if (muffled) 
[10:25:32.678]                           invokeRestart("muffleWarning")
[10:25:32.678]                       }
[10:25:32.678]                       else if (inherits(cond, "condition")) {
[10:25:32.678]                         if (!is.null(pattern)) {
[10:25:32.678]                           computeRestarts <- base::computeRestarts
[10:25:32.678]                           grepl <- base::grepl
[10:25:32.678]                           restarts <- computeRestarts(cond)
[10:25:32.678]                           for (restart in restarts) {
[10:25:32.678]                             name <- restart$name
[10:25:32.678]                             if (is.null(name)) 
[10:25:32.678]                               next
[10:25:32.678]                             if (!grepl(pattern, name)) 
[10:25:32.678]                               next
[10:25:32.678]                             invokeRestart(restart)
[10:25:32.678]                             muffled <- TRUE
[10:25:32.678]                             break
[10:25:32.678]                           }
[10:25:32.678]                         }
[10:25:32.678]                       }
[10:25:32.678]                       invisible(muffled)
[10:25:32.678]                     }
[10:25:32.678]                     muffleCondition(cond, pattern = "^muffle")
[10:25:32.678]                   }
[10:25:32.678]                 }
[10:25:32.678]                 else {
[10:25:32.678]                   if (TRUE) {
[10:25:32.678]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:25:32.678]                     {
[10:25:32.678]                       inherits <- base::inherits
[10:25:32.678]                       invokeRestart <- base::invokeRestart
[10:25:32.678]                       is.null <- base::is.null
[10:25:32.678]                       muffled <- FALSE
[10:25:32.678]                       if (inherits(cond, "message")) {
[10:25:32.678]                         muffled <- grepl(pattern, "muffleMessage")
[10:25:32.678]                         if (muffled) 
[10:25:32.678]                           invokeRestart("muffleMessage")
[10:25:32.678]                       }
[10:25:32.678]                       else if (inherits(cond, "warning")) {
[10:25:32.678]                         muffled <- grepl(pattern, "muffleWarning")
[10:25:32.678]                         if (muffled) 
[10:25:32.678]                           invokeRestart("muffleWarning")
[10:25:32.678]                       }
[10:25:32.678]                       else if (inherits(cond, "condition")) {
[10:25:32.678]                         if (!is.null(pattern)) {
[10:25:32.678]                           computeRestarts <- base::computeRestarts
[10:25:32.678]                           grepl <- base::grepl
[10:25:32.678]                           restarts <- computeRestarts(cond)
[10:25:32.678]                           for (restart in restarts) {
[10:25:32.678]                             name <- restart$name
[10:25:32.678]                             if (is.null(name)) 
[10:25:32.678]                               next
[10:25:32.678]                             if (!grepl(pattern, name)) 
[10:25:32.678]                               next
[10:25:32.678]                             invokeRestart(restart)
[10:25:32.678]                             muffled <- TRUE
[10:25:32.678]                             break
[10:25:32.678]                           }
[10:25:32.678]                         }
[10:25:32.678]                       }
[10:25:32.678]                       invisible(muffled)
[10:25:32.678]                     }
[10:25:32.678]                     muffleCondition(cond, pattern = "^muffle")
[10:25:32.678]                   }
[10:25:32.678]                 }
[10:25:32.678]             }
[10:25:32.678]         }))
[10:25:32.678]     }, error = function(ex) {
[10:25:32.678]         base::structure(base::list(value = NULL, visible = NULL, 
[10:25:32.678]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:25:32.678]                 ...future.rng), started = ...future.startTime, 
[10:25:32.678]             finished = Sys.time(), session_uuid = NA_character_, 
[10:25:32.678]             version = "1.8"), class = "FutureResult")
[10:25:32.678]     }, finally = {
[10:25:32.678]         if (!identical(...future.workdir, getwd())) 
[10:25:32.678]             setwd(...future.workdir)
[10:25:32.678]         {
[10:25:32.678]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:25:32.678]                 ...future.oldOptions$nwarnings <- NULL
[10:25:32.678]             }
[10:25:32.678]             base::options(...future.oldOptions)
[10:25:32.678]             if (.Platform$OS.type == "windows") {
[10:25:32.678]                 old_names <- names(...future.oldEnvVars)
[10:25:32.678]                 envs <- base::Sys.getenv()
[10:25:32.678]                 names <- names(envs)
[10:25:32.678]                 common <- intersect(names, old_names)
[10:25:32.678]                 added <- setdiff(names, old_names)
[10:25:32.678]                 removed <- setdiff(old_names, names)
[10:25:32.678]                 changed <- common[...future.oldEnvVars[common] != 
[10:25:32.678]                   envs[common]]
[10:25:32.678]                 NAMES <- toupper(changed)
[10:25:32.678]                 args <- list()
[10:25:32.678]                 for (kk in seq_along(NAMES)) {
[10:25:32.678]                   name <- changed[[kk]]
[10:25:32.678]                   NAME <- NAMES[[kk]]
[10:25:32.678]                   if (name != NAME && is.element(NAME, old_names)) 
[10:25:32.678]                     next
[10:25:32.678]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:25:32.678]                 }
[10:25:32.678]                 NAMES <- toupper(added)
[10:25:32.678]                 for (kk in seq_along(NAMES)) {
[10:25:32.678]                   name <- added[[kk]]
[10:25:32.678]                   NAME <- NAMES[[kk]]
[10:25:32.678]                   if (name != NAME && is.element(NAME, old_names)) 
[10:25:32.678]                     next
[10:25:32.678]                   args[[name]] <- ""
[10:25:32.678]                 }
[10:25:32.678]                 NAMES <- toupper(removed)
[10:25:32.678]                 for (kk in seq_along(NAMES)) {
[10:25:32.678]                   name <- removed[[kk]]
[10:25:32.678]                   NAME <- NAMES[[kk]]
[10:25:32.678]                   if (name != NAME && is.element(NAME, old_names)) 
[10:25:32.678]                     next
[10:25:32.678]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:25:32.678]                 }
[10:25:32.678]                 if (length(args) > 0) 
[10:25:32.678]                   base::do.call(base::Sys.setenv, args = args)
[10:25:32.678]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:25:32.678]             }
[10:25:32.678]             else {
[10:25:32.678]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:25:32.678]             }
[10:25:32.678]             {
[10:25:32.678]                 if (base::length(...future.futureOptionsAdded) > 
[10:25:32.678]                   0L) {
[10:25:32.678]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:25:32.678]                   base::names(opts) <- ...future.futureOptionsAdded
[10:25:32.678]                   base::options(opts)
[10:25:32.678]                 }
[10:25:32.678]                 {
[10:25:32.678]                   {
[10:25:32.678]                     NULL
[10:25:32.678]                     RNGkind("Mersenne-Twister")
[10:25:32.678]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[10:25:32.678]                       inherits = FALSE)
[10:25:32.678]                   }
[10:25:32.678]                   options(future.plan = NULL)
[10:25:32.678]                   if (is.na(NA_character_)) 
[10:25:32.678]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:25:32.678]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:25:32.678]                   future::plan(list(function (..., envir = parent.frame()) 
[10:25:32.678]                   {
[10:25:32.678]                     future <- SequentialFuture(..., envir = envir)
[10:25:32.678]                     if (!future$lazy) 
[10:25:32.678]                       future <- run(future)
[10:25:32.678]                     invisible(future)
[10:25:32.678]                   }), .cleanup = FALSE, .init = FALSE)
[10:25:32.678]                 }
[10:25:32.678]             }
[10:25:32.678]         }
[10:25:32.678]     })
[10:25:32.678]     if (TRUE) {
[10:25:32.678]         base::sink(type = "output", split = FALSE)
[10:25:32.678]         if (TRUE) {
[10:25:32.678]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:25:32.678]         }
[10:25:32.678]         else {
[10:25:32.678]             ...future.result["stdout"] <- base::list(NULL)
[10:25:32.678]         }
[10:25:32.678]         base::close(...future.stdout)
[10:25:32.678]         ...future.stdout <- NULL
[10:25:32.678]     }
[10:25:32.678]     ...future.result$conditions <- ...future.conditions
[10:25:32.678]     ...future.result$finished <- base::Sys.time()
[10:25:32.678]     ...future.result
[10:25:32.678] }
[10:25:32.680] plan(): Setting new future strategy stack:
[10:25:32.680] List of future strategies:
[10:25:32.680] 1. sequential:
[10:25:32.680]    - args: function (..., envir = parent.frame())
[10:25:32.680]    - tweaked: FALSE
[10:25:32.680]    - call: NULL
[10:25:32.680] plan(): nbrOfWorkers() = 1
[10:25:32.681] plan(): Setting new future strategy stack:
[10:25:32.681] List of future strategies:
[10:25:32.681] 1. sequential:
[10:25:32.681]    - args: function (..., envir = parent.frame())
[10:25:32.681]    - tweaked: FALSE
[10:25:32.681]    - call: plan(strategy)
[10:25:32.681] plan(): nbrOfWorkers() = 1
[10:25:32.681] SequentialFuture started (and completed)
[10:25:32.682] - Launch lazy future ... done
[10:25:32.682] run() for ‘SequentialFuture’ ... done
SequentialFuture:
Label: ‘<none>’
Expression:
{
    42
}
Lazy evaluation: FALSE
Asynchronous evaluation: FALSE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: TRUE
Value: 56 bytes of class ‘numeric’
Early signaling: FALSE
Owner process: 378a73a7-17bc-11e5-cdc3-65eb29aceac6
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[10:25:32.682] getGlobalsAndPackages() ...
[10:25:32.682] Searching for globals...
[10:25:32.683] 
[10:25:32.683] Searching for globals ... DONE
[10:25:32.683] - globals: [0] <none>
[10:25:32.683] getGlobalsAndPackages() ... DONE
[10:25:32.683] Packages needed by the future expression (n = 0): <none>
[10:25:32.683] Packages needed by future strategies (n = 0): <none>
[10:25:32.684] {
[10:25:32.684]     {
[10:25:32.684]         {
[10:25:32.684]             ...future.startTime <- base::Sys.time()
[10:25:32.684]             {
[10:25:32.684]                 {
[10:25:32.684]                   {
[10:25:32.684]                     base::local({
[10:25:32.684]                       has_future <- base::requireNamespace("future", 
[10:25:32.684]                         quietly = TRUE)
[10:25:32.684]                       if (has_future) {
[10:25:32.684]                         ns <- base::getNamespace("future")
[10:25:32.684]                         version <- ns[[".package"]][["version"]]
[10:25:32.684]                         if (is.null(version)) 
[10:25:32.684]                           version <- utils::packageVersion("future")
[10:25:32.684]                       }
[10:25:32.684]                       else {
[10:25:32.684]                         version <- NULL
[10:25:32.684]                       }
[10:25:32.684]                       if (!has_future || version < "1.8.0") {
[10:25:32.684]                         info <- base::c(r_version = base::gsub("R version ", 
[10:25:32.684]                           "", base::R.version$version.string), 
[10:25:32.684]                           platform = base::sprintf("%s (%s-bit)", 
[10:25:32.684]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:25:32.684]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[10:25:32.684]                             "release", "version")], collapse = " "), 
[10:25:32.684]                           hostname = base::Sys.info()[["nodename"]])
[10:25:32.684]                         info <- base::sprintf("%s: %s", base::names(info), 
[10:25:32.684]                           info)
[10:25:32.684]                         info <- base::paste(info, collapse = "; ")
[10:25:32.684]                         if (!has_future) {
[10:25:32.684]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:25:32.684]                             info)
[10:25:32.684]                         }
[10:25:32.684]                         else {
[10:25:32.684]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:25:32.684]                             info, version)
[10:25:32.684]                         }
[10:25:32.684]                         base::stop(msg)
[10:25:32.684]                       }
[10:25:32.684]                     })
[10:25:32.684]                   }
[10:25:32.684]                   options(future.plan = NULL)
[10:25:32.684]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:25:32.684]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:25:32.684]                 }
[10:25:32.684]                 ...future.workdir <- getwd()
[10:25:32.684]             }
[10:25:32.684]             ...future.oldOptions <- base::as.list(base::.Options)
[10:25:32.684]             ...future.oldEnvVars <- base::Sys.getenv()
[10:25:32.684]         }
[10:25:32.684]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:25:32.684]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[10:25:32.684]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:25:32.684]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:25:32.684]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:25:32.684]             future.stdout.windows.reencode = NULL, width = 80L)
[10:25:32.684]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:25:32.684]             base::names(...future.oldOptions))
[10:25:32.684]     }
[10:25:32.684]     if (FALSE) {
[10:25:32.684]     }
[10:25:32.684]     else {
[10:25:32.684]         if (TRUE) {
[10:25:32.684]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:25:32.684]                 open = "w")
[10:25:32.684]         }
[10:25:32.684]         else {
[10:25:32.684]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:25:32.684]                 windows = "NUL", "/dev/null"), open = "w")
[10:25:32.684]         }
[10:25:32.684]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:25:32.684]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:25:32.684]             base::sink(type = "output", split = FALSE)
[10:25:32.684]             base::close(...future.stdout)
[10:25:32.684]         }, add = TRUE)
[10:25:32.684]     }
[10:25:32.684]     ...future.frame <- base::sys.nframe()
[10:25:32.684]     ...future.conditions <- base::list()
[10:25:32.684]     ...future.rng <- base::globalenv()$.Random.seed
[10:25:32.684]     if (FALSE) {
[10:25:32.684]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:25:32.684]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:25:32.684]     }
[10:25:32.684]     ...future.result <- base::tryCatch({
[10:25:32.684]         base::withCallingHandlers({
[10:25:32.684]             ...future.value <- base::withVisible(base::local(42))
[10:25:32.684]             future::FutureResult(value = ...future.value$value, 
[10:25:32.684]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:25:32.684]                   ...future.rng), globalenv = if (FALSE) 
[10:25:32.684]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:25:32.684]                     ...future.globalenv.names))
[10:25:32.684]                 else NULL, started = ...future.startTime, version = "1.8")
[10:25:32.684]         }, condition = base::local({
[10:25:32.684]             c <- base::c
[10:25:32.684]             inherits <- base::inherits
[10:25:32.684]             invokeRestart <- base::invokeRestart
[10:25:32.684]             length <- base::length
[10:25:32.684]             list <- base::list
[10:25:32.684]             seq.int <- base::seq.int
[10:25:32.684]             signalCondition <- base::signalCondition
[10:25:32.684]             sys.calls <- base::sys.calls
[10:25:32.684]             `[[` <- base::`[[`
[10:25:32.684]             `+` <- base::`+`
[10:25:32.684]             `<<-` <- base::`<<-`
[10:25:32.684]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:25:32.684]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:25:32.684]                   3L)]
[10:25:32.684]             }
[10:25:32.684]             function(cond) {
[10:25:32.684]                 is_error <- inherits(cond, "error")
[10:25:32.684]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:25:32.684]                   NULL)
[10:25:32.684]                 if (is_error) {
[10:25:32.684]                   sessionInformation <- function() {
[10:25:32.684]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:25:32.684]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:25:32.684]                       search = base::search(), system = base::Sys.info())
[10:25:32.684]                   }
[10:25:32.684]                   ...future.conditions[[length(...future.conditions) + 
[10:25:32.684]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:25:32.684]                     cond$call), session = sessionInformation(), 
[10:25:32.684]                     timestamp = base::Sys.time(), signaled = 0L)
[10:25:32.684]                   signalCondition(cond)
[10:25:32.684]                 }
[10:25:32.684]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:25:32.684]                 "immediateCondition"))) {
[10:25:32.684]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:25:32.684]                   ...future.conditions[[length(...future.conditions) + 
[10:25:32.684]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:25:32.684]                   if (TRUE && !signal) {
[10:25:32.684]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:25:32.684]                     {
[10:25:32.684]                       inherits <- base::inherits
[10:25:32.684]                       invokeRestart <- base::invokeRestart
[10:25:32.684]                       is.null <- base::is.null
[10:25:32.684]                       muffled <- FALSE
[10:25:32.684]                       if (inherits(cond, "message")) {
[10:25:32.684]                         muffled <- grepl(pattern, "muffleMessage")
[10:25:32.684]                         if (muffled) 
[10:25:32.684]                           invokeRestart("muffleMessage")
[10:25:32.684]                       }
[10:25:32.684]                       else if (inherits(cond, "warning")) {
[10:25:32.684]                         muffled <- grepl(pattern, "muffleWarning")
[10:25:32.684]                         if (muffled) 
[10:25:32.684]                           invokeRestart("muffleWarning")
[10:25:32.684]                       }
[10:25:32.684]                       else if (inherits(cond, "condition")) {
[10:25:32.684]                         if (!is.null(pattern)) {
[10:25:32.684]                           computeRestarts <- base::computeRestarts
[10:25:32.684]                           grepl <- base::grepl
[10:25:32.684]                           restarts <- computeRestarts(cond)
[10:25:32.684]                           for (restart in restarts) {
[10:25:32.684]                             name <- restart$name
[10:25:32.684]                             if (is.null(name)) 
[10:25:32.684]                               next
[10:25:32.684]                             if (!grepl(pattern, name)) 
[10:25:32.684]                               next
[10:25:32.684]                             invokeRestart(restart)
[10:25:32.684]                             muffled <- TRUE
[10:25:32.684]                             break
[10:25:32.684]                           }
[10:25:32.684]                         }
[10:25:32.684]                       }
[10:25:32.684]                       invisible(muffled)
[10:25:32.684]                     }
[10:25:32.684]                     muffleCondition(cond, pattern = "^muffle")
[10:25:32.684]                   }
[10:25:32.684]                 }
[10:25:32.684]                 else {
[10:25:32.684]                   if (TRUE) {
[10:25:32.684]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:25:32.684]                     {
[10:25:32.684]                       inherits <- base::inherits
[10:25:32.684]                       invokeRestart <- base::invokeRestart
[10:25:32.684]                       is.null <- base::is.null
[10:25:32.684]                       muffled <- FALSE
[10:25:32.684]                       if (inherits(cond, "message")) {
[10:25:32.684]                         muffled <- grepl(pattern, "muffleMessage")
[10:25:32.684]                         if (muffled) 
[10:25:32.684]                           invokeRestart("muffleMessage")
[10:25:32.684]                       }
[10:25:32.684]                       else if (inherits(cond, "warning")) {
[10:25:32.684]                         muffled <- grepl(pattern, "muffleWarning")
[10:25:32.684]                         if (muffled) 
[10:25:32.684]                           invokeRestart("muffleWarning")
[10:25:32.684]                       }
[10:25:32.684]                       else if (inherits(cond, "condition")) {
[10:25:32.684]                         if (!is.null(pattern)) {
[10:25:32.684]                           computeRestarts <- base::computeRestarts
[10:25:32.684]                           grepl <- base::grepl
[10:25:32.684]                           restarts <- computeRestarts(cond)
[10:25:32.684]                           for (restart in restarts) {
[10:25:32.684]                             name <- restart$name
[10:25:32.684]                             if (is.null(name)) 
[10:25:32.684]                               next
[10:25:32.684]                             if (!grepl(pattern, name)) 
[10:25:32.684]                               next
[10:25:32.684]                             invokeRestart(restart)
[10:25:32.684]                             muffled <- TRUE
[10:25:32.684]                             break
[10:25:32.684]                           }
[10:25:32.684]                         }
[10:25:32.684]                       }
[10:25:32.684]                       invisible(muffled)
[10:25:32.684]                     }
[10:25:32.684]                     muffleCondition(cond, pattern = "^muffle")
[10:25:32.684]                   }
[10:25:32.684]                 }
[10:25:32.684]             }
[10:25:32.684]         }))
[10:25:32.684]     }, error = function(ex) {
[10:25:32.684]         base::structure(base::list(value = NULL, visible = NULL, 
[10:25:32.684]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:25:32.684]                 ...future.rng), started = ...future.startTime, 
[10:25:32.684]             finished = Sys.time(), session_uuid = NA_character_, 
[10:25:32.684]             version = "1.8"), class = "FutureResult")
[10:25:32.684]     }, finally = {
[10:25:32.684]         if (!identical(...future.workdir, getwd())) 
[10:25:32.684]             setwd(...future.workdir)
[10:25:32.684]         {
[10:25:32.684]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:25:32.684]                 ...future.oldOptions$nwarnings <- NULL
[10:25:32.684]             }
[10:25:32.684]             base::options(...future.oldOptions)
[10:25:32.684]             if (.Platform$OS.type == "windows") {
[10:25:32.684]                 old_names <- names(...future.oldEnvVars)
[10:25:32.684]                 envs <- base::Sys.getenv()
[10:25:32.684]                 names <- names(envs)
[10:25:32.684]                 common <- intersect(names, old_names)
[10:25:32.684]                 added <- setdiff(names, old_names)
[10:25:32.684]                 removed <- setdiff(old_names, names)
[10:25:32.684]                 changed <- common[...future.oldEnvVars[common] != 
[10:25:32.684]                   envs[common]]
[10:25:32.684]                 NAMES <- toupper(changed)
[10:25:32.684]                 args <- list()
[10:25:32.684]                 for (kk in seq_along(NAMES)) {
[10:25:32.684]                   name <- changed[[kk]]
[10:25:32.684]                   NAME <- NAMES[[kk]]
[10:25:32.684]                   if (name != NAME && is.element(NAME, old_names)) 
[10:25:32.684]                     next
[10:25:32.684]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:25:32.684]                 }
[10:25:32.684]                 NAMES <- toupper(added)
[10:25:32.684]                 for (kk in seq_along(NAMES)) {
[10:25:32.684]                   name <- added[[kk]]
[10:25:32.684]                   NAME <- NAMES[[kk]]
[10:25:32.684]                   if (name != NAME && is.element(NAME, old_names)) 
[10:25:32.684]                     next
[10:25:32.684]                   args[[name]] <- ""
[10:25:32.684]                 }
[10:25:32.684]                 NAMES <- toupper(removed)
[10:25:32.684]                 for (kk in seq_along(NAMES)) {
[10:25:32.684]                   name <- removed[[kk]]
[10:25:32.684]                   NAME <- NAMES[[kk]]
[10:25:32.684]                   if (name != NAME && is.element(NAME, old_names)) 
[10:25:32.684]                     next
[10:25:32.684]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:25:32.684]                 }
[10:25:32.684]                 if (length(args) > 0) 
[10:25:32.684]                   base::do.call(base::Sys.setenv, args = args)
[10:25:32.684]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:25:32.684]             }
[10:25:32.684]             else {
[10:25:32.684]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:25:32.684]             }
[10:25:32.684]             {
[10:25:32.684]                 if (base::length(...future.futureOptionsAdded) > 
[10:25:32.684]                   0L) {
[10:25:32.684]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:25:32.684]                   base::names(opts) <- ...future.futureOptionsAdded
[10:25:32.684]                   base::options(opts)
[10:25:32.684]                 }
[10:25:32.684]                 {
[10:25:32.684]                   {
[10:25:32.684]                     NULL
[10:25:32.684]                     RNGkind("Mersenne-Twister")
[10:25:32.684]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[10:25:32.684]                       inherits = FALSE)
[10:25:32.684]                   }
[10:25:32.684]                   options(future.plan = NULL)
[10:25:32.684]                   if (is.na(NA_character_)) 
[10:25:32.684]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:25:32.684]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:25:32.684]                   future::plan(list(function (..., envir = parent.frame()) 
[10:25:32.684]                   {
[10:25:32.684]                     future <- SequentialFuture(..., envir = envir)
[10:25:32.684]                     if (!future$lazy) 
[10:25:32.684]                       future <- run(future)
[10:25:32.684]                     invisible(future)
[10:25:32.684]                   }), .cleanup = FALSE, .init = FALSE)
[10:25:32.684]                 }
[10:25:32.684]             }
[10:25:32.684]         }
[10:25:32.684]     })
[10:25:32.684]     if (TRUE) {
[10:25:32.684]         base::sink(type = "output", split = FALSE)
[10:25:32.684]         if (TRUE) {
[10:25:32.684]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:25:32.684]         }
[10:25:32.684]         else {
[10:25:32.684]             ...future.result["stdout"] <- base::list(NULL)
[10:25:32.684]         }
[10:25:32.684]         base::close(...future.stdout)
[10:25:32.684]         ...future.stdout <- NULL
[10:25:32.684]     }
[10:25:32.684]     ...future.result$conditions <- ...future.conditions
[10:25:32.684]     ...future.result$finished <- base::Sys.time()
[10:25:32.684]     ...future.result
[10:25:32.684] }
[10:25:32.685] plan(): Setting new future strategy stack:
[10:25:32.685] List of future strategies:
[10:25:32.685] 1. sequential:
[10:25:32.685]    - args: function (..., envir = parent.frame())
[10:25:32.685]    - tweaked: FALSE
[10:25:32.685]    - call: NULL
[10:25:32.686] plan(): nbrOfWorkers() = 1
[10:25:32.686] plan(): Setting new future strategy stack:
[10:25:32.687] List of future strategies:
[10:25:32.687] 1. sequential:
[10:25:32.687]    - args: function (..., envir = parent.frame())
[10:25:32.687]    - tweaked: FALSE
[10:25:32.687]    - call: plan(strategy)
[10:25:32.687] plan(): nbrOfWorkers() = 1
[10:25:32.687] SequentialFuture started (and completed)
SequentialFuture:
Label: ‘strategy = sequential’
Expression:
[1] 42
Lazy evaluation: FALSE
Asynchronous evaluation: FALSE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: TRUE
Value: 56 bytes of class ‘numeric’
Early signaling: FALSE
Owner process: 378a73a7-17bc-11e5-cdc3-65eb29aceac6
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[10:25:32.688] getGlobalsAndPackages() ...
[10:25:32.688] Searching for globals...
[10:25:32.688] 
[10:25:32.688] Searching for globals ... DONE
[10:25:32.688] - globals: [0] <none>
[10:25:32.688] getGlobalsAndPackages() ... DONE
[10:25:32.689] run() for ‘Future’ ...
[10:25:32.689] - state: ‘created’
[10:25:32.689] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:25:32.689] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[10:25:32.689] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[10:25:32.689]   - Field: ‘label’
[10:25:32.689]   - Field: ‘local’
[10:25:32.690]   - Field: ‘owner’
[10:25:32.690]   - Field: ‘envir’
[10:25:32.691]   - Field: ‘packages’
[10:25:32.692]   - Field: ‘gc’
[10:25:32.692]   - Field: ‘conditions’
[10:25:32.692]   - Field: ‘expr’
[10:25:32.692]   - Field: ‘uuid’
[10:25:32.692]   - Field: ‘seed’
[10:25:32.692]   - Field: ‘version’
[10:25:32.692]   - Field: ‘result’
[10:25:32.692]   - Field: ‘asynchronous’
[10:25:32.692]   - Field: ‘calls’
[10:25:32.692]   - Field: ‘globals’
[10:25:32.692]   - Field: ‘stdout’
[10:25:32.693]   - Field: ‘earlySignal’
[10:25:32.693]   - Field: ‘lazy’
[10:25:32.693]   - Field: ‘state’
[10:25:32.693] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[10:25:32.693] - Launch lazy future ...
[10:25:32.693] Packages needed by the future expression (n = 0): <none>
[10:25:32.693] Packages needed by future strategies (n = 0): <none>
[10:25:32.694] {
[10:25:32.694]     {
[10:25:32.694]         {
[10:25:32.694]             ...future.startTime <- base::Sys.time()
[10:25:32.694]             {
[10:25:32.694]                 {
[10:25:32.694]                   {
[10:25:32.694]                     base::local({
[10:25:32.694]                       has_future <- base::requireNamespace("future", 
[10:25:32.694]                         quietly = TRUE)
[10:25:32.694]                       if (has_future) {
[10:25:32.694]                         ns <- base::getNamespace("future")
[10:25:32.694]                         version <- ns[[".package"]][["version"]]
[10:25:32.694]                         if (is.null(version)) 
[10:25:32.694]                           version <- utils::packageVersion("future")
[10:25:32.694]                       }
[10:25:32.694]                       else {
[10:25:32.694]                         version <- NULL
[10:25:32.694]                       }
[10:25:32.694]                       if (!has_future || version < "1.8.0") {
[10:25:32.694]                         info <- base::c(r_version = base::gsub("R version ", 
[10:25:32.694]                           "", base::R.version$version.string), 
[10:25:32.694]                           platform = base::sprintf("%s (%s-bit)", 
[10:25:32.694]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:25:32.694]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[10:25:32.694]                             "release", "version")], collapse = " "), 
[10:25:32.694]                           hostname = base::Sys.info()[["nodename"]])
[10:25:32.694]                         info <- base::sprintf("%s: %s", base::names(info), 
[10:25:32.694]                           info)
[10:25:32.694]                         info <- base::paste(info, collapse = "; ")
[10:25:32.694]                         if (!has_future) {
[10:25:32.694]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:25:32.694]                             info)
[10:25:32.694]                         }
[10:25:32.694]                         else {
[10:25:32.694]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:25:32.694]                             info, version)
[10:25:32.694]                         }
[10:25:32.694]                         base::stop(msg)
[10:25:32.694]                       }
[10:25:32.694]                     })
[10:25:32.694]                   }
[10:25:32.694]                   options(future.plan = NULL)
[10:25:32.694]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:25:32.694]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:25:32.694]                 }
[10:25:32.694]                 ...future.workdir <- getwd()
[10:25:32.694]             }
[10:25:32.694]             ...future.oldOptions <- base::as.list(base::.Options)
[10:25:32.694]             ...future.oldEnvVars <- base::Sys.getenv()
[10:25:32.694]         }
[10:25:32.694]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:25:32.694]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[10:25:32.694]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:25:32.694]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:25:32.694]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:25:32.694]             future.stdout.windows.reencode = NULL, width = 80L)
[10:25:32.694]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:25:32.694]             base::names(...future.oldOptions))
[10:25:32.694]     }
[10:25:32.694]     if (FALSE) {
[10:25:32.694]     }
[10:25:32.694]     else {
[10:25:32.694]         if (TRUE) {
[10:25:32.694]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:25:32.694]                 open = "w")
[10:25:32.694]         }
[10:25:32.694]         else {
[10:25:32.694]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:25:32.694]                 windows = "NUL", "/dev/null"), open = "w")
[10:25:32.694]         }
[10:25:32.694]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:25:32.694]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:25:32.694]             base::sink(type = "output", split = FALSE)
[10:25:32.694]             base::close(...future.stdout)
[10:25:32.694]         }, add = TRUE)
[10:25:32.694]     }
[10:25:32.694]     ...future.frame <- base::sys.nframe()
[10:25:32.694]     ...future.conditions <- base::list()
[10:25:32.694]     ...future.rng <- base::globalenv()$.Random.seed
[10:25:32.694]     if (FALSE) {
[10:25:32.694]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:25:32.694]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:25:32.694]     }
[10:25:32.694]     ...future.result <- base::tryCatch({
[10:25:32.694]         base::withCallingHandlers({
[10:25:32.694]             ...future.value <- base::withVisible(base::local(42))
[10:25:32.694]             future::FutureResult(value = ...future.value$value, 
[10:25:32.694]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:25:32.694]                   ...future.rng), globalenv = if (FALSE) 
[10:25:32.694]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:25:32.694]                     ...future.globalenv.names))
[10:25:32.694]                 else NULL, started = ...future.startTime, version = "1.8")
[10:25:32.694]         }, condition = base::local({
[10:25:32.694]             c <- base::c
[10:25:32.694]             inherits <- base::inherits
[10:25:32.694]             invokeRestart <- base::invokeRestart
[10:25:32.694]             length <- base::length
[10:25:32.694]             list <- base::list
[10:25:32.694]             seq.int <- base::seq.int
[10:25:32.694]             signalCondition <- base::signalCondition
[10:25:32.694]             sys.calls <- base::sys.calls
[10:25:32.694]             `[[` <- base::`[[`
[10:25:32.694]             `+` <- base::`+`
[10:25:32.694]             `<<-` <- base::`<<-`
[10:25:32.694]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:25:32.694]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:25:32.694]                   3L)]
[10:25:32.694]             }
[10:25:32.694]             function(cond) {
[10:25:32.694]                 is_error <- inherits(cond, "error")
[10:25:32.694]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:25:32.694]                   NULL)
[10:25:32.694]                 if (is_error) {
[10:25:32.694]                   sessionInformation <- function() {
[10:25:32.694]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:25:32.694]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:25:32.694]                       search = base::search(), system = base::Sys.info())
[10:25:32.694]                   }
[10:25:32.694]                   ...future.conditions[[length(...future.conditions) + 
[10:25:32.694]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:25:32.694]                     cond$call), session = sessionInformation(), 
[10:25:32.694]                     timestamp = base::Sys.time(), signaled = 0L)
[10:25:32.694]                   signalCondition(cond)
[10:25:32.694]                 }
[10:25:32.694]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:25:32.694]                 "immediateCondition"))) {
[10:25:32.694]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:25:32.694]                   ...future.conditions[[length(...future.conditions) + 
[10:25:32.694]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:25:32.694]                   if (TRUE && !signal) {
[10:25:32.694]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:25:32.694]                     {
[10:25:32.694]                       inherits <- base::inherits
[10:25:32.694]                       invokeRestart <- base::invokeRestart
[10:25:32.694]                       is.null <- base::is.null
[10:25:32.694]                       muffled <- FALSE
[10:25:32.694]                       if (inherits(cond, "message")) {
[10:25:32.694]                         muffled <- grepl(pattern, "muffleMessage")
[10:25:32.694]                         if (muffled) 
[10:25:32.694]                           invokeRestart("muffleMessage")
[10:25:32.694]                       }
[10:25:32.694]                       else if (inherits(cond, "warning")) {
[10:25:32.694]                         muffled <- grepl(pattern, "muffleWarning")
[10:25:32.694]                         if (muffled) 
[10:25:32.694]                           invokeRestart("muffleWarning")
[10:25:32.694]                       }
[10:25:32.694]                       else if (inherits(cond, "condition")) {
[10:25:32.694]                         if (!is.null(pattern)) {
[10:25:32.694]                           computeRestarts <- base::computeRestarts
[10:25:32.694]                           grepl <- base::grepl
[10:25:32.694]                           restarts <- computeRestarts(cond)
[10:25:32.694]                           for (restart in restarts) {
[10:25:32.694]                             name <- restart$name
[10:25:32.694]                             if (is.null(name)) 
[10:25:32.694]                               next
[10:25:32.694]                             if (!grepl(pattern, name)) 
[10:25:32.694]                               next
[10:25:32.694]                             invokeRestart(restart)
[10:25:32.694]                             muffled <- TRUE
[10:25:32.694]                             break
[10:25:32.694]                           }
[10:25:32.694]                         }
[10:25:32.694]                       }
[10:25:32.694]                       invisible(muffled)
[10:25:32.694]                     }
[10:25:32.694]                     muffleCondition(cond, pattern = "^muffle")
[10:25:32.694]                   }
[10:25:32.694]                 }
[10:25:32.694]                 else {
[10:25:32.694]                   if (TRUE) {
[10:25:32.694]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:25:32.694]                     {
[10:25:32.694]                       inherits <- base::inherits
[10:25:32.694]                       invokeRestart <- base::invokeRestart
[10:25:32.694]                       is.null <- base::is.null
[10:25:32.694]                       muffled <- FALSE
[10:25:32.694]                       if (inherits(cond, "message")) {
[10:25:32.694]                         muffled <- grepl(pattern, "muffleMessage")
[10:25:32.694]                         if (muffled) 
[10:25:32.694]                           invokeRestart("muffleMessage")
[10:25:32.694]                       }
[10:25:32.694]                       else if (inherits(cond, "warning")) {
[10:25:32.694]                         muffled <- grepl(pattern, "muffleWarning")
[10:25:32.694]                         if (muffled) 
[10:25:32.694]                           invokeRestart("muffleWarning")
[10:25:32.694]                       }
[10:25:32.694]                       else if (inherits(cond, "condition")) {
[10:25:32.694]                         if (!is.null(pattern)) {
[10:25:32.694]                           computeRestarts <- base::computeRestarts
[10:25:32.694]                           grepl <- base::grepl
[10:25:32.694]                           restarts <- computeRestarts(cond)
[10:25:32.694]                           for (restart in restarts) {
[10:25:32.694]                             name <- restart$name
[10:25:32.694]                             if (is.null(name)) 
[10:25:32.694]                               next
[10:25:32.694]                             if (!grepl(pattern, name)) 
[10:25:32.694]                               next
[10:25:32.694]                             invokeRestart(restart)
[10:25:32.694]                             muffled <- TRUE
[10:25:32.694]                             break
[10:25:32.694]                           }
[10:25:32.694]                         }
[10:25:32.694]                       }
[10:25:32.694]                       invisible(muffled)
[10:25:32.694]                     }
[10:25:32.694]                     muffleCondition(cond, pattern = "^muffle")
[10:25:32.694]                   }
[10:25:32.694]                 }
[10:25:32.694]             }
[10:25:32.694]         }))
[10:25:32.694]     }, error = function(ex) {
[10:25:32.694]         base::structure(base::list(value = NULL, visible = NULL, 
[10:25:32.694]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:25:32.694]                 ...future.rng), started = ...future.startTime, 
[10:25:32.694]             finished = Sys.time(), session_uuid = NA_character_, 
[10:25:32.694]             version = "1.8"), class = "FutureResult")
[10:25:32.694]     }, finally = {
[10:25:32.694]         if (!identical(...future.workdir, getwd())) 
[10:25:32.694]             setwd(...future.workdir)
[10:25:32.694]         {
[10:25:32.694]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:25:32.694]                 ...future.oldOptions$nwarnings <- NULL
[10:25:32.694]             }
[10:25:32.694]             base::options(...future.oldOptions)
[10:25:32.694]             if (.Platform$OS.type == "windows") {
[10:25:32.694]                 old_names <- names(...future.oldEnvVars)
[10:25:32.694]                 envs <- base::Sys.getenv()
[10:25:32.694]                 names <- names(envs)
[10:25:32.694]                 common <- intersect(names, old_names)
[10:25:32.694]                 added <- setdiff(names, old_names)
[10:25:32.694]                 removed <- setdiff(old_names, names)
[10:25:32.694]                 changed <- common[...future.oldEnvVars[common] != 
[10:25:32.694]                   envs[common]]
[10:25:32.694]                 NAMES <- toupper(changed)
[10:25:32.694]                 args <- list()
[10:25:32.694]                 for (kk in seq_along(NAMES)) {
[10:25:32.694]                   name <- changed[[kk]]
[10:25:32.694]                   NAME <- NAMES[[kk]]
[10:25:32.694]                   if (name != NAME && is.element(NAME, old_names)) 
[10:25:32.694]                     next
[10:25:32.694]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:25:32.694]                 }
[10:25:32.694]                 NAMES <- toupper(added)
[10:25:32.694]                 for (kk in seq_along(NAMES)) {
[10:25:32.694]                   name <- added[[kk]]
[10:25:32.694]                   NAME <- NAMES[[kk]]
[10:25:32.694]                   if (name != NAME && is.element(NAME, old_names)) 
[10:25:32.694]                     next
[10:25:32.694]                   args[[name]] <- ""
[10:25:32.694]                 }
[10:25:32.694]                 NAMES <- toupper(removed)
[10:25:32.694]                 for (kk in seq_along(NAMES)) {
[10:25:32.694]                   name <- removed[[kk]]
[10:25:32.694]                   NAME <- NAMES[[kk]]
[10:25:32.694]                   if (name != NAME && is.element(NAME, old_names)) 
[10:25:32.694]                     next
[10:25:32.694]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:25:32.694]                 }
[10:25:32.694]                 if (length(args) > 0) 
[10:25:32.694]                   base::do.call(base::Sys.setenv, args = args)
[10:25:32.694]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:25:32.694]             }
[10:25:32.694]             else {
[10:25:32.694]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:25:32.694]             }
[10:25:32.694]             {
[10:25:32.694]                 if (base::length(...future.futureOptionsAdded) > 
[10:25:32.694]                   0L) {
[10:25:32.694]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:25:32.694]                   base::names(opts) <- ...future.futureOptionsAdded
[10:25:32.694]                   base::options(opts)
[10:25:32.694]                 }
[10:25:32.694]                 {
[10:25:32.694]                   {
[10:25:32.694]                     NULL
[10:25:32.694]                     RNGkind("Mersenne-Twister")
[10:25:32.694]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[10:25:32.694]                       inherits = FALSE)
[10:25:32.694]                   }
[10:25:32.694]                   options(future.plan = NULL)
[10:25:32.694]                   if (is.na(NA_character_)) 
[10:25:32.694]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:25:32.694]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:25:32.694]                   future::plan(list(function (..., envir = parent.frame()) 
[10:25:32.694]                   {
[10:25:32.694]                     future <- SequentialFuture(..., envir = envir)
[10:25:32.694]                     if (!future$lazy) 
[10:25:32.694]                       future <- run(future)
[10:25:32.694]                     invisible(future)
[10:25:32.694]                   }), .cleanup = FALSE, .init = FALSE)
[10:25:32.694]                 }
[10:25:32.694]             }
[10:25:32.694]         }
[10:25:32.694]     })
[10:25:32.694]     if (TRUE) {
[10:25:32.694]         base::sink(type = "output", split = FALSE)
[10:25:32.694]         if (TRUE) {
[10:25:32.694]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:25:32.694]         }
[10:25:32.694]         else {
[10:25:32.694]             ...future.result["stdout"] <- base::list(NULL)
[10:25:32.694]         }
[10:25:32.694]         base::close(...future.stdout)
[10:25:32.694]         ...future.stdout <- NULL
[10:25:32.694]     }
[10:25:32.694]     ...future.result$conditions <- ...future.conditions
[10:25:32.694]     ...future.result$finished <- base::Sys.time()
[10:25:32.694]     ...future.result
[10:25:32.694] }
[10:25:32.695] plan(): Setting new future strategy stack:
[10:25:32.695] List of future strategies:
[10:25:32.695] 1. sequential:
[10:25:32.695]    - args: function (..., envir = parent.frame())
[10:25:32.695]    - tweaked: FALSE
[10:25:32.695]    - call: NULL
[10:25:32.696] plan(): nbrOfWorkers() = 1
[10:25:32.696] plan(): Setting new future strategy stack:
[10:25:32.696] List of future strategies:
[10:25:32.696] 1. sequential:
[10:25:32.696]    - args: function (..., envir = parent.frame())
[10:25:32.696]    - tweaked: FALSE
[10:25:32.696]    - call: plan(strategy)
[10:25:32.697] plan(): nbrOfWorkers() = 1
[10:25:32.697] SequentialFuture started (and completed)
[10:25:32.697] - Launch lazy future ... done
[10:25:32.697] run() for ‘SequentialFuture’ ... done
SequentialFuture:
Label: ‘strategy = sequential’
Expression:
[1] 42
Lazy evaluation: FALSE
Asynchronous evaluation: FALSE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: TRUE
Value: 56 bytes of class ‘numeric’
Early signaling: FALSE
Owner process: 378a73a7-17bc-11e5-cdc3-65eb29aceac6
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[10:25:32.698] getGlobalsAndPackages() ...
[10:25:32.698] Searching for globals...
[10:25:32.698] - globals found: [1] ‘{’
[10:25:32.699] Searching for globals ... DONE
[10:25:32.699] Resolving globals: FALSE
[10:25:32.699] 
[10:25:32.699] 
[10:25:32.699] getGlobalsAndPackages() ... DONE
[10:25:32.699] run() for ‘Future’ ...
[10:25:32.699] - state: ‘created’
[10:25:32.699] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:25:32.700] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[10:25:32.700] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[10:25:32.700]   - Field: ‘label’
[10:25:32.700]   - Field: ‘local’
[10:25:32.700]   - Field: ‘owner’
[10:25:32.700]   - Field: ‘envir’
[10:25:32.700]   - Field: ‘packages’
[10:25:32.700]   - Field: ‘gc’
[10:25:32.700]   - Field: ‘conditions’
[10:25:32.701]   - Field: ‘expr’
[10:25:32.701]   - Field: ‘uuid’
[10:25:32.701]   - Field: ‘seed’
[10:25:32.701]   - Field: ‘version’
[10:25:32.701]   - Field: ‘result’
[10:25:32.701]   - Field: ‘asynchronous’
[10:25:32.701]   - Field: ‘calls’
[10:25:32.701]   - Field: ‘globals’
[10:25:32.701]   - Field: ‘stdout’
[10:25:32.701]   - Field: ‘earlySignal’
[10:25:32.701]   - Field: ‘lazy’
[10:25:32.702]   - Field: ‘state’
[10:25:32.702] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[10:25:32.702] - Launch lazy future ...
[10:25:32.702] Packages needed by the future expression (n = 0): <none>
[10:25:32.702] Packages needed by future strategies (n = 0): <none>
[10:25:32.702] {
[10:25:32.702]     {
[10:25:32.702]         {
[10:25:32.702]             ...future.startTime <- base::Sys.time()
[10:25:32.702]             {
[10:25:32.702]                 {
[10:25:32.702]                   {
[10:25:32.702]                     base::local({
[10:25:32.702]                       has_future <- base::requireNamespace("future", 
[10:25:32.702]                         quietly = TRUE)
[10:25:32.702]                       if (has_future) {
[10:25:32.702]                         ns <- base::getNamespace("future")
[10:25:32.702]                         version <- ns[[".package"]][["version"]]
[10:25:32.702]                         if (is.null(version)) 
[10:25:32.702]                           version <- utils::packageVersion("future")
[10:25:32.702]                       }
[10:25:32.702]                       else {
[10:25:32.702]                         version <- NULL
[10:25:32.702]                       }
[10:25:32.702]                       if (!has_future || version < "1.8.0") {
[10:25:32.702]                         info <- base::c(r_version = base::gsub("R version ", 
[10:25:32.702]                           "", base::R.version$version.string), 
[10:25:32.702]                           platform = base::sprintf("%s (%s-bit)", 
[10:25:32.702]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:25:32.702]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[10:25:32.702]                             "release", "version")], collapse = " "), 
[10:25:32.702]                           hostname = base::Sys.info()[["nodename"]])
[10:25:32.702]                         info <- base::sprintf("%s: %s", base::names(info), 
[10:25:32.702]                           info)
[10:25:32.702]                         info <- base::paste(info, collapse = "; ")
[10:25:32.702]                         if (!has_future) {
[10:25:32.702]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:25:32.702]                             info)
[10:25:32.702]                         }
[10:25:32.702]                         else {
[10:25:32.702]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:25:32.702]                             info, version)
[10:25:32.702]                         }
[10:25:32.702]                         base::stop(msg)
[10:25:32.702]                       }
[10:25:32.702]                     })
[10:25:32.702]                   }
[10:25:32.702]                   options(future.plan = NULL)
[10:25:32.702]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:25:32.702]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:25:32.702]                 }
[10:25:32.702]                 ...future.workdir <- getwd()
[10:25:32.702]             }
[10:25:32.702]             ...future.oldOptions <- base::as.list(base::.Options)
[10:25:32.702]             ...future.oldEnvVars <- base::Sys.getenv()
[10:25:32.702]         }
[10:25:32.702]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:25:32.702]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[10:25:32.702]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:25:32.702]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:25:32.702]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:25:32.702]             future.stdout.windows.reencode = NULL, width = 80L)
[10:25:32.702]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:25:32.702]             base::names(...future.oldOptions))
[10:25:32.702]     }
[10:25:32.702]     if (FALSE) {
[10:25:32.702]     }
[10:25:32.702]     else {
[10:25:32.702]         if (TRUE) {
[10:25:32.702]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:25:32.702]                 open = "w")
[10:25:32.702]         }
[10:25:32.702]         else {
[10:25:32.702]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:25:32.702]                 windows = "NUL", "/dev/null"), open = "w")
[10:25:32.702]         }
[10:25:32.702]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:25:32.702]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:25:32.702]             base::sink(type = "output", split = FALSE)
[10:25:32.702]             base::close(...future.stdout)
[10:25:32.702]         }, add = TRUE)
[10:25:32.702]     }
[10:25:32.702]     ...future.frame <- base::sys.nframe()
[10:25:32.702]     ...future.conditions <- base::list()
[10:25:32.702]     ...future.rng <- base::globalenv()$.Random.seed
[10:25:32.702]     if (FALSE) {
[10:25:32.702]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:25:32.702]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:25:32.702]     }
[10:25:32.702]     ...future.result <- base::tryCatch({
[10:25:32.702]         base::withCallingHandlers({
[10:25:32.702]             ...future.value <- base::withVisible(base::local({
[10:25:32.702]                 42
[10:25:32.702]             }))
[10:25:32.702]             future::FutureResult(value = ...future.value$value, 
[10:25:32.702]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:25:32.702]                   ...future.rng), globalenv = if (FALSE) 
[10:25:32.702]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:25:32.702]                     ...future.globalenv.names))
[10:25:32.702]                 else NULL, started = ...future.startTime, version = "1.8")
[10:25:32.702]         }, condition = base::local({
[10:25:32.702]             c <- base::c
[10:25:32.702]             inherits <- base::inherits
[10:25:32.702]             invokeRestart <- base::invokeRestart
[10:25:32.702]             length <- base::length
[10:25:32.702]             list <- base::list
[10:25:32.702]             seq.int <- base::seq.int
[10:25:32.702]             signalCondition <- base::signalCondition
[10:25:32.702]             sys.calls <- base::sys.calls
[10:25:32.702]             `[[` <- base::`[[`
[10:25:32.702]             `+` <- base::`+`
[10:25:32.702]             `<<-` <- base::`<<-`
[10:25:32.702]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:25:32.702]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:25:32.702]                   3L)]
[10:25:32.702]             }
[10:25:32.702]             function(cond) {
[10:25:32.702]                 is_error <- inherits(cond, "error")
[10:25:32.702]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:25:32.702]                   NULL)
[10:25:32.702]                 if (is_error) {
[10:25:32.702]                   sessionInformation <- function() {
[10:25:32.702]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:25:32.702]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:25:32.702]                       search = base::search(), system = base::Sys.info())
[10:25:32.702]                   }
[10:25:32.702]                   ...future.conditions[[length(...future.conditions) + 
[10:25:32.702]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:25:32.702]                     cond$call), session = sessionInformation(), 
[10:25:32.702]                     timestamp = base::Sys.time(), signaled = 0L)
[10:25:32.702]                   signalCondition(cond)
[10:25:32.702]                 }
[10:25:32.702]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:25:32.702]                 "immediateCondition"))) {
[10:25:32.702]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:25:32.702]                   ...future.conditions[[length(...future.conditions) + 
[10:25:32.702]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:25:32.702]                   if (TRUE && !signal) {
[10:25:32.702]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:25:32.702]                     {
[10:25:32.702]                       inherits <- base::inherits
[10:25:32.702]                       invokeRestart <- base::invokeRestart
[10:25:32.702]                       is.null <- base::is.null
[10:25:32.702]                       muffled <- FALSE
[10:25:32.702]                       if (inherits(cond, "message")) {
[10:25:32.702]                         muffled <- grepl(pattern, "muffleMessage")
[10:25:32.702]                         if (muffled) 
[10:25:32.702]                           invokeRestart("muffleMessage")
[10:25:32.702]                       }
[10:25:32.702]                       else if (inherits(cond, "warning")) {
[10:25:32.702]                         muffled <- grepl(pattern, "muffleWarning")
[10:25:32.702]                         if (muffled) 
[10:25:32.702]                           invokeRestart("muffleWarning")
[10:25:32.702]                       }
[10:25:32.702]                       else if (inherits(cond, "condition")) {
[10:25:32.702]                         if (!is.null(pattern)) {
[10:25:32.702]                           computeRestarts <- base::computeRestarts
[10:25:32.702]                           grepl <- base::grepl
[10:25:32.702]                           restarts <- computeRestarts(cond)
[10:25:32.702]                           for (restart in restarts) {
[10:25:32.702]                             name <- restart$name
[10:25:32.702]                             if (is.null(name)) 
[10:25:32.702]                               next
[10:25:32.702]                             if (!grepl(pattern, name)) 
[10:25:32.702]                               next
[10:25:32.702]                             invokeRestart(restart)
[10:25:32.702]                             muffled <- TRUE
[10:25:32.702]                             break
[10:25:32.702]                           }
[10:25:32.702]                         }
[10:25:32.702]                       }
[10:25:32.702]                       invisible(muffled)
[10:25:32.702]                     }
[10:25:32.702]                     muffleCondition(cond, pattern = "^muffle")
[10:25:32.702]                   }
[10:25:32.702]                 }
[10:25:32.702]                 else {
[10:25:32.702]                   if (TRUE) {
[10:25:32.702]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:25:32.702]                     {
[10:25:32.702]                       inherits <- base::inherits
[10:25:32.702]                       invokeRestart <- base::invokeRestart
[10:25:32.702]                       is.null <- base::is.null
[10:25:32.702]                       muffled <- FALSE
[10:25:32.702]                       if (inherits(cond, "message")) {
[10:25:32.702]                         muffled <- grepl(pattern, "muffleMessage")
[10:25:32.702]                         if (muffled) 
[10:25:32.702]                           invokeRestart("muffleMessage")
[10:25:32.702]                       }
[10:25:32.702]                       else if (inherits(cond, "warning")) {
[10:25:32.702]                         muffled <- grepl(pattern, "muffleWarning")
[10:25:32.702]                         if (muffled) 
[10:25:32.702]                           invokeRestart("muffleWarning")
[10:25:32.702]                       }
[10:25:32.702]                       else if (inherits(cond, "condition")) {
[10:25:32.702]                         if (!is.null(pattern)) {
[10:25:32.702]                           computeRestarts <- base::computeRestarts
[10:25:32.702]                           grepl <- base::grepl
[10:25:32.702]                           restarts <- computeRestarts(cond)
[10:25:32.702]                           for (restart in restarts) {
[10:25:32.702]                             name <- restart$name
[10:25:32.702]                             if (is.null(name)) 
[10:25:32.702]                               next
[10:25:32.702]                             if (!grepl(pattern, name)) 
[10:25:32.702]                               next
[10:25:32.702]                             invokeRestart(restart)
[10:25:32.702]                             muffled <- TRUE
[10:25:32.702]                             break
[10:25:32.702]                           }
[10:25:32.702]                         }
[10:25:32.702]                       }
[10:25:32.702]                       invisible(muffled)
[10:25:32.702]                     }
[10:25:32.702]                     muffleCondition(cond, pattern = "^muffle")
[10:25:32.702]                   }
[10:25:32.702]                 }
[10:25:32.702]             }
[10:25:32.702]         }))
[10:25:32.702]     }, error = function(ex) {
[10:25:32.702]         base::structure(base::list(value = NULL, visible = NULL, 
[10:25:32.702]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:25:32.702]                 ...future.rng), started = ...future.startTime, 
[10:25:32.702]             finished = Sys.time(), session_uuid = NA_character_, 
[10:25:32.702]             version = "1.8"), class = "FutureResult")
[10:25:32.702]     }, finally = {
[10:25:32.702]         if (!identical(...future.workdir, getwd())) 
[10:25:32.702]             setwd(...future.workdir)
[10:25:32.702]         {
[10:25:32.702]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:25:32.702]                 ...future.oldOptions$nwarnings <- NULL
[10:25:32.702]             }
[10:25:32.702]             base::options(...future.oldOptions)
[10:25:32.702]             if (.Platform$OS.type == "windows") {
[10:25:32.702]                 old_names <- names(...future.oldEnvVars)
[10:25:32.702]                 envs <- base::Sys.getenv()
[10:25:32.702]                 names <- names(envs)
[10:25:32.702]                 common <- intersect(names, old_names)
[10:25:32.702]                 added <- setdiff(names, old_names)
[10:25:32.702]                 removed <- setdiff(old_names, names)
[10:25:32.702]                 changed <- common[...future.oldEnvVars[common] != 
[10:25:32.702]                   envs[common]]
[10:25:32.702]                 NAMES <- toupper(changed)
[10:25:32.702]                 args <- list()
[10:25:32.702]                 for (kk in seq_along(NAMES)) {
[10:25:32.702]                   name <- changed[[kk]]
[10:25:32.702]                   NAME <- NAMES[[kk]]
[10:25:32.702]                   if (name != NAME && is.element(NAME, old_names)) 
[10:25:32.702]                     next
[10:25:32.702]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:25:32.702]                 }
[10:25:32.702]                 NAMES <- toupper(added)
[10:25:32.702]                 for (kk in seq_along(NAMES)) {
[10:25:32.702]                   name <- added[[kk]]
[10:25:32.702]                   NAME <- NAMES[[kk]]
[10:25:32.702]                   if (name != NAME && is.element(NAME, old_names)) 
[10:25:32.702]                     next
[10:25:32.702]                   args[[name]] <- ""
[10:25:32.702]                 }
[10:25:32.702]                 NAMES <- toupper(removed)
[10:25:32.702]                 for (kk in seq_along(NAMES)) {
[10:25:32.702]                   name <- removed[[kk]]
[10:25:32.702]                   NAME <- NAMES[[kk]]
[10:25:32.702]                   if (name != NAME && is.element(NAME, old_names)) 
[10:25:32.702]                     next
[10:25:32.702]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:25:32.702]                 }
[10:25:32.702]                 if (length(args) > 0) 
[10:25:32.702]                   base::do.call(base::Sys.setenv, args = args)
[10:25:32.702]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:25:32.702]             }
[10:25:32.702]             else {
[10:25:32.702]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:25:32.702]             }
[10:25:32.702]             {
[10:25:32.702]                 if (base::length(...future.futureOptionsAdded) > 
[10:25:32.702]                   0L) {
[10:25:32.702]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:25:32.702]                   base::names(opts) <- ...future.futureOptionsAdded
[10:25:32.702]                   base::options(opts)
[10:25:32.702]                 }
[10:25:32.702]                 {
[10:25:32.702]                   {
[10:25:32.702]                     NULL
[10:25:32.702]                     RNGkind("Mersenne-Twister")
[10:25:32.702]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[10:25:32.702]                       inherits = FALSE)
[10:25:32.702]                   }
[10:25:32.702]                   options(future.plan = NULL)
[10:25:32.702]                   if (is.na(NA_character_)) 
[10:25:32.702]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:25:32.702]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:25:32.702]                   future::plan(list(function (..., envir = parent.frame()) 
[10:25:32.702]                   {
[10:25:32.702]                     future <- SequentialFuture(..., envir = envir)
[10:25:32.702]                     if (!future$lazy) 
[10:25:32.702]                       future <- run(future)
[10:25:32.702]                     invisible(future)
[10:25:32.702]                   }), .cleanup = FALSE, .init = FALSE)
[10:25:32.702]                 }
[10:25:32.702]             }
[10:25:32.702]         }
[10:25:32.702]     })
[10:25:32.702]     if (TRUE) {
[10:25:32.702]         base::sink(type = "output", split = FALSE)
[10:25:32.702]         if (TRUE) {
[10:25:32.702]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:25:32.702]         }
[10:25:32.702]         else {
[10:25:32.702]             ...future.result["stdout"] <- base::list(NULL)
[10:25:32.702]         }
[10:25:32.702]         base::close(...future.stdout)
[10:25:32.702]         ...future.stdout <- NULL
[10:25:32.702]     }
[10:25:32.702]     ...future.result$conditions <- ...future.conditions
[10:25:32.702]     ...future.result$finished <- base::Sys.time()
[10:25:32.702]     ...future.result
[10:25:32.702] }
[10:25:32.704] plan(): Setting new future strategy stack:
[10:25:32.704] List of future strategies:
[10:25:32.704] 1. sequential:
[10:25:32.704]    - args: function (..., envir = parent.frame())
[10:25:32.704]    - tweaked: FALSE
[10:25:32.704]    - call: NULL
[10:25:32.705] plan(): nbrOfWorkers() = 1
[10:25:32.705] plan(): Setting new future strategy stack:
[10:25:32.705] List of future strategies:
[10:25:32.705] 1. sequential:
[10:25:32.705]    - args: function (..., envir = parent.frame())
[10:25:32.705]    - tweaked: FALSE
[10:25:32.705]    - call: plan(strategy)
[10:25:32.706] plan(): nbrOfWorkers() = 1
[10:25:32.706] SequentialFuture started (and completed)
[10:25:32.706] - Launch lazy future ... done
[10:25:32.706] run() for ‘SequentialFuture’ ... done
SequentialFuture:
Label: ‘strategy = sequential’
Expression:
{
    42
}
Lazy evaluation: FALSE
Asynchronous evaluation: FALSE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: TRUE
Value: 56 bytes of class ‘numeric’
Early signaling: FALSE
Owner process: 378a73a7-17bc-11e5-cdc3-65eb29aceac6
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
- plan('sequential') ... DONE
- plan('multicore') ...
[10:25:32.707] plan(): Setting new future strategy stack:
[10:25:32.707] List of future strategies:
[10:25:32.707] 1. multicore:
[10:25:32.707]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[10:25:32.707]    - tweaked: FALSE
[10:25:32.707]    - call: plan(strategy)
[10:25:32.711] plan(): nbrOfWorkers() = 2
[10:25:32.714] getGlobalsAndPackages() ...
[10:25:32.714] 
[10:25:32.714] - globals: [0] <none>
[10:25:32.715] getGlobalsAndPackages() ... DONE
[10:25:32.716] Packages needed by the future expression (n = 0): <none>
[10:25:32.716] Packages needed by future strategies (n = 0): <none>
[10:25:32.716] {
[10:25:32.716]     {
[10:25:32.716]         {
[10:25:32.716]             ...future.startTime <- base::Sys.time()
[10:25:32.716]             {
[10:25:32.716]                 {
[10:25:32.716]                   {
[10:25:32.716]                     {
[10:25:32.716]                       base::local({
[10:25:32.716]                         has_future <- base::requireNamespace("future", 
[10:25:32.716]                           quietly = TRUE)
[10:25:32.716]                         if (has_future) {
[10:25:32.716]                           ns <- base::getNamespace("future")
[10:25:32.716]                           version <- ns[[".package"]][["version"]]
[10:25:32.716]                           if (is.null(version)) 
[10:25:32.716]                             version <- utils::packageVersion("future")
[10:25:32.716]                         }
[10:25:32.716]                         else {
[10:25:32.716]                           version <- NULL
[10:25:32.716]                         }
[10:25:32.716]                         if (!has_future || version < "1.8.0") {
[10:25:32.716]                           info <- base::c(r_version = base::gsub("R version ", 
[10:25:32.716]                             "", base::R.version$version.string), 
[10:25:32.716]                             platform = base::sprintf("%s (%s-bit)", 
[10:25:32.716]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:25:32.716]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[10:25:32.716]                               "release", "version")], collapse = " "), 
[10:25:32.716]                             hostname = base::Sys.info()[["nodename"]])
[10:25:32.716]                           info <- base::sprintf("%s: %s", base::names(info), 
[10:25:32.716]                             info)
[10:25:32.716]                           info <- base::paste(info, collapse = "; ")
[10:25:32.716]                           if (!has_future) {
[10:25:32.716]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:25:32.716]                               info)
[10:25:32.716]                           }
[10:25:32.716]                           else {
[10:25:32.716]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:25:32.716]                               info, version)
[10:25:32.716]                           }
[10:25:32.716]                           base::stop(msg)
[10:25:32.716]                         }
[10:25:32.716]                       })
[10:25:32.716]                     }
[10:25:32.716]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[10:25:32.716]                     base::options(mc.cores = 1L)
[10:25:32.716]                   }
[10:25:32.716]                   options(future.plan = NULL)
[10:25:32.716]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:25:32.716]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:25:32.716]                 }
[10:25:32.716]                 ...future.workdir <- getwd()
[10:25:32.716]             }
[10:25:32.716]             ...future.oldOptions <- base::as.list(base::.Options)
[10:25:32.716]             ...future.oldEnvVars <- base::Sys.getenv()
[10:25:32.716]         }
[10:25:32.716]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:25:32.716]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[10:25:32.716]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:25:32.716]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:25:32.716]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:25:32.716]             future.stdout.windows.reencode = NULL, width = 80L)
[10:25:32.716]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:25:32.716]             base::names(...future.oldOptions))
[10:25:32.716]     }
[10:25:32.716]     if (FALSE) {
[10:25:32.716]     }
[10:25:32.716]     else {
[10:25:32.716]         if (TRUE) {
[10:25:32.716]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:25:32.716]                 open = "w")
[10:25:32.716]         }
[10:25:32.716]         else {
[10:25:32.716]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:25:32.716]                 windows = "NUL", "/dev/null"), open = "w")
[10:25:32.716]         }
[10:25:32.716]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:25:32.716]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:25:32.716]             base::sink(type = "output", split = FALSE)
[10:25:32.716]             base::close(...future.stdout)
[10:25:32.716]         }, add = TRUE)
[10:25:32.716]     }
[10:25:32.716]     ...future.frame <- base::sys.nframe()
[10:25:32.716]     ...future.conditions <- base::list()
[10:25:32.716]     ...future.rng <- base::globalenv()$.Random.seed
[10:25:32.716]     if (FALSE) {
[10:25:32.716]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:25:32.716]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:25:32.716]     }
[10:25:32.716]     ...future.result <- base::tryCatch({
[10:25:32.716]         base::withCallingHandlers({
[10:25:32.716]             ...future.value <- base::withVisible(base::local({
[10:25:32.716]                 withCallingHandlers({
[10:25:32.716]                   42
[10:25:32.716]                 }, immediateCondition = function(cond) {
[10:25:32.716]                   save_rds <- function (object, pathname, ...) 
[10:25:32.716]                   {
[10:25:32.716]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[10:25:32.716]                     if (file_test("-f", pathname_tmp)) {
[10:25:32.716]                       fi_tmp <- file.info(pathname_tmp)
[10:25:32.716]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[10:25:32.716]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[10:25:32.716]                         fi_tmp[["mtime"]])
[10:25:32.716]                     }
[10:25:32.716]                     tryCatch({
[10:25:32.716]                       saveRDS(object, file = pathname_tmp, ...)
[10:25:32.716]                     }, error = function(ex) {
[10:25:32.716]                       msg <- conditionMessage(ex)
[10:25:32.716]                       fi_tmp <- file.info(pathname_tmp)
[10:25:32.716]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[10:25:32.716]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[10:25:32.716]                         fi_tmp[["mtime"]], msg)
[10:25:32.716]                       ex$message <- msg
[10:25:32.716]                       stop(ex)
[10:25:32.716]                     })
[10:25:32.716]                     stopifnot(file_test("-f", pathname_tmp))
[10:25:32.716]                     res <- file.rename(from = pathname_tmp, to = pathname)
[10:25:32.716]                     if (!res || file_test("-f", pathname_tmp)) {
[10:25:32.716]                       fi_tmp <- file.info(pathname_tmp)
[10:25:32.716]                       fi <- file.info(pathname)
[10:25:32.716]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[10:25:32.716]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[10:25:32.716]                         fi_tmp[["mtime"]], sQuote(pathname), 
[10:25:32.716]                         fi[["size"]], fi[["mtime"]])
[10:25:32.716]                       stop(msg)
[10:25:32.716]                     }
[10:25:32.716]                     invisible(pathname)
[10:25:32.716]                   }
[10:25:32.716]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[10:25:32.716]                     rootPath = tempdir()) 
[10:25:32.716]                   {
[10:25:32.716]                     obj <- list(time = Sys.time(), condition = cond)
[10:25:32.716]                     file <- tempfile(pattern = class(cond)[1], 
[10:25:32.716]                       tmpdir = path, fileext = ".rds")
[10:25:32.716]                     save_rds(obj, file)
[10:25:32.716]                   }
[10:25:32.716]                   saveImmediateCondition(cond, path = "/tmp/RtmpZe8BxD/.future/immediateConditions")
[10:25:32.716]                   muffleCondition <- function (cond, pattern = "^muffle") 
[10:25:32.716]                   {
[10:25:32.716]                     inherits <- base::inherits
[10:25:32.716]                     invokeRestart <- base::invokeRestart
[10:25:32.716]                     is.null <- base::is.null
[10:25:32.716]                     muffled <- FALSE
[10:25:32.716]                     if (inherits(cond, "message")) {
[10:25:32.716]                       muffled <- grepl(pattern, "muffleMessage")
[10:25:32.716]                       if (muffled) 
[10:25:32.716]                         invokeRestart("muffleMessage")
[10:25:32.716]                     }
[10:25:32.716]                     else if (inherits(cond, "warning")) {
[10:25:32.716]                       muffled <- grepl(pattern, "muffleWarning")
[10:25:32.716]                       if (muffled) 
[10:25:32.716]                         invokeRestart("muffleWarning")
[10:25:32.716]                     }
[10:25:32.716]                     else if (inherits(cond, "condition")) {
[10:25:32.716]                       if (!is.null(pattern)) {
[10:25:32.716]                         computeRestarts <- base::computeRestarts
[10:25:32.716]                         grepl <- base::grepl
[10:25:32.716]                         restarts <- computeRestarts(cond)
[10:25:32.716]                         for (restart in restarts) {
[10:25:32.716]                           name <- restart$name
[10:25:32.716]                           if (is.null(name)) 
[10:25:32.716]                             next
[10:25:32.716]                           if (!grepl(pattern, name)) 
[10:25:32.716]                             next
[10:25:32.716]                           invokeRestart(restart)
[10:25:32.716]                           muffled <- TRUE
[10:25:32.716]                           break
[10:25:32.716]                         }
[10:25:32.716]                       }
[10:25:32.716]                     }
[10:25:32.716]                     invisible(muffled)
[10:25:32.716]                   }
[10:25:32.716]                   muffleCondition(cond)
[10:25:32.716]                 })
[10:25:32.716]             }))
[10:25:32.716]             future::FutureResult(value = ...future.value$value, 
[10:25:32.716]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:25:32.716]                   ...future.rng), globalenv = if (FALSE) 
[10:25:32.716]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:25:32.716]                     ...future.globalenv.names))
[10:25:32.716]                 else NULL, started = ...future.startTime, version = "1.8")
[10:25:32.716]         }, condition = base::local({
[10:25:32.716]             c <- base::c
[10:25:32.716]             inherits <- base::inherits
[10:25:32.716]             invokeRestart <- base::invokeRestart
[10:25:32.716]             length <- base::length
[10:25:32.716]             list <- base::list
[10:25:32.716]             seq.int <- base::seq.int
[10:25:32.716]             signalCondition <- base::signalCondition
[10:25:32.716]             sys.calls <- base::sys.calls
[10:25:32.716]             `[[` <- base::`[[`
[10:25:32.716]             `+` <- base::`+`
[10:25:32.716]             `<<-` <- base::`<<-`
[10:25:32.716]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:25:32.716]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:25:32.716]                   3L)]
[10:25:32.716]             }
[10:25:32.716]             function(cond) {
[10:25:32.716]                 is_error <- inherits(cond, "error")
[10:25:32.716]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:25:32.716]                   NULL)
[10:25:32.716]                 if (is_error) {
[10:25:32.716]                   sessionInformation <- function() {
[10:25:32.716]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:25:32.716]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:25:32.716]                       search = base::search(), system = base::Sys.info())
[10:25:32.716]                   }
[10:25:32.716]                   ...future.conditions[[length(...future.conditions) + 
[10:25:32.716]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:25:32.716]                     cond$call), session = sessionInformation(), 
[10:25:32.716]                     timestamp = base::Sys.time(), signaled = 0L)
[10:25:32.716]                   signalCondition(cond)
[10:25:32.716]                 }
[10:25:32.716]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:25:32.716]                 "immediateCondition"))) {
[10:25:32.716]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:25:32.716]                   ...future.conditions[[length(...future.conditions) + 
[10:25:32.716]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:25:32.716]                   if (TRUE && !signal) {
[10:25:32.716]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:25:32.716]                     {
[10:25:32.716]                       inherits <- base::inherits
[10:25:32.716]                       invokeRestart <- base::invokeRestart
[10:25:32.716]                       is.null <- base::is.null
[10:25:32.716]                       muffled <- FALSE
[10:25:32.716]                       if (inherits(cond, "message")) {
[10:25:32.716]                         muffled <- grepl(pattern, "muffleMessage")
[10:25:32.716]                         if (muffled) 
[10:25:32.716]                           invokeRestart("muffleMessage")
[10:25:32.716]                       }
[10:25:32.716]                       else if (inherits(cond, "warning")) {
[10:25:32.716]                         muffled <- grepl(pattern, "muffleWarning")
[10:25:32.716]                         if (muffled) 
[10:25:32.716]                           invokeRestart("muffleWarning")
[10:25:32.716]                       }
[10:25:32.716]                       else if (inherits(cond, "condition")) {
[10:25:32.716]                         if (!is.null(pattern)) {
[10:25:32.716]                           computeRestarts <- base::computeRestarts
[10:25:32.716]                           grepl <- base::grepl
[10:25:32.716]                           restarts <- computeRestarts(cond)
[10:25:32.716]                           for (restart in restarts) {
[10:25:32.716]                             name <- restart$name
[10:25:32.716]                             if (is.null(name)) 
[10:25:32.716]                               next
[10:25:32.716]                             if (!grepl(pattern, name)) 
[10:25:32.716]                               next
[10:25:32.716]                             invokeRestart(restart)
[10:25:32.716]                             muffled <- TRUE
[10:25:32.716]                             break
[10:25:32.716]                           }
[10:25:32.716]                         }
[10:25:32.716]                       }
[10:25:32.716]                       invisible(muffled)
[10:25:32.716]                     }
[10:25:32.716]                     muffleCondition(cond, pattern = "^muffle")
[10:25:32.716]                   }
[10:25:32.716]                 }
[10:25:32.716]                 else {
[10:25:32.716]                   if (TRUE) {
[10:25:32.716]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:25:32.716]                     {
[10:25:32.716]                       inherits <- base::inherits
[10:25:32.716]                       invokeRestart <- base::invokeRestart
[10:25:32.716]                       is.null <- base::is.null
[10:25:32.716]                       muffled <- FALSE
[10:25:32.716]                       if (inherits(cond, "message")) {
[10:25:32.716]                         muffled <- grepl(pattern, "muffleMessage")
[10:25:32.716]                         if (muffled) 
[10:25:32.716]                           invokeRestart("muffleMessage")
[10:25:32.716]                       }
[10:25:32.716]                       else if (inherits(cond, "warning")) {
[10:25:32.716]                         muffled <- grepl(pattern, "muffleWarning")
[10:25:32.716]                         if (muffled) 
[10:25:32.716]                           invokeRestart("muffleWarning")
[10:25:32.716]                       }
[10:25:32.716]                       else if (inherits(cond, "condition")) {
[10:25:32.716]                         if (!is.null(pattern)) {
[10:25:32.716]                           computeRestarts <- base::computeRestarts
[10:25:32.716]                           grepl <- base::grepl
[10:25:32.716]                           restarts <- computeRestarts(cond)
[10:25:32.716]                           for (restart in restarts) {
[10:25:32.716]                             name <- restart$name
[10:25:32.716]                             if (is.null(name)) 
[10:25:32.716]                               next
[10:25:32.716]                             if (!grepl(pattern, name)) 
[10:25:32.716]                               next
[10:25:32.716]                             invokeRestart(restart)
[10:25:32.716]                             muffled <- TRUE
[10:25:32.716]                             break
[10:25:32.716]                           }
[10:25:32.716]                         }
[10:25:32.716]                       }
[10:25:32.716]                       invisible(muffled)
[10:25:32.716]                     }
[10:25:32.716]                     muffleCondition(cond, pattern = "^muffle")
[10:25:32.716]                   }
[10:25:32.716]                 }
[10:25:32.716]             }
[10:25:32.716]         }))
[10:25:32.716]     }, error = function(ex) {
[10:25:32.716]         base::structure(base::list(value = NULL, visible = NULL, 
[10:25:32.716]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:25:32.716]                 ...future.rng), started = ...future.startTime, 
[10:25:32.716]             finished = Sys.time(), session_uuid = NA_character_, 
[10:25:32.716]             version = "1.8"), class = "FutureResult")
[10:25:32.716]     }, finally = {
[10:25:32.716]         if (!identical(...future.workdir, getwd())) 
[10:25:32.716]             setwd(...future.workdir)
[10:25:32.716]         {
[10:25:32.716]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:25:32.716]                 ...future.oldOptions$nwarnings <- NULL
[10:25:32.716]             }
[10:25:32.716]             base::options(...future.oldOptions)
[10:25:32.716]             if (.Platform$OS.type == "windows") {
[10:25:32.716]                 old_names <- names(...future.oldEnvVars)
[10:25:32.716]                 envs <- base::Sys.getenv()
[10:25:32.716]                 names <- names(envs)
[10:25:32.716]                 common <- intersect(names, old_names)
[10:25:32.716]                 added <- setdiff(names, old_names)
[10:25:32.716]                 removed <- setdiff(old_names, names)
[10:25:32.716]                 changed <- common[...future.oldEnvVars[common] != 
[10:25:32.716]                   envs[common]]
[10:25:32.716]                 NAMES <- toupper(changed)
[10:25:32.716]                 args <- list()
[10:25:32.716]                 for (kk in seq_along(NAMES)) {
[10:25:32.716]                   name <- changed[[kk]]
[10:25:32.716]                   NAME <- NAMES[[kk]]
[10:25:32.716]                   if (name != NAME && is.element(NAME, old_names)) 
[10:25:32.716]                     next
[10:25:32.716]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:25:32.716]                 }
[10:25:32.716]                 NAMES <- toupper(added)
[10:25:32.716]                 for (kk in seq_along(NAMES)) {
[10:25:32.716]                   name <- added[[kk]]
[10:25:32.716]                   NAME <- NAMES[[kk]]
[10:25:32.716]                   if (name != NAME && is.element(NAME, old_names)) 
[10:25:32.716]                     next
[10:25:32.716]                   args[[name]] <- ""
[10:25:32.716]                 }
[10:25:32.716]                 NAMES <- toupper(removed)
[10:25:32.716]                 for (kk in seq_along(NAMES)) {
[10:25:32.716]                   name <- removed[[kk]]
[10:25:32.716]                   NAME <- NAMES[[kk]]
[10:25:32.716]                   if (name != NAME && is.element(NAME, old_names)) 
[10:25:32.716]                     next
[10:25:32.716]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:25:32.716]                 }
[10:25:32.716]                 if (length(args) > 0) 
[10:25:32.716]                   base::do.call(base::Sys.setenv, args = args)
[10:25:32.716]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:25:32.716]             }
[10:25:32.716]             else {
[10:25:32.716]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:25:32.716]             }
[10:25:32.716]             {
[10:25:32.716]                 if (base::length(...future.futureOptionsAdded) > 
[10:25:32.716]                   0L) {
[10:25:32.716]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:25:32.716]                   base::names(opts) <- ...future.futureOptionsAdded
[10:25:32.716]                   base::options(opts)
[10:25:32.716]                 }
[10:25:32.716]                 {
[10:25:32.716]                   {
[10:25:32.716]                     base::options(mc.cores = ...future.mc.cores.old)
[10:25:32.716]                     NULL
[10:25:32.716]                   }
[10:25:32.716]                   options(future.plan = NULL)
[10:25:32.716]                   if (is.na(NA_character_)) 
[10:25:32.716]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:25:32.716]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:25:32.716]                   future::plan(list(function (..., workers = availableCores(constraints = "multicore"), 
[10:25:32.716]                     envir = parent.frame()) 
[10:25:32.716]                   {
[10:25:32.716]                     default_workers <- missing(workers)
[10:25:32.716]                     if (is.function(workers)) 
[10:25:32.716]                       workers <- workers()
[10:25:32.716]                     workers <- structure(as.integer(workers), 
[10:25:32.716]                       class = class(workers))
[10:25:32.716]                     stop_if_not(is.finite(workers), workers >= 
[10:25:32.716]                       1L)
[10:25:32.716]                     if ((workers == 1L && !inherits(workers, 
[10:25:32.716]                       "AsIs")) || !supportsMulticore(warn = TRUE)) {
[10:25:32.716]                       if (default_workers) 
[10:25:32.716]                         supportsMulticore(warn = TRUE)
[10:25:32.716]                       return(sequential(..., envir = envir))
[10:25:32.716]                     }
[10:25:32.716]                     oopts <- options(mc.cores = workers)
[10:25:32.716]                     on.exit(options(oopts))
[10:25:32.716]                     future <- MulticoreFuture(..., workers = workers, 
[10:25:32.716]                       envir = envir)
[10:25:32.716]                     if (!future$lazy) 
[10:25:32.716]                       future <- run(future)
[10:25:32.716]                     invisible(future)
[10:25:32.716]                   }), .cleanup = FALSE, .init = FALSE)
[10:25:32.716]                 }
[10:25:32.716]             }
[10:25:32.716]         }
[10:25:32.716]     })
[10:25:32.716]     if (TRUE) {
[10:25:32.716]         base::sink(type = "output", split = FALSE)
[10:25:32.716]         if (TRUE) {
[10:25:32.716]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:25:32.716]         }
[10:25:32.716]         else {
[10:25:32.716]             ...future.result["stdout"] <- base::list(NULL)
[10:25:32.716]         }
[10:25:32.716]         base::close(...future.stdout)
[10:25:32.716]         ...future.stdout <- NULL
[10:25:32.716]     }
[10:25:32.716]     ...future.result$conditions <- ...future.conditions
[10:25:32.716]     ...future.result$finished <- base::Sys.time()
[10:25:32.716]     ...future.result
[10:25:32.716] }
[10:25:32.718] requestCore(): workers = 2
[10:25:32.721] MulticoreFuture started
MulticoreFuture:
Label: ‘<none>’
Expression:
[1] 42
Lazy evaluation: FALSE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
[10:25:32.722] plan(): Setting new future strategy stack:
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[10:25:32.722] List of future strategies:
[10:25:32.722] 1. sequential:
[10:25:32.722]    - args: function (..., envir = parent.frame())
[10:25:32.722]    - tweaked: FALSE
[10:25:32.722]    - call: NULL
[10:25:32.723] plan(): nbrOfWorkers() = 1
[10:25:32.725] plan(): Setting new future strategy stack:
[10:25:32.725] List of future strategies:
[10:25:32.725] 1. multicore:
[10:25:32.725]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[10:25:32.725]    - tweaked: FALSE
[10:25:32.725]    - call: plan(strategy)
[10:25:32.730] plan(): nbrOfWorkers() = 2
Resolved: TRUE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: 378a73a7-17bc-11e5-cdc3-65eb29aceac6
Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[10:25:32.731] result() for MulticoreFuture ...
[10:25:32.737] result() for MulticoreFuture ...
[10:25:32.737] result() for MulticoreFuture ... done
[10:25:32.737] result() for MulticoreFuture ... done
[10:25:32.737] result() for MulticoreFuture ...
[10:25:32.737] result() for MulticoreFuture ... done
[10:25:32.737] getGlobalsAndPackages() ...
[10:25:32.738] Searching for globals...
[10:25:32.738] 
[10:25:32.738] Searching for globals ... DONE
[10:25:32.738] - globals: [0] <none>
[10:25:32.738] getGlobalsAndPackages() ... DONE
[10:25:32.739] run() for ‘Future’ ...
[10:25:32.739] - state: ‘created’
[10:25:32.739] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:25:32.743] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[10:25:32.743] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[10:25:32.743]   - Field: ‘label’
[10:25:32.743]   - Field: ‘local’
[10:25:32.743]   - Field: ‘owner’
[10:25:32.743]   - Field: ‘envir’
[10:25:32.744]   - Field: ‘workers’
[10:25:32.744]   - Field: ‘packages’
[10:25:32.744]   - Field: ‘gc’
[10:25:32.744]   - Field: ‘job’
[10:25:32.744]   - Field: ‘conditions’
[10:25:32.744]   - Field: ‘expr’
[10:25:32.744]   - Field: ‘uuid’
[10:25:32.744]   - Field: ‘seed’
[10:25:32.744]   - Field: ‘version’
[10:25:32.745]   - Field: ‘result’
[10:25:32.745]   - Field: ‘asynchronous’
[10:25:32.745]   - Field: ‘calls’
[10:25:32.745]   - Field: ‘globals’
[10:25:32.745]   - Field: ‘stdout’
[10:25:32.745]   - Field: ‘earlySignal’
[10:25:32.745]   - Field: ‘lazy’
[10:25:32.745]   - Field: ‘state’
[10:25:32.748] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[10:25:32.748] - Launch lazy future ...
[10:25:32.749] Packages needed by the future expression (n = 0): <none>
[10:25:32.749] Packages needed by future strategies (n = 0): <none>
[10:25:32.749] {
[10:25:32.749]     {
[10:25:32.749]         {
[10:25:32.749]             ...future.startTime <- base::Sys.time()
[10:25:32.749]             {
[10:25:32.749]                 {
[10:25:32.749]                   {
[10:25:32.749]                     {
[10:25:32.749]                       base::local({
[10:25:32.749]                         has_future <- base::requireNamespace("future", 
[10:25:32.749]                           quietly = TRUE)
[10:25:32.749]                         if (has_future) {
[10:25:32.749]                           ns <- base::getNamespace("future")
[10:25:32.749]                           version <- ns[[".package"]][["version"]]
[10:25:32.749]                           if (is.null(version)) 
[10:25:32.749]                             version <- utils::packageVersion("future")
[10:25:32.749]                         }
[10:25:32.749]                         else {
[10:25:32.749]                           version <- NULL
[10:25:32.749]                         }
[10:25:32.749]                         if (!has_future || version < "1.8.0") {
[10:25:32.749]                           info <- base::c(r_version = base::gsub("R version ", 
[10:25:32.749]                             "", base::R.version$version.string), 
[10:25:32.749]                             platform = base::sprintf("%s (%s-bit)", 
[10:25:32.749]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:25:32.749]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[10:25:32.749]                               "release", "version")], collapse = " "), 
[10:25:32.749]                             hostname = base::Sys.info()[["nodename"]])
[10:25:32.749]                           info <- base::sprintf("%s: %s", base::names(info), 
[10:25:32.749]                             info)
[10:25:32.749]                           info <- base::paste(info, collapse = "; ")
[10:25:32.749]                           if (!has_future) {
[10:25:32.749]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:25:32.749]                               info)
[10:25:32.749]                           }
[10:25:32.749]                           else {
[10:25:32.749]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:25:32.749]                               info, version)
[10:25:32.749]                           }
[10:25:32.749]                           base::stop(msg)
[10:25:32.749]                         }
[10:25:32.749]                       })
[10:25:32.749]                     }
[10:25:32.749]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[10:25:32.749]                     base::options(mc.cores = 1L)
[10:25:32.749]                   }
[10:25:32.749]                   options(future.plan = NULL)
[10:25:32.749]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:25:32.749]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:25:32.749]                 }
[10:25:32.749]                 ...future.workdir <- getwd()
[10:25:32.749]             }
[10:25:32.749]             ...future.oldOptions <- base::as.list(base::.Options)
[10:25:32.749]             ...future.oldEnvVars <- base::Sys.getenv()
[10:25:32.749]         }
[10:25:32.749]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:25:32.749]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[10:25:32.749]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:25:32.749]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:25:32.749]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:25:32.749]             future.stdout.windows.reencode = NULL, width = 80L)
[10:25:32.749]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:25:32.749]             base::names(...future.oldOptions))
[10:25:32.749]     }
[10:25:32.749]     if (FALSE) {
[10:25:32.749]     }
[10:25:32.749]     else {
[10:25:32.749]         if (TRUE) {
[10:25:32.749]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:25:32.749]                 open = "w")
[10:25:32.749]         }
[10:25:32.749]         else {
[10:25:32.749]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:25:32.749]                 windows = "NUL", "/dev/null"), open = "w")
[10:25:32.749]         }
[10:25:32.749]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:25:32.749]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:25:32.749]             base::sink(type = "output", split = FALSE)
[10:25:32.749]             base::close(...future.stdout)
[10:25:32.749]         }, add = TRUE)
[10:25:32.749]     }
[10:25:32.749]     ...future.frame <- base::sys.nframe()
[10:25:32.749]     ...future.conditions <- base::list()
[10:25:32.749]     ...future.rng <- base::globalenv()$.Random.seed
[10:25:32.749]     if (FALSE) {
[10:25:32.749]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:25:32.749]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:25:32.749]     }
[10:25:32.749]     ...future.result <- base::tryCatch({
[10:25:32.749]         base::withCallingHandlers({
[10:25:32.749]             ...future.value <- base::withVisible(base::local({
[10:25:32.749]                 withCallingHandlers({
[10:25:32.749]                   42
[10:25:32.749]                 }, immediateCondition = function(cond) {
[10:25:32.749]                   save_rds <- function (object, pathname, ...) 
[10:25:32.749]                   {
[10:25:32.749]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[10:25:32.749]                     if (file_test("-f", pathname_tmp)) {
[10:25:32.749]                       fi_tmp <- file.info(pathname_tmp)
[10:25:32.749]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[10:25:32.749]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[10:25:32.749]                         fi_tmp[["mtime"]])
[10:25:32.749]                     }
[10:25:32.749]                     tryCatch({
[10:25:32.749]                       saveRDS(object, file = pathname_tmp, ...)
[10:25:32.749]                     }, error = function(ex) {
[10:25:32.749]                       msg <- conditionMessage(ex)
[10:25:32.749]                       fi_tmp <- file.info(pathname_tmp)
[10:25:32.749]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[10:25:32.749]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[10:25:32.749]                         fi_tmp[["mtime"]], msg)
[10:25:32.749]                       ex$message <- msg
[10:25:32.749]                       stop(ex)
[10:25:32.749]                     })
[10:25:32.749]                     stopifnot(file_test("-f", pathname_tmp))
[10:25:32.749]                     res <- file.rename(from = pathname_tmp, to = pathname)
[10:25:32.749]                     if (!res || file_test("-f", pathname_tmp)) {
[10:25:32.749]                       fi_tmp <- file.info(pathname_tmp)
[10:25:32.749]                       fi <- file.info(pathname)
[10:25:32.749]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[10:25:32.749]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[10:25:32.749]                         fi_tmp[["mtime"]], sQuote(pathname), 
[10:25:32.749]                         fi[["size"]], fi[["mtime"]])
[10:25:32.749]                       stop(msg)
[10:25:32.749]                     }
[10:25:32.749]                     invisible(pathname)
[10:25:32.749]                   }
[10:25:32.749]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[10:25:32.749]                     rootPath = tempdir()) 
[10:25:32.749]                   {
[10:25:32.749]                     obj <- list(time = Sys.time(), condition = cond)
[10:25:32.749]                     file <- tempfile(pattern = class(cond)[1], 
[10:25:32.749]                       tmpdir = path, fileext = ".rds")
[10:25:32.749]                     save_rds(obj, file)
[10:25:32.749]                   }
[10:25:32.749]                   saveImmediateCondition(cond, path = "/tmp/RtmpZe8BxD/.future/immediateConditions")
[10:25:32.749]                   muffleCondition <- function (cond, pattern = "^muffle") 
[10:25:32.749]                   {
[10:25:32.749]                     inherits <- base::inherits
[10:25:32.749]                     invokeRestart <- base::invokeRestart
[10:25:32.749]                     is.null <- base::is.null
[10:25:32.749]                     muffled <- FALSE
[10:25:32.749]                     if (inherits(cond, "message")) {
[10:25:32.749]                       muffled <- grepl(pattern, "muffleMessage")
[10:25:32.749]                       if (muffled) 
[10:25:32.749]                         invokeRestart("muffleMessage")
[10:25:32.749]                     }
[10:25:32.749]                     else if (inherits(cond, "warning")) {
[10:25:32.749]                       muffled <- grepl(pattern, "muffleWarning")
[10:25:32.749]                       if (muffled) 
[10:25:32.749]                         invokeRestart("muffleWarning")
[10:25:32.749]                     }
[10:25:32.749]                     else if (inherits(cond, "condition")) {
[10:25:32.749]                       if (!is.null(pattern)) {
[10:25:32.749]                         computeRestarts <- base::computeRestarts
[10:25:32.749]                         grepl <- base::grepl
[10:25:32.749]                         restarts <- computeRestarts(cond)
[10:25:32.749]                         for (restart in restarts) {
[10:25:32.749]                           name <- restart$name
[10:25:32.749]                           if (is.null(name)) 
[10:25:32.749]                             next
[10:25:32.749]                           if (!grepl(pattern, name)) 
[10:25:32.749]                             next
[10:25:32.749]                           invokeRestart(restart)
[10:25:32.749]                           muffled <- TRUE
[10:25:32.749]                           break
[10:25:32.749]                         }
[10:25:32.749]                       }
[10:25:32.749]                     }
[10:25:32.749]                     invisible(muffled)
[10:25:32.749]                   }
[10:25:32.749]                   muffleCondition(cond)
[10:25:32.749]                 })
[10:25:32.749]             }))
[10:25:32.749]             future::FutureResult(value = ...future.value$value, 
[10:25:32.749]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:25:32.749]                   ...future.rng), globalenv = if (FALSE) 
[10:25:32.749]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:25:32.749]                     ...future.globalenv.names))
[10:25:32.749]                 else NULL, started = ...future.startTime, version = "1.8")
[10:25:32.749]         }, condition = base::local({
[10:25:32.749]             c <- base::c
[10:25:32.749]             inherits <- base::inherits
[10:25:32.749]             invokeRestart <- base::invokeRestart
[10:25:32.749]             length <- base::length
[10:25:32.749]             list <- base::list
[10:25:32.749]             seq.int <- base::seq.int
[10:25:32.749]             signalCondition <- base::signalCondition
[10:25:32.749]             sys.calls <- base::sys.calls
[10:25:32.749]             `[[` <- base::`[[`
[10:25:32.749]             `+` <- base::`+`
[10:25:32.749]             `<<-` <- base::`<<-`
[10:25:32.749]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:25:32.749]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:25:32.749]                   3L)]
[10:25:32.749]             }
[10:25:32.749]             function(cond) {
[10:25:32.749]                 is_error <- inherits(cond, "error")
[10:25:32.749]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:25:32.749]                   NULL)
[10:25:32.749]                 if (is_error) {
[10:25:32.749]                   sessionInformation <- function() {
[10:25:32.749]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:25:32.749]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:25:32.749]                       search = base::search(), system = base::Sys.info())
[10:25:32.749]                   }
[10:25:32.749]                   ...future.conditions[[length(...future.conditions) + 
[10:25:32.749]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:25:32.749]                     cond$call), session = sessionInformation(), 
[10:25:32.749]                     timestamp = base::Sys.time(), signaled = 0L)
[10:25:32.749]                   signalCondition(cond)
[10:25:32.749]                 }
[10:25:32.749]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:25:32.749]                 "immediateCondition"))) {
[10:25:32.749]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:25:32.749]                   ...future.conditions[[length(...future.conditions) + 
[10:25:32.749]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:25:32.749]                   if (TRUE && !signal) {
[10:25:32.749]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:25:32.749]                     {
[10:25:32.749]                       inherits <- base::inherits
[10:25:32.749]                       invokeRestart <- base::invokeRestart
[10:25:32.749]                       is.null <- base::is.null
[10:25:32.749]                       muffled <- FALSE
[10:25:32.749]                       if (inherits(cond, "message")) {
[10:25:32.749]                         muffled <- grepl(pattern, "muffleMessage")
[10:25:32.749]                         if (muffled) 
[10:25:32.749]                           invokeRestart("muffleMessage")
[10:25:32.749]                       }
[10:25:32.749]                       else if (inherits(cond, "warning")) {
[10:25:32.749]                         muffled <- grepl(pattern, "muffleWarning")
[10:25:32.749]                         if (muffled) 
[10:25:32.749]                           invokeRestart("muffleWarning")
[10:25:32.749]                       }
[10:25:32.749]                       else if (inherits(cond, "condition")) {
[10:25:32.749]                         if (!is.null(pattern)) {
[10:25:32.749]                           computeRestarts <- base::computeRestarts
[10:25:32.749]                           grepl <- base::grepl
[10:25:32.749]                           restarts <- computeRestarts(cond)
[10:25:32.749]                           for (restart in restarts) {
[10:25:32.749]                             name <- restart$name
[10:25:32.749]                             if (is.null(name)) 
[10:25:32.749]                               next
[10:25:32.749]                             if (!grepl(pattern, name)) 
[10:25:32.749]                               next
[10:25:32.749]                             invokeRestart(restart)
[10:25:32.749]                             muffled <- TRUE
[10:25:32.749]                             break
[10:25:32.749]                           }
[10:25:32.749]                         }
[10:25:32.749]                       }
[10:25:32.749]                       invisible(muffled)
[10:25:32.749]                     }
[10:25:32.749]                     muffleCondition(cond, pattern = "^muffle")
[10:25:32.749]                   }
[10:25:32.749]                 }
[10:25:32.749]                 else {
[10:25:32.749]                   if (TRUE) {
[10:25:32.749]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:25:32.749]                     {
[10:25:32.749]                       inherits <- base::inherits
[10:25:32.749]                       invokeRestart <- base::invokeRestart
[10:25:32.749]                       is.null <- base::is.null
[10:25:32.749]                       muffled <- FALSE
[10:25:32.749]                       if (inherits(cond, "message")) {
[10:25:32.749]                         muffled <- grepl(pattern, "muffleMessage")
[10:25:32.749]                         if (muffled) 
[10:25:32.749]                           invokeRestart("muffleMessage")
[10:25:32.749]                       }
[10:25:32.749]                       else if (inherits(cond, "warning")) {
[10:25:32.749]                         muffled <- grepl(pattern, "muffleWarning")
[10:25:32.749]                         if (muffled) 
[10:25:32.749]                           invokeRestart("muffleWarning")
[10:25:32.749]                       }
[10:25:32.749]                       else if (inherits(cond, "condition")) {
[10:25:32.749]                         if (!is.null(pattern)) {
[10:25:32.749]                           computeRestarts <- base::computeRestarts
[10:25:32.749]                           grepl <- base::grepl
[10:25:32.749]                           restarts <- computeRestarts(cond)
[10:25:32.749]                           for (restart in restarts) {
[10:25:32.749]                             name <- restart$name
[10:25:32.749]                             if (is.null(name)) 
[10:25:32.749]                               next
[10:25:32.749]                             if (!grepl(pattern, name)) 
[10:25:32.749]                               next
[10:25:32.749]                             invokeRestart(restart)
[10:25:32.749]                             muffled <- TRUE
[10:25:32.749]                             break
[10:25:32.749]                           }
[10:25:32.749]                         }
[10:25:32.749]                       }
[10:25:32.749]                       invisible(muffled)
[10:25:32.749]                     }
[10:25:32.749]                     muffleCondition(cond, pattern = "^muffle")
[10:25:32.749]                   }
[10:25:32.749]                 }
[10:25:32.749]             }
[10:25:32.749]         }))
[10:25:32.749]     }, error = function(ex) {
[10:25:32.749]         base::structure(base::list(value = NULL, visible = NULL, 
[10:25:32.749]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:25:32.749]                 ...future.rng), started = ...future.startTime, 
[10:25:32.749]             finished = Sys.time(), session_uuid = NA_character_, 
[10:25:32.749]             version = "1.8"), class = "FutureResult")
[10:25:32.749]     }, finally = {
[10:25:32.749]         if (!identical(...future.workdir, getwd())) 
[10:25:32.749]             setwd(...future.workdir)
[10:25:32.749]         {
[10:25:32.749]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:25:32.749]                 ...future.oldOptions$nwarnings <- NULL
[10:25:32.749]             }
[10:25:32.749]             base::options(...future.oldOptions)
[10:25:32.749]             if (.Platform$OS.type == "windows") {
[10:25:32.749]                 old_names <- names(...future.oldEnvVars)
[10:25:32.749]                 envs <- base::Sys.getenv()
[10:25:32.749]                 names <- names(envs)
[10:25:32.749]                 common <- intersect(names, old_names)
[10:25:32.749]                 added <- setdiff(names, old_names)
[10:25:32.749]                 removed <- setdiff(old_names, names)
[10:25:32.749]                 changed <- common[...future.oldEnvVars[common] != 
[10:25:32.749]                   envs[common]]
[10:25:32.749]                 NAMES <- toupper(changed)
[10:25:32.749]                 args <- list()
[10:25:32.749]                 for (kk in seq_along(NAMES)) {
[10:25:32.749]                   name <- changed[[kk]]
[10:25:32.749]                   NAME <- NAMES[[kk]]
[10:25:32.749]                   if (name != NAME && is.element(NAME, old_names)) 
[10:25:32.749]                     next
[10:25:32.749]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:25:32.749]                 }
[10:25:32.749]                 NAMES <- toupper(added)
[10:25:32.749]                 for (kk in seq_along(NAMES)) {
[10:25:32.749]                   name <- added[[kk]]
[10:25:32.749]                   NAME <- NAMES[[kk]]
[10:25:32.749]                   if (name != NAME && is.element(NAME, old_names)) 
[10:25:32.749]                     next
[10:25:32.749]                   args[[name]] <- ""
[10:25:32.749]                 }
[10:25:32.749]                 NAMES <- toupper(removed)
[10:25:32.749]                 for (kk in seq_along(NAMES)) {
[10:25:32.749]                   name <- removed[[kk]]
[10:25:32.749]                   NAME <- NAMES[[kk]]
[10:25:32.749]                   if (name != NAME && is.element(NAME, old_names)) 
[10:25:32.749]                     next
[10:25:32.749]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:25:32.749]                 }
[10:25:32.749]                 if (length(args) > 0) 
[10:25:32.749]                   base::do.call(base::Sys.setenv, args = args)
[10:25:32.749]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:25:32.749]             }
[10:25:32.749]             else {
[10:25:32.749]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:25:32.749]             }
[10:25:32.749]             {
[10:25:32.749]                 if (base::length(...future.futureOptionsAdded) > 
[10:25:32.749]                   0L) {
[10:25:32.749]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:25:32.749]                   base::names(opts) <- ...future.futureOptionsAdded
[10:25:32.749]                   base::options(opts)
[10:25:32.749]                 }
[10:25:32.749]                 {
[10:25:32.749]                   {
[10:25:32.749]                     base::options(mc.cores = ...future.mc.cores.old)
[10:25:32.749]                     NULL
[10:25:32.749]                   }
[10:25:32.749]                   options(future.plan = NULL)
[10:25:32.749]                   if (is.na(NA_character_)) 
[10:25:32.749]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:25:32.749]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:25:32.749]                   future::plan(list(function (..., workers = availableCores(constraints = "multicore"), 
[10:25:32.749]                     envir = parent.frame()) 
[10:25:32.749]                   {
[10:25:32.749]                     default_workers <- missing(workers)
[10:25:32.749]                     if (is.function(workers)) 
[10:25:32.749]                       workers <- workers()
[10:25:32.749]                     workers <- structure(as.integer(workers), 
[10:25:32.749]                       class = class(workers))
[10:25:32.749]                     stop_if_not(is.finite(workers), workers >= 
[10:25:32.749]                       1L)
[10:25:32.749]                     if ((workers == 1L && !inherits(workers, 
[10:25:32.749]                       "AsIs")) || !supportsMulticore(warn = TRUE)) {
[10:25:32.749]                       if (default_workers) 
[10:25:32.749]                         supportsMulticore(warn = TRUE)
[10:25:32.749]                       return(sequential(..., envir = envir))
[10:25:32.749]                     }
[10:25:32.749]                     oopts <- options(mc.cores = workers)
[10:25:32.749]                     on.exit(options(oopts))
[10:25:32.749]                     future <- MulticoreFuture(..., workers = workers, 
[10:25:32.749]                       envir = envir)
[10:25:32.749]                     if (!future$lazy) 
[10:25:32.749]                       future <- run(future)
[10:25:32.749]                     invisible(future)
[10:25:32.749]                   }), .cleanup = FALSE, .init = FALSE)
[10:25:32.749]                 }
[10:25:32.749]             }
[10:25:32.749]         }
[10:25:32.749]     })
[10:25:32.749]     if (TRUE) {
[10:25:32.749]         base::sink(type = "output", split = FALSE)
[10:25:32.749]         if (TRUE) {
[10:25:32.749]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:25:32.749]         }
[10:25:32.749]         else {
[10:25:32.749]             ...future.result["stdout"] <- base::list(NULL)
[10:25:32.749]         }
[10:25:32.749]         base::close(...future.stdout)
[10:25:32.749]         ...future.stdout <- NULL
[10:25:32.749]     }
[10:25:32.749]     ...future.result$conditions <- ...future.conditions
[10:25:32.749]     ...future.result$finished <- base::Sys.time()
[10:25:32.749]     ...future.result
[10:25:32.749] }
[10:25:32.752] requestCore(): workers = 2
[10:25:32.754] MulticoreFuture started
[10:25:32.754] - Launch lazy future ... done
[10:25:32.754] run() for ‘MulticoreFuture’ ... done
MulticoreFuture:
Label: ‘<none>’
Expression:
[1] 42
Lazy evaluation: FALSE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
[10:25:32.755] plan(): Setting new future strategy stack:
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[10:25:32.755] List of future strategies:
[10:25:32.755] 1. sequential:
[10:25:32.755]    - args: function (..., envir = parent.frame())
[10:25:32.755]    - tweaked: FALSE
[10:25:32.755]    - call: NULL
[10:25:32.756] plan(): nbrOfWorkers() = 1
[10:25:32.758] plan(): Setting new future strategy stack:
[10:25:32.758] List of future strategies:
[10:25:32.758] 1. multicore:
[10:25:32.758]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[10:25:32.758]    - tweaked: FALSE
[10:25:32.758]    - call: plan(strategy)
[10:25:32.763] plan(): nbrOfWorkers() = 2
Resolved: TRUE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: 378a73a7-17bc-11e5-cdc3-65eb29aceac6
Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[10:25:32.764] result() for MulticoreFuture ...
[10:25:32.765] result() for MulticoreFuture ...
[10:25:32.765] result() for MulticoreFuture ... done
[10:25:32.765] result() for MulticoreFuture ... done
[10:25:32.765] result() for MulticoreFuture ...
[10:25:32.766] result() for MulticoreFuture ... done
[10:25:32.766] getGlobalsAndPackages() ...
[10:25:32.766] Searching for globals...
[10:25:32.767] - globals found: [1] ‘{’
[10:25:32.767] Searching for globals ... DONE
[10:25:32.767] Resolving globals: FALSE
[10:25:32.768] 
[10:25:32.768] 
[10:25:32.768] getGlobalsAndPackages() ... DONE
[10:25:32.768] run() for ‘Future’ ...
[10:25:32.768] - state: ‘created’
[10:25:32.769] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:25:32.773] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[10:25:32.773] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[10:25:32.773]   - Field: ‘label’
[10:25:32.773]   - Field: ‘local’
[10:25:32.773]   - Field: ‘owner’
[10:25:32.773]   - Field: ‘envir’
[10:25:32.774]   - Field: ‘workers’
[10:25:32.774]   - Field: ‘packages’
[10:25:32.774]   - Field: ‘gc’
[10:25:32.774]   - Field: ‘job’
[10:25:32.774]   - Field: ‘conditions’
[10:25:32.774]   - Field: ‘expr’
[10:25:32.774]   - Field: ‘uuid’
[10:25:32.774]   - Field: ‘seed’
[10:25:32.774]   - Field: ‘version’
[10:25:32.775]   - Field: ‘result’
[10:25:32.775]   - Field: ‘asynchronous’
[10:25:32.775]   - Field: ‘calls’
[10:25:32.775]   - Field: ‘globals’
[10:25:32.775]   - Field: ‘stdout’
[10:25:32.775]   - Field: ‘earlySignal’
[10:25:32.775]   - Field: ‘lazy’
[10:25:32.775]   - Field: ‘state’
[10:25:32.775] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[10:25:32.776] - Launch lazy future ...
[10:25:32.776] Packages needed by the future expression (n = 0): <none>
[10:25:32.776] Packages needed by future strategies (n = 0): <none>
[10:25:32.777] {
[10:25:32.777]     {
[10:25:32.777]         {
[10:25:32.777]             ...future.startTime <- base::Sys.time()
[10:25:32.777]             {
[10:25:32.777]                 {
[10:25:32.777]                   {
[10:25:32.777]                     {
[10:25:32.777]                       base::local({
[10:25:32.777]                         has_future <- base::requireNamespace("future", 
[10:25:32.777]                           quietly = TRUE)
[10:25:32.777]                         if (has_future) {
[10:25:32.777]                           ns <- base::getNamespace("future")
[10:25:32.777]                           version <- ns[[".package"]][["version"]]
[10:25:32.777]                           if (is.null(version)) 
[10:25:32.777]                             version <- utils::packageVersion("future")
[10:25:32.777]                         }
[10:25:32.777]                         else {
[10:25:32.777]                           version <- NULL
[10:25:32.777]                         }
[10:25:32.777]                         if (!has_future || version < "1.8.0") {
[10:25:32.777]                           info <- base::c(r_version = base::gsub("R version ", 
[10:25:32.777]                             "", base::R.version$version.string), 
[10:25:32.777]                             platform = base::sprintf("%s (%s-bit)", 
[10:25:32.777]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:25:32.777]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[10:25:32.777]                               "release", "version")], collapse = " "), 
[10:25:32.777]                             hostname = base::Sys.info()[["nodename"]])
[10:25:32.777]                           info <- base::sprintf("%s: %s", base::names(info), 
[10:25:32.777]                             info)
[10:25:32.777]                           info <- base::paste(info, collapse = "; ")
[10:25:32.777]                           if (!has_future) {
[10:25:32.777]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:25:32.777]                               info)
[10:25:32.777]                           }
[10:25:32.777]                           else {
[10:25:32.777]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:25:32.777]                               info, version)
[10:25:32.777]                           }
[10:25:32.777]                           base::stop(msg)
[10:25:32.777]                         }
[10:25:32.777]                       })
[10:25:32.777]                     }
[10:25:32.777]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[10:25:32.777]                     base::options(mc.cores = 1L)
[10:25:32.777]                   }
[10:25:32.777]                   options(future.plan = NULL)
[10:25:32.777]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:25:32.777]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:25:32.777]                 }
[10:25:32.777]                 ...future.workdir <- getwd()
[10:25:32.777]             }
[10:25:32.777]             ...future.oldOptions <- base::as.list(base::.Options)
[10:25:32.777]             ...future.oldEnvVars <- base::Sys.getenv()
[10:25:32.777]         }
[10:25:32.777]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:25:32.777]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[10:25:32.777]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:25:32.777]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:25:32.777]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:25:32.777]             future.stdout.windows.reencode = NULL, width = 80L)
[10:25:32.777]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:25:32.777]             base::names(...future.oldOptions))
[10:25:32.777]     }
[10:25:32.777]     if (FALSE) {
[10:25:32.777]     }
[10:25:32.777]     else {
[10:25:32.777]         if (TRUE) {
[10:25:32.777]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:25:32.777]                 open = "w")
[10:25:32.777]         }
[10:25:32.777]         else {
[10:25:32.777]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:25:32.777]                 windows = "NUL", "/dev/null"), open = "w")
[10:25:32.777]         }
[10:25:32.777]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:25:32.777]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:25:32.777]             base::sink(type = "output", split = FALSE)
[10:25:32.777]             base::close(...future.stdout)
[10:25:32.777]         }, add = TRUE)
[10:25:32.777]     }
[10:25:32.777]     ...future.frame <- base::sys.nframe()
[10:25:32.777]     ...future.conditions <- base::list()
[10:25:32.777]     ...future.rng <- base::globalenv()$.Random.seed
[10:25:32.777]     if (FALSE) {
[10:25:32.777]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:25:32.777]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:25:32.777]     }
[10:25:32.777]     ...future.result <- base::tryCatch({
[10:25:32.777]         base::withCallingHandlers({
[10:25:32.777]             ...future.value <- base::withVisible(base::local({
[10:25:32.777]                 withCallingHandlers({
[10:25:32.777]                   {
[10:25:32.777]                     42
[10:25:32.777]                   }
[10:25:32.777]                 }, immediateCondition = function(cond) {
[10:25:32.777]                   save_rds <- function (object, pathname, ...) 
[10:25:32.777]                   {
[10:25:32.777]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[10:25:32.777]                     if (file_test("-f", pathname_tmp)) {
[10:25:32.777]                       fi_tmp <- file.info(pathname_tmp)
[10:25:32.777]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[10:25:32.777]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[10:25:32.777]                         fi_tmp[["mtime"]])
[10:25:32.777]                     }
[10:25:32.777]                     tryCatch({
[10:25:32.777]                       saveRDS(object, file = pathname_tmp, ...)
[10:25:32.777]                     }, error = function(ex) {
[10:25:32.777]                       msg <- conditionMessage(ex)
[10:25:32.777]                       fi_tmp <- file.info(pathname_tmp)
[10:25:32.777]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[10:25:32.777]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[10:25:32.777]                         fi_tmp[["mtime"]], msg)
[10:25:32.777]                       ex$message <- msg
[10:25:32.777]                       stop(ex)
[10:25:32.777]                     })
[10:25:32.777]                     stopifnot(file_test("-f", pathname_tmp))
[10:25:32.777]                     res <- file.rename(from = pathname_tmp, to = pathname)
[10:25:32.777]                     if (!res || file_test("-f", pathname_tmp)) {
[10:25:32.777]                       fi_tmp <- file.info(pathname_tmp)
[10:25:32.777]                       fi <- file.info(pathname)
[10:25:32.777]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[10:25:32.777]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[10:25:32.777]                         fi_tmp[["mtime"]], sQuote(pathname), 
[10:25:32.777]                         fi[["size"]], fi[["mtime"]])
[10:25:32.777]                       stop(msg)
[10:25:32.777]                     }
[10:25:32.777]                     invisible(pathname)
[10:25:32.777]                   }
[10:25:32.777]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[10:25:32.777]                     rootPath = tempdir()) 
[10:25:32.777]                   {
[10:25:32.777]                     obj <- list(time = Sys.time(), condition = cond)
[10:25:32.777]                     file <- tempfile(pattern = class(cond)[1], 
[10:25:32.777]                       tmpdir = path, fileext = ".rds")
[10:25:32.777]                     save_rds(obj, file)
[10:25:32.777]                   }
[10:25:32.777]                   saveImmediateCondition(cond, path = "/tmp/RtmpZe8BxD/.future/immediateConditions")
[10:25:32.777]                   muffleCondition <- function (cond, pattern = "^muffle") 
[10:25:32.777]                   {
[10:25:32.777]                     inherits <- base::inherits
[10:25:32.777]                     invokeRestart <- base::invokeRestart
[10:25:32.777]                     is.null <- base::is.null
[10:25:32.777]                     muffled <- FALSE
[10:25:32.777]                     if (inherits(cond, "message")) {
[10:25:32.777]                       muffled <- grepl(pattern, "muffleMessage")
[10:25:32.777]                       if (muffled) 
[10:25:32.777]                         invokeRestart("muffleMessage")
[10:25:32.777]                     }
[10:25:32.777]                     else if (inherits(cond, "warning")) {
[10:25:32.777]                       muffled <- grepl(pattern, "muffleWarning")
[10:25:32.777]                       if (muffled) 
[10:25:32.777]                         invokeRestart("muffleWarning")
[10:25:32.777]                     }
[10:25:32.777]                     else if (inherits(cond, "condition")) {
[10:25:32.777]                       if (!is.null(pattern)) {
[10:25:32.777]                         computeRestarts <- base::computeRestarts
[10:25:32.777]                         grepl <- base::grepl
[10:25:32.777]                         restarts <- computeRestarts(cond)
[10:25:32.777]                         for (restart in restarts) {
[10:25:32.777]                           name <- restart$name
[10:25:32.777]                           if (is.null(name)) 
[10:25:32.777]                             next
[10:25:32.777]                           if (!grepl(pattern, name)) 
[10:25:32.777]                             next
[10:25:32.777]                           invokeRestart(restart)
[10:25:32.777]                           muffled <- TRUE
[10:25:32.777]                           break
[10:25:32.777]                         }
[10:25:32.777]                       }
[10:25:32.777]                     }
[10:25:32.777]                     invisible(muffled)
[10:25:32.777]                   }
[10:25:32.777]                   muffleCondition(cond)
[10:25:32.777]                 })
[10:25:32.777]             }))
[10:25:32.777]             future::FutureResult(value = ...future.value$value, 
[10:25:32.777]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:25:32.777]                   ...future.rng), globalenv = if (FALSE) 
[10:25:32.777]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:25:32.777]                     ...future.globalenv.names))
[10:25:32.777]                 else NULL, started = ...future.startTime, version = "1.8")
[10:25:32.777]         }, condition = base::local({
[10:25:32.777]             c <- base::c
[10:25:32.777]             inherits <- base::inherits
[10:25:32.777]             invokeRestart <- base::invokeRestart
[10:25:32.777]             length <- base::length
[10:25:32.777]             list <- base::list
[10:25:32.777]             seq.int <- base::seq.int
[10:25:32.777]             signalCondition <- base::signalCondition
[10:25:32.777]             sys.calls <- base::sys.calls
[10:25:32.777]             `[[` <- base::`[[`
[10:25:32.777]             `+` <- base::`+`
[10:25:32.777]             `<<-` <- base::`<<-`
[10:25:32.777]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:25:32.777]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:25:32.777]                   3L)]
[10:25:32.777]             }
[10:25:32.777]             function(cond) {
[10:25:32.777]                 is_error <- inherits(cond, "error")
[10:25:32.777]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:25:32.777]                   NULL)
[10:25:32.777]                 if (is_error) {
[10:25:32.777]                   sessionInformation <- function() {
[10:25:32.777]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:25:32.777]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:25:32.777]                       search = base::search(), system = base::Sys.info())
[10:25:32.777]                   }
[10:25:32.777]                   ...future.conditions[[length(...future.conditions) + 
[10:25:32.777]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:25:32.777]                     cond$call), session = sessionInformation(), 
[10:25:32.777]                     timestamp = base::Sys.time(), signaled = 0L)
[10:25:32.777]                   signalCondition(cond)
[10:25:32.777]                 }
[10:25:32.777]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:25:32.777]                 "immediateCondition"))) {
[10:25:32.777]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:25:32.777]                   ...future.conditions[[length(...future.conditions) + 
[10:25:32.777]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:25:32.777]                   if (TRUE && !signal) {
[10:25:32.777]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:25:32.777]                     {
[10:25:32.777]                       inherits <- base::inherits
[10:25:32.777]                       invokeRestart <- base::invokeRestart
[10:25:32.777]                       is.null <- base::is.null
[10:25:32.777]                       muffled <- FALSE
[10:25:32.777]                       if (inherits(cond, "message")) {
[10:25:32.777]                         muffled <- grepl(pattern, "muffleMessage")
[10:25:32.777]                         if (muffled) 
[10:25:32.777]                           invokeRestart("muffleMessage")
[10:25:32.777]                       }
[10:25:32.777]                       else if (inherits(cond, "warning")) {
[10:25:32.777]                         muffled <- grepl(pattern, "muffleWarning")
[10:25:32.777]                         if (muffled) 
[10:25:32.777]                           invokeRestart("muffleWarning")
[10:25:32.777]                       }
[10:25:32.777]                       else if (inherits(cond, "condition")) {
[10:25:32.777]                         if (!is.null(pattern)) {
[10:25:32.777]                           computeRestarts <- base::computeRestarts
[10:25:32.777]                           grepl <- base::grepl
[10:25:32.777]                           restarts <- computeRestarts(cond)
[10:25:32.777]                           for (restart in restarts) {
[10:25:32.777]                             name <- restart$name
[10:25:32.777]                             if (is.null(name)) 
[10:25:32.777]                               next
[10:25:32.777]                             if (!grepl(pattern, name)) 
[10:25:32.777]                               next
[10:25:32.777]                             invokeRestart(restart)
[10:25:32.777]                             muffled <- TRUE
[10:25:32.777]                             break
[10:25:32.777]                           }
[10:25:32.777]                         }
[10:25:32.777]                       }
[10:25:32.777]                       invisible(muffled)
[10:25:32.777]                     }
[10:25:32.777]                     muffleCondition(cond, pattern = "^muffle")
[10:25:32.777]                   }
[10:25:32.777]                 }
[10:25:32.777]                 else {
[10:25:32.777]                   if (TRUE) {
[10:25:32.777]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:25:32.777]                     {
[10:25:32.777]                       inherits <- base::inherits
[10:25:32.777]                       invokeRestart <- base::invokeRestart
[10:25:32.777]                       is.null <- base::is.null
[10:25:32.777]                       muffled <- FALSE
[10:25:32.777]                       if (inherits(cond, "message")) {
[10:25:32.777]                         muffled <- grepl(pattern, "muffleMessage")
[10:25:32.777]                         if (muffled) 
[10:25:32.777]                           invokeRestart("muffleMessage")
[10:25:32.777]                       }
[10:25:32.777]                       else if (inherits(cond, "warning")) {
[10:25:32.777]                         muffled <- grepl(pattern, "muffleWarning")
[10:25:32.777]                         if (muffled) 
[10:25:32.777]                           invokeRestart("muffleWarning")
[10:25:32.777]                       }
[10:25:32.777]                       else if (inherits(cond, "condition")) {
[10:25:32.777]                         if (!is.null(pattern)) {
[10:25:32.777]                           computeRestarts <- base::computeRestarts
[10:25:32.777]                           grepl <- base::grepl
[10:25:32.777]                           restarts <- computeRestarts(cond)
[10:25:32.777]                           for (restart in restarts) {
[10:25:32.777]                             name <- restart$name
[10:25:32.777]                             if (is.null(name)) 
[10:25:32.777]                               next
[10:25:32.777]                             if (!grepl(pattern, name)) 
[10:25:32.777]                               next
[10:25:32.777]                             invokeRestart(restart)
[10:25:32.777]                             muffled <- TRUE
[10:25:32.777]                             break
[10:25:32.777]                           }
[10:25:32.777]                         }
[10:25:32.777]                       }
[10:25:32.777]                       invisible(muffled)
[10:25:32.777]                     }
[10:25:32.777]                     muffleCondition(cond, pattern = "^muffle")
[10:25:32.777]                   }
[10:25:32.777]                 }
[10:25:32.777]             }
[10:25:32.777]         }))
[10:25:32.777]     }, error = function(ex) {
[10:25:32.777]         base::structure(base::list(value = NULL, visible = NULL, 
[10:25:32.777]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:25:32.777]                 ...future.rng), started = ...future.startTime, 
[10:25:32.777]             finished = Sys.time(), session_uuid = NA_character_, 
[10:25:32.777]             version = "1.8"), class = "FutureResult")
[10:25:32.777]     }, finally = {
[10:25:32.777]         if (!identical(...future.workdir, getwd())) 
[10:25:32.777]             setwd(...future.workdir)
[10:25:32.777]         {
[10:25:32.777]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:25:32.777]                 ...future.oldOptions$nwarnings <- NULL
[10:25:32.777]             }
[10:25:32.777]             base::options(...future.oldOptions)
[10:25:32.777]             if (.Platform$OS.type == "windows") {
[10:25:32.777]                 old_names <- names(...future.oldEnvVars)
[10:25:32.777]                 envs <- base::Sys.getenv()
[10:25:32.777]                 names <- names(envs)
[10:25:32.777]                 common <- intersect(names, old_names)
[10:25:32.777]                 added <- setdiff(names, old_names)
[10:25:32.777]                 removed <- setdiff(old_names, names)
[10:25:32.777]                 changed <- common[...future.oldEnvVars[common] != 
[10:25:32.777]                   envs[common]]
[10:25:32.777]                 NAMES <- toupper(changed)
[10:25:32.777]                 args <- list()
[10:25:32.777]                 for (kk in seq_along(NAMES)) {
[10:25:32.777]                   name <- changed[[kk]]
[10:25:32.777]                   NAME <- NAMES[[kk]]
[10:25:32.777]                   if (name != NAME && is.element(NAME, old_names)) 
[10:25:32.777]                     next
[10:25:32.777]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:25:32.777]                 }
[10:25:32.777]                 NAMES <- toupper(added)
[10:25:32.777]                 for (kk in seq_along(NAMES)) {
[10:25:32.777]                   name <- added[[kk]]
[10:25:32.777]                   NAME <- NAMES[[kk]]
[10:25:32.777]                   if (name != NAME && is.element(NAME, old_names)) 
[10:25:32.777]                     next
[10:25:32.777]                   args[[name]] <- ""
[10:25:32.777]                 }
[10:25:32.777]                 NAMES <- toupper(removed)
[10:25:32.777]                 for (kk in seq_along(NAMES)) {
[10:25:32.777]                   name <- removed[[kk]]
[10:25:32.777]                   NAME <- NAMES[[kk]]
[10:25:32.777]                   if (name != NAME && is.element(NAME, old_names)) 
[10:25:32.777]                     next
[10:25:32.777]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:25:32.777]                 }
[10:25:32.777]                 if (length(args) > 0) 
[10:25:32.777]                   base::do.call(base::Sys.setenv, args = args)
[10:25:32.777]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:25:32.777]             }
[10:25:32.777]             else {
[10:25:32.777]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:25:32.777]             }
[10:25:32.777]             {
[10:25:32.777]                 if (base::length(...future.futureOptionsAdded) > 
[10:25:32.777]                   0L) {
[10:25:32.777]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:25:32.777]                   base::names(opts) <- ...future.futureOptionsAdded
[10:25:32.777]                   base::options(opts)
[10:25:32.777]                 }
[10:25:32.777]                 {
[10:25:32.777]                   {
[10:25:32.777]                     base::options(mc.cores = ...future.mc.cores.old)
[10:25:32.777]                     NULL
[10:25:32.777]                   }
[10:25:32.777]                   options(future.plan = NULL)
[10:25:32.777]                   if (is.na(NA_character_)) 
[10:25:32.777]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:25:32.777]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:25:32.777]                   future::plan(list(function (..., workers = availableCores(constraints = "multicore"), 
[10:25:32.777]                     envir = parent.frame()) 
[10:25:32.777]                   {
[10:25:32.777]                     default_workers <- missing(workers)
[10:25:32.777]                     if (is.function(workers)) 
[10:25:32.777]                       workers <- workers()
[10:25:32.777]                     workers <- structure(as.integer(workers), 
[10:25:32.777]                       class = class(workers))
[10:25:32.777]                     stop_if_not(is.finite(workers), workers >= 
[10:25:32.777]                       1L)
[10:25:32.777]                     if ((workers == 1L && !inherits(workers, 
[10:25:32.777]                       "AsIs")) || !supportsMulticore(warn = TRUE)) {
[10:25:32.777]                       if (default_workers) 
[10:25:32.777]                         supportsMulticore(warn = TRUE)
[10:25:32.777]                       return(sequential(..., envir = envir))
[10:25:32.777]                     }
[10:25:32.777]                     oopts <- options(mc.cores = workers)
[10:25:32.777]                     on.exit(options(oopts))
[10:25:32.777]                     future <- MulticoreFuture(..., workers = workers, 
[10:25:32.777]                       envir = envir)
[10:25:32.777]                     if (!future$lazy) 
[10:25:32.777]                       future <- run(future)
[10:25:32.777]                     invisible(future)
[10:25:32.777]                   }), .cleanup = FALSE, .init = FALSE)
[10:25:32.777]                 }
[10:25:32.777]             }
[10:25:32.777]         }
[10:25:32.777]     })
[10:25:32.777]     if (TRUE) {
[10:25:32.777]         base::sink(type = "output", split = FALSE)
[10:25:32.777]         if (TRUE) {
[10:25:32.777]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:25:32.777]         }
[10:25:32.777]         else {
[10:25:32.777]             ...future.result["stdout"] <- base::list(NULL)
[10:25:32.777]         }
[10:25:32.777]         base::close(...future.stdout)
[10:25:32.777]         ...future.stdout <- NULL
[10:25:32.777]     }
[10:25:32.777]     ...future.result$conditions <- ...future.conditions
[10:25:32.777]     ...future.result$finished <- base::Sys.time()
[10:25:32.777]     ...future.result
[10:25:32.777] }
[10:25:32.779] requestCore(): workers = 2
[10:25:32.781] MulticoreFuture started
[10:25:32.781] - Launch lazy future ... done
[10:25:32.782] run() for ‘MulticoreFuture’ ... done
MulticoreFuture:
Label: ‘<none>’
Expression:
[10:25:32.782] plan(): Setting new future strategy stack:
{
    42
}
Lazy evaluation: FALSE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[10:25:32.782] List of future strategies:
[10:25:32.782] 1. sequential:
[10:25:32.782]    - args: function (..., envir = parent.frame())
[10:25:32.782]    - tweaked: FALSE
[10:25:32.782]    - call: NULL
[10:25:32.783] plan(): nbrOfWorkers() = 1
[10:25:32.785] plan(): Setting new future strategy stack:
[10:25:32.785] List of future strategies:
[10:25:32.785] 1. multicore:
[10:25:32.785]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[10:25:32.785]    - tweaked: FALSE
[10:25:32.785]    - call: plan(strategy)
[10:25:32.790] plan(): nbrOfWorkers() = 2
Resolved: TRUE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: 378a73a7-17bc-11e5-cdc3-65eb29aceac6
Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[10:25:32.791] result() for MulticoreFuture ...
[10:25:32.791] result() for MulticoreFuture ...
[10:25:32.792] result() for MulticoreFuture ... done
[10:25:32.792] result() for MulticoreFuture ... done
[10:25:32.792] result() for MulticoreFuture ...
[10:25:32.792] result() for MulticoreFuture ... done
[10:25:32.796] getGlobalsAndPackages() ...
[10:25:32.797] 
[10:25:32.797] - globals: [0] <none>
[10:25:32.797] getGlobalsAndPackages() ... DONE
[10:25:32.797] Packages needed by the future expression (n = 0): <none>
[10:25:32.798] Packages needed by future strategies (n = 0): <none>
[10:25:32.798] {
[10:25:32.798]     {
[10:25:32.798]         {
[10:25:32.798]             ...future.startTime <- base::Sys.time()
[10:25:32.798]             {
[10:25:32.798]                 {
[10:25:32.798]                   {
[10:25:32.798]                     {
[10:25:32.798]                       base::local({
[10:25:32.798]                         has_future <- base::requireNamespace("future", 
[10:25:32.798]                           quietly = TRUE)
[10:25:32.798]                         if (has_future) {
[10:25:32.798]                           ns <- base::getNamespace("future")
[10:25:32.798]                           version <- ns[[".package"]][["version"]]
[10:25:32.798]                           if (is.null(version)) 
[10:25:32.798]                             version <- utils::packageVersion("future")
[10:25:32.798]                         }
[10:25:32.798]                         else {
[10:25:32.798]                           version <- NULL
[10:25:32.798]                         }
[10:25:32.798]                         if (!has_future || version < "1.8.0") {
[10:25:32.798]                           info <- base::c(r_version = base::gsub("R version ", 
[10:25:32.798]                             "", base::R.version$version.string), 
[10:25:32.798]                             platform = base::sprintf("%s (%s-bit)", 
[10:25:32.798]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:25:32.798]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[10:25:32.798]                               "release", "version")], collapse = " "), 
[10:25:32.798]                             hostname = base::Sys.info()[["nodename"]])
[10:25:32.798]                           info <- base::sprintf("%s: %s", base::names(info), 
[10:25:32.798]                             info)
[10:25:32.798]                           info <- base::paste(info, collapse = "; ")
[10:25:32.798]                           if (!has_future) {
[10:25:32.798]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:25:32.798]                               info)
[10:25:32.798]                           }
[10:25:32.798]                           else {
[10:25:32.798]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:25:32.798]                               info, version)
[10:25:32.798]                           }
[10:25:32.798]                           base::stop(msg)
[10:25:32.798]                         }
[10:25:32.798]                       })
[10:25:32.798]                     }
[10:25:32.798]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[10:25:32.798]                     base::options(mc.cores = 1L)
[10:25:32.798]                   }
[10:25:32.798]                   options(future.plan = NULL)
[10:25:32.798]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:25:32.798]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:25:32.798]                 }
[10:25:32.798]                 ...future.workdir <- getwd()
[10:25:32.798]             }
[10:25:32.798]             ...future.oldOptions <- base::as.list(base::.Options)
[10:25:32.798]             ...future.oldEnvVars <- base::Sys.getenv()
[10:25:32.798]         }
[10:25:32.798]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:25:32.798]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[10:25:32.798]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:25:32.798]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:25:32.798]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:25:32.798]             future.stdout.windows.reencode = NULL, width = 80L)
[10:25:32.798]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:25:32.798]             base::names(...future.oldOptions))
[10:25:32.798]     }
[10:25:32.798]     if (FALSE) {
[10:25:32.798]     }
[10:25:32.798]     else {
[10:25:32.798]         if (TRUE) {
[10:25:32.798]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:25:32.798]                 open = "w")
[10:25:32.798]         }
[10:25:32.798]         else {
[10:25:32.798]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:25:32.798]                 windows = "NUL", "/dev/null"), open = "w")
[10:25:32.798]         }
[10:25:32.798]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:25:32.798]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:25:32.798]             base::sink(type = "output", split = FALSE)
[10:25:32.798]             base::close(...future.stdout)
[10:25:32.798]         }, add = TRUE)
[10:25:32.798]     }
[10:25:32.798]     ...future.frame <- base::sys.nframe()
[10:25:32.798]     ...future.conditions <- base::list()
[10:25:32.798]     ...future.rng <- base::globalenv()$.Random.seed
[10:25:32.798]     if (FALSE) {
[10:25:32.798]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:25:32.798]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:25:32.798]     }
[10:25:32.798]     ...future.result <- base::tryCatch({
[10:25:32.798]         base::withCallingHandlers({
[10:25:32.798]             ...future.value <- base::withVisible(base::local({
[10:25:32.798]                 withCallingHandlers({
[10:25:32.798]                   42
[10:25:32.798]                 }, immediateCondition = function(cond) {
[10:25:32.798]                   save_rds <- function (object, pathname, ...) 
[10:25:32.798]                   {
[10:25:32.798]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[10:25:32.798]                     if (file_test("-f", pathname_tmp)) {
[10:25:32.798]                       fi_tmp <- file.info(pathname_tmp)
[10:25:32.798]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[10:25:32.798]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[10:25:32.798]                         fi_tmp[["mtime"]])
[10:25:32.798]                     }
[10:25:32.798]                     tryCatch({
[10:25:32.798]                       saveRDS(object, file = pathname_tmp, ...)
[10:25:32.798]                     }, error = function(ex) {
[10:25:32.798]                       msg <- conditionMessage(ex)
[10:25:32.798]                       fi_tmp <- file.info(pathname_tmp)
[10:25:32.798]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[10:25:32.798]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[10:25:32.798]                         fi_tmp[["mtime"]], msg)
[10:25:32.798]                       ex$message <- msg
[10:25:32.798]                       stop(ex)
[10:25:32.798]                     })
[10:25:32.798]                     stopifnot(file_test("-f", pathname_tmp))
[10:25:32.798]                     res <- file.rename(from = pathname_tmp, to = pathname)
[10:25:32.798]                     if (!res || file_test("-f", pathname_tmp)) {
[10:25:32.798]                       fi_tmp <- file.info(pathname_tmp)
[10:25:32.798]                       fi <- file.info(pathname)
[10:25:32.798]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[10:25:32.798]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[10:25:32.798]                         fi_tmp[["mtime"]], sQuote(pathname), 
[10:25:32.798]                         fi[["size"]], fi[["mtime"]])
[10:25:32.798]                       stop(msg)
[10:25:32.798]                     }
[10:25:32.798]                     invisible(pathname)
[10:25:32.798]                   }
[10:25:32.798]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[10:25:32.798]                     rootPath = tempdir()) 
[10:25:32.798]                   {
[10:25:32.798]                     obj <- list(time = Sys.time(), condition = cond)
[10:25:32.798]                     file <- tempfile(pattern = class(cond)[1], 
[10:25:32.798]                       tmpdir = path, fileext = ".rds")
[10:25:32.798]                     save_rds(obj, file)
[10:25:32.798]                   }
[10:25:32.798]                   saveImmediateCondition(cond, path = "/tmp/RtmpZe8BxD/.future/immediateConditions")
[10:25:32.798]                   muffleCondition <- function (cond, pattern = "^muffle") 
[10:25:32.798]                   {
[10:25:32.798]                     inherits <- base::inherits
[10:25:32.798]                     invokeRestart <- base::invokeRestart
[10:25:32.798]                     is.null <- base::is.null
[10:25:32.798]                     muffled <- FALSE
[10:25:32.798]                     if (inherits(cond, "message")) {
[10:25:32.798]                       muffled <- grepl(pattern, "muffleMessage")
[10:25:32.798]                       if (muffled) 
[10:25:32.798]                         invokeRestart("muffleMessage")
[10:25:32.798]                     }
[10:25:32.798]                     else if (inherits(cond, "warning")) {
[10:25:32.798]                       muffled <- grepl(pattern, "muffleWarning")
[10:25:32.798]                       if (muffled) 
[10:25:32.798]                         invokeRestart("muffleWarning")
[10:25:32.798]                     }
[10:25:32.798]                     else if (inherits(cond, "condition")) {
[10:25:32.798]                       if (!is.null(pattern)) {
[10:25:32.798]                         computeRestarts <- base::computeRestarts
[10:25:32.798]                         grepl <- base::grepl
[10:25:32.798]                         restarts <- computeRestarts(cond)
[10:25:32.798]                         for (restart in restarts) {
[10:25:32.798]                           name <- restart$name
[10:25:32.798]                           if (is.null(name)) 
[10:25:32.798]                             next
[10:25:32.798]                           if (!grepl(pattern, name)) 
[10:25:32.798]                             next
[10:25:32.798]                           invokeRestart(restart)
[10:25:32.798]                           muffled <- TRUE
[10:25:32.798]                           break
[10:25:32.798]                         }
[10:25:32.798]                       }
[10:25:32.798]                     }
[10:25:32.798]                     invisible(muffled)
[10:25:32.798]                   }
[10:25:32.798]                   muffleCondition(cond)
[10:25:32.798]                 })
[10:25:32.798]             }))
[10:25:32.798]             future::FutureResult(value = ...future.value$value, 
[10:25:32.798]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:25:32.798]                   ...future.rng), globalenv = if (FALSE) 
[10:25:32.798]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:25:32.798]                     ...future.globalenv.names))
[10:25:32.798]                 else NULL, started = ...future.startTime, version = "1.8")
[10:25:32.798]         }, condition = base::local({
[10:25:32.798]             c <- base::c
[10:25:32.798]             inherits <- base::inherits
[10:25:32.798]             invokeRestart <- base::invokeRestart
[10:25:32.798]             length <- base::length
[10:25:32.798]             list <- base::list
[10:25:32.798]             seq.int <- base::seq.int
[10:25:32.798]             signalCondition <- base::signalCondition
[10:25:32.798]             sys.calls <- base::sys.calls
[10:25:32.798]             `[[` <- base::`[[`
[10:25:32.798]             `+` <- base::`+`
[10:25:32.798]             `<<-` <- base::`<<-`
[10:25:32.798]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:25:32.798]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:25:32.798]                   3L)]
[10:25:32.798]             }
[10:25:32.798]             function(cond) {
[10:25:32.798]                 is_error <- inherits(cond, "error")
[10:25:32.798]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:25:32.798]                   NULL)
[10:25:32.798]                 if (is_error) {
[10:25:32.798]                   sessionInformation <- function() {
[10:25:32.798]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:25:32.798]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:25:32.798]                       search = base::search(), system = base::Sys.info())
[10:25:32.798]                   }
[10:25:32.798]                   ...future.conditions[[length(...future.conditions) + 
[10:25:32.798]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:25:32.798]                     cond$call), session = sessionInformation(), 
[10:25:32.798]                     timestamp = base::Sys.time(), signaled = 0L)
[10:25:32.798]                   signalCondition(cond)
[10:25:32.798]                 }
[10:25:32.798]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:25:32.798]                 "immediateCondition"))) {
[10:25:32.798]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:25:32.798]                   ...future.conditions[[length(...future.conditions) + 
[10:25:32.798]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:25:32.798]                   if (TRUE && !signal) {
[10:25:32.798]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:25:32.798]                     {
[10:25:32.798]                       inherits <- base::inherits
[10:25:32.798]                       invokeRestart <- base::invokeRestart
[10:25:32.798]                       is.null <- base::is.null
[10:25:32.798]                       muffled <- FALSE
[10:25:32.798]                       if (inherits(cond, "message")) {
[10:25:32.798]                         muffled <- grepl(pattern, "muffleMessage")
[10:25:32.798]                         if (muffled) 
[10:25:32.798]                           invokeRestart("muffleMessage")
[10:25:32.798]                       }
[10:25:32.798]                       else if (inherits(cond, "warning")) {
[10:25:32.798]                         muffled <- grepl(pattern, "muffleWarning")
[10:25:32.798]                         if (muffled) 
[10:25:32.798]                           invokeRestart("muffleWarning")
[10:25:32.798]                       }
[10:25:32.798]                       else if (inherits(cond, "condition")) {
[10:25:32.798]                         if (!is.null(pattern)) {
[10:25:32.798]                           computeRestarts <- base::computeRestarts
[10:25:32.798]                           grepl <- base::grepl
[10:25:32.798]                           restarts <- computeRestarts(cond)
[10:25:32.798]                           for (restart in restarts) {
[10:25:32.798]                             name <- restart$name
[10:25:32.798]                             if (is.null(name)) 
[10:25:32.798]                               next
[10:25:32.798]                             if (!grepl(pattern, name)) 
[10:25:32.798]                               next
[10:25:32.798]                             invokeRestart(restart)
[10:25:32.798]                             muffled <- TRUE
[10:25:32.798]                             break
[10:25:32.798]                           }
[10:25:32.798]                         }
[10:25:32.798]                       }
[10:25:32.798]                       invisible(muffled)
[10:25:32.798]                     }
[10:25:32.798]                     muffleCondition(cond, pattern = "^muffle")
[10:25:32.798]                   }
[10:25:32.798]                 }
[10:25:32.798]                 else {
[10:25:32.798]                   if (TRUE) {
[10:25:32.798]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:25:32.798]                     {
[10:25:32.798]                       inherits <- base::inherits
[10:25:32.798]                       invokeRestart <- base::invokeRestart
[10:25:32.798]                       is.null <- base::is.null
[10:25:32.798]                       muffled <- FALSE
[10:25:32.798]                       if (inherits(cond, "message")) {
[10:25:32.798]                         muffled <- grepl(pattern, "muffleMessage")
[10:25:32.798]                         if (muffled) 
[10:25:32.798]                           invokeRestart("muffleMessage")
[10:25:32.798]                       }
[10:25:32.798]                       else if (inherits(cond, "warning")) {
[10:25:32.798]                         muffled <- grepl(pattern, "muffleWarning")
[10:25:32.798]                         if (muffled) 
[10:25:32.798]                           invokeRestart("muffleWarning")
[10:25:32.798]                       }
[10:25:32.798]                       else if (inherits(cond, "condition")) {
[10:25:32.798]                         if (!is.null(pattern)) {
[10:25:32.798]                           computeRestarts <- base::computeRestarts
[10:25:32.798]                           grepl <- base::grepl
[10:25:32.798]                           restarts <- computeRestarts(cond)
[10:25:32.798]                           for (restart in restarts) {
[10:25:32.798]                             name <- restart$name
[10:25:32.798]                             if (is.null(name)) 
[10:25:32.798]                               next
[10:25:32.798]                             if (!grepl(pattern, name)) 
[10:25:32.798]                               next
[10:25:32.798]                             invokeRestart(restart)
[10:25:32.798]                             muffled <- TRUE
[10:25:32.798]                             break
[10:25:32.798]                           }
[10:25:32.798]                         }
[10:25:32.798]                       }
[10:25:32.798]                       invisible(muffled)
[10:25:32.798]                     }
[10:25:32.798]                     muffleCondition(cond, pattern = "^muffle")
[10:25:32.798]                   }
[10:25:32.798]                 }
[10:25:32.798]             }
[10:25:32.798]         }))
[10:25:32.798]     }, error = function(ex) {
[10:25:32.798]         base::structure(base::list(value = NULL, visible = NULL, 
[10:25:32.798]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:25:32.798]                 ...future.rng), started = ...future.startTime, 
[10:25:32.798]             finished = Sys.time(), session_uuid = NA_character_, 
[10:25:32.798]             version = "1.8"), class = "FutureResult")
[10:25:32.798]     }, finally = {
[10:25:32.798]         if (!identical(...future.workdir, getwd())) 
[10:25:32.798]             setwd(...future.workdir)
[10:25:32.798]         {
[10:25:32.798]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:25:32.798]                 ...future.oldOptions$nwarnings <- NULL
[10:25:32.798]             }
[10:25:32.798]             base::options(...future.oldOptions)
[10:25:32.798]             if (.Platform$OS.type == "windows") {
[10:25:32.798]                 old_names <- names(...future.oldEnvVars)
[10:25:32.798]                 envs <- base::Sys.getenv()
[10:25:32.798]                 names <- names(envs)
[10:25:32.798]                 common <- intersect(names, old_names)
[10:25:32.798]                 added <- setdiff(names, old_names)
[10:25:32.798]                 removed <- setdiff(old_names, names)
[10:25:32.798]                 changed <- common[...future.oldEnvVars[common] != 
[10:25:32.798]                   envs[common]]
[10:25:32.798]                 NAMES <- toupper(changed)
[10:25:32.798]                 args <- list()
[10:25:32.798]                 for (kk in seq_along(NAMES)) {
[10:25:32.798]                   name <- changed[[kk]]
[10:25:32.798]                   NAME <- NAMES[[kk]]
[10:25:32.798]                   if (name != NAME && is.element(NAME, old_names)) 
[10:25:32.798]                     next
[10:25:32.798]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:25:32.798]                 }
[10:25:32.798]                 NAMES <- toupper(added)
[10:25:32.798]                 for (kk in seq_along(NAMES)) {
[10:25:32.798]                   name <- added[[kk]]
[10:25:32.798]                   NAME <- NAMES[[kk]]
[10:25:32.798]                   if (name != NAME && is.element(NAME, old_names)) 
[10:25:32.798]                     next
[10:25:32.798]                   args[[name]] <- ""
[10:25:32.798]                 }
[10:25:32.798]                 NAMES <- toupper(removed)
[10:25:32.798]                 for (kk in seq_along(NAMES)) {
[10:25:32.798]                   name <- removed[[kk]]
[10:25:32.798]                   NAME <- NAMES[[kk]]
[10:25:32.798]                   if (name != NAME && is.element(NAME, old_names)) 
[10:25:32.798]                     next
[10:25:32.798]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:25:32.798]                 }
[10:25:32.798]                 if (length(args) > 0) 
[10:25:32.798]                   base::do.call(base::Sys.setenv, args = args)
[10:25:32.798]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:25:32.798]             }
[10:25:32.798]             else {
[10:25:32.798]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:25:32.798]             }
[10:25:32.798]             {
[10:25:32.798]                 if (base::length(...future.futureOptionsAdded) > 
[10:25:32.798]                   0L) {
[10:25:32.798]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:25:32.798]                   base::names(opts) <- ...future.futureOptionsAdded
[10:25:32.798]                   base::options(opts)
[10:25:32.798]                 }
[10:25:32.798]                 {
[10:25:32.798]                   {
[10:25:32.798]                     base::options(mc.cores = ...future.mc.cores.old)
[10:25:32.798]                     NULL
[10:25:32.798]                   }
[10:25:32.798]                   options(future.plan = NULL)
[10:25:32.798]                   if (is.na(NA_character_)) 
[10:25:32.798]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:25:32.798]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:25:32.798]                   future::plan(list(function (..., workers = availableCores(constraints = "multicore"), 
[10:25:32.798]                     envir = parent.frame()) 
[10:25:32.798]                   {
[10:25:32.798]                     default_workers <- missing(workers)
[10:25:32.798]                     if (is.function(workers)) 
[10:25:32.798]                       workers <- workers()
[10:25:32.798]                     workers <- structure(as.integer(workers), 
[10:25:32.798]                       class = class(workers))
[10:25:32.798]                     stop_if_not(is.finite(workers), workers >= 
[10:25:32.798]                       1L)
[10:25:32.798]                     if ((workers == 1L && !inherits(workers, 
[10:25:32.798]                       "AsIs")) || !supportsMulticore(warn = TRUE)) {
[10:25:32.798]                       if (default_workers) 
[10:25:32.798]                         supportsMulticore(warn = TRUE)
[10:25:32.798]                       return(sequential(..., envir = envir))
[10:25:32.798]                     }
[10:25:32.798]                     oopts <- options(mc.cores = workers)
[10:25:32.798]                     on.exit(options(oopts))
[10:25:32.798]                     future <- MulticoreFuture(..., workers = workers, 
[10:25:32.798]                       envir = envir)
[10:25:32.798]                     if (!future$lazy) 
[10:25:32.798]                       future <- run(future)
[10:25:32.798]                     invisible(future)
[10:25:32.798]                   }), .cleanup = FALSE, .init = FALSE)
[10:25:32.798]                 }
[10:25:32.798]             }
[10:25:32.798]         }
[10:25:32.798]     })
[10:25:32.798]     if (TRUE) {
[10:25:32.798]         base::sink(type = "output", split = FALSE)
[10:25:32.798]         if (TRUE) {
[10:25:32.798]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:25:32.798]         }
[10:25:32.798]         else {
[10:25:32.798]             ...future.result["stdout"] <- base::list(NULL)
[10:25:32.798]         }
[10:25:32.798]         base::close(...future.stdout)
[10:25:32.798]         ...future.stdout <- NULL
[10:25:32.798]     }
[10:25:32.798]     ...future.result$conditions <- ...future.conditions
[10:25:32.798]     ...future.result$finished <- base::Sys.time()
[10:25:32.798]     ...future.result
[10:25:32.798] }
[10:25:32.801] requestCore(): workers = 2
[10:25:32.803] MulticoreFuture started
MulticoreFuture:
Label: ‘strategy = multicore’
Expression:
[1] 42
Lazy evaluation: FALSE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[10:25:32.804] plan(): Setting new future strategy stack:
[10:25:32.804] List of future strategies:
[10:25:32.804] 1. sequential:
[10:25:32.804]    - args: function (..., envir = parent.frame())
[10:25:32.804]    - tweaked: FALSE
[10:25:32.804]    - call: NULL
[10:25:32.805] plan(): nbrOfWorkers() = 1
[10:25:32.807] plan(): Setting new future strategy stack:
[10:25:32.807] List of future strategies:
[10:25:32.807] 1. multicore:
[10:25:32.807]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[10:25:32.807]    - tweaked: FALSE
[10:25:32.807]    - call: plan(strategy)
[10:25:32.812] plan(): nbrOfWorkers() = 2
Resolved: TRUE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: 378a73a7-17bc-11e5-cdc3-65eb29aceac6
Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[10:25:32.812] result() for MulticoreFuture ...
[10:25:32.813] result() for MulticoreFuture ...
[10:25:32.814] result() for MulticoreFuture ... done
[10:25:32.814] result() for MulticoreFuture ... done
[10:25:32.814] result() for MulticoreFuture ...
[10:25:32.814] result() for MulticoreFuture ... done
[10:25:32.814] getGlobalsAndPackages() ...
[10:25:32.814] Searching for globals...
[10:25:32.815] 
[10:25:32.815] Searching for globals ... DONE
[10:25:32.815] - globals: [0] <none>
[10:25:32.815] getGlobalsAndPackages() ... DONE
[10:25:32.815] run() for ‘Future’ ...
[10:25:32.816] - state: ‘created’
[10:25:32.816] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:25:32.820] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[10:25:32.820] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[10:25:32.820]   - Field: ‘label’
[10:25:32.820]   - Field: ‘local’
[10:25:32.820]   - Field: ‘owner’
[10:25:32.820]   - Field: ‘envir’
[10:25:32.821]   - Field: ‘workers’
[10:25:32.821]   - Field: ‘packages’
[10:25:32.821]   - Field: ‘gc’
[10:25:32.821]   - Field: ‘job’
[10:25:32.821]   - Field: ‘conditions’
[10:25:32.821]   - Field: ‘expr’
[10:25:32.821]   - Field: ‘uuid’
[10:25:32.821]   - Field: ‘seed’
[10:25:32.822]   - Field: ‘version’
[10:25:32.822]   - Field: ‘result’
[10:25:32.822]   - Field: ‘asynchronous’
[10:25:32.822]   - Field: ‘calls’
[10:25:32.822]   - Field: ‘globals’
[10:25:32.822]   - Field: ‘stdout’
[10:25:32.822]   - Field: ‘earlySignal’
[10:25:32.822]   - Field: ‘lazy’
[10:25:32.822]   - Field: ‘state’
[10:25:32.823] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[10:25:32.823] - Launch lazy future ...
[10:25:32.823] Packages needed by the future expression (n = 0): <none>
[10:25:32.823] Packages needed by future strategies (n = 0): <none>
[10:25:32.824] {
[10:25:32.824]     {
[10:25:32.824]         {
[10:25:32.824]             ...future.startTime <- base::Sys.time()
[10:25:32.824]             {
[10:25:32.824]                 {
[10:25:32.824]                   {
[10:25:32.824]                     {
[10:25:32.824]                       base::local({
[10:25:32.824]                         has_future <- base::requireNamespace("future", 
[10:25:32.824]                           quietly = TRUE)
[10:25:32.824]                         if (has_future) {
[10:25:32.824]                           ns <- base::getNamespace("future")
[10:25:32.824]                           version <- ns[[".package"]][["version"]]
[10:25:32.824]                           if (is.null(version)) 
[10:25:32.824]                             version <- utils::packageVersion("future")
[10:25:32.824]                         }
[10:25:32.824]                         else {
[10:25:32.824]                           version <- NULL
[10:25:32.824]                         }
[10:25:32.824]                         if (!has_future || version < "1.8.0") {
[10:25:32.824]                           info <- base::c(r_version = base::gsub("R version ", 
[10:25:32.824]                             "", base::R.version$version.string), 
[10:25:32.824]                             platform = base::sprintf("%s (%s-bit)", 
[10:25:32.824]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:25:32.824]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[10:25:32.824]                               "release", "version")], collapse = " "), 
[10:25:32.824]                             hostname = base::Sys.info()[["nodename"]])
[10:25:32.824]                           info <- base::sprintf("%s: %s", base::names(info), 
[10:25:32.824]                             info)
[10:25:32.824]                           info <- base::paste(info, collapse = "; ")
[10:25:32.824]                           if (!has_future) {
[10:25:32.824]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:25:32.824]                               info)
[10:25:32.824]                           }
[10:25:32.824]                           else {
[10:25:32.824]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:25:32.824]                               info, version)
[10:25:32.824]                           }
[10:25:32.824]                           base::stop(msg)
[10:25:32.824]                         }
[10:25:32.824]                       })
[10:25:32.824]                     }
[10:25:32.824]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[10:25:32.824]                     base::options(mc.cores = 1L)
[10:25:32.824]                   }
[10:25:32.824]                   options(future.plan = NULL)
[10:25:32.824]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:25:32.824]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:25:32.824]                 }
[10:25:32.824]                 ...future.workdir <- getwd()
[10:25:32.824]             }
[10:25:32.824]             ...future.oldOptions <- base::as.list(base::.Options)
[10:25:32.824]             ...future.oldEnvVars <- base::Sys.getenv()
[10:25:32.824]         }
[10:25:32.824]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:25:32.824]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[10:25:32.824]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:25:32.824]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:25:32.824]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:25:32.824]             future.stdout.windows.reencode = NULL, width = 80L)
[10:25:32.824]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:25:32.824]             base::names(...future.oldOptions))
[10:25:32.824]     }
[10:25:32.824]     if (FALSE) {
[10:25:32.824]     }
[10:25:32.824]     else {
[10:25:32.824]         if (TRUE) {
[10:25:32.824]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:25:32.824]                 open = "w")
[10:25:32.824]         }
[10:25:32.824]         else {
[10:25:32.824]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:25:32.824]                 windows = "NUL", "/dev/null"), open = "w")
[10:25:32.824]         }
[10:25:32.824]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:25:32.824]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:25:32.824]             base::sink(type = "output", split = FALSE)
[10:25:32.824]             base::close(...future.stdout)
[10:25:32.824]         }, add = TRUE)
[10:25:32.824]     }
[10:25:32.824]     ...future.frame <- base::sys.nframe()
[10:25:32.824]     ...future.conditions <- base::list()
[10:25:32.824]     ...future.rng <- base::globalenv()$.Random.seed
[10:25:32.824]     if (FALSE) {
[10:25:32.824]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:25:32.824]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:25:32.824]     }
[10:25:32.824]     ...future.result <- base::tryCatch({
[10:25:32.824]         base::withCallingHandlers({
[10:25:32.824]             ...future.value <- base::withVisible(base::local({
[10:25:32.824]                 withCallingHandlers({
[10:25:32.824]                   42
[10:25:32.824]                 }, immediateCondition = function(cond) {
[10:25:32.824]                   save_rds <- function (object, pathname, ...) 
[10:25:32.824]                   {
[10:25:32.824]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[10:25:32.824]                     if (file_test("-f", pathname_tmp)) {
[10:25:32.824]                       fi_tmp <- file.info(pathname_tmp)
[10:25:32.824]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[10:25:32.824]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[10:25:32.824]                         fi_tmp[["mtime"]])
[10:25:32.824]                     }
[10:25:32.824]                     tryCatch({
[10:25:32.824]                       saveRDS(object, file = pathname_tmp, ...)
[10:25:32.824]                     }, error = function(ex) {
[10:25:32.824]                       msg <- conditionMessage(ex)
[10:25:32.824]                       fi_tmp <- file.info(pathname_tmp)
[10:25:32.824]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[10:25:32.824]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[10:25:32.824]                         fi_tmp[["mtime"]], msg)
[10:25:32.824]                       ex$message <- msg
[10:25:32.824]                       stop(ex)
[10:25:32.824]                     })
[10:25:32.824]                     stopifnot(file_test("-f", pathname_tmp))
[10:25:32.824]                     res <- file.rename(from = pathname_tmp, to = pathname)
[10:25:32.824]                     if (!res || file_test("-f", pathname_tmp)) {
[10:25:32.824]                       fi_tmp <- file.info(pathname_tmp)
[10:25:32.824]                       fi <- file.info(pathname)
[10:25:32.824]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[10:25:32.824]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[10:25:32.824]                         fi_tmp[["mtime"]], sQuote(pathname), 
[10:25:32.824]                         fi[["size"]], fi[["mtime"]])
[10:25:32.824]                       stop(msg)
[10:25:32.824]                     }
[10:25:32.824]                     invisible(pathname)
[10:25:32.824]                   }
[10:25:32.824]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[10:25:32.824]                     rootPath = tempdir()) 
[10:25:32.824]                   {
[10:25:32.824]                     obj <- list(time = Sys.time(), condition = cond)
[10:25:32.824]                     file <- tempfile(pattern = class(cond)[1], 
[10:25:32.824]                       tmpdir = path, fileext = ".rds")
[10:25:32.824]                     save_rds(obj, file)
[10:25:32.824]                   }
[10:25:32.824]                   saveImmediateCondition(cond, path = "/tmp/RtmpZe8BxD/.future/immediateConditions")
[10:25:32.824]                   muffleCondition <- function (cond, pattern = "^muffle") 
[10:25:32.824]                   {
[10:25:32.824]                     inherits <- base::inherits
[10:25:32.824]                     invokeRestart <- base::invokeRestart
[10:25:32.824]                     is.null <- base::is.null
[10:25:32.824]                     muffled <- FALSE
[10:25:32.824]                     if (inherits(cond, "message")) {
[10:25:32.824]                       muffled <- grepl(pattern, "muffleMessage")
[10:25:32.824]                       if (muffled) 
[10:25:32.824]                         invokeRestart("muffleMessage")
[10:25:32.824]                     }
[10:25:32.824]                     else if (inherits(cond, "warning")) {
[10:25:32.824]                       muffled <- grepl(pattern, "muffleWarning")
[10:25:32.824]                       if (muffled) 
[10:25:32.824]                         invokeRestart("muffleWarning")
[10:25:32.824]                     }
[10:25:32.824]                     else if (inherits(cond, "condition")) {
[10:25:32.824]                       if (!is.null(pattern)) {
[10:25:32.824]                         computeRestarts <- base::computeRestarts
[10:25:32.824]                         grepl <- base::grepl
[10:25:32.824]                         restarts <- computeRestarts(cond)
[10:25:32.824]                         for (restart in restarts) {
[10:25:32.824]                           name <- restart$name
[10:25:32.824]                           if (is.null(name)) 
[10:25:32.824]                             next
[10:25:32.824]                           if (!grepl(pattern, name)) 
[10:25:32.824]                             next
[10:25:32.824]                           invokeRestart(restart)
[10:25:32.824]                           muffled <- TRUE
[10:25:32.824]                           break
[10:25:32.824]                         }
[10:25:32.824]                       }
[10:25:32.824]                     }
[10:25:32.824]                     invisible(muffled)
[10:25:32.824]                   }
[10:25:32.824]                   muffleCondition(cond)
[10:25:32.824]                 })
[10:25:32.824]             }))
[10:25:32.824]             future::FutureResult(value = ...future.value$value, 
[10:25:32.824]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:25:32.824]                   ...future.rng), globalenv = if (FALSE) 
[10:25:32.824]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:25:32.824]                     ...future.globalenv.names))
[10:25:32.824]                 else NULL, started = ...future.startTime, version = "1.8")
[10:25:32.824]         }, condition = base::local({
[10:25:32.824]             c <- base::c
[10:25:32.824]             inherits <- base::inherits
[10:25:32.824]             invokeRestart <- base::invokeRestart
[10:25:32.824]             length <- base::length
[10:25:32.824]             list <- base::list
[10:25:32.824]             seq.int <- base::seq.int
[10:25:32.824]             signalCondition <- base::signalCondition
[10:25:32.824]             sys.calls <- base::sys.calls
[10:25:32.824]             `[[` <- base::`[[`
[10:25:32.824]             `+` <- base::`+`
[10:25:32.824]             `<<-` <- base::`<<-`
[10:25:32.824]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:25:32.824]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:25:32.824]                   3L)]
[10:25:32.824]             }
[10:25:32.824]             function(cond) {
[10:25:32.824]                 is_error <- inherits(cond, "error")
[10:25:32.824]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:25:32.824]                   NULL)
[10:25:32.824]                 if (is_error) {
[10:25:32.824]                   sessionInformation <- function() {
[10:25:32.824]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:25:32.824]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:25:32.824]                       search = base::search(), system = base::Sys.info())
[10:25:32.824]                   }
[10:25:32.824]                   ...future.conditions[[length(...future.conditions) + 
[10:25:32.824]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:25:32.824]                     cond$call), session = sessionInformation(), 
[10:25:32.824]                     timestamp = base::Sys.time(), signaled = 0L)
[10:25:32.824]                   signalCondition(cond)
[10:25:32.824]                 }
[10:25:32.824]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:25:32.824]                 "immediateCondition"))) {
[10:25:32.824]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:25:32.824]                   ...future.conditions[[length(...future.conditions) + 
[10:25:32.824]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:25:32.824]                   if (TRUE && !signal) {
[10:25:32.824]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:25:32.824]                     {
[10:25:32.824]                       inherits <- base::inherits
[10:25:32.824]                       invokeRestart <- base::invokeRestart
[10:25:32.824]                       is.null <- base::is.null
[10:25:32.824]                       muffled <- FALSE
[10:25:32.824]                       if (inherits(cond, "message")) {
[10:25:32.824]                         muffled <- grepl(pattern, "muffleMessage")
[10:25:32.824]                         if (muffled) 
[10:25:32.824]                           invokeRestart("muffleMessage")
[10:25:32.824]                       }
[10:25:32.824]                       else if (inherits(cond, "warning")) {
[10:25:32.824]                         muffled <- grepl(pattern, "muffleWarning")
[10:25:32.824]                         if (muffled) 
[10:25:32.824]                           invokeRestart("muffleWarning")
[10:25:32.824]                       }
[10:25:32.824]                       else if (inherits(cond, "condition")) {
[10:25:32.824]                         if (!is.null(pattern)) {
[10:25:32.824]                           computeRestarts <- base::computeRestarts
[10:25:32.824]                           grepl <- base::grepl
[10:25:32.824]                           restarts <- computeRestarts(cond)
[10:25:32.824]                           for (restart in restarts) {
[10:25:32.824]                             name <- restart$name
[10:25:32.824]                             if (is.null(name)) 
[10:25:32.824]                               next
[10:25:32.824]                             if (!grepl(pattern, name)) 
[10:25:32.824]                               next
[10:25:32.824]                             invokeRestart(restart)
[10:25:32.824]                             muffled <- TRUE
[10:25:32.824]                             break
[10:25:32.824]                           }
[10:25:32.824]                         }
[10:25:32.824]                       }
[10:25:32.824]                       invisible(muffled)
[10:25:32.824]                     }
[10:25:32.824]                     muffleCondition(cond, pattern = "^muffle")
[10:25:32.824]                   }
[10:25:32.824]                 }
[10:25:32.824]                 else {
[10:25:32.824]                   if (TRUE) {
[10:25:32.824]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:25:32.824]                     {
[10:25:32.824]                       inherits <- base::inherits
[10:25:32.824]                       invokeRestart <- base::invokeRestart
[10:25:32.824]                       is.null <- base::is.null
[10:25:32.824]                       muffled <- FALSE
[10:25:32.824]                       if (inherits(cond, "message")) {
[10:25:32.824]                         muffled <- grepl(pattern, "muffleMessage")
[10:25:32.824]                         if (muffled) 
[10:25:32.824]                           invokeRestart("muffleMessage")
[10:25:32.824]                       }
[10:25:32.824]                       else if (inherits(cond, "warning")) {
[10:25:32.824]                         muffled <- grepl(pattern, "muffleWarning")
[10:25:32.824]                         if (muffled) 
[10:25:32.824]                           invokeRestart("muffleWarning")
[10:25:32.824]                       }
[10:25:32.824]                       else if (inherits(cond, "condition")) {
[10:25:32.824]                         if (!is.null(pattern)) {
[10:25:32.824]                           computeRestarts <- base::computeRestarts
[10:25:32.824]                           grepl <- base::grepl
[10:25:32.824]                           restarts <- computeRestarts(cond)
[10:25:32.824]                           for (restart in restarts) {
[10:25:32.824]                             name <- restart$name
[10:25:32.824]                             if (is.null(name)) 
[10:25:32.824]                               next
[10:25:32.824]                             if (!grepl(pattern, name)) 
[10:25:32.824]                               next
[10:25:32.824]                             invokeRestart(restart)
[10:25:32.824]                             muffled <- TRUE
[10:25:32.824]                             break
[10:25:32.824]                           }
[10:25:32.824]                         }
[10:25:32.824]                       }
[10:25:32.824]                       invisible(muffled)
[10:25:32.824]                     }
[10:25:32.824]                     muffleCondition(cond, pattern = "^muffle")
[10:25:32.824]                   }
[10:25:32.824]                 }
[10:25:32.824]             }
[10:25:32.824]         }))
[10:25:32.824]     }, error = function(ex) {
[10:25:32.824]         base::structure(base::list(value = NULL, visible = NULL, 
[10:25:32.824]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:25:32.824]                 ...future.rng), started = ...future.startTime, 
[10:25:32.824]             finished = Sys.time(), session_uuid = NA_character_, 
[10:25:32.824]             version = "1.8"), class = "FutureResult")
[10:25:32.824]     }, finally = {
[10:25:32.824]         if (!identical(...future.workdir, getwd())) 
[10:25:32.824]             setwd(...future.workdir)
[10:25:32.824]         {
[10:25:32.824]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:25:32.824]                 ...future.oldOptions$nwarnings <- NULL
[10:25:32.824]             }
[10:25:32.824]             base::options(...future.oldOptions)
[10:25:32.824]             if (.Platform$OS.type == "windows") {
[10:25:32.824]                 old_names <- names(...future.oldEnvVars)
[10:25:32.824]                 envs <- base::Sys.getenv()
[10:25:32.824]                 names <- names(envs)
[10:25:32.824]                 common <- intersect(names, old_names)
[10:25:32.824]                 added <- setdiff(names, old_names)
[10:25:32.824]                 removed <- setdiff(old_names, names)
[10:25:32.824]                 changed <- common[...future.oldEnvVars[common] != 
[10:25:32.824]                   envs[common]]
[10:25:32.824]                 NAMES <- toupper(changed)
[10:25:32.824]                 args <- list()
[10:25:32.824]                 for (kk in seq_along(NAMES)) {
[10:25:32.824]                   name <- changed[[kk]]
[10:25:32.824]                   NAME <- NAMES[[kk]]
[10:25:32.824]                   if (name != NAME && is.element(NAME, old_names)) 
[10:25:32.824]                     next
[10:25:32.824]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:25:32.824]                 }
[10:25:32.824]                 NAMES <- toupper(added)
[10:25:32.824]                 for (kk in seq_along(NAMES)) {
[10:25:32.824]                   name <- added[[kk]]
[10:25:32.824]                   NAME <- NAMES[[kk]]
[10:25:32.824]                   if (name != NAME && is.element(NAME, old_names)) 
[10:25:32.824]                     next
[10:25:32.824]                   args[[name]] <- ""
[10:25:32.824]                 }
[10:25:32.824]                 NAMES <- toupper(removed)
[10:25:32.824]                 for (kk in seq_along(NAMES)) {
[10:25:32.824]                   name <- removed[[kk]]
[10:25:32.824]                   NAME <- NAMES[[kk]]
[10:25:32.824]                   if (name != NAME && is.element(NAME, old_names)) 
[10:25:32.824]                     next
[10:25:32.824]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:25:32.824]                 }
[10:25:32.824]                 if (length(args) > 0) 
[10:25:32.824]                   base::do.call(base::Sys.setenv, args = args)
[10:25:32.824]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:25:32.824]             }
[10:25:32.824]             else {
[10:25:32.824]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:25:32.824]             }
[10:25:32.824]             {
[10:25:32.824]                 if (base::length(...future.futureOptionsAdded) > 
[10:25:32.824]                   0L) {
[10:25:32.824]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:25:32.824]                   base::names(opts) <- ...future.futureOptionsAdded
[10:25:32.824]                   base::options(opts)
[10:25:32.824]                 }
[10:25:32.824]                 {
[10:25:32.824]                   {
[10:25:32.824]                     base::options(mc.cores = ...future.mc.cores.old)
[10:25:32.824]                     NULL
[10:25:32.824]                   }
[10:25:32.824]                   options(future.plan = NULL)
[10:25:32.824]                   if (is.na(NA_character_)) 
[10:25:32.824]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:25:32.824]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:25:32.824]                   future::plan(list(function (..., workers = availableCores(constraints = "multicore"), 
[10:25:32.824]                     envir = parent.frame()) 
[10:25:32.824]                   {
[10:25:32.824]                     default_workers <- missing(workers)
[10:25:32.824]                     if (is.function(workers)) 
[10:25:32.824]                       workers <- workers()
[10:25:32.824]                     workers <- structure(as.integer(workers), 
[10:25:32.824]                       class = class(workers))
[10:25:32.824]                     stop_if_not(is.finite(workers), workers >= 
[10:25:32.824]                       1L)
[10:25:32.824]                     if ((workers == 1L && !inherits(workers, 
[10:25:32.824]                       "AsIs")) || !supportsMulticore(warn = TRUE)) {
[10:25:32.824]                       if (default_workers) 
[10:25:32.824]                         supportsMulticore(warn = TRUE)
[10:25:32.824]                       return(sequential(..., envir = envir))
[10:25:32.824]                     }
[10:25:32.824]                     oopts <- options(mc.cores = workers)
[10:25:32.824]                     on.exit(options(oopts))
[10:25:32.824]                     future <- MulticoreFuture(..., workers = workers, 
[10:25:32.824]                       envir = envir)
[10:25:32.824]                     if (!future$lazy) 
[10:25:32.824]                       future <- run(future)
[10:25:32.824]                     invisible(future)
[10:25:32.824]                   }), .cleanup = FALSE, .init = FALSE)
[10:25:32.824]                 }
[10:25:32.824]             }
[10:25:32.824]         }
[10:25:32.824]     })
[10:25:32.824]     if (TRUE) {
[10:25:32.824]         base::sink(type = "output", split = FALSE)
[10:25:32.824]         if (TRUE) {
[10:25:32.824]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:25:32.824]         }
[10:25:32.824]         else {
[10:25:32.824]             ...future.result["stdout"] <- base::list(NULL)
[10:25:32.824]         }
[10:25:32.824]         base::close(...future.stdout)
[10:25:32.824]         ...future.stdout <- NULL
[10:25:32.824]     }
[10:25:32.824]     ...future.result$conditions <- ...future.conditions
[10:25:32.824]     ...future.result$finished <- base::Sys.time()
[10:25:32.824]     ...future.result
[10:25:32.824] }
[10:25:32.826] requestCore(): workers = 2
[10:25:32.828] MulticoreFuture started
[10:25:32.828] - Launch lazy future ... done
[10:25:32.829] run() for ‘MulticoreFuture’ ... done
MulticoreFuture:
Label: ‘strategy = multicore’
Expression:
[1] 42
Lazy evaluation: FALSE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[10:25:32.829] plan(): Setting new future strategy stack:
[10:25:32.830] List of future strategies:
[10:25:32.830] 1. sequential:
[10:25:32.830]    - args: function (..., envir = parent.frame())
[10:25:32.830]    - tweaked: FALSE
[10:25:32.830]    - call: NULL
[10:25:32.830] plan(): nbrOfWorkers() = 1
[10:25:32.832] plan(): Setting new future strategy stack:
[10:25:32.832] List of future strategies:
[10:25:32.832] 1. multicore:
[10:25:32.832]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[10:25:32.832]    - tweaked: FALSE
[10:25:32.832]    - call: plan(strategy)
[10:25:32.837] plan(): nbrOfWorkers() = 2
Resolved: TRUE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: 378a73a7-17bc-11e5-cdc3-65eb29aceac6
Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[10:25:32.838] result() for MulticoreFuture ...
[10:25:32.839] result() for MulticoreFuture ...
[10:25:32.839] result() for MulticoreFuture ... done
[10:25:32.839] result() for MulticoreFuture ... done
[10:25:32.839] result() for MulticoreFuture ...
[10:25:32.839] result() for MulticoreFuture ... done
[10:25:32.840] getGlobalsAndPackages() ...
[10:25:32.840] Searching for globals...
[10:25:32.841] - globals found: [1] ‘{’
[10:25:32.841] Searching for globals ... DONE
[10:25:32.842] Resolving globals: FALSE
[10:25:32.842] 
[10:25:32.842] 
[10:25:32.842] getGlobalsAndPackages() ... DONE
[10:25:32.842] run() for ‘Future’ ...
[10:25:32.843] - state: ‘created’
[10:25:32.843] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:25:32.850] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[10:25:32.850] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[10:25:32.850]   - Field: ‘label’
[10:25:32.850]   - Field: ‘local’
[10:25:32.850]   - Field: ‘owner’
[10:25:32.850]   - Field: ‘envir’
[10:25:32.850]   - Field: ‘workers’
[10:25:32.851]   - Field: ‘packages’
[10:25:32.851]   - Field: ‘gc’
[10:25:32.851]   - Field: ‘job’
[10:25:32.851]   - Field: ‘conditions’
[10:25:32.851]   - Field: ‘expr’
[10:25:32.851]   - Field: ‘uuid’
[10:25:32.851]   - Field: ‘seed’
[10:25:32.852]   - Field: ‘version’
[10:25:32.852]   - Field: ‘result’
[10:25:32.852]   - Field: ‘asynchronous’
[10:25:32.852]   - Field: ‘calls’
[10:25:32.852]   - Field: ‘globals’
[10:25:32.852]   - Field: ‘stdout’
[10:25:32.852]   - Field: ‘earlySignal’
[10:25:32.853]   - Field: ‘lazy’
[10:25:32.853]   - Field: ‘state’
[10:25:32.853] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[10:25:32.853] - Launch lazy future ...
[10:25:32.853] Packages needed by the future expression (n = 0): <none>
[10:25:32.853] Packages needed by future strategies (n = 0): <none>
[10:25:32.854] {
[10:25:32.854]     {
[10:25:32.854]         {
[10:25:32.854]             ...future.startTime <- base::Sys.time()
[10:25:32.854]             {
[10:25:32.854]                 {
[10:25:32.854]                   {
[10:25:32.854]                     {
[10:25:32.854]                       base::local({
[10:25:32.854]                         has_future <- base::requireNamespace("future", 
[10:25:32.854]                           quietly = TRUE)
[10:25:32.854]                         if (has_future) {
[10:25:32.854]                           ns <- base::getNamespace("future")
[10:25:32.854]                           version <- ns[[".package"]][["version"]]
[10:25:32.854]                           if (is.null(version)) 
[10:25:32.854]                             version <- utils::packageVersion("future")
[10:25:32.854]                         }
[10:25:32.854]                         else {
[10:25:32.854]                           version <- NULL
[10:25:32.854]                         }
[10:25:32.854]                         if (!has_future || version < "1.8.0") {
[10:25:32.854]                           info <- base::c(r_version = base::gsub("R version ", 
[10:25:32.854]                             "", base::R.version$version.string), 
[10:25:32.854]                             platform = base::sprintf("%s (%s-bit)", 
[10:25:32.854]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:25:32.854]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[10:25:32.854]                               "release", "version")], collapse = " "), 
[10:25:32.854]                             hostname = base::Sys.info()[["nodename"]])
[10:25:32.854]                           info <- base::sprintf("%s: %s", base::names(info), 
[10:25:32.854]                             info)
[10:25:32.854]                           info <- base::paste(info, collapse = "; ")
[10:25:32.854]                           if (!has_future) {
[10:25:32.854]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:25:32.854]                               info)
[10:25:32.854]                           }
[10:25:32.854]                           else {
[10:25:32.854]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:25:32.854]                               info, version)
[10:25:32.854]                           }
[10:25:32.854]                           base::stop(msg)
[10:25:32.854]                         }
[10:25:32.854]                       })
[10:25:32.854]                     }
[10:25:32.854]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[10:25:32.854]                     base::options(mc.cores = 1L)
[10:25:32.854]                   }
[10:25:32.854]                   options(future.plan = NULL)
[10:25:32.854]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:25:32.854]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:25:32.854]                 }
[10:25:32.854]                 ...future.workdir <- getwd()
[10:25:32.854]             }
[10:25:32.854]             ...future.oldOptions <- base::as.list(base::.Options)
[10:25:32.854]             ...future.oldEnvVars <- base::Sys.getenv()
[10:25:32.854]         }
[10:25:32.854]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:25:32.854]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[10:25:32.854]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:25:32.854]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:25:32.854]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:25:32.854]             future.stdout.windows.reencode = NULL, width = 80L)
[10:25:32.854]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:25:32.854]             base::names(...future.oldOptions))
[10:25:32.854]     }
[10:25:32.854]     if (FALSE) {
[10:25:32.854]     }
[10:25:32.854]     else {
[10:25:32.854]         if (TRUE) {
[10:25:32.854]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:25:32.854]                 open = "w")
[10:25:32.854]         }
[10:25:32.854]         else {
[10:25:32.854]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:25:32.854]                 windows = "NUL", "/dev/null"), open = "w")
[10:25:32.854]         }
[10:25:32.854]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:25:32.854]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:25:32.854]             base::sink(type = "output", split = FALSE)
[10:25:32.854]             base::close(...future.stdout)
[10:25:32.854]         }, add = TRUE)
[10:25:32.854]     }
[10:25:32.854]     ...future.frame <- base::sys.nframe()
[10:25:32.854]     ...future.conditions <- base::list()
[10:25:32.854]     ...future.rng <- base::globalenv()$.Random.seed
[10:25:32.854]     if (FALSE) {
[10:25:32.854]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:25:32.854]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:25:32.854]     }
[10:25:32.854]     ...future.result <- base::tryCatch({
[10:25:32.854]         base::withCallingHandlers({
[10:25:32.854]             ...future.value <- base::withVisible(base::local({
[10:25:32.854]                 withCallingHandlers({
[10:25:32.854]                   {
[10:25:32.854]                     42
[10:25:32.854]                   }
[10:25:32.854]                 }, immediateCondition = function(cond) {
[10:25:32.854]                   save_rds <- function (object, pathname, ...) 
[10:25:32.854]                   {
[10:25:32.854]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[10:25:32.854]                     if (file_test("-f", pathname_tmp)) {
[10:25:32.854]                       fi_tmp <- file.info(pathname_tmp)
[10:25:32.854]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[10:25:32.854]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[10:25:32.854]                         fi_tmp[["mtime"]])
[10:25:32.854]                     }
[10:25:32.854]                     tryCatch({
[10:25:32.854]                       saveRDS(object, file = pathname_tmp, ...)
[10:25:32.854]                     }, error = function(ex) {
[10:25:32.854]                       msg <- conditionMessage(ex)
[10:25:32.854]                       fi_tmp <- file.info(pathname_tmp)
[10:25:32.854]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[10:25:32.854]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[10:25:32.854]                         fi_tmp[["mtime"]], msg)
[10:25:32.854]                       ex$message <- msg
[10:25:32.854]                       stop(ex)
[10:25:32.854]                     })
[10:25:32.854]                     stopifnot(file_test("-f", pathname_tmp))
[10:25:32.854]                     res <- file.rename(from = pathname_tmp, to = pathname)
[10:25:32.854]                     if (!res || file_test("-f", pathname_tmp)) {
[10:25:32.854]                       fi_tmp <- file.info(pathname_tmp)
[10:25:32.854]                       fi <- file.info(pathname)
[10:25:32.854]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[10:25:32.854]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[10:25:32.854]                         fi_tmp[["mtime"]], sQuote(pathname), 
[10:25:32.854]                         fi[["size"]], fi[["mtime"]])
[10:25:32.854]                       stop(msg)
[10:25:32.854]                     }
[10:25:32.854]                     invisible(pathname)
[10:25:32.854]                   }
[10:25:32.854]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[10:25:32.854]                     rootPath = tempdir()) 
[10:25:32.854]                   {
[10:25:32.854]                     obj <- list(time = Sys.time(), condition = cond)
[10:25:32.854]                     file <- tempfile(pattern = class(cond)[1], 
[10:25:32.854]                       tmpdir = path, fileext = ".rds")
[10:25:32.854]                     save_rds(obj, file)
[10:25:32.854]                   }
[10:25:32.854]                   saveImmediateCondition(cond, path = "/tmp/RtmpZe8BxD/.future/immediateConditions")
[10:25:32.854]                   muffleCondition <- function (cond, pattern = "^muffle") 
[10:25:32.854]                   {
[10:25:32.854]                     inherits <- base::inherits
[10:25:32.854]                     invokeRestart <- base::invokeRestart
[10:25:32.854]                     is.null <- base::is.null
[10:25:32.854]                     muffled <- FALSE
[10:25:32.854]                     if (inherits(cond, "message")) {
[10:25:32.854]                       muffled <- grepl(pattern, "muffleMessage")
[10:25:32.854]                       if (muffled) 
[10:25:32.854]                         invokeRestart("muffleMessage")
[10:25:32.854]                     }
[10:25:32.854]                     else if (inherits(cond, "warning")) {
[10:25:32.854]                       muffled <- grepl(pattern, "muffleWarning")
[10:25:32.854]                       if (muffled) 
[10:25:32.854]                         invokeRestart("muffleWarning")
[10:25:32.854]                     }
[10:25:32.854]                     else if (inherits(cond, "condition")) {
[10:25:32.854]                       if (!is.null(pattern)) {
[10:25:32.854]                         computeRestarts <- base::computeRestarts
[10:25:32.854]                         grepl <- base::grepl
[10:25:32.854]                         restarts <- computeRestarts(cond)
[10:25:32.854]                         for (restart in restarts) {
[10:25:32.854]                           name <- restart$name
[10:25:32.854]                           if (is.null(name)) 
[10:25:32.854]                             next
[10:25:32.854]                           if (!grepl(pattern, name)) 
[10:25:32.854]                             next
[10:25:32.854]                           invokeRestart(restart)
[10:25:32.854]                           muffled <- TRUE
[10:25:32.854]                           break
[10:25:32.854]                         }
[10:25:32.854]                       }
[10:25:32.854]                     }
[10:25:32.854]                     invisible(muffled)
[10:25:32.854]                   }
[10:25:32.854]                   muffleCondition(cond)
[10:25:32.854]                 })
[10:25:32.854]             }))
[10:25:32.854]             future::FutureResult(value = ...future.value$value, 
[10:25:32.854]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:25:32.854]                   ...future.rng), globalenv = if (FALSE) 
[10:25:32.854]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:25:32.854]                     ...future.globalenv.names))
[10:25:32.854]                 else NULL, started = ...future.startTime, version = "1.8")
[10:25:32.854]         }, condition = base::local({
[10:25:32.854]             c <- base::c
[10:25:32.854]             inherits <- base::inherits
[10:25:32.854]             invokeRestart <- base::invokeRestart
[10:25:32.854]             length <- base::length
[10:25:32.854]             list <- base::list
[10:25:32.854]             seq.int <- base::seq.int
[10:25:32.854]             signalCondition <- base::signalCondition
[10:25:32.854]             sys.calls <- base::sys.calls
[10:25:32.854]             `[[` <- base::`[[`
[10:25:32.854]             `+` <- base::`+`
[10:25:32.854]             `<<-` <- base::`<<-`
[10:25:32.854]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:25:32.854]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:25:32.854]                   3L)]
[10:25:32.854]             }
[10:25:32.854]             function(cond) {
[10:25:32.854]                 is_error <- inherits(cond, "error")
[10:25:32.854]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:25:32.854]                   NULL)
[10:25:32.854]                 if (is_error) {
[10:25:32.854]                   sessionInformation <- function() {
[10:25:32.854]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:25:32.854]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:25:32.854]                       search = base::search(), system = base::Sys.info())
[10:25:32.854]                   }
[10:25:32.854]                   ...future.conditions[[length(...future.conditions) + 
[10:25:32.854]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:25:32.854]                     cond$call), session = sessionInformation(), 
[10:25:32.854]                     timestamp = base::Sys.time(), signaled = 0L)
[10:25:32.854]                   signalCondition(cond)
[10:25:32.854]                 }
[10:25:32.854]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:25:32.854]                 "immediateCondition"))) {
[10:25:32.854]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:25:32.854]                   ...future.conditions[[length(...future.conditions) + 
[10:25:32.854]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:25:32.854]                   if (TRUE && !signal) {
[10:25:32.854]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:25:32.854]                     {
[10:25:32.854]                       inherits <- base::inherits
[10:25:32.854]                       invokeRestart <- base::invokeRestart
[10:25:32.854]                       is.null <- base::is.null
[10:25:32.854]                       muffled <- FALSE
[10:25:32.854]                       if (inherits(cond, "message")) {
[10:25:32.854]                         muffled <- grepl(pattern, "muffleMessage")
[10:25:32.854]                         if (muffled) 
[10:25:32.854]                           invokeRestart("muffleMessage")
[10:25:32.854]                       }
[10:25:32.854]                       else if (inherits(cond, "warning")) {
[10:25:32.854]                         muffled <- grepl(pattern, "muffleWarning")
[10:25:32.854]                         if (muffled) 
[10:25:32.854]                           invokeRestart("muffleWarning")
[10:25:32.854]                       }
[10:25:32.854]                       else if (inherits(cond, "condition")) {
[10:25:32.854]                         if (!is.null(pattern)) {
[10:25:32.854]                           computeRestarts <- base::computeRestarts
[10:25:32.854]                           grepl <- base::grepl
[10:25:32.854]                           restarts <- computeRestarts(cond)
[10:25:32.854]                           for (restart in restarts) {
[10:25:32.854]                             name <- restart$name
[10:25:32.854]                             if (is.null(name)) 
[10:25:32.854]                               next
[10:25:32.854]                             if (!grepl(pattern, name)) 
[10:25:32.854]                               next
[10:25:32.854]                             invokeRestart(restart)
[10:25:32.854]                             muffled <- TRUE
[10:25:32.854]                             break
[10:25:32.854]                           }
[10:25:32.854]                         }
[10:25:32.854]                       }
[10:25:32.854]                       invisible(muffled)
[10:25:32.854]                     }
[10:25:32.854]                     muffleCondition(cond, pattern = "^muffle")
[10:25:32.854]                   }
[10:25:32.854]                 }
[10:25:32.854]                 else {
[10:25:32.854]                   if (TRUE) {
[10:25:32.854]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:25:32.854]                     {
[10:25:32.854]                       inherits <- base::inherits
[10:25:32.854]                       invokeRestart <- base::invokeRestart
[10:25:32.854]                       is.null <- base::is.null
[10:25:32.854]                       muffled <- FALSE
[10:25:32.854]                       if (inherits(cond, "message")) {
[10:25:32.854]                         muffled <- grepl(pattern, "muffleMessage")
[10:25:32.854]                         if (muffled) 
[10:25:32.854]                           invokeRestart("muffleMessage")
[10:25:32.854]                       }
[10:25:32.854]                       else if (inherits(cond, "warning")) {
[10:25:32.854]                         muffled <- grepl(pattern, "muffleWarning")
[10:25:32.854]                         if (muffled) 
[10:25:32.854]                           invokeRestart("muffleWarning")
[10:25:32.854]                       }
[10:25:32.854]                       else if (inherits(cond, "condition")) {
[10:25:32.854]                         if (!is.null(pattern)) {
[10:25:32.854]                           computeRestarts <- base::computeRestarts
[10:25:32.854]                           grepl <- base::grepl
[10:25:32.854]                           restarts <- computeRestarts(cond)
[10:25:32.854]                           for (restart in restarts) {
[10:25:32.854]                             name <- restart$name
[10:25:32.854]                             if (is.null(name)) 
[10:25:32.854]                               next
[10:25:32.854]                             if (!grepl(pattern, name)) 
[10:25:32.854]                               next
[10:25:32.854]                             invokeRestart(restart)
[10:25:32.854]                             muffled <- TRUE
[10:25:32.854]                             break
[10:25:32.854]                           }
[10:25:32.854]                         }
[10:25:32.854]                       }
[10:25:32.854]                       invisible(muffled)
[10:25:32.854]                     }
[10:25:32.854]                     muffleCondition(cond, pattern = "^muffle")
[10:25:32.854]                   }
[10:25:32.854]                 }
[10:25:32.854]             }
[10:25:32.854]         }))
[10:25:32.854]     }, error = function(ex) {
[10:25:32.854]         base::structure(base::list(value = NULL, visible = NULL, 
[10:25:32.854]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:25:32.854]                 ...future.rng), started = ...future.startTime, 
[10:25:32.854]             finished = Sys.time(), session_uuid = NA_character_, 
[10:25:32.854]             version = "1.8"), class = "FutureResult")
[10:25:32.854]     }, finally = {
[10:25:32.854]         if (!identical(...future.workdir, getwd())) 
[10:25:32.854]             setwd(...future.workdir)
[10:25:32.854]         {
[10:25:32.854]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:25:32.854]                 ...future.oldOptions$nwarnings <- NULL
[10:25:32.854]             }
[10:25:32.854]             base::options(...future.oldOptions)
[10:25:32.854]             if (.Platform$OS.type == "windows") {
[10:25:32.854]                 old_names <- names(...future.oldEnvVars)
[10:25:32.854]                 envs <- base::Sys.getenv()
[10:25:32.854]                 names <- names(envs)
[10:25:32.854]                 common <- intersect(names, old_names)
[10:25:32.854]                 added <- setdiff(names, old_names)
[10:25:32.854]                 removed <- setdiff(old_names, names)
[10:25:32.854]                 changed <- common[...future.oldEnvVars[common] != 
[10:25:32.854]                   envs[common]]
[10:25:32.854]                 NAMES <- toupper(changed)
[10:25:32.854]                 args <- list()
[10:25:32.854]                 for (kk in seq_along(NAMES)) {
[10:25:32.854]                   name <- changed[[kk]]
[10:25:32.854]                   NAME <- NAMES[[kk]]
[10:25:32.854]                   if (name != NAME && is.element(NAME, old_names)) 
[10:25:32.854]                     next
[10:25:32.854]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:25:32.854]                 }
[10:25:32.854]                 NAMES <- toupper(added)
[10:25:32.854]                 for (kk in seq_along(NAMES)) {
[10:25:32.854]                   name <- added[[kk]]
[10:25:32.854]                   NAME <- NAMES[[kk]]
[10:25:32.854]                   if (name != NAME && is.element(NAME, old_names)) 
[10:25:32.854]                     next
[10:25:32.854]                   args[[name]] <- ""
[10:25:32.854]                 }
[10:25:32.854]                 NAMES <- toupper(removed)
[10:25:32.854]                 for (kk in seq_along(NAMES)) {
[10:25:32.854]                   name <- removed[[kk]]
[10:25:32.854]                   NAME <- NAMES[[kk]]
[10:25:32.854]                   if (name != NAME && is.element(NAME, old_names)) 
[10:25:32.854]                     next
[10:25:32.854]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:25:32.854]                 }
[10:25:32.854]                 if (length(args) > 0) 
[10:25:32.854]                   base::do.call(base::Sys.setenv, args = args)
[10:25:32.854]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:25:32.854]             }
[10:25:32.854]             else {
[10:25:32.854]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:25:32.854]             }
[10:25:32.854]             {
[10:25:32.854]                 if (base::length(...future.futureOptionsAdded) > 
[10:25:32.854]                   0L) {
[10:25:32.854]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:25:32.854]                   base::names(opts) <- ...future.futureOptionsAdded
[10:25:32.854]                   base::options(opts)
[10:25:32.854]                 }
[10:25:32.854]                 {
[10:25:32.854]                   {
[10:25:32.854]                     base::options(mc.cores = ...future.mc.cores.old)
[10:25:32.854]                     NULL
[10:25:32.854]                   }
[10:25:32.854]                   options(future.plan = NULL)
[10:25:32.854]                   if (is.na(NA_character_)) 
[10:25:32.854]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:25:32.854]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:25:32.854]                   future::plan(list(function (..., workers = availableCores(constraints = "multicore"), 
[10:25:32.854]                     envir = parent.frame()) 
[10:25:32.854]                   {
[10:25:32.854]                     default_workers <- missing(workers)
[10:25:32.854]                     if (is.function(workers)) 
[10:25:32.854]                       workers <- workers()
[10:25:32.854]                     workers <- structure(as.integer(workers), 
[10:25:32.854]                       class = class(workers))
[10:25:32.854]                     stop_if_not(is.finite(workers), workers >= 
[10:25:32.854]                       1L)
[10:25:32.854]                     if ((workers == 1L && !inherits(workers, 
[10:25:32.854]                       "AsIs")) || !supportsMulticore(warn = TRUE)) {
[10:25:32.854]                       if (default_workers) 
[10:25:32.854]                         supportsMulticore(warn = TRUE)
[10:25:32.854]                       return(sequential(..., envir = envir))
[10:25:32.854]                     }
[10:25:32.854]                     oopts <- options(mc.cores = workers)
[10:25:32.854]                     on.exit(options(oopts))
[10:25:32.854]                     future <- MulticoreFuture(..., workers = workers, 
[10:25:32.854]                       envir = envir)
[10:25:32.854]                     if (!future$lazy) 
[10:25:32.854]                       future <- run(future)
[10:25:32.854]                     invisible(future)
[10:25:32.854]                   }), .cleanup = FALSE, .init = FALSE)
[10:25:32.854]                 }
[10:25:32.854]             }
[10:25:32.854]         }
[10:25:32.854]     })
[10:25:32.854]     if (TRUE) {
[10:25:32.854]         base::sink(type = "output", split = FALSE)
[10:25:32.854]         if (TRUE) {
[10:25:32.854]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:25:32.854]         }
[10:25:32.854]         else {
[10:25:32.854]             ...future.result["stdout"] <- base::list(NULL)
[10:25:32.854]         }
[10:25:32.854]         base::close(...future.stdout)
[10:25:32.854]         ...future.stdout <- NULL
[10:25:32.854]     }
[10:25:32.854]     ...future.result$conditions <- ...future.conditions
[10:25:32.854]     ...future.result$finished <- base::Sys.time()
[10:25:32.854]     ...future.result
[10:25:32.854] }
[10:25:32.856] requestCore(): workers = 2
[10:25:32.858] MulticoreFuture started
[10:25:32.858] - Launch lazy future ... done
[10:25:32.859] run() for ‘MulticoreFuture’ ... done
[10:25:32.859] plan(): Setting new future strategy stack:
MulticoreFuture:
Label: ‘strategy = multicore’
Expression:
{
    42
}
Lazy evaluation: FALSE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[10:25:32.859] List of future strategies:
[10:25:32.859] 1. sequential:
[10:25:32.859]    - args: function (..., envir = parent.frame())
[10:25:32.859]    - tweaked: FALSE
[10:25:32.859]    - call: NULL
[10:25:32.860] plan(): nbrOfWorkers() = 1
[10:25:32.862] plan(): Setting new future strategy stack:
[10:25:32.862] List of future strategies:
[10:25:32.862] 1. multicore:
[10:25:32.862]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[10:25:32.862]    - tweaked: FALSE
[10:25:32.862]    - call: plan(strategy)
[10:25:32.867] plan(): nbrOfWorkers() = 2
Resolved: TRUE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: 378a73a7-17bc-11e5-cdc3-65eb29aceac6
Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[10:25:32.868] result() for MulticoreFuture ...
[10:25:32.869] result() for MulticoreFuture ...
[10:25:32.869] result() for MulticoreFuture ... done
[10:25:32.869] result() for MulticoreFuture ... done
[10:25:32.869] result() for MulticoreFuture ...
[10:25:32.869] result() for MulticoreFuture ... done
- plan('multicore') ... DONE
- plan('multisession') ...
[10:25:32.870] plan(): Setting new future strategy stack:
[10:25:32.870] List of future strategies:
[10:25:32.870] 1. multisession:
[10:25:32.870]    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[10:25:32.870]    - tweaked: FALSE
[10:25:32.870]    - call: plan(strategy)
[10:25:32.871] plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ...
[10:25:32.871] multisession:
[10:25:32.871] - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[10:25:32.871] - tweaked: FALSE
[10:25:32.871] - call: plan(strategy)
[10:25:32.878] getGlobalsAndPackages() ...
[10:25:32.878] Not searching for globals
[10:25:32.878] - globals: [0] <none>
[10:25:32.878] getGlobalsAndPackages() ... DONE
[10:25:32.879] [local output] makeClusterPSOCK() ...
[10:25:32.920] [local output] Workers: [n = 2] ‘localhost’, ‘localhost’
[10:25:32.921] [local output] Base port: 11514
[10:25:32.921] [local output] Getting setup options for 2 cluster nodes ...
[10:25:32.921] [local output]  - Node 1 of 2 ...
[10:25:32.922] [local output] localMachine=TRUE => revtunnel=FALSE

[10:25:32.922] Testing if worker's PID can be inferred: ‘'/usr/local/lib/R/bin/Rscript' -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/RtmpZe8BxD/worker.rank=1.parallelly.parent=82085.140a5177b4bdc.pid")), silent = TRUE)' -e 'file.exists("/tmp/RtmpZe8BxD/worker.rank=1.parallelly.parent=82085.140a5177b4bdc.pid")'’
[10:25:33.110] - Possible to infer worker's PID: TRUE
[10:25:33.111] [local output] Rscript port: 11514

[10:25:33.111] [local output]  - Node 2 of 2 ...
[10:25:33.111] [local output] localMachine=TRUE => revtunnel=FALSE

[10:25:33.112] [local output] Rscript port: 11514

[10:25:33.112] [local output] Getting setup options for 2 cluster nodes ... done
[10:25:33.112] [local output]  - Parallel setup requested for some PSOCK nodes
[10:25:33.113] [local output] Setting up PSOCK nodes in parallel
[10:25:33.113] List of 36
[10:25:33.113]  $ worker          : chr "localhost"
[10:25:33.113]   ..- attr(*, "localhost")= logi TRUE
[10:25:33.113]  $ master          : chr "localhost"
[10:25:33.113]  $ port            : int 11514
[10:25:33.113]  $ connectTimeout  : num 120
[10:25:33.113]  $ timeout         : num 2592000
[10:25:33.113]  $ rscript         : chr "'/usr/local/lib/R/bin/Rscript'"
[10:25:33.113]  $ homogeneous     : logi TRUE
[10:25:33.113]  $ rscript_args    : chr "--default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),fi"| __truncated__
[10:25:33.113]  $ rscript_envs    : NULL
[10:25:33.113]  $ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[10:25:33.113]  $ rscript_startup : NULL
[10:25:33.113]  $ rscript_sh      : chr "sh"
[10:25:33.113]  $ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[10:25:33.113]  $ methods         : logi TRUE
[10:25:33.113]  $ socketOptions   : chr "no-delay"
[10:25:33.113]  $ useXDR          : logi FALSE
[10:25:33.113]  $ outfile         : chr "/dev/null"
[10:25:33.113]  $ renice          : int NA
[10:25:33.113]  $ rshcmd          : NULL
[10:25:33.113]  $ user            : chr(0) 
[10:25:33.113]  $ revtunnel       : logi FALSE
[10:25:33.113]  $ rshlogfile      : NULL
[10:25:33.113]  $ rshopts         : chr(0) 
[10:25:33.113]  $ rank            : int 1
[10:25:33.113]  $ manual          : logi FALSE
[10:25:33.113]  $ dryrun          : logi FALSE
[10:25:33.113]  $ quiet           : logi FALSE
[10:25:33.113]  $ setup_strategy  : chr "parallel"
[10:25:33.113]  $ local_cmd       : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[10:25:33.113]  $ pidfile         : chr "/tmp/RtmpZe8BxD/worker.rank=1.parallelly.parent=82085.140a5177b4bdc.pid"
[10:25:33.113]  $ rshcmd_label    : NULL
[10:25:33.113]  $ rsh_call        : NULL
[10:25:33.113]  $ cmd             : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[10:25:33.113]  $ localMachine    : logi TRUE
[10:25:33.113]  $ make_fcn        :function (worker = getOption2("parallelly.localhost.hostname", "localhost"), 
[10:25:33.113]     master = NULL, port, connectTimeout = getOption2("parallelly.makeNodePSOCK.connectTimeout", 
[10:25:33.113]         2 * 60), timeout = getOption2("parallelly.makeNodePSOCK.timeout", 
[10:25:33.113]         30 * 24 * 60 * 60), rscript = NULL, homogeneous = NULL, rscript_args = NULL, 
[10:25:33.113]     rscript_envs = NULL, rscript_libs = NULL, rscript_startup = NULL, rscript_sh = c("auto", 
[10:25:33.113]         "cmd", "sh"), default_packages = c("datasets", "utils", "grDevices", 
[10:25:33.113]         "graphics", "stats", if (methods) "methods"), methods = TRUE, socketOptions = getOption2("parallelly.makeNodePSOCK.socketOptions", 
[10:25:33.113]         "no-delay"), useXDR = getOption2("parallelly.makeNodePSOCK.useXDR", 
[10:25:33.113]         FALSE), outfile = "/dev/null", renice = NA_integer_, rshcmd = getOption2("parallelly.makeNodePSOCK.rshcmd", 
[10:25:33.113]         NULL), user = NULL, revtunnel = NA, rshlogfile = NULL, rshopts = getOption2("parallelly.makeNodePSOCK.rshopts", 
[10:25:33.113]         NULL), rank = 1L, manual = FALSE, dryrun = FALSE, quiet = FALSE, 
[10:25:33.113]     setup_strategy = getOption2("parallelly.makeNodePSOCK.setup_strategy", 
[10:25:33.113]         "parallel"), action = c("launch", "options"), verbose = FALSE)  
[10:25:33.113]  $ arguments       :List of 28
[10:25:33.113]   ..$ worker          : chr "localhost"
[10:25:33.113]   ..$ master          : NULL
[10:25:33.113]   ..$ port            : int 11514
[10:25:33.113]   ..$ connectTimeout  : num 120
[10:25:33.113]   ..$ timeout         : num 2592000
[10:25:33.113]   ..$ rscript         : NULL
[10:25:33.113]   ..$ homogeneous     : NULL
[10:25:33.113]   ..$ rscript_args    : NULL
[10:25:33.113]   ..$ rscript_envs    : NULL
[10:25:33.113]   ..$ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[10:25:33.113]   ..$ rscript_startup : NULL
[10:25:33.113]   ..$ rscript_sh      : chr [1:3] "auto" "cmd" "sh"
[10:25:33.113]   ..$ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[10:25:33.113]   ..$ methods         : logi TRUE
[10:25:33.113]   ..$ socketOptions   : chr "no-delay"
[10:25:33.113]   ..$ useXDR          : logi FALSE
[10:25:33.113]   ..$ outfile         : chr "/dev/null"
[10:25:33.113]   ..$ renice          : int NA
[10:25:33.113]   ..$ rshcmd          : NULL
[10:25:33.113]   ..$ user            : NULL
[10:25:33.113]   ..$ revtunnel       : logi NA
[10:25:33.113]   ..$ rshlogfile      : NULL
[10:25:33.113]   ..$ rshopts         : NULL
[10:25:33.113]   ..$ rank            : int 1
[10:25:33.113]   ..$ manual          : logi FALSE
[10:25:33.113]   ..$ dryrun          : logi FALSE
[10:25:33.113]   ..$ quiet           : logi FALSE
[10:25:33.113]   ..$ setup_strategy  : chr "parallel"
[10:25:33.113]  - attr(*, "class")= chr [1:2] "makeNodePSOCKOptions" "makeNodeOptions"
[10:25:33.132] [local output] System call to launch all workers:
[10:25:33.132] [local output] '/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/RtmpZe8BxD/worker.rank=1.parallelly.parent=82085.140a5177b4bdc.pid")), silent = TRUE)' -e 'options(socketOptions = "no-delay")' -e '.libPaths(c("/usr/local/lib/R/site-library","/usr/local/lib/R/library"))' -e 'workRSOCK <- tryCatch(parallel:::.workRSOCK, error=function(e) parallel:::.slaveRSOCK); workRSOCK()' MASTER=localhost PORT=11514 OUT=/dev/null TIMEOUT=2592000 XDR=FALSE SETUPTIMEOUT=120 SETUPSTRATEGY=parallel
[10:25:33.132] [local output] Starting PSOCK main server
[10:25:33.138] [local output] Workers launched
[10:25:33.138] [local output] Waiting for workers to connect back
[10:25:33.138]  - [local output] 0 workers out of 2 ready
[10:25:33.385]  - [local output] 0 workers out of 2 ready
[10:25:33.385]  - [local output] 1 workers out of 2 ready
[10:25:33.386]  - [local output] 1 workers out of 2 ready
[10:25:33.386]  - [local output] 2 workers out of 2 ready
[10:25:33.386] [local output] Launching of workers completed
[10:25:33.386] [local output] Collecting session information from workers
[10:25:33.387] [local output]  - Worker #1 of 2
[10:25:33.388] [local output]  - Worker #2 of 2
[10:25:33.388] [local output] makeClusterPSOCK() ... done
[10:25:33.400] Packages needed by the future expression (n = 0): <none>
[10:25:33.400] Packages needed by future strategies (n = 0): <none>
[10:25:33.400] {
[10:25:33.400]     {
[10:25:33.400]         {
[10:25:33.400]             ...future.startTime <- base::Sys.time()
[10:25:33.400]             {
[10:25:33.400]                 {
[10:25:33.400]                   {
[10:25:33.400]                     {
[10:25:33.400]                       base::local({
[10:25:33.400]                         has_future <- base::requireNamespace("future", 
[10:25:33.400]                           quietly = TRUE)
[10:25:33.400]                         if (has_future) {
[10:25:33.400]                           ns <- base::getNamespace("future")
[10:25:33.400]                           version <- ns[[".package"]][["version"]]
[10:25:33.400]                           if (is.null(version)) 
[10:25:33.400]                             version <- utils::packageVersion("future")
[10:25:33.400]                         }
[10:25:33.400]                         else {
[10:25:33.400]                           version <- NULL
[10:25:33.400]                         }
[10:25:33.400]                         if (!has_future || version < "1.8.0") {
[10:25:33.400]                           info <- base::c(r_version = base::gsub("R version ", 
[10:25:33.400]                             "", base::R.version$version.string), 
[10:25:33.400]                             platform = base::sprintf("%s (%s-bit)", 
[10:25:33.400]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:25:33.400]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[10:25:33.400]                               "release", "version")], collapse = " "), 
[10:25:33.400]                             hostname = base::Sys.info()[["nodename"]])
[10:25:33.400]                           info <- base::sprintf("%s: %s", base::names(info), 
[10:25:33.400]                             info)
[10:25:33.400]                           info <- base::paste(info, collapse = "; ")
[10:25:33.400]                           if (!has_future) {
[10:25:33.400]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:25:33.400]                               info)
[10:25:33.400]                           }
[10:25:33.400]                           else {
[10:25:33.400]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:25:33.400]                               info, version)
[10:25:33.400]                           }
[10:25:33.400]                           base::stop(msg)
[10:25:33.400]                         }
[10:25:33.400]                       })
[10:25:33.400]                     }
[10:25:33.400]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[10:25:33.400]                     base::options(mc.cores = 1L)
[10:25:33.400]                   }
[10:25:33.400]                   options(future.plan = NULL)
[10:25:33.400]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:25:33.400]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:25:33.400]                 }
[10:25:33.400]                 ...future.workdir <- getwd()
[10:25:33.400]             }
[10:25:33.400]             ...future.oldOptions <- base::as.list(base::.Options)
[10:25:33.400]             ...future.oldEnvVars <- base::Sys.getenv()
[10:25:33.400]         }
[10:25:33.400]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:25:33.400]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[10:25:33.400]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:25:33.400]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:25:33.400]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:25:33.400]             future.stdout.windows.reencode = NULL, width = 80L)
[10:25:33.400]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:25:33.400]             base::names(...future.oldOptions))
[10:25:33.400]     }
[10:25:33.400]     if (FALSE) {
[10:25:33.400]     }
[10:25:33.400]     else {
[10:25:33.400]         if (TRUE) {
[10:25:33.400]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:25:33.400]                 open = "w")
[10:25:33.400]         }
[10:25:33.400]         else {
[10:25:33.400]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:25:33.400]                 windows = "NUL", "/dev/null"), open = "w")
[10:25:33.400]         }
[10:25:33.400]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:25:33.400]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:25:33.400]             base::sink(type = "output", split = FALSE)
[10:25:33.400]             base::close(...future.stdout)
[10:25:33.400]         }, add = TRUE)
[10:25:33.400]     }
[10:25:33.400]     ...future.frame <- base::sys.nframe()
[10:25:33.400]     ...future.conditions <- base::list()
[10:25:33.400]     ...future.rng <- base::globalenv()$.Random.seed
[10:25:33.400]     if (FALSE) {
[10:25:33.400]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:25:33.400]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:25:33.400]     }
[10:25:33.400]     ...future.result <- base::tryCatch({
[10:25:33.400]         base::withCallingHandlers({
[10:25:33.400]             ...future.value <- base::withVisible(base::local({
[10:25:33.400]                 ...future.makeSendCondition <- base::local({
[10:25:33.400]                   sendCondition <- NULL
[10:25:33.400]                   function(frame = 1L) {
[10:25:33.400]                     if (is.function(sendCondition)) 
[10:25:33.400]                       return(sendCondition)
[10:25:33.400]                     ns <- getNamespace("parallel")
[10:25:33.400]                     if (exists("sendData", mode = "function", 
[10:25:33.400]                       envir = ns)) {
[10:25:33.400]                       parallel_sendData <- get("sendData", mode = "function", 
[10:25:33.400]                         envir = ns)
[10:25:33.400]                       envir <- sys.frame(frame)
[10:25:33.400]                       master <- NULL
[10:25:33.400]                       while (!identical(envir, .GlobalEnv) && 
[10:25:33.400]                         !identical(envir, emptyenv())) {
[10:25:33.400]                         if (exists("master", mode = "list", envir = envir, 
[10:25:33.400]                           inherits = FALSE)) {
[10:25:33.400]                           master <- get("master", mode = "list", 
[10:25:33.400]                             envir = envir, inherits = FALSE)
[10:25:33.400]                           if (inherits(master, c("SOCKnode", 
[10:25:33.400]                             "SOCK0node"))) {
[10:25:33.400]                             sendCondition <<- function(cond) {
[10:25:33.400]                               data <- list(type = "VALUE", value = cond, 
[10:25:33.400]                                 success = TRUE)
[10:25:33.400]                               parallel_sendData(master, data)
[10:25:33.400]                             }
[10:25:33.400]                             return(sendCondition)
[10:25:33.400]                           }
[10:25:33.400]                         }
[10:25:33.400]                         frame <- frame + 1L
[10:25:33.400]                         envir <- sys.frame(frame)
[10:25:33.400]                       }
[10:25:33.400]                     }
[10:25:33.400]                     sendCondition <<- function(cond) NULL
[10:25:33.400]                   }
[10:25:33.400]                 })
[10:25:33.400]                 withCallingHandlers({
[10:25:33.400]                   NA
[10:25:33.400]                 }, immediateCondition = function(cond) {
[10:25:33.400]                   sendCondition <- ...future.makeSendCondition()
[10:25:33.400]                   sendCondition(cond)
[10:25:33.400]                   muffleCondition <- function (cond, pattern = "^muffle") 
[10:25:33.400]                   {
[10:25:33.400]                     inherits <- base::inherits
[10:25:33.400]                     invokeRestart <- base::invokeRestart
[10:25:33.400]                     is.null <- base::is.null
[10:25:33.400]                     muffled <- FALSE
[10:25:33.400]                     if (inherits(cond, "message")) {
[10:25:33.400]                       muffled <- grepl(pattern, "muffleMessage")
[10:25:33.400]                       if (muffled) 
[10:25:33.400]                         invokeRestart("muffleMessage")
[10:25:33.400]                     }
[10:25:33.400]                     else if (inherits(cond, "warning")) {
[10:25:33.400]                       muffled <- grepl(pattern, "muffleWarning")
[10:25:33.400]                       if (muffled) 
[10:25:33.400]                         invokeRestart("muffleWarning")
[10:25:33.400]                     }
[10:25:33.400]                     else if (inherits(cond, "condition")) {
[10:25:33.400]                       if (!is.null(pattern)) {
[10:25:33.400]                         computeRestarts <- base::computeRestarts
[10:25:33.400]                         grepl <- base::grepl
[10:25:33.400]                         restarts <- computeRestarts(cond)
[10:25:33.400]                         for (restart in restarts) {
[10:25:33.400]                           name <- restart$name
[10:25:33.400]                           if (is.null(name)) 
[10:25:33.400]                             next
[10:25:33.400]                           if (!grepl(pattern, name)) 
[10:25:33.400]                             next
[10:25:33.400]                           invokeRestart(restart)
[10:25:33.400]                           muffled <- TRUE
[10:25:33.400]                           break
[10:25:33.400]                         }
[10:25:33.400]                       }
[10:25:33.400]                     }
[10:25:33.400]                     invisible(muffled)
[10:25:33.400]                   }
[10:25:33.400]                   muffleCondition(cond)
[10:25:33.400]                 })
[10:25:33.400]             }))
[10:25:33.400]             future::FutureResult(value = ...future.value$value, 
[10:25:33.400]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:25:33.400]                   ...future.rng), globalenv = if (FALSE) 
[10:25:33.400]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:25:33.400]                     ...future.globalenv.names))
[10:25:33.400]                 else NULL, started = ...future.startTime, version = "1.8")
[10:25:33.400]         }, condition = base::local({
[10:25:33.400]             c <- base::c
[10:25:33.400]             inherits <- base::inherits
[10:25:33.400]             invokeRestart <- base::invokeRestart
[10:25:33.400]             length <- base::length
[10:25:33.400]             list <- base::list
[10:25:33.400]             seq.int <- base::seq.int
[10:25:33.400]             signalCondition <- base::signalCondition
[10:25:33.400]             sys.calls <- base::sys.calls
[10:25:33.400]             `[[` <- base::`[[`
[10:25:33.400]             `+` <- base::`+`
[10:25:33.400]             `<<-` <- base::`<<-`
[10:25:33.400]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:25:33.400]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:25:33.400]                   3L)]
[10:25:33.400]             }
[10:25:33.400]             function(cond) {
[10:25:33.400]                 is_error <- inherits(cond, "error")
[10:25:33.400]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:25:33.400]                   NULL)
[10:25:33.400]                 if (is_error) {
[10:25:33.400]                   sessionInformation <- function() {
[10:25:33.400]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:25:33.400]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:25:33.400]                       search = base::search(), system = base::Sys.info())
[10:25:33.400]                   }
[10:25:33.400]                   ...future.conditions[[length(...future.conditions) + 
[10:25:33.400]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:25:33.400]                     cond$call), session = sessionInformation(), 
[10:25:33.400]                     timestamp = base::Sys.time(), signaled = 0L)
[10:25:33.400]                   signalCondition(cond)
[10:25:33.400]                 }
[10:25:33.400]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:25:33.400]                 "immediateCondition"))) {
[10:25:33.400]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:25:33.400]                   ...future.conditions[[length(...future.conditions) + 
[10:25:33.400]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:25:33.400]                   if (TRUE && !signal) {
[10:25:33.400]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:25:33.400]                     {
[10:25:33.400]                       inherits <- base::inherits
[10:25:33.400]                       invokeRestart <- base::invokeRestart
[10:25:33.400]                       is.null <- base::is.null
[10:25:33.400]                       muffled <- FALSE
[10:25:33.400]                       if (inherits(cond, "message")) {
[10:25:33.400]                         muffled <- grepl(pattern, "muffleMessage")
[10:25:33.400]                         if (muffled) 
[10:25:33.400]                           invokeRestart("muffleMessage")
[10:25:33.400]                       }
[10:25:33.400]                       else if (inherits(cond, "warning")) {
[10:25:33.400]                         muffled <- grepl(pattern, "muffleWarning")
[10:25:33.400]                         if (muffled) 
[10:25:33.400]                           invokeRestart("muffleWarning")
[10:25:33.400]                       }
[10:25:33.400]                       else if (inherits(cond, "condition")) {
[10:25:33.400]                         if (!is.null(pattern)) {
[10:25:33.400]                           computeRestarts <- base::computeRestarts
[10:25:33.400]                           grepl <- base::grepl
[10:25:33.400]                           restarts <- computeRestarts(cond)
[10:25:33.400]                           for (restart in restarts) {
[10:25:33.400]                             name <- restart$name
[10:25:33.400]                             if (is.null(name)) 
[10:25:33.400]                               next
[10:25:33.400]                             if (!grepl(pattern, name)) 
[10:25:33.400]                               next
[10:25:33.400]                             invokeRestart(restart)
[10:25:33.400]                             muffled <- TRUE
[10:25:33.400]                             break
[10:25:33.400]                           }
[10:25:33.400]                         }
[10:25:33.400]                       }
[10:25:33.400]                       invisible(muffled)
[10:25:33.400]                     }
[10:25:33.400]                     muffleCondition(cond, pattern = "^muffle")
[10:25:33.400]                   }
[10:25:33.400]                 }
[10:25:33.400]                 else {
[10:25:33.400]                   if (TRUE) {
[10:25:33.400]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:25:33.400]                     {
[10:25:33.400]                       inherits <- base::inherits
[10:25:33.400]                       invokeRestart <- base::invokeRestart
[10:25:33.400]                       is.null <- base::is.null
[10:25:33.400]                       muffled <- FALSE
[10:25:33.400]                       if (inherits(cond, "message")) {
[10:25:33.400]                         muffled <- grepl(pattern, "muffleMessage")
[10:25:33.400]                         if (muffled) 
[10:25:33.400]                           invokeRestart("muffleMessage")
[10:25:33.400]                       }
[10:25:33.400]                       else if (inherits(cond, "warning")) {
[10:25:33.400]                         muffled <- grepl(pattern, "muffleWarning")
[10:25:33.400]                         if (muffled) 
[10:25:33.400]                           invokeRestart("muffleWarning")
[10:25:33.400]                       }
[10:25:33.400]                       else if (inherits(cond, "condition")) {
[10:25:33.400]                         if (!is.null(pattern)) {
[10:25:33.400]                           computeRestarts <- base::computeRestarts
[10:25:33.400]                           grepl <- base::grepl
[10:25:33.400]                           restarts <- computeRestarts(cond)
[10:25:33.400]                           for (restart in restarts) {
[10:25:33.400]                             name <- restart$name
[10:25:33.400]                             if (is.null(name)) 
[10:25:33.400]                               next
[10:25:33.400]                             if (!grepl(pattern, name)) 
[10:25:33.400]                               next
[10:25:33.400]                             invokeRestart(restart)
[10:25:33.400]                             muffled <- TRUE
[10:25:33.400]                             break
[10:25:33.400]                           }
[10:25:33.400]                         }
[10:25:33.400]                       }
[10:25:33.400]                       invisible(muffled)
[10:25:33.400]                     }
[10:25:33.400]                     muffleCondition(cond, pattern = "^muffle")
[10:25:33.400]                   }
[10:25:33.400]                 }
[10:25:33.400]             }
[10:25:33.400]         }))
[10:25:33.400]     }, error = function(ex) {
[10:25:33.400]         base::structure(base::list(value = NULL, visible = NULL, 
[10:25:33.400]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:25:33.400]                 ...future.rng), started = ...future.startTime, 
[10:25:33.400]             finished = Sys.time(), session_uuid = NA_character_, 
[10:25:33.400]             version = "1.8"), class = "FutureResult")
[10:25:33.400]     }, finally = {
[10:25:33.400]         if (!identical(...future.workdir, getwd())) 
[10:25:33.400]             setwd(...future.workdir)
[10:25:33.400]         {
[10:25:33.400]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:25:33.400]                 ...future.oldOptions$nwarnings <- NULL
[10:25:33.400]             }
[10:25:33.400]             base::options(...future.oldOptions)
[10:25:33.400]             if (.Platform$OS.type == "windows") {
[10:25:33.400]                 old_names <- names(...future.oldEnvVars)
[10:25:33.400]                 envs <- base::Sys.getenv()
[10:25:33.400]                 names <- names(envs)
[10:25:33.400]                 common <- intersect(names, old_names)
[10:25:33.400]                 added <- setdiff(names, old_names)
[10:25:33.400]                 removed <- setdiff(old_names, names)
[10:25:33.400]                 changed <- common[...future.oldEnvVars[common] != 
[10:25:33.400]                   envs[common]]
[10:25:33.400]                 NAMES <- toupper(changed)
[10:25:33.400]                 args <- list()
[10:25:33.400]                 for (kk in seq_along(NAMES)) {
[10:25:33.400]                   name <- changed[[kk]]
[10:25:33.400]                   NAME <- NAMES[[kk]]
[10:25:33.400]                   if (name != NAME && is.element(NAME, old_names)) 
[10:25:33.400]                     next
[10:25:33.400]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:25:33.400]                 }
[10:25:33.400]                 NAMES <- toupper(added)
[10:25:33.400]                 for (kk in seq_along(NAMES)) {
[10:25:33.400]                   name <- added[[kk]]
[10:25:33.400]                   NAME <- NAMES[[kk]]
[10:25:33.400]                   if (name != NAME && is.element(NAME, old_names)) 
[10:25:33.400]                     next
[10:25:33.400]                   args[[name]] <- ""
[10:25:33.400]                 }
[10:25:33.400]                 NAMES <- toupper(removed)
[10:25:33.400]                 for (kk in seq_along(NAMES)) {
[10:25:33.400]                   name <- removed[[kk]]
[10:25:33.400]                   NAME <- NAMES[[kk]]
[10:25:33.400]                   if (name != NAME && is.element(NAME, old_names)) 
[10:25:33.400]                     next
[10:25:33.400]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:25:33.400]                 }
[10:25:33.400]                 if (length(args) > 0) 
[10:25:33.400]                   base::do.call(base::Sys.setenv, args = args)
[10:25:33.400]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:25:33.400]             }
[10:25:33.400]             else {
[10:25:33.400]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:25:33.400]             }
[10:25:33.400]             {
[10:25:33.400]                 if (base::length(...future.futureOptionsAdded) > 
[10:25:33.400]                   0L) {
[10:25:33.400]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:25:33.400]                   base::names(opts) <- ...future.futureOptionsAdded
[10:25:33.400]                   base::options(opts)
[10:25:33.400]                 }
[10:25:33.400]                 {
[10:25:33.400]                   {
[10:25:33.400]                     base::options(mc.cores = ...future.mc.cores.old)
[10:25:33.400]                     NULL
[10:25:33.400]                   }
[10:25:33.400]                   options(future.plan = NULL)
[10:25:33.400]                   if (is.na(NA_character_)) 
[10:25:33.400]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:25:33.400]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:25:33.400]                   future::plan(list(function (..., workers = availableCores(), 
[10:25:33.400]                     lazy = FALSE, rscript_libs = .libPaths(), 
[10:25:33.400]                     envir = parent.frame()) 
[10:25:33.400]                   {
[10:25:33.400]                     if (is.function(workers)) 
[10:25:33.400]                       workers <- workers()
[10:25:33.400]                     workers <- structure(as.integer(workers), 
[10:25:33.400]                       class = class(workers))
[10:25:33.400]                     stop_if_not(length(workers) == 1, is.finite(workers), 
[10:25:33.400]                       workers >= 1)
[10:25:33.400]                     if (workers == 1L && !inherits(workers, "AsIs")) {
[10:25:33.400]                       return(sequential(..., lazy = TRUE, envir = envir))
[10:25:33.400]                     }
[10:25:33.400]                     future <- MultisessionFuture(..., workers = workers, 
[10:25:33.400]                       lazy = lazy, rscript_libs = rscript_libs, 
[10:25:33.400]                       envir = envir)
[10:25:33.400]                     if (!future$lazy) 
[10:25:33.400]                       future <- run(future)
[10:25:33.400]                     invisible(future)
[10:25:33.400]                   }), .cleanup = FALSE, .init = FALSE)
[10:25:33.400]                 }
[10:25:33.400]             }
[10:25:33.400]         }
[10:25:33.400]     })
[10:25:33.400]     if (TRUE) {
[10:25:33.400]         base::sink(type = "output", split = FALSE)
[10:25:33.400]         if (TRUE) {
[10:25:33.400]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:25:33.400]         }
[10:25:33.400]         else {
[10:25:33.400]             ...future.result["stdout"] <- base::list(NULL)
[10:25:33.400]         }
[10:25:33.400]         base::close(...future.stdout)
[10:25:33.400]         ...future.stdout <- NULL
[10:25:33.400]     }
[10:25:33.400]     ...future.result$conditions <- ...future.conditions
[10:25:33.400]     ...future.result$finished <- base::Sys.time()
[10:25:33.400]     ...future.result
[10:25:33.400] }
[10:25:33.454] MultisessionFuture started
[10:25:33.454] result() for ClusterFuture ...
[10:25:33.455] receiveMessageFromWorker() for ClusterFuture ...
[10:25:33.455] - Validating connection of MultisessionFuture
[10:25:33.498] - received message: FutureResult
[10:25:33.499] - Received FutureResult
[10:25:33.499] - Erased future from FutureRegistry
[10:25:33.499] result() for ClusterFuture ...
[10:25:33.499] - result already collected: FutureResult
[10:25:33.499] result() for ClusterFuture ... done
[10:25:33.499] receiveMessageFromWorker() for ClusterFuture ... done
[10:25:33.499] result() for ClusterFuture ... done
[10:25:33.499] result() for ClusterFuture ...
[10:25:33.500] - result already collected: FutureResult
[10:25:33.500] result() for ClusterFuture ... done
[10:25:33.500] plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ... DONE
[10:25:33.504] plan(): nbrOfWorkers() = 2
[10:25:33.507] getGlobalsAndPackages() ...
[10:25:33.507] 
[10:25:33.507] - globals: [0] <none>
[10:25:33.507] getGlobalsAndPackages() ... DONE
[10:25:33.519] Packages needed by the future expression (n = 0): <none>
[10:25:33.519] Packages needed by future strategies (n = 0): <none>
[10:25:33.519] {
[10:25:33.519]     {
[10:25:33.519]         {
[10:25:33.519]             ...future.startTime <- base::Sys.time()
[10:25:33.519]             {
[10:25:33.519]                 {
[10:25:33.519]                   {
[10:25:33.519]                     {
[10:25:33.519]                       base::local({
[10:25:33.519]                         has_future <- base::requireNamespace("future", 
[10:25:33.519]                           quietly = TRUE)
[10:25:33.519]                         if (has_future) {
[10:25:33.519]                           ns <- base::getNamespace("future")
[10:25:33.519]                           version <- ns[[".package"]][["version"]]
[10:25:33.519]                           if (is.null(version)) 
[10:25:33.519]                             version <- utils::packageVersion("future")
[10:25:33.519]                         }
[10:25:33.519]                         else {
[10:25:33.519]                           version <- NULL
[10:25:33.519]                         }
[10:25:33.519]                         if (!has_future || version < "1.8.0") {
[10:25:33.519]                           info <- base::c(r_version = base::gsub("R version ", 
[10:25:33.519]                             "", base::R.version$version.string), 
[10:25:33.519]                             platform = base::sprintf("%s (%s-bit)", 
[10:25:33.519]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:25:33.519]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[10:25:33.519]                               "release", "version")], collapse = " "), 
[10:25:33.519]                             hostname = base::Sys.info()[["nodename"]])
[10:25:33.519]                           info <- base::sprintf("%s: %s", base::names(info), 
[10:25:33.519]                             info)
[10:25:33.519]                           info <- base::paste(info, collapse = "; ")
[10:25:33.519]                           if (!has_future) {
[10:25:33.519]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:25:33.519]                               info)
[10:25:33.519]                           }
[10:25:33.519]                           else {
[10:25:33.519]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:25:33.519]                               info, version)
[10:25:33.519]                           }
[10:25:33.519]                           base::stop(msg)
[10:25:33.519]                         }
[10:25:33.519]                       })
[10:25:33.519]                     }
[10:25:33.519]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[10:25:33.519]                     base::options(mc.cores = 1L)
[10:25:33.519]                   }
[10:25:33.519]                   options(future.plan = NULL)
[10:25:33.519]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:25:33.519]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:25:33.519]                 }
[10:25:33.519]                 ...future.workdir <- getwd()
[10:25:33.519]             }
[10:25:33.519]             ...future.oldOptions <- base::as.list(base::.Options)
[10:25:33.519]             ...future.oldEnvVars <- base::Sys.getenv()
[10:25:33.519]         }
[10:25:33.519]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:25:33.519]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[10:25:33.519]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:25:33.519]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:25:33.519]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:25:33.519]             future.stdout.windows.reencode = NULL, width = 80L)
[10:25:33.519]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:25:33.519]             base::names(...future.oldOptions))
[10:25:33.519]     }
[10:25:33.519]     if (FALSE) {
[10:25:33.519]     }
[10:25:33.519]     else {
[10:25:33.519]         if (TRUE) {
[10:25:33.519]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:25:33.519]                 open = "w")
[10:25:33.519]         }
[10:25:33.519]         else {
[10:25:33.519]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:25:33.519]                 windows = "NUL", "/dev/null"), open = "w")
[10:25:33.519]         }
[10:25:33.519]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:25:33.519]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:25:33.519]             base::sink(type = "output", split = FALSE)
[10:25:33.519]             base::close(...future.stdout)
[10:25:33.519]         }, add = TRUE)
[10:25:33.519]     }
[10:25:33.519]     ...future.frame <- base::sys.nframe()
[10:25:33.519]     ...future.conditions <- base::list()
[10:25:33.519]     ...future.rng <- base::globalenv()$.Random.seed
[10:25:33.519]     if (FALSE) {
[10:25:33.519]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:25:33.519]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:25:33.519]     }
[10:25:33.519]     ...future.result <- base::tryCatch({
[10:25:33.519]         base::withCallingHandlers({
[10:25:33.519]             ...future.value <- base::withVisible(base::local({
[10:25:33.519]                 ...future.makeSendCondition <- base::local({
[10:25:33.519]                   sendCondition <- NULL
[10:25:33.519]                   function(frame = 1L) {
[10:25:33.519]                     if (is.function(sendCondition)) 
[10:25:33.519]                       return(sendCondition)
[10:25:33.519]                     ns <- getNamespace("parallel")
[10:25:33.519]                     if (exists("sendData", mode = "function", 
[10:25:33.519]                       envir = ns)) {
[10:25:33.519]                       parallel_sendData <- get("sendData", mode = "function", 
[10:25:33.519]                         envir = ns)
[10:25:33.519]                       envir <- sys.frame(frame)
[10:25:33.519]                       master <- NULL
[10:25:33.519]                       while (!identical(envir, .GlobalEnv) && 
[10:25:33.519]                         !identical(envir, emptyenv())) {
[10:25:33.519]                         if (exists("master", mode = "list", envir = envir, 
[10:25:33.519]                           inherits = FALSE)) {
[10:25:33.519]                           master <- get("master", mode = "list", 
[10:25:33.519]                             envir = envir, inherits = FALSE)
[10:25:33.519]                           if (inherits(master, c("SOCKnode", 
[10:25:33.519]                             "SOCK0node"))) {
[10:25:33.519]                             sendCondition <<- function(cond) {
[10:25:33.519]                               data <- list(type = "VALUE", value = cond, 
[10:25:33.519]                                 success = TRUE)
[10:25:33.519]                               parallel_sendData(master, data)
[10:25:33.519]                             }
[10:25:33.519]                             return(sendCondition)
[10:25:33.519]                           }
[10:25:33.519]                         }
[10:25:33.519]                         frame <- frame + 1L
[10:25:33.519]                         envir <- sys.frame(frame)
[10:25:33.519]                       }
[10:25:33.519]                     }
[10:25:33.519]                     sendCondition <<- function(cond) NULL
[10:25:33.519]                   }
[10:25:33.519]                 })
[10:25:33.519]                 withCallingHandlers({
[10:25:33.519]                   42
[10:25:33.519]                 }, immediateCondition = function(cond) {
[10:25:33.519]                   sendCondition <- ...future.makeSendCondition()
[10:25:33.519]                   sendCondition(cond)
[10:25:33.519]                   muffleCondition <- function (cond, pattern = "^muffle") 
[10:25:33.519]                   {
[10:25:33.519]                     inherits <- base::inherits
[10:25:33.519]                     invokeRestart <- base::invokeRestart
[10:25:33.519]                     is.null <- base::is.null
[10:25:33.519]                     muffled <- FALSE
[10:25:33.519]                     if (inherits(cond, "message")) {
[10:25:33.519]                       muffled <- grepl(pattern, "muffleMessage")
[10:25:33.519]                       if (muffled) 
[10:25:33.519]                         invokeRestart("muffleMessage")
[10:25:33.519]                     }
[10:25:33.519]                     else if (inherits(cond, "warning")) {
[10:25:33.519]                       muffled <- grepl(pattern, "muffleWarning")
[10:25:33.519]                       if (muffled) 
[10:25:33.519]                         invokeRestart("muffleWarning")
[10:25:33.519]                     }
[10:25:33.519]                     else if (inherits(cond, "condition")) {
[10:25:33.519]                       if (!is.null(pattern)) {
[10:25:33.519]                         computeRestarts <- base::computeRestarts
[10:25:33.519]                         grepl <- base::grepl
[10:25:33.519]                         restarts <- computeRestarts(cond)
[10:25:33.519]                         for (restart in restarts) {
[10:25:33.519]                           name <- restart$name
[10:25:33.519]                           if (is.null(name)) 
[10:25:33.519]                             next
[10:25:33.519]                           if (!grepl(pattern, name)) 
[10:25:33.519]                             next
[10:25:33.519]                           invokeRestart(restart)
[10:25:33.519]                           muffled <- TRUE
[10:25:33.519]                           break
[10:25:33.519]                         }
[10:25:33.519]                       }
[10:25:33.519]                     }
[10:25:33.519]                     invisible(muffled)
[10:25:33.519]                   }
[10:25:33.519]                   muffleCondition(cond)
[10:25:33.519]                 })
[10:25:33.519]             }))
[10:25:33.519]             future::FutureResult(value = ...future.value$value, 
[10:25:33.519]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:25:33.519]                   ...future.rng), globalenv = if (FALSE) 
[10:25:33.519]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:25:33.519]                     ...future.globalenv.names))
[10:25:33.519]                 else NULL, started = ...future.startTime, version = "1.8")
[10:25:33.519]         }, condition = base::local({
[10:25:33.519]             c <- base::c
[10:25:33.519]             inherits <- base::inherits
[10:25:33.519]             invokeRestart <- base::invokeRestart
[10:25:33.519]             length <- base::length
[10:25:33.519]             list <- base::list
[10:25:33.519]             seq.int <- base::seq.int
[10:25:33.519]             signalCondition <- base::signalCondition
[10:25:33.519]             sys.calls <- base::sys.calls
[10:25:33.519]             `[[` <- base::`[[`
[10:25:33.519]             `+` <- base::`+`
[10:25:33.519]             `<<-` <- base::`<<-`
[10:25:33.519]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:25:33.519]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:25:33.519]                   3L)]
[10:25:33.519]             }
[10:25:33.519]             function(cond) {
[10:25:33.519]                 is_error <- inherits(cond, "error")
[10:25:33.519]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:25:33.519]                   NULL)
[10:25:33.519]                 if (is_error) {
[10:25:33.519]                   sessionInformation <- function() {
[10:25:33.519]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:25:33.519]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:25:33.519]                       search = base::search(), system = base::Sys.info())
[10:25:33.519]                   }
[10:25:33.519]                   ...future.conditions[[length(...future.conditions) + 
[10:25:33.519]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:25:33.519]                     cond$call), session = sessionInformation(), 
[10:25:33.519]                     timestamp = base::Sys.time(), signaled = 0L)
[10:25:33.519]                   signalCondition(cond)
[10:25:33.519]                 }
[10:25:33.519]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:25:33.519]                 "immediateCondition"))) {
[10:25:33.519]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:25:33.519]                   ...future.conditions[[length(...future.conditions) + 
[10:25:33.519]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:25:33.519]                   if (TRUE && !signal) {
[10:25:33.519]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:25:33.519]                     {
[10:25:33.519]                       inherits <- base::inherits
[10:25:33.519]                       invokeRestart <- base::invokeRestart
[10:25:33.519]                       is.null <- base::is.null
[10:25:33.519]                       muffled <- FALSE
[10:25:33.519]                       if (inherits(cond, "message")) {
[10:25:33.519]                         muffled <- grepl(pattern, "muffleMessage")
[10:25:33.519]                         if (muffled) 
[10:25:33.519]                           invokeRestart("muffleMessage")
[10:25:33.519]                       }
[10:25:33.519]                       else if (inherits(cond, "warning")) {
[10:25:33.519]                         muffled <- grepl(pattern, "muffleWarning")
[10:25:33.519]                         if (muffled) 
[10:25:33.519]                           invokeRestart("muffleWarning")
[10:25:33.519]                       }
[10:25:33.519]                       else if (inherits(cond, "condition")) {
[10:25:33.519]                         if (!is.null(pattern)) {
[10:25:33.519]                           computeRestarts <- base::computeRestarts
[10:25:33.519]                           grepl <- base::grepl
[10:25:33.519]                           restarts <- computeRestarts(cond)
[10:25:33.519]                           for (restart in restarts) {
[10:25:33.519]                             name <- restart$name
[10:25:33.519]                             if (is.null(name)) 
[10:25:33.519]                               next
[10:25:33.519]                             if (!grepl(pattern, name)) 
[10:25:33.519]                               next
[10:25:33.519]                             invokeRestart(restart)
[10:25:33.519]                             muffled <- TRUE
[10:25:33.519]                             break
[10:25:33.519]                           }
[10:25:33.519]                         }
[10:25:33.519]                       }
[10:25:33.519]                       invisible(muffled)
[10:25:33.519]                     }
[10:25:33.519]                     muffleCondition(cond, pattern = "^muffle")
[10:25:33.519]                   }
[10:25:33.519]                 }
[10:25:33.519]                 else {
[10:25:33.519]                   if (TRUE) {
[10:25:33.519]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:25:33.519]                     {
[10:25:33.519]                       inherits <- base::inherits
[10:25:33.519]                       invokeRestart <- base::invokeRestart
[10:25:33.519]                       is.null <- base::is.null
[10:25:33.519]                       muffled <- FALSE
[10:25:33.519]                       if (inherits(cond, "message")) {
[10:25:33.519]                         muffled <- grepl(pattern, "muffleMessage")
[10:25:33.519]                         if (muffled) 
[10:25:33.519]                           invokeRestart("muffleMessage")
[10:25:33.519]                       }
[10:25:33.519]                       else if (inherits(cond, "warning")) {
[10:25:33.519]                         muffled <- grepl(pattern, "muffleWarning")
[10:25:33.519]                         if (muffled) 
[10:25:33.519]                           invokeRestart("muffleWarning")
[10:25:33.519]                       }
[10:25:33.519]                       else if (inherits(cond, "condition")) {
[10:25:33.519]                         if (!is.null(pattern)) {
[10:25:33.519]                           computeRestarts <- base::computeRestarts
[10:25:33.519]                           grepl <- base::grepl
[10:25:33.519]                           restarts <- computeRestarts(cond)
[10:25:33.519]                           for (restart in restarts) {
[10:25:33.519]                             name <- restart$name
[10:25:33.519]                             if (is.null(name)) 
[10:25:33.519]                               next
[10:25:33.519]                             if (!grepl(pattern, name)) 
[10:25:33.519]                               next
[10:25:33.519]                             invokeRestart(restart)
[10:25:33.519]                             muffled <- TRUE
[10:25:33.519]                             break
[10:25:33.519]                           }
[10:25:33.519]                         }
[10:25:33.519]                       }
[10:25:33.519]                       invisible(muffled)
[10:25:33.519]                     }
[10:25:33.519]                     muffleCondition(cond, pattern = "^muffle")
[10:25:33.519]                   }
[10:25:33.519]                 }
[10:25:33.519]             }
[10:25:33.519]         }))
[10:25:33.519]     }, error = function(ex) {
[10:25:33.519]         base::structure(base::list(value = NULL, visible = NULL, 
[10:25:33.519]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:25:33.519]                 ...future.rng), started = ...future.startTime, 
[10:25:33.519]             finished = Sys.time(), session_uuid = NA_character_, 
[10:25:33.519]             version = "1.8"), class = "FutureResult")
[10:25:33.519]     }, finally = {
[10:25:33.519]         if (!identical(...future.workdir, getwd())) 
[10:25:33.519]             setwd(...future.workdir)
[10:25:33.519]         {
[10:25:33.519]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:25:33.519]                 ...future.oldOptions$nwarnings <- NULL
[10:25:33.519]             }
[10:25:33.519]             base::options(...future.oldOptions)
[10:25:33.519]             if (.Platform$OS.type == "windows") {
[10:25:33.519]                 old_names <- names(...future.oldEnvVars)
[10:25:33.519]                 envs <- base::Sys.getenv()
[10:25:33.519]                 names <- names(envs)
[10:25:33.519]                 common <- intersect(names, old_names)
[10:25:33.519]                 added <- setdiff(names, old_names)
[10:25:33.519]                 removed <- setdiff(old_names, names)
[10:25:33.519]                 changed <- common[...future.oldEnvVars[common] != 
[10:25:33.519]                   envs[common]]
[10:25:33.519]                 NAMES <- toupper(changed)
[10:25:33.519]                 args <- list()
[10:25:33.519]                 for (kk in seq_along(NAMES)) {
[10:25:33.519]                   name <- changed[[kk]]
[10:25:33.519]                   NAME <- NAMES[[kk]]
[10:25:33.519]                   if (name != NAME && is.element(NAME, old_names)) 
[10:25:33.519]                     next
[10:25:33.519]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:25:33.519]                 }
[10:25:33.519]                 NAMES <- toupper(added)
[10:25:33.519]                 for (kk in seq_along(NAMES)) {
[10:25:33.519]                   name <- added[[kk]]
[10:25:33.519]                   NAME <- NAMES[[kk]]
[10:25:33.519]                   if (name != NAME && is.element(NAME, old_names)) 
[10:25:33.519]                     next
[10:25:33.519]                   args[[name]] <- ""
[10:25:33.519]                 }
[10:25:33.519]                 NAMES <- toupper(removed)
[10:25:33.519]                 for (kk in seq_along(NAMES)) {
[10:25:33.519]                   name <- removed[[kk]]
[10:25:33.519]                   NAME <- NAMES[[kk]]
[10:25:33.519]                   if (name != NAME && is.element(NAME, old_names)) 
[10:25:33.519]                     next
[10:25:33.519]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:25:33.519]                 }
[10:25:33.519]                 if (length(args) > 0) 
[10:25:33.519]                   base::do.call(base::Sys.setenv, args = args)
[10:25:33.519]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:25:33.519]             }
[10:25:33.519]             else {
[10:25:33.519]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:25:33.519]             }
[10:25:33.519]             {
[10:25:33.519]                 if (base::length(...future.futureOptionsAdded) > 
[10:25:33.519]                   0L) {
[10:25:33.519]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:25:33.519]                   base::names(opts) <- ...future.futureOptionsAdded
[10:25:33.519]                   base::options(opts)
[10:25:33.519]                 }
[10:25:33.519]                 {
[10:25:33.519]                   {
[10:25:33.519]                     base::options(mc.cores = ...future.mc.cores.old)
[10:25:33.519]                     NULL
[10:25:33.519]                   }
[10:25:33.519]                   options(future.plan = NULL)
[10:25:33.519]                   if (is.na(NA_character_)) 
[10:25:33.519]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:25:33.519]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:25:33.519]                   future::plan(list(function (..., workers = availableCores(), 
[10:25:33.519]                     lazy = FALSE, rscript_libs = .libPaths(), 
[10:25:33.519]                     envir = parent.frame()) 
[10:25:33.519]                   {
[10:25:33.519]                     if (is.function(workers)) 
[10:25:33.519]                       workers <- workers()
[10:25:33.519]                     workers <- structure(as.integer(workers), 
[10:25:33.519]                       class = class(workers))
[10:25:33.519]                     stop_if_not(length(workers) == 1, is.finite(workers), 
[10:25:33.519]                       workers >= 1)
[10:25:33.519]                     if (workers == 1L && !inherits(workers, "AsIs")) {
[10:25:33.519]                       return(sequential(..., lazy = TRUE, envir = envir))
[10:25:33.519]                     }
[10:25:33.519]                     future <- MultisessionFuture(..., workers = workers, 
[10:25:33.519]                       lazy = lazy, rscript_libs = rscript_libs, 
[10:25:33.519]                       envir = envir)
[10:25:33.519]                     if (!future$lazy) 
[10:25:33.519]                       future <- run(future)
[10:25:33.519]                     invisible(future)
[10:25:33.519]                   }), .cleanup = FALSE, .init = FALSE)
[10:25:33.519]                 }
[10:25:33.519]             }
[10:25:33.519]         }
[10:25:33.519]     })
[10:25:33.519]     if (TRUE) {
[10:25:33.519]         base::sink(type = "output", split = FALSE)
[10:25:33.519]         if (TRUE) {
[10:25:33.519]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:25:33.519]         }
[10:25:33.519]         else {
[10:25:33.519]             ...future.result["stdout"] <- base::list(NULL)
[10:25:33.519]         }
[10:25:33.519]         base::close(...future.stdout)
[10:25:33.519]         ...future.stdout <- NULL
[10:25:33.519]     }
[10:25:33.519]     ...future.result$conditions <- ...future.conditions
[10:25:33.519]     ...future.result$finished <- base::Sys.time()
[10:25:33.519]     ...future.result
[10:25:33.519] }
[10:25:33.523] MultisessionFuture started
MultisessionFuture:
Label: ‘<none>’
Expression:
[1] 42
Lazy evaluation: FALSE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: FALSE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: 378a73a7-17bc-11e5-cdc3-65eb29aceac6
Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[10:25:33.534] result() for ClusterFuture ...
[10:25:33.535] receiveMessageFromWorker() for ClusterFuture ...
[10:25:33.535] - Validating connection of MultisessionFuture
[10:25:33.570] - received message: FutureResult
[10:25:33.570] - Received FutureResult
[10:25:33.570] - Erased future from FutureRegistry
[10:25:33.570] result() for ClusterFuture ...
[10:25:33.571] - result already collected: FutureResult
[10:25:33.571] result() for ClusterFuture ... done
[10:25:33.571] receiveMessageFromWorker() for ClusterFuture ... done
[10:25:33.571] result() for ClusterFuture ... done
[10:25:33.571] result() for ClusterFuture ...
[10:25:33.571] - result already collected: FutureResult
[10:25:33.571] result() for ClusterFuture ... done
[10:25:33.571] getGlobalsAndPackages() ...
[10:25:33.571] Searching for globals...
[10:25:33.572] 
[10:25:33.572] Searching for globals ... DONE
[10:25:33.572] - globals: [0] <none>
[10:25:33.572] getGlobalsAndPackages() ... DONE
[10:25:33.573] run() for ‘Future’ ...
[10:25:33.573] - state: ‘created’
[10:25:33.573] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[10:25:33.587] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[10:25:33.587] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[10:25:33.587]   - Field: ‘node’
[10:25:33.587]   - Field: ‘label’
[10:25:33.587]   - Field: ‘local’
[10:25:33.588]   - Field: ‘owner’
[10:25:33.588]   - Field: ‘envir’
[10:25:33.588]   - Field: ‘workers’
[10:25:33.588]   - Field: ‘packages’
[10:25:33.588]   - Field: ‘gc’
[10:25:33.588]   - Field: ‘conditions’
[10:25:33.588]   - Field: ‘persistent’
[10:25:33.588]   - Field: ‘expr’
[10:25:33.588]   - Field: ‘uuid’
[10:25:33.589]   - Field: ‘seed’
[10:25:33.589]   - Field: ‘version’
[10:25:33.589]   - Field: ‘result’
[10:25:33.589]   - Field: ‘asynchronous’
[10:25:33.589]   - Field: ‘calls’
[10:25:33.589]   - Field: ‘globals’
[10:25:33.589]   - Field: ‘stdout’
[10:25:33.589]   - Field: ‘earlySignal’
[10:25:33.590]   - Field: ‘lazy’
[10:25:33.590]   - Field: ‘state’
[10:25:33.590] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[10:25:33.590] - Launch lazy future ...
[10:25:33.590] Packages needed by the future expression (n = 0): <none>
[10:25:33.590] Packages needed by future strategies (n = 0): <none>
[10:25:33.591] {
[10:25:33.591]     {
[10:25:33.591]         {
[10:25:33.591]             ...future.startTime <- base::Sys.time()
[10:25:33.591]             {
[10:25:33.591]                 {
[10:25:33.591]                   {
[10:25:33.591]                     {
[10:25:33.591]                       base::local({
[10:25:33.591]                         has_future <- base::requireNamespace("future", 
[10:25:33.591]                           quietly = TRUE)
[10:25:33.591]                         if (has_future) {
[10:25:33.591]                           ns <- base::getNamespace("future")
[10:25:33.591]                           version <- ns[[".package"]][["version"]]
[10:25:33.591]                           if (is.null(version)) 
[10:25:33.591]                             version <- utils::packageVersion("future")
[10:25:33.591]                         }
[10:25:33.591]                         else {
[10:25:33.591]                           version <- NULL
[10:25:33.591]                         }
[10:25:33.591]                         if (!has_future || version < "1.8.0") {
[10:25:33.591]                           info <- base::c(r_version = base::gsub("R version ", 
[10:25:33.591]                             "", base::R.version$version.string), 
[10:25:33.591]                             platform = base::sprintf("%s (%s-bit)", 
[10:25:33.591]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:25:33.591]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[10:25:33.591]                               "release", "version")], collapse = " "), 
[10:25:33.591]                             hostname = base::Sys.info()[["nodename"]])
[10:25:33.591]                           info <- base::sprintf("%s: %s", base::names(info), 
[10:25:33.591]                             info)
[10:25:33.591]                           info <- base::paste(info, collapse = "; ")
[10:25:33.591]                           if (!has_future) {
[10:25:33.591]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:25:33.591]                               info)
[10:25:33.591]                           }
[10:25:33.591]                           else {
[10:25:33.591]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:25:33.591]                               info, version)
[10:25:33.591]                           }
[10:25:33.591]                           base::stop(msg)
[10:25:33.591]                         }
[10:25:33.591]                       })
[10:25:33.591]                     }
[10:25:33.591]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[10:25:33.591]                     base::options(mc.cores = 1L)
[10:25:33.591]                   }
[10:25:33.591]                   options(future.plan = NULL)
[10:25:33.591]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:25:33.591]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:25:33.591]                 }
[10:25:33.591]                 ...future.workdir <- getwd()
[10:25:33.591]             }
[10:25:33.591]             ...future.oldOptions <- base::as.list(base::.Options)
[10:25:33.591]             ...future.oldEnvVars <- base::Sys.getenv()
[10:25:33.591]         }
[10:25:33.591]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:25:33.591]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[10:25:33.591]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:25:33.591]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:25:33.591]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:25:33.591]             future.stdout.windows.reencode = NULL, width = 80L)
[10:25:33.591]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:25:33.591]             base::names(...future.oldOptions))
[10:25:33.591]     }
[10:25:33.591]     if (FALSE) {
[10:25:33.591]     }
[10:25:33.591]     else {
[10:25:33.591]         if (TRUE) {
[10:25:33.591]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:25:33.591]                 open = "w")
[10:25:33.591]         }
[10:25:33.591]         else {
[10:25:33.591]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:25:33.591]                 windows = "NUL", "/dev/null"), open = "w")
[10:25:33.591]         }
[10:25:33.591]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:25:33.591]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:25:33.591]             base::sink(type = "output", split = FALSE)
[10:25:33.591]             base::close(...future.stdout)
[10:25:33.591]         }, add = TRUE)
[10:25:33.591]     }
[10:25:33.591]     ...future.frame <- base::sys.nframe()
[10:25:33.591]     ...future.conditions <- base::list()
[10:25:33.591]     ...future.rng <- base::globalenv()$.Random.seed
[10:25:33.591]     if (FALSE) {
[10:25:33.591]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:25:33.591]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:25:33.591]     }
[10:25:33.591]     ...future.result <- base::tryCatch({
[10:25:33.591]         base::withCallingHandlers({
[10:25:33.591]             ...future.value <- base::withVisible(base::local({
[10:25:33.591]                 ...future.makeSendCondition <- base::local({
[10:25:33.591]                   sendCondition <- NULL
[10:25:33.591]                   function(frame = 1L) {
[10:25:33.591]                     if (is.function(sendCondition)) 
[10:25:33.591]                       return(sendCondition)
[10:25:33.591]                     ns <- getNamespace("parallel")
[10:25:33.591]                     if (exists("sendData", mode = "function", 
[10:25:33.591]                       envir = ns)) {
[10:25:33.591]                       parallel_sendData <- get("sendData", mode = "function", 
[10:25:33.591]                         envir = ns)
[10:25:33.591]                       envir <- sys.frame(frame)
[10:25:33.591]                       master <- NULL
[10:25:33.591]                       while (!identical(envir, .GlobalEnv) && 
[10:25:33.591]                         !identical(envir, emptyenv())) {
[10:25:33.591]                         if (exists("master", mode = "list", envir = envir, 
[10:25:33.591]                           inherits = FALSE)) {
[10:25:33.591]                           master <- get("master", mode = "list", 
[10:25:33.591]                             envir = envir, inherits = FALSE)
[10:25:33.591]                           if (inherits(master, c("SOCKnode", 
[10:25:33.591]                             "SOCK0node"))) {
[10:25:33.591]                             sendCondition <<- function(cond) {
[10:25:33.591]                               data <- list(type = "VALUE", value = cond, 
[10:25:33.591]                                 success = TRUE)
[10:25:33.591]                               parallel_sendData(master, data)
[10:25:33.591]                             }
[10:25:33.591]                             return(sendCondition)
[10:25:33.591]                           }
[10:25:33.591]                         }
[10:25:33.591]                         frame <- frame + 1L
[10:25:33.591]                         envir <- sys.frame(frame)
[10:25:33.591]                       }
[10:25:33.591]                     }
[10:25:33.591]                     sendCondition <<- function(cond) NULL
[10:25:33.591]                   }
[10:25:33.591]                 })
[10:25:33.591]                 withCallingHandlers({
[10:25:33.591]                   42
[10:25:33.591]                 }, immediateCondition = function(cond) {
[10:25:33.591]                   sendCondition <- ...future.makeSendCondition()
[10:25:33.591]                   sendCondition(cond)
[10:25:33.591]                   muffleCondition <- function (cond, pattern = "^muffle") 
[10:25:33.591]                   {
[10:25:33.591]                     inherits <- base::inherits
[10:25:33.591]                     invokeRestart <- base::invokeRestart
[10:25:33.591]                     is.null <- base::is.null
[10:25:33.591]                     muffled <- FALSE
[10:25:33.591]                     if (inherits(cond, "message")) {
[10:25:33.591]                       muffled <- grepl(pattern, "muffleMessage")
[10:25:33.591]                       if (muffled) 
[10:25:33.591]                         invokeRestart("muffleMessage")
[10:25:33.591]                     }
[10:25:33.591]                     else if (inherits(cond, "warning")) {
[10:25:33.591]                       muffled <- grepl(pattern, "muffleWarning")
[10:25:33.591]                       if (muffled) 
[10:25:33.591]                         invokeRestart("muffleWarning")
[10:25:33.591]                     }
[10:25:33.591]                     else if (inherits(cond, "condition")) {
[10:25:33.591]                       if (!is.null(pattern)) {
[10:25:33.591]                         computeRestarts <- base::computeRestarts
[10:25:33.591]                         grepl <- base::grepl
[10:25:33.591]                         restarts <- computeRestarts(cond)
[10:25:33.591]                         for (restart in restarts) {
[10:25:33.591]                           name <- restart$name
[10:25:33.591]                           if (is.null(name)) 
[10:25:33.591]                             next
[10:25:33.591]                           if (!grepl(pattern, name)) 
[10:25:33.591]                             next
[10:25:33.591]                           invokeRestart(restart)
[10:25:33.591]                           muffled <- TRUE
[10:25:33.591]                           break
[10:25:33.591]                         }
[10:25:33.591]                       }
[10:25:33.591]                     }
[10:25:33.591]                     invisible(muffled)
[10:25:33.591]                   }
[10:25:33.591]                   muffleCondition(cond)
[10:25:33.591]                 })
[10:25:33.591]             }))
[10:25:33.591]             future::FutureResult(value = ...future.value$value, 
[10:25:33.591]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:25:33.591]                   ...future.rng), globalenv = if (FALSE) 
[10:25:33.591]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:25:33.591]                     ...future.globalenv.names))
[10:25:33.591]                 else NULL, started = ...future.startTime, version = "1.8")
[10:25:33.591]         }, condition = base::local({
[10:25:33.591]             c <- base::c
[10:25:33.591]             inherits <- base::inherits
[10:25:33.591]             invokeRestart <- base::invokeRestart
[10:25:33.591]             length <- base::length
[10:25:33.591]             list <- base::list
[10:25:33.591]             seq.int <- base::seq.int
[10:25:33.591]             signalCondition <- base::signalCondition
[10:25:33.591]             sys.calls <- base::sys.calls
[10:25:33.591]             `[[` <- base::`[[`
[10:25:33.591]             `+` <- base::`+`
[10:25:33.591]             `<<-` <- base::`<<-`
[10:25:33.591]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:25:33.591]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:25:33.591]                   3L)]
[10:25:33.591]             }
[10:25:33.591]             function(cond) {
[10:25:33.591]                 is_error <- inherits(cond, "error")
[10:25:33.591]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:25:33.591]                   NULL)
[10:25:33.591]                 if (is_error) {
[10:25:33.591]                   sessionInformation <- function() {
[10:25:33.591]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:25:33.591]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:25:33.591]                       search = base::search(), system = base::Sys.info())
[10:25:33.591]                   }
[10:25:33.591]                   ...future.conditions[[length(...future.conditions) + 
[10:25:33.591]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:25:33.591]                     cond$call), session = sessionInformation(), 
[10:25:33.591]                     timestamp = base::Sys.time(), signaled = 0L)
[10:25:33.591]                   signalCondition(cond)
[10:25:33.591]                 }
[10:25:33.591]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:25:33.591]                 "immediateCondition"))) {
[10:25:33.591]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:25:33.591]                   ...future.conditions[[length(...future.conditions) + 
[10:25:33.591]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:25:33.591]                   if (TRUE && !signal) {
[10:25:33.591]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:25:33.591]                     {
[10:25:33.591]                       inherits <- base::inherits
[10:25:33.591]                       invokeRestart <- base::invokeRestart
[10:25:33.591]                       is.null <- base::is.null
[10:25:33.591]                       muffled <- FALSE
[10:25:33.591]                       if (inherits(cond, "message")) {
[10:25:33.591]                         muffled <- grepl(pattern, "muffleMessage")
[10:25:33.591]                         if (muffled) 
[10:25:33.591]                           invokeRestart("muffleMessage")
[10:25:33.591]                       }
[10:25:33.591]                       else if (inherits(cond, "warning")) {
[10:25:33.591]                         muffled <- grepl(pattern, "muffleWarning")
[10:25:33.591]                         if (muffled) 
[10:25:33.591]                           invokeRestart("muffleWarning")
[10:25:33.591]                       }
[10:25:33.591]                       else if (inherits(cond, "condition")) {
[10:25:33.591]                         if (!is.null(pattern)) {
[10:25:33.591]                           computeRestarts <- base::computeRestarts
[10:25:33.591]                           grepl <- base::grepl
[10:25:33.591]                           restarts <- computeRestarts(cond)
[10:25:33.591]                           for (restart in restarts) {
[10:25:33.591]                             name <- restart$name
[10:25:33.591]                             if (is.null(name)) 
[10:25:33.591]                               next
[10:25:33.591]                             if (!grepl(pattern, name)) 
[10:25:33.591]                               next
[10:25:33.591]                             invokeRestart(restart)
[10:25:33.591]                             muffled <- TRUE
[10:25:33.591]                             break
[10:25:33.591]                           }
[10:25:33.591]                         }
[10:25:33.591]                       }
[10:25:33.591]                       invisible(muffled)
[10:25:33.591]                     }
[10:25:33.591]                     muffleCondition(cond, pattern = "^muffle")
[10:25:33.591]                   }
[10:25:33.591]                 }
[10:25:33.591]                 else {
[10:25:33.591]                   if (TRUE) {
[10:25:33.591]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:25:33.591]                     {
[10:25:33.591]                       inherits <- base::inherits
[10:25:33.591]                       invokeRestart <- base::invokeRestart
[10:25:33.591]                       is.null <- base::is.null
[10:25:33.591]                       muffled <- FALSE
[10:25:33.591]                       if (inherits(cond, "message")) {
[10:25:33.591]                         muffled <- grepl(pattern, "muffleMessage")
[10:25:33.591]                         if (muffled) 
[10:25:33.591]                           invokeRestart("muffleMessage")
[10:25:33.591]                       }
[10:25:33.591]                       else if (inherits(cond, "warning")) {
[10:25:33.591]                         muffled <- grepl(pattern, "muffleWarning")
[10:25:33.591]                         if (muffled) 
[10:25:33.591]                           invokeRestart("muffleWarning")
[10:25:33.591]                       }
[10:25:33.591]                       else if (inherits(cond, "condition")) {
[10:25:33.591]                         if (!is.null(pattern)) {
[10:25:33.591]                           computeRestarts <- base::computeRestarts
[10:25:33.591]                           grepl <- base::grepl
[10:25:33.591]                           restarts <- computeRestarts(cond)
[10:25:33.591]                           for (restart in restarts) {
[10:25:33.591]                             name <- restart$name
[10:25:33.591]                             if (is.null(name)) 
[10:25:33.591]                               next
[10:25:33.591]                             if (!grepl(pattern, name)) 
[10:25:33.591]                               next
[10:25:33.591]                             invokeRestart(restart)
[10:25:33.591]                             muffled <- TRUE
[10:25:33.591]                             break
[10:25:33.591]                           }
[10:25:33.591]                         }
[10:25:33.591]                       }
[10:25:33.591]                       invisible(muffled)
[10:25:33.591]                     }
[10:25:33.591]                     muffleCondition(cond, pattern = "^muffle")
[10:25:33.591]                   }
[10:25:33.591]                 }
[10:25:33.591]             }
[10:25:33.591]         }))
[10:25:33.591]     }, error = function(ex) {
[10:25:33.591]         base::structure(base::list(value = NULL, visible = NULL, 
[10:25:33.591]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:25:33.591]                 ...future.rng), started = ...future.startTime, 
[10:25:33.591]             finished = Sys.time(), session_uuid = NA_character_, 
[10:25:33.591]             version = "1.8"), class = "FutureResult")
[10:25:33.591]     }, finally = {
[10:25:33.591]         if (!identical(...future.workdir, getwd())) 
[10:25:33.591]             setwd(...future.workdir)
[10:25:33.591]         {
[10:25:33.591]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:25:33.591]                 ...future.oldOptions$nwarnings <- NULL
[10:25:33.591]             }
[10:25:33.591]             base::options(...future.oldOptions)
[10:25:33.591]             if (.Platform$OS.type == "windows") {
[10:25:33.591]                 old_names <- names(...future.oldEnvVars)
[10:25:33.591]                 envs <- base::Sys.getenv()
[10:25:33.591]                 names <- names(envs)
[10:25:33.591]                 common <- intersect(names, old_names)
[10:25:33.591]                 added <- setdiff(names, old_names)
[10:25:33.591]                 removed <- setdiff(old_names, names)
[10:25:33.591]                 changed <- common[...future.oldEnvVars[common] != 
[10:25:33.591]                   envs[common]]
[10:25:33.591]                 NAMES <- toupper(changed)
[10:25:33.591]                 args <- list()
[10:25:33.591]                 for (kk in seq_along(NAMES)) {
[10:25:33.591]                   name <- changed[[kk]]
[10:25:33.591]                   NAME <- NAMES[[kk]]
[10:25:33.591]                   if (name != NAME && is.element(NAME, old_names)) 
[10:25:33.591]                     next
[10:25:33.591]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:25:33.591]                 }
[10:25:33.591]                 NAMES <- toupper(added)
[10:25:33.591]                 for (kk in seq_along(NAMES)) {
[10:25:33.591]                   name <- added[[kk]]
[10:25:33.591]                   NAME <- NAMES[[kk]]
[10:25:33.591]                   if (name != NAME && is.element(NAME, old_names)) 
[10:25:33.591]                     next
[10:25:33.591]                   args[[name]] <- ""
[10:25:33.591]                 }
[10:25:33.591]                 NAMES <- toupper(removed)
[10:25:33.591]                 for (kk in seq_along(NAMES)) {
[10:25:33.591]                   name <- removed[[kk]]
[10:25:33.591]                   NAME <- NAMES[[kk]]
[10:25:33.591]                   if (name != NAME && is.element(NAME, old_names)) 
[10:25:33.591]                     next
[10:25:33.591]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:25:33.591]                 }
[10:25:33.591]                 if (length(args) > 0) 
[10:25:33.591]                   base::do.call(base::Sys.setenv, args = args)
[10:25:33.591]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:25:33.591]             }
[10:25:33.591]             else {
[10:25:33.591]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:25:33.591]             }
[10:25:33.591]             {
[10:25:33.591]                 if (base::length(...future.futureOptionsAdded) > 
[10:25:33.591]                   0L) {
[10:25:33.591]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:25:33.591]                   base::names(opts) <- ...future.futureOptionsAdded
[10:25:33.591]                   base::options(opts)
[10:25:33.591]                 }
[10:25:33.591]                 {
[10:25:33.591]                   {
[10:25:33.591]                     base::options(mc.cores = ...future.mc.cores.old)
[10:25:33.591]                     NULL
[10:25:33.591]                   }
[10:25:33.591]                   options(future.plan = NULL)
[10:25:33.591]                   if (is.na(NA_character_)) 
[10:25:33.591]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:25:33.591]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:25:33.591]                   future::plan(list(function (..., workers = availableCores(), 
[10:25:33.591]                     lazy = FALSE, rscript_libs = .libPaths(), 
[10:25:33.591]                     envir = parent.frame()) 
[10:25:33.591]                   {
[10:25:33.591]                     if (is.function(workers)) 
[10:25:33.591]                       workers <- workers()
[10:25:33.591]                     workers <- structure(as.integer(workers), 
[10:25:33.591]                       class = class(workers))
[10:25:33.591]                     stop_if_not(length(workers) == 1, is.finite(workers), 
[10:25:33.591]                       workers >= 1)
[10:25:33.591]                     if (workers == 1L && !inherits(workers, "AsIs")) {
[10:25:33.591]                       return(sequential(..., lazy = TRUE, envir = envir))
[10:25:33.591]                     }
[10:25:33.591]                     future <- MultisessionFuture(..., workers = workers, 
[10:25:33.591]                       lazy = lazy, rscript_libs = rscript_libs, 
[10:25:33.591]                       envir = envir)
[10:25:33.591]                     if (!future$lazy) 
[10:25:33.591]                       future <- run(future)
[10:25:33.591]                     invisible(future)
[10:25:33.591]                   }), .cleanup = FALSE, .init = FALSE)
[10:25:33.591]                 }
[10:25:33.591]             }
[10:25:33.591]         }
[10:25:33.591]     })
[10:25:33.591]     if (TRUE) {
[10:25:33.591]         base::sink(type = "output", split = FALSE)
[10:25:33.591]         if (TRUE) {
[10:25:33.591]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:25:33.591]         }
[10:25:33.591]         else {
[10:25:33.591]             ...future.result["stdout"] <- base::list(NULL)
[10:25:33.591]         }
[10:25:33.591]         base::close(...future.stdout)
[10:25:33.591]         ...future.stdout <- NULL
[10:25:33.591]     }
[10:25:33.591]     ...future.result$conditions <- ...future.conditions
[10:25:33.591]     ...future.result$finished <- base::Sys.time()
[10:25:33.591]     ...future.result
[10:25:33.591] }
[10:25:33.594] MultisessionFuture started
[10:25:33.594] - Launch lazy future ... done
[10:25:33.595] run() for ‘MultisessionFuture’ ... done
MultisessionFuture:
Label: ‘<none>’
Expression:
[1] 42
Lazy evaluation: FALSE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: FALSE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: 378a73a7-17bc-11e5-cdc3-65eb29aceac6
Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[10:25:33.606] result() for ClusterFuture ...
[10:25:33.606] receiveMessageFromWorker() for ClusterFuture ...
[10:25:33.606] - Validating connection of MultisessionFuture
[10:25:33.642] - received message: FutureResult
[10:25:33.642] - Received FutureResult
[10:25:33.642] - Erased future from FutureRegistry
[10:25:33.642] result() for ClusterFuture ...
[10:25:33.642] - result already collected: FutureResult
[10:25:33.643] result() for ClusterFuture ... done
[10:25:33.643] receiveMessageFromWorker() for ClusterFuture ... done
[10:25:33.643] result() for ClusterFuture ... done
[10:25:33.643] result() for ClusterFuture ...
[10:25:33.643] - result already collected: FutureResult
[10:25:33.643] result() for ClusterFuture ... done
[10:25:33.643] getGlobalsAndPackages() ...
[10:25:33.644] Searching for globals...
[10:25:33.644] - globals found: [1] ‘{’
[10:25:33.645] Searching for globals ... DONE
[10:25:33.645] Resolving globals: FALSE
[10:25:33.645] 
[10:25:33.645] 
[10:25:33.645] getGlobalsAndPackages() ... DONE
[10:25:33.646] run() for ‘Future’ ...
[10:25:33.646] - state: ‘created’
[10:25:33.646] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[10:25:33.660] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[10:25:33.660] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[10:25:33.660]   - Field: ‘node’
[10:25:33.660]   - Field: ‘label’
[10:25:33.661]   - Field: ‘local’
[10:25:33.661]   - Field: ‘owner’
[10:25:33.661]   - Field: ‘envir’
[10:25:33.661]   - Field: ‘workers’
[10:25:33.661]   - Field: ‘packages’
[10:25:33.661]   - Field: ‘gc’
[10:25:33.661]   - Field: ‘conditions’
[10:25:33.661]   - Field: ‘persistent’
[10:25:33.661]   - Field: ‘expr’
[10:25:33.662]   - Field: ‘uuid’
[10:25:33.662]   - Field: ‘seed’
[10:25:33.662]   - Field: ‘version’
[10:25:33.662]   - Field: ‘result’
[10:25:33.662]   - Field: ‘asynchronous’
[10:25:33.662]   - Field: ‘calls’
[10:25:33.662]   - Field: ‘globals’
[10:25:33.662]   - Field: ‘stdout’
[10:25:33.663]   - Field: ‘earlySignal’
[10:25:33.663]   - Field: ‘lazy’
[10:25:33.663]   - Field: ‘state’
[10:25:33.663] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[10:25:33.663] - Launch lazy future ...
[10:25:33.663] Packages needed by the future expression (n = 0): <none>
[10:25:33.663] Packages needed by future strategies (n = 0): <none>
[10:25:33.664] {
[10:25:33.664]     {
[10:25:33.664]         {
[10:25:33.664]             ...future.startTime <- base::Sys.time()
[10:25:33.664]             {
[10:25:33.664]                 {
[10:25:33.664]                   {
[10:25:33.664]                     {
[10:25:33.664]                       base::local({
[10:25:33.664]                         has_future <- base::requireNamespace("future", 
[10:25:33.664]                           quietly = TRUE)
[10:25:33.664]                         if (has_future) {
[10:25:33.664]                           ns <- base::getNamespace("future")
[10:25:33.664]                           version <- ns[[".package"]][["version"]]
[10:25:33.664]                           if (is.null(version)) 
[10:25:33.664]                             version <- utils::packageVersion("future")
[10:25:33.664]                         }
[10:25:33.664]                         else {
[10:25:33.664]                           version <- NULL
[10:25:33.664]                         }
[10:25:33.664]                         if (!has_future || version < "1.8.0") {
[10:25:33.664]                           info <- base::c(r_version = base::gsub("R version ", 
[10:25:33.664]                             "", base::R.version$version.string), 
[10:25:33.664]                             platform = base::sprintf("%s (%s-bit)", 
[10:25:33.664]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:25:33.664]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[10:25:33.664]                               "release", "version")], collapse = " "), 
[10:25:33.664]                             hostname = base::Sys.info()[["nodename"]])
[10:25:33.664]                           info <- base::sprintf("%s: %s", base::names(info), 
[10:25:33.664]                             info)
[10:25:33.664]                           info <- base::paste(info, collapse = "; ")
[10:25:33.664]                           if (!has_future) {
[10:25:33.664]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:25:33.664]                               info)
[10:25:33.664]                           }
[10:25:33.664]                           else {
[10:25:33.664]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:25:33.664]                               info, version)
[10:25:33.664]                           }
[10:25:33.664]                           base::stop(msg)
[10:25:33.664]                         }
[10:25:33.664]                       })
[10:25:33.664]                     }
[10:25:33.664]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[10:25:33.664]                     base::options(mc.cores = 1L)
[10:25:33.664]                   }
[10:25:33.664]                   options(future.plan = NULL)
[10:25:33.664]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:25:33.664]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:25:33.664]                 }
[10:25:33.664]                 ...future.workdir <- getwd()
[10:25:33.664]             }
[10:25:33.664]             ...future.oldOptions <- base::as.list(base::.Options)
[10:25:33.664]             ...future.oldEnvVars <- base::Sys.getenv()
[10:25:33.664]         }
[10:25:33.664]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:25:33.664]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[10:25:33.664]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:25:33.664]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:25:33.664]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:25:33.664]             future.stdout.windows.reencode = NULL, width = 80L)
[10:25:33.664]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:25:33.664]             base::names(...future.oldOptions))
[10:25:33.664]     }
[10:25:33.664]     if (FALSE) {
[10:25:33.664]     }
[10:25:33.664]     else {
[10:25:33.664]         if (TRUE) {
[10:25:33.664]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:25:33.664]                 open = "w")
[10:25:33.664]         }
[10:25:33.664]         else {
[10:25:33.664]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:25:33.664]                 windows = "NUL", "/dev/null"), open = "w")
[10:25:33.664]         }
[10:25:33.664]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:25:33.664]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:25:33.664]             base::sink(type = "output", split = FALSE)
[10:25:33.664]             base::close(...future.stdout)
[10:25:33.664]         }, add = TRUE)
[10:25:33.664]     }
[10:25:33.664]     ...future.frame <- base::sys.nframe()
[10:25:33.664]     ...future.conditions <- base::list()
[10:25:33.664]     ...future.rng <- base::globalenv()$.Random.seed
[10:25:33.664]     if (FALSE) {
[10:25:33.664]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:25:33.664]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:25:33.664]     }
[10:25:33.664]     ...future.result <- base::tryCatch({
[10:25:33.664]         base::withCallingHandlers({
[10:25:33.664]             ...future.value <- base::withVisible(base::local({
[10:25:33.664]                 ...future.makeSendCondition <- base::local({
[10:25:33.664]                   sendCondition <- NULL
[10:25:33.664]                   function(frame = 1L) {
[10:25:33.664]                     if (is.function(sendCondition)) 
[10:25:33.664]                       return(sendCondition)
[10:25:33.664]                     ns <- getNamespace("parallel")
[10:25:33.664]                     if (exists("sendData", mode = "function", 
[10:25:33.664]                       envir = ns)) {
[10:25:33.664]                       parallel_sendData <- get("sendData", mode = "function", 
[10:25:33.664]                         envir = ns)
[10:25:33.664]                       envir <- sys.frame(frame)
[10:25:33.664]                       master <- NULL
[10:25:33.664]                       while (!identical(envir, .GlobalEnv) && 
[10:25:33.664]                         !identical(envir, emptyenv())) {
[10:25:33.664]                         if (exists("master", mode = "list", envir = envir, 
[10:25:33.664]                           inherits = FALSE)) {
[10:25:33.664]                           master <- get("master", mode = "list", 
[10:25:33.664]                             envir = envir, inherits = FALSE)
[10:25:33.664]                           if (inherits(master, c("SOCKnode", 
[10:25:33.664]                             "SOCK0node"))) {
[10:25:33.664]                             sendCondition <<- function(cond) {
[10:25:33.664]                               data <- list(type = "VALUE", value = cond, 
[10:25:33.664]                                 success = TRUE)
[10:25:33.664]                               parallel_sendData(master, data)
[10:25:33.664]                             }
[10:25:33.664]                             return(sendCondition)
[10:25:33.664]                           }
[10:25:33.664]                         }
[10:25:33.664]                         frame <- frame + 1L
[10:25:33.664]                         envir <- sys.frame(frame)
[10:25:33.664]                       }
[10:25:33.664]                     }
[10:25:33.664]                     sendCondition <<- function(cond) NULL
[10:25:33.664]                   }
[10:25:33.664]                 })
[10:25:33.664]                 withCallingHandlers({
[10:25:33.664]                   {
[10:25:33.664]                     42
[10:25:33.664]                   }
[10:25:33.664]                 }, immediateCondition = function(cond) {
[10:25:33.664]                   sendCondition <- ...future.makeSendCondition()
[10:25:33.664]                   sendCondition(cond)
[10:25:33.664]                   muffleCondition <- function (cond, pattern = "^muffle") 
[10:25:33.664]                   {
[10:25:33.664]                     inherits <- base::inherits
[10:25:33.664]                     invokeRestart <- base::invokeRestart
[10:25:33.664]                     is.null <- base::is.null
[10:25:33.664]                     muffled <- FALSE
[10:25:33.664]                     if (inherits(cond, "message")) {
[10:25:33.664]                       muffled <- grepl(pattern, "muffleMessage")
[10:25:33.664]                       if (muffled) 
[10:25:33.664]                         invokeRestart("muffleMessage")
[10:25:33.664]                     }
[10:25:33.664]                     else if (inherits(cond, "warning")) {
[10:25:33.664]                       muffled <- grepl(pattern, "muffleWarning")
[10:25:33.664]                       if (muffled) 
[10:25:33.664]                         invokeRestart("muffleWarning")
[10:25:33.664]                     }
[10:25:33.664]                     else if (inherits(cond, "condition")) {
[10:25:33.664]                       if (!is.null(pattern)) {
[10:25:33.664]                         computeRestarts <- base::computeRestarts
[10:25:33.664]                         grepl <- base::grepl
[10:25:33.664]                         restarts <- computeRestarts(cond)
[10:25:33.664]                         for (restart in restarts) {
[10:25:33.664]                           name <- restart$name
[10:25:33.664]                           if (is.null(name)) 
[10:25:33.664]                             next
[10:25:33.664]                           if (!grepl(pattern, name)) 
[10:25:33.664]                             next
[10:25:33.664]                           invokeRestart(restart)
[10:25:33.664]                           muffled <- TRUE
[10:25:33.664]                           break
[10:25:33.664]                         }
[10:25:33.664]                       }
[10:25:33.664]                     }
[10:25:33.664]                     invisible(muffled)
[10:25:33.664]                   }
[10:25:33.664]                   muffleCondition(cond)
[10:25:33.664]                 })
[10:25:33.664]             }))
[10:25:33.664]             future::FutureResult(value = ...future.value$value, 
[10:25:33.664]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:25:33.664]                   ...future.rng), globalenv = if (FALSE) 
[10:25:33.664]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:25:33.664]                     ...future.globalenv.names))
[10:25:33.664]                 else NULL, started = ...future.startTime, version = "1.8")
[10:25:33.664]         }, condition = base::local({
[10:25:33.664]             c <- base::c
[10:25:33.664]             inherits <- base::inherits
[10:25:33.664]             invokeRestart <- base::invokeRestart
[10:25:33.664]             length <- base::length
[10:25:33.664]             list <- base::list
[10:25:33.664]             seq.int <- base::seq.int
[10:25:33.664]             signalCondition <- base::signalCondition
[10:25:33.664]             sys.calls <- base::sys.calls
[10:25:33.664]             `[[` <- base::`[[`
[10:25:33.664]             `+` <- base::`+`
[10:25:33.664]             `<<-` <- base::`<<-`
[10:25:33.664]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:25:33.664]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:25:33.664]                   3L)]
[10:25:33.664]             }
[10:25:33.664]             function(cond) {
[10:25:33.664]                 is_error <- inherits(cond, "error")
[10:25:33.664]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:25:33.664]                   NULL)
[10:25:33.664]                 if (is_error) {
[10:25:33.664]                   sessionInformation <- function() {
[10:25:33.664]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:25:33.664]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:25:33.664]                       search = base::search(), system = base::Sys.info())
[10:25:33.664]                   }
[10:25:33.664]                   ...future.conditions[[length(...future.conditions) + 
[10:25:33.664]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:25:33.664]                     cond$call), session = sessionInformation(), 
[10:25:33.664]                     timestamp = base::Sys.time(), signaled = 0L)
[10:25:33.664]                   signalCondition(cond)
[10:25:33.664]                 }
[10:25:33.664]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:25:33.664]                 "immediateCondition"))) {
[10:25:33.664]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:25:33.664]                   ...future.conditions[[length(...future.conditions) + 
[10:25:33.664]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:25:33.664]                   if (TRUE && !signal) {
[10:25:33.664]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:25:33.664]                     {
[10:25:33.664]                       inherits <- base::inherits
[10:25:33.664]                       invokeRestart <- base::invokeRestart
[10:25:33.664]                       is.null <- base::is.null
[10:25:33.664]                       muffled <- FALSE
[10:25:33.664]                       if (inherits(cond, "message")) {
[10:25:33.664]                         muffled <- grepl(pattern, "muffleMessage")
[10:25:33.664]                         if (muffled) 
[10:25:33.664]                           invokeRestart("muffleMessage")
[10:25:33.664]                       }
[10:25:33.664]                       else if (inherits(cond, "warning")) {
[10:25:33.664]                         muffled <- grepl(pattern, "muffleWarning")
[10:25:33.664]                         if (muffled) 
[10:25:33.664]                           invokeRestart("muffleWarning")
[10:25:33.664]                       }
[10:25:33.664]                       else if (inherits(cond, "condition")) {
[10:25:33.664]                         if (!is.null(pattern)) {
[10:25:33.664]                           computeRestarts <- base::computeRestarts
[10:25:33.664]                           grepl <- base::grepl
[10:25:33.664]                           restarts <- computeRestarts(cond)
[10:25:33.664]                           for (restart in restarts) {
[10:25:33.664]                             name <- restart$name
[10:25:33.664]                             if (is.null(name)) 
[10:25:33.664]                               next
[10:25:33.664]                             if (!grepl(pattern, name)) 
[10:25:33.664]                               next
[10:25:33.664]                             invokeRestart(restart)
[10:25:33.664]                             muffled <- TRUE
[10:25:33.664]                             break
[10:25:33.664]                           }
[10:25:33.664]                         }
[10:25:33.664]                       }
[10:25:33.664]                       invisible(muffled)
[10:25:33.664]                     }
[10:25:33.664]                     muffleCondition(cond, pattern = "^muffle")
[10:25:33.664]                   }
[10:25:33.664]                 }
[10:25:33.664]                 else {
[10:25:33.664]                   if (TRUE) {
[10:25:33.664]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:25:33.664]                     {
[10:25:33.664]                       inherits <- base::inherits
[10:25:33.664]                       invokeRestart <- base::invokeRestart
[10:25:33.664]                       is.null <- base::is.null
[10:25:33.664]                       muffled <- FALSE
[10:25:33.664]                       if (inherits(cond, "message")) {
[10:25:33.664]                         muffled <- grepl(pattern, "muffleMessage")
[10:25:33.664]                         if (muffled) 
[10:25:33.664]                           invokeRestart("muffleMessage")
[10:25:33.664]                       }
[10:25:33.664]                       else if (inherits(cond, "warning")) {
[10:25:33.664]                         muffled <- grepl(pattern, "muffleWarning")
[10:25:33.664]                         if (muffled) 
[10:25:33.664]                           invokeRestart("muffleWarning")
[10:25:33.664]                       }
[10:25:33.664]                       else if (inherits(cond, "condition")) {
[10:25:33.664]                         if (!is.null(pattern)) {
[10:25:33.664]                           computeRestarts <- base::computeRestarts
[10:25:33.664]                           grepl <- base::grepl
[10:25:33.664]                           restarts <- computeRestarts(cond)
[10:25:33.664]                           for (restart in restarts) {
[10:25:33.664]                             name <- restart$name
[10:25:33.664]                             if (is.null(name)) 
[10:25:33.664]                               next
[10:25:33.664]                             if (!grepl(pattern, name)) 
[10:25:33.664]                               next
[10:25:33.664]                             invokeRestart(restart)
[10:25:33.664]                             muffled <- TRUE
[10:25:33.664]                             break
[10:25:33.664]                           }
[10:25:33.664]                         }
[10:25:33.664]                       }
[10:25:33.664]                       invisible(muffled)
[10:25:33.664]                     }
[10:25:33.664]                     muffleCondition(cond, pattern = "^muffle")
[10:25:33.664]                   }
[10:25:33.664]                 }
[10:25:33.664]             }
[10:25:33.664]         }))
[10:25:33.664]     }, error = function(ex) {
[10:25:33.664]         base::structure(base::list(value = NULL, visible = NULL, 
[10:25:33.664]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:25:33.664]                 ...future.rng), started = ...future.startTime, 
[10:25:33.664]             finished = Sys.time(), session_uuid = NA_character_, 
[10:25:33.664]             version = "1.8"), class = "FutureResult")
[10:25:33.664]     }, finally = {
[10:25:33.664]         if (!identical(...future.workdir, getwd())) 
[10:25:33.664]             setwd(...future.workdir)
[10:25:33.664]         {
[10:25:33.664]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:25:33.664]                 ...future.oldOptions$nwarnings <- NULL
[10:25:33.664]             }
[10:25:33.664]             base::options(...future.oldOptions)
[10:25:33.664]             if (.Platform$OS.type == "windows") {
[10:25:33.664]                 old_names <- names(...future.oldEnvVars)
[10:25:33.664]                 envs <- base::Sys.getenv()
[10:25:33.664]                 names <- names(envs)
[10:25:33.664]                 common <- intersect(names, old_names)
[10:25:33.664]                 added <- setdiff(names, old_names)
[10:25:33.664]                 removed <- setdiff(old_names, names)
[10:25:33.664]                 changed <- common[...future.oldEnvVars[common] != 
[10:25:33.664]                   envs[common]]
[10:25:33.664]                 NAMES <- toupper(changed)
[10:25:33.664]                 args <- list()
[10:25:33.664]                 for (kk in seq_along(NAMES)) {
[10:25:33.664]                   name <- changed[[kk]]
[10:25:33.664]                   NAME <- NAMES[[kk]]
[10:25:33.664]                   if (name != NAME && is.element(NAME, old_names)) 
[10:25:33.664]                     next
[10:25:33.664]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:25:33.664]                 }
[10:25:33.664]                 NAMES <- toupper(added)
[10:25:33.664]                 for (kk in seq_along(NAMES)) {
[10:25:33.664]                   name <- added[[kk]]
[10:25:33.664]                   NAME <- NAMES[[kk]]
[10:25:33.664]                   if (name != NAME && is.element(NAME, old_names)) 
[10:25:33.664]                     next
[10:25:33.664]                   args[[name]] <- ""
[10:25:33.664]                 }
[10:25:33.664]                 NAMES <- toupper(removed)
[10:25:33.664]                 for (kk in seq_along(NAMES)) {
[10:25:33.664]                   name <- removed[[kk]]
[10:25:33.664]                   NAME <- NAMES[[kk]]
[10:25:33.664]                   if (name != NAME && is.element(NAME, old_names)) 
[10:25:33.664]                     next
[10:25:33.664]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:25:33.664]                 }
[10:25:33.664]                 if (length(args) > 0) 
[10:25:33.664]                   base::do.call(base::Sys.setenv, args = args)
[10:25:33.664]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:25:33.664]             }
[10:25:33.664]             else {
[10:25:33.664]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:25:33.664]             }
[10:25:33.664]             {
[10:25:33.664]                 if (base::length(...future.futureOptionsAdded) > 
[10:25:33.664]                   0L) {
[10:25:33.664]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:25:33.664]                   base::names(opts) <- ...future.futureOptionsAdded
[10:25:33.664]                   base::options(opts)
[10:25:33.664]                 }
[10:25:33.664]                 {
[10:25:33.664]                   {
[10:25:33.664]                     base::options(mc.cores = ...future.mc.cores.old)
[10:25:33.664]                     NULL
[10:25:33.664]                   }
[10:25:33.664]                   options(future.plan = NULL)
[10:25:33.664]                   if (is.na(NA_character_)) 
[10:25:33.664]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:25:33.664]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:25:33.664]                   future::plan(list(function (..., workers = availableCores(), 
[10:25:33.664]                     lazy = FALSE, rscript_libs = .libPaths(), 
[10:25:33.664]                     envir = parent.frame()) 
[10:25:33.664]                   {
[10:25:33.664]                     if (is.function(workers)) 
[10:25:33.664]                       workers <- workers()
[10:25:33.664]                     workers <- structure(as.integer(workers), 
[10:25:33.664]                       class = class(workers))
[10:25:33.664]                     stop_if_not(length(workers) == 1, is.finite(workers), 
[10:25:33.664]                       workers >= 1)
[10:25:33.664]                     if (workers == 1L && !inherits(workers, "AsIs")) {
[10:25:33.664]                       return(sequential(..., lazy = TRUE, envir = envir))
[10:25:33.664]                     }
[10:25:33.664]                     future <- MultisessionFuture(..., workers = workers, 
[10:25:33.664]                       lazy = lazy, rscript_libs = rscript_libs, 
[10:25:33.664]                       envir = envir)
[10:25:33.664]                     if (!future$lazy) 
[10:25:33.664]                       future <- run(future)
[10:25:33.664]                     invisible(future)
[10:25:33.664]                   }), .cleanup = FALSE, .init = FALSE)
[10:25:33.664]                 }
[10:25:33.664]             }
[10:25:33.664]         }
[10:25:33.664]     })
[10:25:33.664]     if (TRUE) {
[10:25:33.664]         base::sink(type = "output", split = FALSE)
[10:25:33.664]         if (TRUE) {
[10:25:33.664]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:25:33.664]         }
[10:25:33.664]         else {
[10:25:33.664]             ...future.result["stdout"] <- base::list(NULL)
[10:25:33.664]         }
[10:25:33.664]         base::close(...future.stdout)
[10:25:33.664]         ...future.stdout <- NULL
[10:25:33.664]     }
[10:25:33.664]     ...future.result$conditions <- ...future.conditions
[10:25:33.664]     ...future.result$finished <- base::Sys.time()
[10:25:33.664]     ...future.result
[10:25:33.664] }
[10:25:33.667] MultisessionFuture started
[10:25:33.667] - Launch lazy future ... done
[10:25:33.668] run() for ‘MultisessionFuture’ ... done
MultisessionFuture:
Label: ‘<none>’
Expression:
{
    42
}
Lazy evaluation: FALSE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: FALSE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: 378a73a7-17bc-11e5-cdc3-65eb29aceac6
Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[10:25:33.679] result() for ClusterFuture ...
[10:25:33.679] receiveMessageFromWorker() for ClusterFuture ...
[10:25:33.679] - Validating connection of MultisessionFuture
[10:25:33.714] - received message: FutureResult
[10:25:33.714] - Received FutureResult
[10:25:33.714] - Erased future from FutureRegistry
[10:25:33.714] result() for ClusterFuture ...
[10:25:33.714] - result already collected: FutureResult
[10:25:33.715] result() for ClusterFuture ... done
[10:25:33.715] receiveMessageFromWorker() for ClusterFuture ... done
[10:25:33.715] result() for ClusterFuture ... done
[10:25:33.715] result() for ClusterFuture ...
[10:25:33.715] - result already collected: FutureResult
[10:25:33.715] result() for ClusterFuture ... done
[10:25:33.719] getGlobalsAndPackages() ...
[10:25:33.719] 
[10:25:33.719] - globals: [0] <none>
[10:25:33.719] getGlobalsAndPackages() ... DONE
[10:25:33.730] Packages needed by the future expression (n = 0): <none>
[10:25:33.730] Packages needed by future strategies (n = 0): <none>
[10:25:33.733] {
[10:25:33.733]     {
[10:25:33.733]         {
[10:25:33.733]             ...future.startTime <- base::Sys.time()
[10:25:33.733]             {
[10:25:33.733]                 {
[10:25:33.733]                   {
[10:25:33.733]                     {
[10:25:33.733]                       base::local({
[10:25:33.733]                         has_future <- base::requireNamespace("future", 
[10:25:33.733]                           quietly = TRUE)
[10:25:33.733]                         if (has_future) {
[10:25:33.733]                           ns <- base::getNamespace("future")
[10:25:33.733]                           version <- ns[[".package"]][["version"]]
[10:25:33.733]                           if (is.null(version)) 
[10:25:33.733]                             version <- utils::packageVersion("future")
[10:25:33.733]                         }
[10:25:33.733]                         else {
[10:25:33.733]                           version <- NULL
[10:25:33.733]                         }
[10:25:33.733]                         if (!has_future || version < "1.8.0") {
[10:25:33.733]                           info <- base::c(r_version = base::gsub("R version ", 
[10:25:33.733]                             "", base::R.version$version.string), 
[10:25:33.733]                             platform = base::sprintf("%s (%s-bit)", 
[10:25:33.733]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:25:33.733]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[10:25:33.733]                               "release", "version")], collapse = " "), 
[10:25:33.733]                             hostname = base::Sys.info()[["nodename"]])
[10:25:33.733]                           info <- base::sprintf("%s: %s", base::names(info), 
[10:25:33.733]                             info)
[10:25:33.733]                           info <- base::paste(info, collapse = "; ")
[10:25:33.733]                           if (!has_future) {
[10:25:33.733]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:25:33.733]                               info)
[10:25:33.733]                           }
[10:25:33.733]                           else {
[10:25:33.733]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:25:33.733]                               info, version)
[10:25:33.733]                           }
[10:25:33.733]                           base::stop(msg)
[10:25:33.733]                         }
[10:25:33.733]                       })
[10:25:33.733]                     }
[10:25:33.733]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[10:25:33.733]                     base::options(mc.cores = 1L)
[10:25:33.733]                   }
[10:25:33.733]                   options(future.plan = NULL)
[10:25:33.733]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:25:33.733]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:25:33.733]                 }
[10:25:33.733]                 ...future.workdir <- getwd()
[10:25:33.733]             }
[10:25:33.733]             ...future.oldOptions <- base::as.list(base::.Options)
[10:25:33.733]             ...future.oldEnvVars <- base::Sys.getenv()
[10:25:33.733]         }
[10:25:33.733]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:25:33.733]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[10:25:33.733]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:25:33.733]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:25:33.733]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:25:33.733]             future.stdout.windows.reencode = NULL, width = 80L)
[10:25:33.733]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:25:33.733]             base::names(...future.oldOptions))
[10:25:33.733]     }
[10:25:33.733]     if (FALSE) {
[10:25:33.733]     }
[10:25:33.733]     else {
[10:25:33.733]         if (TRUE) {
[10:25:33.733]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:25:33.733]                 open = "w")
[10:25:33.733]         }
[10:25:33.733]         else {
[10:25:33.733]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:25:33.733]                 windows = "NUL", "/dev/null"), open = "w")
[10:25:33.733]         }
[10:25:33.733]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:25:33.733]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:25:33.733]             base::sink(type = "output", split = FALSE)
[10:25:33.733]             base::close(...future.stdout)
[10:25:33.733]         }, add = TRUE)
[10:25:33.733]     }
[10:25:33.733]     ...future.frame <- base::sys.nframe()
[10:25:33.733]     ...future.conditions <- base::list()
[10:25:33.733]     ...future.rng <- base::globalenv()$.Random.seed
[10:25:33.733]     if (FALSE) {
[10:25:33.733]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:25:33.733]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:25:33.733]     }
[10:25:33.733]     ...future.result <- base::tryCatch({
[10:25:33.733]         base::withCallingHandlers({
[10:25:33.733]             ...future.value <- base::withVisible(base::local({
[10:25:33.733]                 ...future.makeSendCondition <- base::local({
[10:25:33.733]                   sendCondition <- NULL
[10:25:33.733]                   function(frame = 1L) {
[10:25:33.733]                     if (is.function(sendCondition)) 
[10:25:33.733]                       return(sendCondition)
[10:25:33.733]                     ns <- getNamespace("parallel")
[10:25:33.733]                     if (exists("sendData", mode = "function", 
[10:25:33.733]                       envir = ns)) {
[10:25:33.733]                       parallel_sendData <- get("sendData", mode = "function", 
[10:25:33.733]                         envir = ns)
[10:25:33.733]                       envir <- sys.frame(frame)
[10:25:33.733]                       master <- NULL
[10:25:33.733]                       while (!identical(envir, .GlobalEnv) && 
[10:25:33.733]                         !identical(envir, emptyenv())) {
[10:25:33.733]                         if (exists("master", mode = "list", envir = envir, 
[10:25:33.733]                           inherits = FALSE)) {
[10:25:33.733]                           master <- get("master", mode = "list", 
[10:25:33.733]                             envir = envir, inherits = FALSE)
[10:25:33.733]                           if (inherits(master, c("SOCKnode", 
[10:25:33.733]                             "SOCK0node"))) {
[10:25:33.733]                             sendCondition <<- function(cond) {
[10:25:33.733]                               data <- list(type = "VALUE", value = cond, 
[10:25:33.733]                                 success = TRUE)
[10:25:33.733]                               parallel_sendData(master, data)
[10:25:33.733]                             }
[10:25:33.733]                             return(sendCondition)
[10:25:33.733]                           }
[10:25:33.733]                         }
[10:25:33.733]                         frame <- frame + 1L
[10:25:33.733]                         envir <- sys.frame(frame)
[10:25:33.733]                       }
[10:25:33.733]                     }
[10:25:33.733]                     sendCondition <<- function(cond) NULL
[10:25:33.733]                   }
[10:25:33.733]                 })
[10:25:33.733]                 withCallingHandlers({
[10:25:33.733]                   42
[10:25:33.733]                 }, immediateCondition = function(cond) {
[10:25:33.733]                   sendCondition <- ...future.makeSendCondition()
[10:25:33.733]                   sendCondition(cond)
[10:25:33.733]                   muffleCondition <- function (cond, pattern = "^muffle") 
[10:25:33.733]                   {
[10:25:33.733]                     inherits <- base::inherits
[10:25:33.733]                     invokeRestart <- base::invokeRestart
[10:25:33.733]                     is.null <- base::is.null
[10:25:33.733]                     muffled <- FALSE
[10:25:33.733]                     if (inherits(cond, "message")) {
[10:25:33.733]                       muffled <- grepl(pattern, "muffleMessage")
[10:25:33.733]                       if (muffled) 
[10:25:33.733]                         invokeRestart("muffleMessage")
[10:25:33.733]                     }
[10:25:33.733]                     else if (inherits(cond, "warning")) {
[10:25:33.733]                       muffled <- grepl(pattern, "muffleWarning")
[10:25:33.733]                       if (muffled) 
[10:25:33.733]                         invokeRestart("muffleWarning")
[10:25:33.733]                     }
[10:25:33.733]                     else if (inherits(cond, "condition")) {
[10:25:33.733]                       if (!is.null(pattern)) {
[10:25:33.733]                         computeRestarts <- base::computeRestarts
[10:25:33.733]                         grepl <- base::grepl
[10:25:33.733]                         restarts <- computeRestarts(cond)
[10:25:33.733]                         for (restart in restarts) {
[10:25:33.733]                           name <- restart$name
[10:25:33.733]                           if (is.null(name)) 
[10:25:33.733]                             next
[10:25:33.733]                           if (!grepl(pattern, name)) 
[10:25:33.733]                             next
[10:25:33.733]                           invokeRestart(restart)
[10:25:33.733]                           muffled <- TRUE
[10:25:33.733]                           break
[10:25:33.733]                         }
[10:25:33.733]                       }
[10:25:33.733]                     }
[10:25:33.733]                     invisible(muffled)
[10:25:33.733]                   }
[10:25:33.733]                   muffleCondition(cond)
[10:25:33.733]                 })
[10:25:33.733]             }))
[10:25:33.733]             future::FutureResult(value = ...future.value$value, 
[10:25:33.733]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:25:33.733]                   ...future.rng), globalenv = if (FALSE) 
[10:25:33.733]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:25:33.733]                     ...future.globalenv.names))
[10:25:33.733]                 else NULL, started = ...future.startTime, version = "1.8")
[10:25:33.733]         }, condition = base::local({
[10:25:33.733]             c <- base::c
[10:25:33.733]             inherits <- base::inherits
[10:25:33.733]             invokeRestart <- base::invokeRestart
[10:25:33.733]             length <- base::length
[10:25:33.733]             list <- base::list
[10:25:33.733]             seq.int <- base::seq.int
[10:25:33.733]             signalCondition <- base::signalCondition
[10:25:33.733]             sys.calls <- base::sys.calls
[10:25:33.733]             `[[` <- base::`[[`
[10:25:33.733]             `+` <- base::`+`
[10:25:33.733]             `<<-` <- base::`<<-`
[10:25:33.733]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:25:33.733]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:25:33.733]                   3L)]
[10:25:33.733]             }
[10:25:33.733]             function(cond) {
[10:25:33.733]                 is_error <- inherits(cond, "error")
[10:25:33.733]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:25:33.733]                   NULL)
[10:25:33.733]                 if (is_error) {
[10:25:33.733]                   sessionInformation <- function() {
[10:25:33.733]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:25:33.733]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:25:33.733]                       search = base::search(), system = base::Sys.info())
[10:25:33.733]                   }
[10:25:33.733]                   ...future.conditions[[length(...future.conditions) + 
[10:25:33.733]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:25:33.733]                     cond$call), session = sessionInformation(), 
[10:25:33.733]                     timestamp = base::Sys.time(), signaled = 0L)
[10:25:33.733]                   signalCondition(cond)
[10:25:33.733]                 }
[10:25:33.733]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:25:33.733]                 "immediateCondition"))) {
[10:25:33.733]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:25:33.733]                   ...future.conditions[[length(...future.conditions) + 
[10:25:33.733]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:25:33.733]                   if (TRUE && !signal) {
[10:25:33.733]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:25:33.733]                     {
[10:25:33.733]                       inherits <- base::inherits
[10:25:33.733]                       invokeRestart <- base::invokeRestart
[10:25:33.733]                       is.null <- base::is.null
[10:25:33.733]                       muffled <- FALSE
[10:25:33.733]                       if (inherits(cond, "message")) {
[10:25:33.733]                         muffled <- grepl(pattern, "muffleMessage")
[10:25:33.733]                         if (muffled) 
[10:25:33.733]                           invokeRestart("muffleMessage")
[10:25:33.733]                       }
[10:25:33.733]                       else if (inherits(cond, "warning")) {
[10:25:33.733]                         muffled <- grepl(pattern, "muffleWarning")
[10:25:33.733]                         if (muffled) 
[10:25:33.733]                           invokeRestart("muffleWarning")
[10:25:33.733]                       }
[10:25:33.733]                       else if (inherits(cond, "condition")) {
[10:25:33.733]                         if (!is.null(pattern)) {
[10:25:33.733]                           computeRestarts <- base::computeRestarts
[10:25:33.733]                           grepl <- base::grepl
[10:25:33.733]                           restarts <- computeRestarts(cond)
[10:25:33.733]                           for (restart in restarts) {
[10:25:33.733]                             name <- restart$name
[10:25:33.733]                             if (is.null(name)) 
[10:25:33.733]                               next
[10:25:33.733]                             if (!grepl(pattern, name)) 
[10:25:33.733]                               next
[10:25:33.733]                             invokeRestart(restart)
[10:25:33.733]                             muffled <- TRUE
[10:25:33.733]                             break
[10:25:33.733]                           }
[10:25:33.733]                         }
[10:25:33.733]                       }
[10:25:33.733]                       invisible(muffled)
[10:25:33.733]                     }
[10:25:33.733]                     muffleCondition(cond, pattern = "^muffle")
[10:25:33.733]                   }
[10:25:33.733]                 }
[10:25:33.733]                 else {
[10:25:33.733]                   if (TRUE) {
[10:25:33.733]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:25:33.733]                     {
[10:25:33.733]                       inherits <- base::inherits
[10:25:33.733]                       invokeRestart <- base::invokeRestart
[10:25:33.733]                       is.null <- base::is.null
[10:25:33.733]                       muffled <- FALSE
[10:25:33.733]                       if (inherits(cond, "message")) {
[10:25:33.733]                         muffled <- grepl(pattern, "muffleMessage")
[10:25:33.733]                         if (muffled) 
[10:25:33.733]                           invokeRestart("muffleMessage")
[10:25:33.733]                       }
[10:25:33.733]                       else if (inherits(cond, "warning")) {
[10:25:33.733]                         muffled <- grepl(pattern, "muffleWarning")
[10:25:33.733]                         if (muffled) 
[10:25:33.733]                           invokeRestart("muffleWarning")
[10:25:33.733]                       }
[10:25:33.733]                       else if (inherits(cond, "condition")) {
[10:25:33.733]                         if (!is.null(pattern)) {
[10:25:33.733]                           computeRestarts <- base::computeRestarts
[10:25:33.733]                           grepl <- base::grepl
[10:25:33.733]                           restarts <- computeRestarts(cond)
[10:25:33.733]                           for (restart in restarts) {
[10:25:33.733]                             name <- restart$name
[10:25:33.733]                             if (is.null(name)) 
[10:25:33.733]                               next
[10:25:33.733]                             if (!grepl(pattern, name)) 
[10:25:33.733]                               next
[10:25:33.733]                             invokeRestart(restart)
[10:25:33.733]                             muffled <- TRUE
[10:25:33.733]                             break
[10:25:33.733]                           }
[10:25:33.733]                         }
[10:25:33.733]                       }
[10:25:33.733]                       invisible(muffled)
[10:25:33.733]                     }
[10:25:33.733]                     muffleCondition(cond, pattern = "^muffle")
[10:25:33.733]                   }
[10:25:33.733]                 }
[10:25:33.733]             }
[10:25:33.733]         }))
[10:25:33.733]     }, error = function(ex) {
[10:25:33.733]         base::structure(base::list(value = NULL, visible = NULL, 
[10:25:33.733]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:25:33.733]                 ...future.rng), started = ...future.startTime, 
[10:25:33.733]             finished = Sys.time(), session_uuid = NA_character_, 
[10:25:33.733]             version = "1.8"), class = "FutureResult")
[10:25:33.733]     }, finally = {
[10:25:33.733]         if (!identical(...future.workdir, getwd())) 
[10:25:33.733]             setwd(...future.workdir)
[10:25:33.733]         {
[10:25:33.733]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:25:33.733]                 ...future.oldOptions$nwarnings <- NULL
[10:25:33.733]             }
[10:25:33.733]             base::options(...future.oldOptions)
[10:25:33.733]             if (.Platform$OS.type == "windows") {
[10:25:33.733]                 old_names <- names(...future.oldEnvVars)
[10:25:33.733]                 envs <- base::Sys.getenv()
[10:25:33.733]                 names <- names(envs)
[10:25:33.733]                 common <- intersect(names, old_names)
[10:25:33.733]                 added <- setdiff(names, old_names)
[10:25:33.733]                 removed <- setdiff(old_names, names)
[10:25:33.733]                 changed <- common[...future.oldEnvVars[common] != 
[10:25:33.733]                   envs[common]]
[10:25:33.733]                 NAMES <- toupper(changed)
[10:25:33.733]                 args <- list()
[10:25:33.733]                 for (kk in seq_along(NAMES)) {
[10:25:33.733]                   name <- changed[[kk]]
[10:25:33.733]                   NAME <- NAMES[[kk]]
[10:25:33.733]                   if (name != NAME && is.element(NAME, old_names)) 
[10:25:33.733]                     next
[10:25:33.733]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:25:33.733]                 }
[10:25:33.733]                 NAMES <- toupper(added)
[10:25:33.733]                 for (kk in seq_along(NAMES)) {
[10:25:33.733]                   name <- added[[kk]]
[10:25:33.733]                   NAME <- NAMES[[kk]]
[10:25:33.733]                   if (name != NAME && is.element(NAME, old_names)) 
[10:25:33.733]                     next
[10:25:33.733]                   args[[name]] <- ""
[10:25:33.733]                 }
[10:25:33.733]                 NAMES <- toupper(removed)
[10:25:33.733]                 for (kk in seq_along(NAMES)) {
[10:25:33.733]                   name <- removed[[kk]]
[10:25:33.733]                   NAME <- NAMES[[kk]]
[10:25:33.733]                   if (name != NAME && is.element(NAME, old_names)) 
[10:25:33.733]                     next
[10:25:33.733]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:25:33.733]                 }
[10:25:33.733]                 if (length(args) > 0) 
[10:25:33.733]                   base::do.call(base::Sys.setenv, args = args)
[10:25:33.733]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:25:33.733]             }
[10:25:33.733]             else {
[10:25:33.733]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:25:33.733]             }
[10:25:33.733]             {
[10:25:33.733]                 if (base::length(...future.futureOptionsAdded) > 
[10:25:33.733]                   0L) {
[10:25:33.733]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:25:33.733]                   base::names(opts) <- ...future.futureOptionsAdded
[10:25:33.733]                   base::options(opts)
[10:25:33.733]                 }
[10:25:33.733]                 {
[10:25:33.733]                   {
[10:25:33.733]                     base::options(mc.cores = ...future.mc.cores.old)
[10:25:33.733]                     NULL
[10:25:33.733]                   }
[10:25:33.733]                   options(future.plan = NULL)
[10:25:33.733]                   if (is.na(NA_character_)) 
[10:25:33.733]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:25:33.733]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:25:33.733]                   future::plan(list(function (..., workers = availableCores(), 
[10:25:33.733]                     lazy = FALSE, rscript_libs = .libPaths(), 
[10:25:33.733]                     envir = parent.frame()) 
[10:25:33.733]                   {
[10:25:33.733]                     if (is.function(workers)) 
[10:25:33.733]                       workers <- workers()
[10:25:33.733]                     workers <- structure(as.integer(workers), 
[10:25:33.733]                       class = class(workers))
[10:25:33.733]                     stop_if_not(length(workers) == 1, is.finite(workers), 
[10:25:33.733]                       workers >= 1)
[10:25:33.733]                     if (workers == 1L && !inherits(workers, "AsIs")) {
[10:25:33.733]                       return(sequential(..., lazy = TRUE, envir = envir))
[10:25:33.733]                     }
[10:25:33.733]                     future <- MultisessionFuture(..., workers = workers, 
[10:25:33.733]                       lazy = lazy, rscript_libs = rscript_libs, 
[10:25:33.733]                       envir = envir)
[10:25:33.733]                     if (!future$lazy) 
[10:25:33.733]                       future <- run(future)
[10:25:33.733]                     invisible(future)
[10:25:33.733]                   }), .cleanup = FALSE, .init = FALSE)
[10:25:33.733]                 }
[10:25:33.733]             }
[10:25:33.733]         }
[10:25:33.733]     })
[10:25:33.733]     if (TRUE) {
[10:25:33.733]         base::sink(type = "output", split = FALSE)
[10:25:33.733]         if (TRUE) {
[10:25:33.733]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:25:33.733]         }
[10:25:33.733]         else {
[10:25:33.733]             ...future.result["stdout"] <- base::list(NULL)
[10:25:33.733]         }
[10:25:33.733]         base::close(...future.stdout)
[10:25:33.733]         ...future.stdout <- NULL
[10:25:33.733]     }
[10:25:33.733]     ...future.result$conditions <- ...future.conditions
[10:25:33.733]     ...future.result$finished <- base::Sys.time()
[10:25:33.733]     ...future.result
[10:25:33.733] }
[10:25:33.736] MultisessionFuture started
MultisessionFuture:
Label: ‘strategy = multisession’
Expression:
[1] 42
Lazy evaluation: FALSE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: FALSE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: 378a73a7-17bc-11e5-cdc3-65eb29aceac6
Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[10:25:33.747] result() for ClusterFuture ...
[10:25:33.748] receiveMessageFromWorker() for ClusterFuture ...
[10:25:33.748] - Validating connection of MultisessionFuture
[10:25:33.783] - received message: FutureResult
[10:25:33.783] - Received FutureResult
[10:25:33.783] - Erased future from FutureRegistry
[10:25:33.783] result() for ClusterFuture ...
[10:25:33.783] - result already collected: FutureResult
[10:25:33.783] result() for ClusterFuture ... done
[10:25:33.783] receiveMessageFromWorker() for ClusterFuture ... done
[10:25:33.784] result() for ClusterFuture ... done
[10:25:33.784] result() for ClusterFuture ...
[10:25:33.784] - result already collected: FutureResult
[10:25:33.784] result() for ClusterFuture ... done
[10:25:33.784] getGlobalsAndPackages() ...
[10:25:33.784] Searching for globals...
[10:25:33.784] 
[10:25:33.784] Searching for globals ... DONE
[10:25:33.785] - globals: [0] <none>
[10:25:33.785] getGlobalsAndPackages() ... DONE
[10:25:33.785] run() for ‘Future’ ...
[10:25:33.785] - state: ‘created’
[10:25:33.785] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[10:25:33.799] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[10:25:33.799] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[10:25:33.799]   - Field: ‘node’
[10:25:33.799]   - Field: ‘label’
[10:25:33.799]   - Field: ‘local’
[10:25:33.799]   - Field: ‘owner’
[10:25:33.799]   - Field: ‘envir’
[10:25:33.799]   - Field: ‘workers’
[10:25:33.799]   - Field: ‘packages’
[10:25:33.800]   - Field: ‘gc’
[10:25:33.800]   - Field: ‘conditions’
[10:25:33.800]   - Field: ‘persistent’
[10:25:33.800]   - Field: ‘expr’
[10:25:33.800]   - Field: ‘uuid’
[10:25:33.800]   - Field: ‘seed’
[10:25:33.800]   - Field: ‘version’
[10:25:33.800]   - Field: ‘result’
[10:25:33.800]   - Field: ‘asynchronous’
[10:25:33.800]   - Field: ‘calls’
[10:25:33.800]   - Field: ‘globals’
[10:25:33.801]   - Field: ‘stdout’
[10:25:33.801]   - Field: ‘earlySignal’
[10:25:33.801]   - Field: ‘lazy’
[10:25:33.801]   - Field: ‘state’
[10:25:33.801] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[10:25:33.801] - Launch lazy future ...
[10:25:33.801] Packages needed by the future expression (n = 0): <none>
[10:25:33.801] Packages needed by future strategies (n = 0): <none>
[10:25:33.802] {
[10:25:33.802]     {
[10:25:33.802]         {
[10:25:33.802]             ...future.startTime <- base::Sys.time()
[10:25:33.802]             {
[10:25:33.802]                 {
[10:25:33.802]                   {
[10:25:33.802]                     {
[10:25:33.802]                       base::local({
[10:25:33.802]                         has_future <- base::requireNamespace("future", 
[10:25:33.802]                           quietly = TRUE)
[10:25:33.802]                         if (has_future) {
[10:25:33.802]                           ns <- base::getNamespace("future")
[10:25:33.802]                           version <- ns[[".package"]][["version"]]
[10:25:33.802]                           if (is.null(version)) 
[10:25:33.802]                             version <- utils::packageVersion("future")
[10:25:33.802]                         }
[10:25:33.802]                         else {
[10:25:33.802]                           version <- NULL
[10:25:33.802]                         }
[10:25:33.802]                         if (!has_future || version < "1.8.0") {
[10:25:33.802]                           info <- base::c(r_version = base::gsub("R version ", 
[10:25:33.802]                             "", base::R.version$version.string), 
[10:25:33.802]                             platform = base::sprintf("%s (%s-bit)", 
[10:25:33.802]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:25:33.802]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[10:25:33.802]                               "release", "version")], collapse = " "), 
[10:25:33.802]                             hostname = base::Sys.info()[["nodename"]])
[10:25:33.802]                           info <- base::sprintf("%s: %s", base::names(info), 
[10:25:33.802]                             info)
[10:25:33.802]                           info <- base::paste(info, collapse = "; ")
[10:25:33.802]                           if (!has_future) {
[10:25:33.802]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:25:33.802]                               info)
[10:25:33.802]                           }
[10:25:33.802]                           else {
[10:25:33.802]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:25:33.802]                               info, version)
[10:25:33.802]                           }
[10:25:33.802]                           base::stop(msg)
[10:25:33.802]                         }
[10:25:33.802]                       })
[10:25:33.802]                     }
[10:25:33.802]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[10:25:33.802]                     base::options(mc.cores = 1L)
[10:25:33.802]                   }
[10:25:33.802]                   options(future.plan = NULL)
[10:25:33.802]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:25:33.802]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:25:33.802]                 }
[10:25:33.802]                 ...future.workdir <- getwd()
[10:25:33.802]             }
[10:25:33.802]             ...future.oldOptions <- base::as.list(base::.Options)
[10:25:33.802]             ...future.oldEnvVars <- base::Sys.getenv()
[10:25:33.802]         }
[10:25:33.802]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:25:33.802]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[10:25:33.802]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:25:33.802]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:25:33.802]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:25:33.802]             future.stdout.windows.reencode = NULL, width = 80L)
[10:25:33.802]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:25:33.802]             base::names(...future.oldOptions))
[10:25:33.802]     }
[10:25:33.802]     if (FALSE) {
[10:25:33.802]     }
[10:25:33.802]     else {
[10:25:33.802]         if (TRUE) {
[10:25:33.802]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:25:33.802]                 open = "w")
[10:25:33.802]         }
[10:25:33.802]         else {
[10:25:33.802]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:25:33.802]                 windows = "NUL", "/dev/null"), open = "w")
[10:25:33.802]         }
[10:25:33.802]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:25:33.802]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:25:33.802]             base::sink(type = "output", split = FALSE)
[10:25:33.802]             base::close(...future.stdout)
[10:25:33.802]         }, add = TRUE)
[10:25:33.802]     }
[10:25:33.802]     ...future.frame <- base::sys.nframe()
[10:25:33.802]     ...future.conditions <- base::list()
[10:25:33.802]     ...future.rng <- base::globalenv()$.Random.seed
[10:25:33.802]     if (FALSE) {
[10:25:33.802]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:25:33.802]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:25:33.802]     }
[10:25:33.802]     ...future.result <- base::tryCatch({
[10:25:33.802]         base::withCallingHandlers({
[10:25:33.802]             ...future.value <- base::withVisible(base::local({
[10:25:33.802]                 ...future.makeSendCondition <- base::local({
[10:25:33.802]                   sendCondition <- NULL
[10:25:33.802]                   function(frame = 1L) {
[10:25:33.802]                     if (is.function(sendCondition)) 
[10:25:33.802]                       return(sendCondition)
[10:25:33.802]                     ns <- getNamespace("parallel")
[10:25:33.802]                     if (exists("sendData", mode = "function", 
[10:25:33.802]                       envir = ns)) {
[10:25:33.802]                       parallel_sendData <- get("sendData", mode = "function", 
[10:25:33.802]                         envir = ns)
[10:25:33.802]                       envir <- sys.frame(frame)
[10:25:33.802]                       master <- NULL
[10:25:33.802]                       while (!identical(envir, .GlobalEnv) && 
[10:25:33.802]                         !identical(envir, emptyenv())) {
[10:25:33.802]                         if (exists("master", mode = "list", envir = envir, 
[10:25:33.802]                           inherits = FALSE)) {
[10:25:33.802]                           master <- get("master", mode = "list", 
[10:25:33.802]                             envir = envir, inherits = FALSE)
[10:25:33.802]                           if (inherits(master, c("SOCKnode", 
[10:25:33.802]                             "SOCK0node"))) {
[10:25:33.802]                             sendCondition <<- function(cond) {
[10:25:33.802]                               data <- list(type = "VALUE", value = cond, 
[10:25:33.802]                                 success = TRUE)
[10:25:33.802]                               parallel_sendData(master, data)
[10:25:33.802]                             }
[10:25:33.802]                             return(sendCondition)
[10:25:33.802]                           }
[10:25:33.802]                         }
[10:25:33.802]                         frame <- frame + 1L
[10:25:33.802]                         envir <- sys.frame(frame)
[10:25:33.802]                       }
[10:25:33.802]                     }
[10:25:33.802]                     sendCondition <<- function(cond) NULL
[10:25:33.802]                   }
[10:25:33.802]                 })
[10:25:33.802]                 withCallingHandlers({
[10:25:33.802]                   42
[10:25:33.802]                 }, immediateCondition = function(cond) {
[10:25:33.802]                   sendCondition <- ...future.makeSendCondition()
[10:25:33.802]                   sendCondition(cond)
[10:25:33.802]                   muffleCondition <- function (cond, pattern = "^muffle") 
[10:25:33.802]                   {
[10:25:33.802]                     inherits <- base::inherits
[10:25:33.802]                     invokeRestart <- base::invokeRestart
[10:25:33.802]                     is.null <- base::is.null
[10:25:33.802]                     muffled <- FALSE
[10:25:33.802]                     if (inherits(cond, "message")) {
[10:25:33.802]                       muffled <- grepl(pattern, "muffleMessage")
[10:25:33.802]                       if (muffled) 
[10:25:33.802]                         invokeRestart("muffleMessage")
[10:25:33.802]                     }
[10:25:33.802]                     else if (inherits(cond, "warning")) {
[10:25:33.802]                       muffled <- grepl(pattern, "muffleWarning")
[10:25:33.802]                       if (muffled) 
[10:25:33.802]                         invokeRestart("muffleWarning")
[10:25:33.802]                     }
[10:25:33.802]                     else if (inherits(cond, "condition")) {
[10:25:33.802]                       if (!is.null(pattern)) {
[10:25:33.802]                         computeRestarts <- base::computeRestarts
[10:25:33.802]                         grepl <- base::grepl
[10:25:33.802]                         restarts <- computeRestarts(cond)
[10:25:33.802]                         for (restart in restarts) {
[10:25:33.802]                           name <- restart$name
[10:25:33.802]                           if (is.null(name)) 
[10:25:33.802]                             next
[10:25:33.802]                           if (!grepl(pattern, name)) 
[10:25:33.802]                             next
[10:25:33.802]                           invokeRestart(restart)
[10:25:33.802]                           muffled <- TRUE
[10:25:33.802]                           break
[10:25:33.802]                         }
[10:25:33.802]                       }
[10:25:33.802]                     }
[10:25:33.802]                     invisible(muffled)
[10:25:33.802]                   }
[10:25:33.802]                   muffleCondition(cond)
[10:25:33.802]                 })
[10:25:33.802]             }))
[10:25:33.802]             future::FutureResult(value = ...future.value$value, 
[10:25:33.802]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:25:33.802]                   ...future.rng), globalenv = if (FALSE) 
[10:25:33.802]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:25:33.802]                     ...future.globalenv.names))
[10:25:33.802]                 else NULL, started = ...future.startTime, version = "1.8")
[10:25:33.802]         }, condition = base::local({
[10:25:33.802]             c <- base::c
[10:25:33.802]             inherits <- base::inherits
[10:25:33.802]             invokeRestart <- base::invokeRestart
[10:25:33.802]             length <- base::length
[10:25:33.802]             list <- base::list
[10:25:33.802]             seq.int <- base::seq.int
[10:25:33.802]             signalCondition <- base::signalCondition
[10:25:33.802]             sys.calls <- base::sys.calls
[10:25:33.802]             `[[` <- base::`[[`
[10:25:33.802]             `+` <- base::`+`
[10:25:33.802]             `<<-` <- base::`<<-`
[10:25:33.802]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:25:33.802]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:25:33.802]                   3L)]
[10:25:33.802]             }
[10:25:33.802]             function(cond) {
[10:25:33.802]                 is_error <- inherits(cond, "error")
[10:25:33.802]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:25:33.802]                   NULL)
[10:25:33.802]                 if (is_error) {
[10:25:33.802]                   sessionInformation <- function() {
[10:25:33.802]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:25:33.802]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:25:33.802]                       search = base::search(), system = base::Sys.info())
[10:25:33.802]                   }
[10:25:33.802]                   ...future.conditions[[length(...future.conditions) + 
[10:25:33.802]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:25:33.802]                     cond$call), session = sessionInformation(), 
[10:25:33.802]                     timestamp = base::Sys.time(), signaled = 0L)
[10:25:33.802]                   signalCondition(cond)
[10:25:33.802]                 }
[10:25:33.802]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:25:33.802]                 "immediateCondition"))) {
[10:25:33.802]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:25:33.802]                   ...future.conditions[[length(...future.conditions) + 
[10:25:33.802]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:25:33.802]                   if (TRUE && !signal) {
[10:25:33.802]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:25:33.802]                     {
[10:25:33.802]                       inherits <- base::inherits
[10:25:33.802]                       invokeRestart <- base::invokeRestart
[10:25:33.802]                       is.null <- base::is.null
[10:25:33.802]                       muffled <- FALSE
[10:25:33.802]                       if (inherits(cond, "message")) {
[10:25:33.802]                         muffled <- grepl(pattern, "muffleMessage")
[10:25:33.802]                         if (muffled) 
[10:25:33.802]                           invokeRestart("muffleMessage")
[10:25:33.802]                       }
[10:25:33.802]                       else if (inherits(cond, "warning")) {
[10:25:33.802]                         muffled <- grepl(pattern, "muffleWarning")
[10:25:33.802]                         if (muffled) 
[10:25:33.802]                           invokeRestart("muffleWarning")
[10:25:33.802]                       }
[10:25:33.802]                       else if (inherits(cond, "condition")) {
[10:25:33.802]                         if (!is.null(pattern)) {
[10:25:33.802]                           computeRestarts <- base::computeRestarts
[10:25:33.802]                           grepl <- base::grepl
[10:25:33.802]                           restarts <- computeRestarts(cond)
[10:25:33.802]                           for (restart in restarts) {
[10:25:33.802]                             name <- restart$name
[10:25:33.802]                             if (is.null(name)) 
[10:25:33.802]                               next
[10:25:33.802]                             if (!grepl(pattern, name)) 
[10:25:33.802]                               next
[10:25:33.802]                             invokeRestart(restart)
[10:25:33.802]                             muffled <- TRUE
[10:25:33.802]                             break
[10:25:33.802]                           }
[10:25:33.802]                         }
[10:25:33.802]                       }
[10:25:33.802]                       invisible(muffled)
[10:25:33.802]                     }
[10:25:33.802]                     muffleCondition(cond, pattern = "^muffle")
[10:25:33.802]                   }
[10:25:33.802]                 }
[10:25:33.802]                 else {
[10:25:33.802]                   if (TRUE) {
[10:25:33.802]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:25:33.802]                     {
[10:25:33.802]                       inherits <- base::inherits
[10:25:33.802]                       invokeRestart <- base::invokeRestart
[10:25:33.802]                       is.null <- base::is.null
[10:25:33.802]                       muffled <- FALSE
[10:25:33.802]                       if (inherits(cond, "message")) {
[10:25:33.802]                         muffled <- grepl(pattern, "muffleMessage")
[10:25:33.802]                         if (muffled) 
[10:25:33.802]                           invokeRestart("muffleMessage")
[10:25:33.802]                       }
[10:25:33.802]                       else if (inherits(cond, "warning")) {
[10:25:33.802]                         muffled <- grepl(pattern, "muffleWarning")
[10:25:33.802]                         if (muffled) 
[10:25:33.802]                           invokeRestart("muffleWarning")
[10:25:33.802]                       }
[10:25:33.802]                       else if (inherits(cond, "condition")) {
[10:25:33.802]                         if (!is.null(pattern)) {
[10:25:33.802]                           computeRestarts <- base::computeRestarts
[10:25:33.802]                           grepl <- base::grepl
[10:25:33.802]                           restarts <- computeRestarts(cond)
[10:25:33.802]                           for (restart in restarts) {
[10:25:33.802]                             name <- restart$name
[10:25:33.802]                             if (is.null(name)) 
[10:25:33.802]                               next
[10:25:33.802]                             if (!grepl(pattern, name)) 
[10:25:33.802]                               next
[10:25:33.802]                             invokeRestart(restart)
[10:25:33.802]                             muffled <- TRUE
[10:25:33.802]                             break
[10:25:33.802]                           }
[10:25:33.802]                         }
[10:25:33.802]                       }
[10:25:33.802]                       invisible(muffled)
[10:25:33.802]                     }
[10:25:33.802]                     muffleCondition(cond, pattern = "^muffle")
[10:25:33.802]                   }
[10:25:33.802]                 }
[10:25:33.802]             }
[10:25:33.802]         }))
[10:25:33.802]     }, error = function(ex) {
[10:25:33.802]         base::structure(base::list(value = NULL, visible = NULL, 
[10:25:33.802]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:25:33.802]                 ...future.rng), started = ...future.startTime, 
[10:25:33.802]             finished = Sys.time(), session_uuid = NA_character_, 
[10:25:33.802]             version = "1.8"), class = "FutureResult")
[10:25:33.802]     }, finally = {
[10:25:33.802]         if (!identical(...future.workdir, getwd())) 
[10:25:33.802]             setwd(...future.workdir)
[10:25:33.802]         {
[10:25:33.802]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:25:33.802]                 ...future.oldOptions$nwarnings <- NULL
[10:25:33.802]             }
[10:25:33.802]             base::options(...future.oldOptions)
[10:25:33.802]             if (.Platform$OS.type == "windows") {
[10:25:33.802]                 old_names <- names(...future.oldEnvVars)
[10:25:33.802]                 envs <- base::Sys.getenv()
[10:25:33.802]                 names <- names(envs)
[10:25:33.802]                 common <- intersect(names, old_names)
[10:25:33.802]                 added <- setdiff(names, old_names)
[10:25:33.802]                 removed <- setdiff(old_names, names)
[10:25:33.802]                 changed <- common[...future.oldEnvVars[common] != 
[10:25:33.802]                   envs[common]]
[10:25:33.802]                 NAMES <- toupper(changed)
[10:25:33.802]                 args <- list()
[10:25:33.802]                 for (kk in seq_along(NAMES)) {
[10:25:33.802]                   name <- changed[[kk]]
[10:25:33.802]                   NAME <- NAMES[[kk]]
[10:25:33.802]                   if (name != NAME && is.element(NAME, old_names)) 
[10:25:33.802]                     next
[10:25:33.802]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:25:33.802]                 }
[10:25:33.802]                 NAMES <- toupper(added)
[10:25:33.802]                 for (kk in seq_along(NAMES)) {
[10:25:33.802]                   name <- added[[kk]]
[10:25:33.802]                   NAME <- NAMES[[kk]]
[10:25:33.802]                   if (name != NAME && is.element(NAME, old_names)) 
[10:25:33.802]                     next
[10:25:33.802]                   args[[name]] <- ""
[10:25:33.802]                 }
[10:25:33.802]                 NAMES <- toupper(removed)
[10:25:33.802]                 for (kk in seq_along(NAMES)) {
[10:25:33.802]                   name <- removed[[kk]]
[10:25:33.802]                   NAME <- NAMES[[kk]]
[10:25:33.802]                   if (name != NAME && is.element(NAME, old_names)) 
[10:25:33.802]                     next
[10:25:33.802]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:25:33.802]                 }
[10:25:33.802]                 if (length(args) > 0) 
[10:25:33.802]                   base::do.call(base::Sys.setenv, args = args)
[10:25:33.802]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:25:33.802]             }
[10:25:33.802]             else {
[10:25:33.802]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:25:33.802]             }
[10:25:33.802]             {
[10:25:33.802]                 if (base::length(...future.futureOptionsAdded) > 
[10:25:33.802]                   0L) {
[10:25:33.802]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:25:33.802]                   base::names(opts) <- ...future.futureOptionsAdded
[10:25:33.802]                   base::options(opts)
[10:25:33.802]                 }
[10:25:33.802]                 {
[10:25:33.802]                   {
[10:25:33.802]                     base::options(mc.cores = ...future.mc.cores.old)
[10:25:33.802]                     NULL
[10:25:33.802]                   }
[10:25:33.802]                   options(future.plan = NULL)
[10:25:33.802]                   if (is.na(NA_character_)) 
[10:25:33.802]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:25:33.802]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:25:33.802]                   future::plan(list(function (..., workers = availableCores(), 
[10:25:33.802]                     lazy = FALSE, rscript_libs = .libPaths(), 
[10:25:33.802]                     envir = parent.frame()) 
[10:25:33.802]                   {
[10:25:33.802]                     if (is.function(workers)) 
[10:25:33.802]                       workers <- workers()
[10:25:33.802]                     workers <- structure(as.integer(workers), 
[10:25:33.802]                       class = class(workers))
[10:25:33.802]                     stop_if_not(length(workers) == 1, is.finite(workers), 
[10:25:33.802]                       workers >= 1)
[10:25:33.802]                     if (workers == 1L && !inherits(workers, "AsIs")) {
[10:25:33.802]                       return(sequential(..., lazy = TRUE, envir = envir))
[10:25:33.802]                     }
[10:25:33.802]                     future <- MultisessionFuture(..., workers = workers, 
[10:25:33.802]                       lazy = lazy, rscript_libs = rscript_libs, 
[10:25:33.802]                       envir = envir)
[10:25:33.802]                     if (!future$lazy) 
[10:25:33.802]                       future <- run(future)
[10:25:33.802]                     invisible(future)
[10:25:33.802]                   }), .cleanup = FALSE, .init = FALSE)
[10:25:33.802]                 }
[10:25:33.802]             }
[10:25:33.802]         }
[10:25:33.802]     })
[10:25:33.802]     if (TRUE) {
[10:25:33.802]         base::sink(type = "output", split = FALSE)
[10:25:33.802]         if (TRUE) {
[10:25:33.802]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:25:33.802]         }
[10:25:33.802]         else {
[10:25:33.802]             ...future.result["stdout"] <- base::list(NULL)
[10:25:33.802]         }
[10:25:33.802]         base::close(...future.stdout)
[10:25:33.802]         ...future.stdout <- NULL
[10:25:33.802]     }
[10:25:33.802]     ...future.result$conditions <- ...future.conditions
[10:25:33.802]     ...future.result$finished <- base::Sys.time()
[10:25:33.802]     ...future.result
[10:25:33.802] }
[10:25:33.805] MultisessionFuture started
[10:25:33.805] - Launch lazy future ... done
[10:25:33.805] run() for ‘MultisessionFuture’ ... done
MultisessionFuture:
Label: ‘strategy = multisession’
Expression:
[1] 42
Lazy evaluation: FALSE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: FALSE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: 378a73a7-17bc-11e5-cdc3-65eb29aceac6
Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[10:25:33.816] result() for ClusterFuture ...
[10:25:33.816] receiveMessageFromWorker() for ClusterFuture ...
[10:25:33.816] - Validating connection of MultisessionFuture
[10:25:33.850] - received message: FutureResult
[10:25:33.850] - Received FutureResult
[10:25:33.850] - Erased future from FutureRegistry
[10:25:33.851] result() for ClusterFuture ...
[10:25:33.851] - result already collected: FutureResult
[10:25:33.851] result() for ClusterFuture ... done
[10:25:33.851] receiveMessageFromWorker() for ClusterFuture ... done
[10:25:33.851] result() for ClusterFuture ... done
[10:25:33.851] result() for ClusterFuture ...
[10:25:33.851] - result already collected: FutureResult
[10:25:33.851] result() for ClusterFuture ... done
[10:25:33.851] getGlobalsAndPackages() ...
[10:25:33.852] Searching for globals...
[10:25:33.852] - globals found: [1] ‘{’
[10:25:33.852] Searching for globals ... DONE
[10:25:33.852] Resolving globals: FALSE
[10:25:33.853] 
[10:25:33.853] 
[10:25:33.853] getGlobalsAndPackages() ... DONE
[10:25:33.853] run() for ‘Future’ ...
[10:25:33.853] - state: ‘created’
[10:25:33.853] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[10:25:33.867] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[10:25:33.867] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[10:25:33.867]   - Field: ‘node’
[10:25:33.867]   - Field: ‘label’
[10:25:33.867]   - Field: ‘local’
[10:25:33.867]   - Field: ‘owner’
[10:25:33.867]   - Field: ‘envir’
[10:25:33.867]   - Field: ‘workers’
[10:25:33.867]   - Field: ‘packages’
[10:25:33.868]   - Field: ‘gc’
[10:25:33.868]   - Field: ‘conditions’
[10:25:33.868]   - Field: ‘persistent’
[10:25:33.868]   - Field: ‘expr’
[10:25:33.868]   - Field: ‘uuid’
[10:25:33.868]   - Field: ‘seed’
[10:25:33.868]   - Field: ‘version’
[10:25:33.868]   - Field: ‘result’
[10:25:33.868]   - Field: ‘asynchronous’
[10:25:33.868]   - Field: ‘calls’
[10:25:33.868]   - Field: ‘globals’
[10:25:33.869]   - Field: ‘stdout’
[10:25:33.869]   - Field: ‘earlySignal’
[10:25:33.869]   - Field: ‘lazy’
[10:25:33.869]   - Field: ‘state’
[10:25:33.869] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[10:25:33.869] - Launch lazy future ...
[10:25:33.869] Packages needed by the future expression (n = 0): <none>
[10:25:33.869] Packages needed by future strategies (n = 0): <none>
[10:25:33.870] {
[10:25:33.870]     {
[10:25:33.870]         {
[10:25:33.870]             ...future.startTime <- base::Sys.time()
[10:25:33.870]             {
[10:25:33.870]                 {
[10:25:33.870]                   {
[10:25:33.870]                     {
[10:25:33.870]                       base::local({
[10:25:33.870]                         has_future <- base::requireNamespace("future", 
[10:25:33.870]                           quietly = TRUE)
[10:25:33.870]                         if (has_future) {
[10:25:33.870]                           ns <- base::getNamespace("future")
[10:25:33.870]                           version <- ns[[".package"]][["version"]]
[10:25:33.870]                           if (is.null(version)) 
[10:25:33.870]                             version <- utils::packageVersion("future")
[10:25:33.870]                         }
[10:25:33.870]                         else {
[10:25:33.870]                           version <- NULL
[10:25:33.870]                         }
[10:25:33.870]                         if (!has_future || version < "1.8.0") {
[10:25:33.870]                           info <- base::c(r_version = base::gsub("R version ", 
[10:25:33.870]                             "", base::R.version$version.string), 
[10:25:33.870]                             platform = base::sprintf("%s (%s-bit)", 
[10:25:33.870]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:25:33.870]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[10:25:33.870]                               "release", "version")], collapse = " "), 
[10:25:33.870]                             hostname = base::Sys.info()[["nodename"]])
[10:25:33.870]                           info <- base::sprintf("%s: %s", base::names(info), 
[10:25:33.870]                             info)
[10:25:33.870]                           info <- base::paste(info, collapse = "; ")
[10:25:33.870]                           if (!has_future) {
[10:25:33.870]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:25:33.870]                               info)
[10:25:33.870]                           }
[10:25:33.870]                           else {
[10:25:33.870]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:25:33.870]                               info, version)
[10:25:33.870]                           }
[10:25:33.870]                           base::stop(msg)
[10:25:33.870]                         }
[10:25:33.870]                       })
[10:25:33.870]                     }
[10:25:33.870]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[10:25:33.870]                     base::options(mc.cores = 1L)
[10:25:33.870]                   }
[10:25:33.870]                   options(future.plan = NULL)
[10:25:33.870]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:25:33.870]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:25:33.870]                 }
[10:25:33.870]                 ...future.workdir <- getwd()
[10:25:33.870]             }
[10:25:33.870]             ...future.oldOptions <- base::as.list(base::.Options)
[10:25:33.870]             ...future.oldEnvVars <- base::Sys.getenv()
[10:25:33.870]         }
[10:25:33.870]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:25:33.870]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[10:25:33.870]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:25:33.870]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:25:33.870]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:25:33.870]             future.stdout.windows.reencode = NULL, width = 80L)
[10:25:33.870]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:25:33.870]             base::names(...future.oldOptions))
[10:25:33.870]     }
[10:25:33.870]     if (FALSE) {
[10:25:33.870]     }
[10:25:33.870]     else {
[10:25:33.870]         if (TRUE) {
[10:25:33.870]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:25:33.870]                 open = "w")
[10:25:33.870]         }
[10:25:33.870]         else {
[10:25:33.870]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:25:33.870]                 windows = "NUL", "/dev/null"), open = "w")
[10:25:33.870]         }
[10:25:33.870]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:25:33.870]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:25:33.870]             base::sink(type = "output", split = FALSE)
[10:25:33.870]             base::close(...future.stdout)
[10:25:33.870]         }, add = TRUE)
[10:25:33.870]     }
[10:25:33.870]     ...future.frame <- base::sys.nframe()
[10:25:33.870]     ...future.conditions <- base::list()
[10:25:33.870]     ...future.rng <- base::globalenv()$.Random.seed
[10:25:33.870]     if (FALSE) {
[10:25:33.870]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:25:33.870]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:25:33.870]     }
[10:25:33.870]     ...future.result <- base::tryCatch({
[10:25:33.870]         base::withCallingHandlers({
[10:25:33.870]             ...future.value <- base::withVisible(base::local({
[10:25:33.870]                 ...future.makeSendCondition <- base::local({
[10:25:33.870]                   sendCondition <- NULL
[10:25:33.870]                   function(frame = 1L) {
[10:25:33.870]                     if (is.function(sendCondition)) 
[10:25:33.870]                       return(sendCondition)
[10:25:33.870]                     ns <- getNamespace("parallel")
[10:25:33.870]                     if (exists("sendData", mode = "function", 
[10:25:33.870]                       envir = ns)) {
[10:25:33.870]                       parallel_sendData <- get("sendData", mode = "function", 
[10:25:33.870]                         envir = ns)
[10:25:33.870]                       envir <- sys.frame(frame)
[10:25:33.870]                       master <- NULL
[10:25:33.870]                       while (!identical(envir, .GlobalEnv) && 
[10:25:33.870]                         !identical(envir, emptyenv())) {
[10:25:33.870]                         if (exists("master", mode = "list", envir = envir, 
[10:25:33.870]                           inherits = FALSE)) {
[10:25:33.870]                           master <- get("master", mode = "list", 
[10:25:33.870]                             envir = envir, inherits = FALSE)
[10:25:33.870]                           if (inherits(master, c("SOCKnode", 
[10:25:33.870]                             "SOCK0node"))) {
[10:25:33.870]                             sendCondition <<- function(cond) {
[10:25:33.870]                               data <- list(type = "VALUE", value = cond, 
[10:25:33.870]                                 success = TRUE)
[10:25:33.870]                               parallel_sendData(master, data)
[10:25:33.870]                             }
[10:25:33.870]                             return(sendCondition)
[10:25:33.870]                           }
[10:25:33.870]                         }
[10:25:33.870]                         frame <- frame + 1L
[10:25:33.870]                         envir <- sys.frame(frame)
[10:25:33.870]                       }
[10:25:33.870]                     }
[10:25:33.870]                     sendCondition <<- function(cond) NULL
[10:25:33.870]                   }
[10:25:33.870]                 })
[10:25:33.870]                 withCallingHandlers({
[10:25:33.870]                   {
[10:25:33.870]                     42
[10:25:33.870]                   }
[10:25:33.870]                 }, immediateCondition = function(cond) {
[10:25:33.870]                   sendCondition <- ...future.makeSendCondition()
[10:25:33.870]                   sendCondition(cond)
[10:25:33.870]                   muffleCondition <- function (cond, pattern = "^muffle") 
[10:25:33.870]                   {
[10:25:33.870]                     inherits <- base::inherits
[10:25:33.870]                     invokeRestart <- base::invokeRestart
[10:25:33.870]                     is.null <- base::is.null
[10:25:33.870]                     muffled <- FALSE
[10:25:33.870]                     if (inherits(cond, "message")) {
[10:25:33.870]                       muffled <- grepl(pattern, "muffleMessage")
[10:25:33.870]                       if (muffled) 
[10:25:33.870]                         invokeRestart("muffleMessage")
[10:25:33.870]                     }
[10:25:33.870]                     else if (inherits(cond, "warning")) {
[10:25:33.870]                       muffled <- grepl(pattern, "muffleWarning")
[10:25:33.870]                       if (muffled) 
[10:25:33.870]                         invokeRestart("muffleWarning")
[10:25:33.870]                     }
[10:25:33.870]                     else if (inherits(cond, "condition")) {
[10:25:33.870]                       if (!is.null(pattern)) {
[10:25:33.870]                         computeRestarts <- base::computeRestarts
[10:25:33.870]                         grepl <- base::grepl
[10:25:33.870]                         restarts <- computeRestarts(cond)
[10:25:33.870]                         for (restart in restarts) {
[10:25:33.870]                           name <- restart$name
[10:25:33.870]                           if (is.null(name)) 
[10:25:33.870]                             next
[10:25:33.870]                           if (!grepl(pattern, name)) 
[10:25:33.870]                             next
[10:25:33.870]                           invokeRestart(restart)
[10:25:33.870]                           muffled <- TRUE
[10:25:33.870]                           break
[10:25:33.870]                         }
[10:25:33.870]                       }
[10:25:33.870]                     }
[10:25:33.870]                     invisible(muffled)
[10:25:33.870]                   }
[10:25:33.870]                   muffleCondition(cond)
[10:25:33.870]                 })
[10:25:33.870]             }))
[10:25:33.870]             future::FutureResult(value = ...future.value$value, 
[10:25:33.870]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:25:33.870]                   ...future.rng), globalenv = if (FALSE) 
[10:25:33.870]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:25:33.870]                     ...future.globalenv.names))
[10:25:33.870]                 else NULL, started = ...future.startTime, version = "1.8")
[10:25:33.870]         }, condition = base::local({
[10:25:33.870]             c <- base::c
[10:25:33.870]             inherits <- base::inherits
[10:25:33.870]             invokeRestart <- base::invokeRestart
[10:25:33.870]             length <- base::length
[10:25:33.870]             list <- base::list
[10:25:33.870]             seq.int <- base::seq.int
[10:25:33.870]             signalCondition <- base::signalCondition
[10:25:33.870]             sys.calls <- base::sys.calls
[10:25:33.870]             `[[` <- base::`[[`
[10:25:33.870]             `+` <- base::`+`
[10:25:33.870]             `<<-` <- base::`<<-`
[10:25:33.870]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:25:33.870]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:25:33.870]                   3L)]
[10:25:33.870]             }
[10:25:33.870]             function(cond) {
[10:25:33.870]                 is_error <- inherits(cond, "error")
[10:25:33.870]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:25:33.870]                   NULL)
[10:25:33.870]                 if (is_error) {
[10:25:33.870]                   sessionInformation <- function() {
[10:25:33.870]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:25:33.870]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:25:33.870]                       search = base::search(), system = base::Sys.info())
[10:25:33.870]                   }
[10:25:33.870]                   ...future.conditions[[length(...future.conditions) + 
[10:25:33.870]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:25:33.870]                     cond$call), session = sessionInformation(), 
[10:25:33.870]                     timestamp = base::Sys.time(), signaled = 0L)
[10:25:33.870]                   signalCondition(cond)
[10:25:33.870]                 }
[10:25:33.870]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:25:33.870]                 "immediateCondition"))) {
[10:25:33.870]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:25:33.870]                   ...future.conditions[[length(...future.conditions) + 
[10:25:33.870]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:25:33.870]                   if (TRUE && !signal) {
[10:25:33.870]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:25:33.870]                     {
[10:25:33.870]                       inherits <- base::inherits
[10:25:33.870]                       invokeRestart <- base::invokeRestart
[10:25:33.870]                       is.null <- base::is.null
[10:25:33.870]                       muffled <- FALSE
[10:25:33.870]                       if (inherits(cond, "message")) {
[10:25:33.870]                         muffled <- grepl(pattern, "muffleMessage")
[10:25:33.870]                         if (muffled) 
[10:25:33.870]                           invokeRestart("muffleMessage")
[10:25:33.870]                       }
[10:25:33.870]                       else if (inherits(cond, "warning")) {
[10:25:33.870]                         muffled <- grepl(pattern, "muffleWarning")
[10:25:33.870]                         if (muffled) 
[10:25:33.870]                           invokeRestart("muffleWarning")
[10:25:33.870]                       }
[10:25:33.870]                       else if (inherits(cond, "condition")) {
[10:25:33.870]                         if (!is.null(pattern)) {
[10:25:33.870]                           computeRestarts <- base::computeRestarts
[10:25:33.870]                           grepl <- base::grepl
[10:25:33.870]                           restarts <- computeRestarts(cond)
[10:25:33.870]                           for (restart in restarts) {
[10:25:33.870]                             name <- restart$name
[10:25:33.870]                             if (is.null(name)) 
[10:25:33.870]                               next
[10:25:33.870]                             if (!grepl(pattern, name)) 
[10:25:33.870]                               next
[10:25:33.870]                             invokeRestart(restart)
[10:25:33.870]                             muffled <- TRUE
[10:25:33.870]                             break
[10:25:33.870]                           }
[10:25:33.870]                         }
[10:25:33.870]                       }
[10:25:33.870]                       invisible(muffled)
[10:25:33.870]                     }
[10:25:33.870]                     muffleCondition(cond, pattern = "^muffle")
[10:25:33.870]                   }
[10:25:33.870]                 }
[10:25:33.870]                 else {
[10:25:33.870]                   if (TRUE) {
[10:25:33.870]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:25:33.870]                     {
[10:25:33.870]                       inherits <- base::inherits
[10:25:33.870]                       invokeRestart <- base::invokeRestart
[10:25:33.870]                       is.null <- base::is.null
[10:25:33.870]                       muffled <- FALSE
[10:25:33.870]                       if (inherits(cond, "message")) {
[10:25:33.870]                         muffled <- grepl(pattern, "muffleMessage")
[10:25:33.870]                         if (muffled) 
[10:25:33.870]                           invokeRestart("muffleMessage")
[10:25:33.870]                       }
[10:25:33.870]                       else if (inherits(cond, "warning")) {
[10:25:33.870]                         muffled <- grepl(pattern, "muffleWarning")
[10:25:33.870]                         if (muffled) 
[10:25:33.870]                           invokeRestart("muffleWarning")
[10:25:33.870]                       }
[10:25:33.870]                       else if (inherits(cond, "condition")) {
[10:25:33.870]                         if (!is.null(pattern)) {
[10:25:33.870]                           computeRestarts <- base::computeRestarts
[10:25:33.870]                           grepl <- base::grepl
[10:25:33.870]                           restarts <- computeRestarts(cond)
[10:25:33.870]                           for (restart in restarts) {
[10:25:33.870]                             name <- restart$name
[10:25:33.870]                             if (is.null(name)) 
[10:25:33.870]                               next
[10:25:33.870]                             if (!grepl(pattern, name)) 
[10:25:33.870]                               next
[10:25:33.870]                             invokeRestart(restart)
[10:25:33.870]                             muffled <- TRUE
[10:25:33.870]                             break
[10:25:33.870]                           }
[10:25:33.870]                         }
[10:25:33.870]                       }
[10:25:33.870]                       invisible(muffled)
[10:25:33.870]                     }
[10:25:33.870]                     muffleCondition(cond, pattern = "^muffle")
[10:25:33.870]                   }
[10:25:33.870]                 }
[10:25:33.870]             }
[10:25:33.870]         }))
[10:25:33.870]     }, error = function(ex) {
[10:25:33.870]         base::structure(base::list(value = NULL, visible = NULL, 
[10:25:33.870]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:25:33.870]                 ...future.rng), started = ...future.startTime, 
[10:25:33.870]             finished = Sys.time(), session_uuid = NA_character_, 
[10:25:33.870]             version = "1.8"), class = "FutureResult")
[10:25:33.870]     }, finally = {
[10:25:33.870]         if (!identical(...future.workdir, getwd())) 
[10:25:33.870]             setwd(...future.workdir)
[10:25:33.870]         {
[10:25:33.870]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:25:33.870]                 ...future.oldOptions$nwarnings <- NULL
[10:25:33.870]             }
[10:25:33.870]             base::options(...future.oldOptions)
[10:25:33.870]             if (.Platform$OS.type == "windows") {
[10:25:33.870]                 old_names <- names(...future.oldEnvVars)
[10:25:33.870]                 envs <- base::Sys.getenv()
[10:25:33.870]                 names <- names(envs)
[10:25:33.870]                 common <- intersect(names, old_names)
[10:25:33.870]                 added <- setdiff(names, old_names)
[10:25:33.870]                 removed <- setdiff(old_names, names)
[10:25:33.870]                 changed <- common[...future.oldEnvVars[common] != 
[10:25:33.870]                   envs[common]]
[10:25:33.870]                 NAMES <- toupper(changed)
[10:25:33.870]                 args <- list()
[10:25:33.870]                 for (kk in seq_along(NAMES)) {
[10:25:33.870]                   name <- changed[[kk]]
[10:25:33.870]                   NAME <- NAMES[[kk]]
[10:25:33.870]                   if (name != NAME && is.element(NAME, old_names)) 
[10:25:33.870]                     next
[10:25:33.870]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:25:33.870]                 }
[10:25:33.870]                 NAMES <- toupper(added)
[10:25:33.870]                 for (kk in seq_along(NAMES)) {
[10:25:33.870]                   name <- added[[kk]]
[10:25:33.870]                   NAME <- NAMES[[kk]]
[10:25:33.870]                   if (name != NAME && is.element(NAME, old_names)) 
[10:25:33.870]                     next
[10:25:33.870]                   args[[name]] <- ""
[10:25:33.870]                 }
[10:25:33.870]                 NAMES <- toupper(removed)
[10:25:33.870]                 for (kk in seq_along(NAMES)) {
[10:25:33.870]                   name <- removed[[kk]]
[10:25:33.870]                   NAME <- NAMES[[kk]]
[10:25:33.870]                   if (name != NAME && is.element(NAME, old_names)) 
[10:25:33.870]                     next
[10:25:33.870]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:25:33.870]                 }
[10:25:33.870]                 if (length(args) > 0) 
[10:25:33.870]                   base::do.call(base::Sys.setenv, args = args)
[10:25:33.870]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:25:33.870]             }
[10:25:33.870]             else {
[10:25:33.870]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:25:33.870]             }
[10:25:33.870]             {
[10:25:33.870]                 if (base::length(...future.futureOptionsAdded) > 
[10:25:33.870]                   0L) {
[10:25:33.870]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:25:33.870]                   base::names(opts) <- ...future.futureOptionsAdded
[10:25:33.870]                   base::options(opts)
[10:25:33.870]                 }
[10:25:33.870]                 {
[10:25:33.870]                   {
[10:25:33.870]                     base::options(mc.cores = ...future.mc.cores.old)
[10:25:33.870]                     NULL
[10:25:33.870]                   }
[10:25:33.870]                   options(future.plan = NULL)
[10:25:33.870]                   if (is.na(NA_character_)) 
[10:25:33.870]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:25:33.870]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:25:33.870]                   future::plan(list(function (..., workers = availableCores(), 
[10:25:33.870]                     lazy = FALSE, rscript_libs = .libPaths(), 
[10:25:33.870]                     envir = parent.frame()) 
[10:25:33.870]                   {
[10:25:33.870]                     if (is.function(workers)) 
[10:25:33.870]                       workers <- workers()
[10:25:33.870]                     workers <- structure(as.integer(workers), 
[10:25:33.870]                       class = class(workers))
[10:25:33.870]                     stop_if_not(length(workers) == 1, is.finite(workers), 
[10:25:33.870]                       workers >= 1)
[10:25:33.870]                     if (workers == 1L && !inherits(workers, "AsIs")) {
[10:25:33.870]                       return(sequential(..., lazy = TRUE, envir = envir))
[10:25:33.870]                     }
[10:25:33.870]                     future <- MultisessionFuture(..., workers = workers, 
[10:25:33.870]                       lazy = lazy, rscript_libs = rscript_libs, 
[10:25:33.870]                       envir = envir)
[10:25:33.870]                     if (!future$lazy) 
[10:25:33.870]                       future <- run(future)
[10:25:33.870]                     invisible(future)
[10:25:33.870]                   }), .cleanup = FALSE, .init = FALSE)
[10:25:33.870]                 }
[10:25:33.870]             }
[10:25:33.870]         }
[10:25:33.870]     })
[10:25:33.870]     if (TRUE) {
[10:25:33.870]         base::sink(type = "output", split = FALSE)
[10:25:33.870]         if (TRUE) {
[10:25:33.870]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:25:33.870]         }
[10:25:33.870]         else {
[10:25:33.870]             ...future.result["stdout"] <- base::list(NULL)
[10:25:33.870]         }
[10:25:33.870]         base::close(...future.stdout)
[10:25:33.870]         ...future.stdout <- NULL
[10:25:33.870]     }
[10:25:33.870]     ...future.result$conditions <- ...future.conditions
[10:25:33.870]     ...future.result$finished <- base::Sys.time()
[10:25:33.870]     ...future.result
[10:25:33.870] }
[10:25:33.873] MultisessionFuture started
[10:25:33.873] - Launch lazy future ... done
[10:25:33.873] run() for ‘MultisessionFuture’ ... done
MultisessionFuture:
Label: ‘strategy = multisession’
Expression:
{
    42
}
Lazy evaluation: FALSE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: FALSE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: 378a73a7-17bc-11e5-cdc3-65eb29aceac6
Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[10:25:33.884] result() for ClusterFuture ...
[10:25:33.884] receiveMessageFromWorker() for ClusterFuture ...
[10:25:33.884] - Validating connection of MultisessionFuture
[10:25:33.918] - received message: FutureResult
[10:25:33.918] - Received FutureResult
[10:25:33.918] - Erased future from FutureRegistry
[10:25:33.918] result() for ClusterFuture ...
[10:25:33.918] - result already collected: FutureResult
[10:25:33.918] result() for ClusterFuture ... done
[10:25:33.918] receiveMessageFromWorker() for ClusterFuture ... done
[10:25:33.918] result() for ClusterFuture ... done
[10:25:33.919] result() for ClusterFuture ...
[10:25:33.919] - result already collected: FutureResult
[10:25:33.919] result() for ClusterFuture ... done
- plan('multisession') ... DONE
> 
> message("*** Futures - labels ... DONE")
*** Futures - labels ... DONE
> 
> source("incl/end.R")
[10:25:33.919] plan(): Setting new future strategy stack:
[10:25:33.920] List of future strategies:
[10:25:33.920] 1. FutureStrategy:
[10:25:33.920]    - args: function (..., envir = parent.frame())
[10:25:33.920]    - tweaked: FALSE
[10:25:33.920]    - call: future::plan(oplan)
[10:25:33.920] plan(): nbrOfWorkers() = 1
> 
